EconomicMapImplTest#testRemoveNull()::: economic map impl test test remove null:::map->EconomicMap->create->map->removeKey
EconomicMapImplTest#testInitFromHashSet()::: economic map impl test test init from hash set:::set->new->UnmodifiableEconomicSet<Integer>->newSet->EconomicSet->create->Assert->newSet->size->assertEquals
EconomicMapImplTest#testCopyHash()::: economic map impl test test copy hash:::set->EconomicSet->create->set->Arrays->asList->addAll->newSet->EconomicSet->create->Assert->newSet->size->assertEquals->newSet->remove->newSet->remove->Assert->newSet->size->assertEquals
EconomicMapImplTest#testNewEquivalence()::: economic map impl test test new equivalence:::set->EconomicSet->new->Equivalence->create->set->Arrays->asList->addAll->Assert->set->newInteger->add->assertTrue
EconomicMapImplTest#newInteger(int)::: economic map impl test new integer:::return->new->Integer
EconomicMapImplTest#testMapPutNull()::: economic map impl test test map put null:::map->EconomicMap->create->map->put
EconomicMapLargeTest#data()::: economic map large test data:::return->Arrays->new->ObjectArr->EconomicMap->create->EconomicMap->create->new->ObjectArr->EconomicMap->create->EconomicMap->create->new->ObjectArr->EconomicMap->create->EconomicMap->create->new->ObjectArr->EconomicMap->create->EconomicMap->new->LinkedHashMap<>->wrapMap->new->ObjectArr->EconomicMap->new->LinkedHashMap<>->wrapMap->EconomicMap->new->LinkedHashMap<>->wrapMap->asList
EconomicMapLargeTest#createRandomRange(Random, int)::: economic map large test create random range:::result->new->intArr->for->i->return
EconomicMapLargeTest.BadHashClass#hashCode()::: bad hash class hash code:::return
EconomicMapLargeTest.BadHashClass#equals(Object)::: bad hash class equals:::if->badHashClass->return->return
EconomicMapLargeTest.MapAction#perform(EconomicMap, int)::: map action perform:::
EconomicMapLargeTest#testVeryLarge()::: economic map large test test very large:::testMap->clear->referenceMap->clear->random->new->Random->for->i
EconomicMapLargeTest#testAddRemove():::Tests a sequence of random operations on the map.:::testMap->clear->referenceMap->clear->for->seed
EconomicMapLargeTest#removeElement(int, EconomicMap, EconomicMap)::: economic map large test remove element:::Assert->referenceMap->size->map->size->assertEquals->cursor->map->getEntries->referenceCursor->referenceMap->getEntries->z->while->cursor->advance->Assert->referenceCursor->advance->assertTrue->Assert->referenceCursor->getKey->cursor->getKey->assertEquals->Assert->referenceCursor->getValue->cursor->getValue->assertEquals->if->cursor->remove->referenceCursor->remove->Assert->referenceCursor->advance->assertFalse
EconomicMapLargeTest#checkEquality(EconomicMap, EconomicMap)::: economic map large test check equality:::Assert->referenceMap->size->map->size->assertEquals->cursor->map->getEntries->referenceCursor->referenceMap->getEntries->while->cursor->advance->Assert->referenceCursor->advance->assertTrue->Assert->referenceCursor->getKey->cursor->getKey->assertEquals->Assert->referenceCursor->getValue->cursor->getValue->assertEquals->iterator->map->getKeys->iterator->referenceIterator->referenceMap->getKeys->iterator->while->iterator->hasNext->Assert->referenceIterator->hasNext->assertTrue->Assert->iterator->next->referenceIterator->next->assertEquals->map->getValues->iterator->referenceMap->getValues->iterator->while->iterator->hasNext->Assert->referenceIterator->hasNext->assertTrue->Assert->iterator->next->referenceIterator->next->assertEquals->Assert->referenceIterator->hasNext->assertFalse
EconomicMapTest#testMapGetDefault()::: economic map test test map get default:::map->EconomicMap->create->map->put->Assert->map->get->Integer->valueOf->assertEquals->Assert->map->get->Integer->valueOf->assertEquals
EconomicMapTest#testMapPutAll()::: economic map test test map put all:::map->EconomicMap->create->newMap->EconomicMap->new->LinkedHashMap<>->wrapMap->newMap->put->newMap->put->map->putAll->Assert->map->size->assertEquals->unmodifiableEconomicMap->EconomicMap->create->map->removeKey->map->put->map->put->map->putAll->Assert->map->size->assertEquals->Assert->map->get->Integer->valueOf->assertEquals
EconomicMapTest#testToString()::: economic map test test to string:::map->EconomicMap->create->map->put->map->put->Assert->map->toString->assertEquals
EconomicSetTest#testUtilities()::: economic set test test utilities:::set->EconomicSet->create->set->add->Assert->set->add->assertTrue->Assert->set->size->assertEquals->Assert->set->add->assertFalse->Assert->set->size->assertEquals->set->remove->Assert->set->size->assertEquals->set->remove->Assert->set->size->assertEquals->Assert->set->add->assertTrue->set->clear->Assert->set->size->assertEquals
EconomicSetTest#testAddAll()::: economic set test test add all:::set->EconomicSet->create->set->Arrays->asList->addAll->Assert->set->size->assertEquals->newSet->EconomicSet->create->newSet->Arrays->asList->addAll->Assert->newSet->size->assertEquals->newSet->addAll->Assert->newSet->size->assertEquals
EconomicSetTest#testRemoveAll()::: economic set test test remove all:::set->EconomicSet->create->set->Arrays->asList->addAll->set->Arrays->asList->removeAll->Assert->set->size->assertEquals->set->EconomicSet->create->removeAll->Assert->set->size->assertEquals
EconomicSetTest#testRetainAll()::: economic set test test retain all:::set->EconomicSet->create->set->Arrays->asList->addAll->newSet->EconomicSet->create->newSet->Arrays->asList->addAll->set->retainAll->Assert->set->size->assertEquals
EconomicSetTest#testToArray()::: economic set test test to array:::set->EconomicSet->create->set->Arrays->asList->addAll->Assert->set->new->IntegerArr->toArray->new->IntegerArr->assertArrayEquals
EconomicSetTest#testToString()::: economic set test test to string:::set->EconomicSet->create->set->Arrays->asList->addAll->Assert->set->toString->assertEquals
EconomicSetTest#testToUnalignedArray()::: economic set test test to unaligned array:::Assert->EconomicSet->create->new->IntegerArr->toArray->new->IntegerArr->assertArrayEquals
EconomicSetTest#testSetRemoval()::: economic set test test set removal:::initialList->new->ArrayList<>->removalList->new->ArrayList<>->finalList->new->ArrayList<>->set->EconomicSet->create->set->add->set->add->set->add->set->add->set->add->set->add->set->add->set->add->set->add->i1->set->iterator->while->i1->hasNext->initialList->i1->next->add->size->i2->set->iterator->while->i2->hasNext->elem->i2->next->if->i2->remove->removalList->add->i3->set->iterator->while->i3->hasNext->finalList->i3->next->add->Assert->assertEquals->Assert->finalList->size->assertEquals->Assert->newInteger->finalList->get->assertEquals
EconomicSetTest#newInteger(int)::: economic set test new integer:::return->new->Integer
EquivalenceTest#testDEFAULT()::: equivalence test test t:::Assert->new->String->equals->assertTrue->Assert->hashCode->new->String->hashCode->assertEquals->Assert->equals->assertFalse->Assert->hashCode->hashCode->assertNotEquals
EquivalenceTest#testIDENTITY()::: equivalence test test y:::Assert->new->String->equals->assertFalse->Assert->hashCode->new->String->hashCode->assertEquals->Assert->equals->assertFalse->Assert->hashCode->hashCode->assertNotEquals
EquivalenceTest#testIDENTITYWITHSYSTEMHASHCODE()::: equivalence test test e:::Assert->new->String->equals->assertFalse->Assert->hashCode->new->String->hashCode->assertNotEquals->Assert->equals->assertFalse->Assert->hashCode->hashCode->assertNotEquals
PairTest#testCreate()::: pair test test create:::Assert->Pair->create->Pair->empty->assertEquals->Assert->Pair->create->assertNotEquals->Assert->Pair->createLeft->Pair->empty->assertEquals->Assert->Pair->createRight->Pair->empty->assertEquals->Assert->Pair->create->Pair->createLeft->assertEquals->Assert->Pair->create->Pair->createRight->assertEquals
PairTest#testUtilities()::: pair test test utilities:::pair->Pair->create->Assert->pair->getLeft->Integer->valueOf->assertEquals->Assert->pair->getRight->assertEquals->Assert->pair->toString->assertEquals->Assert->pair->hashCode->Pair->createLeft->hashCode->assertEquals

CompositionArea#setHandlerInfo(CompositionAreaHandler, InputContext):::Sets the composition area handler that currently owns this composition area, and its input context.:::setInputContext
CompositionArea#getInputMethodRequests()::: composition area get input method requests:::return
CompositionArea#getCaretRectangle(TextHitInfo)::: composition area get caret rectangle:::caretLocation->layout->if->Math->layout->getCaretInfo->round->g->getGraphics->metrics->try->g->getFontMetrics->catch->finally->g->dispose->return->metrics->getAscent->metrics->getAscent->metrics->getDescent->new->Rectangle
CompositionArea#paint(Graphics)::: composition area paint:::super->paint->g->getForeground->setColor->layout->if->layout->draw->if->rectangle->getCaretRectangle->g->getBackground->setXORMode->g->fillRect->g->setPaintMode
CompositionArea#setCompositionAreaVisible(boolean)::: composition area set composition area visible:::compositionWindow->setVisible
CompositionArea#isCompositionAreaVisible()::: composition area is composition area visible:::return->compositionWindow->isVisible
CompositionArea.FrameWindowAdapter#windowActivated(WindowEvent)::: frame window adapter window activated:::requestFocus
CompositionArea#inputMethodTextChanged(InputMethodEvent)::: composition area input method text changed:::handler->inputMethodTextChanged
CompositionArea#caretPositionChanged(InputMethodEvent)::: composition area caret position changed:::handler->caretPositionChanged
CompositionArea#setText(AttributedCharacterIterator, TextHitInfo):::Sets the text and caret to be displayed in this composition area:::if->compositionWindow->setVisible->else->if->compositionWindow->isVisible->compositionWindow->setVisible->g->getGraphics->if->return->try->updateWindowLocation->context->getFontRenderContext->new->TextLayout->bounds->composedTextLayout->getBounds->metrics->g->getFontMetrics->maxCharBoundsRec->metrics->getMaxCharBounds->newHeight->maxCharBoundsRec->getHeight->newFrameHeight->compositionWindow->getInsets->compositionWindow->getInsets->req->handler->getClientInputMethodRequests->newWidth->bounds->getWidth->newFrameWidth->compositionWindow->getInsets->compositionWindow->getInsets->new->Dimension->setPreferredSize->compositionWindow->new->Dimension->setSize->paint->catch->finally->g->dispose
CompositionArea#setCaret(TextHitInfo):::Sets the caret to be displayed in this composition area:::if->compositionWindow->isVisible->g->getGraphics->try->paint->catch->finally->g->dispose
CompositionArea#updateWindowLocation():::Positions the composition window near (usually below) the insertion point in the client component if the client component is an active client (below-the-spot input).:::req->handler->getClientInputMethodRequests->if->return->windowLocation->new->Point->caretRect->req->getTextLocation->screenSize->Toolkit->getDefaultToolkit->getScreenSize->windowSize->compositionWindow->getSize->SPACING->if->else->if->else->compositionWindow->setLocation
CompositionArea#getTextLocation(TextHitInfo)::: composition area get text location:::rectangle->getCaretRectangle->location->getLocationOnScreen->rectangle->translate->return
CompositionArea#getLocationOffset(int, int)::: composition area get location offset:::layout->if->return->else->location->getLocationOnScreen->if->layout->getBounds->contains->return->layout->hitTestChar->else->return
CompositionArea#setCompositionAreaUndecorated(boolean)::: composition area set composition area undecorated:::if->compositionWindow->isDisplayable->compositionWindow->removeNotify->compositionWindow->setUndecorated->compositionWindow->pack
CompositionAreaHandler#createCompositionArea():::Creates the composition area.:::synchronized->new->CompositionArea->if->compositionArea->setHandlerInfo->client->clientComponent->get->if->req->client->getInputMethodRequests->if->inputMethodContext->useBelowTheSpotInput->setCompositionAreaUndecorated
CompositionAreaHandler#setClientComponent(Component)::: composition area handler set client component:::new->WeakReference<>
CompositionAreaHandler#grabCompositionArea(boolean)::: composition area handler grab composition area:::synchronized->if->if->compositionArea->setHandlerInfo->if->if->createCompositionArea->if->compositionArea->setText
CompositionAreaHandler#releaseCompositionArea():::Releases and closes the composition area if it is currently owned by this composition area handler.:::synchronized->if->if->compositionArea->setHandlerInfo->compositionArea->setText
CompositionAreaHandler#closeCompositionArea():::Releases and closes the composition area if it has been created, independent of the current owner.:::if->synchronized->compositionArea->setHandlerInfo->compositionArea->setText
CompositionAreaHandler#isCompositionAreaVisible():::Returns whether the composition area is currently visible:::if->return->compositionArea->isCompositionAreaVisible->return
CompositionAreaHandler#setCompositionAreaVisible(boolean):::Shows or hides the composition Area:::if->compositionArea->setCompositionAreaVisible
CompositionAreaHandler#processInputMethodEvent(InputMethodEvent)::: composition area handler process input method event:::if->event->getID->inputMethodTextChanged->else->caretPositionChanged
CompositionAreaHandler#setCompositionAreaUndecorated(boolean):::set the compositionArea frame decoration:::if->compositionArea->setCompositionAreaUndecorated
CompositionAreaHandler#inputMethodTextChanged(InputMethodEvent)::: composition area handler input method text changed:::text->event->getText->committedCharacterCount->event->getCommittedCharacterCount->if->text->getEndIndex->text->getBeginIndex->if->createCompositionArea->composedTextString->text->getBeginIndex->text->getEndIndex->new->AttributedString->composedTextString->compositionArea->getFont->addAttribute->composedTextString->getIterator->event->getCaret->if->compositionArea->setText->if->inputMethodContext->event->getSource->dispatchCommittedText->if->isCompositionAreaVisible->compositionArea->updateWindowLocation->event->consume
CompositionAreaHandler#caretPositionChanged(InputMethodEvent)::: composition area handler caret position changed:::if->compositionArea->event->getCaret->setCaret->event->consume
CompositionAreaHandler#getClientInputMethodRequests():::Returns the input method request handler of the client component:::client->clientComponent->get->if->return->client->getInputMethodRequests->return
CompositionAreaHandler#getTextLocation(TextHitInfo)::: composition area handler get text location:::synchronized->if->isCompositionAreaVisible->return->compositionArea->getTextLocation->else->if->return->new->Rectangle->else->requests->getClientInputMethodRequests->if->return->requests->getTextLocation->else->return->new->Rectangle
CompositionAreaHandler#getLocationOffset(int, int)::: composition area handler get location offset:::synchronized->if->isCompositionAreaVisible->return->compositionArea->getLocationOffset->else->return
CompositionAreaHandler#getInsertPositionOffset()::: composition area handler get insert position offset:::req->getClientInputMethodRequests->if->return->req->getInsertPositionOffset->return
CompositionAreaHandler#getCommittedText(int, int, Attribute[])::: composition area handler get committed text:::req->getClientInputMethodRequests->if->return->req->getCommittedText->return
CompositionAreaHandler#getCommittedTextLength()::: composition area handler get committed text length:::req->getClientInputMethodRequests->if->return->req->getCommittedTextLength->return
CompositionAreaHandler#cancelLatestCommittedText(Attribute[])::: composition area handler cancel latest committed text:::req->getClientInputMethodRequests->if->return->req->cancelLatestCommittedText->return
CompositionAreaHandler#getSelectedText(Attribute[])::: composition area handler get selected text:::req->getClientInputMethodRequests->if->return->req->getSelectedText->return
ExecutableInputMethodManager#initialize()::: executable input method manager initialize:::Toolkit->getProperty
ExecutableInputMethodManager#run()::: executable input method manager run:::while->hasMultipleInputMethods->try->synchronized->wait->catch->finally->while->waitForChangeRequest->initializeInputMethodLocatorList->try->if->showInputMethodMenuOnRequesterEDT->else->EventQueue->new->Runnable->invokeAndWait->catch->finally
ExecutableInputMethodManager#showInputMethodMenuOnRequesterEDT(Component)::: executable input method manager show input method menu on requester t:::if->return->lock->new->AWTInvocationLock->event->new->Runnable->new->InvocationEvent->requesterAppContext->SunToolkit->targetToAppContext->synchronized->SunToolkit->postEvent->while->event->isDispatched->lock->wait->eventThrowable->event->getThrowable->if->throw->new->InvocationTargetException
ExecutableInputMethodManager#setInputContext(InputContext)::: executable input method manager set input context:::if
ExecutableInputMethodManager#notifyChangeRequest(Component)::: executable input method manager notify change request:::if->return->if->return->notify
ExecutableInputMethodManager#notifyChangeRequestByHotKey(Component)::: executable input method manager notify change request by hot key:::while->if->return->comp->getParent->notifyChangeRequest
ExecutableInputMethodManager#getTriggerMenuString()::: executable input method manager get trigger menu string:::return
ExecutableInputMethodManager#hasMultipleInputMethods()::: executable input method manager has multiple input methods:::return
ExecutableInputMethodManager#waitForChangeRequest()::: executable input method manager wait for change request:::try->while->wait->catch->finally
ExecutableInputMethodManager#initializeInputMethodLocatorList()::: executable input method manager initialize input method locator list:::synchronized->javaInputMethodLocatorList->clear->try->AccessController->new->PrivilegedExceptionAction<Object>->doPrivileged->catch->e->printStackTrace->finally->javaInputMethodLocatorList->size->if->hasMultipleInputMethods->if->getUserRoot->else
ExecutableInputMethodManager#showInputMethodMenu()::: executable input method manager show input method menu:::if->hasMultipleInputMethods->return->InputMethodPopupMenu->getInstance->selectionMenu->removeAll->currentSelection->getCurrentSelection->if->selectionMenu->addOneInputMethodToMenu->selectionMenu->addSeparator->for->i->javaInputMethodLocatorList->size->synchronized->selectionMenu->addToComponent->selectionMenu->show
ExecutableInputMethodManager#getCurrentSelection()::: executable input method manager get current selection:::inputContext->if->locator->inputContext->getInputMethodLocator->if->return->locator->getActionCommandString->return
ExecutableInputMethodManager#changeInputMethod(String)::: executable input method manager change input method:::locator->inputMethodName->localeString->index->choice->indexOf->if->choice->substring->choice->substring->if->hostAdapterLocator->getActionCommandString->equals->else->for->i->javaInputMethodLocatorList->size->if->language->country->variant->postIndex->localeString->indexOf->if->else->localeString->substring->preIndex->localeString->indexOf->if->localeString->substring->else->localeString->substring->localeString->substring->locale->new->Locale->locator->deriveLocator->if->return->if->requestInputContext->changeInputMethod->putPreferredInputMethod
ExecutableInputMethodManager#findInputMethod(Locale)::: executable input method manager find input method:::locator->getPreferredInputMethod->if->return->if->hostAdapterLocator->isLocaleAvailable->return->hostAdapterLocator->deriveLocator->initializeInputMethodLocatorList->for->i->javaInputMethodLocatorList->size->return
ExecutableInputMethodManager#getDefaultKeyboardLocale()::: executable input method manager get default keyboard locale:::toolkit->Toolkit->getDefaultToolkit->if->return->getDefaultKeyboardLocale->else->return->Locale->getDefault
ExecutableInputMethodManager#getPreferredInputMethod(Locale):::Returns a InputMethodLocator object that the user prefers for the given locale.:::preferredLocator->if->hasMultipleInputMethods->return->preferredLocatorCache->locale->toString->intern->get->if->return->nodePath->findPreferredInputMethodNode->descriptorName->readPreferredInputMethod->advertised->if->if->hostAdapterLocator->getDescriptor->getClass->getName->equals->getAdvertisedLocale->if->hostAdapterLocator->deriveLocator->preferredLocatorCache->locale->toString->intern->put->return->for->i->javaInputMethodLocatorList->size->writePreferredInputMethod->return
ExecutableInputMethodManager#findPreferredInputMethodNode(Locale)::: executable input method manager find preferred input method node:::if->return->nodePath->createLocalePath->while->nodePath->equals->try->if->userRoot->nodeExists->if->readPreferredInputMethod->return->catch->finally->nodePath->nodePath->lastIndexOf->substring->return
ExecutableInputMethodManager#readPreferredInputMethod(String)::: executable input method manager read preferred input method:::if->return->return->userRoot->node->get
ExecutableInputMethodManager#putPreferredInputMethod(InputMethodLocator):::Writes the preferred input method descriptor class name into the user's Preferences tree in accordance with the given locale.:::descriptor->locator->getDescriptor->preferredLocale->locator->getLocale->if->try->availableLocales->descriptor->getAvailableLocales->if->else->return->catch->return->finally->if->preferredLocale->equals->if->preferredLocale->equals->if->preferredLocale->new->Locale->equals->new->Locale->path->createLocalePath->descriptor->getClass->getName->writePreferredInputMethod->preferredLocatorCache->preferredLocale->toString->intern->locator->deriveLocator->put->return
ExecutableInputMethodManager#createLocalePath(Locale)::: executable input method manager create locale path:::language->locale->getLanguage->country->locale->getCountry->variant->locale->getVariant->localePath->if->variant->equals->else->if->country->equals->else->return
ExecutableInputMethodManager#writePreferredInputMethod(String, String)::: executable input method manager write preferred input method:::if->node->userRoot->node->if->node->put->else->node->remove
ExecutableInputMethodManager#getUserRoot()::: executable input method manager get user root:::return->AccessController->new->PrivilegedAction<Preferences>->doPrivileged
ExecutableInputMethodManager#getAdvertisedLocale(InputMethodLocator, Locale)::: executable input method manager get advertised locale:::advertised->if->locator->isLocaleAvailable->else->if->locale->getLanguage->equals->if->locator->isLocaleAvailable->else->if->locator->isLocaleAvailable->else->if->locale->getLanguage->equals->if->locator->isLocaleAvailable->else->if->locator->isLocaleAvailable->else->if->locale->getLanguage->equals->if->locator->new->Locale->isLocaleAvailable->new->Locale->else->if->locator->new->Locale->isLocaleAvailable->new->Locale->return
InputContext#selectInputMethod(Locale)::: input context select input method:::if->throw->new->NullPointerException->if->if->inputMethod->setLocale->return->else->if->if->inputMethodLocator->isLocaleAvailable->inputMethodLocator->deriveLocator->return->newLocator->InputMethodManager->getInstance->findInputMethod->if->changeInputMethod->return->if->getInputMethod->if->return->inputMethod->setLocale->return
InputContext#getLocale()::: input context get locale:::if->return->inputMethod->getLocale->else->if->return->inputMethodLocator->getLocale->else->return
InputContext#setCharacterSubsets(Subset[])::: input context set character subsets:::if->else->new->SubsetArr->System->arraycopy->if->inputMethod->setCharacterSubsets
InputContext#reconvert()::: input context reconvert:::inputMethod->getInputMethod->if->throw->new->UnsupportedOperationException->inputMethod->reconvert
InputContext#dispatchEvent(AWTEvent)::: input context dispatch event:::if->return->if->opposite->getOppositeComponent->if->getComponentWindow->opposite->getInputContext->return->inputMethod->getInputMethod->id->event->getID->switch->event->getSource->focusGained->break->event->getSource->isTemporary->focusLost->break->if->checkInputMethodSelectionKey->InputMethodManager->getInstance->event->getSource->notifyChangeRequestByHotKey->break->if->inputMethod->dispatchEvent
InputContext#focusGained(Component):::Handles focus gained events for any component that's using this input context:::synchronized->source->getTreeLock->synchronized->if->source->getClass->getName->equals->else->if->getComponentWindow->else->if->source->isDisplayable->return->if->if->if->activateInputMethod->endComposition->deactivateInputMethod->if->setAWTFocussedComponent->if->activateInputMethod->inputContext->if->inputContext->isCompositionAreaVisible->req->source->getInputMethodRequests->if->inputContext->useBelowTheSpotInput->inputContext->setCompositionAreaUndecorated->else->inputContext->setCompositionAreaUndecorated->if->setCompositionAreaVisible
InputContext#activateInputMethod(boolean):::Activates the current input method of this input context, and grabs the composition area for use by this input context:::if->sameInputMethod->hideWindows->if->if->stopListening->if->log->isLoggable->log->fine->if->setClientComponent->inputMethod->activate->if->state->perInputMethodState->remove->if->state->booleanValue->if->if->addedClientWindowListeners->addClientWindowListeners->synchronized->if->notifyClientWindowChange->else->if->addedClientWindowListeners->removeClientWindowListeners->InputMethodManager->getInstance->setInputContext->grabCompositionArea
InputContext#getComponentWindow(Component)::: input context get component window:::while->if->return->else->if->return->else->component->getParent
InputContext#focusLost(Component, boolean):::Handles focus lost events for any component that's using this input context:::synchronized->source->getTreeLock->synchronized->if->deactivateInputMethod->if->setAWTFocussedComponent->inputContext->if->inputContext->isCompositionAreaVisible->inputContext->setCompositionAreaVisible
InputContext#checkInputMethodSelectionKey(KeyEvent):::Checks the key event is the input method selection key or not.:::if->aKeyStroke->AWTKeyStroke->getAWTKeyStrokeForEvent->return->inputMethodSelectionKey->equals->else->return
InputContext#deactivateInputMethod(boolean)::: input context deactivate input method:::InputMethodManager->getInstance->setInputContext->if->inputMethod->deactivate
InputContext#changeInputMethod(InputMethodLocator):::Switches from the current input method to the one described by newLocator:::if->return->if->inputMethodLocator->sameInputMethod->newLocale->newLocator->getLocale->if->inputMethodLocator->getLocale->if->inputMethod->setLocale->return->savedLocale->inputMethodLocator->getLocale->wasInputMethodActive->wasCompositionEnabledSupported->wasCompositionEnabled->if->try->inputMethod->isCompositionEnabled->catch->finally->if->if->activateInputMethod->endComposition->deactivateInputMethod->if->setClientComponent->inputMethod->getLocale->if->new->HashMap<>->if->new->HashMap<>->usedInputMethods->inputMethodLocator->deriveLocator->put->perInputMethodState->Boolean->valueOf->put->enableClientWindowNotification->if->inputMethod->hideWindows->if->newLocator->getLocale->newLocator->isLocaleAvailable->newLocator->deriveLocator->if->getInputMethodInstance->if->setAWTFocussedComponent->activateInputMethod->if->getInputMethod->if->try->inputMethod->setCompositionEnabled->catch->finally
InputContext#getClientComponent():::Returns the client component.:::return
InputContext#removeNotify(Component)::: input context remove notify:::if->throw->new->NullPointerException->if->if->return->if->focusLost->if->if->deactivateInputMethod->inputMethod->removeNotify->if->addedClientWindowListeners->removeClientWindowListeners->if->setClientComponent->if->EventQueue->isDispatchThread->releaseCompositionArea->else->EventQueue->new->Runnable->invokeLater
InputContext#dispose()::: input context dispose:::if->throw->new->IllegalStateException->if->if->inputMethod->hideWindows->if->if->if->addedClientWindowListeners->removeClientWindowListeners->inputMethod->dispose->if->enableClientWindowNotification->if->usedInputMethods->isEmpty->iterator->usedInputMethods->values->iterator->while->iterator->hasNext->iterator->next->dispose
InputContext#getInputMethodControlObject()::: input context get input method control object:::inputMethod->getInputMethod->if->return->inputMethod->getControlObject->else->return
InputContext#setCompositionEnabled(boolean)::: input context set composition enabled:::inputMethod->getInputMethod->if->throw->new->UnsupportedOperationException->inputMethod->setCompositionEnabled
InputContext#isCompositionEnabled()::: input context is composition enabled:::inputMethod->getInputMethod->if->throw->new->UnsupportedOperationException->return->inputMethod->isCompositionEnabled
InputContext#getInputMethodInfo()::: input context get input method info:::inputMethod->getInputMethod->if->throw->new->UnsupportedOperationException->inputMethodInfo->if->getNativeInputMethodInfo->if->inputMethodLocator->getDescriptor->getLocale->SunToolkit->getStartupLocale->getInputMethodDisplayName->if->inputMethodInfo->equals->return->return->inputMethod->toString->inputMethod->getLocale->toString
InputContext#disableNativeIM():::Turns off the native IM:::inputMethod->getInputMethod->if->stopListening
InputContext#getInputMethod()::: input context get input method:::if->return->if->return->getInputMethodInstance->return
InputContext#getInputMethodInstance():::Returns an instance of the input method described by the current input method locator:::locator->if->return->locale->locator->getLocale->inputMethodInstance->if->usedInputMethods->locator->deriveLocator->remove->if->if->inputMethodInstance->setLocale->inputMethodInstance->setCharacterSubsets->state->perInputMethodState->remove->if->state->booleanValue->enableClientWindowNotification->supportsBelowTheSpot->setInputMethodSupportsBelowTheSpot->return->try->locator->getDescriptor->createInputMethod->if->inputMethodInstance->setLocale->inputMethodInstance->setInputMethodContext->inputMethodInstance->setCharacterSubsets->catch->logCreationFailed->if->logCreationFailed->finally->supportsBelowTheSpot->setInputMethodSupportsBelowTheSpot->return
InputContext#logCreationFailed(Throwable)::: input context log creation failed:::logger->PlatformLogger->getLogger->if->logger->isLoggable->errorTextFormat->Toolkit->getProperty->args->inputMethodLocator->getDescriptor->Locale->getDefault->getInputMethodDisplayName->throwable->getLocalizedMessage->mf->new->MessageFormat->logger->mf->format->config
InputContext#getInputMethodLocator()::: input context get input method locator:::if->return->inputMethodLocator->inputMethod->getLocale->deriveLocator->return
InputContext#endComposition()::: input context end composition:::if->inputMethod->endComposition
InputContext#enableClientWindowNotification(InputMethod, boolean)::: input context enable client window notification:::if->if->new->HashMap<>->perInputMethodState->Boolean->valueOf->put->return->if->if->if->addedClientWindowListeners->addClientWindowListeners->if->notifyClientWindowChange->else->if->addedClientWindowListeners->removeClientWindowListeners
InputContext#notifyClientWindowChange(Window)::: input context notify client window change:::if->return->if->window->isVisible->getState->inputMethod->notifyClientWindowChange->return->location->window->getBounds->if->clientWindowLocation->equals->inputMethod->notifyClientWindowChange
InputContext#addClientWindowListeners()::: input context add client window listeners:::client->getClientComponent->if->return->window->getComponentWindow->if->return->window->addComponentListener->window->addWindowListener
InputContext#removeClientWindowListeners()::: input context remove client window listeners:::clientWindowListened->removeComponentListener->clientWindowListened->removeWindowListener
InputContext#addedClientWindowListeners():::Returns true if listeners have been set up for client window change notification.:::return
InputContext#componentResized(ComponentEvent)::: input context component resized:::e->getComponent->notifyClientWindowChange
InputContext#componentMoved(ComponentEvent)::: input context component moved:::e->getComponent->notifyClientWindowChange
InputContext#componentShown(ComponentEvent)::: input context component shown:::e->getComponent->notifyClientWindowChange
InputContext#componentHidden(ComponentEvent)::: input context component hidden:::e->getComponent->notifyClientWindowChange
InputContext#windowOpened(WindowEvent)::: input context window opened:::
InputContext#windowClosing(WindowEvent)::: input context window closing:::
InputContext#windowClosed(WindowEvent)::: input context window closed:::
InputContext#windowIconified(WindowEvent)::: input context window iconified:::e->getWindow->notifyClientWindowChange
InputContext#windowDeiconified(WindowEvent)::: input context window deiconified:::e->getWindow->notifyClientWindowChange
InputContext#windowActivated(WindowEvent)::: input context window activated:::
InputContext#windowDeactivated(WindowEvent)::: input context window deactivated:::
InputContext#initializeInputMethodSelectionKey():::Initializes the input method selection key definition in preference trees:::AccessController->new->PrivilegedAction<Object>->doPrivileged
InputContext#getInputMethodSelectionKeyStroke(Preferences)::: input context get input method selection key stroke:::try->if->root->nodeExists->node->root->node->keyCode->node->getInt->if->modifiers->node->getInt->return->AWTKeyStroke->getAWTKeyStroke->catch->finally->return
InputMethodAdapter#setClientComponent(Component)::: input method adapter set client component:::
InputMethodAdapter#getClientComponent()::: input method adapter get client component:::return
InputMethodAdapter#haveActiveClient()::: input method adapter have active client:::return->clientComponent->getInputMethodRequests
InputMethodAdapter#setAWTFocussedComponent(Component):::Informs the input method adapter about the component that has the AWT focus if it's using the input context owning this adapter instance.:::
InputMethodAdapter#supportsBelowTheSpot():::Returns whether host input methods can support below-the-spot input:::return
InputMethodAdapter#stopListening():::Informs the input method adapter not to listen to the native events.:::
InputMethodAdapter#notifyClientWindowChange(Rectangle):::Notifies client Window location or status changes:::
InputMethodAdapter#reconvert():::Starts reconvertion:::throw->new->UnsupportedOperationException
InputMethodAdapter#disableInputMethod():::Disable the native input method:::
InputMethodAdapter#getNativeInputMethodInfo():::Returns a string with information about the native input method, or null.:::
InputMethodContext#setInputMethodSupportsBelowTheSpot(boolean)::: input method context set input method supports below the spot:::
InputMethodContext#useBelowTheSpotInput()::: input method context use below the spot input:::return
InputMethodContext#haveActiveClient()::: input method context have active client:::client->getClientComponent->return->client->getInputMethodRequests
InputMethodContext#dispatchInputMethodEvent(int, AttributedCharacterIterator, int, TextHitInfo, TextHitInfo)::: input method context dispatch input method event:::source->getClientComponent->if->event->new->InputMethodEvent->if->haveActiveClient->useBelowTheSpotInput->source->dispatchEvent->else->getCompositionAreaHandler->processInputMethodEvent
InputMethodContext#dispatchCommittedText(Component, AttributedCharacterIterator, int):::Dispatches committed text to a client component:::if->text->getEndIndex->text->getBeginIndex->return->time->System->currentTimeMillis->try->req->client->getInputMethodRequests->if->beginIndex->text->getBeginIndex->toBeCommitted->new->AttributedString->getIterator->inputEvent->new->InputMethodEvent->client->dispatchEvent->else->keyChar->text->first->while->keyEvent->new->KeyEvent->client->dispatchEvent->text->next->catch->finally
InputMethodContext#dispatchEvent(AWTEvent)::: input method context dispatch event:::if->if->event->getSource->getInputMethodRequests->useBelowTheSpotInput->getCompositionAreaHandler->processInputMethodEvent->else->if->super->dispatchEvent
InputMethodContext#getCompositionAreaHandler(boolean):::Gets this context's composition area handler, creating it if necessary:::synchronized->if->new->CompositionAreaHandler->compositionAreaHandler->getClientComponent->setClientComponent->if->compositionAreaHandler->grabCompositionArea->return
InputMethodContext#grabCompositionArea(boolean):::Grabs the composition area for use by this context:::synchronized->if->compositionAreaHandler->grabCompositionArea->else->CompositionAreaHandler->closeCompositionArea
InputMethodContext#releaseCompositionArea():::Releases and closes the composition area if it is currently owned by this context's composition area handler.:::synchronized->if->compositionAreaHandler->releaseCompositionArea
InputMethodContext#isCompositionAreaVisible():::Calls CompositionAreaHandler.isCompositionAreaVisible() to see whether the composition area is visible or not:::if->return->compositionAreaHandler->isCompositionAreaVisible->return
InputMethodContext#setCompositionAreaVisible(boolean):::Calls CompositionAreaHandler.setCompositionAreaVisible to show or hide the composition area:::if->compositionAreaHandler->setCompositionAreaVisible
InputMethodContext#getTextLocation(TextHitInfo):::Calls the current client component's implementation of getTextLocation.:::return->getReq->getTextLocation
InputMethodContext#getLocationOffset(int, int):::Calls the current client component's implementation of getLocationOffset.:::return->getReq->getLocationOffset
InputMethodContext#getInsertPositionOffset():::Calls the current client component's implementation of getInsertPositionOffset.:::return->getReq->getInsertPositionOffset
InputMethodContext#getCommittedText(int, int, Attribute[]):::Calls the current client component's implementation of getCommittedText.:::return->getReq->getCommittedText
InputMethodContext#getCommittedTextLength():::Calls the current client component's implementation of getCommittedTextLength.:::return->getReq->getCommittedTextLength
InputMethodContext#cancelLatestCommittedText(Attribute[]):::Calls the current client component's implementation of cancelLatestCommittedText.:::return->getReq->cancelLatestCommittedText
InputMethodContext#getSelectedText(Attribute[]):::Calls the current client component's implementation of getSelectedText.:::return->getReq->getSelectedText
InputMethodContext#getReq()::: input method context get req:::if->haveActiveClient->useBelowTheSpotInput->return->getClientComponent->getInputMethodRequests->else->return->getCompositionAreaHandler
InputMethodContext#createInputMethodWindow(String, boolean)::: input method context create input method window:::context->return->createInputMethodWindow
InputMethodContext#createInputMethodJFrame(String, boolean)::: input method context create input method frame:::context->return->createInputMethodWindow
InputMethodContext#createInputMethodWindow(String, InputContext, boolean)::: input method context create input method window:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->if->return->new->InputMethodJFrame->else->toolkit->Toolkit->getDefaultToolkit->if->return->createInputMethodWindow->throw->new->InternalError
InputMethodContext#enableClientWindowNotification(InputMethod, boolean)::: input method context enable client window notification:::super->enableClientWindowNotification
InputMethodContext#setCompositionAreaUndecorated(boolean):::Disables or enables decorations for the composition window.:::if->compositionAreaHandler->setCompositionAreaUndecorated
InputMethodJFrame#setInputContext(InputContext)::: input method frame set input context:::
InputMethodJFrame#getInputContext()::: input method frame get input context:::if->return->else->return->super->getInputContext
InputMethodLocator#equals(Object)::: input method locator equals:::if->return->if->this->getClass->other->getClass->return->otherLocator->if->descriptor->getClass->getClass->equals->return->if->loader->equals->return->if->locale->equals->return->return
InputMethodLocator#hashCode()::: input method locator hash code:::result->descriptor->hashCode->if->loader->hashCode->if->locale->hashCode->return
InputMethodLocator#getDescriptor()::: input method locator get descriptor:::return
InputMethodLocator#getClassLoader()::: input method locator get class loader:::return
InputMethodLocator#getLocale()::: input method locator get locale:::return
InputMethodLocator#isLocaleAvailable(Locale):::Returns whether support for locale is available from the input method.:::try->locales->descriptor->getAvailableLocales->for->i->catch->finally->return
InputMethodLocator#deriveLocator(Locale):::Returns an input method locator that has locale forLocale, but otherwise the same data as this locator:::if->return->else->return->new->InputMethodLocator
InputMethodLocator#sameInputMethod(InputMethodLocator):::Returns whether this and other describe the same input method engine, ignoring the locale setting.:::if->return->if->return->if->descriptor->getClass->getClass->equals->return->if->loader->equals->return->return
InputMethodLocator#getActionCommandString():::Returns a string that can be used as an action command string:::inputMethodString->descriptor->getClass->getName->if->return->else->return->locale->toString
InputMethodManager#getInstance():::Returns the instance of InputMethodManager:::if->return->synchronized->if->imm->new->ExecutableInputMethodManager->if->imm->hasMultipleInputMethods->imm->initialize->immThread->new->Thread->immThread->setDaemon->immThread->setPriority->immThread->start->return
InputMethodManager#getTriggerMenuString():::Gets a string for the trigger menu item that should be added to the window manager menu:::
InputMethodManager#notifyChangeRequest(Component):::Notifies InputMethodManager that input method change has been requested by the user:::
InputMethodManager#notifyChangeRequestByHotKey(Component):::Notifies InputMethodManager that input method change has been requested by the user using the hot key combination:::
InputMethodManager#setInputContext(InputContext):::Sets the current input context so that it will be notified of input method changes initiated from the user interface:::
InputMethodManager#findInputMethod(Locale):::Tries to find an input method locator for the given locale:::
InputMethodManager#getDefaultKeyboardLocale():::Gets the default keyboard locale of the underlying operating system.:::
InputMethodManager#hasMultipleInputMethods():::Returns whether multiple input methods are available or not:::
InputMethodPopupMenu#getInstance(Component, String)::: input method popup menu get instance:::if->return->new->JInputMethodPopupMenu->else->return->new->AWTInputMethodPopupMenu
InputMethodPopupMenu#show(Component, int, int)::: input method popup menu show:::
InputMethodPopupMenu#removeAll()::: input method popup menu remove all:::
InputMethodPopupMenu#addSeparator()::: input method popup menu add separator:::
InputMethodPopupMenu#addToComponent(Component)::: input method popup menu add to component:::
InputMethodPopupMenu#createSubmenu(String)::: input method popup menu create submenu:::
InputMethodPopupMenu#add(Object)::: input method popup menu add:::
InputMethodPopupMenu#addMenuItem(String, String, String)::: input method popup menu add menu item:::
InputMethodPopupMenu#addMenuItem(Object, String, String, String)::: input method popup menu add menu item:::
InputMethodPopupMenu#addOneInputMethodToMenu(InputMethodLocator, String)::: input method popup menu add one input method to menu:::descriptor->locator->getDescriptor->label->descriptor->Locale->getDefault->getInputMethodDisplayName->command->locator->getActionCommandString->locales->localeCount->try->descriptor->getAvailableLocales->catch->finally->if->addMenuItem->else->if->if->descriptor->hasDynamicLocaleList->descriptor->Locale->getDefault->getInputMethodDisplayName->locator->deriveLocator->getActionCommandString->addMenuItem->else->submenu->createSubmenu->add->for->j
InputMethodPopupMenu#isSelected(String, String):::Returns whether command indicates the same input method as currentSelection, taking into account that command may not specify a locale where currentSelection does.:::if->return->if->command->equals->return->index->currentSelection->indexOf->if->currentSelection->substring->equals->return->return
InputMethodPopupMenu#getLocaleName(Locale):::Returns a localized locale name for input methods with the given locale:::localeString->locale->toString->localeName->Toolkit->getProperty->if->locale->getDisplayName->if->localeName->length->return
InputMethodPopupMenu#actionPerformed(ActionEvent)::: input method popup menu action performed:::choice->event->getActionCommand->InputMethodManager->getInstance->changeInputMethod
JInputMethodPopupMenu#show(Component, int, int)::: input method popup menu show:::delegate->show
JInputMethodPopupMenu#removeAll()::: input method popup menu remove all:::delegate->removeAll
JInputMethodPopupMenu#addSeparator()::: input method popup menu add separator:::delegate->addSeparator
JInputMethodPopupMenu#addToComponent(Component)::: input method popup menu add to component:::
JInputMethodPopupMenu#createSubmenu(String)::: input method popup menu create submenu:::return->new->JMenu
JInputMethodPopupMenu#add(Object)::: input method popup menu add:::delegate->add
JInputMethodPopupMenu#addMenuItem(String, String, String)::: input method popup menu add menu item:::addMenuItem
JInputMethodPopupMenu#addMenuItem(Object, String, String, String)::: input method popup menu add menu item:::menuItem->if->isSelected->new->JCheckBoxMenuItem->else->new->JMenuItem->menuItem->setActionCommand->menuItem->addActionListener->menuItem->setEnabled->if->add->else->add
AWTInputMethodPopupMenu#show(Component, int, int)::: input method popup menu show:::delegate->show
AWTInputMethodPopupMenu#removeAll()::: input method popup menu remove all:::delegate->removeAll
AWTInputMethodPopupMenu#addSeparator()::: input method popup menu add separator:::delegate->addSeparator
AWTInputMethodPopupMenu#addToComponent(Component)::: input method popup menu add to component:::c->add
AWTInputMethodPopupMenu#createSubmenu(String)::: input method popup menu create submenu:::return->new->Menu
AWTInputMethodPopupMenu#add(Object)::: input method popup menu add:::delegate->add
AWTInputMethodPopupMenu#addMenuItem(String, String, String)::: input method popup menu add menu item:::addMenuItem
AWTInputMethodPopupMenu#addMenuItem(Object, String, String, String)::: input method popup menu add menu item:::menuItem->if->isSelected->new->CheckboxMenuItem->else->new->MenuItem->menuItem->setActionCommand->menuItem->addActionListener->menuItem->setEnabled->add
InputMethodWindow#setInputContext(InputContext):::Sets the input context that this input method window is attached to, null to unattach the window.:::
SimpleInputMethodWindow#setInputContext(InputContext)::: simple input method window set input context:::
SimpleInputMethodWindow#getInputContext()::: simple input method window get input context:::if->return->else->return->super->getInputContext

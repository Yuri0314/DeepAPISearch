sun.awt.im.CompositionArea#setHandlerInfo(CompositionAreaHandler, InputContext)->void:::Sets the composition area handler that currently owns this composition area, and its input context.
sun.awt.im.CompositionArea#getInputMethodRequests()->InputMethodRequests::: composition area get input method requests
sun.awt.im.CompositionArea#paint(Graphics)->void::: composition area paint
sun.awt.im.CompositionArea#setCompositionAreaVisible(boolean)->void::: composition area set composition area visible
sun.awt.im.CompositionArea#isCompositionAreaVisible()->boolean::: composition area is composition area visible
sun.awt.im.CompositionArea.FrameWindowAdapter#windowActivated(WindowEvent)->void::: frame window adapter window activated
sun.awt.im.CompositionArea#inputMethodTextChanged(InputMethodEvent)->void::: composition area input method text changed
sun.awt.im.CompositionArea#caretPositionChanged(InputMethodEvent)->void::: composition area caret position changed
sun.awt.im.CompositionArea#setText(AttributedCharacterIterator, TextHitInfo)->void:::Sets the text and caret to be displayed in this composition area
sun.awt.im.CompositionArea#setCaret(TextHitInfo)->void:::Sets the caret to be displayed in this composition area
sun.awt.im.CompositionArea#updateWindowLocation()->void:::Positions the composition window near (usually below) the insertion point in the client component if the client component is an active client (below-the-spot input).
sun.awt.im.CompositionArea#getTextLocation(TextHitInfo)->Rectangle::: composition area get text location
sun.awt.im.CompositionArea#getLocationOffset(int, int)->TextHitInfo::: composition area get location offset
sun.awt.im.CompositionArea#setCompositionAreaUndecorated(boolean)->void::: composition area set composition area undecorated
sun.awt.im.CompositionAreaHandler#setClientComponent(Component)->void::: composition area handler set client component
sun.awt.im.CompositionAreaHandler#grabCompositionArea(boolean)->void::: composition area handler grab composition area
sun.awt.im.CompositionAreaHandler#releaseCompositionArea()->void:::Releases and closes the composition area if it is currently owned by this composition area handler.
sun.awt.im.CompositionAreaHandler#closeCompositionArea()->void:::Releases and closes the composition area if it has been created, independent of the current owner.
sun.awt.im.CompositionAreaHandler#isCompositionAreaVisible()->boolean:::Returns whether the composition area is currently visible
sun.awt.im.CompositionAreaHandler#setCompositionAreaVisible(boolean)->void:::Shows or hides the composition Area
sun.awt.im.CompositionAreaHandler#processInputMethodEvent(InputMethodEvent)->void::: composition area handler process input method event
sun.awt.im.CompositionAreaHandler#setCompositionAreaUndecorated(boolean)->void:::set the compositionArea frame decoration
sun.awt.im.CompositionAreaHandler#inputMethodTextChanged(InputMethodEvent)->void::: composition area handler input method text changed
sun.awt.im.CompositionAreaHandler#caretPositionChanged(InputMethodEvent)->void::: composition area handler caret position changed
sun.awt.im.CompositionAreaHandler#getClientInputMethodRequests()->InputMethodRequests:::Returns the input method request handler of the client component
sun.awt.im.CompositionAreaHandler#getTextLocation(TextHitInfo)->Rectangle::: composition area handler get text location
sun.awt.im.CompositionAreaHandler#getLocationOffset(int, int)->TextHitInfo::: composition area handler get location offset
sun.awt.im.CompositionAreaHandler#getInsertPositionOffset()->int::: composition area handler get insert position offset
sun.awt.im.CompositionAreaHandler#getCommittedText(int, int, Attribute[])->AttributedCharacterIterator::: composition area handler get committed text
sun.awt.im.CompositionAreaHandler#getCommittedTextLength()->int::: composition area handler get committed text length
sun.awt.im.CompositionAreaHandler#cancelLatestCommittedText(Attribute[])->AttributedCharacterIterator::: composition area handler cancel latest committed text
sun.awt.im.CompositionAreaHandler#getSelectedText(Attribute[])->AttributedCharacterIterator::: composition area handler get selected text
sun.awt.im.ExecutableInputMethodManager#initialize()->void::: executable input method manager initialize
sun.awt.im.ExecutableInputMethodManager#run()->void::: executable input method manager run
sun.awt.im.ExecutableInputMethodManager#setInputContext(InputContext)->void::: executable input method manager set input context
sun.awt.im.ExecutableInputMethodManager#notifyChangeRequest(Component)->void::: executable input method manager notify change request
sun.awt.im.ExecutableInputMethodManager#notifyChangeRequestByHotKey(Component)->void::: executable input method manager notify change request by hot key
sun.awt.im.ExecutableInputMethodManager#getTriggerMenuString()->String::: executable input method manager get trigger menu string
sun.awt.im.ExecutableInputMethodManager#hasMultipleInputMethods()->boolean::: executable input method manager has multiple input methods
sun.awt.im.ExecutableInputMethodManager#changeInputMethod(String)->void::: executable input method manager change input method
sun.awt.im.ExecutableInputMethodManager#findInputMethod(Locale)->InputMethodLocator::: executable input method manager find input method
sun.awt.im.ExecutableInputMethodManager#getDefaultKeyboardLocale()->Locale::: executable input method manager get default keyboard locale
sun.awt.im.InputContext#selectInputMethod(Locale)->boolean::: input context select input method
sun.awt.im.InputContext#getLocale()->Locale::: input context get locale
sun.awt.im.InputContext#setCharacterSubsets(Subset[])->void::: input context set character subsets
sun.awt.im.InputContext#reconvert()->void::: input context reconvert
sun.awt.im.InputContext#dispatchEvent(AWTEvent)->void::: input context dispatch event
sun.awt.im.InputContext#getComponentWindow(Component)->Window::: input context get component window
sun.awt.im.InputContext#changeInputMethod(InputMethodLocator)->void:::Switches from the current input method to the one described by newLocator
sun.awt.im.InputContext#getClientComponent()->Component:::Returns the client component.
sun.awt.im.InputContext#removeNotify(Component)->void::: input context remove notify
sun.awt.im.InputContext#dispose()->void::: input context dispose
sun.awt.im.InputContext#getInputMethodControlObject()->Object::: input context get input method control object
sun.awt.im.InputContext#setCompositionEnabled(boolean)->void::: input context set composition enabled
sun.awt.im.InputContext#isCompositionEnabled()->boolean::: input context is composition enabled
sun.awt.im.InputContext#getInputMethodInfo()->String::: input context get input method info
sun.awt.im.InputContext#disableNativeIM()->void:::Turns off the native IM
sun.awt.im.InputContext#getInputMethodLocator()->InputMethodLocator::: input context get input method locator
sun.awt.im.InputContext#endComposition()->void::: input context end composition
sun.awt.im.InputContext#enableClientWindowNotification(InputMethod, boolean)->void::: input context enable client window notification
sun.awt.im.InputContext#componentResized(ComponentEvent)->void::: input context component resized
sun.awt.im.InputContext#componentMoved(ComponentEvent)->void::: input context component moved
sun.awt.im.InputContext#componentShown(ComponentEvent)->void::: input context component shown
sun.awt.im.InputContext#componentHidden(ComponentEvent)->void::: input context component hidden
sun.awt.im.InputContext#windowOpened(WindowEvent)->void::: input context window opened
sun.awt.im.InputContext#windowClosing(WindowEvent)->void::: input context window closing
sun.awt.im.InputContext#windowClosed(WindowEvent)->void::: input context window closed
sun.awt.im.InputContext#windowIconified(WindowEvent)->void::: input context window iconified
sun.awt.im.InputContext#windowDeiconified(WindowEvent)->void::: input context window deiconified
sun.awt.im.InputContext#windowActivated(WindowEvent)->void::: input context window activated
sun.awt.im.InputContext#windowDeactivated(WindowEvent)->void::: input context window deactivated
sun.awt.im.InputMethodAdapter#setClientComponent(Component)->void::: input method adapter set client component
sun.awt.im.InputMethodAdapter#getClientComponent()->Component::: input method adapter get client component
sun.awt.im.InputMethodAdapter#haveActiveClient()->boolean::: input method adapter have active client
sun.awt.im.InputMethodAdapter#setAWTFocussedComponent(Component)->void:::Informs the input method adapter about the component that has the AWT focus if it's using the input context owning this adapter instance.
sun.awt.im.InputMethodAdapter#supportsBelowTheSpot()->boolean:::Returns whether host input methods can support below-the-spot input
sun.awt.im.InputMethodAdapter#stopListening()->void:::Informs the input method adapter not to listen to the native events.
sun.awt.im.InputMethodAdapter#notifyClientWindowChange(Rectangle)->void:::Notifies client Window location or status changes
sun.awt.im.InputMethodAdapter#reconvert()->void:::Starts reconvertion
sun.awt.im.InputMethodAdapter#disableInputMethod()->void:::Disable the native input method
sun.awt.im.InputMethodAdapter#getNativeInputMethodInfo()->String:::Returns a string with information about the native input method, or null.
sun.awt.im.InputMethodContext#setInputMethodSupportsBelowTheSpot(boolean)->void::: input method context set input method supports below the spot
sun.awt.im.InputMethodContext#useBelowTheSpotInput()->boolean::: input method context use below the spot input
sun.awt.im.InputMethodContext#dispatchInputMethodEvent(int, AttributedCharacterIterator, int, TextHitInfo, TextHitInfo)->void::: input method context dispatch input method event
sun.awt.im.InputMethodContext#dispatchCommittedText(Component, AttributedCharacterIterator, int)->void:::Dispatches committed text to a client component
sun.awt.im.InputMethodContext#dispatchEvent(AWTEvent)->void::: input method context dispatch event
sun.awt.im.InputMethodContext#grabCompositionArea(boolean)->void:::Grabs the composition area for use by this context
sun.awt.im.InputMethodContext#releaseCompositionArea()->void:::Releases and closes the composition area if it is currently owned by this context's composition area handler.
sun.awt.im.InputMethodContext#isCompositionAreaVisible()->boolean:::Calls CompositionAreaHandler.isCompositionAreaVisible() to see whether the composition area is visible or not
sun.awt.im.InputMethodContext#setCompositionAreaVisible(boolean)->void:::Calls CompositionAreaHandler.setCompositionAreaVisible to show or hide the composition area
sun.awt.im.InputMethodContext#getTextLocation(TextHitInfo)->Rectangle:::Calls the current client component's implementation of getTextLocation.
sun.awt.im.InputMethodContext#getLocationOffset(int, int)->TextHitInfo:::Calls the current client component's implementation of getLocationOffset.
sun.awt.im.InputMethodContext#getInsertPositionOffset()->int:::Calls the current client component's implementation of getInsertPositionOffset.
sun.awt.im.InputMethodContext#getCommittedText(int, int, Attribute[])->AttributedCharacterIterator:::Calls the current client component's implementation of getCommittedText.
sun.awt.im.InputMethodContext#getCommittedTextLength()->int:::Calls the current client component's implementation of getCommittedTextLength.
sun.awt.im.InputMethodContext#cancelLatestCommittedText(Attribute[])->AttributedCharacterIterator:::Calls the current client component's implementation of cancelLatestCommittedText.
sun.awt.im.InputMethodContext#getSelectedText(Attribute[])->AttributedCharacterIterator:::Calls the current client component's implementation of getSelectedText.
sun.awt.im.InputMethodContext#createInputMethodWindow(String, boolean)->Window::: input method context create input method window
sun.awt.im.InputMethodContext#createInputMethodJFrame(String, boolean)->JFrame::: input method context create input method frame
sun.awt.im.InputMethodContext#createInputMethodWindow(String, InputContext, boolean)->Window::: input method context create input method window
sun.awt.im.InputMethodContext#enableClientWindowNotification(InputMethod, boolean)->void::: input method context enable client window notification
sun.awt.im.InputMethodContext#setCompositionAreaUndecorated(boolean)->void:::Disables or enables decorations for the composition window.
sun.awt.im.InputMethodJFrame#setInputContext(InputContext)->void::: input method frame set input context
sun.awt.im.InputMethodJFrame#getInputContext()->java.awt.im.InputContext::: input method frame get input context
sun.awt.im.InputMethodLocator#equals(Object)->boolean::: input method locator equals
sun.awt.im.InputMethodLocator#hashCode()->int::: input method locator hash code
sun.awt.im.InputMethodLocator#getDescriptor()->InputMethodDescriptor::: input method locator get descriptor
sun.awt.im.InputMethodLocator#getClassLoader()->ClassLoader::: input method locator get class loader
sun.awt.im.InputMethodLocator#getLocale()->Locale::: input method locator get locale
sun.awt.im.InputMethodLocator#isLocaleAvailable(Locale)->boolean:::Returns whether support for locale is available from the input method.
sun.awt.im.InputMethodLocator#deriveLocator(Locale)->InputMethodLocator:::Returns an input method locator that has locale forLocale, but otherwise the same data as this locator
sun.awt.im.InputMethodLocator#sameInputMethod(InputMethodLocator)->boolean:::Returns whether this and other describe the same input method engine, ignoring the locale setting.
sun.awt.im.InputMethodLocator#getActionCommandString()->String:::Returns a string that can be used as an action command string
sun.awt.im.InputMethodManager#getInstance()->InputMethodManager:::Returns the instance of InputMethodManager
sun.awt.im.InputMethodManager#getTriggerMenuString()->String:::Gets a string for the trigger menu item that should be added to the window manager menu
sun.awt.im.InputMethodManager#notifyChangeRequest(Component)->void:::Notifies InputMethodManager that input method change has been requested by the user
sun.awt.im.InputMethodManager#notifyChangeRequestByHotKey(Component)->void:::Notifies InputMethodManager that input method change has been requested by the user using the hot key combination
sun.awt.im.InputMethodManager#setInputContext(InputContext)->void:::Sets the current input context so that it will be notified of input method changes initiated from the user interface
sun.awt.im.InputMethodManager#findInputMethod(Locale)->InputMethodLocator:::Tries to find an input method locator for the given locale
sun.awt.im.InputMethodManager#getDefaultKeyboardLocale()->Locale:::Gets the default keyboard locale of the underlying operating system.
sun.awt.im.InputMethodManager#hasMultipleInputMethods()->boolean:::Returns whether multiple input methods are available or not
sun.awt.im.InputMethodPopupMenu#getInstance(Component, String)->InputMethodPopupMenu::: input method popup menu get instance
sun.awt.im.InputMethodPopupMenu#show(Component, int, int)->void::: input method popup menu show
sun.awt.im.InputMethodPopupMenu#removeAll()->void::: input method popup menu remove all
sun.awt.im.InputMethodPopupMenu#addSeparator()->void::: input method popup menu add separator
sun.awt.im.InputMethodPopupMenu#addToComponent(Component)->void::: input method popup menu add to component
sun.awt.im.InputMethodPopupMenu#createSubmenu(String)->Object::: input method popup menu create submenu
sun.awt.im.InputMethodPopupMenu#add(Object)->void::: input method popup menu add
sun.awt.im.InputMethodPopupMenu#addMenuItem(String, String, String)->void::: input method popup menu add menu item
sun.awt.im.InputMethodPopupMenu#addMenuItem(Object, String, String, String)->void::: input method popup menu add menu item
sun.awt.im.InputMethodPopupMenu#addOneInputMethodToMenu(InputMethodLocator, String)->void::: input method popup menu add one input method to menu
sun.awt.im.InputMethodPopupMenu#isSelected(String, String)->boolean:::Returns whether command indicates the same input method as currentSelection, taking into account that command may not specify a locale where currentSelection does.
sun.awt.im.InputMethodPopupMenu#getLocaleName(Locale)->String:::Returns a localized locale name for input methods with the given locale
sun.awt.im.InputMethodPopupMenu#actionPerformed(ActionEvent)->void::: input method popup menu action performed
sun.awt.im.JInputMethodPopupMenu#show(Component, int, int)->void::: input method popup menu show
sun.awt.im.JInputMethodPopupMenu#removeAll()->void::: input method popup menu remove all
sun.awt.im.JInputMethodPopupMenu#addSeparator()->void::: input method popup menu add separator
sun.awt.im.JInputMethodPopupMenu#addToComponent(Component)->void::: input method popup menu add to component
sun.awt.im.JInputMethodPopupMenu#createSubmenu(String)->Object::: input method popup menu create submenu
sun.awt.im.JInputMethodPopupMenu#add(Object)->void::: input method popup menu add
sun.awt.im.JInputMethodPopupMenu#addMenuItem(String, String, String)->void::: input method popup menu add menu item
sun.awt.im.JInputMethodPopupMenu#addMenuItem(Object, String, String, String)->void::: input method popup menu add menu item
sun.awt.im.AWTInputMethodPopupMenu#show(Component, int, int)->void::: input method popup menu show
sun.awt.im.AWTInputMethodPopupMenu#removeAll()->void::: input method popup menu remove all
sun.awt.im.AWTInputMethodPopupMenu#addSeparator()->void::: input method popup menu add separator
sun.awt.im.AWTInputMethodPopupMenu#addToComponent(Component)->void::: input method popup menu add to component
sun.awt.im.AWTInputMethodPopupMenu#createSubmenu(String)->Object::: input method popup menu create submenu
sun.awt.im.AWTInputMethodPopupMenu#add(Object)->void::: input method popup menu add
sun.awt.im.AWTInputMethodPopupMenu#addMenuItem(String, String, String)->void::: input method popup menu add menu item
sun.awt.im.AWTInputMethodPopupMenu#addMenuItem(Object, String, String, String)->void::: input method popup menu add menu item
sun.awt.im.InputMethodWindow#setInputContext(InputContext)->void:::Sets the input context that this input method window is attached to, null to unattach the window.
sun.awt.im.SimpleInputMethodWindow#setInputContext(InputContext)->void::: simple input method window set input context
sun.awt.im.SimpleInputMethodWindow#getInputContext()->java.awt.im.InputContext::: simple input method window get input context

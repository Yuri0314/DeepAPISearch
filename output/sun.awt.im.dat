CompositionArea#setHandlerInfo(CompositionAreaHandler, InputContext):::Sets the composition area handler that currently owns this composition area, and its input context.:::setInputContext
CompositionArea#setText(AttributedCharacterIterator, TextHitInfo):::Sets the text and caret to be displayed in this composition area:::if->compositionWindow->setVisible->else->if->compositionWindow->isVisible->compositionWindow->setVisible->g->getGraphics->if->return->try->updateWindowLocation->context->getFontRenderContext->new->TextLayout->bounds->composedTextLayout->getBounds->metrics->g->getFontMetrics->maxCharBoundsRec->metrics->getMaxCharBounds->newHeight->maxCharBoundsRec->getHeight->newFrameHeight->compositionWindow->getInsets->compositionWindow->getInsets->req->handler->getClientInputMethodRequests->newWidth->bounds->getWidth->newFrameWidth->compositionWindow->getInsets->compositionWindow->getInsets->new->Dimension->setPreferredSize->compositionWindow->new->Dimension->setSize->paint->catch->finally->g->dispose
CompositionArea#setCaret(TextHitInfo):::Sets the caret to be displayed in this composition area:::if->compositionWindow->isVisible->g->getGraphics->try->paint->catch->finally->g->dispose
CompositionArea#updateWindowLocation():::Positions the composition window near (usually below) the insertion point in the client component if the client component is an active client (below-the-spot input).:::req->handler->getClientInputMethodRequests->if->return->windowLocation->new->Point->caretRect->req->getTextLocation->screenSize->Toolkit->getDefaultToolkit->getScreenSize->windowSize->compositionWindow->getSize->SPACING->if->else->if->else->compositionWindow->setLocation
CompositionAreaHandler#releaseCompositionArea():::Releases and closes the composition area if it is currently owned by this composition area handler.:::synchronized->if->if->compositionArea->setHandlerInfo->compositionArea->setText
CompositionAreaHandler#closeCompositionArea():::Releases and closes the composition area if it has been created, independent of the current owner.:::if->synchronized->compositionArea->setHandlerInfo->compositionArea->setText
CompositionAreaHandler#isCompositionAreaVisible():::Returns whether the composition area is currently visible:::if->return->compositionArea->isCompositionAreaVisible->return
CompositionAreaHandler#setCompositionAreaVisible(boolean):::Shows or hides the composition Area:::if->compositionArea->setCompositionAreaVisible
CompositionAreaHandler#setCompositionAreaUndecorated(boolean):::set the compositionArea frame decoration:::if->compositionArea->setCompositionAreaUndecorated
CompositionAreaHandler#getClientInputMethodRequests():::Returns the input method request handler of the client component:::client->clientComponent->get->if->return->client->getInputMethodRequests->return
InputContext#changeInputMethod(InputMethodLocator):::Switches from the current input method to the one described by newLocator:::if->return->if->inputMethodLocator->sameInputMethod->newLocale->newLocator->getLocale->if->inputMethodLocator->getLocale->if->inputMethod->setLocale->return->savedLocale->inputMethodLocator->getLocale->wasInputMethodActive->wasCompositionEnabledSupported->wasCompositionEnabled->if->try->inputMethod->isCompositionEnabled->catch->finally->if->if->activateInputMethod->endComposition->deactivateInputMethod->if->setClientComponent->inputMethod->getLocale->if->new->HashMap<>->if->new->HashMap<>->usedInputMethods->inputMethodLocator->deriveLocator->put->perInputMethodState->Boolean->valueOf->put->enableClientWindowNotification->if->inputMethod->hideWindows->if->newLocator->getLocale->newLocator->isLocaleAvailable->newLocator->deriveLocator->if->getInputMethodInstance->if->setAWTFocussedComponent->activateInputMethod->if->getInputMethod->if->try->inputMethod->setCompositionEnabled->catch->finally
InputContext#getClientComponent():::Returns the client component.:::return
InputContext#disableNativeIM():::Turns off the native IM:::inputMethod->getInputMethod->if->stopListening
InputMethodAdapter#setAWTFocussedComponent(Component):::Informs the input method adapter about the component that has the AWT focus if it's using the input context owning this adapter instance.:::
InputMethodAdapter#supportsBelowTheSpot():::Returns whether host input methods can support below-the-spot input:::return
InputMethodAdapter#stopListening():::Informs the input method adapter not to listen to the native events.:::
InputMethodAdapter#notifyClientWindowChange(Rectangle):::Notifies client Window location or status changes:::
InputMethodAdapter#reconvert():::Starts reconvertion:::throw->new->UnsupportedOperationException
InputMethodAdapter#disableInputMethod():::Disable the native input method:::
InputMethodAdapter#getNativeInputMethodInfo():::Returns a string with information about the native input method, or null.:::
InputMethodContext#dispatchCommittedText(Component, AttributedCharacterIterator, int):::Dispatches committed text to a client component:::if->text->getEndIndex->text->getBeginIndex->return->time->System->currentTimeMillis->try->req->client->getInputMethodRequests->if->beginIndex->text->getBeginIndex->toBeCommitted->new->AttributedString->getIterator->inputEvent->new->InputMethodEvent->client->dispatchEvent->else->keyChar->text->first->while->keyEvent->new->KeyEvent->client->dispatchEvent->text->next->catch->finally
InputMethodContext#grabCompositionArea(boolean):::Grabs the composition area for use by this context:::synchronized->if->compositionAreaHandler->grabCompositionArea->else->CompositionAreaHandler->closeCompositionArea
InputMethodContext#releaseCompositionArea():::Releases and closes the composition area if it is currently owned by this context's composition area handler.:::synchronized->if->compositionAreaHandler->releaseCompositionArea
InputMethodContext#isCompositionAreaVisible():::Calls CompositionAreaHandler.isCompositionAreaVisible() to see whether the composition area is visible or not:::if->return->compositionAreaHandler->isCompositionAreaVisible->return
InputMethodContext#setCompositionAreaVisible(boolean):::Calls CompositionAreaHandler.setCompositionAreaVisible to show or hide the composition area:::if->compositionAreaHandler->setCompositionAreaVisible
InputMethodContext#getTextLocation(TextHitInfo):::Calls the current client component's implementation of getTextLocation.:::return->getReq->getTextLocation
InputMethodContext#getLocationOffset(int, int):::Calls the current client component's implementation of getLocationOffset.:::return->getReq->getLocationOffset
InputMethodContext#getInsertPositionOffset():::Calls the current client component's implementation of getInsertPositionOffset.:::return->getReq->getInsertPositionOffset
InputMethodContext#getCommittedText(int, int, Attribute[]):::Calls the current client component's implementation of getCommittedText.:::return->getReq->getCommittedText
InputMethodContext#getCommittedTextLength():::Calls the current client component's implementation of getCommittedTextLength.:::return->getReq->getCommittedTextLength
InputMethodContext#cancelLatestCommittedText(Attribute[]):::Calls the current client component's implementation of cancelLatestCommittedText.:::return->getReq->cancelLatestCommittedText
InputMethodContext#getSelectedText(Attribute[]):::Calls the current client component's implementation of getSelectedText.:::return->getReq->getSelectedText
InputMethodContext#setCompositionAreaUndecorated(boolean):::Disables or enables decorations for the composition window.:::if->compositionAreaHandler->setCompositionAreaUndecorated
InputMethodLocator#isLocaleAvailable(Locale):::Returns whether support for locale is available from the input method.:::try->locales->descriptor->getAvailableLocales->for->i->catch->finally->return
InputMethodLocator#deriveLocator(Locale):::Returns an input method locator that has locale forLocale, but otherwise the same data as this locator:::if->return->else->return->new->InputMethodLocator
InputMethodLocator#sameInputMethod(InputMethodLocator):::Returns whether this and other describe the same input method engine, ignoring the locale setting.:::if->return->if->return->if->descriptor->getClass->getClass->equals->return->if->loader->equals->return->return
InputMethodLocator#getActionCommandString():::Returns a string that can be used as an action command string:::inputMethodString->descriptor->getClass->getName->if->return->else->return->locale->toString
InputMethodManager#getInstance():::Returns the instance of InputMethodManager:::if->return->synchronized->if->imm->new->ExecutableInputMethodManager->if->imm->hasMultipleInputMethods->imm->initialize->immThread->new->Thread->immThread->setDaemon->immThread->setPriority->immThread->start->return
InputMethodManager#getTriggerMenuString():::Gets a string for the trigger menu item that should be added to the window manager menu:::
InputMethodManager#notifyChangeRequest(Component):::Notifies InputMethodManager that input method change has been requested by the user:::
InputMethodManager#notifyChangeRequestByHotKey(Component):::Notifies InputMethodManager that input method change has been requested by the user using the hot key combination:::
InputMethodManager#setInputContext(InputContext):::Sets the current input context so that it will be notified of input method changes initiated from the user interface:::
InputMethodManager#findInputMethod(Locale):::Tries to find an input method locator for the given locale:::
InputMethodManager#getDefaultKeyboardLocale():::Gets the default keyboard locale of the underlying operating system.:::
InputMethodManager#hasMultipleInputMethods():::Returns whether multiple input methods are available or not:::
InputMethodPopupMenu#isSelected(String, String):::Returns whether command indicates the same input method as currentSelection, taking into account that command may not specify a locale where currentSelection does.:::if->return->if->command->equals->return->index->currentSelection->indexOf->if->currentSelection->substring->equals->return->return
InputMethodPopupMenu#getLocaleName(Locale):::Returns a localized locale name for input methods with the given locale:::localeString->locale->toString->localeName->Toolkit->getProperty->if->locale->getDisplayName->if->localeName->length->return
InputMethodWindow#setInputContext(InputContext):::Sets the input context that this input method window is attached to, null to unattach the window.:::

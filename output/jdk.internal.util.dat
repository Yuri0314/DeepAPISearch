jdk.internal.util.ArraysSupport#vectorizedMismatch(Object, long, Object, long, int, int)->int:::Find the relative index of the first mismatching pair of elements in two primitive arrays of the same component type
jdk.internal.util.ArraysSupport#mismatch(boolean[], boolean[], int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(boolean[], int, boolean[], int, int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(byte[], byte[], int)->int:::Find the index of a mismatch between two arrays
jdk.internal.util.ArraysSupport#mismatch(byte[], int, byte[], int, int)->int:::Find the relative index of a mismatch between two arrays starting from given indexes
jdk.internal.util.ArraysSupport#mismatch(char[], char[], int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(char[], int, char[], int, int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(short[], short[], int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(short[], int, short[], int, int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(int[], int[], int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(int[], int, int[], int, int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(float[], float[], int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(float[], int, float[], int, int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(long[], long[], int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(long[], int, long[], int, int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(double[], double[], int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#mismatch(double[], int, double[], int, int)->int::: arrays support mismatch
jdk.internal.util.ArraysSupport#newLength(int, int, int)->int:::Calculates a new array length given an array's current length, a preferred growth value, and a minimum growth value
jdk.internal.util.Preconditions#outOfBoundsExceptionFormatter(Function)->BiFunction, X>:::Returns an out-of-bounds exception formatter from an given exception factory
jdk.internal.util.Preconditions#checkIndex(int, int, BiFunction, X>)->int:::Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive)
jdk.internal.util.Preconditions#checkFromToIndex(int, int, int, BiFunction, X>)->int:::Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)
jdk.internal.util.Preconditions#checkFromIndexSize(int, int, int, BiFunction, X>)->int:::Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)
jdk.internal.util.StaticProperty#javaHome()->String:::Return the java.home system property
jdk.internal.util.StaticProperty#userHome()->String:::Return the user.home system property
jdk.internal.util.StaticProperty#userDir()->String:::Return the user.dir system property
jdk.internal.util.StaticProperty#userName()->String:::Return the user.name system property
jdk.internal.util.StaticProperty#jdkSerialFilter()->String:::Return the jdk.serialFilter system property

ArraysSupport#exactLog2(int)::: arrays support exact log2:::if->throw->new->Error->return->Integer->numberOfTrailingZeros
ArraysSupport#vectorizedMismatch(Object, long, Object, long, int, int):::Find the relative index of the first mismatching pair of elements in two primitive arrays of the same component type:::log2ValuesPerWidth->wi->for->tail->if->wordTail->if->bi->av->U->getIntUnaligned->bv->U->getIntUnaligned->if->x->o->Integer->numberOfLeadingZeros->Integer->numberOfTrailingZeros->return->return->else->return
ArraysSupport#mismatch(boolean[], boolean[], int)::: arrays support mismatch:::i->if->if->return->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(boolean[], int, boolean[], int, int)::: arrays support mismatch:::i->if->if->return->aOffset->bOffset->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(byte[], byte[], int):::Find the index of a mismatch between two arrays:::i->if->if->return->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(byte[], int, byte[], int, int):::Find the relative index of a mismatch between two arrays starting from given indexes:::i->if->if->return->aOffset->bOffset->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(char[], char[], int)::: arrays support mismatch:::i->if->if->return->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(char[], int, char[], int, int)::: arrays support mismatch:::i->if->if->return->aOffset->bOffset->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(short[], short[], int)::: arrays support mismatch:::i->if->if->return->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(short[], int, short[], int, int)::: arrays support mismatch:::i->if->if->return->aOffset->bOffset->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(int[], int[], int)::: arrays support mismatch:::i->if->if->return->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(int[], int, int[], int, int)::: arrays support mismatch:::i->if->if->return->aOffset->bOffset->vectorizedMismatch->if->return->for->return
ArraysSupport#mismatch(float[], float[], int)::: arrays support mismatch:::return->mismatch
ArraysSupport#mismatch(float[], int, float[], int, int)::: arrays support mismatch:::i->if->if->Float->floatToRawIntBits->Float->floatToRawIntBits->aOffset->bOffset->vectorizedMismatch->if->if->Float->isNaN->Float->isNaN->return->else->for->return
ArraysSupport#mismatch(long[], long[], int)::: arrays support mismatch:::if->return->if->return->i->vectorizedMismatch->return
ArraysSupport#mismatch(long[], int, long[], int, int)::: arrays support mismatch:::if->return->if->return->aOffset->bOffset->i->vectorizedMismatch->return
ArraysSupport#mismatch(double[], double[], int)::: arrays support mismatch:::return->mismatch
ArraysSupport#mismatch(double[], int, double[], int, int)::: arrays support mismatch:::if->return->i->if->Double->doubleToRawLongBits->Double->doubleToRawLongBits->aOffset->bOffset->vectorizedMismatch->if->if->Double->isNaN->Double->isNaN->return->for->return
ArraysSupport#newLength(int, int, int):::Calculates a new array length given an array's current length, a preferred growth value, and a minimum growth value:::newLength->Math->max->if->return->return->hugeLength
ArraysSupport#hugeLength(int, int)::: arrays support huge length:::minLength->if->throw->new->OutOfMemoryError->if->return->return
Preconditions#outOfBounds(BiFunction, ? extends RuntimeException>, String, Integer...):::Maps out-of-bounds values to a runtime exception.:::largs->List->of->e->oobef->apply->return->outOfBoundsMessage->new->IndexOutOfBoundsException
Preconditions#outOfBoundsCheckIndex(BiFunction, ? extends RuntimeException>, int, int)::: preconditions out of bounds check index:::return->outOfBounds
Preconditions#outOfBoundsCheckFromToIndex(BiFunction, ? extends RuntimeException>, int, int, int)::: preconditions out of bounds check from to index:::return->outOfBounds
Preconditions#outOfBoundsCheckFromIndexSize(BiFunction, ? extends RuntimeException>, int, int, int)::: preconditions out of bounds check from index size:::return->outOfBounds
Preconditions#outOfBoundsExceptionFormatter(Function):::Returns an out-of-bounds exception formatter from an given exception factory:::return->new->BiFunction<String,List<Integer>,X>
Preconditions#outOfBoundsMessage(String, List)::: preconditions out of bounds message:::if->return->String->format->else->if->return->String->format->else->if->return->String->format->argSize->switch->break->break->switch->args->size->return->String->args->get->args->get->format->return->String->args->get->args->get->args->get->format->return->String->args->get->args->get->args->get->format->return->String->format
Preconditions#checkIndex(int, int, BiFunction, X>):::Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive):::if->throw->outOfBoundsCheckIndex->return
Preconditions#checkFromToIndex(int, int, int, BiFunction, X>):::Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive):::if->throw->outOfBoundsCheckFromToIndex->return
Preconditions#checkFromIndexSize(int, int, int, BiFunction, X>):::Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive):::if->throw->outOfBoundsCheckFromIndexSize->return
StaticProperty#initProperty(String)::: static property init property:::v->System->getProperty->if->throw->new->InternalError->return
StaticProperty#javaHome():::Return the java.home system property:::return
StaticProperty#userHome():::Return the user.home system property:::return
StaticProperty#userDir():::Return the user.dir system property:::return
StaticProperty#userName():::Return the user.name system property:::return
StaticProperty#jdkSerialFilter():::Return the jdk.serialFilter system property:::return

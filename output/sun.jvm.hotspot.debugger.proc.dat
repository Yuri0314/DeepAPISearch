sun.jvm.hotspot.debugger.proc.ProcAddress#equals(Object)->boolean::: proc address equals
sun.jvm.hotspot.debugger.proc.ProcAddress#hashCode()->int::: proc address hash code
sun.jvm.hotspot.debugger.proc.ProcAddress#toString()->String::: proc address to string
sun.jvm.hotspot.debugger.proc.ProcAddress#getCIntegerAt(long, long, boolean)->long::: proc address get integer at
sun.jvm.hotspot.debugger.proc.ProcAddress#getAddressAt(long)->Address::: proc address get address at
sun.jvm.hotspot.debugger.proc.ProcAddress#getCompOopAddressAt(long)->Address::: proc address get comp oop address at
sun.jvm.hotspot.debugger.proc.ProcAddress#getCompKlassAddressAt(long)->Address::: proc address get comp klass address at
sun.jvm.hotspot.debugger.proc.ProcAddress#getJBooleanAt(long)->boolean::: proc address get boolean at
sun.jvm.hotspot.debugger.proc.ProcAddress#getJByteAt(long)->byte::: proc address get byte at
sun.jvm.hotspot.debugger.proc.ProcAddress#getJCharAt(long)->char::: proc address get char at
sun.jvm.hotspot.debugger.proc.ProcAddress#getJDoubleAt(long)->double::: proc address get double at
sun.jvm.hotspot.debugger.proc.ProcAddress#getJFloatAt(long)->float::: proc address get float at
sun.jvm.hotspot.debugger.proc.ProcAddress#getJIntAt(long)->int::: proc address get int at
sun.jvm.hotspot.debugger.proc.ProcAddress#getJLongAt(long)->long::: proc address get long at
sun.jvm.hotspot.debugger.proc.ProcAddress#getJShortAt(long)->short::: proc address get short at
sun.jvm.hotspot.debugger.proc.ProcAddress#getOopHandleAt(long)->OopHandle::: proc address get oop handle at
sun.jvm.hotspot.debugger.proc.ProcAddress#getCompOopHandleAt(long)->OopHandle::: proc address get comp oop handle at
sun.jvm.hotspot.debugger.proc.ProcAddress#setCIntegerAt(long, long, long)->void::: proc address set integer at
sun.jvm.hotspot.debugger.proc.ProcAddress#setAddressAt(long, Address)->void::: proc address set address at
sun.jvm.hotspot.debugger.proc.ProcAddress#setJBooleanAt(long, boolean)->void::: proc address set boolean at
sun.jvm.hotspot.debugger.proc.ProcAddress#setJByteAt(long, byte)->void::: proc address set byte at
sun.jvm.hotspot.debugger.proc.ProcAddress#setJCharAt(long, char)->void::: proc address set char at
sun.jvm.hotspot.debugger.proc.ProcAddress#setJDoubleAt(long, double)->void::: proc address set double at
sun.jvm.hotspot.debugger.proc.ProcAddress#setJFloatAt(long, float)->void::: proc address set float at
sun.jvm.hotspot.debugger.proc.ProcAddress#setJIntAt(long, int)->void::: proc address set int at
sun.jvm.hotspot.debugger.proc.ProcAddress#setJLongAt(long, long)->void::: proc address set long at
sun.jvm.hotspot.debugger.proc.ProcAddress#setJShortAt(long, short)->void::: proc address set short at
sun.jvm.hotspot.debugger.proc.ProcAddress#setOopHandleAt(long, OopHandle)->void::: proc address set oop handle at
sun.jvm.hotspot.debugger.proc.ProcAddress#addOffsetTo(long)->Address::: proc address add offset to
sun.jvm.hotspot.debugger.proc.ProcAddress#addOffsetToAsOopHandle(long)->OopHandle::: proc address add offset to as oop handle
sun.jvm.hotspot.debugger.proc.ProcAddress#minus(Address)->long:::(FIXME: any signed/unsigned issues? Should this work for       OopHandles?)
sun.jvm.hotspot.debugger.proc.ProcAddress#lessThan(Address)->boolean::: proc address less than
sun.jvm.hotspot.debugger.proc.ProcAddress#lessThanOrEqual(Address)->boolean::: proc address less than or equal
sun.jvm.hotspot.debugger.proc.ProcAddress#greaterThan(Address)->boolean::: proc address greater than
sun.jvm.hotspot.debugger.proc.ProcAddress#greaterThanOrEqual(Address)->boolean::: proc address greater than or equal
sun.jvm.hotspot.debugger.proc.ProcAddress#andWithMask(long)->Address::: proc address and with mask
sun.jvm.hotspot.debugger.proc.ProcAddress#orWithMask(long)->Address::: proc address or with mask
sun.jvm.hotspot.debugger.proc.ProcAddress#xorWithMask(long)->Address::: proc address xor with mask
sun.jvm.hotspot.debugger.proc.ProcAddress#asLongValue()->long::: proc address as long value
sun.jvm.hotspot.debugger.proc.ProcAddress#getValue()->long::: proc address get value
sun.jvm.hotspot.debugger.proc.ProcAddress#main(String[])->void::: proc address main
sun.jvm.hotspot.debugger.proc.ProcCDebugger#getThreadList()->List::: proc debugger get thread list
sun.jvm.hotspot.debugger.proc.ProcCDebugger#getLoadObjectList()->List::: proc debugger get load object list
sun.jvm.hotspot.debugger.proc.ProcCDebugger#loadObjectContainingPC(Address)->LoadObject::: proc debugger load object containing c
sun.jvm.hotspot.debugger.proc.ProcCDebugger#topFrameForThread(ThreadProxy)->CFrame::: proc debugger top frame for thread
sun.jvm.hotspot.debugger.proc.ProcCDebugger#getNameOfFile(String)->String::: proc debugger get name of file
sun.jvm.hotspot.debugger.proc.ProcCDebugger#getProcessControl()->ProcessControl::: proc debugger get process control
sun.jvm.hotspot.debugger.proc.ProcCDebugger#canDemangle()->boolean::: proc debugger can demangle
sun.jvm.hotspot.debugger.proc.ProcCDebugger#demangle(String)->String::: proc debugger demangle
sun.jvm.hotspot.debugger.proc.ProcCFrame#pc()->Address::: proc frame pc
sun.jvm.hotspot.debugger.proc.ProcCFrame#localVariableBase()->Address::: proc frame local variable base
sun.jvm.hotspot.debugger.proc.ProcCFrame#sender(ThreadProxy)->CFrame::: proc frame sender
sun.jvm.hotspot.debugger.proc.ProcCFrame#closestSymbolToPC()->ClosestSymbol::: proc frame closest symbol to c
sun.jvm.hotspot.debugger.proc.ProcCFrame#setSender(ProcCFrame)->void::: proc frame set sender
sun.jvm.hotspot.debugger.proc.ProcDebugger#getMachineDescription()->MachineDescription::: proc debugger get machine description
sun.jvm.hotspot.debugger.proc.ProcDebugger#addressValueToString(long)->String::: proc debugger address value to string
sun.jvm.hotspot.debugger.proc.ProcDebugger#readJBoolean(long)->boolean::: proc debugger read boolean
sun.jvm.hotspot.debugger.proc.ProcDebugger#readJByte(long)->byte::: proc debugger read byte
sun.jvm.hotspot.debugger.proc.ProcDebugger#readJChar(long)->char::: proc debugger read char
sun.jvm.hotspot.debugger.proc.ProcDebugger#readJDouble(long)->double::: proc debugger read double
sun.jvm.hotspot.debugger.proc.ProcDebugger#readJFloat(long)->float::: proc debugger read float
sun.jvm.hotspot.debugger.proc.ProcDebugger#readJInt(long)->int::: proc debugger read int
sun.jvm.hotspot.debugger.proc.ProcDebugger#readJLong(long)->long::: proc debugger read long
sun.jvm.hotspot.debugger.proc.ProcDebugger#readJShort(long)->short::: proc debugger read short
sun.jvm.hotspot.debugger.proc.ProcDebugger#readCInteger(long, long, boolean)->long::: proc debugger read integer
sun.jvm.hotspot.debugger.proc.ProcDebugger#readAddress(long)->ProcAddress::: proc debugger read address
sun.jvm.hotspot.debugger.proc.ProcDebugger#readCompOopAddress(long)->ProcAddress::: proc debugger read comp oop address
sun.jvm.hotspot.debugger.proc.ProcDebugger#readCompKlassAddress(long)->ProcAddress::: proc debugger read comp klass address
sun.jvm.hotspot.debugger.proc.ProcDebugger#readOopHandle(long)->ProcOopHandle::: proc debugger read oop handle
sun.jvm.hotspot.debugger.proc.ProcDebugger#readCompOopHandle(long)->ProcOopHandle::: proc debugger read comp oop handle
sun.jvm.hotspot.debugger.proc.ProcDebugger#getThreadIntegerRegisterSet(int)->long[]::: proc debugger get thread integer register set
sun.jvm.hotspot.debugger.proc.ProcDebugger#getAddressValue(Address)->long::: proc debugger get address value
sun.jvm.hotspot.debugger.proc.ProcDebugger#newAddress(long)->Address::: proc debugger new address
sun.jvm.hotspot.debugger.proc.ProcDebugger#getThreadList()->List::: proc debugger get thread list
sun.jvm.hotspot.debugger.proc.ProcDebugger#getLoadObjectList()->List::: proc debugger get load object list
sun.jvm.hotspot.debugger.proc.ProcDebugger#topFrameForThread(ThreadProxy)->CFrame::: proc debugger top frame for thread
sun.jvm.hotspot.debugger.proc.ProcDebugger#lookup(long)->ClosestSymbol::: proc debugger lookup
sun.jvm.hotspot.debugger.proc.ProcDebugger#demangle(String)->String::: proc debugger demangle
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#hasProcessList()->boolean:::FIXME: implement this with a Runtime.exec() of ps followed by parsing of its output
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getProcessList()->List::: proc debugger local get process list
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#attach(int)->void:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#attach(String, String)->void:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#detach()->boolean:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#suspend()->void::: proc debugger local suspend
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#resume()->void::: proc debugger local resume
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#isSuspended()->boolean::: proc debugger local is suspended
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#parseAddress(String)->Address:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getOS()->String:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getCPU()->String:::From the Debugger interface via JVMDebugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#hasConsole()->boolean::: proc debugger local has console
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#consoleExecuteCommand(String)->String::: proc debugger local console execute command
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getConsolePrompt()->String::: proc debugger local get console prompt
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getCDebugger()->CDebugger::: proc debugger local get debugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#lookup(String, String)->Address:::From the SymbolLookup interface via Debugger and JVMDebugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#lookupOop(String, String)->OopHandle:::From the SymbolLookup interface via Debugger and JVMDebugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getMachineDescription()->MachineDescription:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#setMachineDescription(MachineDescription)->void::: proc debugger local set machine description
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getRemoteProcessAddressSize()->int::: proc debugger local get remote process address size
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getThreadForIdentifierAddress(Address)->ThreadProxy:::From the ThreadAccess interface via Debugger and JVMDebugger
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getThreadForThreadId(long)->ThreadProxy::: proc debugger local get thread for thread id
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#readJLong(long)->long::: proc debugger local read long
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#addressValueToString(long)->String:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#readCInteger(long, long, boolean)->long:::Need to override this to relax alignment checks on Solaris/x86.
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#readAddress(long)->ProcAddress:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#readCompOopAddress(long)->ProcAddress::: proc debugger local read comp oop address
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#readCompKlassAddress(long)->ProcAddress::: proc debugger local read comp klass address
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#readOopHandle(long)->ProcOopHandle:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#readCompOopHandle(long)->ProcOopHandle::: proc debugger local read comp oop handle
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#writeBytesToProcess(long, long, byte[])->void::: proc debugger local write bytes to process
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#readBytesFromProcess(long, long)->ReadResult::: proc debugger local read bytes from process
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getPageSize()->int::: proc debugger local get page size
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getThreadIntegerRegisterSet(int)->long[]:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getAddressValue(Address)->long:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#newAddress(long)->Address:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getThreadList()->List:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#getLoadObjectList()->List:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#topFrameForThread(ThreadProxy)->CFrame:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#lookup(long)->ClosestSymbol:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcDebuggerLocal#demangle(String)->String:::From the ProcDebugger interface
sun.jvm.hotspot.debugger.proc.ProcOopHandle#addOffsetTo(long)->Address::: proc oop handle add offset to
sun.jvm.hotspot.debugger.proc.ProcOopHandle#andWithMask(long)->Address::: proc oop handle and with mask
sun.jvm.hotspot.debugger.proc.ProcOopHandle#orWithMask(long)->Address::: proc oop handle or with mask
sun.jvm.hotspot.debugger.proc.ProcOopHandle#xorWithMask(long)->Address::: proc oop handle xor with mask
sun.jvm.hotspot.debugger.proc.ProcThreadFactory#createThreadWrapper(Address)->ThreadProxy::: proc thread factory create thread wrapper
sun.jvm.hotspot.debugger.proc.ProcThreadFactory#createThreadWrapper(long)->ThreadProxy::: proc thread factory create thread wrapper
sun.jvm.hotspot.debugger.proc.SharedObject#newAddress(long)->Address::: shared object new address
sun.jvm.hotspot.debugger.proc.SharedObject#getAddressValue(Address)->long::: shared object get address value

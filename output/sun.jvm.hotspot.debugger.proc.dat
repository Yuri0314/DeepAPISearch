ProcAddress#equals(Object)::: proc address equals:::if->return->if->return->return
ProcAddress#hashCode()::: proc address hash code:::return
ProcAddress#toString()::: proc address to string:::return->debugger->addressValueToString
ProcAddress#getCIntegerAt(long, long, boolean)::: proc address get integer at:::return->debugger->readCInteger
ProcAddress#getAddressAt(long)::: proc address get address at:::return->debugger->readAddress
ProcAddress#getCompOopAddressAt(long)::: proc address get comp oop address at:::return->debugger->readCompOopAddress
ProcAddress#getCompKlassAddressAt(long)::: proc address get comp klass address at:::return->debugger->readCompKlassAddress
ProcAddress#getJBooleanAt(long)::: proc address get boolean at:::return->debugger->readJBoolean
ProcAddress#getJByteAt(long)::: proc address get byte at:::return->debugger->readJByte
ProcAddress#getJCharAt(long)::: proc address get char at:::return->debugger->readJChar
ProcAddress#getJDoubleAt(long)::: proc address get double at:::return->debugger->readJDouble
ProcAddress#getJFloatAt(long)::: proc address get float at:::return->debugger->readJFloat
ProcAddress#getJIntAt(long)::: proc address get int at:::return->debugger->readJInt
ProcAddress#getJLongAt(long)::: proc address get long at:::return->debugger->readJLong
ProcAddress#getJShortAt(long)::: proc address get short at:::return->debugger->readJShort
ProcAddress#getOopHandleAt(long)::: proc address get oop handle at:::return->debugger->readOopHandle
ProcAddress#getCompOopHandleAt(long)::: proc address get comp oop handle at:::return->debugger->readCompOopHandle
ProcAddress#setCIntegerAt(long, long, long)::: proc address set integer at:::throw->new->DebuggerException
ProcAddress#setAddressAt(long, Address)::: proc address set address at:::throw->new->DebuggerException
ProcAddress#setJBooleanAt(long, boolean)::: proc address set boolean at:::throw->new->DebuggerException
ProcAddress#setJByteAt(long, byte)::: proc address set byte at:::throw->new->DebuggerException
ProcAddress#setJCharAt(long, char)::: proc address set char at:::throw->new->DebuggerException
ProcAddress#setJDoubleAt(long, double)::: proc address set double at:::throw->new->DebuggerException
ProcAddress#setJFloatAt(long, float)::: proc address set float at:::throw->new->DebuggerException
ProcAddress#setJIntAt(long, int)::: proc address set int at:::throw->new->DebuggerException
ProcAddress#setJLongAt(long, long)::: proc address set long at:::throw->new->DebuggerException
ProcAddress#setJShortAt(long, short)::: proc address set short at:::throw->new->DebuggerException
ProcAddress#setOopHandleAt(long, OopHandle)::: proc address set oop handle at:::throw->new->DebuggerException
ProcAddress#addOffsetTo(long)::: proc address add offset to:::value->if->return->return->new->ProcAddress
ProcAddress#addOffsetToAsOopHandle(long)::: proc address add offset to as oop handle:::value->if->return->return->new->ProcOopHandle
ProcAddress#minus(Address):::(FIXME: any signed/unsigned issues? Should this work for       OopHandles?):::if->return->return
ProcAddress#lessThan(Address)::: proc address less than:::if->return->dbxArg->if->return->if->return->return
ProcAddress#lessThanOrEqual(Address)::: proc address less than or equal:::if->return->dbxArg->if->return->if->return->return
ProcAddress#greaterThan(Address)::: proc address greater than:::if->return->dbxArg->if->return->if->return->return
ProcAddress#greaterThanOrEqual(Address)::: proc address greater than or equal:::if->return->dbxArg->if->return->if->return->return
ProcAddress#andWithMask(long)::: proc address and with mask:::value->if->return->return->new->ProcAddress
ProcAddress#orWithMask(long)::: proc address or with mask:::value->if->return->return->new->ProcAddress
ProcAddress#xorWithMask(long)::: proc address xor with mask:::value->if->return->return->new->ProcAddress
ProcAddress#asLongValue()::: proc address as long value:::return
ProcAddress#getValue()::: proc address get value:::return
ProcAddress#check(boolean, String)::: proc address check:::if->println->System->exit
ProcAddress#main(String[])::: proc address main:::p1->new->ProcAddress->p2->p1->addOffsetTo->n1->p2->addOffsetTo->n2->n1->addOffsetTo->p1->lessThan->check->p1->lessThan->check->p1->lessThan->check->p2->lessThan->check->p2->lessThan->check->n1->lessThan->check->p1->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n2->lessThan->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->greaterThan->check->n2->greaterThan->check->n2->greaterThan->check->n1->greaterThan->check->n1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->n2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->println
ProcCDebugger#getThreadList()::: proc debugger get thread list:::return->dbg->getThreadList
ProcCDebugger#getLoadObjectList()::: proc debugger get load object list:::return->dbg->getLoadObjectList
ProcCDebugger#loadObjectContainingPC(Address)::: proc debugger load object containing c:::if->return->objs->getLoadObjectList->arr->objs->toArray->mid->low->high->while->midVal->cmp->pc->midVal->getBase->minus->if->else->if->size->midVal->getSize->if->else->return->else->return->return
ProcCDebugger#topFrameForThread(ThreadProxy)::: proc debugger top frame for thread:::return->dbg->topFrameForThread
ProcCDebugger#getNameOfFile(String)::: proc debugger get name of file:::return->new->File->getName
ProcCDebugger#getProcessControl()::: proc debugger get process control:::return
ProcCDebugger#canDemangle()::: proc debugger can demangle:::return
ProcCDebugger#demangle(String)::: proc debugger demangle:::return->dbg->demangle
ProcCFrame#pc()::: proc frame pc:::return
ProcCFrame#localVariableBase()::: proc frame local variable base:::return
ProcCFrame#sender(ThreadProxy)::: proc frame sender:::return
ProcCFrame#closestSymbolToPC()::: proc frame closest symbol to c:::return->procDbg->procDbg->getAddressValue->lookup
ProcCFrame#setSender(ProcCFrame)::: proc frame set sender:::
ProcDebugger#getMachineDescription()::: proc debugger get machine description:::
ProcDebugger#addressValueToString(long)::: proc debugger address value to string:::
ProcDebugger#readJBoolean(long)::: proc debugger read boolean:::
ProcDebugger#readJByte(long)::: proc debugger read byte:::
ProcDebugger#readJChar(long)::: proc debugger read char:::
ProcDebugger#readJDouble(long)::: proc debugger read double:::
ProcDebugger#readJFloat(long)::: proc debugger read float:::
ProcDebugger#readJInt(long)::: proc debugger read int:::
ProcDebugger#readJLong(long)::: proc debugger read long:::
ProcDebugger#readJShort(long)::: proc debugger read short:::
ProcDebugger#readCInteger(long, long, boolean)::: proc debugger read integer:::
ProcDebugger#readAddress(long)::: proc debugger read address:::
ProcDebugger#readCompOopAddress(long)::: proc debugger read comp oop address:::
ProcDebugger#readCompKlassAddress(long)::: proc debugger read comp klass address:::
ProcDebugger#readOopHandle(long)::: proc debugger read oop handle:::
ProcDebugger#readCompOopHandle(long)::: proc debugger read comp oop handle:::
ProcDebugger#getThreadIntegerRegisterSet(int)::: proc debugger get thread integer register set:::
ProcDebugger#getAddressValue(Address)::: proc debugger get address value:::
ProcDebugger#newAddress(long)::: proc debugger new address:::
ProcDebugger#getThreadList()::: proc debugger get thread list:::
ProcDebugger#getLoadObjectList()::: proc debugger get load object list:::
ProcDebugger#topFrameForThread(ThreadProxy)::: proc debugger top frame for thread:::
ProcDebugger#lookup(long)::: proc debugger lookup:::
ProcDebugger#demangle(String)::: proc debugger demangle:::
ProcDebuggerLocal#hasProcessList():::FIXME: implement this with a Runtime.exec() of ps followed by parsing of its output:::return
ProcDebuggerLocal#getProcessList()::: proc debugger local get process list:::throw->new->DebuggerException
ProcDebuggerLocal#attach(int):::From the Debugger interface via JVMDebugger:::checkAttached->new->Integer->toString->attach0
ProcDebuggerLocal#attach(String, String):::From the Debugger interface via JVMDebugger:::checkAttached->new->HashMap->attach0
ProcDebuggerLocal#detach():::From the Debugger interface via JVMDebugger:::if->return->try->if->return->detach0->clearCache->return->catch->e->printStackTrace->return->finally->resetNativePointers->clearCacheFields
ProcDebuggerLocal#suspend()::: proc debugger local suspend:::requireAttach->if->throw->new->DebuggerException->suspend0->enableCache->reresolveLoadObjects
ProcDebuggerLocal#resume()::: proc debugger local resume:::requireAttach->if->throw->new->DebuggerException->resume0->disableCache
ProcDebuggerLocal#isSuspended()::: proc debugger local is suspended:::requireAttach->return
ProcDebuggerLocal#parseAddress(String):::From the Debugger interface via JVMDebugger:::addr->utils->scanAddress->if->return->return->new->ProcAddress
ProcDebuggerLocal#getOS():::From the Debugger interface via JVMDebugger:::return->PlatformInfo->getOS
ProcDebuggerLocal#getCPU():::From the Debugger interface via JVMDebugger:::return->PlatformInfo->getCPU
ProcDebuggerLocal#hasConsole()::: proc debugger local has console:::return
ProcDebuggerLocal#consoleExecuteCommand(String)::: proc debugger local console execute command:::throw->new->DebuggerException
ProcDebuggerLocal#getConsolePrompt()::: proc debugger local get console prompt:::return
ProcDebuggerLocal#getCDebugger()::: proc debugger local get debugger:::if->new->ProcCDebugger->return
ProcDebuggerLocal#lookup(String, String):::From the SymbolLookup interface via Debugger and JVMDebugger:::requireAttach->addr->lookupByName0->if->return->return->new->ProcAddress
ProcDebuggerLocal#lookupOop(String, String):::From the SymbolLookup interface via Debugger and JVMDebugger:::addr->lookup->if->return->return->addr->addOffsetToAsOopHandle
ProcDebuggerLocal#getMachineDescription():::From the ProcDebugger interface:::return
ProcDebuggerLocal#setMachineDescription(MachineDescription)::: proc debugger local set machine description:::machDesc->isBigEndian->setBigEndian->machDesc->getAddressSize->machDesc->isBigEndian->new->DebuggerUtilities
ProcDebuggerLocal#getRemoteProcessAddressSize()::: proc debugger local get remote process address size:::requireAttach->return->getRemoteProcessAddressSize0
ProcDebuggerLocal#getThreadForIdentifierAddress(Address):::From the ThreadAccess interface via Debugger and JVMDebugger:::return->threadFactory->createThreadWrapper
ProcDebuggerLocal#getThreadForThreadId(long)::: proc debugger local get thread for thread id:::return->threadFactory->createThreadWrapper
ProcDebuggerLocal#readJLong(long)::: proc debugger local read long:::checkJavaConfigured->if->utils->checkAlignment->else->utils->checkAlignment->data->readBytes->return->utils->dataToJLong
ProcDebuggerLocal#addressValueToString(long):::From the ProcDebugger interface:::return->utils->addressValueToString
ProcDebuggerLocal#readCInteger(long, long, boolean):::Need to override this to relax alignment checks on Solaris/x86.:::checkConfigured->if->utils->checkAlignment->else->if->utils->checkAlignment->else->utils->checkAlignment->data->readBytes->return->utils->dataToCInteger
ProcDebuggerLocal#readAddress(long):::From the ProcDebugger interface:::value->readAddressValue->return->new->ProcAddress
ProcDebuggerLocal#readCompOopAddress(long)::: proc debugger local read comp oop address:::value->readCompOopAddressValue->return->new->ProcAddress
ProcDebuggerLocal#readCompKlassAddress(long)::: proc debugger local read comp klass address:::value->readCompKlassAddressValue->return->new->ProcAddress
ProcDebuggerLocal#readOopHandle(long):::From the ProcDebugger interface:::value->readAddressValue->return->new->ProcOopHandle
ProcDebuggerLocal#readCompOopHandle(long)::: proc debugger local read comp oop handle:::value->readCompOopAddressValue->return->new->ProcOopHandle
ProcDebuggerLocal#writeBytesToProcess(long, long, byte[])::: proc debugger local write bytes to process:::if->throw->new->DebuggerException->writeBytesToProcess0
ProcDebuggerLocal#readBytesFromProcess(long, long)::: proc debugger local read bytes from process:::requireAttach->res->readBytesFromProcess0->if->return->new->ReadResult->else->return->new->ReadResult
ProcDebuggerLocal#getPageSize()::: proc debugger local get page size:::pagesize->getPageSize0->if->if->PlatformInfo->getCPU->equals->PlatformInfo->getCPU->equals->else->return
ProcDebuggerLocal#getThreadIntegerRegisterSet(int):::From the ProcDebugger interface:::requireAttach->return->getThreadIntegerRegisterSet0
ProcDebuggerLocal#getAddressValue(Address):::From the ProcDebugger interface:::if->return->return->getValue
ProcDebuggerLocal#newAddress(long):::From the ProcDebugger interface:::if->return->return->new->ProcAddress
ProcDebuggerLocal#getThreadList():::From the ProcDebugger interface:::requireAttach->res->if->else->new->ArrayList->fillThreadList0->if->return
ProcDebuggerLocal#getLoadObjectList():::From the ProcDebugger interface:::requireAttach->if->throw->new->DebuggerException->if->updateLoadObjectCache->return
ProcDebuggerLocal#topFrameForThread(ThreadProxy):::From the ProcDebugger interface:::requireAttach->res->if->topFrameCache->get->return->else->context->thread->getContext->numRegs->context->getNumRegisters->regs->new->longArr->for->i->fillCFrameList0->if->topFrameCache->put->return
ProcDebuggerLocal#lookup(long):::From the ProcDebugger interface:::requireAttach->return->lookupByAddress0
ProcDebuggerLocal#demangle(String):::From the ProcDebugger interface:::return->demangle0
ProcDebuggerLocal#updateLoadObjectCache()::: proc debugger local update load object cache:::res->new->ArrayList->new->HashMap->fillLoadObjectList0->sortLoadObjects
ProcDebuggerLocal#sortLoadObjects(List)::: proc debugger local sort load objects:::arr->in->toArray->Arrays->sort->return->Arrays->asList
ProcDebuggerLocal#lookupByName(String, String)::: proc debugger local lookup by name:::if->getLoadObjectList->dso->nameToDsoMap->get->if->addr->dso->lookupSymbol->if->return->addr->getValue->return
ProcDebuggerLocal#findDSOByName(String)::: proc debugger local find by name:::if->return->for->iter->loadObjectCache->iterator->iter->hasNext->return
ProcDebuggerLocal#reresolveLoadObjects()::: proc debugger local reresolve load objects:::if->return->updateLoadObjectCache
ProcDebuggerLocal#checkAttached()::: proc debugger local check attached:::if->if->throw->new->DebuggerException->else->throw->new->DebuggerException
ProcDebuggerLocal#requireAttach()::: proc debugger local require attach:::if->throw->new->RuntimeException
ProcDebuggerLocal#clearCacheFields()::: proc debugger local clear cache fields:::
ProcDebuggerLocal#resetNativePointers()::: proc debugger local reset native pointers:::
ProcDebuggerLocal#attach0(String)::: proc debugger local attach0:::
ProcDebuggerLocal#attach0(String, String)::: proc debugger local attach0:::
ProcDebuggerLocal#detach0()::: proc debugger local detach0:::
ProcDebuggerLocal#getRemoteProcessAddressSize0()::: proc debugger local get remote process address size0:::
ProcDebuggerLocal#getPageSize0()::: proc debugger local get page size0:::
ProcDebuggerLocal#getThreadIntegerRegisterSet0(long)::: proc debugger local get thread integer register set0:::
ProcDebuggerLocal#fillThreadList0(List)::: proc debugger local fill thread list0:::
ProcDebuggerLocal#fillCFrameList0(long[])::: proc debugger local fill frame list0:::
ProcDebuggerLocal#createSenderFrame(ProcCFrame, long, long)::: proc debugger local create sender frame:::sender->newAddress->newAddress->new->ProcCFrame->if->f->setSender->return
ProcDebuggerLocal#fillLoadObjectList0(List)::: proc debugger local fill load object list0:::
ProcDebuggerLocal#createLoadObject(String, long, long)::: proc debugger local create load object:::f->new->File->baseAddr->newAddress->res->findDSOByName->if->oldBase->res->getBase->if->baseAddr->equals->res->setBase->else->f->length->new->SharedObject->nameToDsoMap->f->getName->put->return
ProcDebuggerLocal#lookupByName0(String, String)::: proc debugger local lookup by name0:::
ProcDebuggerLocal#lookupByAddress0(long)::: proc debugger local lookup by address0:::
ProcDebuggerLocal#createClosestSymbol(String, long)::: proc debugger local create closest symbol:::return->new->ClosestSymbol
ProcDebuggerLocal#readBytesFromProcess0(long, long)::: proc debugger local read bytes from process0:::
ProcDebuggerLocal#writeBytesToProcess0(long, long, byte[])::: proc debugger local write bytes to process0:::
ProcDebuggerLocal#suspend0()::: proc debugger local suspend0:::
ProcDebuggerLocal#resume0()::: proc debugger local resume0:::
ProcDebuggerLocal#demangle0(String)::: proc debugger local demangle0:::
ProcDebuggerLocal#initIDs()::: proc debugger local init ds:::
ProcOopHandle#addOffsetTo(long)::: proc oop handle add offset to:::throw->new->UnsupportedOperationException
ProcOopHandle#andWithMask(long)::: proc oop handle and with mask:::throw->new->UnsupportedOperationException
ProcOopHandle#orWithMask(long)::: proc oop handle or with mask:::throw->new->UnsupportedOperationException
ProcOopHandle#xorWithMask(long)::: proc oop handle xor with mask:::throw->new->UnsupportedOperationException
ProcThreadFactory#createThreadWrapper(Address)::: proc thread factory create thread wrapper:::
ProcThreadFactory#createThreadWrapper(long)::: proc thread factory create thread wrapper:::
SharedObject#newAddress(long)::: shared object new address:::return->dbg->newAddress
SharedObject#getAddressValue(Address)::: shared object get address value:::return->dbg->getAddressValue

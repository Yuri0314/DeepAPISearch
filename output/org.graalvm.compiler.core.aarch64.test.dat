org.graalvm.compiler.core.aarch64.test.AArch64AddSubShiftTest#addShiftInt(int)->int::: arch64 add sub shift test add shift int
org.graalvm.compiler.core.aarch64.test.AArch64AddSubShiftTest#testAddShiftInt()->void:::Check whether the addSubShift match rule in AArch64NodeMatchRules does work for add operation with int type and check if the expected LIR instructions show up.
org.graalvm.compiler.core.aarch64.test.AArch64AddSubShiftTest#addShiftLong(long)->long::: arch64 add sub shift test add shift long
org.graalvm.compiler.core.aarch64.test.AArch64AddSubShiftTest#testAddShiftLong()->void:::Check whether the addSubShift match rule in AArch64NodeMatchRules does work for add operation with long type and check if the expected LIR instructions show up.
org.graalvm.compiler.core.aarch64.test.AArch64AddSubShiftTest#subShiftInt(int, int)->int::: arch64 add sub shift test sub shift int
org.graalvm.compiler.core.aarch64.test.AArch64AddSubShiftTest#testSubShiftInt()->void:::Check whether the addSubShift match rule in AArch64NodeMatchRules does work for sub operation with int type and check if the expected LIR instructions show up.
org.graalvm.compiler.core.aarch64.test.AArch64AddSubShiftTest#subShiftLong(long, long)->long::: arch64 add sub shift test sub shift long
org.graalvm.compiler.core.aarch64.test.AArch64AddSubShiftTest#testSubShiftLong()->void:::Check whether the addSubShift match rule in AArch64NodeMatchRules does work for sub operation with long type and check if the expected LIR instructions show up.
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#extractInt(int)->int:::unsigned bit field extract int.
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#invalidExtractInt(int)->int:::unsigned bit field extract int (negative cases).
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#testExtractInt()->void::: arch64 bit field test test extract int
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#extractLong(long)->long:::unsigned bit field extract long.
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#invalidExtractLong(long)->long:::unsigned bit field extract long (negative cases).
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#testExtractLong()->void::: arch64 bit field test test extract long
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#insertInt(int)->int:::unsigned bit field insert int.
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#invalidInsertInt(int)->int:::unsigned bit field insert int (negative cases).
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#testInsertInt()->void::: arch64 bit field test test insert int
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#insertLong(long)->long:::unsigned bit field insert long.
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#invalidInsertLong(long)->long:::unsigned bit field insert long (negative cases).
org.graalvm.compiler.core.aarch64.test.AArch64BitFieldTest#testInsertLong()->void::: arch64 bit field test test insert long
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#equalsTo(int)->int::: arch64 cbz test equals to
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#notEqualsTo(int)->int::: arch64 cbz test not equals to
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#isNull(String)->String::: arch64 cbz test is null
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#isNotNull(String)->String::: arch64 cbz test is not null
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#objectEqualsNull(String, String)->String::: arch64 cbz test object equals null
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#objectEquals(String, String)->String::: arch64 cbz test object equals
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#testEqualsTo()->void::: arch64 cbz test test equals to
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#testNotEqualsTo()->void::: arch64 cbz test test not equals to
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#testIsNull()->void::: arch64 cbz test test is null
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#testIsNotNull()->void::: arch64 cbz test test is not null
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#testObjectEqualsNull()->void::: arch64 cbz test test object equals null
org.graalvm.compiler.core.aarch64.test.AArch64CbzTest#testObjectEquals()->void::: arch64 cbz test test object equals
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetEQZero(int)->int:::conditionalSet test for integer tests condition.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetEQZero()->void::: arch64 conditional set test test conditional set zero
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetEQ(int, int)->int:::conditionalSet test for integer equals condition.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetEQ()->void::: arch64 conditional set test test conditional set q
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetLT(int, int)->int:::conditionalSet test for integer less than condition.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetLT()->void::: arch64 conditional set test test conditional set t
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetBT(int, int)->boolean:::conditionalSet test for integer below condition.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetBT()->void::: arch64 conditional set test test conditional set t
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetFPEQ(float, float)->int:::conditionalSet test for float point equals condition.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetFPEQ()->void::: arch64 conditional set test test conditional set q
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetFPLT(float, float)->int:::conditionalSet test for float point less than condition.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetFPLT()->void::: arch64 conditional set test test conditional set t
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetObjectEQ(Integer, Integer)->int:::conditionalSet test for object equals condition.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetObjectEQ()->void::: arch64 conditional set test test conditional set object q
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetIsNull(Object)->int:::conditionalSet test for null check condition.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetIsNull()->void::: arch64 conditional set test test conditional set is null
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetSwap(int, int)->int:::conditionalSet test when trueValue and falseValue need to be exchanged.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetSwap()->void::: arch64 conditional set test test conditional set swap
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#conditionalSetLong(int, int)->long:::conditionalSet test for result with long type.
org.graalvm.compiler.core.aarch64.test.AArch64ConditionalSetTest#testConditionalSetLong()->void::: arch64 conditional set test test conditional set long
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#andShiftInt(int, int)->int:::logicShift match rule test for instruction "and" with int type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testAndShiftInt()->void::: arch64 logic shift test test and shift int
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#andShiftLong(long, long)->long:::logicShift match rule test for instruction "and" with long type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testAndShiftLong()->void::: arch64 logic shift test test and shift long
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#orrShiftInt(int, int)->int:::logicShift match rule test for instruction "orr" with int type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testOrrShiftInt()->void::: arch64 logic shift test test orr shift int
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#orrShiftLong(long, long)->long:::logicShift match rule test for instruction "orr" with long type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testOrrShiftLong()->void::: arch64 logic shift test test orr shift long
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#eorShiftInt(int, int)->int:::logicShift match rule test for instruction "eor" with int type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testEorShiftInt()->void::: arch64 logic shift test test eor shift int
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#eorShiftLong(long, long)->long:::logicShift match rule test for instruction "eor" with long type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testEorShiftLong()->void::: arch64 logic shift test test eor shift long
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#bicShiftInt(int, int)->int:::logicShift match rule test for instruction "bic" with int type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testBicShiftInt()->void::: arch64 logic shift test test bic shift int
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#bicShiftLong(long, long)->long:::logicShift match rule test for instruction "bic" with long type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testBicShiftLong()->void::: arch64 logic shift test test bic shift long
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#ornShiftInt(int, int)->int:::logicShift match rule test for instruction "orn" with int type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testOrnShiftInt()->void::: arch64 logic shift test test orn shift int
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#ornShiftLong(long, long)->long:::logicShift match rule test for instruction "orn" with long type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testOrnShiftLong()->void::: arch64 logic shift test test orn shift long
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#eonShiftInt(int, int)->int:::logicShift match rule test for instruction "eon" with int type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testEonShiftInt()->void::: arch64 logic shift test test eon shift int
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#eonShiftLong(long, long)->long:::logicShift match rule test for instruction "eon" with long type.
org.graalvm.compiler.core.aarch64.test.AArch64LogicShiftTest#testEonShiftLong()->void::: arch64 logic shift test test eon shift long
org.graalvm.compiler.core.aarch64.test.AArch64MatchRuleTest#checkAArch64()->void::: arch64 match rule test check arch64
org.graalvm.compiler.core.aarch64.test.AArch64MembarOpTest#stub()->void::: arch64 membar op test stub
org.graalvm.compiler.core.aarch64.test.AArch64MembarOpTest#checkAArch64()->void::: arch64 membar op test check arch64
org.graalvm.compiler.core.aarch64.test.AArch64MembarOpTest#runNormalMembarTests()->void::: arch64 membar op test run normal membar tests
org.graalvm.compiler.core.aarch64.test.AArch64MembarOpTest#runExceptionalTests()->void::: arch64 membar op test run exceptional tests
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#multiplyNegateInt(int, int)->int::: arch64 neg test multiply negate int
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#testMultiplyNegateInt()->void::: arch64 neg test test multiply negate int
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#negMulInt(int, int)->int::: arch64 neg test neg mul int
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#testNegateMultiplyInt()->void::: arch64 neg test test negate multiply int
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#multiplyNegateLong(long, long)->long::: arch64 neg test multiply negate long
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#testMultiplyNegateLong()->void::: arch64 neg test test multiply negate long
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#negMulLong(long, long)->long::: arch64 neg test neg mul long
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#testNegateMultiplyLong()->void::: arch64 neg test test negate multiply long
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#multiplyNegateNoMatch(int, int)->int:::check the case that mneg rule does not work at the reason of multi-use.
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#testMultiplyNegateNoMatch()->void::: arch64 neg test test multiply negate no match
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#multiplyNegateFloat(float, float)->float::: arch64 neg test multiply negate float
org.graalvm.compiler.core.aarch64.test.AArch64MNegTest#testMultiplyNegateFloat()->void::: arch64 neg test test multiply negate float
org.graalvm.compiler.core.aarch64.test.AArch64MultiplyAddSubTest#mulAddInt(int, int, int)->int:::multiplyAddSub match rule test for add operation with int type.
org.graalvm.compiler.core.aarch64.test.AArch64MultiplyAddSubTest#testMultiplyAddInt()->void::: arch64 multiply add sub test test multiply add int
org.graalvm.compiler.core.aarch64.test.AArch64MultiplyAddSubTest#mulAddLong(long, long, long)->long:::multiplyAddSub match rule test for add operation with long type.
org.graalvm.compiler.core.aarch64.test.AArch64MultiplyAddSubTest#testMultiplyAddLong()->void::: arch64 multiply add sub test test multiply add long
org.graalvm.compiler.core.aarch64.test.AArch64MultiplyAddSubTest#mulSubInt(int, int, int)->int:::multiplyAddSub match rule test for sub operation with int type.
org.graalvm.compiler.core.aarch64.test.AArch64MultiplyAddSubTest#testMultiplySubInt()->void::: arch64 multiply add sub test test multiply sub int
org.graalvm.compiler.core.aarch64.test.AArch64MultiplyAddSubTest#mulSubLong(long, long, long)->long:::multiplyAddSub match rule test for sub operation with long type.
org.graalvm.compiler.core.aarch64.test.AArch64MultiplyAddSubTest#testMultiplySubLong()->void::: arch64 multiply add sub test test multiply sub long
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#checkAArch64()->void::: arch64 test bit and branch test check arch64
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testBit42Snippet(long, long, long)->long::: arch64 test bit and branch test test bit42 snippet
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testBit42()->void::: arch64 test bit and branch test test bit42
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testBitTestAndBranchSingleSnippet(int)->int:::Tests the graceful case, where the estimation for CompilationResultBuilder#labelWithinRange(LIRInstruction, org.graalvm.compiler.asm.Label, int) holds.
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testBitTestAndBranchSingle()->void::: arch64 test bit and branch test test bit test and branch single
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testBitTestAndBranchFourSnippet(int)->int:::Tests the case, where the estimation for CompilationResultBuilder#labelWithinRange(LIRInstruction, org.graalvm.compiler.asm.Label, int) does not hold and the code generation must be redone with large branches.
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testBitTestAndBranchFour()->void::: arch64 test bit and branch test test bit test and branch four
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testLessThanZeroSnippet(long, long)->float::: arch64 test bit and branch test test less than zero snippet
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testLessThanZero()->void::: arch64 test bit and branch test test less than zero
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testLessThanEqualZeroSnippet(long)->float::: arch64 test bit and branch test test less than equal zero snippet
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testLessThanEqualZero()->void::: arch64 test bit and branch test test less than equal zero
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testGreaterThanZeroSnippet(int)->float::: arch64 test bit and branch test test greater than zero snippet
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testGreaterThanZero()->void::: arch64 test bit and branch test test greater than zero
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testGreaterThanEqualZeroSnippet(int)->float::: arch64 test bit and branch test test greater than equal zero snippet
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#testGreaterThanEqualZero()->void::: arch64 test bit and branch test test greater than equal zero
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest.NoOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: no op emit code
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#fillOps(LargeOpSpec, int)->int::: arch64 test bit and branch test fill ops
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#createLIRSuites(OptionValues)->LIRSuites::: arch64 test bit and branch test create suites
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest.CheckPhase#run(TargetDescription, LIRGenerationResult, PreAllocationOptimizationContext)->void::: check phase run
org.graalvm.compiler.core.aarch64.test.AArch64TestBitAndBranchTest#checkLIR(String, Predicate, int)->void::: arch64 test bit and branch test check r

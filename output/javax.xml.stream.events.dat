javax.xml.stream.events.Attribute#getName()->QName:::Returns the QName for this attribute
javax.xml.stream.events.Attribute#getValue()->String:::Gets the normalized value of this attribute
javax.xml.stream.events.Attribute#getDTDType()->String:::Gets the type of this attribute, default is the String "CDATA"
javax.xml.stream.events.Attribute#isSpecified()->boolean:::A flag indicating whether this attribute was actually specified in the start-tag of its element, or was defaulted from the schema.
javax.xml.stream.events.Characters#getData()->String:::Get the character data of this event
javax.xml.stream.events.Characters#isWhiteSpace()->boolean:::Returns true if this set of Characters is all whitespace
javax.xml.stream.events.Characters#isCData()->boolean:::Returns true if this is a CData section
javax.xml.stream.events.Characters#isIgnorableWhiteSpace()->boolean:::Return true if this is ignorableWhiteSpace
javax.xml.stream.events.Comment#getText()->String:::Return the string data of the comment, returns empty string if it does not exist
javax.xml.stream.events.DTD#getDocumentTypeDeclaration()->String:::Returns the entire Document Type Declaration as a string, including the internal DTD subset
javax.xml.stream.events.DTD#getProcessedDTD()->Object:::Returns an implementation defined representation of the DTD
javax.xml.stream.events.DTD#getNotations()->List:::Return a List containing the notations declared in the DTD
javax.xml.stream.events.DTD#getEntities()->List:::Return a List containing the general entities, both external and internal, declared in the DTD
javax.xml.stream.events.EndElement#getName()->QName:::Get the name of this event
javax.xml.stream.events.EndElement#getNamespaces()->Iterator:::Returns an Iterator of namespaces that have gone out of scope
javax.xml.stream.events.EntityDeclaration#getPublicId()->String:::The entity's public identifier, or null if none was given
javax.xml.stream.events.EntityDeclaration#getSystemId()->String:::The entity's system identifier.
javax.xml.stream.events.EntityDeclaration#getName()->String:::The entity's name
javax.xml.stream.events.EntityDeclaration#getNotationName()->String:::The name of the associated notation.
javax.xml.stream.events.EntityDeclaration#getReplacementText()->String:::The replacement text of the entity
javax.xml.stream.events.EntityDeclaration#getBaseURI()->String:::Get the base URI for this reference or null if this information is not available
javax.xml.stream.events.EntityReference#getDeclaration()->EntityDeclaration:::Return the declaration of this entity.
javax.xml.stream.events.EntityReference#getName()->String:::The name of the entity
javax.xml.stream.events.Namespace#getPrefix()->String:::Gets the prefix, returns "" if this is a default namespace declaration.
javax.xml.stream.events.Namespace#getNamespaceURI()->String:::Gets the uri bound to the prefix of this namespace
javax.xml.stream.events.Namespace#isDefaultNamespaceDeclaration()->boolean:::returns true if this attribute declares the default namespace
javax.xml.stream.events.NotationDeclaration#getName()->String:::The notation name.
javax.xml.stream.events.NotationDeclaration#getPublicId()->String:::The notation's public identifier, or null if none was given.
javax.xml.stream.events.NotationDeclaration#getSystemId()->String:::The notation's system identifier, or null if none was given.
javax.xml.stream.events.ProcessingInstruction#getTarget()->String:::The target section of the processing instruction
javax.xml.stream.events.ProcessingInstruction#getData()->String:::The data section of the processing instruction
javax.xml.stream.events.StartDocument#getSystemId()->String:::Returns the system ID of the XML data
javax.xml.stream.events.StartDocument#getCharacterEncodingScheme()->String:::Returns the encoding style of the XML data
javax.xml.stream.events.StartDocument#encodingSet()->boolean:::Returns true if CharacterEncodingScheme was set in the encoding declaration of the document
javax.xml.stream.events.StartDocument#isStandalone()->boolean:::Returns if this XML is standalone
javax.xml.stream.events.StartDocument#standaloneSet()->boolean:::Returns true if the standalone attribute was set in the encoding declaration of the document.
javax.xml.stream.events.StartDocument#getVersion()->String:::Returns the version of XML of this XML stream
javax.xml.stream.events.StartElement#getName()->QName:::Get the name of this event
javax.xml.stream.events.StartElement#getAttributes()->Iterator:::Returns an Iterator of non-namespace declared attributes declared on this START_ELEMENT, returns an empty iterator if there are no attributes
javax.xml.stream.events.StartElement#getNamespaces()->Iterator:::Returns an Iterator of namespaces declared on this element
javax.xml.stream.events.StartElement#getAttributeByName(QName)->Attribute:::Returns the attribute referred to by this name
javax.xml.stream.events.StartElement#getNamespaceContext()->NamespaceContext:::Gets a read-only namespace context
javax.xml.stream.events.StartElement#getNamespaceURI(String)->String:::Gets the value that the prefix is bound to in the context of this element
javax.xml.stream.events.XMLEvent#getEventType()->int:::Returns an integer code for this event.
javax.xml.stream.events.XMLEvent#getLocation()->javax.xml.stream.Location:::Return the location of this event
javax.xml.stream.events.XMLEvent#isStartElement()->boolean:::A utility function to check if this event is a StartElement.
javax.xml.stream.events.XMLEvent#isAttribute()->boolean:::A utility function to check if this event is an Attribute.
javax.xml.stream.events.XMLEvent#isNamespace()->boolean:::A utility function to check if this event is a Namespace.
javax.xml.stream.events.XMLEvent#isEndElement()->boolean:::A utility function to check if this event is a EndElement.
javax.xml.stream.events.XMLEvent#isEntityReference()->boolean:::A utility function to check if this event is an EntityReference.
javax.xml.stream.events.XMLEvent#isProcessingInstruction()->boolean:::A utility function to check if this event is a ProcessingInstruction.
javax.xml.stream.events.XMLEvent#isCharacters()->boolean:::A utility function to check if this event is Characters.
javax.xml.stream.events.XMLEvent#isStartDocument()->boolean:::A utility function to check if this event is a StartDocument.
javax.xml.stream.events.XMLEvent#isEndDocument()->boolean:::A utility function to check if this event is an EndDocument.
javax.xml.stream.events.XMLEvent#asStartElement()->StartElement:::Returns this event as a start element event, may result in a class cast exception if this event is not a start element.
javax.xml.stream.events.XMLEvent#asEndElement()->EndElement:::Returns this event as an end  element event, may result in a class cast exception if this event is not a end element.
javax.xml.stream.events.XMLEvent#asCharacters()->Characters:::Returns this event as Characters, may result in a class cast exception if this event is not Characters.
javax.xml.stream.events.XMLEvent#getSchemaType()->QName:::This method is provided for implementations to provide optional type information about the associated event
javax.xml.stream.events.XMLEvent#writeAsEncodedUnicode(Writer)->void:::This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters

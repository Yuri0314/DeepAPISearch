org.graalvm.compiler.asm.sparc.SPARCAddress#toString()->String::: address to string
org.graalvm.compiler.asm.sparc.SPARCAddress#getBase()->Register::: address get base
org.graalvm.compiler.asm.sparc.SPARCAddress#getIndex()->Register::: address get index
org.graalvm.compiler.asm.sparc.SPARCAddress#hasIndex()->boolean::: address has index
org.graalvm.compiler.asm.sparc.SPARCAddress#getDisplacement()->int:::This method adds the stack-bias to the displacement if the base register is either SPARC#sp or SPARC#fp.
org.graalvm.compiler.asm.sparc.SPARCAssembler.BitSpec#isSignExtend()->boolean::: bit spec is sign extend
org.graalvm.compiler.asm.sparc.SPARCAssembler.BitSpec#setBits(int, int)->int::: bit spec set bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.BitSpec#getBits(int)->int::: bit spec get bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.BitSpec#getWidth()->int::: bit spec get width
org.graalvm.compiler.asm.sparc.SPARCAssembler.BitSpec#valueFits(int)->boolean::: bit spec value fits
org.graalvm.compiler.asm.sparc.SPARCAssembler.ContinousBitSpec#setBits(int, int)->int::: continous bit spec set bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.ContinousBitSpec#getBits(int)->int::: continous bit spec get bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.ContinousBitSpec#getWidth()->int::: continous bit spec get width
org.graalvm.compiler.asm.sparc.SPARCAssembler.ContinousBitSpec#toString()->String::: continous bit spec to string
org.graalvm.compiler.asm.sparc.SPARCAssembler.ContinousBitSpec#valueFits(int)->boolean::: continous bit spec value fits
org.graalvm.compiler.asm.sparc.SPARCAssembler.CompositeBitSpec#getBits(int)->int::: composite bit spec get bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.CompositeBitSpec#setBits(int, int)->int::: composite bit spec set bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.CompositeBitSpec#getWidth()->int::: composite bit spec get width
org.graalvm.compiler.asm.sparc.SPARCAssembler.CompositeBitSpec#toString()->String::: composite bit spec to string
org.graalvm.compiler.asm.sparc.SPARCAssembler.CompositeBitSpec#valueFits(int)->boolean::: composite bit spec value fits
org.graalvm.compiler.asm.sparc.SPARCAssembler.BitKey#toString()->String::: bit key to string
org.graalvm.compiler.asm.sparc.SPARCAssembler.BitKeyIndex#find(int)->SPARCOp:::Finds the best matching SPARCOp for this instruction.
org.graalvm.compiler.asm.sparc.SPARCAssembler.BitKeyIndex#toString()->String::: bit key index to string
org.graalvm.compiler.asm.sparc.SPARCAssembler#getSPARCOp(int)->SPARCOp::: assembler get op
org.graalvm.compiler.asm.sparc.SPARCAssembler.SPARCOp#setBits(int)->int::: op set bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.SPARCOp#match(int)->boolean::: op match
org.graalvm.compiler.asm.sparc.SPARCAssembler.SPARCOp#getKeys()->List::: op get keys
org.graalvm.compiler.asm.sparc.SPARCAssembler.SPARCOp#getOp(int)->Ops::: op get op
org.graalvm.compiler.asm.sparc.SPARCAssembler.SPARCOp#toString()->String::: op to string
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#hasDelaySlot()->boolean::: control transfer op has delay slot
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#setBits(int)->int::: control transfer op set bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#setDisp(int, SPARCMacroAssembler, Label)->int::: control transfer op set disp
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#setDisp(int, int)->int::: control transfer op set disp
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#isValidDisp(int)->boolean::: control transfer op is valid disp
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#setAnnul(int, boolean)->int::: control transfer op set annul
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#getKeys()->List::: control transfer op get keys
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#getDisp(int)->int::: control transfer op get disp
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#isAnnulable(int)->boolean::: control transfer op is annulable
org.graalvm.compiler.asm.sparc.SPARCAssembler.ControlTransferOp#isConditional(int)->boolean::: control transfer op is conditional
org.graalvm.compiler.asm.sparc.SPARCAssembler.Bpcc#emit(SPARCMacroAssembler, CC, ConditionFlag, Annul, BranchPredict, Label)->void::: bpcc emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.Bpcc#isAnnulable(int)->boolean::: bpcc is annulable
org.graalvm.compiler.asm.sparc.SPARCAssembler.Bpcc#isConditional(int)->boolean::: bpcc is conditional
org.graalvm.compiler.asm.sparc.SPARCAssembler.Br#isAnnulable(int)->boolean::: br is annulable
org.graalvm.compiler.asm.sparc.SPARCAssembler.Br#isConditional(int)->boolean::: br is conditional
org.graalvm.compiler.asm.sparc.SPARCAssembler.Br#emit(SPARCMacroAssembler, ConditionFlag, Annul, Label)->void::: br emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.Bpr#emit(SPARCMacroAssembler, RCondition, Annul, BranchPredict, Register, Label)->void::: bpr emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.Bpr#getKeys()->List::: bpr get keys
org.graalvm.compiler.asm.sparc.SPARCAssembler.Bpr#isAnnulable(int)->boolean::: bpr is annulable
org.graalvm.compiler.asm.sparc.SPARCAssembler.Bpr#isConditional(int)->boolean::: bpr is conditional
org.graalvm.compiler.asm.sparc.SPARCAssembler.CBCond#getKeys()->List::: cond get keys
org.graalvm.compiler.asm.sparc.SPARCAssembler.CBCond#emit(SPARCMacroAssembler, ConditionFlag, boolean, Register, Register, Label)->void::: cond emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.CBCond#emit(SPARCMacroAssembler, ConditionFlag, boolean, Register, int, Label)->void::: cond emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.CBCond#isAnnulable(int)->boolean::: cond is annulable
org.graalvm.compiler.asm.sparc.SPARCAssembler.CBCond#isConditional(int)->boolean::: cond is conditional
org.graalvm.compiler.asm.sparc.SPARCAssembler.Op2Op#setBits(int)->int::: op2 op set bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.Op2Op#getKeys()->List::: op2 op get keys
org.graalvm.compiler.asm.sparc.SPARCAssembler.Sethi#getRS1(int)->Register::: sethi get s1
org.graalvm.compiler.asm.sparc.SPARCAssembler.Sethi#getImm22(int)->int::: sethi get imm22
org.graalvm.compiler.asm.sparc.SPARCAssembler.Sethi#isNop(int)->boolean::: sethi is nop
org.graalvm.compiler.asm.sparc.SPARCAssembler.Op3Op#getOp3(int)->Op3s::: op3 op get op3
org.graalvm.compiler.asm.sparc.SPARCAssembler.Op3Op#emit(SPARCMacroAssembler, Op3s, Register, Register, Register)->void::: op3 op emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.Op3Op#emit(SPARCMacroAssembler, Op3s, Register, int, Register)->void::: op3 op emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.CMOV#emit(SPARCMacroAssembler, ConditionFlag, CC, Register, Register)->void::: v emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.CMOV#emit(SPARCMacroAssembler, ConditionFlag, CC, int, Register)->void::: v emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.MOVicc#emit(SPARCMacroAssembler, ConditionFlag, CC, Register, Register)->void::: vicc emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.MOVicc#emit(SPARCMacroAssembler, ConditionFlag, CC, int, Register)->void::: vicc emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.MOVicc#setBits(int, ConditionFlag, CC, Register)->int::: vicc set bits
org.graalvm.compiler.asm.sparc.SPARCAssembler.MOVicc#getKeys()->List::: vicc get keys
org.graalvm.compiler.asm.sparc.SPARCAssembler.FMOVcc#emit(SPARCMacroAssembler, ConditionFlag, CC, Register, Register)->void::: vcc emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.FMOVcc#emit(SPARCMacroAssembler, ConditionFlag, CC, int, Register)->void::: vcc emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.FMOVcc#getKeys()->List::: vcc get keys
org.graalvm.compiler.asm.sparc.SPARCAssembler.OpfOp#emit(SPARCMacroAssembler, Opfs, Register, Register, Register)->void::: opf op emit
org.graalvm.compiler.asm.sparc.SPARCAssembler.OpfOp#emitFcmp(SPARCMacroAssembler, Opfs, CC, Register, Register)->void::: opf op emit fcmp
org.graalvm.compiler.asm.sparc.SPARCAssembler.OpfOp#getKeys()->List::: opf op get keys
org.graalvm.compiler.asm.sparc.SPARCAssembler#isCPURegister(Register...)->boolean::: assembler is register
org.graalvm.compiler.asm.sparc.SPARCAssembler#isCPURegister(Register)->boolean::: assembler is register
org.graalvm.compiler.asm.sparc.SPARCAssembler#isGlobalRegister(Register)->boolean::: assembler is global register
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSingleFloatRegister(Register)->boolean::: assembler is single float register
org.graalvm.compiler.asm.sparc.SPARCAssembler#isDoubleFloatRegister(Register)->boolean::: assembler is double float register
org.graalvm.compiler.asm.sparc.SPARCAssembler#hasFeature(CPUFeature)->boolean::: assembler has feature
org.graalvm.compiler.asm.sparc.SPARCAssembler#simm(int, int)->int::: assembler simm
org.graalvm.compiler.asm.sparc.SPARCAssembler#isImm(int, int)->boolean::: assembler is imm
org.graalvm.compiler.asm.sparc.SPARCAssembler#minSimm(long)->long:::Minimum value for signed immediate ranges.
org.graalvm.compiler.asm.sparc.SPARCAssembler#maxSimm(long)->long:::Maximum value for signed immediate ranges.
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSimm(long, int)->boolean:::Test if imm is within signed immediate range for nbits.
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSimm10(long)->boolean::: assembler is simm10
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSimm11(long)->boolean::: assembler is simm11
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSimm11(JavaConstant)->boolean::: assembler is simm11
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSimm5(JavaConstant)->boolean::: assembler is simm5
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSimm5(long)->boolean::: assembler is simm5
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSimm13(int)->boolean::: assembler is simm13
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSimm13(JavaConstant)->boolean::: assembler is simm13
org.graalvm.compiler.asm.sparc.SPARCAssembler#isSimm13(long)->boolean::: assembler is simm13
org.graalvm.compiler.asm.sparc.SPARCAssembler#isWordDisp30(long)->boolean::: assembler is word disp30
org.graalvm.compiler.asm.sparc.SPARCAssembler#hi22(int)->int::: assembler hi22
org.graalvm.compiler.asm.sparc.SPARCAssembler#lo10(int)->int::: assembler lo10
org.graalvm.compiler.asm.sparc.SPARCAssembler#fmt00(int, int, int)->void::: assembler fmt00
org.graalvm.compiler.asm.sparc.SPARCAssembler#op3(Op3s, Register, Register, Register)->void::: assembler op3
org.graalvm.compiler.asm.sparc.SPARCAssembler#op3(Op3s, Register, int, Register)->void::: assembler op3
org.graalvm.compiler.asm.sparc.SPARCAssembler#insertNopAfterCBCond()->void::: assembler insert nop after cond
org.graalvm.compiler.asm.sparc.SPARCAssembler#patchUnbound(Label)->int::: assembler patch unbound
org.graalvm.compiler.asm.sparc.SPARCAssembler#nop()->void::: assembler nop
org.graalvm.compiler.asm.sparc.SPARCAssembler#sethi(int, Register)->void::: assembler sethi
org.graalvm.compiler.asm.sparc.SPARCAssembler#call(int)->int::: assembler call
org.graalvm.compiler.asm.sparc.SPARCAssembler#add(Register, Register, Register)->void::: assembler add
org.graalvm.compiler.asm.sparc.SPARCAssembler#add(Register, int, Register)->void::: assembler add
org.graalvm.compiler.asm.sparc.SPARCAssembler#addc(Register, Register, Register)->void::: assembler addc
org.graalvm.compiler.asm.sparc.SPARCAssembler#addc(Register, int, Register)->void::: assembler addc
org.graalvm.compiler.asm.sparc.SPARCAssembler#addcc(Register, Register, Register)->void::: assembler addcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#addcc(Register, int, Register)->void::: assembler addcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#and(Register, Register, Register)->void::: assembler and
org.graalvm.compiler.asm.sparc.SPARCAssembler#and(Register, int, Register)->void::: assembler and
org.graalvm.compiler.asm.sparc.SPARCAssembler#andcc(Register, Register, Register)->void::: assembler andcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#andcc(Register, int, Register)->void::: assembler andcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#andn(Register, Register, Register)->void::: assembler andn
org.graalvm.compiler.asm.sparc.SPARCAssembler#andn(Register, int, Register)->void::: assembler andn
org.graalvm.compiler.asm.sparc.SPARCAssembler#andncc(Register, Register, Register)->void::: assembler andncc
org.graalvm.compiler.asm.sparc.SPARCAssembler#andncc(Register, int, Register)->void::: assembler andncc
org.graalvm.compiler.asm.sparc.SPARCAssembler#movwtos(Register, Register)->void::: assembler movwtos
org.graalvm.compiler.asm.sparc.SPARCAssembler#umulxhi(Register, Register, Register)->void::: assembler umulxhi
org.graalvm.compiler.asm.sparc.SPARCAssembler#fdtos(Register, Register)->void::: assembler fdtos
org.graalvm.compiler.asm.sparc.SPARCAssembler#movstouw(Register, Register)->void::: assembler movstouw
org.graalvm.compiler.asm.sparc.SPARCAssembler#movstosw(Register, Register)->void::: assembler movstosw
org.graalvm.compiler.asm.sparc.SPARCAssembler#movdtox(Register, Register)->void::: assembler movdtox
org.graalvm.compiler.asm.sparc.SPARCAssembler#movxtod(Register, Register)->void::: assembler movxtod
org.graalvm.compiler.asm.sparc.SPARCAssembler#fadds(Register, Register, Register)->void::: assembler fadds
org.graalvm.compiler.asm.sparc.SPARCAssembler#faddd(Register, Register, Register)->void::: assembler faddd
org.graalvm.compiler.asm.sparc.SPARCAssembler#fdivs(Register, Register, Register)->void::: assembler fdivs
org.graalvm.compiler.asm.sparc.SPARCAssembler#fdivd(Register, Register, Register)->void::: assembler fdivd
org.graalvm.compiler.asm.sparc.SPARCAssembler#fmovs(Register, Register)->void::: assembler fmovs
org.graalvm.compiler.asm.sparc.SPARCAssembler#fmovd(Register, Register)->void::: assembler fmovd
org.graalvm.compiler.asm.sparc.SPARCAssembler#fsrc2s(Register, Register)->void::: assembler fsrc2s
org.graalvm.compiler.asm.sparc.SPARCAssembler#fsrc2d(Register, Register)->void::: assembler fsrc2d
org.graalvm.compiler.asm.sparc.SPARCAssembler#fmuls(Register, Register, Register)->void::: assembler fmuls
org.graalvm.compiler.asm.sparc.SPARCAssembler#fsmuld(Register, Register, Register)->void::: assembler fsmuld
org.graalvm.compiler.asm.sparc.SPARCAssembler#fmuld(Register, Register, Register)->void::: assembler fmuld
org.graalvm.compiler.asm.sparc.SPARCAssembler#fnegs(Register, Register)->void::: assembler fnegs
org.graalvm.compiler.asm.sparc.SPARCAssembler#fnegd(Register, Register)->void::: assembler fnegd
org.graalvm.compiler.asm.sparc.SPARCAssembler#fstoi(Register, Register)->void::: assembler fstoi
org.graalvm.compiler.asm.sparc.SPARCAssembler#fstox(Register, Register)->void::: assembler fstox
org.graalvm.compiler.asm.sparc.SPARCAssembler#fdtox(Register, Register)->void::: assembler fdtox
org.graalvm.compiler.asm.sparc.SPARCAssembler#fstod(Register, Register)->void::: assembler fstod
org.graalvm.compiler.asm.sparc.SPARCAssembler#fdtoi(Register, Register)->void::: assembler fdtoi
org.graalvm.compiler.asm.sparc.SPARCAssembler#fitos(Register, Register)->void::: assembler fitos
org.graalvm.compiler.asm.sparc.SPARCAssembler#fitod(Register, Register)->void::: assembler fitod
org.graalvm.compiler.asm.sparc.SPARCAssembler#fxtos(Register, Register)->void::: assembler fxtos
org.graalvm.compiler.asm.sparc.SPARCAssembler#fxtod(Register, Register)->void::: assembler fxtod
org.graalvm.compiler.asm.sparc.SPARCAssembler#fzeros(Register)->void::: assembler fzeros
org.graalvm.compiler.asm.sparc.SPARCAssembler#fzerod(Register)->void::: assembler fzerod
org.graalvm.compiler.asm.sparc.SPARCAssembler#flushw()->void::: assembler flushw
org.graalvm.compiler.asm.sparc.SPARCAssembler#fsqrtd(Register, Register)->void::: assembler fsqrtd
org.graalvm.compiler.asm.sparc.SPARCAssembler#fsqrts(Register, Register)->void::: assembler fsqrts
org.graalvm.compiler.asm.sparc.SPARCAssembler#fabss(Register, Register)->void::: assembler fabss
org.graalvm.compiler.asm.sparc.SPARCAssembler#fabsd(Register, Register)->void::: assembler fabsd
org.graalvm.compiler.asm.sparc.SPARCAssembler#fsubs(Register, Register, Register)->void::: assembler fsubs
org.graalvm.compiler.asm.sparc.SPARCAssembler#fsubd(Register, Register, Register)->void::: assembler fsubd
org.graalvm.compiler.asm.sparc.SPARCAssembler#fcmp(CC, Opfs, Register, Register)->void::: assembler fcmp
org.graalvm.compiler.asm.sparc.SPARCAssembler#fmt10(int, int, int, int)->void::: assembler fmt10
org.graalvm.compiler.asm.sparc.SPARCAssembler#fmt(int, int, int, int, int)->void::: assembler fmt
org.graalvm.compiler.asm.sparc.SPARCAssembler#illtrap(int)->void::: assembler illtrap
org.graalvm.compiler.asm.sparc.SPARCAssembler#jmpl(Register, Register, Register)->void::: assembler jmpl
org.graalvm.compiler.asm.sparc.SPARCAssembler#jmpl(Register, int, Register)->int::: assembler jmpl
org.graalvm.compiler.asm.sparc.SPARCAssembler#fmovdcc(ConditionFlag, CC, Register, Register)->void::: assembler fmovdcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#fmovscc(ConditionFlag, CC, Register, Register)->void::: assembler fmovscc
org.graalvm.compiler.asm.sparc.SPARCAssembler#movcc(ConditionFlag, CC, Register, Register)->void::: assembler movcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#movcc(ConditionFlag, CC, int, Register)->void::: assembler movcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#mulx(Register, Register, Register)->void::: assembler mulx
org.graalvm.compiler.asm.sparc.SPARCAssembler#mulx(Register, int, Register)->void::: assembler mulx
org.graalvm.compiler.asm.sparc.SPARCAssembler#or(Register, Register, Register)->void::: assembler or
org.graalvm.compiler.asm.sparc.SPARCAssembler#or(Register, int, Register)->void::: assembler or
org.graalvm.compiler.asm.sparc.SPARCAssembler#popc(Register, Register)->void::: assembler popc
org.graalvm.compiler.asm.sparc.SPARCAssembler#popc(int, Register)->void::: assembler popc
org.graalvm.compiler.asm.sparc.SPARCAssembler#prefetch(SPARCAddress, Fcn)->void::: assembler prefetch
org.graalvm.compiler.asm.sparc.SPARCAssembler#rdpc(Register)->void::: assembler rdpc
org.graalvm.compiler.asm.sparc.SPARCAssembler#restore(Register, Register, Register)->void::: assembler restore
org.graalvm.compiler.asm.sparc.SPARCAssembler#save(Register, Register, Register)->void::: assembler save
org.graalvm.compiler.asm.sparc.SPARCAssembler#save(Register, int, Register)->void::: assembler save
org.graalvm.compiler.asm.sparc.SPARCAssembler#sdivx(Register, Register, Register)->void::: assembler sdivx
org.graalvm.compiler.asm.sparc.SPARCAssembler#sdivx(Register, int, Register)->void::: assembler sdivx
org.graalvm.compiler.asm.sparc.SPARCAssembler#udivx(Register, Register, Register)->void::: assembler udivx
org.graalvm.compiler.asm.sparc.SPARCAssembler#udivx(Register, int, Register)->void::: assembler udivx
org.graalvm.compiler.asm.sparc.SPARCAssembler#sll(Register, Register, Register)->void::: assembler sll
org.graalvm.compiler.asm.sparc.SPARCAssembler#sll(Register, int, Register)->void::: assembler sll
org.graalvm.compiler.asm.sparc.SPARCAssembler#sllx(Register, Register, Register)->void::: assembler sllx
org.graalvm.compiler.asm.sparc.SPARCAssembler#sllx(Register, int, Register)->void::: assembler sllx
org.graalvm.compiler.asm.sparc.SPARCAssembler#sra(Register, Register, Register)->void::: assembler sra
org.graalvm.compiler.asm.sparc.SPARCAssembler#sra(Register, int, Register)->void::: assembler sra
org.graalvm.compiler.asm.sparc.SPARCAssembler#srax(Register, Register, Register)->void::: assembler srax
org.graalvm.compiler.asm.sparc.SPARCAssembler#srax(Register, int, Register)->void::: assembler srax
org.graalvm.compiler.asm.sparc.SPARCAssembler#srl(Register, Register, Register)->void::: assembler srl
org.graalvm.compiler.asm.sparc.SPARCAssembler#srl(Register, int, Register)->void::: assembler srl
org.graalvm.compiler.asm.sparc.SPARCAssembler#srlx(Register, Register, Register)->void::: assembler srlx
org.graalvm.compiler.asm.sparc.SPARCAssembler#srlx(Register, int, Register)->void::: assembler srlx
org.graalvm.compiler.asm.sparc.SPARCAssembler#sub(Register, Register, Register)->void::: assembler sub
org.graalvm.compiler.asm.sparc.SPARCAssembler#sub(Register, int, Register)->void::: assembler sub
org.graalvm.compiler.asm.sparc.SPARCAssembler#subcc(Register, Register, Register)->void::: assembler subcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#subcc(Register, int, Register)->void::: assembler subcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#ta(int)->void::: assembler ta
org.graalvm.compiler.asm.sparc.SPARCAssembler#pause()->void::: assembler pause
org.graalvm.compiler.asm.sparc.SPARCAssembler#tcc(CC, ConditionFlag, int)->void::: assembler tcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#wrccr(Register, Register)->void::: assembler wrccr
org.graalvm.compiler.asm.sparc.SPARCAssembler#wrccr(Register, int)->void::: assembler wrccr
org.graalvm.compiler.asm.sparc.SPARCAssembler#xor(Register, Register, Register)->void::: assembler xor
org.graalvm.compiler.asm.sparc.SPARCAssembler#xor(Register, int, Register)->void::: assembler xor
org.graalvm.compiler.asm.sparc.SPARCAssembler#xorcc(Register, Register, Register)->void::: assembler xorcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#xorcc(Register, int, Register)->void::: assembler xorcc
org.graalvm.compiler.asm.sparc.SPARCAssembler#xnor(Register, Register, Register)->void::: assembler xnor
org.graalvm.compiler.asm.sparc.SPARCAssembler#xnor(Register, int, Register)->void::: assembler xnor
org.graalvm.compiler.asm.sparc.SPARCAssembler#ld(Op3s, SPARCAddress, Register, Asi)->void::: assembler ld
org.graalvm.compiler.asm.sparc.SPARCAssembler#ld(Op3s, SPARCAddress, Register)->void::: assembler ld
org.graalvm.compiler.asm.sparc.SPARCAssembler#lddf(SPARCAddress, Register)->void::: assembler lddf
org.graalvm.compiler.asm.sparc.SPARCAssembler#ldf(SPARCAddress, Register)->void::: assembler ldf
org.graalvm.compiler.asm.sparc.SPARCAssembler#lduh(SPARCAddress, Register)->void::: assembler lduh
org.graalvm.compiler.asm.sparc.SPARCAssembler#ldsh(SPARCAddress, Register)->void::: assembler ldsh
org.graalvm.compiler.asm.sparc.SPARCAssembler#ld(SPARCAddress, Register, int, boolean)->void::: assembler ld
org.graalvm.compiler.asm.sparc.SPARCAssembler#st(Register, SPARCAddress, int)->void::: assembler st
org.graalvm.compiler.asm.sparc.SPARCAssembler#ldub(SPARCAddress, Register)->void::: assembler ldub
org.graalvm.compiler.asm.sparc.SPARCAssembler#ldsb(SPARCAddress, Register)->void::: assembler ldsb
org.graalvm.compiler.asm.sparc.SPARCAssembler#lduw(SPARCAddress, Register)->void::: assembler lduw
org.graalvm.compiler.asm.sparc.SPARCAssembler#ldsw(SPARCAddress, Register)->void::: assembler ldsw
org.graalvm.compiler.asm.sparc.SPARCAssembler#ldx(SPARCAddress, Register)->void::: assembler ldx
org.graalvm.compiler.asm.sparc.SPARCAssembler#ldxa(Register, Register, Register, Asi)->void::: assembler ldxa
org.graalvm.compiler.asm.sparc.SPARCAssembler#lduwa(Register, Register, Register, Asi)->void::: assembler lduwa
org.graalvm.compiler.asm.sparc.SPARCAssembler#stxa(Register, Register, Register, Asi)->void::: assembler stxa
org.graalvm.compiler.asm.sparc.SPARCAssembler#st(Op3s, Register, SPARCAddress)->void::: assembler st
org.graalvm.compiler.asm.sparc.SPARCAssembler#stdf(Register, SPARCAddress)->void::: assembler stdf
org.graalvm.compiler.asm.sparc.SPARCAssembler#stf(Register, SPARCAddress)->void::: assembler stf
org.graalvm.compiler.asm.sparc.SPARCAssembler#stb(Register, SPARCAddress)->void::: assembler stb
org.graalvm.compiler.asm.sparc.SPARCAssembler#sth(Register, SPARCAddress)->void::: assembler sth
org.graalvm.compiler.asm.sparc.SPARCAssembler#stw(Register, SPARCAddress)->void::: assembler stw
org.graalvm.compiler.asm.sparc.SPARCAssembler#stx(Register, SPARCAddress)->void::: assembler stx
org.graalvm.compiler.asm.sparc.SPARCAssembler#membar(int)->void::: assembler membar
org.graalvm.compiler.asm.sparc.SPARCAssembler#casa(Register, Register, Register, Asi)->void::: assembler casa
org.graalvm.compiler.asm.sparc.SPARCAssembler#casxa(Register, Register, Register, Asi)->void::: assembler casxa
org.graalvm.compiler.asm.sparc.SPARCAssembler#getInstructionCounter()->InstructionCounter::: assembler get instruction counter
org.graalvm.compiler.asm.sparc.SPARCAssembler#patchAddImmediate(int, int)->void::: assembler patch add immediate
org.graalvm.compiler.asm.sparc.SPARCAssembler#fpadd32(Register, Register, Register)->void::: assembler fpadd32
org.graalvm.compiler.asm.sparc.SPARCAssembler#peephole()->void:::Does peephole optimization on code generated by this assembler
org.graalvm.compiler.asm.sparc.SPARCInstructionCounter#countInstructions(String[], int, int)->int[]::: instruction counter count instructions
org.graalvm.compiler.asm.sparc.SPARCInstructionCounter#getSupportedInstructionTypes()->String[]::: instruction counter get supported instruction types
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#setImmediateConstantLoad(boolean)->void::: macro assembler set immediate constant load
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#align(int)->void::: macro assembler align
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#jmp(Label)->void::: macro assembler jmp
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#bz(Label)->void::: macro assembler bz
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#patchJumpTarget(int, int)->void::: macro assembler patch jump target
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#makeAddress(Register, int)->AbstractAddress::: macro assembler make address
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#getPlaceholder(int)->AbstractAddress::: macro assembler get placeholder
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#ensureUniquePC()->void::: macro assembler ensure unique c
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#cas(Register, Register, Register)->void::: macro assembler cas
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#casx(Register, Register, Register)->void::: macro assembler casx
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#clr(Register)->void::: macro assembler clr
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#clrb(SPARCAddress)->void::: macro assembler clrb
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#clrh(SPARCAddress)->void::: macro assembler clrh
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#clrx(SPARCAddress)->void::: macro assembler clrx
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#cmp(Register, Register)->void::: macro assembler cmp
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#cmp(Register, int)->void::: macro assembler cmp
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#dec(Register)->void::: macro assembler dec
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#dec(int, Register)->void::: macro assembler dec
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#jmp(SPARCAddress)->void::: macro assembler jmp
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#jmp(Register)->void::: macro assembler jmp
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#neg(Register, Register)->void::: macro assembler neg
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#neg(Register)->void::: macro assembler neg
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#mov(Register, Register)->void::: macro assembler mov
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#mov(int, Register)->void::: macro assembler mov
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#not(Register, Register)->void::: macro assembler not
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#not(Register)->void::: macro assembler not
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#restoreWindow()->void::: macro assembler restore window
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#ret()->void::: macro assembler ret
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#setw(int, Register, boolean)->void:::Generates sethi hi22(value), dst; or dst, lo10(value), dst; code.
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#setx(long, Register, boolean)->void::: macro assembler setx
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#sethix(long, Register, boolean)->void::: macro assembler sethix
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#signx(Register, Register)->void::: macro assembler signx
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#signx(Register)->void::: macro assembler signx
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#isImmediateConstantLoad()->boolean::: macro assembler is immediate constant load
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#getScratchRegister()->ScratchRegister::: macro assembler get scratch register
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler.ScratchRegister#getRegister()->Register::: scratch register get register
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler.ScratchRegister#close()->void::: scratch register close
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#compareBranch(Register, Register, ConditionFlag, CC, Label, BranchPredict, Runnable)->void::: macro assembler compare branch
org.graalvm.compiler.asm.sparc.SPARCMacroAssembler#compareBranch(Register, int, ConditionFlag, CC, Label, BranchPredict, Runnable)->void::: macro assembler compare branch

java.io.Bits#getBoolean(byte[], int)->boolean:::
java.io.Bits#getChar(byte[], int)->char:::
java.io.Bits#getShort(byte[], int)->short:::
java.io.Bits#getInt(byte[], int)->int:::
java.io.Bits#getFloat(byte[], int)->float:::
java.io.Bits#getLong(byte[], int)->long:::
java.io.Bits#getDouble(byte[], int)->double:::
java.io.Bits#putBoolean(byte[], int, boolean)->void:::
java.io.Bits#putChar(byte[], int, char)->void:::
java.io.Bits#putShort(byte[], int, short)->void:::
java.io.Bits#putInt(byte[], int, int)->void:::
java.io.Bits#putFloat(byte[], int, float)->void:::
java.io.Bits#putLong(byte[], int, long)->void:::
java.io.Bits#putDouble(byte[], int, double)->void:::
java.io.BufferedInputStream#read()->int:::See the general contract of the read method of InputStream.
java.io.BufferedInputStream#read(byte[], int, int)->int:::Reads bytes from this byte-input stream into the specified byte array, starting at the given offset
java.io.BufferedInputStream#skip(long)->long:::See the general contract of the skip method of InputStream.
java.io.BufferedInputStream#available()->int:::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
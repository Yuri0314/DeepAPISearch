AbstractLdapNamingEnumeration#nextElement()::: abstract ldap naming enumeration next element:::try->return->next->catch->cleanup->return->finally
AbstractLdapNamingEnumeration#hasMoreElements()::: abstract ldap naming enumeration has more elements:::try->return->hasMore->catch->cleanup->return->finally
AbstractLdapNamingEnumeration#getNextBatch()::: abstract ldap naming enumeration get next batch:::homeCtx->getSearchReply->if->return->entries->size->if->try->homeCtx->processReturnCode->catch->setNamingException->finally->if->if->else->refEx->appendUnprocessedReferrals->if
AbstractLdapNamingEnumeration#hasMore()::: abstract ldap naming enumeration has more:::if->return->if->return->else->return->hasMoreImpl
AbstractLdapNamingEnumeration#next()::: abstract ldap naming enumeration next:::if->hasMore->return->nextImpl
AbstractLdapNamingEnumeration#hasMoreImpl()::: abstract ldap naming enumeration has more impl:::if->getNextBatch->if->return->else->try->return->hasMoreReferrals->catch->cleanup->throw->cleanup->pre->new->PartialResultException->pre->setRootCause->throw->finally
AbstractLdapNamingEnumeration#nextImpl()::: abstract ldap naming enumeration next impl:::try->return->nextAux->catch->cleanup->throw->cont->fillInException->finally
AbstractLdapNamingEnumeration#nextAux()::: abstract ldap naming enumeration next aux:::if->getNextBatch->if->cleanup->throw->new->NoSuchElementException->result->entries->elementAt->return->createItem
AbstractLdapNamingEnumeration#getAtom(String)::: abstract ldap naming enumeration get atom:::try->parsed->new->LdapName->return->parsed->parsed->size->get->catch->return->finally
AbstractLdapNamingEnumeration#createItem(String, Attributes, Vector)::: abstract ldap naming enumeration create item:::
AbstractLdapNamingEnumeration#appendUnprocessedReferrals(LdapReferralException)::: abstract ldap naming enumeration append unprocessed referrals:::if->refEx->appendUnprocessedReferrals->else->ex->appendUnprocessedReferrals
AbstractLdapNamingEnumeration#setNamingException(NamingException)::: abstract ldap naming enumeration set naming exception:::
AbstractLdapNamingEnumeration#getReferredResults(LdapReferralContext)::: abstract ldap naming enumeration get referred results:::
AbstractLdapNamingEnumeration#hasMoreReferrals()::: abstract ldap naming enumeration has more referrals:::if->refEx->hasMoreReferrals->refEx->hasMoreReferralExceptions->if->throw->refEx->fillInStackTrace->while->refCtx->refEx->getReferralContext->try->getReferredResults->update->break->catch->if->re->getNamingException->continue->finally->refCtx->close->return->hasMoreImpl->else->cleanup->if->throw->return
AbstractLdapNamingEnumeration#update(AbstractLdapNamingEnumeration)::: abstract ldap naming enumeration update:::homeCtx->decEnumCount
AbstractLdapNamingEnumeration#finalize()::: abstract ldap naming enumeration finalize:::cleanup
AbstractLdapNamingEnumeration#cleanup()::: abstract ldap naming enumeration cleanup:::if->return->if->enumClnt->clearSearchReply->if->homeCtx->decEnumCount
AbstractLdapNamingEnumeration#close()::: abstract ldap naming enumeration close:::cleanup
BasicControl#getID():::Retrieves the control's object identifier string.:::return
BasicControl#isCritical():::Determines the control's criticality.:::return
BasicControl#getEncodedValue():::Retrieves the control's ASN.1 BER encoded value:::return->value->clone
Ber#dumpBER(OutputStream, String, byte[], int, int)::: ber dump r:::try->outStream->write->outStream->tag->getBytes->write->new->HexDumpEncoder->new->ByteArrayInputStream->encodeBuffer->outStream->write->catch->try->outStream->getBytes->write->catch->finally->finally
BerDecoder#reset():::Resets this decode to start parsing from the initial offset (ie., same state as after calling the constructor).:::
BerDecoder#getParsePosition():::Returns the current parse position:::return
BerDecoder#parseLength():::Parses a possibly variable length field.:::lengthbyte->parseByte->if->if->throw->new->DecodeException->if->throw->new->DecodeException->if->throw->new->DecodeException->retval->for->i->if->throw->new->DecodeException->return->else->return
BerDecoder#parseSeq(int[]):::Parses the next sequence in this BER buffer.:::seq->parseByte->len->parseLength->if->return
BerDecoder#seek(int):::Used to skip bytes:::if->throw->new->DecodeException
BerDecoder#parseByte():::Parses the next byte in this BER buffer.:::if->throw->new->DecodeException->return
BerDecoder#peekByte():::Returns the next byte in this BER buffer without consuming it.:::if->throw->new->DecodeException->return
BerDecoder#parseBoolean():::Parses an ASN_BOOLEAN tagged integer from this BER buffer.:::return->parseIntWithTag
BerDecoder#parseEnumeration():::Parses an ASN_ENUMERATED tagged integer from this BER buffer.:::return->parseIntWithTag
BerDecoder#parseInt():::Parses an ASN_INTEGER tagged integer from this BER buffer.:::return->parseIntWithTag
BerDecoder#parseIntWithTag(int):::Parses an integer that's preceded by a tag:::if->parseByte->s->if->Integer->toString->else->throw->Integer->toString->new->DecodeException->len->parseLength->if->throw->new->DecodeException->else->if->throw->new->DecodeException->fb->value->for->i->if->return
BerDecoder#parseString(boolean):::Parses a string.:::return->parseStringWithTag
BerDecoder#parseStringWithTag(int, boolean, int[]):::Parses a string of a given tag from this BER buffer:::st->origOffset->if->parseByte->throw->Integer->toString->new->DecodeException->len->parseLength->if->throw->new->DecodeException->retstr->if->else->buf2->new->byteArr->System->arraycopy->if->try->new->String->catch->throw->new->DecodeException->finally->else->try->new->String->catch->throw->new->DecodeException->finally->if->return
BerDecoder#parseOctetString(int, int[]):::Parses an octet string of a given type(tag) from this BER buffer:::origOffset->st->if->parseByte->throw->Integer->toString->Integer->toString->new->DecodeException->len->parseLength->if->throw->new->DecodeException->retarr->new->byteArr->if->System->arraycopy->if->return
BerDecoder#bytesLeft():::Returns the number of unparsed bytes in this BER buffer.:::return
BerEncoder#reset():::Resets encoder to state when newly constructed:::while->while
BerEncoder#getDataLen():::Gets the number of encoded bytes in this BER buffer.:::return
BerEncoder#getBuf():::Gets the buffer that contains the BER encoding:::if->throw->new->IllegalStateException->return
BerEncoder#getTrimmedBuf():::Gets the buffer that contains the BER encoding, trimming unused bytes.:::len->getDataLen->trimBuf->new->byteArr->System->getBuf->arraycopy->return
BerEncoder#beginSeq(int):::Begin encoding a sequence with a tag.:::if->seqOffsetTmp->new->intArr->for->i->encodeByte->ensureFreeBytes
BerEncoder#endSeq():::Terminate a BER sequence.:::if->throw->new->IllegalStateException->start->len->if->shiftSeqData->else->if->shiftSeqData->else->if->else->if->shiftSeqData->else->throw->new->EncodeException
BerEncoder#shiftSeqData(int, int, int):::Shifts contents of buf in the range [start,start+len) a specified amount:::if->ensureFreeBytes->System->arraycopy
BerEncoder#encodeByte(int):::Encode a single byte.:::ensureFreeBytes
BerEncoder#encodeInt(int)::: ber encoder encode int:::encodeInt
BerEncoder#encodeInt(int, int):::Encodes an int and a tag:::mask->intsize->while->encodeInt
BerEncoder#encodeInt(int, int, int)::: ber encoder encode int:::if->throw->new->IllegalArgumentException->ensureFreeBytes->mask->while
BerEncoder#encodeBoolean(boolean):::Encodes a boolean:::encodeBoolean
BerEncoder#encodeBoolean(boolean, int):::Encodes a boolean and a tag  BER boolean w TAG ::= tag 0x01 {0xff|0x00} :::ensureFreeBytes
BerEncoder#encodeString(String, boolean):::Encodes a string:::encodeString
BerEncoder#encodeString(String, int, boolean):::Encodes a string and a tag:::encodeByte->i->count->bytes->if->else->if->try->str->getBytes->catch->throw->new->EncodeException->finally->else->try->str->getBytes->catch->throw->new->EncodeException->finally->encodeLength->ensureFreeBytes->while
BerEncoder#encodeOctetString(byte[], int, int, int):::Encodes a portion of an octet string and a tag.:::encodeByte->encodeLength->if->ensureFreeBytes->System->arraycopy
BerEncoder#encodeOctetString(byte[], int):::Encodes an octet string and a tag.:::encodeOctetString
BerEncoder#encodeLength(int)::: ber encoder encode length:::ensureFreeBytes->if->else->if->else->if->else->if->else->throw->new->EncodeException
BerEncoder#encodeStringArray(String[], boolean):::Encodes an array of strings.:::if->return->for->i
BerEncoder#ensureFreeBytes(int):::Ensures that there are at least "len" unused bytes in "buf":::if->newsize->if->newbuf->new->byteArr->System->arraycopy
BindingWithControls#getControls()::: binding with controls get controls:::return
ClientId#equals(Object)::: client id equals:::if->return->other->return->hostname->equals->protocol->equals->equalsControls->equalsSockFactory
ClientId#hashCode()::: client id hash code:::return
ClientId#hashCodeControls(Control[])::: client id hash code controls:::if->return->code->for->i->return
ClientId#equalsControls(Control[], Control[])::: client id equals controls:::if->return->if->return->if->return->for->i->return
ClientId#equalsSockFactory(ClientId)::: client id equals sock factory:::if->return->else->if->return->invokeComparator->else->return->invokeComparator
ClientId#invokeComparator(ClientId, ClientId)::: client id invoke comparator:::ret->try->invoke->catch->if->println->e->printStackTrace->return->finally->if->return->return
ClientId#toStringControls(Control[])::: client id to string controls:::if->return->str->new->StringBuilder->for->i->return->str->toString
ClientId#toString()::: client id to string:::return->toStringControls
Connection#hostnameVerificationDisabledValue()::: connection hostname verification disabled value:::act->System->getProperty->prop->AccessController->doPrivileged->if->return->return->prop->isEmpty->Boolean->parseBoolean
Connection#setV3(boolean)::: connection set v3:::
Connection#setBound()::: connection set bound:::
Connection#createInetSocketAddress(String, int)::: connection create inet socket address:::return->new->InetSocketAddress
Connection#createSocket(String, int, String, int)::: connection create socket:::socket->if->socketFactoryClass->loadClass->getDefault->socketFactoryClass->new->Class<?>Arr->getMethod->factory->getDefault->new->ObjectArr->invoke->if->endpoint->createInetSocketAddress->factory->createSocket->if->println->socket->connect->if->if->println->factory->createSocket->else->if->endpoint->createInetSocketAddress->new->Socket->if->println->socket->connect->if->if->println->new->Socket->if->sslSocket->if->param->sslSocket->getSSLParameters->param->setEndpointIdentificationAlgorithm->sslSocket->setSSLParameters->if->socketTimeout->sslSocket->getSoTimeout->sslSocket->setSoTimeout->sslSocket->startHandshake->sslSocket->setSoTimeout->return
Connection#getMsgId()::: connection get msg id:::return
Connection#writeRequest(BerEncoder, int)::: connection write request:::return->writeRequest
Connection#writeRequest(BerEncoder, int, boolean)::: connection write request:::return->writeRequest
Connection#writeRequest(BerEncoder, int, boolean, int)::: connection write request:::req->new->LdapRequest->addRequest->if->Ber->ber->getBuf->ber->getDataLen->dumpBER->unpauseReader->if->println->try->synchronized->outStream->ber->getBuf->ber->getDataLen->write->outStream->flush->catch->cleanup->throw->finally->return
Connection#readReply(LdapRequest):::Reads a reply; waits until one is ready.:::rber->synchronized->if->throw->new->ServiceUnavailableException->try->ldr->getReplyBer->catch->throw->new->InterruptedNamingException->finally->if->abandonRequest->throw->new->NamingException->return
Connection#addRequest(LdapRequest)::: connection add request:::ldr->if->else
Connection#findRequest(int)::: connection find request:::ldr->while->if->return->return
Connection#removeRequest(LdapRequest)::: connection remove request:::ldr->ldrprev->while->if->ldr->cancel->if->else
Connection#abandonRequest(LdapRequest, Control[])::: connection abandon request:::removeRequest->ber->new->BerEncoder->abandonMsgId->getMsgId->try->ber->beginSeq->ber->encodeInt->ber->encodeInt->if->LdapClient->encodeControls->ber->endSeq->if->Ber->ber->getBuf->ber->getDataLen->dumpBER->synchronized->outStream->ber->getBuf->ber->getDataLen->write->outStream->flush->catch->finally
Connection#abandonOutstandingReqs(Control[])::: connection abandon outstanding reqs:::ldr->while->abandonRequest
Connection#ldapUnbind(Control[])::: connection ldap unbind:::ber->new->BerEncoder->unbindMsgId->getMsgId->try->ber->beginSeq->ber->encodeInt->ber->encodeByte->ber->encodeByte->if->LdapClient->encodeControls->ber->endSeq->if->Ber->ber->getBuf->ber->getDataLen->dumpBER->synchronized->outStream->ber->getBuf->ber->getDataLen->write->outStream->flush->catch->finally
Connection#cleanup(Control[], boolean)::: connection cleanup:::nparent->synchronized->if->if->println->try->if->abandonOutstandingReqs->if->ldapUnbind->catch->finally->try->outStream->flush->sock->close->unpauseReader->catch->if->println->finally->if->ldr->while->ldr->cancel->if->ldr->while->ldr->close->if->parent->processConnectionClosure
Connection#replaceStreams(InputStream, OutputStream)::: connection replace streams:::if->println->println->try->outStream->flush->catch->if->println->finally
Connection#getInputStream():::Used by Connection thread to read inStream into a local variable:::return
Connection#unpauseReader()::: connection unpause reader:::synchronized->if->if->println->pauseLock->notify
Connection#pauseReader()::: connection pause reader:::if->println->try->while->pauseLock->wait->catch->throw->new->InterruptedIOException->finally
Connection#run()::: connection run:::inbuf->inMsgId->bytesread->br->offset->seqlen->seqlenlen->eos->retBer->in->try->while->try->new->byteArr->getInputStream->in->read->if->if->getInputStream->continue->else->break->if->continue->in->read->if->break->if->while->in->read->if->break->if->break->for->i->left->readFully->Arrays->copyOf->System->arraycopy->try->new->BerDecoder->if->Ber->dumpBER->retBer->parseSeq->retBer->parseInt->retBer->reset->needPause->if->parent->processUnsolicited->else->ldr->findRequest->if->synchronized->ldr->addReplyBer->if->pauseReader->else->catch->finally->catch->if->println->ie->printStackTrace->if->getInputStream->else->if->println->throw->finally->if->println->catch->if->println->finally->cleanup->if->println
Connection#readFully(InputStream, int)::: connection read fully:::buf->Math->min->new->byteArr->nread->while->bytesToRead->if->Math->min->if->Arrays->copyOf->else->count->is->read->if->if->Arrays->copyOf->break->return
DefaultResponseControlFactory#getControlInstance(Control):::Creates an instance of a response control class from a more generic control class (BasicControl).:::id->ctl->getID->try->if->id->equals->return->ctl->isCritical->ctl->getEncodedValue->new->SortResponseControl->else->if->id->equals->return->ctl->isCritical->ctl->getEncodedValue->new->PagedResultsResponseControl->else->if->id->equals->return->ctl->isCritical->ctl->getEncodedValue->new->EntryChangeResponseControl->catch->ne->new->NamingException->ne->setRootCause->throw->finally->return
DigestClientId#equals(Object)::: digest client id equals:::if->return->other->return->super->equals->Arrays->equals
DigestClientId#hashCode()::: digest client id hash code:::return
DigestClientId#toString()::: digest client id to string:::if->sb->new->StringBuilder->for->i->return->super->toString->sb->toString->else->return->super->toString
EntryChangeResponseControl#getChangeType():::Retrieves the type of change that occurred.:::return
EntryChangeResponseControl#getPreviousDN():::Retrieves the previous distinguished name of the entry before it was renamed and/or moved:::return
EntryChangeResponseControl#getChangeNumber():::Retrieves the change number assigned by the server for this change:::return
EventQueue#enqueue(EventObject, Vector):::Enqueue an event.:::newElt->new->QueueElement->if->else->notify
EventQueue#dequeue():::Dequeue the oldest object on the queue:::while->wait->elt->if->else->return
EventQueue#run():::Pull events off the queue and dispatch them.:::qe->try->while->dequeue->e->v->for->i->v->size->catch->finally
EventQueue#stop():::Stop the dispatcher so we can be destroyed.:::if->println->if->qThread->interrupt
EventSupport#addNamingListener(String, int, NamingListener)::: event support add naming listener:::if->args->new->NotifierArgs->notifier->notifiers->get->if->new->NamingEventNotifier->notifiers->put->else->notifier->addNamingListener->if->if->new->Vector<>->unsolicited->addElement
EventSupport#addNamingListener(String, String, SearchControls, NamingListener):::Adds l to list of listeners interested in nm and filter.:::if->args->new->NotifierArgs->notifier->notifiers->get->if->new->NamingEventNotifier->notifiers->put->else->notifier->addNamingListener->if->if->new->Vector<>->unsolicited->addElement
EventSupport#removeNamingListener(NamingListener):::Removes l from all notifiers in this context.:::if->println->iterator->notifiers->values->iterator->while->iterator->hasNext->notifier->iterator->next->if->if->println->notifier->removeNamingListener->if->notifier->hasNamingListeners->if->println->notifier->stop->iterator->remove->if->println->if->unsolicited->removeElement
EventSupport#hasUnsolicited()::: event support has unsolicited:::return->unsolicited->size
EventSupport#removeDeadNotifier(NotifierArgs):::package private; Called by NamingEventNotifier to remove itself when it encounters a NamingException.:::if->println->notifiers->remove
EventSupport#fireUnsolicited(Object):::Fire an event to unsolicited listeners:::if->println->if->unsolicited->size->return->if->evt->new->UnsolicitedNotificationEvent->queueEvent->else->if->evt->new->NamingExceptionEvent->queueEvent
EventSupport#cleanup():::Stops notifier threads that are collecting event data and stops the event queue from dispatching events:::if->println->if->foreach->notifiers->values->notifier->stop->if->eventQueue->stop
EventSupport#queueEvent(EventObject, Vector):::Add the event and vector of listeners to the queue to be delivered:::if->new->EventQueue->v->vector->clone->eventQueue->enqueue
Filter#encodeFilterString(BerEncoder, String, boolean):::First convert filter string into byte[]:::if->filterStr->equals->throw->new->InvalidSearchFilterException->filter->filterLen->if->filterStr->getBytes->else->filterStr->getBytes->if->println->println->dprint->encodeFilter
Filter#encodeFilter(BerEncoder, byte[], int, int)::: filter encode filter:::if->dprint->if->throw->new->InvalidSearchFilterException->nextOffset->parens->balance->escape->filtOffset->new->intArr->for->if->throw->new->InvalidSearchFilterException->if
Filter#hexchar2int(byte):::convert character 'c' that represents a hexadecimal digit to an integer:::if->return->if->return->if->return->return
Filter#unescapeFilterValue(byte[], int, int)::: filter unescape filter value:::escape->escStart->ival->ch->if->dprint->len->tbuf->new->byteArr->j->for->i->answer->new->byteArr->System->arraycopy->if->Ber->dumpBER->return
Filter#indexOf(byte[], char, int, int)::: filter index of:::for->i->return
Filter#indexOf(byte[], String, int, int)::: filter index of:::where->target->charAt->indexOf->if->for->i->target->length->return
Filter#findUnescaped(byte[], char, int, int)::: filter find unescaped:::while->where->indexOf->backSlashPos->backSlashCnt->for->if->return->return
Filter#encodeSimpleFilter(BerEncoder, byte[], int, int)::: filter encode simple filter:::if->dprint->type->value->valueStart->valueEnd->typeStart->typeEnd->eq->if->indexOf->throw->new->InvalidSearchFilterException->ftype->switch->break->break->break->break->break->if->println->println->optionsStart->extensibleStart->if->isNumericOid->for->i->else->if->else->throw->new->InvalidSearchFilterException->if->for->i->if->isMatchingRule->for->i->if->throw->new->InvalidSearchFilterException->if->if->findUnescaped->else->if->else->encodeSubstringFilter->return->if->ber->encodeOctetString->else->if->encodeExtensibleMatch->else->ber->beginSeq->ber->encodeOctetString->ber->unescapeFilterValue->encodeOctetString->ber->endSeq->if
Filter#encodeSubstringFilter(BerEncoder, byte[], int, int, int, int)::: filter encode substring filter:::if->dprint->dprint->ber->beginSeq->ber->encodeOctetString->ber->beginSeq->index->previndex->while->findUnescaped->if->if->if->println->ber->unescapeFilterValue->encodeOctetString->else->if->if->println->ber->unescapeFilterValue->encodeOctetString->if->if->println->ber->unescapeFilterValue->encodeOctetString->ber->endSeq->ber->endSeq->if
Filter#encodeComplexFilter(BerEncoder, byte[], int, int[], int)::: filter encode complex filter:::if->dprint->Integer->toString->dprint->ber->beginSeq->parens->findRightParen->encodeFilterList->ber->endSeq->if
Filter#findRightParen(byte[], int[], int)::: filter find right paren:::balance->escape->nextOffset->while->if->if->else->if->if->else->if->if->throw->new->InvalidSearchFilterException->tmp->new->intArr->return
Filter#encodeFilterList(BerEncoder, byte[], int, int, int)::: filter encode filter list:::if->dprint->filtOffset->new->intArr->listNumber->for->if
Filter#encodeExtensibleMatch(BerEncoder, byte[], int, int, int, int)::: filter encode extensible match:::matchDN->colon->colon2->i->ber->beginSeq->if->indexOf->if->indexOf->if->indexOf->if->ber->encodeOctetString->else->if->ber->encodeOctetString->else->ber->encodeOctetString->if->ber->encodeOctetString->else->ber->encodeOctetString->ber->unescapeFilterValue->encodeOctetString->ber->encodeBoolean->ber->endSeq
Filter#dprint(String)::: filter dprint:::new->byteArr->dprint
Filter#dprint(String, byte[])::: filter dprint:::dprint
Filter#dprint(String, byte[], int, int)::: filter dprint:::dstr->i->while->print->for->j->println
LdapAttribute#clone()::: ldap attribute clone:::attr->new->LdapAttribute->values->clone->return
LdapAttribute#add(Object):::Adds a new value to this attribute.:::values->addElement->return
LdapAttribute#setParent(DirContext, Name):::Sets the baseCtx and rdn used to find the attribute's schema Used by LdapCtx.setParents().:::
LdapAttribute#getBaseCtx():::returns the ctx this attribute came from:::if->if->new->Hashtable<String,String>->baseCtxEnv->put->baseCtxEnv->put->new->InitialDirContext->return
LdapAttribute#writeObject(java.io.ObjectOutputStream):::This is called when the object is serialized:::this->setBaseCtxInfo->out->defaultWriteObject
LdapAttribute#setBaseCtxInfo():::sets the information needed to reconstruct the baseCtx if we are serialized:::realEnv->secureEnv->if->getURL->if->realEnv->size->foreach->realEnv->keySet->if->key->indexOf->if->realEnv->clone->secureEnv->remove
LdapAttribute#getAttributeSyntaxDefinition():::Retrieves the syntax definition associated with this attribute.:::schema->getBaseCtx->getSchema->attrDef->schema->getID->lookup->syntaxAttr->attrDef->getAttributes->get->if->syntaxAttr->size->throw->getID->new->NameNotFoundException->syntaxName->syntaxAttr->get->return->schema->lookup
LdapAttribute#getAttributeDefinition():::Retrieves this attribute's schema definition.:::schema->getBaseCtx->getSchema->return->schema->getID->lookup
LdapBindingEnumeration#createItem(String, Attributes, Vector)::: ldap binding enumeration create item:::obj->atom->getAtom->if->attrs->get->try->AccessController->new->PrivilegedExceptionAction<Object>->doPrivileged->catch->throw->e->getException->finally->if->new->LdapCtx->cn->new->CompositeName->cn->add->try->DirectoryManager->getObjectInstance->catch->throw->ne->new->NamingException->ne->setRootCause->throw->finally->binding->if->cn->toString->homeCtx->convertControls->new->BindingWithControls->else->cn->toString->new->Binding->binding->setNameInNamespace->return
LdapBindingEnumeration#getReferredResults(LdapReferralContext)::: ldap binding enumeration get referred results:::return->refCtx->listBindings
LdapClient#authenticateCalled()::: ldap client authenticate called:::return
LdapClient#authenticate(boolean, String, Object, int, String, Control[], Hashtable)::: ldap client authenticate:::readTimeout->res->try->try->ensureOpen->catch->ne->new->CommunicationException->ne->setRootCause->throw->finally->switch->break->break->throw->new->CommunicationException->if->authMechanism->equalsIgnoreCase->authMechanism->equalsIgnoreCase->if->try->ldapBind->if->conn->setBound->catch->ne->new->CommunicationException->ne->setRootCause->throw->finally->else->new->LdapResult->else->if->authMechanism->equalsIgnoreCase->encodedPw->try->encodePassword->ldapBind->if->conn->setBound->catch->ne->new->CommunicationException->ne->setRootCause->throw->finally->if->for->i->else->if->try->LdapSasl->saslBind->if->conn->setBound->catch->ne->new->CommunicationException->ne->setRootCause->throw->finally->else->throw->new->AuthenticationNotSupportedException->if->authMechanism->equalsIgnoreCase->authMechanism->equalsIgnoreCase->authMechanism->equalsIgnoreCase->encodedPw->try->encodePassword->ldapBind->if->conn->setBound->catch->ne->new->CommunicationException->ne->setRootCause->throw->finally->if->for->i->if->throw->getErrorMessage->new->AuthenticationException->conn->setV3->return->catch->finally
LdapClient#ldapBind(String, byte[], Control[], String, boolean):::Sends an LDAP Bind request:::ensureOpen->conn->abandonOutstandingReqs->ber->new->BerEncoder->curMsgId->conn->getMsgId->res->new->LdapResult->ber->beginSeq->ber->encodeInt->ber->beginSeq->ber->encodeInt->ber->encodeString->if->ber->beginSeq->ber->encodeString->if->ber->encodeOctetString->ber->endSeq->else->if->ber->encodeOctetString->else->ber->encodeOctetString->ber->endSeq->if->encodeControls->ber->endSeq->req->conn->writeRequest->if->ber->reset->rber->conn->readReply->rber->parseSeq->rber->parseInt->if->rber->parseByte->return->rber->parseLength->parseResult->if->rber->bytesLeft->rber->peekByte->rber->parseOctetString->parseControls->conn->removeRequest->return
LdapClient#usingSaslStreams():::Determines whether SASL encryption/integrity is in progress:::return
LdapClient#incRefCount()::: ldap client inc ref count:::if->println
LdapClient#encodePassword(Object, boolean):::Returns the encoded password.:::if->new->String->if->if->return->getBytes->else->return->getBytes->else->return
LdapClient#close(Control[], boolean)::: ldap client close:::if->println->println->new->Throwable->printStackTrace->if->if->println->if->conn->cleanup->else->if->conn->cleanup->pcb->removePooledConnection->else->pcb->releasePooledConnection
LdapClient#forceClose(boolean)::: ldap client force close:::if->println->if->println->conn->cleanup->if->pcb->removePooledConnection
LdapClient#finalize()::: ldap client finalize:::if->println->forceClose
LdapClient#closeConnection()::: ldap client close connection:::forceClose
LdapClient#processConnectionClosure():::Called by Connection.cleanup():::if->unsolicited->size->msg->if->else->new->CommunicationException->notifyUnsolicited->if->pcb->removePooledConnection
LdapClient#search(String, int, int, int, int, boolean, String[], String, int, Control[], Hashtable, boolean, int)::: ldap client search:::ensureOpen->res->new->LdapResult->ber->new->BerEncoder->curMsgId->conn->getMsgId->ber->beginSeq->ber->encodeInt->ber->beginSeq->ber->encodeString->ber->encodeInt->ber->encodeInt->ber->encodeInt->ber->encodeInt->ber->encodeBoolean->Filter->encodeFilterString->ber->beginSeq->ber->encodeStringArray->ber->endSeq->ber->endSeq->if->encodeControls->ber->endSeq->req->conn->writeRequest->if->getSearchReply->return
LdapClient#clearSearchReply(LdapResult, Control[])::: ldap client clear search reply:::if->req->conn->findRequest->if->return->if->req->hasSearchCompleted->conn->removeRequest->else->conn->abandonRequest
LdapClient#getSearchReply(int, LdapResult, Hashtable)::: ldap client get search reply:::ensureOpen->req->if->conn->findRequest->return->return->getSearchReply
LdapClient#getSearchReply(LdapRequest, int, LdapResult, Hashtable)::: ldap client get search reply:::if->if->setSize->else->new->Vector<>->if->setSize->replyBer->seq->lattrs->la->DN->le->seqlen->endseq->for->i->return
LdapClient#parseAttribute(BerDecoder, Hashtable)::: ldap client parse attribute:::len->new->intArr->seq->ber->parseSeq->attrid->ber->parseString->hasBinaryValues->isBinaryValued->la->new->LdapAttribute->if->ber->parseSeq->attrlen->while->ber->bytesLeft->try->parseAttributeValue->catch->ber->seek->break->finally->else->ber->seek->return
LdapClient#parseAttributeValue(BerDecoder, Attribute, boolean)::: ldap client parse attribute value:::len->new->intArr->if->la->ber->ber->peekByte->parseOctetString->add->else->la->ber->parseStringWithTag->add->return
LdapClient#isBinaryValued(String, Hashtable)::: ldap client is binary valued:::id->attrid->toLowerCase->return->id->indexOf->defaultBinaryAttrs->containsKey->binaryAttrs->containsKey
LdapClient#parseResult(BerDecoder, LdapResult, boolean)::: ldap client parse result:::replyBer->parseEnumeration->replyBer->parseString->replyBer->parseString->if->replyBer->bytesLeft->replyBer->peekByte->URLs->new->Vector<>->seqlen->new->intArr->replyBer->parseSeq->endseq->replyBer->getParsePosition->while->replyBer->getParsePosition->replyBer->bytesLeft->URLs->replyBer->parseString->addElement->if->new->Vector<>->addElement
LdapClient#parseControls(BerDecoder)::: ldap client parse controls:::if->replyBer->bytesLeft->replyBer->peekByte->ctls->new->Vector<>->controlOID->criticality->controlValue->seqlen->new->intArr->replyBer->parseSeq->endseq->replyBer->getParsePosition->while->replyBer->getParsePosition->replyBer->bytesLeft->replyBer->parseSeq->replyBer->parseString->if->replyBer->bytesLeft->replyBer->peekByte->replyBer->parseBoolean->if->replyBer->bytesLeft->replyBer->peekByte->replyBer->parseOctetString->if->ctls->new->BasicControl->addElement->return->else->return
LdapClient#parseExtResponse(BerDecoder, LdapResult)::: ldap client parse ext response:::parseResult->if->replyBer->bytesLeft->replyBer->peekByte->replyBer->parseStringWithTag->if->replyBer->bytesLeft->replyBer->peekByte->replyBer->parseOctetString->parseControls
LdapClient#encodeControls(BerEncoder, Control[])::: ldap client encode controls:::if->return->controlVal->ber->beginSeq->for->i->ber->endSeq
LdapClient#processReply(LdapRequest, LdapResult, int):::Reads the next reply corresponding to msgId, outstanding on requestBer:::rber->conn->readReply->rber->parseSeq->rber->parseInt->if->rber->parseByte->return->rber->parseLength->parseResult->parseControls->conn->removeRequest->return
LdapClient#modify(String, int[], Attribute[], Control[])::: ldap client modify:::ensureOpen->res->new->LdapResult->if->return->ber->new->BerEncoder->curMsgId->conn->getMsgId->ber->beginSeq->ber->encodeInt->ber->beginSeq->ber->encodeString->ber->beginSeq->for->i->ber->endSeq->ber->endSeq->if->encodeControls->ber->endSeq->req->conn->writeRequest->return->processReply
LdapClient#encodeAttribute(BerEncoder, Attribute)::: ldap client encode attribute:::ber->beginSeq->ber->attr->getID->encodeString->ber->beginSeq->enum_->attr->getAll->val->while->enum_->hasMore->enum_->next->if->ber->encodeString->else->if->ber->encodeOctetString->else->if->else->throw->attr->getID->new->InvalidAttributeValueException->ber->endSeq->ber->endSeq
LdapClient#hasNoValue(Attribute)::: ldap client has no value:::return->attr->size->attr->size->attr->get
LdapClient#add(LdapEntry, Control[])::: ldap client add:::ensureOpen->res->new->LdapResult->if->return->ber->new->BerEncoder->curMsgId->conn->getMsgId->attr->ber->beginSeq->ber->encodeInt->ber->beginSeq->ber->encodeString->ber->beginSeq->enum_->getAll->while->enum_->hasMore->enum_->next->if->hasNoValue->throw->attr->getID->new->InvalidAttributeValueException->else->encodeAttribute->ber->endSeq->ber->endSeq->if->encodeControls->ber->endSeq->req->conn->writeRequest->return->processReply
LdapClient#delete(String, Control[])::: ldap client delete:::ensureOpen->res->new->LdapResult->if->return->ber->new->BerEncoder->curMsgId->conn->getMsgId->ber->beginSeq->ber->encodeInt->ber->encodeString->if->encodeControls->ber->endSeq->req->conn->writeRequest->return->processReply
LdapClient#moddn(String, String, boolean, String, Control[])::: ldap client moddn:::ensureOpen->changeSuperior->newSuperior->length->res->new->LdapResult->if->return->ber->new->BerEncoder->curMsgId->conn->getMsgId->ber->beginSeq->ber->encodeInt->ber->beginSeq->ber->encodeString->ber->encodeString->ber->encodeBoolean->if->ber->encodeString->ber->endSeq->if->encodeControls->ber->endSeq->req->conn->writeRequest->return->processReply
LdapClient#compare(String, String, String, Control[])::: ldap client compare:::ensureOpen->res->new->LdapResult->if->return->ber->new->BerEncoder->curMsgId->conn->getMsgId->ber->beginSeq->ber->encodeInt->ber->beginSeq->ber->encodeString->ber->beginSeq->ber->encodeString->val->value->getBytes->value->getBytes->ber->Filter->unescapeFilterValue->encodeOctetString->ber->endSeq->ber->endSeq->if->encodeControls->ber->endSeq->req->conn->writeRequest->return->processReply
LdapClient#extendedOp(String, byte[], Control[], boolean)::: ldap client extended op:::ensureOpen->res->new->LdapResult->if->return->ber->new->BerEncoder->curMsgId->conn->getMsgId->ber->beginSeq->ber->encodeInt->ber->beginSeq->ber->encodeString->if->ber->encodeOctetString->ber->endSeq->encodeControls->ber->endSeq->req->conn->writeRequest->rber->conn->readReply->rber->parseSeq->rber->parseInt->if->rber->parseByte->return->rber->parseLength->parseExtResponse->conn->removeRequest->return
LdapClient#getErrorMessage(int, String)::: ldap client get error message:::message->if->errorMessage->length->else->try->if->catch->finally->return
LdapClient#addUnsolicited(LdapCtx)::: ldap client add unsolicited:::if->println->unsolicited->addElement
LdapClient#removeUnsolicited(LdapCtx)::: ldap client remove unsolicited:::if->println->unsolicited->removeElement
LdapClient#processUnsolicited(BerDecoder)::: ldap client process unsolicited:::if->println->try->res->new->LdapResult->ber->parseSeq->ber->parseInt->if->ber->parseByte->throw->new->IOException->ber->parseLength->parseExtResponse->if->DISCONNECT_OID->equals->forceClose->first->notice->synchronized->if->unsolicited->size->unsolicited->elementAt->first->convertControls->new->UnsolicitedResponseImpl->if->notifyUnsolicited->if->DISCONNECT_OID->equals->new->CommunicationException->notifyUnsolicited->catch->ne->new->CommunicationException->ne->setRootCause->notifyUnsolicited->notifyUnsolicited->finally
LdapClient#notifyUnsolicited(Object)::: ldap client notify unsolicited:::unsolicitedCopy->synchronized->new->Vector<>->if->unsolicited->setSize->for->i->unsolicitedCopy->size
LdapClient#ensureOpen()::: ldap client ensure open:::if->if->throw->else->throw->new->IOException
LdapClient#getInstance(boolean, String, int, String, int, int, OutputStream, int, String, Control[], String, String, Object, Hashtable)::: ldap client get instance:::if->if->LdapPoolManager->isPoolingAllowed->answer->LdapPoolManager->getLdapClient->return->return->new->LdapClient
LdapClientFactory#createPooledConnection(PoolCallback)::: ldap client factory create pooled connection:::return->new->LdapClient
LdapClientFactory#toString()::: ldap client factory to string:::return
LdapCtx#newInstance(Control[])::: ldap ctx new instance:::clone->new->LdapCtx->clone->setRequestControls->return
LdapCtx#c_bind(Name, Object, Continuation)::: ldap ctx c_bind:::c_bind
LdapCtx#c_bind(Name, Object, Attributes, Continuation)::: ldap ctx c_bind:::cont->setError->inputAttrs->try->ensureOpen->if->if->throw->new->IllegalArgumentException->else->Obj->determineBindAttrs->newDN->fullyQualifiedName->addRdnAttributes->entry->new->LdapEntry->answer->clnt->add->if->processReturnCode->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->refCtx->bind->return->catch->continue->finally->refCtx->close->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->cont->fillInException->throw->cont->fillInException->finally
LdapCtx#c_rebind(Name, Object, Continuation)::: ldap ctx c_rebind:::c_rebind
LdapCtx#c_rebind(Name, Object, Attributes, Continuation)::: ldap ctx c_rebind:::cont->setError->inputAttrs->try->origAttrs->try->c_getAttributes->catch->finally->if->c_bind->return->if->getAttributes->keepAttrs->origAttrs->clone->if->origObjectClass->origAttrs->get->if->origObjectClass->clone->for->i->origAttrs->put->for->i->if->Obj->determineBindAttrs->newDN->fullyQualifiedName->answer->clnt->delete->if->processReturnCode->return->addEx->try->addRdnAttributes->entry->new->LdapEntry->clnt->add->if->appendVector->catch->finally->if->answer2->clnt->new->LdapEntry->add->if->appendVector->if->processReturnCode->if->throw->else->if->throw->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->refCtx->rebind->return->catch->continue->finally->refCtx->close->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->cont->fillInException->throw->cont->fillInException->finally
LdapCtx#c_unbind(Name, Continuation)::: ldap ctx c_unbind:::cont->setError->try->ensureOpen->fname->fullyQualifiedName->answer->clnt->delete->adjustDeleteStatus->if->processReturnCode->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->refCtx->unbind->return->catch->continue->finally->refCtx->close->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->cont->fillInException->throw->cont->fillInException->finally
LdapCtx#c_rename(Name, Name, Continuation)::: ldap ctx c_rename:::oldParsed->newParsed->oldParent->newParent->newRDN->newSuperior->cont->setError->try->ensureOpen->if->oldName->isEmpty->parser->parse->else->parser->oldName->get->parse->oldParsed->oldParsed->size->getPrefix->if->parser->newName->get->parse->else->newParsed->newParsed->size->getPrefix->if->oldParent->equals->if->throw->new->InvalidNameException->else->newParent->toString->fullyQualifiedName->newParsed->newParsed->size->get->answer->clnt->fullyQualifiedName->moddn->if->processReturnCode->catch->e->setNewRdn->if->pre->new->PartialResultException->pre->cont->fillInException->setRootCause->throw->cont->fillInException->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->refCtx->rename->return->catch->continue->finally->refCtx->close->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->cont->fillInException->throw->cont->fillInException->finally
LdapCtx#c_createSubcontext(Name, Continuation)::: ldap ctx c_create subcontext:::return->c_createSubcontext
LdapCtx#c_createSubcontext(Name, Attributes, Continuation)::: ldap ctx c_create subcontext:::cont->setError->inputAttrs->try->ensureOpen->if->oc->new->BasicAttribute->oc->add->new->BasicAttributes->attrs->put->newDN->fullyQualifiedName->addRdnAttributes->entry->new->LdapEntry->answer->clnt->add->if->processReturnCode->return->return->new->LdapCtx->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->return->refCtx->createSubcontext->catch->continue->finally->refCtx->close->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->cont->fillInException->throw->cont->fillInException->finally
LdapCtx#c_destroySubcontext(Name, Continuation)::: ldap ctx c_destroy subcontext:::cont->setError->try->ensureOpen->fname->fullyQualifiedName->answer->clnt->delete->adjustDeleteStatus->if->processReturnCode->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->refCtx->destroySubcontext->return->catch->continue->finally->refCtx->close->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->cont->fillInException->throw->cont->fillInException->finally
LdapCtx#addRdnAttributes(String, Attributes, boolean):::Adds attributes from RDN to attrs if not already present:::if->dn->equals->return->rdnList->new->LdapName->getRdns->rdn->rdnList->rdnList->size->get->nameAttrs->rdn->toAttributes->enum_->nameAttrs->getAll->nameAttr->while->enum_->hasMore->enum_->next->if->attrs->nameAttr->getID->get->if->attrs->isCaseIgnored->attrs->getIDs->nameAttr->getID->containsIgnoreCase->continue->if->attrs->clone->attrs->put->return
LdapCtx#containsIgnoreCase(NamingEnumeration, String)::: ldap ctx contains ignore case:::strEntry->while->enumStr->hasMore->enumStr->next->if->strEntry->equalsIgnoreCase->return->return
LdapCtx#adjustDeleteStatus(String, LdapResult)::: ldap ctx adjust delete status:::if->try->orig->parser->parse->matched->parser->parse->if->orig->size->matched->size->catch->finally
LdapCtx#appendVector(Vector, Vector)::: ldap ctx append vector:::if->else->for->i->v2->size->return
LdapCtx#c_lookupLink(Name, Continuation)::: ldap ctx c_lookup link:::return->c_lookup
LdapCtx#c_lookup(Name, Continuation)::: ldap ctx c_lookup:::cont->setError->obj->attrs->try->cons->new->SearchControls->cons->setSearchScope->cons->setReturningAttributes->cons->setReturningObjFlag->answer->doSearchOnce->if->processReturnCode->if->size->new->BasicAttributes->else->entry->elementAt->entryCtls->if->appendVector->if->attrs->get->Obj->decodeObject->if->fullyQualifiedName->new->LdapCtx->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->return->refCtx->lookup->catch->continue->finally->refCtx->close->throw->cont->fillInException->finally->try->return->DirectoryManager->getObjectInstance->catch->throw->cont->fillInException->e2->new->NamingException->e2->setRootCause->throw->cont->fillInException->finally
LdapCtx#c_list(Name, Continuation)::: ldap ctx c_list:::cons->new->SearchControls->classAttrs->new->StringArr->cons->setReturningAttributes->cons->setReturningObjFlag->cont->setError->answer->try->doSearch->if->processReturnCode->return->new->LdapNamingEnumeration->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->return->refCtx->list->catch->continue->finally->refCtx->close->res->new->LdapNamingEnumeration->res->cont->fillInException->setNamingException->return->res->new->LdapNamingEnumeration->res->cont->fillInException->setNamingException->return->throw->cont->fillInException->finally
LdapCtx#c_listBindings(Name, Continuation)::: ldap ctx c_list bindings:::cons->new->SearchControls->cons->setReturningAttributes->cons->setReturningObjFlag->cont->setError->answer->try->doSearch->if->processReturnCode->return->new->LdapBindingEnumeration->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->return->refCtx->listBindings->catch->continue->finally->refCtx->close->res->new->LdapBindingEnumeration->res->cont->fillInException->setNamingException->return->res->new->LdapBindingEnumeration->res->cont->fillInException->setNamingException->return->throw->cont->fillInException->finally
LdapCtx#c_getNameParser(Name, Continuation)::: ldap ctx c_get name parser:::cont->setSuccess->return
LdapCtx#getNameInNamespace()::: ldap ctx get name in namespace:::return
LdapCtx#composeName(Name, Name)::: ldap ctx compose name:::result->if->prefix->clone->result->addAll->return->new->CompositeName->result->toString->add->if->new->CompositeName->name->toString->add->if->new->CompositeName->prefix->toString->add->prefixLast->prefix->size->if->name->isEmpty->prefix->isEmpty->name->get->equals->prefix->get->equals->return->super->composeName->prefix->clone->result->addAll->if->ldapComp->result->get->result->get->concatNames->result->remove->result->remove->result->add->return
LdapCtx#fullyQualifiedName(Name)::: ldap ctx fully qualified name:::return->rel->isEmpty->rel->get->fullyQualifiedName
LdapCtx#fullyQualifiedName(String)::: ldap ctx fully qualified name:::return->concatNames
LdapCtx#concatNames(String, String)::: ldap ctx concat names:::if->lesser->equals->return->else->if->greater->equals->return->else->return
LdapCtx#c_getAttributes(Name, String[], Continuation)::: ldap ctx c_get attributes:::cont->setError->cons->new->SearchControls->cons->setSearchScope->cons->setReturningAttributes->try->answer->doSearchOnce->if->processReturnCode->if->size->return->new->BasicAttributes->entry->elementAt->entryCtls->if->appendVector->name->clone->setParents->return->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->return->refCtx->getAttributes->catch->continue->finally->refCtx->close->throw->cont->fillInException->finally
LdapCtx#c_modifyAttributes(Name, int, Attributes, Continuation)::: ldap ctx c_modify attributes:::cont->setError->try->ensureOpen->if->attrs->size->return->newDN->fullyQualifiedName->jmod_op->convertToLdapModCode->jmods->attrs->size->new->intArr->jattrs->attrs->size->new->AttributeArr->ae->attrs->getAll->for->i->ae->hasMore->answer->clnt->modify->if->processReturnCode->return->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->refCtx->modifyAttributes->return->catch->continue->finally->refCtx->close->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->cont->fillInException->throw->cont->fillInException->finally
LdapCtx#c_modifyAttributes(Name, ModificationItem[], Continuation)::: ldap ctx c_modify attributes:::cont->setError->try->ensureOpen->if->return->newDN->fullyQualifiedName->jmods->new->intArr->jattrs->new->AttributeArr->mod->for->i->answer->clnt->modify->if->processReturnCode->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->refCtx->modifyAttributes->return->catch->continue->finally->refCtx->close->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->cont->fillInException->throw->cont->fillInException->finally
LdapCtx#convertToLdapModCode(int)::: ldap ctx convert to ldap mod code:::switch->return->return->return->throw->new->IllegalArgumentException
LdapCtx#c_getSchema(Name, Continuation)::: ldap ctx c_get schema:::cont->setError->try->return->getSchemaTree->catch->throw->cont->fillInException->finally
LdapCtx#c_getSchemaClassDefinition(Name, Continuation)::: ldap ctx c_get schema class definition:::cont->setError->try->objectClassAttr->new->StringArr->c_getAttributes->get->if->objectClassAttr->size->return->ocSchema->c_getSchema->lookup->objectClassCtx->new->HierMemDirCtx->objectClassDef->objectClassName->for->objectClasses->objectClassAttr->getAll->objectClasses->hasMoreElements->objectClassCtx->new->SchemaViolationException->setReadOnly->return->catch->throw->cont->fillInException->finally
LdapCtx#getSchemaTree(Name)::: ldap ctx get schema tree:::subschemasubentry->getSchemaEntry->schemaTree->schemaTrees->get->if->if->println->buildSchemaTree->schemaTrees->put->return
LdapCtx#buildSchemaTree(String)::: ldap ctx build schema tree:::constraints->new->SearchControls->sse->new->CompositeName->add->results->new->Continuation->searchAux->if->results->hasMore->throw->new->OperationNotSupportedException->result->results->next->results->close->obj->result->getObject->if->throw->new->NamingException->return->LdapSchemaCtx->result->getAttributes->createSchemaTree
LdapCtx#getSchemaEntry(Name, boolean)::: ldap ctx get schema entry:::constraints->new->StringArr->new->SearchControls->results->try->new->Continuation->searchAux->catch->if->currentDN->length->name->isEmpty->throw->new->OperationNotSupportedException->else->throw->finally->if->results->hasMoreElements->throw->new->ConfigurationException->result->results->next->results->close->schemaEntryAttr->result->getAttributes->get->if->schemaEntryAttr->size->if->currentDN->length->name->isEmpty->throw->new->OperationNotSupportedException->else->return->new->CompositeName->getSchemaEntry->return->schemaEntryAttr->get
LdapCtx#setParents(Attributes, Name)::: ldap ctx set parents:::ae->attrs->getAll->while->ae->hasMore->ae->next->setParent
LdapCtx#getURL()::: ldap ctx get l:::if->LdapURL->toUrlString->return
LdapCtx#c_search(Name, Attributes, Continuation)::: ldap ctx c_search:::return->c_search
LdapCtx#c_search(Name, Attributes, String[], Continuation)::: ldap ctx c_search:::cons->new->SearchControls->cons->setReturningAttributes->filter->try->SearchFilter->format->catch->cont->setError->throw->cont->fillInException->finally->return->c_search
LdapCtx#c_search(Name, String, SearchControls, Continuation)::: ldap ctx c_search:::return->cloneSearchControls->searchAux
LdapCtx#c_search(Name, String, Object[], SearchControls, Continuation)::: ldap ctx c_search:::strfilter->try->SearchFilter->format->catch->cont->setError->throw->cont->fillInException->finally->return->c_search
LdapCtx#searchAux(Name, String, SearchControls, boolean, boolean, Continuation)::: ldap ctx search aux:::answer->tokens->new->StringArr->reqAttrs->if->new->SearchControls->cons->getReturningAttributes->if->cons->getReturningObjFlag->if->hasWildcard->for->i->if->totalAttrs->new->StringArr->System->arraycopy->System->arraycopy->cons->setReturningAttributes->args->new->LdapCtx.SearchArgs->cont->setError->try->if->searchToCompare->compare->if->answer->fullyQualifiedName->compareToSearchResult->processReturnCode->else->doSearch->processReturnCode->return->fullyQualifiedName->new->LdapSearchEnumeration->catch->if->throw->cont->fillInException->while->refCtx->e->getReferralContext->try->return->refCtx->search->catch->continue->finally->refCtx->close->res->fullyQualifiedName->new->LdapSearchEnumeration->res->setNamingException->return->res->fullyQualifiedName->new->LdapSearchEnumeration->res->setNamingException->return->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->cont->fillInException->throw->cont->fillInException->finally
LdapCtx#getSearchReply(LdapClient, LdapResult)::: ldap ctx get search reply:::if->throw->new->CommunicationException->try->return->eClnt->getSearchReply->catch->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->finally
LdapCtx#doSearchOnce(Name, String, SearchControls, boolean)::: ldap ctx do search once:::savedBatchSize->answer->doSearch->return
LdapCtx#doSearch(Name, String, SearchControls, boolean, boolean)::: ldap ctx do search:::ensureOpen->try->scope->switch->cons->getSearchScope->break->break->break->retattrs->cons->getReturningAttributes->if->new->StringArr->nm->fullyQualifiedName->name->isEmpty->name->get->msecLimit->cons->getTimeLimit->secLimit->if->answer->clnt->cons->getCountLimit->cons->getReturningObjFlag->search->return->catch->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->finally
LdapCtx#searchToCompare(String, SearchControls, String[])::: ldap ctx search to compare:::if->cons->getSearchScope->return->attrs->cons->getReturningAttributes->if->return->if->filterToAssertion->return->return
LdapCtx#filterToAssertion(String, String[])::: ldap ctx filter to assertion:::assertionTokenizer->new->StringTokenizer->if->assertionTokenizer->countTokens->return->assertionTokenizer->nextToken->assertionTokenizer->nextToken->if->indexOf->return->hasParens->len->length->if->charAt->charAt->else->if->charAt->charAt->return->illegalCharsTokenizer->new->StringTokenizer->if->illegalCharsTokenizer->countTokens->return->new->StringTokenizer->if->illegalCharsTokenizer->countTokens->return->if->substring->substring->return
LdapCtx#compare(Name, String, String)::: ldap ctx compare:::ensureOpen->nm->fullyQualifiedName->answer->clnt->compare->return
LdapCtx#cloneSearchControls(SearchControls)::: ldap ctx clone search controls:::if->return->retAttrs->cons->getReturningAttributes->if->attrs->new->StringArr->System->arraycopy->return->cons->getSearchScope->cons->getCountLimit->cons->getTimeLimit->cons->getReturningObjFlag->cons->getDerefLinkFlag->new->SearchControls
LdapCtx#p_getEnvironment():::Override with noncloning version.:::return
LdapCtx#getEnvironment()::: ldap ctx get environment:::return->new->Hashtable<String,Object>->envprops->clone
LdapCtx#removeFromEnvironment(String)::: ldap ctx remove from environment:::if->envprops->get->return->switch->break->break->break->break->break->break->setReferralMode->break->setBinaryAttributes->break->break->break->break->break->closeConnection->if->if->break->closeConnection->break->break->envprops->clone->return->envprops->remove
LdapCtx#addToEnvironment(String, Object)::: ldap ctx add to environment:::if->return->removeFromEnvironment->switch->setRefSeparator->break->setTypesOnly->break->setDeleteRDN->break->setDerefAliases->break->setBatchSize->break->setReferralLimit->break->setReferralMode->break->setBinaryAttributes->break->setConnectTimeout->break->setReadTimeout->break->setWaitForReply->break->setReplyQueueSize->break->closeConnection->if->equals->if->break->closeConnection->break->break->new->Hashtable<String,Object>->envprops->clone->return->envprops->put
LdapCtx#setProviderUrl(String):::Sets the URL that created the context in the java.naming.provider.url property.:::if->envprops->put
LdapCtx#setDomainName(String):::Sets the domain name for the context in the com.sun.jndi.ldap.domainname property:::if->envprops->put
LdapCtx#initEnv()::: ldap ctx init env:::if->setReferralMode->return->envprops->get->setBatchSize->envprops->get->setRefSeparator->envprops->get->setDeleteRDN->envprops->get->setTypesOnly->envprops->get->setDerefAliases->envprops->get->setReferralLimit->envprops->get->setBinaryAttributes->envprops->get->cloneControls->envprops->get->setReferralMode->envprops->get->setConnectTimeout->envprops->get->setReadTimeout->envprops->get->setWaitForReply->envprops->get->setReplyQueueSize
LdapCtx#setDeleteRDN(String)::: ldap ctx set delete n:::if->deleteRDNProp->equalsIgnoreCase->else
LdapCtx#setTypesOnly(String)::: ldap ctx set types only:::if->typesOnlyProp->equalsIgnoreCase->else
LdapCtx#setBatchSize(String):::Sets the batch size of this context;:::if->Integer->parseInt->else
LdapCtx#setReferralMode(String, boolean):::Sets the referral mode of this context to 'follow', 'throw' or 'ignore':::if->switch->break->break->break->break->throw->new->IllegalArgumentException->else->if->addControl->else->if->removeControl
LdapCtx#setDerefAliases(String):::Set whether aliases are dereferenced during resolution and searches.:::if->switch->break->break->break->break->throw->new->IllegalArgumentException->else
LdapCtx#setRefSeparator(String)::: ldap ctx set ref separator:::if->sepStr->length->sepStr->charAt->else
LdapCtx#setReferralLimit(String):::Sets the limit on referral chains:::if->Integer->parseInt->if->else
LdapCtx#setHopCount(int)::: ldap ctx set hop count:::
LdapCtx#setConnectTimeout(String):::Sets the connect timeout value:::if->Integer->parseInt->else
LdapCtx#setReplyQueueSize(String):::Sets the size of the queue of unprocessed search replies:::if->Integer->parseInt->if->else
LdapCtx#setWaitForReply(String):::Sets the flag that controls whether to block until the first search reply is received:::if->waitForReplyProp->equalsIgnoreCase->else
LdapCtx#setReadTimeout(String):::Sets the read timeout value:::if->Integer->parseInt->else
LdapCtx#extractURLs(String)::: ldap ctx extract ls:::separator->urlCount->while->refString->indexOf->referrals->new->Vector<>->iURL->i->refString->indexOf->while->refString->indexOf->referral->new->Vector<>->referral->refString->substring->addElement->referrals->addElement->referral->new->Vector<>->referral->refString->substring->addElement->referrals->addElement->return
LdapCtx#setBinaryAttributes(String)::: ldap ctx set binary attributes:::if->else->new->Hashtable<>->tokens->attrIds->toLowerCase->new->StringTokenizer->while->tokens->hasMoreTokens->binaryAttrs->tokens->nextToken->put
LdapCtx#finalize()::: ldap ctx finalize:::try->close->catch->finally
LdapCtx#close()::: ldap ctx close:::if->println->new->Throwable->printStackTrace->if->eventSupport->cleanup->removeUnsolicited->if->if->println->return->closeConnection
LdapCtx#reconnect(Control[])::: ldap ctx reconnect:::new->Hashtable<String,Object>->envprops->clone->if->envprops->remove->else->envprops->cloneControls->put->ensureOpen
LdapCtx#ensureOpen()::: ldap ctx ensure open:::ensureOpen
LdapCtx#ensureOpen(boolean)::: ldap ctx ensure open:::try->if->if->println->new->Hashtable<>->connect->else->if->synchronized->if->clnt->usingSaslStreams->closeConnection->new->Hashtable<>->connect->catch->finally
LdapCtx#connect(boolean)::: ldap ctx connect:::if->println->user->passwd->secProtocol->socketFactory->authMechanism->ver->ldapVersion->usePool->if->envprops->get->envprops->get->envprops->get->envprops->get->envprops->get->envprops->get->envprops->get->equalsIgnoreCase->if->equals->if->try->initial->if->Integer->parseInt->LdapClient->getInstance->if->clnt->authenticateCalled->return->else->if->return->else->answer->clnt->authenticate->if->if->closeConnection->processReturnCode->catch->if->throw->referral->url->saved_ex->while->if->e->getNextReferral->if->throw->saved_ex->fillInStackTrace->else->throw->new->NamingException->new->LdapURL->url->getHost->if->hostname->charAt->hostname->hostname->length->substring->url->getPort->try->connect->break->catch->continue->finally->finally
LdapCtx#closeConnection(boolean)::: ldap ctx close connection:::removeUnsolicited->if->if->println->clnt->close
LdapCtx#incEnumCount()::: ldap ctx inc enum count:::if->println
LdapCtx#decEnumCount()::: ldap ctx dec enum count:::if->println->if->try->close->catch->finally
LdapCtx#processReturnCode(LdapResult)::: ldap ctx process return code:::processReturnCode
LdapCtx#processReturnCode(LdapResult, Name)::: ldap ctx process return code:::new->CompositeName->add->fullyQualifiedName->processReturnCode
LdapCtx#processReturnCode(LdapResult, Name, Object, Name, Hashtable, String)::: ldap ctx process return code:::msg->LdapClient->getErrorMessage->e->r->switch->if->if->new->PartialResultException->break->contRefCount->size->head->ptr->for->i->if->else->while->if->lee->new->LimitExceededException->lee->setRootCause->throw->return->if->new->PartialResultException->break->new->LdapReferralException->refs->if->else->if->new->Vector<>->foreach->elementAt->if->s->startsWith->refs->add->if->refs->isEmpty->else->elementAt->r->setReferralInfo->if->r->setHopCount->if->lee->new->LimitExceededException->lee->setRootCause->else->break->if->new->PartialResultException->break->if->equals->extractURLs->else->new->PartialResultException->break->new->LdapReferralException->if->r->setHopCount->if->isEmpty->size->r->setReferralInfo->if->lee->new->LimitExceededException->lee->setRootCause->else->else->r->setReferralInfo->return->break->if->remainName->toString->new->InvalidNameException->else->new->InvalidNameException->break->mapErrorCode->break->e->setResolvedName->e->setResolvedObj->e->setRemainingName->throw
LdapCtx#mapErrorCode(int, String):::Maps an LDAP error code to an appropriate NamingException:::if->return->e->message->LdapClient->getErrorMessage->switch->new->NamingException->break->new->NamingException->break->new->AttributeInUseException->break->new->AuthenticationNotSupportedException->break->new->NameAlreadyBoundException->break->new->AuthenticationException->break->new->InvalidSearchFilterException->break->new->NoPermissionException->break->new->InvalidAttributeValueException->break->new->NamingException->break->new->NoSuchAttributeException->break->new->NameNotFoundException->break->new->SchemaViolationException->break->new->ContextNotEmptyException->break->new->NamingException->break->new->NamingException->break->new->CommunicationException->break->new->SizeLimitExceededException->break->new->TimeLimitExceededException->break->new->OperationNotSupportedException->break->new->ServiceUnavailableException->break->new->InvalidAttributeIdentifierException->break->new->OperationNotSupportedException->break->new->NamingException->break->new->LimitExceededException->break->new->NamingException->break->new->NamingException->break->new->InvalidNameException->break->new->NamingException->break->return
LdapCtx#extendedOperation(ExtendedRequest)::: ldap ctx extended operation:::startTLS->request->getID->equals->ensureOpen->try->answer->clnt->request->getID->request->getEncodedValue->extendedOp->if->new->CompositeName->processReturnCode->len->er->request->createExtendedResponse->if->domainName->envprops->get->setConnection->return->catch->if->throw->while->refCtx->e->getReferralContext->try->return->refCtx->extendedOperation->catch->continue->finally->refCtx->close->e2->e->getMessage->new->CommunicationException->e2->setRootCause->throw->finally
LdapCtx#setRequestControls(Control[])::: ldap ctx set request controls:::if->addControl->else->cloneControls
LdapCtx#getRequestControls()::: ldap ctx get request controls:::return->cloneControls
LdapCtx#getConnectControls()::: ldap ctx get connect controls:::return->cloneControls
LdapCtx#getResponseControls()::: ldap ctx get response controls:::return->convertControls
LdapCtx#convertControls(Vector):::Narrow controls using own default factory and ControlFactory.:::count->ctls->size->if->return->controls->new->ControlArr->for->i->return
LdapCtx#addControl(Control[], Control)::: ldap ctx add control:::if->return->new->ControlArr->found->findControl->if->return->newCtls->new->ControlArr->System->arraycopy->return
LdapCtx#findControl(Control[], Control)::: ldap ctx find control:::for->i->return
LdapCtx#removeControl(Control[], Control)::: ldap ctx remove control:::if->return->found->findControl->if->return->newCtls->new->ControlArr->System->arraycopy->System->arraycopy->return
LdapCtx#cloneControls(Control[])::: ldap ctx clone controls:::if->return->copiedCtls->new->ControlArr->System->arraycopy->return
LdapCtx#addNamingListener(Name, int, NamingListener)::: ldap ctx add naming listener:::getTargetName->addNamingListener
LdapCtx#addNamingListener(String, int, NamingListener)::: ldap ctx add naming listener:::if->new->EventSupport->eventSupport->new->CompositeName->getTargetName->addNamingListener->if->addUnsolicited
LdapCtx#removeNamingListener(NamingListener)::: ldap ctx remove naming listener:::if->return->eventSupport->removeNamingListener->if->eventSupport->hasUnsolicited->removeUnsolicited
LdapCtx#addNamingListener(String, String, SearchControls, NamingListener)::: ldap ctx add naming listener:::if->new->EventSupport->eventSupport->new->CompositeName->getTargetName->cloneSearchControls->addNamingListener->if->addUnsolicited
LdapCtx#addNamingListener(Name, String, SearchControls, NamingListener)::: ldap ctx add naming listener:::getTargetName->addNamingListener
LdapCtx#addNamingListener(Name, String, Object[], SearchControls, NamingListener)::: ldap ctx add naming listener:::getTargetName->addNamingListener
LdapCtx#addNamingListener(String, String, Object[], SearchControls, NamingListener)::: ldap ctx add naming listener:::strfilter->SearchFilter->format->new->CompositeName->getTargetName->addNamingListener
LdapCtx#targetMustExist()::: ldap ctx target must exist:::return
LdapCtx#getTargetName(Name):::Retrieves the target name for which the listener is registering:::if->if->nm->size->throw->new->InvalidNameException->else->if->nm->isEmpty->return->else->return->nm->get->else->return->nm->toString
LdapCtx#addUnsolicited():::Registers this context with the underlying LdapClient:::if->println->ensureOpen->synchronized->clnt->addUnsolicited
LdapCtx#removeUnsolicited()::: ldap ctx remove unsolicited:::if->println->if->return->synchronized->if->clnt->removeUnsolicited
LdapCtx#fireUnsolicited(Object):::Uses EventSupport to fire an event related to an unsolicited notification:::if->println->synchronized->if->eventSupport->fireUnsolicited->if
LdapCtxFactory#getObjectInstance(Object, Name, Context, Hashtable)::: ldap ctx factory get object instance:::if->isLdapRef->return->factory->new->ldapURLContextFactory->urls->getURLs->return->factory->getObjectInstance
LdapCtxFactory#getInitialContext(Hashtable)::: ldap ctx factory get initial context:::try->providerUrl->envprops->get->if->return->new->LdapCtx->urls->LdapURL->fromList->if->throw->new->ConfigurationException->return->getLdapCtxInstance->catch->if->envprops->get->equals->throw->bindCtls->envprops->get->return->e->getReferralContext->finally
LdapCtxFactory#isLdapRef(Object):::Returns true if argument is an LDAP reference.:::if->return->thisClassName->getName->ref->return->thisClassName->ref->getFactoryClassName->equals
LdapCtxFactory#getURLs(Reference):::Returns the URLs contained within an LDAP reference.:::size->urls->ref->size->new->StringArr->addrs->ref->getAll->while->addrs->hasMoreElements->addr->addrs->nextElement->if->addr->getType->equals->addr->getContent->if->throw->new->ConfigurationException->if->ref->size->return->urls2->new->StringArr->System->arraycopy->return
LdapCtxFactory#getLdapCtxInstance(Object, Hashtable)::: ldap ctx factory get ldap ctx instance:::if->return->getUsingURL->else->if->return->getUsingURLs->else->throw->new->IllegalArgumentException
LdapCtxFactory#getUsingURL(String, Hashtable)::: ldap ctx factory get using l:::ctx->ldapUrl->new->LdapURL->dn->ldapUrl->getDN->host->ldapUrl->getHost->port->ldapUrl->getPort->hostports->domainName->if->ServiceLocator->mapDnToDomainName->ServiceLocator->getLdapService->scheme->ldapUrl->getScheme->newUrls->new->StringArr->query->ldapUrl->getQuery->urlSuffix->ldapUrl->getPath->for->i->getUsingURLs->setDomainName->else->ldapUrl->useSsl->new->LdapCtx->setProviderUrl->return
LdapCtxFactory#getUsingURLs(String[], Hashtable)::: ldap ctx factory get using ls:::ne->ctx->for->i->throw
LdapCtxFactory#createTypeNameAttr(Class):::Used by Obj and obj/RemoteToAttrs too so must be public:::v->new->Vector<>->types->getTypeNames->if->tAttr->new->BasicAttribute->for->i->return->return
LdapCtxFactory#getTypeNames(Class, Vector)::: ldap ctx factory get type names:::getClassesAux->members->currentClass->getInterfaces->for->i->ret->v->size->new->StringArr->i->foreach->return
LdapCtxFactory#getClassesAux(Class, Vector)::: ldap ctx factory get classes aux:::if->v->currentClass->getName->contains->v->currentClass->getName->addElement->currentClass->getSuperclass->while->getTypeNames->currentClass->getSuperclass
LdapName#clone()::: ldap name clone:::return->new->LdapName
LdapName#toString()::: ldap name to string:::if->return->buf->new->StringBuffer->for->i->rdns->size->new->String->return
LdapName#equals(Object)::: ldap name equals:::return->compareTo
LdapName#compareTo(Object)::: ldap name compare to:::that->if->unparsed->equals->return->minSize->Math->rdns->size->size->min->for->i->return->rdns->size->size
LdapName#hashCode()::: ldap name hash code:::hash->for->i->rdns->size->return
LdapName#size()::: ldap name size:::return->rdns->size
LdapName#isEmpty()::: ldap name is empty:::return->rdns->isEmpty
LdapName#getAll()::: ldap name get all:::enum_->rdns->elements->return->new->Enumeration<String>
LdapName#get(int)::: ldap name get:::return->rdns->elementAt->toString
LdapName#getPrefix(int)::: ldap name get prefix:::return->new->LdapName
LdapName#getSuffix(int)::: ldap name get suffix:::return->rdns->size->new->LdapName
LdapName#startsWith(Name)::: ldap name starts with:::len1->rdns->size->len2->n->size->return->matches
LdapName#endsWith(Name)::: ldap name ends with:::len1->rdns->size->len2->n->size->return->matches
LdapName#setValuesCaseSensitive(boolean):::Controls whether string-values are treated as case-sensitive when the string values within names are compared:::toString->try->parse->catch->throw->new->IllegalStateException->finally
LdapName#matches(int, int, Name)::: ldap name matches:::for->i->return
LdapName#addAll(Name)::: ldap name add all:::return->size->addAll
LdapName#addAll(int, Name)::: ldap name add all:::if->s->for->i->size->else->comps->suffix->getAll->while->comps->hasMoreElements->p->comps->nextElement->new->DnParser->rdns->p->getRdn->insertElementAt->return
LdapName#add(String)::: ldap name add:::return->size->add
LdapName#add(int, String)::: ldap name add:::rdn->new->DnParser->getRdn->rdns->insertElementAt->return
LdapName#remove(int)::: ldap name remove:::comp->get->rdns->removeElementAt->return
LdapName#parse()::: ldap name parse:::new->DnParser->getDn
LdapName#isWhitespace(char)::: ldap name is whitespace:::return
LdapName#escapeAttributeValue(Object):::Given the value of an attribute, returns a string suitable for inclusion in a DN:::return->TypeAndValue->escapeValue
LdapName#unescapeAttributeValue(String):::Given an attribute value formatted according to RFC 2253, returns the unformatted value:::return->TypeAndValue->unescapeValue
LdapName#writeObject(java.io.ObjectOutputStream):::Serializes only the unparsed DN, for compactness and to avoid any implementation dependency.:::s->toString->writeObject->s->writeBoolean
LdapName#readObject(java.io.ObjectInputStream)::: ldap name read object:::s->readObject->s->readBoolean->try->parse->catch->throw->new->java.io.StreamCorruptedException->finally
LdapName.DnParser#getDn()::: dn parser get dn:::rdns->new->Vector<>->if->return->rdns->parseRdn->addElement->while->if->rdns->parseRdn->insertElementAt->else->throw->new->InvalidNameException->return
LdapName.DnParser#getRdn()::: dn parser get rdn:::rdn->parseRdn->if->throw->new->InvalidNameException->return
LdapName.DnParser#parseRdn()::: dn parser parse rdn:::rdn->new->Rdn->while->consumeWhitespace->attrType->parseAttrType->consumeWhitespace->if->throw->new->InvalidNameException->consumeWhitespace->value->parseAttrValue->consumeWhitespace->rdn->new->TypeAndValue->add->if->break->return
LdapName.DnParser#parseAttrType()::: dn parser parse attr type:::beg->while->c->if->Character->isLetterOrDigit->else->break->while->if->throw->new->InvalidNameException->return->new->String
LdapName.DnParser#parseAttrValue()::: dn parser parse attr value:::if->return->parseBinaryAttrValue->else->if->return->parseQuotedAttrValue->else->return->parseStringAttrValue
LdapName.DnParser#parseBinaryAttrValue()::: dn parser parse binary attr value:::beg->while->Character->isLetterOrDigit->return->new->String
LdapName.DnParser#parseQuotedAttrValue()::: dn parser parse quoted attr value:::beg->while->if->if->throw->new->InvalidNameException->return->new->String
LdapName.DnParser#parseStringAttrValue()::: dn parser parse string attr value:::beg->esc->while->atTerminator->if->if->throw->new->InvalidNameException->end->for->return->new->String
LdapName.DnParser#consumeWhitespace()::: dn parser consume whitespace:::while->isWhitespace
LdapName.DnParser#atTerminator()::: dn parser at terminator:::return
LdapName.Rdn#add(TypeAndValue)::: rdn add:::i->for->tvs->size->tvs->insertElementAt
LdapName.Rdn#toString()::: rdn to string:::buf->new->StringBuffer->for->i->tvs->size->return->new->String
LdapName.Rdn#equals(Object)::: rdn equals:::return->compareTo
LdapName.Rdn#compareTo(Object)::: rdn compare to:::that->minSize->Math->tvs->size->size->min->for->i->return->tvs->size->size
LdapName.Rdn#hashCode()::: rdn hash code:::hash->for->i->tvs->size->return
LdapName.Rdn#toAttributes()::: rdn to attributes:::attrs->new->BasicAttributes->tv->attr->for->i->tvs->size->return
LdapName.TypeAndValue#toString()::: type and value to string:::return
LdapName.TypeAndValue#compareTo(Object)::: type and value compare to:::that->diff->type->compareToIgnoreCase->if->return->if->value->equals->return->return->getValueComparable->that->getValueComparable->compareTo
LdapName.TypeAndValue#equals(Object)::: type and value equals:::if->return->that->return->type->equalsIgnoreCase->value->equals->getValueComparable->that->getValueComparable->equals
LdapName.TypeAndValue#hashCode()::: type and value hash code:::return->type->toUpperCase->hashCode->getValueComparable->hashCode
LdapName.TypeAndValue#getType()::: type and value get type:::return
LdapName.TypeAndValue#getUnescapedValue()::: type and value get unescaped value:::return->unescapeValue
LdapName.TypeAndValue#getValueComparable()::: type and value get value comparable:::if->return->if->value->toUpperCase->else->unescapeValue->if->comparable->toUpperCase->return
LdapName.TypeAndValue#escapeValue(Object)::: type and value escape value:::return->escapeBinaryValue->escapeStringValue
LdapName.TypeAndValue#escapeStringValue(String)::: type and value escape string value:::escapees->chars->val->toCharArray->buf->val->length->new->StringBuffer->lead->for->trail->for->for->i->return->new->String
LdapName.TypeAndValue#escapeBinaryValue(byte[])::: type and value escape binary value:::buf->new->StringBuffer->buf->append->for->i->return->new->String->toUpperCase
LdapName.TypeAndValue#unescapeValue(String)::: type and value unescape value:::chars->val->toCharArray->beg->end->while->isWhitespace->while->isWhitespace->if->if->return->if->return->decodeHexPairs->if->buf->new->StringBuffer->esc->for->i->len->buf->length->if->buf->charAt->isWhitespace->buf->setLength->return->new->String
LdapName.TypeAndValue#decodeHexPairs(char[], int, int)::: type and value decode hex pairs:::bytes->new->byteArr->for->i->if->throw->new->String->new->IllegalArgumentException->return
LdapName.TypeAndValue#getUtf8Octets(char[], int, int)::: type and value get utf8 octets:::utf8->new->byteArr->len->while->hi->Character->digit->lo->Character->digit->if->break->if->return->else->res->new->byteArr->System->arraycopy->return
LdapNameParser#parse(String)::: ldap name parser parse:::return->new->LdapName
LdapNamingEnumeration#createItem(String, Attributes, Vector)::: ldap naming enumeration create item:::attr->className->if->attrs->get->attr->get->else->cn->new->CompositeName->cn->getAtom->add->ncp->if->cn->toString->homeCtx->convertControls->new->NameClassPairWithControls->else->cn->toString->new->NameClassPair->ncp->setNameInNamespace->return
LdapNamingEnumeration#getReferredResults(LdapReferralContext)::: ldap naming enumeration get referred results:::return->refCtx->list
LdapPoolManager#findPool(String):::Find the index of the pool for the specified mechanism:::if->equalsIgnoreCase->return->else->if->equalsIgnoreCase->return->else->if->equalsIgnoreCase->return->return
LdapPoolManager#isPoolingAllowed(String, OutputStream, String, String, Hashtable):::Determines whether pooling is allowed given information on how the connection will be used:::if->equalsIgnoreCase->d->return->COMPARATOR->foundSockCmp->if->socketFactory->equals->try->socketFactoryClass->loadClass->interfaces->socketFactoryClass->getInterfaces->for->i->catch->ce->new->CommunicationException->ce->setRootCause->throw->finally->if->return->p->findPool->if->d->return->d->switch->return->return->env->get->return
LdapPoolManager#getLdapClient(String, int, String, int, int, OutputStream, int, String, Control[], String, String, Object, Hashtable):::Obtains a pooled connection that either already exists or is newly created using the parameters supplied:::id->pool->p->findPool->if->throw->new->IllegalArgumentException->switch->new->ClientId->break->new->SimpleClientId->break->new->DigestClientId->break->return->pool->new->LdapClientFactory->getPooledConnection
LdapPoolManager#showStats(PrintStream)::: ldap pool manager show stats:::out->println->out->println->out->println->out->println->out->println->out->println->out->println->for->i->out->println
LdapPoolManager#expire(long):::Closes idle connections idle since specified time.:::for->i
LdapPoolManager#d d(String)::: ldap pool manager d:::if->println
LdapPoolManager#d d(String, String)::: ldap pool manager d:::if->println
LdapPoolManager#getProperty(String, String)::: ldap pool manager get property:::return->AccessController->new->PrivilegedAction<String>->doPrivileged
LdapPoolManager#getInteger(String, int)::: ldap pool manager get integer:::val->AccessController->new->PrivilegedAction<Integer>->doPrivileged->return->val->intValue
LdapPoolManager#getLong(String, long)::: ldap pool manager get long:::val->AccessController->new->PrivilegedAction<Long>->doPrivileged->return->val->longValue
LdapReferralContext#initDefaults(String, String)::: ldap referral context init defaults:::urlString->try->url->new->LdapURL->url->getDN->url->getAttributes->url->getScope->url->getFilter->catch->finally->if->else->if->else->urlString->equals->new->CompositeName->new->CompositeName->add
LdapReferralContext#close()::: ldap referral context close:::if->refCtx->close
LdapReferralContext#setHopCount(int)::: ldap referral context set hop count:::if->setHopCount
LdapReferralContext#lookup(String)::: ldap referral context lookup:::return->toName->lookup
LdapReferralContext#lookup(Name)::: ldap referral context lookup:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->overrideName->lookup
LdapReferralContext#bind(String, Object)::: ldap referral context bind:::toName->bind
LdapReferralContext#bind(Name, Object)::: ldap referral context bind:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->refCtx->overrideName->bind
LdapReferralContext#rebind(String, Object)::: ldap referral context rebind:::toName->rebind
LdapReferralContext#rebind(Name, Object)::: ldap referral context rebind:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->refCtx->overrideName->rebind
LdapReferralContext#unbind(String)::: ldap referral context unbind:::toName->unbind
LdapReferralContext#unbind(Name)::: ldap referral context unbind:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->refCtx->overrideName->unbind
LdapReferralContext#rename(String, String)::: ldap referral context rename:::toName->toName->rename
LdapReferralContext#rename(Name, Name)::: ldap referral context rename:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->refCtx->overrideName->refEx->getNewRdn->toName->rename
LdapReferralContext#list(String)::: ldap referral context list:::return->toName->list
LdapReferralContext#list(Name)::: ldap referral context list:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->try->ne->if->urlScope->equals->cons->new->SearchControls->cons->setReturningObjFlag->cons->setSearchScope->refCtx->overrideName->search->else->refCtx->overrideName->list->refEx->setNameResolved->appendUnprocessedReferrals->return->catch->e->appendUnprocessedReferrals->throw->e->fillInStackTrace->if->refEx->hasMoreReferrals->refEx->setNamingException->if->refEx->hasMoreReferrals->refEx->hasMoreReferralExceptions->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->else->throw->finally
LdapReferralContext#listBindings(String)::: ldap referral context list bindings:::return->toName->listBindings
LdapReferralContext#listBindings(Name)::: ldap referral context list bindings:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->try->be->if->urlScope->equals->cons->new->SearchControls->cons->setReturningObjFlag->cons->setSearchScope->refCtx->overrideName->search->else->refCtx->overrideName->listBindings->refEx->setNameResolved->appendUnprocessedReferrals->return->catch->e->appendUnprocessedReferrals->throw->e->fillInStackTrace->if->refEx->hasMoreReferrals->refEx->setNamingException->if->refEx->hasMoreReferrals->refEx->hasMoreReferralExceptions->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->else->throw->finally
LdapReferralContext#destroySubcontext(String)::: ldap referral context destroy subcontext:::toName->destroySubcontext
LdapReferralContext#destroySubcontext(Name)::: ldap referral context destroy subcontext:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->refCtx->overrideName->destroySubcontext
LdapReferralContext#createSubcontext(String)::: ldap referral context create subcontext:::return->toName->createSubcontext
LdapReferralContext#createSubcontext(Name)::: ldap referral context create subcontext:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->overrideName->createSubcontext
LdapReferralContext#lookupLink(String)::: ldap referral context lookup link:::return->toName->lookupLink
LdapReferralContext#lookupLink(Name)::: ldap referral context lookup link:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->overrideName->lookupLink
LdapReferralContext#getNameParser(String)::: ldap referral context get name parser:::return->toName->getNameParser
LdapReferralContext#getNameParser(Name)::: ldap referral context get name parser:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->overrideName->getNameParser
LdapReferralContext#composeName(String, String)::: ldap referral context compose name:::return->toName->toName->composeName->toString
LdapReferralContext#composeName(Name, Name)::: ldap referral context compose name:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->composeName
LdapReferralContext#addToEnvironment(String, Object)::: ldap referral context add to environment:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->addToEnvironment
LdapReferralContext#removeFromEnvironment(String)::: ldap referral context remove from environment:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->removeFromEnvironment
LdapReferralContext#getEnvironment()::: ldap referral context get environment:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->getEnvironment
LdapReferralContext#getAttributes(String)::: ldap referral context get attributes:::return->toName->getAttributes
LdapReferralContext#getAttributes(Name)::: ldap referral context get attributes:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->overrideName->getAttributes
LdapReferralContext#getAttributes(String, String[])::: ldap referral context get attributes:::return->toName->getAttributes
LdapReferralContext#getAttributes(Name, String[])::: ldap referral context get attributes:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->overrideName->getAttributes
LdapReferralContext#modifyAttributes(String, int, Attributes)::: ldap referral context modify attributes:::toName->modifyAttributes
LdapReferralContext#modifyAttributes(Name, int, Attributes)::: ldap referral context modify attributes:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->refCtx->overrideName->modifyAttributes
LdapReferralContext#modifyAttributes(String, ModificationItem[])::: ldap referral context modify attributes:::toName->modifyAttributes
LdapReferralContext#modifyAttributes(Name, ModificationItem[])::: ldap referral context modify attributes:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->refCtx->overrideName->modifyAttributes
LdapReferralContext#bind(String, Object, Attributes)::: ldap referral context bind:::toName->bind
LdapReferralContext#bind(Name, Object, Attributes)::: ldap referral context bind:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->refCtx->overrideName->bind
LdapReferralContext#rebind(String, Object, Attributes)::: ldap referral context rebind:::toName->rebind
LdapReferralContext#rebind(Name, Object, Attributes)::: ldap referral context rebind:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->refCtx->overrideName->rebind
LdapReferralContext#createSubcontext(String, Attributes)::: ldap referral context create subcontext:::return->toName->createSubcontext
LdapReferralContext#createSubcontext(Name, Attributes)::: ldap referral context create subcontext:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->overrideName->createSubcontext
LdapReferralContext#getSchema(String)::: ldap referral context get schema:::return->toName->getSchema
LdapReferralContext#getSchema(Name)::: ldap referral context get schema:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->overrideName->getSchema
LdapReferralContext#getSchemaClassDefinition(String)::: ldap referral context get schema class definition:::return->toName->getSchemaClassDefinition
LdapReferralContext#getSchemaClassDefinition(Name)::: ldap referral context get schema class definition:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->refCtx->overrideName->getSchemaClassDefinition
LdapReferralContext#search(String, Attributes)::: ldap referral context search:::return->toName->SearchFilter->format->new->SearchControls->search
LdapReferralContext#search(Name, Attributes)::: ldap referral context search:::return->SearchFilter->format->new->SearchControls->search
LdapReferralContext#search(String, Attributes, String[])::: ldap referral context search:::cons->new->SearchControls->cons->setReturningAttributes->return->toName->SearchFilter->format->search
LdapReferralContext#search(Name, Attributes, String[])::: ldap referral context search:::cons->new->SearchControls->cons->setReturningAttributes->return->SearchFilter->format->search
LdapReferralContext#search(String, String, SearchControls)::: ldap referral context search:::return->toName->search
LdapReferralContext#search(Name, String, SearchControls)::: ldap referral context search:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->try->se->refCtx->overrideName->overrideFilter->overrideAttributesAndScope->search->refEx->setNameResolved->appendUnprocessedReferrals->return->catch->e->appendUnprocessedReferrals->throw->e->fillInStackTrace->if->refEx->hasMoreReferrals->refEx->setNamingException->if->refEx->hasMoreReferrals->refEx->hasMoreReferralExceptions->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->else->throw->finally
LdapReferralContext#search(String, String, Object[], SearchControls)::: ldap referral context search:::return->toName->search
LdapReferralContext#search(Name, String, Object[], SearchControls)::: ldap referral context search:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->try->se->if->refCtx->overrideName->overrideAttributesAndScope->search->else->refCtx->overrideName->overrideAttributesAndScope->search->refEx->setNameResolved->appendUnprocessedReferrals->return->catch->e->appendUnprocessedReferrals->throw->e->fillInStackTrace->if->refEx->hasMoreReferrals->refEx->setNamingException->if->refEx->hasMoreReferrals->refEx->hasMoreReferralExceptions->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->else->throw->finally
LdapReferralContext#getNameInNamespace()::: ldap referral context get name in namespace:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->return->urlName->isEmpty->urlName->get
LdapReferralContext#extendedOperation(ExtendedRequest)::: ldap referral context extended operation:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->if->throw->new->NotContextException->return->extendedOperation
LdapReferralContext#newInstance(Control[])::: ldap referral context new instance:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->if->throw->new->NotContextException->return->newInstance
LdapReferralContext#reconnect(Control[])::: ldap referral context reconnect:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->if->throw->new->NotContextException->reconnect
LdapReferralContext#getConnectControls()::: ldap referral context get connect controls:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->if->throw->new->NotContextException->return->getConnectControls
LdapReferralContext#setRequestControls(Control[])::: ldap referral context set request controls:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->if->throw->new->NotContextException->setRequestControls
LdapReferralContext#getRequestControls()::: ldap referral context get request controls:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->if->throw->new->NotContextException->return->getRequestControls
LdapReferralContext#getResponseControls()::: ldap referral context get response controls:::if->throw->refEx->appendUnprocessedReferrals->fillInStackTrace->if->throw->new->NotContextException->return->getResponseControls
LdapReferralContext#toName(String)::: ldap referral context to name:::return->name->equals->new->CompositeName->new->CompositeName->add
LdapReferralContext#overrideName(Name)::: ldap referral context override name:::return
LdapReferralContext#overrideAttributesAndScope(SearchControls)::: ldap referral context override attributes and scope:::urlCons->if->cons->getSearchScope->cons->getCountLimit->cons->getTimeLimit->cons->getReturningAttributes->cons->getReturningObjFlag->cons->getDerefLinkFlag->new->SearchControls->if->if->urlScope->equals->urlCons->setSearchScope->else->if->urlScope->equals->urlCons->setSearchScope->else->if->urlScope->equals->urlCons->setSearchScope->if->tokens->new->StringTokenizer->count->tokens->countTokens->attrs->new->StringArr->for->i->urlCons->setReturningAttributes->return->else->return
LdapReferralContext#overrideFilter(String)::: ldap referral context override filter:::return
LdapReferralException#getReferralContext():::Gets a context at which to continue processing:::return->getReferralContext
LdapReferralException#getReferralContext(Hashtable):::Gets a context at which to continue processing:::return->getReferralContext
LdapReferralException#getReferralContext(Hashtable, Control[]):::Gets a context at which to continue processing:::if->println->refCtx->new->LdapReferralContext->refCtx->setHopCount->if->return
LdapReferralException#getReferralInfo():::Gets referral information.:::if->println->println->if->hasMoreReferrals->return->referrals->elementAt->else->return
LdapReferralException#retryReferral():::Marks the current referral as one to be retried.:::if->println->if
LdapReferralException#skipReferral():::Marks the current referral as one to be ignored:::if->println->try->getNextReferral->catch->finally->return->hasMoreReferrals->hasMoreReferralExceptions
LdapReferralException#setReferralInfo(Vector, boolean):::Sets referral information.:::if->println->referrals->size->if->if->for->i->else->println
LdapReferralException#getNextReferral():::Gets the next referral:::if->println->if->hasMoreReferrals->return->referrals->elementAt->else->if->hasMoreReferralExceptions->throw->else->return
LdapReferralException#appendUnprocessedReferrals(LdapReferralException):::Appends the supplied (chain of) referral exception onto the end of the current (chain of) referral exception:::if->println->dump->if->back->dump->front->if->front->hasMoreReferrals->if->front->setNamingException->if->return->if->back->hasMoreReferrals->if->return->ptr->while->return
LdapReferralException#hasMoreReferrals():::Tests if there are any referrals remaining to be processed:::if->println->return
LdapReferralException#hasMoreReferralExceptions():::Tests if there are any referral exceptions remaining to be processed.:::if->println->return
LdapReferralException#setHopCount(int):::Sets the counter which records the number of hops that result from following a sequence of referrals.:::if->println
LdapReferralException#setNameResolved(boolean):::Sets the flag to indicate that the target name has been resolved.:::if->println
LdapReferralException#setNamingException(NamingException):::Sets the exception generated while processing a referral:::if->println->if->e->setRootCause
LdapReferralException#getNewRdn():::Gets the new RDN name.:::if->println->return
LdapReferralException#setNewRdn(String):::Sets the new RDN name so that the rename operation can be completed (when a referral is being followed).:::if->println
LdapReferralException#getNamingException():::Gets the exception generated while processing a referral.:::if->println->return
LdapReferralException#dump():::Display the state of each element in a chain of LdapReferralException objects.:::println->println->ptr->while->ptr->dumpState
LdapReferralException#dumpState():::Display the state of this LdapReferralException object.:::println->hashCode->println->println->println->println->if->println->for->i->else->println->println->if->println->else->nextReferralEx->hashCode->println->println
LdapRequest#cancel()::: ldap request cancel:::replies->offer
LdapRequest#close()::: ldap request close:::replies->offer
LdapRequest#isClosed()::: ldap request is closed:::return->replies->size->replies->peek
LdapRequest#addReplyBer(BerDecoder)::: ldap request add reply ber:::if->return->try->ber->parseSeq->ber->parseInt->ber->peekByte->catch->finally->ber->reset->try->replies->put->catch->finally->return
LdapRequest#getReplyBer(long)::: ldap request get reply ber:::if->throw->new->CommunicationException->if->isClosed->return->result->replies->poll->replies->take->if->throw->new->CommunicationException->return
LdapRequest#hasSearchCompleted()::: ldap request has search completed:::return
LdapResult#compareToSearchResult(String)::: ldap result compare to search result:::successful->switch->new->Vector<>->attrs->new->BasicAttributes->entry->new->LdapEntry->entries->addElement->break->new->Vector<>->break->break->return
LdapSchemaCtx#createSchemaTree(Hashtable, String, LdapCtx, Attributes, boolean)::: ldap schema ctx create schema tree:::try->parser->new->LdapSchemaParser->allinfo->new->SchemaInfo->root->new->LdapSchemaCtx->LdapSchemaParser->LDAP2JNDISchema->return->catch->schemaEntry->close->throw->finally
LdapSchemaCtx#close()::: ldap schema ctx close:::info->close
LdapSchemaCtx#bind(Name, Object, Attributes)::: ldap schema ctx bind:::if->if->throw->new->IllegalArgumentException->addServerSchema->newEntry->super->doCreateSubcontext
LdapSchemaCtx#doBind(Name, Object, Attributes, boolean)::: ldap schema ctx do bind:::if->throw->new->SchemaViolationException->else->super->doBind
LdapSchemaCtx#rebind(Name, Object, Attributes)::: ldap schema ctx rebind:::try->doLookup->throw->new->SchemaViolationException->catch->bind->finally
LdapSchemaCtx#doRebind(Name, Object, Attributes, boolean)::: ldap schema ctx do rebind:::if->throw->new->SchemaViolationException->else->super->doRebind
LdapSchemaCtx#doUnbind(Name)::: ldap schema ctx do unbind:::if->try->target->doLookup->deleteServerSchema->catch->return->finally->super->doUnbind
LdapSchemaCtx#doRename(Name, Name)::: ldap schema ctx do rename:::if->throw->new->SchemaViolationException->else->super->doRename
LdapSchemaCtx#doDestroySubcontext(Name)::: ldap schema ctx do destroy subcontext:::if->try->target->doLookup->deleteServerSchema->catch->return->finally->super->doDestroySubcontext
LdapSchemaCtx#setup(int, String, Attributes)::: ldap schema ctx setup:::try->answer->super->new->CompositeName->doCreateSubcontext->return->catch->finally
LdapSchemaCtx#doCreateSubcontext(Name, Attributes)::: ldap schema ctx do create subcontext:::if->attrs->size->throw->new->SchemaViolationException->if->addServerSchema->newEntry->super->doCreateSubcontext->return
LdapSchemaCtx#deepClone(Attributes)::: ldap schema ctx deep clone:::copy->new->BasicAttributes->attrs->orig->getAll->while->attrs->hasMore->copy->attrs->next->clone->put->return
LdapSchemaCtx#doModifyAttributes(ModificationItem[])::: ldap schema ctx do modify attributes:::if->super->doModifyAttributes->else->copy->deepClone->applyMods->modifyServerSchema
LdapSchemaCtx#createNewCtx()::: ldap schema ctx create new ctx:::ctx->new->LdapSchemaCtx->return
LdapSchemaCtx#addServerSchema(Attributes)::: ldap schema ctx add server schema:::schemaAttr->switch->stringifyObjDesc->break->stringifyAttrDesc->break->stringifySyntaxDesc->break->stringifyMatchRuleDesc->break->throw->new->SchemaViolationException->throw->new->SchemaViolationException->holder->new->BasicAttributes->holder->put->info->modifyAttributes
LdapSchemaCtx#deleteServerSchema(Attributes):::When we delete an entry, we use the original to make sure that any formatting inconsistencies are eliminated:::origAttrVal->switch->stringifyObjDesc->break->stringifyAttrDesc->break->stringifySyntaxDesc->break->stringifyMatchRuleDesc->break->throw->new->SchemaViolationException->throw->new->SchemaViolationException->mods->new->ModificationItemArr->new->ModificationItem->info->modifyAttributes
LdapSchemaCtx#modifyServerSchema(Attributes, Attributes):::When we modify an entry, we use the original attribute value in the schema to make sure that any formatting inconsistencies are eliminated:::newAttrVal->origAttrVal->switch->stringifyObjDesc->stringifyObjDesc->break->stringifyAttrDesc->stringifyAttrDesc->break->stringifySyntaxDesc->stringifySyntaxDesc->break->stringifyMatchRuleDesc->stringifyMatchRuleDesc->break->throw->new->SchemaViolationException->mods->new->ModificationItemArr->new->ModificationItem->new->ModificationItem->info->modifyAttributes
LdapSchemaCtx.SchemaInfo#close()::: schema info close:::if->schemaEntry->close
LdapSchemaCtx.SchemaInfo#reopenEntry(Hashtable)::: schema info reopen entry:::return->new->LdapCtx
LdapSchemaCtx.SchemaInfo#modifyAttributes(Hashtable, ModificationItem[])::: schema info modify attributes:::if->reopenEntry->schemaEntry->modifyAttributes
LdapSchemaCtx.SchemaInfo#modifyAttributes(Hashtable, int, Attributes)::: schema info modify attributes:::if->reopenEntry->schemaEntry->modifyAttributes
LdapSchemaParser#LDAP2JNDISchema(Attributes, LdapSchemaCtx)::: ldap schema parser  p2 schema:::objectClassesAttr->attributeDefAttr->syntaxDefAttr->matchRuleDefAttr->schemaAttrs->get->if->objectDescs2ClassDefs->schemaAttrs->get->if->attrDescs2AttrDefs->schemaAttrs->get->if->syntaxDescs2SyntaxDefs->schemaAttrs->get->if->matchRuleDescs2MatchRuleDefs
LdapSchemaParser#objectDescs2ClassDefs(Attribute, LdapSchemaCtx)::: ldap schema parser object descs2 class defs:::objDescs->objDef->classDefTree->attrs->new->BasicAttributes->attrs->put->schemaRoot->setup->objDescsAttr->getAll->currentName->while->objDescs->hasMore->objDesc->objDescs->next->try->def->desc2Def->classDefTree->setup->catch->finally->return
LdapSchemaParser#attrDescs2AttrDefs(Attribute, LdapSchemaCtx)::: ldap schema parser attr descs2 attr defs:::attrDescs->attrDef->attrDefTree->attrs->new->BasicAttributes->attrs->put->schemaRoot->setup->attributeDescAttr->getAll->currentName->while->attrDescs->hasMore->attrDesc->attrDescs->next->try->def->desc2Def->attrDefTree->setup->catch->finally->return
LdapSchemaParser#syntaxDescs2SyntaxDefs(Attribute, LdapSchemaCtx)::: ldap schema parser syntax descs2 syntax defs:::syntaxDescs->syntaxDef->syntaxDefTree->attrs->new->BasicAttributes->attrs->put->schemaRoot->setup->syntaxDescAttr->getAll->currentName->while->syntaxDescs->hasMore->syntaxDesc->syntaxDescs->next->try->def->desc2Def->syntaxDefTree->setup->catch->finally->return
LdapSchemaParser#matchRuleDescs2MatchRuleDefs(Attribute, LdapSchemaCtx)::: ldap schema parser match rule descs2 match rule defs:::matchRuleDescs->matchRuleDef->matchRuleDefTree->attrs->new->BasicAttributes->attrs->put->schemaRoot->setup->matchRuleDescAttr->getAll->currentName->while->matchRuleDescs->hasMore->matchRuleDesc->matchRuleDescs->next->try->def->desc2Def->matchRuleDefTree->setup->catch->finally->return
LdapSchemaParser#desc2Def(String)::: ldap schema parser desc2 def:::attrs->new->BasicAttributes->attr->pos->new->intArr->moreTags->readNumericOID->currentName->attr->get->attrs->put->skipWhitespace->while->readNextTag->attrs->put->if->attr->getID->equals->attr->get->skipWhitespace->if->desc->length->return->new->ObjectArr
LdapSchemaParser#findTrailingWhitespace(String, int)::: ldap schema parser find trailing whitespace:::for->i->return
LdapSchemaParser#skipWhitespace(String, int[])::: ldap schema parser skip whitespace:::for->i->string->length
LdapSchemaParser#readNumericOID(String, int[])::: ldap schema parser read numeric d:::if->println->begin->end->value->skipWhitespace->string->indexOf->if->throw->new->InvalidAttributeValueException->string->substring->value->length->return->new->BasicAttribute
LdapSchemaParser#readNextTag(String, int[])::: ldap schema parser read next tag:::attr->tagName->values->skipWhitespace->if->println->trailingSpace->string->indexOf->if->string->string->length->substring->else->string->substring->readTag->if->throw->new->InvalidAttributeValueException->new->BasicAttribute->for->i->return
LdapSchemaParser#readTag(String, String, int[])::: ldap schema parser read tag:::if->println->tag->length->skipWhitespace->if->tag->equals->return->readQDescrs->if->tag->equals->return->readQDString->if->tag->equals->tag->equals->tag->equals->tag->equals->return->readWOID->if->tag->equals->tag->equals->tag->equals->tag->equals->tag->equals->tag->equals->tag->equals->return->new->StringArr->if->tag->equals->tag->equals->tag->equals->tag->equals->return->readOIDs->return->readQDStrings
LdapSchemaParser#readQDString(String, int[])::: ldap schema parser read string:::begin->end->string->indexOf->string->indexOf->if->println->if->throw->new->InvalidAttributeIdentifierException->if->string->charAt->throw->new->InvalidAttributeIdentifierException->return->new->StringArr->string->substring
LdapSchemaParser#readQDStrings(String, int[]):::dstring         = 1*utf8 qdstring        = whsp "'" dstring "'" whsp qdstringlist    = [ qdstring *( qdstring ) ] qdstrings       = qdstring / ( whsp "(" qdstringlist ")" whsp ):::return->readQDescrs
LdapSchemaParser#readQDescrs(String, int[]):::; object descriptors used as schema element names qdescrs         = qdescr / ( whsp "(" qdescrlist ")" whsp ) qdescrlist      = [ qdescr *( qdescr ) ] qdescr          = whsp "'" descr "'" whsp descr           = keystring:::if->println->skipWhitespace->switch->string->charAt->return->readQDescrList->return->readQDString->throw->new->InvalidAttributeValueException
LdapSchemaParser#readQDescrList(String, int[]):::qdescrlist      = [ qdescr *( qdescr ) ] qdescr          = whsp "'" descr "'" whsp descr           = keystring:::begin->end->values->new->Vector<>->if->println->skipWhitespace->string->indexOf->if->throw->new->InvalidAttributeValueException->while->one->readQDString->if->println->values->addElement->skipWhitespace->answer->values->size->new->StringArr->for->i->return
LdapSchemaParser#readWOID(String, int[])::: ldap schema parser read d:::if->println->skipWhitespace->if->string->charAt->return->readQDString->begin->end->string->indexOf->if->println->if->throw->new->InvalidAttributeIdentifierException->return->new->StringArr->string->substring
LdapSchemaParser#readOIDs(String, int[])::: ldap schema parser read ds:::if->println->skipWhitespace->if->string->charAt->return->readWOID->begin->cur->end->oidName->values->new->Vector<>->if->println->skipWhitespace->string->indexOf->string->indexOf->if->throw->new->InvalidAttributeValueException->if->while->wsBegin->findTrailingWhitespace->string->substring->if->println->values->addElement->skipWhitespace->string->indexOf->if->println->if->println->wsBegin->findTrailingWhitespace->string->substring->values->addElement->answer->values->size->new->StringArr->for->i->return
LdapSchemaParser#classDef2ObjectDesc(Attributes):::Translate attributes that describe an object class into the string description as defined in RFC 2252.:::objectDesc->new->StringBuilder->attr->count->attrs->get->if->objectDesc->writeNumericOID->append->else->throw->new->ConfigurationException->attrs->get->if->objectDesc->writeQDescrs->append->attrs->get->if->objectDesc->writeQDString->append->attrs->get->if->objectDesc->writeBoolean->append->attrs->get->if->objectDesc->writeOIDs->append->attrs->get->if->objectDesc->writeBoolean->append->attrs->get->if->objectDesc->writeBoolean->append->attrs->get->if->objectDesc->writeBoolean->append->attrs->get->if->objectDesc->writeOIDs->append->attrs->get->if->objectDesc->writeOIDs->append->if->attrs->size->attrId->for->ae->attrs->getAll->ae->hasMoreElements->objectDesc->append->return->objectDesc->toString
LdapSchemaParser#attrDef2AttrDesc(Attributes):::Translate attributes that describe an attribute definition into the string description as defined in RFC 2252.:::attrDesc->new->StringBuilder->attr->count->attrs->get->if->attrDesc->writeNumericOID->append->else->throw->new->ConfigurationException->attrs->get->if->attrDesc->writeQDescrs->append->attrs->get->if->attrDesc->writeQDString->append->attrs->get->if->attrDesc->writeBoolean->append->attrs->get->if->attrDesc->writeWOID->append->attrs->get->if->attrDesc->writeWOID->append->attrs->get->if->attrDesc->writeWOID->append->attrs->get->if->attrDesc->writeWOID->append->attrs->get->if->attrDesc->writeWOID->append->attrs->get->if->attrDesc->writeBoolean->append->attrs->get->if->attrDesc->writeBoolean->append->attrs->get->if->attrDesc->writeBoolean->append->attrs->get->if->attrDesc->writeQDString->append->if->attrs->size->attrId->for->ae->attrs->getAll->ae->hasMoreElements->attrDesc->append->return->attrDesc->toString
LdapSchemaParser#syntaxDef2SyntaxDesc(Attributes):::Translate attributes that describe an attribute syntax definition into the string description as defined in RFC 2252.:::syntaxDesc->new->StringBuilder->attr->count->attrs->get->if->syntaxDesc->writeNumericOID->append->else->throw->new->ConfigurationException->attrs->get->if->syntaxDesc->writeQDString->append->if->attrs->size->attrId->for->ae->attrs->getAll->ae->hasMoreElements->syntaxDesc->append->return->syntaxDesc->toString
LdapSchemaParser#matchRuleDef2MatchRuleDesc(Attributes):::Translate attributes that describe an attribute matching rule definition into the string description as defined in RFC 2252.:::matchRuleDesc->new->StringBuilder->attr->count->attrs->get->if->matchRuleDesc->writeNumericOID->append->else->throw->new->ConfigurationException->attrs->get->if->matchRuleDesc->writeQDescrs->append->attrs->get->if->matchRuleDesc->writeQDString->append->attrs->get->if->matchRuleDesc->writeBoolean->append->attrs->get->if->matchRuleDesc->writeWOID->append->else->throw->new->ConfigurationException->if->attrs->size->attrId->for->ae->attrs->getAll->ae->hasMoreElements->matchRuleDesc->append->return->matchRuleDesc->toString
LdapSchemaParser#writeNumericOID(Attribute)::: ldap schema parser write numeric d:::if->nOIDAttr->size->throw->new->InvalidAttributeValueException->return->nOIDAttr->get
LdapSchemaParser#writeWOID(Attribute)::: ldap schema parser write d:::if->return->writeQDString->else->return->attr->getID->attr->get
LdapSchemaParser#writeQDString(Attribute)::: ldap schema parser write string:::if->qdStringAttr->size->throw->qdStringAttr->getID->new->InvalidAttributeValueException->return->qdStringAttr->getID->qdStringAttr->get
LdapSchemaParser#writeQDStrings(Attribute):::dstring         = 1*utf8 qdstring        = whsp "'" dstring "'" whsp qdstringlist    = [ qdstring *( qdstring ) ] qdstrings       = qdstring / ( whsp "(" qdstringlist ")" whsp ):::return->writeQDescrs
LdapSchemaParser#writeQDescrs(Attribute):::qdescrs         = qdescr / ( whsp "(" qdescrlist ")" whsp ) qdescrlist      = [ qdescr *( qdescr ) ] qdescr          = whsp "'" descr "'" whsp descr           = keystring:::switch->attr->size->throw->attr->getID->new->InvalidAttributeValueException->return->writeQDString->qdList->attr->getID->new->StringBuilder->qdList->append->qdList->append->values->attr->getAll->while->values->hasMore->qdList->append->qdList->append->qdList->values->next->append->qdList->append->qdList->append->qdList->append->qdList->append->return->qdList->toString
LdapSchemaParser#writeOIDs(Attribute)::: ldap schema parser write ds:::switch->oidsAttr->size->throw->oidsAttr->getID->new->InvalidAttributeValueException->if->break->return->writeWOID->oidList->oidsAttr->getID->new->StringBuilder->oidList->append->oidList->append->values->oidsAttr->getAll->oidList->append->oidList->values->next->append->while->values->hasMore->oidList->append->oidList->append->oidList->append->oidList->values->next->append->oidList->append->oidList->append->oidList->append->return->oidList->toString
LdapSchemaParser#writeBoolean(Attribute)::: ldap schema parser write boolean:::return->booleanAttr->getID
LdapSchemaParser#stringifyObjDesc(Attributes):::Returns an attribute for updating the Object Class Definition schema attribute:::objDescAttr->new->BasicAttribute->objDescAttr->classDef2ObjectDesc->add->return
LdapSchemaParser#stringifyAttrDesc(Attributes):::Returns an attribute for updating the Attribute Definition schema attribute:::attrDescAttr->new->BasicAttribute->attrDescAttr->attrDef2AttrDesc->add->return
LdapSchemaParser#stringifySyntaxDesc(Attributes):::Returns an attribute for updating the Syntax schema attribute:::syntaxDescAttr->new->BasicAttribute->syntaxDescAttr->syntaxDef2SyntaxDesc->add->return
LdapSchemaParser#stringifyMatchRuleDesc(Attributes):::Returns an attribute for updating the Matching Rule schema attribute:::matchRuleDescAttr->new->BasicAttribute->matchRuleDescAttr->matchRuleDef2MatchRuleDesc->add->return
LdapSearchEnumeration#createItem(String, Attributes, Vector)::: ldap search enumeration create item:::obj->relStart->relHome->relative->try->parsed->new->LdapName->if->parsed->startsWith->parsed->startName->size->getSuffix->toString->parsed->size->getSuffix->toString->else->LdapURL->toUrlString->catch->LdapURL->toUrlString->finally->cn->new->CompositeName->if->relStart->equals->cn->add->rcn->new->CompositeName->if->relHome->equals->rcn->add->homeCtx->setParents->if->getReturningObjFlag->if->attrs->get->try->AccessController->new->PrivilegedExceptionAction<Object>->doPrivileged->catch->throw->e->getException->finally->if->new->LdapCtx->try->DirectoryManager->getObjectInstance->catch->throw->ne->new->NamingException->ne->setRootCause->throw->finally->reqAttrs->if->rattrs->new->BasicAttributes->for->i->for->i->sr->if->cn->toString->homeCtx->convertControls->new->SearchResultWithControls->else->cn->toString->new->SearchResult->sr->setNameInNamespace->return
LdapSearchEnumeration#appendUnprocessedReferrals(LdapReferralException)::: ldap search enumeration append unprocessed referrals:::super->appendUnprocessedReferrals
LdapSearchEnumeration#getReferredResults(LdapReferralContext)::: ldap search enumeration get referred results:::return->refCtx->search
LdapSearchEnumeration#update(AbstractLdapNamingEnumeration)::: ldap search enumeration update:::super->update->se
LdapSearchEnumeration#setStartName(Name)::: ldap search enumeration set start name:::
LdapURL#useSsl():::Returns true if the URL is an LDAPS URL.:::return
LdapURL#getDN():::Returns the LDAP URL's distinguished name.:::return
LdapURL#getAttributes():::Returns the LDAP URL's attributes.:::return
LdapURL#getScope():::Returns the LDAP URL's scope.:::return
LdapURL#getFilter():::Returns the LDAP URL's filter.:::return
LdapURL#getExtensions():::Returns the LDAP URL's extensions.:::return
LdapURL#fromList(String):::Given a space-separated list of LDAP URLs, returns an array of strings.:::urls->urlList->length->new->StringArr->i->st->new->StringTokenizer->while->st->hasMoreTokens->st->nextToken->trimmed->new->StringArr->System->arraycopy->return
LdapURL#hasQueryComponents(String):::Determines whether an LDAP URL has query components.:::return->url->lastIndexOf
LdapURL#toUrlString(String, int, String, boolean)::: ldap l to url string:::try->h->if->h->indexOf->h->charAt->p->d->UrlUtil->encode->return->catch->throw->new->IllegalStateException->finally
LdapURL#parsePathAndQuery()::: ldap l parse path and query:::if->path->equals->return->path->startsWith->path->substring->if->DN->length->UrlUtil->decode->if->query->length->return->currentIndex->nextQmark->endIndex->query->indexOf->query->length->if->query->substring->if->query->length->return->query->indexOf->query->length->if->query->substring->if->query->length->return->query->indexOf->query->length->if->query->substring->UrlUtil->decode->if->query->length->return->if->query->length->query->substring->UrlUtil->decode
NameClassPairWithControls#getControls()::: name class pair with controls get controls:::return
NamingEventNotifier#addNamingListener(NamingListener)::: naming event notifier add naming listener:::namingListeners->addElement
NamingEventNotifier#removeNamingListener(NamingListener)::: naming event notifier remove naming listener:::namingListeners->removeElement
NamingEventNotifier#hasNamingListeners()::: naming event notifier has naming listeners:::return->namingListeners->size
NamingEventNotifier#run():::Execute "persistent search":::try->cont->new->Continuation->cont->setError->nm->equals->new->CompositeName->new->CompositeName->add->context->searchAux->setStartName->si->respctls->ec->changeNum->while->results->hasMore->results->next->getControls->if->println->println->if->for->i->catch->if->println->fireNamingException->support->removeDeadNotifier->finally->cleanup->if->println
NamingEventNotifier#cleanup()::: naming event notifier cleanup:::if->println->try->if->if->println->results->close->if->if->println->context->close->catch->finally
NamingEventNotifier#stop():::Stop the dispatcher so we can be destroyed:::if->println->if->worker->interrupt
NamingEventNotifier#fireObjectAdded(Binding, long):::Fire an "object added" event to registered NamingListeners.:::if->namingListeners->size->return->e->new->NamingEvent->support->queueEvent
NamingEventNotifier#fireObjectRemoved(Binding, long):::Fire an "object removed" event to registered NamingListeners.:::if->namingListeners->size->return->e->new->NamingEvent->support->queueEvent
NamingEventNotifier#fireObjectChanged(Binding, long):::Fires an "object changed" event to registered NamingListeners.:::if->namingListeners->size->return->oldBd->newBd->getName->newBd->isRelative->new->Binding->e->new->NamingEvent->support->queueEvent
NamingEventNotifier#fireObjectRenamed(Binding, String, long):::Fires an "object renamed" to registered NamingListeners.:::if->namingListeners->size->return->oldBd->try->dn->new->LdapName->if->dn->startsWith->relDN->dn->size->getSuffix->toString->new->Binding->catch->finally->if->new->Binding->e->new->NamingEvent->support->queueEvent
NamingEventNotifier#fireNamingException(NamingException)::: naming event notifier fire naming exception:::if->namingListeners->size->return->evt->new->NamingExceptionEvent->support->queueEvent
NotifierArgs#equals(Object)::: notifier args equals:::if->target->return->name->equals->filter->equals->checkControls->return
NotifierArgs#checkControls(SearchControls)::: notifier args check controls:::if->return->return->controls->getSearchScope->ctls->getSearchScope->controls->getTimeLimit->ctls->getTimeLimit->controls->getDerefLinkFlag->ctls->getDerefLinkFlag->controls->getReturningObjFlag->ctls->getReturningObjFlag->controls->getCountLimit->ctls->getCountLimit->controls->getReturningAttributes->ctls->getReturningAttributes->checkStringArrays
NotifierArgs#checkStringArrays(String[], String[])::: notifier args check string arrays:::if->return->if->return->for->i->return
NotifierArgs#hashCode()::: notifier args hash code:::if->name->hashCode->filter->hashCode->controlsCode->return
NotifierArgs#controlsCode()::: notifier args controls code:::if->return->total->controls->getTimeLimit->controls->getCountLimit->controls->getDerefLinkFlag->controls->getReturningObjFlag->attrs->controls->getReturningAttributes->if->for->i->return
Obj#encodeObject(char, Object, Attributes, Attribute, boolean):::Encode an object in LDAP attributes:::structural->objectClass->size->objectClass->size->objectClass->contains->if->objectClass->add->if->objectClass->add->objectClass->add->if->attrs->clone->attrs->put->return->getReference->encodeReference->else->if->objectClass->add->objectClass->add->if->attrs->clone->attrs->put->return->encodeReference->else->if->objectClass->add->if->objectClass->contains->objectClass->contains->objectClass->add->if->attrs->clone->attrs->put->attrs->serializeObject->new->BasicAttribute->put->if->attrs->get->attrs->obj->getClass->getName->put->if->attrs->get->tAttr->LdapCtxFactory->obj->getClass->createTypeNameAttr->if->attrs->put->else->if->else->throw->new->IllegalArgumentException->return
Obj#getCodebases(Attribute):::Each value in javaCodebase contains a list of space-separated URLs:::if->return->else->parser->codebaseAttr->get->new->StringTokenizer->vec->new->Vector<>->while->parser->hasMoreTokens->vec->parser->nextToken->addElement->answer->vec->size->new->StringArr->for->i->return
Obj#decodeObject(Attributes)::: obj decode object:::attr->codebases->attrs->get->getCodebases->try->if->attrs->get->cl->helper->getURLClassLoader->return->attr->get->deserializeObject->else->if->attrs->get->return->attrs->get->get->attr->get->decodeRmiObject->attrs->get->if->attr->contains->attr->contains->return->decodeReference->return->catch->ne->new->NamingException->ne->setRootCause->throw->finally
Obj#encodeReference(char, Reference, Attributes, Object)::: obj encode reference:::if->return->s->if->ref->getClassName->attrs->new->BasicAttribute->put->if->ref->getFactoryClassName->attrs->new->BasicAttribute->put->if->ref->getFactoryClassLocation->attrs->new->BasicAttribute->put->if->attrs->get->tAttr->LdapCtxFactory->orig->getClass->createTypeNameAttr->if->attrs->put->count->ref->size->if->refAttr->new->BasicAttribute->refAddr->encoder->for->i->attrs->put->return
Obj#decodeRmiObject(String, String, String[])::: obj decode rmi object:::return->new->StringRefAddr->new->Reference
Obj#decodeReference(Attributes, String[])::: obj decode reference:::attr->className->factory->if->attrs->get->attr->get->else->throw->new->InvalidAttributesException->if->attrs->get->attr->get->ref->new->Reference->if->attrs->get->val->posnStr->type->separator->start->sep->posn->decoder->cl->helper->getURLClassLoader->refAddrList->new->Vector<>->refAddrList->attr->size->setSize->for->vals->attr->getAll->vals->hasMore->for->i->refAddrList->size->return
Obj#serializeObject(Object)::: obj serialize object:::try->bytes->new->ByteArrayOutputStream->try->serial->new->ObjectOutputStream->serial->writeObject->catch->finally->return->bytes->toByteArray->catch->ne->new->NamingException->ne->setRootCause->throw->finally
Obj#deserializeObject(byte[], ClassLoader)::: obj deserialize object:::try->bytes->new->ByteArrayInputStream->try->deserial->new->ObjectInputStream->new->LoaderInputStream->return->deserial->readObject->catch->ne->new->NamingException->ne->setRootCause->throw->finally->catch->ne->new->NamingException->ne->setRootCause->throw->finally
Obj#determineBindAttrs(char, Object, Attributes, boolean, Name, Context, Hashtable):::Returns the attributes to bind given an object and its attributes.:::res->DirectoryManager->getStateToBind->res->getObject->res->getAttributes->if->return->if->getAttributes->ocNeedsCloning->objectClass->if->attrs->size->new->BasicAttributes->new->BasicAttribute->else->attrs->get->if->attrs->isCaseIgnored->attrs->get->if->new->BasicAttribute->else->if->objectClass->clone->encodeObject->return
Obj.LoaderInputStream#resolveClass(ObjectStreamClass)::: loader input stream resolve class:::try->return->classLoader->desc->getName->loadClass->catch->return->super->resolveClass->finally
Obj.LoaderInputStream#resolveProxyClass(String[])::: loader input stream resolve proxy class:::nonPublicLoader->hasNonPublicInterface->classObjs->new->Class<?>Arr->for->i->try->proxyClass->Proxy->getProxyClass->return->catch->throw->new->ClassNotFoundException->finally
PersistentSearchControl#setEncodedValue()::: persistent search control set encoded value:::ber->new->BerEncoder->ber->beginSeq->ber->encodeInt->ber->encodeBoolean->ber->encodeBoolean->ber->endSeq->return->ber->getTrimmedBuf
ReferralEnumeration#appendUnprocessedReferrals(LdapReferralException)::: referral enumeration append unprocessed referrals:::
SearchResultWithControls#getControls()::: search result with controls get controls:::return
ServiceLocator#mapDnToDomainName(String):::Maps a distinguished name (RFC 2253) to a fully qualified domain name:::if->return->domain->new->StringBuilder->ldapName->new->LdapName->rdnList->ldapName->getRdns->for->i->rdnList->size->return->domain->length->domain->toString
ServiceLocator#getLdapService(String, Hashtable):::Locates the LDAP service for a given domain:::if->domainName->length->return->dnsUrl->hostports->try->ctx->NamingManager->getURLContext->if->return->attrs->getAttributes->attr->if->attrs->get->numValues->attr->size->numRecords->srvRecords->new->SrvRecordArr->i->j->while->try->attr->get->new->SrvRecord->catch->finally->if->trimmed->new->SrvRecordArr->System->arraycopy->if->Arrays->sort->extractHostports->catch->finally->return
ServiceLocator#extractHostports(SrvRecord[]):::Extract hosts and port numbers from a list of SRV records:::hostports->head->tail->sublistLength->k->for->i->return
ServiceLocator#selectHostport(SrvRecord[], int, int)::: service locator select hostport:::if->return->sum->for->i->hostport->target->random->nextInt->for->i->return
ServiceLocator.SrvRecord#compareTo(SrvRecord)::: srv record compare to:::if->return->else->if->return->else->if->return->else->if->return->else->return
SimpleClientId#equals(Object)::: simple client id equals:::if->return->other->return->super->equals->username->equals->passwd->equals->Arrays->equals->Arrays->equals
SimpleClientId#hashCode()::: simple client id hash code:::return
SimpleClientId#toString()::: simple client id to string:::return->super->toString
UnsolicitedResponseImpl#getID():::Retrieves the object identifier of the response.:::return
UnsolicitedResponseImpl#getEncodedValue():::Retrieves the ASN.1 BER encoded value of the LDAP extended operation response:::return
UnsolicitedResponseImpl#getReferrals():::Retrieves the referral(s) sent by the server.:::return
UnsolicitedResponseImpl#getException():::Retrieves the exception as constructed using information sent by the server.:::return
UnsolicitedResponseImpl#getControls()::: unsolicited response impl get controls:::return
VersionHelper#getVersionHelper()::: version helper get version helper:::return
VersionHelper#getURLClassLoader(String[])::: version helper get class loader:::parent->getContextClassLoader->if->return->URLClassLoader->getUrlArray->newInstance->else->return
VersionHelper#loadClass(String)::: version helper load class:::return->Class->getContextClassLoader->forName
VersionHelper#createThread(Runnable)::: version helper create thread:::acc->AccessController->getContext->act->SharedSecrets->getJavaLangAccess->newThreadWithAcc->return->AccessController->doPrivileged
VersionHelper#getContextClassLoader()::: version helper get context class loader:::act->Thread->currentThread->getContextClassLoader->return->AccessController->doPrivileged
VersionHelper#getUrlArray(String[])::: version helper get url array:::urlArray->new->URLArr->for->i->return

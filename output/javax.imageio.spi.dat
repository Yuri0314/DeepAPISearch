DigraphNode#getData():::Returns the Object referenced by this node.:::return
DigraphNode#getOutNodes():::Returns an Iterator containing the nodes pointed to by this node.:::return->outNodes->iterator
DigraphNode#addEdge(DigraphNode):::Adds a directed edge to the graph:::if->outNodes->contains->return->outNodes->add->add->node->incrementInDegree->return
DigraphNode#hasEdge(DigraphNode):::Returns true if an edge exists between this node and the given node.:::return->outNodes->contains
DigraphNode#removeEdge(DigraphNode):::Removes a directed edge from the graph:::if->outNodes->contains->return->outNodes->remove->remove->node->decrementInDegree->return
DigraphNode#dispose():::Removes this node from the graph, updating neighboring nodes appropriately.:::inNodesArray->inNodes->toArray->for->i->outNodesArray->outNodes->toArray->for->i
DigraphNode#getInDegree():::Returns the in-degree of this node.:::return
IIORegistry#getDefaultInstance():::Returns the default IIORegistry instance used by the Image I/O API:::context->AppContext->getAppContext->registry->context->get->if->new->IIORegistry->context->put->return
IIORegistry#registerApplicationClasspathSpis():::Registers all available service providers found on the application class path, using the default ClassLoader:::loader->Thread->currentThread->getContextClassLoader->categories->getCategories->while->categories->hasNext->c->categories->next->riter->ServiceLoader->load->iterator->while->riter->hasNext->try->r->riter->next->registerServiceProvider->catch->if->System->getSecurityManager->err->printStackTrace->else->throw->finally
IIOServiceProvider#onRegistration(ServiceRegistry, Class):::A callback that will be called exactly once after the Spi class has been instantiated and registered in a ServiceRegistry:::
IIOServiceProvider#onDeregistration(ServiceRegistry, Class):::A callback that will be whenever the Spi class has been deregistered from a ServiceRegistry:::
IIOServiceProvider#getVendorName():::Returns the name of the vendor responsible for creating this service provider and its associated implementation:::return
IIOServiceProvider#getVersion():::Returns a string describing the version number of this service provider and its associated implementation:::return
IIOServiceProvider#getDescription(Locale):::Returns a brief, human-readable description of this service provider and its associated implementation:::
ImageInputStreamSpi#getInputClass():::Returns a Class object representing the class or interface type that must be implemented by an input source in order to be "wrapped" in an ImageInputStream via the createInputStreamInstance method:::return
ImageInputStreamSpi#canUseCacheFile():::Returns true if the ImageInputStream implementation associated with this service provider can optionally make use of a cache file for improved performance and/or memory footrprint:::return
ImageInputStreamSpi#needsCacheFile():::Returns true if the ImageInputStream implementation associated with this service provider requires the use of a cache File:::return
ImageInputStreamSpi#createInputStreamInstance(Object, boolean, File):::Returns an instance of the ImageInputStream implementation associated with this service provider:::
ImageInputStreamSpi#createInputStreamInstance(Object):::Returns an instance of the ImageInputStream implementation associated with this service provider:::return->createInputStreamInstance
ImageOutputStreamSpi#getOutputClass():::Returns a Class object representing the class or interface type that must be implemented by an output destination in order to be "wrapped" in an ImageOutputStream via the createOutputStreamInstance method:::return
ImageOutputStreamSpi#canUseCacheFile():::Returns true if the ImageOutputStream implementation associated with this service provider can optionally make use of a cache File for improved performance and/or memory footrprint:::return
ImageOutputStreamSpi#needsCacheFile():::Returns true if the ImageOutputStream implementation associated with this service provider requires the use of a cache File:::return
ImageOutputStreamSpi#createOutputStreamInstance(Object, boolean, File):::Returns an instance of the ImageOutputStream implementation associated with this service provider:::
ImageOutputStreamSpi#createOutputStreamInstance(Object):::Returns an instance of the ImageOutputStream implementation associated with this service provider:::return->createOutputStreamInstance
ImageReaderSpi#getInputTypes():::Returns an array of Class objects indicating what types of objects may be used as arguments to the reader's setInput method:::return->inputTypes->clone
ImageReaderSpi#canDecodeInput(Object):::Returns true if the supplied source object appears to be of the format supported by this reader:::
ImageReaderSpi#createReaderInstance():::Returns an instance of the ImageReader implementation associated with this service provider:::return->createReaderInstance
ImageReaderSpi#createReaderInstance(Object):::Returns an instance of the ImageReader implementation associated with this service provider:::
ImageReaderSpi#isOwnReader(ImageReader):::Returns true if the ImageReader object passed in is an instance of the ImageReader associated with this service provider:::if->throw->new->IllegalArgumentException->name->reader->getClass->getName->return->name->equals
ImageReaderSpi#getImageWriterSpiNames():::Returns an array of Strings containing the fully qualified names of all the ImageWriterSpi classes that can understand the internal metadata representation used by the ImageReader associated with this service provider, or null if there are no such ImageWriters specified:::return->writerSpiNames->clone
ImageReaderWriterSpi#getFormatNames():::Returns an array of Strings containing human-readable names for the formats that are generally usable by the ImageReader or ImageWriter implementation associated with this service provider:::return->names->clone
ImageReaderWriterSpi#getFileSuffixes():::Returns an array of Strings containing a list of file suffixes associated with the formats that are generally usable by the ImageReader or ImageWriter implementation associated with this service provider:::return->suffixes->clone
ImageReaderWriterSpi#getMIMETypes():::Returns an array of Strings containing a list of MIME types associated with the formats that are generally usable by the ImageReader or ImageWriter implementation associated with this service provider:::return->MIMETypes->clone
ImageReaderWriterSpi#getPluginClassName():::Returns the fully-qualified class name of the ImageReader or ImageWriter plug-in associated with this service provider.:::return
ImageReaderWriterSpi#isStandardStreamMetadataFormatSupported():::Returns true if the standard metadata format is among the document formats recognized by the getAsTree and setFromTree methods on the stream metadata objects produced or consumed by this plug-in.:::return
ImageReaderWriterSpi#getNativeStreamMetadataFormatName():::Returns the name of the "native" stream metadata format for this plug-in, which typically allows for lossless encoding and transmission of the stream metadata stored in the format handled by this plug-in:::return
ImageReaderWriterSpi#getExtraStreamMetadataFormatNames():::Returns an array of Strings containing the names of additional document formats, other than the native and standard formats, recognized by the getAsTree and setFromTree methods on the stream metadata objects produced or consumed by this plug-in:::return->extraStreamMetadataFormatNames->clone
ImageReaderWriterSpi#isStandardImageMetadataFormatSupported():::Returns true if the standard metadata format is among the document formats recognized by the getAsTree and setFromTree methods on the image metadata objects produced or consumed by this plug-in.:::return
ImageReaderWriterSpi#getNativeImageMetadataFormatName():::Returns the name of the "native" image metadata format for this plug-in, which typically allows for lossless encoding and transmission of the image metadata stored in the format handled by this plug-in:::return
ImageReaderWriterSpi#getExtraImageMetadataFormatNames():::Returns an array of Strings containing the names of additional document formats, other than the native and standard formats, recognized by the getAsTree and setFromTree methods on the image metadata objects produced or consumed by this plug-in:::return->extraImageMetadataFormatNames->clone
ImageReaderWriterSpi#getStreamMetadataFormat(String):::Returns an IIOMetadataFormat object describing the given stream metadata format, or null if no description is available:::return->getMetadataFormat
ImageReaderWriterSpi#getImageMetadataFormat(String):::Returns an IIOMetadataFormat object describing the given image metadata format, or null if no description is available:::return->getMetadataFormat
ImageTranscoderSpi#getReaderServiceProviderName():::Returns the fully qualified class name of an ImageReaderSpi class that generates IIOMetadata objects that may be used as input to this transcoder.:::
ImageTranscoderSpi#getWriterServiceProviderName():::Returns the fully qualified class name of an ImageWriterSpi class that generates IIOMetadata objects that may be used as input to this transcoder.:::
ImageTranscoderSpi#createTranscoderInstance():::Returns an instance of the ImageTranscoder implementation associated with this service provider.:::
ImageWriterSpi#isFormatLossless():::Returns true if the format that this writer outputs preserves pixel data bit-accurately:::return
ImageWriterSpi#getOutputTypes():::Returns an array of Class objects indicating what types of objects may be used as arguments to the writer's setOutput method:::return->outputTypes->clone
ImageWriterSpi#canEncodeImage(ImageTypeSpecifier):::Returns true if the ImageWriter implementation associated with this service provider is able to encode an image with the given layout:::
ImageWriterSpi#canEncodeImage(RenderedImage):::Returns true if the ImageWriter implementation associated with this service provider is able to encode the given RenderedImage instance:::return->ImageTypeSpecifier->createFromRenderedImage->canEncodeImage
ImageWriterSpi#createWriterInstance():::Returns an instance of the ImageWriter implementation associated with this service provider:::return->createWriterInstance
ImageWriterSpi#createWriterInstance(Object):::Returns an instance of the ImageWriter implementation associated with this service provider:::
ImageWriterSpi#isOwnWriter(ImageWriter):::Returns true if the ImageWriter object passed in is an instance of the ImageWriter associated with this service provider.:::if->throw->new->IllegalArgumentException->name->writer->getClass->getName->return->name->equals
ImageWriterSpi#getImageReaderSpiNames():::Returns an array of Strings containing all the fully qualified names of all the ImageReaderSpi classes that can understand the internal metadata representation used by the ImageWriter associated with this service provider, or null if there are no such ImageReaders specified:::return->readerSpiNames->clone
PartiallyOrderedSet#iterator():::Returns an iterator over the elements contained in this collection, with an ordering that respects the orderings set by the setOrdering method.:::return->poNodes->values->iterator->new->PartialOrderIterator<>
PartiallyOrderedSet#add(E):::Adds an Object to this PartiallyOrderedSet.:::if->nodes->contains->return->node->new->DigraphNode<>->poNodes->put->return
PartiallyOrderedSet#remove(Object):::Removes an Object from this PartiallyOrderedSet.:::node->poNodes->get->if->return->poNodes->remove->node->dispose->return
PartiallyOrderedSet#setOrdering(E, E):::Sets an ordering between two nodes:::firstPONode->poNodes->get->secondPONode->poNodes->get->secondPONode->removeEdge->return->firstPONode->addEdge
PartiallyOrderedSet#unsetOrdering(E, E):::Removes any ordering between two nodes.:::firstPONode->poNodes->get->secondPONode->poNodes->get->return->firstPONode->removeEdge->secondPONode->removeEdge
PartiallyOrderedSet#hasOrdering(E, E):::Returns true if an ordering exists between two nodes.:::preferredPONode->poNodes->get->otherPONode->poNodes->get->return->preferredPONode->hasEdge
RegisterableService#onRegistration(ServiceRegistry, Class):::Called when an object implementing this interface is added to the given category of the given registry:::
RegisterableService#onDeregistration(ServiceRegistry, Class):::Called when an object implementing this interface is removed from the given category of the given registry:::
ServiceRegistry#lookupProviders(Class, ClassLoader):::Searches for implementations of a particular service class using the given class loader:::if->throw->new->IllegalArgumentException->checkClassAllowed->return->ServiceLoader->load->iterator
ServiceRegistry#lookupProviders(Class):::Locates and incrementally instantiates the available providers of a given service using the context class loader:::if->throw->new->IllegalArgumentException->checkClassAllowed->return->ServiceLoader->load->iterator
ServiceRegistry#getCategories():::Returns an Iterator of Class objects indicating the current set of categories:::keySet->categoryMap->keySet->return->keySet->iterator
ServiceRegistry#registerServiceProvider(T, Class):::Adds a service provider object to the registry:::if->throw->new->IllegalArgumentException->reg->categoryMap->get->if->throw->new->IllegalArgumentException->if->category->provider->getClass->isAssignableFrom->throw->new->ClassCastException->return->reg->registerServiceProvider
ServiceRegistry#registerServiceProvider(Object):::Adds a service provider object to the registry:::if->throw->new->IllegalArgumentException->regs->getSubRegistries->while->regs->hasNext->reg->regs->next->reg->registerServiceProvider
ServiceRegistry#registerServiceProviders(Iterator):::Adds a set of service provider objects, taken from an Iterator to the registry:::if->throw->new->IllegalArgumentException->while->providers->hasNext->providers->next->registerServiceProvider
ServiceRegistry#deregisterServiceProvider(T, Class):::Removes a service provider object from the given category:::if->throw->new->IllegalArgumentException->reg->categoryMap->get->if->throw->new->IllegalArgumentException->if->category->provider->getClass->isAssignableFrom->throw->new->ClassCastException->return->reg->deregisterServiceProvider
ServiceRegistry#deregisterServiceProvider(Object):::Removes a service provider object from all categories that contain it.:::if->throw->new->IllegalArgumentException->regs->getSubRegistries->while->regs->hasNext->reg->regs->next->reg->deregisterServiceProvider
ServiceRegistry#contains(Object):::Returns true if provider is currently registered.:::if->throw->new->IllegalArgumentException->regs->getSubRegistries->while->regs->hasNext->reg->regs->next->if->reg->contains->return->return
ServiceRegistry#getServiceProviders(Class, boolean):::Returns an Iterator containing all registered service providers in the given category:::reg->categoryMap->get->if->throw->new->IllegalArgumentException->it->reg->getServiceProviders->return
ServiceRegistry.Filter#filter(Object):::Returns true if the given provider object matches the criterion defined by this Filter.:::
ServiceRegistry#getServiceProviders(Class, Filter, boolean):::Returns an Iterator containing service provider objects within a given category that satisfy a criterion imposed by the supplied ServiceRegistry.Filter object's filter method:::reg->categoryMap->get->if->throw->new->IllegalArgumentException->iter->getServiceProviders->return->new->FilterIterator<>
ServiceRegistry#getServiceProviderByClass(Class):::Returns the currently registered service provider object that is of the given class type:::if->throw->new->IllegalArgumentException->iter->categoryMap->keySet->iterator->while->iter->hasNext->c->iter->next->if->c->isAssignableFrom->reg->categoryMap->get->provider->reg->getServiceProviderByClass->if->return->return
ServiceRegistry#setOrdering(Class, T, T):::Sets a pairwise ordering between two service provider objects within a given category:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->reg->categoryMap->get->if->throw->new->IllegalArgumentException->if->reg->contains->reg->contains->return->reg->setOrdering->return
ServiceRegistry#unsetOrdering(Class, T, T):::Sets a pairwise ordering between two service provider objects within a given category:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->reg->categoryMap->get->if->throw->new->IllegalArgumentException->if->reg->contains->reg->contains->return->reg->unsetOrdering->return
ServiceRegistry#deregisterAll(Class):::Deregisters all service provider object currently registered under the given category.:::reg->categoryMap->get->if->throw->new->IllegalArgumentException->reg->clear
ServiceRegistry#deregisterAll():::Deregisters all currently registered service providers from all categories.:::iter->categoryMap->values->iterator->while->iter->hasNext->reg->iter->next->reg->clear
ServiceRegistry#finalize():::Finalizes this object prior to garbage collection:::deregisterAll->super->finalize
SubRegistry#deregisterServiceProvider(Object):::If the provider was not previously registered, do nothing.:::oprovider->map->provider->getClass->get->if->map->provider->getClass->remove->accMap->provider->getClass->remove->poset->remove->if->rs->rs->onDeregistration->return->return

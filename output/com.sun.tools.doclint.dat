Checker.TagStackItem#toString()::: tag stack item to string:::return->String->valueOf
Checker#scan(DocCommentTree, TreePath)::: checker scan:::env->initTypes->env->setCurrent->isOverridingMethod->isEmpty->fo->p->getCompilationUnit->getSourceFile->if->p->getLeaf->getKind->isPkgInfo->fo->isNameCompatible->if->if->reportMissing->return->else->if->reportReference->else->if->fo->isNameCompatible->if->tree->getFullBody->isEmpty->reportMissing->return->else->if->if->isSynthetic->reportMissing->return->tagStack->clear->foundParams->clear->foundThrows->clear->new->DocTreePath->scan->if->switch->getKind->ee->ee->getTypeParameters->checkParamsDocumented->ee->getParameters->checkParamsDocumented->switch->ee->getReturnType->getKind->break->if->ee->getReturnType->isSameType->reportMissing->ee->getThrownTypes->checkThrowsDocumented->return
Checker#reportMissing(String, Object...)::: checker report missing:::getLeaf->report
Checker#reportReference(String, Object...)::: checker report reference:::getLeaf->report
Checker#visitDocComment(DocCommentTree, Void)::: checker visit doc comment:::super->visitDocComment->foreach->warnIfEmpty->if->getKind->t->t->getName->error->return
Checker#visitText(TextTree, Void)::: checker visit text:::hasNonWhitespace->if->checkAllowsText->markEnclosingTag->return
Checker#visitEntity(EntityTree, Void)::: checker visit entity:::checkAllowsText->markEnclosingTag->name->tree->getName->toString->if->name->startsWith->v->StringUtils->toLowerCase->startsWith->Integer->name->substring->parseInt->Integer->name->substring->parseInt->if->Entity->isValid->error->else->if->Entity->isValid->error->return
Checker#checkAllowsText(DocTree)::: checker check allows text:::top->tagStack->peek->if->getKind->acceptsText->if->add->getName->error
Checker#visitStartElement(StartElementTree, Void)::: checker visit start element:::treeName->tree->getName->t->HtmlTag->get->if->error->else->if->error->else->done->foreach->if->accepts->while->tagStack->peek->tagStack->peek->warnIfEmpty->tagStack->pop->break->else->if->break->if->accepts->while->tagStack->isEmpty->tagStack->peek->warnIfEmpty->tagStack->pop->markEnclosingTag->checkStructure->switch->checkHeader->break->if->contains->foreach->if->warning->break->if->tree->isSelfClosing->error->try->parent->tagStack->peek->top->new->TagStackItem->tagStack->push->super->visitStartElement->if->switch->if->add->break->if->add->break->if->contains->error->break->return->catch->finally->if->tagStack->pop
Checker#checkStructure(StartElementTree, HtmlTag)::: checker check structure:::treeName->tree->getName->top->tagStack->peek->switch->if->accepts->return->switch->getKind->if->name->getName->error->return->break->name->getKind->error->return->break->if->accepts->return->break->if->remove->if->accepts->return->break->switch->break->error->return->error
Checker#checkHeader(StartElementTree, HtmlTag)::: checker check header:::if->getHeaderLevel->getHeaderLevel->if->error->else->error
Checker#getHeaderLevel(HtmlTag)::: checker get header level:::if->return->switch->return->return->return->return->return->return->throw->new->IllegalArgumentException
Checker#visitEndElement(EndElementTree, Void)::: checker visit end element:::treeName->tree->getName->t->HtmlTag->get->if->error->else->if->error->else->done->while->tagStack->isEmpty->top->tagStack->peek->if->switch->if->contains->contains->error->break->if->contains->error->break->warnIfEmpty->tagStack->pop->break->else->if->tagStack->pop->else->found->foreach->if->break->if->getKind->getName->error->tagStack->pop->else->error->break->if->tagStack->isEmpty->error->return->super->visitEndElement
Checker#warnIfEmpty(TagStackItem, DocTree)::: checker warn if empty:::if->if->contains->contains->contains->contains->tree->treeName->getName->warning
Checker#visitAttribute(AttributeTree, Void)::: checker visit attribute:::currTag->tagStack->peek->if->name->tree->getName->attr->currTag->getAttr->if->if->attr->name->contains->error->first->tagStack->peek->add->if->error->if->name->toString->startsWith->k->currTag->getAttrKind->switch->validateHtml4Attrs->break->validateHtml5Attrs->break->if->switch->if->break->value->getAttrValue->if->error->else->if->validName->matcher->matches->error->if->checkAnchor->error->break->if->v->getAttrValue->if->v->isEmpty->error->else->m->docRoot->matcher->if->m->matches->rest->m->group->if->rest->isEmpty->checkURI->else->checkURI->break->if->v->getAttrValue->if->v->isEmpty->error->else->if->validNumber->matcher->matches->error->break->if->v->getAttrValue->try->if->v->isEmpty->Integer->parseInt->error->catch->error->finally->break->return->super->visitAttribute
Checker#validateHtml4Attrs(AttributeTree, Name, AttrKind)::: checker validate html4 attrs:::switch->break->error->break->warning->break->warning->break->error->break
Checker#validateHtml5Attrs(AttributeTree, Name, AttrKind)::: checker validate html5 attrs:::switch->break->error->break
Checker#checkAnchor(String)::: checker check anchor:::e->getEnclosingPackageOrClass->if->return->set->foundAnchors->get->if->foundAnchors->new->HashSet<>->put->return->set->add
Checker#getEnclosingPackageOrClass(Element)::: checker get enclosing package or class:::while->switch->e->getKind->return->e->getEnclosingElement->return
Checker#getAttrValue(AttributeTree)::: checker get attr value:::if->tree->getValue->return->sw->new->StringWriter->try->new->DocPretty->tree->getValue->print->catch->finally->return->sw->toString
Checker#checkURI(AttributeTree, String)::: checker check i:::if->uri->startsWith->return->try->u->new->URI->catch->error->finally
Checker#visitAuthor(AuthorTree, Void)::: checker visit author:::tree->getName->warnIfEmpty->return->super->visitAuthor
Checker#visitDocRoot(DocRootTree, Void)::: checker visit doc root:::markEnclosingTag->return->super->visitDocRoot
Checker#visitInheritDoc(InheritDocTree, Void)::: checker visit inherit doc:::markEnclosingTag->return->super->visitInheritDoc
Checker#visitLink(LinkTree, Void)::: checker visit link:::markEnclosingTag->t->tree->getKind->tagStack->new->TagStackItem->push->try->return->super->visitLink->catch->finally->tagStack->pop
Checker#visitLiteral(LiteralTree, Void)::: checker visit literal:::markEnclosingTag->if->tree->getKind->foreach->if->warning->break->return->super->visitLiteral
Checker#visitParam(ParamTree, Void)::: checker visit param:::typaram->tree->isTypeParameter->nameTree->tree->getName->paramElement->getCurrentPath->new->DocTreePath->getElement->if->switch->getKind->if->error->break->error->break->error->break->else->unique->foundParams->add->if->warning->tree->getDescription->warnIfEmpty->return->super->visitParam
Checker#checkParamsDocumented(List)::: checker check params documented:::if->return->foreach->if->foundParams->contains->paramName->e->getKind->e->getSimpleName->e->getSimpleName->reportMissing
Checker#visitProvides(ProvidesTree, Void)::: checker visit provides:::e->getElement->if->e->getKind->error->serviceType->tree->getServiceType->se->getCurrentPath->new->DocTreePath->getElement->if->error->return->super->visitProvides
Checker#visitReference(ReferenceTree, Void)::: checker visit reference:::sig->tree->getSignature->if->sig->contains->sig->contains->error->e->getCurrentPath->getElement->if->error->return->super->visitReference
Checker#visitReturn(ReturnTree, Void)::: checker visit return:::if->warning->e->getElement->if->e->getKind->getReturnType->getKind->error->tree->getDescription->warnIfEmpty->return->super->visitReturn
Checker#visitSerialData(SerialDataTree, Void)::: checker visit serial data:::tree->getDescription->warnIfEmpty->return->super->visitSerialData
Checker#visitSerialField(SerialFieldTree, Void)::: checker visit serial field:::tree->getDescription->warnIfEmpty->return->super->visitSerialField
Checker#visitSince(SinceTree, Void)::: checker visit since:::tree->getBody->warnIfEmpty->return->super->visitSince
Checker#visitSummary(SummaryTree, Void)::: checker visit summary:::idx->getFullBody->indexOf->if->node->getTagName->warning->return->super->visitSummary
Checker#visitThrows(ThrowsTree, Void)::: checker visit throws:::exName->tree->getExceptionName->ex->getCurrentPath->new->DocTreePath->getElement->if->error->else->if->ex->asType->isThrowable->switch->getKind->if->ex->asType->isCheckedException->ee->ex->asType->ee->getThrownTypes->checkThrowsDeclared->break->error->else->error->tree->getDescription->warnIfEmpty->return->tree->getDescription->scan
Checker#isThrowable(TypeMirror)::: checker is throwable:::switch->tm->getKind->return->isAssignable->return
Checker#checkThrowsDeclared(ReferenceTree, TypeMirror, List)::: checker check throws declared:::found->foreach->if->isAssignable->foundThrows->add->if->error
Checker#checkThrowsDocumented(List)::: checker check throws documented:::if->return->foreach->if->isCheckedException->foundThrows->contains->reportMissing
Checker#visitUnknownBlockTag(UnknownBlockTagTree, Void)::: checker visit unknown block tag:::tree->getTagName->checkUnknownTag->return->super->visitUnknownBlockTag
Checker#visitUnknownInlineTag(UnknownInlineTagTree, Void)::: checker visit unknown inline tag:::tree->getTagName->checkUnknownTag->return->super->visitUnknownInlineTag
Checker#checkUnknownTag(DocTree, String)::: checker check unknown tag:::if->contains->error
Checker#visitUses(UsesTree, Void)::: checker visit uses:::e->getElement->if->e->getKind->error->serviceType->tree->getServiceType->se->getCurrentPath->new->DocTreePath->getElement->if->error->return->super->visitUses
Checker#visitValue(ValueTree, Void)::: checker visit value:::ref->tree->getReference->if->ref->getSignature->isEmpty->if->isConstant->error->else->e->getCurrentPath->new->DocTreePath->getElement->if->isConstant->error->markEnclosingTag->return->super->visitValue
Checker#isConstant(Element)::: checker is constant:::if->return->switch->e->getKind->value->getConstantValue->return->return
Checker#visitVersion(VersionTree, Void)::: checker visit version:::tree->getBody->warnIfEmpty->return->super->visitVersion
Checker#visitErroneous(ErroneousTree, Void)::: checker visit erroneous:::tree->getDiagnostic->getMessage->error->return
Checker#isCheckedException(TypeMirror)::: checker is checked exception:::return->isAssignable->isAssignable
Checker#isSynthetic()::: checker is synthetic:::switch->getKind->p->return->env->getPos->env->p->getParentPath->getPos->return
Checker#markEnclosingTag(Flag)::: checker mark enclosing tag:::top->tagStack->peek->if->add
Checker#toString(TreePath)::: checker to string:::sb->new->StringBuilder->toString->sb->append->return->sb->toString
Checker#toString(TreePath, StringBuilder)::: checker to string:::parent->p->getParentPath->if->toString->sb->append->sb->p->getLeaf->getKind->append->append->env->getPos->append->append->env->getStartPos->append
Checker#warnIfEmpty(DocTree, List)::: checker warn if empty:::foreach->switch->d->getKind->if->hasNonWhitespace->return->break->return->tree->getKind->warning
Checker#hasNonWhitespace(TextTree)::: checker has non whitespace:::s->tree->getBody->for->i->s->length->return
DocLint#main(String...)::: doc lint main:::dl->new->DocLint->try->dl->run->catch->e->getMessage->println->System->exit->dl->e->getLocalizedMessage->localize->println->System->exit->finally
DocLint#run(String...):::Simple API entry point.:::out->new->PrintWriter->try->run->catch->finally->out->flush
DocLint#run(PrintWriter, String...)::: doc lint run:::new->Env->processArgs->noFiles->javacFiles->isEmpty->if->showHelp->if->return->else->if->out->localize->println->return->tool->JavacTool->create->fm->new->Context->new->JavacFileManager->fm->setSymbolFileEnabled->if->fm->setLocation->if->fm->setLocation->if->fm->setLocation->task->tool->fm->getJavaFileObjectsFromFiles->getTask->units->task->parse->enter->env->init->new->Checker->ds->new->DeclScanner->ds->scan->reportStats->ctx->getContext->c->JavaCompiler->instance->c->c->errorCount->printCount->c->c->warningCount->printCount
DocLint#processArgs(String...)::: doc lint process args:::new->ArrayList<>->new->ArrayList<>->if->for->i
DocLint#showHelp(PrintWriter)::: doc lint show help:::msg->localize->foreach->msg->split->out->println
DocLint#splitPath(String)::: doc lint split path:::files->new->ArrayList<>->foreach->path->split->if->f->length->files->new->File->add->return
DocLint#getName()::: doc lint get name:::return
DocLint#init(JavacTask, String...)::: doc lint init:::init
DocLint#init(JavacTask, String[], boolean)::: doc lint init:::new->Env->foreach->if->arg->equals->setOptions->else->if->arg->startsWith->arg->arg->indexOf->substring->setOptions->else->if->arg->matches->ch->arg->arg->length->charAt->env->Character->digit->setImplicitHeaders->else->if->arg->startsWith->env->arg->arg->indexOf->substring->setCustomTags->else->if->arg->startsWith->argsVersion->arg->arg->indexOf->substring->htmlVersion->HtmlVersion->getHtmlVersion->if->env->setHtmlVersion->else->throw->new->IllegalArgumentException->else->if->arg->startsWith->env->arg->arg->indexOf->substring->setCheckPackages->else->throw->new->IllegalArgumentException->env->init->new->Checker->if->ds->new->DeclScanner->tl->new->TaskListener->task->addTaskListener
DocLint#scan(TreePath)::: doc lint scan:::dc->getDocCommentTree->checker->scan
DocLint#shouldCheck(CompilationUnitTree)::: doc lint should check:::return->env->shouldCheck
DocLint#reportStats(PrintWriter)::: doc lint report stats:::reportStats
DocLint#isValidOption(String)::: doc lint is valid option:::if->opt->equals->return->if->opt->startsWith->return->opt->XMSGS_CUSTOM_PREFIX->length->substring->isValidOptions->if->opt->startsWith->return->Env->opt->opt->indexOf->substring->validatePackages->return
DocLint#localize(String, Object...)::: doc lint localize:::m->new->Messages->return->m->localize
DocLint.DeclScanner#visitDecl(Tree, Name)::: decl scanner visit decl:::
DocLint.DeclScanner#visitPackage(PackageTree, Void)::: decl scanner visit package:::visitDecl->return->super->visitPackage
DocLint.DeclScanner#visitClass(ClassTree, Void)::: decl scanner visit class:::tree->getSimpleName->visitDecl->return->super->visitClass
DocLint.DeclScanner#visitMethod(MethodTree, Void)::: decl scanner visit method:::tree->getName->visitDecl->return
DocLint.DeclScanner#visitModule(ModuleTree, Void)::: decl scanner visit module:::visitDecl->return->super->visitModule
DocLint.DeclScanner#visitVariable(VariableTree, Void)::: decl scanner visit variable:::tree->getName->visitDecl->return->super->visitVariable
DocLint.DeclScanner#visitCompilationUnit(CompilationUnitTree, Void)::: decl scanner visit compilation unit:::if->env->shouldCheck->return->return->super->visitCompilationUnit
DocLint.DeclScanner#visitBlock(BlockTree, Void)::: decl scanner visit block:::return
DocLint.DeclScanner#visitLambdaExpression(LambdaExpressionTree, Void)::: decl scanner visit lambda expression:::return
Env#init(JavacTask)::: env init:::DocTrees->instance->task->getElements->task->getTypes->init
Env#init(DocTrees, Elements, Types)::: env init:::
Env#initTypes()::: env init types:::if->return->elements->getTypeElement->asType->elements->getTypeElement->asType->elements->getTypeElement->asType->elements->getTypeElement->asType
Env#setImplicitHeaders(int)::: env set implicit headers:::
Env#setCustomTags(String)::: env set custom tags:::new->LinkedHashSet<>->foreach->cTags->split->if->s->isEmpty->customTags->add
Env#setCheckPackages(String)::: env set check packages:::new->HashSet<>->new->HashSet<>->foreach->packages->split->excluded->if->pack->startsWith->pack->substring->if->pack->isEmpty->continue->pattern->MatchingUtils->validImportStringToPattern->if->excludePackages->add->else->includePackages->add
Env#validatePackages(String)::: env validate packages:::foreach->packages->split->if->pack->startsWith->pack->substring->if->pack->isEmpty->MatchingUtils->isValidImportString->return->return
Env#setHtmlVersion(HtmlVersion)::: env set html version:::
Env#setCurrent(TreePath, DocCommentTree):::Set the current declaration and its doc comment.:::trees->getElement->getOverriddenMethods->ak->for->p->p->getParentPath
Env#getAccessKind()::: env get access kind:::return
Env#getPos(TreePath)::: env get pos:::return->p->getLeaf
Env#getStartPos(TreePath)::: env get start pos:::sp->trees->getSourcePositions->return->sp->p->getCompilationUnit->p->getLeaf->getStartPosition
Env#shouldCheck(CompilationUnitTree)::: env should check:::if->return->packageName->unit->getPackageName->unit->getPackageName->toString->if->includePackages->isEmpty->included->foreach->if->pack->matcher->matches->break->if->return->foreach->if->pack->matcher->matches->return->return
Env#min(T, T)::: env min:::return->item1->compareTo
Messages#error(Group, DocTree, String, Object...)::: messages error:::report
Messages#warning(Group, DocTree, String, Object...)::: messages warning:::report
Messages#setOptions(String)::: messages set options:::options->setOptions
Messages#setStatsEnabled(boolean)::: messages set stats enabled:::stats->setEnabled
Messages#reportStats(PrintWriter)::: messages report stats:::stats->report
Messages#report(Group, Diagnostic.Kind, DocTree, String, Object...)::: messages report:::if->options->isEnabled->msg->localize->getCompilationUnit->printMessage->stats->record
Messages#report(Group, Diagnostic.Kind, Tree, String, Object...)::: messages report:::if->options->isEnabled->msg->localize->getCompilationUnit->printMessage->stats->record
Messages#localize(String, Object...)::: messages localize:::msg->bundle->getString->if->sb->new->StringBuilder->sb->append->append->if->sb->append->for->i->sb->toString->return->MessageFormat->format
Messages.Options#isValidOptions(String)::: options is valid options:::foreach->opts->split->if->StringUtils->opt->trim->toLowerCase->isValidOption->return->return
Messages.Options#isValidOption(String)::: options is valid option:::if->opt->equals->opt->equals->return->begin->opt->startsWith->sep->opt->indexOf->grp->opt->opt->length->substring->return->grp->equals->Group->accepts->AccessKind->opt->substring->accepts
Messages.Options#isEnabled(Group, Env.AccessKind):::Determine if a message group is enabled for a particular access level.:::if->map->isEmpty->map->put->ak->map->g->optName->get->if->access->compareTo->return->map->get->if->access->compareTo->map->g->notOptName->get->if->access->compareTo->return->return
Messages.Options#setOptions(String)::: options set options:::if->setOption->else->foreach->opts->split->StringUtils->opt->trim->toLowerCase->setOption
Messages.Options#setOption(String)::: options set option:::if->arg->equals->stats->setEnabled->return->sep->arg->indexOf->if->ak->StringUtils->arg->substring->toUpperCase->valueOf->arg->substring->setOption->else->setOption
Messages.Options#setOption(String, Env.AccessKind)::: options set option:::map->opt->startsWith->put
Messages.Stats#setEnabled(boolean)::: stats set enabled:::if->values->new->intArr->values->new->intArr->new->HashMap<>->else
Messages.Stats#record(Messages.Group, Diagnostic.Kind, String)::: stats record:::if->return->g->ordinal->dkind->ordinal->if->i->codeCounts->get->codeCounts->put
Messages.Stats#report(PrintWriter)::: stats report:::if->return->out->println->groupTable->new->Table->foreach->values->groupTable->g->optName->g->ordinal->put->groupTable->print->out->println->out->println->dkindTable->new->Table->foreach->values->dkindTable->StringUtils->k->toString->toLowerCase->k->ordinal->put->dkindTable->print->out->println->out->println->codeTable->new->Table->foreach->codeCounts->entrySet->code->e->getKey->msg->try->code->equals->bundle->getString->catch->finally->codeTable->e->getValue->put->codeTable->print
Messages.Stats.Table#put(String, int)::: table put:::if->return->labels->map->get->if->map->new->TreeSet<>->put->labels->add
Messages.Stats.Table#print(PrintWriter)::: table print:::foreach->map->entrySet->count->e->getKey->labels->e->getValue->foreach->out->String->format->println

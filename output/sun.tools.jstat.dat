Alignment#align(String, int)::: alignment align:::
Alignment#toAlignment(String):::Maps a string value to its corresponding Alignment object.:::return->map->get
Alignment#keySet():::Returns an enumeration of the keys for this enumerated type:::return->map->keySet
Alignment#toString()::: alignment to string:::return
Arguments#printUsage(PrintStream)::: arguments print usage:::ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println->ps->println
Arguments#toMillis(String)::: arguments to millis:::unitStrings->unitString->valueString->for->i->try->value->Integer->parseInt->if->unitString->compareTo->return->else->if->unitString->compareTo->return->else->throw->new->IllegalArgumentException->catch->throw->new->IllegalArgumentException->finally
Arguments#comparator()::: arguments comparator:::return
Arguments#isHelp()::: arguments is help:::return
Arguments#isList()::: arguments is list:::return
Arguments#isSnap()::: arguments is snap:::return
Arguments#isOptions()::: arguments is options:::return
Arguments#isVerbose()::: arguments is verbose:::return
Arguments#printConstants()::: arguments print constants:::return
Arguments#isConstantsOnly()::: arguments is constants only:::return
Arguments#printStrings()::: arguments print strings:::return
Arguments#showUnsupported()::: arguments show unsupported:::return
Arguments#headerRate()::: arguments header rate:::return
Arguments#counterNames()::: arguments counter names:::return
Arguments#vmId()::: arguments vm id:::return
Arguments#vmIdString()::: arguments vm id string:::return
Arguments#sampleInterval()::: arguments sample interval:::return
Arguments#sampleCount()::: arguments sample count:::return
Arguments#isTimestamp()::: arguments is timestamp:::return
Arguments#isSpecialOption()::: arguments is special option:::return
Arguments#specialOption()::: arguments special option:::return
Arguments#optionFormat()::: arguments option format:::return
Arguments#optionsSources()::: arguments options sources:::sources->new->ArrayList<URL>->i->filename->try->userHome->System->getProperty->userDir->home->new->File->sources->home->toURI->toURL->add->catch->if->e->getMessage->println->e->printStackTrace->throw->e->getMessage->new->IllegalArgumentException->finally->u->this->getClass->getResource->sources->add->if->this->getClass->getResource->sources->add->return
AscendingMonitorComparator#compare(Monitor, Monitor)::: ascending monitor comparator compare:::name1->o1->getName->name2->o2->getName->return->name1->compareTo
Closure#visit(Object, boolean)::: closure visit:::
ColumnFormat#validate()::: column format validate:::if->throw->new->ParserException->if->throw->new->ParserException->if->expression->setRequired
ColumnFormat#setWidth(int)::: column format set width:::
ColumnFormat#setAlignment(Alignment)::: column format set alignment:::
ColumnFormat#setScale(Scale)::: column format set scale:::
ColumnFormat#setFormat(String)::: column format set format:::
ColumnFormat#setHeader(String)::: column format set header:::
ColumnFormat#getHeader()::: column format get header:::return
ColumnFormat#getFormat()::: column format get format:::return
ColumnFormat#getWidth()::: column format get width:::return
ColumnFormat#getAlignment()::: column format get alignment:::return
ColumnFormat#getScale()::: column format get scale:::return
ColumnFormat#getExpression()::: column format get expression:::return
ColumnFormat#setExpression(Expression)::: column format set expression:::
ColumnFormat#setRequired(boolean)::: column format set required:::
ColumnFormat#isRequired()::: column format is required:::return
ColumnFormat#setPreviousValue(Object)::: column format set previous value:::
ColumnFormat#getPreviousValue()::: column format get previous value:::return
ColumnFormat#printFormat(int)::: column format print format:::indentAmount->indent->new->StringBuilder->for->j->println->expression->toString->scale->toString->align->toString->println->for->i->children->iterator->i->hasNext->println
ColumnFormat#getValue()::: column format get value:::return
DescendingMonitorComparator#compare(Monitor, Monitor)::: descending monitor comparator compare:::name1->o1->getName->name2->o2->getName->return->name2->compareTo
Expression#setLeft(Expression)::: expression set left:::if->println->setRequired
Expression#getLeft()::: expression get left:::return
Expression#setRight(Expression)::: expression set right:::if->println->setRequired
Expression#getRight()::: expression get right:::return
Expression#setOperator(Operator)::: expression set operator:::if->println
Expression#getOperator()::: expression get operator:::return
Expression#setRequired(boolean)::: expression set required:::if->left->setRequired->if->right->setRequired
Expression#isRequired()::: expression is required:::return
Expression#toString()::: expression to string:::b->new->StringBuilder->b->append->if->b->left->toString->append->if->b->operator->toString->append->if->b->right->toString->append->b->append->return->b->toString
ExpressionEvaluator#evaluate(Expression)::: expression evaluator evaluate:::
ExpressionExecuter#evaluate(Expression)::: expression executer evaluate:::if->return->if->println->if->return->getValue->if->id->if->map->id->getName->containsKey->return->map->id->getName->get->else->m->id->getValue->v->m->getValue->map->id->getName->put->return->l->e->getLeft->r->e->getRight->op->e->getOperator->if->return->evaluate->else->lval->evaluate->doubleValue->rval->evaluate->doubleValue->result->op->eval->if->println->return->Double->valueOf
ExpressionResolver#evaluate(Expression)::: expression resolver evaluate:::if->return->if->println->if->id->if->id->isResolved->return->m->vm->id->getName->findByName->if->if->id->getName->println->return->e->isRequired->new->Literal->if->m->getVariability->if->id->getName->m->getValue->println->return->m->getValue->new->Literal->id->setValue->return->if->return->l->r->if->e->getLeft->e->getLeft->evaluate->if->e->getRight->e->getRight->evaluate->if->if->ll->rl->warn->nan->Double->valueOf->if->ll->getValue->ll->setValue->if->rl->getValue->rl->setValue->if->println->ln->ll->getValue->rn->rl->getValue->result->e->getOperator->ln->doubleValue->rn->doubleValue->eval->if->ln->doubleValue->rn->doubleValue->println->literal->new->Literal->literal->e->isRequired->setRequired->return->if->return->e->setLeft->e->setRight->return
HeaderClosure#visit(Object, boolean)::: header closure visit:::if->return->c->h->c->getHeader->if->h->indexOf->len->h->length->if->h->charAt->h->charAt->c->Math->c->getWidth->Math->c->getFormat->length->max->max->setWidth->h->substring->c->getWidth->align->else->if->h->charAt->c->Math->c->getWidth->Math->c->getFormat->length->max->max->setWidth->h->substring->c->getWidth->align->else->if->h->charAt->c->Math->c->getWidth->Math->c->getFormat->length->max->max->setWidth->h->substring->c->getWidth->align->else->else->header->append->if->header->append
HeaderClosure#getHeader()::: header closure get header:::return->header->toString
Identifier#getName()::: identifier get name:::return
Identifier#setValue(Object)::: identifier set value:::
Identifier#getValue()::: identifier get value:::return
Identifier#isResolved()::: identifier is resolved:::return
Identifier#toString()::: identifier to string:::return
Jstat#main(String[])::: jstat main:::try->new->Arguments->catch->e->getMessage->println->Arguments->printUsage->System->exit->finally->if->arguments->isHelp->Arguments->printUsage->System->exit->if->arguments->isOptions->ol->arguments->optionsSources->new->OptionLister->ol->print->System->exit->try->if->arguments->isList->logNames->else->if->arguments->isSnap->logSnapShot->else->logSamples->catch->e->printStackTrace->System->exit->finally->System->exit
Jstat#logNames()::: jstat log names:::vmId->arguments->vmId->interval->arguments->sampleInterval->monitoredHost->MonitoredHost->getMonitoredHost->monitoredVm->monitoredHost->getMonitoredVm->logger->new->JStatLogger->logger->arguments->counterNames->arguments->comparator->arguments->showUnsupported->printNames->monitoredHost->detach
Jstat#logSnapShot()::: jstat log snap shot:::vmId->arguments->vmId->interval->arguments->sampleInterval->monitoredHost->MonitoredHost->getMonitoredHost->monitoredVm->monitoredHost->getMonitoredVm->logger->new->JStatLogger->logger->arguments->counterNames->arguments->comparator->arguments->isVerbose->arguments->showUnsupported->printSnapShot->monitoredHost->detach
Jstat#logSamples()::: jstat log samples:::vmId->arguments->vmId->interval->arguments->sampleInterval->monitoredHost->MonitoredHost->getMonitoredHost->monitoredVm->monitoredHost->getMonitoredVm->logger->new->JStatLogger->formatter->if->arguments->isSpecialOption->format->arguments->optionFormat->new->OptionOutputFormatter->else->logged->monitoredVm->arguments->counterNames->findByPattern->Collections->arguments->comparator->sort->constants->new->ArrayList<Monitor>->for->i->logged->iterator->i->hasNext->if->constants->isEmpty->logger->arguments->isVerbose->arguments->showUnsupported->printList->if->logged->isEmpty->println->if->logged->isEmpty->monitoredHost->detach->return->arguments->printStrings->new->RawOutputFormatter->Runtime->getRuntime->new->Thread->addShutdownHook->terminator->new->HostListener->if->vmId->getLocalVmId->monitoredHost->addHostListener->logger->arguments->headerRate->arguments->sampleInterval->arguments->sampleCount->logSamples->if->monitoredHost->removeHostListener->monitoredHost->detach
JStatLogger#printNames(String, Comparator, boolean, PrintStream):::print the monitors that match the given monitor name pattern string.:::items->monitoredVm->findByPattern->Collections->sort->foreach->if->m->isSupported->continue->out->m->getName->println
JStatLogger#printSnapShot(String, Comparator, boolean, boolean, PrintStream):::print name=value pairs for the given list of monitors.:::items->monitoredVm->findByPattern->Collections->sort->printList
JStatLogger#printList(List, boolean, boolean, PrintStream):::print name=value pairs for the given list of monitors.:::foreach->if->m->isSupported->continue->buffer->new->StringBuilder->buffer->m->getName->append->append->if->buffer->append->m->getValue->append->append->else->buffer->m->getValue->append->if->buffer->append->m->getUnits->append->buffer->append->m->getVariability->append->buffer->append->m->isSupported->append->out->println
JStatLogger#stopLogging():::method to for asynchronous termination of sampling loops:::
JStatLogger#logSamples(OutputFormatter, int, int, int, PrintStream):::print samples according to the given format.:::iterationCount->printHeaderCount->printHeader->if->out->formatter->getHeader->println->while->if->out->formatter->getHeader->println->out->formatter->getRow->println->if->break->try->Thread->sleep->catch->finally
Literal#getValue()::: literal get value:::return
Literal#setValue(Object)::: literal set value:::
Literal#toString()::: literal to string:::return->value->toString
Operator#eval(double, double)::: operator eval:::
Operator#toString():::Returns the string representation of this Operator object.:::return
Operator#toOperator(String):::Maps a string to its corresponding Operator object.:::return->map->get
Operator#keySet():::Returns an enumeration of the keys for this enumerated type:::return->map->keySet
OptionFinder#getOptionFormat(String, boolean)::: option finder get option format:::of->getOptionFormat->tof->if->getOptionFormat->if->cf->tof->getSubFormat->of->insertSubFormat->return
OptionFinder#getOptionFormat(String, List)::: option finder get option format:::of->foreach->try->r->u->openStream->new->InputStreamReader->new->BufferedReader->new->Parser->parse->if->break->catch->if->e->getMessage->println->e->printStackTrace->e->getMessage->println->println->finally->return
OptionFormat#equals(Object)::: option format equals:::if->return->if->return->of->return->compareTo
OptionFormat#hashCode()::: option format hash code:::return->name->hashCode
OptionFormat#addSubFormat(OptionFormat)::: option format add sub format:::children->add
OptionFormat#getSubFormat(int)::: option format get sub format:::return->children->get
OptionFormat#insertSubFormat(int, OptionFormat)::: option format insert sub format:::children->add
OptionFormat#getName()::: option format get name:::return
OptionFormat#apply(Closure)::: option format apply:::for->i->children->iterator->i->hasNext->for->i->children->iterator->i->hasNext
OptionFormat#printFormat()::: option format print format:::printFormat
OptionFormat#printFormat(int)::: option format print format:::indentAmount->indent->new->StringBuilder->for->j->println->foreach->of->printFormat->println
OptionLister#print(PrintStream)::: option lister print:::c->new->Comparator<OptionFormat>->options->new->TreeSet<OptionFormat>->foreach->try->r->u->openStream->new->InputStreamReader->new->BufferedReader->s->new->Parser->parseOptions->options->addAll->catch->if->e->getMessage->println->e->printStackTrace->e->getMessage->println->println->finally->foreach->if->of->getName->compareTo->continue->ps->of->getName->println
OptionOutputFormatter#resolve()::: option output formatter resolve:::ee->new->ExpressionResolver->ec->new->SymbolResolutionClosure->format->apply
OptionOutputFormatter#getHeader()::: option output formatter get header:::if->hc->new->HeaderClosure->format->apply->hc->getHeader->return
OptionOutputFormatter#getRow()::: option output formatter get row:::rc->new->RowClosure->format->apply->return->rc->getRow
OutputFormatter#getHeader():::get the header row that describes the data in the columns:::
OutputFormatter#getRow():::get the data row.:::
Parser#pushBack():::push back the lookahead token and restore the lookahead token to the previous token.:::st->pushBack
Parser#nextToken():::retrieve the next token, placing the token value in the lookahead member variable, storing its previous value in the previous member variable.:::t->st->nextToken->new->Token->log
Parser#matchOne(Set):::match one of the token values in the given set of key words token is assumed to be of type TT_WORD, and the set is assumed to contain String objects.:::if->keyWords->contains->t->nextToken->return->throw->st->lineno->new->SyntaxException
Parser#match(int, String):::match a token with TT_TYPE=type, and the token value is a given sequence of characters.:::if->compareTo->nextToken->else->throw->st->lineno->new->Token->new->SyntaxException
Parser#match(int):::match a token with TT_TYPE=type:::if->nextToken->else->throw->st->lineno->new->Token->new->SyntaxException
Parser#match(char):::match a token with TT_TYPE=char, where the token value is the given char.:::if->nextToken->else->throw->st->lineno->new->Token->new->SyntaxException
Parser#matchQuotedString():::match a token with TT_TYPE='"', where the token value is a sequence of characters between matching quote characters.:::match
Parser#matchNumber():::match a TT_NUMBER token that matches a parsed number value:::match
Parser#matchID():::match a TT_WORD token that matches an arbitrary, not quoted token.:::match
Parser#match(String):::match a TT_WORD token that matches the given string:::match
Parser#isReservedWord(String):::determine if the given word is a reserved key word:::return->reservedWords->contains
Parser#isInfixOperator(char):::determine if the give work is a reserved key word:::for->i->return
Parser#scaleStmt(ColumnFormat):::scalestmt -> 'scale' scalespec scalespec -> <see above scaleTerminals array>:::match->t->matchOne->cf->Scale->toScale->setScale->scaleString->log
Parser#alignStmt(ColumnFormat):::alignstmt -> 'align' alignspec alignspec -> <see above alignTerminals array>:::match->t->matchOne->cf->Alignment->toAlignment->setAlignment->alignString->log
Parser#headerStmt(ColumnFormat):::headerstmt -> 'header' quotedstring:::match->headerString->matchQuotedString->cf->setHeader->log
Parser#widthStmt(ColumnFormat):::widthstmt -> 'width' integer:::match->width->matchNumber->cf->setWidth->log
Parser#formatStmt(ColumnFormat):::formatstmt -> 'format' quotedstring:::match->formatString->matchQuotedString->cf->setFormat->log
Parser#primary()::: Primary -> Literal | Identifier | '(' Expression ')':::e->switch->match->expression->match->break->s->if->isReservedWord->throw->st->lineno->new->SyntaxException->matchID->new->Identifier->log->break->literal->matchNumber->Double->valueOf->new->Literal->log->break->throw->st->lineno->new->SyntaxException->log->return
Parser#unary():::Unary -> ('+'|'-') Unary | Primary:::e->op->while->switch->match->break->match->break->primary->log->return->e1->new->Expression->e1->setOperator->e1->setRight->log->e1->Double->valueOf->new->Literal->setLeft
Parser#multExpression()::: MultExpression -> Unary (('*' | '/') Unary)*:::e->unary->op->while->switch->match->break->match->break->log->return->e1->new->Expression->e1->setOperator->e1->setLeft->e1->unary->setRight->log
Parser#addExpression()::: AddExpression -> MultExpression (('+' | '-') MultExpression)*:::e->multExpression->op->while->switch->match->break->match->break->log->return->e1->new->Expression->e1->setOperator->e1->setLeft->e1->multExpression->setRight->log
Parser#expression()::: Expression -> AddExpression:::e->addExpression->log->return
Parser#dataStmt(ColumnFormat):::datastmt -> 'data' expression:::match->e->expression->cf->setExpression->log
Parser#requiredStmt(ColumnFormat):::requiredstmt -> 'required' expression:::match->t->matchOne->cf->Boolean->parseBoolean->setRequired->cf->isRequired->log
Parser#statementList(ColumnFormat):::statementlist -> optionalstmt statementlist optionalstmt -> 'data' expression                 'header' quotedstring                 'width' integer                 'format' formatstring                 'align' alignspec                 'scale' scalespec                 'required' boolean:::while->if->return->if->compareTo->dataStmt->else->if->compareTo->headerStmt->else->if->compareTo->widthStmt->else->if->compareTo->formatStmt->else->if->compareTo->alignStmt->else->if->compareTo->scaleStmt->else->if->compareTo->requiredStmt->else->return
Parser#optionList(OptionFormat):::optionlist -> columspec optionlist               null columspec -> 'column' '{' statementlist '}':::while->if->return->match->match->cf->new->ColumnFormat->statementList->match->cf->validate->of->addSubFormat
Parser#optionStmt():::optionstmt -> 'option' ID '{' optionlist '}':::match->optionName->matchID->match->of->new->OptionFormat->optionList->match->return
Parser#parse(String):::parse the specification for the given option identifier:::nextToken->while->if->compareTo->nextToken->continue->match->if->compareTo->pushBack->return->optionStmt->else->nextToken->return
Parser#parseOptions()::: parser parse options:::options->new->HashSet<OptionFormat>->nextToken->while->if->compareTo->nextToken->continue->of->optionStmt->options->add->return
Parser#getOptionFormat()::: parser get option format:::return
Parser#log(boolean, String)::: parser log:::if->println
RawOutputFormatter#getHeader()::: raw output formatter get header:::if->headerBuilder->new->StringBuilder->for->i->logged->iterator->i->hasNext->headerBuilder->toString->return
RawOutputFormatter#getRow()::: raw output formatter get row:::row->new->StringBuilder->count->for->i->logged->iterator->i->hasNext->return->row->toString
RowClosure#visit(Object, boolean)::: row closure visit:::if->return->c->s->e->c->getExpression->ee->new->ExpressionExecuter->value->ee->evaluate->if->else->if->d->doubleValue->scaledValue->c->getScale->scale->df->c->getFormat->new->DecimalFormat->syms->df->getDecimalFormatSymbols->syms->setNaN->df->setDecimalFormatSymbols->df->format->c->setPreviousValue->c->getAlignment->c->getWidth->align->row->append->if->row->append
RowClosure#getRow()::: row closure get row:::return->row->toString
Scale#getFactor():::Returns the scaling factor of this Scale object:::return
Scale#toString():::Returns the string representation of this Scale object:::return
Scale#toScale(String):::Maps a string to its corresponding Scale object.:::return->map->get
Scale#keySet():::Returns an enumeration of the keys for this enumerated type:::return->map->keySet
Scale#scale(double)::: scale scale:::return
SymbolResolutionClosure#visit(Object, boolean)::: symbol resolution closure visit:::if->return->c->e->c->getExpression->previous->e->toString->ee->evaluate->if->e->toString->print->c->setExpression
SyntaxException#getMessage()::: syntax exception get message:::return
Token#toMessage()::: token to message:::switch->return->return->return->if->return->else->return->if->msg->if->return->else->return
Token#toString()::: token to string:::sb->new->StringBuilder->switch->sb->append->break->sb->append->break->sb->append->append->break->if->sb->append->else->sb->append->append->break->if->sb->append->append->else->sb->append->append->break->return->sb->toString

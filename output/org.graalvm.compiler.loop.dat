org.graalvm.compiler.loop.DefaultLoopPolicies_OptionDescriptors#get(String)->OptionDescriptor::: default loop policies_ option descriptors get
org.graalvm.compiler.loop.DefaultLoopPolicies_OptionDescriptors#iterator()->Iterator::: default loop policies_ option descriptors iterator
org.graalvm.compiler.loop.BasicInductionVariable#graph()->StructuredGraph::: basic induction variable graph
org.graalvm.compiler.loop.BasicInductionVariable#getOp()->BinaryArithmeticNode::: basic induction variable get op
org.graalvm.compiler.loop.BasicInductionVariable#setOP(BinaryArithmeticNode)->void::: basic induction variable set p
org.graalvm.compiler.loop.BasicInductionVariable#direction()->Direction::: basic induction variable direction
org.graalvm.compiler.loop.BasicInductionVariable#valueNode()->ValuePhiNode::: basic induction variable value node
org.graalvm.compiler.loop.BasicInductionVariable#initNode()->ValueNode::: basic induction variable init node
org.graalvm.compiler.loop.BasicInductionVariable#strideNode()->ValueNode::: basic induction variable stride node
org.graalvm.compiler.loop.BasicInductionVariable#isConstantInit()->boolean::: basic induction variable is constant init
org.graalvm.compiler.loop.BasicInductionVariable#isConstantStride()->boolean::: basic induction variable is constant stride
org.graalvm.compiler.loop.BasicInductionVariable#constantInit()->long::: basic induction variable constant init
org.graalvm.compiler.loop.BasicInductionVariable#constantStride()->long::: basic induction variable constant stride
org.graalvm.compiler.loop.BasicInductionVariable#extremumNode(boolean, Stamp)->ValueNode::: basic induction variable extremum node
org.graalvm.compiler.loop.BasicInductionVariable#exitValueNode()->ValueNode::: basic induction variable exit value node
org.graalvm.compiler.loop.BasicInductionVariable#isConstantExtremum()->boolean::: basic induction variable is constant extremum
org.graalvm.compiler.loop.BasicInductionVariable#constantExtremum()->long::: basic induction variable constant extremum
org.graalvm.compiler.loop.BasicInductionVariable#deleteUnusedNodes()->void::: basic induction variable delete unused nodes
org.graalvm.compiler.loop.BasicInductionVariable#toString()->String::: basic induction variable to string
org.graalvm.compiler.loop.CountedLoopInfo#maxTripCountNode()->ValueNode:::Returns a node that computes the maximum trip count of this loop
org.graalvm.compiler.loop.CountedLoopInfo#maxTripCountNode(boolean)->ValueNode:::Returns a node that computes the maximum trip count of this loop
org.graalvm.compiler.loop.CountedLoopInfo#isConstantMaxTripCount()->boolean::: counted loop info is constant max trip count
org.graalvm.compiler.loop.CountedLoopInfo#constantMaxTripCount()->UnsignedLong::: counted loop info constant max trip count
org.graalvm.compiler.loop.CountedLoopInfo#isExactTripCount()->boolean::: counted loop info is exact trip count
org.graalvm.compiler.loop.CountedLoopInfo#exactTripCountNode()->ValueNode::: counted loop info exact trip count node
org.graalvm.compiler.loop.CountedLoopInfo#isConstantExactTripCount()->boolean::: counted loop info is constant exact trip count
org.graalvm.compiler.loop.CountedLoopInfo#constantExactTripCount()->UnsignedLong::: counted loop info constant exact trip count
org.graalvm.compiler.loop.CountedLoopInfo#toString()->String::: counted loop info to string
org.graalvm.compiler.loop.CountedLoopInfo#getLimit()->ValueNode::: counted loop info get limit
org.graalvm.compiler.loop.CountedLoopInfo#getLimitTest()->IfNode::: counted loop info get limit test
org.graalvm.compiler.loop.CountedLoopInfo#getStart()->ValueNode::: counted loop info get start
org.graalvm.compiler.loop.CountedLoopInfo#isLimitIncluded()->boolean::: counted loop info is limit included
org.graalvm.compiler.loop.CountedLoopInfo#getBody()->AbstractBeginNode::: counted loop info get body
org.graalvm.compiler.loop.CountedLoopInfo#getCountedExit()->AbstractBeginNode::: counted loop info get counted exit
org.graalvm.compiler.loop.CountedLoopInfo#getDirection()->Direction::: counted loop info get direction
org.graalvm.compiler.loop.CountedLoopInfo#getCounter()->InductionVariable::: counted loop info get counter
org.graalvm.compiler.loop.CountedLoopInfo#getOverFlowGuard()->GuardingNode::: counted loop info get over flow guard
org.graalvm.compiler.loop.CountedLoopInfo#counterNeverOverflows()->boolean::: counted loop info counter never overflows
org.graalvm.compiler.loop.CountedLoopInfo#createOverFlowGuard()->GuardingNode::: counted loop info create over flow guard
org.graalvm.compiler.loop.CountedLoopInfo#getStamp()->IntegerStamp::: counted loop info get stamp
org.graalvm.compiler.loop.DefaultLoopPolicies#shouldPeel(LoopEx, ControlFlowGraph, MetaAccessProvider)->boolean::: default loop policies should peel
org.graalvm.compiler.loop.DefaultLoopPolicies#shouldFullUnroll(LoopEx)->boolean::: default loop policies should full unroll
org.graalvm.compiler.loop.DefaultLoopPolicies#shouldPartiallyUnroll(LoopEx)->boolean::: default loop policies should partially unroll
org.graalvm.compiler.loop.DefaultLoopPolicies#shouldTryUnswitch(LoopEx)->boolean::: default loop policies should try unswitch
org.graalvm.compiler.loop.DefaultLoopPolicies#shouldUnswitch(LoopEx, List)->boolean::: default loop policies should unswitch
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#valueNode()->ValueNode::: derived converted induction variable value node
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#direction()->Direction::: derived converted induction variable direction
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#initNode()->ValueNode::: derived converted induction variable init node
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#strideNode()->ValueNode::: derived converted induction variable stride node
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#isConstantInit()->boolean::: derived converted induction variable is constant init
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#isConstantStride()->boolean::: derived converted induction variable is constant stride
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#constantInit()->long::: derived converted induction variable constant init
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#constantStride()->long::: derived converted induction variable constant stride
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#extremumNode(boolean, Stamp)->ValueNode::: derived converted induction variable extremum node
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#exitValueNode()->ValueNode::: derived converted induction variable exit value node
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#isConstantExtremum()->boolean::: derived converted induction variable is constant extremum
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#constantExtremum()->long::: derived converted induction variable constant extremum
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#deleteUnusedNodes()->void::: derived converted induction variable delete unused nodes
org.graalvm.compiler.loop.DerivedConvertedInductionVariable#toString()->String::: derived converted induction variable to string
org.graalvm.compiler.loop.DerivedInductionVariable#graph()->StructuredGraph::: derived induction variable graph
org.graalvm.compiler.loop.DerivedInductionVariable#getBase()->InductionVariable::: derived induction variable get base
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#getOffset()->ValueNode::: derived offset induction variable get offset
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#direction()->Direction::: derived offset induction variable direction
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#valueNode()->ValueNode::: derived offset induction variable value node
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#isConstantInit()->boolean::: derived offset induction variable is constant init
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#isConstantStride()->boolean::: derived offset induction variable is constant stride
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#constantInit()->long::: derived offset induction variable constant init
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#constantStride()->long::: derived offset induction variable constant stride
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#initNode()->ValueNode::: derived offset induction variable init node
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#strideNode()->ValueNode::: derived offset induction variable stride node
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#extremumNode(boolean, Stamp)->ValueNode::: derived offset induction variable extremum node
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#exitValueNode()->ValueNode::: derived offset induction variable exit value node
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#isConstantExtremum()->boolean::: derived offset induction variable is constant extremum
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#constantExtremum()->long::: derived offset induction variable constant extremum
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#deleteUnusedNodes()->void::: derived offset induction variable delete unused nodes
org.graalvm.compiler.loop.DerivedOffsetInductionVariable#toString()->String::: derived offset induction variable to string
org.graalvm.compiler.loop.DerivedScaledInductionVariable#getScale()->ValueNode::: derived scaled induction variable get scale
org.graalvm.compiler.loop.DerivedScaledInductionVariable#valueNode()->ValueNode::: derived scaled induction variable value node
org.graalvm.compiler.loop.DerivedScaledInductionVariable#direction()->Direction::: derived scaled induction variable direction
org.graalvm.compiler.loop.DerivedScaledInductionVariable#initNode()->ValueNode::: derived scaled induction variable init node
org.graalvm.compiler.loop.DerivedScaledInductionVariable#strideNode()->ValueNode::: derived scaled induction variable stride node
org.graalvm.compiler.loop.DerivedScaledInductionVariable#isConstantInit()->boolean::: derived scaled induction variable is constant init
org.graalvm.compiler.loop.DerivedScaledInductionVariable#isConstantStride()->boolean::: derived scaled induction variable is constant stride
org.graalvm.compiler.loop.DerivedScaledInductionVariable#constantInit()->long::: derived scaled induction variable constant init
org.graalvm.compiler.loop.DerivedScaledInductionVariable#constantStride()->long::: derived scaled induction variable constant stride
org.graalvm.compiler.loop.DerivedScaledInductionVariable#extremumNode(boolean, Stamp)->ValueNode::: derived scaled induction variable extremum node
org.graalvm.compiler.loop.DerivedScaledInductionVariable#exitValueNode()->ValueNode::: derived scaled induction variable exit value node
org.graalvm.compiler.loop.DerivedScaledInductionVariable#isConstantExtremum()->boolean::: derived scaled induction variable is constant extremum
org.graalvm.compiler.loop.DerivedScaledInductionVariable#constantExtremum()->long::: derived scaled induction variable constant extremum
org.graalvm.compiler.loop.DerivedScaledInductionVariable#deleteUnusedNodes()->void::: derived scaled induction variable delete unused nodes
org.graalvm.compiler.loop.DerivedScaledInductionVariable#toString()->String::: derived scaled induction variable to string
org.graalvm.compiler.loop.InductionVariable#graph()->StructuredGraph::: induction variable graph
org.graalvm.compiler.loop.InductionVariable#getLoop()->LoopEx::: induction variable get loop
org.graalvm.compiler.loop.InductionVariable#direction()->Direction::: induction variable direction
org.graalvm.compiler.loop.InductionVariable#valueNode()->ValueNode:::Returns the value node that is described by this induction variable.
org.graalvm.compiler.loop.InductionVariable#initNode()->ValueNode:::Returns the node that gives the initial value of this induction variable.
org.graalvm.compiler.loop.InductionVariable#strideNode()->ValueNode:::Returns the stride of the induction variable
org.graalvm.compiler.loop.InductionVariable#isConstantInit()->boolean::: induction variable is constant init
org.graalvm.compiler.loop.InductionVariable#isConstantStride()->boolean::: induction variable is constant stride
org.graalvm.compiler.loop.InductionVariable#constantInit()->long::: induction variable constant init
org.graalvm.compiler.loop.InductionVariable#constantStride()->long::: induction variable constant stride
org.graalvm.compiler.loop.InductionVariable#extremumNode()->ValueNode:::Returns the extremum value of the induction variable
org.graalvm.compiler.loop.InductionVariable#extremumNode(boolean, Stamp)->ValueNode::: induction variable extremum node
org.graalvm.compiler.loop.InductionVariable#isConstantExtremum()->boolean::: induction variable is constant extremum
org.graalvm.compiler.loop.InductionVariable#constantExtremum()->long::: induction variable constant extremum
org.graalvm.compiler.loop.InductionVariable#exitValueNode()->ValueNode:::Returns the exit value of the induction variable
org.graalvm.compiler.loop.InductionVariable#deleteUnusedNodes()->void:::Deletes any nodes created within the scope of this object that have no usages.
org.graalvm.compiler.loop.LoopEx#loop()->Loop::: loop ex loop
org.graalvm.compiler.loop.LoopEx#inside()->LoopFragmentInside::: loop ex inside
org.graalvm.compiler.loop.LoopEx#whole()->LoopFragmentWhole::: loop ex whole
org.graalvm.compiler.loop.LoopEx#invalidateFragments()->void::: loop ex invalidate fragments
org.graalvm.compiler.loop.LoopEx#insideFrom(FixedNode)->LoopFragmentInsideFrom::: loop ex inside from
org.graalvm.compiler.loop.LoopEx#insideBefore(FixedNode)->LoopFragmentInsideBefore::: loop ex inside before
org.graalvm.compiler.loop.LoopEx#isOutsideLoop(Node)->boolean::: loop ex is outside loop
org.graalvm.compiler.loop.LoopEx#loopBegin()->LoopBeginNode::: loop ex loop begin
org.graalvm.compiler.loop.LoopEx#predecessor()->FixedNode::: loop ex predecessor
org.graalvm.compiler.loop.LoopEx#entryPoint()->FixedNode::: loop ex entry point
org.graalvm.compiler.loop.LoopEx#isCounted()->boolean::: loop ex is counted
org.graalvm.compiler.loop.LoopEx#counted()->CountedLoopInfo::: loop ex counted
org.graalvm.compiler.loop.LoopEx#parent()->LoopEx::: loop ex parent
org.graalvm.compiler.loop.LoopEx#size()->int::: loop ex size
org.graalvm.compiler.loop.LoopEx#toString()->String::: loop ex to string
org.graalvm.compiler.loop.LoopEx#reassociateInvariants()->boolean::: loop ex reassociate invariants
org.graalvm.compiler.loop.LoopEx#detectCounted()->boolean::: loop ex detect counted
org.graalvm.compiler.loop.LoopEx#loopsData()->LoopsData::: loop ex loops data
org.graalvm.compiler.loop.LoopEx#nodesInLoopBranch(NodeBitMap, AbstractBeginNode)->void::: loop ex nodes in loop branch
org.graalvm.compiler.loop.LoopEx#getInductionVariables()->EconomicMap::: loop ex get induction variables
org.graalvm.compiler.loop.LoopEx#deleteUnusedNodes()->void:::Deletes any nodes created within the scope of this object that have no usages.
org.graalvm.compiler.loop.LoopEx#canDuplicateLoop()->boolean::: loop ex can duplicate loop
org.graalvm.compiler.loop.LoopFragment#loop()->LoopEx:::Return the original LoopEx for this fragment
org.graalvm.compiler.loop.LoopFragment#duplicate()->LoopFragment::: loop fragment duplicate
org.graalvm.compiler.loop.LoopFragment#insertBefore(LoopEx)->void::: loop fragment insert before
org.graalvm.compiler.loop.LoopFragment#disconnect()->void::: loop fragment disconnect
org.graalvm.compiler.loop.LoopFragment#contains(Node)->boolean::: loop fragment contains
org.graalvm.compiler.loop.LoopFragment#getDuplicatedNode(Old)->New::: loop fragment get duplicated node
org.graalvm.compiler.loop.LoopFragment#putDuplicatedNode(Old, New)->void::: loop fragment put duplicated node
org.graalvm.compiler.loop.LoopFragment#prim(ValueNode)->ValueNode:::Gets the corresponding value in this fragment
org.graalvm.compiler.loop.LoopFragment#isDuplicate()->boolean::: loop fragment is duplicate
org.graalvm.compiler.loop.LoopFragment#original()->LoopFragment::: loop fragment original
org.graalvm.compiler.loop.LoopFragment#nodes()->NodeBitMap::: loop fragment nodes
org.graalvm.compiler.loop.LoopFragment#graph()->StructuredGraph::: loop fragment graph
org.graalvm.compiler.loop.LoopFragment#getDuplicationReplacement()->DuplicationReplacement::: loop fragment get duplication replacement
org.graalvm.compiler.loop.LoopFragment#beforeDuplication()->void::: loop fragment before duplication
org.graalvm.compiler.loop.LoopFragment#finishDuplication()->void::: loop fragment finish duplication
org.graalvm.compiler.loop.LoopFragment#patchNodes(DuplicationReplacement)->void::: loop fragment patch nodes
org.graalvm.compiler.loop.LoopFragment#computeNodes(NodeBitMap, Graph, LoopEx, Iterable, Iterable)->void::: loop fragment compute nodes
org.graalvm.compiler.loop.LoopFragment.WorkListEntry#equals(Object)->boolean::: work list entry equals
org.graalvm.compiler.loop.LoopFragment.WorkListEntry#hashCode()->int::: work list entry hash code
org.graalvm.compiler.loop.LoopFragment#isLoopNode(Node, NodeBitMap, NodeBitMap)->TriState::: loop fragment is loop node
org.graalvm.compiler.loop.LoopFragment#toHirBlocks(Iterable)->NodeIterable::: loop fragment to hir blocks
org.graalvm.compiler.loop.LoopFragment#mergeEarlyExits()->void:::Merges the early exits (i.e
org.graalvm.compiler.loop.LoopFragmentInside#duplicate()->LoopFragmentInside::: loop fragment inside duplicate
org.graalvm.compiler.loop.LoopFragmentInside#original()->LoopFragmentInside::: loop fragment inside original
org.graalvm.compiler.loop.LoopFragmentInside#appendInside(LoopEx)->void::: loop fragment inside append inside
org.graalvm.compiler.loop.LoopFragmentInside#loop()->LoopEx::: loop fragment inside loop
org.graalvm.compiler.loop.LoopFragmentInside#insertBefore(LoopEx)->void::: loop fragment inside insert before
org.graalvm.compiler.loop.LoopFragmentInside#insertWithinAfter(LoopEx, EconomicMap)->void:::Duplicate the body within the loop after the current copy copy of the body, updating the iteration limit to account for the duplication.
org.graalvm.compiler.loop.LoopFragmentInside#nodes()->NodeBitMap::: loop fragment inside nodes
org.graalvm.compiler.loop.LoopFragmentInside#exits()->NodeIterable::: loop fragment inside exits
org.graalvm.compiler.loop.LoopFragmentInside#getDuplicationReplacement()->DuplicationReplacement::: loop fragment inside get duplication replacement
org.graalvm.compiler.loop.LoopFragmentInside#beforeDuplication()->void::: loop fragment inside before duplication
org.graalvm.compiler.loop.LoopFragmentInside#prim(ValueNode)->ValueNode:::Gets the corresponding value in this fragment.
org.graalvm.compiler.loop.LoopFragmentInside#primAfter(ValueNode)->ValueNode::: loop fragment inside prim after
org.graalvm.compiler.loop.LoopFragmentInsideBefore#point()->FixedNode::: loop fragment inside before point
org.graalvm.compiler.loop.LoopFragmentInsideBefore#duplicate()->LoopFragmentInsideBefore::: loop fragment inside before duplicate
org.graalvm.compiler.loop.LoopFragmentInsideBefore#nodes()->NodeBitMap::: loop fragment inside before nodes
org.graalvm.compiler.loop.LoopFragmentInsideFrom#point()->FixedNode::: loop fragment inside from point
org.graalvm.compiler.loop.LoopFragmentInsideFrom#duplicate()->LoopFragmentInsideFrom::: loop fragment inside from duplicate
org.graalvm.compiler.loop.LoopFragmentInsideFrom#nodes()->NodeBitMap::: loop fragment inside from nodes
org.graalvm.compiler.loop.LoopFragmentWhole#duplicate()->LoopFragmentWhole::: loop fragment whole duplicate
org.graalvm.compiler.loop.LoopFragmentWhole#nodes()->NodeBitMap::: loop fragment whole nodes
org.graalvm.compiler.loop.LoopFragmentWhole#prim(ValueNode)->ValueNode::: loop fragment whole prim
org.graalvm.compiler.loop.LoopFragmentWhole#getDuplicationReplacement()->DuplicationReplacement::: loop fragment whole get duplication replacement
org.graalvm.compiler.loop.LoopFragmentWhole#entryPoint()->FixedNode::: loop fragment whole entry point
org.graalvm.compiler.loop.LoopFragmentWhole#beforeDuplication()->void::: loop fragment whole before duplication
org.graalvm.compiler.loop.LoopFragmentWhole#insertBefore(LoopEx)->void::: loop fragment whole insert before
org.graalvm.compiler.loop.LoopPolicies#shouldPeel(LoopEx, ControlFlowGraph, MetaAccessProvider)->boolean::: loop policies should peel
org.graalvm.compiler.loop.LoopPolicies#shouldFullUnroll(LoopEx)->boolean::: loop policies should full unroll
org.graalvm.compiler.loop.LoopPolicies#shouldPartiallyUnroll(LoopEx)->boolean::: loop policies should partially unroll
org.graalvm.compiler.loop.LoopPolicies#shouldTryUnswitch(LoopEx)->boolean::: loop policies should try unswitch
org.graalvm.compiler.loop.LoopPolicies#shouldUnswitch(LoopEx, List)->boolean::: loop policies should unswitch
org.graalvm.compiler.loop.LoopsData#loop(Loop)->LoopEx::: loops data loop
org.graalvm.compiler.loop.LoopsData#loop(LoopBeginNode)->LoopEx::: loops data loop
org.graalvm.compiler.loop.LoopsData#loops()->List::: loops data loops
org.graalvm.compiler.loop.LoopsData#outerFirst()->List::: loops data outer first
org.graalvm.compiler.loop.LoopsData#countedLoops()->Collection::: loops data counted loops
org.graalvm.compiler.loop.LoopsData#detectedCountedLoops()->void::: loops data detected counted loops
org.graalvm.compiler.loop.LoopsData#getCFG()->ControlFlowGraph::: loops data get g
org.graalvm.compiler.loop.LoopsData#getInductionVariable(ValueNode)->InductionVariable::: loops data get induction variable
org.graalvm.compiler.loop.LoopsData#deleteUnusedNodes()->void:::Deletes any nodes created within the scope of this object that have no usages.
org.graalvm.compiler.loop.MathUtil#add(StructuredGraph, ValueNode, ValueNode)->ValueNode::: math util add
org.graalvm.compiler.loop.MathUtil#mul(StructuredGraph, ValueNode, ValueNode)->ValueNode::: math util mul
org.graalvm.compiler.loop.MathUtil#sub(StructuredGraph, ValueNode, ValueNode)->ValueNode::: math util sub
org.graalvm.compiler.loop.MathUtil#divBefore(StructuredGraph, FixedNode, ValueNode, ValueNode, GuardingNode)->ValueNode::: math util div before
org.graalvm.compiler.loop.MathUtil#unsignedDivBefore(StructuredGraph, FixedNode, ValueNode, ValueNode, GuardingNode)->ValueNode::: math util unsigned div before

CountedLoopInfo#maxTripCountNode():::Returns a node that computes the maximum trip count of this loop:::return->maxTripCountNode
CountedLoopInfo#maxTripCountNode(boolean):::Returns a node that computes the maximum trip count of this loop:::graph->iv->valueNode->graph->stamp->iv->valueNode->stamp->max->min->absStride->if->iv->direction->iv->strideNode->iv->initNode->else->NegateNode->iv->strideNode->create->iv->initNode->range->sub->one->ConstantNode->forIntegerStamp->if->add->denominator->sub->add->div->loop->entryPoint->unsignedDivBefore->if->return->graph->addOrUniqueWithInputs->zero->ConstantNode->forIntegerStamp->noEntryCheck->IntegerLessThanNode->create->return->graph->ConditionalNode->create->addOrUniqueWithInputs
InductionVariable#valueNode():::Returns the value node that is described by this induction variable.:::
InductionVariable#initNode():::Returns the node that gives the initial value of this induction variable.:::
InductionVariable#strideNode():::Returns the stride of the induction variable:::
InductionVariable#extremumNode():::Returns the extremum value of the induction variable:::return->valueNode->stamp->extremumNode
InductionVariable#exitValueNode():::Returns the exit value of the induction variable:::
InductionVariable#deleteUnusedNodes():::Deletes any nodes created within the scope of this object that have no usages.:::
LoopEx#deleteUnusedNodes():::Deletes any nodes created within the scope of this object that have no usages.:::if->foreach->ivs->getValues->iv->deleteUnusedNodes
LoopFragment#loop():::Return the original LoopEx for this fragment:::return
LoopFragment#prim(ValueNode):::Gets the corresponding value in this fragment:::
LoopFragment#mergeEarlyExits():::Merges the early exits (i.e:::graph->graph->foreach->LoopFragment->original->loop->loop->getLoopExits->toHirBlocks->next->earlyExit->next->if->earlyExit->isDeleted->this->original->contains->continue->newEarlyExit->getDuplicatedNode->if->continue->merge->graph->new->MergeNode->add->originalEnd->graph->new->EndNode->add->newEnd->graph->new->EndNode->add->merge->addForwardEnd->merge->addForwardEnd->earlyExit->setNext->newEarlyExit->setNext->merge->setNext->exitState->if->earlyLoopExit->earlyLoopExit->stateAfter->if->originalExitState->exitState->duplicateWithVirtualState->earlyLoopExit->setStateAfter->merge->setStateAfter->originalExitState->clearAndGrow->applyToVirtual->exitState->markAndGrow->applyToVirtual->foreach->earlyExit->anchored->snapshot->anchored->replaceFirstInput->if->earlyLoopExit->finalExitState->newEarlyExitIsLoopExit->foreach->earlyLoopExit->proxies->snapshot->if->vpn->hasNoUsages->continue->if->vpn->value->vpn->replaceAtUsages->continue->replaceWith->newVpn->vpn->value->prim->if->phi->vpn->createPhi->phi->addInput->phi->addInput->else->vpn->value->vpn->if->merge->isPhiAtMerge->return->if->stateUsage->if->finalExitState->isPartOfThisState->return->return->replaceAtMatchingUsages
LoopFragmentInside#insertWithinAfter(LoopEx, EconomicMap):::Duplicate the body within the loop after the current copy copy of the body, updating the iteration limit to account for the duplication.:::patchNodes->mainLoopBegin->loop->loopBegin->backedgeValues->new->ArrayList<>->foreach->mainLoopBegin->phis->originalNode->mainPhiNode->valueAt->duplicatedNode->getDuplicatedNode->if->if->mainLoopBegin->isPhiAtMerge->valueAt->else->backedgeValues->add->index->foreach->mainLoopBegin->phis->duplicatedNode->backedgeValues->get->if->mainPhiNode->setValueAt->placeNewSegmentAndCleanup->foreach->loop->whole->nodes->filter->graph->removeFixed->graph->mainLoopBegin->graph->if->opaque->opaqueUnrolledStrides->loop->loopBegin->get->counted->loop->counted->counterStride->counted->getCounter->strideNode->if->AddNode->add->new->OpaqueNode->limit->counted->getLimit->bits->limit->stamp->getBits->newLimit->SubNode->create->overflowCheck->extremum->if->counted->getDirection->ConstantNode->CodeUtil->minValue->forIntegerBits->IntegerBelowNode->SubNode->create->create->else->ConstantNode->CodeUtil->maxValue->forIntegerBits->IntegerBelowNode->SubNode->create->create->ConditionalNode->create->compareNode->counted->getLimitTest->condition->compareNode->graph->addOrUniqueWithInputs->replaceFirstInput->opaqueUnrolledStrides->loop->loopBegin->put->else->previousValue->opaque->getValue->opaque->graph->AddNode->add->addOrUniqueWithInputs->setValue->GraphUtil->tryKillUnused->mainLoopBegin->mainLoopBegin->getUnrollFactor->setUnrollFactor->mainLoopBegin->mainLoopBegin->loopFrequency->setLoopFrequency->graph->getDebug->dump->mainLoopBegin->getDebug->mainLoopBegin->graph->dump
LoopFragmentInside#prim(ValueNode):::Gets the corresponding value in this fragment.:::loopBegin->original->loop->loopBegin->if->loopBegin->isPhiAtMerge->phi->return->phi->loopBegin->forwardEnd->valueAt->else->if->v->getDuplicatedNode->if->return->return->else->return
LoopsData#deleteUnusedNodes():::Deletes any nodes created within the scope of this object that have no usages.:::foreach->loops->loop->deleteUnusedNodes

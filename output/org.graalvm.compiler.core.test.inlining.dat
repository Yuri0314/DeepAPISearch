InliningTest#testInvokeStaticInlining()::: inlining test test invoke static inlining:::getGraph->assertInlined->getGraph->assertInlined
InliningTest#invokeStaticSnippet(boolean)::: inlining test invoke static snippet:::return->Boolean->valueOf
InliningTest#invokeStaticOnInstanceSnippet(Boolean, boolean)::: inlining test invoke static on instance snippet:::return->obj->valueOf
InliningTest#testStaticBindableInlining()::: inlining test test static bindable inlining:::getGraph->assertInlined->getGraph->assertInlined->getGraph->assertInlined->getGraph->assertInlined
InliningTest#testDependentStaticBindableInlining()::: inlining test test dependent static bindable inlining:::getGraph->assertInlined->getGraph->assertInlined
InliningTest#testStaticBindableInliningIP()::: inlining test test static bindable inlining p:::getGraph->assertInlined->assertManyMethodInfopoints->getGraph->assertInlined->assertManyMethodInfopoints->getGraph->assertInlined->assertManyMethodInfopoints->getGraph->assertInlined->assertManyMethodInfopoints
InliningTest#testDependentStaticBindableInliningIP()::: inlining test test dependent static bindable inlining p:::getGraph->assertInlined->assertManyMethodInfopoints->getGraph->assertInlined->assertManyMethodInfopoints
InliningTest#invokeConstructorSnippet(int)::: inlining test invoke constructor snippet:::return->new->SuperClass
InliningTest#invokeFinalMethodSnippet(SuperClass, SubClassA, FinalSubClass)::: inlining test invoke final method snippet:::return->superClass->publicFinalMethod->subClassA->publicFinalMethod->finalSubClass->publicFinalMethod->superClass->protectedFinalMethod->subClassA->protectedFinalMethod->finalSubClass->protectedFinalMethod
InliningTest#invokeMethodOnFinalClassSnippet(FinalSubClass)::: inlining test invoke method on final class snippet:::return->finalSubClass->publicFinalMethod->finalSubClass->publicNotOverriddenMethod->finalSubClass->publicOverriddenMethod->finalSubClass->protectedFinalMethod->finalSubClass->protectedNotOverriddenMethod->finalSubClass->protectedOverriddenMethod
InliningTest#invokeMethodOnStaticFinalFieldSnippet()::: inlining test invoke method on static final field snippet:::return->intValue->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod
InliningTest#invokeMethodOnFinalFieldSnippet()::: inlining test invoke method on final field snippet:::fields->new->FinalFields->return->intValue->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod
InliningTest#invokeMethodOnFieldSnippet()::: inlining test invoke method on field snippet:::fields->new->Fields->return->intValue->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod->publicOverriddenMethod
InliningTest.Attributes#getLength()::: attributes get length:::
InliningTest.NullAttributes#getLength()::: null attributes get length:::return
InliningTest.TenAttributes#getLength()::: ten attributes get length:::return
InliningTest#getAttributesLength(Attributes)::: inlining test get attributes length:::return->a->getLength
InliningTest#testGuardedInline()::: inlining test test guarded inline:::nullAttributes->new->NullAttributes->for->i->new->TenAttributes->getAttributesLength->test->test
InliningTest#testClassHierarchyAnalysis()::: inlining test test class hierarchy analysis:::getGraph->assertInlined->getGraph->assertInlined->getGraph->assertInlined->getGraph->assertNotInlined->getGraph->assertNotInlined->getGraph->assertNotInlined
InliningTest#testClassHierarchyAnalysisIP()::: inlining test test class hierarchy analysis p:::getGraph->assertInlined->assertManyMethodInfopoints->getGraph->assertInlined->assertManyMethodInfopoints->getGraph->assertInlined->assertManyMethodInfopoints->getGraph->assertNotInlined->assertFewMethodInfopoints->getGraph->assertNotInlined->assertFewMethodInfopoints->getGraph->assertNotInlined->assertFewMethodInfopoints
InliningTest#traceInliningTest()::: inlining test trace inlining test:::callTrivial
InliningTest#callTrivial()::: inlining test call trivial:::callNonTrivial
InliningTest#callNonTrivial()::: inlining test call non trivial:::x->for->i->return
InliningTest#testTracing()::: inlining test test tracing:::options->getInitialOptions->new->OptionValues->graph->try->f->new->TTY.Filter->getGraph->catch->finally->inliningTree->graph->getInliningLog->formatAsTree->expectedRegex->expectedPattern->Pattern->compile->Assert->expectedPattern->matcher->matches->assertTrue
InliningTest#invokeLeafClassMethodSnippet(SubClassA)::: inlining test invoke leaf class method snippet:::return->subClassA->publicFinalMethod->subClassA->publicNotOverriddenMethod->subClassA->publicOverriddenMethod
InliningTest#invokeConcreteMethodSnippet(SuperClass)::: inlining test invoke concrete method snippet:::return->superClass->publicNotOverriddenMethod->superClass->protectedNotOverriddenMethod
InliningTest#invokeSingleImplementorInterfaceSnippet(SingleImplementorInterface)::: inlining test invoke single implementor interface snippet:::return->testInterface->publicNotOverriddenMethod->testInterface->publicOverriddenMethod
InliningTest#invokeConcreteInterfaceMethodSnippet(MultipleImplementorsInterface)::: inlining test invoke concrete interface method snippet:::return->testInterface->publicNotOverriddenMethod
InliningTest#invokeOverriddenInterfaceMethodSnippet(MultipleImplementorsInterface)::: inlining test invoke overridden interface method snippet:::return->testInterface->publicOverriddenMethod
InliningTest#invokeOverriddenPublicMethodSnippet(SuperClass)::: inlining test invoke overridden public method snippet:::return->superClass->publicOverriddenMethod
InliningTest#invokeOverriddenProtectedMethodSnippet(SuperClass)::: inlining test invoke overridden protected method snippet:::return->superClass->protectedOverriddenMethod
InliningTest#getGraph(String, boolean)::: inlining test get graph:::return->getGraph
InliningTest#getGraph(String, OptionValues, boolean)::: inlining test get graph:::debug->getDebugContext->getDebugContext->try->s->debug->new->DebugDumpScope->scope->method->getResolvedJavaMethod->builder->builder->graph->getDebugGraphBuilderSuite->parse->getEagerGraphBuilderSuite->parse->try->s2->debug->scope->graphBuilderSuite->GraphBuilderConfiguration->getDefaultGraphBuilderPlugins->getDefault->withFullInfopoints->getCustomGraphBuilderSuite->getDefaultGraphBuilderSuite->context->getProviders->new->HighTierContext->debug->dump->new->CanonicalizerPhase->apply->createInliningPhase->apply->debug->dump->new->CanonicalizerPhase->apply->new->DeadCodeEliminationPhase->apply->return->catch->finally->catch->throw->debug->handle->finally
InliningTest#assertInlined(StructuredGraph)::: inlining test assert inlined:::return->assertNotInGraph
InliningTest#assertNotInlined(StructuredGraph)::: inlining test assert not inlined:::return->assertInGraph
InliningTest#assertNotInGraph(StructuredGraph, Class)::: inlining test assert not in graph:::foreach->graph->getNodes->if->clazz->isInstance->node->toString->fail->return
InliningTest#assertInGraph(StructuredGraph, Class)::: inlining test assert in graph:::foreach->graph->getNodes->if->clazz->isInstance->return->clazz->getName->fail->return
InliningTest#countMethodInfopoints(StructuredGraph)::: inlining test count method infopoints:::start->end->foreach->graph->getNodes->filter->if->ipn->getReason->else->if->ipn->getReason->return->new->intArr
InliningTest#assertManyMethodInfopoints(StructuredGraph)::: inlining test assert many method infopoints:::counts->countMethodInfopoints->if->String->format->fail->return
InliningTest#assertFewMethodInfopoints(StructuredGraph)::: inlining test assert few method infopoints:::counts->countMethodInfopoints->if->String->format->fail->return
InliningTest.MultipleImplementorsInterface#publicNotOverriddenMethod()::: multiple implementors interface public not overridden method:::
InliningTest.MultipleImplementorsInterface#publicOverriddenMethod()::: multiple implementors interface public overridden method:::
InliningTest.SingleImplementorInterface#publicNotOverriddenMethod()::: single implementor interface public not overridden method:::
InliningTest.SingleImplementorInterface#publicOverriddenMethod()::: single implementor interface public overridden method:::
InliningTest.SuperClass#publicNotOverriddenMethod()::: super class public not overridden method:::return
InliningTest.SuperClass#publicOverriddenMethod()::: super class public overridden method:::return
InliningTest.SuperClass#protectedNotOverriddenMethod()::: super class protected not overridden method:::return
InliningTest.SuperClass#protectedOverriddenMethod()::: super class protected overridden method:::return
InliningTest.SuperClass#publicFinalMethod()::: super class public final method:::return
InliningTest.SuperClass#protectedFinalMethod()::: super class protected final method:::return
InliningTest.SubClassA#publicOverriddenMethod()::: sub class a public overridden method:::return
InliningTest.SubClassA#protectedOverriddenMethod()::: sub class a protected overridden method:::return
InliningTest.SubClassB#publicOverriddenMethod()::: sub class b public overridden method:::return
InliningTest.SubClassB#protectedOverriddenMethod()::: sub class b protected overridden method:::return
InliningTest.SubClassC#publicOverriddenMethod()::: sub class c public overridden method:::return
InliningTest.SubClassC#protectedOverriddenMethod()::: sub class c protected overridden method:::return
InliningTest.FinalSubClass#publicOverriddenMethod()::: final sub class public overridden method:::return
InliningTest.FinalSubClass#protectedOverriddenMethod()::: final sub class protected overridden method:::return
NestedLoopEffectsPhaseComplexityTest#recursiveLoopMethodUnsafeLoad(int)::: nested loop effects phase complexity test recursive loop method unsafe load:::arrayIntBaseOffset->if->UNSAFE->getInt->return->for->i
NestedLoopEffectsPhaseComplexityTest#recursiveLoopMethodFieldLoad(int)::: nested loop effects phase complexity test recursive loop method field load:::if->return->for->i
NestedLoopEffectsPhaseComplexityTest#recursiveLoopMethod(int)::: nested loop effects phase complexity test recursive loop method:::if->return->for->i
NestedLoopEffectsPhaseComplexityTest#inlineDirectRecursiveLoopCallUnsafeLoad()::: nested loop effects phase complexity test inline direct recursive loop call unsafe load:::testAndTime
NestedLoopEffectsPhaseComplexityTest#inlineDirectRecursiveLoopCallFieldLoad()::: nested loop effects phase complexity test inline direct recursive loop call field load:::testAndTime
NestedLoopEffectsPhaseComplexityTest#inlineDirectRecursiveLoopCallNoReads()::: nested loop effects phase complexity test inline direct recursive loop call no reads:::testAndTime
NestedLoopEffectsPhaseComplexityTest#testAndTime(String)::: nested loop effects phase complexity test test and time:::for->i
NestedLoopEffectsPhaseComplexityTest#runAndTimePhase(StructuredGraph, BasePhase)::: nested loop effects phase complexity test run and time phase:::context->getDefaultHighTierContext->start->System->currentTimeMillis->phase->apply->end->System->currentTimeMillis->debug->g->getDebug->debug->phase->contractorName->dump->return
NestedLoopEffectsPhaseComplexityTest#prepareGraph(String, int)::: nested loop effects phase complexity test prepare graph:::callerMethod->getResolvedJavaMethod->callerGraph->parseEager->graphBuilderSuite->getDefaultGraphBuilderSuite->context->getProviders->new->HighTierContext->canonicalizer->new->CanonicalizerPhase->next->callerGraph->getNodes->first->invoke->calleeGraph->next->callTarget->targetMethod->parseBytecodes->calleeMethod->next->callTarget->targetMethod->for->i->return
NestedLoopEffectsPhaseComplexityTest#parseBytecodes(ResolvedJavaMethod, HighTierContext, CanonicalizerPhase)::: nested loop effects phase complexity test parse bytecodes:::options->getInitialOptions->newGraph->getDebugContext->new->StructuredGraph.Builder->method->build->context->getGraphBuilderSuite->apply->new->DeadCodeEliminationPhase->apply->canonicalizer->apply->return
PolymorphicInliningTest#checkJavaAgent()::: polymorphic inlining test check java agent:::Assume->SubprocessUtil->isJavaAgentAttached->assumeFalse
PolymorphicInliningTest#testInSubprocess()::: polymorphic inlining test test in subprocess:::recursionPropName->getClass->getName->if->Boolean->getBoolean->testPolymorphicInlining->testPolymorphicNotInlining->testMegamorphicInlining->testMegamorphicNotInlining->else->vmArgs->getVMCommandLine->withoutDebuggerArguments->getCanonicalName->vmArgs->add->vmArgs->add->proc->getClass->getName->java->if->Assert->String->format->fail
PolymorphicInliningTest#polymorphicCallsite(SuperClass)::: polymorphic inlining test polymorphic callsite:::return->receiver->publicOverriddenMethod
PolymorphicInliningTest#testPolymorphicInlining()::: polymorphic inlining test test polymorphic inlining:::for->i->graph->getGraph->getNodeCount->assertTrue->getNodeCount->assertTrue->getNodeCount->assertTrue
PolymorphicInliningTest#polymorphicCallsite1(SuperClass):::This snippet is identical to #polymorphicCallsite(SuperClass), and is for avoiding interference of the receiver type profile from different unit tests.:::return->receiver->publicOverriddenMethod
PolymorphicInliningTest#testPolymorphicNotInlining()::: polymorphic inlining test test polymorphic not inlining:::for->i->graph->getGraph->getNodeCount->assertTrue->getNodeCount->assertTrue
PolymorphicInliningTest#polymorphicCallsite2(SuperClass):::This snippet is identical to #polymorphicCallsite(SuperClass), and is for avoiding interference of the receiver type profile from different unit tests.:::return->receiver->publicOverriddenMethod
PolymorphicInliningTest#testMegamorphicInlining()::: polymorphic inlining test test megamorphic inlining:::for->i->for->i->graph->getGraph->getNodeCount->assertTrue->getNodeCount->assertTrue
PolymorphicInliningTest#polymorphicCallsite3(SuperClass):::This snippet is identical to #polymorphicCallsite(SuperClass), and is for avoiding interference of the receiver type profile from different unit tests.:::return->receiver->publicOverriddenMethod
PolymorphicInliningTest#testMegamorphicNotInlining()::: polymorphic inlining test test megamorphic not inlining:::for->i->graph->getGraph->getNodeCount->assertTrue->getNodeCount->assertTrue
PolymorphicInliningTest#getGraph(String, boolean)::: polymorphic inlining test get graph:::debug->getDebugContext->try->s->debug->new->DebugDumpScope->scope->method->getResolvedJavaMethod->builder->builder->graph->getDebugGraphBuilderSuite->parse->getEagerGraphBuilderSuite->parse->try->s2->debug->scope->graphBuilderSuite->GraphBuilderConfiguration->getDefaultGraphBuilderPlugins->getDefault->withFullInfopoints->getCustomGraphBuilderSuite->getDefaultGraphBuilderSuite->context->getProviders->new->HighTierContext->debug->dump->new->CanonicalizerPhase->apply->createInliningPhase->apply->debug->dump->new->CanonicalizerPhase->apply->new->DeadCodeEliminationPhase->apply->return->catch->finally->catch->throw->debug->handle->finally
PolymorphicInliningTest#getNodeCount(StructuredGraph, Class)::: polymorphic inlining test get node count:::return->graph->getNodes->filter->count
PolymorphicInliningTest.SuperClass#publicOverriddenMethod()::: super class public overridden method:::
PolymorphicInliningTest.SubClassA#publicOverriddenMethod()::: sub class a public overridden method:::return
PolymorphicInliningTest.SubClassB#publicOverriddenMethod()::: sub class b public overridden method:::return
PolymorphicInliningTest.SubClassC#publicOverriddenMethod()::: sub class c public overridden method:::return
PolymorphicInliningTest.SubClassD#publicOverriddenMethod()::: sub class d public overridden method:::return
PolymorphicInliningTest.SubClassE#publicOverriddenMethod()::: sub class e public overridden method:::return
PolymorphicInliningTest.SubClassF#publicOverriddenMethod()::: sub class f public overridden method:::return
PolymorphicInliningTest.SubClassG#publicOverriddenMethod()::: sub class g public overridden method:::return
PolymorphicInliningTest.SubClassH#publicOverriddenMethod()::: sub class h public overridden method:::return
PolymorphicInliningTest.NotInlinableSubClass#publicOverriddenMethod()::: not inlinable sub class public overridden method:::return

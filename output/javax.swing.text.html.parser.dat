AttributeList#getName()::: attribute list get name:::return
AttributeList#getType()::: attribute list get type:::return
AttributeList#getModifier()::: attribute list get modifier:::return
AttributeList#getValues()::: attribute list get values:::return->values->elements
AttributeList#getValue()::: attribute list get value:::return
AttributeList#getNext()::: attribute list get next:::return
AttributeList#toString()::: attribute list to string:::return
AttributeList#defineAttributeType(String, int)::: attribute list define attribute type:::num->Integer->valueOf->attributeTypes->put->attributeTypes->put
AttributeList#name2type(String):::Converts an attribute name to the type:::i->attributeTypes->get->return->i->intValue
AttributeList#type2name(int):::Converts a type to the attribute name:::return->attributeTypes->Integer->valueOf->get
ContentModel#empty():::Return true if the content model could match an empty input stream.:::switch->return->for->m->return->for->m->return->return
ContentModel#getElements(Vector):::Update elemVec with the list of elements that are part of the this contentModel.:::switch->getElements->break->for->m->break->elemVec->addElement
ContentModel#first(Object):::Return true if the token could potentially be the first token in the input stream.:::switch->return->first->for->m->return->e->if->Element->getMaxIndex->Element->getMaxIndex->new->booleanArr->new->booleanArr->if->return->for->m->return->return
ContentModel#first():::Return the element that must be next.:::switch->return->return->first->return
ContentModel#toString():::Convert to a string.:::switch->return->return->return->data->str->for->m->return->return->content->toString
ContentModelState#getModel():::Return the content model that is relevant to the current state.:::m->for->i->return
ContentModelState#terminate():::Check if the state can be terminated:::switch->if->empty->return->return->next->terminate->for->m->return->m->for->i->return->next->terminate->m->for->i->for->m->empty->if->return->return->next->terminate->return
ContentModelState#first():::Check if the state can be terminated:::switch->return->return->model->first->m->for->i->return->m->first->return->model->first
ContentModelState#advance(Object):::Advance this state to a new state:::switch->if->model->first->return->new->ContentModelState->new->ContentModelState->advance->if->if->return->next->advance->else->return->break->if->model->first->return->new->ContentModelState->advance->if->return->next->advance->else->return->if->model->first->return->new->ContentModelState->advance->if->return->next->advance->else->return->for->m->break->m->for->i->if->m->first->m->empty->if->return->new->ContentModelState->advance->else->return->new->ContentModelState->new->ContentModelState->advance->break->m->complete->for->i->if->if->return->next->advance->else->return->break->if->if->return->new->ContentModelState->return->return
DocumentParser#parse(Reader, HTMLEditorKit.ParserCallback, boolean):::Parse an HTML stream, given a DTD.:::parse->callback->getEndOfLineString->handleEndOfLineString
DocumentParser#handleStartTag(TagElement):::Handle Start Tag.:::elem->tag->getElement->if->else->if->else->if->else->if->else->if->else->if->if->if->tag->fictional->tag->getHTMLTag->getCurrentPos->debug->else->tag->getHTMLTag->getAttributes->getCurrentPos->debug->if->tag->fictional->attrs->new->SimpleAttributeSet->attrs->addAttribute->callback->tag->getHTMLTag->getBlockStartPosition->handleStartTag->else->callback->tag->getHTMLTag->getAttributes->getBlockStartPosition->handleStartTag->flushAttributes
DocumentParser#handleComment(char[])::: document parser handle comment:::if->new->String->getCurrentPos->debug->callback->getBlockStartPosition->handleComment
DocumentParser#handleEmptyTag(TagElement):::Handle Empty Tag.:::elem->tag->getElement->if->atts->getAttributes->if->content->atts->getAttribute->if->if->atts->getAttribute->equalsIgnoreCase->if->content->equalsIgnoreCase->content->equalsIgnoreCase->throw->new->ChangedCharSetException->else->if->atts->getAttribute->equalsIgnoreCase->throw->new->ChangedCharSetException->if->if->if->tag->fictional->tag->getHTMLTag->getCurrentPos->debug->else->tag->getHTMLTag->getAttributes->getCurrentPos->debug->if->tag->fictional->attrs->new->SimpleAttributeSet->attrs->addAttribute->callback->tag->getHTMLTag->getBlockStartPosition->handleSimpleTag->else->callback->tag->getHTMLTag->getAttributes->getBlockStartPosition->handleSimpleTag->flushAttributes
DocumentParser#handleEndTag(TagElement):::Handle End Tag.:::elem->tag->getElement->if->else->if->else->if->else->if->else->if->if->tag->getHTMLTag->getCurrentPos->debug->callback->tag->getHTMLTag->getBlockStartPosition->handleEndTag
DocumentParser#handleText(char[]):::Handle Text.:::if->if->callback->getBlockStartPosition->handleComment->return->if->if->new->String->getCurrentPos->debug->callback->getBlockStartPosition->handleText
DocumentParser#handleError(int, String)::: document parser handle error:::if->getCurrentPos->debug->callback->getCurrentPos->handleError
DocumentParser#debug(String)::: document parser debug:::println
DTD#getName():::Gets the name of the DTD.:::return
DTD#getEntity(String):::Gets an entity by name.:::return->entityHash->get
DTD#getEntity(int):::Gets a character entity.:::return->entityHash->Integer->valueOf->get
DTD#elementExists(String):::Returns true if the element is part of the DTD, otherwise returns false.:::return->equals->elementHash->get
DTD#getElement(String):::Gets an element by name:::e->elementHash->get->if->elements->size->new->Element->elements->addElement->elementHash->put->return
DTD#getElement(int):::Gets an element by index.:::return->elements->elementAt
DTD#defineEntity(String, int, char[]):::Defines an entity:::ent->entityHash->get->if->new->Entity->entityHash->put->if->switch->entityHash->Integer->valueOf->put->break->return
DTD#defineElement(String, int, boolean, boolean, ContentModel, BitSet, BitSet, AttributeList):::Returns the Element which matches the specified parameters:::e->getElement->return
DTD#defineAttributes(String, AttributeList):::Defines attributes for an Element.:::e->getElement
DTD#defEntity(String, int, int):::Creates and returns a character Entity.:::data->return->defineEntity
DTD#defEntity(String, int, String):::Creates and returns an Entity.:::len->str->length->data->new->charArr->str->getChars->return->defineEntity
DTD#defElement(String, int, boolean, boolean, ContentModel, String[], String[], AttributeList):::Creates and returns an Element.:::excl->if->new->BitSet->foreach->if->str->length->excl->getElement->getIndex->set->incl->if->new->BitSet->foreach->if->str->length->incl->getElement->getIndex->set->return->defineElement
DTD#defAttributeList(String, int, int, String, String, AttributeList):::Creates and returns an AttributeList responding to a new attribute.:::vals->if->new->Vector<String>->for->s->new->StringTokenizer->s->hasMoreTokens->return->new->AttributeList
DTD#defContentModel(int, Object, ContentModel):::Creates and returns a new content model.:::return->new->ContentModel
DTD#toString():::Returns a string representation of this DTD.:::return
DTD#putDTDHash(String, DTD):::Put a name and appropriate DTD to hashtable.:::getDtdHash->put
DTD#getDTD(String):::Returns a DTD with the specified name:::name->toLowerCase->dtd->getDtdHash->get->if->new->DTD->return
DTD#getDtdHash()::: d get dtd hash:::appContext->AppContext->getAppContext->result->appContext->get->if->new->Hashtable<String,DTD>->appContext->put->return
DTD#read(DataInputStream):::Recreates a DTD from an archived format.:::if->in->readInt->names->in->readShort->new->StringArr->for->i->num->in->readShort->for->i->in->readShort->for->i
DTD#readContentModel(DataInputStream, String[])::: d read content model:::flag->in->readByte->switch->return->type->in->readByte->m->readContentModel->next->readContentModel->return->defContentModel->type->in->readByte->el->in->readShort->getElement->next->readContentModel->return->defContentModel->throw->new->IOException
DTD#readNameArray(DataInputStream, String[])::: d read name array:::num->in->readShort->if->return->result->new->StringArr->for->i->return
DTD#readAttributeList(DataInputStream, String[])::: d read attribute list:::result->for->num->in->readByte->return
Element#getMaxIndex()::: element get max index:::value->AppContext->getAppContext->get->return->value->intValue
Element#getName():::Get the name of the element.:::return
Element#omitStart():::Return true if the start tag can be omitted.:::return
Element#omitEnd():::Return true if the end tag can be omitted.:::return
Element#getType():::Get type.:::return
Element#getContent():::Get content model:::return
Element#getAttributes():::Get the attributes.:::return
Element#getIndex():::Get index.:::return
Element#isEmpty():::Check if empty:::return
Element#toString():::Convert to a string.:::return
Element#getAttribute(String):::Get an attribute by name.:::for->a->return
Element#getAttributeByValue(String):::Get an attribute by value.:::for->a->return
Element#name2type(String):::Converts nm to type:::val->contentTypes->get->return->val->intValue
Entity#getName():::Gets the name of the entity.:::return
Entity#getType():::Gets the type of the entity.:::return
Entity#isParameter():::Returns true if it is a parameter entity.:::return
Entity#isGeneral():::Returns true if it is a general entity.:::return
Entity#getData():::Returns the data.:::return
Entity#getString():::Returns the data as a String.:::return->new->String
Entity#name2type(String):::Converts nm string to the corresponding entity type:::i->entityTypes->get->return->i->intValue
Parser#getCurrentLine()::: parser get current line:::return
Parser#getBlockStartPosition():::Returns the start position of the current block:::return->Math->max
Parser#makeTag(Element, boolean):::Makes a TagElement.:::return->new->TagElement
Parser#makeTag(Element):::Makes a TagElement.:::return->makeTag
Parser#getAttributes():::Returns attributes for the current tag.:::return
Parser#flushAttributes():::Removes the current attributes.:::attributes->removeAttributes
Parser#handleText(char[]):::Called when PCDATA is encountered.:::
Parser#handleTitle(char[]):::Called when an HTML title tag is encountered.:::handleText
Parser#handleComment(char[]):::Called when an HTML comment is encountered.:::
Parser#handleEOFInComment():::Called when the content terminates without closing the HTML comment.:::commentEndPos->strIndexOf->if->getChars->handleComment->try->in->close->getChars->new->CharArrayReader->catch->error->finally->resetStrBuffer->else->error
Parser#handleEmptyTag(TagElement):::Called when an empty tag is encountered.:::
Parser#handleStartTag(TagElement):::Called when a start tag is encountered.:::
Parser#handleEndTag(TagElement):::Called when an end tag is encountered.:::
Parser#handleError(int, String):::An error has occurred.:::
Parser#handleText(TagElement):::Output text.:::if->tag->breaksFlow->if->if->if->last->breaksFlow->stack->advance->return->if->if->if->newtext->new->charArr->System->arraycopy->if->tag->getElement->isEmpty->newtext->new->charArr->System->arraycopy->if->tag->getElement->getName->equals->handleTitle->else->handleText
Parser#error(String, String, String, String):::Invokes the error handler.:::handleError
Parser#error(String, String, String):::Invokes the error handler with the 3rd error message argument "?".:::error
Parser#error(String, String):::Invokes the error handler with the 2nd and 3rd error message argument "?".:::error
Parser#error(String):::Invokes the error handler with the 1st, 2nd and 3rd error message argument "?".:::error
Parser#startTag(TagElement):::Handle a start tag:::elem->tag->getElement->if->elem->isEmpty->last->breaksFlow->handleText->else->for->a->if->elem->isEmpty->handleEmptyTag->else->new->TagStack->handleStartTag
Parser#endTag(boolean):::Handle an end tag:::handleText->if->omitEnd->getName->error->else->if->stack->terminate->getName->error->handleEndTag
Parser#ignoreElement(Element)::: parser ignore element:::stackElement->getName->elemName->elem->getName->if->elemName->equals->elemName->equals->elemName->equals->return->if->elemName->equals->elemName->equals->s->while->getName->equals->if->return->if->stackElement->equals->elemName->equals->elemName->equals->elemName->equals->stackElement->equals->stackElement->equals->elemName->equals->elemName->equals->stackElement->equals->elemName->equals->return->return
Parser#markFirstTime(Element)::: parser mark first time:::elemName->elem->getName->if->elemName->equals->else->if->elemName->equals->else->if->elemName->equals->if->newBuf->new->charArr
Parser#legalElementContext(Element):::Create a legal content for an element.:::if->if->makeTag->startTag->return->legalElementContext->return->if->stack->advance->markFirstTime->return->insertTag->stackElemName->getName->elemName->elem->getName->if->stackElemName->equals->elemName->equals->stackElemName->equals->elemName->equals->stackElemName->equals->elemName->equals->if->getName->elem->getName->elem->getName->equals->if->ignoreElement->elem->getName->error->return->if->stackElemName->equals->elemName->equals->elemName->equals->elemName->equals->elemName->equals->e->dtd->getElement->t->makeTag->legalTagContext->startTag->elem->getName->error->return->legalElementContext->if->stack->terminate->omitEnd->for->s->next->stack->first->if->next->omitStart->t->makeTag->legalTagContext->startTag->if->next->omitStart->elem->getName->error->return->legalElementContext->if->content->stack->contentModel->elemVec->new->Vector<Element>->if->content->getElements->foreach->if->stack->e->getIndex->excluded->continue->reqAtts->for->a->e->getAttributes->if->continue->m->e->getContent->if->m->first->t->makeTag->legalTagContext->startTag->e->getName->error->return->legalElementContext->if->stack->terminate->omitEnd->if->omitEnd->elem->getName->error->endTag->return->legalElementContext->return
Parser#legalTagContext(TagElement):::Create a legal context for a tag.:::if->tag->getElement->legalElementContext->tag->getElement->markFirstTime->return->if->tag->breaksFlow->breaksFlow->endTag->legalTagContext->return->for->s->tag->getElement->getName->error
Parser#errorContext():::Error context:::for->getElement->if->legalElementContext->makeTag->startTag
Parser#addString(int):::Add a char to the string buffer.:::if->newstr->new->charArr->System->arraycopy
Parser#getString(int):::Get the string that's been accumulated.:::newStr->new->charArr->System->arraycopy->return->new->String
Parser#getChars(int)::: parser get chars:::newStr->new->charArr->System->arraycopy->return
Parser#getChars(int, int)::: parser get chars:::newStr->new->charArr->System->arraycopy->return
Parser#resetStrBuffer()::: parser reset str buffer:::
Parser#strIndexOf(char)::: parser str index of:::for->i->return
Parser#skipSpace():::Skip space:::while->switch->readCh->break->if->readCh->readCh->else->break->readCh->break->return
Parser#parseIdentifier(boolean):::Parse identifier:::switch->if->break->break->return->while->addString->switch->readCh->if->break->break->return
Parser#parseEntityReference():::Parse an entity reference:::pos->if->readCh->n->readCh->if->if->while->readCh->else->readCh->lch->Character->toLowerCase->while->if->else->readCh->Character->toLowerCase->switch->readCh->break->if->readCh->readCh->else->break->readCh->break->data->mapNumericReference->return->addString->if->parseIdentifier->error->data->return->else->if->parseIdentifier->data->return->semicolon->switch->readCh->break->if->readCh->readCh->else->break->readCh->break->nm->getString->ent->dtd->getEntity->if->dtd->nm->toLowerCase->getEntity->if->ent->isGeneral->if->nm->length->error->return->new->charArr->str->b->str->length->new->charArr->str->getChars->return->return->ent->getData
Parser#mapNumericReference(int):::Converts numeric character reference to char array:::data->if->try->Character->toChars->catch->new->charArr->finally->else->new->charArr->return
Parser#parseComment():::Parse a comment:::while->c->switch->if->if->readCh->return->if->if->readCh->return->else->addString->addString->continue->break->if->readCh->readCh->if->return->if->if->readCh->return->else->addString->addString->continue->addString->break->handleEOFInComment->return->readCh->break->readCh->break->if->readCh->readCh->else->break->readCh->break->addString
Parser#parseLiteral(boolean):::Parse literal content:::while->c->switch->getName->error->endTag->return->readCh->i->length->j->if->while->Character->toLowerCase->charAt->if->length->if->endTag->return->break->data->parseEntityReference->if->newtext->Math->max->new->charArr->System->arraycopy->System->arraycopy->continue->readCh->break->if->readCh->readCh->else->break->readCh->break->if->newtext->new->charArr->System->arraycopy
Parser#parseAttributeValue(boolean):::Parse attribute value:::delim->switch->readCh->break->while->c->switch->readCh->if->return->getString->break->if->readCh->readCh->else->if->return->getString->break->if->readCh->if->return->getString->break->if->return->getString->readCh->break->readCh->if->return->getString->else->if->error->if->return->getString->else->continue->break->if->error->if->return->getString->readCh->break->if->readCh->break->data->parseEntityReference->for->i->continue->return->getString->if->readCh->break->addString
Parser#parseAttributeSpecificationList(Element):::Parse attribute specification List:::while->skipSpace->switch->return->if->readCh->readCh->parseComment->else->elem->getName->error->readCh->continue->att->attname->attvalue->if->parseIdentifier->getString->skipSpace->if->readCh->skipSpace->elem->getAttribute->parseAttributeValue->else->elem->getAttributeByValue->if->elem->getAttribute->if->att->getValue->else->else->if->readCh->continue->else->if->readCh->skipSpace->if->parseIdentifier->getString->if->readCh->skipSpace->if->readCh->skipSpace->elem->getAttribute->parseAttributeValue->else->elem->getAttributeByValue->if->elem->getAttribute->if->att->getValue->else->str->new->String->elem->getName->error->readCh->continue->else->if->attributes->isEmpty->readCh->skipSpace->elem->getName->elem->getAttribute->parseAttributeValue->else->if->readCh->skipSpace->parseAttributeValue->error->return->else->str->new->String->elem->getName->error->if->readCh->continue->else->return->if->att->getName->else->elem->getName->error->if->attributes->isDefined->elem->getName->error->if->else->if->contains->elem->getName->error->attkey->HTML->getAttributeKey->if->attributes->addAttribute->else->attributes->addAttribute
Parser#parseDTDMarkup():::Parses the Document Type Declaration markup declaration:::strBuff->new->StringBuilder->readCh->while->switch->readCh->return->strBuff->toString->error->return->strBuff->toString->readCh->break->readCh->break->if->readCh->readCh->else->break->strBuff->append->readCh->break
Parser#parseMarkupDeclarations(StringBuffer):::Parse markup declarations:::if->strBuff->length->length->strBuff->toString->toUpperCase->equals->parseDTDMarkup->return->return
Parser#parseInvalidTag():::Parse an invalid tag.:::while->skipSpace->switch->readCh->return->return->readCh
Parser#parseTag():::Parse a start or end tag.:::elem->net->warned->unknown->switch->readCh->switch->readCh->while->if->if->readCh->readCh->if->readCh->if->newtext->new->charArr->System->arraycopy->handleText->parseComment->dtd->getElement->makeTag->getChars->handleComment->continue->else->if->error->skipSpace->switch->continue->readCh->return->return->readCh->if->String->valueOf->error->break->strBuff->new->StringBuffer->while->strBuff->append->if->parseMarkupDeclarations->return->switch->readCh->error->return->readCh->break->if->readCh->readCh->else->break->readCh->break->switch->readCh->readCh->if->error->return->break->if->parseIdentifier->error->return->skipSpace->switch->readCh->break->break->error->while->readCh->if->readCh->break->elemStr->getString->if->dtd->elementExists->error->if->dtd->getElement->else->dtd->getElement->break->if->elem->getName->error->return->if->if->if->else->if->t->makeTag->handleText->attributes->addAttribute->makeTag->handleEmptyTag->return->if->stackElem->getName->if->stackElem->equals->if->elem->getName->equals->elem->getName->error->return->if->stackElem->equals->stackElem->equals->if->elem->getName->equals->elem->getName->equals->elem->getName->error->return->sp->while->if->elem->getName->error->return->elemName->elem->getName->if->elemName->equals->elemName->equals->if->elemName->equals->while->omitEnd->endTag->if->endTag->return->while->endTag->endTag->return->error->return->if->parseIdentifier->if->error->return->else->elemStr->getString->if->elemStr->equals->if->dtd->elementExists->error->dtd->getElement->else->dtd->getElement->parseAttributeSpecificationList->switch->readCh->if->readCh->break->error->break->if->if->elem->getName->equals->error->if->elem->isEmpty->if->readCh->else->if->if->readCh->readCh->else->tag->makeTag->if->legalTagContext->if->return->startTag->if->elem->isEmpty->switch->elem->getType->parseLiteral->break->parseLiteral->break->if->break
Parser#parseScript()::: parser parse script:::charsToAdd->new->charArr->insideComment->while->i->while->readCh->if->return->if->START_COMMENT->charAt->while->START_COMMENT->length->START_COMMENT->charAt->readCh->if->START_COMMENT->length->if->while->END_COMMENT->length->END_COMMENT->charAt->readCh->if->END_COMMENT->length->if->for->j->continue->switch->error->return->readCh->addString->break->if->readCh->readCh->else->addString->break->addString->readCh->break
Parser#parseContent():::Parse Content:::curThread->Thread->currentThread->for
Parser#getEndOfLineString():::Returns the end of line string:::if->if->return->else->return->else->if->return->else->return
Parser#parse(Reader):::Parse an HTML stream, given a DTD.:::try->readCh->new->charArr->new->charArr->parseContent->while->endTag->in->close->catch->errorContext->error->throw->errorContext->e->getClass->getName->e->getMessage->error->e->printStackTrace->errorContext->error->e->printStackTrace->throw->finally->for
Parser#readCh()::: parser read ch:::if->for->if->return->return
Parser#getCurrentPos():::Returns the current position.:::return
ParserDelegator#setDefaultDTD():::Sets the default DTD.:::getDefaultDTD
ParserDelegator#getDefaultDTD()::: parser delegator get default d:::appContext->AppContext->getAppContext->dtd->appContext->get->if->_dtd->nm->try->DTD->getDTD->catch->println->finally->createDTD->appContext->put->return
ParserDelegator#createDTD(DTD, String):::Recreates a DTD from an archived format with the specified name.:::in->debug->try->path->getResourceAsStream->if->dtd->new->BufferedInputStream->new->DataInputStream->read->DTD->putDTDHash->catch->println->finally->return
ParserDelegator#parse(Reader, HTMLEditorKit.ParserCallback, boolean)::: parser delegator parse:::getDefaultDTD->new->DocumentParser->parse
ParserDelegator#getResourceAsStream(String):::Fetch a resource relative to the ParserDelegator classfile:::return->AccessController->new->PrivilegedAction<InputStream>->doPrivileged
ParserDelegator#readObject(ObjectInputStream)::: parser delegator read object:::s->defaultReadObject->setDefaultDTD
TagElement#breaksFlow():::Returns true if this tag causes a line break to the flow of data, otherwise returns false.:::return->htmlTag->breaksFlow
TagElement#isPreformatted():::Returns true if this tag is pre-formatted.:::return->htmlTag->isPreformatted
TagElement#getElement():::Returns the element.:::return
TagElement#getHTMLTag():::Returns the tag constant corresponding to the name of the element:::return
TagElement#fictional():::Returns true if the tag is fictional.:::return
TagStack#first():::Return the element that must come next in the input stream.:::return->state->first
TagStack#contentModel():::Return the ContentModel that must be satisfied by what comes next in the input stream.:::if->return->else->return->state->getModel
TagStack#excluded(int):::Return true if the element that is contained at the index specified by the parameter is part of the exclusions specified in the DTD for the element currently on the TagStack.:::return->exclusions->elem->getIndex->get
TagStack#advance(Element):::Advance the state by reducing the given element:::if->exclusions->elem->getIndex->get->return->if->newState->state->advance->if->return->else->if->getType->return->return->inclusions->elem->getIndex->get
TagStack#terminate():::Return true if the current state can be terminated.:::return->state->terminate
TagStack#toString():::Convert to a string.:::return->tag->getElement->getName->tag->getElement->getName
NPrintWriter#println(char[])::: print writer println:::if->return->partialArray->for->i->if->super->print->if->return->super->println

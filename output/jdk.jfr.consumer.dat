jdk.jfr.consumer.ChunkParser#readEvent()->RecordedEvent::: chunk parser read event
jdk.jfr.consumer.ChunkParser#getTypes()->Collection::: chunk parser get types
jdk.jfr.consumer.ChunkParser#getEventTypes()->List::: chunk parser get event types
jdk.jfr.consumer.ChunkParser#isLastChunk()->boolean::: chunk parser is last chunk
jdk.jfr.consumer.ChunkParser#nextChunkParser()->ChunkParser::: chunk parser next chunk parser
jdk.jfr.consumer.ConstantMap#get(long)->Object::: constant map get
jdk.jfr.consumer.ConstantMap#resolve()->void::: constant map resolve
jdk.jfr.consumer.ConstantMap#put(long, Object)->void::: constant map put
jdk.jfr.consumer.ConstantMap#setIsResolving()->void::: constant map set is resolving
jdk.jfr.consumer.ConstantMap#setResolved()->void::: constant map set resolved
jdk.jfr.consumer.ConstantMap#getName()->String::: constant map get name
jdk.jfr.consumer.EventParser#parse(RecordingInput)->Object::: event parser parse
jdk.jfr.consumer.LongMap#put(long, T)->void::: long map put
jdk.jfr.consumer.LongMap#get(long)->T::: long map get
jdk.jfr.consumer.LongMap#iterator()->Iterator::: long map iterator
jdk.jfr.consumer.LongMap#keys()->Iterator::: long map keys
jdk.jfr.consumer.ObjectFactory#create(Type, TimeConverter)->ObjectFactory::: object factory create
jdk.jfr.consumer.ObjectFactory#createObject(long, Object)->T::: object factory create object
jdk.jfr.consumer.ObjectFactory#createTyped(List, long, Object[])->T::: object factory create typed
jdk.jfr.consumer.Parser#parse(RecordingInput)->Object:::Parses data from a RecordingInput and return an object.
jdk.jfr.consumer.ParserFactory#getParsers()->LongMap::: parser factory get parsers
jdk.jfr.consumer.ParserFactory#getConstantPools()->LongMap::: parser factory get constant pools
jdk.jfr.consumer.ParserFactory#getTypeMap()->LongMap::: parser factory get type map
jdk.jfr.consumer.RecordedClass#createFactory(Type, TimeConverter)->ObjectFactory::: recorded class create factory
jdk.jfr.consumer.RecordedClass#getModifiers()->int:::Returns the modifiers of the class
jdk.jfr.consumer.RecordedClass#getClassLoader()->RecordedClassLoader:::Returns the class loader that defined the class
jdk.jfr.consumer.RecordedClass#getName()->String:::Returns the fully qualified name of the class (for example, "java.lang.String").
jdk.jfr.consumer.RecordedClass#getId()->long:::Returns a unique ID for the class
jdk.jfr.consumer.RecordedClassLoader#createFactory(Type, TimeConverter)->ObjectFactory::: recorded class loader create factory
jdk.jfr.consumer.RecordedClassLoader#getType()->RecordedClass:::Returns the class of the class loader
jdk.jfr.consumer.RecordedClassLoader#getName()->String:::Returns the name of the class loader (for example, "boot", "platform", and "app").
jdk.jfr.consumer.RecordedClassLoader#getId()->long:::Returns a unique ID for the class loader
jdk.jfr.consumer.RecordedEvent#getStackTrace()->RecordedStackTrace:::Returns the stack trace that was created when the event was committed, or null if the event lacks a stack trace.
jdk.jfr.consumer.RecordedEvent#getThread()->RecordedThread:::Returns the thread from which the event was committed, or null if the thread was not recorded.
jdk.jfr.consumer.RecordedEvent#getEventType()->EventType:::Returns the event type that describes the event.
jdk.jfr.consumer.RecordedEvent#getStartTime()->Instant:::Returns the start time of the event
jdk.jfr.consumer.RecordedEvent#getEndTime()->Instant:::Returns the end time of the event
jdk.jfr.consumer.RecordedEvent#getDuration()->Duration:::Returns the duration of the event, measured in nanoseconds.
jdk.jfr.consumer.RecordedEvent#getFields()->List:::Returns the list of descriptors that describes the fields of the event.
jdk.jfr.consumer.RecordedFrame#createFactory(Type, TimeConverter)->ObjectFactory::: recorded frame create factory
jdk.jfr.consumer.RecordedFrame#isJavaFrame()->boolean:::Returns true if this is a Java frame, false otherwise
jdk.jfr.consumer.RecordedFrame#getBytecodeIndex()->int:::Returns the bytecode index for the execution point that is represented by this recorded frame.
jdk.jfr.consumer.RecordedFrame#getLineNumber()->int:::Returns the line number for the execution point that is represented by this recorded frame, or -1 if doesn't exist
jdk.jfr.consumer.RecordedFrame#getType()->String:::Returns the frame type for the execution point that is represented by this recorded frame (for example, "Interpreted", "JIT compiled" or "Inlined").
jdk.jfr.consumer.RecordedFrame#getMethod()->RecordedMethod:::Returns the method for the execution point that is represented by this recorded frame.
jdk.jfr.consumer.RecordedMethod#createFactory(Type, TimeConverter)->ObjectFactory::: recorded method create factory
jdk.jfr.consumer.RecordedMethod#getType()->RecordedClass:::Returns the class this method belongs to, if it belong to a Java frame
jdk.jfr.consumer.RecordedMethod#getName()->String:::Returns the name of this method, for example "toString"
jdk.jfr.consumer.RecordedMethod#getDescriptor()->String:::Returns the method descriptor for this method (for example, "(Ljava/lang/String;)V")
jdk.jfr.consumer.RecordedMethod#getModifiers()->int:::Returns the modifiers for this method
jdk.jfr.consumer.RecordedMethod#isHidden()->boolean:::Returns whether this method is hidden (for example, wrapper code in a lambda expressions).
jdk.jfr.consumer.RecordedObject#getTyped(String, Class, T)->T::: recorded object get typed
jdk.jfr.consumer.RecordedObject#hasField(String)->boolean:::Returns true if a field with the given name exists, false otherwise.
jdk.jfr.consumer.RecordedObject#getValue(String)->T:::Returns the value of the field with the given name
jdk.jfr.consumer.RecordedObject#getFields()->List:::Returns an immutable list of the fields for this object.
jdk.jfr.consumer.RecordedObject#getBoolean(String)->boolean:::Returns the value of a field of type boolean
jdk.jfr.consumer.RecordedObject#getByte(String)->byte:::Returns the value of a field of type byte
jdk.jfr.consumer.RecordedObject#getChar(String)->char:::Returns the value of a field of type char
jdk.jfr.consumer.RecordedObject#getShort(String)->short:::Returns the value of a field of type short or of another primitive type convertible to type short by a widening conversion
jdk.jfr.consumer.RecordedObject#getInt(String)->int:::Returns the value of a field of type int or of another primitive type that is convertible to type int by a widening conversion
jdk.jfr.consumer.RecordedObject#getFloat(String)->float:::Returns the value of a field of type float or of another primitive type convertible to type float by a widening conversion
jdk.jfr.consumer.RecordedObject#getLong(String)->long:::Returns the value of a field of type long or of another primitive type that is convertible to type long by a widening conversion
jdk.jfr.consumer.RecordedObject#getDouble(String)->double:::Returns the value of a field of type double or of another primitive type that is convertible to type double by a widening conversion
jdk.jfr.consumer.RecordedObject#getString(String)->String:::Returns the value of a field of type String
jdk.jfr.consumer.RecordedObject#getDuration(String)->Duration:::Returns the value of a timespan field
jdk.jfr.consumer.RecordedObject#getInstant(String)->Instant:::Returns the value of a timestamp field
jdk.jfr.consumer.RecordedObject#getClass(String)->RecordedClass:::Returns the value of a field of type Class
jdk.jfr.consumer.RecordedObject#getThread(String)->RecordedThread:::Returns the value of a field of type Thread
jdk.jfr.consumer.RecordedObject#toString()->String:::Returns a textual representation of this object.
jdk.jfr.consumer.RecordedObject#getOffsetDateTime(String)->OffsetDateTime::: recorded object get offset date time
jdk.jfr.consumer.RecordedStackTrace#createFactory(Type, TimeConverter)->ObjectFactory::: recorded stack trace create factory
jdk.jfr.consumer.RecordedStackTrace#getFrames()->List:::Returns the frames in the stack trace.
jdk.jfr.consumer.RecordedStackTrace#isTruncated()->boolean:::Returns true if the stack trace is truncated due to its size, false otherwise.
jdk.jfr.consumer.RecordedThread#createFactory(Type, TimeConverter)->ObjectFactory::: recorded thread create factory
jdk.jfr.consumer.RecordedThread#getOSName()->String:::Returns the thread name used by the operating system.
jdk.jfr.consumer.RecordedThread#getOSThreadId()->long:::Returns the thread ID used by the operating system.
jdk.jfr.consumer.RecordedThread#getThreadGroup()->RecordedThreadGroup:::Returns the Java thread group, if available.
jdk.jfr.consumer.RecordedThread#getJavaName()->String:::Returns the Java thread name, or null if if doesn't exist
jdk.jfr.consumer.RecordedThread#getJavaThreadId()->long:::Returns the Java thread ID, or -1 if it's not a Java thread.
jdk.jfr.consumer.RecordedThread#getId()->long:::Returns a unique ID for both native threads and Java threads that can't be reused within the lifespan of the JVM
jdk.jfr.consumer.RecordedThreadGroup#createFactory(Type, TimeConverter)->ObjectFactory::: recorded thread group create factory
jdk.jfr.consumer.RecordedThreadGroup#getName()->String:::Returns the name of the thread group, or null if doesn't exist.
jdk.jfr.consumer.RecordedThreadGroup#getParent()->RecordedThreadGroup:::Returns the parent thread group, or null if it doesn't exist.
jdk.jfr.consumer.RecordingFile#readEvent()->RecordedEvent:::Reads the next event in the recording.
jdk.jfr.consumer.RecordingFile#hasMoreEvents()->boolean:::Returns true if unread events exist in the recording file, false otherwise.
jdk.jfr.consumer.RecordingFile#readEventTypes()->List:::Returns a list of all event types in this recording.
jdk.jfr.consumer.RecordingFile#readTypes()->List::: recording file read types
jdk.jfr.consumer.RecordingFile#close()->void:::Closes this recording file and releases any system resources that are associated with it.
jdk.jfr.consumer.RecordingFile#readAllEvents(Path)->List:::Returns a list of all events in a file
jdk.jfr.consumer.TimeConverter#convertTimestamp(long)->long::: time converter convert timestamp
jdk.jfr.consumer.TimeConverter#convertTimespan(long)->long::: time converter convert timespan
jdk.jfr.consumer.TimeConverter#getZoneOffset()->ZoneOffset::: time converter get zone offset

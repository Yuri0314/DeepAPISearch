AnnotationVisitor#visit(String, Object):::Visits a primitive value of the annotation.:::if->av->visit
AnnotationVisitor#visitEnum(String, String, String):::Visits an enumeration value of the annotation.:::if->av->visitEnum
AnnotationVisitor#visitAnnotation(String, String):::Visits a nested annotation value of the annotation.:::if->return->av->visitAnnotation->return
AnnotationVisitor#visitArray(String):::Visits an array value of the annotation:::if->return->av->visitArray->return
AnnotationVisitor#visitEnd():::Visits the end of the annotation.:::if->av->visitEnd
AnnotationWriter#getSize():::Returns the size of this annotation writer list.:::size->aw->while->return
AnnotationWriter#put(ByteVector):::Puts the annotations of this annotation writer list into the given byte vector.:::n->size->aw->last->while->aw->visitEnd->out->putInt->out->putShort->while->out->putByteArray
AnnotationWriter#put(AnnotationWriter[], int, ByteVector):::Puts the given annotation lists into the given byte vector.:::size->for->i->out->putInt->putByte->for->i
AnnotationWriter#putTarget(int, TypePath, ByteVector):::Puts the given type reference and type path into the given bytevector:::switch->out->putShort->break->out->putByte->break->out->putInt->break->out->put12->break->if->out->putByte->else->length->out->putByteArray
Attribute#isUnknown():::Returns <tt>true</tt> if this type of attribute is unknown:::return
Attribute#isCodeAttribute():::Returns <tt>true</tt> if this type of attribute is a code attribute.:::return
Attribute#getLabels():::Returns the labels corresponding to this attribute.:::return
Attribute#read(ClassReader, int, int, char[], int, Label[]):::Reads a #type type attribute:::attr->new->Attribute->new->byteArr->System->arraycopy->return
Attribute#write(ClassWriter, byte[], int, int, int):::Returns the byte array form of this attribute.:::v->new->ByteVector->return
Attribute#getCount():::Returns the length of the attribute list that begins with this attribute.:::count->attr->while->return
Attribute#getSize(ClassWriter, byte[], int, int, int):::Returns the size of all the attributes in this attribute list.:::attr->size->while->cw->newUTF8->attr->write->return
Attribute#put(ClassWriter, byte[], int, int, int, ByteVector):::Writes all the attributes of this attribute list in the given byte vector.:::attr->while->b->attr->write->out->cw->newUTF8->putShort->putInt->out->putByteArray
ByteVector#putByte(int):::Puts a byte into this byte vector:::length->if->enlarge->return
ByteVector#put11(int, int):::Puts two bytes into this byte vector:::length->if->enlarge->data->return
ByteVector#putShort(int):::Puts a short into this byte vector:::length->if->enlarge->data->return
ByteVector#put12(int, int):::Puts a byte and a short into this byte vector:::length->if->enlarge->data->return
ByteVector#putInt(int):::Puts an int into this byte vector:::length->if->enlarge->data->return
ByteVector#putLong(long):::Puts a long into this byte vector:::length->if->enlarge->data->i->return
ByteVector#putUTF8(String):::Puts an UTF8 string into this byte vector:::charLength->s->length->if->throw->new->IllegalArgumentException->len->if->enlarge->data->for->i->return
ByteVector#encodeUTF8(String, int, int):::Puts an UTF8 string into this byte vector:::charLength->s->length->byteLength->c->for->j->if->throw->new->IllegalArgumentException->start->if->if->enlarge->len->for->j->return
ByteVector#putByteArray(byte[], int, int):::Puts an array of bytes into this byte vector:::if->enlarge->if->System->arraycopy->return
ClassReader#getAccess():::Returns the class's access flags (see Opcodes):::return->readUnsignedShort
ClassReader#getClassName():::Returns the internal name of the class (see Type#getInternalName() getInternalName).:::return->new->charArr->readClass
ClassReader#getSuperName():::Returns the internal of name of the super class (see Type#getInternalName() getInternalName):::return->new->charArr->readClass
ClassReader#getInterfaces():::Returns the internal names of the class's interfaces (see Type#getInternalName() getInternalName).:::index->n->readUnsignedShort->interfaces->new->StringArr->if->buf->new->charArr->for->i->return
ClassReader#copyPool(ClassWriter):::Copies the constant pool data into the given ClassWriter:::buf->new->charArr->ll->items2->new->ItemArr->for->i->off->putByteArray
ClassReader#accept(ClassVisitor, int):::Makes the given visitor visit the Java class of this ClassReader :::accept
ClassReader#accept(ClassVisitor, Attribute[], int):::Makes the given visitor visit the Java class of this ClassReader:::u->c->new->charArr->context->new->Context->access->readUnsignedShort->name->readClass->superClass->readClass->interfaces->readUnsignedShort->new->StringArr->for->i->signature->sourceFile->sourceDebug->enclosingOwner->enclosingName->enclosingDesc->moduleMainClass->anns->ianns->tanns->itanns->innerClasses->module->packages->attributes->getAttributes->for->i->readUnsignedShort->classVisitor->readInt->visit->if->classVisitor->visitSource->if->readModule->if->classVisitor->visitOuterClass->if->for->i->readUnsignedShort->v->if->for->i->readUnsignedShort->v->if->for->i->readUnsignedShort->v->if->for->i->readUnsignedShort->v->while->attr->classVisitor->visitAttribute->if->v->for->i->readUnsignedShort->for->i->readUnsignedShort->for->i->readUnsignedShort->classVisitor->visitEnd
ClassReader#readLabel(int, Label[]):::Returns the label corresponding to the given offset:::if->new->Label->return
ClassReader#getItemCount():::Returns the number of constant pool items in #b b.:::return
ClassReader#getItem(int):::Returns the start index of the constant pool item in #b b, plus one:::return
ClassReader#getMaxStringLength():::Returns the maximum length of the strings contained in the constant pool of the class.:::return
ClassReader#readByte(int):::Reads a byte value in #b b:::return
ClassReader#readUnsignedShort(int):::Reads an unsigned short value in #b b:::b->return
ClassReader#readShort(int):::Reads a signed short value in #b b:::b->return
ClassReader#readInt(int):::Reads a signed int value in #b b:::b->return
ClassReader#readLong(int):::Reads a signed long value in #b b:::l1->readInt->l0->readInt->return
ClassReader#readUTF8(int, char[]):::Reads an UTF8 string constant pool item in #b b:::item->readUnsignedShort->if->return->s->if->return->return->readUnsignedShort->readUTF
ClassReader#readClass(int, char[]):::Reads a class constant pool item in #b b:::return->readStringish
ClassReader#readModule(int, char[]):::Reads a module constant pool item in #b b:::return->readStringish
ClassReader#readPackage(int, char[]):::Reads a module constant pool item in #b b:::return->readStringish
ClassReader#readConst(int, char[]):::Reads a numeric or string constant pool item in #b b:::index->switch->return->readInt->return->Float->readInt->intBitsToFloat->return->readLong->return->Double->readLong->longBitsToDouble->return->Type->readUTF8->getObjectType->return->readUTF8->return->Type->readUTF8->getMethodType->tag->readByte->items->cpIndex->readUnsignedShort->itf->owner->readClass->readUnsignedShort->name->readUTF8->desc->readUTF8->return->new->Handle
ClassVisitor#visit(int, int, String, String, String, String[]):::Visits the header of the class.:::if->cv->visit
ClassVisitor#visitSource(String, String):::Visits the source of the class.:::if->cv->visitSource
ClassVisitor#visitModule(String, int, String):::Visit the module corresponding to the class.:::if->throw->new->RuntimeException->if->return->cv->visitModule->return
ClassVisitor#visitOuterClass(String, String, String):::Visits the enclosing class of the class:::if->cv->visitOuterClass
ClassVisitor#visitAnnotation(String, boolean):::Visits an annotation of the class.:::if->return->cv->visitAnnotation->return
ClassVisitor#visitTypeAnnotation(int, TypePath, String, boolean):::Visits an annotation on a type in the class signature.:::if->throw->new->RuntimeException->if->return->cv->visitTypeAnnotation->return
ClassVisitor#visitAttribute(Attribute):::Visits a non standard attribute of the class.:::if->cv->visitAttribute
ClassVisitor#visitInnerClass(String, String, String, int):::Visits information about an inner class:::if->cv->visitInnerClass
ClassVisitor#visitField(int, String, String, String, Object):::Visits a field of the class.:::if->return->cv->visitField->return
ClassVisitor#visitMethod(int, String, String, String, String[]):::Visits a method of the class:::if->return->cv->visitMethod->return
ClassVisitor#visitEnd():::Visits the end of the class:::if->cv->visitEnd
ClassWriter#toByteArray():::Returns the bytecode of the class that was build with this class writer.:::if->throw->new->RuntimeException->size->nbFields->fb->while->fb->getSize->nbMethods->mb->while->mb->getSize->attributeCount->if->newUTF8->if->newUTF8->if->newUTF8->if->newUTF8->if->newUTF8->if->newUTF8->if->if->newUTF8->if->newUTF8->if->anns->getSize->newUTF8->if->ianns->getSize->newUTF8->if->tanns->getSize->newUTF8->if->itanns->getSize->newUTF8->if->newUTF8->if->attrs->getCount->attrs->getSize->out->new->ByteVector->out->putInt->putInt->out->putShort->putByteArray->mask->out->putShort->putShort->putShort->out->putShort->for->i->out->putShort->while->fb->put->out->putShort->while->mb->put->out->putShort->if->out->newUTF8->putShort->out->putInt->putShort->out->putByteArray->if->out->newUTF8->putShort->putInt->putShort->if->out->newUTF8->putShort->putInt->putShort->if->len->out->newUTF8->putShort->putInt->out->putByteArray->if->out->newUTF8->putShort->moduleWriter->put->moduleWriter->putAttributes->if->out->newUTF8->putShort->putInt->out->putShort->putShort->if->out->newUTF8->putShort->putInt->if->if->out->newUTF8->putShort->putInt->if->out->newUTF8->putShort->out->putInt->putShort->out->putByteArray->if->out->newUTF8->putShort->anns->put->if->out->newUTF8->putShort->ianns->put->if->out->newUTF8->putShort->tanns->put->if->out->newUTF8->putShort->itanns->put->if->attrs->put->if->hasFrames->while->new->ClassReader->accept->return->toByteArray->return
ClassWriter#newConstItem(Object):::Adds a number or string constant to the constant pool of the class being build:::if->val->intValue->return->newInteger->else->if->val->intValue->return->newInteger->else->if->val->charValue->return->newInteger->else->if->val->intValue->return->newInteger->else->if->val->booleanValue->return->newInteger->else->if->val->floatValue->return->newFloat->else->if->val->longValue->return->newLong->else->if->val->doubleValue->return->newDouble->else->if->return->newStringishItem->else->if->t->s->t->getSort->if->return->t->getInternalName->newStringishItem->else->if->return->t->getDescriptor->newStringishItem->else->return->t->getDescriptor->newStringishItem->else->if->h->return->newHandleItem->else->throw->new->IllegalArgumentException
ClassWriter#newConst(Object):::Adds a number or string constant to the constant pool of the class being build:::return->newConstItem
ClassWriter#newUTF8(String):::Adds an UTF8 string to the constant pool of the class being build:::key->set->result->get->if->pool->putByte->putUTF8->new->Item->put->return
ClassWriter#newStringishItem(int, String):::Adds a string reference, a class reference, a method type, a module or a package to the constant pool of the class being build:::key2->set->result->get->if->pool->newUTF8->put12->new->Item->put->return
ClassWriter#newClass(String):::Adds a class reference to the constant pool of the class being build:::return->newStringishItem
ClassWriter#newMethodType(String):::Adds a method type reference to the constant pool of the class being build:::return->newStringishItem
ClassWriter#newModule(String):::Adds a module reference to the constant pool of the class being build:::return->newStringishItem
ClassWriter#newPackage(String):::Adds a package reference to the constant pool of the class being build:::return->newStringishItem
ClassWriter#newHandleItem(int, String, String, String, boolean):::Adds a handle to the constant pool of the class being build:::key4->set->result->get->if->if->newField->put112->else->newMethod->put112->new->Item->put->return
ClassWriter#newHandle(int, String, String, String):::Adds a handle to the constant pool of the class being build:::return->newHandle
ClassWriter#newHandle(int, String, String, String, boolean):::Adds a handle to the constant pool of the class being build:::return->newHandleItem
ClassWriter#newInvokeDynamicItem(String, String, Handle, Object...):::Adds an invokedynamic reference to the constant pool of the class being build:::bootstrapMethods->if->new->ByteVector->position->hashCode->bsm->hashCode->bootstrapMethods->bsm->isInterface->newHandle->putShort->argsLength->bootstrapMethods->putShort->for->i->data->length->result->while->if->continue->resultPosition->for->p->break->bootstrapMethodIndex->if->else->new->Item->result->set->put->key3->set->get->if->newNameType->put122->new->Item->put->return
ClassWriter#newInvokeDynamic(String, String, Handle, Object...):::Adds an invokedynamic reference to the constant pool of the class being build:::return->newInvokeDynamicItem
ClassWriter#newFieldItem(String, String, String):::Adds a field reference to the constant pool of the class being build:::key3->set->result->get->if->newClass->newNameType->put122->new->Item->put->return
ClassWriter#newField(String, String, String):::Adds a field reference to the constant pool of the class being build:::return->newFieldItem
ClassWriter#newMethodItem(String, String, String, boolean):::Adds a method reference to the constant pool of the class being build:::type->key3->set->result->get->if->newClass->newNameType->put122->new->Item->put->return
ClassWriter#newMethod(String, String, String, boolean):::Adds a method reference to the constant pool of the class being build:::return->newMethodItem
ClassWriter#newInteger(int):::Adds an integer to the constant pool of the class being build:::key->set->result->get->if->pool->putByte->putInt->new->Item->put->return
ClassWriter#newFloat(float):::Adds a float to the constant pool of the class being build:::key->set->result->get->if->pool->putByte->putInt->new->Item->put->return
ClassWriter#newLong(long):::Adds a long to the constant pool of the class being build:::key->set->result->get->if->pool->putByte->putLong->new->Item->put->return
ClassWriter#newDouble(double):::Adds a double to the constant pool of the class being build:::key->set->result->get->if->pool->putByte->putLong->new->Item->put->return
ClassWriter#newNameType(String, String):::Adds a name and type to the constant pool of the class being build:::return->newNameTypeItem
ClassWriter#newNameTypeItem(String, String):::Adds a name and type to the constant pool of the class being build:::key2->set->result->get->if->newUTF8->newUTF8->put122->new->Item->put->return
ClassWriter#addType(String):::Adds the given internal name to #typeTable and returns its index:::key->set->result->get->if->addType->return
ClassWriter#addUninitializedType(String, int):::Adds the given "uninitialized" type to #typeTable and returns its index:::type->hashCode->result->get->if->addType->return
ClassWriter#getMergedType(int, int):::Returns the index of the common super type of the two given types:::result->get->if->t->u->getCommonSuperClass->addType->new->Item->put->return
ClassWriter#getCommonSuperClass(String, String):::Returns the common super type of the two given types:::c->d->classLoader->getClass->getClassLoader->try->Class->type1->replace->forName->Class->type2->replace->forName->catch->throw->e->toString->new->RuntimeException->finally->if->c->isAssignableFrom->return->if->d->isAssignableFrom->return->if->c->isInterface->d->isInterface->return->else->do->c->getSuperclass->while->c->isAssignableFrom->return->c->getName->replace
CurrentFrame#execute(int, int, ClassWriter, Item):::Sets this CurrentFrame to the input stack map frame of the next "current" instruction, i.e:::super->execute->successor->new->Frame->merge->set
FieldVisitor#visitAnnotation(String, boolean):::Visits an annotation of the field.:::if->return->fv->visitAnnotation->return
FieldVisitor#visitTypeAnnotation(int, TypePath, String, boolean):::Visits an annotation on the type of the field.:::if->throw->new->RuntimeException->if->return->fv->visitTypeAnnotation->return
FieldVisitor#visitAttribute(Attribute):::Visits a non standard attribute of the field.:::if->fv->visitAttribute
FieldVisitor#visitEnd():::Visits the end of the field:::if->fv->visitEnd
FieldWriter#getSize():::Returns the size of this field.:::size->if->cw->newUTF8->if->if->cw->newUTF8->if->cw->newUTF8->if->cw->newUTF8->if->cw->newUTF8->anns->getSize->if->cw->newUTF8->ianns->getSize->if->cw->newUTF8->tanns->getSize->if->cw->newUTF8->itanns->getSize->if->attrs->getSize->return
FieldWriter#put(ByteVector):::Puts the content of this field into the given byte vector.:::FACTOR->mask->out->putShort->putShort->putShort->attributeCount->if->if->if->if->if->if->if->if->if->if->attrs->getCount->out->putShort->if->out->cw->newUTF8->putShort->out->putInt->putShort->if->if->out->cw->newUTF8->putShort->putInt->if->out->cw->newUTF8->putShort->putInt->if->out->cw->newUTF8->putShort->out->putInt->putShort->if->out->cw->newUTF8->putShort->anns->put->if->out->cw->newUTF8->putShort->ianns->put->if->out->cw->newUTF8->putShort->tanns->put->if->out->cw->newUTF8->putShort->itanns->put->if->attrs->put
Frame#set(ClassWriter, int, Object[], int, Object[]):::Sets this frame to the given value.:::i->convert->while->nStackTop->for->j->new->intArr->convert
Frame#set(Frame):::Sets this frame to the value of the given frame:::
Frame#type(ClassWriter, String):::Returns the int encoding of the given type.:::t->index->desc->charAt->desc->indexOf->switch->desc->charAt->return->return->return->return->return->desc->desc->length->substring->return->cw->addType->data->dims->while->desc->charAt->switch->desc->charAt->break->break->break->break->break->break->break->break->desc->desc->length->substring->cw->addType->return
Frame#initInputFrame(ClassWriter, int, Type[], int):::Initializes the input frame of the first basic block from the method descriptor.:::new->intArr->new->intArr->i->if->if->cw->addType->else->for->j->while
Frame#execute(int, int, ClassWriter, Item):::Simulates the action of the given instruction on the output stack frame.:::t1->t2->t3->t4->switch->break->push->break->push->break->push->push->break->push->break->push->push->break->switch->push->break->push->push->break->push->break->push->push->break->cw->addType->push->break->cw->addType->push->break->cw->addType->push->break->cw->addType->push->break->get->push->break->pop->push->break->pop->push->push->break->pop->push->break->pop->push->push->break->pop->pop->push->break->pop->set->if->get->if->set->else->if->set->break->pop->pop->set->set->if->get->if->set->else->if->set->break->pop->break->pop->break->pop->break->pop->break->pop->push->push->break->pop->pop->push->push->push->break->pop->pop->pop->push->push->push->push->break->pop->pop->push->push->push->push->break->pop->pop->pop->push->push->push->push->push->break->pop->pop->pop->pop->push->push->push->push->push->push->break->pop->pop->push->push->break->pop->push->break->pop->push->push->break->pop->push->break->pop->push->push->break->pop->push->push->break->set->break->pop->push->push->break->pop->push->break->pop->push->push->break->pop->push->break->pop->push->break->throw->new->RuntimeException->push->break->pop->break->pop->push->break->pop->pop->break->pop->if->pop->if->charAt->init->push->break->pop->push->break->cw->addUninitializedType->push->break->pop->switch->push->break->push->break->push->break->push->break->push->break->push->break->push->break->push->break->break->s->pop->if->s->charAt->push->else->cw->addType->push->break->pop->if->s->charAt->push->else->cw->addType->push->break->pop->push->break
Frame#merge(ClassWriter, Frame, int):::Merges the input frame of the given basic block with the input and output frames of this basic block:::changed->i->s->dim->kind->t->nLocal->nStack->if->new->intArr->for->if->for->if->new->intArr->merge->return->nInputStack->if->new->intArr->for->for->return
Handle#getTag():::Returns the kind of field or method designated by this handle.:::return
Handle#getOwner():::Returns the internal name of the class that owns the field or method designated by this handle.:::return
Handle#getName():::Returns the name of the field or method designated by this handle.:::return
Handle#getDesc():::Returns the descriptor of the field or method designated by this handle.:::return
Handle#isInterface():::Returns true if the owner of the field or method designated by this handle is an interface.:::return
Handle#toString():::Returns the textual representation of this handle:::return
Handler#remove(Handler, Label, Label):::Removes the range between start and end from the given exception handlers.:::if->return->else->remove->hstart->hend->s->e->if->if->if->else->else->if->else->g->new->Handler->return
Item#set(int):::Sets this item to an integer item.:::
Item#set(long):::Sets this item to a long item.:::
Item#set(float):::Sets this item to a float item.:::Float->floatToRawIntBits
Item#set(double):::Sets this item to a double item.:::Double->doubleToRawLongBits
Item#set(int, String, String, String):::Sets this item to an item that do not hold a primitive value.:::switch->strVal1->hashCode->return->strVal1->hashCode->strVal2->hashCode->return->strVal1->hashCode->strVal2->hashCode->strVal3->hashCode
Item#set(String, String, int):::Sets the item to an InvokeDynamic item.:::strVal1->hashCode->strVal2->hashCode
Item#set(int, int):::Sets the item to a BootstrapMethod item.:::
Item#isEqualTo(Item):::Indicates if the given item is equal to this one:::switch->return->equals->return->return->return->equals->return->equals->equals->return->equals->equals->return->equals->equals->equals
Label#getOffset():::Returns the offset corresponding to this label:::if->throw->new->IllegalStateException->return
Label#put(MethodWriter, ByteVector, int, boolean):::Puts a reference to this label in the bytecode of a method:::if->if->addReference->out->putInt->else->addReference->out->putShort->else->if->out->putInt->else->out->putShort
Label#resolve(MethodWriter, int, byte[]):::Resolves all forward references to this label:::needUpdate->i->while->source->reference->offset->if->if->opcode->if->else->else->return
Label#getFirst():::Returns the first label of the series to which this label belongs:::return
Label#inSubroutine(long):::Returns true is this basic block belongs to the given subroutine.:::if->return->return
Label#inSameSubroutine(Label):::Returns true if this basic block and the given one belong to a common subroutine.:::if->return->for->i->return
Label#addToSubroutine(long, int):::Marks this basic block as belonging to the given subroutine.:::if->new->intArr
Label#visitSubroutine(Label, long, int):::Finds the basic blocks that belong to a given subroutine, and marks these blocks as belonging to this subroutine:::stack->while->l->if->if->continue->if->if->l->inSameSubroutine->e->new->Edge->else->if->l->inSubroutine->continue->l->addToSubroutine->e->while->if->if
Label#toString():::Returns a string representation of this label.:::return->System->identityHashCode
MethodVisitor#visitParameter(String, int):::Visits a parameter of this method.:::if->throw->new->RuntimeException->if->mv->visitParameter
MethodVisitor#visitAnnotationDefault():::Visits the default value of this annotation interface method.:::if->return->mv->visitAnnotationDefault->return
MethodVisitor#visitAnnotation(String, boolean):::Visits an annotation of this method.:::if->return->mv->visitAnnotation->return
MethodVisitor#visitTypeAnnotation(int, TypePath, String, boolean):::Visits an annotation on a type in the method signature.:::if->throw->new->RuntimeException->if->return->mv->visitTypeAnnotation->return
MethodVisitor#visitParameterAnnotation(int, String, boolean):::Visits an annotation of a parameter this method.:::if->return->mv->visitParameterAnnotation->return
MethodVisitor#visitAttribute(Attribute):::Visits a non standard attribute of this method.:::if->mv->visitAttribute
MethodVisitor#visitCode():::Starts the visit of the method's code, if any (i.e:::if->mv->visitCode
MethodVisitor#visitFrame(int, int, Object[], int, Object[]):::Visits the current state of the local variables and operand stack elements:::if->mv->visitFrame
MethodVisitor#visitInsn(int):::Visits a zero operand instruction.:::if->mv->visitInsn
MethodVisitor#visitIntInsn(int, int):::Visits an instruction with a single int operand.:::if->mv->visitIntInsn
MethodVisitor#visitVarInsn(int, int):::Visits a local variable instruction:::if->mv->visitVarInsn
MethodVisitor#visitTypeInsn(int, String):::Visits a type instruction:::if->mv->visitTypeInsn
MethodVisitor#visitFieldInsn(int, String, String, String):::Visits a field instruction:::if->mv->visitFieldInsn
MethodVisitor#visitMethodInsn(int, String, String, String):::Visits a method instruction:::if->itf->visitMethodInsn->return->if->mv->visitMethodInsn
MethodVisitor#visitMethodInsn(int, String, String, String, boolean):::Visits a method instruction:::if->if->throw->new->IllegalArgumentException->visitMethodInsn->return->if->mv->visitMethodInsn
MethodVisitor#visitInvokeDynamicInsn(String, String, Handle, Object...):::Visits an invokedynamic instruction.:::if->mv->visitInvokeDynamicInsn
MethodVisitor#visitJumpInsn(int, Label):::Visits a jump instruction:::if->mv->visitJumpInsn
MethodVisitor#visitLabel(Label):::Visits a label:::if->mv->visitLabel
MethodVisitor#visitLdcInsn(Object):::Visits a LDC instruction:::if->mv->visitLdcInsn
MethodVisitor#visitIincInsn(int, int):::Visits an IINC instruction.:::if->mv->visitIincInsn
MethodVisitor#visitTableSwitchInsn(int, int, Label, Label...):::Visits a TABLESWITCH instruction.:::if->mv->visitTableSwitchInsn
MethodVisitor#visitLookupSwitchInsn(Label, int[], Label[]):::Visits a LOOKUPSWITCH instruction.:::if->mv->visitLookupSwitchInsn
MethodVisitor#visitMultiANewArrayInsn(String, int):::Visits a MULTIANEWARRAY instruction.:::if->mv->visitMultiANewArrayInsn
MethodVisitor#visitInsnAnnotation(int, TypePath, String, boolean):::Visits an annotation on an instruction:::if->throw->new->RuntimeException->if->return->mv->visitInsnAnnotation->return
MethodVisitor#visitTryCatchBlock(Label, Label, Label, String):::Visits a try catch block.:::if->mv->visitTryCatchBlock
MethodVisitor#visitTryCatchAnnotation(int, TypePath, String, boolean):::Visits an annotation on an exception handler type:::if->throw->new->RuntimeException->if->return->mv->visitTryCatchAnnotation->return
MethodVisitor#visitLocalVariable(String, String, String, Label, Label, int):::Visits a local variable declaration.:::if->mv->visitLocalVariable
MethodVisitor#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean):::Visits an annotation on a local variable type.:::if->throw->new->RuntimeException->if->return->mv->visitLocalVariableAnnotation->return
MethodVisitor#visitLineNumber(int, Label):::Visits a line number declaration.:::if->mv->visitLineNumber
MethodVisitor#visitMaxs(int, int):::Visits the maximum stack size and the maximum number of local variables of the method.:::if->mv->visitMaxs
MethodVisitor#visitEnd():::Visits the end of the method:::if->mv->visitEnd
MethodWriter#getSize():::Returns the size of the bytecode of this method.:::if->return->size->if->if->throw->new->RuntimeException->cw->newUTF8->if->cw->newUTF8->if->cw->newUTF8->if->cw->newUTF8->if->zip->cw->newUTF8->if->cw->newUTF8->ctanns->getSize->if->cw->newUTF8->ictanns->getSize->if->cattrs->getSize->if->cw->newUTF8->if->if->cw->newUTF8->if->cw->newUTF8->if->cw->newUTF8->cw->newUTF8->if->cw->newUTF8->if->cw->newUTF8->if->cw->newUTF8->anns->getSize->if->cw->newUTF8->ianns->getSize->if->cw->newUTF8->tanns->getSize->if->cw->newUTF8->itanns->getSize->if->cw->newUTF8->for->i->if->cw->newUTF8->for->i->if->attrs->getSize->return
MethodWriter#put(ByteVector):::Puts the bytecode of this method in the given byte vector.:::FACTOR->mask->out->putShort->putShort->putShort->if->out->putByteArray->return->attributeCount->if->if->if->if->if->if->if->if->if->if->if->if->if->if->if->attrs->getCount->out->putShort->if->size->if->if->if->if->if->ctanns->getSize->if->ictanns->getSize->if->cattrs->getSize->out->cw->newUTF8->putShort->putInt->out->putShort->putShort->out->putInt->putByteArray->out->putShort->if->h->while->out->putShort->putShort->putShort->putShort->if->if->if->if->if->if->if->cattrs->getCount->out->putShort->if->out->cw->newUTF8->putShort->out->putInt->putShort->out->putByteArray->if->out->cw->newUTF8->putShort->out->putInt->putShort->out->putByteArray->if->out->cw->newUTF8->putShort->out->putInt->putShort->out->putByteArray->if->zip->out->cw->newUTF8->putShort->out->putInt->putShort->out->putByteArray->if->out->cw->newUTF8->putShort->ctanns->put->if->out->cw->newUTF8->putShort->ictanns->put->if->cattrs->put->if->out->cw->newUTF8->putShort->putInt->out->putShort->for->i->if->if->out->cw->newUTF8->putShort->putInt->if->out->cw->newUTF8->putShort->putInt->if->out->cw->newUTF8->putShort->putInt->cw->newUTF8->putShort->if->out->cw->newUTF8->putShort->out->putInt->putByte->out->putByteArray->if->out->cw->newUTF8->putShort->out->putInt->out->putByteArray->if->out->cw->newUTF8->putShort->anns->put->if->out->cw->newUTF8->putShort->ianns->put->if->out->cw->newUTF8->putShort->tanns->put->if->out->cw->newUTF8->putShort->itanns->put->if->out->cw->newUTF8->putShort->AnnotationWriter->put->if->out->cw->newUTF8->putShort->AnnotationWriter->put->if->attrs->put
ModuleVisitor#visitMainClass(String):::Visit the main class of the current module.:::if->mv->visitMainClass
ModuleVisitor#visitPackage(String):::Visit a package of the current module.:::if->mv->visitPackage
ModuleVisitor#visitRequire(String, int, String):::Visits a dependence of the current module.:::if->mv->visitRequire
ModuleVisitor#visitExport(String, int, String...):::Visit an exported package of the current module.:::if->mv->visitExport
ModuleVisitor#visitOpen(String, int, String...):::Visit an open package of the current module.:::if->mv->visitOpen
ModuleVisitor#visitUse(String):::Visit a service used by the current module:::if->mv->visitUse
ModuleVisitor#visitProvide(String, String...):::Visit an implementation of a service.:::if->mv->visitProvide
ModuleVisitor#visitEnd():::Visits the end of the module:::if->mv->visitEnd
Type#getType(String):::Returns the Java type corresponding to the given type descriptor.:::return->typeDescriptor->toCharArray->getType
Type#getObjectType(String):::Returns the Java type corresponding to the given internal name.:::buf->internalName->toCharArray->return->new->Type
Type#getMethodType(String):::Returns the Java type corresponding to the given method descriptor:::return->methodDescriptor->toCharArray->getType
Type#getMethodType(Type, Type...):::Returns the Java method type corresponding to the given argument and return types.:::return->getMethodDescriptor->getType
Type#getType(Class):::Returns the Java type corresponding to the given class.:::if->c->isPrimitive->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->return->else->return->getDescriptor->getType
Type#getType(Constructor):::Returns the Java method type corresponding to the given constructor.:::return->getConstructorDescriptor->getType
Type#getType(Method):::Returns the Java method type corresponding to the given method.:::return->getMethodDescriptor->getType
Type#getArgumentTypes(String):::Returns the Java types corresponding to the argument types of the given method descriptor.:::buf->methodDescriptor->toCharArray->off->size->while->car->if->break->else->if->while->else->if->args->new->TypeArr->while->getType->return
Type#getArgumentTypes(Method):::Returns the Java types corresponding to the argument types of the given method.:::classes->method->getParameterTypes->types->new->TypeArr->for->i->return
Type#getReturnType(String):::Returns the Java type corresponding to the return type of the given method descriptor.:::buf->methodDescriptor->toCharArray->off->while->car->if->return->getType->else->if->while
Type#getReturnType(Method):::Returns the Java type corresponding to the return type of the given method.:::return->method->getReturnType->getType
Type#getArgumentsAndReturnSizes(String):::Computes the size of the arguments and of the return value of a method.:::n->c->while->car->desc->charAt->if->desc->charAt->return->else->if->while->desc->charAt->else->if->while->desc->charAt->if->else->if->else
Type#getSort():::Returns the sort of this Java type.:::return
Type#getDimensions():::Returns the number of dimensions of this array type:::i->while->return
Type#getElementType():::Returns the type of the elements of this array type:::return->getDimensions->getType
Type#getClassName():::Returns the binary name of the class corresponding to this type:::switch->return->return->return->return->return->return->return->return->return->sb->getElementType->getClassName->new->StringBuilder->for->i->getDimensions->return->sb->toString->return->new->String->replace->return
Type#getInternalName():::Returns the internal name of the class corresponding to this object or array type:::return->new->String
Type#getArgumentTypes():::Returns the argument types of methods of this type:::return->getDescriptor->getArgumentTypes
Type#getReturnType():::Returns the return type of methods of this type:::return->getDescriptor->getReturnType
Type#getArgumentsAndReturnSizes():::Returns the size of the arguments and of the return value of methods of this type:::return->getDescriptor->getArgumentsAndReturnSizes
Type#getDescriptor():::Returns the descriptor corresponding to this Java type.:::buf->new->StringBuilder->getDescriptor->return->buf->toString
Type#getMethodDescriptor(Type, Type...):::Returns the descriptor corresponding to the given argument and return types.:::buf->new->StringBuilder->buf->append->for->i->buf->append->returnType->getDescriptor->return->buf->toString
Type#getInternalName(Class):::Returns the internal name of the given class:::return->c->getName->replace
Type#getDescriptor(Class):::Returns the descriptor corresponding to the given Java type.:::buf->new->StringBuilder->getDescriptor->return->buf->toString
Type#getConstructorDescriptor(Constructor):::Returns the descriptor corresponding to the given constructor.:::parameters->c->getParameterTypes->buf->new->StringBuilder->buf->append->for->i->return->buf->append->toString
Type#getMethodDescriptor(Method):::Returns the descriptor corresponding to the given method.:::parameters->m->getParameterTypes->buf->new->StringBuilder->buf->append->for->i->buf->append->m->getReturnType->getDescriptor->return->buf->toString
Type#getSize():::Returns the size of values of this type:::return
Type#getOpcode(int):::Returns a JVM instruction opcode adapted to this Java type:::if->return->else->return
Type#equals(Object):::Tests if the given object is equal to this type.:::if->return->if->return->t->if->return->if->if->return->for->i->j->end->return
Type#hashCode():::Returns a hash code value for this type.:::hc->if->for->i->end->return
Type#toString():::Returns a string representation of this type.:::return->getDescriptor
TypePath#getLength():::Returns the length of this path.:::return
TypePath#getStep(int):::Returns the value of the given step of this path.:::return
TypePath#getStepArgument(int):::Returns the index of the type argument that the given step is stepping into:::return
TypePath#fromString(String):::Converts a type path in string form, in the format used by #toString(), into a TypePath object.:::if->typePath->length->return->n->typePath->length->out->new->ByteVector->out->putByte->for->i->return->new->TypePath
TypePath#toString():::Returns a string representation of this type path:::length->getLength->result->new->StringBuilder->for->i->return->result->toString
TypeReference#newTypeReference(int):::Returns a type reference of the given sort.:::return->new->TypeReference
TypeReference#newTypeParameterReference(int, int):::Returns a reference to a type parameter of a generic class or method.:::return->new->TypeReference
TypeReference#newTypeParameterBoundReference(int, int, int):::Returns a reference to a type parameter bound of a generic class or method.:::return->new->TypeReference
TypeReference#newSuperTypeReference(int):::Returns a reference to the super class or to an interface of the 'implements' clause of a class.:::return->new->TypeReference
TypeReference#newFormalParameterReference(int):::Returns a reference to the type of a formal parameter of a method.:::return->new->TypeReference
TypeReference#newExceptionReference(int):::Returns a reference to the type of an exception, in a 'throws' clause of a method.:::return->new->TypeReference
TypeReference#newTryCatchReference(int):::Returns a reference to the type of the exception declared in a 'catch' clause of a method.:::return->new->TypeReference
TypeReference#newTypeArgumentReference(int, int):::Returns a reference to the type of a type argument in a constructor or method call or reference.:::return->new->TypeReference
TypeReference#getSort():::Returns the sort of this type reference.:::return
TypeReference#getTypeParameterIndex():::Returns the index of the type parameter referenced by this type reference:::return
TypeReference#getTypeParameterBoundIndex():::Returns the index of the type parameter bound, within the type parameter #getTypeParameterIndex, referenced by this type reference:::return
TypeReference#getSuperTypeIndex():::Returns the index of the "super type" of a class that is referenced by this type reference:::return
TypeReference#getFormalParameterIndex():::Returns the index of the formal parameter whose type is referenced by this type reference:::return
TypeReference#getExceptionIndex():::Returns the index of the exception, in a 'throws' clause of a method, whose type is referenced by this type reference:::return
TypeReference#getTryCatchBlockIndex():::Returns the index of the try catch block (using the order in which they are visited with visitTryCatchBlock), whose 'catch' type is referenced by this type reference:::return
TypeReference#getTypeArgumentIndex():::Returns the index of the type argument referenced by this type reference:::return
TypeReference#getValue():::Returns the int encoded value of this type reference, suitable for use in visit methods related to type annotations, like visitTypeAnnotation.:::return

CSV#quote(String)::: v quote:::result->needQuote->input->contains->if->input->contains->input->replace->else->if->return->else->return
CSV#write(PrintStream, Object...):::Writes the objects' string representations to the output as a line of CSV:::out->Arrays->stream->Object->toString->map->CSV->quote->map->Collectors->joining->collect->println
CSV#split(String):::Splits an input line into a list of strings, handling quoting.:::result->new->ArrayList<>->cur->new->StringBuilder->state->for->i->input->length->if->throw->input->length->new->CSVParseException->result->cur->toString->add->return
CSVParseException#getInput()::: parse exception get input:::return
CSVParseException#getIndex()::: parse exception get index:::return
CSVParseException#getMessage():::Returns a string describing the parse error.:::return->super->getMessage
DeprData#isForRemoval()::: depr data is for removal:::return
DeprData#toString()::: depr data to string:::return->String->format
DeprDB#loadFromFile(String)::: depr b load from file:::list->new->ArrayList<>->try->br->Files->Paths->get->newBufferedReader->line->br->readLine->if->line->equals->printf->break->while->br->readLine->if->line->startsWith->continue->tokens->CSV->split->if->tokens->size->printf->continue->kindStr->tokens->get->type->tokens->get->detail->tokens->get->since->tokens->get->forRemoval->Boolean->tokens->get->parseBoolean->kind->if->validElementKinds->contains->ElementKind->valueOf->else->printf->continue->data->new->DeprData->list->add->catch->finally->return
DeprDB#loadFromList(List)::: depr b load from list:::db->new->DeprDB->foreach->switch->put->break->new->HashMap<>->computeIfAbsent->put->break->new->HashMap<>->computeIfAbsent->put->break->return
DeprDB#toString()::: depr b to string:::sb->new->StringBuilder->f->new->Formatter->f->format->f->types->toString->format->f->format->f->methods->toString->format->f->format->f->fields->toString->format->return->sb->toString
DeprDB#getTypeDeprecated(String)::: depr b get type deprecated:::return->types->get
DeprDB#getMethodDeprecated(String, String, String)::: depr b get method deprecated:::m->methods->get->if->return->return->m->get
DeprDB#getFieldDeprecated(String, String)::: depr b get field deprecated:::f->fields->get->if->return->return->f->get
LoadProc#init(ProcessingEnvironment)::: load proc init:::super->init->pe->getElementUtils->pe->getMessager
LoadProc#getSupportedSourceVersion()::: load proc get supported source version:::return->SourceVersion->latest
LoadProc#process(Set, RoundEnvironment)::: load proc process:::if->roundEnv->processingOver->return->set->roundEnv->getElementsAnnotatedWith->foreach->kind->e->getKind->depr->e->getAnnotation->switch->addType->break->encl->e->getEnclosingElement->enclKind->encl->getKind->switch->detail->getDetail->addMember->break->messager->printMessage->break->break->messager->e->getEnclosingElement->printMessage->break->return
LoadProc#getDeprecations()::: load proc get deprecations:::return
LoadProc#getDetail(Element)::: load proc get detail:::if->e->getKind->isField->return->e->getSimpleName->toString->else->ee->ret->ee->getReturnType->desc->parameterTypes->ee->asType->getParameterTypes->parms->parameterTypes->stream->this->desc->map->Collectors->joining->collect->return->ee->getSimpleName->toString
LoadProc#desc(TypeMirror)::: load proc desc:::switch->tm->getKind->return->return->return->return->return->return->return->return->return->s->asElement->getQualifiedName->toString->s->replace->return->return->getComponentType->desc->return->tm->getKind->toString
LoadProc#addType(ElementKind, TypeElement, Deprecated)::: load proc add type:::addData
LoadProc#addMember(ElementKind, TypeElement, String, Deprecated)::: load proc add member:::addData
LoadProc#addData(ElementKind, TypeElement, String, Deprecated)::: load proc add data:::typeName->elements->getBinaryName->toString->replace->since->try->dep->since->catch->finally->forRemoval->try->dep->forRemoval->catch->finally->deprList->new->DeprData->add
Main#doClassNames(Collection):::Processes a collection of class names:::if->out->println->classNames->out->println->forEach->out->println->if->setSymbolFileEnabled->fm->setLocation->if->bootClassPath->isEmpty->fm->setLocation->if->systemModules->isEmpty->fm->setLocation->proc->new->LoadProc->task->compiler->getTask->task->List->of->setProcessors->r->task->call->if->if->proc->getDeprecations->stream->DeprData->isForRemoval->filter->toList->collect->else->proc->getDeprecations->return
Main#doFileNames(Stream):::Processes a stream of filenames (strings):::return->filenames->name->endsWith->filter->name->endsWith->filter->name->endsWith->filter->s->replaceAll->map->s->replace->map->toList->collect->doClassNames
Main#convertModularFileName(String):::Replaces all but the first occurrence of '/' with '.':::slash->filename->indexOf->return->filename->substring->filename->substring->replace
Main#doModularFileNames(Stream):::Processes a stream of filenames (strings) including a module prefix:::return->filenames->name->endsWith->filter->name->endsWith->filter->name->endsWith->filter->s->replaceAll->map->this->convertModularFileName->map->toList->collect->doClassNames
Main#processDirectory(String, Collection):::Processes named class files in the given directory:::if->Files->Paths->get->isDirectory->err->printf->return->classPath->new->File->add->if->classNames->isEmpty->base->Paths->get->baseCount->base->getNameCount->try->paths->Files->walk->files->paths->p->getNameCount->filter->p->p->getNameCount->subpath->map->Path->toString->map->return->doFileNames->catch->finally->else->return->doClassNames
Main#doJarFile(String):::Processes all class files in the given jar file.:::try->jf->new->JarFile->files->jf->stream->JarEntry->getName->map->return->doFileNames->catch->finally
Main#processJarFile(String, Collection):::Processes named class files from the given jar file, or all classes if classNames is empty.:::classPath->new->File->add->if->classNames->isEmpty->return->doJarFile->else->return->doClassNames
Main#processOldJdk(String, Collection):::Processes named class files from rt.jar of a JDK version 7 or 8:::RTJAR->CSJAR->bootClassPath->new->File->add->bootClassPath->new->File->add->options->add->options->add->if->classNames->isEmpty->return->doJarFile->else->return->doClassNames
Main#processJdk9(String, Collection):::Processes listed classes given a JDK 9 home.:::systemModules->new->File->add->return->doClassNames
Main#processSelf(Collection):::Processes the class files from the currently running JDK, using the jrt: filesystem.:::options->add->options->add->if->classes->isEmpty->modules->FileSystems->URI->create->getFileSystem->getPath->try->paths->Files->walk->files->paths->p->getNameCount->filter->p->p->getNameCount->subpath->map->Path->toString->map->return->doModularFileNames->catch->finally->else->return->doClassNames
Main#processRelease(String, Collection):::Process classes from a particular JDK release, using only information in this JDK.:::hasModules->hasJavaSE_EE->try->releaseNum->Integer->parseInt->catch->finally->options->List->of->addAll->if->rootMods->List->of->List->of->proc->new->TraverseProc->task->compiler->List->String->join->of->List->of->getTask->task->List->of->setProcessors->if->task->call->return->types->proc->getPublicTypes->options->add->options->String->join->add->return->types->values->stream->List->stream->flatMap->TypeElement->toString->map->toList->collect->doClassNames->else->pp->new->JDKPlatformProvider->if->StreamSupport->pp->getSupportedPlatformNames->spliterator->stream->n->equals->noneMatch->return->fm->pp->getPlatform->getFileManager->classNames->new->ArrayList<>->foreach->fm->EnumSet->of->list->classNames->fm->inferBinaryName->add->options->add->return->doClassNames
Main#require(boolean):::Convenience method to throw UsageException if a condition is false.:::if->throw->new->UsageException
Main#report(Diagnostic):::Prints the diagnostic to the err stream:::err->println
Main#run(String...):::Parses arguments and performs the requested processing.:::args->Arrays->asList->new->ArrayDeque<>->loadMode->scanMode->dir->jar->jdkHome->release->loadClasses->new->ArrayList<>->csvFile->try->while->args->isEmpty->a->args->element->if->a->startsWith->args->remove->switch->classPath->clear->Arrays->args->remove->split->stream->File->new->map->classPath->add->forEachOrdered->break->break->out->System->getProperty->println->return->printHelp->out->println->out->Messages->get->println->return->require->break->args->remove->if->validReleases->contains->throw->new->UsageException->break->break->out->System->getProperty->println->return->options->args->remove->add->break->comments->args->remove->add->break->out->Messages->get->println->return->loadClasses->args->remove->add->break->args->remove->break->args->remove->break->args->remove->break->args->remove->break->args->remove->break->break->require->break->throw->new->UsageException->else->break->if->args->isEmpty->throw->new->UsageException->if->releasesWithoutForRemoval->contains->throw->new->UsageException->success->switch->doClassNames->break->processDirectory->break->processJarFile->break->args->isEmpty->require->processJdk9->break->DeprDB->loadFromFile->break->processOldJdk->break->processRelease->break->processSelf->break->throw->new->UsageException->if->return->catch->printHelp->return->if->ioe->printStackTrace->else->err->println->return->finally->scanStatus->switch->foreach->if->dd->isForRemoval->out->Pretty->print->println->break->out->println->comments->out->println->forEach->foreach->CSV->write->break->db->DeprDB->loadFromList->cp->classPath->stream->File->toString->map->toList->collect->scan->new->Scan->foreach->s->if->a->endsWith->scan->scanJar->else->if->a->endsWith->scan->processClassFile->else->if->Files->Paths->get->isDirectory->scan->scanDir->else->scan->a->replace->processClassName->break->return
Main#printHelp(PrintStream)::: main print help:::pp->new->JDKPlatformProvider->supportedReleases->String->pp->getSupportedPlatformNames->join->out->Messages->get->println
Main#call(PrintStream, PrintStream, String...):::Programmatic main entry point: initializes the tool instance to use stdout and stderr; runs the tool, passing command-line args; returns an exit status.:::return->new->Main->run
Main#main(String[]):::Calls the main entry point and exits the JVM with an exit status determined by the return status.:::System->call->exit
Messages#get(String, Object...):::Gets a message from the resource bundle:::try->msg->MessageFormat->bundle->getString->format->if->msg->System->lineSeparator->replace->return->catch->throw->new->InternalError->finally
Pretty#depr(String, boolean):::Converts deprecation information into an @Deprecated annotation:::d->if->since->isEmpty->return->sb->new->StringBuilder->append->if->since->isEmpty->sb->append->since->replace->append->append->if->if->since->isEmpty->sb->append->sb->append->sb->append->return->sb->toString
Pretty#unslashify(String):::Converts a slash-$ style name into a dot-separated name.:::return->n->replace->replace
Pretty#desc(String):::Converts a type descriptor to a readable string.:::return->new->intArr->desc
Pretty#desc(String, int[]):::Converts one type descriptor to a readable string, starting from position pos_inout[0], and updating it to the location following the descriptor just parsed:::dims->pos->len->desc->length->while->desc->charAt->name->if->return->c->desc->charAt->switch->break->break->break->break->break->break->break->break->break->semi->desc->indexOf->if->return->desc->substring->unslashify->break->return->sb->new->StringBuilder->for->i->return->sb->toString
Pretty#parms(String):::Converts a series of type descriptors into a comma-separated, readable string:::pos->new->intArr->sb->new->StringBuilder->first->t->while->desc->if->else->sb->append->sb->append->return->sb->toString
Pretty#print(DeprData):::Pretty-prints the data contained in the given DeprData object.:::sb->new->StringBuilder->sb->depr->append->append->switch->sb->append->sb->unslashify->append->break->sb->append->sb->unslashify->append->break->sb->append->sb->unslashify->append->break->sb->append->sb->unslashify->append->break->sb->unslashify->append->append->append->break->cons->DESC_PAT->matcher->sb->unslashify->append->if->cons->matches->sb->append->cons->group->parms->append->append->else->sb->append->append->break->meth->DESC_PAT->matcher->if->meth->matches->sb->meth->group->desc->append->append->unslashify->append->append->meth->group->append->append->meth->group->parms->append->append->else->sb->unslashify->append->append->append->break->return->sb->toString
TraverseProc#init(ProcessingEnvironment)::: traverse proc init:::super->init->pe->getElementUtils->pe->getMessager
TraverseProc#getSupportedSourceVersion()::: traverse proc get supported source version:::return->SourceVersion->latest
TraverseProc#process(Set, RoundEnvironment)::: traverse proc process:::if->roundEnv->processingOver->return->modules->new->HashSet<>->foreach->me->elements->getModuleElement->if->messager->String->format->printMessage->else->modules->findModules->addAll->packages->findPackages->findPublicTypes->return
TraverseProc#printPublicTypes()::: traverse proc print public types:::printPublicTypes
TraverseProc#getPublicTypes()::: traverse proc get public types:::return
TraverseProc#printPublicTypes(Map>)::: traverse proc print public types:::println->types->entrySet->stream->Comparator->e->getKey->toString->comparing->sorted->e->getKey->println->e->getValue->stream->Comparator->TypeElement->toString->comparing->sorted->println->forEach->forEach->println->flush
TraverseProc#findModules(ModuleElement)::: traverse proc find modules:::return->new->HashSet<>->findModules0
TraverseProc#findModules0(ModuleElement, Set, int)::: traverse proc find modules0:::set->add->foreach->m->getDirectives->if->dir->getKind->req->req->getDependency->findModules0->return
TraverseProc#findPackages(Collection)::: traverse proc find packages:::set->new->HashSet<>->foreach->foreach->m->getDirectives->if->dir->getKind->exp->if->exp->getTargetModules->set->exp->getPackage->add->return
TraverseProc#findPublicTypes(Collection)::: traverse proc find public types:::map->new->HashMap<>->foreach->enclosed->new->ArrayList<>->foreach->pkg->getEnclosedElements->addPublicTypes->map->put->return
TraverseProc#addPublicTypes(List, Element)::: traverse proc add public types:::kind->e->getKind->if->kind->isClass->kind->isInterface->e->getModifiers->contains->list->add->foreach->e->getEnclosedElements->addPublicTypes

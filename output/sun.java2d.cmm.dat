CMMServiceProvider#getColorManagementModule()::: service provider get color management module:::if->CMSManager->canCreateModule->return->getModule->return
CMMServiceProvider#getModule()::: service provider get module:::
CMSManager#getModule()::: manager get module:::if->return->gpa->new->GetPropertyAction->cmmProviderClass->AccessController->doPrivileged->provider->if->try->cls->Class->forName->cls->getConstructor->newInstance->catch->finally->if->new->sun.java2d.cmm.lcms.LcmsServiceProvider->provider->getColorManagementModule->if->throw->new->CMMException->new->GetPropertyAction->cmmTrace->AccessController->doPrivileged->if->new->CMMTracer->return
CMSManager#canCreateModule()::: manager can create module:::return
CMSManager.CMMTracer#loadProfile(byte[])::: tracer load profile:::print->p->tcmm->loadProfile->p->toString->printf->return
CMSManager.CMMTracer#freeProfile(Profile)::: tracer free profile:::p->toString->printf->tcmm->freeProfile
CMSManager.CMMTracer#getProfileSize(Profile)::: tracer get profile size:::print->size->tcmm->getProfileSize->println->return
CMSManager.CMMTracer#getProfileData(Profile, byte[])::: tracer get profile data:::print->println->tcmm->getProfileData
CMSManager.CMMTracer#getTagSize(Profile, int)::: tracer get tag size:::signatureToString->printf->size->tcmm->getTagSize->println->return
CMSManager.CMMTracer#getTagData(Profile, int, byte[])::: tracer get tag data:::signatureToString->printf->println->tcmm->getTagData
CMSManager.CMMTracer#setTagData(Profile, int, byte[])::: tracer set tag data:::print->println->tcmm->setTagData
CMSManager.CMMTracer#createTransform(ICC_Profile, int, int)::: tracer create transform:::println->return->tcmm->createTransform
CMSManager.CMMTracer#createTransform(ColorTransform[])::: tracer create transform:::println->return->tcmm->createTransform
CMSManager.CMMTracer#signatureToString(int)::: tracer signature to string:::return->String->format
ColorTransform#getNumInComponents()::: color transform get num in components:::
ColorTransform#getNumOutComponents()::: color transform get num out components:::
ColorTransform#colorConvert(BufferedImage, BufferedImage)::: color transform color convert:::
ColorTransform#colorConvert(Raster, WritableRaster, float[], float[], float[], float[])::: color transform color convert:::
ColorTransform#colorConvert(Raster, WritableRaster)::: color transform color convert:::
ColorTransform#colorConvert(short[], short[])::: color transform color convert:::
ColorTransform#colorConvert(byte[], byte[])::: color transform color convert:::
PCMM#loadProfile(byte[])::: m load profile:::
PCMM#freeProfile(Profile)::: m free profile:::
PCMM#getProfileSize(Profile)::: m get profile size:::
PCMM#getProfileData(Profile, byte[])::: m get profile data:::
PCMM#getTagData(Profile, int, byte[])::: m get tag data:::
PCMM#getTagSize(Profile, int)::: m get tag size:::
PCMM#setTagData(Profile, int, byte[])::: m set tag data:::
PCMM#createTransform(ICC_Profile, int, int)::: m create transform:::
PCMM#createTransform(ColorTransform[])::: m create transform:::
Profile#getNativePtr()::: profile get native ptr:::if->throw->new->CMMException->return
ProfileActivator#activate():::Activate a previously deferred ICC_Profile object.:::
ProfileDataVerifier#verify(byte[]):::Throws an IllegalArgumentException if the data does not correspond to a valid ICC Profile.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->size->readInt32->tagCount->readInt32->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->sig->readInt32->if->throw->new->IllegalArgumentException->for->i
ProfileDataVerifier#getTagOffset(int, byte[])::: profile data verifier get tag offset:::pos->return->readInt32
ProfileDataVerifier#getTagSize(int, byte[])::: profile data verifier get tag size:::pos->return->readInt32
ProfileDataVerifier#readInt32(byte[], int)::: profile data verifier read int32:::res->for->i->return
ProfileDeferralInfo#read():::Implements the abstract read() method of InputStream.:::return
ProfileDeferralMgr#registerDeferral(ProfileActivator):::Records a ProfileActivator object whose activate method will be called if the CMM needs to be activated.:::if->return->if->new->Vector<ProfileActivator>->aVector->addElement->return
ProfileDeferralMgr#unregisterDeferral(ProfileActivator):::Removes a ProfileActivator object from the vector of ProfileActivator objects whose activate method will be called if the CMM needs to be activated.:::if->return->if->return->aVector->removeElement->return
ProfileDeferralMgr#activateProfiles():::Removes a ProfileActivator object from the vector of ProfileActivator objects whose activate method will be called if the CMM needs to be activated.:::i->n->if->return->aVector->size->foreach->try->pa->activate->catch->finally->aVector->removeAllElements->return

Plugin_CreateExceptionStub_getInternalClassName#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ create exception stub_get internal class name execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->result->getInternalClassName->constant->b->getConstantReflection->forString->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_CreateExceptionStub_getInternalClassName#getSource()::: plugin_ create exception stub_get internal class name get source:::return
Plugin_CreateExceptionStub_throwAndPostJvmtiException#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ create exception stub_throw and post jvmti exception execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->node->new->org.graalvm.compiler.hotspot.nodes.StubForeignCallNode->b->add->return
Plugin_CreateExceptionStub_throwAndPostJvmtiException#getSource()::: plugin_ create exception stub_throw and post jvmti exception get source:::return
Plugin_CreateExceptionStub_throwClassCastException#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ create exception stub_throw class cast exception execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->node->new->org.graalvm.compiler.hotspot.nodes.StubForeignCallNode->b->add->return
Plugin_CreateExceptionStub_throwClassCastException#getSource()::: plugin_ create exception stub_throw class cast exception get source:::return
Plugin_CreateExceptionStub_throwKlassExternalNameException#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ create exception stub_throw klass external name exception execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->node->new->org.graalvm.compiler.hotspot.nodes.StubForeignCallNode->b->add->return
Plugin_CreateExceptionStub_throwKlassExternalNameException#getSource()::: plugin_ create exception stub_throw klass external name exception get source:::return
PluginFactory_CreateExceptionStub#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ create exception stub register plugins:::plugins->new->Plugin_CreateExceptionStub_getInternalClassName->register->plugins->new->Plugin_CreateExceptionStub_throwAndPostJvmtiException->register->plugins->new->Plugin_CreateExceptionStub_throwClassCastException->register->plugins->new->Plugin_CreateExceptionStub_throwKlassExternalNameException->register
Plugin_ExceptionHandlerStub_assertionsEnabled#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ exception handler stub_assertions enabled execute:::if->checkInjectedArgument->return->arg0->result->assertionsEnabled->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_ExceptionHandlerStub_assertionsEnabled#getSource()::: plugin_ exception handler stub_assertions enabled get source:::return
Plugin_ExceptionHandlerStub_exceptionHandlerForPc#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ exception handler stub_exception handler for pc execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->node->new->org.graalvm.compiler.hotspot.nodes.StubForeignCallNode->b->addPush->return
Plugin_ExceptionHandlerStub_exceptionHandlerForPc#getSource()::: plugin_ exception handler stub_exception handler for pc get source:::return
PluginFactory_ExceptionHandlerStub#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ exception handler stub register plugins:::plugins->new->Plugin_ExceptionHandlerStub_assertionsEnabled->register->plugins->new->Plugin_ExceptionHandlerStub_exceptionHandlerForPc->register
Plugin_ForeignCallSnippets_objectResultOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ foreign call snippets_object result offset execute:::if->checkInjectedArgument->return->arg0->result->objectResultOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_ForeignCallSnippets_objectResultOffset#getSource()::: plugin_ foreign call snippets_object result offset get source:::return
Plugin_ForeignCallSnippets_verifyOopBits#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ foreign call snippets_verify oop bits execute:::if->checkInjectedArgument->return->arg0->result->verifyOopBits->constant->JavaConstant->forLong->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_ForeignCallSnippets_verifyOopBits#getSource()::: plugin_ foreign call snippets_verify oop bits get source:::return
Plugin_ForeignCallSnippets_verifyOopCounterAddress#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ foreign call snippets_verify oop counter address execute:::if->checkInjectedArgument->return->arg0->result->verifyOopCounterAddress->constant->JavaConstant->forLong->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_ForeignCallSnippets_verifyOopCounterAddress#getSource()::: plugin_ foreign call snippets_verify oop counter address get source:::return
Plugin_ForeignCallSnippets_verifyOopMask#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ foreign call snippets_verify oop mask execute:::if->checkInjectedArgument->return->arg0->result->verifyOopMask->constant->JavaConstant->forLong->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_ForeignCallSnippets_verifyOopMask#getSource()::: plugin_ foreign call snippets_verify oop mask get source:::return
PluginFactory_ForeignCallSnippets#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ foreign call snippets register plugins:::plugins->new->Plugin_ForeignCallSnippets_objectResultOffset->register->plugins->new->Plugin_ForeignCallSnippets_verifyOopBits->register->plugins->new->Plugin_ForeignCallSnippets_verifyOopCounterAddress->register->plugins->new->Plugin_ForeignCallSnippets_verifyOopMask->register
Plugin_StubUtil_cAssertionsEnabled#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ stub util_c assertions enabled execute:::if->checkInjectedArgument->return->arg0->result->cAssertionsEnabled->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_StubUtil_cAssertionsEnabled#getSource()::: plugin_ stub util_c assertions enabled get source:::return
Plugin_StubUtil_vmMessageC#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ stub util_vm message c execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->arg7->node->new->org.graalvm.compiler.hotspot.nodes.StubForeignCallNode->b->add->return
Plugin_StubUtil_vmMessageC#getSource()::: plugin_ stub util_vm message c get source:::return
PluginFactory_StubUtil#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ stub util register plugins:::plugins->new->Plugin_StubUtil_cAssertionsEnabled->register->plugins->new->Plugin_StubUtil_vmMessageC->register
Plugin_UnwindExceptionToCallerStub_assertionsEnabled#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ unwind exception to caller stub_assertions enabled execute:::if->checkInjectedArgument->return->arg0->result->assertionsEnabled->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_UnwindExceptionToCallerStub_assertionsEnabled#getSource()::: plugin_ unwind exception to caller stub_assertions enabled get source:::return
Plugin_UnwindExceptionToCallerStub_exceptionHandlerForReturnAddress#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ unwind exception to caller stub_exception handler for return address execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->node->new->org.graalvm.compiler.hotspot.nodes.StubForeignCallNode->b->addPush->return
Plugin_UnwindExceptionToCallerStub_exceptionHandlerForReturnAddress#getSource()::: plugin_ unwind exception to caller stub_exception handler for return address get source:::return
Plugin_UnwindExceptionToCallerStub_logging#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ unwind exception to caller stub_logging execute:::if->checkInjectedArgument->return->arg0->b->getOptions->result->logging->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_UnwindExceptionToCallerStub_logging#getSource()::: plugin_ unwind exception to caller stub_logging get source:::return
PluginFactory_UnwindExceptionToCallerStub#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ unwind exception to caller stub register plugins:::plugins->new->Plugin_UnwindExceptionToCallerStub_assertionsEnabled->register->plugins->new->Plugin_UnwindExceptionToCallerStub_exceptionHandlerForReturnAddress->register->plugins->new->Plugin_UnwindExceptionToCallerStub_logging->register
StubOptions_OptionDescriptors#get(String)::: stub options_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
StubOptions_OptionDescriptors#iterator()::: stub options_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
ArrayStoreExceptionStub#getConstantParameterValue(int, String)::: array store exception stub get constant parameter value:::GraalError->guarantee->return->providers->getRegisters->getThreadRegister
ArrayStoreExceptionStub#createArrayStoreException(Object, Register)::: array store exception stub create array store exception:::klass->HotSpotReplacementsUtil->loadHub->return->createException
ClassCastExceptionStub#getConstantParameterValue(int, String)::: class cast exception stub get constant parameter value:::GraalError->guarantee->return->providers->getRegisters->getThreadRegister
ClassCastExceptionStub#createClassCastException(Object, KlassPointer, Register)::: class cast exception stub create class cast exception:::objKlass->HotSpotReplacementsUtil->loadHub->return->createException
CreateExceptionStub#getInternalClassName(Class)::: create exception stub get internal class name:::return->cls->getName->replace
CreateExceptionStub#classAsCString(Class)::: create exception stub class as string:::return->CStringConstant->getInternalClassName->cstring
CreateExceptionStub#createException(Register, Class)::: create exception stub create exception:::message->WordFactory->zero->return->createException
CreateExceptionStub#createException(Register, Class, Word)::: create exception stub create exception:::thread->registerAsWord->classAsCString->throwAndPostJvmtiException->return->clearPendingException
CreateExceptionStub#createException(Register, Class, KlassPointer)::: create exception stub create exception:::thread->registerAsWord->classAsCString->throwKlassExternalNameException->return->clearPendingException
CreateExceptionStub#createException(Register, Class, KlassPointer, KlassPointer)::: create exception stub create exception:::thread->registerAsWord->classAsCString->throwClassCastException->return->clearPendingException
CreateExceptionStub#throwAndPostJvmtiException(ForeignCallDescriptor, Word, Word, Word)::: create exception stub throw and post jvmti exception:::
CreateExceptionStub#throwKlassExternalNameException(ForeignCallDescriptor, Word, Word, KlassPointer)::: create exception stub throw klass external name exception:::
CreateExceptionStub#throwClassCastException(ForeignCallDescriptor, Word, Word, KlassPointer, KlassPointer)::: create exception stub throw class cast exception:::
CreateExceptionStub#registerForeignCalls(GraalHotSpotVMConfig, HotSpotForeignCallsProviderImpl)::: create exception stub register foreign calls:::foreignCalls->any->registerForeignCall->foreignCalls->any->registerForeignCall->foreignCalls->any->registerForeignCall
DivisionByZeroExceptionStub#getConstantParameterValue(int, String)::: division by zero exception stub get constant parameter value:::GraalError->guarantee->return->providers->getRegisters->getThreadRegister
DivisionByZeroExceptionStub#createDivisionByZeroException(Register)::: division by zero exception stub create division by zero exception:::msg->CStringConstant->cstring->return->createException
ExceptionHandlerStub#preservesRegisters():::This stub is called when returning to a method to handle an exception thrown by a callee:::return
ExceptionHandlerStub#getConstantParameterValue(int, String)::: exception handler stub get constant parameter value:::if->return->providers->getRegisters->getThreadRegister->return->getValue
ExceptionHandlerStub#exceptionHandler(Object, Word, Register, boolean)::: exception handler stub exception handler:::thread->registerAsWord->assertionsEnabled->checkNoExceptionInThread->assertionsEnabled->checkExceptionNotNull->writeExceptionOop->writeExceptionPc->if->Word->objectToTrackedPointer->rawValue->printf->Word->objectToTrackedPointer->rawValue->decipher->exceptionPc->rawValue->printf->exceptionPc->rawValue->decipher->printf->patchReturnAddress->handlerPc->exceptionHandlerForPc->if->Word->objectToTrackedPointer->rawValue->exceptionPc->rawValue->handlerPc->rawValue->printf->handlerPc->rawValue->decipher->printf->jumpToExceptionHandler
ExceptionHandlerStub#checkNoExceptionInThread(Word, boolean)::: exception handler stub check no exception in thread:::if->currentException->readExceptionOop->if->Word->objectToTrackedPointer->rawValue->fatal->if->cAssertionsEnabled->currentExceptionPc->readExceptionPc->if->currentExceptionPc->WordFactory->zero->notEqual->currentExceptionPc->rawValue->fatal
ExceptionHandlerStub#checkExceptionNotNull(boolean, Object)::: exception handler stub check exception not null:::if->fatal
ExceptionHandlerStub#assertionsEnabled(GraalHotSpotVMConfig):::Determines if either Java assertions are enabled for Graal or if this is a HotSpot build where the ASSERT mechanism is enabled.:::return->Assertions->assertionsEnabled->cAssertionsEnabled
ExceptionHandlerStub#exceptionHandlerForPc(ForeignCallDescriptor, Word)::: exception handler stub exception handler for pc:::
ForeignCallSnippets#handlePendingException(Word, boolean, boolean):::See ForeignCallStub#getGraph.:::if->clearPendingException->getPendingException->if->getAndClearObjectResult->DeoptimizeCallerNode->deopt
ForeignCallSnippets#verifyObject(Object):::Verifies that a given object value is well formed if -XX:+VerifyOops is enabled.:::if->verifyOops->verifyOopCounter->WordFactory->verifyOopCounterAddress->unsigned->verifyOopCounter->verifyOopCounter->readInt->writeInt->oop->Word->objectToTrackedPointer->if->anchorNode->SnippetAnchorNode->anchor->if->oop->WordFactory->verifyOopMask->unsigned->and->WordFactory->verifyOopBits->unsigned->equal->oop->rawValue->fatal->klass->PiNode->piCastNonNull->loadHubIntrinsic->if->klass->isNull->oop->rawValue->fatal->return
ForeignCallSnippets#verifyOopCounterAddress(GraalHotSpotVMConfig)::: foreign call snippets verify oop counter address:::return
ForeignCallSnippets#verifyOopMask(GraalHotSpotVMConfig)::: foreign call snippets verify oop mask:::return
ForeignCallSnippets#verifyOopBits(GraalHotSpotVMConfig)::: foreign call snippets verify oop bits:::return
ForeignCallSnippets#getAndClearObjectResult(Word):::Gets and clears the object result from a runtime call stored in a thread local.:::result->thread->objectResultOffset->readObject->thread->objectResultOffset->writeObject->return
ForeignCallSnippets#objectResultOffset(GraalHotSpotVMConfig)::: foreign call snippets object result offset:::return
ForeignCallStub#getTargetLinkage():::Gets the linkage information for the call from this stub.:::return
ForeignCallStub#createTargetParameters(ForeignCallDescriptor)::: foreign call stub create target parameters:::parameters->descriptor->getArgumentTypes->if->newParameters->new->Class<?>Arr->System->arraycopy->return->return
ForeignCallStub#getInstalledCodeOwner()::: foreign call stub get installed code owner:::return
ForeignCallStub.DebugScopeContext#asJavaMethod()::: debug scope context as java method:::return
ForeignCallStub.DebugScopeContext#getSignature()::: debug scope context get signature:::d->linkage->getDescriptor->metaAccess->providers->getMetaAccess->arguments->d->getArgumentTypes->parameters->new->ResolvedJavaTypeArr->for->i->return->metaAccess->d->getResultType->lookupJavaType->new->HotSpotSignature
ForeignCallStub.DebugScopeContext#getName()::: debug scope context get name:::return->linkage->getDescriptor->getName
ForeignCallStub.DebugScopeContext#getDeclaringClass()::: debug scope context get declaring class:::return->providers->getMetaAccess->lookupJavaType
ForeignCallStub.DebugScopeContext#toString()::: debug scope context to string:::return->format
ForeignCallStub#debugScopeContext()::: foreign call stub debug scope context:::return->new->DebugScopeContext
ForeignCallStub#getGraph(DebugContext, CompilationIdentifier):::Creates a graph for this stub:::wordTypes->providers->getWordTypes->args->linkage->getDescriptor->getArgumentTypes->isObjectResult->LIRKind->linkage->getOutgoingCallingConvention->getReturn->isValue->shouldClearException->linkage->isReexecutable->try->lowerer->providers->getLowerer->foreignCallSnippets->lowerer->getForeignCallSnippets->handlePendingException->getMethod->getAndClearObjectResult->getMethod->verifyObject->getMethod->thisMethod->getGraphMethod->kit->providers->getGraphBuilderPlugins->toString->new->GraphKit->graph->kit->getGraph->params->createParameters->thread->kit->providers->getRegisters->getThreadRegister->wordTypes->getWordKind->new->ReadRegisterNode->append->result->createTargetCall->forBoolean->forBoolean->createStaticInvoke->if->object->createStaticInvoke->createStaticInvoke->kit->linkage->getDescriptor->getResultType->new->ReturnNode->append->debug->dump->kit->inlineInvokes->new->RemoveValueProxyPhase->apply->debug->dump->return->catch->throw->GraalError->shouldNotReachHere->finally
ForeignCallStub#createStaticInvoke(GraphKit, ResolvedJavaMethod, ValueNode...)::: foreign call stub create static invoke:::return->kit->createInvoke
ForeignCallStub#getGraphMethod()::: foreign call stub get graph method:::thisMethod->foreach->providers->getMetaAccess->lookupJavaType->getDeclaredMethods->if->method->getName->equals->if->else->throw->new->InternalError->if->throw->new->InternalError->return
ForeignCallStub#createParameters(GraphKit, Class[])::: foreign call stub create parameters:::params->new->ParameterNodeArr->accessingClass->providers->getMetaAccess->getClass->lookupJavaType->for->i->return
ForeignCallStub#createTargetCall(GraphKit, ParameterNode[], ReadRegisterNode)::: foreign call stub create target call:::stamp->StampFactory->JavaKind->target->getDescriptor->getResultType->fromJavaClass->forKind->if->targetArguments->new->ValueNodeArr->System->arraycopy->return->kit->providers->getForeignCalls->target->getDescriptor->new->StubForeignCallNode->append->else->return->kit->providers->getForeignCalls->target->getDescriptor->new->StubForeignCallNode->append
IntegerExactOverflowExceptionStub#getConstantParameterValue(int, String)::: integer exact overflow exception stub get constant parameter value:::GraalError->guarantee->return->providers->getRegisters->getThreadRegister
IntegerExactOverflowExceptionStub#createIntegerExactOverflowException(Register)::: integer exact overflow exception stub create integer exact overflow exception:::msg->CStringConstant->cstring->return->createException
LongExactOverflowExceptionStub#getConstantParameterValue(int, String)::: long exact overflow exception stub get constant parameter value:::GraalError->guarantee->return->providers->getRegisters->getThreadRegister
LongExactOverflowExceptionStub#createLongExactOverflowException(Register)::: long exact overflow exception stub create long exact overflow exception:::msg->CStringConstant->cstring->return->createException
NullPointerExceptionStub#getConstantParameterValue(int, String)::: null pointer exception stub get constant parameter value:::GraalError->guarantee->return->providers->getRegisters->getThreadRegister
NullPointerExceptionStub#createNullPointerException(Register)::: null pointer exception stub create null pointer exception:::return->createException
OutOfBoundsExceptionStub#getConstantParameterValue(int, String)::: out of bounds exception stub get constant parameter value:::switch->return->providers->getRegisters->getThreadRegister->wordSize->providers->getWordTypes->getWordKind->getByteCount->bytes->if->STR_INDEX->length->STR_OUTOFBOUNDSFORLENGTH->length->else->return->return->throw->GraalError->shouldNotReachHere
OutOfBoundsExceptionStub#createOutOfBoundsException(int, int, Register, int, boolean)::: out of bounds exception stub create out of bounds exception:::buffer->AllocaNode->alloca->ptr->if->printString->printNumber->printString->printNumber->else->printNumber->ptr->writeByte->return->createException
SnippetStub#registerSnippet()::: snippet stub register snippet:::providers->getReplacements->registerSnippet
SnippetStub#getGraph(DebugContext, CompilationIdentifier)::: snippet stub get graph:::graph->makeConstArgs->buildInitialGraph->try->outer->debug->scope->foreach->graph->getNodes->index->param->index->if->method->getParameterAnnotation->param->param->stamp->StampFactory->objectNonNull->join->setStamp->new->RemoveValueProxyPhase->apply->graph->setGuardsStage->canonicalizer->new->CanonicalizerPhase->canonicalizer->apply->new->LoweringPhase->apply->catch->throw->debug->handle->finally->return
SnippetStub#buildInitialGraph(DebugContext, CompilationIdentifier, Object[])::: snippet stub build initial graph:::return->providers->getReplacements->getSnippet->copyWithIdentifier
SnippetStub#checkConstArg(int, String)::: snippet stub check const arg:::lvt->method->getLocalVariableTable->if->local->lvt->getLocal->actualName->local->getName->return
SnippetStub#makeConstArgs()::: snippet stub make const args:::count->method->getSignature->getParameterCount->args->new->ObjectArr->for->i->return
SnippetStub#getConstantParameterValue(int, String)::: snippet stub get constant parameter value:::throw->getClass->getName->new->GraalError
SnippetStub#debugScopeContext()::: snippet stub debug scope context:::return->getInstalledCodeOwner
SnippetStub#getInstalledCodeOwner()::: snippet stub get installed code owner:::return
SnippetStub#toString()::: snippet stub to string:::return->getInstalledCodeOwner->format
SnippetStub#getMethod()::: snippet stub get method:::return
Stub#checkRegisterSetEquivalency(EconomicSet, EconomicSet)::: stub check register set equivalency:::if->return->if->a->size->b->size->return->return->b->contains->allMatch
Stub#initDestroyedCallerRegisters(EconomicSet)::: stub init destroyed caller registers:::
Stub#getDestroyedCallerRegisters():::Gets the registers destroyed by this stub from a caller's perspective:::return
Stub#preservesRegisters():::Determines if this stub preserves all registers apart from those it #getDestroyedCallerRegisters() destroys.:::return
Stub#getLinkage():::Gets the linkage for a call to this stub from compiled code.:::return
Stub#getRegisterConfig()::: stub get register config:::return
Stub#getGraph(DebugContext, CompilationIdentifier):::Gets the graph that from which the code for this stub will be compiled.:::
Stub#toString()::: stub to string:::return->linkage->getDescriptor
Stub#getInstalledCodeOwner():::Gets the method the stub's code will be associated with once installed:::
Stub#debugScopeContext():::Gets a context object for the debug scope created when producing the code for this stub.:::
Stub#openDebugContext(DebugContext)::: stub open debug context:::if->DebugStubsAndSnippets->getValue->description->nextStubId->incrementAndGet->new->Description->return->DebugContext->outer->getGlobalMetrics->providers->getSnippetReflection->new->GraalDebugHandlersFactory->singletonList->create->return->DebugContext->disabled
Stub#getCode(Backend):::Gets the code for this stub, compiling it first if necessary.:::if->try->debug->DebugContext->forCurrentThread->openDebugContext->try->d->debug->providers->getCodeCache->debugScopeContext->scope->codeCache->providers->getCodeCache->compResult->buildCompilationResult->try->s->debug->scope->a->debug->activate->compiledCode->HotSpotCompiledCodeBuilder->createCompiledCode->codeCache->installCode->catch->throw->debug->handle->finally->catch->throw->debug->handle->finally->catch->finally->return
Stub#buildCompilationResult(DebugContext, Backend)::: stub build compilation result:::compilationId->getStubCompilationId->graph->getGraph->compResult->toString->GeneratePIC->getValue->new->CompilationResult->if->graph->start->newStart->graph->new->StubStartNode->add->newStart->graph->start->stateAfter->setStateAfter->graph->graph->start->replaceFixed->try->s0->debug->providers->getCodeCache->scope->suites->createSuites->providers->getSuites->getDefaultGraphBuilderSuite->DefaultProfilingInfo->get->emitFrontEnd->lirSuites->createLIRSuites->backend->getInstalledCodeOwner->getRegisterConfig->emitBackEnd->catch->throw->debug->handle->finally->return
Stub#getCompilationResult(DebugContext, Backend):::Gets a CompilationResult that can be used for code generation:::try->d->debug->providers->getCodeCache->debugScopeContext->scope->return->buildCompilationResult->catch->throw->debug->handle->finally
Stub#getStubCompilationId()::: stub get stub compilation id:::return->new->StubCompilationIdentifier
Stub#checkStubInvariants(CompilationResult):::Checks the conditions a compilation must satisfy to be installed as a RuntimeStub.:::foreach->compResult->getDataPatches->if->ref->if->ref->getConstant->c->ref->getConstant->if->c->asResolvedJavaType->c->asResolvedJavaType->getName->equals->continue->foreach->compResult->getInfopoints->call->callLinkage->return
Stub#createSuites()::: stub create suites:::defaultSuites->providers->getSuites->getDefaultSuites->return->new->PhaseSuite<>->defaultSuites->getMidTier->defaultSuites->getLowTier->new->Suites
Stub#createLIRSuites()::: stub create suites:::lirSuites->providers->getSuites->getDefaultLIRSuites->new->LIRSuites->moveProfiling->lirSuites->getPostAllocationOptimizationStage->findPhase->if->moveProfiling->remove->return
StubCompilationIdentifier#toString()::: stub compilation identifier to string:::return->toString
StubCompilationIdentifier#toString(Verbosity)::: stub compilation identifier to string:::switch->return->buildID->return->buildName->return->buildID->buildName->throw->new->GraalError
StubCompilationIdentifier#buildName()::: stub compilation identifier build name:::return->stub->toString
StubCompilationIdentifier#buildID()::: stub compilation identifier build d:::return
StubUtil#newDescriptor(Class, String, Class, Class...)::: stub util new descriptor:::d->new->ForeignCallDescriptor->return
StubUtil#descriptorFor(Class, String):::Looks for a StubForeignCallNode node intrinsic named name in stubClass and returns a ForeignCallDescriptor based on its signature and the value of hasSideEffect.:::found->foreach->stubClass->getDeclaredMethods->if->Modifier->method->getModifiers->isStatic->method->getAnnotation->method->getName->equals->if->method->getAnnotation->value->equals->paramList->Arrays->found->getParameterTypes->asList->cCallTypes->paramList->paramList->size->subList->paramList->size->new->Class<?>Arr->toArray->return->found->getReturnType->new->ForeignCallDescriptor
StubUtil#cAssertionsEnabled(GraalHotSpotVMConfig):::Determines if this is a HotSpot build where the ASSERT mechanism is enabled.:::return
StubUtil#vmMessageC(ForeignCallDescriptor, boolean, Word, long, long, long)::: stub util vm message c:::
StubUtil#printf(String):::Prints a message to the log stream:::cstring->vmMessageC
StubUtil#printf(String, long):::Prints a message to the log stream:::cstring->vmMessageC
StubUtil#printf(String, long, long):::Prints a message to the log stream:::cstring->vmMessageC
StubUtil#printf(String, long, long, long):::Prints a message to the log stream:::cstring->vmMessageC
StubUtil#decipher(long):::Analyzes a given value and prints information about it to the log stream.:::WordFactory->zero->vmMessageC
StubUtil#fatal(String):::Exits the VM with a given error message:::cstring->vmMessageC
StubUtil#fatal(String, long):::Exits the VM with a given error message:::cstring->vmMessageC
StubUtil#fatal(String, long, long):::Exits the VM with a given error message:::cstring->vmMessageC
StubUtil#fatal(String, long, long, long):::Exits the VM with a given error message:::cstring->vmMessageC
StubUtil#printNumber(Word, long):::Print number as decimal string to buffer.:::tmpNumber->offset->if->else->while->ptr->buffer->add->do->digit->ptr->subtract->ptr->writeByte->while->if->ptr->subtract->ptr->writeByte->return->buffer->add
StubUtil#printString(Word, String):::Copy javaString bytes to the memory location ptr.:::string->cstring->i->b->while->string->readByte->buffer->writeByte->return->buffer->add
UnwindExceptionToCallerStub#preservesRegisters():::The current frame is unwound by this stub:::return
UnwindExceptionToCallerStub#getConstantParameterValue(int, String)::: unwind exception to caller stub get constant parameter value:::if->return->providers->getRegisters->getThreadRegister->throw->new->InternalError
UnwindExceptionToCallerStub#unwindExceptionToCaller(Object, Word, Register)::: unwind exception to caller stub unwind exception to caller:::exceptionOop->Word->objectToTrackedPointer->if->logging->exceptionOop->rawValue->printf->exceptionOop->rawValue->decipher->returnAddress->rawValue->printf->returnAddress->rawValue->decipher->printf->thread->registerAsWord->assertionsEnabled->checkNoExceptionInThread->assertionsEnabled->checkExceptionNotNull->handlerInCallerPc->exceptionHandlerForReturnAddress->if->logging->exceptionOop->rawValue->returnAddress->rawValue->handlerInCallerPc->rawValue->printf->handlerInCallerPc->rawValue->decipher->printf->jumpToExceptionHandlerInCaller
UnwindExceptionToCallerStub#logging(OptionValues)::: unwind exception to caller stub logging:::return->getValue
UnwindExceptionToCallerStub#assertionsEnabled(GraalHotSpotVMConfig):::Determines if either Java assertions are enabled for Graal or if this is a HotSpot build where the ASSERT mechanism is enabled.:::return->Assertions->assertionsEnabled->cAssertionsEnabled
UnwindExceptionToCallerStub#exceptionHandlerForReturnAddress(ForeignCallDescriptor, Word, Word)::: unwind exception to caller stub exception handler for return address:::
VerifyOopStub#verifyOop(Object)::: verify oop stub verify oop:::return->verifyObject

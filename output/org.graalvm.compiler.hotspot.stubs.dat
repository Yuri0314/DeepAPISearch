org.graalvm.compiler.hotspot.stubs.Plugin_CreateExceptionStub_getInternalClassName#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ create exception stub_get internal class name execute
org.graalvm.compiler.hotspot.stubs.Plugin_CreateExceptionStub_getInternalClassName#getSource()->Class::: plugin_ create exception stub_get internal class name get source
org.graalvm.compiler.hotspot.stubs.Plugin_CreateExceptionStub_throwAndPostJvmtiException#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ create exception stub_throw and post jvmti exception execute
org.graalvm.compiler.hotspot.stubs.Plugin_CreateExceptionStub_throwAndPostJvmtiException#getSource()->Class::: plugin_ create exception stub_throw and post jvmti exception get source
org.graalvm.compiler.hotspot.stubs.Plugin_CreateExceptionStub_throwClassCastException#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ create exception stub_throw class cast exception execute
org.graalvm.compiler.hotspot.stubs.Plugin_CreateExceptionStub_throwClassCastException#getSource()->Class::: plugin_ create exception stub_throw class cast exception get source
org.graalvm.compiler.hotspot.stubs.Plugin_CreateExceptionStub_throwKlassExternalNameException#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ create exception stub_throw klass external name exception execute
org.graalvm.compiler.hotspot.stubs.Plugin_CreateExceptionStub_throwKlassExternalNameException#getSource()->Class::: plugin_ create exception stub_throw klass external name exception get source
org.graalvm.compiler.hotspot.stubs.PluginFactory_CreateExceptionStub#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ create exception stub register plugins
org.graalvm.compiler.hotspot.stubs.Plugin_ExceptionHandlerStub_assertionsEnabled#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ exception handler stub_assertions enabled execute
org.graalvm.compiler.hotspot.stubs.Plugin_ExceptionHandlerStub_assertionsEnabled#getSource()->Class::: plugin_ exception handler stub_assertions enabled get source
org.graalvm.compiler.hotspot.stubs.Plugin_ExceptionHandlerStub_exceptionHandlerForPc#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ exception handler stub_exception handler for pc execute
org.graalvm.compiler.hotspot.stubs.Plugin_ExceptionHandlerStub_exceptionHandlerForPc#getSource()->Class::: plugin_ exception handler stub_exception handler for pc get source
org.graalvm.compiler.hotspot.stubs.PluginFactory_ExceptionHandlerStub#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ exception handler stub register plugins
org.graalvm.compiler.hotspot.stubs.Plugin_ForeignCallSnippets_objectResultOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ foreign call snippets_object result offset execute
org.graalvm.compiler.hotspot.stubs.Plugin_ForeignCallSnippets_objectResultOffset#getSource()->Class::: plugin_ foreign call snippets_object result offset get source
org.graalvm.compiler.hotspot.stubs.Plugin_ForeignCallSnippets_verifyOopBits#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ foreign call snippets_verify oop bits execute
org.graalvm.compiler.hotspot.stubs.Plugin_ForeignCallSnippets_verifyOopBits#getSource()->Class::: plugin_ foreign call snippets_verify oop bits get source
org.graalvm.compiler.hotspot.stubs.Plugin_ForeignCallSnippets_verifyOopCounterAddress#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ foreign call snippets_verify oop counter address execute
org.graalvm.compiler.hotspot.stubs.Plugin_ForeignCallSnippets_verifyOopCounterAddress#getSource()->Class::: plugin_ foreign call snippets_verify oop counter address get source
org.graalvm.compiler.hotspot.stubs.Plugin_ForeignCallSnippets_verifyOopMask#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ foreign call snippets_verify oop mask execute
org.graalvm.compiler.hotspot.stubs.Plugin_ForeignCallSnippets_verifyOopMask#getSource()->Class::: plugin_ foreign call snippets_verify oop mask get source
org.graalvm.compiler.hotspot.stubs.PluginFactory_ForeignCallSnippets#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ foreign call snippets register plugins
org.graalvm.compiler.hotspot.stubs.Plugin_StubUtil_cAssertionsEnabled#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ stub util_c assertions enabled execute
org.graalvm.compiler.hotspot.stubs.Plugin_StubUtil_cAssertionsEnabled#getSource()->Class::: plugin_ stub util_c assertions enabled get source
org.graalvm.compiler.hotspot.stubs.Plugin_StubUtil_vmMessageC#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ stub util_vm message c execute
org.graalvm.compiler.hotspot.stubs.Plugin_StubUtil_vmMessageC#getSource()->Class::: plugin_ stub util_vm message c get source
org.graalvm.compiler.hotspot.stubs.PluginFactory_StubUtil#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ stub util register plugins
org.graalvm.compiler.hotspot.stubs.Plugin_UnwindExceptionToCallerStub_assertionsEnabled#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ unwind exception to caller stub_assertions enabled execute
org.graalvm.compiler.hotspot.stubs.Plugin_UnwindExceptionToCallerStub_assertionsEnabled#getSource()->Class::: plugin_ unwind exception to caller stub_assertions enabled get source
org.graalvm.compiler.hotspot.stubs.Plugin_UnwindExceptionToCallerStub_exceptionHandlerForReturnAddress#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ unwind exception to caller stub_exception handler for return address execute
org.graalvm.compiler.hotspot.stubs.Plugin_UnwindExceptionToCallerStub_exceptionHandlerForReturnAddress#getSource()->Class::: plugin_ unwind exception to caller stub_exception handler for return address get source
org.graalvm.compiler.hotspot.stubs.Plugin_UnwindExceptionToCallerStub_logging#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ unwind exception to caller stub_logging execute
org.graalvm.compiler.hotspot.stubs.Plugin_UnwindExceptionToCallerStub_logging#getSource()->Class::: plugin_ unwind exception to caller stub_logging get source
org.graalvm.compiler.hotspot.stubs.PluginFactory_UnwindExceptionToCallerStub#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ unwind exception to caller stub register plugins
org.graalvm.compiler.hotspot.stubs.StubOptions_OptionDescriptors#get(String)->OptionDescriptor::: stub options_ option descriptors get
org.graalvm.compiler.hotspot.stubs.StubOptions_OptionDescriptors#iterator()->Iterator::: stub options_ option descriptors iterator
org.graalvm.compiler.hotspot.stubs.ArrayStoreExceptionStub#getConstantParameterValue(int, String)->Object::: array store exception stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.ClassCastExceptionStub#getConstantParameterValue(int, String)->Object::: class cast exception stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.CreateExceptionStub#getInternalClassName(Class)->String::: create exception stub get internal class name
org.graalvm.compiler.hotspot.stubs.CreateExceptionStub#createException(Register, Class)->Object::: create exception stub create exception
org.graalvm.compiler.hotspot.stubs.CreateExceptionStub#createException(Register, Class, Word)->Object::: create exception stub create exception
org.graalvm.compiler.hotspot.stubs.CreateExceptionStub#createException(Register, Class, KlassPointer)->Object::: create exception stub create exception
org.graalvm.compiler.hotspot.stubs.CreateExceptionStub#createException(Register, Class, KlassPointer, KlassPointer)->Object::: create exception stub create exception
org.graalvm.compiler.hotspot.stubs.CreateExceptionStub#registerForeignCalls(GraalHotSpotVMConfig, HotSpotForeignCallsProviderImpl)->void::: create exception stub register foreign calls
org.graalvm.compiler.hotspot.stubs.DivisionByZeroExceptionStub#getConstantParameterValue(int, String)->Object::: division by zero exception stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.ExceptionHandlerStub#preservesRegisters()->boolean:::This stub is called when returning to a method to handle an exception thrown by a callee
org.graalvm.compiler.hotspot.stubs.ExceptionHandlerStub#getConstantParameterValue(int, String)->Object::: exception handler stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.ExceptionHandlerStub#checkNoExceptionInThread(Word, boolean)->void::: exception handler stub check no exception in thread
org.graalvm.compiler.hotspot.stubs.ExceptionHandlerStub#checkExceptionNotNull(boolean, Object)->void::: exception handler stub check exception not null
org.graalvm.compiler.hotspot.stubs.ExceptionHandlerStub#assertionsEnabled(GraalHotSpotVMConfig)->boolean:::Determines if either Java assertions are enabled for Graal or if this is a HotSpot build where the ASSERT mechanism is enabled.
org.graalvm.compiler.hotspot.stubs.ExceptionHandlerStub#exceptionHandlerForPc(ForeignCallDescriptor, Word)->Word::: exception handler stub exception handler for pc
org.graalvm.compiler.hotspot.stubs.ForeignCallSnippets#handlePendingException(Word, boolean, boolean)->void:::See ForeignCallStub#getGraph.
org.graalvm.compiler.hotspot.stubs.ForeignCallSnippets#verifyObject(Object)->Object:::Verifies that a given object value is well formed if -XX:+VerifyOops is enabled.
org.graalvm.compiler.hotspot.stubs.ForeignCallSnippets#verifyOopCounterAddress(GraalHotSpotVMConfig)->long::: foreign call snippets verify oop counter address
org.graalvm.compiler.hotspot.stubs.ForeignCallSnippets#verifyOopMask(GraalHotSpotVMConfig)->long::: foreign call snippets verify oop mask
org.graalvm.compiler.hotspot.stubs.ForeignCallSnippets#verifyOopBits(GraalHotSpotVMConfig)->long::: foreign call snippets verify oop bits
org.graalvm.compiler.hotspot.stubs.ForeignCallSnippets#getAndClearObjectResult(Word)->Object:::Gets and clears the object result from a runtime call stored in a thread local.
org.graalvm.compiler.hotspot.stubs.ForeignCallSnippets#objectResultOffset(GraalHotSpotVMConfig)->int::: foreign call snippets object result offset
org.graalvm.compiler.hotspot.stubs.ForeignCallStub#getTargetLinkage()->HotSpotForeignCallLinkage:::Gets the linkage information for the call from this stub.
org.graalvm.compiler.hotspot.stubs.ForeignCallStub#getInstalledCodeOwner()->ResolvedJavaMethod::: foreign call stub get installed code owner
org.graalvm.compiler.hotspot.stubs.ForeignCallStub#debugScopeContext()->Object::: foreign call stub debug scope context
org.graalvm.compiler.hotspot.stubs.ForeignCallStub#getGraph(DebugContext, CompilationIdentifier)->StructuredGraph:::Creates a graph for this stub
org.graalvm.compiler.hotspot.stubs.IntegerExactOverflowExceptionStub#getConstantParameterValue(int, String)->Object::: integer exact overflow exception stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.LongExactOverflowExceptionStub#getConstantParameterValue(int, String)->Object::: long exact overflow exception stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.NullPointerExceptionStub#getConstantParameterValue(int, String)->Object::: null pointer exception stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.OutOfBoundsExceptionStub#getConstantParameterValue(int, String)->Object::: out of bounds exception stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.SnippetStub#registerSnippet()->void::: snippet stub register snippet
org.graalvm.compiler.hotspot.stubs.SnippetStub#getGraph(DebugContext, CompilationIdentifier)->StructuredGraph::: snippet stub get graph
org.graalvm.compiler.hotspot.stubs.SnippetStub#buildInitialGraph(DebugContext, CompilationIdentifier, Object[])->StructuredGraph::: snippet stub build initial graph
org.graalvm.compiler.hotspot.stubs.SnippetStub#checkConstArg(int, String)->boolean::: snippet stub check const arg
org.graalvm.compiler.hotspot.stubs.SnippetStub#makeConstArgs()->Object[]::: snippet stub make const args
org.graalvm.compiler.hotspot.stubs.SnippetStub#getConstantParameterValue(int, String)->Object::: snippet stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.SnippetStub#debugScopeContext()->Object::: snippet stub debug scope context
org.graalvm.compiler.hotspot.stubs.SnippetStub#getInstalledCodeOwner()->ResolvedJavaMethod::: snippet stub get installed code owner
org.graalvm.compiler.hotspot.stubs.SnippetStub#toString()->String::: snippet stub to string
org.graalvm.compiler.hotspot.stubs.SnippetStub#getMethod()->ResolvedJavaMethod::: snippet stub get method
org.graalvm.compiler.hotspot.stubs.Stub#initDestroyedCallerRegisters(EconomicSet)->void::: stub init destroyed caller registers
org.graalvm.compiler.hotspot.stubs.Stub#getDestroyedCallerRegisters()->EconomicSet:::Gets the registers destroyed by this stub from a caller's perspective
org.graalvm.compiler.hotspot.stubs.Stub#preservesRegisters()->boolean:::Determines if this stub preserves all registers apart from those it #getDestroyedCallerRegisters() destroys.
org.graalvm.compiler.hotspot.stubs.Stub#getLinkage()->HotSpotForeignCallLinkage:::Gets the linkage for a call to this stub from compiled code.
org.graalvm.compiler.hotspot.stubs.Stub#getRegisterConfig()->RegisterConfig::: stub get register config
org.graalvm.compiler.hotspot.stubs.Stub#getGraph(DebugContext, CompilationIdentifier)->StructuredGraph:::Gets the graph that from which the code for this stub will be compiled.
org.graalvm.compiler.hotspot.stubs.Stub#toString()->String::: stub to string
org.graalvm.compiler.hotspot.stubs.Stub#getInstalledCodeOwner()->ResolvedJavaMethod:::Gets the method the stub's code will be associated with once installed
org.graalvm.compiler.hotspot.stubs.Stub#debugScopeContext()->Object:::Gets a context object for the debug scope created when producing the code for this stub.
org.graalvm.compiler.hotspot.stubs.Stub#getCode(Backend)->InstalledCode:::Gets the code for this stub, compiling it first if necessary.
org.graalvm.compiler.hotspot.stubs.Stub#getCompilationResult(DebugContext, Backend)->CompilationResult:::Gets a CompilationResult that can be used for code generation
org.graalvm.compiler.hotspot.stubs.Stub#getStubCompilationId()->CompilationIdentifier::: stub get stub compilation id
org.graalvm.compiler.hotspot.stubs.Stub#createSuites()->Suites::: stub create suites
org.graalvm.compiler.hotspot.stubs.Stub#createLIRSuites()->LIRSuites::: stub create suites
org.graalvm.compiler.hotspot.stubs.StubCompilationIdentifier#toString()->String::: stub compilation identifier to string
org.graalvm.compiler.hotspot.stubs.StubCompilationIdentifier#toString(Verbosity)->String::: stub compilation identifier to string
org.graalvm.compiler.hotspot.stubs.StubUtil#newDescriptor(Class, String, Class, Class...)->ForeignCallDescriptor::: stub util new descriptor
org.graalvm.compiler.hotspot.stubs.StubUtil#cAssertionsEnabled(GraalHotSpotVMConfig)->boolean:::Determines if this is a HotSpot build where the ASSERT mechanism is enabled.
org.graalvm.compiler.hotspot.stubs.StubUtil#printf(String)->void:::Prints a message to the log stream
org.graalvm.compiler.hotspot.stubs.StubUtil#printf(String, long)->void:::Prints a message to the log stream
org.graalvm.compiler.hotspot.stubs.StubUtil#printf(String, long, long)->void:::Prints a message to the log stream
org.graalvm.compiler.hotspot.stubs.StubUtil#printf(String, long, long, long)->void:::Prints a message to the log stream
org.graalvm.compiler.hotspot.stubs.StubUtil#decipher(long)->void:::Analyzes a given value and prints information about it to the log stream.
org.graalvm.compiler.hotspot.stubs.StubUtil#fatal(String)->void:::Exits the VM with a given error message
org.graalvm.compiler.hotspot.stubs.StubUtil#fatal(String, long)->void:::Exits the VM with a given error message
org.graalvm.compiler.hotspot.stubs.StubUtil#fatal(String, long, long)->void:::Exits the VM with a given error message
org.graalvm.compiler.hotspot.stubs.StubUtil#fatal(String, long, long, long)->void:::Exits the VM with a given error message
org.graalvm.compiler.hotspot.stubs.StubUtil#printNumber(Word, long)->Word:::Print number as decimal string to buffer.
org.graalvm.compiler.hotspot.stubs.StubUtil#printString(Word, String)->Word:::Copy javaString bytes to the memory location ptr.
org.graalvm.compiler.hotspot.stubs.UnwindExceptionToCallerStub#preservesRegisters()->boolean:::The current frame is unwound by this stub
org.graalvm.compiler.hotspot.stubs.UnwindExceptionToCallerStub#getConstantParameterValue(int, String)->Object::: unwind exception to caller stub get constant parameter value
org.graalvm.compiler.hotspot.stubs.UnwindExceptionToCallerStub#logging(OptionValues)->boolean::: unwind exception to caller stub logging
org.graalvm.compiler.hotspot.stubs.UnwindExceptionToCallerStub#assertionsEnabled(GraalHotSpotVMConfig)->boolean:::Determines if either Java assertions are enabled for Graal or if this is a HotSpot build where the ASSERT mechanism is enabled.
org.graalvm.compiler.hotspot.stubs.UnwindExceptionToCallerStub#exceptionHandlerForReturnAddress(ForeignCallDescriptor, Word, Word)->Word::: unwind exception to caller stub exception handler for return address

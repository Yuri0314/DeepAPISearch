AbstractAlgorithmConstraints#getAlgorithms(String)::: abstract algorithm constraints get algorithms:::property->AccessController->new->PrivilegedAction<String>->doPrivileged->algorithmsInProperty->if->property->isEmpty->if->property->length->property->charAt->property->property->length->charAt->property->property->length->substring->property->split->for->i->if->new->StringArr->return
AbstractAlgorithmConstraints#checkAlgorithm(String[], String, AlgorithmDecomposer)::: abstract algorithm constraints check algorithm:::if->algorithm->length->throw->new->IllegalArgumentException->elements->foreach->if->item->isEmpty->continue->if->item->equalsIgnoreCase->return->if->decomposer->decompose->foreach->if->item->equalsIgnoreCase->return->return
AlgorithmDecomposer#decomposeImpl(String)::: algorithm decomposer decompose impl:::elements->new->HashSet<>->transTokens->algorithm->split->foreach->if->transToken->isEmpty->continue->tokens->PATTERN->split->foreach->if->token->isEmpty->continue->elements->add->return
AlgorithmDecomposer#decompose(String):::Decompose the standard algorithm name into sub-elements:::if->algorithm->length->return->new->HashSet<>->elements->decomposeImpl->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->return
AlgorithmDecomposer#getAliases(String):::Get aliases of the specified algorithm:::aliases->if->algorithm->equalsIgnoreCase->algorithm->equalsIgnoreCase->new->StringArr->else->new->StringArr->return->Arrays->asList
AlgorithmDecomposer#hasLoop(Set, String, String)::: algorithm decomposer has loop:::if->elements->contains->if->elements->contains->elements->add->elements->remove
AlgorithmDecomposer#decomposeOneHash(String)::: algorithm decomposer decompose one hash:::if->algorithm->length->return->new->HashSet<>->elements->decomposeImpl->hasLoop->hasLoop->hasLoop->hasLoop->hasLoop->return
AlgorithmDecomposer#hashName(String)::: algorithm decomposer hash name:::return->algorithm->replace
AnchorCertificates#contains(X509Certificate):::Checks if a certificate is a trust anchor.:::key->X509CertImpl->getFingerprint->result->certs->contains->if->debug->cert->getSubjectDN->println->return
ArrayUtil#blockSizeCheck(int, int)::: array util block size check:::if->throw->new->ProviderException
ArrayUtil#nullAndBoundsCheck(byte[], int, int)::: array util null and bounds check:::Preconditions->checkFromIndexSize
ArrayUtil#swap(byte[], int, int)::: array util swap:::tmp
ArrayUtil#reverse(byte[])::: array util reverse:::i->j->while->swap
AuthResources#getContents():::Returns the contents of this ResourceBundle:::return
AuthResources_ja#getContents():::Returns the contents of this ResourceBundle:::return
AuthResources_zh_CN#getContents():::Returns the contents of this ResourceBundle:::return
BitArray#subscript(int)::: bit array subscript:::return
BitArray#position(int)::: bit array position:::return
BitArray#get(int)::: Returns the indexed bit in this BitArray.:::if->throw->Integer->toString->new->ArrayIndexOutOfBoundsException->return->subscript->position
BitArray#set(int, boolean)::: Sets the indexed bit in this BitArray.:::if->throw->Integer->toString->new->ArrayIndexOutOfBoundsException->idx->subscript->bit->position->if->else
BitArray#length():::Returns the length of this BitArray.:::return
BitArray#toByteArray():::Returns a Byte array containing the contents of this BitArray:::return->repn->clone
BitArray#equals(Object)::: bit array equals:::if->return->if->return->ba->if->return->for->i->return
BitArray#toBooleanArray():::Return a boolean array with the same bit values a this BitArray.:::bits->new->booleanArr->for->i->return
BitArray#hashCode():::Returns a hash code value for this bit array.:::hashCode->for->i->return
BitArray#clone()::: bit array clone:::return->new->BitArray
BitArray#toString()::: Returns a string representation of this BitArray.:::out->new->ByteArrayOutputStream->for->i->for->i->return->out->toByteArray->new->String
BitArray#truncate()::: bit array truncate:::for->i->return->new->BitArray
ByteArrayLexOrder#compare(byte[], byte[]):::Perform lexicographical comparison of two byte arrays, regarding each byte as unsigned:::diff->for->i->return
ByteArrayTagOrder#compare(byte[], byte[])::: byte array tag order compare:::return
Cache#size():::Return the number of currently valid entries in the cache.:::
Cache#clear():::Remove all entries from the cache.:::
Cache#put(K, V):::Add an entry to the cache.:::
Cache#get(Object):::Get a value from the cache.:::
Cache#remove(Object):::Remove an entry from the cache.:::
Cache#setCapacity(int):::Set the maximum size.:::
Cache#setTimeout(int):::Set the timeout(in seconds).:::
Cache#accept(CacheVisitor):::accept a visitor:::
Cache#newSoftMemoryCache(int):::Return a new memory cache with the specified maximum size, unlimited lifetime for entries, with the values held by SoftReferences.:::return->new->MemoryCache<>
Cache#newSoftMemoryCache(int, int):::Return a new memory cache with the specified maximum size, the specified maximum lifetime (in seconds), with the values held by SoftReferences.:::return->new->MemoryCache<>
Cache#newHardMemoryCache(int):::Return a new memory cache with the specified maximum size, unlimited lifetime for entries, with the values held by standard references.:::return->new->MemoryCache<>
Cache#newNullCache():::Return a dummy cache that does nothing.:::return
Cache#newHardMemoryCache(int, int):::Return a new memory cache with the specified maximum size, the specified maximum lifetime (in seconds), with the values held by standard references.:::return->new->MemoryCache<>
Cache.EqualByteArray#hashCode()::: equal byte array hash code:::h->if->Arrays->hashCode->return
Cache.EqualByteArray#equals(Object)::: equal byte array equals:::if->return->if->return->other->return->Arrays->equals
Cache.CacheVisitor#visit(Map)::: cache visitor visit:::
NullCache#size()::: null cache size:::return
NullCache#clear()::: null cache clear:::
NullCache#put(K, V)::: null cache put:::
NullCache#get(Object)::: null cache get:::return
NullCache#remove(Object)::: null cache remove:::
NullCache#setCapacity(int)::: null cache set capacity:::
NullCache#setTimeout(int)::: null cache set timeout:::
NullCache#accept(CacheVisitor)::: null cache accept:::
MemoryCache#emptyQueue():::Empty the reference queue and remove all corresponding entries from the cache:::if->return->startSize->cacheMap->size->while->entry->queue->poll->if->break->key->entry->getKey->if->continue->currentEntry->cacheMap->remove->if->cacheMap->put->if->endSize->cacheMap->size->if->println
MemoryCache#expungeExpiredEntries():::Scan all entries and remove all expired ones.:::emptyQueue->if->return->cnt->time->System->currentTimeMillis->for->t->cacheMap->values->iterator->t->hasNext->if->if->cacheMap->size->println
MemoryCache#size()::: memory cache size:::expungeExpiredEntries->return->cacheMap->size
MemoryCache#clear()::: memory cache clear:::if->foreach->cacheMap->values->entry->invalidate->while->queue->poll->cacheMap->clear
MemoryCache#put(K, V)::: memory cache put:::emptyQueue->expirationTime->System->currentTimeMillis->newEntry->newEntry->oldEntry->cacheMap->put->if->oldEntry->invalidate->return->if->cacheMap->size->expungeExpiredEntries->if->cacheMap->size->t->cacheMap->values->iterator->lruEntry->t->next->if->lruEntry->getKey->lruEntry->getValue->println->t->remove->lruEntry->invalidate
MemoryCache#get(Object)::: memory cache get:::emptyQueue->entry->cacheMap->get->if->return->time->System->currentTimeMillis->if->entry->isValid->if->println->cacheMap->remove->return->return->entry->getValue
MemoryCache#remove(Object)::: memory cache remove:::emptyQueue->entry->cacheMap->remove->if->entry->invalidate
MemoryCache#setCapacity(int)::: memory cache set capacity:::expungeExpiredEntries->if->cacheMap->size->t->cacheMap->values->iterator->for->i->cacheMap->size->if->println
MemoryCache#setTimeout(int)::: memory cache set timeout:::emptyQueue->if->println
MemoryCache#accept(CacheVisitor)::: memory cache accept:::expungeExpiredEntries->cached->getCachedEntries->visitor->visit
MemoryCache#getCachedEntries()::: memory cache get cached entries:::kvmap->cacheMap->size->new->HashMap<>->foreach->cacheMap->values->kvmap->entry->getKey->entry->getValue->put->return
MemoryCache#newEntry(K, V, long, ReferenceQueue)::: memory cache new entry:::if->return->new->SoftCacheEntry<>->else->return->new->HardCacheEntry<>
MemoryCache.CacheEntry#isValid(long)::: cache entry is valid:::
MemoryCache.CacheEntry#invalidate()::: cache entry invalidate:::
MemoryCache.CacheEntry#getKey()::: cache entry get key:::
MemoryCache.CacheEntry#getValue()::: cache entry get value:::
MemoryCache.HardCacheEntry#getKey()::: hard cache entry get key:::return
MemoryCache.HardCacheEntry#getValue()::: hard cache entry get value:::return
MemoryCache.HardCacheEntry#isValid(long)::: hard cache entry is valid:::valid->if->invalidate->return
MemoryCache.HardCacheEntry#invalidate()::: hard cache entry invalidate:::
MemoryCache.SoftCacheEntry#getKey()::: soft cache entry get key:::return
MemoryCache.SoftCacheEntry#getValue()::: soft cache entry get value:::return->get
MemoryCache.SoftCacheEntry#isValid(long)::: soft cache entry is valid:::valid->get->if->invalidate->return
MemoryCache.SoftCacheEntry#invalidate()::: soft cache entry invalidate:::clear
ConsoleCallbackHandler#handle(Callback[]):::Handles the specified set of callbacks.:::confirmation->for->i->if->doConfirmation
ConsoleCallbackHandler#readLine()::: console callback handler read line:::result->new->InputStreamReader->new->BufferedReader->readLine->if->throw->new->IOException->return
ConsoleCallbackHandler#doConfirmation(ConfirmationCallback)::: console callback handler do confirmation:::prefix->messageType->confirmation->getMessageType->switch->break->break->break->throw->new->UnsupportedCallbackException->options->optionType->confirmation->getOptionType->switch->new->OptionInfoArr->new->OptionInfo->new->OptionInfo->break->new->OptionInfoArr->new->OptionInfo->new->OptionInfo->new->OptionInfo->break->new->OptionInfoArr->new->OptionInfo->new->OptionInfo->break->optionStrings->confirmation->getOptions->new->OptionInfoArr->for->i->break->throw->new->UnsupportedCallbackException->defaultOption->confirmation->getDefaultOption->prompt->confirmation->getPrompt->if->if->prompt->equals->println->for->i->print->flush->result->try->Integer->readLine->parseInt->if->catch->finally->confirmation->setSelectedIndex
ConstraintsParameters#getAlgorithm()::: constraints parameters get algorithm:::return
ConstraintsParameters#getAlgParams()::: constraints parameters get alg params:::return
ConstraintsParameters#getPublicKey()::: constraints parameters get public key:::return
ConstraintsParameters#isTrustedMatch()::: constraints parameters is trusted match:::return
ConstraintsParameters#getCertificate()::: constraints parameters get certificate:::return
ConstraintsParameters#getPKIXParamDate()::: constraints parameters get param date:::return
ConstraintsParameters#getJARTimestamp()::: constraints parameters get timestamp:::return
ConstraintsParameters#getVariant()::: constraints parameters get variant:::return
CurveDB#getSupportedCurves()::: curve b get supported curves:::return
CurveDB#lookup(String)::: curve b lookup:::spec->oidMap->get->if->return->return->nameMap->get
CurveDB#lookup(int)::: curve b lookup:::return->lengthMap->get
CurveDB#lookup(ECParameterSpec)::: curve b lookup:::if->return->fieldSize->params->getCurve->getField->getFieldSize->foreach->if->namedCurve->getCurve->getField->getFieldSize->continue->if->namedCurve->getCurve->params->getCurve->equals->continue->if->namedCurve->getGenerator->params->getGenerator->equals->continue->if->namedCurve->getOrder->params->getOrder->equals->continue->if->namedCurve->getCofactor->params->getCofactor->continue->return->return
CurveDB#bi(String)::: curve b bi:::return->new->BigInteger
CurveDB#add(String, String, int, String, String, String, String, String, String, int, Pattern)::: curve b add:::p->bi->field->if->new->ECFieldFp->else->if->p->bitLength->new->ECFieldF2m->else->throw->new->RuntimeException->curve->bi->bi->new->EllipticCurve->g->bi->bi->new->ECPoint->params->bi->new->NamedCurve->if->oidMap->put->throw->new->RuntimeException->commonNames->nameSplitPattern->split->foreach->if->nameMap->commonName->trim->put->throw->new->RuntimeException->len->field->getFieldSize->if->lengthMap->get->lengthMap->put
Debug#Help()::: debug  help:::println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->System->exit
Debug#getInstance(String)::: debug get instance:::return->getInstance
Debug#getInstance(String, String):::Get a Debug object corresponding to whether or not the given option is set:::if->isOn->d->new->Debug->return->else->return
Debug#isOn(String):::True if the system property "security.debug" contains the string "option".:::if->return->else->if->args->indexOf->return->else->return->args->indexOf
Debug#isVerbose():::Check if verbose messages is enabled for extra debugging.:::return->isOn
Debug#println(String)::: debug println:::println
Debug#println(Object, String):::print a message to stderr that is prefixed with the prefix created from the call to getInstance and obj.:::obj->getClass->getSimpleName->System->identityHashCode->println
Debug#println()::: debug println:::println
Debug#println(String, String)::: debug println:::println
Debug#getPrintStream():::PrintStream for debug methods:::return
Debug#toHexString(BigInteger):::return a hexadecimal printed representation of the specified BigInteger object:::hexValue->b->toString->sb->hexValue->length->new->StringBuilder->if->hexValue->startsWith->sb->append->hexValue->substring->else->sb->append->if->hexValue->length->i->while->hexValue->length->sb->hexValue->substring->append->if->hexValue->length->if->sb->append->else->if->sb->append->return->sb->toString
Debug#marshal(String):::change a string into lower case except permission classes and URLs.:::if->target->new->StringBuilder->source->new->StringBuffer->keyReg->keyStr->reg->pattern->Pattern->compile->matcher->pattern->matcher->left->new->StringBuffer->while->matcher->find->matched->matcher->group->target->matched->replaceFirst->append->target->append->matcher->appendReplacement->matcher->appendTail->Pattern->compile->pattern->matcher->new->StringBuffer->while->matcher->find->matched->matcher->group->target->matched->replaceFirst->append->target->append->matcher->appendReplacement->matcher->appendTail->target->source->toString->toLowerCase->append->return->target->toString->return
Debug#toString(byte[])::: debug to string:::if->return->sb->new->StringBuilder->for->i->return->sb->toString
DerEncoder#derEncode(OutputStream):::DER encode this object and write the results to a stream.:::
DerIndefLenConverter#isEOC(int)::: der indef len converter is c:::return
DerIndefLenConverter#isLongForm(int)::: der indef len converter is long form:::return
DerIndefLenConverter#isIndefinite(int):::Checks whether the given length byte is of the form Indefinite.:::return->isLongForm
DerIndefLenConverter#parseTag():::Parse the tag and if it is an end-of-contents tag then add the current position to the eocList vector.:::if->return->try->if->isEOC->numOfEncapsulatedLenBytes->elem->index->for->ndefsList->size->if->throw->new->IOException->sectionLen->intValue->sectionLenBytes->getLengthBytes->ndefsList->set->catch->throw->new->IOException->finally
DerIndefLenConverter#writeTag():::Write the tag and if it is an end-of-contents tag then skip the tag and its 1 byte length of zero.:::if->return->tag->if->isEOC->writeTag->else
DerIndefLenConverter#parseLength():::Parse the length and if it is an indefinite length then add the current position to the ndefsList vector.:::curLen->if->return->lenByte->if->isIndefinite->ndefsList->add->return->if->isLongForm->if->throw->new->IOException->if->throw->new->IOException->for->i->if->throw->new->IOException->else->return
DerIndefLenConverter#writeLengthAndValue():::Write the length and if it is an indefinite length then calculate the definite length from the positions of the indefinite length and its matching EOC terminator:::if->return->curLen->lenByte->if->isIndefinite->lenBytes->ndefsList->get->System->arraycopy->return->if->isLongForm->for->i->if->throw->new->IOException->else->writeLength->writeValue
DerIndefLenConverter#writeLength(int)::: der indef len converter write length:::if->else->if->else->if->else->if->else
DerIndefLenConverter#getLengthBytes(int)::: der indef len converter get length bytes:::lenBytes->index->if->new->byteArr->else->if->new->byteArr->else->if->new->byteArr->else->if->new->byteArr->else->new->byteArr->return
DerIndefLenConverter#getNumOfLenBytes(int)::: der indef len converter get num of len bytes:::numOfLenBytes->if->else->if->else->if->else->if->else->return
DerIndefLenConverter#parseValue(int):::Parse the value;:::
DerIndefLenConverter#writeValue(int):::Write the value;:::for->i
DerIndefLenConverter#convert(byte[]):::Converts a indefinite length DER encoded byte array to a definte length DER encoding.:::len->unused->while->parseTag->parseLength->parseValue->if->break->if->throw->new->IOException->new->byteArr->while->writeTag->writeLengthAndValue->System->arraycopy->return
DerInputBuffer#dup()::: der input buffer dup:::try->retval->clone->retval->mark->return->catch->throw->e->toString->new->IllegalArgumentException->finally
DerInputBuffer#toByteArray()::: der input buffer to byte array:::len->available->if->return->retval->new->byteArr->System->arraycopy->return
DerInputBuffer#peek()::: der input buffer peek:::if->throw->new->IOException->else->return
DerInputBuffer#equals(Object):::Compares this DerInputBuffer for equality with the specified object.:::if->return->equals->else->return
DerInputBuffer#equals(DerInputBuffer)::: der input buffer equals:::if->return->max->this->available->if->other->available->return->for->i->return
DerInputBuffer#hashCode():::Returns a hashcode for this DerInputBuffer.:::retval->len->available->p->for->i->return
DerInputBuffer#truncate(int)::: der input buffer truncate:::if->available->throw->new->IOException
DerInputBuffer#getBigInteger(int, boolean):::Returns the integer which takes up the specified number of bytes in this buffer as a BigInteger.:::if->available->throw->new->IOException->if->throw->new->IOException->bytes->new->byteArr->System->arraycopy->skip->if->throw->new->IOException->if->return->new->BigInteger->else->return->new->BigInteger
DerInputBuffer#getInteger(int):::Returns the integer which takes up the specified number of bytes in this buffer.:::result->getBigInteger->if->result->BigInteger->valueOf->compareTo->throw->new->IOException->if->result->BigInteger->valueOf->compareTo->throw->new->IOException->return->result->intValue
DerInputBuffer#getBitString(int):::Returns the bit string which takes up the specified number of bytes in this buffer.:::if->available->throw->new->IOException->if->throw->new->IOException->numOfPadBits->if->throw->new->IOException->retval->new->byteArr->System->arraycopy->if->skip->return
DerInputBuffer#getBitString():::Returns the bit string which takes up the rest of this buffer.:::return->available->getBitString
DerInputBuffer#getUnalignedBitString():::Returns the bit string which takes up the rest of this buffer:::if->return->len->available->unusedBits->if->throw->new->IOException->bits->new->byteArr->length->System->arraycopy->bitArray->new->BitArray->return
DerInputBuffer#getUTCTime(int):::Returns the UTC Time value that takes up the specified number of bytes in this buffer.:::if->available->throw->new->IOException->if->throw->new->IOException->return->getTime
DerInputBuffer#getGeneralizedTime(int):::Returns the Generalized Time value that takes up the specified number of bytes in this buffer.:::if->available->throw->new->IOException->if->throw->new->IOException->return->getTime
DerInputBuffer#getTime(int, boolean):::Private helper routine to extract time from the der value.:::year->month->day->hour->minute->second->millis->type->if->Character->digit->Character->digit->Character->digit->Character->digit->else->Character->digit->Character->digit->if->else->Character->digit->Character->digit->Character->digit->Character->digit->Character->digit->Character->digit->Character->digit->Character->digit->if->Character->digit->Character->digit->if->precision->while->thisDigit->Character->digit->switch->break->break->break->if->throw->new->IOException->else->if->throw->new->IOException->gcal->CalendarSystem->getGregorianCalendar->date->gcal->newCalendarDate->date->setDate->date->setTimeOfDay->time->gcal->getTime->if->throw->new->IOException->hr->min->switch->Character->digit->Character->digit->Character->digit->Character->digit->if->throw->new->IOException->break->Character->digit->Character->digit->Character->digit->Character->digit->if->throw->new->IOException->break->break->throw->new->IOException->return->new->Date
DerInputStream#init(byte[], int, int, boolean)::: der input stream init:::if->throw->new->IOException->if->DerIndefLenConverter->isIndefinite->if->throw->new->IOException->else->inData->new->byteArr->System->arraycopy->derIn->new->DerIndefLenConverter->derIn->convert->new->DerInputBuffer->else->new->DerInputBuffer->buffer->mark
DerInputStream#subStream(int, boolean):::Creates a new DER input stream from part of this input stream.:::newbuf->buffer->dup->newbuf->truncate->if->buffer->skip->return->new->DerInputStream
DerInputStream#toByteArray():::Return what has been written to this DerInputStream as a byte array:::return->buffer->toByteArray
DerInputStream#getInteger():::Get an integer from the input stream as an integer.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getInteger
DerInputStream#getBigInteger():::Get a integer from the input stream as a BigInteger object.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getBigInteger
DerInputStream#getPositiveBigInteger():::Returns an ASN.1 INTEGER value as a positive BigInteger:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getBigInteger
DerInputStream#getEnumerated():::Get an enumerated from the input stream.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getInteger
DerInputStream#getBitString():::Get a bit string from the input stream:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getBitString
DerInputStream#getUnalignedBitString():::Get a bit string from the input stream:::if->buffer->read->throw->new->IOException->length->getDefiniteLength->if->return->new->BitArray->excessBits->buffer->read->if->throw->new->IOException->validBits->if->throw->new->IOException->repn->new->byteArr->if->buffer->read->throw->new->IOException->return->new->BitArray
DerInputStream#getOctetString():::Returns an ASN.1 OCTET STRING from the input stream.:::if->buffer->read->throw->new->IOException->length->getDefiniteLength->retval->new->byteArr->if->buffer->read->throw->new->IOException->return
DerInputStream#getBytes(byte[]):::Returns the asked number of bytes from the input stream.:::if->buffer->read->throw->new->IOException
DerInputStream#getNull():::Reads an encoded null value from the input stream.:::if->buffer->read->buffer->read->throw->new->IOException
DerInputStream#getOID():::Reads an X.200 style Object Identifier from the stream.:::return->new->ObjectIdentifier
DerInputStream#getSequence(int):::Return a sequence of encoded entities:::buffer->read->if->throw->new->IOException->return->readVector
DerInputStream#getSet(int):::Return a set of encoded entities:::buffer->read->if->throw->new->IOException->return->readVector
DerInputStream#getSet(int, boolean):::Return a set of encoded entities:::buffer->read->if->if->throw->new->IOException->return->readVector
DerInputStream#readVector(int)::: der input stream read vector:::newstr->lenByte->buffer->read->len->getLength->if->readLen->buffer->available->offset->indefData->new->byteArr->dis->new->DataInputStream->dis->readFully->dis->close->derIn->new->DerIndefLenConverter->derIn->convert->new->DerInputBuffer->if->buffer->read->throw->new->IOException->DerInputStream->getDefiniteLength->if->return->new->DerValueArr->if->buffer->available->else->subStream->vec->new->Vector<>->value->do->new->DerValue->vec->addElement->while->newstr->available->if->newstr->available->throw->new->IOException->i->max->vec->size->retval->new->DerValueArr->for->return
DerInputStream#getDerValue():::Get a single DER-encoded value from the input stream:::return->new->DerValue
DerInputStream#getUTF8String():::Read a string that was encoded as a UTF8String DER value.:::return->readString
DerInputStream#getPrintableString():::Read a string that was encoded as a PrintableString DER value.:::return->readString
DerInputStream#getT61String():::Read a string that was encoded as a T61String DER value.:::return->readString
DerInputStream#getIA5String():::Read a string that was encoded as a IA5tring DER value.:::return->readString
DerInputStream#getBMPString():::Read a string that was encoded as a BMPString DER value.:::return->readString
DerInputStream#getGeneralString():::Read a string that was encoded as a GeneralString DER value.:::return->readString
DerInputStream#readString(byte, String, String):::Private helper routine to read an encoded string from the input stream.:::if->buffer->read->throw->new->IOException->length->getDefiniteLength->retval->new->byteArr->if->buffer->read->throw->new->IOException->return->new->String
DerInputStream#getUTCTime():::Get a UTC encoded time value from the input stream.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getUTCTime
DerInputStream#getGeneralizedTime():::Get a Generalized encoded time value from the input stream.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getGeneralizedTime
DerInputStream#getByte()::: der input stream get byte:::return->buffer->read
DerInputStream#peekByte()::: der input stream peek byte:::return->buffer->peek
DerInputStream#getLength()::: der input stream get length:::return->getLength
DerInputStream#getLength(InputStream)::: der input stream get length:::return->in->read->getLength
DerInputStream#getLength(int, InputStream)::: der input stream get length:::value->tmp->if->throw->new->IOException->mdName->if->else->if->return->if->throw->new->IOException->in->read->if->throw->new->IOException->while->in->read->if->throw->new->IOException->else->if->throw->new->IOException->return
DerInputStream#getDefiniteLength()::: der input stream get definite length:::return->getDefiniteLength
DerInputStream#getDefiniteLength(InputStream)::: der input stream get definite length:::len->getLength->if->throw->new->IOException->return
DerInputStream#mark(int):::Mark the current position in the buffer, so that a later call to reset will return here.:::buffer->mark
DerInputStream#reset():::Return to the position of the last mark call:::buffer->reset
DerInputStream#available():::Returns the number of bytes available for reading:::return->buffer->available
DerOutputStream#write(byte, byte[]):::Writes tagged, pre-marshaled data:::write->putLength->write
DerOutputStream#write(byte, DerOutputStream):::Writes tagged data using buffer-to-buffer copy:::write->putLength->write
DerOutputStream#writeImplicit(byte, DerOutputStream):::Writes implicitly tagged data using buffer-to-buffer copy:::write->write
DerOutputStream#putDerValue(DerValue):::Marshals pre-encoded DER value onto the output stream.:::val->encode
DerOutputStream#putBoolean(boolean):::Marshals a DER boolean on the output stream.:::write->putLength->if->write->else->write
DerOutputStream#putEnumerated(int):::Marshals a DER enumerated on the output stream.:::write->putIntegerContents
DerOutputStream#putInteger(BigInteger):::Marshals a DER integer on the output stream.:::write->buf->i->toByteArray->putLength->write
DerOutputStream#putInteger(Integer):::Marshals a DER integer on the output stream.:::i->intValue->putInteger
DerOutputStream#putInteger(int):::Marshals a DER integer on the output stream.:::write->putIntegerContents
DerOutputStream#putIntegerContents(int)::: der output stream put integer contents:::bytes->new->byteArr->start->if->for->j->else->if->for->j->putLength->for->k
DerOutputStream#putBitString(byte[]):::Marshals a DER bit string on the output stream:::write->putLength->write->write
DerOutputStream#putUnalignedBitString(BitArray):::Marshals a DER bit string on the output stream:::bits->ba->toByteArray->write->putLength->ba->length->write->write
DerOutputStream#putTruncatedUnalignedBitString(BitArray):::Marshals a truncated DER bit string on the output stream:::ba->truncate->putUnalignedBitString
DerOutputStream#putOctetString(byte[]):::DER-encodes an ASN.1 OCTET STRING value on the output stream.:::write
DerOutputStream#putNull():::Marshals a DER "null" value on the output stream:::write->putLength
DerOutputStream#putOID(ObjectIdentifier):::Marshals an object identifier (OID) on the output stream:::oid->encode
DerOutputStream#putSequence(DerValue[]):::Marshals a sequence on the output stream:::bytes->new->DerOutputStream->i->for->write
DerOutputStream#putSet(DerValue[]):::Marshals the contents of a set on the output stream without ordering the elements:::bytes->new->DerOutputStream->i->for->write
DerOutputStream#putOrderedSetOf(byte, DerEncoder[]):::Marshals the contents of a set on the output stream:::putOrderedSet
DerOutputStream#putOrderedSet(byte, DerEncoder[]):::Marshals the contents of a set on the output stream:::putOrderedSet
DerOutputStream#putOrderedSet(byte, DerEncoder[], Comparator):::Marshals a the contents of a set on the output stream with the encodings of its sorted in increasing order.:::streams->new->DerOutputStreamArr->for->i->bufs->new->byteArrs->for->i->Arrays->sort->bytes->new->DerOutputStream->for->i->write
DerOutputStream#putUTF8String(String):::Marshals a string as a DER encoded UTF8String.:::writeString
DerOutputStream#putPrintableString(String):::Marshals a string as a DER encoded PrintableString.:::writeString
DerOutputStream#putT61String(String):::Marshals a string as a DER encoded T61String.:::writeString
DerOutputStream#putIA5String(String):::Marshals a string as a DER encoded IA5String.:::writeString
DerOutputStream#putBMPString(String):::Marshals a string as a DER encoded BMPString.:::writeString
DerOutputStream#putGeneralString(String):::Marshals a string as a DER encoded GeneralString.:::writeString
DerOutputStream#writeString(String, byte, String):::Private helper routine for writing DER encoded string values.:::data->s->getBytes->write->putLength->write
DerOutputStream#putUTCTime(Date):::Marshals a DER UTC time/date value:::putTime
DerOutputStream#putGeneralizedTime(Date):::Marshals a DER Generalized Time/date value:::putTime
DerOutputStream#putTime(Date, byte):::Private helper routine for marshalling a DER UTC/Generalized time/date value:::tz->TimeZone->getTimeZone->pattern->if->else->sdf->new->SimpleDateFormat->sdf->setTimeZone->time->sdf->format->getBytes->write->putLength->write
DerOutputStream#putLength(int):::Put the encoding of the length in the stream.:::if->write->else->if->write->write->else->if->write->write->write->else->if->write->write->write->write->else->write->write->write->write->write
DerOutputStream#putTag(byte, boolean, byte):::Put the tag of the attribute in the stream.:::tag->if->write
DerOutputStream#derEncode(OutputStream)::: Write the current contents of this DerOutputStream  to an OutputStream.:::out->toByteArray->write
DerValue#isUniversal():::Returns true if the tag class is UNIVERSAL.:::return
DerValue#isApplication():::Returns true if the tag class is APPLICATION.:::return
DerValue#isContextSpecific():::Returns true iff the CONTEXT SPECIFIC bit is set in the type tag:::return
DerValue#isContextSpecific(byte):::Returns true iff the CONTEXT SPECIFIC TAG matches the passed tag.:::if->isContextSpecific->return->return
DerValue#isPrivate()::: der value is private:::return
DerValue#isConstructed():::Returns true iff the CONSTRUCTED bit is set in the type tag.:::return
DerValue#isConstructed(byte):::Returns true iff the CONSTRUCTED TAG matches the passed tag.:::if->isConstructed->return->return
DerValue#init(byte, String)::: der value init:::enc->switch->break->break->break->break->throw->new->IllegalArgumentException->buf->value->getBytes->new->DerInputBuffer->result->new->DerInputStream->result->mark->return
DerValue#init(boolean, InputStream, boolean)::: der value init:::in->read->lenByte->in->read->DerInputStream->getLength->if->readLen->in->available->offset->indefData->new->byteArr->dis->new->DataInputStream->dis->readFully->dis->close->derIn->new->DerIndefLenConverter->derIn->convert->new->ByteArrayInputStream->if->in->read->throw->new->IOException->DerInputStream->getDefiniteLength->if->in->available->throw->new->IOException->bytes->IOUtils->readExactlyNBytes->new->DerInputBuffer->return->new->DerInputStream
DerValue#encode(DerOutputStream):::Encode an ASN1/DER encoded datum onto a DER output stream.:::out->write->out->putLength->if->value->new->byteArr->synchronized->buffer->reset->if->buffer->read->throw->new->IOException->out->write
DerValue#getData()::: der value get data:::return
DerValue#getTag()::: der value get tag:::return
DerValue#getBoolean():::Returns an ASN.1 BOOLEAN:::if->throw->new->IOException->if->throw->new->IOException->if->buffer->read->return->return
DerValue#getOID():::Returns an ASN.1 OBJECT IDENTIFIER.:::if->throw->new->IOException->return->new->ObjectIdentifier
DerValue#append(byte[], byte[])::: der value append:::if->return->ret->new->byteArr->System->arraycopy->System->arraycopy->return
DerValue#getOctetString():::Returns an ASN.1 OCTET STRING:::if->isConstructed->throw->new->IOException->if->return->new->byteArr->arrayInput->if->arrayInput->available->throw->new->IOException->bytes->new->byteArr->arrayInput->read->if->isConstructed->in->new->DerInputStream->while->in->available->in->getOctetString->append->return
DerValue#getInteger():::Returns an ASN.1 INTEGER value as an integer.:::if->throw->new->IOException->return->buffer->data->available->getInteger
DerValue#getBigInteger():::Returns an ASN.1 INTEGER value as a BigInteger.:::if->throw->new->IOException->return->buffer->data->available->getBigInteger
DerValue#getPositiveBigInteger():::Returns an ASN.1 INTEGER value as a positive BigInteger:::if->throw->new->IOException->return->buffer->data->available->getBigInteger
DerValue#getEnumerated():::Returns an ASN.1 ENUMERATED value.:::if->throw->new->IOException->return->buffer->data->available->getInteger
DerValue#getBitString():::Returns an ASN.1 BIT STRING value:::if->throw->new->IOException->return->buffer->getBitString
DerValue#getUnalignedBitString():::Returns an ASN.1 BIT STRING value that need not be byte-aligned.:::if->throw->new->IOException->return->buffer->getUnalignedBitString
DerValue#getAsString()::: der value get as string:::if->return->getUTF8String->else->if->return->getPrintableString->else->if->return->getT61String->else->if->return->getIA5String->else->if->return->getBMPString->else->if->return->getGeneralString->else->return
DerValue#getBitString(boolean):::Returns an ASN.1 BIT STRING value, with the tag assumed implicit based on the parameter:::if->if->throw->new->IOException->return->buffer->getBitString
DerValue#getUnalignedBitString(boolean):::Returns an ASN.1 BIT STRING value, with the tag assumed implicit based on the parameter:::if->if->throw->new->IOException->return->buffer->getUnalignedBitString
DerValue#getDataBytes():::Helper routine to return all the bytes contained in the DerInputStream associated with this object.:::retVal->new->byteArr->synchronized->data->reset->data->getBytes->return
DerValue#getPrintableString():::Returns an ASN.1 STRING value:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getT61String():::Returns an ASN.1 T61 (Teletype) STRING value:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getIA5String():::Returns an ASN.1 IA5 (ASCII) STRING value:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getBMPString():::Returns the ASN.1 BMP (Unicode) STRING value as a Java string.:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getUTF8String():::Returns the ASN.1 UTF-8 STRING value as a Java String.:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getGeneralString():::Returns the ASN.1 GENERAL STRING value as a Java String.:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getUTCTime():::Returns a Date if the DerValue is UtcTime.:::if->throw->new->IOException->return->buffer->data->available->getUTCTime
DerValue#getGeneralizedTime():::Returns a Date if the DerValue is GeneralizedTime.:::if->throw->new->IOException->return->buffer->data->available->getGeneralizedTime
DerValue#equals(Object):::Bitwise equality comparison:::if->return->if->return->other->if->return->if->return->return->System->identityHashCode->System->identityHashCode->doEquals->doEquals
DerValue#doEquals(DerValue, DerValue):::Helper for public method equals():::synchronized->synchronized->reset->reset->return->equals
DerValue#toString():::Returns a printable representation of the value.:::try->str->getAsString->if->return->if->return->if->return->getOID->else->return->catch->throw->new->IllegalArgumentException->finally
DerValue#toByteArray():::Returns a DER-encoded value, such that if it's passed to the DerValue constructor, a value equivalent to "this" is returned.:::out->new->DerOutputStream->encode->data->reset->return->out->toByteArray
DerValue#toDerInputStream():::For "set" and "sequence" types, this function may be used to return a DER stream of the members of the set or sequence:::if->return->new->DerInputStream->throw->new->IOException
DerValue#length():::Get the length of the encoded value.:::return
DerValue#isPrintableStringChar(char):::Determine if a character is one of the permissible characters for PrintableString: A-Z, a-z, 0-9, space, apostrophe (39), left and right parentheses, plus sign, comma, hyphen, period, slash, colon, equals sign, and question mark:::if->return->else->switch->return->return
DerValue#createTag(byte, boolean, byte):::Create the tag of the attribute.:::tag->if->return
DerValue#resetTag(byte):::Set the tag of the attribute:::
DerValue#hashCode():::Returns a hashcode for this DerValue.:::return->toString->hashCode
DisabledAlgorithmConstraints#permits(Set, String, AlgorithmParameters)::: disabled algorithm constraints permits:::if->checkAlgorithm->return->if->return->algorithmConstraints->permits->return
DisabledAlgorithmConstraints#permits(Set, Key)::: disabled algorithm constraints permits:::return->checkConstraints
DisabledAlgorithmConstraints#permits(Set, String, Key, AlgorithmParameters)::: disabled algorithm constraints permits:::if->algorithm->length->throw->new->IllegalArgumentException->return->checkConstraints
DisabledAlgorithmConstraints#permits(ConstraintsParameters)::: disabled algorithm constraints permits:::cp->getAlgorithm->permits
DisabledAlgorithmConstraints#permits(String, Key, AlgorithmParameters, String)::: disabled algorithm constraints permits:::new->ConstraintsParameters->permits
DisabledAlgorithmConstraints#permits(String, ConstraintsParameters)::: disabled algorithm constraints permits:::algorithmConstraints->permits
DisabledAlgorithmConstraints#checkProperty(String)::: disabled algorithm constraints check property:::param->toLowerCase->foreach->if->block->toLowerCase->indexOf->return->return
DisabledAlgorithmConstraints#checkConstraints(Set, String, Key, AlgorithmParameters)::: disabled algorithm constraints check constraints:::if->throw->new->IllegalArgumentException->if->algorithm->length->if->permits->return->if->key->getAlgorithm->permits->return->return->algorithmConstraints->permits
DisabledAlgorithmConstraints.Constraints#getConstraints(String)::: constraints get constraints:::return->constraintsMap->get
DisabledAlgorithmConstraints.Constraints#permits(Key)::: constraints permits:::list->key->getAlgorithm->getConstraints->if->return->foreach->if->constraint->permits->if->debug->KeyUtil->getKeySize->println->return->return
DisabledAlgorithmConstraints.Constraints#permits(String, AlgorithmParameters)::: constraints permits:::list->getConstraints->if->return->foreach->if->constraint->permits->if->debug->println->return->return
DisabledAlgorithmConstraints.Constraints#permits(String, ConstraintsParameters)::: constraints permits:::cert->cp->getCertificate->if->debug->cp->getVariant->println->algorithms->new->HashSet<>->if->algorithms->AlgorithmDecomposer->decomposeOneHash->addAll->if->algorithms->cert->getPublicKey->getAlgorithm->add->if->cp->getPublicKey->algorithms->cp->getPublicKey->getAlgorithm->add->foreach->list->getConstraints->if->continue->foreach->constraint->permits
DisabledAlgorithmConstraints.Constraint#permits(Key):::Check if an algorithm constraint is permitted with a given key:::return
DisabledAlgorithmConstraints.Constraint#permits(AlgorithmParameters):::Check if the algorithm constraint permits a given cryptographic parameters.:::return
DisabledAlgorithmConstraints.Constraint#permits(ConstraintsParameters):::Check if an algorithm constraint is permitted with a given ConstraintsParameters:::
DisabledAlgorithmConstraints.Constraint#next(ConstraintsParameters):::Recursively check if the constraints are allowed:::if->nextConstraint->permits->return->return
DisabledAlgorithmConstraints.Constraint#next(Key):::Recursively check if this constraint is allowed,  If nextConstraint is non-null, this method will call nextConstraint's permit() to check if the constraint is allowed or denied:::if->nextConstraint->permits->return->return
DisabledAlgorithmConstraints.Constraint#extendedMsg(ConstraintsParameters)::: constraint extended msg:::return->cp->getCertificate->cp->getCertificate->getSubjectX500Principal->cp->getVariant->cp->getVariant
DisabledAlgorithmConstraints.jdkCAConstraint#permits(ConstraintsParameters):::jdk constraint permits:::if->debug->println->if->cp->isTrustedMatch->if->next->return->throw->extendedMsg->new->CertPathValidatorException
DisabledAlgorithmConstraints.DenyAfterConstraint#permits(ConstraintsParameters)::: deny after constraint permits:::currentDate->errmsg->if->cp->getJARTimestamp->cp->getJARTimestamp->getTimestamp->else->if->cp->getPKIXParamDate->cp->getPKIXParamDate->else->new->Date->if->denyAfterDate->after->if->next->return->throw->dateFormat->format->dateFormat->format->extendedMsg->new->CertPathValidatorException
DisabledAlgorithmConstraints.DenyAfterConstraint#permits(Key)::: deny after constraint permits:::if->next->return->if->debug->println->return->denyAfterDate->new->Date->after
DisabledAlgorithmConstraints.UsageConstraint#permits(ConstraintsParameters)::: usage constraint permits:::foreach->v->if->usage->compareToIgnoreCase->else->if->usage->compareToIgnoreCase->else->if->usage->compareToIgnoreCase->if->debug->cp->getVariant->println->if->Debug->isVerbose->new->Exception->debug->getPrintStream->printStackTrace->if->cp->getVariant->compareTo->if->next->return->throw->extendedMsg->new->CertPathValidatorException
DisabledAlgorithmConstraints.KeySizeConstraint#permits(ConstraintsParameters)::: key size constraint permits:::key->if->cp->getPublicKey->cp->getPublicKey->else->if->cp->getCertificate->cp->getCertificate->getPublicKey->if->permitsImpl->if->nextConstraint->permits->return->throw->KeyUtil->getKeySize->extendedMsg->new->CertPathValidatorException
DisabledAlgorithmConstraints.KeySizeConstraint#permits(Key)::: key size constraint permits:::if->nextConstraint->permits->return->if->debug->println->return->permitsImpl
DisabledAlgorithmConstraints.KeySizeConstraint#permits(AlgorithmParameters)::: key size constraint permits:::paramAlg->parameters->getAlgorithm->if->algorithm->parameters->getAlgorithm->equalsIgnoreCase->aliases->AlgorithmDecomposer->getAliases->if->aliases->contains->return->keySize->KeyUtil->getKeySize->if->return->else->if->return->return
DisabledAlgorithmConstraints.KeySizeConstraint#permitsImpl(Key)::: key size constraint permits impl:::if->algorithm->key->getAlgorithm->compareToIgnoreCase->return->size->KeyUtil->getKeySize->if->return->else->if->return->return
DisabledAlgorithmConstraints.DisabledConstraint#permits(ConstraintsParameters)::: disabled constraint permits:::throw->extendedMsg->new->CertPathValidatorException
DisabledAlgorithmConstraints.DisabledConstraint#permits(Key)::: disabled constraint permits:::return
DomainName#registeredDomain(String):::Returns the registered domain of the specified domain.:::match->getMatch->return->match->registeredDomain
DomainName#getMatch(String)::: domain name get match:::if->throw->new->NullPointerException->rules->Rules->getRules->return->rules->match
DomainName.Rules#getRules(String)::: rules get rules:::tld->getTopLevelDomain->if->tld->isEmpty->return->return->cache->createRules->computeIfAbsent
DomainName.Rules#getTopLevelDomain(String)::: rules get top level domain:::n->domain->lastIndexOf->if->return->return->domain->substring
DomainName.Rules#createRules(String)::: rules create rules:::try->pubSuffixStream->getPubSuffixStream->if->return->return->new->ZipInputStream->getRules->catch->if->SSLLogger->isOn->SSLLogger->e->getMessage->fine->return->finally
DomainName.Rules#getPubSuffixStream()::: rules get pub suffix stream:::is->AccessController->new->PrivilegedAction<>->doPrivileged->if->if->SSLLogger->isOn->SSLLogger->isOn->SSLLogger->fine->return
DomainName.Rules#getRules(String, ZipInputStream)::: rules get rules:::found->ze->zis->getNextEntry->while->if->ze->getName->equals->else->zis->getNextEntry->if->if->SSLLogger->isOn->SSLLogger->fine->return->return->new->Rules
DomainName.Rules#getRuleSet(int):::Return the requested RuleSet:::if->ruleSets->size->return->ruleSets->get->r->for->i->ruleSets->size->return
DomainName.Rules#match(String):::Find a match for the target string.:::possibleMatch->it->ruleSets->descendingIterator->while->it->hasNext->ruleSet->it->next->match->ruleSet->match->if->if->match->type->return->if->return
DomainName.Rules.RuleSet#addRule(int, String)::: rule set add rule:::if->rule->startsWith->rules->rule->substring->new->Rule->add->else->if->rule->startsWith->rule->lastIndexOf->rules->rule->substring->new->Rule->add->else->if->rule->indexOf->rules->new->Rule->add->else->rules->split->new->OtherRule->add
DomainName.Rules.RuleSet#match(String)::: rule set match:::match->foreach->switch->if->matchNormal->break->if->matchWildcard->break->if->matchOther->break->excMatch->matchException->if->return->break->return
DomainName.Rules.RuleSet#split(String)::: rule set split:::labels->rule->split->return->Arrays->asList->new->LinkedList<>
DomainName.Rules.RuleSet#numLabels(String)::: rule set num labels:::if->rule->equals->return->len->rule->length->count->index->while->pos->if->rule->indexOf->return->return
DomainName.Rules.RuleSet#matchNormal(String, Rule):::Check for a match with an explicit name rule or a wildcard rule (i.e., a non-exception rule).:::index->labels->if->return->substring->domain->substring->if->equals->return->new->CommonMatch->return
DomainName.Rules.RuleSet#matchWildcard(String, Rule)::: rule set match wildcard:::index->labels->if->substring->domain->substring->if->equals->return->labels->new->CommonMatch->return
DomainName.Rules.RuleSet#matchException(String, Rule):::Check for a match with an exception rule.:::index->labels->if->return->substring->domain->substring->if->equals->return->labels->new->CommonMatch->return
DomainName.Rules.RuleSet#matchOther(String, Rule):::A left-to-right comparison of labels:::otherRule->target->split->diff->target->size->if->return->found->for->i->if->return->new->OtherMatch->return
DomainName.Rules.RuleSet#labels(String, int):::Returns a substring (index) with the n right-most labels from s:::if->return->index->s->length->for->i->return
DomainName.Match#registeredDomain()::: match registered domain:::
DomainName.Match#type()::: match type:::
DomainName.RegisteredDomainImpl#name()::: registered domain impl name:::return
DomainName.RegisteredDomainImpl#type()::: registered domain impl type:::return
DomainName.RegisteredDomainImpl#publicSuffix()::: registered domain impl public suffix:::return
DomainName.CommonMatch#registeredDomain()::: common match registered domain:::if->return->return->domain->substring->domain->substring->new->RegisteredDomainImpl
DomainName.CommonMatch#type()::: common match type:::return
DomainName.OtherMatch#registeredDomain()::: other match registered domain:::nlabels->if->target->size->return->return->getSuffixes->getSuffixes->new->RegisteredDomainImpl
DomainName.OtherMatch#type()::: other match type:::return
DomainName.OtherMatch#getSuffixes(int)::: other match get suffixes:::targetIter->target->descendingIterator->sb->new->StringBuilder->while->targetIter->hasNext->s->targetIter->next->sb->insert->if->sb->insert->return->sb->toString
ECKeySizeParameterSpec#getKeySize():::Returns the key size of this spec.:::return
ECParameters#getAlgorithmParameters(ECParameterSpec)::: parameters get algorithm parameters:::try->params->AlgorithmParameters->getInstance->params->init->return->catch->throw->new->InvalidKeyException->finally
ECParameters#engineInit(AlgorithmParameterSpec)::: parameters engine init:::if->throw->new->InvalidParameterSpecException->if->return->if->CurveDB->lookup->else->if->name->getName->CurveDB->lookup->else->if->keySize->getKeySize->CurveDB->lookup->else->throw->new->InvalidParameterSpecException->if->throw->new->InvalidParameterSpecException
ECParameters#engineInit(byte[])::: parameters engine init:::encodedParams->new->DerValue->if->oid->encodedParams->getOID->spec->CurveDB->oid->toString->lookup->if->throw->new->IOException->return->throw->new->IOException
ECParameters#engineInit(byte[], String)::: parameters engine init:::engineInit
ECParameters#engineGetParameterSpec(Class)::: parameters engine get parameter spec:::if->spec->isAssignableFrom->return->spec->cast->if->spec->isAssignableFrom->name->namedCurve->getObjectId->return->spec->new->ECGenParameterSpec->cast->if->spec->isAssignableFrom->keySize->namedCurve->getCurve->getField->getFieldSize->return->spec->new->ECKeySizeParameterSpec->cast->throw->new->InvalidParameterSpecException
ECParameters#engineGetEncoded()::: parameters engine get encoded:::return->namedCurve->getEncoded
ECParameters#engineGetEncoded(String)::: parameters engine get encoded:::return->engineGetEncoded
ECParameters#engineToString()::: parameters engine to string:::if->return->return->namedCurve->toString
ECUtil#decodePoint(byte[], EllipticCurve)::: util decode point:::if->throw->new->IOException->n->if->curve->getField->getFieldSize->throw->new->IOException->xb->Arrays->copyOfRange->yb->Arrays->copyOfRange->return->new->BigInteger->new->BigInteger->new->ECPoint
ECUtil#encodePoint(ECPoint, EllipticCurve)::: util encode point:::n->curve->getField->getFieldSize->xb->point->getAffineX->toByteArray->trimZeroes->yb->point->getAffineY->toByteArray->trimZeroes->if->throw->new->RuntimeException->b->new->byteArr->System->arraycopy->System->arraycopy->return
ECUtil#trimZeroes(byte[])::: util trim zeroes:::i->while->if->return->return->Arrays->copyOfRange
ECUtil#getKeyFactory()::: util get key factory:::try->return->KeyFactory->getInstance->catch->throw->new->RuntimeException->finally
ECUtil#decodeX509ECPublicKey(byte[])::: util decode x509 public key:::keyFactory->getKeyFactory->keySpec->new->X509EncodedKeySpec->return->keyFactory->generatePublic
ECUtil#x509EncodeECPublicKey(ECPoint, ECParameterSpec)::: util x509 encode public key:::keyFactory->getKeyFactory->keySpec->new->ECPublicKeySpec->key->keyFactory->generatePublic->return->key->getEncoded
ECUtil#decodePKCS8ECPrivateKey(byte[])::: util decode s8 private key:::keyFactory->getKeyFactory->keySpec->new->PKCS8EncodedKeySpec->return->keyFactory->generatePrivate
ECUtil#generateECPrivateKey(BigInteger, ECParameterSpec)::: util generate private key:::keyFactory->getKeyFactory->keySpec->new->ECPrivateKeySpec->return->keyFactory->generatePrivate
ECUtil#getECParameters(Provider)::: util get parameters:::try->if->return->AlgorithmParameters->getInstance->return->AlgorithmParameters->getInstance->catch->throw->new->RuntimeException->finally
ECUtil#encodeECParameterSpec(Provider, ECParameterSpec)::: util encode parameter spec:::parameters->getECParameters->try->parameters->init->catch->throw->new->RuntimeException->finally->try->return->parameters->getEncoded->catch->throw->new->RuntimeException->finally
ECUtil#getECParameterSpec(Provider, ECParameterSpec)::: util get parameter spec:::parameters->getECParameters->try->parameters->init->return->parameters->getParameterSpec->catch->return->finally
ECUtil#getECParameterSpec(Provider, byte[])::: util get parameter spec:::parameters->getECParameters->parameters->init->try->return->parameters->getParameterSpec->catch->return->finally
ECUtil#getECParameterSpec(Provider, String)::: util get parameter spec:::parameters->getECParameters->try->parameters->new->ECGenParameterSpec->init->return->parameters->getParameterSpec->catch->return->finally
ECUtil#getECParameterSpec(Provider, int)::: util get parameter spec:::parameters->getECParameters->try->parameters->new->ECKeySizeParameterSpec->init->return->parameters->getParameterSpec->catch->return->finally
ECUtil#getCurveName(Provider, ECParameterSpec)::: util get curve name:::nameSpec->parameters->getECParameters->try->parameters->init->parameters->getParameterSpec->catch->return->finally->if->return->return->nameSpec->getName
ECUtil#encodeSignature(byte[])::: util encode signature:::try->n->bytes->new->byteArr->System->arraycopy->r->new->BigInteger->System->arraycopy->s->new->BigInteger->out->new->DerOutputStream->out->putInteger->out->putInteger->result->out->toByteArray->new->DerValue->return->result->toByteArray->catch->throw->new->SignatureException->finally
ECUtil#decodeSignature(byte[])::: util decode signature:::try->in->new->DerInputStream->values->in->getSequence->if->in->available->throw->new->IOException->r->getPositiveBigInteger->s->getPositiveBigInteger->rBytes->r->toByteArray->trimZeroes->sBytes->s->toByteArray->trimZeroes->k->Math->max->result->new->byteArr->System->arraycopy->System->arraycopy->return->catch->throw->new->SignatureException->finally
FilePermCompat#newPermPlusAltPath(Permission)::: file perm compat new perm plus alt path:::if->return->SharedSecrets->getJavaIOFilePermissionAccess->newPermPlusAltPath->return
FilePermCompat#newPermUsingAltPath(Permission)::: file perm compat new perm using alt path:::if->return->SharedSecrets->getJavaIOFilePermissionAccess->newPermUsingAltPath->return
GCMParameters#engineInit(AlgorithmParameterSpec)::: parameters engine init:::if->throw->new->InvalidParameterSpecException->gps->gps->getTLen->if->throw->new->InvalidParameterSpecException->gps->getIV
GCMParameters#engineInit(byte[])::: parameters engine init:::val->new->DerValue->if->iv->getOctetString->tLen->if->available->getInteger->if->throw->new->IOException->if->available->throw->new->IOException->else->iv->clone->else->throw->new->IOException
GCMParameters#engineInit(byte[], String)::: parameters engine init:::engineInit
GCMParameters#engineGetParameterSpec(Class)::: parameters engine get parameter spec:::if->isAssignableFrom->return->paramSpec->new->GCMParameterSpec->cast->else->throw->new->InvalidParameterSpecException
GCMParameters#engineGetEncoded()::: parameters engine get encoded:::out->new->DerOutputStream->bytes->new->DerOutputStream->bytes->putOctetString->if->bytes->putInteger->out->write->return->out->toByteArray
GCMParameters#engineGetEncoded(String)::: parameters engine get encoded:::return->engineGetEncoded
GCMParameters#engineToString()::: parameters engine to string:::LINE_SEP->System->lineSeparator->encoder->new->HexDumpEncoder->sb->encoder->encodeBuffer->new->StringBuilder->sb->append->return->sb->toString
HexDumpEncoder#hexDigit(PrintStream, byte)::: hex dump encoder hex digit:::c->if->else->p->write->if->else->p->write
HexDumpEncoder#bytesPerAtom()::: hex dump encoder bytes per atom:::return
HexDumpEncoder#bytesPerLine()::: hex dump encoder bytes per line:::return
HexDumpEncoder#encodeBufferPrefix(OutputStream)::: hex dump encoder encode buffer prefix:::new->PrintStream
HexDumpEncoder#encodeLinePrefix(OutputStream, int)::: hex dump encoder encode line prefix:::hexDigit->hexDigit->pStream->print
HexDumpEncoder#encodeAtom(OutputStream, byte[], int, int)::: hex dump encoder encode atom:::hexDigit->pStream->print->if->pStream->print
HexDumpEncoder#encodeLineSuffix(OutputStream)::: hex dump encoder encode line suffix:::if->for->i->pStream->print->for->i->pStream->println
HexDumpEncoder#readFully(InputStream, byte[]):::This method works around the bizarre semantics of BufferedInputStream's read method.:::for->i->return
HexDumpEncoder#encode(InputStream, OutputStream):::Encode bytes from the input stream, and write them as text characters to the output stream:::j->numBytes->tmpbuffer->bytesPerLine->new->byteArr->encodeBufferPrefix->while->readFully->if->break->encodeLinePrefix->for->bytesPerAtom->if->bytesPerLine->break->else->encodeLineSuffix
HexDumpEncoder#encode(byte[]):::A 'streamless' version of encode that simply takes a buffer of bytes and returns a string containing the encoded buffer.:::outStream->new->ByteArrayOutputStream->inStream->new->ByteArrayInputStream->retVal->try->encode->outStream->toString->catch->throw->new->Error->finally->return
HexDumpEncoder#getBytes(ByteBuffer):::Return a byte array from the remaining bytes in this ByteBuffer:::buf->if->bb->hasArray->tmp->bb->array->if->bb->capacity->bb->remaining->bb->bb->limit->position->if->bb->remaining->new->byteArr->bb->get->return
HexDumpEncoder#encode(ByteBuffer):::A 'streamless' version of encode that simply takes a ByteBuffer and returns a string containing the encoded buffer:::buf->getBytes->return->encode
HexDumpEncoder#encodeBuffer(InputStream, OutputStream):::Encode bytes from the input stream, and write them as text characters to the output stream:::j->numBytes->tmpbuffer->bytesPerLine->new->byteArr->encodeBufferPrefix->while->readFully->if->break->encodeLinePrefix->for->bytesPerAtom->encodeLineSuffix->if->bytesPerLine->break
HexDumpEncoder#encodeBuffer(byte[], OutputStream):::Encode the buffer in aBuffer and write the encoded result to the OutputStream aStream.:::inStream->new->ByteArrayInputStream->encodeBuffer
HexDumpEncoder#encodeBuffer(byte[]):::A 'streamless' version of encode that simply takes a buffer of bytes and returns a string containing the encoded buffer.:::outStream->new->ByteArrayOutputStream->inStream->new->ByteArrayInputStream->try->encodeBuffer->catch->throw->new->Error->finally->return->outStream->toString
HexDumpEncoder#encodeBuffer(ByteBuffer, OutputStream):::Encode the aBuffer ByteBuffer and write the encoded result to the OutputStream aStream:::buf->getBytes->encodeBuffer
HostnameChecker#getInstance(byte):::Get a HostnameChecker instance:::if->return->else->if->return->throw->new->IllegalArgumentException
HostnameChecker#match(String, X509Certificate, boolean):::Perform the check.:::if->isIpAddress->matchIP->else->matchDNS
HostnameChecker#match(String, X509Certificate)::: hostname checker match:::match
HostnameChecker#isIpAddress(String):::Test whether the given hostname looks like a literal IPv4 or IPv6 address:::if->IPAddressUtil->isIPv4LiteralAddress->IPAddressUtil->isIPv6LiteralAddress->return->else->return
HostnameChecker#matchIP(String, X509Certificate):::Check if the certificate allows use of the given IP address:::subjAltNames->cert->getSubjectAlternativeNames->if->throw->new->CertificateException->foreach->if->next->get->intValue->ipAddress->next->get->if->expectedIP->equalsIgnoreCase->return->else->try->if->InetAddress->getByName->InetAddress->getByName->equals->return->catch->finally->throw->new->CertificateException
HostnameChecker#matchDNS(String, X509Certificate, boolean):::Check if the certificate allows use of the given DNS name:::try->sni->new->SNIHostName->catch->throw->new->CertificateException->finally->subjAltNames->cert->getSubjectAlternativeNames->if->foundDNS->foreach->if->next->get->intValue->dnsName->next->get->if->isMatched->return->if->throw->new->CertificateException->subjectName->getSubjectX500Name->derValue->subjectName->findMostSpecificAttribute->if->try->if->derValue->getAsString->isMatched->return->catch->finally->msg->throw->new->CertificateException
HostnameChecker#getSubjectX500Name(X509Certificate):::Return the subject of a certificate as X500Name, by reparsing if necessary:::try->subjectDN->cert->getSubjectDN->if->return->else->subjectX500->cert->getSubjectX500Principal->return->subjectX500->getEncoded->new->X500Name->catch->throw->new->CertificateParsingException->initCause->finally
HostnameChecker#isMatched(String, String, boolean):::Returns true if name matches against template.  The matching is performed as per RFC 2818 rules for TLS and RFC 2830 rules for LDAP.  The name parameter should represent a DNS name:::try->IDN->IDN->toASCII->toUnicode->IDN->IDN->toASCII->toUnicode->catch->if->SSLLogger->fine->return->finally->if->hasIllegalWildcard->return->try->template->replace->new->SNIHostName->catch->return->finally->if->return->matchAllWildcards->else->if->return->matchLeftmostWildcard->else->return
HostnameChecker#hasIllegalWildcard(String, boolean):::Returns true if the template contains an illegal wildcard character.:::if->template->equals->template->equals->if->SSLLogger->fine->return->lastWildcardIndex->template->lastIndexOf->if->return->afterWildcard->template->substring->firstDotIndex->afterWildcard->indexOf->if->if->SSLLogger->fine->return->if->return->wildcardedDomain->afterWildcard->substring->templateDomainSuffix->RegisteredDomain->from->d->type->filter->RegisteredDomain->publicSuffix->map->orElse->if->return->if->wildcardedDomain->equalsIgnoreCase->if->SSLLogger->fine->return->return
HostnameChecker#matchAllWildcards(String, String):::Returns true if name matches against template.  According to RFC 2818, section 3.1 - Names may contain the wildcard character * which is considered to match any single domain name component or component fragment:::name->toLowerCase->template->toLowerCase->nameSt->new->StringTokenizer->templateSt->new->StringTokenizer->if->nameSt->countTokens->templateSt->countTokens->return->while->nameSt->hasMoreTokens->if->nameSt->nextToken->templateSt->nextToken->matchWildCards->return->return
HostnameChecker#matchLeftmostWildcard(String, String):::Returns true if name matches against template.  As per RFC 2830, section 3.6 - The "*" wildcard character is allowed:::name->toLowerCase->template->toLowerCase->templateIdx->template->indexOf->nameIdx->name->indexOf->if->template->length->if->name->length->if->name->substring->template->substring->matchWildCards->return->template->substring->name->substring->equals->else->return
HostnameChecker#matchWildCards(String, String):::Returns true if the name matches against the template that may contain wildcard char * :::wildcardIdx->template->indexOf->if->return->name->equals->isBeginning->beforeWildcard->afterWildcard->while->afterWildcard->substring->afterWildcard->substring->beforeStartIdx->name->indexOf->if->return->name->beforeWildcard->length->substring->afterWildcard->indexOf->return->name->endsWith
IOUtils#readExactlyNBytes(InputStream, int):::Read exactly length of bytes from in:::if->throw->new->IOException->data->is->readNBytes->if->throw->new->EOFException->return
KeyStoreDelegator#engineGetKey(String, char[])::: key store delegator engine get key:::return->keystore->engineGetKey
KeyStoreDelegator#engineGetCertificateChain(String)::: key store delegator engine get certificate chain:::return->keystore->engineGetCertificateChain
KeyStoreDelegator#engineGetCertificate(String)::: key store delegator engine get certificate:::return->keystore->engineGetCertificate
KeyStoreDelegator#engineGetCreationDate(String)::: key store delegator engine get creation date:::return->keystore->engineGetCreationDate
KeyStoreDelegator#engineSetKeyEntry(String, Key, char[], Certificate[])::: key store delegator engine set key entry:::keystore->engineSetKeyEntry
KeyStoreDelegator#engineSetKeyEntry(String, byte[], Certificate[])::: key store delegator engine set key entry:::keystore->engineSetKeyEntry
KeyStoreDelegator#engineSetCertificateEntry(String, Certificate)::: key store delegator engine set certificate entry:::keystore->engineSetCertificateEntry
KeyStoreDelegator#engineDeleteEntry(String)::: key store delegator engine delete entry:::keystore->engineDeleteEntry
KeyStoreDelegator#engineAliases()::: key store delegator engine aliases:::return->keystore->engineAliases
KeyStoreDelegator#engineContainsAlias(String)::: key store delegator engine contains alias:::return->keystore->engineContainsAlias
KeyStoreDelegator#engineSize()::: key store delegator engine size:::return->keystore->engineSize
KeyStoreDelegator#engineIsKeyEntry(String)::: key store delegator engine is key entry:::return->keystore->engineIsKeyEntry
KeyStoreDelegator#engineIsCertificateEntry(String)::: key store delegator engine is certificate entry:::return->keystore->engineIsCertificateEntry
KeyStoreDelegator#engineGetCertificateAlias(Certificate)::: key store delegator engine get certificate alias:::return->keystore->engineGetCertificateAlias
KeyStoreDelegator#engineGetEntry(String, KeyStore.ProtectionParameter)::: key store delegator engine get entry:::return->keystore->engineGetEntry
KeyStoreDelegator#engineSetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)::: key store delegator engine set entry:::keystore->engineSetEntry
KeyStoreDelegator#engineEntryInstanceOf(String, Class)::: key store delegator engine entry instance of:::return->keystore->engineEntryInstanceOf
KeyStoreDelegator#engineStore(OutputStream, char[])::: key store delegator engine store:::if->debug->println->keystore->engineStore
KeyStoreDelegator#engineLoad(InputStream, char[])::: key store delegator engine load:::if->try->tmp->primaryKeyStore->newInstance->catch->finally->if->debug->println->keystore->engineLoad->else->bufferedStream->new->BufferedInputStream->bufferedStream->mark->try->tmp->primaryKeyStore->newInstance->keystore->engineLoad->catch->if->e->getCause->throw->try->if->throw->tmp->secondaryKeyStore->newInstance->bufferedStream->reset->keystore->engineLoad->if->debug->println->catch->if->e3->getCause->throw->if->throw->else->if->throw->else->if->throw->finally->finally->if->debug->println
KeyStoreDelegator#engineProbe(InputStream):::Probe the first few bytes of the keystore data stream for a valid keystore encoding:::result->try->tmp->primaryKeyStore->newInstance->keystore->engineProbe->catch->throw->new->IOException->finally->if->return
KeyUtil#getKeySize(Key):::Returns the key size of the given key object in bits.:::size->if->try->ruler->ruler->length->catch->finally->if->return->if->sk->format->sk->getFormat->if->equals->sk->getEncoded->sk->getEncoded->else->if->pubk->pubk->getModulus->bitLength->else->if->pubk->pubk->getParams->getOrder->bitLength->else->if->pubk->params->pubk->getParams->params->getP->bitLength->else->if->pubk->pubk->getParams->getP->bitLength->return
KeyUtil#getKeySize(AlgorithmParameters):::Returns the key size of the given cryptographic parameters in bits.:::algorithm->parameters->getAlgorithm->switch->try->ps->parameters->getParameterSpec->if->return->ps->getKeySize->catch->finally->try->ps->parameters->getParameterSpec->if->return->ps->getOrder->bitLength->catch->finally->break->try->ps->parameters->getParameterSpec->if->return->ps->getP->bitLength->catch->finally->break->return
KeyUtil#validate(Key):::Returns whether the key is valid or not:::if->throw->new->NullPointerException->if->validateDHPublicKey
KeyUtil#validate(KeySpec):::Returns whether the key spec is valid or not:::if->throw->new->NullPointerException->if->validateDHPublicKey
KeyUtil#isOracleJCEProvider(String):::Returns whether the specified provider is Oracle provider or not.:::return->providerName->equals->providerName->equals->providerName->equals->providerName->startsWith
KeyUtil#checkTlsPreMasterSecretKey(int, int, SecureRandom, byte[], boolean):::Check the format of TLS PreMasterSecret:::if->JCAUtil->getSecureRandom->replacer->new->byteArr->random->nextBytes->if->if->return->encodedVersion->if->if->return->return
KeyUtil#validateDHPublicKey(DHPublicKey):::Returns whether the Diffie-Hellman public key is valid or not:::paramSpec->publicKey->getParams->p->paramSpec->getP->g->paramSpec->getG->y->publicKey->getY->validateDHPublicKey
KeyUtil#validateDHPublicKey(DHPublicKeySpec)::: key util validate public key:::publicKeySpec->getP->publicKeySpec->getG->publicKeySpec->getY->validateDHPublicKey
KeyUtil#validateDHPublicKey(BigInteger, BigInteger, BigInteger)::: key util validate public key:::leftOpen->rightOpen->p->subtract->if->y->compareTo->throw->new->InvalidKeyException->if->y->compareTo->throw->new->InvalidKeyException->r->p->remainder->if->r->equals->throw->new->InvalidKeyException
KeyUtil#trimZeroes(byte[]):::Trim leading (most significant) zeroes from the result.:::i->while->if->return->t->new->byteArr->System->arraycopy->return
LazyCodeSourcePermissionCollection#ensureAdded()::: lazy code source permission collection ensure added:::if->synchronized->if->return->location->cs->getLocation->if->try->p->location->openConnection->getPermission->if->if->path->p->getName->if->path->endsWith->new->FilePermission->perms->add->catch->finally->if->isReadOnly->perms->setReadOnly
LazyCodeSourcePermissionCollection#add(Permission)::: lazy code source permission collection add:::if->isReadOnly->throw->new->SecurityException->perms->add
LazyCodeSourcePermissionCollection#implies(Permission)::: lazy code source permission collection implies:::ensureAdded->return->perms->implies
LazyCodeSourcePermissionCollection#elements()::: lazy code source permission collection elements:::ensureAdded->return->perms->elements
LazyCodeSourcePermissionCollection#toString()::: lazy code source permission collection to string:::ensureAdded->return->perms->toString
LazyCodeSourcePermissionCollection#writeReplace():::On serialization, initialize and replace with the underlying permissions:::ensureAdded->return
LegacyAlgorithmConstraints#permits(Set, String, AlgorithmParameters)::: legacy algorithm constraints permits:::return->checkAlgorithm
LegacyAlgorithmConstraints#permits(Set, Key)::: legacy algorithm constraints permits:::return
LegacyAlgorithmConstraints#permits(Set, String, Key, AlgorithmParameters)::: legacy algorithm constraints permits:::return->checkAlgorithm
Length#length():::Gets the length of this object  Note that if a class of java.security.Key implements this interfaces, the length should be measured in bits.:::
LocalizedMessage#formatLocalized(Object...):::Return a localized string corresponding to the key stored in this object, formatted with the provided arguments:::return->getLocalized
LocalizedMessage#formatNonlocalized(Object...):::Return a non-localized string corresponding to the key stored in this object, formatted with the provided arguments:::return->getNonlocalized
LocalizedMessage#getNonlocalized(String, Object...):::Return a non-localized string corresponding to the provided key, and formatted with the provided arguments:::value->RESOURCES->getString->if->return->sb->new->StringBuilder->nextBraceIndex->while->value->indexOf->firstPart->value->substring->sb->append->value->substring->value->indexOf->if->throw->new->RuntimeException->indexStr->value->substring->try->index->Integer->parseInt->sb->append->catch->throw->new->RuntimeException->finally->value->substring->sb->append->return->sb->toString
LocalizedMessage#getLocalized(String, Object...):::Return a localized string corresponding to the provided key, and formatted with the provided arguments:::value->ResourcesMgr->getString->if->return->form->new->java.text.MessageFormat->return->form->format
ManifestDigester#findSection(int, Position):::find a section in the manifest.:::i->len->last->next->allBlank->while->b->switch->if->if->if->if->if->else->return->else->break->break->return
ManifestDigester#isNameAttr(byte[], int)::: manifest digester is name attr:::return
ManifestDigester.Entry#addSection(Section)::: entry add section:::sections->add->return
ManifestDigester.Entry#digest(MessageDigest)::: entry digest:::md->reset->foreach->if->Section->doOldStyle->else->md->update->return->md->digest
ManifestDigester.Entry#digestWorkaround(MessageDigest)::: entry digest workaround:::md->reset->foreach->md->update->return->md->digest
ManifestDigester.Section#doOldStyle(MessageDigest, byte[], int, int)::: section do old style:::i->start->max->prev->while->if->md->update->md->update
ManifestDigester#get(String, boolean)::: manifest digester get:::e->entries->get->if->return
ManifestDigester#manifestDigest(MessageDigest)::: manifest digester manifest digest:::md->reset->md->update->return->md->digest
ManifestEntryVerifier#setEntry(String, JarEntry):::Find the hashes in the manifest for this entry, save them, and set the MessageDigest objects to calculate the hashes on the fly:::digests->clear->manifestHashes->clear->if->return->attr->man->getAttributes->if->man->getAttributes->if->man->getAttributes->if->return->foreach->attr->entrySet->key->se->getKey->toString->if->key->toUpperCase->endsWith->algorithm->key->key->length->substring->digest->createdDigests->get->if->try->MessageDigest->getInstance->createdDigests->put->catch->finally->if->digest->reset->digests->add->manifestHashes->Base64->getMimeDecoder->se->getValue->decode->add
ManifestEntryVerifier#update(byte):::update the digests for the digests we are interested in:::if->return->for->i->digests->size
ManifestEntryVerifier#update(byte[], int, int):::update the digests for the digests we are interested in:::if->return->for->i->digests->size
ManifestEntryVerifier#getEntry():::get the JarEntry for this object:::return
ManifestEntryVerifier#verify(Hashtable, Hashtable):::go through all the digests, calculating the final digest and comparing it to the one in the manifest:::if->return->if->digests->isEmpty->throw->new->SecurityException->if->return->for->i->digests->size->sigFileSigners->remove->if->verifiedSigners->put->return
ManifestEntryVerifier#toHex(byte[])::: manifest entry verifier to hex:::sb->new->StringBuilder->for->i->return->sb->toString
MessageDigestSpi2#engineUpdate(SecretKey):::Updates the digest using the specified key:::
NamedCurve#getName()::: named curve get name:::return
NamedCurve#getEncoded()::: named curve get encoded:::return->encoded->clone
NamedCurve#getObjectId()::: named curve get object id:::return
NamedCurve#toString()::: named curve to string:::return
ObjectIdentifier#readObject(ObjectInputStream)::: object identifier read object:::is->defaultReadObject->if->comp->if->init
ObjectIdentifier#writeObject(ObjectOutputStream)::: object identifier write object:::if->comps->toIntArray->if->else->os->defaultWriteObject
ObjectIdentifier#init(int[], int)::: object identifier init:::pos->tmp->new->byteArr->if->pack7Oid->else->big->BigInteger->valueOf->big->BigInteger->valueOf->add->pack7Oid->for->i->new->byteArr->System->arraycopy
ObjectIdentifier#newInternal(int[]):::This method is kept for compatibility reasons:::try->return->new->ObjectIdentifier->catch->throw->new->RuntimeException->finally
ObjectIdentifier#encode(DerOutputStream)::: object identifier encode:::out->write
ObjectIdentifier#equals(Object):::Compares this identifier with another, for equality.:::if->return->if->return->other->return->Arrays->equals
ObjectIdentifier#hashCode()::: object identifier hash code:::return->Arrays->hashCode
ObjectIdentifier#toIntArray():::Private helper method for serialization:::length->result->new->intArr->which->fromPos->for->i->return->Arrays->copyOf
ObjectIdentifier#toString():::Returns a string form of the object ID:::s->if->length->sb->new->StringBuilder->fromPos->for->i->sb->toString->return
ObjectIdentifier#pack(byte[], int, int, int, int):::Repack all bits from input to output:::if->return->in->clone->bits->out->new->byteArr->ipos->opos->while->count->if->return
ObjectIdentifier#pack7Oid(byte[], int, int, byte[], int):::Repack from NUB 8 to a NUB 7 OID sub-identifier, remove all unnecessary 0 headings, set the first bit of all non-tail output bytes to 1 (as ITU-T Rec:::pack->pack->firstNonZero->for->i->System->arraycopy->return
ObjectIdentifier#pack8(byte[], int, int, byte[], int):::Repack from NUB 7 to NUB 8, remove all unnecessary 0 headings, and paste it into an existing byte array.:::pack->pack->firstNonZero->for->i->System->arraycopy->return
ObjectIdentifier#pack7Oid(int, byte[], int):::Pack the int into a OID sub-identifier DER encoding:::b->new->byteArr->return->pack7Oid
ObjectIdentifier#pack7Oid(BigInteger, byte[], int):::Pack the BigInteger into a OID subidentifier DER encoding:::b->input->toByteArray->return->pack7Oid
ObjectIdentifier#check(byte[]):::Check the DER encoding:::length->if->throw->new->IOException->for->i
ObjectIdentifier#checkCount(int)::: object identifier check count:::if->throw->new->IOException
ObjectIdentifier#checkFirstComponent(int)::: object identifier check first component:::if->throw->new->IOException
ObjectIdentifier#checkFirstComponent(BigInteger)::: object identifier check first component:::if->first->signum->first->compareTo->throw->new->IOException
ObjectIdentifier#checkSecondComponent(int, int)::: object identifier check second component:::if->throw->new->IOException
ObjectIdentifier#checkSecondComponent(int, BigInteger)::: object identifier check second component:::if->second->signum->second->BigInteger->valueOf->compareTo->throw->new->IOException
ObjectIdentifier#checkOtherComponent(int, int)::: object identifier check other component:::if->throw->new->IOException
ObjectIdentifier#checkOtherComponent(int, BigInteger)::: object identifier check other component:::if->num->signum->throw->new->IOException
Password#readPassword(InputStream):::Reads user password from given input stream.:::return->readPassword
Password#readPassword(InputStream, boolean):::Reads user password from given input stream.:::consoleEntered->consoleBytes->try->con->if->System->console->con->readPassword->if->return->convertToBytes->new->ByteArrayInputStream->lineBuffer->buf->i->new->charArr->room->offset->c->done->while->switch->in->read->break->c2->in->read->if->if->new->PushbackInputStream->unread->else->break->if->new->charArr->System->arraycopy->Arrays->fill->break->if->return->ret->new->charArr->System->arraycopy->Arrays->fill->return->catch->finally->if->Arrays->fill->if->Arrays->fill
Password#convertToBytes(char[]):::Change a password read from Console.readPassword() into its original bytes.:::if->synchronized->SharedSecrets->getJavaIOAccess->charset->newEncoder->onMalformedInput->onUnmappableCharacter->ba->enc->maxBytesPerChar->new->byteArr->bb->ByteBuffer->wrap->synchronized->enc->reset->CharBuffer->wrap->encode->if->bb->position->bb->position->return
Pem#decode(String):::Decodes a PEM-encoded block.:::src->input->replaceAll->getBytes->try->return->Base64->getDecoder->decode->catch->throw->new->IOException->finally
PermissionFactory#newPermission(String)::: permission factory new permission:::
PolicyUtil#getInputStream(URL)::: policy util get input stream:::if->url->getProtocol->equals->path->url->getFile->replace->ParseUtil->decode->return->new->FileInputStream->else->return->url->openStream
PolicyUtil#getKeyStore(URL, String, String, String, String, Debug):::this is intended for use by the policy parser to instantiate a KeyStore from the information in the GUI/policy file:::if->throw->new->IllegalArgumentException->keyStorePassword->try->ks->if->KeyStore->getDefaultType->if->P11KEYSTORE->equalsIgnoreCase->NONE->equals->throw->new->IllegalArgumentException->if->KeyStore->getInstance->else->KeyStore->getInstance->if->passURL->try->new->URL->catch->if->throw->new->URL->finally->if->debug->println->in->try->passURL->openStream->Password->readPassword->catch->finally->if->in->close->if->NONE->equals->ks->load->return->else->keyStoreUrl->try->new->URL->catch->if->throw->new->URL->finally->if->debug->println->inStream->try->getInputStream->new->BufferedInputStream->ks->load->catch->finally->inStream->close->return->catch->finally->if->Arrays->fill
PropertyExpander#expand(String)::: property expander expand:::return->expand
PropertyExpander#expand(String, boolean)::: property expander expand:::if->return->p->value->indexOf->if->return->sb->value->length->new->StringBuilder->max->value->length->i->while->if->sb->value->substring->append->pe->if->value->charAt->value->indexOf->if->sb->value->substring->append->break->else->sb->value->substring->append->else->while->value->charAt->if->sb->value->substring->append->break->prop->value->substring->if->prop->equals->sb->append->else->val->System->getProperty->if->if->try->if->sb->length->new->URI->isAbsolute->encodePath->catch->encodePath->finally->sb->append->else->throw->new->ExpandException->value->indexOf->if->if->sb->value->substring->append->break->return->sb->toString
RegisteredDomain#name():::Returns the name of the registered domain.:::
RegisteredDomain#type():::Returns the type of the registered domain.:::
RegisteredDomain#publicSuffix():::Returns the public suffix of the registered domain.:::
RegisteredDomain#from(String):::Returns an Optional<RegisteredDomain> representing the registered part of the specified domain.:::return->Optional->DomainName->registeredDomain->ofNullable
Resources#getContents():::Returns the contents of this ResourceBundle.:::return
ResourcesMgr#getString(String)::: resources mgr get string:::return->getBundle->getString
ResourcesMgr#getAuthResourceString(String)::: resources mgr get auth resource string:::return->getBundle->getString
ResourcesMgr#getBundle(String)::: resources mgr get bundle:::if->VM->isBooted->throw->new->InternalError->return->bundles->ResourceBundle->getBundle->computeIfAbsent
Resources_ja#getContents():::Returns the contents of this ResourceBundle.:::return
Resources_zh_CN#getContents():::Returns the contents of this ResourceBundle.:::return
SecurityProperties#privilegedGetOverridable(String):::Returns the value of the security property propName, which can be overridden by a system property of the same name:::if->System->getSecurityManager->return->getOverridableProperty->else->return->AccessController->getOverridableProperty->doPrivileged
SecurityProperties#getOverridableProperty(String)::: security properties get overridable property:::val->System->getProperty->if->return->Security->getProperty->else->return
SecurityProperties#includedInExceptions(String):::Returns true in case the system or security property "jdk.includeInExceptions" contains the category refName:::val->privilegedGetOverridable->if->return->tokens->val->split->foreach->token->trim->if->token->equalsIgnoreCase->return->return
SecurityProviderConstants#getDefDSASubprimeSize(int)::: security provider constants get def subprime size:::if->return->else->if->return->else->if->return->else->throw->new->InvalidParameterException
SignatureFileVerifier#needSignatureFileBytes():::returns true if we need the .SF file:::return
SignatureFileVerifier#needSignatureFile(String):::returns true if we need this .SF file.:::return->equalsIgnoreCase
SignatureFileVerifier#setSignatureFile(byte[]):::used to set the raw bytes of the .SF file when it is external to the signature block file.:::
SignatureFileVerifier#isBlockOrSF(String):::Utility method used by JarVerifier and JarSigner to determine the signature file names and PKCS7 block files names that are supported:::return->s->endsWith->s->endsWith->s->endsWith->s->endsWith
SignatureFileVerifier#isSigningRelated(String):::Yet another utility method used by JarVerifier and JarSigner to determine what files are signature related, which includes the MANIFEST, SF files, known signature block files, and other unknown signature related files (those starting with SIG- with an optional [A-Z0-9]{1,3} extension right inside META-INF).:::name->toUpperCase->if->name->startsWith->return->name->substring->if->name->indexOf->return->if->isBlockOrSF->name->equals->return->else->if->name->startsWith->extIndex->name->lastIndexOf->if->ext->name->substring->if->ext->length->ext->length->return->for->index->ext->length->return->return
SignatureFileVerifier#getDigest(String)::: signature file verifier get digest:::if->new->HashMap<>->digest->createdDigests->get->if->try->MessageDigest->getInstance->createdDigests->put->catch->finally->return
SignatureFileVerifier#process(Hashtable, List):::process the signature block file:::obj->try->Providers->startJarVerification->processImpl->catch->finally->Providers->stopJarVerification
SignatureFileVerifier#processImpl(Hashtable, List)::: signature file verifier process impl:::sf->new->Manifest->sf->new->ByteArrayInputStream->read->version->sf->getMainAttributes->getValue->if->version->equalsIgnoreCase->return->infos->block->verify->if->throw->new->SecurityException->newSigners->getSigners->if->return->foreach->if->debug->s->toString->println->if->s->getTimestamp->break->else->if->s->getTimestamp->else->if->timestamp->getTimestamp->s->getTimestamp->getTimestamp->before->s->getTimestamp->entries->sf->getEntries->entrySet->iterator->manifestSigned->verifyManifestHash->if->verifyManifestMainAttrs->throw->new->SecurityException->while->entries->hasNext->e->entries->next->name->e->getKey->if->e->getValue->verifySection->if->name->startsWith->name->substring->if->name->startsWith->name->substring->updateSigners->if->debug->println->else->if->debug->println->updateSigners
SignatureFileVerifier#permittedCheck(String, String):::Check if algorithm is permitted using the permittedAlgs Map:::permitted->permittedAlgs->get->if->try->new->ConstraintsParameters->permits->catch->permittedAlgs->put->permittedAlgs->key->toUpperCase->put->if->if->e->getMessage->debug->e->getMessage->println->else->debug->println->e->printStackTrace->return->finally->permittedAlgs->put->return->return->permitted->booleanValue
SignatureFileVerifier#getWeakAlgorithms(String):::With a given header (*-DIGEST*), return a string that lists all the algorithms associated with the header:::w->try->foreach->permittedAlgs->keySet->if->key->endsWith->key->key->length->header->length->substring->catch->e->getMessage->finally->if->w->length->return->return
SignatureFileVerifier#verifyManifestHash(Manifest, ManifestDigester, List):::See if the whole manifest was signed.:::mattr->sf->getMainAttributes->manifestSigned->weakAlgs->validEntry->foreach->mattr->entrySet->key->se->getKey->toString->if->key->toUpperCase->endsWith->algorithm->key->key->length->substring->if->permittedCheck->continue->manifestDigests->add->manifestDigests->se->getValue->add->digest->getDigest->if->computedHash->md->manifestDigest->expectedHash->Base64->getMimeDecoder->se->getValue->decode->if->debug->println->debug->toHex->println->debug->toHex->println->debug->println->if->MessageDigest->isEqual->else->if->debug->println->foreach->permittedAlgs->keySet->debug->permittedAlgs->get->toString->println->if->throw->getWeakAlgorithms->new->SignatureException->return
SignatureFileVerifier#verifyManifestMainAttrs(Manifest, ManifestDigester)::: signature file verifier verify manifest main attrs:::mattr->sf->getMainAttributes->attrsVerified->weakAlgs->validEntry->foreach->mattr->entrySet->key->se->getKey->toString->if->key->toUpperCase->endsWith->algorithm->key->key->length->ATTR_DIGEST->length->substring->if->permittedCheck->continue->digest->getDigest->if->mde->md->get->computedHash->mde->digest->expectedHash->Base64->getMimeDecoder->se->getValue->decode->if->debug->digest->getAlgorithm->println->debug->toHex->println->debug->toHex->println->debug->println->if->MessageDigest->isEqual->else->if->debug->println->debug->println->break->if->debug->println->foreach->permittedAlgs->keySet->debug->permittedAlgs->get->toString->println->if->throw->getWeakAlgorithms->new->SignatureException->return
SignatureFileVerifier#verifySection(Attributes, String, ManifestDigester)::: signature file verifier verify section:::oneDigestVerified->mde->md->block->isOldStyle->get->weakAlgs->validEntry->if->throw->new->SecurityException->if->foreach->sfAttr->entrySet->key->se->getKey->toString->if->key->toUpperCase->endsWith->algorithm->key->key->length->substring->if->permittedCheck->continue->digest->getDigest->if->ok->expected->Base64->getMimeDecoder->se->getValue->decode->computed->if->mde->digestWorkaround->else->mde->digest->if->debug->digest->getAlgorithm->println->debug->toHex->println->debug->toHex->println->debug->println->if->MessageDigest->isEqual->else->if->mde->digestWorkaround->if->MessageDigest->isEqual->if->debug->toHex->println->debug->println->if->throw->digest->getAlgorithm->new->SecurityException->if->debug->println->foreach->permittedAlgs->keySet->debug->permittedAlgs->get->toString->println->if->throw->getWeakAlgorithms->new->SignatureException->return
SignatureFileVerifier#getSigners(SignerInfo[], PKCS7):::Given the PKCS7 block and SignerInfo[], create an array of CodeSigner objects:::signers->for->i->if->return->signers->signers->size->new->CodeSignerArr->toArray->else->return
SignatureFileVerifier#toHex(byte[])::: signature file verifier to hex:::sb->new->StringBuilder->for->i->return->sb->toString
SignatureFileVerifier#contains(CodeSigner[], CodeSigner)::: signature file verifier contains:::for->i->return
SignatureFileVerifier#isSubSet(CodeSigner[], CodeSigner[])::: signature file verifier is sub set:::if->return->match->for->i->return
SignatureFileVerifier#matches(CodeSigner[], CodeSigner[], CodeSigner[]):::returns true if signer contains exactly the same code signers as oldSigner and newSigner, false otherwise:::if->return->match->if->isSubSet->return->if->isSubSet->return->for->i->return
SignatureFileVerifier#updateSigners(CodeSigner[], Hashtable, String)::: signature file verifier update signers:::oldSigners->signers->get->cachedSigners->for->i->signerCache->size->if->else->new->CodeSignerArr->System->arraycopy->System->arraycopy->signerCache->add->signers->put
SignatureUtil#checkName(String)::: signature util check name:::if->algName->indexOf->return->try->return->Signature->getInstance->getAlgorithm->catch->throw->new->ProviderException->finally
SignatureUtil#createAlgorithmParameters(String, byte[])::: signature util create algorithm parameters:::try->checkName->result->AlgorithmParameters->getInstance->result->init->return->catch->throw->new->ProviderException->finally
SignatureUtil#getParamSpec(String, AlgorithmParameters)::: signature util get param spec:::checkName->paramSpec->if->if->sigName->toUpperCase->indexOf->throw->new->ProviderException->if->params->getAlgorithm->indexOf->try->params->getEncoded->createAlgorithmParameters->catch->throw->new->ProviderException->finally->RSAUtil->getParamSpec->return
SignatureUtil#getParamSpec(String, byte[])::: signature util get param spec:::checkName->paramSpec->if->if->sigName->toUpperCase->indexOf->throw->new->ProviderException->params->createAlgorithmParameters->RSAUtil->getParamSpec->return
SignatureUtil#initVerifyWithParam(Signature, PublicKey, AlgorithmParameterSpec)::: signature util init verify with param:::SharedSecrets->getJavaSecuritySignatureAccess->initVerify
SignatureUtil#initVerifyWithParam(Signature, java.security.cert.Certificate, AlgorithmParameterSpec)::: signature util init verify with param:::SharedSecrets->getJavaSecuritySignatureAccess->initVerify
SignatureUtil#initSignWithParam(Signature, PrivateKey, AlgorithmParameterSpec, SecureRandom)::: signature util init sign with param:::SharedSecrets->getJavaSecuritySignatureAccess->initSign
UntrustedCertificates#stripColons(Object)::: untrusted certificates strip colons:::s->letters->s->toCharArray->pos->for->i->if->return->else->return->new->String
UntrustedCertificates#isUntrusted(X509Certificate):::Checks if a certificate is untrusted.:::if->return->key->if->getFingerprint->else->try->cert->getEncoded->new->X509CertImpl->getFingerprint->catch->return->finally->return->props->containsKey

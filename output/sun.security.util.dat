sun.security.util.AbstractAlgorithmConstraints#getAlgorithms(String)->String[]::: abstract algorithm constraints get algorithms
sun.security.util.AbstractAlgorithmConstraints#checkAlgorithm(String[], String, AlgorithmDecomposer)->boolean::: abstract algorithm constraints check algorithm
sun.security.util.AlgorithmDecomposer#decompose(String)->Set:::Decompose the standard algorithm name into sub-elements
sun.security.util.AlgorithmDecomposer#getAliases(String)->Collection:::Get aliases of the specified algorithm
sun.security.util.AlgorithmDecomposer#decomposeOneHash(String)->Set::: algorithm decomposer decompose one hash
sun.security.util.AlgorithmDecomposer#hashName(String)->String::: algorithm decomposer hash name
sun.security.util.AnchorCertificates#contains(X509Certificate)->boolean:::Checks if a certificate is a trust anchor.
sun.security.util.ArrayUtil#blockSizeCheck(int, int)->void::: array util block size check
sun.security.util.ArrayUtil#nullAndBoundsCheck(byte[], int, int)->void::: array util null and bounds check
sun.security.util.ArrayUtil#reverse(byte[])->void::: array util reverse
sun.security.util.AuthResources#getContents()->Object[][]:::Returns the contents of this ResourceBundle
sun.security.util.AuthResources_ja#getContents()->Object[][]:::Returns the contents of this ResourceBundle
sun.security.util.AuthResources_zh_CN#getContents()->Object[][]:::Returns the contents of this ResourceBundle
sun.security.util.BitArray#get(int)->boolean::: Returns the indexed bit in this BitArray.
sun.security.util.BitArray#set(int, boolean)->void::: Sets the indexed bit in this BitArray.
sun.security.util.BitArray#length()->int:::Returns the length of this BitArray.
sun.security.util.BitArray#toByteArray()->byte[]:::Returns a Byte array containing the contents of this BitArray
sun.security.util.BitArray#equals(Object)->boolean::: bit array equals
sun.security.util.BitArray#toBooleanArray()->boolean[]:::Return a boolean array with the same bit values a this BitArray.
sun.security.util.BitArray#hashCode()->int:::Returns a hash code value for this bit array.
sun.security.util.BitArray#clone()->Object::: bit array clone
sun.security.util.BitArray#toString()->String::: Returns a string representation of this BitArray.
sun.security.util.BitArray#truncate()->BitArray::: bit array truncate
sun.security.util.ByteArrayLexOrder#compare(byte[], byte[])->int:::Perform lexicographical comparison of two byte arrays, regarding each byte as unsigned
sun.security.util.ByteArrayTagOrder#compare(byte[], byte[])->int::: byte array tag order compare
sun.security.util.Cache#size()->int:::Return the number of currently valid entries in the cache.
sun.security.util.Cache#clear()->void:::Remove all entries from the cache.
sun.security.util.Cache#put(K, V)->void:::Add an entry to the cache.
sun.security.util.Cache#get(Object)->V:::Get a value from the cache.
sun.security.util.Cache#remove(Object)->void:::Remove an entry from the cache.
sun.security.util.Cache#setCapacity(int)->void:::Set the maximum size.
sun.security.util.Cache#setTimeout(int)->void:::Set the timeout(in seconds).
sun.security.util.Cache#accept(CacheVisitor)->void:::accept a visitor
sun.security.util.Cache#newSoftMemoryCache(int)->Cache:::Return a new memory cache with the specified maximum size, unlimited lifetime for entries, with the values held by SoftReferences.
sun.security.util.Cache#newSoftMemoryCache(int, int)->Cache:::Return a new memory cache with the specified maximum size, the specified maximum lifetime (in seconds), with the values held by SoftReferences.
sun.security.util.Cache#newHardMemoryCache(int)->Cache:::Return a new memory cache with the specified maximum size, unlimited lifetime for entries, with the values held by standard references.
sun.security.util.Cache#newNullCache()->Cache:::Return a dummy cache that does nothing.
sun.security.util.Cache#newHardMemoryCache(int, int)->Cache:::Return a new memory cache with the specified maximum size, the specified maximum lifetime (in seconds), with the values held by standard references.
sun.security.util.Cache.EqualByteArray#hashCode()->int::: equal byte array hash code
sun.security.util.Cache.EqualByteArray#equals(Object)->boolean::: equal byte array equals
sun.security.util.Cache.CacheVisitor#visit(Map)->void::: cache visitor visit
sun.security.util.NullCache#size()->int::: null cache size
sun.security.util.NullCache#clear()->void::: null cache clear
sun.security.util.NullCache#put(K, V)->void::: null cache put
sun.security.util.NullCache#get(Object)->V::: null cache get
sun.security.util.NullCache#remove(Object)->void::: null cache remove
sun.security.util.NullCache#setCapacity(int)->void::: null cache set capacity
sun.security.util.NullCache#setTimeout(int)->void::: null cache set timeout
sun.security.util.NullCache#accept(CacheVisitor)->void::: null cache accept
sun.security.util.MemoryCache#size()->int::: memory cache size
sun.security.util.MemoryCache#clear()->void::: memory cache clear
sun.security.util.MemoryCache#put(K, V)->void::: memory cache put
sun.security.util.MemoryCache#get(Object)->V::: memory cache get
sun.security.util.MemoryCache#remove(Object)->void::: memory cache remove
sun.security.util.MemoryCache#setCapacity(int)->void::: memory cache set capacity
sun.security.util.MemoryCache#setTimeout(int)->void::: memory cache set timeout
sun.security.util.MemoryCache#accept(CacheVisitor)->void::: memory cache accept
sun.security.util.MemoryCache#newEntry(K, V, long, ReferenceQueue)->CacheEntry::: memory cache new entry
sun.security.util.ConsoleCallbackHandler#handle(Callback[])->void:::Handles the specified set of callbacks.
sun.security.util.ConstraintsParameters#getAlgorithm()->String::: constraints parameters get algorithm
sun.security.util.ConstraintsParameters#getAlgParams()->AlgorithmParameters::: constraints parameters get alg params
sun.security.util.ConstraintsParameters#getPublicKey()->Key::: constraints parameters get public key
sun.security.util.ConstraintsParameters#isTrustedMatch()->boolean::: constraints parameters is trusted match
sun.security.util.ConstraintsParameters#getCertificate()->X509Certificate::: constraints parameters get certificate
sun.security.util.ConstraintsParameters#getPKIXParamDate()->Date::: constraints parameters get param date
sun.security.util.ConstraintsParameters#getJARTimestamp()->Timestamp::: constraints parameters get timestamp
sun.security.util.ConstraintsParameters#getVariant()->String::: constraints parameters get variant
sun.security.util.CurveDB#getSupportedCurves()->Collection::: curve b get supported curves
sun.security.util.CurveDB#lookup(String)->NamedCurve::: curve b lookup
sun.security.util.CurveDB#lookup(int)->NamedCurve::: curve b lookup
sun.security.util.CurveDB#lookup(ECParameterSpec)->NamedCurve::: curve b lookup
sun.security.util.Debug#Help()->void::: debug  help
sun.security.util.Debug#getInstance(String)->Debug::: debug get instance
sun.security.util.Debug#getInstance(String, String)->Debug:::Get a Debug object corresponding to whether or not the given option is set
sun.security.util.Debug#isOn(String)->boolean:::True if the system property "security.debug" contains the string "option".
sun.security.util.Debug#isVerbose()->boolean:::Check if verbose messages is enabled for extra debugging.
sun.security.util.Debug#println(String)->void::: debug println
sun.security.util.Debug#println(Object, String)->void:::print a message to stderr that is prefixed with the prefix created from the call to getInstance and obj.
sun.security.util.Debug#println()->void::: debug println
sun.security.util.Debug#println(String, String)->void::: debug println
sun.security.util.Debug#getPrintStream()->PrintStream:::PrintStream for debug methods
sun.security.util.Debug#toHexString(BigInteger)->String:::return a hexadecimal printed representation of the specified BigInteger object
sun.security.util.Debug#toString(byte[])->String::: debug to string
sun.security.util.DerEncoder#derEncode(OutputStream)->void:::DER encode this object and write the results to a stream.
sun.security.util.DerIndefLenConverter#isLongForm(int)->boolean::: der indef len converter is long form
sun.security.util.DerIndefLenConverter#isIndefinite(int)->boolean:::Checks whether the given length byte is of the form Indefinite.
sun.security.util.DerIndefLenConverter#convert(byte[])->byte[]:::Converts a indefinite length DER encoded byte array to a definte length DER encoding.
sun.security.util.DerInputBuffer#dup()->DerInputBuffer::: der input buffer dup
sun.security.util.DerInputBuffer#toByteArray()->byte[]::: der input buffer to byte array
sun.security.util.DerInputBuffer#peek()->int::: der input buffer peek
sun.security.util.DerInputBuffer#equals(Object)->boolean:::Compares this DerInputBuffer for equality with the specified object.
sun.security.util.DerInputBuffer#equals(DerInputBuffer)->boolean::: der input buffer equals
sun.security.util.DerInputBuffer#hashCode()->int:::Returns a hashcode for this DerInputBuffer.
sun.security.util.DerInputBuffer#truncate(int)->void::: der input buffer truncate
sun.security.util.DerInputBuffer#getBigInteger(int, boolean)->BigInteger:::Returns the integer which takes up the specified number of bytes in this buffer as a BigInteger.
sun.security.util.DerInputBuffer#getInteger(int)->int:::Returns the integer which takes up the specified number of bytes in this buffer.
sun.security.util.DerInputBuffer#getBitString(int)->byte[]:::Returns the bit string which takes up the specified number of bytes in this buffer.
sun.security.util.DerInputBuffer#getBitString()->byte[]:::Returns the bit string which takes up the rest of this buffer.
sun.security.util.DerInputBuffer#getUnalignedBitString()->BitArray:::Returns the bit string which takes up the rest of this buffer
sun.security.util.DerInputBuffer#getUTCTime(int)->Date:::Returns the UTC Time value that takes up the specified number of bytes in this buffer.
sun.security.util.DerInputBuffer#getGeneralizedTime(int)->Date:::Returns the Generalized Time value that takes up the specified number of bytes in this buffer.
sun.security.util.DerInputStream#subStream(int, boolean)->DerInputStream:::Creates a new DER input stream from part of this input stream.
sun.security.util.DerInputStream#toByteArray()->byte[]:::Return what has been written to this DerInputStream as a byte array
sun.security.util.DerInputStream#getInteger()->int:::Get an integer from the input stream as an integer.
sun.security.util.DerInputStream#getBigInteger()->BigInteger:::Get a integer from the input stream as a BigInteger object.
sun.security.util.DerInputStream#getPositiveBigInteger()->BigInteger:::Returns an ASN.1 INTEGER value as a positive BigInteger
sun.security.util.DerInputStream#getEnumerated()->int:::Get an enumerated from the input stream.
sun.security.util.DerInputStream#getBitString()->byte[]:::Get a bit string from the input stream
sun.security.util.DerInputStream#getUnalignedBitString()->BitArray:::Get a bit string from the input stream
sun.security.util.DerInputStream#getOctetString()->byte[]:::Returns an ASN.1 OCTET STRING from the input stream.
sun.security.util.DerInputStream#getBytes(byte[])->void:::Returns the asked number of bytes from the input stream.
sun.security.util.DerInputStream#getNull()->void:::Reads an encoded null value from the input stream.
sun.security.util.DerInputStream#getOID()->ObjectIdentifier:::Reads an X.200 style Object Identifier from the stream.
sun.security.util.DerInputStream#getSequence(int)->DerValue[]:::Return a sequence of encoded entities
sun.security.util.DerInputStream#getSet(int)->DerValue[]:::Return a set of encoded entities
sun.security.util.DerInputStream#getSet(int, boolean)->DerValue[]:::Return a set of encoded entities
sun.security.util.DerInputStream#readVector(int)->DerValue[]::: der input stream read vector
sun.security.util.DerInputStream#getDerValue()->DerValue:::Get a single DER-encoded value from the input stream
sun.security.util.DerInputStream#getUTF8String()->String:::Read a string that was encoded as a UTF8String DER value.
sun.security.util.DerInputStream#getPrintableString()->String:::Read a string that was encoded as a PrintableString DER value.
sun.security.util.DerInputStream#getT61String()->String:::Read a string that was encoded as a T61String DER value.
sun.security.util.DerInputStream#getIA5String()->String:::Read a string that was encoded as a IA5tring DER value.
sun.security.util.DerInputStream#getBMPString()->String:::Read a string that was encoded as a BMPString DER value.
sun.security.util.DerInputStream#getGeneralString()->String:::Read a string that was encoded as a GeneralString DER value.
sun.security.util.DerInputStream#getUTCTime()->Date:::Get a UTC encoded time value from the input stream.
sun.security.util.DerInputStream#getGeneralizedTime()->Date:::Get a Generalized encoded time value from the input stream.
sun.security.util.DerInputStream#getByte()->int::: der input stream get byte
sun.security.util.DerInputStream#peekByte()->int::: der input stream peek byte
sun.security.util.DerInputStream#getLength()->int::: der input stream get length
sun.security.util.DerInputStream#getLength(InputStream)->int::: der input stream get length
sun.security.util.DerInputStream#getLength(int, InputStream)->int::: der input stream get length
sun.security.util.DerInputStream#getDefiniteLength()->int::: der input stream get definite length
sun.security.util.DerInputStream#getDefiniteLength(InputStream)->int::: der input stream get definite length
sun.security.util.DerInputStream#mark(int)->void:::Mark the current position in the buffer, so that a later call to reset will return here.
sun.security.util.DerInputStream#reset()->void:::Return to the position of the last mark call
sun.security.util.DerInputStream#available()->int:::Returns the number of bytes available for reading
sun.security.util.DerOutputStream#write(byte, byte[])->void:::Writes tagged, pre-marshaled data
sun.security.util.DerOutputStream#write(byte, DerOutputStream)->void:::Writes tagged data using buffer-to-buffer copy
sun.security.util.DerOutputStream#writeImplicit(byte, DerOutputStream)->void:::Writes implicitly tagged data using buffer-to-buffer copy
sun.security.util.DerOutputStream#putDerValue(DerValue)->void:::Marshals pre-encoded DER value onto the output stream.
sun.security.util.DerOutputStream#putBoolean(boolean)->void:::Marshals a DER boolean on the output stream.
sun.security.util.DerOutputStream#putEnumerated(int)->void:::Marshals a DER enumerated on the output stream.
sun.security.util.DerOutputStream#putInteger(BigInteger)->void:::Marshals a DER integer on the output stream.
sun.security.util.DerOutputStream#putInteger(Integer)->void:::Marshals a DER integer on the output stream.
sun.security.util.DerOutputStream#putInteger(int)->void:::Marshals a DER integer on the output stream.
sun.security.util.DerOutputStream#putBitString(byte[])->void:::Marshals a DER bit string on the output stream
sun.security.util.DerOutputStream#putUnalignedBitString(BitArray)->void:::Marshals a DER bit string on the output stream
sun.security.util.DerOutputStream#putTruncatedUnalignedBitString(BitArray)->void:::Marshals a truncated DER bit string on the output stream
sun.security.util.DerOutputStream#putOctetString(byte[])->void:::DER-encodes an ASN.1 OCTET STRING value on the output stream.
sun.security.util.DerOutputStream#putNull()->void:::Marshals a DER "null" value on the output stream
sun.security.util.DerOutputStream#putOID(ObjectIdentifier)->void:::Marshals an object identifier (OID) on the output stream
sun.security.util.DerOutputStream#putSequence(DerValue[])->void:::Marshals a sequence on the output stream
sun.security.util.DerOutputStream#putSet(DerValue[])->void:::Marshals the contents of a set on the output stream without ordering the elements
sun.security.util.DerOutputStream#putOrderedSetOf(byte, DerEncoder[])->void:::Marshals the contents of a set on the output stream
sun.security.util.DerOutputStream#putOrderedSet(byte, DerEncoder[])->void:::Marshals the contents of a set on the output stream
sun.security.util.DerOutputStream#putUTF8String(String)->void:::Marshals a string as a DER encoded UTF8String.
sun.security.util.DerOutputStream#putPrintableString(String)->void:::Marshals a string as a DER encoded PrintableString.
sun.security.util.DerOutputStream#putT61String(String)->void:::Marshals a string as a DER encoded T61String.
sun.security.util.DerOutputStream#putIA5String(String)->void:::Marshals a string as a DER encoded IA5String.
sun.security.util.DerOutputStream#putBMPString(String)->void:::Marshals a string as a DER encoded BMPString.
sun.security.util.DerOutputStream#putGeneralString(String)->void:::Marshals a string as a DER encoded GeneralString.
sun.security.util.DerOutputStream#putUTCTime(Date)->void:::Marshals a DER UTC time/date value
sun.security.util.DerOutputStream#putGeneralizedTime(Date)->void:::Marshals a DER Generalized Time/date value
sun.security.util.DerOutputStream#putLength(int)->void:::Put the encoding of the length in the stream.
sun.security.util.DerOutputStream#putTag(byte, boolean, byte)->void:::Put the tag of the attribute in the stream.
sun.security.util.DerOutputStream#derEncode(OutputStream)->void::: Write the current contents of this DerOutputStream  to an OutputStream.
sun.security.util.DerValue#isUniversal()->boolean:::Returns true if the tag class is UNIVERSAL.
sun.security.util.DerValue#isApplication()->boolean:::Returns true if the tag class is APPLICATION.
sun.security.util.DerValue#isContextSpecific()->boolean:::Returns true iff the CONTEXT SPECIFIC bit is set in the type tag
sun.security.util.DerValue#isContextSpecific(byte)->boolean:::Returns true iff the CONTEXT SPECIFIC TAG matches the passed tag.
sun.security.util.DerValue#isPrivate()->boolean::: der value is private
sun.security.util.DerValue#isConstructed()->boolean:::Returns true iff the CONSTRUCTED bit is set in the type tag.
sun.security.util.DerValue#isConstructed(byte)->boolean:::Returns true iff the CONSTRUCTED TAG matches the passed tag.
sun.security.util.DerValue#encode(DerOutputStream)->void:::Encode an ASN1/DER encoded datum onto a DER output stream.
sun.security.util.DerValue#getData()->DerInputStream::: der value get data
sun.security.util.DerValue#getTag()->byte::: der value get tag
sun.security.util.DerValue#getBoolean()->boolean:::Returns an ASN.1 BOOLEAN
sun.security.util.DerValue#getOID()->ObjectIdentifier:::Returns an ASN.1 OBJECT IDENTIFIER.
sun.security.util.DerValue#getOctetString()->byte[]:::Returns an ASN.1 OCTET STRING
sun.security.util.DerValue#getInteger()->int:::Returns an ASN.1 INTEGER value as an integer.
sun.security.util.DerValue#getBigInteger()->BigInteger:::Returns an ASN.1 INTEGER value as a BigInteger.
sun.security.util.DerValue#getPositiveBigInteger()->BigInteger:::Returns an ASN.1 INTEGER value as a positive BigInteger
sun.security.util.DerValue#getEnumerated()->int:::Returns an ASN.1 ENUMERATED value.
sun.security.util.DerValue#getBitString()->byte[]:::Returns an ASN.1 BIT STRING value
sun.security.util.DerValue#getUnalignedBitString()->BitArray:::Returns an ASN.1 BIT STRING value that need not be byte-aligned.
sun.security.util.DerValue#getAsString()->String::: der value get as string
sun.security.util.DerValue#getBitString(boolean)->byte[]:::Returns an ASN.1 BIT STRING value, with the tag assumed implicit based on the parameter
sun.security.util.DerValue#getUnalignedBitString(boolean)->BitArray:::Returns an ASN.1 BIT STRING value, with the tag assumed implicit based on the parameter
sun.security.util.DerValue#getDataBytes()->byte[]:::Helper routine to return all the bytes contained in the DerInputStream associated with this object.
sun.security.util.DerValue#getPrintableString()->String:::Returns an ASN.1 STRING value
sun.security.util.DerValue#getT61String()->String:::Returns an ASN.1 T61 (Teletype) STRING value
sun.security.util.DerValue#getIA5String()->String:::Returns an ASN.1 IA5 (ASCII) STRING value
sun.security.util.DerValue#getBMPString()->String:::Returns the ASN.1 BMP (Unicode) STRING value as a Java string.
sun.security.util.DerValue#getUTF8String()->String:::Returns the ASN.1 UTF-8 STRING value as a Java String.
sun.security.util.DerValue#getGeneralString()->String:::Returns the ASN.1 GENERAL STRING value as a Java String.
sun.security.util.DerValue#getUTCTime()->Date:::Returns a Date if the DerValue is UtcTime.
sun.security.util.DerValue#getGeneralizedTime()->Date:::Returns a Date if the DerValue is GeneralizedTime.
sun.security.util.DerValue#equals(Object)->boolean:::Bitwise equality comparison
sun.security.util.DerValue#toString()->String:::Returns a printable representation of the value.
sun.security.util.DerValue#toByteArray()->byte[]:::Returns a DER-encoded value, such that if it's passed to the DerValue constructor, a value equivalent to "this" is returned.
sun.security.util.DerValue#toDerInputStream()->DerInputStream:::For "set" and "sequence" types, this function may be used to return a DER stream of the members of the set or sequence
sun.security.util.DerValue#length()->int:::Get the length of the encoded value.
sun.security.util.DerValue#isPrintableStringChar(char)->boolean:::Determine if a character is one of the permissible characters for PrintableString: A-Z, a-z, 0-9, space, apostrophe (39), left and right parentheses, plus sign, comma, hyphen, period, slash, colon, equals sign, and question mark
sun.security.util.DerValue#createTag(byte, boolean, byte)->byte:::Create the tag of the attribute.
sun.security.util.DerValue#resetTag(byte)->void:::Set the tag of the attribute
sun.security.util.DerValue#hashCode()->int:::Returns a hashcode for this DerValue.
sun.security.util.DisabledAlgorithmConstraints#permits(Set, String, AlgorithmParameters)->boolean::: disabled algorithm constraints permits
sun.security.util.DisabledAlgorithmConstraints#permits(Set, Key)->boolean::: disabled algorithm constraints permits
sun.security.util.DisabledAlgorithmConstraints#permits(Set, String, Key, AlgorithmParameters)->boolean::: disabled algorithm constraints permits
sun.security.util.DisabledAlgorithmConstraints#permits(ConstraintsParameters)->void::: disabled algorithm constraints permits
sun.security.util.DisabledAlgorithmConstraints#permits(String, Key, AlgorithmParameters, String)->void::: disabled algorithm constraints permits
sun.security.util.DisabledAlgorithmConstraints#permits(String, ConstraintsParameters)->void::: disabled algorithm constraints permits
sun.security.util.DisabledAlgorithmConstraints#checkProperty(String)->boolean::: disabled algorithm constraints check property
sun.security.util.DomainName#registeredDomain(String)->RegisteredDomain:::Returns the registered domain of the specified domain.
sun.security.util.ECKeySizeParameterSpec#getKeySize()->int:::Returns the key size of this spec.
sun.security.util.ECParameters#getAlgorithmParameters(ECParameterSpec)->AlgorithmParameters::: parameters get algorithm parameters
sun.security.util.ECParameters#engineInit(AlgorithmParameterSpec)->void::: parameters engine init
sun.security.util.ECParameters#engineInit(byte[])->void::: parameters engine init
sun.security.util.ECParameters#engineInit(byte[], String)->void::: parameters engine init
sun.security.util.ECParameters#engineGetParameterSpec(Class)->T::: parameters engine get parameter spec
sun.security.util.ECParameters#engineGetEncoded()->byte[]::: parameters engine get encoded
sun.security.util.ECParameters#engineGetEncoded(String)->byte[]::: parameters engine get encoded
sun.security.util.ECParameters#engineToString()->String::: parameters engine to string
sun.security.util.ECUtil#decodePoint(byte[], EllipticCurve)->ECPoint::: util decode point
sun.security.util.ECUtil#encodePoint(ECPoint, EllipticCurve)->byte[]::: util encode point
sun.security.util.ECUtil#trimZeroes(byte[])->byte[]::: util trim zeroes
sun.security.util.ECUtil#decodeX509ECPublicKey(byte[])->ECPublicKey::: util decode x509 public key
sun.security.util.ECUtil#x509EncodeECPublicKey(ECPoint, ECParameterSpec)->byte[]::: util x509 encode public key
sun.security.util.ECUtil#decodePKCS8ECPrivateKey(byte[])->ECPrivateKey::: util decode s8 private key
sun.security.util.ECUtil#generateECPrivateKey(BigInteger, ECParameterSpec)->ECPrivateKey::: util generate private key
sun.security.util.ECUtil#getECParameters(Provider)->AlgorithmParameters::: util get parameters
sun.security.util.ECUtil#encodeECParameterSpec(Provider, ECParameterSpec)->byte[]::: util encode parameter spec
sun.security.util.ECUtil#getECParameterSpec(Provider, ECParameterSpec)->ECParameterSpec::: util get parameter spec
sun.security.util.ECUtil#getECParameterSpec(Provider, byte[])->ECParameterSpec::: util get parameter spec
sun.security.util.ECUtil#getECParameterSpec(Provider, String)->ECParameterSpec::: util get parameter spec
sun.security.util.ECUtil#getECParameterSpec(Provider, int)->ECParameterSpec::: util get parameter spec
sun.security.util.ECUtil#getCurveName(Provider, ECParameterSpec)->String::: util get curve name
sun.security.util.ECUtil#encodeSignature(byte[])->byte[]::: util encode signature
sun.security.util.ECUtil#decodeSignature(byte[])->byte[]::: util decode signature
sun.security.util.FilePermCompat#newPermPlusAltPath(Permission)->Permission::: file perm compat new perm plus alt path
sun.security.util.FilePermCompat#newPermUsingAltPath(Permission)->Permission::: file perm compat new perm using alt path
sun.security.util.GCMParameters#engineInit(AlgorithmParameterSpec)->void::: parameters engine init
sun.security.util.GCMParameters#engineInit(byte[])->void::: parameters engine init
sun.security.util.GCMParameters#engineInit(byte[], String)->void::: parameters engine init
sun.security.util.GCMParameters#engineGetParameterSpec(Class)->T::: parameters engine get parameter spec
sun.security.util.GCMParameters#engineGetEncoded()->byte[]::: parameters engine get encoded
sun.security.util.GCMParameters#engineGetEncoded(String)->byte[]::: parameters engine get encoded
sun.security.util.GCMParameters#engineToString()->String::: parameters engine to string
sun.security.util.HexDumpEncoder#hexDigit(PrintStream, byte)->void::: hex dump encoder hex digit
sun.security.util.HexDumpEncoder#bytesPerAtom()->int::: hex dump encoder bytes per atom
sun.security.util.HexDumpEncoder#bytesPerLine()->int::: hex dump encoder bytes per line
sun.security.util.HexDumpEncoder#encodeBufferPrefix(OutputStream)->void::: hex dump encoder encode buffer prefix
sun.security.util.HexDumpEncoder#encodeLinePrefix(OutputStream, int)->void::: hex dump encoder encode line prefix
sun.security.util.HexDumpEncoder#encodeAtom(OutputStream, byte[], int, int)->void::: hex dump encoder encode atom
sun.security.util.HexDumpEncoder#encodeLineSuffix(OutputStream)->void::: hex dump encoder encode line suffix
sun.security.util.HexDumpEncoder#readFully(InputStream, byte[])->int:::This method works around the bizarre semantics of BufferedInputStream's read method.
sun.security.util.HexDumpEncoder#encode(InputStream, OutputStream)->void:::Encode bytes from the input stream, and write them as text characters to the output stream
sun.security.util.HexDumpEncoder#encode(byte[])->String:::A 'streamless' version of encode that simply takes a buffer of bytes and returns a string containing the encoded buffer.
sun.security.util.HexDumpEncoder#encode(ByteBuffer)->String:::A 'streamless' version of encode that simply takes a ByteBuffer and returns a string containing the encoded buffer
sun.security.util.HexDumpEncoder#encodeBuffer(InputStream, OutputStream)->void:::Encode bytes from the input stream, and write them as text characters to the output stream
sun.security.util.HexDumpEncoder#encodeBuffer(byte[], OutputStream)->void:::Encode the buffer in aBuffer and write the encoded result to the OutputStream aStream.
sun.security.util.HexDumpEncoder#encodeBuffer(byte[])->String:::A 'streamless' version of encode that simply takes a buffer of bytes and returns a string containing the encoded buffer.
sun.security.util.HexDumpEncoder#encodeBuffer(ByteBuffer, OutputStream)->void:::Encode the aBuffer ByteBuffer and write the encoded result to the OutputStream aStream
sun.security.util.HostnameChecker#getInstance(byte)->HostnameChecker:::Get a HostnameChecker instance
sun.security.util.HostnameChecker#match(String, X509Certificate, boolean)->void:::Perform the check.
sun.security.util.HostnameChecker#match(String, X509Certificate)->void::: hostname checker match
sun.security.util.HostnameChecker#getSubjectX500Name(X509Certificate)->X500Name:::Return the subject of a certificate as X500Name, by reparsing if necessary
sun.security.util.IOUtils#readExactlyNBytes(InputStream, int)->byte[]:::Read exactly length of bytes from in
sun.security.util.KeyStoreDelegator#engineGetKey(String, char[])->Key::: key store delegator engine get key
sun.security.util.KeyStoreDelegator#engineGetCertificateChain(String)->Certificate[]::: key store delegator engine get certificate chain
sun.security.util.KeyStoreDelegator#engineGetCertificate(String)->Certificate::: key store delegator engine get certificate
sun.security.util.KeyStoreDelegator#engineGetCreationDate(String)->Date::: key store delegator engine get creation date
sun.security.util.KeyStoreDelegator#engineSetKeyEntry(String, Key, char[], Certificate[])->void::: key store delegator engine set key entry
sun.security.util.KeyStoreDelegator#engineSetKeyEntry(String, byte[], Certificate[])->void::: key store delegator engine set key entry
sun.security.util.KeyStoreDelegator#engineSetCertificateEntry(String, Certificate)->void::: key store delegator engine set certificate entry
sun.security.util.KeyStoreDelegator#engineDeleteEntry(String)->void::: key store delegator engine delete entry
sun.security.util.KeyStoreDelegator#engineAliases()->Enumeration::: key store delegator engine aliases
sun.security.util.KeyStoreDelegator#engineContainsAlias(String)->boolean::: key store delegator engine contains alias
sun.security.util.KeyStoreDelegator#engineSize()->int::: key store delegator engine size
sun.security.util.KeyStoreDelegator#engineIsKeyEntry(String)->boolean::: key store delegator engine is key entry
sun.security.util.KeyStoreDelegator#engineIsCertificateEntry(String)->boolean::: key store delegator engine is certificate entry
sun.security.util.KeyStoreDelegator#engineGetCertificateAlias(Certificate)->String::: key store delegator engine get certificate alias
sun.security.util.KeyStoreDelegator#engineGetEntry(String, KeyStore.ProtectionParameter)->KeyStore.Entry::: key store delegator engine get entry
sun.security.util.KeyStoreDelegator#engineSetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)->void::: key store delegator engine set entry
sun.security.util.KeyStoreDelegator#engineEntryInstanceOf(String, Class)->boolean::: key store delegator engine entry instance of
sun.security.util.KeyStoreDelegator#engineStore(OutputStream, char[])->void::: key store delegator engine store
sun.security.util.KeyStoreDelegator#engineLoad(InputStream, char[])->void::: key store delegator engine load
sun.security.util.KeyStoreDelegator#engineProbe(InputStream)->boolean:::Probe the first few bytes of the keystore data stream for a valid keystore encoding
sun.security.util.KeyUtil#getKeySize(Key)->int:::Returns the key size of the given key object in bits.
sun.security.util.KeyUtil#getKeySize(AlgorithmParameters)->int:::Returns the key size of the given cryptographic parameters in bits.
sun.security.util.KeyUtil#validate(Key)->void:::Returns whether the key is valid or not
sun.security.util.KeyUtil#validate(KeySpec)->void:::Returns whether the key spec is valid or not
sun.security.util.KeyUtil#isOracleJCEProvider(String)->boolean:::Returns whether the specified provider is Oracle provider or not.
sun.security.util.KeyUtil#checkTlsPreMasterSecretKey(int, int, SecureRandom, byte[], boolean)->byte[]:::Check the format of TLS PreMasterSecret
sun.security.util.KeyUtil#trimZeroes(byte[])->byte[]:::Trim leading (most significant) zeroes from the result.
sun.security.util.LazyCodeSourcePermissionCollection#add(Permission)->void::: lazy code source permission collection add
sun.security.util.LazyCodeSourcePermissionCollection#implies(Permission)->boolean::: lazy code source permission collection implies
sun.security.util.LazyCodeSourcePermissionCollection#elements()->Enumeration::: lazy code source permission collection elements
sun.security.util.LazyCodeSourcePermissionCollection#toString()->String::: lazy code source permission collection to string
sun.security.util.LegacyAlgorithmConstraints#permits(Set, String, AlgorithmParameters)->boolean::: legacy algorithm constraints permits
sun.security.util.LegacyAlgorithmConstraints#permits(Set, Key)->boolean::: legacy algorithm constraints permits
sun.security.util.LegacyAlgorithmConstraints#permits(Set, String, Key, AlgorithmParameters)->boolean::: legacy algorithm constraints permits
sun.security.util.Length#length()->int:::Gets the length of this object  Note that if a class of java.security.Key implements this interfaces, the length should be measured in bits.
sun.security.util.LocalizedMessage#formatLocalized(Object...)->String:::Return a localized string corresponding to the key stored in this object, formatted with the provided arguments
sun.security.util.LocalizedMessage#formatNonlocalized(Object...)->String:::Return a non-localized string corresponding to the key stored in this object, formatted with the provided arguments
sun.security.util.LocalizedMessage#getNonlocalized(String, Object...)->String:::Return a non-localized string corresponding to the provided key, and formatted with the provided arguments
sun.security.util.LocalizedMessage#getLocalized(String, Object...)->String:::Return a localized string corresponding to the provided key, and formatted with the provided arguments
sun.security.util.ManifestDigester.Entry#digest(MessageDigest)->byte[]::: entry digest
sun.security.util.ManifestDigester.Entry#digestWorkaround(MessageDigest)->byte[]::: entry digest workaround
sun.security.util.ManifestDigester#get(String, boolean)->Entry::: manifest digester get
sun.security.util.ManifestDigester#manifestDigest(MessageDigest)->byte[]::: manifest digester manifest digest
sun.security.util.ManifestEntryVerifier#setEntry(String, JarEntry)->void:::Find the hashes in the manifest for this entry, save them, and set the MessageDigest objects to calculate the hashes on the fly
sun.security.util.ManifestEntryVerifier#update(byte)->void:::update the digests for the digests we are interested in
sun.security.util.ManifestEntryVerifier#update(byte[], int, int)->void:::update the digests for the digests we are interested in
sun.security.util.ManifestEntryVerifier#getEntry()->JarEntry:::get the JarEntry for this object
sun.security.util.ManifestEntryVerifier#verify(Hashtable, Hashtable)->CodeSigner[]:::go through all the digests, calculating the final digest and comparing it to the one in the manifest
sun.security.util.ManifestEntryVerifier#toHex(byte[])->String::: manifest entry verifier to hex
sun.security.util.MessageDigestSpi2#engineUpdate(SecretKey)->void:::Updates the digest using the specified key
sun.security.util.NamedCurve#getName()->String::: named curve get name
sun.security.util.NamedCurve#getEncoded()->byte[]::: named curve get encoded
sun.security.util.NamedCurve#getObjectId()->String::: named curve get object id
sun.security.util.NamedCurve#toString()->String::: named curve to string
sun.security.util.ObjectIdentifier#newInternal(int[])->ObjectIdentifier:::This method is kept for compatibility reasons
sun.security.util.ObjectIdentifier#encode(DerOutputStream)->void::: object identifier encode
sun.security.util.ObjectIdentifier#equals(Object)->boolean:::Compares this identifier with another, for equality.
sun.security.util.ObjectIdentifier#hashCode()->int::: object identifier hash code
sun.security.util.ObjectIdentifier#toString()->String:::Returns a string form of the object ID
sun.security.util.Password#readPassword(InputStream)->char[]:::Reads user password from given input stream.
sun.security.util.Password#readPassword(InputStream, boolean)->char[]:::Reads user password from given input stream.
sun.security.util.Pem#decode(String)->byte[]:::Decodes a PEM-encoded block.
sun.security.util.PermissionFactory#newPermission(String)->T::: permission factory new permission
sun.security.util.PolicyUtil#getInputStream(URL)->InputStream::: policy util get input stream
sun.security.util.PolicyUtil#getKeyStore(URL, String, String, String, String, Debug)->KeyStore:::this is intended for use by the policy parser to instantiate a KeyStore from the information in the GUI/policy file
sun.security.util.PropertyExpander#expand(String)->String::: property expander expand
sun.security.util.PropertyExpander#expand(String, boolean)->String::: property expander expand
sun.security.util.RegisteredDomain#name()->String:::Returns the name of the registered domain.
sun.security.util.RegisteredDomain#type()->Type:::Returns the type of the registered domain.
sun.security.util.RegisteredDomain#publicSuffix()->String:::Returns the public suffix of the registered domain.
sun.security.util.RegisteredDomain#from(String)->Optional:::Returns an Optional<RegisteredDomain> representing the registered part of the specified domain.
sun.security.util.Resources#getContents()->Object[][]:::Returns the contents of this ResourceBundle.
sun.security.util.ResourcesMgr#getString(String)->String::: resources mgr get string
sun.security.util.ResourcesMgr#getAuthResourceString(String)->String::: resources mgr get auth resource string
sun.security.util.Resources_ja#getContents()->Object[][]:::Returns the contents of this ResourceBundle.
sun.security.util.Resources_zh_CN#getContents()->Object[][]:::Returns the contents of this ResourceBundle.
sun.security.util.SecurityProperties#privilegedGetOverridable(String)->String:::Returns the value of the security property propName, which can be overridden by a system property of the same name
sun.security.util.SecurityProperties#includedInExceptions(String)->boolean:::Returns true in case the system or security property "jdk.includeInExceptions" contains the category refName
sun.security.util.SecurityProviderConstants#getDefDSASubprimeSize(int)->int::: security provider constants get def subprime size
sun.security.util.SignatureFileVerifier#needSignatureFileBytes()->boolean:::returns true if we need the .SF file
sun.security.util.SignatureFileVerifier#needSignatureFile(String)->boolean:::returns true if we need this .SF file.
sun.security.util.SignatureFileVerifier#setSignatureFile(byte[])->void:::used to set the raw bytes of the .SF file when it is external to the signature block file.
sun.security.util.SignatureFileVerifier#isBlockOrSF(String)->boolean:::Utility method used by JarVerifier and JarSigner to determine the signature file names and PKCS7 block files names that are supported
sun.security.util.SignatureFileVerifier#isSigningRelated(String)->boolean:::Yet another utility method used by JarVerifier and JarSigner to determine what files are signature related, which includes the MANIFEST, SF files, known signature block files, and other unknown signature related files (those starting with SIG- with an optional [A-Z0-9]{1,3} extension right inside META-INF).
sun.security.util.SignatureFileVerifier#process(Hashtable, List)->void:::process the signature block file
sun.security.util.SignatureFileVerifier#permittedCheck(String, String)->boolean:::Check if algorithm is permitted using the permittedAlgs Map
sun.security.util.SignatureFileVerifier#getWeakAlgorithms(String)->String:::With a given header (*-DIGEST*), return a string that lists all the algorithms associated with the header
sun.security.util.SignatureFileVerifier#toHex(byte[])->String::: signature file verifier to hex
sun.security.util.SignatureFileVerifier#contains(CodeSigner[], CodeSigner)->boolean::: signature file verifier contains
sun.security.util.SignatureFileVerifier#isSubSet(CodeSigner[], CodeSigner[])->boolean::: signature file verifier is sub set
sun.security.util.SignatureFileVerifier#matches(CodeSigner[], CodeSigner[], CodeSigner[])->boolean:::returns true if signer contains exactly the same code signers as oldSigner and newSigner, false otherwise
sun.security.util.SignatureFileVerifier#updateSigners(CodeSigner[], Hashtable, String)->void::: signature file verifier update signers
sun.security.util.SignatureUtil#getParamSpec(String, AlgorithmParameters)->AlgorithmParameterSpec::: signature util get param spec
sun.security.util.SignatureUtil#getParamSpec(String, byte[])->AlgorithmParameterSpec::: signature util get param spec
sun.security.util.SignatureUtil#initVerifyWithParam(Signature, PublicKey, AlgorithmParameterSpec)->void::: signature util init verify with param
sun.security.util.SignatureUtil#initVerifyWithParam(Signature, java.security.cert.Certificate, AlgorithmParameterSpec)->void::: signature util init verify with param
sun.security.util.SignatureUtil#initSignWithParam(Signature, PrivateKey, AlgorithmParameterSpec, SecureRandom)->void::: signature util init sign with param
sun.security.util.UntrustedCertificates#isUntrusted(X509Certificate)->boolean:::Checks if a certificate is untrusted.

AlgorithmDecomposer#decompose(String):::Decompose the standard algorithm name into sub-elements:::if->algorithm->length->return->new->HashSet<>->elements->decomposeImpl->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->if->elements->contains->elements->contains->elements->add->return
AlgorithmDecomposer#getAliases(String):::Get aliases of the specified algorithm:::aliases->if->algorithm->equalsIgnoreCase->algorithm->equalsIgnoreCase->new->StringArr->else->new->StringArr->return->Arrays->asList
AnchorCertificates#contains(X509Certificate):::Checks if a certificate is a trust anchor.:::key->X509CertImpl->getFingerprint->result->certs->contains->if->debug->cert->getSubjectDN->println->return
AuthResources#getContents():::Returns the contents of this ResourceBundle:::return
AuthResources_ja#getContents():::Returns the contents of this ResourceBundle:::return
AuthResources_zh_CN#getContents():::Returns the contents of this ResourceBundle:::return
BitArray#get(int)::: Returns the indexed bit in this BitArray.:::if->throw->Integer->toString->new->ArrayIndexOutOfBoundsException->return->subscript->position
BitArray#set(int, boolean)::: Sets the indexed bit in this BitArray.:::if->throw->Integer->toString->new->ArrayIndexOutOfBoundsException->idx->subscript->bit->position->if->else
BitArray#length():::Returns the length of this BitArray.:::return
BitArray#toByteArray():::Returns a Byte array containing the contents of this BitArray:::return->repn->clone
BitArray#toBooleanArray():::Return a boolean array with the same bit values a this BitArray.:::bits->new->booleanArr->for->i->return
BitArray#hashCode():::Returns a hash code value for this bit array.:::hashCode->for->i->return
BitArray#toString()::: Returns a string representation of this BitArray.:::out->new->ByteArrayOutputStream->for->i->for->i->return->out->toByteArray->new->String
ByteArrayLexOrder#compare(byte[], byte[]):::Perform lexicographical comparison of two byte arrays, regarding each byte as unsigned:::diff->for->i->return
Cache#size():::Return the number of currently valid entries in the cache.:::
Cache#clear():::Remove all entries from the cache.:::
Cache#put(K, V):::Add an entry to the cache.:::
Cache#get(Object):::Get a value from the cache.:::
Cache#remove(Object):::Remove an entry from the cache.:::
Cache#setCapacity(int):::Set the maximum size.:::
Cache#setTimeout(int):::Set the timeout(in seconds).:::
Cache#accept(CacheVisitor):::accept a visitor:::
Cache#newSoftMemoryCache(int):::Return a new memory cache with the specified maximum size, unlimited lifetime for entries, with the values held by SoftReferences.:::return->new->MemoryCache<>
Cache#newSoftMemoryCache(int, int):::Return a new memory cache with the specified maximum size, the specified maximum lifetime (in seconds), with the values held by SoftReferences.:::return->new->MemoryCache<>
Cache#newHardMemoryCache(int):::Return a new memory cache with the specified maximum size, unlimited lifetime for entries, with the values held by standard references.:::return->new->MemoryCache<>
Cache#newNullCache():::Return a dummy cache that does nothing.:::return
Cache#newHardMemoryCache(int, int):::Return a new memory cache with the specified maximum size, the specified maximum lifetime (in seconds), with the values held by standard references.:::return->new->MemoryCache<>
ConsoleCallbackHandler#handle(Callback[]):::Handles the specified set of callbacks.:::confirmation->for->i->if->doConfirmation
Debug#getInstance(String, String):::Get a Debug object corresponding to whether or not the given option is set:::if->isOn->d->new->Debug->return->else->return
Debug#isOn(String):::True if the system property "security.debug" contains the string "option".:::if->return->else->if->args->indexOf->return->else->return->args->indexOf
Debug#isVerbose():::Check if verbose messages is enabled for extra debugging.:::return->isOn
Debug#println(Object, String):::print a message to stderr that is prefixed with the prefix created from the call to getInstance and obj.:::obj->getClass->getSimpleName->System->identityHashCode->println
Debug#getPrintStream():::PrintStream for debug methods:::return
Debug#toHexString(BigInteger):::return a hexadecimal printed representation of the specified BigInteger object:::hexValue->b->toString->sb->hexValue->length->new->StringBuilder->if->hexValue->startsWith->sb->append->hexValue->substring->else->sb->append->if->hexValue->length->i->while->hexValue->length->sb->hexValue->substring->append->if->hexValue->length->if->sb->append->else->if->sb->append->return->sb->toString
DerEncoder#derEncode(OutputStream):::DER encode this object and write the results to a stream.:::
DerIndefLenConverter#isIndefinite(int):::Checks whether the given length byte is of the form Indefinite.:::return->isLongForm
DerIndefLenConverter#convert(byte[]):::Converts a indefinite length DER encoded byte array to a definte length DER encoding.:::len->unused->while->parseTag->parseLength->parseValue->if->break->if->throw->new->IOException->new->byteArr->while->writeTag->writeLengthAndValue->System->arraycopy->return
DerInputBuffer#equals(Object):::Compares this DerInputBuffer for equality with the specified object.:::if->return->equals->else->return
DerInputBuffer#hashCode():::Returns a hashcode for this DerInputBuffer.:::retval->len->available->p->for->i->return
DerInputBuffer#getBigInteger(int, boolean):::Returns the integer which takes up the specified number of bytes in this buffer as a BigInteger.:::if->available->throw->new->IOException->if->throw->new->IOException->bytes->new->byteArr->System->arraycopy->skip->if->throw->new->IOException->if->return->new->BigInteger->else->return->new->BigInteger
DerInputBuffer#getInteger(int):::Returns the integer which takes up the specified number of bytes in this buffer.:::result->getBigInteger->if->result->BigInteger->valueOf->compareTo->throw->new->IOException->if->result->BigInteger->valueOf->compareTo->throw->new->IOException->return->result->intValue
DerInputBuffer#getBitString(int):::Returns the bit string which takes up the specified number of bytes in this buffer.:::if->available->throw->new->IOException->if->throw->new->IOException->numOfPadBits->if->throw->new->IOException->retval->new->byteArr->System->arraycopy->if->skip->return
DerInputBuffer#getBitString():::Returns the bit string which takes up the rest of this buffer.:::return->available->getBitString
DerInputBuffer#getUnalignedBitString():::Returns the bit string which takes up the rest of this buffer:::if->return->len->available->unusedBits->if->throw->new->IOException->bits->new->byteArr->length->System->arraycopy->bitArray->new->BitArray->return
DerInputBuffer#getUTCTime(int):::Returns the UTC Time value that takes up the specified number of bytes in this buffer.:::if->available->throw->new->IOException->if->throw->new->IOException->return->getTime
DerInputBuffer#getGeneralizedTime(int):::Returns the Generalized Time value that takes up the specified number of bytes in this buffer.:::if->available->throw->new->IOException->if->throw->new->IOException->return->getTime
DerInputStream#subStream(int, boolean):::Creates a new DER input stream from part of this input stream.:::newbuf->buffer->dup->newbuf->truncate->if->buffer->skip->return->new->DerInputStream
DerInputStream#toByteArray():::Return what has been written to this DerInputStream as a byte array:::return->buffer->toByteArray
DerInputStream#getInteger():::Get an integer from the input stream as an integer.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getInteger
DerInputStream#getBigInteger():::Get a integer from the input stream as a BigInteger object.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getBigInteger
DerInputStream#getPositiveBigInteger():::Returns an ASN.1 INTEGER value as a positive BigInteger:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getBigInteger
DerInputStream#getEnumerated():::Get an enumerated from the input stream.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getInteger
DerInputStream#getBitString():::Get a bit string from the input stream:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getBitString
DerInputStream#getUnalignedBitString():::Get a bit string from the input stream:::if->buffer->read->throw->new->IOException->length->getDefiniteLength->if->return->new->BitArray->excessBits->buffer->read->if->throw->new->IOException->validBits->if->throw->new->IOException->repn->new->byteArr->if->buffer->read->throw->new->IOException->return->new->BitArray
DerInputStream#getOctetString():::Returns an ASN.1 OCTET STRING from the input stream.:::if->buffer->read->throw->new->IOException->length->getDefiniteLength->retval->new->byteArr->if->buffer->read->throw->new->IOException->return
DerInputStream#getBytes(byte[]):::Returns the asked number of bytes from the input stream.:::if->buffer->read->throw->new->IOException
DerInputStream#getNull():::Reads an encoded null value from the input stream.:::if->buffer->read->buffer->read->throw->new->IOException
DerInputStream#getOID():::Reads an X.200 style Object Identifier from the stream.:::return->new->ObjectIdentifier
DerInputStream#getSequence(int):::Return a sequence of encoded entities:::buffer->read->if->throw->new->IOException->return->readVector
DerInputStream#getSet(int):::Return a set of encoded entities:::buffer->read->if->throw->new->IOException->return->readVector
DerInputStream#getSet(int, boolean):::Return a set of encoded entities:::buffer->read->if->if->throw->new->IOException->return->readVector
DerInputStream#getDerValue():::Get a single DER-encoded value from the input stream:::return->new->DerValue
DerInputStream#getUTF8String():::Read a string that was encoded as a UTF8String DER value.:::return->readString
DerInputStream#getPrintableString():::Read a string that was encoded as a PrintableString DER value.:::return->readString
DerInputStream#getT61String():::Read a string that was encoded as a T61String DER value.:::return->readString
DerInputStream#getIA5String():::Read a string that was encoded as a IA5tring DER value.:::return->readString
DerInputStream#getBMPString():::Read a string that was encoded as a BMPString DER value.:::return->readString
DerInputStream#getGeneralString():::Read a string that was encoded as a GeneralString DER value.:::return->readString
DerInputStream#getUTCTime():::Get a UTC encoded time value from the input stream.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getUTCTime
DerInputStream#getGeneralizedTime():::Get a Generalized encoded time value from the input stream.:::if->buffer->read->throw->new->IOException->return->buffer->getDefiniteLength->getGeneralizedTime
DerInputStream#mark(int):::Mark the current position in the buffer, so that a later call to reset will return here.:::buffer->mark
DerInputStream#reset():::Return to the position of the last mark call:::buffer->reset
DerInputStream#available():::Returns the number of bytes available for reading:::return->buffer->available
DerOutputStream#write(byte, byte[]):::Writes tagged, pre-marshaled data:::write->putLength->write
DerOutputStream#write(byte, DerOutputStream):::Writes tagged data using buffer-to-buffer copy:::write->putLength->write
DerOutputStream#writeImplicit(byte, DerOutputStream):::Writes implicitly tagged data using buffer-to-buffer copy:::write->write
DerOutputStream#putDerValue(DerValue):::Marshals pre-encoded DER value onto the output stream.:::val->encode
DerOutputStream#putBoolean(boolean):::Marshals a DER boolean on the output stream.:::write->putLength->if->write->else->write
DerOutputStream#putEnumerated(int):::Marshals a DER enumerated on the output stream.:::write->putIntegerContents
DerOutputStream#putInteger(BigInteger):::Marshals a DER integer on the output stream.:::write->buf->i->toByteArray->putLength->write
DerOutputStream#putInteger(Integer):::Marshals a DER integer on the output stream.:::i->intValue->putInteger
DerOutputStream#putInteger(int):::Marshals a DER integer on the output stream.:::write->putIntegerContents
DerOutputStream#putBitString(byte[]):::Marshals a DER bit string on the output stream:::write->putLength->write->write
DerOutputStream#putUnalignedBitString(BitArray):::Marshals a DER bit string on the output stream:::bits->ba->toByteArray->write->putLength->ba->length->write->write
DerOutputStream#putTruncatedUnalignedBitString(BitArray):::Marshals a truncated DER bit string on the output stream:::ba->truncate->putUnalignedBitString
DerOutputStream#putOctetString(byte[]):::DER-encodes an ASN.1 OCTET STRING value on the output stream.:::write
DerOutputStream#putNull():::Marshals a DER "null" value on the output stream:::write->putLength
DerOutputStream#putOID(ObjectIdentifier):::Marshals an object identifier (OID) on the output stream:::oid->encode
DerOutputStream#putSequence(DerValue[]):::Marshals a sequence on the output stream:::bytes->new->DerOutputStream->i->for->write
DerOutputStream#putSet(DerValue[]):::Marshals the contents of a set on the output stream without ordering the elements:::bytes->new->DerOutputStream->i->for->write
DerOutputStream#putOrderedSetOf(byte, DerEncoder[]):::Marshals the contents of a set on the output stream:::putOrderedSet
DerOutputStream#putOrderedSet(byte, DerEncoder[]):::Marshals the contents of a set on the output stream:::putOrderedSet
DerOutputStream#putUTF8String(String):::Marshals a string as a DER encoded UTF8String.:::writeString
DerOutputStream#putPrintableString(String):::Marshals a string as a DER encoded PrintableString.:::writeString
DerOutputStream#putT61String(String):::Marshals a string as a DER encoded T61String.:::writeString
DerOutputStream#putIA5String(String):::Marshals a string as a DER encoded IA5String.:::writeString
DerOutputStream#putBMPString(String):::Marshals a string as a DER encoded BMPString.:::writeString
DerOutputStream#putGeneralString(String):::Marshals a string as a DER encoded GeneralString.:::writeString
DerOutputStream#putUTCTime(Date):::Marshals a DER UTC time/date value:::putTime
DerOutputStream#putGeneralizedTime(Date):::Marshals a DER Generalized Time/date value:::putTime
DerOutputStream#putLength(int):::Put the encoding of the length in the stream.:::if->write->else->if->write->write->else->if->write->write->write->else->if->write->write->write->write->else->write->write->write->write->write
DerOutputStream#putTag(byte, boolean, byte):::Put the tag of the attribute in the stream.:::tag->if->write
DerOutputStream#derEncode(OutputStream)::: Write the current contents of this DerOutputStream  to an OutputStream.:::out->toByteArray->write
DerValue#isUniversal():::Returns true if the tag class is UNIVERSAL.:::return
DerValue#isApplication():::Returns true if the tag class is APPLICATION.:::return
DerValue#isContextSpecific():::Returns true iff the CONTEXT SPECIFIC bit is set in the type tag:::return
DerValue#isContextSpecific(byte):::Returns true iff the CONTEXT SPECIFIC TAG matches the passed tag.:::if->isContextSpecific->return->return
DerValue#isConstructed():::Returns true iff the CONSTRUCTED bit is set in the type tag.:::return
DerValue#isConstructed(byte):::Returns true iff the CONSTRUCTED TAG matches the passed tag.:::if->isConstructed->return->return
DerValue#encode(DerOutputStream):::Encode an ASN1/DER encoded datum onto a DER output stream.:::out->write->out->putLength->if->value->new->byteArr->synchronized->buffer->reset->if->buffer->read->throw->new->IOException->out->write
DerValue#getBoolean():::Returns an ASN.1 BOOLEAN:::if->throw->new->IOException->if->throw->new->IOException->if->buffer->read->return->return
DerValue#getOID():::Returns an ASN.1 OBJECT IDENTIFIER.:::if->throw->new->IOException->return->new->ObjectIdentifier
DerValue#getOctetString():::Returns an ASN.1 OCTET STRING:::if->isConstructed->throw->new->IOException->if->return->new->byteArr->arrayInput->if->arrayInput->available->throw->new->IOException->bytes->new->byteArr->arrayInput->read->if->isConstructed->in->new->DerInputStream->while->in->available->in->getOctetString->append->return
DerValue#getInteger():::Returns an ASN.1 INTEGER value as an integer.:::if->throw->new->IOException->return->buffer->data->available->getInteger
DerValue#getBigInteger():::Returns an ASN.1 INTEGER value as a BigInteger.:::if->throw->new->IOException->return->buffer->data->available->getBigInteger
DerValue#getPositiveBigInteger():::Returns an ASN.1 INTEGER value as a positive BigInteger:::if->throw->new->IOException->return->buffer->data->available->getBigInteger
DerValue#getEnumerated():::Returns an ASN.1 ENUMERATED value.:::if->throw->new->IOException->return->buffer->data->available->getInteger
DerValue#getBitString():::Returns an ASN.1 BIT STRING value:::if->throw->new->IOException->return->buffer->getBitString
DerValue#getUnalignedBitString():::Returns an ASN.1 BIT STRING value that need not be byte-aligned.:::if->throw->new->IOException->return->buffer->getUnalignedBitString
DerValue#getBitString(boolean):::Returns an ASN.1 BIT STRING value, with the tag assumed implicit based on the parameter:::if->if->throw->new->IOException->return->buffer->getBitString
DerValue#getUnalignedBitString(boolean):::Returns an ASN.1 BIT STRING value, with the tag assumed implicit based on the parameter:::if->if->throw->new->IOException->return->buffer->getUnalignedBitString
DerValue#getDataBytes():::Helper routine to return all the bytes contained in the DerInputStream associated with this object.:::retVal->new->byteArr->synchronized->data->reset->data->getBytes->return
DerValue#getPrintableString():::Returns an ASN.1 STRING value:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getT61String():::Returns an ASN.1 T61 (Teletype) STRING value:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getIA5String():::Returns an ASN.1 IA5 (ASCII) STRING value:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getBMPString():::Returns the ASN.1 BMP (Unicode) STRING value as a Java string.:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getUTF8String():::Returns the ASN.1 UTF-8 STRING value as a Java String.:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getGeneralString():::Returns the ASN.1 GENERAL STRING value as a Java String.:::if->throw->new->IOException->return->getDataBytes->new->String
DerValue#getUTCTime():::Returns a Date if the DerValue is UtcTime.:::if->throw->new->IOException->return->buffer->data->available->getUTCTime
DerValue#getGeneralizedTime():::Returns a Date if the DerValue is GeneralizedTime.:::if->throw->new->IOException->return->buffer->data->available->getGeneralizedTime
DerValue#equals(Object):::Bitwise equality comparison:::if->return->if->return->other->if->return->if->return->return->System->identityHashCode->System->identityHashCode->doEquals->doEquals
DerValue#toString():::Returns a printable representation of the value.:::try->str->getAsString->if->return->if->return->if->return->getOID->else->return->catch->throw->new->IllegalArgumentException->finally
DerValue#toByteArray():::Returns a DER-encoded value, such that if it's passed to the DerValue constructor, a value equivalent to "this" is returned.:::out->new->DerOutputStream->encode->data->reset->return->out->toByteArray
DerValue#toDerInputStream():::For "set" and "sequence" types, this function may be used to return a DER stream of the members of the set or sequence:::if->return->new->DerInputStream->throw->new->IOException
DerValue#length():::Get the length of the encoded value.:::return
DerValue#isPrintableStringChar(char):::Determine if a character is one of the permissible characters for PrintableString: A-Z, a-z, 0-9, space, apostrophe (39), left and right parentheses, plus sign, comma, hyphen, period, slash, colon, equals sign, and question mark:::if->return->else->switch->return->return
DerValue#createTag(byte, boolean, byte):::Create the tag of the attribute.:::tag->if->return
DerValue#resetTag(byte):::Set the tag of the attribute:::
DerValue#hashCode():::Returns a hashcode for this DerValue.:::return->toString->hashCode
DomainName#registeredDomain(String):::Returns the registered domain of the specified domain.:::match->getMatch->return->match->registeredDomain
ECKeySizeParameterSpec#getKeySize():::Returns the key size of this spec.:::return
HexDumpEncoder#readFully(InputStream, byte[]):::This method works around the bizarre semantics of BufferedInputStream's read method.:::for->i->return
HexDumpEncoder#encode(InputStream, OutputStream):::Encode bytes from the input stream, and write them as text characters to the output stream:::j->numBytes->tmpbuffer->bytesPerLine->new->byteArr->encodeBufferPrefix->while->readFully->if->break->encodeLinePrefix->for->bytesPerAtom->if->bytesPerLine->break->else->encodeLineSuffix
HexDumpEncoder#encode(byte[]):::A 'streamless' version of encode that simply takes a buffer of bytes and returns a string containing the encoded buffer.:::outStream->new->ByteArrayOutputStream->inStream->new->ByteArrayInputStream->retVal->try->encode->outStream->toString->catch->throw->new->Error->finally->return
HexDumpEncoder#encode(ByteBuffer):::A 'streamless' version of encode that simply takes a ByteBuffer and returns a string containing the encoded buffer:::buf->getBytes->return->encode
HexDumpEncoder#encodeBuffer(InputStream, OutputStream):::Encode bytes from the input stream, and write them as text characters to the output stream:::j->numBytes->tmpbuffer->bytesPerLine->new->byteArr->encodeBufferPrefix->while->readFully->if->break->encodeLinePrefix->for->bytesPerAtom->encodeLineSuffix->if->bytesPerLine->break
HexDumpEncoder#encodeBuffer(byte[], OutputStream):::Encode the buffer in aBuffer and write the encoded result to the OutputStream aStream.:::inStream->new->ByteArrayInputStream->encodeBuffer
HexDumpEncoder#encodeBuffer(byte[]):::A 'streamless' version of encode that simply takes a buffer of bytes and returns a string containing the encoded buffer.:::outStream->new->ByteArrayOutputStream->inStream->new->ByteArrayInputStream->try->encodeBuffer->catch->throw->new->Error->finally->return->outStream->toString
HexDumpEncoder#encodeBuffer(ByteBuffer, OutputStream):::Encode the aBuffer ByteBuffer and write the encoded result to the OutputStream aStream:::buf->getBytes->encodeBuffer
HostnameChecker#getInstance(byte):::Get a HostnameChecker instance:::if->return->else->if->return->throw->new->IllegalArgumentException
HostnameChecker#match(String, X509Certificate, boolean):::Perform the check.:::if->isIpAddress->matchIP->else->matchDNS
HostnameChecker#getSubjectX500Name(X509Certificate):::Return the subject of a certificate as X500Name, by reparsing if necessary:::try->subjectDN->cert->getSubjectDN->if->return->else->subjectX500->cert->getSubjectX500Principal->return->subjectX500->getEncoded->new->X500Name->catch->throw->new->CertificateParsingException->initCause->finally
IOUtils#readExactlyNBytes(InputStream, int):::Read exactly length of bytes from in:::if->throw->new->IOException->data->is->readNBytes->if->throw->new->EOFException->return
KeyStoreDelegator#engineProbe(InputStream):::Probe the first few bytes of the keystore data stream for a valid keystore encoding:::result->try->tmp->primaryKeyStore->newInstance->keystore->engineProbe->catch->throw->new->IOException->finally->if->return
KeyUtil#getKeySize(Key):::Returns the key size of the given key object in bits.:::size->if->try->ruler->ruler->length->catch->finally->if->return->if->sk->format->sk->getFormat->if->equals->sk->getEncoded->sk->getEncoded->else->if->pubk->pubk->getModulus->bitLength->else->if->pubk->pubk->getParams->getOrder->bitLength->else->if->pubk->params->pubk->getParams->params->getP->bitLength->else->if->pubk->pubk->getParams->getP->bitLength->return
KeyUtil#getKeySize(AlgorithmParameters):::Returns the key size of the given cryptographic parameters in bits.:::algorithm->parameters->getAlgorithm->switch->try->ps->parameters->getParameterSpec->if->return->ps->getKeySize->catch->finally->try->ps->parameters->getParameterSpec->if->return->ps->getOrder->bitLength->catch->finally->break->try->ps->parameters->getParameterSpec->if->return->ps->getP->bitLength->catch->finally->break->return
KeyUtil#validate(Key):::Returns whether the key is valid or not:::if->throw->new->NullPointerException->if->validateDHPublicKey
KeyUtil#validate(KeySpec):::Returns whether the key spec is valid or not:::if->throw->new->NullPointerException->if->validateDHPublicKey
KeyUtil#isOracleJCEProvider(String):::Returns whether the specified provider is Oracle provider or not.:::return->providerName->equals->providerName->equals->providerName->equals->providerName->startsWith
KeyUtil#checkTlsPreMasterSecretKey(int, int, SecureRandom, byte[], boolean):::Check the format of TLS PreMasterSecret:::if->JCAUtil->getSecureRandom->replacer->new->byteArr->random->nextBytes->if->if->return->encodedVersion->if->if->return->return
KeyUtil#trimZeroes(byte[]):::Trim leading (most significant) zeroes from the result.:::i->while->if->return->t->new->byteArr->System->arraycopy->return
Length#length():::Gets the length of this object  Note that if a class of java.security.Key implements this interfaces, the length should be measured in bits.:::
LocalizedMessage#formatLocalized(Object...):::Return a localized string corresponding to the key stored in this object, formatted with the provided arguments:::return->getLocalized
LocalizedMessage#formatNonlocalized(Object...):::Return a non-localized string corresponding to the key stored in this object, formatted with the provided arguments:::return->getNonlocalized
LocalizedMessage#getNonlocalized(String, Object...):::Return a non-localized string corresponding to the provided key, and formatted with the provided arguments:::value->RESOURCES->getString->if->return->sb->new->StringBuilder->nextBraceIndex->while->value->indexOf->firstPart->value->substring->sb->append->value->substring->value->indexOf->if->throw->new->RuntimeException->indexStr->value->substring->try->index->Integer->parseInt->sb->append->catch->throw->new->RuntimeException->finally->value->substring->sb->append->return->sb->toString
LocalizedMessage#getLocalized(String, Object...):::Return a localized string corresponding to the provided key, and formatted with the provided arguments:::value->ResourcesMgr->getString->if->return->form->new->java.text.MessageFormat->return->form->format
ManifestEntryVerifier#setEntry(String, JarEntry):::Find the hashes in the manifest for this entry, save them, and set the MessageDigest objects to calculate the hashes on the fly:::digests->clear->manifestHashes->clear->if->return->attr->man->getAttributes->if->man->getAttributes->if->man->getAttributes->if->return->foreach->attr->entrySet->key->se->getKey->toString->if->key->toUpperCase->endsWith->algorithm->key->key->length->substring->digest->createdDigests->get->if->try->MessageDigest->getInstance->createdDigests->put->catch->finally->if->digest->reset->digests->add->manifestHashes->Base64->getMimeDecoder->se->getValue->decode->add
ManifestEntryVerifier#update(byte):::update the digests for the digests we are interested in:::if->return->for->i->digests->size
ManifestEntryVerifier#update(byte[], int, int):::update the digests for the digests we are interested in:::if->return->for->i->digests->size
ManifestEntryVerifier#getEntry():::get the JarEntry for this object:::return
ManifestEntryVerifier#verify(Hashtable, Hashtable):::go through all the digests, calculating the final digest and comparing it to the one in the manifest:::if->return->if->digests->isEmpty->throw->new->SecurityException->if->return->for->i->digests->size->sigFileSigners->remove->if->verifiedSigners->put->return
MessageDigestSpi2#engineUpdate(SecretKey):::Updates the digest using the specified key:::
ObjectIdentifier#newInternal(int[]):::This method is kept for compatibility reasons:::try->return->new->ObjectIdentifier->catch->throw->new->RuntimeException->finally
ObjectIdentifier#equals(Object):::Compares this identifier with another, for equality.:::if->return->if->return->other->return->Arrays->equals
ObjectIdentifier#toString():::Returns a string form of the object ID:::s->if->length->sb->new->StringBuilder->fromPos->for->i->sb->toString->return
Password#readPassword(InputStream):::Reads user password from given input stream.:::return->readPassword
Password#readPassword(InputStream, boolean):::Reads user password from given input stream.:::consoleEntered->consoleBytes->try->con->if->System->console->con->readPassword->if->return->convertToBytes->new->ByteArrayInputStream->lineBuffer->buf->i->new->charArr->room->offset->c->done->while->switch->in->read->break->c2->in->read->if->if->new->PushbackInputStream->unread->else->break->if->new->charArr->System->arraycopy->Arrays->fill->break->if->return->ret->new->charArr->System->arraycopy->Arrays->fill->return->catch->finally->if->Arrays->fill->if->Arrays->fill
Pem#decode(String):::Decodes a PEM-encoded block.:::src->input->replaceAll->getBytes->try->return->Base64->getDecoder->decode->catch->throw->new->IOException->finally
PolicyUtil#getKeyStore(URL, String, String, String, String, Debug):::this is intended for use by the policy parser to instantiate a KeyStore from the information in the GUI/policy file:::if->throw->new->IllegalArgumentException->keyStorePassword->try->ks->if->KeyStore->getDefaultType->if->P11KEYSTORE->equalsIgnoreCase->NONE->equals->throw->new->IllegalArgumentException->if->KeyStore->getInstance->else->KeyStore->getInstance->if->passURL->try->new->URL->catch->if->throw->new->URL->finally->if->debug->println->in->try->passURL->openStream->Password->readPassword->catch->finally->if->in->close->if->NONE->equals->ks->load->return->else->keyStoreUrl->try->new->URL->catch->if->throw->new->URL->finally->if->debug->println->inStream->try->getInputStream->new->BufferedInputStream->ks->load->catch->finally->inStream->close->return->catch->finally->if->Arrays->fill
RegisteredDomain#name():::Returns the name of the registered domain.:::
RegisteredDomain#type():::Returns the type of the registered domain.:::
RegisteredDomain#publicSuffix():::Returns the public suffix of the registered domain.:::
RegisteredDomain#from(String):::Returns an Optional<RegisteredDomain> representing the registered part of the specified domain.:::return->Optional->DomainName->registeredDomain->ofNullable
Resources#getContents():::Returns the contents of this ResourceBundle.:::return
Resources_ja#getContents():::Returns the contents of this ResourceBundle.:::return
Resources_zh_CN#getContents():::Returns the contents of this ResourceBundle.:::return
SecurityProperties#privilegedGetOverridable(String):::Returns the value of the security property propName, which can be overridden by a system property of the same name:::if->System->getSecurityManager->return->getOverridableProperty->else->return->AccessController->getOverridableProperty->doPrivileged
SecurityProperties#includedInExceptions(String):::Returns true in case the system or security property "jdk.includeInExceptions" contains the category refName:::val->privilegedGetOverridable->if->return->tokens->val->split->foreach->token->trim->if->token->equalsIgnoreCase->return->return
SignatureFileVerifier#needSignatureFileBytes():::returns true if we need the .SF file:::return
SignatureFileVerifier#needSignatureFile(String):::returns true if we need this .SF file.:::return->equalsIgnoreCase
SignatureFileVerifier#setSignatureFile(byte[]):::used to set the raw bytes of the .SF file when it is external to the signature block file.:::
SignatureFileVerifier#isBlockOrSF(String):::Utility method used by JarVerifier and JarSigner to determine the signature file names and PKCS7 block files names that are supported:::return->s->endsWith->s->endsWith->s->endsWith->s->endsWith
SignatureFileVerifier#isSigningRelated(String):::Yet another utility method used by JarVerifier and JarSigner to determine what files are signature related, which includes the MANIFEST, SF files, known signature block files, and other unknown signature related files (those starting with SIG- with an optional [A-Z0-9]{1,3} extension right inside META-INF).:::name->toUpperCase->if->name->startsWith->return->name->substring->if->name->indexOf->return->if->isBlockOrSF->name->equals->return->else->if->name->startsWith->extIndex->name->lastIndexOf->if->ext->name->substring->if->ext->length->ext->length->return->for->index->ext->length->return->return
SignatureFileVerifier#process(Hashtable, List):::process the signature block file:::obj->try->Providers->startJarVerification->processImpl->catch->finally->Providers->stopJarVerification
SignatureFileVerifier#permittedCheck(String, String):::Check if algorithm is permitted using the permittedAlgs Map:::permitted->permittedAlgs->get->if->try->new->ConstraintsParameters->permits->catch->permittedAlgs->put->permittedAlgs->key->toUpperCase->put->if->if->e->getMessage->debug->e->getMessage->println->else->debug->println->e->printStackTrace->return->finally->permittedAlgs->put->return->return->permitted->booleanValue
SignatureFileVerifier#getWeakAlgorithms(String):::With a given header (*-DIGEST*), return a string that lists all the algorithms associated with the header:::w->try->foreach->permittedAlgs->keySet->if->key->endsWith->key->key->length->header->length->substring->catch->e->getMessage->finally->if->w->length->return->return
SignatureFileVerifier#matches(CodeSigner[], CodeSigner[], CodeSigner[]):::returns true if signer contains exactly the same code signers as oldSigner and newSigner, false otherwise:::if->return->match->if->isSubSet->return->if->isSubSet->return->for->i->return
UntrustedCertificates#isUntrusted(X509Certificate):::Checks if a certificate is untrusted.:::if->return->key->if->getFingerprint->else->try->cert->getEncoded->new->X509CertImpl->getFingerprint->catch->return->finally->return->props->containsKey

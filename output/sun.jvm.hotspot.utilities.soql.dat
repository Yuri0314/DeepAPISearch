Callable#call(Object[]):::Call the underlying function passing the given arguments and return the result.:::
DefaultScriptObject#getIds()::: default script object get ids:::return
DefaultScriptObject#get(String)::: default script object get:::return
DefaultScriptObject#get(int)::: default script object get:::return
DefaultScriptObject#put(String, Object)::: default script object put:::
DefaultScriptObject#put(int, Object)::: default script object put:::
DefaultScriptObject#has(String)::: default script object has:::return
DefaultScriptObject#has(int)::: default script object has:::return
DefaultScriptObject#delete(String)::: default script object delete:::return
DefaultScriptObject#delete(int)::: default script object delete:::return
InvocableCallable#call(Object[])::: invocable callable call:::try->if->return->invocable->invokeFunction->else->return->invocable->invokeMethod->catch->throw->new->ScriptException->finally
JSJavaArray#getArray()::: java array get array:::return->getOop
JSJavaArray#getJSJavaClass()::: java array get java class:::return->type->getJSJavaClass
JSJavaArray#get(String)::: java array get:::if->name->equals->return->getArray->getLength->new->Integer->else->return->super->get
JSJavaArray#get(int)::: java array get:::return->isInRange->type->getArray->getFieldValue->super->get
JSJavaArray#getIds()::: java array get ids:::superFields->super->getIds->len->getArray->getLength->res->new->ObjectArr->for->i->System->arraycopy->return
JSJavaArray#has(String)::: java array has:::if->name->equals->return->else->return->super->has
JSJavaArray#has(int)::: java array has:::if->isInRange->return->else->return->super->has
JSJavaArray#put(String, Object)::: java array put:::if->name->equals->super->put
JSJavaArray#put(int, Object)::: java array put:::if->isInRange->super->put
JSJavaArray#isInRange(int)::: java array is in range:::return->getArray->getLength
JSJavaArrayKlass#getArrayKlass()::: java array klass get array klass:::return->getKlass
JSJavaArrayKlass#getMetaClassFieldValue(String)::: java array klass get meta class field value:::if->name->equals->return->getArrayKlass->getDimension->new->Long->else->return->super->getMetaClassFieldValue
JSJavaArrayKlass#hasMetaClassField(String)::: java array klass has meta class field:::if->name->equals->return->else->return->super->hasMetaClassField
JSJavaArrayKlass#isArray()::: java array klass is array:::return
JSJavaArrayKlass#getMetaClassFieldNames()::: java array klass get meta class field names:::superFields->super->getMetaClassFieldNames->res->new->StringArr->System->arraycopy->return
JSJavaArrayKlass#getFieldValue(int, Array)::: java array klass get field value:::
JSJavaClass#getJSJavaKlass()::: java class get java klass:::return
JSJavaClass#toString()::: java class to string:::buf->new->StringBuffer->buf->append->buf->getOop->getHandle->append->buf->append->buf->jklass->getName->append->buf->append->return->buf->toString
JSJavaClass#getFieldValue(String)::: java class get field value:::return->jklass->getMetaClassFieldValue
JSJavaClass#getFieldNames()::: java class get field names:::return->jklass->getMetaClassFieldNames
JSJavaClass#hasField(String)::: java class has field:::return->jklass->hasMetaClassField
JSJavaFactory#newJSJavaObject(Oop)::: java factory new java object:::
JSJavaFactory#newJSJavaKlass(Klass)::: java factory new java klass:::
JSJavaFactory#newJSJavaField(Field)::: java factory new java field:::
JSJavaFactory#newJSJavaThread(JavaThread)::: java factory new java thread:::
JSJavaFactory#newJSJavaFrame(JavaVFrame)::: java factory new java frame:::
JSJavaFactory#newJSJavaMethod(Method)::: java factory new java method:::
JSJavaFactory#newJSList(List)::: java factory new list:::
JSJavaFactory#newJSMap(Map)::: java factory new map:::
JSJavaFactory#newJSJavaHeap()::: java factory new java heap:::
JSJavaFactory#newJSJavaVM()::: java factory new java m:::
JSJavaFactory#newJSJavaWrapper(Object)::: java factory new java wrapper:::
JSJavaFactoryImpl#newJSJavaObject(Oop)::: java factory impl new java object:::if->return->sref->om->get->res->sref->get->if->if->new->JSJavaTypeArray->else->if->new->JSJavaObjArray->else->if->newJavaInstance->if->om->new->SoftReference->put->return
JSJavaFactoryImpl#newJSJavaKlass(Klass)::: java factory impl new java klass:::res->if->new->JSJavaInstanceKlass->else->if->new->JSJavaObjArrayKlass->else->if->new->JSJavaTypeArrayKlass->if->om->new->SoftReference->put->return
JSJavaFactoryImpl#newJSJavaMethod(Method)::: java factory impl new java method:::res->new->JSJavaMethod->if->om->new->SoftReference->put->return
JSJavaFactoryImpl#newJSJavaField(Field)::: java factory impl new java field:::if->return->return->new->JSJavaField
JSJavaFactoryImpl#newJSJavaThread(JavaThread)::: java factory impl new java thread:::if->return->return->new->JSJavaThread
JSJavaFactoryImpl#newJSJavaFrame(JavaVFrame)::: java factory impl new java frame:::if->return->return->new->JSJavaFrame
JSJavaFactoryImpl#newJSList(List)::: java factory impl new list:::if->return->return->new->JSList
JSJavaFactoryImpl#newJSMap(Map)::: java factory impl new map:::if->return->return->new->JSMap
JSJavaFactoryImpl#newJSJavaWrapper(Object)::: java factory impl new java wrapper:::if->return->if->return->newJSJavaObject->else->if->return->newJSJavaField->else->if->return->newJSJavaThread->else->if->return->newJSJavaFrame->else->if->return->newJSList->else->if->return->newJSMap->else->return
JSJavaFactoryImpl#newJSJavaHeap()::: java factory impl new java heap:::return->new->JSJavaHeap
JSJavaFactoryImpl#newJSJavaVM()::: java factory impl new java m:::return->new->JSJavaVM
JSJavaFactoryImpl#javaLangString()::: java factory impl java lang string:::if->getSymbol->return
JSJavaFactoryImpl#javaLangThread()::: java factory impl java lang thread:::if->getSymbol->return
JSJavaFactoryImpl#javaLangClass()::: java factory impl java lang class:::if->getSymbol->return
JSJavaFactoryImpl#getSymbol(String)::: java factory impl get symbol:::return->VM->getVM->getSymbolTable->probe
JSJavaFactoryImpl#newJavaInstance(Instance)::: java factory impl new java instance:::className->instance->getKlass->getName->if->Assert->that->res->if->className->javaLangString->equals->new->JSJavaString->else->if->className->javaLangThread->equals->new->JSJavaThread->else->if->className->javaLangClass->equals->reflectedType->java_lang_Class->asKlass->if->jk->newJSJavaKlass->if->return->new->JSJavaClass->else->return->else->kls->instance->getKlass->getSuper->while->kls->getName->if->className->javaLangThread->equals->new->JSJavaThread->break->kls->getSuper->if->new->JSJavaInstance->return
JSJavaField#get(String)::: java field get:::fieldID->getFieldID->switch->return->field->getID->getName->return->field->getSignature->asString->return->getFieldHolder->return->Boolean->field->isPrivate->valueOf->return->Boolean->field->isPublic->valueOf->return->Boolean->field->isProtected->valueOf->return->Boolean->field->isPackagePrivate->valueOf->return->Boolean->field->isStatic->valueOf->return->Boolean->field->isFinal->valueOf->return->Boolean->field->isVolatile->valueOf->return->Boolean->field->isTransient->valueOf->return->Boolean->field->isSynthetic->valueOf->return->super->get
JSJavaField#getIds()::: java field get ids:::fieldNames->fields->keySet->toArray->superFields->super->getIds->res->new->ObjectArr->System->arraycopy->System->arraycopy->return
JSJavaField#has(String)::: java field has:::if->getFieldID->return->else->return->super->has
JSJavaField#put(String, Object)::: java field put:::if->getFieldID->super->put
JSJavaField#equals(Object)::: java field equals:::if->return->other->return->field->equals
JSJavaField#hashCode()::: java field hash code:::return->field->hashCode
JSJavaField#toString()::: java field to string:::buf->new->StringBuffer->buf->append->buf->field->getFieldHolder->getName->asString->replace->append->buf->append->buf->field->getID->getName->append->return->buf->toString
JSJavaField#getFieldHolder()::: java field get field holder:::return->factory->field->getFieldHolder->newJSJavaKlass->getJSJavaClass
JSJavaField#addField(String, int)::: java field add field:::fields->new->Integer->put
JSJavaField#getFieldID(String)::: java field get field d:::res->fields->get->return->res->intValue
JSJavaFrame#get(String)::: java frame get:::fieldID->getFieldID->switch->return->getMethod->return->getBCI->new->Integer->return->getLineNumber->new->Integer->return->getLocals->return->getThisObject->return->getThread->return->super->get
JSJavaFrame#getIds()::: java frame get ids:::fieldNames->fields->keySet->toArray->superFields->super->getIds->res->new->ObjectArr->System->arraycopy->System->arraycopy->return
JSJavaFrame#has(String)::: java frame has:::if->getFieldID->return->else->return->super->has
JSJavaFrame#put(String, Object)::: java frame put:::if->getFieldID->super->put
JSJavaFrame#toString()::: java frame to string:::buf->new->StringBuffer->buf->append->buf->jvf->getMethod->externalNameAndSignature->append->buf->append->buf->getBCI->append->buf->append->buf->getLineNumber->append->buf->append->return->buf->toString
JSJavaFrame#addField(String, int)::: java frame add field:::fields->new->Integer->put
JSJavaFrame#getFieldID(String)::: java frame get field d:::res->fields->get->return->res->intValue
JSJavaFrame#getMethod()::: java frame get method:::return->factory->jvf->getMethod->newJSJavaMethod
JSJavaFrame#getBCI()::: java frame get i:::return->jvf->getBCI
JSJavaFrame#getLineNumber()::: java frame get line number:::bci->jvf->getBCI->if->return->else->lineNum->jvf->getMethod->getLineNumberFromBCI->return
JSJavaFrame#getLocals()::: java frame get locals:::if->map->new->HashMap->factory->newJSMap->values->jvf->getLocals->method->jvf->getMethod->if->method->isNative->method->hasLocalVariableTable->return->localVars->method->getLocalVariableTable->bci->getBCI->visibleVars->new->ArrayList->for->i->handle->heap->VM->getVM->getObjectHeap->for->varItr->visibleVars->iterator->varItr->hasNext->return
JSJavaFrame#getThisObject()::: java frame get this object:::method->jvf->getMethod->if->method->isStatic->return->values->jvf->getLocals->if->handle->values->oopHandleAt->heap->VM->getVM->getObjectHeap->return->factory->heap->newOop->newJSJavaObject->else->return
JSJavaFrame#getThread()::: java frame get thread:::return->factory->jvf->getThread->newJSJavaThread
JSJavaHeap#get(String)::: java heap get:::fieldID->getFieldID->switch->return->getCapacity->new->Long->return->getUsed->new->Long->return->new->MethodCallable->return->new->MethodCallable->return->super->get
JSJavaHeap#getIds()::: java heap get ids:::superIds->super->getIds->tmp->fields->keySet->toArray->res->new->ObjectArr->System->arraycopy->System->arraycopy->return
JSJavaHeap#has(String)::: java heap has:::if->getFieldID->return->else->return->super->has
JSJavaHeap#put(String, Object)::: java heap put:::if->getFieldID->super->put
JSJavaHeap#forEachObject(Object[])::: java heap for each object:::subtypes->kls->func->switch->b->if->booleanValue->k->if->return->if->getKlass->else->if->SystemDictionaryHelper->findInstanceKlass->if->return->f->if->else->return->break->return->finalFunc->visitor->new->DefaultHeapVisitor->heap->VM->getVM->getObjectHeap->if->SystemDictionaryHelper->findInstanceKlass->heap->iterateObjectsOfKlass
JSJavaHeap#forEachClass(Object[])::: java heap for each class:::withLoader->func->switch->b->if->booleanValue->f->if->else->return->break->return->finalFunc->cldg->VM->getVM->getClassLoaderDataGraph->if->cldg->new->ClassLoaderDataGraph.ClassVisitor->classesDo->else->cldg->new->ClassLoaderDataGraph.ClassVisitor->classesDo
JSJavaHeap#toString()::: java heap to string:::buf->new->StringBuffer->buf->append->buf->getCapacity->append->buf->append->buf->getUsed->append->buf->append->return->buf->toString
JSJavaHeap#addField(String, int)::: java heap add field:::fields->new->Integer->put
JSJavaHeap#getFieldID(String)::: java heap get field d:::res->fields->get->return->res->intValue
JSJavaHeap#getCapacity()::: java heap get capacity:::return->VM->getVM->getUniverse->heap->capacity
JSJavaHeap#getUsed()::: java heap get used:::return->VM->getVM->getUniverse->heap->used
JSJavaInstance#getInstance()::: java instance get instance:::return->getOop
JSJavaInstance#getJSJavaClass()::: java instance get java class:::return->type->getJSJavaClass
JSJavaInstance#get(String)::: java instance get:::if->hasField->return->getFieldValue->else->return->super->get
JSJavaInstance#getIds()::: java instance get ids:::fieldNames->getFieldNames->superFields->super->getIds->res->new->ObjectArr->System->arraycopy->System->arraycopy->return
JSJavaInstance#has(String)::: java instance has:::if->hasField->return->else->return->super->has
JSJavaInstance#put(String, Object)::: java instance put:::if->hasField->super->put
JSJavaInstance#getFieldValue(String)::: java instance get field value:::try->return->type->getInstance->getInstanceFieldValue->catch->return->finally
JSJavaInstance#getFieldNames()::: java instance get field names:::return->type->getInstanceFieldNames
JSJavaInstance#hasField(String)::: java instance has field:::return->type->hasInstanceField
JSJavaInstanceKlass#getInstanceKlass()::: java instance klass get instance klass:::return->getKlass
JSJavaInstanceKlass#getMetaClassFieldValue(String)::: java instance klass get meta class field value:::fieldID->getFieldID->ik->getInstanceKlass->switch->sourceFile->ik->getSourceFileName->return->sourceFile->asString->return->getInterfaces->return->factory->ik->getImmediateFields->newJSList->return->factory->ik->getImmediateMethods->newJSList->return->Boolean->getAccessFlags->isPrivate->valueOf->return->Boolean->getAccessFlags->isPublic->valueOf->return->Boolean->getAccessFlags->isProtected->valueOf->acc->getAccessFlags->return->Boolean->acc->isPrivate->acc->isPublic->acc->isProtected->valueOf->return->Boolean->getAccessFlags->isStatic->valueOf->return->Boolean->getAccessFlags->isFinal->valueOf->return->Boolean->getAccessFlags->isAbstract->valueOf->return->Boolean->getAccessFlags->isStrict->valueOf->return->Boolean->getAccessFlags->isSynthetic->valueOf->return->Boolean->ik->isInterface->valueOf->return->factory->ik->getClassLoader->newJSJavaObject->return->getStatics->return->super->getMetaClassFieldValue
JSJavaInstanceKlass#hasMetaClassField(String)::: java instance klass has meta class field:::if->getFieldID->return->else->return->super->hasMetaClassField
JSJavaInstanceKlass#getName()::: java instance klass get name:::return->getInstanceKlass->getName->asString->replace
JSJavaInstanceKlass#isArray()::: java instance klass is array:::return
JSJavaInstanceKlass#getMetaClassFieldNames()::: java instance klass get meta class field names:::superFields->super->getMetaClassFieldNames->k->fields->keySet->res->k->size->new->StringArr->System->arraycopy->i->for->itr->k->iterator->itr->hasNext->return
JSJavaInstanceKlass#getInstanceFieldValue(String, Instance)::: java instance klass get instance field value:::fld->findInstanceField->if->return->getFieldValue->else->throw->getInstanceKlass->getName->asString->replace->new->NoSuchFieldException
JSJavaInstanceKlass#getStaticFieldValue(String)::: java instance klass get static field value:::fld->findStaticField->if->return->getInstanceKlass->getFieldValue->else->throw->getInstanceKlass->getName->asString->replace->new->NoSuchFieldException
JSJavaInstanceKlass#getInstanceFieldNames()::: java instance klass get instance field names:::if->current->getInstanceKlass->while->tmp->current->getImmediateFields->for->itr->tmp->iterator->itr->hasNext->current->getSuper->s->instanceFields->keySet->s->size->new->StringArr->i->for->itr->s->iterator->itr->hasNext->return
JSJavaInstanceKlass#hasInstanceField(String)::: java instance klass has instance field:::fld->findInstanceField->return
JSJavaInstanceKlass#getStaticFieldNames()::: java instance klass get static field names:::if->current->getInstanceKlass->tmp->current->getImmediateFields->for->itr->tmp->iterator->itr->hasNext->s->staticFields->keySet->s->size->new->StringArr->i->for->itr->s->iterator->itr->hasNext->return
JSJavaInstanceKlass#hasStaticField(String)::: java instance klass has static field:::fld->findStaticField->return
JSJavaInstanceKlass#addField(String, int)::: java instance klass add field:::fields->new->Integer->put
JSJavaInstanceKlass#getFieldID(String)::: java instance klass get field d:::res->fields->get->return->res->intValue
JSJavaInstanceKlass#getAccessFlags()::: java instance klass get access flags:::if->getInstanceKlass->computeModifierFlags->new->AccessFlags->return
JSJavaInstanceKlass#getFieldValue(Field, String, Oop)::: java instance klass get field value:::fd->fld->getFieldType->if->fd->isObject->fd->isArray->return->factory->getValue->newJSJavaObject->else->if->fd->isByte->return->getValue->new->Byte->else->if->fd->isChar->return->new->charArr->getValue->new->String->else->if->fd->isDouble->return->getValue->new->Double->else->if->fd->isFloat->return->getValue->new->Float->else->if->fd->isInt->return->getValue->new->Integer->else->if->fd->isLong->return->getValue->new->Long->else->if->fd->isShort->return->getValue->new->Short->else->if->fd->isBoolean->return->Boolean->getValue->valueOf->else->if->Assert->that->return
JSJavaInstanceKlass#getFieldValue(Field, String, InstanceKlass)::: java instance klass get field value:::fd->fld->getFieldType->if->fd->isObject->fd->isArray->return->factory->getValue->newJSJavaObject->else->if->fd->isByte->return->getValue->new->Byte->else->if->fd->isChar->return->new->charArr->getValue->new->String->else->if->fd->isDouble->return->getValue->new->Double->else->if->fd->isFloat->return->getValue->new->Float->else->if->fd->isInt->return->getValue->new->Integer->else->if->fd->isLong->return->getValue->new->Long->else->if->fd->isShort->return->getValue->new->Short->else->if->fd->isBoolean->return->Boolean->getValue->valueOf->else->if->Assert->that->return
JSJavaInstanceKlass#findInstanceField(String)::: java instance klass find instance field:::fld->instanceFields->get->if->return->else->current->getInstanceKlass->while->tmp->current->getImmediateFields->for->itr->tmp->iterator->itr->hasNext->current->getSuper->return
JSJavaInstanceKlass#findStaticField(String)::: java instance klass find static field:::fld->staticFields->get->if->return->else->current->getInstanceKlass->tmp->current->getImmediateFields->for->itr->tmp->iterator->itr->hasNext->return
JSJavaInstanceKlass#getInterfaces()::: java instance klass get interfaces:::ik->getInstanceKlass->intfs->ik->getDirectImplementedInterfaces->res->new->ArrayList->for->itr->intfs->iterator->itr->hasNext->return->factory->newJSList
JSJavaInstanceKlass#getStatics()::: java instance klass get statics:::names->getStaticFieldNames->map->new->HashMap->for->i->return->factory->newJSMap
JSJavaKlass#getKlass()::: java klass get klass:::return
JSJavaKlass#getJSJavaClass()::: java klass get java class:::return->factory->getKlass->getJavaMirror->newJSJavaObject
JSJavaKlass#getMetaClassFieldValue(String)::: java klass get meta class field value:::fieldID->getFieldID->switch->jk->factory->getKlass->getSuper->newJSJavaKlass->return->jk->getJSJavaClass->return->getName->return->Boolean->isArray->valueOf->return
JSJavaKlass#hasMetaClassField(String)::: java klass has meta class field:::return->getFieldID
JSJavaKlass#getMetaClassFieldNames()::: java klass get meta class field names:::res->return
JSJavaKlass#getName()::: java klass get name:::
JSJavaKlass#isArray()::: java klass is array:::
JSJavaKlass#addField(String, int)::: java klass add field:::fields->new->Integer->put
JSJavaKlass#getFieldID(String)::: java klass get field d:::res->fields->get->return->res->intValue
JSJavaMethod#getMethod()::: java method get method:::return->getMetadata
JSJavaMethod#get(String)::: java method get:::fieldID->getFieldID->method->getMethod->switch->return->method->getName->asString->return->method->getSignature->asString->return->getMethodHolder->return->Boolean->method->isPrivate->valueOf->return->Boolean->method->isPublic->valueOf->return->Boolean->method->isProtected->valueOf->return->Boolean->method->isPackagePrivate->valueOf->return->Boolean->method->isStatic->valueOf->return->Boolean->method->isFinal->valueOf->return->Boolean->method->isSynchronized->valueOf->return->Boolean->method->isNative->valueOf->return->Boolean->method->isAbstract->valueOf->return->Boolean->method->isStrict->valueOf->return->Boolean->method->isSynthetic->valueOf->return->Boolean->method->isObsolete->valueOf->return->super->get
JSJavaMethod#getIds()::: java method get ids:::fieldNames->fields->keySet->toArray->superFields->super->getIds->res->new->ObjectArr->System->arraycopy->System->arraycopy->return
JSJavaMethod#has(String)::: java method has:::if->getFieldID->return->else->return->super->has
JSJavaMethod#put(String, Object)::: java method put:::if->getFieldID->return->else->super->put
JSJavaMethod#toString()::: java method to string:::buf->new->StringBuffer->buf->append->buf->getMethod->externalNameAndSignature->append->return->buf->toString
JSJavaMethod#getMethodHolder()::: java method get method holder:::k->getMethod->getMethodHolder->return->factory->newJSJavaKlass->getJSJavaClass
JSJavaMethod#addField(String, int)::: java method add field:::fields->new->Integer->put
JSJavaMethod#getFieldID(String)::: java method get field d:::res->fields->get->return->res->intValue
JSJavaObjArray#getObjArray()::: java obj array get obj array:::return->getArray
JSJavaObjArrayKlass#getObjArrayKlass()::: java obj array klass get obj array klass:::return->getArrayKlass
JSJavaObjArrayKlass#getName()::: java obj array klass get name:::botKls->getObjArrayKlass->getBottomKlass->dimension->getObjArrayKlass->getDimension->buf->new->StringBuffer->if->buf->factory->newJSJavaKlass->getName->append->for->i->return->buf->toString
JSJavaObjArrayKlass#getFieldValue(int, Array)::: java obj array klass get field value:::obj->getObjAt->return->factory->newJSJavaObject
JSJavaObject#getOop()::: java object get oop:::return
JSJavaObject#equals(Object)::: java object equals:::if->return->other->return->oop->equals
JSJavaObject#hashCode()::: java object hash code:::return->oop->hashCode
JSJavaObject#toString()::: java object to string:::return->oop->getHandle->toString
JSJavaScriptEngine#startConsole():::Start a read-eval-print loop with this engine.:::start
JSJavaScriptEngine#start():::Initialize the engine so that we can "eval" strings and files later.:::start
JSJavaScriptEngine#defineFunction(Object, Method):::Define a global function that invokes given Method.:::putFunction
JSJavaScriptEngine#call(String, Object[]):::Call the script function of given name passing the given arguments.:::invocable->try->return->invocable->invokeFunction->catch->throw->throw->new->RuntimeException->finally
JSJavaScriptEngine#address(Object[]):::       address function returns address of JSJavaObject as String:::if->return->o->if->return->getOop->getHandle->toString->else->return
JSJavaScriptEngine#classof(Object[]):::       classof function gets type of given JSJavaInstance or JSJavaArray:::if->return->o->if->if->if->return->getJSJavaClass->else->if->return->getJSJavaClass->else->return->else->if->ik->SystemDictionaryHelper->findInstanceKlass->return->getJSJavaFactory->newJSJavaKlass->getJSJavaClass->else->return->else->return
JSJavaScriptEngine#dumpClass(Object[]):::dumpClass function creates a .class file for a given Class object:::if->return->clazz->if->return->ik->if->name->if->name->startsWith->vm->VM->getVM->addr->vm->getDebugger->parseAddress->metadata->Metadata->addr->addOffsetTo->instantiateWrapperFor->if->else->return->else->SystemDictionaryHelper->findInstanceKlass->else->if->jk->getJSJavaKlass->if->getInstanceKlass->else->return->if->return->buf->new->StringBuffer->if->buf->toString->append->else->buf->append->buf->append->buf->ik->getName->asString->replace->append->buf->append->fileName->buf->toString->file->new->File->try->index->fileName->lastIndexOf->dir->fileName->substring->new->File->dir->mkdirs->fos->new->FileOutputStream->cw->new->ClassWriter->cw->write->fos->close->catch->exp->toString->printError->return->finally->return
JSJavaScriptEngine#dumpHeap(Object[]):::dumpHeap function creates a heap dump file:::fileName->if->toString->return->new->JMap->writeHeapHprofBin
JSJavaScriptEngine#help(Object[]):::        help function prints help message for global functions and variables.:::println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println
JSJavaScriptEngine#identityHash(Object[]):::       identityHash function gets identity hash code value of given        JSJavaObject:::if->return->o->if->return->getOop->identityHash->new->Long->else->return
JSJavaScriptEngine#load(Object[]):::Load and execute a set of JavaScript source files:::for->i
JSJavaScriptEngine#mirror(Object[]):::       mirror function creats local copy of the Oop wrapper supplied:::o->res->if->if->oop->getOop->try->getObjectReader->readObject->catch->if->e->getErrorStream->printStackTrace->finally->else->if->metadata->getMetadata->try->if->getObjectReader->readClass->catch->if->e->getErrorStream->printStackTrace->finally->return
JSJavaScriptEngine#owner(Object[]):::       owner function gets owning thread of given JSJavaObjec, if any, else        returns null:::o->if->return->getOwningThread->else->return
JSJavaScriptEngine#object(Object[]):::       object function takes a string address and returns a JSJavaObject:::o->if->vm->VM->getVM->addr->vm->getDebugger->parseAddress->oop->vm->getObjectHeap->addr->addOffsetToAsOopHandle->newOop->return->getJSJavaFactory->newJSJavaObject->else->return
JSJavaScriptEngine#sizeof(Object[]):::       sizeof function returns size of a Java object in bytes:::if->return->o->if->return->getOop->getObjectSize->new->Long->else->return
JSJavaScriptEngine#staticof(Object[]):::       staticof function gets static field of given class:::classname->fieldname->if->return->ik->if->jclass->jk->jclass->getJSJavaKlass->if->getInstanceKlass->else->if->SystemDictionaryHelper->findInstanceKlass->else->return->if->return->factory->getJSJavaFactory->try->return->factory->newJSJavaKlass->getStaticFieldValue->catch->return->finally
JSJavaScriptEngine#read(Object[]):::read function reads a single line of input from standard input:::in->getInputReader->if->return->if->toString->print->print->try->return->in->readLine->catch->exp->printStackTrace->throw->new->RuntimeException->finally
JSJavaScriptEngine#quit(Object[]):::Quit the shell:::quit
JSJavaScriptEngine#writeln(Object[])::: java script engine writeln:::for->i->println
JSJavaScriptEngine#write(Object[])::: java script engine write:::for->i
JSJavaScriptEngine#start(boolean)::: java script engine start:::context->engine->getContext->out->getOutputStream->if->context->new->PrintWriter->setWriter->err->getErrorStream->if->context->new->PrintWriter->setErrorWriter->loadInitFile->loadUserInitFile->fac->getJSJavaFactory->jvm->fac->newJSJavaVM->new->ObjectArr->call->if->processSource
JSJavaScriptEngine#getObjectReader()::: java script engine get object reader:::
JSJavaScriptEngine#getJSJavaFactory()::: java script engine get java factory:::
JSJavaScriptEngine#printPrompt(String)::: java script engine print prompt:::print->flush
JSJavaScriptEngine#loadInitFile()::: java script engine load init file:::is->getResourceAsStream->reader->new->InputStreamReader->new->BufferedReader->evalReader
JSJavaScriptEngine#loadUserInitFile()::: java script engine load user init file:::initFile->getUserInitFileDir->getUserInitFileName->new->File->if->initFile->exists->initFile->isFile->initFile->getAbsolutePath->processSource
JSJavaScriptEngine#getUserInitFileDir()::: java script engine get user init file dir:::return->System->getProperty
JSJavaScriptEngine#getUserInitFileName()::: java script engine get user init file name:::return
JSJavaScriptEngine#getInputReader()::: java script engine get input reader:::if->new->InputStreamReader->new->BufferedReader->return
JSJavaScriptEngine#getOutputStream()::: java script engine get output stream:::return
JSJavaScriptEngine#getErrorStream()::: java script engine get error stream:::return
JSJavaScriptEngine#print(String)::: java script engine print:::getOutputStream->print
JSJavaScriptEngine#println(String)::: java script engine println:::getOutputStream->println
JSJavaScriptEngine#printError(String)::: java script engine print error:::printError
JSJavaScriptEngine#printError(String, Exception)::: java script engine print error:::getErrorStream->println->if->exp->getErrorStream->printStackTrace
JSJavaScriptEngine#isQuitting()::: java script engine is quitting:::return
JSJavaScriptEngine#quit()::: java script engine quit:::
JSJavaScriptEngine#getScriptEngine()::: java script engine get script engine:::return
JSJavaScriptEngine#getOwningThread(JSJavaObject)::: java script engine get owning thread:::oop->jo->getOop->mark->oop->getMark->mon->owner->owningThread->if->mark->hasMonitor->if->mark->hasLocker->mark->locker->getAddress->else->mark->monitor->mon->owner->if->factory->getJSJavaFactory->factory->VM->getVM->getThreads->owningThreadFromMonitor->newJSJavaThread->return
JSJavaScriptEngine#processSource(String):::Evaluate JavaScript source.:::if->in->getInputReader->sourceName->lineno->hitEOF->do->startline->printPrompt->source->read->if->break->result->source->toString->evalString->if->result->toString->printError->if->isQuitting->break->while->else->in->try->new->FileReader->new->BufferedReader->evalReader->catch->println->throw->new->RuntimeException->finally
JSJavaScriptEngine#evalString(String, String, int)::: java script engine eval string:::try->engine->put->return->engine->eval->catch->sexp->toString->printError->exp->toString->printError->finally->return
JSJavaScriptEngine#evalReader(Reader, String)::: java script engine eval reader:::try->engine->put->return->engine->eval->catch->println->sexp->toString->printError->finally->try->in->close->catch->ioe->toString->printError->finally->return
JSJavaString#toString()::: java string to string:::buf->new->StringBuffer->buf->append->buf->getOop->getHandle->append->buf->append->buf->append->buf->getString->append->buf->append->buf->append->return->buf->toString
JSJavaString#getFieldValue(String)::: java string get field value:::if->name->equals->return->getString->else->return->super->getFieldValue
JSJavaString#getFieldNames()::: java string get field names:::fields->super->getFieldNames->res->new->StringArr->System->arraycopy->return
JSJavaString#hasField(String)::: java string has field:::if->name->equals->return->else->return->super->hasField
JSJavaString#getString()::: java string get string:::return->OopUtilities->getOop->stringOopToString
JSJavaThread#toString()::: java thread to string:::name->getName->buf->new->StringBuffer->buf->append->buf->getOop->getHandle->append->buf->append->if->buf->append->else->buf->append->buf->append->return->buf->toString
JSJavaThread#getFieldValue(String)::: java thread get field value:::if->name->equals->return->getName->else->if->name->equals->return->getFrames->else->if->name->equals->return->getOwnedMonitors->else->return->super->getFieldValue
JSJavaThread#getFieldNames()::: java thread get field names:::flds->super->getFieldNames->res->new->StringArr->System->arraycopy->return
JSJavaThread#hasField(String)::: java thread has field:::if->name->equals->name->equals->return->else->return->super->hasField
JSJavaThread#getName()::: java thread get name:::return->OopUtilities->getOop->threadOopGetName
JSJavaThread#getFrames()::: java thread get frames:::if->list->new->ArrayList->if->jvf->jthread->getLastJavaVFrameDbg->while->list->add->jvf->javaSender->factory->newJSList->return
JSJavaThread#getOwnedMonitors()::: java thread get owned monitors:::if->ownedMonitors->new->ArrayList->if->lockedObjects->new->ArrayList->waitingMonitor->jthread->getCurrentWaitingMonitor->waitingObj->if->waitingMonitor->object->pendingMonitor->jthread->getCurrentPendingMonitor->pendingObj->if->pendingMonitor->object->frame->jthread->getLastJavaVFrameDbg->while->frameMonitors->frame->getMonitors->for->miItr->frameMonitors->iterator->miItr->hasNext->frame->javaSender->heap->VM->getVM->getObjectHeap->for->loItr->lockedObjects->iterator->loItr->hasNext->factory->newJSList->return
JSJavaTypeArray#getTypeArray()::: java type array get type array:::return->getArray
JSJavaTypeArrayKlass#getTypeArrayKlass()::: java type array klass get type array klass:::return->getArrayKlass
JSJavaTypeArrayKlass#getName()::: java type array klass get name:::type->getTypeArrayKlass->getElementType->switch->return->return->return->return->return->return->return->return->if->Assert->that->return
JSJavaTypeArrayKlass#getFieldValue(int, Array)::: java type array klass get field value:::typeArr->type->getTypeArrayKlass->getElementType->switch->return->Boolean->typeArr->getBooleanAt->valueOf->return->new->charArr->typeArr->getCharAt->new->String->return->typeArr->getFloatAt->new->Float->return->typeArr->getDoubleAt->new->Double->return->typeArr->getByteAt->new->Byte->return->typeArr->getShortAt->new->Short->return->typeArr->getIntAt->new->Integer->return->typeArr->getLongAt->new->Long->if->Assert->that->return
JSJavaVM#get(String)::: java m get:::fieldID->getFieldID->switch->return->getVMBit->new->Long->return->vm->getVMInternalInfo->return->vm->getCPU->return->getFlags->return->getHeap->return->vm->getOS->return->getSysProps->return->getThreads->return->getType->return->vm->getVMRelease->return->getClassPath->return->getUserDir->return->super->get
JSJavaVM#getIds()::: java m get ids:::superIds->super->getIds->tmp->fields->keySet->toArray->res->new->ObjectArr->System->arraycopy->System->arraycopy->return
JSJavaVM#has(String)::: java m has:::if->getFieldID->return->else->return->super->has
JSJavaVM#put(String, Object)::: java m put:::if->getFieldID->super->put
JSJavaVM#toString()::: java m to string:::buf->new->StringBuffer->buf->append->buf->getType->append->buf->append->buf->getVMBit->append->buf->append->buf->vm->getVMRelease->append->buf->append->return->buf->toString
JSJavaVM#addField(String, int)::: java m add field:::fields->new->Integer->put
JSJavaVM#getFieldID(String)::: java m get field d:::res->fields->get->return->res->intValue
JSJavaVM#getVMBit()::: java m get bit:::return->vm->getAddressSize
JSJavaVM#getFlags()::: java m get flags:::if->flags->vm->getCommandLineFlags->map->new->HashMap->if->for->f->factory->newJSMap->return
JSJavaVM#getHeap()::: java m get heap:::if->factory->newJSJavaHeap->return
JSJavaVM#getSysProps()::: java m get sys props:::if->props->vm->getSystemProperties->map->new->HashMap->if->e->props->propertyNames->while->e->hasMoreElements->key->e->nextElement->map->props->getProperty->put->factory->newJSMap->return
JSJavaVM#getThreads()::: java m get threads:::if->threads->new->ArrayList->factory->newJSList->jthread->vm->getThreads->first->while->threads->add->jthread->next->return
JSJavaVM#getType()::: java m get type:::if->vm->isClientCompiler->return->else->if->vm->isServerCompiler->return->else->return
JSJavaVM#getClassPath()::: java m get class path:::return->vm->getSystemProperty
JSJavaVM#getUserDir()::: java m get user dir:::return->vm->getSystemProperty
JSList#get(String)::: list get:::if->name->equals->return->list->size->new->Integer->else->return->super->get
JSList#get(int)::: list get:::if->isInRange->item->list->get->return->wrapObject->else->return->super->get
JSList#getIds()::: list get ids:::superIds->super->getIds->size->list->size->res->new->ObjectArr->for->i->System->arraycopy->return
JSList#has(String)::: list has:::if->name->equals->return->else->return->super->has
JSList#has(int)::: list has:::if->isInRange->return->else->return->super->has
JSList#put(String, Object)::: list put:::if->name->equals->super->put
JSList#put(int, Object)::: list put:::if->isInRange->super->put
JSList#toString()::: list to string:::buf->new->StringBuffer->buf->append->for->itr->list->iterator->itr->hasNext->buf->append->return->buf->toString
JSList#isInRange(int)::: list is in range:::return->list->size
JSList#wrapObject(Object)::: list wrap object:::return->factory->newJSJavaWrapper
JSMap#get(String)::: map get:::if->map->containsKey->return->map->get->wrapObject->else->return->super->get
JSMap#getIds()::: map get ids:::superIds->super->getIds->tmp->map->keySet->toArray->res->new->ObjectArr->System->arraycopy->System->arraycopy->return
JSMap#has(String)::: map has:::if->map->containsKey->return->else->return->super->has
JSMap#put(String, Object)::: map put:::if->map->containsKey->super->put
JSMap#toString()::: map to string:::buf->new->StringBuffer->keys->map->keySet->buf->append->for->itr->keys->iterator->itr->hasNext->buf->append->return->buf->toString
JSMap#wrapObject(Object)::: map wrap object:::return->factory->newJSJavaWrapper
JSMetadata#getMetadata()::: metadata get metadata:::return
JSMetadata#equals(Object)::: metadata equals:::if->return->other->return->metadata->equals
JSMetadata#hashCode()::: metadata hash code:::return->metadata->hashCode
JSMetadata#toString()::: metadata to string:::return->metadata->getAddress->toString
MapScriptObject#getIds()::: map script object get ids:::return->map->keySet->toArray
MapScriptObject#get(String)::: map script object get:::if->has->return->map->get->else->return
MapScriptObject#get(int)::: map script object get:::if->has->key->Integer->valueOf->return->map->get->else->return
MapScriptObject#put(String, Object)::: map script object put:::map->put
MapScriptObject#put(int, Object)::: map script object put:::map->Integer->valueOf->put
MapScriptObject#has(String)::: map script object has:::return->map->containsKey
MapScriptObject#has(int)::: map script object has:::return->map->Integer->valueOf->containsKey
MapScriptObject#delete(String)::: map script object delete:::if->map->containsKey->map->remove->return->else->return
MapScriptObject#delete(int)::: map script object delete:::key->Integer->valueOf->if->map->containsKey->map->remove->return->else->return
MapScriptObject#putFunction(Object, Method)::: map script object put function:::putFunction
MapScriptObject#putFunction(Object, Method, boolean)::: map script object put function:::map->method->getName->new->MethodCallable->put
MapScriptObject#putFunction(Object, String, Invocable)::: map script object put function:::map->new->InvocableCallable->put
MethodCallable#call(Object[])::: method callable call:::try->if->return->method->new->ObjectArr->invoke->else->return->method->invoke->catch->throw->throw->new->ScriptException->finally
ObjectVisitor#visit(Object)::: object visitor visit:::
ScriptObject#getIds()::: script object get ids:::
ScriptObject#get(String):::Get the value of the named property.:::
ScriptObject#get(int):::Get the value of the "indexed" property:::
ScriptObject#put(String, Object):::Set the value of the named property.:::
ScriptObject#put(int, Object):::Set the value of the indexed property.:::
ScriptObject#has(String):::Returns whether the named property exists or not.:::
ScriptObject#has(int):::Returns whether the indexed property exists or not.:::
ScriptObject#delete(String):::Deletes the named property:::
ScriptObject#delete(int):::Deletes the indexed property:::
SOQLEngine#getEngine()::: engine get engine:::if->new->SOQLEngine->return
SOQLEngine#executeQuery(String, ObjectVisitor):::      Query is of the form           select &lt;java script code to select&gt;          [ from [instanceof] &lt;class name&gt; [&lt;identifier&gt;]            [ where &lt;java script boolean expression&gt; ]          ]:::debugPrint->st->new->StringTokenizer->if->st->hasMoreTokens->first->st->nextToken->if->first->equals->throw->new->SOQLException->else->throw->new->SOQLException->selectStart->query->indexOf->fromStart->query->indexOf->selectExpr->className->isInstanceOf->whereExpr->identifier->if->query->length->substring->query->length->substring->new->StringTokenizer->if->st->hasMoreTokens->tmp->st->nextToken->if->tmp->equals->if->st->hasMoreTokens->throw->new->SOQLException->st->nextToken->else->else->throw->new->SOQLException->if->st->hasMoreTokens->st->nextToken->if->identifier->equals->throw->new->SOQLException->if->st->hasMoreTokens->tmp->st->nextToken->if->tmp->equals->throw->new->SOQLException->whereEnd->query->lastIndexOf->query->substring->else->throw->new->SOQLException->else->query->length->query->length->substring->new->SOQLQuery->executeQuery
SOQLEngine#executeQuery(SOQLQuery, ObjectVisitor)::: engine execute query:::kls->if->SystemDictionaryHelper->findInstanceKlass->if->throw->new->SOQLException->buf->new->StringBuffer->buf->append->if->buf->append->buf->append->buf->replace->append->buf->append->selectCode->buf->toString->debugPrint->whereCode->if->new->StringBuffer->buf->append->buf->append->buf->append->buf->replace->append->buf->append->buf->toString->debugPrint->else->beginQuery->evalString->evalString->if->try->iterateOops->catch->finally->endQuery->else->try->select->new->ObjectArr->call->visitor->visit->catch->e->printStackTrace->finally
SOQLEngine#dispatchObject(Oop, ObjectVisitor, boolean)::: engine dispatch object:::jsObj->factory->newJSJavaObject->args->new->ObjectArr->b->try->if->res->call->if->booleanValue->else->if->intValue->else->if->select->call->visitor->visit->catch->throw->new->RuntimeException->finally
SOQLEngine#iterateOops(InstanceKlass, ObjectVisitor, boolean)::: engine iterate oops:::oh->VM->getVM->getObjectHeap->oh->new->HeapVisitor->iterateObjectsOfKlass
SOQLEngine#beginQuery()::: engine begin query:::new->ObjectReader->new->JSJavaFactoryImpl
SOQLEngine#endQuery()::: engine end query:::
SOQLEngine#getObjectReader()::: engine get object reader:::return
SOQLEngine#getJSJavaFactory()::: engine get java factory:::return
SOQLEngine#isQuitting()::: engine is quitting:::return
SOQLEngine#quit()::: engine quit:::
SOQLEngine#debugPrint(String)::: engine debug print:::if->println

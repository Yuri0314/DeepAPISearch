Callable#call(Object[]):::Call the underlying function passing the given arguments and return the result.:::
JSJavaScriptEngine#startConsole():::Start a read-eval-print loop with this engine.:::start
JSJavaScriptEngine#start():::Initialize the engine so that we can "eval" strings and files later.:::start
JSJavaScriptEngine#defineFunction(Object, Method):::Define a global function that invokes given Method.:::putFunction
JSJavaScriptEngine#call(String, Object[]):::Call the script function of given name passing the given arguments.:::invocable->try->return->invocable->invokeFunction->catch->throw->throw->new->RuntimeException->finally
JSJavaScriptEngine#address(Object[]):::       address function returns address of JSJavaObject as String:::if->return->o->if->return->getOop->getHandle->toString->else->return
JSJavaScriptEngine#classof(Object[]):::       classof function gets type of given JSJavaInstance or JSJavaArray:::if->return->o->if->if->if->return->getJSJavaClass->else->if->return->getJSJavaClass->else->return->else->if->ik->SystemDictionaryHelper->findInstanceKlass->return->getJSJavaFactory->newJSJavaKlass->getJSJavaClass->else->return->else->return
JSJavaScriptEngine#dumpClass(Object[]):::dumpClass function creates a .class file for a given Class object:::if->return->clazz->if->return->ik->if->name->if->name->startsWith->vm->VM->getVM->addr->vm->getDebugger->parseAddress->metadata->Metadata->addr->addOffsetTo->instantiateWrapperFor->if->else->return->else->SystemDictionaryHelper->findInstanceKlass->else->if->jk->getJSJavaKlass->if->getInstanceKlass->else->return->if->return->buf->new->StringBuffer->if->buf->toString->append->else->buf->append->buf->append->buf->ik->getName->asString->replace->append->buf->append->fileName->buf->toString->file->new->File->try->index->fileName->lastIndexOf->dir->fileName->substring->new->File->dir->mkdirs->fos->new->FileOutputStream->cw->new->ClassWriter->cw->write->fos->close->catch->exp->toString->printError->return->finally->return
JSJavaScriptEngine#dumpHeap(Object[]):::dumpHeap function creates a heap dump file:::fileName->if->toString->return->new->JMap->writeHeapHprofBin
JSJavaScriptEngine#help(Object[]):::        help function prints help message for global functions and variables.:::println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println->println
JSJavaScriptEngine#identityHash(Object[]):::       identityHash function gets identity hash code value of given        JSJavaObject:::if->return->o->if->return->getOop->identityHash->new->Long->else->return
JSJavaScriptEngine#load(Object[]):::Load and execute a set of JavaScript source files:::for->i
JSJavaScriptEngine#mirror(Object[]):::       mirror function creats local copy of the Oop wrapper supplied:::o->res->if->if->oop->getOop->try->getObjectReader->readObject->catch->if->e->getErrorStream->printStackTrace->finally->else->if->metadata->getMetadata->try->if->getObjectReader->readClass->catch->if->e->getErrorStream->printStackTrace->finally->return
JSJavaScriptEngine#owner(Object[]):::       owner function gets owning thread of given JSJavaObjec, if any, else        returns null:::o->if->return->getOwningThread->else->return
JSJavaScriptEngine#object(Object[]):::       object function takes a string address and returns a JSJavaObject:::o->if->vm->VM->getVM->addr->vm->getDebugger->parseAddress->oop->vm->getObjectHeap->addr->addOffsetToAsOopHandle->newOop->return->getJSJavaFactory->newJSJavaObject->else->return
JSJavaScriptEngine#sizeof(Object[]):::       sizeof function returns size of a Java object in bytes:::if->return->o->if->return->getOop->getObjectSize->new->Long->else->return
JSJavaScriptEngine#staticof(Object[]):::       staticof function gets static field of given class:::classname->fieldname->if->return->ik->if->jclass->jk->jclass->getJSJavaKlass->if->getInstanceKlass->else->if->SystemDictionaryHelper->findInstanceKlass->else->return->if->return->factory->getJSJavaFactory->try->return->factory->newJSJavaKlass->getStaticFieldValue->catch->return->finally
JSJavaScriptEngine#read(Object[]):::read function reads a single line of input from standard input:::in->getInputReader->if->return->if->toString->print->print->try->return->in->readLine->catch->exp->printStackTrace->throw->new->RuntimeException->finally
JSJavaScriptEngine#quit(Object[]):::Quit the shell:::quit
ScriptObject#get(String):::Get the value of the named property.:::
ScriptObject#get(int):::Get the value of the "indexed" property:::
ScriptObject#put(String, Object):::Set the value of the named property.:::
ScriptObject#put(int, Object):::Set the value of the indexed property.:::
ScriptObject#has(String):::Returns whether the named property exists or not.:::
ScriptObject#has(int):::Returns whether the indexed property exists or not.:::
ScriptObject#delete(String):::Deletes the named property:::
ScriptObject#delete(int):::Deletes the indexed property:::
SOQLEngine#executeQuery(String, ObjectVisitor):::      Query is of the form           select &lt;java script code to select&gt;          [ from [instanceof] &lt;class name&gt; [&lt;identifier&gt;]            [ where &lt;java script boolean expression&gt; ]          ]:::debugPrint->st->new->StringTokenizer->if->st->hasMoreTokens->first->st->nextToken->if->first->equals->throw->new->SOQLException->else->throw->new->SOQLException->selectStart->query->indexOf->fromStart->query->indexOf->selectExpr->className->isInstanceOf->whereExpr->identifier->if->query->length->substring->query->length->substring->new->StringTokenizer->if->st->hasMoreTokens->tmp->st->nextToken->if->tmp->equals->if->st->hasMoreTokens->throw->new->SOQLException->st->nextToken->else->else->throw->new->SOQLException->if->st->hasMoreTokens->st->nextToken->if->identifier->equals->throw->new->SOQLException->if->st->hasMoreTokens->tmp->st->nextToken->if->tmp->equals->throw->new->SOQLException->whereEnd->query->lastIndexOf->query->substring->else->throw->new->SOQLException->else->query->length->query->length->substring->new->SOQLQuery->executeQuery

javax.lang.model.util.AbstractAnnotationValueVisitor6#visit(AnnotationValue, P)->R:::Visits any annotation value as if by passing itself to that value's AnnotationValue#accept accept
javax.lang.model.util.AbstractAnnotationValueVisitor6#visit(AnnotationValue)->R:::Visits an annotation value as if by passing itself to that value's AnnotationValue#accept accept method passing null for the additional parameter
javax.lang.model.util.AbstractAnnotationValueVisitor6#visitUnknown(AnnotationValue, P)->R::: abstract annotation value visitor6 visit unknown
javax.lang.model.util.AbstractElementVisitor6#visit(Element, P)->R:::Visits any program element as if by passing itself to that element's Element#accept accept method
javax.lang.model.util.AbstractElementVisitor6#visit(Element)->R:::Visits any program element as if by passing itself to that element's Element#accept accept method and passing null for the additional parameter
javax.lang.model.util.AbstractElementVisitor6#visitUnknown(Element, P)->R::: abstract element visitor6 visit unknown
javax.lang.model.util.AbstractElementVisitor6#visitModule(ModuleElement, P)->R::: abstract element visitor6 visit module
javax.lang.model.util.AbstractElementVisitor9#visitModule(ModuleElement, P)->R::: abstract element visitor9 visit module
javax.lang.model.util.AbstractTypeVisitor6#visit(TypeMirror, P)->R:::Visits any type mirror as if by passing itself to that type mirror's TypeMirror#accept accept method
javax.lang.model.util.AbstractTypeVisitor6#visit(TypeMirror)->R:::Visits any type mirror as if by passing itself to that type mirror's TypeMirror#accept accept method and passing null for the additional parameter
javax.lang.model.util.AbstractTypeVisitor6#visitUnion(UnionType, P)->R::: abstract type visitor6 visit union
javax.lang.model.util.AbstractTypeVisitor6#visitIntersection(IntersectionType, P)->R::: abstract type visitor6 visit intersection
javax.lang.model.util.AbstractTypeVisitor6#visitUnknown(TypeMirror, P)->R::: abstract type visitor6 visit unknown
javax.lang.model.util.AbstractTypeVisitor7#visitUnion(UnionType, P)->R:::Visits a UnionType in a manner defined by a subclass.
javax.lang.model.util.AbstractTypeVisitor8#visitIntersection(IntersectionType, P)->R:::Visits an IntersectionType in a manner defined by a subclass.
javax.lang.model.util.ElementFilter#fieldsIn(Iterable)->List:::Returns a list of fields in elements.
javax.lang.model.util.ElementFilter#fieldsIn(Set)->Set:::Returns a set of fields in elements.
javax.lang.model.util.ElementFilter#constructorsIn(Iterable)->List:::Returns a list of constructors in elements.
javax.lang.model.util.ElementFilter#constructorsIn(Set)->Set:::Returns a set of constructors in elements.
javax.lang.model.util.ElementFilter#methodsIn(Iterable)->List:::Returns a list of methods in elements.
javax.lang.model.util.ElementFilter#methodsIn(Set)->Set:::Returns a set of methods in elements.
javax.lang.model.util.ElementFilter#typesIn(Iterable)->List:::Returns a list of types in elements.
javax.lang.model.util.ElementFilter#typesIn(Set)->Set:::Returns a set of types in elements.
javax.lang.model.util.ElementFilter#packagesIn(Iterable)->List:::Returns a list of packages in elements.
javax.lang.model.util.ElementFilter#packagesIn(Set)->Set:::Returns a set of packages in elements.
javax.lang.model.util.ElementFilter#modulesIn(Iterable)->List:::Returns a list of modules in elements.
javax.lang.model.util.ElementFilter#modulesIn(Set)->Set:::Returns a set of modules in elements.
javax.lang.model.util.ElementFilter#exportsIn(Iterable)->List:::Returns a list of exports directives in directives.
javax.lang.model.util.ElementFilter#opensIn(Iterable)->List:::Returns a list of opens directives in directives.
javax.lang.model.util.ElementFilter#providesIn(Iterable)->List:::Returns a list of provides directives in directives.
javax.lang.model.util.ElementFilter#requiresIn(Iterable)->List:::Returns a list of requires directives in directives.
javax.lang.model.util.ElementFilter#usesIn(Iterable)->List:::Returns a list of uses directives in directives.
javax.lang.model.util.ElementKindVisitor6#visitPackage(PackageElement, P)->R:::The element argument has kind {@code PACKAGE.
javax.lang.model.util.ElementKindVisitor6#visitType(TypeElement, P)->R::: element kind visitor6 visit type
javax.lang.model.util.ElementKindVisitor6#visitTypeAsAnnotationType(TypeElement, P)->R:::Visits an ANNOTATION_TYPE type element.
javax.lang.model.util.ElementKindVisitor6#visitTypeAsClass(TypeElement, P)->R:::Visits a CLASS type element.
javax.lang.model.util.ElementKindVisitor6#visitTypeAsEnum(TypeElement, P)->R:::Visits an ENUM type element.
javax.lang.model.util.ElementKindVisitor6#visitTypeAsInterface(TypeElement, P)->R:::Visits an INTERFACE type element.
javax.lang.model.util.ElementKindVisitor6#visitVariable(VariableElement, P)->R:::Visits a variable element
javax.lang.model.util.ElementKindVisitor6#visitVariableAsEnumConstant(VariableElement, P)->R:::Visits an ENUM_CONSTANT variable element.
javax.lang.model.util.ElementKindVisitor6#visitVariableAsExceptionParameter(VariableElement, P)->R:::Visits an EXCEPTION_PARAMETER variable element.
javax.lang.model.util.ElementKindVisitor6#visitVariableAsField(VariableElement, P)->R:::Visits a FIELD variable element.
javax.lang.model.util.ElementKindVisitor6#visitVariableAsLocalVariable(VariableElement, P)->R:::Visits a LOCAL_VARIABLE variable element.
javax.lang.model.util.ElementKindVisitor6#visitVariableAsParameter(VariableElement, P)->R:::Visits a PARAMETER variable element.
javax.lang.model.util.ElementKindVisitor6#visitVariableAsResourceVariable(VariableElement, P)->R:::Visits a RESOURCE_VARIABLE variable element.
javax.lang.model.util.ElementKindVisitor6#visitExecutable(ExecutableElement, P)->R::: element kind visitor6 visit executable
javax.lang.model.util.ElementKindVisitor6#visitExecutableAsConstructor(ExecutableElement, P)->R:::Visits a CONSTRUCTOR executable element.
javax.lang.model.util.ElementKindVisitor6#visitExecutableAsInstanceInit(ExecutableElement, P)->R:::Visits an INSTANCE_INIT executable element.
javax.lang.model.util.ElementKindVisitor6#visitExecutableAsMethod(ExecutableElement, P)->R:::Visits a METHOD executable element.
javax.lang.model.util.ElementKindVisitor6#visitExecutableAsStaticInit(ExecutableElement, P)->R:::Visits a STATIC_INIT executable element.
javax.lang.model.util.ElementKindVisitor6#visitTypeParameter(TypeParameterElement, P)->R:::The element argument has kind {@code TYPE_PARAMETER.
javax.lang.model.util.ElementKindVisitor7#visitVariableAsResourceVariable(VariableElement, P)->R::: element kind visitor7 visit variable as resource variable
javax.lang.model.util.ElementKindVisitor9#visitModule(ModuleElement, P)->R::: element kind visitor9 visit module
javax.lang.model.util.Elements#getPackageElement(CharSequence)->PackageElement:::Returns a package given its fully qualified name if the package is unique in the environment
javax.lang.model.util.Elements#getPackageElement(ModuleElement, CharSequence)->PackageElement:::Returns a package given its fully qualified name, as seen from the given module.
javax.lang.model.util.Elements#getAllPackageElements(CharSequence)->Set:::Returns all package elements with the given canonical name
javax.lang.model.util.Elements#getTypeElement(CharSequence)->TypeElement:::Returns a type element given its canonical name if the type element is unique in the environment
javax.lang.model.util.Elements#getTypeElement(ModuleElement, CharSequence)->TypeElement:::Returns a type element given its canonical name, as seen from the given module.
javax.lang.model.util.Elements#getAllTypeElements(CharSequence)->Set:::Returns all type elements with the given canonical name
javax.lang.model.util.Elements#getModuleElement(CharSequence)->ModuleElement:::Returns a module element given its fully qualified name
javax.lang.model.util.Elements#getAllModuleElements()->Set:::Returns all module elements in the current environment
javax.lang.model.util.Elements#getElementValuesWithDefaults(AnnotationMirror)->Map:::Returns the values of an annotation's elements, including defaults.
javax.lang.model.util.Elements#getDocComment(Element)->String:::Returns the text of the documentation (&quot;Javadoc&quot;) comment of an element
javax.lang.model.util.Elements#isDeprecated(Element)->boolean:::Returns true if the element is deprecated, false otherwise.
javax.lang.model.util.Elements#getOrigin(Element)->Origin:::Returns the origin of the given element
javax.lang.model.util.Elements#getOrigin(AnnotatedConstruct, AnnotationMirror)->Origin:::Returns the origin of the given annotation mirror
javax.lang.model.util.Elements#getOrigin(ModuleElement, ModuleElement.Directive)->Origin:::Returns the origin of the given module directive
javax.lang.model.util.Elements#isBridge(ExecutableElement)->boolean:::Returns true if the executable element is a bridge method, false otherwise.
javax.lang.model.util.Elements#getBinaryName(TypeElement)->Name:::Returns the binary name of a type element.
javax.lang.model.util.Elements#getPackageOf(Element)->PackageElement:::Returns the package of an element
javax.lang.model.util.Elements#getModuleOf(Element)->ModuleElement:::Returns the module of an element
javax.lang.model.util.Elements#getAllMembers(TypeElement)->List:::Returns all members of a type element, whether inherited or declared directly
javax.lang.model.util.Elements#getAllAnnotationMirrors(Element)->List:::Returns all annotations present on an element, whether directly present or present via inheritance.
javax.lang.model.util.Elements#hides(Element, Element)->boolean:::Tests whether one type, method, or field hides another.
javax.lang.model.util.Elements#overrides(ExecutableElement, ExecutableElement, TypeElement)->boolean:::Tests whether one method, as a member of a given type, overrides another method
javax.lang.model.util.Elements#getConstantExpression(Object)->String:::Returns the text of a constant expression representing a primitive value or a string
javax.lang.model.util.Elements#printElements(java.io.Writer, Element...)->void:::Prints a representation of the elements to the given writer in the specified order
javax.lang.model.util.Elements#getName(CharSequence)->Name:::Return a name with the same sequence of characters as the argument.
javax.lang.model.util.Elements#isFunctionalInterface(TypeElement)->boolean:::Returns true if the type element is a functional interface, false otherwise.
javax.lang.model.util.ElementScanner6#scan(Iterable, P)->R:::Iterates over the given elements and calls #scan(Element, Object) scan(Element, P) on each one
javax.lang.model.util.ElementScanner6#scan(Element, P)->R:::Processes an element by calling e.accept(this, p); this method may be overridden by subclasses.
javax.lang.model.util.ElementScanner6#scan(Element)->R:::Convenience method equivalent to v.scan(e, null).
javax.lang.model.util.ElementScanner6#visitPackage(PackageElement, P)->R::: element scanner6 visit package
javax.lang.model.util.ElementScanner6#visitType(TypeElement, P)->R::: element scanner6 visit type
javax.lang.model.util.ElementScanner6#visitVariable(VariableElement, P)->R::: element scanner6 visit variable
javax.lang.model.util.ElementScanner6#visitExecutable(ExecutableElement, P)->R::: element scanner6 visit executable
javax.lang.model.util.ElementScanner6#visitTypeParameter(TypeParameterElement, P)->R::: element scanner6 visit type parameter
javax.lang.model.util.ElementScanner7#visitVariable(VariableElement, P)->R::: element scanner7 visit variable
javax.lang.model.util.ElementScanner9#visitModule(ModuleElement, P)->R::: element scanner9 visit module
javax.lang.model.util.SimpleAnnotationValueVisitor6#defaultAction(Object, P)->R:::The default action for visit methods.
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitBoolean(boolean, P)->R::: simple annotation value visitor6 visit boolean
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitByte(byte, P)->R::: simple annotation value visitor6 visit byte
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitChar(char, P)->R::: simple annotation value visitor6 visit char
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitDouble(double, P)->R::: simple annotation value visitor6 visit double
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitFloat(float, P)->R::: simple annotation value visitor6 visit float
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitInt(int, P)->R::: simple annotation value visitor6 visit int
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitLong(long, P)->R::: simple annotation value visitor6 visit long
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitShort(short, P)->R::: simple annotation value visitor6 visit short
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitString(String, P)->R::: simple annotation value visitor6 visit string
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitType(TypeMirror, P)->R::: simple annotation value visitor6 visit type
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitEnumConstant(VariableElement, P)->R::: simple annotation value visitor6 visit enum constant
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitAnnotation(AnnotationMirror, P)->R::: simple annotation value visitor6 visit annotation
javax.lang.model.util.SimpleAnnotationValueVisitor6#visitArray(List, P)->R::: simple annotation value visitor6 visit array
javax.lang.model.util.SimpleElementVisitor6#defaultAction(Element, P)->R:::The default action for visit methods.
javax.lang.model.util.SimpleElementVisitor6#visitPackage(PackageElement, P)->R::: simple element visitor6 visit package
javax.lang.model.util.SimpleElementVisitor6#visitType(TypeElement, P)->R::: simple element visitor6 visit type
javax.lang.model.util.SimpleElementVisitor6#visitVariable(VariableElement, P)->R::: simple element visitor6 visit variable
javax.lang.model.util.SimpleElementVisitor6#visitExecutable(ExecutableElement, P)->R::: simple element visitor6 visit executable
javax.lang.model.util.SimpleElementVisitor6#visitTypeParameter(TypeParameterElement, P)->R::: simple element visitor6 visit type parameter
javax.lang.model.util.SimpleElementVisitor7#visitVariable(VariableElement, P)->R::: simple element visitor7 visit variable
javax.lang.model.util.SimpleElementVisitor9#visitModule(ModuleElement, P)->R::: simple element visitor9 visit module
javax.lang.model.util.SimpleTypeVisitor6#defaultAction(TypeMirror, P)->R:::The default action for visit methods.
javax.lang.model.util.SimpleTypeVisitor6#visitPrimitive(PrimitiveType, P)->R::: simple type visitor6 visit primitive
javax.lang.model.util.SimpleTypeVisitor6#visitNull(NullType, P)->R:::This implementation calls {@code defaultAction.
javax.lang.model.util.SimpleTypeVisitor6#visitArray(ArrayType, P)->R::: simple type visitor6 visit array
javax.lang.model.util.SimpleTypeVisitor6#visitDeclared(DeclaredType, P)->R::: simple type visitor6 visit declared
javax.lang.model.util.SimpleTypeVisitor6#visitError(ErrorType, P)->R::: simple type visitor6 visit error
javax.lang.model.util.SimpleTypeVisitor6#visitTypeVariable(TypeVariable, P)->R::: simple type visitor6 visit type variable
javax.lang.model.util.SimpleTypeVisitor6#visitWildcard(WildcardType, P)->R::: simple type visitor6 visit wildcard
javax.lang.model.util.SimpleTypeVisitor6#visitExecutable(ExecutableType, P)->R::: simple type visitor6 visit executable
javax.lang.model.util.SimpleTypeVisitor6#visitNoType(NoType, P)->R::: simple type visitor6 visit no type
javax.lang.model.util.SimpleTypeVisitor7#visitUnion(UnionType, P)->R::: simple type visitor7 visit union
javax.lang.model.util.SimpleTypeVisitor8#visitIntersection(IntersectionType, P)->R::: simple type visitor8 visit intersection
javax.lang.model.util.TypeKindVisitor6#visitPrimitive(PrimitiveType, P)->R::: type kind visitor6 visit primitive
javax.lang.model.util.TypeKindVisitor6#visitPrimitiveAsBoolean(PrimitiveType, P)->R:::Visits a BOOLEAN primitive type.
javax.lang.model.util.TypeKindVisitor6#visitPrimitiveAsByte(PrimitiveType, P)->R:::Visits a BYTE primitive type.
javax.lang.model.util.TypeKindVisitor6#visitPrimitiveAsShort(PrimitiveType, P)->R:::Visits a SHORT primitive type.
javax.lang.model.util.TypeKindVisitor6#visitPrimitiveAsInt(PrimitiveType, P)->R:::Visits an INT primitive type.
javax.lang.model.util.TypeKindVisitor6#visitPrimitiveAsLong(PrimitiveType, P)->R:::Visits a LONG primitive type.
javax.lang.model.util.TypeKindVisitor6#visitPrimitiveAsChar(PrimitiveType, P)->R:::Visits a CHAR primitive type.
javax.lang.model.util.TypeKindVisitor6#visitPrimitiveAsFloat(PrimitiveType, P)->R:::Visits a FLOAT primitive type.
javax.lang.model.util.TypeKindVisitor6#visitPrimitiveAsDouble(PrimitiveType, P)->R:::Visits a DOUBLE primitive type.
javax.lang.model.util.TypeKindVisitor6#visitNoType(NoType, P)->R::: type kind visitor6 visit no type
javax.lang.model.util.TypeKindVisitor6#visitNoTypeAsVoid(NoType, P)->R:::Visits a TypeKind#VOID VOID pseudo-type.
javax.lang.model.util.TypeKindVisitor6#visitNoTypeAsPackage(NoType, P)->R:::Visits a TypeKind#PACKAGE PACKAGE pseudo-type.
javax.lang.model.util.TypeKindVisitor6#visitNoTypeAsModule(NoType, P)->R:::Visits a TypeKind#MODULE MODULE pseudo-type.
javax.lang.model.util.TypeKindVisitor6#visitNoTypeAsNone(NoType, P)->R:::Visits a TypeKind#NONE NONE pseudo-type.
javax.lang.model.util.TypeKindVisitor7#visitUnion(UnionType, P)->R::: type kind visitor7 visit union
javax.lang.model.util.TypeKindVisitor8#visitIntersection(IntersectionType, P)->R::: type kind visitor8 visit intersection
javax.lang.model.util.TypeKindVisitor9#visitNoTypeAsModule(NoType, P)->R::: type kind visitor9 visit no type as module
javax.lang.model.util.Types#asElement(TypeMirror)->Element:::Returns the element corresponding to a type
javax.lang.model.util.Types#isSameType(TypeMirror, TypeMirror)->boolean:::Tests whether two TypeMirror objects represent the same type
javax.lang.model.util.Types#isSubtype(TypeMirror, TypeMirror)->boolean:::Tests whether one type is a subtype of another
javax.lang.model.util.Types#isAssignable(TypeMirror, TypeMirror)->boolean:::Tests whether one type is assignable to another.
javax.lang.model.util.Types#contains(TypeMirror, TypeMirror)->boolean:::Tests whether one type argument contains another.
javax.lang.model.util.Types#isSubsignature(ExecutableType, ExecutableType)->boolean:::Tests whether the signature of one method is a subsignature of another.
javax.lang.model.util.Types#directSupertypes(TypeMirror)->List:::Returns the direct supertypes of a type
javax.lang.model.util.Types#erasure(TypeMirror)->TypeMirror:::Returns the erasure of a type.
javax.lang.model.util.Types#boxedClass(PrimitiveType)->TypeElement:::Returns the class of a boxed value of a given primitive type
javax.lang.model.util.Types#unboxedType(TypeMirror)->PrimitiveType:::Returns the type (a primitive type) of unboxed values of a given type
javax.lang.model.util.Types#capture(TypeMirror)->TypeMirror:::Applies capture conversion to a type.
javax.lang.model.util.Types#getPrimitiveType(TypeKind)->PrimitiveType:::Returns a primitive type.
javax.lang.model.util.Types#getNullType()->NullType:::Returns the null type
javax.lang.model.util.Types#getNoType(TypeKind)->NoType:::Returns a pseudo-type used where no actual type is appropriate
javax.lang.model.util.Types#getArrayType(TypeMirror)->ArrayType:::Returns an array type with the specified component type.
javax.lang.model.util.Types#getWildcardType(TypeMirror, TypeMirror)->WildcardType:::Returns a new wildcard type argument
javax.lang.model.util.Types#getDeclaredType(TypeElement, TypeMirror...)->DeclaredType:::Returns the type corresponding to a type element and actual type arguments
javax.lang.model.util.Types#getDeclaredType(DeclaredType, TypeElement, TypeMirror...)->DeclaredType:::Returns the type corresponding to a type element and actual type arguments, given a DeclaredType#getEnclosingType() containing type of which it is a member
javax.lang.model.util.Types#asMemberOf(DeclaredType, Element)->TypeMirror:::Returns the type of an element when that element is viewed as a member of, or otherwise directly contained by, a given type

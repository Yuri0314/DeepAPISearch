Attributes#get(Object):::Returns the value of the specified attribute name, or null if the attribute name was not found.:::map.get
Attributes#getValue(String):::Returns the value of the specified attribute name, specified as a string, or null if the attribute was not found:::Name.of->this.get
Attributes#getValue(Name):::Returns the value of the specified Attributes.Name, or null if the attribute was not found:::this.get
Attributes#put(Object, Object):::Associates the specified value with the specified attribute name (key) in this Map:::map.put
Attributes#putValue(String, String):::Associates the specified value with the specified attribute name, specified as a String:::Name.of->this.put
Attributes#remove(Object):::Removes the attribute with the specified name (key) from this Map:::map.remove
Attributes#containsValue(Object):::Returns true if this Map maps one or more attribute names (keys) to the specified value.:::map.containsValue
Attributes#containsKey(Object):::Returns true if this Map contains the specified attribute name (key).:::map.containsKey
Attributes#putAll(Map):::Copies all of the attribute name-value mappings from the specified Attributes to this Map:::Attributes.class.isInstance->me.getKey->me.getValue->this.put->(attr).entrySet
Attributes#clear():::Removes all attributes from this Map.:::map.clear
Attributes#size():::Returns the number of attributes in this Map.:::map.size
Attributes#isEmpty():::Returns true if this Map contains no attributes.:::map.isEmpty
Attributes#keySet():::Returns a Set view of the attribute names (keys) contained in this Map.:::map.keySet
Attributes#values():::Returns a Collection view of the attribute values contained in this Map.:::map.values
Attributes#entrySet():::Returns a Collection view of the attribute name-value mappings contained in this Map.:::map.entrySet
Attributes#equals(Object):::Compares the specified Attributes object with this Map for equality:::map.equals
Attributes#hashCode():::Returns the hash code value for this Map.:::map.hashCode
Attributes#clone():::Returns a copy of the Attributes, implemented as follows:      public Object clone() { return new Attributes(this); }  Since the attribute names and values are themselves immutable, the Attributes returned can be safely modified without affecting the original.:::
Attributes.Name#equals(Object):::Compares this attribute name to another for equality.:::other.name.equalsIgnoreCase
Attributes.Name#hashCode():::Computes the hash value for this attribute name.:::
Attributes.Name#toString():::Returns the attribute name as a String.:::
JarEntry#getAttributes():::Returns the Manifest Attributes for this entry, or null if none.:::
JarEntry#getCertificates():::Returns the Certificate objects for this entry, or null if none:::certs.clone
JarEntry#getCodeSigners():::Returns the CodeSigner objects for this entry, or null if none:::signers.clone
JarEntry#getRealName():::Returns the real name of this JarEntry:::super.getName
JarFile#baseVersion():::Returns the version that represents the unversioned configuration of a multi-release jar file.:::
JarFile#runtimeVersion():::Returns the version that represents the effective runtime versioned configuration of a multi-release jar file:::
JarFile#getVersion():::Returns the maximum version used when searching for versioned entries:::this.isMultiRelease
JarFile#isMultiRelease():::Indicates whether or not this jar file is a multi-release jar file.:::this.checkForSpecialAttributes
JarFile#getManifest():::Returns the jar file manifest, or null if none.:::this.getManifestFromReference
JarFile#getJarEntry(String):::Returns the JarEntry for the given base entry name or null if not found:::this.getEntry
JarFile#getEntry(String):::Returns the ZipEntry for the given base entry name or null if not found:::this.getEntry0->this.isMultiRelease->this.getVersionedEntry
JarFile#entries():::Returns an enumeration of the jar file entries.:::JUZFA.entries
JarFile#stream():::Returns an ordered Stream over the jar file entries:::JUZFA.stream
JarFile#versionedStream():::Returns a Stream of the versioned jar file entries:::this.isMultiRelease->JUZFA.entryNameStream(this).map(this::getBasename).filter(Objects::nonNull).distinct().map->this.stream
JarFile#getInputStream(ZipEntry):::Returns an input stream for reading the contents of the specified zip file entry.:::this.maybeInstantiateVerifier->super.getInputStream->this.initializeVerifier->super.getInputStream->this.getManifestFromReference->this.verifiableEntry->super.getInputStream
JarFile#hasClassPathAttribute():::Returns true iff this JAR file has a manifest with the Class-Path attribute:::this.checkForSpecialAttributes
JarFile#entries2():::Returns an enumeration of the zip file entries excluding internal JAR mechanism entries and including signed entries missing from the ZIP directory.:::this.ensureInitialization->JUZFA.entries->jv.entries2->JUZFA.entries->unfilteredEntries.nextElement->je.getName->JarVerifier.isSigningRelated->unfilteredEntries.hasMoreElements->this.hasMoreElements->this.newEntry
JarInputStream#getManifest():::Returns the Manifest for this JAR file, or null if none.:::
JarInputStream#getNextEntry():::Reads the next ZIP file entry and positions the stream at the beginning of the entry data:::first.getName().equalsIgnoreCase->super.getNextEntry->this.checkManifest->jv.nothingToVerify->jv.beginEntry
JarInputStream#getNextJarEntry():::Reads the next JAR file entry and positions the stream at the beginning of the entry data:::this.getNextEntry
JarInputStream#read(byte[], int, int):::Reads from the current JAR file entry into an array of bytes:::super.read->jv.update
JarInputStream#createZipEntry(String):::Creates a new JarEntry (ZipEntry) for the specified JAR file entry name:::man.getAttributes
JarOutputStream#putNextEntry(ZipEntry):::Begins writing a new JAR file entry and positions the stream to the start of the entry data:::ze.getExtra->this.hasMagic->System.arraycopy->this.set16->this.set16->ze.setExtra->super.putNextEntry
JarVerifier#beginEntry(JarEntry, ManifestEntryVerifier):::This method scans to see which entry we're parsing and keeps various state information depending on what type of file is being parsed.:::je.getName->debug.println->je.getName->name.toUpperCase->uname.startsWith->uname.startsWith->je.isDirectory->mev.setEntry->uname.equals->uname.equals->SignatureFileVerifier.isBlockOrSF->baos.reset->mev.setEntry->this.doneWithMeta->je.isDirectory->mev.setEntry->name.startsWith->name.substring->name.startsWith->name.substring->name.equals->sigFileSigners.get->verifiedSigners.get->mev.setEntry->mev.setEntry
JarVerifier#getCerts(String):::Return an array of java.security.cert.Certificate objects for the given file in the jar.:::this.getCodeSigners->this.mapSignersToCertArray
JarVerifier#getCodeSigners(String):::return an array of CodeSigner objects for the given file in the jar:::verifiedSigners.get
JarVerifier#nothingToVerify():::returns true if there no files to verify:::
JarVerifier#doneWithMeta():::called to let us know we have processed all the META-INF entries, and if we re-read one of them, don't re-process it:::sigFileSigners.isEmpty->sigFileSigners.containsKey->sigFileSigners.remove->verifiedSigners.put
JarVerifier#isTrustedManifestEntry(String):::Returns whether the name is trusted:::verifiedSigners.get->sigFileSigners.get->verifiedSigners.get
Manifest#getMainAttributes():::Returns the main Attributes for the Manifest.:::
Manifest#getEntries():::Returns a Map of the entries contained in this Manifest:::
Manifest#getAttributes(String):::Returns the Attributes for the specified entry name:::getEntries().get
Manifest#getTrustedAttributes(String):::Returns the Attributes for the specified entry name, if trusted.:::this.getAttributes->jv.isTrustedManifestEntry
Manifest#clear():::Clears the main Attributes as well as the entries in this Manifest.:::attr.clear->entries.clear
Manifest#write(OutputStream):::Writes the Manifest to the specified OutputStream:::attr.writeMain->e.getKey->value.getBytes->buffer.append->this.make72Safe->buffer.append->buffer.toString->dos.writeBytes->e.getValue().write->entries.entrySet->dos.flush
Manifest#make72Safe(StringBuffer):::Adds line breaks to enforce a maximum 72 bytes per line.:::line.length->line.insert
Manifest#read(InputStream):::Reads the Manifest from the specified InputStream:::attr.read->System.arraycopy->System.arraycopy->fis.peek->this.parseName->fis.peek->System.arraycopy->this.getAttributes->entries.put->attr.read->attr.size->Math.max->fis.readLine
Manifest#equals(Object):::Returns true if the specified Object is also a Manifest and has the same main Attributes and entries.:::m.getMainAttributes->attr.equals->m.getEntries->entries.equals
Manifest#hashCode():::Returns the hash code for this Manifest.:::attr.hashCode->entries.hashCode
Manifest#clone():::Returns a shallow copy of this Manifest:::
Pack200#newPacker():::Obtain new instance of a class that implements Packer:::this.newInstance
Pack200.Packer#properties():::Get the set of this engine's properties:::
Pack200.Packer#pack(JarFile, OutputStream):::Takes a JarFile and converts it into a Pack200 archive:::
Pack200.Packer#pack(JarInputStream, OutputStream):::Takes a JarInputStream and converts it into a Pack200 archive:::
Pack200.Unpacker#properties():::Get the set of this engine's properties:::
Pack200.Unpacker#unpack(InputStream, JarOutputStream):::Read a Pack200 archive, and write the encoded JAR to a JarOutputStream:::
Pack200.Unpacker#unpack(File, JarOutputStream):::Read a Pack200 archive, and write the encoded JAR to a JarOutputStream:::

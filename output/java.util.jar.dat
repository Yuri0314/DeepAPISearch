java.util.jar.Attributes#get(Object)->Object:::Returns the value of the specified attribute name, or null if the attribute name was not found.
java.util.jar.Attributes#getValue(String)->String:::Returns the value of the specified attribute name, specified as a string, or null if the attribute was not found
java.util.jar.Attributes#getValue(Name)->String:::Returns the value of the specified Attributes.Name, or null if the attribute was not found
java.util.jar.Attributes#put(Object, Object)->Object:::Associates the specified value with the specified attribute name (key) in this Map
java.util.jar.Attributes#putValue(String, String)->String:::Associates the specified value with the specified attribute name, specified as a String
java.util.jar.Attributes#remove(Object)->Object:::Removes the attribute with the specified name (key) from this Map
java.util.jar.Attributes#containsValue(Object)->boolean:::Returns true if this Map maps one or more attribute names (keys) to the specified value.
java.util.jar.Attributes#containsKey(Object)->boolean:::Returns true if this Map contains the specified attribute name (key).
java.util.jar.Attributes#putAll(Map<?, ?>)->void:::Copies all of the attribute name-value mappings from the specified Attributes to this Map
java.util.jar.Attributes#clear()->void:::Removes all attributes from this Map.
java.util.jar.Attributes#size()->int:::Returns the number of attributes in this Map.
java.util.jar.Attributes#isEmpty()->boolean:::Returns true if this Map contains no attributes.
java.util.jar.Attributes#keySet()->Set<Object>:::Returns a Set view of the attribute names (keys) contained in this Map.
java.util.jar.Attributes#values()->Collection<Object>:::Returns a Collection view of the attribute values contained in this Map.
java.util.jar.Attributes#entrySet()->Set<Map.Entry<Object, Object>>:::Returns a Collection view of the attribute name-value mappings contained in this Map.
java.util.jar.Attributes#equals(Object)->boolean:::Compares the specified Attributes object with this Map for equality
java.util.jar.Attributes#hashCode()->int:::Returns the hash code value for this Map.
java.util.jar.Attributes#clone()->Object:::Returns a copy of the Attributes, implemented as follows:      public Object clone() { return new Attributes(this); }  Since the attribute names and values are themselves immutable, the Attributes returned can be safely modified without affecting the original.
java.util.jar.Attributes#write(DataOutputStream)->void:::
java.util.jar.Attributes#writeMain(DataOutputStream)->void:::
java.util.jar.Attributes#read(Manifest.FastInputStream, byte[])->void:::
java.util.jar.Attributes.Name#of(String)->Name:::
java.util.jar.Attributes.Name#equals(Object)->boolean:::Compares this attribute name to another for equality.
java.util.jar.Attributes.Name#hashCode()->int:::Computes the hash value for this attribute name.
java.util.jar.Attributes.Name#toString()->String:::Returns the attribute name as a String.
java.util.jar.JarEntry#getAttributes()->Attributes:::Returns the Manifest Attributes for this entry, or null if none.
java.util.jar.JarEntry#getCertificates()->Certificate[]:::Returns the Certificate objects for this entry, or null if none
java.util.jar.JarEntry#getCodeSigners()->CodeSigner[]:::Returns the CodeSigner objects for this entry, or null if none
java.util.jar.JarEntry#getRealName()->String:::Returns the real name of this JarEntry
java.util.jar.JarFile#baseVersion()->Runtime.Version:::Returns the version that represents the unversioned configuration of a multi-release jar file.
java.util.jar.JarFile#runtimeVersion()->Runtime.Version:::Returns the version that represents the effective runtime versioned configuration of a multi-release jar file
java.util.jar.JarFile#getVersion()->Runtime.Version:::Returns the maximum version used when searching for versioned entries
java.util.jar.JarFile#isMultiRelease()->boolean:::Indicates whether or not this jar file is a multi-release jar file.
java.util.jar.JarFile#getManifest()->Manifest:::Returns the jar file manifest, or null if none.
java.util.jar.JarFile#getJarEntry(String)->JarEntry:::Returns the JarEntry for the given base entry name or null if not found
java.util.jar.JarFile#getEntry(String)->ZipEntry:::Returns the ZipEntry for the given base entry name or null if not found
java.util.jar.JarFile#entries()->Enumeration<JarEntry>:::Returns an enumeration of the jar file entries.
java.util.jar.JarFile#stream()->Stream<JarEntry>:::Returns an ordered Stream over the jar file entries
java.util.jar.JarFile#versionedStream()->Stream<JarEntry>:::Returns a Stream of the versioned jar file entries
java.util.jar.JarFile#getRealName(JarEntry)->String:::
java.util.jar.JarFile#getInputStream(ZipEntry)->InputStream:::Returns an input stream for reading the contents of the specified zip file entry.
java.util.jar.JarFile#hasClassPathAttribute()->boolean:::Returns true iff this JAR file has a manifest with the Class-Path attribute
java.util.jar.JarFile#ensureInitialization()->void:::
java.util.jar.JarFile#isInitializing()->boolean:::
java.util.jar.JarFile#newEntry(JarEntry)->JarEntry:::
java.util.jar.JarFile#newEntry(String)->JarEntry:::
java.util.jar.JarFile#entryNames(CodeSource[])->Enumeration<String>:::
java.util.jar.JarFile#entries2()->Enumeration<JarEntry>:::Returns an enumeration of the zip file entries excluding internal JAR mechanism entries and including signed entries missing from the ZIP directory.
java.util.jar.JarFile#getCodeSources(URL)->CodeSource[]:::
java.util.jar.JarFile#getCodeSource(URL, String)->CodeSource:::
java.util.jar.JarFile#setEagerValidation(boolean)->void:::
java.util.jar.JarFile#getManifestDigests()->List<Object>:::
java.util.jar.JarInputStream#getManifest()->Manifest:::Returns the Manifest for this JAR file, or null if none.
java.util.jar.JarInputStream#getNextEntry()->ZipEntry:::Reads the next ZIP file entry and positions the stream at the beginning of the entry data
java.util.jar.JarInputStream#getNextJarEntry()->JarEntry:::Reads the next JAR file entry and positions the stream at the beginning of the entry data
java.util.jar.JarInputStream#read(byte[], int, int)->int:::Reads from the current JAR file entry into an array of bytes
java.util.jar.JarInputStream#createZipEntry(String)->ZipEntry:::Creates a new JarEntry (ZipEntry) for the specified JAR file entry name
java.util.jar.JarOutputStream#putNextEntry(ZipEntry)->void:::Begins writing a new JAR file entry and positions the stream to the start of the entry data
java.util.jar.JarVerifier#beginEntry(JarEntry, ManifestEntryVerifier)->void:::This method scans to see which entry we're parsing and keeps various state information depending on what type of file is being parsed.
java.util.jar.JarVerifier#update(int, ManifestEntryVerifier)->void:::
java.util.jar.JarVerifier#update(int, byte[], int, int, ManifestEntryVerifier)->void:::
java.util.jar.JarVerifier#getCerts(String)->java.security.cert.Certificate[]:::Return an array of java.security.cert.Certificate objects for the given file in the jar.
java.util.jar.JarVerifier#getCerts(JarFile, JarEntry)->java.security.cert.Certificate[]:::
java.util.jar.JarVerifier#getCodeSigners(String)->CodeSigner[]:::return an array of CodeSigner objects for the given file in the jar
java.util.jar.JarVerifier#getCodeSigners(JarFile, JarEntry)->CodeSigner[]:::
java.util.jar.JarVerifier#nothingToVerify()->boolean:::returns true if there no files to verify
java.util.jar.JarVerifier#doneWithMeta()->void:::called to let us know we have processed all the META-INF entries, and if we re-read one of them, don't re-process it
java.util.jar.JarVerifier.VerifierStream#read()->int:::
java.util.jar.JarVerifier.VerifierStream#read(byte[], int, int)->int:::
java.util.jar.JarVerifier.VerifierStream#close()->void:::
java.util.jar.JarVerifier.VerifierStream#available()->int:::
java.util.jar.JarVerifier#entryNames(JarFile, CodeSource[])->Enumeration<String>:::
java.util.jar.JarVerifier#entries2(JarFile, Enumeration<JarEntry>)->Enumeration<JarEntry>:::
java.util.jar.JarVerifier#isSigningRelated(String)->boolean:::
java.util.jar.JarVerifier#getCodeSources(JarFile, URL)->CodeSource[]:::
java.util.jar.JarVerifier#getCodeSource(URL, String)->CodeSource:::
java.util.jar.JarVerifier#getCodeSource(URL, JarFile, JarEntry)->CodeSource:::
java.util.jar.JarVerifier#setEagerValidation(boolean)->void:::
java.util.jar.JarVerifier#getManifestDigests()->List<Object>:::
java.util.jar.JarVerifier#getUnsignedCS(URL)->CodeSource:::
java.util.jar.JarVerifier#isTrustedManifestEntry(String)->boolean:::Returns whether the name is trusted
java.util.jar.JavaUtilJarAccessImpl#jarFileHasClassPathAttribute(JarFile)->boolean:::
java.util.jar.JavaUtilJarAccessImpl#getCodeSources(JarFile, URL)->CodeSource[]:::
java.util.jar.JavaUtilJarAccessImpl#getCodeSource(JarFile, URL, String)->CodeSource:::
java.util.jar.JavaUtilJarAccessImpl#entryNames(JarFile, CodeSource[])->Enumeration<String>:::
java.util.jar.JavaUtilJarAccessImpl#entries2(JarFile)->Enumeration<JarEntry>:::
java.util.jar.JavaUtilJarAccessImpl#setEagerValidation(JarFile, boolean)->void:::
java.util.jar.JavaUtilJarAccessImpl#getManifestDigests(JarFile)->List<Object>:::
java.util.jar.JavaUtilJarAccessImpl#getTrustedAttributes(Manifest, String)->Attributes:::
java.util.jar.JavaUtilJarAccessImpl#ensureInitialization(JarFile)->void:::
java.util.jar.JavaUtilJarAccessImpl#isInitializing()->boolean:::
java.util.jar.Manifest#getMainAttributes()->Attributes:::Returns the main Attributes for the Manifest.
java.util.jar.Manifest#getEntries()->Map<String, Attributes>:::Returns a Map of the entries contained in this Manifest
java.util.jar.Manifest#getAttributes(String)->Attributes:::Returns the Attributes for the specified entry name
java.util.jar.Manifest#getTrustedAttributes(String)->Attributes:::Returns the Attributes for the specified entry name, if trusted.
java.util.jar.Manifest#clear()->void:::Clears the main Attributes as well as the entries in this Manifest.
java.util.jar.Manifest#write(OutputStream)->void:::Writes the Manifest to the specified OutputStream
java.util.jar.Manifest#make72Safe(StringBuffer)->void:::Adds line breaks to enforce a maximum 72 bytes per line.
java.util.jar.Manifest#read(InputStream)->void:::Reads the Manifest from the specified InputStream
java.util.jar.Manifest#equals(Object)->boolean:::Returns true if the specified Object is also a Manifest and has the same main Attributes and entries.
java.util.jar.Manifest#hashCode()->int:::Returns the hash code for this Manifest.
java.util.jar.Manifest#clone()->Object:::Returns a shallow copy of this Manifest
java.util.jar.Manifest.FastInputStream#read()->int:::
java.util.jar.Manifest.FastInputStream#read(byte[], int, int)->int:::
java.util.jar.Manifest.FastInputStream#readLine(byte[], int, int)->int:::
java.util.jar.Manifest.FastInputStream#peek()->byte:::
java.util.jar.Manifest.FastInputStream#readLine(byte[])->int:::
java.util.jar.Manifest.FastInputStream#skip(long)->long:::
java.util.jar.Manifest.FastInputStream#available()->int:::
java.util.jar.Manifest.FastInputStream#close()->void:::
java.util.jar.Pack200#newPacker()->Packer:::Obtain new instance of a class that implements Packer
java.util.jar.Pack200#newUnpacker()->Unpacker:::
java.util.jar.Pack200.Packer#properties()->SortedMap<String, String>:::Get the set of this engine's properties
java.util.jar.Pack200.Packer#pack(JarFile, OutputStream)->void:::Takes a JarFile and converts it into a Pack200 archive
java.util.jar.Pack200.Packer#pack(JarInputStream, OutputStream)->void:::Takes a JarInputStream and converts it into a Pack200 archive
java.util.jar.Pack200.Unpacker#properties()->SortedMap<String, String>:::Get the set of this engine's properties
java.util.jar.Pack200.Unpacker#unpack(InputStream, JarOutputStream)->void:::Read a Pack200 archive, and write the encoded JAR to a JarOutputStream
java.util.jar.Pack200.Unpacker#unpack(File, JarOutputStream)->void:::Read a Pack200 archive, and write the encoded JAR to a JarOutputStream

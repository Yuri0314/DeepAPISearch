sun.tools.asm.Assembler#add(Instruction)->void:::Add an instruction
sun.tools.asm.Assembler#add(long, int)->void::: assembler add
sun.tools.asm.Assembler#add(long, int, Object)->void::: assembler add
sun.tools.asm.Assembler#add(long, int, Object, boolean)->void::: assembler add
sun.tools.asm.Assembler#add(boolean, long, int, Object)->void::: assembler add
sun.tools.asm.Assembler#add(long, int, boolean)->void::: assembler add
sun.tools.asm.Assembler#optimize(Environment, Label)->void:::Optimize instructions and mark those that can be reached
sun.tools.asm.Assembler#eliminate()->boolean:::Eliminate instructions that are not reached
sun.tools.asm.Assembler#optimize(Environment)->void:::Optimize the byte codes
sun.tools.asm.Assembler#collect(Environment, MemberDefinition, ConstantPool)->void:::Collect all constants into the constant table
sun.tools.asm.Assembler#balance(Label, int)->void:::Determine stack size, count local variables
sun.tools.asm.Assembler#write(Environment, DataOutputStream, MemberDefinition, ConstantPool)->void:::Generate code
sun.tools.asm.Assembler#writeExceptions(Environment, DataOutputStream, ConstantPool, Instruction, Instruction)->void:::Write the exceptions table
sun.tools.asm.Assembler#writeCoverageTable(Environment, ClassDefinition, DataOutputStream, ConstantPool, long)->void:::Write the coverage table
sun.tools.asm.Assembler#addNativeToJcovTab(Environment, ClassDefinition)->void::: assembler add native to jcov tab
sun.tools.asm.Assembler#GenVecJCov(Environment, ClassDefinition, long)->void::: assembler  gen vec cov
sun.tools.asm.Assembler#GenJCov(Environment)->void::: assembler  gen cov
sun.tools.asm.Assembler#writeLineNumberTable(Environment, DataOutputStream, ConstantPool)->void:::Write the linenumber table
sun.tools.asm.Assembler#flowFields(Environment, Label, MemberDefinition[])->void:::Figure out when registers contain a legal value
sun.tools.asm.Assembler#writeLocalVariableTable(Environment, MemberDefinition, DataOutputStream, ConstantPool)->void:::Write the local variable table
sun.tools.asm.Assembler#empty()->boolean:::Return true if empty
sun.tools.asm.Assembler#listing(PrintStream)->void:::Print the byte codes
sun.tools.asm.CatchData#getLabel()->Label:::Get the label
sun.tools.asm.CatchData#getType()->Object:::Get the clazz
sun.tools.asm.ClassConstantData#write(Environment, DataOutputStream, ConstantPool)->void:::Write the constant to the output stream
sun.tools.asm.ClassConstantData#order()->int:::Return the order of the constant
sun.tools.asm.ClassConstantData#toString()->String::: class constant data to string
sun.tools.asm.ConstantPool#index(Object)->int:::Find an entry, may return 0
sun.tools.asm.ConstantPool#put(Object)->void:::Add an entry
sun.tools.asm.ConstantPool#write(Environment, DataOutputStream)->void:::Write to output
sun.tools.asm.ConstantPoolData#write(Environment, DataOutputStream, ConstantPool)->void:::Write the constant to the output stream
sun.tools.asm.ConstantPoolData#order()->int:::Return the order of the constant
sun.tools.asm.ConstantPoolData#width()->int:::Return the number of entries that it takes up in the constant pool
sun.tools.asm.FieldConstantData#write(Environment, DataOutputStream, ConstantPool)->void:::Write the constant to the output stream
sun.tools.asm.FieldConstantData#order()->int:::Return the order of the constant
sun.tools.asm.Instruction#getOpcode()->int:::Accessor
sun.tools.asm.Instruction#getValue()->Object::: instruction get value
sun.tools.asm.Instruction#setValue(Object)->void::: instruction set value
sun.tools.asm.Instruction#optimize(Environment)->void:::Optimize
sun.tools.asm.Instruction#collect(ConstantPool)->void:::Collect constants into the constant table
sun.tools.asm.Instruction#balance()->int:::Balance the stack
sun.tools.asm.Instruction#size(ConstantPool)->int:::Return the size of the instruction
sun.tools.asm.Instruction#write(DataOutputStream, ConstantPool)->void:::Generate code
sun.tools.asm.Instruction#toString()->String:::toString
sun.tools.asm.Label#getDestination()->Label:::Get the final destination, eliminate jumps gotos, and jumps to labels that are immediately folowed by another label
sun.tools.asm.Label#toString()->String::: label to string
sun.tools.asm.LocalVariable#toString()->String::: local variable to string
sun.tools.asm.LocalVariableTable#define(MemberDefinition, int, int, int)->void:::Define a new local variable
sun.tools.asm.LocalVariableTable#write(Environment, DataOutputStream, ConstantPool)->void:::Write out the data.
sun.tools.asm.NameAndTypeConstantData#write(Environment, DataOutputStream, ConstantPool)->void:::Write the constant to the output stream
sun.tools.asm.NameAndTypeConstantData#order()->int:::Return the order of the constant
sun.tools.asm.NameAndTypeData#hashCode()->int:::Hashcode
sun.tools.asm.NameAndTypeData#equals(Object)->boolean:::Equality
sun.tools.asm.NameAndTypeData#toString()->String:::Convert to string
sun.tools.asm.NumberConstantData#write(Environment, DataOutputStream, ConstantPool)->void:::Write the constant to the output stream
sun.tools.asm.NumberConstantData#order()->int:::Return the order of the constant
sun.tools.asm.NumberConstantData#width()->int:::Return the number of entries that it takes up in the constant pool
sun.tools.asm.StringConstantData#write(Environment, DataOutputStream, ConstantPool)->void:::Write the constant to the output stream
sun.tools.asm.StringConstantData#order()->int:::Return the order of the constant
sun.tools.asm.StringConstantData#toString()->String:::toString
sun.tools.asm.StringExpressionConstantData#write(Environment, DataOutputStream, ConstantPool)->void:::Write the constant to the output stream
sun.tools.asm.StringExpressionConstantData#order()->int:::Return the order of the constant
sun.tools.asm.StringExpressionConstantData#toString()->String:::toString
sun.tools.asm.SwitchData#get(int)->Label:::Get a label
sun.tools.asm.SwitchData#get(Integer)->Label:::Get a label
sun.tools.asm.SwitchData#add(int, Label)->void:::Add a label
sun.tools.asm.SwitchData#getDefaultLabel()->Label:::Get the default label
sun.tools.asm.SwitchData#sortedKeys()->Enumeration:::Return the keys of this enumaration sorted in ascending order
sun.tools.asm.SwitchData#initTableCase()->void::: switch data init table case
sun.tools.asm.SwitchData#addTableCase(int, long)->void::: switch data add table case
sun.tools.asm.SwitchData#addTableDefault(long)->void::: switch data add table default
sun.tools.asm.SwitchData#whereCase(Object)->long::: switch data where case
sun.tools.asm.SwitchData#getDefault()->boolean::: switch data get default
sun.tools.asm.SwitchDataEnumeration#hasMoreElements()->boolean:::Are there more keys to return?
sun.tools.asm.SwitchDataEnumeration#nextElement()->Integer:::Return the next key.
sun.tools.asm.TryData#add(Object)->CatchData:::Add a label
sun.tools.asm.TryData#getCatch(int)->CatchData:::Get a label
sun.tools.asm.TryData#getEndLabel()->Label:::Get the default label

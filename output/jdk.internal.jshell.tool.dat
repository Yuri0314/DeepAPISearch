ArgTokenizer#next():::Return the next non-option argument:::while->nextToken->if->isQuoted->sval->startsWith->opt->sval->startsWith->sval->substring->foundOption->else->break->return
ArgTokenizer#foundOption(String)::: arg tokenizer found option:::if->options->containsKey->options->put->return->matches->options->entrySet->stream->e->getKey->startsWith->filter->toList->collect->if->matches->size->matches->get->setValue->else->badOptions->add
ArgTokenizer#allowedOptions(String...):::Set the allowed options:::foreach->options->putIfAbsent
ArgTokenizer#isAllowedOption(String):::Is the specified option allowed.:::has->options->get->return
ArgTokenizer#hasOption(String):::Has the specified option been encountered.:::has->options->get->if->throw->new->InternalError->return
ArgTokenizer#optionCount():::Return the number of encountered options:::return->options->entrySet->stream->Entry->getValue->filter->count
ArgTokenizer#badOptions():::Return the bad options encountered:::return->String->join
ArgTokenizer#remainder():::Consume the remainder of the input:::rem->new->ArrayList<>->while->next->rem->add->return->String->join
ArgTokenizer#val()::: arg tokenizer val:::return
ArgTokenizer#isQuoted()::: arg tokenizer is quoted:::return
ArgTokenizer#whole()::: arg tokenizer whole:::return
ArgTokenizer#mark()::: arg tokenizer mark:::
ArgTokenizer#rewind()::: arg tokenizer rewind:::
ArgTokenizer#read():::Reads a single character.:::if->return->return->str->charAt
ArgTokenizer#whitespaceChars(int, int):::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are white space characters:::if->if->while
ArgTokenizer#quoteChar(int):::Specifies that matching pairs of this character delimit string constants in this tokenizer:::if
ArgTokenizer#unicode2ctype(int)::: arg tokenizer unicode2ctype:::switch->return->return
ArgTokenizer#nextToken():::Parses the next token of this tokenizer.:::ct->c->lctype->do->read->if->return->unicode2ctype->while->if->i->do->if->Arrays->copyOf->read->unicode2ctype->while->if->String->copyValueOf->return->if->quote->i->d->read->while->if->read->first->if->c2->read->if->read->if->read->else->else->else->switch->break->break->break->break->break->break->break->read->else->read->if->Arrays->copyOf->if->String->copyValueOf
ConsoleIOContext#readLine(String, String)::: console context read line:::try->return->in->readLine->catch->throw->new->InputInterruptedException->initCause->finally
ConsoleIOContext#interactiveOutput()::: console context interactive output:::return
ConsoleIOContext#history(boolean)::: console context history:::return->history->entries
ConsoleIOContext#close()::: console context close:::foreach->keys->if->key->startsWith->remove->savedHistory->history->save->if->savedHistory->isEmpty->len->Math->Math->savedHistory->size->log10->ceil->format->index->foreach->String->format->put->flush->in->close->try->in->getTerminal->restore->catch->throw->new->IOException->finally->input->shutdown
ConsoleIOContext#bind(String, Object)::: console context bind:::km->in->getKeys->for->i->shortcut->length
ConsoleIOContext#complete(CompletionState)::: console context complete:::try->text->in->getCursorBuffer->toString->cursor->in->getCursorBuffer->todo->if->todo->isEmpty->ConsoleIOContextTestSupport->willComputeCompletion->anchor->new->intArr->suggestions->doc->command->prefix->isEmpty->text->startsWith->if->repl->commandCompletionSuggestions->repl->commandDocumentation->else->prefixLength->prefix->length->completionSuggestions->prefix->length->documentation->stream->Documentation->signature->map->Collectors->toList->collect->smartCount->suggestions->stream->Suggestion->matchesType->filter->count->hasSmart->in->getAutoprintThreshold->hasBoth->suggestions->stream->s->matchesType->map->distinct->count->tooManyItems->suggestions->size->in->getAutoprintThreshold->ordinaryCompletion->doc->isEmpty->new->OrdinaryCompletionTask->allCompletion->new->AllSuggestionsCompletionTask->new->ArrayList<>->if->shortDocumentation->new->CommandSynopsisTask->fullDocumentation->new->CommandFullDocumentationTask->if->doc->isEmpty->if->todo->new->NoopCompletionTask->add->todo->add->else->todo->add->todo->add->todo->add->else->todo->new->NoSuchCommandCompletionTask->add->else->if->doc->isEmpty->if->todo->add->else->if->todo->new->NoopCompletionTask->add->if->todo->add->else->shortDocumentation->new->ExpressionSignaturesTask->fullDocumentation->new->ExpressionJavadocTask->if->todo->add->todo->add->if->todo->add->if->todo->todo->size->add->else->todo->add->success->repaint->while->todo->isEmpty->result->todo->remove->perform->switch->break->todo->clear->if->todo->isEmpty->in->println->in->todo->get->description->println->break->if->in->redrawLine->in->flush->return->catch->throw->new->IllegalStateException->finally
ConsoleIOContext#doPrintFullDocumentation(List, List, boolean)::: console context do print full documentation:::if->doc->isEmpty->term->in->getTerminal->pageHeight->term->getHeight->thisTODO->new->ArrayList<>->for->docIt->doc->iterator->docIt->hasNext->todo->addAll->return->return
ConsoleIOContext#commonPrefix(String, String)::: console context common prefix:::for->i->str2->length->return
ConsoleIOContext.CompletionTask#description()::: completion task description:::
ConsoleIOContext.CompletionTask#perform(String, int)::: completion task perform:::
ConsoleIOContext.NoopCompletionTask#description()::: noop completion task description:::throw->new->UnsupportedOperationException
ConsoleIOContext.NoopCompletionTask#perform(String, int)::: noop completion task perform:::return
ConsoleIOContext.NoSuchCommandCompletionTask#description()::: no such command completion task description:::throw->new->UnsupportedOperationException
ConsoleIOContext.NoSuchCommandCompletionTask#perform(String, int)::: no such command completion task perform:::in->println->in->repl->getResourceString->println->in->println->return
ConsoleIOContext.OrdinaryCompletionTask#description()::: ordinary completion task description:::throw->new->UnsupportedOperationException
ConsoleIOContext.OrdinaryCompletionTask#perform(String, int)::: ordinary completion task perform:::toShow->if->suggestions->stream->Suggestion->matchesType->filter->Suggestion->continuation->map->distinct->Collectors->toList->collect->else->suggestions->stream->Suggestion->continuation->map->distinct->Collectors->toList->collect->if->toShow->isEmpty->return->prefix->suggestions->stream->Suggestion->continuation->map->ConsoleIOContext->commonPrefix->reduce->prefixStr->prefix->orElse->substring->in->putString->showItems->toShow->size->if->in->println->in->printColumns->if->prefixStr->isEmpty->return->return
ConsoleIOContext.AllSuggestionsCompletionTask#description()::: all suggestions completion task description:::if->suggestions->size->in->getAutoprintThreshold->return->repl->getResourceString->else->return->repl->suggestions->size->messageFormat
ConsoleIOContext.AllSuggestionsCompletionTask#perform(String, int)::: all suggestions completion task perform:::candidates->suggestions->stream->Suggestion->continuation->map->distinct->Collectors->toList->collect->prefix->candidates->stream->ConsoleIOContext->commonPrefix->reduce->prefixStr->prefix->str->substring->map->orElse->in->putString->if->candidates->size->in->println->in->printColumns->return->suggestions->isEmpty
ConsoleIOContext.CommandSynopsisTask#description()::: command synopsis task description:::return->repl->getResourceString
ConsoleIOContext.CommandSynopsisTask#perform(String, int)::: command synopsis task perform:::try->in->println->in->synopsis->stream->l->replaceAll->map->Collectors->joining->collect->println->catch->throw->new->IllegalStateException->finally->return
ConsoleIOContext.CommandFullDocumentationTask#description()::: command full documentation task description:::return->repl->getResourceString
ConsoleIOContext.CommandFullDocumentationTask#perform(String, int)::: command full documentation task perform:::fullDoc->repl->commandDocumentation->return->doPrintFullDocumentation
ConsoleIOContext.ExpressionSignaturesTask#description()::: expression signatures task description:::throw->new->UnsupportedOperationException
ConsoleIOContext.ExpressionSignaturesTask#perform(String, int)::: expression signatures task perform:::in->println->in->repl->getResourceString->println->in->doc->stream->Collectors->joining->collect->println->return
ConsoleIOContext.ExpressionJavadocTask#description()::: expression javadoc task description:::return->repl->getResourceString
ConsoleIOContext.ExpressionJavadocTask#perform(String, int)::: expression javadoc task perform:::term->in->getTerminal->formatter->term->getWidth->term->isAnsiSupported->new->JavadocFormatter->convertor->formatter->d->signature->d->javadoc->formatJavadoc->d->javadoc->repl->messageFormat->doc->prefix->length->documentation->stream->map->Collectors->toList->collect->return->doPrintFullDocumentation
ConsoleIOContext#terminalEditorRunning()::: console context terminal editor running:::terminal->in->getTerminal->if->return->isRaw->return
ConsoleIOContext#suspend()::: console context suspend:::terminal->in->getTerminal->if->suspend
ConsoleIOContext#resume()::: console context resume:::terminal->in->getTerminal->if->resume
ConsoleIOContext#beforeUserCode()::: console context before user code:::synchronized->input->setState
ConsoleIOContext#afterUserCode()::: console context after user code:::input->setState
ConsoleIOContext#replaceLastHistoryEntry(String)::: console context replace last history entry:::history->fullHistoryReplace
ConsoleIOContext#fixes()::: console context fixes:::try->c->in->readCharacter->if->return->foreach->if->fixes->return->readOutRemainingEscape->in->beep->in->println->in->repl->getResourceString->println->in->redrawLine->in->flush->catch->ex->printStackTrace->finally
ConsoleIOContext#readOutRemainingEscape(int)::: console context read out remaining escape:::if->inp->in->getInput->if->nbis->while->nbis->isNonBlockingEnabled->nbis->peek->in->readCharacter
ConsoleIOContext#fixes(FixComputer)::: console context fixes:::input->in->getCursorBuffer->toString->cursor->prefix->length->in->getCursorBuffer->candidates->computer->compute->try->printError->isEmpty->if->in->println->if->isEmpty->in->beep->if->in->redrawLine->in->flush->else->if->size->if->in->redrawLine->in->flush->get->perform->else->fixes->new->ArrayList<>->fixes->new->Fix->add->char2Fix->new->HashMap<>->in->println->for->i->fixes->size->in->repl->messageFormat->print->in->flush->read->in->readCharacter->fix->char2Fix->get->if->in->beep->fixes->get->in->println->fix->perform->in->flush->catch->throw->new->IllegalStateException->finally
ConsoleIOContext#readUserInput()::: console context read user input:::while->prevHandleUserInterrupt->in->getHandleUserInterrupt->prevHistory->in->getHistory->try->input->setState->in->setHandleUserInterrupt->in->setHistory->in->readLine->System->getProperty->getBytes->catch->throw->new->InterruptedIOException->finally->in->setHistory->in->setHandleUserInterrupt->input->setState->return
ConsoleIOContext.Fix#displayName():::A name that should be shown to the user.:::
ConsoleIOContext.Fix#perform(ConsoleReader):::Perform the given action.:::
ConsoleIOContext.FixComputer#compute(JShellTool, String, int):::Compute possible actions for the given code.:::
ConsoleIOContext.JShellUnixTerminal#isRaw()::: shell unix terminal is raw:::try->return->getSettings->get->contains->catch->return->finally
ConsoleIOContext.JShellUnixTerminal#wrapInIfNeeded(InputStream)::: shell unix terminal wrap in if needed:::return->input->super->wrapInIfNeeded->setInputStream
ConsoleIOContext.JShellUnixTerminal#disableInterruptCharacter()::: shell unix terminal disable interrupt character:::
ConsoleIOContext.JShellUnixTerminal#enableInterruptCharacter()::: shell unix terminal enable interrupt character:::
ConsoleIOContext.JShellUnixTerminal#suspend()::: shell unix terminal suspend:::try->getSettings->restore->super->disableInterruptCharacter->catch->throw->new->IllegalStateException->finally
ConsoleIOContext.JShellUnixTerminal#resume()::: shell unix terminal resume:::try->init->catch->throw->new->IllegalStateException->finally
ConsoleIOContext.JShellWindowsTerminal#init()::: shell windows terminal init:::super->init->setAnsiSupported
ConsoleIOContext.JShellWindowsTerminal#wrapInIfNeeded(InputStream)::: shell windows terminal wrap in if needed:::return->input->super->wrapInIfNeeded->setInputStream
ConsoleIOContext.JShellWindowsTerminal#suspend()::: shell windows terminal suspend:::try->restore->getConsoleMode->setConsoleMode->catch->throw->new->IllegalStateException->finally
ConsoleIOContext.JShellWindowsTerminal#resume()::: shell windows terminal resume:::try->restore->init->catch->throw->new->IllegalStateException->finally
ConsoleIOContext.JShellWindowsTerminal#isRaw()::: shell windows terminal is raw:::return->getConsoleMode
ConsoleIOContext.TestTerminal#wrapInIfNeeded(InputStream)::: test terminal wrap in if needed:::return->input->super->wrapInIfNeeded->setInputStream
ConsoleIOContext.TestTerminal#getHeight()::: test terminal get height:::return
ConsoleIOContext.SuspendableTerminal#suspend()::: suspendable terminal suspend:::
ConsoleIOContext.SuspendableTerminal#resume()::: suspendable terminal resume:::
ConsoleIOContext.SuspendableTerminal#isRaw()::: suspendable terminal is raw:::
ConsoleIOContext.CheckCompletionKeyMap#bind(CharSequence, Object)::: check completion key map bind:::del->bind
ConsoleIOContext.CheckCompletionKeyMap#bindIfNotBound(CharSequence, Object)::: check completion key map bind if not bound:::del->bindIfNotBound
ConsoleIOContext.CheckCompletionKeyMap#from(KeyMap)::: check completion key map from:::del->from
ConsoleIOContext.CheckCompletionKeyMap#getAnotherKey()::: check completion key map get another key:::return->del->getAnotherKey
ConsoleIOContext.CheckCompletionKeyMap#getBound(CharSequence)::: check completion key map get bound:::return->del->getBound
ConsoleIOContext.CheckCompletionKeyMap#setBlinkMatchingParen(boolean)::: check completion key map set blink matching paren:::del->setBlinkMatchingParen
ConsoleIOContext.CheckCompletionKeyMap#toString()::: check completion key map to string:::return->del->toString
ConsoleIOContextTestSupport#willComputeCompletion()::: console context test support will compute completion:::if->IMPL->willComputeCompletionCallback
ConsoleIOContextTestSupport#willComputeCompletionCallback()::: console context test support will compute completion callback:::
ContinuousCompletionProvider#completionSuggestions(String, int, int[])::: continuous completion provider completion suggestions:::prefix->input->substring->space->prefix->indexOf->result->wordCompletionProvider->wordCompletionProviderSupplier->get->if->wordCompletionProvider->keySet->stream->distinct->key->startsWith->filter->new->JShellTool.ArgSuggestion->map->else->rest->prefix->substring->word->prefix->substring->candidates->wordCompletionProvider->entrySet->stream->matcher->e->getKey->test->filter->Map.Entry->getValue->map->toList->collect->if->candidates->size->candidates->get->completionSuggestions->stream->else->Stream->empty->return->result->Suggestion->continuation->comparing->sorted->toList->collect
Feedback#shouldDisplayCommandFluff()::: feedback should display command fluff:::return
Feedback#getPre()::: feedback get pre:::return->mode->format
Feedback#getPost()::: feedback get post:::return->mode->format
Feedback#getErrorPre()::: feedback get error pre:::return->mode->format
Feedback#getErrorPost()::: feedback get error post:::return->mode->format
Feedback#format(FormatCase, FormatAction, FormatWhen, FormatResolve, FormatUnresolved, FormatErrors, String, String, String, String, List)::: feedback format:::return->mode->format
Feedback#format(String, FormatCase, FormatAction, FormatWhen, FormatResolve, FormatUnresolved, FormatErrors, String, String, String, String, List)::: feedback format:::return->mode->format
Feedback#truncateVarValue(String)::: feedback truncate var value:::return->mode->truncateVarValue
Feedback#getPrompt(String)::: feedback get prompt:::return->mode->getPrompt
Feedback#getContinuationPrompt(String)::: feedback get continuation prompt:::return->mode->getContinuationPrompt
Feedback#setFeedback(MessageHandler, ArgTokenizer, Consumer)::: feedback set feedback:::return->new->Setter->setFeedback
Feedback#setFormat(MessageHandler, ArgTokenizer)::: feedback set format:::return->new->Setter->setFormat
Feedback#setTruncation(MessageHandler, ArgTokenizer)::: feedback set truncation:::return->new->Setter->setTruncation
Feedback#setMode(MessageHandler, ArgTokenizer, Consumer)::: feedback set mode:::return->new->Setter->setMode
Feedback#setPrompt(MessageHandler, ArgTokenizer)::: feedback set prompt:::return->new->Setter->setPrompt
Feedback#restoreEncodedModes(MessageHandler, String)::: feedback restore encoded modes:::return->new->ArgTokenizer->new->Setter->restoreEncodedModes
Feedback#markModesReadOnly()::: feedback mark modes read only:::modeMap->values->stream->forEach
Feedback#modeCompletions()::: feedback mode completions:::return->modeCompletions
Feedback#modeCompletions(CompletionProvider)::: feedback mode completions:::return->modeMap->keySet->stream->Function->identity->toMap->collect->new->ContinuousCompletionProvider
Feedback.Mode.Setting#equals(Object)::: setting equals:::if->ing->return->format->equals->else->return
Feedback.Mode.Setting#hashCode()::: setting hash code:::hash->Objects->hashCode->return
Feedback.Mode#equals(Object)::: mode equals:::if->m->return->name->equals->prompt->equals->continuationPrompt->equals->cases->equals->else->return
Feedback.Mode#hashCode()::: mode hash code:::return->Objects->hashCode
Feedback.Mode#setCommandFluff(boolean):::Set if this mode displays informative/confirmational messages on commands.:::
Feedback.Mode#encode():::Encodes the mode into a String so it can be saved in Preferences.:::el->new->ArrayList<>->el->add->el->String->valueOf->add->el->add->el->add->foreach->cases->entrySet->el->es->getKey->add->el->add->foreach->es->getValue->el->String->valueOf->add->el->add->el->add->el->add->return->String->join
Feedback.Mode#add(String, Setting)::: mode add:::settings->cases->get->if->new->ArrayList<>->cases->put->else->mask->settings->removeIf->settings->add
Feedback.Mode#set(String, Collection, Collection, Collection, Collection, Collection, Collection, String)::: mode set:::bits->bits->set
Feedback.Mode#set(String, long, String)::: mode set:::new->Setting->add
Feedback.Mode#format(String, long):::Lookup format Replace fields with context specific formats.:::settings->cases->get->if->return->format->for->i->settings->size->if->format->isEmpty->return->m->FIELD_PATTERN->matcher->sb->format->length->new->StringBuffer->while->m->find->fieldName->m->group->sub->format->m->Matcher->quoteReplacement->appendReplacement->m->appendTail->return->sb->toString
Feedback.Mode#truncateVarValue(String)::: mode truncate var value:::return->bits->truncateValue
Feedback.Mode#truncateValue(String, long)::: mode truncate value:::if->return->else->truncField->format->if->truncField->isEmpty->return->else->trunc->Integer->parseUnsignedInt->len->value->length->if->if->return->value->substring->else->endLen->startLen->return->value->substring->value->substring->else->return
Feedback.Mode#format(FormatCase, FormatAction, FormatWhen, FormatResolve, FormatUnresolved, FormatErrors, String, String, String, String, List)::: mode format:::return->format
Feedback.Mode#format(String, FormatCase, FormatAction, FormatWhen, FormatResolve, FormatUnresolved, FormatErrors, String, String, String, String, List)::: mode format:::bits->bits->fname->ftype->fvalue->truncateValue->funresolved->errors->errorLines->stream->String->format->format->map->joining->collect->return->String->format->format
Feedback.Mode#setPrompts(String, String)::: mode set prompts:::
Feedback.Mode#getPrompt(String)::: mode get prompt:::return->String->format
Feedback.Mode#getContinuationPrompt(String)::: mode get continuation prompt:::return->String->format
Feedback#bits(FormatCase, FormatAction, FormatWhen, FormatResolve, FormatUnresolved, FormatErrors)::: feedback bits:::res->fc->ordinal->fa->ordinal->fw->ordinal->fr->ordinal->fu->ordinal->fe->ordinal->return
Feedback#bits(Collection, Collection, Collection, Collection, Collection, Collection)::: feedback bits:::res->foreach->fc->ordinal->foreach->fa->ordinal->foreach->fw->ordinal->foreach->fr->ordinal->foreach->fu->ordinal->foreach->fe->ordinal->return
Feedback#unpackEnumbits(long)::: feedback unpack enumbits:::return->new->Unpacker->unpack
Feedback.Selector#collector(Setter.SelectorList)::: selector collector:::
Feedback.Selector#doc()::: selector doc:::
Feedback.SelectorCollector#add(Object)::: selector collector add:::e->if->EnumSet->of->else->set->add
Feedback.SelectorCollector#isEmpty()::: selector collector is empty:::return
Feedback.SelectorCollector#getSet()::: selector collector get set:::return
Feedback.Setter#fluff(String, Object...)::: setter fluff:::messageHandler->fluff
Feedback.Setter#hard(String, Object...)::: setter hard:::messageHandler->hard
Feedback.Setter#fluffmsg(String, Object...)::: setter fluffmsg:::messageHandler->fluffmsg
Feedback.Setter#hardmsg(String, Object...)::: setter hardmsg:::messageHandler->hardmsg
Feedback.Setter#showFluff()::: setter show fluff:::return->messageHandler->showFluff
Feedback.Setter#errorat(String, Object...)::: setter errorat:::if->return->a2->Arrays->copyOf->at->whole->messageHandler->errormsg
Feedback.Setter#selectorsToString(SelectorSets)::: setter selectors to string:::sb->new->StringBuilder->FormatCase->values->selectorToString->FormatAction->values->selectorToString->FormatWhen->values->selectorToString->FormatResolve->values->selectorToString->FormatUnresolved->values->selectorToString->FormatErrors->values->selectorToString->return->sb->toString
Feedback.Setter#selectorToString(StringBuilder, Set, E[])::: setter selector to string:::if->c->Arrays->asList->containsAll->sb->c->stream->x->ordinal->y->ordinal->sorted->v->name->toLowerCase->map->new->Collector<CharSequence,StringJoiner,String>->collect->append
Feedback.Setter#showFormatSettings(Mode, String)::: setter show format settings:::if->modeMap->entrySet->stream->es1->getKey->es2->getKey->compareTo->sorted->m->getValue->showFormatSettings->forEach->else->entrySet->stream->ec->getKey->equals->ec->getKey->equals->filter->ec1->getKey->ec2->getKey->compareTo->sorted->ec->getValue->ec->getKey->toStringLiteral->unpackEnumbits->selectorsToString->hard->forEach->forEach
Feedback.Setter#showTruncationSettings(Mode)::: setter show truncation settings:::if->modeMap->values->this->showTruncationSettings->forEach->else->trunc->get->if->trunc->unpackEnumbits->selectorsToString->hard->forEach
Feedback.Setter#showPromptSettings(Mode)::: setter show prompt settings:::if->modeMap->values->this->showPromptSettings->forEach->else->toStringLiteral->toStringLiteral->hard
Feedback.Setter#showModeSettings(String, String)::: setter show mode settings:::if->modeMap->values->this->showModeSettings->forEach->else->m->retained->retainedMap->get->if->searchForMode->if->return->retainedMap->get->else->modeMap->get->if->rm->encodedModeIterator->new->Mode->showModeSettings->hard->if->m->equals->hard->showModeSettings->else->showModeSettings
Feedback.Setter#showModeSettings(Mode)::: setter show mode settings:::hard->showPromptSettings->showFormatSettings->showTruncationSettings
Feedback.Setter#showFeedbackSetting()::: setter show feedback setting:::if->hard->if->hard
Feedback.Setter#setPrompt()::: setter set prompt:::m->nextMode->prompt->nextFormat->continuationPrompt->nextFormat->checkOptionsAndRemainingInput->if->showPromptSettings->return->if->errorat->else->if->errorat->if->m->setPrompts->else->fluffmsg->return
Feedback.Setter#setMode(Consumer):::Set mode:::return->new->SetMode->set
Feedback.Setter#setFormat()::: setter set format:::m->nextMode->field->next->toIdentifier->format->nextFormat->if->if->containsKey->errorat->else->showFormatSettings->else->installFormat->return
Feedback.Setter#setTruncation()::: setter set truncation:::m->nextMode->length->next->if->showTruncationSettings->else->try->Integer->parseUnsignedInt->catch->errorat->finally->installFormat->return
Feedback.Setter#setFeedback(Consumer)::: setter set feedback:::umode->next->checkOptionsAndRemainingInput->retainOption->at->hasOption->if->showFeedbackSetting->hard->showFeedbackModes->return->if->m->toModeIdentifier->searchForMode->if->retainedMap->containsKey->errorat->if->if->fluffmsg->if->retainer->accept->if->fluffmsg->return->return
Feedback.Setter#restoreEncodedModes(String)::: setter restore encoded modes:::try->itr->encodedModeIterator->while->itr->hasNext->m->new->Mode->modeMap->put->retainedMap->m->encode->put->return->catch->errorat->retainedMap->clear->return->finally
Feedback.Setter#encodedModeIterator(String)::: setter encoded mode iterator:::ms->encoded->split->return->Arrays->asList->iterator
Feedback.Setter#installFormat(Mode, String, String, String)::: setter install format:::slRaw->slList->new->ArrayList<>->while->next->sl->new->SelectorList->sl->parseSelectorList->slList->add->checkOptionsAndRemainingInput->if->if->errorat->else->if->slList->isEmpty->m->set->else->slList->stream->m->getSet->getSet->getSet->getSet->getSet->getSet->set->forEach->else->fluffmsg
Feedback.Setter#checkOptionsAndRemainingInput()::: setter check options and remaining input:::junk->at->remainder->if->junk->isEmpty->errorat->else->bad->at->badOptions->if->bad->isEmpty->errorat
Feedback.Setter#next()::: setter next:::s->at->next->if->checkOptionsAndRemainingInput->return
Feedback.Setter#toIdentifier(String, String):::Check that the specified string is an identifier (Java identifier):::if->return->if->at->isQuoted->id->codePoints->Character->isJavaIdentifierPart->allMatch->errorat->return->return
Feedback.Setter#toModeIdentifier(String)::: setter to mode identifier:::return->toIdentifier
Feedback.Setter#nextModeIdentifier()::: setter next mode identifier:::return->next->toModeIdentifier
Feedback.Setter#nextMode()::: setter next mode:::umode->nextModeIdentifier->return->searchForMode
Feedback.Setter#searchForMode(String)::: setter search for mode:::return->searchForMode
Feedback.Setter#searchForMode(String, String)::: setter search for mode:::if->return->m->modeMap->get->if->return->matches->modeMap->entrySet->stream->e->getKey->startsWith->filter->Entry->getValue->map->Mode[]->new->toArray->if->return->else->if->hardmsg->if->errorat->else->errorat->if->showFluff->showFeedbackModes->return
Feedback.Setter#showFeedbackModes()::: setter show feedback modes:::if->retainedMap->isEmpty->hardmsg->retainedMap->keySet->stream->sorted->hard->forEach->hardmsg->modeMap->keySet->stream->sorted->hard->forEach
Feedback.Setter#nextFormat()::: setter next format:::return->next->toFormat
Feedback.Setter#toFormat(String)::: setter to format:::if->return->if->at->isQuoted->errorat->return->return
Feedback.Setter#toStringLiteral(String)::: setter to string literal:::sb->new->StringBuilder->sb->append->length->s->length->for->offset->sb->append->return->sb->toString
Feedback.Setter.SelectorList#parseSelectorList(String)::: selector list parse selector list:::foreach->sl->split->lastCollector->foreach->s->split->if->as->isEmpty->sel->selectorMap->get->if->errorat->return->collector->sel->collector->if->if->collector->isEmpty->errorat->return->else->if->errorat->return->collector->add
IOContext#close()::: context close:::
IOContext#readLine(String, String)::: context read line:::
IOContext#interactiveOutput()::: context interactive output:::
IOContext#history(boolean)::: context history:::
IOContext#terminalEditorRunning()::: context terminal editor running:::
IOContext#suspend()::: context suspend:::
IOContext#resume()::: context resume:::
IOContext#beforeUserCode()::: context before user code:::
IOContext#afterUserCode()::: context after user code:::
IOContext#replaceLastHistoryEntry(String)::: context replace last history entry:::
IOContext#readUserInput()::: context read user input:::
JShellTool.Options#selectOptions(Predicate>>)::: options select options:::return->optMap->entrySet->stream->filter->e->getValue->stream->flatMap->String[]->new->toArray
JShellTool.Options#remoteVmOptions()::: options remote vm options:::return->e->getKey->selectOptions
JShellTool.Options#compilerOptions()::: options compiler options:::return->e->getKey->selectOptions
JShellTool.Options#shownOptions()::: options shown options:::return->e->getKey->selectOptions
JShellTool.Options#addAll(OptionKind, Collection)::: options add all:::optMap->new->ArrayList<>->computeIfAbsent->addAll
JShellTool.Options#override(Options)::: options override:::result->new->Options->entrySet->stream->if->e->getKey->e->getKey->e->getValue->put->else->result->e->getKey->e->getValue->addAll->forEach->return
JShellTool.OptionParserBase#nonOptions()::: option parser base non options:::return
JShellTool.OptionParserBase#msg(String, Object...)::: option parser base msg:::errormsg
JShellTool.OptionParserBase#parse(String[])::: option parser base parse:::try->oset->parser->parse->oset->valuesOf->return->parse->catch->if->ex->options->isEmpty->stream->joining->collect->msg->else->isKnown->parser->recognizedOptions->ex->options->iterator->next->containsKey->ex->options->stream->joining->collect->msg->return->finally
JShellTool.OptionParserBase#validPaths(Collection, String, boolean)::: option parser base valid paths:::result->vals->stream->Arrays->s->split->stream->toPathImpl->flatMap->checkValidPathEntry->filter->p->toString->map->Collectors->joining->collect->map->if->return->Collections->emptyList->else->return->result->toList->collect
JShellTool.OptionParserBase#checkValidPathEntry(Path, String, boolean)::: option parser base check valid path entry:::if->Files->exists->msg->return->if->Files->isDirectory->return->name->p->getFileName->toString->lastDot->name->lastIndexOf->if->switch->name->substring->return->if->return->msg->return
JShellTool.OptionParserBase#toPathImpl(String, String)::: option parser base to path impl:::try->return->Stream->toPathResolvingUserHome->of->catch->msg->return->Stream->empty->finally
JShellTool.OptionParserBase#parse(OptionSet)::: option parser base parse:::options->valuesOf->validPaths->addOptions->options->valuesOf->validPaths->addOptions->options->valuesOf->addOptions->options->valuesOf->stream->mp->contains->map->toList->collect->addOptions->if->options->has->opts->List->of->addAll->opts->List->System->getProperty->of->addAll->if->return->else->return
JShellTool.OptionParserBase#addOptions(OptionKind, Collection)::: option parser base add options:::if->vals->isEmpty->if->vals->size->msg->return->if->vals->stream->Stream->of->flatMap->toList->collect->opts->addAll
JShellTool.OptionParserReload#restore()::: option parser reload restore:::return
JShellTool.OptionParserReload#quiet()::: option parser reload quiet:::return
JShellTool.OptionParserReload#parse(OptionSet)::: option parser reload parse:::if->options->has->if->options->has->return->super->parse
JShellTool.OptionParserCommandLine#feedbackMode()::: option parser command line feedback mode:::return
JShellTool.OptionParserCommandLine#startup()::: option parser command line startup:::return
JShellTool.OptionParserCommandLine#msg(String, Object...)::: option parser command line msg:::errormsg
JShellTool.OptionParserCommandLine#parse(OptionSet):::Parse the command line options.:::if->options->has->printUsage->return->if->options->has->printUsageX->return->if->options->has->cmdout->version->printf->return->if->options->has->cmdout->fullVersion->printf->return->if->options->has->cmdout->version->printf->if->options->valuesOf->size->options->has->options->has->options->has->msg->return->else->if->options->has->options->valueOf->else->if->options->has->else->if->options->has->else->if->options->has->if->options->has->sts->options->valuesOf->if->options->has->msg->return->Startup->new->InitMessageHandler->fromFileList->if->return->else->if->options->has->Startup->noStartup->else->packedStartup->prefs->get->Startup->new->InitMessageHandler->unpack->if->options->has->options->valueOf->options->valuesOf->addOptions->options->valuesOf->addOptions->return->super->parse
JShellTool.ReplayableHistory#emptyHistory()::: replayable history empty history:::return->new->ArrayList<>->new->ReplayableHistory
JShellTool.ReplayableHistory#fromPrevious(PersistentStorage)::: replayable history from previous:::prevReplay->prefs->get->if->return->else->return->Arrays->prevReplay->split->asList->new->ReplayableHistory
JShellTool.ReplayableHistory#storeHistory(PersistentStorage)::: replayable history store history:::if->hist->size->sepLen->RECORD_SEPARATOR->length->length->first->hist->size->while->hist->get->length->if->hist->hist->size->subList->shist->String->join->prefs->put->markSaved->prefs->flush
JShellTool.ReplayableHistory#add(String)::: replayable history add:::hist->add
JShellTool.ReplayableHistory#iterable()::: replayable history iterable:::return
JShellTool.ReplayableHistory#markSaved()::: replayable history mark saved:::hist->size
JShellTool#interactive():::Is the input/output currently interactive:::return->input->interactiveOutput
JShellTool#debug(String, Object...)::: shell tool debug:::if->cmderr->printf
JShellTool#hard(String, Object...):::Must show command output:::cmdout->prefix->printf
JShellTool#error(String, Object...):::Error command output:::prefixError->printf
JShellTool#showFluff():::Should optional informative be displayed?:::return->feedback->shouldDisplayCommandFluff->interactive
JShellTool#fluff(String, Object...):::Optional output:::if->showFluff->hard
JShellTool#getResourceString(String):::Resource bundle look-up:::if->try->ResourceBundle->getBundle->catch->error->return->finally->s->try->outputRB->getString->catch->error->return->finally->return
JShellTool#prefix(String):::Add normal prefixing/postfixing to embedded newlines in a string, bracketing with normal prefix/postfix:::return->feedback->getPre->feedback->getPost->prefix
JShellTool#prefixError(String):::Add error prefixing/postfixing to embedded newlines in a string, bracketing with error prefix/postfix:::return->feedback->getErrorPre->feedback->getErrorPost->prefix
JShellTool#prefix(String, String, String):::Add prefixing/postfixing to embedded newlines in a string, bracketing with prefix/postfix:::if->return->if->return->pp->s->replaceAll->if->pp->endsWith->pp->pp->length->length->substring->return
JShellTool#hardrb(String):::Print using resource bundle look-up and adding prefix and postfix:::getResourceString->hard
JShellTool#messageFormat(String, Object...):::Format using resource bundle look-up using MessageFormat:::rs->getResourceString->return->MessageFormat->format
JShellTool#hardmsg(String, Object...):::Print using resource bundle look-up, MessageFormat, and add prefix and postfix:::messageFormat->hard
JShellTool#errormsg(String, Object...):::Print error using resource bundle look-up, MessageFormat, and add prefix and postfix:::messageFormat->error
JShellTool#fluffmsg(String, Object...):::Print (fluff) using resource bundle look-up, MessageFormat, and add prefix and postfix:::if->showFluff->hardmsg
JShellTool#hardPairs(Stream, Function, Function)::: shell tool hard pairs:::a2b->stream->LinkedHashMap->new->toMap->collect->foreach->a2b->entrySet->e->getKey->hard->cmdout->e->getValue->feedback->getPre->feedback->getPost->prefix->printf
JShellTool#trimEnd(String):::Trim whitespace off end of string:::last->s->length->i->while->Character->s->charAt->isWhitespace->if->return->s->substring->else->return
JShellTool#start(String[]):::The entry point into the JShell tool.:::commandLineArgs->new->OptionParserCommandLine->commandLineArgs->parse->if->return->commandLineArgs->startup->configEditor->try->resetState->catch->cmderr->ex->getMessage->println->return->finally->ReplayableHistory->fromPrevious->foreach->commandLineArgs->nonOptions->if->runFile->return->if->commandLineArgs->feedbackMode->initFeedback->if->if->feedback->shouldDisplayCommandFluff->version->hardmsg->shutdownHook->new->Thread->Runtime->getRuntime->addShutdownHook->try->in->new->ConsoleIOContext->while->if->resetState->run->catch->finally->replayableHistory->storeHistory->closeState->try->Runtime->getRuntime->removeShutdownHook->catch->finally->closeState->return
JShellTool#configEditor()::: shell tool config editor:::EditorSetting->fromPrefs->if->return->foreach->v->envvars->get->if->return->v->split->new->EditorSetting->return
JShellTool#printUsage()::: shell tool print usage:::cmdout->getResourceString->print
JShellTool#printUsageX()::: shell tool print usage x:::cmdout->getResourceString->print
JShellTool.InitMessageHandler#fluff(String, Object...)::: init message handler fluff:::
JShellTool.InitMessageHandler#fluffmsg(String, Object...)::: init message handler fluffmsg:::
JShellTool.InitMessageHandler#hard(String, Object...)::: init message handler hard:::
JShellTool.InitMessageHandler#hardmsg(String, Object...)::: init message handler hardmsg:::
JShellTool.InitMessageHandler#errormsg(String, Object...)::: init message handler errormsg:::JShellTool.this->errormsg
JShellTool.InitMessageHandler#showFluff()::: init message handler show fluff:::return
JShellTool#resetState()::: shell tool reset state:::closeState->new->NameSpace->new->NameSpace->new->NameSpace->new->LinkedHashMap<>->ReplayableHistory->emptyHistory->builder->JShell->builder->in->out->err->currentNameSpace->tidNext->tempVariableNameGenerator->state->status->isActive->currentNameSpace->tid->errorNamespace->tid->idGenerator->options->remoteVmOptions->remoteVMOptions->options->compilerOptions->compilerOptions->if->builder->executionEngine->builder->build->InternalDebugControl->setDebugFlags->state->if->hardmsg->fluffmsg->onShutdown->state->sourceCodeAnalysis->if->try->startup->toString->startUpRun->catch->finally
JShellTool#initFeedback(String)::: shell tool init feedback:::initmh->new->InitMessageHandler->getResourceString->startUpRun->feedback->markModesReadOnly->encoded->prefs->get->if->encoded->isEmpty->if->feedback->restoreEncodedModes->prefs->remove->if->if->new->ArgTokenizer->setFeedback->else->fb->prefs->get->if->new->ArgTokenizer->setFeedback
JShellTool#startUpRun(String)::: shell tool start up run:::try->suin->new->StringReader->new->ScannerIOContext->run->catch->errormsg->ex->printStackTrace->finally
JShellTool#closeState()::: shell tool close state:::oldState->if->oldState->unsubscribe->oldState->close
JShellTool#run(IOContext):::Main loop:::oldInput->try->remaining->while->src->getInput->processInput->catch->errormsg->finally
JShellTool#processInput(String):::Process an input command or snippet.:::if->isCommand->src->trim->processCommand->return->else->an->analysis->analyzeCompletion->if->an->source->trimEnd->processSourceCatchingReset->return->an->remaining->else->return
JShellTool#getInput(String):::Get the input line (or, if incomplete, lines).:::src->while->if->src->isEmpty->check->if->isCommand->sp->src->indexOf->if->return->src->substring->trim->if->check->isEmpty->return->cmd->src->substring->match->findCommand->if->equals->return->else->comp->analysis->analyzeCompletion->completeness->if->comp->isComplete->return->prompt->interactive->src->isEmpty->src->isEmpty->feedback->currentNameSpace->tidNext->getPrompt->feedback->currentNameSpace->tidNext->getContinuationPrompt->line->try->input->readLine->catch->continue->finally->if->if->input->interactiveOutput->throw->new->EOFException->src->isEmpty->throw->new->EOFException
JShellTool#isCommand(String)::: shell tool is command:::return->line->startsWith->line->startsWith->line->startsWith
JShellTool#addToReplayHistory(String)::: shell tool add to replay history:::if->replayableHistory->add
JShellTool#processSourceCatchingReset(String):::Process a source snippet.:::try->input->beforeUserCode->return->processSource->catch->hard->return->finally->input->afterUserCode
JShellTool#processCommand(String):::Process a command (as opposed to a snippet) -- things that start with slash.:::if->input->startsWith->try->Integer->input->substring->parseInt->cmdUseHistoryEntry->return->catch->finally->cmd->arg->idx->input->indexOf->if->input->substring->trim->input->substring->else->candidates->findCommand->switch->if->RERUN_ID->matcher->matches->rerunHistoryEntriesById->else->errormsg->fluffmsg->break->command->if->apply->trim->addToReplayHistory->break->Arrays->stream->map->Collectors->joining->collect->errormsg->fluffmsg->break
JShellTool#findCommand(String, Predicate)::: shell tool find command:::exact->commands->get->if->return->new->CommandArr->return->commands->values->stream->filter->startsWith->filter->Command[]->new->toArray
JShellTool#toPathResolvingUserHome(String)::: shell tool to path resolving user home:::if->pathString->replace->startsWith->return->Paths->System->getProperty->pathString->substring->get->else->return->Paths->get
JShellTool.CompletionProvider#completionSuggestions(String, int, int[])::: completion provider completion suggestions:::
JShellTool.FixedCompletionProvider#completionSuggestions(String, int, int[])::: fixed completion provider completion suggestions:::result->new->ArrayList<>->foreach->if->alternative->startsWith->result->new->ArgSuggestion->add->return
JShellTool#registerCommand(Command)::: shell tool register command:::commands->put
JShellTool#skipWordThenCompletion(CompletionProvider)::: shell tool skip word then completion:::return->result->Collections->emptyList->space->input->indexOf->if->rest->input->substring->completionProvider->completionSuggestions->return
JShellTool#fileCompletions(Predicate)::: shell tool file completions:::return->lastSlash->code->lastIndexOf->path->code->substring->prefix->code->substring->current->toPathResolvingUserHome->result->new->ArrayList<>->try->dir->Files->list->dir->accept->test->f->getFileName->toString->startsWith->filter->f->getFileName->Files->isDirectory->new->ArgSuggestion->map->result->add->forEach->catch->finally->if->path->isEmpty->StreamSupport->FileSystems->getDefault->getRootDirectories->spliterator->stream->Files->exists->filter->accept->test->root->toString->startsWith->filter->root->toString->new->ArgSuggestion->map->result->add->forEach->path->length->return
JShellTool#classPathCompletion()::: shell tool class path completion:::return->Files->isDirectory->p->getFileName->toString->endsWith->p->getFileName->toString->endsWith->fileCompletions
JShellTool#snippetCompletion(Supplier>)::: shell tool snippet completion:::return->space->prefix->lastIndexOf->prior->Arrays->prefix->split->asList->new->HashSet<>->if->prior->contains->prior->contains->return->Collections->emptyList->argPrefix->prefix->substring->return->snippetsSupplier->get->prior->String->k->id->valueOf->contains->prior->name->contains->filter->Stream->String->k->id->valueOf->name->of->Stream->String->k->id->valueOf->of->flatMap->k->startsWith->filter->ArgSuggestion->new->map->Collectors->toList->collect
JShellTool#snippetWithOptionCompletion(CompletionProvider, Supplier>)::: shell tool snippet with option completion:::return->result->new->ArrayList<>->pastSpace->code->lastIndexOf->if->result->optionProvider->completionSuggestions->addAll->result->snippetCompletion->completionSuggestions->addAll->return
JShellTool#helpCompletion()::: shell tool help completion:::return->result->pastSpace->code->indexOf->if->noslash->code->length->code->startsWith->commands->values->stream->filter->startsWith->substring->map->String[]->new->toArray->new->FixedCompletionProvider->completionSuggestions->else->if->code->startsWith->code->startsWith->new->FixedCompletionProvider->code->substring->completionSuggestions->else->Collections->emptyList->return
JShellTool#saveCompletion()::: shell tool save completion:::return->result->new->ArrayList<>->space->code->indexOf->if->result->SAVE_OPTION_COMPLETION_PROVIDER->completionSuggestions->addAll->result->FILE_COMPLETION_PROVIDER->code->substring->completionSuggestions->addAll->return
JShellTool#optionCompletion(CompletionProvider)::: shell tool option completion:::return->ovm->OPTION_VALUE_PATTERN->matcher->if->ovm->matches->flag->ovm->group->ps->ARG_OPTIONS->entrySet->stream->es->getKey->startsWith->filter->es->getValue->map->toList->collect->if->ps->size->pastSpace->ovm->start->result->ps->get->ovm->group->completionSuggestions->return->om->OPTION_PATTERN->matcher->if->om->matches->pastSpace->om->start->result->provider->om->group->completionSuggestions->if->om->group->isEmpty->result->stream->new->Suggestion->map->toList->collect->return->opp->OPTION_PRE_PATTERN->matcher->if->opp->matches->pastSpace->opp->end->result->provider->completionSuggestions->return->return->Collections->emptyList
JShellTool#historyCompletion()::: shell tool history completion:::return->optionCompletion
JShellTool#reloadCompletion()::: shell tool reload completion:::return->optionCompletion
JShellTool#envCompletion()::: shell tool env completion:::return->optionCompletion
JShellTool#orMostSpecificCompletion(CompletionProvider, CompletionProvider)::: shell tool or most specific completion:::return->leftAnchor->rightAnchor->leftSuggestions->left->completionSuggestions->rightSuggestions->right->completionSuggestions->suggestions->new->ArrayList<>->if->suggestions->addAll->if->suggestions->addAll->return
JShellTool#allSnippets()::: shell tool all snippets:::return->state->snippets
JShellTool#dropableSnippets()::: shell tool dropable snippets:::return->state->snippets->state->status->isActive->filter
JShellTool#allVarSnippets()::: shell tool all var snippets:::return->state->snippets->sn->kind->filter->map
JShellTool#allMethodSnippets()::: shell tool all method snippets:::return->state->snippets->sn->kind->filter->map
JShellTool#allTypeSnippets()::: shell tool all type snippets:::return->state->snippets->sn->kind->filter->map
JShellTool#commandCompletionSuggestions(String, int, int[])::: shell tool command completion suggestions:::return->commandCompletions->completionSuggestions
JShellTool#commandDocumentation(String, int, boolean)::: shell tool command documentation:::code->substring->replaceAll->stripped->code->replaceFirst->inHelp->code->equals->space->stripped->indexOf->prefix->stripped->substring->result->new->ArrayList<>->toShow->if->SET_SUB->matcher->matches->setSubcommand->stripped->replaceFirst->Arrays->stream->s->startsWith->filter->new->SimpleEntry<>->map->toList->collect->else->if->RERUN_ID->matcher->matches->new->SimpleEntry<>->singletonList->else->if->RERUN_PREVIOUS->matcher->matches->new->SimpleEntry<>->singletonList->else->commands->values->stream->startsWith->substring->startsWith->filter->filter->compareTo->sorted->new->SimpleEntry<>->map->toList->collect->if->toShow->size->result->toShow->get->getValue->getResourceString->add->else->foreach->result->e->getKey->e->getValue->getResourceString->add->return
JShellTool#stop()::: shell tool stop:::state->stop
JShellTool#cmdSet(String)::: shell tool cmd set:::cmd->at->arg->trim->new->ArgTokenizer->which->subCommand->if->return->switch->at->whole->errormsg->return->new->SetEditor->set->showSetStart->setFeedback->hardmsg->return->return->feedback->setFormat->return->feedback->setTruncation->return->setFeedback->return->feedback->prefs->put->setMode->return->feedback->setPrompt->return->new->SetEditor->set->return->setStart->at->val->errormsg->return
JShellTool#setFeedback(MessageHandler, ArgTokenizer)::: shell tool set feedback:::return->feedback->prefs->put->setFeedback
JShellTool#subCommand(String, ArgTokenizer, String[])::: shell tool sub command:::at->allowedOptions->sub->at->next->if->return->at->hasOption->matches->Arrays->stream->s->startsWith->filter->String[]->new->toArray->if->errormsg->Arrays->stream->Collectors->joining->collect->fluffmsg->return->if->errormsg->Arrays->stream->Collectors->joining->collect->fluffmsg->return->return
JShellTool.EditorSetting#fromPrefs(PersistentStorage)::: editor setting from prefs:::editorString->prefs->get->if->editorString->isEmpty->return->else->if->editorString->equals->return->else->wait->waitMarker->editorString->charAt->if->editorString->substring->cmd->editorString->split->return->new->EditorSetting
JShellTool.EditorSetting#removePrefs(PersistentStorage)::: editor setting remove prefs:::prefs->remove
JShellTool.EditorSetting#toPrefs(PersistentStorage)::: editor setting to prefs:::prefs->String->join->put
JShellTool.EditorSetting#equals(Object)::: editor setting equals:::if->ed->return->Arrays->equals->else->return
JShellTool.EditorSetting#hashCode()::: editor setting hash code:::hash->Arrays->deepHashCode->return
JShellTool.SetEditor#set()::: set editor set:::if->check->return->if->retained->EditorSetting->fromPrefs->if->format->hard->if->retained->equals->format->hard->return->if->EditorSetting->removePrefs->install->if->editor->toPrefs->format->fluffmsg->return
JShellTool.SetEditor#check()::: set editor check:::if->checkOptionsAndRemainingInput->return->if->at->whole->errormsg->return->if->at->whole->errormsg->return->return
JShellTool.SetEditor#install()::: set editor install:::if->new->EditorSetting->else->if->else->if->configEditor->else->return->format->fluffmsg
JShellTool.SetEditor#format(EditorSetting)::: set editor format:::if->return->else->elems->Arrays->stream->if->Stream->Stream->of->concat->return->elems->joining->collect
JShellTool#setStart(ArgTokenizer)::: shell tool set start:::at->allowedOptions->fns->new->ArrayList<>->while->at->next->fns->at->val->add->if->checkOptionsAndRemainingInput->return->defaultOption->at->hasOption->noneOption->at->hasOption->retainOption->at->hasOption->hasFile->fns->isEmpty->argCount->if->at->whole->errormsg->return->if->showSetStart->return->if->Startup->fromFileList->if->return->else->if->Startup->defaultStartup->else->if->Startup->noStartup->if->prefs->startup->storedForm->put->return
JShellTool#showSetStart()::: shell tool show set start:::sb->new->StringBuilder->retained->prefs->get->if->retainedStart->Startup->unpack->currentDifferent->startup->equals->sb->retainedStart->show->append->if->sb->startup->show->append->sb->retainedStart->showDetail->append->if->sb->startup->showDetail->append->else->sb->startup->show->append->sb->startup->showDetail->append->sb->toString->hard
JShellTool#cmdDebug(String)::: shell tool cmd debug:::if->arg->isEmpty->InternalDebugControl->setDebugFlags->fluff->else->foreach->arg->toCharArray->switch->fluff->break->fluff->break->fluff->break->fluff->break->fluff->break->fluff->break->fluff->break->fluff->break->cmdout->Arrays->options->remoteVmOptions->toString->Arrays->options->compilerOptions->toString->printf->break->error->fluff->return->InternalDebugControl->setDebugFlags->return
JShellTool#cmdExit(String)::: shell tool cmd exit:::if->arg->trim->isEmpty->debug->events->state->eval->foreach->if->e->causeSnippet->sn->e->snippet->diagnostics->state->diagnostics->toList->collect->source->sn->source->displayDiagnostics->if->e->exception->e->status->if->e->exception->displayException->return->if->e->status->return->typeName->if->sn->kind->typeName->else->if->sn->subKind->typeName->else->errormsg->return->switch->try->i->Integer->e->value->parseInt->break->catch->e->value->errormsg->return->finally->errormsg->return->if->fluffmsg->else->fluffmsg->return
JShellTool#cmdHelp(String)::: shell tool cmd help:::at->new->ArgTokenizer->subject->at->next->if->matches->commands->values->stream->startsWith->substring->startsWith->filter->Command[]->new->toArray->if->cmd->if->cmd->equals->which->subCommand->if->return->if->which->equals->printHelp->return->if->foreach->printHelp->return->else->subs->Arrays->stream->s->startsWith->filter->String[]->new->toArray->if->foreach->printHelp->return->errormsg->hardmsg->commands->values->stream->filter->getResourceString->getResourceString->hardPairs->hardmsg->commands->values->stream->filter->getResourceString->hardPairs->return
JShellTool#printHelp(String, String)::: shell tool print help:::len->name->length->centered->hard->hard->Stream->generate->limit->Collectors->joining->collect->hard->hard->hardrb
JShellTool#cmdHistory(String)::: shell tool cmd history:::at->rawArgs->trim->new->ArgTokenizer->at->allowedOptions->if->checkOptionsAndRemainingInput->return->cmdout->println->foreach->input->at->hasOption->history->cmdout->printf->return
JShellTool#nonEmptyStream(Supplier>, SnippetPredicate...):::Apply filters to a stream until one that is non-empty is found:::foreach->iterator->supplier->get->filter->iterator->if->iterator->hasNext->return->StreamSupport->Spliterators->spliteratorUnknownSize->stream->return
JShellTool#inStartUp(Snippet)::: shell tool in start up:::return->mapSnippet->get
JShellTool#isActive(Snippet)::: shell tool is active:::return->state->status->isActive
JShellTool#mainActive(Snippet)::: shell tool main active:::return->inStartUp->isActive
JShellTool#matchingDeclaration(Snippet, String)::: shell tool matching declaration:::return->name->equals
JShellTool#argsOptionsToSnippets(Supplier>, Predicate, String, String):::Convert user arguments to a Stream of snippets referenced by those arguments (or lack of arguments).:::at->rawargs->trim->new->ArgTokenizer->at->allowedOptions->return->argsOptionsToSnippets
JShellTool#argsOptionsToSnippets(Supplier>, Predicate, ArgTokenizer):::Convert user arguments to a Stream of snippets referenced by those arguments (or lack of arguments).:::args->new->ArrayList<>->s->while->at->next->args->add->if->checkOptionsAndRemainingInput->return->if->at->optionCount->args->size->at->whole->errormsg->return->if->at->optionCount->at->whole->errormsg->return->if->at->isAllowedOption->at->hasOption->return->snippetSupplier->get->if->at->isAllowedOption->at->hasOption->return->snippetSupplier->get->this->inStartUp->filter->if->args->isEmpty->return->snippetSupplier->get->filter->return->new->ArgToSnippets<>->argsToSnippets
JShellTool.ArgToSnippets#argsToSnippets(List):::Convert user arguments to a Stream of snippets referenced by those arguments.:::result->foreach->st->argToSnippets->if->return->else->Stream->concat->return
JShellTool.ArgToSnippets#argToSnippets(String):::Convert a user argument to a Stream of snippets referenced by the argument.:::if->arg->contains->return->range->st->layeredSnippetSearch->if->badSnippetErrormsg->return->else->return
JShellTool.ArgToSnippets#badSnippetErrormsg(String):::Look for inappropriate snippets to give best error message:::est->state->snippets->layeredSnippetSearch->if->if->ID->matcher->matches->errormsg->else->errormsg->else->est->findFirst->get->source->errormsg
JShellTool.ArgToSnippets#layeredSnippetSearch(Supplier>, String):::Search through the snippets for the best match to the id/name.:::return->isActive->matchingDeclaration->matchingDeclaration->sn->id->equals->nonEmptyStream
JShellTool.ArgToSnippets#range(String):::Given an id1-id2 range specifier, return a stream of snippets within our context:::dash->arg->indexOf->iid->arg->substring->tid->arg->substring->iidx->snippetIndex->if->return->tidx->snippetIndex->if->return->if->errormsg->return->return->allSnippets->subList->stream
JShellTool.ArgToSnippets#initIdMapping():::Lazily initialize the id mapping -- needed only for id ranges.:::if->snippetSupplier->get->order->order->sorted->toList->collect->allSnippets->stream->sn->id->map->new->StringArr->toArray
JShellTool.ArgToSnippets#allIds():::Return all the snippet ids -- within the context, and in order.:::initIdMapping->return
JShellTool.ArgToSnippets#order(String):::Establish an order on snippet ids:::try->switch->id->charAt->return->Integer->id->substring->parseInt->return->Integer->id->substring->parseInt->return->Integer->parseInt->catch->return->finally
JShellTool.ArgToSnippets#order(Snippet):::Establish an order on snippets, based on its snippet id:::return->sn->id->order
JShellTool.ArgToSnippets#snippetIndex(String):::Find the index into the parallel allSnippets and allIds structures.:::idx->Arrays->allIds->allIds->order->order->binarySearch->if->if->ID->matcher->matches->errormsg->else->badSnippetErrormsg->return
JShellTool#cmdDrop(String)::: shell tool cmd drop:::at->rawargs->trim->new->ArgTokenizer->at->allowedOptions->args->new->ArrayList<>->s->while->at->next->args->add->if->checkOptionsAndRemainingInput->return->if->args->isEmpty->errormsg->return->stream->this->dropableSnippets->new->ArgToSnippets<>->argsToSnippets->if->fluffmsg->return->stream->state->drop->this->handleEvent->forEach->forEach->return
JShellTool#cmdEdit(String)::: shell tool cmd edit:::stream->state->snippets->this->mainActive->argsOptionsToSnippets->if->return->srcSet->new->LinkedHashSet<>->stream->src->sn->source->switch->sn->subKind->break->if->src->endsWith->srcSet->add->break->if->src->endsWith->analysis->analyzeCompletion->source->else->if->src->endsWith->srcSet->add->break->srcSet->add->break->forEachOrdered->sb->new->StringBuilder->foreach->sb->append->sb->append->src->sb->toString->saveHandler->new->SaveHandler->errorHandler->hard->if->return->builtInEdit->else->buffer->new->StringArr->extSaveHandler->if->input->terminalEditorRunning->else->saveHandler->accept->ExternalEditor->input->suspend->input->resume->hardrb->edit->if->saveHandler->accept->return
JShellTool#builtInEdit(String, Consumer, Consumer)::: shell tool built in edit:::try->sl->ServiceLoader->load->provider->foreach->if->p->rank->provider->rank->if->provider->getResourceString->edit->return->else->errormsg->catch->errormsg->finally->fluffmsg->return
JShellTool.SaveHandler#accept(String)::: save handler accept:::if->s->equals->try->nextSrcs->new->LinkedHashSet<>->failed->while->an->analysis->analyzeCompletion->if->an->completeness->isComplete->break->tsrc->an->source->trimNewlines->if->currSrcs->contains->processSource->nextSrcs->add->if->an->remaining->isEmpty->break->an->remaining->catch->errormsg->resetState->new->LinkedHashSet<>->finally
JShellTool.SaveHandler#trimNewlines(String)::: save handler trim newlines:::b->while->s->length->s->charAt->e->s->length->while->s->charAt->return->s->substring
JShellTool#cmdList(String)::: shell tool cmd list:::if->arg->length->startsWith->return->cmdHistory->stream->state->snippets->this->mainActive->argsOptionsToSnippets->if->return->hasOutput->new->booleanArr->stream->if->cmdout->println->cmdout->sn->id->sn->source->replace->printf->forEachOrdered->return
JShellTool#cmdOpen(String)::: shell tool cmd open:::return->runFile
JShellTool#runFile(String, String)::: shell tool run file:::if->filename->isEmpty->try->scanner->if->filename->equals->new->Scanner->else->path->url->resource->try->toPathResolvingUserHome->catch->try->new->URL->if->url->getProtocol->equalsIgnoreCase->Paths->url->toURI->get->catch->throw->new->FileNotFoundException->finally->finally->if->Files->exists->path->toString->new->FileReader->new->Scanner->else->if->getResource->new->StringReader->new->Scanner->else->if->try->new->URL->catch->throw->new->FileNotFoundException->finally->url->openStream->new->Scanner->try->scannerIOContext->new->ScannerIOContext->run->catch->finally->return->catch->e->getMessage->errormsg->errormsg->finally->else->errormsg->return
JShellTool#getResource(String)::: shell tool get resource:::if->BUILTIN_FILE_PATTERN->matcher->matches->try->return->readResource->catch->finally->return
JShellTool#readResource(String)::: shell tool read resource:::if->name->equals->return->new->ComputeImports->imports->spec->String->format->try->in->getResourceAsStream->reader->new->InputStreamReader->new->BufferedReader->return->reader->lines->Collectors->joining->collect->catch->finally
JShellTool#cmdReset(String)::: shell tool cmd reset:::oldOptions->rawargs->trim->isEmpty->if->new->OptionParserBase->parseCommandLineLikeFlags->return->fluffmsg->return->doReload
JShellTool#cmdReload(String)::: shell tool cmd reload:::oldOptions->rawargs->trim->isEmpty->ap->new->OptionParserReload->if->parseCommandLineLikeFlags->return->history->if->ap->restore->if->errormsg->return->fluffmsg->else->fluffmsg->success->ap->quiet->doReload->if->ap->restore->replayableHistory->markSaved->return
JShellTool#cmdEnv(String)::: shell tool cmd env:::if->rawargs->trim->isEmpty->sb->new->StringBuilder->foreach->options->shownOptions->sb->a->startsWith->sb->length->append->sb->append->if->sb->length->sb->toString->hard->return->oldOptions->if->new->OptionParserBase->parseCommandLineLikeFlags->return->fluffmsg->return->doReload
JShellTool#doReload(ReplayableHistory, boolean, Options)::: shell tool do reload:::if->try->resetState->catch->ex->getMessage->errormsg->resetState->finally->else->resetState->if->history->iterable->new->ReloadIOContext->run->return
JShellTool#parseCommandLineLikeFlags(String, OptionParserBase)::: shell tool parse command line like flags:::args->Arrays->rawargs->split->stream->s->isEmpty->filter->String[]->new->toArray->opts->ap->parse->if->return->if->ap->nonOptions->isEmpty->ap->nonOptions->errormsg->return->options->override->return
JShellTool#cmdSave(String)::: shell tool cmd save:::args->rawargs->split->filename->if->filename->isEmpty->errormsg->return->srcSpec->Arrays->stream->Collectors->joining->collect->at->new->ArgTokenizer->at->allowedOptions->snippetStream->state->snippets->this->mainActive->argsOptionsToSnippets->if->return->try->writer->Files->toPathResolvingUserHome->Charset->defaultCharset->newBufferedWriter->if->at->hasOption->foreach->input->history->writer->write->writer->write->else->writer->snippetStream->Snippet->source->map->Collectors->joining->collect->write->catch->e->getMessage->errormsg->return->errormsg->return->finally->return
JShellTool#cmdVars(String)::: shell tool cmd vars:::stream->this->allVarSnippets->this->isActive->argsOptionsToSnippets->if->return->stream->val->state->status->feedback->state->varValue->truncateVarValue->getResourceString->vk->typeName->vk->name->hard->forEachOrdered->return
JShellTool#cmdMethods(String)::: shell tool cmd methods:::stream->this->allMethodSnippets->this->isActive->argsOptionsToSnippets->if->return->stream->sig->meth->signature->i->sig->lastIndexOf->if->meth->name->hard->else->sig->substring->meth->name->sig->substring->hard->printSnippetStatus->forEachOrdered->return
JShellTool#cmdTypes(String)::: shell tool cmd types:::stream->this->allTypeSnippets->this->isActive->argsOptionsToSnippets->if->return->stream->kind->switch->ck->subKind->break->break->break->break->break->ck->name->hard->printSnippetStatus->forEachOrdered->return
JShellTool#cmdImports()::: shell tool cmd imports:::state->imports->ik->isStatic->ik->fullname->hard->forEach->return
JShellTool#cmdUseHistoryEntry(int)::: shell tool cmd use history entry:::keys->state->snippets->toList->collect->if->keys->size->else->if->keys->size->keys->get->rerunSnippet->else->errormsg->return->return
JShellTool#checkOptionsAndRemainingInput(ArgTokenizer)::: shell tool check options and remaining input:::junk->at->remainder->if->junk->isEmpty->at->whole->errormsg->return->else->bad->at->badOptions->if->bad->isEmpty->at->whole->errormsg->return->return
JShellTool#rerunHistoryEntriesById(String):::Handle snippet reevaluation commands: /<id>:::at->rawargs->trim->substring->new->ArgTokenizer->at->allowedOptions->stream->state->snippets->argsOptionsToSnippets->if->stream->rerunSnippet->forEach
JShellTool#rerunSnippet(Snippet)::: shell tool rerun snippet:::source->snippet->source->cmdout->printf->input->replaceLastHistoryEntry->processSourceCatchingReset
JShellTool#errorsOnly(List):::Filter diagnostics for only errors (no warnings, ...):::return->diagnostics->stream->Diag->isError->filter->toList->collect
JShellTool#displayException(Throwable):::Print out a snippet exception.:::rootCause->while->rootCause->getCause->if->return->displayException->else->return->displayException
JShellTool#displayException(Throwable, StackTraceElement[])::: shell tool display exception:::if->return->displayEvalException->else->if->return->displayUnresolvedException->else->error->return
JShellTool#displayUnresolvedException(UnresolvedReferenceException)::: shell tool display unresolved exception:::ex->getSnippet->printSnippetStatus->return
JShellTool#displayEvalException(EvalException, StackTraceElement[])::: shell tool display eval exception:::msg->ex->getMessage->key->ex->getExceptionClassName->errormsg->ex->getStackTrace->printStackTrace->cause->ex->getCause->if->ex->getStackTrace->displayException->return
JShellTool#displayDiagnostics(String, List):::Display a list of diagnostics.:::foreach->d->isError->errormsg->disp->new->ArrayList<>->displayableDiagnostic->disp->stream->error->forEach
JShellTool#displayableDiagnostic(String, Diag, List):::Convert a diagnostic into a list of pretty displayable strings with source context.:::foreach->diag->getMessage->split->if->line->trim->startsWith->toDisplay->add->pstart->diag->getStartPosition->pend->diag->getEndPosition->m->LINEBREAK->matcher->pstartl->pendl->while->m->find->m->start->if->break->else->m->end->if->source->length->toDisplay->source->substring->add->sb->new->StringBuilder->start->for->i->sb->append->multiline->end->if->for->i->if->sb->append->else->sb->append->toDisplay->sb->toString->add->diag->getStartPosition->debug->diag->getCode->debug->diag->getPosition->diag->getStartPosition->diag->getEndPosition->debug
JShellTool#processSource(String):::Process a source snippet.:::debug->failed->isActive->events->state->eval->foreach->handleEvent->e->causeSnippet->e->status->isActive->e->snippet->subKind->if->addToReplayHistory->return
JShellTool#handleEvent(SnippetEvent)::: shell tool handle event:::sn->ste->snippet->if->debug->return->diagnostics->state->diagnostics->toList->collect->source->sn->source->if->ste->causeSnippet->displayDiagnostics->if->ste->status->if->ste->exception->if->ste->exception->displayException->return->else->ste->value->new->DisplayEvent->displayDeclarationAndValue->else->if->diagnostics->isEmpty->errormsg->return->else->if->other->errorsOnly->ste->value->new->DisplayEvent->displayDeclarationAndValue->return
JShellTool#printStackTrace(StackTraceElement[], StackTraceElement[])::: shell tool print stack trace:::overlap->if->maxOverlap->Math->min->while->equals->for->i->if->error
JShellTool#toAction(Status, Status, boolean)::: shell tool to action:::act->switch->if->previousStatus->isActive->else->break->break->break->previousStatus->toString->status->toString->error->return
JShellTool#printSnippetStatus(DeclarationSnippet, boolean)::: shell tool print snippet status:::otherErrors->state->diagnostics->toList->collect->errorsOnly->state->status->new->DisplayEvent->displayDeclarationAndValue
JShellTool.DisplayEvent#unresolved(DeclarationSnippet)::: display event unresolved:::unr->state->unresolvedDependencies->toList->collect->sb->new->StringBuilder->fromLast->unr->size->if->sb->append->foreach->sb->append->switch->break->sb->append->break->sb->append->break->return->sb->toString
JShellTool.DisplayEvent#custom(FormatCase, String)::: display event custom:::custom
JShellTool.DisplayEvent#custom(FormatCase, String, String)::: display event custom:::if->resolutionErrors->feedback->format->if->resolutionErrors->trim->isEmpty->error->else->if->interactive->display->feedback->format->cmdout->print
JShellTool.DisplayEvent#displayDeclarationAndValue()::: display event display declaration and value:::switch->sn->subKind->name->custom->break->name->custom->break->name->custom->break->name->custom->break->name->parameterTypes->custom->break->vk->vk->name->vk->typeName->custom->break->vk->vk->name->vk->typeName->custom->break->vk->vk->name->vk->typeName->custom->break->error->break->ek->ek->name->ek->typeName->custom->break->ek->ek->name->ek->typeName->custom->break->name->custom->break->custom->break
JShellTool#version():::The current version number as a string.:::return->version
JShellTool#fullVersion():::The current full version number as a string.:::return->version
JShellTool#version(String)::: shell tool version:::if->try->ResourceBundle->getBundle->catch->return->finally->try->return->versionRB->getString->catch->return->finally
JShellTool.NameSpace#tid(Snippet)::: name space tid:::tid->mapSnippet->new->SnippetInfo->put->return
JShellTool.NameSpace#tidNext()::: name space tid next:::return
JShellTool.ArgSuggestion#continuation():::The candidate continuation of the given user's input.:::return
JShellTool.ArgSuggestion#matchesType():::Indicates whether input continuation matches the target type and is thus more likely to be the desired continuation:::return
NonInteractiveIOContext#interactiveOutput()::: non interactive context interactive output:::return
NonInteractiveIOContext#history(boolean)::: non interactive context history:::return->Collections->emptyList
NonInteractiveIOContext#terminalEditorRunning()::: non interactive context terminal editor running:::return
NonInteractiveIOContext#suspend()::: non interactive context suspend:::
NonInteractiveIOContext#resume()::: non interactive context resume:::
NonInteractiveIOContext#beforeUserCode()::: non interactive context before user code:::
NonInteractiveIOContext#afterUserCode()::: non interactive context after user code:::
NonInteractiveIOContext#replaceLastHistoryEntry(String)::: non interactive context replace last history entry:::
ScannerIOContext#readLine(String, String)::: scanner context read line:::if->scannerIn->hasNextLine->return->scannerIn->nextLine->else->return
ScannerIOContext#close()::: scanner context close:::scannerIn->close
ScannerIOContext#readUserInput()::: scanner context read user input:::return
ReloadIOContext#readLine(String, String)::: reload context read line:::s->it->hasNext->it->next->if->p->p2->echoStream->s->replace->printf->return
ReloadIOContext#close()::: reload context close:::
ReloadIOContext#readUserInput()::: reload context read user input:::return
JShellToolBuilder#in(InputStream, InputStream):::Set the input channels:::return
JShellToolBuilder#out(PrintStream):::Set the output channels:::return
JShellToolBuilder#out(PrintStream, PrintStream, PrintStream):::Set the output channels:::return
JShellToolBuilder#err(PrintStream):::Set the error channels:::return
JShellToolBuilder#err(PrintStream, PrintStream):::Set the error channels:::return
JShellToolBuilder#persistence(Preferences):::Set the storage mechanism for persistent information which includes input history and retained settings:::new->PreferencesStorage->return
JShellToolBuilder#persistence(Map):::Set the storage mechanism for persistent information which includes input history and retained settings:::new->MapStorage->return
JShellToolBuilder#env(Map):::Set the source for environment variables:::return
JShellToolBuilder#locale(Locale):::Set the locale:::return
JShellToolBuilder#promptCapture(boolean):::Set if the special command capturing prompt override should be used:::return
JShellToolBuilder#rawTool():::Create a tool instance for testing:::if->Preferences->userRoot->node->new->PreferencesStorage->if->System->getenv->sh->new->JShellTool->return
JShellToolBuilder#run(String...):::Run an instance of the Java shell tool as configured by the other methods in this interface:::rawTool->start
JShellToolBuilder#start(String...):::Run an instance of the Java shell tool as configured by the other methods in this interface:::return->rawTool->start
JShellToolBuilder.PreferencesStorage#clear()::: preferences storage clear:::try->p->clear->catch->throw->new->IllegalStateException->finally
JShellToolBuilder.PreferencesStorage#keys()::: preferences storage keys:::try->return->p->keys->catch->throw->new->IllegalStateException->finally
JShellToolBuilder.PreferencesStorage#get(String)::: preferences storage get:::return->p->get
JShellToolBuilder.PreferencesStorage#put(String, String)::: preferences storage put:::p->put
JShellToolBuilder.PreferencesStorage#remove(String)::: preferences storage remove:::p->remove
JShellToolBuilder.PreferencesStorage#flush()::: preferences storage flush:::try->p->flush->catch->throw->new->IllegalStateException->finally
JShellToolBuilder.MapStorage#clear()::: map storage clear:::try->map->clear->catch->throw->new->IllegalStateException->finally
JShellToolBuilder.MapStorage#keys()::: map storage keys:::ks->map->keySet->return->ks->ks->size->new->StringArr->toArray
JShellToolBuilder.MapStorage#get(String)::: map storage get:::Objects->requireNonNull->return->map->get
JShellToolBuilder.MapStorage#put(String, String)::: map storage put:::Objects->requireNonNull->Objects->requireNonNull->map->put
JShellToolBuilder.MapStorage#remove(String)::: map storage remove:::Objects->requireNonNull->map->remove
JShellToolBuilder.MapStorage#flush()::: map storage flush:::
JShellToolProvider#name():::Returns the name of this Java shell tool provider.:::return
JShellToolProvider#run(InputStream, OutputStream, OutputStream, String...):::Run the jshell tool:::xin->xout->new->PrintStream->xerr->new->PrintStream->try->return->JavaShellToolBuilder->builder->in->out->err->start->catch->xerr->ex->getMessage->println->return->finally
JShellToolProvider#getSourceVersions():::Returns the source versions of the jshell tool.:::return->Collections->EnumSet->SourceVersion->latest->range->unmodifiableSet
JShellToolProvider#main(String[]):::Launch the tool and exit.:::System->JavaShellToolBuilder->builder->start->exit
MessageHandler#fluff(String, Object...)::: message handler fluff:::
MessageHandler#fluffmsg(String, Object...)::: message handler fluffmsg:::
MessageHandler#hard(String, Object...)::: message handler hard:::
MessageHandler#hardmsg(String, Object...)::: message handler hardmsg:::
MessageHandler#errormsg(String, Object...)::: message handler errormsg:::
MessageHandler#showFluff()::: message handler show fluff:::
PersistentStorage#clear():::Removes all of the preferences (key-value associations) in preferences.:::
PersistentStorage#keys():::Returns all of the keys that have an associated value in preferences.:::
PersistentStorage#get(String):::Returns the value associated with the specified key in preferences.:::
PersistentStorage#put(String, String):::Associates the specified value with the specified key in this preference node.:::
PersistentStorage#remove(String):::Removes the value associated with the specified key in preferences, if any.:::
PersistentStorage#flush():::Forces any changes in the contents of this preferences to be stored:::
Startup.StartupEntry#storedForm()::: startup entry stored form:::return
Startup.StartupEntry#toString()::: startup entry to string:::return
Startup.StartupEntry#hashCode()::: startup entry hash code:::hash->Objects->hashCode->if->Objects->hashCode->return
Startup.StartupEntry#equals(Object)::: startup entry equals:::if->return->sue->return->name->equals->content->equals
Startup#toString()::: startup to string:::return
Startup#hashCode()::: startup hash code:::return->Objects->hashCode
Startup#equals(Object)::: startup equals:::return->entries->equals
Startup#isEmpty()::: startup is empty:::return->entries->isEmpty
Startup#isDefault()::: startup is default:::if->entries->size->sue->entries->get->if->equals->return->return
Startup#storedForm()::: startup stored form:::return->entries->stream->sue->storedForm->map->joining->collect
Startup#show(boolean)::: startup show:::cmd->if->isDefault->return->else->if->isEmpty->return->else->return->entries->stream->map->joining->collect
Startup#showDetail()::: startup show detail:::if->isDefault->isEmpty->return->else->return->entries->stream->isEmpty->map->joining->collect
Startup#unpack(String, MessageHandler):::Factory method: Unpack from stored form.:::if->if->storedForm->isEmpty->return->noStartup->try->all->storedForm->split->if->return->new->StartupEntry->new->Startup->else->if->e->new->ArrayList<>->for->i->return->new->Startup->else->throw->new->IllegalArgumentException->catch->mh->ex->getMessage->errormsg->finally->return->defaultStartup
Startup#fromFileList(List, String, MessageHandler):::Factory method: Read Startup from a list of external files or resources.:::entries->fns->stream->readFile->map->toList->collect->if->entries->stream->anyMatch->return->return->new->Startup
Startup#readFile(String, String, MessageHandler):::Read a external file or a resource.:::if->try->encoded->Files->toPathResolvingUserHome->readAllBytes->return->new->String->LocalDateTime->now->DateTimeFormatter->ofLocalizedDateTime->format->new->StartupEntry->catch->mh->e->getMessage->errormsg->resource->getResource->if->return->new->StartupEntry->mh->errormsg->mh->errormsg->finally->else->mh->errormsg->return
Startup#noStartup():::Factory method: The empty Startup ("-none").:::return->Collections->emptyList->new->Startup
Startup#defaultStartup(MessageHandler):::Factory method: The default Startup ("-default.").:::if->return->try->content->readResource->return->new->StartupEntry->new->Startup->catch->mh->e->getMessage->errormsg->mh->errormsg->mh->errormsg->finally->return->noStartup
StopDetectingInputStream#setInputStream(InputStream)::: stop detecting input stream set input stream:::if->throw->new->IllegalStateException->reader->try->read->while->currentState->waitInputNeeded->if->break->if->input->read->break->if->getState->stop->run->else->write->catch->errorHandler->accept->finally->shutdown->new->Thread->reader->setDaemon->reader->start->return
StopDetectingInputStream#read()::: stop detecting input stream read:::while->if->return->if->notifyAll->try->wait->catch->finally->try->return->catch->finally
StopDetectingInputStream#shutdown()::: stop detecting input stream shutdown:::notifyAll
StopDetectingInputStream#write(int)::: stop detecting input stream write:::if->newEnd->if->newBuffer->new->intArr->rightPart->leftPart->System->arraycopy->System->arraycopy->notifyAll
StopDetectingInputStream#setState(State)::: stop detecting input stream set state:::if->notifyAll
StopDetectingInputStream#getState()::: stop detecting input stream get state:::return
StopDetectingInputStream#waitInputNeeded()::: stop detecting input stream wait input needed:::while->try->wait->catch->finally->return

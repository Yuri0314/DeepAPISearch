ArgTokenizer#next():::Return the next non-option argument:::while->nextToken->if->isQuoted->sval->startsWith->opt->sval->startsWith->sval->substring->foundOption->else->break->return
ArgTokenizer#allowedOptions(String...):::Set the allowed options:::foreach->options->putIfAbsent
ArgTokenizer#isAllowedOption(String):::Is the specified option allowed.:::has->options->get->return
ArgTokenizer#hasOption(String):::Has the specified option been encountered.:::has->options->get->if->throw->new->InternalError->return
ArgTokenizer#optionCount():::Return the number of encountered options:::return->options->entrySet->stream->Entry->getValue->filter->count
ArgTokenizer#badOptions():::Return the bad options encountered:::return->String->join
ArgTokenizer#remainder():::Consume the remainder of the input:::rem->new->ArrayList<>->while->next->rem->add->return->String->join
ArgTokenizer#nextToken():::Parses the next token of this tokenizer.:::ct->c->lctype->do->read->if->return->unicode2ctype->while->if->i->do->if->Arrays->copyOf->read->unicode2ctype->while->if->String->copyValueOf->return->if->quote->i->d->read->while->if->read->first->if->c2->read->if->read->if->read->else->else->else->switch->break->break->break->break->break->break->break->read->else->read->if->Arrays->copyOf->if->String->copyValueOf
ConsoleIOContext.Fix#displayName():::A name that should be shown to the user.:::
ConsoleIOContext.Fix#perform(ConsoleReader):::Perform the given action.:::
ConsoleIOContext.FixComputer#compute(JShellTool, String, int):::Compute possible actions for the given code.:::
JShellTool#interactive():::Is the input/output currently interactive:::return->input->interactiveOutput
JShellTool#hard(String, Object...):::Must show command output:::cmdout->prefix->printf
JShellTool#error(String, Object...):::Error command output:::prefixError->printf
JShellTool#showFluff():::Should optional informative be displayed?:::return->feedback->shouldDisplayCommandFluff->interactive
JShellTool#fluff(String, Object...):::Optional output:::if->showFluff->hard
JShellTool#getResourceString(String):::Resource bundle look-up:::if->try->ResourceBundle->getBundle->catch->error->return->finally->s->try->outputRB->getString->catch->error->return->finally->return
JShellTool#prefix(String):::Add normal prefixing/postfixing to embedded newlines in a string, bracketing with normal prefix/postfix:::return->feedback->getPre->feedback->getPost->prefix
JShellTool#prefixError(String):::Add error prefixing/postfixing to embedded newlines in a string, bracketing with error prefix/postfix:::return->feedback->getErrorPre->feedback->getErrorPost->prefix
JShellTool#prefix(String, String, String):::Add prefixing/postfixing to embedded newlines in a string, bracketing with prefix/postfix:::if->return->if->return->pp->s->replaceAll->if->pp->endsWith->pp->pp->length->length->substring->return
JShellTool#hardrb(String):::Print using resource bundle look-up and adding prefix and postfix:::getResourceString->hard
JShellTool#messageFormat(String, Object...):::Format using resource bundle look-up using MessageFormat:::rs->getResourceString->return->MessageFormat->format
JShellTool#hardmsg(String, Object...):::Print using resource bundle look-up, MessageFormat, and add prefix and postfix:::messageFormat->hard
JShellTool#errormsg(String, Object...):::Print error using resource bundle look-up, MessageFormat, and add prefix and postfix:::messageFormat->error
JShellTool#fluffmsg(String, Object...):::Print (fluff) using resource bundle look-up, MessageFormat, and add prefix and postfix:::if->showFluff->hardmsg
JShellTool#trimEnd(String):::Trim whitespace off end of string:::last->s->length->i->while->Character->s->charAt->isWhitespace->if->return->s->substring->else->return
JShellTool#start(String[]):::The entry point into the JShell tool.:::commandLineArgs->new->OptionParserCommandLine->commandLineArgs->parse->if->return->commandLineArgs->startup->configEditor->try->resetState->catch->cmderr->ex->getMessage->println->return->finally->ReplayableHistory->fromPrevious->foreach->commandLineArgs->nonOptions->if->runFile->return->if->commandLineArgs->feedbackMode->initFeedback->if->if->feedback->shouldDisplayCommandFluff->version->hardmsg->shutdownHook->new->Thread->Runtime->getRuntime->addShutdownHook->try->in->new->ConsoleIOContext->while->if->resetState->run->catch->finally->replayableHistory->storeHistory->closeState->try->Runtime->getRuntime->removeShutdownHook->catch->finally->closeState->return
JShellTool#errorsOnly(List):::Filter diagnostics for only errors (no warnings, ...):::return->diagnostics->stream->Diag->isError->filter->toList->collect
JShellTool#processSource(String):::Process a source snippet.:::debug->failed->isActive->events->state->eval->foreach->handleEvent->e->causeSnippet->e->status->isActive->e->snippet->subKind->if->addToReplayHistory->return
JShellTool#version():::The current version number as a string.:::return->version
JShellTool#fullVersion():::The current full version number as a string.:::return->version
JShellTool.ArgSuggestion#continuation():::The candidate continuation of the given user's input.:::return
JShellTool.ArgSuggestion#matchesType():::Indicates whether input continuation matches the target type and is thus more likely to be the desired continuation:::return
JShellToolBuilder#in(InputStream, InputStream):::Set the input channels:::return
JShellToolBuilder#out(PrintStream):::Set the output channels:::return
JShellToolBuilder#out(PrintStream, PrintStream, PrintStream):::Set the output channels:::return
JShellToolBuilder#err(PrintStream):::Set the error channels:::return
JShellToolBuilder#err(PrintStream, PrintStream):::Set the error channels:::return
JShellToolBuilder#persistence(Preferences):::Set the storage mechanism for persistent information which includes input history and retained settings:::new->PreferencesStorage->return
JShellToolBuilder#persistence(Map):::Set the storage mechanism for persistent information which includes input history and retained settings:::new->MapStorage->return
JShellToolBuilder#env(Map):::Set the source for environment variables:::return
JShellToolBuilder#locale(Locale):::Set the locale:::return
JShellToolBuilder#promptCapture(boolean):::Set if the special command capturing prompt override should be used:::return
JShellToolBuilder#rawTool():::Create a tool instance for testing:::if->Preferences->userRoot->node->new->PreferencesStorage->if->System->getenv->sh->new->JShellTool->return
JShellToolBuilder#run(String...):::Run an instance of the Java shell tool as configured by the other methods in this interface:::rawTool->start
JShellToolBuilder#start(String...):::Run an instance of the Java shell tool as configured by the other methods in this interface:::return->rawTool->start
JShellToolProvider#name():::Returns the name of this Java shell tool provider.:::return
JShellToolProvider#run(InputStream, OutputStream, OutputStream, String...):::Run the jshell tool:::xin->xout->new->PrintStream->xerr->new->PrintStream->try->return->JavaShellToolBuilder->builder->in->out->err->start->catch->xerr->ex->getMessage->println->return->finally
JShellToolProvider#getSourceVersions():::Returns the source versions of the jshell tool.:::return->Collections->EnumSet->SourceVersion->latest->range->unmodifiableSet
JShellToolProvider#main(String[]):::Launch the tool and exit.:::System->JavaShellToolBuilder->builder->start->exit
PersistentStorage#clear():::Removes all of the preferences (key-value associations) in preferences.:::
PersistentStorage#keys():::Returns all of the keys that have an associated value in preferences.:::
PersistentStorage#get(String):::Returns the value associated with the specified key in preferences.:::
PersistentStorage#put(String, String):::Associates the specified value with the specified key in this preference node.:::
PersistentStorage#remove(String):::Removes the value associated with the specified key in preferences, if any.:::
PersistentStorage#flush():::Forces any changes in the contents of this preferences to be stored:::
Startup#unpack(String, MessageHandler):::Factory method: Unpack from stored form.:::if->if->storedForm->isEmpty->return->noStartup->try->all->storedForm->split->if->return->new->StartupEntry->new->Startup->else->if->e->new->ArrayList<>->for->i->return->new->Startup->else->throw->new->IllegalArgumentException->catch->mh->ex->getMessage->errormsg->finally->return->defaultStartup
Startup#fromFileList(List, String, MessageHandler):::Factory method: Read Startup from a list of external files or resources.:::entries->fns->stream->readFile->map->toList->collect->if->entries->stream->anyMatch->return->return->new->Startup
Startup#noStartup():::Factory method: The empty Startup ("-none").:::return->Collections->emptyList->new->Startup
Startup#defaultStartup(MessageHandler):::Factory method: The default Startup ("-default.").:::if->return->try->content->readResource->return->new->StartupEntry->new->Startup->catch->mh->e->getMessage->errormsg->mh->errormsg->mh->errormsg->finally->return->noStartup

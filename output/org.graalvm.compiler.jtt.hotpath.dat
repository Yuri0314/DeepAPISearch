org.graalvm.compiler.jtt.hotpath.HP_allocate01#test(int)->int::: p_allocate01 test
org.graalvm.compiler.jtt.hotpath.HP_allocate01#run0()->void::: p_allocate01 run0
org.graalvm.compiler.jtt.hotpath.HP_allocate01#run1()->void::: p_allocate01 run1
org.graalvm.compiler.jtt.hotpath.HP_allocate01#run2()->void::: p_allocate01 run2
org.graalvm.compiler.jtt.hotpath.HP_allocate01#run3()->void::: p_allocate01 run3
org.graalvm.compiler.jtt.hotpath.HP_allocate01#run4()->void::: p_allocate01 run4
org.graalvm.compiler.jtt.hotpath.HP_allocate02#test(int)->int::: p_allocate02 test
org.graalvm.compiler.jtt.hotpath.HP_allocate02#run0()->void::: p_allocate02 run0
org.graalvm.compiler.jtt.hotpath.HP_allocate03#test(int)->int::: p_allocate03 test
org.graalvm.compiler.jtt.hotpath.HP_allocate03#run0()->void::: p_allocate03 run0
org.graalvm.compiler.jtt.hotpath.HP_allocate04#test(int)->int::: p_allocate04 test
org.graalvm.compiler.jtt.hotpath.HP_allocate04#run0()->void::: p_allocate04 run0
org.graalvm.compiler.jtt.hotpath.HP_array01#test(int)->int::: p_array01 test
org.graalvm.compiler.jtt.hotpath.HP_array01#run0()->void::: p_array01 run0
org.graalvm.compiler.jtt.hotpath.HP_array02#test(int)->int::: p_array02 test
org.graalvm.compiler.jtt.hotpath.HP_array02#run0()->void::: p_array02 run0
org.graalvm.compiler.jtt.hotpath.HP_array03#test(int)->int::: p_array03 test
org.graalvm.compiler.jtt.hotpath.HP_array03#run0()->void::: p_array03 run0
org.graalvm.compiler.jtt.hotpath.HP_array04#test(int)->int::: p_array04 test
org.graalvm.compiler.jtt.hotpath.HP_array04#run0()->void::: p_array04 run0
org.graalvm.compiler.jtt.hotpath.HP_control01#test(int)->int::: p_control01 test
org.graalvm.compiler.jtt.hotpath.HP_control01#run0()->void::: p_control01 run0
org.graalvm.compiler.jtt.hotpath.HP_control01#run1()->void::: p_control01 run1
org.graalvm.compiler.jtt.hotpath.HP_control02#test(int)->int::: p_control02 test
org.graalvm.compiler.jtt.hotpath.HP_control02#run0()->void::: p_control02 run0
org.graalvm.compiler.jtt.hotpath.HP_control02#run1()->void::: p_control02 run1
org.graalvm.compiler.jtt.hotpath.HP_convert01#test(int)->int::: p_convert01 test
org.graalvm.compiler.jtt.hotpath.HP_convert01#run0()->void::: p_convert01 run0
org.graalvm.compiler.jtt.hotpath.HP_count#test(int)->int::: p_count test
org.graalvm.compiler.jtt.hotpath.HP_count#run0()->void::: p_count run0
org.graalvm.compiler.jtt.hotpath.HP_dead01#test(int)->int::: p_dead01 test
org.graalvm.compiler.jtt.hotpath.HP_dead01#run0()->void::: p_dead01 run0
org.graalvm.compiler.jtt.hotpath.HP_dead01#run1()->void::: p_dead01 run1
org.graalvm.compiler.jtt.hotpath.HP_dead01#run2()->void::: p_dead01 run2
org.graalvm.compiler.jtt.hotpath.HP_dead01#run3()->void::: p_dead01 run3
org.graalvm.compiler.jtt.hotpath.HP_demo01#test(int)->int::: p_demo01 test
org.graalvm.compiler.jtt.hotpath.HP_demo01#run0()->void::: p_demo01 run0
org.graalvm.compiler.jtt.hotpath.HP_field01#test(int)->int::: p_field01 test
org.graalvm.compiler.jtt.hotpath.HP_field01#before(ResolvedJavaMethod)->void::: p_field01 before
org.graalvm.compiler.jtt.hotpath.HP_field01#run0()->void::: p_field01 run0
org.graalvm.compiler.jtt.hotpath.HP_field02#test(int)->int::: p_field02 test
org.graalvm.compiler.jtt.hotpath.HP_field02#run0()->void::: p_field02 run0
org.graalvm.compiler.jtt.hotpath.HP_field03#test(int)->int::: p_field03 test
org.graalvm.compiler.jtt.hotpath.HP_field03#before(ResolvedJavaMethod)->void::: p_field03 before
org.graalvm.compiler.jtt.hotpath.HP_field03#run0()->void::: p_field03 run0
org.graalvm.compiler.jtt.hotpath.HP_field04#test(int)->int::: p_field04 test
org.graalvm.compiler.jtt.hotpath.HP_field04#run0()->void::: p_field04 run0
org.graalvm.compiler.jtt.hotpath.HP_field04#run1()->void::: p_field04 run1
org.graalvm.compiler.jtt.hotpath.HP_idea#test()->boolean::: p_idea test
org.graalvm.compiler.jtt.hotpath.HP_idea#Do()->void::: p_idea  do
org.graalvm.compiler.jtt.hotpath.HP_idea#buildTestData()->void::: p_idea build test data
org.graalvm.compiler.jtt.hotpath.HP_idea#inv(int)->int::: p_idea inv
org.graalvm.compiler.jtt.hotpath.HP_idea#verify()->boolean::: p_idea verify
org.graalvm.compiler.jtt.hotpath.HP_idea#freeTestData()->void::: p_idea free test data
org.graalvm.compiler.jtt.hotpath.HP_idea#run0()->void::: p_idea run0
org.graalvm.compiler.jtt.hotpath.HP_idea#runInv()->void::: p_idea run inv
org.graalvm.compiler.jtt.hotpath.HP_inline01#test(int)->int::: p_inline01 test
org.graalvm.compiler.jtt.hotpath.HP_inline01#foo(int)->int::: p_inline01 foo
org.graalvm.compiler.jtt.hotpath.HP_inline01#bar(int)->int::: p_inline01 bar
org.graalvm.compiler.jtt.hotpath.HP_inline01#run0()->void::: p_inline01 run0
org.graalvm.compiler.jtt.hotpath.HP_inline02#test(int)->int::: p_inline02 test
org.graalvm.compiler.jtt.hotpath.HP_inline02#foo(int, int)->int::: p_inline02 foo
org.graalvm.compiler.jtt.hotpath.HP_inline02#bar(int, int)->int::: p_inline02 bar
org.graalvm.compiler.jtt.hotpath.HP_inline02#car(int, int)->int::: p_inline02 car
org.graalvm.compiler.jtt.hotpath.HP_inline02#run0()->void::: p_inline02 run0
org.graalvm.compiler.jtt.hotpath.HP_invoke01#test(int)->int::: p_invoke01 test
org.graalvm.compiler.jtt.hotpath.HP_invoke01.Instruction#accept(Visitor)->void::: instruction accept
org.graalvm.compiler.jtt.hotpath.HP_invoke01.Instruction.Add#accept(Visitor)->void::: add accept
org.graalvm.compiler.jtt.hotpath.HP_invoke01.Instruction.Sub#accept(Visitor)->void::: sub accept
org.graalvm.compiler.jtt.hotpath.HP_invoke01.Instruction.Mul#accept(Visitor)->void::: mul accept
org.graalvm.compiler.jtt.hotpath.HP_invoke01.Instruction.Div#accept(Visitor)->void::: div accept
org.graalvm.compiler.jtt.hotpath.HP_invoke01.Visitor#visit(Instruction.Add)->void::: visitor visit
org.graalvm.compiler.jtt.hotpath.HP_invoke01.Visitor#visit(Instruction.Sub)->void::: visitor visit
org.graalvm.compiler.jtt.hotpath.HP_invoke01.Visitor#visit(Instruction.Mul)->void::: visitor visit
org.graalvm.compiler.jtt.hotpath.HP_invoke01.Visitor#visit(Instruction.Div)->void::: visitor visit
org.graalvm.compiler.jtt.hotpath.HP_invoke01#run0()->void::: p_invoke01 run0
org.graalvm.compiler.jtt.hotpath.HP_invoke01#run1()->void::: p_invoke01 run1
org.graalvm.compiler.jtt.hotpath.HP_life#test(int)->int::: p_life test
org.graalvm.compiler.jtt.hotpath.HP_life#run0()->void::: p_life run0
org.graalvm.compiler.jtt.hotpath.HP_nest01#test(int)->int::: p_nest01 test
org.graalvm.compiler.jtt.hotpath.HP_nest01#run0()->void::: p_nest01 run0
org.graalvm.compiler.jtt.hotpath.HP_nest02#test(int)->int::: p_nest02 test
org.graalvm.compiler.jtt.hotpath.HP_nest02#run0()->void::: p_nest02 run0
org.graalvm.compiler.jtt.hotpath.HP_scope01#test(int)->int::: p_scope01 test
org.graalvm.compiler.jtt.hotpath.HP_scope01#run0()->void::: p_scope01 run0
org.graalvm.compiler.jtt.hotpath.HP_scope02#test(int)->int::: p_scope02 test
org.graalvm.compiler.jtt.hotpath.HP_scope02#run0()->void::: p_scope02 run0
org.graalvm.compiler.jtt.hotpath.HP_scope02#run1()->void::: p_scope02 run1
org.graalvm.compiler.jtt.hotpath.HP_series#test(int)->double::: p_series test
org.graalvm.compiler.jtt.hotpath.HP_series#run0()->void:::This test is sensitive to the implementation of Math#pow, Math#cos and Math#sin(double)
org.graalvm.compiler.jtt.hotpath.HP_trees01#test(int)->int::: p_trees01 test
org.graalvm.compiler.jtt.hotpath.HP_trees01#run0()->void::: p_trees01 run0

ApplicationProxy#create(Proxy)::: application proxy create:::return->new->ApplicationProxy
InetAddressCachePolicy#get()::: inet address cache policy get:::return
InetAddressCachePolicy#getNegative()::: inet address cache policy get negative:::return
InetAddressCachePolicy#setIfNotSet(int):::Sets the cache policy for successful lookups if the user has not already specified a cache policy for it using a command-property.:::if->checkValue
InetAddressCachePolicy#setNegativeIfNotSet(int):::Sets the cache policy for negative lookups if the user has not already specified a cache policy for it using a command-property.:::if
InetAddressCachePolicy#checkValue(int, int)::: inet address cache policy check value:::if->return->if->throw->new->SecurityException
NetHooks#beforeTcpBind(FileDescriptor, InetAddress, int):::Invoke prior to binding a TCP socket.:::
NetHooks#beforeTcpConnect(FileDescriptor, InetAddress, int):::Invoke prior to connecting an unbound TCP socket.:::
NetProperties#loadDefaultProperties()::: net properties load default properties:::fname->StaticProperty->javaHome->if->throw->new->Error->try->f->new->File->new->File->f->getCanonicalPath->in->new->FileInputStream->bin->new->BufferedInputStream->props->load->bin->close->catch->finally
NetProperties#get(String):::Get a networking system property:::def->props->getProperty->try->return->System->getProperty->catch->finally->return
NetProperties#getInteger(String, int):::Get an Integer networking system property:::val->try->System->props->getProperty->getProperty->catch->finally->if->try->return->Integer->decode->catch->finally->return
NetProperties#getBoolean(String):::Get a Boolean networking system property:::val->try->System->props->getProperty->getProperty->catch->finally->if->try->return->Boolean->valueOf->catch->finally->return
NetworkClient#isASCIISuperset(String):::Test the named character encoding to verify that it converts ASCII characters correctly:::chkS->chkB->b->chkS->getBytes->return->Arrays->equals
NetworkClient#openServer(String, int):::Open a connection to the server.:::if->closeServer->doConnect->try->serverSocket->getOutputStream->new->BufferedOutputStream->new->PrintStream->catch->throw->new->InternalError->finally->serverSocket->getInputStream->new->BufferedInputStream
NetworkClient#doConnect(String, int):::Return a socket connected to the server, with any appropriate options pre-established:::s->if->if->proxy->type->AccessController->new->PrivilegedAction<>->doPrivileged->else->if->proxy->type->createSocket->else->new->Socket->else->createSocket->if->s->new->InetSocketAddress->connect->else->if->s->new->InetSocketAddress->connect->else->s->new->InetSocketAddress->connect->if->s->setSoTimeout->else->if->s->setSoTimeout->return
NetworkClient#createSocket():::The following method, createSocket, is provided to allow the https client to override it so that it may use its socket factory to create the socket.:::return->new->java.net.Socket
NetworkClient#getLocalAddress()::: network client get local address:::if->throw->new->IOException->return->AccessController->new->PrivilegedAction<>->doPrivileged
NetworkClient#closeServer():::Close an open connection to the server.:::if->serverIsOpen->return->serverSocket->close
NetworkClient#serverIsOpen():::Return server connection status:::return
NetworkClient#setConnectTimeout(int)::: network client set connect timeout:::
NetworkClient#getConnectTimeout()::: network client get connect timeout:::return
NetworkClient#setReadTimeout(int):::Sets the read timeout:::if->if->try->serverSocket->setSoTimeout->catch->finally
NetworkClient#getReadTimeout()::: network client get read timeout:::return
NetworkServer#close():::Close an open connection to the client.:::clientSocket->close
NetworkServer#clientIsOpen():::Return client connection status:::return
NetworkServer#run()::: network server run:::if->Thread->currentThread->setPriority->while->try->ns->serverSocket->accept->n->clone->new->Thread->start->catch->print->e->printStackTrace->try->serverSocket->close->catch->finally->print->break->finally->else->try->clientSocket->getOutputStream->new->BufferedOutputStream->new->PrintStream->clientSocket->getInputStream->new->BufferedInputStream->serviceRequest->catch->finally->try->close->catch->finally
NetworkServer#startServer(int):::Start a server on port port:::new->ServerSocket->new->Thread->serverInstance->start
NetworkServer#serviceRequest():::Service one request:::buf->new->byteArr->n->clientOutput->getClass->getName->print->clientOutput->flush->while->clientInput->read->clientOutput->write
NetworkServer#main(String[])::: network server main:::try->new->NetworkServer->startServer->catch->print->finally
NetworkServer#clone():::Clone this object;:::try->return->super->clone->catch->throw->new->InternalError->finally
PortConfig#getLower()::: port config get lower:::return
PortConfig#getUpper()::: port config get upper:::return
ProgressEvent#getURL():::Return URL related to the progress.:::return
ProgressEvent#getMethod():::Return method associated with URL.:::return
ProgressEvent#getContentType():::Return content type of the URL.:::return
ProgressEvent#getProgress():::Return current progress value.:::return
ProgressEvent#getExpected():::Return expected maximum progress value; -1 if expected is unknown.:::return
ProgressEvent#getState():::Return state.:::return
ProgressEvent#toString()::: progress event to string:::return->getClass->getName
ProgressListener#progressStart(ProgressEvent):::Start progress.:::
ProgressListener#progressUpdate(ProgressEvent):::Update progress.:::
ProgressListener#progressFinish(ProgressEvent):::Finish progress.:::
ProgressMeteringPolicy#shouldMeterInput(URL, String):::Return true if metering should be turned on for a particular network input stream.:::
ProgressMeteringPolicy#getProgressUpdateThreshold():::Return update notification threshold.:::
ProgressMonitor#getDefault():::Return default ProgressMonitor.:::return
ProgressMonitor#setDefault(ProgressMonitor):::Change default ProgressMonitor implementation.:::if
ProgressMonitor#setMeteringPolicy(ProgressMeteringPolicy):::Change progress metering policy.:::if
ProgressMonitor#getProgressSources():::Return a snapshot of the ProgressSource list:::snapshot->new->ArrayList<>->try->synchronized->for->iter->progressSourceList->iterator->iter->hasNext->catch->e->printStackTrace->finally->return
ProgressMonitor#getProgressUpdateThreshold():::Return update notification threshold:::return->meteringPolicy->getProgressUpdateThreshold
ProgressMonitor#shouldMeterInput(URL, String):::Return true if metering should be turned on for a particular URL input stream.:::return->meteringPolicy->shouldMeterInput
ProgressMonitor#registerSource(ProgressSource):::Register progress source when progress is began.:::synchronized->if->progressSourceList->contains->return->progressSourceList->add->if->progressListenerList->size->listeners->new->ArrayList<>->synchronized->for->iter->progressListenerList->iterator->iter->hasNext->for->iter->listeners->iterator->iter->hasNext
ProgressMonitor#unregisterSource(ProgressSource):::Unregister progress source when progress is finished.:::synchronized->if->progressSourceList->contains->return->pi->close->progressSourceList->remove->if->progressListenerList->size->listeners->new->ArrayList<>->synchronized->for->iter->progressListenerList->iterator->iter->hasNext->for->iter->listeners->iterator->iter->hasNext
ProgressMonitor#updateProgress(ProgressSource):::Progress source is updated.:::synchronized->if->progressSourceList->contains->return->if->progressListenerList->size->listeners->new->ArrayList<>->synchronized->for->iter->progressListenerList->iterator->iter->hasNext->for->iter->listeners->iterator->iter->hasNext
ProgressMonitor#addProgressListener(ProgressListener):::Add progress listener in progress monitor.:::synchronized->progressListenerList->add
ProgressMonitor#removeProgressListener(ProgressListener):::Remove progress listener from progress monitor.:::synchronized->progressListenerList->remove
DefaultProgressMeteringPolicy#shouldMeterInput(URL, String):::Return true if metering should be turned on for a particular network input stream.:::return
DefaultProgressMeteringPolicy#getProgressUpdateThreshold():::Return update notification threshold.:::return
ProgressSource#connected()::: progress source connected:::if->return->return
ProgressSource#close():::Close progress source.:::
ProgressSource#getURL():::Return URL of progress source.:::return
ProgressSource#getMethod():::Return method of URL.:::return
ProgressSource#getContentType():::Return content type of URL.:::return
ProgressSource#setContentType(String)::: progress source set content type:::
ProgressSource#getProgress():::Return current progress.:::return
ProgressSource#getExpected():::Return expected maximum progress; -1 if expected is unknown.:::return
ProgressSource#getState():::Return state.:::return
ProgressSource#beginTracking():::Begin progress tracking.:::progressMonitor->registerSource
ProgressSource#finishTracking():::Finish progress tracking.:::progressMonitor->unregisterSource
ProgressSource#updateProgress(long, long):::Update progress.:::if->connected->else->if->progressMonitor->updateProgress->if->if->close
ProgressSource#clone()::: progress source clone:::return->super->clone
ProgressSource#toString()::: progress source to string:::return->getClass->getName
ResourceManager#beforeUdpCreate()::: resource manager before udp create:::if->System->getSecurityManager->if->numSockets->incrementAndGet->numSockets->decrementAndGet->throw->new->SocketException
ResourceManager#afterUdpClose()::: resource manager after udp close:::if->System->getSecurityManager->numSockets->decrementAndGet
SocksProxy#create(SocketAddress, int)::: socks proxy create:::return->new->SocksProxy
SocksProxy#protocolVersion()::: socks proxy protocol version:::return
TelnetInputStream#setStickyCRLF(boolean)::: telnet input stream set sticky f:::
TelnetInputStream#read()::: telnet input stream read:::if->return->super->read->c->if->return->if->super->read->switch->super->read->throw->new->TelnetProtocolException->return->if->return->else->return->return
TelnetInputStream#read(byte[]):::read into a byte array:::return->read
TelnetInputStream#read(byte[], int, int):::Read into a byte array at offset off for length length bytes.:::if->return->super->read->c->offStart->while->read->if->break->return
TelnetOutputStream#setStickyCRLF(boolean):::set the stickyCRLF flag:::
TelnetOutputStream#write(int):::Writes the int to the stream and does CR LF processing if necessary.:::if->super->write->return->if->if->super->write->super->write->if->else->if->super->write->super->write->return->if->if->else->super->write->super->write
TelnetOutputStream#write(byte[], int, int):::Write the bytes at offset off in buffer bytes for length bytes.:::if->super->write->return->while->write
TransferProtocolClient#readServerResponse():::Pulls the response from the server and returns the code as a number:::replyBuf->new->StringBuilder->c->continuingCode->code->response->serverResponse->setSize->while->while->serverInput->read->if->if->serverInput->read->replyBuf->append->replyBuf->append->if->break->replyBuf->toString->replyBuf->setLength->if->print->if->response->length->else->try->Integer->parseInt->catch->continue->finally->serverResponse->addElement->if->if->response->length->response->charAt->continue->else->break->else->if->response->length->response->charAt->continue->else->break->return
TransferProtocolClient#sendServer(String):::Sends command cmd to the server.:::serverOutput->print->if->print
TransferProtocolClient#getResponseString():::converts the server response into a string.:::return->serverResponse->elementAt
TransferProtocolClient#getResponseStrings():::Returns all server response strings.:::return
URLCanonicalizer#canonicalize(String):::Given a possibly abbreviated URL (missing a protocol name, typically), this method's job is to transform that URL into a canonical form, by including a protocol name and additional syntax, if necessary:::resultURL->if->simpleURL->startsWith->else->if->simpleURL->startsWith->else->if->simpleURL->startsWith->else->if->hasProtocolName->if->isSimpleHostName->return
URLCanonicalizer#hasProtocolName(String):::Given a possibly abbreviated URL, this predicate function returns true if it appears that the URL contains a protocol name:::index->url->indexOf->if->return->for->i->return
URLCanonicalizer#isSimpleHostName(String):::Returns true if the URL is just a single name, no periods or slashes, false otherwise:::for->i->url->length->return

sun.net.ApplicationProxy#create(Proxy)->ApplicationProxy::: application proxy create
sun.net.InetAddressCachePolicy#get()->int::: inet address cache policy get
sun.net.InetAddressCachePolicy#getNegative()->int::: inet address cache policy get negative
sun.net.InetAddressCachePolicy#setIfNotSet(int)->void:::Sets the cache policy for successful lookups if the user has not already specified a cache policy for it using a command-property.
sun.net.InetAddressCachePolicy#setNegativeIfNotSet(int)->void:::Sets the cache policy for negative lookups if the user has not already specified a cache policy for it using a command-property.
sun.net.NetHooks#beforeTcpBind(FileDescriptor, InetAddress, int)->void:::Invoke prior to binding a TCP socket.
sun.net.NetHooks#beforeTcpConnect(FileDescriptor, InetAddress, int)->void:::Invoke prior to connecting an unbound TCP socket.
sun.net.NetProperties#get(String)->String:::Get a networking system property
sun.net.NetProperties#getInteger(String, int)->Integer:::Get an Integer networking system property
sun.net.NetProperties#getBoolean(String)->Boolean:::Get a Boolean networking system property
sun.net.NetworkClient#openServer(String, int)->void:::Open a connection to the server.
sun.net.NetworkClient#doConnect(String, int)->Socket:::Return a socket connected to the server, with any appropriate options pre-established
sun.net.NetworkClient#createSocket()->Socket:::The following method, createSocket, is provided to allow the https client to override it so that it may use its socket factory to create the socket.
sun.net.NetworkClient#getLocalAddress()->InetAddress::: network client get local address
sun.net.NetworkClient#closeServer()->void:::Close an open connection to the server.
sun.net.NetworkClient#serverIsOpen()->boolean:::Return server connection status
sun.net.NetworkClient#setConnectTimeout(int)->void::: network client set connect timeout
sun.net.NetworkClient#getConnectTimeout()->int::: network client get connect timeout
sun.net.NetworkClient#setReadTimeout(int)->void:::Sets the read timeout
sun.net.NetworkClient#getReadTimeout()->int::: network client get read timeout
sun.net.NetworkServer#close()->void:::Close an open connection to the client.
sun.net.NetworkServer#clientIsOpen()->boolean:::Return client connection status
sun.net.NetworkServer#run()->void::: network server run
sun.net.NetworkServer#startServer(int)->void:::Start a server on port port
sun.net.NetworkServer#serviceRequest()->void:::Service one request
sun.net.NetworkServer#main(String[])->void::: network server main
sun.net.NetworkServer#clone()->Object:::Clone this object;
sun.net.PortConfig#getLower()->int::: port config get lower
sun.net.PortConfig#getUpper()->int::: port config get upper
sun.net.ProgressEvent#getURL()->URL:::Return URL related to the progress.
sun.net.ProgressEvent#getMethod()->String:::Return method associated with URL.
sun.net.ProgressEvent#getContentType()->String:::Return content type of the URL.
sun.net.ProgressEvent#getProgress()->long:::Return current progress value.
sun.net.ProgressEvent#getExpected()->long:::Return expected maximum progress value; -1 if expected is unknown.
sun.net.ProgressEvent#getState()->ProgressSource.State:::Return state.
sun.net.ProgressEvent#toString()->String::: progress event to string
sun.net.ProgressListener#progressStart(ProgressEvent)->void:::Start progress.
sun.net.ProgressListener#progressUpdate(ProgressEvent)->void:::Update progress.
sun.net.ProgressListener#progressFinish(ProgressEvent)->void:::Finish progress.
sun.net.ProgressMeteringPolicy#shouldMeterInput(URL, String)->boolean:::Return true if metering should be turned on for a particular network input stream.
sun.net.ProgressMeteringPolicy#getProgressUpdateThreshold()->int:::Return update notification threshold.
sun.net.ProgressMonitor#getDefault()->ProgressMonitor:::Return default ProgressMonitor.
sun.net.ProgressMonitor#setDefault(ProgressMonitor)->void:::Change default ProgressMonitor implementation.
sun.net.ProgressMonitor#setMeteringPolicy(ProgressMeteringPolicy)->void:::Change progress metering policy.
sun.net.ProgressMonitor#getProgressSources()->ArrayList:::Return a snapshot of the ProgressSource list
sun.net.ProgressMonitor#getProgressUpdateThreshold()->int:::Return update notification threshold
sun.net.ProgressMonitor#shouldMeterInput(URL, String)->boolean:::Return true if metering should be turned on for a particular URL input stream.
sun.net.ProgressMonitor#registerSource(ProgressSource)->void:::Register progress source when progress is began.
sun.net.ProgressMonitor#unregisterSource(ProgressSource)->void:::Unregister progress source when progress is finished.
sun.net.ProgressMonitor#updateProgress(ProgressSource)->void:::Progress source is updated.
sun.net.ProgressMonitor#addProgressListener(ProgressListener)->void:::Add progress listener in progress monitor.
sun.net.ProgressMonitor#removeProgressListener(ProgressListener)->void:::Remove progress listener from progress monitor.
sun.net.DefaultProgressMeteringPolicy#shouldMeterInput(URL, String)->boolean:::Return true if metering should be turned on for a particular network input stream.
sun.net.DefaultProgressMeteringPolicy#getProgressUpdateThreshold()->int:::Return update notification threshold.
sun.net.ProgressSource#connected()->boolean::: progress source connected
sun.net.ProgressSource#close()->void:::Close progress source.
sun.net.ProgressSource#getURL()->URL:::Return URL of progress source.
sun.net.ProgressSource#getMethod()->String:::Return method of URL.
sun.net.ProgressSource#getContentType()->String:::Return content type of URL.
sun.net.ProgressSource#setContentType(String)->void::: progress source set content type
sun.net.ProgressSource#getProgress()->long:::Return current progress.
sun.net.ProgressSource#getExpected()->long:::Return expected maximum progress; -1 if expected is unknown.
sun.net.ProgressSource#getState()->State:::Return state.
sun.net.ProgressSource#beginTracking()->void:::Begin progress tracking.
sun.net.ProgressSource#finishTracking()->void:::Finish progress tracking.
sun.net.ProgressSource#updateProgress(long, long)->void:::Update progress.
sun.net.ProgressSource#clone()->Object::: progress source clone
sun.net.ProgressSource#toString()->String::: progress source to string
sun.net.ResourceManager#beforeUdpCreate()->void::: resource manager before udp create
sun.net.ResourceManager#afterUdpClose()->void::: resource manager after udp close
sun.net.SocksProxy#create(SocketAddress, int)->SocksProxy::: socks proxy create
sun.net.SocksProxy#protocolVersion()->int::: socks proxy protocol version
sun.net.TelnetInputStream#setStickyCRLF(boolean)->void::: telnet input stream set sticky f
sun.net.TelnetInputStream#read()->int::: telnet input stream read
sun.net.TelnetInputStream#read(byte[])->int:::read into a byte array
sun.net.TelnetInputStream#read(byte[], int, int)->int:::Read into a byte array at offset off for length length bytes.
sun.net.TelnetOutputStream#setStickyCRLF(boolean)->void:::set the stickyCRLF flag
sun.net.TelnetOutputStream#write(int)->void:::Writes the int to the stream and does CR LF processing if necessary.
sun.net.TelnetOutputStream#write(byte[], int, int)->void:::Write the bytes at offset off in buffer bytes for length bytes.
sun.net.TransferProtocolClient#readServerResponse()->int:::Pulls the response from the server and returns the code as a number
sun.net.TransferProtocolClient#sendServer(String)->void:::Sends command cmd to the server.
sun.net.TransferProtocolClient#getResponseString()->String:::converts the server response into a string.
sun.net.TransferProtocolClient#getResponseStrings()->Vector:::Returns all server response strings.
sun.net.URLCanonicalizer#canonicalize(String)->String:::Given a possibly abbreviated URL (missing a protocol name, typically), this method's job is to transform that URL into a canonical form, by including a protocol name and additional syntax, if necessary
sun.net.URLCanonicalizer#hasProtocolName(String)->boolean:::Given a possibly abbreviated URL, this predicate function returns true if it appears that the URL contains a protocol name
sun.net.URLCanonicalizer#isSimpleHostName(String)->boolean:::Returns true if the URL is just a single name, no periods or slashes, false otherwise

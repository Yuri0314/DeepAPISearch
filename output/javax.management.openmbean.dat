ArrayType#getPrimitiveTypeKey(String):::Return the key used to identify the element type in arrays - e.g:::foreach->if->elementClassName->equals->return->return
ArrayType#getPrimitiveTypeName(String):::Return the primitive type name corresponding to the given wrapper class:::foreach->if->elementClassName->equals->return->return
ArrayType#getPrimitiveOpenType(String):::Return the primitive open type corresponding to the given primitive type:::foreach->if->primitiveTypeName->equals->return->return
ArrayType#getDimension():::Returns the dimension of arrays described by this ArrayType instance.:::return
ArrayType#getElementOpenType():::Returns the open type of element values contained in the arrays described by this ArrayType instance.:::return
ArrayType#isPrimitiveArray():::Returns true if the open data values this open type describes are primitive arrays, false otherwise.:::return
ArrayType#isValue(Object):::Tests whether <var>obj</var> is a value for this ArrayType instance:::if->return->objClass->obj->getClass->objClassName->objClass->getName->if->objClass->isArray->return->if->this->getClassName->equals->return->if->getClassName->getName->equals->getClassName->getName->equals->isTabular->elementType->getClassName->getName->equals->dims->getDimension->new->intArr->elementClass->targetClass->Array->newInstance->getClass->if->targetClass->isAssignableFrom->return->if->checkElementsType->return->return->return
ArrayType#equals(Object):::Compares the specified obj parameter with this ArrayType instance for equality:::if->return->if->return->other->if->return->if->equals->return->return
ArrayType#hashCode():::Returns the hash code value for this ArrayType instance:::if->value->elementType->hashCode->Boolean->valueOf->hashCode->Integer->valueOf->return->myHashCode->intValue
ArrayType#toString():::Returns a string representation of this ArrayType instance:::if->getClass->getName->getTypeName->return
ArrayType#getArrayType(OpenType):::Create an ArrayType instance in a type-safe manner:::return->new->ArrayType<E[]>
ArrayType#getPrimitiveArrayType(Class):::Create an ArrayType instance in a type-safe manner:::if->arrayClass->isArray->throw->new->IllegalArgumentException->n->componentType->arrayClass->getComponentType->while->componentType->isArray->componentType->getComponentType->componentTypeName->componentType->getName->if->componentType->isPrimitive->throw->new->IllegalArgumentException->simpleType->getPrimitiveOpenType->try->at->new->ArrayType->if->new->ArrayType<T>->return->catch->throw->new->IllegalArgumentException->finally
CompositeData#getCompositeType():::Returns the composite type  of this composite data instance.:::
CompositeData#get(String):::Returns the value of the item whose name is key.:::
CompositeData#getAll(String[]):::Returns an array of the values of the items whose names are specified by keys, in the same order as keys.:::
CompositeData#containsKey(String):::Returns true if and only if this CompositeData instance contains an item whose name is key:::
CompositeData#containsValue(Object):::Returns true if and only if this CompositeData instance contains an item whose value is value.:::
CompositeData#values():::Returns an unmodifiable Collection view of the item values contained in this CompositeData instance:::
CompositeData#equals(Object):::Compares the specified <var>obj</var> parameter with this CompositeData instance for equality:::
CompositeData#hashCode():::Returns the hash code value for this CompositeData instance:::
CompositeData#toString():::Returns a string representation of this CompositeData instance:::
CompositeDataInvocationHandler#getCompositeData():::       Return the CompositeData that was supplied to the        constructor.:::return
CompositeDataSupport#getCompositeType():::Returns the composite type  of this composite data instance.:::return
CompositeDataSupport#get(String):::Returns the value of the item whose name is key.:::if->key->trim->equals->throw->new->IllegalArgumentException->if->contents->key->trim->containsKey->throw->key->trim->new->InvalidKeyException->return->contents->key->trim->get
CompositeDataSupport#getAll(String[]):::Returns an array of the values of the items whose names are specified by keys, in the same order as keys.:::if->return->new->ObjectArr->results->new->ObjectArr->for->i->return
CompositeDataSupport#containsKey(String):::Returns true if and only if this CompositeData instance contains an item whose name is key:::if->key->trim->equals->return->return->contents->containsKey
CompositeDataSupport#containsValue(Object):::Returns true if and only if this CompositeData instance contains an item whose value is value.:::return->contents->containsValue
CompositeDataSupport#values():::Returns an unmodifiable Collection view of the item values contained in this CompositeData instance:::return->Collections->contents->values->unmodifiableCollection
CompositeDataSupport#equals(Object):::Compares the specified <var>obj</var> parameter with this CompositeDataSupport instance for equality:::if->return->if->return->other->if->this->getCompositeType->other->getCompositeType->equals->return->if->contents->size->other->values->size->return->foreach->contents->entrySet->e1->entry->getValue->e2->other->entry->getKey->get->if->continue->if->return->eq->e1->getClass->isArray->Arrays->new->ObjectArr->new->ObjectArr->deepEquals->e1->equals->if->return->return
CompositeDataSupport#hashCode():::Returns the hash code value for this CompositeDataSupport instance:::hashcode->compositeType->hashCode->foreach->contents->values->if->Arrays->deepHashCode->else->if->Arrays->hashCode->else->if->Arrays->hashCode->else->if->Arrays->hashCode->else->if->Arrays->hashCode->else->if->Arrays->hashCode->else->if->Arrays->hashCode->else->if->Arrays->hashCode->else->if->Arrays->hashCode->else->if->o->hashCode->return
CompositeDataSupport#toString():::Returns a string representation of this CompositeDataSupport instance:::return->new->StringBuilder->this->getClass->getName->append->append->compositeType->toString->append->append->contentString->append->append->toString
CompositeDataView#toCompositeData(CompositeType):::Return a CompositeData corresponding to the values in this object:::
CompositeType#containsKey(String):::Returns true if this CompositeType instance defines an item whose name is <var>itemName</var>.:::if->return->return->nameToDescription->containsKey
CompositeType#getDescription(String):::Returns the description of the item whose name is <var>itemName</var>, or null if this CompositeType instance does not define any item whose name is <var>itemName</var>.:::if->return->return->nameToDescription->get
CompositeType#getType(String):::Returns the open type of the item whose name is <var>itemName</var>, or null if this CompositeType instance does not define any item whose name is <var>itemName</var>.:::if->return->return->nameToType->get
CompositeType#keySet():::Returns an unmodifiable Set view of all the item names defined by this CompositeType instance:::if->Collections->nameToDescription->keySet->unmodifiableSet->return
CompositeType#isValue(Object):::Tests whether <var>obj</var> is a value which could be described by this CompositeType instance:::if->return->value->valueType->value->getCompositeType->return->this->isAssignableFrom
CompositeType#isAssignableFrom(OpenType):::Tests whether values of the given type can be assigned to this open type:::if->return->ct->if->ct->getTypeName->getTypeName->equals->return->foreach->keySet->otItemType->ct->getType->thisItemType->getType->if->thisItemType->isAssignableFrom->return->return
CompositeType#equals(Object):::Compares the specified obj parameter with this CompositeType instance for equality:::if->return->other->try->catch->return->finally->if->this->getTypeName->other->getTypeName->equals->return->if->equals->return->return
CompositeType#hashCode():::Returns the hash code value for this CompositeType instance:::if->value->this->getTypeName->hashCode->foreach->nameToDescription->keySet->key->hashCode->get->hashCode->Integer->valueOf->return->myHashCode->intValue
CompositeType#toString():::Returns a string representation of this CompositeType instance:::if->result->new->StringBuilder->result->this->getClass->getName->append->result->append->result->getTypeName->append->result->append->i->k->nameToType->keySet->iterator->key->while->k->hasNext->k->next->if->result->append->result->append->result->append->result->append->result->nameToType->get->toString->append->result->append->result->toString->return
OpenMBeanAttributeInfo#isReadable():::Returns true if the attribute described by this OpenMBeanAttributeInfo instance is readable, false otherwise.:::
OpenMBeanAttributeInfo#isWritable():::Returns true if the attribute described by this OpenMBeanAttributeInfo instance is writable, false otherwise.:::
OpenMBeanAttributeInfo#isIs():::Returns true if the attribute described by this OpenMBeanAttributeInfo instance is accessed through a isXXX getter (applies only to boolean and Boolean values), false otherwise.:::
OpenMBeanAttributeInfo#equals(Object):::Compares the specified <var>obj</var> parameter with this OpenMBeanAttributeInfo instance for equality:::
OpenMBeanAttributeInfo#hashCode():::Returns the hash code value for this OpenMBeanAttributeInfo instance:::
OpenMBeanAttributeInfo#toString():::Returns a string representation of this OpenMBeanAttributeInfo instance:::
OpenMBeanAttributeInfoSupport#getOpenType():::Returns the open type for the values of the attribute described by this OpenMBeanAttributeInfoSupport instance.:::return
OpenMBeanAttributeInfoSupport#getDefaultValue():::Returns the default value for the attribute described by this OpenMBeanAttributeInfoSupport instance, if specified, or null otherwise.:::return
OpenMBeanAttributeInfoSupport#getLegalValues():::Returns an unmodifiable Set of legal values for the attribute described by this OpenMBeanAttributeInfoSupport instance, if specified, or null otherwise.:::return
OpenMBeanAttributeInfoSupport#getMinValue():::Returns the minimal value for the attribute described by this OpenMBeanAttributeInfoSupport instance, if specified, or null otherwise.:::return
OpenMBeanAttributeInfoSupport#getMaxValue():::Returns the maximal value for the attribute described by this OpenMBeanAttributeInfoSupport instance, if specified, or null otherwise.:::return
OpenMBeanAttributeInfoSupport#hasDefaultValue():::Returns true if this OpenMBeanAttributeInfoSupport instance specifies a non-null default value for the described attribute, false otherwise.:::return
OpenMBeanAttributeInfoSupport#hasLegalValues():::Returns true if this OpenMBeanAttributeInfoSupport instance specifies a non-null set of legal values for the described attribute, false otherwise.:::return
OpenMBeanAttributeInfoSupport#hasMinValue():::Returns true if this OpenMBeanAttributeInfoSupport instance specifies a non-null minimal value for the described attribute, false otherwise.:::return
OpenMBeanAttributeInfoSupport#hasMaxValue():::Returns true if this OpenMBeanAttributeInfoSupport instance specifies a non-null maximal value for the described attribute, false otherwise.:::return
OpenMBeanAttributeInfoSupport#isValue(Object):::Tests whether obj is a valid value for the attribute described by this OpenMBeanAttributeInfoSupport instance.:::return->isValue
OpenMBeanAttributeInfoSupport#equals(Object):::Compares the specified obj parameter with this OpenMBeanAttributeInfoSupport instance for equality:::if->return->other->return->this->isReadable->other->isReadable->this->isWritable->other->isWritable->this->isIs->other->isIs->equal
OpenMBeanAttributeInfoSupport#hashCode():::Returns the hash code value for this OpenMBeanAttributeInfoSupport instance.  The hash code of an OpenMBeanAttributeInfoSupport instance is the sum of the hash codes of all elements of information used in equals comparisons (ie: its name, its open type, its default, min, max and legal values, and its Descriptor):::if->hashCode->return->myHashCode->intValue
OpenMBeanAttributeInfoSupport#toString():::Returns a string representation of this OpenMBeanAttributeInfoSupport instance:::if->toString->return
OpenMBeanConstructorInfo#getDescription():::Returns a human readable description of the constructor described by this OpenMBeanConstructorInfo instance.:::
OpenMBeanConstructorInfo#getName():::Returns the name of the constructor described by this OpenMBeanConstructorInfo instance.:::
OpenMBeanConstructorInfo#getSignature():::Returns an array of OpenMBeanParameterInfo instances describing each parameter in the signature of the constructor described by this OpenMBeanConstructorInfo instance.:::
OpenMBeanConstructorInfo#equals(Object):::Compares the specified <var>obj</var> parameter with this OpenMBeanConstructorInfo instance for equality:::
OpenMBeanConstructorInfo#hashCode():::Returns the hash code value for this OpenMBeanConstructorInfo instance:::
OpenMBeanConstructorInfo#toString():::Returns a string representation of this OpenMBeanConstructorInfo instance:::
OpenMBeanConstructorInfoSupport#equals(Object):::Compares the specified obj parameter with this OpenMBeanConstructorInfoSupport instance for equality.  Returns true if and only if all of the following statements are true:  <ul> <li>obj is non null,</li> <li>obj also implements the OpenMBeanConstructorInfo interface,</li> <li>their names are equal</li> <li>their signatures are equal.</li> </ul>  This ensures that this equals method works properly for obj parameters which are different implementations of the OpenMBeanConstructorInfo interface.:::if->return->other->try->catch->return->finally->if->this->getName->other->getName->equals->return->if->Arrays->this->getSignature->other->getSignature->equals->return->return
OpenMBeanConstructorInfoSupport#hashCode():::Returns the hash code value for this OpenMBeanConstructorInfoSupport instance.  The hash code of an OpenMBeanConstructorInfoSupport instance is the sum of the hash codes of all elements of information used in equals comparisons (ie: its name and signature, where the signature hashCode is calculated by a call to java.util.Arrays.asList(this.getSignature).hashCode()).  This ensures that t1.equals(t2) implies that t1.hashCode()==t2.hashCode() for any two OpenMBeanConstructorInfoSupport instances t1 and t2, as required by the general contract of the method Object#hashCode() Object.hashCode().  However, note that another instance of a class implementing the OpenMBeanConstructorInfo interface may be equal to this OpenMBeanConstructorInfoSupport instance as defined by #equals(java.lang.Object), but may have a different hash code if it is calculated differently.  As OpenMBeanConstructorInfoSupport instances are immutable, the hash code for this instance is calculated once, on the first call to hashCode, and then the same value is returned for subsequent calls.:::if->value->this->getName->hashCode->Arrays->this->getSignature->asList->hashCode->Integer->valueOf->return->myHashCode->intValue
OpenMBeanConstructorInfoSupport#toString():::Returns a string representation of this OpenMBeanConstructorInfoSupport instance.  The string representation consists of the name of this class (ie javax.management.openmbean.OpenMBeanConstructorInfoSupport), the name and signature of the described constructor and the string representation of its descriptor.  As OpenMBeanConstructorInfoSupport instances are immutable, the string representation for this instance is calculated once, on the first call to toString, and then the same value is returned for subsequent calls.:::if->new->StringBuilder->this->getClass->getName->append->append->this->getName->append->append->Arrays->this->getSignature->asList->toString->append->append->this->getDescriptor->append->append->toString->return
OpenMBeanInfo#getClassName():::Returns the fully qualified Java class name of the open MBean instances this OpenMBeanInfo describes.:::
OpenMBeanInfo#getDescription():::Returns a human readable description of the type of open MBean instances this OpenMBeanInfo describes.:::
OpenMBeanInfo#getAttributes():::Returns an array of OpenMBeanAttributeInfo instances describing each attribute in the open MBean described by this OpenMBeanInfo instance:::
OpenMBeanInfo#getOperations():::Returns an array of OpenMBeanOperationInfo instances describing each operation in the open MBean described by this OpenMBeanInfo instance:::
OpenMBeanInfo#getConstructors():::Returns an array of OpenMBeanConstructorInfo instances describing each constructor in the open MBean described by this OpenMBeanInfo instance:::
OpenMBeanInfo#getNotifications():::Returns an array of MBeanNotificationInfo instances describing each notification emitted by the open MBean described by this OpenMBeanInfo instance.:::
OpenMBeanInfo#equals(Object):::Compares the specified <var>obj</var> parameter with this OpenMBeanInfo instance for equality:::
OpenMBeanInfo#hashCode():::Returns the hash code value for this OpenMBeanInfo instance:::
OpenMBeanInfo#toString():::Returns a string representation of this OpenMBeanInfo instance:::
OpenMBeanInfoSupport#equals(Object):::Compares the specified obj parameter with this OpenMBeanInfoSupport instance for equality.  Returns true if and only if all of the following statements are true:  <ul> <li>obj is non null,</li> <li>obj also implements the OpenMBeanInfo interface,</li> <li>their class names are equal</li> <li>their infos on attributes, constructors, operations and notifications are equal</li> </ul>  This ensures that this equals method works properly for obj parameters which are different implementations of the OpenMBeanInfo interface.:::if->return->other->try->catch->return->finally->if->Objects->this->getClassName->other->getClassName->equals->return->if->this->getAttributes->other->getAttributes->sameArrayContents->return->if->this->getConstructors->other->getConstructors->sameArrayContents->return->if->this->getOperations->other->getOperations->sameArrayContents->return->if->this->getNotifications->other->getNotifications->sameArrayContents->return->return
OpenMBeanInfoSupport#hashCode():::Returns the hash code value for this OpenMBeanInfoSupport instance.  The hash code of an OpenMBeanInfoSupport instance is the sum of the hash codes of all elements of information used in equals comparisons (ie: its class name, and its infos on attributes, constructors, operations and notifications, where the hashCode of each of these arrays is calculated by a call to new java.util.HashSet(java.util.Arrays.asList(this.getSignature)).hashCode()).  This ensures that t1.equals(t2) implies that t1.hashCode()==t2.hashCode() for any two OpenMBeanInfoSupport instances t1 and t2, as required by the general contract of the method Object#hashCode() Object.hashCode().  However, note that another instance of a class implementing the OpenMBeanInfo interface may be equal to this OpenMBeanInfoSupport instance as defined by #equals(java.lang.Object), but may have a different hash code if it is calculated differently.  As OpenMBeanInfoSupport instances are immutable, the hash code for this instance is calculated once, on the first call to hashCode, and then the same value is returned for subsequent calls.:::if->value->if->this->getClassName->this->getClassName->hashCode->this->getAttributes->arraySetHash->this->getConstructors->arraySetHash->this->getOperations->arraySetHash->this->getNotifications->arraySetHash->Integer->valueOf->return->myHashCode->intValue
OpenMBeanInfoSupport#toString():::Returns a string representation of this OpenMBeanInfoSupport instance.  The string representation consists of the name of this class (ie javax.management.openmbean.OpenMBeanInfoSupport), the MBean class name, the string representation of infos on attributes, constructors, operations and notifications of the described MBean and the string representation of the descriptor.  As OpenMBeanInfoSupport instances are immutable, the string representation for this instance is calculated once, on the first call to toString, and then the same value is returned for subsequent calls.:::if->new->StringBuilder->this->getClass->getName->append->append->this->getClassName->append->append->Arrays->this->getAttributes->asList->toString->append->append->Arrays->this->getConstructors->asList->toString->append->append->Arrays->this->getOperations->asList->toString->append->append->Arrays->this->getNotifications->asList->toString->append->append->this->getDescriptor->append->append->toString->return
OpenMBeanOperationInfo#getDescription():::Returns a human readable description of the operation described by this OpenMBeanOperationInfo instance.:::
OpenMBeanOperationInfo#getName():::Returns the name of the operation described by this OpenMBeanOperationInfo instance.:::
OpenMBeanOperationInfo#getSignature():::Returns an array of OpenMBeanParameterInfo instances describing each parameter in the signature of the operation described by this OpenMBeanOperationInfo instance:::
OpenMBeanOperationInfo#getImpact():::Returns an int constant qualifying the impact of the operation described by this OpenMBeanOperationInfo instance:::
OpenMBeanOperationInfo#getReturnType():::Returns the fully qualified Java class name of the values returned by the operation described by this OpenMBeanOperationInfo instance:::
OpenMBeanOperationInfo#equals(Object):::Compares the specified <var>obj</var> parameter with this OpenMBeanOperationInfo instance for equality:::
OpenMBeanOperationInfo#hashCode():::Returns the hash code value for this OpenMBeanOperationInfo instance:::
OpenMBeanOperationInfo#toString():::Returns a string representation of this OpenMBeanOperationInfo instance:::
OpenMBeanOperationInfoSupport#getReturnOpenType():::Returns the open type of the values returned by the operation described by this OpenMBeanOperationInfo instance.:::return
OpenMBeanOperationInfoSupport#equals(Object):::Compares the specified obj parameter with this OpenMBeanOperationInfoSupport instance for equality.  Returns true if and only if all of the following statements are true:  <ul> <li>obj is non null,</li> <li>obj also implements the OpenMBeanOperationInfo interface,</li> <li>their names are equal</li> <li>their signatures are equal</li> <li>their return open types are equal</li> <li>their impacts are equal</li> </ul>  This ensures that this equals method works properly for obj parameters which are different implementations of the OpenMBeanOperationInfo interface.:::if->return->other->try->catch->return->finally->if->this->getName->other->getName->equals->return->if->Arrays->this->getSignature->other->getSignature->equals->return->if->this->getReturnOpenType->other->getReturnOpenType->equals->return->if->this->getImpact->other->getImpact->return->return
OpenMBeanOperationInfoSupport#hashCode():::Returns the hash code value for this OpenMBeanOperationInfoSupport instance.  The hash code of an OpenMBeanOperationInfoSupport instance is the sum of the hash codes of all elements of information used in equals comparisons (ie: its name, return open type, impact and signature, where the signature hashCode is calculated by a call to java.util.Arrays.asList(this.getSignature).hashCode()).  This ensures that t1.equals(t2)  implies that t1.hashCode()==t2.hashCode()  for any two OpenMBeanOperationInfoSupport instances t1 and t2, as required by the general contract of the method Object#hashCode() Object.hashCode().  However, note that another instance of a class implementing the OpenMBeanOperationInfo interface may be equal to this OpenMBeanOperationInfoSupport instance as defined by #equals(java.lang.Object), but may have a different hash code if it is calculated differently.  As OpenMBeanOperationInfoSupport instances are immutable, the hash code for this instance is calculated once, on the first call to hashCode, and then the same value is returned for subsequent calls.:::if->value->this->getName->hashCode->Arrays->this->getSignature->asList->hashCode->this->getReturnOpenType->hashCode->this->getImpact->Integer->valueOf->return->myHashCode->intValue
OpenMBeanOperationInfoSupport#toString():::Returns a string representation of this OpenMBeanOperationInfoSupport instance.  The string representation consists of the name of this class (ie javax.management.openmbean.OpenMBeanOperationInfoSupport), and the name, signature, return open type and impact of the described operation and the string representation of its descriptor.  As OpenMBeanOperationInfoSupport instances are immutable, the string representation for this instance is calculated once, on the first call to toString, and then the same value is returned for subsequent calls.:::if->new->StringBuilder->this->getClass->getName->append->append->this->getName->append->append->Arrays->this->getSignature->asList->toString->append->append->this->getReturnOpenType->toString->append->append->this->getImpact->append->append->this->getDescriptor->append->append->toString->return
OpenMBeanParameterInfo#getDescription():::Returns a human readable description of the parameter described by this OpenMBeanParameterInfo instance.:::
OpenMBeanParameterInfo#getName():::Returns the name of the parameter described by this OpenMBeanParameterInfo instance.:::
OpenMBeanParameterInfo#getOpenType():::Returns the open type of the values of the parameter described by this OpenMBeanParameterInfo instance.:::
OpenMBeanParameterInfo#getDefaultValue():::Returns the default value for this parameter, if it has one, or null otherwise.:::
OpenMBeanParameterInfo#getLegalValues():::Returns the set of legal values for this parameter, if it has one, or null otherwise.:::
OpenMBeanParameterInfo#getMinValue():::Returns the minimal value for this parameter, if it has one, or null otherwise.:::
OpenMBeanParameterInfo#getMaxValue():::Returns the maximal value for this parameter, if it has one, or null otherwise.:::
OpenMBeanParameterInfo#hasDefaultValue():::Returns true if this parameter has a specified default value, or false otherwise.:::
OpenMBeanParameterInfo#hasLegalValues():::Returns true if this parameter has a specified set of legal values, or false otherwise.:::
OpenMBeanParameterInfo#hasMinValue():::Returns true if this parameter has a specified minimal value, or false otherwise.:::
OpenMBeanParameterInfo#hasMaxValue():::Returns true if this parameter has a specified maximal value, or false otherwise.:::
OpenMBeanParameterInfo#isValue(Object):::Tests whether <var>obj</var> is a valid value for the parameter described by this OpenMBeanParameterInfo instance.:::
OpenMBeanParameterInfo#equals(Object):::Compares the specified <var>obj</var> parameter with this OpenMBeanParameterInfo instance for equality:::
OpenMBeanParameterInfo#hashCode():::Returns the hash code value for this OpenMBeanParameterInfo instance:::
OpenMBeanParameterInfo#toString():::Returns a string representation of this OpenMBeanParameterInfo instance:::
OpenMBeanParameterInfoSupport#getOpenType():::Returns the open type for the values of the parameter described by this OpenMBeanParameterInfoSupport instance.:::return
OpenMBeanParameterInfoSupport#getDefaultValue():::Returns the default value for the parameter described by this OpenMBeanParameterInfoSupport instance, if specified, or null otherwise.:::return
OpenMBeanParameterInfoSupport#getLegalValues():::Returns an unmodifiable Set of legal values for the parameter described by this OpenMBeanParameterInfoSupport instance, if specified, or null otherwise.:::return
OpenMBeanParameterInfoSupport#getMinValue():::Returns the minimal value for the parameter described by this OpenMBeanParameterInfoSupport instance, if specified, or null otherwise.:::return
OpenMBeanParameterInfoSupport#getMaxValue():::Returns the maximal value for the parameter described by this OpenMBeanParameterInfoSupport instance, if specified, or null otherwise.:::return
OpenMBeanParameterInfoSupport#hasDefaultValue():::Returns true if this OpenMBeanParameterInfoSupport instance specifies a non-null default value for the described parameter, false otherwise.:::return
OpenMBeanParameterInfoSupport#hasLegalValues():::Returns true if this OpenMBeanParameterInfoSupport instance specifies a non-null set of legal values for the described parameter, false otherwise.:::return
OpenMBeanParameterInfoSupport#hasMinValue():::Returns true if this OpenMBeanParameterInfoSupport instance specifies a non-null minimal value for the described parameter, false otherwise.:::return
OpenMBeanParameterInfoSupport#hasMaxValue():::Returns true if this OpenMBeanParameterInfoSupport instance specifies a non-null maximal value for the described parameter, false otherwise.:::return
OpenMBeanParameterInfoSupport#isValue(Object):::Tests whether obj is a valid value for the parameter described by this OpenMBeanParameterInfo instance.:::return->OpenMBeanAttributeInfoSupport->isValue
OpenMBeanParameterInfoSupport#equals(Object):::Compares the specified obj parameter with this OpenMBeanParameterInfoSupport instance for equality.  Returns true if and only if all of the following statements are true:  <ul> <li>obj is non null,</li> <li>obj also implements the OpenMBeanParameterInfo interface,</li> <li>their names are equal</li> <li>their open types are equal</li> <li>their default, min, max and legal values are equal.</li> </ul> This ensures that this equals method works properly for obj parameters which are different implementations of the OpenMBeanParameterInfo interface:::if->return->other->return->equal
OpenMBeanParameterInfoSupport#hashCode():::Returns the hash code value for this OpenMBeanParameterInfoSupport instance.  The hash code of an OpenMBeanParameterInfoSupport instance is the sum of the hash codes of all elements of information used in equals comparisons (ie: its name, its open type, its default, min, max and legal values, and its Descriptor):::if->OpenMBeanAttributeInfoSupport->hashCode->return->myHashCode->intValue
OpenMBeanParameterInfoSupport#toString():::Returns a string representation of this OpenMBeanParameterInfoSupport instance:::if->OpenMBeanAttributeInfoSupport->toString->return
OpenType#getClassName():::Returns the fully qualified Java class name of the open data values this open type describes:::return
OpenType#getTypeName():::Returns the name of this OpenType instance.:::return
OpenType#getDescription():::Returns the text description of this OpenType instance.:::return
OpenType#isArray():::Returns true if the open data values this open type describes are arrays, false otherwise.:::return
OpenType#isValue(Object):::Tests whether <var>obj</var> is a value for this open type.:::
OpenType#isAssignableFrom(OpenType):::Tests whether values of the given type can be assigned to this open type:::return->this->equals
OpenType#equals(Object):::Compares the specified obj parameter with this open type instance for equality.:::
OpenType#toString():::Returns a string representation of this open type instance.:::
SimpleType#isValue(Object):::Tests whether <var>obj</var> is a value for this SimpleType instance:::if->return->return->this->getClassName->obj->getClass->getName->equals
SimpleType#equals(Object):::Compares the specified obj parameter with this SimpleType instance for equality:::if->return->other->return->this->getClassName->other->getClassName->equals
SimpleType#hashCode():::Returns the hash code value for this SimpleType instance:::if->Integer->this->getClassName->hashCode->valueOf->return->myHashCode->intValue
SimpleType#toString():::Returns a string representation of this SimpleType instance:::if->this->getClass->getName->getTypeName->return
SimpleType#readResolve():::Replace an object read from an java.io.ObjectInputStream with the unique instance for that value.:::canonical->canonicalTypes->get->if->throw->new->InvalidObjectException->return
TabularData#getTabularType():::Returns the tabular type describing this TabularData instance.:::
TabularData#calculateIndex(CompositeData):::Calculates the index that would be used in this TabularData instance to refer to the specified composite data <var>value</var> parameter if it were added to this instance:::
TabularData#size():::Returns the number of CompositeData values (ie the number of rows) contained in this TabularData instance.:::
TabularData#isEmpty():::Returns true if the number of CompositeData values (ie the number of rows) contained in this TabularData instance is zero.:::
TabularData#containsKey(Object[]):::Returns true if and only if this TabularData instance contains a CompositeData value (ie a row) whose index is the specified <var>key</var>:::
TabularData#containsValue(CompositeData):::Returns true if and only if this TabularData instance contains the specified CompositeData value:::
TabularData#get(Object[]):::Returns the CompositeData value whose index is <var>key</var>, or null if there is no value mapping to <var>key</var>, in this TabularData instance.:::
TabularData#put(CompositeData):::Adds <var>value</var> to this TabularData instance:::
TabularData#remove(Object[]):::Removes the CompositeData value whose index is <var>key</var> from this TabularData instance, and returns the removed value, or returns null if there is no value whose index is <var>key</var>.:::
TabularData#putAll(CompositeData[]):::Add all the elements in <var>values</var> to this TabularData instance:::
TabularData#clear():::Removes all CompositeData values (ie rows) from this TabularData instance.:::
TabularData#keySet():::Returns a set view of the keys (ie the index values) of the CompositeData values (ie the rows) contained in this TabularData instance:::
TabularData#values():::Returns a collection view of the CompositeData values (ie the rows) contained in this TabularData instance:::
TabularData#equals(Object):::Compares the specified <var>obj</var> parameter with this TabularData instance for equality:::
TabularData#hashCode():::Returns the hash code value for this TabularData instance:::
TabularData#toString():::Returns a string representation of this TabularData instance:::
TabularDataSupport#getTabularType():::Returns the tabular type describing this TabularData instance.:::return
TabularDataSupport#calculateIndex(CompositeData):::Calculates the index that would be used in this TabularData instance to refer to the specified composite data <var>value</var> parameter if it were added to this instance:::checkValueType->return->internalCalculateIndex->toArray
TabularDataSupport#containsKey(Object):::Returns true if and only if this TabularData instance contains a CompositeData value (ie a row) whose index is the specified <var>key</var>:::k->try->catch->return->finally->return->this->containsKey
TabularDataSupport#containsKey(Object[]):::Returns true if and only if this TabularData instance contains a CompositeData value (ie a row) whose index is the specified <var>key</var>:::return->dataMap->Arrays->asList->containsKey
TabularDataSupport#containsValue(CompositeData):::Returns true if and only if this TabularData instance contains the specified CompositeData value:::return->dataMap->containsValue
TabularDataSupport#containsValue(Object):::Returns true if and only if this TabularData instance contains the specified value.:::return->dataMap->containsValue
TabularDataSupport#get(Object):::This method simply calls get((Object[]) key).:::return->get
TabularDataSupport#get(Object[]):::Returns the CompositeData value whose index is <var>key</var>, or null if there is no value mapping to <var>key</var>, in this TabularData instance.:::checkKeyType->return->dataMap->Arrays->asList->get
TabularDataSupport#put(Object, Object):::This method simply calls put((CompositeData) value) and therefore ignores its <var>key</var> parameter which can be null.:::internalPut->return
TabularDataSupport#remove(Object):::This method simply calls remove((Object[]) key).:::return->remove
TabularDataSupport#remove(Object[]):::Removes the CompositeData value whose index is <var>key</var> from this TabularData instance, and returns the removed value, or returns null if there is no value whose index is <var>key</var>.:::checkKeyType->return->dataMap->Arrays->asList->remove
TabularDataSupport#putAll(Map):::Add all the values contained in the specified map <var>t</var> to this TabularData instance:::if->t->size->return->values->try->t->values->t->size->new->CompositeDataArr->toArray->catch->throw->new->ClassCastException->finally->putAll
TabularDataSupport#putAll(CompositeData[]):::Add all the elements in <var>values</var> to this TabularData instance:::if->return->indexes->new->ArrayList<List<?>>->index->for->i->for->i
TabularDataSupport#clear():::Removes all rows from this TabularDataSupport instance.:::dataMap->clear
TabularDataSupport#size():::Returns the number of rows in this TabularDataSupport instance.:::return->dataMap->size
TabularDataSupport#isEmpty():::Returns true if this TabularDataSupport instance contains no rows.:::return->this->size
TabularDataSupport#keySet():::Returns a set view of the keys contained in the underlying map of this TabularDataSupport instance used to index the rows:::return->dataMap->keySet
TabularDataSupport#values():::Returns a collection view of the rows contained in this TabularDataSupport instance:::return->Util->dataMap->values->cast
TabularDataSupport#entrySet():::Returns a collection view of the index to row mappings contained in this TabularDataSupport instance:::return->Util->dataMap->entrySet->cast
TabularDataSupport#equals(Object):::Compares the specified <var>obj</var> parameter with this TabularDataSupport instance for equality:::if->return->other->try->catch->return->finally->if->this->getTabularType->other->getTabularType->equals->return->if->this->size->other->size->return->foreach->dataMap->values->if->other->containsValue->return->return
TabularDataSupport#hashCode():::Returns the hash code value for this TabularDataSupport instance:::result->hashCode->foreach->values->value->hashCode->return
TabularDataSupport#toString():::Returns a string representation of this TabularDataSupport instance:::return->new->StringBuilder->this->getClass->getName->append->append->tabularType->toString->append->append->dataMap->toString->append->append->toString
TabularType#getRowType():::Returns the type of the row elements of tabular data values described by this TabularType instance.:::return
TabularType#getIndexNames():::Returns, in the same order as was given to this instance's constructor, an unmodifiable List of the names of the items the values of which are used to uniquely index each row element of tabular data values described by this TabularType instance.:::return
TabularType#isValue(Object):::Tests whether <var>obj</var> is a value which could be described by this TabularType instance:::if->return->value->valueType->value->getTabularType->return->isAssignableFrom
TabularType#equals(Object):::Compares the specified obj parameter with this TabularType instance for equality:::if->return->other->try->catch->return->finally->if->this->getTypeName->other->getTypeName->equals->return->if->equals->return->if->equals->return->return
TabularType#hashCode():::Returns the hash code value for this TabularType instance:::if->value->this->getTypeName->hashCode->hashCode->foreach->index->hashCode->Integer->valueOf->return->myHashCode->intValue
TabularType#toString():::Returns a string representation of this TabularType instance:::if->result->new->StringBuilder->this->getClass->getName->append->append->getTypeName->append->append->rowType->toString->append->append->sep->foreach->result->append->append->result->append->result->toString->return

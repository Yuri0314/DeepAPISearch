IntegerArray#clear()::: integer array clear:::
IntegerArray#clone()::: integer array clone:::clone->new->IntegerArray->System->arraycopy->return
IntegerArray#toIntArray()::: integer array to int array:::result->cardinality->new->intArr->System->cardinality->arraycopy->return
IntegerArray#at(int)::: integer array at:::return
IntegerArray#set(int, int)::: integer array set:::
IntegerArray#indexOf(int)::: integer array index of:::for->i->return
IntegerArray#add(int)::: integer array add:::if->growArray
IntegerArray#addNew(int):::Adds new int at the end if not already present.:::for->i->add
IntegerArray#reverse()::: integer array reverse:::left->right->while->temp
IntegerArray#merge(IntegerArray):::Merge two sorted arrays and eliminate duplicates:::newSize->newArray->new->intArr->i->j->k->for->if->while->else->while
IntegerArray#sort()::: integer array sort:::quicksort
IntegerArray#quicksort(int[], int, int)::: integer array quicksort:::if->q->partition->quicksort->quicksort
IntegerArray#partition(int[], int, int)::: integer array partition:::x->i->j->while->while->while->if->temp->else->return
IntegerArray#growArray(int)::: integer array grow array:::newArray->new->intArr->System->arraycopy
IntegerArray#popLast()::: integer array pop last:::return
IntegerArray#last()::: integer array last:::return
IntegerArray#setLast(int)::: integer array set last:::
IntegerArray#pop()::: integer array pop:::
IntegerArray#pop(int)::: integer array pop:::
IntegerArray#cardinality()::: integer array cardinality:::return
IntegerArray#print(java.io.PrintStream)::: integer array print:::if->for->i->out->println->else->out->println

sun.security.jgss.krb5.AcceptSecContextToken#encode()->byte[]::: accept sec context token encode
sun.security.jgss.krb5.CipherHelper#getSgnAlg()->int::: cipher helper get sgn alg
sun.security.jgss.krb5.CipherHelper#getSealAlg()->int::: cipher helper get seal alg
sun.security.jgss.krb5.CipherHelper#getProto()->int::: cipher helper get proto
sun.security.jgss.krb5.CipherHelper#getEType()->int::: cipher helper get type
sun.security.jgss.krb5.CipherHelper#isArcFour()->boolean::: cipher helper is arc four
sun.security.jgss.krb5.CipherHelper#calculateChecksum(int, byte[], byte[], byte[], int, int, int)->byte[]::: cipher helper calculate checksum
sun.security.jgss.krb5.CipherHelper#calculateChecksum(byte[], byte[], int, int, int)->byte[]::: cipher helper calculate checksum
sun.security.jgss.krb5.CipherHelper#encryptSeq(byte[], byte[], int, int)->byte[]::: cipher helper encrypt seq
sun.security.jgss.krb5.CipherHelper#decryptSeq(byte[], byte[], int, int)->byte[]::: cipher helper decrypt seq
sun.security.jgss.krb5.CipherHelper#getChecksumLength()->int::: cipher helper get checksum length
sun.security.jgss.krb5.CipherHelper#decryptData(WrapToken, byte[], int, int, byte[], int)->void::: cipher helper decrypt data
sun.security.jgss.krb5.CipherHelper#decryptData(WrapToken_v2, byte[], int, int, byte[], int, int)->void::: cipher helper decrypt data
sun.security.jgss.krb5.CipherHelper#decryptData(WrapToken, InputStream, int, byte[], int)->void::: cipher helper decrypt data
sun.security.jgss.krb5.CipherHelper#decryptData(WrapToken_v2, InputStream, int, byte[], int, int)->void::: cipher helper decrypt data
sun.security.jgss.krb5.CipherHelper#encryptData(WrapToken, byte[], byte[], int, int, byte[], OutputStream)->void::: cipher helper encrypt data
sun.security.jgss.krb5.CipherHelper#encryptData(WrapToken_v2, byte[], byte[], byte[], int, int, int)->byte[]::: cipher helper encrypt data
sun.security.jgss.krb5.CipherHelper#encryptData(WrapToken, byte[], byte[], int, int, byte[], byte[], int)->void::: cipher helper encrypt data
sun.security.jgss.krb5.CipherHelper#encryptData(WrapToken_v2, byte[], byte[], byte[], int, int, byte[], int, int)->int::: cipher helper encrypt data
sun.security.jgss.krb5.CipherHelper.WrapTokenInputStream#read()->int::: wrap token input stream read
sun.security.jgss.krb5.CipherHelper.WrapTokenInputStream#read(byte[])->int::: wrap token input stream read
sun.security.jgss.krb5.CipherHelper.WrapTokenInputStream#read(byte[], int, int)->int::: wrap token input stream read
sun.security.jgss.krb5.CipherHelper.WrapTokenInputStream#skip(long)->long::: wrap token input stream skip
sun.security.jgss.krb5.CipherHelper.WrapTokenInputStream#available()->int::: wrap token input stream available
sun.security.jgss.krb5.CipherHelper.WrapTokenInputStream#close()->void::: wrap token input stream close
sun.security.jgss.krb5.InitialToken.OverloadedChecksum#getChecksum()->Checksum::: overloaded checksum get checksum
sun.security.jgss.krb5.InitialToken.OverloadedChecksum#getDelegatedCreds()->Credentials::: overloaded checksum get delegated creds
sun.security.jgss.krb5.InitialToken.OverloadedChecksum#setContextFlags(Krb5Context)->void::: overloaded checksum set context flags
sun.security.jgss.krb5.InitialToken#encode()->byte[]::: initial token encode
sun.security.jgss.krb5.InitSecContextToken#getKrbApReq()->KrbApReq::: init sec context token get krb ap req
sun.security.jgss.krb5.InitSecContextToken#encode()->byte[]::: init sec context token encode
sun.security.jgss.krb5.Krb5AcceptCredential#getInstance(GSSCaller, Krb5NameElement)->Krb5AcceptCredential::: krb5 accept credential get instance
sun.security.jgss.krb5.Krb5AcceptCredential#getName()->GSSNameSpi:::Returns the principal name for this credential
sun.security.jgss.krb5.Krb5AcceptCredential#getInitLifetime()->int:::Returns the init lifetime remaining.
sun.security.jgss.krb5.Krb5AcceptCredential#getAcceptLifetime()->int:::Returns the accept lifetime remaining.
sun.security.jgss.krb5.Krb5AcceptCredential#isInitiatorCredential()->boolean::: krb5 accept credential is initiator credential
sun.security.jgss.krb5.Krb5AcceptCredential#isAcceptorCredential()->boolean::: krb5 accept credential is acceptor credential
sun.security.jgss.krb5.Krb5AcceptCredential#getMechanism()->Oid:::Returns the oid representing the underlying credential mechanism oid.
sun.security.jgss.krb5.Krb5AcceptCredential#getProvider()->java.security.Provider::: krb5 accept credential get provider
sun.security.jgss.krb5.Krb5AcceptCredential#getKrb5EncryptionKeys(PrincipalName)->EncryptionKey[]::: krb5 accept credential get krb5 encryption keys
sun.security.jgss.krb5.Krb5AcceptCredential#dispose()->void:::Called to invalidate this credential element.
sun.security.jgss.krb5.Krb5AcceptCredential#destroy()->void:::Destroys the locally cached EncryptionKey value and then calls destroy in the base class.
sun.security.jgss.krb5.Krb5AcceptCredential#impersonate(GSSNameSpi)->GSSCredentialSpi:::Impersonation is only available on the initiator side
sun.security.jgss.krb5.Krb5Context#isTransferable()->boolean:::Method to determine if the context can be exported and then re-imported.
sun.security.jgss.krb5.Krb5Context#getLifetime()->int:::The lifetime remaining for this context.
sun.security.jgss.krb5.Krb5Context#requestLifetime(int)->void:::Requests the desired lifetime
sun.security.jgss.krb5.Krb5Context#requestConf(boolean)->void:::Requests that confidentiality be available.
sun.security.jgss.krb5.Krb5Context#getConfState()->boolean:::Is confidentiality available?
sun.security.jgss.krb5.Krb5Context#requestInteg(boolean)->void:::Requests that integrity be available.
sun.security.jgss.krb5.Krb5Context#getIntegState()->boolean:::Is integrity available?
sun.security.jgss.krb5.Krb5Context#requestCredDeleg(boolean)->void:::Requests that credential delegation be done during context establishment.
sun.security.jgss.krb5.Krb5Context#getCredDelegState()->boolean:::Is credential delegation enabled?
sun.security.jgss.krb5.Krb5Context#requestMutualAuth(boolean)->void:::Requests that mutual authentication be done during context establishment
sun.security.jgss.krb5.Krb5Context#getMutualAuthState()->boolean:::Is mutual authentication enabled? Since this is from the client's perspective, it essentially meas that the server is being authenticated.
sun.security.jgss.krb5.Krb5Context#requestReplayDet(boolean)->void:::Requests that replay detection be done on the GSS wrap and MIC tokens.
sun.security.jgss.krb5.Krb5Context#getReplayDetState()->boolean:::Is replay detection enabled on the GSS wrap and MIC tokens? We enable replay detection if sequence checking is enabled.
sun.security.jgss.krb5.Krb5Context#requestSequenceDet(boolean)->void:::Requests that sequence checking be done on the GSS wrap and MIC tokens.
sun.security.jgss.krb5.Krb5Context#getSequenceDetState()->boolean:::Is sequence checking enabled on the GSS Wrap and MIC tokens? We enable sequence checking if replay detection is enabled.
sun.security.jgss.krb5.Krb5Context#requestDelegPolicy(boolean)->void:::Requests that the deleg policy be respected.
sun.security.jgss.krb5.Krb5Context#getDelegPolicyState()->boolean:::Is deleg policy respected?
sun.security.jgss.krb5.Krb5Context#requestAnonymity(boolean)->void::: krb5 context request anonymity
sun.security.jgss.krb5.Krb5Context#getAnonymityState()->boolean::: krb5 context get anonymity state
sun.security.jgss.krb5.Krb5Context#getCipherHelper(EncryptionKey)->CipherHelper:::Get the context specific DESCipher instance, invoked in MessageToken.init()
sun.security.jgss.krb5.Krb5Context#incrementMySequenceNumber()->int::: krb5 context increment my sequence number
sun.security.jgss.krb5.Krb5Context#resetMySequenceNumber(int)->void::: krb5 context reset my sequence number
sun.security.jgss.krb5.Krb5Context#resetPeerSequenceNumber(int)->void::: krb5 context reset peer sequence number
sun.security.jgss.krb5.Krb5Context#setKey(int, EncryptionKey)->void::: krb5 context set key
sun.security.jgss.krb5.Krb5Context#getKeySrc()->int::: krb5 context get key src
sun.security.jgss.krb5.Krb5Context#setDelegCred(Krb5CredElement)->void:::Called on the acceptor side to store the delegated credentials received in the AcceptSecContextToken.
sun.security.jgss.krb5.Krb5Context#setCredDelegState(boolean)->void::: krb5 context set cred deleg state
sun.security.jgss.krb5.Krb5Context#setMutualAuthState(boolean)->void::: krb5 context set mutual auth state
sun.security.jgss.krb5.Krb5Context#setReplayDetState(boolean)->void::: krb5 context set replay det state
sun.security.jgss.krb5.Krb5Context#setSequenceDetState(boolean)->void::: krb5 context set sequence det state
sun.security.jgss.krb5.Krb5Context#setConfState(boolean)->void::: krb5 context set conf state
sun.security.jgss.krb5.Krb5Context#setIntegState(boolean)->void::: krb5 context set integ state
sun.security.jgss.krb5.Krb5Context#setDelegPolicyState(boolean)->void::: krb5 context set deleg policy state
sun.security.jgss.krb5.Krb5Context#setChannelBinding(ChannelBinding)->void:::Sets the channel bindings to be used during context establishment.
sun.security.jgss.krb5.Krb5Context#getChannelBinding()->ChannelBinding::: krb5 context get channel binding
sun.security.jgss.krb5.Krb5Context#getMech()->Oid:::Returns the mechanism oid.
sun.security.jgss.krb5.Krb5Context#getSrcName()->GSSNameSpi:::Returns the context initiator name.
sun.security.jgss.krb5.Krb5Context#getTargName()->GSSNameSpi:::Returns the context acceptor.
sun.security.jgss.krb5.Krb5Context#getDelegCred()->GSSCredentialSpi:::Returns the delegated credential for the context
sun.security.jgss.krb5.Krb5Context#isInitiator()->boolean:::Tests if this is the initiator side of the context.
sun.security.jgss.krb5.Krb5Context#isProtReady()->boolean:::Tests if the context can be used for per-message service
sun.security.jgss.krb5.Krb5Context#initSecContext(InputStream, int)->byte[]:::Initiator context establishment call
sun.security.jgss.krb5.Krb5Context#isEstablished()->boolean::: krb5 context is established
sun.security.jgss.krb5.Krb5Context#acceptSecContext(InputStream, int)->byte[]:::Acceptor's context establishment call
sun.security.jgss.krb5.Krb5Context#getWrapSizeLimit(int, boolean, int)->int:::Queries the context for largest data size to accommodate the specified protection and be <= maxTokSize.
sun.security.jgss.krb5.Krb5Context#wrap(byte[], int, int, MessageProp)->byte[]::: krb5 context wrap
sun.security.jgss.krb5.Krb5Context#wrap(byte[], int, int, byte[], int, MessageProp)->int::: krb5 context wrap
sun.security.jgss.krb5.Krb5Context#wrap(byte[], int, int, OutputStream, MessageProp)->void::: krb5 context wrap
sun.security.jgss.krb5.Krb5Context#wrap(InputStream, OutputStream, MessageProp)->void::: krb5 context wrap
sun.security.jgss.krb5.Krb5Context#unwrap(byte[], int, int, MessageProp)->byte[]::: krb5 context unwrap
sun.security.jgss.krb5.Krb5Context#unwrap(byte[], int, int, byte[], int, MessageProp)->int::: krb5 context unwrap
sun.security.jgss.krb5.Krb5Context#unwrap(InputStream, byte[], int, MessageProp)->int::: krb5 context unwrap
sun.security.jgss.krb5.Krb5Context#unwrap(InputStream, OutputStream, MessageProp)->void::: krb5 context unwrap
sun.security.jgss.krb5.Krb5Context#getMIC(byte[], int, int, MessageProp)->byte[]::: krb5 context get c
sun.security.jgss.krb5.Krb5Context#getMIC(InputStream, OutputStream, MessageProp)->void::: krb5 context get c
sun.security.jgss.krb5.Krb5Context#verifyMIC(byte[], int, int, byte[], int, int, MessageProp)->void::: krb5 context verify c
sun.security.jgss.krb5.Krb5Context#verifyMIC(InputStream, InputStream, MessageProp)->void::: krb5 context verify c
sun.security.jgss.krb5.Krb5Context#export()->byte[]:::Produces a token representing this context
sun.security.jgss.krb5.Krb5Context#dispose()->void::: krb5 context dispose
sun.security.jgss.krb5.Krb5Context#getProvider()->Provider::: krb5 context get provider
sun.security.jgss.krb5.Krb5Context#getCaller()->GSSCaller::: krb5 context get caller
sun.security.jgss.krb5.Krb5Context.KerberosSessionKey#getAlgorithm()->String::: kerberos session key get algorithm
sun.security.jgss.krb5.Krb5Context.KerberosSessionKey#getFormat()->String::: kerberos session key get format
sun.security.jgss.krb5.Krb5Context.KerberosSessionKey#getEncoded()->byte[]::: kerberos session key get encoded
sun.security.jgss.krb5.Krb5Context.KerberosSessionKey#toString()->String::: kerberos session key to string
sun.security.jgss.krb5.Krb5Context#inquireSecContext(String)->Object:::Return the mechanism-specific attribute associated with type.
sun.security.jgss.krb5.Krb5Context#setTktFlags(boolean[])->void::: krb5 context set tkt flags
sun.security.jgss.krb5.Krb5Context#setAuthTime(String)->void::: krb5 context set auth time
sun.security.jgss.krb5.Krb5Context#setAuthzData(AuthorizationData)->void::: krb5 context set authz data
sun.security.jgss.krb5.Krb5InitCredential#getInstance(GSSCaller, Krb5NameElement, int)->Krb5InitCredential::: krb5 init credential get instance
sun.security.jgss.krb5.Krb5InitCredential#getInstance(Krb5NameElement, Credentials)->Krb5InitCredential::: krb5 init credential get instance
sun.security.jgss.krb5.Krb5InitCredential#getName()->GSSNameSpi:::Returns the principal name for this credential
sun.security.jgss.krb5.Krb5InitCredential#getInitLifetime()->int:::Returns the init lifetime remaining.
sun.security.jgss.krb5.Krb5InitCredential#getAcceptLifetime()->int:::Returns the accept lifetime remaining.
sun.security.jgss.krb5.Krb5InitCredential#isInitiatorCredential()->boolean::: krb5 init credential is initiator credential
sun.security.jgss.krb5.Krb5InitCredential#isAcceptorCredential()->boolean::: krb5 init credential is acceptor credential
sun.security.jgss.krb5.Krb5InitCredential#getMechanism()->Oid:::Returns the oid representing the underlying credential mechanism oid.
sun.security.jgss.krb5.Krb5InitCredential#getProvider()->java.security.Provider::: krb5 init credential get provider
sun.security.jgss.krb5.Krb5InitCredential#getKrb5Credentials()->Credentials:::Returns a sun.security.krb5.Credentials instance so that it maybe used in that package for th Kerberos protocol.
sun.security.jgss.krb5.Krb5InitCredential#dispose()->void:::Called to invalidate this credential element.
sun.security.jgss.krb5.Krb5InitCredential#impersonate(GSSNameSpi)->GSSCredentialSpi::: krb5 init credential impersonate
sun.security.jgss.krb5.Krb5MechFactory#getNameElement(String, Oid)->GSSNameSpi::: krb5 mech factory get name element
sun.security.jgss.krb5.Krb5MechFactory#getNameElement(byte[], Oid)->GSSNameSpi::: krb5 mech factory get name element
sun.security.jgss.krb5.Krb5MechFactory#getCredentialElement(GSSNameSpi, int, int, int)->GSSCredentialSpi::: krb5 mech factory get credential element
sun.security.jgss.krb5.Krb5MechFactory#checkInitCredPermission(Krb5NameElement)->void::: krb5 mech factory check init cred permission
sun.security.jgss.krb5.Krb5MechFactory#checkAcceptCredPermission(Krb5NameElement, GSSNameSpi)->void::: krb5 mech factory check accept cred permission
sun.security.jgss.krb5.Krb5MechFactory#getMechanismContext(GSSNameSpi, GSSCredentialSpi, int)->GSSContextSpi::: krb5 mech factory get mechanism context
sun.security.jgss.krb5.Krb5MechFactory#getMechanismContext(GSSCredentialSpi)->GSSContextSpi::: krb5 mech factory get mechanism context
sun.security.jgss.krb5.Krb5MechFactory#getMechanismContext(byte[])->GSSContextSpi::: krb5 mech factory get mechanism context
sun.security.jgss.krb5.Krb5MechFactory#getMechanismOid()->Oid::: krb5 mech factory get mechanism oid
sun.security.jgss.krb5.Krb5MechFactory#getProvider()->Provider::: krb5 mech factory get provider
sun.security.jgss.krb5.Krb5MechFactory#getNameTypes()->Oid[]::: krb5 mech factory get name types
sun.security.jgss.krb5.Krb5NameElement#getInstance(String, Oid)->Krb5NameElement:::Instantiates a new Krb5NameElement object
sun.security.jgss.krb5.Krb5NameElement#getInstance(PrincipalName)->Krb5NameElement::: krb5 name element get instance
sun.security.jgss.krb5.Krb5NameElement#getKrb5PrincipalName()->PrincipalName::: krb5 name element get krb5 principal name
sun.security.jgss.krb5.Krb5NameElement#equals(GSSNameSpi)->boolean:::Equal method for the GSSNameSpi objects
sun.security.jgss.krb5.Krb5NameElement#equals(Object)->boolean:::Compares this GSSNameSpi object to another Object that might be a GSSNameSpi
sun.security.jgss.krb5.Krb5NameElement#hashCode()->int:::Returns a hashcode value for this GSSNameSpi.
sun.security.jgss.krb5.Krb5NameElement#export()->byte[]:::Returns the principal name in the form user@REALM or host/service@REALM but with the following constraints that are imposed by RFC 1964:   (1) all occurrences of the characters `@`,  `/`, and `\` within   principal components or realm names shall be quoted with an   immediately-preceding `\`
sun.security.jgss.krb5.Krb5NameElement#getMechanism()->Oid:::Get the mechanism type that this NameElement corresponds to.
sun.security.jgss.krb5.Krb5NameElement#toString()->String:::Returns a string representation for this name
sun.security.jgss.krb5.Krb5NameElement#getGSSNameType()->Oid:::Returns the name type oid.
sun.security.jgss.krb5.Krb5NameElement#getStringNameType()->Oid:::Returns the oid describing the format of the printable name.
sun.security.jgss.krb5.Krb5NameElement#isAnonymousName()->boolean:::Indicates if this name object represents an Anonymous name.
sun.security.jgss.krb5.Krb5NameElement#getProvider()->Provider::: krb5 name element get provider
sun.security.jgss.krb5.Krb5ProxyCredential#getName()->Krb5NameElement::: krb5 proxy credential get name
sun.security.jgss.krb5.Krb5ProxyCredential#getInitLifetime()->int::: krb5 proxy credential get init lifetime
sun.security.jgss.krb5.Krb5ProxyCredential#getAcceptLifetime()->int::: krb5 proxy credential get accept lifetime
sun.security.jgss.krb5.Krb5ProxyCredential#isInitiatorCredential()->boolean::: krb5 proxy credential is initiator credential
sun.security.jgss.krb5.Krb5ProxyCredential#isAcceptorCredential()->boolean::: krb5 proxy credential is acceptor credential
sun.security.jgss.krb5.Krb5ProxyCredential#getMechanism()->Oid::: krb5 proxy credential get mechanism
sun.security.jgss.krb5.Krb5ProxyCredential#getProvider()->java.security.Provider::: krb5 proxy credential get provider
sun.security.jgss.krb5.Krb5ProxyCredential#dispose()->void::: krb5 proxy credential dispose
sun.security.jgss.krb5.Krb5ProxyCredential#impersonate(GSSNameSpi)->GSSCredentialSpi::: krb5 proxy credential impersonate
sun.security.jgss.krb5.Krb5ProxyCredential#tryImpersonation(GSSCaller, Krb5InitCredential)->Krb5CredElement::: krb5 proxy credential try impersonation
sun.security.jgss.krb5.Krb5Token#getTokenName(int)->String:::Returns a strign representing the token type.
sun.security.jgss.krb5.Krb5Util#getTicketFromSubjectAndTgs(GSSCaller, String, String, String, AccessControlContext)->KerberosTicket:::Retrieve the service ticket for serverPrincipal from caller's Subject or from Subject obtained by logging in, or if not found, via the Ticket Granting Service using the TGT obtained from the Subject
sun.security.jgss.krb5.Krb5Util#getServiceTicket(GSSCaller, String, String, AccessControlContext)->KerberosTicket:::Retrieves the ticket corresponding to the client/server principal pair from the Subject in the specified AccessControlContext.
sun.security.jgss.krb5.Krb5Util#getInitialTicket(GSSCaller, String, AccessControlContext)->KerberosTicket:::Retrieves the initial TGT corresponding to the client principal from the Subject in the specified AccessControlContext
sun.security.jgss.krb5.Krb5Util#getSubject(GSSCaller, AccessControlContext)->Subject:::Retrieves the caller's Subject, or Subject obtained by logging in via the specified caller
sun.security.jgss.krb5.Krb5Util#getServiceCreds(GSSCaller, String, AccessControlContext)->ServiceCreds:::Retrieves the ServiceCreds for the specified server principal from the Subject in the specified AccessControlContext
sun.security.jgss.krb5.Krb5Util#credsToTicket(Credentials)->KerberosTicket::: krb5 util creds to ticket
sun.security.jgss.krb5.Krb5Util#ticketToCreds(KerberosTicket)->Credentials::: krb5 util ticket to creds
sun.security.jgss.krb5.Krb5Util#snapshotFromJavaxKeyTab(KeyTab)->sun.security.krb5.internal.ktab.KeyTab:::A helper method to get a sun..KeyTab from a javax..KeyTab
sun.security.jgss.krb5.Krb5Util#keysFromJavaxKeyTab(KeyTab, PrincipalName)->EncryptionKey[]:::A helper method to get EncryptionKeys from a javax..KeyTab
sun.security.jgss.krb5.MessageToken#getGSSHeader()->GSSHeader:::Used to obtain the GSSHeader that was at the start of this token.
sun.security.jgss.krb5.MessageToken#getTokenId()->int:::Used to obtain the token id that was contained in this token.
sun.security.jgss.krb5.MessageToken#getEncSeqNumber()->byte[]:::Used to obtain the encrypted sequence number in this token.
sun.security.jgss.krb5.MessageToken#getChecksum()->byte[]:::Used to obtain the checksum that was contained in this token.
sun.security.jgss.krb5.MessageToken#getConfState()->boolean:::Used to determine if this token contains any encrypted data.
sun.security.jgss.krb5.MessageToken#genSignAndSeqNumber(MessageProp, byte[], byte[], int, int, byte[])->void:::Generates the checksum field and the encrypted sequence number field
sun.security.jgss.krb5.MessageToken#verifySignAndSeqNumber(byte[], byte[], int, int, byte[])->boolean:::Verifies that the checksum field and sequence number direction bytes are valid and consistent with the application data.
sun.security.jgss.krb5.MessageToken#getSequenceNumber()->int::: message token get sequence number
sun.security.jgss.krb5.MessageToken#encode(OutputStream)->void:::Encodes a GSSHeader and this token onto an OutputStream.
sun.security.jgss.krb5.MessageToken#getKrb5TokenSize()->int:::Obtains the size of this token
sun.security.jgss.krb5.MessageToken#getTokenSize()->int::: message token get token size
sun.security.jgss.krb5.MessageToken#getTokenSize(CipherHelper)->int::: message token get token size
sun.security.jgss.krb5.MessageToken#getSealAlg(boolean, int)->int:::Obtains the encryption algorithm that should be used in this token given the state of confidentiality the application requested
sun.security.jgss.krb5.MessageToken.MessageTokenHeader#encode(OutputStream)->void:::Encodes this MessageTokenHeader onto an OutputStream
sun.security.jgss.krb5.MessageToken.MessageTokenHeader#getTokenId()->int:::Returns the token id for the message token.
sun.security.jgss.krb5.MessageToken.MessageTokenHeader#getSignAlg()->int:::Returns the sign algorithm for the message token.
sun.security.jgss.krb5.MessageToken.MessageTokenHeader#getSealAlg()->int:::Returns the seal algorithm for the message token.
sun.security.jgss.krb5.MessageToken.MessageTokenHeader#getBytes()->byte[]:::Returns the bytes of this header.
sun.security.jgss.krb5.MessageToken#getSgnAlg(int)->int:::Determine signing algorithm based on QOP.
sun.security.jgss.krb5.MessageToken_v2#getTokenId()->int:::Used to obtain the token id that was contained in this token.
sun.security.jgss.krb5.MessageToken_v2#getKeyUsage()->int:::Used to obtain the key_usage type for this token.
sun.security.jgss.krb5.MessageToken_v2#getConfState()->boolean:::Used to determine if this token contains any encrypted data.
sun.security.jgss.krb5.MessageToken_v2#genSignAndSeqNumber(MessageProp, byte[], int, int)->void:::Generates the checksum field and the sequence number field.
sun.security.jgss.krb5.MessageToken_v2#verifySign(byte[], int, int)->boolean:::Verifies the validity of checksum field
sun.security.jgss.krb5.MessageToken_v2#getSequenceNumber()->int::: message token_v2 get sequence number
sun.security.jgss.krb5.MessageToken_v2#getChecksum(byte[], int, int)->byte[]:::Computes the checksum based on the algorithm stored in the tokenHeader.
sun.security.jgss.krb5.MessageToken_v2#encodeHeader(OutputStream)->void:::Encodes a MessageTokenHeader onto an OutputStream.
sun.security.jgss.krb5.MessageToken_v2#encode(OutputStream)->void:::Encodes a MessageToken_v2 onto an OutputStream.
sun.security.jgss.krb5.MessageToken_v2#getTokenHeader()->byte[]::: message token_v2 get token header
sun.security.jgss.krb5.MessageToken_v2.MessageTokenHeader#encode(OutputStream)->void:::Encodes this MessageTokenHeader onto an OutputStream
sun.security.jgss.krb5.MessageToken_v2.MessageTokenHeader#getTokenId()->int:::Returns the token id for the message token.
sun.security.jgss.krb5.MessageToken_v2.MessageTokenHeader#getBytes()->byte[]:::Returns the bytes of this header.
sun.security.jgss.krb5.MicToken#verify(byte[], int, int)->void::: mic token verify
sun.security.jgss.krb5.MicToken#verify(InputStream)->void::: mic token verify
sun.security.jgss.krb5.MicToken#getSealAlg(boolean, int)->int::: mic token get seal alg
sun.security.jgss.krb5.MicToken#encode(byte[], int)->int::: mic token encode
sun.security.jgss.krb5.MicToken#encode()->byte[]::: mic token encode
sun.security.jgss.krb5.MicToken_v2#verify(byte[], int, int)->void::: mic token_v2 verify
sun.security.jgss.krb5.MicToken_v2#verify(InputStream)->void::: mic token_v2 verify
sun.security.jgss.krb5.MicToken_v2#encode()->byte[]::: mic token_v2 encode
sun.security.jgss.krb5.MicToken_v2#encode(byte[], int)->int::: mic token_v2 encode
sun.security.jgss.krb5.MicToken_v2#encode(OutputStream)->void::: mic token_v2 encode
sun.security.jgss.krb5.ServiceCreds#getInstance(Subject, String)->ServiceCreds:::Creates a ServiceCreds object based on info in a Subject for a given principal name (if specified).
sun.security.jgss.krb5.ServiceCreds#getName()->String::: service creds get name
sun.security.jgss.krb5.ServiceCreds#getKKeys()->KerberosKey[]:::Gets keys for "someone"
sun.security.jgss.krb5.ServiceCreds#getKKeys(KerberosPrincipal)->KerberosKey[]:::Get kkeys for a principal,
sun.security.jgss.krb5.ServiceCreds#getEKeys(PrincipalName)->EncryptionKey[]:::Gets EKeys for a principal.
sun.security.jgss.krb5.ServiceCreds#getInitCred()->Credentials::: service creds get init cred
sun.security.jgss.krb5.ServiceCreds#destroy()->void::: service creds destroy
sun.security.jgss.krb5.SubjectComber#find(Subject, String, String, Class)->T::: subject comber find
sun.security.jgss.krb5.SubjectComber#findMany(Subject, String, String, Class)->List::: subject comber find many
sun.security.jgss.krb5.WrapToken#getData()->byte[]:::Obtains the application data that was transmitted in this WrapToken.
sun.security.jgss.krb5.WrapToken#getData(byte[], int)->int:::Obtains the application data that was transmitted in this WrapToken, writing it into an application provided output array.
sun.security.jgss.krb5.WrapToken#encode(OutputStream)->void::: wrap token encode
sun.security.jgss.krb5.WrapToken#encode()->byte[]::: wrap token encode
sun.security.jgss.krb5.WrapToken#encode(byte[], int)->int::: wrap token encode
sun.security.jgss.krb5.WrapToken#getKrb5TokenSize()->int::: wrap token get krb5 token size
sun.security.jgss.krb5.WrapToken#getSealAlg(boolean, int)->int::: wrap token get seal alg
sun.security.jgss.krb5.WrapToken#getSizeLimit(int, boolean, int, CipherHelper)->int::: wrap token get size limit
sun.security.jgss.krb5.WrapToken_v2#getData()->byte[]:::Obtains the application data that was transmitted in this WrapToken.
sun.security.jgss.krb5.WrapToken_v2#getData(byte[], int)->int:::Obtains the application data that was transmitted in this WrapToken, writing it into an application provided output array.
sun.security.jgss.krb5.WrapToken_v2#encode(OutputStream)->void::: wrap token_v2 encode
sun.security.jgss.krb5.WrapToken_v2#encode()->byte[]::: wrap token_v2 encode
sun.security.jgss.krb5.WrapToken_v2#encode(byte[], int)->int::: wrap token_v2 encode
sun.security.jgss.krb5.WrapToken_v2#getSizeLimit(int, boolean, int, CipherHelper)->int::: wrap token_v2 get size limit

jdk.internal.jimage.BasicImageReader#open(Path)->BasicImageReader::: basic image reader open
jdk.internal.jimage.BasicImageReader#getHeader()->ImageHeader::: basic image reader get header
jdk.internal.jimage.BasicImageReader#releaseByteBuffer(ByteBuffer)->void::: basic image reader release byte buffer
jdk.internal.jimage.BasicImageReader#getName()->String::: basic image reader get name
jdk.internal.jimage.BasicImageReader#getByteOrder()->ByteOrder::: basic image reader get byte order
jdk.internal.jimage.BasicImageReader#getImagePath()->Path::: basic image reader get image path
jdk.internal.jimage.BasicImageReader#close()->void::: basic image reader close
jdk.internal.jimage.BasicImageReader#getStrings()->ImageStringsReader::: basic image reader get strings
jdk.internal.jimage.BasicImageReader#findLocation(String, String)->ImageLocation::: basic image reader find location
jdk.internal.jimage.BasicImageReader#findLocation(String)->ImageLocation::: basic image reader find location
jdk.internal.jimage.BasicImageReader#getEntryNames()->String[]::: basic image reader get entry names
jdk.internal.jimage.BasicImageReader#getLocation(int)->ImageLocation::: basic image reader get location
jdk.internal.jimage.BasicImageReader#getAttributes(int)->long[]::: basic image reader get attributes
jdk.internal.jimage.BasicImageReader#getString(int)->String::: basic image reader get string
jdk.internal.jimage.BasicImageReader#getResource(String)->byte[]::: basic image reader get resource
jdk.internal.jimage.BasicImageReader#getResource(ImageLocation)->byte[]::: basic image reader get resource
jdk.internal.jimage.BasicImageReader#getResourceBuffer(ImageLocation)->ByteBuffer::: basic image reader get resource buffer
jdk.internal.jimage.BasicImageReader#getResourceStream(ImageLocation)->InputStream::: basic image reader get resource stream
jdk.internal.jimage.ImageBufferCache#getBuffer(long)->ByteBuffer::: image buffer cache get buffer
jdk.internal.jimage.ImageBufferCache#releaseBuffer(ByteBuffer)->void::: image buffer cache release buffer
jdk.internal.jimage.ImageHeader#getHeaderSize()->int::: image header get header size
jdk.internal.jimage.ImageHeader#readFrom(IntBuffer)->ImageHeader::: image header read from
jdk.internal.jimage.ImageHeader#writeTo(ImageStream)->void::: image header write to
jdk.internal.jimage.ImageHeader#writeTo(ByteBuffer)->void::: image header write to
jdk.internal.jimage.ImageHeader#getMagic()->int::: image header get magic
jdk.internal.jimage.ImageHeader#getMajorVersion()->int::: image header get major version
jdk.internal.jimage.ImageHeader#getMinorVersion()->int::: image header get minor version
jdk.internal.jimage.ImageHeader#getFlags()->int::: image header get flags
jdk.internal.jimage.ImageHeader#getResourceCount()->int::: image header get resource count
jdk.internal.jimage.ImageHeader#getTableLength()->int::: image header get table length
jdk.internal.jimage.ImageHeader#getRedirectSize()->int::: image header get redirect size
jdk.internal.jimage.ImageHeader#getOffsetsSize()->int::: image header get offsets size
jdk.internal.jimage.ImageHeader#getLocationsSize()->int::: image header get locations size
jdk.internal.jimage.ImageHeader#getStringsSize()->int::: image header get strings size
jdk.internal.jimage.ImageHeader#getIndexSize()->int::: image header get index size
jdk.internal.jimage.ImageHeader#getRedirectOffset()->int::: image header get redirect offset
jdk.internal.jimage.ImageHeader#getOffsetsOffset()->int::: image header get offsets offset
jdk.internal.jimage.ImageHeader#getLocationsOffset()->int::: image header get locations offset
jdk.internal.jimage.ImageHeader#getStringsOffset()->int::: image header get strings offset
jdk.internal.jimage.ImageLocation#getStrings()->ImageStrings::: image location get strings
jdk.internal.jimage.ImageLocation#decompress(ByteBuffer)->long[]::: image location decompress
jdk.internal.jimage.ImageLocation#compress(long[])->byte[]::: image location compress
jdk.internal.jimage.ImageLocation#verify(String)->boolean::: image location verify
jdk.internal.jimage.ImageLocation#verify(String, long[], ImageStrings)->boolean:::A simpler verification would be name.equals(getFullName()), but by not creating the full name and enabling early returns we allocate fewer objects
jdk.internal.jimage.ImageLocation#verify(String, String, long[], ImageStrings)->boolean::: image location verify
jdk.internal.jimage.ImageLocation#getAttribute(int)->long::: image location get attribute
jdk.internal.jimage.ImageLocation#getAttributeString(int)->String::: image location get attribute string
jdk.internal.jimage.ImageLocation#getModule()->String::: image location get module
jdk.internal.jimage.ImageLocation#getModuleOffset()->int::: image location get module offset
jdk.internal.jimage.ImageLocation#getBase()->String::: image location get base
jdk.internal.jimage.ImageLocation#getBaseOffset()->int::: image location get base offset
jdk.internal.jimage.ImageLocation#getParent()->String::: image location get parent
jdk.internal.jimage.ImageLocation#getParentOffset()->int::: image location get parent offset
jdk.internal.jimage.ImageLocation#getExtension()->String::: image location get extension
jdk.internal.jimage.ImageLocation#getExtensionOffset()->int::: image location get extension offset
jdk.internal.jimage.ImageLocation#getFullName()->String::: image location get full name
jdk.internal.jimage.ImageLocation#getFullName(boolean)->String::: image location get full name
jdk.internal.jimage.ImageLocation#buildName(boolean, boolean, boolean)->String::: image location build name
jdk.internal.jimage.ImageLocation#getContentOffset()->long::: image location get content offset
jdk.internal.jimage.ImageLocation#getCompressedSize()->long::: image location get compressed size
jdk.internal.jimage.ImageLocation#getUncompressedSize()->long::: image location get uncompressed size
jdk.internal.jimage.ImageLocation#readFrom(BasicImageReader, int)->ImageLocation::: image location read from
jdk.internal.jimage.ImageReader#open(Path, ByteOrder)->ImageReader::: image reader open
jdk.internal.jimage.ImageReader#open(Path)->ImageReader::: image reader open
jdk.internal.jimage.ImageReader#close()->void::: image reader close
jdk.internal.jimage.ImageReader#getRootDirectory()->Directory::: image reader get root directory
jdk.internal.jimage.ImageReader#findNode(String)->Node::: image reader find node
jdk.internal.jimage.ImageReader#getResource(Node)->byte[]::: image reader get resource
jdk.internal.jimage.ImageReader#getResource(Resource)->byte[]::: image reader get resource
jdk.internal.jimage.ImageReader#getHeader()->ImageHeader::: image reader get header
jdk.internal.jimage.ImageReader#releaseByteBuffer(ByteBuffer)->void::: image reader release byte buffer
jdk.internal.jimage.ImageReader#getName()->String::: image reader get name
jdk.internal.jimage.ImageReader#getByteOrder()->ByteOrder::: image reader get byte order
jdk.internal.jimage.ImageReader#getImagePath()->Path::: image reader get image path
jdk.internal.jimage.ImageReader#getStrings()->ImageStringsReader::: image reader get strings
jdk.internal.jimage.ImageReader#findLocation(String, String)->ImageLocation::: image reader find location
jdk.internal.jimage.ImageReader#findLocation(String)->ImageLocation::: image reader find location
jdk.internal.jimage.ImageReader#getEntryNames()->String[]::: image reader get entry names
jdk.internal.jimage.ImageReader#getModuleNames()->String[]::: image reader get module names
jdk.internal.jimage.ImageReader#getAttributes(int)->long[]::: image reader get attributes
jdk.internal.jimage.ImageReader#getString(int)->String::: image reader get string
jdk.internal.jimage.ImageReader#getResource(String)->byte[]::: image reader get resource
jdk.internal.jimage.ImageReader#getResource(ImageLocation)->byte[]::: image reader get resource
jdk.internal.jimage.ImageReader#getResourceBuffer(ImageLocation)->ByteBuffer::: image reader get resource buffer
jdk.internal.jimage.ImageReader#getResourceStream(ImageLocation)->InputStream::: image reader get resource stream
jdk.internal.jimage.ImageReader.Node#isCompleted()->boolean:::A node is completed when all its direct children have been built.
jdk.internal.jimage.ImageReader.Node#setCompleted(boolean)->void::: node set completed
jdk.internal.jimage.ImageReader.Node#setIsRootDir()->void::: node set is root dir
jdk.internal.jimage.ImageReader.Node#isRootDir()->boolean::: node is root dir
jdk.internal.jimage.ImageReader.Node#setIsPackagesDir()->void::: node set is packages dir
jdk.internal.jimage.ImageReader.Node#isPackagesDir()->boolean::: node is packages dir
jdk.internal.jimage.ImageReader.Node#setIsModulesDir()->void::: node set is modules dir
jdk.internal.jimage.ImageReader.Node#isModulesDir()->boolean::: node is modules dir
jdk.internal.jimage.ImageReader.Node#getName()->String::: node get name
jdk.internal.jimage.ImageReader.Node#getFileAttributes()->BasicFileAttributes::: node get file attributes
jdk.internal.jimage.ImageReader.Node#resolveLink()->Node::: node resolve link
jdk.internal.jimage.ImageReader.Node#resolveLink(boolean)->Node::: node resolve link
jdk.internal.jimage.ImageReader.Node#isLink()->boolean::: node is link
jdk.internal.jimage.ImageReader.Node#isDirectory()->boolean::: node is directory
jdk.internal.jimage.ImageReader.Node#getChildren()->List::: node get children
jdk.internal.jimage.ImageReader.Node#isResource()->boolean::: node is resource
jdk.internal.jimage.ImageReader.Node#getLocation()->ImageLocation::: node get location
jdk.internal.jimage.ImageReader.Node#size()->long::: node size
jdk.internal.jimage.ImageReader.Node#compressedSize()->long::: node compressed size
jdk.internal.jimage.ImageReader.Node#extension()->String::: node extension
jdk.internal.jimage.ImageReader.Node#contentOffset()->long::: node content offset
jdk.internal.jimage.ImageReader.Node#creationTime()->FileTime::: node creation time
jdk.internal.jimage.ImageReader.Node#lastAccessTime()->FileTime::: node last access time
jdk.internal.jimage.ImageReader.Node#lastModifiedTime()->FileTime::: node last modified time
jdk.internal.jimage.ImageReader.Node#getNameString()->String::: node get name string
jdk.internal.jimage.ImageReader.Node#toString()->String::: node to string
jdk.internal.jimage.ImageReader.Node#hashCode()->int::: node hash code
jdk.internal.jimage.ImageReader.Node#equals(Object)->boolean::: node equals
jdk.internal.jimage.ImageReader.Directory#create(Directory, String, BasicFileAttributes)->Directory::: directory create
jdk.internal.jimage.ImageReader.Directory#isDirectory()->boolean::: directory is directory
jdk.internal.jimage.ImageReader.Directory#getChildren()->List::: directory get children
jdk.internal.jimage.ImageReader.Directory#addChild(Node)->void::: directory add child
jdk.internal.jimage.ImageReader.Directory#walk(Consumer)->void::: directory walk
jdk.internal.jimage.ImageReader.Resource#create(Directory, ImageLocation, BasicFileAttributes)->Resource::: resource create
jdk.internal.jimage.ImageReader.Resource#isCompleted()->boolean::: resource is completed
jdk.internal.jimage.ImageReader.Resource#isResource()->boolean::: resource is resource
jdk.internal.jimage.ImageReader.Resource#getLocation()->ImageLocation::: resource get location
jdk.internal.jimage.ImageReader.Resource#size()->long::: resource size
jdk.internal.jimage.ImageReader.Resource#compressedSize()->long::: resource compressed size
jdk.internal.jimage.ImageReader.Resource#extension()->String::: resource extension
jdk.internal.jimage.ImageReader.Resource#contentOffset()->long::: resource content offset
jdk.internal.jimage.ImageReader.LinkNode#create(Directory, String, Node)->LinkNode::: link node create
jdk.internal.jimage.ImageReader.LinkNode#isCompleted()->boolean::: link node is completed
jdk.internal.jimage.ImageReader.LinkNode#resolveLink(boolean)->Node::: link node resolve link
jdk.internal.jimage.ImageReader.LinkNode#isLink()->boolean::: link node is link
jdk.internal.jimage.ImageReaderFactory#get(Path)->ImageReader:::Returns an ImageReader to read from the given image file
jdk.internal.jimage.ImageReaderFactory#getImageReader()->ImageReader:::Returns the ImageReader to read the image file in this run-time image.
jdk.internal.jimage.ImageStream#align(int)->ImageStream::: image stream align
jdk.internal.jimage.ImageStream#ensure(int)->void::: image stream ensure
jdk.internal.jimage.ImageStream#hasByte()->boolean::: image stream has byte
jdk.internal.jimage.ImageStream#hasBytes(int)->boolean::: image stream has bytes
jdk.internal.jimage.ImageStream#skip(int)->void::: image stream skip
jdk.internal.jimage.ImageStream#get()->int::: image stream get
jdk.internal.jimage.ImageStream#get(byte[], int, int)->void::: image stream get
jdk.internal.jimage.ImageStream#getShort()->int::: image stream get short
jdk.internal.jimage.ImageStream#getInt()->int::: image stream get int
jdk.internal.jimage.ImageStream#getLong()->long::: image stream get long
jdk.internal.jimage.ImageStream#put(byte)->ImageStream::: image stream put
jdk.internal.jimage.ImageStream#put(int)->ImageStream::: image stream put
jdk.internal.jimage.ImageStream#put(byte[], int, int)->ImageStream::: image stream put
jdk.internal.jimage.ImageStream#put(ImageStream)->ImageStream::: image stream put
jdk.internal.jimage.ImageStream#putShort(short)->ImageStream::: image stream put short
jdk.internal.jimage.ImageStream#putShort(int)->ImageStream::: image stream put short
jdk.internal.jimage.ImageStream#putInt(int)->ImageStream::: image stream put int
jdk.internal.jimage.ImageStream#putLong(long)->ImageStream::: image stream put long
jdk.internal.jimage.ImageStream#getBuffer()->ByteBuffer::: image stream get buffer
jdk.internal.jimage.ImageStream#getPosition()->int::: image stream get position
jdk.internal.jimage.ImageStream#getSize()->int::: image stream get size
jdk.internal.jimage.ImageStream#getBytes()->byte[]::: image stream get bytes
jdk.internal.jimage.ImageStream#setPosition(int)->void::: image stream set position
jdk.internal.jimage.ImageStream#toArray()->byte[]::: image stream to array
jdk.internal.jimage.ImageStrings#get(int)->String::: image strings get
jdk.internal.jimage.ImageStrings#add(String)->int::: image strings add
jdk.internal.jimage.ImageStringsReader#get(int)->String::: image strings reader get
jdk.internal.jimage.ImageStringsReader#add(String)->int::: image strings reader add
jdk.internal.jimage.ImageStringsReader#hashCode(String)->int::: image strings reader hash code
jdk.internal.jimage.ImageStringsReader#hashCode(String, int)->int::: image strings reader hash code
jdk.internal.jimage.ImageStringsReader#hashCode(String, String)->int::: image strings reader hash code
jdk.internal.jimage.ImageStringsReader#hashCode(String, String, int)->int::: image strings reader hash code
jdk.internal.jimage.ImageStringsReader#unmaskedHashCode(String, int)->int::: image strings reader unmasked hash code
jdk.internal.jimage.ImageStringsReader#charsFromMUTF8Length(byte[], int, int)->int::: image strings reader chars from f8 length
jdk.internal.jimage.ImageStringsReader#charsFromMUTF8(char[], byte[], int, int)->void::: image strings reader chars from f8
jdk.internal.jimage.ImageStringsReader#stringFromMUTF8(byte[], int, int)->String::: image strings reader string from f8
jdk.internal.jimage.ImageStringsReader#stringFromMUTF8(byte[])->String::: image strings reader string from f8
jdk.internal.jimage.ImageStringsReader#charsFromByteBufferLength(ByteBuffer)->int::: image strings reader chars from byte buffer length
jdk.internal.jimage.ImageStringsReader#charsFromByteBuffer(char[], ByteBuffer)->void::: image strings reader chars from byte buffer
jdk.internal.jimage.ImageStringsReader#stringFromByteBuffer(ByteBuffer)->String::: image strings reader string from byte buffer
jdk.internal.jimage.ImageStringsReader#mutf8FromStringLength(String)->int::: image strings reader mutf8 from string length
jdk.internal.jimage.ImageStringsReader#mutf8FromString(byte[], int, String)->void::: image strings reader mutf8 from string
jdk.internal.jimage.ImageStringsReader#mutf8FromString(String)->byte[]::: image strings reader mutf8 from string
jdk.internal.jimage.NativeImageBuffer#getNativeMap(String)->ByteBuffer::: native image buffer get native map

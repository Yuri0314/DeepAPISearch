ClassTree#subClasses(TypeElement)::: Return the sub-class set for the class passed.:::return->get
ClassTree#subInterfaces(TypeElement)::: Return the sub-interface set for the interface passed.:::return->get
ClassTree#implementingClasses(TypeElement)::: Return the set of classes which implement the interface passed.:::result->get->intfcs->allSubClasses->subInterfacesIter->intfcs->iterator->while->subInterfacesIter->hasNext->implementingClassesIter->subInterfacesIter->next->implementingClasses->iterator->while->implementingClassesIter->hasNext->c->implementingClassesIter->next->if->result->contains->result->add->return
ClassTree#directSubClasses(TypeElement, boolean)::: Return the sub-class/interface set for the class/interface passed.:::return->directSubClasses0
ClassTree#allSubClasses(TypeElement, boolean):::Return a set of all direct or indirect, sub-classes and subInterfaces of the TypeElement argument.:::list->directSubClasses->new->ArrayList<>->for->i->list->size->out->new->TreeSet<>->out->addAll->return
ClassTree#baseClasses()::: Return a set of base classes:::return
ClassTree#baseInterfaces()::: Return the set of base interfaces:::return
ClassTree#baseEnums()::: Return the set of base enums:::return
ClassTree#baseAnnotationTypes():::Return the set of base annotation types:::return
CommentHelper#toString():::For debugging purposes only:::sb->new->StringBuilder->sb->append->sb->element->getEnclosingElement->append->sb->append->sb->append->sb->append->if->sb->overriddenElement->getEnclosingElement->append->sb->append->sb->append->else->sb->append->sb->append->return->sb->toString
DeprecatedAPIListBuilder#getSet(DeprElementKind):::Return the list of deprecated elements of a given type.:::return->deprecatedMap->get
DeprecatedAPIListBuilder#hasDocumentation(DeprElementKind):::Return true if the list of a given type has size greater than 0.:::return->deprecatedMap->get->isEmpty
DocFile#createFileForDirectory(BaseConfiguration, String):::Create a DocFile for a directory.:::return->DocFileFactory->getFactory->createFileForDirectory
DocFile#createFileForInput(BaseConfiguration, String):::Create a DocFile for a file that will be opened for reading.:::return->DocFileFactory->getFactory->createFileForInput
DocFile#createFileForOutput(BaseConfiguration, DocPath):::Create a DocFile for a file that will be opened for writing.:::return->DocFileFactory->getFactory->createFileForOutput
DocFile#list(BaseConfiguration, Location, DocPath):::List the directories and files found in subdirectories along the elements of the given location.:::return->DocFileFactory->getFactory->list
DocFile#getFileObject():::Returns a file object for the file.:::
DocFile#openInputStream():::Open an input stream for the file.:::
DocFile#openOutputStream():::Open an output stream for the file:::
DocFile#openWriter():::Open an writer for the file, using the encoding (if any) given in the doclet configuration:::
DocFile#copyFile(DocFile):::Copy the contents of another file directly to this file.:::try->output->openOutputStream->try->input->fromFile->openInputStream->bytearr->new->byteArr->len->while->read->write->catch->throw->new->DocFileIOException->finally->catch->throw->new->DocFileIOException->finally
DocFile#copyResource(DocPath, boolean, boolean):::Copy the contents of a resource file to this file.:::if->exists->return->try->in->resource->getPath->getResourceAsStream->if->return->try->if->try->reader->new->InputStreamReader->new->BufferedReader->try->writer->openWriter->line->while->readResourceLine->write->write->catch->throw->new->DocFileIOException->finally->catch->finally->else->try->out->openOutputStream->buf->new->byteArr->n->while->readResource->write->catch->throw->new->DocFileIOException->finally->catch->finally->in->close->catch->throw->new->ResourceIOException->finally
DocFile#canRead():::Return true if the file can be read.:::
DocFile#canWrite():::Return true if the file can be written.:::
DocFile#exists():::Return true if the file exists.:::
DocFile#getName():::Return the base name (last component) of the file name.:::
DocFile#getPath():::Return the file system path for this file.:::
DocFile#isAbsolute():::Return true if file has an absolute path name.:::
DocFile#isDirectory():::Return true if file identifies a directory.:::
DocFile#isFile():::Return true if file identifies a file.:::
DocFile#isSameFile(DocFile):::Return true if this file is the same as another.:::
DocFile#list():::If the file is a directory, list its contents.:::
DocFile#mkdirs():::Create the file as a directory, including any parent directories.:::
DocFile#resolve(DocPath):::Derive a new file by resolving a relative path against this file:::
DocFile#resolve(String):::Derive a new file by resolving a relative path against this file:::
DocFile#resolveAgainst(Location):::Resolve a relative file against the given output location.:::
DocFileFactory#getFactory(BaseConfiguration):::Get the appropriate factory, based on the file manager given in the configuration.:::f->if->fm->configuration->getFileManager->if->new->StandardDocFileFactory->else->throw->new->IllegalStateException->return
DocFileFactory#createFileForDirectory(String):::Create a DocFile for a directory.:::
DocFileFactory#createFileForInput(String):::Create a DocFile for a file that will be opened for reading.:::
DocFileFactory#createFileForOutput(DocPath):::Create a DocFile for a file that will be opened for writing.:::
DocFileFactory#list(Location, DocPath):::List the directories and files found in subdirectories along the elements of the given location.:::
DocFinder.Input#toString():::For debugging purposes:::encl->element->getEnclosingElement->toString->return
DocFinder.Output#toString():::Returns a string representation for debugging purposes:::encl->holder->getEnclosingElement->toString->return
DocFinder#search(BaseConfiguration, Input):::Search for the requested comments in the given element:::output->new->Output->utils->if->else->if->utils->getFirstSentenceTrees->utils->getFullBody->else->inherit->if->isEmpty->return->inheritedSearchInput->input->copy->if->utils->isMethod->overriddenMethod->utils->overriddenMethod->if->search->if->isEmpty->return->encl->utils->getEnclosingTypeElement->vmt->configuration->getVisibleMemberTable->implementedMethods->vmt->getImplementedMethods->foreach->search->if->isEmpty->return->else->if->utils->isTypeElement->t->getSuperclass->superclass->utils->asTypeElement->if->search->if->isEmpty->return->return
DocLink#fragment(String):::Creates a DocLink representing the URI #fragment.:::return->new->DocLink
DocLink#relativizeAgainst(DocPath):::Creates a DocLink formed by relativizing the path against a given base.:::if->base->isEmpty->return->if->isAbsoluteURL->return->newPath->base->relativize->if->newPath->isEmpty->isEmpty->isEmpty->path->basename->return->new->DocLink
DocLink#toString():::Returns the link in the form "path?query#fragment", omitting any empty components.:::if->isEmpty->isEmpty->return->path->getPath->sb->new->StringBuilder->if->sb->path->getPath->append->if->isEmpty->sb->append->append->if->isEmpty->sb->append->append->return->sb->toString
DocPath#create(String):::Creates a path from a string.:::return->p->isEmpty->new->DocPath
DocPath#resolve(String):::Returns the path formed by appending the specified string to the current path.:::if->p->isEmpty->return->if->path->isEmpty->return->new->DocPath->return->new->DocPath
DocPath#resolve(DocPath):::Returns the path by appending the specified path to the current path.:::if->p->isEmpty->return->if->path->isEmpty->return->return->p->getPath->new->DocPath
DocPath#invert():::Return the inverse path for this path:::return->path->replaceAll->new->DocPath
DocPath#normalize():::Returns the path formed by eliminating empty components, '.' components, and redundant name/.:::return->path->isEmpty->String->normalize->join->new->DocPath
DocPath#relativize(DocPath):::Normalize and relativize a path against this path, assuming that this path is for a file (not a directory), in which the other path will appear.:::if->isEmpty->return->if->path->isEmpty->return->originParts->normalize->sep->path->lastIndexOf->destParts->normalize->path->substring->normalize->common->while->originParts->size->destParts->size->originParts->get->destParts->get->equals->newParts->if->originParts->size->destParts->destParts->size->subList->else->new->ArrayList<>->newParts->Collections->originParts->size->nCopies->addAll->newParts->destParts->destParts->size->subList->addAll->return->String->join->new->DocPath
DocPath#isEmpty():::Return true if this path is empty.:::return->path->isEmpty
DocPath#fragment(String):::Creates a DocLink formed from this path and a fragment identifier.:::return->new->DocLink
DocPath#query(String):::Creates a DocLink formed from this path and a query string.:::return->new->DocLink
DocPaths#indexN(int):::Generate the name of one of the files in the split index.:::return->DocPath->create
DocPaths#forClass(TypeElement):::Returns the path for a type element:::return->utils->containingPackage->forPackage->forName->resolve
DocPaths#forName(TypeElement):::Returns the path for the simple name of a type element:::return->utils->getSimpleName->new->DocPath
DocPaths#forPackage(TypeElement):::Returns the path for the package of a type element:::return->utils->containingPackage->forPackage
DocPaths#forPackage(PackageElement):::Returns the path for a package:::if->pkgElement->isUnnamed->return->pkgPath->DocPath->pkgElement->getQualifiedName->toString->replace->create->if->mdle->pkgElement->getEnclosingElement->return->forModule->resolve->else->return
DocPaths#forRoot(PackageElement):::Returns the inverse path for a package:::name->pkgElement->isUnnamed->pkgElement->getQualifiedName->toString->return->name->replace->replaceAll->new->DocPath
DocPaths#relativePath(PackageElement, PackageElement):::Returns a relative path from one package to another.:::return->forRoot->forPackage->resolve
DocPaths#moduleDocFiles(ModuleElement):::The path for the output directory for module documentation files.:::return->createModulePath
DocPaths#moduleFrame(ModuleElement):::The path for the file for a module's frame page.:::return->createModulePath
DocPaths#moduleSummary(ModuleElement):::The path for the file for a module's summary page.:::return->createModulePath
DocPaths#moduleSummary(String):::The path for the file for a module's summary page.:::return->createModulePath
DocPaths#moduleTypeFrame(ModuleElement):::The path for the file for a module's type frame page.:::return->createModulePath
ElementListWriter#generate(BaseConfiguration):::Generate the element index.:::elemgen->new->ElementListWriter->elemgen->generateElementListFile
Extern#isExternal(Element):::Determine if a element item is externally documented.:::if->packageItems->isEmpty->return->pe->containingPackage->if->pe->isUnnamed->return->return->findElementItem
Extern#isModule(String):::Determine if a element item is a module or not.:::elem->moduleItems->get->return
Extern#getExternalLink(Element, DocPath, String):::Convert a link to be an external link if appropriate.:::return->getExternalLink
Extern#link(String, Reporter):::Build the extern element list from given URL or the directory path, as specified with the "-link" flag:::return->link
Extern#link(String, String, Reporter):::Build the extern element list from given URL or the directory path, as specified with the "-linkoffline" flag:::return->link
Group#checkModuleGroups(String, String):::Depending upon the format of the module name provided in the "-group" option, generate two separate maps:::mdlPatterns->moduleNameFormList->split->if->groupList->contains->initMessages->messages->warning->return->groupList->add->foreach->if->mdlPattern->length->initMessages->messages->warning->return->if->mdlPattern->endsWith->mdlPattern->mdlPattern->length->substring->if->foundGroupFormat->return->regExpGroupMap->put->sortedRegExpList->add->else->if->foundGroupFormat->return->elementNameGroupMap->put->Collections->new->MapKeyComparator->sort->return
Group#checkPackageGroups(String, String):::Depending upon the format of the package name provided in the "-group" option, generate two separate maps:::pkgPatterns->pkgNameFormList->split->if->groupList->contains->initMessages->messages->warning->return->groupList->add->foreach->if->pkgPattern->length->initMessages->messages->warning->return->if->pkgPattern->endsWith->pkgPattern->pkgPattern->length->substring->if->foundGroupFormat->return->regExpGroupMap->put->sortedRegExpList->add->else->if->foundGroupFormat->return->elementNameGroupMap->put->Collections->new->MapKeyComparator->sort->return
Group#foundGroupFormat(Map, String):::Search if the given map has the given element format.:::if->map->containsKey->initMessages->messages->error->return->return
Group#groupModules(Set):::Group the modules according the grouping information provided on the command line:::groupModuleMap->new->HashMap<>->defaultGroupName->elementNameGroupMap->isEmpty->regExpGroupMap->isEmpty->configuration->getResources->getText->configuration->getResources->getText->if->groupList->contains->groupList->add->foreach->moduleName->mdl->isUnnamed->mdl->getQualifiedName->toString->groupName->mdl->isUnnamed->elementNameGroupMap->get->if->regExpGroupName->if->getModuleList->add->return
Group#groupPackages(Set):::Group the packages according the grouping information provided on the command line:::groupPackageMap->new->HashMap<>->defaultGroupName->elementNameGroupMap->isEmpty->regExpGroupMap->isEmpty->configuration->getResources->getText->configuration->getResources->getText->if->groupList->contains->groupList->add->foreach->pkgName->getPackageName->groupName->pkg->isUnnamed->elementNameGroupMap->get->if->regExpGroupName->if->getPkgList->add->return
Group#regExpGroupName(String):::Search for element name in the sorted regular expression list, if found return the group name:::foreach->if->elementName->startsWith->return->regExpGroupMap->get->return
Group#getPkgList(Map>, String):::For the given group name, return the package list, on which it is mapped:::return->map->makePackageComparator->new->TreeSet<>->computeIfAbsent
Group#getModuleList(Map>, String):::For the given group name, return the module list, on which it is mapped:::return->map->makeModuleComparator->new->TreeSet<>->computeIfAbsent
Group#getGroupList():::Return the list of groups, in the same order as specified on the command line.:::return
IndexBuilder#buildIndexMap(DocletEnvironment):::Get all the members in all the Packages and all the Classes given on the command line:::packages->configuration->getSpecifiedPackageElements->classes->configuration->getIncludedTypeElements->if->if->packages->isEmpty->set->new->HashSet<>->foreach->pkg->utils->containingPackage->if->pkg->isUnnamed->set->add->adjustIndexMap->else->adjustIndexMap->adjustIndexMap->if->foreach->if->shouldAddToIndexMap->putMembersInIndexMap->if->addModulesToIndexMap
IndexBuilder#putMembersInIndexMap(TypeElement):::Put all the members(fields, methods and constructors) in the te to the indexmap.:::vmt->configuration->getVisibleMemberTable->vmt->getMembers->adjustIndexMap->vmt->getMembers->adjustIndexMap->vmt->getMembers->adjustIndexMap->vmt->getMembers->adjustIndexMap->vmt->getMembers->adjustIndexMap
IndexBuilder#adjustIndexMap(Iterable):::Adjust list of members according to their names:::foreach->if->shouldAddToIndexMap->name->utils->isPackage->utils->getPackageName->utils->getSimpleName->ch->name->length->Character->name->charAt->toUpperCase->unicode->list->indexmap->new->TreeSet<>->computeIfAbsent->list->add
IndexBuilder#addModulesToIndexMap():::Add all the modules to index map.:::foreach->mdleName->mdle->getQualifiedName->toString->ch->mdleName->length->Character->mdleName->charAt->toUpperCase->unicode->list->indexmap->new->TreeSet<>->computeIfAbsent->list->add
IndexBuilder#shouldAddToIndexMap(Element):::Should this element be added to the index map?:::if->utils->hasHiddenTag->return->if->utils->isPackage->return->isDeprecated->else->return->isDeprecated->utils->containingPackage->isDeprecated
IndexBuilder#getIndexMap():::Return a map of all the individual member lists with Unicode character.:::return
IndexBuilder#getMemberList(Character):::Return the sorted list of members, for passed Unicode Character.:::set->indexmap->get->if->return->out->new->ArrayList<>->out->addAll->return
IndexBuilder#index():::Array of IndexMap keys, Unicode characters.:::return->indexmap->keySet->new->ArrayList<>
MetaKeywords#getMetaKeywords(TypeElement):::Returns an array of strings where each element is a class, method or field name:::results->new->ArrayList<>->if->results->getClassKeyword->addAll->results->getFields->getMemberKeywords->addAll->results->getMethods->getMemberKeywords->addAll->trimToSize->return
MetaKeywords#getClassKeyword(TypeElement):::Get the current class for a meta tag keyword, as the first and only element of an array list.:::metakeywords->new->ArrayList<>->cltypelower->isInterface->metakeywords->getFullyQualifiedName->add->return
MetaKeywords#getMetaKeywords(PackageElement):::Get the package keywords.:::result->new->ArrayList<>->if->pkgName->getPackageName->result->add->return
MetaKeywords#getMetaKeywordsForModule(ModuleElement):::Get the module keywords.:::if->return->Arrays->mdle->getQualifiedName->asList->else->return->Collections->emptyList
MetaKeywords#getOverviewMetaKeywords(String, String):::Get the overview keywords.:::result->new->ArrayList<>->if->windowOverview->config->getText->if->docTitle->length->result->add->else->result->add->return
MetaKeywords#getMemberKeywords(List):::Get members for meta tag keywords as an array, where each member name is a string element of the array:::results->new->ArrayList<>->foreach->membername->isMethod->getSimpleName->getSimpleName->if->results->contains->results->add->trimToSize->return
StandardDocFileFactory.StandardDocFile#openInputStream():::Open an input stream for the file.:::try->fo->getJavaFileObjectForInput->return->fo->openInputStream->new->BufferedInputStream->catch->throw->new->DocFileIOException->finally
StandardDocFileFactory.StandardDocFile#openOutputStream():::Open an output stream for the file:::if->throw->new->IllegalStateException->try->out->getFileObjectForOutput->openOutputStream->return->new->BufferedOutputStream->catch->throw->new->DocFileIOException->finally
StandardDocFileFactory.StandardDocFile#openWriter():::Open an writer for the file, using the encoding (if any) given in the doclet configuration:::if->throw->new->IllegalStateException->try->out->getFileObjectForOutput->openOutputStream->return->new->OutputStreamWriter->new->BufferedWriter->catch->throw->new->DocFileIOException->finally
StandardDocFileFactory.StandardDocFile#canRead():::Return true if the file can be read.:::return->Files->isReadable
StandardDocFileFactory.StandardDocFile#canWrite():::Return true if the file can be written.:::return->Files->isWritable
StandardDocFileFactory.StandardDocFile#exists():::Return true if the file exists.:::return->Files->exists
StandardDocFileFactory.StandardDocFile#getName():::Return the base name (last component) of the file name.:::return->file->getFileName->toString
StandardDocFileFactory.StandardDocFile#getPath():::Return the file system path for this file.:::return->file->toString
StandardDocFileFactory.StandardDocFile#isAbsolute():::Return true is file has an absolute path name.:::return->file->isAbsolute
StandardDocFileFactory.StandardDocFile#isDirectory():::Return true is file identifies a directory.:::return->Files->isDirectory
StandardDocFileFactory.StandardDocFile#isFile():::Return true is file identifies a file.:::return->Files->isRegularFile
StandardDocFileFactory.StandardDocFile#isSameFile(DocFile):::Return true if this file is the same as another.:::if->return->try->return->Files->isSameFile->catch->return->finally
StandardDocFileFactory.StandardDocFile#list():::If the file is a directory, list its contents.:::files->new->ArrayList<>->try->ds->Files->newDirectoryStream->foreach->files->new->StandardDocFile->add->catch->throw->new->DocFileIOException->finally->return
StandardDocFileFactory.StandardDocFile#mkdirs():::Create the file as a directory, including any parent directories.:::try->Files->createDirectories->return->catch->return->finally
StandardDocFileFactory.StandardDocFile#resolve(DocPath):::Derive a new file by resolving a relative path against this file:::return->p->getPath->resolve
StandardDocFileFactory.StandardDocFile#resolve(String):::Derive a new file by resolving a relative path against this file:::if->return->file->resolve->new->StandardDocFile->else->return->path->resolve->new->StandardDocFile
StandardDocFileFactory.StandardDocFile#resolveAgainst(Location):::Resolve a relative file against the given output location.:::if->throw->new->IllegalArgumentException->return->getDestDir->resolve->new->StandardDocFile
StandardDocFileFactory.StandardDocFile#toString():::Return a string to identify the contents of this object, for debugging purposes.:::sb->new->StringBuilder->sb->append->if->sb->append->append->append->if->sb->append->path->getPath->append->append->sb->append->append->sb->append->return->sb->toString
TypeElementCatalog#addTypeElement(TypeElement):::Add the given class to the catalog.:::if->return->addTypeElement->if->utils->isOrdinaryClass->addTypeElement->else->if->utils->isException->addTypeElement->else->if->utils->isEnum->addTypeElement->else->if->utils->isAnnotationType->addTypeElement->else->if->utils->isError->addTypeElement->else->if->utils->isInterface->addTypeElement
TypeElementCatalog#allClasses(PackageElement):::Return all of the classes specified on the command-line that belong to the given package.:::return->utils->isSpecified->utils->utils->getEnclosedTypeElements->getTypeElementsAsSortedSet->getSet
TypeElementCatalog#allUnnamedClasses():::Return all of the classes specified on the command-line that belong to the given package.:::foreach->allClasses->keySet->if->pkg->isUnnamed->return->allClasses->get->return->new->TreeSet<>
TypeElementCatalog#packages():::Return a SortedSet of packages that this catalog stores.:::return
TypeElementCatalog#errors(PackageElement):::Return all of the errors specified on the command-line that belong to the given package.:::return->getSet
TypeElementCatalog#exceptions(PackageElement):::Return all of the exceptions specified on the command-line that belong to the given package.:::return->getSet
TypeElementCatalog#enums(PackageElement):::Return all of the enums specified on the command-line that belong to the given package.:::return->getSet
TypeElementCatalog#annotationTypes(PackageElement):::Return all of the annotation types specified on the command-line that belong to the given package.:::return->getSet
TypeElementCatalog#interfaces(PackageElement):::Return all of the interfaces specified on the command-line that belong to the given package.:::return->getSet
TypeElementCatalog#ordinaryClasses(PackageElement):::Return all of the ordinary classes specified on the command-line that belong to the given package.:::return->getSet
Utils#excludeDeprecatedMembers(List):::Return array of class members whose documentation is to be generated:::excludeList->members->stream->isDeprecated->filter->makeGeneralPurposeComparator->sorted->Collectors->ArrayList->new->toCollection->collect->return
Utils#findMethod(TypeElement, ExecutableElement):::Search for the given method in the given class.:::foreach->getMethods->if->executableMembersEqual->return->return
Utils#isSubclassOf(TypeElement, TypeElement):::Test whether a class is a subclass of another class.:::return->typeUtils->t1->asType->t2->asType->isSubtype
Utils#isCoreClass(TypeElement):::According to The Java&trade; Language Specification, all the outer classes and static inner classes are core classes.:::return->getEnclosingTypeElement->isStatic
Utils#isClass(Element):::An Enum implementation is almost identical, thus this method returns if this element represents a CLASS or an ENUM:::return->e->getKind->isClass
Utils#signature(ExecutableElement):::Get the signature:::return->makeSignature
Utils#flatSignature(ExecutableElement):::Get flat signature:::return->makeSignature
Utils#getReturnType(ExecutableElement):::Returns the TypeMirror of the ExecutableElement for all methods, a null if constructor.:::return->ee->getKind->ee->getReturnType
Utils#overriddenType(ExecutableElement):::Return the type containing the method that this method overrides:::return->overriddenType
Utils#overriddenClass(ExecutableElement):::Return the class that originally defined the method that is overridden by the current definition, or null if no such class exists.:::type->overriddenType->return->asTypeElement
Utils#getDeclaredType(Collection, TypeElement, TypeMirror):::Finds the declaration of the enclosing's type parameter.:::targetElement->asTypeElement->targetTypeArgs->targetElement->getTypeParameters->if->targetTypeArgs->isEmpty->return->enclosingTypeArgs->enclosing->getTypeParameters->targetTypeArgTypes->targetTypeArgs->size->new->ArrayList<>->if->enclosingTypeArgs->isEmpty->foreach->typeArguments->getTypeArguments->if->typeArguments->size->targetTypeArgs->size->for->i->targetTypeArgs->size->break->if->targetTypeArgTypes->isEmpty->return->else->if->targetTypeArgs->size->enclosingTypeArgs->size->return->for->i->targetTypeArgs->size->dt->typeUtils->targetTypeArgTypes->targetTypeArgTypes->size->new->TypeMirrorArr->toArray->getDeclaredType->return
Utils#getAllInterfaces(TypeElement):::Returns all the implemented super-interfaces of a given type, in the case of classes, include all the super-interfaces of the supertype:::results->new->LinkedHashSet<>->te->asType->getAllInterfaces->return
Utils#findClassInPackageElement(PackageElement, String):::Lookup for a class within this package.:::foreach->getAllClasses->if->getSimpleName->equals->return->return
Utils#quote(String):::Enclose in quotes, used for paths and filenames that contains spaces:::return
Utils#parsePackageName(PackageElement):::Parse the package name:::pkgname->p->isUnnamed->getPackageName->index->for->j->if->pkgname->substring->return
Utils#replaceText(String, String, String):::Given a string, replace all occurrences of 'newStr' with 'oldStr'.:::if->oldStr->equals->return->return->originalStr->replace
Utils#isDocumentedAnnotation(TypeElement):::Given an annotation, return true if it should be documented and false otherwise.:::foreach->annotation->getAnnotationMirrors->if->anno->getAnnotationType->asElement->getFullyQualifiedName->getName->equals->return->return
Utils#isLinkable(TypeElement):::Return true if this class is linkable and false if we can't link to the desired class:::return->isIncluded->configuration->isGeneratedDoc->isExternal->isPublic->isProtected
Utils#asTypeElement(TypeMirror):::Return this type as a TypeElement if it represents a class interface or annotation:::return->new->SimpleTypeVisitor9<TypeElement,Void>->visit
Utils#getDimension(TypeMirror):::Return the type's dimension information, as a string:::return->new->SimpleTypeVisitor9<String,Void>->visit
Utils#getFirstVisibleSuperClass(TypeElement):::Given a class, return the closest visible super class.:::superType->te->getSuperclass->if->isNoType->getObjectType->superClass->asTypeElement->while->hasHiddenTag->isPublic->isLinkable->supersuperType->superClass->getSuperclass->supersuperClass->asTypeElement->if->supersuperClass->getQualifiedName->superClass->getQualifiedName->equals->break->if->te->asType->equals->return->return
Utils#replaceTabs(String):::Replace all tabs in a string with the appropriate number of spaces:::if->text->contains->return->tabLength->whitespace->textLength->text->length->result->new->StringBuilder->pos->lineLength->for->i->result->append->return->result->toString
Utils#setEnumDocumentation(TypeElement):::The documentation for values() and valueOf() in Enums are set by the doclet only iff the user or overridden methods are missing.:::foreach->getMethods->ee->if->getFullBody->isEmpty->continue->if->ee->getSimpleName->contentEquals->ee->getParameters->isEmpty->removeCommentHelper->setEnumValuesTree->if->ee->getSimpleName->contentEquals->ee->getParameters->size->removeCommentHelper->setEnumValueOfTree
Utils#toUpperCase(String):::Returns a locale independent upper cased String:::return->s->toUpperCase
Utils#toLowerCase(String):::Returns a locale independent lower cased String:::return->s->toLowerCase
Utils#isDeprecated(Element):::Return true if the given Element is deprecated.:::if->isPackage->return->isDeprecated0->return->elementUtils->isDeprecated
Utils#isDeprecatedForRemoval(Element):::Return true if the given Element is deprecated for removal.:::annotationList->e->getAnnotationMirrors->jctypes->foreach->if->jctypes->anno->getAnnotationType->asElement->asType->getDeprecatedType->isSameType->pairs->anno->getElementValues->if->pairs->isEmpty->foreach->pairs->keySet->if->element->getSimpleName->contentEquals->return->Boolean->pairs->get->toString->parseBoolean->return
Utils#propertyName(ExecutableElement):::A convenience method to get property name from the name of the getter or setter method.:::name->getSimpleName->propertyName->if->name->startsWith->name->startsWith->name->substring->else->if->name->startsWith->name->substring->if->propertyName->isEmpty->return->return->propertyName->substring->configuration->getLocale->toLowerCase->propertyName->substring
Utils#hasHiddenTag(Element):::Returns true if the element is included, contains &#64;hidden tag, or if javafx flag is present and element contains &#64;treatAsPrivate tag.:::if->isIncluded->return->if->hasBlockTag->return->return->hasBlockTag
Utils#isSimpleOverride(ExecutableElement):::Returns true if the method has no comments, or a lone &commat;inheritDoc.:::if->isIncluded->return->if->getBlockTags->isEmpty->return->fullBody->getFullBody->return->fullBody->isEmpty->fullBody->size->fullBody->get->getKind->equals
Utils#filterOutPrivateClasses(Iterable, boolean):::In case of JavaFX mode on, filters out classes that are private, package private, these are not documented in JavaFX mode, also remove those classes that have &#64;hidden or &#64;treatAsPrivate comment tag.:::filteredOutClasses->makeGeneralPurposeComparator->new->TreeSet<>->if->foreach->if->hasHiddenTag->filteredOutClasses->add->return->foreach->if->isPrivate->isPackagePrivate->hasHiddenTag->continue->filteredOutClasses->add->return
Utils#elementsEqual(Element, Element):::Compares two elements.:::if->e1->getKind->e2->getKind->return->s1->getSimpleName->s2->getSimpleName->if->compareStrings->f1->getFullyQualifiedName->f2->getFullyQualifiedName->return->compareStrings->return
Utils#compareStrings(String, String):::A general purpose case insensitive String comparator, which compares two Strings using a Collator strength of "TERTIARY".:::return->compareStrings
Utils#compareCaseCompare(String, String):::A general purpose case sensitive String comparator, which compares two Strings using a Collator strength of "SECONDARY".:::return->compareStrings
Utils#makeModuleComparator():::Comparator for ModuleElements, simply compares the fully qualified names:::if->new->Utils.ElementComparator->return
Utils#makeAllClassesComparator():::Returns a Comparator for all classes, compares the simple names of TypeElement, if equal then the fully qualified names.:::if->new->Utils.ElementComparator->return
Utils#makePackageComparator():::Returns a Comparator for packages, by comparing the fully qualified names.:::if->new->Utils.ElementComparator->return
Utils#makeDeprecatedComparator():::Returns a Comparator for deprecated items listed on deprecated list page, by comparing the fully qualified names.:::if->new->Utils.ElementComparator->return
Utils#makeSerialFieldTreeComparator():::Returns a Comparator for SerialFieldTree.:::if->s1->o1->getName->toString->s2->o2->getName->toString->return->s1->compareTo->return
Utils#makeGeneralPurposeComparator():::Returns a general purpose comparator.:::return->makeClassUseComparator
Utils#makeOverrideUseComparator():::Returns a Comparator for overrides and implements, used primarily on methods, compares the name first, then compares the simple names of the enclosing TypeElement and the fully qualified name of the enclosing TypeElement.:::if->new->Utils.ElementComparator->return
Utils#makeIndexUseComparator()::: Returns a Comparator for index file presentations, and are sorted as follows:::if->new->Utils.ElementComparator->return
Utils#makeTypeMirrorClassUseComparator():::Compares the FullyQualifiedNames of two TypeMirrors:::if->s1->getQualifiedTypeName->s2->getQualifiedTypeName->return->compareStrings->return
Utils#makeTypeMirrorIndexUseComparator():::Compares the SimpleNames of TypeMirrors if equal then the FullyQualifiedNames of TypeMirrors.:::if->result->getTypeName->getTypeName->compareStrings->if->return->return->getQualifiedTypeName->getQualifiedTypeName->compareStrings->return
Utils#getQualifiedTypeName(TypeMirror):::Get the qualified type name of a TypeMiror compatible with the Element's getQualified name, returns  the qualified name of the Reference type otherwise the primitive name.:::return->new->SimpleTypeVisitor9<String,Void>->visit
Utils#getFullyQualifiedName(Element):::A generic utility which returns the fully qualified names of an entity, if the entity is not qualifiable then its enclosing entity, it is upto the caller to add the elements name as required.:::return->getFullyQualifiedName
Utils#makeClassUseComparator():::Comparator for ClassUse presentations, and sorts as follows: 1:::if->new->Utils.ElementComparator->return
Utils#makeTypeSearchIndexComparator():::Returns a Comparator for SearchIndexItems representing types:::return->result->sii1->getSimpleName->sii2->getSimpleName->compareStrings->if->sii1->toString->sii2->toString->compareTo->return
Utils#makeGenericSearchIndexComparator():::Returns a Comparator for SearchIndexItems representing modules, packages, or members:::if->result->sii1->getLabel->sii2->getLabel->compareStrings->if->sii1->toString->sii2->toString->compareTo->return->return
Utils#getAllClasses(Element):::Returns a list containing classes and interfaces, including annotation types.:::oset->cachedClasses->get->if->return->clist->getClasses->clist->getInterfaces->addAll->clist->getAnnotationTypes->addAll->clist->getEnums->addAll->makeGeneralPurposeComparator->new->TreeSet<>->oset->addAll->cachedClasses->put->return
Utils#getOrdinaryClasses(Element):::Returns a list of classes that are not errors or exceptions:::return->getClasses->stream->isException->isError->filter->Collectors->toList->collect
Utils#getSimpleName(Element):::Returns the name of the element after the last dot of the package name:::return->nameCache->this->getSimpleName0->computeIfAbsent
Utils#getPackageName(PackageElement):::Get the package name for a given package element:::if->pkg->isUnnamed->return->return->pkg->getQualifiedName->toString
Utils#getModuleName(ModuleElement):::Get the module name for a given module element:::if->mdle->isUnnamed->return->return->mdle->getQualifiedName->toString
Utils#getTreePath(Element):::Gets a TreePath for an Element:::duo->dcTreeCache->get->if->isValidDuo->return->getSyntheticCommentDuo->if->isValidDuo->return->elementToTreePath->getElementToTreePath->path->elementToTreePath->get->if->elementToTreePath->containsKey->return->return->elementToTreePath->docTrees->getPath->computeIfAbsent
Utils#getDocCommentTree0(Element):::Retrieves the doc comments for a given element.:::duo->kind->element->getKind->if->dcTreeCache->get->if->isValidDuo->getDocCommentTuple->if->isValidDuo->getHtmlCommentDuo->else->getSyntheticCommentDuo->if->isValidDuo->dcTreeCache->get->if->isValidDuo->getDocCommentTuple->docCommentTree->isValidDuo->path->isValidDuo->if->dcTreeCache->containsKey->if->if->configuration->isAllowScriptInComments->try->javaScriptScanner->throw->new->JavaScriptScanner.Fault->scan->catch->text->configuration->getText->throw->new->SimpleDocletException->new->UncheckedDocletException->finally->runDocLint->dcTreeCache->put->return
VisibleMemberTable#getAllVisibleMembers(Kind):::Returns a list of all visible enclosed members of a type element, and inherited members:::ensureInitialized->return->visibleMembers->Collections->emptyList->getOrDefault
VisibleMemberTable#getVisibleMembers(Kind, Predicate):::Returns a list of visible enclosed members of a specified kind, filtered by the specified predicate.:::ensureInitialized->return->visibleMembers->Collections->emptyList->getOrDefault->stream->filter->Collectors->toList->collect
VisibleMemberTable#getVisibleMembers(Kind):::Returns a list of all enclosed members including any extra members:::declaredAndLeafMembers->encl->utils->getEnclosingTypeElement->return->isUndocumentedEnclosure->return->getVisibleMembers
VisibleMemberTable#getMembers(Kind):::Returns a list of visible enclosed members of given kind, declared in this type element, and does not include any inherited members or extra members.:::onlyLocallyDeclaredMembers->utils->getEnclosingTypeElement->return->getVisibleMembers
VisibleMemberTable#getOverriddenMethod(ExecutableElement):::Returns the overridden method, if it is simply overridding or the method is a member of a package private type, this method is primarily used to determine the location of a possible comment.:::ensureInitialized->found->overriddenMethodTable->get->if->utils->getEnclosingTypeElement->isUndocumentedEnclosure->return->return
VisibleMemberTable#getsimplyOverriddenMethod(ExecutableElement):::Returns the simply overridden method.:::ensureInitialized->found->overriddenMethodTable->get->if->return->return
VisibleMemberTable#getVisibleTypeElements():::Returns a set of visible type elements in this type element's lineage:::ensureInitialized->result->new->LinkedHashSet<>->result->add->allSuperclasses->stream->map->result->add->forEach->allSuperinterfaces->stream->map->utils->makeGeneralPurposeComparator->sorted->result->add->forEach->return
VisibleMemberTable#hasVisibleMembers():::Returns true if this table contains visible members.:::foreach->Kind->values->if->hasVisibleMembers->return->return
VisibleMemberTable#hasVisibleMembers(Kind):::Returns true if this table contains visible members of the specified kind, including inhertied members.:::ensureInitialized->elements->visibleMembers->get->return->elements->isEmpty
VisibleMemberTable#getPropertyField(ExecutableElement):::Returns the property field associated with the property method.:::ensureInitialized->pm->propertyMap->get->return
VisibleMemberTable#getPropertyGetter(ExecutableElement):::Returns the getter method associated with the property method.:::ensureInitialized->pm->propertyMap->get->return
VisibleMemberTable#getPropertySetter(ExecutableElement):::Returns the setter method associated with the property method.:::ensureInitialized->pm->propertyMap->get->return

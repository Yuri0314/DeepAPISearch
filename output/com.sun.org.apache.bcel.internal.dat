Const#getAccessName(int)::: const get access name:::return
Const#getConstantName(int)::: const get constant name:::return
Const#getInterfacesImplementedByArrays()::: const get interfaces implemented by arrays:::return->Collections->Arrays->asList->unmodifiableList
Const#getTypeName(int):::The primitive type names corresponding to the T_XX constants, e.g., TYPE_NAMES[T_INT] = "int":::return
Const#getClassTypeName(int):::The primitive class names corresponding to the T_XX constants, e.g., CLASS_TYPE_NAMES[T_INT] = "java.lang.Integer":::return
Const#getShortTypeName(int)::: const get short type name:::return
Const#getNoOfOperands(int)::: const get no of operands:::return
Const#getOperandType(int, int)::: const get operand type:::return
Const#getOperandTypeCount(int)::: const get operand type count:::return
Const#getOpcodeName(int)::: const get opcode name:::return
Const#getConsumeStack(int)::: const get consume stack:::return
Const#getProduceStack(int)::: const get produce stack:::return
Const#getAttributeName(int)::: const get attribute name:::return
Const#getItemName(int)::: const get item name:::return
Const#getMethodHandleName(int)::: const get method handle name:::return
ExceptionConst#mergeExceptions(Class[], Class...)::: exception const merge exceptions:::extraLen->excs->new->Class<?>Arr->System->arraycopy->if->System->arraycopy->return
ExceptionConst#createExceptions(EXCS, Class...):::Creates a copy of the specified Exception Class array combined with any additional Exception classes.:::switch->return->mergeExceptions->return->mergeExceptions->return->mergeExceptions->return->mergeExceptions->return->mergeExceptions->throw->new->AssertionError
Repository#getRepository()::: repository get repository:::return
Repository#setRepository(com.sun.org.apache.bcel.internal.util.Repository):::Set repository instance to be used for class loading:::
Repository#lookupClass(String):::Lookup class somewhere found on your CLASSPATH, or whereever the repository instance looks for it.:::return->repository->loadClass
Repository#lookupClass(Class):::Try to find class source using the internal repository instance.:::return->repository->loadClass
Repository#clearCache():::Clear the repository.:::repository->clear
Repository#addClass(JavaClass):::Add clazz to repository if there isn't an equally named class already in there.:::old->repository->clazz->getClassName->findClass->repository->storeClass->return
Repository#removeClass(String):::Remove class with given (fully qualified) name from repository.:::repository->repository->findClass->removeClass
Repository#removeClass(JavaClass):::Remove given class from repository.:::repository->removeClass
Repository#getSuperClasses(JavaClass)::: repository get super classes:::return->clazz->getSuperClasses
Repository#getSuperClasses(String)::: repository get super classes:::jc->lookupClass->return->getSuperClasses
Repository#getInterfaces(JavaClass)::: repository get interfaces:::return->clazz->getAllInterfaces
Repository#getInterfaces(String)::: repository get interfaces:::return->lookupClass->getInterfaces
Repository#instanceOf(JavaClass, JavaClass):::Equivalent to runtime "instanceof" operator.:::return->clazz->instanceOf
Repository#instanceOf(String, String)::: repository instance of:::return->lookupClass->lookupClass->instanceOf
Repository#instanceOf(JavaClass, String)::: repository instance of:::return->lookupClass->instanceOf
Repository#instanceOf(String, JavaClass)::: repository instance of:::return->lookupClass->instanceOf
Repository#implementationOf(JavaClass, JavaClass)::: repository implementation of:::return->clazz->implementationOf
Repository#implementationOf(String, String)::: repository implementation of:::return->lookupClass->lookupClass->implementationOf
Repository#implementationOf(JavaClass, String)::: repository implementation of:::return->lookupClass->implementationOf
Repository#implementationOf(String, JavaClass)::: repository implementation of:::return->lookupClass->implementationOf

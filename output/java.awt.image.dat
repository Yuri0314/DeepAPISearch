AbstractMultiResolutionImage#getWidth(ImageObserver):::This method simply delegates to the same method on the base image and it is equivalent to: getBaseImage().getWidth(observer).:::return->getBaseImage->getWidth
AbstractMultiResolutionImage#getHeight(ImageObserver):::This method simply delegates to the same method on the base image and it is equivalent to: getBaseImage().getHeight(observer).:::return->getBaseImage->getHeight
AbstractMultiResolutionImage#getSource():::This method simply delegates to the same method on the base image and it is equivalent to: getBaseImage().getSource().:::return->getBaseImage->getSource
AbstractMultiResolutionImage#getGraphics():::As per the contract of the base Image#getGraphics() method, this implementation will always throw UnsupportedOperationException since only off-screen images can return a Graphics object.:::throw->new->UnsupportedOperationException
AbstractMultiResolutionImage#getProperty(String, ImageObserver):::This method simply delegates to the same method on the base image and it is equivalent to: getBaseImage().getProperty(name, observer).:::return->getBaseImage->getProperty
AbstractMultiResolutionImage#getBaseImage():::Return the base image representing the best version of the image for rendering at the default width and height.:::
AffineTransformOp#getInterpolationType():::Returns the interpolation type used by this op.:::return
AffineTransformOp#filter(BufferedImage, BufferedImage):::Transforms the source BufferedImage and stores the results in the destination BufferedImage:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->needToConvert->srcCM->src->getColorModel->dstCM->origDst->if->createCompatibleDestImage->else->dst->getColorModel->if->srcCM->getColorSpace->getType->dstCM->getColorSpace->getType->type->xform->getType->needTrans->if->mtx->new->doubleArr->xform->getMatrix->if->srcCM->getTransparency->ccop->new->ColorConvertOp->tmpSrc->sw->src->getWidth->sh->src->getHeight->if->dstCM->getTransparency->new->BufferedImage->else->r->dstCM->createCompatibleWritableRaster->dstCM->isAlphaPremultiplied->new->BufferedImage->ccop->filter->else->createCompatibleDestImage->if->dst->getColorModel->dst->getWidth->dst->getHeight->new->BufferedImage->if->ImagingLib->filter->throw->new->ImagingOpException->if->ccop->new->ColorConvertOp->ccop->filter->else->if->g->origDst->createGraphics->try->g->setComposite->g->drawImage->catch->finally->g->dispose->return
AffineTransformOp#filter(Raster, WritableRaster):::Transforms the source Raster and stores the results in the destination Raster:::if->throw->new->NullPointerException->if->createCompatibleDestRaster->if->throw->new->IllegalArgumentException->if->src->getNumBands->dst->getNumBands->throw->src->getNumBands->dst->getNumBands->new->IllegalArgumentException->if->ImagingLib->filter->throw->new->ImagingOpException->return
AffineTransformOp#getBounds2D(BufferedImage):::Returns the bounding box of the transformed destination:::return->src->getRaster->getBounds2D
AffineTransformOp#getBounds2D(Raster):::Returns the bounding box of the transformed destination:::w->src->getWidth->h->src->getHeight->pts->xform->transform->fmaxX->fmaxY->fminX->fminY->for->i->return->new->Rectangle2D.Float
AffineTransformOp#createCompatibleDestImage(BufferedImage, ColorModel):::Creates a zeroed destination image with the correct size and number of bands:::image->r->getBounds2D->getBounds->w->h->if->throw->new->RasterFormatException->if->throw->new->RasterFormatException->if->cm->src->getColorModel->if->cm->getTransparency->new->BufferedImage->else->src->getRaster->createCompatibleWritableRaster->cm->isAlphaPremultiplied->new->BufferedImage->else->destCM->createCompatibleWritableRaster->destCM->isAlphaPremultiplied->new->BufferedImage->return
AffineTransformOp#createCompatibleDestRaster(Raster):::Creates a zeroed destination Raster with the correct size and number of bands:::r->getBounds2D->return->src->r->getX->r->getY->r->getWidth->r->getHeight->createCompatibleWritableRaster
AffineTransformOp#getPoint2D(Point2D, Point2D):::Returns the location of the corresponding destination point given a point in the source:::return->xform->transform
AffineTransformOp#getTransform():::Returns the affine transform used by this transform operation.:::return->xform->clone
AffineTransformOp#getRenderingHints():::Returns the rendering hints used by this transform operation.:::if->val->switch->break->break->break->throw->new->InternalError->new->RenderingHints->return
AreaAveragingScaleFilter#setHints(int):::Detect if the data is being delivered with the necessary hints to allow the averaging algorithm to do its work:::super->setHints
AreaAveragingScaleFilter#setPixels(int, int, int, int, ColorModel, byte[], int, int):::Combine the components for the delivered byte pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete:::if->super->setPixels->else->accumPixels
AreaAveragingScaleFilter#setPixels(int, int, int, int, ColorModel, int[], int, int):::Combine the components for the delivered int pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete:::if->super->setPixels->else->accumPixels
BandCombineOp#getMatrix():::Returns a copy of the linear combination matrix.:::ret->new->floatArrs->for->i->return
BandCombineOp#filter(Raster, WritableRaster):::Transforms the Raster using the matrix specified in the constructor:::nBands->src->getNumBands->if->throw->new->IllegalArgumentException->if->createCompatibleDestRaster->else->if->dst->getNumBands->throw->new->IllegalArgumentException->if->ImagingLib->filter->return->pixel->dstPixel->dst->getNumBands->new->intArr->accum->sminX->src->getMinX->sY->src->getMinY->dminX->dst->getMinX->dY->dst->getMinY->sX->dX->if->for->y->src->getHeight->else->for->y->src->getHeight->return
BandCombineOp#getBounds2D(Raster):::Returns the bounding box of the transformed destination:::return->src->getBounds
BandCombineOp#createCompatibleDestRaster(Raster):::Creates a zeroed destination Raster with the correct size and number of bands:::nBands->src->getNumBands->if->throw->new->IllegalArgumentException->if->src->getNumBands->return->src->createCompatibleWritableRaster->else->throw->new->IllegalArgumentException
BandCombineOp#getPoint2D(Point2D, Point2D):::Returns the location of the corresponding destination point given a point in the source Raster:::if->new->Point2D.Float->dstPt->srcPt->getX->srcPt->getY->setLocation->return
BandCombineOp#getRenderingHints():::Returns the rendering hints for this operation.:::return
BandedSampleModel#createCompatibleSampleModel(int, int):::Creates a new BandedSampleModel with the specified width and height:::bandOffs->if->orderBands->else->new->intArr->sampleModel->new->BandedSampleModel->return
BandedSampleModel#createSubsetSampleModel(int[]):::Creates a new BandedSampleModel with a subset of the bands of this BandedSampleModel:::if->throw->new->RasterFormatException->newBankIndices->new->intArr->newBandOffsets->new->intArr->for->i->return->new->BandedSampleModel
BandedSampleModel#createDataBuffer():::Creates a DataBuffer that corresponds to this BandedSampleModel, The DataBuffer's data type, number of banks, and size will be consistent with this BandedSampleModel.:::dataBuffer->size->if->sizePerBand->for->index->else->maxBandOffset->for->index->switch->new->DataBufferByte->break->new->DataBufferUShort->break->new->DataBufferShort->break->new->DataBufferInt->break->new->DataBufferFloat->break->new->DataBufferDouble->break->throw->new->IllegalArgumentException->return
BandedSampleModel#getDataElements(int, int, Object, DataBuffer):::Returns data for a single pixel in a primitive array of type TransferType:::if->throw->new->ArrayIndexOutOfBoundsException->type->getTransferType->numDataElems->getNumDataElements->pixelOffset->switch->bdata->if->new->byteArr->else->for->i->break->sdata->if->new->shortArr->else->for->i->break->idata->if->new->intArr->else->for->i->break->fdata->if->new->floatArr->else->for->i->break->ddata->if->new->doubleArr->else->for->i->break->return
BandedSampleModel#getPixel(int, int, int[], DataBuffer):::Returns all samples for the specified pixel in an int array:::if->throw->new->ArrayIndexOutOfBoundsException->pixels->if->else->new->intArr->pixelOffset->for->i->return
BandedSampleModel#getPixels(int, int, int, int, int[], DataBuffer):::Returns all samples for the specified rectangle of pixels in an int array, one sample per data array element:::x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->pixels->if->else->new->intArr->for->k->return
BandedSampleModel#getSample(int, int, int, DataBuffer):::Returns as int the sample in a specified band for the pixel located at (x,y):::if->throw->new->ArrayIndexOutOfBoundsException->sample->data->getElem->return
BandedSampleModel#getSampleFloat(int, int, int, DataBuffer):::Returns the sample in a specified band for the pixel located at (x,y) as a float:::if->throw->new->ArrayIndexOutOfBoundsException->sample->data->getElemFloat->return
BandedSampleModel#getSampleDouble(int, int, int, DataBuffer):::Returns the sample in a specified band for a pixel located at (x,y) as a double:::if->throw->new->ArrayIndexOutOfBoundsException->sample->data->getElemDouble->return
BandedSampleModel#getSamples(int, int, int, int, int, int[], DataBuffer):::Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element:::if->throw->new->ArrayIndexOutOfBoundsException->samples->if->else->new->intArr->lineOffset->srcOffset->bank->for->i->return
BandedSampleModel#setDataElements(int, int, Object, DataBuffer):::Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType:::if->throw->new->ArrayIndexOutOfBoundsException->type->getTransferType->numDataElems->getNumDataElements->pixelOffset->switch->barray->for->i->break->sarray->for->i->break->iarray->for->i->break->farray->for->i->break->darray->for->i->break
BandedSampleModel#setPixel(int, int, int[], DataBuffer):::Sets a pixel in the DataBuffer using an int array of samples for input:::if->throw->new->ArrayIndexOutOfBoundsException->pixelOffset->for->i
BandedSampleModel#setPixels(int, int, int, int, int[], DataBuffer):::Sets all samples for a rectangle of pixels from an int array containing one sample per array element:::x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->for->k
BandedSampleModel#setSample(int, int, int, int, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input:::if->throw->new->ArrayIndexOutOfBoundsException->data->setElem
BandedSampleModel#setSample(int, int, int, float, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input:::if->throw->new->ArrayIndexOutOfBoundsException->data->setElemFloat
BandedSampleModel#setSample(int, int, int, double, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input:::if->throw->new->ArrayIndexOutOfBoundsException->data->setElemDouble
BandedSampleModel#setSamples(int, int, int, int, int, int[], DataBuffer):::Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element:::if->throw->new->ArrayIndexOutOfBoundsException->lineOffset->srcOffset->bank->for->i
BufferedImage#getType():::Returns the image type:::return
BufferedImage#getColorModel():::Returns the ColorModel.:::return
BufferedImage#getRaster():::Returns the WritableRaster.:::return
BufferedImage#getAlphaRaster():::Returns a WritableRaster representing the alpha channel for BufferedImage objects with ColorModel objects that support a separate spatial alpha channel, such as ComponentColorModel and DirectColorModel:::return->colorModel->getAlphaRaster
BufferedImage#getRGB(int, int):::Returns an integer pixel in the default RGB color model (TYPE_INT_ARGB) and default sRGB colorspace:::return->colorModel->raster->getDataElements->getRGB
BufferedImage#getRGB(int, int, int, int, int[], int, int):::Returns an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, from a portion of the image data:::yoff->off->data->nbands->raster->getNumBands->dataType->raster->getDataBuffer->getDataType->switch->new->byteArr->break->new->shortArr->break->new->intArr->break->new->floatArr->break->new->doubleArr->break->throw->new->IllegalArgumentException->if->new->intArr->for->y->return
BufferedImage#setRGB(int, int, int):::Sets a pixel in this BufferedImage to the specified RGB value:::raster->colorModel->getDataElements->setDataElements
BufferedImage#setRGB(int, int, int, int, int[], int, int):::Sets an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, into a portion of the image data:::yoff->off->pixel->for->y
BufferedImage#getWidth():::Returns the width of the BufferedImage.:::return->raster->getWidth
BufferedImage#getHeight():::Returns the height of the BufferedImage.:::return->raster->getHeight
BufferedImage#getWidth(ImageObserver):::Returns the width of the BufferedImage.:::return->raster->getWidth
BufferedImage#getHeight(ImageObserver):::Returns the height of the BufferedImage.:::return->raster->getHeight
BufferedImage#getSource():::Returns the object that produces the pixels for the image.:::if->if->new->Hashtable<>->new->OffScreenImageSource->return
BufferedImage#getProperty(String, ImageObserver):::Returns a property of the image by name:::return->getProperty
BufferedImage#getProperty(String):::Returns a property of the image by name.:::if->throw->new->NullPointerException->if->return->o->properties->get->if->return
BufferedImage#getGraphics():::This method returns a Graphics2D, but is here for backwards compatibility:::return->createGraphics
BufferedImage#createGraphics():::Creates a Graphics2D, which can be used to draw into this BufferedImage.:::env->GraphicsEnvironment->getLocalGraphicsEnvironment->return->env->createGraphics
BufferedImage#getSubimage(int, int, int, int):::Returns a subimage defined by a specified rectangular region:::return->raster->createWritableChild->colorModel->isAlphaPremultiplied->new->BufferedImage
BufferedImage#isAlphaPremultiplied():::Returns whether or not the alpha has been premultiplied:::return->colorModel->isAlphaPremultiplied
BufferedImage#coerceData(boolean):::Forces the data to match the state specified in the isAlphaPremultiplied variable:::if->colorModel->hasAlpha->colorModel->isAlphaPremultiplied->colorModel->coerceData
BufferedImage#toString():::Returns a String representation of this BufferedImage object and its values.:::return->Integer->hashCode->toHexString
BufferedImage#getSources():::Returns a Vector of RenderedImage objects that are the immediate sources, not the sources of these immediate sources, of image data for this BufferedImage:::return
BufferedImage#getPropertyNames():::Returns an array of names recognized by #getProperty(String) getProperty(String) or null, if no property names are recognized.:::if->properties->isEmpty->return->keys->properties->keySet->return->keys->keys->size->new->StringArr->toArray
BufferedImage#getMinX():::Returns the minimum x coordinate of this BufferedImage:::return->raster->getMinX
BufferedImage#getMinY():::Returns the minimum y coordinate of this BufferedImage:::return->raster->getMinY
BufferedImage#getSampleModel():::Returns the SampleModel associated with this BufferedImage.:::return->raster->getSampleModel
BufferedImage#getNumXTiles():::Returns the number of tiles in the x direction:::return
BufferedImage#getNumYTiles():::Returns the number of tiles in the y direction:::return
BufferedImage#getMinTileX():::Returns the minimum tile index in the x direction:::return
BufferedImage#getMinTileY():::Returns the minimum tile index in the y direction:::return
BufferedImage#getTileWidth():::Returns the tile width in pixels.:::return->raster->getWidth
BufferedImage#getTileHeight():::Returns the tile height in pixels.:::return->raster->getHeight
BufferedImage#getTileGridXOffset():::Returns the x offset of the tile grid relative to the origin, For example, the x coordinate of the location of tile (0,&nbsp;0):::return->raster->getSampleModelTranslateX
BufferedImage#getTileGridYOffset():::Returns the y offset of the tile grid relative to the origin, For example, the y coordinate of the location of tile (0,&nbsp;0):::return->raster->getSampleModelTranslateY
BufferedImage#getTile(int, int):::Returns tile (tileX,&nbsp;tileY):::if->return->throw->new->ArrayIndexOutOfBoundsException
BufferedImage#getData():::Returns the image as one large tile:::width->raster->getWidth->height->raster->getHeight->startX->raster->getMinX->startY->raster->getMinY->wr->Raster->raster->getSampleModel->raster->getSampleModelTranslateX->raster->getSampleModelTranslateY->new->Point->createWritableRaster->tdata->for->i->return
BufferedImage#getData(Rectangle):::Computes and returns an arbitrary region of the BufferedImage:::sm->raster->getSampleModel->nsm->sm->createCompatibleSampleModel->wr->Raster->rect->getLocation->createWritableRaster->width->height->startX->startY->tdata->for->i->return
BufferedImage#copyData(WritableRaster):::Computes an arbitrary rectangular region of the BufferedImage and copies it into a specified WritableRaster:::if->return->getData->width->outRaster->getWidth->height->outRaster->getHeight->startX->outRaster->getMinX->startY->outRaster->getMinY->tdata->for->i->return
BufferedImage#setData(Raster):::Sets a rectangular region of the image to the contents of the specified Raster r, which is assumed to be in the same coordinate space as the BufferedImage:::width->r->getWidth->height->r->getHeight->startX->r->getMinX->startY->r->getMinY->tdata->rclip->new->Rectangle->bclip->new->Rectangle->intersect->rclip->intersection->if->intersect->isEmpty->return->for->i
BufferedImage#addTileObserver(TileObserver):::Adds a tile observer:::
BufferedImage#removeTileObserver(TileObserver):::Removes a tile observer:::
BufferedImage#isTileWritable(int, int):::Returns whether or not a tile is currently checked out for writing.:::if->return->throw->new->IllegalArgumentException
BufferedImage#getWritableTileIndices():::Returns an array of Point objects indicating which tiles are checked out for writing:::p->new->PointArr->new->Point->return
BufferedImage#hasTileWriters():::Returns whether or not any tile is checked out for writing:::return
BufferedImage#getWritableTile(int, int):::Checks out a tile for writing:::return
BufferedImage#releaseWritableTile(int, int):::Relinquishes permission to write to a tile:::
BufferedImage#getTransparency():::Returns the transparency:::return->colorModel->getTransparency
BufferedImageFilter#getBufferedImageOp():::Returns the BufferedImageOp.:::return
BufferedImageFilter#setDimensions(int, int):::Filters the information provided in the ImageConsumer#setDimensions(int, int) setDimensions  method of the ImageConsumer interface:::if->imageComplete->return
BufferedImageFilter#setColorModel(ColorModel):::Filters the information provided in the ImageConsumer#setColorModel(ColorModel) setColorModel method of the ImageConsumer interface:::
BufferedImageFilter#setPixels(int, int, int, int, ColorModel, byte[], int, int):::Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of bytes:::if->throw->new->IllegalArgumentException->if->return->if->diff->if->return->if->if->return->if->diff->if->return->if->if->return->dstPtr->if->if->new->byteArr->else->if->convertToRGB->if->for->sh->if->dstRem->srcRem->for->sh
BufferedImageFilter#setPixels(int, int, int, int, ColorModel, int[], int, int):::Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of integers:::if->throw->new->IllegalArgumentException->if->return->if->diff->if->return->if->if->return->if->diff->if->return->if->if->return->if->if->new->intArr->else->convertToRGB->dstPtr->if->for->sh->else->if->ColorModel->getRGBdefault->convertToRGB->dstRem->srcRem->for->sh
BufferedImageFilter#imageComplete(int):::Filters the information provided in the imageComplete method of the ImageConsumer interface:::wr->switch->break->if->break->if->if->break->createDCMraster->else->if->bandOffsets->if->break->db->new->DataBufferByte->Raster->createInterleavedRaster->else->convertToRGB->if->break->createDCMraster->bi->model->isAlphaPremultiplied->new->BufferedImage->bufferedImageOp->filter->r->bi->getRaster->cm->bi->getColorModel->w->r->getWidth->h->r->getHeight->consumer->setDimensions->consumer->setColorModel->if->db->r->getDataBuffer->consumer->db->getData->setPixels->else->if->db->r->getDataBuffer->consumer->db->getData->setPixels->else->throw->new->InternalError->break->consumer->imageComplete
BufferedImageOp#filter(BufferedImage, BufferedImage):::Performs a single-input/single-output operation on a BufferedImage:::
BufferedImageOp#getBounds2D(BufferedImage):::Returns the bounding box of the filtered destination image:::
BufferedImageOp#createCompatibleDestImage(BufferedImage, ColorModel):::Creates a zeroed destination image with the correct size and number of bands:::
BufferedImageOp#getPoint2D(Point2D, Point2D):::Returns the location of the corresponding destination point given a point in the source image:::
BufferedImageOp#getRenderingHints():::Returns the rendering hints for this operation.:::
BufferStrategy#getCapabilities():::Returns the BufferCapabilities for this BufferStrategy.:::
BufferStrategy#getDrawGraphics():::Creates a graphics context for the drawing buffer:::
BufferStrategy#contentsLost():::Returns whether the drawing buffer was lost since the last call to getDrawGraphics:::
BufferStrategy#contentsRestored():::Returns whether the drawing buffer was recently restored from a lost state and reinitialized to the default background color (white):::
BufferStrategy#show():::Makes the next available buffer visible by either copying the memory (blitting) or changing the display pointer (flipping).:::
BufferStrategy#dispose():::Releases system resources currently consumed by this BufferStrategy and removes it from the associated Component:::
ByteLookupTable#getTable():::Returns the lookup table data by reference:::return
ByteLookupTable#lookupPixel(int[], int[]):::Returns an array of samples of a pixel, translated with the lookup table:::if->new->intArr->if->for->i->else->for->i->return
ByteLookupTable#lookupPixel(byte[], byte[]):::Returns an array of samples of a pixel, translated with the lookup table:::if->new->byteArr->if->for->i->else->for->i->return
ColorConvertOp#getICC_Profiles():::Returns the array of ICC_Profiles used to construct this ColorConvertOp:::if->profiles->new->ICC_ProfileArr->for->i1->return->return
ColorConvertOp#filter(BufferedImage, BufferedImage):::ColorConverts the source BufferedImage:::srcColorSpace->destColorSpace->savdest->if->src->getColorModel->icm->src->getColorModel->icm->src->getRaster->convertToIntDiscrete->src->getColorModel->getColorSpace->if->if->dest->getColorModel->else->dest->getColorModel->getColorSpace->else->if->nonICCBIFilter->else->ICCBIFilter->if->big->savdest->createGraphics->try->big->drawImage->catch->finally->big->dispose->return->else->return
ColorConvertOp#filter(Raster, WritableRaster):::ColorConverts the image data in the source Raster:::if->return->nonICCRasterFilter->nProfiles->if->throw->new->IllegalArgumentException->if->src->getNumBands->getNumComponents->throw->new->IllegalArgumentException->if->createCompatibleDestRaster->else->if->src->getHeight->dest->getHeight->src->getWidth->dest->getWidth->throw->new->IllegalArgumentException->if->dest->getNumBands->getNumComponents->throw->new->IllegalArgumentException->if->i1->whichTrans->renderState->theTransforms->new->ColorTransformArr->if->getProfileClass->else->mdl->CMSManager->getModule->for->mdl->createTransform->srcTransferType->src->getTransferType->dstTransferType->dest->getTransferType->if->if->getMinMaxValsFromProfiles->thisRasterTransform->colorConvert->else->thisRasterTransform->colorConvert->return
ColorConvertOp#getBounds2D(BufferedImage):::Returns the bounding box of the destination, given this source:::return->src->getRaster->getBounds2D
ColorConvertOp#getBounds2D(Raster):::Returns the bounding box of the destination, given this source:::return->src->getBounds
ColorConvertOp#createCompatibleDestImage(BufferedImage, ColorModel):::Creates a zeroed destination image with the correct size and number of bands, given this source.:::cs->if->if->nProfiles->if->throw->new->IllegalArgumentException->destProfile->new->ICC_ColorSpace->else->nSpaces->return->createCompatibleDestImage
ColorConvertOp#createCompatibleDestRaster(Raster):::Creates a zeroed destination Raster with the correct size and number of bands, given this source.:::ncomponents->if->if->throw->new->IllegalArgumentException->getNumComponents->else->nProfiles->if->throw->new->IllegalArgumentException->getNumComponents->dest->Raster->src->getWidth->src->getHeight->src->getMinX->src->getMinY->new->Point->createInterleavedRaster->return
ColorConvertOp#getPoint2D(Point2D, Point2D):::Returns the location of the destination point given a point in the source:::if->new->Point2D.Float->dstPt->srcPt->getX->srcPt->getY->setLocation->return
ColorConvertOp#getRenderingHints():::Returns the rendering hints used by this op.:::return
ColorModel#getRGBdefault():::Returns a DirectColorModel that describes the default format for integer RGB values used in many of the methods in the AWT image interfaces for the convenience of the programmer:::if->new->DirectColorModel->return
ColorModel#hasAlpha():::Returns whether or not alpha is supported in this ColorModel.:::return
ColorModel#isAlphaPremultiplied():::Returns whether or not the alpha has been premultiplied in the pixel values to be translated by this ColorModel:::return
ColorModel#getTransferType():::Returns the transfer type of this ColorModel:::return
ColorModel#getPixelSize():::Returns the number of bits per pixel described by this ColorModel.:::return
ColorModel#getComponentSize(int):::Returns the number of bits for the specified color/alpha component:::if->throw->new->NullPointerException->return
ColorModel#getComponentSize():::Returns an array of the number of bits per color/alpha component:::if->return->nBits->clone->return
ColorModel#getTransparency():::Returns the transparency:::return
ColorModel#getNumComponents():::Returns the number of components, including alpha, in this ColorModel:::return
ColorModel#getNumColorComponents():::Returns the number of color components in this ColorModel:::return
ColorModel#getRed(int):::Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::
ColorModel#getGreen(int):::Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::
ColorModel#getBlue(int):::Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::
ColorModel#getAlpha(int):::Returns the alpha component for the specified pixel, scaled from 0 to 255:::
ColorModel#getRGB(int):::Returns the color/alpha components of the pixel in the default RGB color model format:::return->getAlpha->getRed->getGreen->getBlue
ColorModel#getRed(Object):::Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::pixel->length->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->if->return->getRed->else->throw->new->UnsupportedOperationException
ColorModel#getGreen(Object):::Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::pixel->length->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->if->return->getGreen->else->throw->new->UnsupportedOperationException
ColorModel#getBlue(Object):::Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::pixel->length->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->if->return->getBlue->else->throw->new->UnsupportedOperationException
ColorModel#getAlpha(Object):::Returns the alpha component for the specified pixel, scaled from 0 to 255:::pixel->length->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->if->return->getAlpha->else->throw->new->UnsupportedOperationException
ColorModel#getRGB(Object):::Returns the color/alpha components for the specified pixel in the default RGB color model format:::return->getAlpha->getRed->getGreen->getBlue
ColorModel#getDataElements(int, Object):::Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model:::throw->new->UnsupportedOperationException
ColorModel#getComponents(int, int[], int):::Returns an array of unnormalized color/alpha components given a pixel in this ColorModel:::throw->new->UnsupportedOperationException
ColorModel#getComponents(Object, int[], int):::Returns an array of unnormalized color/alpha components given a pixel in this ColorModel:::throw->new->UnsupportedOperationException
ColorModel#getUnnormalizedComponents(float[], int, int[], int):::Returns an array of all of the color/alpha components in unnormalized form, given a normalized component array:::if->throw->new->UnsupportedOperationException->if->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException->if->new->intArr->if->normAlpha->for->i->else->for->i->return
ColorModel#getNormalizedComponents(int[], int, float[], int):::Returns an array of all of the color/alpha components in normalized form, given an unnormalized component array:::if->throw->new->UnsupportedOperationException->if->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException->if->new->floatArr->if->normAlpha->if->for->i->else->for->i->else->for->i->return
ColorModel#getDataElement(int[], int):::Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components:::throw->new->UnsupportedOperationException
ColorModel#getDataElements(int[], int, Object):::Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components:::throw->new->UnsupportedOperationException
ColorModel#getDataElement(float[], int):::Returns a pixel value represented as an int in this ColorModel, given an array of normalized color/alpha components:::components->getUnnormalizedComponents->return->getDataElement
ColorModel#getDataElements(float[], int, Object):::Returns a data element array representation of a pixel in this ColorModel, given an array of normalized color/alpha components:::components->getUnnormalizedComponents->return->getDataElements
ColorModel#getNormalizedComponents(Object, float[], int):::Returns an array of all of the color/alpha components in normalized form, given a pixel in this ColorModel:::components->getComponents->return->getNormalizedComponents
ColorModel#equals(Object):::This method simply delegates to the default implementation in Object which is identical to an == test since this class cannot enforce the issues of a proper equality test among multiple independent subclass branches:::return->super->equals
ColorModel#hashCode():::This method simply delegates to the default implementation in Object which returns the system ID for the class:::return->super->hashCode
ColorModel#getColorSpace():::Returns the ColorSpace associated with this ColorModel.:::return
ColorModel#coerceData(WritableRaster, boolean):::Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel:::throw->new->UnsupportedOperationException
ColorModel#isCompatibleRaster(Raster):::Returns true if raster is compatible with this ColorModel and false if it is not:::throw->new->UnsupportedOperationException
ColorModel#createCompatibleWritableRaster(int, int):::Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel:::throw->new->UnsupportedOperationException
ColorModel#createCompatibleSampleModel(int, int):::Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel:::throw->new->UnsupportedOperationException
ColorModel#isCompatibleSampleModel(SampleModel):::Checks if the SampleModel is compatible with this ColorModel:::throw->new->UnsupportedOperationException
ColorModel#finalize():::Disposes of system resources associated with this ColorModel once this ColorModel is no longer referenced.:::
ColorModel#getAlphaRaster(WritableRaster):::Returns a Raster representing the alpha channel of an image, extracted from the input Raster, provided that pixel values of this ColorModel represent color and alpha information as separate spatial bands (e.g:::return
ColorModel#toString():::Returns the String representation of the contents of this ColorModel object.:::return->new->String
ComponentColorModel#getRed(int):::Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::return->getRGBComponent
ComponentColorModel#getGreen(int):::Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::return->getRGBComponent
ComponentColorModel#getBlue(int):::Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::return->getRGBComponent
ComponentColorModel#getAlpha(int):::Returns the alpha component for the specified pixel, scaled from 0 to 255:::if->return->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return
ComponentColorModel#getRGB(int):::Returns the color/alpha components of the pixel in the default RGB color model format:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->getAlpha->getRed->getGreen->getBlue
ComponentColorModel#getRed(Object):::Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::return->getRGBComponent
ComponentColorModel#getGreen(Object):::Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::return->getRGBComponent
ComponentColorModel#getBlue(Object):::Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::return->getRGBComponent
ComponentColorModel#getAlpha(Object):::Returns the alpha component for the specified pixel, scaled from 0 to 255:::if->return->alpha->aIdx->mask->switch->sdata->return->fdata->return->ddata->return->bdata->break->usdata->break->idata->break->throw->new->UnsupportedOperationException->if->return->else->return
ComponentColorModel#getRGB(Object):::Returns the color/alpha components for the specified pixel in the default RGB color model format:::if->initScale->if->return->getAlpha->getRed->getGreen->getBlue->else->if->gray->getRed->return->getAlpha->norm->getNormalizedComponents->rgb->colorSpace->toRGB->return->getAlpha
ComponentColorModel#getDataElements(int, Object):::Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model:::red->grn->blu->alp->if->initScale->if->switch->sdata->if->new->shortArr->else->factor->if->if->if->if->else->if->gray->if->if->else->if->gray->if->if->else->norm->new->floatArr->colorSpace->fromRGB->if->for->i->if->if->for->i->return->fdata->if->new->floatArr->else->factor->if->if->else->if->if->else->if->if->if->else->if->gray->if->if->else->norm->new->floatArr->colorSpace->fromRGB->if->if->for->i->for->i->return->ddata->if->new->doubleArr->else->if->factor->if->else->if->if->else->if->if->if->else->if->gray->if->if->else->factor->norm->new->floatArr->colorSpace->fromRGB->if->if->for->i->for->i->return->intpixel->if->else->new->intArr->if->precision->factor->if->if->else->else->if->if->else->if->if->else->if->else->if->else->else->if->gray->if->if->else->if->else->if->gray16->gray->if->if->else->if->else->norm->new->floatArr->factor->colorSpace->fromRGB->if->for->i->if->if->else->if->for->i->for->i->switch->bdata->if->new->byteArr->else->for->i->return->sdata->if->new->shortArr->else->for->i->return->if->for->i->return->throw->new->IllegalArgumentException
ComponentColorModel#getComponents(int, int[], int):::Returns an array of unnormalized color/alpha components given a pixel in this ColorModel:::if->throw->new->IllegalArgumentException->if->initScale->if->throw->new->IllegalArgumentException->if->new->intArr->return
ComponentColorModel#getComponents(Object, int[], int):::Returns an array of unnormalized color/alpha components given a pixel in this ColorModel:::intpixel->if->initScale->if->throw->new->IllegalArgumentException->if->else->DataBuffer->toIntArray->if->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException->if->new->intArr->else->if->throw->new->IllegalArgumentException->System->arraycopy->return
ComponentColorModel#getUnnormalizedComponents(float[], int, int[], int):::Returns an array of all of the color/alpha components in unnormalized form, given a normalized component array:::if->initScale->if->throw->new->IllegalArgumentException->return->super->getUnnormalizedComponents
ComponentColorModel#getNormalizedComponents(int[], int, float[], int):::Returns an array of all of the color/alpha components in normalized form, given an unnormalized component array:::if->initScale->if->throw->new->IllegalArgumentException->return->super->getNormalizedComponents
ComponentColorModel#getDataElement(int[], int):::Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components.:::if->initScale->if->if->throw->new->IllegalArgumentException->return->throw->new->IllegalArgumentException
ComponentColorModel#getDataElements(int[], int, Object):::Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components:::if->initScale->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->switch->pixel->if->new->intArr->else->System->arraycopy->return->pixel->if->new->byteArr->else->for->i->return->pixel->if->new->shortArr->else->for->i->return->throw->new->UnsupportedOperationException
ComponentColorModel#getDataElement(float[], int):::Returns a pixel value represented as an int in this ColorModel, given an array of normalized color/alpha components:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->initScale->pixel->getDataElements->switch->bpixel->return->uspixel->return->ipixel->return->throw->new->UnsupportedOperationException
ComponentColorModel#getDataElements(float[], int, Object):::Returns a data element array representation of a pixel in this ColorModel, given an array of normalized color/alpha components:::needAlpha->stdNormComponents->if->initScale->if->new->floatArr->for->c->nc->if->else->switch->bpixel->if->new->byteArr->else->if->alpha->for->c->nc->else->for->c->nc->return->uspixel->if->new->shortArr->else->if->alpha->for->c->nc->else->for->c->nc->return->ipixel->if->new->intArr->else->if->alpha->for->c->nc->else->for->c->nc->return->spixel->if->new->shortArr->else->if->alpha->for->c->nc->else->for->c->nc->return->fpixel->if->new->floatArr->else->if->alpha->for->c->nc->else->for->c->nc->return->dpixel->if->new->doubleArr->else->if->alpha->for->c->nc->else->for->c->nc->return->throw->new->UnsupportedOperationException
ComponentColorModel#getNormalizedComponents(Object, float[], int):::Returns an array of all of the color/alpha components in normalized form, given a pixel in this ColorModel:::if->new->floatArr->switch->bpixel->for->c->nc->break->uspixel->for->c->nc->break->ipixel->for->c->nc->break->spixel->for->c->nc->break->fpixel->for->c->nc->break->dpixel->for->c->nc->break->throw->new->UnsupportedOperationException->if->alpha->if->invAlpha->for->c->if->for->c->return
ComponentColorModel#coerceData(WritableRaster, boolean):::Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel:::if->return->w->raster->getWidth->h->raster->getHeight->aIdx->raster->getNumBands->normAlpha->rminX->raster->getMinX->rY->raster->getMinY->rX->if->switch->pixel->zpixel->alphaScale->for->y->break->pixel->zpixel->alphaScale->for->y->break->pixel->zpixel->alphaScale->for->y->break->pixel->zpixel->alphaScale->for->y->break->pixel->zpixel->for->y->break->pixel->zpixel->for->y->break->throw->new->UnsupportedOperationException->else->switch->pixel->alphaScale->for->y->break->pixel->alphaScale->for->y->break->pixel->alphaScale->for->y->break->pixel->alphaScale->for->y->break->pixel->for->y->break->pixel->for->y->break->throw->new->UnsupportedOperationException->if->return->new->ComponentColorModel->else->return->new->ComponentColorModel
ComponentColorModel#isCompatibleRaster(Raster):::Returns true if raster is compatible with this ColorModel; false if it is not.:::sm->raster->getSampleModel->if->if->sm->getNumBands->getNumComponents->return->for->i->return->raster->getTransferType->else->return
ComponentColorModel#createCompatibleWritableRaster(int, int):::Creates a WritableRaster with the specified width and height, that  has a data layout (SampleModel) compatible with this ColorModel.:::dataSize->raster->switch->Raster->createInterleavedRaster->break->sm->createCompatibleSampleModel->db->sm->createDataBuffer->Raster->createWritableRaster->return
ComponentColorModel#createCompatibleSampleModel(int, int):::Creates a SampleModel with the specified width and height, that  has a data layout compatible with this ColorModel.:::bandOffsets->new->intArr->for->i->switch->return->new->PixelInterleavedSampleModel->return->new->ComponentSampleModel
ComponentColorModel#isCompatibleSampleModel(SampleModel):::Checks whether or not the specified SampleModel is compatible with this ColorModel.:::if->return->if->sm->getNumBands->return->if->sm->getTransferType->return->return
ComponentColorModel#getAlphaRaster(WritableRaster):::Returns a Raster representing the alpha channel of an image, extracted from the input Raster:::if->hasAlpha->return->x->raster->getMinX->y->raster->getMinY->band->new->intArr->raster->getNumBands->return->raster->raster->getWidth->raster->getHeight->createWritableChild
ComponentColorModel#equals(Object):::Tests if the specified Object is an instance of ComponentColorModel and equals this ComponentColorModel.:::if->return->cm->if->cm->hasAlpha->cm->isAlphaPremultiplied->cm->getPixelSize->cm->getTransparency->cm->getNumComponents->colorSpace->equals->return->if->Arrays->cm->getComponentSize->equals->return->return
ComponentColorModel#hashCode():::Returns the hash code for this ComponentColorModel.:::result->if->Arrays->hashCode->hashCode->return
ComponentSampleModel#orderBands(int[], int):::Preserves band ordering with new step factor...:::map->new->intArr->ret->new->intArr->for->i->for->i->return
ComponentSampleModel#createCompatibleSampleModel(int, int):::Creates a new ComponentSampleModel with the specified width and height:::ret->size->minBandOff->maxBandOff->for->i->bands->bandOff->pStride->Math->abs->lStride->Math->abs->bStride->Math->abs->if->if->if->new->intArr->for->i->else->orderBands->else->orderBands->else->if->new->intArr->for->i->else->if->orderBands->else->orderBands->base->if->if->for->i->return->new->ComponentSampleModel
ComponentSampleModel#createSubsetSampleModel(int[]):::Creates a new ComponentSampleModel with a subset of the bands of this ComponentSampleModel:::if->throw->new->RasterFormatException->newBankIndices->new->intArr->newBandOffsets->new->intArr->for->i->return->new->ComponentSampleModel
ComponentSampleModel#createDataBuffer():::Creates a DataBuffer that corresponds to this ComponentSampleModel:::dataBuffer->size->getBufferSize->switch->new->DataBufferByte->break->new->DataBufferUShort->break->new->DataBufferShort->break->new->DataBufferInt->break->new->DataBufferFloat->break->new->DataBufferDouble->break->return
ComponentSampleModel#getOffset(int, int):::Gets the offset for the first band of pixel (x,y):::offset->return
ComponentSampleModel#getOffset(int, int, int):::Gets the offset for band b of pixel (x,y):::offset->return
ComponentSampleModel#getSampleSize():::Returns the number of bits per sample for all bands.:::sampleSize->new->intArr->sizeInBits->getSampleSize->for->i->return
ComponentSampleModel#getSampleSize(int):::Returns the number of bits per sample for the specified band.:::return->DataBuffer->getDataTypeSize
ComponentSampleModel#getBankIndices():::Returns the bank indices for all bands.:::return->bankIndices->clone
ComponentSampleModel#getBandOffsets():::Returns the band offset for all bands.:::return->bandOffsets->clone
ComponentSampleModel#getScanlineStride():::Returns the scanline stride of this ComponentSampleModel.:::return
ComponentSampleModel#getPixelStride():::Returns the pixel stride of this ComponentSampleModel.:::return
ComponentSampleModel#getNumDataElements():::Returns the number of data elements needed to transfer a pixel with the #getDataElements(int, int, Object, DataBuffer)  and #setDataElements(int, int, Object, DataBuffer)  methods:::return->getNumBands
ComponentSampleModel#getDataElements(int, int, Object, DataBuffer):::Returns data for a single pixel in a primitive array of type TransferType:::if->throw->new->ArrayIndexOutOfBoundsException->type->getTransferType->numDataElems->getNumDataElements->pixelOffset->switch->bdata->if->new->byteArr->else->for->i->break->sdata->if->new->shortArr->else->for->i->break->idata->if->new->intArr->else->for->i->break->fdata->if->new->floatArr->else->for->i->break->ddata->if->new->doubleArr->else->for->i->break->return
ComponentSampleModel#getPixel(int, int, int[], DataBuffer):::Returns all samples for the specified pixel in an int array, one sample per array element:::if->throw->new->ArrayIndexOutOfBoundsException->pixels->if->else->new->intArr->pixelOffset->for->i->return
ComponentSampleModel#getPixels(int, int, int, int, int[], DataBuffer):::Returns all samples for the specified rectangle of pixels in an int array, one sample per array element:::x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->pixels->if->else->new->intArr->lineOffset->srcOffset->for->i->return
ComponentSampleModel#getSample(int, int, int, DataBuffer):::Returns as int the sample in a specified band for the pixel located at (x,y):::if->throw->new->ArrayIndexOutOfBoundsException->sample->data->getElem->return
ComponentSampleModel#getSampleFloat(int, int, int, DataBuffer):::Returns the sample in a specified band for the pixel located at (x,y) as a float:::if->throw->new->ArrayIndexOutOfBoundsException->sample->data->getElemFloat->return
ComponentSampleModel#getSampleDouble(int, int, int, DataBuffer):::Returns the sample in a specified band for a pixel located at (x,y) as a double:::if->throw->new->ArrayIndexOutOfBoundsException->sample->data->getElemDouble->return
ComponentSampleModel#getSamples(int, int, int, int, int, int[], DataBuffer):::Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element:::if->throw->new->ArrayIndexOutOfBoundsException->samples->if->else->new->intArr->lineOffset->srcOffset->for->i->return
ComponentSampleModel#setDataElements(int, int, Object, DataBuffer):::Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType:::if->throw->new->ArrayIndexOutOfBoundsException->type->getTransferType->numDataElems->getNumDataElements->pixelOffset->switch->barray->for->i->break->sarray->for->i->break->iarray->for->i->break->farray->for->i->break->darray->for->i->break
ComponentSampleModel#setPixel(int, int, int[], DataBuffer):::Sets a pixel in the DataBuffer using an int array of samples for input:::if->throw->new->ArrayIndexOutOfBoundsException->pixelOffset->for->i
ComponentSampleModel#setPixels(int, int, int, int, int[], DataBuffer):::Sets all samples for a rectangle of pixels from an int array containing one sample per array element:::x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->lineOffset->srcOffset->for->i
ComponentSampleModel#setSample(int, int, int, int, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input:::if->throw->new->ArrayIndexOutOfBoundsException->data->setElem
ComponentSampleModel#setSample(int, int, int, float, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input:::if->throw->new->ArrayIndexOutOfBoundsException->data->setElemFloat
ComponentSampleModel#setSample(int, int, int, double, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input:::if->throw->new->ArrayIndexOutOfBoundsException->data->setElemDouble
ComponentSampleModel#setSamples(int, int, int, int, int, int[], DataBuffer):::Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element:::if->throw->new->ArrayIndexOutOfBoundsException->lineOffset->srcOffset->for->i
ConvolveOp#getEdgeCondition():::Returns the edge condition.:::return
ConvolveOp#getKernel():::Returns the Kernel.:::return->kernel->clone
ConvolveOp#filter(BufferedImage, BufferedImage):::Performs a convolution on BufferedImages:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->needToConvert->srcCM->src->getColorModel->dstCM->origDst->if->icm->icm->src->getRaster->convertToIntDiscrete->src->getColorModel->if->createCompatibleDestImage->else->dst->getColorModel->if->srcCM->getColorSpace->getType->dstCM->getColorSpace->getType->createCompatibleDestImage->dst->getColorModel->else->if->createCompatibleDestImage->dst->getColorModel->if->ImagingLib->filter->throw->new->ImagingOpException->if->ccop->new->ColorConvertOp->ccop->filter->else->if->g->origDst->createGraphics->try->g->drawImage->catch->finally->g->dispose->return
ConvolveOp#filter(Raster, WritableRaster):::Performs a convolution on Rasters:::if->createCompatibleDestRaster->else->if->throw->new->IllegalArgumentException->else->if->src->getNumBands->dst->getNumBands->throw->new->ImagingOpException->if->ImagingLib->filter->throw->new->ImagingOpException->return
ConvolveOp#createCompatibleDestImage(BufferedImage, ColorModel):::Creates a zeroed destination image with the correct size and number of bands:::image->w->src->getWidth->h->src->getHeight->wr->if->src->getColorModel->if->ColorModel->getRGBdefault->else->src->getData->createCompatibleWritableRaster->if->destCM->createCompatibleWritableRaster->destCM->isAlphaPremultiplied->new->BufferedImage->return
ConvolveOp#createCompatibleDestRaster(Raster):::Creates a zeroed destination Raster with the correct size and number of bands, given this source.:::return->src->createCompatibleWritableRaster
ConvolveOp#getBounds2D(BufferedImage):::Returns the bounding box of the filtered destination image:::return->src->getRaster->getBounds2D
ConvolveOp#getBounds2D(Raster):::Returns the bounding box of the filtered destination Raster:::return->src->getBounds
ConvolveOp#getPoint2D(Point2D, Point2D):::Returns the location of the destination point given a point in the source:::if->new->Point2D.Float->dstPt->srcPt->getX->srcPt->getY->setLocation->return
ConvolveOp#getRenderingHints():::Returns the rendering hints for this op.:::return
CropImageFilter#setProperties(Hashtable):::Passes along  the properties from the source object after adding a property indicating the cropped region:::p->props->clone->p->new->Rectangle->put->super->setProperties
CropImageFilter#setDimensions(int, int):::Override the source image's dimensions and pass the dimensions of the rectangular cropped region to the ImageConsumer:::consumer->setDimensions
CropImageFilter#setPixels(int, int, int, int, ColorModel, byte[], int, int):::Determine whether the delivered byte pixels intersect the region to be extracted and passes through only that subset of pixels that appear in the output region:::x1->if->x2->addWithoutOverflow->if->y1->if->y2->addWithoutOverflow->if->if->return->consumer->setPixels
CropImageFilter#setPixels(int, int, int, int, ColorModel, int[], int, int):::Determine if the delivered int pixels intersect the region to be extracted and pass through only that subset of pixels that appear in the output region:::x1->if->x2->addWithoutOverflow->if->y1->if->y2->addWithoutOverflow->if->if->return->consumer->setPixels
DataBuffer#getDataTypeSize(int):::Returns the size (in bits) of the data type, given a datatype tag.:::if->throw->new->IllegalArgumentException->return
DataBuffer#getDataType()::: Returns the data type of this DataBuffer.:::return
DataBuffer#getSize()::: Returns the size (in array elements) of all banks.:::return
DataBuffer#getOffset():::Returns the offset of the default bank in array elements.:::return
DataBuffer#getOffsets():::Returns the offsets (in array elements) of all the banks.:::return->offsets->clone
DataBuffer#getNumBanks():::Returns the number of banks in this DataBuffer.:::return
DataBuffer#getElem(int):::Returns the requested data array element from the first (default) bank as an integer.:::return->getElem
DataBuffer#getElem(int, int):::Returns the requested data array element from the specified bank as an integer.:::
DataBuffer#setElem(int, int):::Sets the requested data array element in the first (default) bank from the given integer.:::setElem
DataBuffer#setElem(int, int, int):::Sets the requested data array element in the specified bank from the given integer.:::
DataBuffer#getElemFloat(int):::Returns the requested data array element from the first (default) bank as a float:::return->getElem
DataBuffer#getElemFloat(int, int):::Returns the requested data array element from the specified bank as a float:::return->getElem
DataBuffer#setElemFloat(int, float):::Sets the requested data array element in the first (default) bank from the given float:::setElem
DataBuffer#setElemFloat(int, int, float):::Sets the requested data array element in the specified bank from the given float:::setElem
DataBuffer#getElemDouble(int):::Returns the requested data array element from the first (default) bank as a double:::return->getElem
DataBuffer#getElemDouble(int, int):::Returns the requested data array element from the specified bank as a double:::return->getElem
DataBuffer#setElemDouble(int, double):::Sets the requested data array element in the first (default) bank from the given double:::setElem
DataBuffer#setElemDouble(int, int, double):::Sets the requested data array element in the specified bank from the given double:::setElem
DataBufferByte#getData():::Returns the default (first) byte data array:::theTrackable->setUntrackable->return
DataBufferByte#getData(int):::Returns the data array for the specified bank:::theTrackable->setUntrackable->return
DataBufferByte#getBankData():::Returns the data arrays for all banks:::theTrackable->setUntrackable->return->bankdata->clone
DataBufferByte#getElem(int):::Returns the requested data array element from the first (default) bank.:::return
DataBufferByte#getElem(int, int):::Returns the requested data array element from the specified bank.:::return
DataBufferByte#setElem(int, int):::Sets the requested data array element in the first (default) bank to the specified value.:::theTrackable->markDirty
DataBufferByte#setElem(int, int, int):::Sets the requested data array element in the specified bank from the given integer.:::theTrackable->markDirty
DataBufferDouble#getData():::Returns the default (first) double data array:::theTrackable->setUntrackable->return
DataBufferDouble#getData(int):::Returns the data array for the specified bank:::theTrackable->setUntrackable->return
DataBufferDouble#getBankData():::Returns the data array for all banks:::theTrackable->setUntrackable->return->bankdata->clone
DataBufferDouble#getElem(int):::Returns the requested data array element from the first (default) bank as an int.:::return
DataBufferDouble#getElem(int, int):::Returns the requested data array element from the specified bank as an int.:::return
DataBufferDouble#setElem(int, int):::Sets the requested data array element in the first (default) bank to the given int.:::theTrackable->markDirty
DataBufferDouble#setElem(int, int, int):::Sets the requested data array element in the specified bank to the given int.:::theTrackable->markDirty
DataBufferDouble#getElemFloat(int):::Returns the requested data array element from the first (default) bank as a float.:::return
DataBufferDouble#getElemFloat(int, int):::Returns the requested data array element from the specified bank as a float.:::return
DataBufferDouble#setElemFloat(int, float):::Sets the requested data array element in the first (default) bank to the given float.:::theTrackable->markDirty
DataBufferDouble#setElemFloat(int, int, float):::Sets the requested data array element in the specified bank to the given float.:::theTrackable->markDirty
DataBufferDouble#getElemDouble(int):::Returns the requested data array element from the first (default) bank as a double.:::return
DataBufferDouble#getElemDouble(int, int):::Returns the requested data array element from the specified bank as a double.:::return
DataBufferDouble#setElemDouble(int, double):::Sets the requested data array element in the first (default) bank to the given double.:::theTrackable->markDirty
DataBufferDouble#setElemDouble(int, int, double):::Sets the requested data array element in the specified bank to the given double.:::theTrackable->markDirty
DataBufferFloat#getData():::Returns the default (first) float data array:::theTrackable->setUntrackable->return
DataBufferFloat#getData(int):::Returns the data array for the specified bank:::theTrackable->setUntrackable->return
DataBufferFloat#getBankData():::Returns the data array for all banks:::theTrackable->setUntrackable->return->bankdata->clone
DataBufferFloat#getElem(int):::Returns the requested data array element from the first (default) bank as an int.:::return
DataBufferFloat#getElem(int, int):::Returns the requested data array element from the specified bank as an int.:::return
DataBufferFloat#setElem(int, int):::Sets the requested data array element in the first (default) bank to the given int.:::theTrackable->markDirty
DataBufferFloat#setElem(int, int, int):::Sets the requested data array element in the specified bank to the given int.:::theTrackable->markDirty
DataBufferFloat#getElemFloat(int):::Returns the requested data array element from the first (default) bank as a float.:::return
DataBufferFloat#getElemFloat(int, int):::Returns the requested data array element from the specified bank as a float.:::return
DataBufferFloat#setElemFloat(int, float):::Sets the requested data array element in the first (default) bank to the given float.:::theTrackable->markDirty
DataBufferFloat#setElemFloat(int, int, float):::Sets the requested data array element in the specified bank to the given float.:::theTrackable->markDirty
DataBufferFloat#getElemDouble(int):::Returns the requested data array element from the first (default) bank as a double.:::return
DataBufferFloat#getElemDouble(int, int):::Returns the requested data array element from the specified bank as a double.:::return
DataBufferFloat#setElemDouble(int, double):::Sets the requested data array element in the first (default) bank to the given double.:::theTrackable->markDirty
DataBufferFloat#setElemDouble(int, int, double):::Sets the requested data array element in the specified bank to the given double.:::theTrackable->markDirty
DataBufferInt#getData():::Returns the default (first) int data array in DataBuffer:::theTrackable->setUntrackable->return
DataBufferInt#getData(int):::Returns the data array for the specified bank:::theTrackable->setUntrackable->return
DataBufferInt#getBankData():::Returns the data arrays for all banks:::theTrackable->setUntrackable->return->bankdata->clone
DataBufferInt#getElem(int):::Returns the requested data array element from the first (default) bank.:::return
DataBufferInt#getElem(int, int):::Returns the requested data array element from the specified bank.:::return
DataBufferInt#setElem(int, int):::Sets the requested data array element in the first (default) bank to the specified value.:::theTrackable->markDirty
DataBufferInt#setElem(int, int, int):::Sets the requested data array element in the specified bank to the integer value i.:::theTrackable->markDirty
DataBufferShort#getData():::Returns the default (first) byte data array:::theTrackable->setUntrackable->return
DataBufferShort#getData(int):::Returns the data array for the specified bank:::theTrackable->setUntrackable->return
DataBufferShort#getBankData():::Returns the data arrays for all banks:::theTrackable->setUntrackable->return->bankdata->clone
DataBufferShort#getElem(int):::Returns the requested data array element from the first (default) bank.:::return
DataBufferShort#getElem(int, int):::Returns the requested data array element from the specified bank.:::return
DataBufferShort#setElem(int, int):::Sets the requested data array element in the first (default) bank to the specified value.:::theTrackable->markDirty
DataBufferShort#setElem(int, int, int):::Sets the requested data array element in the specified bank from the given integer.:::theTrackable->markDirty
DataBufferUShort#getData():::Returns the default (first) unsigned-short data array:::theTrackable->setUntrackable->return
DataBufferUShort#getData(int):::Returns the data array for the specified bank:::theTrackable->setUntrackable->return
DataBufferUShort#getBankData():::Returns the data arrays for all banks:::theTrackable->setUntrackable->return->bankdata->clone
DataBufferUShort#getElem(int):::Returns the requested data array element from the first (default) bank.:::return
DataBufferUShort#getElem(int, int):::Returns the requested data array element from the specified bank.:::return
DataBufferUShort#setElem(int, int):::Sets the requested data array element in the first (default) bank to the specified value.:::theTrackable->markDirty
DataBufferUShort#setElem(int, int, int):::Sets the requested data array element in the specified bank from the given integer.:::theTrackable->markDirty
DirectColorModel#getRedMask():::Returns the mask indicating which bits in an int pixel representation contain the red color component.:::return
DirectColorModel#getGreenMask():::Returns the mask indicating which bits in an int pixel representation contain the green color component.:::return
DirectColorModel#getBlueMask():::Returns the mask indicating which bits in an int pixel representation contain the blue color component.:::return
DirectColorModel#getAlphaMask():::Returns the mask indicating which bits in an int pixel representation contain the alpha component.:::if->return->else->return
DirectColorModel#getRed(int):::Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::if->return->getsRGBComponentFromsRGB->else->if->return->getsRGBComponentFromLinearRGB->rgb->getDefaultRGBComponents->return
DirectColorModel#getGreen(int):::Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::if->return->getsRGBComponentFromsRGB->else->if->return->getsRGBComponentFromLinearRGB->rgb->getDefaultRGBComponents->return
DirectColorModel#getBlue(int):::Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::if->return->getsRGBComponentFromsRGB->else->if->return->getsRGBComponentFromLinearRGB->rgb->getDefaultRGBComponents->return
DirectColorModel#getAlpha(int):::Returns the alpha component for the specified pixel, scaled from 0 to 255:::if->return->a->if->return
DirectColorModel#getRGB(int):::Returns the color/alpha components of the pixel in the default RGB color model format:::if->return->getAlpha->getRed->getGreen->getBlue->rgb->getDefaultRGBComponents->return->getAlpha
DirectColorModel#getRed(Object):::Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::pixel->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->return->getRed
DirectColorModel#getGreen(Object):::Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::pixel->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->return->getGreen
DirectColorModel#getBlue(Object):::Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::pixel->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->return->getBlue
DirectColorModel#getAlpha(Object):::Returns the alpha component for the specified pixel, scaled from 0 to 255:::pixel->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->return->getAlpha
DirectColorModel#getRGB(Object):::Returns the color/alpha components for the specified pixel in the default RGB color model format:::pixel->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->return->getRGB
DirectColorModel#getDataElements(int, Object):::Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model:::intpixel->if->else->new->intArr->defaultCM->ColorModel->getRGBdefault->if->equals->return->red->grn->blu->alp->if->precision->factor->if->if->else->else->if->if->if->if->if->if->if->else->norm->new->floatArr->factor->colorSpace->fromRGB->if->if->for->i->if->if->if->if->if->if->switch->bdata->if->new->byteArr->else->return->sdata->if->new->shortArr->else->return->return->throw->new->UnsupportedOperationException
DirectColorModel#getComponents(int, int[], int):::Returns an array of unnormalized color/alpha components given a pixel in this ColorModel:::if->new->intArr->for->i->return
DirectColorModel#getComponents(Object, int[], int):::Returns an array of unnormalized color/alpha components given a pixel in this ColorModel:::intpixel->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->return->getComponents
DirectColorModel#createCompatibleWritableRaster(int, int):::Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel.:::if->throw->new->IllegalArgumentException->bandmasks->if->new->intArr->else->new->intArr->if->return->Raster->createPackedRaster->else->if->return->Raster->createPackedRaster->else->return->Raster->createPackedRaster
DirectColorModel#getDataElement(int[], int):::Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components:::pixel->for->i->return
DirectColorModel#getDataElements(int[], int, Object):::Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components:::pixel->for->i->switch->if->bdata->return->else->bdata->return->if->sdata->return->else->sdata->return->if->idata->return->else->idata->return->throw->new->ClassCastException
DirectColorModel#coerceData(WritableRaster, boolean):::Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel:::if->this->isAlphaPremultiplied->return->w->raster->getWidth->h->raster->getHeight->aIdx->normAlpha->alphaScale->rminX->raster->getMinX->rY->raster->getMinY->rX->pixel->zpixel->if->switch->for->y->break->for->y->break->for->y->break->throw->new->UnsupportedOperationException->else->switch->for->y->break->for->y->break->for->y->break->throw->new->UnsupportedOperationException->return->new->DirectColorModel
DirectColorModel#isCompatibleRaster(Raster):::Returns true if raster is compatible with this ColorModel and false if it is not.:::sm->raster->getSampleModel->spsm->if->else->return->if->spsm->getNumBands->getNumComponents->return->bitMasks->spsm->getBitMasks->for->i->return->raster->getTransferType
DirectColorModel#toString():::Returns a String that represents this DirectColorModel.:::return->Integer->toHexString->Integer->toHexString->Integer->toHexString->Integer->toHexString->new->String
FilteredImageSource#addConsumer(ImageConsumer):::Adds the specified ImageConsumer to the list of consumers interested in data for the filtered image:::if->new->Hashtable<>->if->proxies->containsKey->imgf->filter->getFilterInstance->proxies->put->src->addConsumer
FilteredImageSource#isConsumer(ImageConsumer):::Determines whether an ImageConsumer is on the list of consumers currently interested in data for this image:::return->proxies->containsKey
FilteredImageSource#removeConsumer(ImageConsumer):::Removes an ImageConsumer from the list of consumers interested in data for this image:::if->imgf->proxies->get->if->src->removeConsumer->proxies->remove->if->proxies->isEmpty
FilteredImageSource#startProduction(ImageConsumer):::Starts production of the filtered image:::if->new->Hashtable<>->imgf->proxies->get->if->filter->getFilterInstance->proxies->put->src->startProduction
FilteredImageSource#requestTopDownLeftRightResend(ImageConsumer):::Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order:::if->imgf->proxies->get->if->imgf->resendTopDownLeftRight
ImageConsumer#setDimensions(int, int):::The dimensions of the source image are reported using the setDimensions method call.:::
ImageConsumer#setProperties(Hashtable):::Sets the extensible list of properties associated with this image.:::
ImageConsumer#setColorModel(ColorModel):::Sets the ColorModel object used for the majority of the pixels reported using the setPixels method calls:::
ImageConsumer#setHints(int):::Sets the hints that the ImageConsumer uses to process the pixels delivered by the ImageProducer:::
ImageConsumer#setPixels(int, int, int, int, ColorModel, byte[], int, int):::Delivers the pixels of the image with one or more calls to this method:::
ImageConsumer#setPixels(int, int, int, int, ColorModel, int[], int, int):::The pixels of the image are delivered using one or more calls to the setPixels method:::
ImageConsumer#imageComplete(int):::The imageComplete method is called when the ImageProducer is finished delivering all of the pixels that the source image contains, or when a single frame of a multi-frame animation has been completed, or when an error in loading or producing the image has occurred:::
ImageFilter#getFilterInstance(ImageConsumer):::Returns a unique instance of an ImageFilter object which will actually perform the filtering for the specified ImageConsumer:::instance->clone->return
ImageFilter#setDimensions(int, int):::Filters the information provided in the setDimensions method of the ImageConsumer interface:::consumer->setDimensions
ImageFilter#setProperties(Hashtable):::Passes the properties from the source object along after adding a property indicating the stream of filters it has been run through:::p->props->clone->o->p->get->if->p->toString->put->else->if->p->toString->put->consumer->setProperties
ImageFilter#setColorModel(ColorModel):::Filter the information provided in the setColorModel method of the ImageConsumer interface:::consumer->setColorModel
ImageFilter#setHints(int):::Filters the information provided in the setHints method of the ImageConsumer interface:::consumer->setHints
ImageFilter#setPixels(int, int, int, int, ColorModel, byte[], int, int):::Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of bytes:::consumer->setPixels
ImageFilter#setPixels(int, int, int, int, ColorModel, int[], int, int):::Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of integers:::consumer->setPixels
ImageFilter#imageComplete(int):::Filters the information provided in the imageComplete method of the ImageConsumer interface:::consumer->imageComplete
ImageFilter#resendTopDownLeftRight(ImageProducer):::Responds to a request for a TopDownLeftRight (TDLR) ordered resend of the pixel data from an ImageConsumer:::ip->requestTopDownLeftRightResend
ImageFilter#clone():::Clones this object.:::try->return->super->clone->catch->throw->new->InternalError->finally
ImageObserver#imageUpdate(Image, int, int, int, int, int):::This method is called when information about an image which was previously requested using an asynchronous interface becomes available:::
ImageProducer#addConsumer(ImageConsumer):::Registers an ImageConsumer with the ImageProducer for access to the image data during a later reconstruction of the Image:::
ImageProducer#isConsumer(ImageConsumer):::Determines if a specified ImageConsumer object is currently registered with this ImageProducer as one of its consumers.:::
ImageProducer#removeConsumer(ImageConsumer):::Removes the specified ImageConsumer object from the list of consumers currently registered to receive image data:::
ImageProducer#startProduction(ImageConsumer):::Registers the specified ImageConsumer object as a consumer and starts an immediate reconstruction of the image data which will then be delivered to this consumer and any other consumer which might have already been registered with the producer:::
ImageProducer#requestTopDownLeftRightResend(ImageConsumer):::Requests, on behalf of the ImageConsumer, that the ImageProducer attempt to resend the image data one more time in TOPDOWNLEFTRIGHT order so that higher quality conversion algorithms which depend on receiving pixels in order can be used to produce a better output version of the image:::
IndexColorModel#getTransparency():::Returns the transparency:::return
IndexColorModel#getComponentSize():::Returns an array of the number of bits for each color/alpha component:::if->if->new->intArr->else->new->intArr->return->nBits->clone
IndexColorModel#getMapSize():::Returns the size of the color/alpha component arrays in this IndexColorModel.:::return
IndexColorModel#getTransparentPixel():::Returns the index of a transparent pixel in this IndexColorModel or -1 if there is no pixel with an alpha value of 0:::return
IndexColorModel#getReds(byte[]):::Copies the array of red color components into the specified array:::for->i
IndexColorModel#getGreens(byte[]):::Copies the array of green color components into the specified array:::for->i
IndexColorModel#getBlues(byte[]):::Copies the array of blue color components into the specified array:::for->i
IndexColorModel#getAlphas(byte[]):::Copies the array of alpha transparency components into the specified array:::for->i
IndexColorModel#getRGBs(int[]):::Converts data for each index from the color and alpha component arrays to an int in the default RGB ColorModel format and copies the resulting 32-bit ARGB values into the specified array:::System->arraycopy
IndexColorModel#getRed(int):::Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::return
IndexColorModel#getGreen(int):::Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::return
IndexColorModel#getBlue(int):::Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB:::return
IndexColorModel#getAlpha(int):::Returns the alpha component for the specified pixel, scaled from 0 to 255:::return
IndexColorModel#getRGB(int):::Returns the color/alpha components of the pixel in the default RGB color model format:::return
IndexColorModel#getDataElements(int, Object):::Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model:::red->green->blue->alpha->pix->for->i->if->minDist->d->gray->for->i->else->if->smallestError->lut->lutrgb->for->i->if->for->i->else->if->else->smallestError->lut->for->i->System->arraycopy->return->installpixel
IndexColorModel#getComponents(int, int[], int):::Returns an array of unnormalized color/alpha components for a specified pixel in this ColorModel:::if->new->intArr->getRed->getGreen->getBlue->if->getAlpha->return
IndexColorModel#getComponents(Object, int[], int):::Returns an array of unnormalized color/alpha components for a specified pixel in this ColorModel:::intpixel->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->return->getComponents
IndexColorModel#getDataElement(int[], int):::Returns a pixel value represented as an int in this ColorModel given an array of unnormalized color/alpha components:::rgb->if->else->inData->getDataElements->pixel->switch->bdata->break->sdata->break->idata->break->throw->new->UnsupportedOperationException->return
IndexColorModel#getDataElements(int[], int, Object):::Returns a data element array representation of a pixel in this ColorModel given an array of unnormalized color/alpha components:::rgb->if->else->return->getDataElements
IndexColorModel#createCompatibleWritableRaster(int, int):::Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel:::raster->if->Raster->createPackedRaster->else->if->Raster->createInterleavedRaster->else->if->Raster->createInterleavedRaster->else->throw->new->UnsupportedOperationException->return
IndexColorModel#isCompatibleRaster(Raster):::Returns true if raster is compatible with this ColorModel or false if it is not compatible with this ColorModel.:::size->raster->getSampleModel->getSampleSize->return->raster->getTransferType->raster->getNumBands
IndexColorModel#createCompatibleSampleModel(int, int):::Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.:::off->new->intArr->if->return->new->MultiPixelPackedSampleModel->else->return->new->ComponentSampleModel
IndexColorModel#isCompatibleSampleModel(SampleModel):::Checks if the specified SampleModel is compatible with this ColorModel:::if->return->if->sm->getTransferType->return->if->sm->getNumBands->return->return
IndexColorModel#convertToIntDiscrete(Raster, boolean):::Returns a new BufferedImage of TYPE_INT_ARGB or TYPE_INT_RGB that has a Raster with pixel data computed by expanding the indices in the source Raster using the color/alpha component arrays of this ColorModel:::cm->if->isCompatibleRaster->throw->new->IllegalArgumentException->if->ColorModel->getRGBdefault->else->if->new->DirectColorModel->else->new->DirectColorModel->w->raster->getWidth->h->raster->getHeight->discreteRaster->cm->createCompatibleWritableRaster->obj->data->rX->raster->getMinX->rY->raster->getMinY->for->y->return->new->BufferedImage
IndexColorModel#isValid(int):::Returns whether or not the pixel is valid.:::return->validBits->testBit
IndexColorModel#isValid():::Returns whether or not all of the pixels are valid.:::return
IndexColorModel#getValidPixels():::Returns a BigInteger that indicates the valid/invalid pixels in the colormap:::if->return->getAllValid->else->return
IndexColorModel#finalize():::Disposes of system resources associated with this ColorModel once this ColorModel is no longer referenced.:::
IndexColorModel#toString():::Returns the String representation of the contents of this ColorModel object.:::return->new->String
IndexColorModel#equals(Object):::Tests if the specified Object is an instance of IndexColorModel and if it equals this IndexColorModel:::if->return->cm->if->cm->hasAlpha->cm->isAlphaPremultiplied->cm->getPixelSize->cm->getTransparency->cm->getNumComponents->colorSpace->equals->return->if->Arrays->cm->getComponentSize->equals->return->testValidBits->if->else->if->return->else->if->validBits->equals->else->if->for->i->else->for->i->return
IndexColorModel#hashCode():::Returns the hash code for IndexColorModel.:::result->if->Arrays->hashCode->hashCode->Arrays->hashCode->return
Kernel#getXOrigin():::Returns the X origin of this Kernel.:::return
Kernel#getYOrigin():::Returns the Y origin of this Kernel.:::return
Kernel#getWidth():::Returns the width of this Kernel.:::return
Kernel#getHeight():::Returns the height of this Kernel.:::return
Kernel#getKernelData(float[]):::Returns the kernel data in row major order:::if->new->floatArr->else->if->throw->new->IllegalArgumentException->System->arraycopy->return
Kernel#clone():::Clones this object.:::try->return->super->clone->catch->throw->new->InternalError->finally
LookupOp#getTable():::Returns the LookupTable.:::return
LookupOp#filter(BufferedImage, BufferedImage):::Performs a lookup operation on a BufferedImage:::srcCM->src->getColorModel->numBands->srcCM->getNumColorComponents->dstCM->if->throw->new->IllegalArgumentException->numComponents->ltable->getNumComponents->if->srcCM->getNumComponents->srcCM->getNumColorComponents->throw->new->IllegalArgumentException->needToConvert->width->src->getWidth->height->src->getHeight->if->createCompatibleDestImage->else->if->dst->getWidth->throw->dst->getWidth->new->IllegalArgumentException->if->dst->getHeight->throw->dst->getHeight->new->IllegalArgumentException->dst->getColorModel->if->srcCM->getColorSpace->getType->dstCM->getColorSpace->getType->createCompatibleDestImage->origDst->if->ImagingLib->filter->srcRaster->src->getRaster->dstRaster->dst->getRaster->if->srcCM->hasAlpha->if->minx->srcRaster->getMinX->miny->srcRaster->getMinY->bands->new->intArr->for->i->srcRaster->srcRaster->getWidth->srcRaster->getHeight->createWritableChild->if->dstCM->hasAlpha->dstNumBands->dstRaster->getNumBands->if->minx->dstRaster->getMinX->miny->dstRaster->getMinY->bands->new->intArr->for->i->dstRaster->dstRaster->getWidth->dstRaster->getHeight->createWritableChild->filter->if->ccop->new->ColorConvertOp->ccop->filter->return
LookupOp#filter(Raster, WritableRaster):::Performs a lookup operation on a Raster:::numBands->src->getNumBands->height->src->getHeight->width->src->getWidth->srcPix->new->intArr->if->createCompatibleDestRaster->else->if->dst->getHeight->dst->getWidth->throw->new->IllegalArgumentException->dstLength->dst->getNumBands->if->throw->new->IllegalArgumentException->numComponents->ltable->getNumComponents->if->src->getNumBands->throw->new->IllegalArgumentException->if->ImagingLib->filter->return->if->byteFilter->else->if->shortFilter->else->sminX->src->getMinX->sY->src->getMinY->dminX->dst->getMinX->dY->dst->getMinY->for->y->return
LookupOp#getBounds2D(BufferedImage):::Returns the bounding box of the filtered destination image:::return->src->getRaster->getBounds2D
LookupOp#getBounds2D(Raster):::Returns the bounding box of the filtered destination Raster:::return->src->getBounds
LookupOp#createCompatibleDestImage(BufferedImage, ColorModel):::Creates a zeroed destination image with the correct size and number of bands:::image->w->src->getWidth->h->src->getHeight->transferType->if->cm->src->getColorModel->raster->src->getRaster->if->db->raster->getDataBuffer->hasAlpha->cm->hasAlpha->isPre->cm->isAlphaPremultiplied->trans->cm->getTransparency->nbits->if->if->db->getDataType->if->new->intArr->if->else->else->new->intArr->else->if->if->db->getDataType->if->new->intArr->if->else->else->new->intArr->if->cm->getColorSpace->new->ComponentColorModel->cm->createCompatibleWritableRaster->cm->isAlphaPremultiplied->new->BufferedImage->else->destCM->createCompatibleWritableRaster->destCM->isAlphaPremultiplied->new->BufferedImage->return
LookupOp#createCompatibleDestRaster(Raster):::Creates a zeroed-destination Raster with the correct size and number of bands, given this source.:::return->src->createCompatibleWritableRaster
LookupOp#getPoint2D(Point2D, Point2D):::Returns the location of the destination point given a point in the source:::if->new->Point2D.Float->dstPt->srcPt->getX->srcPt->getY->setLocation->return
LookupOp#getRenderingHints():::Returns the rendering hints for this op.:::return
LookupTable#getNumComponents():::Returns the number of components in the lookup table.:::return
LookupTable#getOffset():::Returns the offset.:::return
LookupTable#lookupPixel(int[], int[]):::Returns an int array of components for one pixel:::
MemoryImageSource#addConsumer(ImageConsumer):::Adds an ImageConsumer to the list of consumers interested in data for this image.:::if->theConsumers->contains->return->theConsumers->addElement->try->initConsumer->sendPixels->if->isConsumer->ic->imageComplete->if->isConsumer->ic->imageComplete->removeConsumer->catch->if->isConsumer->ic->imageComplete->finally
MemoryImageSource#isConsumer(ImageConsumer):::Determines if an ImageConsumer is on the list of consumers currently interested in data for this image.:::return->theConsumers->contains
MemoryImageSource#removeConsumer(ImageConsumer):::Removes an ImageConsumer from the list of consumers interested in data for this image.:::theConsumers->removeElement
MemoryImageSource#startProduction(ImageConsumer):::Adds an ImageConsumer to the list of consumers interested in data for this image and immediately starts delivery of the image data through the ImageConsumer interface.:::addConsumer
MemoryImageSource#requestTopDownLeftRightResend(ImageConsumer):::Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order.:::
MemoryImageSource#setAnimated(boolean):::Changes this memory image into a multi-frame animation or a single-frame static image depending on the animated parameter:::if->enum_->theConsumers->elements->while->enum_->hasMoreElements->ic->enum_->nextElement->ic->imageComplete->if->isConsumer->ic->imageComplete->theConsumers->removeAllElements
MemoryImageSource#setFullBufferUpdates(boolean):::Specifies whether this animated memory image should always be updated by sending the complete buffer of pixels whenever there is a change:::if->return->if->enum_->theConsumers->elements->while->enum_->hasMoreElements->ic->enum_->nextElement->ic->setHints
MemoryImageSource#newPixels():::Sends a whole new buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete:::newPixels
MemoryImageSource#newPixels(int, int, int, int):::Sends a rectangular region of the buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete:::newPixels
MemoryImageSource#newPixels(int, int, int, int, boolean):::Sends a rectangular region of the buffer of pixels to any ImageConsumers that are currently interested in the data for this image:::if->if->else->if->if->if->if->if->return->enum_->theConsumers->elements->while->enum_->hasMoreElements->ic->enum_->nextElement->if->sendPixels->if->isConsumer->ic->imageComplete
MemoryImageSource#newPixels(byte[], ColorModel, int, int):::Changes to a new byte array to hold the pixels for this image:::newPixels
MemoryImageSource#newPixels(int[], ColorModel, int, int):::Changes to a new int array to hold the pixels for this image:::newPixels
MultiPixelPackedSampleModel#createCompatibleSampleModel(int, int):::Creates a new MultiPixelPackedSampleModel with the specified width and height:::sampleModel->new->MultiPixelPackedSampleModel->return
MultiPixelPackedSampleModel#createDataBuffer():::Creates a DataBuffer that corresponds to this MultiPixelPackedSampleModel:::dataBuffer->size->switch->new->DataBufferByte->break->new->DataBufferUShort->break->new->DataBufferInt->break->return
MultiPixelPackedSampleModel#getNumDataElements():::Returns the number of data elements needed to transfer one pixel via the #getDataElements and #setDataElements methods:::return
MultiPixelPackedSampleModel#getSampleSize():::Returns the number of bits per sample for all bands.:::sampleSize->return
MultiPixelPackedSampleModel#getSampleSize(int):::Returns the number of bits per sample for the specified band.:::return
MultiPixelPackedSampleModel#getOffset(int, int):::Returns the offset of pixel (x,&nbsp;y) in data array elements.:::offset->return
MultiPixelPackedSampleModel#getBitOffset(int)::: Returns the offset, in bits, into the data element in which it is  stored for the xth pixel of a scanline:::return
MultiPixelPackedSampleModel#getScanlineStride():::Returns the scanline stride.:::return
MultiPixelPackedSampleModel#getPixelBitStride():::Returns the pixel bit stride in bits:::return
MultiPixelPackedSampleModel#getDataBitOffset():::Returns the data bit offset in bits.:::return
MultiPixelPackedSampleModel#getTransferType()::: Returns the TransferType used to transfer pixels by way of the  getDataElements and setDataElements  methods:::if->return->else->if->return->else->return
MultiPixelPackedSampleModel#createSubsetSampleModel(int[]):::Creates a new MultiPixelPackedSampleModel with a subset of the bands of this MultiPixelPackedSampleModel:::if->if->throw->new->RasterFormatException->sm->createCompatibleSampleModel->return
MultiPixelPackedSampleModel#getSample(int, int, int, DataBuffer):::Returns as int the sample in a specified band for the pixel located at (x,&nbsp;y):::if->throw->new->ArrayIndexOutOfBoundsException->bitnum->element->data->getElem->shift->return
MultiPixelPackedSampleModel#setSample(int, int, int, int, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,&nbsp;y) in the DataBuffer using an int for input:::if->throw->new->ArrayIndexOutOfBoundsException->bitnum->index->shift->element->data->getElem->data->setElem
MultiPixelPackedSampleModel#getDataElements(int, int, Object, DataBuffer):::Returns data for a single pixel in a primitive array of type TransferType:::if->throw->new->ArrayIndexOutOfBoundsException->type->getTransferType->bitnum->shift->element->switch->bdata->if->new->byteArr->else->data->getElem->break->sdata->if->new->shortArr->else->data->getElem->break->idata->if->new->intArr->else->data->getElem->break->return
MultiPixelPackedSampleModel#getPixel(int, int, int[], DataBuffer):::Returns the specified single band pixel in the first element of an int array:::if->throw->new->ArrayIndexOutOfBoundsException->pixels->if->else->new->intArr->bitnum->element->data->getElem->shift->return
MultiPixelPackedSampleModel#setDataElements(int, int, Object, DataBuffer):::Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType:::if->throw->new->ArrayIndexOutOfBoundsException->type->getTransferType->bitnum->index->shift->element->data->getElem->switch->barray->data->setElem->break->sarray->data->setElem->break->iarray->data->setElem->break
MultiPixelPackedSampleModel#setPixel(int, int, int[], DataBuffer):::Sets a pixel in the DataBuffer using an int array for input:::if->throw->new->ArrayIndexOutOfBoundsException->bitnum->index->shift->element->data->getElem->data->setElem
MultiResolutionImage#getResolutionVariant(double, double):::Gets a specific image that is the best variant to represent this logical image at the indicated size.:::
MultiResolutionImage#getResolutionVariants():::Gets a readable list of all resolution variants:::
PackedColorModel#getMask(int):::Returns the mask indicating which bits in a pixel contain the specified color/alpha sample:::return
PackedColorModel#getMasks():::Returns a mask array indicating which bits in a pixel contain the color and alpha samples.:::return->maskArray->clone
PackedColorModel#createCompatibleSampleModel(int, int):::Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.:::return->new->SinglePixelPackedSampleModel
PackedColorModel#isCompatibleSampleModel(SampleModel):::Checks if the specified SampleModel is compatible with this ColorModel:::if->return->if->sm->getNumBands->return->if->sm->getTransferType->return->sppsm->bitMasks->sppsm->getBitMasks->if->return->maxMask->DataBuffer->getDataTypeSize->for->i->return
PackedColorModel#getAlphaRaster(WritableRaster):::Returns a WritableRaster representing the alpha channel of an image, extracted from the input WritableRaster:::if->hasAlpha->return->x->raster->getMinX->y->raster->getMinY->band->new->intArr->raster->getNumBands->return->raster->raster->getWidth->raster->getHeight->createWritableChild
PackedColorModel#equals(Object):::Tests if the specified Object is an instance of PackedColorModel and equals this PackedColorModel.:::if->return->cm->if->cm->hasAlpha->cm->isAlphaPremultiplied->cm->getPixelSize->cm->getTransparency->cm->getNumComponents->colorSpace->equals->return->numC->cm->getNumComponents->for->i->if->Arrays->cm->getComponentSize->equals->return->return
PackedColorModel#hashCode():::Returns the hash code for this PackedColorModel.:::result->if->Arrays->hashCode->hashCode->Arrays->hashCode->return
PixelGrabber#startGrabbing():::Request the PixelGrabber to start fetching the pixels.:::if->return->if->producer->startProduction
PixelGrabber#abortGrabbing():::Request the PixelGrabber to abort the image fetch.:::imageComplete
PixelGrabber#grabPixels():::Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered.:::return->grabPixels
PixelGrabber#grabPixels(long):::Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered or until the specified timeout has elapsed:::if->return->end->System->currentTimeMillis->if->producer->startProduction->while->timeout->if->else->System->currentTimeMillis->if->break->wait->return
PixelGrabber#getStatus():::Return the status of the pixels:::return
PixelGrabber#getWidth():::Get the width of the pixel buffer (after adjusting for image width):::return
PixelGrabber#getHeight():::Get the height of the pixel buffer (after adjusting for image height):::return
PixelGrabber#getPixels():::Get the pixel buffer:::return
PixelGrabber#getColorModel():::Get the ColorModel for the pixels stored in the array:::return
PixelGrabber#setDimensions(int, int):::The setDimensions method is part of the ImageConsumer API which this class must implement to retrieve the pixels:::if->if->if->imageComplete->else->if->ColorModel->getRGBdefault->new->intArr
PixelGrabber#setHints(int):::The setHints method is part of the ImageConsumer API which this class must implement to retrieve the pixels:::return
PixelGrabber#setProperties(Hashtable):::The setProperties method is part of the ImageConsumer API which this class must implement to retrieve the pixels:::return
PixelGrabber#setColorModel(ColorModel):::The setColorModel method is part of the ImageConsumer API which this class must implement to retrieve the pixels:::return
PixelGrabber#setPixels(int, int, int, int, ColorModel, byte[], int, int):::The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels:::if->diff->if->return->if->if->return->if->diff->if->return->if->if->return->dstPtr->if->if->new->byteArr->else->if->convertToRGB->if->for->h->if->dstRem->srcRem->for->h
PixelGrabber#setPixels(int, int, int, int, ColorModel, int[], int, int):::The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels:::if->diff->if->return->if->if->return->if->diff->if->return->if->if->return->if->if->new->intArr->else->convertToRGB->dstPtr->if->for->h->else->if->ColorModel->getRGBdefault->convertToRGB->dstRem->srcRem->for->h
PixelGrabber#imageComplete(int):::The imageComplete method is part of the ImageConsumer API which this class must implement to retrieve the pixels:::switch->break->break->break->break->producer->removeConsumer->notifyAll
PixelGrabber#status():::Returns the status of the pixels:::return
PixelInterleavedSampleModel#createCompatibleSampleModel(int, int):::Creates a new PixelInterleavedSampleModel with the specified width and height:::minBandoff->numBands->for->i->bandOff->if->new->intArr->for->i->else->return->new->PixelInterleavedSampleModel
PixelInterleavedSampleModel#createSubsetSampleModel(int[]):::Creates a new PixelInterleavedSampleModel with a subset of the bands of this PixelInterleavedSampleModel:::newBandOffsets->new->intArr->for->i->return->new->PixelInterleavedSampleModel
Raster#createInterleavedRaster(int, int, int, int, Point):::Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, and number of bands:::bandOffsets->new->intArr->for->i->return->createInterleavedRaster
Raster#createInterleavedRaster(int, int, int, int, int, int[], Point):::Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, scanline stride, pixel stride, and band offsets:::d->size->switch->new->DataBufferByte->break->new->DataBufferUShort->break->throw->new->IllegalArgumentException->return->createInterleavedRaster
Raster#createBandedRaster(int, int, int, int, Point):::Creates a Raster based on a BandedSampleModel with the specified data type, width, height, and number of bands:::if->throw->new->ArrayIndexOutOfBoundsException->bankIndices->new->intArr->bandOffsets->new->intArr->for->i->return->createBandedRaster
Raster#createBandedRaster(int, int, int, int, int[], int[], Point):::Creates a Raster based on a BandedSampleModel with the specified data type, width, height, scanline stride, bank indices and band offsets:::d->bands->if->throw->new->ArrayIndexOutOfBoundsException->if->throw->new->ArrayIndexOutOfBoundsException->maxBank->maxBandOff->for->i->banks->size->switch->new->DataBufferByte->break->new->DataBufferUShort->break->new->DataBufferInt->break->throw->new->IllegalArgumentException->return->createBandedRaster
Raster#createPackedRaster(int, int, int, int[], Point):::Creates a Raster based on a SinglePixelPackedSampleModel with the specified data type, width, height, and band masks:::d->switch->new->DataBufferByte->break->new->DataBufferUShort->break->new->DataBufferInt->break->throw->new->IllegalArgumentException->return->createPackedRaster
Raster#createPackedRaster(int, int, int, int, int, Point):::Creates a Raster based on a packed SampleModel with the specified data type, width, height, number of bands, and bits per band:::d->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->masks->new->intArr->mask->shift->if->DataBuffer->getDataTypeSize->throw->new->IllegalArgumentException->switch->break->throw->new->IllegalArgumentException->for->i->return->createPackedRaster->else->fw->switch->Math->ceil->new->DataBufferByte->break->Math->ceil->new->DataBufferUShort->break->Math->ceil->new->DataBufferInt->break->throw->new->IllegalArgumentException->return->createPackedRaster
Raster#createInterleavedRaster(DataBuffer, int, int, int, int, int[], Point):::Creates a Raster based on a PixelInterleavedSampleModel with the specified DataBuffer, width, height, scanline stride, pixel stride, and band offsets:::if->throw->new->NullPointerException->if->new->Point->dataType->dataBuffer->getDataType->csm->new->PixelInterleavedSampleModel->switch->if->return->new->ByteInterleavedRaster->break->if->return->new->ShortInterleavedRaster->break->throw->new->IllegalArgumentException->return->new->SunWritableRaster
Raster#createBandedRaster(DataBuffer, int, int, int, int[], int[], Point):::Creates a Raster based on a BandedSampleModel with the specified DataBuffer, width, height, scanline stride, bank indices, and band offsets:::if->throw->new->NullPointerException->if->new->Point->dataType->dataBuffer->getDataType->bands->if->throw->new->IllegalArgumentException->bsm->new->BandedSampleModel->switch->if->return->new->ByteBandedRaster->break->if->return->new->ShortBandedRaster->break->break->throw->new->IllegalArgumentException->return->new->SunWritableRaster
Raster#createPackedRaster(DataBuffer, int, int, int, int[], Point):::Creates a Raster based on a SinglePixelPackedSampleModel with the specified DataBuffer, width, height, scanline stride, and band masks:::if->throw->new->NullPointerException->if->new->Point->dataType->dataBuffer->getDataType->sppsm->new->SinglePixelPackedSampleModel->switch->if->return->new->ByteInterleavedRaster->break->if->return->new->ShortInterleavedRaster->break->if->return->new->IntegerInterleavedRaster->break->throw->new->IllegalArgumentException->return->new->SunWritableRaster
Raster#createPackedRaster(DataBuffer, int, int, int, Point):::Creates a Raster based on a MultiPixelPackedSampleModel with the specified DataBuffer, width, height, and bits per pixel:::if->throw->new->NullPointerException->if->new->Point->dataType->dataBuffer->getDataType->if->throw->new->IllegalArgumentException->if->dataBuffer->getNumBanks->throw->new->RasterFormatException->mppsm->new->MultiPixelPackedSampleModel->if->return->new->BytePackedRaster->else->return->new->SunWritableRaster
Raster#createRaster(SampleModel, DataBuffer, Point)::: Creates a Raster with the specified SampleModel and DataBuffer:::if->throw->new->NullPointerException->if->new->Point->dataType->sm->getDataType->if->switch->if->return->new->ByteInterleavedRaster->break->if->return->new->ShortInterleavedRaster->break->else->if->switch->if->return->new->ByteInterleavedRaster->break->if->return->new->ShortInterleavedRaster->break->if->return->new->IntegerInterleavedRaster->break->else->if->sm->getSampleSize->return->new->BytePackedRaster->return->new->Raster
Raster#createWritableRaster(SampleModel, Point)::: Creates a WritableRaster with the specified SampleModel:::if->new->Point->return->sm->createDataBuffer->createWritableRaster
Raster#createWritableRaster(SampleModel, DataBuffer, Point)::: Creates a WritableRaster with the specified SampleModel and DataBuffer:::if->throw->new->NullPointerException->if->new->Point->dataType->sm->getDataType->if->switch->if->return->new->ByteInterleavedRaster->break->if->return->new->ShortInterleavedRaster->break->else->if->switch->if->return->new->ByteInterleavedRaster->break->if->return->new->ShortInterleavedRaster->break->if->return->new->IntegerInterleavedRaster->break->else->if->sm->getSampleSize->return->new->BytePackedRaster->return->new->SunWritableRaster
Raster#getParent():::Returns the parent Raster (if any) of this Raster or null.:::return
Raster#getSampleModelTranslateX():::Returns the X translation from the coordinate system of the SampleModel to that of the Raster:::return
Raster#getSampleModelTranslateY():::Returns the Y translation from the coordinate system of the SampleModel to that of the Raster:::return
Raster#createCompatibleWritableRaster():::Create a compatible WritableRaster the same size as this Raster with the same SampleModel and a new initialized DataBuffer.:::return->new->Point->new->SunWritableRaster
Raster#createCompatibleWritableRaster(int, int):::Create a compatible WritableRaster with the specified size, a new SampleModel, and a new initialized DataBuffer.:::if->throw->new->RasterFormatException->sm->sampleModel->createCompatibleSampleModel->return->new->Point->new->SunWritableRaster
Raster#createCompatibleWritableRaster(Rectangle):::Create a compatible WritableRaster with location (minX, minY) and size (width, height) specified by rect, a new SampleModel, and a new initialized DataBuffer.:::if->throw->new->NullPointerException->return->createCompatibleWritableRaster
Raster#createCompatibleWritableRaster(int, int, int, int):::Create a compatible WritableRaster with the specified location (minX, minY) and size (width, height), a new SampleModel, and a new initialized DataBuffer.:::ret->createCompatibleWritableRaster->return->ret->createWritableChild
Raster#createTranslatedChild(int, int):::Create a Raster with the same size, SampleModel and DataBuffer as this one, but with a different location:::return->createChild
Raster#createChild(int, int, int, int, int, int, int[]):::Returns a new Raster which shares all or part of this Raster's DataBuffer:::if->throw->new->RasterFormatException->if->throw->new->RasterFormatException->if->throw->new->RasterFormatException->if->throw->new->RasterFormatException->subSampleModel->if->else->sampleModel->createSubsetSampleModel->deltaX->deltaY->return->getDataBuffer->new->Rectangle->new->Point->new->Raster
Raster#getBounds():::Returns the bounding Rectangle of this Raster:::return->new->Rectangle
Raster#getMinX():::Returns the minimum valid X coordinate of the Raster.:::return
Raster#getMinY():::Returns the minimum valid Y coordinate of the Raster.:::return
Raster#getWidth():::Returns the width in pixels of the Raster.:::return
Raster#getHeight():::Returns the height in pixels of the Raster.:::return
Raster#getNumBands():::Returns the number of bands (samples per pixel) in this Raster.:::return
Raster#getNumDataElements()::: Returns the number of data elements needed to transfer one pixel  via the getDataElements and setDataElements methods:::return->sampleModel->getNumDataElements
Raster#getTransferType()::: Returns the TransferType used to transfer pixels via the  getDataElements and setDataElements methods:::return->sampleModel->getTransferType
Raster#getDataBuffer():::Returns the DataBuffer associated with this Raster.:::return
Raster#getSampleModel():::Returns the SampleModel that describes the layout of the image data.:::return
Raster#getDataElements(int, int, Object):::Returns data for a single pixel in a primitive array of type TransferType:::return->sampleModel->getDataElements
Raster#getDataElements(int, int, int, int, Object):::Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType:::return->sampleModel->getDataElements
Raster#getPixel(int, int, int[]):::Returns the samples in an array of int for the specified pixel:::return->sampleModel->getPixel
Raster#getPixel(int, int, float[]):::Returns the samples in an array of float for the specified pixel:::return->sampleModel->getPixel
Raster#getPixel(int, int, double[]):::Returns the samples in an array of double for the specified pixel:::return->sampleModel->getPixel
Raster#getPixels(int, int, int, int, int[]):::Returns an int array containing all samples for a rectangle of pixels, one sample per array element:::return->sampleModel->getPixels
Raster#getPixels(int, int, int, int, float[]):::Returns a float array containing all samples for a rectangle of pixels, one sample per array element:::return->sampleModel->getPixels
Raster#getPixels(int, int, int, int, double[]):::Returns a double array containing all samples for a rectangle of pixels, one sample per array element:::return->sampleModel->getPixels
Raster#getSample(int, int, int):::Returns the sample in a specified band for the pixel located at (x,y) as an int:::return->sampleModel->getSample
Raster#getSampleFloat(int, int, int):::Returns the sample in a specified band for the pixel located at (x,y) as a float:::return->sampleModel->getSampleFloat
Raster#getSampleDouble(int, int, int):::Returns the sample in a specified band for a pixel located at (x,y) as a double:::return->sampleModel->getSampleDouble
Raster#getSamples(int, int, int, int, int, int[]):::Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element:::return->sampleModel->getSamples
Raster#getSamples(int, int, int, int, int, float[]):::Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element:::return->sampleModel->getSamples
Raster#getSamples(int, int, int, int, int, double[]):::Returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element:::return->sampleModel->getSamples
RasterOp#filter(Raster, WritableRaster):::Performs a single-input/single-output operation from a source Raster to a destination Raster:::
RasterOp#getBounds2D(Raster):::Returns the bounding box of the filtered destination Raster:::
RasterOp#createCompatibleDestRaster(Raster):::Creates a zeroed destination Raster with the correct size and number of bands:::
RasterOp#getPoint2D(Point2D, Point2D):::Returns the location of the destination point given a point in the source Raster:::
RasterOp#getRenderingHints():::Returns the rendering hints for this RasterOp:::
RenderedImage#getSources():::Returns a vector of RenderedImages that are the immediate sources of image data for this RenderedImage:::
RenderedImage#getProperty(String):::Gets a property from the property set of this image:::
RenderedImage#getPropertyNames():::Returns an array of names recognized by #getProperty(String) getProperty(String) or null, if no property names are recognized.:::
RenderedImage#getColorModel():::Returns the ColorModel associated with this image:::
RenderedImage#getSampleModel():::Returns the SampleModel associated with this image:::
RenderedImage#getWidth():::Returns the width of the RenderedImage.:::
RenderedImage#getHeight():::Returns the height of the RenderedImage.:::
RenderedImage#getMinX():::Returns the minimum X coordinate (inclusive) of the RenderedImage.:::
RenderedImage#getMinY():::Returns the minimum Y coordinate (inclusive) of the RenderedImage.:::
RenderedImage#getNumXTiles():::Returns the number of tiles in the X direction.:::
RenderedImage#getNumYTiles():::Returns the number of tiles in the Y direction.:::
RenderedImage#getMinTileX()::: Returns the minimum tile index in the X direction.:::
RenderedImage#getMinTileY()::: Returns the minimum tile index in the Y direction.:::
RenderedImage#getTileWidth()::: Returns the tile width in pixels:::
RenderedImage#getTileHeight()::: Returns the tile height in pixels:::
RenderedImage#getTileGridXOffset():::Returns the X offset of the tile grid relative to the origin, i.e., the X coordinate of the upper-left pixel of tile (0, 0):::
RenderedImage#getTileGridYOffset():::Returns the Y offset of the tile grid relative to the origin, i.e., the Y coordinate of the upper-left pixel of tile (0, 0):::
RenderedImage#getTile(int, int):::Returns tile (tileX, tileY):::
RenderedImage#getData():::Returns the image as one large tile (for tile based images this will require fetching the whole image and copying the image data over):::
RenderedImage#getData(Rectangle):::Computes and returns an arbitrary region of the RenderedImage:::
RenderedImage#copyData(WritableRaster):::Computes an arbitrary rectangular region of the RenderedImage and copies it into a caller-supplied WritableRaster:::
ReplicateScaleFilter#setProperties(Hashtable):::Passes along the properties from the source object after adding a property indicating the scale applied:::p->props->clone->key->val->o->p->get->if->p->put->super->setProperties
ReplicateScaleFilter#setDimensions(int, int):::Override the dimensions of the source image and pass the dimensions of the new scaled size to the ImageConsumer:::if->if->else->else->if->consumer->setDimensions
ReplicateScaleFilter#setPixels(int, int, int, int, ColorModel, byte[], int, int):::Choose which rows and columns of the delivered byte pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary:::if->calculateMaps->sx->sy->dx1->dy1->outpix->if->else->new->byteArr->for->dy
ReplicateScaleFilter#setPixels(int, int, int, int, ColorModel, int[], int, int):::Choose which rows and columns of the delivered int pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary:::if->calculateMaps->sx->sy->dx1->dy1->outpix->if->else->new->intArr->for->dy
RescaleOp#getScaleFactors(float[]):::Returns the scale factors in the given array:::if->return->clone->System->Math->min->arraycopy->return
RescaleOp#getOffsets(float[]):::Returns the offsets in the given array:::if->return->clone->System->Math->min->arraycopy->return
RescaleOp#getNumFactors():::Returns the number of scaling factors and offsets used in this RescaleOp.:::return
RescaleOp#filter(BufferedImage, BufferedImage):::Rescales the source BufferedImage:::srcCM->src->getColorModel->dstCM->numSrcColorComp->srcCM->getNumColorComponents->scaleConst->if->throw->new->IllegalArgumentException->if->srcCM->getNumComponents->throw->new->IllegalArgumentException->needToConvert->needToDraw->if->srcCM->hasAlpha->width->src->getWidth->height->src->getHeight->origDst->if->createCompatibleDestImage->else->if->dst->getWidth->throw->dst->getWidth->new->IllegalArgumentException->if->dst->getHeight->throw->dst->getHeight->new->IllegalArgumentException->dst->getColorModel->if->srcCM->getColorSpace->getType->dstCM->getColorSpace->getType->createCompatibleDestImage->if->ImagingLib->filter->if->src->getRaster->getNumBands->dst->getRaster->getNumBands->createCompatibleDestImage->srcRaster->src->getRaster->dstRaster->dst->getRaster->filterRasterImpl->if->g->origDst->createGraphics->g->setComposite->g->drawImage->g->dispose->if->ccop->new->ColorConvertOp->ccop->filter->return
RescaleOp#filter(Raster, WritableRaster):::Rescales the pixel data in the source Raster:::return->filterRasterImpl
RescaleOp#getBounds2D(BufferedImage):::Returns the bounding box of the rescaled destination image:::return->src->getRaster->getBounds2D
RescaleOp#getBounds2D(Raster):::Returns the bounding box of the rescaled destination Raster:::return->src->getBounds
RescaleOp#createCompatibleDestImage(BufferedImage, ColorModel):::Creates a zeroed destination image with the correct size and number of bands.:::image->if->cm->src->getColorModel->src->getRaster->createCompatibleWritableRaster->cm->isAlphaPremultiplied->new->BufferedImage->else->w->src->getWidth->h->src->getHeight->destCM->createCompatibleWritableRaster->destCM->isAlphaPremultiplied->new->BufferedImage->return
RescaleOp#createCompatibleDestRaster(Raster):::Creates a zeroed-destination Raster with the correct size and number of bands, given this source.:::return->src->src->getWidth->src->getHeight->createCompatibleWritableRaster
RescaleOp#getPoint2D(Point2D, Point2D):::Returns the location of the destination point given a point in the source:::if->new->Point2D.Float->dstPt->srcPt->getX->srcPt->getY->setLocation->return
RescaleOp#getRenderingHints():::Returns the rendering hints for this op.:::return
RGBImageFilter#setColorModel(ColorModel):::If the ColorModel is an IndexColorModel and the subclass has set the canFilterIndexColorModel flag to true, we substitute a filtered version of the color model here and wherever that original ColorModel object appears in the setPixels methods:::if->newcm->filterIndexColorModel->substituteColorModel->consumer->setColorModel->else->consumer->ColorModel->getRGBdefault->setColorModel
RGBImageFilter#substituteColorModel(ColorModel, ColorModel):::Registers two ColorModel objects for substitution:::
RGBImageFilter#filterIndexColorModel(IndexColorModel):::Filters an IndexColorModel object by running each entry in its color tables through the filterRGB function that RGBImageFilter subclasses must provide:::mapsize->icm->getMapSize->r->new->byteArr->g->new->byteArr->b->new->byteArr->a->new->byteArr->icm->getReds->icm->getGreens->icm->getBlues->icm->getAlphas->trans->icm->getTransparentPixel->needalpha->for->i->if->return->icm->getPixelSize->new->IndexColorModel->else->return->icm->getPixelSize->new->IndexColorModel
RGBImageFilter#filterRGBPixels(int, int, int, int, int[], int, int):::Filters a buffer of pixels in the default RGB ColorModel by passing them one by one through the filterRGB method.:::index->for->cy->consumer->ColorModel->getRGBdefault->setPixels
RGBImageFilter#setPixels(int, int, int, int, ColorModel, byte[], int, int):::If the ColorModel object is the same one that has already been converted, then simply passes the pixels through with the converted ColorModel:::if->consumer->setPixels->else->filteredpixels->new->intArr->index->for->cy
RGBImageFilter#setPixels(int, int, int, int, ColorModel, int[], int, int):::If the ColorModel object is the same one that has already been converted, then simply passes the pixels through with the converted ColorModel, otherwise converts the buffer of integer pixels to the default RGB ColorModel and passes the converted buffer to the filterRGBPixels method to be converted one by one:::if->consumer->setPixels->else->filteredpixels->new->intArr->index->for->cy
RGBImageFilter#filterRGB(int, int, int):::Subclasses must specify a method to convert a single input pixel in the default RGB ColorModel to a single output pixel.:::
SampleModel#getWidth():::Returns the width in pixels.:::return
SampleModel#getHeight():::Returns the height in pixels.:::return
SampleModel#getNumBands():::Returns the total number of bands of image data.:::return
SampleModel#getNumDataElements():::Returns the number of data elements needed to transfer a pixel  via the getDataElements and setDataElements methods:::
SampleModel#getDataType():::Returns the data type of the DataBuffer storing the pixel data.:::return
SampleModel#getTransferType():::Returns the TransferType used to transfer pixels via the  getDataElements and setDataElements methods:::return
SampleModel#getPixel(int, int, int[], DataBuffer):::Returns the samples for a specified pixel in an int array, one sample per array element:::pixels->if->else->new->intArr->for->i->return
SampleModel#getDataElements(int, int, Object, DataBuffer):::Returns data for a single pixel in a primitive array of type TransferType:::
SampleModel#getDataElements(int, int, int, int, Object, DataBuffer):::Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType:::type->getTransferType->numDataElems->getNumDataElements->cnt->o->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->switch->btemp->bdata->if->new->byteArr->else->for->i->break->sdata->stemp->if->new->shortArr->else->for->i->break->idata->itemp->if->new->intArr->else->for->i->break->fdata->ftemp->if->new->floatArr->else->for->i->break->ddata->dtemp->if->new->doubleArr->else->for->i->break->return
SampleModel#setDataElements(int, int, Object, DataBuffer):::Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType:::
SampleModel#setDataElements(int, int, int, int, Object, DataBuffer):::Sets the data for a rectangle of pixels in the specified DataBuffer from a primitive array of type TransferType:::cnt->o->type->getTransferType->numDataElems->getNumDataElements->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->switch->barray->btemp->new->byteArr->for->i->break->sarray->stemp->new->shortArr->for->i->break->iArray->itemp->new->intArr->for->i->break->fArray->ftemp->new->floatArr->for->i->break->dArray->dtemp->new->doubleArr->for->i->break
SampleModel#getPixel(int, int, float[], DataBuffer):::Returns the samples for the specified pixel in an array of float:::pixels->if->else->new->floatArr->for->i->return
SampleModel#getPixel(int, int, double[], DataBuffer):::Returns the samples for the specified pixel in an array of double:::pixels->if->else->new->doubleArr->for->i->return
SampleModel#getPixels(int, int, int, int, int[], DataBuffer):::Returns all samples for a rectangle of pixels in an int array, one sample per array element:::pixels->Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->if->else->new->intArr->for->i->return
SampleModel#getPixels(int, int, int, int, float[], DataBuffer):::Returns all samples for a rectangle of pixels in a float array, one sample per array element:::pixels->Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->if->else->new->floatArr->for->i->return
SampleModel#getPixels(int, int, int, int, double[], DataBuffer):::Returns all samples for a rectangle of pixels in a double array, one sample per array element:::pixels->Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->if->else->new->doubleArr->for->i->return
SampleModel#getSample(int, int, int, DataBuffer):::Returns the sample in a specified band for the pixel located at (x,y) as an int:::
SampleModel#getSampleFloat(int, int, int, DataBuffer):::Returns the sample in a specified band for the pixel located at (x,y) as a float:::sample->getSample->return
SampleModel#getSampleDouble(int, int, int, DataBuffer):::Returns the sample in a specified band for a pixel located at (x,y) as a double:::sample->getSample->return
SampleModel#getSamples(int, int, int, int, int, int[], DataBuffer):::Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element:::pixels->Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->if->else->new->intArr->for->i->return
SampleModel#getSamples(int, int, int, int, int, float[], DataBuffer):::Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element:::pixels->Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->if->else->new->floatArr->for->i->return
SampleModel#getSamples(int, int, int, int, int, double[], DataBuffer):::Returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element:::pixels->Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->if->else->new->doubleArr->for->i->return
SampleModel#setPixel(int, int, int[], DataBuffer):::Sets a pixel in  the DataBuffer using an int array of samples for input:::for->i
SampleModel#setPixel(int, int, float[], DataBuffer):::Sets a pixel in the DataBuffer using a float array of samples for input:::for->i
SampleModel#setPixel(int, int, double[], DataBuffer):::Sets a pixel in the DataBuffer using a double array of samples for input.:::for->i
SampleModel#setPixels(int, int, int, int, int[], DataBuffer):::Sets all samples for a rectangle of pixels from an int array containing one sample per array element:::Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->for->i
SampleModel#setPixels(int, int, int, int, float[], DataBuffer):::Sets all samples for a rectangle of pixels from a float array containing one sample per array element:::Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->for->i
SampleModel#setPixels(int, int, int, int, double[], DataBuffer):::Sets all samples for a rectangle of pixels from a double array containing one sample per array element:::Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->for->i
SampleModel#setSample(int, int, int, int, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input:::
SampleModel#setSample(int, int, int, float, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input:::sample->setSample
SampleModel#setSample(int, int, int, double, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input:::sample->setSample
SampleModel#setSamples(int, int, int, int, int, int[], DataBuffer):::Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element:::Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->for->i
SampleModel#setSamples(int, int, int, int, int, float[], DataBuffer):::Sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element:::Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->for->i
SampleModel#setSamples(int, int, int, int, int, double[], DataBuffer):::Sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element:::Offset->x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->for->i
SampleModel#createCompatibleSampleModel(int, int)::: Creates a SampleModel which describes data in this SampleModel's  format, but with a different width and height.:::
SampleModel#createSubsetSampleModel(int[]):::Creates a new SampleModel with a subset of the bands of this SampleModel.:::
SampleModel#createDataBuffer():::Creates a DataBuffer that corresponds to this SampleModel:::
SampleModel#getSampleSize():::Returns the size in bits of samples for all bands.:::
SampleModel#getSampleSize(int):::Returns the size in bits of samples for the specified band.:::
ShortLookupTable#getTable():::Returns the lookup table data by reference:::return
ShortLookupTable#lookupPixel(int[], int[]):::Returns an array of samples of a pixel, translated with the lookup table:::if->new->intArr->if->for->i->else->for->i->return
ShortLookupTable#lookupPixel(short[], short[]):::Returns an array of samples of a pixel, translated with the lookup table:::if->new->shortArr->if->for->i->else->for->i->return
SinglePixelPackedSampleModel#getNumDataElements():::Returns the number of data elements needed to transfer one pixel via the getDataElements and setDataElements methods:::return
SinglePixelPackedSampleModel#createCompatibleSampleModel(int, int):::Creates a new SinglePixelPackedSampleModel with the specified width and height:::sampleModel->new->SinglePixelPackedSampleModel->return
SinglePixelPackedSampleModel#createDataBuffer():::Creates a DataBuffer that corresponds to this SinglePixelPackedSampleModel:::dataBuffer->size->getBufferSize->switch->new->DataBufferByte->break->new->DataBufferUShort->break->new->DataBufferInt->break->return
SinglePixelPackedSampleModel#getSampleSize():::Returns the number of bits per sample for all bands.:::return->bitSizes->clone
SinglePixelPackedSampleModel#getSampleSize(int):::Returns the number of bits per sample for the specified band.:::return
SinglePixelPackedSampleModel#getOffset(int, int):::Returns the offset (in data array elements) of pixel (x,y):::offset->return
SinglePixelPackedSampleModel#getBitOffsets():::Returns the bit offsets into the data array element representing  a pixel for all bands.:::return->bitOffsets->clone
SinglePixelPackedSampleModel#getBitMasks():::Returns the bit masks for all bands.:::return->bitMasks->clone
SinglePixelPackedSampleModel#getScanlineStride():::Returns the scanline stride of this SinglePixelPackedSampleModel.:::return
SinglePixelPackedSampleModel#createSubsetSampleModel(int[]):::This creates a new SinglePixelPackedSampleModel with a subset of the bands of this SinglePixelPackedSampleModel:::if->throw->new->RasterFormatException->newBitMasks->new->intArr->for->i->return->new->SinglePixelPackedSampleModel
SinglePixelPackedSampleModel#getDataElements(int, int, Object, DataBuffer):::Returns data for a single pixel in a primitive array of type TransferType:::if->throw->new->ArrayIndexOutOfBoundsException->type->getTransferType->switch->bdata->if->new->byteArr->else->data->getElem->break->sdata->if->new->shortArr->else->data->getElem->break->idata->if->new->intArr->else->data->getElem->break->return
SinglePixelPackedSampleModel#getPixel(int, int, int[], DataBuffer):::Returns all samples in for the specified pixel in an int array:::if->throw->new->ArrayIndexOutOfBoundsException->pixels->if->new->intArr->else->value->data->getElem->for->i->return
SinglePixelPackedSampleModel#getPixels(int, int, int, int, int[], DataBuffer):::Returns all samples for the specified rectangle of pixels in an int array, one sample per array element:::x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->pixels->if->else->new->intArr->lineOffset->dstOffset->for->i->return
SinglePixelPackedSampleModel#getSample(int, int, int, DataBuffer):::Returns as int the sample in a specified band for the pixel located at (x,y):::if->throw->new->ArrayIndexOutOfBoundsException->sample->data->getElem->return
SinglePixelPackedSampleModel#getSamples(int, int, int, int, int, int[], DataBuffer):::Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element:::if->throw->new->ArrayIndexOutOfBoundsException->samples->if->else->new->intArr->lineOffset->dstOffset->for->i->return
SinglePixelPackedSampleModel#setDataElements(int, int, Object, DataBuffer):::Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType:::if->throw->new->ArrayIndexOutOfBoundsException->type->getTransferType->switch->barray->data->setElem->break->sarray->data->setElem->break->iarray->data->setElem->break
SinglePixelPackedSampleModel#setPixel(int, int, int[], DataBuffer):::Sets a pixel in the DataBuffer using an int array of samples for input:::if->throw->new->ArrayIndexOutOfBoundsException->lineOffset->value->data->getElem->for->i->data->setElem
SinglePixelPackedSampleModel#setPixels(int, int, int, int, int[], DataBuffer):::Sets all samples for a rectangle of pixels from an int array containing one sample per array element:::x1->y1->if->throw->new->ArrayIndexOutOfBoundsException->lineOffset->srcOffset->for->i
SinglePixelPackedSampleModel#setSample(int, int, int, int, DataBuffer):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input:::if->throw->new->ArrayIndexOutOfBoundsException->value->data->getElem->data->setElem
SinglePixelPackedSampleModel#setSamples(int, int, int, int, int, int[], DataBuffer):::Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element:::if->throw->new->ArrayIndexOutOfBoundsException->lineOffset->srcOffset->for->i
TileObserver#tileUpdate(WritableRenderedImage, int, int, boolean):::A tile is about to be updated (it is either about to be grabbed for writing, or it is being released from writing).:::
VolatileImage#getSnapshot():::Returns a static snapshot image of this object:::
VolatileImage#getWidth():::Returns the width of the VolatileImage.:::
VolatileImage#getHeight():::Returns the height of the VolatileImage.:::
VolatileImage#getSource():::This returns an ImageProducer for this VolatileImage:::return->getSnapshot->getSource
VolatileImage#getGraphics():::This method returns a Graphics2D, but is here for backwards compatibility:::return->createGraphics
VolatileImage#createGraphics():::Creates a Graphics2D, which can be used to draw into this VolatileImage.:::
VolatileImage#validate(GraphicsConfiguration):::Attempts to restore the drawing surface of the image if the surface had been lost since the last validate call:::
VolatileImage#contentsLost():::Returns true if rendering data was lost since last validate call:::
VolatileImage#getCapabilities():::Returns an ImageCapabilities object which can be inquired as to the specific capabilities of this VolatileImage:::
VolatileImage#getTransparency():::Returns the transparency:::return
WritableRaster#getWritableParent():::Returns the parent WritableRaster (if any) of this WritableRaster,  or else null.:::return
WritableRaster#createWritableTranslatedChild(int, int):::Create a WritableRaster with the same size, SampleModel and DataBuffer as this one, but with a different location:::return->createWritableChild
WritableRaster#createWritableChild(int, int, int, int, int, int, int[]):::Returns a new WritableRaster which shares all or part of this WritableRaster's DataBuffer:::if->throw->new->RasterFormatException->if->throw->new->RasterFormatException->if->throw->new->RasterFormatException->if->throw->new->RasterFormatException->sm->if->sampleModel->createSubsetSampleModel->else->deltaX->deltaY->return->getDataBuffer->new->Rectangle->new->Point->new->WritableRaster
WritableRaster#setDataElements(int, int, Object):::Sets the data for a single pixel from a primitive array of type TransferType:::sampleModel->setDataElements
WritableRaster#setDataElements(int, int, Raster):::Sets the data for a rectangle of pixels from an input Raster:::dstOffX->inRaster->getMinX->dstOffY->inRaster->getMinY->width->inRaster->getWidth->height->inRaster->getHeight->if->throw->new->ArrayIndexOutOfBoundsException->srcOffX->inRaster->getMinX->srcOffY->inRaster->getMinY->tdata->for->startY
WritableRaster#setDataElements(int, int, int, int, Object):::Sets the data for a rectangle of pixels from a primitive array of type TransferType:::sampleModel->setDataElements
WritableRaster#setRect(Raster):::Copies pixels from Raster srcRaster to this WritableRaster:::setRect
WritableRaster#setRect(int, int, Raster):::Copies pixels from Raster srcRaster to this WritableRaster:::width->srcRaster->getWidth->height->srcRaster->getHeight->srcOffX->srcRaster->getMinX->srcOffY->srcRaster->getMinY->dstOffX->dstOffY->if->skipX->if->skipY->if->if->if->return->switch->srcRaster->getSampleModel->getDataType->iData->for->startY->break->fData->for->startY->break->dData->for->startY->break
WritableRaster#setPixel(int, int, int[]):::Sets a pixel in the DataBuffer using an int array of samples for input:::sampleModel->setPixel
WritableRaster#setPixel(int, int, float[]):::Sets a pixel in the DataBuffer using a float array of samples for input:::sampleModel->setPixel
WritableRaster#setPixel(int, int, double[]):::Sets a pixel in the DataBuffer using a double array of samples for input:::sampleModel->setPixel
WritableRaster#setPixels(int, int, int, int, int[]):::Sets all samples for a rectangle of pixels from an int array containing one sample per array element:::sampleModel->setPixels
WritableRaster#setPixels(int, int, int, int, float[]):::Sets all samples for a rectangle of pixels from a float array containing one sample per array element:::sampleModel->setPixels
WritableRaster#setPixels(int, int, int, int, double[]):::Sets all samples for a rectangle of pixels from a double array containing one sample per array element:::sampleModel->setPixels
WritableRaster#setSample(int, int, int, int):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input:::sampleModel->setSample
WritableRaster#setSample(int, int, int, float):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input:::sampleModel->setSample
WritableRaster#setSample(int, int, int, double):::Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input:::sampleModel->setSample
WritableRaster#setSamples(int, int, int, int, int, int[]):::Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element:::sampleModel->setSamples
WritableRaster#setSamples(int, int, int, int, int, float[]):::Sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element:::sampleModel->setSamples
WritableRaster#setSamples(int, int, int, int, int, double[]):::Sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element:::sampleModel->setSamples
WritableRenderedImage#addTileObserver(TileObserver):::Adds an observer:::
WritableRenderedImage#removeTileObserver(TileObserver):::Removes an observer:::
WritableRenderedImage#getWritableTile(int, int):::Checks out a tile for writing:::
WritableRenderedImage#releaseWritableTile(int, int):::Relinquishes the right to write to a tile:::
WritableRenderedImage#isTileWritable(int, int):::Returns whether a tile is currently checked out for writing.:::
WritableRenderedImage#getWritableTileIndices():::Returns an array of Point objects indicating which tiles are checked out for writing:::
WritableRenderedImage#hasTileWriters():::Returns whether any tile is checked out for writing:::
WritableRenderedImage#setData(Raster):::Sets a rect of the image to the contents of the Raster r, which is assumed to be in the same coordinate space as the WritableRenderedImage:::

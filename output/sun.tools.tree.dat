AddExpression#selectType(Environment, Context, int):::Select the type:::if->isType->return->else->if->isType->return->super->selectType
AddExpression#eval(int, int):::Evaluate:::return->new->IntExpression
AddExpression#inlineValue(Environment, Context):::Inline the value of an AddExpression:::if->isConstant->buffer->new->StringBuffer->inlineValueSB->if->return->buffer->toString->new->StringExpression->return->super->inlineValue
AddExpression#inlineValueSB(Environment, Context, StringBuffer):::Attempt to evaluate this expression:::if->return->super->inlineValueSB->left->inlineValueSB->if->right->inlineValueSB->return
AddExpression#simplify():::Simplify:::if->type->isType->if->type->inMask->if->left->equals->return->if->right->equals->return->else->if->isType->new->StringExpression->else->if->isType->new->StringExpression->return
AddExpression#costInline(int, Environment, Context):::The cost of inlining this expression:::return->type->isType->left->costInline->right->costInline
AddExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
AddExpression#codeAppend(Environment, Context, Assembler, ClassDeclaration, boolean):::Convert this expression to a string and append it to the string buffer on the top of the stack:::if->type->isType->left->codeAppend->right->codeAppend->else->super->codeAppend
AndExpression#eval(boolean, boolean):::Evaluate:::return->new->BooleanExpression
AndExpression#simplify():::Simplify:::if->left->equals->return->if->right->equals->return->new->CommaExpression->simplify->if->right->equals->return->if->left->equals->return->return
AndExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::if->lbl2->new->Label->left->codeBranch->right->codeBranch->asm->add->else->left->codeBranch->right->codeBranch
ArrayAccessExpression#checkValue(Environment, Context, Vset, Hashtable):::Check expression type:::right->checkValue->if->env->error->return->index->checkValue->convert->if->isType->if->isType->env->error->return->getElementType->return
ArrayAccessExpression#getAssigner(Environment, Context):::An array access expression never requires the use of an access method to perform an assignment to an array element, though an access method may be required to fetch the array object itself.:::return
ArrayAccessExpression#getUpdater(Environment, Context):::An array access expression never requires a field updater.:::return
ArrayAccessExpression#toType(Environment, Context):::Convert to a type:::return->right->toType->toType
ArrayAccessExpression#inline(Environment, Context):::Inline:::right->inlineValue->index->inlineValue->return
ArrayAccessExpression#copyInline(Context):::Create a copy of the expression for method inlining:::e->clone->right->copyInline->if->else->index->copyInline->return
ArrayAccessExpression#costInline(int, Environment, Context):::The cost of inlining this expression:::return->right->costInline->index->costInline
ArrayAccessExpression#codeLValue(Environment, Context, Assembler):::Code:::right->codeValue->index->codeValue->return
ArrayAccessExpression#print(PrintStream):::Print:::out->print->right->print->out->print->if->index->print->else->out->print->out->print
ArrayExpression#checkValue(Environment, Context, Vset, Hashtable):::Check expression type:::env->error->return
ArrayExpression#inline(Environment, Context):::Inline:::e->for->i->return
ArrayExpression#codeValue(Environment, Context, Assembler):::Code:::t->asm->add->switch->type->getElementType->getTypeCode->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->type->getElementType->add->break->asm->env->type->getElementType->getClassDeclaration->add->break->throw->new->CompilerError->for->i
AssignAddExpression#costInline(int, Environment, Context):::The cost of inlining this statement:::return->type->isType->super->costInline
AssignAddExpression#code(Environment, Context, Assembler, boolean):::Code:::if->itype->isType->try->argTypes->c->env->getClassDeclaration->if->asm->add->asm->add->depth->left->codeLValue->codeDup->left->codeLoad->left->ensureString->sourceClass->getClassDefinition->f->c->getClassDefinition->matchMethod->asm->add->right->codeAppend->c->getClassDefinition->matchMethod->asm->add->if->stackSize->codeDup->left->codeStore->else->updater->startUpdate->left->ensureString->asm->add->asm->add->asm->add->sourceClass->getClassDefinition->f->c->getClassDefinition->matchMethod->asm->add->right->codeAppend->c->getClassDefinition->matchMethod->asm->add->updater->finishUpdate->catch->throw->new->CompilerError->throw->new->CompilerError->finally->else->super->code
AssignAddExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignBitAndExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignBitOrExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignBitXorExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignDivideExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignExpression#checkValue(Environment, Context, Vset, Hashtable):::Check an assignment expression:::if->right->checkValue->left->checkLHS->else->left->checkLHS->right->checkValue->convert->left->getAssigner->return
AssignExpression#inlineValue(Environment, Context):::Inline:::if->return->implementation->inlineValue->left->inlineLHS->right->inlineValue->if->updater->inline->return
AssignExpression#copyInline(Context):::Create a copy of the expression for method inlining:::if->return->implementation->copyInline->e->clone->left->copyInline->right->copyInline->if->updater->copyInline->return
AssignExpression#costInline(int, Environment, Context):::The cost of inlining this expression:::return->right->costInline->updater->costInline->right->costInline->left->costInline
AssignExpression#codeValue(Environment, Context, Assembler):::Code:::if->depth->left->codeLValue->right->codeValue->stackSize->codeDup->left->codeStore->else->updater->startAssign->right->codeValue->updater->finishAssign
AssignMultiplyExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignOpExpression#selectType(Environment, Context, int):::Select the type:::rtype->switch->if->if->env->error->else->return->if->else->if->else->if->else->break->if->else->if->else->break->if->inMask->new->ConvertExpression->if->else->break->throw->new->CompilerError->if->convert
AssignOpExpression#getIncrement():::Get the increment, return NOINC if an increment is not possible:::if->type->isType->if->if->isLocal->val->if->if->return->return
AssignOpExpression#checkValue(Environment, Context, Vset, Hashtable):::Check an assignment expression:::left->checkAssignOp->right->checkValue->tm->getTypeMask->getTypeMask->if->return->selectType->if->type->isType->convert->left->getUpdater->return
AssignOpExpression#inlineValue(Environment, Context):::Inline:::left->inlineValue->right->inlineValue->if->updater->inline->return
AssignOpExpression#copyInline(Context):::Create a copy of the expression for method inlining:::e->clone->left->copyInline->right->copyInline->if->updater->copyInline->return
AssignOpExpression#costInline(int, Environment, Context):::The cost of inlining this statement:::if->return->getIncrement->right->costInline->left->costInline->else->return->right->costInline->updater->costInline
AssignOpExpression#code(Environment, Context, Assembler, boolean):::Code:::val->getIncrement->if->v->operands->asm->add->if->left->codeValue->return->if->depth->left->codeLValue->codeDup->left->codeLoad->codeConversion->right->codeValue->codeOperation->codeConversion->if->type->stackSize->codeDup->left->codeStore->else->updater->startUpdate->codeConversion->right->codeValue->codeOperation->codeConversion->updater->finishUpdate
AssignOpExpression#print(PrintStream):::Print:::out->print->left->print->out->print->right->print->out->print
AssignRemainderExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignShiftLeftExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignShiftRightExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignSubtractExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
AssignUnsignedShiftRightExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->itype->getTypeCodeOffset->add
BinaryArithmeticExpression#selectType(Environment, Context, int):::Select the type:::if->else->if->else->if->else->convert->convert
BinaryAssignExpression#order():::Order the expression based on precedence:::if->precedence->left->precedence->e->order->return->return
BinaryAssignExpression#check(Environment, Context, Vset, Hashtable):::Check void expression:::return->checkValue
BinaryAssignExpression#inline(Environment, Context):::Inline:::if->return->implementation->inline->return->inlineValue
BinaryBitExpression#selectType(Environment, Context, int):::Select the type:::if->else->if->else->convert->convert
BinaryBitExpression#codeValue(Environment, Context, Assembler):::Code:::left->codeValue->right->codeValue->codeOperation
BinaryCompareExpression#selectType(Environment, Context, int):::Select the type:::t->if->else->if->else->if->convert->convert
BinaryEqualityExpression#selectType(Environment, Context, int):::Select the type:::t->if->return->else->if->try->if->env->explicitCast->env->explicitCast->return->env->error->catch->env->error->finally->return->else->if->else->if->else->if->else->if->else->convert->convert
BinaryExpression#order():::Order the expression based on precedence:::if->precedence->left->precedence->e->order->return->return
BinaryExpression#checkValue(Environment, Context, Vset, Hashtable):::Check a binary expression:::left->checkValue->right->checkValue->tm->getTypeMask->getTypeMask->if->return->selectType->if->type->isType->env->error->return
BinaryExpression#isConstant():::Check if constant:::switch->return->left->isConstant->right->isConstant->return
BinaryExpression#eval(int, int):::Evaluate:::return
BinaryExpression#inline(Environment, Context):::Inline:::left->inline->right->inline->return->new->CommaExpression
BinaryExpression#copyInline(Context):::Create a copy of the expression for method inlining:::e->clone->if->left->copyInline->if->right->copyInline->return
BinaryExpression#costInline(int, Environment, Context):::The cost of inlining this expression:::return->left->costInline->right->costInline
BinaryExpression#codeOperation(Environment, Context, Assembler):::Code:::throw->new->CompilerError
BinaryExpression#print(PrintStream):::Print:::out->print->if->left->print->else->out->print->out->print->if->right->print->else->out->print->out->print
BinaryLogicalExpression#checkValue(Environment, Context, Vset, Hashtable):::Check a binary expression:::cvars->new->ConditionVars->checkCondition->return->join
BinaryLogicalExpression#inline(Environment, Context):::Inline:::left->inlineValue->right->inlineValue->return
BinaryShiftExpression#eval():::Evaluate the expression:::if->return->eval->return->super->eval
BinaryShiftExpression#selectType(Environment, Context, int):::Select the type:::if->else->if->inMask->convert->else->if->inMask->new->ConvertExpression->else->convert
BitAndExpression#eval(boolean, boolean):::Evaluate:::return->new->BooleanExpression
BitAndExpression#simplify():::Simplify:::if->left->equals->return->if->right->equals->return->if->left->equals->left->equals->return->new->CommaExpression->simplify->if->right->equals->right->equals->return->new->CommaExpression->simplify->return
BitAndExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
BitNotExpression#selectType(Environment, Context, int):::Select the type of the expression:::if->else->convert
BitNotExpression#eval(int):::Evaluate:::return->new->IntExpression
BitNotExpression#simplify():::Simplify:::if->return->return
BitNotExpression#codeValue(Environment, Context, Assembler):::Code:::right->codeValue->if->type->isType->asm->add->asm->add->else->asm->add->asm->add
BitOrExpression#eval(boolean, boolean):::Evaluate:::return->new->BooleanExpression
BitOrExpression#simplify():::Simplify:::if->left->equals->left->equals->return->if->right->equals->right->equals->return->if->left->equals->return->new->CommaExpression->simplify->if->right->equals->return->new->CommaExpression->simplify->return
BitOrExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
BitXorExpression#eval(boolean, boolean):::Evaluate:::return->new->BooleanExpression
BitXorExpression#simplify():::Simplify:::if->left->equals->return->new->NotExpression->if->right->equals->return->new->NotExpression->if->left->equals->left->equals->return->if->right->equals->right->equals->return->return
BitXorExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
BooleanExpression#getValue():::Get the value:::return
BooleanExpression#equals(boolean):::Check if the expression is equal to a value:::return
BooleanExpression#equalsDefault():::Check if the expression is equal to its default static value:::return
BooleanExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::if->asm->add
BooleanExpression#print(PrintStream):::Print:::out->print
BreakStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::reach->checkLabel->destctx->new->CheckContext->getBreakContext->if->if->env->error->join->else->if->env->error->else->env->error->exitctx->ctx->getTryExitContext->if->join->return
BreakStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::return
BreakStatement#code(Environment, Context, Assembler):::Code:::newctx->new->CodeContext->destctx->newctx->getBreakContext->codeFinally->asm->add->asm->add
BreakStatement#print(PrintStream, int):::Print:::super->print->out->print->if->out->print->out->print
ByteExpression#print(PrintStream):::Print:::out->print
CaseStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::if->expr->checkValue->convert->expr->inlineValue->return->vset->clearDeadEnd
CaseStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::return
CaseStatement#print(PrintStream, int):::Print:::super->print->if->out->print->else->out->print->expr->print->out->print
CastExpression#checkValue(Environment, Context, Vset, Hashtable):::Check the expression:::left->toType->right->checkValue->if->type->isType->isType->return->if->type->equals->return->try->if->env->explicitCast->new->ConvertExpression->return->catch->env->error->finally->env->error->return
CastExpression#isConstant():::Check if constant:::if->type->inMask->type->equals->return->return->right->isConstant
CastExpression#inline(Environment, Context):::Inline:::return->right->inline
CastExpression#print(PrintStream):::Print:::out->print->if->type->isType->left->print->else->out->print->out->print->right->print->out->print
CatchStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::reach->new->Context->type->texpr->toType->try->if->ctx->getLocalField->env->error->if->type->isType->else->if->type->isType->env->error->else->def->env->getClassDefinition->if->def->env->getClassDeclaration->subClassOf->env->error->getClassDefinition->new->LocalMember->ctx->declare->vset->addVar->return->body->check->catch->env->error->return->finally
CatchStatement#inline(Environment, Context):::Inline:::new->Context->if->field->isUsed->ctx->declare->if->body->inline->return
CatchStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->if->body->copyInline->if->field->copyInline->return
CatchStatement#costInline(int, Environment, Context):::Compute cost of inlining this statement:::cost->if->body->costInline->return
CatchStatement#code(Environment, Context, Assembler):::Code:::newctx->new->CodeContext->if->field->isUsed->newctx->declare->asm->new->LocalVariable->add->else->asm->add->if->body->code
CatchStatement#print(PrintStream, int):::Print:::super->print->out->print->texpr->print->out->print->if->body->print->else->out->print
CharExpression#print(PrintStream):::Print:::out->print
CommaExpression#check(Environment, Context, Vset, Hashtable):::Check void expression:::left->check->right->check->return
CommaExpression#selectType(Environment, Context, int):::Select the type:::
CommaExpression#simplify():::Simplify:::if->return->if->return->return
CommaExpression#inline(Environment, Context):::Inline:::if->left->inline->if->right->inline->return->simplify
CommaExpression#codeLValue(Environment, Context, Assembler):::Code:::if->return->super->codeLValue->else->if->left->code->return->right->codeLValue
CompoundStatement#insertStatement(Statement):::Insert a new statement at the front:::newargs->new->StatementArr->for->i
CompoundStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->if->reach->newctx->new->CheckContext->newenv->Context->newEnvironment->for->i->vset->join->return->ctx->removeAdditionalVars
CompoundStatement#inline(Environment, Context):::Inline:::new->Context->expand->count->for->i->switch->return->for->i->break->if->newArgs->new->StatementArr->for->i->return
CompoundStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->new->StatementArr->for->i->return
CompoundStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::cost->for->i->return
CompoundStatement#code(Environment, Context, Assembler):::Code:::newctx->new->CodeContext->for->i->asm->add
CompoundStatement#firstConstructor():::Check if the first thing is a constructor invocation:::return->firstConstructor
CompoundStatement#print(PrintStream, int):::Print:::super->print->out->print->for->i->printIndent->out->print
ConditionalExpression#order():::Order the expression based on precedence:::if->precedence->cond->precedence->e->order->return->return
ConditionalExpression#checkValue(Environment, Context, Vset, Hashtable):::Check the expression:::cvars->cond->checkCondition->left->checkValue->right->checkValue->join->convert->tm->getTypeMask->getTypeMask->if->return->if->equals->else->if->else->if->else->if->else->if->try->env->implicitCast->catch->finally->else->if->left->fitsType->right->fitsType->else->if->left->fitsType->right->fitsType->else->if->left->fitsType->right->fitsType->else->convert->convert->return
ConditionalExpression#isConstant():::Check if constant:::return->cond->isConstant->left->isConstant->right->isConstant
ConditionalExpression#simplify():::Simplify:::if->cond->equals->return->if->cond->equals->return->return
ConditionalExpression#inline(Environment, Context):::Inline:::left->inline->right->inline->if->return->cond->inline->if->new->NotExpression->cond->inlineValue->return->simplify
ConditionalExpression#costInline(int, Environment, Context):::The cost of inlining this expression:::return->cond->costInline->left->costInline->right->costInline
ConditionalExpression#copyInline(Context):::Create a copy of the expression for method inlining:::e->clone->cond->copyInline->left->copyInline->right->copyInline->return
ConditionalExpression#codeValue(Environment, Context, Assembler):::Code:::l1->new->Label->l2->new->Label->cond->codeBranch->left->codeValue->asm->add->asm->add->right->codeValue->asm->add
ConditionalExpression#print(PrintStream):::Print:::out->print->cond->print->out->print->left->print->out->print->if->right->print->else->out->print->out->print
ConstantExpression#isConstant():::Return true if constant:::return
Context#declare(Environment, LocalMember):::Declare local:::if->idThis->local->getName->equals->if->local->isInnerClass->return->local->getType->stackSize->return
Context#getLocalField(Identifier):::Get a local variable by name:::for->f->return
Context#getScopeNumber(ClassDefinition):::Get the scope number for a reference to a member of this class (Larger scope numbers are more deeply nested.):::for->ctx->return
Context#declareFieldNumber(MemberDefinition):::Assign a number to a class field:::return->new->LocalMember->declare
Context#getFieldNumber(MemberDefinition):::Retrieve a number previously assigned by declareMember():::for->f->return
Context#getElement(int):::Return the local field or member field corresponding to a number:::for->f->return
Context#getLocalClass(Identifier):::Get a local class by name:::for->f->return
Context#getField(Environment, Identifier):::Get either a local variable, or a field in a current class:::return->getFieldCommon
Context#getApparentField(Environment, Identifier):::Like getField, except that it skips over inherited fields:::return->getFieldCommon
Context#isInScope(LocalMember):::Check if the given field is active in this context.:::for->f->return
Context#noteReference(Environment, LocalMember):::Notice a reference (usually an uplevel one):::targetScopeNumber->isInScope->res->currentFrameNumber->for->refctx->return
Context#makeReference(Environment, LocalMember):::Implement a reference (usually an uplevel one):::r->noteReference->if->return->r->makeLocalReference->else->if->idThis->target->getName->equals->return->new->ThisExpression->else->return->new->IdentifierExpression
Context#findOuterLink(Environment, long, MemberDefinition):::Return a local expression which can serve as the base reference for the given field:::fc->f->getClassDefinition->reqc->f->isStatic->f->isConstructor->fc->isTopLevel->fc->getOuterClass->if->return->return->findOuterLink
Context#outerLinkExists(Environment, ClassDefinition, ClassDefinition):::Is there a "this" of type reqc in scope?:::while->match->if->thisc->isTopLevel->return->thisc->getOuterClass->return
Context#findScope(Environment, ClassDefinition):::From which enclosing class do members of this type come?:::thisc->field->getClassDefinition->while->match->thisc->getOuterClass->return
Context#resolveName(Environment, Identifier):::Resolve a type name from within a local scope.:::if->name->isQualified->rhead->name->getHead->resolveName->if->rhead->hasAmbigPrefix->return->if->env->classExists->return->env->resolvePackageQualifiedName->try->return->env->getClassDefinition->name->getTail->resolveInnerClass->catch->return->Identifier->name->getTail->lookupInner->finally->try->f->getClassCommon->if->return->f->getInnerClass->getName->catch->finally->return->env->resolveName
Context#getApparentClassName(Environment, Identifier):::Return the name of a lexically apparent type, skipping inherited members, and ignoring the current pacakge and imports:::if->name->isQualified->rhead->name->getHead->getApparentClassName->return->Identifier->name->getTail->lookup->try->f->getClassCommon->if->return->f->getInnerClass->getName->catch->finally->topnm->field->getClassDefinition->getTopClass->getName->if->topnm->getName->equals->return->return
Context#checkBackBranch(Environment, Statement, Vset, Vset):::Raise an error if a blank final was definitely unassigned on entry to a loop, but has possibly been assigned on the back-branch:::for->f
Context#canReach(Environment, MemberDefinition):::Check if a field can reach another field (only considers forward references, not the access modifiers).:::return->field->canReach
Context#getLabelContext(Identifier):::Get the context that corresponds to a label, return null if not found.:::for->ctx->return
Context#getBreakContext(Identifier):::Get the destination context of a break:::if->return->getLabelContext->for->ctx->return
Context#getContinueContext(Identifier):::Get the destination context of a continue:::if->return->getLabelContext->for->ctx->return
Context#getReturnContext():::Get the destination context of a return (the method body):::for->ctx->return
Context#getTryExitContext():::Get the context of the innermost surrounding try-block:::for->ctx->return
Context#getInlineContext():::Get the nearest inlined context:::for->ctx->return
Context#getInlineMemberContext(MemberDefinition):::Get the context of a field that is being inlined:::for->ctx->return
Context#removeAdditionalVars(Vset):::Remove variables from the vset set  that are no longer part of this context.:::return->vset->removeAdditionalVars
Context#getThisNumber():::Return the number of the innermost current instance reference.:::thisf->getLocalField->if->thisf->getClassDefinition->field->getClassDefinition->return->return
Context#getField():::Return the field containing the present context.:::return
Context#newEnvironment(Environment, Context):::Extend an environment with the given context:::return->new->ContextEnvironment
ContinueStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::return
ContinueStatement#code(Environment, Context, Assembler):::Code:::destctx->ctx->getContinueContext->codeFinally->asm->add
ContinueStatement#print(PrintStream, int):::Print:::super->print->out->print->if->out->print->out->print
ConvertExpression#checkValue(Environment, Context, Vset, Hashtable):::Check the value:::return->right->checkValue
ConvertExpression#simplify():::Simplify:::switch->value->switch->type->getTypeCode->return->new->ByteExpression->return->new->CharExpression->return->new->ShortExpression->return->new->IntExpression->return->new->LongExpression->return->new->FloatExpression->return->new->DoubleExpression->break->value->switch->type->getTypeCode->return->new->ByteExpression->return->new->CharExpression->return->new->ShortExpression->return->new->IntExpression->return->new->FloatExpression->return->new->DoubleExpression->break->value->switch->type->getTypeCode->return->new->ByteExpression->return->new->CharExpression->return->new->ShortExpression->return->new->IntExpression->return->new->LongExpression->return->new->DoubleExpression->break->value->switch->type->getTypeCode->return->new->ByteExpression->return->new->CharExpression->return->new->ShortExpression->return->new->IntExpression->return->new->LongExpression->return->new->FloatExpression->break->return
ConvertExpression#equals(int):::Check if the expression is equal to a value:::return->right->equals
ConvertExpression#inline(Environment, Context):::Inline:::if->inMask->type->inMask->try->if->env->implicitCast->return->inlineValue->catch->throw->new->CompilerError->finally->return->super->inline
ConvertExpression#codeValue(Environment, Context, Assembler):::Code:::right->codeValue->codeConversion
ConvertExpression#print(PrintStream):::Print:::out->type->toString->print->right->print->out->print
DeclarationStatement#check(Environment, Context, Vset, Hashtable):::Check statement Report an error unless the call is checkBlockStatement.:::env->error->return->checkBlockStatement
DeclarationStatement#inline(Environment, Context):::Inline:::n->for->i->return
DeclarationStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->if->type->copyInline->new->StatementArr->for->i->return
DeclarationStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::cost->for->i->return
DeclarationStatement#code(Environment, Context, Assembler):::Code:::for->i
DeclarationStatement#print(PrintStream, int):::Print:::out->print->super->print->type->print->out->print->for->i->out->print
DivideExpression#eval(int, int):::Evaluate:::return->new->IntExpression
DivideExpression#simplify():::Simplify:::if->right->equals->return->return
DivideExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
DivRemExpression#inline(Environment, Context):::Inline:::if->type->inMask->right->inlineValue->if->right->isConstant->right->equals->left->inline->return->else->left->inlineValue->try->return->eval->simplify->catch->env->error->return->finally->else->return->super->inline
DoStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->newctx->new->CheckContext->vsEntry->vset->copy->body->reach->check->vset->join->cvars->cond->checkCondition->convert->ctx->checkBackBranch->join->return->ctx->removeAdditionalVars
DoStatement#inline(Environment, Context):::Inline:::new->Context->if->body->inline->cond->inlineValue->return
DoStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->cond->copyInline->if->body->copyInline->return
DoStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::return->cond->costInline->body->costInline
DoStatement#code(Environment, Context, Assembler):::Code:::l1->new->Label->asm->add->newctx->new->CodeContext->if->body->code->asm->add->cond->codeBranch->asm->add
DoStatement#print(PrintStream, int):::Print:::super->print->out->print->body->print->out->print->cond->print->out->print
DoubleExpression#getValue():::Get the value:::return->new->Double
DoubleExpression#equals(int):::Check if the expression is equal to a value:::return
DoubleExpression#equalsDefault():::Check if the expression is equal to its default static value:::return->Double->doubleToLongBits
DoubleExpression#codeValue(Environment, Context, Assembler):::Code:::asm->new->Double->add
DoubleExpression#print(PrintStream):::Print:::out->print
EqualExpression#eval(int, int):::Evaluate:::return->new->BooleanExpression
EqualExpression#simplify():::Simplify:::if->left->isConstant->right->isConstant->return->new->EqualExpression->return
EqualExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::left->codeValue->switch->getTypeCode->if->right->equals->right->codeValue->asm->add->return->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->if->right->equals->asm->add->else->right->codeValue->asm->add->return->throw->new->CompilerError->asm->add
Expression#getImplementation():::Type checking may assign a more complex implementation to an innocuous-looking expression (like an identifier):::return
Expression#precedence():::Return the precedence of the operator:::return
Expression#order():::Order the expression based on precedence:::return
Expression#isConstant():::Return true if constant, according to JLS 15.27:::return
Expression#getValue():::Return the constant value.:::return
Expression#equals(int):::Check if the expression is known to be equal to a given value:::return
Expression#isNull():::Check if the expression must be a null reference.:::return
Expression#isNonNull():::Check if the expression cannot be a null reference.:::return
Expression#equalsDefault():::Check if the expression is equal to its default static value:::return
Expression#toType(Environment, Context):::Convert an expresion to a type:::env->error->return
Expression#fitsType(Environment, Context, Type):::See if this expression fits in the given type:::try->if->env->isMoreSpecific->return->if->isType->this->isConstant->n->this->inlineValue->if->return->n->fitsType->return->catch->return->finally
Expression#checkValue(Environment, Context, Vset, Hashtable):::Check an expression:::return
Expression#checkAmbigName(Environment, Context, Vset, Hashtable, UnaryExpression):::Check something that might be an AmbiguousName (refman 6.5.2):::return->checkValue
Expression#checkCondition(Environment, Context, Vset, Hashtable):::Check a condition:::cvars->new->ConditionVars->checkCondition->return
Expression#eval():::Evaluate:::return
Expression#simplify():::Simplify:::return
Expression#inline(Environment, Context):::Inline:::return
Expression#inlineValueSB(Environment, Context, StringBuffer):::Attempt to evaluate this expression:::inlined->inlineValue->val->inlined->getValue->if->inlined->isNull->return->if->buffer->intValue->append->else->if->buffer->intValue->append->else->buffer->append->return
Expression#costInline(int, Environment, Context):::The cost of inlining this expression:::return
Expression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::if->type->isType->codeValue->asm->add->else->throw->new->CompilerError
Expression#ensureString(Environment, Context, Assembler):::Convert this expression to a string.:::if->isNonNull->return->sourceClass->getClassDefinition->stClass->env->getClassDeclaration->stClsDef->stClass->getClassDefinition->if->type->inMask->if->argType1->f1->stClsDef->matchMethod->asm->add->if->type->inMask->argType2->f2->stClsDef->matchMethod->asm->add->else->argType->f->stClsDef->matchMethod->asm->add
Expression#codeAppend(Environment, Context, Assembler, ClassDeclaration, boolean):::Convert this expression to a string and append it to the string buffer on the top of the stack:::sourceClass->getClassDefinition->sbClsDef->sbClass->getClassDefinition->f->if->asm->add->asm->add->if->equals->sbClsDef->matchMethod->else->codeValue->ensureString->argType->sbClsDef->matchMethod->asm->add->else->codeValue->argType->type->inMask->sbClsDef->matchMethod->asm->add
Expression#codeDup(Environment, Context, Assembler, int, int):::Code:::switch->return->switch->asm->add->return->asm->add->return->asm->add->return->break->switch->asm->add->return->asm->add->return->asm->add->return->break->throw->new->CompilerError
Expression#firstConstructor():::Check if the first thing is a constructor invocation:::return
Expression#copyInline(Context):::Create a copy of the expression for method inlining:::return->clone
Expression#print(PrintStream):::Print:::out->print
ExpressionStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->return->expr->reach->check
ExpressionStatement#inline(Environment, Context):::Inline:::if->expr->inline->return->return
ExpressionStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->expr->copyInline->return
ExpressionStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::return->expr->costInline
ExpressionStatement#code(Environment, Context, Assembler):::Code:::expr->code
ExpressionStatement#firstConstructor():::Check if the first thing is a constructor invocation:::return->expr->firstConstructor
ExpressionStatement#print(PrintStream, int):::Print:::super->print->if->expr->print->else->out->print->out->print
ExprExpression#checkCondition(Environment, Context, Vset, Hashtable, ConditionVars):::Check a condition:::right->checkCondition
ExprExpression#checkAssignOp(Environment, Context, Vset, Hashtable, Expression):::Check the expression if it appears as an lvalue:::right->checkAssignOp->return
ExprExpression#getUpdater(Environment, Context):::Delegate to our subexpression:::return->right->getUpdater
ExprExpression#inlineValueSB(Environment, Context, StringBuffer):::Delegate to our subexpression:::return->right->inlineValueSB
ExprExpression#selectType(Environment, Context, int):::Select the type of the expression:::
ExprExpression#simplify():::Simplify:::return
FieldExpression#toIdentifier(Expression):::Convert an '.' expression to a qualified identifier:::sb->new->StringBuilder->while->fe->if->return->sb->insert->sb->insert->if->return->sb->insert->return->Identifier->sb->toString->lookup
FieldExpression#isTypeAccessible(long, Environment, Type, ClassDefinition):::Determine if a type is accessible from a given class.:::switch->t->getTypeCode->try->nm->t->getClassName->def->env->getClassDefinition->return->c->def->getClassDeclaration->canAccess->catch->finally->return->return->t->getElementType->isTypeAccessible->return
FieldExpression#checkLHS(Environment, Context, Vset, Hashtable):::Check the expression if it appears on the LHS of an assignment:::hadField->checkCommon->if->return->super->checkLHS->if->field->isFinal->if->field->isBlankFinal->if->field->isStatic->if->env->error->else->if->env->field->getName->error->return->checkFinalAssign->else->env->error->return
FieldExpression#checkAssignOp(Environment, Context, Vset, Hashtable, Expression):::Check the expression if it appears on the LHS of an op= expression:::checkCommon->if->return->super->checkLHS->if->field->isFinal->env->error->return
FieldExpression#isConstant():::Check if constant:  Will it inline away?:::if->return->implementation->isConstant->if->return->field->isConstant->return
FieldExpression#inline(Environment, Context):::Inline:::if->return->implementation->inline->e->inlineValue->if->fe->if->return->return
FieldExpression#costInline(int, Environment, Context):::The cost of inlining this expression:::if->return->implementation->costInline->if->return->right->costInline->ctxClass->getClassDefinition->try->if->ctxClass->field->getClassDeclaration->permitInlinedAccess->ctxClass->permitInlinedAccess->if->return->else->rt->env->getClassDeclaration->if->ctxClass->permitInlinedAccess->return->right->costInline->catch->finally->return
FieldExpression#codeLValue(Environment, Context, Assembler):::Code:::if->throw->new->CompilerError->if->field->isStatic->if->right->code->return->return->right->codeValue->return
FieldExpression#print(PrintStream):::Print:::out->print->if->right->print->else->out->print->out->print->if->out->print->implementation->print
FinallyStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::reach->newexp->new->Hashtable<>->newctx1->new->CheckContext->vset1->body->vset->copy->check->join->newctx2->new->CheckContext->vset2->finalbody->check->vset2->isDeadEnd->vset2->join->if->for->e->newexp->keys->e->hasMoreElements->return->ctx->vset1->addDAandJoinDU->removeAdditionalVars
FinallyStatement#inline(Environment, Context):::Inline:::if->new->Context->ctx->declare->if->init->inline->if->body->inline->if->finalbody->inline->if->return->eliminate->if->return->eliminate->return
FinallyStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->if->tryTemp->copyInline->if->init->copyInline->if->body->copyInline->if->finalbody->copyInline->return
FinallyStatement#costInline(int, Environment, Context):::Compute cost of inlining this statement:::cost->if->init->costInline->if->return->if->body->costInline->if->return->if->finalbody->costInline->return
FinallyStatement#code(Environment, Context, Assembler):::Code:::new->Context->num1->num2->endLabel->new->Label->if->ctx->declare->if->exprctx->new->CodeContext->init->code->if->f1->f2->thisClass->getClassDefinition->if->returnType->getType->getReturnType->localfield->new->LocalMember->ctx->declare->Environment->debugOutput->new->LocalMember->new->LocalMember->ctx->declare->ctx->declare->td->new->TryData->td->add->bodyctx->new->CodeContext->asm->add->body->code->asm->add->asm->td->getEndLabel->add->if->asm->add->asm->add->else->asm->add->cd->td->getCatch->asm->cd->getLabel->add->if->asm->add->asm->add->asm->add->asm->add->else->asm->add->asm->add->if->asm->add->finalbody->code->asm->add->else->finalbody->code->asm->add
FinallyStatement#print(PrintStream, int):::Print:::super->print->out->print->if->body->print->else->out->print->out->print->if->finalbody->print->else->out->print
FloatExpression#getValue():::Get the value:::return->new->Float
FloatExpression#equals(int):::Check if the expression is equal to a value:::return
FloatExpression#equalsDefault():::Check if the expression is equal to its default static value:::return->Float->floatToIntBits
FloatExpression#codeValue(Environment, Context, Assembler):::Code:::asm->new->Float->add
FloatExpression#print(PrintStream):::Print:::out->print
ForStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->reach->initctx->new->Context->if->init->checkBlockStatement->newctx->new->CheckContext->vsEntry->vset->copy->cvars->if->cond->checkCondition->convert->else->new->ConditionVars->body->check->vset->join->if->inc->check->initctx->checkBackBranch->join->return->ctx->removeAdditionalVars
ForStatement#inline(Environment, Context):::Inline:::new->Context->if->body->return->new->CompoundStatement->inline->if->cond->inlineValue->if->body->inline->if->inc->inline->return
ForStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->if->init->copyInline->if->cond->copyInline->if->body->copyInline->if->inc->copyInline->return
ForStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::cost->if->init->costInline->if->cond->costInline->if->body->costInline->if->inc->costInline->return
ForStatement#code(Environment, Context, Assembler):::Code:::newctx->new->CodeContext->if->init->code->l1->new->Label->l2->new->Label->asm->add->asm->add->if->body->code->asm->add->if->inc->code->asm->add->if->cond->codeBranch->else->asm->add->asm->add
ForStatement#print(PrintStream, int):::Print:::super->print->out->print->if->init->print->out->print->else->out->print->if->cond->print->out->print->out->print->if->inc->print->out->print->if->body->print->else->out->print
GreaterExpression#eval(int, int):::Evaluate:::return->new->BooleanExpression
GreaterExpression#simplify():::Simplify:::if->left->isConstant->right->isConstant->return->new->LessExpression->return
GreaterExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::left->codeValue->switch->getTypeCode->if->right->equals->right->codeValue->asm->add->return->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->throw->new->CompilerError->asm->add
GreaterOrEqualExpression#eval(int, int):::Evaluate:::return->new->BooleanExpression
GreaterOrEqualExpression#simplify():::Simplify:::if->left->isConstant->right->isConstant->return->new->LessOrEqualExpression->return
GreaterOrEqualExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::left->codeValue->switch->getTypeCode->if->right->equals->right->codeValue->asm->add->return->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->throw->new->CompilerError->asm->add
IdentifierExpression#equals(Identifier):::Check if the expression is equal to a value:::return->equals
IdentifierExpression#bind(Environment, Context):::Bind to a field:::try->ctx->getField->if->for->cdef->getClassDefinition->cdef->getOuterClass->env->error->return->field->getType->if->getClassDefinition->canAccess->env->field->getClassDeclaration->getClassDeclaration->error->return->if->field->isLocal->local->if->ctx->makeReference->else->f->if->f->reportDeprecated->env->f->getClassDefinition->error->fclass->f->getClassDefinition->if->getClassDefinition->f2->ctx->getApparentField->if->c->ctx->findScope->if->f->getClassDefinition->if->f2->isLocal->env->c->getClassDeclaration->error->else->env->c->getClassDeclaration->f2->getClassDeclaration->error->if->f->isStatic->base->f->getClassDeclaration->getType->new->TypeExpression->new->FieldExpression->else->base->ctx->findOuterLink->if->new->FieldExpression->if->ctx->canReach->env->field->getClassDeclaration->error->return->return->catch->env->error->env->getClassDeclaration->getClassDeclaration->error->finally->return
IdentifierExpression#checkValue(Environment, Context, Vset, Hashtable):::Check expression:::if->return->if->bind->get->getClassDefinition->field->getClassDeclaration->addDependency->if->implementation->checkValue->return
IdentifierExpression#checkLHS(Environment, Context, Vset, Hashtable):::Check the expression if it appears on the LHS of an assignment:::if->bind->return->assign->if->implementation->checkValue->return
IdentifierExpression#checkAssignOp(Environment, Context, Vset, Hashtable, Expression):::Check the expression if it appears on the LHS of an op= expression:::if->bind->return->get->assign->if->implementation->checkValue->return
IdentifierExpression#getAssigner(Environment, Context):::Return an accessor if one is needed for assignments to this expression.:::if->return->implementation->getAssigner->return
IdentifierExpression#getUpdater(Environment, Context):::Return an updater if one is needed for assignments to this expression.:::if->return->implementation->getUpdater->return
IdentifierExpression#checkAmbigName(Environment, Context, Vset, Hashtable, UnaryExpression):::Check if the present name is part of a scoping prefix.:::try->if->ctx->getField->return->checkValue->catch->finally->c->toResolvedType->if->c->getType->new->TypeExpression->return->return
IdentifierExpression#toType(Environment, Context):::Convert an identifier to a type:::c->toResolvedType->if->return->c->getType->return
IdentifierExpression#isConstant():::Check if constant:  Will it inline away?:::if->return->implementation->isConstant->if->return->field->isConstant->return
IdentifierExpression#inline(Environment, Context):::Inline:::return
IdentifierExpression#codeLValue(Environment, Context, Assembler):::Code local vars (object fields have been inlined away):::return
IdentifierExpression#print(PrintStream):::Print:::out->field->hashCode->print->if->out->print->implementation->print
IfStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->newctx->new->CheckContext->cvars->cond->reach->checkCondition->convert->vsTrue->clearDeadEnd->vsFalse->clearDeadEnd->ifTrue->check->if->ifFalse->check->vsTrue->vsFalse->join->join->return->ctx->removeAdditionalVars
IfStatement#inline(Environment, Context):::Inline:::new->Context->cond->inlineValue->if->ifTrue->inline->if->ifFalse->inline->if->cond->equals->return->eliminate->if->cond->equals->return->eliminate->if->return->new->ExpressionStatement->inline->eliminate->if->new->NotExpression->inlineValue->return->new->IfStatement->eliminate->return
IfStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->cond->copyInline->if->ifTrue->copyInline->if->ifFalse->copyInline->return
IfStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::cost->cond->costInline->if->ifTrue->costInline->if->ifFalse->costInline->return
IfStatement#code(Environment, Context, Assembler):::Code:::newctx->new->CodeContext->l1->new->Label->cond->codeBranch->ifTrue->code->if->l2->new->Label->asm->add->asm->add->ifFalse->code->asm->add->else->asm->add->asm->add
IfStatement#print(PrintStream, int):::Print:::super->print->out->print->cond->print->out->print->ifTrue->print->if->out->print->ifFalse->print
IncDecExpression#checkValue(Environment, Context, Vset, Hashtable):::Check an increment or decrement expression:::right->checkAssignOp->if->inMask->else->if->isType->env->error->right->getUpdater->return
IncDecExpression#check(Environment, Context, Vset, Hashtable):::Check void expression:::return->checkValue
IncDecExpression#inline(Environment, Context):::Inline:::return->inlineValue
InlineMethodExpression#inline(Environment, Context):::Inline:::body->new->Context->inline->if->return->else->if->expr->if->type->isType->throw->new->CompilerError->return->else->return
InlineMethodExpression#copyInline(Context):::Create a copy of the expression for method inlining:::e->clone->if->body->copyInline->return
InlineMethodExpression#code(Environment, Context, Assembler):::Code:::super->code
InlineMethodExpression#print(PrintStream):::Print:::out->print->body->print->out->print
InlineNewInstanceExpression#inline(Environment, Context):::Inline:::return->inlineValue
InlineNewInstanceExpression#copyInline(Context):::Create a copy of the expression for method inlining:::e->clone->body->copyInline->return
InlineNewInstanceExpression#code(Environment, Context, Assembler):::Code:::codeCommon
InlineNewInstanceExpression#print(PrintStream):::Print:::v->field->getArguments->elementAt->out->v->hashCode->field->hashCode->println->if->body->print->else->out->print->out->print
InlineReturnStatement#getDestination(Context):::Get the destination context of a break:::for->return
InlineReturnStatement#inline(Environment, Context):::Inline:::if->expr->inlineValue->return
InlineReturnStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->if->expr->copyInline->return
InlineReturnStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::return->expr->costInline
InlineReturnStatement#code(Environment, Context, Assembler):::Code:::if->expr->codeValue->destctx->getDestination->asm->add
InlineReturnStatement#print(PrintStream, int):::Print:::super->print->out->print->if->out->print->expr->print->out->print
InstanceOfExpression#checkValue(Environment, Context, Vset, Hashtable):::Check the expression:::left->checkValue->right->toType->new->TypeExpression->if->isType->isType->return->if->inMask->env->error->return->try->if->env->explicitCast->env->error->catch->env->error->finally->return
InstanceOfExpression#inline(Environment, Context):::Inline:::return->left->inline
InstanceOfExpression#codeValue(Environment, Context, Assembler):::Code:::left->codeValue->if->isType->asm->env->getClassDeclaration->add->else->asm->add
InstanceOfExpression#print(PrintStream):::Print:::out->print->left->print->out->print->if->out->toString->print->else->right->print->out->print
IntegerExpression#fitsType(Environment, Context, Type):::See if this number fits in the given type.:::if->isType->return->super->fitsType->switch->t->getTypeCode->return->return->return->return->super->fitsType
IntegerExpression#getValue():::Get the value:::return
IntegerExpression#equals(int):::Check if the expression is equal to a value:::return
IntegerExpression#equalsDefault():::Check if the expression is equal to its default static value:::return
IntegerExpression#codeValue(Environment, Context, Assembler):::Code:::asm->add
IntExpression#equals(Object):::Equality, this is needed so that switch statements can put IntExpressions in a hashtable:::if->return->return
IntExpression#hashCode():::Hashcode, this is needed so that switch statements can put IntExpressions in a hashtable:::return
IntExpression#print(PrintStream):::Print:::out->print
LengthExpression#checkValue(Environment, Context, Vset, Hashtable):::Select the type of the expression:::right->checkValue->if->isType->env->error->return
LengthExpression#codeValue(Environment, Context, Assembler):::Code:::right->codeValue->asm->add
LessExpression#eval(int, int):::Evaluate:::return->new->BooleanExpression
LessExpression#simplify():::Simplify:::if->left->isConstant->right->isConstant->return->new->GreaterExpression->return
LessExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::left->codeValue->switch->getTypeCode->if->right->equals->right->codeValue->asm->add->return->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->throw->new->CompilerError->asm->add
LessOrEqualExpression#eval(int, int):::Evaluate:::return->new->BooleanExpression
LessOrEqualExpression#simplify():::Simplify:::if->left->isConstant->right->isConstant->return->new->GreaterOrEqualExpression->return
LessOrEqualExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::left->codeValue->switch->getTypeCode->if->right->equals->right->codeValue->asm->add->return->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->throw->new->CompilerError->asm->add
LocalMember#getScopeNumber():::Return current nesting level, i.e., the value of 'scopeNumber':::return
LocalMember#getMember():::Is this a proxy for the given field?:::return
LocalMember#isLocal():::Special checks:::return
LocalMember#copyInline(Context):::Make a copy of this field, which is an argument to a method or constructor:::copy->new->LocalMember->copy->addModifiers->if->getModifiers->throw->new->CompilerError->return
LocalMember#getCurrentInlineCopy(Context):::Returns the previous result of copyInline(ctx):::accessPeer->if->accessPeer->getModifiers->copy->return->return
LocalMember#copyArguments(Context, MemberDefinition):::May inline copies of all the arguments of the given method.:::v->field->getArguments->res->v->size->new->LocalMemberArr->v->copyInto->for->i->return
LocalMember#doneWithArguments(Context, LocalMember[]):::Call this when finished with the result of a copyArguments() call.:::for->i
LocalMember#isInlineable(Environment, boolean):::Is this local variable's value stable and simple enough to be directly substituted for occurrences of the variable itself? (This decision is made by VarDeclarationStatement.inline().):::return->getModifiers
LocalMember#isUsed():::Check if used:::return
LocalMember#getValue(Environment):::Return value:::return->getValue
LocalMember#getNumber(Context):::Value number for vsets, or -1 if none.:::return
LongExpression#getValue():::Get the value:::return
LongExpression#equals(int):::Check if the expression is equal to a value:::return
LongExpression#equalsDefault():::Check if the expression is equal to its default static value:::return
LongExpression#codeValue(Environment, Context, Assembler):::Code:::asm->add
LongExpression#print(PrintStream):::Print:::out->print
MethodExpression#checkValue(Environment, Context, Vset, Hashtable):::Check expression type:::c->isArray->staticRef->implMethod->ctxClass->getClassDefinition->args->if->id->equals->conCls->try->conOuter->if->conCls->getSuperClass->getClassDefinition->else->if->NewInstanceExpression->insertOuterLink->catch->finally->argTypes->new->TypeArr->sourceClass->try->if->isStatic->cdef->m->for->cdef->getOuterClass->if->getClassDeclaration->else->cdef->getClassDeclaration->if->m->getClassDefinition->cdef2->while->cdef2->getOuterClass->m2->cdef2->findAnyMethod->if->m2->getClassDefinition->env->cdef->getClassDeclaration->cdef2->getClassDeclaration->error->break->else->if->id->equals->thisN->ctx->getThisNumber->if->isConstructor->env->error->return->vset->addVar->if->vset->isReallyDeadEnd->vset->testVar->env->error->return->vset->addVar->if->right->checkAmbigName->else->right->checkValue->else->right->checkAmbigName->if->FieldExpression->reportFailedPackagePrefix->return->if->if->isType->env->getClassDeclaration->else->if->isType->env->getClassDeclaration->else->if->isType->env->error->return->if->id->if->else->if->else->if->if->if->FieldExpression->isTypeAccessible->cdecl->sourceClass->getClassDeclaration->if->env->toString->error->else->env->toString->error->hasErrors->if->id->equals->vset->ctx->getThisNumber->clearVar->for->i->if->id->equals->vset->ctx->getThisNumber->addVar->if->return->c->getClassDefinition->if->clazz->matchMethod->if->if->id->equals->if->diagnoseMismatch->return->sig->clazz->getName->getName->toString->Type->tMethod->typeString->env->error->return->sig->id->toString->Type->tMethod->typeString->if->clazz->findAnyMethod->if->ctx->getField->env->error->else->env->error->else->if->diagnoseMismatch->else->env->error->return->field->getType->getReturnType->if->field->isStatic->env->field->getClassDeclaration->error->return->if->field->isProtected->sourceClass->protectedAccess->env->field->getName->field->getClassDeclaration->error->return->if->if->field->isPrivate->if->sourceClass->getAccessMember->if->field->isPrivate->cdef->field->getClassDefinition->if->cdef->getAccessMember->if->field->isAbstract->env->field->getClassDeclaration->error->return->if->field->reportDeprecated->if->field->isConstructor->env->error->else->env->field->getClassDefinition->error->if->field->isConstructor->equals->env->error->if->declarer->field->getClassDefinition->if->field->isConstructor->declarer->isPackagePrivate->declarer->getName->getQualifier->sourceClass->getName->getQualifier->equals->MemberDefinition->makeProxyMember->sourceClass->field->getClassDeclaration->addDependency->if->ctxClass->field->getClassDeclaration->addDependency->catch->env->error->return->env->error->return->finally->if->field->isStatic->ctx->findOuterLink->right->checkValue->field->getType->getArgumentTypes->for->i->if->field->isConstructor->m->if->nargs->newargs->if->rightI->if->new->SuperExpression->else->if->new->ThisExpression->else->throw->new->CompilerError->if->new->ExpressionArr->new->ExpressionArr->new->NullExpression->for->i->else->for->i->new->MethodExpression->else->if->new->ExpressionArr->new->NullExpression->for->i->new->MethodExpression->else->if->throw->new->CompilerError->if->oldargs->if->field->isStatic->call->new->MethodExpression->new->CommaExpression->else->nargs->newargs->new->ExpressionArr->for->i->new->MethodExpression->if->isConstructor->field->isConstructor->e->makeVarInits->if->if->this->clone->new->CommaExpression->exceptions->field->getExceptions->if->field->getName->field->getType->getArgumentTypes->new->ClassDeclarationArr->for->p->for->i->if->isConstructor->field->isConstructor->cls->field->getClassDefinition->for->f->cls->getFirstMember->f->getNextMember->return
MethodExpression#check(Environment, Context, Vset, Hashtable):::Check void expression:::return->checkValue
MethodExpression#diagnoseMismatch(Environment, Expression[], Type[]):::We're about to report a "unmatched method" error:::margType->new->TypeArr->saidSomething->start->while->code->clazz->diagnoseMismatch->opName->id->equals->if->env->error->if->break->i->castOK->ambig->targetType->ttype->if->env->error->else->env->error->return
MethodExpression#codeValue(Environment, Context, Assembler):::Code:::if->throw->new->CompilerError->i->if->field->isStatic->if->right->code->else->if->asm->add->else->if->right->codeValue->if->idInit->equals->refc->field->getClassDefinition->r->refc->getReferencesFrozen->if->if->r->isClientOuterField->codeValue->r->codeArguments->else->right->codeValue->for->if->field->isStatic->asm->add->else->if->field->isConstructor->field->isPrivate->asm->add->else->if->field->getClassDefinition->isInterface->asm->add->else->asm->add->if->idInit->equals->refc->getClassDefinition->r->refc->getReferencesFrozen->if->r->codeInitialization
MethodExpression#firstConstructor():::Check if the first thing is a constructor invocation:::return->id->equals
MethodExpression#print(PrintStream):::Print:::out->print->if->out->print->right->print->out->print->for->i->out->print->if->out->print->implementation->print
MultiplyExpression#eval(int, int):::Evaluate:::return->new->IntExpression
MultiplyExpression#simplify():::Simplify:::if->left->equals->return->if->right->equals->return->return
MultiplyExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
NaryExpression#copyInline(Context):::Create a copy of the expression for method inlining:::e->clone->if->right->copyInline->new->ExpressionArr->for->i->return
NaryExpression#costInline(int, Environment, Context):::The cost of inlining this expression:::cost->if->right->costInline->for->i->return
NaryExpression#print(PrintStream):::Print:::out->hashCode->print->if->out->print->right->print->for->i->out->print
NegativeExpression#selectType(Environment, Context, int):::Select the type of the expression:::if->else->if->else->if->else->convert
NegativeExpression#eval(int):::Evaluate:::return->new->IntExpression
NegativeExpression#simplify():::Simplify:::if->return->return
NegativeExpression#codeValue(Environment, Context, Assembler):::Code:::right->codeValue->asm->type->getTypeCodeOffset->add
NewArrayExpression#checkValue(Environment, Context, Vset, Hashtable):::Check:::right->toType->flag->for->i->if->init->checkInitializer->convert->return
NewArrayExpression#inline(Environment, Context):::Inline:::e->for->i->if->new->CommaExpression->return->e->inline
NewArrayExpression#codeValue(Environment, Context, Assembler):::Code:::t->for->i->if->asm->new->ArrayData->add->return->switch->type->getElementType->getTypeCode->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->add->break->asm->type->getElementType->add->break->asm->env->type->getElementType->getClassDeclaration->add->break->throw->new->CompilerError
NewInstanceExpression#getOuterArg():::From the "new" in an expression of the form outer.new InnerCls(...), return the "outer" expression, or null if there is none.:::return
NewInstanceExpression#checkValue(Environment, Context, Vset, Hashtable):::Check expression type:::def->alreadyChecked->try->if->outerArg->checkValue->typeName->FieldExpression->toIdentifier->if->typeName->isQualified->env->error->if->isType->if->isType->env->error->else->oc->env->getClassDefinition->nm->oc->resolveInnerClass->Type->tClass->new->TypeExpression->env->getClassDefinition->resolve->if->right->toType->new->TypeExpression->if->isType->env->getClassDefinition->catch->env->error->env->error->finally->t->hasErrors->t->isType->if->t->isType->if->env->error->if->return->args->NewInstanceExpression->insertOuterLink->if->else->if->new->CommaExpression->argTypes->new->TypeArr->for->i->try->if->return->sourceClass->getClassDefinition->c->env->getClassDeclaration->if->packageName->sourceClass->getName->getQualifier->superDef->if->def->isInterface->env->getClassDefinition->else->constructor->superDef->matchAnonConstructor->if->if->env->dtEvent->body->constructor->getType->getArgumentTypes->checkLocalClass->body->getClassDeclaration->getType->else->if->def->isInterface->env->error->return->if->def->mustBeAbstract->env->error->return->def->matchMethod->if->anyInit->def->findAnyMethod->if->new->MethodExpression->diagnoseMismatch->return->sig->c->getName->getName->toString->Type->tMethod->typeString->env->error->return->if->field->isPrivate->cdef->field->getClassDefinition->if->cdef->getAccessMember->if->def->mustBeAbstract->env->error->return->if->field->reportDeprecated->env->field->getClassDefinition->error->if->field->isProtected->sourceClass->getName->getQualifier->field->getClassDeclaration->getName->getQualifier->equals->env->error->catch->env->error->return->env->error->return->finally->field->getType->getArgumentTypes->for->i->if->for->i->exceptions->field->getExceptions->for->i->return
NewInstanceExpression#insertOuterLink(Environment, Context, long, ClassDefinition, Expression, Expression[]):::Given a list of arguments for a constructor, return a possibly modified list which includes the hidden argument which initializes the uplevel self pointer.:::if->def->isTopLevel->def->isLocal->args2->new->ExpressionArr->System->arraycopy->try->if->ctx->def->findAnyMethod->findOuterLink->catch->finally->return
NewInstanceExpression#check(Environment, Context, Vset, Hashtable):::Check void expression:::return->checkValue
NewInstanceExpression#code(Environment, Context, Assembler):::Code:::codeCommon
Node#getOp():::Get the operator:::return
Node#getWhere():::Get where:::return
Node#convert(Environment, Context, Type, Expression):::Implicit conversions:::if->isType->t->isType->return->if->equals->return->try->if->e->fitsType->return->new->ConvertExpression->if->env->explicitCast->env->error->return->new->ConvertExpression->catch->env->error->finally->env->error->return->new->ConvertExpression
Node#print(PrintStream):::Print:::throw->new->CompilerError
Node#clone():::Clone this object.:::try->return->super->clone->catch->throw->new->InternalError->initCause->finally
NotEqualExpression#eval(int, int):::Evaluate:::return->new->BooleanExpression
NotEqualExpression#simplify():::Simplify:::if->left->isConstant->right->isConstant->return->new->NotEqualExpression->return
NotEqualExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::left->codeValue->switch->getTypeCode->if->right->equals->right->codeValue->asm->add->return->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->right->codeValue->asm->add->break->if->right->equals->asm->add->else->right->codeValue->asm->add->return->throw->new->CompilerError->asm->add
NotExpression#selectType(Environment, Context, int):::Select the type of the expression:::convert
NotExpression#eval(boolean):::Evaluate:::return->new->BooleanExpression
NotExpression#simplify():::Simplify:::switch->return->break->return->bin->if->inMask->return->switch->return->new->NotEqualExpression->return->new->EqualExpression->return->new->GreaterOrEqualExpression->return->new->GreaterExpression->return->new->LessOrEqualExpression->return->new->LessExpression->return
NotExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::right->codeBranch
NotExpression#codeValue(Environment, Context, Assembler):::Instead of relying on the default code generation which uses conditional branching, generate a simpler stream using XOR.:::right->codeValue->asm->add->asm->add
NullExpression#equals(int):::Check if the expression is equal to a value:::return
NullExpression#codeValue(Environment, Context, Assembler):::Code:::asm->add
NullExpression#print(PrintStream):::Print:::out->print
OrExpression#eval(boolean, boolean):::Evaluate:::return->new->BooleanExpression
OrExpression#simplify():::Simplify:::if->right->equals->return->if->left->equals->return->if->left->equals->return->if->right->equals->return->new->CommaExpression->simplify->return
OrExpression#codeBranch(Environment, Context, Assembler, Label, boolean):::Code:::if->left->codeBranch->right->codeBranch->else->lbl2->new->Label->left->codeBranch->right->codeBranch->asm->add
PositiveExpression#selectType(Environment, Context, int):::Select the type of the expression:::if->else->if->else->if->else->convert
PositiveExpression#simplify():::Simplify:::return
PostDecExpression#codeValue(Environment, Context, Assembler):::Code:::codeIncDec
PostIncExpression#codeValue(Environment, Context, Assembler):::Code:::codeIncDec
PreDecExpression#codeValue(Environment, Context, Assembler):::Code:::codeIncDec
PreIncExpression#codeValue(Environment, Context, Assembler):::Code:::codeIncDec
RemainderExpression#eval(int, int):::Evaluate:::return->new->IntExpression
RemainderExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
ReturnStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->reach->if->expr->checkValue->if->isInitializer->env->error->return->if->getType->getReturnType->isType->if->if->isConstructor->env->error->else->env->error->else->if->env->error->else->getType->getReturnType->convert->mctx->ctx->getReturnContext->if->join->exitctx->ctx->getTryExitContext->if->join->if->outerFinallyNode->for->c->if->if->else->return
ReturnStatement#inline(Environment, Context):::Inline:::if->expr->inlineValue->return
ReturnStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::return->expr->costInline
ReturnStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::e->expr->copyInline->if->body->new->ExpressionStatement->new->InlineReturnStatement->return->new->CompoundStatement->return->new->InlineReturnStatement
ReturnStatement#code(Environment, Context, Assembler):::Code:::if->codeFinally->asm->add->else->expr->codeValue->codeFinally->asm->getTypeCodeOffset->add
ReturnStatement#print(PrintStream, int):::Print:::super->print->out->print->if->out->print->expr->print->out->print
ShiftLeftExpression#eval(int, int):::Evaluate:::return->new->IntExpression
ShiftLeftExpression#simplify():::Simplify:::if->right->equals->return->if->left->equals->return->new->CommaExpression->simplify->return
ShiftLeftExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
ShiftRightExpression#eval(int, int):::Evaluate:::return->new->IntExpression
ShiftRightExpression#simplify():::Simplify:::if->right->equals->return->if->left->equals->return->new->CommaExpression->simplify->return
ShiftRightExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
ShortExpression#print(PrintStream):::Print:::out->print
Statement#insertStatement(Statement, Statement):::Insert a bit of code at the front of a statement:::if->else->if->insertStatement->else->body->s1->getWhere->new->CompoundStatement->return
Statement#setLabel(Environment, Expression):::Set the label of a statement:::if->if->new->IdentifierArr->else->newLabels->new->IdentifierArr->System->arraycopy->else->env->error
Statement#checkMethod(Environment, Context, Vset, Hashtable):::Check a statement:::mctx->new->Statement->new->CheckContext->check->if->getType->getReturnType->isType->if->vset->isDeadEnd->env->getWhere->error->vset->join->return
Statement#checkLabel(Environment, Context):::Make sure the labels on this statement do not duplicate the labels on any enclosing statement:::if->for->i
Statement#checkBlockStatement(Environment, Context, Vset, Hashtable):::This is called in contexts where declarations are valid.:::return->check
Statement#inline(Environment, Context):::Inline:::return
Statement#eliminate(Environment, Statement):::Eliminate this statement, which is only possible if it has no label.:::if->args->new->CompoundStatement->return
Statement#code(Environment, Context, Assembler):::Code:::throw->new->CompilerError
Statement#codeFinally(Environment, Context, Assembler, Context, Type):::Generate the code to call all finally's for a break, continue, or return statement:::num->haveCleanup->haveNonLocalFinally->for->c->if->return->if->def->getClassDefinition->if->lf->ctx->getLocalField->asm->save->getTypeCodeOffset->add->else->switch->getType->getReturnType->getTypeCode->break->asm->add->break->asm->add->break->for->c->if->asm->save->getTypeCodeOffset->add
Statement#firstConstructor():::Check if the first thing is a constructor invocation:::return
Statement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::return->clone
Statement#printIndent(PrintStream, int):::Print:::for->i
StringExpression#codeValue(Environment, Context, Assembler):::Code:::asm->add
StringExpression#getValue():::Get the value:::return
StringExpression#hashCode():::Hashcode:::return->value->hashCode
StringExpression#equals(Object):::Equality:::if->return->value->equals->return
StringExpression#print(PrintStream):::Print:::out->print
SubtractExpression#eval(int, int):::Evaluate:::return->new->IntExpression
SubtractExpression#simplify():::Simplify:::if->type->inMask->if->left->equals->return->new->NegativeExpression->if->right->equals->return->return
SubtractExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
SuperExpression#checkValue(Environment, Context, Vset, Hashtable):::Check expression:::checkCommon->if->env->error->return
SuperExpression#checkAmbigName(Environment, Context, Vset, Hashtable, UnaryExpression):::Check if the present name is part of a scoping prefix.:::return->checkCommon
SwitchStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->newctx->new->CheckContext->expr->reach->checkValue->switchType->convert->tab->new->Hashtable<>->hasDefault->vs->for->i->if->vs->isDeadEnd->join->if->return->ctx->removeAdditionalVars
SwitchStatement#inline(Environment, Context):::Inline:::new->Context->expr->inlineValue->for->i->return
SwitchStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->expr->copyInline->new->StatementArr->for->i->return
SwitchStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::cost->expr->costInline->for->i->return
SwitchStatement#code(Environment, Context, Assembler):::Code:::newctx->new->CodeContext->expr->codeValue->sw->new->SwitchData->hasDefault->for->i->if->env->coverage->sw->initTableCase->asm->add->for->i->if->asm->sw->getDefaultLabel->add->asm->add
SwitchStatement#print(PrintStream, int):::Print:::super->print->out->print->expr->print->out->print->for->i->printIndent->out->print
SynchronizedStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->newctx->new->CheckContext->reach->expr->checkValue->if->equals->env->error->Type->tClass->convert->body->check->return->ctx->vset->join->removeAdditionalVars
SynchronizedStatement#inline(Environment, Context):::Inline:::if->body->inline->expr->inlineValue->return
SynchronizedStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->expr->copyInline->if->body->copyInline->return
SynchronizedStatement#costInline(int, Environment, Context):::Compute cost of inlining this statement:::cost->if->expr->costInline->if->return->if->body->costInline->return
SynchronizedStatement#code(Environment, Context, Assembler):::Code:::clazz->getClassDefinition->expr->codeValue->new->Context->if->returnType->getType->getReturnType->localfield->new->LocalMember->ctx->declare->Environment->debugOutput->f1->new->LocalMember->f2->new->LocalMember->num1->ctx->declare->num2->ctx->declare->endLabel->new->Label->td->new->TryData->td->add->asm->add->asm->add->asm->add->bodyctx->new->CodeContext->asm->add->if->body->code->else->asm->add->asm->add->asm->td->getEndLabel->add->asm->add->asm->add->asm->add->cd->td->getCatch->asm->cd->getLabel->add->asm->add->asm->add->asm->add->asm->add->asm->add->asm->add->asm->add->asm->add->asm->add
SynchronizedStatement#print(PrintStream, int):::Print:::super->print->out->print->expr->print->out->print->if->body->print->else->out->print
ThisExpression#getOuterArg():::From the 'this' in an expression of the form outer.this(...), or the 'super' in an expression of the form outer.super(...), return the "outer" expression, or null if there is none.:::return
ThisExpression#checkValue(Environment, Context, Vset, Hashtable):::Check expression:::if->isStatic->env->error->return->if->ctx->getLocalField->if->ctx->makeReference->if->vset->testVar->env->error->if->getClassDeclaration->getType->else->field->getType->return
ThisExpression#inlineValue(Environment, Context):::Inline:::if->return->implementation->inlineValue->if->field->isInlineable->e->field->getValue->if->e->copyInline->return->return
ThisExpression#copyInline(Context):::Create a copy of the expression for method inlining:::if->return->implementation->copyInline->e->clone->if->ctx->getLocalField->else->field->getCurrentInlineCopy->if->outerArg->copyInline->return
ThisExpression#codeValue(Environment, Context, Assembler):::Code:::asm->add
ThisExpression#print(PrintStream):::Print:::if->out->print->outerArg->print->out->print->pfx->field->getClassDefinition->getName->getFlatName->getName->out->field->hashCode->print->if->out->print
ThrowStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->try->reach->expr->checkValue->if->isType->c->env->getClassDeclaration->if->exp->get->exp->put->def->c->getClassDefinition->throwable->env->getClassDeclaration->if->def->subClassOf->env->error->convert->else->if->isType->env->error->catch->env->error->finally->exitctx->ctx->getTryExitContext->if->join->return
ThrowStatement#inline(Environment, Context):::Inline:::expr->inlineValue->return
ThrowStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->expr->copyInline->return
ThrowStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::return->expr->costInline
ThrowStatement#code(Environment, Context, Assembler):::Code:::expr->codeValue->asm->add
ThrowStatement#print(PrintStream, int):::Print:::super->print->out->print->expr->print->out->print
TryStatement#check(Environment, Context, Vset, Hashtable):::Check statement:::checkLabel->try->reach->newexp->new->Hashtable<>->newctx->new->CheckContext->vs->body->vset->copy->check->cvs->Vset->vs->copy->join->firstDAandSecondDU->for->i->for->i->ignore1->env->getClassDeclaration->ignore2->env->getClassDeclaration->for->i->for->e->newexp->keys->e->hasMoreElements->return->ctx->vs->join->removeAdditionalVars->catch->env->error->return->finally
TryStatement#inline(Environment, Context):::Inline:::if->body->new->Context->inline->if->return->for->i->return->eliminate
TryStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->if->body->copyInline->new->StatementArr->for->i->return
TryStatement#costInline(int, Environment, Context):::Compute cost of inlining this statement:::return
TryStatement#code(Environment, Context, Assembler):::Code:::newctx->new->CodeContext->td->new->TryData->for->i->asm->add->if->body->code->asm->td->getEndLabel->add->asm->add->for->i->asm->add
TryStatement#print(PrintStream, int):::Print:::super->print->out->print->if->body->print->else->out->print->for->i
TypeExpression#toType(Environment, Context):::Convert to a type:::return
TypeExpression#checkValue(Environment, Context, Vset, Hashtable):::Check an expression:::env->error->return
TypeExpression#print(PrintStream):::Print:::out->type->toString->print
UnaryExpression#order():::Order the expression based on precedence:::if->precedence->right->precedence->e->order->return->return
UnaryExpression#selectType(Environment, Context, int):::Select the type of the expression:::throw->new->CompilerError
UnaryExpression#checkValue(Environment, Context, Vset, Hashtable):::Check a unary expression:::right->checkValue->tm->getTypeMask->selectType->if->type->isType->env->error->return
UnaryExpression#isConstant():::Check if constant:::switch->return->right->isConstant->return
UnaryExpression#eval(int):::Evaluate:::return
UnaryExpression#inline(Environment, Context):::Inline:::return->right->inline
UnaryExpression#copyInline(Context):::Create a copy of the expression for method inlining:::e->clone->if->right->copyInline->return
UnaryExpression#costInline(int, Environment, Context):::The cost of inlining this expression:::return->right->costInline
UnaryExpression#print(PrintStream):::Print:::out->print->right->print->out->print
UnsignedShiftRightExpression#eval(int, int):::Evaluate:::return->new->IntExpression
UnsignedShiftRightExpression#simplify():::Simplify:::if->right->equals->return->if->left->equals->return->new->CommaExpression->simplify->return
UnsignedShiftRightExpression#codeOperation(Environment, Context, Assembler):::Code:::asm->type->getTypeCodeOffset->add
UplevelReference#insertInto(UplevelReference):::Insert self into a list of references:::if->isEarlierThan->return->else->prev->while->isEarlierThan->return
UplevelReference#isEarlierThan(UplevelReference):::Tells if self precedes the other in the canonical ordering.:::if->isClientOuterField->return->else->if->other->isClientOuterField->return->target2->name->target->getName->name2->target2->getName->cmp->name->toString->name2->toString->compareTo->if->return->cname->target->getClassDefinition->getName->cname2->target2->getClassDefinition->getName->ccmp->cname->toString->cname2->toString->compareTo->return
UplevelReference#getTarget():::the target of this reference:::return
UplevelReference#getLocalArgument():::the local argument for this reference:::return
UplevelReference#getLocalField():::the field allocated in the client for this reference:::return
UplevelReference#getLocalField(Environment):::Get the local field, creating one if necessary:::if->makeLocalField->return
UplevelReference#getClient():::the client class:::return
UplevelReference#getNext():::the next reference in the client's list:::return
UplevelReference#isClientOuterField():::Tell if this uplevel reference is the up-level "this" pointer of an inner class:::outerf->client->findOuterMember->return
UplevelReference#localArgumentAvailable(Environment, Context):::Tell if my local argument is directly available in this context:::reff->if->reff->getClassDefinition->throw->new->CompilerError->return->reff->isConstructor->reff->isVariable->reff->isInitializer
UplevelReference#noteReference(Environment, Context):::Process an uplevel reference:::if->localArgumentAvailable->makeLocalField
UplevelReference#makeLocalReference(Environment, Context):::Assuming noteReference() is all taken care of, build an uplevel reference:::if->getClassDefinition->throw->new->CompilerError->if->localArgumentAvailable->return->new->IdentifierExpression->else->return->makeFieldReference
UplevelReference#makeFieldReference(Environment, Context):::As with makeLocalReference(), build a locally-usable reference:::e->ctx->findOuterLink->return->new->FieldExpression
UplevelReference#willCodeArguments(Environment, Context):::During the inline phase, call this on a list of references for which the code phase will later emit arguments:::if->isClientOuterField->ctx->noteReference->if->next->willCodeArguments
UplevelReference#codeArguments(Environment, Context, Assembler, long, MemberDefinition):::Code is being generated for a call to a constructor of the client class:::if->isClientOuterField->e->ctx->makeReference->e->codeValue->if->next->codeArguments
UplevelReference#codeInitialization(Environment, Context, Assembler, long, MemberDefinition):::Code is being generated for a constructor of the client class:::if->isClientOuterField->e->ctx->makeReference->f->makeFieldReference->e->getWhere->new->AssignExpression->localField->getType->e->code->if->next->codeInitialization
VarDeclarationStatement#checkDeclaration(Environment, Context, Vset, int, Type, Hashtable):::Check statement:::if->env->error->if->if->ctx->field->getName->getLocalClass->field->isInnerClass->env->field->getName->error->ctx->declare->if->field->isInnerClass->body->field->getInnerClass->try->body->checkLocalClass->catch->env->error->finally->return->vset->addVar->return->expr->checkValue->e->if->else->declError->t->isType->while->array->if->env->error->Type->tArray->if->id->if->ctx->getLocalField->env->error->getClassDefinition->new->LocalMember->ctx->declare->if->expr->checkInitializer->convert->field->setValue->if->field->isConstant->field->addModifiers->vset->addVar->else->if->vset->addVar->else->vset->addVarUnassigned->return->env->error->return
VarDeclarationStatement#inline(Environment, Context):::Inline:::if->field->isInnerClass->body->field->getInnerClass->body->inlineLocalClass->return->if->env->opt->field->isUsed->return->new->ExpressionStatement->inline->ctx->declare->if->expr->inlineValue->field->setValue->if->env->opt->if->e->if->isLocal->ctx->getInlineContext->field->setValue->field->addModifiers->if->expr->isConstant->field->setValue->field->addModifiers->return
VarDeclarationStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->if->expr->copyInline->return
VarDeclarationStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::if->field->isInnerClass->return->return->expr->costInline
VarDeclarationStatement#code(Environment, Context, Assembler):::Code:::if->isType->ctx->declare->expr->codeValue->asm->field->getType->getTypeCodeOffset->new->LocalVariable->add->else->ctx->declare->if->expr->code
VarDeclarationStatement#print(PrintStream, int):::Print:::out->print->if->out->field->hashCode->print->if->out->print->expr->print->else->expr->print->out->print
Vset#copy():::Create an copy of the given Vset:::if->return->vs->new->Vset->if->vs->growX->return
Vset#isReallyDeadEnd():::Ask if this is a vset for a dead end:::return
Vset#clearDeadEnd():::Replace canonical DEAD_END with a distinct but equivalent Vset:::if->return->new->Vset->return
Vset#testVar(int):::Ask if a var is definitely assigned.:::bit->if->i->if->return->return->else->return
Vset#testVarUnassigned(int):::Ask if a var is definitely un-assigned:::bit->if->i->if->return->return->else->return
Vset#addVar(int):::Note that a var is definitely assigned:::if->return->bit->if->i->if->growX->if->else->return
Vset#addVarUnassigned(int):::Note that a var is definitely un-assigned:::if->return->bit->if->i->if->growX->else->return
Vset#clearVar(int):::Retract any assertion about the var:::if->return->bit->if->i->if->return->if->else->return
Vset#join(Vset):::Join with another vset:::if->return->other->copy->if->return->if->return->other->copy->if->return->if->else->otherX->selfLength->limit->for->i->for->i->return
Vset#removeAdditionalVars(int):::Remove variables from the vset that are no longer part of a context:::if->return->bit->if->i->if->if->while->else->if->return
Vset#varLimit():::Return one larger than the highest bit set.:::vset->result->for->i->if->break->else->return->while->return
WhileStatement#check(Environment, Context, Vset, Hashtable):::Check a while statement:::checkLabel->newctx->new->CheckContext->vsEntry->vset->copy->cvars->cond->reach->checkCondition->convert->body->check->vset->join->ctx->checkBackBranch->join->return->ctx->removeAdditionalVars
WhileStatement#inline(Environment, Context):::Inline:::new->Context->cond->inlineValue->if->body->inline->return
WhileStatement#costInline(int, Environment, Context):::The cost of inlining this statement:::return->cond->costInline->body->costInline
WhileStatement#copyInline(Context, boolean):::Create a copy of the statement for method inlining:::s->clone->cond->copyInline->if->body->copyInline->return
WhileStatement#code(Environment, Context, Assembler):::Code:::newctx->new->CodeContext->asm->add->l1->new->Label->asm->add->if->body->code->asm->add->cond->codeBranch->asm->add
WhileStatement#print(PrintStream, int):::Print:::super->print->out->print->cond->print->if->out->print->body->print->else->out->print

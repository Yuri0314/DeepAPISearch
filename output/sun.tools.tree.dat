sun.tools.tree.AddExpression#selectType(Environment, Context, int)->void:::Select the type
sun.tools.tree.AddExpression#isNonNull()->boolean::: add expression is non null
sun.tools.tree.AddExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.AddExpression#eval(long, long)->Expression::: add expression eval
sun.tools.tree.AddExpression#eval(float, float)->Expression::: add expression eval
sun.tools.tree.AddExpression#eval(double, double)->Expression::: add expression eval
sun.tools.tree.AddExpression#eval(String, String)->Expression::: add expression eval
sun.tools.tree.AddExpression#inlineValue(Environment, Context)->Expression:::Inline the value of an AddExpression
sun.tools.tree.AddExpression#inlineValueSB(Environment, Context, StringBuffer)->StringBuffer:::Attempt to evaluate this expression
sun.tools.tree.AddExpression#simplify()->Expression:::Simplify
sun.tools.tree.AddExpression#costInline(int, Environment, Context)->int:::The cost of inlining this expression
sun.tools.tree.AddExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AddExpression#codeAppend(Environment, Context, Assembler, ClassDeclaration, boolean)->void:::Convert this expression to a string and append it to the string buffer on the top of the stack
sun.tools.tree.AddExpression#codeValue(Environment, Context, Assembler)->void::: add expression code value
sun.tools.tree.AndExpression#checkCondition(Environment, Context, Vset, Hashtable, ConditionVars)->void::: and expression check condition
sun.tools.tree.AndExpression#eval(boolean, boolean)->Expression:::Evaluate
sun.tools.tree.AndExpression#simplify()->Expression:::Simplify
sun.tools.tree.AndExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.ArrayAccessExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check expression type
sun.tools.tree.ArrayAccessExpression#checkAmbigName(Environment, Context, Vset, Hashtable, UnaryExpression)->Vset::: array access expression check ambig name
sun.tools.tree.ArrayAccessExpression#checkLHS(Environment, Context, Vset, Hashtable)->Vset::: array access expression check s
sun.tools.tree.ArrayAccessExpression#checkAssignOp(Environment, Context, Vset, Hashtable, Expression)->Vset::: array access expression check assign op
sun.tools.tree.ArrayAccessExpression#getAssigner(Environment, Context)->FieldUpdater:::An array access expression never requires the use of an access method to perform an assignment to an array element, though an access method may be required to fetch the array object itself.
sun.tools.tree.ArrayAccessExpression#getUpdater(Environment, Context)->FieldUpdater:::An array access expression never requires a field updater.
sun.tools.tree.ArrayAccessExpression#toType(Environment, Context)->Type:::Convert to a type
sun.tools.tree.ArrayAccessExpression#toType(Environment, Type)->Type::: array access expression to type
sun.tools.tree.ArrayAccessExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.ArrayAccessExpression#inlineValue(Environment, Context)->Expression::: array access expression inline value
sun.tools.tree.ArrayAccessExpression#inlineLHS(Environment, Context)->Expression::: array access expression inline s
sun.tools.tree.ArrayAccessExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.ArrayAccessExpression#costInline(int, Environment, Context)->int:::The cost of inlining this expression
sun.tools.tree.ArrayAccessExpression#codeLValue(Environment, Context, Assembler)->int:::Code
sun.tools.tree.ArrayAccessExpression#codeLoad(Environment, Context, Assembler)->void::: array access expression code load
sun.tools.tree.ArrayAccessExpression#codeStore(Environment, Context, Assembler)->void::: array access expression code store
sun.tools.tree.ArrayAccessExpression#codeValue(Environment, Context, Assembler)->void::: array access expression code value
sun.tools.tree.ArrayAccessExpression#print(PrintStream)->void:::Print
sun.tools.tree.ArrayExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check expression type
sun.tools.tree.ArrayExpression#checkInitializer(Environment, Context, Vset, Type, Hashtable)->Vset::: array expression check initializer
sun.tools.tree.ArrayExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.ArrayExpression#inlineValue(Environment, Context)->Expression::: array expression inline value
sun.tools.tree.ArrayExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignAddExpression#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.AssignAddExpression#code(Environment, Context, Assembler, boolean)->void:::Code
sun.tools.tree.AssignAddExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignBitAndExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignBitOrExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignBitXorExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignDivideExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check an assignment expression
sun.tools.tree.AssignExpression#inlineValue(Environment, Context)->Expression:::Inline
sun.tools.tree.AssignExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.AssignExpression#costInline(int, Environment, Context)->int:::The cost of inlining this expression
sun.tools.tree.AssignExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignExpression#code(Environment, Context, Assembler)->void::: assign expression code
sun.tools.tree.AssignMultiplyExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignOpExpression#selectType(Environment, Context, int)->void:::Select the type
sun.tools.tree.AssignOpExpression#getIncrement()->int:::Get the increment, return NOINC if an increment is not possible
sun.tools.tree.AssignOpExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check an assignment expression
sun.tools.tree.AssignOpExpression#inlineValue(Environment, Context)->Expression:::Inline
sun.tools.tree.AssignOpExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.AssignOpExpression#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.AssignOpExpression#code(Environment, Context, Assembler, boolean)->void:::Code
sun.tools.tree.AssignOpExpression#codeValue(Environment, Context, Assembler)->void::: assign op expression code value
sun.tools.tree.AssignOpExpression#code(Environment, Context, Assembler)->void::: assign op expression code
sun.tools.tree.AssignOpExpression#print(PrintStream)->void:::Print
sun.tools.tree.AssignRemainderExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignShiftLeftExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignShiftRightExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignSubtractExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.AssignUnsignedShiftRightExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.BinaryArithmeticExpression#selectType(Environment, Context, int)->void:::Select the type
sun.tools.tree.BinaryAssignExpression#getImplementation()->Expression::: binary assign expression get implementation
sun.tools.tree.BinaryAssignExpression#order()->Expression:::Order the expression based on precedence
sun.tools.tree.BinaryAssignExpression#check(Environment, Context, Vset, Hashtable)->Vset:::Check void expression
sun.tools.tree.BinaryAssignExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.BinaryAssignExpression#inlineValue(Environment, Context)->Expression::: binary assign expression inline value
sun.tools.tree.BinaryAssignExpression#copyInline(Context)->Expression::: binary assign expression copy inline
sun.tools.tree.BinaryAssignExpression#costInline(int, Environment, Context)->int::: binary assign expression cost inline
sun.tools.tree.BinaryBitExpression#selectType(Environment, Context, int)->void:::Select the type
sun.tools.tree.BinaryBitExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.BinaryCompareExpression#selectType(Environment, Context, int)->void:::Select the type
sun.tools.tree.BinaryEqualityExpression#selectType(Environment, Context, int)->void:::Select the type
sun.tools.tree.BinaryExpression#order()->Expression:::Order the expression based on precedence
sun.tools.tree.BinaryExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check a binary expression
sun.tools.tree.BinaryExpression#isConstant()->boolean:::Check if constant
sun.tools.tree.BinaryExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.BinaryExpression#eval(long, long)->Expression::: binary expression eval
sun.tools.tree.BinaryExpression#eval(float, float)->Expression::: binary expression eval
sun.tools.tree.BinaryExpression#eval(double, double)->Expression::: binary expression eval
sun.tools.tree.BinaryExpression#eval(boolean, boolean)->Expression::: binary expression eval
sun.tools.tree.BinaryExpression#eval(String, String)->Expression::: binary expression eval
sun.tools.tree.BinaryExpression#eval()->Expression::: binary expression eval
sun.tools.tree.BinaryExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.BinaryExpression#inlineValue(Environment, Context)->Expression::: binary expression inline value
sun.tools.tree.BinaryExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.BinaryExpression#costInline(int, Environment, Context)->int:::The cost of inlining this expression
sun.tools.tree.BinaryExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.BinaryExpression#codeValue(Environment, Context, Assembler)->void::: binary expression code value
sun.tools.tree.BinaryExpression#print(PrintStream)->void:::Print
sun.tools.tree.BinaryLogicalExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check a binary expression
sun.tools.tree.BinaryLogicalExpression#checkCondition(Environment, Context, Vset, Hashtable, ConditionVars)->void::: binary logical expression check condition
sun.tools.tree.BinaryLogicalExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.BinaryShiftExpression#eval()->Expression:::Evaluate the expression
sun.tools.tree.BinaryShiftExpression#selectType(Environment, Context, int)->void:::Select the type
sun.tools.tree.BitAndExpression#eval(boolean, boolean)->Expression:::Evaluate
sun.tools.tree.BitAndExpression#eval(int, int)->Expression::: bit and expression eval
sun.tools.tree.BitAndExpression#eval(long, long)->Expression::: bit and expression eval
sun.tools.tree.BitAndExpression#simplify()->Expression:::Simplify
sun.tools.tree.BitAndExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.BitNotExpression#selectType(Environment, Context, int)->void:::Select the type of the expression
sun.tools.tree.BitNotExpression#eval(int)->Expression:::Evaluate
sun.tools.tree.BitNotExpression#eval(long)->Expression::: bit not expression eval
sun.tools.tree.BitNotExpression#simplify()->Expression:::Simplify
sun.tools.tree.BitNotExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.BitOrExpression#eval(boolean, boolean)->Expression:::Evaluate
sun.tools.tree.BitOrExpression#eval(int, int)->Expression::: bit or expression eval
sun.tools.tree.BitOrExpression#eval(long, long)->Expression::: bit or expression eval
sun.tools.tree.BitOrExpression#simplify()->Expression:::Simplify
sun.tools.tree.BitOrExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.BitXorExpression#eval(boolean, boolean)->Expression:::Evaluate
sun.tools.tree.BitXorExpression#eval(int, int)->Expression::: bit xor expression eval
sun.tools.tree.BitXorExpression#eval(long, long)->Expression::: bit xor expression eval
sun.tools.tree.BitXorExpression#simplify()->Expression:::Simplify
sun.tools.tree.BitXorExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.BooleanExpression#getValue()->Object:::Get the value
sun.tools.tree.BooleanExpression#equals(boolean)->boolean:::Check if the expression is equal to a value
sun.tools.tree.BooleanExpression#equalsDefault()->boolean:::Check if the expression is equal to its default static value
sun.tools.tree.BooleanExpression#checkCondition(Environment, Context, Vset, Hashtable, ConditionVars)->void::: boolean expression check condition
sun.tools.tree.BooleanExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.BooleanExpression#codeValue(Environment, Context, Assembler)->void::: boolean expression code value
sun.tools.tree.BooleanExpression#print(PrintStream)->void:::Print
sun.tools.tree.BreakStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.BreakStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.BreakStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.BreakStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.ByteExpression#print(PrintStream)->void:::Print
sun.tools.tree.CaseStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.CaseStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.CaseStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.CastExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check the expression
sun.tools.tree.CastExpression#isConstant()->boolean:::Check if constant
sun.tools.tree.CastExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.CastExpression#inlineValue(Environment, Context)->Expression::: cast expression inline value
sun.tools.tree.CastExpression#costInline(int, Environment, Context)->int::: cast expression cost inline
sun.tools.tree.CastExpression#print(PrintStream)->void:::Print
sun.tools.tree.CatchStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.CatchStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.CatchStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.CatchStatement#costInline(int, Environment, Context)->int:::Compute cost of inlining this statement
sun.tools.tree.CatchStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.CatchStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.CharExpression#print(PrintStream)->void:::Print
sun.tools.tree.CommaExpression#check(Environment, Context, Vset, Hashtable)->Vset:::Check void expression
sun.tools.tree.CommaExpression#selectType(Environment, Context, int)->void:::Select the type
sun.tools.tree.CommaExpression#simplify()->Expression:::Simplify
sun.tools.tree.CommaExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.CommaExpression#inlineValue(Environment, Context)->Expression::: comma expression inline value
sun.tools.tree.CommaExpression#codeLValue(Environment, Context, Assembler)->int:::Code
sun.tools.tree.CommaExpression#codeLoad(Environment, Context, Assembler)->void::: comma expression code load
sun.tools.tree.CommaExpression#codeStore(Environment, Context, Assembler)->void::: comma expression code store
sun.tools.tree.CommaExpression#codeValue(Environment, Context, Assembler)->void::: comma expression code value
sun.tools.tree.CommaExpression#code(Environment, Context, Assembler)->void::: comma expression code
sun.tools.tree.CompoundStatement#insertStatement(Statement)->void:::Insert a new statement at the front
sun.tools.tree.CompoundStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.CompoundStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.CompoundStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.CompoundStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.CompoundStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.CompoundStatement#firstConstructor()->Expression:::Check if the first thing is a constructor invocation
sun.tools.tree.CompoundStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.ConditionalExpression#order()->Expression:::Order the expression based on precedence
sun.tools.tree.ConditionalExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check the expression
sun.tools.tree.ConditionalExpression#check(Environment, Context, Vset, Hashtable)->Vset::: conditional expression check
sun.tools.tree.ConditionalExpression#isConstant()->boolean:::Check if constant
sun.tools.tree.ConditionalExpression#simplify()->Expression:::Simplify
sun.tools.tree.ConditionalExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.ConditionalExpression#inlineValue(Environment, Context)->Expression::: conditional expression inline value
sun.tools.tree.ConditionalExpression#costInline(int, Environment, Context)->int:::The cost of inlining this expression
sun.tools.tree.ConditionalExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.ConditionalExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ConditionalExpression#code(Environment, Context, Assembler)->void::: conditional expression code
sun.tools.tree.ConditionalExpression#print(PrintStream)->void:::Print
sun.tools.tree.ConstantExpression#isConstant()->boolean:::Return true if constant
sun.tools.tree.Context#declare(Environment, LocalMember)->int:::Declare local
sun.tools.tree.Context#getLocalField(Identifier)->LocalMember:::Get a local variable by name
sun.tools.tree.Context#getScopeNumber(ClassDefinition)->int:::Get the scope number for a reference to a member of this class (Larger scope numbers are more deeply nested.)
sun.tools.tree.Context#declareFieldNumber(MemberDefinition)->int:::Assign a number to a class field
sun.tools.tree.Context#getFieldNumber(MemberDefinition)->int:::Retrieve a number previously assigned by declareMember()
sun.tools.tree.Context#getElement(int)->MemberDefinition:::Return the local field or member field corresponding to a number
sun.tools.tree.Context#getLocalClass(Identifier)->LocalMember:::Get a local class by name
sun.tools.tree.Context#getField(Environment, Identifier)->MemberDefinition:::Get either a local variable, or a field in a current class
sun.tools.tree.Context#getApparentField(Environment, Identifier)->MemberDefinition:::Like getField, except that it skips over inherited fields
sun.tools.tree.Context#isInScope(LocalMember)->boolean:::Check if the given field is active in this context.
sun.tools.tree.Context#noteReference(Environment, LocalMember)->UplevelReference:::Notice a reference (usually an uplevel one)
sun.tools.tree.Context#makeReference(Environment, LocalMember)->Expression:::Implement a reference (usually an uplevel one)
sun.tools.tree.Context#findOuterLink(Environment, long, MemberDefinition)->Expression:::Return a local expression which can serve as the base reference for the given field
sun.tools.tree.Context#findOuterLink(Environment, long, ClassDefinition, MemberDefinition, boolean)->Expression::: context find outer link
sun.tools.tree.Context#outerLinkExists(Environment, ClassDefinition, ClassDefinition)->boolean:::Is there a "this" of type reqc in scope?
sun.tools.tree.Context#findScope(Environment, ClassDefinition)->ClassDefinition:::From which enclosing class do members of this type come?
sun.tools.tree.Context#resolveName(Environment, Identifier)->Identifier:::Resolve a type name from within a local scope.
sun.tools.tree.Context#getApparentClassName(Environment, Identifier)->Identifier:::Return the name of a lexically apparent type, skipping inherited members, and ignoring the current pacakge and imports
sun.tools.tree.Context#checkBackBranch(Environment, Statement, Vset, Vset)->void:::Raise an error if a blank final was definitely unassigned on entry to a loop, but has possibly been assigned on the back-branch
sun.tools.tree.Context#canReach(Environment, MemberDefinition)->boolean:::Check if a field can reach another field (only considers forward references, not the access modifiers).
sun.tools.tree.Context#getLabelContext(Identifier)->Context:::Get the context that corresponds to a label, return null if not found.
sun.tools.tree.Context#getBreakContext(Identifier)->Context:::Get the destination context of a break
sun.tools.tree.Context#getContinueContext(Identifier)->Context:::Get the destination context of a continue
sun.tools.tree.Context#getReturnContext()->CheckContext:::Get the destination context of a return (the method body)
sun.tools.tree.Context#getTryExitContext()->CheckContext:::Get the context of the innermost surrounding try-block
sun.tools.tree.Context#getInlineContext()->Context:::Get the nearest inlined context
sun.tools.tree.Context#getInlineMemberContext(MemberDefinition)->Context:::Get the context of a field that is being inlined
sun.tools.tree.Context#removeAdditionalVars(Vset)->Vset:::Remove variables from the vset set  that are no longer part of this context.
sun.tools.tree.Context#getVarNumber()->int::: context get var number
sun.tools.tree.Context#getThisNumber()->int:::Return the number of the innermost current instance reference.
sun.tools.tree.Context#getField()->MemberDefinition:::Return the field containing the present context.
sun.tools.tree.Context#newEnvironment(Environment, Context)->Environment:::Extend an environment with the given context
sun.tools.tree.ContextEnvironment#resolveName(Identifier)->Identifier::: context environment resolve name
sun.tools.tree.ContinueStatement#check(Environment, Context, Vset, Hashtable)->Vset::: continue statement check
sun.tools.tree.ContinueStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.ContinueStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ContinueStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.ConvertExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check the value
sun.tools.tree.ConvertExpression#simplify()->Expression:::Simplify
sun.tools.tree.ConvertExpression#equals(int)->boolean:::Check if the expression is equal to a value
sun.tools.tree.ConvertExpression#equals(boolean)->boolean::: convert expression equals
sun.tools.tree.ConvertExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.ConvertExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ConvertExpression#print(PrintStream)->void:::Print
sun.tools.tree.DeclarationStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement Report an error unless the call is checkBlockStatement.
sun.tools.tree.DeclarationStatement#checkBlockStatement(Environment, Context, Vset, Hashtable)->Vset::: declaration statement check block statement
sun.tools.tree.DeclarationStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.DeclarationStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.DeclarationStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.DeclarationStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.DeclarationStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.DivideExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.DivideExpression#eval(long, long)->Expression::: divide expression eval
sun.tools.tree.DivideExpression#eval(float, float)->Expression::: divide expression eval
sun.tools.tree.DivideExpression#eval(double, double)->Expression::: divide expression eval
sun.tools.tree.DivideExpression#simplify()->Expression:::Simplify
sun.tools.tree.DivideExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.DivRemExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.DoStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.DoStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.DoStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.DoStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.DoStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.DoStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.DoubleExpression#getValue()->Object:::Get the value
sun.tools.tree.DoubleExpression#equals(int)->boolean:::Check if the expression is equal to a value
sun.tools.tree.DoubleExpression#equalsDefault()->boolean:::Check if the expression is equal to its default static value
sun.tools.tree.DoubleExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.DoubleExpression#print(PrintStream)->void:::Print
sun.tools.tree.EqualExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.EqualExpression#eval(long, long)->Expression::: equal expression eval
sun.tools.tree.EqualExpression#eval(float, float)->Expression::: equal expression eval
sun.tools.tree.EqualExpression#eval(double, double)->Expression::: equal expression eval
sun.tools.tree.EqualExpression#eval(boolean, boolean)->Expression::: equal expression eval
sun.tools.tree.EqualExpression#simplify()->Expression:::Simplify
sun.tools.tree.EqualExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.Expression#getImplementation()->Expression:::Type checking may assign a more complex implementation to an innocuous-looking expression (like an identifier)
sun.tools.tree.Expression#getType()->Type::: expression get type
sun.tools.tree.Expression#precedence()->int:::Return the precedence of the operator
sun.tools.tree.Expression#order()->Expression:::Order the expression based on precedence
sun.tools.tree.Expression#isConstant()->boolean:::Return true if constant, according to JLS 15.27
sun.tools.tree.Expression#getValue()->Object:::Return the constant value.
sun.tools.tree.Expression#equals(int)->boolean:::Check if the expression is known to be equal to a given value
sun.tools.tree.Expression#equals(boolean)->boolean::: expression equals
sun.tools.tree.Expression#equals(Identifier)->boolean::: expression equals
sun.tools.tree.Expression#equals(String)->boolean::: expression equals
sun.tools.tree.Expression#isNull()->boolean:::Check if the expression must be a null reference.
sun.tools.tree.Expression#isNonNull()->boolean:::Check if the expression cannot be a null reference.
sun.tools.tree.Expression#equalsDefault()->boolean:::Check if the expression is equal to its default static value
sun.tools.tree.Expression#toType(Environment, Context)->Type:::Convert an expresion to a type
sun.tools.tree.Expression#fitsType(Environment, Context, Type)->boolean:::See if this expression fits in the given type
sun.tools.tree.Expression#fitsType(Environment, Type)->boolean::: expression fits type
sun.tools.tree.Expression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check an expression
sun.tools.tree.Expression#checkInitializer(Environment, Context, Vset, Type, Hashtable)->Vset::: expression check initializer
sun.tools.tree.Expression#check(Environment, Context, Vset, Hashtable)->Vset::: expression check
sun.tools.tree.Expression#checkLHS(Environment, Context, Vset, Hashtable)->Vset::: expression check s
sun.tools.tree.Expression#getAssigner(Environment, Context)->FieldUpdater::: expression get assigner
sun.tools.tree.Expression#getUpdater(Environment, Context)->FieldUpdater::: expression get updater
sun.tools.tree.Expression#checkAssignOp(Environment, Context, Vset, Hashtable, Expression)->Vset::: expression check assign op
sun.tools.tree.Expression#checkAmbigName(Environment, Context, Vset, Hashtable, UnaryExpression)->Vset:::Check something that might be an AmbiguousName (refman 6.5.2)
sun.tools.tree.Expression#checkCondition(Environment, Context, Vset, Hashtable)->ConditionVars:::Check a condition
sun.tools.tree.Expression#checkCondition(Environment, Context, Vset, Hashtable, ConditionVars)->void::: expression check condition
sun.tools.tree.Expression#eval()->Expression:::Evaluate
sun.tools.tree.Expression#simplify()->Expression:::Simplify
sun.tools.tree.Expression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.Expression#inlineValue(Environment, Context)->Expression::: expression inline value
sun.tools.tree.Expression#inlineValueSB(Environment, Context, StringBuffer)->StringBuffer:::Attempt to evaluate this expression
sun.tools.tree.Expression#inlineLHS(Environment, Context)->Expression::: expression inline s
sun.tools.tree.Expression#costInline(int, Environment, Context)->int:::The cost of inlining this expression
sun.tools.tree.Expression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.Expression#codeValue(Environment, Context, Assembler)->void::: expression code value
sun.tools.tree.Expression#code(Environment, Context, Assembler)->void::: expression code
sun.tools.tree.Expression#codeLValue(Environment, Context, Assembler)->int::: expression code value
sun.tools.tree.Expression#codeLoad(Environment, Context, Assembler)->void::: expression code load
sun.tools.tree.Expression#codeStore(Environment, Context, Assembler)->void::: expression code store
sun.tools.tree.Expression#ensureString(Environment, Context, Assembler)->void:::Convert this expression to a string.
sun.tools.tree.Expression#codeAppend(Environment, Context, Assembler, ClassDeclaration, boolean)->void:::Convert this expression to a string and append it to the string buffer on the top of the stack
sun.tools.tree.Expression#codeDup(Environment, Context, Assembler, int, int)->void:::Code
sun.tools.tree.Expression#codeConversion(Environment, Context, Assembler, Type, Type)->void::: expression code conversion
sun.tools.tree.Expression#firstConstructor()->Expression:::Check if the first thing is a constructor invocation
sun.tools.tree.Expression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.Expression#print(PrintStream)->void:::Print
sun.tools.tree.ExpressionStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.ExpressionStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.ExpressionStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.ExpressionStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.ExpressionStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ExpressionStatement#firstConstructor()->Expression:::Check if the first thing is a constructor invocation
sun.tools.tree.ExpressionStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.ExprExpression#checkCondition(Environment, Context, Vset, Hashtable, ConditionVars)->void:::Check a condition
sun.tools.tree.ExprExpression#checkAssignOp(Environment, Context, Vset, Hashtable, Expression)->Vset:::Check the expression if it appears as an lvalue
sun.tools.tree.ExprExpression#getUpdater(Environment, Context)->FieldUpdater:::Delegate to our subexpression
sun.tools.tree.ExprExpression#isNull()->boolean::: expr expression is null
sun.tools.tree.ExprExpression#isNonNull()->boolean::: expr expression is non null
sun.tools.tree.ExprExpression#getValue()->Object::: expr expression get value
sun.tools.tree.ExprExpression#inlineValueSB(Environment, Context, StringBuffer)->StringBuffer:::Delegate to our subexpression
sun.tools.tree.ExprExpression#selectType(Environment, Context, int)->void:::Select the type of the expression
sun.tools.tree.ExprExpression#simplify()->Expression:::Simplify
sun.tools.tree.FieldExpression#getImplementation()->Expression::: field expression get implementation
sun.tools.tree.FieldExpression#toIdentifier(Expression)->Identifier:::Convert an '.' expression to a qualified identifier
sun.tools.tree.FieldExpression#toType(Environment, Context)->Type::: field expression to type
sun.tools.tree.FieldExpression#checkAmbigName(Environment, Context, Vset, Hashtable, UnaryExpression)->Vset::: field expression check ambig name
sun.tools.tree.FieldExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset::: field expression check value
sun.tools.tree.FieldExpression#reportFailedPackagePrefix(Environment, Expression)->void::: field expression report failed package prefix
sun.tools.tree.FieldExpression#reportFailedPackagePrefix(Environment, Expression, boolean)->void::: field expression report failed package prefix
sun.tools.tree.FieldExpression#isTypeAccessible(long, Environment, Type, ClassDefinition)->boolean:::Determine if a type is accessible from a given class.
sun.tools.tree.FieldExpression#getAssigner(Environment, Context)->FieldUpdater::: field expression get assigner
sun.tools.tree.FieldExpression#getUpdater(Environment, Context)->FieldUpdater::: field expression get updater
sun.tools.tree.FieldExpression#checkLHS(Environment, Context, Vset, Hashtable)->Vset:::Check the expression if it appears on the LHS of an assignment
sun.tools.tree.FieldExpression#checkAssignOp(Environment, Context, Vset, Hashtable, Expression)->Vset:::Check the expression if it appears on the LHS of an op= expression
sun.tools.tree.FieldExpression#checkFinalAssign(Environment, Context, Vset, long, MemberDefinition)->Vset::: field expression check final assign
sun.tools.tree.FieldExpression#isConstant()->boolean:::Check if constant:  Will it inline away?
sun.tools.tree.FieldExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.FieldExpression#inlineValue(Environment, Context)->Expression::: field expression inline value
sun.tools.tree.FieldExpression#inlineLHS(Environment, Context)->Expression::: field expression inline s
sun.tools.tree.FieldExpression#copyInline(Context)->Expression::: field expression copy inline
sun.tools.tree.FieldExpression#costInline(int, Environment, Context)->int:::The cost of inlining this expression
sun.tools.tree.FieldExpression#codeLValue(Environment, Context, Assembler)->int:::Code
sun.tools.tree.FieldExpression#codeLoad(Environment, Context, Assembler)->void::: field expression code load
sun.tools.tree.FieldExpression#codeStore(Environment, Context, Assembler)->void::: field expression code store
sun.tools.tree.FieldExpression#codeValue(Environment, Context, Assembler)->void::: field expression code value
sun.tools.tree.FieldExpression#print(PrintStream)->void:::Print
sun.tools.tree.FieldUpdater#inline(Environment, Context)->FieldUpdater::: field updater inline
sun.tools.tree.FieldUpdater#copyInline(Context)->FieldUpdater::: field updater copy inline
sun.tools.tree.FieldUpdater#costInline(int, Environment, Context, boolean)->int::: field updater cost inline
sun.tools.tree.FieldUpdater#startUpdate(Environment, Context, Assembler, boolean)->void::: field updater start update
sun.tools.tree.FieldUpdater#finishUpdate(Environment, Context, Assembler, boolean)->void::: field updater finish update
sun.tools.tree.FieldUpdater#startAssign(Environment, Context, Assembler)->void::: field updater start assign
sun.tools.tree.FieldUpdater#finishAssign(Environment, Context, Assembler, boolean)->void::: field updater finish assign
sun.tools.tree.FinallyStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.FinallyStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.FinallyStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.FinallyStatement#costInline(int, Environment, Context)->int:::Compute cost of inlining this statement
sun.tools.tree.FinallyStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.FinallyStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.FloatExpression#getValue()->Object:::Get the value
sun.tools.tree.FloatExpression#equals(int)->boolean:::Check if the expression is equal to a value
sun.tools.tree.FloatExpression#equalsDefault()->boolean:::Check if the expression is equal to its default static value
sun.tools.tree.FloatExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.FloatExpression#print(PrintStream)->void:::Print
sun.tools.tree.ForStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.ForStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.ForStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.ForStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.ForStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ForStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.GreaterExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.GreaterExpression#eval(long, long)->Expression::: greater expression eval
sun.tools.tree.GreaterExpression#eval(float, float)->Expression::: greater expression eval
sun.tools.tree.GreaterExpression#eval(double, double)->Expression::: greater expression eval
sun.tools.tree.GreaterExpression#simplify()->Expression:::Simplify
sun.tools.tree.GreaterExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.GreaterOrEqualExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.GreaterOrEqualExpression#eval(long, long)->Expression::: greater or equal expression eval
sun.tools.tree.GreaterOrEqualExpression#eval(float, float)->Expression::: greater or equal expression eval
sun.tools.tree.GreaterOrEqualExpression#eval(double, double)->Expression::: greater or equal expression eval
sun.tools.tree.GreaterOrEqualExpression#simplify()->Expression:::Simplify
sun.tools.tree.GreaterOrEqualExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.IdentifierExpression#getImplementation()->Expression::: identifier expression get implementation
sun.tools.tree.IdentifierExpression#equals(Identifier)->boolean:::Check if the expression is equal to a value
sun.tools.tree.IdentifierExpression#bind(Environment, Context)->boolean:::Bind to a field
sun.tools.tree.IdentifierExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check expression
sun.tools.tree.IdentifierExpression#checkLHS(Environment, Context, Vset, Hashtable)->Vset:::Check the expression if it appears on the LHS of an assignment
sun.tools.tree.IdentifierExpression#checkAssignOp(Environment, Context, Vset, Hashtable, Expression)->Vset:::Check the expression if it appears on the LHS of an op= expression
sun.tools.tree.IdentifierExpression#getAssigner(Environment, Context)->FieldUpdater:::Return an accessor if one is needed for assignments to this expression.
sun.tools.tree.IdentifierExpression#getUpdater(Environment, Context)->FieldUpdater:::Return an updater if one is needed for assignments to this expression.
sun.tools.tree.IdentifierExpression#checkAmbigName(Environment, Context, Vset, Hashtable, UnaryExpression)->Vset:::Check if the present name is part of a scoping prefix.
sun.tools.tree.IdentifierExpression#toType(Environment, Context)->Type:::Convert an identifier to a type
sun.tools.tree.IdentifierExpression#isConstant()->boolean:::Check if constant:  Will it inline away?
sun.tools.tree.IdentifierExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.IdentifierExpression#inlineValue(Environment, Context)->Expression::: identifier expression inline value
sun.tools.tree.IdentifierExpression#inlineLHS(Environment, Context)->Expression::: identifier expression inline s
sun.tools.tree.IdentifierExpression#copyInline(Context)->Expression::: identifier expression copy inline
sun.tools.tree.IdentifierExpression#costInline(int, Environment, Context)->int::: identifier expression cost inline
sun.tools.tree.IdentifierExpression#codeLValue(Environment, Context, Assembler)->int:::Code local vars (object fields have been inlined away)
sun.tools.tree.IdentifierExpression#codeLoad(Environment, Context, Assembler)->void::: identifier expression code load
sun.tools.tree.IdentifierExpression#codeStore(Environment, Context, Assembler)->void::: identifier expression code store
sun.tools.tree.IdentifierExpression#codeValue(Environment, Context, Assembler)->void::: identifier expression code value
sun.tools.tree.IdentifierExpression#print(PrintStream)->void:::Print
sun.tools.tree.IfStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.IfStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.IfStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.IfStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.IfStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.IfStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.IncDecExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check an increment or decrement expression
sun.tools.tree.IncDecExpression#check(Environment, Context, Vset, Hashtable)->Vset:::Check void expression
sun.tools.tree.IncDecExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.IncDecExpression#inlineValue(Environment, Context)->Expression::: inc dec expression inline value
sun.tools.tree.IncDecExpression#costInline(int, Environment, Context)->int::: inc dec expression cost inline
sun.tools.tree.IncDecExpression#codeIncDec(Environment, Context, Assembler, boolean, boolean, boolean)->void::: inc dec expression code inc dec
sun.tools.tree.InlineMethodExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.InlineMethodExpression#inlineValue(Environment, Context)->Expression::: inline method expression inline value
sun.tools.tree.InlineMethodExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.InlineMethodExpression#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.InlineMethodExpression#codeValue(Environment, Context, Assembler)->void::: inline method expression code value
sun.tools.tree.InlineMethodExpression#print(PrintStream)->void:::Print
sun.tools.tree.InlineNewInstanceExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.InlineNewInstanceExpression#inlineValue(Environment, Context)->Expression::: inline new instance expression inline value
sun.tools.tree.InlineNewInstanceExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.InlineNewInstanceExpression#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.InlineNewInstanceExpression#codeValue(Environment, Context, Assembler)->void::: inline new instance expression code value
sun.tools.tree.InlineNewInstanceExpression#print(PrintStream)->void:::Print
sun.tools.tree.InlineReturnStatement#getDestination(Context)->Context:::Get the destination context of a break
sun.tools.tree.InlineReturnStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.InlineReturnStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.InlineReturnStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.InlineReturnStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.InlineReturnStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.InstanceOfExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check the expression
sun.tools.tree.InstanceOfExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.InstanceOfExpression#inlineValue(Environment, Context)->Expression::: instance of expression inline value
sun.tools.tree.InstanceOfExpression#costInline(int, Environment, Context)->int::: instance of expression cost inline
sun.tools.tree.InstanceOfExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.InstanceOfExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void::: instance of expression code branch
sun.tools.tree.InstanceOfExpression#code(Environment, Context, Assembler)->void::: instance of expression code
sun.tools.tree.InstanceOfExpression#print(PrintStream)->void:::Print
sun.tools.tree.IntegerExpression#fitsType(Environment, Context, Type)->boolean:::See if this number fits in the given type.
sun.tools.tree.IntegerExpression#getValue()->Object:::Get the value
sun.tools.tree.IntegerExpression#equals(int)->boolean:::Check if the expression is equal to a value
sun.tools.tree.IntegerExpression#equalsDefault()->boolean:::Check if the expression is equal to its default static value
sun.tools.tree.IntegerExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.IntExpression#equals(Object)->boolean:::Equality, this is needed so that switch statements can put IntExpressions in a hashtable
sun.tools.tree.IntExpression#hashCode()->int:::Hashcode, this is needed so that switch statements can put IntExpressions in a hashtable
sun.tools.tree.IntExpression#print(PrintStream)->void:::Print
sun.tools.tree.LengthExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Select the type of the expression
sun.tools.tree.LengthExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.LessExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.LessExpression#eval(long, long)->Expression::: less expression eval
sun.tools.tree.LessExpression#eval(float, float)->Expression::: less expression eval
sun.tools.tree.LessExpression#eval(double, double)->Expression::: less expression eval
sun.tools.tree.LessExpression#simplify()->Expression:::Simplify
sun.tools.tree.LessExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.LessOrEqualExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.LessOrEqualExpression#eval(long, long)->Expression::: less or equal expression eval
sun.tools.tree.LessOrEqualExpression#eval(float, float)->Expression::: less or equal expression eval
sun.tools.tree.LessOrEqualExpression#eval(double, double)->Expression::: less or equal expression eval
sun.tools.tree.LessOrEqualExpression#simplify()->Expression:::Simplify
sun.tools.tree.LessOrEqualExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.LocalMember#getScopeNumber()->int:::Return current nesting level, i.e., the value of 'scopeNumber'
sun.tools.tree.LocalMember#getMember()->MemberDefinition:::Is this a proxy for the given field?
sun.tools.tree.LocalMember#isLocal()->boolean:::Special checks
sun.tools.tree.LocalMember#copyInline(Context)->LocalMember:::Make a copy of this field, which is an argument to a method or constructor
sun.tools.tree.LocalMember#getCurrentInlineCopy(Context)->LocalMember:::Returns the previous result of copyInline(ctx)
sun.tools.tree.LocalMember#copyArguments(Context, MemberDefinition)->LocalMember[]:::May inline copies of all the arguments of the given method.
sun.tools.tree.LocalMember#doneWithArguments(Context, LocalMember[])->void:::Call this when finished with the result of a copyArguments() call.
sun.tools.tree.LocalMember#isInlineable(Environment, boolean)->boolean:::Is this local variable's value stable and simple enough to be directly substituted for occurrences of the variable itself? (This decision is made by VarDeclarationStatement.inline().)
sun.tools.tree.LocalMember#isUsed()->boolean:::Check if used
sun.tools.tree.LocalMember#getAccessVar()->LocalMember::: local member get access var
sun.tools.tree.LocalMember#setAccessVar(LocalMember)->void::: local member set access var
sun.tools.tree.LocalMember#getAccessVarMember()->MemberDefinition::: local member get access var member
sun.tools.tree.LocalMember#setAccessVarMember(MemberDefinition)->void::: local member set access var member
sun.tools.tree.LocalMember#getValue(Environment)->Node:::Return value
sun.tools.tree.LocalMember#getNumber(Context)->int:::Value number for vsets, or -1 if none.
sun.tools.tree.LongExpression#getValue()->Object:::Get the value
sun.tools.tree.LongExpression#equals(int)->boolean:::Check if the expression is equal to a value
sun.tools.tree.LongExpression#equalsDefault()->boolean:::Check if the expression is equal to its default static value
sun.tools.tree.LongExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.LongExpression#print(PrintStream)->void:::Print
sun.tools.tree.MethodExpression#getImplementation()->Expression::: method expression get implementation
sun.tools.tree.MethodExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check expression type
sun.tools.tree.MethodExpression#check(Environment, Context, Vset, Hashtable)->Vset:::Check void expression
sun.tools.tree.MethodExpression#diagnoseMismatch(Environment, Expression[], Type[])->boolean:::We're about to report a "unmatched method" error
sun.tools.tree.MethodExpression#inline(Environment, Context)->Expression::: method expression inline
sun.tools.tree.MethodExpression#inlineValue(Environment, Context)->Expression::: method expression inline value
sun.tools.tree.MethodExpression#copyInline(Context)->Expression::: method expression copy inline
sun.tools.tree.MethodExpression#costInline(int, Environment, Context)->int::: method expression cost inline
sun.tools.tree.MethodExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.MethodExpression#firstConstructor()->Expression:::Check if the first thing is a constructor invocation
sun.tools.tree.MethodExpression#print(PrintStream)->void:::Print
sun.tools.tree.MultiplyExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.MultiplyExpression#eval(long, long)->Expression::: multiply expression eval
sun.tools.tree.MultiplyExpression#eval(float, float)->Expression::: multiply expression eval
sun.tools.tree.MultiplyExpression#eval(double, double)->Expression::: multiply expression eval
sun.tools.tree.MultiplyExpression#simplify()->Expression:::Simplify
sun.tools.tree.MultiplyExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.NaryExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.NaryExpression#costInline(int, Environment, Context)->int:::The cost of inlining this expression
sun.tools.tree.NaryExpression#print(PrintStream)->void:::Print
sun.tools.tree.NegativeExpression#selectType(Environment, Context, int)->void:::Select the type of the expression
sun.tools.tree.NegativeExpression#eval(int)->Expression:::Evaluate
sun.tools.tree.NegativeExpression#eval(long)->Expression::: negative expression eval
sun.tools.tree.NegativeExpression#eval(float)->Expression::: negative expression eval
sun.tools.tree.NegativeExpression#eval(double)->Expression::: negative expression eval
sun.tools.tree.NegativeExpression#simplify()->Expression:::Simplify
sun.tools.tree.NegativeExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.NewArrayExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check
sun.tools.tree.NewArrayExpression#copyInline(Context)->Expression::: new array expression copy inline
sun.tools.tree.NewArrayExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.NewArrayExpression#inlineValue(Environment, Context)->Expression::: new array expression inline value
sun.tools.tree.NewArrayExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.NewInstanceExpression#getOuterArg()->Expression:::From the "new" in an expression of the form outer.new InnerCls(...), return the "outer" expression, or null if there is none.
sun.tools.tree.NewInstanceExpression#precedence()->int::: new instance expression precedence
sun.tools.tree.NewInstanceExpression#order()->Expression::: new instance expression order
sun.tools.tree.NewInstanceExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check expression type
sun.tools.tree.NewInstanceExpression#insertOuterLink(Environment, Context, long, ClassDefinition, Expression, Expression[])->Expression[]:::Given a list of arguments for a constructor, return a possibly modified list which includes the hidden argument which initializes the uplevel self pointer.
sun.tools.tree.NewInstanceExpression#check(Environment, Context, Vset, Hashtable)->Vset:::Check void expression
sun.tools.tree.NewInstanceExpression#copyInline(Context)->Expression::: new instance expression copy inline
sun.tools.tree.NewInstanceExpression#inlineNewInstance(Environment, Context, Statement)->Expression::: new instance expression inline new instance
sun.tools.tree.NewInstanceExpression#inline(Environment, Context)->Expression::: new instance expression inline
sun.tools.tree.NewInstanceExpression#inlineValue(Environment, Context)->Expression::: new instance expression inline value
sun.tools.tree.NewInstanceExpression#costInline(int, Environment, Context)->int::: new instance expression cost inline
sun.tools.tree.NewInstanceExpression#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.NewInstanceExpression#codeValue(Environment, Context, Assembler)->void::: new instance expression code value
sun.tools.tree.Node#getOp()->int:::Get the operator
sun.tools.tree.Node#getWhere()->long:::Get where
sun.tools.tree.Node#convert(Environment, Context, Type, Expression)->Expression:::Implicit conversions
sun.tools.tree.Node#print(PrintStream)->void:::Print
sun.tools.tree.Node#clone()->Object:::Clone this object.
sun.tools.tree.Node#toString()->String::: node to string
sun.tools.tree.NotEqualExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.NotEqualExpression#eval(long, long)->Expression::: not equal expression eval
sun.tools.tree.NotEqualExpression#eval(float, float)->Expression::: not equal expression eval
sun.tools.tree.NotEqualExpression#eval(double, double)->Expression::: not equal expression eval
sun.tools.tree.NotEqualExpression#eval(boolean, boolean)->Expression::: not equal expression eval
sun.tools.tree.NotEqualExpression#simplify()->Expression:::Simplify
sun.tools.tree.NotEqualExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.NotExpression#selectType(Environment, Context, int)->void:::Select the type of the expression
sun.tools.tree.NotExpression#checkCondition(Environment, Context, Vset, Hashtable, ConditionVars)->void::: not expression check condition
sun.tools.tree.NotExpression#eval(boolean)->Expression:::Evaluate
sun.tools.tree.NotExpression#simplify()->Expression:::Simplify
sun.tools.tree.NotExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.NotExpression#codeValue(Environment, Context, Assembler)->void:::Instead of relying on the default code generation which uses conditional branching, generate a simpler stream using XOR.
sun.tools.tree.NullExpression#equals(int)->boolean:::Check if the expression is equal to a value
sun.tools.tree.NullExpression#isNull()->boolean::: null expression is null
sun.tools.tree.NullExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.NullExpression#print(PrintStream)->void:::Print
sun.tools.tree.OrExpression#checkCondition(Environment, Context, Vset, Hashtable, ConditionVars)->void::: or expression check condition
sun.tools.tree.OrExpression#eval(boolean, boolean)->Expression:::Evaluate
sun.tools.tree.OrExpression#simplify()->Expression:::Simplify
sun.tools.tree.OrExpression#codeBranch(Environment, Context, Assembler, Label, boolean)->void:::Code
sun.tools.tree.PositiveExpression#selectType(Environment, Context, int)->void:::Select the type of the expression
sun.tools.tree.PositiveExpression#simplify()->Expression:::Simplify
sun.tools.tree.PostDecExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.PostDecExpression#code(Environment, Context, Assembler)->void::: post dec expression code
sun.tools.tree.PostIncExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.PostIncExpression#code(Environment, Context, Assembler)->void::: post inc expression code
sun.tools.tree.PreDecExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.PreDecExpression#code(Environment, Context, Assembler)->void::: pre dec expression code
sun.tools.tree.PreIncExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.PreIncExpression#code(Environment, Context, Assembler)->void::: pre inc expression code
sun.tools.tree.RemainderExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.RemainderExpression#eval(long, long)->Expression::: remainder expression eval
sun.tools.tree.RemainderExpression#eval(float, float)->Expression::: remainder expression eval
sun.tools.tree.RemainderExpression#eval(double, double)->Expression::: remainder expression eval
sun.tools.tree.RemainderExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ReturnStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.ReturnStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.ReturnStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.ReturnStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.ReturnStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ReturnStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.ShiftLeftExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.ShiftLeftExpression#eval(long, long)->Expression::: shift left expression eval
sun.tools.tree.ShiftLeftExpression#simplify()->Expression:::Simplify
sun.tools.tree.ShiftLeftExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ShiftRightExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.ShiftRightExpression#eval(long, long)->Expression::: shift right expression eval
sun.tools.tree.ShiftRightExpression#simplify()->Expression:::Simplify
sun.tools.tree.ShiftRightExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ShortExpression#print(PrintStream)->void:::Print
sun.tools.tree.Statement#insertStatement(Statement, Statement)->Statement:::Insert a bit of code at the front of a statement
sun.tools.tree.Statement#setLabel(Environment, Expression)->void:::Set the label of a statement
sun.tools.tree.Statement#checkMethod(Environment, Context, Vset, Hashtable)->Vset:::Check a statement
sun.tools.tree.Statement#checkDeclaration(Environment, Context, Vset, int, Type, Hashtable)->Vset::: statement check declaration
sun.tools.tree.Statement#checkLabel(Environment, Context)->void:::Make sure the labels on this statement do not duplicate the labels on any enclosing statement
sun.tools.tree.Statement#check(Environment, Context, Vset, Hashtable)->Vset::: statement check
sun.tools.tree.Statement#checkBlockStatement(Environment, Context, Vset, Hashtable)->Vset:::This is called in contexts where declarations are valid.
sun.tools.tree.Statement#reach(Environment, Vset)->Vset::: statement reach
sun.tools.tree.Statement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.Statement#eliminate(Environment, Statement)->Statement:::Eliminate this statement, which is only possible if it has no label.
sun.tools.tree.Statement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.Statement#codeFinally(Environment, Context, Assembler, Context, Type)->void:::Generate the code to call all finally's for a break, continue, or return statement
sun.tools.tree.Statement#hasLabel(Identifier)->boolean::: statement has label
sun.tools.tree.Statement#firstConstructor()->Expression:::Check if the first thing is a constructor invocation
sun.tools.tree.Statement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.Statement#costInline(int, Environment, Context)->int::: statement cost inline
sun.tools.tree.Statement#printIndent(PrintStream, int)->void:::Print
sun.tools.tree.Statement#print(PrintStream, int)->void::: statement print
sun.tools.tree.Statement#print(PrintStream)->void::: statement print
sun.tools.tree.StringExpression#equals(String)->boolean::: string expression equals
sun.tools.tree.StringExpression#isNonNull()->boolean::: string expression is non null
sun.tools.tree.StringExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.StringExpression#getValue()->Object:::Get the value
sun.tools.tree.StringExpression#hashCode()->int:::Hashcode
sun.tools.tree.StringExpression#equals(Object)->boolean:::Equality
sun.tools.tree.StringExpression#print(PrintStream)->void:::Print
sun.tools.tree.SubtractExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.SubtractExpression#eval(long, long)->Expression::: subtract expression eval
sun.tools.tree.SubtractExpression#eval(float, float)->Expression::: subtract expression eval
sun.tools.tree.SubtractExpression#eval(double, double)->Expression::: subtract expression eval
sun.tools.tree.SubtractExpression#simplify()->Expression:::Simplify
sun.tools.tree.SubtractExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.SuperExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check expression
sun.tools.tree.SuperExpression#checkAmbigName(Environment, Context, Vset, Hashtable, UnaryExpression)->Vset:::Check if the present name is part of a scoping prefix.
sun.tools.tree.SwitchStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.SwitchStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.SwitchStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.SwitchStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.SwitchStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.SwitchStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.SynchronizedStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.SynchronizedStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.SynchronizedStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.SynchronizedStatement#costInline(int, Environment, Context)->int:::Compute cost of inlining this statement
sun.tools.tree.SynchronizedStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.SynchronizedStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.ThisExpression#getImplementation()->Expression::: this expression get implementation
sun.tools.tree.ThisExpression#getOuterArg()->Expression:::From the 'this' in an expression of the form outer.this(...), or the 'super' in an expression of the form outer.super(...), return the "outer" expression, or null if there is none.
sun.tools.tree.ThisExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check expression
sun.tools.tree.ThisExpression#isNonNull()->boolean::: this expression is non null
sun.tools.tree.ThisExpression#getAssigner(Environment, Context)->FieldUpdater::: this expression get assigner
sun.tools.tree.ThisExpression#getUpdater(Environment, Context)->FieldUpdater::: this expression get updater
sun.tools.tree.ThisExpression#inlineValue(Environment, Context)->Expression:::Inline
sun.tools.tree.ThisExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.ThisExpression#codeValue(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ThisExpression#print(PrintStream)->void:::Print
sun.tools.tree.ThrowStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.ThrowStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.ThrowStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.ThrowStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.ThrowStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.ThrowStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.TryStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check statement
sun.tools.tree.TryStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.TryStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.TryStatement#costInline(int, Environment, Context)->int:::Compute cost of inlining this statement
sun.tools.tree.TryStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.TryStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.TypeExpression#toType(Environment, Context)->Type:::Convert to a type
sun.tools.tree.TypeExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check an expression
sun.tools.tree.TypeExpression#checkAmbigName(Environment, Context, Vset, Hashtable, UnaryExpression)->Vset::: type expression check ambig name
sun.tools.tree.TypeExpression#inline(Environment, Context)->Expression::: type expression inline
sun.tools.tree.TypeExpression#print(PrintStream)->void:::Print
sun.tools.tree.UnaryExpression#order()->Expression:::Order the expression based on precedence
sun.tools.tree.UnaryExpression#selectType(Environment, Context, int)->void:::Select the type of the expression
sun.tools.tree.UnaryExpression#checkValue(Environment, Context, Vset, Hashtable)->Vset:::Check a unary expression
sun.tools.tree.UnaryExpression#isConstant()->boolean:::Check if constant
sun.tools.tree.UnaryExpression#eval(int)->Expression:::Evaluate
sun.tools.tree.UnaryExpression#eval(long)->Expression::: unary expression eval
sun.tools.tree.UnaryExpression#eval(float)->Expression::: unary expression eval
sun.tools.tree.UnaryExpression#eval(double)->Expression::: unary expression eval
sun.tools.tree.UnaryExpression#eval(boolean)->Expression::: unary expression eval
sun.tools.tree.UnaryExpression#eval(String)->Expression::: unary expression eval
sun.tools.tree.UnaryExpression#eval()->Expression::: unary expression eval
sun.tools.tree.UnaryExpression#inline(Environment, Context)->Expression:::Inline
sun.tools.tree.UnaryExpression#inlineValue(Environment, Context)->Expression::: unary expression inline value
sun.tools.tree.UnaryExpression#copyInline(Context)->Expression:::Create a copy of the expression for method inlining
sun.tools.tree.UnaryExpression#costInline(int, Environment, Context)->int:::The cost of inlining this expression
sun.tools.tree.UnaryExpression#print(PrintStream)->void:::Print
sun.tools.tree.UnsignedShiftRightExpression#eval(int, int)->Expression:::Evaluate
sun.tools.tree.UnsignedShiftRightExpression#eval(long, long)->Expression::: unsigned shift right expression eval
sun.tools.tree.UnsignedShiftRightExpression#simplify()->Expression:::Simplify
sun.tools.tree.UnsignedShiftRightExpression#codeOperation(Environment, Context, Assembler)->void:::Code
sun.tools.tree.UplevelReference#insertInto(UplevelReference)->UplevelReference:::Insert self into a list of references
sun.tools.tree.UplevelReference#isEarlierThan(UplevelReference)->boolean:::Tells if self precedes the other in the canonical ordering.
sun.tools.tree.UplevelReference#getTarget()->LocalMember:::the target of this reference
sun.tools.tree.UplevelReference#getLocalArgument()->LocalMember:::the local argument for this reference
sun.tools.tree.UplevelReference#getLocalField()->MemberDefinition:::the field allocated in the client for this reference
sun.tools.tree.UplevelReference#getLocalField(Environment)->MemberDefinition:::Get the local field, creating one if necessary
sun.tools.tree.UplevelReference#getClient()->ClassDefinition:::the client class
sun.tools.tree.UplevelReference#getNext()->UplevelReference:::the next reference in the client's list
sun.tools.tree.UplevelReference#isClientOuterField()->boolean:::Tell if this uplevel reference is the up-level "this" pointer of an inner class
sun.tools.tree.UplevelReference#localArgumentAvailable(Environment, Context)->boolean:::Tell if my local argument is directly available in this context
sun.tools.tree.UplevelReference#noteReference(Environment, Context)->void:::Process an uplevel reference
sun.tools.tree.UplevelReference#makeLocalReference(Environment, Context)->Expression:::Assuming noteReference() is all taken care of, build an uplevel reference
sun.tools.tree.UplevelReference#makeFieldReference(Environment, Context)->Expression:::As with makeLocalReference(), build a locally-usable reference
sun.tools.tree.UplevelReference#willCodeArguments(Environment, Context)->void:::During the inline phase, call this on a list of references for which the code phase will later emit arguments
sun.tools.tree.UplevelReference#codeArguments(Environment, Context, Assembler, long, MemberDefinition)->void:::Code is being generated for a call to a constructor of the client class
sun.tools.tree.UplevelReference#codeInitialization(Environment, Context, Assembler, long, MemberDefinition)->void:::Code is being generated for a constructor of the client class
sun.tools.tree.UplevelReference#toString()->String::: uplevel reference to string
sun.tools.tree.VarDeclarationStatement#checkDeclaration(Environment, Context, Vset, int, Type, Hashtable)->Vset:::Check statement
sun.tools.tree.VarDeclarationStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.VarDeclarationStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.VarDeclarationStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.VarDeclarationStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.VarDeclarationStatement#print(PrintStream, int)->void:::Print
sun.tools.tree.Vset#copy()->Vset:::Create an copy of the given Vset
sun.tools.tree.Vset#isDeadEnd()->boolean::: vset is dead end
sun.tools.tree.Vset#isReallyDeadEnd()->boolean:::Ask if this is a vset for a dead end
sun.tools.tree.Vset#clearDeadEnd()->Vset:::Replace canonical DEAD_END with a distinct but equivalent Vset
sun.tools.tree.Vset#testVar(int)->boolean:::Ask if a var is definitely assigned.
sun.tools.tree.Vset#testVarUnassigned(int)->boolean:::Ask if a var is definitely un-assigned
sun.tools.tree.Vset#addVar(int)->Vset:::Note that a var is definitely assigned
sun.tools.tree.Vset#addVarUnassigned(int)->Vset:::Note that a var is definitely un-assigned
sun.tools.tree.Vset#clearVar(int)->Vset:::Retract any assertion about the var
sun.tools.tree.Vset#join(Vset)->Vset:::Join with another vset
sun.tools.tree.Vset#addDAandJoinDU(Vset)->Vset::: vset add aand join u
sun.tools.tree.Vset#firstDAandSecondDU(Vset, Vset)->Vset::: vset first aand second u
sun.tools.tree.Vset#removeAdditionalVars(int)->Vset:::Remove variables from the vset that are no longer part of a context
sun.tools.tree.Vset#varLimit()->int:::Return one larger than the highest bit set.
sun.tools.tree.Vset#toString()->String::: vset to string
sun.tools.tree.WhileStatement#check(Environment, Context, Vset, Hashtable)->Vset:::Check a while statement
sun.tools.tree.WhileStatement#inline(Environment, Context)->Statement:::Inline
sun.tools.tree.WhileStatement#costInline(int, Environment, Context)->int:::The cost of inlining this statement
sun.tools.tree.WhileStatement#copyInline(Context, boolean)->Statement:::Create a copy of the statement for method inlining
sun.tools.tree.WhileStatement#code(Environment, Context, Assembler)->void:::Code
sun.tools.tree.WhileStatement#print(PrintStream, int)->void:::Print

AnsiInterpretingOutputStream#write(int)::: ansi interpreting output stream write:::if->escape->write->escapeCandidate->escape->toByteArray->new->String->if->asPredicate->test->key->escapeCandidate->escapeCandidate->length->charAt->handler->ESCAPE_CODE_ACTIONS->get->if->handler->handle->else->else->if->new->ByteArrayOutputStream->escape->write->else->out->write
AnsiInterpretingOutputStream#flush()::: ansi interpreting output stream flush:::out->flush
AnsiInterpretingOutputStream#moveCursor(String, int, int)::: ansi interpreting output stream move cursor:::delta->parseOutIntValue->buffer->performer->getBufferState->tx->ty->Math->Math->min->max->Math->Math->min->max->performer->setCursorPosition
AnsiInterpretingOutputStream#parseOutIntValue(String, int)::: ansi interpreting output stream parse out int value:::try->return->Integer->code->code->indexOf->code->length->substring->parseInt->catch->return->finally
AnsiInterpretingOutputStream.AnsiCodeHandler#handle(String)::: ansi code handler handle:::
AnsiInterpretingOutputStream.Performer#getBufferState()::: performer get buffer state:::
AnsiInterpretingOutputStream.Performer#setCursorPosition(int, int)::: performer set cursor position:::
EditingHistory#moveHistoryToSnippet(ConsoleReader, Supplier)::: editing history move history to snippet:::if->action->get->try->in->beep->catch->throw->new->IllegalStateException->finally->else->try->setBuffer->getDeclaredMethod->setBuffer->setAccessible->setBuffer->in->getHistory->current->toString->invoke->in->flush->catch->throw->new->IllegalStateException->finally
EditingHistory#bind(ConsoleReader, String, Object)::: editing history bind:::km->in->getKeys->for->i->shortcut->length
EditingHistory#size()::: editing history size:::return->currentDelegate->size
EditingHistory#isEmpty()::: editing history is empty:::return->currentDelegate->isEmpty
EditingHistory#index()::: editing history index:::return->currentDelegate->index
EditingHistory#clear()::: editing history clear:::if->throw->new->IllegalStateException->currentDelegate->clear
EditingHistory#get(int)::: editing history get:::return->currentDelegate->get
EditingHistory#add(CharSequence)::: editing history add:::currentLine->origIndex->fullHistory->index->fullSize->try->fullHistory->moveToEnd->fullHistory->index->if->if->fullHistory->index->foreach->if->entry->value->continue->cluster->entry->value->if->new->MemoryHistory->for->i->fullHistory->moveToEnd->while->fullHistory->previous->c->fullHistory->current->if->break->catch->finally->fullHistory->moveTo->if->new->NarrowingHistoryLine->complete->new->StringBuilder->for->i->complete->append->if->isComplete->fullHistory->add
EditingHistory#isComplete(CharSequence)::: editing history is complete:::
EditingHistory#set(int, CharSequence)::: editing history set:::if->throw->new->IllegalStateException->currentDelegate->set
EditingHistory#remove(int)::: editing history remove:::if->throw->new->IllegalStateException->return->currentDelegate->remove
EditingHistory#removeFirst()::: editing history remove first:::if->throw->new->IllegalStateException->return->currentDelegate->removeFirst
EditingHistory#removeLast()::: editing history remove last:::if->throw->new->IllegalStateException->return->currentDelegate->removeLast
EditingHistory#replace(CharSequence)::: editing history replace:::if->throw->new->IllegalStateException->currentDelegate->replace
EditingHistory#entries(int)::: editing history entries:::return->currentDelegate->entries
EditingHistory#entries()::: editing history entries:::return->currentDelegate->entries
EditingHistory#iterator()::: editing history iterator:::return->currentDelegate->iterator
EditingHistory#current()::: editing history current:::return->currentDelegate->current
EditingHistory#previous()::: editing history previous:::return->currentDelegate->previous
EditingHistory#next()::: editing history next:::return->currentDelegate->next
EditingHistory#moveToFirst()::: editing history move to first:::return->currentDelegate->moveToFirst
EditingHistory#moveToLast()::: editing history move to last:::return->currentDelegate->moveToLast
EditingHistory#moveTo(int)::: editing history move to:::return->currentDelegate->moveTo
EditingHistory#moveToEnd()::: editing history move to end:::currentDelegate->moveToEnd
EditingHistory#previousSnippet()::: editing history previous snippet:::while->previous->if->current->return->return
EditingHistory#nextSnippet()::: editing history next snippet:::success->while->next->if->current->return->return
EditingHistory#load(Iterable)::: editing history load:::currentHistoryLine->start->currentLine->foreach->line->new->StringBuilder->trailingBackSlashes->countTrailintBackslashes->continuation->line->line->length->line->length->delete->if->fullHistory->new->PersistentNarrowingHistoryLine->add->else->fullHistory->new->PersistentLine->add
EditingHistory#save()::: editing history save:::result->new->ArrayList<>->entries->fullHistory->iterator->if->entries->hasNext->entry->entries->next->while->historyLine->entry->value->new->StringBuilder->trailingBackSlashes->countTrailintBackslashes->for->i->entries->hasNext->entries->next->if->entry->value->historyLine->append->result->historyLine->toString->add->return
EditingHistory#countTrailintBackslashes(CharSequence)::: editing history count trailint backslashes:::count->for->i->text->length->return
EditingHistory#entries(boolean)::: editing history entries:::result->new->ArrayList<>->foreach->if->e->value->result->e->value->toString->add->return
EditingHistory#fullHistoryReplace(String)::: editing history full history replace:::fullHistory->removeLast->foreach->source->split->fullHistory->add
EditingHistory.NarrowingHistoryLine#length()::: narrowing history line length:::return->delegate->length
EditingHistory.NarrowingHistoryLine#charAt(int)::: narrowing history line char at:::return->delegate->charAt
EditingHistory.NarrowingHistoryLine#subSequence(int, int)::: narrowing history line sub sequence:::return->delegate->subSequence
EditingHistory.NarrowingHistoryLine#toString()::: narrowing history line to string:::return->delegate->toString

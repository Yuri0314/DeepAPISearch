sun.net.ftp.impl.DefaultFtpClientProvider#createFtpClient()->sun.net.ftp.FtpClient::: default ftp client provider create ftp client
sun.net.ftp.impl.FtpClient#create()->sun.net.ftp.FtpClient:::Creates an instance of FtpClient
sun.net.ftp.impl.FtpClient#enablePassiveMode(boolean)->sun.net.ftp.FtpClient:::Set the transfer mode to passive
sun.net.ftp.impl.FtpClient#isPassiveModeEnabled()->boolean:::Gets the current transfer mode.
sun.net.ftp.impl.FtpClient#setConnectTimeout(int)->sun.net.ftp.FtpClient:::Sets the timeout value to use when connecting to the server,
sun.net.ftp.impl.FtpClient#getConnectTimeout()->int:::Returns the current connection timeout value.
sun.net.ftp.impl.FtpClient#setReadTimeout(int)->sun.net.ftp.FtpClient:::Sets the timeout value to use when reading from the server,
sun.net.ftp.impl.FtpClient#getReadTimeout()->int:::Returns the current read timeout value.
sun.net.ftp.impl.FtpClient#setProxy(Proxy)->sun.net.ftp.FtpClient::: ftp client set proxy
sun.net.ftp.impl.FtpClient#getProxy()->Proxy:::Get the proxy of this FtpClient
sun.net.ftp.impl.FtpClient#isConnected()->boolean:::Tests whether this client is connected or not to a server.
sun.net.ftp.impl.FtpClient#getServerAddress()->SocketAddress::: ftp client get server address
sun.net.ftp.impl.FtpClient#connect(SocketAddress)->sun.net.ftp.FtpClient::: ftp client connect
sun.net.ftp.impl.FtpClient#connect(SocketAddress, int)->sun.net.ftp.FtpClient:::Connects the FtpClient to the specified destination.
sun.net.ftp.impl.FtpClient#login(String, char[])->sun.net.ftp.FtpClient:::Attempts to log on the server with the specified user name and password.
sun.net.ftp.impl.FtpClient#login(String, char[], String)->sun.net.ftp.FtpClient:::Attempts to log on the server with the specified user name, password and account name.
sun.net.ftp.impl.FtpClient#close()->void:::Logs out the current user
sun.net.ftp.impl.FtpClient#isLoggedIn()->boolean:::Checks whether the client is logged in to the server or not.
sun.net.ftp.impl.FtpClient#changeDirectory(String)->sun.net.ftp.FtpClient:::Changes to a specific directory on a remote FTP server
sun.net.ftp.impl.FtpClient#changeToParentDirectory()->sun.net.ftp.FtpClient:::Changes to the parent directory, sending the CDUP command to the server.
sun.net.ftp.impl.FtpClient#getWorkingDirectory()->String:::Returns the server current working directory, or null if the PWD command failed.
sun.net.ftp.impl.FtpClient#setRestartOffset(long)->sun.net.ftp.FtpClient:::Sets the restart offset to the specified value
sun.net.ftp.impl.FtpClient#getFile(String, OutputStream)->sun.net.ftp.FtpClient:::Retrieves a file from the ftp server and writes it to the specified OutputStream
sun.net.ftp.impl.FtpClient#getFileStream(String)->InputStream:::Retrieves a file from the ftp server, using the RETR command, and returns the InputStream from* the established data connection
sun.net.ftp.impl.FtpClient#putFileStream(String, boolean)->OutputStream:::Transfers a file from the client to the server (aka a put) by sending the STOR or STOU command, depending on the unique argument, and returns the OutputStream from the established data connection
sun.net.ftp.impl.FtpClient#putFile(String, InputStream, boolean)->sun.net.ftp.FtpClient:::Transfers a file from the client to the server (aka a put) by sending the STOR command
sun.net.ftp.impl.FtpClient#appendFile(String, InputStream)->sun.net.ftp.FtpClient:::Sends the APPE command to the server in order to transfer a data stream passed in argument and append it to the content of the specified remote file.
sun.net.ftp.impl.FtpClient#rename(String, String)->sun.net.ftp.FtpClient:::Renames a file on the server.
sun.net.ftp.impl.FtpClient#deleteFile(String)->sun.net.ftp.FtpClient:::Deletes a file on the server.
sun.net.ftp.impl.FtpClient#makeDirectory(String)->sun.net.ftp.FtpClient:::Creates a new directory on the server.
sun.net.ftp.impl.FtpClient#removeDirectory(String)->sun.net.ftp.FtpClient:::Removes a directory on the server.
sun.net.ftp.impl.FtpClient#noop()->sun.net.ftp.FtpClient:::Sends a No-operation command
sun.net.ftp.impl.FtpClient#getStatus(String)->String:::Sends the STAT command to the server
sun.net.ftp.impl.FtpClient#getFeatures()->List:::Sends the FEAT command to the server and returns the list of supported features in the form of strings
sun.net.ftp.impl.FtpClient#abort()->sun.net.ftp.FtpClient:::sends the ABOR command to the server
sun.net.ftp.impl.FtpClient#completePending()->sun.net.ftp.FtpClient:::Some methods do not wait until completion before returning, so this method can be called to wait until completion
sun.net.ftp.impl.FtpClient#reInit()->sun.net.ftp.FtpClient:::Reinitializes the USER parameters on the FTP server
sun.net.ftp.impl.FtpClient#setType(TransferType)->sun.net.ftp.FtpClient:::Changes the transfer type (binary, ascii, ebcdic) and issue the proper command (e.g
sun.net.ftp.impl.FtpClient#list(String)->InputStream:::Issues a LIST command to the server to get the current directory listing, and returns the InputStream from the data connection
sun.net.ftp.impl.FtpClient#nameList(String)->InputStream:::Issues a NLST path command to server to get the specified directory content
sun.net.ftp.impl.FtpClient#getSize(String)->long:::Issues the SIZE [path] command to the server to get the size of a specific file on the server
sun.net.ftp.impl.FtpClient#getLastModified(String)->Date:::Issues the MDTM [path] command to the server to get the modification time of a specific file on the server
sun.net.ftp.impl.FtpClient#setDirParser(FtpDirParser)->sun.net.ftp.FtpClient:::Sets the parser used to handle the directory output to the specified one
sun.net.ftp.impl.FtpClient#listFiles(String)->Iterator:::Issues a MLSD command to the server to get the specified directory listing and applies the current parser to create an Iterator of java.net.ftp.FtpDirEntry
sun.net.ftp.impl.FtpClient#useKerberos()->sun.net.ftp.FtpClient:::Attempts to use Kerberos GSSAPI as an authentication mechanism with the ftp server
sun.net.ftp.impl.FtpClient#getWelcomeMsg()->String:::Returns the Welcome string the server sent during initial connection.
sun.net.ftp.impl.FtpClient#getLastReplyCode()->FtpReplyCode:::Returns the last reply code sent by the server.
sun.net.ftp.impl.FtpClient#getLastResponseString()->String:::Returns the last response string sent by the server.
sun.net.ftp.impl.FtpClient#getLastTransferSize()->long:::Returns, when available, the size of the latest started transfer
sun.net.ftp.impl.FtpClient#getLastFileName()->String:::Returns, when available, the remote name of the last transfered file
sun.net.ftp.impl.FtpClient#startSecureSession()->sun.net.ftp.FtpClient:::Attempts to switch to a secure, encrypted connection
sun.net.ftp.impl.FtpClient#endSecureSession()->sun.net.ftp.FtpClient:::Sends a CCC command followed by a PROT C command to the server terminating an encrypted session and reverting back to a non crypted transmission.
sun.net.ftp.impl.FtpClient#allocate(long)->sun.net.ftp.FtpClient:::Sends the "Allocate" (ALLO) command to the server telling it to pre-allocate the specified number of bytes for the next transfer.
sun.net.ftp.impl.FtpClient#structureMount(String)->sun.net.ftp.FtpClient:::Sends the "Structure Mount" (SMNT) command to the server
sun.net.ftp.impl.FtpClient#getSystem()->String:::Sends a SYST (System) command to the server and returns the String sent back by the server describing the operating system at the server.
sun.net.ftp.impl.FtpClient#getHelp(String)->String:::Sends the HELP command to the server, with an optional command, like SITE, and returns the text sent back by the server.
sun.net.ftp.impl.FtpClient#siteCmd(String)->sun.net.ftp.FtpClient:::Sends the SITE command to the server

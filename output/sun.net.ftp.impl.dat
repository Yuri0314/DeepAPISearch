DefaultFtpClientProvider#createFtpClient()::: default ftp client provider create ftp client:::return->create
FtpClient#isASCIISuperset(String):::Test the named character encoding to verify that it converts ASCII characters correctly:::chkS->chkB->b->chkS->getBytes->return->equals
FtpClient.DefaultParser#parseLine(String)::: default parser parse line:::fdate->fsize->time->filename->permstring->username->groupname->dir->now->Calendar->getInstance->year->now->get->m->for->j->if->d->try->df->parse->catch->finally->if->c->time->indexOf->now->setTime->now->Integer->parseInt->set->now->Integer->time->length->parseInt->set->now->getTime->m2->linkp->matcher->if->m2->find->m2->group->perms->new->booleanArrs->for->i->file->new->FtpDirEntry->file->setUser->setGroup->file->Long->parseLong->setSize->setLastModified->file->setPermissions->file->line->charAt->setType->return->return
FtpClient.MLSxParser#parseLine(String)::: sx parser parse line:::name->i->line->lastIndexOf->if->line->substring->trim->line->substring->else->line->trim->file->new->FtpDirEntry->while->line->isEmpty->s->line->indexOf->if->line->substring->line->substring->else->s->indexOf->if->fact->s->substring->value->s->substring->file->addFact->s->file->getFact->if->file->Long->parseLong->setSize->file->getFact->if->d->try->df->parse->catch->finally->if->file->setLastModified->file->getFact->if->d->try->df->parse->catch->finally->if->file->setCreated->file->getFact->if->if->s->equalsIgnoreCase->file->setType->if->s->equalsIgnoreCase->file->setType->if->s->equalsIgnoreCase->file->setType->if->s->equalsIgnoreCase->file->setType->return
FtpClient#getTransferSize()::: ftp client get transfer size:::response->getLastResponseString->if->Pattern->compile->m->transPat->matcher->if->m->find->s->m->group->Long->parseLong
FtpClient#getTransferName():::extract the created file name from the response string: 226 Transfer complete (unique file name:toto.txt.1):::response->getLastResponseString->i->response->indexOf->e->response->lastIndexOf->if->response->substring
FtpClient#readServerResponse():::Pulls the response from the server and returns the code as a number:::replyBuf->new->StringBuilder->c->continuingCode->code->response->serverResponse->setSize->while->while->in->read->if->if->in->read->replyBuf->append->replyBuf->append->if->break->replyBuf->toString->replyBuf->setLength->if->logger->isLoggable->logger->finest->if->response->length->else->try->Integer->parseInt->catch->continue->finally->serverResponse->addElement->if->if->response->length->response->charAt->continue->else->break->else->if->response->length->response->charAt->continue->else->break->return
FtpClient#sendServer(String):::Sends command cmd to the server.:::out->print->if->logger->isLoggable->logger->finest
FtpClient#getResponseString():::converts the server response into a string.:::return->serverResponse->elementAt
FtpClient#getResponseStrings():::Returns all server response strings.:::return
FtpClient#readReply():::Read the reply from the FTP server.:::FtpReplyCode->readServerResponse->find->if->lastReplyCode->isPositivePreliminary->return->if->lastReplyCode->isPositiveCompletion->lastReplyCode->isPositiveIntermediate->if->getTransferName->return->return
FtpClient#issueCommand(String):::Sends a command to the FTP server and returns the error code (which can be a "success") sent by the server.:::if->isConnected->throw->new->IllegalStateException->if->try->completePending->catch->finally->if->cmd->indexOf->ex->new->sun.net.ftp.FtpProtocolException->ex->new->IllegalArgumentException->initCause->throw->sendServer->return->readReply
FtpClient#issueCommandCheck(String):::Send a command to the FTP server and check for success.:::if->issueCommand->throw->getResponseString->getLastReplyCode->new->sun.net.ftp.FtpProtocolException
FtpClient#openPassiveDataConnection(String):::Opens a "PASSIVE" connection with the server and returns the connected Socket.:::serverAnswer->port->dest->if->issueCommand->issueCommandCheck->getResponseString->if->Pattern->compile->m->epsvPat->matcher->if->m->find->throw->new->sun.net.ftp.FtpProtocolException->s->m->group->Integer->parseInt->add->server->getInetAddress->if->new->InetSocketAddress->else->InetSocketAddress->serverAddr->getHostName->createUnresolved->else->issueCommandCheck->getResponseString->if->Pattern->compile->m->pasvPat->matcher->if->m->find->throw->new->sun.net.ftp.FtpProtocolException->Integer->m->group->parseInt->Integer->m->group->parseInt->s->m->group->replace->new->InetSocketAddress->s->if->if->proxy->type->AccessController->new->PrivilegedAction<Socket>->doPrivileged->else->new->Socket->else->new->Socket->serverAddress->AccessController->new->PrivilegedAction<InetAddress>->doPrivileged->s->new->InetSocketAddress->bind->if->s->connect->else->if->s->connect->else->s->connect->if->s->setSoTimeout->else->if->s->setSoTimeout->if->try->sslFact->dest->getHostName->dest->getPort->createSocket->catch->throw->new->sun.net.ftp.FtpProtocolException->finally->if->issueCommand->s->close->if->getLastReplyCode->throw->new->FileNotFoundException->throw->getResponseString->getLastReplyCode->new->sun.net.ftp.FtpProtocolException->return
FtpClient#openDataConnection(String):::Opens a data connection with the server according to the set mode (ACTIVE or PASSIVE) then send the command passed as an argument.:::clientSocket->if->try->return->openPassiveDataConnection->catch->errmsg->e->getMessage->if->errmsg->startsWith->errmsg->startsWith->throw->finally->portSocket->myAddress->portCmd->if->proxy->type->throw->new->sun.net.ftp.FtpProtocolException->server->getLocalAddress->new->ServerSocket->try->portSocket->getInetAddress->if->myAddress->isAnyLocalAddress->server->getLocalAddress->myAddress->getHostAddress->portSocket->getLocalPort->if->issueCommand->issueCommand->addr->myAddress->getAddress->for->i->portSocket->getLocalPort->portSocket->getLocalPort->issueCommandCheck->issueCommandCheck->if->portSocket->setSoTimeout->else->if->portSocket->setSoTimeout->portSocket->accept->if->clientSocket->setSoTimeout->else->if->clientSocket->setSoTimeout->catch->finally->portSocket->close->if->try->sslFact->serverAddr->getHostName->serverAddr->getPort->createSocket->catch->throw->ex->getLocalizedMessage->new->IOException->finally->return
FtpClient#createInputStream(InputStream)::: ftp client create input stream:::if->return->new->sun.net.TelnetInputStream->return
FtpClient#createOutputStream(OutputStream)::: ftp client create output stream:::if->return->new->sun.net.TelnetOutputStream->return
FtpClient#create():::Creates an instance of FtpClient:::return->new->FtpClient
FtpClient#enablePassiveMode(boolean):::Set the transfer mode to passive:::return
FtpClient#isPassiveModeEnabled():::Gets the current transfer mode.:::return
FtpClient#setConnectTimeout(int):::Sets the timeout value to use when connecting to the server,:::return
FtpClient#getConnectTimeout():::Returns the current connection timeout value.:::return
FtpClient#setReadTimeout(int):::Sets the timeout value to use when reading from the server,:::return
FtpClient#getReadTimeout():::Returns the current read timeout value.:::return
FtpClient#setProxy(Proxy)::: ftp client set proxy:::return
FtpClient#getProxy():::Get the proxy of this FtpClient:::return
FtpClient#tryConnect(InetSocketAddress, int):::Connects to the specified destination.:::if->isConnected->disconnect->doConnect->try->server->getOutputStream->new->BufferedOutputStream->new->PrintStream->catch->throw->new->InternalError->finally->server->getInputStream->new->BufferedInputStream
FtpClient#doConnect(InetSocketAddress, int)::: ftp client do connect:::s->if->if->proxy->type->AccessController->new->PrivilegedAction<Socket>->doPrivileged->else->new->Socket->else->new->Socket->if->s->connect->else->if->s->connect->else->if->s->connect->else->s->connect->if->s->setSoTimeout->else->if->s->setSoTimeout->return
FtpClient#disconnect()::: ftp client disconnect:::if->isConnected->server->close->serverResponse->setSize
FtpClient#isConnected():::Tests whether this client is connected or not to a server.:::return
FtpClient#getServerAddress()::: ftp client get server address:::return->server->getRemoteSocketAddress
FtpClient#connect(SocketAddress)::: ftp client connect:::return->connect
FtpClient#connect(SocketAddress, int):::Connects the FtpClient to the specified destination.:::if->throw->new->IllegalArgumentException->tryConnect->if->readReply->throw->getResponseString->new->sun.net.ftp.FtpProtocolException->getResponseString->substring->return
FtpClient#tryLogin(String, char[])::: ftp client try login:::issueCommandCheck->if->if->String->valueOf->issueCommandCheck
FtpClient#login(String, char[]):::Attempts to log on the server with the specified user name and password.:::if->isConnected->throw->new->sun.net.ftp.FtpProtocolException->if->user->length->throw->new->IllegalArgumentException->tryLogin->l->sb->new->StringBuilder->for->i->serverResponse->size->sb->toString->return
FtpClient#login(String, char[], String):::Attempts to log on the server with the specified user name, password and account name.:::if->isConnected->throw->new->sun.net.ftp.FtpProtocolException->if->user->length->throw->new->IllegalArgumentException->tryLogin->if->issueCommandCheck->sb->new->StringBuilder->if->foreach->if->if->l->length->l->startsWith->l->substring->sb->append->sb->toString->return
FtpClient#close():::Logs out the current user:::if->isConnected->try->issueCommand->catch->finally->disconnect
FtpClient#isLoggedIn():::Checks whether the client is logged in to the server or not.:::return
FtpClient#changeDirectory(String):::Changes to a specific directory on a remote FTP server:::if->equals->throw->new->IllegalArgumentException->issueCommandCheck->return
FtpClient#changeToParentDirectory():::Changes to the parent directory, sending the CDUP command to the server.:::issueCommandCheck->return
FtpClient#getWorkingDirectory():::Returns the server current working directory, or null if the PWD command failed.:::issueCommandCheck->answ->getResponseString->if->answ->startsWith->return->return->answ->answ->lastIndexOf->substring
FtpClient#setRestartOffset(long):::Sets the restart offset to the specified value:::if->throw->new->IllegalArgumentException->return
FtpClient#getFile(String, OutputStream):::Retrieves a file from the ftp server and writes it to the specified OutputStream:::mtu->if->s->try->openDataConnection->catch->finally->issueCommandCheck->getTransferSize->remote->s->getInputStream->createInputStream->buf->new->byteArr->l->while->remote->read->if->local->write->remote->close->else->s->openDataConnection->getTransferSize->remote->s->getInputStream->createInputStream->buf->new->byteArr->l->while->remote->read->if->local->write->remote->close->return->completePending
FtpClient#getFileStream(String):::Retrieves a file from the ftp server, using the RETR command, and returns the InputStream from* the established data connection:::s->if->try->openDataConnection->catch->finally->if->return->issueCommandCheck->getTransferSize->return->s->getInputStream->createInputStream->openDataConnection->if->return->getTransferSize->return->s->getInputStream->createInputStream
FtpClient#putFileStream(String, boolean):::Transfers a file from the client to the server (aka a put) by sending the STOR or STOU command, depending on the unique argument, and returns the OutputStream from the established data connection:::cmd->s->openDataConnection->if->return->bm->return->s->getOutputStream->new->sun.net.TelnetOutputStream
FtpClient#putFile(String, InputStream, boolean):::Transfers a file from the client to the server (aka a put) by sending the STOR command:::cmd->mtu->if->s->openDataConnection->remote->s->getOutputStream->createOutputStream->buf->new->byteArr->l->while->local->read->if->remote->write->remote->close->return->completePending
FtpClient#appendFile(String, InputStream):::Sends the APPE command to the server in order to transfer a data stream passed in argument and append it to the content of the specified remote file.:::mtu->s->openDataConnection->remote->s->getOutputStream->createOutputStream->buf->new->byteArr->l->while->local->read->if->remote->write->remote->close->return->completePending
FtpClient#rename(String, String):::Renames a file on the server.:::issueCommandCheck->issueCommandCheck->return
FtpClient#deleteFile(String):::Deletes a file on the server.:::issueCommandCheck->return
FtpClient#makeDirectory(String):::Creates a new directory on the server.:::issueCommandCheck->return
FtpClient#removeDirectory(String):::Removes a directory on the server.:::issueCommandCheck->return
FtpClient#noop():::Sends a No-operation command:::issueCommandCheck->return
FtpClient#getStatus(String):::Sends the STAT command to the server:::issueCommandCheck->resp->getResponseStrings->sb->new->StringBuilder->for->i->resp->size->return->sb->toString
FtpClient#getFeatures():::Sends the FEAT command to the server and returns the list of supported features in the form of strings:::features->new->ArrayList<String>->issueCommandCheck->resp->getResponseStrings->for->i->resp->size->return
FtpClient#abort():::sends the ABOR command to the server:::issueCommandCheck->return
FtpClient#completePending():::Some methods do not wait until completion before returning, so this method can be called to wait until completion:::while->if->readReply->throw->getLastResponseString->new->sun.net.ftp.FtpProtocolException->return
FtpClient#reInit():::Reinitializes the USER parameters on the FTP server:::issueCommandCheck->if->if->session->getSession->session->invalidate->try->server->getOutputStream->new->BufferedOutputStream->new->PrintStream->catch->throw->new->InternalError->finally->server->getInputStream->new->BufferedInputStream->return
FtpClient#setType(TransferType):::Changes the transfer type (binary, ascii, ebcdic) and issue the proper command (e.g:::cmd->if->if->if->issueCommandCheck->return
FtpClient#list(String):::Issues a LIST command to the server to get the current directory listing, and returns the InputStream from the data connection:::s->openDataConnection->if->return->s->getInputStream->createInputStream->return
FtpClient#nameList(String):::Issues a NLST path command to server to get the specified directory content:::s->openDataConnection->if->return->s->getInputStream->createInputStream->return
FtpClient#getSize(String):::Issues the SIZE [path] command to the server to get the size of a specific file on the server:::if->path->length->throw->new->IllegalArgumentException->issueCommandCheck->if->s->getResponseString->s->s->length->substring->return->Long->parseLong->return
FtpClient#getLastModified(String):::Issues the MDTM [path] command to the server to get the modification time of a specific file on the server:::issueCommandCheck->if->s->getResponseString->substring->d->foreach->try->dateFormat->parse->catch->finally->if->return->return
FtpClient#setDirParser(FtpDirParser):::Sets the parser used to handle the directory output to the specified one:::return
FtpClient.FtpFileIterator#readNext()::: ftp file iterator read next:::if->return->line->try->do->in->readLine->if->fparser->parseLine->if->return->while->in->close->catch->finally
FtpClient.FtpFileIterator#hasNext()::: ftp file iterator has next:::return
FtpClient.FtpFileIterator#next()::: ftp file iterator next:::ret->readNext->return
FtpClient.FtpFileIterator#remove()::: ftp file iterator remove:::throw->new->UnsupportedOperationException
FtpClient.FtpFileIterator#close()::: ftp file iterator close:::if->in->close
FtpClient#listFiles(String):::Issues a MLSD command to the server to get the specified directory listing and applies the current parser to create an Iterator of java.net.ftp.FtpDirEntry:::s->sin->try->openDataConnection->catch->finally->if->s->getInputStream->new->InputStreamReader->new->BufferedReader->return->new->FtpFileIterator->else->openDataConnection->if->s->getInputStream->new->InputStreamReader->new->BufferedReader->return->new->FtpFileIterator->return
FtpClient#sendSecurityData(byte[])::: ftp client send security data:::s->Base64->getMimeEncoder->encodeToString->return->issueCommand
FtpClient#getSecurityData()::: ftp client get security data:::s->getLastResponseString->if->s->substring->equalsIgnoreCase->return->Base64->getMimeDecoder->s->s->length->substring->decode->return
FtpClient#useKerberos():::Attempts to use Kerberos GSSAPI as an authentication mechanism with the ftp server:::return
FtpClient#getWelcomeMsg():::Returns the Welcome string the server sent during initial connection.:::return
FtpClient#getLastReplyCode():::Returns the last reply code sent by the server.:::return
FtpClient#getLastResponseString():::Returns the last response string sent by the server.:::sb->new->StringBuilder->if->foreach->if->sb->append->return->sb->toString
FtpClient#getLastTransferSize():::Returns, when available, the size of the latest started transfer:::return
FtpClient#getLastFileName():::Returns, when available, the remote name of the last transfered file:::return
FtpClient#startSecureSession():::Attempts to switch to a secure, encrypted connection:::if->isConnected->throw->new->sun.net.ftp.FtpProtocolException->if->try->SSLSocketFactory->getDefault->catch->throw->e->getLocalizedMessage->new->IOException->finally->issueCommandCheck->s->try->sslFact->serverAddr->getHostName->serverAddr->getPort->createSocket->catch->try->disconnect->catch->finally->throw->finally->try->server->getOutputStream->new->BufferedOutputStream->new->PrintStream->catch->throw->new->InternalError->finally->server->getInputStream->new->BufferedInputStream->issueCommandCheck->issueCommandCheck->return
FtpClient#endSecureSession():::Sends a CCC command followed by a PROT C command to the server terminating an encrypted session and reverting back to a non crypted transmission.:::if->return->issueCommandCheck->issueCommandCheck->try->server->getOutputStream->new->BufferedOutputStream->new->PrintStream->catch->throw->new->InternalError->finally->server->getInputStream->new->BufferedInputStream->return
FtpClient#allocate(long):::Sends the "Allocate" (ALLO) command to the server telling it to pre-allocate the specified number of bytes for the next transfer.:::issueCommandCheck->return
FtpClient#structureMount(String):::Sends the "Structure Mount" (SMNT) command to the server:::issueCommandCheck->return
FtpClient#getSystem():::Sends a SYST (System) command to the server and returns the String sent back by the server describing the operating system at the server.:::issueCommandCheck->resp->getResponseString->return->resp->substring
FtpClient#getHelp(String):::Sends the HELP command to the server, with an optional command, like SITE, and returns the text sent back by the server.:::issueCommandCheck->resp->getResponseStrings->if->resp->size->return->resp->get->substring->sb->new->StringBuilder->for->i->resp->size->return->sb->toString
FtpClient#siteCmd(String):::Sends the SITE command to the server:::issueCommandCheck->return

OutputBuffer#close()::: output buffer close:::
OutputBuffer#append(char)::: output buffer append:::
OutputBuffer#append(String)::: output buffer append:::
OutputBuffer#append(char[], int, int)::: output buffer append:::
StringOutputBuffer#close()::: string output buffer close:::return->_buffer->toString
StringOutputBuffer#append(String)::: string output buffer append:::_buffer->append->return
StringOutputBuffer#append(char[], int, int)::: string output buffer append:::_buffer->append->return
StringOutputBuffer#append(char)::: string output buffer append:::_buffer->append->return
TransletOutputHandlerFactory#newInstance()::: translet output handler factory new instance:::return->new->TransletOutputHandlerFactory
TransletOutputHandlerFactory#newInstance(boolean)::: translet output handler factory new instance:::return->new->TransletOutputHandlerFactory
TransletOutputHandlerFactory#setOutputType(int)::: translet output handler factory set output type:::
TransletOutputHandlerFactory#setEncoding(String)::: translet output handler factory set encoding:::if
TransletOutputHandlerFactory#setOutputMethod(String)::: translet output handler factory set output method:::
TransletOutputHandlerFactory#setOutputStream(OutputStream)::: translet output handler factory set output stream:::
TransletOutputHandlerFactory#setWriter(Writer)::: translet output handler factory set writer:::
TransletOutputHandlerFactory#setHandler(ContentHandler)::: translet output handler factory set handler:::
TransletOutputHandlerFactory#setLexicalHandler(LexicalHandler)::: translet output handler factory set lexical handler:::
TransletOutputHandlerFactory#setNode(Node)::: translet output handler factory set node:::
TransletOutputHandlerFactory#getNode()::: translet output handler factory get node:::return->getDOM
TransletOutputHandlerFactory#setNextSibling(Node)::: translet output handler factory set next sibling:::
TransletOutputHandlerFactory#getXMLEventWriter()::: translet output handler factory get event writer:::return->getEventWriter
TransletOutputHandlerFactory#setXMLEventWriter(XMLEventWriter)::: translet output handler factory set event writer:::
TransletOutputHandlerFactory#getXMLStreamWriter()::: translet output handler factory get stream writer:::return->getStreamWriter
TransletOutputHandlerFactory#setXMLStreamWriter(XMLStreamWriter)::: translet output handler factory set stream writer:::
TransletOutputHandlerFactory#setIndentNumber(int)::: translet output handler factory set indent number:::
TransletOutputHandlerFactory#getSerializationHandler()::: translet output handler factory get serialization handler:::result->switch->if->new->ToUnknownStream->else->if->_method->equalsIgnoreCase->new->ToXMLStream->else->if->_method->equalsIgnoreCase->new->ToHTMLStream->else->if->_method->equalsIgnoreCase->new->ToTextStream->if->result->setIndentAmount->result->setEncoding->if->result->setWriter->else->result->setOutputStream->return->new->SAX2DOM->new->SAX2DOM->if->new->SAX2StAXEventWriter->else->if->new->SAX2StAXStreamWriter->if->if->_method->equalsIgnoreCase->if->new->ToXMLSAXHandler->else->new->ToXMLSAXHandler->else->if->_method->equalsIgnoreCase->if->new->ToHTMLSAXHandler->else->new->ToHTMLSAXHandler->else->if->_method->equalsIgnoreCase->if->new->ToTextSAXHandler->else->new->ToTextSAXHandler->return->return
WriterOutputBuffer#close()::: writer output buffer close:::try->_writer->flush->catch->throw->e->toString->new->RuntimeException->finally->return
WriterOutputBuffer#append(String)::: writer output buffer append:::try->_writer->write->catch->throw->e->toString->new->RuntimeException->finally->return
WriterOutputBuffer#append(char[], int, int)::: writer output buffer append:::try->_writer->write->catch->throw->e->toString->new->RuntimeException->finally->return
WriterOutputBuffer#append(char)::: writer output buffer append:::try->_writer->write->catch->throw->e->toString->new->RuntimeException->finally->return

Client#type1():::Generates the Type 1 message:::p->new->Writer->flags->if->p->writeInt->debug->p->getBytes->debug->return->p->getBytes
Client#type3(byte[], byte[]):::Generates the Type 3 message:::if->throw->new->NTLMException->debug->debug->r->new->Reader->challenge->r->readBytes->inputFlags->r->readInt->unicode->flags->p->new->Writer->lm->ntlm->p->writeSecurityBuffer->p->writeSecurityBuffer->p->writeSecurityBuffer->if->lmhash->calcLMHash->nthash->calcNTHash->if->calcResponse->if->calcResponse->else->if->nthash->calcNTHash->ntlm2LM->ntlm2NTLM->else->nthash->calcNTHash->if->username->toUpperCase->calcV2->if->alist->r->readSecurityBuffer->new->byteArr->blob->new->byteArr->System->new->byteArr->arraycopy->time->BigInteger->new->Date->getTime->valueOf->new->BigInteger->add->BigInteger->valueOf->multiply->toByteArray->for->i->System->arraycopy->System->new->byteArr->arraycopy->System->arraycopy->System->new->byteArr->arraycopy->username->toUpperCase->calcV2->p->writeSecurityBuffer->p->writeSecurityBuffer->p->new->byteArr->writeSecurityBuffer->p->writeInt->debug->p->getBytes->debug->return->p->getBytes
Client#getDomain():::Returns the domain value provided by server after the authentication is complete, or the domain value provided by the client before it.:::return
Client#dispose():::Disposes any password-derived information.:::Arrays->fill->Arrays->fill
NTLM#debug(String, Object...):::Prints out a formatted string, called in various places inside then NTLM implementation for debugging/logging purposes:::if->printf
NTLM#debug(byte[]):::Prints out the content of a byte array, called in various places inside the NTLM implementation for debugging/logging purposes:::if->try->new->sun.security.util.HexDumpEncoder->encodeBuffer->catch->finally
NTLMException#errorCode():::Returns the error code associated with this NTLMException.:::return
Server#type2(byte[], byte[]):::Generates the Type 2 message:::if->throw->new->NTLMException->debug->if->debug->p->new->Writer->flags->p->writeSecurityBuffer->p->writeInt->p->writeBytes->debug->p->getBytes->debug->return->p->getBytes
Server#verify(byte[], byte[]):::Verifies the Type3 message received from client and returns various negotiated information.:::if->throw->new->NTLMException->debug->if->debug->r->new->Reader->username->r->readSecurityBuffer->hostname->r->readSecurityBuffer->incomingDomain->r->readSecurityBuffer->verified->password->getPassword->if->throw->new->NTLMException->incomingLM->r->readSecurityBuffer->incomingNTLM->r->readSecurityBuffer->if->if->pw1->getP1->lmhash->calcLMHash->lmresponse->calcResponse->if->Arrays->equals->if->pw2->getP2->nthash->calcNTHash->ntresponse->calcResponse->if->Arrays->equals->debug->if->pw2->getP2->nthash->calcNTHash->clientNonce->Arrays->copyOf->ntlmresponse->ntlm2NTLM->if->Arrays->equals->debug->if->pw2->getP2->nthash->calcNTHash->if->clientNonce->Arrays->copyOfRange->lmresponse->username->toUpperCase->calcV2->if->Arrays->equals->if->clientBlob->Arrays->copyOfRange->ntlmresponse->username->toUpperCase->calcV2->if->Arrays->equals->debug->if->throw->new->NTLMException->return->new->StringArr
Server#getPassword(String, String):::Retrieves the password for a given user:::

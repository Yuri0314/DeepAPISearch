BeanContext#instantiateChild(String):::Instantiate the javaBean named as a child of this BeanContext:::
BeanContext#getResourceAsStream(String, BeanContextChild):::Analagous to java.lang.ClassLoader.getResourceAsStream(), this method allows a BeanContext implementation to interpose behavior between the child Component and underlying ClassLoader.:::
BeanContext#getResource(String, BeanContextChild):::Analagous to java.lang.ClassLoader.getResource(), this method allows a BeanContext implementation to interpose behavior between the child Component and underlying ClassLoader.:::
BeanContext#addBeanContextMembershipListener(BeanContextMembershipListener):::Adds the specified BeanContextMembershipListener to receive BeanContextMembershipEvents from this BeanContext whenever it adds or removes a child Component(s).:::
BeanContext#removeBeanContextMembershipListener(BeanContextMembershipListener):::Removes the specified BeanContextMembershipListener so that it no longer receives BeanContextMembershipEvents when the child Component(s) are added or removed.:::
BeanContextChild#setBeanContext(BeanContext)::: Objects that implement this interface, shall fire a java.beans.PropertyChangeEvent, with parameters:  propertyName "beanContext", oldValue (the previous nesting BeanContext instance, or null), newValue (the current nesting BeanContext instance, or null):::
BeanContextChild#getBeanContext():::Gets the BeanContext associated with this BeanContextChild.:::
BeanContextChild#addPropertyChangeListener(String, PropertyChangeListener):::Adds a PropertyChangeListener to this BeanContextChild in order to receive a PropertyChangeEvent whenever the specified property has changed.:::
BeanContextChild#removePropertyChangeListener(String, PropertyChangeListener):::Removes a PropertyChangeListener from this BeanContextChild  so that it no longer receives PropertyChangeEvents when the specified property is changed.:::
BeanContextChild#addVetoableChangeListener(String, VetoableChangeListener):::Adds a VetoableChangeListener to this BeanContextChild to receive events whenever the specified property changes.:::
BeanContextChild#removeVetoableChangeListener(String, VetoableChangeListener):::Removes a VetoableChangeListener from this BeanContextChild so that it no longer receives events when the specified property changes.:::
BeanContextChildSupport#setBeanContext(BeanContext):::Sets the BeanContext for this BeanContextChildSupport.:::if->return->oldValue->newValue->if->if->validatePendingSetBeanContext->throw->new->PropertyChangeEvent->new->PropertyVetoException->try->fireVetoableChange->catch->throw->finally->if->releaseBeanContextResources->firePropertyChange->if->initializeBeanContextResources
BeanContextChildSupport#getBeanContext():::Gets the nesting BeanContext for this BeanContextChildSupport.:::return
BeanContextChildSupport#addPropertyChangeListener(String, PropertyChangeListener):::Add a PropertyChangeListener for a specific property:::pcSupport->addPropertyChangeListener
BeanContextChildSupport#removePropertyChangeListener(String, PropertyChangeListener):::Remove a PropertyChangeListener for a specific property:::pcSupport->removePropertyChangeListener
BeanContextChildSupport#addVetoableChangeListener(String, VetoableChangeListener):::Add a VetoableChangeListener for a specific property:::vcSupport->addVetoableChangeListener
BeanContextChildSupport#removeVetoableChangeListener(String, VetoableChangeListener):::Removes a VetoableChangeListener:::vcSupport->removeVetoableChangeListener
BeanContextChildSupport#serviceRevoked(BeanContextServiceRevokedEvent):::A service provided by the nesting BeanContext has been revoked:::
BeanContextChildSupport#serviceAvailable(BeanContextServiceAvailableEvent):::A new service is available from the nesting BeanContext:::
BeanContextChildSupport#getBeanContextChildPeer():::Gets the BeanContextChild associated with this BeanContextChildSupport.:::return
BeanContextChildSupport#isDelegated():::Reports whether or not this class is a delegate of another.:::return->this->equals
BeanContextChildSupport#firePropertyChange(String, Object, Object):::Report a bound property update to any registered listeners:::pcSupport->firePropertyChange
BeanContextChildSupport#fireVetoableChange(String, Object, Object):::Report a vetoable property update to any registered listeners:::vcSupport->fireVetoableChange
BeanContextChildSupport#validatePendingSetBeanContext(BeanContext):::Called from setBeanContext to validate (or otherwise) the pending change in the nesting BeanContext property value:::return
BeanContextContainerProxy#getContainer():::Gets the java.awt.Container associated with this BeanContext.:::
BeanContextEvent#getBeanContext():::Gets the BeanContext associated with this event.:::return->getSource
BeanContextEvent#setPropagatedFrom(BeanContext):::Sets the BeanContext from which this event was propagated.:::
BeanContextEvent#getPropagatedFrom():::Gets the BeanContext from which this event was propagated.:::return
BeanContextEvent#isPropagated():::Reports whether or not this event is propagated from some other BeanContext.:::return
BeanContextMembershipEvent#size():::Gets the number of children affected by the notification.:::return->children->size
BeanContextMembershipEvent#contains(Object):::Is the child specified affected by the event?:::return->children->contains
BeanContextMembershipEvent#toArray():::Gets the array of children affected by this event.:::return->children->toArray
BeanContextMembershipEvent#iterator():::Gets the array of children affected by this event.:::return->children->iterator
BeanContextMembershipListener#childrenAdded(BeanContextMembershipEvent):::Called when a child or list of children is added to a BeanContext that this listener is registered with.:::
BeanContextMembershipListener#childrenRemoved(BeanContextMembershipEvent):::Called when a child or list of children is removed from a BeanContext that this listener is registered with.:::
BeanContextProxy#getBeanContextProxy():::Gets the BeanContextChild (or subinterface) associated with this object.:::
BeanContextServiceAvailableEvent#getSourceAsBeanContextServices():::Gets the source as a reference of type BeanContextServices.:::return->getBeanContext
BeanContextServiceAvailableEvent#getServiceClass():::Gets the service class that is the subject of this notification.:::return
BeanContextServiceAvailableEvent#getCurrentServiceSelectors():::Gets the list of service dependent selectors.:::return->getSource->getCurrentServiceSelectors
BeanContextServiceProvider#getService(BeanContextServices, Object, Class, Object):::Invoked by BeanContextServices, this method requests an instance of a service from this BeanContextServiceProvider.:::
BeanContextServiceProvider#releaseService(BeanContextServices, Object, Object):::Invoked by BeanContextServices, this method releases a nested BeanContextChild's (or any arbitrary object associated with a BeanContextChild) reference to the specified service.:::
BeanContextServiceProvider#getCurrentServiceSelectors(BeanContextServices, Class):::Invoked by BeanContextServices, this method gets the current service selectors for the specified service:::
BeanContextServiceProviderBeanInfo#getServicesBeanInfo():::Gets a BeanInfo array, one for each service class or interface statically available from this ServiceProvider.:::
BeanContextServiceRevokedEvent#getSourceAsBeanContextServices():::Gets the source as a reference of type BeanContextServices:::return->getBeanContext
BeanContextServiceRevokedEvent#getServiceClass():::Gets the service class that is the subject of this notification:::return
BeanContextServiceRevokedEvent#isServiceClass(Class):::Checks this event to determine whether or not the service being revoked is of a particular class.:::return->serviceClass->equals
BeanContextServiceRevokedEvent#isCurrentServiceInvalidNow():::Reports if the current service is being forcibly revoked, in which case the references are now invalidated and unusable.:::return
BeanContextServiceRevokedListener#serviceRevoked(BeanContextServiceRevokedEvent):::The service named has been revoked:::
BeanContextServices#addService(Class, BeanContextServiceProvider):::Adds a service to this BeanContext:::
BeanContextServices#revokeService(Class, BeanContextServiceProvider, boolean):::BeanContextServiceProviders wishing to remove a currently registered service from this context may do so via invocation of this method:::
BeanContextServices#hasService(Class):::Reports whether or not a given service is currently available from this context.:::
BeanContextServices#getService(BeanContextChild, Object, Class, Object, BeanContextServiceRevokedListener):::A BeanContextChild, or any arbitrary object associated with a BeanContextChild, may obtain a reference to a currently registered service from its nesting BeanContextServices via invocation of this method:::
BeanContextServices#releaseService(BeanContextChild, Object, Object):::Releases a BeanContextChild's (or any arbitrary object associated with a BeanContextChild) reference to the specified service by calling releaseService() on the underlying BeanContextServiceProvider.:::
BeanContextServices#getCurrentServiceClasses():::Gets the currently available services for this context.:::
BeanContextServices#getCurrentServiceSelectors(Class):::Gets the list of service dependent service parameters (Service Selectors) for the specified service, by calling getCurrentServiceSelectors() on the underlying BeanContextServiceProvider.:::
BeanContextServices#addBeanContextServicesListener(BeanContextServicesListener):::Adds a BeanContextServicesListener to this BeanContext:::
BeanContextServices#removeBeanContextServicesListener(BeanContextServicesListener):::Removes a BeanContextServicesListener from this BeanContext:::
BeanContextServicesListener#serviceAvailable(BeanContextServiceAvailableEvent):::The service named has been registered:::
BeanContextServicesSupport#getBeanContextServicesPeer():::Gets the BeanContextServices associated with this BeanContextServicesSupport.:::return->getBeanContextChildPeer
BeanContextServicesSupport.BCSSServiceProvider#getServiceProvider():::Returns the service provider.:::return
BeanContextServicesSupport#getChildBeanContextServicesListener(Object):::Gets the BeanContextServicesListener (if any) of the specified child.:::try->return->catch->return->finally
BeanContextServicesSupport#fireServiceAdded(Class):::Fires a BeanContextServiceEvent notifying of a new service.:::bcssae->getBeanContextServicesPeer->new->BeanContextServiceAvailableEvent->fireServiceAdded
BeanContextServicesSupport#fireServiceAdded(BeanContextServiceAvailableEvent):::Fires a BeanContextServiceAvailableEvent indicating that a new service has become available.:::copy->synchronized->bcsListeners->toArray->for->i
BeanContextServicesSupport#fireServiceRevoked(BeanContextServiceRevokedEvent):::Fires a BeanContextServiceEvent notifying of a service being revoked.:::copy->synchronized->bcsListeners->toArray->for->i
BeanContextServicesSupport#fireServiceRevoked(Class, boolean):::Fires a BeanContextServiceRevokedEvent indicating that a particular service is no longer available.:::copy->bcsre->getBeanContextServicesPeer->new->BeanContextServiceRevokedEvent->synchronized->bcsListeners->toArray->for->i
BeanContextSupport#getBeanContextPeer():::Gets the instance of BeanContext that this object is providing the implementation for.:::return->getBeanContextChildPeer
BeanContextSupport#instantiateChild(String)::: The instantiateChild method is a convenience hook in BeanContext to simplify the task of instantiating a Bean, nested, into a BeanContext:::bc->getBeanContextPeer->return->Beans->bc->getClass->getClassLoader->instantiate
BeanContextSupport#size():::Gets the number of children currently nested in this BeanContext.:::synchronized->return->children->size
BeanContextSupport#isEmpty():::Reports whether or not this BeanContext is empty:::synchronized->return->children->isEmpty
BeanContextSupport#contains(Object):::Determines whether or not the specified object is currently a child of this BeanContext.:::synchronized->return->children->containsKey
BeanContextSupport#containsKey(Object):::Determines whether or not the specified object is currently a child of this BeanContext.:::synchronized->return->children->containsKey
BeanContextSupport#iterator():::Gets all JavaBean or BeanContext instances currently nested in this BeanContext.:::synchronized->return->children->keySet->iterator->new->BCSIterator
BeanContextSupport#toArray():::Gets all JavaBean or BeanContext instances currently nested in this BeanContext.:::synchronized->return->children->keySet->toArray
BeanContextSupport#toArray(Object[]):::Gets an array containing all children of this BeanContext that match the types contained in arry.:::synchronized->return->children->keySet->toArray
BeanContextSupport#add(Object):::Adds/nests a child within this BeanContext:::if->throw->new->IllegalArgumentException->if->children->containsKey->return->synchronized->if->children->containsKey->return->if->validatePendingAdd->throw->new->IllegalStateException->cbcc->getChildBeanContextChild->bccp->synchronized->if->getBeanContextProxy->if->throw->new->NullPointerException->bcsc->createBCSChild->pbcsc->synchronized->children->put->if->children->createBCSChild->put->if->synchronized->try->cbcc->getBeanContextPeer->setBeanContext->catch->synchronized->children->remove->if->children->remove->throw->new->IllegalStateException->finally->cbcc->addPropertyChangeListener->cbcc->addVetoableChangeListener->v->getChildVisibility->if->if->v->okToUseGui->else->v->dontUseGui->if->getChildSerializable->childJustAddedHook->if->getChildVisibility->if->if->v->okToUseGui->else->v->dontUseGui->if->getChildSerializable->childJustAddedHook->getBeanContextPeer->new->ObjectArr->new->ObjectArr->new->BeanContextMembershipEvent->fireChildrenAdded->return
BeanContextSupport#remove(Object):::Removes a child from this BeanContext:::return->remove
BeanContextSupport#remove(Object, boolean):::internal remove used when removal caused by unexpected setBeanContext or by remove() invocation.:::if->throw->new->IllegalArgumentException->synchronized->if->containsKey->return->if->validatePendingRemove->throw->new->IllegalStateException->bcsc->children->get->pbcsc->peer->synchronized->if->cbcc->getChildBeanContextChild->if->synchronized->cbcc->removePropertyChangeListener->cbcc->removeVetoableChangeListener->try->cbcc->setBeanContext->catch->cbcc->addPropertyChangeListener->cbcc->addVetoableChangeListener->throw->new->IllegalStateException->finally->synchronized->children->remove->if->bcsc->isProxyPeer->children->bcsc->getProxyPeer->get->children->remove->if->getChildSerializable->childJustRemovedHook->if->if->getChildSerializable->childJustRemovedHook->getBeanContextPeer->new->ObjectArr->new->ObjectArr->new->BeanContextMembershipEvent->fireChildrenRemoved->return
BeanContextSupport#containsAll(Collection):::Tests to see if all objects in the specified Collection are children of this BeanContext.:::synchronized->i->c->iterator->while->i->hasNext->if->i->next->contains->return->return
BeanContextSupport#addAll(Collection):::add Collection to set of Children (Unsupported) implementations must synchronized on the hierarchy lock and "children" protected field:::throw->new->UnsupportedOperationException
BeanContextSupport#removeAll(Collection):::remove all specified children (Unsupported) implementations must synchronized on the hierarchy lock and "children" protected field:::throw->new->UnsupportedOperationException
BeanContextSupport#retainAll(Collection):::retain only specified children (Unsupported) implementations must synchronized on the hierarchy lock and "children" protected field:::throw->new->UnsupportedOperationException
BeanContextSupport#clear():::clear the children (Unsupported) implementations must synchronized on the hierarchy lock and "children" protected field:::throw->new->UnsupportedOperationException
BeanContextSupport#setDesignTime(boolean):::Sets the new design time value for this BeanContext.:::if->Boolean->valueOf->Boolean->valueOf->firePropertyChange
BeanContextSupport#isDesignTime():::Reports whether or not this object is in currently in design time mode.:::return
BeanContextSupport#setLocale(Locale):::Sets the locale of this BeanContext.:::if->locale->equals->old->fireVetoableChange->firePropertyChange
BeanContextSupport#getLocale():::Gets the locale for this BeanContext.:::return
BeanContextSupport#needsGui()::: This method is typically called from the environment in order to determine if the implementor "needs" a GUI:::bc->getBeanContextPeer->if->if->return->needsGui->if->return->synchronized->for->i->children->keySet->iterator->i->hasNext->return
BeanContextSupport#avoidingGui():::Used to determine if the BeanContext child is avoiding using its GUI.:::return->needsGui
BeanContextSupport#isSerializing():::Is this BeanContext in the process of being serialized?:::return
BeanContextSupport#bcsChildren():::Returns an iterator of all children of this BeanContext.:::synchronized->return->children->values->iterator
BeanContextSupport#childDeserializedHook(Object, BCSChild):::Called by readObject with the newly deserialized child and BCSChild.:::synchronized->children->put
BeanContextSupport#serialize(ObjectOutputStream, Collection):::Used by writeObject to serialize a Collection.:::count->objects->coll->toArray->for->i->oos->writeInt->for->i
BeanContextSupport#deserialize(ObjectInputStream, Collection):::used by readObject to deserialize a collection.:::count->ois->readInt->while->coll->ois->readObject->add
BeanContextSupport#writeChildren(ObjectOutputStream):::Used to serialize all children of this BeanContext.:::if->return->prev->count->synchronized->i->children->entrySet->iterator->while->i->hasNext->entry->i->next->if->entry->getKey->try->oos->entry->getKey->writeObject->oos->entry->getValue->writeObject->catch->throw->finally->if->throw->new->IOException
BeanContextSupport#getChildVisibility(Object):::Gets the Component (if any) associated with the specified child.:::try->return->catch->return->finally
BeanContextSupport#getChildSerializable(Object):::Gets the Serializable (if any) associated with the specified Child:::try->return->catch->return->finally
BeanContextSupport#getChildPropertyChangeListener(Object):::Gets the PropertyChangeListener (if any) of the specified child:::try->return->catch->return->finally
BeanContextSupport#getChildVetoableChangeListener(Object):::Gets the VetoableChangeListener (if any) of the specified child:::try->return->catch->return->finally
BeanContextSupport#getChildBeanContextMembershipListener(Object):::Gets the BeanContextMembershipListener (if any) of the specified child:::try->return->catch->return->finally
BeanContextSupport#getChildBeanContextChild(Object):::Gets the BeanContextChild (if any) of the specified child:::try->bcc->if->throw->new->IllegalArgumentException->else->return->catch->try->return->getBeanContextProxy->catch->return->finally->finally
BeanContextSupport#copyChildren():::Gets a copy of the this BeanContext's children.:::synchronized->return->children->keySet->toArray
BeanContextSupport#classEquals(Class, Class):::Tests to see if two class objects, or their names are equal.:::return->first->equals->first->getName->second->getName->equals

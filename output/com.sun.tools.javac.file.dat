BaseFileManager#setContext(Context):::Set the context for JavacPathFileManager.:::Log->instance->Options->instance->options->get->warn->options->isLintSet->locations->FSInfo->instance->update->s->options->get->if->try->Float->parseFloat->catch->finally
BaseFileManager#deferredClose():::Wait for a period of inactivity before calling close():::t->getClass->getName->new->Thread->t->setDaemon->t->start
BaseFileManager#handleOption(Option, String):::Common back end for OptionHelper handleFileManagerOption.:::switch->return->locations->setMultiReleaseValue->return->return->locations->handleOption
BaseFileManager#handleOptions(Map):::Call handleOption for collection of options and corresponding values.:::ok->foreach->map->entrySet->try->e->getKey->e->getValue->handleOption->catch->log->Errors->e->getKey->getPrimaryName->ex->getMessage->IllegalArgumentForOption->error->finally->return
BaseFileManager#makeByteBuffer(InputStream):::Make a byte buffer from an input stream.:::limit->in->available->if->result->byteBufferCache->get->position->while->in->available->if->ByteBuffer->allocate->result->flip->put->count->in->result->array->read->if->break->result->position->return->result->flip
CacheFSInfo#preRegister(Context):::Register a Context.Factory to create a CacheFSInfo.:::context->instance->new->CacheFSInfo->c->put->return->put
FSInfo#instance(Context):::Get the FSInfo instance for this context.:::instance->context->get->if->new->FSInfo->return
JavacFileManager#preRegister(Context):::Register a Context.Factory to create a JavacFileManager.:::context->new->JavacFileManager->put
JavacFileManager#setContext(Context):::Set the context for JavacFileManager.:::super->setContext->FSInfo->instance->options->isSet->sf->options->get->if->sf->equals
JavacFileManager#setSymbolFileEnabled(boolean):::Set whether or not to use ct.sym as an alternate to rt.jar.:::
JavacFileManager#flush():::Flush any output resources.:::contentCache->clear
JavacFileManager#close():::Close the JavaFileManager, releasing resources.:::if->deferredClose->return->locations->close->foreach->containers->values->container->close->containers->clear->contentCache->clear
JavacFileManager#isRelativeUri(URI):::Enforces the specification of a "relative" name as used in #getFileForInput(Location,String,String) getFileForInput:::if->uri->isAbsolute->return->path->uri->normalize->getPath->if->path->length->return->if->path->uri->getPath->equals->return->if->path->startsWith->path->startsWith->path->startsWith->return->return
JavacFileManager#getRelativeName(File):::Converts a relative file name to a relative URI:::if->file->isAbsolute->result->file->getPath->replace->if->isRelativeUri->return->throw->new->IllegalArgumentException
JavacFileManager#getMessage(IOException):::Get a detail message from an IOException:::s->e->getLocalizedMessage->if->return->e->getMessage->if->return->return->e->toString
JRTIndex#instance(Context):::Get a context-specific instance of a cache.:::try->instance->context->get->if->context->new->JRTIndex->put->return->catch->throw->new->UncheckedIOException->finally
PathFileObject#forDirectoryPath(BaseFileManager, Path, Path, RelativePath):::Create a PathFileObject for a file within a directory, such that the binary name can be inferred from the relationship to an enclosing directory:::return->new->DirectoryFileObject
PathFileObject#forJarPath(BaseFileManager, Path, Path):::Create a PathFileObject for a file in a file system such as a jar file, such that the binary name can be inferred from its position within the file system:::return->new->JarFileObject
PathFileObject#forJRTPath(BaseFileManager, Path):::Create a PathFileObject for a file in a modular file system, such as jrt:, such that the binary name can be inferred from its position within the filesystem:::return->new->JRTFileObject
PathFileObject#forSimplePath(BaseFileManager, Path, Path):::Create a PathFileObject for a file whose binary name must be inferred from its position on a search path:::return->new->SimpleFileObject
PathFileObject#inferBinaryName(Iterable):::See JavacFileManager#inferBinaryName.:::
PathFileObject#getSibling(String):::Return the file object for a sibling file with a given file name:::
PathFileObject#getPath():::Return the Path for this object.:::return
PathFileObject#getShortName():::The short name is used when generating raw diagnostics.:::return->path->getFileName->toString
PathFileObject#getSimpleName(FileObject):::Return the last component of a presumed hierarchical URI:::uri->fo->toUri->s->uri->getSchemeSpecificPart->return->s->s->lastIndexOf->substring
RelativePath.RelativeDirectory#contains(RelativePath):::Return true if this subdirectory "contains" the other path:::return->length->path->length->startsWith

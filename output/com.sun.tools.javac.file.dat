com.sun.tools.javac.file.BaseFileManager#setContext(Context)->void:::Set the context for JavacPathFileManager.
com.sun.tools.javac.file.BaseFileManager#createLocations()->Locations::: base file manager create locations
com.sun.tools.javac.file.BaseFileManager#deferredClose()->void:::Wait for a period of inactivity before calling close()
com.sun.tools.javac.file.BaseFileManager#updateLastUsedTime()->void::: base file manager update last used time
com.sun.tools.javac.file.BaseFileManager#getClassLoader(URL[])->ClassLoader::: base file manager get class loader
com.sun.tools.javac.file.BaseFileManager#isDefaultBootClassPath()->boolean::: base file manager is default boot class path
com.sun.tools.javac.file.BaseFileManager#handleOption(String, Iterator)->boolean::: base file manager handle option
com.sun.tools.javac.file.BaseFileManager#isSupportedOption(String)->int::: base file manager is supported option
com.sun.tools.javac.file.BaseFileManager#handleOption(Option, String)->boolean:::Common back end for OptionHelper handleFileManagerOption.
com.sun.tools.javac.file.BaseFileManager#handleOptions(Map)->boolean:::Call handleOption for collection of options and corresponding values.
com.sun.tools.javac.file.BaseFileManager#getEncodingName()->String::: base file manager get encoding name
com.sun.tools.javac.file.BaseFileManager#decode(ByteBuffer, boolean)->CharBuffer::: base file manager decode
com.sun.tools.javac.file.BaseFileManager#getDecoder(String, boolean)->CharsetDecoder::: base file manager get decoder
com.sun.tools.javac.file.BaseFileManager#makeByteBuffer(InputStream)->ByteBuffer:::Make a byte buffer from an input stream.
com.sun.tools.javac.file.BaseFileManager#recycleByteBuffer(ByteBuffer)->void::: base file manager recycle byte buffer
com.sun.tools.javac.file.BaseFileManager#getCachedContent(JavaFileObject)->CharBuffer::: base file manager get cached content
com.sun.tools.javac.file.BaseFileManager#cache(JavaFileObject, CharBuffer)->void::: base file manager cache
com.sun.tools.javac.file.BaseFileManager#flushCache(JavaFileObject)->void::: base file manager flush cache
com.sun.tools.javac.file.BaseFileManager.ContentCacheEntry#isValid(JavaFileObject)->boolean::: content cache entry is valid
com.sun.tools.javac.file.BaseFileManager.ContentCacheEntry#getValue()->CharBuffer::: content cache entry get value
com.sun.tools.javac.file.BaseFileManager#getKind(Path)->Kind::: base file manager get kind
com.sun.tools.javac.file.BaseFileManager#getKind(String)->Kind::: base file manager get kind
com.sun.tools.javac.file.BaseFileManager#nullCheck(T)->T::: base file manager null check
com.sun.tools.javac.file.BaseFileManager#nullCheck(Collection)->Collection::: base file manager null check
com.sun.tools.javac.file.CacheFSInfo#preRegister(Context)->void:::Register a Context.Factory to create a CacheFSInfo.
com.sun.tools.javac.file.CacheFSInfo#clearCache()->void::: cache info clear cache
com.sun.tools.javac.file.CacheFSInfo#getCanonicalFile(Path)->Path::: cache info get canonical file
com.sun.tools.javac.file.CacheFSInfo#exists(Path)->boolean::: cache info exists
com.sun.tools.javac.file.CacheFSInfo#isDirectory(Path)->boolean::: cache info is directory
com.sun.tools.javac.file.CacheFSInfo#isFile(Path)->boolean::: cache info is file
com.sun.tools.javac.file.CacheFSInfo#getJarClassPath(Path)->List::: cache info get jar class path
com.sun.tools.javac.file.FSInfo#instance(Context)->FSInfo:::Get the FSInfo instance for this context.
com.sun.tools.javac.file.FSInfo#getCanonicalFile(Path)->Path::: info get canonical file
com.sun.tools.javac.file.FSInfo#exists(Path)->boolean::: info exists
com.sun.tools.javac.file.FSInfo#isDirectory(Path)->boolean::: info is directory
com.sun.tools.javac.file.FSInfo#isFile(Path)->boolean::: info is file
com.sun.tools.javac.file.FSInfo#getJarClassPath(Path)->List::: info get jar class path
com.sun.tools.javac.file.FSInfo#getJarFSProvider()->FileSystemProvider::: info get jar provider
com.sun.tools.javac.file.JavacFileManager#toArray(CharBuffer)->char[]::: javac file manager to array
com.sun.tools.javac.file.JavacFileManager#preRegister(Context)->void:::Register a Context.Factory to create a JavacFileManager.
com.sun.tools.javac.file.JavacFileManager#setContext(Context)->void:::Set the context for JavacFileManager.
com.sun.tools.javac.file.JavacFileManager#setPathFactory(PathFactory)->void::: javac file manager set path factory
com.sun.tools.javac.file.JavacFileManager#setSymbolFileEnabled(boolean)->void:::Set whether or not to use ct.sym as an alternate to rt.jar.
com.sun.tools.javac.file.JavacFileManager#isSymbolFileEnabled()->boolean::: javac file manager is symbol file enabled
com.sun.tools.javac.file.JavacFileManager#getJavaFileObject(String)->JavaFileObject::: javac file manager get java file object
com.sun.tools.javac.file.JavacFileManager#getJavaFileObject(Path)->JavaFileObject::: javac file manager get java file object
com.sun.tools.javac.file.JavacFileManager#getFileForOutput(String, JavaFileObject.Kind, JavaFileObject)->JavaFileObject::: javac file manager get file for output
com.sun.tools.javac.file.JavacFileManager#getJavaFileObjectsFromStrings(Iterable)->Iterable::: javac file manager get java file objects from strings
com.sun.tools.javac.file.JavacFileManager#getJavaFileObjects(String...)->Iterable::: javac file manager get java file objects
com.sun.tools.javac.file.JavacFileManager#testName(String, boolean, boolean)->void::: javac file manager test name
com.sun.tools.javac.file.JavacFileManager#getContainer(Path)->Container::: javac file manager get container
com.sun.tools.javac.file.JavacFileManager#flush()->void:::Flush any output resources.
com.sun.tools.javac.file.JavacFileManager#close()->void:::Close the JavaFileManager, releasing resources.
com.sun.tools.javac.file.JavacFileManager#getClassLoader(Location)->ClassLoader::: javac file manager get class loader
com.sun.tools.javac.file.JavacFileManager#list(Location, String, Set, boolean)->Iterable::: javac file manager list
com.sun.tools.javac.file.JavacFileManager#inferBinaryName(Location, JavaFileObject)->String::: javac file manager infer binary name
com.sun.tools.javac.file.JavacFileManager#isSameFile(FileObject, FileObject)->boolean::: javac file manager is same file
com.sun.tools.javac.file.JavacFileManager#hasLocation(Location)->boolean::: javac file manager has location
com.sun.tools.javac.file.JavacFileManager#hasExplicitLocation(Location)->boolean::: javac file manager has explicit location
com.sun.tools.javac.file.JavacFileManager#getJavaFileForInput(Location, String, JavaFileObject.Kind)->JavaFileObject::: javac file manager get java file for input
com.sun.tools.javac.file.JavacFileManager#getFileForInput(Location, String, String)->FileObject::: javac file manager get file for input
com.sun.tools.javac.file.JavacFileManager#getJavaFileForOutput(Location, String, JavaFileObject.Kind, FileObject)->JavaFileObject::: javac file manager get java file for output
com.sun.tools.javac.file.JavacFileManager#getFileForOutput(Location, String, String, FileObject)->FileObject::: javac file manager get file for output
com.sun.tools.javac.file.JavacFileManager#getJavaFileObjectsFromFiles(Iterable)->Iterable::: javac file manager get java file objects from files
com.sun.tools.javac.file.JavacFileManager#getJavaFileObjectsFromPaths(Iterable)->Iterable::: javac file manager get java file objects from paths
com.sun.tools.javac.file.JavacFileManager#getJavaFileObjects(File...)->Iterable::: javac file manager get java file objects
com.sun.tools.javac.file.JavacFileManager#getJavaFileObjects(Path...)->Iterable::: javac file manager get java file objects
com.sun.tools.javac.file.JavacFileManager#setLocation(Location, Iterable)->void::: javac file manager set location
com.sun.tools.javac.file.JavacFileManager#setLocationFromPaths(Location, Collection)->void::: javac file manager set location from paths
com.sun.tools.javac.file.JavacFileManager#getLocation(Location)->Iterable::: javac file manager get location
com.sun.tools.javac.file.JavacFileManager#getLocationAsPaths(Location)->Iterable::: javac file manager get location as paths
com.sun.tools.javac.file.JavacFileManager#contains(Location, FileObject)->boolean::: javac file manager contains
com.sun.tools.javac.file.JavacFileManager#getLocationForModule(Location, String)->Location::: javac file manager get location for module
com.sun.tools.javac.file.JavacFileManager#getServiceLoader(Location, Class)->ServiceLoader::: javac file manager get service loader
com.sun.tools.javac.file.JavacFileManager#getLocationForModule(Location, JavaFileObject)->Location::: javac file manager get location for module
com.sun.tools.javac.file.JavacFileManager#setLocationForModule(Location, String, Collection)->void::: javac file manager set location for module
com.sun.tools.javac.file.JavacFileManager#inferModuleName(Location)->String::: javac file manager infer module name
com.sun.tools.javac.file.JavacFileManager#listLocationsForModules(Location)->Iterable>::: javac file manager list locations for modules
com.sun.tools.javac.file.JavacFileManager#asPath(FileObject)->Path::: javac file manager as path
com.sun.tools.javac.file.JavacFileManager#isRelativeUri(URI)->boolean:::Enforces the specification of a "relative" name as used in #getFileForInput(Location,String,String) getFileForInput
com.sun.tools.javac.file.JavacFileManager#isRelativeUri(String)->boolean::: javac file manager is relative uri
com.sun.tools.javac.file.JavacFileManager#getRelativeName(File)->String:::Converts a relative file name to a relative URI
com.sun.tools.javac.file.JavacFileManager#getMessage(IOException)->String:::Get a detail message from an IOException
com.sun.tools.javac.file.JRTIndex#getSharedInstance()->JRTIndex::: index get shared instance
com.sun.tools.javac.file.JRTIndex#instance(Context)->JRTIndex:::Get a context-specific instance of a cache.
com.sun.tools.javac.file.JRTIndex#isAvailable()->boolean::: index is available
com.sun.tools.javac.file.JRTIndex.CtSym#toString()->String::: ct sym to string
com.sun.tools.javac.file.JRTIndex#getCtSym(CharSequence)->CtSym::: index get ct sym
com.sun.tools.javac.file.JRTIndex#getEntry(RelativeDirectory)->Entry::: index get entry
com.sun.tools.javac.file.JRTIndex#isInJRT(FileObject)->boolean::: index is in t
com.sun.tools.javac.file.Locations#getPath(String, String...)->Path::: locations get path
com.sun.tools.javac.file.Locations#close()->void::: locations close
com.sun.tools.javac.file.Locations#update(Log, boolean, FSInfo)->void::: locations update
com.sun.tools.javac.file.Locations#setPathFactory(PathFactory)->void::: locations set path factory
com.sun.tools.javac.file.Locations#isDefaultBootClassPath()->boolean::: locations is default boot class path
com.sun.tools.javac.file.Locations#setMultiReleaseValue(String)->void::: locations set multi release value
com.sun.tools.javac.file.Locations.LocationHandler#handleOption(Option, String)->boolean::: location handler handle option
com.sun.tools.javac.file.Locations.LocationHandler#isSet()->boolean::: location handler is set
com.sun.tools.javac.file.Locations.LocationHandler#isExplicit()->boolean::: location handler is explicit
com.sun.tools.javac.file.Locations.LocationHandler#getPaths()->Collection::: location handler get paths
com.sun.tools.javac.file.Locations.LocationHandler#setPaths(Iterable)->void::: location handler set paths
com.sun.tools.javac.file.Locations.LocationHandler#setPathsForModule(String, Iterable)->void::: location handler set paths for module
com.sun.tools.javac.file.Locations.LocationHandler#getLocationForModule(String)->Location::: location handler get location for module
com.sun.tools.javac.file.Locations.LocationHandler#getLocationForModule(Path)->Location::: location handler get location for module
com.sun.tools.javac.file.Locations.LocationHandler#inferModuleName()->String::: location handler infer module name
com.sun.tools.javac.file.Locations.LocationHandler#listLocationsForModules()->Iterable>::: location handler list locations for modules
com.sun.tools.javac.file.Locations.LocationHandler#contains(Path)->boolean::: location handler contains
com.sun.tools.javac.file.Locations#initHandlers()->void::: locations init handlers
com.sun.tools.javac.file.Locations#handleOption(Option, String)->boolean::: locations handle option
com.sun.tools.javac.file.Locations#hasLocation(Location)->boolean::: locations has location
com.sun.tools.javac.file.Locations#hasExplicitLocation(Location)->boolean::: locations has explicit location
com.sun.tools.javac.file.Locations#getLocation(Location)->Collection::: locations get location
com.sun.tools.javac.file.Locations#getOutputLocation(Location)->Path::: locations get output location
com.sun.tools.javac.file.Locations#setLocation(Location, Iterable)->void::: locations set location
com.sun.tools.javac.file.Locations#getLocationForModule(Location, String)->Location::: locations get location for module
com.sun.tools.javac.file.Locations#getLocationForModule(Location, Path)->Location::: locations get location for module
com.sun.tools.javac.file.Locations#setLocationForModule(Location, String, Iterable)->void::: locations set location for module
com.sun.tools.javac.file.Locations#inferModuleName(Location)->String::: locations infer module name
com.sun.tools.javac.file.Locations#listLocationsForModules(Location)->Iterable>::: locations list locations for modules
com.sun.tools.javac.file.Locations#contains(Location, Path)->boolean::: locations contains
com.sun.tools.javac.file.Locations#getHandler(Location)->LocationHandler::: locations get handler
com.sun.tools.javac.file.Locations#normalize(Path)->Path::: locations normalize
com.sun.tools.javac.file.PathFileObject#forDirectoryPath(BaseFileManager, Path, Path, RelativePath)->PathFileObject:::Create a PathFileObject for a file within a directory, such that the binary name can be inferred from the relationship to an enclosing directory
com.sun.tools.javac.file.PathFileObject#forJarPath(BaseFileManager, Path, Path)->PathFileObject:::Create a PathFileObject for a file in a file system such as a jar file, such that the binary name can be inferred from its position within the file system
com.sun.tools.javac.file.PathFileObject#forJRTPath(BaseFileManager, Path)->PathFileObject:::Create a PathFileObject for a file in a modular file system, such as jrt:, such that the binary name can be inferred from its position within the filesystem
com.sun.tools.javac.file.PathFileObject#forSimplePath(BaseFileManager, Path, Path)->PathFileObject:::Create a PathFileObject for a file whose binary name must be inferred from its position on a search path
com.sun.tools.javac.file.PathFileObject#inferBinaryName(Iterable)->String:::See JavacFileManager#inferBinaryName.
com.sun.tools.javac.file.PathFileObject#getSibling(String)->PathFileObject:::Return the file object for a sibling file with a given file name
com.sun.tools.javac.file.PathFileObject#getPath()->Path:::Return the Path for this object.
com.sun.tools.javac.file.PathFileObject#getShortName()->String:::The short name is used when generating raw diagnostics.
com.sun.tools.javac.file.PathFileObject#getKind()->Kind::: path file object get kind
com.sun.tools.javac.file.PathFileObject#isNameCompatible(String, Kind)->boolean::: path file object is name compatible
com.sun.tools.javac.file.PathFileObject#isPathNameCompatible(Path, String, Kind)->boolean::: path file object is path name compatible
com.sun.tools.javac.file.PathFileObject#getNestingKind()->NestingKind::: path file object get nesting kind
com.sun.tools.javac.file.PathFileObject#getAccessLevel()->Modifier::: path file object get access level
com.sun.tools.javac.file.PathFileObject#toUri()->URI::: path file object to uri
com.sun.tools.javac.file.PathFileObject#openInputStream()->InputStream::: path file object open input stream
com.sun.tools.javac.file.PathFileObject#openOutputStream()->OutputStream::: path file object open output stream
com.sun.tools.javac.file.PathFileObject#openReader(boolean)->Reader::: path file object open reader
com.sun.tools.javac.file.PathFileObject#getCharContent(boolean)->CharSequence::: path file object get char content
com.sun.tools.javac.file.PathFileObject#openWriter()->Writer::: path file object open writer
com.sun.tools.javac.file.PathFileObject#getLastModified()->long::: path file object get last modified
com.sun.tools.javac.file.PathFileObject#delete()->boolean::: path file object delete
com.sun.tools.javac.file.PathFileObject#isSameFile(PathFileObject)->boolean::: path file object is same file
com.sun.tools.javac.file.PathFileObject#equals(Object)->boolean::: path file object equals
com.sun.tools.javac.file.PathFileObject#hashCode()->int::: path file object hash code
com.sun.tools.javac.file.PathFileObject#toString()->String::: path file object to string
com.sun.tools.javac.file.PathFileObject#toBinaryName(RelativePath)->String::: path file object to binary name
com.sun.tools.javac.file.PathFileObject#toBinaryName(Path)->String::: path file object to binary name
com.sun.tools.javac.file.PathFileObject#getSimpleName(FileObject)->String:::Return the last component of a presumed hierarchical URI
com.sun.tools.javac.file.RelativePath#dirname()->RelativeDirectory::: relative path dirname
com.sun.tools.javac.file.RelativePath#basename()->String::: relative path basename
com.sun.tools.javac.file.RelativePath#resolveAgainst(Path)->Path::: relative path resolve against
com.sun.tools.javac.file.RelativePath#resolveAgainst(FileSystem)->Path::: relative path resolve against
com.sun.tools.javac.file.RelativePath#compareTo(RelativePath)->int::: relative path compare to
com.sun.tools.javac.file.RelativePath#equals(Object)->boolean::: relative path equals
com.sun.tools.javac.file.RelativePath#hashCode()->int::: relative path hash code
com.sun.tools.javac.file.RelativePath#toString()->String::: relative path to string
com.sun.tools.javac.file.RelativePath#getPath()->String::: relative path get path
com.sun.tools.javac.file.RelativePath.RelativeDirectory#forPackage(CharSequence)->RelativeDirectory::: relative directory for package
com.sun.tools.javac.file.RelativePath.RelativeDirectory#dirname()->RelativeDirectory::: relative directory dirname
com.sun.tools.javac.file.RelativePath.RelativeDirectory#basename()->String::: relative directory basename
com.sun.tools.javac.file.RelativePath.RelativeDirectory#contains(RelativePath)->boolean:::Return true if this subdirectory "contains" the other path
com.sun.tools.javac.file.RelativePath.RelativeDirectory#toString()->String::: relative directory to string
com.sun.tools.javac.file.RelativePath.RelativeFile#forClass(CharSequence, JavaFileObject.Kind)->RelativeFile::: relative file for class
com.sun.tools.javac.file.RelativePath.RelativeFile#dirname()->RelativeDirectory::: relative file dirname
com.sun.tools.javac.file.RelativePath.RelativeFile#basename()->String::: relative file basename
com.sun.tools.javac.file.RelativePath.RelativeFile#getZipEntry(ZipFile)->ZipEntry::: relative file get zip entry
com.sun.tools.javac.file.RelativePath.RelativeFile#toString()->String::: relative file to string

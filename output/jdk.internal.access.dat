JavaAWTAccess#getAppletContext()::: java access get applet context:::
JavaAWTFontAccess#getTextAttributeConstant(String)::: java font access get text attribute constant:::
JavaAWTFontAccess#shape(Object, char[], int, int)::: java font access shape:::
JavaBeansAccess#getReadMethod(Class, String):::Returns the getter method for a property of the given name:::
JavaBeansAccess#getConstructorPropertiesValue(Constructor):::Return the value attribute of the associated @ConstructorProperties annotation if that is present.:::
JavaIOAccess#console()::: java access console:::
JavaIOAccess#charset()::: java access charset:::
JavaIOFileDescriptorAccess#set(FileDescriptor, int)::: java file descriptor access set:::
JavaIOFileDescriptorAccess#get(FileDescriptor)::: java file descriptor access get:::
JavaIOFileDescriptorAccess#setAppend(FileDescriptor, boolean)::: java file descriptor access set append:::
JavaIOFileDescriptorAccess#getAppend(FileDescriptor)::: java file descriptor access get append:::
JavaIOFileDescriptorAccess#close(FileDescriptor)::: java file descriptor access close:::
JavaIOFileDescriptorAccess#registerCleanup(FileDescriptor)::: java file descriptor access register cleanup:::
JavaIOFileDescriptorAccess#registerCleanup(FileDescriptor, PhantomCleanable)::: java file descriptor access register cleanup:::
JavaIOFileDescriptorAccess#unregisterCleanup(FileDescriptor)::: java file descriptor access unregister cleanup:::
JavaIOFileDescriptorAccess#setHandle(FileDescriptor, long)::: java file descriptor access set handle:::
JavaIOFileDescriptorAccess#getHandle(FileDescriptor)::: java file descriptor access get handle:::
JavaIOFilePermissionAccess#newPermPlusAltPath(FilePermission):::Returns a new FilePermission plus an alternative path.:::
JavaIOFilePermissionAccess#newPermUsingAltPath(FilePermission):::Returns a new FilePermission using an alternative path.:::
JavaIORandomAccessFileAccess#openAndDelete(File, String)::: java random access file access open and delete:::
JavaLangAccess#getDeclaredPublicMethods(Class, String, Class...):::Returns the list of Method objects for the declared public methods of this class or interface that have the specified method name and parameter types.:::
JavaLangAccess#getConstantPool(Class):::Return the constant pool for a class.:::
JavaLangAccess#casAnnotationType(Class, AnnotationType, AnnotationType):::Compare-And-Set the AnnotationType instance corresponding to this class:::
JavaLangAccess#getAnnotationType(Class):::Get the AnnotationType instance corresponding to this class:::
JavaLangAccess#getDeclaredAnnotationMap(Class):::Get the declared annotations for a given class, indexed by their types.:::
JavaLangAccess#getRawClassAnnotations(Class):::Get the array of bytes that is the class-file representation of this Class' annotations.:::
JavaLangAccess#getRawClassTypeAnnotations(Class):::Get the array of bytes that is the class-file representation of this Class' type annotations.:::
JavaLangAccess#getRawExecutableTypeAnnotations(Executable):::Get the array of bytes that is the class-file representation of this Executable's type annotations.:::
JavaLangAccess#getEnumConstantsShared(Class):::Returns the elements of an enum class or null if the Class object does not represent an enum type; the result is uncloned, cached, and shared by all callers.:::
JavaLangAccess#blockedOn(Interruptible):::Set current thread's blocker field.:::
JavaLangAccess#registerShutdownHook(int, boolean, Runnable):::Registers a shutdown hook:::
JavaLangAccess#newThreadWithAcc(Runnable, AccessControlContext):::Returns a new Thread with the given Runnable and an inherited AccessControlContext.:::
JavaLangAccess#invokeFinalize(Object):::Invokes the finalize method of the given object.:::
JavaLangAccess#createOrGetClassLoaderValueMap(ClassLoader):::Returns the ConcurrentHashMap used as a storage for ClassLoaderValue(s) associated with the given class loader, creating it if it doesn't already exist.:::
JavaLangAccess#defineClass(ClassLoader, String, byte[], ProtectionDomain, String):::Defines a class with the given name to a class loader.:::
JavaLangAccess#findBootstrapClassOrNull(ClassLoader, String):::Returns a class loaded by the bootstrap class loader.:::
JavaLangAccess#definePackage(ClassLoader, String, Module):::Define a Package of the given name and module by the given class loader.:::
JavaLangAccess#fastUUID(long, long):::Invokes Long.fastUUID:::
JavaLangAccess#addNonExportedPackages(ModuleLayer):::Record the non-exported packages of the modules in the given layer:::
JavaLangAccess#invalidatePackageAccessCache():::Invalidate package access cache:::
JavaLangAccess#defineModule(ClassLoader, ModuleDescriptor, URI):::Defines a new module to the Java virtual machine:::
JavaLangAccess#defineUnnamedModule(ClassLoader):::Defines the unnamed module for the given class loader.:::
JavaLangAccess#addReads(Module, Module):::Updates the readability so that module m1 reads m2:::
JavaLangAccess#addReadsAllUnnamed(Module):::Updates module m to read all unnamed modules.:::
JavaLangAccess#addExports(Module, String, Module):::Updates module m1 to export a package to module m2:::
JavaLangAccess#addExportsToAllUnnamed(Module, String):::Updates a module m to export a package to all unnamed modules.:::
JavaLangAccess#addOpens(Module, String, Module):::Updates module m1 to open a package to module m2:::
JavaLangAccess#addOpensToAllUnnamed(Module, String):::Updates module m to open a package to all unnamed modules.:::
JavaLangAccess#addOpensToAllUnnamed(Module, Iterator):::Updates module m to open all packages returned by the given iterator.:::
JavaLangAccess#addUses(Module, Class):::Updates module m to use a service.:::
JavaLangAccess#isReflectivelyExported(Module, String, Module):::Returns true if module m reflectively exports a package to other:::
JavaLangAccess#isReflectivelyOpened(Module, String, Module):::Returns true if module m reflectively opens a package to other:::
JavaLangAccess#getServicesCatalog(ModuleLayer):::Returns the ServicesCatalog for the given Layer.:::
JavaLangAccess#layers(ModuleLayer):::Returns an ordered stream of layers:::
JavaLangAccess#layers(ClassLoader):::Returns a stream of the layers that have modules defined to the given class loader.:::
JavaLangAccess#newStringNoRepl(byte[], Charset):::Constructs a new String by decoding the specified subarray of bytes using the specified java.nio.charset.Charset charset:::
JavaLangAccess#getBytesNoRepl(String, Charset):::Encode the given string into a sequence of bytes using the specified Charset:::
JavaLangAccess#newStringUTF8NoRepl(byte[], int, int):::Returns a new string by decoding from the given utf8 bytes array.:::
JavaLangAccess#getBytesUTF8NoRepl(String):::Encode the given string into a sequence of bytes using utf8.:::
JavaLangInvokeAccess#newMemberName():::Create a new MemberName instance:::
JavaLangInvokeAccess#getName(Object):::Returns the name for the given MemberName:::
JavaLangInvokeAccess#getMethodType(Object):::Returns the MethodType for the given MemberName:::
JavaLangInvokeAccess#getMethodDescriptor(Object):::Returns the descriptor for the given MemberName:::
JavaLangInvokeAccess#isNative(Object):::Returns true if the given MemberName is a native method:::
JavaLangInvokeAccess#getDeclaringClass(Object):::Returns the declaring class for the given MemberName:::
JavaLangInvokeAccess#generateDirectMethodHandleHolderClassBytes(String, MethodType[], int[]):::Returns a byte[] representation of a class implementing DirectMethodHandle of each pairwise combination of MethodType and an int representing method type:::
JavaLangInvokeAccess#generateDelegatingMethodHandleHolderClassBytes(String, MethodType[]):::Returns a byte[] representation of a class implementing DelegatingMethodHandles of each MethodType kind in the methodTypes argument:::
JavaLangInvokeAccess#generateConcreteBMHClassBytes(String):::Returns a byte[] representation of BoundMethodHandle species class implementing the signature defined by types:::
JavaLangInvokeAccess#generateBasicFormsClassBytes(String):::Returns a byte[] representation of a class implementing the zero and identity forms of all LambdaForm.BasicTypes.:::
JavaLangInvokeAccess#generateInvokersHolderClassBytes(String, MethodType[], MethodType[]):::Returns a byte[] representation of a class implementing the invoker forms for the set of supplied invokerMethodTypes and callSiteMethodTypes.:::
JavaLangModuleAccess#newModuleBuilder(String, boolean, Set):::Creates a builder for building a module with the given module name.:::
JavaLangModuleAccess#packages(ModuleDescriptor.Builder):::Returns a snapshot of the packages in the module.:::
JavaLangModuleAccess#requires(ModuleDescriptor.Builder, Set, String, String):::Adds a dependence on a module with the given (possibly un-parsable) version string.:::
JavaLangModuleAccess#newRequires(Set, String, Version):::Returns a ModuleDescriptor.Requires of the given modifiers and module name.:::
JavaLangModuleAccess#newExports(Set, String):::Returns an unqualified ModuleDescriptor.Exports of the given modifiers and package name source.:::
JavaLangModuleAccess#newExports(Set, String, Set):::Returns a qualified ModuleDescriptor.Exports of the given modifiers, package name source and targets.:::
JavaLangModuleAccess#newOpens(Set, String):::Returns an unqualified ModuleDescriptor.Opens of the given modifiers and package name source.:::
JavaLangModuleAccess#newOpens(Set, String, Set):::Returns a qualified ModuleDescriptor.Opens of the given modifiers, package name source and targets.:::
JavaLangModuleAccess#newProvides(String, List):::Returns a ModuleDescriptor.Provides of the given service name and providers.:::
JavaLangModuleAccess#newModuleDescriptor(String, Version, Set, Set, Set, Set, Set, Set, Set, String, int):::Returns a new ModuleDescriptor instance.:::
JavaLangModuleAccess#resolveAndBind(ModuleFinder, Collection, PrintStream):::Resolves a collection of root modules, with service binding and the empty configuration as the parent.:::
JavaLangModuleAccess#newConfiguration(ModuleFinder, Map>):::Creates a configuration from a pre-generated readability graph.:::
JavaLangRefAccess#waitForReferenceProcessing():::Wait for progress in java.lang.ref.Reference processing:::
JavaLangRefAccess#runFinalization():::Runs the finalization methods of any objects pending finalization:::
JavaNetHttpCookieAccess#parse(String)::: java net http cookie access parse:::
JavaNetHttpCookieAccess#header(HttpCookie)::: java net http cookie access header:::
JavaNetInetAddressAccess#getOriginalHostName(InetAddress):::Return the original application specified hostname of the given InetAddress object.:::
JavaNetInetAddressAccess#getByName(String, InetAddress):::Get the InetAddress of the provided host:::
JavaNetSocketAccess#newServerSocket(SocketImpl):::Creates a ServerSocket associated with the given SocketImpl.:::
JavaNetSocketAccess#newSocketImpl(Class)::: java net socket access new socket impl:::
JavaNetUriAccess#create(String, String):::Create a URI of pre-validated scheme and path.:::
JavaNetURLAccess#getHandler(URL)::: java net access get handler:::
JavaNetURLClassLoaderAccess#getAccessControlContext(URLClassLoader)::: java net class loader access get access control context:::
JavaNioAccess.BufferPool#getName()::: buffer pool get name:::
JavaNioAccess.BufferPool#getCount()::: buffer pool get count:::
JavaNioAccess.BufferPool#getTotalCapacity()::: buffer pool get total capacity:::
JavaNioAccess.BufferPool#getMemoryUsed()::: buffer pool get memory used:::
JavaNioAccess#getDirectBufferPool()::: java nio access get direct buffer pool:::
JavaNioAccess#newDirectByteBuffer(long, int, Object):::Constructs a direct ByteBuffer referring to the block of memory starting at the given memory address and extending cap bytes:::
JavaNioAccess#truncate(Buffer):::Truncates a buffer by changing its capacity to 0.:::
JavaObjectInputFilterAccess#createFilter2(String):::Creates a filter from the pattern.:::
JavaObjectInputStreamAccess#checkArray(ObjectInputStream, Class, int)::: java object input stream access check array:::
JavaObjectInputStreamReadString#readString(ObjectInputStream)::: java object input stream read string read string:::
JavaSecurityAccess#doIntersectionPrivilege(PrivilegedAction, AccessControlContext, AccessControlContext)::: java security access do intersection privilege:::
JavaSecurityAccess#doIntersectionPrivilege(PrivilegedAction, AccessControlContext)::: java security access do intersection privilege:::
JavaSecurityAccess#getProtectDomains(AccessControlContext)::: java security access get protect domains:::
JavaSecurityAccess.ProtectionDomainCache#put(ProtectionDomain, PermissionCollection)::: protection domain cache put:::
JavaSecurityAccess.ProtectionDomainCache#get(ProtectionDomain)::: protection domain cache get:::
JavaSecurityAccess#getProtectionDomainCache():::Returns the ProtectionDomainCache.:::
JavaSecuritySignatureAccess#initVerify(Signature, PublicKey, AlgorithmParameterSpec)::: java security signature access init verify:::
JavaSecuritySignatureAccess#initVerify(Signature, java.security.cert.Certificate, AlgorithmParameterSpec)::: java security signature access init verify:::
JavaSecuritySignatureAccess#initSign(Signature, PrivateKey, AlgorithmParameterSpec, SecureRandom)::: java security signature access init sign:::
JavaUtilJarAccess#jarFileHasClassPathAttribute(JarFile)::: java util jar access jar file has class path attribute:::
JavaUtilJarAccess#getCodeSources(JarFile, URL)::: java util jar access get code sources:::
JavaUtilJarAccess#getCodeSource(JarFile, URL, String)::: java util jar access get code source:::
JavaUtilJarAccess#entryNames(JarFile, CodeSource[])::: java util jar access entry names:::
JavaUtilJarAccess#entries2(JarFile)::: java util jar access entries2:::
JavaUtilJarAccess#setEagerValidation(JarFile, boolean)::: java util jar access set eager validation:::
JavaUtilJarAccess#getManifestDigests(JarFile)::: java util jar access get manifest digests:::
JavaUtilJarAccess#getTrustedAttributes(Manifest, String)::: java util jar access get trusted attributes:::
JavaUtilJarAccess#ensureInitialization(JarFile)::: java util jar access ensure initialization:::
JavaUtilJarAccess#isInitializing()::: java util jar access is initializing:::
JavaUtilResourceBundleAccess#setParent(ResourceBundle, ResourceBundle):::Sets the bundle's parent to the given parent.:::
JavaUtilResourceBundleAccess#getParent(ResourceBundle):::Returns the parent of the given bundle or null if the bundle has no parent.:::
JavaUtilResourceBundleAccess#setLocale(ResourceBundle, Locale):::Sets the bundle's locale to the given locale.:::
JavaUtilResourceBundleAccess#setName(ResourceBundle, String):::Sets the bundle's base name to the given name.:::
JavaUtilResourceBundleAccess#getBundle(String, Locale, Module):::Returns a ResourceBundle of the given baseName and locale loaded on behalf of the given module with no caller module access check.:::
JavaUtilResourceBundleAccess#newResourceBundle(Class):::Instantiates a ResourceBundle of the given bundle class.:::
JavaUtilZipFileAccess#startsWithLocHeader(ZipFile)::: java util zip file access starts with loc header:::
JavaUtilZipFileAccess#getMetaInfEntryNames(ZipFile)::: java util zip file access get meta inf entry names:::
JavaUtilZipFileAccess#getEntry(ZipFile, String, Function)::: java util zip file access get entry:::
JavaUtilZipFileAccess#entries(ZipFile, Function)::: java util zip file access entries:::
JavaUtilZipFileAccess#stream(ZipFile, Function)::: java util zip file access stream:::
JavaUtilZipFileAccess#entryNameStream(ZipFile)::: java util zip file access entry name stream:::
JavaxCryptoSealedObjectAccess#getExtObjectInputStream(SealedObject, Cipher)::: javax crypto sealed object access get ext object input stream:::
SharedSecrets#javaUtilJarAccess()::: shared secrets java util jar access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaUtilJarAccess(JavaUtilJarAccess)::: shared secrets set java util jar access:::
SharedSecrets#setJavaLangAccess(JavaLangAccess)::: shared secrets set java lang access:::
SharedSecrets#getJavaLangAccess()::: shared secrets get java lang access:::return
SharedSecrets#setJavaLangInvokeAccess(JavaLangInvokeAccess)::: shared secrets set java lang invoke access:::
SharedSecrets#getJavaLangInvokeAccess()::: shared secrets get java lang invoke access:::if->try->c->Class->forName->unsafe->ensureClassInitialized->catch->finally->return
SharedSecrets#setJavaLangModuleAccess(JavaLangModuleAccess)::: shared secrets set java lang module access:::
SharedSecrets#getJavaLangModuleAccess()::: shared secrets get java lang module access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaLangRefAccess(JavaLangRefAccess)::: shared secrets set java lang ref access:::
SharedSecrets#getJavaLangRefAccess()::: shared secrets get java lang ref access:::return
SharedSecrets#setJavaNetUriAccess(JavaNetUriAccess)::: shared secrets set java net uri access:::
SharedSecrets#getJavaNetUriAccess()::: shared secrets get java net uri access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaNetURLAccess(JavaNetURLAccess)::: shared secrets set java net access:::
SharedSecrets#getJavaNetURLAccess()::: shared secrets get java net access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaNetURLClassLoaderAccess(JavaNetURLClassLoaderAccess)::: shared secrets set java net class loader access:::
SharedSecrets#getJavaNetURLClassLoaderAccess()::: shared secrets get java net class loader access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaNetInetAddressAccess(JavaNetInetAddressAccess)::: shared secrets set java net inet address access:::
SharedSecrets#getJavaNetInetAddressAccess()::: shared secrets get java net inet address access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaNetHttpCookieAccess(JavaNetHttpCookieAccess)::: shared secrets set java net http cookie access:::
SharedSecrets#getJavaNetHttpCookieAccess()::: shared secrets get java net http cookie access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaNetSocketAccess(JavaNetSocketAccess)::: shared secrets set java net socket access:::
SharedSecrets#getJavaNetSocketAccess()::: shared secrets get java net socket access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaNioAccess(JavaNioAccess)::: shared secrets set java nio access:::
SharedSecrets#getJavaNioAccess()::: shared secrets get java nio access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaIOAccess(JavaIOAccess)::: shared secrets set java access:::
SharedSecrets#getJavaIOAccess()::: shared secrets get java access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaIOFileDescriptorAccess(JavaIOFileDescriptorAccess)::: shared secrets set java file descriptor access:::
SharedSecrets#getJavaIOFilePermissionAccess()::: shared secrets get java file permission access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaIOFilePermissionAccess(JavaIOFilePermissionAccess)::: shared secrets set java file permission access:::
SharedSecrets#getJavaIOFileDescriptorAccess()::: shared secrets get java file descriptor access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaSecurityAccess(JavaSecurityAccess)::: shared secrets set java security access:::
SharedSecrets#getJavaSecurityAccess()::: shared secrets get java security access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#getJavaUtilZipFileAccess()::: shared secrets get java util zip file access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaUtilZipFileAccess(JavaUtilZipFileAccess)::: shared secrets set java util zip file access:::
SharedSecrets#setJavaAWTAccess(JavaAWTAccess)::: shared secrets set java access:::
SharedSecrets#getJavaAWTAccess()::: shared secrets get java access:::return
SharedSecrets#setJavaAWTFontAccess(JavaAWTFontAccess)::: shared secrets set java font access:::
SharedSecrets#getJavaAWTFontAccess()::: shared secrets get java font access:::return
SharedSecrets#getJavaBeansAccess()::: shared secrets get java beans access:::return
SharedSecrets#setJavaBeansAccess(JavaBeansAccess)::: shared secrets set java beans access:::
SharedSecrets#getJavaUtilResourceBundleAccess()::: shared secrets get java util resource bundle access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaUtilResourceBundleAccess(JavaUtilResourceBundleAccess)::: shared secrets set java util resource bundle access:::
SharedSecrets#getJavaObjectInputStreamReadString()::: shared secrets get java object input stream read string:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaObjectInputStreamReadString(JavaObjectInputStreamReadString)::: shared secrets set java object input stream read string:::
SharedSecrets#getJavaObjectInputStreamAccess()::: shared secrets get java object input stream access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaObjectInputStreamAccess(JavaObjectInputStreamAccess)::: shared secrets set java object input stream access:::
SharedSecrets#getJavaObjectInputFilterAccess()::: shared secrets get java object input filter access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaObjectInputFilterAccess(JavaObjectInputFilterAccess)::: shared secrets set java object input filter access:::
SharedSecrets#setJavaIORandomAccessFileAccess(JavaIORandomAccessFileAccess)::: shared secrets set java random access file access:::
SharedSecrets#getJavaIORandomAccessFileAccess()::: shared secrets get java random access file access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaSecuritySignatureAccess(JavaSecuritySignatureAccess)::: shared secrets set java security signature access:::
SharedSecrets#getJavaSecuritySignatureAccess()::: shared secrets get java security signature access:::if->unsafe->ensureClassInitialized->return
SharedSecrets#setJavaxCryptoSealedObjectAccess(JavaxCryptoSealedObjectAccess)::: shared secrets set javax crypto sealed object access:::
SharedSecrets#getJavaxCryptoSealedObjectAccess()::: shared secrets get javax crypto sealed object access:::if->unsafe->ensureClassInitialized->return

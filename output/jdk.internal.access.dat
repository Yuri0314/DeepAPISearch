jdk.internal.access.JavaAWTAccess#getAppletContext()->Object::: java access get applet context
jdk.internal.access.JavaAWTFontAccess#getTextAttributeConstant(String)->Object::: java font access get text attribute constant
jdk.internal.access.JavaAWTFontAccess#shape(Object, char[], int, int)->void::: java font access shape
jdk.internal.access.JavaBeansAccess#getReadMethod(Class, String)->Method:::Returns the getter method for a property of the given name
jdk.internal.access.JavaBeansAccess#getConstructorPropertiesValue(Constructor)->String[]:::Return the value attribute of the associated @ConstructorProperties annotation if that is present.
jdk.internal.access.JavaIOAccess#console()->Console::: java access console
jdk.internal.access.JavaIOAccess#charset()->Charset::: java access charset
jdk.internal.access.JavaIOFileDescriptorAccess#set(FileDescriptor, int)->void::: java file descriptor access set
jdk.internal.access.JavaIOFileDescriptorAccess#get(FileDescriptor)->int::: java file descriptor access get
jdk.internal.access.JavaIOFileDescriptorAccess#setAppend(FileDescriptor, boolean)->void::: java file descriptor access set append
jdk.internal.access.JavaIOFileDescriptorAccess#getAppend(FileDescriptor)->boolean::: java file descriptor access get append
jdk.internal.access.JavaIOFileDescriptorAccess#close(FileDescriptor)->void::: java file descriptor access close
jdk.internal.access.JavaIOFileDescriptorAccess#registerCleanup(FileDescriptor)->void::: java file descriptor access register cleanup
jdk.internal.access.JavaIOFileDescriptorAccess#registerCleanup(FileDescriptor, PhantomCleanable)->void::: java file descriptor access register cleanup
jdk.internal.access.JavaIOFileDescriptorAccess#unregisterCleanup(FileDescriptor)->void::: java file descriptor access unregister cleanup
jdk.internal.access.JavaIOFileDescriptorAccess#setHandle(FileDescriptor, long)->void::: java file descriptor access set handle
jdk.internal.access.JavaIOFileDescriptorAccess#getHandle(FileDescriptor)->long::: java file descriptor access get handle
jdk.internal.access.JavaIOFilePermissionAccess#newPermPlusAltPath(FilePermission)->FilePermission:::Returns a new FilePermission plus an alternative path.
jdk.internal.access.JavaIOFilePermissionAccess#newPermUsingAltPath(FilePermission)->FilePermission:::Returns a new FilePermission using an alternative path.
jdk.internal.access.JavaIORandomAccessFileAccess#openAndDelete(File, String)->RandomAccessFile::: java random access file access open and delete
jdk.internal.access.JavaLangAccess#getDeclaredPublicMethods(Class, String, Class...)->List:::Returns the list of Method objects for the declared public methods of this class or interface that have the specified method name and parameter types.
jdk.internal.access.JavaLangAccess#getConstantPool(Class)->ConstantPool:::Return the constant pool for a class.
jdk.internal.access.JavaLangAccess#casAnnotationType(Class, AnnotationType, AnnotationType)->boolean:::Compare-And-Set the AnnotationType instance corresponding to this class
jdk.internal.access.JavaLangAccess#getAnnotationType(Class)->AnnotationType:::Get the AnnotationType instance corresponding to this class
jdk.internal.access.JavaLangAccess#getDeclaredAnnotationMap(Class)->Map, Annotation>:::Get the declared annotations for a given class, indexed by their types.
jdk.internal.access.JavaLangAccess#getRawClassAnnotations(Class)->byte[]:::Get the array of bytes that is the class-file representation of this Class' annotations.
jdk.internal.access.JavaLangAccess#getRawClassTypeAnnotations(Class)->byte[]:::Get the array of bytes that is the class-file representation of this Class' type annotations.
jdk.internal.access.JavaLangAccess#getRawExecutableTypeAnnotations(Executable)->byte[]:::Get the array of bytes that is the class-file representation of this Executable's type annotations.
jdk.internal.access.JavaLangAccess#getEnumConstantsShared(Class)->E[]:::Returns the elements of an enum class or null if the Class object does not represent an enum type; the result is uncloned, cached, and shared by all callers.
jdk.internal.access.JavaLangAccess#blockedOn(Interruptible)->void:::Set current thread's blocker field.
jdk.internal.access.JavaLangAccess#registerShutdownHook(int, boolean, Runnable)->void:::Registers a shutdown hook
jdk.internal.access.JavaLangAccess#newThreadWithAcc(Runnable, AccessControlContext)->Thread:::Returns a new Thread with the given Runnable and an inherited AccessControlContext.
jdk.internal.access.JavaLangAccess#invokeFinalize(Object)->void:::Invokes the finalize method of the given object.
jdk.internal.access.JavaLangAccess#createOrGetClassLoaderValueMap(ClassLoader)->ConcurrentHashMap:::Returns the ConcurrentHashMap used as a storage for ClassLoaderValue(s) associated with the given class loader, creating it if it doesn't already exist.
jdk.internal.access.JavaLangAccess#defineClass(ClassLoader, String, byte[], ProtectionDomain, String)->Class:::Defines a class with the given name to a class loader.
jdk.internal.access.JavaLangAccess#findBootstrapClassOrNull(ClassLoader, String)->Class:::Returns a class loaded by the bootstrap class loader.
jdk.internal.access.JavaLangAccess#definePackage(ClassLoader, String, Module)->Package:::Define a Package of the given name and module by the given class loader.
jdk.internal.access.JavaLangAccess#fastUUID(long, long)->String:::Invokes Long.fastUUID
jdk.internal.access.JavaLangAccess#addNonExportedPackages(ModuleLayer)->void:::Record the non-exported packages of the modules in the given layer
jdk.internal.access.JavaLangAccess#invalidatePackageAccessCache()->void:::Invalidate package access cache
jdk.internal.access.JavaLangAccess#defineModule(ClassLoader, ModuleDescriptor, URI)->Module:::Defines a new module to the Java virtual machine
jdk.internal.access.JavaLangAccess#defineUnnamedModule(ClassLoader)->Module:::Defines the unnamed module for the given class loader.
jdk.internal.access.JavaLangAccess#addReads(Module, Module)->void:::Updates the readability so that module m1 reads m2
jdk.internal.access.JavaLangAccess#addReadsAllUnnamed(Module)->void:::Updates module m to read all unnamed modules.
jdk.internal.access.JavaLangAccess#addExports(Module, String, Module)->void:::Updates module m1 to export a package to module m2
jdk.internal.access.JavaLangAccess#addExportsToAllUnnamed(Module, String)->void:::Updates a module m to export a package to all unnamed modules.
jdk.internal.access.JavaLangAccess#addOpens(Module, String, Module)->void:::Updates module m1 to open a package to module m2
jdk.internal.access.JavaLangAccess#addOpensToAllUnnamed(Module, String)->void:::Updates module m to open a package to all unnamed modules.
jdk.internal.access.JavaLangAccess#addOpensToAllUnnamed(Module, Iterator)->void:::Updates module m to open all packages returned by the given iterator.
jdk.internal.access.JavaLangAccess#addUses(Module, Class)->void:::Updates module m to use a service.
jdk.internal.access.JavaLangAccess#isReflectivelyExported(Module, String, Module)->boolean:::Returns true if module m reflectively exports a package to other
jdk.internal.access.JavaLangAccess#isReflectivelyOpened(Module, String, Module)->boolean:::Returns true if module m reflectively opens a package to other
jdk.internal.access.JavaLangAccess#getServicesCatalog(ModuleLayer)->ServicesCatalog:::Returns the ServicesCatalog for the given Layer.
jdk.internal.access.JavaLangAccess#layers(ModuleLayer)->Stream:::Returns an ordered stream of layers
jdk.internal.access.JavaLangAccess#layers(ClassLoader)->Stream:::Returns a stream of the layers that have modules defined to the given class loader.
jdk.internal.access.JavaLangAccess#newStringNoRepl(byte[], Charset)->String:::Constructs a new String by decoding the specified subarray of bytes using the specified java.nio.charset.Charset charset
jdk.internal.access.JavaLangAccess#getBytesNoRepl(String, Charset)->byte[]:::Encode the given string into a sequence of bytes using the specified Charset
jdk.internal.access.JavaLangAccess#newStringUTF8NoRepl(byte[], int, int)->String:::Returns a new string by decoding from the given utf8 bytes array.
jdk.internal.access.JavaLangAccess#getBytesUTF8NoRepl(String)->byte[]:::Encode the given string into a sequence of bytes using utf8.
jdk.internal.access.JavaLangInvokeAccess#newMemberName()->Object:::Create a new MemberName instance
jdk.internal.access.JavaLangInvokeAccess#getName(Object)->String:::Returns the name for the given MemberName
jdk.internal.access.JavaLangInvokeAccess#getMethodType(Object)->MethodType:::Returns the MethodType for the given MemberName
jdk.internal.access.JavaLangInvokeAccess#getMethodDescriptor(Object)->String:::Returns the descriptor for the given MemberName
jdk.internal.access.JavaLangInvokeAccess#isNative(Object)->boolean:::Returns true if the given MemberName is a native method
jdk.internal.access.JavaLangInvokeAccess#getDeclaringClass(Object)->Class:::Returns the declaring class for the given MemberName
jdk.internal.access.JavaLangInvokeAccess#generateDirectMethodHandleHolderClassBytes(String, MethodType[], int[])->byte[]:::Returns a byte[] representation of a class implementing DirectMethodHandle of each pairwise combination of MethodType and an int representing method type
jdk.internal.access.JavaLangInvokeAccess#generateDelegatingMethodHandleHolderClassBytes(String, MethodType[])->byte[]:::Returns a byte[] representation of a class implementing DelegatingMethodHandles of each MethodType kind in the methodTypes argument
jdk.internal.access.JavaLangInvokeAccess#generateConcreteBMHClassBytes(String)->Map.Entry:::Returns a byte[] representation of BoundMethodHandle species class implementing the signature defined by types
jdk.internal.access.JavaLangInvokeAccess#generateBasicFormsClassBytes(String)->byte[]:::Returns a byte[] representation of a class implementing the zero and identity forms of all LambdaForm.BasicTypes.
jdk.internal.access.JavaLangInvokeAccess#generateInvokersHolderClassBytes(String, MethodType[], MethodType[])->byte[]:::Returns a byte[] representation of a class implementing the invoker forms for the set of supplied invokerMethodTypes and callSiteMethodTypes.
jdk.internal.access.JavaLangModuleAccess#newModuleBuilder(String, boolean, Set)->ModuleDescriptor.Builder:::Creates a builder for building a module with the given module name.
jdk.internal.access.JavaLangModuleAccess#packages(ModuleDescriptor.Builder)->Set:::Returns a snapshot of the packages in the module.
jdk.internal.access.JavaLangModuleAccess#requires(ModuleDescriptor.Builder, Set, String, String)->void:::Adds a dependence on a module with the given (possibly un-parsable) version string.
jdk.internal.access.JavaLangModuleAccess#newRequires(Set, String, Version)->Requires:::Returns a ModuleDescriptor.Requires of the given modifiers and module name.
jdk.internal.access.JavaLangModuleAccess#newExports(Set, String)->Exports:::Returns an unqualified ModuleDescriptor.Exports of the given modifiers and package name source.
jdk.internal.access.JavaLangModuleAccess#newExports(Set, String, Set)->Exports:::Returns a qualified ModuleDescriptor.Exports of the given modifiers, package name source and targets.
jdk.internal.access.JavaLangModuleAccess#newOpens(Set, String)->Opens:::Returns an unqualified ModuleDescriptor.Opens of the given modifiers and package name source.
jdk.internal.access.JavaLangModuleAccess#newOpens(Set, String, Set)->Opens:::Returns a qualified ModuleDescriptor.Opens of the given modifiers, package name source and targets.
jdk.internal.access.JavaLangModuleAccess#newProvides(String, List)->Provides:::Returns a ModuleDescriptor.Provides of the given service name and providers.
jdk.internal.access.JavaLangModuleAccess#newModuleDescriptor(String, Version, Set, Set, Set, Set, Set, Set, Set, String, int)->ModuleDescriptor:::Returns a new ModuleDescriptor instance.
jdk.internal.access.JavaLangModuleAccess#resolveAndBind(ModuleFinder, Collection, PrintStream)->Configuration:::Resolves a collection of root modules, with service binding and the empty configuration as the parent.
jdk.internal.access.JavaLangModuleAccess#newConfiguration(ModuleFinder, Map>)->Configuration:::Creates a configuration from a pre-generated readability graph.
jdk.internal.access.JavaLangRefAccess#waitForReferenceProcessing()->boolean:::Wait for progress in java.lang.ref.Reference processing
jdk.internal.access.JavaLangRefAccess#runFinalization()->void:::Runs the finalization methods of any objects pending finalization
jdk.internal.access.JavaNetHttpCookieAccess#parse(String)->List::: java net http cookie access parse
jdk.internal.access.JavaNetHttpCookieAccess#header(HttpCookie)->String::: java net http cookie access header
jdk.internal.access.JavaNetInetAddressAccess#getOriginalHostName(InetAddress)->String:::Return the original application specified hostname of the given InetAddress object.
jdk.internal.access.JavaNetInetAddressAccess#getByName(String, InetAddress)->InetAddress:::Get the InetAddress of the provided host
jdk.internal.access.JavaNetSocketAccess#newServerSocket(SocketImpl)->ServerSocket:::Creates a ServerSocket associated with the given SocketImpl.
jdk.internal.access.JavaNetSocketAccess#newSocketImpl(Class)->SocketImpl::: java net socket access new socket impl
jdk.internal.access.JavaNetUriAccess#create(String, String)->URI:::Create a URI of pre-validated scheme and path.
jdk.internal.access.JavaNetURLAccess#getHandler(URL)->URLStreamHandler::: java net access get handler
jdk.internal.access.JavaNetURLClassLoaderAccess#getAccessControlContext(URLClassLoader)->AccessControlContext::: java net class loader access get access control context
jdk.internal.access.JavaNioAccess.BufferPool#getName()->String::: buffer pool get name
jdk.internal.access.JavaNioAccess.BufferPool#getCount()->long::: buffer pool get count
jdk.internal.access.JavaNioAccess.BufferPool#getTotalCapacity()->long::: buffer pool get total capacity
jdk.internal.access.JavaNioAccess.BufferPool#getMemoryUsed()->long::: buffer pool get memory used
jdk.internal.access.JavaNioAccess#getDirectBufferPool()->BufferPool::: java nio access get direct buffer pool
jdk.internal.access.JavaNioAccess#newDirectByteBuffer(long, int, Object)->ByteBuffer:::Constructs a direct ByteBuffer referring to the block of memory starting at the given memory address and extending cap bytes
jdk.internal.access.JavaNioAccess#truncate(Buffer)->void:::Truncates a buffer by changing its capacity to 0.
jdk.internal.access.JavaObjectInputFilterAccess#createFilter2(String)->ObjectInputFilter:::Creates a filter from the pattern.
jdk.internal.access.JavaObjectInputStreamAccess#checkArray(ObjectInputStream, Class, int)->void::: java object input stream access check array
jdk.internal.access.JavaObjectInputStreamReadString#readString(ObjectInputStream)->String::: java object input stream read string read string
jdk.internal.access.JavaSecurityAccess#doIntersectionPrivilege(PrivilegedAction, AccessControlContext, AccessControlContext)->T::: java security access do intersection privilege
jdk.internal.access.JavaSecurityAccess#doIntersectionPrivilege(PrivilegedAction, AccessControlContext)->T::: java security access do intersection privilege
jdk.internal.access.JavaSecurityAccess#getProtectDomains(AccessControlContext)->ProtectionDomain[]::: java security access get protect domains
jdk.internal.access.JavaSecurityAccess.ProtectionDomainCache#put(ProtectionDomain, PermissionCollection)->void::: protection domain cache put
jdk.internal.access.JavaSecurityAccess.ProtectionDomainCache#get(ProtectionDomain)->PermissionCollection::: protection domain cache get
jdk.internal.access.JavaSecurityAccess#getProtectionDomainCache()->ProtectionDomainCache:::Returns the ProtectionDomainCache.
jdk.internal.access.JavaSecuritySignatureAccess#initVerify(Signature, PublicKey, AlgorithmParameterSpec)->void::: java security signature access init verify
jdk.internal.access.JavaSecuritySignatureAccess#initVerify(Signature, java.security.cert.Certificate, AlgorithmParameterSpec)->void::: java security signature access init verify
jdk.internal.access.JavaSecuritySignatureAccess#initSign(Signature, PrivateKey, AlgorithmParameterSpec, SecureRandom)->void::: java security signature access init sign
jdk.internal.access.JavaUtilJarAccess#jarFileHasClassPathAttribute(JarFile)->boolean::: java util jar access jar file has class path attribute
jdk.internal.access.JavaUtilJarAccess#getCodeSources(JarFile, URL)->CodeSource[]::: java util jar access get code sources
jdk.internal.access.JavaUtilJarAccess#getCodeSource(JarFile, URL, String)->CodeSource::: java util jar access get code source
jdk.internal.access.JavaUtilJarAccess#entryNames(JarFile, CodeSource[])->Enumeration::: java util jar access entry names
jdk.internal.access.JavaUtilJarAccess#entries2(JarFile)->Enumeration::: java util jar access entries2
jdk.internal.access.JavaUtilJarAccess#setEagerValidation(JarFile, boolean)->void::: java util jar access set eager validation
jdk.internal.access.JavaUtilJarAccess#getManifestDigests(JarFile)->List::: java util jar access get manifest digests
jdk.internal.access.JavaUtilJarAccess#getTrustedAttributes(Manifest, String)->Attributes::: java util jar access get trusted attributes
jdk.internal.access.JavaUtilJarAccess#ensureInitialization(JarFile)->void::: java util jar access ensure initialization
jdk.internal.access.JavaUtilJarAccess#isInitializing()->boolean::: java util jar access is initializing
jdk.internal.access.JavaUtilResourceBundleAccess#setParent(ResourceBundle, ResourceBundle)->void:::Sets the bundle's parent to the given parent.
jdk.internal.access.JavaUtilResourceBundleAccess#getParent(ResourceBundle)->ResourceBundle:::Returns the parent of the given bundle or null if the bundle has no parent.
jdk.internal.access.JavaUtilResourceBundleAccess#setLocale(ResourceBundle, Locale)->void:::Sets the bundle's locale to the given locale.
jdk.internal.access.JavaUtilResourceBundleAccess#setName(ResourceBundle, String)->void:::Sets the bundle's base name to the given name.
jdk.internal.access.JavaUtilResourceBundleAccess#getBundle(String, Locale, Module)->ResourceBundle:::Returns a ResourceBundle of the given baseName and locale loaded on behalf of the given module with no caller module access check.
jdk.internal.access.JavaUtilResourceBundleAccess#newResourceBundle(Class)->ResourceBundle:::Instantiates a ResourceBundle of the given bundle class.
jdk.internal.access.JavaUtilZipFileAccess#startsWithLocHeader(ZipFile)->boolean::: java util zip file access starts with loc header
jdk.internal.access.JavaUtilZipFileAccess#getMetaInfEntryNames(ZipFile)->String[]::: java util zip file access get meta inf entry names
jdk.internal.access.JavaUtilZipFileAccess#getEntry(ZipFile, String, Function)->JarEntry::: java util zip file access get entry
jdk.internal.access.JavaUtilZipFileAccess#entries(ZipFile, Function)->Enumeration::: java util zip file access entries
jdk.internal.access.JavaUtilZipFileAccess#stream(ZipFile, Function)->Stream::: java util zip file access stream
jdk.internal.access.JavaUtilZipFileAccess#entryNameStream(ZipFile)->Stream::: java util zip file access entry name stream
jdk.internal.access.JavaxCryptoSealedObjectAccess#getExtObjectInputStream(SealedObject, Cipher)->ObjectInputStream::: javax crypto sealed object access get ext object input stream
jdk.internal.access.SharedSecrets#javaUtilJarAccess()->JavaUtilJarAccess::: shared secrets java util jar access
jdk.internal.access.SharedSecrets#setJavaUtilJarAccess(JavaUtilJarAccess)->void::: shared secrets set java util jar access
jdk.internal.access.SharedSecrets#setJavaLangAccess(JavaLangAccess)->void::: shared secrets set java lang access
jdk.internal.access.SharedSecrets#getJavaLangAccess()->JavaLangAccess::: shared secrets get java lang access
jdk.internal.access.SharedSecrets#setJavaLangInvokeAccess(JavaLangInvokeAccess)->void::: shared secrets set java lang invoke access
jdk.internal.access.SharedSecrets#getJavaLangInvokeAccess()->JavaLangInvokeAccess::: shared secrets get java lang invoke access
jdk.internal.access.SharedSecrets#setJavaLangModuleAccess(JavaLangModuleAccess)->void::: shared secrets set java lang module access
jdk.internal.access.SharedSecrets#getJavaLangModuleAccess()->JavaLangModuleAccess::: shared secrets get java lang module access
jdk.internal.access.SharedSecrets#setJavaLangRefAccess(JavaLangRefAccess)->void::: shared secrets set java lang ref access
jdk.internal.access.SharedSecrets#getJavaLangRefAccess()->JavaLangRefAccess::: shared secrets get java lang ref access
jdk.internal.access.SharedSecrets#setJavaNetUriAccess(JavaNetUriAccess)->void::: shared secrets set java net uri access
jdk.internal.access.SharedSecrets#getJavaNetUriAccess()->JavaNetUriAccess::: shared secrets get java net uri access
jdk.internal.access.SharedSecrets#setJavaNetURLAccess(JavaNetURLAccess)->void::: shared secrets set java net access
jdk.internal.access.SharedSecrets#getJavaNetURLAccess()->JavaNetURLAccess::: shared secrets get java net access
jdk.internal.access.SharedSecrets#setJavaNetURLClassLoaderAccess(JavaNetURLClassLoaderAccess)->void::: shared secrets set java net class loader access
jdk.internal.access.SharedSecrets#getJavaNetURLClassLoaderAccess()->JavaNetURLClassLoaderAccess::: shared secrets get java net class loader access
jdk.internal.access.SharedSecrets#setJavaNetInetAddressAccess(JavaNetInetAddressAccess)->void::: shared secrets set java net inet address access
jdk.internal.access.SharedSecrets#getJavaNetInetAddressAccess()->JavaNetInetAddressAccess::: shared secrets get java net inet address access
jdk.internal.access.SharedSecrets#setJavaNetHttpCookieAccess(JavaNetHttpCookieAccess)->void::: shared secrets set java net http cookie access
jdk.internal.access.SharedSecrets#getJavaNetHttpCookieAccess()->JavaNetHttpCookieAccess::: shared secrets get java net http cookie access
jdk.internal.access.SharedSecrets#setJavaNetSocketAccess(JavaNetSocketAccess)->void::: shared secrets set java net socket access
jdk.internal.access.SharedSecrets#getJavaNetSocketAccess()->JavaNetSocketAccess::: shared secrets get java net socket access
jdk.internal.access.SharedSecrets#setJavaNioAccess(JavaNioAccess)->void::: shared secrets set java nio access
jdk.internal.access.SharedSecrets#getJavaNioAccess()->JavaNioAccess::: shared secrets get java nio access
jdk.internal.access.SharedSecrets#setJavaIOAccess(JavaIOAccess)->void::: shared secrets set java access
jdk.internal.access.SharedSecrets#getJavaIOAccess()->JavaIOAccess::: shared secrets get java access
jdk.internal.access.SharedSecrets#setJavaIOFileDescriptorAccess(JavaIOFileDescriptorAccess)->void::: shared secrets set java file descriptor access
jdk.internal.access.SharedSecrets#getJavaIOFilePermissionAccess()->JavaIOFilePermissionAccess::: shared secrets get java file permission access
jdk.internal.access.SharedSecrets#setJavaIOFilePermissionAccess(JavaIOFilePermissionAccess)->void::: shared secrets set java file permission access
jdk.internal.access.SharedSecrets#getJavaIOFileDescriptorAccess()->JavaIOFileDescriptorAccess::: shared secrets get java file descriptor access
jdk.internal.access.SharedSecrets#setJavaSecurityAccess(JavaSecurityAccess)->void::: shared secrets set java security access
jdk.internal.access.SharedSecrets#getJavaSecurityAccess()->JavaSecurityAccess::: shared secrets get java security access
jdk.internal.access.SharedSecrets#getJavaUtilZipFileAccess()->JavaUtilZipFileAccess::: shared secrets get java util zip file access
jdk.internal.access.SharedSecrets#setJavaUtilZipFileAccess(JavaUtilZipFileAccess)->void::: shared secrets set java util zip file access
jdk.internal.access.SharedSecrets#setJavaAWTAccess(JavaAWTAccess)->void::: shared secrets set java access
jdk.internal.access.SharedSecrets#getJavaAWTAccess()->JavaAWTAccess::: shared secrets get java access
jdk.internal.access.SharedSecrets#setJavaAWTFontAccess(JavaAWTFontAccess)->void::: shared secrets set java font access
jdk.internal.access.SharedSecrets#getJavaAWTFontAccess()->JavaAWTFontAccess::: shared secrets get java font access
jdk.internal.access.SharedSecrets#getJavaBeansAccess()->JavaBeansAccess::: shared secrets get java beans access
jdk.internal.access.SharedSecrets#setJavaBeansAccess(JavaBeansAccess)->void::: shared secrets set java beans access
jdk.internal.access.SharedSecrets#getJavaUtilResourceBundleAccess()->JavaUtilResourceBundleAccess::: shared secrets get java util resource bundle access
jdk.internal.access.SharedSecrets#setJavaUtilResourceBundleAccess(JavaUtilResourceBundleAccess)->void::: shared secrets set java util resource bundle access
jdk.internal.access.SharedSecrets#getJavaObjectInputStreamReadString()->JavaObjectInputStreamReadString::: shared secrets get java object input stream read string
jdk.internal.access.SharedSecrets#setJavaObjectInputStreamReadString(JavaObjectInputStreamReadString)->void::: shared secrets set java object input stream read string
jdk.internal.access.SharedSecrets#getJavaObjectInputStreamAccess()->JavaObjectInputStreamAccess::: shared secrets get java object input stream access
jdk.internal.access.SharedSecrets#setJavaObjectInputStreamAccess(JavaObjectInputStreamAccess)->void::: shared secrets set java object input stream access
jdk.internal.access.SharedSecrets#getJavaObjectInputFilterAccess()->JavaObjectInputFilterAccess::: shared secrets get java object input filter access
jdk.internal.access.SharedSecrets#setJavaObjectInputFilterAccess(JavaObjectInputFilterAccess)->void::: shared secrets set java object input filter access
jdk.internal.access.SharedSecrets#setJavaIORandomAccessFileAccess(JavaIORandomAccessFileAccess)->void::: shared secrets set java random access file access
jdk.internal.access.SharedSecrets#getJavaIORandomAccessFileAccess()->JavaIORandomAccessFileAccess::: shared secrets get java random access file access
jdk.internal.access.SharedSecrets#setJavaSecuritySignatureAccess(JavaSecuritySignatureAccess)->void::: shared secrets set java security signature access
jdk.internal.access.SharedSecrets#getJavaSecuritySignatureAccess()->JavaSecuritySignatureAccess::: shared secrets get java security signature access
jdk.internal.access.SharedSecrets#setJavaxCryptoSealedObjectAccess(JavaxCryptoSealedObjectAccess)->void::: shared secrets set javax crypto sealed object access
jdk.internal.access.SharedSecrets#getJavaxCryptoSealedObjectAccess()->JavaxCryptoSealedObjectAccess::: shared secrets get javax crypto sealed object access

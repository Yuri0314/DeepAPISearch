jdk.dynalink.linker.ConversionComparator#compareConversion(Class, Class, Class)->Comparison:::Determines which of the two target types is the preferred conversion target from a source type.
jdk.dynalink.linker.GuardedInvocation#getInvocation()->MethodHandle:::Returns the invocation method handle.
jdk.dynalink.linker.GuardedInvocation#getGuard()->MethodHandle:::Returns the guard method handle.
jdk.dynalink.linker.GuardedInvocation#getSwitchPoints()->SwitchPoint[]:::Returns the switch points that can be used to invalidate the linkage of this invocation handle.
jdk.dynalink.linker.GuardedInvocation#getException()->Class:::Returns the exception type that if thrown by the invocation should invalidate the linkage of this guarded invocation.
jdk.dynalink.linker.GuardedInvocation#hasBeenInvalidated()->boolean:::Returns true if and only if this guarded invocation has at least one invalidated switch point.
jdk.dynalink.linker.GuardedInvocation#replaceMethods(MethodHandle, MethodHandle)->GuardedInvocation:::Creates a new guarded invocation with different methods, preserving the switch point.
jdk.dynalink.linker.GuardedInvocation#addSwitchPoint(SwitchPoint)->GuardedInvocation:::Create a new guarded invocation with an added switch point.
jdk.dynalink.linker.GuardedInvocation#asType(MethodType)->GuardedInvocation:::Changes the type of the invocation, as if MethodHandle#asType(MethodType) was applied to its invocation and its guard, if it has one (with return type changed to boolean, and parameter count potentially truncated for the guard)
jdk.dynalink.linker.GuardedInvocation#asType(LinkerServices, MethodType)->GuardedInvocation:::Changes the type of the invocation, as if LinkerServices#asType(MethodHandle, MethodType) was applied to its invocation and its guard, if it has one (with return type changed to boolean, and parameter count potentially truncated for the guard)
jdk.dynalink.linker.GuardedInvocation#asTypeSafeReturn(LinkerServices, MethodType)->GuardedInvocation:::Changes the type of the invocation, as if LinkerServices#asTypeLosslessReturn(MethodHandle, MethodType) was applied to its invocation and LinkerServices#asType(MethodHandle, MethodType) applied to its guard, if it has one (with return type changed to boolean, and parameter count potentially truncated for the guard)
jdk.dynalink.linker.GuardedInvocation#asType(CallSiteDescriptor)->GuardedInvocation:::Changes the type of the invocation, as if MethodHandle#asType(MethodType) was applied to its invocation and its guard, if it has one (with return type changed to boolean for guard)
jdk.dynalink.linker.GuardedInvocation#filterArguments(int, MethodHandle...)->GuardedInvocation:::Applies argument filters to both the invocation and the guard (if it exists and has at least pos + 1 parameters) with MethodHandles#filterArguments(MethodHandle, int, MethodHandle...).
jdk.dynalink.linker.GuardedInvocation#dropArguments(int, List>)->GuardedInvocation:::Makes an invocation that drops arguments in both the invocation and the guard (if it exists and has at least pos parameters) with MethodHandles#dropArguments(MethodHandle, int, List).
jdk.dynalink.linker.GuardedInvocation#dropArguments(int, Class...)->GuardedInvocation:::Makes an invocation that drops arguments in both the invocation and the guard (if it exists and has at least pos parameters) with MethodHandles#dropArguments(MethodHandle, int, Class...).
jdk.dynalink.linker.GuardedInvocation#compose(MethodHandle)->MethodHandle:::Composes the invocation, guard, switch points, and the exception into a composite method handle that knows how to fall back when the guard fails or the invocation is invalidated.
jdk.dynalink.linker.GuardedInvocation#compose(MethodHandle, MethodHandle, MethodHandle)->MethodHandle:::Composes the invocation, guard, switch points, and the exception into a composite method handle that knows how to fall back when the guard fails or the invocation is invalidated.
jdk.dynalink.linker.GuardedInvocationTransformer#filter(GuardedInvocation, LinkRequest, LinkerServices)->GuardedInvocation:::Given a guarded invocation, return either the same or potentially different guarded invocation.
jdk.dynalink.linker.GuardingDynamicLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation:::Creates a guarded invocation appropriate for a particular invocation with the specified arguments at a call site.
jdk.dynalink.linker.GuardingTypeConverterFactory#convertToType(Class, Class, Supplier)->GuardedInvocation:::Returns a guarded type conversion that receives a value of the specified source type and returns a value converted to the specified target type
jdk.dynalink.linker.LinkerServices#asType(MethodHandle, MethodType)->MethodHandle:::Similar to MethodHandle#asType(MethodType) except it also hooks in method handles produced by all available GuardingTypeConverterFactory implementations, providing for language-specific type coercing of parameters
jdk.dynalink.linker.LinkerServices#asTypeLosslessReturn(MethodHandle, MethodType)->MethodHandle:::Similar to #asType(MethodHandle, MethodType) except it treats return value type conversion specially
jdk.dynalink.linker.LinkerServices#getTypeConverter(Class, Class)->MethodHandle:::Given a source and target type, returns a method handle that converts between them
jdk.dynalink.linker.LinkerServices#canConvert(Class, Class)->boolean:::Returns true if there might exist a conversion between the requested types (either an automatic JVM conversion, or one provided by any available GuardingTypeConverterFactory), or false if there definitely does not exist a conversion between the requested types
jdk.dynalink.linker.LinkerServices#getGuardedInvocation(LinkRequest)->GuardedInvocation:::Creates a guarded invocation delegating back to the DynamicLinker that exposes this linker services object
jdk.dynalink.linker.LinkerServices#compareConversion(Class, Class, Class)->Comparison:::Determines which of the two type conversions from a source type to the two target types is preferred
jdk.dynalink.linker.LinkerServices#filterInternalObjects(MethodHandle)->MethodHandle:::Modifies the method handle so that any parameters that can receive potentially internal language runtime objects will have a filter added on them to prevent them from escaping, potentially by wrapping them
jdk.dynalink.linker.LinkerServices#getWithLookup(Supplier, SecureLookupSupplier)->T:::Executes an operation within the context of a particular MethodHandles.Lookup lookup object
jdk.dynalink.linker.LinkRequest#getCallSiteDescriptor()->CallSiteDescriptor:::Returns the call site descriptor for the call site being linked.
jdk.dynalink.linker.LinkRequest#getArguments()->Object[]:::Returns the arguments for the invocation being linked
jdk.dynalink.linker.LinkRequest#getReceiver()->Object:::Returns the first argument for the invocation being linked; this is typically the receiver object
jdk.dynalink.linker.LinkRequest#isCallSiteUnstable()->boolean:::Returns true if the call site is considered unstable, that is, it has been relinked more times than was specified in DynamicLinkerFactory#setUnstableRelinkThreshold(int)
jdk.dynalink.linker.LinkRequest#replaceArguments(CallSiteDescriptor, Object...)->LinkRequest:::Returns a request identical to this one with call site descriptor and arguments replaced with the ones specified.
jdk.dynalink.linker.MethodHandleTransformer#transform(MethodHandle)->MethodHandle:::Transforms a method handle.
jdk.dynalink.linker.MethodTypeConversionStrategy#asType(MethodHandle, MethodType)->MethodHandle:::Converts a method handle to a new type.
jdk.dynalink.linker.TypeBasedGuardingDynamicLinker#canLinkType(Class)->boolean:::Returns true if the linker can link an invocation where the first argument (receiver) is of the specified type.

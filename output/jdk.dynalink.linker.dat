ConversionComparator#compareConversion(Class, Class, Class):::Determines which of the two target types is the preferred conversion target from a source type.:::
GuardedInvocation#getInvocation():::Returns the invocation method handle.:::return
GuardedInvocation#getGuard():::Returns the guard method handle.:::return
GuardedInvocation#getSwitchPoints():::Returns the switch points that can be used to invalidate the linkage of this invocation handle.:::return->switchPoints->clone
GuardedInvocation#getException():::Returns the exception type that if thrown by the invocation should invalidate the linkage of this guarded invocation.:::return
GuardedInvocation#hasBeenInvalidated():::Returns true if and only if this guarded invocation has at least one invalidated switch point.:::if->return->foreach->if->sp->hasBeenInvalidated->return->return
GuardedInvocation#replaceMethods(MethodHandle, MethodHandle):::Creates a new guarded invocation with different methods, preserving the switch point.:::return->new->GuardedInvocation
GuardedInvocation#addSwitchPoint(SwitchPoint):::Create a new guarded invocation with an added switch point.:::if->return->newSwitchPoints->if->new->SwitchPointArr->System->arraycopy->else->new->SwitchPointArr->return->new->GuardedInvocation
GuardedInvocation#asType(MethodType):::Changes the type of the invocation, as if MethodHandle#asType(MethodType) was applied to its invocation and its guard, if it has one (with return type changed to boolean, and parameter count potentially truncated for the guard):::return->invocation->asType->Guards->asType->replaceMethodsOrThis
GuardedInvocation#asType(LinkerServices, MethodType):::Changes the type of the invocation, as if LinkerServices#asType(MethodHandle, MethodType) was applied to its invocation and its guard, if it has one (with return type changed to boolean, and parameter count potentially truncated for the guard):::return->linkerServices->asType->Guards->asType->replaceMethodsOrThis
GuardedInvocation#asTypeSafeReturn(LinkerServices, MethodType):::Changes the type of the invocation, as if LinkerServices#asTypeLosslessReturn(MethodHandle, MethodType) was applied to its invocation and LinkerServices#asType(MethodHandle, MethodType) applied to its guard, if it has one (with return type changed to boolean, and parameter count potentially truncated for the guard):::return->linkerServices->asTypeLosslessReturn->Guards->asType->replaceMethodsOrThis
GuardedInvocation#asType(CallSiteDescriptor):::Changes the type of the invocation, as if MethodHandle#asType(MethodType) was applied to its invocation and its guard, if it has one (with return type changed to boolean for guard):::return->desc->getMethodType->asType
GuardedInvocation#filterArguments(int, MethodHandle...):::Applies argument filters to both the invocation and the guard (if it exists and has at least pos + 1 parameters) with MethodHandles#filterArguments(MethodHandle, int, MethodHandle...).:::return->MethodHandles->filterArguments->guard->type->parameterCount->MethodHandles->filterArguments->replaceMethods
GuardedInvocation#dropArguments(int, List>):::Makes an invocation that drops arguments in both the invocation and the guard (if it exists and has at least pos parameters) with MethodHandles#dropArguments(MethodHandle, int, List).:::return->MethodHandles->dropArguments->guard->type->parameterCount->MethodHandles->dropArguments->replaceMethods
GuardedInvocation#dropArguments(int, Class...):::Makes an invocation that drops arguments in both the invocation and the guard (if it exists and has at least pos parameters) with MethodHandles#dropArguments(MethodHandle, int, Class...).:::return->MethodHandles->dropArguments->guard->type->parameterCount->MethodHandles->dropArguments->replaceMethods
GuardedInvocation#compose(MethodHandle):::Composes the invocation, guard, switch points, and the exception into a composite method handle that knows how to fall back when the guard fails or the invocation is invalidated.:::return->compose
GuardedInvocation#compose(MethodHandle, MethodHandle, MethodHandle):::Composes the invocation, guard, switch points, and the exception into a composite method handle that knows how to fall back when the guard fails or the invocation is invalidated.:::guarded->MethodHandles->guardWithTest->catchGuarded->MethodHandles->MethodHandles->dropArguments->catchException->if->return->spGuarded->foreach->sp->guardWithTest->return
GuardedInvocationTransformer#filter(GuardedInvocation, LinkRequest, LinkerServices):::Given a guarded invocation, return either the same or potentially different guarded invocation.:::
GuardingDynamicLinker#getGuardedInvocation(LinkRequest, LinkerServices):::Creates a guarded invocation appropriate for a particular invocation with the specified arguments at a call site.:::
GuardingTypeConverterFactory#convertToType(Class, Class, Supplier):::Returns a guarded type conversion that receives a value of the specified source type and returns a value converted to the specified target type:::
LinkerServices#asType(MethodHandle, MethodType):::Similar to MethodHandle#asType(MethodType) except it also hooks in method handles produced by all available GuardingTypeConverterFactory implementations, providing for language-specific type coercing of parameters:::
LinkerServices#asTypeLosslessReturn(MethodHandle, MethodType):::Similar to #asType(MethodHandle, MethodType) except it treats return value type conversion specially:::handleReturnType->handle->type->returnType->return->TypeUtilities->fromType->returnType->isConvertibleWithoutLoss->fromType->changeReturnType->asType
LinkerServices#getTypeConverter(Class, Class):::Given a source and target type, returns a method handle that converts between them:::
LinkerServices#canConvert(Class, Class):::Returns true if there might exist a conversion between the requested types (either an automatic JVM conversion, or one provided by any available GuardingTypeConverterFactory), or false if there definitely does not exist a conversion between the requested types:::
LinkerServices#getGuardedInvocation(LinkRequest):::Creates a guarded invocation delegating back to the DynamicLinker that exposes this linker services object:::
LinkerServices#compareConversion(Class, Class, Class):::Determines which of the two type conversions from a source type to the two target types is preferred:::
LinkerServices#filterInternalObjects(MethodHandle):::Modifies the method handle so that any parameters that can receive potentially internal language runtime objects will have a filter added on them to prevent them from escaping, potentially by wrapping them:::
LinkerServices#getWithLookup(Supplier, SecureLookupSupplier):::Executes an operation within the context of a particular MethodHandles.Lookup lookup object:::
LinkRequest#getCallSiteDescriptor():::Returns the call site descriptor for the call site being linked.:::
LinkRequest#getArguments():::Returns the arguments for the invocation being linked:::
LinkRequest#getReceiver():::Returns the first argument for the invocation being linked; this is typically the receiver object:::
LinkRequest#isCallSiteUnstable():::Returns true if the call site is considered unstable, that is, it has been relinked more times than was specified in DynamicLinkerFactory#setUnstableRelinkThreshold(int):::
LinkRequest#replaceArguments(CallSiteDescriptor, Object...):::Returns a request identical to this one with call site descriptor and arguments replaced with the ones specified.:::
MethodHandleTransformer#transform(MethodHandle):::Transforms a method handle.:::
MethodTypeConversionStrategy#asType(MethodHandle, MethodType):::Converts a method handle to a new type.:::
TypeBasedGuardingDynamicLinker#canLinkType(Class):::Returns true if the linker can link an invocation where the first argument (receiver) is of the specified type.:::

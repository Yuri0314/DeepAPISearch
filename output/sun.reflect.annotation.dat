AnnotatedTypeFactory#buildAnnotatedType(Type, LocationInfo, TypeAnnotation[], TypeAnnotation[], AnnotatedElement):::Create an AnnotatedType.:::if->return->if->isArray->return->new->AnnotatedArrayTypeImpl->if->return->new->AnnotatedTypeBaseImpl->else->if->return->new->AnnotatedTypeVariableImpl->else->if->return->new->AnnotatedParameterizedTypeImpl->else->if->return->new->AnnotatedWildcardTypeImpl->throw->new->AssertionError
AnnotationParser#parseAnnotations(byte[], ConstantPool, Class):::Parses the annotations described by the specified byte array:::if->return->Collections->emptyMap->try->return->parseAnnotations2->catch->throw->new->AnnotationFormatError->throw->new->AnnotationFormatError->finally
AnnotationParser#parseSelectAnnotations(byte[], ConstantPool, Class, Class...):::Like #parseAnnotations(byte[], sun.reflect.ConstantPool, Class) with an additional parameter selectAnnotationClasses which selects the annotation types to parse (other than selected are quickly skipped). This method is only used to parse select meta annotations in the construction phase of AnnotationType instances to prevent infinite recursion.:::if->return->Collections->emptyMap->try->return->parseAnnotations2->catch->throw->new->AnnotationFormatError->throw->new->AnnotationFormatError->finally
AnnotationParser#parseParameterAnnotations(byte[], ConstantPool, Class):::Parses the parameter annotations described by the specified byte array:::try->return->parseParameterAnnotations2->catch->throw->new->AnnotationFormatError->throw->new->AnnotationFormatError->finally
AnnotationParser#parseAnnotation(ByteBuffer, ConstantPool, Class, boolean):::Parses the annotation at the current position in the specified byte buffer, resolving constant references in the specified constant pool:::return->parseAnnotation2
AnnotationParser#annotationForMap(Class, Map):::Returns an annotation of the given type backed by the given member -> value map.:::return->AccessController->new->PrivilegedAction<Annotation>->doPrivileged
AnnotationParser#parseMemberValue(Class, ByteBuffer, ConstantPool, Class):::Parses the annotation member value at the current position in the specified byte buffer, resolving constant references in the specified constant pool:::result->tag->buf->get->switch->return->parseEnumValue->parseClassValue->break->parseAnnotation->break->return->parseArray->parseConst->if->memberType->isInstance->result->getClass->new->AnnotationTypeMismatchExceptionProxy->return
AnnotationSupport#getDirectlyAndIndirectlyPresent(Map, Annotation>, Class):::Finds and returns all annotations in annotations matching the given annoClass:::result->new->ArrayList<>->direct->annotations->get->if->result->add->indirect->getIndirectlyPresent->if->indirectFirst->containerBeforeContainee->result->Arrays->asList->addAll->arr->Array->result->size->newInstance->return->result->toArray
AnnotationSupport#getAssociatedAnnotations(Map, Annotation>, Class, Class):::Finds and returns all associated annotations matching the given class:::Objects->requireNonNull->result->getDirectlyAndIndirectlyPresent->if->AnnotationType->getInstance->isInherited->superDecl->decl->getSuperclass->while->LANG_ACCESS->getDeclaredAnnotationMap->getDirectlyAndIndirectlyPresent->superDecl->getSuperclass->return
AnnotationType#getInstance(Class):::Returns an AnnotationType instance for the specified annotation type.:::jla->SharedSecrets->getJavaLangAccess->result->jla->getAnnotationType->if->new->AnnotationType->if->jla->casAnnotationType->jla->getAnnotationType->return
AnnotationType#invocationHandlerReturnType(Class):::Returns the type that must be returned by the invocation handler of a dynamic proxy in order to have the dynamic proxy return the specified type (which is assumed to be a legal member type for an annotation).:::if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
AnnotationType#memberTypes():::Returns member types for this annotation type (member name -> type mapping).:::return
AnnotationType#members():::Returns members of this annotation type (member name -> associated Method object mapping).:::return
AnnotationType#memberDefaults():::Returns the default values for this annotation type (Member name -> default value mapping).:::return
AnnotationType#retention():::Returns the retention policy for this annotation type.:::return
AnnotationType#isInherited():::Returns true if this annotation type is inherited.:::return
AnnotationType#toString():::For debugging.:::return
TypeAnnotation.LocationInfo#popAllLocations(byte):::Pop a series of locations matching tag:::l->newDepth->while->if->res->new->LocationArr->System->arraycopy->return->new->LocationInfo->else->return
TypeAnnotationParser#buildAnnotatedType(byte[], ConstantPool, AnnotatedElement, Class, Type, TypeAnnotationTarget):::Build an AnnotatedType from the parameters supplied:::tas->parseTypeAnnotations->l->new->ArrayList<>->foreach->ti->t->getTargetInfo->if->ti->getTarget->l->add->typeAnnotations->l->toArray->return->AnnotatedTypeFactory->AnnotatedTypeFactory->nestingForType->buildAnnotatedType
TypeAnnotationParser#buildAnnotatedTypes(byte[], ConstantPool, AnnotatedElement, Class, Type[], TypeAnnotationTarget):::Build an array of AnnotatedTypes from the parameters supplied:::size->result->new->AnnotatedTypeArr->Arrays->fill->l->new->ArrayListArr->tas->parseTypeAnnotations->foreach->ti->t->getTargetInfo->if->ti->getTarget->pos->ti->getCount->if->tmp->new->ArrayList<>->tmp->tmp->add->offset->if->ctor->declaringClass->ctor->getDeclaringClass->if->declaringClass->isEnum->declaringClass->isMemberClass->declaringClass->getModifiers->for->i->return
TypeAnnotationParser#buildAnnotatedSuperclass(byte[], ConstantPool, Class):::Build an AnnotatedType for the class decl's supertype.:::supertype->decl->getGenericSuperclass->if->return->return->buildAnnotatedType
TypeAnnotationParser#buildAnnotatedInterfaces(byte[], ConstantPool, Class):::Build an array of AnnotatedTypes for the class decl's implemented interfaces.:::if->decl->isArray->decl->isPrimitive->return->return->decl->getGenericInterfaces->buildAnnotatedTypes
TypeAnnotationParser#parseTypeVariableAnnotations(D, int):::Parse regular annotations on a TypeVariable declared on genericDecl:::decl->predicate->if->else->if->else->throw->new->AssertionError->typeVarAnnos->TypeAnnotation->parseAllTypeAnnotations->filter->res->typeVarAnnos->size->new->ArrayList<>->foreach->if->t->getTargetInfo->getCount->res->t->getAnnotation->add->return->res->new->AnnotationArr->toArray
TypeAnnotationParser#parseAnnotatedBounds(Type[], D, int):::Build an array of AnnotatedTypes for the declaration decl's bounds.:::return->parseAnnotatedBounds

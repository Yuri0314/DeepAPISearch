sun.reflect.annotation.AnnotatedTypeFactory#buildAnnotatedType(Type, LocationInfo, TypeAnnotation[], TypeAnnotation[], AnnotatedElement)->AnnotatedType:::Create an AnnotatedType.
sun.reflect.annotation.AnnotatedTypeFactory#nestingForType(Type, LocationInfo)->LocationInfo::: annotated type factory nesting for type
sun.reflect.annotation.AnnotationInvocationHandler#invoke(Object, Method, Object[])->Object::: annotation invocation handler invoke
sun.reflect.annotation.AnnotationParser#parseAnnotations(byte[], ConstantPool, Class)->Map, Annotation>:::Parses the annotations described by the specified byte array
sun.reflect.annotation.AnnotationParser#parseSelectAnnotations(byte[], ConstantPool, Class, Class...)->Map, Annotation>:::Like #parseAnnotations(byte[], sun.reflect.ConstantPool, Class) with an additional parameter selectAnnotationClasses which selects the annotation types to parse (other than selected are quickly skipped). This method is only used to parse select meta annotations in the construction phase of AnnotationType instances to prevent infinite recursion.
sun.reflect.annotation.AnnotationParser#parseParameterAnnotations(byte[], ConstantPool, Class)->Annotation[][]:::Parses the parameter annotations described by the specified byte array
sun.reflect.annotation.AnnotationParser#parseAnnotation(ByteBuffer, ConstantPool, Class, boolean)->Annotation:::Parses the annotation at the current position in the specified byte buffer, resolving constant references in the specified constant pool
sun.reflect.annotation.AnnotationParser#annotationForMap(Class, Map)->Annotation:::Returns an annotation of the given type backed by the given member -> value map.
sun.reflect.annotation.AnnotationParser#parseMemberValue(Class, ByteBuffer, ConstantPool, Class)->Object:::Parses the annotation member value at the current position in the specified byte buffer, resolving constant references in the specified constant pool
sun.reflect.annotation.AnnotationParser#toClass(Type)->Class::: annotation parser to class
sun.reflect.annotation.AnnotationParser#toArray(Map, Annotation>)->Annotation[]::: annotation parser to array
sun.reflect.annotation.AnnotationParser#getEmptyAnnotationArray()->Annotation[]::: annotation parser get empty annotation array
sun.reflect.annotation.AnnotationSupport#getDirectlyAndIndirectlyPresent(Map, Annotation>, Class)->A[]:::Finds and returns all annotations in annotations matching the given annoClass
sun.reflect.annotation.AnnotationSupport#getAssociatedAnnotations(Map, Annotation>, Class, Class)->A[]:::Finds and returns all associated annotations matching the given class
sun.reflect.annotation.AnnotationType#getInstance(Class)->AnnotationType:::Returns an AnnotationType instance for the specified annotation type.
sun.reflect.annotation.AnnotationType#invocationHandlerReturnType(Class)->Class:::Returns the type that must be returned by the invocation handler of a dynamic proxy in order to have the dynamic proxy return the specified type (which is assumed to be a legal member type for an annotation).
sun.reflect.annotation.AnnotationType#memberTypes()->Map>:::Returns member types for this annotation type (member name -> type mapping).
sun.reflect.annotation.AnnotationType#members()->Map:::Returns members of this annotation type (member name -> associated Method object mapping).
sun.reflect.annotation.AnnotationType#memberDefaults()->Map:::Returns the default values for this annotation type (Member name -> default value mapping).
sun.reflect.annotation.AnnotationType#retention()->RetentionPolicy:::Returns the retention policy for this annotation type.
sun.reflect.annotation.AnnotationType#isInherited()->boolean:::Returns true if this annotation type is inherited.
sun.reflect.annotation.AnnotationType#toString()->String:::For debugging.
sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy#setMember(Method)->AnnotationTypeMismatchExceptionProxy::: annotation type mismatch exception proxy set member
sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy#generateException()->RuntimeException::: annotation type mismatch exception proxy generate exception
sun.reflect.annotation.AnnotationTypeMismatchExceptionProxy#toString()->String::: annotation type mismatch exception proxy to string
sun.reflect.annotation.EnumConstantNotPresentExceptionProxy#generateException()->RuntimeException::: enum constant not present exception proxy generate exception
sun.reflect.annotation.EnumConstantNotPresentExceptionProxy#toString()->String::: enum constant not present exception proxy to string
sun.reflect.annotation.ExceptionProxy#generateException()->RuntimeException::: exception proxy generate exception
sun.reflect.annotation.TypeAnnotation#getTargetInfo()->TypeAnnotationTargetInfo::: type annotation get target info
sun.reflect.annotation.TypeAnnotation#getAnnotation()->Annotation::: type annotation get annotation
sun.reflect.annotation.TypeAnnotation#getBaseDeclaration()->AnnotatedElement::: type annotation get base declaration
sun.reflect.annotation.TypeAnnotation#getLocationInfo()->LocationInfo::: type annotation get location info
sun.reflect.annotation.TypeAnnotation#filter(TypeAnnotation[], TypeAnnotationTarget)->List::: type annotation filter
sun.reflect.annotation.TypeAnnotation.TypeAnnotationTargetInfo#getTarget()->TypeAnnotationTarget::: type annotation target info get target
sun.reflect.annotation.TypeAnnotation.TypeAnnotationTargetInfo#getCount()->int::: type annotation target info get count
sun.reflect.annotation.TypeAnnotation.TypeAnnotationTargetInfo#getSecondaryIndex()->int::: type annotation target info get secondary index
sun.reflect.annotation.TypeAnnotation.TypeAnnotationTargetInfo#toString()->String::: type annotation target info to string
sun.reflect.annotation.TypeAnnotation.LocationInfo#parseLocationInfo(ByteBuffer)->LocationInfo::: location info parse location info
sun.reflect.annotation.TypeAnnotation.LocationInfo#pushArray()->LocationInfo::: location info push array
sun.reflect.annotation.TypeAnnotation.LocationInfo#pushInner()->LocationInfo::: location info push inner
sun.reflect.annotation.TypeAnnotation.LocationInfo#pushWildcard()->LocationInfo::: location info push wildcard
sun.reflect.annotation.TypeAnnotation.LocationInfo#pushTypeArg(short)->LocationInfo::: location info push type arg
sun.reflect.annotation.TypeAnnotation.LocationInfo#pushLocation(byte, short)->LocationInfo::: location info push location
sun.reflect.annotation.TypeAnnotation.LocationInfo#popAllLocations(byte)->LocationInfo:::Pop a series of locations matching tag
sun.reflect.annotation.TypeAnnotation.LocationInfo#filter(TypeAnnotation[])->TypeAnnotation[]::: location info filter
sun.reflect.annotation.TypeAnnotation.LocationInfo#isSameLocationInfo(LocationInfo)->boolean::: location info is same location info
sun.reflect.annotation.TypeAnnotation.LocationInfo.Location#isSameLocation(Location)->boolean::: location is same location
sun.reflect.annotation.TypeAnnotation#toString()->String::: type annotation to string
sun.reflect.annotation.TypeAnnotationParser#buildAnnotatedType(byte[], ConstantPool, AnnotatedElement, Class, Type, TypeAnnotationTarget)->AnnotatedType:::Build an AnnotatedType from the parameters supplied
sun.reflect.annotation.TypeAnnotationParser#buildAnnotatedTypes(byte[], ConstantPool, AnnotatedElement, Class, Type[], TypeAnnotationTarget)->AnnotatedType[]:::Build an array of AnnotatedTypes from the parameters supplied
sun.reflect.annotation.TypeAnnotationParser#buildAnnotatedSuperclass(byte[], ConstantPool, Class)->AnnotatedType:::Build an AnnotatedType for the class decl's supertype.
sun.reflect.annotation.TypeAnnotationParser#buildAnnotatedInterfaces(byte[], ConstantPool, Class)->AnnotatedType[]:::Build an array of AnnotatedTypes for the class decl's implemented interfaces.
sun.reflect.annotation.TypeAnnotationParser#parseTypeVariableAnnotations(D, int)->Annotation[]:::Parse regular annotations on a TypeVariable declared on genericDecl
sun.reflect.annotation.TypeAnnotationParser#parseAnnotatedBounds(Type[], D, int)->AnnotatedType[]:::Build an array of AnnotatedTypes for the declaration decl's bounds.
sun.reflect.annotation.TypeAnnotationParser#parseAllTypeAnnotations(AnnotatedElement)->TypeAnnotation[]::: type annotation parser parse all type annotations
sun.reflect.annotation.TypeAnnotationParser#mapTypeAnnotations(TypeAnnotation[])->Map, Annotation>::: type annotation parser map type annotations
sun.reflect.annotation.TypeNotPresentExceptionProxy#generateException()->RuntimeException::: type not present exception proxy generate exception
sun.reflect.annotation.TypeNotPresentExceptionProxy#typeName()->String::: type not present exception proxy type name
sun.reflect.annotation.TypeNotPresentExceptionProxy#getCause()->Throwable::: type not present exception proxy get cause
sun.reflect.annotation.TypeNotPresentExceptionProxy#toString()->String::: type not present exception proxy to string

jdk.jshell.execution.DefaultLoaderDelegate#load(ClassBytecodes[])->void::: default loader delegate load
jdk.jshell.execution.DefaultLoaderDelegate#classesRedefined(ClassBytecodes[])->void::: default loader delegate classes redefined
jdk.jshell.execution.DefaultLoaderDelegate#addToClasspath(String)->void::: default loader delegate add to classpath
jdk.jshell.execution.DefaultLoaderDelegate#findClass(String)->Class::: default loader delegate find class
jdk.jshell.execution.DemultiplexInput#run()->void::: demultiplex input run
jdk.jshell.execution.DirectExecutionControl#load(ClassBytecodes[])->void::: direct execution control load
jdk.jshell.execution.DirectExecutionControl#redefine(ClassBytecodes[])->void::: direct execution control redefine
jdk.jshell.execution.DirectExecutionControl#classesRedefined(ClassBytecodes[])->void:::Notify that classes have been redefined.
jdk.jshell.execution.DirectExecutionControl#invoke(String, String)->String::: direct execution control invoke
jdk.jshell.execution.DirectExecutionControl#varValue(String, String)->String::: direct execution control var value
jdk.jshell.execution.DirectExecutionControl#addToClasspath(String)->void::: direct execution control add to classpath
jdk.jshell.execution.DirectExecutionControl#stop()->void:::  Not supported.
jdk.jshell.execution.DirectExecutionControl#extensionCommand(String, Object)->Object::: direct execution control extension command
jdk.jshell.execution.DirectExecutionControl#close()->void::: direct execution control close
jdk.jshell.execution.DirectExecutionControl#findClass(String)->Class:::Finds the class with the specified binary name.
jdk.jshell.execution.DirectExecutionControl#invoke(Method)->String:::Invoke the specified "doit-method", a static method with no parameters
jdk.jshell.execution.DirectExecutionControl#valueString(Object)->String:::Converts the Object value from ExecutionControl#invoke(String, String)   or ExecutionControl#varValue(String, String)    to String.
jdk.jshell.execution.DirectExecutionControl#throwConvertedInvocationException(Throwable)->String:::Converts incoming exceptions in user code into instances of subtypes of ExecutionControl.ExecutionControlException and throws the converted exception.
jdk.jshell.execution.DirectExecutionControl#throwConvertedOtherException(Throwable)->String:::Converts incoming exceptions in agent code into instances of subtypes of ExecutionControl.ExecutionControlException and throws the converted exception.
jdk.jshell.execution.DirectExecutionControl#clientCodeEnter()->void:::Marks entry into user code.
jdk.jshell.execution.DirectExecutionControl#clientCodeLeave()->void:::Marks departure from user code.
jdk.jshell.execution.ExecutionControlForwarder#writeInternalException(Throwable)->void::: execution control forwarder write internal exception
jdk.jshell.execution.ExecutionControlForwarder#writeUserException(UserException)->void::: execution control forwarder write user exception
jdk.jshell.execution.ExecutionControlForwarder#writeResolutionException(ResolutionException)->void::: execution control forwarder write resolution exception
jdk.jshell.execution.ExecutionControlForwarder#commandLoop()->void::: execution control forwarder command loop
jdk.jshell.execution.FailOverExecutionControlProvider#name()->String:::The unique name of this ExecutionControlProvider.
jdk.jshell.execution.FailOverExecutionControlProvider#defaultParameters()->Map:::Create and return the default parameter map for this ExecutionControlProvider
jdk.jshell.execution.FailOverExecutionControlProvider#generate(ExecutionEnv, Map)->ExecutionControl:::Create and return a locally executing ExecutionControl instance
jdk.jshell.execution.JdiDefaultExecutionControl#create(ExecutionEnv, String, boolean, String, int)->ExecutionControl:::Creates an ExecutionControl instance based on a JDI ListeningConnector or LaunchingConnector
jdk.jshell.execution.JdiDefaultExecutionControl#invoke(String, String)->String::: jdi default execution control invoke
jdk.jshell.execution.JdiDefaultExecutionControl#stop()->void:::Interrupts a running remote invoke by manipulating remote variables and sending a stop via JDI.
jdk.jshell.execution.JdiDefaultExecutionControl#close()->void::: jdi default execution control close
jdk.jshell.execution.JdiDefaultExecutionControl#vm()->VirtualMachine::: jdi default execution control vm
jdk.jshell.execution.JdiEventHandler#start()->void:::Starts the event handler.
jdk.jshell.execution.JdiEventHandler#shutdown()->void::: jdi event handler shutdown
jdk.jshell.execution.JdiEventHandler#run()->void::: jdi event handler run
jdk.jshell.execution.JdiExecutionControl#vm()->VirtualMachine:::Returns the JDI VirtualMachine instance.
jdk.jshell.execution.JdiExecutionControl#redefine(ClassBytecodes[])->void:::Redefine the specified classes
jdk.jshell.execution.JdiExecutionControl#referenceType(VirtualMachine, String)->ReferenceType:::Returns the JDI ReferenceType corresponding to the specified class name.
jdk.jshell.execution.JdiExecutionControlProvider#name()->String:::The unique name of this ExecutionControlProvider.
jdk.jshell.execution.JdiExecutionControlProvider#defaultParameters()->Map:::Create and return the default parameter map for this ExecutionControlProvider
jdk.jshell.execution.JdiExecutionControlProvider#generate(ExecutionEnv, Map)->ExecutionControl::: jdi execution control provider generate
jdk.jshell.execution.JdiInitiator#vm()->VirtualMachine:::Returns the resulting VirtualMachine instance.
jdk.jshell.execution.JdiInitiator#process()->Process:::Returns the launched process.
jdk.jshell.execution.JdiInitiator#timedVirtualMachineCreation(Callable, Callable)->VirtualMachine::: jdi initiator timed virtual machine creation
jdk.jshell.execution.LoaderDelegate#load(ClassBytecodes[])->void:::Attempts to load new classes.
jdk.jshell.execution.LoaderDelegate#classesRedefined(ClassBytecodes[])->void:::Notify that classes have been redefined.
jdk.jshell.execution.LoaderDelegate#addToClasspath(String)->void:::Adds the path to the execution class path.
jdk.jshell.execution.LoaderDelegate#findClass(String)->Class:::Finds the class with the specified binary name.
jdk.jshell.execution.LocalExecutionControl#invoke(Method)->String::: local execution control invoke
jdk.jshell.execution.LocalExecutionControl#stop()->void::: local execution control stop
jdk.jshell.execution.LocalExecutionControl#clientCodeEnter()->void::: local execution control client code enter
jdk.jshell.execution.LocalExecutionControl#clientCodeLeave()->void::: local execution control client code leave
jdk.jshell.execution.LocalExecutionControlProvider#name()->String:::The unique name of this ExecutionControlProvider.
jdk.jshell.execution.LocalExecutionControlProvider#defaultParameters()->Map:::Create and return the default parameter map for LocalExecutionControlProvider
jdk.jshell.execution.LocalExecutionControlProvider#generate(ExecutionEnv, Map)->ExecutionControl:::Create and return a locally executing ExecutionControl instance.
jdk.jshell.execution.MultiplexingOutputStream#write(int)->void::: multiplexing output stream write
jdk.jshell.execution.MultiplexingOutputStream#write(byte[], int, int)->void::: multiplexing output stream write
jdk.jshell.execution.MultiplexingOutputStream#flush()->void::: multiplexing output stream flush
jdk.jshell.execution.MultiplexingOutputStream#close()->void::: multiplexing output stream close
jdk.jshell.execution.PipeInputStream#read()->int::: pipe input stream read
jdk.jshell.execution.PipeInputStream#read(byte[], int, int)->int::: pipe input stream read
jdk.jshell.execution.PipeInputStream#inputNeeded()->void::: pipe input stream input needed
jdk.jshell.execution.PipeInputStream#close()->void::: pipe input stream close
jdk.jshell.execution.PipeInputStream#createOutput()->OutputStream::: pipe input stream create output
jdk.jshell.execution.RemoteExecutionControl#main(String[])->void:::Launch the agent, connecting to the JShell-core over the socket specified in the command-line argument.
jdk.jshell.execution.RemoteExecutionControl#redefine(ClassBytecodes[])->void:::Redefine processing on the remote end is only to register the redefined classes
jdk.jshell.execution.RemoteExecutionControl#stop()->void::: remote execution control stop
jdk.jshell.execution.RemoteExecutionControl#invoke(Method)->String::: remote execution control invoke
jdk.jshell.execution.RemoteExecutionControl#varValue(String, String)->String::: remote execution control var value
jdk.jshell.execution.RemoteExecutionControl#throwConvertedInvocationException(Throwable)->String::: remote execution control throw converted invocation exception
jdk.jshell.execution.RemoteExecutionControl#throwConvertedOtherException(Throwable)->String::: remote execution control throw converted other exception
jdk.jshell.execution.RemoteExecutionControl#clientCodeEnter()->void::: remote execution control client code enter
jdk.jshell.execution.RemoteExecutionControl#clientCodeLeave()->void::: remote execution control client code leave
jdk.jshell.execution.StreamingExecutionControl#load(ClassBytecodes[])->void::: streaming execution control load
jdk.jshell.execution.StreamingExecutionControl#redefine(ClassBytecodes[])->void::: streaming execution control redefine
jdk.jshell.execution.StreamingExecutionControl#invoke(String, String)->String::: streaming execution control invoke
jdk.jshell.execution.StreamingExecutionControl#varValue(String, String)->String::: streaming execution control var value
jdk.jshell.execution.StreamingExecutionControl#addToClasspath(String)->void::: streaming execution control add to classpath
jdk.jshell.execution.StreamingExecutionControl#stop()->void::: streaming execution control stop
jdk.jshell.execution.StreamingExecutionControl#extensionCommand(String, Object)->Object::: streaming execution control extension command
jdk.jshell.execution.StreamingExecutionControl#close()->void:::Closes the execution engine
jdk.jshell.execution.Util#forwardExecutionControl(ExecutionControl, ObjectInput, ObjectOutput)->void:::Forward commands from the input to the specified ExecutionControl instance, then responses back on the output.
jdk.jshell.execution.Util#forwardExecutionControlAndIO(ExecutionControl, InputStream, OutputStream, Map>, Map>)->void:::Forward commands from the input to the specified ExecutionControl instance, then responses back on the output.
jdk.jshell.execution.Util#multiplexingOutputStream(String, OutputStream)->OutputStream::: util multiplexing output stream
jdk.jshell.execution.Util#remoteInputOutput(InputStream, OutputStream, Map, Map, BiFunction)->ExecutionControl:::Creates an ExecutionControl for given packetized input and output
jdk.jshell.execution.Util#detectJdiExitEvent(VirtualMachine, Consumer)->void:::Monitor the JDI event stream for com.sun.jdi.event.VMDeathEvent and com.sun.jdi.event.VMDisconnectEvent

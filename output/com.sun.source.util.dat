com.sun.source.util.DocSourcePositions#getStartPosition(CompilationUnitTree, DocCommentTree, DocTree)->long:::Returns the starting position of the tree within the comment within the file
com.sun.source.util.DocSourcePositions#getEndPosition(CompilationUnitTree, DocCommentTree, DocTree)->long:::Returns the ending position of the tree within the comment within the file
com.sun.source.util.DocTreeFactory#newAttributeTree(Name, ValueKind, List)->AttributeTree:::Create a new AttributeTree object, to represent an HTML attribute in an HTML tag.
com.sun.source.util.DocTreeFactory#newAuthorTree(List)->AuthorTree:::Create a new AuthorTree object, to represent an  tag.
com.sun.source.util.DocTreeFactory#newCodeTree(TextTree)->LiteralTree:::Create a new CodeTree object, to represent a  tag.
com.sun.source.util.DocTreeFactory#newCommentTree(String)->CommentTree:::Create a new CommentTree, to represent an HTML comment.
com.sun.source.util.DocTreeFactory#newDeprecatedTree(List)->DeprecatedTree:::Create a new DeprecatedTree object, to represent an  tag.
com.sun.source.util.DocTreeFactory#newDocCommentTree(List, List)->DocCommentTree:::Create a new DocCommentTree object, to represent a complete doc comment.
com.sun.source.util.DocTreeFactory#newDocCommentTree(List, List, List, List)->DocCommentTree:::Create a new DocCommentTree object, to represent the enitire doc comment.
com.sun.source.util.DocTreeFactory#newDocRootTree()->DocRootTree:::Create a new DocRootTree object, to represent an  tag.
com.sun.source.util.DocTreeFactory#newDocTypeTree(String)->DocTypeTree:::Create a new DocTypeTree, to represent a DOCTYPE HTML declaration.
com.sun.source.util.DocTreeFactory#newEndElementTree(Name)->EndElementTree:::Create a new EndElement object, to represent the end of an HTML element.
com.sun.source.util.DocTreeFactory#newEntityTree(Name)->EntityTree:::Create a new EntityTree object, to represent an HTML entity.
com.sun.source.util.DocTreeFactory#newErroneousTree(String, Diagnostic)->ErroneousTree:::Create a new ErroneousTree object, to represent some unparseable input.
com.sun.source.util.DocTreeFactory#newExceptionTree(ReferenceTree, List)->ThrowsTree:::Create a new ExceptionTree object, to represent an @exception  tag.
com.sun.source.util.DocTreeFactory#newHiddenTree(List)->HiddenTree:::Create a new HiddenTree object, to represent an  tag.
com.sun.source.util.DocTreeFactory#newIdentifierTree(Name)->IdentifierTree:::Create a new IdentifierTree object, to represent an identifier, such as in a @param  tag.
com.sun.source.util.DocTreeFactory#newIndexTree(DocTree, List)->IndexTree:::Create a new IndexTree object, to represent an  tag.
com.sun.source.util.DocTreeFactory#newInheritDocTree()->InheritDocTree:::Create a new InheritDocTree object, to represent an  tag.
com.sun.source.util.DocTreeFactory#newLinkTree(ReferenceTree, List)->LinkTree:::Create a new LinkTree object, to represent a  tag.
com.sun.source.util.DocTreeFactory#newLinkPlainTree(ReferenceTree, List)->LinkTree:::Create a new LinkPlainTree object, to represent a  tag.
com.sun.source.util.DocTreeFactory#newLiteralTree(TextTree)->LiteralTree:::Create a new LiteralTree object, to represent a  tag.
com.sun.source.util.DocTreeFactory#newParamTree(boolean, IdentifierTree, List)->ParamTree:::Create a new ParamTree object, to represent a @param  tag.
com.sun.source.util.DocTreeFactory#newProvidesTree(ReferenceTree, List)->ProvidesTree:::Create a new ProvidesTree object, to represent a @provides  tag.
com.sun.source.util.DocTreeFactory#newReferenceTree(String)->ReferenceTree:::Create a new ReferenceTree object, to represent a reference to an API element.
com.sun.source.util.DocTreeFactory#newReturnTree(List)->ReturnTree:::Create a new ReturnTree object, to represent a @return  tag.
com.sun.source.util.DocTreeFactory#newSeeTree(List)->SeeTree:::Create a new SeeTree object, to represent a @see  tag.
com.sun.source.util.DocTreeFactory#newSerialTree(List)->SerialTree:::Create a new SerialTree object, to represent a @serial  tag.
com.sun.source.util.DocTreeFactory#newSerialDataTree(List)->SerialDataTree:::Create a new SerialDataTree object, to represent a @serialData  tag.
com.sun.source.util.DocTreeFactory#newSerialFieldTree(IdentifierTree, ReferenceTree, List)->SerialFieldTree:::Create a new SerialFieldTree object, to represent a @serialField  tag.
com.sun.source.util.DocTreeFactory#newSinceTree(List)->SinceTree:::Create a new SinceTree object, to represent a @since  tag.
com.sun.source.util.DocTreeFactory#newStartElementTree(Name, List, boolean)->StartElementTree:::Create a new StartElementTree object, to represent the start of an HTML element.
com.sun.source.util.DocTreeFactory#newSummaryTree(List)->SummaryTree:::Create a new SummaryTree object, to represent a @summary  tag.
com.sun.source.util.DocTreeFactory#newTextTree(String)->TextTree:::Create a new TextTree object, to represent some plain text.
com.sun.source.util.DocTreeFactory#newThrowsTree(ReferenceTree, List)->ThrowsTree:::Create a new ThrowsTree object, to represent a @throws  tag.
com.sun.source.util.DocTreeFactory#newUnknownBlockTagTree(Name, List)->UnknownBlockTagTree:::Create a new UnknownBlockTagTree object, to represent an unrecognized block tag.
com.sun.source.util.DocTreeFactory#newUnknownInlineTagTree(Name, List)->UnknownInlineTagTree:::Create a new UnknownInlineTagTree object, to represent an unrecognized inline tag.
com.sun.source.util.DocTreeFactory#newUsesTree(ReferenceTree, List)->UsesTree:::Create a new UsesTree object, to represent a @uses  tag.
com.sun.source.util.DocTreeFactory#newValueTree(ReferenceTree)->ValueTree:::Create a new ValueTree object, to represent a  tag.
com.sun.source.util.DocTreeFactory#newVersionTree(List)->VersionTree:::Create a new VersionTree object, to represent a  tag.
com.sun.source.util.DocTreeFactory#at(int)->DocTreeFactory:::Set the position to be recorded in subsequent tree nodes created by this factory
com.sun.source.util.DocTreeFactory#getFirstSentence(List)->List:::Get the first sentence contained in a list of content
com.sun.source.util.DocTreePath#getPath(TreePath, DocCommentTree, DocTree)->DocTreePath:::Returns a documentation tree path for a tree node within a compilation unit, or null if the node is not found.
com.sun.source.util.DocTreePath#getPath(DocTreePath, DocTree)->DocTreePath:::Returns a documentation tree path for a tree node within a subtree identified by a DocTreePath object, or null if the node is not found.
com.sun.source.util.DocTreePath#getTreePath()->TreePath:::Returns the TreePath associated with this path.
com.sun.source.util.DocTreePath#getDocComment()->DocCommentTree:::Returns the DocCommentTree associated with this path.
com.sun.source.util.DocTreePath#getLeaf()->DocTree:::Returns the leaf node for this path.
com.sun.source.util.DocTreePath#getParentPath()->DocTreePath:::Returns the path for the enclosing node, or null if there is no enclosing node.
com.sun.source.util.DocTreePath#iterator()->Iterator::: doc tree path iterator
com.sun.source.util.DocTreePathScanner#scan(DocTreePath, P)->R:::Scans a tree from a position identified by a tree path.
com.sun.source.util.DocTreePathScanner#scan(DocTree, P)->R:::Scans a single node
com.sun.source.util.DocTreePathScanner#getCurrentPath()->DocTreePath:::Returns the current path for the node, as built up by the currently active set of scan calls.
com.sun.source.util.DocTrees#instance(CompilationTask)->DocTrees:::Returns a DocTrees object for a given CompilationTask.
com.sun.source.util.DocTrees#instance(ProcessingEnvironment)->DocTrees:::Returns a DocTrees object for a given ProcessingEnvironment.
com.sun.source.util.DocTrees#getBreakIterator()->BreakIterator:::Returns the break iterator used to compute the first sentence of documentation comments
com.sun.source.util.DocTrees#getDocCommentTree(TreePath)->DocCommentTree:::Returns the doc comment tree, if any, for the Tree node identified by a given TreePath
com.sun.source.util.DocTrees#getDocCommentTree(Element)->DocCommentTree:::Returns the doc comment tree of the given element
com.sun.source.util.DocTrees#getDocCommentTree(FileObject)->DocCommentTree:::Returns the doc comment tree of the given file
com.sun.source.util.DocTrees#getDocCommentTree(Element, String)->DocCommentTree:::Returns the doc comment tree of the given file whose path is specified relative to the given element
com.sun.source.util.DocTrees#getDocTreePath(FileObject, PackageElement)->DocTreePath:::Returns a doc tree path containing the doc comment tree of the given file
com.sun.source.util.DocTrees#getElement(DocTreePath)->Element:::Returns the language model element referred to by the leaf node of the given DocTreePath, or null if unknown.
com.sun.source.util.DocTrees#getFirstSentence(List)->List:::Returns the list of DocTree representing the first sentence of a comment.
com.sun.source.util.DocTrees#getSourcePositions()->DocSourcePositions:::Returns a utility object for accessing the source positions of documentation tree nodes.
com.sun.source.util.DocTrees#printMessage(Diagnostic.Kind, CharSequence, com.sun.source.doctree.DocTree, com.sun.source.doctree.DocCommentTree, com.sun.source.tree.CompilationUnitTree)->void:::Prints a message of the specified kind at the location of the tree within the provided compilation unit
com.sun.source.util.DocTrees#setBreakIterator(BreakIterator)->void:::Sets the break iterator to compute the first sentence of documentation comments.
com.sun.source.util.DocTrees#getDocTreeFactory()->DocTreeFactory:::Returns a utility object for creating DocTree objects.
com.sun.source.util.DocTreeScanner#scan(DocTree, P)->R:::Scans a single node.
com.sun.source.util.DocTreeScanner#scan(Iterable, P)->R:::Scans a sequence of nodes.
com.sun.source.util.DocTreeScanner#reduce(R, R)->R:::Reduces two results into a combined result
com.sun.source.util.DocTreeScanner#visitAttribute(AttributeTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitAuthor(AuthorTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitComment(CommentTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitDeprecated(DeprecatedTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitDocComment(DocCommentTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitDocRoot(DocRootTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitDocType(DocTypeTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitEndElement(EndElementTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitEntity(EntityTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitErroneous(ErroneousTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitHidden(HiddenTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitIdentifier(IdentifierTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitIndex(IndexTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitInheritDoc(InheritDocTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitLink(LinkTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitLiteral(LiteralTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitParam(ParamTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitProvides(ProvidesTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitReference(ReferenceTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitReturn(ReturnTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitSee(SeeTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitSerial(SerialTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitSerialData(SerialDataTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitSerialField(SerialFieldTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitSince(SinceTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitStartElement(StartElementTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitSummary(SummaryTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitText(TextTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.DocTreeScanner#visitThrows(ThrowsTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitUnknownBlockTag(UnknownBlockTagTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitUnknownInlineTag(UnknownInlineTagTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitUses(UsesTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitValue(ValueTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitVersion(VersionTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.DocTreeScanner#visitOther(DocTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.JavacTask#instance(ProcessingEnvironment)->JavacTask:::Returns the JavacTask for a ProcessingEnvironment
com.sun.source.util.JavacTask#parse()->Iterable:::Parses the specified files returning a list of abstract syntax trees.
com.sun.source.util.JavacTask#analyze()->Iterable:::Completes all analysis.
com.sun.source.util.JavacTask#generate()->Iterable:::Generates code.
com.sun.source.util.JavacTask#setTaskListener(TaskListener)->void:::Sets a specified listener to receive notification of events describing the progress of this compilation task
com.sun.source.util.JavacTask#addTaskListener(TaskListener)->void:::Adds a specified listener so that it receives notification of events describing the progress of this compilation task
com.sun.source.util.JavacTask#removeTaskListener(TaskListener)->void:::Removes the specified listener so that it no longer receives notification of events describing the progress of this compilation task
com.sun.source.util.JavacTask#getTypeMirror(Iterable)->TypeMirror:::Returns a type mirror of the tree node determined by the specified path
com.sun.source.util.JavacTask#getElements()->Elements:::Returns a utility object for dealing with program elements.
com.sun.source.util.JavacTask#getTypes()->Types:::Returns a utility object for dealing with type mirrors.
com.sun.source.util.Plugin#getName()->String:::Returns the user-friendly name of this plug-in.
com.sun.source.util.Plugin#init(JavacTask, String...)->void:::Initializes the plug-in for a given compilation task.
com.sun.source.util.SimpleDocTreeVisitor#defaultAction(DocTree, P)->R:::The default action, used by all visit methods that are not overridden.
com.sun.source.util.SimpleDocTreeVisitor#visit(DocTree, P)->R:::Invokes the appropriate visit method specific to the type of the node.
com.sun.source.util.SimpleDocTreeVisitor#visit(Iterable, P)->R:::Invokes the appropriate visit method on each of a sequence of nodes.
com.sun.source.util.SimpleDocTreeVisitor#visitAttribute(AttributeTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitAuthor(AuthorTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitComment(CommentTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitDeprecated(DeprecatedTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitDocComment(DocCommentTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitDocRoot(DocRootTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitDocType(DocTypeTree, P)->R::: simple doc tree visitor visit doc type
com.sun.source.util.SimpleDocTreeVisitor#visitEndElement(EndElementTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitEntity(EntityTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitErroneous(ErroneousTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitHidden(HiddenTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitIdentifier(IdentifierTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitIndex(IndexTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitInheritDoc(InheritDocTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitLink(LinkTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitLiteral(LiteralTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitParam(ParamTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitProvides(ProvidesTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitReference(ReferenceTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitReturn(ReturnTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitSee(SeeTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitSerial(SerialTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitSerialData(SerialDataTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitSerialField(SerialFieldTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitSince(SinceTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitStartElement(StartElementTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitSummary(SummaryTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitText(TextTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitThrows(ThrowsTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitUnknownBlockTag(UnknownBlockTagTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitUnknownInlineTag(UnknownInlineTagTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitUses(UsesTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitValue(ValueTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitVersion(VersionTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleDocTreeVisitor#visitOther(DocTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#defaultAction(Tree, P)->R:::The default action, used by all visit methods that are not overridden.
com.sun.source.util.SimpleTreeVisitor#visit(Tree, P)->R:::Invokes the appropriate visit method specific to the type of the node.
com.sun.source.util.SimpleTreeVisitor#visit(Iterable, P)->R:::Invokes the appropriate visit method on each of a sequence of nodes.
com.sun.source.util.SimpleTreeVisitor#visitCompilationUnit(CompilationUnitTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitPackage(PackageTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitImport(ImportTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitClass(ClassTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitMethod(MethodTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitVariable(VariableTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitEmptyStatement(EmptyStatementTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitBlock(BlockTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitDoWhileLoop(DoWhileLoopTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitWhileLoop(WhileLoopTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitForLoop(ForLoopTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitEnhancedForLoop(EnhancedForLoopTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitLabeledStatement(LabeledStatementTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitSwitch(SwitchTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitCase(CaseTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitSynchronized(SynchronizedTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitTry(TryTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitCatch(CatchTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitConditionalExpression(ConditionalExpressionTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitIf(IfTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitExpressionStatement(ExpressionStatementTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitBreak(BreakTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitContinue(ContinueTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitReturn(ReturnTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitThrow(ThrowTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitAssert(AssertTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitMethodInvocation(MethodInvocationTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitNewClass(NewClassTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitNewArray(NewArrayTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitLambdaExpression(LambdaExpressionTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitParenthesized(ParenthesizedTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitAssignment(AssignmentTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitCompoundAssignment(CompoundAssignmentTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitUnary(UnaryTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitBinary(BinaryTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitTypeCast(TypeCastTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitInstanceOf(InstanceOfTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitArrayAccess(ArrayAccessTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitMemberSelect(MemberSelectTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitMemberReference(MemberReferenceTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitIdentifier(IdentifierTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitLiteral(LiteralTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitPrimitiveType(PrimitiveTypeTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitArrayType(ArrayTypeTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitParameterizedType(ParameterizedTypeTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitUnionType(UnionTypeTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitIntersectionType(IntersectionTypeTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitTypeParameter(TypeParameterTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitWildcard(WildcardTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitModifiers(ModifiersTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitAnnotation(AnnotationTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitAnnotatedType(AnnotatedTypeTree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SimpleTreeVisitor#visitModule(ModuleTree, P)->R::: simple tree visitor visit module
com.sun.source.util.SimpleTreeVisitor#visitExports(ExportsTree, P)->R::: simple tree visitor visit exports
com.sun.source.util.SimpleTreeVisitor#visitOpens(OpensTree, P)->R::: simple tree visitor visit opens
com.sun.source.util.SimpleTreeVisitor#visitProvides(ProvidesTree, P)->R::: simple tree visitor visit provides
com.sun.source.util.SimpleTreeVisitor#visitRequires(RequiresTree, P)->R::: simple tree visitor visit requires
com.sun.source.util.SimpleTreeVisitor#visitUses(UsesTree, P)->R::: simple tree visitor visit uses
com.sun.source.util.SimpleTreeVisitor#visitErroneous(ErroneousTree, P)->R::: simple tree visitor visit erroneous
com.sun.source.util.SimpleTreeVisitor#visitOther(Tree, P)->R:::This implementation calls {@code defaultAction.
com.sun.source.util.SourcePositions#getStartPosition(CompilationUnitTree, Tree)->long:::Returns the starting position of tree within file
com.sun.source.util.SourcePositions#getEndPosition(CompilationUnitTree, Tree)->long:::Returns the ending position of tree within file
com.sun.source.util.TaskEvent#getKind()->Kind:::Returns the kind for this event.
com.sun.source.util.TaskEvent#getSourceFile()->JavaFileObject:::Returns the source file for this event
com.sun.source.util.TaskEvent#getCompilationUnit()->CompilationUnitTree:::Returns the compilation unit for this event
com.sun.source.util.TaskEvent#getTypeElement()->TypeElement:::Returns the type element for this event
com.sun.source.util.TaskEvent#toString()->String::: task event to string
com.sun.source.util.TaskListener#started(TaskEvent)->void:::Invoked when an event has begun.
com.sun.source.util.TaskListener#finished(TaskEvent)->void:::Invoked when an event has been completed.
com.sun.source.util.TreePath#getPath(CompilationUnitTree, Tree)->TreePath:::Returns a tree path for a tree node within a compilation unit, or null if the node is not found.
com.sun.source.util.TreePath#getPath(TreePath, Tree)->TreePath:::Returns a tree path for a tree node within a subtree identified by a TreePath object
com.sun.source.util.TreePath#getCompilationUnit()->CompilationUnitTree:::Returns the compilation unit associated with this path.
com.sun.source.util.TreePath#getLeaf()->Tree:::Returns the leaf node for this path.
com.sun.source.util.TreePath#getParentPath()->TreePath:::Returns the path for the enclosing node, or null if there is no enclosing node.
com.sun.source.util.TreePath#iterator()->Iterator::: Iterates from leaves to root.
com.sun.source.util.TreePathScanner#scan(TreePath, P)->R:::Scans a tree from a position identified by a TreePath.
com.sun.source.util.TreePathScanner#scan(Tree, P)->R:::Scans a single node
com.sun.source.util.TreePathScanner#getCurrentPath()->TreePath:::Returns the current path for the node, as built up by the currently active set of scan calls.
com.sun.source.util.Trees#instance(CompilationTask)->Trees:::Returns a Trees object for a given CompilationTask.
com.sun.source.util.Trees#instance(ProcessingEnvironment)->Trees:::Returns a Trees object for a given ProcessingEnvironment.
com.sun.source.util.Trees#getJavacTrees(Class, Object)->Trees::: trees get javac trees
com.sun.source.util.Trees#getSourcePositions()->SourcePositions:::Returns a utility object for obtaining source positions.
com.sun.source.util.Trees#getTree(Element)->Tree:::Returns the Tree node for a given Element
com.sun.source.util.Trees#getTree(TypeElement)->ClassTree:::Returns the ClassTree node for a given TypeElement
com.sun.source.util.Trees#getTree(ExecutableElement)->MethodTree:::Returns the MethodTree node for a given ExecutableElement
com.sun.source.util.Trees#getTree(Element, AnnotationMirror)->Tree:::Returns the Tree node for an AnnotationMirror on a given Element
com.sun.source.util.Trees#getTree(Element, AnnotationMirror, AnnotationValue)->Tree:::Returns the Tree node for an AnnotationValue for an AnnotationMirror on a given Element
com.sun.source.util.Trees#getPath(CompilationUnitTree, Tree)->TreePath:::Returns the path to tree node within the specified compilation unit.
com.sun.source.util.Trees#getPath(Element)->TreePath:::Returns the TreePath node for a given Element
com.sun.source.util.Trees#getPath(Element, AnnotationMirror)->TreePath:::Returns the TreePath node for an AnnotationMirror on a given Element
com.sun.source.util.Trees#getPath(Element, AnnotationMirror, AnnotationValue)->TreePath:::Returns the TreePath node for an AnnotationValue for an AnnotationMirror on a given Element
com.sun.source.util.Trees#getElement(TreePath)->Element:::Returns the Element for the Tree node identified by a given TreePath
com.sun.source.util.Trees#getTypeMirror(TreePath)->TypeMirror:::Returns the TypeMirror for the Tree node identified by a given TreePath
com.sun.source.util.Trees#getScope(TreePath)->Scope:::Returns the Scope for the Tree node identified by a given TreePath
com.sun.source.util.Trees#getDocComment(TreePath)->String:::Returns the doc comment, if any, for the Tree node identified by a given TreePath
com.sun.source.util.Trees#isAccessible(Scope, TypeElement)->boolean:::Checks whether a given type is accessible in a given scope.
com.sun.source.util.Trees#isAccessible(Scope, Element, DeclaredType)->boolean:::Checks whether the given element is accessible as a member of the given type in a given scope.
com.sun.source.util.Trees#getOriginalType(ErrorType)->TypeMirror:::Returns the original type from the ErrorType object.
com.sun.source.util.Trees#printMessage(Diagnostic.Kind, CharSequence, com.sun.source.tree.Tree, com.sun.source.tree.CompilationUnitTree)->void:::Prints a message of the specified kind at the location of the tree within the provided compilation unit
com.sun.source.util.Trees#getLub(CatchTree)->TypeMirror:::Returns the lub of an exception parameter declared in a catch clause.
com.sun.source.util.TreeScanner#scan(Tree, P)->R:::Scans a single node.
com.sun.source.util.TreeScanner#scan(Iterable, P)->R:::Scans a sequence of nodes.
com.sun.source.util.TreeScanner#reduce(R, R)->R:::Reduces two results into a combined result
com.sun.source.util.TreeScanner#visitCompilationUnit(CompilationUnitTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitPackage(PackageTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitImport(ImportTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitClass(ClassTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitMethod(MethodTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitVariable(VariableTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitEmptyStatement(EmptyStatementTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.TreeScanner#visitBlock(BlockTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitDoWhileLoop(DoWhileLoopTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitWhileLoop(WhileLoopTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitForLoop(ForLoopTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitEnhancedForLoop(EnhancedForLoopTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitLabeledStatement(LabeledStatementTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitSwitch(SwitchTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitCase(CaseTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitSynchronized(SynchronizedTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitTry(TryTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitCatch(CatchTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitConditionalExpression(ConditionalExpressionTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitIf(IfTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitExpressionStatement(ExpressionStatementTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitBreak(BreakTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.TreeScanner#visitContinue(ContinueTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.TreeScanner#visitReturn(ReturnTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitThrow(ThrowTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitAssert(AssertTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitMethodInvocation(MethodInvocationTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitNewClass(NewClassTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitNewArray(NewArrayTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitLambdaExpression(LambdaExpressionTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitParenthesized(ParenthesizedTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitAssignment(AssignmentTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitCompoundAssignment(CompoundAssignmentTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitUnary(UnaryTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitBinary(BinaryTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitTypeCast(TypeCastTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitInstanceOf(InstanceOfTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitArrayAccess(ArrayAccessTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitMemberSelect(MemberSelectTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitMemberReference(MemberReferenceTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitIdentifier(IdentifierTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.TreeScanner#visitLiteral(LiteralTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.TreeScanner#visitPrimitiveType(PrimitiveTypeTree, P)->R:::This implementation returns {@code null.
com.sun.source.util.TreeScanner#visitArrayType(ArrayTypeTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitParameterizedType(ParameterizedTypeTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitUnionType(UnionTypeTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitIntersectionType(IntersectionTypeTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitTypeParameter(TypeParameterTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitWildcard(WildcardTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitModifiers(ModifiersTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitAnnotation(AnnotationTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitAnnotatedType(AnnotatedTypeTree, P)->R::: This implementation scans the children in left to right order.
com.sun.source.util.TreeScanner#visitModule(ModuleTree, P)->R::: tree scanner visit module
com.sun.source.util.TreeScanner#visitExports(ExportsTree, P)->R::: tree scanner visit exports
com.sun.source.util.TreeScanner#visitOpens(OpensTree, P)->R::: tree scanner visit opens
com.sun.source.util.TreeScanner#visitProvides(ProvidesTree, P)->R::: tree scanner visit provides
com.sun.source.util.TreeScanner#visitRequires(RequiresTree, P)->R::: tree scanner visit requires
com.sun.source.util.TreeScanner#visitUses(UsesTree, P)->R::: tree scanner visit uses
com.sun.source.util.TreeScanner#visitOther(Tree, P)->R:::This implementation returns {@code null.
com.sun.source.util.TreeScanner#visitErroneous(ErroneousTree, P)->R:::This implementation returns {@code null.

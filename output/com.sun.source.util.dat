DocSourcePositions#getStartPosition(CompilationUnitTree, DocCommentTree, DocTree):::Returns the starting position of the tree within the comment within the file:::
DocSourcePositions#getEndPosition(CompilationUnitTree, DocCommentTree, DocTree):::Returns the ending position of the tree within the comment within the file:::
DocTreeFactory#newAttributeTree(Name, ValueKind, List):::Create a new AttributeTree object, to represent an HTML attribute in an HTML tag.:::
DocTreeFactory#newAuthorTree(List):::Create a new AuthorTree object, to represent an  tag.:::
DocTreeFactory#newCodeTree(TextTree):::Create a new CodeTree object, to represent a  tag.:::
DocTreeFactory#newCommentTree(String):::Create a new CommentTree, to represent an HTML comment.:::
DocTreeFactory#newDeprecatedTree(List):::Create a new DeprecatedTree object, to represent an  tag.:::
DocTreeFactory#newDocCommentTree(List, List):::Create a new DocCommentTree object, to represent a complete doc comment.:::
DocTreeFactory#newDocCommentTree(List, List, List, List):::Create a new DocCommentTree object, to represent the enitire doc comment.:::
DocTreeFactory#newDocRootTree():::Create a new DocRootTree object, to represent an  tag.:::
DocTreeFactory#newDocTypeTree(String):::Create a new DocTypeTree, to represent a DOCTYPE HTML declaration.:::
DocTreeFactory#newEndElementTree(Name):::Create a new EndElement object, to represent the end of an HTML element.:::
DocTreeFactory#newEntityTree(Name):::Create a new EntityTree object, to represent an HTML entity.:::
DocTreeFactory#newErroneousTree(String, Diagnostic):::Create a new ErroneousTree object, to represent some unparseable input.:::
DocTreeFactory#newExceptionTree(ReferenceTree, List):::Create a new ExceptionTree object, to represent an @exception  tag.:::
DocTreeFactory#newHiddenTree(List):::Create a new HiddenTree object, to represent an  tag.:::
DocTreeFactory#newIdentifierTree(Name):::Create a new IdentifierTree object, to represent an identifier, such as in a @param  tag.:::
DocTreeFactory#newIndexTree(DocTree, List):::Create a new IndexTree object, to represent an  tag.:::
DocTreeFactory#newInheritDocTree():::Create a new InheritDocTree object, to represent an  tag.:::
DocTreeFactory#newLinkTree(ReferenceTree, List):::Create a new LinkTree object, to represent a  tag.:::
DocTreeFactory#newLinkPlainTree(ReferenceTree, List):::Create a new LinkPlainTree object, to represent a  tag.:::
DocTreeFactory#newLiteralTree(TextTree):::Create a new LiteralTree object, to represent a  tag.:::
DocTreeFactory#newParamTree(boolean, IdentifierTree, List):::Create a new ParamTree object, to represent a @param  tag.:::
DocTreeFactory#newProvidesTree(ReferenceTree, List):::Create a new ProvidesTree object, to represent a @provides  tag.:::
DocTreeFactory#newReferenceTree(String):::Create a new ReferenceTree object, to represent a reference to an API element.:::
DocTreeFactory#newReturnTree(List):::Create a new ReturnTree object, to represent a @return  tag.:::
DocTreeFactory#newSeeTree(List):::Create a new SeeTree object, to represent a @see  tag.:::
DocTreeFactory#newSerialTree(List):::Create a new SerialTree object, to represent a @serial  tag.:::
DocTreeFactory#newSerialDataTree(List):::Create a new SerialDataTree object, to represent a @serialData  tag.:::
DocTreeFactory#newSerialFieldTree(IdentifierTree, ReferenceTree, List):::Create a new SerialFieldTree object, to represent a @serialField  tag.:::
DocTreeFactory#newSinceTree(List):::Create a new SinceTree object, to represent a @since  tag.:::
DocTreeFactory#newStartElementTree(Name, List, boolean):::Create a new StartElementTree object, to represent the start of an HTML element.:::
DocTreeFactory#newSummaryTree(List):::Create a new SummaryTree object, to represent a @summary  tag.:::throw->new->UnsupportedOperationException
DocTreeFactory#newTextTree(String):::Create a new TextTree object, to represent some plain text.:::
DocTreeFactory#newThrowsTree(ReferenceTree, List):::Create a new ThrowsTree object, to represent a @throws  tag.:::
DocTreeFactory#newUnknownBlockTagTree(Name, List):::Create a new UnknownBlockTagTree object, to represent an unrecognized block tag.:::
DocTreeFactory#newUnknownInlineTagTree(Name, List):::Create a new UnknownInlineTagTree object, to represent an unrecognized inline tag.:::
DocTreeFactory#newUsesTree(ReferenceTree, List):::Create a new UsesTree object, to represent a @uses  tag.:::
DocTreeFactory#newValueTree(ReferenceTree):::Create a new ValueTree object, to represent a  tag.:::
DocTreeFactory#newVersionTree(List):::Create a new VersionTree object, to represent a  tag.:::
DocTreeFactory#at(int):::Set the position to be recorded in subsequent tree nodes created by this factory:::
DocTreeFactory#getFirstSentence(List):::Get the first sentence contained in a list of content:::
DocTreePath#getPath(TreePath, DocCommentTree, DocTree):::Returns a documentation tree path for a tree node within a compilation unit, or null if the node is not found.:::return->new->DocTreePath->getPath
DocTreePath#getPath(DocTreePath, DocTree):::Returns a documentation tree path for a tree node within a subtree identified by a DocTreePath object, or null if the node is not found.:::Objects->requireNonNull->Objects->requireNonNull->if->path->getLeaf->return->try->new->PathFinder->scan->catch->return->finally->return
DocTreePath#getTreePath():::Returns the TreePath associated with this path.:::return
DocTreePath#getDocComment():::Returns the DocCommentTree associated with this path.:::return
DocTreePath#getLeaf():::Returns the leaf node for this path.:::return
DocTreePath#getParentPath():::Returns the path for the enclosing node, or null if there is no enclosing node.:::return
DocTreePathScanner#scan(DocTreePath, P):::Scans a tree from a position identified by a tree path.:::try->return->path->getLeaf->accept->catch->finally
DocTreePathScanner#scan(DocTree, P):::Scans a single node:::if->return->prev->new->DocTreePath->try->return->tree->accept->catch->finally
DocTreePathScanner#getCurrentPath():::Returns the current path for the node, as built up by the currently active set of scan calls.:::return
DocTrees#instance(CompilationTask):::Returns a DocTrees object for a given CompilationTask.:::return->Trees->instance
DocTrees#instance(ProcessingEnvironment):::Returns a DocTrees object for a given ProcessingEnvironment.:::if->env->getClass->getName->equals->throw->new->IllegalArgumentException->return->getJavacTrees
DocTrees#getBreakIterator():::Returns the break iterator used to compute the first sentence of documentation comments:::
DocTrees#getDocCommentTree(TreePath):::Returns the doc comment tree, if any, for the Tree node identified by a given TreePath:::
DocTrees#getDocCommentTree(Element):::Returns the doc comment tree of the given element:::
DocTrees#getDocCommentTree(FileObject):::Returns the doc comment tree of the given file:::
DocTrees#getDocCommentTree(Element, String):::Returns the doc comment tree of the given file whose path is specified relative to the given element:::
DocTrees#getDocTreePath(FileObject, PackageElement):::Returns a doc tree path containing the doc comment tree of the given file:::
DocTrees#getElement(DocTreePath):::Returns the language model element referred to by the leaf node of the given DocTreePath, or null if unknown.:::
DocTrees#getFirstSentence(List):::Returns the list of DocTree representing the first sentence of a comment.:::
DocTrees#getSourcePositions():::Returns a utility object for accessing the source positions of documentation tree nodes.:::
DocTrees#printMessage(Diagnostic.Kind, CharSequence, com.sun.source.doctree.DocTree, com.sun.source.doctree.DocCommentTree, com.sun.source.tree.CompilationUnitTree):::Prints a message of the specified kind at the location of the tree within the provided compilation unit:::
DocTrees#setBreakIterator(BreakIterator):::Sets the break iterator to compute the first sentence of documentation comments.:::
DocTrees#getDocTreeFactory():::Returns a utility object for creating DocTree objects.:::
DocTreeScanner#scan(DocTree, P):::Scans a single node.:::return->node->accept
DocTreeScanner#scan(Iterable, P):::Scans a sequence of nodes.:::r->if->first->foreach->scan->scanAndReduce->return
DocTreeScanner#reduce(R, R):::Reduces two results into a combined result:::return
DocTreeScanner#visitAttribute(AttributeTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitAuthor(AuthorTree, P)::: This implementation scans the children in left to right order.:::return->node->getName->scan
DocTreeScanner#visitComment(CommentTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitDeprecated(DeprecatedTree, P)::: This implementation scans the children in left to right order.:::return->node->getBody->scan
DocTreeScanner#visitDocComment(DocCommentTree, P)::: This implementation scans the children in left to right order.:::r->node->getFirstSentence->scan->node->getBody->scanAndReduce->node->getBlockTags->scanAndReduce->return
DocTreeScanner#visitDocRoot(DocRootTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitDocType(DocTypeTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitEndElement(EndElementTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitEntity(EntityTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitErroneous(ErroneousTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitHidden(HiddenTree, P)::: This implementation scans the children in left to right order.:::return->node->getBody->scan
DocTreeScanner#visitIdentifier(IdentifierTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitIndex(IndexTree, P):::This implementation returns {@code null.:::r->node->getSearchTerm->scan->node->getDescription->scanAndReduce->return
DocTreeScanner#visitInheritDoc(InheritDocTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitLink(LinkTree, P)::: This implementation scans the children in left to right order.:::r->node->getReference->scan->node->getLabel->scanAndReduce->return
DocTreeScanner#visitLiteral(LiteralTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitParam(ParamTree, P)::: This implementation scans the children in left to right order.:::r->node->getName->scan->node->getDescription->scanAndReduce->return
DocTreeScanner#visitProvides(ProvidesTree, P)::: This implementation scans the children in left to right order.:::r->node->getServiceType->scan->node->getDescription->scanAndReduce->return
DocTreeScanner#visitReference(ReferenceTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitReturn(ReturnTree, P)::: This implementation scans the children in left to right order.:::return->node->getDescription->scan
DocTreeScanner#visitSee(SeeTree, P)::: This implementation scans the children in left to right order.:::return->node->getReference->scan
DocTreeScanner#visitSerial(SerialTree, P)::: This implementation scans the children in left to right order.:::return->node->getDescription->scan
DocTreeScanner#visitSerialData(SerialDataTree, P)::: This implementation scans the children in left to right order.:::return->node->getDescription->scan
DocTreeScanner#visitSerialField(SerialFieldTree, P)::: This implementation scans the children in left to right order.:::r->node->getName->scan->node->getType->scanAndReduce->node->getDescription->scanAndReduce->return
DocTreeScanner#visitSince(SinceTree, P)::: This implementation scans the children in left to right order.:::return->node->getBody->scan
DocTreeScanner#visitStartElement(StartElementTree, P)::: This implementation scans the children in left to right order.:::return->node->getAttributes->scan
DocTreeScanner#visitSummary(SummaryTree, P)::: This implementation scans the children in left to right order.:::r->node->getSummary->scan->return
DocTreeScanner#visitText(TextTree, P):::This implementation returns {@code null.:::return
DocTreeScanner#visitThrows(ThrowsTree, P)::: This implementation scans the children in left to right order.:::r->node->getExceptionName->scan->node->getDescription->scanAndReduce->return
DocTreeScanner#visitUnknownBlockTag(UnknownBlockTagTree, P)::: This implementation scans the children in left to right order.:::return->node->getContent->scan
DocTreeScanner#visitUnknownInlineTag(UnknownInlineTagTree, P)::: This implementation scans the children in left to right order.:::return->node->getContent->scan
DocTreeScanner#visitUses(UsesTree, P)::: This implementation scans the children in left to right order.:::r->node->getServiceType->scan->node->getDescription->scanAndReduce->return
DocTreeScanner#visitValue(ValueTree, P)::: This implementation scans the children in left to right order.:::return->node->getReference->scan
DocTreeScanner#visitVersion(VersionTree, P)::: This implementation scans the children in left to right order.:::return->node->getBody->scan
DocTreeScanner#visitOther(DocTree, P):::This implementation returns {@code null.:::return
JavacTask#instance(ProcessingEnvironment):::Returns the JavacTask for a ProcessingEnvironment:::if->processingEnvironment->getClass->getName->equals->throw->new->IllegalArgumentException->c->getContext->t->c->get->return->new->BasicJavacTask
JavacTask#parse():::Parses the specified files returning a list of abstract syntax trees.:::
JavacTask#analyze():::Completes all analysis.:::
JavacTask#generate():::Generates code.:::
JavacTask#setTaskListener(TaskListener):::Sets a specified listener to receive notification of events describing the progress of this compilation task:::
JavacTask#addTaskListener(TaskListener):::Adds a specified listener so that it receives notification of events describing the progress of this compilation task:::
JavacTask#removeTaskListener(TaskListener):::Removes the specified listener so that it no longer receives notification of events describing the progress of this compilation task:::
JavacTask#getTypeMirror(Iterable):::Returns a type mirror of the tree node determined by the specified path:::
JavacTask#getElements():::Returns a utility object for dealing with program elements.:::
JavacTask#getTypes():::Returns a utility object for dealing with type mirrors.:::
Plugin#getName():::Returns the user-friendly name of this plug-in.:::
Plugin#init(JavacTask, String...):::Initializes the plug-in for a given compilation task.:::
SimpleDocTreeVisitor#defaultAction(DocTree, P):::The default action, used by all visit methods that are not overridden.:::return
SimpleDocTreeVisitor#visit(DocTree, P):::Invokes the appropriate visit method specific to the type of the node.:::return->node->accept
SimpleDocTreeVisitor#visit(Iterable, P):::Invokes the appropriate visit method on each of a sequence of nodes.:::r->if->foreach->visit->return
SimpleDocTreeVisitor#visitAttribute(AttributeTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitAuthor(AuthorTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitComment(CommentTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitDeprecated(DeprecatedTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitDocComment(DocCommentTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitDocRoot(DocRootTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitEndElement(EndElementTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitEntity(EntityTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitErroneous(ErroneousTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitHidden(HiddenTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitIdentifier(IdentifierTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitIndex(IndexTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitInheritDoc(InheritDocTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitLink(LinkTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitLiteral(LiteralTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitParam(ParamTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitProvides(ProvidesTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitReference(ReferenceTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitReturn(ReturnTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitSee(SeeTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitSerial(SerialTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitSerialData(SerialDataTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitSerialField(SerialFieldTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitSince(SinceTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitStartElement(StartElementTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitSummary(SummaryTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitText(TextTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitThrows(ThrowsTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitUnknownBlockTag(UnknownBlockTagTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitUnknownInlineTag(UnknownInlineTagTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitUses(UsesTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitValue(ValueTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitVersion(VersionTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleDocTreeVisitor#visitOther(DocTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#defaultAction(Tree, P):::The default action, used by all visit methods that are not overridden.:::return
SimpleTreeVisitor#visit(Tree, P):::Invokes the appropriate visit method specific to the type of the node.:::return->node->accept
SimpleTreeVisitor#visit(Iterable, P):::Invokes the appropriate visit method on each of a sequence of nodes.:::r->if->foreach->visit->return
SimpleTreeVisitor#visitCompilationUnit(CompilationUnitTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitPackage(PackageTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitImport(ImportTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitClass(ClassTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitMethod(MethodTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitVariable(VariableTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitEmptyStatement(EmptyStatementTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitBlock(BlockTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitDoWhileLoop(DoWhileLoopTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitWhileLoop(WhileLoopTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitForLoop(ForLoopTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitEnhancedForLoop(EnhancedForLoopTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitLabeledStatement(LabeledStatementTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitSwitch(SwitchTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitCase(CaseTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitSynchronized(SynchronizedTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitTry(TryTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitCatch(CatchTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitConditionalExpression(ConditionalExpressionTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitIf(IfTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitExpressionStatement(ExpressionStatementTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitBreak(BreakTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitContinue(ContinueTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitReturn(ReturnTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitThrow(ThrowTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitAssert(AssertTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitMethodInvocation(MethodInvocationTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitNewClass(NewClassTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitNewArray(NewArrayTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitLambdaExpression(LambdaExpressionTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitParenthesized(ParenthesizedTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitAssignment(AssignmentTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitCompoundAssignment(CompoundAssignmentTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitUnary(UnaryTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitBinary(BinaryTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitTypeCast(TypeCastTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitInstanceOf(InstanceOfTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitArrayAccess(ArrayAccessTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitMemberSelect(MemberSelectTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitMemberReference(MemberReferenceTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitIdentifier(IdentifierTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitLiteral(LiteralTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitPrimitiveType(PrimitiveTypeTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitArrayType(ArrayTypeTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitParameterizedType(ParameterizedTypeTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitUnionType(UnionTypeTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitIntersectionType(IntersectionTypeTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitTypeParameter(TypeParameterTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitWildcard(WildcardTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitModifiers(ModifiersTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitAnnotation(AnnotationTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitAnnotatedType(AnnotatedTypeTree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SimpleTreeVisitor#visitOther(Tree, P):::This implementation calls {@code defaultAction.:::return->defaultAction
SourcePositions#getStartPosition(CompilationUnitTree, Tree):::Returns the starting position of tree within file:::
SourcePositions#getEndPosition(CompilationUnitTree, Tree):::Returns the ending position of tree within file:::
TaskEvent#getKind():::Returns the kind for this event.:::return
TaskEvent#getSourceFile():::Returns the source file for this event:::return
TaskEvent#getCompilationUnit():::Returns the compilation unit for this event:::return
TaskEvent#getTypeElement():::Returns the type element for this event:::return
TaskListener#started(TaskEvent):::Invoked when an event has begun.:::
TaskListener#finished(TaskEvent):::Invoked when an event has been completed.:::
TreePath#getPath(CompilationUnitTree, Tree):::Returns a tree path for a tree node within a compilation unit, or null if the node is not found.:::return->new->TreePath->getPath
TreePath#getPath(TreePath, Tree):::Returns a tree path for a tree node within a subtree identified by a TreePath object:::Objects->requireNonNull->Objects->requireNonNull->if->path->getLeaf->return->try->new->PathFinder->scan->catch->return->finally->return
TreePath#getCompilationUnit():::Returns the compilation unit associated with this path.:::return
TreePath#getLeaf():::Returns the leaf node for this path.:::return
TreePath#getParentPath():::Returns the path for the enclosing node, or null if there is no enclosing node.:::return
TreePath#iterator()::: Iterates from leaves to root.:::return->new->Iterator<Tree>
TreePathScanner#scan(TreePath, P):::Scans a tree from a position identified by a TreePath.:::try->return->path->getLeaf->accept->catch->finally
TreePathScanner#scan(Tree, P):::Scans a single node:::if->return->prev->new->TreePath->try->return->tree->accept->catch->finally
TreePathScanner#getCurrentPath():::Returns the current path for the node, as built up by the currently active set of scan calls.:::return
Trees#instance(CompilationTask):::Returns a Trees object for a given CompilationTask.:::taskClassName->task->getClass->getName->if->taskClassName->equals->taskClassName->equals->throw->new->IllegalArgumentException->return->getJavacTrees
Trees#instance(ProcessingEnvironment):::Returns a Trees object for a given ProcessingEnvironment.:::if->env->getClass->getName->equals->throw->new->IllegalArgumentException->return->getJavacTrees
Trees#getSourcePositions():::Returns a utility object for obtaining source positions.:::
Trees#getTree(Element):::Returns the Tree node for a given Element:::
Trees#getTree(TypeElement):::Returns the ClassTree node for a given TypeElement:::
Trees#getTree(ExecutableElement):::Returns the MethodTree node for a given ExecutableElement:::
Trees#getTree(Element, AnnotationMirror):::Returns the Tree node for an AnnotationMirror on a given Element:::
Trees#getTree(Element, AnnotationMirror, AnnotationValue):::Returns the Tree node for an AnnotationValue for an AnnotationMirror on a given Element:::
Trees#getPath(CompilationUnitTree, Tree):::Returns the path to tree node within the specified compilation unit.:::
Trees#getPath(Element):::Returns the TreePath node for a given Element:::
Trees#getPath(Element, AnnotationMirror):::Returns the TreePath node for an AnnotationMirror on a given Element:::
Trees#getPath(Element, AnnotationMirror, AnnotationValue):::Returns the TreePath node for an AnnotationValue for an AnnotationMirror on a given Element:::
Trees#getElement(TreePath):::Returns the Element for the Tree node identified by a given TreePath:::
Trees#getTypeMirror(TreePath):::Returns the TypeMirror for the Tree node identified by a given TreePath:::
Trees#getScope(TreePath):::Returns the Scope for the Tree node identified by a given TreePath:::
Trees#getDocComment(TreePath):::Returns the doc comment, if any, for the Tree node identified by a given TreePath:::
Trees#isAccessible(Scope, TypeElement):::Checks whether a given type is accessible in a given scope.:::
Trees#isAccessible(Scope, Element, DeclaredType):::Checks whether the given element is accessible as a member of the given type in a given scope.:::
Trees#getOriginalType(ErrorType):::Returns the original type from the ErrorType object.:::
Trees#printMessage(Diagnostic.Kind, CharSequence, com.sun.source.tree.Tree, com.sun.source.tree.CompilationUnitTree):::Prints a message of the specified kind at the location of the tree within the provided compilation unit:::
Trees#getLub(CatchTree):::Returns the lub of an exception parameter declared in a catch clause.:::
TreeScanner#scan(Tree, P):::Scans a single node.:::return->tree->accept
TreeScanner#scan(Iterable, P):::Scans a sequence of nodes.:::r->if->first->foreach->scan->scanAndReduce->return
TreeScanner#reduce(R, R):::Reduces two results into a combined result:::return
TreeScanner#visitCompilationUnit(CompilationUnitTree, P)::: This implementation scans the children in left to right order.:::r->node->getPackage->scan->node->getImports->scanAndReduce->node->getTypeDecls->scanAndReduce->return
TreeScanner#visitPackage(PackageTree, P)::: This implementation scans the children in left to right order.:::r->node->getAnnotations->scan->node->getPackageName->scanAndReduce->return
TreeScanner#visitImport(ImportTree, P)::: This implementation scans the children in left to right order.:::return->node->getQualifiedIdentifier->scan
TreeScanner#visitClass(ClassTree, P)::: This implementation scans the children in left to right order.:::r->node->getModifiers->scan->node->getTypeParameters->scanAndReduce->node->getExtendsClause->scanAndReduce->node->getImplementsClause->scanAndReduce->node->getMembers->scanAndReduce->return
TreeScanner#visitMethod(MethodTree, P)::: This implementation scans the children in left to right order.:::r->node->getModifiers->scan->node->getReturnType->scanAndReduce->node->getTypeParameters->scanAndReduce->node->getParameters->scanAndReduce->node->getReceiverParameter->scanAndReduce->node->getThrows->scanAndReduce->node->getBody->scanAndReduce->node->getDefaultValue->scanAndReduce->return
TreeScanner#visitVariable(VariableTree, P)::: This implementation scans the children in left to right order.:::r->node->getModifiers->scan->node->getType->scanAndReduce->node->getNameExpression->scanAndReduce->node->getInitializer->scanAndReduce->return
TreeScanner#visitEmptyStatement(EmptyStatementTree, P):::This implementation returns {@code null.:::return
TreeScanner#visitBlock(BlockTree, P)::: This implementation scans the children in left to right order.:::return->node->getStatements->scan
TreeScanner#visitDoWhileLoop(DoWhileLoopTree, P)::: This implementation scans the children in left to right order.:::r->node->getStatement->scan->node->getCondition->scanAndReduce->return
TreeScanner#visitWhileLoop(WhileLoopTree, P)::: This implementation scans the children in left to right order.:::r->node->getCondition->scan->node->getStatement->scanAndReduce->return
TreeScanner#visitForLoop(ForLoopTree, P)::: This implementation scans the children in left to right order.:::r->node->getInitializer->scan->node->getCondition->scanAndReduce->node->getUpdate->scanAndReduce->node->getStatement->scanAndReduce->return
TreeScanner#visitEnhancedForLoop(EnhancedForLoopTree, P)::: This implementation scans the children in left to right order.:::r->node->getVariable->scan->node->getExpression->scanAndReduce->node->getStatement->scanAndReduce->return
TreeScanner#visitLabeledStatement(LabeledStatementTree, P)::: This implementation scans the children in left to right order.:::return->node->getStatement->scan
TreeScanner#visitSwitch(SwitchTree, P)::: This implementation scans the children in left to right order.:::r->node->getExpression->scan->node->getCases->scanAndReduce->return
TreeScanner#visitCase(CaseTree, P)::: This implementation scans the children in left to right order.:::r->node->getExpression->scan->node->getStatements->scanAndReduce->return
TreeScanner#visitSynchronized(SynchronizedTree, P)::: This implementation scans the children in left to right order.:::r->node->getExpression->scan->node->getBlock->scanAndReduce->return
TreeScanner#visitTry(TryTree, P)::: This implementation scans the children in left to right order.:::r->node->getResources->scan->node->getBlock->scanAndReduce->node->getCatches->scanAndReduce->node->getFinallyBlock->scanAndReduce->return
TreeScanner#visitCatch(CatchTree, P)::: This implementation scans the children in left to right order.:::r->node->getParameter->scan->node->getBlock->scanAndReduce->return
TreeScanner#visitConditionalExpression(ConditionalExpressionTree, P)::: This implementation scans the children in left to right order.:::r->node->getCondition->scan->node->getTrueExpression->scanAndReduce->node->getFalseExpression->scanAndReduce->return
TreeScanner#visitIf(IfTree, P)::: This implementation scans the children in left to right order.:::r->node->getCondition->scan->node->getThenStatement->scanAndReduce->node->getElseStatement->scanAndReduce->return
TreeScanner#visitExpressionStatement(ExpressionStatementTree, P)::: This implementation scans the children in left to right order.:::return->node->getExpression->scan
TreeScanner#visitBreak(BreakTree, P):::This implementation returns {@code null.:::return
TreeScanner#visitContinue(ContinueTree, P):::This implementation returns {@code null.:::return
TreeScanner#visitReturn(ReturnTree, P)::: This implementation scans the children in left to right order.:::return->node->getExpression->scan
TreeScanner#visitThrow(ThrowTree, P)::: This implementation scans the children in left to right order.:::return->node->getExpression->scan
TreeScanner#visitAssert(AssertTree, P)::: This implementation scans the children in left to right order.:::r->node->getCondition->scan->node->getDetail->scanAndReduce->return
TreeScanner#visitMethodInvocation(MethodInvocationTree, P)::: This implementation scans the children in left to right order.:::r->node->getTypeArguments->scan->node->getMethodSelect->scanAndReduce->node->getArguments->scanAndReduce->return
TreeScanner#visitNewClass(NewClassTree, P)::: This implementation scans the children in left to right order.:::r->node->getEnclosingExpression->scan->node->getIdentifier->scanAndReduce->node->getTypeArguments->scanAndReduce->node->getArguments->scanAndReduce->node->getClassBody->scanAndReduce->return
TreeScanner#visitNewArray(NewArrayTree, P)::: This implementation scans the children in left to right order.:::r->node->getType->scan->node->getDimensions->scanAndReduce->node->getInitializers->scanAndReduce->node->getAnnotations->scanAndReduce->foreach->node->getDimAnnotations->scanAndReduce->return
TreeScanner#visitLambdaExpression(LambdaExpressionTree, P)::: This implementation scans the children in left to right order.:::r->node->getParameters->scan->node->getBody->scanAndReduce->return
TreeScanner#visitParenthesized(ParenthesizedTree, P)::: This implementation scans the children in left to right order.:::return->node->getExpression->scan
TreeScanner#visitAssignment(AssignmentTree, P)::: This implementation scans the children in left to right order.:::r->node->getVariable->scan->node->getExpression->scanAndReduce->return
TreeScanner#visitCompoundAssignment(CompoundAssignmentTree, P)::: This implementation scans the children in left to right order.:::r->node->getVariable->scan->node->getExpression->scanAndReduce->return
TreeScanner#visitUnary(UnaryTree, P)::: This implementation scans the children in left to right order.:::return->node->getExpression->scan
TreeScanner#visitBinary(BinaryTree, P)::: This implementation scans the children in left to right order.:::r->node->getLeftOperand->scan->node->getRightOperand->scanAndReduce->return
TreeScanner#visitTypeCast(TypeCastTree, P)::: This implementation scans the children in left to right order.:::r->node->getType->scan->node->getExpression->scanAndReduce->return
TreeScanner#visitInstanceOf(InstanceOfTree, P)::: This implementation scans the children in left to right order.:::r->node->getExpression->scan->node->getType->scanAndReduce->return
TreeScanner#visitArrayAccess(ArrayAccessTree, P)::: This implementation scans the children in left to right order.:::r->node->getExpression->scan->node->getIndex->scanAndReduce->return
TreeScanner#visitMemberSelect(MemberSelectTree, P)::: This implementation scans the children in left to right order.:::return->node->getExpression->scan
TreeScanner#visitMemberReference(MemberReferenceTree, P)::: This implementation scans the children in left to right order.:::r->node->getQualifierExpression->scan->node->getTypeArguments->scanAndReduce->return
TreeScanner#visitIdentifier(IdentifierTree, P):::This implementation returns {@code null.:::return
TreeScanner#visitLiteral(LiteralTree, P):::This implementation returns {@code null.:::return
TreeScanner#visitPrimitiveType(PrimitiveTypeTree, P):::This implementation returns {@code null.:::return
TreeScanner#visitArrayType(ArrayTypeTree, P)::: This implementation scans the children in left to right order.:::return->node->getType->scan
TreeScanner#visitParameterizedType(ParameterizedTypeTree, P)::: This implementation scans the children in left to right order.:::r->node->getType->scan->node->getTypeArguments->scanAndReduce->return
TreeScanner#visitUnionType(UnionTypeTree, P)::: This implementation scans the children in left to right order.:::return->node->getTypeAlternatives->scan
TreeScanner#visitIntersectionType(IntersectionTypeTree, P)::: This implementation scans the children in left to right order.:::return->node->getBounds->scan
TreeScanner#visitTypeParameter(TypeParameterTree, P)::: This implementation scans the children in left to right order.:::r->node->getAnnotations->scan->node->getBounds->scanAndReduce->return
TreeScanner#visitWildcard(WildcardTree, P)::: This implementation scans the children in left to right order.:::return->node->getBound->scan
TreeScanner#visitModifiers(ModifiersTree, P)::: This implementation scans the children in left to right order.:::return->node->getAnnotations->scan
TreeScanner#visitAnnotation(AnnotationTree, P)::: This implementation scans the children in left to right order.:::r->node->getAnnotationType->scan->node->getArguments->scanAndReduce->return
TreeScanner#visitAnnotatedType(AnnotatedTypeTree, P)::: This implementation scans the children in left to right order.:::r->node->getAnnotations->scan->node->getUnderlyingType->scanAndReduce->return
TreeScanner#visitOther(Tree, P):::This implementation returns {@code null.:::return
TreeScanner#visitErroneous(ErroneousTree, P):::This implementation returns {@code null.:::return

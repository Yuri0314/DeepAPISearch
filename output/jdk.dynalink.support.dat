AbstractRelinkableCallSite#getDescriptor()::: abstract relinkable call site get descriptor:::return
AbstractRelinkableCallSite#initialize(MethodHandle)::: abstract relinkable call site initialize:::setTarget
ChainedCallSite#getMaxChainLength():::The maximum number of method handles in the chain:::return
ChainedCallSite#relink(GuardedInvocation, MethodHandle)::: chained call site relink:::relinkInternal
ChainedCallSite#resetAndRelink(GuardedInvocation, MethodHandle)::: chained call site reset and relink:::relinkInternal
ChainedCallSite#relinkInternal(GuardedInvocation, MethodHandle, boolean, boolean)::: chained call site relink internal:::currentInvocations->newInvocations->if->new->LinkedList<>->else->if->new->LinkedList<>->newInvocations->add->else->if->Arrays->asList->new->LinkedList<>->else->throw->new->AssertionError->for->it->newInvocations->iterator->it->hasNext->if->if->newInvocations->size->getMaxChainLength->checkMaxChainLength->newInvocations->removeFirst->newInvocations->addLast->pruneAndInvokeSwitchPoints->makePruneAndInvokeMethod->pruneAndInvokeCatches->makePruneAndInvokeMethod->target->foreach->inv->compose->switch->newInvocations->size->break->newInvocations->getFirst->break->newInvocations->new->GuardedInvocationArr->toArray->setTarget->return
ChainedCallSite#checkMaxChainLength(int)::: chained call site check max chain length:::if->return->throw->new->RuntimeException
ChainedCallSite#makePruneAndInvokeMethod(MethodHandle, MethodHandle):::Creates a method that rebuilds our call chain, pruning it of any invalidated switchpoints, and then invokes that chain.:::boundPrune->MethodHandles->insertArguments->ignoreArgsPrune->MethodHandles->type->parameterList->dropArguments->return->MethodHandles->MethodHandles->type->exactInvoker->foldArguments
ChainedCallSite#prune(MethodHandle, boolean)::: chained call site prune:::return->relinkInternal
SimpleRelinkableCallSite#relink(GuardedInvocation, MethodHandle)::: simple relinkable call site relink:::guardedInvocation->compose->setTarget
SimpleRelinkableCallSite#resetAndRelink(GuardedInvocation, MethodHandle)::: simple relinkable call site reset and relink:::relink

PerfDataBuffer#buildMonitorMap(Map)::: perf data buffer build monitor map:::buffer->rewind->buildPseudoMonitors->synchWithTarget->prologue->getEntryOffset->numEntries->prologue->getNumEntries->monitor->getNextMonitorEntry->while->map->monitor->getName->put->getNextMonitorEntry->map->values->new->ArrayList<Monitor>
PerfDataBuffer#getNewMonitors(Map)::: perf data buffer get new monitors:::numEntries->prologue->getNumEntries->if->monitor->getNextMonitorEntry->while->name->monitor->getName->if->map->containsKey->map->put->if->insertedMonitors->add->getNextMonitorEntry
PerfDataBuffer#getMonitorStatus(Map)::: perf data buffer get monitor status:::getNewMonitors->removed->inserted->new->ArrayList<>->return->new->MonitorStatus
PerfDataBuffer#buildPseudoMonitors(Map):::Build the pseudo monitors used to map the prolog data into counters.:::monitor->name->ib->prologue->majorVersionBuffer->new->PerfIntegerMonitor->map->put->prologue->minorVersionBuffer->new->PerfIntegerMonitor->map->put->prologue->sizeBuffer->new->PerfIntegerMonitor->map->put->prologue->usedBuffer->new->PerfIntegerMonitor->map->put->prologue->overflowBuffer->new->PerfIntegerMonitor->map->put->lb->prologue->modificationTimeStampBuffer->new->PerfLongMonitor->map->put
PerfDataBuffer#synchWithTarget():::Method that waits until the target jvm indicates that its shared memory is safe to access.:::timeLimit->System->currentTimeMillis->while->prologue->isAccessible->try->Thread->sleep->catch->finally->if->System->currentTimeMillis->throw->new->MonitorException
PerfDataBuffer#getNextMonitorEntry():::method to extract the next monitor entry from the instrumentation memory:::monitor->if->throw->Integer->toHexString->new->MonitorStructureException->if->buffer->limit->throw->Integer->toHexString->Integer->buffer->limit->toHexString->new->MonitorStructureException->if->buffer->limit->return->buffer->position->entryStart->buffer->position->entryLength->buffer->getInt->if->buffer->limit->throw->Integer->toHexString->new->MonitorStructureException->if->buffer->limit->throw->Integer->toHexString->Integer->toHexString->Integer->buffer->limit->toHexString->new->MonitorStructureException->if->return->nameOffset->buffer->getInt->vectorLength->buffer->getInt->typeCodeByte->buffer->get->flags->buffer->get->unitsByte->buffer->get->varByte->buffer->get->dataOffset->buffer->getInt->units->Units->toUnits->variability->Variability->toVariability->typeCode->supported->try->TypeCode->toTypeCode->catch->throw->Integer->toHexString->Integer->toHexString->new->MonitorStructureException->finally->if->throw->Integer->toHexString->Integer->toHexString->new->MonitorStructureException->if->throw->Integer->toHexString->Integer->toHexString->new->MonitorStructureException->if->throw->Integer->toHexString->Integer->toHexString->new->MonitorDataException->if->throw->Integer->toHexString->Integer->toHexString->new->MonitorDataException->maxNameLength->nameBytes->new->byteArr->nameLength->b->while->buffer->get->name->new->String->dataSize->buffer->position->if->if->lb->buffer->asLongBuffer->lb->limit->new->PerfLongMonitor->else->throw->Integer->toHexString->Integer->toHexString->new->MonitorTypeException->else->if->if->throw->Integer->toHexString->Integer->toHexString->Integer->toHexString->new->MonitorTypeException->bb->buffer->slice->bb->limit->if->new->PerfStringConstantMonitor->else->if->new->PerfStringVariableMonitor->else->if->throw->Integer->toHexString->Integer->toHexString->new->MonitorDataException->else->else->throw->Integer->toHexString->Integer->toHexString->new->MonitorTypeException->return
PerfDataBufferPrologue#supportsAccessible()::: perf data buffer prologue supports accessible:::return
PerfDataBufferPrologue#isAccessible()::: perf data buffer prologue is accessible:::byteBuffer->position->value->byteBuffer->get->return
PerfDataBufferPrologue#getUsed():::Get the utilization of the instrumentation memory buffer.:::byteBuffer->position->return->byteBuffer->getInt
PerfDataBufferPrologue#getBufferSize():::Get the size of the instrumentation memory buffer.:::return->byteBuffer->capacity
PerfDataBufferPrologue#getOverflow():::Get the buffer overflow amount:::byteBuffer->position->return->byteBuffer->getInt
PerfDataBufferPrologue#getModificationTimeStamp():::Get the time of last modification for the instrumentation memory buffer:::byteBuffer->position->return->byteBuffer->getLong
PerfDataBufferPrologue#getEntryOffset():::Get the offset of the first PerfDataEntry.:::byteBuffer->position->return->byteBuffer->getInt
PerfDataBufferPrologue#getNumEntries():::Get the offset of the first PerfDataEntry.:::byteBuffer->position->return->byteBuffer->getInt
PerfDataBufferPrologue#getSize()::: perf data buffer prologue get size:::return
PerfDataBufferPrologue#usedBuffer():::Return an IntBuffer that accesses the used value:::byteBuffer->position->ib->byteBuffer->asIntBuffer->ib->limit->return
PerfDataBufferPrologue#sizeBuffer():::Return an IntBuffer that accesses the size value:::ib->IntBuffer->allocate->ib->byteBuffer->capacity->put->return
PerfDataBufferPrologue#overflowBuffer():::Return an IntBuffer that accesses the overflow value:::byteBuffer->position->ib->byteBuffer->asIntBuffer->ib->limit->return
PerfDataBufferPrologue#modificationTimeStampBuffer():::Return a LongBuffer that accesses the modification timestamp value:::byteBuffer->position->lb->byteBuffer->asLongBuffer->lb->limit->return
PerfDataBufferPrologue#numEntriesBuffer():::Return an IntBuffer that accesses the number of entries value:::byteBuffer->position->ib->byteBuffer->asIntBuffer->ib->limit->return
TypeCode#toString():::Convert enumeration value to a String.:::return
TypeCode#toChar():::Convert enumeration to its character representation.:::return
TypeCode#toTypeCode(char):::Map a character value to its corresponding TypeCode object.:::for->j->throw->new->IllegalArgumentException
TypeCode#toTypeCode(byte):::Map a character value to its corresponding TypeCode object.:::return->toTypeCode

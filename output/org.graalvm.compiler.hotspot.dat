BootstrapWatchDog#maybeCreate(HotSpotGraalRuntimeProvider):::Creates and returns a BootstrapWatchDog if Options#BootstrapWatchDogCriticalRateRatio is not set to 0 otherwise returns null.:::options->graalRuntime->getOptions->timeout->getValue->maxRateDecrease->getValue->return->new->BootstrapWatchDog
BootstrapWatchDog#hitCriticalCompilationRateOrTimeout():::Queries whether a critically low compilation rate or #timeout occurred.:::return
BootstrapWatchDog#watch(CompilationRequest):::Opens a scope for watching the compilation of a given method.:::watch->requestForThread->get->if->new->Watch->synchronized->requests->Thread->currentThread->put->watch->open->return
CompilationCounters#countCompilation(ResolvedJavaMethod):::Counts the number of compilations for the ResolvedJavaMethod of the CompilationRequest:::val->counters->get->counters->put->if->getValue->TTY->fmt->getValue->printf->TTY->println->sortedCounters->new->CounterComparator->new->TreeSet<>->foreach->counters->entrySet->sortedCounters->add->foreach->if->entry->getValue->getValue->entry->getValue->entry->getKey->str->printf->TTY->flush->HotSpotGraalServices->exit
CompilationTask#getId():::Returns the HotSpot id of this compilation.:::return->getRequest->getId
CompilationWatchDog#watch(ResolvedJavaMethod, int, OptionValues):::Opens a scope for watching the compilation of a given method.:::startDelayMilliseconds->getValue->ms->if->watchDog->WATCH_DOGS->get->if->currentThread->Thread->currentThread->stackTraceIntervalMilliseconds->getValue->ms->nonFatalIdenticalCompilationSnapshots->getValue->new->CompilationWatchDog->WATCH_DOGS->set->thread->new->GraalServiceThread->thread->thread->getId->watchDog->toString->setName->thread->setPriority->thread->setDaemon->thread->start->watchDog->startCompilation->return->return
CompilerConfigurationFactory#createBackendMap():::Collect the set of available HotSpotBackendFactory backends for this compiler configuration.:::return->new->DefaultBackendMap
CompilerConfigurationFactory#getName():::Returns a name that should uniquely identify this compiler configuration.:::return
CompilerConfigurationFactory#selectFactory(String, OptionValues):::Selects and instantiates a CompilerConfigurationFactory:::factory->try->t->timer->value->getValue->if->equals->println->foreach->getAllCandidates->println->HotSpotGraalServices->exit->else->if->foreach->GraalServices->load->if->equals->break->if->throw->getAllCandidates->stream->map->Collectors->joining->collect->new->GraalError->else->candidates->getAllCandidates->if->candidates->isEmpty->throw->getName->new->GraalError->candidates->get->catch->finally->level->getValue->if->switch->printConfigInfo->break->printConfigInfo->config->factory->createCompilerConfiguration->TTY->config->createHighTier->phaseNames->println->TTY->config->createMidTier->phaseNames->println->TTY->config->createLowTier->phaseNames->println->TTY->config->createPreAllocationOptimizationStage->phaseNames->println->TTY->config->createAllocationStage->phaseNames->println->TTY->config->createPostAllocationOptimizationStage->phaseNames->println->config->createAllocationStage->break->return
GraalHotSpotVMConfig#layoutHelperElementTypePrimitiveInPlace():::This filters out the bit that differentiates a type array from an object array.:::return
GraalHotSpotVMConfig#arrayOopDescLengthOffset():::The offset of the array length word in an array object's header:::return
GraalHotSpotVMConfig#arrayPrototypeMarkWord():::See markOopDesc::prototype().:::return
GraalHotSpotVMConfig#tlabIntArrayMarkWord():::See markOopDesc::copy_set_hash().:::tmp->arrayPrototypeMarkWord->return
HotSpotBackend#completeInitialization(HotSpotJVMCIRuntime, OptionValues):::Performs any remaining initialization that was deferred until the #getRuntime() runtime object was initialized and this backend was registered with it.:::
HotSpotBackend#gatherDestroyedCallerRegisters(LIR):::Finds all the registers that are defined by some given LIR.:::destroyedRegisters->EconomicSet->create->defConsumer->new->ValueConsumer->foreach->lir->codeEmittingOrder->if->continue->foreach->lir->getLIRforBlock->if->else->op->visitEachTemp->op->visitEachOutput->return->translateToCallerRegisters
HotSpotBackend#translateToCallerRegisters(EconomicSet):::Translates a set of registers from the callee's perspective to the caller's perspective:::
HotSpotBackend#updateStub(Stub, EconomicSet, EconomicMap, FrameMap):::Updates a given stub with respect to the registers it destroys:::stub->initDestroyedCallerRegisters->cursor->calleeSaveInfo->getEntries->while->cursor->advance->save->cursor->getValue->if->save->supportsRemove->save->remove->if->cursor->getKey->cursor->getKey->debugInfo->save->getMap->setCalleeSaveInfo
HotSpotBackendFactory#getName():::Gets the name of this backend factory:::
HotSpotBackendFactory#getArchitecture():::Gets the class describing the architecture the backend created by this factory is associated with.:::
HotSpotCodeCacheListener#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode):::Notifies this object on successful install into the CodeCache.:::
HotSpotCounterOp.CounterProcedure#apply(int, Value, int):::Lambda interface for iterating over counters declared in this op.:::
HotSpotCounterOp#forEachCounter(CounterProcedure, TargetDescription):::Calls the CounterProcedure for each counter in ascending order of their displacement in the counter array.:::if->arrayIndex->getIndex->displacement->getDisplacementForLongIndex->proc->apply->else->displacements->new->intArr->offsetMap->EconomicMap->create->for->i->Arrays->sort->foreach->idx->offsetMap->get->proc->apply
HotSpotCounterOp#patchCounterIncrement(Assembler, int[]):::Patches the increment value in the instruction emitted by this instruction:::throw->GraalError->unimplemented
HotSpotForeignCallLinkage#isReexecutable():::Determines if the call has side effects.:::
HotSpotForeignCallLinkage#isCompiledStub():::Determines if this is a call to a compiled Stub stub.:::
HotSpotForeignCallLinkage#getStub():::Gets the stub, if any, this foreign call links to.:::
HotSpotForeignCallLinkage#mayContainFP():::Determines if the runtime function or stub might use floating point registers:::
HotSpotForeignCallLinkage#needsJavaFrameAnchor():::Determines if a JavaFrameAnchor needs to be set up and torn down around this call.:::
HotSpotForeignCallLinkage#getSymbol():::Gets the VM symbol associated with the target #getAddress() address of the call.:::
HotSpotForeignCallLinkage#isGuaranteedSafepoint():::Identifies foreign calls which are guaranteed to include a safepoint check.:::
HotSpotForeignCallLinkageImpl#create(MetaAccessProvider, CodeCacheProvider, WordTypes, HotSpotForeignCallsProvider, ForeignCallDescriptor, long, RegisterEffect, Type, Type, Transition, Reexecutability, LocationIdentity...):::Creates a HotSpotForeignCallLinkage.:::outgoingCc->createCallingConvention->incomingCc->createCallingConvention->linkage->new->HotSpotForeignCallLinkageImpl->if->foreignCalls->getNativeABICallerSaveRegisters->return
HotSpotForeignCallLinkageImpl#createCallingConvention(MetaAccessProvider, CodeCacheProvider, WordTypes, ValueKindFactory, ForeignCallDescriptor, Type):::Gets a calling convention for a given descriptor and call type.:::argumentTypes->descriptor->getArgumentTypes->parameterTypes->new->JavaTypeArr->for->i->returnType->descriptor->getResultType->asJavaType->regConfig->codeCache->getRegisterConfig->return->regConfig->getCallingConvention
HotSpotForeignCallLinkageImpl#isCompiledStub():::Determines if this is a call to a compiled Stub stub.:::return
HotSpotGraalCompiler#configGraphBuilderSuite(PhaseSuite, boolean, boolean, boolean):::Reconfigures a given graph builder suite (GBS) if one of the given GBS parameter values is not the default.:::if->newGbs->suite->copy->graphBuilderPhase->newGbs->findPhase->previous->graphBuilderConfig->graphBuilderPhase->getGraphBuilderConfig->if->graphBuilderConfig->withNodeSourcePosition->if->graphBuilderConfig->withRetainLocalVariables->newGraphBuilderPhase->new->GraphBuilderPhase->newGbs->findPhase->set->if->newGbs->new->OnStackReplacementPhase->appendPhase->return->return
HotSpotGraalCompiler#str(JavaMethod):::Converts method to a String with JavaMethod#format(String) and the format string "%H.%n(%p)".:::return->method->format
HotSpotGraalCompiler#fmt(Object):::Wraps obj in a Formatter that standardizes formatting for certain objects.:::return->new->Formattable
HotSpotGraalCompilerFactory#createCompiler(String, JVMCIRuntime, OptionValues, CompilerConfigurationFactory):::Creates a new HotSpotGraalRuntime object and a new HotSpotGraalCompiler and returns the latter.:::jvmciRuntime->try->t->timer->graalRuntime->new->HotSpotGraalRuntime->return->graalRuntime->getOptions->new->HotSpotGraalCompiler->catch->finally
HotSpotGraalJVMCIServiceLocator#onCompilerCreation(HotSpotGraalCompiler):::Notifies this object of the compiler created via HotSpotGraalJVMCIServiceLocator.:::onCompilerCreation
HotSpotGraalManagementRegistration#initialize(HotSpotGraalRuntime):::Completes the initialization of this registration by recording the HotSpotGraalRuntime the MBean will provide an JMX interface to.:::
HotSpotGraalManagementRegistration#poll(boolean):::Polls this registration to see if the MBean is registered in a MBean server.:::
HotSpotGraalOptionValues#asSystemPropertySetting(OptionValues, OptionKey):::Gets the system property assignment that would set the current value for a given option.:::return->value->getName->value->getValue
HotSpotGraalOptionValues#parseOptions():::Gets and parses options based on Services#getSavedProperties() saved system properties:::values->OptionValues->newOptionMap->try->t->timer->loader->OptionsParser->getOptionsLoader->savedProps->getSavedProperties->optionsFile->savedProps->get->if->graalOptions->new->File->if->graalOptions->exists->try->fr->new->FileReader->props->new->Properties->props->load->optionSettings->EconomicMap->create->foreach->props->entrySet->optionSettings->e->getKey->e->getValue->put->try->OptionsParser->parseOptions->catch->throw->new->InternalError->finally->catch->throw->new->InternalError->finally->optionSettings->EconomicMap->create->foreach->savedProps->entrySet->name->e->getKey->if->name->startsWith->if->name->equals->name->equals->println->else->if->name->equals->name->equals->else->value->e->getValue->optionSettings->name->GRAAL_OPTION_PROPERTY_PREFIX->length->substring->put->OptionsParser->parseOptions->return->catch->finally
HotSpotGraalRuntime#phaseTransition(String):::Take action related to entering a new execution phase.:::if->optionsRef->get->getValue->CompilationStatistics->clear
HotSpotGraalRuntime#setOptionValues(String[], String[]):::Sets or updates this object's #getOptions() options from names and values.:::optionDescriptors->getOptionDescriptors->newValues->EconomicMap->create->resetValues->EconomicSet->create->result->new->StringArr->for->i->currentOptions->newOptions->do->optionsRef->get->cursor->currentOptions->getMap->getEntries->while->cursor->advance->key->cursor->getKey->if->resetValues->contains->newValues->containsKey->newValues->OptionValues->cursor->getValue->decodeNull->put->new->OptionValues->while->optionsRef->compareAndSet->return
HotSpotGraalRuntime#getOptionValues(String...):::Gets the values for the options corresponding to names encoded as strings:::values->new->StringArr->optionDescriptors->getOptionDescriptors->for->i->return
HotSpotGraalRuntimeProvider#openDebugContext(OptionValues, CompilationIdentifier, Object, Iterable, PrintStream):::Opens a debug context for compiling compilable:::
HotSpotGraalRuntimeProvider#getOptions():::Gets the option values associated with this runtime.:::
HotSpotGraalRuntimeProvider#isBootstrapping():::Determines if the VM is currently bootstrapping the JVMCI compiler.:::
HotSpotGraalRuntimeProvider#isShutdown():::This runtime has been requested to shutdown.:::
HotSpotGraalRuntimeProvider#getOutputDirectory():::Gets a directory into which diagnostics such crash reports and dumps should be written.:::
HotSpotGraalRuntimeProvider#getCompilationProblemsPerAction():::Gets the map used to count compilation problems at each ExceptionAction level:::
HotSpotGraalRuntimeProvider#getCompilerConfigurationName():::Returns the unique compiler configuration name that is in use:::
HotSpotGraalServices#getImplicitExceptionBytes(HotSpotMetaData):::Get the implicit exceptions section of a HotSpotMetaData if it exists.:::return->metaData->implicitExceptionBytes
HotSpotInstructionProfiling#countInstructions(LIR, Assembler):::After assembly the HotSpotBackend#profileInstructions(LIR, CompilationResultBuilder) calls this method for patching the instruction counts into the counter increment code.:::lastOp->counter->asm->getInstructionCounter->foreach->lir->codeEmittingOrder->if->continue->foreach->lir->getLIRforBlock->if->currentOp->if->beginPc->endPc->instructionCounts->counter->countInstructions->patchCounterIncrement->if->beginPc->endPc->asm->position->instructionCounts->counter->countInstructions->patchCounterIncrement
HotSpotLIRGenerator#emitTailcall(Value[], Value):::Emits an operation to make a tail call.:::
HotSpotLIRGenerator#emitLoadObjectAddress(Constant):::Emits code for a LoadConstantIndirectlyNode.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitLoadMetaspaceAddress(Constant, HotSpotConstantLoadAction):::Emits code for a LoadConstantIndirectlyNode.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitLoadConfigValue(int, LIRKind):::Emits code for a GraalHotSpotVMConfigNode.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitObjectConstantRetrieval(Constant, Value, LIRFrameState):::Emits code for a ResolveConstantNode to resolve a HotSpotObjectConstant.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitResolveDynamicInvoke(Constant, LIRFrameState):::Emits code to resolve a dynamic constant.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitMetaspaceConstantRetrieval(Constant, Value, LIRFrameState):::Emits code for a ResolveConstantNode to resolve a HotSpotMetaspaceConstant.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitResolveMethodAndLoadCounters(Constant, Value, Value, LIRFrameState):::Emits code for a ResolveMethodAndLoadCountersNode to resolve a HotSpotMetaspaceConstant that represents a ResolvedJavaMethod and return the corresponding MethodCounters object.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitKlassInitializationAndRetrieval(Constant, Value, LIRFrameState):::Emits code for a ResolveConstantNode to resolve a klass HotSpotMetaspaceConstant and run static initializer.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitRandomSeed():::Emits code for a RandomSeedNode.:::throw->target->new->GraalError
HotSpotLIRGenerator#getLockSlot(int):::Gets a stack slot for a lock at a given lock nesting depth.:::
HotSpotLockStack#makeLockSlot(int):::Gets a stack slot for a lock at a given lock nesting depth, allocating it first if necessary.:::if->new->AllocatableValueArr->else->if->Arrays->copyOf->if->frameMapBuilder->allocateSpillSlot->return
JVMCIVersionCheck#check(Map, Version, String, String, boolean):::Entry point for testing.:::checker->new->JVMCIVersionCheck->checker->run
JVMCIVersionCheck#main(String[]):::Command line interface for performing the check.:::sprops->System->getProperties->props->sprops->size->new->HashMap<>->foreach->sprops->stringPropertyNames->props->sprops->getProperty->put->check
SymbolicSnippetEncoder#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues):::Compiles the snippet and stores the graph.:::method->plugin->snippetReplacements->getProviders->getMetaAccess->getSubstitute->subst->buildGraph->snippetMethods->add->originalMethods->methodKey->methodKey->put->preparedSnippetGraphs->plugin->toString->put
SymbolicSnippetEncoder#encode(OptionValues):::Encode any outstanding graphs and return true if any work was done.:::encodedSnippets->maybeEncodeSnippets->if->HotSpotReplacementsImpl->setEncodedSnippets->return->return
WeakClassLoaderSet#add(ClassLoader):::Adds loader to this set.:::addNewRef->new->WeakReference<>->currentLoaders->loaders->get->if->currentLoaders->contains->new->UnaryOperator<EconomicSet<Reference<ClassLoader>>>->getAndUpdate
WeakClassLoaderSet#resolve(String, EconomicSet):::Tries to resolve className to Class instances with the loaders in this set.:::found->EconomicSet->create->it->loaders->get->iterator->while->it->hasNext->ref->it->next->loader->ref->get->if->it->remove->continue->try->clazz->Class->forName->found->add->catch->resolutionFailures->add->finally->return

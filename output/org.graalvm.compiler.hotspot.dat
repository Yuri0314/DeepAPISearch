BootstrapWatchDog_OptionDescriptors#get(String)::: bootstrap watch dog_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
BootstrapWatchDog_OptionDescriptors#iterator()::: bootstrap watch dog_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
CompilationCounters_OptionDescriptors#get(String)::: compilation counters_ option descriptors get:::switch->return->OptionDescriptor->create->return
CompilationCounters_OptionDescriptors#iterator()::: compilation counters_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
CompilationStatistics_OptionDescriptors#get(String)::: compilation statistics_ option descriptors get:::switch->return->OptionDescriptor->create->return
CompilationStatistics_OptionDescriptors#iterator()::: compilation statistics_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
CompilationWatchDog_OptionDescriptors#get(String)::: compilation watch dog_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return
CompilationWatchDog_OptionDescriptors#iterator()::: compilation watch dog_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
CompilerConfigurationFactory_OptionDescriptors#get(String)::: compiler configuration factory_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
CompilerConfigurationFactory_OptionDescriptors#iterator()::: compiler configuration factory_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
HotSpotBackend_OptionDescriptors#get(String)::: hot spot backend_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
HotSpotBackend_OptionDescriptors#iterator()::: hot spot backend_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
HotSpotCompiledCodeBuilder_OptionDescriptors#get(String)::: hot spot compiled code builder_ option descriptors get:::switch->return->OptionDescriptor->create->return
HotSpotCompiledCodeBuilder_OptionDescriptors#iterator()::: hot spot compiled code builder_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
HotSpotGraalCompilerFactory_OptionDescriptors#get(String)::: hot spot graal compiler factory_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
HotSpotGraalCompilerFactory_OptionDescriptors#iterator()::: hot spot graal compiler factory_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
HotSpotTTYStreamProvider_OptionDescriptors#get(String)::: hot spot stream provider_ option descriptors get:::switch->return->OptionDescriptor->create->return
HotSpotTTYStreamProvider_OptionDescriptors#iterator()::: hot spot stream provider_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
Plugin_HotSpotBackend_counterModeAESCrypt#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_counter mode crypt execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->arg7->arg8->arg9->return->intrinsify
Plugin_HotSpotBackend_counterModeAESCrypt#getSource()::: plugin_ hot spot backend_counter mode crypt get source:::return
Plugin_HotSpotBackend_implMontgomeryMultiply#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_impl montgomery multiply execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->arg7->arg8->return->intrinsify
Plugin_HotSpotBackend_implMontgomeryMultiply#getSource()::: plugin_ hot spot backend_impl montgomery multiply get source:::return
Plugin_HotSpotBackend_implMontgomerySquare#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_impl montgomery square execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->arg7->return->intrinsify
Plugin_HotSpotBackend_implMontgomerySquare#getSource()::: plugin_ hot spot backend_impl montgomery square get source:::return
Plugin_HotSpotBackend_implSquareToLen#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_impl square to len execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->return->intrinsify
Plugin_HotSpotBackend_implSquareToLen#getSource()::: plugin_ hot spot backend_impl square to len get source:::return
Plugin_HotSpotBackend_mulAddStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_mul add stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->arg7->return->intrinsify
Plugin_HotSpotBackend_mulAddStub#getSource()::: plugin_ hot spot backend_mul add stub get source:::return
Plugin_HotSpotBackend_multiplyToLenStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_multiply to len stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->arg7->arg8->return->intrinsify
Plugin_HotSpotBackend_multiplyToLenStub#getSource()::: plugin_ hot spot backend_multiply to len stub get source:::return
Plugin_HotSpotBackend_sha2ImplCompressMBStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_sha2 impl compress stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->return->intrinsify
Plugin_HotSpotBackend_sha2ImplCompressMBStub#getSource()::: plugin_ hot spot backend_sha2 impl compress stub get source:::return
Plugin_HotSpotBackend_sha2ImplCompressStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_sha2 impl compress stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->return->intrinsify
Plugin_HotSpotBackend_sha2ImplCompressStub#getSource()::: plugin_ hot spot backend_sha2 impl compress stub get source:::return
Plugin_HotSpotBackend_sha5ImplCompressMBStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_sha5 impl compress stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->return->intrinsify
Plugin_HotSpotBackend_sha5ImplCompressMBStub#getSource()::: plugin_ hot spot backend_sha5 impl compress stub get source:::return
Plugin_HotSpotBackend_sha5ImplCompressStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_sha5 impl compress stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->return->intrinsify
Plugin_HotSpotBackend_sha5ImplCompressStub#getSource()::: plugin_ hot spot backend_sha5 impl compress stub get source:::return
Plugin_HotSpotBackend_shaImplCompressMBStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_sha impl compress stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->return->intrinsify
Plugin_HotSpotBackend_shaImplCompressMBStub#getSource()::: plugin_ hot spot backend_sha impl compress stub get source:::return
Plugin_HotSpotBackend_shaImplCompressStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_sha impl compress stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->return->intrinsify
Plugin_HotSpotBackend_shaImplCompressStub#getSource()::: plugin_ hot spot backend_sha impl compress stub get source:::return
Plugin_HotSpotBackend_unsafeArraycopyStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_unsafe arraycopy stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->return->intrinsify
Plugin_HotSpotBackend_unsafeArraycopyStub#getSource()::: plugin_ hot spot backend_unsafe arraycopy stub get source:::return
Plugin_HotSpotBackend_vectorizedMismatchStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ hot spot backend_vectorized mismatch stub execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->arg4->arg5->arg6->return->intrinsify
Plugin_HotSpotBackend_vectorizedMismatchStub#getSource()::: plugin_ hot spot backend_vectorized mismatch stub get source:::return
PluginFactory_HotSpotBackend#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ hot spot backend register plugins:::plugins->new->Plugin_HotSpotBackend_counterModeAESCrypt->register->plugins->new->Plugin_HotSpotBackend_implMontgomeryMultiply->register->plugins->new->Plugin_HotSpotBackend_implMontgomerySquare->register->plugins->new->Plugin_HotSpotBackend_implSquareToLen->register->plugins->new->Plugin_HotSpotBackend_mulAddStub->register->plugins->new->Plugin_HotSpotBackend_multiplyToLenStub->register->plugins->new->Plugin_HotSpotBackend_sha2ImplCompressMBStub->register->plugins->new->Plugin_HotSpotBackend_sha2ImplCompressStub->register->plugins->new->Plugin_HotSpotBackend_sha5ImplCompressMBStub->register->plugins->new->Plugin_HotSpotBackend_sha5ImplCompressStub->register->plugins->new->Plugin_HotSpotBackend_shaImplCompressMBStub->register->plugins->new->Plugin_HotSpotBackend_shaImplCompressStub->register->plugins->new->Plugin_HotSpotBackend_unsafeArraycopyStub->register->plugins->new->Plugin_HotSpotBackend_vectorizedMismatchStub->register
AOTGraalHotSpotVMConfig#getOopEncoding()::: graal hot spot config get oop encoding:::return
AOTGraalHotSpotVMConfig#getKlassEncoding()::: graal hot spot config get klass encoding:::return
BootstrapWatchDog#maybeCreate(HotSpotGraalRuntimeProvider):::Creates and returns a BootstrapWatchDog if Options#BootstrapWatchDogCriticalRateRatio is not set to 0 otherwise returns null.:::options->graalRuntime->getOptions->timeout->getValue->maxRateDecrease->getValue->return->new->BootstrapWatchDog
BootstrapWatchDog#run()::: bootstrap watch dog run:::if->TTY->printf->start->System->currentTimeMillis->requestsAtTimeout->stacksAtTimeout->try->Thread->sleep->while->currentCompilations->compilations->get->elapsed->System->currentTimeMillis->rate->seconds->if->TTY->seconds->printf->if->else->if->TTY->seconds->printf->TTY->getName->seconds->printf->return->if->if->snapshotRequests->new->HashMap<>->foreach->requestsAtTimeout->keySet->stacksAtTimeout->t->getStackTrace->put->else->TTY->seconds->printf->requestsNow->snapshotRequests->foreach->requestsAtTimeout->entrySet->t->e->getKey->request1->requestsAtTimeout->get->request2->requestsNow->get->if->stackTraceNow->t->getStackTrace->TTY->request1->getMethod->fmt->fmt->printf->if->Arrays->stacksAtTimeout->get->equals->TTY->printf->else->if->TTY->request1->getMethod->fmt->printf->return->if->graalRuntime->isBootstrapping->return->Thread->sleep->catch->e->printStackTrace->finally
BootstrapWatchDog#snapshotRequests()::: bootstrap watch dog snapshot requests:::synchronized->return->new->HashMap<>
BootstrapWatchDog#seconds(long)::: bootstrap watch dog seconds:::return
BootstrapWatchDog#hitCriticalCompilationRateOrTimeout():::Queries whether a critically low compilation rate or #timeout occurred.:::return
BootstrapWatchDog#watch(CompilationRequest):::Opens a scope for watching the compilation of a given method.:::watch->requestForThread->get->if->new->Watch->synchronized->requests->Thread->currentThread->put->watch->open->return
BootstrapWatchDog.Watch#open(CompilationRequest)::: watch open:::
BootstrapWatchDog.Watch#close()::: watch close:::compilations->incrementAndGet
CommunityCompilerConfigurationFactory#createCompilerConfiguration()::: community compiler configuration factory create compiler configuration:::return->new->CommunityCompilerConfiguration
CompilationContext#close()::: compilation context close:::try->impl->close->catch->GraalError->shouldNotReachHere->finally
CompilationCounters#countCompilation(ResolvedJavaMethod):::Counts the number of compilations for the ResolvedJavaMethod of the CompilationRequest:::val->counters->get->counters->put->if->getValue->TTY->fmt->getValue->printf->TTY->println->sortedCounters->new->CounterComparator->new->TreeSet<>->foreach->counters->entrySet->sortedCounters->add->foreach->if->entry->getValue->getValue->entry->getValue->entry->getKey->str->printf->TTY->flush->HotSpotGraalServices->exit
CompilationCounters.CounterComparator#compare(Entry, Entry)::: counter comparator compare:::if->o1->getValue->o2->getValue->return->if->o1->getValue->o2->getValue->return->return->o1->getKey->str->o2->getKey->str->compareTo
CompilationStatistics#getThreadAllocatedBytes()::: compilation statistics get thread allocated bytes:::return->GraalServices->getCurrentThreadAllocatedBytes
CompilationStatistics#finish(HotSpotResolvedJavaMethod, HotSpotInstalledCode)::: compilation statistics finish:::if->isEnabled->System->nanoTime->code->getCodeSize->getThreadAllocatedBytes->if->current->get->getLast->throw->new->RuntimeException->current->get->removeLast
CompilationStatistics#current()::: compilation statistics current:::return->current->get->isEmpty->current->get->getLast
CompilationStatistics#create(OptionValues, HotSpotResolvedJavaMethod, boolean)::: compilation statistics create:::if->getValue->stats->new->CompilationStatistics->list->add->current->get->addLast->return->else->return
CompilationStatistics#isEnabled()::: compilation statistics is enabled:::return
CompilationStatistics#clear(String)::: compilation statistics clear:::try->snapshot->snapshotZeroTime->new->ConcurrentLinkedDeque<>->System->nanoTime->now->new->Date->dateString->now->getYear->now->getMonth->now->getDate->now->getHours->now->getMinutes->dumpCompilations->try->fos->new->FileOutputStream->out->new->PrintStream->timeSpent->new->longArr->maxTick->foreach->start->duration->if->tick->timeLeft->while->if->Math->min->timelineName->Services->getSavedProperties->get->if->timelineName->isEmpty->out->escape->printf->for->i->out->normalize->printf->out->println->catch->finally->catch->throw->new->RuntimeException->finally
CompilationStatistics#normalize(long)::: compilation statistics normalize:::return
CompilationStatistics#dumpCompilations(ConcurrentLinkedDeque, String, String)::: compilation statistics dump compilations:::fileName->separator->try->out->new->PrintStream->declaredFields->getDeclaredFields->fields->new->ArrayList<>->foreach->if->Modifier->field->getModifiers->isStatic->field->isAnnotationPresent->fields->add->format->CSVUtil->fields->size->buildFormatString->fields->toArray->println->foreach->values->fields->size->new->ObjectArr->for->i->fields->size->println->catch->finally
CompilationTask.HotSpotCompilationWrapper#createRetryDebugContext(DebugContext, OptionValues, PrintStream)::: hot spot compilation wrapper create retry debug context:::snippetReflection->compiler->getGraalRuntime->getHostProviders->getSnippetReflection->description->initialDebug->getDescription->factories->Collections->new->GraalDebugHandlersFactory->singletonList->return->DebugContext->initialDebug->getGlobalMetrics->create
CompilationTask.HotSpotCompilationWrapper#exitHostVM(int)::: hot spot compilation wrapper exit host m:::HotSpotGraalServices->exit
CompilationTask.HotSpotCompilationWrapper#toString()::: hot spot compilation wrapper to string:::return->getMethod->getEntryBCI->format
CompilationTask.HotSpotCompilationWrapper#handleException(Throwable)::: hot spot compilation wrapper handle exception:::if->bailout->return->HotSpotCompilationRequestResult->bailout->getMessage->bailout->isPermanent->failure->return->HotSpotCompilationRequestResult->t->toString->failure
CompilationTask.HotSpotCompilationWrapper#lookupAction(OptionValues, Throwable)::: hot spot compilation wrapper lookup action:::if->bailout->if->bailout->isPermanent->if->CompilationBailoutAsFailure->hasBeenSet->if->compiler->getGraalRuntime->isBootstrapping->return->if->CompilationBailoutAsFailure->getValue->return->super->lookupAction->if->CompilationFailureAction->hasBeenSet->if->compiler->getGraalRuntime->isBootstrapping->return->return->super->lookupAction
CompilationTask.HotSpotCompilationWrapper#performCompilation(DebugContext)::: hot spot compilation wrapper perform compilation:::method->getMethod->entryBCI->getEntryBCI->isOSR->stats->CompilationStatistics->debug->getOptions->create->printer->CompilationPrinter->debug->getOptions->begin->try->s->debug->getIdString->new->DebugDumpScope->scope->compiler->compile->catch->throw->debug->handle->finally->if->try->b->CodeInstallationTime->start->installMethod->catch->finally->printer->finish->stats->finish->if->rootMethod->result->getMethods->inlinedBytecodes->result->getBytecodeSize->rootMethod->getCodeSize->return->HotSpotCompilationRequestResult->success->return
CompilationTask#filterOptions(OptionValues)::: compilation task filter options:::graalRuntime->compiler->getGraalRuntime->config->graalRuntime->getVMConfig->newOptions->if->m->OptionValues->newOptionMap->if->Inline->getValue->Inline->hasBeenSet->m->put->if->InlineDuringParsing->getValue->InlineDuringParsing->hasBeenSet->m->put->if->m->isEmpty->new->OptionValues->return
CompilationTask#getMethod()::: compilation task get method:::return->getRequest->getMethod
CompilationTask#getCompilationIdentifier()::: compilation task get compilation identifier:::return
CompilationTask#getId():::Returns the HotSpot id of this compilation.:::return->getRequest->getId
CompilationTask#getEntryBCI()::: compilation task get entry i:::return->getRequest->getEntryBCI
CompilationTask#getIdString()::: compilation task get id string:::if->getEntryBCI->return->getId->else->return->Integer->getId->toString
CompilationTask#getInstalledCode()::: compilation task get installed code:::return
CompilationTask#runCompilation(OptionValues)::: compilation task run compilation:::options->filterOptions->snippetReflection->compiler->getGraalRuntime->getHostProviders->getSnippetReflection->try->debug->DebugContext->new->GraalDebugHandlersFactory->create->return->runCompilation->catch->finally
CompilationTask#runCompilation(DebugContext)::: compilation task run compilation:::graalRuntime->compiler->getGraalRuntime->config->graalRuntime->getVMConfig->entryBCI->getEntryBCI->isOSR->method->getMethod->if->if->method->hasCodeAtLevel->return->HotSpotCompilationRequestResult->failure->if->HotSpotGraalCompilerFactory->shouldExclude->return->HotSpotCompilationRequestResult->failure->compilation->new->HotSpotCompilationWrapper->try->a->CompilationTime->start->return->compilation->run->catch->finally->try->compiledBytecodes->codeSize->if->getBytecodeSize->CompiledBytecodes->add->if->installedCode->getSize->CompiledAndInstalledBytecodes->add->InstalledCodeSize->add->catch->return->compilation->handleException->finally
CompilationTask#installMethod(DebugContext, CompilationResult)::: compilation task install method:::codeCache->jvmciRuntime->getHostJVMCIBackend->getCodeCache->backend->compiler->getGraalRuntime->getHostBackend->context->getIdString->new->DebugDumpScope->getMethod->try->s->debug->scope->request->getRequest->backend->request->getMethod->createInstalledCode->catch->throw->debug->handle->finally
CompilationTask#toString()::: compilation task to string:::return->getId->getMethod->format->getEntryBCI->getEntryBCI
CompilationTask#getRequest()::: compilation task get request:::return->compilationId->getRequest
CompilationWatchDog#startCompilation(ResolvedJavaMethod, int)::: compilation watch dog start compilation:::fmt->trace
CompilationWatchDog#stopCompilation()::: compilation watch dog stop compilation:::fmt->trace
CompilationWatchDog#reset()::: compilation watch dog reset:::
CompilationWatchDog#tick(WatchDogState)::: compilation watch dog tick:::
CompilationWatchDog#recordStackTrace(StackTraceElement[]):::Saves the current stack trace StackTraceElement of the monitored compiler thread CompilationWatchDog#compilerThread.:::if->return->if->Arrays->equals->return->return
CompilationWatchDog#trace(String, Object...)::: compilation watch dog trace:::if->TTY->String->format->println
CompilationWatchDog#ms(double)::: compilation watch dog ms:::return
CompilationWatchDog#secs(long)::: compilation watch dog secs:::return
CompilationWatchDog#toString()::: compilation watch dog to string:::return->compilerThread->getName
CompilationWatchDog#run()::: compilation watch dog run:::try->trace->while->currentlyCompiling->if->reset->else->switch->tick->break->if->currentlyCompiling->equals->if->tick->trace->else->secs->trace->else->reset->break->if->currentlyCompiling->equals->if->trace->newStackTrace->compilerThread->getStackTrace->recordStackTrace->if->trace->if->synchronized->TTY->fmt->fmt->printf->HotSpotGraalServices->exit->else->if->synchronized->TTY->fmt->secs->fmt->printf->else->secs->trace->else->reset->break->break->try->Thread->sleep->catch->finally->catch->throw->String->fmt->format->new->InternalError->finally
CompilationWatchDog#watch(ResolvedJavaMethod, int, OptionValues):::Opens a scope for watching the compilation of a given method.:::startDelayMilliseconds->getValue->ms->if->watchDog->WATCH_DOGS->get->if->currentThread->Thread->currentThread->stackTraceIntervalMilliseconds->getValue->ms->nonFatalIdenticalCompilationSnapshots->getValue->new->CompilationWatchDog->WATCH_DOGS->set->thread->new->GraalServiceThread->thread->thread->getId->watchDog->toString->setName->thread->setPriority->thread->setDaemon->thread->start->watchDog->startCompilation->return->return
CompilationWatchDog#close()::: compilation watch dog close:::stopCompilation
CompilerConfigurationFactory#createCompilerConfiguration()::: compiler configuration factory create compiler configuration:::
CompilerConfigurationFactory#createBackendMap():::Collect the set of available HotSpotBackendFactory backends for this compiler configuration.:::return->new->DefaultBackendMap
CompilerConfigurationFactory#getName():::Returns a name that should uniquely identify this compiler configuration.:::return
CompilerConfigurationFactory.BackendMap#getBackendFactory(Architecture)::: backend map get backend factory:::
CompilerConfigurationFactory.DefaultBackendMap#getBackendFactory(Architecture)::: default backend map get backend factory:::return->backends->arch->getClass->get
CompilerConfigurationFactory#compareTo(CompilerConfigurationFactory)::: compiler configuration factory compare to:::if->return->if->return->return
CompilerConfigurationFactory#checkUnique(CompilerConfigurationFactory, List):::Asserts uniqueness of #name and #autoSelectionPriority for factory in factories.:::foreach->if->return
CompilerConfigurationFactory#getAllCandidates()::: compiler configuration factory get all candidates:::candidates->new->ArrayList<>->foreach->GraalServices->load->candidates->add->Collections->sort->return
CompilerConfigurationFactory#selectFactory(String, OptionValues):::Selects and instantiates a CompilerConfigurationFactory:::factory->try->t->timer->value->getValue->if->equals->println->foreach->getAllCandidates->println->HotSpotGraalServices->exit->else->if->foreach->GraalServices->load->if->equals->break->if->throw->getAllCandidates->stream->map->Collectors->joining->collect->new->GraalError->else->candidates->getAllCandidates->if->candidates->isEmpty->throw->getName->new->GraalError->candidates->get->catch->finally->level->getValue->if->switch->printConfigInfo->break->printConfigInfo->config->factory->createCompilerConfiguration->TTY->config->createHighTier->phaseNames->println->TTY->config->createMidTier->phaseNames->println->TTY->config->createLowTier->phaseNames->println->TTY->config->createPreAllocationOptimizationStage->phaseNames->println->TTY->config->createAllocationStage->phaseNames->println->TTY->config->createPostAllocationOptimizationStage->phaseNames->println->config->createAllocationStage->break->return
CompilerConfigurationFactory#printConfigInfo(CompilerConfigurationFactory)::: compiler configuration factory print config info:::location->factory->getClass->factory->getClass->getSimpleName->getResource->TTY->factory->getClass->getName->printf
CompilerConfigurationFactory#phaseNames(PhaseSuite)::: compiler configuration factory phase names:::phases->suite->getPhases->res->phases->size->new->ArrayList<>->foreach->res->phase->contractorName->add->Collections->sort->return
CompilerConfigurationFactory#phaseNames(LIRPhaseSuite)::: compiler configuration factory phase names:::phases->suite->getPhases->res->phases->size->new->ArrayList<>->foreach->res->phase->getClass->getName->add->Collections->sort->return
EconomyCompilerConfigurationFactory#createCompilerConfiguration()::: economy compiler configuration factory create compiler configuration:::return->new->EconomyCompilerConfiguration
EconomyCompilerConfigurationFactory#createBackendMap()::: economy compiler configuration factory create backend map:::return->new->DefaultBackendMap
GraalHotSpotVMConfig#getOopEncoding()::: graal hot spot config get oop encoding:::return
GraalHotSpotVMConfig#getKlassEncoding()::: graal hot spot config get klass encoding:::return
GraalHotSpotVMConfig#useMultiplyToLenIntrinsic()::: graal hot spot config use multiply to len intrinsic:::return
GraalHotSpotVMConfig#useSHA1Intrinsics()::: graal hot spot config use a1 intrinsics:::return
GraalHotSpotVMConfig#useSHA256Intrinsics()::: graal hot spot config use a256 intrinsics:::return
GraalHotSpotVMConfig#useSHA512Intrinsics()::: graal hot spot config use a512 intrinsics:::return
GraalHotSpotVMConfig#useGHASHIntrinsics()::: graal hot spot config use intrinsics:::return
GraalHotSpotVMConfig#useBase64Intrinsics()::: graal hot spot config use base64 intrinsics:::return
GraalHotSpotVMConfig#useMontgomeryMultiplyIntrinsic()::: graal hot spot config use montgomery multiply intrinsic:::return
GraalHotSpotVMConfig#useMontgomerySquareIntrinsic()::: graal hot spot config use montgomery square intrinsic:::return
GraalHotSpotVMConfig#useMulAddIntrinsic()::: graal hot spot config use mul add intrinsic:::return
GraalHotSpotVMConfig#useSquareToLenIntrinsic()::: graal hot spot config use square to len intrinsic:::return
GraalHotSpotVMConfig#inlineNotify()::: graal hot spot config inline notify:::return
GraalHotSpotVMConfig#inlineNotifyAll()::: graal hot spot config inline notify all:::return
GraalHotSpotVMConfig#gcTotalCollectionsAddress()::: graal hot spot config gc total collections address:::return
GraalHotSpotVMConfig#minObjAlignment()::: graal hot spot config min obj alignment:::return
GraalHotSpotVMConfig#logMinObjAlignment()::: graal hot spot config log min obj alignment:::return->Math->log->Math->log
GraalHotSpotVMConfig#layoutHelperElementTypePrimitiveInPlace():::This filters out the bit that differentiates a type array from an object array.:::return
GraalHotSpotVMConfig#arrayOopDescLengthOffset():::The offset of the array length word in an array object's header:::return
GraalHotSpotVMConfig#getJvmciJvmtiCapabilityOffset(String)::: graal hot spot config get jvmci jvmti capability offset:::offset->getFieldOffset->if->getFieldOffset->return
GraalHotSpotVMConfig#requiresReservedStackCheck(List)::: graal hot spot config requires reserved stack check:::if->foreach->if->hasReservedStackAccess->return->return
GraalHotSpotVMConfig#threadLastJavaSpOffset()::: graal hot spot config thread last java sp offset:::return
GraalHotSpotVMConfig#threadLastJavaPcOffset()::: graal hot spot config thread last java pc offset:::return
GraalHotSpotVMConfig#threadLastJavaFpOffset()::: graal hot spot config thread last java fp offset:::return->getFieldOffset
GraalHotSpotVMConfig#threadJavaFrameAnchorFlagsOffset()::: graal hot spot config thread java frame anchor flags offset:::return->getFieldOffset
GraalHotSpotVMConfig#arrayPrototypeMarkWord():::See markOopDesc::prototype().:::return
GraalHotSpotVMConfig#tlabIntArrayMarkWord():::See markOopDesc::copy_set_hash().:::tmp->arrayPrototypeMarkWord->return
GraalHotSpotVMConfig#tlabSlowAllocationsOffset()::: graal hot spot config tlab slow allocations offset:::return
GraalHotSpotVMConfig#tlabFastRefillWasteOffset()::: graal hot spot config tlab fast refill waste offset:::return
GraalHotSpotVMConfig#tlabNumberOfRefillsOffset()::: graal hot spot config tlab number of refills offset:::return
GraalHotSpotVMConfig#tlabRefillWasteLimitOffset()::: graal hot spot config tlab refill waste limit offset:::return
GraalHotSpotVMConfig#threadTlabSizeOffset()::: graal hot spot config thread tlab size offset:::return
GraalHotSpotVMConfig#threadTlabStartOffset()::: graal hot spot config thread tlab start offset:::return
GraalHotSpotVMConfig#threadTlabEndOffset()::: graal hot spot config thread tlab end offset:::return
GraalHotSpotVMConfig#threadTlabTopOffset()::: graal hot spot config thread tlab top offset:::return
GraalHotSpotVMConfig#threadTlabPfTopOffset()::: graal hot spot config thread tlab pf top offset:::return
GraalHotSpotVMConfig#areNullAllocationStubsAvailable()::: graal hot spot config are null allocation stubs available:::return
GraalHotSpotVMConfig#checkNullAllocationStubs():::Checks that HotSpot implements all or none of the allocate-or-null stubs.:::if->else->return
GraalHotSpotVMConfig#check()::: graal hot spot config check:::foreach->getClass->getDeclaredFields->modifiers->f->getModifiers->if->Modifier->isPublic->Modifier->isStatic->return
GraalHotSpotVMConfigBase#checkVersioned()::: graal hot spot config base check versioned:::c->versioned->getClass->foreach->c->getDeclaredFields->modifiers->field->getModifiers->if->Modifier->isStatic->return
GraalHotSpotVMConfigBase#getProperty(String, String)::: graal hot spot config base get property:::value->Services->getSavedProperties->get->if->return->return
GraalHotSpotVMConfigBase#getProperty(String)::: graal hot spot config base get property:::return->getProperty
GraalHotSpotVMConfigBase#getHostOSName():::Gets the host operating system name.:::osName->getProperty->switch->break->break->break->if->osName->startsWith->else->throw->new->JVMCIError->return
GraalHotSpotVMConfigBase#getHostArchitectureName()::: graal hot spot config base get host architecture name:::arch->getProperty->switch->break->break->return
HotSpotBackend#multiplyToLenStub(Word, int, Word, int, Word, int)::: hot spot backend multiply to len stub:::multiplyToLenStub
HotSpotBackend#multiplyToLenStub(ForeignCallDescriptor, Word, int, Word, int, Word, int)::: hot spot backend multiply to len stub:::
HotSpotBackend#mulAddStub(Word, Word, int, int, int)::: hot spot backend mul add stub:::return->mulAddStub
HotSpotBackend#mulAddStub(ForeignCallDescriptor, Word, Word, int, int, int)::: hot spot backend mul add stub:::
HotSpotBackend#implMontgomeryMultiply(Word, Word, Word, int, long, Word)::: hot spot backend impl montgomery multiply:::implMontgomeryMultiply
HotSpotBackend#implMontgomeryMultiply(ForeignCallDescriptor, Word, Word, Word, int, long, Word)::: hot spot backend impl montgomery multiply:::
HotSpotBackend#implMontgomerySquare(Word, Word, int, long, Word)::: hot spot backend impl montgomery square:::implMontgomerySquare
HotSpotBackend#implMontgomerySquare(ForeignCallDescriptor, Word, Word, int, long, Word)::: hot spot backend impl montgomery square:::
HotSpotBackend#implSquareToLen(Word, int, Word, int)::: hot spot backend impl square to len:::implSquareToLen
HotSpotBackend#implSquareToLen(ForeignCallDescriptor, Word, int, Word, int)::: hot spot backend impl square to len:::
HotSpotBackend#shaImplCompressStub(Word, Object)::: hot spot backend sha impl compress stub:::shaImplCompressStub
HotSpotBackend#shaImplCompressStub(ForeignCallDescriptor, Word, Object)::: hot spot backend sha impl compress stub:::
HotSpotBackend#sha2ImplCompressStub(Word, Object)::: hot spot backend sha2 impl compress stub:::sha2ImplCompressStub
HotSpotBackend#sha2ImplCompressStub(ForeignCallDescriptor, Word, Object)::: hot spot backend sha2 impl compress stub:::
HotSpotBackend#sha5ImplCompressStub(Word, Object)::: hot spot backend sha5 impl compress stub:::sha5ImplCompressStub
HotSpotBackend#sha5ImplCompressStub(ForeignCallDescriptor, Word, Object)::: hot spot backend sha5 impl compress stub:::
HotSpotBackend#shaImplCompressMBStub(Word, Object, int, int)::: hot spot backend sha impl compress stub:::return->shaImplCompressMBStub
HotSpotBackend#shaImplCompressMBStub(ForeignCallDescriptor, Word, Object, int, int)::: hot spot backend sha impl compress stub:::
HotSpotBackend#sha2ImplCompressMBStub(Word, Object, int, int)::: hot spot backend sha2 impl compress stub:::return->sha2ImplCompressMBStub
HotSpotBackend#sha2ImplCompressMBStub(ForeignCallDescriptor, Word, Object, int, int)::: hot spot backend sha2 impl compress stub:::
HotSpotBackend#sha5ImplCompressMBStub(Word, Object, int, int)::: hot spot backend sha5 impl compress stub:::return->sha5ImplCompressMBStub
HotSpotBackend#sha5ImplCompressMBStub(ForeignCallDescriptor, Word, Object, int, int)::: hot spot backend sha5 impl compress stub:::
HotSpotBackend#unsafeArraycopy(Word, Word, Word)::: hot spot backend unsafe arraycopy:::unsafeArraycopyStub
HotSpotBackend#unsafeArraycopyStub(ForeignCallDescriptor, Word, Word, Word)::: hot spot backend unsafe arraycopy stub:::
HotSpotBackend#counterModeAESCrypt(Word, Word, Word, Word, int, Word, Word)::: hot spot backend counter mode crypt:::return->counterModeAESCrypt
HotSpotBackend#counterModeAESCrypt(ForeignCallDescriptor, Word, Word, Word, Word, int, Word, Word)::: hot spot backend counter mode crypt:::
HotSpotBackend#vectorizedMismatch(Word, Word, int, int)::: hot spot backend vectorized mismatch:::return->vectorizedMismatchStub
HotSpotBackend#vectorizedMismatchStub(ForeignCallDescriptor, Word, Word, int, int)::: hot spot backend vectorized mismatch stub:::
HotSpotBackend#getRuntime()::: hot spot backend get runtime:::return
HotSpotBackend#completeInitialization(HotSpotJVMCIRuntime, OptionValues):::Performs any remaining initialization that was deferred until the #getRuntime() runtime object was initialized and this backend was registered with it.:::
HotSpotBackend#gatherDestroyedCallerRegisters(LIR):::Finds all the registers that are defined by some given LIR.:::destroyedRegisters->EconomicSet->create->defConsumer->new->ValueConsumer->foreach->lir->codeEmittingOrder->if->continue->foreach->lir->getLIRforBlock->if->else->op->visitEachTemp->op->visitEachOutput->return->translateToCallerRegisters
HotSpotBackend#translateToCallerRegisters(EconomicSet):::Translates a set of registers from the callee's perspective to the caller's perspective:::
HotSpotBackend#updateStub(Stub, EconomicSet, EconomicMap, FrameMap):::Updates a given stub with respect to the registers it destroys:::stub->initDestroyedCallerRegisters->cursor->calleeSaveInfo->getEntries->while->cursor->advance->save->cursor->getValue->if->save->supportsRemove->save->remove->if->cursor->getKey->cursor->getKey->debugInfo->save->getMap->setCalleeSaveInfo
HotSpotBackend#getProviders()::: hot spot backend get providers:::return->super->getProviders
HotSpotBackend#getSuites()::: hot spot backend get suites:::return->getProviders->getSuites
HotSpotBackend#profileInstructions(LIR, CompilationResultBuilder)::: hot spot backend profile instructions:::if->lir->getOptions->getValue->HotSpotInstructionProfiling->countInstructions
HotSpotBackend#createCompiledCode(ResolvedJavaMethod, CompilationRequest, CompilationResult, boolean, OptionValues)::: hot spot backend create compiled code:::compRequest->return->HotSpotCompiledCodeBuilder->getCodeCache->createCompiledCode
HotSpotBackend#getCompilationIdentifier(ResolvedJavaMethod)::: hot spot backend get compilation identifier:::if->request->new->HotSpotCompilationRequest->return->new->HotSpotCompilationIdentifier->return->super->getCompilationIdentifier
HotSpotBackendFactory#createConstantFieldProvider(GraalHotSpotVMConfig, HotSpotMetaAccessProvider)::: hot spot backend factory create constant field provider:::return->new->HotSpotGraalConstantFieldProvider
HotSpotBackendFactory#createWordTypes(HotSpotMetaAccessProvider, TargetDescription)::: hot spot backend factory create word types:::return->new->HotSpotWordTypes
HotSpotBackendFactory#createStampProvider()::: hot spot backend factory create stamp provider:::return->new->HotSpotStampProvider
HotSpotBackendFactory#createGCProvider(GraalHotSpotVMConfig)::: hot spot backend factory create provider:::return->new->HotSpotGCProvider
HotSpotBackendFactory#createReplacements(TargetDescription, Providers, HotSpotSnippetReflectionProvider, BytecodeProvider)::: hot spot backend factory create replacements:::return->new->HotSpotReplacementsImpl
HotSpotBackendFactory#createBytecodeProvider(HotSpotMetaAccessProvider, HotSpotSnippetReflectionProvider)::: hot spot backend factory create bytecode provider:::return->new->ClassfileBytecodeProvider
HotSpotBackendFactory#createSnippetReflection(HotSpotGraalRuntimeProvider, HotSpotConstantReflectionProvider, HotSpotWordTypes)::: hot spot backend factory create snippet reflection:::return->new->HotSpotSnippetReflectionProvider
HotSpotBackendFactory#getName():::Gets the name of this backend factory:::
HotSpotBackendFactory#getArchitecture():::Gets the class describing the architecture the backend created by this factory is associated with.:::
HotSpotBackendFactory#createBackend(HotSpotGraalRuntimeProvider, CompilerConfiguration, HotSpotJVMCIRuntime, HotSpotBackend)::: hot spot backend factory create backend:::
HotSpotCodeCacheListener#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode):::Notifies this object on successful install into the CodeCache.:::
HotSpotCompilationIdentifier#isOsrCompilation()::: hot spot compilation identifier is osr compilation:::return->request->getEntryBCI
HotSpotCompilationIdentifier#toString()::: hot spot compilation identifier to string:::return->toString
HotSpotCompilationIdentifier#toString(Verbosity)::: hot spot compilation identifier to string:::return->new->StringBuilder->buildString->toString
HotSpotCompilationIdentifier#buildString(StringBuilder, Verbosity)::: hot spot compilation identifier build string:::switch->buildID->break->buildName->break->buildID->sb->append->buildName->if->isOsrCompilation->sb->append->sb->request->getEntryBCI->append->sb->append->break->throw->new->GraalError->return
HotSpotCompilationIdentifier#buildName(StringBuilder)::: hot spot compilation identifier build name:::return->sb->request->getMethod->format->append
HotSpotCompilationIdentifier#buildID(StringBuilder)::: hot spot compilation identifier build d:::if->isOsrCompilation->sb->append->else->sb->append->return->sb->request->getId->append
HotSpotCompilationIdentifier#getRequest()::: hot spot compilation identifier get request:::return
HotSpotCompiledCodeBuilder#createCompiledCode(CodeCacheProvider, ResolvedJavaMethod, HotSpotCompilationRequest, CompilationResult, OptionValues)::: hot spot compiled code builder create compiled code:::name->compResult->getName->targetCode->compResult->getTargetCode->targetCodeSize->compResult->getTargetCodeSize->sites->codeCache->shouldDebugNonSafepoints->getSortedSites->assumptions->compResult->getAssumptions->methods->compResult->getMethods->annotations->compResult->getCodeAnnotations->comments->annotations->size->new->CommentArr->if->annotations->isEmpty->for->i->data->compResult->getDataSection->dataSection->data->getSectionSize->new->byteArr->buffer->ByteBuffer->wrap->ByteOrder->nativeOrder->order->patches->new->ArrayList<>->data->patches->new->ConstantReference->new->DataPatch->add->buildDataSection->dataSectionAlignment->data->getSectionAlignment->dataSectionPatches->patches->patches->size->new->DataPatchArr->toArray->totalFrameSize->compResult->getTotalFrameSize->customStackArea->compResult->getCustomStackArea->isImmutablePIC->compResult->isImmutablePIC->if->hsMethod->entryBCI->compResult->getEntryBCI->hasUnsafeAccess->compResult->hasUnsafeAccess->id->jvmciCompileState->if->compRequest->getId->compRequest->getJvmciEnv->else->hsMethod->allocateCompileId->return->new->HotSpotCompiledNmethod->else->return->new->HotSpotCompiledCode
HotSpotCompiledCodeBuilder.SiteComparator#ord(Infopoint)::: site comparator ord:::return->HOTSPOT_INFOPOINT_SORT_ORDER->get
HotSpotCompiledCodeBuilder.SiteComparator#checkCollision(Infopoint, Infopoint)::: site comparator check collision:::o1->ord->o2->ord->if->throw->new->GraalError->return
HotSpotCompiledCodeBuilder.SiteComparator#compare(Site, Site)::: site comparator compare:::if->s1IsMark->s2IsMark->if->return->s1IsInfopoint->s2IsInfopoint->if->return->if->return->checkCollision->return
HotSpotCompiledCodeBuilder#getSortedSites(CompilationResult, OptionValues, boolean):::HotSpot expects sites to be presented in ascending order of PC (see DebugInformationRecorder::add_new_pc_offset):::sites->target->getExceptionHandlers->size->target->getInfopoints->size->target->getDataPatches->size->target->getMarks->size->target->getSourceMappings->size->new->ArrayList<>->sites->target->getExceptionHandlers->addAll->sites->target->getInfopoints->addAll->sites->target->getDataPatches->addAll->sites->target->getMarks->addAll->if->sourceMappings->new->ArrayList<>->sourceMappingListIterator->target->getSourceMappings->listIterator->if->sourceMappingListIterator->hasNext->currentSource->sourceMappingListIterator->next->sourcePosition->currentSource->getSourcePosition->if->sourcePosition->isPlaceholder->sourcePosition->isSubstitution->sourceMappings->add->while->sourceMappingListIterator->hasNext->nextSource->sourceMappingListIterator->next->currentSource->getSourcePosition->if->sourcePosition->isPlaceholder->sourcePosition->isSubstitution->sourceMappings->add->sites->new->SiteComparator->sort->siteListIterator->sites->listIterator->sourceMappings->listIterator->sourcePositionSites->new->ArrayList<>->site->while->sourceMappingListIterator->hasNext->source->sourceMappingListIterator->next->if->source->getStartOffset->while->siteListIterator->hasNext->siteListIterator->next->if->source->getStartOffset->break->if->source->getStartOffset->source->getEndOffset->continue->else->sourcePosition->source->getSourcePosition->if->ShowSubstitutionSourceInfo->getValue->sourcePosition->trim->if->sourcePositionSites->source->getEndOffset->new->DebugInfo->new->Infopoint->add->sites->addAll->c->new->SiteComparator->Collections->sort->if->lastInfopoint->copy->sites->size->new->ArrayList<>->foreach->if->info->if->copy->add->else->else->copy->add->return->sites->sites->size->new->SiteArr->toArray
HotSpotCompiledCodeBuilder#verifyTrim(NodeSourcePosition)::: hot spot compiled code builder verify trim:::for->sp->sp->getCaller->return
HotSpotCounterOp#checkIncrements()::: hot spot counter op check increments:::for->i->return
HotSpotCounterOp#getDisplacementForLongIndex(TargetDescription, long)::: hot spot counter op get displacement for long index:::finalDisp->getPlatformKind->getSizeInBytes->if->NumUtil->isInt->throw->GraalError->unimplemented->return
HotSpotCounterOp.CounterProcedure#apply(int, Value, int):::Lambda interface for iterating over counters declared in this op.:::
HotSpotCounterOp#forEachCounter(CounterProcedure, TargetDescription):::Calls the CounterProcedure for each counter in ascending order of their displacement in the counter array.:::if->arrayIndex->getIndex->displacement->getDisplacementForLongIndex->proc->apply->else->displacements->new->intArr->offsetMap->EconomicMap->create->for->i->Arrays->sort->foreach->idx->offsetMap->get->proc->apply
HotSpotCounterOp#getIndex(String, String, Value)::: hot spot counter op get index:::if->isJavaConstant->return->BenchmarkCounters->asJavaConstant->asLong->getIndexConstantIncrement->return->BenchmarkCounters->getIndex
HotSpotCounterOp#patchCounterIncrement(Assembler, int[]):::Patches the increment value in the instruction emitted by this instruction:::throw->GraalError->unimplemented
HotSpotCounterOp#asLong(JavaConstant)::: hot spot counter op as long:::kind->value->getJavaKind->switch->return->value->asInt->return->value->asLong->throw->new->IllegalArgumentException
HotSpotCounterOp#asInt(JavaConstant)::: hot spot counter op as int:::l->asLong->if->NumUtil->isInt->throw->GraalError->shouldNotReachHere->return
HotSpotCounterOp#getNames()::: hot spot counter op get names:::return
HotSpotCounterOp#getGroups()::: hot spot counter op get groups:::return
HotSpotDataBuilder#createDataItem(Constant)::: hot spot data builder create data item:::if->JavaConstant->isNull->compressed->COMPRESSED_NULL->equals->size->return->ZeroData->create->else->if->vmConstant->if->throw->String->valueOf->new->GraalError->c->size->c->isCompressed->return->new->Data->else->if->s->return->new->SerializableData->else->throw->String->valueOf->new->GraalError
HotSpotDebugInfoBuilder#lockStack()::: hot spot debug info builder lock stack:::return
HotSpotDebugInfoBuilder#maxInterpreterFrameSize()::: hot spot debug info builder max interpreter frame size:::return
HotSpotDebugInfoBuilder#computeLockValue(FrameState, int)::: hot spot debug info builder compute lock value:::lockDepth->if->state->outerFrameState->state->outerFrameState->nestedLockDepth->slot->lockStack->makeLockSlot->lock->state->lockAt->object->toJavaValue->eliminated->state->monitorIdAt->isEliminated->return->new->StackLockValue
HotSpotDebugInfoBuilder#computeFrameForState(FrameState)::: hot spot debug info builder compute frame for state:::if->isPlaceholderBci->raiseInvalidFrameStateError->result->super->computeFrameForState->Math->codeCacheProvider->interpreterFrameSize->max->return
HotSpotDebugInfoBuilder#raiseInvalidFrameStateError(FrameState)::: hot spot debug info builder raise invalid frame state error:::sourcePosition->state->getNodeSourcePosition->context->new->ArrayList<>->replacementMethodWithProblematicSideEffect->if->pos->while->sb->new->StringBuilder->method->pos->getMethod->MetaUtil->pos->getBCI->appendLocation->if->method->getAnnotation->method->getAnnotation->context->sb->toString->add->pos->getCaller->message->if->replacementMethodWithProblematicSideEffect->format->error->new->GraalGraphError->foreach->error->addContext->throw
HotSpotForeignCallLinkage#isReexecutable():::Determines if the call has side effects.:::
HotSpotForeignCallLinkage#getKilledLocations()::: hot spot foreign call linkage get killed locations:::
HotSpotForeignCallLinkage#setCompiledStub(Stub)::: hot spot foreign call linkage set compiled stub:::
HotSpotForeignCallLinkage#isCompiledStub():::Determines if this is a call to a compiled Stub stub.:::
HotSpotForeignCallLinkage#getStub():::Gets the stub, if any, this foreign call links to.:::
HotSpotForeignCallLinkage#finalizeAddress(Backend)::: hot spot foreign call linkage finalize address:::
HotSpotForeignCallLinkage#getAddress()::: hot spot foreign call linkage get address:::
HotSpotForeignCallLinkage#mayContainFP():::Determines if the runtime function or stub might use floating point registers:::
HotSpotForeignCallLinkage#needsJavaFrameAnchor():::Determines if a JavaFrameAnchor needs to be set up and torn down around this call.:::
HotSpotForeignCallLinkage#getSymbol():::Gets the VM symbol associated with the target #getAddress() address of the call.:::
HotSpotForeignCallLinkage#isGuaranteedSafepoint():::Identifies foreign calls which are guaranteed to include a safepoint check.:::
HotSpotForeignCallLinkageImpl#create(MetaAccessProvider, CodeCacheProvider, WordTypes, HotSpotForeignCallsProvider, ForeignCallDescriptor, long, RegisterEffect, Type, Type, Transition, Reexecutability, LocationIdentity...):::Creates a HotSpotForeignCallLinkage.:::outgoingCc->createCallingConvention->incomingCc->createCallingConvention->linkage->new->HotSpotForeignCallLinkageImpl->if->foreignCalls->getNativeABICallerSaveRegisters->return
HotSpotForeignCallLinkageImpl#createCallingConvention(MetaAccessProvider, CodeCacheProvider, WordTypes, ValueKindFactory, ForeignCallDescriptor, Type):::Gets a calling convention for a given descriptor and call type.:::argumentTypes->descriptor->getArgumentTypes->parameterTypes->new->JavaTypeArr->for->i->returnType->descriptor->getResultType->asJavaType->regConfig->codeCache->getRegisterConfig->return->regConfig->getCallingConvention
HotSpotForeignCallLinkageImpl#asJavaType(Class, MetaAccessProvider, WordTypes)::: hot spot foreign call linkage impl as java type:::javaType->metaAccess->lookupJavaType->if->wordTypes->isWord->metaAccess->wordTypes->getWordKind->toJavaClass->lookupJavaType->return
HotSpotForeignCallLinkageImpl#toString()::: hot spot foreign call linkage impl to string:::sb->descriptor->toString->stub->toString->new->StringBuilder->sb->append->Long->toHexString->append->append->append->append->append->if->sb->append->sep->foreach->sb->append->append->return->sb->toString
HotSpotForeignCallLinkageImpl#isReexecutable()::: hot spot foreign call linkage impl is reexecutable:::return
HotSpotForeignCallLinkageImpl#isGuaranteedSafepoint()::: hot spot foreign call linkage impl is guaranteed safepoint:::return
HotSpotForeignCallLinkageImpl#getKilledLocations()::: hot spot foreign call linkage impl get killed locations:::return
HotSpotForeignCallLinkageImpl#getOutgoingCallingConvention()::: hot spot foreign call linkage impl get outgoing calling convention:::return
HotSpotForeignCallLinkageImpl#getIncomingCallingConvention()::: hot spot foreign call linkage impl get incoming calling convention:::return
HotSpotForeignCallLinkageImpl#getTemporaries()::: hot spot foreign call linkage impl get temporaries:::if->return->return->temporaries->clone
HotSpotForeignCallLinkageImpl#getMaxCallTargetOffset()::: hot spot foreign call linkage impl get max call target offset:::return->runtime->getHostJVMCIBackend->getCodeCache->getMaxCallTargetOffset
HotSpotForeignCallLinkageImpl#getDescriptor()::: hot spot foreign call linkage impl get descriptor:::return
HotSpotForeignCallLinkageImpl#setCompiledStub(Stub)::: hot spot foreign call linkage impl set compiled stub:::
HotSpotForeignCallLinkageImpl#isCompiledStub():::Determines if this is a call to a compiled Stub stub.:::return
HotSpotForeignCallLinkageImpl#getStub()::: hot spot foreign call linkage impl get stub:::return
HotSpotForeignCallLinkageImpl#checkStubCondition()::: hot spot foreign call linkage impl check stub condition:::return
HotSpotForeignCallLinkageImpl#finalizeAddress(Backend)::: hot spot foreign call linkage impl finalize address:::if->code->stub->getCode->destroyedRegisters->stub->getDestroyedCallerRegisters->if->destroyedRegisters->isEmpty->temporaryLocations->destroyedRegisters->size->new->AllocatableValueArr->i->foreach->reg->asValue->code->getStart
HotSpotForeignCallLinkageImpl#getAddress()::: hot spot foreign call linkage impl get address:::return
HotSpotForeignCallLinkageImpl#destroysRegisters()::: hot spot foreign call linkage impl destroys registers:::return
HotSpotForeignCallLinkageImpl#needsDebugInfo()::: hot spot foreign call linkage impl needs debug info:::return
HotSpotForeignCallLinkageImpl#mayContainFP()::: hot spot foreign call linkage impl may contain p:::return
HotSpotForeignCallLinkageImpl#needsJavaFrameAnchor()::: hot spot foreign call linkage impl needs java frame anchor:::if->if->return->else->return->return
HotSpotForeignCallLinkageImpl#getSymbol()::: hot spot foreign call linkage impl get symbol:::return->stub->toString
HotSpotGraalCompiler#getDebugHandlersFactories()::: hot spot graal compiler get debug handlers factories:::if->Collections->graalRuntime->getHostProviders->getSnippetReflection->new->GraalDebugHandlersFactory->singletonList->return
HotSpotGraalCompiler#getGraalRuntime()::: hot spot graal compiler get graal runtime:::return
HotSpotGraalCompiler#compileMethod(CompilationRequest)::: hot spot graal compiler compile method:::return->graalRuntime->getOptions->compileMethod
HotSpotGraalCompiler#compileMethod(CompilationRequest, boolean, OptionValues)::: hot spot graal compiler compile method:::try->scope->HotSpotGraalServices->openLocalCompilationContext->if->graalRuntime->isShutdown->return->HotSpotCompilationRequestResult->String->format->failure->method->request->getMethod->if->graalRuntime->isBootstrapping->if->getValue->return->HotSpotCompilationRequestResult->String->getName->format->failure->if->if->bootstrapWatchDog->hitCriticalCompilationRateOrTimeout->return->HotSpotCompilationRequestResult->failure->hsRequest->task->hsRequest->getJvmciEnv->shouldRetainLocalVariables->new->CompilationTask->options->task->filterOptions->try->w1->CompilationWatchDog->hsRequest->getId->watch->w2->bootstrapWatchDog->watch->alarm->CompilationAlarm->trackCompilationPeriod->if->compilationCounters->countCompilation->r->try->debug->graalRuntime->task->getCompilationIdentifier->getDebugHandlersFactories->openDebugContext->a->debug->activate->task->runCompilation->catch->finally->return->catch->finally->catch->finally
HotSpotGraalCompiler#shouldRetainLocalVariables(long)::: hot spot graal compiler should retain local variables:::config->graalRuntime->getVMConfig->if->return->if->if->UNSAFE->getByte->return->if->if->UNSAFE->getByte->return->return
HotSpotGraalCompiler#isCancelled()::: hot spot graal compiler is cancelled:::return->graalRuntime->isShutdown
HotSpotGraalCompiler#createGraph(ResolvedJavaMethod, int, boolean, CompilationIdentifier, OptionValues, DebugContext)::: hot spot graal compiler create graph:::backend->graalRuntime->getHostBackend->providers->backend->getProviders->isOSR->graph->method->isNative->providers->getReplacements->getIntrinsicGraph->if->speculationLog->method->getSpeculationLog->if->speculationLog->collectFailedSpeculations->AllowAssumptions->OptAssumptions->getValue->ifTrue->new->StructuredGraph.Builder->method->cancellable->entryBCI->speculationLog->useProfilingInfo->compilationId->build->return
HotSpotGraalCompiler#compileHelper(CompilationResultBuilderFactory, CompilationResult, StructuredGraph, ResolvedJavaMethod, int, boolean, OptionValues)::: hot spot graal compiler compile helper:::return->compileHelper
HotSpotGraalCompiler#compileHelper(CompilationResultBuilderFactory, CompilationResult, StructuredGraph, ResolvedJavaMethod, int, boolean, boolean, OptionValues)::: hot spot graal compiler compile helper:::backend->graalRuntime->getHostBackend->providers->backend->getProviders->isOSR->suites->getSuites->lirSuites->getLIRSuites->profilingInfo->method->getProfilingInfo->DefaultProfilingInfo->get->optimisticOpts->getOptimisticOpts->if->getValue->optimisticOpts->remove->result->setEntryBCI->shouldDebugNonSafepoints->providers->getCodeCache->shouldDebugNonSafepoints->graphBuilderSuite->providers->getSuites->getDefaultGraphBuilderSuite->configGraphBuilderSuite->GraalCompiler->compileGraph->if->profile->profile->graph->getNodeCount->setCompilerIRSize->return
HotSpotGraalCompiler#compile(ResolvedJavaMethod, int, boolean, boolean, CompilationIdentifier, DebugContext)::: hot spot graal compiler compile:::graph->debug->getOptions->createGraph->result->new->CompilationResult->return->debug->getOptions->compileHelper
HotSpotGraalCompiler#getOptimisticOpts(ProfilingInfo, OptionValues)::: hot spot graal compiler get optimistic opts:::return->new->OptimisticOptimizations
HotSpotGraalCompiler#getSuites(HotSpotProviders, OptionValues)::: hot spot graal compiler get suites:::return->providers->getSuites->getDefaultSuites
HotSpotGraalCompiler#getLIRSuites(HotSpotProviders, OptionValues)::: hot spot graal compiler get suites:::return->providers->getSuites->getDefaultLIRSuites
HotSpotGraalCompiler#configGraphBuilderSuite(PhaseSuite, boolean, boolean, boolean):::Reconfigures a given graph builder suite (GBS) if one of the given GBS parameter values is not the default.:::if->newGbs->suite->copy->graphBuilderPhase->newGbs->findPhase->previous->graphBuilderConfig->graphBuilderPhase->getGraphBuilderConfig->if->graphBuilderConfig->withNodeSourcePosition->if->graphBuilderConfig->withRetainLocalVariables->newGraphBuilderPhase->new->GraphBuilderPhase->newGbs->findPhase->set->if->newGbs->new->OnStackReplacementPhase->appendPhase->return->return
HotSpotGraalCompiler#str(JavaMethod):::Converts method to a String with JavaMethod#format(String) and the format string "%H.%n(%p)".:::return->method->format
HotSpotGraalCompiler#fmt(Object):::Wraps obj in a Formatter that standardizes formatting for certain objects.:::return->new->Formattable
HotSpotGraalCompilerFactory#getCompilerName()::: hot spot graal compiler factory get compiler name:::return
HotSpotGraalCompilerFactory#onSelection()::: hot spot graal compiler factory on selection:::JVMCIVersionCheck->Services->getSavedProperties->check->HotSpotGraalOptionValues->defaultOptions->initializeGraalCompilePolicyFields->new->IsGraalPredicate->if->isGraalPredicate->getCompilationLevelAdjustment->adjustCompilationLevelInternal->adjustCompilationLevelInternal->if->getName
HotSpotGraalCompilerFactory#initializeGraalCompilePolicyFields(OptionValues)::: hot spot graal compiler factory initialize graal compile policy fields:::getValue->optionValue->getValue->if->filter->MethodFilter->parse->if
HotSpotGraalCompilerFactory#printProperties(PrintStream)::: hot spot graal compiler factory print properties:::out->println->options->OptionsParser->getOptionsLoader->printHelp
HotSpotGraalCompilerFactory#createCompiler(JVMCIRuntime)::: hot spot graal compiler factory create compiler:::factory->CompilerConfigurationFactory->selectFactory->if->isGraalPredicate->onCompilerConfigurationFactorySelection->compiler->createCompiler->locator->onCompilerCreation->return
HotSpotGraalCompilerFactory#createCompiler(String, JVMCIRuntime, OptionValues, CompilerConfigurationFactory):::Creates a new HotSpotGraalRuntime object and a new HotSpotGraalCompiler and returns the latter.:::jvmciRuntime->try->t->timer->graalRuntime->new->HotSpotGraalRuntime->return->graalRuntime->getOptions->new->HotSpotGraalCompiler->catch->finally
HotSpotGraalCompilerFactory#getCompilationLevelAdjustment()::: hot spot graal compiler factory get compilation level adjustment:::return->isGraalPredicate->getCompilationLevelAdjustment
HotSpotGraalCompilerFactory#adjustCompilationLevel(Object, String, String, boolean, CompilationLevel)::: hot spot graal compiler factory adjust compilation level:::declaringClass->return->adjustCompilationLevelInternal
HotSpotGraalCompilerFactory#adjustCompilationLevelInternal(Class, CompilationLevel)::: hot spot graal compiler factory adjust compilation level internal:::if->level->ordinal->ordinal->if->isGraalPredicate->apply->return->return
HotSpotGraalCompilerFactory#shouldExclude(HotSpotResolvedJavaMethod)::: hot spot graal compiler factory should exclude:::if->javaClassName->method->getDeclaringClass->toJavaName->name->method->getName->signature->method->getSignature->foreach->if->filter->matches->return->return->return
HotSpotGraalJVMCIServiceLocator.Shared#getProvider(Class, HotSpotGraalJVMCIServiceLocator)::: shared get provider:::if->return->service->new->HotSpotGraalCompilerFactory->cast->else->if->if->return->service->new->HotSpotGraalVMEventListener->cast->return
HotSpotGraalJVMCIServiceLocator.Shared#onCompilerCreation(HotSpotGraalCompiler):::Notifies this object of the compiler created via HotSpotGraalJVMCIServiceLocator.:::compiler->getGraalRuntime
HotSpotGraalJVMCIServiceLocator#getProvider(Class)::: hot spot graal service locator get provider:::return->getProvider
HotSpotGraalJVMCIServiceLocator#onCompilerCreation(HotSpotGraalCompiler):::Notifies this object of the compiler created via HotSpotGraalJVMCIServiceLocator.:::onCompilerCreation
HotSpotGraalManagementRegistration#initialize(HotSpotGraalRuntime):::Completes the initialization of this registration by recording the HotSpotGraalRuntime the MBean will provide an JMX interface to.:::
HotSpotGraalManagementRegistration#poll(boolean):::Polls this registration to see if the MBean is registered in a MBean server.:::
HotSpotGraalOptionValues#asSystemPropertySetting(OptionValues, OptionKey):::Gets the system property assignment that would set the current value for a given option.:::return->value->getName->value->getValue
HotSpotGraalOptionValues#defaultOptions()::: hot spot graal option values default options:::res->if->synchronized->if->initializeOptions->return
HotSpotGraalOptionValues#parseOptions():::Gets and parses options based on Services#getSavedProperties() saved system properties:::values->OptionValues->newOptionMap->try->t->timer->loader->OptionsParser->getOptionsLoader->savedProps->getSavedProperties->optionsFile->savedProps->get->if->graalOptions->new->File->if->graalOptions->exists->try->fr->new->FileReader->props->new->Properties->props->load->optionSettings->EconomicMap->create->foreach->props->entrySet->optionSettings->e->getKey->e->getValue->put->try->OptionsParser->parseOptions->catch->throw->new->InternalError->finally->catch->throw->new->InternalError->finally->optionSettings->EconomicMap->create->foreach->savedProps->entrySet->name->e->getKey->if->name->startsWith->if->name->equals->name->equals->println->else->if->name->equals->name->equals->else->value->e->getValue->optionSettings->name->GRAAL_OPTION_PROPERTY_PREFIX->length->substring->put->OptionsParser->parseOptions->return->catch->finally
HotSpotGraalOptionValues#initializeOptions():::Substituted by com.oracle.svm.graal.hotspot.libgraal.Target_org_graalvm_compiler_hotspot_HotSpotGraalOptionValues to update com.oracle.svm.core.option.RuntimeOptionValues.singleton() instead of creating a new OptionValues object.:::return->parseOptions->new->OptionValues
HotSpotGraalRuntime#checkArrayIndexScaleInvariants(MetaAccessProvider)::: hot spot graal runtime check array index scale invariants:::return
HotSpotGraalRuntime#getSelectedGC()::: hot spot graal runtime get selected c:::foreach->HotSpotGC->values->if->gc->isSelected->if->throw->gc->name->new->GraalError->return->return
HotSpotGraalRuntime#registerBackend(HotSpotBackend)::: hot spot graal runtime register backend:::arch->backend->getTarget->getClass->oldValue->backends->put->return
HotSpotGraalRuntime#getHostProviders()::: hot spot graal runtime get host providers:::return->getHostBackend->getProviders
HotSpotGraalRuntime#getVMConfig()::: hot spot graal runtime get config:::return
HotSpotGraalRuntime#openDebugContext(OptionValues, CompilationIdentifier, Object, Iterable, PrintStream)::: hot spot graal runtime open debug context:::if->management->poll->if->type->getDeclaringClass->if->clazz->runtime->getMirror->try->cl->clazz->getClassLoader->if->loaders->add->catch->finally->description->compilationId->toString->new->Description->return->DebugContext->create
HotSpotGraalRuntime#getOptions()::: hot spot graal runtime get options:::return->optionsRef->get
HotSpotGraalRuntime#createSnippetCounterGroup(String)::: hot spot graal runtime create snippet counter group:::if->group->new->Group->snippetCounterGroups->add->return->return
HotSpotGraalRuntime#getName()::: hot spot graal runtime get name:::return
HotSpotGraalRuntime#getCapability(Class)::: hot spot graal runtime get capability:::if->return->else->if->return->optionsRef->get->else->if->return->else->if->return->getHostProviders->getSnippetReflection->else->if->return->getVMConfig->else->if->return->getHostProviders->getStampProvider->else->if->isAssignableFrom->return->getHostProviders->getForeignCalls->return
HotSpotGraalRuntime#getGarbageCollector()::: hot spot graal runtime get garbage collector:::return
HotSpotGraalRuntime#getHostBackend()::: hot spot graal runtime get host backend:::return
HotSpotGraalRuntime#getBackend(Class)::: hot spot graal runtime get backend:::return->backends->get
HotSpotGraalRuntime#getCompilerConfigurationName()::: hot spot graal runtime get compiler configuration name:::return
HotSpotGraalRuntime#phaseTransition(String):::Take action related to entering a new execution phase.:::if->optionsRef->get->getValue->CompilationStatistics->clear
HotSpotGraalRuntime#shutdown()::: hot spot graal runtime shutdown:::metricValues->optionsRef->get->print->phaseTransition->if->foreach->TTY->out->out->println->BenchmarkCounters->runtime->optionsRef->get->shutdown->outputDirectory->close->shutdownLibGraal
HotSpotGraalRuntime#shutdownLibGraal():::Substituted by com.oracle.svm.graal.hotspot.libgraal.Target_org_graalvm_compiler_hotspot_HotSpotGraalRuntime to call org.graalvm.nativeimage.VMRuntime.shutdown().:::
HotSpotGraalRuntime#clearMetrics()::: hot spot graal runtime clear metrics:::metricValues->clear
HotSpotGraalRuntime#notifyBootstrapFinished()::: hot spot graal runtime notify bootstrap finished:::
HotSpotGraalRuntime#isBootstrapping()::: hot spot graal runtime is bootstrapping:::return
HotSpotGraalRuntime#isShutdown()::: hot spot graal runtime is shutdown:::return
HotSpotGraalRuntime#getOutputDirectory()::: hot spot graal runtime get output directory:::return
HotSpotGraalRuntime#getCompilationProblemsPerAction()::: hot spot graal runtime get compilation problems per action:::return
HotSpotGraalRuntime#getManagement()::: hot spot graal runtime get management:::return
HotSpotGraalRuntime#setOptionValues(String[], String[]):::Sets or updates this object's #getOptions() options from names and values.:::optionDescriptors->getOptionDescriptors->newValues->EconomicMap->create->resetValues->EconomicSet->create->result->new->StringArr->for->i->currentOptions->newOptions->do->optionsRef->get->cursor->currentOptions->getMap->getEntries->while->cursor->advance->key->cursor->getKey->if->resetValues->contains->newValues->containsKey->newValues->OptionValues->cursor->getValue->decodeNull->put->new->OptionValues->while->optionsRef->compareAndSet->return
HotSpotGraalRuntime#getOptionValues(String...):::Gets the values for the options corresponding to names encoded as strings:::values->new->StringArr->optionDescriptors->getOptionDescriptors->for->i->return
HotSpotGraalRuntime#getOptionDescriptors()::: hot spot graal runtime get option descriptors:::result->EconomicMap->create->foreach->OptionsParser->getOptionsLoader->foreach->result->option->getName->put->return
HotSpotGraalRuntime#dumpMethod(String, String, String, String, int)::: hot spot graal runtime dump method:::failures->EconomicSet->create->found->loaders->resolve->if->found->isEmpty->cause->failures->isEmpty->new->ClassNotFoundException->failures->iterator->next->throw->new->Exception->foreach->type->JVMCI->getRuntime->getHostJVMCIBackend->getMetaAccess->lookupJavaType->foreach->type->getDeclaredMethods->if->methodName->method->getName->equals->hotSpotMethod->dumpMethod
HotSpotGraalRuntime#dumpMethod(HotSpotResolvedJavaMethod, String, String, int)::: hot spot graal runtime dump method:::extra->EconomicMap->create->extra->put->extra->put->extra->put->compileOptions->getOptions->new->OptionValues->compiler->runtime->getCompiler->compiler->new->HotSpotCompilationRequest->compileMethod
HotSpotGraalRuntime#invokeManagementAction(String, Object[])::: hot spot graal runtime invoke management action:::if->equals->if->method->param->filter->param->host->param->port->param->port->intValue->dumpMethod->else->className->param->methodName->param->filter->param->host->param->port->param->port->intValue->dumpMethod->return
HotSpotGraalRuntime#param(Object[], int, String, Class, T)::: hot spot graal runtime param:::value->if->isEmpty->if->throw->new->IllegalArgumentException->if->type->isInstance->return->type->cast->throw->type->getName->new->IllegalArgumentException
HotSpotGraalRuntimeProvider#getTarget()::: hot spot graal runtime provider get target:::return->getHostBackend->getTarget
HotSpotGraalRuntimeProvider#getHostProviders()::: hot spot graal runtime provider get host providers:::
HotSpotGraalRuntimeProvider#getName()::: hot spot graal runtime provider get name:::return->getClass->getSimpleName
HotSpotGraalRuntimeProvider#getHostBackend()::: hot spot graal runtime provider get host backend:::
HotSpotGraalRuntimeProvider#getVMConfig()::: hot spot graal runtime provider get config:::
HotSpotGraalRuntimeProvider#openDebugContext(OptionValues, CompilationIdentifier, Object, Iterable, PrintStream):::Opens a debug context for compiling compilable:::
HotSpotGraalRuntimeProvider#getOptions():::Gets the option values associated with this runtime.:::
HotSpotGraalRuntimeProvider#isBootstrapping():::Determines if the VM is currently bootstrapping the JVMCI compiler.:::
HotSpotGraalRuntimeProvider#isShutdown():::This runtime has been requested to shutdown.:::
HotSpotGraalRuntimeProvider#getOutputDirectory():::Gets a directory into which diagnostics such crash reports and dumps should be written.:::
HotSpotGraalRuntimeProvider#getCompilationProblemsPerAction():::Gets the map used to count compilation problems at each ExceptionAction level:::
HotSpotGraalRuntimeProvider#getCompilerConfigurationName():::Returns the unique compiler configuration name that is in use:::
HotSpotGraalServices#getImplicitExceptionBytes(HotSpotMetaData):::Get the implicit exceptions section of a HotSpotMetaData if it exists.:::return->metaData->implicitExceptionBytes
HotSpotGraalServices#enterGlobalCompilationContext()::: hot spot graal services enter global compilation context:::return
HotSpotGraalServices#openLocalCompilationContext(Object)::: hot spot graal services open local compilation context:::return
HotSpotGraalServices#exit(int)::: hot spot graal services exit:::System->exit
HotSpotGraalVMEventListener#notifyShutdown()::: hot spot graal event listener notify shutdown:::runtime->shutdown
HotSpotGraalVMEventListener#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode)::: hot spot graal event listener notify install:::debug->DebugContext->forCurrentThread->if->debug->isDumpEnabled->compResult->debug->contextLookup->debug->dump->if->debug->isLogEnabled->debug->codeCache->disassemble->log->foreach->listener->notifyInstall
HotSpotGraalVMEventListener#notifyBootstrapFinished()::: hot spot graal event listener notify bootstrap finished:::runtime->notifyBootstrapFinished->if->runtime->getOptions->getValue->runtime->clearMetrics
HotSpotHostBackend#completeInitialization(HotSpotJVMCIRuntime, OptionValues)::: hot spot host backend complete initialization:::providers->getProviders->foreignCalls->providers->getForeignCalls->lowerer->providers->getLowerer->try->st->timer->foreignCalls->initialize->catch->finally->try->st->timer->factories->Collections->providers->getSnippetReflection->new->GraalDebugHandlersFactory->singletonList->lowerer->initialize->catch->finally->providers->getReplacements->closeSnippetRegistration
HotSpotHostBackend#makeCallingConvention(StructuredGraph, Stub)::: hot spot host backend make calling convention:::if->return->stub->getLinkage->getIncomingCallingConvention->cc->getCodeCache->graph->method->getCallingConvention->if->graph->getEntryBCI->parameterTypes->new->JavaTypeArr->getMetaAccess->lookupJavaType->tmp->getCodeCache->getRegisterConfig->getMetaAccess->lookupJavaType->getCallingConvention->cc->getStackSize->cc->getReturn->tmp->getArgument->new->CallingConvention->return
HotSpotHostBackend#emitStackOverflowCheck(CompilationResultBuilder)::: hot spot host backend emit stack overflow check:::if->pageSize->bangEnd->NumUtil->roundUp->bangEndSafe->frameSize->Math->frameSize->getMaxInterpreterFrameSize->max->if->bangOffset->if->crb->blockComment->while->bangStackWithOffset
HotSpotHostBackend#bangStackWithOffset(CompilationResultBuilder, int)::: hot spot host backend bang stack with offset:::
HotSpotHostBackend#newReferenceMapBuilder(int)::: hot spot host backend new reference map builder:::uncompressedReferenceSize->getTarget->getPlatformKind->getSizeInBytes->return->new->HotSpotReferenceMapBuilder
HotSpotInstructionProfiling#run(TargetDescription, LIRGenerationResult, PostAllocationOptimizationContext)::: hot spot instruction profiling run:::lirGenRes->getCompilationUnitName->lirGenRes->getLIR->new->Analyzer->run
HotSpotInstructionProfiling.Analyzer#run()::: analyzer run:::foreach->lir->getControlFlowGraph->getBlocks->doBlock
HotSpotInstructionProfiling.Analyzer#doBlock(AbstractBlockBase)::: analyzer do block:::instructions->lir->getLIRforBlock->names->new->StringArr->groups->new->StringArr->increments->new->ValueArr->for->i->op->diagnosticLirGenTool->createMultiBenchmarkCounter->inst->new->InstructionCounterOp->buffer->init->buffer->append->buffer->finish
HotSpotInstructionProfiling#countInstructions(LIR, Assembler):::After assembly the HotSpotBackend#profileInstructions(LIR, CompilationResultBuilder) calls this method for patching the instruction counts into the counter increment code.:::lastOp->counter->asm->getInstructionCounter->foreach->lir->codeEmittingOrder->if->continue->foreach->lir->getLIRforBlock->if->currentOp->if->beginPc->endPc->instructionCounts->counter->countInstructions->patchCounterIncrement->if->beginPc->endPc->asm->position->instructionCounts->counter->countInstructions->patchCounterIncrement
HotSpotInstructionProfiling.InstructionCounterOp#emitCode(CompilationResultBuilder)::: instruction counter op emit code:::position->emitCode->position
HotSpotInstructionProfiling.InstructionCounterOp#getInstructionsToProfile()::: instruction counter op get instructions to profile:::return
HotSpotLIRGenerationResult#getCalleeSaveInfo()::: hot spot generation result get callee save info:::return
HotSpotLIRGenerationResult#getStub()::: hot spot generation result get stub:::return
HotSpotLIRGenerationResult#getDeoptimizationRescueSlot()::: hot spot generation result get deoptimization rescue slot:::return
HotSpotLIRGenerationResult#setDeoptimizationRescueSlot(StackSlot)::: hot spot generation result set deoptimization rescue slot:::
HotSpotLIRGenerationResult#setMaxInterpreterFrameSize(int)::: hot spot generation result set max interpreter frame size:::
HotSpotLIRGenerationResult#getMaxInterpreterFrameSize()::: hot spot generation result get max interpreter frame size:::return
HotSpotLIRGenerationResult#requiresReservedStackAccessCheck()::: hot spot generation result requires reserved stack access check:::return
HotSpotLIRGenerator#emitTailcall(Value[], Value):::Emits an operation to make a tail call.:::
HotSpotLIRGenerator#emitDeoptimizeCaller(DeoptimizationAction, DeoptimizationReason)::: hot spot generator emit deoptimize caller:::
HotSpotLIRGenerator#emitLoadObjectAddress(Constant):::Emits code for a LoadConstantIndirectlyNode.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitLoadMetaspaceAddress(Constant, HotSpotConstantLoadAction):::Emits code for a LoadConstantIndirectlyNode.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitLoadConfigValue(int, LIRKind):::Emits code for a GraalHotSpotVMConfigNode.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitObjectConstantRetrieval(Constant, Value, LIRFrameState):::Emits code for a ResolveConstantNode to resolve a HotSpotObjectConstant.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitResolveDynamicInvoke(Constant, LIRFrameState):::Emits code to resolve a dynamic constant.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitMetaspaceConstantRetrieval(Constant, Value, LIRFrameState):::Emits code for a ResolveConstantNode to resolve a HotSpotMetaspaceConstant.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitResolveMethodAndLoadCounters(Constant, Value, Value, LIRFrameState):::Emits code for a ResolveMethodAndLoadCountersNode to resolve a HotSpotMetaspaceConstant that represents a ResolvedJavaMethod and return the corresponding MethodCounters object.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitKlassInitializationAndRetrieval(Constant, Value, LIRFrameState):::Emits code for a ResolveConstantNode to resolve a klass HotSpotMetaspaceConstant and run static initializer.:::throw->target->new->GraalError
HotSpotLIRGenerator#emitRandomSeed():::Emits code for a RandomSeedNode.:::throw->target->new->GraalError
HotSpotLIRGenerator#getLockSlot(int):::Gets a stack slot for a lock at a given lock nesting depth.:::
HotSpotLIRGenerator#getProviders()::: hot spot generator get providers:::
HotSpotLockStack#makeLockSlot(int):::Gets a stack slot for a lock at a given lock nesting depth, allocating it first if necessary.:::if->new->AllocatableValueArr->else->if->Arrays->copyOf->if->frameMapBuilder->allocateSpillSlot->return
HotSpotLockStack#emitCode(CompilationResultBuilder)::: hot spot lock stack emit code:::
HotSpotNodeLIRBuilder#emitPatchReturnAddress(ValueNode)::: hot spot node builder emit patch return address:::
HotSpotNodeLIRBuilder#emitJumpToExceptionHandler(ValueNode)::: hot spot node builder emit jump to exception handler:::emitPatchReturnAddress
HotSpotNodeLIRBuilder#emitJumpToExceptionHandlerInCaller(ValueNode, ValueNode, ValueNode)::: hot spot node builder emit jump to exception handler in caller:::
HotSpotReferenceMapBuilder#addLiveValue(Value)::: hot spot reference map builder add live value:::if->isJavaConstant->return->lirKind->v->getValueKind->if->lirKind->isValue->objectValues->add->if->lirKind->isUnknownReference->else->lirKind->getReferenceCount->if->isRegister->size->lirKind->getPlatformKind->getSizeInBytes->if
HotSpotReferenceMapBuilder#finish(LIRFrameState)::: hot spot reference map builder finish:::objects->derivedBase->sizeInBytes->if->else->new->LocationArr->new->LocationArr->new->intArr->idx->foreach->kind->obj->getValueKind->bytes->bytesPerElement->if->kind->isUnknownReference->throw->GraalError->String->format->shouldNotReachHere->else->base->if->kind->isDerivedReference->baseVariable->kind->getDerivedReferenceBase->baseValue->state->getLiveBasePointers->get->toLocation->for->i->kind->getPlatformKind->getVectorLength->return->new->HotSpotReferenceMap
HotSpotReferenceMapBuilder#bytesPerElement(LIRKind)::: hot spot reference map builder bytes per element:::platformKind->kind->getPlatformKind->return->platformKind->getSizeInBytes->platformKind->getVectorLength
HotSpotReferenceMapBuilder#toLocation(Value, int)::: hot spot reference map builder to location:::if->isRegister->return->Location->asRegister->subregister->else->s->asStackSlot->totalOffset->s->getOffset->if->throw->new->PermanentBailoutException->return->Location->stack
HotSpotReplacementsImpl#getIntrinsifyingPlugin(ResolvedJavaMethod)::: hot spot replacements impl get intrinsifying plugin:::return->method->getAnnotation->super->getIntrinsifyingPlugin
HotSpotReplacementsImpl#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues)::: hot spot replacements impl register method substitution:::if->if->UseEncodedGraphs->getValue->synchronized->if->new->SymbolicSnippetEncoder->snippetEncoder->registerMethodSubstitution
HotSpotReplacementsImpl#getIntrinsicGraph(ResolvedJavaMethod, CompilationIdentifier, DebugContext, Cancellable)::: hot spot replacements impl get intrinsic graph:::useEncodedGraphs->UseEncodedGraphs->debug->getOptions->getValue->if->replacements->providers->getReplacements->plugin->replacements->getGraphBuilderPlugins->getInvocationPlugins->lookupInvocation->if->msp->if->replacements->debug->getOptions->registerMethodSubstitution->methodSubstitution->replacements->debug->getOptions->getMethodSubstitution->methodSubstitution->resetDebug->return->return->return->super->getIntrinsicGraph
HotSpotReplacementsImpl#getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues)::: hot spot replacements impl get substitution:::useEncodedGraphs->UseEncodedGraphs->getValue->if->plugin->getGraphBuilderPlugins->getInvocationPlugins->lookupInvocation->if->plugin->inlineOnly->msPlugin->if->registerMethodSubstitution->subst->getMethodSubstitution->return->return->super->getSubstitution
HotSpotReplacementsImpl#notifyNotInlined(GraphBuilderContext, ResolvedJavaMethod, Invoke)::: hot spot replacements impl notify not inlined:::if->b->parsingIntrinsic->if->getIntrinsifyingPlugin->snippetEncoder->addDelayedInvocationPluginMethod->return->super->notifyNotInlined
HotSpotReplacementsImpl#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues)::: hot spot replacements impl register snippet:::if->if->UseEncodedGraphs->getValue->synchronized->if->new->SymbolicSnippetEncoder->snippetEncoder->registerSnippet
HotSpotReplacementsImpl#closeSnippetRegistration()::: hot spot replacements impl close snippet registration:::
HotSpotReplacementsImpl#getEncodedSnippets()::: hot spot replacements impl get encoded snippets:::return
HotSpotReplacementsImpl#getSnippetMethods()::: hot spot replacements impl get snippet methods:::if->return->snippetEncoder->getSnippetMethods->return
HotSpotReplacementsImpl#setEncodedSnippets(SymbolicSnippetEncoder.EncodedSnippets)::: hot spot replacements impl set encoded snippets:::
HotSpotReplacementsImpl#encode(OptionValues)::: hot spot replacements impl encode:::encoder->if->return->encoder->encode->return
HotSpotReplacementsImpl#getSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, OptionValues)::: hot spot replacements impl get snippet:::graph->getEncodedSnippet->if->return->return->super->getSnippet
HotSpotReplacementsImpl#getEncodedSnippet(ResolvedJavaMethod, Object[], StructuredGraph.AllowAssumptions, OptionValues)::: hot spot replacements impl get encoded snippet:::useEncodedGraphs->UseEncodedGraphs->getValue->if->synchronized->if->snippetEncoder->encode->if->getEncodedSnippets->throw->GraalError->shouldNotReachHere->try->scope->HotSpotGraalServices->enterGlobalCompilationContext->graph->getEncodedSnippets->getEncodedSnippet->if->throw->GraalError->method->format->shouldNotReachHere->return->catch->finally->else->return
HotSpotReplacementsImpl#getMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)::: hot spot replacements impl get method substitution:::useEncodedGraphs->UseEncodedGraphs->getValue->if->if->snippetEncoder->encode->if->getEncodedSnippets->throw->GraalError->shouldNotReachHere->return->getEncodedSnippets->getMethodSubstitutionGraph->return
HotSpotTTYStreamProvider#getStream()::: hot spot stream provider get stream:::return->getStream
HotSpotTTYStreamProvider.LogStreamOptionKey#makeFilename(String)::: log stream option key make filename:::name->if->name->contains->name->GraalServices->getExecutionID->replaceAll->if->name->contains->name->String->System->currentTimeMillis->valueOf->replaceAll->return
HotSpotTTYStreamProvider.LogStreamOptionKey.DelayedOutputStream#lazy()::: delayed output stream lazy:::if->synchronized->if->nameTemplate->LogStreamOptionKey.this->defaultOptions->getValue->if->name->makeFilename->try->enableAutoflush->result->new->FileOutputStream->if->printVMConfig->else->return->catch->throw->new->RuntimeException->finally->HotSpotJVMCIRuntime->runtime->getLogStream->ps->new->PrintStream->ps->printf->ps->flush->return
HotSpotTTYStreamProvider.LogStreamOptionKey.DelayedOutputStream#printVMConfig(boolean, FileOutputStream)::: delayed output stream print config:::ps->new->PrintStream->inputArguments->GraalServices->getInputArguments->if->ps->String->join->println->cmd->Services->getSavedProperties->get->if->ps->println
HotSpotTTYStreamProvider.LogStreamOptionKey.DelayedOutputStream#write(byte[], int, int)::: delayed output stream write:::lazy->write
HotSpotTTYStreamProvider.LogStreamOptionKey.DelayedOutputStream#write(int)::: delayed output stream write:::lazy->write
HotSpotTTYStreamProvider.LogStreamOptionKey.DelayedOutputStream#flush()::: delayed output stream flush:::lazy->flush
HotSpotTTYStreamProvider.LogStreamOptionKey.DelayedOutputStream#close()::: delayed output stream close:::lazy->close
HotSpotTTYStreamProvider.LogStreamOptionKey#getStream():::Gets the print stream configured by this option:::return->new->DelayedOutputStream->new->PrintStream
IsGraalPredicate#onCompilerConfigurationFactorySelection(HotSpotJVMCIRuntime, CompilerConfigurationFactory)::: is graal predicate on compiler configuration factory selection:::factory->getClass->getModule->runtime->excludeFromJVMCICompilation
IsGraalPredicate#apply(Class)::: is graal predicate apply:::throw->GraalError->shouldNotReachHere
IsGraalPredicate#getCompilationLevelAdjustment()::: is graal predicate get compilation level adjustment:::return
IsGraalPredicateBase#onCompilerConfigurationFactorySelection(HotSpotJVMCIRuntime, CompilerConfigurationFactory)::: is graal predicate base on compiler configuration factory selection:::
IsGraalPredicateBase#apply(Class)::: is graal predicate base apply:::
IsGraalPredicateBase#getCompilationLevelAdjustment()::: is graal predicate base get compilation level adjustment:::return
JVMCIVersionCheck.Version#isLessThan(Version)::: version is less than:::
JVMCIVersionCheck.Version#parse(String)::: version parse:::m->Pattern->compile->matcher->if->m->matches->try->major->Integer->m->group->parseInt->minor->Integer->m->group->parseInt->build->Integer->m->group->parseInt->return->new->Version3->catch->finally->Pattern->compile->matcher->if->m->matches->try->major->Integer->m->group->parseInt->minor->Integer->m->group->parseInt->return->new->Version2->catch->finally->return
JVMCIVersionCheck.Version2#isLessThan(Version)::: version2 is less than:::if->other->getClass->return->o->if->return->if->return->return
JVMCIVersionCheck.Version2#toString()::: version2 to string:::if->return->String->format->else->return->String->format
JVMCIVersionCheck.Version3#isLessThan(Version)::: version3 is less than:::if->other->getClass->return->o->if->return->if->if->return->if->return->return
JVMCIVersionCheck.Version3#toString()::: version3 to string:::return->String->format
JVMCIVersionCheck#failVersionCheck(Map, boolean, String, Object...)::: version check fail version check:::errorMessage->new->Formatter->format->javaHome->props->get->vmName->props->get->errorMessage->format->errorMessage->format->errorMessage->format->errorMessage->format->if->props->get->compareTo->errorMessage->format->else->errorMessage->format->value->System->getenv->if->equals->errorMessage->toString->println->else->if->equals->return->else->if->errorMessage->toString->println->System->exit->else->throw->errorMessage->toString->new->InternalError
JVMCIVersionCheck#check(Map, boolean)::: version check check:::checker->props->get->props->get->new->JVMCIVersionCheck->checker->run
JVMCIVersionCheck#check(Map, Version, String, String, boolean):::Entry point for testing.:::checker->new->JVMCIVersionCheck->checker->run
JVMCIVersionCheck#run(boolean, Version)::: version check run:::if->javaSpecVersion->compareTo->v->Version->parse->if->if->v->isLessThan->failVersionCheck->return->failVersionCheck->else->if->javaSpecVersion->compareTo->failVersionCheck->else->if->vmVersion->contains->return->if->vmVersion->contains->return->if->vmVersion->startsWith->buildString->vmVersion->length->substring->try->build->Integer->parseInt->if->failVersionCheck->return->catch->failVersionCheck->return->finally->else
JVMCIVersionCheck#main(String[]):::Command line interface for performing the check.:::sprops->System->getProperties->props->sprops->size->new->HashMap<>->foreach->sprops->stringPropertyNames->props->sprops->getProperty->put->check
SymbolicSnippetEncoder#addDelayedInvocationPluginMethod(ResolvedJavaMethod)::: symbolic snippet encoder add delayed invocation plugin method:::delayedInvocationPluginMethods->add
SymbolicSnippetEncoder#getSnippetMethods()::: symbolic snippet encoder get snippet methods:::return
SymbolicSnippetEncoder.SnippetInlineInvokePlugin#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: snippet inline invoke plugin should inline invoke:::if->method->getAnnotation->delayedInvocationPluginMethods->add->return->if->snippetReplacements->getIntrinsifyingPlugin->delayedInvocationPluginMethods->add->return->return->snippetReplacements->getDefaultReplacementBytecodeProvider->createIntrinsicInlineInfo
SymbolicSnippetEncoder.SnippetInlineInvokePlugin#notifyAfterInline(ResolvedJavaMethod)::: snippet inline invoke plugin notify after inline:::
SymbolicSnippetEncoder.SnippetInvocationPlugins#lookupInvocation(ResolvedJavaMethod)::: snippet invocation plugins lookup invocation:::if->method->getAnnotation->return->return->super->lookupInvocation
SymbolicSnippetEncoder.SnippetCounterPlugin#handleLoadField(GraphBuilderContext, ValueNode, ResolvedJavaField)::: snippet counter plugin handle load field:::if->field->getName->equals->field->getDeclaringClass->getName->equals->b->ConstantNode->b->getMetaAccess->forConstant->addPush->return->if->field->getType->getName->equals->b->ConstantNode->forObject->b->getMetaAccess->forConstant->addPush->return->if->field->getType->getName->equals->b->ConstantNode->forObject->b->getMetaAccess->forConstant->addPush->return->return
SymbolicSnippetEncoder#methodKey(ResolvedJavaMethod):::Generate a String name for a method including all type information:::return->method->format
SymbolicSnippetEncoder#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues):::Compiles the snippet and stores the graph.:::method->plugin->snippetReplacements->getProviders->getMetaAccess->getSubstitute->subst->buildGraph->snippetMethods->add->originalMethods->methodKey->methodKey->put->preparedSnippetGraphs->plugin->toString->put
SymbolicSnippetEncoder.EncodedSnippets#getMethodSubstitutionGraph(MethodSubstitutionPlugin, ResolvedJavaMethod, ReplacementsImpl, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)::: encoded snippets get method substitution graph:::startOffset->snippetStartOffsets->plugin->toString->get->if->throw->GraalError->shouldNotReachHere->accessingClass->replacements->getProviders->getMetaAccess->plugin->getDeclaringClass->lookupJavaType->return->decodeGraph
SymbolicSnippetEncoder.EncodedSnippets#decodeGraph(ResolvedJavaMethod, ResolvedJavaType, int, ReplacementsImpl, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)::: encoded snippets decode graph:::providers->replacements->getProviders->encodedGraph->methodKey->method->getDeclaringClass->new->SymbolicEncodedGraph->try->debug->replacements->openDebugContext->result->new->StructuredGraph.Builder->cancellable->method->setIsSubstitution->build->graphDecoder->new->SubstitutionGraphDecoder->graphDecoder->result->isSubstitution->encodedGraph->trackNodeSourcePosition->decode->return->catch->finally
SymbolicSnippetEncoder.EncodedSnippets#getEncodedSnippet(ResolvedJavaMethod, ReplacementsImpl, Object[], StructuredGraph.AllowAssumptions, OptionValues)::: encoded snippets get encoded snippet:::startOffset->if->snippetStartOffsets->methodKey->get->if->if->throw->GraalError->method->format->shouldNotReachHere->else->return->encodedGraph->originalMethods->methodKey->get->method->getDeclaringClass->new->SymbolicEncodedGraph->return->decodeSnippetGraph
SymbolicSnippetEncoder.SubstitutionGraphDecoder#lookupEncodedGraph(ResolvedJavaMethod, MethodSubstitutionPlugin, BytecodeProvider, boolean, boolean)::: substitution graph decoder lookup encoded graph:::if->lookupMethod->equals->return->else->throw->GraalError->method->format->shouldNotReachHere
SymbolicSnippetEncoder.SubstitutionGraphDecoder#getIntrinsic()::: substitution graph decoder get intrinsic:::return
SymbolicSnippetEncoder#buildGraph(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, boolean, IntrinsicContext.CompilationContext, OptionValues)::: symbolic snippet encoder build graph:::args->if->method->getSignature->getParameterCount->new->ObjectArr->try->debug->openDebugContext->graph->snippetReplacements->snippetReplacements->getDefaultReplacementBytecodeProvider->makeGraph->foreach->graph->getNodes->callee->callTarget->targetMethod->if->delayedInvocationPluginMethods->contains->Objects->equals->throw->GraalError->callee->format->method->getName->shouldNotReachHere->debug->dump->return->catch->finally
SymbolicSnippetEncoder#decodeSnippetGraph(SymbolicEncodedGraph, ResolvedJavaMethod, ReplacementsImpl, Object[], StructuredGraph.AllowAssumptions, OptionValues)::: symbolic snippet encoder decode snippet graph:::providers->replacements->getProviders->parameterPlugin->if->providers->getMetaAccess->new->ConstantBindingParameterPlugin->try->debug->replacements->openDebugContext->result->new->StructuredGraph.Builder->method->encodedGraph->trackNodeSourcePosition->trackNodeSourcePosition->setIsSubstitution->build->try->scope->debug->scope->graphDecoder->new->SubstitutionGraphDecoder->graphDecoder->result->isSubstitution->encodedGraph->trackNodeSourcePosition->decode->debug->dump->return->catch->throw->debug->handle->finally->catch->finally
SymbolicSnippetEncoder#verifySnippetEncodeDecode(ResolvedJavaMethod, ResolvedJavaMethod, boolean, StructuredGraph)::: symbolic snippet encoder verify snippet encode decode:::encodedGraph->GraphEncoder->HotSpotJVMCIRuntime->runtime->getHostJVMCIBackend->getTarget->encodeSingleGraph->try->debug->snippetReplacements->graph->getOptions->openDebugContext->originalProvider->snippetReplacements->getProviders->snippetReflection->originalProvider->getSnippetReflection->constantReflection->originalProvider->getConstantReflection->new->SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider->newProviders->originalProvider->getMetaAccess->originalProvider->getCodeCache->originalProvider->getConstantFieldProvider->originalProvider->getForeignCalls->originalProvider->getLowerer->originalProvider->getSuites->originalProvider->getRegisters->originalProvider->getWordTypes->originalProvider->getGraphBuilderPlugins->originalProvider->getGC->new->HotSpotProviders->filteringReplacements->originalProvider->getReplacements->getDefaultReplacementBytecodeProvider->originalProvider->getCodeCache->getTarget->new->HotSpotSnippetReplacementsImpl->filteringReplacements->originalProvider->getReplacements->getGraphBuilderPlugins->setGraphBuilderPlugins->try->scaope->debug->scope->for->i->encodedGraph->getNumObjects->snippet->filteringReplacements->filteringReplacements->getDefaultReplacementBytecodeProvider->makeGraph->symbolicGraph->method->getDeclaringClass->methodKey->new->SymbolicEncodedGraph->decodedSnippet->graph->getAssumptions->ifNonNull->graph->getOptions->decodeSnippetGraph->snippetString->getCanonicalGraphString->decodedSnippetString->getCanonicalGraphString->if->snippetString->equals->debug->log->debug->dump->else->debug->log->debug->compareGraphStrings->log->debug->dump->debug->dump->debug->dump->catch->throw->debug->handle->finally->catch->finally->return
SymbolicSnippetEncoder#maybeEncodeSnippets(OptionValues):::If there are new graphs waiting to be encoded, reencode all the graphs and return the result.:::graphs->if->graphs->size->debug->openDebugContext->try->scope->debug->scope->graphs->size->foreach->graphs->values->foreach->graph->getNodes->node->setNodeSourcePosition->return->encodeSnippets->catch->finally->return
SymbolicSnippetEncoder#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues)::: symbolic snippet encoder register snippet:::if->UseEncodedGraphs->getValue->key->methodKey->if->preparedSnippetGraphs->containsKey->if->originalMethods->methodKey->put->snippet->buildGraph->snippetMethods->add->preparedSnippetGraphs->put
SymbolicSnippetEncoder#encodeSnippets(DebugContext)::: symbolic snippet encoder encode snippets:::encoder->HotSpotJVMCIRuntime->runtime->getHostJVMCIBackend->getTarget->new->GraphEncoder->foreach->preparedSnippetGraphs->values->encoder->prepare->encoder->finishPrepare->snippetEncoding->snippetObjects->snippetNodeClasses->snippetStartOffsets->new->HashMap<>->foreach->preparedSnippetGraphs->entrySet->snippetStartOffsets->entry->getKey->encoder->entry->getValue->encode->put->encoder->getEncoding->encoder->getObjects->encoder->getNodeClasses->for->i->debug->snippetStartOffsets->size->log->return->new->EncodedSnippets
SymbolicSnippetEncoder#encode(OptionValues):::Encode any outstanding graphs and return true if any work was done.:::encodedSnippets->maybeEncodeSnippets->if->HotSpotReplacementsImpl->setEncodedSnippets->return->return
SymbolicSnippetEncoder#openDebugContext(String, ResolvedJavaMethod, OptionValues)::: symbolic snippet encoder open debug context:::return->snippetReplacements->openDebugContext
SymbolicSnippetEncoder.SymbolicEncodedGraph#getObject(int)::: symbolic encoded graph get object:::o->replacement->if->foreach->try->resolve->break->catch->finally->else->if->foreach->try->resolve->break->catch->finally->else->if->throw->o->toString->new->InternalError->else->if->foreach->try->resolve->break->catch->finally->else->if->getRuntime->getCompiler->getGraalRuntime->resolve->else->return->if->else->throw->new->GraalError->return
SymbolicSnippetEncoder.SymbolicEncodedGraph#isCallToOriginal(ResolvedJavaMethod)::: symbolic encoded graph is call to original:::if->originalMethod->methodKey->equals->return->return->super->isCallToOriginal
SymbolicSnippetEncoder.GraalCapability#resolve(GraalRuntime)::: graal capability resolve:::capability->runtime->getCapability->if->return->throw->getName->new->InternalError
SymbolicSnippetEncoder.SymbolicResolvedJavaMethod#toString()::: symbolic resolved java method to string:::return->type->getName
SymbolicSnippetEncoder.SymbolicResolvedJavaMethod#resolve(ResolvedJavaType)::: symbolic resolved java method resolve:::resolvedType->type->resolve->if->throw->accessingClass->toJavaName->new->InternalError->foreach->methodName->equals->resolvedType->getDeclaredConstructors->resolvedType->getDeclaredMethods->if->method->getName->equals->method->getSignature->toMethodDescriptor->equals->return->throw->accessingClass->toJavaName->new->InternalError
SymbolicSnippetEncoder.SymbolicResolvedJavaField#resolve(ResolvedJavaType)::: symbolic resolved java field resolve:::resolvedType->declaringType->resolve->resolvedFieldType->signature->resolve->fields->resolvedType->getStaticFields->resolvedType->getInstanceFields->foreach->if->field->getName->equals->if->field->getType->equals->return->throw->accessingClass->toJavaName->new->InternalError
SymbolicSnippetEncoder.SymbolicResolvedJavaField#toString()::: symbolic resolved java field to string:::return->signature->getName->declaringType->getName
SymbolicSnippetEncoder.SymbolicResolvedJavaMethodBytecode#resolve(ResolvedJavaType)::: symbolic resolved java method bytecode resolve:::return->method->resolve->new->ResolvedJavaMethodBytecode
SymbolicSnippetEncoder.SymbolicStampPair#resolve(ResolvedJavaType)::: symbolic stamp pair resolve:::return->StampPair->resolveStamp->resolveStamp->create
SymbolicSnippetEncoder#maybeMakeSymbolic(Stamp)::: symbolic snippet encoder maybe make symbolic:::if->symbolicJVMCIReference->trustedStamp->makeSymbolic->if->return->return
SymbolicSnippetEncoder#resolveStamp(ResolvedJavaType, Object)::: symbolic snippet encoder resolve stamp:::if->return->if->return->return->resolve
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#constantEquals(Constant, Constant)::: hot spot substrate constant reflection provider constant equals:::return->constantReflection->constantEquals
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#readArrayLength(JavaConstant)::: hot spot substrate constant reflection provider read array length:::return->constantReflection->readArrayLength
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#readArrayElement(JavaConstant, int)::: hot spot substrate constant reflection provider read array element:::return->constantReflection->readArrayElement
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#readFieldValue(ResolvedJavaField, JavaConstant)::: hot spot substrate constant reflection provider read field value:::javaConstant->constantReflection->readFieldValue->if->safeConstants->contains->field->getDeclaringClass->getName->contains->field->getDeclaringClass->getName->contains->field->getName->equals->return->if->javaConstant->getJavaKind->safeConstants->add->return
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#boxPrimitive(JavaConstant)::: hot spot substrate constant reflection provider box primitive:::return->constantReflection->boxPrimitive
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#unboxPrimitive(JavaConstant)::: hot spot substrate constant reflection provider unbox primitive:::return->constantReflection->unboxPrimitive
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#forString(String)::: hot spot substrate constant reflection provider for string:::return->constantReflection->forString
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#asJavaType(Constant)::: hot spot substrate constant reflection provider as java type:::return->constantReflection->asJavaType
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#getMethodHandleAccess()::: hot spot substrate constant reflection provider get method handle access:::return->constantReflection->getMethodHandleAccess
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#getMemoryAccessProvider()::: hot spot substrate constant reflection provider get memory access provider:::return->constantReflection->getMemoryAccessProvider
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#asJavaClass(ResolvedJavaType)::: hot spot substrate constant reflection provider as java class:::return->constantReflection->asJavaClass
SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#asObjectHub(ResolvedJavaType)::: hot spot substrate constant reflection provider as object hub:::return->constantReflection->asObjectHub
SymbolicSnippetEncoder#filterSnippetObject(Object):::Objects embedded in encoded graphs might need to converted into a symbolic form so convert the object or pass it through.:::if->return->new->SymbolicResolvedJavaMethod->else->if->return->new->SymbolicResolvedJavaField->else->if->return->UnresolvedJavaType->getName->create->else->if->return->else->if->return->o->getClass->new->GraalCapability->else->if->ref->makeSymbolic->if->return->return->else->if->if->getTrustedStamp->return->new->SymbolicStampPair->else->if->return->new->SymbolicResolvedJavaMethodBytecode->else->if->throw->o->toString->new->GraalError->return
SymbolicSnippetEncoder#compareGraphStrings(StructuredGraph, String, StructuredGraph, String)::: symbolic snippet encoder compare graph strings:::if->expectedString->equals->expectedLines->expectedString->split->actualLines->actualString->split->diffIndex->limit->Math->min->marker->for->i->if->if->Arrays->copyOf->else->Arrays->copyOf->ediff->String->join->adiff->String->join->return->else->return
SymbolicSnippetEncoder#getCanonicalGraphString(StructuredGraph, boolean, boolean)::: symbolic snippet encoder get canonical graph string:::schedule->new->SchedulePhase->schedule->apply->scheduleResult->graph->getLastSchedule->canonicalId->graph->createNodeMap->nextId->constantsLines->new->ArrayList<>->result->new->StringBuilder->foreach->scheduleResult->getCFG->getBlocks->result->append->append->append->if->scheduleResult->getCFG->getStartBlock->result->append->result->append->foreach->block->getSuccessors->result->append->append->result->append->foreach->scheduleResult->getBlockToNodesMap->get->if->node->isAlive->if->if->if->name->node->toString->if->constantsLines->add->else->constantsLines->filteredUsageCount->add->else->id->if->canonicalId->get->canonicalId->get->else->canonicalId->set->name->node->getClass->getSimpleName->result->append->append->append->append->if->result->append->result->field->append->if->result->append->result->filteredUsageCount->append->result->append->result->append->constantsLinesResult->new->StringBuilder->if->constantsLinesResult->constantsLines->size->append->append->Collections->sort->foreach->constantsLinesResult->append->constantsLinesResult->append->return->constantsLinesResult->toString->result->toString
SymbolicSnippetEncoder#filteredUsageCount(Node)::: symbolic snippet encoder filtered usage count:::return->node->usages->filter->count
SymbolicSnippetEncoder.HotSpotSnippetReplacementsImpl#createGraphMaker(ResolvedJavaMethod, ResolvedJavaMethod)::: hot spot snippet replacements impl create graph maker:::return->new->SnippetGraphMaker
SymbolicSnippetEncoder.SnippetGraphMaker#createGraphBuilder(Providers, GraphBuilderConfiguration, OptimisticOptimizations, IntrinsicContext)::: snippet graph maker create graph builder:::return->new->HotSpotSnippetGraphBuilderPhase
SymbolicSnippetEncoder.HotSpotSnippetGraphBuilderPhase#createBytecodeParser(StructuredGraph, BytecodeParser, ResolvedJavaMethod, int, IntrinsicContext)::: hot spot snippet graph builder phase create bytecode parser:::return->new->HotSpotSnippetBytecodeParser
SymbolicSnippetEncoder.HotSpotSnippetBytecodeParser#canDeferPlugin(GeneratedInvocationPlugin)::: hot spot snippet bytecode parser can defer plugin:::return->plugin->getSource->equals->plugin->getSource->equals
SymbolicSnippetEncoder.HotSpotSnippetBytecodeParser#canInlinePartialIntrinsicExit()::: hot spot snippet bytecode parser can inline partial intrinsic exit:::return
SymbolicSnippetEncoder.HotSpotSnippetBytecodeParser#tryInvocationPlugin(CallTargetNode.InvokeKind, ValueNode[], ResolvedJavaMethod, JavaKind)::: hot spot snippet bytecode parser try invocation plugin:::if->intrinsicContext->isCallToOriginal->return->if->targetMethod->getAnnotation->return->return->super->tryInvocationPlugin
WeakClassLoaderSet#add(ClassLoader):::Adds loader to this set.:::addNewRef->new->WeakReference<>->currentLoaders->loaders->get->if->currentLoaders->contains->new->UnaryOperator<EconomicSet<Reference<ClassLoader>>>->getAndUpdate
WeakClassLoaderSet#resolve(String, EconomicSet):::Tries to resolve className to Class instances with the loaders in this set.:::found->EconomicSet->create->it->loaders->get->iterator->while->it->hasNext->ref->it->next->loader->ref->get->if->it->remove->continue->try->clazz->Class->forName->found->add->catch->resolutionFailures->add->finally->return
WeakClassLoaderSet.RefEquivalence#equals(Object, Object)::: ref equivalence equals:::refA->refB->referentA->refA->get->referentB->refB->get->return->Objects->equals
WeakClassLoaderSet.RefEquivalence#hashCode(Object)::: ref equivalence hash code:::ref->obj->ref->get->return->obj->hashCode

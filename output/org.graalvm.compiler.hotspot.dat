org.graalvm.compiler.hotspot.BootstrapWatchDog_OptionDescriptors#get(String)->OptionDescriptor::: bootstrap watch dog_ option descriptors get
org.graalvm.compiler.hotspot.BootstrapWatchDog_OptionDescriptors#iterator()->Iterator::: bootstrap watch dog_ option descriptors iterator
org.graalvm.compiler.hotspot.CompilationCounters_OptionDescriptors#get(String)->OptionDescriptor::: compilation counters_ option descriptors get
org.graalvm.compiler.hotspot.CompilationCounters_OptionDescriptors#iterator()->Iterator::: compilation counters_ option descriptors iterator
org.graalvm.compiler.hotspot.CompilationStatistics_OptionDescriptors#get(String)->OptionDescriptor::: compilation statistics_ option descriptors get
org.graalvm.compiler.hotspot.CompilationStatistics_OptionDescriptors#iterator()->Iterator::: compilation statistics_ option descriptors iterator
org.graalvm.compiler.hotspot.CompilationWatchDog_OptionDescriptors#get(String)->OptionDescriptor::: compilation watch dog_ option descriptors get
org.graalvm.compiler.hotspot.CompilationWatchDog_OptionDescriptors#iterator()->Iterator::: compilation watch dog_ option descriptors iterator
org.graalvm.compiler.hotspot.CompilerConfigurationFactory_OptionDescriptors#get(String)->OptionDescriptor::: compiler configuration factory_ option descriptors get
org.graalvm.compiler.hotspot.CompilerConfigurationFactory_OptionDescriptors#iterator()->Iterator::: compiler configuration factory_ option descriptors iterator
org.graalvm.compiler.hotspot.HotSpotBackend_OptionDescriptors#get(String)->OptionDescriptor::: hot spot backend_ option descriptors get
org.graalvm.compiler.hotspot.HotSpotBackend_OptionDescriptors#iterator()->Iterator::: hot spot backend_ option descriptors iterator
org.graalvm.compiler.hotspot.HotSpotCompiledCodeBuilder_OptionDescriptors#get(String)->OptionDescriptor::: hot spot compiled code builder_ option descriptors get
org.graalvm.compiler.hotspot.HotSpotCompiledCodeBuilder_OptionDescriptors#iterator()->Iterator::: hot spot compiled code builder_ option descriptors iterator
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory_OptionDescriptors#get(String)->OptionDescriptor::: hot spot graal compiler factory_ option descriptors get
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory_OptionDescriptors#iterator()->Iterator::: hot spot graal compiler factory_ option descriptors iterator
org.graalvm.compiler.hotspot.HotSpotTTYStreamProvider_OptionDescriptors#get(String)->OptionDescriptor::: hot spot stream provider_ option descriptors get
org.graalvm.compiler.hotspot.HotSpotTTYStreamProvider_OptionDescriptors#iterator()->Iterator::: hot spot stream provider_ option descriptors iterator
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_counterModeAESCrypt#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_counter mode crypt execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_counterModeAESCrypt#getSource()->Class::: plugin_ hot spot backend_counter mode crypt get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_implMontgomeryMultiply#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_impl montgomery multiply execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_implMontgomeryMultiply#getSource()->Class::: plugin_ hot spot backend_impl montgomery multiply get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_implMontgomerySquare#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_impl montgomery square execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_implMontgomerySquare#getSource()->Class::: plugin_ hot spot backend_impl montgomery square get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_implSquareToLen#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_impl square to len execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_implSquareToLen#getSource()->Class::: plugin_ hot spot backend_impl square to len get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_mulAddStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_mul add stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_mulAddStub#getSource()->Class::: plugin_ hot spot backend_mul add stub get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_multiplyToLenStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_multiply to len stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_multiplyToLenStub#getSource()->Class::: plugin_ hot spot backend_multiply to len stub get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_sha2ImplCompressMBStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_sha2 impl compress stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_sha2ImplCompressMBStub#getSource()->Class::: plugin_ hot spot backend_sha2 impl compress stub get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_sha2ImplCompressStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_sha2 impl compress stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_sha2ImplCompressStub#getSource()->Class::: plugin_ hot spot backend_sha2 impl compress stub get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_sha5ImplCompressMBStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_sha5 impl compress stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_sha5ImplCompressMBStub#getSource()->Class::: plugin_ hot spot backend_sha5 impl compress stub get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_sha5ImplCompressStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_sha5 impl compress stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_sha5ImplCompressStub#getSource()->Class::: plugin_ hot spot backend_sha5 impl compress stub get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_shaImplCompressMBStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_sha impl compress stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_shaImplCompressMBStub#getSource()->Class::: plugin_ hot spot backend_sha impl compress stub get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_shaImplCompressStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_sha impl compress stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_shaImplCompressStub#getSource()->Class::: plugin_ hot spot backend_sha impl compress stub get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_unsafeArraycopyStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_unsafe arraycopy stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_unsafeArraycopyStub#getSource()->Class::: plugin_ hot spot backend_unsafe arraycopy stub get source
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_vectorizedMismatchStub#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ hot spot backend_vectorized mismatch stub execute
org.graalvm.compiler.hotspot.Plugin_HotSpotBackend_vectorizedMismatchStub#getSource()->Class::: plugin_ hot spot backend_vectorized mismatch stub get source
org.graalvm.compiler.hotspot.PluginFactory_HotSpotBackend#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ hot spot backend register plugins
org.graalvm.compiler.hotspot.AOTGraalHotSpotVMConfig#getOopEncoding()->CompressEncoding::: graal hot spot config get oop encoding
org.graalvm.compiler.hotspot.AOTGraalHotSpotVMConfig#getKlassEncoding()->CompressEncoding::: graal hot spot config get klass encoding
org.graalvm.compiler.hotspot.BootstrapWatchDog#maybeCreate(HotSpotGraalRuntimeProvider)->BootstrapWatchDog:::Creates and returns a BootstrapWatchDog if Options#BootstrapWatchDogCriticalRateRatio is not set to 0 otherwise returns null.
org.graalvm.compiler.hotspot.BootstrapWatchDog#run()->void::: bootstrap watch dog run
org.graalvm.compiler.hotspot.BootstrapWatchDog#hitCriticalCompilationRateOrTimeout()->boolean:::Queries whether a critically low compilation rate or #timeout occurred.
org.graalvm.compiler.hotspot.BootstrapWatchDog#watch(CompilationRequest)->Watch:::Opens a scope for watching the compilation of a given method.
org.graalvm.compiler.hotspot.BootstrapWatchDog.Watch#open(CompilationRequest)->void::: watch open
org.graalvm.compiler.hotspot.BootstrapWatchDog.Watch#close()->void::: watch close
org.graalvm.compiler.hotspot.CommunityCompilerConfigurationFactory#createCompilerConfiguration()->CompilerConfiguration::: community compiler configuration factory create compiler configuration
org.graalvm.compiler.hotspot.CompilationContext#close()->void::: compilation context close
org.graalvm.compiler.hotspot.CompilationCounters#countCompilation(ResolvedJavaMethod)->void:::Counts the number of compilations for the ResolvedJavaMethod of the CompilationRequest
org.graalvm.compiler.hotspot.CompilationCounters.CounterComparator#compare(Entry, Entry)->int::: counter comparator compare
org.graalvm.compiler.hotspot.CompilationStatistics#finish(HotSpotResolvedJavaMethod, HotSpotInstalledCode)->void::: compilation statistics finish
org.graalvm.compiler.hotspot.CompilationStatistics#current()->CompilationStatistics::: compilation statistics current
org.graalvm.compiler.hotspot.CompilationStatistics#create(OptionValues, HotSpotResolvedJavaMethod, boolean)->CompilationStatistics::: compilation statistics create
org.graalvm.compiler.hotspot.CompilationStatistics#isEnabled()->boolean::: compilation statistics is enabled
org.graalvm.compiler.hotspot.CompilationStatistics#clear(String)->void::: compilation statistics clear
org.graalvm.compiler.hotspot.CompilationStatistics#dumpCompilations(ConcurrentLinkedDeque, String, String)->void::: compilation statistics dump compilations
org.graalvm.compiler.hotspot.CompilationTask.HotSpotCompilationWrapper#createRetryDebugContext(DebugContext, OptionValues, PrintStream)->DebugContext::: hot spot compilation wrapper create retry debug context
org.graalvm.compiler.hotspot.CompilationTask.HotSpotCompilationWrapper#exitHostVM(int)->void::: hot spot compilation wrapper exit host m
org.graalvm.compiler.hotspot.CompilationTask.HotSpotCompilationWrapper#toString()->String::: hot spot compilation wrapper to string
org.graalvm.compiler.hotspot.CompilationTask.HotSpotCompilationWrapper#handleException(Throwable)->HotSpotCompilationRequestResult::: hot spot compilation wrapper handle exception
org.graalvm.compiler.hotspot.CompilationTask.HotSpotCompilationWrapper#lookupAction(OptionValues, Throwable)->ExceptionAction::: hot spot compilation wrapper lookup action
org.graalvm.compiler.hotspot.CompilationTask.HotSpotCompilationWrapper#performCompilation(DebugContext)->HotSpotCompilationRequestResult::: hot spot compilation wrapper perform compilation
org.graalvm.compiler.hotspot.CompilationTask#filterOptions(OptionValues)->OptionValues::: compilation task filter options
org.graalvm.compiler.hotspot.CompilationTask#getMethod()->HotSpotResolvedJavaMethod::: compilation task get method
org.graalvm.compiler.hotspot.CompilationTask#getCompilationIdentifier()->CompilationIdentifier::: compilation task get compilation identifier
org.graalvm.compiler.hotspot.CompilationTask#getId()->int:::Returns the HotSpot id of this compilation.
org.graalvm.compiler.hotspot.CompilationTask#getEntryBCI()->int::: compilation task get entry i
org.graalvm.compiler.hotspot.CompilationTask#getIdString()->String::: compilation task get id string
org.graalvm.compiler.hotspot.CompilationTask#getInstalledCode()->HotSpotInstalledCode::: compilation task get installed code
org.graalvm.compiler.hotspot.CompilationTask#runCompilation(OptionValues)->HotSpotCompilationRequestResult::: compilation task run compilation
org.graalvm.compiler.hotspot.CompilationTask#runCompilation(DebugContext)->HotSpotCompilationRequestResult::: compilation task run compilation
org.graalvm.compiler.hotspot.CompilationTask#toString()->String::: compilation task to string
org.graalvm.compiler.hotspot.CompilationWatchDog#startCompilation(ResolvedJavaMethod, int)->void::: compilation watch dog start compilation
org.graalvm.compiler.hotspot.CompilationWatchDog#stopCompilation()->void::: compilation watch dog stop compilation
org.graalvm.compiler.hotspot.CompilationWatchDog#toString()->String::: compilation watch dog to string
org.graalvm.compiler.hotspot.CompilationWatchDog#run()->void::: compilation watch dog run
org.graalvm.compiler.hotspot.CompilationWatchDog#watch(ResolvedJavaMethod, int, OptionValues)->CompilationWatchDog:::Opens a scope for watching the compilation of a given method.
org.graalvm.compiler.hotspot.CompilationWatchDog#close()->void::: compilation watch dog close
org.graalvm.compiler.hotspot.CompilerConfigurationFactory#createCompilerConfiguration()->CompilerConfiguration::: compiler configuration factory create compiler configuration
org.graalvm.compiler.hotspot.CompilerConfigurationFactory#createBackendMap()->BackendMap:::Collect the set of available HotSpotBackendFactory backends for this compiler configuration.
org.graalvm.compiler.hotspot.CompilerConfigurationFactory#getName()->String:::Returns a name that should uniquely identify this compiler configuration.
org.graalvm.compiler.hotspot.CompilerConfigurationFactory.BackendMap#getBackendFactory(Architecture)->HotSpotBackendFactory::: backend map get backend factory
org.graalvm.compiler.hotspot.CompilerConfigurationFactory.DefaultBackendMap#getBackendFactory(Architecture)->HotSpotBackendFactory::: default backend map get backend factory
org.graalvm.compiler.hotspot.CompilerConfigurationFactory#compareTo(CompilerConfigurationFactory)->int::: compiler configuration factory compare to
org.graalvm.compiler.hotspot.CompilerConfigurationFactory#selectFactory(String, OptionValues)->CompilerConfigurationFactory:::Selects and instantiates a CompilerConfigurationFactory
org.graalvm.compiler.hotspot.EconomyCompilerConfigurationFactory#createCompilerConfiguration()->CompilerConfiguration::: economy compiler configuration factory create compiler configuration
org.graalvm.compiler.hotspot.EconomyCompilerConfigurationFactory#createBackendMap()->BackendMap::: economy compiler configuration factory create backend map
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#getOopEncoding()->CompressEncoding::: graal hot spot config get oop encoding
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#getKlassEncoding()->CompressEncoding::: graal hot spot config get klass encoding
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useMultiplyToLenIntrinsic()->boolean::: graal hot spot config use multiply to len intrinsic
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useSHA1Intrinsics()->boolean::: graal hot spot config use a1 intrinsics
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useSHA256Intrinsics()->boolean::: graal hot spot config use a256 intrinsics
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useSHA512Intrinsics()->boolean::: graal hot spot config use a512 intrinsics
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useGHASHIntrinsics()->boolean::: graal hot spot config use intrinsics
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useBase64Intrinsics()->boolean::: graal hot spot config use base64 intrinsics
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useMontgomeryMultiplyIntrinsic()->boolean::: graal hot spot config use montgomery multiply intrinsic
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useMontgomerySquareIntrinsic()->boolean::: graal hot spot config use montgomery square intrinsic
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useMulAddIntrinsic()->boolean::: graal hot spot config use mul add intrinsic
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#useSquareToLenIntrinsic()->boolean::: graal hot spot config use square to len intrinsic
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#inlineNotify()->boolean::: graal hot spot config inline notify
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#inlineNotifyAll()->boolean::: graal hot spot config inline notify all
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#gcTotalCollectionsAddress()->long::: graal hot spot config gc total collections address
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#minObjAlignment()->int::: graal hot spot config min obj alignment
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#logMinObjAlignment()->int::: graal hot spot config log min obj alignment
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#layoutHelperElementTypePrimitiveInPlace()->int:::This filters out the bit that differentiates a type array from an object array.
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#arrayOopDescLengthOffset()->int:::The offset of the array length word in an array object's header
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#requiresReservedStackCheck(List)->boolean::: graal hot spot config requires reserved stack check
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#threadLastJavaSpOffset()->int::: graal hot spot config thread last java sp offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#threadLastJavaPcOffset()->int::: graal hot spot config thread last java pc offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#threadLastJavaFpOffset()->int::: graal hot spot config thread last java fp offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#threadJavaFrameAnchorFlagsOffset()->int::: graal hot spot config thread java frame anchor flags offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#arrayPrototypeMarkWord()->long:::See markOopDesc::prototype().
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#tlabIntArrayMarkWord()->long:::See markOopDesc::copy_set_hash().
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#tlabSlowAllocationsOffset()->int::: graal hot spot config tlab slow allocations offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#tlabFastRefillWasteOffset()->int::: graal hot spot config tlab fast refill waste offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#tlabNumberOfRefillsOffset()->int::: graal hot spot config tlab number of refills offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#tlabRefillWasteLimitOffset()->int::: graal hot spot config tlab refill waste limit offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#threadTlabSizeOffset()->int::: graal hot spot config thread tlab size offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#threadTlabStartOffset()->int::: graal hot spot config thread tlab start offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#threadTlabEndOffset()->int::: graal hot spot config thread tlab end offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#threadTlabTopOffset()->int::: graal hot spot config thread tlab top offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#threadTlabPfTopOffset()->int::: graal hot spot config thread tlab pf top offset
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#areNullAllocationStubsAvailable()->boolean::: graal hot spot config are null allocation stubs available
org.graalvm.compiler.hotspot.GraalHotSpotVMConfig#check()->boolean::: graal hot spot config check
org.graalvm.compiler.hotspot.HotSpotBackend#multiplyToLenStub(Word, int, Word, int, Word, int)->void::: hot spot backend multiply to len stub
org.graalvm.compiler.hotspot.HotSpotBackend#mulAddStub(Word, Word, int, int, int)->int::: hot spot backend mul add stub
org.graalvm.compiler.hotspot.HotSpotBackend#implMontgomeryMultiply(Word, Word, Word, int, long, Word)->void::: hot spot backend impl montgomery multiply
org.graalvm.compiler.hotspot.HotSpotBackend#implMontgomerySquare(Word, Word, int, long, Word)->void::: hot spot backend impl montgomery square
org.graalvm.compiler.hotspot.HotSpotBackend#implSquareToLen(Word, int, Word, int)->void::: hot spot backend impl square to len
org.graalvm.compiler.hotspot.HotSpotBackend#shaImplCompressStub(Word, Object)->void::: hot spot backend sha impl compress stub
org.graalvm.compiler.hotspot.HotSpotBackend#sha2ImplCompressStub(Word, Object)->void::: hot spot backend sha2 impl compress stub
org.graalvm.compiler.hotspot.HotSpotBackend#sha5ImplCompressStub(Word, Object)->void::: hot spot backend sha5 impl compress stub
org.graalvm.compiler.hotspot.HotSpotBackend#shaImplCompressMBStub(Word, Object, int, int)->int::: hot spot backend sha impl compress stub
org.graalvm.compiler.hotspot.HotSpotBackend#sha2ImplCompressMBStub(Word, Object, int, int)->int::: hot spot backend sha2 impl compress stub
org.graalvm.compiler.hotspot.HotSpotBackend#sha5ImplCompressMBStub(Word, Object, int, int)->int::: hot spot backend sha5 impl compress stub
org.graalvm.compiler.hotspot.HotSpotBackend#unsafeArraycopy(Word, Word, Word)->void::: hot spot backend unsafe arraycopy
org.graalvm.compiler.hotspot.HotSpotBackend#counterModeAESCrypt(Word, Word, Word, Word, int, Word, Word)->int::: hot spot backend counter mode crypt
org.graalvm.compiler.hotspot.HotSpotBackend#vectorizedMismatch(Word, Word, int, int)->int::: hot spot backend vectorized mismatch
org.graalvm.compiler.hotspot.HotSpotBackend#getRuntime()->HotSpotGraalRuntimeProvider::: hot spot backend get runtime
org.graalvm.compiler.hotspot.HotSpotBackend#completeInitialization(HotSpotJVMCIRuntime, OptionValues)->void:::Performs any remaining initialization that was deferred until the #getRuntime() runtime object was initialized and this backend was registered with it.
org.graalvm.compiler.hotspot.HotSpotBackend#gatherDestroyedCallerRegisters(LIR)->EconomicSet:::Finds all the registers that are defined by some given LIR.
org.graalvm.compiler.hotspot.HotSpotBackend#translateToCallerRegisters(EconomicSet)->EconomicSet:::Translates a set of registers from the callee's perspective to the caller's perspective
org.graalvm.compiler.hotspot.HotSpotBackend#updateStub(Stub, EconomicSet, EconomicMap, FrameMap)->void:::Updates a given stub with respect to the registers it destroys
org.graalvm.compiler.hotspot.HotSpotBackend#getProviders()->HotSpotProviders::: hot spot backend get providers
org.graalvm.compiler.hotspot.HotSpotBackend#getSuites()->SuitesProvider::: hot spot backend get suites
org.graalvm.compiler.hotspot.HotSpotBackend#profileInstructions(LIR, CompilationResultBuilder)->void::: hot spot backend profile instructions
org.graalvm.compiler.hotspot.HotSpotBackend#createCompiledCode(ResolvedJavaMethod, CompilationRequest, CompilationResult, boolean, OptionValues)->CompiledCode::: hot spot backend create compiled code
org.graalvm.compiler.hotspot.HotSpotBackend#getCompilationIdentifier(ResolvedJavaMethod)->CompilationIdentifier::: hot spot backend get compilation identifier
org.graalvm.compiler.hotspot.HotSpotBackendFactory#createConstantFieldProvider(GraalHotSpotVMConfig, HotSpotMetaAccessProvider)->HotSpotGraalConstantFieldProvider::: hot spot backend factory create constant field provider
org.graalvm.compiler.hotspot.HotSpotBackendFactory#createWordTypes(HotSpotMetaAccessProvider, TargetDescription)->HotSpotWordTypes::: hot spot backend factory create word types
org.graalvm.compiler.hotspot.HotSpotBackendFactory#createStampProvider()->HotSpotStampProvider::: hot spot backend factory create stamp provider
org.graalvm.compiler.hotspot.HotSpotBackendFactory#createGCProvider(GraalHotSpotVMConfig)->HotSpotGCProvider::: hot spot backend factory create provider
org.graalvm.compiler.hotspot.HotSpotBackendFactory#createReplacements(TargetDescription, Providers, HotSpotSnippetReflectionProvider, BytecodeProvider)->HotSpotReplacementsImpl::: hot spot backend factory create replacements
org.graalvm.compiler.hotspot.HotSpotBackendFactory#createBytecodeProvider(HotSpotMetaAccessProvider, HotSpotSnippetReflectionProvider)->ClassfileBytecodeProvider::: hot spot backend factory create bytecode provider
org.graalvm.compiler.hotspot.HotSpotBackendFactory#createSnippetReflection(HotSpotGraalRuntimeProvider, HotSpotConstantReflectionProvider, HotSpotWordTypes)->HotSpotSnippetReflectionProvider::: hot spot backend factory create snippet reflection
org.graalvm.compiler.hotspot.HotSpotBackendFactory#getName()->String:::Gets the name of this backend factory
org.graalvm.compiler.hotspot.HotSpotBackendFactory#getArchitecture()->Class:::Gets the class describing the architecture the backend created by this factory is associated with.
org.graalvm.compiler.hotspot.HotSpotBackendFactory#createBackend(HotSpotGraalRuntimeProvider, CompilerConfiguration, HotSpotJVMCIRuntime, HotSpotBackend)->HotSpotBackend::: hot spot backend factory create backend
org.graalvm.compiler.hotspot.HotSpotCodeCacheListener#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode)->void:::Notifies this object on successful install into the CodeCache.
org.graalvm.compiler.hotspot.HotSpotCompilationIdentifier#isOsrCompilation()->boolean::: hot spot compilation identifier is osr compilation
org.graalvm.compiler.hotspot.HotSpotCompilationIdentifier#toString()->String::: hot spot compilation identifier to string
org.graalvm.compiler.hotspot.HotSpotCompilationIdentifier#toString(Verbosity)->String::: hot spot compilation identifier to string
org.graalvm.compiler.hotspot.HotSpotCompilationIdentifier#buildString(StringBuilder, Verbosity)->StringBuilder::: hot spot compilation identifier build string
org.graalvm.compiler.hotspot.HotSpotCompilationIdentifier#buildName(StringBuilder)->StringBuilder::: hot spot compilation identifier build name
org.graalvm.compiler.hotspot.HotSpotCompilationIdentifier#buildID(StringBuilder)->StringBuilder::: hot spot compilation identifier build d
org.graalvm.compiler.hotspot.HotSpotCompilationIdentifier#getRequest()->HotSpotCompilationRequest::: hot spot compilation identifier get request
org.graalvm.compiler.hotspot.HotSpotCompiledCodeBuilder#createCompiledCode(CodeCacheProvider, ResolvedJavaMethod, HotSpotCompilationRequest, CompilationResult, OptionValues)->HotSpotCompiledCode::: hot spot compiled code builder create compiled code
org.graalvm.compiler.hotspot.HotSpotCompiledCodeBuilder.SiteComparator#ord(Infopoint)->int::: site comparator ord
org.graalvm.compiler.hotspot.HotSpotCompiledCodeBuilder.SiteComparator#checkCollision(Infopoint, Infopoint)->int::: site comparator check collision
org.graalvm.compiler.hotspot.HotSpotCompiledCodeBuilder.SiteComparator#compare(Site, Site)->int::: site comparator compare
org.graalvm.compiler.hotspot.HotSpotCounterOp#getDisplacementForLongIndex(TargetDescription, long)->int::: hot spot counter op get displacement for long index
org.graalvm.compiler.hotspot.HotSpotCounterOp.CounterProcedure#apply(int, Value, int)->void:::Lambda interface for iterating over counters declared in this op.
org.graalvm.compiler.hotspot.HotSpotCounterOp#forEachCounter(CounterProcedure, TargetDescription)->void:::Calls the CounterProcedure for each counter in ascending order of their displacement in the counter array.
org.graalvm.compiler.hotspot.HotSpotCounterOp#getIndex(String, String, Value)->int::: hot spot counter op get index
org.graalvm.compiler.hotspot.HotSpotCounterOp#patchCounterIncrement(Assembler, int[])->void:::Patches the increment value in the instruction emitted by this instruction
org.graalvm.compiler.hotspot.HotSpotCounterOp#asInt(JavaConstant)->int::: hot spot counter op as int
org.graalvm.compiler.hotspot.HotSpotCounterOp#getNames()->String[]::: hot spot counter op get names
org.graalvm.compiler.hotspot.HotSpotCounterOp#getGroups()->String[]::: hot spot counter op get groups
org.graalvm.compiler.hotspot.HotSpotDataBuilder#createDataItem(Constant)->Data::: hot spot data builder create data item
org.graalvm.compiler.hotspot.HotSpotDebugInfoBuilder#lockStack()->HotSpotLockStack::: hot spot debug info builder lock stack
org.graalvm.compiler.hotspot.HotSpotDebugInfoBuilder#maxInterpreterFrameSize()->int::: hot spot debug info builder max interpreter frame size
org.graalvm.compiler.hotspot.HotSpotDebugInfoBuilder#computeLockValue(FrameState, int)->JavaValue::: hot spot debug info builder compute lock value
org.graalvm.compiler.hotspot.HotSpotDebugInfoBuilder#computeFrameForState(FrameState)->BytecodeFrame::: hot spot debug info builder compute frame for state
org.graalvm.compiler.hotspot.HotSpotDebugInfoBuilder#raiseInvalidFrameStateError(FrameState)->void::: hot spot debug info builder raise invalid frame state error
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#isReexecutable()->boolean:::Determines if the call has side effects.
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#getKilledLocations()->LocationIdentity[]::: hot spot foreign call linkage get killed locations
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#setCompiledStub(Stub)->void::: hot spot foreign call linkage set compiled stub
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#isCompiledStub()->boolean:::Determines if this is a call to a compiled Stub stub.
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#getStub()->Stub:::Gets the stub, if any, this foreign call links to.
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#finalizeAddress(Backend)->void::: hot spot foreign call linkage finalize address
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#getAddress()->long::: hot spot foreign call linkage get address
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#mayContainFP()->boolean:::Determines if the runtime function or stub might use floating point registers
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#needsJavaFrameAnchor()->boolean:::Determines if a JavaFrameAnchor needs to be set up and torn down around this call.
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#getSymbol()->String:::Gets the VM symbol associated with the target #getAddress() address of the call.
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage#isGuaranteedSafepoint()->boolean:::Identifies foreign calls which are guaranteed to include a safepoint check.
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#create(MetaAccessProvider, CodeCacheProvider, WordTypes, HotSpotForeignCallsProvider, ForeignCallDescriptor, long, RegisterEffect, Type, Type, Transition, Reexecutability, LocationIdentity...)->HotSpotForeignCallLinkage:::Creates a HotSpotForeignCallLinkage.
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#createCallingConvention(MetaAccessProvider, CodeCacheProvider, WordTypes, ValueKindFactory, ForeignCallDescriptor, Type)->CallingConvention:::Gets a calling convention for a given descriptor and call type.
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#toString()->String::: hot spot foreign call linkage impl to string
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#isReexecutable()->boolean::: hot spot foreign call linkage impl is reexecutable
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#isGuaranteedSafepoint()->boolean::: hot spot foreign call linkage impl is guaranteed safepoint
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#getKilledLocations()->LocationIdentity[]::: hot spot foreign call linkage impl get killed locations
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#getOutgoingCallingConvention()->CallingConvention::: hot spot foreign call linkage impl get outgoing calling convention
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#getIncomingCallingConvention()->CallingConvention::: hot spot foreign call linkage impl get incoming calling convention
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#getTemporaries()->Value[]::: hot spot foreign call linkage impl get temporaries
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#getMaxCallTargetOffset()->long::: hot spot foreign call linkage impl get max call target offset
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#getDescriptor()->ForeignCallDescriptor::: hot spot foreign call linkage impl get descriptor
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#setCompiledStub(Stub)->void::: hot spot foreign call linkage impl set compiled stub
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#isCompiledStub()->boolean:::Determines if this is a call to a compiled Stub stub.
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#getStub()->Stub::: hot spot foreign call linkage impl get stub
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#finalizeAddress(Backend)->void::: hot spot foreign call linkage impl finalize address
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#getAddress()->long::: hot spot foreign call linkage impl get address
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#destroysRegisters()->boolean::: hot spot foreign call linkage impl destroys registers
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#needsDebugInfo()->boolean::: hot spot foreign call linkage impl needs debug info
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#mayContainFP()->boolean::: hot spot foreign call linkage impl may contain p
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#needsJavaFrameAnchor()->boolean::: hot spot foreign call linkage impl needs java frame anchor
org.graalvm.compiler.hotspot.HotSpotForeignCallLinkageImpl#getSymbol()->String::: hot spot foreign call linkage impl get symbol
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#getDebugHandlersFactories()->List::: hot spot graal compiler get debug handlers factories
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#getGraalRuntime()->HotSpotGraalRuntimeProvider::: hot spot graal compiler get graal runtime
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#compileMethod(CompilationRequest)->CompilationRequestResult::: hot spot graal compiler compile method
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#compileMethod(CompilationRequest, boolean, OptionValues)->CompilationRequestResult::: hot spot graal compiler compile method
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#isCancelled()->boolean::: hot spot graal compiler is cancelled
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#createGraph(ResolvedJavaMethod, int, boolean, CompilationIdentifier, OptionValues, DebugContext)->StructuredGraph::: hot spot graal compiler create graph
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#compileHelper(CompilationResultBuilderFactory, CompilationResult, StructuredGraph, ResolvedJavaMethod, int, boolean, OptionValues)->CompilationResult::: hot spot graal compiler compile helper
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#compileHelper(CompilationResultBuilderFactory, CompilationResult, StructuredGraph, ResolvedJavaMethod, int, boolean, boolean, OptionValues)->CompilationResult::: hot spot graal compiler compile helper
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#compile(ResolvedJavaMethod, int, boolean, boolean, CompilationIdentifier, DebugContext)->CompilationResult::: hot spot graal compiler compile
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#getOptimisticOpts(ProfilingInfo, OptionValues)->OptimisticOptimizations::: hot spot graal compiler get optimistic opts
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#getSuites(HotSpotProviders, OptionValues)->Suites::: hot spot graal compiler get suites
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#getLIRSuites(HotSpotProviders, OptionValues)->LIRSuites::: hot spot graal compiler get suites
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#configGraphBuilderSuite(PhaseSuite, boolean, boolean, boolean)->PhaseSuite:::Reconfigures a given graph builder suite (GBS) if one of the given GBS parameter values is not the default.
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#str(JavaMethod)->String:::Converts method to a String with JavaMethod#format(String) and the format string "%H.%n(%p)".
org.graalvm.compiler.hotspot.HotSpotGraalCompiler#fmt(Object)->Formattable:::Wraps obj in a Formatter that standardizes formatting for certain objects.
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory#getCompilerName()->String::: hot spot graal compiler factory get compiler name
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory#onSelection()->void::: hot spot graal compiler factory on selection
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory#printProperties(PrintStream)->void::: hot spot graal compiler factory print properties
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory#createCompiler(JVMCIRuntime)->HotSpotGraalCompiler::: hot spot graal compiler factory create compiler
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory#createCompiler(String, JVMCIRuntime, OptionValues, CompilerConfigurationFactory)->HotSpotGraalCompiler:::Creates a new HotSpotGraalRuntime object and a new HotSpotGraalCompiler and returns the latter.
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory#getCompilationLevelAdjustment()->CompilationLevelAdjustment::: hot spot graal compiler factory get compilation level adjustment
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory#adjustCompilationLevel(Object, String, String, boolean, CompilationLevel)->CompilationLevel::: hot spot graal compiler factory adjust compilation level
org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory#shouldExclude(HotSpotResolvedJavaMethod)->boolean::: hot spot graal compiler factory should exclude
org.graalvm.compiler.hotspot.HotSpotGraalJVMCIServiceLocator#getProvider(Class)->T::: hot spot graal service locator get provider
org.graalvm.compiler.hotspot.HotSpotGraalJVMCIServiceLocator#onCompilerCreation(HotSpotGraalCompiler)->void:::Notifies this object of the compiler created via HotSpotGraalJVMCIServiceLocator.
org.graalvm.compiler.hotspot.HotSpotGraalManagementRegistration#initialize(HotSpotGraalRuntime)->void:::Completes the initialization of this registration by recording the HotSpotGraalRuntime the MBean will provide an JMX interface to.
org.graalvm.compiler.hotspot.HotSpotGraalManagementRegistration#poll(boolean)->Object:::Polls this registration to see if the MBean is registered in a MBean server.
org.graalvm.compiler.hotspot.HotSpotGraalOptionValues#asSystemPropertySetting(OptionValues, OptionKey)->String:::Gets the system property assignment that would set the current value for a given option.
org.graalvm.compiler.hotspot.HotSpotGraalOptionValues#defaultOptions()->OptionValues::: hot spot graal option values default options
org.graalvm.compiler.hotspot.HotSpotGraalOptionValues#parseOptions()->EconomicMap, Object>:::Gets and parses options based on Services#getSavedProperties() saved system properties
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getHostProviders()->HotSpotProviders::: hot spot graal runtime get host providers
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getVMConfig()->GraalHotSpotVMConfig::: hot spot graal runtime get config
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#openDebugContext(OptionValues, CompilationIdentifier, Object, Iterable, PrintStream)->DebugContext::: hot spot graal runtime open debug context
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getOptions()->OptionValues::: hot spot graal runtime get options
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#createSnippetCounterGroup(String)->Group::: hot spot graal runtime create snippet counter group
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getName()->String::: hot spot graal runtime get name
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getCapability(Class)->T::: hot spot graal runtime get capability
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getGarbageCollector()->HotSpotGC::: hot spot graal runtime get garbage collector
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getHostBackend()->HotSpotBackend::: hot spot graal runtime get host backend
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getBackend(Class)->Backend::: hot spot graal runtime get backend
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getCompilerConfigurationName()->String::: hot spot graal runtime get compiler configuration name
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#phaseTransition(String)->void:::Take action related to entering a new execution phase.
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#shutdown()->void::: hot spot graal runtime shutdown
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#clearMetrics()->void::: hot spot graal runtime clear metrics
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#notifyBootstrapFinished()->void::: hot spot graal runtime notify bootstrap finished
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#isBootstrapping()->boolean::: hot spot graal runtime is bootstrapping
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#isShutdown()->boolean::: hot spot graal runtime is shutdown
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getOutputDirectory()->DiagnosticsOutputDirectory::: hot spot graal runtime get output directory
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getCompilationProblemsPerAction()->Map::: hot spot graal runtime get compilation problems per action
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getManagement()->HotSpotGraalManagementRegistration::: hot spot graal runtime get management
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#setOptionValues(String[], String[])->String[]:::Sets or updates this object's #getOptions() options from names and values.
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#getOptionValues(String...)->String[]:::Gets the values for the options corresponding to names encoded as strings
org.graalvm.compiler.hotspot.HotSpotGraalRuntime#invokeManagementAction(String, Object[])->Object::: hot spot graal runtime invoke management action
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#getTarget()->TargetDescription::: hot spot graal runtime provider get target
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#getHostProviders()->HotSpotProviders::: hot spot graal runtime provider get host providers
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#getName()->String::: hot spot graal runtime provider get name
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#getHostBackend()->HotSpotBackend::: hot spot graal runtime provider get host backend
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#getVMConfig()->GraalHotSpotVMConfig::: hot spot graal runtime provider get config
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#openDebugContext(OptionValues, CompilationIdentifier, Object, Iterable, PrintStream)->DebugContext:::Opens a debug context for compiling compilable
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#getOptions()->OptionValues:::Gets the option values associated with this runtime.
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#isBootstrapping()->boolean:::Determines if the VM is currently bootstrapping the JVMCI compiler.
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#isShutdown()->boolean:::This runtime has been requested to shutdown.
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#getOutputDirectory()->DiagnosticsOutputDirectory:::Gets a directory into which diagnostics such crash reports and dumps should be written.
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#getCompilationProblemsPerAction()->Map:::Gets the map used to count compilation problems at each ExceptionAction level
org.graalvm.compiler.hotspot.HotSpotGraalRuntimeProvider#getCompilerConfigurationName()->String:::Returns the unique compiler configuration name that is in use
org.graalvm.compiler.hotspot.HotSpotGraalServices#getImplicitExceptionBytes(HotSpotMetaData)->byte[]:::Get the implicit exceptions section of a HotSpotMetaData if it exists.
org.graalvm.compiler.hotspot.HotSpotGraalServices#enterGlobalCompilationContext()->CompilationContext::: hot spot graal services enter global compilation context
org.graalvm.compiler.hotspot.HotSpotGraalServices#openLocalCompilationContext(Object)->CompilationContext::: hot spot graal services open local compilation context
org.graalvm.compiler.hotspot.HotSpotGraalServices#exit(int)->void::: hot spot graal services exit
org.graalvm.compiler.hotspot.HotSpotGraalVMEventListener#notifyShutdown()->void::: hot spot graal event listener notify shutdown
org.graalvm.compiler.hotspot.HotSpotGraalVMEventListener#notifyInstall(HotSpotCodeCacheProvider, InstalledCode, CompiledCode)->void::: hot spot graal event listener notify install
org.graalvm.compiler.hotspot.HotSpotGraalVMEventListener#notifyBootstrapFinished()->void::: hot spot graal event listener notify bootstrap finished
org.graalvm.compiler.hotspot.HotSpotHostBackend#completeInitialization(HotSpotJVMCIRuntime, OptionValues)->void::: hot spot host backend complete initialization
org.graalvm.compiler.hotspot.HotSpotHostBackend#makeCallingConvention(StructuredGraph, Stub)->CallingConvention::: hot spot host backend make calling convention
org.graalvm.compiler.hotspot.HotSpotHostBackend#emitStackOverflowCheck(CompilationResultBuilder)->void::: hot spot host backend emit stack overflow check
org.graalvm.compiler.hotspot.HotSpotHostBackend#bangStackWithOffset(CompilationResultBuilder, int)->void::: hot spot host backend bang stack with offset
org.graalvm.compiler.hotspot.HotSpotHostBackend#newReferenceMapBuilder(int)->ReferenceMapBuilder::: hot spot host backend new reference map builder
org.graalvm.compiler.hotspot.HotSpotInstructionProfiling#run(TargetDescription, LIRGenerationResult, PostAllocationOptimizationContext)->void::: hot spot instruction profiling run
org.graalvm.compiler.hotspot.HotSpotInstructionProfiling#countInstructions(LIR, Assembler)->void:::After assembly the HotSpotBackend#profileInstructions(LIR, CompilationResultBuilder) calls this method for patching the instruction counts into the counter increment code.
org.graalvm.compiler.hotspot.HotSpotInstructionProfiling.InstructionCounterOp#emitCode(CompilationResultBuilder)->void::: instruction counter op emit code
org.graalvm.compiler.hotspot.HotSpotInstructionProfiling.InstructionCounterOp#getInstructionsToProfile()->String[]::: instruction counter op get instructions to profile
org.graalvm.compiler.hotspot.HotSpotLIRGenerationResult#getCalleeSaveInfo()->EconomicMap::: hot spot generation result get callee save info
org.graalvm.compiler.hotspot.HotSpotLIRGenerationResult#getStub()->Stub::: hot spot generation result get stub
org.graalvm.compiler.hotspot.HotSpotLIRGenerationResult#getDeoptimizationRescueSlot()->StackSlot::: hot spot generation result get deoptimization rescue slot
org.graalvm.compiler.hotspot.HotSpotLIRGenerationResult#setDeoptimizationRescueSlot(StackSlot)->void::: hot spot generation result set deoptimization rescue slot
org.graalvm.compiler.hotspot.HotSpotLIRGenerationResult#setMaxInterpreterFrameSize(int)->void::: hot spot generation result set max interpreter frame size
org.graalvm.compiler.hotspot.HotSpotLIRGenerationResult#getMaxInterpreterFrameSize()->int::: hot spot generation result get max interpreter frame size
org.graalvm.compiler.hotspot.HotSpotLIRGenerationResult#requiresReservedStackAccessCheck()->boolean::: hot spot generation result requires reserved stack access check
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitTailcall(Value[], Value)->void:::Emits an operation to make a tail call.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitDeoptimizeCaller(DeoptimizationAction, DeoptimizationReason)->void::: hot spot generator emit deoptimize caller
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitLoadObjectAddress(Constant)->Value:::Emits code for a LoadConstantIndirectlyNode.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitLoadMetaspaceAddress(Constant, HotSpotConstantLoadAction)->Value:::Emits code for a LoadConstantIndirectlyNode.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitLoadConfigValue(int, LIRKind)->Value:::Emits code for a GraalHotSpotVMConfigNode.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitObjectConstantRetrieval(Constant, Value, LIRFrameState)->Value:::Emits code for a ResolveConstantNode to resolve a HotSpotObjectConstant.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitResolveDynamicInvoke(Constant, LIRFrameState)->Value:::Emits code to resolve a dynamic constant.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitMetaspaceConstantRetrieval(Constant, Value, LIRFrameState)->Value:::Emits code for a ResolveConstantNode to resolve a HotSpotMetaspaceConstant.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitResolveMethodAndLoadCounters(Constant, Value, Value, LIRFrameState)->Value:::Emits code for a ResolveMethodAndLoadCountersNode to resolve a HotSpotMetaspaceConstant that represents a ResolvedJavaMethod and return the corresponding MethodCounters object.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitKlassInitializationAndRetrieval(Constant, Value, LIRFrameState)->Value:::Emits code for a ResolveConstantNode to resolve a klass HotSpotMetaspaceConstant and run static initializer.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#emitRandomSeed()->Value:::Emits code for a RandomSeedNode.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#getLockSlot(int)->VirtualStackSlot:::Gets a stack slot for a lock at a given lock nesting depth.
org.graalvm.compiler.hotspot.HotSpotLIRGenerator#getProviders()->HotSpotProviders::: hot spot generator get providers
org.graalvm.compiler.hotspot.HotSpotLockStack#makeLockSlot(int)->VirtualStackSlot:::Gets a stack slot for a lock at a given lock nesting depth, allocating it first if necessary.
org.graalvm.compiler.hotspot.HotSpotLockStack#emitCode(CompilationResultBuilder)->void::: hot spot lock stack emit code
org.graalvm.compiler.hotspot.HotSpotNodeLIRBuilder#emitPatchReturnAddress(ValueNode)->void::: hot spot node builder emit patch return address
org.graalvm.compiler.hotspot.HotSpotNodeLIRBuilder#emitJumpToExceptionHandler(ValueNode)->void::: hot spot node builder emit jump to exception handler
org.graalvm.compiler.hotspot.HotSpotNodeLIRBuilder#emitJumpToExceptionHandlerInCaller(ValueNode, ValueNode, ValueNode)->void::: hot spot node builder emit jump to exception handler in caller
org.graalvm.compiler.hotspot.HotSpotReferenceMapBuilder#addLiveValue(Value)->void::: hot spot reference map builder add live value
org.graalvm.compiler.hotspot.HotSpotReferenceMapBuilder#finish(LIRFrameState)->ReferenceMap::: hot spot reference map builder finish
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#getIntrinsifyingPlugin(ResolvedJavaMethod)->Class::: hot spot replacements impl get intrinsifying plugin
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues)->void::: hot spot replacements impl register method substitution
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#getIntrinsicGraph(ResolvedJavaMethod, CompilationIdentifier, DebugContext, Cancellable)->StructuredGraph::: hot spot replacements impl get intrinsic graph
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues)->StructuredGraph::: hot spot replacements impl get substitution
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#notifyNotInlined(GraphBuilderContext, ResolvedJavaMethod, Invoke)->void::: hot spot replacements impl notify not inlined
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues)->void::: hot spot replacements impl register snippet
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#closeSnippetRegistration()->void::: hot spot replacements impl close snippet registration
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#getSnippetMethods()->Set::: hot spot replacements impl get snippet methods
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#setEncodedSnippets(SymbolicSnippetEncoder.EncodedSnippets)->void::: hot spot replacements impl set encoded snippets
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#encode(OptionValues)->boolean::: hot spot replacements impl encode
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#getSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, OptionValues)->StructuredGraph::: hot spot replacements impl get snippet
org.graalvm.compiler.hotspot.HotSpotReplacementsImpl#getMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)->StructuredGraph::: hot spot replacements impl get method substitution
org.graalvm.compiler.hotspot.HotSpotTTYStreamProvider#getStream()->PrintStream::: hot spot stream provider get stream
org.graalvm.compiler.hotspot.IsGraalPredicate#onCompilerConfigurationFactorySelection(HotSpotJVMCIRuntime, CompilerConfigurationFactory)->void::: is graal predicate on compiler configuration factory selection
org.graalvm.compiler.hotspot.IsGraalPredicate#apply(Class)->boolean::: is graal predicate apply
org.graalvm.compiler.hotspot.IsGraalPredicate#getCompilationLevelAdjustment()->HotSpotJVMCICompilerFactory.CompilationLevelAdjustment::: is graal predicate get compilation level adjustment
org.graalvm.compiler.hotspot.IsGraalPredicateBase#onCompilerConfigurationFactorySelection(HotSpotJVMCIRuntime, CompilerConfigurationFactory)->void::: is graal predicate base on compiler configuration factory selection
org.graalvm.compiler.hotspot.IsGraalPredicateBase#apply(Class)->boolean::: is graal predicate base apply
org.graalvm.compiler.hotspot.IsGraalPredicateBase#getCompilationLevelAdjustment()->HotSpotJVMCICompilerFactory.CompilationLevelAdjustment::: is graal predicate base get compilation level adjustment
org.graalvm.compiler.hotspot.JVMCIVersionCheck.Version#isLessThan(Version)->boolean::: version is less than
org.graalvm.compiler.hotspot.JVMCIVersionCheck.Version#parse(String)->Version::: version parse
org.graalvm.compiler.hotspot.JVMCIVersionCheck.Version2#isLessThan(Version)->boolean::: version2 is less than
org.graalvm.compiler.hotspot.JVMCIVersionCheck.Version2#toString()->String::: version2 to string
org.graalvm.compiler.hotspot.JVMCIVersionCheck.Version3#isLessThan(Version)->boolean::: version3 is less than
org.graalvm.compiler.hotspot.JVMCIVersionCheck.Version3#toString()->String::: version3 to string
org.graalvm.compiler.hotspot.JVMCIVersionCheck#check(Map, boolean)->void::: version check check
org.graalvm.compiler.hotspot.JVMCIVersionCheck#check(Map, Version, String, String, boolean)->void:::Entry point for testing.
org.graalvm.compiler.hotspot.JVMCIVersionCheck#main(String[])->void:::Command line interface for performing the check.
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder#addDelayedInvocationPluginMethod(ResolvedJavaMethod)->void::: symbolic snippet encoder add delayed invocation plugin method
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder#getSnippetMethods()->Set::: symbolic snippet encoder get snippet methods
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SnippetInlineInvokePlugin#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInfo::: snippet inline invoke plugin should inline invoke
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SnippetInlineInvokePlugin#notifyAfterInline(ResolvedJavaMethod)->void::: snippet inline invoke plugin notify after inline
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SnippetInvocationPlugins#lookupInvocation(ResolvedJavaMethod)->InvocationPlugin::: snippet invocation plugins lookup invocation
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues)->void:::Compiles the snippet and stores the graph.
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.EncodedSnippets#getMethodSubstitutionGraph(MethodSubstitutionPlugin, ResolvedJavaMethod, ReplacementsImpl, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)->StructuredGraph::: encoded snippets get method substitution graph
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.EncodedSnippets#getEncodedSnippet(ResolvedJavaMethod, ReplacementsImpl, Object[], StructuredGraph.AllowAssumptions, OptionValues)->StructuredGraph::: encoded snippets get encoded snippet
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues)->void::: symbolic snippet encoder register snippet
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder#encode(OptionValues)->boolean:::Encode any outstanding graphs and return true if any work was done.
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SymbolicEncodedGraph#getObject(int)->Object::: symbolic encoded graph get object
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SymbolicEncodedGraph#isCallToOriginal(ResolvedJavaMethod)->boolean::: symbolic encoded graph is call to original
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.GraalCapability#resolve(GraalRuntime)->Object::: graal capability resolve
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SymbolicResolvedJavaMethod#toString()->String::: symbolic resolved java method to string
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SymbolicResolvedJavaMethod#resolve(ResolvedJavaType)->ResolvedJavaMethod::: symbolic resolved java method resolve
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SymbolicResolvedJavaField#resolve(ResolvedJavaType)->ResolvedJavaField::: symbolic resolved java field resolve
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SymbolicResolvedJavaField#toString()->String::: symbolic resolved java field to string
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SymbolicResolvedJavaMethodBytecode#resolve(ResolvedJavaType)->ResolvedJavaMethodBytecode::: symbolic resolved java method bytecode resolve
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SymbolicStampPair#resolve(ResolvedJavaType)->StampPair::: symbolic stamp pair resolve
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#constantEquals(Constant, Constant)->Boolean::: hot spot substrate constant reflection provider constant equals
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#readArrayLength(JavaConstant)->Integer::: hot spot substrate constant reflection provider read array length
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#readArrayElement(JavaConstant, int)->JavaConstant::: hot spot substrate constant reflection provider read array element
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#readFieldValue(ResolvedJavaField, JavaConstant)->JavaConstant::: hot spot substrate constant reflection provider read field value
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#boxPrimitive(JavaConstant)->JavaConstant::: hot spot substrate constant reflection provider box primitive
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#unboxPrimitive(JavaConstant)->JavaConstant::: hot spot substrate constant reflection provider unbox primitive
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#forString(String)->JavaConstant::: hot spot substrate constant reflection provider for string
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#asJavaType(Constant)->ResolvedJavaType::: hot spot substrate constant reflection provider as java type
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#getMethodHandleAccess()->MethodHandleAccessProvider::: hot spot substrate constant reflection provider get method handle access
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#getMemoryAccessProvider()->MemoryAccessProvider::: hot spot substrate constant reflection provider get memory access provider
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#asJavaClass(ResolvedJavaType)->JavaConstant::: hot spot substrate constant reflection provider as java class
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider#asObjectHub(ResolvedJavaType)->Constant::: hot spot substrate constant reflection provider as object hub
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSnippetReplacementsImpl#createGraphMaker(ResolvedJavaMethod, ResolvedJavaMethod)->GraphMaker::: hot spot snippet replacements impl create graph maker
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.SnippetGraphMaker#createGraphBuilder(Providers, GraphBuilderConfiguration, OptimisticOptimizations, IntrinsicContext)->GraphBuilderPhase.Instance::: snippet graph maker create graph builder
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSnippetGraphBuilderPhase#createBytecodeParser(StructuredGraph, BytecodeParser, ResolvedJavaMethod, int, IntrinsicContext)->BytecodeParser::: hot spot snippet graph builder phase create bytecode parser
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSnippetBytecodeParser#canDeferPlugin(GeneratedInvocationPlugin)->boolean::: hot spot snippet bytecode parser can defer plugin
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSnippetBytecodeParser#canInlinePartialIntrinsicExit()->boolean::: hot spot snippet bytecode parser can inline partial intrinsic exit
org.graalvm.compiler.hotspot.SymbolicSnippetEncoder.HotSpotSnippetBytecodeParser#tryInvocationPlugin(CallTargetNode.InvokeKind, ValueNode[], ResolvedJavaMethod, JavaKind)->boolean::: hot spot snippet bytecode parser try invocation plugin
org.graalvm.compiler.hotspot.WeakClassLoaderSet#add(ClassLoader)->void:::Adds loader to this set.
org.graalvm.compiler.hotspot.WeakClassLoaderSet#resolve(String, EconomicSet)->EconomicSet>:::Tries to resolve className to Class instances with the loaders in this set.

DSAGenParameterSpec#getPrimePLength():::Returns the desired length of the prime P of the to-be-generated DSA domain parameters in bits.:::return
DSAGenParameterSpec#getSubprimeQLength():::Returns the desired length of the sub-prime Q of the to-be-generated DSA domain parameters in bits.:::return
DSAGenParameterSpec#getSeedLength():::Returns the desired length of the domain parameter seed in bits.:::return
DSAParameterSpec#getP():::Returns the prime p.:::return
DSAParameterSpec#getQ():::Returns the sub-prime q.:::return
DSAParameterSpec#getG():::Returns the base g.:::return
DSAPrivateKeySpec#getX():::Returns the private key x.:::return
DSAPrivateKeySpec#getP():::Returns the prime p.:::return
DSAPrivateKeySpec#getQ():::Returns the sub-prime q.:::return
DSAPrivateKeySpec#getG():::Returns the base g.:::return
DSAPublicKeySpec#getY():::Returns the public key y.:::return
DSAPublicKeySpec#getP():::Returns the prime p.:::return
DSAPublicKeySpec#getQ():::Returns the sub-prime q.:::return
DSAPublicKeySpec#getG():::Returns the base g.:::return
ECField#getFieldSize():::Returns the field size in bits:::
ECFieldF2m#getFieldSize():::Returns the field size in bits which is m for this characteristic 2 finite field.:::return
ECFieldF2m#getM():::Returns the value m of this characteristic 2 finite field.:::return
ECFieldF2m#getReductionPolynomial():::Returns a BigInteger whose i-th bit corresponds to the i-th coefficient of the reduction polynomial for polynomial basis or null for normal basis.:::return
ECFieldF2m#getMidTermsOfReductionPolynomial():::Returns an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis.:::if->return->else->return->ks->clone
ECFieldF2m#equals(Object):::Compares this finite field for equality with the specified object.:::if->return->if->return->Arrays->equals->return
ECFieldF2m#hashCode():::Returns a hash code value for this characteristic 2 finite field.:::value->rp->hashCode->return
ECFieldFp#getFieldSize():::Returns the field size in bits which is size of prime p for this prime finite field.:::return->p->bitLength
ECFieldFp#getP():::Returns the prime p of this prime finite field.:::return
ECFieldFp#equals(Object):::Compares this prime finite field for equality with the specified object.:::if->return->if->return->p->equals->return
ECFieldFp#hashCode():::Returns a hash code value for this prime finite field.:::return->p->hashCode
ECParameterSpec#getCurve():::Returns the elliptic curve that this parameter defines.:::return
ECParameterSpec#getGenerator():::Returns the generator which is also known as the base point.:::return
ECParameterSpec#getOrder():::Returns the order of the generator.:::return
ECParameterSpec#getCofactor():::Returns the cofactor.:::return
ECPoint#getAffineX():::Returns the affine x-coordinate x:::return
ECPoint#getAffineY():::Returns the affine y-coordinate y:::return
ECPoint#equals(Object):::Compares this elliptic curve point for equality with the specified object.:::if->return->if->return->if->return->x->equals->y->equals->return
ECPoint#hashCode():::Returns a hash code value for this elliptic curve point.:::if->return->return->x->hashCode->y->hashCode
ECPrivateKeySpec#getS():::Returns the private value S.:::return
ECPrivateKeySpec#getParams():::Returns the associated elliptic curve domain parameters.:::return
ECPublicKeySpec#getW():::Returns the public point W.:::return
ECPublicKeySpec#getParams():::Returns the associated elliptic curve domain parameters.:::return
EllipticCurve#checkValidity(ECField, BigInteger, String)::: elliptic curve check validity:::if->p->getP->if->p->compareTo->throw->new->IllegalArgumentException->else->if->c->signum->throw->new->IllegalArgumentException->else->if->m->getM->if->c->bitLength->throw->new->IllegalArgumentException
EllipticCurve#getField():::Returns the finite field field that this elliptic curve is over.:::return
EllipticCurve#getA():::Returns the first coefficient a of the elliptic curve.:::return
EllipticCurve#getB():::Returns the second coefficient b of the elliptic curve.:::return
EllipticCurve#getSeed():::Returns the seeding bytes seed used during curve generation:::if->return->else->return->seed->clone
EllipticCurve#equals(Object):::Compares this elliptic curve for equality with the specified object.:::if->return->if->curve->if->field->equals->a->equals->b->equals->return->return
EllipticCurve#hashCode():::Returns a hash code value for this elliptic curve.:::return->field->hashCode->a->hashCode->b->hashCode
EncodedKeySpec#getAlgorithm():::Returns the name of the algorithm of the encoded key.:::return
EncodedKeySpec#getEncoded():::Returns the encoded key.:::return->clone
EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification:::
MGF1ParameterSpec#getDigestAlgorithm():::Returns the algorithm name of the message digest used by the mask generation function.:::return
NamedParameterSpec#getName():::Returns the standard name that determines the algorithm parameters.:::return
PKCS8EncodedKeySpec#getEncoded():::Returns the key bytes, encoded according to the PKCS #8 standard.:::return->super->getEncoded
PKCS8EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification.:::return
PSSParameterSpec#getDigestAlgorithm():::Returns the message digest algorithm name.:::return
PSSParameterSpec#getMGFAlgorithm():::Returns the mask generation function algorithm name.:::return
PSSParameterSpec#getMGFParameters():::Returns the parameters for the mask generation function.:::return
PSSParameterSpec#getSaltLength():::Returns the salt length in bytes.:::return
PSSParameterSpec#getTrailerField():::Returns the value for the trailer field.:::return
RSAKeyGenParameterSpec#getKeysize():::Returns the keysize.:::return
RSAKeyGenParameterSpec#getPublicExponent():::Returns the public-exponent value.:::return
RSAKeyGenParameterSpec#getKeyParams():::Returns the parameters to be associated with key.:::return
RSAMultiPrimePrivateCrtKeySpec#getPublicExponent():::Returns the public exponent.:::return
RSAMultiPrimePrivateCrtKeySpec#getPrimeP():::Returns the primeP.:::return
RSAMultiPrimePrivateCrtKeySpec#getPrimeQ():::Returns the primeQ.:::return
RSAMultiPrimePrivateCrtKeySpec#getPrimeExponentP():::Returns the primeExponentP.:::return
RSAMultiPrimePrivateCrtKeySpec#getPrimeExponentQ():::Returns the primeExponentQ.:::return
RSAMultiPrimePrivateCrtKeySpec#getCrtCoefficient():::Returns the crtCoefficient.:::return
RSAMultiPrimePrivateCrtKeySpec#getOtherPrimeInfo():::Returns a copy of the otherPrimeInfo or null if there are only two prime factors (p and q).:::if->return->return->otherPrimeInfo->clone
RSAOtherPrimeInfo#getPrime():::Returns the prime.:::return
RSAOtherPrimeInfo#getExponent():::Returns the prime's exponent.:::return
RSAOtherPrimeInfo#getCrtCoefficient():::Returns the prime's crtCoefficient.:::return
RSAPrivateCrtKeySpec#getPublicExponent():::Returns the public exponent.:::return
RSAPrivateCrtKeySpec#getPrimeP():::Returns the primeP.:::return
RSAPrivateCrtKeySpec#getPrimeQ():::Returns the primeQ.:::return
RSAPrivateCrtKeySpec#getPrimeExponentP():::Returns the primeExponentP.:::return
RSAPrivateCrtKeySpec#getPrimeExponentQ():::Returns the primeExponentQ.:::return
RSAPrivateCrtKeySpec#getCrtCoefficient():::Returns the crtCoefficient.:::return
RSAPrivateKeySpec#getModulus():::Returns the modulus.:::return
RSAPrivateKeySpec#getPrivateExponent():::Returns the private exponent.:::return
RSAPrivateKeySpec#getParams():::Returns the parameters associated with this key, may be null if not present.:::return
RSAPublicKeySpec#getModulus():::Returns the modulus.:::return
RSAPublicKeySpec#getPublicExponent():::Returns the public exponent.:::return
RSAPublicKeySpec#getParams():::Returns the parameters associated with this key, may be null if not present.:::return
X509EncodedKeySpec#getEncoded():::Returns the key bytes, encoded according to the X.509 standard.:::return->super->getEncoded
X509EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification.:::return
XECPrivateKeySpec#getParams():::Get the algorithm parameters that define the curve and other settings.:::return
XECPrivateKeySpec#getScalar():::Get the scalar value encoded as an unpruned byte array:::return->scalar->clone
XECPublicKeySpec#getParams():::Get the algorithm parameters that define the curve and other settings.:::return
XECPublicKeySpec#getU():::Get the u coordinate of the point.:::return

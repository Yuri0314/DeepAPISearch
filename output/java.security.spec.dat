DSAGenParameterSpec#getPrimePLength():::Returns the desired length of the prime P of the to-be-generated DSA domain parameters in bits.:::
DSAGenParameterSpec#getSubprimeQLength():::Returns the desired length of the sub-prime Q of the to-be-generated DSA domain parameters in bits.:::
DSAGenParameterSpec#getSeedLength():::Returns the desired length of the domain parameter seed in bits.:::
DSAParameterSpec#getP():::Returns the prime p.:::
DSAParameterSpec#getQ():::Returns the sub-prime q.:::
DSAParameterSpec#getG():::Returns the base g.:::
DSAPrivateKeySpec#getX():::Returns the private key x.:::
DSAPrivateKeySpec#getP():::Returns the prime p.:::
DSAPrivateKeySpec#getQ():::Returns the sub-prime q.:::
DSAPrivateKeySpec#getG():::Returns the base g.:::
DSAPublicKeySpec#getY():::Returns the public key y.:::
DSAPublicKeySpec#getP():::Returns the prime p.:::
DSAPublicKeySpec#getQ():::Returns the sub-prime q.:::
DSAPublicKeySpec#getG():::Returns the base g.:::
ECField#getFieldSize():::Returns the field size in bits:::
ECFieldF2m#getFieldSize():::Returns the field size in bits which is m for this characteristic 2 finite field.:::
ECFieldF2m#getM():::Returns the value m of this characteristic 2 finite field.:::
ECFieldF2m#getReductionPolynomial():::Returns a BigInteger whose i-th bit corresponds to the i-th coefficient of the reduction polynomial for polynomial basis or null for normal basis.:::
ECFieldF2m#getMidTermsOfReductionPolynomial():::Returns an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis.:::ks.clone
ECFieldF2m#equals(Object):::Compares this finite field for equality with the specified object.:::Arrays.equals
ECFieldF2m#hashCode():::Returns a hash code value for this characteristic 2 finite field.:::rp.hashCode
ECFieldFp#getFieldSize():::Returns the field size in bits which is size of prime p for this prime finite field.:::p.bitLength
ECFieldFp#getP():::Returns the prime p of this prime finite field.:::
ECFieldFp#equals(Object):::Compares this prime finite field for equality with the specified object.:::p.equals
ECFieldFp#hashCode():::Returns a hash code value for this prime finite field.:::p.hashCode
ECParameterSpec#getCurve():::Returns the elliptic curve that this parameter defines.:::
ECParameterSpec#getGenerator():::Returns the generator which is also known as the base point.:::
ECParameterSpec#getOrder():::Returns the order of the generator.:::
ECParameterSpec#getCofactor():::Returns the cofactor.:::
ECPoint#getAffineX():::Returns the affine x-coordinate x:::
ECPoint#getAffineY():::Returns the affine y-coordinate y:::
ECPoint#equals(Object):::Compares this elliptic curve point for equality with the specified object.:::x.equals->y.equals
ECPoint#hashCode():::Returns a hash code value for this elliptic curve point.:::x.hashCode->y.hashCode
ECPrivateKeySpec#getS():::Returns the private value S.:::
ECPrivateKeySpec#getParams():::Returns the associated elliptic curve domain parameters.:::
ECPublicKeySpec#getW():::Returns the public point W.:::
ECPublicKeySpec#getParams():::Returns the associated elliptic curve domain parameters.:::
EllipticCurve#getField():::Returns the finite field field that this elliptic curve is over.:::
EllipticCurve#getA():::Returns the first coefficient a of the elliptic curve.:::
EllipticCurve#getB():::Returns the second coefficient b of the elliptic curve.:::
EllipticCurve#getSeed():::Returns the seeding bytes seed used during curve generation:::seed.clone
EllipticCurve#equals(Object):::Compares this elliptic curve for equality with the specified object.:::field.equals->a.equals->b.equals
EllipticCurve#hashCode():::Returns a hash code value for this elliptic curve.:::field.hashCode->a.hashCode->b.hashCode
EncodedKeySpec#getAlgorithm():::Returns the name of the algorithm of the encoded key.:::
EncodedKeySpec#getEncoded():::Returns the encoded key.:::this.encodedKey.clone
EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification:::
MGF1ParameterSpec#getDigestAlgorithm():::Returns the algorithm name of the message digest used by the mask generation function.:::
NamedParameterSpec#getName():::Returns the standard name that determines the algorithm parameters.:::
PKCS8EncodedKeySpec#getEncoded():::Returns the key bytes, encoded according to the PKCS #8 standard.:::super.getEncoded
PKCS8EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification.:::
PSSParameterSpec#getDigestAlgorithm():::Returns the message digest algorithm name.:::
PSSParameterSpec#getMGFAlgorithm():::Returns the mask generation function algorithm name.:::
PSSParameterSpec#getMGFParameters():::Returns the parameters for the mask generation function.:::
PSSParameterSpec#getSaltLength():::Returns the salt length in bytes.:::
PSSParameterSpec#getTrailerField():::Returns the value for the trailer field.:::
RSAKeyGenParameterSpec#getKeysize():::Returns the keysize.:::
RSAKeyGenParameterSpec#getPublicExponent():::Returns the public-exponent value.:::
RSAKeyGenParameterSpec#getKeyParams():::Returns the parameters to be associated with key.:::
RSAMultiPrimePrivateCrtKeySpec#getPublicExponent():::Returns the public exponent.:::
RSAMultiPrimePrivateCrtKeySpec#getPrimeP():::Returns the primeP.:::
RSAMultiPrimePrivateCrtKeySpec#getPrimeQ():::Returns the primeQ.:::
RSAMultiPrimePrivateCrtKeySpec#getPrimeExponentP():::Returns the primeExponentP.:::
RSAMultiPrimePrivateCrtKeySpec#getPrimeExponentQ():::Returns the primeExponentQ.:::
RSAMultiPrimePrivateCrtKeySpec#getCrtCoefficient():::Returns the crtCoefficient.:::
RSAMultiPrimePrivateCrtKeySpec#getOtherPrimeInfo():::Returns a copy of the otherPrimeInfo or null if there are only two prime factors (p and q).:::otherPrimeInfo.clone
RSAOtherPrimeInfo#getPrime():::Returns the prime.:::
RSAOtherPrimeInfo#getExponent():::Returns the prime's exponent.:::
RSAOtherPrimeInfo#getCrtCoefficient():::Returns the prime's crtCoefficient.:::
RSAPrivateCrtKeySpec#getPublicExponent():::Returns the public exponent.:::
RSAPrivateCrtKeySpec#getPrimeP():::Returns the primeP.:::
RSAPrivateCrtKeySpec#getPrimeQ():::Returns the primeQ.:::
RSAPrivateCrtKeySpec#getPrimeExponentP():::Returns the primeExponentP.:::
RSAPrivateCrtKeySpec#getPrimeExponentQ():::Returns the primeExponentQ.:::
RSAPrivateCrtKeySpec#getCrtCoefficient():::Returns the crtCoefficient.:::
RSAPrivateKeySpec#getModulus():::Returns the modulus.:::
RSAPrivateKeySpec#getPrivateExponent():::Returns the private exponent.:::
RSAPrivateKeySpec#getParams():::Returns the parameters associated with this key, may be null if not present.:::
RSAPublicKeySpec#getModulus():::Returns the modulus.:::
RSAPublicKeySpec#getPublicExponent():::Returns the public exponent.:::
RSAPublicKeySpec#getParams():::Returns the parameters associated with this key, may be null if not present.:::
X509EncodedKeySpec#getEncoded():::Returns the key bytes, encoded according to the X.509 standard.:::super.getEncoded
X509EncodedKeySpec#getFormat():::Returns the name of the encoding format associated with this key specification.:::
XECPrivateKeySpec#getParams():::Get the algorithm parameters that define the curve and other settings.:::
XECPrivateKeySpec#getScalar():::Get the scalar value encoded as an unpruned byte array:::scalar.clone
XECPublicKeySpec#getParams():::Get the algorithm parameters that define the curve and other settings.:::
XECPublicKeySpec#getU():::Get the u coordinate of the point.:::

java.security.spec.DSAGenParameterSpec#getPrimePLength()->int:::Returns the desired length of the prime P of the to-be-generated DSA domain parameters in bits.
java.security.spec.DSAGenParameterSpec#getSubprimeQLength()->int:::Returns the desired length of the sub-prime Q of the to-be-generated DSA domain parameters in bits.
java.security.spec.DSAGenParameterSpec#getSeedLength()->int:::Returns the desired length of the domain parameter seed in bits.
java.security.spec.DSAParameterSpec#getP()->BigInteger:::Returns the prime p.
java.security.spec.DSAParameterSpec#getQ()->BigInteger:::Returns the sub-prime q.
java.security.spec.DSAParameterSpec#getG()->BigInteger:::Returns the base g.
java.security.spec.DSAPrivateKeySpec#getX()->BigInteger:::Returns the private key x.
java.security.spec.DSAPrivateKeySpec#getP()->BigInteger:::Returns the prime p.
java.security.spec.DSAPrivateKeySpec#getQ()->BigInteger:::Returns the sub-prime q.
java.security.spec.DSAPrivateKeySpec#getG()->BigInteger:::Returns the base g.
java.security.spec.DSAPublicKeySpec#getY()->BigInteger:::Returns the public key y.
java.security.spec.DSAPublicKeySpec#getP()->BigInteger:::Returns the prime p.
java.security.spec.DSAPublicKeySpec#getQ()->BigInteger:::Returns the sub-prime q.
java.security.spec.DSAPublicKeySpec#getG()->BigInteger:::Returns the base g.
java.security.spec.ECField#getFieldSize()->int:::Returns the field size in bits
java.security.spec.ECFieldF2m#getFieldSize()->int:::Returns the field size in bits which is m for this characteristic 2 finite field.
java.security.spec.ECFieldF2m#getM()->int:::Returns the value m of this characteristic 2 finite field.
java.security.spec.ECFieldF2m#getReductionPolynomial()->BigInteger:::Returns a BigInteger whose i-th bit corresponds to the i-th coefficient of the reduction polynomial for polynomial basis or null for normal basis.
java.security.spec.ECFieldF2m#getMidTermsOfReductionPolynomial()->int[]:::Returns an integer array which contains the order of the middle term(s) of the reduction polynomial for polynomial basis or null for normal basis.
java.security.spec.ECFieldF2m#equals(Object)->boolean:::Compares this finite field for equality with the specified object.
java.security.spec.ECFieldF2m#hashCode()->int:::Returns a hash code value for this characteristic 2 finite field.
java.security.spec.ECFieldFp#getFieldSize()->int:::Returns the field size in bits which is size of prime p for this prime finite field.
java.security.spec.ECFieldFp#getP()->BigInteger:::Returns the prime p of this prime finite field.
java.security.spec.ECFieldFp#equals(Object)->boolean:::Compares this prime finite field for equality with the specified object.
java.security.spec.ECFieldFp#hashCode()->int:::Returns a hash code value for this prime finite field.
java.security.spec.ECParameterSpec#getCurve()->EllipticCurve:::Returns the elliptic curve that this parameter defines.
java.security.spec.ECParameterSpec#getGenerator()->ECPoint:::Returns the generator which is also known as the base point.
java.security.spec.ECParameterSpec#getOrder()->BigInteger:::Returns the order of the generator.
java.security.spec.ECParameterSpec#getCofactor()->int:::Returns the cofactor.
java.security.spec.ECPoint#getAffineX()->BigInteger:::Returns the affine x-coordinate x
java.security.spec.ECPoint#getAffineY()->BigInteger:::Returns the affine y-coordinate y
java.security.spec.ECPoint#equals(Object)->boolean:::Compares this elliptic curve point for equality with the specified object.
java.security.spec.ECPoint#hashCode()->int:::Returns a hash code value for this elliptic curve point.
java.security.spec.ECPrivateKeySpec#getS()->BigInteger:::Returns the private value S.
java.security.spec.ECPrivateKeySpec#getParams()->ECParameterSpec:::Returns the associated elliptic curve domain parameters.
java.security.spec.ECPublicKeySpec#getW()->ECPoint:::Returns the public point W.
java.security.spec.ECPublicKeySpec#getParams()->ECParameterSpec:::Returns the associated elliptic curve domain parameters.
java.security.spec.EllipticCurve#getField()->ECField:::Returns the finite field field that this elliptic curve is over.
java.security.spec.EllipticCurve#getA()->BigInteger:::Returns the first coefficient a of the elliptic curve.
java.security.spec.EllipticCurve#getB()->BigInteger:::Returns the second coefficient b of the elliptic curve.
java.security.spec.EllipticCurve#getSeed()->byte[]:::Returns the seeding bytes seed used during curve generation
java.security.spec.EllipticCurve#equals(Object)->boolean:::Compares this elliptic curve for equality with the specified object.
java.security.spec.EllipticCurve#hashCode()->int:::Returns a hash code value for this elliptic curve.
java.security.spec.EncodedKeySpec#getAlgorithm()->String:::Returns the name of the algorithm of the encoded key.
java.security.spec.EncodedKeySpec#getEncoded()->byte[]:::Returns the encoded key.
java.security.spec.EncodedKeySpec#getFormat()->String:::Returns the name of the encoding format associated with this key specification
java.security.spec.MGF1ParameterSpec#getDigestAlgorithm()->String:::Returns the algorithm name of the message digest used by the mask generation function.
java.security.spec.NamedParameterSpec#getName()->String:::Returns the standard name that determines the algorithm parameters.
java.security.spec.PKCS8EncodedKeySpec#getEncoded()->byte[]:::Returns the key bytes, encoded according to the PKCS #8 standard.
java.security.spec.PKCS8EncodedKeySpec#getFormat()->String:::Returns the name of the encoding format associated with this key specification.
java.security.spec.PSSParameterSpec#getDigestAlgorithm()->String:::Returns the message digest algorithm name.
java.security.spec.PSSParameterSpec#getMGFAlgorithm()->String:::Returns the mask generation function algorithm name.
java.security.spec.PSSParameterSpec#getMGFParameters()->AlgorithmParameterSpec:::Returns the parameters for the mask generation function.
java.security.spec.PSSParameterSpec#getSaltLength()->int:::Returns the salt length in bytes.
java.security.spec.PSSParameterSpec#getTrailerField()->int:::Returns the value for the trailer field.
java.security.spec.RSAKeyGenParameterSpec#getKeysize()->int:::Returns the keysize.
java.security.spec.RSAKeyGenParameterSpec#getPublicExponent()->BigInteger:::Returns the public-exponent value.
java.security.spec.RSAKeyGenParameterSpec#getKeyParams()->AlgorithmParameterSpec:::Returns the parameters to be associated with key.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec#getPublicExponent()->BigInteger:::Returns the public exponent.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec#getPrimeP()->BigInteger:::Returns the primeP.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec#getPrimeQ()->BigInteger:::Returns the primeQ.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec#getPrimeExponentP()->BigInteger:::Returns the primeExponentP.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec#getPrimeExponentQ()->BigInteger:::Returns the primeExponentQ.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec#getCrtCoefficient()->BigInteger:::Returns the crtCoefficient.
java.security.spec.RSAMultiPrimePrivateCrtKeySpec#getOtherPrimeInfo()->RSAOtherPrimeInfo[]:::Returns a copy of the otherPrimeInfo or null if there are only two prime factors (p and q).
java.security.spec.RSAOtherPrimeInfo#getPrime()->BigInteger:::Returns the prime.
java.security.spec.RSAOtherPrimeInfo#getExponent()->BigInteger:::Returns the prime's exponent.
java.security.spec.RSAOtherPrimeInfo#getCrtCoefficient()->BigInteger:::Returns the prime's crtCoefficient.
java.security.spec.RSAPrivateCrtKeySpec#getPublicExponent()->BigInteger:::Returns the public exponent.
java.security.spec.RSAPrivateCrtKeySpec#getPrimeP()->BigInteger:::Returns the primeP.
java.security.spec.RSAPrivateCrtKeySpec#getPrimeQ()->BigInteger:::Returns the primeQ.
java.security.spec.RSAPrivateCrtKeySpec#getPrimeExponentP()->BigInteger:::Returns the primeExponentP.
java.security.spec.RSAPrivateCrtKeySpec#getPrimeExponentQ()->BigInteger:::Returns the primeExponentQ.
java.security.spec.RSAPrivateCrtKeySpec#getCrtCoefficient()->BigInteger:::Returns the crtCoefficient.
java.security.spec.RSAPrivateKeySpec#getModulus()->BigInteger:::Returns the modulus.
java.security.spec.RSAPrivateKeySpec#getPrivateExponent()->BigInteger:::Returns the private exponent.
java.security.spec.RSAPrivateKeySpec#getParams()->AlgorithmParameterSpec:::Returns the parameters associated with this key, may be null if not present.
java.security.spec.RSAPublicKeySpec#getModulus()->BigInteger:::Returns the modulus.
java.security.spec.RSAPublicKeySpec#getPublicExponent()->BigInteger:::Returns the public exponent.
java.security.spec.RSAPublicKeySpec#getParams()->AlgorithmParameterSpec:::Returns the parameters associated with this key, may be null if not present.
java.security.spec.X509EncodedKeySpec#getEncoded()->byte[]:::Returns the key bytes, encoded according to the X.509 standard.
java.security.spec.X509EncodedKeySpec#getFormat()->String:::Returns the name of the encoding format associated with this key specification.
java.security.spec.XECPrivateKeySpec#getParams()->AlgorithmParameterSpec:::Get the algorithm parameters that define the curve and other settings.
java.security.spec.XECPrivateKeySpec#getScalar()->byte[]:::Get the scalar value encoded as an unpruned byte array
java.security.spec.XECPublicKeySpec#getParams()->AlgorithmParameterSpec:::Get the algorithm parameters that define the curve and other settings.
java.security.spec.XECPublicKeySpec#getU()->BigInteger:::Get the u coordinate of the point.

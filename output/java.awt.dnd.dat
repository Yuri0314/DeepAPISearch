java.awt.dnd.Autoscroll#getAutoscrollInsets()->Insets::: autoscroll get autoscroll insets
java.awt.dnd.Autoscroll#autoscroll(Point)->void::: autoscroll autoscroll
java.awt.dnd.DnDEventMulticaster#dragEnter(DragSourceDragEvent)->void:::Handles the DragSourceDragEvent by invoking dragEnter on listener-a and listener-b.
java.awt.dnd.DnDEventMulticaster#dragOver(DragSourceDragEvent)->void:::Handles the DragSourceDragEvent by invoking dragOver on listener-a and listener-b.
java.awt.dnd.DnDEventMulticaster#dropActionChanged(DragSourceDragEvent)->void:::Handles the DragSourceDragEvent by invoking dropActionChanged on listener-a and listener-b.
java.awt.dnd.DnDEventMulticaster#dragExit(DragSourceEvent)->void:::Handles the DragSourceEvent by invoking dragExit on listener-a and listener-b.
java.awt.dnd.DnDEventMulticaster#dragDropEnd(DragSourceDropEvent)->void:::Handles the DragSourceDropEvent by invoking dragDropEnd on listener-a and listener-b.
java.awt.dnd.DnDEventMulticaster#dragMouseMoved(DragSourceDragEvent)->void:::Handles the DragSourceDragEvent by invoking dragMouseMoved on listener-a and listener-b.
java.awt.dnd.DnDEventMulticaster#add(DragSourceListener, DragSourceListener)->DragSourceListener:::Adds drag-source-listener-a with drag-source-listener-b and returns the resulting multicast listener.
java.awt.dnd.DnDEventMulticaster#add(DragSourceMotionListener, DragSourceMotionListener)->DragSourceMotionListener:::Adds drag-source-motion-listener-a with drag-source-motion-listener-b and returns the resulting multicast listener.
java.awt.dnd.DnDEventMulticaster#remove(DragSourceListener, DragSourceListener)->DragSourceListener:::Removes the old drag-source-listener from drag-source-listener-l and returns the resulting multicast listener.
java.awt.dnd.DnDEventMulticaster#remove(DragSourceMotionListener, DragSourceMotionListener)->DragSourceMotionListener:::Removes the old drag-source-motion-listener from drag-source-motion-listener-l and returns the resulting multicast listener.
java.awt.dnd.DnDEventMulticaster#addInternal(EventListener, EventListener)->EventListener:::Returns the resulting multicast listener from adding listener-a and listener-b together
java.awt.dnd.DnDEventMulticaster#remove(EventListener)->EventListener:::Removes a listener from this multicaster and returns the resulting multicast listener.
java.awt.dnd.DnDEventMulticaster#removeInternal(EventListener, EventListener)->EventListener:::Returns the resulting multicast listener after removing the old listener from listener-l
java.awt.dnd.DnDEventMulticaster#save(ObjectOutputStream, String, EventListener)->void::: dn event multicaster save
java.awt.dnd.DragGestureEvent#getSourceAsDragGestureRecognizer()->DragGestureRecognizer::: drag gesture event get source as drag gesture recognizer
java.awt.dnd.DragGestureEvent#getComponent()->Component::: drag gesture event get component
java.awt.dnd.DragGestureEvent#getDragSource()->DragSource::: drag gesture event get drag source
java.awt.dnd.DragGestureEvent#getDragOrigin()->Point::: drag gesture event get drag origin
java.awt.dnd.DragGestureEvent#iterator()->Iterator:::Returns an Iterator for the events comprising the gesture.
java.awt.dnd.DragGestureEvent#toArray()->Object[]::: drag gesture event to array
java.awt.dnd.DragGestureEvent#toArray(Object[])->Object[]:::Returns an array of the events comprising the drag gesture.
java.awt.dnd.DragGestureEvent#getDragAction()->int::: drag gesture event get drag action
java.awt.dnd.DragGestureEvent#getTriggerEvent()->InputEvent::: drag gesture event get trigger event
java.awt.dnd.DragGestureEvent#startDrag(Cursor, Transferable)->void:::Starts the drag operation given the Cursor for this drag operation and the Transferable representing the source data for this drag operation
java.awt.dnd.DragGestureEvent#startDrag(Cursor, Transferable, DragSourceListener)->void::: drag gesture event start drag
java.awt.dnd.DragGestureEvent#startDrag(Cursor, Image, Point, Transferable, DragSourceListener)->void::: drag gesture event start drag
java.awt.dnd.DragGestureListener#dragGestureRecognized(DragGestureEvent)->void::: drag gesture listener drag gesture recognized
java.awt.dnd.DragGestureRecognizer#registerListeners()->void::: drag gesture recognizer register listeners
java.awt.dnd.DragGestureRecognizer#unregisterListeners()->void::: drag gesture recognizer unregister listeners
java.awt.dnd.DragGestureRecognizer#getDragSource()->DragSource::: drag gesture recognizer get drag source
java.awt.dnd.DragGestureRecognizer#getComponent()->Component::: drag gesture recognizer get component
java.awt.dnd.DragGestureRecognizer#setComponent(Component)->void::: drag gesture recognizer set component
java.awt.dnd.DragGestureRecognizer#getSourceActions()->int::: drag gesture recognizer get source actions
java.awt.dnd.DragGestureRecognizer#setSourceActions(int)->void::: drag gesture recognizer set source actions
java.awt.dnd.DragGestureRecognizer#getTriggerEvent()->InputEvent::: drag gesture recognizer get trigger event
java.awt.dnd.DragGestureRecognizer#resetRecognizer()->void::: drag gesture recognizer reset recognizer
java.awt.dnd.DragGestureRecognizer#addDragGestureListener(DragGestureListener)->void::: drag gesture recognizer add drag gesture listener
java.awt.dnd.DragGestureRecognizer#removeDragGestureListener(DragGestureListener)->void::: drag gesture recognizer remove drag gesture listener
java.awt.dnd.DragGestureRecognizer#fireDragGestureRecognized(int, Point)->void:::Notify the DragGestureListener that a Drag and Drop initiating gesture has occurred
java.awt.dnd.DragGestureRecognizer#appendEvent(InputEvent)->void::: drag gesture recognizer append event
java.awt.dnd.DragSource#getDefaultDragSource()->DragSource:::Gets the DragSource object associated with the underlying platform.
java.awt.dnd.DragSource#isDragImageSupported()->boolean::: drag source is drag image supported
java.awt.dnd.DragSource#startDrag(DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener, FlavorMap)->void::: drag source start drag
java.awt.dnd.DragSource#startDrag(DragGestureEvent, Cursor, Transferable, DragSourceListener, FlavorMap)->void::: drag source start drag
java.awt.dnd.DragSource#startDrag(DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener)->void::: drag source start drag
java.awt.dnd.DragSource#startDrag(DragGestureEvent, Cursor, Transferable, DragSourceListener)->void::: drag source start drag
java.awt.dnd.DragSource#createDragSourceContext(DragGestureEvent, Cursor, Image, Point, Transferable, DragSourceListener)->DragSourceContext::: drag source create drag source context
java.awt.dnd.DragSource#getFlavorMap()->FlavorMap::: drag source get flavor map
java.awt.dnd.DragSource#createDragGestureRecognizer(Class, Component, int, DragGestureListener)->T::: drag source create drag gesture recognizer
java.awt.dnd.DragSource#createDefaultDragGestureRecognizer(Component, int, DragGestureListener)->DragGestureRecognizer::: drag source create default drag gesture recognizer
java.awt.dnd.DragSource#addDragSourceListener(DragSourceListener)->void:::Adds the specified DragSourceListener to this DragSource to receive drag source events during drag operations initiated with this DragSource
java.awt.dnd.DragSource#removeDragSourceListener(DragSourceListener)->void:::Removes the specified DragSourceListener from this DragSource
java.awt.dnd.DragSource#getDragSourceListeners()->DragSourceListener[]:::Gets all the DragSourceListeners registered with this DragSource.
java.awt.dnd.DragSource#addDragSourceMotionListener(DragSourceMotionListener)->void:::Adds the specified DragSourceMotionListener to this DragSource to receive drag motion events during drag operations initiated with this DragSource
java.awt.dnd.DragSource#removeDragSourceMotionListener(DragSourceMotionListener)->void:::Removes the specified DragSourceMotionListener from this DragSource
java.awt.dnd.DragSource#getDragSourceMotionListeners()->DragSourceMotionListener[]:::Gets all of the  DragSourceMotionListeners registered with this DragSource.
java.awt.dnd.DragSource#getListeners(Class)->T[]:::Gets all the objects currently registered as FooListeners upon this DragSource
java.awt.dnd.DragSource#processDragEnter(DragSourceDragEvent)->void:::This method calls dragEnter on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceDragEvent.
java.awt.dnd.DragSource#processDragOver(DragSourceDragEvent)->void:::This method calls dragOver on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceDragEvent.
java.awt.dnd.DragSource#processDropActionChanged(DragSourceDragEvent)->void:::This method calls dropActionChanged on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceDragEvent.
java.awt.dnd.DragSource#processDragExit(DragSourceEvent)->void:::This method calls dragExit on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceEvent.
java.awt.dnd.DragSource#processDragDropEnd(DragSourceDropEvent)->void:::This method calls dragDropEnd on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceDropEvent.
java.awt.dnd.DragSource#processDragMouseMoved(DragSourceDragEvent)->void:::This method calls dragMouseMoved on the DragSourceMotionListeners registered with this DragSource, and passes them the specified DragSourceDragEvent.
java.awt.dnd.DragSource#getDragThreshold()->int:::Returns the drag gesture motion threshold
java.awt.dnd.DragSourceAdapter#dragEnter(DragSourceDragEvent)->void:::Called as the cursor's hotspot enters a platform-dependent drop site
java.awt.dnd.DragSourceAdapter#dragOver(DragSourceDragEvent)->void:::Called as the cursor's hotspot moves over a platform-dependent drop site
java.awt.dnd.DragSourceAdapter#dragMouseMoved(DragSourceDragEvent)->void:::Called whenever the mouse is moved during a drag operation.
java.awt.dnd.DragSourceAdapter#dropActionChanged(DragSourceDragEvent)->void:::Called when the user has modified the drop gesture
java.awt.dnd.DragSourceAdapter#dragExit(DragSourceEvent)->void:::Called as the cursor's hotspot exits a platform-dependent drop site
java.awt.dnd.DragSourceAdapter#dragDropEnd(DragSourceDropEvent)->void:::This method is invoked to signify that the Drag and Drop operation is complete
java.awt.dnd.DragSourceContext#getDragSource()->DragSource::: drag source context get drag source
java.awt.dnd.DragSourceContext#getComponent()->Component::: drag source context get component
java.awt.dnd.DragSourceContext#getTrigger()->DragGestureEvent::: drag source context get trigger
java.awt.dnd.DragSourceContext#getSourceActions()->int:::Returns a bitwise mask of DnDConstants that represent the set of drop actions supported by the drag source for the drag operation associated with this DragSourceContext.
java.awt.dnd.DragSourceContext#setCursor(Cursor)->void::: drag source context set cursor
java.awt.dnd.DragSourceContext#getCursor()->Cursor::: drag source context get cursor
java.awt.dnd.DragSourceContext#addDragSourceListener(DragSourceListener)->void::: drag source context add drag source listener
java.awt.dnd.DragSourceContext#removeDragSourceListener(DragSourceListener)->void::: drag source context remove drag source listener
java.awt.dnd.DragSourceContext#transferablesFlavorsChanged()->void::: drag source context transferables flavors changed
java.awt.dnd.DragSourceContext#dragEnter(DragSourceDragEvent)->void:::Calls dragEnter on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent.
java.awt.dnd.DragSourceContext#dragOver(DragSourceDragEvent)->void:::Calls dragOver on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent.
java.awt.dnd.DragSourceContext#dragExit(DragSourceEvent)->void:::Calls dragExit on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceEvent.
java.awt.dnd.DragSourceContext#dropActionChanged(DragSourceDragEvent)->void:::Calls dropActionChanged on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent.
java.awt.dnd.DragSourceContext#dragDropEnd(DragSourceDropEvent)->void:::Calls dragDropEnd on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDropEvent.
java.awt.dnd.DragSourceContext#dragMouseMoved(DragSourceDragEvent)->void:::Calls dragMouseMoved on the DragSourceMotionListeners registered with the DragSource associated with this DragSourceContext, and them passes the specified DragSourceDragEvent.
java.awt.dnd.DragSourceContext#getTransferable()->Transferable:::Returns the Transferable associated with this DragSourceContext.
java.awt.dnd.DragSourceContext#updateCurrentCursor(int, int, int)->void:::If the default drag cursor behavior is active, this method sets the default drag cursor for the specified actions supported by the drag source, the drop target action, and status, otherwise this method does nothing.
java.awt.dnd.DragSourceDragEvent#getTargetActions()->int:::This method returns the target drop action.
java.awt.dnd.DragSourceDragEvent#getGestureModifiers()->int::: drag source drag event get gesture modifiers
java.awt.dnd.DragSourceDragEvent#getGestureModifiersEx()->int::: drag source drag event get gesture modifiers ex
java.awt.dnd.DragSourceDragEvent#getUserAction()->int:::This method returns the user drop action.
java.awt.dnd.DragSourceDragEvent#getDropAction()->int:::This method returns the logical intersection of the target drop action and the set of drop actions supported by the drag source.
java.awt.dnd.DragSourceDropEvent#getDropSuccess()->boolean::: drag source drop event get drop success
java.awt.dnd.DragSourceDropEvent#getDropAction()->int::: drag source drop event get drop action
java.awt.dnd.DragSourceEvent#getDragSourceContext()->DragSourceContext::: drag source event get drag source context
java.awt.dnd.DragSourceEvent#getLocation()->Point:::This method returns a Point indicating the cursor location in screen coordinates at the moment this event occurred, or null if the cursor location is not specified for this event.
java.awt.dnd.DragSourceEvent#getX()->int:::This method returns the horizontal coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event.
java.awt.dnd.DragSourceEvent#getY()->int:::This method returns the vertical coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event.
java.awt.dnd.DragSourceListener#dragEnter(DragSourceDragEvent)->void:::Called as the cursor's hotspot enters a platform-dependent drop site
java.awt.dnd.DragSourceListener#dragOver(DragSourceDragEvent)->void:::Called as the cursor's hotspot moves over a platform-dependent drop site
java.awt.dnd.DragSourceListener#dropActionChanged(DragSourceDragEvent)->void:::Called when the user has modified the drop gesture
java.awt.dnd.DragSourceListener#dragExit(DragSourceEvent)->void:::Called as the cursor's hotspot exits a platform-dependent drop site
java.awt.dnd.DragSourceListener#dragDropEnd(DragSourceDropEvent)->void:::This method is invoked to signify that the Drag and Drop operation is complete
java.awt.dnd.DragSourceMotionListener#dragMouseMoved(DragSourceDragEvent)->void:::Called whenever the mouse is moved during a drag operation.
java.awt.dnd.DropTarget#setComponent(Component)->void::: drop target set component
java.awt.dnd.DropTarget#getComponent()->Component::: drop target get component
java.awt.dnd.DropTarget#setDefaultActions(int)->void::: drop target set default actions
java.awt.dnd.DropTarget#doSetDefaultActions(int)->void::: drop target do set default actions
java.awt.dnd.DropTarget#getDefaultActions()->int::: drop target get default actions
java.awt.dnd.DropTarget#setActive(boolean)->void::: drop target set active
java.awt.dnd.DropTarget#isActive()->boolean::: drop target is active
java.awt.dnd.DropTarget#addDropTargetListener(DropTargetListener)->void::: drop target add drop target listener
java.awt.dnd.DropTarget#removeDropTargetListener(DropTargetListener)->void::: drop target remove drop target listener
java.awt.dnd.DropTarget#dragEnter(DropTargetDragEvent)->void:::Calls dragEnter on the registered DropTargetListener and passes it the specified DropTargetDragEvent
java.awt.dnd.DropTarget#dragOver(DropTargetDragEvent)->void:::Calls dragOver on the registered DropTargetListener and passes it the specified DropTargetDragEvent
java.awt.dnd.DropTarget#dropActionChanged(DropTargetDragEvent)->void:::Calls dropActionChanged on the registered DropTargetListener and passes it the specified DropTargetDragEvent
java.awt.dnd.DropTarget#dragExit(DropTargetEvent)->void:::Calls dragExit on the registered DropTargetListener and passes it the specified DropTargetEvent
java.awt.dnd.DropTarget#drop(DropTargetDropEvent)->void:::Calls drop on the registered DropTargetListener and passes it the specified DropTargetDropEvent if this DropTarget is active.
java.awt.dnd.DropTarget#getFlavorMap()->FlavorMap::: drop target get flavor map
java.awt.dnd.DropTarget#setFlavorMap(FlavorMap)->void::: drop target set flavor map
java.awt.dnd.DropTarget#addNotify()->void:::Notify the DropTarget that it has been associated with a Component  ********************************************************************* This method is usually called from java.awt.Component.addNotify() of the Component associated with this DropTarget to notify the DropTarget that a ComponentPeer has been associated with that Component
java.awt.dnd.DropTarget#removeNotify()->void::: drop target remove notify
java.awt.dnd.DropTarget#getDropTargetContext()->DropTargetContext::: drop target get drop target context
java.awt.dnd.DropTarget#createDropTargetContext()->DropTargetContext::: drop target create drop target context
java.awt.dnd.DropTarget.DropTargetAutoScroller#updateLocation(Point)->void::: drop target auto scroller update location
java.awt.dnd.DropTarget.DropTargetAutoScroller#stop()->void::: drop target auto scroller stop
java.awt.dnd.DropTarget.DropTargetAutoScroller#actionPerformed(ActionEvent)->void::: drop target auto scroller action performed
java.awt.dnd.DropTarget#createDropTargetAutoScroller(Component, Point)->DropTargetAutoScroller::: drop target create drop target auto scroller
java.awt.dnd.DropTarget#initializeAutoscrolling(Point)->void::: drop target initialize autoscrolling
java.awt.dnd.DropTarget#updateAutoscroll(Point)->void::: drop target update autoscroll
java.awt.dnd.DropTarget#clearAutoscroll()->void::: drop target clear autoscroll
java.awt.dnd.DropTargetAdapter#dragEnter(DropTargetDragEvent)->void:::Called while a drag operation is ongoing, when the mouse pointer enters the operable part of the drop site for the DropTarget registered with this listener.
java.awt.dnd.DropTargetAdapter#dragOver(DropTargetDragEvent)->void:::Called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the DropTarget registered with this listener.
java.awt.dnd.DropTargetAdapter#dropActionChanged(DropTargetDragEvent)->void:::Called if the user has modified the current drop gesture.
java.awt.dnd.DropTargetAdapter#dragExit(DropTargetEvent)->void:::Called while a drag operation is ongoing, when the mouse pointer has exited the operable part of the drop site for the DropTarget registered with this listener.
java.awt.dnd.DropTargetContext#getDropTarget()->DropTarget::: drop target context get drop target
java.awt.dnd.DropTargetContext#getComponent()->Component::: drop target context get component
java.awt.dnd.DropTargetContext#reset()->void:::Called when disassociated with the DropTargetContextPeer.
java.awt.dnd.DropTargetContext#setTargetActions(int)->void::: drop target context set target actions
java.awt.dnd.DropTargetContext#getTargetActions()->int::: drop target context get target actions
java.awt.dnd.DropTargetContext#dropComplete(boolean)->void::: drop target context drop complete
java.awt.dnd.DropTargetContext#acceptDrag(int)->void::: drop target context accept drag
java.awt.dnd.DropTargetContext#rejectDrag()->void::: drop target context reject drag
java.awt.dnd.DropTargetContext#acceptDrop(int)->void::: drop target context accept drop
java.awt.dnd.DropTargetContext#rejectDrop()->void::: drop target context reject drop
java.awt.dnd.DropTargetContext#getCurrentDataFlavors()->DataFlavor[]::: drop target context get current data flavors
java.awt.dnd.DropTargetContext#getCurrentDataFlavorsAsList()->List::: drop target context get current data flavors as list
java.awt.dnd.DropTargetContext#isDataFlavorSupported(DataFlavor)->boolean::: drop target context is data flavor supported
java.awt.dnd.DropTargetContext#getTransferable()->Transferable::: drop target context get transferable
java.awt.dnd.DropTargetContext#getDropTargetContextPeer()->DropTargetContextPeer:::Get the DropTargetContextPeer
java.awt.dnd.DropTargetContext#setDropTargetContextPeer(DropTargetContextPeer)->void:::Sets the DropTargetContextPeer
java.awt.dnd.DropTargetContext#createTransferableProxy(Transferable, boolean)->Transferable:::Creates a TransferableProxy to proxy for the specified Transferable.
java.awt.dnd.DropTargetContext.TransferableProxy#getTransferDataFlavors()->DataFlavor[]:::Returns an array of DataFlavor objects indicating the flavors the data can be provided in by the encapsulated transferable.
java.awt.dnd.DropTargetContext.TransferableProxy#isDataFlavorSupported(DataFlavor)->boolean:::Returns whether or not the specified data flavor is supported by the encapsulated transferable.
java.awt.dnd.DropTargetContext.TransferableProxy#getTransferData(DataFlavor)->Object:::Returns an object which represents the data provided by the encapsulated transferable for the requested data flavor
java.awt.dnd.DropTargetDragEvent#getLocation()->Point::: drop target drag event get location
java.awt.dnd.DropTargetDragEvent#getCurrentDataFlavors()->DataFlavor[]::: drop target drag event get current data flavors
java.awt.dnd.DropTargetDragEvent#getCurrentDataFlavorsAsList()->List::: drop target drag event get current data flavors as list
java.awt.dnd.DropTargetDragEvent#isDataFlavorSupported(DataFlavor)->boolean::: drop target drag event is data flavor supported
java.awt.dnd.DropTargetDragEvent#getSourceActions()->int:::This method returns the source drop actions.
java.awt.dnd.DropTargetDragEvent#getDropAction()->int:::This method returns the user drop action.
java.awt.dnd.DropTargetDragEvent#getTransferable()->Transferable:::This method returns the Transferable object that represents the data associated with the current drag operation.
java.awt.dnd.DropTargetDragEvent#acceptDrag(int)->void:::Accepts the drag
java.awt.dnd.DropTargetDragEvent#rejectDrag()->void:::Rejects the drag as a result of examining either the dropAction or the available DataFlavor types.
java.awt.dnd.DropTargetDropEvent#getLocation()->Point::: drop target drop event get location
java.awt.dnd.DropTargetDropEvent#getCurrentDataFlavors()->DataFlavor[]::: drop target drop event get current data flavors
java.awt.dnd.DropTargetDropEvent#getCurrentDataFlavorsAsList()->List::: drop target drop event get current data flavors as list
java.awt.dnd.DropTargetDropEvent#isDataFlavorSupported(DataFlavor)->boolean::: drop target drop event is data flavor supported
java.awt.dnd.DropTargetDropEvent#getSourceActions()->int:::This method returns the source drop actions.
java.awt.dnd.DropTargetDropEvent#getDropAction()->int:::This method returns the user drop action.
java.awt.dnd.DropTargetDropEvent#getTransferable()->Transferable::: drop target drop event get transferable
java.awt.dnd.DropTargetDropEvent#acceptDrop(int)->void::: drop target drop event accept drop
java.awt.dnd.DropTargetDropEvent#rejectDrop()->void::: drop target drop event reject drop
java.awt.dnd.DropTargetDropEvent#dropComplete(boolean)->void::: drop target drop event drop complete
java.awt.dnd.DropTargetDropEvent#isLocalTransfer()->boolean::: drop target drop event is local transfer
java.awt.dnd.DropTargetEvent#getDropTargetContext()->DropTargetContext::: drop target event get drop target context
java.awt.dnd.DropTargetListener#dragEnter(DropTargetDragEvent)->void::: drop target listener drag enter
java.awt.dnd.DropTargetListener#dragOver(DropTargetDragEvent)->void::: drop target listener drag over
java.awt.dnd.DropTargetListener#dropActionChanged(DropTargetDragEvent)->void::: drop target listener drop action changed
java.awt.dnd.DropTargetListener#dragExit(DropTargetEvent)->void::: drop target listener drag exit
java.awt.dnd.DropTargetListener#drop(DropTargetDropEvent)->void::: drop target listener drop
java.awt.dnd.MouseDragGestureRecognizer#registerListeners()->void::: mouse drag gesture recognizer register listeners
java.awt.dnd.MouseDragGestureRecognizer#unregisterListeners()->void::: mouse drag gesture recognizer unregister listeners
java.awt.dnd.MouseDragGestureRecognizer#mouseClicked(MouseEvent)->void::: mouse drag gesture recognizer mouse clicked
java.awt.dnd.MouseDragGestureRecognizer#mousePressed(MouseEvent)->void::: mouse drag gesture recognizer mouse pressed
java.awt.dnd.MouseDragGestureRecognizer#mouseReleased(MouseEvent)->void::: mouse drag gesture recognizer mouse released
java.awt.dnd.MouseDragGestureRecognizer#mouseEntered(MouseEvent)->void::: mouse drag gesture recognizer mouse entered
java.awt.dnd.MouseDragGestureRecognizer#mouseExited(MouseEvent)->void::: mouse drag gesture recognizer mouse exited
java.awt.dnd.MouseDragGestureRecognizer#mouseDragged(MouseEvent)->void::: mouse drag gesture recognizer mouse dragged
java.awt.dnd.MouseDragGestureRecognizer#mouseMoved(MouseEvent)->void::: mouse drag gesture recognizer mouse moved
java.awt.dnd.SerializationTester#test(Object)->boolean::: serialization tester test

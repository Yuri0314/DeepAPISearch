DnDEventMulticaster#dragEnter(DragSourceDragEvent):::Handles the DragSourceDragEvent by invoking dragEnter on listener-a and listener-b.:::dragEnter->dragEnter
DnDEventMulticaster#dragOver(DragSourceDragEvent):::Handles the DragSourceDragEvent by invoking dragOver on listener-a and listener-b.:::dragOver->dragOver
DnDEventMulticaster#dropActionChanged(DragSourceDragEvent):::Handles the DragSourceDragEvent by invoking dropActionChanged on listener-a and listener-b.:::dropActionChanged->dropActionChanged
DnDEventMulticaster#dragExit(DragSourceEvent):::Handles the DragSourceEvent by invoking dragExit on listener-a and listener-b.:::dragExit->dragExit
DnDEventMulticaster#dragDropEnd(DragSourceDropEvent):::Handles the DragSourceDropEvent by invoking dragDropEnd on listener-a and listener-b.:::dragDropEnd->dragDropEnd
DnDEventMulticaster#dragMouseMoved(DragSourceDragEvent):::Handles the DragSourceDragEvent by invoking dragMouseMoved on listener-a and listener-b.:::dragMouseMoved->dragMouseMoved
DnDEventMulticaster#add(DragSourceListener, DragSourceListener):::Adds drag-source-listener-a with drag-source-listener-b and returns the resulting multicast listener.:::return->addInternal
DnDEventMulticaster#add(DragSourceMotionListener, DragSourceMotionListener):::Adds drag-source-motion-listener-a with drag-source-motion-listener-b and returns the resulting multicast listener.:::return->addInternal
DnDEventMulticaster#remove(DragSourceListener, DragSourceListener):::Removes the old drag-source-listener from drag-source-listener-l and returns the resulting multicast listener.:::return->removeInternal
DnDEventMulticaster#remove(DragSourceMotionListener, DragSourceMotionListener):::Removes the old drag-source-motion-listener from drag-source-motion-listener-l and returns the resulting multicast listener.:::return->removeInternal
DnDEventMulticaster#addInternal(EventListener, EventListener):::Returns the resulting multicast listener from adding listener-a and listener-b together:::if->return->if->return->return->new->DnDEventMulticaster
DnDEventMulticaster#remove(EventListener):::Removes a listener from this multicaster and returns the resulting multicast listener.:::if->return->if->return->a2->removeInternal->b2->removeInternal->if->return->return->addInternal
DnDEventMulticaster#removeInternal(EventListener, EventListener):::Returns the resulting multicast listener after removing the old listener from listener-l:::if->return->else->if->return->remove->else->return
DragGestureEvent#iterator():::Returns an Iterator for the events comprising the gesture.:::return->events->iterator
DragGestureEvent#toArray(Object[]):::Returns an array of the events comprising the drag gesture.:::return->events->toArray
DragGestureEvent#startDrag(Cursor, Transferable):::Starts the drag operation given the Cursor for this drag operation and the Transferable representing the source data for this drag operation:::dragSource->startDrag
DragGestureRecognizer#fireDragGestureRecognized(int, Point):::Notify the DragGestureListener that a Drag and Drop initiating gesture has occurred:::try->if->dragGestureListener->new->DragGestureEvent->dragGestureRecognized->catch->finally->events->clear
DragSource#getDefaultDragSource():::Gets the DragSource object associated with the underlying platform.:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->else->return
DragSource#addDragSourceListener(DragSourceListener):::Adds the specified DragSourceListener to this DragSource to receive drag source events during drag operations initiated with this DragSource:::if->synchronized->DnDEventMulticaster->add
DragSource#removeDragSourceListener(DragSourceListener):::Removes the specified DragSourceListener from this DragSource:::if->synchronized->DnDEventMulticaster->remove
DragSource#getDragSourceListeners():::Gets all the DragSourceListeners registered with this DragSource.:::return->getListeners
DragSource#addDragSourceMotionListener(DragSourceMotionListener):::Adds the specified DragSourceMotionListener to this DragSource to receive drag motion events during drag operations initiated with this DragSource:::if->synchronized->DnDEventMulticaster->add
DragSource#removeDragSourceMotionListener(DragSourceMotionListener):::Removes the specified DragSourceMotionListener from this DragSource:::if->synchronized->DnDEventMulticaster->remove
DragSource#getDragSourceMotionListeners():::Gets all of the  DragSourceMotionListeners registered with this DragSource.:::return->getListeners
DragSource#getListeners(Class):::Gets all the objects currently registered as FooListeners upon this DragSource:::l->if->else->if->return->DnDEventMulticaster->getListeners
DragSource#processDragEnter(DragSourceDragEvent):::This method calls dragEnter on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceDragEvent.:::dsl->if->dsl->dragEnter
DragSource#processDragOver(DragSourceDragEvent):::This method calls dragOver on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceDragEvent.:::dsl->if->dsl->dragOver
DragSource#processDropActionChanged(DragSourceDragEvent):::This method calls dropActionChanged on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceDragEvent.:::dsl->if->dsl->dropActionChanged
DragSource#processDragExit(DragSourceEvent):::This method calls dragExit on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceEvent.:::dsl->if->dsl->dragExit
DragSource#processDragDropEnd(DragSourceDropEvent):::This method calls dragDropEnd on the DragSourceListeners registered with this DragSource, and passes them the specified DragSourceDropEvent.:::dsl->if->dsl->dragDropEnd
DragSource#processDragMouseMoved(DragSourceDragEvent):::This method calls dragMouseMoved on the DragSourceMotionListeners registered with this DragSource, and passes them the specified DragSourceDragEvent.:::dsml->if->dsml->dragMouseMoved
DragSource#getDragThreshold():::Returns the drag gesture motion threshold:::ts->AccessController->new->GetIntegerAction->doPrivileged->intValue->if->return->else->td->Toolkit->getDefaultToolkit->getDesktopProperty->if->return->td->intValue->return
DragSourceAdapter#dragEnter(DragSourceDragEvent):::Called as the cursor's hotspot enters a platform-dependent drop site:::
DragSourceAdapter#dragOver(DragSourceDragEvent):::Called as the cursor's hotspot moves over a platform-dependent drop site:::
DragSourceAdapter#dragMouseMoved(DragSourceDragEvent):::Called whenever the mouse is moved during a drag operation.:::
DragSourceAdapter#dropActionChanged(DragSourceDragEvent):::Called when the user has modified the drop gesture:::
DragSourceAdapter#dragExit(DragSourceEvent):::Called as the cursor's hotspot exits a platform-dependent drop site:::
DragSourceAdapter#dragDropEnd(DragSourceDropEvent):::This method is invoked to signify that the Drag and Drop operation is complete:::
DragSourceContext#getSourceActions():::Returns a bitwise mask of DnDConstants that represent the set of drop actions supported by the drag source for the drag operation associated with this DragSourceContext.:::return
DragSourceContext#dragEnter(DragSourceDragEvent):::Calls dragEnter on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent.:::dsl->if->dsl->dragEnter->getDragSource->processDragEnter->getSourceActions->dsde->getTargetActions->updateCurrentCursor
DragSourceContext#dragOver(DragSourceDragEvent):::Calls dragOver on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent.:::dsl->if->dsl->dragOver->getDragSource->processDragOver->getSourceActions->dsde->getTargetActions->updateCurrentCursor
DragSourceContext#dragExit(DragSourceEvent):::Calls dragExit on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceEvent.:::dsl->if->dsl->dragExit->getDragSource->processDragExit->updateCurrentCursor
DragSourceContext#dropActionChanged(DragSourceDragEvent):::Calls dropActionChanged on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDragEvent.:::dsl->if->dsl->dropActionChanged->getDragSource->processDropActionChanged->getSourceActions->dsde->getTargetActions->updateCurrentCursor
DragSourceContext#dragDropEnd(DragSourceDropEvent):::Calls dragDropEnd on the DragSourceListeners registered with this DragSourceContext and with the associated DragSource, and passes them the specified DragSourceDropEvent.:::dsl->if->dsl->dragDropEnd->getDragSource->processDragDropEnd
DragSourceContext#dragMouseMoved(DragSourceDragEvent):::Calls dragMouseMoved on the DragSourceMotionListeners registered with the DragSource associated with this DragSourceContext, and them passes the specified DragSourceDragEvent.:::getDragSource->processDragMouseMoved
DragSourceContext#getTransferable():::Returns the Transferable associated with this DragSourceContext.:::return
DragSourceContext#updateCurrentCursor(int, int, int):::If the default drag cursor behavior is active, this method sets the default drag cursor for the specified actions supported by the drag source, the drop target action, and status, otherwise this method does nothing.:::if->return->c->switch->ra->if->if->else->if->else->else->if->else->if->else->setCursorImpl
DragSourceDragEvent#getTargetActions():::This method returns the target drop action.:::return
DragSourceDragEvent#getUserAction():::This method returns the user drop action.:::return
DragSourceDragEvent#getDropAction():::This method returns the logical intersection of the target drop action and the set of drop actions supported by the drag source.:::return->getDragSourceContext->getSourceActions
DragSourceEvent#getLocation():::This method returns a Point indicating the cursor location in screen coordinates at the moment this event occurred, or null if the cursor location is not specified for this event.:::if->return->new->Point->else->return
DragSourceEvent#getX():::This method returns the horizontal coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event.:::return
DragSourceEvent#getY():::This method returns the vertical coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event.:::return
DragSourceListener#dragEnter(DragSourceDragEvent):::Called as the cursor's hotspot enters a platform-dependent drop site:::
DragSourceListener#dragOver(DragSourceDragEvent):::Called as the cursor's hotspot moves over a platform-dependent drop site:::
DragSourceListener#dropActionChanged(DragSourceDragEvent):::Called when the user has modified the drop gesture:::
DragSourceListener#dragExit(DragSourceEvent):::Called as the cursor's hotspot exits a platform-dependent drop site:::
DragSourceListener#dragDropEnd(DragSourceDropEvent):::This method is invoked to signify that the Drag and Drop operation is complete:::
DragSourceMotionListener#dragMouseMoved(DragSourceDragEvent):::Called whenever the mouse is moved during a drag operation.:::
DropTarget#dragEnter(DropTargetDragEvent):::Calls dragEnter on the registered DropTargetListener and passes it the specified DropTargetDragEvent:::if->return->if->dtListener->dragEnter->else->dtde->getDropTargetContext->setTargetActions->dtde->getLocation->initializeAutoscrolling
DropTarget#dragOver(DropTargetDragEvent):::Calls dragOver on the registered DropTargetListener and passes it the specified DropTargetDragEvent:::if->return->if->dtListener->dragOver->dtde->getLocation->updateAutoscroll
DropTarget#dropActionChanged(DropTargetDragEvent):::Calls dropActionChanged on the registered DropTargetListener and passes it the specified DropTargetDragEvent:::if->return->if->dtListener->dropActionChanged->dtde->getLocation->updateAutoscroll
DropTarget#dragExit(DropTargetEvent):::Calls dragExit on the registered DropTargetListener and passes it the specified DropTargetEvent:::if->return->if->dtListener->dragExit->clearAutoscroll
DropTarget#drop(DropTargetDropEvent):::Calls drop on the registered DropTargetListener and passes it the specified DropTargetDropEvent if this DropTarget is active.:::clearAutoscroll->if->dtListener->drop->else->dtde->rejectDrop
DropTarget#addNotify():::Notify the DropTarget that it has been associated with a Component  ********************************************************************* This method is usually called from java.awt.Component.addNotify() of the Component associated with this DropTarget to notify the DropTarget that a ComponentPeer has been associated with that Component:::acc->AWTAccessor->getComponentAccessor->peer->acc->getPeer->if->return->for->c->c->getParent->if->addDropTarget->else
DropTargetAdapter#dragEnter(DropTargetDragEvent):::Called while a drag operation is ongoing, when the mouse pointer enters the operable part of the drop site for the DropTarget registered with this listener.:::
DropTargetAdapter#dragOver(DropTargetDragEvent):::Called when a drag operation is ongoing, while the mouse pointer is still over the operable part of the drop site for the DropTarget registered with this listener.:::
DropTargetAdapter#dropActionChanged(DropTargetDragEvent):::Called if the user has modified the current drop gesture.:::
DropTargetAdapter#dragExit(DropTargetEvent):::Called while a drag operation is ongoing, when the mouse pointer has exited the operable part of the drop site for the DropTarget registered with this listener.:::
DropTargetContext#reset():::Called when disassociated with the DropTargetContextPeer.:::
DropTargetContext#getDropTargetContextPeer():::Get the DropTargetContextPeer:::return
DropTargetContext#setDropTargetContextPeer(DropTargetContextPeer):::Sets the DropTargetContextPeer:::
DropTargetContext#createTransferableProxy(Transferable, boolean):::Creates a TransferableProxy to proxy for the specified Transferable.:::return->new->TransferableProxy
DropTargetContext.TransferableProxy#getTransferDataFlavors():::Returns an array of DataFlavor objects indicating the flavors the data can be provided in by the encapsulated transferable.:::return->proxy->getTransferDataFlavors
DropTargetContext.TransferableProxy#isDataFlavorSupported(DataFlavor):::Returns whether or not the specified data flavor is supported by the encapsulated transferable.:::return->proxy->isDataFlavorSupported
DropTargetContext.TransferableProxy#getTransferData(DataFlavor):::Returns an object which represents the data provided by the encapsulated transferable for the requested data flavor:::return->proxy->getTransferData
DropTargetDragEvent#getSourceActions():::This method returns the source drop actions.:::return
DropTargetDragEvent#getDropAction():::This method returns the user drop action.:::return
DropTargetDragEvent#getTransferable():::This method returns the Transferable object that represents the data associated with the current drag operation.:::return->getDropTargetContext->getTransferable
DropTargetDragEvent#acceptDrag(int):::Accepts the drag:::getDropTargetContext->acceptDrag
DropTargetDragEvent#rejectDrag():::Rejects the drag as a result of examining either the dropAction or the available DataFlavor types.:::getDropTargetContext->rejectDrag
DropTargetDropEvent#getSourceActions():::This method returns the source drop actions.:::return
DropTargetDropEvent#getDropAction():::This method returns the user drop action.:::return

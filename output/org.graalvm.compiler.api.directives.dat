GraalDirectives#deoptimize():::Directive for the compiler to fall back to the bytecode interpreter at this point.:::
GraalDirectives#deoptimizeAndInvalidate():::Directive for the compiler to fall back to the bytecode interpreter at this point, invalidate the compiled code and reprofile the method.:::
GraalDirectives#deoptimizeAndInvalidateWithSpeculation():::Directive for the compiler to fall back to the bytecode interpreter at this point, invalidate the compiled code, record a speculation and reprofile the method.:::
GraalDirectives#inCompiledCode():::Returns a boolean value indicating whether the method is executed in Graal-compiled code.:::return
GraalDirectives#controlFlowAnchor():::A call to this method will never be duplicated by control flow optimizations in the compiler.:::
GraalDirectives#injectBranchProbability(double, boolean):::Injects a probability for the given condition into the profiling information of a branch instruction:::return
GraalDirectives#injectIterationCount(double, boolean):::Injects an average iteration count of a loop into the probability information of a loop exit condition:::return->injectBranchProbability
GraalDirectives#blackhole(boolean):::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.:::
GraalDirectives#blackhole(byte):::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.:::
GraalDirectives#blackhole(short):::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.:::
GraalDirectives#blackhole(char):::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.:::
GraalDirectives#blackhole(int):::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.:::
GraalDirectives#blackhole(long):::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.:::
GraalDirectives#blackhole(float):::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.:::
GraalDirectives#blackhole(double):::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.:::
GraalDirectives#blackhole(Object):::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.:::
GraalDirectives#bindToRegister(boolean):::Forces a value to be kept in a register.:::
GraalDirectives#bindToRegister(byte):::Forces a value to be kept in a register.:::
GraalDirectives#bindToRegister(short):::Forces a value to be kept in a register.:::
GraalDirectives#bindToRegister(char):::Forces a value to be kept in a register.:::
GraalDirectives#bindToRegister(int):::Forces a value to be kept in a register.:::
GraalDirectives#bindToRegister(long):::Forces a value to be kept in a register.:::
GraalDirectives#bindToRegister(float):::Forces a value to be kept in a register.:::
GraalDirectives#bindToRegister(double):::Forces a value to be kept in a register.:::
GraalDirectives#bindToRegister(Object):::Forces a value to be kept in a register.:::
GraalDirectives#spillRegisters():::Spills all caller saved registers.:::
GraalDirectives#opaque(boolean):::Do nothing, but also make sure the compiler doesn't do any optimizations across this call:::return
GraalDirectives#opaque(byte):::Do nothing, but also make sure the compiler doesn't do any optimizations across this call:::return
GraalDirectives#opaque(short):::Do nothing, but also make sure the compiler doesn't do any optimizations across this call:::return
GraalDirectives#opaque(char):::Do nothing, but also make sure the compiler doesn't do any optimizations across this call:::return
GraalDirectives#opaque(int):::Do nothing, but also make sure the compiler doesn't do any optimizations across this call:::return
GraalDirectives#opaque(long):::Do nothing, but also make sure the compiler doesn't do any optimizations across this call:::return
GraalDirectives#opaque(float):::Do nothing, but also make sure the compiler doesn't do any optimizations across this call:::return
GraalDirectives#opaque(double):::Do nothing, but also make sure the compiler doesn't do any optimizations across this call:::return
GraalDirectives#opaque(T):::Do nothing, but also make sure the compiler doesn't do any optimizations across this call:::return
GraalDirectives#guardingNonNull(T)::: graal directives guarding non null:::if->deoptimize->return
GraalDirectives#ensureVirtualized(Object):::Ensures that the given object will be virtual (escape analyzed) at all points that are dominated by the current position.:::
GraalDirectives#ensureVirtualizedHere(Object):::Ensures that the given object will be virtual at the current position.:::

org.graalvm.compiler.api.directives.GraalDirectives#deoptimize()->void:::Directive for the compiler to fall back to the bytecode interpreter at this point.
org.graalvm.compiler.api.directives.GraalDirectives#deoptimizeAndInvalidate()->void:::Directive for the compiler to fall back to the bytecode interpreter at this point, invalidate the compiled code and reprofile the method.
org.graalvm.compiler.api.directives.GraalDirectives#deoptimizeAndInvalidateWithSpeculation()->void:::Directive for the compiler to fall back to the bytecode interpreter at this point, invalidate the compiled code, record a speculation and reprofile the method.
org.graalvm.compiler.api.directives.GraalDirectives#inCompiledCode()->boolean:::Returns a boolean value indicating whether the method is executed in Graal-compiled code.
org.graalvm.compiler.api.directives.GraalDirectives#controlFlowAnchor()->void:::A call to this method will never be duplicated by control flow optimizations in the compiler.
org.graalvm.compiler.api.directives.GraalDirectives#injectBranchProbability(double, boolean)->boolean:::Injects a probability for the given condition into the profiling information of a branch instruction
org.graalvm.compiler.api.directives.GraalDirectives#injectIterationCount(double, boolean)->boolean:::Injects an average iteration count of a loop into the probability information of a loop exit condition
org.graalvm.compiler.api.directives.GraalDirectives#blackhole(boolean)->void:::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.
org.graalvm.compiler.api.directives.GraalDirectives#blackhole(byte)->void:::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.
org.graalvm.compiler.api.directives.GraalDirectives#blackhole(short)->void:::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.
org.graalvm.compiler.api.directives.GraalDirectives#blackhole(char)->void:::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.
org.graalvm.compiler.api.directives.GraalDirectives#blackhole(int)->void:::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.
org.graalvm.compiler.api.directives.GraalDirectives#blackhole(long)->void:::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.
org.graalvm.compiler.api.directives.GraalDirectives#blackhole(float)->void:::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.
org.graalvm.compiler.api.directives.GraalDirectives#blackhole(double)->void:::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.
org.graalvm.compiler.api.directives.GraalDirectives#blackhole(Object)->void:::Consume a value, making sure the compiler doesn't optimize away the computation of this value, even if it is otherwise unused.
org.graalvm.compiler.api.directives.GraalDirectives#bindToRegister(boolean)->void:::Forces a value to be kept in a register.
org.graalvm.compiler.api.directives.GraalDirectives#bindToRegister(byte)->void:::Forces a value to be kept in a register.
org.graalvm.compiler.api.directives.GraalDirectives#bindToRegister(short)->void:::Forces a value to be kept in a register.
org.graalvm.compiler.api.directives.GraalDirectives#bindToRegister(char)->void:::Forces a value to be kept in a register.
org.graalvm.compiler.api.directives.GraalDirectives#bindToRegister(int)->void:::Forces a value to be kept in a register.
org.graalvm.compiler.api.directives.GraalDirectives#bindToRegister(long)->void:::Forces a value to be kept in a register.
org.graalvm.compiler.api.directives.GraalDirectives#bindToRegister(float)->void:::Forces a value to be kept in a register.
org.graalvm.compiler.api.directives.GraalDirectives#bindToRegister(double)->void:::Forces a value to be kept in a register.
org.graalvm.compiler.api.directives.GraalDirectives#bindToRegister(Object)->void:::Forces a value to be kept in a register.
org.graalvm.compiler.api.directives.GraalDirectives#spillRegisters()->void:::Spills all caller saved registers.
org.graalvm.compiler.api.directives.GraalDirectives#opaque(boolean)->boolean:::Do nothing, but also make sure the compiler doesn't do any optimizations across this call
org.graalvm.compiler.api.directives.GraalDirectives#opaque(byte)->byte:::Do nothing, but also make sure the compiler doesn't do any optimizations across this call
org.graalvm.compiler.api.directives.GraalDirectives#opaque(short)->short:::Do nothing, but also make sure the compiler doesn't do any optimizations across this call
org.graalvm.compiler.api.directives.GraalDirectives#opaque(char)->char:::Do nothing, but also make sure the compiler doesn't do any optimizations across this call
org.graalvm.compiler.api.directives.GraalDirectives#opaque(int)->int:::Do nothing, but also make sure the compiler doesn't do any optimizations across this call
org.graalvm.compiler.api.directives.GraalDirectives#opaque(long)->long:::Do nothing, but also make sure the compiler doesn't do any optimizations across this call
org.graalvm.compiler.api.directives.GraalDirectives#opaque(float)->float:::Do nothing, but also make sure the compiler doesn't do any optimizations across this call
org.graalvm.compiler.api.directives.GraalDirectives#opaque(double)->double:::Do nothing, but also make sure the compiler doesn't do any optimizations across this call
org.graalvm.compiler.api.directives.GraalDirectives#opaque(T)->T:::Do nothing, but also make sure the compiler doesn't do any optimizations across this call
org.graalvm.compiler.api.directives.GraalDirectives#guardingNonNull(T)->T::: graal directives guarding non null
org.graalvm.compiler.api.directives.GraalDirectives#ensureVirtualized(Object)->void:::Ensures that the given object will be virtual (escape analyzed) at all points that are dominated by the current position.
org.graalvm.compiler.api.directives.GraalDirectives#ensureVirtualizedHere(Object)->void:::Ensures that the given object will be virtual at the current position.

org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScan#createMoveResolver()->MoveResolver::: linear scan create move resolver
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScan#createLifetimeAnalysisPhase()->LinearScanLifetimeAnalysisPhase::: linear scan create lifetime analysis phase
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScan#createResolveDataFlowPhase()->LinearScanResolveDataFlowPhase::: linear scan create resolve data flow phase
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScan#createSpillMoveEliminationPhase()->LinearScanEliminateSpillMovePhase::: linear scan create spill move elimination phase
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScan#beforeSpillMoveElimination()->void::: linear scan before spill move elimination
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScanEliminateSpillMovePhase#firstInstructionOfInterest()->int::: linear scan eliminate spill move phase first instruction of interest
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScanEliminateSpillMovePhase#canEliminateSpillMove(AbstractBlockBase, MoveOp)->boolean::: linear scan eliminate spill move phase can eliminate spill move
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScanLifetimeAnalysisPhase#addRegisterHint(LIRInstruction, Value, OperandMode, EnumSet, boolean)->void::: linear scan lifetime analysis phase add register hint
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScanLifetimeAnalysisPhase#setHint(DebugContext, LIRInstruction, Interval, Interval)->void::: linear scan lifetime analysis phase set hint
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScanLifetimeAnalysisPhase#registerPriorityOfOutputOperand(LIRInstruction)->RegisterPriority::: linear scan lifetime analysis phase register priority of output operand
org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScanResolveDataFlowPhase#resolveCollectMappings(AbstractBlockBase, AbstractBlockBase, AbstractBlockBase, MoveResolver)->void::: linear scan resolve data flow phase resolve collect mappings
org.graalvm.compiler.lir.alloc.lsra.ssa.SSAMoveResolver#checkEmpty()->boolean::: move resolver check empty
org.graalvm.compiler.lir.alloc.lsra.ssa.SSAMoveResolver#checkMultipleReads()->void::: move resolver check multiple reads
org.graalvm.compiler.lir.alloc.lsra.ssa.SSAMoveResolver#verifyStackSlotMapping()->void::: move resolver verify stack slot mapping
org.graalvm.compiler.lir.alloc.lsra.ssa.SSAMoveResolver#areMultipleReadsAllowed()->boolean::: move resolver are multiple reads allowed
org.graalvm.compiler.lir.alloc.lsra.ssa.SSAMoveResolver#mightBeBlocked(Value)->boolean::: move resolver might be blocked
org.graalvm.compiler.lir.alloc.lsra.ssa.SSAMoveResolver#setValueBlocked(Value, int)->void::: move resolver set value blocked
org.graalvm.compiler.lir.alloc.lsra.ssa.SSAMoveResolver#valueBlocked(Value)->int::: move resolver value blocked
org.graalvm.compiler.lir.alloc.lsra.ssa.SSAMoveResolver#createMove(AllocatableValue, AllocatableValue, AllocatableValue, AllocatableValue)->LIRInstruction::: move resolver create move
org.graalvm.compiler.lir.alloc.lsra.ssa.SSAMoveResolver#breakCycle(int)->void::: move resolver break cycle

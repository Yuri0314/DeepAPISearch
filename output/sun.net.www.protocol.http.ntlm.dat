NTLMAuthentication#init0()::: authentication init0:::new->java.security.PrivilegedAction<String>->doPrivileged->x->hostname->indexOf->if->hostname->substring
NTLMAuthentication#init(PasswordAuthentication)::: authentication init:::if->s->pw->getUserName->i->s->indexOf->if->else->s->substring->toUpperCase->s->substring->pw->getPassword->new->String->else->init0
NTLMAuthentication#useAuthCache()::: authentication use auth cache:::return->super->useAuthCache
NTLMAuthentication#supportsPreemptiveAuthorization()::: authentication supports preemptive authorization:::return
NTLMAuthentication#supportsTransparentAuth()::: authentication supports transparent auth:::return
NTLMAuthentication#isTrustedSite(URL):::Returns true if the given site is trusted, i.e:::if->return->NTLMAuthCallback->isTrustedSite->switch->return->url->toString->isTrustedSite->return->return
NTLMAuthentication#isTrustedSiteAvailable()::: authentication is trusted site available:::
NTLMAuthentication#isTrustedSite(String)::: authentication is trusted site:::if->return->isTrustedSite0->return
NTLMAuthentication#isTrustedSite0(String)::: authentication is trusted site0:::
NTLMAuthentication#getHeaderValue(URL, String):::Not supported:::throw->new->RuntimeException
NTLMAuthentication#isAuthorizationStale(String):::Check if the header indicates that the current auth:::return
NTLMAuthentication#setHeaders(HttpURLConnection, HeaderParser, String):::Set header(s) on the given connection.:::try->seq->conn->authObj->if->new->NTLMAuthSequence->conn->authObj->response->seq->raw->length->raw->substring->getAuthHeader->conn->getHeaderName->setAuthenticationProperty->if->seq->isComplete->conn->authObj->return->catch->conn->authObj->return->finally
NTLMAuthenticationCallback#setNTLMAuthenticationCallback(NTLMAuthenticationCallback)::: authentication callback set authentication callback:::
NTLMAuthenticationCallback#getNTLMAuthenticationCallback()::: authentication callback get authentication callback:::return
NTLMAuthenticationCallback#isTrustedSite(URL):::Returns true if the given site is trusted, i.e:::
NTLMAuthSequence#getAuthHeader(String)::: auth sequence get auth header:::input->if->Base64->getDecoder->decode->b->getNextToken->if->throw->new->IOException->return->Base64->getEncoder->encodeToString
NTLMAuthSequence#isComplete()::: auth sequence is complete:::return
NTLMAuthSequence#initFirst(Class)::: auth sequence init first:::
NTLMAuthSequence#getCredentialsHandle(String, String, String)::: auth sequence get credentials handle:::
NTLMAuthSequence#getNextToken(long, byte[], Status)::: auth sequence get next token:::

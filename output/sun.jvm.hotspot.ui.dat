AnnotatedMemoryPanel#addAnnotation(Annotation):::Add an annotation covering the address range [annotation.lowAddress,       annotation.highAddress); that is, it includes the low address and does not       include the high address.:::annotations->annotation->getInterval->insert
AnnotatedMemoryPanel#makeVisible(Address):::Makes the given address visible somewhere in the window:::bi->addressToBigInt->scrollBar->setValueHP
Annotation#draw(Graphics):::Draw the annotation at its current (x, y) position with its       current color:::g->setColor->tmpY->for->i->strings->size
Annotation#setColor(Color):::Sets the base color of this annotation:::
Annotation#getColor():::Returns the base color of this annotation.:::return
Annotation#computeWidthAndHeight(Graphics):::Computes width and height for this Annotation:::heights->clear->for->iter->strings->iterator->iter->hasNext
Annotation#setXAndY(int, int):::Set the x and y position of this annotation:::
EditableAtEndDocument#clear():::Used to reset the contents of this document:::try->super->getLength->remove->setMark->catch->finally
Editor#getSourceFileName():::Get name of source file being displayed:::
Editor#getCurrentLineNumber():::Get (one-based) line number on which cursor is currently placed:::
Editor#showLineNumber(int):::Make a particular line number visible on the screen:::
Editor#highlightLineNumber(int):::Highlight a particular line number:::
Editor#showBreakpointAtLine(int):::Show a breakpoint indicator on the current (one-based) line.:::
Editor#hasBreakpointAtLine(int):::Indicates whether a breakpoint indicator is visible on the       current (one-based) line.:::
Editor#clearBreakpointAtLine(int):::Clear a breakpoint indicator on the current (one-based) line.:::
Editor#clearBreakpoints():::Clear all breakpoint indicators.:::
Editor#setUserData(Object):::Set optional object of user data:::
Editor#getUserData():::Get optional object of user data:::
Editor#toFront():::Bring the given Editor to the front of all other Editors:::
EditorCommands#windowClosed(Editor):::Notifies the debugger that the editing window has been closed.:::
EditorCommands#toggleBreakpointAtLine(Editor, int):::Toggles a breakpoint at the given (one-based) line:::
EditorFactory#openFile(String, EditorCommands):::Opens the given file in a new window:::
EditorFactory#getCurrentEditor():::Retrieves the current topmost file of all of the Editors this       EditorFactory has opened:::
FrameWrapper#getComponent():::The JInternalFrame or JFrame this wraps:::
FrameWrapper#setClosable(boolean):::Largely for use with JInternalFrames but also affects, for       example, the default close operation for JFrames:::
FrameWrapper#setClosingActionListener(ActionListener):::Set an ActionListener to be invoked when the underlying window       is closing ("windowClosing" event of a WindowListener):::
FrameWrapper#setActivatedActionListener(ActionListener):::Set an ActionListener to be invoked when the underlying window       is activated ("windowActivated" event of a       WindowListener):::
FrameWrapper#toFront():::Move this frame to the front:::
GraphicsUtilities#lookupFont(String):::Returns a plain-styled 12-point version of the given font, or       null if the font could not be found:::allFonts->GraphicsEnvironment->getLocalGraphicsEnvironment->getAllFonts->font->for->i->if->return->return->font->deriveFont
GraphicsUtilities#getStringBounds(String, Graphics):::Compute the width and height of given string given the current       font context in the Graphics object:::fm->g->getFontMetrics->return->fm->s->length->getStringBounds
GraphicsUtilities#getStringWidth(String, FontMetrics):::Compute just the width of the given string with the given       FontMetrics:::return->fm->stringWidth
MemoryPanel#makeVisible(Address):::Makes the given address visible somewhere in the window:::bi->addressToBigInt->scrollBar->setValueHP
ProcessListPanel#start():::Start auto updating of the panel:::getTimer->start
ProcessListPanel#stop():::Stop auto updating of the panel:::getTimer->stop
ProcessListPanel#update():::Call this to update the panel's notion of the process list:::if->dbg->hasProcessList->throw->new->RuntimeException->newEls->dbg->getProcessList->sort->if->i->table->getSelectedRow->pid->getPid->findPid->dataModel->fireTableDataChanged->if->els->size->if->table->setRowSelectionInterval->else->table->setRowSelectionInterval->else
ProcessListPanel#getSelectedProcess():::Call this to get the selected ProcessInfo, or null if none selected:::i->table->getSelectedRow->if->return->return->els->get
SourceCodePanel#getCurrentLineNumber():::Line number is one-based:::try->return->source->source->getCaretPosition->getLineOfOffset->catch->return->finally
SourceCodePanel#showLineNumber(int):::Line number is one-based:::try->offset->source->getLineStartOffset->rect->source->modelToView->if->return->source->scrollRectToVisible->catch->e->printStackTrace->finally
SourceCodePanel#highlightLineNumber(int):::Line number is one-based:::

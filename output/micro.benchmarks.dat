ArrayAllocationBenchmark#arrayAllocate(ThreadState)::: array allocation benchmark array allocate:::new->byteArr
ArrayDuplicationBenchmark#setup()::: array duplication benchmark setup:::new->ObjectArrs->new->ObjectArrs->for->i
ArrayDuplicationBenchmark#iterationSetup()::: array duplication benchmark iteration setup:::new->ObjectArr
ArrayDuplicationBenchmark#iterationTearDown()::: array duplication benchmark iteration tear down:::
ArrayDuplicationBenchmark#normalArraycopy()::: array duplication benchmark normal arraycopy:::j->for->i->return
ArrayDuplicationBenchmark#normalArraycopy(Object[])::: array duplication benchmark normal arraycopy:::result->new->ObjectArr->System->arraycopy->return
ArrayDuplicationBenchmark#arraysCopyOf()::: array duplication benchmark arrays copy of:::j->for->i->return
ArrayDuplicationBenchmark#arraysCopyOf(Object[])::: array duplication benchmark arrays copy of:::return->Arrays->copyOf
ArrayDuplicationBenchmark#arraysCopyOfToString()::: array duplication benchmark arrays copy of to string:::j->for->i->return
ArrayDuplicationBenchmark#arraysCopyOfToString(Object[])::: array duplication benchmark arrays copy of to string:::return->Arrays->copyOf
ArrayDuplicationBenchmark#cloneObjectArray()::: array duplication benchmark clone object array:::j->for->i->return
ArrayDuplicationBenchmark#arraysClone(Object[])::: array duplication benchmark arrays clone:::return->cache->clone
ArrayListBenchmark#addBoxedAndClear(ThreadState)::: array list benchmark add boxed and clear:::for->i->clear
ArrayListBenchmark#addNullAndClear(ThreadState)::: array list benchmark add null and clear:::for->i->clear
ArrayListBenchmark.ClearedThreadState#beforeInvocation()::: cleared thread state before invocation:::list->clear
ArrayListBenchmark#addNull(ClearedThreadState)::: array list benchmark add null:::for->i
BigIntegerBenchmark.ThreadState#randomBigInteger(int)::: thread state random big integer:::data->new->BigIntegerArr->r->new->Random->for->i->return
BigIntegerBenchmark#bigIntMul(ThreadState)::: big integer benchmark big int mul:::data->for->i
BigIntegerBenchmark#bigIntMulAdd(ThreadState)::: big integer benchmark big int mul add:::data->for->i
BigIntegerBenchmark#bigIntMontgomeryMul(ThreadState)::: big integer benchmark big int montgomery mul:::data->exp->BigInteger->valueOf->for->i
BigIntegerBenchmark#bigIntMontgomerySqr(ThreadState)::: big integer benchmark big int montgomery sqr:::data->exp->BigInteger->valueOf->for->i
BoxingBenchmark#addBoxed(ThreadState)::: boxing benchmark add boxed:::return->Integer->valueOf
BoxingBenchmark#doNothing(ThreadState)::: boxing benchmark do nothing:::return
ConcurrentSkipListBenchmark#addBoxed(ThreadState)::: concurrent skip list benchmark add boxed:::for->i
GuardedIntrinsicBenchmark.HashcodeState#getNextHashCode()::: hashcode state get next hash code:::return->val1->hashCode
GuardedIntrinsicBenchmark.HashcodeState#swap()::: hashcode state swap:::tmp
GuardedIntrinsicBenchmark.OverrideHashcode#beforeInvocation()::: override hashcode before invocation:::swap
GuardedIntrinsicBenchmark#overrideHashCode(OverrideHashcode)::: guarded intrinsic benchmark override hash code:::return->state->getNextHashCode
GuardedIntrinsicBenchmark.InheritHashcode#beforeInvocation()::: inherit hashcode before invocation:::swap
GuardedIntrinsicBenchmark#inheritHashCode(InheritHashcode)::: guarded intrinsic benchmark inherit hash code:::return->state->getNextHashCode
GuardedIntrinsicBenchmark.MixedHashcode#beforeInvocation()::: mixed hashcode before invocation:::swap
GuardedIntrinsicBenchmark#mixedHashCode(MixedHashcode)::: guarded intrinsic benchmark mixed hash code:::return->state->getNextHashCode
HashBenchmark#hash(ThreadState)::: hash benchmark hash:::value->array->for->i->return
MathFunctionBenchmark.ThreadState#randomDoubles(int)::: thread state random doubles:::data->new->doubleArr->r->new->Random->for->i->return
MathFunctionBenchmark#mathLog(ThreadState)::: math function benchmark math log:::data->for->i
MathFunctionBenchmark#mathLog10(ThreadState)::: math function benchmark math log10:::data->for->i
MathFunctionBenchmark#mathSin(ThreadState)::: math function benchmark math sin:::data->for->i
MathFunctionBenchmark#mathCos(ThreadState)::: math function benchmark math cos:::data->for->i
MathFunctionBenchmark#mathTan(ThreadState)::: math function benchmark math tan:::data->for->i
MathFunctionBenchmark#mathSqrt(ThreadState, Blackhole)::: math function benchmark math sqrt:::blackhole->Math->sqrt->consume
MathFunctionBenchmark#strictMathSqrt(ThreadState, Blackhole)::: math function benchmark strict math sqrt:::blackhole->StrictMath->sqrt->consume
SimpleSyncBenchmark.Person#getAge()::: person get age:::return
SimpleSyncBenchmark.Person#setAge(int)::: person set age:::
SimpleSyncBenchmark.Person#setAgeIfNonZero(int)::: person set age if non zero:::if
SimpleSyncBenchmark#setAgeCond(ThreadState)::: simple sync benchmark set age cond:::person->person->setAgeIfNonZero
SimpleSyncBenchmark#getAge(ThreadState)::: simple sync benchmark get age:::person->return->person->getAge
SimpleSyncBenchmark#getAndIncAge(ThreadState)::: simple sync benchmark get and inc age:::person->oldAge->person->getAge->person->setAge->return
StringBenchmark#indexOfChar(BenchState)::: string benchmark index of char:::return->indexOf
StringBenchmark#indexOfSingleCharString(BenchState)::: string benchmark index of single char string:::return->indexOf
StringBenchmark#indexOfSingleCharStringLong(BenchState)::: string benchmark index of single char string long:::return->indexOf
StringBenchmark#indexOfCharNotFound(BenchState)::: string benchmark index of char not found:::return->indexOf
StringBenchmark#indexOfString(BenchState)::: string benchmark index of string:::return->indexOf
StringBenchmark#indexOfStringNotFound(BenchState)::: string benchmark index of string not found:::return->indexOf
StringBenchmark#compareTo(BenchState)::: string benchmark compare to:::return->compareTo
StringBenchmark#compressSmallString(BenchState)::: string benchmark compress small string:::return->new->String
StringBenchmark#compressLargeString(BenchState)::: string benchmark compress large string:::return->new->String
StringBenchmark#inflateSmallString(BenchState)::: string benchmark inflate small string:::return->toCharArray
StringBenchmark#inflateLargeString(BenchState)::: string benchmark inflate large string:::return->toCharArray
TestJMHBlackbox#testJMH()::: test blackbox test h:::

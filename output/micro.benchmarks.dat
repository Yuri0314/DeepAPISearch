micro.benchmarks.ArrayAllocationBenchmark#arrayAllocate(ThreadState)->void::: array allocation benchmark array allocate
micro.benchmarks.ArrayDuplicationBenchmark#setup()->void::: array duplication benchmark setup
micro.benchmarks.ArrayDuplicationBenchmark#iterationSetup()->void::: array duplication benchmark iteration setup
micro.benchmarks.ArrayDuplicationBenchmark#iterationTearDown()->void::: array duplication benchmark iteration tear down
micro.benchmarks.ArrayDuplicationBenchmark#normalArraycopy()->Object[]::: array duplication benchmark normal arraycopy
micro.benchmarks.ArrayDuplicationBenchmark#normalArraycopy(Object[])->Object[]::: array duplication benchmark normal arraycopy
micro.benchmarks.ArrayDuplicationBenchmark#arraysCopyOf()->Object[]::: array duplication benchmark arrays copy of
micro.benchmarks.ArrayDuplicationBenchmark#arraysCopyOf(Object[])->Object[]::: array duplication benchmark arrays copy of
micro.benchmarks.ArrayDuplicationBenchmark#arraysCopyOfToString()->Object[]::: array duplication benchmark arrays copy of to string
micro.benchmarks.ArrayDuplicationBenchmark#arraysCopyOfToString(Object[])->Object[]::: array duplication benchmark arrays copy of to string
micro.benchmarks.ArrayDuplicationBenchmark#cloneObjectArray()->Object[]::: array duplication benchmark clone object array
micro.benchmarks.ArrayDuplicationBenchmark#arraysClone(Object[])->Object[]::: array duplication benchmark arrays clone
micro.benchmarks.ArrayListBenchmark#addBoxedAndClear(ThreadState)->void::: array list benchmark add boxed and clear
micro.benchmarks.ArrayListBenchmark#addNullAndClear(ThreadState)->void::: array list benchmark add null and clear
micro.benchmarks.ArrayListBenchmark.ClearedThreadState#beforeInvocation()->void::: cleared thread state before invocation
micro.benchmarks.ArrayListBenchmark#addNull(ClearedThreadState)->void::: array list benchmark add null
micro.benchmarks.BigIntegerBenchmark.ThreadState#randomBigInteger(int)->BigInteger[]::: thread state random big integer
micro.benchmarks.BigIntegerBenchmark#bigIntMul(ThreadState)->void::: big integer benchmark big int mul
micro.benchmarks.BigIntegerBenchmark#bigIntMulAdd(ThreadState)->void::: big integer benchmark big int mul add
micro.benchmarks.BigIntegerBenchmark#bigIntMontgomeryMul(ThreadState)->void::: big integer benchmark big int montgomery mul
micro.benchmarks.BigIntegerBenchmark#bigIntMontgomerySqr(ThreadState)->void::: big integer benchmark big int montgomery sqr
micro.benchmarks.BoxingBenchmark#addBoxed(ThreadState)->Integer::: boxing benchmark add boxed
micro.benchmarks.BoxingBenchmark#doNothing(ThreadState)->int::: boxing benchmark do nothing
micro.benchmarks.ConcurrentSkipListBenchmark#addBoxed(ThreadState)->void::: concurrent skip list benchmark add boxed
micro.benchmarks.GuardedIntrinsicBenchmark.HashcodeState#getNextHashCode()->int::: hashcode state get next hash code
micro.benchmarks.GuardedIntrinsicBenchmark.HashcodeState#swap()->void::: hashcode state swap
micro.benchmarks.GuardedIntrinsicBenchmark.OverrideHashcode#beforeInvocation()->void::: override hashcode before invocation
micro.benchmarks.GuardedIntrinsicBenchmark#overrideHashCode(OverrideHashcode)->int::: guarded intrinsic benchmark override hash code
micro.benchmarks.GuardedIntrinsicBenchmark.InheritHashcode#beforeInvocation()->void::: inherit hashcode before invocation
micro.benchmarks.GuardedIntrinsicBenchmark#inheritHashCode(InheritHashcode)->int::: guarded intrinsic benchmark inherit hash code
micro.benchmarks.GuardedIntrinsicBenchmark.MixedHashcode#beforeInvocation()->void::: mixed hashcode before invocation
micro.benchmarks.GuardedIntrinsicBenchmark#mixedHashCode(MixedHashcode)->int::: guarded intrinsic benchmark mixed hash code
micro.benchmarks.HashBenchmark#hash(ThreadState)->int::: hash benchmark hash
micro.benchmarks.MathFunctionBenchmark.ThreadState#randomDoubles(int)->double[]::: thread state random doubles
micro.benchmarks.MathFunctionBenchmark#mathLog(ThreadState)->void::: math function benchmark math log
micro.benchmarks.MathFunctionBenchmark#mathLog10(ThreadState)->void::: math function benchmark math log10
micro.benchmarks.MathFunctionBenchmark#mathSin(ThreadState)->void::: math function benchmark math sin
micro.benchmarks.MathFunctionBenchmark#mathCos(ThreadState)->void::: math function benchmark math cos
micro.benchmarks.MathFunctionBenchmark#mathTan(ThreadState)->void::: math function benchmark math tan
micro.benchmarks.MathFunctionBenchmark#mathSqrt(ThreadState, Blackhole)->void::: math function benchmark math sqrt
micro.benchmarks.MathFunctionBenchmark#strictMathSqrt(ThreadState, Blackhole)->void::: math function benchmark strict math sqrt
micro.benchmarks.SimpleSyncBenchmark.Person#getAge()->int::: person get age
micro.benchmarks.SimpleSyncBenchmark.Person#setAge(int)->void::: person set age
micro.benchmarks.SimpleSyncBenchmark.Person#setAgeIfNonZero(int)->void::: person set age if non zero
micro.benchmarks.SimpleSyncBenchmark#setAgeCond(ThreadState)->void::: simple sync benchmark set age cond
micro.benchmarks.SimpleSyncBenchmark#getAge(ThreadState)->int::: simple sync benchmark get age
micro.benchmarks.SimpleSyncBenchmark#getAndIncAge(ThreadState)->int::: simple sync benchmark get and inc age
micro.benchmarks.StringBenchmark#indexOfChar(BenchState)->int::: string benchmark index of char
micro.benchmarks.StringBenchmark#indexOfSingleCharString(BenchState)->int::: string benchmark index of single char string
micro.benchmarks.StringBenchmark#indexOfSingleCharStringLong(BenchState)->int::: string benchmark index of single char string long
micro.benchmarks.StringBenchmark#indexOfCharNotFound(BenchState)->int::: string benchmark index of char not found
micro.benchmarks.StringBenchmark#indexOfString(BenchState)->int::: string benchmark index of string
micro.benchmarks.StringBenchmark#indexOfStringNotFound(BenchState)->int::: string benchmark index of string not found
micro.benchmarks.StringBenchmark#compareTo(BenchState)->int::: string benchmark compare to
micro.benchmarks.StringBenchmark#compressSmallString(BenchState)->String::: string benchmark compress small string
micro.benchmarks.StringBenchmark#compressLargeString(BenchState)->String::: string benchmark compress large string
micro.benchmarks.StringBenchmark#inflateSmallString(BenchState)->char[]::: string benchmark inflate small string
micro.benchmarks.StringBenchmark#inflateLargeString(BenchState)->char[]::: string benchmark inflate large string
micro.benchmarks.TestJMHBlackbox#testJMH()->void::: test blackbox test h

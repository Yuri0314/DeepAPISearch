AggregateCompleter#getCompleters():::Retrieve the collection of completers currently being aggregated.:::return
AggregateCompleter#complete(String, int, List):::Perform a completion operation across all aggregated completers.:::checkNotNull->completions->completers->size->new->ArrayList<Completion>->max->foreach->completion->new->Completion->completion->complete->Math->max->completions->add->foreach->if->candidates->addAll->return
ArgumentCompleter#setStrict(boolean):::If true, a completion at argument index N will only succeed if all the completions from 0-(N-1) also succeed.:::
ArgumentCompleter#isStrict():::Returns whether a completion at argument index N will success if all the completions from arguments 0-(N-1) also succeed.:::return
ArgumentCompleter.ArgumentDelimiter#delimit(CharSequence, int):::Break the specified buffer into individual tokens that can be completed on their own.:::
ArgumentCompleter.ArgumentDelimiter#isDelimiter(CharSequence, int):::Returns true if the specified character is a whitespace parameter.:::
ArgumentCompleter.AbstractArgumentDelimiter#isDelimiter(CharSequence, int):::Returns true if the specified character is a whitespace parameter:::return->isQuoted->isEscaped->isDelimiterChar
ArgumentCompleter.AbstractArgumentDelimiter#isEscapeChar(CharSequence, int):::Check if this character is a valid escape char (i.e:::if->return->for->i->return
ArgumentCompleter.AbstractArgumentDelimiter#isEscaped(CharSequence, int):::Check if a character is escaped (i.e:::if->return->return->isEscapeChar
ArgumentCompleter.AbstractArgumentDelimiter#isDelimiterChar(CharSequence, int):::Returns true if the character at the specified position if a delimiter:::
ArgumentCompleter.WhitespaceArgumentDelimiter#isDelimiterChar(CharSequence, int):::The character is a delimiter if it is whitespace, and the preceding character is not an escape character.:::return->Character->buffer->charAt->isWhitespace
CandidateListCompletionHandler#printCandidates(ConsoleReader, Collection):::Print out the candidates:::distinct->new->HashSet<CharSequence>->if->distinct->size->reader->getAutoprintThreshold->reader->println->reader->distinct->size->format->print->reader->flush->c->noOpt->format->yesOpt->format->allowed->yesOpt->charAt->noOpt->charAt->while->reader->readCharacter->tmp->new->charArr->new->String->if->noOpt->startsWith->reader->println->return->else->if->yesOpt->startsWith->break->else->reader->beep->if->distinct->size->candidates->size->copy->new->ArrayList<CharSequence>->foreach->if->copy->contains->copy->add->reader->println->reader->printColumns
Completer#complete(String, int, List):::Populates candidates with a list of possible completions for the buffer:::

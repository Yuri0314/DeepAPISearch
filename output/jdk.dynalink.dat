jdk.dynalink.CallSiteDescriptor#getOperation()->Operation:::Returns the operation at the call site.
jdk.dynalink.CallSiteDescriptor#getMethodType()->MethodType:::The type of the method at the call site.
jdk.dynalink.CallSiteDescriptor#changeMethodType(MethodType)->CallSiteDescriptor:::Finds or creates a call site descriptor that only differs in its method type from this descriptor
jdk.dynalink.CallSiteDescriptor#changeMethodTypeInternal(MethodType)->CallSiteDescriptor:::Finds or creates a call site descriptor that only differs in its method type from this descriptor
jdk.dynalink.CallSiteDescriptor#changeOperation(Operation)->CallSiteDescriptor:::Finds or creates a call site descriptor that only differs in its operation from this descriptor
jdk.dynalink.CallSiteDescriptor#changeOperationInternal(Operation)->CallSiteDescriptor:::Finds or creates a call site descriptor that only differs in its operation from this descriptor
jdk.dynalink.CallSiteDescriptor#equals(Object)->boolean:::Returns true if this call site descriptor is equal to the passed object
jdk.dynalink.CallSiteDescriptor#hashCode()->int:::Returns a value-based hash code of this call site descriptor computed from its operation, method type, and lookup object's lookup class and lookup modes.
jdk.dynalink.CallSiteDescriptor#toString()->String:::Returns the string representation of this call site descriptor, of the format name(parameterTypes)returnType@lookup.
jdk.dynalink.ClassMap#computeValue(Class)->T:::Compute the value associated with the given class
jdk.dynalink.ClassMap#get(Class)->T:::Returns the value associated with the class
jdk.dynalink.DynamicLinker#link(T)->T:::Links an invokedynamic call site
jdk.dynalink.DynamicLinker#getLinkerServices()->LinkerServices:::Returns the object representing the linker services of this class that are normally exposed to individual GuardingDynamicLinker language-specific linkers
jdk.dynalink.DynamicLinker#getLinkedCallSiteLocation()->StackTraceElement:::Returns a stack trace element describing the location of the invokedynamic call site currently being linked on the current thread
jdk.dynalink.DynamicLinkerFactory#setClassLoader(ClassLoader)->void:::Sets the class loader for automatic discovery of available guarding dynamic linkers
jdk.dynalink.DynamicLinkerFactory#setPrioritizedLinkers(List)->void:::Sets the prioritized guarding dynamic linkers
jdk.dynalink.DynamicLinkerFactory#setPrioritizedLinkers(GuardingDynamicLinker...)->void:::Sets the prioritized guarding dynamic linkers
jdk.dynalink.DynamicLinkerFactory#setPrioritizedLinker(GuardingDynamicLinker)->void:::Sets a single prioritized linker
jdk.dynalink.DynamicLinkerFactory#setFallbackLinkers(List)->void:::Sets the fallback guarding dynamic linkers
jdk.dynalink.DynamicLinkerFactory#setFallbackLinkers(GuardingDynamicLinker...)->void:::Sets the fallback guarding dynamic linkers
jdk.dynalink.DynamicLinkerFactory#setSyncOnRelink(boolean)->void:::Sets whether the dynamic linker created by this factory will invoke MutableCallSite#syncAll(MutableCallSite[]) after a call site is relinked
jdk.dynalink.DynamicLinkerFactory#setUnstableRelinkThreshold(int)->void:::Sets the unstable relink threshold; the number of times a call site is relinked after which it will be considered unstable, and subsequent link requests for it will indicate this
jdk.dynalink.DynamicLinkerFactory#setPrelinkTransformer(GuardedInvocationTransformer)->void:::Set the pre-link transformer
jdk.dynalink.DynamicLinkerFactory#setAutoConversionStrategy(MethodTypeConversionStrategy)->void:::Sets an object representing the conversion strategy for automatic type conversions
jdk.dynalink.DynamicLinkerFactory#setInternalObjectsFilter(MethodHandleTransformer)->void:::Sets a method handle transformer that is supposed to act as the implementation of LinkerServices#filterInternalObjects(MethodHandle) for linker services of dynamic linkers created by this factory
jdk.dynalink.DynamicLinkerFactory#createLinker()->DynamicLinker:::Creates a new dynamic linker based on the current configuration
jdk.dynalink.DynamicLinkerFactory#getAutoLoadingErrors()->List:::Returns a list of ServiceConfigurationErrors that were encountered while loading automatically discovered linkers during the last invocation of #createLinker()
jdk.dynalink.LinkerServicesImpl#canConvert(Class, Class)->boolean::: linker services impl can convert
jdk.dynalink.LinkerServicesImpl#asType(MethodHandle, MethodType)->MethodHandle::: linker services impl as type
jdk.dynalink.LinkerServicesImpl#getTypeConverter(Class, Class)->MethodHandle::: linker services impl get type converter
jdk.dynalink.LinkerServicesImpl#compareConversion(Class, Class, Class)->Comparison::: linker services impl compare conversion
jdk.dynalink.LinkerServicesImpl#getGuardedInvocation(LinkRequest)->GuardedInvocation::: linker services impl get guarded invocation
jdk.dynalink.LinkerServicesImpl#filterInternalObjects(MethodHandle)->MethodHandle::: linker services impl filter internal objects
jdk.dynalink.LinkerServicesImpl#getWithLookup(Supplier, SecureLookupSupplier)->T::: linker services impl get with lookup
jdk.dynalink.LinkerServicesImpl#getCurrentLookup()->Lookup::: linker services impl get current lookup
jdk.dynalink.NamedOperation#getBaseOperation()->Operation:::Returns the base operation of this named operation.
jdk.dynalink.NamedOperation#getName()->Object:::Returns the name of this named operation.
jdk.dynalink.NamedOperation#changeName(String)->NamedOperation:::Finds or creates a named operation that differs from this one only in the name.
jdk.dynalink.NamedOperation#equals(Object)->boolean:::Compares this named operation to another object
jdk.dynalink.NamedOperation#hashCode()->int:::Returns the hash code of this named operation
jdk.dynalink.NamedOperation#toString()->String:::Returns the string representation of this named operation
jdk.dynalink.NamedOperation#getBaseOperation(Operation)->Operation:::If the passed operation is a named operation, returns its #getBaseOperation(), otherwise returns the operation as is.
jdk.dynalink.NamedOperation#getName(Operation)->Object:::If the passed operation is a named operation, returns its #getName(), otherwise returns null
jdk.dynalink.NamespaceOperation#getBaseOperation()->Operation:::Returns the base operation of this named operation.
jdk.dynalink.NamespaceOperation#getNamespaces()->Namespace[]:::Returns the namespaces in this namespace operation
jdk.dynalink.NamespaceOperation#getNamespaceCount()->int:::Returns the number of namespaces in this namespace operation.
jdk.dynalink.NamespaceOperation#getNamespace(int)->Namespace:::Returns the i-th namespace in this namespace operation.
jdk.dynalink.NamespaceOperation#contains(Namespace)->boolean:::Returns true if this namespace operation contains a namespace equal to the specified namespace.
jdk.dynalink.NamespaceOperation#equals(Object)->boolean:::Returns true if the other object is also a namespace operation and their base operation and namespaces are equal.
jdk.dynalink.NamespaceOperation#hashCode()->int:::Returns the hash code of this namespace operation
jdk.dynalink.NamespaceOperation#toString()->String:::Returns the string representation of this namespace operation
jdk.dynalink.NamespaceOperation#getBaseOperation(Operation)->Operation:::If the passed operation is a namespace operation, returns its #getBaseOperation(), otherwise returns the operation as is.
jdk.dynalink.NamespaceOperation#getNamespaces(Operation)->Namespace[]:::If the passed operation is a namespace operation, returns its #getNamespaces(), otherwise returns an empty array.
jdk.dynalink.NamespaceOperation#contains(Operation, Operation, Namespace)->boolean:::Returns true if the specified operation is a NamespaceOperation and its base operation is equal to the specified operation, and it contains the specified namespace
jdk.dynalink.Operation#withNamespace(Namespace)->NamespaceOperation:::Returns a NamespaceOperation using this operation as its base.
jdk.dynalink.Operation#withNamespaces(Namespace...)->NamespaceOperation:::Returns a NamespaceOperation using this operation as its base.
jdk.dynalink.Operation#named(Object)->NamedOperation:::Returns a NamedOperation using this operation as its base.
jdk.dynalink.RelinkableCallSite#initialize(MethodHandle)->void:::Invoked by dynamic linker to initialize the relinkable call site by setting a relink-and-invoke method handle
jdk.dynalink.RelinkableCallSite#getDescriptor()->CallSiteDescriptor:::Returns the descriptor for this call site.
jdk.dynalink.RelinkableCallSite#relink(GuardedInvocation, MethodHandle)->void:::This method will be called by the dynamic linker every time the call site is relinked (but see #resetAndRelink(GuardedInvocation, MethodHandle) for an exception)
jdk.dynalink.RelinkableCallSite#resetAndRelink(GuardedInvocation, MethodHandle)->void:::This method will be called by the dynamic linker every time the call site is relinked and the linker wishes the call site to throw away any prior linkage state (that is how it differs from #relink(GuardedInvocation, MethodHandle))
jdk.dynalink.SecureLookupSupplier#getLookup()->Lookup:::Returns the lookup secured by this SecureLookupSupplier.
jdk.dynalink.SecureLookupSupplier#getLookupPrivileged()->Lookup:::Returns the value of #getLookup() without a security check
jdk.dynalink.TypeConverterFactory#asType(MethodHandle, MethodType)->MethodHandle:::Similar to MethodHandle#asType(MethodType) except it also hooks in method handles produced by GuardingTypeConverterFactory implementations, providing for language-specific type coercing of parameters
jdk.dynalink.TypeConverterFactory#canConvert(Class, Class)->boolean:::Returns true if there might exist a conversion between the requested types (either an automatic JVM conversion, or one provided by any available GuardingTypeConverterFactory), or false if there definitely does not exist a conversion between the requested types
jdk.dynalink.TypeConverterFactory#compareConversion(Class, Class, Class)->Comparison:::Determines which of the two type conversions from a source type to the two target types is preferred
jdk.dynalink.TypeConverterFactory#canAutoConvert(Class, Class)->boolean::: type converter factory can auto convert
jdk.dynalink.TypeConverterFactory#getCacheableTypeConverterNull(Class, Class)->MethodHandle::: type converter factory get cacheable type converter null
jdk.dynalink.TypeConverterFactory#getTypeConverterNull(Class, Class)->MethodHandle::: type converter factory get type converter null
jdk.dynalink.TypeConverterFactory#getCacheableTypeConverter(Class, Class)->MethodHandle::: type converter factory get cacheable type converter
jdk.dynalink.TypeConverterFactory#getTypeConverter(Class, Class)->MethodHandle:::Given a source and target type, returns a method handle that converts between them
jdk.dynalink.TypeConverterFactory#createConverter(Class, Class)->MethodHandle::: type converter factory create converter

CallSiteDescriptor#getOperation():::Returns the operation at the call site.:::return
CallSiteDescriptor#getMethodType():::The type of the method at the call site.:::return
CallSiteDescriptor#changeMethodType(MethodType):::Finds or creates a call site descriptor that only differs in its method type from this descriptor:::changed->changeMethodTypeInternal->if->getClass->assertChangeInvariants->alwaysAssert->alwaysAssert->return
CallSiteDescriptor#changeMethodTypeInternal(MethodType):::Finds or creates a call site descriptor that only differs in its method type from this descriptor:::return->getLookupPrivileged->new->CallSiteDescriptor
CallSiteDescriptor#changeOperation(Operation):::Finds or creates a call site descriptor that only differs in its operation from this descriptor:::getLookup->changed->changeOperationInternal->if->getClass->assertChangeInvariants->alwaysAssert->alwaysAssert->return
CallSiteDescriptor#changeOperationInternal(Operation):::Finds or creates a call site descriptor that only differs in its operation from this descriptor:::return->getLookupPrivileged->new->CallSiteDescriptor
CallSiteDescriptor#equals(Object):::Returns true if this call site descriptor is equal to the passed object:::if->return->else->if->return->else->if->obj->getClass->getClass->return->other->return->operation->equals->methodType->equals->getLookupPrivileged->other->getLookupPrivileged->lookupsEqual
CallSiteDescriptor#hashCode():::Returns a value-based hash code of this call site descriptor computed from its operation, method type, and lookup object's lookup class and lookup modes.:::return->operation->hashCode->methodType->hashCode->getLookupPrivileged->lookupHashCode
CallSiteDescriptor#toString():::Returns the string representation of this call site descriptor, of the format name(parameterTypes)returnType@lookup.:::mt->methodType->toString->l->getLookupPrivileged->toString->o->operation->toString->b->o->length->mt->length->l->length->new->StringBuilder->return->b->append->append->append->append->toString
ClassMap#computeValue(Class):::Compute the value associated with the given class:::
ClassMap#get(Class):::Returns the value associated with the class:::v->map->get->if->return->ref->synchronized->weakMap->get->if->refv->ref->get->if->return->newV->computeValue->canReferenceDirectly->AccessController->new->PrivilegedAction<Boolean>->doPrivileged->if->oldV->map->putIfAbsent->return->synchronized->weakMap->get->if->oldV->ref->get->if->return->weakMap->new->SoftReference<>->put->return
DynamicLinker#link(T):::Links an invokedynamic call site:::callSite->createRelinkAndInvokeMethod->initialize->return
DynamicLinker#getLinkerServices():::Returns the object representing the linker services of this class that are normally exposed to individual GuardingDynamicLinker language-specific linkers:::return
DynamicLinker#getLinkedCallSiteLocation():::Returns a stack trace element describing the location of the invokedynamic call site currently being linked on the current thread:::return->stackWalker->s->isRelinkFrame->isInitialLinkFrame->dropWhile->skip->f->getClassName->startsWith->dropWhile->findFirst->StackFrame->toStackTraceElement->map->orElse->walk
DynamicLinkerFactory#setClassLoader(ClassLoader):::Sets the class loader for automatic discovery of available guarding dynamic linkers:::
DynamicLinkerFactory#setPrioritizedLinkers(List):::Sets the prioritized guarding dynamic linkers:::copyListRequireNonNullElements
DynamicLinkerFactory#setPrioritizedLinkers(GuardingDynamicLinker...):::Sets the prioritized guarding dynamic linkers:::Arrays->asList->setPrioritizedLinkers
DynamicLinkerFactory#setPrioritizedLinker(GuardingDynamicLinker):::Sets a single prioritized linker:::Collections->Objects->requireNonNull->singletonList
DynamicLinkerFactory#setFallbackLinkers(List):::Sets the fallback guarding dynamic linkers:::copyListRequireNonNullElements
DynamicLinkerFactory#setFallbackLinkers(GuardingDynamicLinker...):::Sets the fallback guarding dynamic linkers:::Arrays->asList->setFallbackLinkers
DynamicLinkerFactory#setSyncOnRelink(boolean):::Sets whether the dynamic linker created by this factory will invoke MutableCallSite#syncAll(MutableCallSite[]) after a call site is relinked:::
DynamicLinkerFactory#setUnstableRelinkThreshold(int):::Sets the unstable relink threshold; the number of times a call site is relinked after which it will be considered unstable, and subsequent link requests for it will indicate this:::if->throw->new->IllegalArgumentException
DynamicLinkerFactory#setPrelinkTransformer(GuardedInvocationTransformer):::Set the pre-link transformer:::
DynamicLinkerFactory#setAutoConversionStrategy(MethodTypeConversionStrategy):::Sets an object representing the conversion strategy for automatic type conversions:::
DynamicLinkerFactory#setInternalObjectsFilter(MethodHandleTransformer):::Sets a method handle transformer that is supposed to act as the implementation of LinkerServices#filterInternalObjects(MethodHandle) for linker services of dynamic linkers created by this factory:::
DynamicLinkerFactory#createLinker():::Creates a new dynamic linker based on the current configuration:::if->Collections->emptyList->if->Collections->new->BeansLinker->singletonList->knownLinkerClasses->new->HashSet<>->addClasses->addClasses->discovered->discoverAutoLoadLinkers->linkers->prioritizedLinkers->size->discovered->size->fallbackLinkers->size->new->ArrayList<>->linkers->addAll->foreach->if->knownLinkerClasses->linker->getClass->contains->linkers->add->linkers->addAll->optimized->CompositeTypeBasedGuardingDynamicLinker->optimize->composite->switch->linkers->size->break->optimized->get->break->new->CompositeGuardingDynamicLinker->break->typeConverters->new->LinkedList<>->foreach->if->typeConverters->add->if->inv->request->getCallSiteDescriptor->getMethodType->asType->return->new->TypeConverterFactory->new->LinkerServicesImpl->new->DynamicLinker
DynamicLinkerFactory#getAutoLoadingErrors():::Returns a list of ServiceConfigurationErrors that were encountered while loading automatically discovered linkers during the last invocation of #createLinker():::return->Collections->unmodifiableList
NamedOperation#getBaseOperation():::Returns the base operation of this named operation.:::return
NamedOperation#getName():::Returns the name of this named operation.:::return
NamedOperation#changeName(String):::Finds or creates a named operation that differs from this one only in the name.:::return->new->NamedOperation
NamedOperation#equals(Object):::Compares this named operation to another object:::if->other->return->baseOperation->equals->name->equals->return
NamedOperation#hashCode():::Returns the hash code of this named operation:::return->baseOperation->hashCode->name->hashCode
NamedOperation#toString():::Returns the string representation of this named operation:::return->baseOperation->toString->name->toString
NamedOperation#getBaseOperation(Operation):::If the passed operation is a named operation, returns its #getBaseOperation(), otherwise returns the operation as is.:::return
NamedOperation#getName(Operation):::If the passed operation is a named operation, returns its #getName(), otherwise returns null:::return
NamespaceOperation#getBaseOperation():::Returns the base operation of this named operation.:::return
NamespaceOperation#getNamespaces():::Returns the namespaces in this namespace operation:::return->namespaces->clone
NamespaceOperation#getNamespaceCount():::Returns the number of namespaces in this namespace operation.:::return
NamespaceOperation#getNamespace(int):::Returns the i-th namespace in this namespace operation.:::try->return->catch->throw->Integer->toString->new->IndexOutOfBoundsException->finally
NamespaceOperation#contains(Namespace):::Returns true if this namespace operation contains a namespace equal to the specified namespace.:::Objects->requireNonNull->foreach->if->component->equals->return->return
NamespaceOperation#equals(Object):::Returns true if the other object is also a namespace operation and their base operation and namespaces are equal.:::if->other->return->baseOperation->equals->Arrays->equals->return
NamespaceOperation#hashCode():::Returns the hash code of this namespace operation:::return->baseOperation->hashCode->Arrays->hashCode
NamespaceOperation#toString():::Returns the string representation of this namespace operation:::b->new->StringBuilder->b->append->append->b->append->for->i->return->b->toString
NamespaceOperation#getBaseOperation(Operation):::If the passed operation is a namespace operation, returns its #getBaseOperation(), otherwise returns the operation as is.:::return->getBaseOperation
NamespaceOperation#getNamespaces(Operation):::If the passed operation is a namespace operation, returns its #getNamespaces(), otherwise returns an empty array.:::return->getNamespaces->new->NamespaceArr
NamespaceOperation#contains(Operation, Operation, Namespace):::Returns true if the specified operation is a NamespaceOperation and its base operation is equal to the specified operation, and it contains the specified namespace:::if->no->return->equals->no->contains->return
Operation#withNamespace(Namespace):::Returns a NamespaceOperation using this operation as its base.:::return->withNamespaces
Operation#withNamespaces(Namespace...):::Returns a NamespaceOperation using this operation as its base.:::return->new->NamespaceOperation
Operation#named(Object):::Returns a NamedOperation using this operation as its base.:::return->new->NamedOperation
RelinkableCallSite#initialize(MethodHandle):::Invoked by dynamic linker to initialize the relinkable call site by setting a relink-and-invoke method handle:::
RelinkableCallSite#getDescriptor():::Returns the descriptor for this call site.:::
RelinkableCallSite#relink(GuardedInvocation, MethodHandle):::This method will be called by the dynamic linker every time the call site is relinked (but see #resetAndRelink(GuardedInvocation, MethodHandle) for an exception):::
RelinkableCallSite#resetAndRelink(GuardedInvocation, MethodHandle):::This method will be called by the dynamic linker every time the call site is relinked and the linker wishes the call site to throw away any prior linkage state (that is how it differs from #relink(GuardedInvocation, MethodHandle)):::
SecureLookupSupplier#getLookup():::Returns the lookup secured by this SecureLookupSupplier.:::sm->System->getSecurityManager->if->MethodHandles->publicLookup->sm->checkPermission->return
SecureLookupSupplier#getLookupPrivileged():::Returns the value of #getLookup() without a security check:::return
TypeConverterFactory#asType(MethodHandle, MethodType):::Similar to MethodHandle#asType(MethodType) except it also hooks in method handles produced by GuardingTypeConverterFactory implementations, providing for language-specific type coercing of parameters:::newHandle->toType->newHandle->type->l->toType->parameterCount->if->fromType->parameterCount->throw->handle->type->new->WrongMethodTypeException->pos->converters->new->LinkedList<>->for->i->applyConverters->fromRetType->fromType->returnType->toRetType->toType->returnType->if->if->canAutoConvert->converter->getTypeConverterNull->if->MethodHandles->filterReturnValue->autoConvertedHandle->autoConversionStrategy->asType->return->autoConvertedHandle->asType
TypeConverterFactory#canConvert(Class, Class):::Returns true if there might exist a conversion between the requested types (either an automatic JVM conversion, or one provided by any available GuardingTypeConverterFactory), or false if there definitely does not exist a conversion between the requested types:::return->canAutoConvert->canConvert->get->get
TypeConverterFactory#compareConversion(Class, Class, Class):::Determines which of the two type conversions from a source type to the two target types is preferred:::foreach->result->comparator->compareConversion->if->return->if->TypeUtilities->isMethodInvocationConvertible->if->TypeUtilities->isMethodInvocationConvertible->return->else->if->TypeUtilities->isMethodInvocationConvertible->return->return
TypeConverterFactory#getTypeConverter(Class, Class):::Given a source and target type, returns a method handle that converts between them:::try->return->converterIdentityMap->get->get->catch->return->finally

javax.xml.namespace.NamespaceContext#getNamespaceURI(String)->String:::Get Namespace URI bound to a prefix in the current scope
javax.xml.namespace.NamespaceContext#getPrefix(String)->String:::Get prefix bound to Namespace URI in the current scope
javax.xml.namespace.NamespaceContext#getPrefixes(String)->Iterator:::Get all prefixes bound to a Namespace URI in the current scope
javax.xml.namespace.QName#getNamespaceURI()->String:::Get the Namespace URI of this QName.
javax.xml.namespace.QName#getLocalPart()->String:::Get the local part of this QName.
javax.xml.namespace.QName#getPrefix()->String:::Get the prefix of this QName.  The prefix assigned to a QName might NOT be valid in a different context
javax.xml.namespace.QName#equals(Object)->boolean:::Test this QName for equality with another Object.  If the Object to be tested is not a QName or is null, then this method returns false.  Two QNames are considered equal if and only if both the Namespace URI and local part are equal
javax.xml.namespace.QName#hashCode()->int:::Generate the hash code for this QName.  The hash code is calculated using both the Namespace URI and the local part of the QName
javax.xml.namespace.QName#toString()->String:::String representation of this QName.  The commonly accepted way of representing a QName as a String was defined by James Clark
javax.xml.namespace.QName#valueOf(String)->QName:::QName derived from parsing the formatted String.  If the String is null or does not conform to #toString() QName.toString() formatting, an IllegalArgumentException is thrown.  The String MUST be in the form returned by #toString() QName.toString().  The commonly accepted way of representing a QName as a String was defined by James Clark

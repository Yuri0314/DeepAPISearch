ConfigurableValidationState#setIdIdrefChecking(boolean):::Turns checking for ID/IDREF errors on and off.:::
ConfigurableValidationState#setUnparsedEntityChecking(boolean):::Turns checking for unparsed entity errors on and off.:::
ConfigurableValidationState#checkIDRefID():::Checks if all IDREFs have a corresponding ID.:::return->super->checkIDRefID
ConfigurableValidationState#isIdDeclared(String):::Checks if an ID has already been declared.:::return->super->isIdDeclared
ConfigurableValidationState#isEntityDeclared(String):::Checks if an entity is declared.:::return->super->isEntityDeclared
ConfigurableValidationState#isEntityUnparsed(String):::Checks if an entity is unparsed.:::return->super->isEntityUnparsed
ConfigurableValidationState#addId(String):::Adds the ID, if ID/IDREF checking is enabled.:::if->super->addId
ConfigurableValidationState#addIdRef(String):::Adds the IDREF, if ID/IDREF checking is enabled.:::if->super->addIdRef
EntityState#isEntityDeclared(String):::Query method to check if entity with this name was declared.:::
EntityState#isEntityUnparsed(String):::Query method to check if entity is unparsed.:::
ValidationManager#addValidationState(ValidationState):::Each validator should call this method to add its ValidationState into the validation manager.:::fVSs->add
ValidationManager#setEntityState(EntityState):::Set the information required to validate entity values.:::for->i->fVSs->size
ValidationManager#setGrammarFound(boolean)::: validation manager set grammar found:::
ValidationManager#isGrammarFound()::: validation manager is grammar found:::return
ValidationManager#setCachedDTD(boolean)::: validation manager set cached d:::
ValidationManager#isCachedDTD()::: validation manager is cached d:::return
ValidationManager#reset()::: validation manager reset:::fVSs->clear
ValidationState#setExtraChecking(boolean)::: validation state set extra checking:::
ValidationState#setFacetChecking(boolean)::: validation state set facet checking:::
ValidationState#setNormalizationRequired(boolean)::: validation state set normalization required:::
ValidationState#setUsingNamespaces(boolean)::: validation state set using namespaces:::
ValidationState#setEntityState(EntityState)::: validation state set entity state:::
ValidationState#setNamespaceSupport(NamespaceContext)::: validation state set namespace support:::
ValidationState#setSymbolTable(SymbolTable)::: validation state set symbol table:::
ValidationState#checkIDRefID():::return null if all IDREF values have a corresponding ID value; otherwise return an iterator for all the IDREF values without a matching ID value.:::missingIDs->if->key->for->i->fIdRefList->size->return->missingIDs->iterator
ValidationState#reset()::: validation state reset:::
ValidationState#resetIDTables():::The same validation state can be used to validate more than one (schema) validation roots:::
ValidationState#needExtraChecking()::: validation state need extra checking:::return
ValidationState#needFacetChecking()::: validation state need facet checking:::return
ValidationState#needToNormalize()::: validation state need to normalize:::return
ValidationState#useNamespaces()::: validation state use namespaces:::return
ValidationState#isEntityDeclared(String)::: validation state is entity declared:::if->return->fEntityState->getSymbol->isEntityDeclared->return
ValidationState#isEntityUnparsed(String)::: validation state is entity unparsed:::if->return->fEntityState->getSymbol->isEntityUnparsed->return
ValidationState#isIdDeclared(String)::: validation state is id declared:::return->fIds->contains
ValidationState#addId(String)::: validation state add id:::if->new->HashSet<>->fIds->add
ValidationState#addIdRef(String)::: validation state add id ref:::if->new->ArrayList<>->fIdRefList->add
ValidationState#getSymbol(String)::: validation state get symbol:::if->return->fSymbolTable->addSymbol->return->symbol->intern
ValidationState#getURI(String)::: validation state get i:::if->return->fNamespaceContext->getURI->return
ValidationState#setLocale(Locale)::: validation state set locale:::
ValidationState#getLocale()::: validation state get locale:::return

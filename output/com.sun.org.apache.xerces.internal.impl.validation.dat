ConfigurableValidationState#setIdIdrefChecking(boolean):::Turns checking for ID/IDREF errors on and off.:::
ConfigurableValidationState#setUnparsedEntityChecking(boolean):::Turns checking for unparsed entity errors on and off.:::
ConfigurableValidationState#checkIDRefID():::Checks if all IDREFs have a corresponding ID.:::return->super->checkIDRefID
ConfigurableValidationState#isIdDeclared(String):::Checks if an ID has already been declared.:::return->super->isIdDeclared
ConfigurableValidationState#isEntityDeclared(String):::Checks if an entity is declared.:::return->super->isEntityDeclared
ConfigurableValidationState#isEntityUnparsed(String):::Checks if an entity is unparsed.:::return->super->isEntityUnparsed
ConfigurableValidationState#addId(String):::Adds the ID, if ID/IDREF checking is enabled.:::if->super->addId
ConfigurableValidationState#addIdRef(String):::Adds the IDREF, if ID/IDREF checking is enabled.:::if->super->addIdRef
EntityState#isEntityDeclared(String):::Query method to check if entity with this name was declared.:::
EntityState#isEntityUnparsed(String):::Query method to check if entity is unparsed.:::
ValidationManager#addValidationState(ValidationState):::Each validator should call this method to add its ValidationState into the validation manager.:::fVSs->add
ValidationManager#setEntityState(EntityState):::Set the information required to validate entity values.:::for->i->fVSs->size
ValidationState#checkIDRefID():::return null if all IDREF values have a corresponding ID value; otherwise return an iterator for all the IDREF values without a matching ID value.:::missingIDs->if->key->for->i->fIdRefList->size->return->missingIDs->iterator
ValidationState#resetIDTables():::The same validation state can be used to validate more than one (schema) validation roots:::

javax.security.auth.kerberos.DelegationPermission#implies(Permission)->boolean:::Checks if this Kerberos delegation permission object "implies" the specified permission
javax.security.auth.kerberos.DelegationPermission#equals(Object)->boolean:::Checks two DelegationPermission objects for equality.
javax.security.auth.kerberos.DelegationPermission#hashCode()->int:::Returns the hash code value for this object.
javax.security.auth.kerberos.DelegationPermission#newPermissionCollection()->PermissionCollection:::Returns a PermissionCollection object for storing DelegationPermission objects
javax.security.auth.kerberos.KrbDelegationPermissionCollection#implies(Permission)->boolean:::Check and see if this collection of permissions implies the permissions expressed in "permission".
javax.security.auth.kerberos.KrbDelegationPermissionCollection#add(Permission)->void:::Adds a permission to the DelegationPermissions
javax.security.auth.kerberos.KrbDelegationPermissionCollection#elements()->Enumeration:::Returns an enumeration of all the DelegationPermission objects in the container.
javax.security.auth.kerberos.EncryptionKey#getKeyType()->int:::Returns the key type for this key.
javax.security.auth.kerberos.EncryptionKey#getAlgorithm()->String:::Returns the standard algorithm name for this key
javax.security.auth.kerberos.EncryptionKey#getFormat()->String:::Returns the name of the encoding format for this key.
javax.security.auth.kerberos.EncryptionKey#getEncoded()->byte[]:::Returns the key material of this key.
javax.security.auth.kerberos.EncryptionKey#destroy()->void:::Destroys this key by clearing out the key material of this key.
javax.security.auth.kerberos.EncryptionKey#isDestroyed()->boolean::: encryption key is destroyed
javax.security.auth.kerberos.EncryptionKey#toString()->String:::Returns an informative textual representation of this EncryptionKey.
javax.security.auth.kerberos.EncryptionKey#hashCode()->int:::Returns a hash code for this EncryptionKey.
javax.security.auth.kerberos.EncryptionKey#equals(Object)->boolean:::Compares the specified object with this key for equality
javax.security.auth.kerberos.JavaxSecurityAuthKerberosAccessImpl#keyTabTakeSnapshot(KeyTab)->sun.security.krb5.internal.ktab.KeyTab::: javax security auth kerberos access impl key tab take snapshot
javax.security.auth.kerberos.JavaxSecurityAuthKerberosAccessImpl#kerberosTicketGetProxy(KerberosTicket)->KerberosTicket::: javax security auth kerberos access impl kerberos ticket get proxy
javax.security.auth.kerberos.JavaxSecurityAuthKerberosAccessImpl#kerberosTicketSetProxy(KerberosTicket, KerberosTicket)->void::: javax security auth kerberos access impl kerberos ticket set proxy
javax.security.auth.kerberos.KerberosCredMessage#getEncoded()->byte[]:::Returns the DER encoded form of the KRB_CRED message.
javax.security.auth.kerberos.KerberosCredMessage#getSender()->KerberosPrincipal:::Returns the sender of this message.
javax.security.auth.kerberos.KerberosCredMessage#getRecipient()->KerberosPrincipal:::Returns the recipient of this message.
javax.security.auth.kerberos.KerberosCredMessage#destroy()->void:::Destroys this object by clearing out the message.
javax.security.auth.kerberos.KerberosCredMessage#isDestroyed()->boolean::: kerberos cred message is destroyed
javax.security.auth.kerberos.KerberosCredMessage#toString()->String:::Returns an informative textual representation of this KerberosCredMessage.
javax.security.auth.kerberos.KerberosCredMessage#hashCode()->int:::Returns a hash code for this KerberosCredMessage.
javax.security.auth.kerberos.KerberosCredMessage#equals(Object)->boolean:::Compares the specified object with this KerberosCredMessage for equality
javax.security.auth.kerberos.KerberosKey#getPrincipal()->KerberosPrincipal:::Returns the principal that this key belongs to.
javax.security.auth.kerberos.KerberosKey#getVersionNumber()->int:::Returns the key version number.
javax.security.auth.kerberos.KerberosKey#getKeyType()->int:::Returns the key type for this long-term key.
javax.security.auth.kerberos.KerberosKey#getAlgorithm()->String:::Returns the standard algorithm name for this key
javax.security.auth.kerberos.KerberosKey#getFormat()->String:::Returns the name of the encoding format for this secret key.
javax.security.auth.kerberos.KerberosKey#getEncoded()->byte[]:::Returns the key material of this secret key.
javax.security.auth.kerberos.KerberosKey#destroy()->void:::Destroys this key by clearing out the key material of this secret key.
javax.security.auth.kerberos.KerberosKey#isDestroyed()->boolean:::Determines if this key has been destroyed.
javax.security.auth.kerberos.KerberosKey#toString()->String:::Returns an informative textual representation of this KerberosKey.
javax.security.auth.kerberos.KerberosKey#hashCode()->int:::Returns a hash code for this KerberosKey.
javax.security.auth.kerberos.KerberosKey#equals(Object)->boolean:::Compares the specified object with this KerberosKey for equality
javax.security.auth.kerberos.KerberosPrincipal#getRealm()->String:::Returns the realm component of this Kerberos principal.
javax.security.auth.kerberos.KerberosPrincipal#hashCode()->int:::Returns a hash code for this KerberosPrincipal
javax.security.auth.kerberos.KerberosPrincipal#equals(Object)->boolean:::Compares the specified object with this principal for equality
javax.security.auth.kerberos.KerberosPrincipal#getName()->String:::The returned string corresponds to the single-string representation of a Kerberos Principal name as specified in Section 2.1 of RFC 1964.
javax.security.auth.kerberos.KerberosPrincipal#getNameType()->int:::Returns the name type of the KerberosPrincipal
javax.security.auth.kerberos.KerberosPrincipal#toString()->String:::Returns an informative textual representation of this KerberosPrincipal.
javax.security.auth.kerberos.KerberosTicket#getClient()->KerberosPrincipal:::Returns the client principal associated with this ticket.
javax.security.auth.kerberos.KerberosTicket#getServer()->KerberosPrincipal:::Returns the service principal associated with this ticket.
javax.security.auth.kerberos.KerberosTicket#getSessionKey()->SecretKey:::Returns the session key associated with this ticket
javax.security.auth.kerberos.KerberosTicket#getSessionKeyType()->int:::Returns the key type of the session key associated with this ticket as defined by the Kerberos Protocol Specification.
javax.security.auth.kerberos.KerberosTicket#isForwardable()->boolean:::Determines if this ticket is forwardable.
javax.security.auth.kerberos.KerberosTicket#isForwarded()->boolean:::Determines if this ticket had been forwarded or was issued based on authentication involving a forwarded ticket-granting ticket.
javax.security.auth.kerberos.KerberosTicket#isProxiable()->boolean:::Determines if this ticket is proxiable.
javax.security.auth.kerberos.KerberosTicket#isProxy()->boolean:::Determines is this ticket is a proxy-ticket.
javax.security.auth.kerberos.KerberosTicket#isPostdated()->boolean:::Determines is this ticket is post-dated.
javax.security.auth.kerberos.KerberosTicket#isRenewable()->boolean:::Determines is this ticket is renewable
javax.security.auth.kerberos.KerberosTicket#isInitial()->boolean:::Determines if this ticket was issued using the Kerberos AS-Exchange protocol, and not issued based on some ticket-granting ticket.
javax.security.auth.kerberos.KerberosTicket#getFlags()->boolean[]:::Returns the flags associated with this ticket
javax.security.auth.kerberos.KerberosTicket#getAuthTime()->java.util.Date:::Returns the time that the client was authenticated.
javax.security.auth.kerberos.KerberosTicket#getStartTime()->java.util.Date:::Returns the start time for this ticket's validity period.
javax.security.auth.kerberos.KerberosTicket#getEndTime()->java.util.Date:::Returns the expiration time for this ticket's validity period.
javax.security.auth.kerberos.KerberosTicket#getRenewTill()->java.util.Date:::Returns the latest expiration time for this ticket, including all renewals
javax.security.auth.kerberos.KerberosTicket#getClientAddresses()->java.net.InetAddress[]:::Returns a list of addresses from where the ticket can be used.
javax.security.auth.kerberos.KerberosTicket#getEncoded()->byte[]:::Returns an ASN.1 encoding of the entire ticket.
javax.security.auth.kerberos.KerberosTicket#isCurrent()->boolean:::Determines if this ticket is still current.
javax.security.auth.kerberos.KerberosTicket#refresh()->void:::Extends the validity period of this ticket
javax.security.auth.kerberos.KerberosTicket#destroy()->void:::Destroys the ticket and destroys any sensitive information stored in it.
javax.security.auth.kerberos.KerberosTicket#isDestroyed()->boolean:::Determines if this ticket has been destroyed.
javax.security.auth.kerberos.KerberosTicket#toString()->String:::Returns an informative textual representation of this KerberosTicket.
javax.security.auth.kerberos.KerberosTicket#hashCode()->int:::Returns a hash code for this KerberosTicket.
javax.security.auth.kerberos.KerberosTicket#equals(Object)->boolean:::Compares the specified object with this KerberosTicket for equality
javax.security.auth.kerberos.KeyImpl#getKeyType()->int:::Returns the keyType for this key as defined in the Kerberos Spec.
javax.security.auth.kerberos.KeyImpl#getAlgorithm()->String::: key impl get algorithm
javax.security.auth.kerberos.KeyImpl#getFormat()->String::: key impl get format
javax.security.auth.kerberos.KeyImpl#getEncoded()->byte[]::: key impl get encoded
javax.security.auth.kerberos.KeyImpl#destroy()->void::: key impl destroy
javax.security.auth.kerberos.KeyImpl#isDestroyed()->boolean::: key impl is destroyed
javax.security.auth.kerberos.KeyImpl#toString()->String::: key impl to string
javax.security.auth.kerberos.KeyImpl#hashCode()->int::: key impl hash code
javax.security.auth.kerberos.KeyImpl#equals(Object)->boolean::: key impl equals
javax.security.auth.kerberos.KeyTab#getInstance(File)->KeyTab:::Returns a KeyTab instance from a File object that is bound to an unknown service principal
javax.security.auth.kerberos.KeyTab#getUnboundInstance(File)->KeyTab:::Returns an unbound KeyTab instance from a File object
javax.security.auth.kerberos.KeyTab#getInstance(KerberosPrincipal, File)->KeyTab:::Returns a KeyTab instance from a File object that is bound to the specified service principal
javax.security.auth.kerberos.KeyTab#getInstance()->KeyTab:::Returns the default KeyTab instance that is bound to an unknown service principal
javax.security.auth.kerberos.KeyTab#getUnboundInstance()->KeyTab:::Returns the default unbound KeyTab instance
javax.security.auth.kerberos.KeyTab#getInstance(KerberosPrincipal)->KeyTab:::Returns the default KeyTab instance that is bound to the specified service principal
javax.security.auth.kerberos.KeyTab#takeSnapshot()->sun.security.krb5.internal.ktab.KeyTab::: key tab take snapshot
javax.security.auth.kerberos.KeyTab#getKeys(KerberosPrincipal)->KerberosKey[]:::Returns fresh keys for the given Kerberos principal
javax.security.auth.kerberos.KeyTab#getEncryptionKeys(PrincipalName)->EncryptionKey[]::: key tab get encryption keys
javax.security.auth.kerberos.KeyTab#exists()->boolean:::Checks if the keytab file exists
javax.security.auth.kerberos.KeyTab#toString()->String:::Returns an informative textual representation of this KeyTab.
javax.security.auth.kerberos.KeyTab#hashCode()->int:::Returns a hash code for this KeyTab.
javax.security.auth.kerberos.KeyTab#equals(Object)->boolean:::Compares the specified object with this KeyTab for equality
javax.security.auth.kerberos.KeyTab#getPrincipal()->KerberosPrincipal:::Returns the service principal this KeyTab object is bound to
javax.security.auth.kerberos.KeyTab#isBound()->boolean:::Returns if the keytab is bound to a principal
javax.security.auth.kerberos.ServicePermission#implies(Permission)->boolean:::Checks if this Kerberos service permission object "implies" the specified permission
javax.security.auth.kerberos.ServicePermission#impliesIgnoreMask(ServicePermission)->boolean::: service permission implies ignore mask
javax.security.auth.kerberos.ServicePermission#equals(Object)->boolean:::Checks two ServicePermission objects for equality.
javax.security.auth.kerberos.ServicePermission#hashCode()->int:::Returns the hash code value for this object.
javax.security.auth.kerberos.ServicePermission#getActions(int)->String:::Returns the "canonical string representation" of the actions in the specified mask
javax.security.auth.kerberos.ServicePermission#getActions()->String:::Returns the canonical string representation of the actions
javax.security.auth.kerberos.ServicePermission#newPermissionCollection()->PermissionCollection:::Returns a PermissionCollection object for storing ServicePermission objects
javax.security.auth.kerberos.ServicePermission#getMask()->int:::Return the current action mask.
javax.security.auth.kerberos.KrbServicePermissionCollection#implies(Permission)->boolean:::Check and see if this collection of permissions implies the permissions expressed in "permission".
javax.security.auth.kerberos.KrbServicePermissionCollection#add(Permission)->void:::Adds a permission to the ServicePermissions
javax.security.auth.kerberos.KrbServicePermissionCollection#elements()->Enumeration:::Returns an enumeration of all the ServicePermission objects in the container.

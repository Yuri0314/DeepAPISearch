CompilerThreadStat#getName():::Returns the name of the compiler thread associated with this compiler thread statistic.:::return
CompilerThreadStat#getCompileTaskCount():::Returns the number of compile tasks performed by the compiler thread associated with this compiler thread statistic.:::return
CompilerThreadStat#getCompileTime():::Returns the accumulated elapsed time spent by the compiler thread associated with this compiler thread statistic.:::return
CompilerThreadStat#getLastCompiledMethodInfo():::Returns the information about the last method compiled by the compiler thread associated with this compiler thread statistic.:::return
HotspotClassLoadingMBean#getLoadedClassSize():::Returns the amount of memory in bytes occupied by loaded classes in the Java virtual machine.:::
HotspotClassLoadingMBean#getUnloadedClassSize():::Returns the number of bytes that the Java virtual machine collected due to class unloading.:::
HotspotClassLoadingMBean#getClassLoadingTime():::Returns the accumulated elapsed time spent by class loading in milliseconds.:::
HotspotClassLoadingMBean#getMethodDataSize():::Returns the amount of memory in bytes occupied by the method data.:::
HotspotClassLoadingMBean#getInitializedClassCount():::Returns the number of classes for which initializers were run.:::
HotspotClassLoadingMBean#getClassInitializationTime():::Returns the accumulated elapsed time spent in class initializers in milliseconds.:::
HotspotClassLoadingMBean#getClassVerificationTime():::Returns the accumulated elapsed time spent in class verifier in milliseconds.:::
HotspotClassLoadingMBean#getInternalClassLoadingCounters():::Returns a list of internal counters maintained in the Java virtual machine for the class loading system.:::
HotspotCompilationMBean#getCompilerThreadCount():::Returns the number of compiler threads.:::
HotspotCompilationMBean#getCompilerThreadStats():::Returns the statistic of all compiler threads.:::
HotspotCompilationMBean#getTotalCompileCount():::Returns the total number of compiles.:::
HotspotCompilationMBean#getBailoutCompileCount():::Returns the number of bailout compiles.:::
HotspotCompilationMBean#getInvalidatedCompileCount():::Returns the number of invalidated compiles.:::
HotspotCompilationMBean#getLastCompile():::Returns the method information of the last compiled method.:::
HotspotCompilationMBean#getFailedCompile():::Returns the method information of the last failed compile.:::
HotspotCompilationMBean#getInvalidatedCompile():::Returns the method information of the last invalidated compile.:::
HotspotCompilationMBean#getCompiledMethodCodeSize():::Returns the number of bytes for the code of the compiled methods.:::
HotspotCompilationMBean#getCompiledMethodSize():::Returns the number of bytes occupied by the compiled methods.:::
HotspotCompilationMBean#getInternalCompilerCounters():::Returns a list of internal counters maintained in the Java virtual machine for the compilation system.:::
HotspotMemoryMBean#getInternalMemoryCounters():::Returns a list of internal counters maintained in the Java virtual machine for the memory system.:::
HotspotRuntimeMBean#getSafepointCount():::Returns the number of safepoints taken place since the Java virtual machine started.:::
HotspotRuntimeMBean#getTotalSafepointTime():::Returns the accumulated time spent at safepoints in milliseconds:::
HotspotRuntimeMBean#getSafepointSyncTime():::Returns the accumulated time spent getting to safepoints in milliseconds.:::
HotspotRuntimeMBean#getInternalRuntimeCounters():::Returns a list of internal counters maintained in the Java virtual machine for the runtime system.:::
HotspotThreadMBean#getInternalThreadCount():::Returns the current number of VM internal threads.:::
HotspotThreadMBean#getInternalThreadCpuTimes():::Returns a Map of the name of all VM internal threads to the thread CPU time in nanoseconds:::
HotspotThreadMBean#getInternalThreadingCounters():::Returns a list of internal counters maintained in the Java virtual machine for the thread system.:::
LazyCompositeData#writeReplace():::Designate to a CompositeData object when writing to an output stream during serialization so that the receiver only requires JMX 1.2 classes but not any implementation specific class.:::return->compositeData
LazyCompositeData#getCompositeData():::Returns the CompositeData representing this object:::
LazyCompositeData#isTypeMatched(CompositeType, CompositeType):::Compares two CompositeTypes and returns true if all items in type1 exist in type2 and their item types are the same.:::if->return->allItems->type1->keySet->if->type2->keySet->containsAll->return->return->allItems->stream->type1->getType->type2->getType->isTypeMatched->allMatch
ManagementFactoryHelper#getAllMemoryPoolNames():::Returns an array of the name of all memory pools:::return->Arrays->MemoryImpl->getMemoryPools->stream->MemoryPoolMXBean->getName->map->String[]->new->toArray
ManagementFactoryHelper#getHotspotRuntimeMBean():::This method is for testing only.:::if->new->HotspotRuntime->return
ManagementFactoryHelper#getHotspotClassLoadingMBean():::This method is for testing only.:::if->new->HotspotClassLoading->return
ManagementFactoryHelper#getHotspotThreadMBean():::This method is for testing only.:::if->new->HotspotThread->return
ManagementFactoryHelper#getHotspotMemoryMBean():::This method is for testing only.:::if->new->HotspotMemory->return
ManagementFactoryHelper#getHotspotCompilationMBean():::This method is for testing only.:::if->new->HotspotCompilation->return
MemoryNotifInfoCompositeData#validateCompositeData(CompositeData):::Validate if the input CompositeData has the expected CompositeType (i.e:::if->throw->new->NullPointerException->if->cd->getCompositeType->isTypeMatched->throw->new->IllegalArgumentException
MemoryUsageCompositeData#validateCompositeData(CompositeData):::Validate if the input CompositeData has the expected CompositeType (i.e:::if->throw->new->NullPointerException->if->cd->getCompositeType->isTypeMatched->throw->new->IllegalArgumentException
MethodInfo#getName():::Returns the name of the compiled method.:::return
MethodInfo#getType():::Returns the type of the compiled method such as normal-compile, osr-compile, and native-compile.:::return
MethodInfo#getCompileSize():::Returns the number of bytes occupied by this compiled method:::return
MonitorInfoCompositeData#validateCompositeData(CompositeData):::Validate if the input CompositeData has the expected CompositeType (i.e:::if->throw->new->NullPointerException->if->cd->getCompositeType->isTypeMatched->cd->getCompositeType->isTypeMatched->throw->new->IllegalArgumentException
Sensor#getName():::Returns the name of this sensor.:::return
Sensor#getCount():::Returns the total number of times that this sensor has been triggered.:::synchronized->return
Sensor#isOn():::Tests if this sensor is currently on.:::synchronized->return
Sensor#trigger():::Triggers this sensor:::synchronized->triggerAction
Sensor#trigger(int):::Triggers this sensor:::synchronized->triggerAction
Sensor#trigger(int, MemoryUsage):::Triggers this sensor piggybacking a memory usage object:::synchronized->triggerAction
Sensor#clear():::Clears this sensor.:::synchronized->clearAction
Sensor#clear(int):::Clears this sensor and increments the count with the input increment.:::synchronized->clearAction
StackTraceElementCompositeData#validateCompositeData(CompositeData):::Validate if the input CompositeData has the expected CompositeType (i.e:::if->throw->new->NullPointerException->ct->cd->getCompositeType->if->isTypeMatched->isTypeMatched->throw->new->IllegalArgumentException
ThreadInfoCompositeData#lockedMonitors():::Returns an empty array if locked_monitors attribute is not present.:::if->cdata->containsKey->return->new->MonitorInfoArr->lockedMonitorsData->cdata->get->monitors->new->MonitorInfoArr->for->i->return
ThreadInfoCompositeData#lockedSynchronizers():::Returns an empty array if locked_monitors attribute is not present.:::if->cdata->containsKey->return->new->LockInfoArr->lockedSyncsData->cdata->get->locks->new->LockInfoArr->for->i->return
ThreadInfoCompositeData#validateCompositeData(CompositeData):::Validate if the input CompositeData has the expected CompositeType (i.e:::if->throw->new->NullPointerException->type->cd->getCompositeType->version->if->Arrays->stream->type->containsKey->anyMatch->Runtime->version->feature->else->if->Arrays->stream->type->containsKey->anyMatch->else->if->ThreadInfoCompositeTypes->ofVersion->isTypeMatched->throw->new->IllegalArgumentException
Util#checkAccess(ManagementPermission):::Check that the current context is trusted to perform monitoring or management:::sm->System->getSecurityManager->if->sm->checkPermission

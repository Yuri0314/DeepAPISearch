DTDDVFactoryImpl#getBuiltInDV(String):::return a dtd type of the given name:::return->fBuiltInTypes->get
DTDDVFactoryImpl#getBuiltInTypes():::get all built-in DVs, which are stored in a Map keyed by the name:::return->new->HashMap<>
ENTITYDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid ID value:::if->context->isEntityUnparsed->throw->new->ObjectArr->new->InvalidDatatypeValueException
IDDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid ID value:::if->context->useNamespaces->if->XMLChar->isValidNCName->throw->new->ObjectArr->new->InvalidDatatypeValueException->else->if->XMLChar->isValidName->throw->new->ObjectArr->new->InvalidDatatypeValueException->if->context->isIdDeclared->throw->new->ObjectArr->new->InvalidDatatypeValueException->context->addId
IDREFDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid IDREF value:::if->context->useNamespaces->if->XMLChar->isValidNCName->throw->new->ObjectArr->new->InvalidDatatypeValueException->else->if->XMLChar->isValidName->throw->new->ObjectArr->new->InvalidDatatypeValueException->context->addIdRef
ListDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid:::parsedList->new->StringTokenizer->numberOfTokens->parsedList->countTokens->if->throw->new->InvalidDatatypeValueException->while->parsedList->hasMoreTokens->parsedList->nextToken->validate
NMTOKENDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid NMTOKEN value:::if->XMLChar->isValidNmtoken->throw->new->ObjectArr->new->InvalidDatatypeValueException
NOTATIONDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid NOTATION value:::
StringDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid string value:::
XML11DTDDVFactoryImpl#getBuiltInDV(String):::return a dtd type of the given name This will call the super class if and only if it does not recognize the passed-in name.:::if->XML11BUILTINTYPES->get->return->XML11BUILTINTYPES->get->return->fBuiltInTypes->get
XML11DTDDVFactoryImpl#getBuiltInTypes():::get all built-in DVs, which are stored in a Map keyed by the name New XML 1.1 datatypes are inserted.:::toReturn->new->HashMap<>->toReturn->putAll->return
XML11IDDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid ID value:::if->context->useNamespaces->if->XML11Char->isXML11ValidNCName->throw->new->ObjectArr->new->InvalidDatatypeValueException->else->if->XML11Char->isXML11ValidName->throw->new->ObjectArr->new->InvalidDatatypeValueException->if->context->isIdDeclared->throw->new->ObjectArr->new->InvalidDatatypeValueException->context->addId
XML11IDREFDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid IDREF value:::if->context->useNamespaces->if->XML11Char->isXML11ValidNCName->throw->new->ObjectArr->new->InvalidDatatypeValueException->else->if->XML11Char->isXML11ValidName->throw->new->ObjectArr->new->InvalidDatatypeValueException->context->addIdRef
XML11NMTOKENDatatypeValidator#validate(String, ValidationContext):::Checks that "content" string is valid NMTOKEN value:::if->XML11Char->isXML11ValidNmtoken->throw->new->ObjectArr->new->InvalidDatatypeValueException

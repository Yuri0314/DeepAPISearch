sun.tools.javac.BatchEnvironment#create(OutputStream, String, String, String)->BatchEnvironment:::Factory
sun.tools.javac.BatchEnvironment#classPaths(String, String, String)->ClassPath[]::: batch environment class paths
sun.tools.javac.BatchEnvironment#getFlags()->int:::Return flags
sun.tools.javac.BatchEnvironment#getMajorVersion()->short:::Return major version to use for generated class files
sun.tools.javac.BatchEnvironment#getMinorVersion()->short:::Return minor version to use for generated class files
sun.tools.javac.BatchEnvironment#getcovFile()->File:::Return coverage data file
sun.tools.javac.BatchEnvironment#getClasses()->Enumeration:::Return an enumeration of all the currently defined classes in order of appearance to getClassDeclaration().
sun.tools.javac.BatchEnvironment#isExemptPackage(Identifier)->boolean:::Tells whether an Identifier refers to a package which should be exempt from the "exists" check in Imports#resolve().
sun.tools.javac.BatchEnvironment#getClassDeclaration(Identifier)->ClassDeclaration:::Get a class, given the fully qualified class name
sun.tools.javac.BatchEnvironment#getClassDeclaration(Type)->ClassDeclaration::: batch environment get class declaration
sun.tools.javac.BatchEnvironment#classExists(Identifier)->boolean:::Check if a class exists Applies only to package members (non-nested classes).
sun.tools.javac.BatchEnvironment#getPackage(Identifier)->Package:::Get the package path for a package
sun.tools.javac.BatchEnvironment#parseFile(ClassFile)->void:::Parse a source file
sun.tools.javac.BatchEnvironment#loadFile(ClassFile)->BinaryClass:::Load a binary file
sun.tools.javac.BatchEnvironment#loadFileFlags()->int:::Default flags for loadFile
sun.tools.javac.BatchEnvironment#needsCompilation(Hashtable, ClassDeclaration)->boolean:::Load a binary class
sun.tools.javac.BatchEnvironment#loadDefinition(ClassDeclaration)->void:::Load the definition of a class or at least determine how to load it
sun.tools.javac.BatchEnvironment#makeClassDefinition(Environment, long, IdentifierToken, String, int, IdentifierToken, IdentifierToken[], ClassDefinition)->ClassDefinition:::Create a new class.
sun.tools.javac.BatchEnvironment#makeMemberDefinition(Environment, long, ClassDefinition, String, int, Type, Identifier, IdentifierToken[], IdentifierToken[], Object)->MemberDefinition:::Create a new field.
sun.tools.javac.BatchEnvironment#shutdown()->void:::Release resources in classpath.
sun.tools.javac.BatchEnvironment#errorString(String, Object, Object, Object)->String:::Error String
sun.tools.javac.BatchEnvironment#insertError(long, String)->boolean:::Insert an error message in the list of outstanding error messages
sun.tools.javac.BatchEnvironment#pushError(String, int, String, String, String)->void::: batch environment push error
sun.tools.javac.BatchEnvironment#flushErrors()->void::: batch environment flush errors
sun.tools.javac.BatchEnvironment#reportError(Object, long, String, String)->void:::Report error
sun.tools.javac.BatchEnvironment#error(Object, long, String, Object, Object, Object)->void:::Issue an error
sun.tools.javac.BatchEnvironment#output(String)->void:::Output a string
sun.tools.javac.BatchParser#packageDeclaration(long, IdentifierToken)->void:::Package declaration
sun.tools.javac.BatchParser#importClass(long, IdentifierToken)->void:::Import class
sun.tools.javac.BatchParser#importPackage(long, IdentifierToken)->void:::Import package
sun.tools.javac.BatchParser#beginClass(long, String, int, IdentifierToken, IdentifierToken, IdentifierToken[])->ClassDefinition:::Define class
sun.tools.javac.BatchParser#getCurrentClass()->ClassDefinition:::Report the current class under construction.
sun.tools.javac.BatchParser#endClass(long, ClassDefinition)->void:::End class
sun.tools.javac.BatchParser#defineField(long, ClassDefinition, String, int, Type, IdentifierToken, IdentifierToken[], IdentifierToken[], Node)->void:::Define a method
sun.tools.javac.CompilerMember#compareTo(Object)->int::: compiler member compare to
sun.tools.javac.CompilerMember#getKey()->String::: compiler member get key
sun.tools.javac.ErrorConsumer#pushError(String, int, String, String, String)->void::: error consumer push error
sun.tools.javac.Main#getExitStatus()->int::: main get exit status
sun.tools.javac.Main#compilationPerformedSuccessfully()->boolean::: main compilation performed successfully
sun.tools.javac.Main#compilationReportedErrors()->boolean::: main compilation reported errors
sun.tools.javac.Main#usage_error()->void:::Print usage message and make exit status an error
sun.tools.javac.Main#initResource()->void:::Initialize ResourceBundle
sun.tools.javac.Main#getText(String)->String:::get and format message string from resource
sun.tools.javac.Main#getText(String, int)->String::: main get text
sun.tools.javac.Main#getText(String, String)->String::: main get text
sun.tools.javac.Main#getText(String, String, String)->String::: main get text
sun.tools.javac.Main#getText(String, String, String, String)->String::: main get text
sun.tools.javac.Main#compile(String[])->boolean:::Run the compiler
sun.tools.javac.Main#main(String[])->void:::Main program
sun.tools.javac.SourceClass#getEndPosition()->long:::Return last position in this class.
sun.tools.javac.SourceClass#setEndPosition(long)->void::: source class set end position
sun.tools.javac.SourceClass#getAbsoluteName()->String:::Return absolute name of source file
sun.tools.javac.SourceClass#getImports()->Imports:::Return imports
sun.tools.javac.SourceClass#getThisArgument()->LocalMember:::Find or create my "this" argument, which is used for all methods.
sun.tools.javac.SourceClass#addDependency(ClassDeclaration)->void:::Add a dependency
sun.tools.javac.SourceClass#addMember(Environment, MemberDefinition)->void:::Add a field (check it first)
sun.tools.javac.SourceClass#setupEnv(Environment)->Environment:::Create an environment suitable for checking this class
sun.tools.javac.SourceClass#reportDeprecated(Environment)->boolean:::A source class never reports deprecation, since the compiler allows access to deprecated features that are being compiled in the same job.
sun.tools.javac.SourceClass#noteUsedBy(ClassDefinition, long, Environment)->void:::See if the source file of this class is right.
sun.tools.javac.SourceClass#check(Environment)->void:::Check this class and all its fields.
sun.tools.javac.SourceClass#checkSourceFile(Environment, long)->void:::See if the source file of this class is of the right name.
sun.tools.javac.SourceClass#getSuperClass(Environment)->ClassDeclaration::: source class get super class
sun.tools.javac.SourceClass#basicCheck(Environment)->void::: source class basic check
sun.tools.javac.SourceClass#addMirandaMethods(Environment, Iterator)->void:::Add a group of methods to this class as miranda methods
sun.tools.javac.SourceClass#resolveTypeStructure(Environment)->void::: source class resolve type structure
sun.tools.javac.SourceClass#resolveSupers(Environment)->void::: source class resolve supers
sun.tools.javac.SourceClass#checkLocalClass(Environment, Context, Vset, ClassDefinition, Expression[], Type[])->Vset:::During the type-checking of an outer method body or initializer, this routine is called to check a local class body in the proper context.
sun.tools.javac.SourceClass#inlineLocalClass(Environment)->void:::As with checkLocalClass, run the inline phase for a local class.
sun.tools.javac.SourceClass#checkInsideClass(Environment, Context, Vset)->Vset:::Check a class which is inside a local class, but is not itself local.
sun.tools.javac.SourceClass#classModifierString(int)->String::: source class class modifier string
sun.tools.javac.SourceClass#getAccessMember(Environment, Context, MemberDefinition, boolean)->MemberDefinition:::Find or create an access method for a private member, or return null if this is not possible.
sun.tools.javac.SourceClass#getUpdateMember(Environment, Context, MemberDefinition, boolean)->MemberDefinition::: source class get update member
sun.tools.javac.SourceClass#findLookupContext()->SourceClass:::Find an inner class of 'this', chosen arbitrarily
sun.tools.javac.SourceClass#getClassLiteralLookup(long)->MemberDefinition:::Get helper method for class literal lookup.
sun.tools.javac.SourceClass#compile(OutputStream)->void:::Compile this class
sun.tools.javac.SourceClass#compileClass(Environment, OutputStream)->void::: source class compile class
sun.tools.javac.SourceClass#printClassDependencies(Environment)->void::: source class print class dependencies
sun.tools.javac.SourceMember#getArguments()->Vector::: source member get arguments
sun.tools.javac.SourceMember#createArgumentFields(Vector)->void::: source member create argument fields
sun.tools.javac.SourceMember#getOuterThisArg()->LocalMember::: source member get outer this arg
sun.tools.javac.SourceMember#addOuterThis()->void::: source member add outer this
sun.tools.javac.SourceMember#addUplevelArguments()->void:::Prepend argument names and argument types for local variable references
sun.tools.javac.SourceMember#getExceptions(Environment)->ClassDeclaration[]:::Get exceptions
sun.tools.javac.SourceMember#setExceptions(ClassDeclaration[])->void:::Set array of name-resolved exceptions directly, e.g., for access methods.
sun.tools.javac.SourceMember#resolveTypeStructure(Environment)->void::: source member resolve type structure
sun.tools.javac.SourceMember#getDefiningClassDeclaration()->ClassDeclaration:::Get the class declaration in which the field is actually defined
sun.tools.javac.SourceMember#reportDeprecated(Environment)->boolean:::A source field never reports deprecation, since the compiler allows access to deprecated features that are being compiled in the same job.
sun.tools.javac.SourceMember#check(Environment)->void:::Check this field
sun.tools.javac.SourceMember#check(Environment, Context, Vset)->Vset:::Check a field.
sun.tools.javac.SourceMember#inline(Environment)->void:::Inline the field
sun.tools.javac.SourceMember#getValue(Environment)->Node:::Get the value of the field (or null if the value can't be determined)
sun.tools.javac.SourceMember#isInlineable(Environment, boolean)->boolean::: source member is inlineable
sun.tools.javac.SourceMember#getInitialValue()->Object:::Get the initial value of the field
sun.tools.javac.SourceMember#code(Environment, Assembler)->void:::Generate code
sun.tools.javac.SourceMember#codeInit(Environment, Context, Assembler)->void::: source member code init
sun.tools.javac.SourceMember#print(PrintStream)->void:::Print for debugging

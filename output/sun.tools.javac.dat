BatchEnvironment#create(OutputStream, String, String, String):::Factory:::classPaths->classPaths->return->new->BatchEnvironment
BatchEnvironment#classPaths(String, String, String)::: batch environment class paths:::sourcePath->binaryPath->binaryPathBuffer->new->StringBuffer->if->System->getProperty->if->if->if->System->getProperty->if->appendPath->appendPath->new->ClassPath->binaryPathBuffer->toString->new->ClassPath->return->new->ClassPathArr
BatchEnvironment#appendPath(StringBuffer, String)::: batch environment append path:::if->str->length->if->buf->length->buf->append->buf->append
BatchEnvironment#getFlags():::Return flags:::return
BatchEnvironment#getMajorVersion():::Return major version to use for generated class files:::return
BatchEnvironment#getMinorVersion():::Return minor version to use for generated class files:::return
BatchEnvironment#getcovFile():::Return coverage data file:::return
BatchEnvironment#getClasses():::Return an enumeration of all the currently defined classes in order of appearance to getClassDeclaration().:::return->classesOrdered->elements
BatchEnvironment#isExemptPackage(Identifier):::Tells whether an Identifier refers to a package which should be exempt from the "exists" check in Imports#resolve().:::if->setExemptPackages->return->exemptPackages->contains
BatchEnvironment#setExemptPackages():::Set the set of packages which are exempt from the exists check in Imports#resolve().:::new->HashSet<>->for->e->getClasses->e->hasMoreElements->if->exemptPackages->contains->exemptPackages->add->try->if->getPackage->exists->error->return->catch->error->finally
BatchEnvironment#getClassDeclaration(Identifier):::Get a class, given the fully qualified class name:::return->Type->tClass->getClassDeclaration
BatchEnvironment#getClassDeclaration(Type)::: batch environment get class declaration:::c->classes->get->if->classes->t->getClassName->new->ClassDeclaration->put->classesOrdered->addElement->return
BatchEnvironment#classExists(Identifier):::Check if a class exists Applies only to package members (non-nested classes).:::if->nm->isInner->nm->getTopName->t->Type->tClass->try->c->classes->get->return->c->getName->equals->nm->getQualifier->getPackage->nm->getName->classExists->catch->return->finally
BatchEnvironment#getPackage(Identifier):::Get the package path for a package:::p->packages->get->if->packages->new->Package->put->return
BatchEnvironment#parseFile(ClassFile):::Parse a source file:::tm->System->currentTimeMillis->input->p->if->dtEnter->env->new->Environment->try->file->getInputStream->env->getCharacterEncoding->setCharacterEncoding->new->BatchParser->catch->if->dtEvent->throw->new->FileNotFoundException->finally->try->p->parseFile->catch->throw->new->CompilerError->finally->try->input->close->catch->finally->if->verbose->System->currentTimeMillis->Main->file->getPath->Long->toString->getText->output->if->size->resolve->else->e->elements->first->e->nextElement->if->first->isInnerClass->throw->new->CompilerError->current->next->while->e->hasMoreElements->e->nextElement->if->next->isInnerClass->continue->current->next->getClassDeclaration->addDependency->next->current->getClassDeclaration->addDependency->if->current->first->getClassDeclaration->addDependency->first->current->getClassDeclaration->addDependency->if->dtExit
BatchEnvironment#loadFile(ClassFile):::Load a binary file:::tm->System->currentTimeMillis->input->file->getInputStream->c->if->dtEnter->try->is->new->BufferedInputStream->new->DataInputStream->BinaryClass->new->Environment->loadFileFlags->load->catch->file->getPath->e->getMessage->error->if->dtExit->return->file->getPath->error->return->finally->input->close->if->verbose->System->currentTimeMillis->Main->file->getPath->Long->toString->getText->output->if->dtExit->return
BatchEnvironment#loadFileFlags():::Default flags for loadFile:::return
BatchEnvironment#needsCompilation(Hashtable, ClassDeclaration):::Load a binary class:::switch->c->getStatus->if->c->getName->dtEnter->loadDefinition->return->needsCompilation->if->c->getName->dtEnter->if->check->get->check->put->bin->c->getClassDefinition->for->e->bin->getDependencies->e->hasMoreElements->if->c->getName->dtExit->return->if->c->getName->dtEnter->c->getName->dtExit->return->if->c->getName->dtExit->return
BatchEnvironment#loadDefinition(ClassDeclaration):::Load the definition of a class or at least determine how to load it:::if->c->getName->c->getStatus->dtEnter->switch->c->getStatus->if->dtEvent->nm->c->getName->pkg->try->nm->getQualifier->getPackage->catch->c->setDefinition->error->if->dtExit->return->finally->binfile->pkg->nm->getName->getBinaryFile->if->c->setDefinition->if->c->getName->dtExit->return->srcfile->pkg->nm->getName->getSourceFile->if->if->c->getName->dtEvent->bc->try->loadFile->catch->c->setDefinition->error->if->dtExit->return->finally->if->bc->getName->equals->binfile->getPath->error->if->dtEvent->if->c->setDefinition->if->dtExit->return->if->bc->getSource->ClassFile->bc->getSource->new->File->newClassFile->pkg->srcfile->getName->getSourceFile->if->srcfile->exists->if->dtEvent->if->srcfile->lastModified->binfile->lastModified->c->setDefinition->if->dtEvent->bc->loadNested->if->c->getName->dtExit->return->if->dependencies->c->setDefinition->if->c->getName->dtEvent->else->c->setDefinition->if->c->getName->dtEvent->bc->loadNested->if->c->getName->c->getStatus->dtExit->return->c->setDefinition->if->c->getName->dtEvent->bc->loadNested->if->c->getName->c->getStatus->dtExit->return->bc->try->if->srcfile->lastModified->binfile->lastModified->c->setDefinition->if->c->getName->dtEvent->return->loadFile->catch->error->if->dtEvent->finally->if->bc->getName->equals->binfile->getPath->error->if->dtEvent->if->name->bc->getName->if->name->c->getName->equals->if->dependencies->c->setDefinition->if->dtEvent->else->c->setDefinition->if->dtEvent->else->c->setDefinition->if->dtEvent->if->dependencies->getClassDeclaration->setDefinition->if->dtEvent->else->getClassDeclaration->setDefinition->if->dtEvent->else->c->setDefinition->if->dtEvent->if->c->getClassDefinition->bc->loadNested->if->c->getName->c->getStatus->dtExit->return->if->dtEvent->tab->new->Hashtable<>->if->needsCompilation->for->e->tab->keys->e->hasMoreElements->if->c->getName->c->getStatus->dtExit->return->if->dtEvent->srcfile->pkg->if->c->getClassDefinition->try->c->getName->getQualifier->getPackage->pkg->c->getClassDefinition->getSource->getSourceFile->catch->error->if->dtEvent->finally->if->fn->c->getClassDefinition->getSource->ClassFile->new->File->newClassFile->else->nm->c->getName->try->nm->getQualifier->getPackage->pkg->nm->getName->getSourceFile->catch->error->if->dtEvent->finally->if->c->setDefinition->if->c->getName->c->getStatus->dtExit->return->try->parseFile->catch->error->if->dtEvent->finally->if->c->getClassDefinition->c->getStatus->srcfile->getPath->error->c->setDefinition->if->c->getName->dtEvent->if->c->getName->c->getStatus->dtExit->return->if->c->getName->c->getStatus->dtExit
BatchEnvironment#makeClassDefinition(Environment, long, IdentifierToken, String, int, IdentifierToken, IdentifierToken[], ClassDefinition):::Create a new class.:::nm->name->getName->nmpos->name->getWhere->pkgNm->mangledName->localContextClass->localName->if->nm->isQualified->nm->isInner->else->if->outerClass->getTopClass->for->i->outerNm->localContextClass->getName->Identifier->Identifier->lookup->lookupInner->if->else->else->if->Identifier->outerClass->getName->lookupInner->else->c->toplevelEnv->getClassDeclaration->if->c->isDefined->toplevelEnv->c->getName->c->getClassDefinition->getSource->error->new->ClassDeclaration->if->pkgNm->equals->new->IdentifierToken->sourceClass->new->SourceClass->if->outerClass->new->SourceMember->addMember->if->localContextClass->addLocalClass->return
BatchEnvironment#makeMemberDefinition(Environment, long, ClassDefinition, String, int, Type, Identifier, IdentifierToken[], IdentifierToken[], Object):::Create a new field.:::if->dtEvent->v->if->new->Vector->for->i->f->new->SourceMember->clazz->addMember->return
BatchEnvironment#shutdown():::Release resources in classpath.:::try->if->sourcePath->close->if->binaryPath->close->catch->Main->ee->toString->getText->output->finally->super->shutdown
BatchEnvironment#errorString(String, Object, Object, Object):::Error String:::key->if->err->startsWith->err->substring->else->return->Main->arg1->toString->arg2->toString->arg3->toString->getText
BatchEnvironment#insertError(long, String):::Insert an error message in the list of outstanding error messages:::if->newMsg->new->ErrorMessage->else->if->equals->return->else->current->next->while->while->if->equals->return->newMsg->new->ErrorMessage->return
BatchEnvironment#pushError(String, int, String, String, String)::: batch environment push error:::limit->if->if->errorString->output->return->if->errorFileName->endsWith->output->output->output->else->output
BatchEnvironment#flushErrors()::: batch environment flush errors:::if->return->inputAvail->data->dataLength->try->in->new->FileInputStream->in->available->new->charArr->reader->getCharacterEncoding->getCharacterEncoding->new->InputStreamReader->new->InputStreamReader->reader->read->reader->close->catch->finally->for->msg
BatchEnvironment#reportError(Object, long, String, String):::Report error:::if->if->flushErrors->if->err->startsWith->if->warnings->output->return->output->else->if->fileName->if->fileName->equals->flushErrors->if->err->startsWith->if->err->indexOf->if->deprecationFiles->contains->deprecationFiles->addElement->if->deprecation->if->insertError->else->else->if->warnings->if->insertError->else->else->if->insertError->else->if->getPath->reportError->else->if->src->toString->reportError->else->if->try->getClassDefinition->reportError->catch->getName->reportError->finally->else->if->c->if->err->startsWith->c->setError->c->getSource->reportError->else->if->getClassDeclaration->reportError->else->output
BatchEnvironment#error(Object, long, String, Object, Object, Object):::Issue an error:::if->return->if->System->getProperty->errorString->output->new->Exception->new->PrintStream->printStackTrace->errorString->reportError
BatchEnvironment#output(String):::Output a string:::out->new->PrintStream->out->println
BatchParser#packageDeclaration(long, IdentifierToken):::Package declaration:::nm->t->getName->if->t->getName->imports->setCurrentPackage->else->env->error
BatchParser#importClass(long, IdentifierToken):::Import class:::imports->addClass
BatchParser#importPackage(long, IdentifierToken):::Import package:::imports->addPackage
BatchParser#beginClass(long, String, int, IdentifierToken, IdentifierToken, IdentifierToken[]):::Define class:::if->toplevelEnv->dtEnter->outerClass->if->t->getWhere->Identifier->t->getName->lookup->new->IdentifierToken->if->if->if->if->if->outerClass->isInterface->if->toplevelEnv->makeClassDefinition->sourceClass->getClassDeclaration->setDefinition->new->Environment->if->toplevelEnv->dtEvent->if->toplevelEnv->dtEvent->classes->addElement->if->toplevelEnv->dtExit->return
BatchParser#getCurrentClass():::Report the current class under construction.:::return
BatchParser#endClass(long, ClassDefinition):::End class:::if->toplevelEnv->dtEnter->sourceClass->setEndPosition->outerClass->sourceClass->getOuterClass->if->new->Environment->if->toplevelEnv->dtExit
BatchParser#defineField(long, ClassDefinition, String, int, Type, IdentifierToken, IdentifierToken[], IdentifierToken[], Node):::Define a method:::nm->name->getName->if->sourceClass->isInterface->if->if->t->isType->else->if->nm->equals->rt->t->getReturnType->retname->rt->isType->rt->getClassName->clsname->sourceClass->getLocalName->if->clsname->equals->Type->t->getArgumentTypes->tMethod->else->if->clsname->retname->getFlatName->getName->equals->Type->t->getArgumentTypes->tMethod->env->error->else->if->retname->isQualified->retname->equals->env->error->return->else->env->error->return->if->t->isType->new->IdentifierTokenArr->if->t->isType->new->IdentifierTokenArr->f->env->makeMemberDefinition->if->env->dump->f->print
CompilerMember#compareTo(Object)::: compiler member compare to:::cm->return->getKey->cm->getKey->compareTo
CompilerMember#getKey()::: compiler member get key:::if->return
ErrorConsumer#pushError(String, int, String, String, String)::: error consumer push error:::
Main#getExitStatus()::: main get exit status:::return
Main#compilationPerformedSuccessfully()::: main compilation performed successfully:::return
Main#compilationReportedErrors()::: main compilation reported errors:::return
Main#output(String):::Output a message.:::out->new->PrintStream->out->println
Main#error(String):::Top level error message:::getText->output
Main#error(String, String)::: main error:::getText->output
Main#error(String, String, String)::: main error:::getText->output
Main#usage_error():::Print usage message and make exit status an error:::error
Main#initResource():::Initialize ResourceBundle:::try->ResourceBundle->getBundle->catch->throw->new->Error->finally
Main#getText(String):::get and format message string from resource:::return->getText
Main#getText(String, int)::: main get text:::return->Integer->toString->getText
Main#getText(String, String)::: main get text:::return->getText
Main#getText(String, String, String)::: main get text:::return->getText
Main#getText(String, String, String, String)::: main get text:::if->initResource->try->message->messageRB->getString->return->MessageFormat->format->catch->if->if->if->message->return->MessageFormat->format->finally
Main#compile(String[]):::Run the compiler:::sourcePathArg->classPathArg->sysClassPathArg->verbosePath->targetArg->majorVersion->minorVersion->destDir->covFile->optJcov->optJcovFile->flags->tm->System->currentTimeMillis->v->new->Vector<>->nowrite->props->encoding->prior_g->prior_O->try->CommandLine->parse->catch->e->getMessage->error->System->exit->e->printStackTrace->System->exit->finally->for->i->if->v->size->usage_error->return->env->BatchEnvironment->create->if->toString->toString->getText->output->env->setCharacterEncoding->noMemoryErrorString->getText->stackOverflowErrorString->getText->env->error->try->for->e->v->elements->e->hasMoreElements->for->e->env->getClasses->e->hasMoreElements->buf->new->ByteArrayOutputStream->done->do->env->flushErrors->for->e->env->getClasses->e->hasMoreElements->while->catch->env->output->return->env->output->return->if->env->dump->ee->printStackTrace->env->error->if->env->dump->ee->printStackTrace->env->error->finally->ndepfiles->size->if->env->warnings->ndeps->file1->elementAt->if->env->deprecation->if->env->error->else->env->error->else->if->env->error->else->env->error->env->flushErrors->env->shutdown->status->if->msg->if->getText->else->getText->if->if->getText->else->getText->output->if->else->if->if->getText->output->else->getText->output->if->env->covdata->CovAsm->new->Assembler->CovAsm->GenJCov->if->env->verbose->System->currentTimeMillis->Long->toString->getText->output->return
Main#main(String[]):::Main program:::out->if->Boolean->getBoolean->compiler->new->Main->System->compiler->compile->exit
SourceClass#getEndPosition():::Return last position in this class.:::return
SourceClass#setEndPosition(long)::: source class set end position:::
SourceClass#getAbsoluteName():::Return absolute name of source file:::AbsName->getSource->getAbsoluteName->return
SourceClass#getImports():::Return imports:::return->toplevelEnv->getImports
SourceClass#getThisArgument():::Find or create my "this" argument, which is used for all methods.:::if->getType->new->LocalMember->return
SourceClass#addDependency(ClassDeclaration):::Add a dependency:::if->tab->put->if->toplevelEnv->print_dependencies->getClassDeclaration->deps->put
SourceClass#addMember(Environment, MemberDefinition):::Add a field (check it first):::switch->f->getModifiers->break->env->f->getWhere->error->if->f->isPublic->f->subModifiers->else->f->subModifiers->break->if->f->isStatic->isTopLevel->f->isSynthetic->if->f->isMethod->env->f->getWhere->error->f->subModifiers->else->if->f->isVariable->if->f->isFinal->f->isBlankFinal->env->f->getWhere->f->getName->error->f->subModifiers->else->f->subModifiers->if->f->isMethod->if->f->isConstructor->if->f->getClassDefinition->isInterface->env->f->getWhere->error->return->if->f->isNative->f->isAbstract->f->isStatic->f->isSynchronized->f->isFinal->env->f->getWhere->error->f->subModifiers->else->if->f->isInitializer->if->f->getClassDefinition->isInterface->env->f->getWhere->error->return->if->f->getType->getReturnType->isVoidArray->env->f->getWhere->error->if->f->getClassDefinition->isInterface->f->isStatic->f->isSynchronized->f->isNative->f->isFinal->f->isPrivate->f->isProtected->env->f->getWhere->error->f->subModifiers->if->f->isTransient->env->f->getWhere->error->f->subModifiers->if->f->isVolatile->env->f->getWhere->error->f->subModifiers->if->f->isAbstract->if->f->isPrivate->env->f->getWhere->error->f->subModifiers->if->f->isStatic->env->f->getWhere->error->f->subModifiers->if->f->isFinal->env->f->getWhere->error->f->subModifiers->if->f->isNative->env->f->getWhere->error->f->subModifiers->if->f->isSynchronized->env->f->getWhere->error->f->subModifiers->if->f->isAbstract->f->isNative->if->f->getValue->env->f->getWhere->error->f->setValue->else->if->f->getValue->if->f->isConstructor->env->f->getWhere->error->else->env->f->getWhere->error->f->addModifiers->arguments->f->getArguments->if->argumentLength->arguments->size->argTypes->f->getType->getArgumentTypes->for->i->else->if->f->isInnerClass->if->f->isVolatile->f->isTransient->f->isNative->f->isSynchronized->env->f->getWhere->error->f->subModifiers->if->f->getClassDefinition->isInterface->f->isPrivate->f->isProtected->env->f->getWhere->error->f->subModifiers->f->addModifiers->c->f->getInnerClass->c->subModifiers->c->addModifiers->else->if->f->getType->isType->f->getType->isVoidArray->env->f->getWhere->f->getName->error->return->if->f->isSynchronized->f->isAbstract->f->isNative->env->f->getWhere->error->f->subModifiers->if->f->isStrict->env->f->getWhere->error->f->subModifiers->if->f->isTransient->isInterface->env->f->getWhere->error->f->subModifiers->if->f->isVolatile->isInterface->f->isFinal->env->f->getWhere->error->f->subModifiers->if->f->isFinal->f->getValue->isInterface->env->f->getWhere->error->f->subModifiers->if->f->getClassDefinition->isInterface->f->isPrivate->f->isProtected->env->f->getWhere->error->f->subModifiers->f->addModifiers->if->f->isInitializer->for->f2->f->getName->getFirstMatch->f2->getNextMatch->super->addMember
SourceClass#setupEnv(Environment):::Create an environment suitable for checking this class:::return->new->Environment
SourceClass#reportDeprecated(Environment):::A source class never reports deprecation, since the compiler allows access to deprecated features that are being compiled in the same job.:::return
SourceClass#noteUsedBy(ClassDefinition, long, Environment):::See if the source file of this class is right.:::super->noteUsedBy->def->while->def->isInnerClass->def->getOuterClass->if->def->isPublic->return->while->ref->isInnerClass->ref->getOuterClass->if->def->getSource->ref->getSource->equals->return->checkSourceFile
SourceClass#check(Environment):::Check this class and all its fields.:::if->env->getName->dtEnter->if->isInsideLocal->if->env->getOuterClass->getName->dtEvent->getOuterClass->check->else->if->isInnerClass->if->env->getOuterClass->getName->dtEvent->getOuterClass->maybeCheck->vset->new->Vset->ctx->if->env->getName->dtEvent->setupEnv->checkInternal->if->env->getName->dtExit
SourceClass#maybeCheck(Environment)::: source class maybe check:::if->env->getName->dtEvent->c->getClassDeclaration->if->c->getStatus->c->setDefinition->check
SourceClass#checkInternal(Environment, Context, Vset)::: source class check internal:::nm->getClassDeclaration->getName->if->env->verbose->env->output->Context->newEnvironment->basicCheck->sup->getSuperClass->if->where->getWhere->IdentifierToken->getWhere->env->sup->getName->resolveExtendsByName->for->i->if->isInnerClass->isInsideLocal->simpleName->nm->getName->try->imports->toplevelEnv->getImports->ID->imports->resolve->if->getName->env->error->catch->ID->getName->env->error->finally->if->isPublic->getWhere->checkSourceFile->checkMembers->return
SourceClass#checkSourceFile(Environment, long):::See if the source file of this class is of the right name.:::if->return->fname->getName->getName->src->getSource->getName->if->src->equals->if->isPublic->env->error->else->env->error
SourceClass#getSuperClass(Environment)::: source class get super class:::if->env->dtEnter->if->resolveTypeStructure->if->env->dtExit->return
SourceClass#checkSupers(Environment)::: source class check supers:::if->env->dtEnter->if->isInterface->if->isFinal->nm->getClassDeclaration->getName->env->getWhere->error->else->if->getSuperClass->where->getWhere->IdentifierToken->getWhere->try->def->getSuperClass->getClassDefinition->def->resolveTypeStructure->if->getSuperClass->extendsCanAccess->env->getSuperClass->error->else->if->def->isFinal->env->getSuperClass->error->else->if->def->isInterface->env->getSuperClass->error->else->if->getSuperClass->superClassOf->env->error->else->def->noteUsedBy->if->else->sup->for->catch->try->env->resolve->catch->env->error->break->finally->env->error->finally->else->if->isAnonymous->throw->new->CompilerError->else->if->getName->equals->throw->new->CompilerError->for->i->if->env->dtExit
SourceClass#checkMembers(Environment, Context, Vset):::Check all of the members of this class:::if->getError->return->for->f->getFirstMember->f->getNextMember->if->isFinal->isAbstract->env->this->getName->getName->error->if->isInterface->isAbstract->mustBeAbstract->iter->getPermanentlyAbstractMethods->while->iter->hasNext->method->iter->next->env->getClassDeclaration->method->getDefiningClassDeclaration->error->getMethods->while->iter->hasNext->method->iter->next->if->method->isAbstract->env->getClassDeclaration->method->getDefiningClassDeclaration->error->ctxInit->new->Context->vsInst->vset->copy->vsClass->vset->copy->for->f->getFirstMember->f->getNextMember->ctxInst->new->Context->thisArg->getThisArgument->thisNumber->ctxInst->declare->vsInst->addVar->for->f->getFirstMember->f->getNextMember->checkBlankFinals->for->f->getFirstMember->f->getNextMember->getClassDeclaration->setDefinition->for->f->getFirstMember->f->getNextMember->return
SourceClass#checkBlankFinals(Environment, Context, Vset, boolean)::: source class check blank finals:::for->i->ctxInit->getVarNumber
SourceClass#basicCheck(Environment)::: source class basic check:::if->env->getName->dtEnter->super->basicCheck->if->if->env->getName->dtExit->return->if->env->getName->dtEvent->setupEnv->imports->env->getImports->if->imports->resolve->resolveTypeStructure->if->isInterface->if->hasConstructor->code->getWhere->new->StatementArr->new->CompoundStatement->t->Type->tMethod->accessModifiers->getModifiers->isInnerClass->env->getWhere->makeMemberDefinition->if->collectInheritedMethods->if->env->getName->dtExit
SourceClass#addMirandaMethods(Environment, Iterator):::Add a group of methods to this class as miranda methods:::while->mirandas->hasNext->method->mirandas->next->addMember
SourceClass#resolveTypeStructure(Environment)::: source class resolve type structure:::if->env->getName->dtEnter->oc->getOuterClass->if->resolveTypeStructure->if->if->env->getName->dtExit->return->if->env->getName->dtEvent->setupEnv->resolveSupers->try->checkSupers->catch->env->error->finally->for->f->getFirstMember->f->getNextMember->for->f->getFirstMember->f->getNextMember->if->env->getName->dtExit
SourceClass#resolveSupers(Environment)::: source class resolve supers:::if->env->dtEnter->if->resolveSuper->if->getClassDeclaration->getName->equals->if->new->ClassDeclarationArr->for->i->if->env->dtExit
SourceClass#resolveSuper(Environment, IdentifierToken)::: source class resolve super:::name->t->getName->if->env->dtEnter->if->isInnerClass->outerClass->resolveName->else->env->resolveName->result->env->getClassDeclaration->if->env->dtExit->return
SourceClass#checkLocalClass(Environment, Context, Vset, ClassDefinition, Expression[], Type[]):::During the type-checking of an outer method body or initializer, this routine is called to check a local class body in the proper context.:::setupEnv->if->isAnonymous->throw->new->CompilerError->if->isAnonymous->resolveAnonymousStructure->checkInternal->return
SourceClass#inlineLocalClass(Environment):::As with checkLocalClass, run the inline phase for a local class.:::for->f->getFirstMember->f->getNextMember->if->getReferencesFrozen->for->f->getFirstMember->f->getNextMember
SourceClass#checkInsideClass(Environment, Context, Vset):::Check a class which is inside a local class, but is not itself local.:::if->isInsideLocal->isLocal->throw->new->CompilerError->return->checkInternal
SourceClass#resolveAnonymousStructure(Environment, ClassDefinition, Expression[], Type[]):::Just before checking an anonymous class, decide its true inheritance, and build its (sole, implicit) constructor.:::if->env->dtEvent->if->sup->isInterface->ni->i1->new->ClassDeclarationArr->if->System->arraycopy->if->id1->new->IdentifierTokenArr->System->arraycopy->sup->getName->new->IdentifierToken->sup->getClassDeclaration->toplevelEnv->getClassDefinition->sup->getClassDeclaration->if->hasConstructor->throw->new->CompilerError->t->Type->tMethod->names->new->IdentifierTokenArr->for->i->outerArg->sup->isTopLevel->sup->isLocal->superArgs->new->ExpressionArr->for->i->where->getWhere->superExp->if->new->SuperExpression->else->new->IdentifierExpression->new->SuperExpression->superCall->new->MethodExpression->body->new->ExpressionStatement->code->new->CompoundStatement->mod->env->makeMemberDefinition
SourceClass#classModifierString(int)::: source class class modifier string:::s->for->i->if->Integer->toHexString->return
SourceClass#getAccessMember(Environment, Context, MemberDefinition, boolean):::Find or create an access method for a private member, or return null if this is not possible.:::return->getAccessMember
SourceClass#getUpdateMember(Environment, Context, MemberDefinition, boolean)::: source class get update member:::if->field->isVariable->throw->new->CompilerError->return->getAccessMember
SourceClass#getAccessMember(Environment, Context, MemberDefinition, boolean, boolean)::: source class get access member:::isStatic->field->isStatic->isMethod->field->isMethod->af->for->getFirstMember->af->getNextMember->if->if->return->else->uf->af->getAccessUpdateMember->if->return->else->if->getAccessMember->anm->dummyType->if->field->isConstructor->outerMostClass->getTopClass->if->sup->new->IdentifierToken->interfaces->t->new->IdentifierToken->mod->if->outerMostClass->isInterface->dummyClass->toplevelEnv->makeClassDefinition->dummyClass->getClassDeclaration->setDefinition->argsX->argTypesX->try->supcls->toplevelEnv->getClassDefinition->dummyClass->new->Vset->checkLocalClass->catch->finally->dummyClass->getType->else->for->i->argTypes->t->field->getType->if->if->if->at->Type->tMethod->else->at->Type->tMethod->else->t->getArgumentTypes->else->classType->this->getType->if->if->at->Type->tMethod->else->at->Type->tMethod->else->at->t->getArgumentTypes->nargs->if->field->isConstructor->outerThisArg->getOuterThisArg->if->if->outerThisArg->getType->throw->new->CompilerError->new->TypeArr->for->i->else->new->TypeArr->for->i->else->new->TypeArr->for->i->Type->t->getReturnType->tMethod->nlen->where->field->getWhere->names->new->IdentifierTokenArr->for->i->access->thisArg->args->if->new->ExpressionArr->for->i->else->if->field->isConstructor->new->ThisExpression->new->ExpressionArr->for->i->else->new->IdentifierExpression->new->ExpressionArr->for->i->if->new->FieldExpression->if->new->AssignExpression->else->new->MethodExpression->code->if->t->getReturnType->isType->new->ExpressionStatement->else->new->ReturnStatement->body->new->CompoundStatement->mod->if->field->isConstructor->newf->env->field->getExceptionIds->makeMemberDefinition->newf->field->getExceptions->setExceptions->newf->setAccessMethodTarget->if->af->setAccessUpdateMember->newf->setIsSuperAccessMethod->checkContext->newf->getClassDefinition->getClassContext->if->try->newf->new->Vset->check->catch->env->error->finally->return
SourceClass#findLookupContext():::Find an inner class of 'this', chosen arbitrarily:::for->f->getFirstMember->f->getNextMember->for->f->getFirstMember->f->getNextMember->return
SourceClass#getClassLiteralLookup(long):::Get helper method for class literal lookup.:::if->return->if->outerClass->getClassLiteralLookup->return->c->needNewClass->if->isInterface->findLookupContext->if->sup->new->IdentifierToken->interfaces->t->new->IdentifierToken->mod->toplevelEnv->makeClassDefinition->idDClass->Identifier->lookup->strarg->w->c->getWhere->arg->new->IdentifierToken->e->new->IdentifierExpression->a1->idForName->Identifier->lookup->new->TypeExpression->new->MethodExpression->body->new->ReturnStatement->idClassNotFound->Identifier->lookup->idNoClassDefFound->Identifier->lookup->ctyp->Type->tClass->exptyp->Type->tClass->idGetMessage->Identifier->lookup->new->IdentifierExpression->new->ExpressionArr->new->MethodExpression->a2->new->TypeExpression->new->NewInstanceExpression->handler->new->TypeExpression->new->IdentifierToken->new->ThrowStatement->new->CatchStatement->handlers->new->TryStatement->mtype->Type->tMethod->args->toplevelEnv->makeMemberDefinition->if->if->c->getClassDeclaration->getStatus->throw->new->CompilerError->c->getClassDeclaration->setDefinition->argsX->argTypesX->try->sup->toplevelEnv->getClassDefinition->c->new->Vset->checkLocalClass->catch->finally->return
SourceClass#compile(OutputStream):::Compile this class:::env->synchronized->while->active->getName->contains->active->wait->active->getName->addElement->try->compileClass->catch->throw->new->CompilerError->finally->synchronized->active->getName->removeElement->active->notifyAll
SourceClass#assertModifiers(int, int):::Verify that the modifier bits included in 'required' are all present in 'mods', otherwise signal an internal error:::if->throw->new->CompilerError
SourceClass#compileClass(Environment, OutputStream)::: source class compile class:::variables->new->Vector<>->methods->new->Vector<>->innerClasses->new->Vector<>->init->getWhere->Type->tMethod->new->MemberDefinition->new->Assembler->new->CompilerMember->ctx->new->Context->for->def->def->isInnerClass->def->getOuterClass->ncsize->innerClasses->size->for->i->for->i->haveDeprecated->this->isDeprecated->haveSynthetic->this->isSynthetic->haveConstantValue->haveExceptions->for->field->getFirstMember->field->getNextMember->if->empty->getWhere->add->methods->addElement->if->getNestError->return->nClassAttrs->if->methods->size->tab->put->if->tab->put->sourceFile->if->env->debug_source->getSource->getName->tab->put->tab->put->if->tab->put->if->env->debug_lines->tab->put->if->tab->put->if->this->isDeprecated->if->tab->put->if->this->isSynthetic->if->env->coverage->tab->put->tab->put->tab->put->if->env->debug_vars->tab->put->if->innerClasses->size->tab->put->absoluteSourcePath->timeStamp->if->env->coverage->getAbsoluteName->System->currentTimeMillis->tab->put->tab->getClassDeclaration->put->if->getSuperClass->tab->getSuperClass->put->for->i->ordered_methods->methods->size->new->CompilerMemberArr->methods->copyInto->sort->for->i->methods->size->for->e->methods->elements->e->hasMoreElements->for->e->variables->elements->e->hasMoreElements->for->e->innerClasses->elements->e->hasMoreElements->data->new->DataOutputStream->data->writeInt->data->toplevelEnv->getMinorVersion->writeShort->data->toplevelEnv->getMajorVersion->writeShort->tab->write->cmods->getModifiers->if->isInterface->assertModifiers->else->if->if->isProtected->if->outerClass->isInterface->assertModifiers->data->writeShort->if->env->dumpModifiers->cn->getName->nm->Identifier->cn->getQualifier->cn->getFlatName->lookup->println->println->classModifierString->println->data->tab->getClassDeclaration->index->writeShort->data->getSuperClass->tab->getSuperClass->index->writeShort->data->writeShort->for->i->buf->new->ByteArrayOutputStream->attbuf->new->ByteArrayOutputStream->databuf->new->DataOutputStream->data->variables->size->writeShort->for->e->variables->elements->e->hasMoreElements->data->methods->size->writeShort->for->e->methods->elements->e->hasMoreElements->data->writeShort->if->env->debug_source->data->tab->index->writeShort->data->writeInt->data->tab->index->writeShort->if->this->isDeprecated->data->tab->index->writeShort->data->writeInt->if->this->isSynthetic->data->tab->index->writeShort->data->writeInt->if->env->coverage->data->tab->index->writeShort->data->writeInt->data->tab->index->writeShort->data->tab->index->writeShort->data->writeInt->data->writeLong->if->innerClasses->size->data->tab->index->writeShort->data->innerClasses->size->writeInt->data->innerClasses->size->writeShort->for->e->innerClasses->elements->e->hasMoreElements->data->flush->if->env->covdata->CovAsm->new->Assembler->CovAsm->GenVecJCov
SourceClass#printClassDependencies(Environment)::: source class print class dependencies:::if->toplevelEnv->print_dependencies->src->getSource->getAbsoluteName->className->Type->getName->mangleInnerType->toString->startLine->getWhere->endLine->getEndPosition->println->for->e->deps->elements->e->hasMoreElements
SourceMember#getArguments()::: source member get arguments:::return
SourceMember#createArgumentFields(Vector)::: source member create argument fields:::if->isMethod->new->Vector<>->if->isConstructor->isStatic->isInitializer->args->getThisArgument->addElement->if->e->argNames->elements->argTypes->getType->getArgumentTypes->for->i
SourceMember#getOuterThisArg()::: source member get outer this arg:::return
SourceMember#addOuterThis()::: source member add outer this:::refs->clazz->getReferences->while->refs->isClientOuterField->refs->getNext->if->return->oldArgTypes->type->getArgumentTypes->argTypes->new->TypeArr->arg->refs->getLocalArgument->args->insertElementAt->arg->getType->for->i->Type->type->getReturnType->tMethod
SourceMember#addUplevelArguments():::Prepend argument names and argument types for local variable references:::refs->clazz->getReferences->clazz->getReferencesFrozen->count->for->r->r->getNext->if->return->oldArgTypes->type->getArgumentTypes->argTypes->new->TypeArr->ins->for->r->r->getNext->for->i->Type->type->getReturnType->tMethod
SourceMember#getExceptions(Environment):::Get exceptions:::if->isMethod->return->if->new->ClassDeclarationArr->return->getClassDefinition->setupEnv->new->ClassDeclarationArr->for->i->return
SourceMember#setExceptions(ClassDeclaration[]):::Set array of name-resolved exceptions directly, e.g., for access methods.:::
SourceMember#resolveTypeStructure(Environment)::: source member resolve type structure:::if->env->dtEnter->if->if->env->dtEvent->throw->new->CompilerError->else->if->env->dtEvent->super->resolveTypeStructure->if->isInnerClass->nc->getInnerClass->if->nc->isLocal->resolveTypeStructure->innerClass->getType->else->env->getClassDefinition->isSynthetic->resolveNames->getExceptions->if->isMethod->argNames->createArgumentFields->if->isConstructor->addOuterThis->if->env->dtExit
SourceMember#getDefiningClassDeclaration():::Get the class declaration in which the field is actually defined:::if->return->super->getDefiningClassDeclaration->else->return->abstractSource->getDefiningClassDeclaration
SourceMember#reportDeprecated(Environment):::A source field never reports deprecation, since the compiler allows access to deprecated features that are being compiled in the same job.:::return
SourceMember#check(Environment):::Check this field:::if->env->getName->dtEnter->if->if->isSynthetic->getValue->if->env->dtExit->return->if->env->dtEvent->clazz->check->if->if->getClassDefinition->getError->else->if->env->dtExit->throw->new->CompilerError->if->env->getName->dtExit
SourceMember#check(Environment, Context, Vset):::Check a field.:::if->env->getName->dtEvent->if->if->isInnerClass->nc->getInnerClass->if->nc->isLocal->nc->isInsideLocal->checkInsideClass->return->if->env->dump->getClassDeclaration->getName->getName->println->if->getValue->getValue->print->println->new->Environment->env->getClassDefinition->getType->resolve->if->isMethod->throwable->env->getClassDeclaration->exp->getExceptions->for->i->if->isMethod->length->args->size->for->i->if->getValue->new->Context->if->isMethod->s->getValue->for->e->args->elements->e->hasMoreElements->if->isConstructor->vset->ctx->getThisNumber->clearVar->supCall->s->firstConstructor->if->getClassDefinition->getSuperClass->getDefaultSuperCall->scs->new->ExpressionStatement->Statement->insertStatement->setValue->exp->getExceptions->htsize->thrown->new->Hashtable<>->s->checkMethod->ignore1->env->getClassDeclaration->ignore2->env->getClassDeclaration->for->e->thrown->keys->e->hasMoreElements->else->thrown->new->Hashtable<>->val->getValue->val->getType->checkInitializer->val->getType->convert->setValue->if->isStatic->isFinal->clazz->isTopLevel->if->getValue->isConstant->env->getName->error->setValue->except->env->getClassDeclaration->ignore1->env->getClassDeclaration->ignore2->env->getClassDeclaration->for->e->thrown->keys->e->hasMoreElements->if->env->dump->getValue->print->println->getClassDefinition->getError->if->isInitializer->vset->isDeadEnd->env->error->vset->clearDeadEnd->return
SourceMember#getDefaultSuperCall(Environment)::: source member get default super call:::se->sclass->getClassDefinition->getSuperClass->getClassDefinition->reqc->sclass->isTopLevel->sclass->getOuterClass->thisc->getClassDefinition->if->Context->outerLinkExists->new->NullExpression->new->SuperExpression->env->getClassDefinition->error->if->new->SuperExpression->return->new->ExpressionArr->new->MethodExpression
SourceMember#inline(Environment):::Inline the field:::switch->check->inline->break->if->env->dump->getClassDeclaration->getName->getName->println->new->Environment->if->isMethod->if->isNative->isAbstract->s->getValue->ctx->new->Context->for->e->args->elements->e->hasMoreElements->s->inline->setValue->else->if->isInnerClass->nc->getInnerClass->if->nc->isLocal->nc->isInsideLocal->inlineLocalClass->break->else->if->getValue->ctx->new->Context->if->isStatic->ctxInst->new->Context->thisArg->getThisArgument->ctxInst->declare->getValue->inlineValue->setValue->else->getValue->inlineValue->setValue->if->env->dump->getClassDeclaration->getName->getName->println->if->getValue->getValue->print->println->else->println->break
SourceMember#getValue(Environment):::Get the value of the field (or null if the value can't be determined):::value->getValue->if->setupEnv->inline->getValue->return
SourceMember#isInlineable(Environment, boolean)::: source member is inlineable:::if->super->isInlineable->getValue->return->getClassDefinition->getError->return
SourceMember#getInitialValue():::Get the initial value of the field:::if->isMethod->getValue->isFinal->return->return->getValue->getValue
SourceMember#code(Environment, Assembler):::Generate code:::switch->check->code->return->inline->code->return->if->env->dump->getClassDeclaration->getName->getName->println->if->isMethod->isNative->isAbstract->new->Environment->ctx->new->Context->s->getValue->for->e->args->elements->e->hasMoreElements->if->s->code->if->getType->getReturnType->isType->isInitializer->asm->getWhere->add->return
SourceMember#codeInit(Environment, Context, Assembler)::: source member code init:::if->isMethod->return->switch->check->codeInit->return->inline->codeInit->return->if->env->dump->getClassDeclaration->getName->getName->println->if->getValue->e->getValue->if->isStatic->if->getInitialValue->e->codeValue->asm->getWhere->add->else->asm->getWhere->add->e->codeValue->asm->getWhere->add->return
SourceMember#print(PrintStream):::Print for debugging:::super->print->if->getValue->getValue->print->out->println

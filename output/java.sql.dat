java.sql.Array#getBaseTypeName()->String:::Retrieves the SQL type name of the elements in the array designated by this Array object
java.sql.Array#getBaseType()->int:::Retrieves the JDBC type of the elements in the array designated by this Array object.
java.sql.Array#getArray()->Object:::Retrieves the contents of the SQL ARRAY value designated by this Array object in the form of an array in the Java programming language
java.sql.Array#getArray(java.util.Map>)->Object:::Retrieves the contents of the SQL ARRAY value designated by this Array object
java.sql.Array#getArray(long, int)->Object:::Retrieves a slice of the SQL ARRAY value designated by this Array object, beginning with the specified index and containing up to count successive elements of the SQL array
java.sql.Array#getArray(long, int, java.util.Map>)->Object:::Retrieves a slice of the SQL ARRAY value designated by this Array object, beginning with the specified index and containing up to count successive elements of the SQL array
java.sql.Array#getResultSet()->ResultSet:::Retrieves a result set that contains the elements of the SQL ARRAY value designated by this Array object
java.sql.Array#getResultSet(java.util.Map>)->ResultSet:::Retrieves a result set that contains the elements of the SQL ARRAY value designated by this Array object
java.sql.Array#getResultSet(long, int)->ResultSet:::Retrieves a result set holding the elements of the subarray that starts at index index and contains up to count successive elements
java.sql.Array#getResultSet(long, int, java.util.Map>)->ResultSet:::Retrieves a result set holding the elements of the subarray that starts at index index and contains up to count successive elements
java.sql.Array#free()->void:::This method frees the Array object and releases the resources that it holds
java.sql.BatchUpdateException#getUpdateCounts()->int[]:::Retrieves the update count for each update statement in the batch update that executed successfully before this exception occurred
java.sql.BatchUpdateException#getLargeUpdateCounts()->long[]:::Retrieves the update count for each update statement in the batch update that executed successfully before this exception occurred
java.sql.Blob#length()->long:::Returns the number of bytes in the BLOB value designated by this Blob object.
java.sql.Blob#getBytes(long, int)->byte[]:::Retrieves all or part of the BLOB value that this Blob object represents, as an array of bytes
java.sql.Blob#getBinaryStream()->java.io.InputStream:::Retrieves the BLOB value designated by this Blob instance as a stream.
java.sql.Blob#position(byte[], long)->long:::Retrieves the byte position at which the specified byte array pattern begins within the BLOB value that this Blob object represents
java.sql.Blob#position(Blob, long)->long:::Retrieves the byte position in the BLOB value designated by this Blob object at which pattern begins
java.sql.Blob#setBytes(long, byte[])->int:::Writes the given array of bytes to the BLOB value that this Blob object represents, starting at position pos, and returns the number of bytes written
java.sql.Blob#setBytes(long, byte[], int, int)->int:::Writes all or part of the given byte array to the BLOB value that this Blob object represents and returns the number of bytes written
java.sql.Blob#setBinaryStream(long)->java.io.OutputStream:::Retrieves a stream that can be used to write to the BLOB value that this Blob object represents
java.sql.Blob#truncate(long)->void:::Truncates the BLOB value that this Blob object represents to be len bytes in length
java.sql.Blob#free()->void:::This method frees the Blob object and releases the resources that it holds
java.sql.Blob#getBinaryStream(long, long)->InputStream:::Returns an InputStream object that contains a partial Blob value, starting with the byte specified by pos, which is length bytes in length.
java.sql.CallableStatement#registerOutParameter(int, int)->void:::Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType
java.sql.CallableStatement#registerOutParameter(int, int, int)->void:::Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType
java.sql.CallableStatement#wasNull()->boolean:::Retrieves whether the last OUT parameter read had the value of SQL NULL
java.sql.CallableStatement#getString(int)->String:::Retrieves the value of the designated JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language
java.sql.CallableStatement#getBoolean(int)->boolean:::Retrieves the value of the designated JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.
java.sql.CallableStatement#getByte(int)->byte:::Retrieves the value of the designated JDBC TINYINT parameter as a byte in the Java programming language.
java.sql.CallableStatement#getShort(int)->short:::Retrieves the value of the designated JDBC SMALLINT parameter as a short in the Java programming language.
java.sql.CallableStatement#getInt(int)->int:::Retrieves the value of the designated JDBC INTEGER parameter as an int in the Java programming language.
java.sql.CallableStatement#getLong(int)->long:::Retrieves the value of the designated JDBC BIGINT parameter as a long in the Java programming language.
java.sql.CallableStatement#getFloat(int)->float:::Retrieves the value of the designated JDBC FLOAT parameter as a float in the Java programming language.
java.sql.CallableStatement#getDouble(int)->double:::Retrieves the value of the designated JDBC DOUBLE parameter as a double in the Java programming language.
java.sql.CallableStatement#getBigDecimal(int, int)->BigDecimal:::Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with scale digits to the right of the decimal point.
java.sql.CallableStatement#getBytes(int)->byte[]:::Retrieves the value of the designated JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.
java.sql.CallableStatement#getDate(int)->java.sql.Date:::Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object.
java.sql.CallableStatement#getTime(int)->java.sql.Time:::Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object.
java.sql.CallableStatement#getTimestamp(int)->java.sql.Timestamp:::Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object.
java.sql.CallableStatement#getObject(int)->Object:::Retrieves the value of the designated parameter as an Object in the Java programming language
java.sql.CallableStatement#getBigDecimal(int)->BigDecimal:::Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.
java.sql.CallableStatement#getObject(int, java.util.Map>)->Object:::Returns an object representing the value of OUT parameter parameterIndex and uses map for the custom mapping of the parameter value
java.sql.CallableStatement#getRef(int)->Ref:::Retrieves the value of the designated JDBC REF(&lt;structured-type&gt;) parameter as a java.sql.Ref object in the Java programming language.
java.sql.CallableStatement#getBlob(int)->Blob:::Retrieves the value of the designated JDBC BLOB parameter as a java.sql.Blob object in the Java programming language.
java.sql.CallableStatement#getClob(int)->Clob:::Retrieves the value of the designated JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.
java.sql.CallableStatement#getArray(int)->Array:::Retrieves the value of the designated JDBC ARRAY parameter as an java.sql.Array object in the Java programming language.
java.sql.CallableStatement#getDate(int, Calendar)->java.sql.Date:::Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date
java.sql.CallableStatement#getTime(int, Calendar)->java.sql.Time:::Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time
java.sql.CallableStatement#getTimestamp(int, Calendar)->java.sql.Timestamp:::Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object
java.sql.CallableStatement#registerOutParameter(int, int, String)->void:::Registers the designated output parameter
java.sql.CallableStatement#registerOutParameter(String, int)->void:::Registers the OUT parameter named parameterName to the JDBC type sqlType
java.sql.CallableStatement#registerOutParameter(String, int, int)->void:::Registers the parameter named parameterName to be of JDBC type sqlType
java.sql.CallableStatement#registerOutParameter(String, int, String)->void:::Registers the designated output parameter
java.sql.CallableStatement#getURL(int)->java.net.URL:::Retrieves the value of the designated JDBC DATALINK parameter as a java.net.URL object.
java.sql.CallableStatement#setURL(String, java.net.URL)->void:::Sets the designated parameter to the given java.net.URL object
java.sql.CallableStatement#setNull(String, int)->void:::Sets the designated parameter to SQL NULL
java.sql.CallableStatement#setBoolean(String, boolean)->void:::Sets the designated parameter to the given Java boolean value
java.sql.CallableStatement#setByte(String, byte)->void:::Sets the designated parameter to the given Java byte value
java.sql.CallableStatement#setShort(String, short)->void:::Sets the designated parameter to the given Java short value
java.sql.CallableStatement#setInt(String, int)->void:::Sets the designated parameter to the given Java int value
java.sql.CallableStatement#setLong(String, long)->void:::Sets the designated parameter to the given Java long value
java.sql.CallableStatement#setFloat(String, float)->void:::Sets the designated parameter to the given Java float value
java.sql.CallableStatement#setDouble(String, double)->void:::Sets the designated parameter to the given Java double value
java.sql.CallableStatement#setBigDecimal(String, BigDecimal)->void:::Sets the designated parameter to the given java.math.BigDecimal value
java.sql.CallableStatement#setString(String, String)->void:::Sets the designated parameter to the given Java String value
java.sql.CallableStatement#setBytes(String, byte[])->void:::Sets the designated parameter to the given Java array of bytes
java.sql.CallableStatement#setDate(String, java.sql.Date)->void:::Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application
java.sql.CallableStatement#setTime(String, java.sql.Time)->void:::Sets the designated parameter to the given java.sql.Time value
java.sql.CallableStatement#setTimestamp(String, java.sql.Timestamp)->void:::Sets the designated parameter to the given java.sql.Timestamp value
java.sql.CallableStatement#setAsciiStream(String, java.io.InputStream, int)->void:::Sets the designated parameter to the given input stream, which will have the specified number of bytes
java.sql.CallableStatement#setBinaryStream(String, java.io.InputStream, int)->void:::Sets the designated parameter to the given input stream, which will have the specified number of bytes
java.sql.CallableStatement#setObject(String, Object, int, int)->void:::Sets the value of the designated parameter with the given object
java.sql.CallableStatement#setObject(String, Object, int)->void:::Sets the value of the designated parameter with the given object
java.sql.CallableStatement#setObject(String, Object)->void:::Sets the value of the designated parameter with the given object
java.sql.CallableStatement#setCharacterStream(String, java.io.Reader, int)->void:::Sets the designated parameter to the given Reader object, which is the given number of characters long
java.sql.CallableStatement#setDate(String, java.sql.Date, Calendar)->void:::Sets the designated parameter to the given java.sql.Date value, using the given Calendar object
java.sql.CallableStatement#setTime(String, java.sql.Time, Calendar)->void:::Sets the designated parameter to the given java.sql.Time value, using the given Calendar object
java.sql.CallableStatement#setTimestamp(String, java.sql.Timestamp, Calendar)->void:::Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object
java.sql.CallableStatement#setNull(String, int, String)->void:::Sets the designated parameter to SQL NULL
java.sql.CallableStatement#getString(String)->String:::Retrieves the value of a JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language
java.sql.CallableStatement#getBoolean(String)->boolean:::Retrieves the value of a JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.
java.sql.CallableStatement#getByte(String)->byte:::Retrieves the value of a JDBC TINYINT parameter as a byte in the Java programming language.
java.sql.CallableStatement#getShort(String)->short:::Retrieves the value of a JDBC SMALLINT parameter as a short in the Java programming language.
java.sql.CallableStatement#getInt(String)->int:::Retrieves the value of a JDBC INTEGER parameter as an int in the Java programming language.
java.sql.CallableStatement#getLong(String)->long:::Retrieves the value of a JDBC BIGINT parameter as a long in the Java programming language.
java.sql.CallableStatement#getFloat(String)->float:::Retrieves the value of a JDBC FLOAT parameter as a float in the Java programming language.
java.sql.CallableStatement#getDouble(String)->double:::Retrieves the value of a JDBC DOUBLE parameter as a double in the Java programming language.
java.sql.CallableStatement#getBytes(String)->byte[]:::Retrieves the value of a JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.
java.sql.CallableStatement#getDate(String)->java.sql.Date:::Retrieves the value of a JDBC DATE parameter as a java.sql.Date object.
java.sql.CallableStatement#getTime(String)->java.sql.Time:::Retrieves the value of a JDBC TIME parameter as a java.sql.Time object.
java.sql.CallableStatement#getTimestamp(String)->java.sql.Timestamp:::Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object.
java.sql.CallableStatement#getObject(String)->Object:::Retrieves the value of a parameter as an Object in the Java programming language
java.sql.CallableStatement#getBigDecimal(String)->BigDecimal:::Retrieves the value of a JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.
java.sql.CallableStatement#getObject(String, java.util.Map>)->Object:::Returns an object representing the value of OUT parameter parameterName and uses map for the custom mapping of the parameter value
java.sql.CallableStatement#getRef(String)->Ref:::Retrieves the value of a JDBC REF(&lt;structured-type&gt;) parameter as a java.sql.Ref object in the Java programming language.
java.sql.CallableStatement#getBlob(String)->Blob:::Retrieves the value of a JDBC BLOB parameter as a java.sql.Blob object in the Java programming language.
java.sql.CallableStatement#getClob(String)->Clob:::Retrieves the value of a JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.
java.sql.CallableStatement#getArray(String)->Array:::Retrieves the value of a JDBC ARRAY parameter as an java.sql.Array object in the Java programming language.
java.sql.CallableStatement#getDate(String, Calendar)->java.sql.Date:::Retrieves the value of a JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date
java.sql.CallableStatement#getTime(String, Calendar)->java.sql.Time:::Retrieves the value of a JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time
java.sql.CallableStatement#getTimestamp(String, Calendar)->java.sql.Timestamp:::Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object
java.sql.CallableStatement#getURL(String)->java.net.URL:::Retrieves the value of a JDBC DATALINK parameter as a java.net.URL object.
java.sql.CallableStatement#getRowId(int)->RowId:::Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.
java.sql.CallableStatement#getRowId(String)->RowId:::Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.
java.sql.CallableStatement#setRowId(String, RowId)->void:::Sets the designated parameter to the given java.sql.RowId object
java.sql.CallableStatement#setNString(String, String)->void:::Sets the designated parameter to the given String object
java.sql.CallableStatement#setNCharacterStream(String, Reader, long)->void:::Sets the designated parameter to a Reader object
java.sql.CallableStatement#setNClob(String, NClob)->void:::Sets the designated parameter to a java.sql.NClob object
java.sql.CallableStatement#setClob(String, Reader, long)->void:::Sets the designated parameter to a Reader object
java.sql.CallableStatement#setBlob(String, InputStream, long)->void:::Sets the designated parameter to an InputStream object
java.sql.CallableStatement#setNClob(String, Reader, long)->void:::Sets the designated parameter to a Reader object
java.sql.CallableStatement#getNClob(int)->NClob:::Retrieves the value of the designated JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.
java.sql.CallableStatement#getNClob(String)->NClob:::Retrieves the value of a JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.
java.sql.CallableStatement#setSQLXML(String, SQLXML)->void:::Sets the designated parameter to the given java.sql.SQLXML object
java.sql.CallableStatement#getSQLXML(int)->SQLXML:::Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.
java.sql.CallableStatement#getSQLXML(String)->SQLXML:::Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.
java.sql.CallableStatement#getNString(int)->String:::Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language
java.sql.CallableStatement#getNString(String)->String::: Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language
java.sql.CallableStatement#getNCharacterStream(int)->java.io.Reader:::Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language
java.sql.CallableStatement#getNCharacterStream(String)->java.io.Reader:::Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language
java.sql.CallableStatement#getCharacterStream(int)->java.io.Reader:::Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.
java.sql.CallableStatement#getCharacterStream(String)->java.io.Reader:::Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.
java.sql.CallableStatement#setBlob(String, Blob)->void:::Sets the designated parameter to the given java.sql.Blob object
java.sql.CallableStatement#setClob(String, Clob)->void:::Sets the designated parameter to the given java.sql.Clob object
java.sql.CallableStatement#setAsciiStream(String, java.io.InputStream, long)->void:::Sets the designated parameter to the given input stream, which will have the specified number of bytes
java.sql.CallableStatement#setBinaryStream(String, java.io.InputStream, long)->void:::Sets the designated parameter to the given input stream, which will have the specified number of bytes
java.sql.CallableStatement#setCharacterStream(String, java.io.Reader, long)->void:::Sets the designated parameter to the given Reader object, which is the given number of characters long
java.sql.CallableStatement#setAsciiStream(String, java.io.InputStream)->void:::Sets the designated parameter to the given input stream
java.sql.CallableStatement#setBinaryStream(String, java.io.InputStream)->void:::Sets the designated parameter to the given input stream
java.sql.CallableStatement#setCharacterStream(String, java.io.Reader)->void:::Sets the designated parameter to the given Reader object
java.sql.CallableStatement#setNCharacterStream(String, Reader)->void:::Sets the designated parameter to a Reader object
java.sql.CallableStatement#setClob(String, Reader)->void:::Sets the designated parameter to a Reader object
java.sql.CallableStatement#setBlob(String, InputStream)->void:::Sets the designated parameter to an InputStream object
java.sql.CallableStatement#setNClob(String, Reader)->void:::Sets the designated parameter to a Reader object
java.sql.CallableStatement#getObject(int, Class)->T:::Returns an object representing the value of OUT parameter parameterIndex and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported
java.sql.CallableStatement#getObject(String, Class)->T:::Returns an object representing the value of OUT parameter parameterName and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported
java.sql.CallableStatement#setObject(String, Object, SQLType, int)->void:::Sets the value of the designated parameter with the given object
java.sql.CallableStatement#setObject(String, Object, SQLType)->void:::Sets the value of the designated parameter with the given object
java.sql.CallableStatement#registerOutParameter(int, SQLType)->void:::Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType
java.sql.CallableStatement#registerOutParameter(int, SQLType, int)->void:::Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType
java.sql.CallableStatement#registerOutParameter(int, SQLType, String)->void:::Registers the designated output parameter
java.sql.CallableStatement#registerOutParameter(String, SQLType)->void:::Registers the OUT parameter named parameterName to the JDBC type sqlType
java.sql.CallableStatement#registerOutParameter(String, SQLType, int)->void:::Registers the parameter named parameterName to be of JDBC type sqlType
java.sql.CallableStatement#registerOutParameter(String, SQLType, String)->void:::Registers the designated output parameter
java.sql.Clob#length()->long:::Retrieves the number of characters in the CLOB value designated by this Clob object.
java.sql.Clob#getSubString(long, int)->String:::Retrieves a copy of the specified substring in the CLOB value designated by this Clob object
java.sql.Clob#getCharacterStream()->java.io.Reader:::Retrieves the CLOB value designated by this Clob object as a java.io.Reader object (or as a stream of characters).
java.sql.Clob#getAsciiStream()->java.io.InputStream:::Retrieves the CLOB value designated by this Clob object as an ascii stream.
java.sql.Clob#position(String, long)->long:::Retrieves the character position at which the specified substring searchstr appears in the SQL CLOB value represented by this Clob object
java.sql.Clob#position(Clob, long)->long:::Retrieves the character position at which the specified Clob object searchstr appears in this Clob object
java.sql.Clob#setString(long, String)->int:::Writes the given Java String to the CLOB value that this Clob object designates at the position pos
java.sql.Clob#setString(long, String, int, int)->int:::Writes len characters of str, starting at character offset, to the CLOB value that this Clob represents
java.sql.Clob#setAsciiStream(long)->java.io.OutputStream:::Retrieves a stream to be used to write Ascii characters to the CLOB value that this Clob object represents, starting at position pos
java.sql.Clob#setCharacterStream(long)->java.io.Writer:::Retrieves a stream to be used to write a stream of Unicode characters to the CLOB value that this Clob object represents, at position pos
java.sql.Clob#truncate(long)->void:::Truncates the CLOB value that this Clob designates to have a length of len characters
java.sql.Clob#free()->void:::This method releases the resources that the Clob object holds
java.sql.Clob#getCharacterStream(long, long)->Reader:::Returns a Reader object that contains a partial Clob value, starting with the character specified by pos, which is length characters in length.
java.sql.Connection#createStatement()->Statement:::Creates a Statement object for sending SQL statements to the database
java.sql.Connection#prepareStatement(String)->PreparedStatement:::Creates a PreparedStatement object for sending parameterized SQL statements to the database
java.sql.Connection#prepareCall(String)->CallableStatement:::Creates a CallableStatement object for calling database stored procedures
java.sql.Connection#nativeSQL(String)->String:::Converts the given SQL statement into the system's native SQL grammar
java.sql.Connection#setAutoCommit(boolean)->void:::Sets this connection's auto-commit mode to the given state
java.sql.Connection#getAutoCommit()->boolean:::Retrieves the current auto-commit mode for this Connection object.
java.sql.Connection#commit()->void:::Makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this Connection object
java.sql.Connection#rollback()->void:::Undoes all changes made in the current transaction and releases any database locks currently held by this Connection object
java.sql.Connection#close()->void:::Releases this Connection object's database and JDBC resources immediately instead of waiting for them to be automatically released
java.sql.Connection#isClosed()->boolean:::Retrieves whether this Connection object has been closed
java.sql.Connection#getMetaData()->DatabaseMetaData:::Retrieves a DatabaseMetaData object that contains metadata about the database to which this Connection object represents a connection
java.sql.Connection#setReadOnly(boolean)->void:::Puts this connection in read-only mode as a hint to the driver to enable database optimizations
java.sql.Connection#isReadOnly()->boolean:::Retrieves whether this Connection object is in read-only mode.
java.sql.Connection#setCatalog(String)->void:::Sets the given catalog name in order to select a subspace of this Connection object's database in which to work
java.sql.Connection#getCatalog()->String:::Retrieves this Connection object's current catalog name.
java.sql.Connection#setTransactionIsolation(int)->void:::Attempts to change the transaction isolation level for this Connection object to the one given
java.sql.Connection#getTransactionIsolation()->int:::Retrieves this Connection object's current transaction isolation level.
java.sql.Connection#getWarnings()->SQLWarning:::Retrieves the first warning reported by calls on this Connection object
java.sql.Connection#clearWarnings()->void:::Clears all warnings reported for this Connection object
java.sql.Connection#createStatement(int, int)->Statement:::Creates a Statement object that will generate ResultSet objects with the given type and concurrency
java.sql.Connection#prepareStatement(String, int, int)->PreparedStatement:::Creates a PreparedStatement object that will generate ResultSet objects with the given type and concurrency
java.sql.Connection#prepareCall(String, int, int)->CallableStatement:::Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency
java.sql.Connection#getTypeMap()->java.util.Map>:::Retrieves the Map object associated with this Connection object
java.sql.Connection#setTypeMap(java.util.Map>)->void:::Installs the given TypeMap object as the type map for this Connection object
java.sql.Connection#setHoldability(int)->void:::Changes the default holdability of ResultSet objects created using this Connection object to the given holdability
java.sql.Connection#getHoldability()->int:::Retrieves the current holdability of ResultSet objects created using this Connection object.
java.sql.Connection#setSavepoint()->Savepoint:::Creates an unnamed savepoint in the current transaction and returns the new Savepoint object that represents it
java.sql.Connection#setSavepoint(String)->Savepoint:::Creates a savepoint with the given name in the current transaction and returns the new Savepoint object that represents it
java.sql.Connection#rollback(Savepoint)->void:::Undoes all changes made after the given Savepoint object was set
java.sql.Connection#releaseSavepoint(Savepoint)->void:::Removes the specified Savepoint  and subsequent Savepoint objects from the current transaction
java.sql.Connection#createStatement(int, int, int)->Statement:::Creates a Statement object that will generate ResultSet objects with the given type, concurrency, and holdability
java.sql.Connection#prepareStatement(String, int, int, int)->PreparedStatement:::Creates a PreparedStatement object that will generate ResultSet objects with the given type, concurrency, and holdability
java.sql.Connection#prepareCall(String, int, int, int)->CallableStatement:::Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency
java.sql.Connection#prepareStatement(String, int)->PreparedStatement:::Creates a default PreparedStatement object that has the capability to retrieve auto-generated keys
java.sql.Connection#prepareStatement(String, int[])->PreparedStatement:::Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array
java.sql.Connection#prepareStatement(String, String[])->PreparedStatement:::Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array
java.sql.Connection#createClob()->Clob:::Constructs an object that implements the Clob interface
java.sql.Connection#createBlob()->Blob:::Constructs an object that implements the Blob interface
java.sql.Connection#createNClob()->NClob:::Constructs an object that implements the NClob interface
java.sql.Connection#createSQLXML()->SQLXML:::Constructs an object that implements the SQLXML interface
java.sql.Connection#isValid(int)->boolean:::Returns true if the connection has not been closed and is still valid
java.sql.Connection#setClientInfo(String, String)->void:::Sets the value of the client info property specified by name to the value specified by value
java.sql.Connection#setClientInfo(Properties)->void:::Sets the value of the connection's client info properties
java.sql.Connection#getClientInfo(String)->String:::Returns the value of the client info property specified by name
java.sql.Connection#getClientInfo()->Properties:::Returns a list containing the name and current value of each client info property supported by the driver
java.sql.Connection#createArrayOf(String, Object[])->Array:::Factory method for creating Array objects
java.sql.Connection#createStruct(String, Object[])->Struct:::Factory method for creating Struct objects.
java.sql.Connection#setSchema(String)->void:::Sets the given schema name to access
java.sql.Connection#getSchema()->String:::Retrieves this Connection object's current schema name.
java.sql.Connection#abort(Executor)->void:::Terminates an open connection
java.sql.Connection#setNetworkTimeout(Executor, int)->void:::Sets the maximum period a Connection or objects created from the Connection will wait for the database to reply to any one request
java.sql.Connection#getNetworkTimeout()->int:::Retrieves the number of milliseconds the driver will wait for a database request to complete
java.sql.Connection#beginRequest()->void:::Hints to the driver that a request, an independent unit of work, is beginning on this connection
java.sql.Connection#endRequest()->void:::Hints to the driver that a request, an independent unit of work, has completed
java.sql.Connection#setShardingKeyIfValid(ShardingKey, ShardingKey, int)->boolean:::Sets and validates the sharding keys for this connection
java.sql.Connection#setShardingKeyIfValid(ShardingKey, int)->boolean:::Sets and validates the sharding key for this connection
java.sql.Connection#setShardingKey(ShardingKey, ShardingKey)->void:::Specifies a shardingKey and superShardingKey to use with this Connection
java.sql.Connection#setShardingKey(ShardingKey)->void:::Specifies a shardingKey to use with this Connection
java.sql.ConnectionBuilder#user(String)->ConnectionBuilder:::Specifies the username to be used when creating a connection
java.sql.ConnectionBuilder#password(String)->ConnectionBuilder:::Specifies the password to be used when creating a connection
java.sql.ConnectionBuilder#shardingKey(ShardingKey)->ConnectionBuilder:::Specifies a shardingKey to be used when creating a connection
java.sql.ConnectionBuilder#superShardingKey(ShardingKey)->ConnectionBuilder:::Specifies a superShardingKey to be used when creating a connection
java.sql.ConnectionBuilder#build()->Connection:::Returns an instance of the object defined by this builder.
java.sql.DatabaseMetaData#allProceduresAreCallable()->boolean:::Retrieves whether the current user can call all the procedures returned by the method getProcedures.
java.sql.DatabaseMetaData#allTablesAreSelectable()->boolean:::Retrieves whether the current user can use all the tables returned by the method getTables in a SELECT statement.
java.sql.DatabaseMetaData#getURL()->String:::Retrieves the URL for this DBMS.
java.sql.DatabaseMetaData#getUserName()->String:::Retrieves the user name as known to this database.
java.sql.DatabaseMetaData#isReadOnly()->boolean:::Retrieves whether this database is in read-only mode.
java.sql.DatabaseMetaData#nullsAreSortedHigh()->boolean:::Retrieves whether NULL values are sorted high
java.sql.DatabaseMetaData#nullsAreSortedLow()->boolean:::Retrieves whether NULL values are sorted low
java.sql.DatabaseMetaData#nullsAreSortedAtStart()->boolean:::Retrieves whether NULL values are sorted at the start regardless of sort order.
java.sql.DatabaseMetaData#nullsAreSortedAtEnd()->boolean:::Retrieves whether NULL values are sorted at the end regardless of sort order.
java.sql.DatabaseMetaData#getDatabaseProductName()->String:::Retrieves the name of this database product.
java.sql.DatabaseMetaData#getDatabaseProductVersion()->String:::Retrieves the version number of this database product.
java.sql.DatabaseMetaData#getDriverName()->String:::Retrieves the name of this JDBC driver.
java.sql.DatabaseMetaData#getDriverVersion()->String:::Retrieves the version number of this JDBC driver as a String.
java.sql.DatabaseMetaData#getDriverMajorVersion()->int:::Retrieves this JDBC driver's major version number.
java.sql.DatabaseMetaData#getDriverMinorVersion()->int:::Retrieves this JDBC driver's minor version number.
java.sql.DatabaseMetaData#usesLocalFiles()->boolean:::Retrieves whether this database stores tables in a local file.
java.sql.DatabaseMetaData#usesLocalFilePerTable()->boolean:::Retrieves whether this database uses a file for each table.
java.sql.DatabaseMetaData#supportsMixedCaseIdentifiers()->boolean:::Retrieves whether this database treats mixed case unquoted SQL identifiers as case sensitive and as a result stores them in mixed case.
java.sql.DatabaseMetaData#storesUpperCaseIdentifiers()->boolean:::Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in upper case.
java.sql.DatabaseMetaData#storesLowerCaseIdentifiers()->boolean:::Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in lower case.
java.sql.DatabaseMetaData#storesMixedCaseIdentifiers()->boolean:::Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in mixed case.
java.sql.DatabaseMetaData#supportsMixedCaseQuotedIdentifiers()->boolean:::Retrieves whether this database treats mixed case quoted SQL identifiers as case sensitive and as a result stores them in mixed case.
java.sql.DatabaseMetaData#storesUpperCaseQuotedIdentifiers()->boolean:::Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in upper case.
java.sql.DatabaseMetaData#storesLowerCaseQuotedIdentifiers()->boolean:::Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in lower case.
java.sql.DatabaseMetaData#storesMixedCaseQuotedIdentifiers()->boolean:::Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in mixed case.
java.sql.DatabaseMetaData#getIdentifierQuoteString()->String:::Retrieves the string used to quote SQL identifiers
java.sql.DatabaseMetaData#getSQLKeywords()->String:::Retrieves a comma-separated list of all of this database's SQL keywords that are NOT also SQL:2003 keywords.
java.sql.DatabaseMetaData#getNumericFunctions()->String:::Retrieves a comma-separated list of math functions available with this database
java.sql.DatabaseMetaData#getStringFunctions()->String:::Retrieves a comma-separated list of string functions available with this database
java.sql.DatabaseMetaData#getSystemFunctions()->String:::Retrieves a comma-separated list of system functions available with this database
java.sql.DatabaseMetaData#getTimeDateFunctions()->String:::Retrieves a comma-separated list of the time and date functions available with this database.
java.sql.DatabaseMetaData#getSearchStringEscape()->String:::Retrieves the string that can be used to escape wildcard characters
java.sql.DatabaseMetaData#getExtraNameCharacters()->String:::Retrieves all the "extra" characters that can be used in unquoted identifier names (those beyond a-z, A-Z, 0-9 and _).
java.sql.DatabaseMetaData#supportsAlterTableWithAddColumn()->boolean:::Retrieves whether this database supports ALTER TABLE with add column.
java.sql.DatabaseMetaData#supportsAlterTableWithDropColumn()->boolean:::Retrieves whether this database supports ALTER TABLE with drop column.
java.sql.DatabaseMetaData#supportsColumnAliasing()->boolean:::Retrieves whether this database supports column aliasing
java.sql.DatabaseMetaData#nullPlusNonNullIsNull()->boolean:::Retrieves whether this database supports concatenations between NULL and non-NULL values being NULL.
java.sql.DatabaseMetaData#supportsConvert()->boolean:::Retrieves whether this database supports the JDBC scalar function CONVERT for the conversion of one JDBC type to another
java.sql.DatabaseMetaData#supportsConvert(int, int)->boolean:::Retrieves whether this database supports the JDBC scalar function CONVERT for conversions between the JDBC types fromType and toType
java.sql.DatabaseMetaData#supportsTableCorrelationNames()->boolean:::Retrieves whether this database supports table correlation names.
java.sql.DatabaseMetaData#supportsDifferentTableCorrelationNames()->boolean:::Retrieves whether, when table correlation names are supported, they are restricted to being different from the names of the tables.
java.sql.DatabaseMetaData#supportsExpressionsInOrderBy()->boolean:::Retrieves whether this database supports expressions in ORDER BY lists.
java.sql.DatabaseMetaData#supportsOrderByUnrelated()->boolean:::Retrieves whether this database supports using a column that is not in the SELECT statement in an ORDER BY clause.
java.sql.DatabaseMetaData#supportsGroupBy()->boolean:::Retrieves whether this database supports some form of GROUP BY clause.
java.sql.DatabaseMetaData#supportsGroupByUnrelated()->boolean:::Retrieves whether this database supports using a column that is not in the SELECT statement in a GROUP BY clause.
java.sql.DatabaseMetaData#supportsGroupByBeyondSelect()->boolean:::Retrieves whether this database supports using columns not included in the SELECT statement in a GROUP BY clause provided that all of the columns in the SELECT statement are included in the GROUP BY clause.
java.sql.DatabaseMetaData#supportsLikeEscapeClause()->boolean:::Retrieves whether this database supports specifying a LIKE escape clause.
java.sql.DatabaseMetaData#supportsMultipleResultSets()->boolean:::Retrieves whether this database supports getting multiple ResultSet objects from a single call to the method execute.
java.sql.DatabaseMetaData#supportsMultipleTransactions()->boolean:::Retrieves whether this database allows having multiple transactions open at once (on different connections).
java.sql.DatabaseMetaData#supportsNonNullableColumns()->boolean:::Retrieves whether columns in this database may be defined as non-nullable.
java.sql.DatabaseMetaData#supportsMinimumSQLGrammar()->boolean:::Retrieves whether this database supports the ODBC Minimum SQL grammar.
java.sql.DatabaseMetaData#supportsCoreSQLGrammar()->boolean:::Retrieves whether this database supports the ODBC Core SQL grammar.
java.sql.DatabaseMetaData#supportsExtendedSQLGrammar()->boolean:::Retrieves whether this database supports the ODBC Extended SQL grammar.
java.sql.DatabaseMetaData#supportsANSI92EntryLevelSQL()->boolean:::Retrieves whether this database supports the ANSI92 entry level SQL grammar.
java.sql.DatabaseMetaData#supportsANSI92IntermediateSQL()->boolean:::Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.
java.sql.DatabaseMetaData#supportsANSI92FullSQL()->boolean:::Retrieves whether this database supports the ANSI92 full SQL grammar supported.
java.sql.DatabaseMetaData#supportsIntegrityEnhancementFacility()->boolean:::Retrieves whether this database supports the SQL Integrity Enhancement Facility.
java.sql.DatabaseMetaData#supportsOuterJoins()->boolean:::Retrieves whether this database supports some form of outer join.
java.sql.DatabaseMetaData#supportsFullOuterJoins()->boolean:::Retrieves whether this database supports full nested outer joins.
java.sql.DatabaseMetaData#supportsLimitedOuterJoins()->boolean:::Retrieves whether this database provides limited support for outer joins
java.sql.DatabaseMetaData#getSchemaTerm()->String:::Retrieves the database vendor's preferred term for "schema".
java.sql.DatabaseMetaData#getProcedureTerm()->String:::Retrieves the database vendor's preferred term for "procedure".
java.sql.DatabaseMetaData#getCatalogTerm()->String:::Retrieves the database vendor's preferred term for "catalog".
java.sql.DatabaseMetaData#isCatalogAtStart()->boolean:::Retrieves whether a catalog appears at the start of a fully qualified table name
java.sql.DatabaseMetaData#getCatalogSeparator()->String:::Retrieves the String that this database uses as the separator between a catalog and table name.
java.sql.DatabaseMetaData#supportsSchemasInDataManipulation()->boolean:::Retrieves whether a schema name can be used in a data manipulation statement.
java.sql.DatabaseMetaData#supportsSchemasInProcedureCalls()->boolean:::Retrieves whether a schema name can be used in a procedure call statement.
java.sql.DatabaseMetaData#supportsSchemasInTableDefinitions()->boolean:::Retrieves whether a schema name can be used in a table definition statement.
java.sql.DatabaseMetaData#supportsSchemasInIndexDefinitions()->boolean:::Retrieves whether a schema name can be used in an index definition statement.
java.sql.DatabaseMetaData#supportsSchemasInPrivilegeDefinitions()->boolean:::Retrieves whether a schema name can be used in a privilege definition statement.
java.sql.DatabaseMetaData#supportsCatalogsInDataManipulation()->boolean:::Retrieves whether a catalog name can be used in a data manipulation statement.
java.sql.DatabaseMetaData#supportsCatalogsInProcedureCalls()->boolean:::Retrieves whether a catalog name can be used in a procedure call statement.
java.sql.DatabaseMetaData#supportsCatalogsInTableDefinitions()->boolean:::Retrieves whether a catalog name can be used in a table definition statement.
java.sql.DatabaseMetaData#supportsCatalogsInIndexDefinitions()->boolean:::Retrieves whether a catalog name can be used in an index definition statement.
java.sql.DatabaseMetaData#supportsCatalogsInPrivilegeDefinitions()->boolean:::Retrieves whether a catalog name can be used in a privilege definition statement.
java.sql.DatabaseMetaData#supportsPositionedDelete()->boolean:::Retrieves whether this database supports positioned DELETE statements.
java.sql.DatabaseMetaData#supportsPositionedUpdate()->boolean:::Retrieves whether this database supports positioned UPDATE statements.
java.sql.DatabaseMetaData#supportsSelectForUpdate()->boolean:::Retrieves whether this database supports SELECT FOR UPDATE statements.
java.sql.DatabaseMetaData#supportsStoredProcedures()->boolean:::Retrieves whether this database supports stored procedure calls that use the stored procedure escape syntax.
java.sql.DatabaseMetaData#supportsSubqueriesInComparisons()->boolean:::Retrieves whether this database supports subqueries in comparison expressions.
java.sql.DatabaseMetaData#supportsSubqueriesInExists()->boolean:::Retrieves whether this database supports subqueries in EXISTS expressions.
java.sql.DatabaseMetaData#supportsSubqueriesInIns()->boolean:::Retrieves whether this database supports subqueries in IN expressions.
java.sql.DatabaseMetaData#supportsSubqueriesInQuantifieds()->boolean:::Retrieves whether this database supports subqueries in quantified expressions.
java.sql.DatabaseMetaData#supportsCorrelatedSubqueries()->boolean:::Retrieves whether this database supports correlated subqueries.
java.sql.DatabaseMetaData#supportsUnion()->boolean:::Retrieves whether this database supports SQL UNION.
java.sql.DatabaseMetaData#supportsUnionAll()->boolean:::Retrieves whether this database supports SQL UNION ALL.
java.sql.DatabaseMetaData#supportsOpenCursorsAcrossCommit()->boolean:::Retrieves whether this database supports keeping cursors open across commits.
java.sql.DatabaseMetaData#supportsOpenCursorsAcrossRollback()->boolean:::Retrieves whether this database supports keeping cursors open across rollbacks.
java.sql.DatabaseMetaData#supportsOpenStatementsAcrossCommit()->boolean:::Retrieves whether this database supports keeping statements open across commits.
java.sql.DatabaseMetaData#supportsOpenStatementsAcrossRollback()->boolean:::Retrieves whether this database supports keeping statements open across rollbacks.
java.sql.DatabaseMetaData#getMaxBinaryLiteralLength()->int:::Retrieves the maximum number of hex characters this database allows in an inline binary literal.
java.sql.DatabaseMetaData#getMaxCharLiteralLength()->int:::Retrieves the maximum number of characters this database allows for a character literal.
java.sql.DatabaseMetaData#getMaxColumnNameLength()->int:::Retrieves the maximum number of characters this database allows for a column name.
java.sql.DatabaseMetaData#getMaxColumnsInGroupBy()->int:::Retrieves the maximum number of columns this database allows in a GROUP BY clause.
java.sql.DatabaseMetaData#getMaxColumnsInIndex()->int:::Retrieves the maximum number of columns this database allows in an index.
java.sql.DatabaseMetaData#getMaxColumnsInOrderBy()->int:::Retrieves the maximum number of columns this database allows in an ORDER BY clause.
java.sql.DatabaseMetaData#getMaxColumnsInSelect()->int:::Retrieves the maximum number of columns this database allows in a SELECT list.
java.sql.DatabaseMetaData#getMaxColumnsInTable()->int:::Retrieves the maximum number of columns this database allows in a table.
java.sql.DatabaseMetaData#getMaxConnections()->int:::Retrieves the maximum number of concurrent connections to this database that are possible.
java.sql.DatabaseMetaData#getMaxCursorNameLength()->int:::Retrieves the maximum number of characters that this database allows in a cursor name.
java.sql.DatabaseMetaData#getMaxIndexLength()->int:::Retrieves the maximum number of bytes this database allows for an index, including all of the parts of the index.
java.sql.DatabaseMetaData#getMaxSchemaNameLength()->int:::Retrieves the maximum number of characters that this database allows in a schema name.
java.sql.DatabaseMetaData#getMaxProcedureNameLength()->int:::Retrieves the maximum number of characters that this database allows in a procedure name.
java.sql.DatabaseMetaData#getMaxCatalogNameLength()->int:::Retrieves the maximum number of characters that this database allows in a catalog name.
java.sql.DatabaseMetaData#getMaxRowSize()->int:::Retrieves the maximum number of bytes this database allows in a single row.
java.sql.DatabaseMetaData#doesMaxRowSizeIncludeBlobs()->boolean:::Retrieves whether the return value for the method getMaxRowSize includes the SQL data types LONGVARCHAR and LONGVARBINARY.
java.sql.DatabaseMetaData#getMaxStatementLength()->int:::Retrieves the maximum number of characters this database allows in an SQL statement.
java.sql.DatabaseMetaData#getMaxStatements()->int:::Retrieves the maximum number of active statements to this database that can be open at the same time.
java.sql.DatabaseMetaData#getMaxTableNameLength()->int:::Retrieves the maximum number of characters this database allows in a table name.
java.sql.DatabaseMetaData#getMaxTablesInSelect()->int:::Retrieves the maximum number of tables this database allows in a SELECT statement.
java.sql.DatabaseMetaData#getMaxUserNameLength()->int:::Retrieves the maximum number of characters this database allows in a user name.
java.sql.DatabaseMetaData#getDefaultTransactionIsolation()->int:::Retrieves this database's default transaction isolation level
java.sql.DatabaseMetaData#supportsTransactions()->boolean:::Retrieves whether this database supports transactions
java.sql.DatabaseMetaData#supportsTransactionIsolationLevel(int)->boolean:::Retrieves whether this database supports the given transaction isolation level.
java.sql.DatabaseMetaData#supportsDataDefinitionAndDataManipulationTransactions()->boolean:::Retrieves whether this database supports both data definition and data manipulation statements within a transaction.
java.sql.DatabaseMetaData#supportsDataManipulationTransactionsOnly()->boolean:::Retrieves whether this database supports only data manipulation statements within a transaction.
java.sql.DatabaseMetaData#dataDefinitionCausesTransactionCommit()->boolean:::Retrieves whether a data definition statement within a transaction forces the transaction to commit.
java.sql.DatabaseMetaData#dataDefinitionIgnoredInTransactions()->boolean:::Retrieves whether this database ignores a data definition statement within a transaction.
java.sql.DatabaseMetaData#getProcedures(String, String, String)->ResultSet:::Retrieves a description of the stored procedures available in the given catalog
java.sql.DatabaseMetaData#getProcedureColumns(String, String, String, String)->ResultSet:::Retrieves a description of the given catalog's stored procedure parameter and result columns
java.sql.DatabaseMetaData#getTables(String, String, String, String[])->ResultSet:::Retrieves a description of the tables available in the given catalog
java.sql.DatabaseMetaData#getSchemas()->ResultSet:::Retrieves the schema names available in this database
java.sql.DatabaseMetaData#getCatalogs()->ResultSet:::Retrieves the catalog names available in this database
java.sql.DatabaseMetaData#getTableTypes()->ResultSet:::Retrieves the table types available in this database
java.sql.DatabaseMetaData#getColumns(String, String, String, String)->ResultSet:::Retrieves a description of table columns available in the specified catalog
java.sql.DatabaseMetaData#getColumnPrivileges(String, String, String, String)->ResultSet:::Retrieves a description of the access rights for a table's columns
java.sql.DatabaseMetaData#getTablePrivileges(String, String, String)->ResultSet:::Retrieves a description of the access rights for each table available in a catalog
java.sql.DatabaseMetaData#getBestRowIdentifier(String, String, String, int, boolean)->ResultSet:::Retrieves a description of a table's optimal set of columns that uniquely identifies a row
java.sql.DatabaseMetaData#getVersionColumns(String, String, String)->ResultSet:::Retrieves a description of a table's columns that are automatically updated when any value in a row is updated
java.sql.DatabaseMetaData#getPrimaryKeys(String, String, String)->ResultSet:::Retrieves a description of the given table's primary key columns
java.sql.DatabaseMetaData#getImportedKeys(String, String, String)->ResultSet:::Retrieves a description of the primary key columns that are referenced by the given table's foreign key columns (the primary keys imported by a table)
java.sql.DatabaseMetaData#getExportedKeys(String, String, String)->ResultSet:::Retrieves a description of the foreign key columns that reference the given table's primary key columns (the foreign keys exported by a table)
java.sql.DatabaseMetaData#getCrossReference(String, String, String, String, String, String)->ResultSet:::Retrieves a description of the foreign key columns in the given foreign key table that reference the primary key or the columns representing a unique constraint of the  parent table (could be the same or a different table)
java.sql.DatabaseMetaData#getTypeInfo()->ResultSet:::Retrieves a description of all the data types supported by this database
java.sql.DatabaseMetaData#getIndexInfo(String, String, String, boolean, boolean)->ResultSet:::Retrieves a description of the given table's indices and statistics
java.sql.DatabaseMetaData#supportsResultSetType(int)->boolean:::Retrieves whether this database supports the given result set type.
java.sql.DatabaseMetaData#supportsResultSetConcurrency(int, int)->boolean:::Retrieves whether this database supports the given concurrency type in combination with the given result set type.
java.sql.DatabaseMetaData#ownUpdatesAreVisible(int)->boolean:::Retrieves whether for the given type of ResultSet object, the result set's own updates are visible.
java.sql.DatabaseMetaData#ownDeletesAreVisible(int)->boolean:::Retrieves whether a result set's own deletes are visible.
java.sql.DatabaseMetaData#ownInsertsAreVisible(int)->boolean:::Retrieves whether a result set's own inserts are visible.
java.sql.DatabaseMetaData#othersUpdatesAreVisible(int)->boolean:::Retrieves whether updates made by others are visible.
java.sql.DatabaseMetaData#othersDeletesAreVisible(int)->boolean:::Retrieves whether deletes made by others are visible.
java.sql.DatabaseMetaData#othersInsertsAreVisible(int)->boolean:::Retrieves whether inserts made by others are visible.
java.sql.DatabaseMetaData#updatesAreDetected(int)->boolean:::Retrieves whether or not a visible row update can be detected by calling the method ResultSet.rowUpdated.
java.sql.DatabaseMetaData#deletesAreDetected(int)->boolean:::Retrieves whether or not a visible row delete can be detected by calling the method ResultSet.rowDeleted
java.sql.DatabaseMetaData#insertsAreDetected(int)->boolean:::Retrieves whether or not a visible row insert can be detected by calling the method ResultSet.rowInserted.
java.sql.DatabaseMetaData#supportsBatchUpdates()->boolean:::Retrieves whether this database supports batch updates.
java.sql.DatabaseMetaData#getUDTs(String, String, String, int[])->ResultSet:::Retrieves a description of the user-defined types (UDTs) defined in a particular schema
java.sql.DatabaseMetaData#getConnection()->Connection:::Retrieves the connection that produced this metadata object.
java.sql.DatabaseMetaData#supportsSavepoints()->boolean:::Retrieves whether this database supports savepoints.
java.sql.DatabaseMetaData#supportsNamedParameters()->boolean:::Retrieves whether this database supports named parameters to callable statements.
java.sql.DatabaseMetaData#supportsMultipleOpenResults()->boolean:::Retrieves whether it is possible to have multiple ResultSet objects returned from a CallableStatement object simultaneously.
java.sql.DatabaseMetaData#supportsGetGeneratedKeys()->boolean:::Retrieves whether auto-generated keys can be retrieved after a statement has been executed
java.sql.DatabaseMetaData#getSuperTypes(String, String, String)->ResultSet:::Retrieves a description of the user-defined type (UDT) hierarchies defined in a particular schema in this database
java.sql.DatabaseMetaData#getSuperTables(String, String, String)->ResultSet:::Retrieves a description of the table hierarchies defined in a particular schema in this database
java.sql.DatabaseMetaData#getAttributes(String, String, String, String)->ResultSet:::Retrieves a description of the given attribute of the given type for a user-defined type (UDT) that is available in the given schema and catalog
java.sql.DatabaseMetaData#supportsResultSetHoldability(int)->boolean:::Retrieves whether this database supports the given result set holdability.
java.sql.DatabaseMetaData#getResultSetHoldability()->int:::Retrieves this database's default holdability for ResultSet objects.
java.sql.DatabaseMetaData#getDatabaseMajorVersion()->int:::Retrieves the major version number of the underlying database.
java.sql.DatabaseMetaData#getDatabaseMinorVersion()->int:::Retrieves the minor version number of the underlying database.
java.sql.DatabaseMetaData#getJDBCMajorVersion()->int:::Retrieves the major JDBC version number for this driver.
java.sql.DatabaseMetaData#getJDBCMinorVersion()->int:::Retrieves the minor JDBC version number for this driver.
java.sql.DatabaseMetaData#getSQLStateType()->int:::Indicates whether the SQLSTATE returned by SQLException.getSQLState is X/Open (now known as Open Group) SQL CLI or SQL:2003.
java.sql.DatabaseMetaData#locatorsUpdateCopy()->boolean:::Indicates whether updates made to a LOB are made on a copy or directly to the LOB.
java.sql.DatabaseMetaData#supportsStatementPooling()->boolean:::Retrieves whether this database supports statement pooling.
java.sql.DatabaseMetaData#getRowIdLifetime()->RowIdLifetime:::Indicates whether this data source supports the SQL ROWID type, and the lifetime for which a RowId object remains valid.
java.sql.DatabaseMetaData#getSchemas(String, String)->ResultSet:::Retrieves the schema names available in this database
java.sql.DatabaseMetaData#supportsStoredFunctionsUsingCallSyntax()->boolean:::Retrieves whether this database supports invoking user-defined or vendor functions using the stored procedure escape syntax.
java.sql.DatabaseMetaData#autoCommitFailureClosesAllResultSets()->boolean:::Retrieves whether a SQLException while autoCommit is true indicates that all open ResultSets are closed, even ones that are holdable
java.sql.DatabaseMetaData#getClientInfoProperties()->ResultSet:::Retrieves a list of the client info properties that the driver supports
java.sql.DatabaseMetaData#getFunctions(String, String, String)->ResultSet:::Retrieves a description of the  system and user functions available in the given catalog
java.sql.DatabaseMetaData#getFunctionColumns(String, String, String, String)->ResultSet:::Retrieves a description of the given catalog's system or user function parameters and return type
java.sql.DatabaseMetaData#getPseudoColumns(String, String, String, String)->ResultSet:::Retrieves a description of the pseudo or hidden columns available in a given table within the specified catalog and schema
java.sql.DatabaseMetaData#generatedKeyAlwaysReturned()->boolean:::Retrieves whether a generated key will always be returned if the column name(s) or index(es) specified for the auto generated key column(s) are valid and the statement succeeds
java.sql.DatabaseMetaData#getMaxLogicalLobSize()->long:::Retrieves the maximum number of bytes this database allows for the logical size for a LOB
java.sql.DatabaseMetaData#supportsRefCursors()->boolean:::Retrieves whether this database supports REF CURSOR
java.sql.DatabaseMetaData#supportsSharding()->boolean:::Retrieves whether this database supports sharding.
java.sql.DataTruncation#getIndex()->int:::Retrieves the index of the column or parameter that was truncated
java.sql.DataTruncation#getParameter()->boolean:::Indicates whether the value truncated was a parameter value or a column value.
java.sql.DataTruncation#getRead()->boolean:::Indicates whether or not the value was truncated on a read.
java.sql.DataTruncation#getDataSize()->int:::Gets the number of bytes of data that should have been transferred
java.sql.DataTruncation#getTransferSize()->int:::Gets the number of bytes of data actually transferred
java.sql.Date#setTime(long)->void:::Sets an existing Date object using the given milliseconds time value
java.sql.Date#valueOf(String)->Date:::Converts a string in JDBC date escape format to a Date value.
java.sql.Date#toString()->String:::Formats a date in the date escape format yyyy-mm-dd.
java.sql.Date#formatDecimalInt(int, char[], int, int)->void:::Formats an unsigned integer into a char array in decimal output format
java.sql.Date#getHours()->int:::This method is deprecated and should not be used because SQL Date values do not have a time component.
java.sql.Date#getMinutes()->int:::This method is deprecated and should not be used because SQL Date values do not have a time component.
java.sql.Date#getSeconds()->int:::This method is deprecated and should not be used because SQL Date values do not have a time component.
java.sql.Date#setHours(int)->void:::This method is deprecated and should not be used because SQL Date values do not have a time component.
java.sql.Date#setMinutes(int)->void:::This method is deprecated and should not be used because SQL Date values do not have a time component.
java.sql.Date#setSeconds(int)->void:::This method is deprecated and should not be used because SQL Date values do not have a time component.
java.sql.Date#valueOf(LocalDate)->Date:::Obtains an instance of Date from a LocalDate object with the same year, month and day of month value as the given LocalDate
java.sql.Date#toLocalDate()->LocalDate:::Creates a LocalDate instance using the year, month and day from this Date object.
java.sql.Date#toInstant()->Instant:::This method always throws an UnsupportedOperationException and should not be used because SQL Date values do not have a time component.
java.sql.Driver#connect(String, java.util.Properties)->Connection:::Attempts to make a database connection to the given URL
java.sql.Driver#acceptsURL(String)->boolean:::Retrieves whether the driver thinks that it can open a connection to the given URL
java.sql.Driver#getPropertyInfo(String, java.util.Properties)->DriverPropertyInfo[]:::Gets information about the possible properties for this driver
java.sql.Driver#getMajorVersion()->int:::Retrieves the driver's major version number
java.sql.Driver#getMinorVersion()->int:::Gets the driver's minor version number
java.sql.Driver#jdbcCompliant()->boolean:::Reports whether this driver is a genuine JDBC Compliant&trade; driver
java.sql.Driver#getParentLogger()->Logger:::Return the parent Logger of all the Loggers used by this driver
java.sql.DriverAction#deregister()->void:::Method called by DriverManager#deregisterDriver(Driver)   to notify the JDBC driver that it was de-registered
java.sql.DriverManager#getLogWriter()->java.io.PrintWriter:::Retrieves the log writer
java.sql.DriverManager#setLogWriter(java.io.PrintWriter)->void:::Sets the logging/tracing PrintWriter object that is used by the DriverManager and all drivers
java.sql.DriverManager#getConnection(String, java.util.Properties)->Connection:::Attempts to establish a connection to the given database URL
java.sql.DriverManager#getConnection(String, String, String)->Connection:::Attempts to establish a connection to the given database URL
java.sql.DriverManager#getConnection(String)->Connection:::Attempts to establish a connection to the given database URL
java.sql.DriverManager#getDriver(String)->Driver:::Attempts to locate a driver that understands the given URL
java.sql.DriverManager#registerDriver(java.sql.Driver)->void:::Registers the given driver with the DriverManager
java.sql.DriverManager#registerDriver(java.sql.Driver, DriverAction)->void:::Registers the given driver with the DriverManager
java.sql.DriverManager#deregisterDriver(Driver)->void:::Removes the specified driver from the DriverManager's list of registered drivers
java.sql.DriverManager#getDrivers()->Enumeration:::Retrieves an Enumeration with all of the currently loaded JDBC drivers to which the current caller has access
java.sql.DriverManager#drivers()->Stream:::Retrieves a Stream with all of the currently loaded JDBC drivers to which the current caller has access.
java.sql.DriverManager#setLoginTimeout(int)->void:::Sets the maximum time in seconds that a driver will wait while attempting to connect to a database once the driver has been identified.
java.sql.DriverManager#getLoginTimeout()->int:::Gets the maximum time in seconds that a driver can wait when attempting to log in to a database.
java.sql.DriverManager#setLogStream(java.io.PrintStream)->void:::Sets the logging/tracing PrintStream that is used by the DriverManager and all drivers
java.sql.DriverManager#getLogStream()->java.io.PrintStream:::Retrieves the logging/tracing PrintStream that is used by the DriverManager and all drivers.
java.sql.DriverManager#println(String)->void:::Prints a message to the current JDBC log stream.
java.sql.DriverInfo#equals(Object)->boolean::: driver info equals
java.sql.DriverInfo#hashCode()->int::: driver info hash code
java.sql.DriverInfo#toString()->String::: driver info to string
java.sql.DriverInfo#action()->DriverAction::: driver info action
java.sql.ParameterMetaData#getParameterCount()->int:::Retrieves the number of parameters in the PreparedStatement object for which this ParameterMetaData object contains information.
java.sql.ParameterMetaData#isNullable(int)->int:::Retrieves whether null values are allowed in the designated parameter.
java.sql.ParameterMetaData#isSigned(int)->boolean:::Retrieves whether values for the designated parameter can be signed numbers.
java.sql.ParameterMetaData#getPrecision(int)->int:::Retrieves the designated parameter's specified column size
java.sql.ParameterMetaData#getScale(int)->int:::Retrieves the designated parameter's number of digits to right of the decimal point
java.sql.ParameterMetaData#getParameterType(int)->int:::Retrieves the designated parameter's SQL type.
java.sql.ParameterMetaData#getParameterTypeName(int)->String:::Retrieves the designated parameter's database-specific type name.
java.sql.ParameterMetaData#getParameterClassName(int)->String:::Retrieves the fully-qualified name of the Java class whose instances should be passed to the method PreparedStatement.setObject.
java.sql.ParameterMetaData#getParameterMode(int)->int:::Retrieves the designated parameter's mode.
java.sql.PreparedStatement#executeQuery()->ResultSet:::Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.
java.sql.PreparedStatement#executeUpdate()->int:::Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement.
java.sql.PreparedStatement#setNull(int, int)->void:::Sets the designated parameter to SQL NULL
java.sql.PreparedStatement#setBoolean(int, boolean)->void:::Sets the designated parameter to the given Java boolean value
java.sql.PreparedStatement#setByte(int, byte)->void:::Sets the designated parameter to the given Java byte value
java.sql.PreparedStatement#setShort(int, short)->void:::Sets the designated parameter to the given Java short value
java.sql.PreparedStatement#setInt(int, int)->void:::Sets the designated parameter to the given Java int value
java.sql.PreparedStatement#setLong(int, long)->void:::Sets the designated parameter to the given Java long value
java.sql.PreparedStatement#setFloat(int, float)->void:::Sets the designated parameter to the given Java float value
java.sql.PreparedStatement#setDouble(int, double)->void:::Sets the designated parameter to the given Java double value
java.sql.PreparedStatement#setBigDecimal(int, BigDecimal)->void:::Sets the designated parameter to the given java.math.BigDecimal value
java.sql.PreparedStatement#setString(int, String)->void:::Sets the designated parameter to the given Java String value
java.sql.PreparedStatement#setBytes(int, byte[])->void:::Sets the designated parameter to the given Java array of bytes
java.sql.PreparedStatement#setDate(int, java.sql.Date)->void:::Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application
java.sql.PreparedStatement#setTime(int, java.sql.Time)->void:::Sets the designated parameter to the given java.sql.Time value
java.sql.PreparedStatement#setTimestamp(int, java.sql.Timestamp)->void:::Sets the designated parameter to the given java.sql.Timestamp value
java.sql.PreparedStatement#setAsciiStream(int, java.io.InputStream, int)->void:::Sets the designated parameter to the given input stream, which will have the specified number of bytes
java.sql.PreparedStatement#setUnicodeStream(int, java.io.InputStream, int)->void:::Sets the designated parameter to the given input stream, which will have the specified number of bytes
java.sql.PreparedStatement#setBinaryStream(int, java.io.InputStream, int)->void:::Sets the designated parameter to the given input stream, which will have the specified number of bytes
java.sql.PreparedStatement#clearParameters()->void:::Clears the current parameter values immediately
java.sql.PreparedStatement#setObject(int, Object, int)->void:::Sets the value of the designated parameter with the given object
java.sql.PreparedStatement#setObject(int, Object)->void:::Sets the value of the designated parameter using the given object
java.sql.PreparedStatement#execute()->boolean:::Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement
java.sql.PreparedStatement#addBatch()->void:::Adds a set of parameters to this PreparedStatement object's batch of commands.
java.sql.PreparedStatement#setCharacterStream(int, java.io.Reader, int)->void:::Sets the designated parameter to the given Reader object, which is the given number of characters long
java.sql.PreparedStatement#setRef(int, Ref)->void:::Sets the designated parameter to the given  REF(&lt;structured-type&gt;) value
java.sql.PreparedStatement#setBlob(int, Blob)->void:::Sets the designated parameter to the given java.sql.Blob object
java.sql.PreparedStatement#setClob(int, Clob)->void:::Sets the designated parameter to the given java.sql.Clob object
java.sql.PreparedStatement#setArray(int, Array)->void:::Sets the designated parameter to the given java.sql.Array object
java.sql.PreparedStatement#getMetaData()->ResultSetMetaData:::Retrieves a ResultSetMetaData object that contains information about the columns of the ResultSet object that will be returned when this PreparedStatement object is executed
java.sql.PreparedStatement#setDate(int, java.sql.Date, Calendar)->void:::Sets the designated parameter to the given java.sql.Date value, using the given Calendar object
java.sql.PreparedStatement#setTime(int, java.sql.Time, Calendar)->void:::Sets the designated parameter to the given java.sql.Time value, using the given Calendar object
java.sql.PreparedStatement#setTimestamp(int, java.sql.Timestamp, Calendar)->void:::Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object
java.sql.PreparedStatement#setNull(int, int, String)->void:::Sets the designated parameter to SQL NULL
java.sql.PreparedStatement#setURL(int, java.net.URL)->void:::Sets the designated parameter to the given java.net.URL value
java.sql.PreparedStatement#getParameterMetaData()->ParameterMetaData:::Retrieves the number, types and properties of this PreparedStatement object's parameters.
java.sql.PreparedStatement#setRowId(int, RowId)->void:::Sets the designated parameter to the given java.sql.RowId object
java.sql.PreparedStatement#setNString(int, String)->void:::Sets the designated parameter to the given String object
java.sql.PreparedStatement#setNCharacterStream(int, Reader, long)->void:::Sets the designated parameter to a Reader object
java.sql.PreparedStatement#setNClob(int, NClob)->void:::Sets the designated parameter to a java.sql.NClob object
java.sql.PreparedStatement#setClob(int, Reader, long)->void:::Sets the designated parameter to a Reader object
java.sql.PreparedStatement#setBlob(int, InputStream, long)->void:::Sets the designated parameter to a InputStream object
java.sql.PreparedStatement#setNClob(int, Reader, long)->void:::Sets the designated parameter to a Reader object
java.sql.PreparedStatement#setSQLXML(int, SQLXML)->void:::Sets the designated parameter to the given java.sql.SQLXML object
java.sql.PreparedStatement#setObject(int, Object, int, int)->void:::Sets the value of the designated parameter with the given object
java.sql.PreparedStatement#setAsciiStream(int, java.io.InputStream, long)->void:::Sets the designated parameter to the given input stream, which will have the specified number of bytes
java.sql.PreparedStatement#setBinaryStream(int, java.io.InputStream, long)->void:::Sets the designated parameter to the given input stream, which will have the specified number of bytes
java.sql.PreparedStatement#setCharacterStream(int, java.io.Reader, long)->void:::Sets the designated parameter to the given Reader object, which is the given number of characters long
java.sql.PreparedStatement#setAsciiStream(int, java.io.InputStream)->void:::Sets the designated parameter to the given input stream
java.sql.PreparedStatement#setBinaryStream(int, java.io.InputStream)->void:::Sets the designated parameter to the given input stream
java.sql.PreparedStatement#setCharacterStream(int, java.io.Reader)->void:::Sets the designated parameter to the given Reader object
java.sql.PreparedStatement#setNCharacterStream(int, Reader)->void:::Sets the designated parameter to a Reader object
java.sql.PreparedStatement#setClob(int, Reader)->void:::Sets the designated parameter to a Reader object
java.sql.PreparedStatement#setBlob(int, InputStream)->void:::Sets the designated parameter to a InputStream object
java.sql.PreparedStatement#setNClob(int, Reader)->void:::Sets the designated parameter to a Reader object
java.sql.PreparedStatement#setObject(int, Object, SQLType, int)->void:::Sets the value of the designated parameter with the given object
java.sql.PreparedStatement#setObject(int, Object, SQLType)->void:::Sets the value of the designated parameter with the given object
java.sql.PreparedStatement#executeLargeUpdate()->long:::Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement
java.sql.Ref#getBaseTypeName()->String:::Retrieves the fully-qualified SQL name of the SQL structured type that this Ref object references.
java.sql.Ref#getObject(java.util.Map>)->Object:::Retrieves the referenced object and maps it to a Java type using the given type map.
java.sql.Ref#getObject()->Object:::Retrieves the SQL structured type instance referenced by this Ref object
java.sql.Ref#setObject(Object)->void:::Sets the structured type value that this Ref object references to the given instance of Object
java.sql.ResultSet#next()->boolean:::Moves the cursor forward one row from its current position
java.sql.ResultSet#close()->void:::Releases this ResultSet object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed
java.sql.ResultSet#wasNull()->boolean:::Reports whether the last column read had a value of SQL NULL
java.sql.ResultSet#getString(int)->String:::Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.
java.sql.ResultSet#getBoolean(int)->boolean:::Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language
java.sql.ResultSet#getByte(int)->byte:::Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language.
java.sql.ResultSet#getShort(int)->short:::Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language.
java.sql.ResultSet#getInt(int)->int:::Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language.
java.sql.ResultSet#getLong(int)->long:::Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language.
java.sql.ResultSet#getFloat(int)->float:::Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language.
java.sql.ResultSet#getDouble(int)->double:::Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language.
java.sql.ResultSet#getBigDecimal(int, int)->BigDecimal:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.BigDecimal in the Java programming language.
java.sql.ResultSet#getBytes(int)->byte[]:::Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language
java.sql.ResultSet#getDate(int)->java.sql.Date:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.
java.sql.ResultSet#getTime(int)->java.sql.Time:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.
java.sql.ResultSet#getTimestamp(int)->java.sql.Timestamp:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.
java.sql.ResultSet#getAsciiStream(int)->java.io.InputStream:::Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters
java.sql.ResultSet#getUnicodeStream(int)->java.io.InputStream:::Retrieves the value of the designated column in the current row of this ResultSet object as as a stream of two-byte 3 characters
java.sql.ResultSet#getBinaryStream(int)->java.io.InputStream:::Retrieves the value of the designated column in the current row of this ResultSet object as a  stream of uninterpreted bytes
java.sql.ResultSet#getString(String)->String:::Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.
java.sql.ResultSet#getBoolean(String)->boolean:::Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language
java.sql.ResultSet#getByte(String)->byte:::Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language.
java.sql.ResultSet#getShort(String)->short:::Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language.
java.sql.ResultSet#getInt(String)->int:::Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language.
java.sql.ResultSet#getLong(String)->long:::Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language.
java.sql.ResultSet#getFloat(String)->float:::Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language.
java.sql.ResultSet#getDouble(String)->double:::Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language.
java.sql.ResultSet#getBigDecimal(String, int)->BigDecimal:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal in the Java programming language.
java.sql.ResultSet#getBytes(String)->byte[]:::Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language
java.sql.ResultSet#getDate(String)->java.sql.Date:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.
java.sql.ResultSet#getTime(String)->java.sql.Time:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.
java.sql.ResultSet#getTimestamp(String)->java.sql.Timestamp:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.
java.sql.ResultSet#getAsciiStream(String)->java.io.InputStream:::Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters
java.sql.ResultSet#getUnicodeStream(String)->java.io.InputStream:::Retrieves the value of the designated column in the current row of this ResultSet object as a stream of two-byte Unicode characters
java.sql.ResultSet#getBinaryStream(String)->java.io.InputStream:::Retrieves the value of the designated column in the current row of this ResultSet object as a stream of uninterpreted bytes
java.sql.ResultSet#getWarnings()->SQLWarning:::Retrieves the first warning reported by calls on this ResultSet object
java.sql.ResultSet#clearWarnings()->void:::Clears all warnings reported on this ResultSet object
java.sql.ResultSet#getCursorName()->String:::Retrieves the name of the SQL cursor used by this ResultSet object
java.sql.ResultSet#getMetaData()->ResultSetMetaData:::Retrieves the  number, types and properties of this ResultSet object's columns.
java.sql.ResultSet#getObject(int)->Object:::Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language
java.sql.ResultSet#getObject(String)->Object:::Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language
java.sql.ResultSet#findColumn(String)->int:::Maps the given ResultSet column label to its ResultSet column index.
java.sql.ResultSet#getCharacterStream(int)->java.io.Reader:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.
java.sql.ResultSet#getCharacterStream(String)->java.io.Reader:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.
java.sql.ResultSet#getBigDecimal(int)->BigDecimal:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision.
java.sql.ResultSet#getBigDecimal(String)->BigDecimal:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision.
java.sql.ResultSet#isBeforeFirst()->boolean:::Retrieves whether the cursor is before the first row in this ResultSet object
java.sql.ResultSet#isAfterLast()->boolean:::Retrieves whether the cursor is after the last row in this ResultSet object
java.sql.ResultSet#isFirst()->boolean:::Retrieves whether the cursor is on the first row of this ResultSet object
java.sql.ResultSet#isLast()->boolean:::Retrieves whether the cursor is on the last row of this ResultSet object
java.sql.ResultSet#beforeFirst()->void:::Moves the cursor to the front of this ResultSet object, just before the first row
java.sql.ResultSet#afterLast()->void:::Moves the cursor to the end of this ResultSet object, just after the last row
java.sql.ResultSet#first()->boolean:::Moves the cursor to the first row in this ResultSet object.
java.sql.ResultSet#last()->boolean:::Moves the cursor to the last row in this ResultSet object.
java.sql.ResultSet#getRow()->int:::Retrieves the current row number
java.sql.ResultSet#absolute(int)->boolean:::Moves the cursor to the given row number in this ResultSet object
java.sql.ResultSet#relative(int)->boolean:::Moves the cursor a relative number of rows, either positive or negative
java.sql.ResultSet#previous()->boolean:::Moves the cursor to the previous row in this ResultSet object
java.sql.ResultSet#setFetchDirection(int)->void:::Gives a hint as to the direction in which the rows in this ResultSet object will be processed
java.sql.ResultSet#getFetchDirection()->int:::Retrieves the fetch direction for this ResultSet object.
java.sql.ResultSet#setFetchSize(int)->void:::Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this ResultSet object
java.sql.ResultSet#getFetchSize()->int:::Retrieves the fetch size for this ResultSet object.
java.sql.ResultSet#getType()->int:::Retrieves the type of this ResultSet object
java.sql.ResultSet#getConcurrency()->int:::Retrieves the concurrency mode of this ResultSet object
java.sql.ResultSet#rowUpdated()->boolean:::Retrieves whether the current row has been updated
java.sql.ResultSet#rowInserted()->boolean:::Retrieves whether the current row has had an insertion
java.sql.ResultSet#rowDeleted()->boolean:::Retrieves whether a row has been deleted
java.sql.ResultSet#updateNull(int)->void:::Updates the designated column with a null value
java.sql.ResultSet#updateBoolean(int, boolean)->void:::Updates the designated column with a boolean value
java.sql.ResultSet#updateByte(int, byte)->void:::Updates the designated column with a byte value
java.sql.ResultSet#updateShort(int, short)->void:::Updates the designated column with a short value
java.sql.ResultSet#updateInt(int, int)->void:::Updates the designated column with an int value
java.sql.ResultSet#updateLong(int, long)->void:::Updates the designated column with a long value
java.sql.ResultSet#updateFloat(int, float)->void:::Updates the designated column with a float value
java.sql.ResultSet#updateDouble(int, double)->void:::Updates the designated column with a double value
java.sql.ResultSet#updateBigDecimal(int, BigDecimal)->void:::Updates the designated column with a java.math.BigDecimal value
java.sql.ResultSet#updateString(int, String)->void:::Updates the designated column with a String value
java.sql.ResultSet#updateBytes(int, byte[])->void:::Updates the designated column with a byte array value
java.sql.ResultSet#updateDate(int, java.sql.Date)->void:::Updates the designated column with a java.sql.Date value
java.sql.ResultSet#updateTime(int, java.sql.Time)->void:::Updates the designated column with a java.sql.Time value
java.sql.ResultSet#updateTimestamp(int, java.sql.Timestamp)->void:::Updates the designated column with a java.sql.Timestamp value
java.sql.ResultSet#updateAsciiStream(int, java.io.InputStream, int)->void:::Updates the designated column with an ascii stream value, which will have the specified number of bytes
java.sql.ResultSet#updateBinaryStream(int, java.io.InputStream, int)->void:::Updates the designated column with a binary stream value, which will have the specified number of bytes
java.sql.ResultSet#updateCharacterStream(int, java.io.Reader, int)->void:::Updates the designated column with a character stream value, which will have the specified number of bytes
java.sql.ResultSet#updateObject(int, Object, int)->void:::Updates the designated column with an Object value
java.sql.ResultSet#updateObject(int, Object)->void:::Updates the designated column with an Object value
java.sql.ResultSet#updateNull(String)->void:::Updates the designated column with a null value
java.sql.ResultSet#updateBoolean(String, boolean)->void:::Updates the designated column with a boolean value
java.sql.ResultSet#updateByte(String, byte)->void:::Updates the designated column with a byte value
java.sql.ResultSet#updateShort(String, short)->void:::Updates the designated column with a short value
java.sql.ResultSet#updateInt(String, int)->void:::Updates the designated column with an int value
java.sql.ResultSet#updateLong(String, long)->void:::Updates the designated column with a long value
java.sql.ResultSet#updateFloat(String, float)->void:::Updates the designated column with a float  value
java.sql.ResultSet#updateDouble(String, double)->void:::Updates the designated column with a double value
java.sql.ResultSet#updateBigDecimal(String, BigDecimal)->void:::Updates the designated column with a java.sql.BigDecimal value
java.sql.ResultSet#updateString(String, String)->void:::Updates the designated column with a String value
java.sql.ResultSet#updateBytes(String, byte[])->void:::Updates the designated column with a byte array value
java.sql.ResultSet#updateDate(String, java.sql.Date)->void:::Updates the designated column with a java.sql.Date value
java.sql.ResultSet#updateTime(String, java.sql.Time)->void:::Updates the designated column with a java.sql.Time value
java.sql.ResultSet#updateTimestamp(String, java.sql.Timestamp)->void:::Updates the designated column with a java.sql.Timestamp value
java.sql.ResultSet#updateAsciiStream(String, java.io.InputStream, int)->void:::Updates the designated column with an ascii stream value, which will have the specified number of bytes
java.sql.ResultSet#updateBinaryStream(String, java.io.InputStream, int)->void:::Updates the designated column with a binary stream value, which will have the specified number of bytes
java.sql.ResultSet#updateCharacterStream(String, java.io.Reader, int)->void:::Updates the designated column with a character stream value, which will have the specified number of bytes
java.sql.ResultSet#updateObject(String, Object, int)->void:::Updates the designated column with an Object value
java.sql.ResultSet#updateObject(String, Object)->void:::Updates the designated column with an Object value
java.sql.ResultSet#insertRow()->void:::Inserts the contents of the insert row into this ResultSet object and into the database
java.sql.ResultSet#updateRow()->void:::Updates the underlying database with the new contents of the current row of this ResultSet object
java.sql.ResultSet#deleteRow()->void:::Deletes the current row from this ResultSet object and from the underlying database
java.sql.ResultSet#refreshRow()->void:::Refreshes the current row with its most recent value in the database
java.sql.ResultSet#cancelRowUpdates()->void:::Cancels the updates made to the current row in this ResultSet object
java.sql.ResultSet#moveToInsertRow()->void:::Moves the cursor to the insert row
java.sql.ResultSet#moveToCurrentRow()->void:::Moves the cursor to the remembered cursor position, usually the current row
java.sql.ResultSet#getStatement()->Statement:::Retrieves the Statement object that produced this ResultSet object
java.sql.ResultSet#getObject(int, java.util.Map>)->Object:::Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language
java.sql.ResultSet#getRef(int)->Ref:::Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language.
java.sql.ResultSet#getBlob(int)->Blob:::Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language.
java.sql.ResultSet#getClob(int)->Clob:::Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language.
java.sql.ResultSet#getArray(int)->Array:::Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language.
java.sql.ResultSet#getObject(String, java.util.Map>)->Object:::Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language
java.sql.ResultSet#getRef(String)->Ref:::Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language.
java.sql.ResultSet#getBlob(String)->Blob:::Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language.
java.sql.ResultSet#getClob(String)->Clob:::Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language.
java.sql.ResultSet#getArray(String)->Array:::Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language.
java.sql.ResultSet#getDate(int, Calendar)->java.sql.Date:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language
java.sql.ResultSet#getDate(String, Calendar)->java.sql.Date:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language
java.sql.ResultSet#getTime(int, Calendar)->java.sql.Time:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language
java.sql.ResultSet#getTime(String, Calendar)->java.sql.Time:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language
java.sql.ResultSet#getTimestamp(int, Calendar)->java.sql.Timestamp:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language
java.sql.ResultSet#getTimestamp(String, Calendar)->java.sql.Timestamp:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language
java.sql.ResultSet#getURL(int)->java.net.URL:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.
java.sql.ResultSet#getURL(String)->java.net.URL:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.
java.sql.ResultSet#updateRef(int, java.sql.Ref)->void:::Updates the designated column with a java.sql.Ref value
java.sql.ResultSet#updateRef(String, java.sql.Ref)->void:::Updates the designated column with a java.sql.Ref value
java.sql.ResultSet#updateBlob(int, java.sql.Blob)->void:::Updates the designated column with a java.sql.Blob value
java.sql.ResultSet#updateBlob(String, java.sql.Blob)->void:::Updates the designated column with a java.sql.Blob value
java.sql.ResultSet#updateClob(int, java.sql.Clob)->void:::Updates the designated column with a java.sql.Clob value
java.sql.ResultSet#updateClob(String, java.sql.Clob)->void:::Updates the designated column with a java.sql.Clob value
java.sql.ResultSet#updateArray(int, java.sql.Array)->void:::Updates the designated column with a java.sql.Array value
java.sql.ResultSet#updateArray(String, java.sql.Array)->void:::Updates the designated column with a java.sql.Array value
java.sql.ResultSet#getRowId(int)->RowId:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.RowId object in the Java programming language.
java.sql.ResultSet#getRowId(String)->RowId:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.RowId object in the Java programming language.
java.sql.ResultSet#updateRowId(int, RowId)->void:::Updates the designated column with a RowId value
java.sql.ResultSet#updateRowId(String, RowId)->void:::Updates the designated column with a RowId value
java.sql.ResultSet#getHoldability()->int:::Retrieves the holdability of this ResultSet object
java.sql.ResultSet#isClosed()->boolean:::Retrieves whether this ResultSet object has been closed
java.sql.ResultSet#updateNString(int, String)->void:::Updates the designated column with a String value
java.sql.ResultSet#updateNString(String, String)->void:::Updates the designated column with a String value
java.sql.ResultSet#updateNClob(int, NClob)->void:::Updates the designated column with a java.sql.NClob value
java.sql.ResultSet#updateNClob(String, NClob)->void:::Updates the designated column with a java.sql.NClob value
java.sql.ResultSet#getNClob(int)->NClob:::Retrieves the value of the designated column in the current row of this ResultSet object as a NClob object in the Java programming language.
java.sql.ResultSet#getNClob(String)->NClob:::Retrieves the value of the designated column in the current row of this ResultSet object as a NClob object in the Java programming language.
java.sql.ResultSet#getSQLXML(int)->SQLXML:::Retrieves the value of the designated column in  the current row of  this ResultSet as a java.sql.SQLXML object in the Java programming language.
java.sql.ResultSet#getSQLXML(String)->SQLXML:::Retrieves the value of the designated column in  the current row of  this ResultSet as a java.sql.SQLXML object in the Java programming language.
java.sql.ResultSet#updateSQLXML(int, SQLXML)->void:::Updates the designated column with a java.sql.SQLXML value
java.sql.ResultSet#updateSQLXML(String, SQLXML)->void:::Updates the designated column with a java.sql.SQLXML value
java.sql.ResultSet#getNString(int)->String:::Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language
java.sql.ResultSet#getNString(String)->String:::Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language
java.sql.ResultSet#getNCharacterStream(int)->java.io.Reader:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object
java.sql.ResultSet#getNCharacterStream(String)->java.io.Reader:::Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object
java.sql.ResultSet#updateNCharacterStream(int, java.io.Reader, long)->void:::Updates the designated column with a character stream value, which will have the specified number of bytes
java.sql.ResultSet#updateNCharacterStream(String, java.io.Reader, long)->void:::Updates the designated column with a character stream value, which will have the specified number of bytes
java.sql.ResultSet#updateAsciiStream(int, java.io.InputStream, long)->void:::Updates the designated column with an ascii stream value, which will have the specified number of bytes
java.sql.ResultSet#updateBinaryStream(int, java.io.InputStream, long)->void:::Updates the designated column with a binary stream value, which will have the specified number of bytes
java.sql.ResultSet#updateCharacterStream(int, java.io.Reader, long)->void:::Updates the designated column with a character stream value, which will have the specified number of bytes
java.sql.ResultSet#updateAsciiStream(String, java.io.InputStream, long)->void:::Updates the designated column with an ascii stream value, which will have the specified number of bytes
java.sql.ResultSet#updateBinaryStream(String, java.io.InputStream, long)->void:::Updates the designated column with a binary stream value, which will have the specified number of bytes
java.sql.ResultSet#updateCharacterStream(String, java.io.Reader, long)->void:::Updates the designated column with a character stream value, which will have the specified number of bytes
java.sql.ResultSet#updateBlob(int, InputStream, long)->void:::Updates the designated column using the given input stream, which will have the specified number of bytes
java.sql.ResultSet#updateBlob(String, InputStream, long)->void:::Updates the designated column using the given input stream, which will have the specified number of bytes
java.sql.ResultSet#updateClob(int, Reader, long)->void:::Updates the designated column using the given Reader object, which is the given number of characters long
java.sql.ResultSet#updateClob(String, Reader, long)->void:::Updates the designated column using the given Reader object, which is the given number of characters long
java.sql.ResultSet#updateNClob(int, Reader, long)->void:::Updates the designated column using the given Reader object, which is the given number of characters long
java.sql.ResultSet#updateNClob(String, Reader, long)->void:::Updates the designated column using the given Reader object, which is the given number of characters long
java.sql.ResultSet#updateNCharacterStream(int, java.io.Reader)->void:::Updates the designated column with a character stream value
java.sql.ResultSet#updateNCharacterStream(String, java.io.Reader)->void:::Updates the designated column with a character stream value
java.sql.ResultSet#updateAsciiStream(int, java.io.InputStream)->void:::Updates the designated column with an ascii stream value
java.sql.ResultSet#updateBinaryStream(int, java.io.InputStream)->void:::Updates the designated column with a binary stream value
java.sql.ResultSet#updateCharacterStream(int, java.io.Reader)->void:::Updates the designated column with a character stream value
java.sql.ResultSet#updateAsciiStream(String, java.io.InputStream)->void:::Updates the designated column with an ascii stream value
java.sql.ResultSet#updateBinaryStream(String, java.io.InputStream)->void:::Updates the designated column with a binary stream value
java.sql.ResultSet#updateCharacterStream(String, java.io.Reader)->void:::Updates the designated column with a character stream value
java.sql.ResultSet#updateBlob(int, InputStream)->void:::Updates the designated column using the given input stream
java.sql.ResultSet#updateBlob(String, InputStream)->void:::Updates the designated column using the given input stream
java.sql.ResultSet#updateClob(int, Reader)->void:::Updates the designated column using the given Reader object
java.sql.ResultSet#updateClob(String, Reader)->void:::Updates the designated column using the given Reader object
java.sql.ResultSet#updateNClob(int, Reader)->void:::Updates the designated column using the given Reader  The data will be read from the stream as needed until end-of-stream is reached
java.sql.ResultSet#updateNClob(String, Reader)->void:::Updates the designated column using the given Reader object
java.sql.ResultSet#getObject(int, Class)->T:::Retrieves the value of the designated column in the current row of this ResultSet object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported
java.sql.ResultSet#getObject(String, Class)->T:::Retrieves the value of the designated column in the current row of this ResultSet object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported
java.sql.ResultSet#updateObject(int, Object, SQLType, int)->void:::Updates the designated column with an Object value
java.sql.ResultSet#updateObject(String, Object, SQLType, int)->void:::Updates the designated column with an Object value
java.sql.ResultSet#updateObject(int, Object, SQLType)->void:::Updates the designated column with an Object value
java.sql.ResultSet#updateObject(String, Object, SQLType)->void:::Updates the designated column with an Object value
java.sql.ResultSetMetaData#getColumnCount()->int:::Returns the number of columns in this ResultSet object.
java.sql.ResultSetMetaData#isAutoIncrement(int)->boolean:::Indicates whether the designated column is automatically numbered.
java.sql.ResultSetMetaData#isCaseSensitive(int)->boolean:::Indicates whether a column's case matters.
java.sql.ResultSetMetaData#isSearchable(int)->boolean:::Indicates whether the designated column can be used in a where clause.
java.sql.ResultSetMetaData#isCurrency(int)->boolean:::Indicates whether the designated column is a cash value.
java.sql.ResultSetMetaData#isNullable(int)->int:::Indicates the nullability of values in the designated column.
java.sql.ResultSetMetaData#isSigned(int)->boolean:::Indicates whether values in the designated column are signed numbers.
java.sql.ResultSetMetaData#getColumnDisplaySize(int)->int:::Indicates the designated column's normal maximum width in characters.
java.sql.ResultSetMetaData#getColumnLabel(int)->String:::Gets the designated column's suggested title for use in printouts and displays
java.sql.ResultSetMetaData#getColumnName(int)->String:::Get the designated column's name.
java.sql.ResultSetMetaData#getSchemaName(int)->String:::Get the designated column's table's schema.
java.sql.ResultSetMetaData#getPrecision(int)->int:::Get the designated column's specified column size
java.sql.ResultSetMetaData#getScale(int)->int:::Gets the designated column's number of digits to right of the decimal point
java.sql.ResultSetMetaData#getTableName(int)->String:::Gets the designated column's table name.
java.sql.ResultSetMetaData#getCatalogName(int)->String:::Gets the designated column's table's catalog name.
java.sql.ResultSetMetaData#getColumnType(int)->int:::Retrieves the designated column's SQL type.
java.sql.ResultSetMetaData#getColumnTypeName(int)->String:::Retrieves the designated column's database-specific type name.
java.sql.ResultSetMetaData#isReadOnly(int)->boolean:::Indicates whether the designated column is definitely not writable.
java.sql.ResultSetMetaData#isWritable(int)->boolean:::Indicates whether it is possible for a write on the designated column to succeed.
java.sql.ResultSetMetaData#isDefinitelyWritable(int)->boolean:::Indicates whether a write on the designated column will definitely succeed.
java.sql.ResultSetMetaData#getColumnClassName(int)->String:::Returns the fully-qualified name of the Java class whose instances are manufactured if the method ResultSet.getObject is called to retrieve a value from the column
java.sql.RowId#equals(Object)->boolean:::Compares this RowId to the specified object
java.sql.RowId#getBytes()->byte[]:::Returns an array of bytes representing the value of the SQL ROWID designated by this java.sql.RowId object.
java.sql.RowId#toString()->String:::Returns a String representing the value of the SQL ROWID designated by this java.sql.RowId object
java.sql.RowId#hashCode()->int:::Returns a hash code value of this RowId object.
java.sql.Savepoint#getSavepointId()->int:::Retrieves the generated ID for the savepoint that this Savepoint object represents.
java.sql.Savepoint#getSavepointName()->String:::Retrieves the name of the savepoint that this Savepoint object represents.
java.sql.ShardingKeyBuilder#subkey(Object, SQLType)->ShardingKeyBuilder:::This method will be called to add a subkey into a Sharding Key object being built
java.sql.ShardingKeyBuilder#build()->ShardingKey:::Returns an instance of the object defined by this builder.
java.sql.SQLClientInfoException#getFailedProperties()->Map:::Returns the list of client info properties that could not be set
java.sql.SQLData#getSQLTypeName()->String:::Returns the fully-qualified name of the SQL user-defined type that this object represents
java.sql.SQLData#readSQL(SQLInput, String)->void:::Populates this object with data read from the database
java.sql.SQLData#writeSQL(SQLOutput)->void:::Writes this object to the given SQL data stream, converting it back to its SQL value in the data source
java.sql.SQLException#getSQLState()->String:::Retrieves the SQLState for this SQLException object.
java.sql.SQLException#getErrorCode()->int:::Retrieves the vendor-specific exception code for this SQLException object.
java.sql.SQLException#getNextException()->SQLException:::Retrieves the exception chained to this SQLException object by setNextException(SQLException ex).
java.sql.SQLException#setNextException(SQLException)->void:::Adds an SQLException object to the end of the chain.
java.sql.SQLException#iterator()->Iterator:::Returns an iterator over the chained SQLExceptions
java.sql.SQLInput#readString()->String:::Reads the next attribute in the stream and returns it as a String in the Java programming language.
java.sql.SQLInput#readBoolean()->boolean:::Reads the next attribute in the stream and returns it as a boolean in the Java programming language.
java.sql.SQLInput#readByte()->byte:::Reads the next attribute in the stream and returns it as a byte in the Java programming language.
java.sql.SQLInput#readShort()->short:::Reads the next attribute in the stream and returns it as a short in the Java programming language.
java.sql.SQLInput#readInt()->int:::Reads the next attribute in the stream and returns it as an int in the Java programming language.
java.sql.SQLInput#readLong()->long:::Reads the next attribute in the stream and returns it as a long in the Java programming language.
java.sql.SQLInput#readFloat()->float:::Reads the next attribute in the stream and returns it as a float in the Java programming language.
java.sql.SQLInput#readDouble()->double:::Reads the next attribute in the stream and returns it as a double in the Java programming language.
java.sql.SQLInput#readBigDecimal()->java.math.BigDecimal:::Reads the next attribute in the stream and returns it as a java.math.BigDecimal object in the Java programming language.
java.sql.SQLInput#readBytes()->byte[]:::Reads the next attribute in the stream and returns it as an array of bytes in the Java programming language.
java.sql.SQLInput#readDate()->java.sql.Date:::Reads the next attribute in the stream and returns it as a java.sql.Date object.
java.sql.SQLInput#readTime()->java.sql.Time:::Reads the next attribute in the stream and returns it as a java.sql.Time object.
java.sql.SQLInput#readTimestamp()->java.sql.Timestamp:::Reads the next attribute in the stream and returns it as a java.sql.Timestamp object.
java.sql.SQLInput#readCharacterStream()->java.io.Reader:::Reads the next attribute in the stream and returns it as a stream of Unicode characters.
java.sql.SQLInput#readAsciiStream()->java.io.InputStream:::Reads the next attribute in the stream and returns it as a stream of ASCII characters.
java.sql.SQLInput#readBinaryStream()->java.io.InputStream:::Reads the next attribute in the stream and returns it as a stream of uninterpreted bytes.
java.sql.SQLInput#readObject()->Object:::Reads the datum at the head of the stream and returns it as an Object in the Java programming language
java.sql.SQLInput#readRef()->Ref:::Reads an SQL REF value from the stream and returns it as a Ref object in the Java programming language.
java.sql.SQLInput#readBlob()->Blob:::Reads an SQL BLOB value from the stream and returns it as a Blob object in the Java programming language.
java.sql.SQLInput#readClob()->Clob:::Reads an SQL CLOB value from the stream and returns it as a Clob object in the Java programming language.
java.sql.SQLInput#readArray()->Array:::Reads an SQL ARRAY value from the stream and returns it as an Array object in the Java programming language.
java.sql.SQLInput#wasNull()->boolean:::Retrieves whether the last value read was SQL NULL.
java.sql.SQLInput#readURL()->java.net.URL:::Reads an SQL DATALINK value from the stream and returns it as a java.net.URL object in the Java programming language.
java.sql.SQLInput#readNClob()->NClob:::Reads an SQL NCLOB value from the stream and returns it as a NClob object in the Java programming language.
java.sql.SQLInput#readNString()->String:::Reads the next attribute in the stream and returns it as a String in the Java programming language
java.sql.SQLInput#readSQLXML()->SQLXML:::Reads an SQL XML value from the stream and returns it as a SQLXML object in the Java programming language.
java.sql.SQLInput#readRowId()->RowId:::Reads an SQL ROWID value from the stream and returns it as a RowId object in the Java programming language.
java.sql.SQLInput#readObject(Class)->T:::Reads the next attribute in the stream and returns it as an Object in the Java programming language
java.sql.SQLOutput#writeString(String)->void:::Writes the next attribute to the stream as a String in the Java programming language.
java.sql.SQLOutput#writeBoolean(boolean)->void:::Writes the next attribute to the stream as a Java boolean
java.sql.SQLOutput#writeByte(byte)->void:::Writes the next attribute to the stream as a Java byte
java.sql.SQLOutput#writeShort(short)->void:::Writes the next attribute to the stream as a Java short
java.sql.SQLOutput#writeInt(int)->void:::Writes the next attribute to the stream as a Java int
java.sql.SQLOutput#writeLong(long)->void:::Writes the next attribute to the stream as a Java long
java.sql.SQLOutput#writeFloat(float)->void:::Writes the next attribute to the stream as a Java float
java.sql.SQLOutput#writeDouble(double)->void:::Writes the next attribute to the stream as a Java double
java.sql.SQLOutput#writeBigDecimal(java.math.BigDecimal)->void:::Writes the next attribute to the stream as a java.math.BigDecimal object
java.sql.SQLOutput#writeBytes(byte[])->void:::Writes the next attribute to the stream as an array of bytes
java.sql.SQLOutput#writeDate(java.sql.Date)->void:::Writes the next attribute to the stream as a java.sql.Date object
java.sql.SQLOutput#writeTime(java.sql.Time)->void:::Writes the next attribute to the stream as a java.sql.Time object
java.sql.SQLOutput#writeTimestamp(java.sql.Timestamp)->void:::Writes the next attribute to the stream as a java.sql.Timestamp object
java.sql.SQLOutput#writeCharacterStream(java.io.Reader)->void:::Writes the next attribute to the stream as a stream of Unicode characters.
java.sql.SQLOutput#writeAsciiStream(java.io.InputStream)->void:::Writes the next attribute to the stream as a stream of ASCII characters.
java.sql.SQLOutput#writeBinaryStream(java.io.InputStream)->void:::Writes the next attribute to the stream as a stream of uninterpreted bytes.
java.sql.SQLOutput#writeObject(SQLData)->void:::Writes to the stream the data contained in the given SQLData object
java.sql.SQLOutput#writeRef(Ref)->void:::Writes an SQL REF value to the stream.
java.sql.SQLOutput#writeBlob(Blob)->void:::Writes an SQL BLOB value to the stream.
java.sql.SQLOutput#writeClob(Clob)->void:::Writes an SQL CLOB value to the stream.
java.sql.SQLOutput#writeStruct(Struct)->void:::Writes an SQL structured type value to the stream.
java.sql.SQLOutput#writeArray(Array)->void:::Writes an SQL ARRAY value to the stream.
java.sql.SQLOutput#writeURL(java.net.URL)->void:::Writes a SQL DATALINK value to the stream.
java.sql.SQLOutput#writeNString(String)->void:::Writes the next attribute to the stream as a String in the Java programming language
java.sql.SQLOutput#writeNClob(NClob)->void:::Writes an SQL NCLOB value to the stream.
java.sql.SQLOutput#writeRowId(RowId)->void:::Writes an SQL ROWID value to the stream.
java.sql.SQLOutput#writeSQLXML(SQLXML)->void:::Writes an SQL XML value to the stream.
java.sql.SQLOutput#writeObject(Object, SQLType)->void:::Writes to the stream the data contained in the given object
java.sql.SQLType#getName()->String:::Returns the SQLType name that represents a SQL data type.
java.sql.SQLType#getVendor()->String:::Returns the name of the vendor that supports this data type
java.sql.SQLType#getVendorTypeNumber()->Integer:::Returns the vendor specific type number for the data type.
java.sql.SQLWarning#getNextWarning()->SQLWarning:::Retrieves the warning chained to this SQLWarning object by setNextWarning.
java.sql.SQLWarning#setNextWarning(SQLWarning)->void:::Adds a SQLWarning object to the end of the chain.
java.sql.SQLXML#free()->void:::This method closes this object and releases the resources that it held
java.sql.SQLXML#getBinaryStream()->InputStream:::Retrieves the XML value designated by this SQLXML instance as a stream
java.sql.SQLXML#setBinaryStream()->OutputStream:::Retrieves a stream that can be used to write the XML value that this SQLXML instance represents
java.sql.SQLXML#getCharacterStream()->Reader:::Retrieves the XML value designated by this SQLXML instance as a java.io.Reader object
java.sql.SQLXML#setCharacterStream()->Writer:::Retrieves a stream to be used to write the XML value that this SQLXML instance represents
java.sql.SQLXML#getString()->String:::Returns a string representation of the XML value designated by this SQLXML instance
java.sql.SQLXML#setString(String)->void:::Sets the XML value designated by this SQLXML instance to the given String representation
java.sql.SQLXML#getSource(Class)->T:::Returns a Source for reading the XML value designated by this SQLXML instance
java.sql.SQLXML#setResult(Class)->T:::Returns a Result for setting the XML value designated by this SQLXML instance
java.sql.Statement#executeQuery(String)->ResultSet:::Executes the given SQL statement, which returns a single ResultSet object
java.sql.Statement#executeUpdate(String)->int:::Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement
java.sql.Statement#close()->void:::Releases this Statement object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed
java.sql.Statement#getMaxFieldSize()->int:::Retrieves the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object
java.sql.Statement#setMaxFieldSize(int)->void:::Sets the limit for the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object
java.sql.Statement#getMaxRows()->int:::Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain
java.sql.Statement#setMaxRows(int)->void:::Sets the limit for the maximum number of rows that any ResultSet object  generated by this Statement object can contain to the given number
java.sql.Statement#setEscapeProcessing(boolean)->void:::Sets escape processing on or off
java.sql.Statement#getQueryTimeout()->int:::Retrieves the number of seconds the driver will wait for a Statement object to execute
java.sql.Statement#setQueryTimeout(int)->void:::Sets the number of seconds the driver will wait for a Statement object to execute to the given number of seconds
java.sql.Statement#cancel()->void:::Cancels this Statement object if both the DBMS and driver support aborting an SQL statement
java.sql.Statement#getWarnings()->SQLWarning:::Retrieves the first warning reported by calls on this Statement object
java.sql.Statement#clearWarnings()->void:::Clears all the warnings reported on this Statement object
java.sql.Statement#setCursorName(String)->void:::Sets the SQL cursor name to the given String, which will be used by subsequent Statement object execute methods
java.sql.Statement#execute(String)->boolean:::Executes the given SQL statement, which may return multiple results
java.sql.Statement#getResultSet()->ResultSet::: Retrieves the current result as a ResultSet object
java.sql.Statement#getUpdateCount()->int::: Retrieves the current result as an update count;  if the result is a ResultSet object or there are no more results, -1  is returned
java.sql.Statement#getMoreResults()->boolean:::Moves to this Statement object's next result, returns true if it is a ResultSet object, and implicitly closes any current ResultSet object(s) obtained with the method getResultSet
java.sql.Statement#setFetchDirection(int)->void:::Gives the driver a hint as to the direction in which rows will be processed in ResultSet objects created using this Statement object
java.sql.Statement#getFetchDirection()->int:::Retrieves the direction for fetching rows from database tables that is the default for result sets generated from this Statement object
java.sql.Statement#setFetchSize(int)->void:::Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for ResultSet objects generated by this Statement
java.sql.Statement#getFetchSize()->int:::Retrieves the number of result set rows that is the default fetch size for ResultSet objects generated from this Statement object
java.sql.Statement#getResultSetConcurrency()->int:::Retrieves the result set concurrency for ResultSet objects generated by this Statement object.
java.sql.Statement#getResultSetType()->int:::Retrieves the result set type for ResultSet objects generated by this Statement object.
java.sql.Statement#addBatch(String)->void:::Adds the given SQL command to the current list of commands for this Statement object
java.sql.Statement#clearBatch()->void:::Empties this Statement object's current list of SQL commands.
java.sql.Statement#executeBatch()->int[]:::Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts
java.sql.Statement#getConnection()->Connection:::Retrieves the Connection object that produced this Statement object.
java.sql.Statement#getMoreResults(int)->boolean:::Moves to this Statement object's next result, deals with any current ResultSet object(s) according  to the instructions specified by the given flag, and returns true if the next result is a ResultSet object
java.sql.Statement#getGeneratedKeys()->ResultSet:::Retrieves any auto-generated keys created as a result of executing this Statement object
java.sql.Statement#executeUpdate(String, int)->int:::Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval
java.sql.Statement#executeUpdate(String, int[])->int:::Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
java.sql.Statement#executeUpdate(String, String[])->int:::Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
java.sql.Statement#execute(String, int)->boolean:::Executes the given SQL statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval
java.sql.Statement#execute(String, int[])->boolean:::Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
java.sql.Statement#execute(String, String[])->boolean:::Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
java.sql.Statement#getResultSetHoldability()->int:::Retrieves the result set holdability for ResultSet objects generated by this Statement object.
java.sql.Statement#isClosed()->boolean:::Retrieves whether this Statement object has been closed
java.sql.Statement#setPoolable(boolean)->void:::Requests that a Statement be pooled or not pooled
java.sql.Statement#isPoolable()->boolean:::Returns a  value indicating whether the Statement is poolable or not.
java.sql.Statement#closeOnCompletion()->void:::Specifies that this Statement will be closed when all its dependent result sets are closed
java.sql.Statement#isCloseOnCompletion()->boolean:::Returns a value indicating whether this Statement will be closed when all its dependent result sets are closed.
java.sql.Statement#getLargeUpdateCount()->long::: Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1  is returned
java.sql.Statement#setLargeMaxRows(long)->void:::Sets the limit for the maximum number of rows that any ResultSet object  generated by this Statement object can contain to the given number
java.sql.Statement#getLargeMaxRows()->long:::Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain
java.sql.Statement#executeLargeBatch()->long[]:::Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts
java.sql.Statement#executeLargeUpdate(String)->long:::Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement
java.sql.Statement#executeLargeUpdate(String, int)->long:::Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval
java.sql.Statement#executeLargeUpdate(String, int[])->long:::Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
java.sql.Statement#executeLargeUpdate(String, String[])->long:::Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval
java.sql.Statement#enquoteLiteral(String)->String:::Returns a String enclosed in single quotes
java.sql.Statement#enquoteIdentifier(String, boolean)->String:::Returns a SQL identifier
java.sql.Statement#isSimpleIdentifier(String)->boolean:::Retrieves whether identifier is a simple SQL identifier.
java.sql.Statement#enquoteNCharLiteral(String)->String:::Returns a String representing a National Character Set Literal enclosed in single quotes and prefixed with a upper case letter N
java.sql.Struct#getSQLTypeName()->String:::Retrieves the SQL type name of the SQL structured type that this Struct object represents.
java.sql.Struct#getAttributes()->Object[]:::Produces the ordered values of the attributes of the SQL structured type that this Struct object represents
java.sql.Struct#getAttributes(java.util.Map>)->Object[]:::Produces the ordered values of the attributes of the SQL structured type that this Struct object represents
java.sql.Time#setTime(long)->void:::Sets a Time object using a milliseconds time value.
java.sql.Time#valueOf(String)->Time:::Converts a string in JDBC time escape format to a Time value.
java.sql.Time#toString()->String:::Formats a time in JDBC time escape format.
java.sql.Time#getYear()->int:::This method is deprecated and should not be used because SQL TIME values do not have a year component.
java.sql.Time#getMonth()->int:::This method is deprecated and should not be used because SQL TIME values do not have a month component.
java.sql.Time#getDay()->int:::This method is deprecated and should not be used because SQL TIME values do not have a day component.
java.sql.Time#getDate()->int:::This method is deprecated and should not be used because SQL TIME values do not have a date component.
java.sql.Time#setYear(int)->void:::This method is deprecated and should not be used because SQL TIME values do not have a year component.
java.sql.Time#setMonth(int)->void:::This method is deprecated and should not be used because SQL TIME values do not have a month component.
java.sql.Time#setDate(int)->void:::This method is deprecated and should not be used because SQL TIME values do not have a date component.
java.sql.Time#valueOf(LocalTime)->Time:::Obtains an instance of Time from a LocalTime object with the same hour, minute and second time value as the given LocalTime
java.sql.Time#toLocalTime()->LocalTime:::Converts this Time object to a LocalTime
java.sql.Time#toInstant()->Instant:::This method always throws an UnsupportedOperationException and should not be used because SQL Time values do not have a date component.
java.sql.Timestamp#setTime(long)->void:::Sets this Timestamp object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.
java.sql.Timestamp#getTime()->long:::Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Timestamp object.
java.sql.Timestamp#valueOf(String)->Timestamp:::Converts a String object in JDBC timestamp escape format to a Timestamp value.
java.sql.Timestamp#toString()->String:::Formats a timestamp in JDBC timestamp escape format
java.sql.Timestamp#getNanos()->int:::Gets this Timestamp object's nanos value.
java.sql.Timestamp#setNanos(int)->void:::Sets this Timestamp object's nanos field to the given value.
java.sql.Timestamp#equals(Timestamp)->boolean:::Tests to see if this Timestamp object is equal to the given Timestamp object.
java.sql.Timestamp#equals(java.lang.Object)->boolean:::Tests to see if this Timestamp object is equal to the given object
java.sql.Timestamp#before(Timestamp)->boolean:::Indicates whether this Timestamp object is earlier than the given Timestamp object.
java.sql.Timestamp#after(Timestamp)->boolean:::Indicates whether this Timestamp object is later than the given Timestamp object.
java.sql.Timestamp#compareTo(Timestamp)->int:::Compares this Timestamp object to the given Timestamp object.
java.sql.Timestamp#compareTo(java.util.Date)->int:::Compares this Timestamp object to the given Date object.
java.sql.Timestamp#hashCode()->int:::The {@code hashCode method uses the underlying java.util.Date implementation and therefore does not include nanos in its computation.
java.sql.Timestamp#valueOf(LocalDateTime)->Timestamp:::Obtains an instance of Timestamp from a LocalDateTime object, with the same year, month, day of month, hours, minutes, seconds and nanos date-time value as the provided LocalDateTime
java.sql.Timestamp#toLocalDateTime()->LocalDateTime:::Converts this Timestamp object to a LocalDateTime
java.sql.Timestamp#from(Instant)->Timestamp:::Obtains an instance of Timestamp from an Instant object
java.sql.Timestamp#toInstant()->Instant:::Converts this Timestamp object to an Instant
java.sql.Wrapper#unwrap(java.lang.Class)->T:::Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy
java.sql.Wrapper#isWrapperFor(java.lang.Class)->boolean:::Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does

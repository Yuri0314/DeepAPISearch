Array#getBaseTypeName():::Retrieves the SQL type name of the elements in the array designated by this Array object:::
Array#getBaseType():::Retrieves the JDBC type of the elements in the array designated by this Array object.:::
Array#getArray():::Retrieves the contents of the SQL ARRAY value designated by this Array object in the form of an array in the Java programming language:::
Array#getArray(java.util.Map>):::Retrieves the contents of the SQL ARRAY value designated by this Array object:::
Array#getArray(long, int):::Retrieves a slice of the SQL ARRAY value designated by this Array object, beginning with the specified index and containing up to count successive elements of the SQL array:::
Array#getArray(long, int, java.util.Map>):::Retrieves a slice of the SQL ARRAY value designated by this Array object, beginning with the specified index and containing up to count successive elements of the SQL array:::
Array#getResultSet():::Retrieves a result set that contains the elements of the SQL ARRAY value designated by this Array object:::
Array#getResultSet(java.util.Map>):::Retrieves a result set that contains the elements of the SQL ARRAY value designated by this Array object:::
Array#getResultSet(long, int):::Retrieves a result set holding the elements of the subarray that starts at index index and contains up to count successive elements:::
Array#getResultSet(long, int, java.util.Map>):::Retrieves a result set holding the elements of the subarray that starts at index index and contains up to count successive elements:::
Array#free():::This method frees the Array object and releases the resources that it holds:::
BatchUpdateException#getUpdateCounts():::Retrieves the update count for each update statement in the batch update that executed successfully before this exception occurred:::return->Arrays->copyOf
BatchUpdateException#getLargeUpdateCounts():::Retrieves the update count for each update statement in the batch update that executed successfully before this exception occurred:::return->Arrays->copyOf
BatchUpdateException#copyUpdateCount(int[])::: batch update exception copy update count:::copy->new->longArr->for->i->return
BatchUpdateException#copyUpdateCount(long[])::: batch update exception copy update count:::copy->new->intArr->for->i->return
BatchUpdateException#readObject(ObjectInputStream):::readObject is called to restore the state of the BatchUpdateException from a stream.:::fields->s->readFields->tmp->fields->get->tmp2->fields->get->if->throw->new->InvalidObjectException->if->tmp->clone->if->tmp2->clone->if->copyUpdateCount->if->copyUpdateCount
BatchUpdateException#writeObject(ObjectOutputStream):::writeObject is called to save the state of the BatchUpdateException to a stream.:::fields->s->putFields->fields->put->fields->put->s->writeFields
Blob#length():::Returns the number of bytes in the BLOB value designated by this Blob object.:::
Blob#getBytes(long, int):::Retrieves all or part of the BLOB value that this Blob object represents, as an array of bytes:::
Blob#getBinaryStream():::Retrieves the BLOB value designated by this Blob instance as a stream.:::
Blob#position(byte[], long):::Retrieves the byte position at which the specified byte array pattern begins within the BLOB value that this Blob object represents:::
Blob#position(Blob, long):::Retrieves the byte position in the BLOB value designated by this Blob object at which pattern begins:::
Blob#setBytes(long, byte[]):::Writes the given array of bytes to the BLOB value that this Blob object represents, starting at position pos, and returns the number of bytes written:::
Blob#setBytes(long, byte[], int, int):::Writes all or part of the given byte array to the BLOB value that this Blob object represents and returns the number of bytes written:::
Blob#setBinaryStream(long):::Retrieves a stream that can be used to write to the BLOB value that this Blob object represents:::
Blob#truncate(long):::Truncates the BLOB value that this Blob object represents to be len bytes in length:::
Blob#free():::This method frees the Blob object and releases the resources that it holds:::
Blob#getBinaryStream(long, long):::Returns an InputStream object that contains a partial Blob value, starting with the byte specified by pos, which is length bytes in length.:::
CallableStatement#registerOutParameter(int, int):::Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType:::
CallableStatement#registerOutParameter(int, int, int):::Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType:::
CallableStatement#wasNull():::Retrieves whether the last OUT parameter read had the value of SQL NULL:::
CallableStatement#getString(int):::Retrieves the value of the designated JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language:::
CallableStatement#getBoolean(int):::Retrieves the value of the designated JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.:::
CallableStatement#getByte(int):::Retrieves the value of the designated JDBC TINYINT parameter as a byte in the Java programming language.:::
CallableStatement#getShort(int):::Retrieves the value of the designated JDBC SMALLINT parameter as a short in the Java programming language.:::
CallableStatement#getInt(int):::Retrieves the value of the designated JDBC INTEGER parameter as an int in the Java programming language.:::
CallableStatement#getLong(int):::Retrieves the value of the designated JDBC BIGINT parameter as a long in the Java programming language.:::
CallableStatement#getFloat(int):::Retrieves the value of the designated JDBC FLOAT parameter as a float in the Java programming language.:::
CallableStatement#getDouble(int):::Retrieves the value of the designated JDBC DOUBLE parameter as a double in the Java programming language.:::
CallableStatement#getBigDecimal(int, int):::Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with scale digits to the right of the decimal point.:::
CallableStatement#getBytes(int):::Retrieves the value of the designated JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.:::
CallableStatement#getDate(int):::Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object.:::
CallableStatement#getTime(int):::Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object.:::
CallableStatement#getTimestamp(int):::Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object.:::
CallableStatement#getObject(int):::Retrieves the value of the designated parameter as an Object in the Java programming language:::
CallableStatement#getBigDecimal(int):::Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.:::
CallableStatement#getObject(int, java.util.Map>):::Returns an object representing the value of OUT parameter parameterIndex and uses map for the custom mapping of the parameter value:::
CallableStatement#getRef(int):::Retrieves the value of the designated JDBC REF(<structured-type>) parameter as a java.sql.Ref object in the Java programming language.:::
CallableStatement#getBlob(int):::Retrieves the value of the designated JDBC BLOB parameter as a java.sql.Blob object in the Java programming language.:::
CallableStatement#getClob(int):::Retrieves the value of the designated JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.:::
CallableStatement#getArray(int):::Retrieves the value of the designated JDBC ARRAY parameter as an java.sql.Array object in the Java programming language.:::
CallableStatement#getDate(int, Calendar):::Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date:::
CallableStatement#getTime(int, Calendar):::Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time:::
CallableStatement#getTimestamp(int, Calendar):::Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object:::
CallableStatement#registerOutParameter(int, int, String):::Registers the designated output parameter:::
CallableStatement#registerOutParameter(String, int):::Registers the OUT parameter named parameterName to the JDBC type sqlType:::
CallableStatement#registerOutParameter(String, int, int):::Registers the parameter named parameterName to be of JDBC type sqlType:::
CallableStatement#registerOutParameter(String, int, String):::Registers the designated output parameter:::
CallableStatement#getURL(int):::Retrieves the value of the designated JDBC DATALINK parameter as a java.net.URL object.:::
CallableStatement#setURL(String, java.net.URL):::Sets the designated parameter to the given java.net.URL object:::
CallableStatement#setNull(String, int):::Sets the designated parameter to SQL NULL:::
CallableStatement#setBoolean(String, boolean):::Sets the designated parameter to the given Java boolean value:::
CallableStatement#setByte(String, byte):::Sets the designated parameter to the given Java byte value:::
CallableStatement#setShort(String, short):::Sets the designated parameter to the given Java short value:::
CallableStatement#setInt(String, int):::Sets the designated parameter to the given Java int value:::
CallableStatement#setLong(String, long):::Sets the designated parameter to the given Java long value:::
CallableStatement#setFloat(String, float):::Sets the designated parameter to the given Java float value:::
CallableStatement#setDouble(String, double):::Sets the designated parameter to the given Java double value:::
CallableStatement#setBigDecimal(String, BigDecimal):::Sets the designated parameter to the given java.math.BigDecimal value:::
CallableStatement#setString(String, String):::Sets the designated parameter to the given Java String value:::
CallableStatement#setBytes(String, byte[]):::Sets the designated parameter to the given Java array of bytes:::
CallableStatement#setDate(String, java.sql.Date):::Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application:::
CallableStatement#setTime(String, java.sql.Time):::Sets the designated parameter to the given java.sql.Time value:::
CallableStatement#setTimestamp(String, java.sql.Timestamp):::Sets the designated parameter to the given java.sql.Timestamp value:::
CallableStatement#setAsciiStream(String, java.io.InputStream, int):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::
CallableStatement#setBinaryStream(String, java.io.InputStream, int):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::
CallableStatement#setObject(String, Object, int, int):::Sets the value of the designated parameter with the given object:::
CallableStatement#setObject(String, Object, int):::Sets the value of the designated parameter with the given object:::
CallableStatement#setObject(String, Object):::Sets the value of the designated parameter with the given object:::
CallableStatement#setCharacterStream(String, java.io.Reader, int):::Sets the designated parameter to the given Reader object, which is the given number of characters long:::
CallableStatement#setDate(String, java.sql.Date, Calendar):::Sets the designated parameter to the given java.sql.Date value, using the given Calendar object:::
CallableStatement#setTime(String, java.sql.Time, Calendar):::Sets the designated parameter to the given java.sql.Time value, using the given Calendar object:::
CallableStatement#setTimestamp(String, java.sql.Timestamp, Calendar):::Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object:::
CallableStatement#setNull(String, int, String):::Sets the designated parameter to SQL NULL:::
CallableStatement#getString(String):::Retrieves the value of a JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language:::
CallableStatement#getBoolean(String):::Retrieves the value of a JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.:::
CallableStatement#getByte(String):::Retrieves the value of a JDBC TINYINT parameter as a byte in the Java programming language.:::
CallableStatement#getShort(String):::Retrieves the value of a JDBC SMALLINT parameter as a short in the Java programming language.:::
CallableStatement#getInt(String):::Retrieves the value of a JDBC INTEGER parameter as an int in the Java programming language.:::
CallableStatement#getLong(String):::Retrieves the value of a JDBC BIGINT parameter as a long in the Java programming language.:::
CallableStatement#getFloat(String):::Retrieves the value of a JDBC FLOAT parameter as a float in the Java programming language.:::
CallableStatement#getDouble(String):::Retrieves the value of a JDBC DOUBLE parameter as a double in the Java programming language.:::
CallableStatement#getBytes(String):::Retrieves the value of a JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.:::
CallableStatement#getDate(String):::Retrieves the value of a JDBC DATE parameter as a java.sql.Date object.:::
CallableStatement#getTime(String):::Retrieves the value of a JDBC TIME parameter as a java.sql.Time object.:::
CallableStatement#getTimestamp(String):::Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object.:::
CallableStatement#getObject(String):::Retrieves the value of a parameter as an Object in the Java programming language:::
CallableStatement#getBigDecimal(String):::Retrieves the value of a JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.:::
CallableStatement#getObject(String, java.util.Map>):::Returns an object representing the value of OUT parameter parameterName and uses map for the custom mapping of the parameter value:::
CallableStatement#getRef(String):::Retrieves the value of a JDBC REF(<structured-type>) parameter as a java.sql.Ref object in the Java programming language.:::
CallableStatement#getBlob(String):::Retrieves the value of a JDBC BLOB parameter as a java.sql.Blob object in the Java programming language.:::
CallableStatement#getClob(String):::Retrieves the value of a JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.:::
CallableStatement#getArray(String):::Retrieves the value of a JDBC ARRAY parameter as an java.sql.Array object in the Java programming language.:::
CallableStatement#getDate(String, Calendar):::Retrieves the value of a JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date:::
CallableStatement#getTime(String, Calendar):::Retrieves the value of a JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time:::
CallableStatement#getTimestamp(String, Calendar):::Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object:::
CallableStatement#getURL(String):::Retrieves the value of a JDBC DATALINK parameter as a java.net.URL object.:::
CallableStatement#getRowId(int):::Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.:::
CallableStatement#getRowId(String):::Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.:::
CallableStatement#setRowId(String, RowId):::Sets the designated parameter to the given java.sql.RowId object:::
CallableStatement#setNString(String, String):::Sets the designated parameter to the given String object:::
CallableStatement#setNCharacterStream(String, Reader, long):::Sets the designated parameter to a Reader object:::
CallableStatement#setNClob(String, NClob):::Sets the designated parameter to a java.sql.NClob object:::
CallableStatement#setClob(String, Reader, long):::Sets the designated parameter to a Reader object:::
CallableStatement#setBlob(String, InputStream, long):::Sets the designated parameter to an InputStream object:::
CallableStatement#setNClob(String, Reader, long):::Sets the designated parameter to a Reader object:::
CallableStatement#getNClob(int):::Retrieves the value of the designated JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.:::
CallableStatement#getNClob(String):::Retrieves the value of a JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.:::
CallableStatement#setSQLXML(String, SQLXML):::Sets the designated parameter to the given java.sql.SQLXML object:::
CallableStatement#getSQLXML(int):::Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.:::
CallableStatement#getSQLXML(String):::Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.:::
CallableStatement#getNString(int):::Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language:::
CallableStatement#getNString(String)::: Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language:::
CallableStatement#getNCharacterStream(int):::Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language:::
CallableStatement#getNCharacterStream(String):::Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language:::
CallableStatement#getCharacterStream(int):::Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.:::
CallableStatement#getCharacterStream(String):::Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.:::
CallableStatement#setBlob(String, Blob):::Sets the designated parameter to the given java.sql.Blob object:::
CallableStatement#setClob(String, Clob):::Sets the designated parameter to the given java.sql.Clob object:::
CallableStatement#setAsciiStream(String, java.io.InputStream, long):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::
CallableStatement#setBinaryStream(String, java.io.InputStream, long):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::
CallableStatement#setCharacterStream(String, java.io.Reader, long):::Sets the designated parameter to the given Reader object, which is the given number of characters long:::
CallableStatement#setAsciiStream(String, java.io.InputStream):::Sets the designated parameter to the given input stream:::
CallableStatement#setBinaryStream(String, java.io.InputStream):::Sets the designated parameter to the given input stream:::
CallableStatement#setCharacterStream(String, java.io.Reader):::Sets the designated parameter to the given Reader object:::
CallableStatement#setNCharacterStream(String, Reader):::Sets the designated parameter to a Reader object:::
CallableStatement#setClob(String, Reader):::Sets the designated parameter to a Reader object:::
CallableStatement#setBlob(String, InputStream):::Sets the designated parameter to an InputStream object:::
CallableStatement#setNClob(String, Reader):::Sets the designated parameter to a Reader object:::
CallableStatement#getObject(int, Class):::Returns an object representing the value of OUT parameter parameterIndex and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported:::
CallableStatement#getObject(String, Class):::Returns an object representing the value of OUT parameter parameterName and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported:::
CallableStatement#setObject(String, Object, SQLType, int):::Sets the value of the designated parameter with the given object:::throw->new->SQLFeatureNotSupportedException
CallableStatement#setObject(String, Object, SQLType):::Sets the value of the designated parameter with the given object:::throw->new->SQLFeatureNotSupportedException
CallableStatement#registerOutParameter(int, SQLType):::Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType:::throw->new->SQLFeatureNotSupportedException
CallableStatement#registerOutParameter(int, SQLType, int):::Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType:::throw->new->SQLFeatureNotSupportedException
CallableStatement#registerOutParameter(int, SQLType, String):::Registers the designated output parameter:::throw->new->SQLFeatureNotSupportedException
CallableStatement#registerOutParameter(String, SQLType):::Registers the OUT parameter named parameterName to the JDBC type sqlType:::throw->new->SQLFeatureNotSupportedException
CallableStatement#registerOutParameter(String, SQLType, int):::Registers the parameter named parameterName to be of JDBC type sqlType:::throw->new->SQLFeatureNotSupportedException
CallableStatement#registerOutParameter(String, SQLType, String):::Registers the designated output parameter:::throw->new->SQLFeatureNotSupportedException
Clob#length():::Retrieves the number of characters in the CLOB value designated by this Clob object.:::
Clob#getSubString(long, int):::Retrieves a copy of the specified substring in the CLOB value designated by this Clob object:::
Clob#getCharacterStream():::Retrieves the CLOB value designated by this Clob object as a java.io.Reader object (or as a stream of characters).:::
Clob#getAsciiStream():::Retrieves the CLOB value designated by this Clob object as an ascii stream.:::
Clob#position(String, long):::Retrieves the character position at which the specified substring searchstr appears in the SQL CLOB value represented by this Clob object:::
Clob#position(Clob, long):::Retrieves the character position at which the specified Clob object searchstr appears in this Clob object:::
Clob#setString(long, String):::Writes the given Java String to the CLOB value that this Clob object designates at the position pos:::
Clob#setString(long, String, int, int):::Writes len characters of str, starting at character offset, to the CLOB value that this Clob represents:::
Clob#setAsciiStream(long):::Retrieves a stream to be used to write Ascii characters to the CLOB value that this Clob object represents, starting at position pos:::
Clob#setCharacterStream(long):::Retrieves a stream to be used to write a stream of Unicode characters to the CLOB value that this Clob object represents, at position pos:::
Clob#truncate(long):::Truncates the CLOB value that this Clob designates to have a length of len characters:::
Clob#free():::This method releases the resources that the Clob object holds:::
Clob#getCharacterStream(long, long):::Returns a Reader object that contains a partial Clob value, starting with the character specified by pos, which is length characters in length.:::
Connection#createStatement():::Creates a Statement object for sending SQL statements to the database:::
Connection#prepareStatement(String):::Creates a PreparedStatement object for sending parameterized SQL statements to the database:::
Connection#prepareCall(String):::Creates a CallableStatement object for calling database stored procedures:::
Connection#nativeSQL(String):::Converts the given SQL statement into the system's native SQL grammar:::
Connection#setAutoCommit(boolean):::Sets this connection's auto-commit mode to the given state:::
Connection#getAutoCommit():::Retrieves the current auto-commit mode for this Connection object.:::
Connection#commit():::Makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this Connection object:::
Connection#rollback():::Undoes all changes made in the current transaction and releases any database locks currently held by this Connection object:::
Connection#close():::Releases this Connection object's database and JDBC resources immediately instead of waiting for them to be automatically released:::
Connection#isClosed():::Retrieves whether this Connection object has been closed:::
Connection#getMetaData():::Retrieves a DatabaseMetaData object that contains metadata about the database to which this Connection object represents a connection:::
Connection#setReadOnly(boolean):::Puts this connection in read-only mode as a hint to the driver to enable database optimizations:::
Connection#isReadOnly():::Retrieves whether this Connection object is in read-only mode.:::
Connection#setCatalog(String):::Sets the given catalog name in order to select a subspace of this Connection object's database in which to work:::
Connection#getCatalog():::Retrieves this Connection object's current catalog name.:::
Connection#setTransactionIsolation(int):::Attempts to change the transaction isolation level for this Connection object to the one given:::
Connection#getTransactionIsolation():::Retrieves this Connection object's current transaction isolation level.:::
Connection#getWarnings():::Retrieves the first warning reported by calls on this Connection object:::
Connection#clearWarnings():::Clears all warnings reported for this Connection object:::
Connection#createStatement(int, int):::Creates a Statement object that will generate ResultSet objects with the given type and concurrency:::
Connection#prepareStatement(String, int, int):::Creates a PreparedStatement object that will generate ResultSet objects with the given type and concurrency:::
Connection#prepareCall(String, int, int):::Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency:::
Connection#getTypeMap():::Retrieves the Map object associated with this Connection object:::
Connection#setTypeMap(java.util.Map>):::Installs the given TypeMap object as the type map for this Connection object:::
Connection#setHoldability(int):::Changes the default holdability of ResultSet objects created using this Connection object to the given holdability:::
Connection#getHoldability():::Retrieves the current holdability of ResultSet objects created using this Connection object.:::
Connection#setSavepoint():::Creates an unnamed savepoint in the current transaction and returns the new Savepoint object that represents it:::
Connection#setSavepoint(String):::Creates a savepoint with the given name in the current transaction and returns the new Savepoint object that represents it:::
Connection#rollback(Savepoint):::Undoes all changes made after the given Savepoint object was set:::
Connection#releaseSavepoint(Savepoint):::Removes the specified Savepoint  and subsequent Savepoint objects from the current transaction:::
Connection#createStatement(int, int, int):::Creates a Statement object that will generate ResultSet objects with the given type, concurrency, and holdability:::
Connection#prepareStatement(String, int, int, int):::Creates a PreparedStatement object that will generate ResultSet objects with the given type, concurrency, and holdability:::
Connection#prepareCall(String, int, int, int):::Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency:::
Connection#prepareStatement(String, int):::Creates a default PreparedStatement object that has the capability to retrieve auto-generated keys:::
Connection#prepareStatement(String, int[]):::Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array:::
Connection#prepareStatement(String, String[]):::Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array:::
Connection#createClob():::Constructs an object that implements the Clob interface:::
Connection#createBlob():::Constructs an object that implements the Blob interface:::
Connection#createNClob():::Constructs an object that implements the NClob interface:::
Connection#createSQLXML():::Constructs an object that implements the SQLXML interface:::
Connection#isValid(int):::Returns true if the connection has not been closed and is still valid:::
Connection#setClientInfo(String, String):::Sets the value of the client info property specified by name to the value specified by value:::
Connection#setClientInfo(Properties):::Sets the value of the connection's client info properties:::
Connection#getClientInfo(String):::Returns the value of the client info property specified by name:::
Connection#getClientInfo():::Returns a list containing the name and current value of each client info property supported by the driver:::
Connection#createArrayOf(String, Object[]):::Factory method for creating Array objects:::
Connection#createStruct(String, Object[]):::Factory method for creating Struct objects.:::
Connection#setSchema(String):::Sets the given schema name to access:::
Connection#getSchema():::Retrieves this Connection object's current schema name.:::
Connection#abort(Executor):::Terminates an open connection:::
Connection#setNetworkTimeout(Executor, int):::Sets the maximum period a Connection or objects created from the Connection will wait for the database to reply to any one request:::
Connection#getNetworkTimeout():::Retrieves the number of milliseconds the driver will wait for a database request to complete:::
Connection#beginRequest():::Hints to the driver that a request, an independent unit of work, is beginning on this connection:::
Connection#endRequest():::Hints to the driver that a request, an independent unit of work, has completed:::
Connection#setShardingKeyIfValid(ShardingKey, ShardingKey, int):::Sets and validates the sharding keys for this connection:::throw->new->SQLFeatureNotSupportedException
Connection#setShardingKeyIfValid(ShardingKey, int):::Sets and validates the sharding key for this connection:::throw->new->SQLFeatureNotSupportedException
Connection#setShardingKey(ShardingKey, ShardingKey):::Specifies a shardingKey and superShardingKey to use with this Connection:::throw->new->SQLFeatureNotSupportedException
Connection#setShardingKey(ShardingKey):::Specifies a shardingKey to use with this Connection:::throw->new->SQLFeatureNotSupportedException
ConnectionBuilder#user(String):::Specifies the username to be used when creating a connection:::
ConnectionBuilder#password(String):::Specifies the password to be used when creating a connection:::
ConnectionBuilder#shardingKey(ShardingKey):::Specifies a shardingKey to be used when creating a connection:::
ConnectionBuilder#superShardingKey(ShardingKey):::Specifies a superShardingKey to be used when creating a connection:::
ConnectionBuilder#build():::Returns an instance of the object defined by this builder.:::
DatabaseMetaData#allProceduresAreCallable():::Retrieves whether the current user can call all the procedures returned by the method getProcedures.:::
DatabaseMetaData#allTablesAreSelectable():::Retrieves whether the current user can use all the tables returned by the method getTables in a SELECT statement.:::
DatabaseMetaData#getURL():::Retrieves the URL for this DBMS.:::
DatabaseMetaData#getUserName():::Retrieves the user name as known to this database.:::
DatabaseMetaData#isReadOnly():::Retrieves whether this database is in read-only mode.:::
DatabaseMetaData#nullsAreSortedHigh():::Retrieves whether NULL values are sorted high:::
DatabaseMetaData#nullsAreSortedLow():::Retrieves whether NULL values are sorted low:::
DatabaseMetaData#nullsAreSortedAtStart():::Retrieves whether NULL values are sorted at the start regardless of sort order.:::
DatabaseMetaData#nullsAreSortedAtEnd():::Retrieves whether NULL values are sorted at the end regardless of sort order.:::
DatabaseMetaData#getDatabaseProductName():::Retrieves the name of this database product.:::
DatabaseMetaData#getDatabaseProductVersion():::Retrieves the version number of this database product.:::
DatabaseMetaData#getDriverName():::Retrieves the name of this JDBC driver.:::
DatabaseMetaData#getDriverVersion():::Retrieves the version number of this JDBC driver as a String.:::
DatabaseMetaData#getDriverMajorVersion():::Retrieves this JDBC driver's major version number.:::
DatabaseMetaData#getDriverMinorVersion():::Retrieves this JDBC driver's minor version number.:::
DatabaseMetaData#usesLocalFiles():::Retrieves whether this database stores tables in a local file.:::
DatabaseMetaData#usesLocalFilePerTable():::Retrieves whether this database uses a file for each table.:::
DatabaseMetaData#supportsMixedCaseIdentifiers():::Retrieves whether this database treats mixed case unquoted SQL identifiers as case sensitive and as a result stores them in mixed case.:::
DatabaseMetaData#storesUpperCaseIdentifiers():::Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in upper case.:::
DatabaseMetaData#storesLowerCaseIdentifiers():::Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in lower case.:::
DatabaseMetaData#storesMixedCaseIdentifiers():::Retrieves whether this database treats mixed case unquoted SQL identifiers as case insensitive and stores them in mixed case.:::
DatabaseMetaData#supportsMixedCaseQuotedIdentifiers():::Retrieves whether this database treats mixed case quoted SQL identifiers as case sensitive and as a result stores them in mixed case.:::
DatabaseMetaData#storesUpperCaseQuotedIdentifiers():::Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in upper case.:::
DatabaseMetaData#storesLowerCaseQuotedIdentifiers():::Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in lower case.:::
DatabaseMetaData#storesMixedCaseQuotedIdentifiers():::Retrieves whether this database treats mixed case quoted SQL identifiers as case insensitive and stores them in mixed case.:::
DatabaseMetaData#getIdentifierQuoteString():::Retrieves the string used to quote SQL identifiers:::
DatabaseMetaData#getSQLKeywords():::Retrieves a comma-separated list of all of this database's SQL keywords that are NOT also SQL:2003 keywords.:::
DatabaseMetaData#getNumericFunctions():::Retrieves a comma-separated list of math functions available with this database:::
DatabaseMetaData#getStringFunctions():::Retrieves a comma-separated list of string functions available with this database:::
DatabaseMetaData#getSystemFunctions():::Retrieves a comma-separated list of system functions available with this database:::
DatabaseMetaData#getTimeDateFunctions():::Retrieves a comma-separated list of the time and date functions available with this database.:::
DatabaseMetaData#getSearchStringEscape():::Retrieves the string that can be used to escape wildcard characters:::
DatabaseMetaData#getExtraNameCharacters():::Retrieves all the "extra" characters that can be used in unquoted identifier names (those beyond a-z, A-Z, 0-9 and _).:::
DatabaseMetaData#supportsAlterTableWithAddColumn():::Retrieves whether this database supports ALTER TABLE with add column.:::
DatabaseMetaData#supportsAlterTableWithDropColumn():::Retrieves whether this database supports ALTER TABLE with drop column.:::
DatabaseMetaData#supportsColumnAliasing():::Retrieves whether this database supports column aliasing:::
DatabaseMetaData#nullPlusNonNullIsNull():::Retrieves whether this database supports concatenations between NULL and non-NULL values being NULL.:::
DatabaseMetaData#supportsConvert():::Retrieves whether this database supports the JDBC scalar function CONVERT for the conversion of one JDBC type to another:::
DatabaseMetaData#supportsConvert(int, int):::Retrieves whether this database supports the JDBC scalar function CONVERT for conversions between the JDBC types fromType and toType:::
DatabaseMetaData#supportsTableCorrelationNames():::Retrieves whether this database supports table correlation names.:::
DatabaseMetaData#supportsDifferentTableCorrelationNames():::Retrieves whether, when table correlation names are supported, they are restricted to being different from the names of the tables.:::
DatabaseMetaData#supportsExpressionsInOrderBy():::Retrieves whether this database supports expressions in ORDER BY lists.:::
DatabaseMetaData#supportsOrderByUnrelated():::Retrieves whether this database supports using a column that is not in the SELECT statement in an ORDER BY clause.:::
DatabaseMetaData#supportsGroupBy():::Retrieves whether this database supports some form of GROUP BY clause.:::
DatabaseMetaData#supportsGroupByUnrelated():::Retrieves whether this database supports using a column that is not in the SELECT statement in a GROUP BY clause.:::
DatabaseMetaData#supportsGroupByBeyondSelect():::Retrieves whether this database supports using columns not included in the SELECT statement in a GROUP BY clause provided that all of the columns in the SELECT statement are included in the GROUP BY clause.:::
DatabaseMetaData#supportsLikeEscapeClause():::Retrieves whether this database supports specifying a LIKE escape clause.:::
DatabaseMetaData#supportsMultipleResultSets():::Retrieves whether this database supports getting multiple ResultSet objects from a single call to the method execute.:::
DatabaseMetaData#supportsMultipleTransactions():::Retrieves whether this database allows having multiple transactions open at once (on different connections).:::
DatabaseMetaData#supportsNonNullableColumns():::Retrieves whether columns in this database may be defined as non-nullable.:::
DatabaseMetaData#supportsMinimumSQLGrammar():::Retrieves whether this database supports the ODBC Minimum SQL grammar.:::
DatabaseMetaData#supportsCoreSQLGrammar():::Retrieves whether this database supports the ODBC Core SQL grammar.:::
DatabaseMetaData#supportsExtendedSQLGrammar():::Retrieves whether this database supports the ODBC Extended SQL grammar.:::
DatabaseMetaData#supportsANSI92EntryLevelSQL():::Retrieves whether this database supports the ANSI92 entry level SQL grammar.:::
DatabaseMetaData#supportsANSI92IntermediateSQL():::Retrieves whether this database supports the ANSI92 intermediate SQL grammar supported.:::
DatabaseMetaData#supportsANSI92FullSQL():::Retrieves whether this database supports the ANSI92 full SQL grammar supported.:::
DatabaseMetaData#supportsIntegrityEnhancementFacility():::Retrieves whether this database supports the SQL Integrity Enhancement Facility.:::
DatabaseMetaData#supportsOuterJoins():::Retrieves whether this database supports some form of outer join.:::
DatabaseMetaData#supportsFullOuterJoins():::Retrieves whether this database supports full nested outer joins.:::
DatabaseMetaData#supportsLimitedOuterJoins():::Retrieves whether this database provides limited support for outer joins:::
DatabaseMetaData#getSchemaTerm():::Retrieves the database vendor's preferred term for "schema".:::
DatabaseMetaData#getProcedureTerm():::Retrieves the database vendor's preferred term for "procedure".:::
DatabaseMetaData#getCatalogTerm():::Retrieves the database vendor's preferred term for "catalog".:::
DatabaseMetaData#isCatalogAtStart():::Retrieves whether a catalog appears at the start of a fully qualified table name:::
DatabaseMetaData#getCatalogSeparator():::Retrieves the String that this database uses as the separator between a catalog and table name.:::
DatabaseMetaData#supportsSchemasInDataManipulation():::Retrieves whether a schema name can be used in a data manipulation statement.:::
DatabaseMetaData#supportsSchemasInProcedureCalls():::Retrieves whether a schema name can be used in a procedure call statement.:::
DatabaseMetaData#supportsSchemasInTableDefinitions():::Retrieves whether a schema name can be used in a table definition statement.:::
DatabaseMetaData#supportsSchemasInIndexDefinitions():::Retrieves whether a schema name can be used in an index definition statement.:::
DatabaseMetaData#supportsSchemasInPrivilegeDefinitions():::Retrieves whether a schema name can be used in a privilege definition statement.:::
DatabaseMetaData#supportsCatalogsInDataManipulation():::Retrieves whether a catalog name can be used in a data manipulation statement.:::
DatabaseMetaData#supportsCatalogsInProcedureCalls():::Retrieves whether a catalog name can be used in a procedure call statement.:::
DatabaseMetaData#supportsCatalogsInTableDefinitions():::Retrieves whether a catalog name can be used in a table definition statement.:::
DatabaseMetaData#supportsCatalogsInIndexDefinitions():::Retrieves whether a catalog name can be used in an index definition statement.:::
DatabaseMetaData#supportsCatalogsInPrivilegeDefinitions():::Retrieves whether a catalog name can be used in a privilege definition statement.:::
DatabaseMetaData#supportsPositionedDelete():::Retrieves whether this database supports positioned DELETE statements.:::
DatabaseMetaData#supportsPositionedUpdate():::Retrieves whether this database supports positioned UPDATE statements.:::
DatabaseMetaData#supportsSelectForUpdate():::Retrieves whether this database supports SELECT FOR UPDATE statements.:::
DatabaseMetaData#supportsStoredProcedures():::Retrieves whether this database supports stored procedure calls that use the stored procedure escape syntax.:::
DatabaseMetaData#supportsSubqueriesInComparisons():::Retrieves whether this database supports subqueries in comparison expressions.:::
DatabaseMetaData#supportsSubqueriesInExists():::Retrieves whether this database supports subqueries in EXISTS expressions.:::
DatabaseMetaData#supportsSubqueriesInIns():::Retrieves whether this database supports subqueries in IN expressions.:::
DatabaseMetaData#supportsSubqueriesInQuantifieds():::Retrieves whether this database supports subqueries in quantified expressions.:::
DatabaseMetaData#supportsCorrelatedSubqueries():::Retrieves whether this database supports correlated subqueries.:::
DatabaseMetaData#supportsUnion():::Retrieves whether this database supports SQL UNION.:::
DatabaseMetaData#supportsUnionAll():::Retrieves whether this database supports SQL UNION ALL.:::
DatabaseMetaData#supportsOpenCursorsAcrossCommit():::Retrieves whether this database supports keeping cursors open across commits.:::
DatabaseMetaData#supportsOpenCursorsAcrossRollback():::Retrieves whether this database supports keeping cursors open across rollbacks.:::
DatabaseMetaData#supportsOpenStatementsAcrossCommit():::Retrieves whether this database supports keeping statements open across commits.:::
DatabaseMetaData#supportsOpenStatementsAcrossRollback():::Retrieves whether this database supports keeping statements open across rollbacks.:::
DatabaseMetaData#getMaxBinaryLiteralLength():::Retrieves the maximum number of hex characters this database allows in an inline binary literal.:::
DatabaseMetaData#getMaxCharLiteralLength():::Retrieves the maximum number of characters this database allows for a character literal.:::
DatabaseMetaData#getMaxColumnNameLength():::Retrieves the maximum number of characters this database allows for a column name.:::
DatabaseMetaData#getMaxColumnsInGroupBy():::Retrieves the maximum number of columns this database allows in a GROUP BY clause.:::
DatabaseMetaData#getMaxColumnsInIndex():::Retrieves the maximum number of columns this database allows in an index.:::
DatabaseMetaData#getMaxColumnsInOrderBy():::Retrieves the maximum number of columns this database allows in an ORDER BY clause.:::
DatabaseMetaData#getMaxColumnsInSelect():::Retrieves the maximum number of columns this database allows in a SELECT list.:::
DatabaseMetaData#getMaxColumnsInTable():::Retrieves the maximum number of columns this database allows in a table.:::
DatabaseMetaData#getMaxConnections():::Retrieves the maximum number of concurrent connections to this database that are possible.:::
DatabaseMetaData#getMaxCursorNameLength():::Retrieves the maximum number of characters that this database allows in a cursor name.:::
DatabaseMetaData#getMaxIndexLength():::Retrieves the maximum number of bytes this database allows for an index, including all of the parts of the index.:::
DatabaseMetaData#getMaxSchemaNameLength():::Retrieves the maximum number of characters that this database allows in a schema name.:::
DatabaseMetaData#getMaxProcedureNameLength():::Retrieves the maximum number of characters that this database allows in a procedure name.:::
DatabaseMetaData#getMaxCatalogNameLength():::Retrieves the maximum number of characters that this database allows in a catalog name.:::
DatabaseMetaData#getMaxRowSize():::Retrieves the maximum number of bytes this database allows in a single row.:::
DatabaseMetaData#doesMaxRowSizeIncludeBlobs():::Retrieves whether the return value for the method getMaxRowSize includes the SQL data types LONGVARCHAR and LONGVARBINARY.:::
DatabaseMetaData#getMaxStatementLength():::Retrieves the maximum number of characters this database allows in an SQL statement.:::
DatabaseMetaData#getMaxStatements():::Retrieves the maximum number of active statements to this database that can be open at the same time.:::
DatabaseMetaData#getMaxTableNameLength():::Retrieves the maximum number of characters this database allows in a table name.:::
DatabaseMetaData#getMaxTablesInSelect():::Retrieves the maximum number of tables this database allows in a SELECT statement.:::
DatabaseMetaData#getMaxUserNameLength():::Retrieves the maximum number of characters this database allows in a user name.:::
DatabaseMetaData#getDefaultTransactionIsolation():::Retrieves this database's default transaction isolation level:::
DatabaseMetaData#supportsTransactions():::Retrieves whether this database supports transactions:::
DatabaseMetaData#supportsTransactionIsolationLevel(int):::Retrieves whether this database supports the given transaction isolation level.:::
DatabaseMetaData#supportsDataDefinitionAndDataManipulationTransactions():::Retrieves whether this database supports both data definition and data manipulation statements within a transaction.:::
DatabaseMetaData#supportsDataManipulationTransactionsOnly():::Retrieves whether this database supports only data manipulation statements within a transaction.:::
DatabaseMetaData#dataDefinitionCausesTransactionCommit():::Retrieves whether a data definition statement within a transaction forces the transaction to commit.:::
DatabaseMetaData#dataDefinitionIgnoredInTransactions():::Retrieves whether this database ignores a data definition statement within a transaction.:::
DatabaseMetaData#getProcedures(String, String, String):::Retrieves a description of the stored procedures available in the given catalog:::
DatabaseMetaData#getProcedureColumns(String, String, String, String):::Retrieves a description of the given catalog's stored procedure parameter and result columns:::
DatabaseMetaData#getTables(String, String, String, String[]):::Retrieves a description of the tables available in the given catalog:::
DatabaseMetaData#getSchemas():::Retrieves the schema names available in this database:::
DatabaseMetaData#getCatalogs():::Retrieves the catalog names available in this database:::
DatabaseMetaData#getTableTypes():::Retrieves the table types available in this database:::
DatabaseMetaData#getColumns(String, String, String, String):::Retrieves a description of table columns available in the specified catalog:::
DatabaseMetaData#getColumnPrivileges(String, String, String, String):::Retrieves a description of the access rights for a table's columns:::
DatabaseMetaData#getTablePrivileges(String, String, String):::Retrieves a description of the access rights for each table available in a catalog:::
DatabaseMetaData#getBestRowIdentifier(String, String, String, int, boolean):::Retrieves a description of a table's optimal set of columns that uniquely identifies a row:::
DatabaseMetaData#getVersionColumns(String, String, String):::Retrieves a description of a table's columns that are automatically updated when any value in a row is updated:::
DatabaseMetaData#getPrimaryKeys(String, String, String):::Retrieves a description of the given table's primary key columns:::
DatabaseMetaData#getImportedKeys(String, String, String):::Retrieves a description of the primary key columns that are referenced by the given table's foreign key columns (the primary keys imported by a table):::
DatabaseMetaData#getExportedKeys(String, String, String):::Retrieves a description of the foreign key columns that reference the given table's primary key columns (the foreign keys exported by a table):::
DatabaseMetaData#getCrossReference(String, String, String, String, String, String):::Retrieves a description of the foreign key columns in the given foreign key table that reference the primary key or the columns representing a unique constraint of the  parent table (could be the same or a different table):::
DatabaseMetaData#getTypeInfo():::Retrieves a description of all the data types supported by this database:::
DatabaseMetaData#getIndexInfo(String, String, String, boolean, boolean):::Retrieves a description of the given table's indices and statistics:::
DatabaseMetaData#supportsResultSetType(int):::Retrieves whether this database supports the given result set type.:::
DatabaseMetaData#supportsResultSetConcurrency(int, int):::Retrieves whether this database supports the given concurrency type in combination with the given result set type.:::
DatabaseMetaData#ownUpdatesAreVisible(int):::Retrieves whether for the given type of ResultSet object, the result set's own updates are visible.:::
DatabaseMetaData#ownDeletesAreVisible(int):::Retrieves whether a result set's own deletes are visible.:::
DatabaseMetaData#ownInsertsAreVisible(int):::Retrieves whether a result set's own inserts are visible.:::
DatabaseMetaData#othersUpdatesAreVisible(int):::Retrieves whether updates made by others are visible.:::
DatabaseMetaData#othersDeletesAreVisible(int):::Retrieves whether deletes made by others are visible.:::
DatabaseMetaData#othersInsertsAreVisible(int):::Retrieves whether inserts made by others are visible.:::
DatabaseMetaData#updatesAreDetected(int):::Retrieves whether or not a visible row update can be detected by calling the method ResultSet.rowUpdated.:::
DatabaseMetaData#deletesAreDetected(int):::Retrieves whether or not a visible row delete can be detected by calling the method ResultSet.rowDeleted:::
DatabaseMetaData#insertsAreDetected(int):::Retrieves whether or not a visible row insert can be detected by calling the method ResultSet.rowInserted.:::
DatabaseMetaData#supportsBatchUpdates():::Retrieves whether this database supports batch updates.:::
DatabaseMetaData#getUDTs(String, String, String, int[]):::Retrieves a description of the user-defined types (UDTs) defined in a particular schema:::
DatabaseMetaData#getConnection():::Retrieves the connection that produced this metadata object.:::
DatabaseMetaData#supportsSavepoints():::Retrieves whether this database supports savepoints.:::
DatabaseMetaData#supportsNamedParameters():::Retrieves whether this database supports named parameters to callable statements.:::
DatabaseMetaData#supportsMultipleOpenResults():::Retrieves whether it is possible to have multiple ResultSet objects returned from a CallableStatement object simultaneously.:::
DatabaseMetaData#supportsGetGeneratedKeys():::Retrieves whether auto-generated keys can be retrieved after a statement has been executed:::
DatabaseMetaData#getSuperTypes(String, String, String):::Retrieves a description of the user-defined type (UDT) hierarchies defined in a particular schema in this database:::
DatabaseMetaData#getSuperTables(String, String, String):::Retrieves a description of the table hierarchies defined in a particular schema in this database:::
DatabaseMetaData#getAttributes(String, String, String, String):::Retrieves a description of the given attribute of the given type for a user-defined type (UDT) that is available in the given schema and catalog:::
DatabaseMetaData#supportsResultSetHoldability(int):::Retrieves whether this database supports the given result set holdability.:::
DatabaseMetaData#getResultSetHoldability():::Retrieves this database's default holdability for ResultSet objects.:::
DatabaseMetaData#getDatabaseMajorVersion():::Retrieves the major version number of the underlying database.:::
DatabaseMetaData#getDatabaseMinorVersion():::Retrieves the minor version number of the underlying database.:::
DatabaseMetaData#getJDBCMajorVersion():::Retrieves the major JDBC version number for this driver.:::
DatabaseMetaData#getJDBCMinorVersion():::Retrieves the minor JDBC version number for this driver.:::
DatabaseMetaData#getSQLStateType():::Indicates whether the SQLSTATE returned by SQLException.getSQLState is X/Open (now known as Open Group) SQL CLI or SQL:2003.:::
DatabaseMetaData#locatorsUpdateCopy():::Indicates whether updates made to a LOB are made on a copy or directly to the LOB.:::
DatabaseMetaData#supportsStatementPooling():::Retrieves whether this database supports statement pooling.:::
DatabaseMetaData#getRowIdLifetime():::Indicates whether this data source supports the SQL ROWID type, and the lifetime for which a RowId object remains valid.:::
DatabaseMetaData#getSchemas(String, String):::Retrieves the schema names available in this database:::
DatabaseMetaData#supportsStoredFunctionsUsingCallSyntax():::Retrieves whether this database supports invoking user-defined or vendor functions using the stored procedure escape syntax.:::
DatabaseMetaData#autoCommitFailureClosesAllResultSets():::Retrieves whether a SQLException while autoCommit is true indicates that all open ResultSets are closed, even ones that are holdable:::
DatabaseMetaData#getClientInfoProperties():::Retrieves a list of the client info properties that the driver supports:::
DatabaseMetaData#getFunctions(String, String, String):::Retrieves a description of the  system and user functions available in the given catalog:::
DatabaseMetaData#getFunctionColumns(String, String, String, String):::Retrieves a description of the given catalog's system or user function parameters and return type:::
DatabaseMetaData#getPseudoColumns(String, String, String, String):::Retrieves a description of the pseudo or hidden columns available in a given table within the specified catalog and schema:::
DatabaseMetaData#generatedKeyAlwaysReturned():::Retrieves whether a generated key will always be returned if the column name(s) or index(es) specified for the auto generated key column(s) are valid and the statement succeeds:::
DatabaseMetaData#getMaxLogicalLobSize():::Retrieves the maximum number of bytes this database allows for the logical size for a LOB:::return
DatabaseMetaData#supportsRefCursors():::Retrieves whether this database supports REF CURSOR:::return
DatabaseMetaData#supportsSharding():::Retrieves whether this database supports sharding.:::return
DataTruncation#getIndex():::Retrieves the index of the column or parameter that was truncated:::return
DataTruncation#getParameter():::Indicates whether the value truncated was a parameter value or a column value.:::return
DataTruncation#getRead():::Indicates whether or not the value was truncated on a read.:::return
DataTruncation#getDataSize():::Gets the number of bytes of data that should have been transferred:::return
DataTruncation#getTransferSize():::Gets the number of bytes of data actually transferred:::return
Date#setTime(long):::Sets an existing Date object using the given milliseconds time value:::super->setTime
Date#valueOf(String):::Converts a string in JDBC date escape format to a Date value.:::if->throw->new->java.lang.IllegalArgumentException->YEAR_LENGTH->MONTH_LENGTH->DAY_LENGTH->MAX_MONTH->MAX_DAY->d->firstDash->s->indexOf->secondDash->s->indexOf->len->s->length->if->if->year->Integer->parseInt->month->Integer->parseInt->day->Integer->parseInt->if->new->Date->if->throw->new->java.lang.IllegalArgumentException->return
Date#toString():::Formats a date in the date escape format yyyy-mm-dd.:::year->super->getYear->month->super->getMonth->day->super->getDate->buf->new->charArr->formatDecimalInt->Date->formatDecimalInt->Date->formatDecimalInt->return->new->String
Date#formatDecimalInt(int, char[], int, int):::Formats an unsigned integer into a char array in decimal output format:::charPos->do->while
Date#getHours():::This method is deprecated and should not be used because SQL Date values do not have a time component.:::throw->new->java.lang.IllegalArgumentException
Date#getMinutes():::This method is deprecated and should not be used because SQL Date values do not have a time component.:::throw->new->java.lang.IllegalArgumentException
Date#getSeconds():::This method is deprecated and should not be used because SQL Date values do not have a time component.:::throw->new->java.lang.IllegalArgumentException
Date#setHours(int):::This method is deprecated and should not be used because SQL Date values do not have a time component.:::throw->new->java.lang.IllegalArgumentException
Date#setMinutes(int):::This method is deprecated and should not be used because SQL Date values do not have a time component.:::throw->new->java.lang.IllegalArgumentException
Date#setSeconds(int):::This method is deprecated and should not be used because SQL Date values do not have a time component.:::throw->new->java.lang.IllegalArgumentException
Date#valueOf(LocalDate):::Obtains an instance of Date from a LocalDate object with the same year, month and day of month value as the given LocalDate:::return->date->getYear->date->getMonthValue->date->getDayOfMonth->new->Date
Date#toLocalDate():::Creates a LocalDate instance using the year, month and day from this Date object.:::return->LocalDate->getYear->getMonth->getDate->of
Date#toInstant():::This method always throws an UnsupportedOperationException and should not be used because SQL Date values do not have a time component.:::throw->new->java.lang.UnsupportedOperationException
Driver#connect(String, java.util.Properties):::Attempts to make a database connection to the given URL:::
Driver#acceptsURL(String):::Retrieves whether the driver thinks that it can open a connection to the given URL:::
Driver#getPropertyInfo(String, java.util.Properties):::Gets information about the possible properties for this driver:::
Driver#getMajorVersion():::Retrieves the driver's major version number:::
Driver#getMinorVersion():::Gets the driver's minor version number:::
Driver#jdbcCompliant():::Reports whether this driver is a genuine JDBC Compliant™ driver:::
Driver#getParentLogger():::Return the parent Logger of all the Loggers used by this driver:::
DriverAction#deregister():::Method called by DriverManager#deregisterDriver(Driver)   to notify the JDBC driver that it was de-registered:::
DriverManager#getLogWriter():::Retrieves the log writer:::return
DriverManager#setLogWriter(java.io.PrintWriter):::Sets the logging/tracing PrintWriter object that is used by the DriverManager and all drivers:::sec->System->getSecurityManager->if->sec->checkPermission
DriverManager#getConnection(String, java.util.Properties):::Attempts to establish a connection to the given database URL:::return->Reflection->getCallerClass->getConnection
DriverManager#getConnection(String, String, String):::Attempts to establish a connection to the given database URL:::info->new->java.util.Properties->if->info->put->if->info->put->return->Reflection->getCallerClass->getConnection
DriverManager#getConnection(String):::Attempts to establish a connection to the given database URL:::info->new->java.util.Properties->return->Reflection->getCallerClass->getConnection
DriverManager#getDriver(String):::Attempts to locate a driver that understands the given URL:::println->ensureDriversInitialized->callerClass->Reflection->getCallerClass->foreach->if->isDriverAllowed->try->if->acceptsURL->getClass->getName->println->return->catch->finally->else->getClass->getName->println->println->throw->new->SQLException
DriverManager#registerDriver(java.sql.Driver):::Registers the given driver with the DriverManager:::registerDriver
DriverManager#registerDriver(java.sql.Driver, DriverAction):::Registers the given driver with the DriverManager:::if->registeredDrivers->new->DriverInfo->addIfAbsent->else->throw->new->NullPointerException->println
DriverManager#deregisterDriver(Driver):::Removes the specified driver from the DriverManager's list of registered drivers:::if->return->sec->System->getSecurityManager->if->sec->checkPermission->println->aDriver->new->DriverInfo->synchronized->if->registeredDrivers->contains->if->Reflection->getCallerClass->isDriverAllowed->di->registeredDrivers->registeredDrivers->indexOf->get->if->di->action->di->action->deregister->registeredDrivers->remove->else->throw->new->SecurityException->else->println
DriverManager#getDrivers():::Retrieves an Enumeration with all of the currently loaded JDBC drivers to which the current caller has access:::ensureDriversInitialized->return->Collections->Reflection->getCallerClass->getDrivers->enumeration
DriverManager#drivers():::Retrieves a Stream with all of the currently loaded JDBC drivers to which the current caller has access.:::ensureDriversInitialized->return->Reflection->getCallerClass->getDrivers->stream
DriverManager#getDrivers(Class)::: driver manager get drivers:::result->new->ArrayList<>->foreach->if->isDriverAllowed->result->add->else->aDriver->getClass->getName->println->return
DriverManager#setLoginTimeout(int):::Sets the maximum time in seconds that a driver will wait while attempting to connect to a database once the driver has been identified.:::
DriverManager#getLoginTimeout():::Gets the maximum time in seconds that a driver can wait when attempting to log in to a database.:::return
DriverManager#setLogStream(java.io.PrintStream):::Sets the logging/tracing PrintStream that is used by the DriverManager and all drivers:::sec->System->getSecurityManager->if->sec->checkPermission->if->new->java.io.PrintWriter->else
DriverManager#getLogStream():::Retrieves the logging/tracing PrintStream that is used by the DriverManager and all drivers.:::return
DriverManager#println(String):::Prints a message to the current JDBC log stream.:::synchronized->if->logWriter->println->logWriter->flush
DriverManager#isDriverAllowed(Driver, Class)::: driver manager is driver allowed:::callerCL->caller->getClassLoader->return->isDriverAllowed
DriverManager#isDriverAllowed(Driver, ClassLoader)::: driver manager is driver allowed:::result->if->aClass->try->Class->driver->getClass->getName->forName->catch->finally->driver->getClass->return
DriverManager#ensureDriversInitialized()::: driver manager ensure drivers initialized:::if->return->synchronized->if->return->drivers->try->AccessController->new->PrivilegedAction<String>->doPrivileged->catch->finally->AccessController->new->PrivilegedAction<Void>->doPrivileged->println->if->drivers->equals->driversList->drivers->split->println->foreach->try->println->Class->ClassLoader->getSystemClassLoader->forName->catch->println->finally->println
DriverManager#getConnection(String, java.util.Properties, Class)::: driver manager get connection:::callerCL->caller->getClassLoader->if->ClassLoader->getPlatformClassLoader->Thread->currentThread->getContextClassLoader->if->throw->new->SQLException->println->ensureDriversInitialized->reason->foreach->if->isDriverAllowed->try->getClass->getName->println->con->connect->if->getClass->getName->println->return->catch->if->finally->else->aDriver->getClass->getName->println->if->println->throw->println->throw->new->SQLException
DriverInfo#equals(Object)::: driver info equals:::return
DriverInfo#hashCode()::: driver info hash code:::return->driver->hashCode
DriverInfo#toString()::: driver info to string:::return
DriverInfo#action()::: driver info action:::return
ParameterMetaData#getParameterCount():::Retrieves the number of parameters in the PreparedStatement object for which this ParameterMetaData object contains information.:::
ParameterMetaData#isNullable(int):::Retrieves whether null values are allowed in the designated parameter.:::
ParameterMetaData#isSigned(int):::Retrieves whether values for the designated parameter can be signed numbers.:::
ParameterMetaData#getPrecision(int):::Retrieves the designated parameter's specified column size:::
ParameterMetaData#getScale(int):::Retrieves the designated parameter's number of digits to right of the decimal point:::
ParameterMetaData#getParameterType(int):::Retrieves the designated parameter's SQL type.:::
ParameterMetaData#getParameterTypeName(int):::Retrieves the designated parameter's database-specific type name.:::
ParameterMetaData#getParameterClassName(int):::Retrieves the fully-qualified name of the Java class whose instances should be passed to the method PreparedStatement.setObject.:::
ParameterMetaData#getParameterMode(int):::Retrieves the designated parameter's mode.:::
PreparedStatement#executeQuery():::Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.:::
PreparedStatement#executeUpdate():::Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement.:::
PreparedStatement#setNull(int, int):::Sets the designated parameter to SQL NULL:::
PreparedStatement#setBoolean(int, boolean):::Sets the designated parameter to the given Java boolean value:::
PreparedStatement#setByte(int, byte):::Sets the designated parameter to the given Java byte value:::
PreparedStatement#setShort(int, short):::Sets the designated parameter to the given Java short value:::
PreparedStatement#setInt(int, int):::Sets the designated parameter to the given Java int value:::
PreparedStatement#setLong(int, long):::Sets the designated parameter to the given Java long value:::
PreparedStatement#setFloat(int, float):::Sets the designated parameter to the given Java float value:::
PreparedStatement#setDouble(int, double):::Sets the designated parameter to the given Java double value:::
PreparedStatement#setBigDecimal(int, BigDecimal):::Sets the designated parameter to the given java.math.BigDecimal value:::
PreparedStatement#setString(int, String):::Sets the designated parameter to the given Java String value:::
PreparedStatement#setBytes(int, byte[]):::Sets the designated parameter to the given Java array of bytes:::
PreparedStatement#setDate(int, java.sql.Date):::Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application:::
PreparedStatement#setTime(int, java.sql.Time):::Sets the designated parameter to the given java.sql.Time value:::
PreparedStatement#setTimestamp(int, java.sql.Timestamp):::Sets the designated parameter to the given java.sql.Timestamp value:::
PreparedStatement#setAsciiStream(int, java.io.InputStream, int):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::
PreparedStatement#setUnicodeStream(int, java.io.InputStream, int):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::
PreparedStatement#setBinaryStream(int, java.io.InputStream, int):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::
PreparedStatement#clearParameters():::Clears the current parameter values immediately:::
PreparedStatement#setObject(int, Object, int):::Sets the value of the designated parameter with the given object:::
PreparedStatement#setObject(int, Object):::Sets the value of the designated parameter using the given object:::
PreparedStatement#execute():::Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement:::
PreparedStatement#addBatch():::Adds a set of parameters to this PreparedStatement object's batch of commands.:::
PreparedStatement#setCharacterStream(int, java.io.Reader, int):::Sets the designated parameter to the given Reader object, which is the given number of characters long:::
PreparedStatement#setRef(int, Ref):::Sets the designated parameter to the given  REF(<structured-type>) value:::
PreparedStatement#setBlob(int, Blob):::Sets the designated parameter to the given java.sql.Blob object:::
PreparedStatement#setClob(int, Clob):::Sets the designated parameter to the given java.sql.Clob object:::
PreparedStatement#setArray(int, Array):::Sets the designated parameter to the given java.sql.Array object:::
PreparedStatement#getMetaData():::Retrieves a ResultSetMetaData object that contains information about the columns of the ResultSet object that will be returned when this PreparedStatement object is executed:::
PreparedStatement#setDate(int, java.sql.Date, Calendar):::Sets the designated parameter to the given java.sql.Date value, using the given Calendar object:::
PreparedStatement#setTime(int, java.sql.Time, Calendar):::Sets the designated parameter to the given java.sql.Time value, using the given Calendar object:::
PreparedStatement#setTimestamp(int, java.sql.Timestamp, Calendar):::Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object:::
PreparedStatement#setNull(int, int, String):::Sets the designated parameter to SQL NULL:::
PreparedStatement#setURL(int, java.net.URL):::Sets the designated parameter to the given java.net.URL value:::
PreparedStatement#getParameterMetaData():::Retrieves the number, types and properties of this PreparedStatement object's parameters.:::
PreparedStatement#setRowId(int, RowId):::Sets the designated parameter to the given java.sql.RowId object:::
PreparedStatement#setNString(int, String):::Sets the designated parameter to the given String object:::
PreparedStatement#setNCharacterStream(int, Reader, long):::Sets the designated parameter to a Reader object:::
PreparedStatement#setNClob(int, NClob):::Sets the designated parameter to a java.sql.NClob object:::
PreparedStatement#setClob(int, Reader, long):::Sets the designated parameter to a Reader object:::
PreparedStatement#setBlob(int, InputStream, long):::Sets the designated parameter to a InputStream object:::
PreparedStatement#setNClob(int, Reader, long):::Sets the designated parameter to a Reader object:::
PreparedStatement#setSQLXML(int, SQLXML):::Sets the designated parameter to the given java.sql.SQLXML object:::
PreparedStatement#setObject(int, Object, int, int):::Sets the value of the designated parameter with the given object:::
PreparedStatement#setAsciiStream(int, java.io.InputStream, long):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::
PreparedStatement#setBinaryStream(int, java.io.InputStream, long):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::
PreparedStatement#setCharacterStream(int, java.io.Reader, long):::Sets the designated parameter to the given Reader object, which is the given number of characters long:::
PreparedStatement#setAsciiStream(int, java.io.InputStream):::Sets the designated parameter to the given input stream:::
PreparedStatement#setBinaryStream(int, java.io.InputStream):::Sets the designated parameter to the given input stream:::
PreparedStatement#setCharacterStream(int, java.io.Reader):::Sets the designated parameter to the given Reader object:::
PreparedStatement#setNCharacterStream(int, Reader):::Sets the designated parameter to a Reader object:::
PreparedStatement#setClob(int, Reader):::Sets the designated parameter to a Reader object:::
PreparedStatement#setBlob(int, InputStream):::Sets the designated parameter to a InputStream object:::
PreparedStatement#setNClob(int, Reader):::Sets the designated parameter to a Reader object:::
PreparedStatement#setObject(int, Object, SQLType, int):::Sets the value of the designated parameter with the given object:::throw->new->SQLFeatureNotSupportedException
PreparedStatement#setObject(int, Object, SQLType):::Sets the value of the designated parameter with the given object:::throw->new->SQLFeatureNotSupportedException
PreparedStatement#executeLargeUpdate():::Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement:::throw->new->UnsupportedOperationException
Ref#getBaseTypeName():::Retrieves the fully-qualified SQL name of the SQL structured type that this Ref object references.:::
Ref#getObject(java.util.Map>):::Retrieves the referenced object and maps it to a Java type using the given type map.:::
Ref#getObject():::Retrieves the SQL structured type instance referenced by this Ref object:::
Ref#setObject(Object):::Sets the structured type value that this Ref object references to the given instance of Object:::
ResultSet#next():::Moves the cursor forward one row from its current position:::
ResultSet#close():::Releases this ResultSet object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed:::
ResultSet#wasNull():::Reports whether the last column read had a value of SQL NULL:::
ResultSet#getString(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.:::
ResultSet#getBoolean(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language:::
ResultSet#getByte(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language.:::
ResultSet#getShort(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language.:::
ResultSet#getInt(int):::Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language.:::
ResultSet#getLong(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language.:::
ResultSet#getFloat(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language.:::
ResultSet#getDouble(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language.:::
ResultSet#getBigDecimal(int, int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.BigDecimal in the Java programming language.:::
ResultSet#getBytes(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language:::
ResultSet#getDate(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.:::
ResultSet#getTime(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.:::
ResultSet#getTimestamp(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.:::
ResultSet#getAsciiStream(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters:::
ResultSet#getUnicodeStream(int):::Retrieves the value of the designated column in the current row of this ResultSet object as as a stream of two-byte 3 characters:::
ResultSet#getBinaryStream(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a  stream of uninterpreted bytes:::
ResultSet#getString(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.:::
ResultSet#getBoolean(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language:::
ResultSet#getByte(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language.:::
ResultSet#getShort(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language.:::
ResultSet#getInt(String):::Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language.:::
ResultSet#getLong(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language.:::
ResultSet#getFloat(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language.:::
ResultSet#getDouble(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language.:::
ResultSet#getBigDecimal(String, int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal in the Java programming language.:::
ResultSet#getBytes(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language:::
ResultSet#getDate(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.:::
ResultSet#getTime(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.:::
ResultSet#getTimestamp(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.:::
ResultSet#getAsciiStream(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters:::
ResultSet#getUnicodeStream(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a stream of two-byte Unicode characters:::
ResultSet#getBinaryStream(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a stream of uninterpreted bytes:::
ResultSet#getWarnings():::Retrieves the first warning reported by calls on this ResultSet object:::
ResultSet#clearWarnings():::Clears all warnings reported on this ResultSet object:::
ResultSet#getCursorName():::Retrieves the name of the SQL cursor used by this ResultSet object:::
ResultSet#getMetaData():::Retrieves the  number, types and properties of this ResultSet object's columns.:::
ResultSet#getObject(int):::Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language:::
ResultSet#getObject(String):::Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language:::
ResultSet#findColumn(String):::Maps the given ResultSet column label to its ResultSet column index.:::
ResultSet#getCharacterStream(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.:::
ResultSet#getCharacterStream(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.:::
ResultSet#getBigDecimal(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision.:::
ResultSet#getBigDecimal(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision.:::
ResultSet#isBeforeFirst():::Retrieves whether the cursor is before the first row in this ResultSet object:::
ResultSet#isAfterLast():::Retrieves whether the cursor is after the last row in this ResultSet object:::
ResultSet#isFirst():::Retrieves whether the cursor is on the first row of this ResultSet object:::
ResultSet#isLast():::Retrieves whether the cursor is on the last row of this ResultSet object:::
ResultSet#beforeFirst():::Moves the cursor to the front of this ResultSet object, just before the first row:::
ResultSet#afterLast():::Moves the cursor to the end of this ResultSet object, just after the last row:::
ResultSet#first():::Moves the cursor to the first row in this ResultSet object.:::
ResultSet#last():::Moves the cursor to the last row in this ResultSet object.:::
ResultSet#getRow():::Retrieves the current row number:::
ResultSet#absolute(int):::Moves the cursor to the given row number in this ResultSet object:::
ResultSet#relative(int):::Moves the cursor a relative number of rows, either positive or negative:::
ResultSet#previous():::Moves the cursor to the previous row in this ResultSet object:::
ResultSet#setFetchDirection(int):::Gives a hint as to the direction in which the rows in this ResultSet object will be processed:::
ResultSet#getFetchDirection():::Retrieves the fetch direction for this ResultSet object.:::
ResultSet#setFetchSize(int):::Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this ResultSet object:::
ResultSet#getFetchSize():::Retrieves the fetch size for this ResultSet object.:::
ResultSet#getType():::Retrieves the type of this ResultSet object:::
ResultSet#getConcurrency():::Retrieves the concurrency mode of this ResultSet object:::
ResultSet#rowUpdated():::Retrieves whether the current row has been updated:::
ResultSet#rowInserted():::Retrieves whether the current row has had an insertion:::
ResultSet#rowDeleted():::Retrieves whether a row has been deleted:::
ResultSet#updateNull(int):::Updates the designated column with a null value:::
ResultSet#updateBoolean(int, boolean):::Updates the designated column with a boolean value:::
ResultSet#updateByte(int, byte):::Updates the designated column with a byte value:::
ResultSet#updateShort(int, short):::Updates the designated column with a short value:::
ResultSet#updateInt(int, int):::Updates the designated column with an int value:::
ResultSet#updateLong(int, long):::Updates the designated column with a long value:::
ResultSet#updateFloat(int, float):::Updates the designated column with a float value:::
ResultSet#updateDouble(int, double):::Updates the designated column with a double value:::
ResultSet#updateBigDecimal(int, BigDecimal):::Updates the designated column with a java.math.BigDecimal value:::
ResultSet#updateString(int, String):::Updates the designated column with a String value:::
ResultSet#updateBytes(int, byte[]):::Updates the designated column with a byte array value:::
ResultSet#updateDate(int, java.sql.Date):::Updates the designated column with a java.sql.Date value:::
ResultSet#updateTime(int, java.sql.Time):::Updates the designated column with a java.sql.Time value:::
ResultSet#updateTimestamp(int, java.sql.Timestamp):::Updates the designated column with a java.sql.Timestamp value:::
ResultSet#updateAsciiStream(int, java.io.InputStream, int):::Updates the designated column with an ascii stream value, which will have the specified number of bytes:::
ResultSet#updateBinaryStream(int, java.io.InputStream, int):::Updates the designated column with a binary stream value, which will have the specified number of bytes:::
ResultSet#updateCharacterStream(int, java.io.Reader, int):::Updates the designated column with a character stream value, which will have the specified number of bytes:::
ResultSet#updateObject(int, Object, int):::Updates the designated column with an Object value:::
ResultSet#updateObject(int, Object):::Updates the designated column with an Object value:::
ResultSet#updateNull(String):::Updates the designated column with a null value:::
ResultSet#updateBoolean(String, boolean):::Updates the designated column with a boolean value:::
ResultSet#updateByte(String, byte):::Updates the designated column with a byte value:::
ResultSet#updateShort(String, short):::Updates the designated column with a short value:::
ResultSet#updateInt(String, int):::Updates the designated column with an int value:::
ResultSet#updateLong(String, long):::Updates the designated column with a long value:::
ResultSet#updateFloat(String, float):::Updates the designated column with a float  value:::
ResultSet#updateDouble(String, double):::Updates the designated column with a double value:::
ResultSet#updateBigDecimal(String, BigDecimal):::Updates the designated column with a java.sql.BigDecimal value:::
ResultSet#updateString(String, String):::Updates the designated column with a String value:::
ResultSet#updateBytes(String, byte[]):::Updates the designated column with a byte array value:::
ResultSet#updateDate(String, java.sql.Date):::Updates the designated column with a java.sql.Date value:::
ResultSet#updateTime(String, java.sql.Time):::Updates the designated column with a java.sql.Time value:::
ResultSet#updateTimestamp(String, java.sql.Timestamp):::Updates the designated column with a java.sql.Timestamp value:::
ResultSet#updateAsciiStream(String, java.io.InputStream, int):::Updates the designated column with an ascii stream value, which will have the specified number of bytes:::
ResultSet#updateBinaryStream(String, java.io.InputStream, int):::Updates the designated column with a binary stream value, which will have the specified number of bytes:::
ResultSet#updateCharacterStream(String, java.io.Reader, int):::Updates the designated column with a character stream value, which will have the specified number of bytes:::
ResultSet#updateObject(String, Object, int):::Updates the designated column with an Object value:::
ResultSet#updateObject(String, Object):::Updates the designated column with an Object value:::
ResultSet#insertRow():::Inserts the contents of the insert row into this ResultSet object and into the database:::
ResultSet#updateRow():::Updates the underlying database with the new contents of the current row of this ResultSet object:::
ResultSet#deleteRow():::Deletes the current row from this ResultSet object and from the underlying database:::
ResultSet#refreshRow():::Refreshes the current row with its most recent value in the database:::
ResultSet#cancelRowUpdates():::Cancels the updates made to the current row in this ResultSet object:::
ResultSet#moveToInsertRow():::Moves the cursor to the insert row:::
ResultSet#moveToCurrentRow():::Moves the cursor to the remembered cursor position, usually the current row:::
ResultSet#getStatement():::Retrieves the Statement object that produced this ResultSet object:::
ResultSet#getObject(int, java.util.Map>):::Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language:::
ResultSet#getRef(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language.:::
ResultSet#getBlob(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language.:::
ResultSet#getClob(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language.:::
ResultSet#getArray(int):::Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language.:::
ResultSet#getObject(String, java.util.Map>):::Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language:::
ResultSet#getRef(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language.:::
ResultSet#getBlob(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language.:::
ResultSet#getClob(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language.:::
ResultSet#getArray(String):::Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language.:::
ResultSet#getDate(int, Calendar):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language:::
ResultSet#getDate(String, Calendar):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language:::
ResultSet#getTime(int, Calendar):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language:::
ResultSet#getTime(String, Calendar):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language:::
ResultSet#getTimestamp(int, Calendar):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language:::
ResultSet#getTimestamp(String, Calendar):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language:::
ResultSet#getURL(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.:::
ResultSet#getURL(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.:::
ResultSet#updateRef(int, java.sql.Ref):::Updates the designated column with a java.sql.Ref value:::
ResultSet#updateRef(String, java.sql.Ref):::Updates the designated column with a java.sql.Ref value:::
ResultSet#updateBlob(int, java.sql.Blob):::Updates the designated column with a java.sql.Blob value:::
ResultSet#updateBlob(String, java.sql.Blob):::Updates the designated column with a java.sql.Blob value:::
ResultSet#updateClob(int, java.sql.Clob):::Updates the designated column with a java.sql.Clob value:::
ResultSet#updateClob(String, java.sql.Clob):::Updates the designated column with a java.sql.Clob value:::
ResultSet#updateArray(int, java.sql.Array):::Updates the designated column with a java.sql.Array value:::
ResultSet#updateArray(String, java.sql.Array):::Updates the designated column with a java.sql.Array value:::
ResultSet#getRowId(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.RowId object in the Java programming language.:::
ResultSet#getRowId(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.RowId object in the Java programming language.:::
ResultSet#updateRowId(int, RowId):::Updates the designated column with a RowId value:::
ResultSet#updateRowId(String, RowId):::Updates the designated column with a RowId value:::
ResultSet#getHoldability():::Retrieves the holdability of this ResultSet object:::
ResultSet#isClosed():::Retrieves whether this ResultSet object has been closed:::
ResultSet#updateNString(int, String):::Updates the designated column with a String value:::
ResultSet#updateNString(String, String):::Updates the designated column with a String value:::
ResultSet#updateNClob(int, NClob):::Updates the designated column with a java.sql.NClob value:::
ResultSet#updateNClob(String, NClob):::Updates the designated column with a java.sql.NClob value:::
ResultSet#getNClob(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a NClob object in the Java programming language.:::
ResultSet#getNClob(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a NClob object in the Java programming language.:::
ResultSet#getSQLXML(int):::Retrieves the value of the designated column in  the current row of  this ResultSet as a java.sql.SQLXML object in the Java programming language.:::
ResultSet#getSQLXML(String):::Retrieves the value of the designated column in  the current row of  this ResultSet as a java.sql.SQLXML object in the Java programming language.:::
ResultSet#updateSQLXML(int, SQLXML):::Updates the designated column with a java.sql.SQLXML value:::
ResultSet#updateSQLXML(String, SQLXML):::Updates the designated column with a java.sql.SQLXML value:::
ResultSet#getNString(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language:::
ResultSet#getNString(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language:::
ResultSet#getNCharacterStream(int):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object:::
ResultSet#getNCharacterStream(String):::Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object:::
ResultSet#updateNCharacterStream(int, java.io.Reader, long):::Updates the designated column with a character stream value, which will have the specified number of bytes:::
ResultSet#updateNCharacterStream(String, java.io.Reader, long):::Updates the designated column with a character stream value, which will have the specified number of bytes:::
ResultSet#updateAsciiStream(int, java.io.InputStream, long):::Updates the designated column with an ascii stream value, which will have the specified number of bytes:::
ResultSet#updateBinaryStream(int, java.io.InputStream, long):::Updates the designated column with a binary stream value, which will have the specified number of bytes:::
ResultSet#updateCharacterStream(int, java.io.Reader, long):::Updates the designated column with a character stream value, which will have the specified number of bytes:::
ResultSet#updateAsciiStream(String, java.io.InputStream, long):::Updates the designated column with an ascii stream value, which will have the specified number of bytes:::
ResultSet#updateBinaryStream(String, java.io.InputStream, long):::Updates the designated column with a binary stream value, which will have the specified number of bytes:::
ResultSet#updateCharacterStream(String, java.io.Reader, long):::Updates the designated column with a character stream value, which will have the specified number of bytes:::
ResultSet#updateBlob(int, InputStream, long):::Updates the designated column using the given input stream, which will have the specified number of bytes:::
ResultSet#updateBlob(String, InputStream, long):::Updates the designated column using the given input stream, which will have the specified number of bytes:::
ResultSet#updateClob(int, Reader, long):::Updates the designated column using the given Reader object, which is the given number of characters long:::
ResultSet#updateClob(String, Reader, long):::Updates the designated column using the given Reader object, which is the given number of characters long:::
ResultSet#updateNClob(int, Reader, long):::Updates the designated column using the given Reader object, which is the given number of characters long:::
ResultSet#updateNClob(String, Reader, long):::Updates the designated column using the given Reader object, which is the given number of characters long:::
ResultSet#updateNCharacterStream(int, java.io.Reader):::Updates the designated column with a character stream value:::
ResultSet#updateNCharacterStream(String, java.io.Reader):::Updates the designated column with a character stream value:::
ResultSet#updateAsciiStream(int, java.io.InputStream):::Updates the designated column with an ascii stream value:::
ResultSet#updateBinaryStream(int, java.io.InputStream):::Updates the designated column with a binary stream value:::
ResultSet#updateCharacterStream(int, java.io.Reader):::Updates the designated column with a character stream value:::
ResultSet#updateAsciiStream(String, java.io.InputStream):::Updates the designated column with an ascii stream value:::
ResultSet#updateBinaryStream(String, java.io.InputStream):::Updates the designated column with a binary stream value:::
ResultSet#updateCharacterStream(String, java.io.Reader):::Updates the designated column with a character stream value:::
ResultSet#updateBlob(int, InputStream):::Updates the designated column using the given input stream:::
ResultSet#updateBlob(String, InputStream):::Updates the designated column using the given input stream:::
ResultSet#updateClob(int, Reader):::Updates the designated column using the given Reader object:::
ResultSet#updateClob(String, Reader):::Updates the designated column using the given Reader object:::
ResultSet#updateNClob(int, Reader):::Updates the designated column using the given Reader  The data will be read from the stream as needed until end-of-stream is reached:::
ResultSet#updateNClob(String, Reader):::Updates the designated column using the given Reader object:::
ResultSet#getObject(int, Class):::Retrieves the value of the designated column in the current row of this ResultSet object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported:::
ResultSet#getObject(String, Class):::Retrieves the value of the designated column in the current row of this ResultSet object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported:::
ResultSet#updateObject(int, Object, SQLType, int):::Updates the designated column with an Object value:::throw->new->SQLFeatureNotSupportedException
ResultSet#updateObject(String, Object, SQLType, int):::Updates the designated column with an Object value:::throw->new->SQLFeatureNotSupportedException
ResultSet#updateObject(int, Object, SQLType):::Updates the designated column with an Object value:::throw->new->SQLFeatureNotSupportedException
ResultSet#updateObject(String, Object, SQLType):::Updates the designated column with an Object value:::throw->new->SQLFeatureNotSupportedException
ResultSetMetaData#getColumnCount():::Returns the number of columns in this ResultSet object.:::
ResultSetMetaData#isAutoIncrement(int):::Indicates whether the designated column is automatically numbered.:::
ResultSetMetaData#isCaseSensitive(int):::Indicates whether a column's case matters.:::
ResultSetMetaData#isSearchable(int):::Indicates whether the designated column can be used in a where clause.:::
ResultSetMetaData#isCurrency(int):::Indicates whether the designated column is a cash value.:::
ResultSetMetaData#isNullable(int):::Indicates the nullability of values in the designated column.:::
ResultSetMetaData#isSigned(int):::Indicates whether values in the designated column are signed numbers.:::
ResultSetMetaData#getColumnDisplaySize(int):::Indicates the designated column's normal maximum width in characters.:::
ResultSetMetaData#getColumnLabel(int):::Gets the designated column's suggested title for use in printouts and displays:::
ResultSetMetaData#getColumnName(int):::Get the designated column's name.:::
ResultSetMetaData#getSchemaName(int):::Get the designated column's table's schema.:::
ResultSetMetaData#getPrecision(int):::Get the designated column's specified column size:::
ResultSetMetaData#getScale(int):::Gets the designated column's number of digits to right of the decimal point:::
ResultSetMetaData#getTableName(int):::Gets the designated column's table name.:::
ResultSetMetaData#getCatalogName(int):::Gets the designated column's table's catalog name.:::
ResultSetMetaData#getColumnType(int):::Retrieves the designated column's SQL type.:::
ResultSetMetaData#getColumnTypeName(int):::Retrieves the designated column's database-specific type name.:::
ResultSetMetaData#isReadOnly(int):::Indicates whether the designated column is definitely not writable.:::
ResultSetMetaData#isWritable(int):::Indicates whether it is possible for a write on the designated column to succeed.:::
ResultSetMetaData#isDefinitelyWritable(int):::Indicates whether a write on the designated column will definitely succeed.:::
ResultSetMetaData#getColumnClassName(int):::Returns the fully-qualified name of the Java class whose instances are manufactured if the method ResultSet.getObject is called to retrieve a value from the column:::
RowId#equals(Object):::Compares this RowId to the specified object:::
RowId#getBytes():::Returns an array of bytes representing the value of the SQL ROWID designated by this java.sql.RowId object.:::
RowId#toString():::Returns a String representing the value of the SQL ROWID designated by this java.sql.RowId object:::
RowId#hashCode():::Returns a hash code value of this RowId object.:::
Savepoint#getSavepointId():::Retrieves the generated ID for the savepoint that this Savepoint object represents.:::
Savepoint#getSavepointName():::Retrieves the name of the savepoint that this Savepoint object represents.:::
ShardingKeyBuilder#subkey(Object, SQLType):::This method will be called to add a subkey into a Sharding Key object being built:::
ShardingKeyBuilder#build():::Returns an instance of the object defined by this builder.:::
SQLClientInfoException#getFailedProperties():::Returns the list of client info properties that could not be set:::return
SQLData#getSQLTypeName():::Returns the fully-qualified name of the SQL user-defined type that this object represents:::
SQLData#readSQL(SQLInput, String):::Populates this object with data read from the database:::
SQLData#writeSQL(SQLOutput):::Writes this object to the given SQL data stream, converting it back to its SQL value in the data source:::
SQLException#getSQLState():::Retrieves the SQLState for this SQLException object.:::return
SQLException#getErrorCode():::Retrieves the vendor-specific exception code for this SQLException object.:::return
SQLException#getNextException():::Retrieves the exception chained to this SQLException object by setNextException(SQLException ex).:::return
SQLException#setNextException(SQLException):::Adds an SQLException object to the end of the chain.:::current->for
SQLException#iterator():::Returns an iterator over the chained SQLExceptions:::return->new->Iterator<Throwable>
SQLInput#readString():::Reads the next attribute in the stream and returns it as a String in the Java programming language.:::
SQLInput#readBoolean():::Reads the next attribute in the stream and returns it as a boolean in the Java programming language.:::
SQLInput#readByte():::Reads the next attribute in the stream and returns it as a byte in the Java programming language.:::
SQLInput#readShort():::Reads the next attribute in the stream and returns it as a short in the Java programming language.:::
SQLInput#readInt():::Reads the next attribute in the stream and returns it as an int in the Java programming language.:::
SQLInput#readLong():::Reads the next attribute in the stream and returns it as a long in the Java programming language.:::
SQLInput#readFloat():::Reads the next attribute in the stream and returns it as a float in the Java programming language.:::
SQLInput#readDouble():::Reads the next attribute in the stream and returns it as a double in the Java programming language.:::
SQLInput#readBigDecimal():::Reads the next attribute in the stream and returns it as a java.math.BigDecimal object in the Java programming language.:::
SQLInput#readBytes():::Reads the next attribute in the stream and returns it as an array of bytes in the Java programming language.:::
SQLInput#readDate():::Reads the next attribute in the stream and returns it as a java.sql.Date object.:::
SQLInput#readTime():::Reads the next attribute in the stream and returns it as a java.sql.Time object.:::
SQLInput#readTimestamp():::Reads the next attribute in the stream and returns it as a java.sql.Timestamp object.:::
SQLInput#readCharacterStream():::Reads the next attribute in the stream and returns it as a stream of Unicode characters.:::
SQLInput#readAsciiStream():::Reads the next attribute in the stream and returns it as a stream of ASCII characters.:::
SQLInput#readBinaryStream():::Reads the next attribute in the stream and returns it as a stream of uninterpreted bytes.:::
SQLInput#readObject():::Reads the datum at the head of the stream and returns it as an Object in the Java programming language:::
SQLInput#readRef():::Reads an SQL REF value from the stream and returns it as a Ref object in the Java programming language.:::
SQLInput#readBlob():::Reads an SQL BLOB value from the stream and returns it as a Blob object in the Java programming language.:::
SQLInput#readClob():::Reads an SQL CLOB value from the stream and returns it as a Clob object in the Java programming language.:::
SQLInput#readArray():::Reads an SQL ARRAY value from the stream and returns it as an Array object in the Java programming language.:::
SQLInput#wasNull():::Retrieves whether the last value read was SQL NULL.:::
SQLInput#readURL():::Reads an SQL DATALINK value from the stream and returns it as a java.net.URL object in the Java programming language.:::
SQLInput#readNClob():::Reads an SQL NCLOB value from the stream and returns it as a NClob object in the Java programming language.:::
SQLInput#readNString():::Reads the next attribute in the stream and returns it as a String in the Java programming language:::
SQLInput#readSQLXML():::Reads an SQL XML value from the stream and returns it as a SQLXML object in the Java programming language.:::
SQLInput#readRowId():::Reads an SQL ROWID value from the stream and returns it as a RowId object in the Java programming language.:::
SQLInput#readObject(Class):::Reads the next attribute in the stream and returns it as an Object in the Java programming language:::throw->new->SQLFeatureNotSupportedException
SQLOutput#writeString(String):::Writes the next attribute to the stream as a String in the Java programming language.:::
SQLOutput#writeBoolean(boolean):::Writes the next attribute to the stream as a Java boolean:::
SQLOutput#writeByte(byte):::Writes the next attribute to the stream as a Java byte:::
SQLOutput#writeShort(short):::Writes the next attribute to the stream as a Java short:::
SQLOutput#writeInt(int):::Writes the next attribute to the stream as a Java int:::
SQLOutput#writeLong(long):::Writes the next attribute to the stream as a Java long:::
SQLOutput#writeFloat(float):::Writes the next attribute to the stream as a Java float:::
SQLOutput#writeDouble(double):::Writes the next attribute to the stream as a Java double:::
SQLOutput#writeBigDecimal(java.math.BigDecimal):::Writes the next attribute to the stream as a java.math.BigDecimal object:::
SQLOutput#writeBytes(byte[]):::Writes the next attribute to the stream as an array of bytes:::
SQLOutput#writeDate(java.sql.Date):::Writes the next attribute to the stream as a java.sql.Date object:::
SQLOutput#writeTime(java.sql.Time):::Writes the next attribute to the stream as a java.sql.Time object:::
SQLOutput#writeTimestamp(java.sql.Timestamp):::Writes the next attribute to the stream as a java.sql.Timestamp object:::
SQLOutput#writeCharacterStream(java.io.Reader):::Writes the next attribute to the stream as a stream of Unicode characters.:::
SQLOutput#writeAsciiStream(java.io.InputStream):::Writes the next attribute to the stream as a stream of ASCII characters.:::
SQLOutput#writeBinaryStream(java.io.InputStream):::Writes the next attribute to the stream as a stream of uninterpreted bytes.:::
SQLOutput#writeObject(SQLData):::Writes to the stream the data contained in the given SQLData object:::
SQLOutput#writeRef(Ref):::Writes an SQL REF value to the stream.:::
SQLOutput#writeBlob(Blob):::Writes an SQL BLOB value to the stream.:::
SQLOutput#writeClob(Clob):::Writes an SQL CLOB value to the stream.:::
SQLOutput#writeStruct(Struct):::Writes an SQL structured type value to the stream.:::
SQLOutput#writeArray(Array):::Writes an SQL ARRAY value to the stream.:::
SQLOutput#writeURL(java.net.URL):::Writes a SQL DATALINK value to the stream.:::
SQLOutput#writeNString(String):::Writes the next attribute to the stream as a String in the Java programming language:::
SQLOutput#writeNClob(NClob):::Writes an SQL NCLOB value to the stream.:::
SQLOutput#writeRowId(RowId):::Writes an SQL ROWID value to the stream.:::
SQLOutput#writeSQLXML(SQLXML):::Writes an SQL XML value to the stream.:::
SQLOutput#writeObject(Object, SQLType):::Writes to the stream the data contained in the given object:::throw->new->SQLFeatureNotSupportedException
SQLType#getName():::Returns the SQLType name that represents a SQL data type.:::
SQLType#getVendor():::Returns the name of the vendor that supports this data type:::
SQLType#getVendorTypeNumber():::Returns the vendor specific type number for the data type.:::
SQLWarning#getNextWarning():::Retrieves the warning chained to this SQLWarning object by setNextWarning.:::try->return->getNextException->catch->throw->new->Error->finally
SQLWarning#setNextWarning(SQLWarning):::Adds a SQLWarning object to the end of the chain.:::setNextException
SQLXML#free():::This method closes this object and releases the resources that it held:::
SQLXML#getBinaryStream():::Retrieves the XML value designated by this SQLXML instance as a stream:::
SQLXML#setBinaryStream():::Retrieves a stream that can be used to write the XML value that this SQLXML instance represents:::
SQLXML#getCharacterStream():::Retrieves the XML value designated by this SQLXML instance as a java.io.Reader object:::
SQLXML#setCharacterStream():::Retrieves a stream to be used to write the XML value that this SQLXML instance represents:::
SQLXML#getString():::Returns a string representation of the XML value designated by this SQLXML instance:::
SQLXML#setString(String):::Sets the XML value designated by this SQLXML instance to the given String representation:::
SQLXML#getSource(Class):::Returns a Source for reading the XML value designated by this SQLXML instance:::
SQLXML#setResult(Class):::Returns a Result for setting the XML value designated by this SQLXML instance:::
Statement#executeQuery(String):::Executes the given SQL statement, which returns a single ResultSet object:::
Statement#executeUpdate(String):::Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement:::
Statement#close():::Releases this Statement object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed:::
Statement#getMaxFieldSize():::Retrieves the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object:::
Statement#setMaxFieldSize(int):::Sets the limit for the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object:::
Statement#getMaxRows():::Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain:::
Statement#setMaxRows(int):::Sets the limit for the maximum number of rows that any ResultSet object  generated by this Statement object can contain to the given number:::
Statement#setEscapeProcessing(boolean):::Sets escape processing on or off:::
Statement#getQueryTimeout():::Retrieves the number of seconds the driver will wait for a Statement object to execute:::
Statement#setQueryTimeout(int):::Sets the number of seconds the driver will wait for a Statement object to execute to the given number of seconds:::
Statement#cancel():::Cancels this Statement object if both the DBMS and driver support aborting an SQL statement:::
Statement#getWarnings():::Retrieves the first warning reported by calls on this Statement object:::
Statement#clearWarnings():::Clears all the warnings reported on this Statement object:::
Statement#setCursorName(String):::Sets the SQL cursor name to the given String, which will be used by subsequent Statement object execute methods:::
Statement#execute(String):::Executes the given SQL statement, which may return multiple results:::
Statement#getResultSet()::: Retrieves the current result as a ResultSet object:::
Statement#getUpdateCount()::: Retrieves the current result as an update count;  if the result is a ResultSet object or there are no more results, -1  is returned:::
Statement#getMoreResults():::Moves to this Statement object's next result, returns true if it is a ResultSet object, and implicitly closes any current ResultSet object(s) obtained with the method getResultSet:::
Statement#setFetchDirection(int):::Gives the driver a hint as to the direction in which rows will be processed in ResultSet objects created using this Statement object:::
Statement#getFetchDirection():::Retrieves the direction for fetching rows from database tables that is the default for result sets generated from this Statement object:::
Statement#setFetchSize(int):::Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for ResultSet objects generated by this Statement:::
Statement#getFetchSize():::Retrieves the number of result set rows that is the default fetch size for ResultSet objects generated from this Statement object:::
Statement#getResultSetConcurrency():::Retrieves the result set concurrency for ResultSet objects generated by this Statement object.:::
Statement#getResultSetType():::Retrieves the result set type for ResultSet objects generated by this Statement object.:::
Statement#addBatch(String):::Adds the given SQL command to the current list of commands for this Statement object:::
Statement#clearBatch():::Empties this Statement object's current list of SQL commands.:::
Statement#executeBatch():::Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts:::
Statement#getConnection():::Retrieves the Connection object that produced this Statement object.:::
Statement#getMoreResults(int):::Moves to this Statement object's next result, deals with any current ResultSet object(s) according  to the instructions specified by the given flag, and returns true if the next result is a ResultSet object:::
Statement#getGeneratedKeys():::Retrieves any auto-generated keys created as a result of executing this Statement object:::
Statement#executeUpdate(String, int):::Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval:::
Statement#executeUpdate(String, int[]):::Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval:::
Statement#executeUpdate(String, String[]):::Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval:::
Statement#execute(String, int):::Executes the given SQL statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval:::
Statement#execute(String, int[]):::Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval:::
Statement#execute(String, String[]):::Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval:::
Statement#getResultSetHoldability():::Retrieves the result set holdability for ResultSet objects generated by this Statement object.:::
Statement#isClosed():::Retrieves whether this Statement object has been closed:::
Statement#setPoolable(boolean):::Requests that a Statement be pooled or not pooled:::
Statement#isPoolable():::Returns a  value indicating whether the Statement is poolable or not.:::
Statement#closeOnCompletion():::Specifies that this Statement will be closed when all its dependent result sets are closed:::
Statement#isCloseOnCompletion():::Returns a value indicating whether this Statement will be closed when all its dependent result sets are closed.:::
Statement#getLargeUpdateCount()::: Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1  is returned:::throw->new->UnsupportedOperationException
Statement#setLargeMaxRows(long):::Sets the limit for the maximum number of rows that any ResultSet object  generated by this Statement object can contain to the given number:::throw->new->UnsupportedOperationException
Statement#getLargeMaxRows():::Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain:::return
Statement#executeLargeBatch():::Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts:::throw->new->UnsupportedOperationException
Statement#executeLargeUpdate(String):::Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement:::throw->new->UnsupportedOperationException
Statement#executeLargeUpdate(String, int):::Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval:::throw->new->SQLFeatureNotSupportedException
Statement#executeLargeUpdate(String, int[]):::Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval:::throw->new->SQLFeatureNotSupportedException
Statement#executeLargeUpdate(String, String[]):::Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval:::throw->new->SQLFeatureNotSupportedException
Statement#enquoteLiteral(String):::Returns a String enclosed in single quotes:::return->val->replace
Statement#enquoteIdentifier(String, boolean):::Returns a SQL identifier:::len->identifier->length->if->throw->new->SQLException->if->Pattern->compile->matcher->matches->return->if->identifier->matches->identifier->substring->if->Pattern->compile->matcher->matches->return->else->throw->new->SQLException
Statement#isSimpleIdentifier(String):::Retrieves whether identifier is a simple SQL identifier.:::len->identifier->length->return->Pattern->compile->matcher->matches
Statement#enquoteNCharLiteral(String):::Returns a String representing a National Character Set Literal enclosed in single quotes and prefixed with a upper case letter N:::return->val->replace
Struct#getSQLTypeName():::Retrieves the SQL type name of the SQL structured type that this Struct object represents.:::
Struct#getAttributes():::Produces the ordered values of the attributes of the SQL structured type that this Struct object represents:::
Struct#getAttributes(java.util.Map>):::Produces the ordered values of the attributes of the SQL structured type that this Struct object represents:::
Time#setTime(long):::Sets a Time object using a milliseconds time value.:::super->setTime
Time#valueOf(String):::Converts a string in JDBC time escape format to a Time value.:::if->throw->new->java.lang.IllegalArgumentException->hour->minute->second->firstColon->s->indexOf->secondColon->s->indexOf->len->s->length->if->Integer->parseInt->Integer->parseInt->Integer->parseInt->else->throw->new->java.lang.IllegalArgumentException->return->new->Time
Time#toString():::Formats a time in JDBC time escape format.:::hour->super->getHours->minute->super->getMinutes->second->super->getSeconds->buf->new->charArr->Date->formatDecimalInt->Date->formatDecimalInt->Date->formatDecimalInt->return->new->String
Time#getYear():::This method is deprecated and should not be used because SQL TIME values do not have a year component.:::throw->new->java.lang.IllegalArgumentException
Time#getMonth():::This method is deprecated and should not be used because SQL TIME values do not have a month component.:::throw->new->java.lang.IllegalArgumentException
Time#getDay():::This method is deprecated and should not be used because SQL TIME values do not have a day component.:::throw->new->java.lang.IllegalArgumentException
Time#getDate():::This method is deprecated and should not be used because SQL TIME values do not have a date component.:::throw->new->java.lang.IllegalArgumentException
Time#setYear(int):::This method is deprecated and should not be used because SQL TIME values do not have a year component.:::throw->new->java.lang.IllegalArgumentException
Time#setMonth(int):::This method is deprecated and should not be used because SQL TIME values do not have a month component.:::throw->new->java.lang.IllegalArgumentException
Time#setDate(int):::This method is deprecated and should not be used because SQL TIME values do not have a date component.:::throw->new->java.lang.IllegalArgumentException
Time#valueOf(LocalTime):::Obtains an instance of Time from a LocalTime object with the same hour, minute and second time value as the given LocalTime:::return->time->getHour->time->getMinute->time->getSecond->new->Time
Time#toLocalTime():::Converts this Time object to a LocalTime:::return->LocalTime->getHours->getMinutes->getSeconds->of
Time#toInstant():::This method always throws an UnsupportedOperationException and should not be used because SQL Time values do not have a date component.:::throw->new->java.lang.UnsupportedOperationException
Timestamp#setTime(long):::Sets this Timestamp object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.:::super->setTime->if->super->setTime
Timestamp#getTime():::Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Timestamp object.:::time->super->getTime->return
Timestamp#valueOf(String):::Converts a String object in JDBC timestamp escape format to a Timestamp value.:::YEAR_LENGTH->MONTH_LENGTH->DAY_LENGTH->MAX_MONTH->MAX_DAY->year->month->day->hour->minute->second->a_nanos->firstDash->secondDash->dividingSpace->firstColon->secondColon->period->formatError->if->throw->new->java.lang.IllegalArgumentException->s->trim->s->indexOf->if->throw->new->java.lang.IllegalArgumentException->s->indexOf->s->indexOf->s->indexOf->s->indexOf->s->indexOf->parsedDate->if->if->Integer->parseInt->Integer->parseInt->Integer->parseInt->if->if->throw->new->java.lang.IllegalArgumentException->len->s->length->if->Integer->parseInt->Integer->parseInt->if->Integer->parseInt->nanoPrecision->if->throw->new->java.lang.IllegalArgumentException->if->Character->s->charAt->isDigit->throw->new->java.lang.IllegalArgumentException->tmpNanos->Integer->parseInt->while->else->if->throw->new->java.lang.IllegalArgumentException->else->Integer->parseInt->else->throw->new->java.lang.IllegalArgumentException->return->new->Timestamp
Timestamp#toString():::Formats a timestamp in JDBC timestamp escape format:::year->super->getYear->month->super->getMonth->day->super->getDate->hour->super->getHours->minute->super->getMinutes->second->super->getSeconds->trailingZeros->tmpNanos->if->else->while->count->yearSize->do->if->break->while->buf->new->charArr->Date->formatDecimalInt->Date->formatDecimalInt->Date->formatDecimalInt->Date->formatDecimalInt->Date->formatDecimalInt->Date->formatDecimalInt->Date->formatDecimalInt->return->new->String
Timestamp#getNanos():::Gets this Timestamp object's nanos value.:::return
Timestamp#setNanos(int):::Sets this Timestamp object's nanos field to the given value.:::if->throw->new->IllegalArgumentException
Timestamp#equals(Timestamp):::Tests to see if this Timestamp object is equal to the given Timestamp object.:::if->super->equals->if->return->else->return->else->return
Timestamp#equals(java.lang.Object):::Tests to see if this Timestamp object is equal to the given object:::if->return->this->equals->else->return
Timestamp#before(Timestamp):::Indicates whether this Timestamp object is earlier than the given Timestamp object.:::return->compareTo
Timestamp#after(Timestamp):::Indicates whether this Timestamp object is later than the given Timestamp object.:::return->compareTo
Timestamp#compareTo(Timestamp):::Compares this Timestamp object to the given Timestamp object.:::thisTime->this->getTime->anotherTime->ts->getTime->i->if->if->return->else->if->return->return
Timestamp#compareTo(java.util.Date):::Compares this Timestamp object to the given Date object.:::if->return->compareTo->else->ts->o->getTime->new->Timestamp->return->this->compareTo
Timestamp#hashCode():::The {@code hashCode method uses the underlying java.util.Date implementation and therefore does not include nanos in its computation.:::return->super->hashCode
Timestamp#valueOf(LocalDateTime):::Obtains an instance of Timestamp from a LocalDateTime object, with the same year, month, day of month, hours, minutes, seconds and nanos date-time value as the provided LocalDateTime:::return->dateTime->getYear->dateTime->getMonthValue->dateTime->getDayOfMonth->dateTime->getHour->dateTime->getMinute->dateTime->getSecond->dateTime->getNano->new->Timestamp
Timestamp#toLocalDateTime():::Converts this Timestamp object to a LocalDateTime:::return->LocalDateTime->getYear->getMonth->getDate->getHours->getMinutes->getSeconds->getNanos->of
Timestamp#from(Instant):::Obtains an instance of Timestamp from an Instant object:::try->stamp->instant->getEpochSecond->new->Timestamp->instant->getNano->return->catch->throw->new->IllegalArgumentException->finally
Timestamp#toInstant():::Converts this Timestamp object to an Instant:::return->Instant->super->getTime->ofEpochSecond
Wrapper#unwrap(java.lang.Class):::Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy:::
Wrapper#isWrapperFor(java.lang.Class):::Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does:::

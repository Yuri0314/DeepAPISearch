AbstractNewArrayNode#dimension(int):::The list of node which produce input for this instruction.:::return->length
AbstractNewArrayNode#dimensionCount():::The rank of the array allocated by this node, i.e:::return
AccessFieldNode#field():::Gets the compiler interface field for this field access.:::return
AccessFieldNode#isStatic():::Checks whether this field access is an access to a static field.:::return->field->isStatic
AccessFieldNode#isVolatile():::Checks whether this access has volatile semantics:::return
AccessIndexedNode#elementKind():::Gets the element type of the array.:::return
ArrayLengthNode#readArrayLength(ValueNode, ConstantReflectionProvider):::Gets the length of an array if possible.:::return->GraphUtil->arrayLength
DynamicNewArrayNode#createNewArrayNode(ResolvedJavaType):::Hook for subclasses to instantiate a subclass of NewArrayNode.:::return->length->fillContents->stateBefore->new->NewArrayNode
DynamicNewInstanceNode#createNewInstanceNode(ResolvedJavaType):::Hook for subclasses to instantiate a subclass of NewInstanceNode.:::return->fillContents->stateBefore->new->NewInstanceNode
ExceptionObjectNode#hasSideEffect():::An exception handler is an entry point to a method from the runtime and so represents an instruction that cannot be re-executed:::return
InstanceOfNode#type():::Gets the type being tested.:::return->StampTool->typeReferenceOrNull
LoadFieldNode#asConstant(CanonicalizerTool, ValueNode):::Gets a constant value for this load if possible.:::return->tool->getConstantFieldProvider->tool->getConstantReflection->tool->getMetaAccess->tool->getOptions->asConstant
MethodCallTargetNode#receiver():::Gets the instruction that produces the receiver object for this invocation, if any.:::return->isStatic->arguments->get
MethodCallTargetNode#isStatic():::Checks whether this is an invocation of a static method.:::return->invokeKind
MonitorExitNode#clearEscapedValue():::Return value is cleared when a synchronized method graph is inlined.:::updateUsages
NewArrayNode#elementType():::Gets the element type of the array.:::return
NewInstanceNode#instanceClass():::Gets the instance class being allocated by this node.:::return
RegisterFinalizerNode#mayHaveFinalizer(ValueNode, Assumptions):::Determines if the compiler should emit code to test whether a given object has a finalizer that must be registered with the runtime upon object initialization.:::objectStamp->object->stamp->if->objectStamp->isExactType->return->objectStamp->type->hasFinalizer->else->if->objectStamp->type->result->objectStamp->type->hasFinalizableSubclass->if->result->canRecordTo->result->recordTo->return->result->getResult->return

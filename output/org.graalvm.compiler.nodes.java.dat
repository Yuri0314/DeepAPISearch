org.graalvm.compiler.nodes.java.Plugin_ArrayLengthNode_arrayLength#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ array length node_array length execute
org.graalvm.compiler.nodes.java.Plugin_ArrayLengthNode_arrayLength#getSource()->Class::: plugin_ array length node_array length get source
org.graalvm.compiler.nodes.java.PluginFactory_ArrayLengthNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ array length node register plugins
org.graalvm.compiler.nodes.java.Plugin_DynamicNewArrayNode_newArray__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ dynamic new array node_new array__0 execute
org.graalvm.compiler.nodes.java.Plugin_DynamicNewArrayNode_newArray__0#getSource()->Class::: plugin_ dynamic new array node_new array__0 get source
org.graalvm.compiler.nodes.java.Plugin_DynamicNewArrayNode_newArray__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ dynamic new array node_new array__1 execute
org.graalvm.compiler.nodes.java.Plugin_DynamicNewArrayNode_newArray__1#getSource()->Class::: plugin_ dynamic new array node_new array__1 get source
org.graalvm.compiler.nodes.java.PluginFactory_DynamicNewArrayNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ dynamic new array node register plugins
org.graalvm.compiler.nodes.java.Plugin_InstanceOfNode_doInstanceof#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ instance of node_do instanceof execute
org.graalvm.compiler.nodes.java.Plugin_InstanceOfNode_doInstanceof#getSource()->Class::: plugin_ instance of node_do instanceof get source
org.graalvm.compiler.nodes.java.PluginFactory_InstanceOfNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ instance of node register plugins
org.graalvm.compiler.nodes.java.Plugin_NewArrayNode_newArray#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ new array node_new array execute
org.graalvm.compiler.nodes.java.Plugin_NewArrayNode_newArray#getSource()->Class::: plugin_ new array node_new array get source
org.graalvm.compiler.nodes.java.PluginFactory_NewArrayNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ new array node register plugins
org.graalvm.compiler.nodes.java.Plugin_RegisterFinalizerNode_register#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ register finalizer node_register execute
org.graalvm.compiler.nodes.java.Plugin_RegisterFinalizerNode_register#getSource()->Class::: plugin_ register finalizer node_register get source
org.graalvm.compiler.nodes.java.PluginFactory_RegisterFinalizerNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ register finalizer node register plugins
org.graalvm.compiler.nodes.java.AbstractCompareAndSwapNode#stateAfter()->FrameState::: abstract compare and swap node state after
org.graalvm.compiler.nodes.java.AbstractCompareAndSwapNode#setStateAfter(FrameState)->void::: abstract compare and swap node set state after
org.graalvm.compiler.nodes.java.AbstractCompareAndSwapNode#hasSideEffect()->boolean::: abstract compare and swap node has side effect
org.graalvm.compiler.nodes.java.AbstractCompareAndSwapNode#getExpectedValue()->ValueNode::: abstract compare and swap node get expected value
org.graalvm.compiler.nodes.java.AbstractCompareAndSwapNode#getNewValue()->ValueNode::: abstract compare and swap node get new value
org.graalvm.compiler.nodes.java.AbstractCompareAndSwapNode#canNullCheck()->boolean::: abstract compare and swap node can null check
org.graalvm.compiler.nodes.java.AbstractCompareAndSwapNode#getAccessStamp()->Stamp::: abstract compare and swap node get access stamp
org.graalvm.compiler.nodes.java.AbstractNewArrayNode#length()->ValueNode::: abstract new array node length
org.graalvm.compiler.nodes.java.AbstractNewArrayNode#findLength(FindLengthMode, ConstantReflectionProvider)->ValueNode::: abstract new array node find length
org.graalvm.compiler.nodes.java.AbstractNewArrayNode#dimension(int)->ValueNode:::The list of node which produce input for this instruction.
org.graalvm.compiler.nodes.java.AbstractNewArrayNode#dimensionCount()->int:::The rank of the array allocated by this node, i.e
org.graalvm.compiler.nodes.java.AbstractNewObjectNode#fillContents()->boolean::: abstract new object node fill contents
org.graalvm.compiler.nodes.java.AbstractNewObjectNode#lower(LoweringTool)->void::: abstract new object node lower
org.graalvm.compiler.nodes.java.AbstractNewObjectNode#canDeoptimize()->boolean::: abstract new object node can deoptimize
org.graalvm.compiler.nodes.java.AbstractNewObjectNode#emitMemoryBarrier()->boolean::: abstract new object node emit memory barrier
org.graalvm.compiler.nodes.java.AbstractNewObjectNode#clearEmitMemoryBarrier()->void::: abstract new object node clear emit memory barrier
org.graalvm.compiler.nodes.java.AbstractUnsafeCompareAndSwapNode#object()->ValueNode::: abstract unsafe compare and swap node object
org.graalvm.compiler.nodes.java.AbstractUnsafeCompareAndSwapNode#offset()->ValueNode::: abstract unsafe compare and swap node offset
org.graalvm.compiler.nodes.java.AbstractUnsafeCompareAndSwapNode#expected()->ValueNode::: abstract unsafe compare and swap node expected
org.graalvm.compiler.nodes.java.AbstractUnsafeCompareAndSwapNode#newValue()->ValueNode::: abstract unsafe compare and swap node new value
org.graalvm.compiler.nodes.java.AbstractUnsafeCompareAndSwapNode#getValueKind()->JavaKind::: abstract unsafe compare and swap node get value kind
org.graalvm.compiler.nodes.java.AbstractUnsafeCompareAndSwapNode#getLocationIdentity()->LocationIdentity::: abstract unsafe compare and swap node get location identity
org.graalvm.compiler.nodes.java.AbstractUnsafeCompareAndSwapNode#lower(LoweringTool)->void::: abstract unsafe compare and swap node lower
org.graalvm.compiler.nodes.java.AbstractUnsafeCompareAndSwapNode#virtualize(VirtualizerTool)->void::: abstract unsafe compare and swap node virtualize
org.graalvm.compiler.nodes.java.AbstractUnsafeCompareAndSwapNode#finishVirtualize(VirtualizerTool, LogicNode, ValueNode)->void::: abstract unsafe compare and swap node finish virtualize
org.graalvm.compiler.nodes.java.AccessArrayNode#array()->ValueNode::: access array node array
org.graalvm.compiler.nodes.java.AccessArrayNode#setArray(ValueNode)->void::: access array node set array
org.graalvm.compiler.nodes.java.AccessFieldNode#object()->ValueNode::: access field node object
org.graalvm.compiler.nodes.java.AccessFieldNode#field()->ResolvedJavaField:::Gets the compiler interface field for this field access.
org.graalvm.compiler.nodes.java.AccessFieldNode#isStatic()->boolean:::Checks whether this field access is an access to a static field.
org.graalvm.compiler.nodes.java.AccessFieldNode#isVolatile()->boolean:::Checks whether this access has volatile semantics
org.graalvm.compiler.nodes.java.AccessFieldNode#lower(LoweringTool)->void::: access field node lower
org.graalvm.compiler.nodes.java.AccessFieldNode#toString(Verbosity)->String::: access field node to string
org.graalvm.compiler.nodes.java.AccessFieldNode#verify()->boolean::: access field node verify
org.graalvm.compiler.nodes.java.AccessFieldNode#estimatedNodeSize()->NodeSize::: access field node estimated node size
org.graalvm.compiler.nodes.java.AccessIndexedNode#index()->ValueNode::: access indexed node index
org.graalvm.compiler.nodes.java.AccessIndexedNode#getBoundsCheck()->GuardingNode::: access indexed node get bounds check
org.graalvm.compiler.nodes.java.AccessIndexedNode#elementKind()->JavaKind:::Gets the element type of the array.
org.graalvm.compiler.nodes.java.AccessIndexedNode#lower(LoweringTool)->void::: access indexed node lower
org.graalvm.compiler.nodes.java.AccessMonitorNode#canDeoptimize()->boolean::: access monitor node can deoptimize
org.graalvm.compiler.nodes.java.AccessMonitorNode#stateBefore()->FrameState::: access monitor node state before
org.graalvm.compiler.nodes.java.AccessMonitorNode#setStateBefore(FrameState)->void::: access monitor node set state before
org.graalvm.compiler.nodes.java.AccessMonitorNode#object()->ValueNode::: access monitor node object
org.graalvm.compiler.nodes.java.AccessMonitorNode#setObject(ValueNode)->void::: access monitor node set object
org.graalvm.compiler.nodes.java.AccessMonitorNode#getMonitorId()->MonitorIdNode::: access monitor node get monitor id
org.graalvm.compiler.nodes.java.ArrayLengthNode#array()->ValueNode::: array length node array
org.graalvm.compiler.nodes.java.ArrayLengthNode#getValue()->ValueNode::: array length node get value
org.graalvm.compiler.nodes.java.ArrayLengthNode#create(ValueNode, ConstantReflectionProvider)->ValueNode::: array length node create
org.graalvm.compiler.nodes.java.ArrayLengthNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: array length node canonical
org.graalvm.compiler.nodes.java.ArrayLengthNode#readArrayLength(ValueNode, ConstantReflectionProvider)->ValueNode:::Gets the length of an array if possible.
org.graalvm.compiler.nodes.java.ArrayLengthNode#lower(LoweringTool)->void::: array length node lower
org.graalvm.compiler.nodes.java.ArrayLengthNode#arrayLength(Object)->int::: array length node array length
org.graalvm.compiler.nodes.java.ArrayLengthNode#virtualize(VirtualizerTool)->void::: array length node virtualize
org.graalvm.compiler.nodes.java.AtomicReadAndAddNode#delta()->ValueNode::: atomic read and add node delta
org.graalvm.compiler.nodes.java.AtomicReadAndAddNode#getLocationIdentity()->LocationIdentity::: atomic read and add node get location identity
org.graalvm.compiler.nodes.java.AtomicReadAndAddNode#generate(NodeLIRBuilderTool)->void::: atomic read and add node generate
org.graalvm.compiler.nodes.java.AtomicReadAndWriteNode#object()->ValueNode::: atomic read and write node object
org.graalvm.compiler.nodes.java.AtomicReadAndWriteNode#offset()->ValueNode::: atomic read and write node offset
org.graalvm.compiler.nodes.java.AtomicReadAndWriteNode#newValue()->ValueNode::: atomic read and write node new value
org.graalvm.compiler.nodes.java.AtomicReadAndWriteNode#getValueKind()->JavaKind::: atomic read and write node get value kind
org.graalvm.compiler.nodes.java.AtomicReadAndWriteNode#getLocationIdentity()->LocationIdentity::: atomic read and write node get location identity
org.graalvm.compiler.nodes.java.AtomicReadAndWriteNode#lower(LoweringTool)->void::: atomic read and write node lower
org.graalvm.compiler.nodes.java.ClassIsAssignableFromNode#getThisClass()->ValueNode::: class is assignable from node get this class
org.graalvm.compiler.nodes.java.ClassIsAssignableFromNode#getOtherClass()->ValueNode::: class is assignable from node get other class
org.graalvm.compiler.nodes.java.ClassIsAssignableFromNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->Node::: class is assignable from node canonical
org.graalvm.compiler.nodes.java.ClassIsAssignableFromNode#lower(LoweringTool)->void::: class is assignable from node lower
org.graalvm.compiler.nodes.java.ClassIsAssignableFromNode#getSucceedingStampForX(boolean, Stamp, Stamp)->Stamp::: class is assignable from node get succeeding stamp for x
org.graalvm.compiler.nodes.java.ClassIsAssignableFromNode#getSucceedingStampForY(boolean, Stamp, Stamp)->Stamp::: class is assignable from node get succeeding stamp for y
org.graalvm.compiler.nodes.java.ClassIsAssignableFromNode#tryFold(Stamp, Stamp)->TriState::: class is assignable from node try fold
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#getElementType()->ValueNode::: dynamic new array node get element type
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#getKnownElementKind()->JavaKind::: dynamic new array node get known element kind
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#canonical(CanonicalizerTool)->Node::: dynamic new array node canonical
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#createNewArrayNode(ResolvedJavaType)->NewArrayNode:::Hook for subclasses to instantiate a subclass of NewArrayNode.
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#throwsIllegalArgumentException(Class, Class)->boolean::: dynamic new array node throws illegal argument exception
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#throwsIllegalArgumentException(ResolvedJavaType)->boolean::: dynamic new array node throws illegal argument exception
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#newArray(Class, int)->Object::: dynamic new array node new array
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#newArray(Class, int, JavaKind)->Object::: dynamic new array node new array
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#newUninitializedArray(Class, int, JavaKind)->Object::: dynamic new array node new uninitialized array
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#getVoidClass()->ValueNode::: dynamic new array node get void class
org.graalvm.compiler.nodes.java.DynamicNewArrayNode#setVoidClass(ValueNode)->void::: dynamic new array node set void class
org.graalvm.compiler.nodes.java.DynamicNewInstanceNode#getInstanceType()->ValueNode::: dynamic new instance node get instance type
org.graalvm.compiler.nodes.java.DynamicNewInstanceNode#canonical(CanonicalizerTool)->Node::: dynamic new instance node canonical
org.graalvm.compiler.nodes.java.DynamicNewInstanceNode#createNewInstanceNode(ResolvedJavaType)->NewInstanceNode:::Hook for subclasses to instantiate a subclass of NewInstanceNode.
org.graalvm.compiler.nodes.java.DynamicNewInstanceNode#throwsInstantiationException(Class, Class)->boolean::: dynamic new instance node throws instantiation exception
org.graalvm.compiler.nodes.java.DynamicNewInstanceNode#throwsInstantiationException(ResolvedJavaType, MetaAccessProvider)->boolean::: dynamic new instance node throws instantiation exception
org.graalvm.compiler.nodes.java.DynamicNewInstanceNode#getClassClass()->ValueNode::: dynamic new instance node get class class
org.graalvm.compiler.nodes.java.DynamicNewInstanceNode#setClassClass(ValueNode)->void::: dynamic new instance node set class class
org.graalvm.compiler.nodes.java.ExceptionObjectNode#getLocationIdentity()->LocationIdentity::: exception object node get location identity
org.graalvm.compiler.nodes.java.ExceptionObjectNode#hasSideEffect()->boolean:::An exception handler is an entry point to a method from the runtime and so represents an instruction that cannot be re-executed
org.graalvm.compiler.nodes.java.ExceptionObjectNode#lower(LoweringTool)->void::: exception object node lower
org.graalvm.compiler.nodes.java.ExceptionObjectNode#verify()->boolean::: exception object node verify
org.graalvm.compiler.nodes.java.FinalFieldBarrierNode#getValue()->ValueNode::: final field barrier node get value
org.graalvm.compiler.nodes.java.FinalFieldBarrierNode#virtualize(VirtualizerTool)->void::: final field barrier node virtualize
org.graalvm.compiler.nodes.java.FinalFieldBarrierNode#lower(LoweringTool)->void::: final field barrier node lower
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#create(Assumptions, ConstantReflectionProvider, ValueNode, ValueNode, boolean, boolean)->LogicNode::: instance of dynamic node create
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#create(Assumptions, ConstantReflectionProvider, ValueNode, ValueNode, boolean)->LogicNode::: instance of dynamic node create
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#isMirror()->boolean::: instance of dynamic node is mirror
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#isHub()->boolean::: instance of dynamic node is hub
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#lower(LoweringTool)->void::: instance of dynamic node lower
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#getMirrorOrHub()->ValueNode::: instance of dynamic node get mirror or hub
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#getObject()->ValueNode::: instance of dynamic node get object
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->LogicNode::: instance of dynamic node canonical
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#setMirror(ValueNode)->void::: instance of dynamic node set mirror
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#allowsNull()->boolean::: instance of dynamic node allows null
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#isExact()->boolean::: instance of dynamic node is exact
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#getSucceedingStampForX(boolean, Stamp, Stamp)->Stamp::: instance of dynamic node get succeeding stamp for x
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#getSucceedingStampForY(boolean, Stamp, Stamp)->Stamp::: instance of dynamic node get succeeding stamp for y
org.graalvm.compiler.nodes.java.InstanceOfDynamicNode#tryFold(Stamp, Stamp)->TriState::: instance of dynamic node try fold
org.graalvm.compiler.nodes.java.InstanceOfNode#createAllowNull(TypeReference, ValueNode, JavaTypeProfile, AnchoringNode)->LogicNode::: instance of node create allow null
org.graalvm.compiler.nodes.java.InstanceOfNode#create(TypeReference, ValueNode)->LogicNode::: instance of node create
org.graalvm.compiler.nodes.java.InstanceOfNode#create(TypeReference, ValueNode, JavaTypeProfile, AnchoringNode)->LogicNode::: instance of node create
org.graalvm.compiler.nodes.java.InstanceOfNode#createHelper(ObjectStamp, ValueNode, JavaTypeProfile, AnchoringNode)->LogicNode::: instance of node create helper
org.graalvm.compiler.nodes.java.InstanceOfNode#lower(LoweringTool)->void::: instance of node lower
org.graalvm.compiler.nodes.java.InstanceOfNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: instance of node canonical
org.graalvm.compiler.nodes.java.InstanceOfNode#findSynonym(ObjectStamp, ValueNode, NodeView)->LogicNode::: instance of node find synonym
org.graalvm.compiler.nodes.java.InstanceOfNode#type()->TypeReference:::Gets the type being tested.
org.graalvm.compiler.nodes.java.InstanceOfNode#profile()->JavaTypeProfile::: instance of node profile
org.graalvm.compiler.nodes.java.InstanceOfNode#virtualize(VirtualizerTool)->void::: instance of node virtualize
org.graalvm.compiler.nodes.java.InstanceOfNode#getSucceedingStampForValue(boolean)->Stamp::: instance of node get succeeding stamp for value
org.graalvm.compiler.nodes.java.InstanceOfNode#tryFold(Stamp)->TriState::: instance of node try fold
org.graalvm.compiler.nodes.java.InstanceOfNode#allowsNull()->boolean::: instance of node allows null
org.graalvm.compiler.nodes.java.InstanceOfNode#setProfile(JavaTypeProfile, AnchoringNode)->void::: instance of node set profile
org.graalvm.compiler.nodes.java.InstanceOfNode#getAnchor()->AnchoringNode::: instance of node get anchor
org.graalvm.compiler.nodes.java.InstanceOfNode#getCheckedStamp()->ObjectStamp::: instance of node get checked stamp
org.graalvm.compiler.nodes.java.InstanceOfNode#doInstanceof(ResolvedJavaType, Object)->boolean::: instance of node do instanceof
org.graalvm.compiler.nodes.java.InstanceOfNode#intrinsify(GraphBuilderContext, ResolvedJavaMethod, ResolvedJavaType, ValueNode)->boolean::: instance of node intrinsify
org.graalvm.compiler.nodes.java.InstanceOfNode#implies(boolean, LogicNode)->TriState::: instance of node implies
org.graalvm.compiler.nodes.java.LoadExceptionObjectNode#lower(LoweringTool)->void::: load exception object node lower
org.graalvm.compiler.nodes.java.LoadFieldNode#create(Assumptions, ValueNode, ResolvedJavaField)->LoadFieldNode::: load field node create
org.graalvm.compiler.nodes.java.LoadFieldNode#create(Assumptions, ValueNode, ResolvedJavaField, boolean)->LoadFieldNode::: load field node create
org.graalvm.compiler.nodes.java.LoadFieldNode#create(ConstantFieldProvider, ConstantReflectionProvider, MetaAccessProvider, OptionValues, Assumptions, ValueNode, ResolvedJavaField, boolean, boolean)->ValueNode::: load field node create
org.graalvm.compiler.nodes.java.LoadFieldNode#createOverrideStamp(StampPair, ValueNode, ResolvedJavaField)->LoadFieldNode::: load field node create override stamp
org.graalvm.compiler.nodes.java.LoadFieldNode#createOverrideStamp(ConstantFieldProvider, ConstantReflectionProvider, MetaAccessProvider, OptionValues, StampPair, ValueNode, ResolvedJavaField, boolean, boolean)->ValueNode::: load field node create override stamp
org.graalvm.compiler.nodes.java.LoadFieldNode#getValue()->ValueNode::: load field node get value
org.graalvm.compiler.nodes.java.LoadFieldNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: load field node canonical
org.graalvm.compiler.nodes.java.LoadFieldNode#asConstant(CanonicalizerTool, ValueNode)->ConstantNode:::Gets a constant value for this load if possible.
org.graalvm.compiler.nodes.java.LoadFieldNode#asConstant(CanonicalizerTool, JavaConstant)->ConstantNode::: load field node as constant
org.graalvm.compiler.nodes.java.LoadFieldNode#virtualize(VirtualizerTool)->void::: load field node virtualize
org.graalvm.compiler.nodes.java.LoadFieldNode#uncheckedStamp()->Stamp::: load field node unchecked stamp
org.graalvm.compiler.nodes.java.LoadFieldNode#setObject(ValueNode)->void::: load field node set object
org.graalvm.compiler.nodes.java.LoadFieldNode#estimatedNodeCycles()->NodeCycles::: load field node estimated node cycles
org.graalvm.compiler.nodes.java.LoadIndexedNode#create(Assumptions, ValueNode, ValueNode, GuardingNode, JavaKind, MetaAccessProvider, ConstantReflectionProvider)->ValueNode::: load indexed node create
org.graalvm.compiler.nodes.java.LoadIndexedNode#inferStamp()->boolean::: load indexed node infer stamp
org.graalvm.compiler.nodes.java.LoadIndexedNode#virtualize(VirtualizerTool)->void::: load indexed node virtualize
org.graalvm.compiler.nodes.java.LoadIndexedNode#canonical(CanonicalizerTool)->Node::: load indexed node canonical
org.graalvm.compiler.nodes.java.LoadIndexedNode#simplify(SimplifierTool)->void::: load indexed node simplify
org.graalvm.compiler.nodes.java.LogicCompareAndSwapNode#generate(NodeLIRBuilderTool)->void::: logic compare and swap node generate
org.graalvm.compiler.nodes.java.LoweredAtomicReadAndWriteNode#stateAfter()->FrameState::: lowered atomic read and write node state after
org.graalvm.compiler.nodes.java.LoweredAtomicReadAndWriteNode#setStateAfter(FrameState)->void::: lowered atomic read and write node set state after
org.graalvm.compiler.nodes.java.LoweredAtomicReadAndWriteNode#hasSideEffect()->boolean::: lowered atomic read and write node has side effect
org.graalvm.compiler.nodes.java.LoweredAtomicReadAndWriteNode#generate(NodeLIRBuilderTool)->void::: lowered atomic read and write node generate
org.graalvm.compiler.nodes.java.LoweredAtomicReadAndWriteNode#canNullCheck()->boolean::: lowered atomic read and write node can null check
org.graalvm.compiler.nodes.java.LoweredAtomicReadAndWriteNode#getNewValue()->ValueNode::: lowered atomic read and write node get new value
org.graalvm.compiler.nodes.java.LoweredAtomicReadAndWriteNode#getAccessStamp()->Stamp::: lowered atomic read and write node get access stamp
org.graalvm.compiler.nodes.java.MethodCallTargetNode#receiver()->ValueNode:::Gets the instruction that produces the receiver object for this invocation, if any.
org.graalvm.compiler.nodes.java.MethodCallTargetNode#isStatic()->boolean:::Checks whether this is an invocation of a static method.
org.graalvm.compiler.nodes.java.MethodCallTargetNode#returnKind()->JavaKind::: method call target node return kind
org.graalvm.compiler.nodes.java.MethodCallTargetNode#verify()->boolean::: method call target node verify
org.graalvm.compiler.nodes.java.MethodCallTargetNode#toString(Verbosity)->String::: method call target node to string
org.graalvm.compiler.nodes.java.MethodCallTargetNode#findSpecialCallTarget(InvokeKind, ValueNode, ResolvedJavaMethod, ResolvedJavaType)->ResolvedJavaMethod::: method call target node find special call target
org.graalvm.compiler.nodes.java.MethodCallTargetNode#devirtualizeCall(InvokeKind, ResolvedJavaMethod, ResolvedJavaType, Assumptions, Stamp)->ResolvedJavaMethod::: method call target node devirtualize call
org.graalvm.compiler.nodes.java.MethodCallTargetNode#simplify(SimplifierTool)->void::: method call target node simplify
org.graalvm.compiler.nodes.java.MethodCallTargetNode#getProfile()->JavaTypeProfile::: method call target node get profile
org.graalvm.compiler.nodes.java.MethodCallTargetNode#targetName()->String::: method call target node target name
org.graalvm.compiler.nodes.java.MethodCallTargetNode#find(StructuredGraph, ResolvedJavaMethod)->MethodCallTargetNode::: method call target node find
org.graalvm.compiler.nodes.java.MethodCallTargetNode#setJavaTypeProfile(JavaTypeProfile)->void::: method call target node set java type profile
org.graalvm.compiler.nodes.java.MonitorEnterNode#getLocationIdentity()->LocationIdentity::: monitor enter node get location identity
org.graalvm.compiler.nodes.java.MonitorEnterNode#lower(LoweringTool)->void::: monitor enter node lower
org.graalvm.compiler.nodes.java.MonitorEnterNode#virtualize(VirtualizerTool)->void::: monitor enter node virtualize
org.graalvm.compiler.nodes.java.MonitorExitNode#clearEscapedValue()->void:::Return value is cleared when a synchronized method graph is inlined.
org.graalvm.compiler.nodes.java.MonitorExitNode#getLocationIdentity()->LocationIdentity::: monitor exit node get location identity
org.graalvm.compiler.nodes.java.MonitorExitNode#lower(LoweringTool)->void::: monitor exit node lower
org.graalvm.compiler.nodes.java.MonitorExitNode#virtualize(VirtualizerTool)->void::: monitor exit node virtualize
org.graalvm.compiler.nodes.java.MonitorIdNode#getLockDepth()->int::: monitor id node get lock depth
org.graalvm.compiler.nodes.java.MonitorIdNode#setLockDepth(int)->void::: monitor id node set lock depth
org.graalvm.compiler.nodes.java.MonitorIdNode#isEliminated()->boolean::: monitor id node is eliminated
org.graalvm.compiler.nodes.java.MonitorIdNode#setEliminated()->void::: monitor id node set eliminated
org.graalvm.compiler.nodes.java.MonitorIdNode#generate(NodeLIRBuilderTool)->void::: monitor id node generate
org.graalvm.compiler.nodes.java.NewArrayNode#newUninitializedArray(Class, int)->Object::: new array node new uninitialized array
org.graalvm.compiler.nodes.java.NewArrayNode#elementType()->ResolvedJavaType:::Gets the element type of the array.
org.graalvm.compiler.nodes.java.NewArrayNode#virtualize(VirtualizerTool)->void::: new array node virtualize
org.graalvm.compiler.nodes.java.NewArrayNode#createVirtualArrayNode(int)->VirtualArrayNode::: new array node create virtual array node
org.graalvm.compiler.nodes.java.NewArrayNode#defaultElementValue()->ConstantNode::: new array node default element value
org.graalvm.compiler.nodes.java.NewArrayNode#simplify(SimplifierTool)->void::: new array node simplify
org.graalvm.compiler.nodes.java.NewInstanceNode#instanceClass()->ResolvedJavaType:::Gets the instance class being allocated by this node.
org.graalvm.compiler.nodes.java.NewInstanceNode#virtualize(VirtualizerTool)->void::: new instance node virtualize
org.graalvm.compiler.nodes.java.NewInstanceNode#createVirtualInstanceNode(boolean)->VirtualInstanceNode::: new instance node create virtual instance node
org.graalvm.compiler.nodes.java.NewInstanceNode#defaultFieldValue(ResolvedJavaField)->ConstantNode::: new instance node default field value
org.graalvm.compiler.nodes.java.NewMultiArrayNode#dimension(int)->ValueNode::: new multi array node dimension
org.graalvm.compiler.nodes.java.NewMultiArrayNode#dimensionCount()->int::: new multi array node dimension count
org.graalvm.compiler.nodes.java.NewMultiArrayNode#dimensions()->NodeList::: new multi array node dimensions
org.graalvm.compiler.nodes.java.NewMultiArrayNode#lower(LoweringTool)->void::: new multi array node lower
org.graalvm.compiler.nodes.java.NewMultiArrayNode#type()->ResolvedJavaType::: new multi array node type
org.graalvm.compiler.nodes.java.NewMultiArrayNode#canDeoptimize()->boolean::: new multi array node can deoptimize
org.graalvm.compiler.nodes.java.NewMultiArrayNode#findLength(FindLengthMode, ConstantReflectionProvider)->ValueNode::: new multi array node find length
org.graalvm.compiler.nodes.java.RawMonitorEnterNode#getLocationIdentity()->LocationIdentity::: raw monitor enter node get location identity
org.graalvm.compiler.nodes.java.RawMonitorEnterNode#lower(LoweringTool)->void::: raw monitor enter node lower
org.graalvm.compiler.nodes.java.RawMonitorEnterNode#virtualize(VirtualizerTool)->void::: raw monitor enter node virtualize
org.graalvm.compiler.nodes.java.RawMonitorEnterNode#getHub()->ValueNode::: raw monitor enter node get hub
org.graalvm.compiler.nodes.java.RegisterFinalizerNode#getValue()->ValueNode::: register finalizer node get value
org.graalvm.compiler.nodes.java.RegisterFinalizerNode#generate(NodeLIRBuilderTool)->void::: register finalizer node generate
org.graalvm.compiler.nodes.java.RegisterFinalizerNode#mayHaveFinalizer(ValueNode, Assumptions)->boolean:::Determines if the compiler should emit code to test whether a given object has a finalizer that must be registered with the runtime upon object initialization.
org.graalvm.compiler.nodes.java.RegisterFinalizerNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: register finalizer node canonical
org.graalvm.compiler.nodes.java.RegisterFinalizerNode#virtualize(VirtualizerTool)->void::: register finalizer node virtualize
org.graalvm.compiler.nodes.java.RegisterFinalizerNode#canDeoptimize()->boolean::: register finalizer node can deoptimize
org.graalvm.compiler.nodes.java.RegisterFinalizerNode#register(Object)->void::: register finalizer node register
org.graalvm.compiler.nodes.java.StoreFieldNode#stateAfter()->FrameState::: store field node state after
org.graalvm.compiler.nodes.java.StoreFieldNode#setStateAfter(FrameState)->void::: store field node set state after
org.graalvm.compiler.nodes.java.StoreFieldNode#hasSideEffect()->boolean::: store field node has side effect
org.graalvm.compiler.nodes.java.StoreFieldNode#value()->ValueNode::: store field node value
org.graalvm.compiler.nodes.java.StoreFieldNode#virtualize(VirtualizerTool)->void::: store field node virtualize
org.graalvm.compiler.nodes.java.StoreFieldNode#getState()->FrameState::: store field node get state
org.graalvm.compiler.nodes.java.StoreFieldNode#estimatedNodeCycles()->NodeCycles::: store field node estimated node cycles
org.graalvm.compiler.nodes.java.StoreFieldNode#canonical(CanonicalizerTool)->Node::: store field node canonical
org.graalvm.compiler.nodes.java.StoreIndexedNode#getStoreCheck()->GuardingNode::: store indexed node get store check
org.graalvm.compiler.nodes.java.StoreIndexedNode#stateAfter()->FrameState::: store indexed node state after
org.graalvm.compiler.nodes.java.StoreIndexedNode#setStateAfter(FrameState)->void::: store indexed node set state after
org.graalvm.compiler.nodes.java.StoreIndexedNode#hasSideEffect()->boolean::: store indexed node has side effect
org.graalvm.compiler.nodes.java.StoreIndexedNode#value()->ValueNode::: store indexed node value
org.graalvm.compiler.nodes.java.StoreIndexedNode#virtualize(VirtualizerTool)->void::: store indexed node virtualize
org.graalvm.compiler.nodes.java.StoreIndexedNode#getState()->FrameState::: store indexed node get state
org.graalvm.compiler.nodes.java.StoreIndexedNode#canonical(CanonicalizerTool)->Node::: store indexed node canonical
org.graalvm.compiler.nodes.java.TypeSwitchNode#isSorted()->boolean::: type switch node is sorted
org.graalvm.compiler.nodes.java.TypeSwitchNode#keyCount()->int::: type switch node key count
org.graalvm.compiler.nodes.java.TypeSwitchNode#keyAt(int)->Constant::: type switch node key at
org.graalvm.compiler.nodes.java.TypeSwitchNode#equalKeys(SwitchNode)->boolean::: type switch node equal keys
org.graalvm.compiler.nodes.java.TypeSwitchNode#typeAt(int)->ResolvedJavaType::: type switch node type at
org.graalvm.compiler.nodes.java.TypeSwitchNode#generate(NodeLIRBuilderTool)->void::: type switch node generate
org.graalvm.compiler.nodes.java.TypeSwitchNode#simplify(SimplifierTool)->void::: type switch node simplify
org.graalvm.compiler.nodes.java.TypeSwitchNode#getValueStampForSuccessor(AbstractBeginNode)->Stamp::: type switch node get value stamp for successor
org.graalvm.compiler.nodes.java.UnsafeCompareAndExchangeNode#finishVirtualize(VirtualizerTool, LogicNode, ValueNode)->void::: unsafe compare and exchange node finish virtualize
org.graalvm.compiler.nodes.java.UnsafeCompareAndSwapNode#finishVirtualize(VirtualizerTool, LogicNode, ValueNode)->void::: unsafe compare and swap node finish virtualize
org.graalvm.compiler.nodes.java.ValueCompareAndSwapNode#generate(NodeLIRBuilderTool)->void::: value compare and swap node generate

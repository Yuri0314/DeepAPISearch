FDBigInteger#toHexString():::Converts this FDBigInteger to a hexadecimal string.:::if->return->sb->new->StringBuilder->for->i->for->i->return->sb->toString
FDBigInteger#toBigInteger():::Converts this FDBigInteger to a BigInteger.:::magnitude->new->byteArr->for->i->return->new->BigInteger->shiftLeft
FDBigInteger#toString():::Converts this FDBigInteger to a string.:::return->toBigInteger->toString
FloatingDecimal#toJavaFormatString(double):::Converts a double precision floating point value to a String.:::return->getBinaryToASCIIConverter->toJavaFormatString
FloatingDecimal#toJavaFormatString(float):::Converts a single precision floating point value to a String.:::return->getBinaryToASCIIConverter->toJavaFormatString
FloatingDecimal#appendTo(double, Appendable):::Appends a double precision floating point value to an Appendable.:::getBinaryToASCIIConverter->appendTo
FloatingDecimal#appendTo(float, Appendable):::Appends a single precision floating point value to an Appendable.:::getBinaryToASCIIConverter->appendTo
FloatingDecimal#parseDouble(String):::Converts a String to a double precision floating point value.:::return->readJavaFormatString->doubleValue
FloatingDecimal#parseFloat(String):::Converts a String to a single precision floating point value.:::return->readJavaFormatString->floatValue
FloatingDecimal.BinaryToASCIIConverter#toJavaFormatString():::Converts a floating point value into an ASCII String.:::
FloatingDecimal.BinaryToASCIIConverter#appendTo(Appendable):::Appends a floating point value to an Appendable.:::
FloatingDecimal.BinaryToASCIIConverter#getDecimalExponent():::Retrieves the decimal exponent most closely corresponding to this value.:::
FloatingDecimal.BinaryToASCIIConverter#getDigits(char[]):::Retrieves the value as an array of digits.:::
FloatingDecimal.BinaryToASCIIConverter#isNegative():::Indicates the sign of the value.:::
FloatingDecimal.BinaryToASCIIConverter#isExceptional():::Indicates whether the value is either infinite or not a number.:::
FloatingDecimal.BinaryToASCIIConverter#digitsRoundedUp():::Indicates whether the value was rounded up during the binary to ASCII conversion.:::
FloatingDecimal.BinaryToASCIIConverter#decimalDigitsExact():::Indicates whether the binary to ASCII conversion was exact.:::
FloatingDecimal.BinaryToASCIIBuffer#estimateDecExp(long, int):::Estimate decimal exponent:::d2->Double->longBitsToDouble->d->dBits->Double->doubleToRawLongBits->exponent->isNegative->if->mask->r->return->else->if->return->else->return
FloatingDecimal.ASCIIToBinaryBuffer#doubleValue():::Takes a FloatingDecimal, which we presumably just scanned in, and finds out what its value is, as a double:::kDigits->Math->min->iValue->iDigits->Math->min->for->i->lValue->for->i->dValue->exp->if->if->return->else->if->if->rValue->return->slop->if->rValue->return->else->if->rValue->return->if->if->return->if->if->j->for->t->if->Double->isInfinite->if->Double->isInfinite->return->else->if->if->return->if->if->j->for->t->if->if->return->if->bigD0->new->FDBigInteger->ieeeBits->Double->doubleToRawLongBits->B5->Math->max->D5->Math->max->bigD0->multByPow52->bigD0->makeImmutable->bigD->prevD2->while->binexp->bigBbits->if->else->leadingZeros->Long->numberOfLeadingZeros->shift->lowOrderZeros->Long->numberOfTrailingZeros->bigIntExp->bigIntNBits->B2->D2->Ulp2->if->else->hulpbias->if->else->common2->Math->Math->min->min->bigB->FDBigInteger->valueOfMulPow52->if->bigD0->leftShift->diff->cmpResult->overvalue->if->bigB->cmp->bigB->leftInplaceSub->if->if->diff->leftShift->else->if->bigD->rightInplaceSub->else->break->diff->cmpPow52->if->break->else->if->if->break->else->if->break->continue->if->return->Double->longBitsToDouble
FloatingDecimal.ASCIIToBinaryBuffer#floatValue():::Takes a FloatingDecimal, which we presumably just scanned in, and finds out what its value is, as a float:::kDigits->Math->min->iValue->for->i->fValue->exp->if->if->return->else->if->if->return->slop->if->return->else->if->return->else->if->lValue->for->i->dValue->return->dValue->if->if->return->if->if->j->for->else->if->if->return->if->if->j->for->Math->Math->min->max->if->bigD0->new->FDBigInteger->ieeeBits->Float->floatToRawIntBits->B5->Math->max->D5->Math->max->bigD0->multByPow52->bigD0->makeImmutable->bigD->prevD2->while->binexp->bigBbits->if->else->leadingZeros->Integer->numberOfLeadingZeros->shift->lowOrderZeros->Integer->numberOfTrailingZeros->bigIntExp->bigIntNBits->B2->D2->Ulp2->if->else->hulpbias->if->else->common2->Math->Math->min->min->bigB->FDBigInteger->valueOfMulPow52->if->bigD0->leftShift->diff->cmpResult->overvalue->if->bigB->cmp->bigB->leftInplaceSub->if->if->diff->leftShift->else->if->bigD->rightInplaceSub->else->break->diff->cmpPow52->if->break->else->if->if->break->else->if->break->continue->if->return->Float->intBitsToFloat
FloatingDecimal#getBinaryToASCIIConverter(double):::Returns a BinaryToASCIIConverter for a double:::return->getBinaryToASCIIConverter
FloatingDecimal#getBinaryToASCIIConverter(double, boolean):::Returns a BinaryToASCIIConverter for a double:::dBits->Double->doubleToRawLongBits->isNegative->fractBits->binExp->if->if->return->else->return->nSignificantBits->if->if->return->leadingZeros->Long->numberOfLeadingZeros->shift->else->buf->getBinaryToASCIIBuffer->buf->setSign->buf->dtoa->return
FloatingDecimal#parseHexString(String):::Converts string s to a suitable floating decimal; uses the double constructor and sets the roundDir variable appropriately in case the value is later converted to a float.:::m->matcher->validInput->m->matches->if->throw->new->NumberFormatException->else->group1->m->group->isNegative->group1->equals->significandString->signifLength->exponentAdjust->leftDigits->rightDigits->group4->if->m->group->stripLeadingZeros->significandString->length->else->group6->m->group->stripLeadingZeros->group6->length->group7->m->group->group7->length->stripLeadingZeros->significandString->length->if->else->if->return->group8->m->group->positiveExponent->group8->equals->unsignedRawExponent->try->Integer->m->group->parseInt->catch->return->finally->rawExponent->exponent->round->sticky->nextShift->significand->leadingDigit->getHexDigit->if->else->if->else->if->else->if->else->throw->new->AssertionError->i->for->if->currentDigit->getHexDigit->switch->break->break->break->break->throw->new->AssertionError->while->getHexDigit->floatBits->if->if->else->threshShift->floatSticky->iValue->if->else->if->else->threshShift->floatSticky->iValue->if->fValue->Float->intBitsToFloat->if->return->else->if->else->if->return->else->bitsDiscarded->if->mask->leastZero->if->value->Double->longBitsToDouble->Double->longBitsToDouble->return->new->PreparedASCIIToBinaryBuffer
FloatingDecimal#stripLeadingZeros(String):::Returns s with any leading zeros removed.:::if->s->isEmpty->s->charAt->for->i->s->length->return->return
FloatingDecimal#getHexDigit(String, int):::Extracts a hexadecimal digit from position position of string s.:::value->Character->s->charAt->digit->if->throw->s->charAt->new->AssertionError->return
FormattedFloatingDecimal#getMantissa():::Returns the mantissa as a char[]:::return
FormattedFloatingDecimal#getExponent():::Returns the exponent as a char[]:::return

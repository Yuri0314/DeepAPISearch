FDBigInteger#valueOfPow52(int, int)::: big integer value of pow52:::if->if->return->big5pow->else->if->pow5->wordcount->bitcount->if->return->new->intArr->new->FDBigInteger->else->return->new->intArr->new->FDBigInteger->else->return->big5pow->leftShift->else->return->valueOfPow2
FDBigInteger#valueOfMulPow52(long, int, int)::: big integer value of mul pow52:::v0->v1->wordcount->bitcount->if->if->pow5->carry->v2->if->return->new->intArr->new->FDBigInteger->else->return->new->intArr->new->FDBigInteger->else->pow5->big5pow->r->if->new->intArr->mult->else->new->intArr->mult->return->new->FDBigInteger->leftShift->else->if->if->return->new->intArr->new->FDBigInteger->else->return->new->intArr->new->FDBigInteger->return->new->intArr->new->FDBigInteger
FDBigInteger#valueOfPow2(int)::: big integer value of pow2:::wordcount->bitcount->return->new->intArr->new->FDBigInteger
FDBigInteger#trimLeadingZeros()::: big integer trim leading zeros:::i->if->while->if
FDBigInteger#getNormalizationBias()::: big integer get normalization bias:::if->throw->new->IllegalArgumentException->zeros->Integer->numberOfLeadingZeros->return
FDBigInteger#leftShift(int[], int, int[], int, int, int)::: big integer left shift:::for->v
FDBigInteger#leftShift(int)::: big integer left shift:::if->return->wordcount->bitcount->if->if->return->Arrays->copyOf->new->FDBigInteger->else->anticount->idx->prev->hi->result->if->new->intArr->else->new->intArr->leftShift->return->new->FDBigInteger->else->if->anticount->if->idx->prev->for->v->if->else->idx->prev->hi->result->src->if->if->new->intArr->leftShift->return
FDBigInteger#size()::: big integer size:::return
FDBigInteger#quoRemIteration(FDBigInteger)::: big integer quo rem iteration:::thSize->this->size->sSize->S->size->if->p->multAndCarryBy10->if->else->trimLeadingZeros->return->else->if->throw->new->IllegalArgumentException->q->diff->multDiffMe->if->sum->tStart->sd->td->while->for->sIndex->tIndex->p->multAndCarryBy10->trimLeadingZeros->return
FDBigInteger#multBy10()::: big integer mult by10:::if->return->if->res->new->intArr->multAndCarryBy10->return->new->FDBigInteger->else->p->multAndCarryBy10->if->if->if->System->arraycopy->else->Arrays->copyOf->else->trimLeadingZeros->return
FDBigInteger#multByPow52(int, int)::: big integer mult by pow52:::if->return->res->if->r->extraSize->if->new->intArr->mult->new->FDBigInteger->else->pow5->big5pow->pow5->size->new->intArr->mult->new->FDBigInteger->return->res->leftShift
FDBigInteger#mult(int[], int, int[], int, int[])::: big integer mult:::for->i
FDBigInteger#leftInplaceSub(FDBigInteger)::: big integer left inplace sub:::minuend->if->clone->new->FDBigInteger->else->offsetDiff->sData->mData->subLen->minLen->if->rLen->if->System->arraycopy->Arrays->fill->else->r->new->intArr->System->arraycopy->borrow->mIndex->for->sIndex->for->minuend->trimLeadingZeros->return
FDBigInteger#rightInplaceSub(FDBigInteger)::: big integer right inplace sub:::minuend->if->clone->new->FDBigInteger->offsetDiff->sData->mData->subLen->minLen->if->rLen->if->System->arraycopy->Arrays->fill->else->r->new->intArr->System->arraycopy->else->rLen->if->Arrays->copyOf->sIndex->borrow->for->for->mIndex->subtrahend->trimLeadingZeros->return
FDBigInteger#checkZeroTail(int[], int)::: big integer check zero tail:::while->if->return->return
FDBigInteger#cmp(FDBigInteger)::: big integer cmp:::aSize->bSize->if->return->else->if->return->aLen->bLen->while->a->b->if->return->if->return->checkZeroTail->if->return->checkZeroTail->return
FDBigInteger#cmpPow52(int, int)::: big integer cmp pow52:::if->wordcount->bitcount->size->if->return->else->if->return->a->b->if->return->return->checkZeroTail->return->this->big5pow->leftShift->cmp
FDBigInteger#addAndCmp(FDBigInteger, FDBigInteger)::: big integer add and cmp:::big->small->xSize->x->size->ySize->y->size->bSize->sSize->if->else->thSize->this->size->if->return->if->return->this->cmp->if->return->if->return->top->if->if->if->if->return->v->if->return->if->return->else->if->return->v->if->return->if->return->return->this->big->add->cmp
FDBigInteger#makeImmutable()::: big integer make immutable:::
FDBigInteger#mult(int)::: big integer mult:::if->return->r->new->intArr->mult->return->new->FDBigInteger
FDBigInteger#mult(FDBigInteger)::: big integer mult:::if->return->if->this->size->return->other->mult->if->return->if->other->size->return->this->mult->r->new->intArr->mult->return->new->FDBigInteger
FDBigInteger#add(FDBigInteger)::: big integer add:::big->small->bigLen->smallLen->tSize->this->size->oSize->other->size->if->else->r->new->intArr->i->carry->for->for->return->new->FDBigInteger
FDBigInteger#multAddMe(int, int)::: big integer mult add me:::v->p->for->i->if
FDBigInteger#multDiffMe(long, FDBigInteger)::: big integer mult diff me:::diff->if->deltaSize->if->sd->td->for->sIndex->tIndex->else->rd->new->intArr->sIndex->rIndex->sd->for->tIndex->td->for->return
FDBigInteger#multAndCarryBy10(int[], int, int[])::: big integer mult and carry by10:::carry->for->i->return
FDBigInteger#mult(int[], int, int, int[])::: big integer mult:::val->carry->for->i
FDBigInteger#mult(int[], int, int, int, int[])::: big integer mult:::v->carry->for->j->for->j
FDBigInteger#big5pow(int):::Computes 5 raised to a given power.:::if->return->return->big5powRec
FDBigInteger#big5powRec(int):::Computes 5 raised to a given power.:::if->return->q->r->bigq->big5powRec->if->return->bigq->mult->else->return->bigq->big5powRec->mult
FDBigInteger#toHexString():::Converts this FDBigInteger to a hexadecimal string.:::if->return->sb->new->StringBuilder->for->i->for->i->return->sb->toString
FDBigInteger#toBigInteger():::Converts this FDBigInteger to a BigInteger.:::magnitude->new->byteArr->for->i->return->new->BigInteger->shiftLeft
FDBigInteger#toString():::Converts this FDBigInteger to a string.:::return->toBigInteger->toString
FloatingDecimal#toJavaFormatString(double):::Converts a double precision floating point value to a String.:::return->getBinaryToASCIIConverter->toJavaFormatString
FloatingDecimal#toJavaFormatString(float):::Converts a single precision floating point value to a String.:::return->getBinaryToASCIIConverter->toJavaFormatString
FloatingDecimal#appendTo(double, Appendable):::Appends a double precision floating point value to an Appendable.:::getBinaryToASCIIConverter->appendTo
FloatingDecimal#appendTo(float, Appendable):::Appends a single precision floating point value to an Appendable.:::getBinaryToASCIIConverter->appendTo
FloatingDecimal#parseDouble(String):::Converts a String to a double precision floating point value.:::return->readJavaFormatString->doubleValue
FloatingDecimal#parseFloat(String):::Converts a String to a single precision floating point value.:::return->readJavaFormatString->floatValue
FloatingDecimal.BinaryToASCIIConverter#toJavaFormatString():::Converts a floating point value into an ASCII String.:::
FloatingDecimal.BinaryToASCIIConverter#appendTo(Appendable):::Appends a floating point value to an Appendable.:::
FloatingDecimal.BinaryToASCIIConverter#getDecimalExponent():::Retrieves the decimal exponent most closely corresponding to this value.:::
FloatingDecimal.BinaryToASCIIConverter#getDigits(char[]):::Retrieves the value as an array of digits.:::
FloatingDecimal.BinaryToASCIIConverter#isNegative():::Indicates the sign of the value.:::
FloatingDecimal.BinaryToASCIIConverter#isExceptional():::Indicates whether the value is either infinite or not a number.:::
FloatingDecimal.BinaryToASCIIConverter#digitsRoundedUp():::Indicates whether the value was rounded up during the binary to ASCII conversion.:::
FloatingDecimal.BinaryToASCIIConverter#decimalDigitsExact():::Indicates whether the binary to ASCII conversion was exact.:::
FloatingDecimal.ExceptionalBinaryToASCIIBuffer#toJavaFormatString()::: exceptional binary to buffer to java format string:::return
FloatingDecimal.ExceptionalBinaryToASCIIBuffer#appendTo(Appendable)::: exceptional binary to buffer append to:::if->append->else->if->append->else
FloatingDecimal.ExceptionalBinaryToASCIIBuffer#getDecimalExponent()::: exceptional binary to buffer get decimal exponent:::throw->new->IllegalArgumentException
FloatingDecimal.ExceptionalBinaryToASCIIBuffer#getDigits(char[])::: exceptional binary to buffer get digits:::throw->new->IllegalArgumentException
FloatingDecimal.ExceptionalBinaryToASCIIBuffer#isNegative()::: exceptional binary to buffer is negative:::return
FloatingDecimal.ExceptionalBinaryToASCIIBuffer#isExceptional()::: exceptional binary to buffer is exceptional:::return
FloatingDecimal.ExceptionalBinaryToASCIIBuffer#digitsRoundedUp()::: exceptional binary to buffer digits rounded up:::throw->new->IllegalArgumentException
FloatingDecimal.ExceptionalBinaryToASCIIBuffer#decimalDigitsExact()::: exceptional binary to buffer decimal digits exact:::throw->new->IllegalArgumentException
FloatingDecimal.BinaryToASCIIBuffer#toJavaFormatString()::: binary to buffer to java format string:::len->getChars->return->new->String
FloatingDecimal.BinaryToASCIIBuffer#appendTo(Appendable)::: binary to buffer append to:::len->getChars->if->append->else->if->append->else
FloatingDecimal.BinaryToASCIIBuffer#getDecimalExponent()::: binary to buffer get decimal exponent:::return
FloatingDecimal.BinaryToASCIIBuffer#getDigits(char[])::: binary to buffer get digits:::System->arraycopy->return
FloatingDecimal.BinaryToASCIIBuffer#isNegative()::: binary to buffer is negative:::return
FloatingDecimal.BinaryToASCIIBuffer#isExceptional()::: binary to buffer is exceptional:::return
FloatingDecimal.BinaryToASCIIBuffer#digitsRoundedUp()::: binary to buffer digits rounded up:::return
FloatingDecimal.BinaryToASCIIBuffer#decimalDigitsExact()::: binary to buffer decimal digits exact:::return
FloatingDecimal.BinaryToASCIIBuffer#setSign(boolean)::: binary to buffer set sign:::
FloatingDecimal.BinaryToASCIIBuffer#developLongDigits(int, long, int):::This is the easy subcase -- all the significant bits, after scaling, are held in lvalue:::if->pow10->residue->if->digitno->c->if->ivalue->while->while->else->while->while
FloatingDecimal.BinaryToASCIIBuffer#dtoa(int, long, int, boolean)::: binary to buffer dtoa:::tailZeros->Long->numberOfTrailingZeros->nFractBits->nTinyBits->Math->max->if->if->if->insignificant->if->insignificantDigitsForPow2->else->if->else->developLongDigits->return->decExp->estimateDecExp->B2->B5->S2->S5->M2->M5->Math->max->Math->max->common2factor->Math->min->if->if->ndigit->low->high->lowDigitDifference->q->Bbits->tenSbits->if->if->b->s->m->tens->if->else->if->while->if->else->else->b->s->m->tens->if->else->if->while->if->else->else->Sval->FDBigInteger->valueOfPow52->shiftBias->Sval->getNormalizationBias->Sval->leftShift->Bval->FDBigInteger->valueOfMulPow52->Mval->FDBigInteger->valueOfPow52->tenSval->FDBigInteger->valueOfPow52->Bval->quoRemIteration->Bval->cmp->tenSval->addAndCmp->if->else->if->while->Bval->quoRemIteration->Mval->multBy10->Bval->cmp->tenSval->addAndCmp->if->Bval->leftShift->Bval->cmp->else->Bval->cmp->if->if->if->if->roundup->else->if->roundup->else->roundup
FloatingDecimal.BinaryToASCIIBuffer#roundup()::: binary to buffer roundup:::i->q->if->while->if->return
FloatingDecimal.BinaryToASCIIBuffer#estimateDecExp(long, int):::Estimate decimal exponent:::d2->Double->longBitsToDouble->d->dBits->Double->doubleToRawLongBits->exponent->isNegative->if->mask->r->return->else->if->return->else->return
FloatingDecimal.BinaryToASCIIBuffer#insignificantDigits(int)::: binary to buffer insignificant digits:::i->for->return
FloatingDecimal.BinaryToASCIIBuffer#insignificantDigitsForPow2(int):::Calculates  insignificantDigitsForPow2(v) == insignificantDigits(1L<<v) :::if->return->return
FloatingDecimal.BinaryToASCIIBuffer#getChars(char[])::: binary to buffer get chars:::i->if->if->charLength->Math->min->System->arraycopy->if->Arrays->fill->else->if->t->System->arraycopy->else->else->if->if->Arrays->fill->System->arraycopy->else->if->System->arraycopy->else->e->if->else->if->else->if->else->return
FloatingDecimal#getBinaryToASCIIBuffer()::: floating decimal get binary to buffer:::return->threadLocalBinaryToASCIIBuffer->get
FloatingDecimal.ASCIIToBinaryConverter#doubleValue()::: to binary converter double value:::
FloatingDecimal.ASCIIToBinaryConverter#floatValue()::: to binary converter float value:::
FloatingDecimal.PreparedASCIIToBinaryBuffer#doubleValue()::: prepared to binary buffer double value:::return
FloatingDecimal.PreparedASCIIToBinaryBuffer#floatValue()::: prepared to binary buffer float value:::return
FloatingDecimal.ASCIIToBinaryBuffer#doubleValue():::Takes a FloatingDecimal, which we presumably just scanned in, and finds out what its value is, as a double:::kDigits->Math->min->iValue->iDigits->Math->min->for->i->lValue->for->i->dValue->exp->if->if->return->else->if->if->rValue->return->slop->if->rValue->return->else->if->rValue->return->if->if->return->if->if->j->for->t->if->Double->isInfinite->if->Double->isInfinite->return->else->if->if->return->if->if->j->for->t->if->if->return->if->bigD0->new->FDBigInteger->ieeeBits->Double->doubleToRawLongBits->B5->Math->max->D5->Math->max->bigD0->multByPow52->bigD0->makeImmutable->bigD->prevD2->while->binexp->bigBbits->if->else->leadingZeros->Long->numberOfLeadingZeros->shift->lowOrderZeros->Long->numberOfTrailingZeros->bigIntExp->bigIntNBits->B2->D2->Ulp2->if->else->hulpbias->if->else->common2->Math->Math->min->min->bigB->FDBigInteger->valueOfMulPow52->if->bigD0->leftShift->diff->cmpResult->overvalue->if->bigB->cmp->bigB->leftInplaceSub->if->if->diff->leftShift->else->if->bigD->rightInplaceSub->else->break->diff->cmpPow52->if->break->else->if->if->break->else->if->break->continue->if->return->Double->longBitsToDouble
FloatingDecimal.ASCIIToBinaryBuffer#floatValue():::Takes a FloatingDecimal, which we presumably just scanned in, and finds out what its value is, as a float:::kDigits->Math->min->iValue->for->i->fValue->exp->if->if->return->else->if->if->return->slop->if->return->else->if->return->else->if->lValue->for->i->dValue->return->dValue->if->if->return->if->if->j->for->else->if->if->return->if->if->j->for->Math->Math->min->max->if->bigD0->new->FDBigInteger->ieeeBits->Float->floatToRawIntBits->B5->Math->max->D5->Math->max->bigD0->multByPow52->bigD0->makeImmutable->bigD->prevD2->while->binexp->bigBbits->if->else->leadingZeros->Integer->numberOfLeadingZeros->shift->lowOrderZeros->Integer->numberOfTrailingZeros->bigIntExp->bigIntNBits->B2->D2->Ulp2->if->else->hulpbias->if->else->common2->Math->Math->min->min->bigB->FDBigInteger->valueOfMulPow52->if->bigD0->leftShift->diff->cmpResult->overvalue->if->bigB->cmp->bigB->leftInplaceSub->if->if->diff->leftShift->else->if->bigD->rightInplaceSub->else->break->diff->cmpPow52->if->break->else->if->if->break->else->if->break->continue->if->return->Float->intBitsToFloat
FloatingDecimal#getBinaryToASCIIConverter(double):::Returns a BinaryToASCIIConverter for a double:::return->getBinaryToASCIIConverter
FloatingDecimal#getBinaryToASCIIConverter(double, boolean):::Returns a BinaryToASCIIConverter for a double:::dBits->Double->doubleToRawLongBits->isNegative->fractBits->binExp->if->if->return->else->return->nSignificantBits->if->if->return->leadingZeros->Long->numberOfLeadingZeros->shift->else->buf->getBinaryToASCIIBuffer->buf->setSign->buf->dtoa->return
FloatingDecimal#getBinaryToASCIIConverter(float)::: floating decimal get binary to converter:::fBits->Float->floatToRawIntBits->isNegative->fractBits->binExp->if->if->return->else->return->nSignificantBits->if->if->return->leadingZeros->Integer->numberOfLeadingZeros->shift->else->buf->getBinaryToASCIIBuffer->buf->setSign->buf->dtoa->return
FloatingDecimal#readJavaFormatString(String)::: floating decimal read java format string:::isNegative->signSeen->decExp->c->try->in->trim->len->in->length->if->throw->new->NumberFormatException->i->switch->in->charAt->in->charAt->if->if->in->indexOf->return->break->else->if->if->in->indexOf->return->break->else->if->if->ch->in->charAt->if->return->parseHexString->digits->new->charArr->nDigits->decSeen->decPt->nLeadZero->nTrailZero->while->in->charAt->if->else->if->if->throw->new->NumberFormatException->if->else->break->while->in->charAt->if->else->if->else->if->if->throw->new->NumberFormatException->if->else->break->isZero->if->break->if->else->if->in->charAt->expSign->expVal->reallyBig->expOverflow->switch->in->charAt->expAt->while->if->in->charAt->if->else->break->expLimit->if->if->else->else->if->break->if->in->charAt->in->charAt->in->charAt->in->charAt->break->if->return->return->new->ASCIIToBinaryBuffer->catch->finally->throw->new->NumberFormatException
FloatingDecimal#parseHexString(String):::Converts string s to a suitable floating decimal; uses the double constructor and sets the roundDir variable appropriately in case the value is later converted to a float.:::m->matcher->validInput->m->matches->if->throw->new->NumberFormatException->else->group1->m->group->isNegative->group1->equals->significandString->signifLength->exponentAdjust->leftDigits->rightDigits->group4->if->m->group->stripLeadingZeros->significandString->length->else->group6->m->group->stripLeadingZeros->group6->length->group7->m->group->group7->length->stripLeadingZeros->significandString->length->if->else->if->return->group8->m->group->positiveExponent->group8->equals->unsignedRawExponent->try->Integer->m->group->parseInt->catch->return->finally->rawExponent->exponent->round->sticky->nextShift->significand->leadingDigit->getHexDigit->if->else->if->else->if->else->if->else->throw->new->AssertionError->i->for->if->currentDigit->getHexDigit->switch->break->break->break->break->throw->new->AssertionError->while->getHexDigit->floatBits->if->if->else->threshShift->floatSticky->iValue->if->else->if->else->threshShift->floatSticky->iValue->if->fValue->Float->intBitsToFloat->if->return->else->if->else->if->return->else->bitsDiscarded->if->mask->leastZero->if->value->Double->longBitsToDouble->Double->longBitsToDouble->return->new->PreparedASCIIToBinaryBuffer
FloatingDecimal#stripLeadingZeros(String):::Returns s with any leading zeros removed.:::if->s->isEmpty->s->charAt->for->i->s->length->return->return
FloatingDecimal#getHexDigit(String, int):::Extracts a hexadecimal digit from position position of string s.:::value->Character->s->charAt->digit->if->throw->s->charAt->new->AssertionError->return
FormattedFloatingDecimal#valueOf(double, int, Form)::: formatted floating decimal value of:::fdConverter->FloatingDecimal->getBinaryToASCIIConverter->return->new->FormattedFloatingDecimal
FormattedFloatingDecimal#getBuffer()::: formatted floating decimal get buffer:::return->threadLocalCharBuffer->get
FormattedFloatingDecimal#getExponentRounded()::: formatted floating decimal get exponent rounded:::return
FormattedFloatingDecimal#getMantissa():::Returns the mantissa as a char[]:::return
FormattedFloatingDecimal#getExponent():::Returns the exponent as a char[]:::return
FormattedFloatingDecimal#applyPrecision(int, char[], int, int):::Returns new decExp in case of overflow.:::if->return->if->if->Arrays->fill->return->else->Arrays->fill->return->q->if->i->if->while->if->Arrays->fill->return->Arrays->fill->else->Arrays->fill->return
FormattedFloatingDecimal#fillCompatible(int, char[], int, int, boolean):::Fills mantissa and exponent char arrays for compatible format.:::startIndex->if->if->extraZeros->create->System->arraycopy->Arrays->fill->else->if->t->Math->min->create->System->arraycopy->System->arraycopy->else->create->System->arraycopy->else->if->zeros->Math->Math->min->max->t->Math->Math->min->max->if->create->Arrays->fill->if->System->arraycopy->else->if->create->System->arraycopy->else->create->else->if->create->System->arraycopy->else->create->e->expStartIntex->isNegExp->if->else->if->create->else->if->create->else->create
FormattedFloatingDecimal#create(boolean, int)::: formatted floating decimal create:::if->r->new->charArr->return->else->return->new->charArr
FormattedFloatingDecimal#fillDecimal(int, char[], int, int, boolean)::: formatted floating decimal fill decimal:::startIndex->if->if->create->System->arraycopy->Arrays->fill->else->t->Math->min->create->System->arraycopy->if->System->arraycopy->else->if->zeros->Math->Math->min->max->t->Math->Math->min->max->if->create->Arrays->fill->if->System->arraycopy->else->if->create->System->arraycopy->else->create
FormattedFloatingDecimal#fillScientific(int, char[], int, int, boolean):::Fills mantissa and exponent char arrays for SCIENTIFIC format.:::startIndex->t->Math->Math->min->max->if->create->System->arraycopy->else->create->expSign->e->if->else->if->new->charArr->else->if->new->charArr->else->hiExpChar->new->charArr

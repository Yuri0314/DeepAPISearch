com.sun.security.sasl.digest.DigestMD5Base#getMechanismName()->String:::Retrieves the SASL mechanism IANA name.
com.sun.security.sasl.digest.DigestMD5Base#unwrap(byte[], int, int)->byte[]:::Unwrap the incoming message using the wrap method of the secCtx object instance.
com.sun.security.sasl.digest.DigestMD5Base#wrap(byte[], int, int)->byte[]:::Wrap outgoing bytes using the wrap method of the secCtx object instance.
com.sun.security.sasl.digest.DigestMD5Base#dispose()->void::: digest d5 base dispose
com.sun.security.sasl.digest.DigestMD5Base#getNegotiatedProperty(String)->Object::: digest d5 base get negotiated property
com.sun.security.sasl.digest.DigestMD5Base#generateNonce()->byte[]::: digest d5 base generate nonce
com.sun.security.sasl.digest.DigestMD5Base#writeQuotedStringValue(ByteArrayOutputStream, byte[])->void:::Checks if a byte[] contains characters that must be quoted and write the resulting, possibly escaped, characters to out.
com.sun.security.sasl.digest.DigestMD5Base#quotedStringValue(String)->String::: digest d5 base quoted string value
com.sun.security.sasl.digest.DigestMD5Base#binaryToHex(byte[])->byte[]:::Convert a byte array to hexadecimal string.
com.sun.security.sasl.digest.DigestMD5Base#stringToByte_8859_1(String)->byte[]:::Used to convert username-value, passwd or realm to 8859_1 encoding if all chars in string are within the 8859_1 (Latin 1) encoding range.
com.sun.security.sasl.digest.DigestMD5Base#getPlatformCiphers()->byte[]::: digest d5 base get platform ciphers
com.sun.security.sasl.digest.DigestMD5Base#generateResponseValue(String, String, String, String, String, char[], byte[], byte[], int, byte[])->byte[]:::Assembles response-value for digest-response.
com.sun.security.sasl.digest.DigestMD5Base#nonceCountToHex(int)->String:::Takes 'nonceCount' value and returns HEX value of the value.
com.sun.security.sasl.digest.DigestMD5Base#parseDirectives(byte[], String[], List, int)->byte[][]:::Parses digest-challenge string, extracting each token and value(s)
com.sun.security.sasl.digest.DigestMD5Base.DigestIntegrity#wrap(byte[], int, int)->byte[]:::Append MAC onto outgoing message.
com.sun.security.sasl.digest.DigestMD5Base.DigestIntegrity#unwrap(byte[], int, int)->byte[]:::Return verified message without MAC - only if the received MAC and re-generated MAC are the same.
com.sun.security.sasl.digest.DigestMD5Base.DigestIntegrity#getHMAC(byte[], byte[], byte[], int, int)->byte[]:::Generates MAC to be appended onto out-going messages.
com.sun.security.sasl.digest.DigestMD5Base.DigestIntegrity#incrementSeqNum()->void:::Increment own sequence number and set answer in NBO sequenceNum field.
com.sun.security.sasl.digest.DigestMD5Base.DigestPrivacy#wrap(byte[], int, int)->byte[]:::Encrypt out-going message.
com.sun.security.sasl.digest.DigestMD5Base.DigestPrivacy#unwrap(byte[], int, int)->byte[]::: digest privacy unwrap
com.sun.security.sasl.digest.DigestMD5Client#hasInitialResponse()->boolean:::DIGEST-MD5 has no initial response
com.sun.security.sasl.digest.DigestMD5Client#evaluateChallenge(byte[])->byte[]:::Process the challenge data
com.sun.security.sasl.digest.DigestMD5Server#evaluateResponse(byte[])->byte[]::: digest d5 server evaluate response
com.sun.security.sasl.digest.DigestMD5Server#getAuthorizationID()->String::: digest d5 server get authorization d
com.sun.security.sasl.digest.FactoryImpl#createSaslClient(String[], String, String, String, Map, CallbackHandler)->SaslClient:::Returns a new instance of the DIGEST-MD5 SASL client mechanism.
com.sun.security.sasl.digest.FactoryImpl#createSaslServer(String, String, String, Map, CallbackHandler)->SaslServer:::Returns a new instance of the DIGEST-MD5 SASL server mechanism.
com.sun.security.sasl.digest.FactoryImpl#getMechanismNames(Map)->String[]:::Returns the authentication mechanisms that this factory can produce.
com.sun.security.sasl.digest.SecurityCtx#wrap(byte[], int, int)->byte[]:::Wrap out-going message and return wrapped message
com.sun.security.sasl.digest.SecurityCtx#unwrap(byte[], int, int)->byte[]:::Unwrap incoming message and return original message

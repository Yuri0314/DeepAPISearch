Plugin#getType():::The type of this plugin.:::return
Plugin#getState():::The Plugin set of states.:::return->EnumSet->of
Plugin#getName():::The plugin name.:::return->getClass->getName->replace
Plugin#getDescription():::The plugin description.:::return
Plugin#getOption():::The option that identifies this plugin:::return->getName
Plugin#hasArguments():::Has this plugin require one or more arguments? A plugin can have one or more optional arguments:::return
Plugin#getArgumentsDescription():::The plugin argument(s) description.:::return
Plugin#getStateDescription():::Return a message indicating the status of the provider.:::return->getState->contains->PluginsResourceBundle->getMessage->PluginsResourceBundle->getMessage
Plugin#configure(Map):::Configure the plugin based on the passed configuration:::
Plugin#transform(ResourcePool, ResourcePoolBuilder):::Visit the content of the modules that are composing the image.:::
ResourcePool#moduleView():::Return the module view of this resource pool.:::
ResourcePool#entries():::Get all ResourcePoolEntry contained in this ResourcePool instance.:::
ResourcePool#entryCount():::Return the number of ResourcePoolEntry count in this ResourcePool.:::
ResourcePool#findEntry(String):::Get the ResourcePoolEntry for the passed path.:::
ResourcePool#findEntryInContext(String, ResourcePoolEntry):::Get the ModuleEntry for the passed path restricted to supplied context.:::
ResourcePool#contains(ResourcePoolEntry):::Check if the ResourcePool contains the given ResourcePoolEntry.:::
ResourcePool#isEmpty():::Check if the ResourcePool contains some content at all.:::
ResourcePool#byteOrder():::The ByteOrder currently in use when generating the jimage file.:::
ResourcePool#transformAndCopy(Function, ResourcePoolBuilder):::Visit each ResourcePoolEntry in this ResourcePool to transform it and copy the transformed ResourcePoolEntry to the output ResourcePoolBuilder.:::entries->res->transform->apply->if->outBuilder->add->forEach
ResourcePoolBuilder#add(ResourcePoolEntry):::Add a ResourcePoolEntry.:::
ResourcePoolBuilder#build():::Done with adding resource entries:::
ResourcePoolEntry#moduleName():::The module name of this ResourcePoolEntry.:::
ResourcePoolEntry#path():::The path of this ResourcePoolEntry.:::
ResourcePoolEntry#type():::The ResourcePoolEntry's type.:::
ResourcePoolEntry#contentLength():::The ResourcePoolEntry content length.:::
ResourcePoolEntry#content():::The ResourcePoolEntry content as an InputStream.:::
ResourcePoolEntry#linkedTarget():::Returns a target linked with this entry.:::return
ResourcePoolEntry#contentBytes():::The ResourcePoolEntry content as an array of bytes.:::try->is->content->return->is->readAllBytes->catch->throw->new->UncheckedIOException->finally
ResourcePoolEntry#write(OutputStream):::Write the content of this ResourcePoolEntry to an OutputStream.:::try->out->contentBytes->write->catch->throw->new->UncheckedIOException->finally
ResourcePoolEntry#copyWithContent(byte[]):::Create a ResourcePoolEntry with new content but other information copied from this ResourcePoolEntry.:::return->ResourcePoolEntryFactory->create
ResourcePoolEntry#copyWithContent(Path):::Create a ResourcePoolEntry with new content but other information copied from this ResourcePoolEntry.:::return->ResourcePoolEntryFactory->create
ResourcePoolEntry#create(String, ResourcePoolEntry.Type, byte[]):::Create a ResourcePoolEntry for a resource of the given type.:::return->ResourcePoolEntryFactory->create
ResourcePoolEntry#create(String, byte[]):::Create a ResourcePoolEntry for a resource of type Type#CLASS_OR_RESOURCE.:::return->create
ResourcePoolEntry#create(String, ResourcePoolEntry.Type, Path):::Create a ResourcePoolEntry for a resource of the given type.:::return->ResourcePoolEntryFactory->create
ResourcePoolEntry#create(String, Path):::Create a ResourcePoolEntry for a resource of type Type#CLASS_OR_RESOURCE.:::return->create
ResourcePoolEntry#createSymLink(String, ResourcePoolEntry.Type, ResourcePoolEntry):::Create a ResourcePoolEntry for a resource the given path and type:::return->ResourcePoolEntryFactory->createSymbolicLink
ResourcePoolModule#name():::The module name.:::
ResourcePoolModule#findEntry(String):::Retrieves a ResourcePoolEntry from the given path (e.g: /mymodule/com.foo.bar/MyClass.class):::
ResourcePoolModule#descriptor():::The module descriptor of this module.:::
ResourcePoolModule#targetPlatform():::The target platform:::
ResourcePoolModule#packages():::Retrieves all the packages located in this module.:::
ResourcePoolModule#entries():::Retrieves the stream of ResourcePoolEntry.:::
ResourcePoolModule#entryCount():::Return the number of ResourcePoolEntry count in this ResourcePoolModule.:::
ResourcePoolModuleView#findModule(String):::Find the module, if any, of the given name.:::
ResourcePoolModuleView#findModule(ResourcePoolEntry):::Find the module, if any, of the given ResourcePoolEntry:::name->Objects->requireNonNull->moduleName->return->findModule->Optional->empty
ResourcePoolModuleView#modules():::The stream of modules contained in this ResourcePool.:::
ResourcePoolModuleView#moduleCount():::Return the number of ResourcePoolModule count in this ResourcePool.:::

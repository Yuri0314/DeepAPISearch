AbstractDOMSignatureMethod#verify(Key, SignedInfo, byte[], XMLValidateContext):::Verifies the passed-in signature with the specified key, using the underlying Signature or Mac algorithm.:::
AbstractDOMSignatureMethod#sign(Key, SignedInfo, XMLSignContext):::Signs the bytes with the specified key, using the underlying Signature or Mac algorithm.:::
AbstractDOMSignatureMethod#getJCAAlgorithm():::Returns the java.security.Signature or javax.crypto.Mac standard algorithm name.:::
AbstractDOMSignatureMethod#getAlgorithmType():::Returns the type of signature algorithm.:::
AbstractDOMSignatureMethod#marshal(Node, String, DOMCryptoContext):::This method invokes the #marshalParams marshalParams method to marshal any algorithm-specific parameters.:::ownerDoc->DOMUtils->getOwnerDocument->smElem->DOMUtils->createElement->DOMUtils->getAlgorithm->setAttribute->if->getParameterSpec->marshalParams->parent->appendChild
AbstractDOMSignatureMethod#marshalParams(Element, String):::Marshals the algorithm-specific parameters to an Element and appends it to the specified parent element:::throw->getAlgorithm->new->MarshalException
AbstractDOMSignatureMethod#unmarshalParams(Element):::Unmarshals SignatureMethodParameterSpec from the specified Element:::throw->getAlgorithm->new->MarshalException
AbstractDOMSignatureMethod#checkParams(SignatureMethodParameterSpec):::Checks if the specified parameters are valid for this algorithm:::if->throw->getAlgorithm->new->InvalidAlgorithmParameterException
AbstractDOMSignatureMethod#equals(Object)::: abstract signature method equals:::if->return->if->return->osm->return->getAlgorithm->osm->getAlgorithm->equals->osm->getParameterSpec->paramsEqual
AbstractDOMSignatureMethod#hashCode()::: abstract signature method hash code:::result->getAlgorithm->hashCode->spec->getParameterSpec->if->spec->hashCode->return
AbstractDOMSignatureMethod#paramsEqual(AlgorithmParameterSpec):::Returns true if parameters are equal; false otherwise:::return->getParameterSpec
ApacheCanonicalizer#getParameterSpec()::: apache canonicalizer get parameter spec:::return
ApacheCanonicalizer#init(XMLStructure, XMLCryptoContext)::: apache canonicalizer init:::if->throw->new->ClassCastException->if->throw->new->NullPointerException->if->throw->new->ClassCastException->getNode->DOMUtils->getOwnerDocument
ApacheCanonicalizer#marshalParams(XMLStructure, XMLCryptoContext)::: apache canonicalizer marshal params:::if->throw->new->ClassCastException->if->throw->new->NullPointerException->if->throw->new->ClassCastException->getNode->DOMUtils->getOwnerDocument
ApacheCanonicalizer#canonicalize(Data, XMLCryptoContext)::: apache canonicalizer canonicalize:::return->canonicalize
ApacheCanonicalizer#canonicalize(Data, XMLCryptoContext, OutputStream)::: apache canonicalizer canonicalize:::if->try->Canonicalizer->getAlgorithm->getInstance->secVal->Utils->secureValidation->apacheCanonicalizer->setSecureValidation->LOG->getAlgorithm->debug->catch->throw->getAlgorithm->ice->getMessage->new->TransformException->finally->if->apacheCanonicalizer->setWriter->else->apacheCanonicalizer->new->ByteArrayOutputStream->setWriter->try->nodeSet->if->in->getXMLSignatureInput->if->in->isElement->if->return->apacheCanonicalizer->in->getSubNode->canonicalizeSubtree->new->ByteArrayInputStream->new->OctetStreamData->else->return->apacheCanonicalizer->in->getSubNode->canonicalizeSubtree->new->ByteArrayInputStream->new->OctetStreamData->else->if->in->isNodeSet->in->getNodeSet->else->return->apacheCanonicalizer->Utils->in->getOctetStream->readBytesFromStream->canonicalize->new->ByteArrayInputStream->new->OctetStreamData->else->if->subTree->if->return->apacheCanonicalizer->subTree->getRoot->canonicalizeSubtree->new->ByteArrayInputStream->new->OctetStreamData->else->return->apacheCanonicalizer->subTree->getRoot->canonicalizeSubtree->new->ByteArrayInputStream->new->OctetStreamData->else->if->nsd->Utils->nsd->iterator->toNodeSet->LOG->nodeSet->size->debug->else->return->apacheCanonicalizer->Utils->getOctetStream->readBytesFromStream->canonicalize->new->ByteArrayInputStream->new->OctetStreamData->if->return->apacheCanonicalizer->canonicalizeXPathNodeSet->new->ByteArrayInputStream->new->OctetStreamData->else->return->apacheCanonicalizer->canonicalizeXPathNodeSet->new->ByteArrayInputStream->new->OctetStreamData->catch->throw->new->TransformException->finally
ApacheCanonicalizer#transform(Data, XMLCryptoContext, OutputStream)::: apache canonicalizer transform:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->if->throw->new->TransformException->if->try->getAlgorithm->transformElem->getChildNodes->new->Transform->apacheTransform->xc->getBaseURI->setElement->secVal->Utils->secureValidation->apacheTransform->setSecureValidation->LOG->getAlgorithm->debug->catch->throw->getAlgorithm->new->TransformException->finally->in->if->LOG->debug->getXMLSignatureInput->else->if->LOG->debug->if->subTree->subTree->getRoot->new->XMLSignatureInput->in->subTree->excludeComments->setExcludeComments->else->nodeSet->Utils->iterator->toNodeSet->new->XMLSignatureInput->else->LOG->debug->try->getOctetStream->new->XMLSignatureInput->catch->throw->new->TransformException->finally->secVal->Utils->secureValidation->in->setSecureValidation->try->apacheTransform->performTransform->if->in->isNodeSet->in->isElement->return->if->in->isOctetStream->return->new->ApacheOctetStreamData->else->return->new->ApacheNodeSetData->catch->throw->new->TransformException->finally
ApacheCanonicalizer#isFeatureSupported(String)::: apache canonicalizer is feature supported:::if->throw->new->NullPointerException->else->return
ApacheData#getXMLSignatureInput():::Returns the XMLSignatureInput.:::
ApacheNodeSetData#iterator()::: apache node set data iterator:::if->xi->getNodeFilters->xi->getNodeFilters->isEmpty->return->Collections->xi->getNodeFilters->getNodeSet->unmodifiableSet->iterator->try->return->Collections->xi->getNodeSet->unmodifiableSet->iterator->catch->throw->new->RuntimeException->finally
ApacheNodeSetData#getXMLSignatureInput()::: apache node set data get signature input:::return
ApacheNodeSetData#getNodeSet(List)::: apache node set data get node set:::if->xi->isNeedsToBeExpanded->XMLUtils->XMLUtils->xi->getSubNode->getOwnerDocument->circumventBug2650->inputSet->new->LinkedHashSet<Node>->XMLUtils->xi->getSubNode->xi->isExcludeComments->getSet->nodeSet->new->LinkedHashSet<Node>->foreach->it->nodeFilters->iterator->skipNode->while->it->hasNext->nf->it->next->if->nf->isNodeInclude->if->nodeSet->add->return
ApacheOctetStreamData#getXMLSignatureInput()::: apache octet stream data get signature input:::return
ApacheTransform#getParameterSpec()::: apache transform get parameter spec:::return
ApacheTransform#init(XMLStructure, XMLCryptoContext)::: apache transform init:::if->throw->new->ClassCastException->if->throw->new->NullPointerException->if->throw->new->ClassCastException->getNode->DOMUtils->getOwnerDocument
ApacheTransform#marshalParams(XMLStructure, XMLCryptoContext)::: apache transform marshal params:::if->throw->new->ClassCastException->if->throw->new->NullPointerException->if->throw->new->ClassCastException->getNode->DOMUtils->getOwnerDocument
ApacheTransform#transform(Data, XMLCryptoContext)::: apache transform transform:::if->throw->new->NullPointerException->return->transformIt
ApacheTransform#transform(Data, XMLCryptoContext, OutputStream)::: apache transform transform:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->return->transformIt
ApacheTransform#transformIt(Data, XMLCryptoContext, OutputStream)::: apache transform transform it:::if->throw->new->TransformException->if->try->getAlgorithm->transformElem->getChildNodes->new->Transform->apacheTransform->xc->getBaseURI->setElement->secVal->Utils->secureValidation->apacheTransform->setSecureValidation->LOG->getAlgorithm->debug->catch->throw->getAlgorithm->new->TransformException->finally->if->Utils->secureValidation->algorithm->getAlgorithm->if->Policy->restrictAlg->throw->new->TransformException->in->if->LOG->debug->getXMLSignatureInput->else->if->LOG->debug->if->LOG->debug->subTree->subTree->getRoot->new->XMLSignatureInput->in->subTree->excludeComments->setExcludeComments->else->nodeSet->Utils->iterator->toNodeSet->new->XMLSignatureInput->else->LOG->debug->try->getOctetStream->new->XMLSignatureInput->catch->throw->new->TransformException->finally->secVal->Utils->secureValidation->in->setSecureValidation->try->if->apacheTransform->performTransform->if->in->isNodeSet->in->isElement->return->else->apacheTransform->performTransform->if->in->isOctetStream->return->new->ApacheOctetStreamData->else->return->new->ApacheNodeSetData->catch->throw->new->TransformException->finally
ApacheTransform#isFeatureSupported(String)::: apache transform is feature supported:::if->throw->new->NullPointerException->else->return
DOMBase64Transform#init(TransformParameterSpec)::: base64 transform init:::if->throw->new->InvalidAlgorithmParameterException
DOMCanonicalizationMethod#canonicalize(Data, XMLCryptoContext):::Canonicalizes the specified data using the underlying canonicalization algorithm:::return->transform
DOMCanonicalizationMethod#canonicalize(Data, XMLCryptoContext, OutputStream)::: canonicalization method canonicalize:::return->transform
DOMCanonicalizationMethod#equals(Object)::: canonicalization method equals:::if->return->if->return->ocm->return->getAlgorithm->ocm->getAlgorithm->equals->DOMUtils->getParameterSpec->ocm->getParameterSpec->paramsEqual
DOMCanonicalizationMethod#hashCode()::: canonicalization method hash code:::result->getAlgorithm->hashCode->spec->getParameterSpec->if->spec->hashCode->return
DOMCanonicalizationMethod#isC14Nalg(String)::: canonicalization method is c14 nalg:::return->isInclusiveC14Nalg->isExclusiveC14Nalg->isC14N11alg
DOMCanonicalizationMethod#isInclusiveC14Nalg(String)::: canonicalization method is inclusive c14 nalg:::return->alg->equals->alg->equals
DOMCanonicalizationMethod#isExclusiveC14Nalg(String)::: canonicalization method is exclusive c14 nalg:::return->alg->equals->alg->equals
DOMCanonicalizationMethod#isC14N11alg(String)::: canonicalization method is c14 n11alg:::return->alg->equals->alg->equals
DOMCanonicalXMLC14N11Method#init(TransformParameterSpec)::: canonical c14 n11 method init:::if->throw->new->InvalidAlgorithmParameterException
DOMCanonicalXMLC14N11Method#transform(Data, XMLCryptoContext)::: canonical c14 n11 method transform:::if->subTree->if->subTree->excludeComments->try->Canonicalizer->getInstance->secVal->Utils->secureValidation->apacheCanonicalizer->setSecureValidation->catch->throw->ice->getMessage->new->TransformException->finally->return->canonicalize
DOMCanonicalXMLC14NMethod#init(TransformParameterSpec)::: canonical c14 method init:::if->throw->new->InvalidAlgorithmParameterException
DOMCanonicalXMLC14NMethod#transform(Data, XMLCryptoContext)::: canonical c14 method transform:::if->subTree->if->subTree->excludeComments->try->Canonicalizer->getInstance->secVal->Utils->secureValidation->apacheCanonicalizer->setSecureValidation->catch->throw->ice->getMessage->new->TransformException->finally->return->canonicalize
DOMCryptoBinary#getBigNum():::Returns the BigInteger that this object contains.:::return
DOMCryptoBinary#marshal(Node, String, DOMCryptoContext)::: crypto binary marshal:::parent->DOMUtils->getOwnerDocument->createTextNode->appendChild
DOMDigestMethod#unmarshal(Element)::: digest method unmarshal:::alg->DOMUtils->getAttributeValue->if->alg->equals->return->new->SHA1->else->if->alg->equals->return->new->SHA224->else->if->alg->equals->return->new->SHA256->else->if->alg->equals->return->new->SHA384->else->if->alg->equals->return->new->SHA512->else->if->alg->equals->return->new->RIPEMD160->else->if->alg->equals->return->new->WHIRLPOOL->else->if->alg->equals->return->new->SHA3_224->else->if->alg->equals->return->new->SHA3_256->else->if->alg->equals->return->new->SHA3_384->else->if->alg->equals->return->new->SHA3_512->else->throw->new->MarshalException
DOMDigestMethod#checkParams(DigestMethodParameterSpec):::Checks if the specified parameters are valid for this algorithm:::if->throw->getMessageDigestAlgorithm->new->InvalidAlgorithmParameterException
DOMDigestMethod#getParameterSpec()::: digest method get parameter spec:::return
DOMDigestMethod#unmarshalParams(Element):::Unmarshals DigestMethodParameterSpec from the specified Element:::throw->getMessageDigestAlgorithm->new->MarshalException
DOMDigestMethod#marshal(Node, String, DOMCryptoContext):::This method invokes the abstract #marshalParams marshalParams method to marshal any algorithm-specific parameters.:::ownerDoc->DOMUtils->getOwnerDocument->dmElem->DOMUtils->createElement->DOMUtils->getAlgorithm->setAttribute->if->marshalParams->parent->appendChild
DOMDigestMethod#equals(Object)::: digest method equals:::if->return->if->return->odm->paramsEqual->odm->getParameterSpec->params->odm->getParameterSpec->equals->return->getAlgorithm->odm->getAlgorithm->equals
DOMDigestMethod#hashCode()::: digest method hash code:::result->if->params->hashCode->getAlgorithm->hashCode->return
DOMDigestMethod#marshalParams(Element, String):::Marshals the algorithm-specific parameters to an Element and appends it to the specified parent element:::throw->getMessageDigestAlgorithm->new->MarshalException
DOMDigestMethod#getMessageDigestAlgorithm():::Returns the MessageDigest standard algorithm name.:::
DOMDigestMethod.SHA1#getAlgorithm()::: a1 get algorithm:::return
DOMDigestMethod.SHA1#getMessageDigestAlgorithm()::: a1 get message digest algorithm:::return
DOMDigestMethod.SHA224#getAlgorithm()::: a224 get algorithm:::return
DOMDigestMethod.SHA224#getMessageDigestAlgorithm()::: a224 get message digest algorithm:::return
DOMDigestMethod.SHA256#getAlgorithm()::: a256 get algorithm:::return
DOMDigestMethod.SHA256#getMessageDigestAlgorithm()::: a256 get message digest algorithm:::return
DOMDigestMethod.SHA384#getAlgorithm()::: a384 get algorithm:::return
DOMDigestMethod.SHA384#getMessageDigestAlgorithm()::: a384 get message digest algorithm:::return
DOMDigestMethod.SHA512#getAlgorithm()::: a512 get algorithm:::return
DOMDigestMethod.SHA512#getMessageDigestAlgorithm()::: a512 get message digest algorithm:::return
DOMDigestMethod.RIPEMD160#getAlgorithm()::: d160 get algorithm:::return
DOMDigestMethod.RIPEMD160#getMessageDigestAlgorithm()::: d160 get message digest algorithm:::return
DOMDigestMethod.WHIRLPOOL#getAlgorithm()::: l get algorithm:::return
DOMDigestMethod.WHIRLPOOL#getMessageDigestAlgorithm()::: l get message digest algorithm:::return
DOMDigestMethod.SHA3_224#getAlgorithm()::: a3_224 get algorithm:::return
DOMDigestMethod.SHA3_224#getMessageDigestAlgorithm()::: a3_224 get message digest algorithm:::return
DOMDigestMethod.SHA3_256#getAlgorithm()::: a3_256 get algorithm:::return
DOMDigestMethod.SHA3_256#getMessageDigestAlgorithm()::: a3_256 get message digest algorithm:::return
DOMDigestMethod.SHA3_384#getAlgorithm()::: a3_384 get algorithm:::return
DOMDigestMethod.SHA3_384#getMessageDigestAlgorithm()::: a3_384 get message digest algorithm:::return
DOMDigestMethod.SHA3_512#getAlgorithm()::: a3_512 get algorithm:::return
DOMDigestMethod.SHA3_512#getMessageDigestAlgorithm()::: a3_512 get message digest algorithm:::return
DOMEnvelopedTransform#init(TransformParameterSpec)::: enveloped transform init:::if->throw->new->InvalidAlgorithmParameterException
DOMExcC14NMethod#init(TransformParameterSpec)::: exc c14 method init:::if->if->throw->new->InvalidAlgorithmParameterException
DOMExcC14NMethod#init(XMLStructure, XMLCryptoContext)::: exc c14 method init:::super->init->paramsElem->DOMUtils->getFirstChildElement->if->return->unmarshalParams
DOMExcC14NMethod#unmarshalParams(Element)::: exc c14 method unmarshal params:::prefixListAttr->paramsElem->getAttributeNS->begin->end->prefixListAttr->indexOf->prefixList->new->ArrayList<>->while->prefixList->prefixListAttr->substring->add->prefixListAttr->indexOf->if->prefixListAttr->length->prefixList->prefixListAttr->substring->add->new->ExcC14NParameterSpec
DOMExcC14NMethod#getParameterSpecPrefixList(ExcC14NParameterSpec)::: exc c14 method get parameter spec prefix list:::return->paramSpec->getPrefixList
DOMExcC14NMethod#marshalParams(XMLStructure, XMLCryptoContext)::: exc c14 method marshal params:::super->marshalParams->spec->getParameterSpec->if->return->prefix->DOMUtils->getNSPrefix->eElem->DOMUtils->createElement->if->prefix->length->eElem->setAttributeNS->else->eElem->setAttributeNS->params->prefixListAttr->new->StringBuilder->prefixList->getParameterSpecPrefixList->for->i->size->prefixList->size->DOMUtils->prefixListAttr->toString->setAttribute->prefixListAttr->toString->transformElem->appendChild
DOMExcC14NMethod#getParamsNSURI()::: exc c14 method get params i:::return
DOMExcC14NMethod#transform(Data, XMLCryptoContext)::: exc c14 method transform:::if->subTree->if->subTree->excludeComments->try->Canonicalizer->getInstance->secVal->Utils->secureValidation->apacheCanonicalizer->setSecureValidation->catch->throw->ice->getMessage->new->TransformException->finally->return->canonicalize
DOMHMACSignatureMethod#checkParams(SignatureMethodParameterSpec)::: signature method check params:::if->if->throw->new->InvalidAlgorithmParameterException->getOutputLength->LOG->debug
DOMHMACSignatureMethod#getParameterSpec()::: signature method get parameter spec:::return
DOMHMACSignatureMethod#unmarshalParams(Element)::: signature method unmarshal params:::Integer->paramsElem->getFirstChild->getNodeValue->parseInt->LOG->debug->return->new->HMACParameterSpec
DOMHMACSignatureMethod#marshalParams(Element, String)::: signature method marshal params:::ownerDoc->DOMUtils->getOwnerDocument->hmacElem->DOMUtils->createElement->hmacElem->ownerDoc->String->valueOf->createTextNode->appendChild->parent->appendChild
DOMHMACSignatureMethod#verify(Key, SignedInfo, byte[], XMLValidateContext)::: signature method verify:::if->throw->new->NullPointerException->if->throw->new->InvalidKeyException->if->try->Mac->getJCAAlgorithm->getInstance->catch->throw->new->XMLSignatureException->finally->if->getDigestLength->throw->getDigestLength->new->XMLSignatureException->hmac->init->new->MacOutputStream->canonicalize->result->hmac->doFinal->return->MessageDigest->isEqual
DOMHMACSignatureMethod#sign(Key, SignedInfo, XMLSignContext)::: signature method sign:::if->throw->new->NullPointerException->if->throw->new->InvalidKeyException->if->try->Mac->getJCAAlgorithm->getInstance->catch->throw->new->XMLSignatureException->finally->if->getDigestLength->throw->getDigestLength->new->XMLSignatureException->hmac->init->new->MacOutputStream->canonicalize->return->hmac->doFinal
DOMHMACSignatureMethod#paramsEqual(AlgorithmParameterSpec)::: signature method params equal:::if->getParameterSpec->return->if->return->ospec->return->ospec->getOutputLength
DOMHMACSignatureMethod#getAlgorithmType()::: signature method get algorithm type:::return
DOMHMACSignatureMethod#getDigestLength():::Returns the output length of the hash/digest.:::
DOMHMACSignatureMethod.SHA1#getAlgorithm()::: a1 get algorithm:::return
DOMHMACSignatureMethod.SHA1#getJCAAlgorithm()::: a1 get algorithm:::return
DOMHMACSignatureMethod.SHA1#getDigestLength()::: a1 get digest length:::return
DOMHMACSignatureMethod.SHA224#getAlgorithm()::: a224 get algorithm:::return
DOMHMACSignatureMethod.SHA224#getJCAAlgorithm()::: a224 get algorithm:::return
DOMHMACSignatureMethod.SHA224#getDigestLength()::: a224 get digest length:::return
DOMHMACSignatureMethod.SHA256#getAlgorithm()::: a256 get algorithm:::return
DOMHMACSignatureMethod.SHA256#getJCAAlgorithm()::: a256 get algorithm:::return
DOMHMACSignatureMethod.SHA256#getDigestLength()::: a256 get digest length:::return
DOMHMACSignatureMethod.SHA384#getAlgorithm()::: a384 get algorithm:::return
DOMHMACSignatureMethod.SHA384#getJCAAlgorithm()::: a384 get algorithm:::return
DOMHMACSignatureMethod.SHA384#getDigestLength()::: a384 get digest length:::return
DOMHMACSignatureMethod.SHA512#getAlgorithm()::: a512 get algorithm:::return
DOMHMACSignatureMethod.SHA512#getJCAAlgorithm()::: a512 get algorithm:::return
DOMHMACSignatureMethod.SHA512#getDigestLength()::: a512 get digest length:::return
DOMHMACSignatureMethod.RIPEMD160#getAlgorithm()::: d160 get algorithm:::return
DOMHMACSignatureMethod.RIPEMD160#getJCAAlgorithm()::: d160 get algorithm:::return
DOMHMACSignatureMethod.RIPEMD160#getDigestLength()::: d160 get digest length:::return
DOMKeyInfo#getContent(KeyInfo):::A utility function to suppress casting warnings.:::return->ki->getContent
DOMKeyInfo#getId()::: key info get id:::return
DOMKeyInfo#getContent()::: key info get content:::return
DOMKeyInfo#marshal(XMLStructure, XMLCryptoContext)::: key info marshal:::if->throw->new->NullPointerException->if->throw->new->ClassCastException->pNode->getNode->dsPrefix->DOMUtils->getSignaturePrefix->kiElem->DOMUtils->DOMUtils->getOwnerDocument->createElement->if->dsPrefix->length->kiElem->setAttributeNS->else->kiElem->setAttributeNS->nextSibling->if->getNextSibling->marshal
DOMKeyInfo#marshal(Node, String, DOMCryptoContext)::: key info marshal:::marshal
DOMKeyInfo#marshal(Node, Node, String, DOMCryptoContext)::: key info marshal:::ownerDoc->DOMUtils->getOwnerDocument->kiElem->DOMUtils->createElement->marshal
DOMKeyInfo#marshal(Node, Element, Node, String, DOMCryptoContext)::: key info marshal:::foreach->if->marshal->else->DOMUtils->getNode->appendChild->DOMUtils->setAttributeID->parent->insertBefore
DOMKeyInfo#equals(Object)::: key info equals:::if->return->if->return->oki->idsEqual->oki->getId->id->oki->getId->equals->return->keyInfoTypes->oki->getContent->equals
DOMKeyInfo#hashCode()::: key info hash code:::result->if->id->hashCode->keyInfoTypes->hashCode->return
DOMKeyInfoFactory#newKeyInfo(List)::: key info factory new key info:::return->newKeyInfo
DOMKeyInfoFactory#newKeyInfo(List, String)::: key info factory new key info:::return->new->DOMKeyInfo
DOMKeyInfoFactory#newKeyName(String)::: key info factory new key name:::return->new->DOMKeyName
DOMKeyInfoFactory#newKeyValue(PublicKey)::: key info factory new key value:::algorithm->key->getAlgorithm->if->equals->return->new->DOMKeyValue.DSA->else->if->equals->return->new->DOMKeyValue.RSA->else->if->equals->return->new->DOMKeyValue.EC->else->throw->new->KeyException
DOMKeyInfoFactory#newPGPData(byte[])::: key info factory new data:::return->newPGPData
DOMKeyInfoFactory#newPGPData(byte[], byte[], List)::: key info factory new data:::return->new->DOMPGPData
DOMKeyInfoFactory#newPGPData(byte[], List)::: key info factory new data:::return->new->DOMPGPData
DOMKeyInfoFactory#newRetrievalMethod(String)::: key info factory new retrieval method:::return->newRetrievalMethod
DOMKeyInfoFactory#newRetrievalMethod(String, String, List)::: key info factory new retrieval method:::if->throw->new->NullPointerException->return->new->DOMRetrievalMethod
DOMKeyInfoFactory#newX509Data(List)::: key info factory new x509 data:::return->new->DOMX509Data
DOMKeyInfoFactory#newX509IssuerSerial(String, BigInteger)::: key info factory new x509 issuer serial:::return->new->DOMX509IssuerSerial
DOMKeyInfoFactory#isFeatureSupported(String)::: key info factory is feature supported:::if->throw->new->NullPointerException->else->return
DOMKeyInfoFactory#getURIDereferencer()::: key info factory get dereferencer:::return
DOMKeyInfoFactory#unmarshalKeyInfo(XMLStructure)::: key info factory unmarshal key info:::if->throw->new->NullPointerException->if->throw->new->ClassCastException->node->getNode->node->normalize->element->if->node->getNodeType->getDocumentElement->else->if->node->getNodeType->else->throw->new->MarshalException->tag->element->getLocalName->namespace->element->getNamespaceURI->if->throw->new->MarshalException->if->equals->equals->try->return->new->UnmarshalContext->getProvider->new->DOMKeyInfo->catch->throw->throw->new->MarshalException->finally->else->throw->new->MarshalException
DOMKeyName#getName()::: key name get name:::return
DOMKeyName#marshal(Node, String, DOMCryptoContext)::: key name marshal:::ownerDoc->DOMUtils->getOwnerDocument->knElem->DOMUtils->createElement->knElem->ownerDoc->createTextNode->appendChild->parent->appendChild
DOMKeyName#equals(Object)::: key name equals:::if->return->if->return->okn->return->name->okn->getName->equals
DOMKeyName#hashCode()::: key name hash code:::result->name->hashCode->return
DOMKeyValue#unmarshal(Element)::: key value unmarshal:::kvtElem->DOMUtils->getFirstChildElement->if->throw->new->MarshalException->namespace->kvtElem->getNamespaceURI->if->kvtElem->getLocalName->equals->equals->return->new->DSA->else->if->kvtElem->getLocalName->equals->equals->return->new->RSA->else->if->kvtElem->getLocalName->equals->XMLDSIG_11_XMLNS->equals->return->new->EC->else->return->new->Unknown
DOMKeyValue#getPublicKey()::: key value get public key:::if->throw->new->KeyException->else->return
DOMKeyValue#marshal(Node, String, DOMCryptoContext)::: key value marshal:::ownerDoc->DOMUtils->getOwnerDocument->kvElem->DOMUtils->createElement->marshalPublicKey->parent->appendChild
DOMKeyValue#marshalPublicKey(Node, Document, String, DOMCryptoContext)::: key value marshal public key:::
DOMKeyValue#unmarshalKeyValue(Element)::: key value unmarshal key value:::
DOMKeyValue#generatePublicKey(KeyFactory, KeySpec)::: key value generate public key:::try->return->kf->generatePublic->catch->return->finally
DOMKeyValue#equals(Object)::: key value equals:::if->return->if->return->try->kv->if->if->kv->getPublicKey->return->else->if->publicKey->kv->getPublicKey->equals->return->catch->return->finally->return
DOMKeyValue#decode(Element)::: key value decode:::try->base64str->elem->getFirstChild->getNodeValue->return->XMLUtils->decode->new->BigInteger->catch->throw->new->MarshalException->finally
DOMKeyValue#hashCode()::: key value hash code:::result->if->publicKey->hashCode->return
DOMKeyValue.RSA#marshalPublicKey(Node, Document, String, DOMCryptoContext)::: a marshal public key:::rsaElem->DOMUtils->createElement->modulusElem->DOMUtils->createElement->exponentElem->DOMUtils->createElement->modulus->marshal->exponent->marshal->rsaElem->appendChild->rsaElem->appendChild->parent->appendChild
DOMKeyValue.RSA#unmarshalKeyValue(Element)::: a unmarshal key value:::if->try->KeyFactory->getInstance->catch->throw->e->getMessage->new->RuntimeException->finally->modulusElem->DOMUtils->getFirstChildElement->modulus->decode->exponentElem->DOMUtils->getNextSiblingElement->exponent->decode->spec->new->RSAPublicKeySpec->return->generatePublicKey
DOMKeyValue.DSA#marshalPublicKey(Node, Document, String, DOMCryptoContext)::: a marshal public key:::dsaElem->DOMUtils->createElement->pElem->DOMUtils->createElement->qElem->DOMUtils->createElement->gElem->DOMUtils->createElement->yElem->DOMUtils->createElement->p->marshal->q->marshal->g->marshal->y->marshal->dsaElem->appendChild->dsaElem->appendChild->dsaElem->appendChild->dsaElem->appendChild->parent->appendChild
DOMKeyValue.DSA#unmarshalKeyValue(Element)::: a unmarshal key value:::if->try->KeyFactory->getInstance->catch->throw->e->getMessage->new->RuntimeException->finally->curElem->DOMUtils->getFirstChildElement->if->throw->new->MarshalException->p->q->if->curElem->getLocalName->equals->curElem->getNamespaceURI->equals->decode->DOMUtils->getNextSiblingElement->decode->DOMUtils->getNextSiblingElement->g->if->curElem->getLocalName->equals->curElem->getNamespaceURI->equals->decode->DOMUtils->getNextSiblingElement->y->if->decode->DOMUtils->getNextSiblingElement->spec->new->DSAPublicKeySpec->return->generatePublicKey
DOMKeyValue.EC#initializeCurve(String, String, String, String, String, String, String, String, int)::: c initialize curve:::p->bigInt->field->new->ECFieldFp->curve->bigInt->bigInt->new->EllipticCurve->g->bigInt->bigInt->new->ECPoint->return->bigInt->new->Curve
DOMKeyValue.EC#decodePoint(byte[], EllipticCurve)::: c decode point:::if->throw->new->IOException->n->if->curve->getField->getFieldSize->throw->new->IOException->xb->Arrays->copyOfRange->yb->Arrays->copyOfRange->return->new->BigInteger->new->BigInteger->new->ECPoint
DOMKeyValue.EC#encodePoint(ECPoint, EllipticCurve)::: c encode point:::n->curve->getField->getFieldSize->xb->point->getAffineX->toByteArray->trimZeroes->yb->point->getAffineY->toByteArray->trimZeroes->if->throw->new->RuntimeException->b->new->byteArr->System->arraycopy->System->arraycopy->return
DOMKeyValue.EC#trimZeroes(byte[])::: c trim zeroes:::i->while->if->return->return->Arrays->copyOfRange
DOMKeyValue.EC#getCurveOid(ECParameterSpec)::: c get curve oid:::match->if->matchCurve->else->if->matchCurve->else->if->matchCurve->else->return->return->match->getObjectId
DOMKeyValue.EC#matchCurve(ECParameterSpec, Curve)::: c match curve:::fieldSize->params->getCurve->getField->getFieldSize->if->curve->getCurve->getField->getFieldSize->curve->getCurve->params->getCurve->equals->curve->getGenerator->params->getGenerator->equals->curve->getOrder->params->getOrder->equals->curve->getCofactor->params->getCofactor->return->else->return
DOMKeyValue.EC#marshalPublicKey(Node, Document, String, DOMCryptoContext)::: c marshal public key:::prefix->DOMUtils->getNSPrefix->ecKeyValueElem->DOMUtils->createElement->namedCurveElem->DOMUtils->createElement->publicKeyElem->DOMUtils->createElement->oid->getCurveOid->if->throw->new->MarshalException->DOMUtils->setAttribute->qname->prefix->length->namedCurveElem->setAttributeNS->ecKeyValueElem->appendChild->encoded->XMLUtils->encodeToString->publicKeyElem->DOMUtils->getOwnerDocument->createTextNode->appendChild->ecKeyValueElem->appendChild->parent->appendChild
DOMKeyValue.EC#unmarshalKeyValue(Element)::: c unmarshal key value:::if->try->KeyFactory->getInstance->catch->throw->e->getMessage->new->RuntimeException->finally->ecParams->curElem->DOMUtils->getFirstChildElement->if->throw->new->MarshalException->if->curElem->getLocalName->equals->XMLDSIG_11_XMLNS->curElem->getNamespaceURI->equals->throw->new->UnsupportedOperationException->else->if->curElem->getLocalName->equals->XMLDSIG_11_XMLNS->curElem->getNamespaceURI->equals->uri->DOMUtils->getAttributeValue->if->uri->startsWith->oid->uri->length->substring->getECParameterSpec->if->throw->new->MarshalException->else->throw->new->MarshalException->else->throw->new->MarshalException->DOMUtils->getNextSiblingElement->ecPoint->try->content->XMLUtils->getFullTextChildrenFromNode->XMLUtils->decode->ecParams->getCurve->decodePoint->catch->throw->new->MarshalException->finally->spec->new->ECPublicKeySpec->return->generatePublicKey
DOMKeyValue.EC#getECParameterSpec(String)::: c get parameter spec:::if->oid->SECP256R1->getObjectId->equals->return->else->if->oid->SECP384R1->getObjectId->equals->return->else->if->oid->SECP521R1->getObjectId->equals->return->else->return
DOMKeyValue.EC.Curve#getName()::: curve get name:::return
DOMKeyValue.EC.Curve#getObjectId()::: curve get object id:::return
DOMKeyValue#bigInt(String)::: key value big int:::return->new->BigInteger
DOMKeyValue.Unknown#unmarshalKeyValue(Element)::: unknown unmarshal key value:::new->javax.xml.crypto.dom.DOMStructure->return
DOMKeyValue.Unknown#marshalPublicKey(Node, Document, String, DOMCryptoContext)::: unknown marshal public key:::parent->externalPublicKey->getNode->appendChild
DOMManifest#getId()::: manifest get id:::return
DOMManifest#getManifestReferences(Manifest)::: manifest get manifest references:::return->mf->getReferences
DOMManifest#getReferences()::: manifest get references:::return
DOMManifest#marshal(Node, String, DOMCryptoContext)::: manifest marshal:::ownerDoc->DOMUtils->getOwnerDocument->manElem->DOMUtils->createElement->DOMUtils->setAttributeID->foreach->marshal->parent->appendChild
DOMManifest#equals(Object)::: manifest equals:::if->return->if->return->oman->idsEqual->oman->getId->id->oman->getId->equals->return->references->oman->getReferences->equals
DOMManifest#hashCode()::: manifest hash code:::result->if->id->hashCode->references->hashCode->return
DOMPGPData#getKeyId()::: data get key id:::return->keyId->clone
DOMPGPData#getKeyPacket()::: data get key packet:::return->keyPacket->clone
DOMPGPData#getExternalElements()::: data get external elements:::return
DOMPGPData#marshal(Node, String, DOMCryptoContext)::: data marshal:::ownerDoc->DOMUtils->getOwnerDocument->pdElem->DOMUtils->createElement->if->keyIdElem->DOMUtils->createElement->keyIdElem->ownerDoc->XMLUtils->encodeToString->createTextNode->appendChild->pdElem->appendChild->if->keyPktElem->DOMUtils->createElement->keyPktElem->ownerDoc->XMLUtils->encodeToString->createTextNode->appendChild->pdElem->appendChild->foreach->DOMUtils->getNode->appendChild->parent->appendChild
DOMPGPData#checkKeyPacket(byte[]):::We assume packets use the new format packet syntax, as specified in section 4 of RFC 2440:::if->throw->new->IllegalArgumentException->tag->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
DOMReference#getDigestMethod()::: reference get digest method:::return
DOMReference#getId()::: reference get id:::return
DOMReference#getURI()::: reference get i:::return
DOMReference#getType()::: reference get type:::return
DOMReference#getTransforms()::: reference get transforms:::return->Collections->unmodifiableList
DOMReference#getDigestValue()::: reference get digest value:::return->digestValue->clone
DOMReference#getCalculatedDigestValue()::: reference get calculated digest value:::return->calcDigestValue->clone
DOMReference#marshal(Node, String, DOMCryptoContext)::: reference marshal:::LOG->debug->ownerDoc->DOMUtils->getOwnerDocument->DOMUtils->createElement->DOMUtils->setAttributeID->DOMUtils->setAttribute->DOMUtils->setAttribute->if->allTransforms->isEmpty->transformsElem->DOMUtils->createElement->refElem->appendChild->foreach->marshal->marshal->LOG->debug->digestValueElem->DOMUtils->createElement->if->digestValueElem->ownerDoc->XMLUtils->encodeToString->createTextNode->appendChild->refElem->appendChild->parent->appendChild->refElem->getAttributeNodeNS
DOMReference#digest(XMLSignContext)::: reference digest:::data->if->dereference->else->transform->encodedDV->XMLUtils->encodeToString->LOG->debug->digestElem->DOMUtils->getLastChildElement->if->throw->new->XMLSignatureException->DOMUtils->removeAllChildren->digestElem->refElem->getOwnerDocument->createTextNode->appendChild->LOG->debug
DOMReference#validate(XMLValidateContext)::: reference validate:::if->throw->new->NullPointerException->if->return->data->dereference->transform->if->LOG->isDebugEnabled->LOG->XMLUtils->encodeToString->debug->LOG->XMLUtils->encodeToString->debug->Arrays->equals->return
DOMReference#getDereferencedData()::: reference get dereferenced data:::return
DOMReference#getDigestInputStream()::: reference get digest input stream:::return
DOMReference#dereference(XMLCryptoContext)::: reference dereference:::data->deref->context->getURIDereferencer->if->try->deref->dereference->LOG->deref->getClass->getName->debug->LOG->data->getClass->getName->debug->catch->throw->new->XMLSignatureException->finally->return
DOMReference#transform(Data, XMLCryptoContext)::: reference transform:::if->try->MessageDigest->getMessageDigestAlgorithm->getInstance->catch->throw->new->XMLSignatureException->finally->md->reset->dos->cache->context->getProperty->if->copyDerefData->new->DigesterOutputStream->else->new->DigesterOutputStream->data->try->os->new->UnsyncBufferedOutputStream->for->i->size->transforms->size->if->xi->c14n11->c14nalg->if->if->prop->context->getProperty->if->else->if->getXMLSignatureInput->else->if->getOctetStream->new->XMLSignatureInput->else->if->spi->if->TransformService->getInstance->else->try->TransformService->getInstance->catch->TransformService->getInstance->finally->spi->transform->getOctetStream->new->XMLSignatureInput->else->throw->new->XMLSignatureException->secVal->Utils->secureValidation->xi->setSecureValidation->if->xi->isOctetStream->xi->isOutputStreamSet->spi->if->TransformService->getInstance->else->try->TransformService->getInstance->catch->TransformService->getInstance->finally->t->new->DOMTransform->transformsElem->dsPrefix->DOMUtils->getSignaturePrefix->if->allTransforms->isEmpty->DOMUtils->refElem->getOwnerDocument->createElement->refElem->DOMUtils->getFirstChildElement->insertBefore->else->DOMUtils->getFirstChildElement->t->marshal->allTransforms->add->xi->updateOutputStream->else->xi->updateOutputStream->os->flush->if->dos->getInputStream->return->dos->getDigestValue->catch->throw->new->XMLSignatureException->throw->new->XMLSignatureException->throw->new->XMLSignatureException->throw->new->XMLSignatureException->throw->new->XMLSignatureException->finally->if->try->dos->close->catch->throw->new->XMLSignatureException->finally
DOMReference#getHere()::: reference get here:::return
DOMReference#equals(Object)::: reference equals:::if->return->if->return->oref->idsEqual->oref->getId->id->oref->getId->equals->urisEqual->oref->getURI->uri->oref->getURI->equals->typesEqual->oref->getType->type->oref->getType->equals->digestValuesEqual->Arrays->oref->getDigestValue->equals->return->digestMethod->oref->getDigestMethod->equals->allTransforms->oref->getTransforms->equals
DOMReference#hashCode()::: reference hash code:::result->if->id->hashCode->if->uri->hashCode->if->type->hashCode->if->Arrays->hashCode->digestMethod->hashCode->allTransforms->hashCode->return
DOMReference#isDigested()::: reference is digested:::return
DOMReference#copyDerefData(Data)::: reference copy deref data:::if->ad->xsi->ad->getXMLSignatureInput->if->xsi->isNodeSet->try->s->xsi->getNodeSet->return->new->NodeSetData<Node>->catch->LOG->warn->return->finally->else->if->xsi->isElement->return->xsi->getSubNode->xsi->isExcludeComments->new->DOMSubTreeData->else->if->xsi->isOctetStream->xsi->isByteArray->try->return->xsi->getOctetStream->xsi->getSourceURI->xsi->getMIMEType->new->OctetStreamData->catch->LOG->warn->return->finally->return
DOMRetrievalMethod#getURI()::: retrieval method get i:::return
DOMRetrievalMethod#getType()::: retrieval method get type:::return
DOMRetrievalMethod#getTransforms()::: retrieval method get transforms:::return
DOMRetrievalMethod#marshal(Node, String, DOMCryptoContext)::: retrieval method marshal:::ownerDoc->DOMUtils->getOwnerDocument->rmElem->DOMUtils->createElement->DOMUtils->setAttribute->DOMUtils->setAttribute->if->transforms->isEmpty->transformsElem->DOMUtils->createElement->rmElem->appendChild->foreach->marshal->parent->appendChild->rmElem->getAttributeNodeNS
DOMRetrievalMethod#getHere()::: retrieval method get here:::return
DOMRetrievalMethod#dereference(XMLCryptoContext)::: retrieval method dereference:::if->throw->new->NullPointerException->deref->context->getURIDereferencer->if->data->deref->dereference->try->foreach->transform->catch->throw->new->URIReferenceException->finally->if->Utils->secureValidation->Policy->restrictRetrievalMethodLoops->nsd->i->nsd->iterator->if->i->hasNext->root->i->next->if->root->getLocalName->equals->throw->new->URIReferenceException->return
DOMRetrievalMethod#dereferenceAsXMLStructure(XMLCryptoContext)::: retrieval method dereference as structure:::db->secVal->Utils->secureValidation->data->dereference->try->is->data->getXMLSignatureInput->getBytes->new->ByteArrayInputStream->XMLUtils->createDocumentBuilder->doc->db->parse->kiElem->doc->getDocumentElement->if->kiElem->getLocalName->equals->kiElem->getNamespaceURI->equals->return->new->DOMX509Data->else->return->catch->throw->new->URIReferenceException->finally
DOMRetrievalMethod#equals(Object)::: retrieval method equals:::if->return->if->return->orm->typesEqual->orm->getType->type->orm->getType->equals->return->uri->orm->getURI->equals->transforms->orm->getTransforms->equals
DOMRetrievalMethod#hashCode()::: retrieval method hash code:::result->if->type->hashCode->uri->hashCode->transforms->hashCode->return
DOMSignatureMethod#postSignFormat(Key, byte[]):::Returns the signature bytes with any additional formatting necessary for the signature algorithm used:::
DOMSignatureMethod#preVerifyFormat(Key, byte[]):::Returns the signature bytes with any conversions that are necessary before the signature can be verified:::
DOMSignatureMethod#unmarshal(Element)::: signature method unmarshal:::alg->DOMUtils->getAttributeValue->if->alg->equals->return->new->SHA1withRSA->else->if->alg->equals->return->new->SHA224withRSA->else->if->alg->equals->return->new->SHA256withRSA->else->if->alg->equals->return->new->SHA384withRSA->else->if->alg->equals->return->new->SHA512withRSA->else->if->alg->equals->return->new->RIPEMD160withRSA->else->if->alg->equals->return->new->SHA1withRSAandMGF1->else->if->alg->equals->return->new->SHA224withRSAandMGF1->else->if->alg->equals->return->new->SHA256withRSAandMGF1->else->if->alg->equals->return->new->SHA384withRSAandMGF1->else->if->alg->equals->return->new->SHA512withRSAandMGF1->else->if->alg->equals->return->new->RIPEMD160withRSAandMGF1->else->if->alg->equals->return->new->SHA1withDSA->else->if->alg->equals->return->new->SHA256withDSA->else->if->alg->equals->return->new->SHA1withECDSA->else->if->alg->equals->return->new->SHA224withECDSA->else->if->alg->equals->return->new->SHA256withECDSA->else->if->alg->equals->return->new->SHA384withECDSA->else->if->alg->equals->return->new->SHA512withECDSA->else->if->alg->equals->return->new->RIPEMD160withECDSA->else->if->alg->equals->return->new->DOMHMACSignatureMethod.SHA1->else->if->alg->equals->return->new->DOMHMACSignatureMethod.SHA224->else->if->alg->equals->return->new->DOMHMACSignatureMethod.SHA256->else->if->alg->equals->return->new->DOMHMACSignatureMethod.SHA384->else->if->alg->equals->return->new->DOMHMACSignatureMethod.SHA512->else->if->alg->equals->return->new->DOMHMACSignatureMethod.RIPEMD160->else->throw->new->MarshalException
DOMSignatureMethod#getParameterSpec()::: signature method get parameter spec:::return
DOMSignatureMethod#getSignature(Provider):::Returns an instance of Signature from the specified Provider:::return->Signature->getJCAAlgorithm->getInstance->Signature->getJCAAlgorithm->getInstance
DOMSignatureMethod#verify(Key, SignedInfo, byte[], XMLValidateContext)::: signature method verify:::if->throw->new->NullPointerException->if->throw->new->InvalidKeyException->checkKeySize->if->p->context->getProperty->try->getSignature->catch->throw->new->XMLSignatureException->finally->signature->initVerify->LOG->signature->getProvider->debug->LOG->debug->LOG->getJCAAlgorithm->debug->LOG->debug->s->try->outputStream->new->SignerOutputStream->canonicalize->preVerifyFormat->catch->throw->new->XMLSignatureException->finally->return->signature->verify
DOMSignatureMethod#checkKeySize(XMLCryptoContext, Key):::If secure validation mode is enabled, checks that the key size is restricted.:::if->Utils->secureValidation->size->KeyUtil->getKeySize->if->LOG->key->getAlgorithm->debug->return->if->Policy->key->getAlgorithm->restrictKey->throw->key->getAlgorithm->Policy->key->getAlgorithm->minKeySize->new->XMLSignatureException
DOMSignatureMethod#sign(Key, SignedInfo, XMLSignContext)::: signature method sign:::if->throw->new->NullPointerException->if->throw->new->InvalidKeyException->checkKeySize->if->p->context->getProperty->try->getSignature->catch->throw->new->XMLSignatureException->finally->signature->initSign->LOG->signature->getProvider->debug->LOG->debug->LOG->getJCAAlgorithm->debug->try->outputStream->new->SignerOutputStream->canonicalize->return->signature->sign->postSignFormat->catch->throw->new->XMLSignatureException->finally
DOMSignatureMethod.AbstractRSASignatureMethod#postSignFormat(Key, byte[]):::Returns sig:::return
DOMSignatureMethod.AbstractRSASignatureMethod#preVerifyFormat(Key, byte[]):::Returns sig:::return
DOMSignatureMethod.AbstractRSAPSSSignatureMethod#getPSSParameterSpec()::: abstract signature method get parameter spec:::
DOMSignatureMethod.AbstractRSAPSSSignatureMethod#getSignature(Provider)::: abstract signature method get signature:::try->s->Signature->getInstance->Signature->getInstance->try->s->getPSSParameterSpec->setParameter->catch->throw->new->NoSuchAlgorithmException->finally->return->catch->return->Signature->getJCAAlgorithm->getInstance->Signature->getJCAAlgorithm->getInstance->finally
DOMSignatureMethod.AbstractP1363FormatSignatureMethod#getJCAFallbackAlgorithm():::Return the fallback algorithm to be used when the provider does not support signatures in the IEEE P1363 format:::
DOMSignatureMethod.AbstractP1363FormatSignatureMethod#getSignature(Provider)::: abstract p1363 format signature method get signature:::try->return->Signature->getJCAAlgorithm->getInstance->Signature->getJCAAlgorithm->getInstance->catch->s->Signature->getJCAFallbackAlgorithm->getInstance->Signature->getJCAFallbackAlgorithm->getInstance->return->finally
DOMSignatureMethod.AbstractDSASignatureMethod#postSignFormat(Key, byte[])::: abstract signature method post sign format:::if->size->getParams->getQ->bitLength->return->JavaUtils->convertDsaASN1toXMLDSIG->else->return
DOMSignatureMethod.AbstractDSASignatureMethod#preVerifyFormat(Key, byte[])::: abstract signature method pre verify format:::if->size->getParams->getQ->bitLength->return->JavaUtils->convertDsaXMLDSIGtoASN1->else->return
DOMSignatureMethod.AbstractECDSASignatureMethod#postSignFormat(Key, byte[])::: abstract signature method post sign format:::if->return->SignatureECDSA->convertASN1toXMLDSIG->else->return
DOMSignatureMethod.AbstractECDSASignatureMethod#preVerifyFormat(Key, byte[])::: abstract signature method pre verify format:::if->return->SignatureECDSA->convertXMLDSIGtoASN1->else->return
DOMSignatureMethod.SHA1withRSA#getAlgorithm()::: a1with a get algorithm:::return
DOMSignatureMethod.SHA1withRSA#getJCAAlgorithm()::: a1with a get algorithm:::return
DOMSignatureMethod.SHA1withRSA#getAlgorithmType()::: a1with a get algorithm type:::return
DOMSignatureMethod.SHA224withRSA#getAlgorithm()::: a224with a get algorithm:::return
DOMSignatureMethod.SHA224withRSA#getJCAAlgorithm()::: a224with a get algorithm:::return
DOMSignatureMethod.SHA224withRSA#getAlgorithmType()::: a224with a get algorithm type:::return
DOMSignatureMethod.SHA256withRSA#getAlgorithm()::: a256with a get algorithm:::return
DOMSignatureMethod.SHA256withRSA#getJCAAlgorithm()::: a256with a get algorithm:::return
DOMSignatureMethod.SHA256withRSA#getAlgorithmType()::: a256with a get algorithm type:::return
DOMSignatureMethod.SHA384withRSA#getAlgorithm()::: a384with a get algorithm:::return
DOMSignatureMethod.SHA384withRSA#getJCAAlgorithm()::: a384with a get algorithm:::return
DOMSignatureMethod.SHA384withRSA#getAlgorithmType()::: a384with a get algorithm type:::return
DOMSignatureMethod.SHA512withRSA#getAlgorithm()::: a512with a get algorithm:::return
DOMSignatureMethod.SHA512withRSA#getJCAAlgorithm()::: a512with a get algorithm:::return
DOMSignatureMethod.SHA512withRSA#getAlgorithmType()::: a512with a get algorithm type:::return
DOMSignatureMethod.RIPEMD160withRSA#getAlgorithm()::: d160with a get algorithm:::return
DOMSignatureMethod.RIPEMD160withRSA#getJCAAlgorithm()::: d160with a get algorithm:::return
DOMSignatureMethod.RIPEMD160withRSA#getAlgorithmType()::: d160with a get algorithm type:::return
DOMSignatureMethod.SHA1withRSAandMGF1#getAlgorithm()::: a1with aand f1 get algorithm:::return
DOMSignatureMethod.SHA1withRSAandMGF1#getPSSParameterSpec()::: a1with aand f1 get parameter spec:::return
DOMSignatureMethod.SHA1withRSAandMGF1#getJCAAlgorithm()::: a1with aand f1 get algorithm:::return
DOMSignatureMethod.SHA1withRSAandMGF1#getAlgorithmType()::: a1with aand f1 get algorithm type:::return
DOMSignatureMethod.SHA224withRSAandMGF1#getAlgorithm()::: a224with aand f1 get algorithm:::return
DOMSignatureMethod.SHA224withRSAandMGF1#getPSSParameterSpec()::: a224with aand f1 get parameter spec:::return
DOMSignatureMethod.SHA224withRSAandMGF1#getJCAAlgorithm()::: a224with aand f1 get algorithm:::return
DOMSignatureMethod.SHA224withRSAandMGF1#getAlgorithmType()::: a224with aand f1 get algorithm type:::return
DOMSignatureMethod.SHA256withRSAandMGF1#getAlgorithm()::: a256with aand f1 get algorithm:::return
DOMSignatureMethod.SHA256withRSAandMGF1#getPSSParameterSpec()::: a256with aand f1 get parameter spec:::return
DOMSignatureMethod.SHA256withRSAandMGF1#getJCAAlgorithm()::: a256with aand f1 get algorithm:::return
DOMSignatureMethod.SHA256withRSAandMGF1#getAlgorithmType()::: a256with aand f1 get algorithm type:::return
DOMSignatureMethod.SHA384withRSAandMGF1#getAlgorithm()::: a384with aand f1 get algorithm:::return
DOMSignatureMethod.SHA384withRSAandMGF1#getPSSParameterSpec()::: a384with aand f1 get parameter spec:::return
DOMSignatureMethod.SHA384withRSAandMGF1#getJCAAlgorithm()::: a384with aand f1 get algorithm:::return
DOMSignatureMethod.SHA384withRSAandMGF1#getAlgorithmType()::: a384with aand f1 get algorithm type:::return
DOMSignatureMethod.SHA512withRSAandMGF1#getAlgorithm()::: a512with aand f1 get algorithm:::return
DOMSignatureMethod.SHA512withRSAandMGF1#getPSSParameterSpec()::: a512with aand f1 get parameter spec:::return
DOMSignatureMethod.SHA512withRSAandMGF1#getJCAAlgorithm()::: a512with aand f1 get algorithm:::return
DOMSignatureMethod.SHA512withRSAandMGF1#getAlgorithmType()::: a512with aand f1 get algorithm type:::return
DOMSignatureMethod.RIPEMD160withRSAandMGF1#getAlgorithm()::: d160with aand f1 get algorithm:::return
DOMSignatureMethod.RIPEMD160withRSAandMGF1#getJCAAlgorithm()::: d160with aand f1 get algorithm:::return
DOMSignatureMethod.RIPEMD160withRSAandMGF1#getAlgorithmType()::: d160with aand f1 get algorithm type:::return
DOMSignatureMethod.SHA1withDSA#getAlgorithm()::: a1with a get algorithm:::return
DOMSignatureMethod.SHA1withDSA#getJCAAlgorithm()::: a1with a get algorithm:::return
DOMSignatureMethod.SHA1withDSA#getJCAFallbackAlgorithm()::: a1with a get fallback algorithm:::return
DOMSignatureMethod.SHA1withDSA#getAlgorithmType()::: a1with a get algorithm type:::return
DOMSignatureMethod.SHA256withDSA#getAlgorithm()::: a256with a get algorithm:::return
DOMSignatureMethod.SHA256withDSA#getJCAAlgorithm()::: a256with a get algorithm:::return
DOMSignatureMethod.SHA256withDSA#getJCAFallbackAlgorithm()::: a256with a get fallback algorithm:::return
DOMSignatureMethod.SHA256withDSA#getAlgorithmType()::: a256with a get algorithm type:::return
DOMSignatureMethod.SHA1withECDSA#getAlgorithm()::: a1with a get algorithm:::return
DOMSignatureMethod.SHA1withECDSA#getJCAAlgorithm()::: a1with a get algorithm:::return
DOMSignatureMethod.SHA1withECDSA#getJCAFallbackAlgorithm()::: a1with a get fallback algorithm:::return
DOMSignatureMethod.SHA1withECDSA#getAlgorithmType()::: a1with a get algorithm type:::return
DOMSignatureMethod.SHA224withECDSA#getAlgorithm()::: a224with a get algorithm:::return
DOMSignatureMethod.SHA224withECDSA#getJCAAlgorithm()::: a224with a get algorithm:::return
DOMSignatureMethod.SHA224withECDSA#getJCAFallbackAlgorithm()::: a224with a get fallback algorithm:::return
DOMSignatureMethod.SHA224withECDSA#getAlgorithmType()::: a224with a get algorithm type:::return
DOMSignatureMethod.SHA256withECDSA#getAlgorithm()::: a256with a get algorithm:::return
DOMSignatureMethod.SHA256withECDSA#getJCAAlgorithm()::: a256with a get algorithm:::return
DOMSignatureMethod.SHA256withECDSA#getJCAFallbackAlgorithm()::: a256with a get fallback algorithm:::return
DOMSignatureMethod.SHA256withECDSA#getAlgorithmType()::: a256with a get algorithm type:::return
DOMSignatureMethod.SHA384withECDSA#getAlgorithm()::: a384with a get algorithm:::return
DOMSignatureMethod.SHA384withECDSA#getJCAAlgorithm()::: a384with a get algorithm:::return
DOMSignatureMethod.SHA384withECDSA#getJCAFallbackAlgorithm()::: a384with a get fallback algorithm:::return
DOMSignatureMethod.SHA384withECDSA#getAlgorithmType()::: a384with a get algorithm type:::return
DOMSignatureMethod.SHA512withECDSA#getAlgorithm()::: a512with a get algorithm:::return
DOMSignatureMethod.SHA512withECDSA#getJCAAlgorithm()::: a512with a get algorithm:::return
DOMSignatureMethod.SHA512withECDSA#getJCAFallbackAlgorithm()::: a512with a get fallback algorithm:::return
DOMSignatureMethod.SHA512withECDSA#getAlgorithmType()::: a512with a get algorithm type:::return
DOMSignatureMethod.RIPEMD160withECDSA#getAlgorithm()::: d160with a get algorithm:::return
DOMSignatureMethod.RIPEMD160withECDSA#getJCAAlgorithm()::: d160with a get algorithm:::return
DOMSignatureMethod.RIPEMD160withECDSA#getJCAFallbackAlgorithm()::: d160with a get fallback algorithm:::return
DOMSignatureMethod.RIPEMD160withECDSA#getAlgorithmType()::: d160with a get algorithm type:::return
DOMSignatureProperties#getProperties()::: signature properties get properties:::return
DOMSignatureProperties#getId()::: signature properties get id:::return
DOMSignatureProperties#marshal(Node, String, DOMCryptoContext)::: signature properties marshal:::ownerDoc->DOMUtils->getOwnerDocument->propsElem->DOMUtils->createElement->DOMUtils->setAttributeID->foreach->marshal->parent->appendChild
DOMSignatureProperties#equals(Object)::: signature properties equals:::if->return->if->return->osp->idsEqual->osp->getId->id->osp->getId->equals->return->properties->osp->getProperties->equals
DOMSignatureProperties#hashCode()::: signature properties hash code:::result->if->id->hashCode->properties->hashCode->return
DOMSignatureProperty#getContent()::: signature property get content:::return
DOMSignatureProperty#getId()::: signature property get id:::return
DOMSignatureProperty#getTarget()::: signature property get target:::return
DOMSignatureProperty#marshal(Node, String, DOMCryptoContext)::: signature property marshal:::ownerDoc->DOMUtils->getOwnerDocument->propElem->DOMUtils->createElement->DOMUtils->setAttributeID->DOMUtils->setAttribute->foreach->DOMUtils->getNode->appendChild->parent->appendChild
DOMSignatureProperty#equals(Object)::: signature property equals:::if->return->if->return->osp->idsEqual->osp->getId->id->osp->getId->equals->ospContent->osp->getContent->return->equalsContent->target->osp->getTarget->equals
DOMSignatureProperty#hashCode()::: signature property hash code:::result->if->id->hashCode->target->hashCode->content->hashCode->return
DOMSignatureProperty#equalsContent(List)::: signature property equals content:::osize->otherContent->size->if->content->size->return->for->i->return
DOMSignedInfo#getCanonicalizationMethod()::: signed info get canonicalization method:::return
DOMSignedInfo#getSignatureMethod()::: signed info get signature method:::return
DOMSignedInfo#getId()::: signed info get id:::return
DOMSignedInfo#getReferences()::: signed info get references:::return
DOMSignedInfo#getCanonicalizedData()::: signed info get canonicalized data:::return
DOMSignedInfo#canonicalize(XMLCryptoContext, ByteArrayOutputStream)::: signed info canonicalize:::if->throw->new->NullPointerException->subTree->new->DOMSubTreeData->try->os->new->UnsyncBufferedOutputStream->canonicalize->os->flush->signedInfoBytes->bos->toByteArray->if->LOG->isDebugEnabled->LOG->debug->sb->new->StringBuilder->for->i->LOG->sb->toString->debug->LOG->XMLUtils->encodeToString->debug->new->ByteArrayInputStream->catch->throw->new->XMLSignatureException->LOG->e->getMessage->debug->finally
DOMSignedInfo#marshal(Node, String, DOMCryptoContext)::: signed info marshal:::DOMUtils->getOwnerDocument->siElem->DOMUtils->createElement->dcm->dcm->marshal->marshal->foreach->marshal->DOMUtils->setAttributeID->parent->appendChild
DOMSignedInfo#equals(Object)::: signed info equals:::if->return->if->return->osi->idEqual->osi->getId->id->osi->getId->equals->return->canonicalizationMethod->osi->getCanonicalizationMethod->equals->signatureMethod->osi->getSignatureMethod->equals->references->osi->getReferences->equals
DOMSignedInfo#getSignedInfoReferences(SignedInfo)::: signed info get signed info references:::return->si->getReferences
DOMSignedInfo#hashCode()::: signed info hash code:::result->if->id->hashCode->canonicalizationMethod->hashCode->signatureMethod->hashCode->references->hashCode->return
DOMStructure#isFeatureSupported(String)::: structure is feature supported:::if->throw->new->NullPointerException->else->return
DOMStructure#marshal(Node, String, DOMCryptoContext)::: structure marshal:::
DOMSubTreeData#iterator()::: sub tree data iterator:::return->new->DelayedNodeIterator
DOMSubTreeData#getRoot()::: sub tree data get root:::return
DOMSubTreeData#excludeComments()::: sub tree data exclude comments:::return
DOMSubTreeData.DelayedNodeIterator#hasNext()::: delayed node iterator has next:::if->dereferenceSameDocumentURI->nodeSet->listIterator->return->li->hasNext
DOMSubTreeData.DelayedNodeIterator#next()::: delayed node iterator next:::if->dereferenceSameDocumentURI->nodeSet->listIterator->if->li->hasNext->return->li->next->else->throw->new->NoSuchElementException
DOMSubTreeData.DelayedNodeIterator#remove()::: delayed node iterator remove:::throw->new->UnsupportedOperationException
DOMSubTreeData.DelayedNodeIterator#dereferenceSameDocumentURI(Node):::Dereferences a same-document URI fragment.:::nodes->new->ArrayList<>->if->nodeSetMinusCommentNodes->return
DOMSubTreeData.DelayedNodeIterator#nodeSetMinusCommentNodes(Node, List, Node):::Recursively traverses the subtree, and returns an XPath-equivalent node-set of all nodes traversed, excluding any comment nodes, if specified.:::switch->node->getNodeType->attrs->node->getAttributes->if->for->i->len->attrs->getLength->nodeSet->add->pSibling->for->child->node->getFirstChild->child->getNextSibling->break->for->child->node->getFirstChild->child->getNextSibling->break->if->prevSibling->getNodeType->prevSibling->getNodeType->return->nodeSet->add->break->nodeSet->add->break->if->nodeSet->add
DOMTransform#getParameterSpec()::: transform get parameter spec:::return->spi->getParameterSpec
DOMTransform#getAlgorithm()::: transform get algorithm:::return->spi->getAlgorithm
DOMTransform#marshal(Node, String, DOMCryptoContext):::This method marshals any algorithm-specific parameters.:::ownerDoc->DOMUtils->getOwnerDocument->transformElem->if->parent->getLocalName->equals->DOMUtils->createElement->else->DOMUtils->createElement->DOMUtils->getAlgorithm->setAttribute->spi->new->javax.xml.crypto.dom.DOMStructure->marshalParams->parent->appendChild
DOMTransform#transform(Data, XMLCryptoContext):::Transforms the specified data using the underlying transform algorithm.:::return->spi->transform
DOMTransform#transform(Data, XMLCryptoContext, OutputStream):::Transforms the specified data using the underlying transform algorithm.:::return->spi->transform
DOMTransform#equals(Object)::: transform equals:::if->return->if->return->otransform->return->getAlgorithm->otransform->getAlgorithm->equals->DOMUtils->getParameterSpec->otransform->getParameterSpec->paramsEqual
DOMTransform#hashCode()::: transform hash code:::result->getAlgorithm->hashCode->spec->getParameterSpec->if->spec->hashCode->return
DOMTransform#transform(Data, XMLCryptoContext, DOMSignContext):::Transforms the specified data using the underlying transform algorithm:::context->getParent->DOMUtils->getSignaturePrefix->marshal->return->transform
DOMURIDereferencer#dereference(URIReference, XMLCryptoContext)::: dereferencer dereference:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->domRef->uriAttr->domRef->getHere->uri->uriRef->getURI->dcc->baseURI->context->getBaseURI->secVal->Utils->secureValidation->if->Policy->restrictReferenceUriScheme->throw->new->URIReferenceException->if->uri->length->uri->charAt->id->uri->substring->if->id->startsWith->i1->id->indexOf->i2->id->indexOf->id->substring->referencedElem->uriAttr->getOwnerDocument->getElementById->if->dcc->getElementById->if->if->Policy->restrictDuplicateIds->start->referencedElem->getOwnerDocument->getDocumentElement->if->XMLUtils->protectAgainstWrappingAttack->error->throw->new->URIReferenceException->result->new->XMLSignatureInput->result->setSecureValidation->if->uri->substring->startsWith->result->setExcludeComments->result->setMIMEType->if->baseURI->length->result->baseURI->uriAttr->getNodeValue->concat->setSourceURI->else->result->uriAttr->getNodeValue->setSourceURI->return->new->ApacheNodeSetData->try->apacheResolver->ResourceResolver->getInstance->in->apacheResolver->resolve->if->in->isOctetStream->return->new->ApacheOctetStreamData->else->return->new->ApacheNodeSetData->catch->throw->new->URIReferenceException->finally
DOMUtils#getOwnerDocument(Node):::Returns the owner document of the specified node.:::if->node->getNodeType->return->else->return->node->getOwnerDocument
DOMUtils#getQNameString(String, String):::Create a QName string from a prefix and local name.:::qName->prefix->length->return
DOMUtils#createElement(Document, String, String, String):::Creates an element in the specified namespace, with the specified tag and namespace prefix.:::qName->prefix->length->return->doc->createElementNS
DOMUtils#setAttribute(Element, String, String):::Sets an element's attribute (using DOM level 2) with the specified value and namespace prefix.:::if->return->elem->setAttributeNS
DOMUtils#setAttributeID(Element, String, String):::Sets an element's attribute (using DOM level 2) with the specified value and namespace prefix AND registers the ID value with the specified element:::if->return->elem->setAttributeNS->elem->setIdAttributeNS
DOMUtils#getFirstChildElement(Node):::Returns the first child element of the specified node, or null if there is no such element.:::child->node->getFirstChild->while->child->getNodeType->child->getNextSibling->return
DOMUtils#getFirstChildElement(Node, String):::Returns the first child element of the specified node and checks that the local name is equal to localName.:::return->getFirstChildElement->verifyElement
DOMUtils#getFirstChildElement(Node, String, String):::Returns the first child element of the specified node and checks that the local name is equal to localName and the namespace is equal to namespaceURI:::return->getFirstChildElement->verifyElement
DOMUtils#verifyElement(Element, String)::: utils verify element:::if->throw->new->MarshalException->name->elem->getLocalName->if->name->equals->throw->new->MarshalException->return
DOMUtils#verifyElement(Element, String, String)::: utils verify element:::if->throw->new->MarshalException->name->elem->getLocalName->namespace->elem->getNamespaceURI->if->name->equals->namespace->equals->throw->new->MarshalException->return
DOMUtils#getLastChildElement(Node):::Returns the last child element of the specified node, or null if there is no such element.:::child->node->getLastChild->while->child->getNodeType->child->getPreviousSibling->return
DOMUtils#getNextSiblingElement(Node):::Returns the next sibling element of the specified node, or null if there is no such element.:::sibling->node->getNextSibling->while->sibling->getNodeType->sibling->getNextSibling->return
DOMUtils#getNextSiblingElement(Node, String):::Returns the next sibling element of the specified node and checks that the local name is equal to localName.:::return->getNextSiblingElement->verifyElement
DOMUtils#getNextSiblingElement(Node, String, String):::Returns the next sibling element of the specified node and checks that the local name is equal to localName and the namespace is equal to namespaceURI:::return->getNextSiblingElement->verifyElement
DOMUtils#getAttributeValue(Element, String):::Returns the attribute value for the attribute with the specified name:::attr->elem->getAttributeNodeNS->return->attr->getValue
DOMUtils#getIdAttributeValue(Element, String):::Returns the attribute value for the attribute with the specified name:::attr->elem->getAttributeNodeNS->if->attr->isId->elem->setIdAttributeNode->return->attr->getValue
DOMUtils#nodeSet(NodeList):::Returns a Set of Nodes, backed by the specified NodeList.:::return->new->NodeSet
DOMUtils.NodeSet#size()::: node set size:::return->nl->getLength
DOMUtils.NodeSet#iterator()::: node set iterator:::return->new->Iterator<Node>
DOMUtils#getNSPrefix(XMLCryptoContext, String):::Returns the prefix associated with the specified namespace URI:::if->return->context->context->getDefaultNamespacePrefix->getNamespacePrefix->else->return
DOMUtils#getSignaturePrefix(XMLCryptoContext):::Returns the prefix associated with the XML Signature namespace URI:::return->getNSPrefix
DOMUtils#removeAllChildren(Node):::Removes all children nodes from the specified node.:::firstChild->node->getFirstChild->while->nodeToRemove->firstChild->getNextSibling->node->removeChild
DOMUtils#nodesEqual(Node, Node):::Compares 2 nodes for equality:::if->return->if->thisNode->getNodeType->otherNode->getNodeType->return->return
DOMUtils#appendChild(Node, Node):::Checks if child element has same owner document before appending to the parent, and imports it to the parent's document if necessary.:::ownerDoc->getOwnerDocument->if->child->getOwnerDocument->parent->ownerDoc->importNode->appendChild->else->parent->appendChild
DOMUtils#paramsEqual(AlgorithmParameterSpec, AlgorithmParameterSpec)::: utils params equal:::if->return->if->return->paramsEqual->if->return->paramsEqual->if->return->paramsEqual->if->return->paramsEqual->return
DOMUtils#paramsEqual(XPathFilter2ParameterSpec, XPathFilter2ParameterSpec)::: utils params equal:::types->spec1->getXPathList->otypes->spec2->getXPathList->size->types->size->if->otypes->size->return->for->i->return
DOMUtils#paramsEqual(ExcC14NParameterSpec, ExcC14NParameterSpec)::: utils params equal:::return->spec1->getPrefixList->spec2->getPrefixList->equals
DOMUtils#paramsEqual(XPathFilterParameterSpec, XPathFilterParameterSpec)::: utils params equal:::return->spec1->getXPath->spec2->getXPath->equals->spec1->getNamespaceMap->spec2->getNamespaceMap->equals
DOMUtils#paramsEqual(XSLTTransformParameterSpec, XSLTTransformParameterSpec)::: utils params equal:::ostylesheet->spec2->getStylesheet->if->return->ostylesheetElem->getNode->stylesheet->spec1->getStylesheet->stylesheetElem->getNode->return->nodesEqual
DOMUtils#isNamespace(Node)::: utils is namespace:::nodeType->node->getNodeType->if->namespaceURI->node->getNamespaceURI->return->equals->return
DOMX509Data#getContent()::: x509 data get content:::return
DOMX509Data#marshal(Node, String, DOMCryptoContext)::: x509 data marshal:::ownerDoc->DOMUtils->getOwnerDocument->xdElem->DOMUtils->createElement->for->i->size->content->size->parent->appendChild
DOMX509Data#marshalSKI(byte[], Node, Document, String)::: x509 data marshal i:::skidElem->DOMUtils->createElement->skidElem->doc->XMLUtils->encodeToString->createTextNode->appendChild->parent->appendChild
DOMX509Data#marshalSubjectName(String, Node, Document, String)::: x509 data marshal subject name:::snElem->DOMUtils->createElement->snElem->doc->createTextNode->appendChild->parent->appendChild
DOMX509Data#marshalCert(X509Certificate, Node, Document, String)::: x509 data marshal cert:::certElem->DOMUtils->createElement->try->certElem->doc->XMLUtils->cert->getEncoded->encodeToString->createTextNode->appendChild->catch->throw->new->MarshalException->finally->parent->appendChild
DOMX509Data#marshalCRL(X509CRL, Node, Document, String)::: x509 data marshal l:::crlElem->DOMUtils->createElement->try->crlElem->doc->XMLUtils->crl->getEncoded->encodeToString->createTextNode->appendChild->catch->throw->new->MarshalException->finally->parent->appendChild
DOMX509Data#unmarshalX509Certificate(Element)::: x509 data unmarshal x509 certificate:::try->bs->unmarshalBase64Binary->return->cf->generateCertificate->catch->throw->new->MarshalException->throw->new->MarshalException->finally
DOMX509Data#unmarshalX509CRL(Element)::: x509 data unmarshal x509 l:::try->bs->unmarshalBase64Binary->return->cf->generateCRL->catch->throw->new->MarshalException->throw->new->MarshalException->finally
DOMX509Data#unmarshalBase64Binary(Element)::: x509 data unmarshal base64 binary:::try->if->CertificateFactory->getInstance->content->XMLUtils->getFullTextChildrenFromNode->return->XMLUtils->decode->new->ByteArrayInputStream->catch->throw->new->MarshalException->finally
DOMX509Data#equals(Object)::: x509 data equals:::if->return->if->return->oxd->ocontent->oxd->getContent->size->content->size->if->ocontent->size->return->for->i->return
DOMX509Data#hashCode()::: x509 data hash code:::result->content->hashCode->return
DOMX509IssuerSerial#getIssuerName()::: x509 issuer serial get issuer name:::return
DOMX509IssuerSerial#getSerialNumber()::: x509 issuer serial get serial number:::return
DOMX509IssuerSerial#marshal(Node, String, DOMCryptoContext)::: x509 issuer serial marshal:::ownerDoc->DOMUtils->getOwnerDocument->isElem->DOMUtils->createElement->inElem->DOMUtils->createElement->snElem->DOMUtils->createElement->inElem->ownerDoc->createTextNode->appendChild->snElem->ownerDoc->serialNumber->toString->createTextNode->appendChild->isElem->appendChild->isElem->appendChild->parent->appendChild
DOMX509IssuerSerial#equals(Object)::: x509 issuer serial equals:::if->return->if->return->ois->return->issuerName->ois->getIssuerName->equals->serialNumber->ois->getSerialNumber->equals
DOMX509IssuerSerial#hashCode()::: x509 issuer serial hash code:::result->issuerName->hashCode->serialNumber->hashCode->return
DOMXMLObject#getContent()::: object get content:::return
DOMXMLObject#getId()::: object get id:::return
DOMXMLObject#getMimeType()::: object get mime type:::return
DOMXMLObject#getEncoding()::: object get encoding:::return
DOMXMLObject#marshal(Node, String, DOMCryptoContext)::: object marshal:::ownerDoc->DOMUtils->getOwnerDocument->objElem->if->DOMUtils->createElement->DOMUtils->setAttributeID->DOMUtils->setAttribute->DOMUtils->setAttribute->foreach->if->marshal->else->domObject->DOMUtils->domObject->getNode->appendChild->parent->appendChild
DOMXMLObject#equals(Object)::: object equals:::if->return->if->return->oxo->idsEqual->oxo->getId->id->oxo->getId->equals->encodingsEqual->oxo->getEncoding->encoding->oxo->getEncoding->equals->mimeTypesEqual->oxo->getMimeType->mimeType->oxo->getMimeType->equals->return->oxo->getContent->equalsContent
DOMXMLObject#hashCode()::: object hash code:::result->if->id->hashCode->if->encoding->hashCode->if->mimeType->hashCode->content->hashCode->return
DOMXMLObject#equalsContent(List)::: object equals content:::if->content->size->otherContent->size->return->for->i->osize->otherContent->size->return
DOMXMLSignature#getId()::: signature get id:::return
DOMXMLSignature#getKeyInfo()::: signature get key info:::return
DOMXMLSignature#getSignedInfo()::: signature get signed info:::return
DOMXMLSignature#getObjects()::: signature get objects:::return
DOMXMLSignature#getSignatureValue()::: signature get signature value:::return
DOMXMLSignature#getKeySelectorResult()::: signature get key selector result:::return
DOMXMLSignature#marshal(Node, String, DOMCryptoContext)::: signature marshal:::marshal
DOMXMLSignature#marshal(Node, Node, String, DOMCryptoContext)::: signature marshal:::DOMUtils->getOwnerDocument->DOMUtils->createElement->if->dsPrefix->length->sigElem->setAttributeNS->else->sigElem->setAttributeNS->marshal->marshal->if->marshal->for->i->size->objects->size->DOMUtils->setAttributeID->parent->insertBefore
DOMXMLSignature#validate(XMLValidateContext)::: signature validate:::if->throw->new->NullPointerException->if->throw->new->ClassCastException->if->return->sigValidity->sv->validate->if->return->refs->getReferences->validateRefs->for->i->size->refs->size->if->LOG->debug->return->validateMans->if->vc->getProperty->equals->for->i->size->objects->size->return
DOMXMLSignature#sign(XMLSignContext)::: signature sign:::if->throw->new->NullPointerException->context->context->getParent->context->getNextSibling->DOMUtils->getSignaturePrefix->marshal->allReferences->new->ArrayList<>->new->HashMap<>->signatureIdMap->put->signatureIdMap->si->getId->put->refs->si->getReferences->foreach->signatureIdMap->ref->getId->put->foreach->signatureIdMap->obj->getId->put->content->obj->getContent->foreach->if->man->signatureIdMap->man->getId->put->manRefs->man->getReferences->foreach->allReferences->add->signatureIdMap->ref->getId->put->allReferences->addAll->foreach->digestReference->foreach->if->isDigested->continue->digest->signingKey->try->keySelectorResult->signContext->getKeySelector->si->getSignatureMethod->select->keySelectorResult->getKey->if->throw->new->XMLSignatureException->catch->throw->new->XMLSignatureException->finally->try->val->si->getSignatureMethod->sign->setValue->catch->throw->new->XMLSignatureException->finally
DOMXMLSignature#equals(Object)::: signature equals:::if->return->if->return->osig->idEqual->osig->getId->id->osig->getId->equals->keyInfoEqual->osig->getKeyInfo->ki->osig->getKeyInfo->equals->return->sv->osig->getSignatureValue->equals->si->osig->getSignedInfo->equals->objects->osig->getObjects->equals
DOMXMLSignature#hashCode()::: signature hash code:::result->if->id->hashCode->if->ki->hashCode->sv->hashCode->si->hashCode->objects->hashCode->return
DOMXMLSignature#digestReference(DOMReference, XMLSignContext)::: signature digest reference:::if->ref->isDigested->return->uri->ref->getURI->if->Utils->sameDocumentURI->parsedId->Utils->parseIdFromSameDocumentURI->if->signatureIdMap->containsKey->xs->signatureIdMap->get->if->digestReference->else->if->man->manRefs->DOMManifest->getManifestReferences->for->i->size->manRefs->size->if->uri->length->transforms->ref->getTransforms->foreach->transformAlg->transform->getAlgorithm->if->transformAlg->equals->transformAlg->equals->return->ref->digest
DOMXMLSignature.DOMSignatureValue#getId()::: signature value get id:::return
DOMXMLSignature.DOMSignatureValue#getValue()::: signature value get value:::return->value->clone
DOMXMLSignature.DOMSignatureValue#getEncodedValue()::: signature value get encoded value:::return
DOMXMLSignature.DOMSignatureValue#validate(XMLValidateContext)::: signature value validate:::if->throw->new->NullPointerException->if->return->sm->si->getSignatureMethod->validationKey->ksResult->try->keySelector->validateContext->getKeySelector->if->keySelector->select->if->ksResult->getKey->if->throw->new->XMLSignatureException->catch->throw->new->XMLSignatureException->finally->try->verify->catch->throw->new->XMLSignatureException->finally->return
DOMXMLSignature.DOMSignatureValue#equals(Object)::: signature value equals:::if->return->if->return->osv->idEqual->osv->getId->id->osv->getId->equals->return
DOMXMLSignature.DOMSignatureValue#hashCode()::: signature value hash code:::result->if->id->hashCode->return
DOMXMLSignature.DOMSignatureValue#marshal(Node, String, DOMCryptoContext)::: signature value marshal:::DOMUtils->createElement->if->sigValueElem->ownerDoc->createTextNode->appendChild->DOMUtils->setAttributeID->parent->appendChild
DOMXMLSignature.DOMSignatureValue#setValue(byte[])::: signature value set value:::XMLUtils->encodeToString->sigValueElem->ownerDoc->createTextNode->appendChild
DOMXMLSignatureFactory#newXMLSignature(SignedInfo, KeyInfo)::: signature factory new signature:::return->new->DOMXMLSignature
DOMXMLSignatureFactory#newXMLSignature(SignedInfo, KeyInfo, List, String, String)::: signature factory new signature:::return->new->DOMXMLSignature
DOMXMLSignatureFactory#newReference(String, DigestMethod)::: signature factory new reference:::return->newReference
DOMXMLSignatureFactory#newReference(String, DigestMethod, List, String, String)::: signature factory new reference:::return->getProvider->new->DOMReference
DOMXMLSignatureFactory#newReference(String, DigestMethod, List, Data, List, String, String)::: signature factory new reference:::if->throw->new->NullPointerException->if->appliedTransforms->isEmpty->throw->new->NullPointerException->if->throw->new->NullPointerException->return->getProvider->new->DOMReference
DOMXMLSignatureFactory#newReference(String, DigestMethod, List, String, String, byte[])::: signature factory new reference:::if->throw->new->NullPointerException->return->getProvider->new->DOMReference
DOMXMLSignatureFactory#newSignedInfo(CanonicalizationMethod, SignatureMethod, List)::: signature factory new signed info:::return->newSignedInfo
DOMXMLSignatureFactory#newSignedInfo(CanonicalizationMethod, SignatureMethod, List, String)::: signature factory new signed info:::return->new->DOMSignedInfo
DOMXMLSignatureFactory#newXMLObject(List, String, String, String)::: signature factory new object:::return->new->DOMXMLObject
DOMXMLSignatureFactory#newManifest(List)::: signature factory new manifest:::return->newManifest
DOMXMLSignatureFactory#newManifest(List, String)::: signature factory new manifest:::return->new->DOMManifest
DOMXMLSignatureFactory#newSignatureProperties(List, String)::: signature factory new signature properties:::return->new->DOMSignatureProperties
DOMXMLSignatureFactory#newSignatureProperty(List, String, String)::: signature factory new signature property:::return->new->DOMSignatureProperty
DOMXMLSignatureFactory#unmarshalXMLSignature(XMLValidateContext)::: signature factory unmarshal signature:::if->throw->new->NullPointerException->return->getNode->unmarshal
DOMXMLSignatureFactory#unmarshalXMLSignature(XMLStructure)::: signature factory unmarshal signature:::if->throw->new->NullPointerException->if->throw->new->ClassCastException->return->getNode->new->UnmarshalContext->unmarshal
DOMXMLSignatureFactory#unmarshal(Node, XMLCryptoContext)::: signature factory unmarshal:::node->normalize->element->if->node->getNodeType->getDocumentElement->else->if->node->getNodeType->else->throw->new->MarshalException->tag->element->getLocalName->namespace->element->getNamespaceURI->if->throw->new->MarshalException->if->equals->equals->try->return->getProvider->new->DOMXMLSignature->catch->throw->throw->new->MarshalException->finally->else->throw->new->MarshalException
DOMXMLSignatureFactory#isFeatureSupported(String)::: signature factory is feature supported:::if->throw->new->NullPointerException->else->return
DOMXMLSignatureFactory#newDigestMethod(String, DigestMethodParameterSpec)::: signature factory new digest method:::if->throw->new->NullPointerException->if->algorithm->equals->return->new->DOMDigestMethod.SHA1->else->if->algorithm->equals->return->new->DOMDigestMethod.SHA224->else->if->algorithm->equals->return->new->DOMDigestMethod.SHA256->else->if->algorithm->equals->return->new->DOMDigestMethod.SHA384->else->if->algorithm->equals->return->new->DOMDigestMethod.SHA512->else->if->algorithm->equals->return->new->DOMDigestMethod.RIPEMD160->else->if->algorithm->equals->return->new->DOMDigestMethod.WHIRLPOOL->else->if->algorithm->equals->return->new->DOMDigestMethod.SHA3_224->else->if->algorithm->equals->return->new->DOMDigestMethod.SHA3_256->else->if->algorithm->equals->return->new->DOMDigestMethod.SHA3_384->else->if->algorithm->equals->return->new->DOMDigestMethod.SHA3_512->else->throw->new->NoSuchAlgorithmException
DOMXMLSignatureFactory#newSignatureMethod(String, SignatureMethodParameterSpec)::: signature factory new signature method:::if->throw->new->NullPointerException->if->algorithm->equals->return->new->DOMSignatureMethod.SHA1withRSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA224withRSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA256withRSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA384withRSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA512withRSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.RIPEMD160withRSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA1withRSAandMGF1->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA224withRSAandMGF1->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA256withRSAandMGF1->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA384withRSAandMGF1->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA512withRSAandMGF1->else->if->algorithm->equals->return->new->DOMSignatureMethod.RIPEMD160withRSAandMGF1->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA1withDSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA256withDSA->else->if->algorithm->equals->return->new->DOMHMACSignatureMethod.SHA1->else->if->algorithm->equals->return->new->DOMHMACSignatureMethod.SHA224->else->if->algorithm->equals->return->new->DOMHMACSignatureMethod.SHA256->else->if->algorithm->equals->return->new->DOMHMACSignatureMethod.SHA384->else->if->algorithm->equals->return->new->DOMHMACSignatureMethod.SHA512->else->if->algorithm->equals->return->new->DOMHMACSignatureMethod.RIPEMD160->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA1withECDSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA224withECDSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA256withECDSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA384withECDSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.SHA512withECDSA->else->if->algorithm->equals->return->new->DOMSignatureMethod.RIPEMD160withECDSA->else->throw->new->NoSuchAlgorithmException
DOMXMLSignatureFactory#newTransform(String, TransformParameterSpec)::: signature factory new transform:::spi->if->getProvider->TransformService->getInstance->else->try->TransformService->getProvider->getInstance->catch->TransformService->getInstance->finally->spi->init->return->new->DOMTransform
DOMXMLSignatureFactory#newTransform(String, XMLStructure)::: signature factory new transform:::spi->if->getProvider->TransformService->getInstance->else->try->TransformService->getProvider->getInstance->catch->TransformService->getInstance->finally->if->spi->init->else->spi->init->return->new->DOMTransform
DOMXMLSignatureFactory#newCanonicalizationMethod(String, C14NMethodParameterSpec)::: signature factory new canonicalization method:::spi->if->getProvider->TransformService->getInstance->else->try->TransformService->getProvider->getInstance->catch->TransformService->getInstance->finally->spi->init->return->new->DOMCanonicalizationMethod
DOMXMLSignatureFactory#newCanonicalizationMethod(String, XMLStructure)::: signature factory new canonicalization method:::spi->if->getProvider->TransformService->getInstance->else->try->TransformService->getProvider->getInstance->catch->TransformService->getInstance->finally->if->spi->init->else->spi->init->return->new->DOMCanonicalizationMethod
DOMXMLSignatureFactory#getURIDereferencer()::: signature factory get dereferencer:::return
DOMXPathFilter2Transform#init(TransformParameterSpec)::: path filter2 transform init:::if->throw->new->InvalidAlgorithmParameterException->else->if->throw->new->InvalidAlgorithmParameterException
DOMXPathFilter2Transform#init(XMLStructure, XMLCryptoContext)::: path filter2 transform init:::super->init->try->DOMUtils->getFirstChildElement->unmarshalParams->catch->throw->new->InvalidAlgorithmParameterException->finally
DOMXPathFilter2Transform#unmarshalParams(Element)::: path filter2 transform unmarshal params:::list->new->ArrayList<>->currentElement->while->xPath->currentElement->getFirstChild->getNodeValue->filterVal->DOMUtils->getAttributeValue->if->throw->new->MarshalException->filter->if->equals->else->if->equals->else->if->equals->else->throw->new->MarshalException->attributes->currentElement->getAttributes->if->length->attributes->getLength->namespaceMap->new->HashMap<>->for->i->list->new->XPathType->add->else->list->new->XPathType->add->DOMUtils->getNextSiblingElement->new->XPathFilter2ParameterSpec
DOMXPathFilter2Transform#marshalParams(XMLStructure, XMLCryptoContext)::: path filter2 transform marshal params:::super->marshalParams->xp->getParameterSpec->prefix->DOMUtils->getNSPrefix->qname->prefix->length->xpathList->xp->getXPathList->foreach->elem->DOMUtils->createElement->elem->ownerDoc->xpathType->getExpression->createTextNode->appendChild->DOMUtils->xpathType->getFilter->toString->setAttribute->elem->setAttributeNS->entries->xpathType->getNamespaceMap->entrySet->foreach->elem->entry->getKey->entry->getValue->setAttributeNS->transformElem->appendChild
DOMXPathTransform#init(TransformParameterSpec)::: path transform init:::if->throw->new->InvalidAlgorithmParameterException->else->if->throw->new->InvalidAlgorithmParameterException
DOMXPathTransform#init(XMLStructure, XMLCryptoContext)::: path transform init:::super->init->DOMUtils->getFirstChildElement->unmarshalParams
DOMXPathTransform#unmarshalParams(Element)::: path transform unmarshal params:::xPath->paramsElem->getFirstChild->getNodeValue->attributes->paramsElem->getAttributes->if->length->attributes->getLength->namespaceMap->new->HashMap<>->for->i->new->XPathFilterParameterSpec->else->new->XPathFilterParameterSpec
DOMXPathTransform#marshalParams(XMLStructure, XMLCryptoContext)::: path transform marshal params:::super->marshalParams->xp->getParameterSpec->xpathElem->DOMUtils->DOMUtils->getSignaturePrefix->createElement->xpathElem->ownerDoc->xp->getXPath->createTextNode->appendChild->entries->xp->getNamespaceMap->entrySet->foreach->xpathElem->entry->getKey->entry->getValue->setAttributeNS->transformElem->appendChild
DOMXSLTTransform#init(TransformParameterSpec)::: transform init:::if->throw->new->InvalidAlgorithmParameterException->if->throw->new->InvalidAlgorithmParameterException
DOMXSLTTransform#init(XMLStructure, XMLCryptoContext)::: transform init:::super->init->DOMUtils->getFirstChildElement->unmarshalParams
DOMXSLTTransform#unmarshalParams(Element)::: transform unmarshal params:::new->javax.xml.crypto.dom.DOMStructure->new->XSLTTransformParameterSpec
DOMXSLTTransform#marshalParams(XMLStructure, XMLCryptoContext)::: transform marshal params:::super->marshalParams->xp->getParameterSpec->xsltElem->xp->getStylesheet->getNode->DOMUtils->appendChild
Policy#initialize()::: policy initialize:::prop->AccessController->Security->getProperty->doPrivileged->if->prop->isEmpty->return->entries->prop->split->foreach->tokens->entry->split->type->switch->if->error->disallowedAlgs->URI->create->add->break->if->error->Integer->parseUnsignedInt->break->if->error->Integer->parseUnsignedInt->break->if->error->for->i->break->if->error->minKeyMap->Integer->parseUnsignedInt->put->break->if->error->break->if->error->break->error
Policy#restrictAlg(String)::: policy restrict alg:::try->uri->new->URI->return->disallowedAlgs->contains->catch->return->finally
Policy#restrictNumTransforms(int)::: policy restrict num transforms:::return
Policy#restrictNumReferences(int)::: policy restrict num references:::return
Policy#restrictReferenceUriScheme(String)::: policy restrict reference uri scheme:::if->scheme->create->getScheme->if->return->disallowedRefUriSchemes->scheme->toLowerCase->contains->return
Policy#restrictKey(String, int)::: policy restrict key:::return->minKeyMap->getOrDefault
Policy#restrictDuplicateIds()::: policy restrict duplicate ids:::return
Policy#restrictRetrievalMethodLoops()::: policy restrict retrieval method loops:::return
Policy#disabledAlgs()::: policy disabled algs:::return->Collections->unmodifiableSet
Policy#maxTransforms()::: policy max transforms:::return
Policy#maxReferences()::: policy max references:::return
Policy#disabledReferenceUriSchemes()::: policy disabled reference uri schemes:::return->Collections->unmodifiableSet
Policy#minKeySize(String)::: policy min key size:::return->minKeyMap->getOrDefault
Policy#error(String)::: policy error:::throw->new->IllegalArgumentException
Utils#readBytesFromStream(InputStream)::: utils read bytes from stream:::try->baos->new->ByteArrayOutputStream->buf->new->byteArr->while->read->is->read->if->break->baos->write->if->break->return->baos->toByteArray->catch->finally
Utils#toNodeSet(Iterator):::Converts an Iterator to a Set of Nodes, according to the XPath Data Model.:::nodeSet->new->HashSet<>->while->i->hasNext->n->i->next->nodeSet->add->if->n->getNodeType->nnm->n->getAttributes->for->j->length->nnm->getLength->return
Utils#parseIdFromSameDocumentURI(String):::Returns the ID from a same-document URI (ex: "#id"):::if->uri->length->return->id->uri->substring->if->id->startsWith->i1->id->indexOf->i2->id->indexOf->id->substring->return
Utils#sameDocumentURI(String):::Returns true if uri is a same-document URI, false otherwise.:::return->uri->length->uri->charAt
Utils#secureValidation(XMLCryptoContext)::: utils secure validation:::if->return->return->getBoolean
Utils#getBoolean(XMLCryptoContext, String)::: utils get boolean:::value->xc->getProperty->return->value->booleanValue
XMLDSigRI.ProviderService#newInstance(Object)::: provider service new instance:::type->getType->if->throw->new->InvalidParameterException->algo->getAlgorithm->try->if->type->equals->if->algo->equals->return->new->DOMXMLSignatureFactory->else->if->type->equals->if->algo->equals->return->new->DOMKeyInfoFactory->else->if->type->equals->if->algo->equals->algo->equals->return->new->DOMCanonicalXMLC14NMethod->else->if->algo->equals->algo->equals->return->new->DOMCanonicalXMLC14N11Method->else->if->algo->equals->algo->equals->return->new->DOMExcC14NMethod->else->if->algo->equals->return->new->DOMBase64Transform->else->if->algo->equals->return->new->DOMEnvelopedTransform->else->if->algo->equals->return->new->DOMXPathFilter2Transform->else->if->algo->equals->return->new->DOMXPathTransform->else->if->algo->equals->return->new->DOMXSLTTransform->catch->throw->new->NoSuchAlgorithmException->finally->throw->new->ProviderException

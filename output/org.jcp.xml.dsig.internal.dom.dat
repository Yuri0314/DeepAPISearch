AbstractDOMSignatureMethod#verify(Key, SignedInfo, byte[], XMLValidateContext):::Verifies the passed-in signature with the specified key, using the underlying Signature or Mac algorithm.:::
AbstractDOMSignatureMethod#sign(Key, SignedInfo, XMLSignContext):::Signs the bytes with the specified key, using the underlying Signature or Mac algorithm.:::
AbstractDOMSignatureMethod#getJCAAlgorithm():::Returns the java.security.Signature or javax.crypto.Mac standard algorithm name.:::
AbstractDOMSignatureMethod#getAlgorithmType():::Returns the type of signature algorithm.:::
AbstractDOMSignatureMethod#marshal(Node, String, DOMCryptoContext):::This method invokes the #marshalParams marshalParams method to marshal any algorithm-specific parameters.:::ownerDoc->DOMUtils->getOwnerDocument->smElem->DOMUtils->createElement->DOMUtils->getAlgorithm->setAttribute->if->getParameterSpec->marshalParams->parent->appendChild
AbstractDOMSignatureMethod#marshalParams(Element, String):::Marshals the algorithm-specific parameters to an Element and appends it to the specified parent element:::throw->getAlgorithm->new->MarshalException
AbstractDOMSignatureMethod#unmarshalParams(Element):::Unmarshals SignatureMethodParameterSpec from the specified Element:::throw->getAlgorithm->new->MarshalException
AbstractDOMSignatureMethod#checkParams(SignatureMethodParameterSpec):::Checks if the specified parameters are valid for this algorithm:::if->throw->getAlgorithm->new->InvalidAlgorithmParameterException
AbstractDOMSignatureMethod#paramsEqual(AlgorithmParameterSpec):::Returns true if parameters are equal; false otherwise:::return->getParameterSpec
ApacheData#getXMLSignatureInput():::Returns the XMLSignatureInput.:::
DOMCanonicalizationMethod#canonicalize(Data, XMLCryptoContext):::Canonicalizes the specified data using the underlying canonicalization algorithm:::return->transform
DOMCryptoBinary#getBigNum():::Returns the BigInteger that this object contains.:::return
DOMDigestMethod#checkParams(DigestMethodParameterSpec):::Checks if the specified parameters are valid for this algorithm:::if->throw->getMessageDigestAlgorithm->new->InvalidAlgorithmParameterException
DOMDigestMethod#unmarshalParams(Element):::Unmarshals DigestMethodParameterSpec from the specified Element:::throw->getMessageDigestAlgorithm->new->MarshalException
DOMDigestMethod#marshal(Node, String, DOMCryptoContext):::This method invokes the abstract #marshalParams marshalParams method to marshal any algorithm-specific parameters.:::ownerDoc->DOMUtils->getOwnerDocument->dmElem->DOMUtils->createElement->DOMUtils->getAlgorithm->setAttribute->if->marshalParams->parent->appendChild
DOMDigestMethod#marshalParams(Element, String):::Marshals the algorithm-specific parameters to an Element and appends it to the specified parent element:::throw->getMessageDigestAlgorithm->new->MarshalException
DOMDigestMethod#getMessageDigestAlgorithm():::Returns the MessageDigest standard algorithm name.:::
DOMHMACSignatureMethod#getDigestLength():::Returns the output length of the hash/digest.:::
DOMKeyInfo#getContent(KeyInfo):::A utility function to suppress casting warnings.:::return->ki->getContent
DOMSignatureMethod#postSignFormat(Key, byte[]):::Returns the signature bytes with any additional formatting necessary for the signature algorithm used:::
DOMSignatureMethod#preVerifyFormat(Key, byte[]):::Returns the signature bytes with any conversions that are necessary before the signature can be verified:::
DOMSignatureMethod#getSignature(Provider):::Returns an instance of Signature from the specified Provider:::return->Signature->getJCAAlgorithm->getInstance->Signature->getJCAAlgorithm->getInstance
DOMSignatureMethod.AbstractRSASignatureMethod#postSignFormat(Key, byte[]):::Returns sig:::return
DOMSignatureMethod.AbstractRSASignatureMethod#preVerifyFormat(Key, byte[]):::Returns sig:::return
DOMSignatureMethod.AbstractP1363FormatSignatureMethod#getJCAFallbackAlgorithm():::Return the fallback algorithm to be used when the provider does not support signatures in the IEEE P1363 format:::
DOMTransform#marshal(Node, String, DOMCryptoContext):::This method marshals any algorithm-specific parameters.:::ownerDoc->DOMUtils->getOwnerDocument->transformElem->if->parent->getLocalName->equals->DOMUtils->createElement->else->DOMUtils->createElement->DOMUtils->getAlgorithm->setAttribute->spi->new->javax.xml.crypto.dom.DOMStructure->marshalParams->parent->appendChild
DOMTransform#transform(Data, XMLCryptoContext):::Transforms the specified data using the underlying transform algorithm.:::return->spi->transform
DOMTransform#transform(Data, XMLCryptoContext, OutputStream):::Transforms the specified data using the underlying transform algorithm.:::return->spi->transform
DOMTransform#transform(Data, XMLCryptoContext, DOMSignContext):::Transforms the specified data using the underlying transform algorithm:::context->getParent->DOMUtils->getSignaturePrefix->marshal->return->transform
DOMUtils#getOwnerDocument(Node):::Returns the owner document of the specified node.:::if->node->getNodeType->return->else->return->node->getOwnerDocument
DOMUtils#getQNameString(String, String):::Create a QName string from a prefix and local name.:::qName->prefix->length->return
DOMUtils#createElement(Document, String, String, String):::Creates an element in the specified namespace, with the specified tag and namespace prefix.:::qName->prefix->length->return->doc->createElementNS
DOMUtils#setAttribute(Element, String, String):::Sets an element's attribute (using DOM level 2) with the specified value and namespace prefix.:::if->return->elem->setAttributeNS
DOMUtils#setAttributeID(Element, String, String):::Sets an element's attribute (using DOM level 2) with the specified value and namespace prefix AND registers the ID value with the specified element:::if->return->elem->setAttributeNS->elem->setIdAttributeNS
DOMUtils#getFirstChildElement(Node):::Returns the first child element of the specified node, or null if there is no such element.:::child->node->getFirstChild->while->child->getNodeType->child->getNextSibling->return
DOMUtils#getFirstChildElement(Node, String):::Returns the first child element of the specified node and checks that the local name is equal to localName.:::return->getFirstChildElement->verifyElement
DOMUtils#getFirstChildElement(Node, String, String):::Returns the first child element of the specified node and checks that the local name is equal to localName and the namespace is equal to namespaceURI:::return->getFirstChildElement->verifyElement
DOMUtils#getLastChildElement(Node):::Returns the last child element of the specified node, or null if there is no such element.:::child->node->getLastChild->while->child->getNodeType->child->getPreviousSibling->return
DOMUtils#getNextSiblingElement(Node):::Returns the next sibling element of the specified node, or null if there is no such element.:::sibling->node->getNextSibling->while->sibling->getNodeType->sibling->getNextSibling->return
DOMUtils#getNextSiblingElement(Node, String):::Returns the next sibling element of the specified node and checks that the local name is equal to localName.:::return->getNextSiblingElement->verifyElement
DOMUtils#getNextSiblingElement(Node, String, String):::Returns the next sibling element of the specified node and checks that the local name is equal to localName and the namespace is equal to namespaceURI:::return->getNextSiblingElement->verifyElement
DOMUtils#getAttributeValue(Element, String):::Returns the attribute value for the attribute with the specified name:::attr->elem->getAttributeNodeNS->return->attr->getValue
DOMUtils#getIdAttributeValue(Element, String):::Returns the attribute value for the attribute with the specified name:::attr->elem->getAttributeNodeNS->if->attr->isId->elem->setIdAttributeNode->return->attr->getValue
DOMUtils#nodeSet(NodeList):::Returns a Set of Nodes, backed by the specified NodeList.:::return->new->NodeSet
DOMUtils#getNSPrefix(XMLCryptoContext, String):::Returns the prefix associated with the specified namespace URI:::if->return->context->context->getDefaultNamespacePrefix->getNamespacePrefix->else->return
DOMUtils#getSignaturePrefix(XMLCryptoContext):::Returns the prefix associated with the XML Signature namespace URI:::return->getNSPrefix
DOMUtils#removeAllChildren(Node):::Removes all children nodes from the specified node.:::firstChild->node->getFirstChild->while->nodeToRemove->firstChild->getNextSibling->node->removeChild
DOMUtils#nodesEqual(Node, Node):::Compares 2 nodes for equality:::if->return->if->thisNode->getNodeType->otherNode->getNodeType->return->return
DOMUtils#appendChild(Node, Node):::Checks if child element has same owner document before appending to the parent, and imports it to the parent's document if necessary.:::ownerDoc->getOwnerDocument->if->child->getOwnerDocument->parent->ownerDoc->importNode->appendChild->else->parent->appendChild
Utils#toNodeSet(Iterator):::Converts an Iterator to a Set of Nodes, according to the XPath Data Model.:::nodeSet->new->HashSet<>->while->i->hasNext->n->i->next->nodeSet->add->if->n->getNodeType->nnm->n->getAttributes->for->j->length->nnm->getLength->return
Utils#parseIdFromSameDocumentURI(String):::Returns the ID from a same-document URI (ex: "#id"):::if->uri->length->return->id->uri->substring->if->id->startsWith->i1->id->indexOf->i2->id->indexOf->id->substring->return
Utils#sameDocumentURI(String):::Returns true if uri is a same-document URI, false otherwise.:::return->uri->length->uri->charAt

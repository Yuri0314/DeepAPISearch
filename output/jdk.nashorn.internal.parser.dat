jdk.nashorn.internal.parser.AbstractParser#getToken(int)->long:::Get the ith token.
jdk.nashorn.internal.parser.AbstractParser#TokenType T(int)->:::Return the tokenType of the ith token.
jdk.nashorn.internal.parser.AbstractParser#next()->TokenType:::Seek next token that is not an EOL or comment.
jdk.nashorn.internal.parser.AbstractParser#nextOrEOL()->TokenType:::Seek next token or EOL (skipping comments.)
jdk.nashorn.internal.parser.AbstractParser#message(String, String...)->String:::Get the message string for a message ID and arguments
jdk.nashorn.internal.parser.AbstractParser#error(String, long)->ParserException:::Report an error.
jdk.nashorn.internal.parser.AbstractParser#error(JSErrorType, String, long)->ParserException:::Report an error.
jdk.nashorn.internal.parser.AbstractParser#error(String)->ParserException:::Report an error.
jdk.nashorn.internal.parser.AbstractParser#error(JSErrorType, String)->ParserException:::Report an error.
jdk.nashorn.internal.parser.AbstractParser#warning(JSErrorType, String, long)->void:::Report a warning to the error manager.
jdk.nashorn.internal.parser.AbstractParser#expectMessage(TokenType)->String:::Generate 'expected' message.
jdk.nashorn.internal.parser.AbstractParser#expect(TokenType)->void:::Check current token and advance to the next token.
jdk.nashorn.internal.parser.AbstractParser#expectDontAdvance(TokenType)->void:::Check current token, but don't advance to the next token.
jdk.nashorn.internal.parser.AbstractParser#expectValue(TokenType)->Object:::Check next token, get its value and advance.
jdk.nashorn.internal.parser.AbstractParser#getValue()->Object:::Get the value of the current token.
jdk.nashorn.internal.parser.AbstractParser#getValue(long)->Object:::Get the value of a specific token
jdk.nashorn.internal.parser.AbstractParser#isNonStrictModeIdent()->boolean:::Certain future reserved words can be used as identifiers in non-strict mode
jdk.nashorn.internal.parser.AbstractParser#getIdent()->IdentNode:::Get ident.
jdk.nashorn.internal.parser.AbstractParser#createIdentNode(long, int, String)->IdentNode:::Creates a new IdentNode as if invoked with a IdentNode#IdentNode(long, int, String) constructor but making sure that the name is deduplicated within this parse job.
jdk.nashorn.internal.parser.AbstractParser#isIdentifierName()->boolean:::Check if current token is in identifier name
jdk.nashorn.internal.parser.AbstractParser#getIdentifierName()->IdentNode:::Create an IdentNode from the current token
jdk.nashorn.internal.parser.AbstractParser#getLiteral()->LiteralNode:::Create a LiteralNode from the current token
jdk.nashorn.internal.parser.DateParser#parse()->boolean:::Try parsing the given string as date according to the extended ISO 8601 format specified in ES5 15.9.1.15
jdk.nashorn.internal.parser.DateParser#parseEcmaDate()->boolean:::Try parsing the date string according to the rules laid out in ES5 15.9.1.15
jdk.nashorn.internal.parser.DateParser#parseLegacyDate()->boolean:::Try parsing the date using a fuzzy algorithm that can handle a variety of formats
jdk.nashorn.internal.parser.DateParser#getDateFields()->Integer[]:::Get the parsed date and time fields as an array of Integers
jdk.nashorn.internal.parser.JSONParser#quote(String)->String:::Implementation of the Quote(value) operation as defined in the ECMAscript spec
jdk.nashorn.internal.parser.JSONParser#parse()->Object:::Public parse method
jdk.nashorn.internal.parser.JSONParser#error(String, int, int)->ParserException::: parser error
jdk.nashorn.internal.parser.Lexer#unicodeEscape(char)->String::: lexer unicode escape
jdk.nashorn.internal.parser.Lexer#saveState()->State:::Save the state of the scan.
jdk.nashorn.internal.parser.Lexer#restoreState(State)->void:::Restore the state of the scan.
jdk.nashorn.internal.parser.Lexer#add(TokenType, int, int)->void:::Add a new token to the stream.
jdk.nashorn.internal.parser.Lexer#add(TokenType, int)->void:::Add a new token to the stream.
jdk.nashorn.internal.parser.Lexer#getWhitespaceRegExp()->String:::Return the String of valid whitespace characters for regular expressions in JavaScript
jdk.nashorn.internal.parser.Lexer#isJSWhitespace(char)->boolean:::Test whether a char is valid JavaScript whitespace
jdk.nashorn.internal.parser.Lexer#isJSEOL(char)->boolean:::Test whether a char is valid JavaScript end of line
jdk.nashorn.internal.parser.Lexer#isStringDelimiter(char)->boolean:::Test if char is a string delimiter, e.g
jdk.nashorn.internal.parser.Lexer#isWhitespace(char)->boolean:::Test whether a char is valid JavaScript whitespace
jdk.nashorn.internal.parser.Lexer#isEOL(char)->boolean:::Test whether a char is valid JavaScript end of line
jdk.nashorn.internal.parser.Lexer#skipComments()->boolean:::Skip over comments.
jdk.nashorn.internal.parser.Lexer#valueOfPattern(int, int)->RegexToken:::Convert a regex token to a token object.
jdk.nashorn.internal.parser.Lexer#canStartLiteral(TokenType)->boolean:::Return true if the given token can be the beginning of a literal.
jdk.nashorn.internal.parser.Lexer.LineInfoReceiver#lineInfo(int, int)->void:::Receives line information
jdk.nashorn.internal.parser.Lexer#scanLiteral(long, TokenType, LineInfoReceiver)->boolean:::Check whether the given token represents the beginning of a literal
jdk.nashorn.internal.parser.Lexer#convertDigit(char, int)->int:::Convert a digit to a integer
jdk.nashorn.internal.parser.Lexer#scanString(boolean)->void:::Scan over a string literal.
jdk.nashorn.internal.parser.Lexer#scanNumber()->void:::Scan a number.
jdk.nashorn.internal.parser.Lexer#valueOfXML(int, int)->XMLToken:::Convert a regex token to a token object.
jdk.nashorn.internal.parser.Lexer#lexify()->void:::Breaks source content down into lex units, adding tokens to the token stream
jdk.nashorn.internal.parser.Lexer#getValueOf(long, boolean)->Object:::Return value of token given its token descriptor.
jdk.nashorn.internal.parser.Lexer#valueOfRawString(long)->String:::Get the raw string value of a template literal string part.
jdk.nashorn.internal.parser.Lexer#message(String, String...)->String:::Get the correctly localized error message for a given message id format arguments
jdk.nashorn.internal.parser.Lexer#error(String, TokenType, int, int)->void:::Generate a runtime exception
jdk.nashorn.internal.parser.Lexer.LexerToken#getExpression()->String:::Get the expression
jdk.nashorn.internal.parser.Lexer.RegexToken#getOptions()->String:::Get regexp options
jdk.nashorn.internal.parser.Lexer.RegexToken#toString()->String::: regex token to string
jdk.nashorn.internal.parser.Parser#getLogger()->DebugLogger::: parser get logger
jdk.nashorn.internal.parser.Parser#initLogger(Context)->DebugLogger::: parser init logger
jdk.nashorn.internal.parser.Parser#setFunctionName(String)->void:::Sets the name for the first function
jdk.nashorn.internal.parser.Parser#setReparsedFunction(RecompilableScriptFunctionData)->void:::Sets the RecompilableScriptFunctionData representing the function being reparsed (when this parser instance is used to reparse a previously parsed function, as part of its on-demand compilation)
jdk.nashorn.internal.parser.Parser#parse()->FunctionNode:::Execute parse and return the resulting function node
jdk.nashorn.internal.parser.Parser#parse(String, int, int, int)->FunctionNode:::Execute parse and return the resulting function node
jdk.nashorn.internal.parser.Parser#parseModule(String, int, int)->FunctionNode:::Parse and return the resulting module
jdk.nashorn.internal.parser.Parser#parseModule(String)->FunctionNode:::Entry point for parsing a module.
jdk.nashorn.internal.parser.Parser#parseFormalParameterList()->List:::Parse and return the list of function parameter list
jdk.nashorn.internal.parser.Parser#parseFunctionBody()->FunctionNode:::Execute parse and return the resulting function node
jdk.nashorn.internal.parser.Parser#isArguments(IdentNode)->boolean::: parser is arguments
jdk.nashorn.internal.parser.Parser#execString(int, long)->CallNode:::Convert execString to a call to $EXEC.
jdk.nashorn.internal.parser.Parser#expression()->Expression:::MultiplicativeExpression :      UnaryExpression      MultiplicativeExpression * UnaryExpression      MultiplicativeExpression / UnaryExpression      MultiplicativeExpression % UnaryExpression  See 11.5  AdditiveExpression :      MultiplicativeExpression      AdditiveExpression + MultiplicativeExpression      AdditiveExpression - MultiplicativeExpression  See 11.6  ShiftExpression :      AdditiveExpression      ShiftExpression << AdditiveExpression      ShiftExpression >> AdditiveExpression      ShiftExpression >>> AdditiveExpression  See 11.7  RelationalExpression :      ShiftExpression      RelationalExpression < ShiftExpression      RelationalExpression > ShiftExpression      RelationalExpression <= ShiftExpression      RelationalExpression >= ShiftExpression      RelationalExpression instanceof ShiftExpression      RelationalExpression in ShiftExpression // if !noIf  See 11.8       RelationalExpression      EqualityExpression == RelationalExpression      EqualityExpression != RelationalExpression      EqualityExpression === RelationalExpression      EqualityExpression !== RelationalExpression  See 11.9  BitwiseANDExpression :      EqualityExpression      BitwiseANDExpression & EqualityExpression  BitwiseXORExpression :      BitwiseANDExpression      BitwiseXORExpression ^ BitwiseANDExpression  BitwiseORExpression :      BitwiseXORExpression      BitwiseORExpression | BitwiseXORExpression  See 11.10  LogicalANDExpression :      BitwiseORExpression      LogicalANDExpression && BitwiseORExpression  LogicalORExpression :      LogicalANDExpression      LogicalORExpression || LogicalANDExpression  See 11.11  ConditionalExpression :      LogicalORExpression      LogicalORExpression ? AssignmentExpression : AssignmentExpression  See 11.12  AssignmentExpression :      ConditionalExpression      LeftHandSideExpression AssignmentOperator AssignmentExpression  AssignmentOperator :      = *= /= %= += -= <<= >>= >>>= &= ^= |=  See 11.13  Expression :      AssignmentExpression      Expression , AssignmentExpression  See 11.14   Parse expression.
jdk.nashorn.internal.parser.Parser#assignmentExpression(boolean)->Expression:::AssignmentExpression
jdk.nashorn.internal.parser.Parser#toString()->String::: parser to string
jdk.nashorn.internal.parser.ParserContext#push(T)->T:::Pushes a new block on top of the context, making it the innermost open block.
jdk.nashorn.internal.parser.ParserContext#peek()->ParserContextNode:::The topmost node on the stack
jdk.nashorn.internal.parser.ParserContext#pop(T)->T:::Removes and returns the topmost Node from the stack.
jdk.nashorn.internal.parser.ParserContext#contains(ParserContextNode)->boolean:::Tests if a node is on the stack.
jdk.nashorn.internal.parser.ParserContext#getBreakable(String)->ParserContextBreakableNode:::Find the breakable node corresponding to this label.
jdk.nashorn.internal.parser.ParserContext#getCurrentLoop()->ParserContextLoopNode:::Returns the loop node of the current loop, or null if not inside a loop
jdk.nashorn.internal.parser.ParserContext#getContinueTo(String)->ParserContextLoopNode:::Find the continue target node corresponding to this label.
jdk.nashorn.internal.parser.ParserContext#getFunctionBody(ParserContextFunctionNode)->ParserContextBlockNode:::Get the function body of a function node on the stack
jdk.nashorn.internal.parser.ParserContext#findLabel(String)->ParserContextLabelNode:::Check the stack for a given label node by name
jdk.nashorn.internal.parser.ParserContext#prependStatementToCurrentNode(Statement)->void:::Prepends a statement to the current node.
jdk.nashorn.internal.parser.ParserContext#appendStatementToCurrentNode(Statement)->void:::Appends a statement to the current Node.
jdk.nashorn.internal.parser.ParserContext#getCurrentFunction()->ParserContextFunctionNode:::Returns the innermost function in the context.
jdk.nashorn.internal.parser.ParserContext#getBlocks()->Iterator:::Returns an iterator over all blocks in the context, with the top block (innermost lexical context) first.
jdk.nashorn.internal.parser.ParserContext#getCurrentBlock()->ParserContextBlockNode:::Returns the innermost block in the context.
jdk.nashorn.internal.parser.ParserContext#getLastStatement()->Statement:::The last statement added to the context
jdk.nashorn.internal.parser.ParserContext#getFunctions()->Iterator:::Returns an iterator over all functions in the context, with the top (innermost open) function first.
jdk.nashorn.internal.parser.ParserContext#getCurrentModule()->ParserContextModuleNode::: parser context get current module
jdk.nashorn.internal.parser.ParserContextBaseNode#getFlags()->int::: parser context base node get flags
jdk.nashorn.internal.parser.ParserContextBaseNode#getFlag(int)->int:::Returns a single flag
jdk.nashorn.internal.parser.ParserContextBaseNode#setFlag(int)->int::: parser context base node set flag
jdk.nashorn.internal.parser.ParserContextBaseNode#getStatements()->List::: parser context base node get statements
jdk.nashorn.internal.parser.ParserContextBaseNode#setStatements(List)->void::: parser context base node set statements
jdk.nashorn.internal.parser.ParserContextBaseNode#appendStatement(Statement)->void:::Adds a statement at the end of the statement list
jdk.nashorn.internal.parser.ParserContextBaseNode#prependStatement(Statement)->void:::Adds a statement at the beginning of the statement list
jdk.nashorn.internal.parser.ParserContextBlockNode#isBreakableWithoutLabel()->boolean::: parser context block node is breakable without label
jdk.nashorn.internal.parser.ParserContextBlockNode#getToken()->long:::Get token
jdk.nashorn.internal.parser.ParserContextBreakableNode#isBreakableWithoutLabel()->boolean:::Returns true if not i breakable without label, false otherwise
jdk.nashorn.internal.parser.ParserContextFunctionNode#getName()->String::: parser context function node get name
jdk.nashorn.internal.parser.ParserContextFunctionNode#getIdent()->IdentNode::: parser context function node get ident
jdk.nashorn.internal.parser.ParserContextFunctionNode#isProgram()->boolean::: parser context function node is program
jdk.nashorn.internal.parser.ParserContextFunctionNode#isStrict()->boolean::: parser context function node is strict
jdk.nashorn.internal.parser.ParserContextFunctionNode#hasNestedEval()->boolean::: parser context function node has nested eval
jdk.nashorn.internal.parser.ParserContextFunctionNode#hasScopeBlock()->boolean:::Returns true if any of the blocks in this function create their own scope.
jdk.nashorn.internal.parser.ParserContextFunctionNode#uniqueName(String)->String:::Create a unique name in the namespace of this FunctionNode
jdk.nashorn.internal.parser.ParserContextFunctionNode#getLineNumber()->int::: parser context function node get line number
jdk.nashorn.internal.parser.ParserContextFunctionNode#getKind()->FunctionNode.Kind::: parser context function node get kind
jdk.nashorn.internal.parser.ParserContextFunctionNode#getParameters()->List:::Get parameters
jdk.nashorn.internal.parser.ParserContextFunctionNode#setParameters(List)->void::: parser context function node set parameters
jdk.nashorn.internal.parser.ParserContextFunctionNode#getParameterExpressions()->Map:::Return ES6 function parameter expressions
jdk.nashorn.internal.parser.ParserContextFunctionNode#addParameterExpression(IdentNode, Expression)->void::: parser context function node add parameter expression
jdk.nashorn.internal.parser.ParserContextFunctionNode#setLastToken(long)->void:::Set last token
jdk.nashorn.internal.parser.ParserContextFunctionNode#getLastToken()->long::: parser context function node get last token
jdk.nashorn.internal.parser.ParserContextFunctionNode#getEndParserState()->Object:::Returns the ParserState of when the parsing of this function was ended
jdk.nashorn.internal.parser.ParserContextFunctionNode#setEndParserState(Object)->void:::Sets the ParserState of when the parsing of this function was ended
jdk.nashorn.internal.parser.ParserContextFunctionNode#getId()->int:::Returns the if of this function
jdk.nashorn.internal.parser.ParserContextFunctionNode#getDebugFlags()->int:::Returns the debug flags for this function.
jdk.nashorn.internal.parser.ParserContextFunctionNode#setDebugFlag(int)->void:::Sets a debug flag for this function.
jdk.nashorn.internal.parser.ParserContextFunctionNode#isMethod()->boolean::: parser context function node is method
jdk.nashorn.internal.parser.ParserContextFunctionNode#isClassConstructor()->boolean::: parser context function node is class constructor
jdk.nashorn.internal.parser.ParserContextFunctionNode#isSubclassConstructor()->boolean::: parser context function node is subclass constructor
jdk.nashorn.internal.parser.ParserContextFunctionNode#addParameterBinding(IdentNode)->boolean::: parser context function node add parameter binding
jdk.nashorn.internal.parser.ParserContextFunctionNode#getDuplicateParameterBinding()->IdentNode::: parser context function node get duplicate parameter binding
jdk.nashorn.internal.parser.ParserContextFunctionNode#isSimpleParameterList()->boolean::: parser context function node is simple parameter list
jdk.nashorn.internal.parser.ParserContextFunctionNode#setSimpleParameterList(boolean)->void::: parser context function node set simple parameter list
jdk.nashorn.internal.parser.ParserContextFunctionNode#getModule()->Module::: parser context function node get module
jdk.nashorn.internal.parser.ParserContextFunctionNode#setModule(Module)->void::: parser context function node set module
jdk.nashorn.internal.parser.ParserContextLabelNode#getLabelName()->String:::Returns the name of the label
jdk.nashorn.internal.parser.ParserContextLoopNode#isBreakableWithoutLabel()->boolean::: parser context loop node is breakable without label
jdk.nashorn.internal.parser.ParserContextModuleNode#getModuleName()->String:::Returns the name of the module.
jdk.nashorn.internal.parser.ParserContextModuleNode#addModuleRequest(IdentNode)->void::: parser context module node add module request
jdk.nashorn.internal.parser.ParserContextModuleNode#addImportEntry(ImportEntry)->void::: parser context module node add import entry
jdk.nashorn.internal.parser.ParserContextModuleNode#addLocalExportEntry(ExportEntry)->void::: parser context module node add local export entry
jdk.nashorn.internal.parser.ParserContextModuleNode#addIndirectExportEntry(ExportEntry)->void::: parser context module node add indirect export entry
jdk.nashorn.internal.parser.ParserContextModuleNode#addStarExportEntry(ExportEntry)->void::: parser context module node add star export entry
jdk.nashorn.internal.parser.ParserContextModuleNode#createModule()->Module::: parser context module node create module
jdk.nashorn.internal.parser.ParserContextNode#getFlags()->int::: parser context node get flags
jdk.nashorn.internal.parser.ParserContextNode#setFlag(int)->int::: parser context node set flag
jdk.nashorn.internal.parser.ParserContextNode#getStatements()->List::: parser context node get statements
jdk.nashorn.internal.parser.ParserContextNode#setStatements(List)->void::: parser context node set statements
jdk.nashorn.internal.parser.ParserContextNode#appendStatement(Statement)->void:::Adds a statement at the end of the statement list
jdk.nashorn.internal.parser.ParserContextNode#prependStatement(Statement)->void:::Adds a statement at the beginning of the statement list
jdk.nashorn.internal.parser.ParserContextSwitchNode#isBreakableWithoutLabel()->boolean::: parser context switch node is breakable without label
jdk.nashorn.internal.parser.Scanner.State#setLimit(int)->void:::Change the limit for a new scanner.
jdk.nashorn.internal.parser.Scanner.State#isEmpty()->boolean::: state is empty
jdk.nashorn.internal.parser.Scanner#saveState()->State:::Save the state of the scan.
jdk.nashorn.internal.parser.Scanner#restoreState(State)->void:::Restore the state of the scan.
jdk.nashorn.internal.parser.Scanner#atEOF()->boolean:::Returns true of scanner is at end of input
jdk.nashorn.internal.parser.Scanner#charAt(int)->char:::Get the ith character from the content.
jdk.nashorn.internal.parser.Scanner#reset(int)->void:::Reset to a character position.
jdk.nashorn.internal.parser.Scanner#skip(int)->void:::Skip ahead a number of characters.
jdk.nashorn.internal.parser.Token#toDesc(TokenType, int, int)->long:::Create a compact form of token information.
jdk.nashorn.internal.parser.Token#descPosition(long)->int:::Extract token position from a token descriptor.
jdk.nashorn.internal.parser.Token#withDelimiter(long)->long:::Normally returns the token itself, except in case of string tokens which report their position past their opening delimiter and thus need to have position and length adjusted.
jdk.nashorn.internal.parser.Token#descLength(long)->int:::Extract token length from a token descriptor.
jdk.nashorn.internal.parser.Token#descType(long)->TokenType:::Extract token type from a token descriptor.
jdk.nashorn.internal.parser.Token#recast(long, TokenType)->long:::Change the token to use a new type.
jdk.nashorn.internal.parser.Token#toString(Source, long, boolean)->String:::Return a string representation of a token.
jdk.nashorn.internal.parser.Token#toString(Source, long)->String:::String conversion of token
jdk.nashorn.internal.parser.Token#toString(long)->String:::String conversion of token - version without source given
jdk.nashorn.internal.parser.Token#hashCode(long)->int:::Static hash code computation function token
jdk.nashorn.internal.parser.TokenLookup#lookupKeyword(char[], int, int)->TokenType:::Lookup keyword.
jdk.nashorn.internal.parser.TokenLookup#lookupOperator(char, char, char, char)->TokenType:::Lookup operator.
jdk.nashorn.internal.parser.TokenStream#isEmpty()->boolean:::Test to see if stream is empty.
jdk.nashorn.internal.parser.TokenStream#isFull()->boolean:::Test to see if stream is full.
jdk.nashorn.internal.parser.TokenStream#count()->int:::Get the number of tokens in the buffer.
jdk.nashorn.internal.parser.TokenStream#first()->int:::Get the index of the first token in the stream.
jdk.nashorn.internal.parser.TokenStream#last()->int:::Get the index of the last token in the stream.
jdk.nashorn.internal.parser.TokenStream#removeLast()->void:::Remove the last token in the stream.
jdk.nashorn.internal.parser.TokenStream#put(long)->void:::Put a token descriptor to the stream.
jdk.nashorn.internal.parser.TokenStream#get(int)->long:::Get the kth token descriptor from the stream.
jdk.nashorn.internal.parser.TokenStream#commit(int)->void:::Advances the base of the stream.
jdk.nashorn.internal.parser.TokenStream#grow()->void:::Grow the buffer to accommodate more token descriptors.
jdk.nashorn.internal.parser.TokenStream#reset()->void::: token stream reset

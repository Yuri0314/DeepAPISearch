AbstractAction#shouldReconfigure(PropertyChangeEvent):::Whether or not to reconfigure all action properties from the specified event.:::if->e->getPropertyName->synchronized->if->Boolean->AccessController->new->GetPropertyAction->doPrivileged->valueOf->return->return
AbstractAction#setEnabledFromAction(JComponent, Action):::Sets the enabled state of a component from an Action.:::c->a->isEnabled->setEnabled
AbstractAction#setToolTipTextFromAction(JComponent, Action):::Sets the tooltip text of a component from an Action.:::c->a->getValue->setToolTipText
AbstractAction#hasSelectedKey(Action)::: abstract action has selected key:::return->a->getValue
AbstractAction#isSelected(Action)::: abstract action is selected:::return->a->getValue->equals
AbstractAction#getValue(String):::Gets the Object associated with the specified key.:::if->return->if->return->return->arrayTable->get
AbstractAction#putValue(String, Object):::Sets the Value associated with the specified key.:::oldValue->if->if->else->if->new->ArrayTable->if->arrayTable->containsKey->arrayTable->get->if->arrayTable->remove->else->arrayTable->put->firePropertyChange
AbstractAction#isEnabled():::Returns true if the action is enabled.:::return
AbstractAction#setEnabled(boolean):::Sets whether the Action is enabled:::oldValue->if->Boolean->valueOf->Boolean->valueOf->firePropertyChange
AbstractAction#getKeys():::Returns an array of Objects which are keys for which values have been set for this AbstractAction, or null if no keys have values set.:::if->return->keys->arrayTable->size->new->ObjectArr->arrayTable->getKeys->return
AbstractAction#firePropertyChange(String, Object, Object):::Supports reporting bound property changes:::if->oldValue->equals->return->changeSupport->firePropertyChange
AbstractAction#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::if->new->SwingPropertyChangeSupport->changeSupport->addPropertyChangeListener
AbstractAction#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::if->return->changeSupport->removePropertyChangeListener
AbstractAction#getPropertyChangeListeners():::Returns an array of all the PropertyChangeListeners added to this AbstractAction with addPropertyChangeListener().:::if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
AbstractAction#clone()::: abstract action clone:::newAction->super->clone->synchronized->if->arrayTable->clone->return
AbstractAction#writeObject(ObjectOutputStream)::: abstract action write object:::s->defaultWriteObject->ArrayTable->writeArrayTable
AbstractAction#readObject(ObjectInputStream)::: abstract action read object:::s->defaultReadObject->for->counter->s->readInt
AbstractButton#setHideActionText(boolean):::Sets the hideActionText property, which determines whether the button displays text from the Action:::if->if->getAction->getAction->setTextFromAction->firePropertyChange
AbstractButton#getHideActionText():::Returns the value of the hideActionText property, which determines whether the button displays text from the Action:::return
AbstractButton#getText():::Returns the button's text.:::return
AbstractButton#setText(String):::Sets the button's text.:::oldValue->firePropertyChange->getMnemonic->updateDisplayedMnemonicIndex->if->accessibleContext->firePropertyChange->if->text->equals->revalidate->repaint
AbstractButton#isSelected():::Returns the state of the button:::return->model->isSelected
AbstractButton#setSelected(boolean):::Sets the state of the button:::oldValue->isSelected->model->setSelected
AbstractButton#doClick():::Programmatically perform a "click":::doClick
AbstractButton#doClick(int):::Programmatically perform a "click":::size->getSize->model->setArmed->model->setPressed->new->Rectangle->paintImmediately->try->Thread->sleep->catch->finally->model->setPressed->model->setArmed
AbstractButton#setMargin(Insets):::Sets space for margin between the button's border and the label:::if->else->if->if->old->firePropertyChange->if->old->equals->revalidate->repaint
AbstractButton#getMargin():::Returns the margin between the button's border and the label.:::return->margin->clone
AbstractButton#getIcon():::Returns the default icon.:::return
AbstractButton#setIcon(Icon):::Sets the button's default icon:::oldValue->if->firePropertyChange->if->accessibleContext->firePropertyChange->if->if->defaultIcon->getIconWidth->oldValue->getIconWidth->defaultIcon->getIconHeight->oldValue->getIconHeight->revalidate->repaint
AbstractButton#getPressedIcon():::Returns the pressed icon for the button.:::return
AbstractButton#setPressedIcon(Icon):::Sets the pressed icon for the button.:::oldValue->firePropertyChange->if->accessibleContext->firePropertyChange->if->if->getModel->isPressed->repaint
AbstractButton#getSelectedIcon():::Returns the selected icon for the button.:::return
AbstractButton#setSelectedIcon(Icon):::Sets the selected icon for the button.:::oldValue->if->firePropertyChange->if->accessibleContext->firePropertyChange->if->if->isSelected->repaint
AbstractButton#getRolloverIcon():::Returns the rollover icon for the button.:::return
AbstractButton#setRolloverIcon(Icon):::Sets the rollover icon for the button.:::oldValue->firePropertyChange->if->accessibleContext->firePropertyChange->setRolloverEnabled->if->repaint
AbstractButton#getRolloverSelectedIcon():::Returns the rollover selection icon for the button.:::return
AbstractButton#setRolloverSelectedIcon(Icon):::Sets the rollover selected icon for the button.:::oldValue->firePropertyChange->if->accessibleContext->firePropertyChange->setRolloverEnabled->if->if->isSelected->repaint
AbstractButton#getDisabledIcon():::Returns the icon used by the button when it's disabled:::if->UIManager->getLookAndFeel->getIcon->getDisabledIcon->if->firePropertyChange->return
AbstractButton#setDisabledIcon(Icon):::Sets the disabled icon for the button.:::oldValue->firePropertyChange->if->accessibleContext->firePropertyChange->if->if->isEnabled->repaint
AbstractButton#getDisabledSelectedIcon():::Returns the icon used by the button when it's disabled and selected:::if->if->UIManager->getLookAndFeel->getSelectedIcon->getDisabledSelectedIcon->else->return->getDisabledIcon->return
AbstractButton#setDisabledSelectedIcon(Icon):::Sets the disabled selection icon for the button.:::oldValue->firePropertyChange->if->accessibleContext->firePropertyChange->if->if->disabledSelectedIcon->getIconWidth->oldValue->getIconWidth->disabledSelectedIcon->getIconHeight->oldValue->getIconHeight->revalidate->if->isEnabled->isSelected->repaint
AbstractButton#getVerticalAlignment():::Returns the vertical alignment of the text and icon.:::return
AbstractButton#setVerticalAlignment(int):::Sets the vertical alignment of the icon and text.:::if->return->oldValue->checkVerticalKey->firePropertyChange->repaint
AbstractButton#getHorizontalAlignment():::Returns the horizontal alignment of the icon and text:::return
AbstractButton#setHorizontalAlignment(int):::Sets the horizontal alignment of the icon and text:::if->return->oldValue->checkHorizontalKey->firePropertyChange->repaint
AbstractButton#getVerticalTextPosition():::Returns the vertical position of the text relative to the icon.:::return
AbstractButton#setVerticalTextPosition(int):::Sets the vertical position of the text relative to the icon.:::if->return->oldValue->checkVerticalKey->firePropertyChange->revalidate->repaint
AbstractButton#getHorizontalTextPosition():::Returns the horizontal position of the text relative to the icon.:::return
AbstractButton#setHorizontalTextPosition(int):::Sets the horizontal position of the text relative to the icon.:::if->return->oldValue->checkHorizontalKey->firePropertyChange->revalidate->repaint
AbstractButton#getIconTextGap():::Returns the amount of space between the text and the icon displayed in this button.:::return
AbstractButton#setIconTextGap(int):::If both the icon and text properties are set, this property defines the space between them:::oldValue->firePropertyChange->if->revalidate->repaint
AbstractButton#checkHorizontalKey(int, String):::Verify that the key argument is a legal value for the horizontalAlignment and horizontalTextPosition properties:::if->return->else->throw->new->IllegalArgumentException
AbstractButton#checkVerticalKey(int, String):::Verify that the key argument is a legal value for the vertical properties:::if->return->else->throw->new->IllegalArgumentException
AbstractButton#removeNotify()::: abstract button remove notify:::super->removeNotify->if->isRolloverEnabled->getModel->setRollover
AbstractButton#setActionCommand(String):::Sets the action command for this button.:::getModel->setActionCommand
AbstractButton#getActionCommand():::Returns the action command for this button.:::ac->getModel->getActionCommand->if->getText->return
AbstractButton#setAction(Action):::Sets the Action:::oldValue->getAction->if->action->equals->if->removeActionListener->oldValue->removePropertyChangeListener->configurePropertiesFromAction->if->if->isListener->addActionListener->createActionPropertyChangeListener->action->addPropertyChangeListener->firePropertyChange
AbstractButton#isListener(Class, ActionListener)::: abstract button is listener:::isListener->listeners->listenerList->getListenerList->for->i->return
AbstractButton#getAction():::Returns the currently set Action for this ActionEvent source, or null if no Action is set.:::return
AbstractButton#configurePropertiesFromAction(Action):::Sets the properties on this button to match those in the specified Action:::setMnemonicFromAction->setTextFromAction->AbstractAction->setToolTipTextFromAction->setIconFromAction->setActionCommandFromAction->AbstractAction->setEnabledFromAction->if->AbstractAction->hasSelectedKey->shouldUpdateSelectedStateFromAction->setSelectedFromAction->setDisplayedMnemonicIndexFromAction
AbstractButton#clientPropertyChanged(Object, Object, Object)::: abstract button client property changed:::if->current->if->getHideActionText->setHideActionText
AbstractButton#shouldUpdateSelectedStateFromAction():::Button subclasses that support mirroring the selected state from the action should override this to return true:::return
AbstractButton#actionPropertyChanged(Action, String):::Updates the button's state in response to property changes in the associated action:::if->setTextFromAction->else->if->AbstractAction->setEnabledFromAction->else->if->AbstractAction->setToolTipTextFromAction->else->if->smallIconChanged->else->if->setMnemonicFromAction->else->if->setActionCommandFromAction->else->if->AbstractAction->hasSelectedKey->shouldUpdateSelectedStateFromAction->setSelectedFromAction->else->if->setDisplayedMnemonicIndexFromAction->else->if->largeIconChanged
AbstractButton#setDisplayedMnemonicIndexFromAction(Action, boolean)::: abstract button set displayed mnemonic index from action:::iValue->a->getValue->if->value->if->else->text->getText->if->text->length->setDisplayedMnemonicIndex
AbstractButton#setMnemonicFromAction(Action)::: abstract button set mnemonic from action:::n->a->getValue->setMnemonic
AbstractButton#setTextFromAction(Action, boolean)::: abstract button set text from action:::hideText->getHideActionText->if->a->getValue->setText->else->if->a->getValue->setText
AbstractButton#setIconFromAction(Action)::: abstract button set icon from action:::icon->if->a->getValue->if->a->getValue->setIcon
AbstractButton#smallIconChanged(Action)::: abstract button small icon changed:::if->a->getValue->setIconFromAction
AbstractButton#largeIconChanged(Action)::: abstract button large icon changed:::setIconFromAction
AbstractButton#setActionCommandFromAction(Action)::: abstract button set action command from action:::a->getValue->setActionCommand
AbstractButton#setSelectedFromAction(Action):::Sets the seleted state of the button from the action:::selected->if->AbstractAction->isSelected->if->isSelected->setSelected->if->isSelected->if->getModel->group->getModel->getGroup->if->group->clearSelection
AbstractButton#createActionPropertyChangeListener(Action):::Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties:::return->createActionPropertyChangeListener0
AbstractButton#createActionPropertyChangeListener0(Action)::: abstract button create action property change listener0:::return->new->ButtonActionPropertyChangeListener
AbstractButton.ButtonActionPropertyChangeListener#actionPropertyChanged(AbstractButton, Action, PropertyChangeEvent)::: button action property change listener action property changed:::if->AbstractAction->shouldReconfigure->button->configurePropertiesFromAction->else->button->e->getPropertyName->actionPropertyChanged
AbstractButton#isBorderPainted():::Gets the borderPainted property.:::return
AbstractButton#setBorderPainted(boolean):::Sets the borderPainted property:::oldValue->firePropertyChange->if->revalidate->repaint
AbstractButton#paintBorder(Graphics):::Paint the button's border if BorderPainted property is true and the button has a border.:::if->isBorderPainted->super->paintBorder
AbstractButton#isFocusPainted():::Gets the paintFocus property.:::return
AbstractButton#setFocusPainted(boolean):::Sets the paintFocus property, which must be true for the focus state to be painted:::oldValue->firePropertyChange->if->isFocusOwner->revalidate->repaint
AbstractButton#isContentAreaFilled():::Gets the contentAreaFilled property.:::return
AbstractButton#setContentAreaFilled(boolean):::Sets the contentAreaFilled property:::oldValue->firePropertyChange->if->repaint
AbstractButton#isRolloverEnabled():::Gets the rolloverEnabled property.:::return
AbstractButton#setRolloverEnabled(boolean):::Sets the rolloverEnabled property, which must be true for rollover effects to occur:::oldValue->firePropertyChange->if->repaint
AbstractButton#getMnemonic():::Returns the keyboard mnemonic from the current model.:::return
AbstractButton#setMnemonic(int):::Sets the keyboard mnemonic on the current model:::oldValue->getMnemonic->model->setMnemonic->updateMnemonicProperties
AbstractButton#setMnemonic(char):::This method is now obsolete, please use setMnemonic(int) to set the mnemonic for a button:::vk->if->setMnemonic
AbstractButton#setDisplayedMnemonicIndex(int):::Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic:::oldValue->if->else->text->getText->textLength->text->length->if->throw->new->IllegalArgumentException->firePropertyChange->if->revalidate->repaint
AbstractButton#getDisplayedMnemonicIndex():::Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.:::return
AbstractButton#updateDisplayedMnemonicIndex(String, int):::Update the displayedMnemonicIndex property:::SwingUtilities->findDisplayedMnemonicIndex->setDisplayedMnemonicIndex
AbstractButton#updateMnemonicProperties():::Brings the mnemonic property in accordance with model's mnemonic:::newMnemonic->model->getMnemonic->if->oldValue->firePropertyChange->getText->updateDisplayedMnemonicIndex->revalidate->repaint
AbstractButton#setMultiClickThreshhold(long):::Sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events:::if->throw->new->IllegalArgumentException
AbstractButton#getMultiClickThreshhold():::Gets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.:::return
AbstractButton#getModel():::Returns the model that this button represents.:::return
AbstractButton#setModel(ButtonModel):::Sets the model that this button represents.:::oldModel->getModel->if->oldModel->removeChangeListener->oldModel->removeActionListener->oldModel->removeItemListener->if->createChangeListener->createActionListener->createItemListener->newModel->addChangeListener->newModel->addActionListener->newModel->addItemListener->updateMnemonicProperties->super->newModel->isEnabled->setEnabled->else->getText->updateDisplayedMnemonicIndex->firePropertyChange->if->revalidate->repaint
AbstractButton#getUI():::Returns the L&amp;F object that renders this component.:::return
AbstractButton#setUI(ButtonUI):::Sets the L&amp;F object that renders this component.:::super->setUI->if->setDisabledIcon->if->setDisabledSelectedIcon
AbstractButton#updateUI():::Resets the UI property to a value from the current look and feel:::
AbstractButton#addImpl(Component, Object, int):::Adds the specified component to this container at the specified index, refer to java.awt.Container#addImpl(Component, Object, int) for a complete description of this method.:::if->new->OverlayLayout->setLayout->super->addImpl
AbstractButton#setLayout(LayoutManager):::Sets the layout manager for this container, refer to java.awt.Container#setLayout(LayoutManager) for a complete description of this method.:::super->setLayout
AbstractButton#addChangeListener(ChangeListener):::Adds a ChangeListener to the button.:::listenerList->add
AbstractButton#removeChangeListener(ChangeListener):::Removes a ChangeListener from the button.:::listenerList->remove
AbstractButton#getChangeListeners():::Returns an array of all the ChangeListeners added to this AbstractButton with addChangeListener().:::return->listenerList->getListeners
AbstractButton#fireStateChanged():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
AbstractButton#addActionListener(ActionListener):::Adds an ActionListener to the button.:::listenerList->add
AbstractButton#removeActionListener(ActionListener):::Removes an ActionListener from the button:::if->getAction->setAction->else->listenerList->remove
AbstractButton#getActionListeners():::Returns an array of all the ActionListeners added to this AbstractButton with addActionListener().:::return->listenerList->getListeners
AbstractButton#createChangeListener():::Subclasses that want to handle ChangeEvents differently can override this to return another ChangeListener implementation.:::return->getHandler
AbstractButton.ButtonChangeListener#stateChanged(ChangeEvent)::: button change listener state changed:::getHandler->stateChanged
AbstractButton#fireActionPerformed(ActionEvent):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->for->i
AbstractButton#fireItemStateChanged(ItemEvent):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->for->i->if->if->event->getStateChange->accessibleContext->firePropertyChange->accessibleContext->Integer->valueOf->Integer->valueOf->firePropertyChange->else->accessibleContext->firePropertyChange->accessibleContext->Integer->valueOf->Integer->valueOf->firePropertyChange
AbstractButton#createActionListener():::Returns ActionListener that is added to model.:::return->getHandler
AbstractButton#createItemListener():::Returns ItemListener that is added to model.:::return->getHandler
AbstractButton#setEnabled(boolean):::Enables (or disables) the button.:::if->model->isRollover->model->setRollover->super->setEnabled->model->setEnabled
AbstractButton#getLabel():::Returns the label text.:::return->getText
AbstractButton#setLabel(String):::Sets the label text.:::setText
AbstractButton#addItemListener(ItemListener):::Adds an ItemListener to the checkbox.:::listenerList->add
AbstractButton#removeItemListener(ItemListener):::Removes an ItemListener from the button.:::listenerList->remove
AbstractButton#getItemListeners():::Returns an array of all the ItemListeners added to this AbstractButton with addItemListener().:::return->listenerList->getListeners
AbstractButton#getSelectedObjects():::Returns an array (length 1) containing the label or null if the button is not selected.:::if->isSelected->return->selectedObjects->new->ObjectArr->getText->return
AbstractButton#init(String, Icon):::Initialization of the AbstractButton.:::if->setText->if->setIcon->updateUI->setAlignmentX->setAlignmentY
AbstractButton#imageUpdate(Image, int, int, int, int, int):::This is overridden to return false if the current Icon's Image is not equal to the passed in Image img.:::iconDisplayed->if->model->isEnabled->if->model->isSelected->getDisabledSelectedIcon->else->getDisabledIcon->else->if->model->isPressed->model->isArmed->getPressedIcon->else->if->isRolloverEnabled->model->isRollover->if->model->isSelected->getRolloverSelectedIcon->else->getRolloverIcon->else->if->model->isSelected->getSelectedIcon->if->getIcon->if->SwingUtilities->doesIconReferenceImage->return->return->super->imageUpdate
AbstractButton#setUIProperty(String, Object)::: abstract button set property:::if->if->booleanValue->setBorderPainted->else->if->if->booleanValue->setRolloverEnabled->else->if->if->intValue->setIconTextGap->else->if->if->booleanValue->setContentAreaFilled->else->super->setUIProperty
AbstractButton#paramString():::Returns a string representation of this AbstractButton:::defaultIconString->defaultIcon->toString->pressedIconString->pressedIcon->toString->disabledIconString->disabledIcon->toString->selectedIconString->selectedIcon->toString->disabledSelectedIconString->disabledSelectedIcon->toString->rolloverIconString->rolloverIcon->toString->rolloverSelectedIconString->rolloverSelectedIcon->toString->paintBorderString->paintFocusString->rolloverEnabledString->return->super->paramString
AbstractButton#getHandler()::: abstract button get handler:::if->new->Handler->return
AbstractButton.Handler#stateChanged(ChangeEvent)::: handler state changed:::source->e->getSource->updateMnemonicProperties->if->isEnabled->model->isEnabled->model->isEnabled->setEnabled->fireStateChanged->repaint
AbstractButton.Handler#actionPerformed(ActionEvent)::: handler action performed:::fireActionPerformed
AbstractButton.Handler#itemStateChanged(ItemEvent)::: handler item state changed:::fireItemStateChanged->if->shouldUpdateSelectedStateFromAction->action->getAction->if->AbstractAction->hasSelectedKey->selected->isSelected->isActionSelected->AbstractAction->isSelected->if->action->putValue
AbstractButton.AccessibleAbstractButton#getAccessibleName():::Returns the accessible name of this object.:::name->if->getClientProperty->if->AbstractButton.this->getText->if->super->getAccessibleName->return
AbstractButton.AccessibleAbstractButton#getAccessibleIcon():::Get the AccessibleIcons associated with this object if one or more exist:::defaultIcon->getIcon->if->ac->getAccessibleContext->if->return->new->AccessibleIconArr->return
AbstractButton.AccessibleAbstractButton#getAccessibleStateSet():::Get the state set of this object.:::states->super->getAccessibleStateSet->if->getModel->isArmed->states->add->if->isFocusOwner->states->add->if->getModel->isPressed->states->add->if->isSelected->states->add->return
AbstractButton.AccessibleAbstractButton#getAccessibleRelationSet():::Get the AccessibleRelationSet associated with this object if one exists:::relationSet->super->getAccessibleRelationSet->if->relationSet->contains->model->getModel->if->group->getGroup->if->len->group->getButtonCount->target->new->ObjectArr->elem->group->getElements->for->i->relation->new->AccessibleRelation->relation->setTarget->relationSet->add->return
AbstractButton.AccessibleAbstractButton#getAccessibleAction():::Get the AccessibleAction associated with this object:::return
AbstractButton.AccessibleAbstractButton#getAccessibleValue():::Get the AccessibleValue associated with this object:::return
AbstractButton.AccessibleAbstractButton#getAccessibleActionCount():::Returns the number of Actions available in this object:::return
AbstractButton.AccessibleAbstractButton#getAccessibleActionDescription(int):::Return a description of the specified action of the object.:::if->return->UIManager->getString->else->return
AbstractButton.AccessibleAbstractButton#doAccessibleAction(int):::Perform the specified Action on the object:::if->doClick->return->else->return
AbstractButton.AccessibleAbstractButton#getCurrentAccessibleValue():::Get the value of this object as a Number.:::if->isSelected->return->Integer->valueOf->else->return->Integer->valueOf
AbstractButton.AccessibleAbstractButton#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::if->return->i->n->intValue->if->setSelected->else->setSelected->return
AbstractButton.AccessibleAbstractButton#getMinimumAccessibleValue():::Get the minimum value of this object as a Number.:::return->Integer->valueOf
AbstractButton.AccessibleAbstractButton#getMaximumAccessibleValue():::Get the maximum value of this object as a Number.:::return->Integer->valueOf
AbstractButton.AccessibleAbstractButton#getAccessibleText()::: accessible abstract button get accessible text:::view->AbstractButton.this->getClientProperty->if->return->else->return
AbstractButton.AccessibleAbstractButton#getIndexAtPoint(Point):::Given a point in local coordinates, return the zero-based index of the character under that Point:::view->AbstractButton.this->getClientProperty->if->r->getTextRectangle->if->return->shape->new->Rectangle2D.Float->bias->new->Position.BiasArr->return->view->viewToModel->else->return
AbstractButton.AccessibleAbstractButton#getCharacterBounds(int):::Determine the bounding box of the character at the given index into the string:::view->AbstractButton.this->getClientProperty->if->r->getTextRectangle->if->return->shape->new->Rectangle2D.Float->try->charShape->view->modelToView->return->charShape->getBounds->catch->return->finally->else->return
AbstractButton.AccessibleAbstractButton#getCharCount():::Return the number of characters (valid indicies):::view->AbstractButton.this->getClientProperty->if->d->view->getDocument->if->doc->return->doc->getLength->return->accessibleContext->getAccessibleName->length
AbstractButton.AccessibleAbstractButton#getCaretPosition():::Return the zero-based offset of the caret:::return
AbstractButton.AccessibleAbstractButton#getAtIndex(int, int):::Returns the String at a given index.:::if->getCharCount->return->switch->try->return->getText->catch->return->finally->try->s->getCharCount->getText->words->BreakIterator->getLocale->getWordInstance->words->setText->end->words->following->return->s->words->previous->substring->catch->return->finally->try->s->getCharCount->getText->sentence->BreakIterator->getLocale->getSentenceInstance->sentence->setText->end->sentence->following->return->s->sentence->previous->substring->catch->return->finally->return
AbstractButton.AccessibleAbstractButton#getAfterIndex(int, int):::Returns the String after a given index.:::if->getCharCount->return->switch->if->getCharCount->return->try->return->getText->catch->return->finally->try->s->getCharCount->getText->words->BreakIterator->getLocale->getWordInstance->words->setText->start->words->following->if->s->length->return->end->words->following->if->s->length->return->return->s->substring->catch->return->finally->try->s->getCharCount->getText->sentence->BreakIterator->getLocale->getSentenceInstance->sentence->setText->start->sentence->following->if->s->length->return->end->sentence->following->if->s->length->return->return->s->substring->catch->return->finally->return
AbstractButton.AccessibleAbstractButton#getBeforeIndex(int, int):::Returns the String before a given index.:::if->getCharCount->return->switch->if->return->try->return->getText->catch->return->finally->try->s->getCharCount->getText->words->BreakIterator->getLocale->getWordInstance->words->setText->end->words->following->words->previous->start->words->previous->if->return->return->s->substring->catch->return->finally->try->s->getCharCount->getText->sentence->BreakIterator->getLocale->getSentenceInstance->sentence->setText->end->sentence->following->sentence->previous->start->sentence->previous->if->return->return->s->substring->catch->return->finally->return
AbstractButton.AccessibleAbstractButton#getCharacterAttribute(int):::Return the AttributeSet for a given character at a given index:::view->AbstractButton.this->getClientProperty->if->d->view->getDocument->if->doc->elem->doc->getCharacterElement->if->return->elem->getAttributes->return
AbstractButton.AccessibleAbstractButton#getSelectionStart():::Returns the start offset within the selected text:::return
AbstractButton.AccessibleAbstractButton#getSelectionEnd():::Returns the end offset within the selected text:::return
AbstractButton.AccessibleAbstractButton#getSelectedText():::Returns the portion of the text that is selected.:::return
AbstractButton.AccessibleAbstractButton#getText(int, int)::: accessible abstract button get text:::view->AbstractButton.this->getClientProperty->if->d->view->getDocument->if->doc->return->doc->getText->return
AbstractButton.AccessibleAbstractButton#getTextRectangle()::: accessible abstract button get text rectangle:::text->AbstractButton.this->getText->icon->AbstractButton.this->isEnabled->AbstractButton.this->getIcon->AbstractButton.this->getDisabledIcon->if->return->paintIconR->new->Rectangle->paintTextR->new->Rectangle->paintViewR->new->Rectangle->paintViewInsets->new->Insets->AbstractButton.this->getInsets->AbstractButton.this->getWidth->AbstractButton.this->getHeight->clippedText->SwingUtilities->getFont->getFontMetrics->AbstractButton.this->getVerticalAlignment->AbstractButton.this->getHorizontalAlignment->AbstractButton.this->getVerticalTextPosition->AbstractButton.this->getHorizontalTextPosition->layoutCompoundLabel->return
AbstractButton.AccessibleAbstractButton#getAccessibleExtendedComponent():::Returns the AccessibleExtendedComponent:::return
AbstractButton.AccessibleAbstractButton#getToolTipText():::Returns the tool tip text:::return->AbstractButton.this->getToolTipText
AbstractButton.AccessibleAbstractButton#getTitledBorderText():::Returns the titled border text:::return->super->getTitledBorderText
AbstractButton.AccessibleAbstractButton#getAccessibleKeyBinding():::Returns key bindings associated with this object:::mnemonic->AbstractButton.this->getMnemonic->if->return->return->new->ButtonKeyBinding
AbstractButton.AccessibleAbstractButton.ButtonKeyBinding#getAccessibleKeyBindingCount():::Returns the number of key bindings for this object:::return
AbstractButton.AccessibleAbstractButton.ButtonKeyBinding#getAccessibleKeyBinding(int):::Returns a key binding for this object:::if->throw->new->IllegalArgumentException->return->KeyStroke->getKeyStroke
AbstractCellEditor#isCellEditable(EventObject):::Returns true.:::return
AbstractCellEditor#shouldSelectCell(EventObject):::Returns true.:::return
AbstractCellEditor#stopCellEditing():::Calls fireEditingStopped and returns true.:::fireEditingStopped->return
AbstractCellEditor#cancelCellEditing():::Calls fireEditingCanceled.:::fireEditingCanceled
AbstractCellEditor#addCellEditorListener(CellEditorListener):::Adds a CellEditorListener to the listener list.:::listenerList->add
AbstractCellEditor#removeCellEditorListener(CellEditorListener):::Removes a CellEditorListener from the listener list.:::listenerList->remove
AbstractCellEditor#getCellEditorListeners():::Returns an array of all the CellEditorListeners added to this AbstractCellEditor with addCellEditorListener().:::return->listenerList->getListeners
AbstractCellEditor#fireEditingStopped():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
AbstractCellEditor#fireEditingCanceled():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
AbstractListModel#addListDataListener(ListDataListener):::Adds a listener to the list that's notified each time a change to the data model occurs.:::listenerList->add
AbstractListModel#removeListDataListener(ListDataListener):::Removes a listener from the list that's notified each time a change to the data model occurs.:::listenerList->remove
AbstractListModel#getListDataListeners():::Returns an array of all the list data listeners registered on this AbstractListModel.:::return->listenerList->getListeners
AbstractListModel#fireContentsChanged(Object, int, int):::AbstractListModel subclasses must call this method after one or more elements of the list change:::listeners->listenerList->getListenerList->e->for->i
AbstractListModel#fireIntervalAdded(Object, int, int):::AbstractListModel subclasses must call this method after one or more elements are added to the model:::listeners->listenerList->getListenerList->e->for->i
AbstractListModel#fireIntervalRemoved(Object, int, int):::AbstractListModel subclasses must call this method after one or more elements are removed from the model:::listeners->listenerList->getListenerList->e->for->i
AbstractListModel#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this model:::return->listenerList->getListeners
AbstractSpinnerModel#addChangeListener(ChangeListener):::Adds a ChangeListener to the model's listener list:::listenerList->add
AbstractSpinnerModel#removeChangeListener(ChangeListener):::Removes a ChangeListener from the model's listener list.:::listenerList->remove
AbstractSpinnerModel#getChangeListeners():::Returns an array of all the ChangeListeners added to this AbstractSpinnerModel with addChangeListener().:::return->listenerList->getListeners
AbstractSpinnerModel#fireStateChanged():::Run each ChangeListeners stateChanged() method.:::listeners->listenerList->getListenerList->for->i
AbstractSpinnerModel#getListeners(Class):::Return an array of all the listeners of the given type that were added to this model:::return->listenerList->getListeners
Action#getValue(String):::Gets one of this object's properties using the associated key.:::
Action#putValue(String, Object):::Sets one of this object's properties using the associated key:::
Action#setEnabled(boolean):::Sets the enabled state of the Action:::
Action#isEnabled():::Returns the enabled state of the Action:::
Action#accept(Object):::Determines whether the action should be performed with the specified sender object:::return->isEnabled
Action#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChange listener:::
Action#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChange listener.:::
ActionMap#setParent(ActionMap):::Sets this ActionMap's parent.:::
ActionMap#getParent():::Returns this ActionMap's parent.:::return
ActionMap#put(Object, Action):::Adds a binding for key to action:::if->return->if->remove->else->if->new->ArrayTable->arrayTable->put
ActionMap#get(Object):::Returns the binding for key, messaging the parent ActionMap if the binding is not locally defined.:::value->arrayTable->get->if->parent->getParent->if->return->parent->get->return
ActionMap#remove(Object):::Removes the binding for key from this ActionMap.:::if->arrayTable->remove
ActionMap#clear():::Removes all the mappings from this ActionMap.:::if->arrayTable->clear
ActionMap#keys():::Returns the Action names that are bound in this ActionMap.:::if->return->return->arrayTable->getKeys
ActionMap#size():::Returns the number of bindings in this ActionMap.:::if->return->return->arrayTable->size
ActionMap#allKeys():::Returns an array of the keys defined in this ActionMap and its parent:::count->size->parent->getParent->if->if->return->parent->allKeys->return->keys->if->return->keys->keys->keys->pKeys->parent->allKeys->if->return->if->return->keyMap->new->HashMap<Object,Object>->counter->for->for->return->keyMap->keySet->toArray
ActionMap#writeObject(ObjectOutputStream)::: action map write object:::s->defaultWriteObject->ArrayTable->writeArrayTable
ActionMap#readObject(ObjectInputStream)::: action map read object:::s->defaultReadObject->for->counter->s->readInt
ActionPropertyChangeListener#getQueue()::: action property change listener get queue:::synchronized->if->new->ReferenceQueue<JComponent>->return
ActionPropertyChangeListener#propertyChange(PropertyChangeEvent):::PropertyChangeListener method:::target->getTarget->if->getAction->removePropertyChangeListener->else->getAction->actionPropertyChanged
ActionPropertyChangeListener#actionPropertyChanged(T, Action, PropertyChangeEvent):::Invoked when a property changes on the Action and the target still exists.:::
ActionPropertyChangeListener#setTarget(T)::: action property change listener set target:::queue->getQueue->r->while->queue->poll->oldPCL->r->getOwner->oldAction->oldPCL->getAction->if->oldAction->removePropertyChangeListener->new->OwnedWeakReference<T>
ActionPropertyChangeListener#getTarget()::: action property change listener get target:::if->return->return->get
ActionPropertyChangeListener#getAction()::: action property change listener get action:::return
ActionPropertyChangeListener#writeObject(ObjectOutputStream)::: action property change listener write object:::s->defaultWriteObject->s->getTarget->writeObject
ActionPropertyChangeListener#readObject(ObjectInputStream)::: action property change listener read object:::s->defaultReadObject->target->s->readObject->if->setTarget
ActionPropertyChangeListener.OwnedWeakReference#getOwner()::: owned weak reference get owner:::return
AncestorNotifier#addAncestorListener(AncestorListener)::: ancestor notifier add ancestor listener:::listenerList->add
AncestorNotifier#removeAncestorListener(AncestorListener)::: ancestor notifier remove ancestor listener:::listenerList->remove
AncestorNotifier#getAncestorListeners()::: ancestor notifier get ancestor listeners:::return->listenerList->getListeners
AncestorNotifier#fireAncestorAdded(JComponent, int, Container, Container):::Notify all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
AncestorNotifier#fireAncestorRemoved(JComponent, int, Container, Container):::Notify all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
AncestorNotifier#fireAncestorMoved(JComponent, int, Container, Container):::Notify all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
AncestorNotifier#removeAllListeners()::: ancestor notifier remove all listeners:::removeListeners
AncestorNotifier#addListeners(Component, boolean)::: ancestor notifier add listeners:::a->for->a->getParent->if->firstInvisibleAncestor->isVisible
AncestorNotifier#removeListeners(Component)::: ancestor notifier remove listeners:::a->for->a->getParent
AncestorNotifier#componentResized(ComponentEvent)::: ancestor notifier component resized:::
AncestorNotifier#componentMoved(ComponentEvent)::: ancestor notifier component moved:::source->e->getComponent->source->getParent->fireAncestorMoved
AncestorNotifier#componentShown(ComponentEvent)::: ancestor notifier component shown:::ancestor->e->getComponent->if->addListeners->if->ancestor->getParent->fireAncestorAdded
AncestorNotifier#componentHidden(ComponentEvent)::: ancestor notifier component hidden:::ancestor->e->getComponent->needsNotify->if->ancestor->getParent->removeListeners->if->ancestor->getParent->fireAncestorRemoved
AncestorNotifier#propertyChange(PropertyChangeEvent)::: ancestor notifier property change:::s->evt->getPropertyName->if->s->equals->s->equals->component->evt->getSource->if->evt->getNewValue->if->addListeners->if->component->getParent->fireAncestorAdded->else->needsNotify->oldParent->evt->getOldValue->removeListeners->if->fireAncestorRemoved
ArrayTable#writeArrayTable(ObjectOutputStream, ArrayTable):::Writes the passed in ArrayTable to the passed in ObjectOutputStream:::keys->if->table->getKeys->s->writeInt->else->validCount->for->counter->s->writeInt->if->foreach->if->s->writeObject->s->table->get->writeObject->if->break
ArrayTable#put(Object, Object)::: array table put:::if->new->ObjectArr->else->size->size->if->if->containsKey->tmp->for->i->else->array->i->tmp->new->ObjectArr->System->arraycopy->else->if->isArray->grow->tmp->tmp->put
ArrayTable#get(Object)::: array table get:::value->if->if->isArray->array->for->i->else->get->return
ArrayTable#size()::: array table size:::size->if->return->if->isArray->else->size->return
ArrayTable#containsKey(Object)::: array table contains key:::contains->if->if->isArray->array->for->i->else->containsKey->return
ArrayTable#remove(Object)::: array table remove:::value->if->return->if->if->isArray->index->array->for->i->if->tmp->new->ObjectArr->System->arraycopy->if->System->arraycopy->else->remove->if->size->isArray->shrink->return
ArrayTable#clear():::Removes all the mappings.:::
ArrayTable#clone()::: array table clone:::newArrayTable->new->ArrayTable->if->isArray->array->for->i->else->tmp->keys->tmp->keys->while->keys->hasMoreElements->o->keys->nextElement->newArrayTable->tmp->get->put->return
ArrayTable#getKeys(Object[]):::Returns the keys of the table, or null if there are currently no bindings.:::if->return->if->isArray->array->if->new->ObjectArr->for->i->index->else->tmp->enum_->tmp->keys->counter->tmp->size->if->new->ObjectArr->while->enum_->nextElement->return
ArrayTable#isArray()::: array table is array:::return
ArrayTable#grow()::: array table grow:::array->tmp->new->Hashtable<Object,Object>->for->i
ArrayTable#shrink()::: array table shrink:::tmp->array->tmp->size->new->ObjectArr->keys->tmp->keys->j->while->keys->hasMoreElements->o->keys->nextElement->tmp->get
Autoscroller#stop(JComponent):::Stops autoscroll events from happening on the specified component.:::sharedInstance->_stop
Autoscroller#isRunning(JComponent):::Stops autoscroll events from happening on the specified component.:::return->sharedInstance->_isRunning
Autoscroller#processMouseDragged(MouseEvent):::Invoked when a mouse dragged event occurs, will start the autoscroller if necessary.:::sharedInstance->_processMouseDragged
Autoscroller#start(JComponent, MouseEvent):::Starts the timer targeting the passed in component.:::screenLocation->c->getLocationOnScreen->if->_stop->e->getID->e->getWhen->e->getModifiers->e->getX->e->getY->e->getXOnScreen->e->getYOnScreen->e->getClickCount->e->isPopupTrigger->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->if->new->Timer->if->timer->isRunning->timer->start
Autoscroller#_stop(JComponent):::Stops scrolling for the passed in widget.:::if->if->timer->stop
Autoscroller#_isRunning(JComponent):::Returns true if autoscrolling is currently running for the specified widget.:::return->timer->isRunning
Autoscroller#_processMouseDragged(MouseEvent):::MouseListener method, invokes start/stop as necessary.:::component->e->getComponent->stop->if->component->isShowing->visibleRect->component->getVisibleRect->visibleRect->e->getX->e->getY->contains->if->_stop->else->start
Autoscroller#actionPerformed(ActionEvent):::ActionListener method:::component->if->component->isShowing->_stop->return->screenLocation->component->getLocationOnScreen->e->event->getID->event->getWhen->event->getModifiers->event->getX->event->getY->event->getXOnScreen->event->getYOnScreen->event->getClickCount->event->isPopupTrigger->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->component->superProcessMouseMotionEvent
BorderFactory#createLineBorder(Color):::Creates a line border with the specified color.:::return->new->LineBorder
BorderFactory#createLineBorder(Color, int):::Creates a line border with the specified color and width:::return->new->LineBorder
BorderFactory#createLineBorder(Color, int, boolean):::Creates a line border with the specified color, thickness, and corner shape.:::return->new->LineBorder
BorderFactory#createRaisedBevelBorder():::Creates a border with a raised beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows:::return->createSharedBevel
BorderFactory#createLoweredBevelBorder():::Creates a border with a lowered beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows:::return->createSharedBevel
BorderFactory#createBevelBorder(int):::Creates a beveled border of the specified type, using brighter shades of the component's current background color for highlighting, and darker shading for shadows:::return->createSharedBevel
BorderFactory#createBevelBorder(int, Color, Color):::Creates a beveled border of the specified type, using the specified highlighting and shadowing:::return->new->BevelBorder
BorderFactory#createBevelBorder(int, Color, Color, Color, Color):::Creates a beveled border of the specified type, using the specified colors for the inner and outer highlight and shadow areas.:::return->new->BevelBorder
BorderFactory#createSharedBevel(int)::: border factory create shared bevel:::if->return->else->if->return->return
BorderFactory#createRaisedSoftBevelBorder():::Creates a beveled border with a raised edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows:::if->new->SoftBevelBorder->return
BorderFactory#createLoweredSoftBevelBorder():::Creates a beveled border with a lowered edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows:::if->new->SoftBevelBorder->return
BorderFactory#createSoftBevelBorder(int):::Creates a beveled border of the specified type with softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows:::if->return->createRaisedSoftBevelBorder->if->return->createLoweredSoftBevelBorder->return
BorderFactory#createSoftBevelBorder(int, Color, Color):::Creates a beveled border of the specified type with softened corners, using the specified highlighting and shadowing:::return->new->SoftBevelBorder
BorderFactory#createSoftBevelBorder(int, Color, Color, Color, Color):::Creates a beveled border of the specified type with softened corners, using the specified colors for the inner and outer edges of the highlight and the shadow areas:::return->new->SoftBevelBorder
BorderFactory#createEtchedBorder():::Creates a border with an "etched" look using the component's current background color for highlighting and shading.:::return
BorderFactory#createEtchedBorder(Color, Color):::Creates a border with an "etched" look using the specified highlighting and shading colors.:::return->new->EtchedBorder
BorderFactory#createEtchedBorder(int):::Creates a border with an "etched" look using the component's current background color for highlighting and shading.:::switch->if->new->EtchedBorder->return->return->throw->new->IllegalArgumentException
BorderFactory#createEtchedBorder(int, Color, Color):::Creates a border with an "etched" look using the specified highlighting and shading colors.:::return->new->EtchedBorder
BorderFactory#createTitledBorder(String):::Creates a new titled border with the specified title, the default border type (determined by the current look and feel), the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel).:::return->new->TitledBorder
BorderFactory#createTitledBorder(Border):::Creates a new titled border with an empty title, the specified border object, the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel).:::return->new->TitledBorder
BorderFactory#createTitledBorder(Border, String):::Adds a title to an existing border, with default positioning (determined by the current look and feel), default justification (leading) and the default font and text color (determined by the current look and feel).:::return->new->TitledBorder
BorderFactory#createTitledBorder(Border, String, int, int):::Adds a title to an existing border, with the specified positioning and using the default font and text color (determined by the current look and feel).:::return->new->TitledBorder
BorderFactory#createTitledBorder(Border, String, int, int, Font):::Adds a title to an existing border, with the specified positioning and font, and using the default text color (determined by the current look and feel).:::return->new->TitledBorder
BorderFactory#createTitledBorder(Border, String, int, int, Font, Color):::Adds a title to an existing border, with the specified positioning, font and color.:::return->new->TitledBorder
BorderFactory#createEmptyBorder():::Creates an empty border that takes up no space:::return
BorderFactory#createEmptyBorder(int, int, int, int):::Creates an empty border that takes up space but which does no drawing, specifying the width of the top, left, bottom, and right sides.:::return->new->EmptyBorder
BorderFactory#createCompoundBorder():::Creates a compound border with a null inside edge and a null outside edge.:::return->new->CompoundBorder
BorderFactory#createCompoundBorder(Border, Border):::Creates a compound border specifying the border objects to use for the outside and inside edges.:::return->new->CompoundBorder
BorderFactory#createMatteBorder(int, int, int, int, Color):::Creates a matte-look border using a solid color:::return->new->MatteBorder
BorderFactory#createMatteBorder(int, int, int, int, Icon):::Creates a matte-look border that consists of multiple tiles of a specified icon:::return->new->MatteBorder
BorderFactory#createStrokeBorder(BasicStroke):::Creates a border of the specified stroke:::return->new->StrokeBorder
BorderFactory#createStrokeBorder(BasicStroke, Paint):::Creates a border of the specified stroke and paint:::return->new->StrokeBorder
BorderFactory#createDashedBorder(Paint):::Creates a dashed border of the specified paint:::return->createDashedBorder
BorderFactory#createDashedBorder(Paint, float, float):::Creates a dashed border of the specified paint, relative length, and relative spacing:::return->createDashedBorder
BorderFactory#createDashedBorder(Paint, float, float, float, boolean):::Creates a dashed border of the specified paint, thickness, line shape, relative length, and relative spacing:::shared->if->return->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->cap->join->array->border->new->BasicStroke->createStrokeBorder->if->return
BoundedRangeModel#getMinimum():::Returns the minimum acceptable value.:::
BoundedRangeModel#setMinimum(int):::Sets the model's minimum to newMinimum:::
BoundedRangeModel#getMaximum():::Returns the model's maximum:::
BoundedRangeModel#setMaximum(int):::Sets the model's maximum to newMaximum:::
BoundedRangeModel#getValue():::Returns the model's current value:::
BoundedRangeModel#setValue(int):::Sets the model's current value to newValue if newValue satisfies the model's constraints:::
BoundedRangeModel#setValueIsAdjusting(boolean):::This attribute indicates that any upcoming changes to the value of the model should be considered a single event:::
BoundedRangeModel#getValueIsAdjusting():::Returns true if the current changes to the value property are part of a series of changes.:::
BoundedRangeModel#getExtent():::Returns the model's extent, the length of the inner range that begins at the model's value.:::
BoundedRangeModel#setExtent(int):::Sets the model's extent:::
BoundedRangeModel#setRangeProperties(int, int, int, int, boolean):::This method sets all of the model's data with a single method call:::
BoundedRangeModel#addChangeListener(ChangeListener):::Adds a ChangeListener to the model's listener list.:::
BoundedRangeModel#removeChangeListener(ChangeListener):::Removes a ChangeListener from the model's listener list.:::
Box#createHorizontalBox():::Creates a Box that displays its components from left to right:::return->new->Box
Box#createVerticalBox():::Creates a Box that displays its components from top to bottom:::return->new->Box
Box#createRigidArea(Dimension):::Creates an invisible component that's always the specified size:::return->new->Filler
Box#createHorizontalStrut(int):::Creates an invisible, fixed-width component:::return->new->Dimension->new->Dimension->new->Dimension->new->Filler
Box#createVerticalStrut(int):::Creates an invisible, fixed-height component:::return->new->Dimension->new->Dimension->new->Dimension->new->Filler
Box#createGlue():::Creates an invisible "glue" component that can be useful in a Box whose visible components have a maximum width (for a horizontal box) or height (for a vertical box):::return->new->Dimension->new->Dimension->new->Dimension->new->Filler
Box#createHorizontalGlue():::Creates a horizontal glue component.:::return->new->Dimension->new->Dimension->new->Dimension->new->Filler
Box#createVerticalGlue():::Creates a vertical glue component.:::return->new->Dimension->new->Dimension->new->Dimension->new->Filler
Box#setLayout(LayoutManager):::Throws an AWTError, since a Box can use only a BoxLayout.:::throw->new->AWTError
Box#paintComponent(Graphics):::Paints this Box:::if->super->paintComponent->else->if->isOpaque->g->getBackground->setColor->g->getWidth->getHeight->fillRect
Box.Filler#changeShape(Dimension, Dimension, Dimension):::Change the size requests for this shape:::setMinimumSize->setPreferredSize->setMaximumSize->revalidate
Box.Filler#paintComponent(Graphics):::Paints this Filler:::if->super->paintComponent->else->if->isOpaque->g->getBackground->setColor->g->getWidth->getHeight->fillRect
Box.Filler#getAccessibleContext():::Gets the AccessibleContext associated with this Box.Filler:::if->new->AccessibleBoxFiller->return
Box.Filler.AccessibleBoxFiller#getAccessibleRole():::Gets the role of this object.:::return
Box#getAccessibleContext():::Gets the AccessibleContext associated with this Box:::if->new->AccessibleBox->return
Box.AccessibleBox#getAccessibleRole():::Gets the role of this object.:::return
BoxLayout#getTarget():::Returns the container that uses this layout manager.:::return
BoxLayout#getAxis():::Returns the axis that was used to lay out components:::return
BoxLayout#invalidateLayout(Container):::Indicates that a child has changed its layout related information, and thus any cached calculations should be flushed:::checkContainer
BoxLayout#addLayoutComponent(String, Component):::Not used by this class.:::comp->getParent->invalidateLayout
BoxLayout#removeLayoutComponent(Component):::Not used by this class.:::comp->getParent->invalidateLayout
BoxLayout#addLayoutComponent(Component, Object):::Not used by this class.:::comp->getParent->invalidateLayout
BoxLayout#preferredLayoutSize(Container):::Returns the preferred dimensions for this layout, given the components in the specified target container.:::size->synchronized->checkContainer->checkRequests->new->Dimension->insets->target->getInsets->Math->min->Math->min->return
BoxLayout#minimumLayoutSize(Container):::Returns the minimum dimensions needed to lay out the components contained in the specified target container.:::size->synchronized->checkContainer->checkRequests->new->Dimension->insets->target->getInsets->Math->min->Math->min->return
BoxLayout#maximumLayoutSize(Container):::Returns the maximum dimensions the target container can use to lay out the components it contains.:::size->synchronized->checkContainer->checkRequests->new->Dimension->insets->target->getInsets->Math->min->Math->min->return
BoxLayout#getLayoutAlignmentX(Container):::Returns the alignment along the X axis for the container:::checkContainer->checkRequests->return
BoxLayout#getLayoutAlignmentY(Container):::Returns the alignment along the Y axis for the container:::checkContainer->checkRequests->return
BoxLayout#layoutContainer(Container):::Called by the AWT <!-- XXX CHECK! --> when the specified container needs to be laid out.:::checkContainer->nChildren->target->getComponentCount->xOffsets->new->intArr->xSpans->new->intArr->yOffsets->new->intArr->ySpans->new->intArr->alloc->target->getSize->in->target->getInsets->o->target->getComponentOrientation->absoluteAxis->resolveAxis->ltr->o->isLeftToRight->synchronized->checkRequests->if->SizeRequirements->calculateTiledPositions->SizeRequirements->calculateAlignedPositions->else->SizeRequirements->calculateAlignedPositions->SizeRequirements->calculateTiledPositions->for->i->if->for->i
BoxLayout#checkContainer(Container)::: box layout check container:::if->throw->new->AWTError
BoxLayout#checkRequests()::: box layout check requests:::if->n->target->getComponentCount->new->SizeRequirementsArr->new->SizeRequirementsArr->for->i->absoluteAxis->target->getComponentOrientation->resolveAxis->if->SizeRequirements->getTiledSizeRequirements->SizeRequirements->getAlignedSizeRequirements->else->SizeRequirements->getAlignedSizeRequirements->SizeRequirements->getTiledSizeRequirements
BoxLayout#resolveAxis(int, ComponentOrientation):::Given one of the 4 axis values, resolve it to an absolute axis:::absoluteAxis->if->o->isHorizontal->else->if->o->isHorizontal->else->return
BufferStrategyPaintManager#dispose():::Cleans up any created BufferStrategies.:::SwingUtilities->new->Runnable->invokeLater
BufferStrategyPaintManager#dispose(java.util.List)::: buffer strategy paint manager dispose:::if->LOGGER->isLoggable->LOGGER->new->RuntimeException->finer->if->foreach->bufferInfo->dispose
BufferStrategyPaintManager#show(Container, int, int, int, int):::Shows the specified region of the back buffer:::synchronized->if->return->try->info->getBufferInfo->bufferStrategy->if->info->isInSync->info->getBufferStrategy->bsSubRegion->paintAllOnExpose->info->getPaintAllOnExpose->info->setPaintAllOnExpose->if->bsSubRegion->showIfNotLost->return->bufferInfo->setContentsLostDuringExpose->catch->finally->synchronized->notifyAll->return
BufferStrategyPaintManager#paint(JComponent, JComponent, Graphics, int, int, int, int)::: buffer strategy paint manager paint:::root->fetchRoot->if->prepare->if->getDestination->cx->cy->if->bsg->translate->constrain->bsg->setClip->paintingComponent->paintToOffscreen->accumulate->return->else->bufferInfo->setInSync->if->LOGGER->isLoggable->LOGGER->finer->return->super->paint
BufferStrategyPaintManager#copyArea(JComponent, Graphics, int, int, int, int, int, int, boolean)::: buffer strategy paint manager copy area:::root->fetchRoot->if->prepare->bufferInfo->isInSync->if->cBounds->c->getVisibleRect->relX->relY->bsg->clipRect->bsg->copyArea->else->bsg->copyArea->accumulate->else->if->LOGGER->isLoggable->LOGGER->finer->if->flushAccumulatedRegion->rootJ->repaint->else->super->copyArea
BufferStrategyPaintManager#beginPaint()::: buffer strategy paint manager begin paint:::synchronized->while->try->wait->catch->finally->if->LOGGER->isLoggable->LOGGER->finest->resetAccumulated
BufferStrategyPaintManager#endPaint()::: buffer strategy paint manager end paint:::if->LOGGER->isLoggable->LOGGER->finest->if->if->flushAccumulatedRegion->if->isRepaintingRoot->repaintRoot->else->resetDoubleBufferPerWindow->rootJ->repaint->toDispose->synchronized->if->bufferInfos->remove->if->toDispose->dispose
BufferStrategyPaintManager#flushAccumulatedRegion():::Renders the BufferStrategy to the screen.:::success->if->bsSubRegion->contentsLost->bufferStrategy->contentsLost->if->bsSubRegion->show->bufferStrategy->contentsLost->if->if->LOGGER->isLoggable->LOGGER->finer->bufferInfo->setInSync->resetAccumulated->return
BufferStrategyPaintManager#resetAccumulated()::: buffer strategy paint manager reset accumulated:::
BufferStrategyPaintManager#doubleBufferingChanged(JRootPane):::Invoked when the double buffering or useTrueDoubleBuffering changes for a JRootPane:::if->rootPane->isDoubleBuffered->rootPane->getUseTrueDoubleBuffering->rootPane->getParent->if->SwingUtilities->isEventDispatchThread->updater->new->Runnable->SwingUtilities->invokeLater->else->doubleBufferingChanged0
BufferStrategyPaintManager#doubleBufferingChanged0(JRootPane):::Does the work for doubleBufferingChanged.:::info->synchronized->while->try->wait->catch->finally->rootPane->getParent->getBufferInfo->if->else->if->bufferInfos->remove->if->info->dispose
BufferStrategyPaintManager#prepare(JComponent, Container, boolean, int, int, int, int):::Calculates information common to paint/copyArea.:::if->bsg->dispose->if->contentsLost->bufferInfo->getBufferInfo->if->new->BufferInfo->bufferInfos->add->if->LOGGER->isLoggable->LOGGER->finer->if->bufferInfo->hasBufferStrategyChanged->bufferInfo->getBufferStrategy->if->bufferStrategy->getDrawGraphics->if->bufferStrategy->contentsRestored->if->LOGGER->isLoggable->LOGGER->finer->else->return->if->bufferInfo->getContentsLostDuringExpose->bufferInfo->setContentsLostDuringExpose->if->LOGGER->isLoggable->LOGGER->finer->if->c->getWidth->c->getHeight->bufferInfo->setInSync->else->if->bufferInfo->setInSync->if->isRepaintingRoot->repaintRoot->else->resetDoubleBufferPerWindow->return->return
BufferStrategyPaintManager#fetchRoot(JComponent)::: buffer strategy paint manager fetch root:::encounteredHW->root->while->SunToolkit->isInstanceOf->root->getX->root->getY->root->getParent->if->if->else->if->root->isLightweight->if->else->return->if->if->rootJ->isDoubleBuffered->getUseTrueDoubleBuffering->return->return
BufferStrategyPaintManager#resetDoubleBufferPerWindow():::Turns off double buffering per window.:::if->dispose->repaintManager->setPaintManager
BufferStrategyPaintManager#getBufferInfo(Container):::Returns the BufferInfo for the specified root or null if one hasn't been created yet.:::for->counter->bufferInfos->size->return
BufferStrategyPaintManager#accumulate(int, int, int, int)::: buffer strategy paint manager accumulate:::Math->min->Math->min->Math->max->Math->max
BufferStrategyPaintManager.BufferInfo#setPaintAllOnExpose(boolean)::: buffer info set paint all on expose:::
BufferStrategyPaintManager.BufferInfo#getPaintAllOnExpose()::: buffer info get paint all on expose:::return
BufferStrategyPaintManager.BufferInfo#setContentsLostDuringExpose(boolean)::: buffer info set contents lost during expose:::
BufferStrategyPaintManager.BufferInfo#getContentsLostDuringExpose()::: buffer info get contents lost during expose:::return
BufferStrategyPaintManager.BufferInfo#setInSync(boolean)::: buffer info set in sync:::
BufferStrategyPaintManager.BufferInfo#isInSync():::Whether or not the contents of the buffer strategy is in sync with the window:::return
BufferStrategyPaintManager.BufferInfo#getRoot():::Returns the Root (Window or Applet) that this BufferInfo references.:::return->root->get
BufferStrategyPaintManager.BufferInfo#getBufferStrategy(boolean):::Returns the BufferStartegy:::bs->weakBS->get->if->createBufferStrategy->if->new->WeakReference<BufferStrategy>->if->LOGGER->isLoggable->LOGGER->finer->return
BufferStrategyPaintManager.BufferInfo#hasBufferStrategyChanged():::Returns true if the buffer strategy of the component differs from current buffer strategy.:::root->getRoot->if->ourBS->componentBS->getBufferStrategy->if->getBufferStrategy->else->AWTAccessor->getComponentAccessor->getBufferStrategy->if->if->ourBS->dispose->return->return
BufferStrategyPaintManager.BufferInfo#createBufferStrategy():::Creates the BufferStrategy:::root->getRoot->if->return->bs->if->SwingUtilities3->isVsyncRequested->createBufferStrategy->if->LOGGER->isLoggable->LOGGER->finer->if->createBufferStrategy->if->return
BufferStrategyPaintManager.BufferInfo#createBufferStrategy(Container, boolean)::: buffer info create buffer strategy:::caps->if->new->ImageCapabilities->new->ImageCapabilities->new->ExtendedBufferCapabilities->else->new->ImageCapabilities->new->ImageCapabilities->new->BufferCapabilities->bs->if->SunToolkit->isInstanceOf->try->componentAccessor->AWTAccessor->getComponentAccessor->componentAccessor->createBufferStrategy->componentAccessor->getBufferStrategy->catch->if->LOGGER->isLoggable->LOGGER->finer->finally->else->try->createBufferStrategy->getBufferStrategy->catch->if->LOGGER->isLoggable->LOGGER->finer->finally->return
BufferStrategyPaintManager.BufferInfo#dispose():::Cleans up and removes any references.:::root->getRoot->if->LOGGER->isLoggable->LOGGER->finer->if->root->removeComponentListener->if->removeWindowListener->bs->getBufferStrategy->if->bs->dispose
BufferStrategyPaintManager.BufferInfo#componentHidden(ComponentEvent)::: buffer info component hidden:::root->getRoot->if->root->isVisible->root->repaint->else->setPaintAllOnExpose
BufferStrategyPaintManager.BufferInfo#windowIconified(WindowEvent)::: buffer info window iconified:::setPaintAllOnExpose
BufferStrategyPaintManager.BufferInfo#windowClosed(WindowEvent)::: buffer info window closed:::synchronized->while->try->BufferStrategyPaintManager.this->wait->catch->finally->bufferInfos->remove->dispose
BufferStrategyPaintManager.BufferInfo#windowOpened(WindowEvent)::: buffer info window opened:::
BufferStrategyPaintManager.BufferInfo#windowClosing(WindowEvent)::: buffer info window closing:::
BufferStrategyPaintManager.BufferInfo#windowDeiconified(WindowEvent)::: buffer info window deiconified:::
BufferStrategyPaintManager.BufferInfo#windowActivated(WindowEvent)::: buffer info window activated:::
BufferStrategyPaintManager.BufferInfo#windowDeactivated(WindowEvent)::: buffer info window deactivated:::
ButtonGroup#add(AbstractButton):::Adds the button to the group.:::if->return->buttons->addElement->if->b->isSelected->if->b->getModel->else->b->setSelected->b->getModel->setGroup
ButtonGroup#remove(AbstractButton):::Removes the button from the group.:::if->return->buttons->removeElement->if->b->getModel->b->getModel->setGroup
ButtonGroup#clearSelection():::Clears the selection such that none of the buttons in the ButtonGroup are selected.:::if->oldSelection->oldSelection->setSelected
ButtonGroup#getElements():::Returns all the buttons that are participating in this group.:::return->buttons->elements
ButtonGroup#getSelection():::Returns the model of the selected button.:::return
ButtonGroup#setSelected(ButtonModel, boolean):::Sets the selected value for the ButtonModel:::if->oldSelection->if->oldSelection->setSelected->m->setSelected
ButtonGroup#isSelected(ButtonModel):::Returns whether a ButtonModel is selected.:::return
ButtonGroup#getButtonCount():::Returns the number of buttons in the group.:::if->return->else->return->buttons->size
ButtonModel#isArmed():::Indicates partial commitment towards triggering the button.:::
ButtonModel#isSelected():::Indicates if the button has been selected:::
ButtonModel#isEnabled():::Indicates if the button can be selected or triggered by an input device, such as a mouse pointer.:::
ButtonModel#isPressed():::Indicates if the button is pressed.:::
ButtonModel#isRollover():::Indicates that the mouse is over the button.:::
ButtonModel#setArmed(boolean):::Marks the button as armed or unarmed.:::
ButtonModel#setSelected(boolean):::Selects or deselects the button.:::
ButtonModel#setEnabled(boolean):::Enables or disables the button.:::
ButtonModel#setPressed(boolean):::Sets the button to pressed or unpressed.:::
ButtonModel#setRollover(boolean):::Sets or clears the button's rollover state:::
ButtonModel#setMnemonic(int):::Sets the keyboard mnemonic (shortcut key or accelerator key) for the button.:::
ButtonModel#getMnemonic():::Gets the keyboard mnemonic for the button.:::
ButtonModel#setActionCommand(String):::Sets the action command string that gets sent as part of the ActionEvent when the button is triggered.:::
ButtonModel#getActionCommand():::Returns the action command string for the button.:::
ButtonModel#setGroup(ButtonGroup):::Identifies the group the button belongs to -- needed for radio buttons, which are mutually exclusive within their group.:::
ButtonModel#getGroup():::Returns the group that the button belongs to:::return
ButtonModel#addActionListener(ActionListener):::Adds an ActionListener to the model.:::
ButtonModel#removeActionListener(ActionListener):::Removes an ActionListener from the model.:::
ButtonModel#addItemListener(ItemListener):::Adds an ItemListener to the model.:::
ButtonModel#removeItemListener(ItemListener):::Removes an ItemListener from the model.:::
ButtonModel#addChangeListener(ChangeListener):::Adds a ChangeListener to the model.:::
ButtonModel#removeChangeListener(ChangeListener):::Removes a ChangeListener from the model.:::
CellEditor#getCellEditorValue():::Returns the value contained in the editor.:::
CellEditor#isCellEditable(EventObject):::Asks the editor if it can start editing using anEvent:::
CellEditor#shouldSelectCell(EventObject):::Returns true if the editing cell should be selected, false otherwise:::
CellEditor#stopCellEditing():::Tells the editor to stop editing and accept any partially edited value as the value of the editor:::
CellEditor#cancelCellEditing():::Tells the editor to cancel editing and not accept any partially edited value.:::
CellEditor#addCellEditorListener(CellEditorListener):::Adds a listener to the list that's notified when the editor stops, or cancels editing.:::
CellEditor#removeCellEditorListener(CellEditorListener):::Removes a listener from the list that's notified:::
CellRendererPane#invalidate():::Overridden to avoid propagating a invalidate up the tree when the cell renderer child is configured.:::
CellRendererPane#paint(Graphics):::Shouldn't be called.:::
CellRendererPane#update(Graphics):::Shouldn't be called.:::
CellRendererPane#addImpl(Component, Object, int):::If the specified component is already a child of this then we don't bother doing anything - stacking order doesn't matter for cell renderer components (CellRendererPane doesn't paint anyway).:::if->x->getParent->return->else->super->addImpl
CellRendererPane#paintComponent(Graphics, Component, Container, int, int, int, int, boolean):::Paint a cell renderer component c on graphics object g:::if->if->oldColor->g->getColor->g->p->getBackground->setColor->g->fillRect->g->setColor->return->if->c->getParent->this->add->c->setBounds->if->c->validate->wasDoubleBuffered->if->isDoubleBuffered->setDoubleBuffered->cg->g->create->try->c->paint->catch->finally->cg->dispose->if->setDoubleBuffered->c->setBounds
CellRendererPane#paintComponent(Graphics, Component, Container, int, int, int, int):::Calls this.paintComponent(g, c, p, x, y, w, h, false).:::paintComponent
CellRendererPane#paintComponent(Graphics, Component, Container, Rectangle):::Calls this.paintComponent() with the rectangles x,y,width,height fields.:::paintComponent
CellRendererPane#writeObject(ObjectOutputStream)::: cell renderer pane write object:::removeAll->s->defaultWriteObject
CellRendererPane#getAccessibleContext():::Gets the AccessibleContext associated with this CellRendererPane:::if->new->AccessibleCellRendererPane->return
CellRendererPane.AccessibleCellRendererPane#getAccessibleRole():::Get the role of this object.:::return
ComboBoxEditor#getEditorComponent():::Returns the component that should be added to the tree hierarchy for this editor:::
ComboBoxEditor#setItem(Object):::Set the item that should be edited:::
ComboBoxEditor#getItem():::Returns the edited item:::
ComboBoxEditor#selectAll():::Ask the editor to start editing and to select everything:::
ComboBoxEditor#addActionListener(ActionListener):::Add an ActionListener:::
ComboBoxEditor#removeActionListener(ActionListener):::Remove an ActionListener:::
ComboBoxModel#setSelectedItem(Object):::Set the selected item:::
ComboBoxModel#getSelectedItem():::Returns the selected item:::
ComponentInputMap#setParent(InputMap):::Sets the parent, which must be a ComponentInputMap associated with the same component as this ComponentInputMap.:::if->getParent->return->if->getComponent->getComponent->throw->new->IllegalArgumentException->super->setParent->getComponent->componentInputMapChanged
ComponentInputMap#getComponent():::Returns the component the InputMap was created for.:::return
ComponentInputMap#put(KeyStroke, Object):::Adds a binding for keyStroke to actionMapKey:::super->put->if->getComponent->getComponent->componentInputMapChanged
ComponentInputMap#remove(KeyStroke):::Removes the binding for key from this object.:::super->remove->if->getComponent->getComponent->componentInputMapChanged
ComponentInputMap#clear():::Removes all the mappings from this object.:::oldSize->size->super->clear->if->getComponent->getComponent->componentInputMapChanged
DebugGraphics#create():::Overrides Graphics.create to return a DebugGraphics object.:::debugGraphics->new->DebugGraphics->graphics->create->return
DebugGraphics#create(int, int, int, int):::Overrides Graphics.create to return a DebugGraphics object.:::debugGraphics->new->DebugGraphics->graphics->create->return
DebugGraphics#setFlashColor(Color):::Sets the Color used to flash drawing operations.:::info
DebugGraphics#flashColor():::Returns the Color used to flash drawing operations.:::return->info
DebugGraphics#setFlashTime(int):::Sets the time delay of drawing operation flashing.:::info
DebugGraphics#flashTime():::Returns the time delay of drawing operation flashing.:::return->info
DebugGraphics#setFlashCount(int):::Sets the number of times that drawing operations will flash.:::info
DebugGraphics#flashCount():::Returns the number of times that drawing operations will flash.:::return->info
DebugGraphics#setLogStream(java.io.PrintStream):::Sets the stream to which the DebugGraphics logs drawing operations.:::info
DebugGraphics#logStream():::Returns the stream to which the DebugGraphics logs drawing operations.:::return->info
DebugGraphics#setFont(Font):::Sets the Font used for text drawing operations.:::if->debugLog->info->toShortString->log->graphics->setFont
DebugGraphics#getFont():::Returns the Font used for text drawing operations.:::return->graphics->getFont
DebugGraphics#setColor(Color):::Sets the color to be used for drawing and filling lines and shapes.:::if->debugLog->info->toShortString->log->graphics->setColor
DebugGraphics#getColor():::Returns the Color used for text drawing operations.:::return->graphics->getColor
DebugGraphics#getFontMetrics():::Overrides Graphics.getFontMetrics.:::return->graphics->getFontMetrics
DebugGraphics#getFontMetrics(Font):::Overrides Graphics.getFontMetrics.:::return->graphics->getFontMetrics
DebugGraphics#translate(int, int):::Overrides Graphics.translate.:::if->debugLog->info->toShortString->new->Point->log->graphics->translate
DebugGraphics#setPaintMode():::Overrides Graphics.setPaintMode.:::if->debugLog->info->toShortString->log->graphics->setPaintMode
DebugGraphics#setXORMode(Color):::Overrides Graphics.setXORMode.:::if->debugLog->info->toShortString->log->graphics->setXORMode
DebugGraphics#getClipBounds():::Overrides Graphics.getClipBounds.:::return->graphics->getClipBounds
DebugGraphics#clipRect(int, int, int, int):::Overrides Graphics.clipRect.:::graphics->clipRect->if->debugLog->info->toShortString->new->Rectangle->graphics->getClip->log
DebugGraphics#setClip(int, int, int, int):::Overrides Graphics.setClip.:::graphics->setClip->if->debugLog->info->toShortString->graphics->getClip->log
DebugGraphics#getClip():::Overrides Graphics.getClip.:::return->graphics->getClip
DebugGraphics#setClip(Shape):::Overrides Graphics.setClip.:::graphics->setClip->if->debugLog->info->toShortString->graphics->getClip->log
DebugGraphics#drawRect(int, int, int, int):::Overrides Graphics.drawRect.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawRect->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawRect
DebugGraphics#fillRect(int, int, int, int):::Overrides Graphics.fillRect.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->fillRect->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->fillRect
DebugGraphics#clearRect(int, int, int, int):::Overrides Graphics.clearRect.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->clearRect->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->clearRect
DebugGraphics#drawRoundRect(int, int, int, int, int, int):::Overrides Graphics.drawRoundRect.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawRoundRect->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawRoundRect
DebugGraphics#fillRoundRect(int, int, int, int, int, int):::Overrides Graphics.fillRoundRect.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->fillRoundRect->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->fillRoundRect
DebugGraphics#drawLine(int, int, int, int):::Overrides Graphics.drawLine.:::info->info->if->debugLog->info->toShortString->pointToString->pointToString->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawLine->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawLine
DebugGraphics#draw3DRect(int, int, int, int, boolean):::Overrides Graphics.draw3DRect.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->draw3DRect->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->draw3DRect
DebugGraphics#fill3DRect(int, int, int, int, boolean):::Overrides Graphics.fill3DRect.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->fill3DRect->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->fill3DRect
DebugGraphics#drawOval(int, int, int, int):::Overrides Graphics.drawOval.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawOval->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawOval
DebugGraphics#fillOval(int, int, int, int):::Overrides Graphics.fillOval.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->fillOval->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->fillOval
DebugGraphics#drawArc(int, int, int, int, int, int):::Overrides Graphics.drawArc.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawArc->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawArc
DebugGraphics#fillArc(int, int, int, int, int, int):::Overrides Graphics.fillArc.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->fillArc->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->fillArc
DebugGraphics#drawPolyline(int[], int[], int):::Overrides Graphics.drawPolyline.:::info->info->if->debugLog->info->toShortString->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawPolyline->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawPolyline
DebugGraphics#drawPolygon(int[], int[], int):::Overrides Graphics.drawPolygon.:::info->info->if->debugLog->info->toShortString->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawPolygon->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawPolygon
DebugGraphics#fillPolygon(int[], int[], int):::Overrides Graphics.fillPolygon.:::info->info->if->debugLog->info->toShortString->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->fillPolygon->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->fillPolygon
DebugGraphics#drawString(String, int, int):::Overrides Graphics.drawString.:::info->info->if->debugLog->info->toShortString->new->Point->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawString->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawString
DebugGraphics#drawString(AttributedCharacterIterator, int, int):::Overrides Graphics.drawString.:::info->info->if->debugLog->info->toShortString->new->Point->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawString->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawString
DebugGraphics#drawBytes(byte[], int, int, int, int):::Overrides Graphics.drawBytes.:::info->info->font->graphics->getFont->if->debugLog->info->toShortString->new->Point->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawBytes->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawBytes
DebugGraphics#drawChars(char[], int, int, int, int):::Overrides Graphics.drawChars.:::info->info->font->graphics->getFont->if->debugLog->info->toShortString->new->Point->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawChars->debugGraphics->dispose->else->if->debugFlash->oldColor->getColor->i->count->for->graphics->setColor->graphics->drawChars
DebugGraphics#drawImage(Image, int, int, ImageObserver):::Overrides Graphics.drawImage.:::info->info->if->debugLog->info->toShortString->new->Point->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawImage->debugGraphics->dispose->else->if->debugFlash->i->count->oldProducer->img->getSource->newProducer->new->DebugGraphicsFilter->new->FilteredImageSource->newImage->Toolkit->getDefaultToolkit->createImage->imageObserver->new->DebugGraphicsObserver->imageToDraw->for->return->graphics->drawImage
DebugGraphics#drawImage(Image, int, int, int, int, ImageObserver):::Overrides Graphics.drawImage.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawImage->debugGraphics->dispose->else->if->debugFlash->i->count->oldProducer->img->getSource->newProducer->new->DebugGraphicsFilter->new->FilteredImageSource->newImage->Toolkit->getDefaultToolkit->createImage->imageObserver->new->DebugGraphicsObserver->imageToDraw->for->return->graphics->drawImage
DebugGraphics#drawImage(Image, int, int, Color, ImageObserver):::Overrides Graphics.drawImage.:::info->info->if->debugLog->info->toShortString->new->Point->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawImage->debugGraphics->dispose->else->if->debugFlash->i->count->oldProducer->img->getSource->newProducer->new->DebugGraphicsFilter->new->FilteredImageSource->newImage->Toolkit->getDefaultToolkit->createImage->imageObserver->new->DebugGraphicsObserver->imageToDraw->for->return->graphics->drawImage
DebugGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver):::Overrides Graphics.drawImage.:::info->info->if->debugLog->info->toShortString->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawImage->debugGraphics->dispose->else->if->debugFlash->i->count->oldProducer->img->getSource->newProducer->new->DebugGraphicsFilter->new->FilteredImageSource->newImage->Toolkit->getDefaultToolkit->createImage->imageObserver->new->DebugGraphicsObserver->imageToDraw->for->return->graphics->drawImage
DebugGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Overrides Graphics.drawImage.:::info->info->if->debugLog->info->toShortString->new->Rectangle->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawImage->debugGraphics->dispose->else->if->debugFlash->i->count->oldProducer->img->getSource->newProducer->new->DebugGraphicsFilter->new->FilteredImageSource->newImage->Toolkit->getDefaultToolkit->createImage->imageObserver->new->DebugGraphicsObserver->imageToDraw->for->return->graphics->drawImage
DebugGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Overrides Graphics.drawImage.:::info->info->if->debugLog->info->toShortString->new->Rectangle->new->Rectangle->log->if->isDrawingBuffer->if->debugBuffered->debugGraphics->debugGraphics->debugGraphics->drawImage->debugGraphics->dispose->else->if->debugFlash->i->count->oldProducer->img->getSource->newProducer->new->DebugGraphicsFilter->new->FilteredImageSource->newImage->Toolkit->getDefaultToolkit->createImage->imageObserver->new->DebugGraphicsObserver->imageToDraw->for->return->graphics->drawImage
DebugGraphics#loadImage(Image)::: debug graphics load image:::imageLoadingIcon->loadImage
DebugGraphics#copyArea(int, int, int, int, int, int):::Overrides Graphics.copyArea.:::if->debugLog->info->toShortString->new->Rectangle->new->Point->log->graphics->copyArea
DebugGraphics#sleep(int)::: debug graphics sleep:::try->Thread->sleep->catch->finally
DebugGraphics#dispose():::Overrides Graphics.dispose.:::graphics->dispose
DebugGraphics#isDrawingBuffer():::Returns the drawingBuffer value.:::return
DebugGraphics#toShortString()::: debug graphics to short string:::return->isDrawingBuffer
DebugGraphics#pointToString(int, int)::: debug graphics point to string:::return
DebugGraphics#setDebugOptions(int):::Enables/disables diagnostic information about every graphics operation:::if->if->if->toShortString->println->else->if->if->debugLog->toShortString->println
DebugGraphics#getDebugOptions():::Returns the current debugging options for this DebugGraphics.:::return
DebugGraphics#setDebugOptions(JComponent, int):::Static wrapper method for DebugGraphicsInfo.setDebugOptions():::info->setDebugOptions
DebugGraphics#getDebugOptions(JComponent):::Static wrapper method for DebugGraphicsInfo.getDebugOptions().:::debugGraphicsInfo->info->if->return->else->return->debugGraphicsInfo->getDebugOptions
DebugGraphics#shouldComponentDebug(JComponent):::Returns non-zero if component should display with DebugGraphics, zero otherwise:::info->info->if->return->else->container->debugOptions->while->info->getDebugOptions->container->getParent->return
DebugGraphics#debugComponentCount():::Returns the number of JComponents that have debugging options turned on.:::debugGraphicsInfo->info->if->return->size->else->return
DebugGraphics#debugLog()::: debug graphics debug log:::return
DebugGraphics#debugFlash()::: debug graphics debug flash:::return
DebugGraphics#debugBuffered()::: debug graphics debug buffered:::return
DebugGraphics#debugGraphics():::Returns a DebugGraphics for use in buffering window.:::debugGraphics->info->info->debugFrame->if->new->JFrame->setSize->debugFrame->show->debugFrame->getGraphics->new->DebugGraphics->debugGraphics->getFont->setFont->debugGraphics->getColor->setColor->debugGraphics->translate->debugGraphics->getClipBounds->setClip->if->debugFlash->debugGraphics->setDebugOptions->return
DebugGraphics#info():::Returns DebugGraphicsInfo, or creates one if none exists.:::debugGraphicsInfo->SwingUtilities->appContextGet->if->new->DebugGraphicsInfo->SwingUtilities->appContextPut->return
DebugGraphicsFilter#filterRGB(int, int, int)::: debug graphics filter filter b:::return->color->getRGB
DebugGraphicsInfo#setDebugOptions(JComponent, int)::: debug graphics info set debug options:::if->return->if->new->Hashtable<JComponent,Integer>->if->componentToDebug->Integer->valueOf->put->else->componentToDebug->remove
DebugGraphicsInfo#getDebugOptions(JComponent)::: debug graphics info get debug options:::if->return->else->integer->componentToDebug->get->return->integer->intValue
DebugGraphicsInfo#log(String)::: debug graphics info log:::stream->println
DebugGraphicsObserver#allBitsPresent()::: debug graphics observer all bits present:::return
DebugGraphicsObserver#imageHasProblem()::: debug graphics observer image has problem:::return
DebugGraphicsObserver#imageUpdate(Image, int, int, int, int, int)::: debug graphics observer image update:::return
DefaultBoundedRangeModel#getValue():::Returns the model's current value.:::return
DefaultBoundedRangeModel#getExtent():::Returns the model's extent.:::return
DefaultBoundedRangeModel#getMinimum():::Returns the model's minimum.:::return
DefaultBoundedRangeModel#getMaximum():::Returns the model's maximum.:::return
DefaultBoundedRangeModel#setValue(int):::Sets the current value of the model:::Math->min->newValue->Math->max->if->setRangeProperties
DefaultBoundedRangeModel#setExtent(int):::Sets the extent to n after ensuring that n is greater than or equal to zero and falls within the model's constraints:      minimum &lt;= value &lt;= value+extent &lt;= maximum :::newExtent->Math->max->if->setRangeProperties
DefaultBoundedRangeModel#setMinimum(int):::Sets the minimum to n after ensuring that n that the other three properties obey the model's constraints:      minimum &lt;= value &lt;= value+extent &lt;= maximum :::newMax->Math->max->newValue->Math->max->newExtent->Math->min->setRangeProperties
DefaultBoundedRangeModel#setMaximum(int):::Sets the maximum to n after ensuring that n that the other three properties obey the model's constraints:      minimum &lt;= value &lt;= value+extent &lt;= maximum :::newMin->Math->min->newExtent->Math->min->newValue->Math->min->setRangeProperties
DefaultBoundedRangeModel#setValueIsAdjusting(boolean):::Sets the valueIsAdjusting property.:::setRangeProperties
DefaultBoundedRangeModel#getValueIsAdjusting():::Returns true if the value is in the process of changing as a result of actions being taken by the user.:::return
DefaultBoundedRangeModel#setRangeProperties(int, int, int, int, boolean):::Sets all of the BoundedRangeModel properties after forcing the arguments to obey the usual constraints:      minimum &lt;= value &lt;= value+extent &lt;= maximum   At most, one ChangeEvent is generated.:::if->if->if->if->if->isChange->if->fireStateChanged
DefaultBoundedRangeModel#addChangeListener(ChangeListener):::Adds a ChangeListener:::listenerList->add
DefaultBoundedRangeModel#removeChangeListener(ChangeListener):::Removes a ChangeListener.:::listenerList->remove
DefaultBoundedRangeModel#getChangeListeners():::Returns an array of all the change listeners registered on this DefaultBoundedRangeModel.:::return->listenerList->getListeners
DefaultBoundedRangeModel#fireStateChanged():::Runs each ChangeListener's stateChanged method.:::listeners->listenerList->getListenerList->for->i
DefaultBoundedRangeModel#toString():::Returns a string that displays all of the BoundedRangeModel properties.:::modelString->getValue->getExtent->getMinimum->getMaximum->getValueIsAdjusting->return->getClass->getName
DefaultBoundedRangeModel#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this model:::return->listenerList->getListeners
DefaultButtonModel#setActionCommand(String)::: default button model set action command:::
DefaultButtonModel#getActionCommand()::: default button model get action command:::return
DefaultButtonModel#isArmed()::: default button model is armed:::return
DefaultButtonModel#isSelected()::: default button model is selected:::return
DefaultButtonModel#isEnabled()::: default button model is enabled:::return
DefaultButtonModel#isPressed()::: default button model is pressed:::return
DefaultButtonModel#isRollover()::: default button model is rollover:::return
DefaultButtonModel#setArmed(boolean)::: default button model set armed:::if->isMenuItem->UIManager->getBoolean->if->isArmed->return->else->if->isArmed->isEnabled->return->if->else->fireStateChanged
DefaultButtonModel#setEnabled(boolean)::: default button model set enabled:::if->isEnabled->return->if->else->fireStateChanged
DefaultButtonModel#setSelected(boolean)::: default button model set selected:::if->this->isSelected->return->if->else->new->ItemEvent->fireItemStateChanged->fireStateChanged
DefaultButtonModel#setPressed(boolean)::: default button model set pressed:::if->isPressed->isEnabled->return->if->else->if->isPressed->isArmed->modifiers->currentEvent->EventQueue->getCurrentEvent->if->getModifiers->else->if->getModifiers->getActionCommand->EventQueue->getMostRecentEventTime->new->ActionEvent->fireActionPerformed->fireStateChanged
DefaultButtonModel#setRollover(boolean)::: default button model set rollover:::if->isRollover->isEnabled->return->if->else->fireStateChanged
DefaultButtonModel#setMnemonic(int)::: default button model set mnemonic:::fireStateChanged
DefaultButtonModel#getMnemonic()::: default button model get mnemonic:::return
DefaultButtonModel#addChangeListener(ChangeListener)::: default button model add change listener:::listenerList->add
DefaultButtonModel#removeChangeListener(ChangeListener)::: default button model remove change listener:::listenerList->remove
DefaultButtonModel#getChangeListeners():::Returns an array of all the change listeners registered on this DefaultButtonModel.:::return->listenerList->getListeners
DefaultButtonModel#fireStateChanged():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
DefaultButtonModel#addActionListener(ActionListener)::: default button model add action listener:::listenerList->add
DefaultButtonModel#removeActionListener(ActionListener)::: default button model remove action listener:::listenerList->remove
DefaultButtonModel#getActionListeners():::Returns an array of all the action listeners registered on this DefaultButtonModel.:::return->listenerList->getListeners
DefaultButtonModel#fireActionPerformed(ActionEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
DefaultButtonModel#addItemListener(ItemListener)::: default button model add item listener:::listenerList->add
DefaultButtonModel#removeItemListener(ItemListener)::: default button model remove item listener:::listenerList->remove
DefaultButtonModel#getItemListeners():::Returns an array of all the item listeners registered on this DefaultButtonModel.:::return->listenerList->getListeners
DefaultButtonModel#fireItemStateChanged(ItemEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
DefaultButtonModel#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this model:::return->listenerList->getListeners
DefaultButtonModel#getSelectedObjects():::Overridden to return null.:::return
DefaultButtonModel#setGroup(ButtonGroup)::: default button model set group:::
DefaultButtonModel#getGroup():::Returns the group that the button belongs to:::return
DefaultButtonModel#isMenuItem()::: default button model is menu item:::return
DefaultButtonModel#setMenuItem(boolean)::: default button model set menu item:::
DefaultCellEditor#getComponent():::Returns a reference to the editor component.:::return
DefaultCellEditor#setClickCountToStart(int):::Specifies the number of clicks needed to start editing.:::
DefaultCellEditor#getClickCountToStart():::Returns the number of clicks needed to start editing.:::return
DefaultCellEditor#getCellEditorValue():::Forwards the message from the CellEditor to the delegate.:::return->delegate->getCellEditorValue
DefaultCellEditor#isCellEditable(EventObject):::Forwards the message from the CellEditor to the delegate.:::return->delegate->isCellEditable
DefaultCellEditor#shouldSelectCell(EventObject):::Forwards the message from the CellEditor to the delegate.:::return->delegate->shouldSelectCell
DefaultCellEditor#stopCellEditing():::Forwards the message from the CellEditor to the delegate.:::return->delegate->stopCellEditing
DefaultCellEditor#cancelCellEditing():::Forwards the message from the CellEditor to the delegate.:::delegate->cancelCellEditing
DefaultCellEditor#getTreeCellEditorComponent(JTree, Object, boolean, boolean, boolean, int):::Implements the TreeCellEditor interface.:::stringValue->tree->convertValueToText->delegate->setValue->return
DefaultCellEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int):::Implements the TableCellEditor interface.:::delegate->setValue->if->renderer->table->getCellRenderer->c->renderer->getTableCellRendererComponent->if->editorComponent->setOpaque->editorComponent->c->getBackground->setBackground->if->editorComponent->getBorder->setBorder->else->editorComponent->setOpaque->return
DefaultCellEditor.EditorDelegate#getCellEditorValue():::Returns the value of this cell.:::return
DefaultCellEditor.EditorDelegate#setValue(Object):::Sets the value of this cell.:::
DefaultCellEditor.EditorDelegate#isCellEditable(EventObject):::Returns true if anEvent is not a MouseEvent:::if->return->getClickCount->return
DefaultCellEditor.EditorDelegate#shouldSelectCell(EventObject):::Returns true to indicate that the editing cell may be selected.:::return
DefaultCellEditor.EditorDelegate#startCellEditing(EventObject):::Returns true to indicate that editing has begun.:::return
DefaultCellEditor.EditorDelegate#stopCellEditing():::Stops editing and returns true to indicate that editing has stopped:::fireEditingStopped->return
DefaultCellEditor.EditorDelegate#cancelCellEditing():::Cancels editing:::fireEditingCanceled
DefaultCellEditor.EditorDelegate#actionPerformed(ActionEvent):::When an action is performed, editing is ended.:::DefaultCellEditor.this->stopCellEditing
DefaultCellEditor.EditorDelegate#itemStateChanged(ItemEvent):::When an item's state changes, editing is ended.:::DefaultCellEditor.this->stopCellEditing
DefaultComboBoxModel#setSelectedItem(Object):::Set the value of the selected item:::if->selectedObject->equals->fireContentsChanged
DefaultComboBoxModel#getSelectedItem()::: default combo box model get selected item:::return
DefaultComboBoxModel#getSize()::: default combo box model get size:::return->objects->size
DefaultComboBoxModel#getElementAt(int)::: default combo box model get element at:::if->objects->size->return->objects->elementAt->else->return
DefaultComboBoxModel#getIndexOf(Object):::Returns the index-position of the specified object in the list.:::return->objects->indexOf
DefaultComboBoxModel#addElement(E)::: default combo box model add element:::objects->addElement->objects->size->objects->size->fireIntervalAdded->if->objects->size->setSelectedItem
DefaultComboBoxModel#insertElementAt(E, int)::: default combo box model insert element at:::objects->insertElementAt->fireIntervalAdded
DefaultComboBoxModel#removeElementAt(int)::: default combo box model remove element at:::if->getElementAt->if->getSize->getElementAt->setSelectedItem->else->getElementAt->setSelectedItem->objects->removeElementAt->fireIntervalRemoved
DefaultComboBoxModel#removeElement(Object)::: default combo box model remove element:::index->objects->indexOf->if->removeElementAt
DefaultComboBoxModel#removeAllElements():::Empties the list.:::if->objects->size->firstIndex->lastIndex->objects->size->objects->removeAllElements->fireIntervalRemoved->else
DefaultComboBoxModel#addAll(Collection):::Adds all of the elements present in the collection.:::if->c->isEmpty->return->startIndex->getSize->objects->addAll->getSize->fireIntervalAdded
DefaultComboBoxModel#addAll(int, Collection):::Adds all of the elements present in the collection, starting from the specified index.:::if->getSize->throw->new->ArrayIndexOutOfBoundsException->if->c->isEmpty->return->objects->addAll->c->size->fireIntervalAdded
DefaultDesktopManager#openFrame(JInternalFrame):::Normally this method will not be called:::if->f->getDesktopIcon->getParent->f->getDesktopIcon->getParent->add->removeIconFor
DefaultDesktopManager#closeFrame(JInternalFrame):::Removes the frame, and, if necessary, the desktopIcon, from its parent.:::d->f->getDesktopPane->if->return->findNext->f->isSelected->c->f->getParent->nextFrame->if->d->getNextFrame->try->f->setSelected->catch->finally->if->c->remove->c->f->getX->f->getY->f->getWidth->f->getHeight->repaint->removeIconFor->if->f->getNormalBounds->f->setNormalBounds->if->wasIcon->setWasIcon->if->try->nextFrame->setSelected->catch->finally->else->if->d->getComponentCount->d->requestFocus
DefaultDesktopManager#maximizeFrame(JInternalFrame):::Resizes the frame to fill its parents bounds.:::if->f->isIcon->try->f->setIcon->catch->finally->else->c->f->getParent->if->return->f->f->getBounds->setNormalBounds->desktopBounds->c->getBounds->setBoundsForFrame->try->f->setSelected->catch->finally
DefaultDesktopManager#minimizeFrame(JInternalFrame):::Restores the frame back to its size and position prior to a maximizeFrame call.:::if->f->isIcon->iconifyFrame->return->if->f->getNormalBounds->r->f->getNormalBounds->f->setNormalBounds->try->f->setSelected->catch->finally->setBoundsForFrame
DefaultDesktopManager#iconifyFrame(JInternalFrame):::Removes the frame from its parent and adds its desktopIcon to the parent.:::desktopIcon->c->f->getParent->d->f->getDesktopPane->findNext->f->isSelected->f->getDesktopIcon->if->wasIcon->r->getBoundsForIconOf->desktopIcon->setBounds->desktopIcon->revalidate->setWasIcon->if->return->if->lp->layer->JLayeredPane->getLayer->JLayeredPane->putLayer->d->setComponentOrderCheckingEnabled->c->remove->c->add->if->if->d->selectFrame->f->restoreSubcomponentFocus->c->f->getX->f->getY->f->getWidth->f->getHeight->repaint
DefaultDesktopManager#deiconifyFrame(JInternalFrame):::Removes the desktopIcon from its parent and adds its frame to the parent.:::desktopIcon->f->getDesktopIcon->c->desktopIcon->getParent->d->f->getDesktopPane->if->c->add->if->f->isMaximum->desktopBounds->c->getBounds->if->f->getWidth->f->getHeight->setBoundsForFrame->removeIconFor->if->f->isSelected->f->moveToFront->f->restoreSubcomponentFocus->else->try->f->setSelected->catch->finally
DefaultDesktopManager#activateFrame(JInternalFrame):::This will activate f moving it to the front:::p->f->getParent->c->d->f->getDesktopPane->currentlyActiveFrame->d->getSelectedFrame->if->f->getDesktopIcon->getParent->if->return->if->if->d->setSelectedFrame->else->if->if->currentlyActiveFrame->isSelected->try->currentlyActiveFrame->setSelected->catch->finally->if->d->setSelectedFrame->f->moveToFront
DefaultDesktopManager#deactivateFrame(JInternalFrame)::: default desktop manager deactivate frame:::d->f->getDesktopPane->currentlyActiveFrame->d->getSelectedFrame->if->d->setSelectedFrame
DefaultDesktopManager#beginDraggingFrame(JComponent)::: default desktop manager begin dragging frame:::setupDragMode->if->desktop->f->getParent->findFloatingItems->f->getBounds->if->getVisibleRect->else->desktop->getBounds->JComponent->safelyGetGraphics
DefaultDesktopManager#setupDragMode(JComponent)::: default desktop manager setup drag mode:::p->getDesktopPane->parent->f->getParent->if->mode->p->getClientProperty->window->SwingUtilities->getWindowAncestor->if->window->isOpaque->else->if->mode->equals->else->if->mode->equals->isOpaque->parent->isOpaque->else->if->p->getDragMode->else->if->p->getDragMode->isOpaque->else
DefaultDesktopManager#dragFrame(JComponent, int, int):::Moves the visible location of the frame being dragged to the location specified:::if->desktopPane->getDesktopPane->if->g->JComponent->safelyGetGraphics->g->setXORMode->if->g->f->getWidth->f->getHeight->drawRect->g->f->getWidth->f->getHeight->drawRect->sData->getSurfaceData->if->sData->isSurfaceLost->new->Point->g->dispose->else->if->dragFrameFaster->else->f->getWidth->f->getHeight->setBoundsForFrame
DefaultDesktopManager#endDraggingFrame(JComponent)::: default desktop manager end dragging frame:::if->f->getWidth->f->getHeight->setBoundsForFrame->else->if->if->desktopGraphics->dispose
DefaultDesktopManager#beginResizingFrame(JComponent, int)::: default desktop manager begin resizing frame:::setupDragMode
DefaultDesktopManager#resizeFrame(JComponent, int, int, int, int):::Calls setBoundsForFrame with the new values.:::if->setBoundsForFrame->else->desktopPane->getDesktopPane->if->g->JComponent->safelyGetGraphics->g->setXORMode->if->g->drawRect->g->drawRect->sData->getSurfaceData->if->sData->isSurfaceLost->new->Rectangle->g->setPaintMode->g->dispose
DefaultDesktopManager#endResizingFrame(JComponent)::: default desktop manager end resizing frame:::if->setBoundsForFrame
DefaultDesktopManager#setBoundsForFrame(JComponent, int, int, int, int):::This moves the JComponent and repaints the damaged areas.:::f->setBounds->f->revalidate
DefaultDesktopManager#removeIconFor(JInternalFrame):::Convenience method to remove the desktopIcon of f is necessary.:::di->f->getDesktopIcon->c->di->getParent->if->c->remove->c->di->getX->di->getY->di->getWidth->di->getHeight->repaint
DefaultDesktopManager#getBoundsForIconOf(JInternalFrame):::The iconifyFrame() code calls this to determine the proper bounds for the desktopIcon.:::icon->f->getDesktopIcon->prefSize->icon->getPreferredSize->c->f->getParent->if->f->getDesktopIcon->getParent->if->return->new->Rectangle->parentBounds->c->getBounds->components->c->getComponents->availableRectangle->currentIcon->x->y->w->h->found->while->new->Rectangle->for->i->if->return->currentIcon->getBounds->if->return
DefaultDesktopManager#setPreviousBounds(JInternalFrame, Rectangle):::Stores the bounds of the component just before a maximize call.:::f->setNormalBounds
DefaultDesktopManager#getPreviousBounds(JInternalFrame):::Gets the normal bounds of the component prior to the component being maximized.:::return->f->getNormalBounds
DefaultDesktopManager#setWasIcon(JInternalFrame, Boolean):::Sets that the component has been iconized and the bounds of the desktopIcon are valid.:::if->f->putClientProperty
DefaultDesktopManager#wasIcon(JInternalFrame):::Returns true if the component has been iconized and the bounds of the desktopIcon are valid, otherwise returns false.:::return->f->getClientProperty
DefaultDesktopManager#getDesktopPane(JComponent)::: default desktop manager get desktop pane:::pane->c->frame->getParent->while->if->else->if->break->else->c->getParent->return
DefaultDesktopManager#dragFrameFaster(JComponent, int, int)::: default desktop manager drag frame faster:::previousBounds->new->Rectangle->if->emergencyCleanup->else->floaterCollision->isFloaterCollision->parent->f->getParent->visBounds->previousBounds->intersection->currentManager->RepaintManager->currentManager->currentManager->beginPaint->try->if->currentManager->copyArea->f->setBounds->if->r->currentManager->notifyRepaintPerformed->if->parent->paintImmediately->currentManager->markCompletelyClean->currentManager->markCompletelyClean->dirtyRects->if->previousBounds->intersects->SwingUtilities->computeDifference->else->new->RectangleArr->for->i->if->visBounds->equals->SwingUtilities->computeDifference->for->i->catch->finally->currentManager->endPaint->topLevel->SwingUtilities->getWindowAncestor->tk->Toolkit->getDefaultToolkit->if->topLevel->isOpaque->needUpdateWindow->AWTAccessor->getWindowAccessor->updateWindow
DefaultDesktopManager#isFloaterCollision(Rectangle, Rectangle)::: default desktop manager is floater collision:::if->return->for->i->return
DefaultDesktopManager#findFloatingItems(JComponent)::: default desktop manager find floating items:::desktop->f->getParent->children->desktop->getComponents->i->for->floaters->new->RectangleArr->for->return
DefaultDesktopManager#emergencyCleanup(JComponent):::This method is here to clean up problems associated with a race condition which can occur when the full contents of a copyArea's source argument is not available onscreen:::if->SwingUtilities->new->Runnable->invokeLater
DefaultFocusManager#getComponentAfter(Container, Component):::Returns the component after.:::root->aContainer->isFocusCycleRoot->aContainer->getFocusCycleRootAncestor->if->policy->root->getFocusTraversalPolicy->if->return->policy->getComponentAfter->comparator->root->getComponentOrientation->setComponentOrientation->return->layoutPolicy->getComponentAfter->return
DefaultFocusManager#getComponentBefore(Container, Component):::Returns the component before.:::root->aContainer->isFocusCycleRoot->aContainer->getFocusCycleRootAncestor->if->policy->root->getFocusTraversalPolicy->if->return->policy->getComponentBefore->comparator->root->getComponentOrientation->setComponentOrientation->return->layoutPolicy->getComponentBefore->return
DefaultFocusManager#getFirstComponent(Container):::Returns the first component.:::root->aContainer->isFocusCycleRoot->aContainer->getFocusCycleRootAncestor->if->policy->root->getFocusTraversalPolicy->if->return->policy->getFirstComponent->comparator->root->getComponentOrientation->setComponentOrientation->return->layoutPolicy->getFirstComponent->return
DefaultFocusManager#getLastComponent(Container):::Returns the last component.:::root->aContainer->isFocusCycleRoot->aContainer->getFocusCycleRootAncestor->if->policy->root->getFocusTraversalPolicy->if->return->policy->getLastComponent->comparator->root->getComponentOrientation->setComponentOrientation->return->layoutPolicy->getLastComponent->return
DefaultFocusManager#compareTabOrder(Component, Component):::Compares the components by their focus traversal cycle order.:::return->comparator->compare
CompareTabOrderComparator#compare(Component, Component)::: compare tab order comparator compare:::if->return->return->defaultFocusManager->compareTabOrder
DefaultListCellRenderer#getNoFocusBorder()::: default list cell renderer get no focus border:::border->DefaultLookup->getBorder->if->System->getSecurityManager->if->return->return->else->if->return->return
DefaultListCellRenderer#getListCellRendererComponent(JList, Object, int, boolean, boolean)::: default list cell renderer get list cell renderer component:::list->getComponentOrientation->setComponentOrientation->bg->fg->dropLocation->list->getDropLocation->if->dropLocation->isInsert->dropLocation->getIndex->DefaultLookup->getColor->DefaultLookup->getColor->if->list->getSelectionBackground->setBackground->list->getSelectionForeground->setForeground->else->list->getBackground->setBackground->list->getForeground->setForeground->if->setIcon->setText->else->setIcon->value->toString->setText->list->isEnabled->setEnabled->list->getFont->setFont->border->if->if->DefaultLookup->getBorder->if->DefaultLookup->getBorder->else->getNoFocusBorder->setBorder->return
DefaultListCellRenderer#isOpaque():::Overridden for performance reasons:::back->getBackground->p->getParent->if->p->getParent->colorMatch->back->p->getBackground->equals->p->isOpaque->return->super->isOpaque
DefaultListCellRenderer#validate():::Overridden for performance reasons:::
DefaultListCellRenderer#invalidate():::Overridden for performance reasons:::
DefaultListCellRenderer#repaint():::Overridden for performance reasons:::
DefaultListCellRenderer#revalidate():::Overridden for performance reasons:::
DefaultListCellRenderer#repaint(long, int, int, int, int):::Overridden for performance reasons:::
DefaultListCellRenderer#repaint(Rectangle):::Overridden for performance reasons:::
DefaultListCellRenderer#firePropertyChange(String, Object, Object):::Overridden for performance reasons:::if->SwingUtilities2->isScaleChanged->getClientProperty->super->firePropertyChange
DefaultListCellRenderer#firePropertyChange(String, byte, byte):::Overridden for performance reasons:::
DefaultListCellRenderer#firePropertyChange(String, char, char):::Overridden for performance reasons:::
DefaultListCellRenderer#firePropertyChange(String, short, short):::Overridden for performance reasons:::
DefaultListCellRenderer#firePropertyChange(String, int, int):::Overridden for performance reasons:::
DefaultListCellRenderer#firePropertyChange(String, long, long):::Overridden for performance reasons:::
DefaultListCellRenderer#firePropertyChange(String, float, float):::Overridden for performance reasons:::
DefaultListCellRenderer#firePropertyChange(String, double, double):::Overridden for performance reasons:::
DefaultListCellRenderer#firePropertyChange(String, boolean, boolean):::Overridden for performance reasons:::
DefaultListModel#getSize():::Returns the number of components in this list:::return->delegate->size
DefaultListModel#getElementAt(int):::Returns the component at the specified index:::return->delegate->elementAt
DefaultListModel#copyInto(Object[]):::Copies the components of this list into the specified array:::delegate->copyInto
DefaultListModel#trimToSize():::Trims the capacity of this list to be the list's current size.:::delegate->trimToSize
DefaultListModel#ensureCapacity(int):::Increases the capacity of this list, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.:::delegate->ensureCapacity
DefaultListModel#setSize(int):::Sets the size of this list.:::oldSize->delegate->size->delegate->setSize->if->fireIntervalRemoved->else->if->fireIntervalAdded
DefaultListModel#capacity():::Returns the current capacity of this list.:::return->delegate->capacity
DefaultListModel#size():::Returns the number of components in this list.:::return->delegate->size
DefaultListModel#isEmpty():::Tests whether this list has any components.:::return->delegate->isEmpty
DefaultListModel#elements():::Returns an enumeration of the components of this list.:::return->delegate->elements
DefaultListModel#contains(Object):::Tests whether the specified object is a component in this list.:::return->delegate->contains
DefaultListModel#indexOf(Object):::Searches for the first occurrence of elem.:::return->delegate->indexOf
DefaultListModel#indexOf(Object, int):::Searches for the first occurrence of elem, beginning the search at index.:::return->delegate->indexOf
DefaultListModel#lastIndexOf(Object):::Returns the index of the last occurrence of elem.:::return->delegate->lastIndexOf
DefaultListModel#lastIndexOf(Object, int):::Searches backwards for elem, starting from the specified index, and returns an index to it.:::return->delegate->lastIndexOf
DefaultListModel#elementAt(int):::Returns the component at the specified index:::return->delegate->elementAt
DefaultListModel#firstElement():::Returns the first component of this list.:::return->delegate->firstElement
DefaultListModel#lastElement():::Returns the last component of the list.:::return->delegate->lastElement
DefaultListModel#setElementAt(E, int):::Sets the component at the specified index of this list to be the specified element:::delegate->setElementAt->fireContentsChanged
DefaultListModel#removeElementAt(int):::Deletes the component at the specified index:::delegate->removeElementAt->fireIntervalRemoved
DefaultListModel#insertElementAt(E, int):::Inserts the specified element as a component in this list at the specified index:::delegate->insertElementAt->fireIntervalAdded
DefaultListModel#addElement(E):::Adds the specified component to the end of this list.:::index->delegate->size->delegate->addElement->fireIntervalAdded
DefaultListModel#removeElement(Object):::Removes the first (lowest-indexed) occurrence of the argument from this list.:::index->indexOf->rv->delegate->removeElement->if->fireIntervalRemoved->return
DefaultListModel#removeAllElements():::Removes all components from this list and sets its size to zero:::index1->delegate->size->delegate->removeAllElements->if->fireIntervalRemoved
DefaultListModel#toString():::Returns a string that displays and identifies this object's properties.:::return->delegate->toString
DefaultListModel#toArray():::Returns an array containing all of the elements in this list in the correct order.:::rv->delegate->size->new->ObjectArr->delegate->copyInto->return
DefaultListModel#get(int):::Returns the element at the specified position in this list.:::return->delegate->elementAt
DefaultListModel#set(int, E):::Replaces the element at the specified position in this list with the specified element.:::rv->delegate->elementAt->delegate->setElementAt->fireContentsChanged->return
DefaultListModel#add(int, E):::Inserts the specified element at the specified position in this list.:::delegate->insertElementAt->fireIntervalAdded
DefaultListModel#remove(int):::Removes the element at the specified position in this list:::rv->delegate->elementAt->delegate->removeElementAt->fireIntervalRemoved->return
DefaultListModel#clear():::Removes all of the elements from this list:::index1->delegate->size->delegate->removeAllElements->if->fireIntervalRemoved
DefaultListModel#removeRange(int, int):::Deletes the components at the specified range of indexes:::if->throw->new->IllegalArgumentException->for->i->fireIntervalRemoved
DefaultListModel#addAll(Collection):::Adds all of the elements present in the collection to the list.:::if->c->isEmpty->return->startIndex->getSize->delegate->addAll->getSize->fireIntervalAdded
DefaultListModel#addAll(int, Collection):::Adds all of the elements present in the collection, starting from the specified index.:::if->getSize->throw->new->ArrayIndexOutOfBoundsException->if->c->isEmpty->return->delegate->addAll->c->size->fireIntervalAdded
DefaultListSelectionModel#getMinSelectionIndex()::: default list selection model get min selection index:::return->isSelectionEmpty
DefaultListSelectionModel#getMaxSelectionIndex()::: default list selection model get max selection index:::return
DefaultListSelectionModel#getValueIsAdjusting()::: default list selection model get value is adjusting:::return
DefaultListSelectionModel#getSelectionMode()::: default list selection model get selection mode:::return
DefaultListSelectionModel#setSelectionMode(int)::: default list selection model set selection mode:::oldMode->switch->break->throw->new->IllegalArgumentException->if->if->if->isSelectionEmpty->setSelectionInterval->else->if->if->isSelectionEmpty->selectionEndindex->while->value->get->setSelectionInterval
DefaultListSelectionModel#isSelectedIndex(int)::: default list selection model is selected index:::return->value->get
DefaultListSelectionModel#isSelectionEmpty()::: default list selection model is selection empty:::return
DefaultListSelectionModel#addListSelectionListener(ListSelectionListener)::: default list selection model add list selection listener:::listenerList->add
DefaultListSelectionModel#removeListSelectionListener(ListSelectionListener)::: default list selection model remove list selection listener:::listenerList->remove
DefaultListSelectionModel#getListSelectionListeners():::Returns an array of all the list selection listeners registered on this DefaultListSelectionModel.:::return->listenerList->getListeners
DefaultListSelectionModel#fireValueChanged(boolean):::Notifies listeners that we have ended a series of adjustments.:::if->return->oldFirstChangedIndex->oldLastChangedIndex->fireValueChanged
DefaultListSelectionModel#fireValueChanged(int, int):::Notifies ListSelectionListeners that the value of the selection, in the closed interval firstIndex, lastIndex, has changed.:::getValueIsAdjusting->fireValueChanged
DefaultListSelectionModel#fireValueChanged(int, int, boolean)::: default list selection model fire value changed:::listeners->listenerList->getListenerList->e->for->i
DefaultListSelectionModel#fireValueChanged()::: default list selection model fire value changed:::if->return->if->getValueIsAdjusting->Math->min->Math->max->oldFirstAdjustedIndex->oldLastAdjustedIndex->fireValueChanged
DefaultListSelectionModel#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this model:::return->listenerList->getListeners
DefaultListSelectionModel#markAsDirty(int)::: default list selection model mark as dirty:::if->return->Math->min->Math->max
DefaultListSelectionModel#set(int)::: default list selection model set:::if->value->get->return->value->set->markAsDirty->Math->min->Math->max
DefaultListSelectionModel#clear(int)::: default list selection model clear:::if->value->get->return->value->clear->markAsDirty->if->for->if->for->if->isSelectionEmpty
DefaultListSelectionModel#setLeadAnchorNotificationEnabled(boolean):::Sets the value of the leadAnchorNotificationEnabled flag.:::
DefaultListSelectionModel#isLeadAnchorNotificationEnabled():::Returns the value of the leadAnchorNotificationEnabled flag:::return
DefaultListSelectionModel#updateLeadAnchorIndices(int, int)::: default list selection model update lead anchor indices:::if->if->markAsDirty->markAsDirty->if->markAsDirty->markAsDirty
DefaultListSelectionModel#contains(int, int, int)::: default list selection model contains:::return
DefaultListSelectionModel#changeSelection(int, int, int, int, boolean)::: default list selection model change selection:::for->i->Math->min->Math->max->fireValueChanged
DefaultListSelectionModel#changeSelection(int, int, int, int):::Change the selection with the effect of first clearing the values in the inclusive range [clearMin, clearMax] then setting the values in the inclusive range [setMin, setMax]:::changeSelection
DefaultListSelectionModel#clearSelection()::: default list selection model clear selection:::removeSelectionIntervalImpl
DefaultListSelectionModel#setSelectionInterval(int, int):::Changes the selection to be between index0 and index1 inclusive:::if->return->if->getSelectionMode->updateLeadAnchorIndices->clearMin->clearMax->setMin->Math->min->setMax->Math->max->changeSelection
DefaultListSelectionModel#addSelectionInterval(int, int):::Changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive:::if->return->if->getSelectionMode->setSelectionInterval->return->updateLeadAnchorIndices->clearMin->clearMax->setMin->Math->min->setMax->Math->max->if->getSelectionMode->setSelectionInterval->return->changeSelection
DefaultListSelectionModel#removeSelectionInterval(int, int):::Changes the selection to be the set difference of the current selection and the indices between index0 and index1 inclusive:::removeSelectionIntervalImpl
DefaultListSelectionModel#removeSelectionIntervalImpl(int, int, boolean)::: default list selection model remove selection interval impl:::if->return->if->updateLeadAnchorIndices->clearMin->Math->min->clearMax->Math->max->setMin->setMax->if->getSelectionMode->changeSelection
DefaultListSelectionModel#setState(int, boolean)::: default list selection model set state:::if->set->else->clear
DefaultListSelectionModel#insertIndexInterval(int, int, boolean):::Insert length indices beginning before/after index:::insMinIndex->insMaxIndex->for->i->setInsertedValues->getSelectionMode->value->get->for->i->leadIndex->if->anchorIndex->if->if->updateLeadAnchorIndices->fireValueChanged
DefaultListSelectionModel#removeIndexInterval(int, int):::Remove the indices in the interval index0,index1 (inclusive) from the selection model:::rmMinIndex->Math->min->rmMaxIndex->Math->max->gapLength->for->i->leadIndex->if->else->if->else->if->anchorIndex->if->else->if->else->if->if->updateLeadAnchorIndices->fireValueChanged
DefaultListSelectionModel#setValueIsAdjusting(boolean)::: default list selection model set value is adjusting:::if->this->fireValueChanged
DefaultListSelectionModel#toString():::Returns a string that displays and identifies this object's properties.:::s->getValueIsAdjusting->value->toString->return->getClass->getName->Integer->hashCode->toString
DefaultListSelectionModel#clone():::Returns a clone of this selection model with the same selection:::clone->super->clone->value->clone->new->EventListenerList->return
DefaultListSelectionModel#getAnchorSelectionIndex()::: default list selection model get anchor selection index:::return
DefaultListSelectionModel#getLeadSelectionIndex()::: default list selection model get lead selection index:::return
DefaultListSelectionModel#setAnchorSelectionIndex(int):::Set the anchor selection index, leaving all selection values unchanged:::updateLeadAnchorIndices->fireValueChanged
DefaultListSelectionModel#moveLeadSelectionIndex(int):::Set the lead selection index, leaving all selection values unchanged:::if->if->return->updateLeadAnchorIndices->fireValueChanged
DefaultListSelectionModel#setLeadSelectionIndex(int):::Sets the lead selection index, ensuring that values between the anchor and the new lead are either all selected or all deselected:::anchorIndex->if->if->updateLeadAnchorIndices->fireValueChanged->return->else->if->return->if->shouldSelect->value->get->if->getSelectionMode->oldMin->Math->min->oldMax->Math->max->newMin->Math->min->newMax->Math->max->updateLeadAnchorIndices->if->changeSelection->else->changeSelection
DefaultRowSorter#setModelWrapper(ModelWrapper):::Sets the model wrapper providing the data that is being sorted and filtered.:::if->throw->new->IllegalArgumentException->last->if->modelStructureChanged->else->getModelWrapper->getRowCount
DefaultRowSorter#getModelWrapper():::Returns the model wrapper providing the data that is being sorted and filtered.:::return
DefaultRowSorter#getModel():::Returns the underlying model.:::return->getModelWrapper->getModel
DefaultRowSorter#setSortable(int, boolean):::Sets whether or not the specified column is sortable:::checkColumn->if->getModelWrapper->getColumnCount->new->booleanArr->for->i
DefaultRowSorter#isSortable(int):::Returns true if the specified column is sortable; otherwise, false.:::checkColumn->return
DefaultRowSorter#setSortKeys(List):::Sets the sort keys:::old->if->sortKeys->size->max->getModelWrapper->getColumnCount->foreach->if->key->getColumn->key->getColumn->throw->new->IllegalArgumentException->Collections->new->ArrayList<SortKey>->unmodifiableList->else->Collections->emptyList->if->equals->fireSortOrderChanged->if->sort->else->sortExistingData
DefaultRowSorter#getSortKeys():::Returns the current sort keys:::return
DefaultRowSorter#setMaxSortKeys(int):::Sets the maximum number of sort keys:::if->throw->new->IllegalArgumentException
DefaultRowSorter#getMaxSortKeys():::Returns the maximum number of sort keys.:::return
DefaultRowSorter#setSortsOnUpdates(boolean):::If true, specifies that a sort should happen when the underlying model is updated (rowsUpdated is invoked):::
DefaultRowSorter#getSortsOnUpdates():::Returns true if  a sort should happen when the underlying model is updated; otherwise, returns false.:::return
DefaultRowSorter#setRowFilter(RowFilter):::Sets the filter that determines which rows, if any, should be hidden from the view:::sort
DefaultRowSorter#getRowFilter():::Returns the filter that determines which rows, if any, should be hidden from view.:::return
DefaultRowSorter#toggleSortOrder(int):::Reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order:::checkColumn->if->isSortable->keys->getSortKeys->new->ArrayList<SortKey>->sortKey->sortIndex->for->keys->size->if->new->SortKey->keys->add->else->if->keys->keys->get->toggle->set->else->keys->remove->keys->new->SortKey->add->if->keys->size->getMaxSortKeys->keys->getMaxSortKeys->subList->setSortKeys
DefaultRowSorter#toggle(SortKey)::: default row sorter toggle:::if->key->getSortOrder->return->key->getColumn->new->SortKey->return->key->getColumn->new->SortKey
DefaultRowSorter#convertRowIndexToView(int)::: default row sorter convert row index to view:::if->return->convertUnsortedUnfiltered->return
DefaultRowSorter#convertRowIndexToModel(int)::: default row sorter convert row index to model:::if->return->convertUnsortedUnfiltered->return
DefaultRowSorter#convertUnsortedUnfiltered(int)::: default row sorter convert unsorted unfiltered:::if->if->getModelWrapper->getRowCount->if->println->else->throw->new->IndexOutOfBoundsException->return
DefaultRowSorter#isUnsorted()::: default row sorter is unsorted:::keys->getSortKeys->keySize->keys->size->return->keys->get->getSortOrder
DefaultRowSorter#sortExistingData():::Sorts the existing filtered data:::lastViewToModel->getViewToModelAsInts->updateUseToString->getSortKeys->cacheSortKeys->if->isUnsorted->if->getRowFilter->else->included->for->i->else->Arrays->sort->setModelToViewFromViewToModel->fireRowSorterChanged
DefaultRowSorter#sort():::Sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, associated with this sorter:::lastViewToModel->getViewToModelAsInts->updateUseToString->if->isUnsorted->new->SortKeyArr->if->getRowFilter->if->else->return->else->initializeFilteredMapping->else->getSortKeys->cacheSortKeys->if->getRowFilter->initializeFilteredMapping->else->getModelWrapper->getRowCount->createModelToView->getModelWrapper->getRowCount->createViewToModel->Arrays->sort->setModelToViewFromViewToModel->fireRowSorterChanged
DefaultRowSorter#updateUseToString():::Updates the useToString mapping before a sort.:::i->getModelWrapper->getColumnCount->if->new->booleanArr->for
DefaultRowSorter#initializeFilteredMapping():::Resets the viewToModel and modelToView mappings based on the current Filter.:::rowCount->getModelWrapper->getRowCount->i->j->excludedCount->createModelToView->for->createViewToModel->for
DefaultRowSorter#createModelToView(int):::Makes sure the modelToView array is of size rowCount.:::if->new->intArr
DefaultRowSorter#createViewToModel(int):::Resets the viewToModel array to be of size rowCount.:::recreateFrom->if->Math->min->if->oldViewToModel->new->RowArr->System->arraycopy->else->new->RowArr->i->for->for
DefaultRowSorter#cacheSortKeys(List):::Caches the sort keys before a sort.:::keySize->keys->size->new->Comparator<?>Arr->for->i->keys->new->SortKeyArr->toArray
DefaultRowSorter#useToString(int):::Returns whether or not to convert the value to a string before doing comparisons when sorting:::return->getComparator
DefaultRowSorter#setModelToViewFromViewToModel(boolean):::Refreshes the modelToView mapping from that of viewToModel:::i->if->for->for
DefaultRowSorter#getViewToModelAsInts(Row[])::: default row sorter get view to model as ints:::if->viewToModelI->new->intArr->for->i->return->return->new->intArr
DefaultRowSorter#setComparator(int, Comparator):::Sets the Comparator to use when sorting the specified column:::checkColumn->if->getModelWrapper->getColumnCount->new->Comparator<?>Arr
DefaultRowSorter#getComparator(int):::Returns the Comparator for the specified column:::checkColumn->if->return->return
DefaultRowSorter#getComparator0(int)::: default row sorter get comparator0:::comparator->getComparator->if->return->return->Collator->getInstance
DefaultRowSorter#getFilterEntry(int)::: default row sorter get filter entry:::if->new->FilterEntry->return
DefaultRowSorter#getViewRowCount()::: default row sorter get view row count:::if->return->return->Math->getModelWrapper->getRowCount->max
DefaultRowSorter#getModelRowCount()::: default row sorter get model row count:::return->getModelWrapper->getRowCount
DefaultRowSorter#allChanged()::: default row sorter all changed:::if->isUnsorted->sort->else->setSortKeys
DefaultRowSorter#modelStructureChanged()::: default row sorter model structure changed:::allChanged->getModelWrapper->getRowCount
DefaultRowSorter#allRowsChanged()::: default row sorter all rows changed:::getModelWrapper->getRowCount->sort
DefaultRowSorter#rowsInserted(int, int)::: default row sorter rows inserted:::checkAgainstModel->newModelRowCount->getModelWrapper->getRowCount->if->throw->new->IndexOutOfBoundsException->if->shouldOptimizeChange->rowsInserted0
DefaultRowSorter#rowsDeleted(int, int)::: default row sorter rows deleted:::checkAgainstModel->if->throw->new->IndexOutOfBoundsException->getModelWrapper->getRowCount->if->shouldOptimizeChange->rowsDeleted0
DefaultRowSorter#rowsUpdated(int, int)::: default row sorter rows updated:::checkAgainstModel->if->throw->new->IndexOutOfBoundsException->if->getSortsOnUpdates->if->shouldOptimizeChange->rowsUpdated0->else
DefaultRowSorter#rowsUpdated(int, int, int)::: default row sorter rows updated:::checkColumn->rowsUpdated
DefaultRowSorter#checkAgainstModel(int, int)::: default row sorter check against model:::if->throw->new->IndexOutOfBoundsException
DefaultRowSorter#include(int):::Returns true if the specified row should be included.:::filter->getRowFilter->if->return->filter->getFilterEntry->include->return
DefaultRowSorter#compare(int, int)::: default row sorter compare:::column->sortOrder->v1->v2->result->for->counter->return
DefaultRowSorter#isTransformed():::Whether not we are filtering/sorting.:::return
DefaultRowSorter#insertInOrder(List, Row[]):::Insets new set of entries.:::last->index->max->toAdd->size->for->i->System->arraycopy
DefaultRowSorter#shouldOptimizeChange(int, int):::Returns true if we should try and optimize the processing of the TableModelEvent:::if->isTransformed->return->if->sort->return->return
DefaultRowSorter#rowsInserted0(int, int)::: default row sorter rows inserted0:::oldViewToModel->getViewToModelAsInts->i->delta->added->new->ArrayList<Row>->for->viewIndex->for->if->added->size->Collections->sort->lastViewToModel->added->size->new->RowArr->insertInOrder->getModelWrapper->getRowCount->createModelToView->setModelToViewFromViewToModel->fireRowSorterChanged
DefaultRowSorter#rowsDeleted0(int, int)::: default row sorter rows deleted0:::oldViewToModel->getViewToModelAsInts->removedFromView->i->viewIndex->for->delta->for->if->newViewToModel->new->RowArr->newIndex->last->for->System->arraycopy->getModelWrapper->getRowCount->createModelToView->setModelToViewFromViewToModel->fireRowSorterChanged
DefaultRowSorter#rowsUpdated0(int, int)::: default row sorter rows updated0:::oldViewToModel->getViewToModelAsInts->i->j->delta->modelIndex->last->index->if->getRowFilter->updated->new->RowArr->for->Arrays->sort->intermediary->new->RowArr->for->Arrays->asList->insertInOrder->setModelToViewFromViewToModel->else->updated->new->ArrayList<Row>->newlyVisible->newlyHidden->effected->for->Collections->sort->intermediary->new->RowArr->for->if->new->RowArr->insertInOrder->setModelToViewFromViewToModel->fireRowSorterChanged
DefaultRowSorter#checkColumn(int)::: default row sorter check column:::if->getModelWrapper->getColumnCount->throw->new->IndexOutOfBoundsException
DefaultRowSorter.ModelWrapper#getModel():::Returns the underlying model that this Model is wrapping.:::
DefaultRowSorter.ModelWrapper#getColumnCount():::Returns the number of columns in the model.:::
DefaultRowSorter.ModelWrapper#getRowCount():::Returns the number of rows in the model.:::
DefaultRowSorter.ModelWrapper#getValueAt(int, int):::Returns the value at the specified index.:::
DefaultRowSorter.ModelWrapper#getStringValueAt(int, int):::Returns the value as a String at the specified index:::o->getValueAt->if->return->string->o->toString->if->return->return
DefaultRowSorter.ModelWrapper#getIdentifier(int):::Returns the identifier for the specified row:::
DefaultRowSorter.FilterEntry#getModel()::: filter entry get model:::return->getModelWrapper->getModel
DefaultRowSorter.FilterEntry#getValueCount()::: filter entry get value count:::return->getModelWrapper->getColumnCount
DefaultRowSorter.FilterEntry#getValue(int)::: filter entry get value:::return->getModelWrapper->getValueAt
DefaultRowSorter.FilterEntry#getStringValue(int)::: filter entry get string value:::return->getModelWrapper->getStringValueAt
DefaultRowSorter.FilterEntry#getIdentifier()::: filter entry get identifier:::return->getModelWrapper->getIdentifier
DefaultRowSorter.Row#compareTo(Row)::: row compare to:::return->sorter->compare
DefaultSingleSelectionModel#getSelectedIndex()::: default single selection model get selected index:::return
DefaultSingleSelectionModel#setSelectedIndex(int)::: default single selection model set selected index:::if->fireStateChanged
DefaultSingleSelectionModel#clearSelection()::: default single selection model clear selection:::setSelectedIndex
DefaultSingleSelectionModel#isSelected()::: default single selection model is selected:::ret->if->getSelectedIndex->return
DefaultSingleSelectionModel#addChangeListener(ChangeListener):::Adds a ChangeListener to the button.:::listenerList->add
DefaultSingleSelectionModel#removeChangeListener(ChangeListener):::Removes a ChangeListener from the button.:::listenerList->remove
DefaultSingleSelectionModel#getChangeListeners():::Returns an array of all the change listeners registered on this DefaultSingleSelectionModel.:::return->listenerList->getListeners
DefaultSingleSelectionModel#fireStateChanged():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
DefaultSingleSelectionModel#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this model:::return->listenerList->getListeners
DelegatingDefaultFocusManager#getDelegate()::: delegating default focus manager get delegate:::return
DelegatingDefaultFocusManager#processKeyEvent(Component, KeyEvent)::: delegating default focus manager process key event:::delegate->processKeyEvent
DelegatingDefaultFocusManager#focusNextComponent(Component)::: delegating default focus manager focus next component:::delegate->focusNextComponent
DelegatingDefaultFocusManager#focusPreviousComponent(Component)::: delegating default focus manager focus previous component:::delegate->focusPreviousComponent
DelegatingDefaultFocusManager#getFocusOwner()::: delegating default focus manager get focus owner:::return->delegate->getFocusOwner
DelegatingDefaultFocusManager#clearGlobalFocusOwner()::: delegating default focus manager clear global focus owner:::delegate->clearGlobalFocusOwner
DelegatingDefaultFocusManager#getPermanentFocusOwner()::: delegating default focus manager get permanent focus owner:::return->delegate->getPermanentFocusOwner
DelegatingDefaultFocusManager#getFocusedWindow()::: delegating default focus manager get focused window:::return->delegate->getFocusedWindow
DelegatingDefaultFocusManager#getActiveWindow()::: delegating default focus manager get active window:::return->delegate->getActiveWindow
DelegatingDefaultFocusManager#getDefaultFocusTraversalPolicy()::: delegating default focus manager get default focus traversal policy:::return->delegate->getDefaultFocusTraversalPolicy
DelegatingDefaultFocusManager#setDefaultFocusTraversalPolicy(FocusTraversalPolicy)::: delegating default focus manager set default focus traversal policy:::if->delegate->setDefaultFocusTraversalPolicy
DelegatingDefaultFocusManager#setDefaultFocusTraversalKeys(int, Set)::: delegating default focus manager set default focus traversal keys:::delegate->setDefaultFocusTraversalKeys
DelegatingDefaultFocusManager#getDefaultFocusTraversalKeys(int)::: delegating default focus manager get default focus traversal keys:::return->delegate->getDefaultFocusTraversalKeys
DelegatingDefaultFocusManager#getCurrentFocusCycleRoot()::: delegating default focus manager get current focus cycle root:::return->delegate->getCurrentFocusCycleRoot
DelegatingDefaultFocusManager#setGlobalCurrentFocusCycleRoot(Container)::: delegating default focus manager set global current focus cycle root:::delegate->setGlobalCurrentFocusCycleRoot
DelegatingDefaultFocusManager#addPropertyChangeListener(PropertyChangeListener)::: delegating default focus manager add property change listener:::delegate->addPropertyChangeListener
DelegatingDefaultFocusManager#removePropertyChangeListener(PropertyChangeListener)::: delegating default focus manager remove property change listener:::delegate->removePropertyChangeListener
DelegatingDefaultFocusManager#addPropertyChangeListener(String, PropertyChangeListener)::: delegating default focus manager add property change listener:::delegate->addPropertyChangeListener
DelegatingDefaultFocusManager#removePropertyChangeListener(String, PropertyChangeListener)::: delegating default focus manager remove property change listener:::delegate->removePropertyChangeListener
DelegatingDefaultFocusManager#addVetoableChangeListener(VetoableChangeListener)::: delegating default focus manager add vetoable change listener:::delegate->addVetoableChangeListener
DelegatingDefaultFocusManager#removeVetoableChangeListener(VetoableChangeListener)::: delegating default focus manager remove vetoable change listener:::delegate->removeVetoableChangeListener
DelegatingDefaultFocusManager#addVetoableChangeListener(String, VetoableChangeListener)::: delegating default focus manager add vetoable change listener:::delegate->addVetoableChangeListener
DelegatingDefaultFocusManager#removeVetoableChangeListener(String, VetoableChangeListener)::: delegating default focus manager remove vetoable change listener:::delegate->removeVetoableChangeListener
DelegatingDefaultFocusManager#addKeyEventDispatcher(KeyEventDispatcher)::: delegating default focus manager add key event dispatcher:::delegate->addKeyEventDispatcher
DelegatingDefaultFocusManager#removeKeyEventDispatcher(KeyEventDispatcher)::: delegating default focus manager remove key event dispatcher:::delegate->removeKeyEventDispatcher
DelegatingDefaultFocusManager#dispatchEvent(AWTEvent)::: delegating default focus manager dispatch event:::return->delegate->dispatchEvent
DelegatingDefaultFocusManager#dispatchKeyEvent(KeyEvent)::: delegating default focus manager dispatch key event:::return->delegate->dispatchKeyEvent
DelegatingDefaultFocusManager#upFocusCycle(Component)::: delegating default focus manager up focus cycle:::delegate->upFocusCycle
DelegatingDefaultFocusManager#downFocusCycle(Container)::: delegating default focus manager down focus cycle:::delegate->downFocusCycle
DesktopManager#openFrame(JInternalFrame):::If possible, display this frame in an appropriate location:::
DesktopManager#closeFrame(JInternalFrame):::Generally, this call should remove the frame from its parent.:::
DesktopManager#maximizeFrame(JInternalFrame):::Generally, the frame should be resized to match its parents bounds.:::
DesktopManager#minimizeFrame(JInternalFrame):::Generally, this indicates that the frame should be restored to its size and position prior to a maximizeFrame() call.:::
DesktopManager#iconifyFrame(JInternalFrame):::Generally, remove this frame from its parent and add an iconic representation.:::
DesktopManager#deiconifyFrame(JInternalFrame):::Generally, remove any iconic representation that is present and restore the frame to it's original size and location.:::
DesktopManager#activateFrame(JInternalFrame):::Generally, indicate that this frame has focus:::
DesktopManager#deactivateFrame(JInternalFrame):::Generally, indicate that this frame has lost focus:::
DesktopManager#beginDraggingFrame(JComponent):::This method is normally called when the user has indicated that they will begin dragging a component around:::
DesktopManager#dragFrame(JComponent, int, int):::The user has moved the frame:::
DesktopManager#endDraggingFrame(JComponent):::This method signals the end of the dragging session:::
DesktopManager#beginResizingFrame(JComponent, int):::This method is normally called when the user has indicated that they will begin resizing the frame:::
DesktopManager#resizeFrame(JComponent, int, int, int, int):::The user has resized the component:::
DesktopManager#endResizingFrame(JComponent):::This method signals the end of the resize session:::
DesktopManager#setBoundsForFrame(JComponent, int, int, int, int):::This is a primitive reshape method.:::
FocusManager#getCurrentManager():::Returns the current KeyboardFocusManager instance for the calling thread's context.:::manager->KeyboardFocusManager->getCurrentKeyboardFocusManager->if->return->else->return->new->DelegatingDefaultFocusManager
FocusManager#setCurrentManager(FocusManager):::Sets the current KeyboardFocusManager instance for the calling thread's context:::toSet->getDelegate->KeyboardFocusManager->setCurrentKeyboardFocusManager
FocusManager#disableSwingFocusManager():::Changes the current KeyboardFocusManager's default FocusTraversalPolicy to DefaultFocusTraversalPolicy.:::if->KeyboardFocusManager->getCurrentKeyboardFocusManager->new->DefaultFocusTraversalPolicy->setDefaultFocusTraversalPolicy
FocusManager#isFocusManagerEnabled():::Returns whether the application has invoked disableSwingFocusManager().:::return
GraphicsWrapper#subGraphics()::: graphics wrapper sub graphics:::
GraphicsWrapper#isClipIntersecting(Rectangle)::: graphics wrapper is clip intersecting:::
GraphicsWrapper#getClipX()::: graphics wrapper get clip x:::
GraphicsWrapper#getClipY()::: graphics wrapper get clip y:::
GraphicsWrapper#getClipWidth()::: graphics wrapper get clip width:::
GraphicsWrapper#getClipHeight()::: graphics wrapper get clip height:::
GrayFilter#createDisabledImage(Image):::Creates a disabled image:::if->return->MultiResolutionCachedImage->createDisabledImageImpl->map->return->createDisabledImageImpl
GrayFilter#createDisabledImageImpl(Image)::: gray filter create disabled image impl:::filter->new->GrayFilter->prod->i->getSource->new->FilteredImageSource->grayImage->Toolkit->getDefaultToolkit->createImage->return
GrayFilter#filterRGB(int, int, int):::Overrides RGBImageFilter.filterRGB.:::gray->if->else->if->if->return
GroupLayout#checkSize(int, int, int, boolean)::: group layout check size:::checkResizeType->if->throw->new->IllegalArgumentException->else->if->checkResizeType->checkResizeType->checkLessThan->checkLessThan
GroupLayout#checkResizeType(int, boolean)::: group layout check resize type:::if->throw->new->IllegalArgumentException
GroupLayout#checkLessThan(int, int)::: group layout check less than:::if->throw->new->IllegalArgumentException
GroupLayout#setHonorsVisibility(boolean):::Sets whether component visibility is considered when sizing and positioning components:::if->invalidateHost
GroupLayout#getHonorsVisibility():::Returns whether component visibility is considered when sizing and positioning components.:::return
GroupLayout#setHonorsVisibility(Component, Boolean):::Sets whether the component's visibility is considered for sizing and positioning:::if->throw->new->IllegalArgumentException->getComponentInfo->setHonorsVisibility->invalidateHost
GroupLayout#setAutoCreateGaps(boolean):::Sets whether a gap between components should automatically be created:::if->invalidateHost
GroupLayout#getAutoCreateGaps():::Returns true if gaps between components are automatically created.:::return
GroupLayout#setAutoCreateContainerGaps(boolean):::Sets whether a gap between the container and components that touch the border of the container should automatically be created:::if->getHorizontalGroup->createTopLevelGroup->getVerticalGroup->createTopLevelGroup->invalidateHost
GroupLayout#getAutoCreateContainerGaps():::Returns true if gaps between the container and components that border the container are automatically created.:::return
GroupLayout#setHorizontalGroup(Group):::Sets the Group that positions and sizes components along the horizontal axis.:::if->throw->new->IllegalArgumentException->createTopLevelGroup->invalidateHost
GroupLayout#getHorizontalGroup():::Returns the Group that positions and sizes components along the horizontal axis.:::index->if->size->return->get
GroupLayout#setVerticalGroup(Group):::Sets the Group that positions and sizes components along the vertical axis.:::if->throw->new->IllegalArgumentException->createTopLevelGroup->invalidateHost
GroupLayout#getVerticalGroup():::Returns the Group that positions and sizes components along the vertical axis.:::index->if->size->return->get
GroupLayout#createTopLevelGroup(Group):::Wraps the user specified group in a sequential group:::group->createSequentialGroup->if->getAutoCreateContainerGaps->group->new->ContainerAutoPreferredGapSpring->addSpring->group->addGroup->group->new->ContainerAutoPreferredGapSpring->addSpring->else->group->addGroup->return
GroupLayout#createSequentialGroup():::Creates and returns a SequentialGroup.:::return->new->SequentialGroup
GroupLayout#createParallelGroup():::Creates and returns a ParallelGroup with an alignment of Alignment.LEADING:::return->createParallelGroup
GroupLayout#createParallelGroup(Alignment):::Creates and returns a ParallelGroup with the specified alignment:::return->createParallelGroup
GroupLayout#createParallelGroup(Alignment, boolean):::Creates and returns a ParallelGroup with the specified alignment and resize behavior:::if->throw->new->IllegalArgumentException->if->return->new->BaselineGroup->return->new->ParallelGroup
GroupLayout#createBaselineGroup(boolean, boolean):::Creates and returns a ParallelGroup that aligns it's elements along the baseline.:::return->new->BaselineGroup
GroupLayout#linkSize(Component...):::Forces the specified components to have the same size regardless of their preferred, minimum or maximum sizes:::linkSize->linkSize
GroupLayout#linkSize(int, Component...):::Forces the specified components to have the same size along the specified axis regardless of their preferred, minimum or maximum sizes:::if->throw->new->IllegalArgumentException->for->counter->glAxis->if->else->if->else->throw->new->IllegalArgumentException->master->getComponentInfo->getLinkInfo->for->counter->invalidateHost
GroupLayout#replace(Component, Component):::Replaces an existing component with a new one.:::if->throw->new->IllegalArgumentException->if->registerComponents->registerComponents->info->componentInfos->remove->if->throw->new->IllegalArgumentException->host->remove->if->newComponent->getParent->host->add->info->setComponent->componentInfos->put->invalidateHost
GroupLayout#setLayoutStyle(LayoutStyle):::Sets the LayoutStyle used to calculate the preferred gaps between components:::invalidateHost
GroupLayout#getLayoutStyle():::Returns the LayoutStyle used for calculating the preferred gap between components:::return
GroupLayout#getLayoutStyle0()::: group layout get layout style0:::layoutStyle->getLayoutStyle->if->LayoutStyle->getInstance->return
GroupLayout#invalidateHost()::: group layout invalidate host:::if->revalidate->else->host->invalidate->host->repaint
GroupLayout#addLayoutComponent(String, Component):::Notification that a Component has been added to the parent container:::
GroupLayout#removeLayoutComponent(Component):::Notification that a Component has been removed from the parent container:::info->componentInfos->remove->if->info->dispose
GroupLayout#preferredLayoutSize(Container):::Returns the preferred size for the specified container.:::checkParent->prepare->return->horizontalGroup->getPreferredSize->verticalGroup->getPreferredSize->adjustSize
GroupLayout#minimumLayoutSize(Container):::Returns the minimum size for the specified container.:::checkParent->prepare->return->horizontalGroup->getMinimumSize->verticalGroup->getMinimumSize->adjustSize
GroupLayout#layoutContainer(Container):::Lays out the specified container.:::prepare->insets->parent->getInsets->width->parent->getWidth->height->parent->getHeight->ltr->isLeftToRight->if->getAutoCreateGaps->getAutoCreateContainerGaps->calculateAutopadding->calculateAutopadding->horizontalGroup->setSize->verticalGroup->setSize->foreach->componentInfos->values->info->setBounds
GroupLayout#addLayoutComponent(Component, Object):::Notification that a Component has been added to the parent container:::
GroupLayout#maximumLayoutSize(Container):::Returns the maximum size for the specified container.:::checkParent->prepare->return->horizontalGroup->getMaximumSize->verticalGroup->getMaximumSize->adjustSize
GroupLayout#getLayoutAlignmentX(Container):::Returns the alignment along the x axis:::checkParent->return
GroupLayout#getLayoutAlignmentY(Container):::Returns the alignment along the y axis:::checkParent->return
GroupLayout#invalidateLayout(Container):::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.:::checkParent->synchronized->parent->getTreeLock
GroupLayout#prepare(int)::: group layout prepare:::visChanged->if->horizontalGroup->setSize->verticalGroup->setSize->foreach->componentInfos->values->if->ci->updateVisibility->ci->clearCachedSize->if->registerComponents->registerComponents->if->checkComponents->horizontalGroup->removeAutopadding->verticalGroup->removeAutopadding->if->getAutoCreateGaps->insertAutopadding->else->if->getAutoCreateContainerGaps->insertAutopadding->if->getAutoCreateGaps->getAutoCreateContainerGaps->calculateAutopadding->calculateAutopadding
GroupLayout#calculateAutopadding(Group, int, int, int, int)::: group layout calculate autopadding:::group->unsetAutopadding->switch->group->getMinimumSize->break->group->getPreferredSize->break->group->getMaximumSize->break->break->group->setSize->group->calculateAutopadding
GroupLayout#checkComponents()::: group layout check components:::foreach->componentInfos->values->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException
GroupLayout#registerComponents(Group, int)::: group layout register components:::springs->for->counter->springs->size
GroupLayout#adjustSize(int, int)::: group layout adjust size:::insets->host->getInsets->return->new->Dimension
GroupLayout#checkParent(Container)::: group layout check parent:::if->throw->new->IllegalArgumentException
GroupLayout#getComponentInfo(Component):::Returns the ComponentInfo for the specified Component, creating one if necessary.:::info->componentInfos->get->if->new->ComponentInfo->componentInfos->put->if->component->getParent->host->add->return
GroupLayout#insertAutopadding(boolean):::Adjusts the autopadding springs for the horizontal and vertical groups:::horizontalGroup->new->ArrayList<AutoPreferredGapSpring>->new->ArrayList<AutoPreferredGapSpring>->new->ArrayList<ComponentSpring>->new->ArrayList<ComponentSpring>->insertAutopadding->verticalGroup->new->ArrayList<AutoPreferredGapSpring>->new->ArrayList<AutoPreferredGapSpring>->new->ArrayList<ComponentSpring>->new->ArrayList<ComponentSpring>->insertAutopadding
GroupLayout#areParallelSiblings(Component, Component, int):::Returns true if the two Components have a common ParallelGroup ancestor along the particular axis.:::sourceInfo->getComponentInfo->targetInfo->getComponentInfo->sourceSpring->targetSpring->if->else->sourcePath->sourcePath->clear->spring->sourceSpring->getParent->while->sourcePath->add->spring->getParent->targetSpring->getParent->while->if->sourcePath->contains->sourcePath->clear->while->if->return->spring->getParent->return->spring->getParent->sourcePath->clear->return
GroupLayout#isLeftToRight()::: group layout is left to right:::return->host->getComponentOrientation->isLeftToRight
GroupLayout#toString():::Returns a string representation of this GroupLayout:::if->registerComponents->registerComponents->sb->new->StringBuilder->sb->append->createSpringDescription->sb->append->createSpringDescription->return->sb->toString
GroupLayout#createSpringDescription(StringBuilder, Spring, String, int)::: group layout create spring description:::origin->padding->if->cSpring->Integer->cSpring->getOrigin->toString->name->cSpring->getComponent->getName->if->if->paddingSpring->paddingSpring->getUserCreated->paddingSpring->getMatchDescription->sb->append->spring->getClass->getName->append->append->Integer->spring->hashCode->toHexString->append->append->append->append->spring->getSize->append->append->spring->getAlignment->append->append->spring->getMinimumSize->append->append->spring->getPreferredSize->append->append->spring->getMaximumSize->append->append->append->if->springs->for->counter->springs->size
GroupLayout.Spring#calculateMinimumSize(int):::Calculates and returns the minimum size.:::
GroupLayout.Spring#calculatePreferredSize(int):::Calculates and returns the preferred size.:::
GroupLayout.Spring#calculateMaximumSize(int):::Calculates and returns the minimum size.:::
GroupLayout.Spring#setParent(Spring):::Sets the parent of this Spring.:::
GroupLayout.Spring#getParent():::Returns the parent of this spring.:::return
GroupLayout.Spring#setAlignment(Alignment)::: spring set alignment:::
GroupLayout.Spring#getAlignment():::Alignment for this Spring, this may be null.:::return
GroupLayout.Spring#getMinimumSize(int):::Returns the minimum size.:::if->calculateMinimumSize->constrain->return
GroupLayout.Spring#getPreferredSize(int):::Returns the preferred size.:::if->calculatePreferredSize->constrain->return
GroupLayout.Spring#getMaximumSize(int):::Returns the maximum size.:::if->calculateMaximumSize->constrain->return
GroupLayout.Spring#setSize(int, int, int):::Sets the value and location of the spring:::if->unset
GroupLayout.Spring#unset():::Resets the cached min/max/pref.:::
GroupLayout.Spring#getSize():::Returns the current size.:::return
GroupLayout.Spring#constrain(int)::: spring constrain:::return->Math->min
GroupLayout.Spring#getBaseline()::: spring get baseline:::return
GroupLayout.Spring#getBaselineResizeBehavior()::: spring get baseline resize behavior:::return
GroupLayout.Spring#isResizable(int)::: spring is resizable:::min->getMinimumSize->pref->getPreferredSize->return->getMaximumSize
GroupLayout.Spring#willHaveZeroSize(boolean):::Returns true if this spring will ALWAYS have a zero size:::
GroupLayout.Group#addGroup(Group):::Adds a Group to this Group.:::return->addSpring
GroupLayout.Group#addComponent(Component):::Adds a Component to this Group.:::return->addComponent
GroupLayout.Group#addComponent(Component, int, int, int):::Adds a Component to this Group with the specified size.:::return->new->ComponentSpring->addSpring
GroupLayout.Group#addGap(int):::Adds a rigid gap to this Group.:::return->addGap
GroupLayout.Group#addGap(int, int, int):::Adds a gap to this Group with the specified size.:::return->new->GapSpring->addSpring
GroupLayout.Group#getSpring(int)::: group get spring:::return->springs->get
GroupLayout.Group#indexOf(Spring)::: group index of:::return->springs->indexOf
GroupLayout.Group#addSpring(Spring):::Adds the Spring to the list of Springs and returns the receiver.:::springs->add->spring->setParent->if->getUserCreated->return
GroupLayout.Group#setSize(int, int, int)::: group set size:::super->setSize->if->for->counter->springs->size->else->setValidSize
GroupLayout.Group#setValidSize(int, int, int):::This is invoked from setSize if passed a value other than UNSET.:::
GroupLayout.Group#calculateMinimumSize(int)::: group calculate minimum size:::return->calculateSize
GroupLayout.Group#calculatePreferredSize(int)::: group calculate preferred size:::return->calculateSize
GroupLayout.Group#calculateMaximumSize(int)::: group calculate maximum size:::return->calculateSize
GroupLayout.Group#calculateSize(int, int):::Calculates the specified size:::count->springs->size->if->return->if->return->getSpring->getSpringSize->size->getSpring->getSpringSize->getSpring->getSpringSize->operator->constrain->for->counter->return
GroupLayout.Group#getSpringSize(Spring, int, int)::: group get spring size:::switch->return->spring->getMinimumSize->return->spring->getPreferredSize->return->spring->getMaximumSize->return
GroupLayout.Group#operator(int, int):::Used to compute how the two values representing two springs will be combined:::
GroupLayout.Group#insertAutopadding(int, List, List, List, List, boolean):::Adjusts the autopadding springs in this group and its children:::
GroupLayout.Group#removeAutopadding():::Removes any AutopaddingSprings for this Group and its children.:::unset->for->counter->springs->size
GroupLayout.Group#unsetAutopadding()::: group unset autopadding:::unset->for->counter->springs->size
GroupLayout.Group#calculateAutopadding(int)::: group calculate autopadding:::for->counter->springs->size->unset
GroupLayout.Group#willHaveZeroSize(boolean)::: group will have zero size:::for->i->springs->size->return
GroupLayout.SequentialGroup#addGroup(Group)::: sequential group add group:::return->super->addGroup
GroupLayout.SequentialGroup#addGroup(boolean, Group):::Adds a Group to this Group.:::super->addGroup->if->return
GroupLayout.SequentialGroup#addComponent(Component)::: sequential group add component:::return->super->addComponent
GroupLayout.SequentialGroup#addComponent(boolean, Component):::Adds a Component to this Group.:::super->addComponent->if->springs->springs->size->get->return
GroupLayout.SequentialGroup#addComponent(Component, int, int, int)::: sequential group add component:::return->super->addComponent
GroupLayout.SequentialGroup#addComponent(boolean, Component, int, int, int):::Adds a Component to this Group with the specified size.:::super->addComponent->if->springs->springs->size->get->return
GroupLayout.SequentialGroup#addGap(int)::: sequential group add gap:::return->super->addGap
GroupLayout.SequentialGroup#addGap(int, int, int)::: sequential group add gap:::return->super->addGap
GroupLayout.SequentialGroup#addPreferredGap(JComponent, JComponent, ComponentPlacement):::Adds an element representing the preferred gap between two components:::return->addPreferredGap
GroupLayout.SequentialGroup#addPreferredGap(JComponent, JComponent, ComponentPlacement, int, int):::Adds an element representing the preferred gap between two components.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->checkPreferredGapValues->return->new->PreferredGapSpring->addSpring
GroupLayout.SequentialGroup#addPreferredGap(ComponentPlacement):::Adds an element representing the preferred gap between the nearest components:::return->addPreferredGap
GroupLayout.SequentialGroup#addPreferredGap(ComponentPlacement, int, int):::Adds an element representing the preferred gap between the nearest components:::if->throw->new->IllegalArgumentException->checkPreferredGapValues->return->new->AutoPreferredGapSpring->addSpring
GroupLayout.SequentialGroup#addContainerGap():::Adds an element representing the preferred gap between an edge the container and components that touch the border of the container:::return->addContainerGap
GroupLayout.SequentialGroup#addContainerGap(int, int):::Adds an element representing the preferred gap between one edge of the container and the next or previous Component with the specified size:::if->throw->new->IllegalArgumentException->return->new->ContainerAutoPreferredGapSpring->addSpring
GroupLayout.SequentialGroup#operator(int, int)::: sequential group operator:::return->constrain->constrain
GroupLayout.SequentialGroup#setValidSize(int, int, int)::: sequential group set valid size:::pref->getPreferredSize->if->foreach->springPref->spring->getPreferredSize->spring->setSize->else->if->springs->size->spring->getSpring->spring->Math->Math->spring->getMinimumSize->max->spring->getMaximumSize->min->setSize->else->if->springs->size->setValidSizeNotPreferred
GroupLayout.SequentialGroup#setValidSizeNotPreferred(int, int, int)::: sequential group set valid size not preferred:::delta->getPreferredSize->useMin->springCount->springs->size->if->resizable->buildResizableList->resizableCount->resizable->size->if->sDelta->slop->sizes->new->intArr->sign->for->counter->for->counter->else->for->counter
GroupLayout.SequentialGroup#buildResizableList(int, boolean):::Returns the sorted list of SpringDelta's for the current set of Springs:::size->springs->size->sorted->new->ArrayList<SpringDelta>->for->counter->Collections->sort->return
GroupLayout.SequentialGroup#indexOfNextNonZeroSpring(int, boolean)::: sequential group index of next non zero spring:::while->springs->size->spring->springs->get->if->spring->willHaveZeroSize->return->return
GroupLayout.SequentialGroup#insertAutopadding(int, List, List, List, List, boolean)::: sequential group insert autopadding:::newLeadingPadding->new->ArrayList<AutoPreferredGapSpring>->newTrailingPadding->new->ArrayList<AutoPreferredGapSpring>->newLeading->new->ArrayList<ComponentSpring>->newTrailing->counter->while->springs->size->spring->getSpring->if->if->newLeadingPadding->size->padding->padding->setSources->newLeading->clear->indexOfNextNonZeroSpring->if->springs->size->if->trailingPadding->add->else->newLeadingPadding->clear->newLeadingPadding->add->else->indexOfNextNonZeroSpring->else->if->newLeading->size->newLeadingPadding->isEmpty->padding->new->AutoPreferredGapSpring->springs->add->continue->if->cSpring->if->cSpring->isVisible->continue->foreach->gapSpring->addTarget->newLeading->clear->newLeadingPadding->clear->indexOfNextNonZeroSpring->if->springs->size->trailing->add->else->newLeading->add->else->if->if->new->ArrayList<ComponentSpring>->else->newTrailing->clear->newTrailingPadding->clear->insertAutopadding->newLeading->clear->newLeadingPadding->clear->newTrailing->size->indexOfNextNonZeroSpring->if->springs->size->trailing->addAll->trailingPadding->addAll->else->newLeading->addAll->newLeadingPadding->addAll->else->newLeadingPadding->clear->newLeading->clear
GroupLayout.SequentialGroup#getBaseline()::: sequential group get baseline:::if->baseline->baselineSpring->getBaseline->if->size->foreach->if->return->else->spring->getPreferredSize->return
GroupLayout.SequentialGroup#getBaselineResizeBehavior()::: sequential group get baseline resize behavior:::if->isResizable->if->baselineSpring->isResizable->leadingResizable->foreach->if->break->else->if->spring->isResizable->break->trailingResizable->for->i->springs->size->if->return->else->if->return->else->brb->baselineSpring->getBaselineResizeBehavior->if->foreach->if->return->if->spring->isResizable->return->else->if->for->i->springs->size->return->return
GroupLayout.SequentialGroup#checkPreferredGapValues(int, int)::: sequential group check preferred gap values:::if->throw->new->IllegalArgumentException
GroupLayout.SpringDelta#compareTo(SpringDelta)::: spring delta compare to:::return
GroupLayout.SpringDelta#toString()::: spring delta to string:::return->super->toString
GroupLayout.ParallelGroup#addGroup(Group)::: parallel group add group:::return->super->addGroup
GroupLayout.ParallelGroup#addComponent(Component)::: parallel group add component:::return->super->addComponent
GroupLayout.ParallelGroup#addComponent(Component, int, int, int)::: parallel group add component:::return->super->addComponent
GroupLayout.ParallelGroup#addGap(int)::: parallel group add gap:::return->super->addGap
GroupLayout.ParallelGroup#addGap(int, int, int)::: parallel group add gap:::return->super->addGap
GroupLayout.ParallelGroup#addGroup(Alignment, Group):::Adds a Group to this ParallelGroup with the specified alignment:::checkChildAlignment->group->setAlignment->return->addSpring
GroupLayout.ParallelGroup#addComponent(Component, Alignment):::Adds a Component to this ParallelGroup with the specified alignment.:::return->addComponent
GroupLayout.ParallelGroup#addComponent(Component, Alignment, int, int, int):::Adds a Component to this ParallelGroup with the specified alignment and size.:::checkChildAlignment->spring->new->ComponentSpring->spring->setAlignment->return->addSpring
GroupLayout.ParallelGroup#isResizable()::: parallel group is resizable:::return
GroupLayout.ParallelGroup#operator(int, int)::: parallel group operator:::return->Math->max
GroupLayout.ParallelGroup#calculateMinimumSize(int)::: parallel group calculate minimum size:::if->isResizable->return->getPreferredSize->return->super->calculateMinimumSize
GroupLayout.ParallelGroup#calculateMaximumSize(int)::: parallel group calculate maximum size:::if->isResizable->return->getPreferredSize->return->super->calculateMaximumSize
GroupLayout.ParallelGroup#setValidSize(int, int, int)::: parallel group set valid size:::foreach->setChildSize
GroupLayout.ParallelGroup#setChildSize(Spring, int, int, int)::: parallel group set child size:::alignment->spring->getAlignment->springSize->Math->Math->spring->getMinimumSize->max->spring->getMaximumSize->min->if->switch->spring->setSize->break->spring->setSize->break->spring->setSize->break
GroupLayout.ParallelGroup#insertAutopadding(int, List, List, List, List, boolean)::: parallel group insert autopadding:::foreach->if->if->isVisible->foreach->gapSpring->addTarget->trailing->add->else->if->insertAutopadding->else->if->setSources->trailingPadding->add
GroupLayout.ParallelGroup#checkChildAlignment(Alignment)::: parallel group check child alignment:::checkChildAlignment
GroupLayout.ParallelGroup#checkChildAlignment(Alignment, boolean)::: parallel group check child alignment:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
GroupLayout.BaselineGroup#unset()::: baseline group unset:::super->unset
GroupLayout.BaselineGroup#setValidSize(int, int, int)::: baseline group set valid size:::checkAxis->if->super->setValidSize->else->baselineLayout
GroupLayout.BaselineGroup#calculateSize(int, int)::: baseline group calculate size:::checkAxis->if->calculateBaselineAndResizeBehavior->if->return->calculateMinSize->if->return->calculateMaxSize->if->return->return->Math->super->calculateSize->max
GroupLayout.BaselineGroup#calculateBaselineAndResizeBehavior()::: baseline group calculate baseline and resize behavior:::baselineSpringCount->resizeBehavior->foreach->if->spring->getAlignment->spring->getAlignment->baseline->spring->getBaseline->if->if->spring->isResizable->brb->spring->getBaselineResizeBehavior->if->else->if->Math->max->Math->spring->getPreferredSize->max->if->if->else->springs->size
GroupLayout.BaselineGroup#calculateMaxSize()::: baseline group calculate max size:::maxAscent->maxDescent->nonBaselineMax->foreach->baseline->springMax->spring->getMaximumSize->if->spring->getAlignment->spring->getAlignment->spring->getBaseline->springPref->spring->getPreferredSize->if->switch->spring->getBaselineResizeBehavior->if->Math->max->break->if->Math->max->break->break->else->Math->max->return->Math->max
GroupLayout.BaselineGroup#calculateMinSize()::: baseline group calculate min size:::minAscent->minDescent->nonBaselineMin->if->else->foreach->springMin->spring->getMinimumSize->baseline->if->spring->getAlignment->spring->getAlignment->spring->getBaseline->springPref->spring->getPreferredSize->brb->spring->getBaselineResizeBehavior->switch->if->Math->max->else->Math->max->break->if->Math->max->else->Math->max->break->Math->max->Math->max->break->else->Math->max->return->Math->max
GroupLayout.BaselineGroup#baselineLayout(int, int):::Lays out springs that have a baseline along the baseline:::ascent->descent->if->else->foreach->alignment->spring->getAlignment->if->baseline->spring->getBaseline->if->springMax->spring->getMaximumSize->springPref->spring->getPreferredSize->height->y->switch->spring->getBaselineResizeBehavior->Math->min->break->Math->min->break->break->spring->setSize->else->setChildSize->else->setChildSize
GroupLayout.BaselineGroup#getBaseline()::: baseline group get baseline:::if->springs->size->getPreferredSize->return->else->if->springs->size->return->springs->get->getBaseline->return
GroupLayout.BaselineGroup#getBaselineResizeBehavior()::: baseline group get baseline resize behavior:::if->springs->size->return->springs->get->getBaselineResizeBehavior->if->return->return
GroupLayout.BaselineGroup#checkAxis(int)::: baseline group check axis:::if->throw->new->IllegalStateException
GroupLayout.ComponentSpring#calculateMinimumSize(int)::: component spring calculate minimum size:::if->isLinked->return->getLinkSize->return->calculateNonlinkedMinimumSize
GroupLayout.ComponentSpring#calculatePreferredSize(int)::: component spring calculate preferred size:::if->isLinked->return->getLinkSize->min->getMinimumSize->pref->calculateNonlinkedPreferredSize->max->getMaximumSize->return->Math->Math->max->min
GroupLayout.ComponentSpring#calculateMaximumSize(int)::: component spring calculate maximum size:::if->isLinked->return->getLinkSize->return->Math->getMinimumSize->calculateNonlinkedMaximumSize->max
GroupLayout.ComponentSpring#isVisible()::: component spring is visible:::return->getComponent->getComponentInfo->isVisible
GroupLayout.ComponentSpring#calculateNonlinkedMinimumSize(int)::: component spring calculate nonlinked minimum size:::if->isVisible->return->if->return->if->return->calculateNonlinkedPreferredSize->return->component->getMinimumSize->getSizeAlongAxis
GroupLayout.ComponentSpring#calculateNonlinkedPreferredSize(int)::: component spring calculate nonlinked preferred size:::if->isVisible->return->if->return->return->component->getPreferredSize->getSizeAlongAxis
GroupLayout.ComponentSpring#calculateNonlinkedMaximumSize(int)::: component spring calculate nonlinked maximum size:::if->isVisible->return->if->return->if->return->calculateNonlinkedPreferredSize->return->component->getMaximumSize->getSizeAlongAxis
GroupLayout.ComponentSpring#getSizeAlongAxis(int, Dimension)::: component spring get size along axis:::return
GroupLayout.ComponentSpring#getLinkSize(int, int)::: component spring get link size:::if->isVisible->return->ci->getComponentInfo->return->ci->getLinkSize
GroupLayout.ComponentSpring#setSize(int, int, int)::: component spring set size:::super->setSize->if
GroupLayout.ComponentSpring#getOrigin()::: component spring get origin:::return
GroupLayout.ComponentSpring#setComponent(Component)::: component spring set component:::
GroupLayout.ComponentSpring#getComponent()::: component spring get component:::return
GroupLayout.ComponentSpring#getBaseline()::: component spring get baseline:::if->horizontalSpring->getComponentInfo->width->horizontalSpring->getPreferredSize->height->getPreferredSize->if->component->getBaseline->return
GroupLayout.ComponentSpring#getBaselineResizeBehavior()::: component spring get baseline resize behavior:::return->getComponent->getBaselineResizeBehavior
GroupLayout.ComponentSpring#isLinked(int)::: component spring is linked:::return->getComponentInfo->isLinked
GroupLayout.ComponentSpring#installIfNecessary(int)::: component spring install if necessary:::if->if->getComponentInfo->else->getComponentInfo
GroupLayout.ComponentSpring#willHaveZeroSize(boolean)::: component spring will have zero size:::return->isVisible
GroupLayout.PreferredGapSpring#calculateMinimumSize(int)::: preferred gap spring calculate minimum size:::return->getPadding
GroupLayout.PreferredGapSpring#calculatePreferredSize(int)::: preferred gap spring calculate preferred size:::if->return->getMinimumSize->min->getMinimumSize->max->getMaximumSize->return->Math->Math->max->min
GroupLayout.PreferredGapSpring#calculateMaximumSize(int)::: preferred gap spring calculate maximum size:::if->return->getPadding->return->Math->getMinimumSize->max
GroupLayout.PreferredGapSpring#getPadding(int)::: preferred gap spring get padding:::position->if->else->return->getLayoutStyle0->getPreferredGap
GroupLayout.PreferredGapSpring#willHaveZeroSize(boolean)::: preferred gap spring will have zero size:::return
GroupLayout.GapSpring#calculateMinimumSize(int)::: gap spring calculate minimum size:::if->return->getPreferredSize->return
GroupLayout.GapSpring#calculatePreferredSize(int)::: gap spring calculate preferred size:::return
GroupLayout.GapSpring#calculateMaximumSize(int)::: gap spring calculate maximum size:::if->return->getPreferredSize->return
GroupLayout.GapSpring#willHaveZeroSize(boolean)::: gap spring will have zero size:::return
GroupLayout.AutoPreferredGapSpring#setSource(ComponentSpring)::: auto preferred gap spring set source:::
GroupLayout.AutoPreferredGapSpring#setSources(List)::: auto preferred gap spring set sources:::new->ArrayList<ComponentSpring>
GroupLayout.AutoPreferredGapSpring#setUserCreated(boolean)::: auto preferred gap spring set user created:::
GroupLayout.AutoPreferredGapSpring#getUserCreated()::: auto preferred gap spring get user created:::return
GroupLayout.AutoPreferredGapSpring#unset()::: auto preferred gap spring unset:::getSize->super->unset
GroupLayout.AutoPreferredGapSpring#reset()::: auto preferred gap spring reset:::
GroupLayout.AutoPreferredGapSpring#calculatePadding(int)::: auto preferred gap spring calculate padding:::maxPadding->if->p->getLayoutStyle0->position->if->if->isLeftToRight->else->else->for->i->matches->size->if->if->if->Math->min
GroupLayout.AutoPreferredGapSpring#calculatePadding(LayoutStyle, int, ComponentSpring, ComponentSpring)::: auto preferred gap spring calculate padding:::delta->target->getOrigin->source->getOrigin->source->getSize->if->padding->if->source->getComponent->target->getComponent->p->source->getComponent->target->getComponent->getPreferredGap->else->if->Math->max->return->return
GroupLayout.AutoPreferredGapSpring#addTarget(ComponentSpring, int)::: auto preferred gap spring add target:::oAxis->if->if->source->getComponent->spring->getComponent->areParallelSiblings->addValidTarget->else->component->spring->getComponent->for->counter->sources->size
GroupLayout.AutoPreferredGapSpring#addValidTarget(ComponentSpring, ComponentSpring)::: auto preferred gap spring add valid target:::if->new->ArrayList<AutoPreferredGapMatch>->matches->new->AutoPreferredGapMatch->add
GroupLayout.AutoPreferredGapSpring#calculateMinimumSize(int)::: auto preferred gap spring calculate minimum size:::return
GroupLayout.AutoPreferredGapSpring#calculatePreferredSize(int)::: auto preferred gap spring calculate preferred size:::if->return->return->Math->max
GroupLayout.AutoPreferredGapSpring#calculateMaximumSize(int)::: auto preferred gap spring calculate maximum size:::if->return->Math->getPreferredSize->max->return
GroupLayout.AutoPreferredGapSpring#getMatchDescription()::: auto preferred gap spring get match description:::return->matches->toString
GroupLayout.AutoPreferredGapSpring#toString()::: auto preferred gap spring to string:::return->super->toString->getMatchDescription
GroupLayout.AutoPreferredGapSpring#willHaveZeroSize(boolean)::: auto preferred gap spring will have zero size:::return
GroupLayout.AutoPreferredGapMatch#toString(ComponentSpring)::: auto preferred gap match to string:::return->spring->getComponent->getName
GroupLayout.AutoPreferredGapMatch#toString()::: auto preferred gap match to string:::return->toString->toString
GroupLayout.ContainerAutoPreferredGapSpring#addTarget(ComponentSpring, int)::: container auto preferred gap spring add target:::if->new->ArrayList<ComponentSpring>->targets->add
GroupLayout.ContainerAutoPreferredGapSpring#calculatePadding(int)::: container auto preferred gap spring calculate padding:::p->getLayoutStyle0->maxPadding->position->if->if->if->isLeftToRight->else->else->for->i->targets->size->else->if->if->isLeftToRight->else->else->if->for->i->sources->size->else->if->updateSize->if->Math->min
GroupLayout.ContainerAutoPreferredGapSpring#updateSize(LayoutStyle, ComponentSpring, int)::: container auto preferred gap spring update size:::padding->if->sourceSpring->getComponent->p->sourceSpring->getComponent->getContainerGap->delta->Math->getParent->getSize->sourceSpring->getSize->sourceSpring->getOrigin->max->Math->max->return
GroupLayout.ContainerAutoPreferredGapSpring#getMatchDescription()::: container auto preferred gap spring get match description:::if->return->targets->toString->if->return->sources->toString->return
GroupLayout.LinkInfo#add(ComponentInfo)::: link info add:::childMaster->child->getLinkInfo->if->linked->add->child->setLinkInfo->else->if->linked->addAll->foreach->childInfo->setLinkInfo->clearCachedSize
GroupLayout.LinkInfo#remove(ComponentInfo)::: link info remove:::linked->remove->info->setLinkInfo->if->linked->size->linked->get->setLinkInfo->clearCachedSize
GroupLayout.LinkInfo#clearCachedSize()::: link info clear cached size:::
GroupLayout.LinkInfo#getSize(int)::: link info get size:::if->calculateLinkedSize->return
GroupLayout.LinkInfo#calculateLinkedSize(int)::: link info calculate linked size:::size->foreach->spring->if->else->Math->spring->calculateNonlinkedPreferredSize->max->return
GroupLayout.ComponentInfo#dispose()::: component info dispose:::removeSpring->removeSpring->if->horizontalMaster->remove->if->verticalMaster->remove
GroupLayout.ComponentInfo#setHonorsVisibility(Boolean)::: component info set honors visibility:::
GroupLayout.ComponentInfo#removeSpring(Spring)::: component info remove spring:::if->spring->getParent->remove
GroupLayout.ComponentInfo#isVisible()::: component info is visible:::return
GroupLayout.ComponentInfo#updateVisibility():::Updates the cached visibility.:::honorsVisibility->if->GroupLayout.this->getHonorsVisibility->else->newVisible->component->isVisible->if->return->return
GroupLayout.ComponentInfo#setBounds(Insets, int, boolean)::: component info set bounds:::x->horizontalSpring->getOrigin->w->horizontalSpring->getSize->y->verticalSpring->getOrigin->h->verticalSpring->getSize->if->component->setBounds
GroupLayout.ComponentInfo#setComponent(Component)::: component info set component:::if->horizontalSpring->setComponent->if->verticalSpring->setComponent
GroupLayout.ComponentInfo#getComponent()::: component info get component:::return
GroupLayout.ComponentInfo#isLinked(int):::Returns true if this component has its size linked to other components.:::if->return->return
GroupLayout.ComponentInfo#setLinkInfo(int, LinkInfo)::: component info set link info:::if->else
GroupLayout.ComponentInfo#getLinkInfo(int)::: component info get link info:::return->getLinkInfo
GroupLayout.ComponentInfo#getLinkInfo(int, boolean)::: component info get link info:::if->if->new->LinkInfo->add->return->else->if->new->LinkInfo->add->return
GroupLayout.ComponentInfo#clearCachedSize()::: component info clear cached size:::if->horizontalMaster->clearCachedSize->if->verticalMaster->clearCachedSize
GroupLayout.ComponentInfo#getLinkSize(int, int)::: component info get link size:::if->return->horizontalMaster->getSize->else->return->verticalMaster->getSize
Icon#paintIcon(Component, Graphics, int, int):::Draw the icon at the specified location:::
Icon#getIconWidth():::Returns the icon's width.:::
Icon#getIconHeight():::Returns the icon's height.:::
ImageIcon#createNoPermsComponent()::: image icon create no perms component:::return->AccessController->new->PrivilegedAction<Component>->new->ProtectionDomainArr->new->ProtectionDomain->new->AccessControlContext->doPrivileged
ImageIcon#loadImage(Image):::Loads the image, returning only when the image is loaded.:::mTracker->getTracker->synchronized->id->getNextID->mTracker->addImage->try->mTracker->waitForID->catch->println->finally->mTracker->statusID->mTracker->removeImage->image->getWidth->image->getHeight
ImageIcon#getNextID():::Returns an ID to use with the MediaTracker in loading an image.:::synchronized->getTracker->return
ImageIcon#getTracker():::Returns the MediaTracker for the current AppContext, creating a new MediaTracker if necessary.:::trackerObj->ac->AppContext->getAppContext->synchronized->ac->get->if->comp->new->Component->new->MediaTracker->ac->put->return
ImageIcon#getImageLoadStatus():::Returns the status of the image loading operation.:::return
ImageIcon#getImage():::Returns this icon's Image.:::return
ImageIcon#setImage(Image):::Sets the image displayed by this icon.:::loadImage
ImageIcon#getDescription():::Gets the description of the image:::return
ImageIcon#setDescription(String):::Sets the description of the image:::
ImageIcon#paintIcon(Component, Graphics, int, int):::Paints the icon:::if->g->drawImage->else->g->drawImage
ImageIcon#getIconWidth():::Gets the width of the icon.:::return
ImageIcon#getIconHeight():::Gets the height of the icon.:::return
ImageIcon#setImageObserver(ImageObserver):::Sets the image observer for the image:::
ImageIcon#getImageObserver():::Returns the image observer for the image.:::return
ImageIcon#toString():::Returns a string representation of this image.:::if->return->return->super->toString
ImageIcon#readObject(ObjectInputStream)::: image icon read object:::f->s->readFields->f->get->f->get->f->get->f->get->f->get->w->s->readInt->h->s->readInt->pixels->s->readObject->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->getIconWidth->getIconHeight->throw->new->IllegalStateException->if->tk->Toolkit->getDefaultToolkit->cm->ColorModel->getRGBdefault->tk->new->MemoryImageSource->createImage->loadImage
ImageIcon#writeObject(ObjectOutputStream)::: image icon write object:::s->defaultWriteObject->w->getIconWidth->h->getIconHeight->pixels->new->intArr->if->try->pg->new->PixelGrabber->pg->grabPixels->if->pg->getStatus->throw->new->IOException->catch->throw->new->IOException->finally->s->writeInt->s->writeInt->s->writeObject
ImageIcon#getAccessibleContext():::Gets the AccessibleContext associated with this ImageIcon:::if->new->AccessibleImageIcon->return
ImageIcon.AccessibleImageIcon#getAccessibleRole():::Gets the role of this object.:::return
ImageIcon.AccessibleImageIcon#getAccessibleStateSet():::Gets the state of this object.:::return
ImageIcon.AccessibleImageIcon#getAccessibleParent():::Gets the Accessible parent of this object:::return
ImageIcon.AccessibleImageIcon#getAccessibleIndexInParent():::Gets the index of this object in its accessible parent.:::return
ImageIcon.AccessibleImageIcon#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::return
ImageIcon.AccessibleImageIcon#getAccessibleChild(int):::Returns the nth Accessible child of the object.:::return
ImageIcon.AccessibleImageIcon#getLocale():::Returns the locale of this object.:::return
ImageIcon.AccessibleImageIcon#getAccessibleIconDescription():::Gets the description of the icon:::return->ImageIcon.this->getDescription
ImageIcon.AccessibleImageIcon#setAccessibleIconDescription(String):::Sets the description of the icon:::ImageIcon.this->setDescription
ImageIcon.AccessibleImageIcon#getAccessibleIconHeight():::Gets the height of the icon.:::return
ImageIcon.AccessibleImageIcon#getAccessibleIconWidth():::Gets the width of the icon.:::return
ImageIcon.AccessibleImageIcon#readObject(ObjectInputStream)::: accessible image icon read object:::s->defaultReadObject
ImageIcon.AccessibleImageIcon#writeObject(ObjectOutputStream)::: accessible image icon write object:::s->defaultWriteObject
InputMap#setParent(InputMap):::Sets this InputMap's parent.:::
InputMap#getParent():::Gets this InputMap's parent.:::return
InputMap#put(KeyStroke, Object):::Adds a binding for keyStroke to actionMapKey:::if->return->if->remove->else->if->new->ArrayTable->arrayTable->put
InputMap#get(KeyStroke):::Returns the binding for keyStroke, messaging the parent InputMap if the binding is not locally defined.:::if->parent->getParent->if->return->parent->get->return->value->arrayTable->get->if->parent->getParent->if->return->parent->get->return
InputMap#remove(KeyStroke):::Removes the binding for key from this InputMap.:::if->arrayTable->remove
InputMap#clear():::Removes all the mappings from this InputMap.:::if->arrayTable->clear
InputMap#keys():::Returns the KeyStrokes that are bound in this InputMap.:::if->return->keys->arrayTable->size->new->KeyStrokeArr->arrayTable->getKeys->return
InputMap#size():::Returns the number of KeyStroke bindings.:::if->return->return->arrayTable->size
InputMap#allKeys():::Returns an array of the KeyStrokes defined in this InputMap and its parent:::count->size->parent->getParent->if->if->return->parent->allKeys->return->keys->if->return->keys->keys->keys->pKeys->parent->allKeys->if->return->if->return->keyMap->new->HashMap<KeyStroke,KeyStroke>->counter->for->for->allKeys->keyMap->size->new->KeyStrokeArr->return->keyMap->keySet->toArray
InputMap#writeObject(ObjectOutputStream)::: input map write object:::s->defaultWriteObject->ArrayTable->writeArrayTable
InputMap#readObject(ObjectInputStream)::: input map read object:::s->defaultReadObject->for->counter->s->readInt
InputVerifier#verify(JComponent):::Checks whether the JComponent's input is valid:::
InputVerifier#shouldYieldFocus(JComponent):::Calls verify(input) to ensure that the input is valid:::return->verify
InputVerifier#verifyTarget(JComponent):::Checks whether the target JComponent that will be receiving the focus is ready to accept it:::return
InputVerifier#shouldYieldFocus(JComponent, JComponent):::Is called by Swing if this InputVerifier is assigned to the source Swing component to check whether the requested focus transfer from the source to target is allowed:::return->shouldYieldFocus->verifyTarget
InternalFrameFocusTraversalPolicy#getInitialComponent(JInternalFrame):::Returns the Component that should receive the focus when a JInternalFrame is selected for the first time:::return->getDefaultComponent
JApplet#createRootPane():::Called by the constructor methods to create the default rootPane.:::rp->new->JRootPane->rp->setOpaque->return
JApplet#setTransferHandler(TransferHandler):::Sets the transferHandler property, which is a mechanism to support transfer of data into this component:::oldHandler->SwingUtilities->installSwingDropTargetAsNecessary->firePropertyChange
JApplet#getTransferHandler():::Gets the transferHandler property.:::return
JApplet#update(Graphics):::Just calls paint(g):::paint
JApplet#setJMenuBar(JMenuBar):::Sets the menubar for this applet.:::getRootPane->setJMenuBar
JApplet#getJMenuBar():::Returns the menubar set on this applet.:::return->getRootPane->getJMenuBar
JApplet#isRootPaneCheckingEnabled():::Returns whether calls to add and setLayout are forwarded to the contentPane.:::return
JApplet#setRootPaneCheckingEnabled(boolean):::Sets whether calls to add and setLayout are forwarded to the contentPane.:::
JApplet#addImpl(Component, Object, int):::Adds the specified child Component:::if->isRootPaneCheckingEnabled->getContentPane->add->else->super->addImpl
JApplet#remove(Component):::Removes the specified component from the container:::if->super->remove->else->getContentPane->remove
JApplet#setLayout(LayoutManager):::Sets the LayoutManager:::if->isRootPaneCheckingEnabled->getContentPane->setLayout->else->super->setLayout
JApplet#getRootPane():::Returns the rootPane object for this applet.:::return
JApplet#setRootPane(JRootPane):::Sets the rootPane property:::if->remove->if->checkingEnabled->isRootPaneCheckingEnabled->try->setRootPaneCheckingEnabled->add->catch->finally->setRootPaneCheckingEnabled
JApplet#getContentPane():::Returns the contentPane object for this applet.:::return->getRootPane->getContentPane
JApplet#setContentPane(Container):::Sets the contentPane property:::getRootPane->setContentPane
JApplet#getLayeredPane():::Returns the layeredPane object for this applet.:::return->getRootPane->getLayeredPane
JApplet#setLayeredPane(JLayeredPane):::Sets the layeredPane property:::getRootPane->setLayeredPane
JApplet#getGlassPane():::Returns the glassPane object for this applet.:::return->getRootPane->getGlassPane
JApplet#setGlassPane(Component):::Sets the glassPane property:::getRootPane->setGlassPane
JApplet#getGraphics()::: applet get graphics:::JComponent->getGraphicsInvoked->return->super->getGraphics
JApplet#repaint(long, int, int, int, int):::Repaints the specified rectangle of this component within time milliseconds:::if->RepaintManager->currentManager->addDirtyRegion->else->super->repaint
JApplet#paramString():::Returns a string representation of this JApplet:::rootPaneString->rootPane->toString->rootPaneCheckingEnabledString->return->super->paramString
JApplet#getAccessibleContext():::Gets the AccessibleContext associated with this JApplet:::if->new->AccessibleJApplet->return
JButton#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JButton#getUIClassID():::Returns a string that specifies the name of the L&amp;F class that renders this component.:::return
JButton#isDefaultButton():::Gets the value of the defaultButton property, which if true means that this button is the current default button for its JRootPane:::root->SwingUtilities->getRootPane->if->return->root->getDefaultButton->return
JButton#isDefaultCapable():::Gets the value of the defaultCapable property.:::return
JButton#setDefaultCapable(boolean):::Sets the defaultCapable property, which determines whether this button can be made the default button for its root pane:::oldDefaultCapable->firePropertyChange
JButton#removeNotify():::Overrides JComponent.removeNotify to check if this button is currently set as the default button on the RootPane, and if so, sets the RootPane's default button to null to ensure the RootPane doesn't hold onto an invalid button reference.:::root->SwingUtilities->getRootPane->if->root->getDefaultButton->root->setDefaultButton->super->removeNotify
JButton#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JButton#paramString():::Returns a string representation of this JButton:::defaultCapableString->return->super->paramString
JButton#getAccessibleContext():::Gets the AccessibleContext associated with this JButton:::if->new->AccessibleJButton->return
JButton.AccessibleJButton#getAccessibleRole():::Get the role of this object.:::return
JCheckBox#setBorderPaintedFlat(boolean):::Sets the borderPaintedFlat property, which gives a hint to the look and feel as to the appearance of the check box border:::oldValue->firePropertyChange->if->revalidate->repaint
JCheckBox#isBorderPaintedFlat():::Gets the value of the borderPaintedFlat property.:::return
JCheckBox#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JCheckBox#getUIClassID():::Returns a string that specifies the name of the L&amp;F class that renders this component.:::return
JCheckBox#setIconFromAction(Action):::The icon for checkboxs comes from the look and feel, not the Action; this is overriden to do nothing.:::
JCheckBox#writeObject(ObjectOutputStream)::: check box write object:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JCheckBox#readObject(ObjectInputStream):::See JComponent.readObject() for information about serialization in Swing.:::s->defaultReadObject->if->getUIClassID->equals->updateUI
JCheckBox#paramString():::Returns a string representation of this JCheckBox:::return->super->paramString
JCheckBox#getAccessibleContext():::Gets the AccessibleContext associated with this JCheckBox:::if->new->AccessibleJCheckBox->return
JCheckBox.AccessibleJCheckBox#getAccessibleRole():::Get the role of this object.:::return
JCheckBoxMenuItem#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JCheckBoxMenuItem#getState():::Returns the selected-state of the item:::return->isSelected
JCheckBoxMenuItem#setState(boolean):::Sets the selected-state of the item:::setSelected
JCheckBoxMenuItem#getSelectedObjects():::Returns an array (length 1) containing the check box menu item label or null if the check box is not selected.:::if->isSelected->return->selectedObjects->new->ObjectArr->getText->return
JCheckBoxMenuItem#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JCheckBoxMenuItem#paramString():::Returns a string representation of this JCheckBoxMenuItem:::return->super->paramString
JCheckBoxMenuItem#shouldUpdateSelectedStateFromAction():::Overriden to return true, JCheckBoxMenuItem supports the selected state.:::return
JCheckBoxMenuItem#getAccessibleContext():::Gets the AccessibleContext associated with this JCheckBoxMenuItem:::if->new->AccessibleJCheckBoxMenuItem->return
JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem#getAccessibleRole():::Get the role of this object.:::return
JColorChooser#showDialog(Component, String, Color):::Shows a modal color-chooser dialog and blocks until the dialog is hidden:::return->showDialog
JColorChooser#showDialog(Component, String, Color, boolean):::Shows a modal color-chooser dialog and blocks until the dialog is hidden:::pane->new->JColorChooser->foreach->pane->getChooserPanels->ccPanel->setColorTransparencySelectionEnabled->ok->new->ColorTracker->dialog->createDialog->dialog->new->ColorChooserDialog.DisposeOnClose->addComponentListener->dialog->show->return->ok->getColor
JColorChooser#createDialog(Component, String, boolean, JColorChooser, ActionListener, ActionListener):::Creates and returns a new dialog containing the specified ColorChooser pane along with "OK", "Cancel", and "Reset" buttons:::window->JOptionPane->getWindowForComponent->dialog->if->new->ColorChooserDialog->else->new->ColorChooserDialog->dialog->getAccessibleContext->setAccessibleDescription->return
JColorChooser#getUI():::Returns the L&amp;F object that renders this component.:::return
JColorChooser#setUI(ColorChooserUI):::Sets the L&amp;F object that renders this component.:::super->setUI
JColorChooser#updateUI():::Notification from the UIManager that the L&amp;F has changed:::UIManager->getUI->setUI
JColorChooser#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JColorChooser#getColor():::Gets the current color value from the color chooser:::return->selectionModel->getSelectedColor
JColorChooser#setColor(Color):::Sets the current color of the color chooser to the specified color:::selectionModel->setSelectedColor
JColorChooser#setColor(int, int, int):::Sets the current color of the color chooser to the specified RGB color:::new->Color->setColor
JColorChooser#setColor(int):::Sets the current color of the color chooser to the specified color.:::setColor
JColorChooser#setDragEnabled(boolean):::Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException
JColorChooser#getDragEnabled():::Gets the value of the dragEnabled property.:::return
JColorChooser#setPreviewPanel(JComponent):::Sets the current preview panel:::if->oldPreview->firePropertyChange
JColorChooser#getPreviewPanel():::Returns the preview panel that shows a chosen color.:::return
JColorChooser#addChooserPanel(AbstractColorChooserPanel):::Adds a color chooser panel to the color chooser.:::oldPanels->getChooserPanels->newPanels->new->AbstractColorChooserPanelArr->System->arraycopy->setChooserPanels
JColorChooser#removeChooserPanel(AbstractColorChooserPanel):::Removes the Color Panel specified.:::containedAt->for->i->if->throw->new->IllegalArgumentException->newArray->new->AbstractColorChooserPanelArr->if->System->arraycopy->else->if->System->arraycopy->else->System->arraycopy->System->arraycopy->setChooserPanels->return
JColorChooser#setChooserPanels(AbstractColorChooserPanel[]):::Specifies the Color Panels used to choose a color value.:::oldValue->Arrays->copyOf->firePropertyChange
JColorChooser#getChooserPanels():::Returns the specified color panels.:::return->Arrays->copyOf
JColorChooser#getSelectionModel():::Returns the data model that handles color selections.:::return
JColorChooser#setSelectionModel(ColorSelectionModel):::Sets the model containing the selected color.:::oldModel->firePropertyChange
JColorChooser#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JColorChooser#paramString():::Returns a string representation of this JColorChooser:::chooserPanelsString->new->StringBuilder->foreach->chooserPanelsString->append->append->append->previewPanelString->previewPanel->toString->return->super->paramString->chooserPanelsString->toString
JColorChooser#getAccessibleContext():::Gets the AccessibleContext associated with this JColorChooser:::if->new->AccessibleJColorChooser->return
JColorChooser.AccessibleJColorChooser#getAccessibleRole():::Get the role of this object.:::return
ColorChooserDialog#initColorChooserDialog(Component, JColorChooser, ActionListener, ActionListener)::: color chooser dialog init color chooser dialog:::locale->getLocale->okString->UIManager->getString->cancelString->UIManager->getString->resetString->UIManager->getString->contentPane->getContentPane->contentPane->new->BorderLayout->setLayout->contentPane->add->buttonPane->new->JPanel->buttonPane->new->FlowLayout->setLayout->okButton->new->JButton->getRootPane->setDefaultButton->okButton->getAccessibleContext->setAccessibleDescription->okButton->setActionCommand->okButton->new->ActionListener->addActionListener->if->okButton->addActionListener->buttonPane->add->new->JButton->cancelButton->getAccessibleContext->setAccessibleDescription->cancelKeyAction->new->AbstractAction->cancelKeyStroke->KeyStroke->getKeyStroke->inputMap->cancelButton->getInputMap->actionMap->cancelButton->getActionMap->if->inputMap->put->actionMap->put->cancelButton->setActionCommand->cancelButton->new->ActionListener->addActionListener->if->cancelButton->addActionListener->buttonPane->add->resetButton->new->JButton->resetButton->getAccessibleContext->setAccessibleDescription->resetButton->new->ActionListener->addActionListener->mnemonic->SwingUtilities2->getUIDefaultsInt->if->resetButton->setMnemonic->buttonPane->add->contentPane->add->if->JDialog->isDefaultLookAndFeelDecorated->supportsWindowDecorations->UIManager->getLookAndFeel->getSupportsWindowDecorations->if->getRootPane->setWindowDecorationStyle->getRootPane->getComponentOrientation->applyComponentOrientation->pack->setLocationRelativeTo->this->new->Closer->addWindowListener
ColorChooserDialog#show()::: color chooser dialog show:::chooserPane->getColor->super->show
ColorChooserDialog#reset()::: color chooser dialog reset:::chooserPane->setColor
ColorChooserDialog.Closer#windowClosing(WindowEvent)::: closer window closing:::cancelButton->doClick->w->e->getWindow->w->hide
ColorChooserDialog.DisposeOnClose#componentHidden(ComponentEvent)::: dispose on close component hidden:::w->e->getComponent->w->dispose
ColorTracker#actionPerformed(ActionEvent)::: color tracker action performed:::chooser->getColor
ColorTracker#getColor()::: color tracker get color:::return
JComboBox#init()::: combo box init:::installAncestorListener->setUIProperty->updateUI
JComboBox#installAncestorListener():::Registers ancestor listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible:::new->AncestorListener->addAncestorListener
JComboBox#setUI(ComboBoxUI):::Sets the L&amp;F object that renders this component.:::super->setUI
JComboBox#updateUI():::Resets the UI property to a value from the current look and feel.:::if->try->UIManager->getUI->setUI->renderer->getRenderer->if->SwingUtilities->updateComponentTreeUI->catch->finally
JComboBox#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JComboBox#getUI():::Returns the L&amp;F object that renders this component.:::return
JComboBox#setModel(ComboBoxModel):::Sets the data model that the JComboBox uses to obtain the list of items.:::oldModel->if->oldModel->removeListDataListener->dataModel->addListDataListener->dataModel->getSelectedItem->firePropertyChange
JComboBox#getModel():::Returns the data model currently used by the JComboBox.:::return
JComboBox#setLightWeightPopupEnabled(boolean):::Sets the lightWeightPopupEnabled property, which provides a hint as to whether or not a lightweight Component should be used to contain the JComboBox, versus a heavyweight Component such as a Panel or a Window:::oldFlag->firePropertyChange
JComboBox#isLightWeightPopupEnabled():::Gets the value of the lightWeightPopupEnabled property.:::return
JComboBox#setEditable(boolean):::Determines whether the JComboBox field is editable:::oldFlag->firePropertyChange
JComboBox#isEditable():::Returns true if the JComboBox is editable:::return
JComboBox#setMaximumRowCount(int):::Sets the maximum number of rows the JComboBox displays:::oldCount->firePropertyChange
JComboBox#getMaximumRowCount():::Returns the maximum number of items the combo box can display without a scrollbar:::return
JComboBox#setRenderer(ListCellRenderer):::Sets the renderer that paints the list items and the item selected from the list in the JComboBox field:::oldRenderer->firePropertyChange->invalidate
JComboBox#getRenderer():::Returns the renderer used to display the selected item in the JComboBox field.:::return
JComboBox#setEditor(ComboBoxEditor):::Sets the editor used to paint and edit the selected item in the JComboBox field:::oldEditor->if->editor->removeActionListener->if->editor->addActionListener->firePropertyChange
JComboBox#getEditor():::Returns the editor used to paint and edit the selected item in the JComboBox field.:::return
JComboBox#setSelectedItem(Object):::Sets the selected item in the combo box display area to the object in the argument:::oldSelection->objectToSelect->if->oldSelection->equals->if->isEditable->found->for->i->dataModel->getSize->if->return->getEditor->setItem->dataModel->setSelectedItem->if->dataModel->getSelectedItem->selectedItemChanged->fireActionEvent
JComboBox#getSelectedItem():::Returns the current selected item:::return->dataModel->getSelectedItem
JComboBox#setSelectedIndex(int):::Selects the item at index anIndex.:::size->dataModel->getSize->if->setSelectedItem->else->if->throw->new->IllegalArgumentException->else->dataModel->getElementAt->setSelectedItem
JComboBox#getSelectedIndex():::Returns the first item in the list that matches the given item:::sObject->dataModel->getSelectedItem->i->c->obj->for->dataModel->getSize->return
JComboBox#getPrototypeDisplayValue():::Returns the "prototypical display" value - an Object used for the calculation of the display height and width.:::return
JComboBox#setPrototypeDisplayValue(E):::Sets the prototype display value used to calculate the size of the display for the UI portion:::oldValue->firePropertyChange
JComboBox#addItem(E):::Adds an item to the item list:::checkMutableComboBoxModel->addElement
JComboBox#insertItemAt(E, int):::Inserts an item into the item list at a given index:::checkMutableComboBoxModel->insertElementAt
JComboBox#removeItem(Object):::Removes an item from the item list:::checkMutableComboBoxModel->removeElement
JComboBox#removeItemAt(int):::Removes the item at anIndex This method works only if the JComboBox uses a mutable data model.:::checkMutableComboBoxModel->removeElementAt
JComboBox#removeAllItems():::Removes all items from the item list.:::checkMutableComboBoxModel->model->size->model->getSize->if->removeAllElements->else->for->i->if->isEditable->editor->setItem
JComboBox#checkMutableComboBoxModel():::Checks that the dataModel is an instance of MutableComboBoxModel:::if->throw->new->RuntimeException
JComboBox#showPopup():::Causes the combo box to display its popup window.:::setPopupVisible
JComboBox#hidePopup():::Causes the combo box to close its popup window.:::setPopupVisible
JComboBox#setPopupVisible(boolean):::Sets the visibility of the popup.:::getUI->setPopupVisible
JComboBox#isPopupVisible():::Determines the visibility of the popup.:::return->getUI->isPopupVisible
JComboBox#addItemListener(ItemListener):::Adds an ItemListener:::listenerList->add
JComboBox#removeItemListener(ItemListener):::Removes an ItemListener.:::listenerList->remove
JComboBox#getItemListeners():::Returns an array of all the ItemListeners added to this JComboBox with addItemListener().:::return->listenerList->getListeners
JComboBox#addActionListener(ActionListener):::Adds an ActionListener:::listenerList->add
JComboBox#removeActionListener(ActionListener):::Removes an ActionListener.:::if->getAction->setAction->else->listenerList->remove
JComboBox#getActionListeners():::Returns an array of all the ActionListeners added to this JComboBox with addActionListener().:::return->listenerList->getListeners
JComboBox#addPopupMenuListener(PopupMenuListener):::Adds a PopupMenu listener which will listen to notification messages from the popup portion of the combo box:::listenerList->add
JComboBox#removePopupMenuListener(PopupMenuListener):::Removes a PopupMenuListener.:::listenerList->remove
JComboBox#getPopupMenuListeners():::Returns an array of all the PopupMenuListeners added to this JComboBox with addPopupMenuListener().:::return->listenerList->getListeners
JComboBox#firePopupMenuWillBecomeVisible():::Notifies PopupMenuListeners that the popup portion of the combo box will become visible:::listeners->listenerList->getListenerList->e->for->i
JComboBox#firePopupMenuWillBecomeInvisible():::Notifies PopupMenuListeners that the popup portion of the combo box has become invisible:::listeners->listenerList->getListenerList->e->for->i
JComboBox#firePopupMenuCanceled():::Notifies PopupMenuListeners that the popup portion of the combo box has been canceled:::listeners->listenerList->getListenerList->e->for->i
JComboBox#setActionCommand(String):::Sets the action command that should be included in the event sent to action listeners.:::
JComboBox#getActionCommand():::Returns the action command that is included in the event sent to action listeners.:::return
JComboBox#setAction(Action):::Sets the Action for the ActionEvent source:::oldValue->getAction->if->action->equals->if->removeActionListener->oldValue->removePropertyChangeListener->configurePropertiesFromAction->if->if->isListener->addActionListener->createActionPropertyChangeListener->action->addPropertyChangeListener->firePropertyChange
JComboBox#isListener(Class, ActionListener)::: combo box is listener:::isListener->listeners->listenerList->getListenerList->for->i->return
JComboBox#getAction():::Returns the currently set Action for this ActionEvent source, or null if no Action is set.:::return
JComboBox#configurePropertiesFromAction(Action):::Sets the properties on this combobox to match those in the specified Action:::AbstractAction->setEnabledFromAction->AbstractAction->setToolTipTextFromAction->setActionCommandFromAction
JComboBox#createActionPropertyChangeListener(Action):::Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties:::return->new->ComboBoxActionPropertyChangeListener
JComboBox#actionPropertyChanged(Action, String):::Updates the combobox's state in response to property changes in associated action:::if->setActionCommandFromAction->else->if->AbstractAction->setEnabledFromAction->else->if->AbstractAction->setToolTipTextFromAction
JComboBox#setActionCommandFromAction(Action)::: combo box set action command from action:::a->getValue->setActionCommand
JComboBox.ComboBoxActionPropertyChangeListener#actionPropertyChanged(JComboBox, Action, PropertyChangeEvent)::: combo box action property change listener action property changed:::if->AbstractAction->shouldReconfigure->cb->configurePropertiesFromAction->else->cb->e->getPropertyName->actionPropertyChanged
JComboBox#fireItemStateChanged(ItemEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
JComboBox#fireActionEvent():::Notifies all listeners that have registered interest for notification on this event type.:::if->e->listeners->listenerList->getListenerList->mostRecentEventTime->EventQueue->getMostRecentEventTime->modifiers->currentEvent->EventQueue->getCurrentEvent->if->getModifiers->else->if->getModifiers->try->for->i->catch->finally
JComboBox#selectedItemChanged():::This protected method is implementation specific:::if->new->ItemEvent->fireItemStateChanged->dataModel->getSelectedItem->if->new->ItemEvent->fireItemStateChanged
JComboBox#getSelectedObjects():::Returns an array containing the selected item:::selectedObject->getSelectedItem->if->return->new->ObjectArr->else->result->new->ObjectArr->return
JComboBox#actionPerformed(ActionEvent):::This method is public as an implementation side effect:::setPopupVisible->getModel->getEditor->getItem->setSelectedItem->oldCommand->getActionCommand->setActionCommand->fireActionEvent->setActionCommand
JComboBox#contentsChanged(ListDataEvent):::This method is public as an implementation side effect:::oldSelection->newSelection->dataModel->getSelectedItem->if->oldSelection->equals->selectedItemChanged->if->fireActionEvent
JComboBox#intervalAdded(ListDataEvent):::This method is public as an implementation side effect:::if->dataModel->getSelectedItem->selectedItemChanged
JComboBox#intervalRemoved(ListDataEvent):::This method is public as an implementation side effect:::contentsChanged
JComboBox#selectWithKeyChar(char):::Selects the list item that corresponds to the specified keyboard character and returns true, if there is an item corresponding to that character:::index->if->createDefaultKeySelectionManager->keySelectionManager->getModel->selectionForKey->if->setSelectedIndex->return->else->return
JComboBox#setEnabled(boolean):::Enables the combo box so that items can be selected:::super->setEnabled->isEnabled->isEnabled->firePropertyChange
JComboBox#configureEditor(ComboBoxEditor, Object):::Initializes the editor with the specified item.:::anEditor->setItem
JComboBox#processKeyEvent(KeyEvent):::Handles KeyEvents, looking for the Tab key:::if->e->getKeyCode->hidePopup->super->processKeyEvent
JComboBox#processKeyBinding(KeyStroke, KeyEvent, int, boolean)::: combo box process key binding:::if->super->processKeyBinding->return->if->isEditable->getEditor->getClientProperty->equals->return->editorComponent->getEditor->getEditorComponent->if->component->return->component->processKeyBinding->return
JComboBox#setKeySelectionManager(KeySelectionManager):::Sets the object that translates a keyboard character into a list selection:::
JComboBox#getKeySelectionManager():::Returns the list's key-selection manager.:::return
JComboBox#getItemCount():::Returns the number of items in the list.:::return->dataModel->getSize
JComboBox#getItemAt(int):::Returns the list item at the specified index:::return->dataModel->getElementAt
JComboBox#createDefaultKeySelectionManager():::Returns an instance of the default key-selection manager.:::return->new->DefaultKeySelectionManager
JComboBox.KeySelectionManager#selectionForKey(char, ComboBoxModel):::Given aKey and the model, returns the row  that should become selected:::
JComboBox.DefaultKeySelectionManager#selectionForKey(char, ComboBoxModel)::: default key selection manager selection for key:::i->c->currentSelection->selectedItem->aModel->getSelectedItem->v->pattern->if->for->aModel->getSize->toLowerCase->pattern->charAt->for->aModel->getSize->for->return
JComboBox#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JComboBox#paramString():::Returns a string representation of this JComboBox:::selectedItemReminderString->selectedItemReminder->toString->isEditableString->lightWeightPopupEnabledString->return->super->paramString
JComboBox#getAccessibleContext():::Gets the AccessibleContext associated with this JComboBox:::if->new->AccessibleJComboBox->return
JComboBox.AccessibleJComboBox.AccessibleJComboBoxPropertyChangeListener#propertyChange(PropertyChangeEvent)::: accessible combo box property change listener property change:::if->e->getPropertyName->setEditorNameAndDescription
JComboBox.AccessibleJComboBox#setEditorNameAndDescription()::: accessible combo box set editor name and description:::editor->JComboBox.this->getEditor->if->comp->editor->getEditorComponent->if->ac->comp->getAccessibleContext->if->ac->getAccessibleName->setAccessibleName->ac->getAccessibleDescription->setAccessibleDescription
JComboBox.AccessibleJComboBox.AccessibleJComboBoxPopupMenuListener#popupMenuWillBecomeVisible(PopupMenuEvent)::: This method is called before the popup menu becomes visible:::if->return->selectedIndex->popupList->getSelectedIndex->if->return->popupList->getAccessibleContext->getAccessibleChild
JComboBox.AccessibleJComboBox.AccessibleJComboBoxPopupMenuListener#popupMenuWillBecomeInvisible(PopupMenuEvent):::This method is called before the popup menu becomes invisible Note that a JPopupMenu can become invisible any time:::
JComboBox.AccessibleJComboBox.AccessibleJComboBoxPopupMenuListener#popupMenuCanceled(PopupMenuEvent):::This method is called when the popup menu is canceled:::
JComboBox.AccessibleJComboBox.AccessibleJComboBoxListSelectionListener#valueChanged(ListSelectionEvent)::: accessible combo box list selection listener value changed:::if->return->selectedIndex->popupList->getSelectedIndex->if->return->selectedAccessible->popupList->getAccessibleContext->getAccessibleChild->if->return->pce->if->new->PropertyChangeEvent->firePropertyChange->new->PropertyChangeEvent->firePropertyChange->firePropertyChange
JComboBox.AccessibleJComboBox#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::if->return->ui->getAccessibleChildrenCount->else->return->super->getAccessibleChildrenCount
JComboBox.AccessibleJComboBox#getAccessibleChild(int):::Returns the nth Accessible child of the object:::if->return->ui->getAccessibleChild->else->return->super->getAccessibleChild
JComboBox.AccessibleJComboBox#getAccessibleRole():::Get the role of this object.:::return
JComboBox.AccessibleJComboBox#getAccessibleStateSet():::Gets the state set of this object:::ass->super->getAccessibleStateSet->if->new->AccessibleStateSet->if->JComboBox.this->isPopupVisible->ass->add->else->ass->add->return
JComboBox.AccessibleJComboBox#getAccessibleAction():::Get the AccessibleAction associated with this object:::return
JComboBox.AccessibleJComboBox#getAccessibleActionDescription(int):::Return a description of the specified action of the object.:::if->return->UIManager->getString->else->return
JComboBox.AccessibleJComboBox#getAccessibleActionCount():::Returns the number of Actions available in this object:::return
JComboBox.AccessibleJComboBox#doAccessibleAction(int):::Perform the specified Action on the object:::if->isPopupVisible->setPopupVisible->return->else->return
JComboBox.AccessibleJComboBox#getAccessibleSelection():::Get the AccessibleSelection associated with this object:::return
JComboBox.AccessibleJComboBox#getAccessibleSelectionCount():::Returns the number of Accessible children currently selected:::o->JComboBox.this->getSelectedItem->if->return->else->return
JComboBox.AccessibleJComboBox#getAccessibleSelection(int):::Returns an Accessible representing the specified selected child in the popup:::a->JComboBox.this->getUI->getAccessibleChild->if->list->getList->ac->list->getAccessibleContext->if->as->ac->getAccessibleSelection->if->return->as->getAccessibleSelection->return
JComboBox.AccessibleJComboBox#isAccessibleChildSelected(int):::Determines if the current child of this object is selected.:::return->JComboBox.this->getSelectedIndex
JComboBox.AccessibleJComboBox#addAccessibleSelection(int):::Adds the specified Accessible child of the object to the object's selection:::clearAccessibleSelection->JComboBox.this->setSelectedIndex
JComboBox.AccessibleJComboBox#removeAccessibleSelection(int):::Removes the specified child of the object from the object's selection:::if->JComboBox.this->getSelectedIndex->clearAccessibleSelection
JComboBox.AccessibleJComboBox#clearAccessibleSelection():::Clears the selection in the object, so that no children in the object are selected.:::JComboBox.this->setSelectedIndex
JComboBox.AccessibleJComboBox#selectAllAccessibleSelection():::Causes every child of the object to be selected if the object supports multiple selections.:::
JComboBox.AccessibleJComboBox.AccessibleEditor#getAccessibleContext()::: accessible editor get accessible context:::if->c->JComboBox.this->getEditor->getEditorComponent->if->new->EditorAccessibleContext->return
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleName():::Gets the accessibleName property of this object:::return->ac->getAccessibleName
JComboBox.AccessibleJComboBox.EditorAccessibleContext#setAccessibleName(String):::Sets the localized accessible name of this object:::ac->setAccessibleName
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleDescription():::Gets the accessibleDescription property of this object:::return->ac->getAccessibleDescription
JComboBox.AccessibleJComboBox.EditorAccessibleContext#setAccessibleDescription(String):::Sets the accessible description of this object:::ac->setAccessibleDescription
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleRole():::Gets the role of this object:::return->ac->getAccessibleRole
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleStateSet():::Gets the state set of this object:::return->ac->getAccessibleStateSet
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleParent():::Gets the Accessible parent of this object.:::return->ac->getAccessibleParent
JComboBox.AccessibleJComboBox.EditorAccessibleContext#setAccessibleParent(Accessible):::Sets the Accessible parent of this object:::ac->setAccessibleParent
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleIndexInParent():::Gets the 0-based index of this object in its accessible parent.:::return->JComboBox.this->getSelectedIndex
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleChildrenCount():::Returns the number of accessible children of the object.:::return->ac->getAccessibleChildrenCount
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleChild(int):::Returns the specified Accessible child of the object:::return->ac->getAccessibleChild
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getLocale():::Gets the locale of the component:::return->ac->getLocale
JComboBox.AccessibleJComboBox.EditorAccessibleContext#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::ac->addPropertyChangeListener
JComboBox.AccessibleJComboBox.EditorAccessibleContext#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::ac->removePropertyChangeListener
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleAction():::Gets the AccessibleAction associated with this object that supports one or more actions.:::return->ac->getAccessibleAction
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleComponent():::Gets the AccessibleComponent associated with this object that has a graphical representation.:::return->ac->getAccessibleComponent
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleSelection():::Gets the AccessibleSelection associated with this object which allows its Accessible children to be selected.:::return->ac->getAccessibleSelection
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleText():::Gets the AccessibleText associated with this object presenting text on the display.:::return->ac->getAccessibleText
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleEditableText():::Gets the AccessibleEditableText associated with this object presenting editable text on the display.:::return->ac->getAccessibleEditableText
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleValue():::Gets the AccessibleValue associated with this object that supports a Numerical value.:::return->ac->getAccessibleValue
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleIcon():::Gets the AccessibleIcons associated with an object that has one or more associated icons:::return->ac->getAccessibleIcon
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleRelationSet():::Gets the AccessibleRelationSet associated with an object:::return->ac->getAccessibleRelationSet
JComboBox.AccessibleJComboBox.EditorAccessibleContext#getAccessibleTable():::Gets the AccessibleTable associated with an object:::return->ac->getAccessibleTable
JComboBox.AccessibleJComboBox.EditorAccessibleContext#firePropertyChange(String, Object, Object):::Support for reporting bound property changes:::ac->firePropertyChange
JComponent#safelyGetGraphics(Component)::: component safely get graphics:::return->SwingUtilities->getRoot->safelyGetGraphics
JComponent#safelyGetGraphics(Component, Component)::: component safely get graphics:::synchronized->g->c->getGraphics->return
JComponent#getGraphicsInvoked(Component)::: component get graphics invoked:::if->JComponent->isComponentObtainingGraphicsFrom->rootPane->getRootPane->if->rootPane->disableTrueDoubleBuffering
JComponent#isComponentObtainingGraphicsFrom(Component):::Returns true if c is the component the graphics is being requested of:::synchronized->return
JComponent#getManagingFocusForwardTraversalKeys():::Returns the Set of KeyStrokes to use if the component is managing focus for forward focus traversal.:::synchronized->if->new->HashSet<KeyStroke>->managingFocusForwardTraversalKeys->KeyStroke->getKeyStroke->add->return
JComponent#getManagingFocusBackwardTraversalKeys():::Returns the Set of KeyStrokes to use if the component is managing focus for backward focus traversal.:::synchronized->if->new->HashSet<KeyStroke>->managingFocusBackwardTraversalKeys->KeyStroke->getKeyStroke->add->return
JComponent#fetchRectangle()::: component fetch rectangle:::synchronized->rect->size->tempRectangles->size->if->tempRectangles->remove->else->new->Rectangle->return
JComponent#recycleRectangle(Rectangle)::: component recycle rectangle:::synchronized->tempRectangles->add
JComponent#setInheritsPopupMenu(boolean):::Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it:::oldValue->getFlag->setFlag->firePropertyChange
JComponent#getInheritsPopupMenu():::Returns true if the JPopupMenu should be inherited from the parent.:::return->getFlag
JComponent#setComponentPopupMenu(JPopupMenu):::Sets the JPopupMenu for this JComponent:::if->enableEvents->oldPopup->firePropertyChange
JComponent#getComponentPopupMenu():::Returns JPopupMenu that assigned for this component:::if->getInheritsPopupMenu->return->if->parent->getParent->while->if->return->getComponentPopupMenu->if->break->parent->getParent->return->return
JComponent#updateUI():::Resets the UI property to a value from the current look and feel:::
JComponent#getUI():::Returns the look and feel delegate that renders this component.:::return
JComponent#setUI(ComponentUI):::Sets the look and feel delegate for this component:::uninstallUIAndProperties->UIManager->getDefaults->get->UIManager->getDefaults->get->oldUI->if->ui->installUI->firePropertyChange->revalidate->repaint
JComponent#uninstallUIAndProperties():::Uninstalls the UI, if any, and any client properties designated as being specific to the installed UI - instances of UIClientPropertyKey.:::if->ui->uninstallUI->if->synchronized->clientPropertyKeys->clientProperties->getKeys->if->foreach->if->putClientProperty
JComponent#getUIClassID():::Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component:::return
JComponent#getComponentGraphics(Graphics):::Returns the graphics object used to paint this component:::componentGraphics->if->if->DebugGraphics->debugComponentCount->shouldDebugGraphics->new->DebugGraphics->componentGraphics->getForeground->setColor->componentGraphics->getFont->setFont->return
JComponent#paintComponent(Graphics):::Calls the UI delegate's paint method, if the UI delegate is non-null:::if->scratchGraphics->g->create->try->ui->update->catch->finally->scratchGraphics->dispose
JComponent#paintChildren(Graphics):::Paints this component's children:::sg->synchronized->getTreeLock->i->getComponentCount->if->return->if->paintingChild->isOpaque->for->tmpRect->fetchRectangle->checkSiblings->isOptimizedDrawingEnabled->checkIfChildObscuredBySibling->clipBounds->if->sg->getClipBounds->if->getWidth->getHeight->new->Rectangle->printing->getFlag->window->SwingUtilities->getWindowAncestor->isWindowOpaque->window->isOpaque->for->recycleRectangle
JComponent#paintBorder(Graphics):::Paints the component's border:::border->getBorder->if->border->getWidth->getHeight->paintBorder
JComponent#update(Graphics):::Calls paint:::paint
JComponent#paint(Graphics):::Invoked by Swing to draw components:::shouldClearPaintFlags->if->getWidth->getHeight->return->componentGraphics->getComponentGraphics->co->componentGraphics->create->try->repaintManager->RepaintManager->currentManager->clipRect->co->getClipBounds->clipX->clipY->clipW->clipH->if->getWidth->getHeight->else->if->getWidth->getWidth->if->getHeight->getHeight->if->getParent->getParent->adjustPaintFlags->bw->bh->printing->getFlag->if->repaintManager->isDoubleBufferingEnabled->getFlag->isDoubleBuffered->getFlag->repaintManager->isPainting->repaintManager->beginPaint->try->repaintManager->paint->catch->finally->repaintManager->endPaint->else->if->co->setClip->if->rectangleIsObscured->if->paintComponent->paintBorder->else->printComponent->printBorder->if->paintChildren->else->printChildren->catch->finally->co->dispose->if->setFlag->setFlag->setFlag->setFlag
JComponent#paintForceDoubleBuffered(Graphics)::: component paint force double buffered:::rm->RepaintManager->currentManager->clip->g->getClipBounds->rm->beginPaint->setFlag->try->rm->paint->catch->finally->rm->endPaint->setFlag
JComponent#isPainting():::Returns true if this component, or any of its ancestors, are in the processing of painting.:::component->while->if->getFlag->return->component->getParent->return
JComponent#adjustPaintFlags()::: component adjust paint flags:::jparent->parent->for->getParent->parent->getParent
JComponent#printAll(Graphics):::Invoke this method to print the component:::setFlag->try->print->catch->finally->setFlag
JComponent#print(Graphics):::Invoke this method to print the component to the specified Graphics:::setFlag->firePropertyChange->try->paint->catch->finally->setFlag->firePropertyChange
JComponent#printComponent(Graphics):::This is invoked during a printing operation:::paintComponent
JComponent#printChildren(Graphics):::Prints this component's children:::paintChildren
JComponent#printBorder(Graphics):::Prints the component's border:::paintBorder
JComponent#isPaintingTile()::: Returns true if the component is currently painting a tile:::return->getFlag
JComponent#isPaintingForPrint():::Returns true if the current painting operation on this component is part of a print operation:::return->getFlag
JComponent#isManagingFocus():::In release 1.4, the focus subsystem was rearchitected:::return
JComponent#registerNextFocusableComponent()::: component register next focusable component:::getNextFocusableComponent->registerNextFocusableComponent
JComponent#registerNextFocusableComponent(Component)::: component register next focusable component:::if->return->nearestRoot->isFocusCycleRoot->getFocusCycleRootAncestor->policy->nearestRoot->getFocusTraversalPolicy->if->new->LegacyGlueFocusTraversalPolicy->nearestRoot->setFocusTraversalPolicy->setNextFocusableComponent
JComponent#deregisterNextFocusableComponent()::: component deregister next focusable component:::nextFocusableComponent->getNextFocusableComponent->if->return->nearestRoot->isFocusCycleRoot->getFocusCycleRootAncestor->if->return->policy->nearestRoot->getFocusTraversalPolicy->if->unsetNextFocusableComponent
JComponent#setNextFocusableComponent(Component):::In release 1.4, the focus subsystem was rearchitected:::displayable->isDisplayable->if->deregisterNextFocusableComponent->putClientProperty->if->registerNextFocusableComponent
JComponent#getNextFocusableComponent():::In release 1.4, the focus subsystem was rearchitected:::return->getClientProperty
JComponent#setRequestFocusEnabled(boolean):::Provides a hint as to whether or not this JComponent should get focus:::setFlag
JComponent#isRequestFocusEnabled():::Returns true if this JComponent should get focus; otherwise returns false:::return->getFlag
JComponent#requestFocus():::Requests that this Component gets the input focus:::super->requestFocus
JComponent#requestFocus(boolean):::Requests that this Component gets the input focus:::return->super->requestFocus
JComponent#requestFocusInWindow():::Requests that this Component gets the input focus:::return->super->requestFocusInWindow
JComponent#requestFocusInWindow(boolean):::Requests that this Component gets the input focus:::return->super->requestFocusInWindow
JComponent#grabFocus():::Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window:::requestFocus
JComponent#setVerifyInputWhenFocusTarget(boolean):::Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus:::oldVerifyInputWhenFocusTarget->firePropertyChange
JComponent#getVerifyInputWhenFocusTarget():::Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.:::return
JComponent#getFontMetrics(Font):::Gets the FontMetrics for the specified Font.:::return->SwingUtilities2->getFontMetrics
JComponent#setPreferredSize(Dimension):::Sets the preferred size of this component:::super->setPreferredSize
JComponent#getPreferredSize():::If the preferredSize has been set to a non-null value just returns it:::if->isPreferredSizeSet->return->super->getPreferredSize->size->if->ui->getPreferredSize->return->super->getPreferredSize
JComponent#setMaximumSize(Dimension):::Sets the maximum size of this component to a constant value:::super->setMaximumSize
JComponent#getMaximumSize():::If the maximum size has been set to a non-null value just returns it:::if->isMaximumSizeSet->return->super->getMaximumSize->size->if->ui->getMaximumSize->return->super->getMaximumSize
JComponent#setMinimumSize(Dimension):::Sets the minimum size of this component to a constant value:::super->setMinimumSize
JComponent#getMinimumSize():::If the minimum size has been set to a non-null value just returns it:::if->isMinimumSizeSet->return->super->getMinimumSize->size->if->ui->getMinimumSize->return->super->getMinimumSize
JComponent#contains(int, int):::Gives the UI delegate an opportunity to define the precise shape of this component for the sake of mouse processing.:::return->ui->contains->super->contains
JComponent#setBorder(Border):::Sets the border of this component:::oldBorder->firePropertyChange->if->if->border->getBorderInsets->oldBorder->getBorderInsets->equals->revalidate->repaint
JComponent#getBorder():::Returns the border of this component or null if no border is currently set.:::return
JComponent#getInsets():::If a border has been set on this component, returns the border's insets; otherwise calls super.getInsets.:::if->return->border->getBorderInsets->return->super->getInsets
JComponent#getInsets(Insets):::Returns an Insets object containing this component's inset values:::if->new->Insets->if->if->return->getBorderInsets->else->return->border->getBorderInsets->else->return
JComponent#getAlignmentY():::Overrides Container.getAlignmentY to return the vertical alignment.:::if->return->return->super->getAlignmentY
JComponent#setAlignmentY(float):::Sets the vertical alignment.:::validateAlignment
JComponent#getAlignmentX():::Overrides Container.getAlignmentX to return the horizontal alignment.:::if->return->return->super->getAlignmentX
JComponent#setAlignmentX(float):::Sets the horizontal alignment.:::validateAlignment
JComponent#validateAlignment(float)::: component validate alignment:::return
JComponent#setInputVerifier(InputVerifier):::Sets the input verifier for this component.:::oldInputVerifier->getClientProperty->putClientProperty->firePropertyChange
JComponent#getInputVerifier():::Returns the input verifier for this component.:::return->getClientProperty
JComponent#getGraphics():::Returns this component's graphics context, which lets you draw on a component:::if->shouldDebugGraphics->graphics->super->getGraphics->new->DebugGraphics->return->return->super->getGraphics
JComponent#setDebugGraphicsOptions(int):::Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.:::DebugGraphics->setDebugOptions
JComponent#getDebugGraphicsOptions():::Returns the state of graphics debugging.:::return->DebugGraphics->getDebugOptions
JComponent#shouldDebugGraphics():::Returns true if debug information is enabled for this JComponent or one of its parents.:::return->DebugGraphics->shouldComponentDebug
JComponent#registerKeyboardAction(ActionListener, String, KeyStroke, int):::This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior:::inputMap->getInputMap->if->actionMap->getActionMap->action->new->ActionStandin->inputMap->put->if->actionMap->put
JComponent#registerWithKeyboardManager(boolean):::Registers any bound WHEN_IN_FOCUSED_WINDOW actions with the KeyboardManager:::inputMap->getInputMap->strokes->registered->getClientProperty->if->inputMap->allKeys->if->for->counter->else->if->registered->size->keys->registered->keys->while->keys->hasMoreElements->ks->keys->nextElement->unregisterWithKeyboardManager->registered->clear->if->if->new->Hashtable<KeyStroke,KeyStroke>->putClientProperty->for->counter->else->putClientProperty
JComponent#unregisterWithKeyboardManager():::Unregisters all the previously registered WHEN_IN_FOCUSED_WINDOW KeyStroke bindings.:::registered->getClientProperty->if->registered->size->keys->registered->keys->while->keys->hasMoreElements->ks->keys->nextElement->unregisterWithKeyboardManager->putClientProperty
JComponent#componentInputMapChanged(ComponentInputMap):::Invoked from ComponentInputMap when its bindings change:::km->getInputMap->while->km->getParent->if->registerWithKeyboardManager
JComponent#registerWithKeyboardManager(KeyStroke)::: component register with keyboard manager:::KeyboardManager->getCurrentManager->registerKeyStroke
JComponent#unregisterWithKeyboardManager(KeyStroke)::: component unregister with keyboard manager:::KeyboardManager->getCurrentManager->unregisterKeyStroke
JComponent#registerKeyboardAction(ActionListener, KeyStroke, int):::This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.:::registerKeyboardAction
JComponent#unregisterKeyboardAction(KeyStroke):::This method is now obsolete:::am->getActionMap->for->counter
JComponent#getRegisteredKeyStrokes():::Returns the KeyStrokes that will initiate registered actions.:::counts->new->intArr->strokes->new->KeyStrokeArrs->for->counter->retValue->new->KeyStrokeArr->for->counter->last->return
JComponent#getConditionForKeyStroke(KeyStroke):::Returns the condition that determines whether a registered action occurs in response to the specified keystroke:::for->counter->return
JComponent#getActionForKeyStroke(KeyStroke):::Returns the object that will perform the action registered for a given keystroke.:::am->getActionMap->if->return->for->counter->return
JComponent#resetKeyboardActions():::Unregisters all the bindings in the first tier InputMaps and ActionMap:::for->counter->am->getActionMap->if->am->clear
JComponent#setInputMap(int, InputMap):::Sets the InputMap to use under the condition condition to map:::switch->if->throw->new->IllegalArgumentException->setFlag->registerWithKeyboardManager->break->setFlag->break->setFlag->break->throw->new->IllegalArgumentException
JComponent#getInputMap(int):::Returns the InputMap that is used during condition.:::return->getInputMap
JComponent#getInputMap():::Returns the InputMap that is used when the component has focus:::return->getInputMap
JComponent#setActionMap(ActionMap):::Sets the ActionMap to am:::setFlag
JComponent#getActionMap():::Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding:::return->getActionMap
JComponent#getInputMap(int, boolean):::Returns the InputMap to use for condition condition:::switch->if->getFlag->return->if->km->new->InputMap->setInputMap->return->break->if->getFlag->return->if->km->new->InputMap->setInputMap->return->break->if->getFlag->return->if->km->new->ComponentInputMap->setInputMap->return->break->throw->new->IllegalArgumentException->return
JComponent#getActionMap(boolean):::Finds and returns the appropriate ActionMap.:::if->getFlag->return->if->am->new->ActionMap->setActionMap->return->return
JComponent#getBaseline(int, int):::Returns the baseline:::super->getBaseline->if->return->ui->getBaseline->return
JComponent#getBaselineResizeBehavior():::Returns an enum indicating how the baseline of the component changes as the size changes:::if->return->ui->getBaselineResizeBehavior->return
JComponent#requestDefaultFocus():::In release 1.4, the focus subsystem was rearchitected:::nearestRoot->isFocusCycleRoot->getFocusCycleRootAncestor->if->return->comp->nearestRoot->getFocusTraversalPolicy->getDefaultComponent->if->comp->requestFocus->return->else->return
JComponent#setVisible(boolean):::Makes the component visible or invisible:::if->isVisible->super->setVisible->if->parent->getParent->if->r->getBounds->parent->repaint->revalidate
JComponent#setEnabled(boolean):::Sets whether or not this component is enabled:::oldEnabled->isEnabled->super->setEnabled->firePropertyChange->if->repaint
JComponent#setForeground(Color):::Sets the foreground color of this component:::oldFg->getForeground->super->setForeground->if->oldFg->equals->fg->equals->repaint
JComponent#setBackground(Color):::Sets the background color of this component:::oldBg->getBackground->super->setBackground->if->oldBg->equals->bg->equals->repaint
JComponent#setFont(Font):::Sets the font for this component.:::oldFont->getFont->super->setFont->if->revalidate->repaint
JComponent#getDefaultLocale():::Returns the default locale used to initialize each JComponent's locale property upon creation:::l->SwingUtilities->appContextGet->if->Locale->getDefault->JComponent->setDefaultLocale->return
JComponent#setDefaultLocale(Locale):::Sets the default locale used to initialize each JComponent's locale property upon creation:::SwingUtilities->appContextPut
JComponent#processComponentKeyEvent(KeyEvent):::Processes any key events that the component itself recognizes:::
JComponent#processKeyEvent(KeyEvent):::Overrides processKeyEvent to process events:::result->shouldProcessKey->super->processKeyEvent->if->e->isConsumed->processComponentKeyEvent->KeyboardState->shouldProcess->if->e->isConsumed->return->if->e->getID->processKeyBindings->e->consume
JComponent#processKeyBinding(KeyStroke, KeyEvent, int, boolean):::Invoked to process the key bindings for ks as the result of the KeyEvent e:::map->getInputMap->am->getActionMap->if->isEnabled->binding->map->get->action->am->get->if->return->SwingUtilities->e->getModifiers->notifyAction->return
JComponent#processKeyBindings(KeyEvent, boolean):::This is invoked as the result of a KeyEvent that was not consumed by the FocusManager, KeyListeners, or the component:::if->SwingUtilities->isValidKeyEventForKeyBindings->return->ks->ksE->if->e->getID->KeyStroke->e->getKeyChar->getKeyStroke->else->KeyStroke->e->getKeyCode->e->getModifiers->getKeyStroke->if->e->getKeyCode->e->getExtendedKeyCode->KeyStroke->e->getExtendedKeyCode->e->getModifiers->getKeyStroke->if->processKeyBinding->return->if->processKeyBinding->return->parent->while->if->if->processKeyBinding->return->if->processKeyBinding->return->if->JComponent->processKeyBindingsForAllComponents->return->parent->getParent->if->return->JComponent->processKeyBindingsForAllComponents->return
JComponent#processKeyBindingsForAllComponents(KeyEvent, Container, boolean)::: component process key bindings for all components:::while->if->KeyboardManager->getCurrentManager->fireKeyboardAction->return->if->getOwner->else->return
JComponent#setToolTipText(String):::Registers the text to display in a tool tip:::oldText->getToolTipText->putClientProperty->toolTipManager->ToolTipManager->sharedInstance->if->if->toolTipManager->registerComponent->else->toolTipManager->unregisterComponent
JComponent#getToolTipText():::Returns the tooltip string that has been set with setToolTipText.:::return->getClientProperty
JComponent#getToolTipText(MouseEvent):::Returns the string to be used as the tooltip for event:::return->getToolTipText
JComponent#getToolTipLocation(MouseEvent):::Returns the tooltip location in this component's coordinate system:::return
JComponent#getPopupLocation(MouseEvent):::Returns the preferred location to display the popup menu in this component's coordinate system:::return
JComponent#createToolTip():::Returns the instance of JToolTip that should be used to display the tooltip:::tip->new->JToolTip->tip->setComponent->return
JComponent#scrollRectToVisible(Rectangle):::Forwards the scrollRectToVisible() message to the JComponent's parent:::parent->dx->getX->dy->getY->for->getParent->parent->getParent->if->scrollRectToVisible
JComponent#setAutoscrolls(boolean):::Sets the autoscrolls property:::setFlag->if->if->enableEvents->enableEvents->else->Autoscroller->stop
JComponent#getAutoscrolls():::Gets the autoscrolls property.:::return
JComponent#setTransferHandler(TransferHandler):::Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop:::oldHandler->getClientProperty->putClientProperty->SwingUtilities->installSwingDropTargetAsNecessary->firePropertyChange
JComponent#getTransferHandler():::Gets the transferHandler property.:::return->getClientProperty
JComponent#dropLocationForPoint(Point):::Calculates a custom drop location for this type of component, representing where a drop at the given point should insert data:::return
JComponent#setDropLocation(TransferHandler.DropLocation, Object, boolean):::Called to set or clear the drop location during a DnD operation:::return
JComponent#dndDone():::Called to indicate to this component that DnD is done:::
JComponent#processMouseEvent(MouseEvent):::Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects, refer to java.awt.Component#processMouseEvent(MouseEvent) for a complete description of this method.:::if->e->getID->Autoscroller->stop->super->processMouseEvent
JComponent#processMouseMotionEvent(MouseEvent):::Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED.:::dispatch->if->e->getID->Autoscroller->isRunning->Autoscroller->processMouseDragged->if->super->processMouseMotionEvent
JComponent#superProcessMouseMotionEvent(MouseEvent)::: component super process mouse motion event:::super->processMouseMotionEvent
JComponent#setCreatedDoubleBuffer(boolean):::This is invoked by the RepaintManager if createImage is called on the component.:::setFlag
JComponent#getCreatedDoubleBuffer():::Returns true if the RepaintManager created the double buffer image from the component.:::return->getFlag
JComponent.ActionStandin#getValue(String)::: action standin get value:::if->if->key->equals->return->if->return->action->getValue->if->key->equals->return->return
JComponent.ActionStandin#isEnabled()::: action standin is enabled:::if->return->if->return->return->action->isEnabled
JComponent.ActionStandin#actionPerformed(ActionEvent)::: action standin action performed:::if->actionListener->actionPerformed
JComponent.ActionStandin#putValue(String, Object)::: action standin put value:::
JComponent.ActionStandin#setEnabled(boolean)::: action standin set enabled:::
JComponent.ActionStandin#addPropertyChangeListener(PropertyChangeListener)::: action standin add property change listener:::
JComponent.ActionStandin#removePropertyChangeListener(PropertyChangeListener)::: action standin remove property change listener:::
JComponent.IntVector#size()::: int vector size:::return
JComponent.IntVector#elementAt(int)::: int vector element at:::return
JComponent.IntVector#addElement(int)::: int vector add element:::if->newarray->new->intArr->if->System->arraycopy
JComponent.IntVector#setElementAt(int, int)::: int vector set element at:::
JComponent.KeyboardState#getKeyCodeArray()::: keyboard state get key code array:::iv->SwingUtilities->appContextGet->if->new->IntVector->SwingUtilities->appContextPut->return
JComponent.KeyboardState#registerKeyPressed(int)::: keyboard state register key pressed:::kca->getKeyCodeArray->count->kca->size->i->for->kca->addElement
JComponent.KeyboardState#registerKeyReleased(int)::: keyboard state register key released:::kca->getKeyCodeArray->count->kca->size->i->for
JComponent.KeyboardState#keyIsPressed(int)::: keyboard state key is pressed:::kca->getKeyCodeArray->count->kca->size->i->for->return
JComponent.KeyboardState#shouldProcess(KeyEvent):::Updates internal state of the KeyboardState and returns true if the event should be processed further.:::switch->e->getID->if->e->getKeyCode->keyIsPressed->e->getKeyCode->registerKeyPressed->return->if->e->getKeyCode->keyIsPressed->e->getKeyCode->e->getKeyCode->registerKeyReleased->return->return->return->return
JComponent#enable()::: component enable:::if->isEnabled->super->enable->if->accessibleContext->firePropertyChange
JComponent#disable()::: component disable:::if->isEnabled->super->disable->if->accessibleContext->firePropertyChange
JComponent.AccessibleJComponent.AccessibleContainerHandler#componentAdded(ContainerEvent)::: accessible container handler component added:::c->e->getChild->if->AccessibleJComponent.this->c->getAccessibleContext->firePropertyChange
JComponent.AccessibleJComponent.AccessibleContainerHandler#componentRemoved(ContainerEvent)::: accessible container handler component removed:::c->e->getChild->if->AccessibleJComponent.this->c->getAccessibleContext->firePropertyChange
JComponent.AccessibleJComponent.AccessibleFocusHandler#focusGained(FocusEvent)::: accessible focus handler focus gained:::if->accessibleContext->firePropertyChange
JComponent.AccessibleJComponent.AccessibleFocusHandler#focusLost(FocusEvent)::: accessible focus handler focus lost:::if->accessibleContext->firePropertyChange
JComponent.AccessibleJComponent#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list.:::super->addPropertyChangeListener
JComponent.AccessibleJComponent#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::super->removePropertyChangeListener
JComponent.AccessibleJComponent#getBorderTitle(Border):::Recursively search through the border hierarchy (if it exists) for a TitledBorder with a non-null title:::s->if->return->getTitle->else->if->getInsideBorder->getBorderTitle->if->getOutsideBorder->getBorderTitle->return->else->return
JComponent.AccessibleJComponent#getAccessibleName():::Gets the accessible name of this object:::name->if->getClientProperty->if->getBorder->getBorderTitle->if->o->getClientProperty->if->ac->getAccessibleContext->if->ac->getAccessibleName->return
JComponent.AccessibleJComponent#getAccessibleDescription():::Gets the accessible description of this object:::description->if->getClientProperty->if->try->getToolTipText->catch->finally->if->o->getClientProperty->if->ac->getAccessibleContext->if->ac->getAccessibleDescription->return
JComponent.AccessibleJComponent#getAccessibleRole():::Gets the role of this object.:::return
JComponent.AccessibleJComponent#getAccessibleStateSet():::Gets the state of this object.:::states->super->getAccessibleStateSet->if->JComponent.this->isOpaque->states->add->return
JComponent.AccessibleJComponent#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::return->super->getAccessibleChildrenCount
JComponent.AccessibleJComponent#getAccessibleChild(int):::Returns the nth Accessible child of the object.:::return->super->getAccessibleChild
JComponent.AccessibleJComponent#getAccessibleExtendedComponent():::Returns the AccessibleExtendedComponent:::return
JComponent.AccessibleJComponent#getToolTipText():::Returns the tool tip text:::return->JComponent.this->getToolTipText
JComponent.AccessibleJComponent#getTitledBorderText():::Returns the titled border text:::border->JComponent.this->getBorder->if->return->getTitle->else->return
JComponent.AccessibleJComponent#getAccessibleKeyBinding():::Returns key bindings associated with this object:::o->getClientProperty->if->ac->getAccessibleContext->if->comp->ac->getAccessibleComponent->if->return->return->getAccessibleKeyBinding->return
JComponent#getClientProperties():::Returns an ArrayTable used for key/value "client properties" for this component:::if->new->ArrayTable->return
JComponent#getClientProperty(Object):::Returns the value of the property with the specified key:::if->return->else->if->return->if->return->else->synchronized->return->clientProperties->get
JComponent#putClientProperty(Object, Object):::Adds an arbitrary key/value "client property" to this component:::if->return->else->if->return->if->return->clientProperties->getClientProperties->oldValue->synchronized->clientProperties->get->if->clientProperties->put->else->if->clientProperties->remove->else->return->clientPropertyChanged->key->toString->firePropertyChange
JComponent#clientPropertyChanged(Object, Object, Object)::: component client property changed:::
JComponent#setUIProperty(String, Object)::: component set property:::if->if->getFlag->booleanValue->setOpaque->setFlag->else->if->if->getFlag->booleanValue->setAutoscrolls->setFlag->else->if->strokeSet->if->getFlag->super->setFocusTraversalKeys->else->if->strokeSet->if->getFlag->super->setFocusTraversalKeys->else->throw->new->IllegalArgumentException
JComponent#setFocusTraversalKeys(int, Set):::Sets the focus traversal keys for a given traversal operation for this Component:::if->setFlag->else->if->setFlag->super->setFocusTraversalKeys
JComponent#isLightweightComponent(Component):::Returns true if this component is lightweight, that is, if it doesn't have a native window system peer.:::return->AWTAccessor->getComponentAccessor->isLightweight
JComponent#reshape(int, int, int, int)::: component reshape:::super->reshape
JComponent#getBounds(Rectangle):::Stores the bounds of this component into "return value" rv and returns rv:::if->return->getX->getY->getWidth->getHeight->new->Rectangle->else->rv->getX->getY->getWidth->getHeight->setBounds->return
JComponent#getSize(Dimension):::Stores the width/height of this component into "return value" rv and returns rv:::if->return->getWidth->getHeight->new->Dimension->else->rv->getWidth->getHeight->setSize->return
JComponent#getLocation(Point):::Stores the x,y origin of this component into "return value" rv and returns rv:::if->return->getX->getY->new->Point->else->rv->getX->getY->setLocation->return
JComponent#getX():::Returns the current x coordinate of the component's origin:::return->super->getX
JComponent#getY():::Returns the current y coordinate of the component's origin:::return->super->getY
JComponent#getWidth():::Returns the current width of this component:::return->super->getWidth
JComponent#getHeight():::Returns the current height of this component:::return->super->getHeight
JComponent#isOpaque():::Returns true if this component is completely opaque:::return->getFlag
JComponent#setOpaque(boolean):::If true the component paints every pixel within its bounds:::oldValue->getFlag->setFlag->setFlag->firePropertyChange
JComponent#rectangleIsObscured(int, int, int, int):::If the specified rectangle is completely obscured by any of this component's opaque children then returns true:::numChildren->getComponentCount->for->i->return
JComponent#computeVisibleRect(Component, Rectangle):::Returns the Component's "visible rect rectangle" -  the intersection of the visible rectangles for the component c and all of its ancestors:::p->c->getParent->bounds->c->getBounds->if->visibleRect->setBounds->else->computeVisibleRect->SwingUtilities->computeIntersection
JComponent#computeVisibleRect(Rectangle):::Returns the Component's "visible rect rectangle" -  the intersection of the visible rectangles for this component and all of its ancestors:::computeVisibleRect
JComponent#getVisibleRect():::Returns the Component's "visible rectangle" -  the intersection of this component's visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors' visible rectangles.:::visibleRect->new->Rectangle->computeVisibleRect->return
JComponent#firePropertyChange(String, boolean, boolean):::Support for reporting bound property changes for boolean properties:::super->firePropertyChange
JComponent#firePropertyChange(String, int, int):::Support for reporting bound property changes for integer properties:::super->firePropertyChange
JComponent#firePropertyChange(String, char, char)::: component fire property change:::super->firePropertyChange
JComponent#fireVetoableChange(String, Object, Object):::Supports reporting constrained property changes:::if->return->vetoableChangeSupport->fireVetoableChange
JComponent#addVetoableChangeListener(VetoableChangeListener):::Adds a VetoableChangeListener to the listener list:::if->new->java.beans.VetoableChangeSupport->vetoableChangeSupport->addVetoableChangeListener
JComponent#removeVetoableChangeListener(VetoableChangeListener):::Removes a VetoableChangeListener from the listener list:::if->return->vetoableChangeSupport->removeVetoableChangeListener
JComponent#getVetoableChangeListeners():::Returns an array of all the vetoable change listeners registered on this component.:::if->return->new->VetoableChangeListenerArr->return->vetoableChangeSupport->getVetoableChangeListeners
JComponent#getTopLevelAncestor():::Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container.:::for->p->p->getParent->return
JComponent#getAncestorNotifier()::: component get ancestor notifier:::return->getClientProperty
JComponent#addAncestorListener(AncestorListener):::Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible:::ancestorNotifier->getAncestorNotifier->if->new->AncestorNotifier->putClientProperty->ancestorNotifier->addAncestorListener
JComponent#removeAncestorListener(AncestorListener):::Unregisters listener so that it will no longer receive AncestorEvents.:::ancestorNotifier->getAncestorNotifier->if->return->ancestorNotifier->removeAncestorListener->if->getListenerList->ancestorNotifier->removeAllListeners->putClientProperty
JComponent#getAncestorListeners():::Returns an array of all the ancestor listeners registered on this component.:::ancestorNotifier->getAncestorNotifier->if->return->new->AncestorListenerArr->return->ancestorNotifier->getAncestorListeners
JComponent#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this JComponent:::result->if->getAncestorListeners->else->if->getVetoableChangeListeners->else->if->getPropertyChangeListeners->else->listenerList->getListeners->if->return->super->getListeners->return
JComponent#addNotify():::Notifies this component that it now has a parent component:::super->addNotify->getParent->firePropertyChange->registerWithKeyboardManager->registerNextFocusableComponent
JComponent#removeNotify():::Notifies this component that it no longer has a parent component:::super->removeNotify->getParent->firePropertyChange->unregisterWithKeyboardManager->deregisterNextFocusableComponent->if->getCreatedDoubleBuffer->RepaintManager->currentManager->resetDoubleBuffer->setCreatedDoubleBuffer->if->Autoscroller->stop
JComponent#repaint(long, int, int, int, int):::Adds the specified region to the dirty region list if the component is showing:::RepaintManager->SunToolkit->targetToAppContext->currentManager->addDirtyRegion
JComponent#repaint(Rectangle):::Adds the specified region to the dirty region list if the component is showing:::repaint
JComponent#revalidate():::Supports deferred automatic layout:::if->getParent->return->if->SunToolkit->isDispatchThreadForAppContext->invalidate->RepaintManager->currentManager->addInvalidComponent->else->if->revalidateRunnableScheduled->getAndSet->return->SunToolkit->revalidateRunnableScheduled->set->revalidate->executeOnEventHandlerThread
JComponent#isValidateRoot():::If this method returns true, revalidate calls by descendants of this component will cause the entire tree beginning with this root to be validated:::return
JComponent#isOptimizedDrawingEnabled():::Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap:::return
JComponent#isPaintingOrigin():::Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors:::return
JComponent#paintImmediately(int, int, int, int):::Paints the specified region in this component and all of its descendants that overlap the region, immediately:::c->parent->if->isShowing->return->paintingOigin->SwingUtilities->getPaintingOrigin->if->rectangle->SwingUtilities->new->Rectangle->convertRectangle->paintingOigin->paintImmediately->return->while->c->isOpaque->c->getParent->if->c->getX->c->getY->else->break->if->break->if->_paintImmediately->else->c->repaint
JComponent#paintImmediately(Rectangle):::Paints the specified region now.:::paintImmediately
JComponent#alwaysOnTop()::: component always on top:::return
JComponent#setPaintingChild(Component)::: component set painting child:::
JComponent#_paintImmediately(int, int, int, int)::: component _paint immediately:::g->c->b->tmpX->tmpY->tmpWidth->tmpHeight->offsetX->offsetY->hasBuffer->bufferedComponent->paintingComponent->repaintManager->RepaintManager->currentManager->path->new->java.util.ArrayList<Component>->pIndex->pCount->paintImmediatelyClip->fetchRectangle->ontop->alwaysOnTop->isOpaque->if->SwingUtilities->getWidth->getHeight->computeIntersection->if->recycleRectangle->return->child->for->c->getParent->if->c->isDisplayable->recycleRectangle->return->paintingComponent->setFlag->if->comp->i->for->try->if->safelyGetGraphics->try->if->rm->RepaintManager->currentManager->rm->beginPaint->try->rm->paint->catch->finally->rm->endPaint->else->g->setClip->paintingComponent->paint->catch->finally->g->dispose->catch->finally->if->comp->i->for->paintingComponent->setFlag->recycleRectangle
JComponent#paintToOffscreen(Graphics, int, int, int, int, int, int):::Paints to the specified graphics:::try->setFlag->if->setFlag->if->getFlag->paint->else->if->rectangleIsObscured->paintComponent->paintBorder->paintChildren->catch->finally->setFlag->setFlag
JComponent#getObscuredState(int, int, int, int, int):::Returns whether or not the region of the specified component is obscured by a sibling.:::retValue->tmpRect->fetchRectangle->for->i->recycleRectangle->return
JComponent#checkIfChildObscuredBySibling():::Returns true, which implies that before checking if a child should be painted it is first check that the child is not obscured by another sibling:::return
JComponent#setFlag(int, boolean)::: component set flag:::if->else
JComponent#getFlag(int)::: component get flag:::mask->return
JComponent#setWriteObjCounter(JComponent, byte)::: component set write obj counter:::
JComponent#getWriteObjCounter(JComponent)::: component get write obj counter:::return
JComponent#setDoubleBuffered(boolean)::: Sets whether this component should use a buffer to paint:::setFlag
JComponent#isDoubleBuffered():::Returns whether this component should use a buffer to paint.:::return->getFlag
JComponent#getRootPane():::Returns the JRootPane ancestor for this component.:::return->SwingUtilities->getRootPane
JComponent#compWriteObjectNotify():::This is called from Component by way of reflection:::count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->return->uninstallUIAndProperties->if->getToolTipText->ToolTipManager->sharedInstance->unregisterComponent
JComponent.ReadObjectCallback#validateObject():::This is the method that's called after the entire graph of objects has been read in:::try->foreach->SwingUtilities->updateComponentTreeUI->catch->finally->readObjectCallbacks->remove
JComponent.ReadObjectCallback#registerComponent(JComponent):::If c isn't a descendant of a component we've already seen, then add it to the roots Vector.:::foreach->for->p->p->getParent->for->i->roots->size->roots->addElement
JComponent#readObject(ObjectInputStream):::We use the ObjectInputStream "registerValidation" callback to update the UI for the entire tree of components after they've all been read in.:::f->s->readFields->f->get->f->get->validateAlignment->f->get->f->get->validateAlignment->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->cb->readObjectCallbacks->get->if->try->readObjectCallbacks->new->ReadObjectCallback->put->catch->throw->e->toString->new->IOException->finally->cb->registerComponent->cpCount->s->readInt->if->new->ArrayTable->for->counter->if->getToolTipText->ToolTipManager->sharedInstance->registerComponent->setWriteObjCounter->new->AtomicBoolean
JComponent#writeObject(ObjectOutputStream):::Before writing a JComponent to an ObjectOutputStream we temporarily uninstall its UI:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI->ArrayTable->writeArrayTable
JComponent#paramString():::Returns a string representation of this JComponent:::preferredSizeString->isPreferredSizeSet->getPreferredSize->toString->minimumSizeString->isMinimumSizeSet->getMinimumSize->toString->maximumSizeString->isMaximumSizeSet->getMaximumSize->toString->borderString->border->toString->return->super->paramString
JComponent#hide()::: component hide:::showing->isShowing->super->hide->if->parent->getParent->if->r->getBounds->parent->repaint->revalidate
JDesktopPane#getUI():::Returns the L&amp;F object that renders this component.:::return
JDesktopPane#setUI(DesktopPaneUI):::Sets the L&amp;F object that renders this component.:::super->setUI
JDesktopPane#setDragMode(int):::Sets the "dragging style" used by the desktop pane:::oldDragMode->firePropertyChange
JDesktopPane#getDragMode():::Gets the current "dragging style" used by the desktop pane.:::return
JDesktopPane#getDesktopManager():::Returns the DesktopManger that handles desktop-specific UI actions.:::return
JDesktopPane#setDesktopManager(DesktopManager):::Sets the DesktopManger that will handle desktop-specific UI actions:::oldValue->firePropertyChange
JDesktopPane#updateUI():::Notification from the UIManager that the L&amp;F has changed:::UIManager->getUI->setUI
JDesktopPane#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JDesktopPane#getAllFrames():::Returns all JInternalFrames currently displayed in the desktop:::return->getAllFrames->new->JInternalFrameArr->toArray
JDesktopPane#getAllFrames(Container)::: desktop pane get all frames:::i->count->results->new->LinkedHashSet<>->parent->getComponentCount->for->return
JDesktopPane#getSelectedFrame()::: desktop pane get selected frame:::return
JDesktopPane#setSelectedFrame(JInternalFrame)::: desktop pane set selected frame:::
JDesktopPane#getAllFramesInLayer(int):::Returns all JInternalFrames currently displayed in the specified layer of the desktop:::allFrames->getAllFrames->iterator->allFrames->iterator->while->iterator->hasNext->if->iterator->next->getLayer->iterator->remove->return->allFrames->new->JInternalFrameArr->toArray
JDesktopPane#getFrames()::: desktop pane get frames:::c->set->new->TreeSet<ComponentPosition>->for->i->getComponentCount->frames->set->size->new->ArrayList<JInternalFrame>->foreach->frames->add->return
JDesktopPane.ComponentPosition#compareTo(ComponentPosition)::: component position compare to:::delta->if->return->return
JDesktopPane#getNextFrame(JInternalFrame, boolean)::: desktop pane get next frame:::verifyFramesCache->if->return->getTopInternalFrame->i->framesCache->indexOf->if->framesCache->size->return->if->if->framesCache->size->else->if->framesCache->size->return->framesCache->get
JDesktopPane#getNextFrame(JInternalFrame)::: desktop pane get next frame:::return->getNextFrame
JDesktopPane#getTopInternalFrame()::: desktop pane get top internal frame:::if->framesCache->size->return->return->framesCache->get
JDesktopPane#updateFramesCache()::: desktop pane update frames cache:::getFrames
JDesktopPane#verifyFramesCache()::: desktop pane verify frames cache:::if->updateFramesCache
JDesktopPane#remove(Component)::: desktop pane remove:::super->remove->updateFramesCache
JDesktopPane#selectFrame(boolean):::Selects the next JInternalFrame in this desktop pane.:::selectedFrame->getSelectedFrame->frameToSelect->getNextFrame->if->return->setComponentOrderCheckingEnabled->if->selectedFrame->moveToBack->try->frameToSelect->setSelected->catch->finally->setComponentOrderCheckingEnabled->return
JDesktopPane#setComponentOrderCheckingEnabled(boolean)::: desktop pane set component order checking enabled:::
JDesktopPane#addImpl(Component, Object, int)::: desktop pane add impl:::checkComponentAttributes->super->addImpl->if->if
JDesktopPane#checkComponentAttributes(Component)::: desktop pane check component attributes:::if->isIcon->putClientProperty
JDesktopPane#remove(int)::: desktop pane remove:::if->comp->getComponent->if->super->remove
JDesktopPane#removeAll()::: desktop pane remove all:::if->count->getComponentCount->for->i->super->removeAll
JDesktopPane#setComponentZOrder(Component, int)::: desktop pane set component order:::super->setComponentZOrder->if->if
JDesktopPane#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JDesktopPane#setUIProperty(String, Object)::: desktop pane set property:::if->if->intValue->setDragMode->else->super->setUIProperty
JDesktopPane#paramString():::Returns a string representation of this JDesktopPane:::desktopManagerString->desktopManager->toString->return->super->paramString
JDesktopPane#getAccessibleContext():::Gets the AccessibleContext associated with this JDesktopPane:::if->new->AccessibleJDesktopPane->return
JDesktopPane.AccessibleJDesktopPane#getAccessibleRole():::Get the role of this object.:::return
JDialog#dialogInit():::Called by the constructors to init the JDialog properly.:::enableEvents->JComponent->getDefaultLocale->setLocale->createRootPane->setRootPane->UIManager->getColor->setBackground->setRootPaneCheckingEnabled->if->JDialog->isDefaultLookAndFeelDecorated->supportsWindowDecorations->UIManager->getLookAndFeel->getSupportsWindowDecorations->if->setUndecorated->getRootPane->setWindowDecorationStyle->checkAndSetPolicy
JDialog#createRootPane():::Called by the constructor methods to create the default rootPane.:::rp->new->JRootPane->rp->setOpaque->return
JDialog#processWindowEvent(WindowEvent):::Handles window events depending on the state of the defaultCloseOperation property.:::super->processWindowEvent->if->e->getID->switch->setVisible->break->dispose->break->break
JDialog#setDefaultCloseOperation(int):::Sets the operation that will happen by default when the user initiates a "close" on this dialog:::if->throw->new->IllegalArgumentException->oldValue->firePropertyChange
JDialog#getDefaultCloseOperation():::Returns the operation which occurs when the user initiates a "close" on this dialog.:::return
JDialog#setTransferHandler(TransferHandler):::Sets the transferHandler property, which is a mechanism to support transfer of data into this component:::oldHandler->SwingUtilities->installSwingDropTargetAsNecessary->firePropertyChange
JDialog#getTransferHandler():::Gets the transferHandler property.:::return
JDialog#update(Graphics):::Calls paint(g):::paint
JDialog#setJMenuBar(JMenuBar):::Sets the menubar for this dialog.:::getRootPane->setJMenuBar
JDialog#getJMenuBar():::Returns the menubar set on this dialog.:::return->getRootPane->getJMenuBar
JDialog#isRootPaneCheckingEnabled():::Returns whether calls to add and setLayout are forwarded to the contentPane.:::return
JDialog#setRootPaneCheckingEnabled(boolean):::Sets whether calls to add and setLayout are forwarded to the contentPane.:::
JDialog#addImpl(Component, Object, int):::Adds the specified child Component:::if->isRootPaneCheckingEnabled->getContentPane->add->else->super->addImpl
JDialog#remove(Component):::Removes the specified component from the container:::if->super->remove->else->getContentPane->remove
JDialog#setLayout(LayoutManager):::Sets the LayoutManager:::if->isRootPaneCheckingEnabled->getContentPane->setLayout->else->super->setLayout
JDialog#getRootPane():::Returns the rootPane object for this dialog.:::return
JDialog#setRootPane(JRootPane):::Sets the rootPane property:::if->remove->if->checkingEnabled->isRootPaneCheckingEnabled->try->setRootPaneCheckingEnabled->add->catch->finally->setRootPaneCheckingEnabled
JDialog#getContentPane():::Returns the contentPane object for this dialog.:::return->getRootPane->getContentPane
JDialog#setContentPane(Container):::Sets the contentPane property:::getRootPane->setContentPane
JDialog#getLayeredPane():::Returns the layeredPane object for this dialog.:::return->getRootPane->getLayeredPane
JDialog#setLayeredPane(JLayeredPane):::Sets the layeredPane property:::getRootPane->setLayeredPane
JDialog#getGlassPane():::Returns the glassPane object for this dialog.:::return->getRootPane->getGlassPane
JDialog#setGlassPane(Component):::Sets the glassPane property:::getRootPane->setGlassPane
JDialog#getGraphics()::: dialog get graphics:::JComponent->getGraphicsInvoked->return->super->getGraphics
JDialog#repaint(long, int, int, int, int):::Repaints the specified rectangle of this component within time milliseconds:::if->RepaintManager->currentManager->addDirtyRegion->else->super->repaint
JDialog#setDefaultLookAndFeelDecorated(boolean):::Provides a hint as to whether or not newly created JDialogs should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel:::if->SwingUtilities->appContextPut->else->SwingUtilities->appContextPut
JDialog#isDefaultLookAndFeelDecorated():::Returns true if newly created JDialogs should have their Window decorations provided by the current look and feel:::defaultLookAndFeelDecorated->SwingUtilities->appContextGet->if->return->defaultLookAndFeelDecorated->booleanValue
JDialog#paramString():::Returns a string representation of this JDialog:::defaultCloseOperationString->if->else->if->else->if->else->rootPaneString->rootPane->toString->rootPaneCheckingEnabledString->return->super->paramString
JDialog#getAccessibleContext():::Gets the AccessibleContext associated with this JDialog:::if->new->AccessibleJDialog->return
JDialog.AccessibleJDialog#getAccessibleName():::Get the accessible name of this object.:::if->return->else->if->getTitle->return->super->getAccessibleName->else->return->getTitle
JDialog.AccessibleJDialog#getAccessibleStateSet():::Get the state of this object.:::states->super->getAccessibleStateSet->if->isResizable->states->add->if->getFocusOwner->states->add->if->isModal->states->add->return
JEditorPane#addHyperlinkListener(HyperlinkListener):::Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered.:::listenerList->add
JEditorPane#removeHyperlinkListener(HyperlinkListener):::Removes a hyperlink listener.:::listenerList->remove
JEditorPane#getHyperlinkListeners():::Returns an array of all the HyperLinkListeners added to this JEditorPane with addHyperlinkListener().:::return->listenerList->getListeners
JEditorPane#fireHyperlinkUpdate(HyperlinkEvent):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
JEditorPane#setPage(URL):::Sets the current URL being displayed:::if->throw->new->IOException->loaded->getPage->if->page->equals->page->getRef->new->Rectangle->scrollRectToVisible->reloaded->postData->getPostData->if->loaded->sameFile->p->getDocument->getAsynchronousLoadPriority->if->in->getStream->if->doc->initializeModel->getAsynchronousLoadPriority->if->setDocument->synchronized->new->PageLoader->pageLoader->execute->return->read->setDocument->else->if->pageLoader->cancel->new->PageLoader->pageLoader->execute->return->reference->page->getRef->if->if->scrollToReference->else->SwingUtilities->new->Runnable->invokeLater->getDocument->putProperty->firePropertyChange
JEditorPane#initializeModel(EditorKit, URL):::Create model and initialize document properties from page properties.:::doc->kit->createDefaultDocument->if->for->e->pageProperties->keys->e->hasMoreElements->pageProperties->clear->if->doc->getProperty->doc->putProperty->return
JEditorPane#getAsynchronousLoadPriority(Document):::Return load priority for the document or -1 if priority not supported.:::return->getAsynchronousLoadPriority
JEditorPane#read(InputStream, Object):::This method initializes from a stream:::if->hdoc->setDocument->read->else->charset->getClientProperty->r->new->InputStreamReader->new->InputStreamReader->super->read
JEditorPane#read(InputStream, Document):::This method invokes the EditorKit to initiate a read:::if->doc->getProperty->equals->READ_LIMIT->new->BufferedInputStream->in->mark->charset->getClientProperty->try->r->new->InputStreamReader->new->InputStreamReader->kit->read->catch->throw->e->getMessage->new->IOException->charSetSpec->changedCharSetException->getCharSetSpec->if->changedCharSetException->keyEqualsCharSet->putClientProperty->else->setCharsetFromContentTypeParameters->try->in->reset->catch->in->close->url->doc->getProperty->if->conn->url->openConnection->conn->getInputStream->else->throw->finally->try->doc->doc->getLength->remove->catch->finally->doc->Boolean->valueOf->putProperty->read->finally
JEditorPane.PageLoader#doInBackground():::Try to load the document, then scroll the view to the reference (if specified):::pageLoaded->try->if->getStream->if->UIManager->getLookAndFeel->provideErrorFeedback->return->if->try->SwingUtilities->new->Runnable->invokeAndWait->catch->UIManager->getLookAndFeel->provideErrorFeedback->return->UIManager->getLookAndFeel->provideErrorFeedback->return->finally->read->page->doc->getProperty->reference->page->getRef->if->callScrollToReference->new->Runnable->SwingUtilities->invokeLater->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally->if->SwingUtilities->new->Runnable->invokeLater->return
JEditorPane#getStream(URL):::Fetches a stream for the given URL, which is about to be loaded by the setPage method:::conn->page->openConnection->if->hconn->hconn->setInstanceFollowRedirects->postData->getPostData->if->handlePostData->response->hconn->getResponseCode->redirect->if->loc->conn->getHeaderField->if->loc->startsWith->new->URL->else->new->URL->return->getStream->if->SwingUtilities->isEventDispatchThread->handleConnectionProperties->else->try->SwingUtilities->new->Runnable->invokeAndWait->catch->throw->new->RuntimeException->throw->new->RuntimeException->finally->return->conn->getInputStream
JEditorPane#handleConnectionProperties(URLConnection):::Handle URL connection properties (most notably, content type).:::if->new->Hashtable<String,Object>->type->conn->getContentType->if->setContentType->pageProperties->put->pageProperties->conn->getURL->put->enc->conn->getContentEncoding->if->pageProperties->put
JEditorPane#getPostData()::: editor pane get post data:::return->getDocument->getProperty
JEditorPane#handlePostData(HttpURLConnection, Object)::: editor pane handle post data:::conn->setDoOutput->os->try->conn->setRequestProperty->conn->getOutputStream->new->DataOutputStream->os->writeBytes->catch->finally->if->os->close
JEditorPane#scrollToReference(String):::Scrolls the view to the given reference location (that is, the value returned by the URL.getRef method for the URL being displayed):::d->getDocument->if->doc->iter->doc->getIterator->for->iter->isValid->iter->next
JEditorPane#getPage():::Gets the current URL being displayed:::return->getDocument->getProperty
JEditorPane#setPage(String):::Sets the current URL being displayed.:::if->throw->new->IOException->page->new->URL->setPage
JEditorPane#getUIClassID():::Gets the class ID for the UI.:::return
JEditorPane#createDefaultEditorKit():::Creates the default editor kit (PlainEditorKit) for when the component is first created.:::return->new->PlainEditorKit
JEditorPane#getEditorKit():::Fetches the currently installed kit for handling content:::if->createDefaultEditorKit->return
JEditorPane#getContentType():::Gets the type of content that this editor is currently set to deal with:::return->kit->getContentType
JEditorPane#setContentType(String):::Sets the type of content that this editor handles:::parm->type->indexOf->if->paramList->type->substring->type->substring->trim->if->type->toLowerCase->startsWith->setCharsetFromContentTypeParameters->if->type->kit->getContentType->equals->k->getEditorKitForContentType->if->setEditorKit
JEditorPane#setCharsetFromContentTypeParameters(String):::This method gets the charset information specified as part of the content type in the http header information.:::charset->try->semi->paramlist->indexOf->if->paramlist->length->paramlist->substring->if->paramlist->length->hdrParser->new->HeaderParser->hdrParser->findValue->if->putClientProperty->catch->println->e->printStackTrace->finally
JEditorPane#setEditorKit(EditorKit):::Sets the currently installed kit for handling content:::old->if->old->deinstall->if->install->createDefaultDocument->setDocument->firePropertyChange
JEditorPane#getEditorKitForContentType(String):::Fetches the editor kit to use for the given type of content:::if->new->Hashtable<String,EditorKit>->k->typeHandlers->get->if->createEditorKitForContentType->if->setEditorKitForContentType->if->createDefaultEditorKit->return
JEditorPane#setEditorKitForContentType(String, EditorKit):::Directly sets the editor kit to use for the given type:::if->new->Hashtable<String,EditorKit>->typeHandlers->put
JEditorPane#replaceSelection(String):::Replaces the currently selected content with new content represented by the given string:::if->isEditable->UIManager->getLookAndFeel->provideErrorFeedback->return->kit->getEditorKit->if->try->doc->getDocument->caret->getCaret->composedTextSaved->caret->getDot->saveComposedText->p0->Math->caret->getDot->caret->getMark->min->p1->Math->caret->getDot->caret->getMark->max->if->getInputAttributes->replace->else->if->doc->remove->if->content->length->doc->getInputAttributes->insertString->if->restoreComposedText->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally->else->super->replaceSelection
JEditorPane#createEditorKitForContentType(String):::Creates a handler for the given type from the default registry of editor kits:::kitRegistry->getKitRegisty->k->kitRegistry->get->if->classname->getKitTypeRegistry->get->loader->getKitLoaderRegistry->get->try->c->if->ReflectUtil->checkPackageAccess->loader->loadClass->else->SwingUtilities->loadSystemClass->c->newInstance->kitRegistry->put->catch->finally->if->return->k->clone->return
JEditorPane#registerEditorKitForContentType(String, String):::Establishes the default bindings of type to classname:::Thread->currentThread->getContextClassLoader->registerEditorKitForContentType
JEditorPane#registerEditorKitForContentType(String, String, ClassLoader):::Establishes the default bindings of type to classname:::getKitTypeRegistry->put->if->getKitLoaderRegistry->put->else->getKitLoaderRegistry->remove->getKitRegisty->remove
JEditorPane#getEditorKitClassNameForContentType(String):::Returns the currently registered EditorKit class name for the type type.:::return->getKitTypeRegistry->get
JEditorPane#getKitTypeRegistry()::: editor pane get kit type registry:::loadDefaultKitsIfNecessary->tmp->SwingUtilities->appContextGet->return
JEditorPane#getKitLoaderRegistry()::: editor pane get kit loader registry:::loadDefaultKitsIfNecessary->tmp->SwingUtilities->appContextGet->return
JEditorPane#getKitRegisty()::: editor pane get kit registy:::ht->SwingUtilities->appContextGet->if->new->Hashtable<>->SwingUtilities->appContextPut->return
JEditorPane#loadDefaultKitsIfNecessary():::This is invoked every time the registries are accessed:::if->SwingUtilities->appContextGet->synchronized->if->defaultEditorKitMap->size->defaultEditorKitMap->put->defaultEditorKitMap->put->defaultEditorKitMap->put->defaultEditorKitMap->put->ht->new->Hashtable<>->SwingUtilities->appContextPut->new->Hashtable<>->SwingUtilities->appContextPut->foreach->defaultEditorKitMap->keySet->defaultEditorKitMap->get->registerEditorKitForContentType
JEditorPane#getPreferredSize():::Returns the preferred size for the JEditorPane:::d->super->getPreferredSize->parent->SwingUtilities->getUnwrappedParent->if->port->ui->getUI->prefWidth->prefHeight->if->getScrollableTracksViewportWidth->w->port->getWidth->min->ui->getMinimumSize->if->if->getScrollableTracksViewportHeight->h->port->getHeight->min->ui->getMinimumSize->if->if->new->Dimension->return
JEditorPane#setText(String):::Sets the text of this TextComponent to the specified content, which is expected to be in the format of the content type of this editor:::try->doc->getDocument->doc->doc->getLength->remove->if->t->equals->return->r->new->StringReader->kit->getEditorKit->kit->read->catch->UIManager->getLookAndFeel->provideErrorFeedback->UIManager->getLookAndFeel->provideErrorFeedback->finally
JEditorPane#getText():::Returns the text contained in this TextComponent in terms of the content type of this editor:::txt->try->buf->new->StringWriter->write->buf->toString->catch->finally->return
JEditorPane#getScrollableTracksViewportWidth():::Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.:::parent->SwingUtilities->getUnwrappedParent->if->port->ui->getUI->w->port->getWidth->min->ui->getMinimumSize->max->ui->getMaximumSize->if->return->return
JEditorPane#getScrollableTracksViewportHeight():::Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport.:::parent->SwingUtilities->getUnwrappedParent->if->port->ui->getUI->h->port->getHeight->min->ui->getMinimumSize->if->max->ui->getMaximumSize->if->return->return
JEditorPane#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JEditorPane#paramString():::Returns a string representation of this JEditorPane:::kitString->kit->toString->typeHandlersString->typeHandlers->toString->return->super->paramString
JEditorPane#getAccessibleContext():::Gets the AccessibleContext associated with this JEditorPane:::if->getEditorKit->if->accessibleContext->getClass->new->AccessibleJEditorPaneHTML->else->if->accessibleContext->getClass->new->AccessibleJEditorPane->return
JEditorPane.AccessibleJEditorPane#getAccessibleDescription():::Gets the accessibleDescription property of this object:::description->if->getClientProperty->if->JEditorPane.this->getContentType->return
JEditorPane.AccessibleJEditorPane#getAccessibleStateSet():::Gets the state set of this object.:::states->super->getAccessibleStateSet->states->add->return
JEditorPane.AccessibleJEditorPaneHTML#getAccessibleText():::Returns the accessible text.:::return->new->JEditorPaneAccessibleHypertextSupport
JEditorPane.AccessibleJEditorPaneHTML#getAccessibleChildrenCount():::Returns the number of accessible children of the object.:::if->return->accessibleContext->getAccessibleChildrenCount->else->return
JEditorPane.AccessibleJEditorPaneHTML#getAccessibleChild(int):::Returns the specified Accessible child of the object:::if->return->accessibleContext->getAccessibleChild->else->return
JEditorPane.AccessibleJEditorPaneHTML#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point.:::if->try->acomp->accessibleContext->getAccessibleComponent->if->return->acomp->getAccessibleAt->else->return->catch->return->finally->else->return
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#isValid():::Since the document a link is associated with may have changed, this method returns whether this Link is valid anymore (with respect to the document it references).:::return
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getAccessibleActionCount():::Returns the number of accessible actions available in this Link If there are more than one, the first one is NOT considered the "default" action of this LINK object (e.g:::return
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#doAccessibleAction(int):::Perform the specified Action on the object:::if->isValid->u->getAccessibleActionObject->if->linkEvent->new->HyperlinkEvent->JEditorPane.this->fireHyperlinkUpdate->return->return
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getAccessibleActionDescription(int):::Return a String description of this particular link action:::if->isValid->d->JEditorPane.this->getDocument->if->try->return->d->getStartIndex->getEndIndex->getStartIndex->getText->catch->return->finally->return
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getAccessibleActionObject(int):::Returns a URL object that represents the link.:::if->isValid->as->element->getAttributes->anchor->as->getAttribute->href->anchor->getAttribute->if->u->try->JEditorPane.this->getPage->new->URL->catch->finally->return->return
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getAccessibleActionAnchor(int):::Return an object that represents the link anchor, as appropriate for that link:::return->getAccessibleActionDescription
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getStartIndex():::Get the index with the hypertext document at which this link begins:::return->element->getStartOffset
JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getEndIndex():::Get the index with the hypertext document at which this link ends:::return->element->getEndOffset
JEditorPane.JEditorPaneAccessibleHypertextSupport.LinkVector#baseElementIndex(Element)::: link vector base element index:::l->for->i->return
JEditorPane.JEditorPaneAccessibleHypertextSupport#buildLinkTable():::Build the private table mapping links to locations in the text:::hyperlinks->removeAllElements->d->JEditorPane.this->getDocument->if->ei->new->ElementIterator->e->as->anchor->href->while->ei->next->if->e->isLeaf->e->getAttributes->as->getAttribute->anchor->getAttribute->if->hyperlinks->new->HTMLLink->addElement
JEditorPane.JEditorPaneAccessibleHypertextSupport#getLinkCount():::Returns the number of links within this hypertext doc.:::if->buildLinkTable->return->hyperlinks->size
JEditorPane.JEditorPaneAccessibleHypertextSupport#getLinkIndex(int):::Returns the index into an array of hyperlinks that is associated with this character index, or -1 if there is no hyperlink associated with this index.:::if->buildLinkTable->e->doc->JEditorPane.this->getDocument->if->for->doc->getDefaultRootElement->e->isLeaf->return->hyperlinks->baseElementIndex
JEditorPane.JEditorPaneAccessibleHypertextSupport#getLink(int):::Returns the index into an array of hyperlinks that index:::if->buildLinkTable->if->hyperlinks->size->return->hyperlinks->elementAt->else->return
JEditorPane.JEditorPaneAccessibleHypertextSupport#getLinkText(int):::Returns the contiguous text within the document that is associated with this hyperlink.:::if->buildLinkTable->e->hyperlinks->elementAt->if->d->JEditorPane.this->getDocument->if->try->return->d->e->getStartOffset->e->getEndOffset->e->getStartOffset->getText->catch->return->finally->return
JEditorPane.PlainEditorKit#getViewFactory():::Fetches a factory that is suitable for producing views of any models that are produced by this kit:::return
JEditorPane.PlainEditorKit#create(Element):::Creates a view from the given structural element of a document.:::doc->elem->getDocument->i18nFlag->doc->getProperty->if->i18nFlag->equals->return->createI18N->else->return->new->WrappedPlainView
JEditorPane.PlainEditorKit#createI18N(Element)::: plain editor kit create i18 n:::kind->elem->getName->if->if->kind->equals->return->new->PlainParagraph->else->if->kind->equals->return->new->BoxView->return
JEditorPane.PlainEditorKit.PlainParagraph#setPropertiesFromAttributes()::: plain paragraph set properties from attributes:::c->getContainer->if->c->getComponentOrientation->isLeftToRight->setJustification->else->setJustification
JEditorPane.PlainEditorKit.PlainParagraph#getFlowSpan(int):::Fetch the constraining span to flow against for the given child index.:::c->getContainer->if->area->if->area->getLineWrap->return->return->super->getFlowSpan
JEditorPane.PlainEditorKit.PlainParagraph#calculateMinorAxisRequirements(int, SizeRequirements)::: plain paragraph calculate minor axis requirements:::req->super->calculateMinorAxisRequirements->c->getContainer->if->area->if->area->getLineWrap->return
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#getViewIndexAtPosition(int)::: logical view get view index at position:::elem->getElement->if->elem->getElementCount->return->elem->getElementIndex->return
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#updateChildren(DocumentEvent.ElementChange, DocumentEvent, ViewFactory)::: logical view update children:::return
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#loadChildren(ViewFactory)::: logical view load children:::elem->getElement->if->elem->getElementCount->super->loadChildren->else->v->new->GlyphView->append
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#getPreferredSpan(int)::: logical view get preferred span:::if->getViewCount->throw->new->Error->v->getView->return->v->getPreferredSpan
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#forwardUpdateToView(View, DocumentEvent, Shape, ViewFactory):::Forward the DocumentEvent to the given child view:::v->setParent->super->forwardUpdateToView
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#paint(Graphics, Shape)::: logical view paint:::
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#isBefore(int, int, Rectangle)::: logical view is before:::return
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#isAfter(int, int, Rectangle)::: logical view is after:::return
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#getViewAtPoint(int, int, Rectangle)::: logical view get view at point:::return
JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#childAllocation(int, Rectangle)::: logical view child allocation:::
JEditorPane.HeaderParser#parse()::: header parser parse:::if->raw->trim->ca->raw->toCharArray->beg->end->i->inKey->inQuote->len->while->c->if->new->String->toLowerCase->else->if->if->new->String->do->while->else->else->if->if->continue->else->if->new->String->toLowerCase->else->new->String->while->else->if->if->if->new->String->else->new->String->else->new->String->toLowerCase->else->if->if->if->String->valueOf->else->String->valueOf->else->String->valueOf->toLowerCase
JEditorPane.HeaderParser#findKey(int)::: header parser find key:::if->return->return
JEditorPane.HeaderParser#findValue(int)::: header parser find value:::if->return->return
JEditorPane.HeaderParser#findValue(String)::: header parser find value:::return->findValue
JEditorPane.HeaderParser#findValue(String, String)::: header parser find value:::if->return->k->toLowerCase->for->i->return
JEditorPane.HeaderParser#findInt(String, int)::: header parser find int:::try->return->Integer->String->valueOf->findValue->parseInt->catch->return->finally
JFileChooser#setup(FileSystemView):::Performs common constructor initialization and setup.:::installShowFilesListener->installHierarchyListener->if->FileSystemView->getFileSystemView->setFileSystemView->updateUI->if->isAcceptAllFileFilterUsed->getAcceptAllFileFilter->setFileFilter->enableEvents
JFileChooser#installHierarchyListener()::: file chooser install hierarchy listener:::new->FCHierarchyListener->addHierarchyListener
JFileChooser#installShowFilesListener()::: file chooser install show files listener:::tk->Toolkit->getDefaultToolkit->showHiddenProperty->tk->getDesktopProperty->if->booleanValue->new->WeakPCL->tk->addPropertyChangeListener
JFileChooser#setDragEnabled(boolean):::Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component:::checkDragEnabled
JFileChooser#checkDragEnabled(boolean)::: file chooser check drag enabled:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException
JFileChooser#getDragEnabled():::Gets the value of the dragEnabled property.:::return
JFileChooser#getSelectedFile():::Returns the selected file:::return
JFileChooser#setSelectedFile(File):::Sets the selected file:::oldValue->if->if->file->isAbsolute->getFileSystemView->getCurrentDirectory->isParent->selectedFile->getParentFile->setCurrentDirectory->if->isMultiSelectionEnabled->ensureFileIsVisible->firePropertyChange
JFileChooser#getSelectedFiles():::Returns a list of selected files if the file chooser is set to allow multiple selection.:::if->return->new->FileArr->else->return->selectedFiles->clone
JFileChooser#setSelectedFiles(File[]):::Sets the list of selected files if the file chooser is set to allow multiple selection.:::oldValue->if->setSelectedFile->else->selectedFiles->clone->setSelectedFile->firePropertyChange
JFileChooser#getCurrentDirectory():::Returns the current directory.:::return
JFileChooser#setCurrentDirectory(File):::Sets the current directory:::oldValue->if->dir->exists->if->getFileSystemView->getDefaultDirectory->if->if->equals->return->prev->while->isTraversable->getFileSystemView->getParentDirectory->firePropertyChange
JFileChooser#changeToParentDirectory():::Changes the directory to be set to the parent of the current directory.:::oldValue->getCurrentDirectory->getFileSystemView->getParentDirectory->setCurrentDirectory
JFileChooser#rescanCurrentDirectory():::Tells the UI to rescan its files list from the current directory.:::getUI->rescanCurrentDirectory
JFileChooser#ensureFileIsVisible(File):::Makes sure that the specified file is viewable, and not hidden.:::getUI->ensureFileIsVisible
JFileChooser#showOpenDialog(Component):::Pops up an "Open File" file chooser dialog:::setDialogType->return->showDialog
JFileChooser#showSaveDialog(Component):::Pops up a "Save File" file chooser dialog:::setDialogType->return->showDialog
JFileChooser#showDialog(Component, String):::Pops a custom file chooser dialog with a custom approve button:::if->return->if->setApproveButtonText->setDialogType->createDialog->dialog->new->WindowAdapter->addWindowListener->rescanCurrentDirectory->dialog->show->firePropertyChange->dialog->getContentPane->removeAll->dialog->dispose->return
JFileChooser#createDialog(Component):::Creates and returns a new JDialog wrapping this centered on the parent in the parent's frame:::ui->getUI->title->ui->getDialogTitle->putClientProperty->dialog->window->JOptionPane->getWindowForComponent->if->new->JDialog->else->new->JDialog->dialog->this->getComponentOrientation->setComponentOrientation->contentPane->dialog->getContentPane->contentPane->new->BorderLayout->setLayout->contentPane->add->if->JDialog->isDefaultLookAndFeelDecorated->supportsWindowDecorations->UIManager->getLookAndFeel->getSupportsWindowDecorations->if->dialog->getRootPane->setWindowDecorationStyle->dialog->pack->dialog->setLocationRelativeTo->return
JFileChooser#getControlButtonsAreShown():::Returns the value of the controlButtonsAreShown property.:::return
JFileChooser#setControlButtonsAreShown(boolean):::Sets the property that indicates whether the approve and cancel buttons are shown in the file chooser:::if->return->oldValue->firePropertyChange
JFileChooser#getDialogType():::Returns the type of this dialog:::return
JFileChooser#setDialogType(int)::: file chooser set dialog type:::if->return->checkDialogType->oldValue->if->setApproveButtonText->firePropertyChange
JFileChooser#checkDialogType(int)::: file chooser check dialog type:::if->throw->new->IllegalArgumentException
JFileChooser#setDialogTitle(String):::Sets the string that goes in the JFileChooser window's title bar.:::oldValue->if->dialog->setTitle->firePropertyChange
JFileChooser#getDialogTitle():::Gets the string that goes in the JFileChooser's titlebar.:::return
JFileChooser#setApproveButtonToolTipText(String):::Sets the tooltip text used in the ApproveButton:::if->return->oldValue->firePropertyChange
JFileChooser#getApproveButtonToolTipText():::Returns the tooltip text used in the ApproveButton:::return
JFileChooser#getApproveButtonMnemonic():::Returns the approve button's mnemonic.:::return
JFileChooser#setApproveButtonMnemonic(int):::Sets the approve button's mnemonic using a numeric keycode.:::if->return->oldValue->firePropertyChange
JFileChooser#setApproveButtonMnemonic(char):::Sets the approve button's mnemonic using a character.:::vk->if->setApproveButtonMnemonic
JFileChooser#setApproveButtonText(String)::: file chooser set approve button text:::if->return->oldValue->firePropertyChange
JFileChooser#getApproveButtonText():::Returns the text used in the ApproveButton in the FileChooserUI:::return
JFileChooser#getChoosableFileFilters():::Gets the list of user choosable file filters.:::filterArray->filters->size->new->FileFilterArr->filters->copyInto->return
JFileChooser#addChoosableFileFilter(FileFilter):::Adds a filter to the list of user choosable file filters:::if->filters->contains->oldValue->getChoosableFileFilters->filters->addElement->getChoosableFileFilters->firePropertyChange->if->filters->size->setFileFilter
JFileChooser#removeChoosableFileFilter(FileFilter):::Removes a filter from the list of user choosable file filters:::index->filters->indexOf->if->if->getFileFilter->aaff->getAcceptAllFileFilter->if->isAcceptAllFileFilterUsed->setFileFilter->else->if->filters->get->setFileFilter->else->if->filters->size->filters->get->setFileFilter->else->setFileFilter->oldValue->getChoosableFileFilters->filters->removeElement->getChoosableFileFilters->firePropertyChange->return->else->return
JFileChooser#resetChoosableFileFilters():::Resets the choosable file filter list to its starting state:::oldValue->getChoosableFileFilters->setFileFilter->filters->removeAllElements->if->isAcceptAllFileFilterUsed->getAcceptAllFileFilter->addChoosableFileFilter->getChoosableFileFilters->firePropertyChange
JFileChooser#getAcceptAllFileFilter():::Returns the AcceptAll file filter:::filter->if->getUI->getUI->getAcceptAllFileFilter->return
JFileChooser#isAcceptAllFileFilterUsed():::Returns whether the AcceptAll FileFilter is used.:::return
JFileChooser#setAcceptAllFileFilterUsed(boolean):::Determines whether the AcceptAll FileFilter is used as an available choice in the choosable filter list:::oldValue->if->getAcceptAllFileFilter->removeChoosableFileFilter->else->getAcceptAllFileFilter->removeChoosableFileFilter->getAcceptAllFileFilter->addChoosableFileFilter->firePropertyChange
JFileChooser#getAccessory():::Returns the accessory component.:::return
JFileChooser#setAccessory(JComponent):::Sets the accessory component:::oldValue->firePropertyChange
JFileChooser#setFileSelectionMode(int):::Sets the JFileChooser to allow the user to just select files, just select directories, or select both files and directories:::if->return->checkFileSelectionMode->oldValue->firePropertyChange
JFileChooser#checkFileSelectionMode(int)::: file chooser check file selection mode:::if->throw->new->IllegalArgumentException
JFileChooser#getFileSelectionMode():::Returns the current file-selection mode:::return
JFileChooser#isFileSelectionEnabled():::Convenience call that determines if files are selectable based on the current file selection mode.:::return
JFileChooser#isDirectorySelectionEnabled():::Convenience call that determines if directories are selectable based on the current file selection mode.:::return
JFileChooser#setMultiSelectionEnabled(boolean):::Sets the file chooser to allow multiple file selections.:::if->return->oldValue->firePropertyChange
JFileChooser#isMultiSelectionEnabled():::Returns true if multiple files can be selected.:::return
JFileChooser#isFileHidingEnabled():::Returns true if hidden files are not shown in the file chooser; otherwise, returns false.:::return
JFileChooser#setFileHidingEnabled(boolean):::Sets file hiding on or off:::if->Toolkit->getDefaultToolkit->removePropertyChangeListener->oldValue->firePropertyChange
JFileChooser#setFileFilter(FileFilter):::Sets the current file filter:::oldValue->if->if->isMultiSelectionEnabled->fList->new->Vector<File>->failed->foreach->if->filter->accept->fList->add->else->if->fList->size->fList->fList->size->new->FileArr->toArray->setSelectedFiles->else->if->filter->accept->setSelectedFile->firePropertyChange
JFileChooser#getFileFilter():::Returns the currently selected file filter.:::return
JFileChooser#setFileView(FileView):::Sets the file view to be used to retrieve UI information, such as the icon that represents a file or the type description of a file.:::oldValue->firePropertyChange
JFileChooser#getFileView():::Returns the current file view.:::return
JFileChooser#getName(File):::Returns the filename.:::filename->if->if->getFileView->getFileView->getName->uiFileView->getUI->getFileView->if->uiFileView->getName->return
JFileChooser#getDescription(File):::Returns the file description.:::description->if->if->getFileView->getFileView->getDescription->uiFileView->getUI->getFileView->if->uiFileView->getDescription->return
JFileChooser#getTypeDescription(File):::Returns the file type.:::typeDescription->if->if->getFileView->getFileView->getTypeDescription->uiFileView->getUI->getFileView->if->uiFileView->getTypeDescription->return
JFileChooser#getIcon(File):::Returns the icon for this file or type of file, depending on the system.:::icon->if->if->getFileView->getFileView->getIcon->uiFileView->getUI->getFileView->if->uiFileView->getIcon->return
JFileChooser#isTraversable(File):::Returns true if the file (directory) can be visited:::traversable->if->if->getFileView->getFileView->isTraversable->uiFileView->getUI->getFileView->if->uiFileView->isTraversable->if->getFileSystemView->isTraversable->return->traversable->booleanValue
JFileChooser#accept(File):::Returns true if the file should be displayed.:::shown->if->fileFilter->accept->return
JFileChooser#setFileSystemView(FileSystemView):::Sets the file system view that the JFileChooser uses for accessing and creating file system resources, such as finding the floppy drive and getting a list of root drives.:::oldValue->firePropertyChange
JFileChooser#getFileSystemView():::Returns the file system view.:::return
JFileChooser#approveSelection():::Called by the UI when the user hits the Approve button (labeled "Open" or "Save", by default):::if->dialog->setVisible->fireActionPerformed
JFileChooser#cancelSelection():::Called by the UI when the user chooses the Cancel button:::if->dialog->setVisible->fireActionPerformed
JFileChooser#addActionListener(ActionListener):::Adds an ActionListener to the file chooser.:::listenerList->add
JFileChooser#removeActionListener(ActionListener):::Removes an ActionListener from the file chooser.:::listenerList->remove
JFileChooser#getActionListeners():::Returns an array of all the action listeners registered on this file chooser.:::return->listenerList->getListeners
JFileChooser#fireActionPerformed(String):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->mostRecentEventTime->EventQueue->getMostRecentEventTime->modifiers->currentEvent->EventQueue->getCurrentEvent->if->getModifiers->else->if->getModifiers->e->for->i
JFileChooser.WeakPCL#propertyChange(PropertyChangeEvent)::: weak l property change:::jfc->jfcRef->get->if->Toolkit->getDefaultToolkit->removePropertyChangeListener->else->oldValue->ev->getNewValue->booleanValue->jfc->firePropertyChange
JFileChooser#updateUI():::Resets the UI property to a value from the current look and feel.:::if->isAcceptAllFileFilterUsed->getAcceptAllFileFilter->removeChoosableFileFilter->ui->UIManager->getUI->if->FileSystemView->getFileSystemView->setFileSystemView->setUI->if->isAcceptAllFileFilterUsed->getAcceptAllFileFilter->addChoosableFileFilter
JFileChooser#getUIClassID():::Returns a string that specifies the name of the L&amp;F class that renders this component.:::return
JFileChooser#getUI():::Gets the UI object which implements the L&amp;F for this component.:::return
JFileChooser#readObject(java.io.ObjectInputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::f->in->readFields->f->get->f->get->f->get->f->get->newFilters->f->get->if->throw->new->InvalidObjectException->f->get->newDialogType->f->get->checkDialogType->f->get->f->get->f->get->f->get->f->get->newFileSelectionMode->f->get->checkFileSelectionMode->f->get->f->get->newDragEnabled->f->get->checkDragEnabled->f->get->f->get->f->get->f->get->f->get->f->get->installShowFilesListener
JFileChooser#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::fsv->if->isAcceptAllFileFilterUsed->getAcceptAllFileFilter->removeChoosableFileFilter->if->fileSystemView->FileSystemView->getFileSystemView->equals->s->defaultWriteObject->if->if->isAcceptAllFileFilterUsed->getAcceptAllFileFilter->addChoosableFileFilter->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JFileChooser#paramString():::Returns a string representation of this JFileChooser:::approveButtonTextString->dialogTitleString->dialogTypeString->if->else->if->else->if->else->returnValueString->if->else->if->else->if->else->useFileHidingString->fileSelectionModeString->if->else->if->else->if->else->currentDirectoryString->currentDirectory->toString->selectedFileString->selectedFile->toString->return->super->paramString
JFileChooser#getAccessibleContext():::Gets the AccessibleContext associated with this JFileChooser:::if->new->AccessibleJFileChooser->return
JFileChooser.AccessibleJFileChooser#getAccessibleRole():::Gets the role of this object.:::return
JFileChooser.FCHierarchyListener#hierarchyChanged(HierarchyEvent)::: hierarchy listener hierarchy changed:::if->e->getChangeFlags->fc->rootPane->SwingUtilities->getRootPane->if->rootPane->fc->getUI->getDefaultButton->setDefaultButton
JFormattedTextField#setFocusLostBehavior(int):::Sets the behavior when focus is lost:::if->throw->new->IllegalArgumentException
JFormattedTextField#getFocusLostBehavior():::Returns the behavior when focus is lost:::return
JFormattedTextField#setFormatterFactory(AbstractFormatterFactory):::Sets the AbstractFormatterFactory:::oldFactory->firePropertyChange->getValue->setValue
JFormattedTextField#getFormatterFactory():::Returns the current AbstractFormatterFactory.:::return
JFormattedTextField#setFormatter(AbstractFormatter):::Sets the current AbstractFormatter:::oldFormat->if->oldFormat->uninstall->setEditValid->if->format->install->setEdited->firePropertyChange
JFormattedTextField#getFormatter():::Returns the AbstractFormatter that is used to format and parse the current value.:::return
JFormattedTextField#setValue(Object):::Sets the value that will be formatted by an AbstractFormatter obtained from the current AbstractFormatterFactory:::if->getFormatterFactory->getDefaultFormatterFactory->setFormatterFactory->setValue
JFormattedTextField#getValue():::Returns the last valid value:::return
JFormattedTextField#commitEdit():::Forces the current value to be taken from the AbstractFormatter and set as the current value:::format->getFormatter->if->format->getText->stringToValue->setValue
JFormattedTextField#setEditValid(boolean):::Sets the validity of the edit on the receiver:::if->Boolean->valueOf->Boolean->valueOf->firePropertyChange
JFormattedTextField#isEditValid():::Returns true if the current value being edited is valid:::return
JFormattedTextField#invalidEdit():::Invoked when the user inputs an invalid value:::UIManager->getLookAndFeel->provideErrorFeedback
JFormattedTextField#processInputMethodEvent(InputMethodEvent):::Processes any input method events, such as InputMethodEvent.INPUT_METHOD_TEXT_CHANGED or InputMethodEvent.CARET_POSITION_CHANGED.:::text->e->getText->commitCount->e->getCommittedCharacterCount->if->begin->text->getBeginIndex->end->text->getEndIndex->else->super->processInputMethodEvent
JFormattedTextField#processFocusEvent(FocusEvent):::Processes any focus events, such as FocusEvent.FOCUS_GAINED or FocusEvent.FOCUS_LOST.:::super->processFocusEvent->if->e->isTemporary->return->if->isEdited->e->getID->ic->getInputContext->if->new->FocusLostHandler->if->ic->endComposition->EventQueue->invokeLater->else->focusLostHandler->run->else->if->isEdited->getValue->setValue
JFormattedTextField.FocusLostHandler#run()::: focus lost handler run:::fb->JFormattedTextField.this->getFocusLostBehavior->if->try->JFormattedTextField.this->commitEdit->JFormattedTextField.this->JFormattedTextField.this->getValue->setValue->catch->if->JFormattedTextField.this->JFormattedTextField.this->getValue->setValue->finally->else->if->JFormattedTextField.this->JFormattedTextField.this->getValue->setValue
JFormattedTextField#getActions():::Fetches the command list for the editor:::return->TextAction->super->getActions->augmentList
JFormattedTextField#getUIClassID():::Gets the class ID for a UI.:::return
JFormattedTextField#setDocument(Document):::Associates the editor with a text document:::if->getDocument->getDocument->removeDocumentListener->super->setDocument->if->new->DocumentHandler->doc->addDocumentListener
JFormattedTextField#writeObject(ObjectOutputStream)::: formatted text field write object:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JFormattedTextField#setFormatterActions(Action[]):::Resets the Actions that come from the TextFormatter to actions.:::if->if->textFormatterActionMap->clear->else->if->map->getActionMap->new->ActionMap->while->parent->map->getParent->if->map->setParent->textFormatterActionMap->setParent->break->for->counter
JFormattedTextField#setValue(Object, boolean, boolean):::Does the setting of the value:::oldValue->if->factory->getFormatterFactory->atf->if->factory->getFormatter->else->setFormatter->else->setEditValid->setEdited->if->firePropertyChange
JFormattedTextField#setEdited(boolean):::Sets the edited state of the receiver.:::
JFormattedTextField#isEdited():::Returns true if the receiver has been edited.:::return
JFormattedTextField#getDefaultFormatterFactory(Object):::Returns an AbstractFormatterFactory suitable for the passed in Object type.:::if->return->new->DateFormatter->new->DefaultFormatterFactory->if->return->new->NumberFormatter->new->DefaultFormatterFactory->if->return->new->InternationalFormatter->new->DefaultFormatterFactory->if->return->new->DateFormatter->new->DefaultFormatterFactory->if->displayFormatter->new->NumberFormatter->type->getClass->setValueClass->editFormatter->new->DecimalFormat->new->NumberFormatter->type->getClass->setValueClass->return->new->DefaultFormatterFactory->return->new->DefaultFormatter->new->DefaultFormatterFactory
JFormattedTextField.AbstractFormatterFactory#getFormatter(JFormattedTextField):::Returns an AbstractFormatter that can handle formatting of the passed in JFormattedTextField.:::
JFormattedTextField.AbstractFormatter#install(JFormattedTextField):::Installs the AbstractFormatter onto a particular JFormattedTextField:::if->uninstall->if->try->ftf->ftf->getValue->valueToString->setText->catch->ftf->setText->setEditValid->finally->getDocumentFilter->installDocumentFilter->ftf->getNavigationFilter->setNavigationFilter->ftf->getActions->setFormatterActions
JFormattedTextField.AbstractFormatter#uninstall():::Uninstalls any state the AbstractFormatter may have installed on the JFormattedTextField:::if->installDocumentFilter->setNavigationFilter->setFormatterActions
JFormattedTextField.AbstractFormatter#stringToValue(String):::Parses text returning an arbitrary Object:::
JFormattedTextField.AbstractFormatter#valueToString(Object):::Returns the string value to display for value.:::
JFormattedTextField.AbstractFormatter#getFormattedTextField():::Returns the current JFormattedTextField the AbstractFormatter is installed on.:::return
JFormattedTextField.AbstractFormatter#invalidEdit():::This should be invoked when the user types an invalid character:::ftf->getFormattedTextField->if->ftf->invalidEdit
JFormattedTextField.AbstractFormatter#setEditValid(boolean):::Invoke this to update the editValid property of the JFormattedTextField:::ftf->getFormattedTextField->if->ftf->setEditValid
JFormattedTextField.AbstractFormatter#getActions():::Subclass and override if you wish to provide a custom set of Actions:::return
JFormattedTextField.AbstractFormatter#getDocumentFilter():::Subclass and override if you wish to provide a DocumentFilter to restrict what can be input:::return
JFormattedTextField.AbstractFormatter#getNavigationFilter():::Subclass and override if you wish to provide a filter to restrict where the user can navigate to:::return
JFormattedTextField.AbstractFormatter#clone():::Clones the AbstractFormatter:::formatter->super->clone->return
JFormattedTextField.AbstractFormatter#installDocumentFilter(DocumentFilter):::Installs the DocumentFilter filter onto the current JFormattedTextField.:::ftf->getFormattedTextField->if->doc->ftf->getDocument->if->setDocumentFilter->doc->putProperty
JFormattedTextField.CommitAction#actionPerformed(ActionEvent)::: commit action action performed:::target->getFocusedComponent->if->try->commitEdit->catch->invalidEdit->return->finally->super->actionPerformed
JFormattedTextField.CommitAction#isEnabled()::: commit action is enabled:::target->getFocusedComponent->if->ftf->if->ftf->isEdited->return->return->return->super->isEnabled
JFormattedTextField.CancelAction#actionPerformed(ActionEvent)::: cancel action action performed:::target->getFocusedComponent->if->ftf->ftf->ftf->getValue->setValue
JFormattedTextField.CancelAction#isEnabled()::: cancel action is enabled:::target->getFocusedComponent->if->ftf->if->ftf->isEdited->return->return->return->super->isEnabled
JFormattedTextField.DocumentHandler#insertUpdate(DocumentEvent)::: document handler insert update:::setEdited
JFormattedTextField.DocumentHandler#removeUpdate(DocumentEvent)::: document handler remove update:::setEdited
JFormattedTextField.DocumentHandler#changedUpdate(DocumentEvent)::: document handler changed update:::
JFrame#frameInit():::Called by the constructors to init the JFrame properly.:::enableEvents->JComponent->getDefaultLocale->setLocale->createRootPane->setRootPane->UIManager->getColor->setBackground->setRootPaneCheckingEnabled->if->JFrame->isDefaultLookAndFeelDecorated->supportsWindowDecorations->UIManager->getLookAndFeel->getSupportsWindowDecorations->if->setUndecorated->getRootPane->setWindowDecorationStyle->checkAndSetPolicy
JFrame#createRootPane():::Called by the constructor methods to create the default rootPane.:::rp->new->JRootPane->rp->setOpaque->return
JFrame#processWindowEvent(WindowEvent):::Processes window events occurring on this component:::super->processWindowEvent->if->e->getID->switch->setVisible->break->dispose->break->System->exit->break
JFrame#setDefaultCloseOperation(int):::Sets the operation that will happen by default when the user initiates a "close" on this frame:::if->throw->new->IllegalArgumentException->if->security->System->getSecurityManager->if->security->checkExit->if->oldValue->firePropertyChange
JFrame#getDefaultCloseOperation():::Returns the operation that occurs when the user initiates a "close" on this frame.:::return
JFrame#setTransferHandler(TransferHandler):::Sets the transferHandler property, which is a mechanism to support transfer of data into this component:::oldHandler->SwingUtilities->installSwingDropTargetAsNecessary->firePropertyChange
JFrame#getTransferHandler():::Gets the transferHandler property.:::return
JFrame#update(Graphics):::Just calls paint(g):::paint
JFrame#setJMenuBar(JMenuBar):::Sets the menubar for this frame.:::getRootPane->setJMenuBar
JFrame#getJMenuBar():::Returns the menubar set on this frame.:::return->getRootPane->getJMenuBar
JFrame#isRootPaneCheckingEnabled():::Returns whether calls to add and setLayout are forwarded to the contentPane.:::return
JFrame#setRootPaneCheckingEnabled(boolean):::Sets whether calls to add and setLayout are forwarded to the contentPane.:::
JFrame#addImpl(Component, Object, int):::Adds the specified child Component:::if->isRootPaneCheckingEnabled->getContentPane->add->else->super->addImpl
JFrame#remove(Component):::Removes the specified component from the container:::if->super->remove->else->getContentPane->remove
JFrame#setLayout(LayoutManager):::Sets the LayoutManager:::if->isRootPaneCheckingEnabled->getContentPane->setLayout->else->super->setLayout
JFrame#getRootPane():::Returns the rootPane object for this frame.:::return
JFrame#setRootPane(JRootPane):::Sets the rootPane property:::if->remove->if->checkingEnabled->isRootPaneCheckingEnabled->try->setRootPaneCheckingEnabled->add->catch->finally->setRootPaneCheckingEnabled
JFrame#setIconImage(Image)::: frame set icon image:::super->setIconImage
JFrame#getContentPane():::Returns the contentPane object for this frame.:::return->getRootPane->getContentPane
JFrame#setContentPane(Container):::Sets the contentPane property:::getRootPane->setContentPane
JFrame#getLayeredPane():::Returns the layeredPane object for this frame.:::return->getRootPane->getLayeredPane
JFrame#setLayeredPane(JLayeredPane):::Sets the layeredPane property:::getRootPane->setLayeredPane
JFrame#getGlassPane():::Returns the glassPane object for this frame.:::return->getRootPane->getGlassPane
JFrame#setGlassPane(Component):::Sets the glassPane property:::getRootPane->setGlassPane
JFrame#getGraphics()::: frame get graphics:::JComponent->getGraphicsInvoked->return->super->getGraphics
JFrame#repaint(long, int, int, int, int):::Repaints the specified rectangle of this component within time milliseconds:::if->RepaintManager->currentManager->addDirtyRegion->else->super->repaint
JFrame#setDefaultLookAndFeelDecorated(boolean):::Provides a hint as to whether or not newly created JFrames should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel:::if->SwingUtilities->appContextPut->else->SwingUtilities->appContextPut
JFrame#isDefaultLookAndFeelDecorated():::Returns true if newly created JFrames should have their Window decorations provided by the current look and feel:::defaultLookAndFeelDecorated->SwingUtilities->appContextGet->if->return->defaultLookAndFeelDecorated->booleanValue
JFrame#paramString():::Returns a string representation of this JFrame:::defaultCloseOperationString->if->else->if->else->if->else->if->else->rootPaneString->rootPane->toString->rootPaneCheckingEnabledString->return->super->paramString
JFrame#getAccessibleContext():::Gets the AccessibleContext associated with this JFrame:::if->new->AccessibleJFrame->return
JFrame.AccessibleJFrame#getAccessibleName():::Get the accessible name of this object.:::if->return->else->if->getTitle->return->super->getAccessibleName->else->return->getTitle
JFrame.AccessibleJFrame#getAccessibleStateSet():::Get the state of this object.:::states->super->getAccessibleStateSet->if->isResizable->states->add->if->getFocusOwner->states->add->return
JInternalFrame#addPropertyChangeListenerIfNecessary()::: internal frame add property change listener if necessary:::if->AppContext->getAppContext->get->focusListener->new->FocusPropertyChangeListener->AppContext->getAppContext->put->KeyboardFocusManager->getCurrentKeyboardFocusManager->addPropertyChangeListener
JInternalFrame.FocusPropertyChangeListener#propertyChange(PropertyChangeEvent)::: focus property change listener property change:::if->e->getPropertyName->e->getNewValue->updateLastFocusOwner
JInternalFrame#updateLastFocusOwner(Component)::: internal frame update last focus owner:::if->parent->while->if->setLastFocusOwner->parent->getParent
JInternalFrame#createRootPane():::Called by the constructor to set up the JRootPane.:::return->new->JRootPane
JInternalFrame#getUI():::Returns the look-and-feel object that renders this component.:::return
JInternalFrame#setUI(InternalFrameUI):::Sets the UI delegate for this JInternalFrame.:::checkingEnabled->isRootPaneCheckingEnabled->try->setRootPaneCheckingEnabled->super->setUI->catch->finally->setRootPaneCheckingEnabled
JInternalFrame#updateUI():::Notification from the UIManager that the look and feel has changed:::UIManager->getUI->setUI->invalidate->if->desktopIcon->updateUIWhenHidden
JInternalFrame#updateUIWhenHidden()::: internal frame update when hidden:::UIManager->getUI->setUI->invalidate->children->getComponents->if->foreach->SwingUtilities->updateComponentTreeUI
JInternalFrame#getUIClassID():::Returns the name of the look-and-feel class that renders this component.:::return
JInternalFrame#isRootPaneCheckingEnabled():::Returns whether calls to add and setLayout are forwarded to the contentPane.:::return
JInternalFrame#setRootPaneCheckingEnabled(boolean):::Sets whether calls to add and setLayout are forwarded to the contentPane.:::
JInternalFrame#addImpl(Component, Object, int):::Adds the specified child Component:::if->isRootPaneCheckingEnabled->getContentPane->add->else->super->addImpl
JInternalFrame#remove(Component):::Removes the specified component from the container:::oldCount->getComponentCount->super->remove->if->getComponentCount->getContentPane->remove
JInternalFrame#setLayout(LayoutManager):::Ensures that, by default, the layout of this component cannot be set:::if->isRootPaneCheckingEnabled->getContentPane->setLayout->else->super->setLayout
JInternalFrame#getMenuBar():::Returns the current JMenuBar for this JInternalFrame, or null if no menu bar has been set.:::return->getRootPane->getMenuBar
JInternalFrame#getJMenuBar():::Returns the current JMenuBar for this JInternalFrame, or null if no menu bar has been set.:::return->getRootPane->getJMenuBar
JInternalFrame#setMenuBar(JMenuBar):::Sets the menuBar property for this JInternalFrame.:::oldValue->getMenuBar->getRootPane->setJMenuBar->firePropertyChange
JInternalFrame#setJMenuBar(JMenuBar):::Sets the menuBar property for this JInternalFrame.:::oldValue->getMenuBar->getRootPane->setJMenuBar->firePropertyChange
JInternalFrame#getContentPane():::Returns the content pane for this internal frame.:::return->getRootPane->getContentPane
JInternalFrame#setContentPane(Container):::Sets this JInternalFrame's contentPane property.:::oldValue->getContentPane->getRootPane->setContentPane->firePropertyChange
JInternalFrame#getLayeredPane():::Returns the layered pane for this internal frame.:::return->getRootPane->getLayeredPane
JInternalFrame#setLayeredPane(JLayeredPane):::Sets this JInternalFrame's layeredPane property.:::oldValue->getLayeredPane->getRootPane->setLayeredPane->firePropertyChange
JInternalFrame#getGlassPane():::Returns the glass pane for this internal frame.:::return->getRootPane->getGlassPane
JInternalFrame#setGlassPane(Component):::Sets this JInternalFrame's glassPane property.:::oldValue->getGlassPane->getRootPane->setGlassPane->firePropertyChange
JInternalFrame#getRootPane():::Returns the rootPane object for this internal frame.:::return
JInternalFrame#setRootPane(JRootPane):::Sets the rootPane property for this JInternalFrame:::if->remove->oldValue->getRootPane->if->checkingEnabled->isRootPaneCheckingEnabled->try->setRootPaneCheckingEnabled->add->catch->finally->setRootPaneCheckingEnabled->firePropertyChange
JInternalFrame#setClosable(boolean):::Sets whether this JInternalFrame can be closed by some user action.:::oldValue->newValue->firePropertyChange
JInternalFrame#isClosable():::Returns whether this JInternalFrame can be closed by some user action.:::return
JInternalFrame#isClosed():::Returns whether this JInternalFrame is currently closed.:::return
JInternalFrame#setClosed(boolean):::Closes this internal frame if the argument is true:::if->return->oldValue->newValue->if->fireInternalFrameEvent->fireVetoableChange->if->setVisible->firePropertyChange->if->dispose->else->if
JInternalFrame#setResizable(boolean):::Sets whether the JInternalFrame can be resized by some user action.:::oldValue->newValue->firePropertyChange
JInternalFrame#isResizable():::Returns whether the JInternalFrame can be resized by some user action.:::return
JInternalFrame#setIconifiable(boolean):::Sets the iconable property, which must be true for the user to be able to make the JInternalFrame an icon:::oldValue->newValue->firePropertyChange
JInternalFrame#isIconifiable():::Gets the iconable property, which by default is false.:::return
JInternalFrame#isIcon():::Returns whether the JInternalFrame is currently iconified.:::return
JInternalFrame#setIcon(boolean):::Iconifies or de-iconifies this internal frame, if the look and feel supports iconification:::if->return->getParent->firePropertyChange->oldValue->newValue->fireVetoableChange->firePropertyChange->if->fireInternalFrameEvent->else->fireInternalFrameEvent
JInternalFrame#setMaximizable(boolean):::Sets the maximizable property, which determines whether the JInternalFrame can be maximized by some user action:::oldValue->newValue->firePropertyChange
JInternalFrame#isMaximizable():::Gets the value of the maximizable property.:::return
JInternalFrame#isMaximum():::Returns whether the JInternalFrame is currently maximized.:::return
JInternalFrame#setMaximum(boolean):::Maximizes and restores this internal frame:::if->return->oldValue->newValue->fireVetoableChange->firePropertyChange
JInternalFrame#getTitle():::Returns the title of the JInternalFrame.:::return
JInternalFrame#setTitle(String):::Sets the JInternalFrame title:::oldValue->firePropertyChange
JInternalFrame#setSelected(boolean):::Selects or deselects the internal frame if it's showing:::if->restoreSubcomponentFocus->return->if->desktopIcon->isShowing->isShowing->return->oldValue->newValue->fireVetoableChange->if->restoreSubcomponentFocus->firePropertyChange->if->fireInternalFrameEvent->else->fireInternalFrameEvent->try->getDefaultToolkit->getSystemEventQueue->new->sun.awt.UngrabEvent->postEvent->catch->this->new->sun.awt.UngrabEvent->dispatchEvent->finally->repaint
JInternalFrame#isSelected():::Returns whether the JInternalFrame is the currently "selected" or active frame.:::return
JInternalFrame#setFrameIcon(Icon):::Sets an image to be displayed in the titlebar of this internal frame (usually in the top-left corner):::oldIcon->firePropertyChange
JInternalFrame#getFrameIcon():::Returns the image displayed in the title bar of this internal frame (usually in the top-left corner).:::return
JInternalFrame#moveToFront():::Convenience method that moves this component to position 0 if its parent is a JLayeredPane.:::if->isIcon->if->getDesktopIcon->getParent->getDesktopIcon->getParent->getDesktopIcon->moveToFront->else->if->getParent->getParent->moveToFront
JInternalFrame#moveToBack():::Convenience method that moves this component to position -1 if its parent is a JLayeredPane.:::if->isIcon->if->getDesktopIcon->getParent->getDesktopIcon->getParent->getDesktopIcon->moveToBack->else->if->getParent->getParent->moveToBack
JInternalFrame#getLastCursor():::Returns the last Cursor that was set by the setCursor method that is not a resizable Cursor.:::return
JInternalFrame#setCursor(Cursor)::: internal frame set cursor:::if->super->setCursor->return->type->cursor->getType->if->super->setCursor
JInternalFrame#setLayer(Integer):::Convenience method for setting the layer attribute of this component.:::if->getParent->getParent->p->getParent->p->layer->intValue->p->getPosition->setLayer->else->JLayeredPane->layer->intValue->putLayer->if->getParent->getParent->getX->getY->getWidth->getHeight->repaint
JInternalFrame#setLayer(int):::Convenience method for setting the layer attribute of this component:::this->Integer->valueOf->setLayer
JInternalFrame#getLayer():::Convenience method for getting the layer attribute of this component.:::return->JLayeredPane->getLayer
JInternalFrame#getDesktopPane():::Convenience method that searches the ancestor hierarchy for a JDesktop instance:::p->getParent->while->p->getParent->if->getDesktopIcon->getParent->while->p->getParent->return
JInternalFrame#setDesktopIcon(JDesktopIcon):::Sets the JDesktopIcon associated with this JInternalFrame.:::oldValue->getDesktopIcon->firePropertyChange
JInternalFrame#getDesktopIcon():::Returns the JDesktopIcon used when this JInternalFrame is iconified.:::return
JInternalFrame#getNormalBounds():::If the JInternalFrame is not in maximized state, returns getBounds(); otherwise, returns the bounds that the JInternalFrame would be restored to.:::if->return->else->return->getBounds
JInternalFrame#setNormalBounds(Rectangle):::Sets the normal bounds for this internal frame, the bounds that this internal frame would be restored to from its maximized state:::
JInternalFrame#getFocusOwner():::If this JInternalFrame is active, returns the child that has focus:::if->isSelected->return->return
JInternalFrame#getMostRecentFocusOwner():::Returns the child component of this JInternalFrame that will receive the focus when this JInternalFrame is selected:::if->isSelected->return->getFocusOwner->if->return->policy->getFocusTraversalPolicy->if->return->getInitialComponent->toFocus->policy->getDefaultComponent->if->return->return->getContentPane
JInternalFrame#restoreSubcomponentFocus():::Requests the internal frame to restore focus to the last subcomponent that had focus:::if->isIcon->SwingUtilities2->getDesktopIcon->compositeRequestFocus->else->component->KeyboardFocusManager->getCurrentKeyboardFocusManager->getPermanentFocusOwner->if->SwingUtilities->isDescendingFrom->getMostRecentFocusOwner->setLastFocusOwner->if->getContentPane->setLastFocusOwner->lastFocusOwner->requestFocus
JInternalFrame#setLastFocusOwner(Component)::: internal frame set last focus owner:::
JInternalFrame#reshape(int, int, int, int):::Moves and resizes this component:::super->reshape->validate->repaint
JInternalFrame#addInternalFrameListener(InternalFrameListener):::Adds the specified listener to receive internal frame events from this internal frame.:::listenerList->add->enableEvents
JInternalFrame#removeInternalFrameListener(InternalFrameListener):::Removes the specified internal frame listener so that it no longer receives internal frame events from this internal frame.:::listenerList->remove
JInternalFrame#getInternalFrameListeners():::Returns an array of all the InternalFrameListeners added to this JInternalFrame with addInternalFrameListener.:::return->listenerList->getListeners
JInternalFrame#fireInternalFrameEvent(int):::Fires an internal frame event.:::listeners->listenerList->getListenerList->e->for->i
JInternalFrame#doDefaultCloseAction():::Fires an INTERNAL_FRAME_CLOSING event and then performs the action specified by the internal frame's default close operation:::fireInternalFrameEvent->switch->break->setVisible->if->isSelected->try->setSelected->catch->finally->break->try->fireVetoableChange->setVisible->firePropertyChange->dispose->catch->finally->break->break
JInternalFrame#setDefaultCloseOperation(int):::Sets the operation that will happen by default when the user initiates a "close" on this internal frame:::
JInternalFrame#getDefaultCloseOperation():::Returns the default operation that occurs when the user initiates a "close" on this internal frame.:::return
JInternalFrame#pack():::Causes subcomponents of this JInternalFrame to be laid out at their preferred size:::try->if->isIcon->setIcon->else->if->isMaximum->setMaximum->catch->return->finally->getPreferredSize->setSize->validate
JInternalFrame#show():::If the internal frame is not visible, brings the internal frame to the front, makes it visible, and attempts to select it:::if->isVisible->return->if->fireInternalFrameEvent->getDesktopIcon->setVisible->toFront->super->show->if->return->if->isSelected->try->setSelected->catch->finally
JInternalFrame#hide()::: internal frame hide:::if->isIcon->getDesktopIcon->setVisible->super->hide
JInternalFrame#dispose():::Makes this internal frame invisible, unselected, and closed:::if->isVisible->setVisible->if->firePropertyChange->fireInternalFrameEvent->try->getDefaultToolkit->getSystemEventQueue->new->sun.awt.UngrabEvent->postEvent->catch->this->new->sun.awt.UngrabEvent->dispatchEvent->finally
JInternalFrame#toFront():::Brings this internal frame to the front:::moveToFront
JInternalFrame#toBack():::Sends this internal frame to the back:::moveToBack
JInternalFrame#setFocusCycleRoot(boolean):::Does nothing because JInternalFrames must always be roots of a focus traversal cycle.:::
JInternalFrame#isFocusCycleRoot():::Always returns true because all JInternalFrames must be roots of a focus traversal cycle.:::return
JInternalFrame#getFocusCycleRootAncestor():::Always returns null because JInternalFrames must always be roots of a focus traversal cycle.:::return
JInternalFrame#getWarningString():::Gets the warning string that is displayed with this internal frame:::return
JInternalFrame#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->old->isRootPaneCheckingEnabled->try->setRootPaneCheckingEnabled->ui->installUI->catch->finally->setRootPaneCheckingEnabled
JInternalFrame#compWriteObjectNotify()::: internal frame comp write object notify:::old->isRootPaneCheckingEnabled->try->setRootPaneCheckingEnabled->super->compWriteObjectNotify->catch->finally->setRootPaneCheckingEnabled
JInternalFrame#paramString():::Returns a string representation of this JInternalFrame:::rootPaneString->rootPane->toString->rootPaneCheckingEnabledString->closableString->isClosedString->maximizableString->isMaximumString->iconableString->isIconString->resizableString->isSelectedString->frameIconString->frameIcon->toString->titleString->desktopIconString->desktopIcon->toString->openedString->defaultCloseOperationString->if->else->if->else->if->else->return->super->paramString
JInternalFrame#paintComponent(Graphics):::Overridden to allow optimized painting when the internal frame is being dragged.:::if->super->paintComponent
JInternalFrame#getAccessibleContext():::Gets the AccessibleContext associated with this JInternalFrame:::if->new->AccessibleJInternalFrame->return
JInternalFrame.AccessibleJInternalFrame#getAccessibleName():::Get the accessible name of this object.:::name->if->getClientProperty->if->getTitle->return
JInternalFrame.AccessibleJInternalFrame#getAccessibleRole():::Get the role of this object.:::return
JInternalFrame.AccessibleJInternalFrame#getAccessibleValue():::Gets the AccessibleValue associated with this object:::return
JInternalFrame.AccessibleJInternalFrame#getCurrentAccessibleValue():::Get the value of this object as a Number.:::return->Integer->getLayer->valueOf
JInternalFrame.AccessibleJInternalFrame#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::if->return->Integer->n->intValue->valueOf->setLayer->return
JInternalFrame.AccessibleJInternalFrame#getMinimumAccessibleValue():::Get the minimum value of this object as a Number.:::return
JInternalFrame.AccessibleJInternalFrame#getMaximumAccessibleValue():::Get the maximum value of this object as a Number.:::return
JInternalFrame.JDesktopIcon#getUI():::Returns the look-and-feel object that renders this component.:::return
JInternalFrame.JDesktopIcon#setUI(DesktopIconUI):::Sets the look-and-feel object that renders this component.:::super->setUI
JInternalFrame.JDesktopIcon#getInternalFrame():::Returns the JInternalFrame that this DesktopIcon is associated with.:::return
JInternalFrame.JDesktopIcon#setInternalFrame(JInternalFrame):::Sets the JInternalFrame with which this DesktopIcon is associated.:::
JInternalFrame.JDesktopIcon#getDesktopPane():::Convenience method to ask the icon for the Desktop object it belongs to.:::if->getInternalFrame->return->getInternalFrame->getDesktopPane->return
JInternalFrame.JDesktopIcon#updateUI():::Notification from the UIManager that the look and feel has changed:::hadUI->UIManager->getUI->setUI->invalidate->r->getPreferredSize->setSize->if->internalFrame->getUI->SwingUtilities->updateComponentTreeUI
JInternalFrame.JDesktopIcon#updateUIWhenHidden()::: desktop icon update when hidden:::UIManager->getUI->setUI->r->getPreferredSize->setSize->invalidate->children->getComponents->if->foreach->SwingUtilities->updateComponentTreeUI
JInternalFrame.JDesktopIcon#getUIClassID():::Returns the name of the look-and-feel class that renders this component.:::return
JInternalFrame.JDesktopIcon#writeObject(ObjectOutputStream)::: desktop icon write object:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JInternalFrame.JDesktopIcon#getAccessibleContext():::Gets the AccessibleContext associated with this JDesktopIcon:::if->new->AccessibleJDesktopIcon->return
JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getAccessibleRole():::Gets the role of this object.:::return
JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getAccessibleValue():::Gets the AccessibleValue associated with this object:::return
JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getCurrentAccessibleValue():::Gets the value of this object as a Number.:::a->JDesktopIcon.this->getInternalFrame->getAccessibleContext->v->a->getAccessibleValue->if->return->v->getCurrentAccessibleValue->else->return
JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#setCurrentAccessibleValue(Number):::Sets the value of this object as a Number.:::if->return->a->JDesktopIcon.this->getInternalFrame->getAccessibleContext->v->a->getAccessibleValue->if->return->v->setCurrentAccessibleValue->else->return
JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getMinimumAccessibleValue():::Gets the minimum value of this object as a Number.:::a->JDesktopIcon.this->getInternalFrame->getAccessibleContext->if->return->getMinimumAccessibleValue->else->return
JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getMaximumAccessibleValue():::Gets the maximum value of this object as a Number.:::a->JDesktopIcon.this->getInternalFrame->getAccessibleContext->if->return->getMaximumAccessibleValue->else->return
JLabel#getUI():::Returns the L&amp;F object that renders this component.:::return
JLabel#setUI(LabelUI):::Sets the L&amp;F object that renders this component.:::super->setUI->if->setDisabledIcon
JLabel#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JLabel#getUIClassID():::Returns a string that specifies the name of the l&amp;f class that renders this component.:::return
JLabel#getText():::Returns the text string that the label displays.:::return
JLabel#setText(String):::Defines the single line of text this component will display:::oldAccessibleName->if->accessibleContext->getAccessibleName->oldValue->firePropertyChange->SwingUtilities->getDisplayedMnemonic->findDisplayedMnemonicIndex->setDisplayedMnemonicIndex->if->accessibleContext->getAccessibleName->accessibleContext->accessibleContext->getAccessibleName->firePropertyChange->if->text->equals->revalidate->repaint
JLabel#getIcon():::Returns the graphic image (glyph, icon) that the label displays.:::return
JLabel#setIcon(Icon):::Defines the icon this component will display:::oldValue->if->firePropertyChange->if->accessibleContext->firePropertyChange->if->if->defaultIcon->getIconWidth->oldValue->getIconWidth->defaultIcon->getIconHeight->oldValue->getIconHeight->revalidate->repaint
JLabel#getDisabledIcon():::Returns the icon used by the label when it's disabled:::if->UIManager->getLookAndFeel->getDisabledIcon->if->firePropertyChange->return
JLabel#setDisabledIcon(Icon):::Set the icon to be displayed if this JLabel is "disabled" (JLabel.setEnabled(false)):::oldValue->firePropertyChange->if->if->disabledIcon->getIconWidth->oldValue->getIconWidth->disabledIcon->getIconHeight->oldValue->getIconHeight->revalidate->if->isEnabled->repaint
JLabel#setDisplayedMnemonic(int):::Specify a keycode that indicates a mnemonic key:::oldKey->firePropertyChange->SwingUtilities->getText->findDisplayedMnemonicIndex->setDisplayedMnemonicIndex->if->revalidate->repaint
JLabel#setDisplayedMnemonic(char):::Specifies the displayedMnemonic as a char value.:::vk->getExtendedKeyCodeForChar->if->setDisplayedMnemonic
JLabel#getDisplayedMnemonic():::Return the keycode that indicates a mnemonic key:::return
JLabel#setDisplayedMnemonicIndex(int):::Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic:::oldValue->if->else->text->getText->textLength->text->length->if->throw->new->IllegalArgumentException->firePropertyChange->if->revalidate->repaint
JLabel#getDisplayedMnemonicIndex():::Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.:::return
JLabel#checkHorizontalKey(int, String):::Verify that key is a legal value for the horizontalAlignment properties.:::if->return->else->throw->new->IllegalArgumentException
JLabel#checkVerticalKey(int, String):::Verify that key is a legal value for the verticalAlignment or verticalTextPosition properties.:::if->return->else->throw->new->IllegalArgumentException
JLabel#getIconTextGap():::Returns the amount of space between the text and the icon displayed in this label.:::return
JLabel#setIconTextGap(int):::If both the icon and text properties are set, this property defines the space between them:::oldValue->firePropertyChange->if->revalidate->repaint
JLabel#getVerticalAlignment():::Returns the alignment of the label's contents along the Y axis.:::return
JLabel#setVerticalAlignment(int):::Sets the alignment of the label's contents along the Y axis:::if->return->oldValue->checkVerticalKey->firePropertyChange->repaint
JLabel#getHorizontalAlignment():::Returns the alignment of the label's contents along the X axis.:::return
JLabel#setHorizontalAlignment(int):::Sets the alignment of the label's contents along the X axis:::if->return->oldValue->checkHorizontalKey->firePropertyChange->repaint
JLabel#getVerticalTextPosition():::Returns the vertical position of the label's text, relative to its image.:::return
JLabel#setVerticalTextPosition(int):::Sets the vertical position of the label's text, relative to its image:::if->return->old->checkVerticalKey->firePropertyChange->revalidate->repaint
JLabel#getHorizontalTextPosition():::Returns the horizontal position of the label's text, relative to its image.:::return
JLabel#setHorizontalTextPosition(int):::Sets the horizontal position of the label's text, relative to its image.:::old->checkHorizontalKey->firePropertyChange->revalidate->repaint
JLabel#imageUpdate(Image, int, int, int, int, int):::This is overridden to return false if the current Icon's Image is not equal to the passed in Image img.:::if->isShowing->SwingUtilities->getIcon->doesIconReferenceImage->SwingUtilities->doesIconReferenceImage->return->return->super->imageUpdate
JLabel#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JLabel#paramString():::Returns a string representation of this JLabel:::textString->defaultIconString->defaultIcon->toString->disabledIconString->disabledIcon->toString->labelForString->labelFor->toString->verticalAlignmentString->if->else->if->else->if->else->horizontalAlignmentString->if->else->if->else->if->else->if->else->if->else->verticalTextPositionString->if->else->if->else->if->else->horizontalTextPositionString->if->else->if->else->if->else->if->else->if->else->return->super->paramString
JLabel#getLabelFor():::Get the component this is labelling.:::return
JLabel#setLabelFor(Component):::Set the component this is labelling:::oldC->firePropertyChange->if->putClientProperty->if->putClientProperty
JLabel#getAccessibleContext():::Get the AccessibleContext of this object:::if->new->AccessibleJLabel->return
JLabel.AccessibleJLabel#getAccessibleName():::Get the accessible name of this object.:::name->if->getClientProperty->if->JLabel.this->getText->if->super->getAccessibleName->return
JLabel.AccessibleJLabel#getAccessibleRole():::Get the role of this object.:::return
JLabel.AccessibleJLabel#getAccessibleIcon():::Get the AccessibleIcons associated with this object if one or more exist:::icon->getIcon->if->ac->getAccessibleContext->if->return->new->AccessibleIconArr->return
JLabel.AccessibleJLabel#getAccessibleRelationSet():::Get the AccessibleRelationSet associated with this object if one exists:::relationSet->super->getAccessibleRelationSet->if->relationSet->contains->c->JLabel.this->getLabelFor->if->relation->new->AccessibleRelation->relation->setTarget->relationSet->add->return
JLabel.AccessibleJLabel#getAccessibleText()::: accessible label get accessible text:::view->JLabel.this->getClientProperty->if->return->else->return
JLabel.AccessibleJLabel#getIndexAtPoint(Point):::Given a point in local coordinates, return the zero-based index of the character under that Point:::view->JLabel.this->getClientProperty->if->r->getTextRectangle->if->return->shape->new->Rectangle2D.Float->bias->new->Position.BiasArr->return->view->viewToModel->else->return
JLabel.AccessibleJLabel#getCharacterBounds(int):::Returns the bounding box of the character at the given index in the string:::view->JLabel.this->getClientProperty->if->r->getTextRectangle->if->return->shape->new->Rectangle2D.Float->try->charShape->view->modelToView->return->charShape->getBounds->catch->return->finally->else->return
JLabel.AccessibleJLabel#getCharCount():::Return the number of characters (valid indicies):::view->JLabel.this->getClientProperty->if->d->view->getDocument->if->doc->return->doc->getLength->return->accessibleContext->getAccessibleName->length
JLabel.AccessibleJLabel#getCaretPosition():::Return the zero-based offset of the caret:::return
JLabel.AccessibleJLabel#getAtIndex(int, int):::Returns the String at a given index.:::if->getCharCount->return->switch->try->return->getText->catch->return->finally->try->s->getCharCount->getText->words->BreakIterator->getLocale->getWordInstance->words->setText->end->words->following->return->s->words->previous->substring->catch->return->finally->try->s->getCharCount->getText->sentence->BreakIterator->getLocale->getSentenceInstance->sentence->setText->end->sentence->following->return->s->sentence->previous->substring->catch->return->finally->return
JLabel.AccessibleJLabel#getAfterIndex(int, int):::Returns the String after a given index.:::if->getCharCount->return->switch->if->getCharCount->return->try->return->getText->catch->return->finally->try->s->getCharCount->getText->words->BreakIterator->getLocale->getWordInstance->words->setText->start->words->following->if->s->length->return->end->words->following->if->s->length->return->return->s->substring->catch->return->finally->try->s->getCharCount->getText->sentence->BreakIterator->getLocale->getSentenceInstance->sentence->setText->start->sentence->following->if->s->length->return->end->sentence->following->if->s->length->return->return->s->substring->catch->return->finally->return
JLabel.AccessibleJLabel#getBeforeIndex(int, int):::Returns the String before a given index.:::if->getCharCount->return->switch->if->return->try->return->getText->catch->return->finally->try->s->getCharCount->getText->words->BreakIterator->getLocale->getWordInstance->words->setText->end->words->following->words->previous->start->words->previous->if->return->return->s->substring->catch->return->finally->try->s->getCharCount->getText->sentence->BreakIterator->getLocale->getSentenceInstance->sentence->setText->end->sentence->following->sentence->previous->start->sentence->previous->if->return->return->s->substring->catch->return->finally->return
JLabel.AccessibleJLabel#getCharacterAttribute(int):::Return the AttributeSet for a given character at a given index:::view->JLabel.this->getClientProperty->if->d->view->getDocument->if->doc->elem->doc->getCharacterElement->if->return->elem->getAttributes->return
JLabel.AccessibleJLabel#getSelectionStart():::Returns the start offset within the selected text:::return
JLabel.AccessibleJLabel#getSelectionEnd():::Returns the end offset within the selected text:::return
JLabel.AccessibleJLabel#getSelectedText():::Returns the portion of the text that is selected.:::return
JLabel.AccessibleJLabel#getText(int, int)::: accessible label get text:::view->JLabel.this->getClientProperty->if->d->view->getDocument->if->doc->return->doc->getText->return
JLabel.AccessibleJLabel#getTextRectangle()::: accessible label get text rectangle:::text->JLabel.this->getText->icon->JLabel.this->isEnabled->JLabel.this->getIcon->JLabel.this->getDisabledIcon->if->return->paintIconR->new->Rectangle->paintTextR->new->Rectangle->paintViewR->new->Rectangle->paintViewInsets->new->Insets->JLabel.this->getInsets->JLabel.this->getWidth->JLabel.this->getHeight->clippedText->SwingUtilities->getFont->getFontMetrics->JLabel.this->getVerticalAlignment->JLabel.this->getHorizontalAlignment->JLabel.this->getVerticalTextPosition->JLabel.this->getHorizontalTextPosition->JLabel.this->getIconTextGap->layoutCompoundLabel->return
JLabel.AccessibleJLabel#getAccessibleExtendedComponent():::Returns the AccessibleExtendedComponent:::return
JLabel.AccessibleJLabel#getToolTipText():::Returns the tool tip text:::return->JLabel.this->getToolTipText
JLabel.AccessibleJLabel#getTitledBorderText():::Returns the titled border text:::return->super->getTitledBorderText
JLabel.AccessibleJLabel#getAccessibleKeyBinding():::Returns key bindings associated with this object:::mnemonic->JLabel.this->getDisplayedMnemonic->if->return->return->new->LabelKeyBinding
JLabel.AccessibleJLabel.LabelKeyBinding#getAccessibleKeyBindingCount():::Returns the number of key bindings for this object:::return
JLabel.AccessibleJLabel.LabelKeyBinding#getAccessibleKeyBinding(int):::Returns a key binding for this object:::if->throw->new->IllegalArgumentException->return->KeyStroke->getKeyStroke
JLayer#getView():::Returns the JLayer's view component or null:::return
JLayer#setView(V):::Sets the JLayer's view component, which can be null:::oldView->getView->if->super->remove->if->super->getComponentCount->addImpl->firePropertyChange->revalidate->repaint
JLayer#setUI(LayerUI):::Sets the javax.swing.plaf.LayerUI which will perform painting and receive input events for this JLayer.:::super->setUI
JLayer#getUI():::Returns the javax.swing.plaf.LayerUI for this JLayer.:::return
JLayer#getGlassPane():::Returns the JLayer's glassPane component or null:::return
JLayer#setGlassPane(JPanel):::Sets the JLayer's glassPane component, which can be null:::oldGlassPane->getGlassPane->isGlassPaneVisible->if->oldGlassPane->isVisible->super->remove->if->glassPane->new->Rectangle->setMixingCutoutShape->glassPane->setVisible->super->addImpl->firePropertyChange->revalidate->repaint
JLayer#createGlassPane():::Called by the constructor methods to create a default glassPane:::return->new->DefaultLayerGlassPane
JLayer#setLayout(LayoutManager):::Sets the layout manager for this container:::if->throw->new->IllegalArgumentException
JLayer#setBorder(Border):::Delegates its functionality to the getView().setBorder(Border) method, if the view component is an instance of javax.swing.JComponent, otherwise this method is a no-op.:::if->setBorder
JLayer#getBorder():::Delegates its functionality to the getView().getBorder() method, if the view component is an instance of javax.swing.JComponent, otherwise returns null.:::if->return->getBorder->return
JLayer#addImpl(Component, Object, int):::This method is not supported by JLayer and always throws UnsupportedOperationException:::throw->new->UnsupportedOperationException
JLayer#remove(Component)::: layer remove:::if->super->remove->else->if->getView->setView->else->if->getGlassPane->setGlassPane->else->super->remove
JLayer#removeAll()::: layer remove all:::if->setView->if->setGlassPane
JLayer#isPaintingOrigin():::Always returns true to cause painting to originate from JLayer, or one of its ancestors.:::return
JLayer#paintImmediately(int, int, int, int):::Delegates its functionality to the javax.swing.plaf.LayerUI#paintImmediately(int, int, int, int, JLayer) method, if LayerUI is set.:::if->getUI->try->getUI->paintImmediately->catch->finally->else->super->paintImmediately
JLayer#imageUpdate(Image, int, int, int, int, int):::Delegates its functionality to the javax.swing.plaf.LayerUI#imageUpdate(java.awt.Image, int, int, int, int, int, JLayer) method, if the LayerUI is set.:::if->getUI->try->return->getUI->imageUpdate->catch->finally->else->return->super->imageUpdate
JLayer#paint(Graphics):::Delegates all painting to the javax.swing.plaf.LayerUI object.:::if->try->super->paintComponent->catch->finally->else->super->paint
JLayer#paintComponent(Graphics):::This method is empty, because all painting is done by #paint(Graphics) and javax.swing.plaf.LayerUI#update(Graphics, JComponent) methods:::
JLayer#isOptimizedDrawingEnabled():::The JLayer overrides the default implementation of this method (in JComponent) to return false:::return
JLayer#propertyChange(PropertyChangeEvent)::: layer property change:::if->getUI->getUI->applyPropertyChange
JLayer#setLayerEventMask(long):::Enables the events from JLayer and all its descendants defined by the specified event mask parameter to be delivered to the LayerUI#eventDispatched(AWTEvent, JLayer) method:::oldEventMask->getLayerEventMask->firePropertyChange->if->disableEvents->enableEvents->if->isDisplayable->eventController->updateAWTEventListener
JLayer#getLayerEventMask():::Returns the bitmap of event mask to receive by this JLayer and its LayerUI:::return
JLayer#updateUI():::Delegates its functionality to the javax.swing.plaf.LayerUI#updateUI(JLayer) method, if LayerUI is set.:::if->getUI->getUI->updateUI
JLayer#getPreferredScrollableViewportSize():::Returns the preferred size of the viewport for a view component:::if->getView->return->getView->getPreferredScrollableViewportSize->return->getPreferredSize
JLayer#getScrollableBlockIncrement(Rectangle, int, int):::Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one block of rows or columns, depending on the value of orientation:::if->getView->return->getView->getScrollableBlockIncrement->return
JLayer#getScrollableTracksViewportHeight():::Returns false to indicate that the height of the viewport does not determine the height of the layer, unless the preferred height of the layer is smaller than the height of the viewport:::if->getView->return->getView->getScrollableTracksViewportHeight->return
JLayer#getScrollableTracksViewportWidth():::Returns false to indicate that the width of the viewport does not determine the width of the layer, unless the preferred width of the layer is smaller than the width of the viewport:::if->getView->return->getView->getScrollableTracksViewportWidth->return
JLayer#getScrollableUnitIncrement(Rectangle, int, int):::Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one new row or column, depending on the value of orientation:::if->getView->return->getView->getScrollableUnitIncrement->return
JLayer#readObject(ObjectInputStream)::: layer read object:::f->s->readFields->f->get->f->get->f->get->if->eventController->updateAWTEventListener->newLayerUI->f->get->if->setUI
JLayer#addNotify()::: layer add notify:::super->addNotify->eventController->updateAWTEventListener
JLayer#removeNotify()::: layer remove notify:::super->removeNotify->eventController->updateAWTEventListener
JLayer#doLayout():::Delegates its functionality to the javax.swing.plaf.LayerUI#doLayout(JLayer) method, if LayerUI is set.:::if->getUI->getUI->doLayout
JLayer#getAccessibleContext():::Gets the AccessibleContext associated with this JLayer.:::if->new->AccessibleJComponent->return
JLayer.LayerEventController#eventDispatched(AWTEvent)::: layer event controller event dispatched:::source->event->getSource->if->component->while->if->l->ui->l->getUI->if->l->getLayerEventMask->event->getID->isEventEnabled->isConsumed->ui->eventDispatched->component->getParent
JLayer.LayerEventController#updateAWTEventListener(long, long)::: layer event controller update event listener:::if->layerMaskList->remove->if->layerMaskList->add->combinedMask->foreach->if->removeAWTEventListener->else->if->getCurrentEventMask->removeAWTEventListener->addAWTEventListener
JLayer.LayerEventController#getCurrentEventMask()::: layer event controller get current event mask:::return
JLayer.LayerEventController#addAWTEventListener(long)::: layer event controller add event listener:::AccessController->new->PrivilegedAction<Void>->doPrivileged
JLayer.LayerEventController#removeAWTEventListener()::: layer event controller remove event listener:::AccessController->new->PrivilegedAction<Void>->doPrivileged
JLayer.LayerEventController#isEventEnabled(long, int)::: layer event controller is event enabled:::return
JLayer.DefaultLayerGlassPane#contains(int, int):::First, implementation of this method iterates through glassPane's child components and returns true if any of them is visible and contains passed x,y point:::for->i->getComponentCount->if->getMouseListeners->getMouseMotionListeners->getMouseWheelListeners->isCursorSet->return->return->super->contains
JLayeredPane#validateOptimizedDrawing()::: layered pane validate optimized drawing:::layeredComponentFound->synchronized->getTreeLock->layer->foreach->getComponents->if->SunToolkit->isInstanceOf->getClientProperty->if->layer->equals->continue->break->if->else
JLayeredPane#addImpl(Component, Object, int)::: layered pane add impl:::layer->pos->if->intValue->setLayer->else->getLayer->insertIndexForLayer->super->addImpl->comp->validate->comp->repaint->validateOptimizedDrawing
JLayeredPane#remove(int):::Remove the indexed component from this pane:::c->getComponent->super->remove->if->getComponentToLayer->remove->validateOptimizedDrawing
JLayeredPane#removeAll():::Removes all the components from this container.:::children->getComponents->cToL->getComponentToLayer->for->counter->super->removeAll
JLayeredPane#isOptimizedDrawingEnabled():::Returns false if components in the pane can overlap, which makes optimized drawing impossible:::return
JLayeredPane#putLayer(JComponent, int):::Sets the layer property on a JComponent:::c->putClientProperty
JLayeredPane#getLayer(JComponent):::Gets the layer property for a JComponent, it does not cause any side effects like setLayer():::i->if->c->getClientProperty->return->i->intValue->return->DEFAULT_LAYER->intValue
JLayeredPane#getLayeredPaneAbove(Component):::Convenience method that returns the first JLayeredPane which contains the specified component:::if->return->parent->c->getParent->while->parent->getParent->return
JLayeredPane#setLayer(Component, int):::Sets the layer attribute on the specified component, making it the bottommost component in that layer:::setLayer
JLayeredPane#setLayer(Component, int, int):::Sets the layer attribute for the specified component and also sets its position within that layer.:::layerObj->getObjectForLayer->if->getLayer->getPosition->c->getBounds->repaint->return->if->putClientProperty->else->getComponentToLayer->put->if->c->getParent->c->getParent->c->getBounds->repaint->return->index->insertIndexForLayer->setComponentZOrder->c->getBounds->repaint
JLayeredPane#getLayer(Component):::Returns the layer attribute for the specified Component.:::i->if->getClientProperty->else->getComponentToLayer->get->if->return->DEFAULT_LAYER->intValue->return->i->intValue
JLayeredPane#getIndexOf(Component):::Returns the index of the specified Component:::i->count->getComponentCount->for->return
JLayeredPane#moveToFront(Component):::Moves the component to the top of the components in its current layer (position 0).:::setPosition
JLayeredPane#moveToBack(Component):::Moves the component to the bottom of the components in its current layer (position -1).:::setPosition
JLayeredPane#setPosition(Component, int):::Moves the component to position within its current layer, where 0 is the topmost position within the layer and -1 is the bottommost position:::getLayer->setLayer
JLayeredPane#getPosition(Component):::Get the relative position of the component within its layer.:::i->startLayer->curLayer->startLocation->pos->getComponentCount->getIndexOf->if->return->getLayer->for->return
JLayeredPane#highestLayer():::Returns the highest layer value from all current children:::if->getComponentCount->return->getComponent->getLayer->return
JLayeredPane#lowestLayer():::Returns the lowest layer value from all current children:::count->getComponentCount->if->return->getComponent->getLayer->return
JLayeredPane#getComponentCountInLayer(int):::Returns the number of children currently in the specified layer.:::i->count->curLayer->layerCount->getComponentCount->for->return
JLayeredPane#getComponentsInLayer(int):::Returns an array of the components in the specified layer.:::i->count->curLayer->layerCount->results->getComponentCountInLayer->new->ComponentArr->getComponentCount->for->return
JLayeredPane#paint(Graphics):::Paints this JLayeredPane within the specified graphics context.:::if->isOpaque->r->g->getClipBounds->c->getBackground->if->g->setColor->if->g->fillRect->else->g->getWidth->getHeight->fillRect->super->paint
JLayeredPane#getComponentToLayer():::Returns the hashtable that maps components to layers.:::if->new->Hashtable<Component,Integer>->return
JLayeredPane#getObjectForLayer(int):::Returns the Integer object associated with a specified layer.:::switch->return->return->return->return->return->return
JLayeredPane#insertIndexForLayer(int, int):::Primitive method that determines the proper location to insert a new child based on layer and position requests.:::return->insertIndexForLayer
JLayeredPane#insertIndexForLayer(Component, int, int):::This method is an extended version of insertIndexForLayer() to support setLayer which uses Container.setZOrder which does not remove the component from the containment hierarchy though we need to ignore it when calculating the insertion index.:::i->count->curLayer->layerStart->layerEnd->componentCount->getComponentCount->compList->new->ArrayList<Component>->for->index->compList->size->for->if->return->if->if->if->return->if->return->return
JLayeredPane#paramString():::Returns a string representation of this JLayeredPane:::optimizedDrawingPossibleString->return->super->paramString
JLayeredPane#getAccessibleContext():::Gets the AccessibleContext associated with this JLayeredPane:::if->new->AccessibleJLayeredPane->return
JLayeredPane.AccessibleJLayeredPane#getAccessibleRole():::Get the role of this object.:::return
JList.DropLocation#getIndex():::Returns the index where dropped data should be placed in the list:::return
JList.DropLocation#isInsert():::Returns whether or not this location represents an insert location.:::return
JList.DropLocation#toString():::Returns a string representation of this drop location:::return->getClass->getName->getDropPoint
JList#getUI():::Returns the ListUI, the look and feel object that renders this component.:::return
JList#setUI(ListUI):::Sets the ListUI, the look and feel object that renders this component.:::super->setUI
JList#updateUI():::Resets the ListUI property by setting it to the value provided by the current look and feel:::if->try->UIManager->getUI->setUI->renderer->getCellRenderer->if->SwingUtilities->updateComponentTreeUI->catch->finally
JList#getUIClassID():::Returns "ListUI", the UIDefaults key used to look up the name of the javax.swing.plaf.ListUI class that defines the look and feel for this component.:::return
JList#updateFixedCellSize()::: list update fixed cell size:::cr->getCellRenderer->value->getPrototypeCellValue->if->c->cr->getListCellRendererComponent->f->c->getFont->c->getFont->setFont->d->c->getPreferredSize->c->setFont
JList#getPrototypeCellValue():::Returns the "prototypical" cell value -- a value used to calculate a fixed width and height for cells:::return
JList#setPrototypeCellValue(E):::Sets the prototypeCellValue property, and then (if the new value is non-null), computes the fixedCellWidth and fixedCellHeight properties by requesting the cell renderer component for the given value (and index 0) from the cell renderer, and using that component's preferred size:::oldValue->if->prototypeCellValue->equals->updateFixedCellSize->firePropertyChange
JList#getFixedCellWidth():::Returns the value of the fixedCellWidth property.:::return
JList#setFixedCellWidth(int):::Sets a fixed value to be used for the width of every cell in the list:::oldValue->firePropertyChange
JList#getFixedCellHeight():::Returns the value of the fixedCellHeight property.:::return
JList#setFixedCellHeight(int):::Sets a fixed value to be used for the height of every cell in the list:::oldValue->firePropertyChange
JList#getCellRenderer():::Returns the object responsible for painting list items.:::return
JList#setCellRenderer(ListCellRenderer):::Sets the delegate that is used to paint each cell in the list:::oldValue->if->cellRenderer->equals->updateFixedCellSize->firePropertyChange
JList#getSelectionForeground():::Returns the color used to draw the foreground of selected items:::return
JList#setSelectionForeground(Color):::Sets the color used to draw the foreground of selected items, which cell renderers can use to render text and graphics:::oldValue->firePropertyChange
JList#getSelectionBackground():::Returns the color used to draw the background of selected items:::return
JList#setSelectionBackground(Color):::Sets the color used to draw the background of selected items, which cell renderers can use fill selected cells:::oldValue->firePropertyChange
JList#getVisibleRowCount():::Returns the value of the visibleRowCount property:::return
JList#setVisibleRowCount(int):::Sets the visibleRowCount property, which has different meanings depending on the layout orientation: For a VERTICAL layout orientation, this sets the preferred number of rows to display without requiring scrolling; for other orientations, it affects the wrapping of cells:::oldValue->Math->max->firePropertyChange
JList#getLayoutOrientation():::Returns the layout orientation property for the list: VERTICAL if the layout is a single column of cells, VERTICAL_WRAP if the layout is "newspaper style" with the content flowing vertically then horizontally, or HORIZONTAL_WRAP if the layout is "newspaper style" with the content flowing horizontally then vertically.:::return
JList#setLayoutOrientation(int):::Defines the way list cells are layed out:::oldValue->switch->firePropertyChange->break->throw->new->IllegalArgumentException
JList#getFirstVisibleIndex():::Returns the smallest list index that is currently visible:::r->getVisibleRect->first->if->this->getComponentOrientation->isLeftToRight->r->getLocation->locationToIndex->else->new->Point->locationToIndex->if->bounds->getCellBounds->if->SwingUtilities->computeIntersection->if->return
JList#getLastVisibleIndex():::Returns the largest list index that is currently visible:::leftToRight->this->getComponentOrientation->isLeftToRight->r->getVisibleRect->lastPoint->if->new->Point->else->new->Point->location->locationToIndex->if->bounds->getCellBounds->if->SwingUtilities->computeIntersection->if->isHorizontalWrap->getLayoutOrientation->visibleLocation->new->Point->new->Point->last->visIndex->lIndex->do->locationToIndex->if->getCellBounds->if->bounds->contains->if->if->else->if->else->while->return
JList#ensureIndexIsVisible(int):::Scrolls the list within an enclosing viewport to make the specified cell completely visible:::cellBounds->getCellBounds->if->scrollRectToVisible
JList#setDragEnabled(boolean):::Turns on or off automatic drag handling:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException
JList#getDragEnabled():::Returns whether or not automatic drag handling is enabled.:::return
JList#setDropMode(DropMode):::Sets the drop mode for this component:::if->switch->return->throw->new->IllegalArgumentException
JList#getDropMode():::Returns the drop mode for this component.:::return
JList#dropLocationForPoint(Point):::Calculates a drop location in this component, representing where a drop at the given point should insert data.:::location->rect->index->locationToIndex->if->getCellBounds->switch->rect->contains->new->DropLocation->break->if->getModel->getSize->new->DropLocation->break->if->ltr->getComponentOrientation->isLeftToRight->if->SwingUtilities2->liesInHorizontal->else->if->getModel->getSize->else->if->SwingUtilities2->liesInVertical->new->DropLocation->break->if->getModel->getSize->new->DropLocation->break->between->if->ltr->getComponentOrientation->isLeftToRight->section->SwingUtilities2->liesInHorizontal->if->else->if->getModel->getSize->else->if->else->section->SwingUtilities2->liesInVertical->if->else->if->new->DropLocation->break->return
JList#setDropLocation(TransferHandler.DropLocation, Object, boolean):::Called to set or clear the drop location during a DnD operation:::retVal->listLocation->if->if->if->setSelectedIndices->anchor->lead->SwingUtilities2->getSelectionModel->setLeadAnchorWithoutSelection->else->if->inds->getSelectedIndices->new->intArrs->getAnchorSelectionIndex->getLeadSelectionIndex->else->index->listLocation->getIndex->if->clearSelection->getSelectionModel->setAnchorSelectionIndex->getSelectionModel->setLeadSelectionIndex->else->setSelectionInterval->old->firePropertyChange->return
JList#getDropLocation():::Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown:::return
JList#getNextMatch(String, int, Position.Bias):::Returns the next list element whose toString value starts with the given prefix.:::model->getModel->max->model->getSize->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->prefix->toUpperCase->increment->index->do->element->model->getElementAt->if->string->if->toUpperCase->else->element->toString->if->string->toUpperCase->if->string->startsWith->return->while->return
JList#getToolTipText(MouseEvent):::Returns the tooltip text to be used for the given event:::if->p->event->getPoint->index->locationToIndex->r->getCellRenderer->cellBounds->if->getCellBounds->cellBounds->contains->lsm->getSelectionModel->rComponent->r->getModel->getElementAt->lsm->isSelectedIndex->hasFocus->lsm->getLeadSelectionIndex->getListCellRendererComponent->if->newEvent->p->translate->event->getID->event->getWhen->event->getModifiers->event->getXOnScreen->event->getYOnScreen->event->getClickCount->event->isPopupTrigger->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->tip->getToolTipText->if->return->return->super->getToolTipText
JList#locationToIndex(Point):::Returns the cell index closest to the given location in the list's coordinate system:::ui->getUI->return->ui->locationToIndex
JList#indexToLocation(int):::Returns the origin of the specified item in the list's coordinate system:::ui->getUI->return->ui->indexToLocation
JList#getCellBounds(int, int):::Returns the bounding rectangle, in the list's coordinate system, for the range of cells specified by the two indices:::ui->getUI->return->ui->getCellBounds
JList#getModel():::Returns the data model that holds the list of items displayed by the JList component.:::return
JList#setModel(ListModel):::Sets the model that represents the contents or "value" of the list, notifies property change listeners, and then clears the list's selection:::if->throw->new->IllegalArgumentException->oldValue->firePropertyChange->clearSelection
JList#setListData(E[]):::Constructs a read-only ListModel from an array of items, and calls setModel with this model:::new->AbstractListModel<E>->setModel
JList#setListData(Vector):::Constructs a read-only ListModel from a Vector and calls setModel with this model:::new->AbstractListModel<E>->setModel
JList#createSelectionModel():::Returns an instance of DefaultListSelectionModel; called during construction to initialize the list's selection model property.:::return->new->DefaultListSelectionModel
JList#getSelectionModel():::Returns the current selection model:::return
JList#fireSelectionValueChanged(int, int, boolean):::Notifies ListSelectionListeners added directly to the list of selection changes made to the selection model:::listeners->listenerList->getListenerList->e->for->i
JList.ListSelectionHandler#valueChanged(ListSelectionEvent)::: list selection handler value changed:::e->getFirstIndex->e->getLastIndex->e->getValueIsAdjusting->fireSelectionValueChanged
JList#addListSelectionListener(ListSelectionListener):::Adds a listener to the list, to be notified each time a change to the selection occurs; the preferred way of listening for selection state changes:::if->new->ListSelectionHandler->getSelectionModel->addListSelectionListener->listenerList->add
JList#removeListSelectionListener(ListSelectionListener):::Removes a selection listener from the list.:::listenerList->remove
JList#getListSelectionListeners():::Returns an array of all the ListSelectionListeners added to this JList by way of addListSelectionListener.:::return->listenerList->getListeners
JList#setSelectionModel(ListSelectionModel):::Sets the selectionModel for the list to a non-null ListSelectionModel implementation:::if->throw->new->IllegalArgumentException->if->removeListSelectionListener->selectionModel->addListSelectionListener->oldValue->firePropertyChange
JList#setSelectionMode(int):::Sets the selection mode for the list:::getSelectionModel->setSelectionMode
JList#getSelectionMode():::Returns the current selection mode for the list:::return->getSelectionModel->getSelectionMode
JList#getAnchorSelectionIndex():::Returns the anchor selection index:::return->getSelectionModel->getAnchorSelectionIndex
JList#getLeadSelectionIndex():::Returns the lead selection index:::return->getSelectionModel->getLeadSelectionIndex
JList#getMinSelectionIndex():::Returns the smallest selected cell index, or -1 if the selection is empty:::return->getSelectionModel->getMinSelectionIndex
JList#getMaxSelectionIndex():::Returns the largest selected cell index, or -1 if the selection is empty:::return->getSelectionModel->getMaxSelectionIndex
JList#isSelectedIndex(int):::Returns true if the specified index is selected, else false:::return->getSelectionModel->isSelectedIndex
JList#isSelectionEmpty():::Returns true if nothing is selected, else false:::return->getSelectionModel->isSelectionEmpty
JList#clearSelection():::Clears the selection; after calling this method, isSelectionEmpty will return true:::getSelectionModel->clearSelection
JList#setSelectionInterval(int, int):::Selects the specified interval:::getSelectionModel->setSelectionInterval
JList#addSelectionInterval(int, int):::Sets the selection to be the union of the specified interval with current selection:::getSelectionModel->addSelectionInterval
JList#removeSelectionInterval(int, int):::Sets the selection to be the set difference of the specified interval and the current selection:::getSelectionModel->removeSelectionInterval
JList#setValueIsAdjusting(boolean):::Sets the selection model's valueIsAdjusting property:::getSelectionModel->setValueIsAdjusting
JList#getValueIsAdjusting():::Returns the value of the selection model's isAdjusting property:::return->getSelectionModel->getValueIsAdjusting
JList#getSelectedIndices():::Returns an array of all of the selected indices, in increasing order.:::return->getSelectionModel->getSelectedIndices
JList#setSelectedIndex(int):::Selects a single cell:::if->getModel->getSize->return->getSelectionModel->setSelectionInterval
JList#setSelectedIndices(int[]):::Changes the selection to be the set of indices specified by the given array:::sm->getSelectionModel->sm->clearSelection->size->getModel->getSize->foreach->if->sm->addSelectionInterval
JList#getSelectedValues():::Returns an array of all the selected values, in increasing order based on their indices in the list.:::sm->getSelectionModel->dm->getModel->iMin->sm->getMinSelectionIndex->iMax->sm->getMaxSelectionIndex->size->dm->getSize->if->return->new->ObjectArr->rvTmp->new->ObjectArr->n->for->i->rv->new->ObjectArr->System->arraycopy->return
JList#getSelectedValuesList():::Returns a list of all the selected items, in increasing order based on their indices in the list.:::dm->getModel->selectedIndices->getSelectedIndices->if->size->dm->getSize->if->return->Collections->emptyList->selectedItems->new->ArrayList<E>->foreach->if->break->selectedItems->dm->getElementAt->add->return->return->Collections->emptyList
JList#getSelectedIndex():::Returns the smallest selected cell index; the selection when only a single item is selected in the list:::return->getMinSelectionIndex
JList#getSelectedValue():::Returns the value for the smallest selected cell index; the selected value when only a single item is selected in the list:::i->getMinSelectionIndex->return->getModel->getSize->getModel->getElementAt
JList#setSelectedValue(Object, boolean):::Selects the specified object from the list:::if->clearSelection->else->if->anObject->getSelectedValue->equals->i->c->dm->getModel->for->dm->getSize->setSelectedIndex->repaint
JList#checkScrollableParameters(Rectangle, int)::: list check scrollable parameters:::if->throw->new->IllegalArgumentException->switch->break->throw->new->IllegalArgumentException
JList#getPreferredScrollableViewportSize():::Computes the size of viewport needed to display visibleRowCount rows:::if->getLayoutOrientation->return->getPreferredSize->insets->getInsets->dx->dy->visibleRowCount->getVisibleRowCount->fixedCellWidth->getFixedCellWidth->fixedCellHeight->getFixedCellHeight->if->width->height->return->new->Dimension->else->if->getModel->getSize->width->getPreferredSize->height->r->getCellBounds->if->else->return->new->Dimension->else->return->new->Dimension
JList#getScrollableUnitIncrement(Rectangle, int, int):::Returns the distance to scroll to expose the next or previous row (for vertical scrolling) or column (for horizontal scrolling):::checkScrollableParameters->if->row->visibleRect->getLocation->locationToIndex->if->return->else->if->r->getCellBounds->return->else->r->getCellBounds->if->return->else->if->loc->r->getLocation->prevIndex->locationToIndex->prevR->getCellBounds->if->return->return->else->return->else->if->getLayoutOrientation->leftToRight->getComponentOrientation->isLeftToRight->index->leadingPoint->if->visibleRect->getLocation->else->new->Point->locationToIndex->if->cellBounds->getCellBounds->if->cellBounds->contains->leadingVisibleEdge->leadingCellEdge->if->else->if->if->return->Math->abs->else->if->return->else->return->return->f->getFont->return->f->getSize
JList#getScrollableBlockIncrement(Rectangle, int, int):::Returns the distance to scroll to expose the next or previous block:::checkScrollableParameters->if->inc->if->last->new->Point->locationToIndex->if->lastRect->getCellBounds->if->if->getModel->getSize->else->newFirst->new->Point->locationToIndex->first->getFirstVisibleIndex->if->if->visibleRect->getLocation->locationToIndex->newFirstRect->getCellBounds->firstRect->getCellBounds->if->while->getCellBounds->if->getCellBounds->if->return->else->if->getLayoutOrientation->leftToRight->getComponentOrientation->isLeftToRight->inc->if->x->last->new->Point->locationToIndex->if->lastRect->getCellBounds->if->if->else->if->else->if->getModel->getSize->else->x->first->new->Point->locationToIndex->if->firstRect->getCellBounds->if->firstRight->if->if->else->else->visibleRight->if->else->return->return
JList#getScrollableTracksViewportWidth():::Returns true if this JList is displayed in a JViewport and the viewport is wider than the list's preferred width, or if the layout orientation is HORIZONTAL_WRAP and visibleRowCount <= 0; otherwise returns false:::if->getLayoutOrientation->getVisibleRowCount->return->parent->SwingUtilities->getUnwrappedParent->if->return->parent->getWidth->getPreferredSize->return
JList#getScrollableTracksViewportHeight():::Returns true if this JList is displayed in a JViewport and the viewport is taller than the list's preferred height, or if the layout orientation is VERTICAL_WRAP and visibleRowCount <= 0; otherwise returns false:::if->getLayoutOrientation->getVisibleRowCount->return->parent->SwingUtilities->getUnwrappedParent->if->return->parent->getHeight->getPreferredSize->return
JList#writeObject(ObjectOutputStream)::: list write object:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JList#paramString():::Returns a String representation of this JList:::selectionForegroundString->selectionForeground->toString->selectionBackgroundString->selectionBackground->toString->return->super->paramString
JList#getAccessibleContext():::Gets the AccessibleContext associated with this JList:::if->new->AccessibleJList->return
JList.AccessibleJList#propertyChange(PropertyChangeEvent):::Property Change Listener change method:::name->e->getPropertyName->oldValue->e->getOldValue->newValue->e->getNewValue->if->name->compareTo->if->removeListDataListener->if->addListDataListener->else->if->name->compareTo->if->removeListSelectionListener->if->addListSelectionListener->Boolean->valueOf->Boolean->valueOf->firePropertyChange
JList.AccessibleJList#valueChanged(ListSelectionEvent):::List Selection Listener value change method:::oldLeadSelectionIndex->JList.this->getLeadSelectionIndex->if->oldLS->newLS->getAccessibleChild->getAccessibleChild->firePropertyChange->Boolean->valueOf->Boolean->valueOf->firePropertyChange->Boolean->valueOf->Boolean->valueOf->firePropertyChange->s->getAccessibleStateSet->lsm->JList.this->getSelectionModel->if->lsm->getSelectionMode->if->s->contains->s->add->firePropertyChange->else->if->s->contains->s->remove->firePropertyChange
JList.AccessibleJList#intervalAdded(ListDataEvent):::List Data Listener interval added method:::Boolean->valueOf->Boolean->valueOf->firePropertyChange
JList.AccessibleJList#intervalRemoved(ListDataEvent):::List Data Listener interval removed method:::Boolean->valueOf->Boolean->valueOf->firePropertyChange
JList.AccessibleJList#contentsChanged(ListDataEvent):::List Data Listener contents changed method:::Boolean->valueOf->Boolean->valueOf->firePropertyChange
JList.AccessibleJList#getAccessibleStateSet():::Get the state set of this object.:::states->super->getAccessibleStateSet->if->selectionModel->getSelectionMode->states->add->return
JList.AccessibleJList#getAccessibleRole():::Get the role of this object.:::return
JList.AccessibleJList#getAccessibleAt(Point):::Returns the Accessible child contained at the local coordinate Point, if one exists:::i->locationToIndex->if->return->new->AccessibleJListChild->else->return
JList.AccessibleJList#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::return->getModel->getSize
JList.AccessibleJList#getAccessibleChild(int):::Return the nth Accessible child of the object.:::if->getModel->getSize->return->else->return->new->AccessibleJListChild
JList.AccessibleJList#getAccessibleSelection():::Get the AccessibleSelection associated with this object:::return
JList.AccessibleJList#getAccessibleSelectionCount():::Returns the number of items currently selected:::return->JList.this->getSelectedIndices
JList.AccessibleJList#getAccessibleSelection(int):::Returns an Accessible representing the specified selected item in the object:::len->getAccessibleSelectionCount->if->return->else->return->JList.this->getSelectedIndices->getAccessibleChild
JList.AccessibleJList#isAccessibleChildSelected(int):::Returns true if the current child of this object is selected.:::return->isSelectedIndex
JList.AccessibleJList#addAccessibleSelection(int):::Adds the specified selected item in the object to the object's selection:::JList.this->addSelectionInterval
JList.AccessibleJList#removeAccessibleSelection(int):::Removes the specified selected item in the object from the object's selection:::JList.this->removeSelectionInterval
JList.AccessibleJList#clearAccessibleSelection():::Clears the selection in the object, so that nothing in the object is selected.:::JList.this->clearSelection
JList.AccessibleJList#selectAllAccessibleSelection():::Causes every selected item in the object to be selected if the object supports multiple selections.:::JList.this->getAccessibleChildrenCount->addSelectionInterval
JList.AccessibleJList.AccessibleJListChild#getCurrentComponent()::: accessible list child get current component:::return->getComponentAtIndex
JList.AccessibleJList.AccessibleJListChild#getCurrentAccessibleContext()::: accessible list child get current accessible context:::c->getComponentAtIndex->if->return->c->getAccessibleContext->else->return
JList.AccessibleJList.AccessibleJListChild#getComponentAtIndex(int)::: accessible list child get component at index:::if->listModel->getSize->return->if->value->listModel->getElementAt->isSelected->parent->isSelectedIndex->isFocussed->parent->isFocusOwner->parent->getLeadSelectionIndex->return->cellRenderer->getListCellRendererComponent->else->return
JList.AccessibleJList.AccessibleJListChild#getAccessibleContext():::Get the AccessibleContext for this object:::return
JList.AccessibleJList.AccessibleJListChild#getAccessibleName()::: accessible list child get accessible name:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleName->else->return
JList.AccessibleJList.AccessibleJListChild#setAccessibleName(String)::: accessible list child set accessible name:::ac->getCurrentAccessibleContext->if->ac->setAccessibleName
JList.AccessibleJList.AccessibleJListChild#getAccessibleDescription()::: accessible list child get accessible description:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleDescription->else->return
JList.AccessibleJList.AccessibleJListChild#setAccessibleDescription(String)::: accessible list child set accessible description:::ac->getCurrentAccessibleContext->if->ac->setAccessibleDescription
JList.AccessibleJList.AccessibleJListChild#getAccessibleRole()::: accessible list child get accessible role:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleRole->else->return
JList.AccessibleJList.AccessibleJListChild#getAccessibleStateSet()::: accessible list child get accessible state set:::ac->getCurrentAccessibleContext->s->if->ac->getAccessibleStateSet->else->new->AccessibleStateSet->s->add->if->parent->isFocusOwner->parent->getLeadSelectionIndex->s->add->if->parent->isSelectedIndex->s->add->if->this->isShowing->s->add->else->if->s->contains->s->remove->if->this->isVisible->s->add->else->if->s->contains->s->remove->s->add->return
JList.AccessibleJList.AccessibleJListChild#getAccessibleIndexInParent()::: accessible list child get accessible index in parent:::return
JList.AccessibleJList.AccessibleJListChild#getAccessibleChildrenCount()::: accessible list child get accessible children count:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleChildrenCount->else->return
JList.AccessibleJList.AccessibleJListChild#getAccessibleChild(int)::: accessible list child get accessible child:::ac->getCurrentAccessibleContext->if->accessibleChild->ac->getAccessibleChild->ac->setAccessibleParent->return->else->return
JList.AccessibleJList.AccessibleJListChild#getLocale()::: accessible list child get locale:::ac->getCurrentAccessibleContext->if->return->ac->getLocale->else->return
JList.AccessibleJList.AccessibleJListChild#addPropertyChangeListener(PropertyChangeListener)::: accessible list child add property change listener:::ac->getCurrentAccessibleContext->if->ac->addPropertyChangeListener
JList.AccessibleJList.AccessibleJListChild#removePropertyChangeListener(PropertyChangeListener)::: accessible list child remove property change listener:::ac->getCurrentAccessibleContext->if->ac->removePropertyChangeListener
JList.AccessibleJList.AccessibleJListChild#getAccessibleComponent():::Get the AccessibleComponent associated with this object:::return
JList.AccessibleJList.AccessibleJListChild#getAccessibleSelection()::: accessible list child get accessible selection:::ac->getCurrentAccessibleContext->return->ac->getAccessibleSelection
JList.AccessibleJList.AccessibleJListChild#getAccessibleText()::: accessible list child get accessible text:::ac->getCurrentAccessibleContext->return->ac->getAccessibleText
JList.AccessibleJList.AccessibleJListChild#getAccessibleValue()::: accessible list child get accessible value:::ac->getCurrentAccessibleContext->return->ac->getAccessibleValue
JList.AccessibleJList.AccessibleJListChild#getBackground()::: accessible list child get background:::ac->getCurrentAccessibleContext->if->return->getBackground->else->c->getCurrentComponent->if->return->c->getBackground->else->return
JList.AccessibleJList.AccessibleJListChild#setBackground(Color)::: accessible list child set background:::ac->getCurrentAccessibleContext->if->setBackground->else->cp->getCurrentComponent->if->cp->setBackground
JList.AccessibleJList.AccessibleJListChild#getForeground()::: accessible list child get foreground:::ac->getCurrentAccessibleContext->if->return->getForeground->else->c->getCurrentComponent->if->return->c->getForeground->else->return
JList.AccessibleJList.AccessibleJListChild#setForeground(Color)::: accessible list child set foreground:::ac->getCurrentAccessibleContext->if->setForeground->else->cp->getCurrentComponent->if->cp->setForeground
JList.AccessibleJList.AccessibleJListChild#getCursor()::: accessible list child get cursor:::ac->getCurrentAccessibleContext->if->return->getCursor->else->c->getCurrentComponent->if->return->c->getCursor->else->ap->getAccessibleParent->if->return->getCursor->else->return
JList.AccessibleJList.AccessibleJListChild#setCursor(Cursor)::: accessible list child set cursor:::ac->getCurrentAccessibleContext->if->setCursor->else->cp->getCurrentComponent->if->cp->setCursor
JList.AccessibleJList.AccessibleJListChild#getFont()::: accessible list child get font:::ac->getCurrentAccessibleContext->if->return->getFont->else->c->getCurrentComponent->if->return->c->getFont->else->return
JList.AccessibleJList.AccessibleJListChild#setFont(Font)::: accessible list child set font:::ac->getCurrentAccessibleContext->if->setFont->else->c->getCurrentComponent->if->c->setFont
JList.AccessibleJList.AccessibleJListChild#getFontMetrics(Font)::: accessible list child get font metrics:::ac->getCurrentAccessibleContext->if->return->getFontMetrics->else->c->getCurrentComponent->if->return->c->getFontMetrics->else->return
JList.AccessibleJList.AccessibleJListChild#isEnabled()::: accessible list child is enabled:::ac->getCurrentAccessibleContext->if->return->isEnabled->else->c->getCurrentComponent->if->return->c->isEnabled->else->return
JList.AccessibleJList.AccessibleJListChild#setEnabled(boolean)::: accessible list child set enabled:::ac->getCurrentAccessibleContext->if->setEnabled->else->c->getCurrentComponent->if->c->setEnabled
JList.AccessibleJList.AccessibleJListChild#isVisible()::: accessible list child is visible:::fi->parent->getFirstVisibleIndex->li->parent->getLastVisibleIndex->if->parent->getModel->getSize->return
JList.AccessibleJList.AccessibleJListChild#setVisible(boolean)::: accessible list child set visible:::
JList.AccessibleJList.AccessibleJListChild#isShowing()::: accessible list child is showing:::return->parent->isShowing->isVisible
JList.AccessibleJList.AccessibleJListChild#contains(Point)::: accessible list child contains:::ac->getCurrentAccessibleContext->if->r->getBounds->return->r->contains->else->c->getCurrentComponent->if->r->c->getBounds->return->r->contains->else->return->getBounds->contains
JList.AccessibleJList.AccessibleJListChild#getLocationOnScreen()::: accessible list child get location on screen:::if->listLocation->try->parent->getLocationOnScreen->catch->return->finally->componentLocation->parent->indexToLocation->if->componentLocation->translate->return->else->return->else->return
JList.AccessibleJList.AccessibleJListChild#getLocation()::: accessible list child get location:::if->return->parent->indexToLocation->else->return
JList.AccessibleJList.AccessibleJListChild#setLocation(Point)::: accessible list child set location:::if->parent->contains->ensureIndexIsVisible
JList.AccessibleJList.AccessibleJListChild#getBounds()::: accessible list child get bounds:::if->return->parent->getCellBounds->else->return
JList.AccessibleJList.AccessibleJListChild#setBounds(Rectangle)::: accessible list child set bounds:::ac->getCurrentAccessibleContext->if->setBounds
JList.AccessibleJList.AccessibleJListChild#getSize()::: accessible list child get size:::cellBounds->this->getBounds->if->return->cellBounds->getSize->else->return
JList.AccessibleJList.AccessibleJListChild#setSize(Dimension)::: accessible list child set size:::ac->getCurrentAccessibleContext->if->setSize->else->c->getCurrentComponent->if->c->setSize
JList.AccessibleJList.AccessibleJListChild#getAccessibleAt(Point)::: accessible list child get accessible at:::ac->getCurrentAccessibleContext->if->return->getAccessibleAt->else->return
JList.AccessibleJList.AccessibleJListChild#isFocusTraversable()::: accessible list child is focus traversable:::ac->getCurrentAccessibleContext->if->return->isFocusTraversable->else->c->getCurrentComponent->if->return->c->isFocusTraversable->else->return
JList.AccessibleJList.AccessibleJListChild#requestFocus()::: accessible list child request focus:::ac->getCurrentAccessibleContext->if->requestFocus->else->c->getCurrentComponent->if->c->requestFocus
JList.AccessibleJList.AccessibleJListChild#addFocusListener(FocusListener)::: accessible list child add focus listener:::ac->getCurrentAccessibleContext->if->addFocusListener->else->c->getCurrentComponent->if->c->addFocusListener
JList.AccessibleJList.AccessibleJListChild#removeFocusListener(FocusListener)::: accessible list child remove focus listener:::ac->getCurrentAccessibleContext->if->removeFocusListener->else->c->getCurrentComponent->if->c->removeFocusListener
JList.AccessibleJList.AccessibleJListChild#getAccessibleIcon():::Returns the icon for the element renderer, as the only item of an array of AccessibleIcons or a null array if the renderer component contains no icons.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleIcon->else->return
JList.AccessibleJList.AccessibleJListChild#getAccessibleAction()::: accessible list child get accessible action:::ac->getCurrentAccessibleContext->if->return->else->aa->ac->getAccessibleAction->if->return->else->return
JList.AccessibleJList.AccessibleJListChild#doAccessibleAction(int)::: accessible list child do accessible action:::if->JList.this->setSelectedIndex->return->else->return
JList.AccessibleJList.AccessibleJListChild#getAccessibleActionDescription(int)::: accessible list child get accessible action description:::if->return->UIManager->getString->else->return
JList.AccessibleJList.AccessibleJListChild#getAccessibleActionCount()::: accessible list child get accessible action count:::return
JMenu#initFocusability():::Overriden to do nothing:::
JMenu#updateUI():::Resets the UI property with a value from the current look and feel.:::UIManager->getUI->setUI->if->popupMenu->UIManager->getUI->setUI
JMenu#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JMenu#setModel(ButtonModel):::Sets the data model for the "menu button" -- the label that the user clicks to open or close the menu.:::oldModel->getModel->super->setModel->if->oldModel->removeChangeListener->if->createMenuChangeListener->newModel->addChangeListener
JMenu#isSelected():::Returns true if the menu is currently selected (highlighted).:::return->getModel->isSelected
JMenu#setSelected(boolean):::Sets the selection status of the menu.:::model->getModel->oldValue->model->isSelected->if->model->isSelected->getModel->setSelected
JMenu#isPopupMenuVisible():::Returns true if the menu's popup window is visible.:::ensurePopupMenuCreated->return->popupMenu->isVisible
JMenu#setPopupMenuVisible(boolean):::Sets the visibility of the menu's popup:::if->println->isVisible->isPopupMenuVisible->if->isEnabled->ensurePopupMenuCreated->if->isShowing->p->getCustomMenuLocation->if->getPopupMenuOrigin->getPopupMenu->show->else->getPopupMenu->setVisible
JMenu#getPopupMenuOrigin():::Computes the origin for the JMenu's popup menu:::x->y->pm->getPopupMenu->s->getSize->pmSize->pm->getSize->if->pm->getPreferredSize->position->getLocationOnScreen->toolkit->Toolkit->getDefaultToolkit->gc->getGraphicsConfiguration->screenBounds->toolkit->getScreenSize->new->Rectangle->ge->GraphicsEnvironment->getLocalGraphicsEnvironment->gd->ge->getScreenDevices->for->i->if->gc->getBounds->screenInsets->toolkit->getScreenInsets->Math->abs->Math->abs->Math->abs->Math->abs->parent->getParent->if->xOffset->UIManager->getInt->yOffset->UIManager->getInt->if->SwingUtilities->isLeftToRight->if->else->if->if->else->xOffset->UIManager->getInt->yOffset->UIManager->getInt->if->SwingUtilities->isLeftToRight->if->else->if->if->return->new->Point
JMenu#getDelay():::Returns the suggested delay, in milliseconds, before submenus are popped up or down:::return
JMenu#setDelay(int):::Sets the suggested delay before the menu's PopupMenu is popped up or down:::if->throw->new->IllegalArgumentException
JMenu#ensurePopupMenuCreated()::: menu ensure popup menu created:::if->thisMenu->new->JPopupMenu->popupMenu->setInvoker->createWinListener
JMenu#getCustomMenuLocation()::: menu get custom menu location:::return
JMenu#setMenuLocation(int, int):::Sets the location of the popup component.:::new->Point->if->popupMenu->setLocation
JMenu#add(JMenuItem):::Appends a menu item to the end of this menu:::ensurePopupMenuCreated->return->popupMenu->add
JMenu#add(Component):::Appends a component to the end of this menu:::ensurePopupMenuCreated->popupMenu->add->return
JMenu#add(Component, int):::Adds the specified component to this container at the given position:::ensurePopupMenuCreated->popupMenu->add->return
JMenu#add(String):::Creates a new menu item with the specified text and appends it to the end of this menu.:::return->new->JMenuItem->add
JMenu#add(Action):::Creates a new menu item attached to the specified Action object and appends it to the end of this menu.:::mi->createActionComponent->mi->setAction->add->return
JMenu#createActionComponent(Action):::Factory method which creates the JMenuItem for Actions added to the JMenu.:::mi->new->JMenuItem->mi->setHorizontalTextPosition->mi->setVerticalTextPosition->return
JMenu#createActionChangeListener(JMenuItem):::Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur.:::return->b->b->getAction->createActionPropertyChangeListener0
JMenu#addSeparator():::Appends a new separator to the end of the menu.:::ensurePopupMenuCreated->popupMenu->addSeparator
JMenu#insert(String, int):::Inserts a new menu item with the specified text at a given position.:::if->throw->new->IllegalArgumentException->ensurePopupMenuCreated->popupMenu->new->JMenuItem->insert
JMenu#insert(JMenuItem, int):::Inserts the specified JMenuitem at a given position.:::if->throw->new->IllegalArgumentException->ensurePopupMenuCreated->popupMenu->insert->return
JMenu#insert(Action, int):::Inserts a new menu item attached to the specified Action object at a given position.:::if->throw->new->IllegalArgumentException->ensurePopupMenuCreated->mi->new->JMenuItem->mi->setHorizontalTextPosition->mi->setVerticalTextPosition->popupMenu->insert->return
JMenu#insertSeparator(int):::Inserts a separator at the specified position.:::if->throw->new->IllegalArgumentException->ensurePopupMenuCreated->popupMenu->new->JPopupMenu.Separator->insert
JMenu#getItem(int):::Returns the JMenuItem at the specified position:::if->throw->new->IllegalArgumentException->c->getMenuComponent->if->mi->return->return
JMenu#getItemCount():::Returns the number of items on the menu, including separators:::return->getMenuComponentCount
JMenu#isTearOff():::Returns true if the menu can be torn off:::throw->new->Error
JMenu#remove(JMenuItem):::Removes the specified menu item from this menu:::if->popupMenu->remove
JMenu#remove(int):::Removes the menu item at the specified index from this menu.:::if->throw->new->IllegalArgumentException->if->getItemCount->throw->new->IllegalArgumentException->if->popupMenu->remove
JMenu#remove(Component):::Removes the component c from this menu.:::if->popupMenu->remove
JMenu#removeAll():::Removes all menu items from this menu.:::if->popupMenu->removeAll
JMenu#getMenuComponentCount():::Returns the number of components on the menu.:::componentCount->if->popupMenu->getComponentCount->return
JMenu#getMenuComponent(int):::Returns the component at position n.:::if->return->popupMenu->getComponent->return
JMenu#getMenuComponents():::Returns an array of Components of the menu's subcomponents:::if->return->popupMenu->getComponents->return->new->ComponentArr
JMenu#isTopLevelMenu():::Returns true if the menu is a 'top-level menu', that is, if it is the direct child of a menubar.:::return->getParent
JMenu#isMenuComponent(Component):::Returns true if the specified component exists in the submenu hierarchy.:::if->return->if->comp->if->this->getPopupMenu->return->ncomponents->this->getMenuComponentCount->component->this->getMenuComponents->for->i->return
JMenu#translateToPopupMenu(Point)::: menu translate to popup menu:::return->translateToPopupMenu
JMenu#translateToPopupMenu(int, int)::: menu translate to popup menu:::newX->newY->if->getParent->getSize->else->getSize->return->new->Point
JMenu#getPopupMenu():::Returns the popupmenu associated with this menu:::ensurePopupMenuCreated->return
JMenu#addMenuListener(MenuListener):::Adds a listener for menu events.:::listenerList->add
JMenu#removeMenuListener(MenuListener):::Removes a listener for menu events.:::listenerList->remove
JMenu#getMenuListeners():::Returns an array of all the MenuListeners added to this JMenu with addMenuListener().:::return->listenerList->getListeners
JMenu#fireMenuSelected():::Notifies all listeners that have registered interest for notification on this event type:::if->println->listeners->listenerList->getListenerList->for->i
JMenu#fireMenuDeselected():::Notifies all listeners that have registered interest for notification on this event type:::if->println->listeners->listenerList->getListenerList->for->i
JMenu#fireMenuCanceled():::Notifies all listeners that have registered interest for notification on this event type:::if->println->listeners->listenerList->getListenerList->for->i
JMenu#configureAcceleratorFromAction(Action)::: menu configure accelerator from action:::
JMenu.MenuChangeListener#stateChanged(ChangeEvent)::: menu change listener state changed:::model->e->getSource->modelSelected->model->isSelected->if->if->fireMenuSelected->else->fireMenuDeselected
JMenu#createMenuChangeListener()::: menu create menu change listener:::return->new->MenuChangeListener
JMenu#createWinListener(JPopupMenu):::Creates a window-closing listener for the popup.:::return->new->WinListener
JMenu.WinListener#windowClosing(WindowEvent):::Deselect the menu when the popup is closed from outside.:::setSelected
JMenu#menuSelectionChanged(boolean):::Messaged when the menubar selection changes to activate or deactivate this menu:::if->println->setSelected
JMenu#getSubElements():::Returns an array of MenuElements containing the submenu for this menu component:::if->return->new->MenuElementArr->else->result->new->MenuElementArr->return
JMenu#getComponent():::Returns the java.awt.Component used to paint this MenuElement:::return
JMenu#applyComponentOrientation(ComponentOrientation):::Sets the ComponentOrientation property of this menu and all components contained within it:::super->applyComponentOrientation->if->ncomponents->getMenuComponentCount->for->i->popupMenu->setComponentOrientation
JMenu#setComponentOrientation(ComponentOrientation)::: menu set component orientation:::super->setComponentOrientation->if->popupMenu->setComponentOrientation
JMenu#setAccelerator(KeyStroke):::setAccelerator is not defined for JMenu:::throw->new->Error
JMenu#processKeyEvent(KeyEvent):::Processes key stroke events such as mnemonics and accelerators.:::MenuSelectionManager->defaultManager->processKeyEvent->if->evt->isConsumed->return->super->processKeyEvent
JMenu#doClick(int):::Programmatically performs a "click":::me->buildMenuElementArray->MenuSelectionManager->defaultManager->setSelectedPath
JMenu#buildMenuElementArray(JMenu)::: menu build menu element array:::elements->new->Vector<>->current->leaf->getPopupMenu->pop->menu->bar->while->if->elements->insertElementAt->pop->getInvoker->else->if->elements->insertElementAt->menu->getParent->else->if->elements->insertElementAt->break->else->break->me->elements->size->new->MenuElementArr->elements->copyInto->return
JMenu#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JMenu#paramString():::Returns a string representation of this JMenu:::return->super->paramString
JMenu#getAccessibleContext():::Gets the AccessibleContext associated with this JMenu:::if->new->AccessibleJMenu->return
JMenu.AccessibleJMenu#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::children->getMenuComponents->count->foreach->if->return
JMenu.AccessibleJMenu#getAccessibleChild(int):::Returns the nth Accessible child of the object.:::children->getMenuComponents->count->foreach->if->if->if->ac->child->getAccessibleContext->ac->setAccessibleParent->return->else->return
JMenu.AccessibleJMenu#getAccessibleRole():::Get the role of this object.:::return
JMenu.AccessibleJMenu#getAccessibleSelection():::Get the AccessibleSelection associated with this object:::return
JMenu.AccessibleJMenu#getAccessibleSelectionCount():::Returns 1 if a sub-menu is currently selected in this menu.:::me->MenuSelectionManager->defaultManager->getSelectedPath->if->for->i->return
JMenu.AccessibleJMenu#getAccessibleSelection(int):::Returns the currently selected sub-menu if one is selected, otherwise null (there can only be one selection, and it can only be a sub-menu, as otherwise menu items don't remain selected).:::if->getItemCount->return->me->MenuSelectionManager->defaultManager->getSelectedPath->if->for->j->return
JMenu.AccessibleJMenu#isAccessibleChildSelected(int):::Returns true if the current child of this object is selected (that is, if this child is a popped-up submenu).:::me->MenuSelectionManager->defaultManager->getSelectedPath->if->mi->JMenu.this->getItem->for->j->return
JMenu.AccessibleJMenu#addAccessibleSelection(int):::Selects the ith menu in the menu:::if->getItemCount->return->mi->getItem->if->if->me->buildMenuElementArray->MenuSelectionManager->defaultManager->setSelectedPath->else->MenuSelectionManager->defaultManager->setSelectedPath
JMenu.AccessibleJMenu#removeAccessibleSelection(int):::Removes the nth item from the selection:::if->getItemCount->return->mi->getItem->if->if->mi->isSelected->old->MenuSelectionManager->defaultManager->getSelectedPath->me->new->MenuElementArr->for->j->MenuSelectionManager->defaultManager->setSelectedPath
JMenu.AccessibleJMenu#clearAccessibleSelection():::Clears the selection in the object, so that nothing in the object is selected:::old->MenuSelectionManager->defaultManager->getSelectedPath->if->for->j
JMenu.AccessibleJMenu#selectAllAccessibleSelection():::Normally causes every selected item in the object to be selected if the object supports multiple selections:::
JMenuBar#getUI():::Returns the menubar's current UI.:::return
JMenuBar#setUI(MenuBarUI):::Sets the L&amp;F object that renders this component.:::super->setUI
JMenuBar#updateUI():::Resets the UI property with a value from the current look and feel.:::tk->Toolkit->getDefaultToolkit->if->updateScreenMenuBarUI->UIManager->getUI->setUI
JMenuBar#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JMenuBar#getSelectionModel():::Returns the model object that handles single selections.:::return
JMenuBar#setSelectionModel(SingleSelectionModel):::Sets the model object to handle single selections.:::oldValue->firePropertyChange
JMenuBar#add(JMenu):::Appends the specified menu to the end of the menu bar.:::super->add->return
JMenuBar#getMenu(int):::Returns the menu at the specified position in the menu bar.:::c->getComponentAtIndex->if->return->return
JMenuBar#getMenuCount():::Returns the number of items in the menu bar.:::return->getComponentCount
JMenuBar#setHelpMenu(JMenu):::Sets the help menu that appears when the user selects the "help" option in the menu bar:::throw->new->Error
JMenuBar#getHelpMenu():::Gets the help menu for the menu bar:::throw->new->Error
JMenuBar#getComponentAtIndex(int):::Returns the component at the specified index.:::if->getComponentCount->return->return->getComponent
JMenuBar#getComponentIndex(Component):::Returns the index of the specified component.:::ncomponents->this->getComponentCount->component->this->getComponents->for->i->return
JMenuBar#setSelected(Component):::Sets the currently selected component, producing a a change to the selection model.:::model->getSelectionModel->index->getComponentIndex->model->setSelectedIndex
JMenuBar#isSelected():::Returns true if the menu bar currently has a component selected.:::return->selectionModel->isSelected
JMenuBar#isBorderPainted():::Returns true if the menu bars border should be painted.:::return
JMenuBar#setBorderPainted(boolean):::Sets whether the border should be painted.:::oldValue->firePropertyChange->if->revalidate->repaint
JMenuBar#paintBorder(Graphics):::Paints the menubar's border if BorderPainted property is true.:::if->isBorderPainted->super->paintBorder
JMenuBar#setMargin(Insets):::Sets the margin between the menubar's border and its menus:::old->firePropertyChange->if->old->equals->revalidate->repaint
JMenuBar#getMargin():::Returns the margin between the menubar's border and its menus:::if->return->new->Insets->else->return
JMenuBar#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager):::Implemented to be a MenuElement -- does nothing.:::
JMenuBar#processKeyEvent(KeyEvent, MenuElement[], MenuSelectionManager):::Implemented to be a MenuElement -- does nothing.:::
JMenuBar#menuSelectionChanged(boolean):::Implemented to be a MenuElement -- does nothing.:::
JMenuBar#getSubElements():::Implemented to be a MenuElement -- returns the menus in this menu bar:::result->tmp->new->Vector<MenuElement>->c->getComponentCount->i->m->for->tmp->size->new->MenuElementArr->for->tmp->size->return
JMenuBar#getComponent():::Implemented to be a MenuElement:::return
JMenuBar#paramString():::Returns a string representation of this JMenuBar:::paintBorderString->marginString->margin->toString->return->super->paramString
JMenuBar#getAccessibleContext():::Gets the AccessibleContext associated with this JMenuBar:::if->new->AccessibleJMenuBar->return
JMenuBar.AccessibleJMenuBar#getAccessibleStateSet():::Get the accessible state set of this object.:::states->super->getAccessibleStateSet->return
JMenuBar.AccessibleJMenuBar#getAccessibleRole():::Get the role of this object.:::return
JMenuBar.AccessibleJMenuBar#getAccessibleSelection():::Get the AccessibleSelection associated with this object:::return
JMenuBar.AccessibleJMenuBar#getAccessibleSelectionCount():::Returns 1 if a menu is currently selected in this menu bar.:::if->isSelected->return->else->return
JMenuBar.AccessibleJMenuBar#getAccessibleSelection(int):::Returns the currently selected menu if one is selected, otherwise null.:::if->isSelected->if->return->j->getSelectionModel->getSelectedIndex->if->getComponentAtIndex->return->getComponentAtIndex->return
JMenuBar.AccessibleJMenuBar#isAccessibleChildSelected(int):::Returns true if the current child of this object is selected.:::return->getSelectionModel->getSelectedIndex
JMenuBar.AccessibleJMenuBar#addAccessibleSelection(int):::Selects the nth menu in the menu bar, forcing it to pop up:::j->getSelectionModel->getSelectedIndex->if->return->if->getMenuCount->menu->getMenu->if->MenuSelectionManager->defaultManager->setSelectedPath->getSelectionModel->setSelectedIndex->menu->getMenu->if->me->new->MenuElementArr->menu->getPopupMenu->MenuSelectionManager->defaultManager->setSelectedPath
JMenuBar.AccessibleJMenuBar#removeAccessibleSelection(int):::Removes the nth selected item in the object from the object's selection:::if->getMenuCount->menu->getMenu->if->MenuSelectionManager->defaultManager->setSelectedPath->getSelectionModel->setSelectedIndex
JMenuBar.AccessibleJMenuBar#clearAccessibleSelection():::Clears the selection in the object, so that nothing in the object is selected:::i->getSelectionModel->getSelectedIndex->if->getMenuCount->menu->getMenu->if->MenuSelectionManager->defaultManager->setSelectedPath->getSelectionModel->setSelectedIndex
JMenuBar.AccessibleJMenuBar#selectAllAccessibleSelection():::Normally causes every selected item in the object to be selected if the object supports multiple selections:::
JMenuBar#processKeyBinding(KeyStroke, KeyEvent, int, boolean):::Subclassed to check all the child menus.:::retValue->super->processKeyBinding->if->subElements->getSubElements->foreach->if->processBindingForKeyStrokeRecursive->return->return
JMenuBar#processBindingForKeyStrokeRecursive(MenuElement, KeyStroke, KeyEvent, int, boolean)::: menu bar process binding for key stroke recursive:::if->return->c->elem->getComponent->if->c->isVisible->c->isEnabled->return->if->processKeyBinding->return->subElements->elem->getSubElements->foreach->if->processBindingForKeyStrokeRecursive->return->return
JMenuBar#addNotify():::Overrides JComponent.addNotify to register this menu bar with the current keyboard manager.:::super->addNotify->KeyboardManager->getCurrentManager->registerMenuBar
JMenuBar#removeNotify():::Overrides JComponent.removeNotify to unregister this menu bar with the current keyboard manager.:::super->removeNotify->KeyboardManager->getCurrentManager->unregisterMenuBar
JMenuBar#writeObject(ObjectOutputStream)::: menu bar write object:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI->kvData->new->ObjectArr->n->if->s->writeObject
JMenuBar#readObject(ObjectInputStream):::See JComponent.readObject() for information about serialization in Swing.:::s->defaultReadObject->kvData->s->readObject->for->i
JMenuItem#setModel(ButtonModel)::: menu item set model:::super->setModel->if->setMenuItem
JMenuItem#initFocusability():::Inititalizes the focusability of the JMenuItem:::setFocusable
JMenuItem#init(String, Icon):::Initializes the menu item with the specified text and icon.:::if->setText->if->setIcon->new->MenuItemFocusListener->addFocusListener->setUIProperty->setFocusPainted->setHorizontalTextPosition->setHorizontalAlignment->updateUI
JMenuItem.MenuItemFocusListener#focusGained(FocusEvent)::: menu item focus listener focus gained:::
JMenuItem.MenuItemFocusListener#focusLost(FocusEvent)::: menu item focus listener focus lost:::mi->event->getSource->if->mi->isFocusPainted->mi->repaint
JMenuItem#setUI(MenuItemUI):::Sets the look and feel object that renders this component.:::super->setUI
JMenuItem#updateUI():::Resets the UI property with a value from the current look and feel.:::UIManager->getUI->setUI
JMenuItem#getUIClassID():::Returns the suffix used to construct the name of the L&amp;F class used to render this component.:::return
JMenuItem#setArmed(boolean):::Identifies the menu item as "armed":::model->getModel->oldValue->model->isArmed->if->model->isArmed->model->setArmed
JMenuItem#isArmed():::Returns whether the menu item is "armed".:::model->getModel->return->model->isArmed
JMenuItem#setEnabled(boolean):::Enables or disables the menu item.:::if->UIManager->getBoolean->setArmed->super->setEnabled
JMenuItem#alwaysOnTop()::: menu item always on top:::if->SwingUtilities->getAncestorOfClass->return->return
JMenuItem#setAccelerator(KeyStroke):::Sets the key combination which invokes the menu item's action listeners without navigating the menu hierarchy:::oldAccelerator->repaint->revalidate->firePropertyChange
JMenuItem#getAccelerator():::Returns the KeyStroke which serves as an accelerator for the menu item.:::return
JMenuItem#configurePropertiesFromAction(Action)::: menu item configure properties from action:::super->configurePropertiesFromAction->configureAcceleratorFromAction
JMenuItem#setIconFromAction(Action)::: menu item set icon from action:::icon->if->a->getValue->setIcon
JMenuItem#largeIconChanged(Action)::: menu item large icon changed:::
JMenuItem#smallIconChanged(Action)::: menu item small icon changed:::setIconFromAction
JMenuItem#configureAcceleratorFromAction(Action)::: menu item configure accelerator from action:::ks->a->getValue->setAccelerator
JMenuItem#actionPropertyChanged(Action, String)::: menu item action property changed:::if->configureAcceleratorFromAction->else->super->actionPropertyChanged
JMenuItem#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager):::Processes a mouse event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using the MenuSelectionManager's API:::e->getComponent->e->getID->e->getWhen->e->getModifiers->e->getX->e->getY->e->getXOnScreen->e->getYOnScreen->e->getClickCount->e->isPopupTrigger->new->MenuDragMouseEvent->processMenuDragMouseEvent
JMenuItem#processKeyEvent(KeyEvent, MenuElement[], MenuSelectionManager):::Processes a key event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using MenuSelectionManager's API:::if->getText->KeyStroke->getKeyStrokeForEvent->println->mke->e->getComponent->e->getID->e->getWhen->e->getModifiers->e->getKeyCode->e->getKeyChar->new->MenuKeyEvent->processMenuKeyEvent->if->mke->isConsumed->e->consume
JMenuItem#processMenuDragMouseEvent(MenuDragMouseEvent):::Handles mouse drag in a menu.:::switch->e->getID->fireMenuDragMouseEntered->break->fireMenuDragMouseExited->break->fireMenuDragMouseDragged->break->if->fireMenuDragMouseReleased->break->break
JMenuItem#processMenuKeyEvent(MenuKeyEvent):::Handles a keystroke in a menu.:::if->getText->KeyStroke->getKeyStrokeForEvent->println->switch->e->getID->fireMenuKeyPressed->break->fireMenuKeyReleased->break->fireMenuKeyTyped->break->break
JMenuItem#fireMenuDragMouseEntered(MenuDragMouseEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
JMenuItem#fireMenuDragMouseExited(MenuDragMouseEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
JMenuItem#fireMenuDragMouseDragged(MenuDragMouseEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
JMenuItem#fireMenuDragMouseReleased(MenuDragMouseEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
JMenuItem#fireMenuKeyPressed(MenuKeyEvent):::Notifies all listeners that have registered interest for notification on this event type.:::if->getText->KeyStroke->getKeyStrokeForEvent->println->listeners->listenerList->getListenerList->for->i
JMenuItem#fireMenuKeyReleased(MenuKeyEvent):::Notifies all listeners that have registered interest for notification on this event type.:::if->getText->KeyStroke->getKeyStrokeForEvent->println->listeners->listenerList->getListenerList->for->i
JMenuItem#fireMenuKeyTyped(MenuKeyEvent):::Notifies all listeners that have registered interest for notification on this event type.:::if->getText->KeyStroke->getKeyStrokeForEvent->println->listeners->listenerList->getListenerList->for->i
JMenuItem#menuSelectionChanged(boolean):::Called by the MenuSelectionManager when the MenuElement is selected or unselected.:::setArmed
JMenuItem#getSubElements():::This method returns an array containing the sub-menu components for this menu component.:::return->new->MenuElementArr
JMenuItem#getComponent():::Returns the java.awt.Component used to paint this object:::return
JMenuItem#addMenuDragMouseListener(MenuDragMouseListener):::Adds a MenuDragMouseListener to the menu item.:::listenerList->add
JMenuItem#removeMenuDragMouseListener(MenuDragMouseListener):::Removes a MenuDragMouseListener from the menu item.:::listenerList->remove
JMenuItem#getMenuDragMouseListeners():::Returns an array of all the MenuDragMouseListeners added to this JMenuItem with addMenuDragMouseListener().:::return->listenerList->getListeners
JMenuItem#addMenuKeyListener(MenuKeyListener):::Adds a MenuKeyListener to the menu item.:::listenerList->add
JMenuItem#removeMenuKeyListener(MenuKeyListener):::Removes a MenuKeyListener from the menu item.:::listenerList->remove
JMenuItem#getMenuKeyListeners():::Returns an array of all the MenuKeyListeners added to this JMenuItem with addMenuKeyListener().:::return->listenerList->getListeners
JMenuItem#readObject(ObjectInputStream):::See JComponent.readObject() for information about serialization in Swing.:::s->defaultReadObject->if->getUIClassID->equals->updateUI
JMenuItem#writeObject(ObjectOutputStream)::: menu item write object:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JMenuItem#paramString():::Returns a string representation of this JMenuItem:::return->super->paramString
JMenuItem#getAccessibleContext():::Returns the AccessibleContext associated with this JMenuItem:::if->new->AccessibleJMenuItem->return
JMenuItem.AccessibleJMenuItem#getAccessibleRole():::Get the role of this object.:::return
JMenuItem.AccessibleJMenuItem#fireAccessibilityFocusedEvent(JMenuItem)::: accessible menu item fire accessibility focused event:::path->MenuSelectionManager->defaultManager->getSelectedPath->if->menuItem->if->firePropertyChange
JMenuItem.AccessibleJMenuItem#stateChanged(ChangeEvent):::Supports the change listener interface and fires property changes.:::Boolean->valueOf->Boolean->valueOf->firePropertyChange->if->JMenuItem.this->getModel->isArmed->if->firePropertyChange->fireAccessibilityFocusedEvent->else->if->firePropertyChange->if->JMenuItem.this->isFocusOwner->if->firePropertyChange->else->if->firePropertyChange->if->JMenuItem.this->getModel->isPressed->if->firePropertyChange->else->if->firePropertyChange->if->JMenuItem.this->getModel->isSelected->if->firePropertyChange->fireAccessibilityFocusedEvent->else->if->firePropertyChange
JOptionPane#showInputDialog(Object):::Shows a question-message dialog requesting input from the user:::return->showInputDialog
JOptionPane#showInputDialog(Object, Object):::Shows a question-message dialog requesting input from the user, with the input value initialized to initialSelectionValue:::return->showInputDialog
JOptionPane#showInputDialog(Component, Object):::Shows a question-message dialog requesting input from the user parented to parentComponent:::return->UIManager->getString->showInputDialog
JOptionPane#showInputDialog(Component, Object, Object):::Shows a question-message dialog requesting input from the user and parented to parentComponent:::return->UIManager->getString->showInputDialog
JOptionPane#showInputDialog(Component, Object, String, int):::Shows a dialog requesting input from the user parented to parentComponent with the dialog having the title title and message type messageType.:::return->showInputDialog
JOptionPane#showInputDialog(Component, Object, String, int, Icon, Object[], Object):::Prompts the user for input in a blocking dialog where the initial selection, possible selections, and all other options can be specified:::pane->new->JOptionPane->pane->setWantsInput->pane->setSelectionValues->pane->setInitialSelectionValue->pane->getRootFrame->getComponentOrientation->setComponentOrientation->style->styleFromMessageType->dialog->pane->createDialog->pane->selectInitialValue->dialog->show->dialog->dispose->value->pane->getInputValue->if->return->return
JOptionPane#showMessageDialog(Component, Object):::Brings up an information-message dialog titled "Message".:::UIManager->getString->showMessageDialog
JOptionPane#showMessageDialog(Component, Object, String, int):::Brings up a dialog that displays a message using a default icon determined by the messageType parameter.:::showMessageDialog
JOptionPane#showMessageDialog(Component, Object, String, int, Icon):::Brings up a dialog displaying a message, specifying all parameters.:::showOptionDialog
JOptionPane#showConfirmDialog(Component, Object):::Brings up a dialog with the options Yes, No and Cancel; with the title, Select an Option.:::return->UIManager->getString->showConfirmDialog
JOptionPane#showConfirmDialog(Component, Object, String, int):::Brings up a dialog where the number of choices is determined by the optionType parameter.:::return->showConfirmDialog
JOptionPane#showConfirmDialog(Component, Object, String, int, int):::Brings up a dialog where the number of choices is determined by the optionType parameter, where the messageType parameter determines the icon to display:::return->showConfirmDialog
JOptionPane#showConfirmDialog(Component, Object, String, int, int, Icon):::Brings up a dialog with a specified icon, where the number of choices is determined by the optionType parameter:::return->showOptionDialog
JOptionPane#showOptionDialog(Component, Object, String, int, int, Icon, Object[], Object):::Brings up a dialog with a specified icon, where the initial choice is determined by the initialValue parameter and the number of choices is determined by the optionType parameter:::pane->new->JOptionPane->pane->setInitialValue->pane->getRootFrame->getComponentOrientation->setComponentOrientation->style->styleFromMessageType->dialog->pane->createDialog->pane->selectInitialValue->dialog->show->dialog->dispose->selectedValue->pane->getValue->if->return->if->if->return->intValue->return->for->counter->maxCounter->return
JOptionPane#createDialog(Component, String):::Creates and returns a new JDialog wrapping this centered on the parentComponent in the parentComponent's frame:::style->getMessageType->styleFromMessageType->return->createDialog
JOptionPane#createDialog(String):::Creates and returns a new parentless JDialog with the specified title:::style->getMessageType->styleFromMessageType->dialog->new->JDialog->initDialog->return
JOptionPane#createDialog(Component, String, int)::: option pane create dialog:::dialog->window->JOptionPane->getWindowForComponent->if->new->JDialog->else->new->JDialog->if->ownerShutdownListener->SwingUtilities->getSharedOwnerFrameShutdownListener->dialog->addWindowListener->initDialog->return
JOptionPane#initDialog(JDialog, int, Component)::: option pane init dialog:::dialog->this->getComponentOrientation->setComponentOrientation->contentPane->dialog->getContentPane->contentPane->new->BorderLayout->setLayout->contentPane->add->dialog->setResizable->if->JDialog->isDefaultLookAndFeelDecorated->supportsWindowDecorations->UIManager->getLookAndFeel->getSupportsWindowDecorations->if->dialog->setUndecorated->getRootPane->setWindowDecorationStyle->dialog->pack->dialog->setLocationRelativeTo->listener->new->PropertyChangeListener->adapter->new->WindowAdapter->dialog->addWindowListener->dialog->addWindowFocusListener->dialog->new->ComponentAdapter->addComponentListener->addPropertyChangeListener
JOptionPane#showInternalMessageDialog(Component, Object):::Brings up an internal confirmation dialog panel:::UIManager->getString->showInternalMessageDialog
JOptionPane#showInternalMessageDialog(Component, Object, String, int):::Brings up an internal dialog panel that displays a message using a default icon determined by the messageType parameter.:::showInternalMessageDialog
JOptionPane#showInternalMessageDialog(Component, Object, String, int, Icon):::Brings up an internal dialog panel displaying a message, specifying all parameters.:::showInternalOptionDialog
JOptionPane#showInternalConfirmDialog(Component, Object):::Brings up an internal dialog panel with the options Yes, No and Cancel; with the title, Select an Option.:::return->UIManager->getString->showInternalConfirmDialog
JOptionPane#showInternalConfirmDialog(Component, Object, String, int):::Brings up a internal dialog panel where the number of choices is determined by the optionType parameter.:::return->showInternalConfirmDialog
JOptionPane#showInternalConfirmDialog(Component, Object, String, int, int):::Brings up an internal dialog panel where the number of choices is determined by the optionType parameter, where the messageType parameter determines the icon to display:::return->showInternalConfirmDialog
JOptionPane#showInternalConfirmDialog(Component, Object, String, int, int, Icon):::Brings up an internal dialog panel with a specified icon, where the number of choices is determined by the optionType parameter:::return->showInternalOptionDialog
JOptionPane#checkFrameForComponent(Component)::: option pane check frame for component:::if->return->if->return->return->parentComponent->getParent->checkFrameForComponent
JOptionPane#showInternalOptionDialog(Component, Object, String, int, int, Icon, Object[], Object):::Brings up an internal dialog panel with a specified icon, where the initial choice is determined by the initialValue parameter and the number of choices is determined by the optionType parameter:::pane->new->JOptionPane->pane->putClientProperty->fo->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->pane->setInitialValue->if->checkFrameForComponent->dialog->pane->createInternalFrame->pane->selectInitialValue->dialog->setVisible->if->dialog->isVisible->dialog->isShowing->parent->dialog->getParent->while->if->parent->isVisible->parent->setVisible->parent->getParent->AWTAccessor->getContainerAccessor->startLWModal->else->pane->getRootFrame->getComponentOrientation->setComponentOrientation->style->styleFromMessageType->dialog->pane->createDialog->pane->selectInitialValue->dialog->setVisible->if->try->setSelected->catch->finally->selectedValue->pane->getValue->if->fo->isShowing->fo->requestFocus->if->return->if->if->return->intValue->return->for->counter->maxCounter->return
JOptionPane#showInternalInputDialog(Component, Object):::Shows an internal question-message dialog requesting input from the user parented to parentComponent:::return->UIManager->getString->showInternalInputDialog
JOptionPane#showInternalInputDialog(Component, Object, String, int):::Shows an internal dialog requesting input from the user parented to parentComponent with the dialog having the title title and message type messageType.:::return->showInternalInputDialog
JOptionPane#showInternalInputDialog(Component, Object, String, int, Icon, Object[], Object):::Prompts the user for input in a blocking internal dialog where the initial selection, possible selections, and all other options can be specified:::pane->new->JOptionPane->pane->putClientProperty->fo->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->pane->setWantsInput->pane->setSelectionValues->pane->setInitialSelectionValue->dialog->pane->createInternalFrame->pane->selectInitialValue->dialog->setVisible->if->dialog->isVisible->dialog->isShowing->parent->dialog->getParent->while->if->parent->isVisible->parent->setVisible->parent->getParent->AWTAccessor->getContainerAccessor->startLWModal->if->try->setSelected->catch->finally->if->fo->isShowing->fo->requestFocus->value->pane->getInputValue->if->return->return
JOptionPane#createInternalFrame(Component, String):::Creates and returns an instance of JInternalFrame:::parent->JOptionPane->getDesktopPaneForComponent->if->parentComponent->getParent->throw->new->RuntimeException->iFrame->new->JInternalFrame->iFrame->putClientProperty->iFrame->Integer->getMessageType->valueOf->putClientProperty->iFrame->new->InternalFrameAdapter->addInternalFrameListener->new->PropertyChangeListener->addPropertyChangeListener->iFrame->getContentPane->add->if->parent->add->else->parent->add->iFrameSize->iFrame->getPreferredSize->rootSize->parent->getSize->parentSize->parentComponent->getSize->iFrame->setBounds->iFrameCoord->SwingUtilities->convertPoint->x->y->ovrx->ovry->Math->max->Math->max->iFrame->setBounds->parent->validate->try->iFrame->setSelected->catch->finally->return
JOptionPane#getFrameForComponent(Component):::Returns the specified component's Frame.:::if->return->getRootFrame->if->return->return->JOptionPane->parentComponent->getParent->getFrameForComponent
JOptionPane#getWindowForComponent(Component):::Returns the specified component's toplevel Frame or Dialog.:::if->return->getRootFrame->if->return->return->JOptionPane->parentComponent->getParent->getWindowForComponent
JOptionPane#getDesktopPaneForComponent(Component):::Returns the specified component's desktop pane.:::if->return->if->return->return->parentComponent->getParent->getDesktopPaneForComponent
JOptionPane#setRootFrame(Frame):::Sets the frame to use for class methods in which a frame is not provided:::if->SwingUtilities->appContextPut->else->SwingUtilities->appContextRemove
JOptionPane#getRootFrame():::Returns the Frame to use for the class methods in which a frame is not provided.:::sharedFrame->SwingUtilities->appContextGet->if->SwingUtilities->getSharedOwnerFrame->SwingUtilities->appContextPut->return
JOptionPane#setUI(OptionPaneUI):::Sets the UI object which implements the L&F for this component.:::if->super->setUI->invalidate
JOptionPane#getUI():::Returns the UI object which implements the L&F for this component.:::return
JOptionPane#updateUI():::Notification from the UIManager that the L&F has changed:::UIManager->getUI->setUI
JOptionPane#getUIClassID():::Returns the name of the UI class that implements the L&F for this component.:::return
JOptionPane#setMessage(Object):::Sets the option pane's message-object.:::oldMessage->firePropertyChange
JOptionPane#getMessage():::Returns the message-object this pane displays.:::return
JOptionPane#setIcon(Icon):::Sets the icon to display:::oldIcon->firePropertyChange
JOptionPane#getIcon():::Returns the icon this pane displays.:::return
JOptionPane#setValue(Object):::Sets the value the user has chosen.:::oldValue->firePropertyChange
JOptionPane#getValue():::Returns the value the user has selected:::return
JOptionPane#setOptions(Object[]):::Sets the options this pane displays:::oldOptions->Arrays->copyOf->firePropertyChange
JOptionPane#getOptions():::Returns the choices the user can make.:::return->Arrays->copyOf
JOptionPane#setInitialValue(Object):::Sets the initial value that is to be enabled -- the Component that has the focus when the pane is initially displayed.:::oldIV->firePropertyChange
JOptionPane#getInitialValue():::Returns the initial value.:::return
JOptionPane#setMessageType(int):::Sets the option pane's message type:::checkMessageType->oldType->firePropertyChange
JOptionPane#checkMessageType(int)::: option pane check message type:::if->throw->new->RuntimeException
JOptionPane#getMessageType():::Returns the message type.:::return
JOptionPane#setOptionType(int):::Sets the options to display:::checkOptionType->oldType->firePropertyChange
JOptionPane#checkOptionType(int)::: option pane check option type:::if->throw->new->RuntimeException
JOptionPane#getOptionType():::Returns the type of options that are displayed.:::return
JOptionPane#setSelectionValues(Object[]):::Sets the input selection values for a pane that provides the user with a list of items to choose from:::oldValues->Arrays->copyOf->firePropertyChange->if->setWantsInput
JOptionPane#getSelectionValues():::Returns the input selection values.:::return->Arrays->copyOf
JOptionPane#setInitialSelectionValue(Object):::Sets the input value that is initially displayed as selected to the user:::oldValue->firePropertyChange
JOptionPane#getInitialSelectionValue():::Returns the input value that is displayed as initially selected to the user.:::return
JOptionPane#setInputValue(Object):::Sets the input value that was selected or input by the user:::oldValue->firePropertyChange
JOptionPane#getInputValue():::Returns the value the user has input, if wantsInput is true.:::return
JOptionPane#getMaxCharactersPerLineCount():::Returns the maximum number of characters to place on a line in a message:::return
JOptionPane#setWantsInput(boolean):::Sets the wantsInput property:::oldValue->firePropertyChange
JOptionPane#getWantsInput():::Returns the value of the wantsInput property.:::return
JOptionPane#selectInitialValue():::Requests that the initial value be selected, which will set focus to the initial value:::ui->getUI->if->ui->selectInitialValue
JOptionPane#styleFromMessageType(int)::: option pane style from message type:::switch->return->return->return->return->return
JOptionPane#writeObject(ObjectOutputStream)::: option pane write object:::values->new->Vector<Object>->s->defaultWriteObject->if->values->addElement->values->addElement->if->values->addElement->values->addElement->if->serOptions->new->Vector<Object>->for->counter->maxCounter->if->serOptions->size->optionCount->serOptions->size->arrayOptions->new->ObjectArr->serOptions->copyInto->values->addElement->values->addElement->if->values->addElement->values->addElement->if->values->addElement->values->addElement->if->serialize->for->counter->maxCounter->if->values->addElement->values->addElement->if->values->addElement->values->addElement->if->values->addElement->values->addElement->s->writeObject
JOptionPane#readObject(ObjectInputStream)::: option pane read object:::f->s->readFields->newMessageType->f->get->checkMessageType->newOptionType->f->get->checkOptionType->f->get->values->s->readObject->indexCounter->maxCounter->values->size->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JOptionPane#paramString():::Returns a string representation of this JOptionPane:::iconString->icon->toString->initialValueString->initialValue->toString->messageString->message->toString->messageTypeString->if->else->if->else->if->else->if->else->if->else->optionTypeString->if->else->if->else->if->else->if->else->wantsInputString->return->super->paramString
JOptionPane#getAccessibleContext():::Returns the AccessibleContext associated with this JOptionPane:::if->new->AccessibleJOptionPane->return
JOptionPane.AccessibleJOptionPane#getAccessibleRole():::Get the role of this object.:::switch->return->return
JPanel#updateUI():::Resets the UI property with a value from the current look and feel.:::UIManager->getUI->setUI
JPanel#getUI():::Returns the look and feel (L&amp;F) object that renders this component.:::return
JPanel#setUI(PanelUI):::Sets the look and feel (L&amp;F) object that renders this component.:::super->setUI
JPanel#getUIClassID():::Returns a string that specifies the name of the L&amp;F class that renders this component.:::return
JPanel#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JPanel#paramString():::Returns a string representation of this JPanel:::return->super->paramString
JPanel#getAccessibleContext():::Gets the AccessibleContext associated with this JPanel:::if->new->AccessibleJPanel->return
JPanel.AccessibleJPanel#getAccessibleRole():::Get the role of this object.:::return
JPasswordField#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JPasswordField#updateUI()::: password field update i:::if->super->updateUI
JPasswordField#getEchoChar():::Returns the character to be used for echoing:::return
JPasswordField#setEchoChar(char):::Sets the echo character for this JPasswordField:::repaint->revalidate
JPasswordField#echoCharIsSet():::Returns true if this JPasswordField has a character set for echoing:::return
JPasswordField#cut():::Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep:::if->getClientProperty->UIManager->getLookAndFeel->provideErrorFeedback->else->super->cut
JPasswordField#copy():::Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep:::if->getClientProperty->UIManager->getLookAndFeel->provideErrorFeedback->else->super->copy
JPasswordField#getText():::Returns the text contained in this TextComponent:::return->super->getText
JPasswordField#getText(int, int):::Fetches a portion of the text represented by the component:::return->super->getText
JPasswordField#getPassword():::Returns the text contained in this TextComponent:::doc->getDocument->txt->new->Segment->try->doc->doc->getLength->getText->catch->return->finally->retValue->new->charArr->System->arraycopy->return
JPasswordField#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JPasswordField#paramString():::Returns a string representation of this JPasswordField:::return->super->paramString
JPasswordField#customSetUIProperty(String, Object):::This method is a hack to get around the fact that we cannot directly override setUIProperty because part of the inheritance hierarchy goes outside of the javax.swing package, and therefore calling a package private method isn't allowed:::if->if->setEchoChar->return->return
JPasswordField#getAccessibleContext():::Returns the AccessibleContext associated with this JPasswordField:::if->new->AccessibleJPasswordField->return
JPasswordField.AccessibleJPasswordField#getAccessibleRole():::Gets the role of this object.:::return
JPasswordField.AccessibleJPasswordField#getAccessibleText():::Gets the AccessibleText for the JPasswordField:::return
JPasswordField.AccessibleJPasswordField#getEchoString(String)::: accessible password field get echo string:::if->return->buffer->str->length->new->charArr->Arrays->getEchoChar->fill->return->new->String
JPasswordField.AccessibleJPasswordField#getAtIndex(int, int):::Returns the String at a given index.:::str->if->super->getAtIndex->else->password->getPassword->if->return->new->String->return->getEchoString
JPasswordField.AccessibleJPasswordField#getAfterIndex(int, int):::Returns the String after a given index.:::if->str->super->getAfterIndex->return->getEchoString->else->return
JPasswordField.AccessibleJPasswordField#getBeforeIndex(int, int):::Returns the String before a given index.:::if->str->super->getBeforeIndex->return->getEchoString->else->return
JPasswordField.AccessibleJPasswordField#getTextRange(int, int):::Returns the text between two indices.:::str->super->getTextRange->return->getEchoString
JPasswordField.AccessibleJPasswordField#getTextSequenceAt(int, int):::Returns the AccessibleTextSequence at a given index.:::if->seq->super->getTextSequenceAt->if->return->return->getEchoString->new->AccessibleTextSequence->else->password->getPassword->if->return->text->new->String->return->getEchoString->new->AccessibleTextSequence
JPasswordField.AccessibleJPasswordField#getTextSequenceAfter(int, int):::Returns the AccessibleTextSequence after a given index.:::if->seq->super->getTextSequenceAfter->if->return->return->getEchoString->new->AccessibleTextSequence->else->return
JPasswordField.AccessibleJPasswordField#getTextSequenceBefore(int, int):::Returns the AccessibleTextSequence before a given index.:::if->seq->super->getTextSequenceBefore->if->return->return->getEchoString->new->AccessibleTextSequence->else->return
JPopupMenu#setDefaultLightWeightPopupEnabled(boolean)::: Sets the default value of the lightWeightPopupEnabled  property.:::SwingUtilities->Boolean->valueOf->appContextPut
JPopupMenu#getDefaultLightWeightPopupEnabled()::: Gets the defaultLightWeightPopupEnabled property,  which by default is true.:::b->SwingUtilities->appContextGet->if->SwingUtilities->appContextPut->return->return->b->booleanValue
JPopupMenu#getUI():::Returns the look and feel (L&amp;F) object that renders this component.:::return
JPopupMenu#setUI(PopupMenuUI):::Sets the L&amp;F object that renders this component.:::super->setUI
JPopupMenu#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JPopupMenu#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JPopupMenu#processFocusEvent(FocusEvent)::: popup menu process focus event:::super->processFocusEvent
JPopupMenu#processKeyEvent(KeyEvent):::Processes key stroke events such as mnemonics and accelerators.:::MenuSelectionManager->defaultManager->processKeyEvent->if->evt->isConsumed->return->super->processKeyEvent
JPopupMenu#getSelectionModel():::Returns the model object that handles single selections.:::return
JPopupMenu#setSelectionModel(SingleSelectionModel):::Sets the model object to handle single selections.:::
JPopupMenu#add(JMenuItem):::Appends the specified menu item to the end of this menu.:::super->add->return
JPopupMenu#add(String):::Creates a new menu item with the specified text and appends it to the end of this menu.:::return->new->JMenuItem->add
JPopupMenu#add(Action):::Appends a new menu item to the end of the menu which dispatches the specified Action object.:::mi->createActionComponent->mi->setAction->add->return
JPopupMenu#adjustPopupLocationToFitScreen(int, int):::Returns an point which has been adjusted to take into account of the desktop bounds, taskbar and multi-monitor configuration:::popupLocation->new->Point->if->GraphicsEnvironment->isHeadless->return->scrBounds->gc->getCurrentGraphicsConfiguration->toolkit->Toolkit->getDefaultToolkit->if->gc->getBounds->else->toolkit->getScreenSize->new->Rectangle->popupSize->JPopupMenu.this->getPreferredSize->popupRightX->popupBottomY->scrWidth->scrHeight->if->canPopupOverlapTaskBar->scrInsets->toolkit->getScreenInsets->scrRightX->scrBottomY->if->if->if->if->return
JPopupMenu#getCurrentGraphicsConfiguration(Point):::Tries to find GraphicsConfiguration that contains the mouse cursor position:::gc->ge->GraphicsEnvironment->getLocalGraphicsEnvironment->gd->ge->getScreenDevices->for->i->if->getInvoker->getInvoker->getGraphicsConfiguration->return
JPopupMenu#canPopupOverlapTaskBar():::Returns whether popup is allowed to be shown above the task bar.:::result->tk->Toolkit->getDefaultToolkit->if->canPopupOverlapTaskBar->return
JPopupMenu#createActionComponent(Action):::Factory method which creates the JMenuItem for Actions added to the JPopupMenu.:::mi->new->JMenuItem->mi->setHorizontalTextPosition->mi->setVerticalTextPosition->return
JPopupMenu#createActionChangeListener(JMenuItem):::Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur.:::return->b->b->getAction->createActionPropertyChangeListener0
JPopupMenu#remove(int):::Removes the component at the specified index from this popup menu.:::if->throw->new->IllegalArgumentException->if->getComponentCount->throw->new->IllegalArgumentException->super->remove
JPopupMenu#setLightWeightPopupEnabled(boolean):::Sets the value of the lightWeightPopupEnabled property, which by default is true:::
JPopupMenu#isLightWeightPopupEnabled():::Gets the lightWeightPopupEnabled property.:::return
JPopupMenu#getLabel():::Returns the popup menu's label:::return
JPopupMenu#setLabel(String):::Sets the popup menu's label:::oldValue->firePropertyChange->if->accessibleContext->firePropertyChange->invalidate->repaint
JPopupMenu#addSeparator():::Appends a new separator at the end of the menu.:::new->JPopupMenu.Separator->add
JPopupMenu#insert(Action, int):::Inserts a menu item for the specified Action object at a given position.:::mi->createActionComponent->mi->setAction->insert
JPopupMenu#insert(Component, int):::Inserts the specified component into the menu at a given position.:::if->throw->new->IllegalArgumentException->nitems->getComponentCount->tempItems->new->Vector<Component>->for->i->add->foreach->add
JPopupMenu#addPopupMenuListener(PopupMenuListener)::: Adds a PopupMenu listener.:::listenerList->add
JPopupMenu#removePopupMenuListener(PopupMenuListener):::Removes a PopupMenu listener.:::listenerList->remove
JPopupMenu#getPopupMenuListeners():::Returns an array of all the PopupMenuListeners added to this JMenuItem with addPopupMenuListener().:::return->listenerList->getListeners
JPopupMenu#addMenuKeyListener(MenuKeyListener):::Adds a MenuKeyListener to the popup menu.:::listenerList->add
JPopupMenu#removeMenuKeyListener(MenuKeyListener):::Removes a MenuKeyListener from the popup menu.:::listenerList->remove
JPopupMenu#getMenuKeyListeners():::Returns an array of all the MenuKeyListeners added to this JPopupMenu with addMenuKeyListener().:::return->listenerList->getListeners
JPopupMenu#firePopupMenuWillBecomeVisible():::Notifies PopupMenuListeners that this popup menu will become visible.:::listeners->listenerList->getListenerList->e->for->i
JPopupMenu#firePopupMenuWillBecomeInvisible():::Notifies PopupMenuListeners that this popup menu will become invisible.:::listeners->listenerList->getListenerList->e->for->i
JPopupMenu#firePopupMenuCanceled():::Notifies PopupMenuListeners that this popup menu is cancelled.:::listeners->listenerList->getListenerList->e->for->i
JPopupMenu#alwaysOnTop()::: popup menu always on top:::return
JPopupMenu#pack():::Lays out the container so that it uses the minimum space needed to display its contents.:::if->pref->getPreferredSize->if->getWidth->getHeight->showPopup->else->validate
JPopupMenu#setVisible(boolean):::Sets the visibility of the popup menu.:::if->println->if->isVisible->return->if->doCanceled->getClientProperty->if->putClientProperty->firePopupMenuCanceled->getSelectionModel->clearSelection->else->if->isPopupMenu->me->new->MenuElementArr->MenuSelectionManager->defaultManager->setSelectedPath->if->firePopupMenuWillBecomeVisible->showPopup->firePropertyChange->else->if->firePopupMenuWillBecomeInvisible->popup->hide->firePropertyChange->if->isPopupMenu->MenuSelectionManager->defaultManager->clearSelectedPath
JPopupMenu#showPopup():::Retrieves Popup instance from the PopupMenuUI that has had show invoked on it:::oldPopup->if->oldPopup->hide->popupFactory->PopupFactory->getSharedInstance->if->isLightWeightPopupEnabled->popupFactory->setPopupType->else->popupFactory->setPopupType->p->adjustPopupLocationToFitScreen->newPopup->getUI->getPopup->popupFactory->setPopupType->newPopup->show
JPopupMenu#isVisible():::Returns true if the popup menu is visible (currently being displayed).:::return
JPopupMenu#setLocation(int, int):::Sets the location of the upper left corner of the popup menu using x, y coordinates:::oldX->oldY->if->showPopup
JPopupMenu#isPopupMenu():::Returns true if the popup menu is a standalone popup menu rather than the submenu of a JMenu.:::return
JPopupMenu#getInvoker():::Returns the component which is the 'invoker' of this popup menu.:::return
JPopupMenu#setInvoker(Component):::Sets the invoker of this popup menu -- the component in which the popup menu menu is to be displayed.:::oldInvoker->if->ui->uninstallUI->ui->installUI->invalidate
JPopupMenu#show(Component, int, int):::Displays the popup menu at the position x,y in the coordinate space of the component invoker.:::if->println->setInvoker->newFrame->getFrame->if->if->if->setVisible->invokerOrigin->if->invoker->getLocationOnScreen->lx->ly->if->if->if->if->setLocation->else->setLocation->setVisible
JPopupMenu#getRootPopupMenu():::Returns the popup menu which is at the root of the menu system for this popup menu.:::mp->while->mp->isPopupMenu->mp->getInvoker->mp->getInvoker->getParent->mp->getInvoker->getParent->mp->getInvoker->getParent->return
JPopupMenu#getComponentAtIndex(int):::Returns the component at the specified index.:::return->getComponent
JPopupMenu#getComponentIndex(Component):::Returns the index of the specified component.:::ncomponents->this->getComponentCount->component->this->getComponents->for->i->return
JPopupMenu#setPopupSize(Dimension):::Sets the size of the Popup window using a Dimension object:::oldSize->getPreferredSize->setPreferredSize->if->newSize->getPreferredSize->if->oldSize->equals->showPopup
JPopupMenu#setPopupSize(int, int):::Sets the size of the Popup window to the specified width and height:::new->Dimension->setPopupSize
JPopupMenu#setSelected(Component):::Sets the currently selected component,  This will result in a change to the selection model.:::model->getSelectionModel->index->getComponentIndex->model->setSelectedIndex
JPopupMenu#isBorderPainted():::Checks whether the border should be painted.:::return
JPopupMenu#setBorderPainted(boolean):::Sets whether the border should be painted.:::repaint
JPopupMenu#paintBorder(Graphics):::Paints the popup menu's border if the borderPainted property is true.:::if->isBorderPainted->super->paintBorder
JPopupMenu#getMargin():::Returns the margin, in pixels, between the popup menu's border and its containers.:::if->return->new->Insets->else->return
JPopupMenu#isSubPopupMenu(JPopupMenu):::Examines the list of menu items to determine whether popup is a popup menu.:::ncomponents->this->getComponentCount->component->this->getComponents->for->i->return
JPopupMenu#getFrame(Component)::: popup menu get frame:::w->while->w->getParent->return
JPopupMenu#paramString():::Returns a string representation of this JPopupMenu:::labelString->paintBorderString->marginString->margin->toString->lightWeightPopupEnabledString->isLightWeightPopupEnabled->return->super->paramString
JPopupMenu#getAccessibleContext():::Gets the AccessibleContext associated with this JPopupMenu:::if->new->AccessibleJPopupMenu->return
JPopupMenu.AccessibleJPopupMenu#getAccessibleRole():::Get the role of this object.:::return
JPopupMenu.AccessibleJPopupMenu#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed.:::propertyName->e->getPropertyName->if->if->e->getOldValue->e->getNewValue->handlePopupIsVisibleEvent->else->if->e->getOldValue->e->getNewValue->handlePopupIsVisibleEvent
JPopupMenu.AccessibleJPopupMenu#handlePopupIsVisibleEvent(boolean)::: accessible popup menu handle popup is visible event:::if->firePropertyChange->fireActiveDescendant->else->firePropertyChange
JPopupMenu.AccessibleJPopupMenu#fireActiveDescendant()::: accessible popup menu fire active descendant:::if->popupList->getList->if->return->ac->popupList->getAccessibleContext->selection->ac->getAccessibleSelection->if->return->a->selection->getAccessibleSelection->if->return->selectedItem->a->getAccessibleContext->if->invokerContext->invoker->getAccessibleContext->if->invokerContext->firePropertyChange
JPopupMenu#writeObject(ObjectOutputStream)::: popup menu write object:::values->new->Vector<Object>->s->defaultWriteObject->if->values->addElement->values->addElement->if->values->addElement->values->addElement->s->writeObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JPopupMenu#readObject(ObjectInputStream)::: popup menu read object:::f->s->readFields->newDesiredLocationX->f->get->newDesiredLocationY->f->get->p->adjustPopupLocationToFitScreen->f->get->f->get->f->get->f->get->f->get->values->s->readObject->indexCounter->maxCounter->values->size->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt
JPopupMenu#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager):::This method is required to conform to the MenuElement interface, but it not implemented.:::
JPopupMenu#processKeyEvent(KeyEvent, MenuElement[], MenuSelectionManager):::Processes a key event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using MenuSelectionManager's API:::mke->e->getComponent->e->getID->e->getWhen->e->getModifiers->e->getKeyCode->e->getKeyChar->new->MenuKeyEvent->processMenuKeyEvent->if->mke->isConsumed->e->consume
JPopupMenu#processMenuKeyEvent(MenuKeyEvent):::Handles a keystroke in a menu.:::switch->e->getID->fireMenuKeyPressed->break->fireMenuKeyReleased->break->fireMenuKeyTyped->break->break
JPopupMenu#fireMenuKeyPressed(MenuKeyEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
JPopupMenu#fireMenuKeyReleased(MenuKeyEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
JPopupMenu#fireMenuKeyTyped(MenuKeyEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
JPopupMenu#menuSelectionChanged(boolean):::Messaged when the menubar selection changes to activate or deactivate this menu:::if->println->if->m->if->m->setPopupMenuVisible->else->m->setPopupMenuVisible->if->isPopupMenu->setVisible
JPopupMenu#getSubElements():::Returns an array of MenuElements containing the submenu for this menu component:::result->tmp->new->Vector<MenuElement>->c->getComponentCount->i->m->for->tmp->size->new->MenuElementArr->for->tmp->size->return
JPopupMenu#getComponent():::Returns this JPopupMenu component.:::return
JPopupMenu.Separator#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JPopupMenu#isPopupTrigger(MouseEvent):::Returns true if the MouseEvent is considered a popup trigger by the JPopupMenu's currently installed UI.:::return->getUI->isPopupTrigger
JProgressBar#getOrientation():::Returns SwingConstants.VERTICAL or SwingConstants.HORIZONTAL, depending on the orientation of the progress bar:::return
JProgressBar#setOrientation(int):::Sets the progress bar's orientation to newOrientation, which must be SwingConstants.VERTICAL or SwingConstants.HORIZONTAL:::if->switch->oldOrientation->firePropertyChange->if->accessibleContext->firePropertyChange->break->throw->new->IllegalArgumentException->revalidate
JProgressBar#isStringPainted():::Returns the value of the stringPainted property.:::return
JProgressBar#setStringPainted(boolean):::Sets the value of the stringPainted property, which determines whether the progress bar should render a progress string:::oldValue->firePropertyChange->if->revalidate->repaint
JProgressBar#getString():::Returns a String representation of the current progress:::if->return->else->if->NumberFormat->getPercentInstance->return->format->Double->getPercentComplete->valueOf->format
JProgressBar#setString(String):::Sets the value of the progress string:::oldValue->firePropertyChange->if->progressString->equals->repaint
JProgressBar#getPercentComplete():::Returns the percent complete for the progress bar:::span->model->getMaximum->model->getMinimum->currentValue->model->getValue->pc->model->getMinimum->return
JProgressBar#isBorderPainted():::Returns the borderPainted property.:::return
JProgressBar#setBorderPainted(boolean):::Sets the borderPainted property, which is true if the progress bar should paint its border:::oldValue->firePropertyChange->if->repaint
JProgressBar#paintBorder(Graphics):::Paints the progress bar's border if the borderPainted property is true.:::if->isBorderPainted->super->paintBorder
JProgressBar#getUI():::Returns the look-and-feel object that renders this component.:::return
JProgressBar#setUI(ProgressBarUI):::Sets the look-and-feel object that renders this component.:::super->setUI
JProgressBar#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JProgressBar#getUIClassID():::Returns the name of the look-and-feel class that renders this component.:::return
JProgressBar.ModelListener#stateChanged(ChangeEvent)::: model listener state changed:::fireStateChanged
JProgressBar#createChangeListener():::Subclasses that want to handle change events from the model differently can override this to return an instance of a custom ChangeListener implementation:::return->new->ModelListener
JProgressBar#addChangeListener(ChangeListener):::Adds the specified ChangeListener to the progress bar.:::listenerList->add
JProgressBar#removeChangeListener(ChangeListener):::Removes a ChangeListener from the progress bar.:::listenerList->remove
JProgressBar#getChangeListeners():::Returns an array of all the ChangeListeners added to this progress bar with addChangeListener.:::return->listenerList->getListeners
JProgressBar#fireStateChanged():::Send a ChangeEvent, whose source is this JProgressBar, to all ChangeListeners that have registered interest in ChangeEvents:::listeners->listenerList->getListenerList->for->i
JProgressBar#getModel():::Returns the data model used by this progress bar.:::return
JProgressBar#setModel(BoundedRangeModel):::Sets the data model used by the JProgressBar:::oldModel->getModel->if->if->oldModel->removeChangeListener->if->createChangeListener->newModel->addChangeListener->if->accessibleContext->Integer->oldModel->getValue->valueOf->Integer->newModel->getValue->valueOf->firePropertyChange->if->model->setExtent->repaint
JProgressBar#getValue():::Returns the progress bar's current value from the BoundedRangeModel:::return->getModel->getValue
JProgressBar#getMinimum():::Returns the progress bar's minimum value from the BoundedRangeModel.:::return->getModel->getMinimum
JProgressBar#getMaximum():::Returns the progress bar's maximum value from the BoundedRangeModel.:::return->getModel->getMaximum
JProgressBar#setValue(int):::Sets the progress bar's current value to n:::brm->getModel->oldValue->brm->getValue->brm->setValue->if->accessibleContext->Integer->valueOf->Integer->brm->getValue->valueOf->firePropertyChange
JProgressBar#setMinimum(int):::Sets the progress bar's minimum value (stored in the progress bar's data model) to n:::getModel->setMinimum
JProgressBar#setMaximum(int):::Sets the progress bar's maximum value (stored in the progress bar's data model) to n:::getModel->setMaximum
JProgressBar#setIndeterminate(boolean):::Sets the indeterminate property of the progress bar, which determines whether the progress bar is in determinate or indeterminate mode:::oldValue->firePropertyChange
JProgressBar#isIndeterminate():::Returns the value of the indeterminate property.:::return
JProgressBar#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JProgressBar#paramString():::Returns a string representation of this JProgressBar:::orientationString->paintBorderString->progressStringString->paintStringString->indeterminateString->return->super->paramString
JProgressBar#getAccessibleContext():::Gets the AccessibleContext associated with this JProgressBar:::if->new->AccessibleJProgressBar->return
JProgressBar.AccessibleJProgressBar#getAccessibleStateSet():::Gets the state set of this object.:::states->super->getAccessibleStateSet->if->getModel->getValueIsAdjusting->states->add->if->getOrientation->states->add->else->states->add->return
JProgressBar.AccessibleJProgressBar#getAccessibleRole():::Gets the role of this object.:::return
JProgressBar.AccessibleJProgressBar#getAccessibleValue():::Gets the AccessibleValue associated with this object:::return
JProgressBar.AccessibleJProgressBar#getCurrentAccessibleValue():::Gets the accessible value of this object.:::return->Integer->getValue->valueOf
JProgressBar.AccessibleJProgressBar#setCurrentAccessibleValue(Number):::Sets the value of this object as a Number.:::if->return->n->intValue->setValue->return
JProgressBar.AccessibleJProgressBar#getMinimumAccessibleValue():::Gets the minimum accessible value of this object.:::return->Integer->getMinimum->valueOf
JProgressBar.AccessibleJProgressBar#getMaximumAccessibleValue():::Gets the maximum accessible value of this object.:::return->Integer->model->getMaximum->model->getExtent->valueOf
JRadioButton#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JRadioButton#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JRadioButton#setIconFromAction(Action):::The icon for radio buttons comes from the look and feel, not the Action.:::
JRadioButton#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JRadioButton#paramString():::Returns a string representation of this JRadioButton:::return->super->paramString
JRadioButton#getAccessibleContext():::Gets the AccessibleContext associated with this JRadioButton:::if->new->AccessibleJRadioButton->return
JRadioButton.AccessibleJRadioButton#getAccessibleRole():::Get the role of this object.:::return
JRadioButtonMenuItem#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JRadioButtonMenuItem#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JRadioButtonMenuItem#paramString():::Returns a string representation of this JRadioButtonMenuItem:::return->super->paramString
JRadioButtonMenuItem#shouldUpdateSelectedStateFromAction():::Overriden to return true, JRadioButtonMenuItem supports the selected state.:::return
JRadioButtonMenuItem#getAccessibleContext():::Gets the AccessibleContext associated with this JRadioButtonMenuItem:::if->new->AccessibleJRadioButtonMenuItem->return
JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem#getAccessibleRole():::Get the role of this object.:::return
JRootPane#setDoubleBuffered(boolean)::: root pane set double buffered:::if->isDoubleBuffered->super->setDoubleBuffered->RepaintManager->currentManager->doubleBufferingChanged
JRootPane#getWindowDecorationStyle():::Returns a constant identifying the type of Window decorations the JRootPane is providing.:::return
JRootPane#setWindowDecorationStyle(int):::Sets the type of Window decorations (such as borders, widgets for closing a Window, title ...) the JRootPane should provide:::if->throw->new->IllegalArgumentException->oldWindowDecorationStyle->getWindowDecorationStyle->firePropertyChange
JRootPane#getUI():::Returns the L&amp;F object that renders this component.:::return
JRootPane#setUI(RootPaneUI):::Sets the L&amp;F object that renders this component.:::super->setUI
JRootPane#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JRootPane#getUIClassID():::Returns a string that specifies the name of the L&amp;F class that renders this component.:::return
JRootPane#createLayeredPane():::Called by the constructor methods to create the default layeredPane:::p->new->JLayeredPane->p->this->getName->setName->return
JRootPane#createContentPane():::Called by the constructor methods to create the default contentPane:::c->new->JPanel->c->this->getName->setName->c->new->BorderLayout->setLayout->return
JRootPane#createGlassPane():::Called by the constructor methods to create the default glassPane:::c->new->JPanel->c->this->getName->setName->c->setVisible->setOpaque->return
JRootPane#createRootLayout():::Called by the constructor methods to create the default layoutManager.:::return->new->RootLayout
JRootPane#setJMenuBar(JMenuBar):::Adds or changes the menu bar used in the layered pane.:::if->menuBar->getParent->layeredPane->remove->if->menuBar->updateUI->layeredPane->add
JRootPane#setMenuBar(JMenuBar):::Specifies the menu bar value.:::if->menuBar->getParent->layeredPane->remove->if->layeredPane->add
JRootPane#getJMenuBar():::Returns the menu bar from the layered pane.:::return
JRootPane#getMenuBar():::Returns the menu bar value.:::return
JRootPane#setContentPane(Container):::Sets the content pane -- the container that holds the components parented by the root pane:::if->throw->new->IllegalComponentStateException->if->contentPane->getParent->layeredPane->remove->layeredPane->add
JRootPane#getContentPane():::Returns the content pane -- the container that holds the components parented by the root pane.:::return
JRootPane#setLayeredPane(JLayeredPane):::Sets the layered pane for the root pane:::if->throw->new->IllegalComponentStateException->if->layeredPane->getParent->this->remove->this->add
JRootPane#getLayeredPane():::Gets the layered pane used by the root pane:::return
JRootPane#setGlassPane(Component):::Sets a specified Component to be the glass pane for this root pane:::if->throw->new->NullPointerException->glass->new->Rectangle->setMixingCutoutShape->visible->if->glassPane->getParent->this->remove->glassPane->isVisible->glass->setVisible->this->add->if->repaint
JRootPane#getGlassPane():::Returns the current glass pane for this JRootPane.:::return
JRootPane#isValidateRoot():::If a descendant of this JRootPane calls revalidate, validate from here on down:::return
JRootPane#isOptimizedDrawingEnabled():::The glassPane and contentPane have the same bounds, which means JRootPane does not tiles its children and this should return false:::return->glassPane->isVisible
JRootPane#addNotify()::: root pane add notify:::super->addNotify->enableEvents
JRootPane#removeNotify()::: root pane remove notify:::super->removeNotify
JRootPane#setDefaultButton(JButton):::Sets the defaultButton property, which determines the current default button for this JRootPane:::oldDefault->if->if->oldDefault->repaint->if->defaultButton->repaint->firePropertyChange
JRootPane#getDefaultButton():::Returns the value of the defaultButton property.:::return
JRootPane#setUseTrueDoubleBuffering(boolean)::: root pane set use true double buffering:::
JRootPane#getUseTrueDoubleBuffering()::: root pane get use true double buffering:::return
JRootPane#disableTrueDoubleBuffering()::: root pane disable true double buffering:::if->if->if->println->Thread->dumpStack->RepaintManager->currentManager->doubleBufferingChanged
JRootPane#addImpl(Component, Object, int):::Overridden to enforce the position of the glass component as the zero child.:::super->addImpl->if->glassPane->getParent->getComponent->add
JRootPane.RootLayout#preferredLayoutSize(Container):::Returns the amount of space the layout would like to have.:::rd->mbd->i->getInsets->if->contentPane->getPreferredSize->else->parent->getSize->if->menuBar->isVisible->menuBar->getPreferredSize->else->new->Dimension->return->Math->max->new->Dimension
JRootPane.RootLayout#minimumLayoutSize(Container):::Returns the minimum amount of space the layout needs.:::rd->mbd->i->getInsets->if->contentPane->getMinimumSize->else->parent->getSize->if->menuBar->isVisible->menuBar->getMinimumSize->else->new->Dimension->return->Math->max->new->Dimension
JRootPane.RootLayout#maximumLayoutSize(Container):::Returns the maximum amount of space the layout can use.:::rd->mbd->i->getInsets->if->menuBar->isVisible->menuBar->getMaximumSize->else->new->Dimension->if->contentPane->getMaximumSize->else->new->Dimension->return->Math->max->new->Dimension
JRootPane.RootLayout#layoutContainer(Container):::Instructs the layout manager to perform the layout for the specified container.:::b->parent->getBounds->i->getInsets->contentY->w->h->if->layeredPane->setBounds->if->glassPane->setBounds->if->menuBar->isVisible->mbd->menuBar->getPreferredSize->menuBar->setBounds->if->contentPane->setBounds
JRootPane.RootLayout#addLayoutComponent(String, Component)::: root layout add layout component:::
JRootPane.RootLayout#removeLayoutComponent(Component)::: root layout remove layout component:::
JRootPane.RootLayout#addLayoutComponent(Component, Object)::: root layout add layout component:::
JRootPane.RootLayout#getLayoutAlignmentX(Container)::: root layout get layout alignment x:::return
JRootPane.RootLayout#getLayoutAlignmentY(Container)::: root layout get layout alignment y:::return
JRootPane.RootLayout#invalidateLayout(Container)::: root layout invalidate layout:::
JRootPane#paramString():::Returns a string representation of this JRootPane:::return->super->paramString
JRootPane#getAccessibleContext():::Gets the AccessibleContext associated with this JRootPane:::if->new->AccessibleJRootPane->return
JRootPane.AccessibleJRootPane#getAccessibleRole():::Get the role of this object.:::return
JRootPane.AccessibleJRootPane#getAccessibleChildrenCount():::Returns the number of accessible children of the object.:::return->super->getAccessibleChildrenCount
JRootPane.AccessibleJRootPane#getAccessibleChild(int):::Returns the specified Accessible child of the object:::return->super->getAccessibleChild
JScrollBar#checkOrientation(int)::: scroll bar check orientation:::switch->break->throw->new->IllegalArgumentException
JScrollBar#setUI(ScrollBarUI):::Sets the L&F object that renders this component.:::super->setUI
JScrollBar#getUI():::Returns the delegate that implements the look and feel for this component.:::return
JScrollBar#updateUI():::Overrides JComponent.updateUI.:::UIManager->getUI->setUI
JScrollBar#getUIClassID():::Returns the name of the LookAndFeel class for this component.:::return
JScrollBar#getOrientation():::Returns the component's orientation (horizontal or vertical).:::return
JScrollBar#setOrientation(int):::Set the scrollbar's orientation to either VERTICAL or HORIZONTAL.:::checkOrientation->oldValue->firePropertyChange->if->accessibleContext->firePropertyChange->if->revalidate
JScrollBar#getModel():::Returns data model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent.:::return
JScrollBar#setModel(BoundedRangeModel):::Sets the model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent.:::oldValue->oldModel->if->model->removeChangeListener->Integer->model->getValue->valueOf->if->model->addChangeListener->firePropertyChange->if->accessibleContext->model->getValue->firePropertyChange
JScrollBar#getUnitIncrement(int):::Returns the amount to change the scrollbar's value by, given a unit up/down request:::return
JScrollBar#setUnitIncrement(int):::Sets the unitIncrement property:::oldValue->firePropertyChange
JScrollBar#getBlockIncrement(int):::Returns the amount to change the scrollbar's value by, given a block (usually "page") up/down request:::return
JScrollBar#setBlockIncrement(int):::Sets the blockIncrement property:::oldValue->firePropertyChange
JScrollBar#getUnitIncrement():::For backwards compatibility with java.awt.Scrollbar.:::return
JScrollBar#getBlockIncrement():::For backwards compatibility with java.awt.Scrollbar.:::return
JScrollBar#getValue():::Returns the scrollbar's value.:::return->getModel->getValue
JScrollBar#setValue(int):::Sets the scrollbar's value:::m->getModel->oldValue->m->getValue->m->setValue->if->accessibleContext->Integer->valueOf->Integer->m->getValue->valueOf->firePropertyChange
JScrollBar#getVisibleAmount():::Returns the scrollbar's extent, aka its "visibleAmount":::return->getModel->getExtent
JScrollBar#setVisibleAmount(int):::Set the model's extent property.:::getModel->setExtent
JScrollBar#getMinimum():::Returns the minimum value supported by the scrollbar (usually zero).:::return->getModel->getMinimum
JScrollBar#setMinimum(int):::Sets the model's minimum property.:::getModel->setMinimum
JScrollBar#getMaximum():::The maximum value of the scrollbar is maximum - extent.:::return->getModel->getMaximum
JScrollBar#setMaximum(int):::Sets the model's maximum property:::getModel->setMaximum
JScrollBar#getValueIsAdjusting():::True if the scrollbar knob is being dragged.:::return->getModel->getValueIsAdjusting
JScrollBar#setValueIsAdjusting(boolean):::Sets the model's valueIsAdjusting property:::m->getModel->oldValue->m->getValueIsAdjusting->m->setValueIsAdjusting->if->accessibleContext->firePropertyChange
JScrollBar#setValues(int, int, int, int):::Sets the four BoundedRangeModel properties after forcing the arguments to obey the usual constraints:  minimum &le; value &le; value+extent &le; maximum :::m->getModel->oldValue->m->getValue->m->m->getValueIsAdjusting->setRangeProperties->if->accessibleContext->Integer->valueOf->Integer->m->getValue->valueOf->firePropertyChange
JScrollBar#addAdjustmentListener(AdjustmentListener):::Adds an AdjustmentListener:::listenerList->add
JScrollBar#removeAdjustmentListener(AdjustmentListener):::Removes an AdjustmentEvent listener.:::listenerList->remove
JScrollBar#getAdjustmentListeners():::Returns an array of all the AdjustmentListeners added to this JScrollBar with addAdjustmentListener().:::return->listenerList->getListeners
JScrollBar#fireAdjustmentValueChanged(int, int, int):::Notify listeners that the scrollbar's model has changed.:::getValueIsAdjusting->fireAdjustmentValueChanged
JScrollBar#fireAdjustmentValueChanged(int, int, int, boolean):::Notify listeners that the scrollbar's model has changed.:::listeners->listenerList->getListenerList->e->for->i
JScrollBar.ModelListener#stateChanged(ChangeEvent)::: model listener state changed:::obj->e->getSource->if->id->type->model->value->model->getValue->isAdjusting->model->getValueIsAdjusting->fireAdjustmentValueChanged
JScrollBar#getMinimumSize():::The scrollbar is flexible along it's scrolling axis and rigid along the other axis.:::pref->getPreferredSize->if->return->new->Dimension->else->return->new->Dimension
JScrollBar#getMaximumSize():::The scrollbar is flexible along it's scrolling axis and rigid along the other axis.:::pref->getPreferredSize->if->getOrientation->return->new->Dimension->else->return->new->Dimension
JScrollBar#setEnabled(boolean):::Enables the component so that the knob position can be changed:::super->setEnabled->children->getComponents->foreach->child->setEnabled
JScrollBar#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JScrollBar#paramString():::Returns a string representation of this JScrollBar:::orientationString->return->super->paramString
JScrollBar#getAccessibleContext():::Gets the AccessibleContext associated with this JScrollBar:::if->new->AccessibleJScrollBar->return
JScrollBar.AccessibleJScrollBar#getAccessibleStateSet():::Get the state set of this object.:::states->super->getAccessibleStateSet->if->getValueIsAdjusting->states->add->if->getOrientation->states->add->else->states->add->return
JScrollBar.AccessibleJScrollBar#getAccessibleRole():::Get the role of this object.:::return
JScrollBar.AccessibleJScrollBar#getAccessibleValue():::Get the AccessibleValue associated with this object:::return
JScrollBar.AccessibleJScrollBar#getCurrentAccessibleValue():::Get the accessible value of this object.:::return->Integer->getValue->valueOf
JScrollBar.AccessibleJScrollBar#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::if->return->n->intValue->setValue->return
JScrollBar.AccessibleJScrollBar#getMinimumAccessibleValue():::Get the minimum accessible value of this object.:::return->Integer->getMinimum->valueOf
JScrollBar.AccessibleJScrollBar#getMaximumAccessibleValue():::Get the maximum accessible value of this object.:::return->model->getMaximum->model->getExtent
JScrollPane#getUI():::Returns the look and feel (L&amp;F) object that renders this component.:::return
JScrollPane#setUI(ScrollPaneUI):::Sets the ScrollPaneUI object that provides the look and feel (L&amp;F) for this component.:::super->setUI
JScrollPane#updateUI():::Replaces the current ScrollPaneUI object with a version from the current default look and feel:::UIManager->getUI->setUI
JScrollPane#getUIClassID():::Returns the suffix used to construct the name of the L&amp;F class used to render this component.:::return
JScrollPane#setLayout(LayoutManager):::Sets the layout manager for this JScrollPane:::if->super->setLayout->syncWithScrollPane->else->if->super->setLayout->else->s->throw->new->ClassCastException
JScrollPane#isValidateRoot():::Overridden to return true so that any calls to revalidate on any descendants of this JScrollPane will cause the entire tree beginning with this JScrollPane to be validated.:::return
JScrollPane#getVerticalScrollBarPolicy():::Returns the vertical scroll bar policy value.:::return
JScrollPane#setVerticalScrollBarPolicy(int):::Determines when the vertical scrollbar appears in the scrollpane:::switch->break->throw->new->IllegalArgumentException->old->firePropertyChange->revalidate->repaint
JScrollPane#getHorizontalScrollBarPolicy():::Returns the horizontal scroll bar policy value.:::return
JScrollPane#setHorizontalScrollBarPolicy(int):::Determines when the horizontal scrollbar appears in the scrollpane:::switch->break->throw->new->IllegalArgumentException->old->firePropertyChange->revalidate->repaint
JScrollPane#getViewportBorder():::Returns the Border object that surrounds the viewport.:::return
JScrollPane#setViewportBorder(Border):::Adds a border around the viewport:::oldValue->firePropertyChange
JScrollPane#getViewportBorderBounds():::Returns the bounds of the viewport's border.:::borderR->getSize->new->Rectangle->insets->getInsets->leftToRight->SwingUtilities->isLeftToRight->colHead->getColumnHeader->if->colHead->isVisible->colHeadHeight->colHead->getHeight->rowHead->getRowHeader->if->rowHead->isVisible->rowHeadWidth->rowHead->getWidth->if->vsb->getVerticalScrollBar->if->vsb->isVisible->vsbWidth->vsb->getWidth->if->hsb->getHorizontalScrollBar->if->hsb->isVisible->hsb->getHeight->return
JScrollPane.ScrollBar#setUnitIncrement(int):::Messages super to set the value, and resets the unitIncrementSet instance variable to true.:::this->putClientProperty->super->setUnitIncrement
JScrollPane.ScrollBar#getUnitIncrement(int):::Computes the unit increment for scrolling if the viewport's view is a Scrollable object:::vp->getViewport->if->vp->getView->view->vp->getView->vr->vp->getViewRect->return->view->getOrientation->getScrollableUnitIncrement->else->return->super->getUnitIncrement
JScrollPane.ScrollBar#setBlockIncrement(int):::Messages super to set the value, and resets the blockIncrementSet instance variable to true.:::this->putClientProperty->super->setBlockIncrement
JScrollPane.ScrollBar#getBlockIncrement(int):::Computes the block increment for scrolling if the viewport's view is a Scrollable object:::vp->getViewport->if->return->super->getBlockIncrement->else->if->vp->getView->view->vp->getView->vr->vp->getViewRect->return->view->getOrientation->getScrollableBlockIncrement->else->if->getOrientation->return->vp->getExtentSize->else->return->vp->getExtentSize
JScrollPane#createHorizontalScrollBar():::Returns a JScrollPane.ScrollBar by default:::return->new->ScrollBar
JScrollPane#getHorizontalScrollBar():::Returns the horizontal scroll bar that controls the viewport's horizontal view position.:::return
JScrollPane#setHorizontalScrollBar(JScrollBar):::Adds the scrollbar that controls the viewport's horizontal view position to the scrollpane:::old->getHorizontalScrollBar->if->add->else->if->remove->firePropertyChange->revalidate->repaint
JScrollPane#createVerticalScrollBar():::Returns a JScrollPane.ScrollBar by default:::return->new->ScrollBar
JScrollPane#getVerticalScrollBar():::Returns the vertical scroll bar that controls the viewports vertical view position.:::return
JScrollPane#setVerticalScrollBar(JScrollBar):::Adds the scrollbar that controls the viewports vertical view position to the scrollpane:::old->getVerticalScrollBar->add->firePropertyChange->revalidate->repaint
JScrollPane#createViewport():::Returns a new JViewport by default:::return->new->JViewport
JScrollPane#getViewport():::Returns the current JViewport.:::return
JScrollPane#setViewport(JViewport):::Removes the old viewport (if there is one); forces the viewPosition of the new viewport to be in the +x,+y quadrant; syncs up the row and column headers (if there are any) with the new viewport; and finally syncs the scrollbars and headers with the new viewport:::old->getViewport->if->add->else->if->remove->firePropertyChange->if->resetViewPort->revalidate->repaint
JScrollPane#setViewportView(Component):::Creates a viewport if necessary and then sets its view:::if->getViewport->createViewport->setViewport->getViewport->setView
JScrollPane#getRowHeader():::Returns the row header.:::return
JScrollPane#setRowHeader(JViewport):::Removes the old rowHeader, if it exists; if the new rowHeader isn't null, syncs the y coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane:::old->getRowHeader->if->add->else->if->remove->firePropertyChange->revalidate->repaint
JScrollPane#setRowHeaderView(Component):::Creates a row-header viewport if necessary, sets its view and then adds the row-header viewport to the scrollpane:::if->getRowHeader->createViewport->setRowHeader->getRowHeader->setView
JScrollPane#getColumnHeader():::Returns the column header.:::return
JScrollPane#setColumnHeader(JViewport):::Removes the old columnHeader, if it exists; if the new columnHeader isn't null, syncs the x coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane:::old->getColumnHeader->if->add->else->if->remove->firePropertyChange->revalidate->repaint
JScrollPane#setColumnHeaderView(Component):::Creates a column-header viewport if necessary, sets its view, and then adds the column-header viewport to the scrollpane:::if->getColumnHeader->createViewport->setColumnHeader->getColumnHeader->setView
JScrollPane#getCorner(String):::Returns the component at the specified corner:::isLeftToRight->getComponentOrientation->isLeftToRight->if->key->equals->else->if->key->equals->else->if->key->equals->else->if->key->equals->if->key->equals->return->else->if->key->equals->return->else->if->key->equals->return->else->if->key->equals->return->else->return
JScrollPane#setCorner(String, Component):::Adds a child that will appear in one of the scroll panes corners, if there's room:::old->isLeftToRight->getComponentOrientation->isLeftToRight->if->key->equals->else->if->key->equals->else->if->key->equals->else->if->key->equals->if->key->equals->else->if->key->equals->else->if->key->equals->else->if->key->equals->else->throw->new->IllegalArgumentException->if->remove->if->add->firePropertyChange->revalidate->repaint
JScrollPane#setComponentOrientation(ComponentOrientation):::Sets the orientation for the vertical and horizontal scrollbars as determined by the ComponentOrientation argument.:::super->setComponentOrientation->if->verticalScrollBar->setComponentOrientation->if->horizontalScrollBar->setComponentOrientation
JScrollPane#isWheelScrollingEnabled():::Indicates whether or not scrolling will take place in response to the mouse wheel:::return
JScrollPane#setWheelScrollingEnabled(boolean):::Enables/disables scrolling in response to movement of the mouse wheel:::old->firePropertyChange
JScrollPane#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JScrollPane#paramString():::Returns a string representation of this JScrollPane:::viewportBorderString->viewportBorder->toString->viewportString->viewport->toString->verticalScrollBarPolicyString->if->else->if->else->if->else->horizontalScrollBarPolicyString->if->else->if->else->if->else->horizontalScrollBarString->horizontalScrollBar->toString->verticalScrollBarString->verticalScrollBar->toString->columnHeaderString->columnHeader->toString->rowHeaderString->rowHeader->toString->lowerLeftString->lowerLeft->toString->lowerRightString->lowerRight->toString->upperLeftString->upperLeft->toString->upperRightString->upperRight->toString->return->super->paramString
JScrollPane#getAccessibleContext():::Gets the AccessibleContext associated with this JScrollPane:::if->new->AccessibleJScrollPane->return
JScrollPane.AccessibleJScrollPane#resetViewPort():::Resets the viewport ChangeListener and PropertyChangeListener:::if->viewPort->removeChangeListener->viewPort->removePropertyChangeListener->JScrollPane.this->getViewport->if->viewPort->addChangeListener->viewPort->addPropertyChangeListener
JScrollPane.AccessibleJScrollPane#getAccessibleRole():::Get the role of this object.:::return
JScrollPane.AccessibleJScrollPane#stateChanged(ChangeEvent):::Invoked when the target of the listener has changed its state.:::if->throw->new->NullPointerException->Boolean->valueOf->Boolean->valueOf->firePropertyChange
JScrollPane.AccessibleJScrollPane#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed.:::propertyName->e->getPropertyName->if->if->e->getNewValue->e->getNewValue->setScrollBarRelations
JScrollPane.AccessibleJScrollPane#setScrollBarRelations(JScrollBar)::: accessible scroll pane set scroll bar relations:::controlledBy->new->AccessibleRelation->controllerFor->new->AccessibleRelation->ac->scrollBar->getAccessibleContext->ac->getAccessibleRelationSet->add->getAccessibleRelationSet->add
JSeparator#getUI():::Returns the L&amp;F object that renders this component.:::return
JSeparator#setUI(SeparatorUI):::Sets the L&amp;F object that renders this component.:::super->setUI
JSeparator#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JSeparator#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JSeparator#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JSeparator#getOrientation():::Returns the orientation of this separator.:::return
JSeparator#setOrientation(int):::Sets the orientation of the separator:::if->return->oldValue->checkOrientation->firePropertyChange->revalidate->repaint
JSeparator#checkOrientation(int)::: separator check orientation:::switch->break->throw->new->IllegalArgumentException
JSeparator#paramString():::Returns a string representation of this JSeparator:::orientationString->return->super->paramString
JSeparator#getAccessibleContext():::Gets the AccessibleContext associated with this JSeparator:::if->new->AccessibleJSeparator->return
JSeparator.AccessibleJSeparator#getAccessibleRole():::Get the role of this object.:::return
JSlider#checkOrientation(int)::: slider check orientation:::switch->break->throw->new->IllegalArgumentException
JSlider#getUI():::Gets the UI object which implements the L&amp;F for this component.:::return
JSlider#setUI(SliderUI):::Sets the UI object which implements the L&amp;F for this component.:::super->setUI
JSlider#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI->updateLabelUIs
JSlider#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JSlider.ModelListener#stateChanged(ChangeEvent)::: model listener state changed:::fireStateChanged
JSlider#createChangeListener():::Subclasses that want to handle ChangeEvents from the model differently can override this to return an instance of a custom ChangeListener implementation:::return->new->ModelListener
JSlider#addChangeListener(ChangeListener):::Adds a ChangeListener to the slider.:::listenerList->add
JSlider#removeChangeListener(ChangeListener):::Removes a ChangeListener from the slider.:::listenerList->remove
JSlider#getChangeListeners():::Returns an array of all the ChangeListeners added to this JSlider with addChangeListener().:::return->listenerList->getListeners
JSlider#fireStateChanged():::Send a ChangeEvent, whose source is this JSlider, to all ChangeListeners that have registered interest in ChangeEvents:::listeners->listenerList->getListenerList->for->i
JSlider#getModel():::Returns the BoundedRangeModel that handles the slider's three fundamental properties: minimum, maximum, value.:::return
JSlider#setModel(BoundedRangeModel):::Sets the BoundedRangeModel that handles the slider's three fundamental properties: minimum, maximum, value:::oldModel->getModel->if->oldModel->removeChangeListener->if->newModel->addChangeListener->if->accessibleContext->Integer->oldModel->getValue->valueOf->Integer->newModel->getValue->valueOf->firePropertyChange->firePropertyChange
JSlider#getValue():::Returns the slider's current value from the BoundedRangeModel.:::return->getModel->getValue
JSlider#setValue(int):::Sets the slider's current value to n:::m->getModel->oldValue->m->getValue->if->return->m->setValue->if->accessibleContext->Integer->valueOf->Integer->m->getValue->valueOf->firePropertyChange
JSlider#getMinimum():::Returns the minimum value supported by the slider from the BoundedRangeModel.:::return->getModel->getMinimum
JSlider#setMinimum(int):::Sets the slider's minimum value to minimum:::oldMin->getModel->getMinimum->getModel->setMinimum->Integer->valueOf->Integer->valueOf->firePropertyChange
JSlider#getMaximum():::Returns the maximum value supported by the slider from the BoundedRangeModel.:::return->getModel->getMaximum
JSlider#setMaximum(int):::Sets the slider's maximum value to maximum:::oldMax->getModel->getMaximum->getModel->setMaximum->Integer->valueOf->Integer->valueOf->firePropertyChange
JSlider#getValueIsAdjusting():::Returns the valueIsAdjusting property from the model:::return->getModel->getValueIsAdjusting
JSlider#setValueIsAdjusting(boolean):::Sets the model's valueIsAdjusting property:::m->getModel->oldValue->m->getValueIsAdjusting->m->setValueIsAdjusting->if->accessibleContext->firePropertyChange
JSlider#getExtent():::Returns the "extent" from the BoundedRangeModel:::return->getModel->getExtent
JSlider#setExtent(int):::Sets the size of the range "covered" by the knob:::getModel->setExtent
JSlider#getOrientation():::Return this slider's vertical or horizontal orientation.:::return
JSlider#setOrientation(int):::Set the slider's orientation to either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.:::checkOrientation->oldValue->firePropertyChange->if->accessibleContext->firePropertyChange->if->revalidate
JSlider#setFont(Font)::: slider set font:::super->setFont->updateLabelSizes
JSlider#imageUpdate(Image, int, int, int, int, int)::: slider image update:::if->isShowing->return->elements->labelTable->elements->while->elements->hasMoreElements->component->elements->nextElement->if->label->if->SwingUtilities->label->getIcon->doesIconReferenceImage->SwingUtilities->label->getDisabledIcon->doesIconReferenceImage->return->super->imageUpdate->return
JSlider#getLabelTable():::Returns the dictionary of what labels to draw at which values.:::return
JSlider#setLabelTable(Dictionary):::Used to specify what label will be drawn at any given value:::oldTable->updateLabelUIs->firePropertyChange->if->revalidate->repaint
JSlider#updateLabelUIs():::Updates the UIs for the labels in the label table by calling updateUI on each label:::labelTable->getLabelTable->if->return->labels->labelTable->keys->while->labels->hasMoreElements->component->labelTable->labels->nextElement->get->component->updateUI->component->component->getPreferredSize->setSize
JSlider#updateLabelSizes()::: slider update label sizes:::labelTable->getLabelTable->if->labels->labelTable->elements->while->labels->hasMoreElements->component->labels->nextElement->component->component->getPreferredSize->setSize
JSlider#createStandardLabels(int):::Creates a Hashtable of numerical text labels, starting at the slider minimum, and using the increment specified:::return->getMinimum->createStandardLabels
JSlider#createStandardLabels(int, int):::Creates a Hashtable of numerical text labels, starting at the starting point specified, and using the increment specified:::if->getMaximum->getMinimum->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->table->new->SmartHashtable->labelTable->getLabelTable->if->removePropertyChangeListener->addPropertyChangeListener->return
JSlider#getInverted():::Returns true if the value-range shown for the slider is reversed,:::return
JSlider#setInverted(boolean):::Specify true to reverse the value-range shown for the slider and false to put the value range in the normal order:::oldValue->firePropertyChange->if->repaint
JSlider#getMajorTickSpacing():::This method returns the major tick spacing:::return
JSlider#setMajorTickSpacing(int):::This method sets the major tick spacing:::oldValue->if->getMajorTickSpacing->getPaintLabels->getMajorTickSpacing->createStandardLabels->setLabelTable->firePropertyChange->if->getPaintTicks->repaint
JSlider#getMinorTickSpacing():::This method returns the minor tick spacing:::return
JSlider#setMinorTickSpacing(int):::This method sets the minor tick spacing:::oldValue->firePropertyChange->if->getPaintTicks->repaint
JSlider#getSnapToTicks():::Returns true if the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob.:::return
JSlider#getSnapToValue():::Returns true if the knob (and the data value it represents) resolve to the closest slider value next to where the user positioned the knob.:::return
JSlider#setSnapToTicks(boolean):::Specifying true makes the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob:::oldValue->firePropertyChange
JSlider#setSnapToValue(boolean):::Specifying true makes the knob (and the data value it represents) resolve to the closest slider value next to where the user positioned the knob:::oldValue->firePropertyChange
JSlider#getPaintTicks():::Tells if tick marks are to be painted.:::return
JSlider#setPaintTicks(boolean):::Determines whether tick marks are painted on the slider:::oldValue->firePropertyChange->if->revalidate->repaint
JSlider#getPaintTrack():::Tells if the track (area the slider slides in) is to be painted.:::return
JSlider#setPaintTrack(boolean):::Determines whether the track is painted on the slider:::oldValue->firePropertyChange->if->repaint
JSlider#getPaintLabels():::Tells if labels are to be painted.:::return
JSlider#setPaintLabels(boolean):::Determines whether labels are painted on the slider:::oldValue->if->getMajorTickSpacing->getMajorTickSpacing->createStandardLabels->setLabelTable->firePropertyChange->if->revalidate->repaint
JSlider#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JSlider#paramString():::Returns a string representation of this JSlider:::paintTicksString->paintTrackString->paintLabelsString->isInvertedString->snapToTicksString->snapToValueString->orientationString->return->super->paramString
JSlider#getAccessibleContext():::Gets the AccessibleContext associated with this JSlider:::if->new->AccessibleJSlider->return
JSlider.AccessibleJSlider#getAccessibleStateSet():::Get the state set of this object.:::states->super->getAccessibleStateSet->if->getValueIsAdjusting->states->add->if->getOrientation->states->add->else->states->add->return
JSlider.AccessibleJSlider#getAccessibleRole():::Get the role of this object.:::return
JSlider.AccessibleJSlider#getAccessibleValue():::Get the AccessibleValue associated with this object:::return
JSlider.AccessibleJSlider#getCurrentAccessibleValue():::Get the accessible value of this object.:::return->Integer->getValue->valueOf
JSlider.AccessibleJSlider#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::if->return->n->intValue->setValue->return
JSlider.AccessibleJSlider#getMinimumAccessibleValue():::Get the minimum accessible value of this object.:::return->Integer->getMinimum->valueOf
JSlider.AccessibleJSlider#getMaximumAccessibleValue():::Get the maximum accessible value of this object.:::model->JSlider.this->getModel->return->Integer->model->getMaximum->model->getExtent->valueOf
JSpinner#getUI():::Returns the look and feel (L&amp;F) object that renders this component.:::return
JSpinner#setUI(SpinnerUI):::Sets the look and feel (L&amp;F) object that renders this component.:::super->setUI
JSpinner#getUIClassID():::Returns the suffix used to construct the name of the look and feel (L&amp;F) class used to render this component.:::return
JSpinner#updateUI():::Resets the UI property with the value from the current look and feel.:::UIManager->getUI->setUI->invalidate
JSpinner#createEditor(SpinnerModel):::This method is called by the constructors to create the JComponent that displays the current value of the sequence:::if->return->new->DateEditor->else->if->return->new->ListEditor->else->if->return->new->NumberEditor->else->return->new->DefaultEditor
JSpinner#setModel(SpinnerModel):::Changes the model that represents the value of this spinner:::if->throw->new->IllegalArgumentException->if->model->equals->oldModel->if->oldModel->removeChangeListener->addChangeListener->firePropertyChange->if->createEditor->setEditor->repaint->revalidate
JSpinner#getModel():::Returns the SpinnerModel that defines this spinners sequence of values.:::return
JSpinner#getValue():::Returns the current value of the model, typically this value is displayed by the editor:::return->getModel->getValue
JSpinner#setValue(Object):::Changes current value of the model, typically this value is displayed by the editor:::getModel->setValue
JSpinner#getNextValue():::Returns the object in the sequence that comes after the object returned by getValue():::return->getModel->getNextValue
JSpinner.ModelListener#stateChanged(ChangeEvent)::: model listener state changed:::fireStateChanged
JSpinner#addChangeListener(ChangeListener):::Adds a listener to the list that is notified each time a change to the model occurs:::if->new->ModelListener->getModel->addChangeListener->listenerList->add
JSpinner#removeChangeListener(ChangeListener):::Removes a ChangeListener from this spinner.:::listenerList->remove
JSpinner#getChangeListeners():::Returns an array of all the ChangeListeners added to this JSpinner with addChangeListener().:::return->listenerList->getListeners
JSpinner#fireStateChanged():::Sends a ChangeEvent, whose source is this JSpinner, to each ChangeListener:::listeners->listenerList->getListenerList->for->i
JSpinner#getPreviousValue():::Returns the object in the sequence that comes before the object returned by getValue():::return->getModel->getPreviousValue
JSpinner#setEditor(JComponent):::Changes the JComponent that displays the current value of the SpinnerModel:::if->throw->new->IllegalArgumentException->if->editor->equals->oldEditor->if->dismiss->firePropertyChange->revalidate->repaint
JSpinner#getEditor():::Returns the component that displays and potentially changes the model's value.:::return
JSpinner#commitEdit():::Commits the currently edited value to the SpinnerModel:::editor->getEditor->if->commitEdit
JSpinner#writeObject(ObjectOutputStream)::: spinner write object:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JSpinner.DefaultEditor#dismiss(JSpinner):::Disconnect this editor from the specified JSpinner:::spinner->removeChangeListener
JSpinner.DefaultEditor#getSpinner():::Returns the JSpinner ancestor of this editor or null if none of the ancestors are a JSpinner:::for->c->c->getParent->return
JSpinner.DefaultEditor#getTextField():::Returns the JFormattedTextField child of this editor:::return->getComponent
JSpinner.DefaultEditor#stateChanged(ChangeEvent):::This method is called when the spinner's model's state changes:::spinner->e->getSource->getTextField->spinner->getValue->setValue
JSpinner.DefaultEditor#propertyChange(PropertyChangeEvent):::Called by the JFormattedTextField PropertyChangeListener:::spinner->getSpinner->if->return->source->e->getSource->name->e->getPropertyName->if->if->equals->lastValue->spinner->getValue->try->spinner->getTextField->getValue->setValue->catch->try->setValue->catch->finally->finally->else->if->equals->newfont->e->getNewValue->if->font->spinner->getFont->if->newfont->equals->getTextField->new->FontUIResource->setFont
JSpinner.DefaultEditor#addLayoutComponent(String, Component):::This LayoutManager method does nothing:::
JSpinner.DefaultEditor#removeLayoutComponent(Component):::This LayoutManager method does nothing:::
JSpinner.DefaultEditor#insetSize(Container):::Returns the size of the parents insets.:::insets->parent->getInsets->w->h->return->new->Dimension
JSpinner.DefaultEditor#preferredLayoutSize(Container):::Returns the preferred size of first (and only) child plus the size of the parents insets.:::preferredSize->insetSize->if->parent->getComponentCount->childSize->getComponent->getPreferredSize->return
JSpinner.DefaultEditor#minimumLayoutSize(Container):::Returns the minimum size of first (and only) child plus the size of the parents insets.:::minimumSize->insetSize->if->parent->getComponentCount->childSize->getComponent->getMinimumSize->return
JSpinner.DefaultEditor#layoutContainer(Container):::Resize the one (and only) child to completely fill the area within the parents insets.:::if->parent->getComponentCount->insets->parent->getInsets->w->parent->getWidth->h->parent->getHeight->getComponent->setBounds
JSpinner.DefaultEditor#commitEdit():::Pushes the currently edited value to the SpinnerModel:::ftf->getTextField->ftf->commitEdit
JSpinner.DefaultEditor#getBaseline(int, int):::Returns the baseline.:::super->getBaseline->insets->getInsets->baseline->getComponent->getBaseline->if->return->return
JSpinner.DefaultEditor#getBaselineResizeBehavior():::Returns an enum indicating how the baseline of the component changes as the size changes.:::return->getComponent->getBaselineResizeBehavior
JSpinner.DateEditorFormatter#setMinimum(Comparable)::: date editor formatter set minimum:::model->setStart
JSpinner.DateEditorFormatter#getMinimum()::: date editor formatter get minimum:::return->model->getStart
JSpinner.DateEditorFormatter#setMaximum(Comparable)::: date editor formatter set maximum:::model->setEnd
JSpinner.DateEditorFormatter#getMaximum()::: date editor formatter get maximum:::return->model->getEnd
JSpinner.DateEditor#getDefaultPattern(Locale)::: date editor get default pattern:::adapter->LocaleProviderAdapter->getAdapter->lr->adapter->getLocaleResources->if->LocaleProviderAdapter->forJRE->getLocaleResources->return->lr->getDateTimePattern
JSpinner.DateEditor#getFormat():::Returns the java.text.SimpleDateFormat object the JFormattedTextField uses to parse and format numbers.:::return->getTextField->getFormatter->getFormat
JSpinner.DateEditor#getModel():::Return our spinner ancestor's SpinnerDateModel.:::return->getSpinner->getModel
JSpinner.NumberEditorFormatter#setMinimum(Comparable)::: number editor formatter set minimum:::model->setMinimum
JSpinner.NumberEditorFormatter#getMinimum()::: number editor formatter get minimum:::return->model->getMinimum
JSpinner.NumberEditorFormatter#setMaximum(Comparable)::: number editor formatter set maximum:::model->setMaximum
JSpinner.NumberEditorFormatter#getMaximum()::: number editor formatter get maximum:::return->model->getMaximum
JSpinner.NumberEditor#getDefaultPattern(Locale)::: number editor get default pattern:::adapter->LocaleProviderAdapter->getAdapter->lr->adapter->getLocaleResources->if->LocaleProviderAdapter->forJRE->getLocaleResources->all->lr->getNumberPatterns->return
JSpinner.NumberEditor#getFormat():::Returns the java.text.DecimalFormat object the JFormattedTextField uses to parse and format numbers.:::return->getTextField->getFormatter->getFormat
JSpinner.NumberEditor#getModel():::Return our spinner ancestor's SpinnerNumberModel.:::return->getSpinner->getModel
JSpinner.NumberEditor#setComponentOrientation(ComponentOrientation)::: number editor set component orientation:::super->setComponentOrientation->getTextField->o->isLeftToRight->setHorizontalAlignment
JSpinner.ListEditor#getModel():::Return our spinner ancestor's SpinnerNumberModel.:::return->getSpinner->getModel
JSpinner.ListEditor.ListFormatter#valueToString(Object)::: list formatter value to string:::if->return->return->value->toString
JSpinner.ListEditor.ListFormatter#stringToValue(String)::: list formatter string to value:::return
JSpinner.ListEditor.ListFormatter#getDocumentFilter()::: list formatter get document filter:::if->new->Filter->return
JSpinner.ListEditor.ListFormatter.Filter#replace(FilterBypass, int, int, String, AttributeSet)::: filter replace:::if->fb->getDocument->getLength->next->getModel->fb->getDocument->getText->findNextMatch->value->next->toString->if->fb->remove->fb->insertString->getFormattedTextField->string->length->value->length->select->return->super->replace
JSpinner.ListEditor.ListFormatter.Filter#insertString(FilterBypass, int, String, AttributeSet)::: filter insert string:::replace
JSpinner.DisabledAction#getValue(String)::: disabled action get value:::return
JSpinner.DisabledAction#putValue(String, Object)::: disabled action put value:::
JSpinner.DisabledAction#setEnabled(boolean)::: disabled action set enabled:::
JSpinner.DisabledAction#isEnabled()::: disabled action is enabled:::return
JSpinner.DisabledAction#addPropertyChangeListener(PropertyChangeListener)::: disabled action add property change listener:::
JSpinner.DisabledAction#removePropertyChangeListener(PropertyChangeListener)::: disabled action remove property change listener:::
JSpinner.DisabledAction#actionPerformed(ActionEvent)::: disabled action action performed:::
JSpinner#getAccessibleContext():::Gets the AccessibleContext for the JSpinner:::if->new->AccessibleJSpinner->return
JSpinner.AccessibleJSpinner#stateChanged(ChangeEvent):::Invoked when the target of the listener has changed its state.:::if->throw->new->NullPointerException->newModelValue->model->getValue->firePropertyChange->firePropertyChange
JSpinner.AccessibleJSpinner#getAccessibleRole():::Gets the role of this object:::return
JSpinner.AccessibleJSpinner#getAccessibleChildrenCount():::Returns the number of accessible children of the object.:::if->editor->getAccessibleContext->return->return
JSpinner.AccessibleJSpinner#getAccessibleChild(int):::Returns the specified Accessible child of the object:::if->return->if->editor->getAccessibleContext->return->return
JSpinner.AccessibleJSpinner#getAccessibleAction():::Gets the AccessibleAction associated with this object that supports one or more actions.:::return
JSpinner.AccessibleJSpinner#getAccessibleText():::Gets the AccessibleText associated with this object presenting text on the display.:::return
JSpinner.AccessibleJSpinner#getEditorAccessibleContext()::: accessible spinner get editor accessible context:::if->textField->getTextField->if->return->textField->getAccessibleContext->else->if->return->editor->getAccessibleContext->return
JSpinner.AccessibleJSpinner#getEditorAccessibleText()::: accessible spinner get editor accessible text:::ac->getEditorAccessibleContext->if->return->ac->getAccessibleText->return
JSpinner.AccessibleJSpinner#getEditorAccessibleEditableText()::: accessible spinner get editor accessible editable text:::at->getEditorAccessibleText->if->return->return
JSpinner.AccessibleJSpinner#getAccessibleValue():::Gets the AccessibleValue associated with this object.:::return
JSpinner.AccessibleJSpinner#getCurrentAccessibleValue():::Get the value of this object as a Number:::o->model->getValue->if->return->return
JSpinner.AccessibleJSpinner#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::try->model->setValue->return->catch->finally->return
JSpinner.AccessibleJSpinner#getMinimumAccessibleValue():::Get the minimum value of this object as a Number.:::if->numberModel->o->numberModel->getMinimum->if->return->return
JSpinner.AccessibleJSpinner#getMaximumAccessibleValue():::Get the maximum value of this object as a Number.:::if->numberModel->o->numberModel->getMaximum->if->return->return
JSpinner.AccessibleJSpinner#getAccessibleActionCount():::Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object:::return
JSpinner.AccessibleJSpinner#getAccessibleActionDescription(int):::Returns a description of the specified action of the object.:::if->return->else->if->return->return
JSpinner.AccessibleJSpinner#doAccessibleAction(int):::Performs the specified Action on the object:::if->return->o->if->getNextValue->else->getPreviousValue->try->model->setValue->return->catch->finally->return
JSpinner.AccessibleJSpinner#sameWindowAncestor(Component, Component)::: accessible spinner same window ancestor:::if->return->return->SwingUtilities->getWindowAncestor->SwingUtilities->getWindowAncestor
JSpinner.AccessibleJSpinner#getIndexAtPoint(Point):::Given a point in local coordinates, return the zero-based index of the character under that Point:::at->getEditorAccessibleText->if->sameWindowAncestor->editorPoint->SwingUtilities->convertPoint->if->return->at->getIndexAtPoint->return
JSpinner.AccessibleJSpinner#getCharacterBounds(int):::Determines the bounding box of the character at the given index into the string:::at->getEditorAccessibleText->if->editorRect->at->getCharacterBounds->if->sameWindowAncestor->return->SwingUtilities->convertRectangle->return
JSpinner.AccessibleJSpinner#getCharCount():::Returns the number of characters (valid indicies):::at->getEditorAccessibleText->if->return->at->getCharCount->return
JSpinner.AccessibleJSpinner#getCaretPosition():::Returns the zero-based offset of the caret:::at->getEditorAccessibleText->if->return->at->getCaretPosition->return
JSpinner.AccessibleJSpinner#getAtIndex(int, int):::Returns the String at a given index.:::at->getEditorAccessibleText->if->return->at->getAtIndex->return
JSpinner.AccessibleJSpinner#getAfterIndex(int, int):::Returns the String after a given index.:::at->getEditorAccessibleText->if->return->at->getAfterIndex->return
JSpinner.AccessibleJSpinner#getBeforeIndex(int, int):::Returns the String before a given index.:::at->getEditorAccessibleText->if->return->at->getBeforeIndex->return
JSpinner.AccessibleJSpinner#getCharacterAttribute(int):::Returns the AttributeSet for a given character at a given index:::at->getEditorAccessibleText->if->return->at->getCharacterAttribute->return
JSpinner.AccessibleJSpinner#getSelectionStart():::Returns the start offset within the selected text:::at->getEditorAccessibleText->if->return->at->getSelectionStart->return
JSpinner.AccessibleJSpinner#getSelectionEnd():::Returns the end offset within the selected text:::at->getEditorAccessibleText->if->return->at->getSelectionEnd->return
JSpinner.AccessibleJSpinner#getSelectedText():::Returns the portion of the text that is selected.:::at->getEditorAccessibleText->if->return->at->getSelectedText->return
JSpinner.AccessibleJSpinner#setTextContents(String):::Sets the text contents to the specified string.:::at->getEditorAccessibleEditableText->if->at->setTextContents
JSpinner.AccessibleJSpinner#insertTextAtIndex(int, String):::Inserts the specified string at the given index/:::at->getEditorAccessibleEditableText->if->at->insertTextAtIndex
JSpinner.AccessibleJSpinner#getTextRange(int, int):::Returns the text string between two indices.:::at->getEditorAccessibleEditableText->if->return->at->getTextRange->return
JSpinner.AccessibleJSpinner#delete(int, int):::Deletes the text between two indices:::at->getEditorAccessibleEditableText->if->at->delete
JSpinner.AccessibleJSpinner#cut(int, int):::Cuts the text between two indices into the system clipboard.:::at->getEditorAccessibleEditableText->if->at->cut
JSpinner.AccessibleJSpinner#paste(int):::Pastes the text from the system clipboard into the text starting at the specified index.:::at->getEditorAccessibleEditableText->if->at->paste
JSpinner.AccessibleJSpinner#replaceText(int, int, String):::Replaces the text between two indices with the specified string.:::at->getEditorAccessibleEditableText->if->at->replaceText
JSpinner.AccessibleJSpinner#selectText(int, int):::Selects the text between two indices.:::at->getEditorAccessibleEditableText->if->at->selectText
JSpinner.AccessibleJSpinner#setAttributes(int, int, AttributeSet):::Sets attributes for the text between two indices.:::at->getEditorAccessibleEditableText->if->at->setAttributes
JSplitPane#setUI(SplitPaneUI):::Sets the L&amp;F object that renders this component.:::if->super->setUI->revalidate
JSplitPane#getUI():::Returns the SplitPaneUI that is providing the current look and feel.:::return
JSplitPane#updateUI():::Notification from the UIManager that the L&amp;F has changed:::UIManager->getUI->setUI->revalidate
JSplitPane#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JSplitPane#setDividerSize(int):::Sets the size of the divider.:::oldSize->if->firePropertyChange
JSplitPane#getDividerSize():::Returns the size of the divider.:::return
JSplitPane#setLeftComponent(Component):::Sets the component to the left (or above) the divider.:::if->if->remove->else->add
JSplitPane#getLeftComponent():::Returns the component to the left (or above) the divider.:::return
JSplitPane#setTopComponent(Component):::Sets the component above, or to the left of the divider.:::setLeftComponent
JSplitPane#getTopComponent():::Returns the component above, or to the left of the divider.:::return
JSplitPane#setRightComponent(Component):::Sets the component to the right (or below) the divider.:::if->if->remove->else->add
JSplitPane#getRightComponent():::Returns the component to the right (or below) the divider.:::return
JSplitPane#setBottomComponent(Component):::Sets the component below, or to the right of the divider.:::setRightComponent
JSplitPane#getBottomComponent():::Returns the component below, or to the right of the divider.:::return
JSplitPane#setOneTouchExpandable(boolean):::Sets the value of the oneTouchExpandable property, which must be true for the JSplitPane to provide a UI widget on the divider to quickly expand/collapse the divider:::oldValue->firePropertyChange->repaint
JSplitPane#isOneTouchExpandable():::Gets the oneTouchExpandable property.:::return
JSplitPane#setLastDividerLocation(int):::Sets the last location the divider was at to newLastLocation.:::oldLocation->firePropertyChange
JSplitPane#getLastDividerLocation():::Returns the last location the divider was at.:::return
JSplitPane#setOrientation(int):::Sets the orientation, or how the splitter is divided:::if->throw->new->IllegalArgumentException->oldOrientation->firePropertyChange
JSplitPane#getOrientation():::Returns the orientation.:::return
JSplitPane#setContinuousLayout(boolean):::Sets the value of the continuousLayout property, which must be true for the child components to be continuously redisplayed and laid out during user intervention:::oldCD->firePropertyChange
JSplitPane#isContinuousLayout():::Gets the continuousLayout property.:::return
JSplitPane#setResizeWeight(double):::Specifies how to distribute extra space when the size of the split pane changes:::if->throw->new->IllegalArgumentException->oldWeight->firePropertyChange
JSplitPane#getResizeWeight():::Returns the number that determines how extra space is distributed.:::return
JSplitPane#resetToPreferredSizes():::Lays out the JSplitPane layout based on the preferred size of the children components:::ui->getUI->if->ui->resetToPreferredSizes
JSplitPane#setDividerLocation(double):::Sets the divider location as a percentage of the JSplitPane's size:::if->throw->new->IllegalArgumentException->if->getOrientation->getHeight->getDividerSize->setDividerLocation->else->getWidth->getDividerSize->setDividerLocation
JSplitPane#setDividerLocation(int):::Sets the location of the divider:::oldValue->ui->getUI->if->ui->setDividerLocation->firePropertyChange->setLastDividerLocation
JSplitPane#getDividerLocation():::Returns the last value passed to setDividerLocation:::return
JSplitPane#getMinimumDividerLocation():::Returns the minimum location of the divider from the look and feel implementation.:::ui->getUI->if->return->ui->getMinimumDividerLocation->return
JSplitPane#getMaximumDividerLocation():::Returns the maximum location of the divider from the look and feel implementation.:::ui->getUI->if->return->ui->getMaximumDividerLocation->return
JSplitPane#remove(Component):::Removes the child component, component from the pane:::if->else->if->super->remove->revalidate->repaint
JSplitPane#remove(int):::Removes the Component at the specified index:::comp->getComponent->if->else->if->super->remove->revalidate->repaint
JSplitPane#removeAll():::Removes all the child components from the split pane:::super->removeAll->revalidate->repaint
JSplitPane#isValidateRoot():::Returns true, so that calls to revalidate on any descendant of this JSplitPane will cause a request to be queued that will validate the JSplitPane and all its descendants.:::return
JSplitPane#addImpl(Component, Object, int):::Adds the specified component to this split pane:::toRemove->if->throw->new->IllegalArgumentException->if->if->getLeftComponent->else->if->getRightComponent->if->constraints->equals->constraints->equals->getLeftComponent->if->remove->else->if->constraints->equals->constraints->equals->getRightComponent->if->remove->else->if->constraints->equals->super->addImpl->revalidate->repaint
JSplitPane#paintChildren(Graphics):::Subclassed to message the UI with finishedPaintingChildren after super has been messaged, as well as painting the border.:::super->paintChildren->ui->getUI->if->tempG->g->create->ui->finishedPaintingChildren->tempG->dispose
JSplitPane#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JSplitPane#setUIProperty(String, Object)::: split pane set property:::if->if->intValue->setDividerSize->else->if->if->booleanValue->setOneTouchExpandable->else->super->setUIProperty
JSplitPane#paramString():::Returns a string representation of this JSplitPane:::orientationString->continuousLayoutString->oneTouchExpandableString->return->super->paramString
JSplitPane#getAccessibleContext():::Gets the AccessibleContext associated with this JSplitPane:::if->new->AccessibleJSplitPane->return
JSplitPane.AccessibleJSplitPane#getAccessibleStateSet():::Gets the state set of this object.:::states->super->getAccessibleStateSet->if->getOrientation->states->add->else->states->add->return
JSplitPane.AccessibleJSplitPane#getAccessibleValue():::Get the AccessibleValue associated with this object:::return
JSplitPane.AccessibleJSplitPane#getCurrentAccessibleValue():::Gets the accessible value of this object.:::return->Integer->getDividerLocation->valueOf
JSplitPane.AccessibleJSplitPane#setCurrentAccessibleValue(Number):::Sets the value of this object as a Number.:::if->return->n->intValue->setDividerLocation->return
JSplitPane.AccessibleJSplitPane#getMinimumAccessibleValue():::Gets the minimum accessible value of this object.:::return->Integer->getUI->getMinimumDividerLocation->valueOf
JSplitPane.AccessibleJSplitPane#getMaximumAccessibleValue():::Gets the maximum accessible value of this object.:::return->Integer->getUI->getMaximumDividerLocation->valueOf
JSplitPane.AccessibleJSplitPane#getAccessibleRole():::Gets the role of this object.:::return
JTabbedPane#getUI():::Returns the UI object which implements the L&amp;F for this component.:::return
JTabbedPane#setUI(TabbedPaneUI):::Sets the UI object which implements the L&amp;F for this component.:::super->setUI->for->i->getTabCount
JTabbedPane#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JTabbedPane#getUIClassID():::Returns the name of the UI class that implements the L&amp;F for this component.:::return
JTabbedPane.ModelListener#stateChanged(ChangeEvent)::: model listener state changed:::fireStateChanged
JTabbedPane#createChangeListener():::Subclasses that want to handle ChangeEvents differently can override this to return a subclass of ModelListener or another ChangeListener implementation.:::return->new->ModelListener
JTabbedPane#addChangeListener(ChangeListener):::Adds a ChangeListener to this tabbedpane.:::listenerList->add
JTabbedPane#removeChangeListener(ChangeListener):::Removes a ChangeListener from this tabbedpane.:::listenerList->remove
JTabbedPane#getChangeListeners():::Returns an array of all the ChangeListeners added to this JTabbedPane with addChangeListener.:::return->listenerList->getListeners
JTabbedPane#fireStateChanged():::Sends a ChangeEvent, with this JTabbedPane as the source, to each registered listener:::selIndex->getSelectedIndex->if->if->visComp->isVisible->visComp->setVisible->else->newComp->getComponentAt->if->shouldChangeFocus->if->SwingUtilities->findFocusOwner->if->visComp->isVisible->visComp->setVisible->if->newComp->isVisible->newComp->setVisible->if->SwingUtilities2->tabbedPaneChangeFocusTo->listeners->listenerList->getListenerList->for->i
JTabbedPane#getModel():::Returns the model associated with this tabbedpane.:::return
JTabbedPane#setModel(SingleSelectionModel):::Sets the model to be used with this tabbedpane.:::oldModel->getModel->if->oldModel->removeChangeListener->if->createChangeListener->model->addChangeListener->firePropertyChange->repaint
JTabbedPane#getTabPlacement():::Returns the placement of the tabs for this tabbedpane.:::return
JTabbedPane#setTabPlacement(int):::Sets the tab placement for this tabbedpane:::checkTabPlacement->if->oldValue->firePropertyChange->revalidate->repaint
JTabbedPane#checkTabPlacement(int)::: tabbed pane check tab placement:::if->throw->new->IllegalArgumentException
JTabbedPane#getTabLayoutPolicy():::Returns the policy used by the tabbedpane to layout the tabs when all the tabs will not fit within a single run.:::return
JTabbedPane#setTabLayoutPolicy(int):::Sets the policy which the tabbedpane will use in laying out the tabs when all the tabs will not fit within a single run:::checkTabLayoutPolicy->if->oldValue->firePropertyChange->revalidate->repaint
JTabbedPane#checkTabLayoutPolicy(int)::: tabbed pane check tab layout policy:::if->throw->new->IllegalArgumentException
JTabbedPane#getSelectedIndex():::Returns the currently selected index for this tabbedpane:::return->model->getSelectedIndex
JTabbedPane#setSelectedIndex(int):::Sets the selected index for this tabbedpane:::if->checkIndex->setSelectedIndexImpl
JTabbedPane#setSelectedIndexImpl(int, boolean)::: tabbed pane set selected index impl:::oldIndex->model->getSelectedIndex->oldPage->newPage->oldName->if->if->accessibleContext->getAccessibleName->if->pages->get->if->pages->get->model->setSelectedIndex->if->changeAccessibleSelection
JTabbedPane#changeAccessibleSelection(Page, String, Page)::: tabbed pane change accessible selection:::if->return->if->oldPage->firePropertyChange->if->newPage->firePropertyChange->accessibleContext->accessibleContext->getAccessibleName->firePropertyChange
JTabbedPane#getSelectedComponent():::Returns the currently selected component for this tabbedpane:::index->getSelectedIndex->if->return->return->getComponentAt
JTabbedPane#setSelectedComponent(Component):::Sets the selected component for this tabbedpane:::index->indexOfComponent->if->setSelectedIndex->else->throw->new->IllegalArgumentException
JTabbedPane#insertTab(String, Icon, Component, String, int):::Inserts a new tab for the given component, at the given index, represented by the given title and/or icon, either of which may be null.:::newIndex->removeIndex->indexOfComponent->if->removeTabAt->if->selectedIndex->getSelectedIndex->pages->new->Page->add->if->addImpl->component->setVisible->else->firePropertyChange->if->pages->size->setSelectedIndex->if->setSelectedIndexImpl->if->ToolTipManager->sharedInstance->registerComponent->if->accessibleContext->firePropertyChange->revalidate->repaint
JTabbedPane#addTab(String, Icon, Component, String):::Adds a component and tip represented by a title and/or icon, either of which can be null:::pages->size->insertTab
JTabbedPane#addTab(String, Icon, Component):::Adds a component represented by a title and/or icon, either of which can be null:::pages->size->insertTab
JTabbedPane#addTab(String, Component):::Adds a component represented by a title and no icon:::pages->size->insertTab
JTabbedPane#add(Component):::Adds a component with a tab title defaulting to the name of the component which is the result of calling component.getName:::if->component->getName->addTab->else->super->add->return
JTabbedPane#add(String, Component):::Adds a component with the specified tab title:::if->addTab->else->super->add->return
JTabbedPane#add(Component, int):::Adds a component at the specified tab index with a tab title defaulting to the name of the component:::if->component->getName->getTabCount->insertTab->else->super->add->return
JTabbedPane#add(Component, Object):::Adds a component to the tabbed pane:::if->if->addTab->else->if->addTab->else->add->else->super->add
JTabbedPane#add(Component, Object, int):::Adds a component at the specified tab index:::if->icon->title->getTabCount->insertTab->else->super->add
JTabbedPane#removeTabAt(int):::Removes the tab at index:::checkIndex->component->getComponentAt->shouldChangeFocus->selected->getSelectedIndex->oldName->if->SwingUtilities->findFocusOwner->if->if->pages->get->firePropertyChange->accessibleContext->getAccessibleName->accessibleContext->firePropertyChange->setTabComponentAt->pages->remove->Integer->valueOf->putClientProperty->if->setSelectedIndexImpl->else->if->getTabCount->setSelectedIndexImpl->newSelected->pages->get->changeAccessibleSelection->else->if->fireStateChanged->pages->get->changeAccessibleSelection->if->components->getComponents->for->i->if->SwingUtilities2->getSelectedComponent->tabbedPaneChangeFocusTo->revalidate->repaint
JTabbedPane#remove(Component):::Removes the specified Component from the JTabbedPane:::index->indexOfComponent->if->removeTabAt->else->children->getComponents->for->i
JTabbedPane#remove(int):::Removes the tab and component which corresponds to the specified index.:::removeTabAt
JTabbedPane#removeAll():::Removes all the tabs and their corresponding components from the tabbedpane.:::setSelectedIndexImpl->tabCount->getTabCount->while->removeTabAt
JTabbedPane#getTabCount():::Returns the number of tabs in this tabbedpane.:::return->pages->size
JTabbedPane#getTabRunCount():::Returns the number of tab runs currently used to display the tabs.:::if->return->getTabRunCount->return
JTabbedPane#getTitleAt(int):::Returns the tab title at index.:::return->pages->get
JTabbedPane#getIconAt(int):::Returns the tab icon at index.:::return->pages->get
JTabbedPane#getDisabledIconAt(int):::Returns the tab disabled icon at index:::page->pages->get->if->UIManager->getLookAndFeel->getDisabledIcon->return
JTabbedPane#getToolTipTextAt(int):::Returns the tab tooltip text at index.:::return->pages->get
JTabbedPane#getBackgroundAt(int):::Returns the tab background color at index.:::return->pages->get->getBackground
JTabbedPane#getForegroundAt(int):::Returns the tab foreground color at index.:::return->pages->get->getForeground
JTabbedPane#isEnabledAt(int):::Returns whether or not the tab at index is currently enabled.:::return->pages->get->isEnabled
JTabbedPane#getComponentAt(int):::Returns the component at index.:::return->pages->get
JTabbedPane#getMnemonicAt(int):::Returns the keyboard mnemonic for accessing the specified tab:::checkIndex->page->pages->get->return->page->getMnemonic
JTabbedPane#getDisplayedMnemonicIndexAt(int):::Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.:::checkIndex->page->pages->get->return->page->getDisplayedMnemonicIndex
JTabbedPane#getBoundsAt(int):::Returns the tab bounds at index:::checkIndex->if->return->getTabBounds->return
JTabbedPane#setTitleAt(int, String):::Sets the title at index to title which can be null:::page->pages->get->oldTitle->if->firePropertyChange->page->updateDisplayedMnemonicIndex->if->accessibleContext->firePropertyChange->if->title->equals->revalidate->repaint
JTabbedPane#setIconAt(int, Icon):::Sets the icon at index to icon which can be null:::page->pages->get->oldIcon->if->if->if->accessibleContext->firePropertyChange->revalidate->repaint
JTabbedPane#setDisabledIconAt(int, Icon):::Sets the disabled icon at index to icon which can be null:::oldIcon->pages->get->pages->get->if->isEnabledAt->revalidate->repaint
JTabbedPane#setToolTipTextAt(int, String):::Sets the tooltip text at index to toolTipText which can be null:::oldToolTipText->pages->get->pages->get->if->accessibleContext->firePropertyChange->if->ToolTipManager->sharedInstance->registerComponent
JTabbedPane#setBackgroundAt(int, Color):::Sets the background color at index to background which can be null, in which case the tab's background color will default to the background color of the tabbedpane:::oldBg->pages->get->pages->get->setBackground->if->background->equals->tabBounds->getBoundsAt->if->repaint
JTabbedPane#setForegroundAt(int, Color):::Sets the foreground color at index to foreground which can be null, in which case the tab's foreground color will default to the foreground color of this tabbedpane:::oldFg->pages->get->pages->get->setForeground->if->foreground->equals->tabBounds->getBoundsAt->if->repaint
JTabbedPane#setEnabledAt(int, boolean):::Sets whether or not the tab at index is enabled:::oldEnabled->pages->get->isEnabled->pages->get->setEnabled->if->revalidate->repaint
JTabbedPane#setComponentAt(int, Component):::Sets the component at index to component:::page->pages->get->if->shouldChangeFocus->if->SwingUtilities->findFocusOwner->synchronized->getTreeLock->count->getComponentCount->children->getComponents->for->i->selectedPage->getSelectedIndex->if->if->component->setVisible->addImpl->if->SwingUtilities2->tabbedPaneChangeFocusTo->else->repaint->revalidate
JTabbedPane#setDisplayedMnemonicIndexAt(int, int):::Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic:::checkIndex->page->pages->get->page->setDisplayedMnemonicIndex
JTabbedPane#setMnemonicAt(int, int):::Sets the keyboard mnemonic for accessing the specified tab:::checkIndex->page->pages->get->page->setMnemonic->firePropertyChange
JTabbedPane#indexOfTab(String):::Returns the first tab index with a given title,  or -1 if no tab has this title.:::for->i->getTabCount->return
JTabbedPane#indexOfTab(Icon):::Returns the first tab index with a given icon, or -1 if no tab has this icon.:::for->i->getTabCount->return
JTabbedPane#indexOfComponent(Component):::Returns the index of the tab for the specified component:::for->i->getTabCount->return
JTabbedPane#indexAtLocation(int, int):::Returns the tab index corresponding to the tab whose bounds intersect the specified location:::if->return->tabForCoordinate->return
JTabbedPane#getToolTipText(MouseEvent):::Returns the tooltip text for the component determined by the mouse event location.:::if->index->event->getX->event->getY->tabForCoordinate->if->return->pages->get->return->super->getToolTipText
JTabbedPane#checkIndex(int)::: tabbed pane check index:::if->pages->size->throw->pages->size->new->IndexOutOfBoundsException
JTabbedPane#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JTabbedPane#compWriteObjectNotify()::: tabbed pane comp write object notify:::super->compWriteObjectNotify->if->getToolTipText->ToolTipManager->sharedInstance->unregisterComponent
JTabbedPane#readObject(ObjectInputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::f->s->readFields->newTabPlacement->f->get->checkTabPlacement->newTabLayoutPolicy->f->get->checkTabLayoutPolicy->f->get->f->get->f->get->f->get->if->getUIClassID->equals->ui->installUI->if->getToolTipText->ToolTipManager->sharedInstance->registerComponent
JTabbedPane#paramString():::Returns a string representation of this JTabbedPane:::tabPlacementString->if->else->if->else->if->else->if->else->haveRegisteredString->return->super->paramString
JTabbedPane#getAccessibleContext():::Gets the AccessibleContext associated with this JTabbedPane:::if->new->AccessibleJTabbedPane->count->getTabCount->for->i->return
JTabbedPane.AccessibleJTabbedPane#getAccessibleName():::Returns the accessible name of this object, or null if there is no accessible name.:::if->return->cp->getClientProperty->if->return->index->getSelectedIndex->if->return->pages->get->getAccessibleName->return->super->getAccessibleName
JTabbedPane.AccessibleJTabbedPane#stateChanged(ChangeEvent)::: accessible tabbed pane state changed:::o->e->getSource->firePropertyChange
JTabbedPane.AccessibleJTabbedPane#getAccessibleRole():::Get the role of this object.:::return
JTabbedPane.AccessibleJTabbedPane#getAccessibleChildrenCount():::Returns the number of accessible children in the object.:::return->getTabCount
JTabbedPane.AccessibleJTabbedPane#getAccessibleChild(int):::Return the specified Accessible child of the object.:::if->getTabCount->return->return->pages->get
JTabbedPane.AccessibleJTabbedPane#getAccessibleSelection():::Gets the AccessibleSelection associated with this object:::return
JTabbedPane.AccessibleJTabbedPane#getAccessibleAt(Point):::Returns the Accessible child contained at the local coordinate Point, if one exists:::tab->tabForCoordinate->if->getSelectedIndex->return->getAccessibleChild
JTabbedPane.AccessibleJTabbedPane#getAccessibleSelectionCount()::: accessible tabbed pane get accessible selection count:::return
JTabbedPane.AccessibleJTabbedPane#getAccessibleSelection(int)::: accessible tabbed pane get accessible selection:::index->getSelectedIndex->if->return->return->pages->get
JTabbedPane.AccessibleJTabbedPane#isAccessibleChildSelected(int)::: accessible tabbed pane is accessible child selected:::return->getSelectedIndex
JTabbedPane.AccessibleJTabbedPane#addAccessibleSelection(int)::: accessible tabbed pane add accessible selection:::setSelectedIndex
JTabbedPane.AccessibleJTabbedPane#removeAccessibleSelection(int)::: accessible tabbed pane remove accessible selection:::
JTabbedPane.AccessibleJTabbedPane#clearAccessibleSelection()::: accessible tabbed pane clear accessible selection:::
JTabbedPane.AccessibleJTabbedPane#selectAllAccessibleSelection()::: accessible tabbed pane select all accessible selection:::
JTabbedPane.Page#initAccessibleContext()::: page init accessible context:::if->ac->component->getAccessibleContext->if->ac->setAccessibleParent
JTabbedPane.Page#setMnemonic(int)::: page set mnemonic:::updateDisplayedMnemonicIndex
JTabbedPane.Page#getMnemonic()::: page get mnemonic:::return
JTabbedPane.Page#setDisplayedMnemonicIndex(int)::: page set displayed mnemonic index:::if->t->getTitle->if->t->length->throw->new->IllegalArgumentException->JTabbedPane.this->firePropertyChange
JTabbedPane.Page#getDisplayedMnemonicIndex()::: page get displayed mnemonic index:::return
JTabbedPane.Page#updateDisplayedMnemonicIndex()::: page update displayed mnemonic index:::SwingUtilities->getTitle->findDisplayedMnemonicIndex->setDisplayedMnemonicIndex
JTabbedPane.Page#getAccessibleContext()::: page get accessible context:::return
JTabbedPane.Page#getAccessibleName()::: page get accessible name:::if->return->else->return->getTitle
JTabbedPane.Page#getAccessibleDescription()::: page get accessible description:::if->return->else->if->return->return
JTabbedPane.Page#getAccessibleRole()::: page get accessible role:::return
JTabbedPane.Page#getAccessibleStateSet()::: page get accessible state set:::states->parent->getAccessibleContext->getAccessibleStateSet->states->add->if->getPageIndex->parent->getSelectedIndex->states->add->return
JTabbedPane.Page#getAccessibleIndexInParent()::: page get accessible index in parent:::return->getPageIndex
JTabbedPane.Page#getAccessibleChildrenCount()::: page get accessible children count:::if->return->else->return
JTabbedPane.Page#getAccessibleChild(int)::: page get accessible child:::if->return->else->return
JTabbedPane.Page#getLocale()::: page get locale:::return->parent->getLocale
JTabbedPane.Page#getAccessibleComponent()::: page get accessible component:::return
JTabbedPane.Page#getBackground()::: page get background:::return->parent->getBackground
JTabbedPane.Page#setBackground(Color)::: page set background:::
JTabbedPane.Page#getForeground()::: page get foreground:::return->parent->getForeground
JTabbedPane.Page#setForeground(Color)::: page set foreground:::
JTabbedPane.Page#getCursor()::: page get cursor:::return->parent->getCursor
JTabbedPane.Page#setCursor(Cursor)::: page set cursor:::parent->setCursor
JTabbedPane.Page#getFont()::: page get font:::return->parent->getFont
JTabbedPane.Page#setFont(Font)::: page set font:::parent->setFont
JTabbedPane.Page#getFontMetrics(Font)::: page get font metrics:::return->parent->getFontMetrics
JTabbedPane.Page#isEnabled()::: page is enabled:::return
JTabbedPane.Page#setEnabled(boolean)::: page set enabled:::
JTabbedPane.Page#isVisible()::: page is visible:::return->parent->isVisible
JTabbedPane.Page#setVisible(boolean)::: page set visible:::parent->setVisible
JTabbedPane.Page#isShowing()::: page is showing:::return->parent->isShowing
JTabbedPane.Page#contains(Point)::: page contains:::r->getBounds->return->r->contains
JTabbedPane.Page#getLocationOnScreen()::: page get location on screen:::parentLocation->parent->getLocationOnScreen->componentLocation->getLocation->componentLocation->translate->return
JTabbedPane.Page#getLocation()::: page get location:::r->getBounds->return->new->Point
JTabbedPane.Page#setLocation(Point)::: page set location:::
JTabbedPane.Page#getBounds()::: page get bounds:::return->parent->getUI->getPageIndex->getTabBounds
JTabbedPane.Page#setBounds(Rectangle)::: page set bounds:::
JTabbedPane.Page#getSize()::: page get size:::r->getBounds->return->new->Dimension
JTabbedPane.Page#setSize(Dimension)::: page set size:::
JTabbedPane.Page#getAccessibleAt(Point)::: page get accessible at:::if->return->else->return
JTabbedPane.Page#isFocusTraversable()::: page is focus traversable:::return
JTabbedPane.Page#requestFocus()::: page request focus:::
JTabbedPane.Page#addFocusListener(FocusListener)::: page add focus listener:::
JTabbedPane.Page#removeFocusListener(FocusListener)::: page remove focus listener:::
JTabbedPane.Page#getAccessibleIcon():::Returns an AccessibleIcon:::accessibleIcon->if->ac->getAccessibleContext->else->if->ac->getAccessibleContext->if->returnIcons->new->AccessibleIconArr->return->else->return
JTabbedPane.Page#getTitle()::: page get title:::return->getPageIndex->getTitleAt
JTabbedPane.Page#getPageIndex()::: page get page index:::index->if->parent->indexOfComponent->else->parent->indexOfTabComponent->return
JTabbedPane#setTabComponentAt(int, Component):::Sets the component that is responsible for rendering the title for the specified tab:::if->indexOfComponent->throw->new->IllegalArgumentException->oldValue->getTabComponentAt->if->tabComponentIndex->indexOfTabComponent->if->setTabComponentAt->pages->get->firePropertyChange
JTabbedPane#getTabComponentAt(int):::Returns the tab component at index.:::return->pages->get
JTabbedPane#indexOfTabComponent(Component):::Returns the index of the tab for the specified tab component:::for->i->getTabCount->return
JTable.DropLocation#getRow():::Returns the row index where a dropped item should be placed in the table:::return
JTable.DropLocation#getColumn():::Returns the column index where a dropped item should be placed in the table:::return
JTable.DropLocation#isInsertRow():::Returns whether or not this location represents an insert of a row.:::return
JTable.DropLocation#isInsertColumn():::Returns whether or not this location represents an insert of a column.:::return
JTable.DropLocation#toString():::Returns a string representation of this drop location:::return->getClass->getName->getDropPoint
JTable#addNotify():::Calls the configureEnclosingScrollPane method.:::super->addNotify->configureEnclosingScrollPane
JTable#configureEnclosingScrollPane():::If this JTable is the viewportView of an enclosing JScrollPane (the usual situation), configure this ScrollPane by, amongst other things, installing the table's tableHeader as the columnHeaderView of the scroll pane:::parent->SwingUtilities->getUnwrappedParent->if->port->gp->port->getParent->if->scrollPane->viewport->scrollPane->getViewport->if->SwingUtilities->getUnwrappedView->return->scrollPane->getTableHeader->setColumnHeaderView->configureEnclosingScrollPaneUI
JTable#configureEnclosingScrollPaneUI():::This is a sub-part of configureEnclosingScrollPane() that configures anything on the scrollpane that may change when the look and feel changes:::parent->SwingUtilities->getUnwrappedParent->if->port->gp->port->getParent->if->scrollPane->viewport->scrollPane->getViewport->if->SwingUtilities->getUnwrappedView->return->border->scrollPane->getBorder->if->scrollPaneBorder->UIManager->getBorder->if->scrollPane->setBorder->corner->scrollPane->getCorner->if->try->UIManager->get->catch->finally->scrollPane->setCorner
JTable#removeNotify():::Calls the unconfigureEnclosingScrollPane method.:::KeyboardFocusManager->getCurrentKeyboardFocusManager->removePropertyChangeListener->unconfigureEnclosingScrollPane->super->removeNotify
JTable#unconfigureEnclosingScrollPane():::Reverses the effect of configureEnclosingScrollPane by replacing the columnHeaderView of the enclosing scroll pane with null:::parent->SwingUtilities->getUnwrappedParent->if->port->gp->port->getParent->if->scrollPane->viewport->scrollPane->getViewport->if->SwingUtilities->getUnwrappedView->return->scrollPane->setColumnHeaderView->corner->scrollPane->getCorner->if->scrollPane->setCorner
JTable#setUIProperty(String, Object)::: table set property:::if->if->intValue->setRowHeight->return->super->setUIProperty
JTable#createScrollPaneForTable(JTable):::Equivalent to new JScrollPane(aTable).:::return->new->JScrollPane
JTable#setTableHeader(JTableHeader):::Sets the tableHeader working with this JTable to newHeader:::if->old->if->old->setTable->if->tableHeader->setTable->firePropertyChange
JTable#getTableHeader():::Returns the tableHeader used by this JTable.:::return
JTable#setRowHeight(int):::Sets the height, in pixels, of all cells to rowHeight, revalidates, and repaints:::if->throw->new->IllegalArgumentException->old->if->resizeAndRepaint->firePropertyChange
JTable#getRowHeight():::Returns the height of a table row, in pixels.:::return
JTable#getRowModel()::: table get row model:::if->getRowCount->getRowHeight->new->SizeSequence->return
JTable#setRowHeight(int, int):::Sets the height for row to rowHeight, revalidates, and repaints:::if->throw->new->IllegalArgumentException->getRowModel->setSize->if->sortManager->setViewRowHeight->resizeAndRepaint
JTable#getRowHeight(int):::Returns the height, in pixels, of the cells in row.:::return->getRowHeight->rowModel->getSize
JTable#setRowMargin(int):::Sets the amount of empty space between cells in adjacent rows.:::old->resizeAndRepaint->firePropertyChange
JTable#getRowMargin():::Gets the amount of empty space, in pixels, between cells:::return
JTable#setIntercellSpacing(Dimension):::Sets the rowMargin and the columnMargin -- the height and width of the space between cells -- to intercellSpacing.:::setRowMargin->getColumnModel->setColumnMargin->resizeAndRepaint
JTable#getIntercellSpacing():::Returns the horizontal and vertical space between cells:::return->getColumnModel->getColumnMargin->new->Dimension
JTable#setGridColor(Color):::Sets the color used to draw grid lines to gridColor and redisplays:::if->throw->new->IllegalArgumentException->old->firePropertyChange->repaint
JTable#getGridColor():::Returns the color used to draw grid lines:::return
JTable#setShowGrid(boolean)::: Sets whether the table draws grid lines around cells:::setShowHorizontalLines->setShowVerticalLines->repaint
JTable#setShowHorizontalLines(boolean)::: Sets whether the table draws horizontal lines between cells:::old->firePropertyChange->repaint
JTable#setShowVerticalLines(boolean)::: Sets whether the table draws vertical lines between cells:::old->firePropertyChange->repaint
JTable#getShowHorizontalLines():::Returns true if the table draws horizontal lines between cells, false if it doesn't:::return
JTable#getShowVerticalLines():::Returns true if the table draws vertical lines between cells, false if it doesn't:::return
JTable#setAutoResizeMode(int):::Sets the table's auto resize mode when the table is resized:::if->isValidAutoResizeMode->old->resizeAndRepaint->if->tableHeader->resizeAndRepaint->firePropertyChange
JTable#isValidAutoResizeMode(int)::: table is valid auto resize mode:::return
JTable#getAutoResizeMode():::Returns the auto resize mode of the table:::return
JTable#setAutoCreateColumnsFromModel(boolean):::Sets this table's autoCreateColumnsFromModel flag:::if->old->if->createDefaultColumnsFromModel->firePropertyChange
JTable#getAutoCreateColumnsFromModel():::Determines whether the table will create default columns from the model:::return
JTable#createDefaultColumnsFromModel():::Creates default columns for the table from the data model using the getColumnCount method defined in the TableModel interface:::m->getModel->if->cm->getColumnModel->while->cm->getColumnCount->cm->cm->getColumn->removeColumn->for->i->m->getColumnCount
JTable#setDefaultRenderer(Class, TableCellRenderer):::Sets a default cell renderer to be used if no renderer has been set in a TableColumn:::if->defaultRenderersByColumnClass->put->else->defaultRenderersByColumnClass->remove
JTable#getDefaultRenderer(Class):::Returns the cell renderer to be used when no renderer has been set in a TableColumn:::if->return->else->renderer->defaultRenderersByColumnClass->get->if->return->else->c->columnClass->getSuperclass->if->return->getDefaultRenderer
JTable#setDefaultEditor(Class, TableCellEditor):::Sets a default cell editor to be used if no editor has been set in a TableColumn:::if->defaultEditorsByColumnClass->put->else->defaultEditorsByColumnClass->remove
JTable#getDefaultEditor(Class):::Returns the editor to be used when no editor has been set in a TableColumn:::if->return->else->editor->defaultEditorsByColumnClass->get->if->return->else->return->columnClass->getSuperclass->getDefaultEditor
JTable#setDragEnabled(boolean):::Turns on or off automatic drag handling:::checkDragEnabled
JTable#checkDragEnabled(boolean)::: table check drag enabled:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException
JTable#getDragEnabled():::Returns whether or not automatic drag handling is enabled.:::return
JTable#setDropMode(DropMode):::Sets the drop mode for this component:::checkDropMode
JTable#checkDropMode(DropMode)::: table check drop mode:::if->switch->return->throw->new->IllegalArgumentException
JTable#getDropMode():::Returns the drop mode for this component.:::return
JTable#dropLocationForPoint(Point):::Calculates a drop location in this component, representing where a drop at the given point should insert data.:::location->row->rowAtPoint->col->columnAtPoint->outside->getClientProperty->SwingUtilities2->pointOutsidePrefSize->rect->getCellRect->xSection->ySection->between->ltr->getComponentOrientation->isLeftToRight->switch->if->new->DropLocation->else->new->DropLocation->break->if->new->DropLocation->break->SwingUtilities2->liesInHorizontal->if->if->getRowCount->new->DropLocation->else->if->getRowCount->new->DropLocation->else->getRowCount->new->DropLocation->else->if->SwingUtilities2->liesInVertical->if->else->if->new->DropLocation->else->if->SwingUtilities2->liesInVertical->new->DropLocation->break->if->new->DropLocation->break->if->getRowCount->new->DropLocation->break->if->SwingUtilities2->liesInVertical->new->DropLocation->break->if->new->DropLocation->break->if->getRowCount->new->DropLocation->break->SwingUtilities2->liesInVertical->if->else->if->new->DropLocation->break->if->new->DropLocation->break->if->getColumnCount->new->DropLocation->break->if->SwingUtilities2->liesInHorizontal->new->DropLocation->break->if->new->DropLocation->break->if->getColumnCount->new->DropLocation->break->SwingUtilities2->liesInHorizontal->if->else->if->new->DropLocation->break->if->new->DropLocation->break->SwingUtilities2->liesInHorizontal->if->if->getRowCount->new->DropLocation->else->if->getRowCount->new->DropLocation->else->getRowCount->new->DropLocation->break->SwingUtilities2->liesInVertical->if->else->if->new->DropLocation->break->return
JTable#setDropLocation(TransferHandler.DropLocation, Object, boolean):::Called to set or clear the drop location during a DnD operation:::retVal->tableLocation->if->if->if->clearSelection->rows->cols->anchleads->foreach->addRowSelectionInterval->foreach->addColumnSelectionInterval->SwingUtilities2->getSelectionModel->setLeadAnchorWithoutSelection->SwingUtilities2->getColumnModel->getSelectionModel->setLeadAnchorWithoutSelection->else->if->new->intArrs->getSelectedRows->getSelectedColumns->getSelectionModel->getAnchorSelectionIndex->getAdjustedIndex->getSelectionModel->getLeadSelectionIndex->getAdjustedIndex->getColumnModel->getSelectionModel->getAnchorSelectionIndex->getAdjustedIndex->getColumnModel->getSelectionModel->getLeadSelectionIndex->getAdjustedIndex->else->if->tableLocation->getRow->clearSelectionAndLeadAnchor->else->tableLocation->getRow->tableLocation->getRow->setRowSelectionInterval->tableLocation->getColumn->tableLocation->getColumn->setColumnSelectionInterval->old->firePropertyChange->return
JTable#getDropLocation():::Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown:::return
JTable#setAutoCreateRowSorter(boolean):::Specifies whether a RowSorter should be created for the table whenever its model changes:::oldValue->if->getModel->new->TableRowSorter<TableModel>->setRowSorter->firePropertyChange
JTable#getAutoCreateRowSorter():::Returns true if whenever the model changes, a new RowSorter should be created and installed as the table's sorter; otherwise, returns false.:::return
JTable#setUpdateSelectionOnSort(boolean):::Specifies whether the selection should be updated after sorting:::if->firePropertyChange
JTable#getUpdateSelectionOnSort():::Returns true if the selection should be updated after sorting.:::return
JTable#setRowSorter(RowSorter):::Sets the RowSorter:::oldRowSorter->if->sortManager->dispose->clearSelectionAndLeadAnchor->if->new->SortManager->resizeAndRepaint->firePropertyChange->firePropertyChange
JTable#getRowSorter():::Returns the object responsible for sorting.:::return
JTable#setSelectionMode(int):::Sets the table's selection mode to allow only single selections, a single contiguous interval, or multiple intervals:::clearSelection->getSelectionModel->setSelectionMode->getColumnModel->getSelectionModel->setSelectionMode
JTable#setRowSelectionAllowed(boolean):::Sets whether the rows in this model can be selected.:::old->if->repaint->firePropertyChange
JTable#getRowSelectionAllowed():::Returns true if rows can be selected.:::return
JTable#setColumnSelectionAllowed(boolean):::Sets whether the columns in this model can be selected.:::old->columnModel->getColumnSelectionAllowed->columnModel->setColumnSelectionAllowed->if->repaint->firePropertyChange
JTable#getColumnSelectionAllowed():::Returns true if columns can be selected.:::return->columnModel->getColumnSelectionAllowed
JTable#setCellSelectionEnabled(boolean):::Sets whether this table allows both a column selection and a row selection to exist simultaneously:::setRowSelectionAllowed->setColumnSelectionAllowed->old->firePropertyChange
JTable#getCellSelectionEnabled():::Returns true if both row and column selection models are enabled:::return->getRowSelectionAllowed->getColumnSelectionAllowed
JTable#selectAll()::: Selects all rows, columns, and cells in the table.:::if->isEditing->removeEditor->if->getRowCount->getColumnCount->oldLead->oldAnchor->selModel->selModel->setValueIsAdjusting->selModel->getLeadSelectionIndex->getAdjustedIndex->selModel->getAnchorSelectionIndex->getAdjustedIndex->getRowCount->setRowSelectionInterval->SwingUtilities2->setLeadAnchorWithoutSelection->selModel->setValueIsAdjusting->columnModel->getSelectionModel->selModel->setValueIsAdjusting->selModel->getLeadSelectionIndex->getAdjustedIndex->selModel->getAnchorSelectionIndex->getAdjustedIndex->getColumnCount->setColumnSelectionInterval->SwingUtilities2->setLeadAnchorWithoutSelection->selModel->setValueIsAdjusting
JTable#clearSelection():::Deselects all selected columns and rows.:::selectionModel->clearSelection->columnModel->getSelectionModel->clearSelection
JTable#clearSelectionAndLeadAnchor()::: table clear selection and lead anchor:::selectionModel->setValueIsAdjusting->columnModel->getSelectionModel->setValueIsAdjusting->clearSelection->selectionModel->setAnchorSelectionIndex->selectionModel->setLeadSelectionIndex->columnModel->getSelectionModel->setAnchorSelectionIndex->columnModel->getSelectionModel->setLeadSelectionIndex->selectionModel->setValueIsAdjusting->columnModel->getSelectionModel->setValueIsAdjusting
JTable#getAdjustedIndex(int, boolean)::: table get adjusted index:::compare->getRowCount->getColumnCount->return
JTable#boundRow(int)::: table bound row:::if->getRowCount->throw->new->IllegalArgumentException->return
JTable#boundColumn(int)::: table bound column:::if->getColumnCount->throw->new->IllegalArgumentException->return
JTable#setRowSelectionInterval(int, int):::Selects the rows from index0 to index1, inclusive.:::selectionModel->boundRow->boundRow->setSelectionInterval
JTable#setColumnSelectionInterval(int, int):::Selects the columns from index0 to index1, inclusive.:::columnModel->getSelectionModel->boundColumn->boundColumn->setSelectionInterval
JTable#addRowSelectionInterval(int, int):::Adds the rows from index0 to index1, inclusive, to the current selection.:::selectionModel->boundRow->boundRow->addSelectionInterval
JTable#addColumnSelectionInterval(int, int):::Adds the columns from index0 to index1, inclusive, to the current selection.:::columnModel->getSelectionModel->boundColumn->boundColumn->addSelectionInterval
JTable#removeRowSelectionInterval(int, int):::Deselects the rows from index0 to index1, inclusive.:::selectionModel->boundRow->boundRow->removeSelectionInterval
JTable#removeColumnSelectionInterval(int, int):::Deselects the columns from index0 to index1, inclusive.:::columnModel->getSelectionModel->boundColumn->boundColumn->removeSelectionInterval
JTable#getSelectedRow():::Returns the index of the first selected row, -1 if no row is selected.:::return->selectionModel->getMinSelectionIndex
JTable#getSelectedColumn():::Returns the index of the first selected column, -1 if no column is selected.:::return->columnModel->getSelectionModel->getMinSelectionIndex
JTable#getSelectedRows():::Returns the indices of all selected rows.:::return->selectionModel->getSelectedIndices
JTable#getSelectedColumns():::Returns the indices of all selected columns.:::return->columnModel->getSelectedColumns
JTable#getSelectedRowCount():::Returns the number of selected rows.:::return->selectionModel->getSelectedItemsCount
JTable#getSelectedColumnCount():::Returns the number of selected columns.:::return->columnModel->getSelectedColumnCount
JTable#isRowSelected(int):::Returns true if the specified index is in the valid range of rows, and the row at that index is selected.:::return->selectionModel->isSelectedIndex
JTable#isColumnSelected(int):::Returns true if the specified index is in the valid range of columns, and the column at that index is selected.:::return->columnModel->getSelectionModel->isSelectedIndex
JTable#isCellSelected(int, int):::Returns true if the specified indices are in the valid range of rows and columns and the cell at the specified position is selected.:::if->getRowSelectionAllowed->getColumnSelectionAllowed->return->return->getRowSelectionAllowed->isRowSelected->getColumnSelectionAllowed->isColumnSelected
JTable#changeSelectionModel(ListSelectionModel, int, boolean, boolean, boolean, int, boolean)::: table change selection model:::if->if->if->sm->addSelectionInterval->else->sm->removeSelectionInterval->if->getClientProperty->sm->addSelectionInterval->sm->setAnchorSelectionIndex->else->sm->setSelectionInterval->else->if->if->sm->removeSelectionInterval->else->sm->addSelectionInterval->else->sm->setSelectionInterval
JTable#changeSelection(int, int, boolean, boolean):::Updates the selection models of the table, depending on the state of the two flags: toggle and extend:::rsm->getSelectionModel->csm->getColumnModel->getSelectionModel->anchorRow->rsm->getAnchorSelectionIndex->getAdjustedIndex->anchorCol->csm->getAnchorSelectionIndex->getAdjustedIndex->anchorSelected->if->if->getRowCount->if->if->getColumnCount->selected->isCellSelected->isCellSelected->changeSelectionModel->changeSelectionModel->if->getAutoscrolls->cellRect->getCellRect->if->scrollRectToVisible
JTable#getSelectionForeground():::Returns the foreground color for selected cells.:::return
JTable#setSelectionForeground(Color):::Sets the foreground color for selected cells:::old->firePropertyChange->repaint
JTable#getSelectionBackground():::Returns the background color for selected cells.:::return
JTable#setSelectionBackground(Color):::Sets the background color for selected cells:::old->firePropertyChange->repaint
JTable#getColumn(Object):::Returns the TableColumn object for the column in the table whose identifier is equal to identifier, when compared using equals.:::cm->getColumnModel->columnIndex->cm->getColumnIndex->return->cm->getColumn
JTable#convertColumnIndexToModel(int):::Maps the index of the column in the view at viewColumnIndex to the index of the column in the table model:::return->SwingUtilities2->getColumnModel->convertColumnIndexToModel
JTable#convertColumnIndexToView(int):::Maps the index of the column in the table model at modelColumnIndex to the index of the column in the view:::return->SwingUtilities2->getColumnModel->convertColumnIndexToView
JTable#convertRowIndexToView(int):::Maps the index of the row in terms of the TableModel to the view:::sorter->getRowSorter->if->return->sorter->convertRowIndexToView->return
JTable#convertRowIndexToModel(int):::Maps the index of the row in terms of the view to the underlying TableModel:::sorter->getRowSorter->if->return->sorter->convertRowIndexToModel->return
JTable#getRowCount():::Returns the number of rows that can be shown in the JTable, given unlimited space:::sorter->getRowSorter->if->return->sorter->getViewRowCount->return->getModel->getRowCount
JTable#getColumnCount():::Returns the number of columns in the column model:::return->getColumnModel->getColumnCount
JTable#getColumnName(int):::Returns the name of the column appearing in the view at column position column.:::return->getModel->convertColumnIndexToModel->getColumnName
JTable#getColumnClass(int):::Returns the type of the column appearing in the view at column position column.:::return->getModel->convertColumnIndexToModel->getColumnClass
JTable#getValueAt(int, int):::Returns the cell value at row and column:::return->getModel->convertRowIndexToModel->convertColumnIndexToModel->getValueAt
JTable#setValueAt(Object, int, int):::Sets the value for the cell in the table model at row and column:::getModel->convertRowIndexToModel->convertColumnIndexToModel->setValueAt
JTable#isCellEditable(int, int):::Returns true if the cell at row and column is editable:::return->getModel->convertRowIndexToModel->convertColumnIndexToModel->isCellEditable
JTable#addColumn(TableColumn)::: Appends aColumn to the end of the array of columns held by  this JTable's column model:::if->aColumn->getHeaderValue->modelColumn->aColumn->getModelIndex->columnName->getModel->getColumnName->aColumn->setHeaderValue->getColumnModel->addColumn
JTable#removeColumn(TableColumn)::: Removes aColumn from this JTable's  array of columns:::getColumnModel->removeColumn
JTable#moveColumn(int, int):::Moves the column column to the position currently occupied by the column targetColumn in the view:::getColumnModel->moveColumn
JTable#columnAtPoint(Point):::Returns the index of the column that point lies in, or -1 if the result is not in the range [0, getColumnCount()-1].:::x->if->getComponentOrientation->isLeftToRight->getWidth->return->getColumnModel->getColumnIndexAtX
JTable#rowAtPoint(Point):::Returns the index of the row that point lies in, or -1 if the result is not in the range [0, getRowCount()-1].:::y->result->getRowHeight->rowModel->getIndex->if->return->else->if->getRowCount->return->else->return
JTable#getCellRect(int, int, boolean):::Returns a rectangle for the cell that lies at the intersection of row and column:::r->new->Rectangle->valid->if->else->if->getRowCount->getHeight->else->getRowHeight->rowModel->getPosition->if->if->getComponentOrientation->isLeftToRight->getWidth->else->if->getColumnCount->if->getComponentOrientation->isLeftToRight->getWidth->else->cm->getColumnModel->if->getComponentOrientation->isLeftToRight->for->i->else->for->i->cm->getColumnCount->cm->getColumn->getWidth->if->rm->Math->getRowMargin->min->cm->Math->getColumnModel->getColumnMargin->min->r->setBounds->return
JTable#viewIndexForColumn(TableColumn)::: table view index for column:::cm->getColumnModel->for->column->cm->getColumnCount->return
JTable#doLayout():::Causes this table to lay out its rows and columns:::resizingColumn->getResizingColumn->if->setWidthsFromPreferredWidths->else->columnIndex->viewIndexForColumn->delta->getWidth->getColumnModel->getTotalColumnWidth->accommodateDelta->getWidth->getColumnModel->getTotalColumnWidth->if->resizingColumn->resizingColumn->getWidth->setWidth->setWidthsFromPreferredWidths->super->doLayout
JTable#getResizingColumn()::: table get resizing column:::return->tableHeader->getResizingColumn
JTable#sizeColumnsToFit(boolean):::Sizes the table columns to fit the available space.:::oldAutoResizeMode->setAutoResizeMode->sizeColumnsToFit->setAutoResizeMode
JTable#sizeColumnsToFit(int):::Obsolete as of Java 2 platform v1.4:::if->setWidthsFromPreferredWidths->else->if->aColumn->getColumnModel->getColumn->aColumn->aColumn->getWidth->setPreferredWidth->else->delta->getWidth->getColumnModel->getTotalColumnWidth->accommodateDelta->setWidthsFromPreferredWidths
JTable#setWidthsFromPreferredWidths(boolean)::: table set widths from preferred widths:::totalWidth->getWidth->totalPreferred->getPreferredSize->target->cm->r->new->Resizable3->adjustSizes
JTable#accommodateDelta(int, int)::: table accommodate delta:::columnCount->getColumnCount->from->to->switch->Math->min->break->break->break->break->return->start->end->cm->r->new->Resizable3->totalWidth->for->i->adjustSizes
JTable.Resizable2#getElementCount()::: resizable2 get element count:::
JTable.Resizable2#getLowerBoundAt(int)::: resizable2 get lower bound at:::
JTable.Resizable2#getUpperBoundAt(int)::: resizable2 get upper bound at:::
JTable.Resizable2#setSizeAt(int, int)::: resizable2 set size at:::
JTable.Resizable3#getMidPointAt(int)::: resizable3 get mid point at:::
JTable#adjustSizes(long, Resizable3, boolean)::: table adjust sizes:::N->r->getElementCount->totalPreferred->for->i->s->if->new->Resizable2->else->new->Resizable2->adjustSizes
JTable#adjustSizes(long, Resizable2, boolean)::: table adjust sizes:::totalLowerBound->totalUpperBound->for->i->r->getElementCount->if->Math->Math->max->min->for->i->r->getElementCount
JTable#getToolTipText(MouseEvent):::Overrides JComponent's getToolTipText method in order to allow the renderer's tips to be used if it has text set:::tip->p->event->getPoint->hitColumnIndex->columnAtPoint->hitRowIndex->rowAtPoint->if->renderer->getCellRenderer->component->prepareRenderer->if->cellRect->getCellRect->p->translate->modifiers->event->getModifiers->newEvent->event->getID->event->getWhen->event->getXOnScreen->event->getYOnScreen->event->getClickCount->event->isPopupTrigger->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->getToolTipText->if->getToolTipText->return
JTable#setSurrendersFocusOnKeystroke(boolean):::Sets whether editors in this JTable get the keyboard focus when an editor is activated as a result of the JTable forwarding keyboard events for a cell:::
JTable#getSurrendersFocusOnKeystroke():::Returns true if the editor should get the focus when keystrokes cause the editor to be activated:::return
JTable#editCellAt(int, int):::Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable:::return->editCellAt
JTable#editCellAt(int, int, EventObject):::Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable:::if->cellEditor->stopCellEditing->return->if->getRowCount->getColumnCount->return->if->isCellEditable->return->if->fm->KeyboardFocusManager->getCurrentKeyboardFocusManager->new->CellEditorRemover->fm->addPropertyChangeListener->editor->getCellEditor->if->editor->isCellEditable->prepareEditor->if->removeEditor->return->editorComp->getCellRect->setBounds->add->editorComp->validate->editorComp->repaint->setCellEditor->setEditingRow->setEditingColumn->editor->addCellEditorListener->return->return
JTable#isEditing():::Returns true if a cell is being edited.:::return
JTable#getEditorComponent():::Returns the component that is handling the editing session:::return
JTable#getEditingColumn():::Returns the index of the column that contains the cell currently being edited:::return
JTable#getEditingRow():::Returns the index of the row that contains the cell currently being edited:::return
JTable#getUI():::Returns the L&amp;F object that renders this component.:::return
JTable#setUI(TableUI):::Sets the L&amp;F object that renders this component and repaints.:::if->super->setUI->repaint
JTable#updateUI():::Notification from the UIManager that the L&amp;F has changed:::if->return->try->cm->getColumnModel->for->column->cm->getColumnCount->defaultRenderers->defaultRenderersByColumnClass->elements->while->defaultRenderers->hasMoreElements->SwingUtilities->defaultRenderers->nextElement->updateRendererOrEditorUI->defaultEditors->defaultEditorsByColumnClass->elements->while->defaultEditors->hasMoreElements->SwingUtilities->defaultEditors->nextElement->updateRendererOrEditorUI->if->tableHeader->getParent->tableHeader->updateUI->configureEnclosingScrollPaneUI->UIManager->getUI->setUI->catch->finally
JTable#getUIClassID():::Returns the suffix used to construct the name of the L&amp;F class used to render this component.:::return
JTable#setModel(TableModel):::Sets the data model for this table to dataModel and registers with it for listener notifications from the new data model.:::if->throw->new->IllegalArgumentException->if->old->if->old->removeTableModelListener->dataModel->addTableModelListener->new->TableModelEvent->tableChanged->firePropertyChange->if->getAutoCreateRowSorter->new->TableRowSorter<TableModel>->setRowSorter
JTable#getModel():::Returns the TableModel that provides the data displayed by this JTable.:::return
JTable#setColumnModel(TableColumnModel):::Sets the column model for this table to columnModel and registers for listener notifications from the new column model:::if->throw->new->IllegalArgumentException->old->if->if->old->removeColumnModelListener->columnModel->addColumnModelListener->if->tableHeader->setColumnModel->firePropertyChange->resizeAndRepaint
JTable#getColumnModel():::Returns the TableColumnModel that contains all column information of this table.:::return
JTable#setSelectionModel(ListSelectionModel):::Sets the row selection model for this table to selectionModel and registers for listener notifications from the new selection model.:::if->throw->new->IllegalArgumentException->oldModel->if->if->oldModel->removeListSelectionListener->selectionModel->addListSelectionListener->firePropertyChange->repaint
JTable#getSelectionModel():::Returns the ListSelectionModel that is used to maintain row selection state.:::return
JTable#sorterChanged(RowSorterEvent):::RowSorterListener notification that the RowSorter has changed in some way.:::if->e->getType->header->getTableHeader->if->header->repaint->else->if->e->getType->if->sortedTableChanged
JTable.SortManager#dispose():::Disposes any resources used by this SortManager.:::if->sorter->removeRowSorterListener
JTable.SortManager#setViewRowHeight(int, int):::Sets the height for a row at a specified index.:::if->getModel->getRowCount->getRowHeight->new->SizeSequence->modelRowSizes->convertRowIndexToModel->setSize
JTable.SortManager#allChanged():::Invoked when the underlying model has completely changed.:::
JTable.SortManager#viewSelectionChanged(ListSelectionEvent):::Invoked when the selection, on the view, has changed.:::if
JTable.SortManager#prepareForChange(RowSorterEvent, ModelChange):::Invoked when either the table model has changed, or the RowSorter has changed:::if->getUpdateSelectionOnSort->cacheSelection
JTable.SortManager#cacheSelection(RowSorterEvent, ModelChange):::Updates the internal cache of the selection based on the change.:::if->if->sorter->getViewRowCount->getModel->getRowCount->new->DefaultListSelectionModel->viewSelection->getSelectionModel->min->viewSelection->getMinSelectionIndex->max->viewSelection->getMaxSelectionIndex->modelIndex->for->viewIndex->viewSelection->getLeadSelectionIndex->convertRowIndexToModel->SwingUtilities2->setLeadAnchorWithoutSelection->else->if->cacheModelSelection->else->if->else->if->switch->modelSelection->removeIndexInterval->break->modelSelection->insertIndexInterval->break->break->else->cacheModelSelection
JTable.SortManager#cacheModelSelection(RowSorterEvent)::: sort manager cache model selection:::convertSelectionToModel->selectionModel->getLeadSelectionIndex->convertRowIndexToModel
JTable.SortManager#processChange(RowSorterEvent, ModelChange, boolean):::Inovked when either the table has changed or the sorter has changed and after the sorter has been notified:::if->if->else->if->if->modelRowSizes->getRowHeight->insertEntries->else->if->modelRowSizes->removeEntries->if->setViewRowHeightsFromModel->restoreSelection
JTable.SortManager#setViewRowHeightsFromModel():::Resets the variable row heights in terms of the view from that of the variable row heights in terms of the model.:::if->rowModel->getRowCount->getRowHeight->setSizes->for->viewIndex->getRowCount
JTable.SortManager#restoreSelection(ModelChange):::Restores the selection from that in terms of the model.:::if->restoreSortingSelection->else->if->viewSelection->getSelectionModel->viewSelection->setValueIsAdjusting->viewSelection->clearSelection->min->modelSelection->getMinSelectionIndex->max->modelSelection->getMaxSelectionIndex->viewIndex->for->modelIndex->viewLeadIndex->modelSelection->getLeadSelectionIndex->if->modelSelection->isSelectionEmpty->convertRowIndexToView->SwingUtilities2->setLeadAnchorWithoutSelection->viewSelection->setValueIsAdjusting
JTable#sortedTableChanged(RowSorterEvent, TableModelEvent):::Invoked when sorterChanged is invoked, or when tableChanged is invoked and sorting is enabled.:::editingModelIndex->change->new->ModelChange->if->convertRowIndexToModel->sortManager->prepareForChange->if->if->repaintSortedRows->notifySorter->if->else->sortManager->processChange->if->if->newIndex->convertRowIndexToView->restoreSortingEditingRow->if->resizeAndRepaint->if->clearSelectionAndLeadAnchor->resizeAndRepaint
JTable#repaintSortedRows(ModelChange):::Repaints the sort of sorted rows in response to a TableModelEvent.:::if->repaint->return->eventColumn->getColumn->columnViewIndex->if->else->convertColumnIndexToView->if->return->modelIndex->while->viewIndex->convertRowIndexToView->if->dirty->getCellRect->x->w->if->getWidth->repaint
JTable#restoreSortingSelection(int[], int, ModelChange):::Restores the selection after a model event/sort order changes:::for->i->convertRowIndexToView->if->getSelectedRow->return->selectionModel->setValueIsAdjusting->selectionModel->clearSelection->for->i->SwingUtilities2->setLeadAnchorWithoutSelection->selectionModel->setValueIsAdjusting
JTable#restoreSortingEditingRow(int):::Restores the editing row after a model event/sort order change.:::if->editor->getCellEditor->if->editor->cancelCellEditing->if->getCellEditor->removeEditor->else->repaint
JTable#notifySorter(ModelChange):::Notifies the sorter of a change in the underlying model.:::try->switch->if->getLastRow->allRowsChanged->else->if->getColumn->rowsUpdated->else->getColumn->rowsUpdated->break->rowsInserted->break->rowsDeleted->break->catch->finally
JTable#convertRowIndexToView(int, ModelChange):::Converts a model index to view index:::if->return->if->if->if->return->return->convertRowIndexToView->else->if->if->return->else->if->return->return->convertRowIndexToView->if->getModel->getRowCount->return->return->convertRowIndexToView
JTable#convertSelectionToModel(RowSorterEvent):::Converts the selection to model coordinates:::selection->getSelectedRows->for->i->return
JTable#convertRowIndexToModel(RowSorterEvent, int)::: table convert row index to model:::if->if->e->getPreviousRowCount->return->return->e->convertPreviousRowIndexToModel->if->getRowCount->return->return->convertRowIndexToModel
JTable#tableChanged(TableModelEvent):::Invoked when this table's TableModel generates a TableModelEvent:::if->e->getFirstRow->clearSelectionAndLeadAnchor->if->try->modelStructureChanged->catch->finally->sortManager->allChanged->if->getAutoCreateColumnsFromModel->createDefaultColumnsFromModel->return->resizeAndRepaint->return->if->sortedTableChanged->return->if->repaint->if->e->getType->tableRowsInserted->return->if->e->getType->tableRowsDeleted->return->modelColumn->e->getColumn->start->e->getFirstRow->end->e->getLastRow->dirtyRegion->if->getRowHeight->getColumnModel->getTotalColumnWidth->new->Rectangle->else->column->convertColumnIndexToView->getCellRect->if->getRowHeight->repaint->else->clearSelectionAndLeadAnchor->resizeAndRepaint
JTable#tableRowsInserted(TableModelEvent)::: table table rows inserted:::start->e->getFirstRow->end->e->getLastRow->if->if->getRowCount->length->selectionModel->insertIndexInterval->if->rowModel->getRowHeight->insertEntries->rh->getRowHeight->drawRect->getColumnModel->getTotalColumnWidth->getRowCount->new->Rectangle->revalidate->repaint
JTable#tableRowsDeleted(TableModelEvent)::: table table rows deleted:::start->e->getFirstRow->end->e->getLastRow->if->if->getRowCount->deletedCount->previousRowCount->getRowCount->selectionModel->removeIndexInterval->if->rowModel->removeEntries->rh->getRowHeight->drawRect->getColumnModel->getTotalColumnWidth->new->Rectangle->revalidate->repaint
JTable#columnAdded(TableColumnModelEvent):::Invoked when a column is added to the table column model:::if->isEditing->removeEditor->resizeAndRepaint
JTable#columnRemoved(TableColumnModelEvent):::Invoked when a column is removed from the table column model:::if->isEditing->removeEditor->resizeAndRepaint
JTable#columnMoved(TableColumnModelEvent):::Invoked when a column is repositioned:::if->isEditing->getCellEditor->stopCellEditing->getCellEditor->cancelCellEditing->repaint
JTable#columnMarginChanged(ChangeEvent):::Invoked when a column is moved due to a margin change:::if->isEditing->getCellEditor->stopCellEditing->getCellEditor->cancelCellEditing->resizingColumn->getResizingColumn->if->resizingColumn->resizingColumn->getWidth->setPreferredWidth->resizeAndRepaint
JTable#limit(int, int, int)::: table limit:::return->Math->Math->max->min
JTable#columnSelectionChanged(ListSelectionEvent):::Invoked when the selection model of the TableColumnModel is changed:::isAdjusting->e->getValueIsAdjusting->if->return->if->getRowCount->getColumnCount->return->firstIndex->e->getFirstIndex->getColumnCount->limit->lastIndex->e->getLastIndex->getColumnCount->limit->minRow->maxRow->getRowCount->if->getRowSelectionAllowed->selectionModel->getMinSelectionIndex->selectionModel->getMaxSelectionIndex->leadRow->selectionModel->getLeadSelectionIndex->getAdjustedIndex->if->if->return->else->if->Math->min->Math->max->firstColumnRect->getCellRect->lastColumnRect->getCellRect->dirtyRegion->firstColumnRect->union->repaint
JTable#valueChanged(ListSelectionEvent):::Invoked when the row selection changes -- repaints to show the new selection:::if->sortManager->viewSelectionChanged->isAdjusting->e->getValueIsAdjusting->if->return->if->getRowCount->getColumnCount->return->firstIndex->e->getFirstIndex->getRowCount->limit->lastIndex->e->getLastIndex->getRowCount->limit->firstRowRect->getCellRect->lastRowRect->getColumnCount->getCellRect->dirtyRegion->firstRowRect->union->repaint
JTable#editingStopped(ChangeEvent):::Invoked when editing is finished:::editor->getCellEditor->if->value->editor->getCellEditorValue->setValueAt->removeEditor
JTable#editingCanceled(ChangeEvent):::Invoked when editing is canceled:::removeEditor
JTable#setPreferredScrollableViewportSize(Dimension):::Sets the preferred size of the viewport for this table.:::
JTable#getPreferredScrollableViewportSize():::Returns the preferred size of the viewport for this table.:::return
JTable#getScrollableUnitIncrement(Rectangle, int, int):::Returns the scroll increment (in pixels) that completely exposes one new row or column (depending on the orientation):::leadingRow->leadingCol->leadingCellRect->leadingVisibleEdge->leadingCellEdge->leadingCellSize->getLeadingRow->getLeadingCol->if->return->getRowHeight->else->if->return->getCellRect->leadingEdge->leadingEdge->if->else->if->if->retVal->if->while->getRowHeight->if->break->else->while->getCellRect->if->break->return->else->return->else->hiddenAmt->Math->abs->visibleAmt->if->return->else->return
JTable#getScrollableBlockIncrement(Rectangle, int, int):::Returns visibleRect.height or visibleRect.width, depending on this table's orientation:::if->getRowCount->if->rh->getRowHeight->return->Math->max->else->return->if->row->visibleRect->getLocation->rowAtPoint->col->visibleRect->getLocation->columnAtPoint->cellRect->getCellRect->if->rh->getRowHeight->return->Math->max->if->return->getPreviousBlockIncrement->else->return->getNextBlockIncrement
JTable#getPreviousBlockIncrement(Rectangle, int):::Called to get the block increment for upward scrolling in cases of horizontal scrolling, or for vertical scrolling of a table with variable row heights.:::row->col->newEdge->newCellLoc->visibleLeadingEdge->leadingEdge->leftToRight->getComponentOrientation->isLeftToRight->newLeadingEdge->if->x->new->Point->else->if->new->Point->else->new->Point->rowAtPoint->columnAtPoint->if->else->if->if->else->getWidth->else->newCellRect->getCellRect->newCellLeadingEdge->leadingEdge->newCellTrailingEdge->trailingEdge->if->else->if->else->if->else->return->Math->abs
JTable#getNextBlockIncrement(Rectangle, int):::Called to get the block increment for downward scrolling in cases of horizontal scrolling, or for vertical scrolling of a table with variable row heights.:::trailingRow->getTrailingRow->trailingCol->getTrailingCol->cellRect->cellFillsVis->cellLeadingEdge->cellTrailingEdge->newLeadingEdge->visibleLeadingEdge->leadingEdge->if->return->else->if->return->getCellRect->leadingEdge->trailingEdge->if->getComponentOrientation->isLeftToRight->else->if->else->if->trailingEdge->else->return->Math->abs
JTable#getLeadingRow(Rectangle)::: table get leading row:::leadingPoint->if->getComponentOrientation->isLeftToRight->new->Point->else->new->Point->return->rowAtPoint
JTable#getLeadingCol(Rectangle)::: table get leading col:::leadingPoint->if->getComponentOrientation->isLeftToRight->new->Point->else->new->Point->return->columnAtPoint
JTable#getTrailingRow(Rectangle)::: table get trailing row:::trailingPoint->if->getComponentOrientation->isLeftToRight->new->Point->else->new->Point->return->rowAtPoint
JTable#getTrailingCol(Rectangle)::: table get trailing col:::trailingPoint->if->getComponentOrientation->isLeftToRight->new->Point->else->new->Point->return->columnAtPoint
JTable#leadingEdge(Rectangle, int)::: table leading edge:::if->return->else->if->getComponentOrientation->isLeftToRight->return->else->return
JTable#trailingEdge(Rectangle, int)::: table trailing edge:::if->return->else->if->getComponentOrientation->isLeftToRight->return->else->return
JTable#getScrollableTracksViewportWidth():::Returns false if autoResizeMode is set to AUTO_RESIZE_OFF, which indicates that the width of the viewport does not determine the width of the table:::return
JTable#getScrollableTracksViewportHeight():::Returns false to indicate that the height of the viewport does not determine the height of the table, unless getFillsViewportHeight is true and the preferred height of the table is smaller than the viewport's height.:::parent->SwingUtilities->getUnwrappedParent->return->getFillsViewportHeight->parent->getHeight->getPreferredSize
JTable#setFillsViewportHeight(boolean):::Sets whether or not this table is always made large enough to fill the height of an enclosing viewport:::old->resizeAndRepaint->firePropertyChange
JTable#getFillsViewportHeight():::Returns whether or not this table is always made large enough to fill the height of an enclosing viewport.:::return
JTable#processKeyBinding(KeyStroke, KeyEvent, int, boolean)::: table process key binding:::retValue->super->processKeyBinding->if->isFocusOwner->getClientProperty->equals->editorComponent->getEditorComponent->if->if->e->getID->return->code->e->getKeyCode->if->return->leadRow->getSelectionModel->getLeadSelectionIndex->leadColumn->getColumnModel->getSelectionModel->getLeadSelectionIndex->if->isEditing->if->editCellAt->return->getEditorComponent->if->return->if->processKeyBinding->if->getSurrendersFocusOnKeystroke->editorComponent->requestFocus->return
JTable#createDefaultRenderers():::Creates default cell renderers for objects, numbers, doubles, dates, booleans, and icons.:::new->UIDefaults->defaultRenderersByColumnClass->new->DefaultTableCellRenderer.UIResource->put->defaultRenderersByColumnClass->new->NumberRenderer->put->defaultRenderersByColumnClass->new->DoubleRenderer->put->defaultRenderersByColumnClass->new->DoubleRenderer->put->defaultRenderersByColumnClass->new->DateRenderer->put->defaultRenderersByColumnClass->new->IconRenderer->put->defaultRenderersByColumnClass->new->IconRenderer->put->defaultRenderersByColumnClass->new->BooleanRenderer->put
JTable.DoubleRenderer#setValue(Object)::: double renderer set value:::if->NumberFormat->getInstance->formatter->format->setText
JTable.DateRenderer#setValue(Object)::: date renderer set value:::if->DateFormat->getDateInstance->formatter->format->setText
JTable.IconRenderer#setValue(Object)::: icon renderer set value:::setIcon
JTable.BooleanRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)::: boolean renderer get table cell renderer component:::if->table->getSelectionForeground->setForeground->super->table->getSelectionBackground->setBackground->else->table->getForeground->setForeground->table->getBackground->setBackground->booleanValue->setSelected->if->UIManager->getBorder->setBorder->else->setBorder->return
JTable#createDefaultEditors():::Creates default cell editors for objects, numbers, and boolean values.:::new->UIDefaults->defaultEditorsByColumnClass->new->GenericEditor->put->defaultEditorsByColumnClass->new->NumberEditor->put->defaultEditorsByColumnClass->new->BooleanEditor->put
JTable.GenericEditor#stopCellEditing()::: generic editor stop cell editing:::s->super->getCellEditorValue->try->if->equals->if->constructor->getDeclaringClass->return->super->stopCellEditing->SwingUtilities2->constructor->getModifiers->checkAccess->constructor->new->ObjectArr->newInstance->catch->getComponent->new->LineBorder->setBorder->return->finally->return->super->stopCellEditing
JTable.GenericEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int)::: generic editor get table cell editor component:::getComponent->new->LineBorder->setBorder->try->type->table->getColumnClass->if->ReflectUtil->checkPackageAccess->SwingUtilities2->type->getModifiers->checkAccess->type->getConstructor->catch->return->finally->return->super->getTableCellEditorComponent
JTable.GenericEditor#getCellEditorValue()::: generic editor get cell editor value:::return
JTable#initializeLocalVars():::Initializes table properties to their default values.:::setOpaque->createDefaultRenderers->createDefaultEditors->createDefaultTableHeader->setTableHeader->setShowGrid->setAutoResizeMode->setRowHeight->setRowMargin->setRowSelectionAllowed->setCellEditor->setEditingColumn->setEditingRow->setSurrendersFocusOnKeystroke->new->Dimension->setPreferredScrollableViewportSize->toolTipManager->ToolTipManager->sharedInstance->toolTipManager->registerComponent->setAutoscrolls
JTable#createDefaultDataModel():::Returns the default table model object, which is a DefaultTableModel:::return->new->DefaultTableModel
JTable#createDefaultColumnModel():::Returns the default column model object, which is a DefaultTableColumnModel:::return->new->DefaultTableColumnModel
JTable#createDefaultSelectionModel():::Returns the default selection model object, which is a DefaultListSelectionModel:::return->new->DefaultListSelectionModel
JTable#createDefaultTableHeader():::Returns the default table header object, which is a JTableHeader:::return->new->JTableHeader
JTable#resizeAndRepaint():::Equivalent to revalidate followed by repaint.:::revalidate->repaint
JTable#getCellEditor():::Returns the active cell editor, which is null if the table is not currently editing.:::return
JTable#setCellEditor(TableCellEditor):::Sets the active cell editor.:::oldEditor->firePropertyChange
JTable#setEditingColumn(int):::Sets the editingColumn variable.:::
JTable#setEditingRow(int):::Sets the editingRow variable.:::
JTable#getCellRenderer(int, int):::Returns an appropriate renderer for the cell specified by this row and column:::tableColumn->getColumnModel->getColumn->renderer->tableColumn->getCellRenderer->if->getColumnClass->getDefaultRenderer->return
JTable#prepareRenderer(TableCellRenderer, int, int):::Prepares the renderer by querying the data model for the value and selection state of the cell at row, column:::value->getValueAt->isSelected->hasFocus->if->isPaintingForPrint->isCellSelected->rowIsLead->selectionModel->getLeadSelectionIndex->colIsLead->columnModel->getSelectionModel->getLeadSelectionIndex->isFocusOwner->return->renderer->getTableCellRendererComponent
JTable#getCellEditor(int, int):::Returns an appropriate editor for the cell specified by row and column:::tableColumn->getColumnModel->getColumn->editor->tableColumn->getCellEditor->if->getColumnClass->getDefaultEditor->return
JTable#prepareEditor(TableCellEditor, int, int):::Prepares the editor by querying the data model for the value and selection state of the cell at row, column:::value->getValueAt->isSelected->isCellSelected->comp->editor->getTableCellEditorComponent->if->jComp->if->jComp->getNextFocusableComponent->jComp->setNextFocusableComponent->return
JTable#removeEditor():::Discards the editor object and frees the real estate it used for cell rendering.:::KeyboardFocusManager->getCurrentKeyboardFocusManager->removePropertyChangeListener->editor->getCellEditor->if->editor->removeCellEditorListener->if->focusOwner->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->isFocusOwnerInTheTable->SwingUtilities->isDescendingFrom->remove->if->requestFocusInWindow->cellRect->getCellRect->setCellEditor->setEditingColumn->setEditingRow->repaint
JTable#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JTable#readObject(ObjectInputStream)::: table read object:::f->s->readFields->newDataModel->f->get->if->throw->new->InvalidObjectException->newColumnModel->f->get->if->throw->new->InvalidObjectException->newSelectionModel->f->get->if->throw->new->InvalidObjectException->f->get->newRowHeight->f->get->if->throw->new->InvalidObjectException->f->get->newGridColor->f->get->if->throw->new->InvalidObjectException->f->get->f->get->newAutoResizeMode->f->get->if->isValidAutoResizeMode->throw->new->InvalidObjectException->f->get->f->get->f->get->f->get->f->get->f->get->f->get->newDragEnabled->f->get->checkDragEnabled->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->newDropMode->f->get->checkDropMode->if->getUIClassID->equals->ui->installUI->createDefaultRenderers->createDefaultEditors->if->getToolTipText->ToolTipManager->sharedInstance->registerComponent
JTable#compWriteObjectNotify()::: table comp write object notify:::super->compWriteObjectNotify->if->getToolTipText->ToolTipManager->sharedInstance->unregisterComponent
JTable#paramString():::Returns a string representation of this table:::gridColorString->gridColor->toString->showHorizontalLinesString->showVerticalLinesString->autoResizeModeString->if->else->if->else->if->else->if->else->if->else->autoCreateColumnsFromModelString->preferredViewportSizeString->preferredViewportSize->toString->rowSelectionAllowedString->cellSelectionEnabledString->selectionForegroundString->selectionForeground->toString->selectionBackgroundString->selectionBackground->toString->return->super->paramString
JTable.CellEditorRemover#propertyChange(PropertyChangeEvent)::: cell editor remover property change:::if->isEditing->getClientProperty->return->c->focusManager->getPermanentFocusOwner->while->if->return->else->if->c->getParent->if->SwingUtilities->getRoot->if->getCellEditor->stopCellEditing->getCellEditor->cancelCellEditing->break->c->getParent
JTable#print():::A convenience method that displays a printing dialog, and then prints this JTable in mode PrintMode.FIT_WIDTH, with no header or footer text:::return->print
JTable#print(PrintMode):::A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with no header or footer text:::return->print
JTable#print(PrintMode, MessageFormat, MessageFormat):::A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with the specified header and footer text:::showDialogs->GraphicsEnvironment->isHeadless->return->print
JTable#print(PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean):::Prints this table, as specified by the fully featured #print(JTable.PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean, PrintService) print method, with the default printer specified as the print service.:::return->print
JTable#print(PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean, PrintService):::Prints this JTable:::isHeadless->GraphicsEnvironment->isHeadless->if->if->throw->new->HeadlessException->if->throw->new->HeadlessException->job->PrinterJob->getPrinterJob->if->isEditing->if->getCellEditor->stopCellEditing->getCellEditor->cancelCellEditing->if->new->HashPrintRequestAttributeSet->printingStatus->printable->getPrintable->if->new->ThreadSafePrintable->PrintingStatus->createPrintingStatus->printingStatus->createNotificationPrintable->else->job->setPrintable->if->job->setPrintService->if->job->printDialog->return->if->job->print->return->lock->new->Object->copyAttr->runnable->try->job->print->catch->synchronized->finally->printingStatus->dispose->th->new->Thread->th->start->printingStatus->showModal->pe->synchronized->if->if->return->else->if->throw->else->if->throw->else->if->throw->throw->new->AssertionError->return
JTable#getPrintable(PrintMode, MessageFormat, MessageFormat):::Return a Printable for use in printing this JTable:::return->new->TablePrintable
JTable.ThreadSafePrintable#print(Graphics, PageFormat, int):::Prints the specified page into the given Graphics context, in the specified format:::runnable->new->Runnable->synchronized->SwingUtilities->invokeLater->while->try->runnable->wait->catch->finally->if->if->throw->else->if->throw->else->if->throw->throw->new->AssertionError->return
JTable#getAccessibleContext():::Gets the AccessibleContext associated with this JTable:::if->new->AccessibleJTable->return
JTable.AccessibleJTable#propertyChange(PropertyChangeEvent):::Track changes to selection model, column model, etc:::name->e->getPropertyName->oldValue->e->getOldValue->newValue->e->getNewValue->if->name->compareTo->if->removeTableModelListener->if->addTableModelListener->else->if->name->compareTo->source->e->getSource->if->if->removeListSelectionListener->if->addListSelectionListener->else->if->JTable.this->getColumnModel->if->removeListSelectionListener->if->addListSelectionListener->else->else->if->name->compareTo->if->tcm->tcm->removeColumnModelListener->tcm->getSelectionModel->removeListSelectionListener->if->tcm->tcm->addColumnModelListener->tcm->getSelectionModel->addListSelectionListener->else->if->name->compareTo->if->removeCellEditorListener->if->addCellEditorListener
JTable.AccessibleJTable.AccessibleJTableModelChange#getType():::Returns the type.:::return
JTable.AccessibleJTable.AccessibleJTableModelChange#getFirstRow():::Returns the first row.:::return
JTable.AccessibleJTable.AccessibleJTableModelChange#getLastRow():::Returns the last row.:::return
JTable.AccessibleJTable.AccessibleJTableModelChange#getFirstColumn():::Returns the first column.:::return
JTable.AccessibleJTable.AccessibleJTableModelChange#getLastColumn():::Returns the last column.:::return
JTable.AccessibleJTable#tableChanged(TableModelEvent):::Track changes to the table contents:::firePropertyChange->if->firstColumn->e->getColumn->lastColumn->e->getColumn->if->getColumnCount->change->e->getType->e->getFirstRow->e->getLastRow->new->AccessibleJTableModelChange->firePropertyChange
JTable.AccessibleJTable#tableRowsInserted(TableModelEvent):::Track changes to the table contents (row insertions):::firePropertyChange->firstColumn->e->getColumn->lastColumn->e->getColumn->if->getColumnCount->change->e->getType->e->getFirstRow->e->getLastRow->new->AccessibleJTableModelChange->firePropertyChange
JTable.AccessibleJTable#tableRowsDeleted(TableModelEvent):::Track changes to the table contents (row deletions):::firePropertyChange->firstColumn->e->getColumn->lastColumn->e->getColumn->if->getColumnCount->change->e->getType->e->getFirstRow->e->getLastRow->new->AccessibleJTableModelChange->firePropertyChange
JTable.AccessibleJTable#columnAdded(TableColumnModelEvent):::Track changes to the table contents (column insertions):::firePropertyChange->type->change->e->getFromIndex->e->getToIndex->new->AccessibleJTableModelChange->firePropertyChange
JTable.AccessibleJTable#columnRemoved(TableColumnModelEvent):::Track changes to the table contents (column deletions):::firePropertyChange->type->change->e->getFromIndex->e->getToIndex->new->AccessibleJTableModelChange->firePropertyChange
JTable.AccessibleJTable#columnMoved(TableColumnModelEvent):::Track changes of a column repositioning.:::firePropertyChange->type->change->e->getFromIndex->e->getFromIndex->new->AccessibleJTableModelChange->firePropertyChange->type2->change2->e->getToIndex->e->getToIndex->new->AccessibleJTableModelChange->firePropertyChange
JTable.AccessibleJTable#columnMarginChanged(ChangeEvent):::Track changes of a column moving due to margin changes.:::firePropertyChange
JTable.AccessibleJTable#columnSelectionChanged(ListSelectionEvent):::Track that the selection model of the TableColumnModel changed.:::
JTable.AccessibleJTable#editingStopped(ChangeEvent):::Track changes to a cell's contents:::firePropertyChange
JTable.AccessibleJTable#editingCanceled(ChangeEvent):::Invoked when editing is canceled:::
JTable.AccessibleJTable#valueChanged(ListSelectionEvent):::Track changes to table cell selections:::Boolean->valueOf->Boolean->valueOf->firePropertyChange->focusedRow->JTable.this->getSelectionModel->getLeadSelectionIndex->focusedCol->JTable.this->getColumnModel->getSelectionModel->getLeadSelectionIndex->if->oldA->getAccessibleAt->newA->getAccessibleAt->firePropertyChange
JTable.AccessibleJTable#getAccessibleSelection():::Get the AccessibleSelection associated with this object:::return
JTable.AccessibleJTable#getAccessibleRole():::Gets the role of this object.:::return
JTable.AccessibleJTable#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point.:::column->columnAtPoint->row->rowAtPoint->if->aColumn->getColumnModel->getColumn->renderer->aColumn->getCellRenderer->if->columnClass->getColumnClass->getDefaultRenderer->component->renderer->getTableCellRendererComponent->return->getAccessibleIndexAt->new->AccessibleJTableCell->return
JTable.AccessibleJTable#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::return->JTable.this->getColumnCount->JTable.this->getRowCount
JTable.AccessibleJTable#getAccessibleChild(int):::Returns the nth Accessible child of the object.:::if->getAccessibleChildrenCount->return->else->column->getAccessibleColumnAtIndex->row->getAccessibleRowAtIndex->aColumn->getColumnModel->getColumn->renderer->aColumn->getCellRenderer->if->columnClass->getColumnClass->getDefaultRenderer->component->renderer->getTableCellRendererComponent->return->getAccessibleIndexAt->new->AccessibleJTableCell
JTable.AccessibleJTable#getAccessibleSelectionCount():::Returns the number of Accessible children currently selected:::rowsSel->JTable.this->getSelectedRowCount->colsSel->JTable.this->getSelectedColumnCount->if->return->else->if->JTable.this->getRowSelectionAllowed->JTable.this->getColumnSelectionAllowed->return->JTable.this->getColumnCount->JTable.this->getRowCount->else->if->JTable.this->getRowSelectionAllowed->return->JTable.this->getColumnCount->else->if->JTable.this->getColumnSelectionAllowed->return->JTable.this->getRowCount->else->return
JTable.AccessibleJTable#getAccessibleSelection(int):::Returns an Accessible representing the specified selected child in the object:::if->getAccessibleSelectionCount->return->rowsSel->JTable.this->getSelectedRowCount->colsSel->JTable.this->getSelectedColumnCount->rowIndicies->getSelectedRows->colIndicies->getSelectedColumns->ttlCols->JTable.this->getColumnCount->ttlRows->JTable.this->getRowCount->r->c->if->return->getAccessibleChild->else->if->JTable.this->getRowSelectionAllowed->JTable.this->getColumnSelectionAllowed->curIndex->IN_ROW->NOT_IN_ROW->state->j->prevRow->while->switch->if->return->getAccessibleChild->else->if->break->if->return->getAccessibleChild->else->break->if->return->getAccessibleChild->else->else->if->JTable.this->getRowSelectionAllowed->return->getAccessibleChild->else->if->JTable.this->getColumnSelectionAllowed->return->getAccessibleChild->return
JTable.AccessibleJTable#isAccessibleChildSelected(int):::Determines if the current child of this object is selected.:::column->getAccessibleColumnAtIndex->row->getAccessibleRowAtIndex->return->JTable.this->isCellSelected
JTable.AccessibleJTable#addAccessibleSelection(int):::Adds the specified Accessible child of the object to the object's selection:::column->getAccessibleColumnAtIndex->row->getAccessibleRowAtIndex->JTable.this->changeSelection
JTable.AccessibleJTable#removeAccessibleSelection(int):::Removes the specified child of the object from the object's selection:::if->column->getAccessibleColumnAtIndex->row->getAccessibleRowAtIndex->JTable.this->removeRowSelectionInterval->JTable.this->removeColumnSelectionInterval
JTable.AccessibleJTable#clearAccessibleSelection():::Clears the selection in the object, so that no children in the object are selected.:::JTable.this->clearSelection
JTable.AccessibleJTable#selectAllAccessibleSelection():::Causes every child of the object to be selected, but only if the JTable supports multiple selections, and if individual cell selection is enabled.:::if->JTable.this->selectAll
JTable.AccessibleJTable#getAccessibleRow(int):::Returns the row number of an index in the table.:::return->getAccessibleRowAtIndex
JTable.AccessibleJTable#getAccessibleColumn(int):::Returns the column number of an index in the table.:::return->getAccessibleColumnAtIndex
JTable.AccessibleJTable#getAccessibleIndex(int, int):::Returns the index at a row and column in the table.:::return->getAccessibleIndexAt
JTable.AccessibleJTable#getAccessibleTable():::Gets the AccessibleTable associated with this object:::return
JTable.AccessibleJTable#getAccessibleCaption():::Returns the caption for the table.:::return
JTable.AccessibleJTable#setAccessibleCaption(Accessible):::Sets the caption for the table.:::oldCaption->firePropertyChange
JTable.AccessibleJTable#getAccessibleSummary():::Returns the summary description of the table.:::return
JTable.AccessibleJTable#setAccessibleSummary(Accessible):::Sets the summary description of the table.:::oldSummary->firePropertyChange
JTable.AccessibleJTable#getAccessibleRowCount()::: accessible table get accessible row count:::return->JTable.this->getRowCount
JTable.AccessibleJTable#getAccessibleColumnCount()::: accessible table get accessible column count:::return->JTable.this->getColumnCount
JTable.AccessibleJTable#getAccessibleAt(int, int)::: accessible table get accessible at:::return->getAccessibleColumnCount->getAccessibleChild
JTable.AccessibleJTable#getAccessibleRowExtentAt(int, int):::Returns the number of rows occupied by the Accessible at a specified row and column in the table.:::return
JTable.AccessibleJTable#getAccessibleColumnExtentAt(int, int):::Returns the number of columns occupied by the Accessible at a given (row, column).:::return
JTable.AccessibleJTable#getAccessibleRowHeader():::Returns the row headers as an AccessibleTable.:::return
JTable.AccessibleJTable#setAccessibleRowHeader(AccessibleTable):::Sets the row headers as an AccessibleTable.:::
JTable.AccessibleJTable#getAccessibleColumnHeader():::Returns the column headers as an AccessibleTable.:::header->JTable.this->getTableHeader->return->new->AccessibleTableHeader
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleCaption():::Returns the caption for the table.:::return
JTable.AccessibleJTable.AccessibleTableHeader#setAccessibleCaption(Accessible):::Sets the caption for the table.:::
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleSummary():::Returns the summary description of the table.:::return
JTable.AccessibleJTable.AccessibleTableHeader#setAccessibleSummary(Accessible):::Sets the summary description of the table:::
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleRowCount():::Returns the number of rows in the table.:::return
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleColumnCount():::Returns the number of columns in the table.:::return->headerModel->getColumnCount
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleAt(int, int):::Returns the Accessible at a specified row and column in the table.:::aColumn->headerModel->getColumn->renderer->aColumn->getHeaderRenderer->if->header->getDefaultRenderer->component->renderer->header->getTable->aColumn->getHeaderValue->getTableCellRendererComponent->return->JTable.this->getTableHeader->new->AccessibleJTableHeaderCell
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleRowExtentAt(int, int):::Returns the number of rows occupied by the Accessible at a specified row and column in the table.:::return
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleColumnExtentAt(int, int):::Returns the number of columns occupied by the Accessible at a specified row and column in the table.:::return
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleRowHeader():::Returns the row headers as an AccessibleTable.:::return
JTable.AccessibleJTable.AccessibleTableHeader#setAccessibleRowHeader(AccessibleTable):::Sets the row headers.:::
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleColumnHeader():::Returns the column headers as an AccessibleTable.:::return
JTable.AccessibleJTable.AccessibleTableHeader#setAccessibleColumnHeader(AccessibleTable):::Sets the column headers.:::
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleRowDescription(int):::Returns the description of the specified row in the table.:::return
JTable.AccessibleJTable.AccessibleTableHeader#setAccessibleRowDescription(int, Accessible):::Sets the description text of the specified row of the table.:::
JTable.AccessibleJTable.AccessibleTableHeader#getAccessibleColumnDescription(int):::Returns the description text of the specified column in the table.:::return
JTable.AccessibleJTable.AccessibleTableHeader#setAccessibleColumnDescription(int, Accessible):::Sets the description text of the specified column in the table.:::
JTable.AccessibleJTable.AccessibleTableHeader#isAccessibleSelected(int, int):::Returns a boolean value indicating whether the accessible at a specified row and column is selected.:::return
JTable.AccessibleJTable.AccessibleTableHeader#isAccessibleRowSelected(int):::Returns a boolean value indicating whether the specified row is selected.:::return
JTable.AccessibleJTable.AccessibleTableHeader#isAccessibleColumnSelected(int):::Returns a boolean value indicating whether the specified column is selected.:::return
JTable.AccessibleJTable.AccessibleTableHeader#getSelectedAccessibleRows():::Returns the selected rows in a table.:::return->new->intArr
JTable.AccessibleJTable.AccessibleTableHeader#getSelectedAccessibleColumns():::Returns the selected columns in a table.:::return->new->intArr
JTable.AccessibleJTable#setAccessibleColumnHeader(AccessibleTable):::Sets the column headers as an AccessibleTable.:::
JTable.AccessibleJTable#getAccessibleRowDescription(int):::Returns the description of the specified row in the table.:::if->getAccessibleRowCount->throw->Integer->toString->new->IllegalArgumentException->if->return->else->return
JTable.AccessibleJTable#setAccessibleRowDescription(int, Accessible):::Sets the description text of the specified row of the table.:::if->getAccessibleRowCount->throw->Integer->toString->new->IllegalArgumentException->if->numRows->getAccessibleRowCount->new->AccessibleArr
JTable.AccessibleJTable#getAccessibleColumnDescription(int):::Returns the description of the specified column in the table.:::if->getAccessibleColumnCount->throw->Integer->toString->new->IllegalArgumentException->if->return->else->return
JTable.AccessibleJTable#setAccessibleColumnDescription(int, Accessible):::Sets the description text of the specified column of the table.:::if->getAccessibleColumnCount->throw->Integer->toString->new->IllegalArgumentException->if->numColumns->getAccessibleColumnCount->new->AccessibleArr
JTable.AccessibleJTable#isAccessibleSelected(int, int):::Returns a boolean value indicating whether the accessible at a given (row, column) is selected.:::return->JTable.this->isCellSelected
JTable.AccessibleJTable#isAccessibleRowSelected(int):::Returns a boolean value indicating whether the specified row is selected.:::return->JTable.this->isRowSelected
JTable.AccessibleJTable#isAccessibleColumnSelected(int):::Returns a boolean value indicating whether the specified column is selected.:::return->JTable.this->isColumnSelected
JTable.AccessibleJTable#getSelectedAccessibleRows():::Returns the selected rows in a table.:::return->JTable.this->getSelectedRows
JTable.AccessibleJTable#getSelectedAccessibleColumns():::Returns the selected columns in a table.:::return->JTable.this->getSelectedColumns
JTable.AccessibleJTable#getAccessibleRowAtIndex(int):::Returns the row at a given index into the table.:::columnCount->getAccessibleColumnCount->if->return->else->return
JTable.AccessibleJTable#getAccessibleColumnAtIndex(int):::Returns the column at a given index into the table.:::columnCount->getAccessibleColumnCount->if->return->else->return
JTable.AccessibleJTable#getAccessibleIndexAt(int, int):::Returns the index at a given (row, column) in the table.:::return->getAccessibleColumnCount
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleContext():::Gets the AccessibleContext associated with this component:::return
JTable.AccessibleJTable.AccessibleJTableCell#getCurrentAccessibleContext():::Gets the AccessibleContext for the table cell renderer.:::aColumn->getColumnModel->getColumn->renderer->aColumn->getCellRenderer->if->columnClass->getColumnClass->getDefaultRenderer->component->renderer->getValueAt->getTableCellRendererComponent->if->return->component->getAccessibleContext->else->return
JTable.AccessibleJTable.AccessibleJTableCell#getCurrentComponent():::Gets the table cell renderer component.:::aColumn->getColumnModel->getColumn->renderer->aColumn->getCellRenderer->if->columnClass->getColumnClass->getDefaultRenderer->return->renderer->getTableCellRendererComponent
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleName():::Gets the accessible name of this object.:::ac->getCurrentAccessibleContext->if->name->ac->getAccessibleName->if->return->if->return->else->return->getClientProperty
JTable.AccessibleJTable.AccessibleJTableCell#setAccessibleName(String):::Sets the localized accessible name of this object.:::ac->getCurrentAccessibleContext->if->ac->setAccessibleName->else->super->setAccessibleName
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleDescription():::Gets the accessible description of this object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleDescription->else->return->super->getAccessibleDescription
JTable.AccessibleJTable.AccessibleJTableCell#setAccessibleDescription(String):::Sets the accessible description of this object.:::ac->getCurrentAccessibleContext->if->ac->setAccessibleDescription->else->super->setAccessibleDescription
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleRole():::Gets the role of this object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleRole->else->return
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleStateSet():::Gets the state set of this object.:::ac->getCurrentAccessibleContext->as->if->ac->getAccessibleStateSet->if->new->AccessibleStateSet->rjt->JTable.this->getVisibleRect->rcell->JTable.this->getCellRect->if->rjt->intersects->as->add->else->if->as->contains->as->remove->if->parent->isCellSelected->as->add->else->if->as->contains->as->remove->if->getSelectedRow->getSelectedColumn->as->add->as->add->return
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleParent():::Gets the Accessible parent of this object.:::return
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleIndexInParent():::Gets the index of this object in its accessible parent.:::return
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleChildrenCount():::Returns the number of accessible children in the object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleChildrenCount->else->return
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleChild(int):::Returns the specified Accessible child of the object.:::ac->getCurrentAccessibleContext->if->accessibleChild->ac->getAccessibleChild->ac->setAccessibleParent->return->else->return
JTable.AccessibleJTable.AccessibleJTableCell#getLocale():::Gets the locale of the component:::ac->getCurrentAccessibleContext->if->return->ac->getLocale->else->return
JTable.AccessibleJTable.AccessibleJTableCell#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::ac->getCurrentAccessibleContext->if->ac->addPropertyChangeListener->else->super->addPropertyChangeListener
JTable.AccessibleJTable.AccessibleJTableCell#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::ac->getCurrentAccessibleContext->if->ac->removePropertyChangeListener->else->super->removePropertyChangeListener
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleAction():::Gets the AccessibleAction associated with this object if one exists:::return->getCurrentAccessibleContext->getAccessibleAction
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleComponent():::Gets the AccessibleComponent associated with this object if one exists:::return
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleSelection():::Gets the AccessibleSelection associated with this object if one exists:::return->getCurrentAccessibleContext->getAccessibleSelection
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleText():::Gets the AccessibleText associated with this object if one exists:::return->getCurrentAccessibleContext->getAccessibleText
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleValue():::Gets the AccessibleValue associated with this object if one exists:::return->getCurrentAccessibleContext->getAccessibleValue
JTable.AccessibleJTable.AccessibleJTableCell#getBackground():::Gets the background color of this object.:::ac->getCurrentAccessibleContext->if->return->getBackground->else->c->getCurrentComponent->if->return->c->getBackground->else->return
JTable.AccessibleJTable.AccessibleJTableCell#setBackground(Color):::Sets the background color of this object.:::ac->getCurrentAccessibleContext->if->setBackground->else->cp->getCurrentComponent->if->cp->setBackground
JTable.AccessibleJTable.AccessibleJTableCell#getForeground():::Gets the foreground color of this object.:::ac->getCurrentAccessibleContext->if->return->getForeground->else->c->getCurrentComponent->if->return->c->getForeground->else->return
JTable.AccessibleJTable.AccessibleJTableCell#setForeground(Color):::Sets the foreground color of this object.:::ac->getCurrentAccessibleContext->if->setForeground->else->cp->getCurrentComponent->if->cp->setForeground
JTable.AccessibleJTable.AccessibleJTableCell#getCursor():::Gets the Cursor of this object.:::ac->getCurrentAccessibleContext->if->return->getCursor->else->c->getCurrentComponent->if->return->c->getCursor->else->ap->getAccessibleParent->if->return->getCursor->else->return
JTable.AccessibleJTable.AccessibleJTableCell#setCursor(Cursor):::Sets the Cursor of this object.:::ac->getCurrentAccessibleContext->if->setCursor->else->cp->getCurrentComponent->if->cp->setCursor
JTable.AccessibleJTable.AccessibleJTableCell#getFont():::Gets the Font of this object.:::ac->getCurrentAccessibleContext->if->return->getFont->else->c->getCurrentComponent->if->return->c->getFont->else->return
JTable.AccessibleJTable.AccessibleJTableCell#setFont(Font):::Sets the Font of this object.:::ac->getCurrentAccessibleContext->if->setFont->else->c->getCurrentComponent->if->c->setFont
JTable.AccessibleJTable.AccessibleJTableCell#getFontMetrics(Font):::Gets the FontMetrics of this object.:::ac->getCurrentAccessibleContext->if->return->getFontMetrics->else->c->getCurrentComponent->if->return->c->getFontMetrics->else->return
JTable.AccessibleJTable.AccessibleJTableCell#isEnabled():::Determines if the object is enabled.:::ac->getCurrentAccessibleContext->if->return->isEnabled->else->c->getCurrentComponent->if->return->c->isEnabled->else->return
JTable.AccessibleJTable.AccessibleJTableCell#setEnabled(boolean):::Sets the enabled state of the object.:::ac->getCurrentAccessibleContext->if->setEnabled->else->c->getCurrentComponent->if->c->setEnabled
JTable.AccessibleJTable.AccessibleJTableCell#isVisible():::Determines if this object is visible:::ac->getCurrentAccessibleContext->if->return->isVisible->else->c->getCurrentComponent->if->return->c->isVisible->else->return
JTable.AccessibleJTable.AccessibleJTableCell#setVisible(boolean):::Sets the visible state of the object.:::ac->getCurrentAccessibleContext->if->setVisible->else->c->getCurrentComponent->if->c->setVisible
JTable.AccessibleJTable.AccessibleJTableCell#isShowing():::Determines if the object is showing:::ac->getCurrentAccessibleContext->if->if->ac->getAccessibleParent->return->isShowing->else->return->isVisible->else->c->getCurrentComponent->if->return->c->isShowing->else->return
JTable.AccessibleJTable.AccessibleJTableCell#contains(Point):::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.:::ac->getCurrentAccessibleContext->if->r->getBounds->return->r->contains->else->c->getCurrentComponent->if->r->c->getBounds->return->r->contains->else->return->getBounds->contains
JTable.AccessibleJTable.AccessibleJTableCell#getLocationOnScreen():::Returns the location of the object on the screen.:::if->parent->isShowing->parentLocation->parent->getLocationOnScreen->componentLocation->getLocation->componentLocation->translate->return->else->return
JTable.AccessibleJTable.AccessibleJTableCell#getLocation():::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.:::if->r->parent->getCellRect->if->return->r->getLocation->return
JTable.AccessibleJTable.AccessibleJTableCell#setLocation(Point):::Sets the location of the object relative to the parent.:::
JTable.AccessibleJTable.AccessibleJTableCell#getBounds()::: accessible table cell get bounds:::if->return->parent->getCellRect->else->return
JTable.AccessibleJTable.AccessibleJTableCell#setBounds(Rectangle)::: accessible table cell set bounds:::ac->getCurrentAccessibleContext->if->setBounds->else->c->getCurrentComponent->if->c->setBounds
JTable.AccessibleJTable.AccessibleJTableCell#getSize()::: accessible table cell get size:::if->r->parent->getCellRect->if->return->r->getSize->return
JTable.AccessibleJTable.AccessibleJTableCell#setSize(Dimension)::: accessible table cell set size:::ac->getCurrentAccessibleContext->if->setSize->else->c->getCurrentComponent->if->c->setSize
JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleAt(Point)::: accessible table cell get accessible at:::ac->getCurrentAccessibleContext->if->return->getAccessibleAt->else->return
JTable.AccessibleJTable.AccessibleJTableCell#isFocusTraversable()::: accessible table cell is focus traversable:::ac->getCurrentAccessibleContext->if->return->isFocusTraversable->else->c->getCurrentComponent->if->return->c->isFocusTraversable->else->return
JTable.AccessibleJTable.AccessibleJTableCell#requestFocus()::: accessible table cell request focus:::ac->getCurrentAccessibleContext->if->requestFocus->else->c->getCurrentComponent->if->c->requestFocus
JTable.AccessibleJTable.AccessibleJTableCell#addFocusListener(FocusListener)::: accessible table cell add focus listener:::ac->getCurrentAccessibleContext->if->addFocusListener->else->c->getCurrentComponent->if->c->addFocusListener
JTable.AccessibleJTable.AccessibleJTableCell#removeFocusListener(FocusListener)::: accessible table cell remove focus listener:::ac->getCurrentAccessibleContext->if->removeFocusListener->else->c->getCurrentComponent->if->c->removeFocusListener
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleContext():::Gets the AccessibleContext associated with this component:::return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getCurrentAccessibleContext()::: accessible table header cell get current accessible context:::return->rendererComponent->getAccessibleContext
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getCurrentComponent()::: accessible table header cell get current component:::return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleName():::Gets the accessible name of this object.:::ac->getCurrentAccessibleContext->if->name->ac->getAccessibleName->if->return->ac->getAccessibleName->if->return->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setAccessibleName(String):::Sets the localized accessible name of this object.:::ac->getCurrentAccessibleContext->if->ac->setAccessibleName->else->super->setAccessibleName
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleDescription():::Gets the accessible description of this object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleDescription->else->return->super->getAccessibleDescription
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setAccessibleDescription(String):::Sets the accessible description of this object.:::ac->getCurrentAccessibleContext->if->ac->setAccessibleDescription->else->super->setAccessibleDescription
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleRole():::Gets the role of this object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleRole->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleStateSet():::Gets the state set of this object.:::ac->getCurrentAccessibleContext->as->if->ac->getAccessibleStateSet->if->new->AccessibleStateSet->rjt->JTable.this->getVisibleRect->rcell->JTable.this->getCellRect->if->rjt->intersects->as->add->else->if->as->contains->as->remove->if->JTable.this->isCellSelected->as->add->else->if->as->contains->as->remove->if->getSelectedRow->getSelectedColumn->as->add->as->add->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleParent():::Gets the Accessible parent of this object.:::return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleIndexInParent():::Gets the index of this object in its accessible parent.:::return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleChildrenCount():::Returns the number of accessible children in the object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleChildrenCount->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleChild(int):::Returns the specified Accessible child of the object.:::ac->getCurrentAccessibleContext->if->accessibleChild->ac->getAccessibleChild->ac->setAccessibleParent->return->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getLocale():::Gets the locale of the component:::ac->getCurrentAccessibleContext->if->return->ac->getLocale->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::ac->getCurrentAccessibleContext->if->ac->addPropertyChangeListener->else->super->addPropertyChangeListener
JTable.AccessibleJTable.AccessibleJTableHeaderCell#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::ac->getCurrentAccessibleContext->if->ac->removePropertyChangeListener->else->super->removePropertyChangeListener
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleAction():::Gets the AccessibleAction associated with this object if one exists:::return->getCurrentAccessibleContext->getAccessibleAction
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleComponent():::Gets the AccessibleComponent associated with this object if one exists:::return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleSelection():::Gets the AccessibleSelection associated with this object if one exists:::return->getCurrentAccessibleContext->getAccessibleSelection
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleText():::Gets the AccessibleText associated with this object if one exists:::return->getCurrentAccessibleContext->getAccessibleText
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleValue():::Gets the AccessibleValue associated with this object if one exists:::return->getCurrentAccessibleContext->getAccessibleValue
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getBackground():::Gets the background color of this object.:::ac->getCurrentAccessibleContext->if->return->getBackground->else->c->getCurrentComponent->if->return->c->getBackground->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setBackground(Color):::Sets the background color of this object.:::ac->getCurrentAccessibleContext->if->setBackground->else->cp->getCurrentComponent->if->cp->setBackground
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getForeground():::Gets the foreground color of this object.:::ac->getCurrentAccessibleContext->if->return->getForeground->else->c->getCurrentComponent->if->return->c->getForeground->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setForeground(Color):::Sets the foreground color of this object.:::ac->getCurrentAccessibleContext->if->setForeground->else->cp->getCurrentComponent->if->cp->setForeground
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getCursor():::Gets the Cursor of this object.:::ac->getCurrentAccessibleContext->if->return->getCursor->else->c->getCurrentComponent->if->return->c->getCursor->else->ap->getAccessibleParent->if->return->getCursor->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setCursor(Cursor):::Sets the Cursor of this object.:::ac->getCurrentAccessibleContext->if->setCursor->else->cp->getCurrentComponent->if->cp->setCursor
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getFont():::Gets the Font of this object.:::ac->getCurrentAccessibleContext->if->return->getFont->else->c->getCurrentComponent->if->return->c->getFont->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setFont(Font):::Sets the Font of this object.:::ac->getCurrentAccessibleContext->if->setFont->else->c->getCurrentComponent->if->c->setFont
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getFontMetrics(Font):::Gets the FontMetrics of this object.:::ac->getCurrentAccessibleContext->if->return->getFontMetrics->else->c->getCurrentComponent->if->return->c->getFontMetrics->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#isEnabled():::Determines if the object is enabled.:::ac->getCurrentAccessibleContext->if->return->isEnabled->else->c->getCurrentComponent->if->return->c->isEnabled->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setEnabled(boolean):::Sets the enabled state of the object.:::ac->getCurrentAccessibleContext->if->setEnabled->else->c->getCurrentComponent->if->c->setEnabled
JTable.AccessibleJTable.AccessibleJTableHeaderCell#isVisible():::Determines if this object is visible:::ac->getCurrentAccessibleContext->if->return->isVisible->else->c->getCurrentComponent->if->return->c->isVisible->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setVisible(boolean):::Sets the visible state of the object.:::ac->getCurrentAccessibleContext->if->setVisible->else->c->getCurrentComponent->if->c->setVisible
JTable.AccessibleJTable.AccessibleJTableHeaderCell#isShowing():::Determines if the object is showing:::ac->getCurrentAccessibleContext->if->if->ac->getAccessibleParent->return->isShowing->else->return->isVisible->else->c->getCurrentComponent->if->return->c->isShowing->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#contains(Point):::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.:::ac->getCurrentAccessibleContext->if->r->getBounds->return->r->contains->else->c->getCurrentComponent->if->r->c->getBounds->return->r->contains->else->return->getBounds->contains
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getLocationOnScreen():::Returns the location of the object on the screen.:::if->parent->isShowing->parentLocation->parent->getLocationOnScreen->componentLocation->getLocation->componentLocation->translate->return->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getLocation():::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.:::if->r->parent->getHeaderRect->if->return->r->getLocation->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setLocation(Point):::Sets the location of the object relative to the parent.:::
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getBounds():::Gets the bounds of this object in the form of a Rectangle object:::if->return->parent->getHeaderRect->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setBounds(Rectangle):::Sets the bounds of this object in the form of a Rectangle object:::ac->getCurrentAccessibleContext->if->setBounds->else->c->getCurrentComponent->if->c->setBounds
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getSize():::Returns the size of this object in the form of a Dimension object:::if->r->parent->getHeaderRect->if->return->r->getSize->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#setSize(Dimension):::Resizes this object so that it has width and height.:::ac->getCurrentAccessibleContext->if->setSize->else->c->getCurrentComponent->if->c->setSize
JTable.AccessibleJTable.AccessibleJTableHeaderCell#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point.:::ac->getCurrentAccessibleContext->if->return->getAccessibleAt->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#isFocusTraversable():::Returns whether this object can accept focus or not:::ac->getCurrentAccessibleContext->if->return->isFocusTraversable->else->c->getCurrentComponent->if->return->c->isFocusTraversable->else->return
JTable.AccessibleJTable.AccessibleJTableHeaderCell#requestFocus():::Requests focus for this object:::ac->getCurrentAccessibleContext->if->requestFocus->else->c->getCurrentComponent->if->c->requestFocus
JTable.AccessibleJTable.AccessibleJTableHeaderCell#addFocusListener(FocusListener):::Adds the specified focus listener to receive focus events from this component.:::ac->getCurrentAccessibleContext->if->addFocusListener->else->c->getCurrentComponent->if->c->addFocusListener
JTable.AccessibleJTable.AccessibleJTableHeaderCell#removeFocusListener(FocusListener):::Removes the specified focus listener so it no longer receives focus events from this component.:::ac->getCurrentAccessibleContext->if->removeFocusListener->else->c->getCurrentComponent->if->c->removeFocusListener
JTextArea#getUIClassID():::Returns the class ID for the UI.:::return
JTextArea#createDefaultModel():::Creates the default implementation of the model to be used at construction if one isn't explicitly given:::return->new->PlainDocument
JTextArea#setTabSize(int):::Sets the number of characters to expand tabs to:::doc->getDocument->if->old->getTabSize->doc->Integer->valueOf->putProperty->firePropertyChange
JTextArea#getTabSize():::Gets the number of characters used to expand tabs:::size->doc->getDocument->if->i->doc->getProperty->if->i->intValue->return
JTextArea#setLineWrap(boolean):::Sets the line-wrapping policy of the text area:::old->firePropertyChange
JTextArea#getLineWrap():::Gets the line-wrapping policy of the text area:::return
JTextArea#setWrapStyleWord(boolean):::Sets the style of wrapping used if the text area is wrapping lines:::old->firePropertyChange
JTextArea#getWrapStyleWord():::Gets the style of wrapping used if the text area is wrapping lines:::return
JTextArea#getLineOfOffset(int):::Translates an offset into the components text to a line number.:::doc->getDocument->if->throw->new->BadLocationException->else->if->doc->getLength->throw->doc->getLength->new->BadLocationException->else->map->getDocument->getDefaultRootElement->return->map->getElementIndex
JTextArea#getLineCount():::Determines the number of lines contained in the area.:::map->getDocument->getDefaultRootElement->return->map->getElementCount
JTextArea#getLineStartOffset(int):::Determines the offset of the start of the given line.:::lineCount->getLineCount->if->throw->new->BadLocationException->else->if->throw->getDocument->getLength->new->BadLocationException->else->map->getDocument->getDefaultRootElement->lineElem->map->getElement->return->lineElem->getStartOffset
JTextArea#getLineEndOffset(int):::Determines the offset of the end of the given line.:::lineCount->getLineCount->if->throw->new->BadLocationException->else->if->throw->getDocument->getLength->new->BadLocationException->else->map->getDocument->getDefaultRootElement->lineElem->map->getElement->endOffset->lineElem->getEndOffset->return
JTextArea#insert(String, int):::Inserts the specified text at the specified position:::doc->getDocument->if->try->doc->insertString->catch->throw->e->getMessage->new->IllegalArgumentException->finally
JTextArea#append(String):::Appends the given text to the end of the document:::doc->getDocument->if->try->doc->doc->getLength->insertString->catch->finally
JTextArea#replaceRange(String, int, int):::Replaces text from the indicated start to end position with the new text specified:::if->throw->new->IllegalArgumentException->doc->getDocument->if->try->if->replace->else->doc->remove->doc->insertString->catch->throw->e->getMessage->new->IllegalArgumentException->finally
JTextArea#getRows():::Returns the number of rows in the TextArea.:::return
JTextArea#setRows(int):::Sets the number of rows for this TextArea:::oldVal->if->throw->new->IllegalArgumentException->if->invalidate
JTextArea#getRowHeight():::Defines the meaning of the height of a row:::if->metrics->getFont->getFontMetrics->metrics->getHeight->return
JTextArea#getColumns():::Returns the number of columns in the TextArea.:::return
JTextArea#setColumns(int):::Sets the number of columns for this TextArea:::oldVal->if->throw->new->IllegalArgumentException->if->invalidate
JTextArea#getColumnWidth():::Gets column width:::if->metrics->getFont->getFontMetrics->metrics->charWidth->return
JTextArea#getPreferredSize():::Returns the preferred size of the TextArea:::d->super->getPreferredSize->new->Dimension->insets->getInsets->if->Math->getColumnWidth->max->if->Math->getRowHeight->max->return
JTextArea#setFont(Font):::Sets the current font:::super->setFont
JTextArea#paramString():::Returns a string representation of this JTextArea:::wrapString->wordString->return->super->paramString
JTextArea#getScrollableTracksViewportWidth():::Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport:::return->super->getScrollableTracksViewportWidth
JTextArea#getPreferredScrollableViewportSize():::Returns the preferred size of the viewport if this component is embedded in a JScrollPane:::size->super->getPreferredScrollableViewportSize->new->Dimension->insets->getInsets->getColumnWidth->getRowHeight->return
JTextArea#getScrollableUnitIncrement(Rectangle, int, int):::Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation:::switch->return->getRowHeight->return->getColumnWidth->throw->new->IllegalArgumentException
JTextArea#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JTextArea#getAccessibleContext():::Gets the AccessibleContext associated with this JTextArea:::if->new->AccessibleJTextArea->return
JTextArea.AccessibleJTextArea#getAccessibleStateSet():::Gets the state set of this object.:::states->super->getAccessibleStateSet->states->add->return
JTextField#getUIClassID():::Gets the class ID for a UI.:::return
JTextField#setDocument(Document):::Associates the editor with a text document:::if->doc->putProperty->super->setDocument
JTextField#isValidateRoot():::Calls to revalidate that come from within the textfield itself will be handled by validating the textfield, unless the textfield is contained within a JViewport, in which case this returns false.:::return->SwingUtilities->getUnwrappedParent
JTextField#getHorizontalAlignment():::Returns the horizontal alignment of the text:::return
JTextField#setHorizontalAlignment(int):::Sets the horizontal alignment of the text:::if->return->oldValue->if->else->throw->new->IllegalArgumentException->firePropertyChange->invalidate->repaint
JTextField#createDefaultModel():::Creates the default implementation of the model to be used at construction if one isn't explicitly given:::return->new->PlainDocument
JTextField#getColumns():::Returns the number of columns in this TextField.:::return
JTextField#setColumns(int):::Sets the number of columns in this TextField, and then invalidate the layout.:::oldVal->if->throw->new->IllegalArgumentException->if->invalidate
JTextField#getColumnWidth():::Returns the column width:::if->metrics->getFont->getFontMetrics->metrics->charWidth->return
JTextField#getPreferredSize():::Returns the preferred size Dimensions needed for this TextField:::size->super->getPreferredSize->if->insets->getInsets->getColumnWidth->return
JTextField#setFont(Font):::Sets the current font:::super->setFont
JTextField#addActionListener(ActionListener):::Adds the specified action listener to receive action events from this textfield.:::listenerList->add
JTextField#removeActionListener(ActionListener):::Removes the specified action listener so that it no longer receives action events from this textfield.:::if->getAction->setAction->else->listenerList->remove
JTextField#getActionListeners():::Returns an array of all the ActionListeners added to this JTextField with addActionListener().:::return->listenerList->getListeners
JTextField#fireActionPerformed():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->modifiers->currentEvent->EventQueue->getCurrentEvent->if->getModifiers->else->if->getModifiers->e->getText->EventQueue->getMostRecentEventTime->new->ActionEvent->for->i
JTextField#setActionCommand(String):::Sets the command string used for action events.:::
JTextField#setAction(Action):::Sets the Action for the ActionEvent source:::oldValue->getAction->if->action->equals->if->removeActionListener->oldValue->removePropertyChangeListener->configurePropertiesFromAction->if->if->isListener->addActionListener->createActionPropertyChangeListener->action->addPropertyChangeListener->firePropertyChange
JTextField#isListener(Class, ActionListener)::: text field is listener:::isListener->listeners->listenerList->getListenerList->for->i->return
JTextField#getAction():::Returns the currently set Action for this ActionEvent source, or null if no Action is set.:::return
JTextField#configurePropertiesFromAction(Action):::Sets the properties on this textfield to match those in the specified Action:::AbstractAction->setEnabledFromAction->AbstractAction->setToolTipTextFromAction->setActionCommandFromAction
JTextField#actionPropertyChanged(Action, String):::Updates the textfield's state in response to property changes in associated action:::if->setActionCommandFromAction->else->if->AbstractAction->setEnabledFromAction->else->if->AbstractAction->setToolTipTextFromAction
JTextField#setActionCommandFromAction(Action)::: text field set action command from action:::action->getValue->setActionCommand
JTextField#createActionPropertyChangeListener(Action):::Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties:::return->new->TextFieldActionPropertyChangeListener
JTextField.TextFieldActionPropertyChangeListener#actionPropertyChanged(JTextField, Action, PropertyChangeEvent)::: text field action property change listener action property changed:::if->AbstractAction->shouldReconfigure->textField->configurePropertiesFromAction->else->textField->e->getPropertyName->actionPropertyChanged
JTextField#getActions():::Fetches the command list for the editor:::return->TextAction->super->getActions->augmentList
JTextField#postActionEvent():::Processes action events occurring on this textfield by dispatching them to any registered ActionListener objects:::fireActionPerformed
JTextField#getHorizontalVisibility():::Gets the visibility of the text field:::return
JTextField#getScrollOffset():::Gets the scroll offset, in pixels.:::return->visibility->getValue
JTextField#setScrollOffset(int):::Sets the scroll offset, in pixels.:::visibility->setValue
JTextField#scrollRectToVisible(Rectangle):::Scrolls the field left or right.:::i->getInsets->x0->visibility->getValue->x1->if->visibility->getValue->visibility->setValue->else->if->visibility->getValue->visibility->getExtent->visibility->visibility->getExtent->setValue
JTextField#hasActionListener():::Returns true if the receiver has an ActionListener installed.:::listeners->listenerList->getListenerList->for->i->return
JTextField.NotifyAction#actionPerformed(ActionEvent)::: notify action action performed:::target->getFocusedComponent->if->field->field->postActionEvent
JTextField.NotifyAction#isEnabled()::: notify action is enabled:::target->getFocusedComponent->if->return->hasActionListener->return
JTextField.ScrollRepainter#stateChanged(ChangeEvent)::: scroll repainter state changed:::repaint
JTextField#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JTextField#paramString():::Returns a string representation of this JTextField:::horizontalAlignmentString->if->else->if->else->if->else->if->else->if->else->commandString->return->super->paramString
JTextField#getAccessibleContext():::Gets the AccessibleContext associated with this JTextField:::if->new->AccessibleJTextField->return
JTextField.AccessibleJTextField#getAccessibleStateSet():::Gets the state set of this object.:::states->super->getAccessibleStateSet->states->add->return
JTextPane#getUIClassID():::Returns the class ID for the UI.:::return
JTextPane#setDocument(Document):::Associates the editor with a text document:::if->super->setDocument->else->throw->new->IllegalArgumentException
JTextPane#setStyledDocument(StyledDocument):::Associates the editor with a text document:::super->setDocument
JTextPane#getStyledDocument():::Fetches the model associated with the editor.:::return->getDocument
JTextPane#replaceSelection(String):::Replaces the currently selected content with new content represented by the given string:::replaceSelection
JTextPane#replaceSelection(String, boolean)::: text pane replace selection:::if->isEditable->UIManager->getLookAndFeel->provideErrorFeedback->return->doc->getStyledDocument->if->try->caret->getCaret->composedTextSaved->caret->getDot->saveComposedText->p0->Math->caret->getDot->caret->getMark->min->p1->Math->caret->getDot->caret->getMark->max->attr->getInputAttributes->copyAttributes->if->replace->else->if->doc->remove->if->content->length->doc->insertString->if->restoreComposedText->catch->UIManager->getLookAndFeel->provideErrorFeedback->finally
JTextPane#insertComponent(Component):::Inserts a component into the document as a replacement for the currently selected content:::inputAttributes->getInputAttributes->inputAttributes->removeAttributes->StyleConstants->setComponent->replaceSelection->inputAttributes->removeAttributes
JTextPane#insertIcon(Icon):::Inserts an icon into the document as a replacement for the currently selected content:::inputAttributes->getInputAttributes->inputAttributes->removeAttributes->StyleConstants->setIcon->replaceSelection->inputAttributes->removeAttributes
JTextPane#addStyle(String, Style):::Adds a new style into the logical style hierarchy:::doc->getStyledDocument->return->doc->addStyle
JTextPane#removeStyle(String):::Removes a named non-null style previously added to the document.:::doc->getStyledDocument->doc->removeStyle
JTextPane#getStyle(String):::Fetches a named non-null style previously added.:::doc->getStyledDocument->return->doc->getStyle
JTextPane#setLogicalStyle(Style):::Sets the logical style to use for the paragraph at the current caret position:::doc->getStyledDocument->doc->getCaretPosition->setLogicalStyle
JTextPane#getLogicalStyle():::Fetches the logical style assigned to the paragraph represented by the current position of the caret, or null.:::doc->getStyledDocument->return->doc->getCaretPosition->getLogicalStyle
JTextPane#getCharacterAttributes():::Fetches the character attributes in effect at the current location of the caret, or null.:::doc->getStyledDocument->run->doc->getCaretPosition->getCharacterElement->if->return->run->getAttributes->return
JTextPane#setCharacterAttributes(AttributeSet, boolean):::Applies the given attributes to character content:::p0->getSelectionStart->p1->getSelectionEnd->if->doc->getStyledDocument->doc->setCharacterAttributes->else->inputAttributes->getInputAttributes->if->inputAttributes->removeAttributes->inputAttributes->addAttributes
JTextPane#getParagraphAttributes():::Fetches the current paragraph attributes in effect at the location of the caret, or null if none.:::doc->getStyledDocument->paragraph->doc->getCaretPosition->getParagraphElement->if->return->paragraph->getAttributes->return
JTextPane#setParagraphAttributes(AttributeSet, boolean):::Applies the given attributes to paragraphs:::p0->getSelectionStart->p1->getSelectionEnd->doc->getStyledDocument->doc->setParagraphAttributes
JTextPane#getInputAttributes():::Gets the input attributes for the pane.:::return->getStyledEditorKit->getInputAttributes
JTextPane#getStyledEditorKit():::Gets the editor kit.:::return->getEditorKit
JTextPane#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JTextPane#createDefaultEditorKit():::Creates the EditorKit to use by default:::return->new->StyledEditorKit
JTextPane#setEditorKit(EditorKit):::Sets the currently installed kit for handling content:::if->super->setEditorKit->else->throw->new->IllegalArgumentException
JTextPane#paramString():::Returns a string representation of this JTextPane:::return->super->paramString
JToggleButton#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JToggleButton#getUIClassID():::Returns a string that specifies the name of the l&amp;f class that renders this component.:::return
JToggleButton#shouldUpdateSelectedStateFromAction():::Overriden to return true, JToggleButton supports the selected state.:::return
JToggleButton#getGroupSelection(FocusEvent.Cause)::: toggle button get group selection:::switch->model->getModel->selection->if->group->model->getGroup->if->group->getSelection->group->isSelected->iterator->group->getElements->asIterator->while->iterator->hasNext->member->iterator->next->if->group->member->getModel->isSelected->if->member->isVisible->member->isDisplayable->member->isEnabled->member->isFocusable->break->return->return
JToggleButton#requestFocus(FocusEvent.Cause):::If this toggle button is a member of the ButtonGroup which has another toggle button which is selected and can be the focus owner, and the focus cause argument denotes window activation or focus traversal action of any direction the result of the method execution is the same as calling Component#requestFocus(FocusEvent.Cause) on the toggle button selected in the group:::getGroupSelection->requestFocusUnconditionally
JToggleButton#requestFocusUnconditionally(FocusEvent.Cause)::: toggle button request focus unconditionally:::super->requestFocus
JToggleButton#requestFocusInWindow(FocusEvent.Cause):::If this toggle button is a member of the ButtonGroup which has another toggle button which is selected and can be the focus owner, and the focus cause argument denotes window activation or focus traversal action of any direction the result of the method execution is the same as calling Component#requestFocusInWindow(FocusEvent.Cause) on the toggle button selected in the group:::return->getGroupSelection->requestFocusInWindowUnconditionally
JToggleButton#requestFocusInWindowUnconditionally(FocusEvent.Cause)::: toggle button request focus in window unconditionally:::return->super->requestFocusInWindow
JToggleButton.ToggleButtonModel#isSelected():::Checks if the button is selected.:::return
JToggleButton.ToggleButtonModel#setSelected(boolean):::Sets the selected state of the button.:::group->getGroup->if->group->setSelected->group->isSelected->if->isSelected->return->if->else->fireStateChanged->this->isSelected->new->ItemEvent->fireItemStateChanged
JToggleButton.ToggleButtonModel#setPressed(boolean):::Sets the pressed state of the toggle button.:::if->isPressed->isEnabled->return->if->isArmed->this->isSelected->setSelected->if->else->fireStateChanged->if->isPressed->isArmed->modifiers->currentEvent->EventQueue->getCurrentEvent->if->getModifiers->else->if->getModifiers->getActionCommand->EventQueue->getMostRecentEventTime->new->ActionEvent->fireActionPerformed
JToggleButton#writeObject(ObjectOutputStream):::See readObject() and writeObject() in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JToggleButton#paramString():::Returns a string representation of this JToggleButton:::return->super->paramString
JToggleButton#getAccessibleContext():::Gets the AccessibleContext associated with this JToggleButton:::if->new->AccessibleJToggleButton->return
JToggleButton.AccessibleJToggleButton#itemStateChanged(ItemEvent):::Fire accessible property change events when the state of the toggle button changes.:::tb->e->getSource->if->if->tb->isSelected->firePropertyChange->else->firePropertyChange
JToggleButton.AccessibleJToggleButton#getAccessibleRole():::Get the role of this object.:::return
JToolBar#getUI():::Returns the tool bar's current UI.:::return
JToolBar#setUI(ToolBarUI):::Sets the L&amp;F object that renders this component.:::super->setUI
JToolBar#updateUI():::Notification from the UIFactory that the L&amp;F has changed:::UIManager->getUI->setUI->if->getLayout->getOrientation->new->DefaultToolBarLayout->setLayout->invalidate
JToolBar#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JToolBar#getComponentIndex(Component):::Returns the index of the specified component:::ncomponents->this->getComponentCount->component->this->getComponents->for->i->return
JToolBar#getComponentAtIndex(int):::Returns the component at the specified index.:::ncomponents->this->getComponentCount->if->component->this->getComponents->return->return
JToolBar#setMargin(Insets):::Sets the margin between the tool bar's border and its buttons:::old->firePropertyChange->revalidate->repaint
JToolBar#getMargin():::Returns the margin between the tool bar's border and its buttons.:::if->return->new->Insets->else->return
JToolBar#isBorderPainted():::Gets the borderPainted property.:::return
JToolBar#setBorderPainted(boolean):::Sets the borderPainted property, which is true if the border should be painted:::if->old->firePropertyChange->revalidate->repaint
JToolBar#paintBorder(Graphics):::Paints the tool bar's border if the borderPainted property is true.:::if->isBorderPainted->super->paintBorder
JToolBar#isFloatable():::Gets the floatable property.:::return
JToolBar#setFloatable(boolean):::Sets the floatable property, which must be true for the user to move the tool bar:::if->old->firePropertyChange->revalidate->repaint
JToolBar#getOrientation():::Returns the current orientation of the tool bar:::return
JToolBar#setOrientation(int):::Sets the orientation of the tool bar:::checkOrientation->if->old->firePropertyChange->revalidate->repaint
JToolBar#setRollover(boolean):::Sets the rollover state of this toolbar:::putClientProperty
JToolBar#isRollover():::Returns the rollover state.:::rollover->getClientProperty->if->return->rollover->booleanValue->return
JToolBar#checkOrientation(int)::: tool bar check orientation:::switch->break->throw->new->IllegalArgumentException
JToolBar#addSeparator():::Appends a separator of default size to the end of the tool bar:::addSeparator
JToolBar#addSeparator(Dimension):::Appends a separator of a specified size to the end of the tool bar.:::s->new->JToolBar.Separator->add
JToolBar#add(Action):::Adds a new JButton which dispatches the action.:::b->createActionComponent->b->setAction->add->return
JToolBar#createActionComponent(Action):::Factory method which creates the JButton for Actions added to the JToolBar:::b->new->JButton->if->a->getValue->a->getValue->b->setHideActionText->b->setHorizontalTextPosition->b->setVerticalTextPosition->return
JToolBar#createActionChangeListener(JButton):::Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur, or null if the default property change listener for the control is desired.:::return
JToolBar#addImpl(Component, Object, int):::If a JButton is being added, it is initially set to be disabled.:::if->if->getOrientation->setOrientation->else->setOrientation->super->addImpl->if->setDefaultCapable
JToolBar.Separator#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JToolBar.Separator#setSeparatorSize(Dimension):::Sets the size of the separator.:::if->else->super->updateUI->this->invalidate
JToolBar.Separator#getSeparatorSize():::Returns the size of the separator:::return
JToolBar.Separator#getMinimumSize():::Returns the minimum size for the separator.:::if->return->separatorSize->getSize->else->return->super->getMinimumSize
JToolBar.Separator#getMaximumSize():::Returns the maximum size for the separator.:::if->return->separatorSize->getSize->else->return->super->getMaximumSize
JToolBar.Separator#getPreferredSize():::Returns the preferred size for the separator.:::if->return->separatorSize->getSize->else->return->super->getPreferredSize
JToolBar#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JToolBar#paramString():::Returns a string representation of this JToolBar:::paintBorderString->marginString->margin->toString->floatableString->orientationString->return->super->paramString
JToolBar.DefaultToolBarLayout#addLayoutComponent(String, Component)::: default tool bar layout add layout component:::lm->addLayoutComponent
JToolBar.DefaultToolBarLayout#addLayoutComponent(Component, Object)::: default tool bar layout add layout component:::lm->addLayoutComponent
JToolBar.DefaultToolBarLayout#removeLayoutComponent(Component)::: default tool bar layout remove layout component:::lm->removeLayoutComponent
JToolBar.DefaultToolBarLayout#preferredLayoutSize(Container)::: default tool bar layout preferred layout size:::return->lm->preferredLayoutSize
JToolBar.DefaultToolBarLayout#minimumLayoutSize(Container)::: default tool bar layout minimum layout size:::return->lm->minimumLayoutSize
JToolBar.DefaultToolBarLayout#maximumLayoutSize(Container)::: default tool bar layout maximum layout size:::return->lm->maximumLayoutSize
JToolBar.DefaultToolBarLayout#layoutContainer(Container)::: default tool bar layout layout container:::lm->layoutContainer
JToolBar.DefaultToolBarLayout#getLayoutAlignmentX(Container)::: default tool bar layout get layout alignment x:::return->lm->getLayoutAlignmentX
JToolBar.DefaultToolBarLayout#getLayoutAlignmentY(Container)::: default tool bar layout get layout alignment y:::return->lm->getLayoutAlignmentY
JToolBar.DefaultToolBarLayout#invalidateLayout(Container)::: default tool bar layout invalidate layout:::lm->invalidateLayout
JToolBar.DefaultToolBarLayout#propertyChange(PropertyChangeEvent)::: default tool bar layout property change:::name->e->getPropertyName->if->name->equals->o->e->getNewValue->intValue->if->new->BoxLayout->else->new->BoxLayout
JToolBar#setLayout(LayoutManager)::: tool bar set layout:::oldMgr->getLayout->if->removePropertyChangeListener->super->setLayout
JToolBar#getAccessibleContext():::Gets the AccessibleContext associated with this JToolBar:::if->new->AccessibleJToolBar->return
JToolBar.AccessibleJToolBar#getAccessibleStateSet():::Get the state of this object.:::states->super->getAccessibleStateSet->return
JToolBar.AccessibleJToolBar#getAccessibleRole():::Get the role of this object.:::return
JToolTip#getUI():::Returns the L&amp;F object that renders this component.:::return
JToolTip#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JToolTip#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JToolTip#setTipText(String):::Sets the text to show when the tool tip is displayed:::oldValue->firePropertyChange->if->Objects->equals->revalidate->repaint
JToolTip#getTipText():::Returns the text that is shown when the tool tip is displayed:::return
JToolTip#setComponent(JComponent):::Specifies the component that the tooltip describes:::oldValue->firePropertyChange
JToolTip#getComponent():::Returns the component the tooltip applies to:::return
JToolTip#alwaysOnTop()::: tool tip always on top:::return
JToolTip#writeObject(ObjectOutputStream):::See readObject and writeObject in JComponent for more information about serialization in Swing.:::s->defaultWriteObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JToolTip#paramString():::Returns a string representation of this JToolTip:::tipTextString->return->super->paramString
JToolTip#getAccessibleContext():::Gets the AccessibleContext associated with this JToolTip:::if->new->AccessibleJToolTip->return
JToolTip.AccessibleJToolTip#getAccessibleDescription():::Get the accessible description of this object.:::description->if->getClientProperty->if->getTipText->return
JToolTip.AccessibleJToolTip#getAccessibleRole():::Get the role of this object.:::return
JTree.DropLocation#getChildIndex():::Returns the index where the dropped data should be inserted with respect to the path returned by getPath():::return
JTree.DropLocation#getPath():::Returns the path where dropped data should be placed in the tree:::return
JTree.DropLocation#toString():::Returns a string representation of this drop location:::return->getClass->getName->getDropPoint
JTree.TreeTimer#fireActionPerformed(ActionEvent)::: tree timer fire action performed:::JTree.this->expandRow
JTree#getDefaultTreeModel():::Creates and returns a sample TreeModel:::root->new->DefaultMutableTreeNode->parent->new->DefaultMutableTreeNode->root->add->parent->new->DefaultMutableTreeNode->add->parent->new->DefaultMutableTreeNode->add->parent->new->DefaultMutableTreeNode->add->parent->new->DefaultMutableTreeNode->add->new->DefaultMutableTreeNode->root->add->parent->new->DefaultMutableTreeNode->add->parent->new->DefaultMutableTreeNode->add->parent->new->DefaultMutableTreeNode->add->parent->new->DefaultMutableTreeNode->add->new->DefaultMutableTreeNode->root->add->parent->new->DefaultMutableTreeNode->add->parent->new->DefaultMutableTreeNode->add->parent->new->DefaultMutableTreeNode->add->parent->new->DefaultMutableTreeNode->add->return->new->DefaultTreeModel
JTree#createTreeModel(Object):::Returns a TreeModel wrapping the specified object:::root->if->new->DefaultMutableTreeNode->DynamicUtilTreeNode->createChildren->else->new->DynamicUtilTreeNode->return->new->DefaultTreeModel
JTree#getUI():::Returns the L&amp;F object that renders this component.:::return
JTree#setUI(TreeUI):::Sets the L&amp;F object that renders this component:::if->try->super->setUI->catch->finally
JTree#updateUI():::Notification from the UIManager that the L&amp;F has changed:::if->try->UIManager->getUI->setUI->SwingUtilities->getCellRenderer->updateRendererOrEditorUI->SwingUtilities->getCellEditor->updateRendererOrEditorUI->catch->finally
JTree#getUIClassID():::Returns the name of the L&amp;F class that renders this component.:::return
JTree#getCellRenderer():::Returns the current TreeCellRenderer  that is rendering each cell.:::return
JTree#setCellRenderer(TreeCellRenderer):::Sets the TreeCellRenderer that will be used to draw each cell:::oldValue->firePropertyChange->invalidate
JTree#setEditable(boolean):::Determines whether the tree is editable:::oldValue->firePropertyChange->if->accessibleContext->firePropertyChange
JTree#isEditable():::Returns true if the tree is editable.:::return
JTree#setCellEditor(TreeCellEditor):::Sets the cell editor:::oldEditor->firePropertyChange->invalidate
JTree#getCellEditor():::Returns the editor used to edit entries in the tree.:::return
JTree#getModel():::Returns the TreeModel that is providing the data.:::return
JTree#setModel(TreeModel):::Sets the TreeModel that will provide the data:::clearSelection->oldModel->if->treeModel->removeTreeModelListener->if->if->treeModel->removeTreeModelListener->if->newModel->addTreeModelListener->clearToggledPaths->if->if->createTreeModelListener->if->treeModel->addTreeModelListener->treeRoot->treeModel->getRoot->if->treeModel->isLeaf->expandedState->new->TreePath->put->firePropertyChange->invalidate
JTree#isRootVisible():::Returns true if the root node of the tree is displayed.:::return
JTree#setRootVisible(boolean):::Determines whether or not the root node from the TreeModel is visible:::oldValue->firePropertyChange->if->fireVisibleDataPropertyChange
JTree#setShowsRootHandles(boolean):::Sets the value of the showsRootHandles property, which specifies whether the node handles should be displayed:::oldValue->model->getModel->firePropertyChange->if->fireVisibleDataPropertyChange->invalidate
JTree#getShowsRootHandles():::Returns the value of the showsRootHandles property.:::return
JTree#setRowHeight(int):::Sets the height of each cell, in pixels:::oldValue->firePropertyChange->invalidate
JTree#getRowHeight():::Returns the height of each row:::return
JTree#isFixedRowHeight():::Returns true if the height of each display row is a fixed size.:::return
JTree#setLargeModel(boolean):::Specifies whether the UI should use a large model:::oldValue->firePropertyChange
JTree#isLargeModel():::Returns true if the tree is configured for a large model.:::return
JTree#setInvokesStopCellEditing(boolean):::Determines what happens when editing is interrupted by selecting another node in the tree, a change in the tree's data, or by some other means:::oldValue->firePropertyChange
JTree#getInvokesStopCellEditing():::Returns the indicator that tells what happens when editing is interrupted.:::return
JTree#setScrollsOnExpand(boolean):::Sets the scrollsOnExpand property, which determines whether the tree might scroll to show previously hidden children:::oldValue->firePropertyChange
JTree#getScrollsOnExpand():::Returns the value of the scrollsOnExpand property.:::return
JTree#setToggleClickCount(int):::Sets the number of mouse clicks before a node will expand or close:::oldCount->firePropertyChange
JTree#getToggleClickCount():::Returns the number of mouse clicks needed to expand or close a node.:::return
JTree#setExpandsSelectedPaths(boolean):::Configures the expandsSelectedPaths property:::oldValue->firePropertyChange
JTree#getExpandsSelectedPaths():::Returns the expandsSelectedPaths property.:::return
JTree#setDragEnabled(boolean):::Turns on or off automatic drag handling:::checkDragEnabled
JTree#checkDragEnabled(boolean)::: tree check drag enabled:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException
JTree#getDragEnabled():::Returns whether or not automatic drag handling is enabled.:::return
JTree#setDropMode(DropMode):::Sets the drop mode for this component:::checkDropMode
JTree#checkDropMode(DropMode)::: tree check drop mode:::if->switch->return->throw->new->IllegalArgumentException
JTree#getDropMode():::Returns the drop mode for this component.:::return
JTree#dropLocationForPoint(Point):::Calculates a drop location in this component, representing where a drop at the given point should insert data.:::location->row->getClosestRowForLocation->bounds->getRowBounds->model->getModel->root->model->getRoot->rootPath->new->TreePath->child->parent->outside->switch->if->new->DropLocation->else->getPathForRow->new->DropLocation->break->if->if->model->isLeaf->isExpanded->new->DropLocation->else->new->DropLocation->break->checkOn->model->getPathForRow->getLastPathComponent->isLeaf->section->SwingUtilities2->liesInVertical->if->getPathForRow->child->getParentPath->else->if->index->if->getRowCount->if->model->isLeaf->isExpanded->new->DropLocation->else->model->getChildCount->new->DropLocation->break->getPathForRow->child->getParentPath->prev->getPathForRow->getParentPath->if->prev->equals->model->prev->getLastPathComponent->getChildCount->new->DropLocation->break->else->getPathForRow->new->DropLocation->break->if->model->parent->getLastPathComponent->child->getLastPathComponent->getIndexOfChild->new->DropLocation->else->if->model->isLeaf->new->DropLocation->else->new->DropLocation->break->if->cancelDropTimer->if->if->isCollapsed->startDropTimer->return
JTree#setDropLocation(TransferHandler.DropLocation, Object, boolean):::Called to set or clear the drop location during a DnD operation:::retVal->treeLocation->if->if->if->setSelectionPaths->setAnchorSelectionPath->setLeadSelectionPath->else->if->paths->getSelectionPaths->if->new->TreePathArr->new->TreePathArrs->getAnchorSelectionPath->getLeadSelectionPath->else->treeLocation->getPath->setSelectionPath->old->firePropertyChange->return
JTree#dndDone():::Called to indicate to this component that DnD is done:::cancelDropTimer
JTree#getDropLocation():::Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown:::return
JTree#startDropTimer()::: tree start drop timer:::if->new->TreeTimer->dropTimer->start
JTree#cancelDropTimer()::: tree cancel drop timer:::if->dropTimer->isRunning->dropTimer->stop
JTree#isPathEditable(TreePath):::Returns isEditable:::return->isEditable
JTree#getToolTipText(MouseEvent):::Overrides JComponent's getToolTipText method in order to allow renderer's tips to be used if it has text set:::tip->if->p->event->getPoint->selRow->getRowForLocation->r->getCellRenderer->if->path->getPathForRow->lastPath->path->getLastPathComponent->rComponent->r->isRowSelected->isExpanded->getModel->isLeaf->getTreeCellRendererComponent->if->newEvent->pathBounds->getPathBounds->p->translate->modifiers->event->getModifiers->event->getID->event->getWhen->event->getXOnScreen->event->getYOnScreen->event->getClickCount->event->isPopupTrigger->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->getToolTipText->if->getToolTipText->return
JTree#convertValueToText(Object, boolean, boolean, boolean, int, boolean):::Called by the renderers to convert the specified value to text:::if->sValue->value->toString->if->return->return
JTree#getRowCount():::Returns the number of viewable nodes:::tree->getUI->if->return->tree->getRowCount->return
JTree#setSelectionPath(TreePath):::Selects the node identified by the specified path:::getSelectionModel->setSelectionPath
JTree#setSelectionPaths(TreePath[]):::Selects the nodes identified by the specified array of paths:::getSelectionModel->setSelectionPaths
JTree#setLeadSelectionPath(TreePath):::Sets the path identifies as the lead:::oldValue->firePropertyChange->if->fireActiveDescendantPropertyChange
JTree#setAnchorSelectionPath(TreePath):::Sets the path identified as the anchor:::oldValue->firePropertyChange
JTree#setSelectionRow(int):::Selects the node at the specified row in the display.:::rows->setSelectionRows
JTree#setSelectionRows(int[]):::Selects the nodes corresponding to each of the specified rows in the display:::ui->getUI->if->numRows->paths->new->TreePathArr->for->counter->setSelectionPaths
JTree#addSelectionPath(TreePath):::Adds the node identified by the specified TreePath to the current selection:::getSelectionModel->addSelectionPath
JTree#addSelectionPaths(TreePath[]):::Adds each path in the array of paths to the current selection:::getSelectionModel->addSelectionPaths
JTree#addSelectionRow(int):::Adds the path at the specified row to the current selection.:::rows->addSelectionRows
JTree#addSelectionRows(int[]):::Adds the paths at each of the specified rows to the current selection.:::ui->getUI->if->numRows->paths->new->TreePathArr->for->counter->addSelectionPaths
JTree#getLastSelectedPathComponent():::Returns the last path component of the selected path:::selPath->getSelectionModel->getSelectionPath->if->return->selPath->getLastPathComponent->return
JTree#getLeadSelectionPath():::Returns the path identified as the lead.:::return
JTree#getAnchorSelectionPath():::Returns the path identified as the anchor.:::return
JTree#getSelectionPath():::Returns the path to the first selected node.:::return->getSelectionModel->getSelectionPath
JTree#getSelectionPaths():::Returns the paths of all selected values.:::selectionPaths->getSelectionModel->getSelectionPaths->return
JTree#getSelectionRows():::Returns all of the currently selected rows:::return->getSelectionModel->getSelectionRows
JTree#getSelectionCount():::Returns the number of nodes selected.:::return->selectionModel->getSelectionCount
JTree#getMinSelectionRow():::Returns the smallest selected row:::return->getSelectionModel->getMinSelectionRow
JTree#getMaxSelectionRow():::Returns the largest selected row:::return->getSelectionModel->getMaxSelectionRow
JTree#getLeadSelectionRow():::Returns the row index corresponding to the lead path.:::leadPath->getLeadSelectionPath->if->return->getRowForPath->return
JTree#isPathSelected(TreePath):::Returns true if the item identified by the path is currently selected.:::return->getSelectionModel->isPathSelected
JTree#isRowSelected(int):::Returns true if the node identified by row is selected.:::return->getSelectionModel->isRowSelected
JTree#getExpandedDescendants(TreePath):::Returns an Enumeration of the descendants of the path parent that are currently expanded:::if->isExpanded->return->toggledPaths->expandedState->keys->elements->path->value->if->while->toggledPaths->hasMoreElements->toggledPaths->nextElement->expandedState->get->if->booleanValue->parent->isDescendant->isVisible->if->new->Vector<TreePath>->elements->addElement->if->empty->Collections->emptySet->return->Collections->enumeration->return->elements->elements
JTree#hasBeenExpanded(TreePath):::Returns true if the node identified by the path has ever been expanded.:::return->expandedState->get
JTree#isExpanded(TreePath):::Returns true if the node identified by the path is currently expanded,:::if->return->value->do->expandedState->get->if->booleanValue->return->while->path->getParentPath->return
JTree#isExpanded(int):::Returns true if the node at the specified display row is currently expanded.:::tree->getUI->if->path->tree->getPathForRow->if->value->expandedState->get->return->value->booleanValue->return
JTree#isCollapsed(TreePath):::Returns true if the value identified by path is currently collapsed, this will return false if any of the values in path are currently not being displayed.:::return->isExpanded
JTree#isCollapsed(int):::Returns true if the node at the specified display row is collapsed.:::return->isExpanded
JTree#makeVisible(TreePath):::Ensures that the node identified by path is currently viewable.:::if->parentPath->path->getParentPath->if->expandPath
JTree#isVisible(TreePath):::Returns true if the value identified by path is currently viewable, which means it is either the root or all of its parents are expanded:::if->parentPath->path->getParentPath->if->return->isExpanded->return->return
JTree#getPathBounds(TreePath):::Returns the Rectangle that the specified node will be drawn into:::tree->getUI->if->return->tree->getPathBounds->return
JTree#getRowBounds(int):::Returns the Rectangle that the node at the specified row is drawn in.:::return->getPathForRow->getPathBounds
JTree#scrollPathToVisible(TreePath):::Makes sure all the path components in path are expanded (except for the last path component) and scrolls so that the node identified by the path is displayed:::if->makeVisible->bounds->getPathBounds->if->scrollRectToVisible->if->fireVisibleDataPropertyChange
JTree#scrollRowToVisible(int):::Scrolls the item identified by row until it is displayed:::getPathForRow->scrollPathToVisible
JTree#getPathForRow(int):::Returns the path for the specified row:::tree->getUI->if->return->tree->getPathForRow->return
JTree#getRowForPath(TreePath):::Returns the row that displays the node identified by the specified path.:::tree->getUI->if->return->tree->getRowForPath->return
JTree#expandPath(TreePath):::Ensures that the node identified by the specified path is expanded and viewable:::model->getModel->if->model->path->getLastPathComponent->isLeaf->setExpandedState
JTree#expandRow(int):::Ensures that the node in the specified row is expanded and viewable:::getPathForRow->expandPath
JTree#collapsePath(TreePath):::Ensures that the node identified by the specified path is collapsed and viewable.:::setExpandedState
JTree#collapseRow(int):::Ensures that the node in the specified row is collapsed:::getPathForRow->collapsePath
JTree#getPathForLocation(int, int):::Returns the path for the node at the specified location.:::closestPath->getClosestPathForLocation->if->pathBounds->getPathBounds->if->return->return
JTree#getRowForLocation(int, int):::Returns the row for the specified location.:::return->getPathForLocation->getRowForPath
JTree#getClosestPathForLocation(int, int):::Returns the path to the node that is closest to x,y:::tree->getUI->if->return->tree->getClosestPathForLocation->return
JTree#getClosestRowForLocation(int, int):::Returns the row to the node that is closest to x,y:::return->getClosestPathForLocation->getRowForPath
JTree#isEditing():::Returns true if the tree is being edited:::tree->getUI->if->return->tree->isEditing->return
JTree#stopEditing():::Ends the current editing session:::tree->getUI->if->return->tree->stopEditing->return
JTree#cancelEditing():::Cancels the current editing session:::tree->getUI->if->tree->cancelEditing
JTree#startEditingAtPath(TreePath):::Selects the node identified by the specified path and initiates editing:::tree->getUI->if->tree->startEditingAtPath
JTree#getEditingPath():::Returns the path to the element that is currently being edited.:::tree->getUI->if->return->tree->getEditingPath->return
JTree#setSelectionModel(TreeSelectionModel):::Sets the tree's selection model:::if->EmptySelectionModel->sharedInstance->oldValue->if->removeTreeSelectionListener->if->removeTreeSelectionListener->selectionModel->addTreeSelectionListener->if->addTreeSelectionListener->firePropertyChange->if->accessibleContext->Boolean->valueOf->Boolean->valueOf->firePropertyChange
JTree#getSelectionModel():::Returns the model for selections:::return
JTree#getPathBetweenRows(int, int):::Returns the paths (inclusive) between the specified rows:::tree->getUI->if->rowCount->getRowCount->if->Math->Math->max->min->Math->Math->max->min->minIndex->Math->min->maxIndex->Math->max->selection->new->TreePathArr->for->counter->return->return->new->TreePathArr
JTree#setSelectionInterval(int, int):::Selects the rows in the specified interval (inclusive):::paths->getPathBetweenRows->this->getSelectionModel->setSelectionPaths
JTree#addSelectionInterval(int, int):::Adds the specified rows (inclusive) to the selection:::paths->getPathBetweenRows->if->this->getSelectionModel->addSelectionPaths
JTree#removeSelectionInterval(int, int):::Removes the specified rows (inclusive) from the selection:::paths->getPathBetweenRows->if->this->getSelectionModel->removeSelectionPaths
JTree#removeSelectionPath(TreePath):::Removes the node identified by the specified path from the current selection.:::this->getSelectionModel->removeSelectionPath
JTree#removeSelectionPaths(TreePath[]):::Removes the nodes identified by the specified paths from the current selection.:::this->getSelectionModel->removeSelectionPaths
JTree#removeSelectionRow(int):::Removes the row at the index row from the current selection.:::rows->removeSelectionRows
JTree#removeSelectionRows(int[]):::Removes the rows that are selected at each of the specified rows.:::ui->getUI->if->numRows->paths->new->TreePathArr->for->counter->removeSelectionPaths
JTree#clearSelection():::Clears the selection.:::getSelectionModel->clearSelection
JTree#isSelectionEmpty():::Returns true if the selection is currently empty.:::return->getSelectionModel->isSelectionEmpty
JTree#addTreeExpansionListener(TreeExpansionListener):::Adds a listener for TreeExpansion events.:::if->listenerList->add
JTree#removeTreeExpansionListener(TreeExpansionListener):::Removes a listener for TreeExpansion events.:::listenerList->remove->if
JTree#getTreeExpansionListeners():::Returns an array of all the TreeExpansionListeners added to this JTree with addTreeExpansionListener().:::return->listenerList->getListeners
JTree#addTreeWillExpandListener(TreeWillExpandListener):::Adds a listener for TreeWillExpand events.:::listenerList->add
JTree#removeTreeWillExpandListener(TreeWillExpandListener):::Removes a listener for TreeWillExpand events.:::listenerList->remove
JTree#getTreeWillExpandListeners():::Returns an array of all the TreeWillExpandListeners added to this JTree with addTreeWillExpandListener().:::return->listenerList->getListeners
JTree#fireTreeExpanded(TreePath):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->if->new->TreeExpansionEvent->uiTreeExpansionListener->treeExpanded->for->i
JTree#fireTreeCollapsed(TreePath):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->if->new->TreeExpansionEvent->uiTreeExpansionListener->treeCollapsed->for->i
JTree#fireTreeWillExpand(TreePath):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->for->i
JTree#fireTreeWillCollapse(TreePath):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->for->i
JTree#addTreeSelectionListener(TreeSelectionListener):::Adds a listener for TreeSelection events.:::listenerList->add->if->listenerList->getListenerCount->new->TreeSelectionRedirector->selectionModel->addTreeSelectionListener
JTree#removeTreeSelectionListener(TreeSelectionListener):::Removes a TreeSelection listener.:::listenerList->remove->if->listenerList->getListenerCount->selectionModel->removeTreeSelectionListener
JTree#getTreeSelectionListeners():::Returns an array of all the TreeSelectionListeners added to this JTree with addTreeSelectionListener().:::return->listenerList->getListeners
JTree#fireValueChanged(TreeSelectionEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
JTree#treeDidChange():::Sent when the tree has changed enough that we need to resize the bounds, but not enough that we need to remove the expanded node set (e.g nodes were expanded or collapsed, or nodes were inserted into the tree):::revalidate->repaint
JTree#setVisibleRowCount(int):::Sets the number of rows that are to be displayed:::oldCount->firePropertyChange->invalidate->if->fireVisibleDataPropertyChange
JTree#getVisibleRowCount():::Returns the number of rows that are displayed in the display area.:::return
JTree#expandRoot():::Expands the root path, assuming the current TreeModel has been set.:::model->getModel->if->model->getRoot->model->getRoot->new->TreePath->expandPath
JTree#getNextMatch(String, int, Position.Bias):::Returns the TreePath to the next tree element that begins with a prefix:::max->getRowCount->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->prefix->toUpperCase->increment->row->do->path->getPathForRow->text->path->getLastPathComponent->isRowSelected->isExpanded->convertValueToText->if->text->toUpperCase->startsWith->return->while->return
JTree#writeObject(ObjectOutputStream)::: tree write object:::values->new->Vector<Object>->s->defaultWriteObject->if->values->addElement->values->addElement->if->values->addElement->values->addElement->if->values->addElement->values->addElement->if->values->addElement->values->addElement->expandedData->getArchivableExpandedState->if->values->addElement->values->addElement->s->writeObject->if->getUIClassID->equals->count->JComponent->getWriteObjCounter->JComponent->setWriteObjCounter->if->ui->installUI
JTree#readObject(ObjectInputStream)::: tree read object:::f->s->readFields->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->f->get->newDragEnabled->f->get->checkDragEnabled->newDropMode->f->get->checkDropMode->f->get->f->get->new->Hashtable<TreePath,Boolean>->new->Stack<Stack<TreePath>>->values->s->readObject->indexCounter->maxCounter->values->size->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->if->values->elementAt->equals->values->elementAt->unarchiveExpandedState->if->listenerList->getListenerCount->new->TreeSelectionRedirector->selectionModel->addTreeSelectionListener->if->createTreeModelListener->if->treeModel->addTreeModelListener
JTree#getArchivableExpandedState():::Returns an object that can be archived indicating what nodes are expanded and what aren't:::model->getModel->if->paths->expandedState->keys->if->state->new->Vector<Object>->while->paths->hasMoreElements->path->paths->nextElement->archivePath->try->getModelIndexsForPath->catch->finally->if->state->addElement->state->expandedState->get->addElement->return->return
JTree#unarchiveExpandedState(Object):::Updates the expanded state of nodes in the tree based on the previously archived state state.:::if->paths->for->counter->paths->size
JTree#getModelIndexsForPath(TreePath):::Returns an array of integers specifying the indexs of the components in the path:::if->model->getModel->count->path->getPathCount->indexs->new->intArr->parent->model->getRoot->for->counter->return->return
JTree#getPathForIndexs(int[]):::Returns a TreePath created by obtaining the children for each of the indices in indexs:::if->return->model->getModel->if->return->count->parent->model->getRoot->if->return->parentPath->new->TreePath->for->counter->return
JTree.EmptySelectionModel#sharedInstance():::Returns the single instance of EmptySelectionModel.:::return
JTree.EmptySelectionModel#setSelectionPaths(TreePath[]):::This is overriden to do nothing; EmptySelectionModel does not allow a selection.:::
JTree.EmptySelectionModel#addSelectionPaths(TreePath[]):::This is overriden to do nothing; EmptySelectionModel does not allow a selection.:::
JTree.EmptySelectionModel#removeSelectionPaths(TreePath[]):::This is overriden to do nothing; EmptySelectionModel does not allow a selection.:::
JTree.EmptySelectionModel#setSelectionMode(int):::This is overriden to do nothing; EmptySelectionModel does not allow a selection.:::
JTree.EmptySelectionModel#setRowMapper(RowMapper):::This is overriden to do nothing; EmptySelectionModel does not allow a selection.:::
JTree.EmptySelectionModel#addTreeSelectionListener(TreeSelectionListener):::This is overriden to do nothing; EmptySelectionModel does not allow a selection.:::
JTree.EmptySelectionModel#removeTreeSelectionListener(TreeSelectionListener):::This is overriden to do nothing; EmptySelectionModel does not allow a selection.:::
JTree.EmptySelectionModel#addPropertyChangeListener(PropertyChangeListener):::This is overriden to do nothing; EmptySelectionModel does not allow a selection.:::
JTree.EmptySelectionModel#removePropertyChangeListener(PropertyChangeListener):::This is overriden to do nothing; EmptySelectionModel does not allow a selection.:::
JTree.TreeSelectionRedirector#valueChanged(TreeSelectionEvent):::Invoked by the TreeSelectionModel when the selection changes.:::newE->e->cloneWithSource->fireValueChanged
JTree#getPreferredScrollableViewportSize():::Returns the preferred display size of a JTree:::width->getPreferredSize->visRows->getVisibleRowCount->height->if->isFixedRowHeight->getRowHeight->else->ui->getUI->if->rc->ui->getRowCount->if->bounds->getRowBounds->if->else->if->bounds->getRowBounds->if->if->return->new->Dimension
JTree#getScrollableUnitIncrement(Rectangle, int, int):::Returns the amount to increment when scrolling:::if->rowBounds->firstIndex->getClosestRowForLocation->if->getRowBounds->if->if->return->Math->max->return->if->if->getRowBounds->return->else->return->return->return
JTree#getScrollableBlockIncrement(Rectangle, int, int):::Returns the amount for a block increment, which is the height or width of visibleRect, based on orientation.:::return
JTree#getScrollableTracksViewportWidth():::Returns false to indicate that the width of the viewport does not determine the width of the table, unless the preferred width of the tree is smaller than the viewports width:::parent->SwingUtilities->getUnwrappedParent->if->return->parent->getWidth->getPreferredSize->return
JTree#getScrollableTracksViewportHeight():::Returns false to indicate that the height of the viewport does not determine the height of the table, unless the preferred height of the tree is smaller than the viewports height:::parent->SwingUtilities->getUnwrappedParent->if->return->parent->getHeight->getPreferredSize->return
JTree#setExpandedState(TreePath, boolean):::Sets the expanded state of this JTree:::if->stack->parentPath->path->getParentPath->if->expandedStack->size->new->Stack<TreePath>->else->expandedStack->pop->try->while->if->isExpanded->else->stack->push->parentPath->getParentPath->for->counter->stack->size->catch->finally->if->expandedStack->size->stack->removeAllElements->expandedStack->push->if->cValue->expandedState->get->if->booleanValue->try->fireTreeWillCollapse->catch->return->finally->expandedState->put->fireTreeCollapsed->if->removeDescendantSelectedPaths->isPathSelected->addSelectionPath->if->fireVisibleDataPropertyChange->else->cValue->expandedState->get->if->booleanValue->try->fireTreeWillExpand->catch->return->finally->expandedState->put->fireTreeExpanded->if->fireVisibleDataPropertyChange
JTree#getDescendantToggledPaths(TreePath):::Returns an Enumeration of TreePaths that have been expanded that are descendants of parent.:::if->return->descendants->new->Vector<TreePath>->nodes->expandedState->keys->while->nodes->hasMoreElements->path->nodes->nextElement->if->parent->isDescendant->descendants->addElement->return->descendants->elements
JTree#removeDescendantToggledPaths(Enumeration):::Removes any descendants of the TreePaths in toRemove that have been expanded.:::if->while->toRemove->hasMoreElements->descendants->toRemove->nextElement->getDescendantToggledPaths->if->while->descendants->hasMoreElements->expandedState->descendants->nextElement->remove
JTree#clearToggledPaths():::Clears the cache of toggled tree paths:::expandedState->clear
JTree#createTreeModelListener():::Creates and returns an instance of TreeModelHandler:::return->new->TreeModelHandler
JTree#removeDescendantSelectedPaths(TreePath, boolean):::Removes any paths in the selection that are descendants of path:::toRemove->getDescendantSelectedPaths->if->getSelectionModel->removeSelectionPaths->return->return
JTree#getDescendantSelectedPaths(TreePath, boolean):::Returns an array of paths in the selection that are descendants of path:::sm->getSelectionModel->selPaths->sm->getSelectionPaths->if->shouldRemove->for->counter->if->return->return
JTree#removeDescendantSelectedPaths(TreeModelEvent):::Removes any paths from the selection model that are descendants of the nodes identified by in e.:::pPath->SwingUtilities2->getModel->getTreePath->oldChildren->e->getChildren->sm->getSelectionModel->if->for->counter
JTree.TreeModelHandler#treeNodesChanged(TreeModelEvent)::: tree model handler tree nodes changed:::
JTree.TreeModelHandler#treeNodesInserted(TreeModelEvent)::: tree model handler tree nodes inserted:::
JTree.TreeModelHandler#treeStructureChanged(TreeModelEvent)::: tree model handler tree structure changed:::if->return->parent->SwingUtilities2->getModel->getTreePath->if->return->if->parent->getPathCount->clearToggledPaths->treeRoot->treeModel->getRoot->if->treeModel->isLeaf->expandedState->put->else->if->expandedState->get->toRemove->new->Vector<TreePath>->isExpanded->isExpanded->toRemove->addElement->toRemove->elements->removeDescendantToggledPaths->if->model->getModel->if->model->parent->getLastPathComponent->isLeaf->collapsePath->else->expandedState->put->removeDescendantSelectedPaths
JTree.TreeModelHandler#treeNodesRemoved(TreeModelEvent)::: tree model handler tree nodes removed:::if->return->parent->SwingUtilities2->getModel->getTreePath->children->e->getChildren->if->return->rPath->toRemove->Math->max->new->Vector<TreePath>->for->counter->if->toRemove->size->toRemove->elements->removeDescendantToggledPaths->model->getModel->if->model->parent->getLastPathComponent->isLeaf->expandedState->remove->removeDescendantSelectedPaths
JTree.DynamicUtilTreeNode#createChildren(DefaultMutableTreeNode, Object):::Adds to parent all the children in children:::if->childVector->for->counter->maxCounter->childVector->size->else->if->childHT->keys->childHT->keys->aKey->while->keys->hasMoreElements->keys->nextElement->parent->childHT->get->new->DynamicUtilTreeNode->add->else->if->childArray->for->counter->maxCounter
JTree.DynamicUtilTreeNode#isLeaf():::Returns true if this node allows children:::return->getAllowsChildren
JTree.DynamicUtilTreeNode#getChildCount():::Returns the number of child nodes.:::if->loadChildren->return->super->getChildCount
JTree.DynamicUtilTreeNode#loadChildren():::Loads the children based on childValue:::createChildren
JTree.DynamicUtilTreeNode#getChildAt(int):::Subclassed to load the children, if necessary.:::if->loadChildren->return->super->getChildAt
JTree.DynamicUtilTreeNode#children():::Subclassed to load the children, if necessary.:::if->loadChildren->return->super->children
JTree#setUIProperty(String, Object)::: tree set property:::if->if->intValue->setRowHeight->else->if->if->booleanValue->setScrollsOnExpand->else->if->if->booleanValue->setShowsRootHandles->else->super->setUIProperty
JTree#paramString():::Returns a string representation of this JTree:::rootVisibleString->showsRootHandlesString->editableString->largeModelString->invokesStopCellEditingString->scrollsOnExpandString->return->super->paramString
JTree#getAccessibleContext():::Gets the AccessibleContext associated with this JTree:::if->new->AccessibleJTree->return
JTree.AccessibleJTree#valueChanged(TreeSelectionEvent):::Tree Selection Listener value change method:::Boolean->valueOf->Boolean->valueOf->firePropertyChange
JTree.AccessibleJTree#fireVisibleDataPropertyChange():::Fire a visible data property change notification:::Boolean->valueOf->Boolean->valueOf->firePropertyChange
JTree.AccessibleJTree#treeNodesChanged(TreeModelEvent):::Tree Model Node change notification.:::fireVisibleDataPropertyChange
JTree.AccessibleJTree#treeNodesInserted(TreeModelEvent):::Tree Model Node change notification.:::fireVisibleDataPropertyChange
JTree.AccessibleJTree#treeNodesRemoved(TreeModelEvent):::Tree Model Node change notification.:::fireVisibleDataPropertyChange
JTree.AccessibleJTree#treeStructureChanged(TreeModelEvent):::Tree Model structure change change notification.:::fireVisibleDataPropertyChange
JTree.AccessibleJTree#treeCollapsed(TreeExpansionEvent):::Tree Collapsed notification.:::fireVisibleDataPropertyChange->path->e->getPath->if->node->new->AccessibleJTreeNode->pce->new->PropertyChangeEvent->firePropertyChange
JTree.AccessibleJTree#treeExpanded(TreeExpansionEvent):::Tree Model Expansion notification.:::fireVisibleDataPropertyChange->path->e->getPath->if->node->new->AccessibleJTreeNode->pce->new->PropertyChangeEvent->firePropertyChange
JTree.AccessibleJTree#fireActiveDescendantPropertyChange(TreePath, TreePath)::: Fire an active descendant property change notification:::if->oldLSA->new->AccessibleJTreeNode->newLSA->new->AccessibleJTreeNode->firePropertyChange
JTree.AccessibleJTree#getCurrentAccessibleContext()::: accessible tree get current accessible context:::c->getCurrentComponent->if->return->c->getAccessibleContext->else->return
JTree.AccessibleJTree#getCurrentComponent()::: accessible tree get current component:::model->JTree.this->getModel->if->return->treeRoot->model->getRoot->if->return->path->new->TreePath->if->JTree.this->isVisible->r->JTree.this->getCellRenderer->ui->JTree.this->getUI->if->row->ui->getRowForPath->lsr->JTree.this->getLeadSelectionRow->hasFocus->JTree.this->isFocusOwner->selected->JTree.this->isPathSelected->expanded->JTree.this->isExpanded->return->r->model->isLeaf->getTreeCellRendererComponent->return
JTree.AccessibleJTree#getAccessibleRole():::Get the role of this object.:::return
JTree.AccessibleJTree#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point:::path->getClosestPathForLocation->if->return->new->AccessibleJTreeNode->else->return
JTree.AccessibleJTree#getAccessibleChildrenCount():::Returns the number of top-level children nodes of this JTree:::model->JTree.this->getModel->if->return->if->isRootVisible->return->treeRoot->model->getRoot->if->return->return->model->getChildCount
JTree.AccessibleJTree#getAccessibleChild(int):::Return the nth Accessible child of the object.:::model->JTree.this->getModel->if->return->treeRoot->model->getRoot->if->return->if->isRootVisible->if->objPath->path->new->TreePath->return->new->AccessibleJTreeNode->else->return->count->model->getChildCount->if->return->obj->model->getChild->if->return->objPath->path->new->TreePath->return->new->AccessibleJTreeNode
JTree.AccessibleJTree#getAccessibleIndexInParent():::Get the index of this object in its accessible parent.:::return->super->getAccessibleIndexInParent
JTree.AccessibleJTree#getAccessibleSelection():::Get the AccessibleSelection associated with this object:::return
JTree.AccessibleJTree#getAccessibleSelectionCount():::Returns the number of items currently selected:::rootPath->new->ObjectArr->treeModel->getRoot->if->return->childPath->new->TreePath->if->JTree.this->isPathSelected->return->else->return
JTree.AccessibleJTree#getAccessibleSelection(int):::Returns an Accessible representing the specified selected item in the object:::if->rootPath->new->ObjectArr->treeModel->getRoot->if->return->childPath->new->TreePath->if->JTree.this->isPathSelected->return->new->AccessibleJTreeNode->return
JTree.AccessibleJTree#isAccessibleChildSelected(int):::Returns true if the current child of this object is selected.:::if->rootPath->new->ObjectArr->treeModel->getRoot->if->return->childPath->new->TreePath->return->JTree.this->isPathSelected->else->return
JTree.AccessibleJTree#addAccessibleSelection(int):::Adds the specified selected item in the object to the object's selection:::model->JTree.this->getModel->if->if->objPath->model->getRoot->if->return->path->new->TreePath->JTree.this->addSelectionPath
JTree.AccessibleJTree#removeAccessibleSelection(int):::Removes the specified selected item in the object from the object's selection:::model->JTree.this->getModel->if->if->objPath->model->getRoot->if->return->path->new->TreePath->JTree.this->removeSelectionPath
JTree.AccessibleJTree#clearAccessibleSelection():::Clears the selection in the object, so that nothing in the object is selected.:::childCount->getAccessibleChildrenCount->for->i
JTree.AccessibleJTree#selectAllAccessibleSelection():::Causes every selected item in the object to be selected if the object supports multiple selections.:::model->JTree.this->getModel->if->objPath->model->getRoot->if->return->path->new->TreePath->JTree.this->addSelectionPath
JTree.AccessibleJTree.AccessibleJTreeNode#getChildTreePath(int)::: accessible tree node get child tree path:::if->getAccessibleChildrenCount->return->else->childObj->treeModel->getChild->objPath->path->getPath->objChildPath->new->ObjectArr->arraycopy->return->new->TreePath
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleContext():::Get the AccessibleContext associated with this tree node:::return
JTree.AccessibleJTree.AccessibleJTreeNode#getCurrentAccessibleContext()::: accessible tree node get current accessible context:::c->getCurrentComponent->if->return->c->getAccessibleContext->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#getCurrentComponent()::: accessible tree node get current component:::if->tree->isVisible->r->tree->getCellRenderer->if->return->ui->tree->getUI->if->row->ui->getRowForPath->selected->tree->isPathSelected->expanded->tree->isExpanded->hasFocus->return->r->getTreeCellRendererComponent->return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleName():::Get the accessible name of this object.:::ac->getCurrentAccessibleContext->if->name->ac->getAccessibleName->if->return->ac->getAccessibleName->else->return->if->return->else->return->getClientProperty
JTree.AccessibleJTree.AccessibleJTreeNode#setAccessibleName(String):::Set the localized accessible name of this object.:::ac->getCurrentAccessibleContext->if->ac->setAccessibleName->else->super->setAccessibleName
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleDescription():::Get the accessible description of this object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleDescription->else->return->super->getAccessibleDescription
JTree.AccessibleJTree.AccessibleJTreeNode#setAccessibleDescription(String):::Set the accessible description of this object.:::ac->getCurrentAccessibleContext->if->ac->setAccessibleDescription->else->super->setAccessibleDescription
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleRole():::Get the role of this object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleRole->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleStateSet():::Get the state set of this object.:::ac->getCurrentAccessibleContext->states->if->ac->getAccessibleStateSet->else->new->AccessibleStateSet->if->isShowing->states->add->else->if->states->contains->states->remove->if->isVisible->states->add->else->if->states->contains->states->remove->if->tree->isPathSelected->states->add->if->getLeadSelectionPath->states->add->if->states->add->if->tree->isExpanded->states->add->else->states->add->if->tree->isEditable->states->add->return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleParent():::Get the Accessible parent of this object.:::if->objPath->path->getPath->if->objParent->if->treeModel->getIndexOfChild->objParentPath->new->ObjectArr->arraycopy->parentPath->new->TreePath->new->AccessibleJTreeNode->this->setAccessibleParent->else->if->this->setAccessibleParent->return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleIndexInParent():::Get the index of this object in its accessible parent.:::if->getAccessibleParent->objPath->path->getPath->if->objParent->if->treeModel->getIndexOfChild->return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleChildrenCount():::Returns the number of accessible children in the object.:::return->treeModel->getChildCount
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleChild(int):::Return the specified Accessible child of the object.:::if->getAccessibleChildrenCount->return->else->childObj->treeModel->getChild->objPath->path->getPath->objChildPath->new->ObjectArr->arraycopy->childPath->new->TreePath->return->new->AccessibleJTreeNode
JTree.AccessibleJTree.AccessibleJTreeNode#getLocale():::Gets the locale of the component:::ac->getCurrentAccessibleContext->if->return->ac->getLocale->else->return->tree->getLocale
JTree.AccessibleJTree.AccessibleJTreeNode#addPropertyChangeListener(PropertyChangeListener):::Add a PropertyChangeListener to the listener list:::ac->getCurrentAccessibleContext->if->ac->addPropertyChangeListener->else->super->addPropertyChangeListener
JTree.AccessibleJTree.AccessibleJTreeNode#removePropertyChangeListener(PropertyChangeListener):::Remove a PropertyChangeListener from the listener list:::ac->getCurrentAccessibleContext->if->ac->removePropertyChangeListener->else->super->removePropertyChangeListener
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleAction():::Get the AccessibleAction associated with this object:::return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleComponent():::Get the AccessibleComponent associated with this object:::return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleSelection():::Get the AccessibleSelection associated with this object if one exists:::ac->getCurrentAccessibleContext->if->return->getCurrentAccessibleContext->getAccessibleSelection->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleText():::Get the AccessibleText associated with this object if one exists:::ac->getCurrentAccessibleContext->if->return->getCurrentAccessibleContext->getAccessibleText->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleValue():::Get the AccessibleValue associated with this object if one exists:::ac->getCurrentAccessibleContext->if->return->getCurrentAccessibleContext->getAccessibleValue->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#getBackground():::Get the background color of this object.:::ac->getCurrentAccessibleContext->if->return->getBackground->else->c->getCurrentComponent->if->return->c->getBackground->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#setBackground(Color):::Set the background color of this object.:::ac->getCurrentAccessibleContext->if->setBackground->else->cp->getCurrentComponent->if->cp->setBackground
JTree.AccessibleJTree.AccessibleJTreeNode#getForeground():::Get the foreground color of this object.:::ac->getCurrentAccessibleContext->if->return->getForeground->else->c->getCurrentComponent->if->return->c->getForeground->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#setForeground(Color)::: accessible tree node set foreground:::ac->getCurrentAccessibleContext->if->setForeground->else->cp->getCurrentComponent->if->cp->setForeground
JTree.AccessibleJTree.AccessibleJTreeNode#getCursor()::: accessible tree node get cursor:::ac->getCurrentAccessibleContext->if->return->getCursor->else->c->getCurrentComponent->if->return->c->getCursor->else->ap->getAccessibleParent->if->return->getCursor->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#setCursor(Cursor)::: accessible tree node set cursor:::ac->getCurrentAccessibleContext->if->setCursor->else->cp->getCurrentComponent->if->cp->setCursor
JTree.AccessibleJTree.AccessibleJTreeNode#getFont()::: accessible tree node get font:::ac->getCurrentAccessibleContext->if->return->getFont->else->c->getCurrentComponent->if->return->c->getFont->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#setFont(Font)::: accessible tree node set font:::ac->getCurrentAccessibleContext->if->setFont->else->c->getCurrentComponent->if->c->setFont
JTree.AccessibleJTree.AccessibleJTreeNode#getFontMetrics(Font)::: accessible tree node get font metrics:::ac->getCurrentAccessibleContext->if->return->getFontMetrics->else->c->getCurrentComponent->if->return->c->getFontMetrics->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#isEnabled()::: accessible tree node is enabled:::ac->getCurrentAccessibleContext->if->return->isEnabled->else->c->getCurrentComponent->if->return->c->isEnabled->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#setEnabled(boolean)::: accessible tree node set enabled:::ac->getCurrentAccessibleContext->if->setEnabled->else->c->getCurrentComponent->if->c->setEnabled
JTree.AccessibleJTree.AccessibleJTreeNode#isVisible()::: accessible tree node is visible:::pathBounds->tree->getPathBounds->parentBounds->tree->getVisibleRect->return->parentBounds->intersects
JTree.AccessibleJTree.AccessibleJTreeNode#setVisible(boolean)::: accessible tree node set visible:::
JTree.AccessibleJTree.AccessibleJTreeNode#isShowing()::: accessible tree node is showing:::return->tree->isShowing->isVisible
JTree.AccessibleJTree.AccessibleJTreeNode#contains(Point)::: accessible tree node contains:::ac->getCurrentAccessibleContext->if->r->getBounds->return->r->contains->else->c->getCurrentComponent->if->r->c->getBounds->return->r->contains->else->return->getBounds->contains
JTree.AccessibleJTree.AccessibleJTreeNode#getLocationOnScreen()::: accessible tree node get location on screen:::if->treeLocation->tree->getLocationOnScreen->pathBounds->tree->getPathBounds->if->nodeLocation->new->Point->nodeLocation->translate->return->else->return->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#getLocationInJTree():::Returns the relative location of the node:::r->tree->getPathBounds->if->return->r->getLocation->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#getLocation()::: accessible tree node get location:::r->getBounds->if->return->r->getLocation->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#setLocation(Point)::: accessible tree node set location:::
JTree.AccessibleJTree.AccessibleJTreeNode#getBounds()::: accessible tree node get bounds:::r->tree->getPathBounds->parent->getAccessibleParent->if->if->parentLoc->getLocationInJTree->if->r->translate->else->return->return
JTree.AccessibleJTree.AccessibleJTreeNode#setBounds(Rectangle)::: accessible tree node set bounds:::ac->getCurrentAccessibleContext->if->setBounds->else->c->getCurrentComponent->if->c->setBounds
JTree.AccessibleJTree.AccessibleJTreeNode#getSize()::: accessible tree node get size:::return->getBounds->getSize
JTree.AccessibleJTree.AccessibleJTreeNode#setSize(Dimension)::: accessible tree node set size:::ac->getCurrentAccessibleContext->if->setSize->else->c->getCurrentComponent->if->c->setSize
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point:::ac->getCurrentAccessibleContext->if->return->getAccessibleAt->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#isFocusTraversable()::: accessible tree node is focus traversable:::ac->getCurrentAccessibleContext->if->return->isFocusTraversable->else->c->getCurrentComponent->if->return->c->isFocusTraversable->else->return
JTree.AccessibleJTree.AccessibleJTreeNode#requestFocus()::: accessible tree node request focus:::ac->getCurrentAccessibleContext->if->requestFocus->else->c->getCurrentComponent->if->c->requestFocus
JTree.AccessibleJTree.AccessibleJTreeNode#addFocusListener(FocusListener)::: accessible tree node add focus listener:::ac->getCurrentAccessibleContext->if->addFocusListener->else->c->getCurrentComponent->if->c->addFocusListener
JTree.AccessibleJTree.AccessibleJTreeNode#removeFocusListener(FocusListener)::: accessible tree node remove focus listener:::ac->getCurrentAccessibleContext->if->removeFocusListener->else->c->getCurrentComponent->if->c->removeFocusListener
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleSelectionCount():::Returns the number of items currently selected:::count->childCount->getAccessibleChildrenCount->for->i->return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleSelection(int):::Returns an Accessible representing the specified selected item in the object:::childCount->getAccessibleChildrenCount->if->return->count->for->j->return
JTree.AccessibleJTree.AccessibleJTreeNode#isAccessibleChildSelected(int):::Returns true if the current child of this object is selected.:::childCount->getAccessibleChildrenCount->if->return->else->childPath->getChildTreePath->return->tree->isPathSelected
JTree.AccessibleJTree.AccessibleJTreeNode#addAccessibleSelection(int):::Adds the specified selected item in the object to the object's selection:::model->JTree.this->getModel->if->if->getAccessibleChildrenCount->path->getChildTreePath->JTree.this->addSelectionPath
JTree.AccessibleJTree.AccessibleJTreeNode#removeAccessibleSelection(int):::Removes the specified selected item in the object from the object's selection:::model->JTree.this->getModel->if->if->getAccessibleChildrenCount->path->getChildTreePath->JTree.this->removeSelectionPath
JTree.AccessibleJTree.AccessibleJTreeNode#clearAccessibleSelection():::Clears the selection in the object, so that nothing in the object is selected.:::childCount->getAccessibleChildrenCount->for->i
JTree.AccessibleJTree.AccessibleJTreeNode#selectAllAccessibleSelection():::Causes every selected item in the object to be selected if the object supports multiple selections.:::model->JTree.this->getModel->if->childCount->getAccessibleChildrenCount->path->for->i
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleActionCount():::Returns the number of accessible actions available in this tree node:::ac->getCurrentAccessibleContext->if->aa->ac->getAccessibleAction->if->return->aa->getAccessibleActionCount->return
JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleActionDescription(int):::Return a description of the specified action of the tree node:::if->getAccessibleActionCount->return->ac->getCurrentAccessibleContext->if->return->else->if->aa->ac->getAccessibleAction->if->return->aa->getAccessibleActionDescription->return
JTree.AccessibleJTree.AccessibleJTreeNode#doAccessibleAction(int):::Perform the specified Action on the tree node:::if->getAccessibleActionCount->return->ac->getCurrentAccessibleContext->if->if->JTree.this->isExpanded->JTree.this->collapsePath->else->JTree.this->expandPath->return->else->if->aa->ac->getAccessibleAction->if->return->aa->doAccessibleAction->return
JViewport#getUI():::Returns the L&amp;F object that renders this component.:::return
JViewport#setUI(ViewportUI):::Sets the L&amp;F object that renders this component.:::super->setUI
JViewport#updateUI():::Resets the UI property to a value from the current look and feel.:::UIManager->getUI->setUI
JViewport#getUIClassID():::Returns a string that specifies the name of the L&amp;F class that renders this component.:::return
JViewport#addImpl(Component, Object, int):::Sets the JViewport's one lightweight child, which can be null:::setView
JViewport#remove(Component):::Removes the Viewports one lightweight child.:::child->removeComponentListener->super->remove
JViewport#scrollRectToVisible(Rectangle):::Scrolls the view so that Rectangle within the view becomes visible:::view->getView->if->return->else->if->view->isValid->validateView->dx->dy->getWidth->positionAdjustment->getHeight->positionAdjustment->if->viewPosition->getViewPosition->viewSize->view->getSize->startX->startY->extent->getExtentSize->if->view->isValid->if->getParent->getComponentOrientation->isLeftToRight->if->Math->max->else->if->else->if->else->Math->Math->min->max->if->Math->max->else->if->if->setViewPosition
JViewport#validateView():::Ascends the Viewport's parents stopping when a component is found that returns true to isValidateRoot:::validateRoot->SwingUtilities->getValidateRoot->if->return->validateRoot->validate->rm->RepaintManager->currentManager->if->rm->removeInvalidComponent
JViewport#positionAdjustment(int, int, int)::: viewport position adjustment:::if->return->if->return->if->return->if->return->if->return->if->return->return
JViewport#setBorder(Border):::The viewport "scrolls" its child (called the "view") by the normal parent/child clipping (typically the view is moved in the opposite direction of the scroll):::if->throw->new->IllegalArgumentException
JViewport#getInsets():::Returns the insets (border) dimensions as (0,0,0,0), since borders are not supported on a JViewport.:::return->new->Insets
JViewport#getInsets(Insets):::Returns an Insets object containing this JViewports inset values:::return
JViewport#getBackingStoreGraphics(Graphics)::: viewport get backing store graphics:::bsg->backingStoreImage->getGraphics->bsg->g->getColor->setColor->bsg->g->getFont->setFont->bsg->g->getClipBounds->setClip->return
JViewport#paintViaBackingStore(Graphics)::: viewport paint via backing store:::bsg->getBackingStoreGraphics->try->super->paint->g->drawImage->catch->finally->bsg->dispose
JViewport#paintViaBackingStore(Graphics, Rectangle)::: viewport paint via backing store:::bsg->getBackingStoreGraphics->try->super->paint->g->setClip->g->drawImage->catch->finally->bsg->dispose
JViewport#isOptimizedDrawingEnabled():::The JViewport overrides the default implementation of this method (in JComponent) to return false:::return
JViewport#isPaintingOrigin():::Returns true if scroll mode is a BACKINGSTORE_SCROLL_MODE to cause painting to originate from JViewport, or one of its ancestors:::return
JViewport#getViewLocation():::Only used by the paint method below.:::view->getView->if->return->view->getLocation->else->return->new->Point
JViewport#paint(Graphics):::Depending on whether the backingStore is enabled, either paint the image through the backing store or paint just the recently exposed part, using the backing store to "blit" the remainder:::width->getWidth->height->getHeight->if->return->if->super->paint->return->if->clipB->g->getClipBounds->if->getWidth->getHeight->if->createRepaintTimer->repaintTimer->stop->repaintTimer->start->else->if->repaintTimer->stop->else->if->clipB->g->getClipBounds->if->getWidth->getHeight->repaintTimer->stop->if->isBlitting->getView->super->paint->getViewLocation->return->viewBounds->getView->getBounds->if->isOpaque->g->clipRect->recreateBackingStoreImage->scaledWidth->scaledHeight->if->sw->sh->g2d->tx->g2d->getTransform->type->tx->getType->if->else->if->Math->tx->getScaleX->abs->Math->tx->getScaleY->abs->else->Math->Math->tx->getScaleX->tx->getShearY->hypot->abs->Math->Math->tx->getShearX->tx->getScaleY->hypot->abs->Math->ceil->Math->ceil->if->if->mrImage->else->if->createScaledImage->clip->g->getClipBounds->if->if->isOpaque->g->Math->min->Math->min->setClip->else->g->setClip->paintViaBackingStore->else->paintViaBackingStore->else->if->lastPaintPosition->getViewLocation->equals->paintViaBackingStore->else->blitFrom->new->Point->blitTo->new->Point->blitSize->new->Dimension->blitPaint->new->Rectangle->newLocation->getViewLocation->dx->dy->canBlit->computeBlit->if->paintViaBackingStore->else->bdx->bdy->clip->g->getClipBounds->g->setClip->bsg->getBackingStoreGraphics->try->bsg->copyArea->g->setClip->r->viewBounds->intersection->bsg->setClip->super->paint->g->drawImage->catch->finally->bsg->dispose->getViewLocation
JViewport#createScaledImage(int, int, int, int)::: viewport create scaled image:::if->return->createImage->rvImage->createImage->return->new->BackingStoreMultiResolutionImage
JViewport.BackingStoreMultiResolutionImage#getWidth(ImageObserver)::: backing store multi resolution image get width:::return
JViewport.BackingStoreMultiResolutionImage#getHeight(ImageObserver)::: backing store multi resolution image get height:::return
JViewport.BackingStoreMultiResolutionImage#getBaseImage()::: backing store multi resolution image get base image:::return
JViewport.BackingStoreMultiResolutionImage#getGraphics()::: backing store multi resolution image get graphics:::graphics->rvImage->getGraphics->if->sx->sy->scale->return
JViewport.BackingStoreMultiResolutionImage#getResolutionVariant(double, double)::: backing store multi resolution image get resolution variant:::return
JViewport.BackingStoreMultiResolutionImage#getResolutionVariants()::: backing store multi resolution image get resolution variants:::return->Collections->Arrays->asList->unmodifiableList
JViewport#reshape(int, int, int, int):::Sets the bounds of this viewport:::sizeChanged->getWidth->getHeight->if->super->reshape->if->fireStateChanged
JViewport#setScrollMode(int):::Used to control the method of scrolling the viewport contents:::
JViewport#getScrollMode():::Returns the current scrolling mode.:::return
JViewport#isBackingStoreEnabled():::Returns true if this viewport is maintaining an offscreen image of its contents.:::return
JViewport#setBackingStoreEnabled(boolean):::If true if this viewport will maintain an offscreen image of its contents:::if->setScrollMode->else->setScrollMode
JViewport#isBlitting()::: viewport is blitting:::view->getView->return->view->isOpaque->isFPScale
JViewport#isFPScale()::: viewport is scale:::gc->getGraphicsConfiguration->if->return->SwingUtilities2->gc->getDefaultTransform->isFloatingPointScale->return
JViewport#getView():::Returns the JViewport's one child or null.:::return->getComponentCount->getComponent
JViewport#setView(Component):::Sets the JViewport's one lightweight child (view), which can be null.:::n->getComponentCount->for->i->if->super->addImpl->createViewListener->view->addComponentListener->if->fireStateChanged->else->if->revalidate->repaint
JViewport#getViewSize():::If the view's size hasn't been explicitly set, return the preferred size, otherwise return the view's current size:::view->getView->if->return->new->Dimension->else->if->return->view->getSize->else->return->view->getPreferredSize
JViewport#setViewSize(Dimension):::Sets the size of the view:::view->getView->if->oldSize->view->getSize->if->newSize->equals->view->setSize->fireStateChanged
JViewport#getViewPosition():::Returns the view coordinates that appear in the upper left hand corner of the viewport, or 0,0 if there's no view.:::view->getView->if->p->view->getLocation->return->else->return->new->Point
JViewport#setViewPosition(Point):::Sets the view coordinates that appear in the upper left hand corner of the viewport, does nothing if there's no view.:::view->getView->if->return->oldX->oldY->x->y->if->c->c->getX->c->getY->else->r->view->getBounds->newX->newY->if->if->isBlitting->canUseWindowBlitter->rm->RepaintManager->currentManager->jview->dirty->rm->getDirtyRegion->if->dirty->jview->getVisibleRect->contains->rm->beginPaint->try->g->JComponent->safelyGetGraphics->flushViewDirtyRegion->view->setLocation->r->getWidth->Math->getHeight->jview->getHeight->min->new->Rectangle->g->setClip->windowBlitPaint->needsRepaintAfterBlit->g->dispose->rm->notifyRepaintPerformed->rm->getParent->markCompletelyClean->rm->markCompletelyClean->rm->markCompletelyClean->catch->finally->rm->endPaint->else->view->setLocation->else->view->setLocation->revalidate->fireStateChanged
JViewport#getViewRect():::Returns a rectangle whose origin is getViewPosition and size is getExtentSize:::return->getViewPosition->getExtentSize->new->Rectangle
JViewport#computeBlit(int, int, Point, Point, Dimension, Rectangle):::Computes the parameters for a blit where the backing store image currently contains oldLoc in the upper left hand corner and we're scrolling to newLoc:::dxAbs->Math->abs->dyAbs->Math->abs->extentSize->getExtentSize->if->if->else->return->else->if->if->else->return->else->return
JViewport#getExtentSize():::Returns the size of the visible part of the view in view coordinates.:::return->getSize
JViewport#toViewCoordinates(Dimension):::Converts a size in pixel coordinates to view coordinates:::return->new->Dimension
JViewport#toViewCoordinates(Point):::Converts a point in pixel coordinates to view coordinates:::return->new->Point
JViewport#setExtentSize(Dimension):::Sets the size of the visible part of the view using view coordinates.:::oldExtent->getExtentSize->if->newExtent->equals->setSize->fireStateChanged
JViewport.ViewListener#componentResized(ComponentEvent)::: view listener component resized:::fireStateChanged->revalidate
JViewport#createViewListener():::Creates a listener for the view.:::return->new->ViewListener
JViewport#createLayoutManager():::Subclassers can override this to install a different layout manager (or null) in the constructor:::return
JViewport#addChangeListener(ChangeListener):::Adds a ChangeListener to the list that is notified each time the view's size, position, or the viewport's extent size has changed.:::listenerList->add
JViewport#removeChangeListener(ChangeListener):::Removes a ChangeListener from the list that's notified each time the views size, position, or the viewports extent size has changed.:::listenerList->remove
JViewport#getChangeListeners():::Returns an array of all the ChangeListeners added to this JViewport with addChangeListener().:::return->listenerList->getListeners
JViewport#fireStateChanged():::Notifies all ChangeListeners when the views size, position, or the viewports extent size has changed.:::listeners->listenerList->getListenerList->for->i
JViewport#repaint(long, int, int, int, int):::Always repaint in the parents coordinate system to make sure only one paint is performed by the RepaintManager.:::parent->getParent->if->parent->getX->getY->repaint->else->super->repaint
JViewport#paramString():::Returns a string representation of this JViewport:::isViewSizeSetString->lastPaintPositionString->lastPaintPosition->toString->scrollUnderwayString->return->super->paramString
JViewport#firePropertyChange(String, Object, Object):::Notifies listeners of a property change:::super->firePropertyChange->if->propertyName->equals->if->setScrollMode->else->setScrollMode
JViewport#needsRepaintAfterBlit():::Returns true if the component needs to be completely repainted after a blit and a paint is received.:::heavyParent->getParent->while->heavyParent->isLightweight->heavyParent->getParent->if->peer->AWTAccessor->getComponentAccessor->getPeer->if->peer->canDetermineObscurity->peer->isObscured->return->return
JViewport#createRepaintTimer()::: viewport create repaint timer:::timer->new->ActionListener->new->Timer->timer->setRepeats->return
JViewport#flushViewDirtyRegion(Graphics, Rectangle):::If the repaint manager has a dirty region for the view, the view is asked to paint.:::view->getView->if->view->getX->view->getY->clip->g->getClipBounds->if->g->getWidth->getHeight->setClip->g->clipRect->g->getClipBounds->if->paintView
JViewport#windowBlitPaint(Graphics):::Used when blitting.:::width->getWidth->height->getHeight->if->return->retValue->rm->RepaintManager->currentManager->view->getView->if->lastPaintPosition->getViewLocation->equals->paintView->else->blitFrom->new->Point->blitTo->new->Point->blitSize->new->Dimension->blitPaint->new->Rectangle->newLocation->getViewLocation->dx->dy->canBlit->computeBlit->if->paintView->else->r->view->getBounds->intersection->view->getX->view->getY->blitDoubleBuffered->getViewLocation->return
JViewport#blitDoubleBuffered(JComponent, Graphics, int, int, int, int, int, int, int, int, int, int)::: viewport blit double buffered:::rm->RepaintManager->currentManager->bdx->bdy->oldComposite->if->g2d->g2d->getComposite->g2d->setComposite->rm->copyArea->if->setComposite->x->view->getX->y->view->getY->g->translate->g->setClip->view->paintForceDoubleBuffered->g->translate
JViewport#paintView(Graphics):::Called to paint the view, usually when blitPaint can not blit.:::clip->g->getClipBounds->view->getView->if->view->getWidth->getWidth->x->view->getX->y->view->getY->g->translate->g->setClip->view->paintForceDoubleBuffered->g->translate->g->setClip->else->try->paintForceDoubleBuffered->catch->finally
JViewport#canUseWindowBlitter():::Returns true if the viewport is not obscured by one of its ancestors, or its ancestors children and if the viewport is showing:::if->isShowing->getParent->getView->return->if->isPainting->return->dirtyRegion->RepaintManager->currentManager->getParent->getDirtyRegion->if->return->clip->getWidth->getHeight->new->Rectangle->oldClip->new->Rectangle->tmp2->parent->lastParent->x->y->w->h->for->isLightweightComponent->parent->getParent->if->return->return
JViewport#getAccessibleContext():::Gets the AccessibleContext associated with this JViewport:::if->new->AccessibleJViewport->return
JViewport.AccessibleJViewport#getAccessibleRole():::Get the role of this object.:::return
JWindow#windowInit():::Called by the constructors to init the JWindow properly.:::JComponent->getDefaultLocale->setLocale->createRootPane->setRootPane->setRootPaneCheckingEnabled->checkAndSetPolicy
JWindow#createRootPane():::Called by the constructor methods to create the default rootPane.:::rp->new->JRootPane->rp->setOpaque->return
JWindow#isRootPaneCheckingEnabled():::Returns whether calls to add and setLayout are forwarded to the contentPane.:::return
JWindow#setTransferHandler(TransferHandler):::Sets the transferHandler property, which is a mechanism to support transfer of data into this component:::oldHandler->SwingUtilities->installSwingDropTargetAsNecessary->firePropertyChange
JWindow#getTransferHandler():::Gets the transferHandler property.:::return
JWindow#update(Graphics):::Calls paint(g):::paint
JWindow#setRootPaneCheckingEnabled(boolean):::Sets whether calls to add and setLayout are forwarded to the contentPane.:::
JWindow#addImpl(Component, Object, int):::Adds the specified child Component:::if->isRootPaneCheckingEnabled->getContentPane->add->else->super->addImpl
JWindow#remove(Component):::Removes the specified component from the container:::if->super->remove->else->getContentPane->remove
JWindow#setLayout(LayoutManager):::Sets the LayoutManager:::if->isRootPaneCheckingEnabled->getContentPane->setLayout->else->super->setLayout
JWindow#getRootPane():::Returns the rootPane object for this window.:::return
JWindow#setRootPane(JRootPane):::Sets the new rootPane object for this window:::if->remove->if->checkingEnabled->isRootPaneCheckingEnabled->try->setRootPaneCheckingEnabled->add->catch->finally->setRootPaneCheckingEnabled
JWindow#getContentPane():::Returns the Container which is the contentPane for this window.:::return->getRootPane->getContentPane
JWindow#setContentPane(Container):::Sets the contentPane property for this window:::getRootPane->setContentPane
JWindow#getLayeredPane():::Returns the layeredPane object for this window.:::return->getRootPane->getLayeredPane
JWindow#setLayeredPane(JLayeredPane):::Sets the layeredPane property:::getRootPane->setLayeredPane
JWindow#getGlassPane():::Returns the glassPane Component for this window.:::return->getRootPane->getGlassPane
JWindow#setGlassPane(Component):::Sets the glassPane property:::getRootPane->setGlassPane
JWindow#getGraphics()::: window get graphics:::JComponent->getGraphicsInvoked->return->super->getGraphics
JWindow#repaint(long, int, int, int, int):::Repaints the specified rectangle of this component within time milliseconds:::if->RepaintManager->currentManager->addDirtyRegion->else->super->repaint
JWindow#paramString():::Returns a string representation of this JWindow:::rootPaneCheckingEnabledString->return->super->paramString
JWindow#getAccessibleContext():::Gets the AccessibleContext associated with this JWindow:::if->new->AccessibleJWindow->return
KeyboardManager#getCurrentManager()::: keyboard manager get current manager:::return
KeyboardManager#setCurrentManager(KeyboardManager)::: keyboard manager set current manager:::
KeyboardManager#registerKeyStroke(KeyStroke, JComponent):::register keystrokes here which are for the WHEN_IN_FOCUSED_WINDOW case:::topContainer->getTopAncestor->if->return->keyMap->containerMap->get->if->registerNewTopContainer->tmp->keyMap->get->if->keyMap->put->else->if->v->if->v->contains->v->addElement->else->if->if->v->new->Vector<>->v->addElement->v->addElement->keyMap->put->else->println->Thread->dumpStack->componentKeyStrokeMap->new->ComponentKeyStrokePair->put->if->registerAccelerator
KeyboardManager#getTopAncestor(JComponent):::Find the top focusable Window, Applet, or InternalFrame:::for->p->c->getParent->p->getParent->return
KeyboardManager#unregisterKeyStroke(KeyStroke, JComponent)::: keyboard manager unregister key stroke:::ckp->new->ComponentKeyStrokePair->topContainer->componentKeyStrokeMap->get->if->return->keyMap->containerMap->get->if->Thread->dumpStack->return->tmp->keyMap->get->if->Thread->dumpStack->return->if->keyMap->remove->else->if->v->v->removeElement->if->v->isEmpty->keyMap->remove->if->keyMap->isEmpty->containerMap->remove->componentKeyStrokeMap->remove->if->unregisterAccelerator
KeyboardManager#fireKeyboardAction(KeyEvent, boolean, Container):::This method is called when the focused component (and none of its ancestors) want the key event:::if->e->isConsumed->println->Thread->dumpStack->ks->ksE->if->e->getID->KeyStroke->e->getKeyChar->getKeyStroke->else->if->e->getKeyCode->e->getExtendedKeyCode->KeyStroke->e->getExtendedKeyCode->e->getModifiers->getKeyStroke->KeyStroke->e->getKeyCode->e->getModifiers->getKeyStroke->keyMap->containerMap->get->if->tmp->if->keyMap->get->if->if->keyMap->get->if->else->if->c->if->c->isShowing->c->isEnabled->fireBinding->else->if->v->for->counter->v->size->else->println->Thread->dumpStack->if->e->isConsumed->return->if->v->keyMap->get->if->iter->v->elements->while->iter->hasMoreElements->mb->iter->nextElement->if->mb->isShowing->mb->isEnabled->extended->ksE->equals->if->fireBinding->if->e->isConsumed->fireBinding->if->e->isConsumed->return->return->e->isConsumed
KeyboardManager#fireBinding(JComponent, KeyStroke, KeyEvent, boolean)::: keyboard manager fire binding:::if->c->processKeyBinding->e->consume
KeyboardManager#registerMenuBar(JMenuBar)::: keyboard manager register menu bar:::top->getTopAncestor->if->return->keyMap->containerMap->get->if->registerNewTopContainer->menuBars->keyMap->get->if->new->Vector<>->keyMap->put->if->menuBars->contains->menuBars->addElement
KeyboardManager#unregisterMenuBar(JMenuBar)::: keyboard manager unregister menu bar:::topContainer->getTopAncestor->if->return->keyMap->containerMap->get->if->v->keyMap->get->if->v->removeElement->if->v->isEmpty->keyMap->remove->if->keyMap->isEmpty->containerMap->remove
KeyboardManager#registerNewTopContainer(Container)::: keyboard manager register new top container:::keyMap->new->Hashtable<>->containerMap->put->return
KeyboardManager.ComponentKeyStrokePair#equals(Object)::: component key stroke pair equals:::if->return->ckp->return->component->equals->keyStroke->equals
KeyboardManager.ComponentKeyStrokePair#hashCode()::: component key stroke pair hash code:::return->component->hashCode->keyStroke->hashCode
KeyStroke#getKeyStroke(char):::Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified character.:::synchronized->return->getAWTKeyStroke
KeyStroke#getKeyStroke(char, boolean):::Returns an instance of a KeyStroke, specifying whether the key is considered to be activated when it is pressed or released:::return->new->KeyStroke
KeyStroke#getKeyStroke(Character, int):::Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified Character object and a set of modifiers:::synchronized->return->getAWTKeyStroke
KeyStroke#getKeyStroke(int, int, boolean):::Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released:::synchronized->return->getAWTKeyStroke
KeyStroke#getKeyStroke(int, int):::Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers:::synchronized->return->getAWTKeyStroke
KeyStroke#getKeyStrokeForEvent(KeyEvent):::Returns a KeyStroke which represents the stroke which generated a given KeyEvent:::synchronized->return->getAWTKeyStrokeForEvent
KeyStroke#getKeyStroke(String):::Parses a string and returns a KeyStroke:::if->s->length->return->synchronized->try->return->getAWTKeyStroke->catch->return->finally
LayoutComparator#setComponentOrientation(ComponentOrientation)::: layout comparator set component orientation:::orientation->isHorizontal->orientation->isLeftToRight
LayoutComparator#compare(Component, Component)::: layout comparator compare:::if->return->if->a->getParent->b->getParent->aAncestory->new->LinkedList<Component>->for->a->getParent->if->throw->new->ClassCastException->bAncestory->new->LinkedList<Component>->for->b->getParent->if->throw->new->ClassCastException->for->aIter->aAncestory->aAncestory->size->listIterator->bIter->bAncestory->bAncestory->size->listIterator->ax->a->getX->ay->a->getY->bx->b->getX->by->b->getY->zOrder->a->getParent->getComponentZOrder->b->getParent->getComponentZOrder->if->if->if->Math->abs->return->else->return->else->if->Math->abs->return->else->return->else->if->if->Math->abs->return->else->return->else->if->Math->abs->return->else->return
LayoutFocusTraversalPolicy#getComponentAfter(Container, Component):::Returns the Component that should receive the focus after aComponent:::if->throw->new->IllegalArgumentException->comparator->getComparator->if->aContainer->getComponentOrientation->setComponentOrientation->return->super->getComponentAfter
LayoutFocusTraversalPolicy#getComponentBefore(Container, Component):::Returns the Component that should receive the focus before aComponent:::if->throw->new->IllegalArgumentException->comparator->getComparator->if->aContainer->getComponentOrientation->setComponentOrientation->return->super->getComponentBefore
LayoutFocusTraversalPolicy#getFirstComponent(Container):::Returns the first Component in the traversal cycle:::if->throw->new->IllegalArgumentException->comparator->getComparator->if->aContainer->getComponentOrientation->setComponentOrientation->return->super->getFirstComponent
LayoutFocusTraversalPolicy#getLastComponent(Container):::Returns the last Component in the traversal cycle:::if->throw->new->IllegalArgumentException->comparator->getComparator->if->aContainer->getComponentOrientation->setComponentOrientation->return->super->getLastComponent
LayoutFocusTraversalPolicy#accept(Component):::Determines whether the specified Component is an acceptable choice as the new focus owner:::if->super->accept->return->else->if->SunToolkit->isInstanceOf->return->else->if->SunToolkit->isInstanceOf->box->return->box->getUI->isFocusTraversable->else->if->if->SunToolkit->isInstanceOf->model->getModel->if->group->model->getGroup->if->elements->group->getElements->idx->while->elements->hasMoreElements->member->elements->nextElement->if->member->isVisible->member->isDisplayable->member->isEnabled->member->isFocusable->if->return->jComponent->inputMap->jComponent->getInputMap->while->inputMap->size->inputMap->getParent->if->return->return->fitnessTestPolicy->accept
LayoutFocusTraversalPolicy#writeObject(ObjectOutputStream)::: layout focus traversal policy write object:::out->getComparator->writeObject->out->getImplicitDownCycleTraversal->writeBoolean
LayoutFocusTraversalPolicy#readObject(ObjectInputStream)::: layout focus traversal policy read object:::in->readObject->setComparator->in->readBoolean->setImplicitDownCycleTraversal
SwingDefaultFocusTraversalPolicy#accept(Component)::: swing default focus traversal policy accept:::return->super->accept
LayoutStyle#setInstance(LayoutStyle):::Sets the shared instance of LayoutStyle:::synchronized->if->AppContext->getAppContext->remove->else->AppContext->getAppContext->put
LayoutStyle#getInstance():::Returns the shared instance of LayoutStyle:::style->synchronized->AppContext->getAppContext->get->if->return->UIManager->getLookAndFeel->getLayoutStyle->return
LayoutStyle#getPreferredGap(JComponent, JComponent, ComponentPlacement, int, Container):::Returns the amount of space to use between two components:::
LayoutStyle#getContainerGap(JComponent, int, Container):::Returns the amount of space to place between the component and specified edge of its parent.:::
LegacyGlueFocusTraversalPolicy#setNextFocusableComponent(Component, Component)::: legacy glue focus traversal policy set next focusable component:::forwardMap->put->backwardMap->put
LegacyGlueFocusTraversalPolicy#unsetNextFocusableComponent(Component, Component)::: legacy glue focus traversal policy unset next focusable component:::forwardMap->remove->backwardMap->remove
LegacyGlueFocusTraversalPolicy#getComponentAfter(Container, Component)::: legacy glue focus traversal policy get component after:::hardCoded->prevHardCoded->sanity->new->HashSet<Component>->do->forwardMap->get->if->if->prevHardCoded->isFocusCycleRoot->return->delegatePolicy->getComponentAfter->else->if->return->delegateManager->getComponentAfter->else->return->if->sanity->contains->return->sanity->add->while->accept->return
LegacyGlueFocusTraversalPolicy#getComponentBefore(Container, Component)::: legacy glue focus traversal policy get component before:::hardCoded->prevHardCoded->sanity->new->HashSet<Component>->do->backwardMap->get->if->if->prevHardCoded->isFocusCycleRoot->return->delegatePolicy->getComponentBefore->else->if->return->delegateManager->getComponentBefore->else->return->if->sanity->contains->return->sanity->add->while->accept->return
LegacyGlueFocusTraversalPolicy#getFirstComponent(Container)::: legacy glue focus traversal policy get first component:::if->return->delegatePolicy->getFirstComponent->else->if->return->delegateManager->getFirstComponent->else->return
LegacyGlueFocusTraversalPolicy#getLastComponent(Container)::: legacy glue focus traversal policy get last component:::if->return->delegatePolicy->getLastComponent->else->if->return->delegateManager->getLastComponent->else->return
LegacyGlueFocusTraversalPolicy#getDefaultComponent(Container)::: legacy glue focus traversal policy get default component:::if->return->delegatePolicy->getDefaultComponent->else->return->getFirstComponent
LegacyGlueFocusTraversalPolicy#accept(Component)::: legacy glue focus traversal policy accept:::if->aComponent->isVisible->aComponent->isDisplayable->aComponent->isFocusable->aComponent->isEnabled->return->if->for->enableTest->aComponent->getParent->enableTest->getParent->return
LegacyGlueFocusTraversalPolicy#writeObject(ObjectOutputStream)::: legacy glue focus traversal policy write object:::out->defaultWriteObject->if->out->writeObject->else->out->writeObject->if->out->writeObject->else->out->writeObject
LegacyGlueFocusTraversalPolicy#readObject(ObjectInputStream)::: legacy glue focus traversal policy read object:::f->in->readFields->newForwardMap->f->get->if->throw->new->InvalidObjectException->newBackwardMap->f->get->if->throw->new->InvalidObjectException->in->readObject->in->readObject
ListCellRenderer#getListCellRendererComponent(JList, E, int, boolean, boolean):::Return a component that has been configured to display the specified value:::
ListModel#getSize():::Returns the length of the list.:::
ListModel#getElementAt(int):::Returns the value at the specified index.:::
ListModel#addListDataListener(ListDataListener):::Adds a listener to the list that's notified each time a change to the data model occurs.:::
ListModel#removeListDataListener(ListDataListener):::Removes a listener from the list that's notified each time a change to the data model occurs.:::
ListSelectionModel#setSelectionInterval(int, int):::Changes the selection to be between index0 and index1 inclusive:::
ListSelectionModel#addSelectionInterval(int, int):::Changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive:::
ListSelectionModel#removeSelectionInterval(int, int):::Changes the selection to be the set difference of the current selection and the indices between index0 and index1 inclusive:::
ListSelectionModel#getMinSelectionIndex():::Returns the first selected index or -1 if the selection is empty.:::
ListSelectionModel#getMaxSelectionIndex():::Returns the last selected index or -1 if the selection is empty.:::
ListSelectionModel#isSelectedIndex(int):::Returns true if the specified index is selected.:::
ListSelectionModel#getAnchorSelectionIndex():::Return the first index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval():::
ListSelectionModel#setAnchorSelectionIndex(int):::Set the anchor selection index.:::
ListSelectionModel#getLeadSelectionIndex():::Return the second index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().:::
ListSelectionModel#setLeadSelectionIndex(int):::Set the lead selection index.:::
ListSelectionModel#clearSelection():::Change the selection to the empty set:::
ListSelectionModel#isSelectionEmpty():::Returns true if no indices are selected.:::
ListSelectionModel#insertIndexInterval(int, int, boolean):::Insert length indices beginning before/after index:::
ListSelectionModel#removeIndexInterval(int, int):::Remove the indices in the interval index0,index1 (inclusive) from the selection model:::
ListSelectionModel#setValueIsAdjusting(boolean):::Sets the valueIsAdjusting property, which indicates whether or not upcoming selection changes should be considered part of a single change:::
ListSelectionModel#getValueIsAdjusting():::Returns true if the selection is undergoing a series of changes.:::
ListSelectionModel#setSelectionMode(int):::Sets the selection mode:::
ListSelectionModel#getSelectionMode():::Returns the current selection mode.:::
ListSelectionModel#addListSelectionListener(ListSelectionListener):::Add a listener to the list that's notified each time a change to the selection occurs.:::
ListSelectionModel#removeListSelectionListener(ListSelectionListener):::Remove a listener from the list that's notified each time a change to the selection occurs.:::
ListSelectionModel#getSelectedIndices():::Returns an array of all of the selected indices in the selection model, in increasing order.:::iMin->getMinSelectionIndex->iMax->getMaxSelectionIndex->if->return->new->intArr->rvTmp->new->intArr->n->for->i->rv->new->intArr->System->arraycopy->return
ListSelectionModel#getSelectedItemsCount():::Returns the number of selected items.:::iMin->getMinSelectionIndex->iMax->getMaxSelectionIndex->count->for->i->return
LookAndFeel#installColors(JComponent, String, String):::Convenience method for setting a component's foreground and background color properties with values from the defaults:::bg->c->getBackground->if->c->UIManager->getColor->setBackground->fg->c->getForeground->if->c->UIManager->getColor->setForeground
LookAndFeel#installColorsAndFont(JComponent, String, String, String):::Convenience method for setting a component's foreground, background and font properties with values from the defaults:::f->c->getFont->if->c->UIManager->getFont->setFont->installColors
LookAndFeel#installBorder(JComponent, String):::Convenience method for setting a component's border property with a value from the defaults:::b->c->getBorder->if->c->UIManager->getBorder->setBorder
LookAndFeel#uninstallBorder(JComponent):::Convenience method for uninstalling a border:::if->c->getBorder->c->setBorder
LookAndFeel#installProperty(JComponent, String, Object):::Convenience method for installing a property with the specified name and value on a component if that property has not already been set by the developer:::if->SunToolkit->isInstanceOf->if->customSetUIProperty->c->setUIProperty->else->c->setUIProperty
LookAndFeel#makeKeyBindings(Object[]):::Convenience method for building an array of KeyBindings:::rv->new->JTextComponent.KeyBindingArr->for->i->return
LookAndFeel#makeInputMap(Object[]):::Creates an InputMapUIResource from keys:::retMap->new->InputMapUIResource->loadKeyBindings->return
LookAndFeel#makeComponentInputMap(JComponent, Object[]):::Creates a ComponentInputMapUIResource from keys:::retMap->new->ComponentInputMapUIResource->loadKeyBindings->return
LookAndFeel#loadKeyBindings(InputMap, Object[]):::Populates an InputMap with the specified bindings:::if->for->counter->maxCounter
LookAndFeel#makeIcon(Class, String):::Creates and returns a UIDefault.LazyValue that loads an image:::return->SwingUtilities2->makeIcon_Unprivileged
LookAndFeel#getLayoutStyle():::Returns the LayoutStyle for this look and feel:::return->DefaultLayoutStyle->getInstance
LookAndFeel#provideErrorFeedback(Component):::Invoked when the user attempts an invalid operation, such as pasting into an uneditable JTextField that has focus:::toolkit->if->component->getToolkit->else->Toolkit->getDefaultToolkit->toolkit->beep
LookAndFeel#getDesktopPropertyValue(String, Object):::Returns the value of the specified system desktop property by invoking Toolkit.getDefaultToolkit().getDesktopProperty():::value->Toolkit->getDefaultToolkit->getDesktopProperty->if->return->else->if->return->new->ColorUIResource->else->if->return->new->FontUIResource->return
LookAndFeel#getDisabledIcon(JComponent, Icon):::Returns an Icon with a disabled appearance:::if->return->GrayFilter->getImage->createDisabledImage->new->ImageIconUIResource->return
LookAndFeel#getDisabledSelectedIcon(JComponent, Icon):::Returns an Icon for use by disabled components that are also selected:::return->getDisabledIcon
LookAndFeel#getName():::Return a short string that identifies this look and feel, e.g:::
LookAndFeel#getID():::Return a string that identifies this look and feel:::
LookAndFeel#getDescription():::Return a one line description of this look and feel implementation, e.g:::
LookAndFeel#getSupportsWindowDecorations():::Returns true if the LookAndFeel returned RootPaneUI instances support providing Window decorations in a JRootPane:::return
LookAndFeel#isNativeLookAndFeel():::If the underlying platform has a "native" look and feel, and this is an implementation of it, return true:::
LookAndFeel#isSupportedLookAndFeel():::Return true if the underlying platform supports and or permits this look and feel:::
LookAndFeel#initialize():::Initializes the look and feel:::
LookAndFeel#uninitialize():::Uninitializes the look and feel:::
LookAndFeel#getDefaults():::Returns the look and feel defaults:::return
LookAndFeel#toString():::Returns a string that displays and identifies this object's properties.:::return->getDescription->getClass->getName
MenuElement#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager):::Processes a mouse event:::
MenuElement#processKeyEvent(KeyEvent, MenuElement[], MenuSelectionManager)::: Process a key event.:::
MenuElement#menuSelectionChanged(boolean):::Call by the MenuSelectionManager when the MenuElement is added or removed from the menu selection.:::
MenuElement#getSubElements():::This method should return an array containing the sub-elements for the receiving menu element.:::
MenuElement#getComponent():::This method should return the java.awt.Component used to paint the receiving element:::
MenuSelectionManager#defaultManager():::Returns the default menu selection manager.:::synchronized->context->AppContext->getAppContext->msm->context->get->if->new->MenuSelectionManager->context->put->o->context->get->if->msm->addChangeListener->return
MenuSelectionManager#setSelectedPath(MenuElement[]):::Changes the selection in the menu hierarchy:::i->c->currentSelectionCount->selection->size->firstDifference->if->new->MenuElementArr->if->print->getSelectedPath->printMenuElementArray->print->printMenuElementArray->for->for->for->fireStateChanged
MenuSelectionManager#getSelectedPath():::Returns the path to the currently selected menu item:::res->selection->size->new->MenuElementArr->i->c->for->selection->size->return
MenuSelectionManager#clearSelectedPath():::Tell the menu selection to close and unselect all the menu components:::if->selection->size->setSelectedPath
MenuSelectionManager#addChangeListener(ChangeListener):::Adds a ChangeListener to the button.:::listenerList->add
MenuSelectionManager#removeChangeListener(ChangeListener):::Removes a ChangeListener from the button.:::listenerList->remove
MenuSelectionManager#getChangeListeners():::Returns an array of all the ChangeListeners added to this MenuSelectionManager with addChangeListener().:::return->listenerList->getListeners
MenuSelectionManager#fireStateChanged():::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->for->i
MenuSelectionManager#processMouseEvent(MouseEvent):::When a MenuElement receives an event from a MouseListener, it should never process the event directly:::screenX->screenY->p->i->c->j->d->mc->r2->cWidth->cHeight->menuElement->subElements->path->selectionSize->event->getPoint->source->event->getComponent->if->source->isShowing->return->type->event->getID->modifiers->event->getModifiers->if->return->if->SwingUtilities->convertPointToScreen->tmp->selection->clone->tmp->size->success->for
MenuSelectionManager#printMenuElementArray(MenuElement[])::: menu selection manager print menu element array:::printMenuElementArray
MenuSelectionManager#printMenuElementArray(MenuElement[], boolean)::: menu selection manager print menu element array:::println->i->j->for->println->if->Thread->dumpStack
MenuSelectionManager#componentForPoint(Component, Point):::Returns the component in the currently selected path which contains sourcePoint.:::screenX->screenY->p->i->c->j->d->mc->r2->cWidth->cHeight->menuElement->subElements->selectionSize->SwingUtilities->convertPointToScreen->tmp->selection->clone->tmp->size->for->return
MenuSelectionManager#processKeyEvent(KeyEvent):::When a MenuElement receives an event from a KeyListener, it should never process the event directly:::sel2->new->MenuElementArr->selection->toArray->selSize->path->if->return->for->i->new->MenuElementArr->processKeyEvent->if->e->isConsumed->return
MenuSelectionManager#isComponentPartOfCurrentMenu(Component):::Return true if c is part of the currently used menu:::if->selection->size->me->selection->elementAt->return->isComponentPartOfCurrentMenu->else->return
MenuSelectionManager#isComponentPartOfCurrentMenu(MenuElement, Component)::: menu selection manager is component part of current menu:::children->i->d->if->return->if->root->getComponent->return->else->root->getSubElements->for->return
MultiUIDefaults#get(Object)::: multi defaults get:::value->super->get->if->return->foreach->table->get->if->return->return
MultiUIDefaults#get(Object, Locale)::: multi defaults get:::value->super->get->if->return->foreach->table->get->if->return->return
MultiUIDefaults#size()::: multi defaults size:::return->entrySet->size
MultiUIDefaults#isEmpty()::: multi defaults is empty:::return->size
MultiUIDefaults#keys()::: multi defaults keys:::return->entrySet->new->MultiUIDefaultsEnumerator
MultiUIDefaults#elements()::: multi defaults elements:::return->entrySet->new->MultiUIDefaultsEnumerator
MultiUIDefaults#entrySet()::: multi defaults entry set:::set->new->HashSet<Entry<Object,Object>>->for->i->set->super->entrySet->addAll->return
MultiUIDefaults#getUIError(String)::: multi defaults get error:::if->getUIError->else->super->getUIError
MultiUIDefaults.MultiUIDefaultsEnumerator#hasMoreElements()::: multi defaults enumerator has more elements:::return->iterator->hasNext
MultiUIDefaults.MultiUIDefaultsEnumerator#nextElement()::: multi defaults enumerator next element:::switch->return->iterator->next->getKey->return->iterator->next->getValue->return
MultiUIDefaults#remove(Object)::: multi defaults remove:::value->for->i->v->super->remove->if->return
MultiUIDefaults#clear()::: multi defaults clear:::super->clear->foreach->if->table->clear
MultiUIDefaults#toString()::: multi defaults to string:::sb->new->StringBuilder->sb->append->keys->keys->while->keys->hasMoreElements->key->keys->nextElement->sb->get->append->length->sb->length->if->sb->delete->sb->append->return->sb->toString
MutableComboBoxModel#addElement(E):::Adds an item at the end of the model:::
MutableComboBoxModel#removeElement(Object):::Removes an item from the model:::
MutableComboBoxModel#insertElementAt(E, int):::Adds an item at a specific index:::
MutableComboBoxModel#removeElementAt(int):::Removes an item at a specific index:::
OverlayLayout#getTarget():::Returns the container that uses this layout manager.:::return
OverlayLayout#invalidateLayout(Container):::Indicates a child has changed its layout related information, which causes any cached calculations to be flushed.:::checkContainer
OverlayLayout#addLayoutComponent(String, Component):::Adds the specified component to the layout:::comp->getParent->invalidateLayout
OverlayLayout#removeLayoutComponent(Component):::Removes the specified component from the layout:::comp->getParent->invalidateLayout
OverlayLayout#addLayoutComponent(Component, Object):::Adds the specified component to the layout, using the specified constraint object:::comp->getParent->invalidateLayout
OverlayLayout#preferredLayoutSize(Container):::Returns the preferred dimensions for this layout given the components in the specified target container:::checkContainer->checkRequests->size->new->Dimension->insets->target->getInsets->return
OverlayLayout#minimumLayoutSize(Container):::Returns the minimum dimensions needed to lay out the components contained in the specified target container:::checkContainer->checkRequests->size->new->Dimension->insets->target->getInsets->return
OverlayLayout#maximumLayoutSize(Container):::Returns the maximum dimensions needed to lay out the components contained in the specified target container:::checkContainer->checkRequests->size->new->Dimension->insets->target->getInsets->return
OverlayLayout#getLayoutAlignmentX(Container):::Returns the alignment along the x axis for the container.:::checkContainer->checkRequests->return
OverlayLayout#getLayoutAlignmentY(Container):::Returns the alignment along the y axis for the container.:::checkContainer->checkRequests->return
OverlayLayout#layoutContainer(Container):::Called by the AWT when the specified container needs to be laid out.:::checkContainer->checkRequests->nChildren->target->getComponentCount->xOffsets->new->intArr->xSpans->new->intArr->yOffsets->new->intArr->ySpans->new->intArr->alloc->target->getSize->in->target->getInsets->SizeRequirements->calculateAlignedPositions->SizeRequirements->calculateAlignedPositions->for->i
OverlayLayout#checkContainer(Container)::: overlay layout check container:::if->throw->new->AWTError
OverlayLayout#checkRequests()::: overlay layout check requests:::if->n->target->getComponentCount->new->SizeRequirementsArr->new->SizeRequirementsArr->for->i->SizeRequirements->getAlignedSizeRequirements->SizeRequirements->getAlignedSizeRequirements
Painter#paint(Graphics2D, T, int, int):::Renders to the given java.awt.Graphics2D object:::
Popup#show()::: popup show:::component->getComponent->if->component->show
Popup#hide()::: popup hide:::component->getComponent->if->component->hide->getContentPane->removeAll->dispose
Popup#dispose():::Frees any resources the Popup may be holding onto.:::component->getComponent->window->SwingUtilities->getWindowAncestor->if->dispose->if->window->dispose
Popup#reset(Component, Component, int, int):::Resets the Popup to an initial state.:::if->getComponent->createComponent->c->getComponent->if->component->getComponent->component->setLocation->component->getContentPane->add->component->invalidate->component->validate->if->component->isVisible->pack
Popup#pack():::Causes the Popup to be sized to fit the preferred size of the Component it contains.:::component->getComponent->if->pack
Popup#getParentWindow(Component):::Returns the Window to use as the parent of the Window created for the Popup:::window->if->else->if->SwingUtilities->getWindowAncestor->if->new->DefaultFrame->return
Popup#createComponent(Component):::Creates the Component to use as the parent of the Popup:::if->GraphicsEnvironment->isHeadless->return->return->getParentWindow->new->HeavyWeightWindow
Popup#getComponent():::Returns the Component returned from createComponent that will hold the Popup.:::return
Popup.HeavyWeightWindow#update(Graphics)::: heavy weight window update:::paint
Popup.HeavyWeightWindow#show()::: heavy weight window show:::this->pack->if->getWidth->getHeight->super->show
PopupFactory#setSharedInstance(PopupFactory):::Sets the PopupFactory that will be used to obtain Popups:::if->throw->new->IllegalArgumentException->SwingUtilities->appContextPut
PopupFactory#getSharedInstance():::Returns the shared PopupFactory which can be used to obtain Popups.:::factory->SwingUtilities->appContextGet->if->new->PopupFactory->setSharedInstance->return
PopupFactory#setPopupType(int):::Provides a hint as to the type of Popup that should be created.:::
PopupFactory#getPopupType():::Returns the preferred type of Popup to create.:::return
PopupFactory#getPopup(Component, Component, int, int):::Creates a Popup for the Component owner containing the Component contents:::return->getPopup
PopupFactory#getPopup(Component, Component, int, int, boolean):::Creates a Popup for the Component owner containing the Component contents:::if->throw->new->IllegalArgumentException->if->return->getPopup->popupType->getPopupType->popup->getPopup->if->getPopup->return
PopupFactory#getPopupType(Component, Component, int, int):::Returns the popup type to use for the specified parameters.:::popupType->getPopupType->if->invokerInHeavyWeightPopup->else->if->c->while->if->if->getClientProperty->break->c->getParent->return
PopupFactory#getPopup(Component, Component, int, int, int):::Obtains the appropriate Popup based on popupType.:::if->GraphicsEnvironment->isHeadless->return->getHeadlessPopup->switch->return->getLightWeightPopup->return->getMediumWeightPopup->popup->getHeavyWeightPopup->if->AccessController->OSInfo->getOSTypeAction->doPrivileged->EmbeddedFrame->getAppletIfAncestorOf->setCacheEnabled->return->return
PopupFactory#getHeadlessPopup(Component, Component, int, int):::Creates a headless popup:::return->HeadlessPopup->getHeadlessPopup
PopupFactory#getLightWeightPopup(Component, Component, int, int):::Creates a light weight popup.:::return->LightWeightPopup->getLightWeightPopup
PopupFactory#getMediumWeightPopup(Component, Component, int, int):::Creates a medium weight popup.:::return->MediumWeightPopup->getMediumWeightPopup
PopupFactory#getHeavyWeightPopup(Component, Component, int, int):::Creates a heavy weight popup.:::if->GraphicsEnvironment->isHeadless->return->getMediumWeightPopup->return->HeavyWeightPopup->getHeavyWeightPopup
PopupFactory#invokerInHeavyWeightPopup(Component):::Returns true if the Component i inside a heavy weight Popup.:::if->parent->for->i->getParent->parent->getParent->return
PopupFactory.HeavyWeightPopup#getHeavyWeightPopup(Component, Component, int, int):::Returns either a new or recycled Popup containing the specified children.:::window->SwingUtilities->getWindowAncestor->popup->if->getRecycledHeavyWeightPopup->focusPopup->if->contents->isFocusable->if->jpm->popComps->jpm->getComponents->foreach->if->break->if->popup->getComponent->getFocusableWindowState->if->popup->_dispose->new->HeavyWeightPopup->popup->reset->if->wnd->popup->getComponent->wnd->setFocusableWindowState->wnd->setName->return
PopupFactory.HeavyWeightPopup#getRecycledHeavyWeightPopup(Window):::Returns a previously disposed heavy weight Popup associated with window:::synchronized->cache->heavyPopupCache->getHeavyWeightPopupCache->if->heavyPopupCache->containsKey->heavyPopupCache->get->else->return->if->cache->size->r->cache->get->cache->remove->return->return
PopupFactory.HeavyWeightPopup#getHeavyWeightPopupCache():::Returns the cache to use for heavy weight popups:::synchronized->cache->SwingUtilities->appContextGet->if->new->HashMap<>->SwingUtilities->appContextPut->return
PopupFactory.HeavyWeightPopup#recycleHeavyWeightPopup(HeavyWeightPopup):::Recycles the passed in HeavyWeightPopup.:::synchronized->cache->window->SwingUtilities->popup->getComponent->getWindowAncestor->heavyPopupCache->getHeavyWeightPopupCache->if->window->isVisible->popup->_dispose->return->else->if->heavyPopupCache->containsKey->heavyPopupCache->get->else->new->ArrayList<HeavyWeightPopup>->heavyPopupCache->put->w->w->new->WindowAdapter->addWindowListener->if->cache->size->cache->add->else->popup->_dispose
PopupFactory.HeavyWeightPopup#setCacheEnabled(boolean):::Enables or disables cache for current object.:::
PopupFactory.HeavyWeightPopup#hide()::: heavy weight popup hide:::super->hide->if->recycleHeavyWeightPopup->else->this->_dispose
PopupFactory.HeavyWeightPopup#dispose():::As we recycle the Window, we don't want to dispose it, thus this method does nothing, instead use _dipose which will handle the disposing.:::
PopupFactory.HeavyWeightPopup#_dispose()::: heavy weight popup _dispose:::super->dispose
PopupFactory.ContainerPopup#hide()::: container popup hide:::component->getComponent->if->parent->component->getParent->if->bounds->component->getBounds->parent->remove->parent->repaint
PopupFactory.ContainerPopup#pack()::: container popup pack:::component->getComponent->if->component->component->getPreferredSize->setSize
PopupFactory.ContainerPopup#reset(Component, Component, int, int)::: container popup reset:::if->getLayeredPane->super->reset
PopupFactory.ContainerPopup#overlappedByOwnedWindow()::: container popup overlapped by owned window:::component->getComponent->if->w->SwingUtilities->getWindowAncestor->if->return->ownedWindows->w->getOwnedWindows->if->bnd->component->getBounds->foreach->if->window->isVisible->bnd->window->getBounds->intersects->return->return
PopupFactory.ContainerPopup#fitsOnScreen():::Returns true if popup can fit the screen and the owner's top parent:::result->component->getComponent->if->popupWidth->component->getWidth->popupHeight->component->getHeight->parent->SwingUtilities->getRoot->if->parentBounds->parent->getBounds->i->parent->getInsets->if->JPopupMenu->canPopupOverlapTaskBar->gc->parent->getGraphicsConfiguration->popupArea->getContainerPopupArea->parentBounds->intersection->contains->else->parentBounds->contains->else->if->parentBounds->parent->getBounds->p->parent->getLocationOnScreen->parentBounds->contains->return
PopupFactory.ContainerPopup#getContainerPopupArea(GraphicsConfiguration)::: container popup get container popup area:::screenBounds->toolkit->Toolkit->getDefaultToolkit->insets->if->gc->getBounds->toolkit->getScreenInsets->else->toolkit->getScreenSize->new->Rectangle->new->Insets->return
PopupFactory.HeadlessPopup#getHeadlessPopup(Component, Component, int, int)::: headless popup get headless popup:::popup->new->HeadlessPopup->popup->reset->return
PopupFactory.HeadlessPopup#createComponent(Component)::: headless popup create component:::return->new->BorderLayout->new->Panel
PopupFactory.HeadlessPopup#show()::: headless popup show:::
PopupFactory.HeadlessPopup#hide()::: headless popup hide:::
PopupFactory.LightWeightPopup#getLightWeightPopup(Component, Component, int, int):::Returns a light weight Popup implementation:::popup->getRecycledLightWeightPopup->if->new->LightWeightPopup->popup->reset->if->popup->fitsOnScreen->popup->overlappedByOwnedWindow->popup->hide->return->return
PopupFactory.LightWeightPopup#getLightWeightPopupCache():::Returns the cache to use for heavy weight popups.:::cache->SwingUtilities->appContextGet->if->new->ArrayList<>->SwingUtilities->appContextPut->return
PopupFactory.LightWeightPopup#recycleLightWeightPopup(LightWeightPopup):::Recycles the LightWeightPopup popup.:::synchronized->lightPopupCache->getLightWeightPopupCache->if->lightPopupCache->size->lightPopupCache->add
PopupFactory.LightWeightPopup#getRecycledLightWeightPopup():::Returns a previously used LightWeightPopup, or null if none of the popups have been recycled.:::synchronized->lightPopupCache->getLightWeightPopupCache->if->lightPopupCache->size->r->lightPopupCache->get->lightPopupCache->remove->return->return
PopupFactory.LightWeightPopup#hide()::: light weight popup hide:::super->hide->component->getComponent->component->removeAll->recycleLightWeightPopup
PopupFactory.LightWeightPopup#show()::: light weight popup show:::parent->if->owner->getParent->for->p->p->getParent->p->SwingUtilities->convertScreenLocationToParent->component->getComponent->component->setLocation->if->parent->add->else->parent->add
PopupFactory.LightWeightPopup#createComponent(Component)::: light weight popup create component:::component->new->BorderLayout->new->JPanel->component->setOpaque->return
PopupFactory.LightWeightPopup#reset(Component, Component, int, int):::Resets the Popup to an initial state.:::super->reset->component->getComponent->component->contents->isOpaque->setOpaque->component->setLocation->component->add->contents->invalidate->pack
PopupFactory.MediumWeightPopup#getMediumWeightPopup(Component, Component, int, int):::Returns a medium weight Popup implementation:::popup->getRecycledMediumWeightPopup->if->new->MediumWeightPopup->popup->reset->if->popup->fitsOnScreen->popup->overlappedByOwnedWindow->popup->hide->return->return
PopupFactory.MediumWeightPopup#getMediumWeightPopupCache():::Returns the cache to use for medium weight popups.:::cache->SwingUtilities->appContextGet->if->new->ArrayList<>->SwingUtilities->appContextPut->return
PopupFactory.MediumWeightPopup#recycleMediumWeightPopup(MediumWeightPopup):::Recycles the MediumWeightPopup popup.:::synchronized->mediumPopupCache->getMediumWeightPopupCache->if->mediumPopupCache->size->mediumPopupCache->add
PopupFactory.MediumWeightPopup#getRecycledMediumWeightPopup():::Returns a previously used MediumWeightPopup, or null if none of the popups have been recycled.:::synchronized->mediumPopupCache->getMediumWeightPopupCache->if->mediumPopupCache->size->r->mediumPopupCache->get->mediumPopupCache->remove->return->return
PopupFactory.MediumWeightPopup#hide()::: medium weight popup hide:::super->hide->rootPane->getContentPane->removeAll->recycleMediumWeightPopup
PopupFactory.MediumWeightPopup#show()::: medium weight popup show:::component->getComponent->parent->if->owner->getParent->while->parent->getParent->if->getLayeredPane->p->SwingUtilities->convertScreenLocationToParent->component->setVisible->component->setLocation->parent->add->else->p->SwingUtilities->convertScreenLocationToParent->component->setLocation->component->setVisible->parent->add->component->setVisible
PopupFactory.MediumWeightPopup#createComponent(Component)::: medium weight popup create component:::component->new->MediumWeightComponent->new->JRootPane->rootPane->setOpaque->component->add->return
PopupFactory.MediumWeightPopup#reset(Component, Component, int, int):::Resets the Popup to an initial state.:::super->reset->component->getComponent->component->setLocation->rootPane->getContentPane->add->contents->invalidate->component->validate->pack
ProgressMonitor.ProgressOptionPane#getMaxCharactersPerLineCount()::: progress option pane get max characters per line count:::return
ProgressMonitor.ProgressOptionPane#createDialog(Component, String)::: progress option pane create dialog:::dialog->window->JOptionPane->getWindowForComponent->if->new->JDialog->else->new->JDialog->if->ownerShutdownListener->SwingUtilities->getSharedOwnerFrameShutdownListener->dialog->addWindowListener->contentPane->dialog->getContentPane->contentPane->new->BorderLayout->setLayout->contentPane->add->dialog->pack->dialog->setLocationRelativeTo->dialog->new->WindowAdapter->addWindowListener->new->PropertyChangeListener->addPropertyChangeListener->return
ProgressMonitor.ProgressOptionPane#getAccessibleContext():::Gets the AccessibleContext for the ProgressOptionPane:::return->ProgressMonitor.this->getAccessibleContext
ProgressMonitor.ProgressOptionPane#getAccessibleJOptionPane()::: progress option pane get accessible option pane:::return->super->getAccessibleContext
ProgressMonitor#setProgress(int):::Indicate the progress of the operation being monitored:::if->close->else->if->myBar->setValue->else->T->System->currentTimeMillis->dT->if->predictedCompletionTime->if->else->if->new->JProgressBar->myBar->setMinimum->myBar->setMaximum->myBar->setValue->if->new->JLabel->new->ObjectArr->new->ProgressOptionPane->pane->UIManager->getString->createDialog->dialog->show
ProgressMonitor#close():::Indicate that the operation is complete:::if->dialog->setVisible->dialog->dispose
ProgressMonitor#getMinimum():::Returns the minimum value -- the lower end of the progress value.:::return
ProgressMonitor#setMinimum(int):::Specifies the minimum value.:::if->myBar->setMinimum
ProgressMonitor#getMaximum():::Returns the maximum value -- the higher end of the progress value.:::return
ProgressMonitor#setMaximum(int):::Specifies the maximum value.:::if->myBar->setMaximum
ProgressMonitor#isCanceled():::Returns true if the user hits the Cancel button or closes the progress dialog.:::if->return->v->pane->getValue->if->return->return->v->equals->v->Integer->valueOf->equals
ProgressMonitor#setMillisToDecideToPopup(int):::Specifies the amount of time to wait before deciding whether or not to popup a progress monitor.:::
ProgressMonitor#getMillisToDecideToPopup():::Returns the amount of time this object waits before deciding whether or not to popup a progress monitor.:::return
ProgressMonitor#setMillisToPopup(int):::Specifies the amount of time it will take for the popup to appear:::
ProgressMonitor#getMillisToPopup():::Returns the amount of time it will take for the popup to appear.:::return
ProgressMonitor#setNote(String):::Specifies the additional note that is displayed along with the progress message:::if->noteLabel->setText
ProgressMonitor#getNote():::Specifies the additional note that is displayed along with the progress message.:::return
ProgressMonitor#getAccessibleContext():::Gets the AccessibleContext for the ProgressMonitor:::if->new->AccessibleProgressMonitor->if->if->optionPaneCreated->return
ProgressMonitor.AccessibleProgressMonitor#optionPaneCreated()::: accessible progress monitor option pane created:::getAccessibleJOptionPane->if->myBar->addChangeListener->if->noteLabel->addPropertyChangeListener
ProgressMonitor.AccessibleProgressMonitor#stateChanged(ChangeEvent):::Invoked when the target of the listener has changed its state.:::if->return->if->newModelValue->myBar->getValue->firePropertyChange
ProgressMonitor.AccessibleProgressMonitor#propertyChange(PropertyChangeEvent):::This method gets called when a bound property is changed.:::if->e->getSource->e->getPropertyName->firePropertyChange
ProgressMonitor.AccessibleProgressMonitor#getAccessibleName():::Gets the accessibleName property of this object:::if->return->else->if->return->accessibleJOptionPane->getAccessibleName->return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleDescription():::Gets the accessibleDescription property of this object:::if->return->else->if->return->accessibleJOptionPane->getAccessibleDescription->return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleRole():::Gets the role of this object:::return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleStateSet():::Gets the state set of this object:::if->return->accessibleJOptionPane->getAccessibleStateSet->return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleParent():::Gets the Accessible parent of this object.:::return
ProgressMonitor.AccessibleProgressMonitor#getParentAccessibleContext()::: accessible progress monitor get parent accessible context:::if->return->dialog->getAccessibleContext->return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleIndexInParent():::Gets the 0-based index of this object in its accessible parent.:::if->return->accessibleJOptionPane->getAccessibleIndexInParent->return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleChildrenCount():::Returns the number of accessible children of the object.:::ac->getPanelAccessibleContext->if->return->ac->getAccessibleChildrenCount->return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleChild(int):::Returns the specified Accessible child of the object:::ac->getPanelAccessibleContext->if->return->ac->getAccessibleChild->return
ProgressMonitor.AccessibleProgressMonitor#getPanelAccessibleContext()::: accessible progress monitor get panel accessible context:::if->c->myBar->getParent->if->return->c->getAccessibleContext->return
ProgressMonitor.AccessibleProgressMonitor#getLocale():::Gets the locale of the component:::if->return->accessibleJOptionPane->getLocale->return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleComponent():::Gets the AccessibleComponent associated with this object that has a graphical representation.:::if->return->accessibleJOptionPane->getAccessibleComponent->return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleValue():::Gets the AccessibleValue associated with this object that supports a Numerical value.:::if->return->myBar->getAccessibleContext->getAccessibleValue->return
ProgressMonitor.AccessibleProgressMonitor#getAccessibleText():::Gets the AccessibleText associated with this object presenting text on the display.:::if->getNoteLabelAccessibleText->return->return
ProgressMonitor.AccessibleProgressMonitor#getNoteLabelAccessibleText()::: accessible progress monitor get note label accessible text:::if->return->noteLabel->getAccessibleContext->getAccessibleText->return
ProgressMonitor.AccessibleProgressMonitor#getIndexAtPoint(Point):::Given a point in local coordinates, return the zero-based index of the character under that Point:::at->getNoteLabelAccessibleText->if->sameWindowAncestor->noteLabelPoint->SwingUtilities->convertPoint->if->return->at->getIndexAtPoint->return
ProgressMonitor.AccessibleProgressMonitor#getCharacterBounds(int):::Determines the bounding box of the character at the given index into the string:::at->getNoteLabelAccessibleText->if->sameWindowAncestor->noteLabelRect->at->getCharacterBounds->if->return->SwingUtilities->convertRectangle->return
ProgressMonitor.AccessibleProgressMonitor#sameWindowAncestor(Component, Component)::: accessible progress monitor same window ancestor:::if->return->return->SwingUtilities->getWindowAncestor->SwingUtilities->getWindowAncestor
ProgressMonitor.AccessibleProgressMonitor#getCharCount():::Returns the number of characters (valid indicies):::at->getNoteLabelAccessibleText->if->return->at->getCharCount->return
ProgressMonitor.AccessibleProgressMonitor#getCaretPosition():::Returns the zero-based offset of the caret:::at->getNoteLabelAccessibleText->if->return->at->getCaretPosition->return
ProgressMonitor.AccessibleProgressMonitor#getAtIndex(int, int):::Returns the String at a given index.:::at->getNoteLabelAccessibleText->if->return->at->getAtIndex->return
ProgressMonitor.AccessibleProgressMonitor#getAfterIndex(int, int):::Returns the String after a given index.:::at->getNoteLabelAccessibleText->if->return->at->getAfterIndex->return
ProgressMonitor.AccessibleProgressMonitor#getBeforeIndex(int, int):::Returns the String before a given index.:::at->getNoteLabelAccessibleText->if->return->at->getBeforeIndex->return
ProgressMonitor.AccessibleProgressMonitor#getCharacterAttribute(int):::Returns the AttributeSet for a given character at a given index:::at->getNoteLabelAccessibleText->if->return->at->getCharacterAttribute->return
ProgressMonitor.AccessibleProgressMonitor#getSelectionStart():::Returns the start offset within the selected text:::at->getNoteLabelAccessibleText->if->return->at->getSelectionStart->return
ProgressMonitor.AccessibleProgressMonitor#getSelectionEnd():::Returns the end offset within the selected text:::at->getNoteLabelAccessibleText->if->return->at->getSelectionEnd->return
ProgressMonitor.AccessibleProgressMonitor#getSelectedText():::Returns the portion of the text that is selected.:::at->getNoteLabelAccessibleText->if->return->at->getSelectedText->return
ProgressMonitorInputStream#getProgressMonitor():::Get the ProgressMonitor object being used by this stream:::return
ProgressMonitorInputStream#read():::Overrides FilterInputStream.read to update the progress monitor after the read.:::c->in->read->if->monitor->setProgress->if->monitor->isCanceled->exc->new->InterruptedIOException->throw->return
ProgressMonitorInputStream#read(byte[]):::Overrides FilterInputStream.read to update the progress monitor after the read.:::nr->in->read->if->monitor->setProgress->if->monitor->isCanceled->exc->new->InterruptedIOException->throw->return
ProgressMonitorInputStream#read(byte[], int, int):::Overrides FilterInputStream.read to update the progress monitor after the read.:::nr->in->read->if->monitor->setProgress->if->monitor->isCanceled->exc->new->InterruptedIOException->throw->return
ProgressMonitorInputStream#skip(long):::Overrides FilterInputStream.skip to update the progress monitor after the skip.:::nr->in->skip->if->monitor->setProgress->return
ProgressMonitorInputStream#close():::Overrides FilterInputStream.close to close the progress monitor as well as the stream.:::in->close->monitor->close
ProgressMonitorInputStream#reset():::Overrides FilterInputStream.reset to reset the progress monitor as well as the stream.:::in->reset->in->available->monitor->setProgress
Renderer#setValue(Object, boolean):::Specifies the value to display and whether or not the value should be portrayed as "currently selected".:::
Renderer#getComponent():::Returns the component used to render the value.:::
RepaintManager#currentManager(Component):::Return the RepaintManager for the calling thread given a Component.:::return->AppContext->getAppContext->currentManager
RepaintManager#currentManager(AppContext):::Returns the RepaintManager for the specified AppContext:::rm->appContext->get->if->new->RepaintManager->appContext->put->return
RepaintManager#currentManager(JComponent):::Return the RepaintManager for the calling thread given a JComponent:::return->currentManager
RepaintManager#setCurrentManager(RepaintManager):::Set the RepaintManager that should be used for the calling thread:::if->SwingUtilities->appContextPut->else->SwingUtilities->appContextRemove
RepaintManager#displayChanged()::: repaint manager display changed:::if->clearImages->else->setDoubleBufferMaximumSize
RepaintManager#addInvalidComponent(JComponent):::Mark the component as in need of layout and queue a runnable for the event dispatching thread that will validate the components first isValidateRoot() ancestor.:::delegate->getDelegate->if->delegate->addInvalidComponent->return->validateRoot->SwingUtilities->getValidateRoot->if->return->if->new->ArrayList<Component>->else->n->invalidComponents->size->for->i->invalidComponents->add->SunToolkit->targetToAppContext->scheduleProcessingRunnable
RepaintManager#removeInvalidComponent(JComponent):::Remove a component from the list of invalid components.:::delegate->getDelegate->if->delegate->removeInvalidComponent->return->if->index->invalidComponents->indexOf->if->invalidComponents->remove
RepaintManager#addDirtyRegion0(Container, int, int, int, int):::Add a component in the list of components that should be refreshed:::if->return->if->c->getWidth->c->getHeight->return->if->extendDirtyRegion->return->root->for->p->p->getParent->if->return->synchronized->if->extendDirtyRegion->return->dirtyComponents->new->Rectangle->put->SunToolkit->targetToAppContext->scheduleProcessingRunnable
RepaintManager#addDirtyRegion(JComponent, int, int, int, int):::Add a component in the list of components that should be refreshed:::delegate->getDelegate->if->delegate->addDirtyRegion->return->addDirtyRegion0
RepaintManager#addDirtyRegion(Window, int, int, int, int):::Adds window to the list of Components that need to be repainted.:::addDirtyRegion0
RepaintManager#addDirtyRegion(Applet, int, int, int, int):::Adds applet to the list of Components that need to be repainted.:::addDirtyRegion0
RepaintManager#scheduleHeavyWeightPaints()::: repaint manager schedule heavy weight paints:::hws->synchronized->if->hwDirtyComponents->size->return->new->IdentityHashMap<Container,Rectangle>->foreach->hws->keySet->dirty->hws->get->if->addDirtyRegion->else->if->addDirtyRegion->else->addDirtyRegion0
RepaintManager#nativeAddDirtyRegion(AppContext, Container, int, int, int, int)::: repaint manager native add dirty region:::if->synchronized->dirty->hwDirtyComponents->get->if->hwDirtyComponents->new->Rectangle->put->else->hwDirtyComponents->SwingUtilities->computeUnion->put->scheduleProcessingRunnable
RepaintManager#nativeQueueSurfaceDataRunnable(AppContext, Component, Runnable)::: repaint manager native queue surface data runnable:::synchronized->if->new->LinkedList<Runnable>->runnableList->new->Runnable->add->scheduleProcessingRunnable
RepaintManager#extendDirtyRegion(Component, int, int, int, int):::Extends the dirty region for the specified component to include the new region.:::r->dirtyComponents->get->if->SwingUtilities->computeUnion->return->return
RepaintManager#getDirtyRegion(JComponent):::Return the current dirty region for a component:::delegate->getDelegate->if->return->delegate->getDirtyRegion->r->synchronized->dirtyComponents->get->if->return->new->Rectangle->else->return->new->Rectangle
RepaintManager#markCompletelyDirty(JComponent):::Mark a component completely dirty:::delegate->getDelegate->if->delegate->markCompletelyDirty->return->addDirtyRegion
RepaintManager#markCompletelyClean(JComponent):::Mark a component completely clean:::delegate->getDelegate->if->delegate->markCompletelyClean->return->synchronized->dirtyComponents->remove
RepaintManager#isCompletelyDirty(JComponent):::Convenience method that returns true if aComponent will be completely painted during the next paintDirtyRegions():::delegate->getDelegate->if->return->delegate->isCompletelyDirty->r->getDirtyRegion->if->return->else->return
RepaintManager#validateInvalidComponents():::Validate all of the components that have been marked invalid.:::ic->synchronized->if->return->n->ic->size->for->i
RepaintManager#prePaintDirtyRegions():::This is invoked to process paint requests:::dirtyComponents->runnableList->synchronized->if->foreach->runnable->run->paintDirtyRegions->if->dirtyComponents->size->paintDirtyRegions
RepaintManager#updateWindows(Map)::: repaint manager update windows:::toolkit->Toolkit->getDefaultToolkit->if->needUpdateWindow->return->windows->new->HashSet<Window>->dirtyComps->dirtyComponents->keySet->for->it->dirtyComps->iterator->it->hasNext->foreach->AWTAccessor->getWindowAccessor->updateWindow
RepaintManager#isPainting()::: repaint manager is painting:::return
RepaintManager#paintDirtyRegions():::Paint all of the components that have been marked dirty.:::synchronized->tmp->dirtyComponents->clear->paintDirtyRegions
RepaintManager#paintDirtyRegions(Map)::: repaint manager paint dirty regions:::if->tmpDirtyComponents->isEmpty->return->roots->tmpDirtyComponents->size->new->ArrayList<Component>->foreach->tmpDirtyComponents->keySet->collectDirtyComponents->count->roots->size->new->AtomicInteger->try->for->j->count->get->catch->finally->updateWindows->tmpDirtyComponents->clear
RepaintManager#adjustRoots(JComponent, java.util.List, int):::Removes any components from roots that are children of root.:::for->i->roots->size
RepaintManager#collectDirtyComponents(Map, Component, java.util.List)::: repaint manager collect dirty components:::dx->dy->rootDx->rootDy->component->rootDirtyComponent->parent->cBounds->x->dirtyComponent->getX->y->dirtyComponent->getY->w->dirtyComponent->getWidth->h->dirtyComponent->getHeight->tmp->dirtyComponents->get->setBounds->SwingUtilities->computeIntersection->if->tmp->isEmpty->return->for->if->r->tmp->setLocation->dirtyComponents->get->SwingUtilities->computeUnion->if->roots->contains->roots->add
RepaintManager#toString():::Returns a string that displays and identifies this object's properties.:::sb->new->StringBuilder->if->sb->append->return->sb->toString
RepaintManager#getOffscreenBuffer(Component, int, int):::Return the offscreen buffer that should be used as a double buffer with the component c:::delegate->getDelegate->if->return->delegate->getOffscreenBuffer->return->_getOffscreenBuffer
RepaintManager#getVolatileOffscreenBuffer(Component, int, int):::Return a volatile offscreen buffer that should be used as a double buffer with the specified component c:::delegate->getDelegate->if->return->delegate->getVolatileOffscreenBuffer->w->SwingUtilities->getWindowAncestor->if->w->isOpaque->tk->Toolkit->getDefaultToolkit->if->needUpdateWindow->return->config->c->getGraphicsConfiguration->if->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->maxSize->getDoubleBufferMaximumSize->width->height->image->volatileMap->get->if->image->getWidth->image->getHeight->if->image->flush->config->createCompatibleVolatileImage->volatileMap->put->return
RepaintManager#_getOffscreenBuffer(Component, int, int)::: repaint manager _get offscreen buffer:::maxSize->getDoubleBufferMaximumSize->doubleBuffer->width->height->w->SwingUtilities->getWindowAncestor->if->w->isOpaque->tk->Toolkit->getDefaultToolkit->if->needUpdateWindow->return->if->new->DoubleBufferInfo->if->if->flush->Math->max->Math->max->result->if->c->createImage->new->Dimension->if->setCreatedDoubleBuffer->return
RepaintManager#setDoubleBufferMaximumSize(Dimension):::Set the maximum double buffer size.:::if->clearImages->else->clearImages
RepaintManager#clearImages()::: repaint manager clear images:::clearImages
RepaintManager#clearImages(int, int)::: repaint manager clear images:::if->if->getWidth->getHeight->flush->gcs->volatileMap->keySet->iterator->while->gcs->hasNext->gc->gcs->next->image->volatileMap->get->if->image->getWidth->image->getHeight->image->flush->gcs->remove
RepaintManager#getDoubleBufferMaximumSize():::Returns the maximum double buffer size.:::if->try->virtualBounds->new->Rectangle->ge->GraphicsEnvironment->getLocalGraphicsEnvironment->foreach->ge->getScreenDevices->gc->gd->getDefaultConfiguration->virtualBounds->gc->getBounds->union->new->Dimension->catch->new->Dimension->finally->return
RepaintManager#setDoubleBufferingEnabled(boolean):::Enables or disables double buffering in this RepaintManager:::paintManager->getPaintManager->if->paintManager->getClass->new->PaintManager->setPaintManager
RepaintManager#isDoubleBufferingEnabled():::Returns true if this RepaintManager is double buffered:::return
RepaintManager#resetDoubleBuffer():::This resets the double buffer:::if
RepaintManager#resetVolatileDoubleBuffer(GraphicsConfiguration):::This resets the volatile double buffer.:::image->volatileMap->remove->if->image->flush
RepaintManager#useVolatileDoubleBuffer():::Returns true if we should use the Image returned from getVolatileOffscreenBuffer to do double buffering.:::return
RepaintManager#isPaintingThread():::Returns true if the current thread is the thread painting:::return->Thread->currentThread
RepaintManager#paint(JComponent, JComponent, Graphics, int, int, int, int):::Paints a region of a component:::paintManager->getPaintManager->if->isPaintingThread->if->paintManager->getClass->new->PaintManager->if->paintManager->paint->g->setClip->paintingComponent->paintToOffscreen
RepaintManager#copyArea(JComponent, Graphics, int, int, int, int, int, int, boolean):::Does a copy area on the specified region.:::getPaintManager->copyArea
RepaintManager#addRepaintListener(RepaintListener)::: repaint manager add repaint listener:::repaintListeners->add
RepaintManager#removeRepaintListener(RepaintListener)::: repaint manager remove repaint listener:::repaintListeners->remove
RepaintManager#notifyRepaintPerformed(JComponent, int, int, int, int):::Notify the attached repaint listeners that an area of the c component has been immediately repainted, that is without scheduling a repaint runnable, due to performing a "blit" (via calling the copyArea method).:::foreach->l->repaintPerformed
RepaintManager#beginPaint():::Invoked prior to any paint/copyArea method calls:::multiThreadedPaint->paintDepth->currentThread->Thread->currentThread->synchronized->if->else->if->getPaintManager->beginPaint
RepaintManager#endPaint():::Invoked after beginPaint has been invoked.:::if->isPaintingThread->paintManager->synchronized->if->getPaintManager->if->paintManager->endPaint->synchronized
RepaintManager#show(Container, int, int, int, int):::If possible this will show a previously rendered portion of a Component:::return->getPaintManager->show
RepaintManager#doubleBufferingChanged(JRootPane):::Invoked when the doubleBuffered or useTrueDoubleBuffering properties of a JRootPane change:::getPaintManager->doubleBufferingChanged
RepaintManager#setPaintManager(PaintManager):::Sets the PaintManager that is used to handle all double buffered painting.:::if->new->PaintManager->oldPaintManager->synchronized->if->oldPaintManager->dispose
RepaintManager#getPaintManager()::: repaint manager get paint manager:::if->paintManager->if->switch->tk->Toolkit->getDefaultToolkit->if->stk->if->stk->useBufferPerWindow->new->BufferStrategyPaintManager->break->new->BufferStrategyPaintManager->break->break->setPaintManager->return
RepaintManager#scheduleProcessingRunnable(AppContext)::: repaint manager schedule processing runnable:::if->processingRunnable->markPending->tk->Toolkit->getDefaultToolkit->if->SunToolkit->getSystemEventQueueImplPP->Toolkit->getDefaultToolkit->new->InvocationEvent->postEvent->else->Toolkit->getDefaultToolkit->getSystemEventQueue->Toolkit->getDefaultToolkit->new->InvocationEvent->postEvent
RepaintManager.PaintManager#paint(JComponent, JComponent, Graphics, int, int, int, int):::Paints a region of a component:::paintCompleted->offscreen->sw->sh->if->repaintManager->useVolatileDoubleBuffer->repaintManager->getVolatileOffscreenBuffer->getValidImage->vImage->gc->bufferComponent->getGraphicsConfiguration->for->i->if->repaintManager->getOffscreenBuffer->getValidImage->paintDoubleBuffered->return
RepaintManager.PaintManager#copyArea(JComponent, Graphics, int, int, int, int, int, int, boolean):::Does a copy area on the specified region.:::g->copyArea
RepaintManager.PaintManager#beginPaint():::Invoked prior to any calls to paint or copyArea.:::
RepaintManager.PaintManager#endPaint():::Invoked to indicate painting has been completed.:::
RepaintManager.PaintManager#show(Container, int, int, int, int):::Shows a region of a previously rendered component:::return
RepaintManager.PaintManager#doubleBufferingChanged(JRootPane):::Invoked when the doubleBuffered or useTrueDoubleBuffering properties of a JRootPane change:::
RepaintManager.PaintManager#paintDoubleBuffered(JComponent, Image, Graphics, int, int, int, int):::Paints a portion of a component to an offscreen buffer.:::if->isPixelsCopying->paintDoubleBufferedFPScales->else->paintDoubleBufferedImpl
RepaintManager.PaintManager#paintDoubleBufferedImpl(JComponent, Image, Graphics, int, int, int, int)::: paint manager paint double buffered impl:::osg->image->getGraphics->bw->Math->image->getWidth->min->bh->Math->image->getHeight->min->x->y->maxx->maxy->try->for->catch->finally->osg->dispose
RepaintManager.PaintManager#paintDoubleBufferedFPScales(JComponent, Image, Graphics, int, int, int, int)::: paint manager paint double buffered scales:::osg->image->getGraphics->g2d->osg2d->identity->new->AffineTransform->bw->Math->image->getWidth->min->bh->Math->image->getHeight->min->x->y->maxx->maxy->tx->g2d->getTransform->scaleX->tx->getScaleX->scaleY->tx->getScaleY->trX->tx->getTranslateX->trY->tx->getTranslateY->translucent->oldComposite->g2d->getComposite->try->for->catch->finally->osg->dispose
RepaintManager.PaintManager#getValidImage(Image):::If image is non-null with a positive size it is returned, otherwise null is returned.:::if->image->getWidth->image->getHeight->return->return
RepaintManager.PaintManager#repaintRoot(JComponent):::Schedules a repaint for the specified component:::if->else->root->repaint
RepaintManager.PaintManager#isRepaintingRoot():::Returns true if the component being painted is the root component that was previously passed to repaintRoot.:::return
RepaintManager.PaintManager#dispose():::Cleans up any state:::
RepaintManager.PaintManager#isPixelsCopying(JComponent, Graphics)::: paint manager is pixels copying:::tx->getTransform->gc->c->getGraphicsConfiguration->if->SwingUtilities2->isFloatingPointScale->return->gcTx->gc->getDefaultTransform->return->gcTx->getScaleX->tx->getScaleX->gcTx->getScaleY->tx->getScaleY
RepaintManager.PaintManager#getTransform(Graphics)::: paint manager get transform:::if->return->else->if->return->getTransform->return
RepaintManager.DisplayChangedHandler#displayChanged()::: display changed handler display changed:::scheduleDisplayChanges
RepaintManager.DisplayChangedHandler#paletteChanged()::: display changed handler palette changed:::
RepaintManager.DisplayChangedHandler#scheduleDisplayChanges()::: display changed handler schedule display changes:::foreach->AppContext->getAppContexts->synchronized->if->context->isDisposed->eventQueue->context->get->if->eventQueue->Toolkit->getDefaultToolkit->new->DisplayChangedRunnable->new->InvocationEvent->postEvent
RepaintManager.DisplayChangedRunnable#run()::: display changed runnable run:::RepaintManager->currentManager->displayChanged
RepaintManager.ProcessingRunnable#markPending():::Marks this processing runnable as pending:::if->return->return
RepaintManager.ProcessingRunnable#run()::: processing runnable run:::synchronized->scheduleHeavyWeightPaints->validateInvalidComponents->prePaintDirtyRegions
RepaintManager#getDelegate(Component)::: repaint manager get delegate:::delegate->SwingUtilities3->getDelegateRepaintManager->if->return
RootPaneContainer#getRootPane():::Return this component's single JRootPane child:::
RootPaneContainer#setContentPane(Container):::The "contentPane" is the primary container for application specific components:::
RootPaneContainer#getContentPane():::Returns the contentPane.:::
RootPaneContainer#setLayeredPane(JLayeredPane):::A Container that manages the contentPane and in some cases a menu bar:::
RootPaneContainer#getLayeredPane():::Returns the layeredPane.:::
RootPaneContainer#setGlassPane(Component):::The glassPane is always the first child of the rootPane and the rootPanes layout manager ensures that it's always as big as the rootPane:::
RootPaneContainer#getGlassPane():::Returns the glassPane.:::
RowFilter#checkIndices(int[]):::Throws an IllegalArgumentException if any of the values in columns are < 0.:::for->i
RowFilter#regexFilter(String, int...):::Returns a RowFilter that uses a regular expression to determine which entries to include:::return->Pattern->compile->new->RegexFilter<M,I>
RowFilter#dateFilter(ComparisonType, Date, int...):::Returns a RowFilter that includes entries that have at least one Date value meeting the specified criteria:::return->date->getTime->new->DateFilter<M,I>
RowFilter#numberFilter(ComparisonType, Number, int...):::Returns a RowFilter that includes entries that have at least one Number value meeting the specified criteria:::return->new->NumberFilter<M,I>
RowFilter#orFilter(Iterable>):::Returns a RowFilter that includes entries if any of the supplied filters includes the entry:::return->new->OrFilter<M,I>
RowFilter#andFilter(Iterable>):::Returns a RowFilter that includes entries if all of the supplied filters include the entry:::return->new->AndFilter<M,I>
RowFilter#notFilter(RowFilter):::Returns a RowFilter that includes entries if the supplied filter does not include the entry.:::return->new->NotFilter<M,I>
RowFilter#include(Entry):::Returns true if the specified entry should be shown; returns false if the entry should be hidden:::
RowFilter.Entry#getModel():::Returns the underlying model.:::
RowFilter.Entry#getValueCount():::Returns the number of values in the entry:::
RowFilter.Entry#getValue(int):::Returns the value at the specified index:::
RowFilter.Entry#getStringValue(int):::Returns the string value at the specified index:::value->getValue->return->value->toString
RowFilter.Entry#getIdentifier():::Returns the identifer (in the model) of the entry:::
RowFilter.GeneralFilter#include(Entry)::: general filter include:::count->value->getValueCount->if->for->i->else->while->if->include->return->return
RowFilter.GeneralFilter#include(Entry, int)::: general filter include:::
RowFilter.RegexFilter#include(Entry, int)::: regex filter include:::matcher->value->getStringValue->reset->return->matcher->find
RowFilter.DateFilter#include(Entry, int)::: date filter include:::v->value->getValue->if->vDate->getTime->switch->return->return->return->return->break->return
RowFilter.NumberFilter#include(Entry, int)::: number filter include:::v->value->getValue->if->compared->compareResult->vClass->v->getClass->if->number->getClass->compareTo->else->longCompare->switch->return->return->return->return->break->return
RowFilter.NumberFilter#longCompare(Number)::: number filter long compare:::diff->number->longValue->o->longValue->if->return->else->if->return->return
RowFilter.OrFilter#include(Entry)::: or filter include:::foreach->if->filter->include->return->return
RowFilter.AndFilter#include(Entry)::: and filter include:::foreach->if->filter->include->return->return
RowFilter.NotFilter#include(Entry)::: not filter include:::return->filter->include
RowSorter#getModel():::Returns the underlying model.:::
RowSorter#toggleSortOrder(int):::Reverses the sort order of the specified column:::
RowSorter#convertRowIndexToModel(int):::Returns the location of index in terms of the underlying model:::
RowSorter#convertRowIndexToView(int):::Returns the location of index in terms of the view:::
RowSorter#setSortKeys(List):::Sets the current sort keys.:::
RowSorter#getSortKeys():::Returns the current sort keys:::
RowSorter#getViewRowCount():::Returns the number of rows in the view:::
RowSorter#getModelRowCount():::Returns the number of rows in the underlying model.:::
RowSorter#modelStructureChanged():::Invoked when the underlying model structure has completely changed:::
RowSorter#allRowsChanged():::Invoked when the contents of the underlying model have completely changed:::
RowSorter#rowsInserted(int, int):::Invoked when rows have been inserted into the underlying model in the specified range (inclusive):::
RowSorter#rowsDeleted(int, int):::Invoked when rows have been deleted from the underlying model in the specified range (inclusive):::
RowSorter#rowsUpdated(int, int):::Invoked when rows have been changed in the underlying model between the specified range (inclusive):::
RowSorter#rowsUpdated(int, int, int):::Invoked when the column in the rows have been updated in the underlying model between the specified range:::
RowSorter#addRowSorterListener(RowSorterListener):::Adds a RowSorterListener to receive notification about this RowSorter:::listenerList->add
RowSorter#removeRowSorterListener(RowSorterListener):::Removes a RowSorterListener:::listenerList->remove
RowSorter#fireSortOrderChanged():::Notifies listener that the sort order has changed.:::new->RowSorterEvent->fireRowSorterChanged
RowSorter#fireRowSorterChanged(int[]):::Notifies listener that the mapping has changed.:::new->RowSorterEvent->fireRowSorterChanged
RowSorter#fireRowSorterChanged(RowSorterEvent)::: row sorter fire row sorter changed:::listeners->listenerList->getListenerList->for->i
RowSorter.SortKey#getColumn():::Returns the index of the column.:::return
RowSorter.SortKey#getSortOrder():::Returns the sort order of the column.:::return
RowSorter.SortKey#hashCode():::Returns the hash code for this SortKey.:::result->sortOrder->hashCode->return
RowSorter.SortKey#equals(Object):::Returns true if this object equals the specified object:::if->return->if->return->return
Scrollable#getPreferredScrollableViewportSize():::Returns the preferred size of the viewport for a view component:::
Scrollable#getScrollableUnitIncrement(Rectangle, int, int):::Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation:::
Scrollable#getScrollableBlockIncrement(Rectangle, int, int):::Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation:::
Scrollable#getScrollableTracksViewportWidth():::Return true if a viewport should always force the width of this Scrollable to match the width of the viewport:::
Scrollable#getScrollableTracksViewportHeight():::Return true if a viewport should always force the height of this Scrollable to match the height of the viewport:::
ScrollPaneLayout#syncWithScrollPane(JScrollPane):::This method is invoked after the ScrollPaneLayout is set as the LayoutManager of a JScrollPane:::sp->getViewport->sp->getVerticalScrollBar->sp->getHorizontalScrollBar->sp->getRowHeader->sp->getColumnHeader->sp->getCorner->sp->getCorner->sp->getCorner->sp->getCorner->sp->getVerticalScrollBarPolicy->sp->getHorizontalScrollBarPolicy
ScrollPaneLayout#addSingletonComponent(Component, Component):::Removes an existing component:::if->oldC->getParent->remove->return
ScrollPaneLayout#addLayoutComponent(String, Component):::Adds the specified component to the layout:::if->s->equals->addSingletonComponent->else->if->s->equals->addSingletonComponent->else->if->s->equals->addSingletonComponent->else->if->s->equals->addSingletonComponent->else->if->s->equals->addSingletonComponent->else->if->s->equals->addSingletonComponent->else->if->s->equals->addSingletonComponent->else->if->s->equals->addSingletonComponent->else->if->s->equals->addSingletonComponent->else->throw->new->IllegalArgumentException
ScrollPaneLayout#removeLayoutComponent(Component):::Removes the specified component from the layout.:::if->else->if->else->if->else->if->else->if->else->if->else->if->else->if->else->if
ScrollPaneLayout#getVerticalScrollBarPolicy():::Returns the vertical scrollbar-display policy.:::return
ScrollPaneLayout#setVerticalScrollBarPolicy(int):::Sets the vertical scrollbar-display policy:::switch->break->throw->new->IllegalArgumentException
ScrollPaneLayout#getHorizontalScrollBarPolicy():::Returns the horizontal scrollbar-display policy.:::return
ScrollPaneLayout#setHorizontalScrollBarPolicy(int):::Sets the horizontal scrollbar-display policy:::switch->break->throw->new->IllegalArgumentException
ScrollPaneLayout#getViewport():::Returns the JViewport object that displays the scrollable contents.:::return
ScrollPaneLayout#getHorizontalScrollBar():::Returns the JScrollBar object that handles horizontal scrolling.:::return
ScrollPaneLayout#getVerticalScrollBar():::Returns the JScrollBar object that handles vertical scrolling.:::return
ScrollPaneLayout#getRowHeader():::Returns the JViewport object that is the row header.:::return
ScrollPaneLayout#getColumnHeader():::Returns the JViewport object that is the column header.:::return
ScrollPaneLayout#getCorner(String):::Returns the Component at the specified corner.:::if->key->equals->return->else->if->key->equals->return->else->if->key->equals->return->else->if->key->equals->return->else->return
ScrollPaneLayout#preferredLayoutSize(Container):::The preferred size of a ScrollPane is the size of the insets, plus the preferred size of the viewport, plus the preferred size of the visible headers, plus the preferred size of the scrollbars that will appear given the current view and the current scrollbar displayPolicies:::scrollPane->scrollPane->getVerticalScrollBarPolicy->scrollPane->getHorizontalScrollBarPolicy->insets->parent->getInsets->prefWidth->prefHeight->extentSize->viewSize->view->if->viewport->getPreferredSize->viewport->getView->if->view->getPreferredSize->else->new->Dimension->if->viewportBorder->scrollPane->getViewportBorder->if->vpbInsets->viewportBorder->getBorderInsets->if->rowHead->isVisible->rowHead->getPreferredSize->if->colHead->isVisible->colHead->getPreferredSize->if->if->vsb->getPreferredSize->else->if->canScroll->if->getScrollableTracksViewportHeight->if->vsb->getPreferredSize->if->if->hsb->getPreferredSize->else->if->canScroll->if->getScrollableTracksViewportWidth->if->hsb->getPreferredSize->return->new->Dimension
ScrollPaneLayout#minimumLayoutSize(Container):::The minimum size of a ScrollPane is the size of the insets plus minimum size of the viewport, plus the scrollpane's viewportBorder insets, plus the minimum size of the visible headers, plus the minimum size of the scrollbars whose displayPolicy isn't NEVER.:::scrollPane->scrollPane->getVerticalScrollBarPolicy->scrollPane->getHorizontalScrollBarPolicy->insets->parent->getInsets->minWidth->minHeight->if->size->viewport->getMinimumSize->viewportBorder->scrollPane->getViewportBorder->if->vpbInsets->viewportBorder->getBorderInsets->if->rowHead->isVisible->size->rowHead->getMinimumSize->Math->max->if->colHead->isVisible->size->colHead->getMinimumSize->Math->max->if->size->vsb->getMinimumSize->Math->max->if->size->hsb->getMinimumSize->Math->max->return->new->Dimension
ScrollPaneLayout#layoutContainer(Container):::Lays out the scrollpane:::scrollPane->scrollPane->getVerticalScrollBarPolicy->scrollPane->getHorizontalScrollBarPolicy->availR->scrollPane->getBounds->insets->parent->getInsets->leftToRight->SwingUtilities->isLeftToRight->colHeadR->new->Rectangle->if->colHead->isVisible->colHeadHeight->Math->colHead->getPreferredSize->min->rowHeadR->new->Rectangle->if->rowHead->isVisible->rowHeadWidth->Math->rowHead->getPreferredSize->min->if->else->viewportBorder->scrollPane->getViewportBorder->vpbInsets->if->viewportBorder->getBorderInsets->else->new->Insets->view->viewport->getView->viewPrefSize->view->getPreferredSize->new->Dimension->extentSize->viewport->availR->getSize->toViewCoordinates->new->Dimension->viewTracksViewportWidth->viewTracksViewportHeight->isEmpty->sv->if->sv->getScrollableTracksViewportWidth->sv->getScrollableTracksViewportHeight->else->vsbR->new->Rectangle->vsbNeeded->if->else->if->else->if->adjustForVSB->viewport->availR->getSize->toViewCoordinates->hsbR->new->Rectangle->hsbNeeded->if->else->if->else->if->adjustForHSB->if->viewport->availR->getSize->toViewCoordinates->if->adjustForVSB->if->viewport->setBounds->if->viewport->availR->getSize->toViewCoordinates->oldHSBNeeded->oldVSBNeeded->sv->getScrollableTracksViewportWidth->sv->getScrollableTracksViewportHeight->if->newVSBNeeded->if->adjustForVSB->viewport->availR->getSize->toViewCoordinates->if->newHSBbNeeded->if->adjustForHSB->if->viewport->availR->getSize->toViewCoordinates->if->adjustForVSB->if->viewport->setBounds->if->rowHead->setBounds->if->colHead->setBounds->if->if->if->UIManager->getBoolean->if->vsb->setVisible->vsb->setBounds->else->vsb->setVisible->if->if->if->UIManager->getBoolean->if->if->hsb->setVisible->hsb->setBounds->else->hsb->setVisible->if->lowerLeft->setBounds->if->lowerRight->setBounds->if->upperLeft->setBounds->if->upperRight->setBounds
ScrollPaneLayout#adjustForVSB(boolean, Rectangle, Rectangle, Insets, boolean):::Adjusts the Rectangle available based on if the vertical scrollbar is needed (wantsVSB):::oldWidth->if->vsbWidth->Math->Math->vsb->getPreferredSize->min->max->if->else->else
ScrollPaneLayout#adjustForHSB(boolean, Rectangle, Rectangle, Insets):::Adjusts the Rectangle available based on if the horizontal scrollbar is needed (wantsHSB):::oldHeight->if->hsbHeight->Math->Math->hsb->getPreferredSize->min->max->else
ScrollPaneLayout#getViewportBorderBounds(JScrollPane):::Returns the bounds of the border around the specified scroll pane's viewport.:::return->scrollpane->getViewportBorderBounds
SingleSelectionModel#getSelectedIndex():::Returns the model's selection.:::
SingleSelectionModel#setSelectedIndex(int):::Sets the model's selected index to index:::
SingleSelectionModel#clearSelection():::Clears the selection (to -1).:::
SingleSelectionModel#isSelected():::Returns true if the selection model currently has a selected value.:::
SingleSelectionModel#addChangeListener(ChangeListener):::Adds listener as a listener to changes in the model.:::
SingleSelectionModel#removeChangeListener(ChangeListener):::Removes listener as a listener to changes in the model.:::
SizeRequirements#toString():::Returns a string describing the minimum, preferred, and maximum size requirements, along with the alignment.:::return
SizeRequirements#getTiledSizeRequirements(SizeRequirements[]):::Determines the total space necessary to place a set of components end-to-end:::total->new->SizeRequirements->for->i->return
SizeRequirements#getAlignedSizeRequirements(SizeRequirements[]):::Determines the total space necessary to align a set of components:::totalAscent->new->SizeRequirements->totalDescent->new->SizeRequirements->for->i->min->Math->min->pref->Math->min->max->Math->min->alignment->if->return->new->SizeRequirements
SizeRequirements#calculateTiledPositions(int, SizeRequirements, SizeRequirements[], int[], int[]):::Creates a set of offset/span pairs representing how to lay out a set of components end-to-end:::calculateTiledPositions
SizeRequirements#calculateTiledPositions(int, SizeRequirements, SizeRequirements[], int[], int[], boolean):::Creates a set of offset/span pairs representing how to lay out a set of components end-to-end:::min->pref->max->for->i->if->expandedTile->else->compressedTile
SizeRequirements#compressedTile(int, long, long, long, SizeRequirements[], int[], int[], boolean)::: size requirements compressed tile:::totalPlay->Math->min->factor->totalOffset->if->for->i->else->for->i
SizeRequirements#expandedTile(int, long, long, long, SizeRequirements[], int[], int[], boolean)::: size requirements expanded tile:::totalPlay->Math->min->factor->totalOffset->if->for->i->else->for->i
SizeRequirements#calculateAlignedPositions(int, SizeRequirements, SizeRequirements[], int[], int[]):::Creates a bunch of offset/span pairs specifying how to lay out a set of components with the specified alignments:::calculateAlignedPositions
SizeRequirements#calculateAlignedPositions(int, SizeRequirements, SizeRequirements[], int[], int[], boolean):::Creates a set of offset/span pairs specifying how to lay out a set of components with the specified alignments:::totalAlignment->totalAscent->totalDescent->for->i
SizeRequirements#adjustSizes(int, SizeRequirements[]):::Adjust a specified array of sizes by a given amount.:::return->new->intArr
SizeSequence#setSizes(int, int):::Resets the size sequence to contain length items all with a size of size.:::if->new->intArr->setSizes
SizeSequence#setSizes(int, int, int)::: size sequence set sizes:::if->return->m->setSizes->return->setSizes
SizeSequence#setSizes(int[]):::Resets this SizeSequence object, using the data in the sizes argument:::if->new->intArr->setSizes
SizeSequence#setSizes(int, int, int[])::: size sequence set sizes:::if->return->m->setSizes->return->setSizes
SizeSequence#getSizes():::Returns the size of all entries.:::n->sizes->new->intArr->getSizes->return
SizeSequence#getSizes(int, int, int[])::: size sequence get sizes:::if->return->m->getSizes->return->getSizes
SizeSequence#getPosition(int):::Returns the start position for the specified entry:::return->getPosition
SizeSequence#getPosition(int, int, int)::: size sequence get position:::if->return->m->if->return->getPosition->else->return->getPosition
SizeSequence#getIndex(int):::Returns the index of the entry that corresponds to the specified position:::return->getIndex
SizeSequence#getIndex(int, int, int)::: size sequence get index:::if->return->m->pivot->if->return->getIndex->else->return->getIndex
SizeSequence#getSize(int):::Returns the size of the specified entry:::return->getPosition->getPosition
SizeSequence#setSize(int, int):::Sets the size of the specified entry:::getSize->changeSize
SizeSequence#changeSize(int, int, int, int)::: size sequence change size:::if->return->m->if->changeSize->else->changeSize
SizeSequence#insertEntries(int, int, int):::Adds a contiguous group of entries to this SizeSequence:::sizes->getSizes->end->n->new->intArr->for->i->for->i->for->i->setSizes
SizeSequence#removeEntries(int, int):::Removes a contiguous group of entries from this SizeSequence:::sizes->getSizes->end->n->new->intArr->for->i->for->i->setSizes
SortingFocusTraversalPolicy#getFocusTraversalCycle(Container)::: sorting focus traversal policy get focus traversal cycle:::cycle->new->ArrayList<Component>->enumerateAndSortCycle->return
SortingFocusTraversalPolicy#getComponentIndex(List, Component)::: sorting focus traversal policy get component index:::index->try->Collections->binarySearch->catch->if->log->isLoggable->log->fine->return->finally->if->cycle->indexOf->return
SortingFocusTraversalPolicy#enumerateAndSortCycle(Container, List)::: sorting focus traversal policy enumerate and sort cycle:::if->focusCycleRoot->isShowing->enumerateCycle->if->legacySort->else->cycle->sort
SortingFocusTraversalPolicy#legacySort(List, Comparator)::: sorting focus traversal policy legacy sort:::if->l->size->a->l->l->size->new->ComponentArr->toArray->a->clone->mergeSort->i->l->listIterator->foreach->i->next->i->set
SortingFocusTraversalPolicy#enumerateCycle(Container, List)::: sorting focus traversal policy enumerate cycle:::if->container->isVisible->container->isDisplayable->return->cycle->add->components->container->getComponents->foreach->if->cont->if->cont->isFocusCycleRoot->cont->isFocusTraversalPolicyProvider->isManagingFocus->enumerateCycle->continue->cycle->add
SortingFocusTraversalPolicy#getTopmostProvider(Container, Component)::: sorting focus traversal policy get topmost provider:::aCont->aComponent->getParent->ftp->while->if->aCont->isFocusTraversalPolicyProvider->aCont->getParent->if->return->return
SortingFocusTraversalPolicy#getComponentDownCycle(Component, int)::: sorting focus traversal policy get component down cycle:::retComp->if->cont->if->cont->isFocusCycleRoot->if->getImplicitDownCycleTraversal->cont->getFocusTraversalPolicy->getDefaultComponent->if->log->isLoggable->log->fine->else->return->else->if->cont->isFocusTraversalPolicyProvider->cont->getFocusTraversalPolicy->getDefaultComponent->cont->getFocusTraversalPolicy->getLastComponent->if->log->isLoggable->log->fine->return
SortingFocusTraversalPolicy#getComponentAfter(Container, Component):::Returns the Component that should receive the focus after aComponent:::if->log->isLoggable->log->fine->if->throw->new->IllegalArgumentException->if->aContainer->isFocusTraversalPolicyProvider->aContainer->isFocusCycleRoot->throw->new->IllegalArgumentException->else->if->aContainer->isFocusCycleRoot->aComponent->isFocusCycleRoot->throw->new->IllegalArgumentException->comp->getComponentDownCycle->if->return->provider->getTopmostProvider->if->if->log->isLoggable->log->fine->policy->provider->getFocusTraversalPolicy->afterComp->policy->getComponentAfter->if->if->log->isLoggable->log->fine->return->cycle->getFocusTraversalCycle->if->log->isLoggable->log->fine->index->getComponentIndex->if->if->log->isLoggable->log->fine->return->getFirstComponent->for->cycle->size->if->aContainer->isFocusCycleRoot->getFirstComponent->return->return
SortingFocusTraversalPolicy#getComponentBefore(Container, Component):::Returns the Component that should receive the focus before aComponent:::if->throw->new->IllegalArgumentException->if->aContainer->isFocusTraversalPolicyProvider->aContainer->isFocusCycleRoot->throw->new->IllegalArgumentException->else->if->aContainer->isFocusCycleRoot->aComponent->isFocusCycleRoot->throw->new->IllegalArgumentException->provider->getTopmostProvider->if->if->log->isLoggable->log->fine->policy->provider->getFocusTraversalPolicy->beforeComp->policy->getComponentBefore->if->if->log->isLoggable->log->fine->return->if->accept->return->cycle->getFocusTraversalCycle->if->log->isLoggable->log->fine->index->getComponentIndex->if->if->log->isLoggable->log->fine->return->getLastComponent->comp->tryComp->for->if->aContainer->isFocusCycleRoot->getLastComponent->return->return
SortingFocusTraversalPolicy#getFirstComponent(Container):::Returns the first Component in the traversal cycle:::cycle->if->log->isLoggable->log->fine->if->throw->new->IllegalArgumentException->if->else->getFocusTraversalCycle->if->cycle->size->if->log->isLoggable->log->fine->return->if->log->isLoggable->log->fine->foreach->if->accept->return->else->if->getComponentDownCycle->return->return
SortingFocusTraversalPolicy#getLastComponent(Container):::Returns the last Component in the traversal cycle:::cycle->if->log->isLoggable->log->fine->if->throw->new->IllegalArgumentException->if->else->getFocusTraversalCycle->if->cycle->size->if->log->isLoggable->log->fine->return->if->log->isLoggable->log->fine->for->i->cycle->size->return
SortingFocusTraversalPolicy#getDefaultComponent(Container):::Returns the default Component to focus:::return->getFirstComponent
SortingFocusTraversalPolicy#setImplicitDownCycleTraversal(boolean):::Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle implicitly:::
SortingFocusTraversalPolicy#getImplicitDownCycleTraversal():::Returns whether this SortingFocusTraversalPolicy transfers focus down- cycle implicitly:::return
SortingFocusTraversalPolicy#setComparator(Comparator):::Sets the Comparator which will be used to sort the Components in a focus traversal cycle.:::
SortingFocusTraversalPolicy#getComparator():::Returns the Comparator which will be used to sort the Components in a focus traversal cycle.:::return
SortingFocusTraversalPolicy#accept(Component):::Determines whether a Component is an acceptable choice as the new focus owner:::return->fitnessTestPolicy->accept
SortingFocusTraversalPolicy#mergeSort(T[], T[], int, int, int, Comparator)::: sorting focus traversal policy merge sort:::length->if->for->i->return->destLow->destHigh->mid->mergeSort->mergeSort->if->c->compare->System->arraycopy->return->for->i->p->q
SwingContainerOrderFocusTraversalPolicy#accept(Component)::: swing container order focus traversal policy accept:::return->super->accept
SpinnerDateModel#calendarFieldOK(int)::: spinner date model calendar field k:::switch->return->return
SpinnerDateModel#setStart(Comparable):::Changes the lower limit for Dates in this sequence:::if->start->equals->fireStateChanged
SpinnerDateModel#getStart():::Returns the first Date in the sequence.:::return
SpinnerDateModel#setEnd(Comparable):::Changes the upper limit for Dates in this sequence:::if->end->equals->fireStateChanged
SpinnerDateModel#getEnd():::Returns the last Date in the sequence.:::return
SpinnerDateModel#setCalendarField(int):::Changes the size of the date value change computed by the nextValue and previousValue methods:::if->calendarFieldOK->throw->new->IllegalArgumentException->if->fireStateChanged
SpinnerDateModel#getCalendarField():::Returns the Calendar field that is added to or subtracted from by the nextValue and previousValue methods.:::return
SpinnerDateModel#getNextValue():::Returns the next Date in the sequence, or null if the next date is after end.:::cal->Calendar->getInstance->cal->value->getTime->setTime->cal->add->next->cal->getTime->return->end->compareTo
SpinnerDateModel#getPreviousValue():::Returns the previous Date in the sequence, or null if the previous date is before start.:::cal->Calendar->getInstance->cal->value->getTime->setTime->cal->add->prev->cal->getTime->return->start->compareTo
SpinnerDateModel#getDate():::Returns the current element in this sequence of Dates:::return->value->getTime
SpinnerDateModel#getValue():::Returns the current element in this sequence of Dates.:::return->value->getTime
SpinnerDateModel#setValue(Object):::Sets the current Date for this sequence:::if->throw->new->IllegalArgumentException->if->value->getTime->equals->setTime->fireStateChanged
SpinnerListModel#getList():::Returns the List that defines the sequence for this model.:::return
SpinnerListModel#setList(List):::Changes the list that defines this sequence and resets the index of the models value to zero:::if->list->size->throw->new->IllegalArgumentException->if->list->equals->fireStateChanged
SpinnerListModel#getValue():::Returns the current element of the sequence.:::return->list->get
SpinnerListModel#setValue(Object):::Changes the current element of the sequence and notifies ChangeListeners:::index->list->indexOf->if->throw->new->IllegalArgumentException->else->if->fireStateChanged
SpinnerListModel#getNextValue():::Returns the next legal value of the underlying sequence or null if value is already the last element.:::return->list->size->list->get
SpinnerListModel#getPreviousValue():::Returns the previous element of the underlying sequence or null if value is already the first element.:::return->list->get
SpinnerListModel#findNextMatch(String):::Returns the next object that starts with substring.:::max->list->size->if->return->counter->do->value->list->get->string->value->toString->if->string->startsWith->return->while->return
SpinnerModel#getValue():::The current element of the sequence:::
SpinnerModel#setValue(Object):::Changes current value of the model, typically this value is displayed by the editor part of a  JSpinner:::
SpinnerModel#getNextValue():::Return the object in the sequence that comes after the object returned by getValue():::
SpinnerModel#getPreviousValue():::Return the object in the sequence that comes before the object returned by getValue():::
SpinnerModel#addChangeListener(ChangeListener):::Adds a ChangeListener to the model's listener list:::
SpinnerModel#removeChangeListener(ChangeListener):::Removes a ChangeListener from the model's listener list.:::
SpinnerNumberModel#setMinimum(Comparable):::Changes the lower bound for numbers in this sequence:::if->minimum->equals->fireStateChanged
SpinnerNumberModel#getMinimum():::Returns the first number in this sequence.:::return
SpinnerNumberModel#setMaximum(Comparable):::Changes the upper bound for numbers in this sequence:::if->maximum->equals->fireStateChanged
SpinnerNumberModel#getMaximum():::Returns the last number in the sequence.:::return
SpinnerNumberModel#setStepSize(Number):::Changes the size of the value change computed by the getNextValue and getPreviousValue methods:::if->throw->new->IllegalArgumentException->if->stepSize->equals->fireStateChanged
SpinnerNumberModel#getStepSize():::Returns the size of the value change computed by the getNextValue and getPreviousValue methods.:::return
SpinnerNumberModel#incrValue(int)::: spinner number model incr value:::newValue->if->v->value->doubleValue->stepSize->doubleValue->if->Double->valueOf->else->Float->valueOf->else->v->value->longValue->stepSize->longValue->if->Long->valueOf->else->if->Integer->valueOf->else->if->Short->valueOf->else->Byte->valueOf->if->compareTo->return->if->compareTo->return->else->return
SpinnerNumberModel#getNextValue():::Returns the next number in the sequence.:::return->incrValue
SpinnerNumberModel#getPreviousValue():::Returns the previous number in the sequence.:::return->incrValue
SpinnerNumberModel#getNumber():::Returns the value of the current element of the sequence.:::return
SpinnerNumberModel#getValue():::Returns the value of the current element of the sequence.:::return
SpinnerNumberModel#setValue(Object):::Sets the current value for this sequence:::if->throw->new->IllegalArgumentException->if->value->equals->fireStateChanged
Spring#getMinimumValue():::Returns the minimum value of this Spring.:::
Spring#getPreferredValue():::Returns the preferred value of this Spring.:::
Spring#getMaximumValue():::Returns the maximum value of this Spring.:::
Spring#getValue():::Returns the current value of this Spring.:::
Spring#setValue(int):::Sets the current value of this Spring to value.:::
Spring#range(boolean)::: spring range:::return->getPreferredValue->getMinimumValue->getMaximumValue->getPreferredValue
Spring#getStrain()::: spring get strain:::delta->getValue->getPreferredValue->return->getValue->getPreferredValue->range
Spring#setStrain(double)::: spring set strain:::getPreferredValue->range->setValue
Spring#isCyclic(SpringLayout)::: spring is cyclic:::return
Spring.AbstractSpring#getValue()::: abstract spring get value:::return->getPreferredValue
Spring.AbstractSpring#setValue(int)::: abstract spring set value:::if->return->if->clear->else->setNonClearValue
Spring.AbstractSpring#clear()::: abstract spring clear:::
Spring.AbstractSpring#setNonClearValue(int)::: abstract spring set non clear value:::
Spring.StaticSpring#toString()::: static spring to string:::return
Spring.StaticSpring#getMinimumValue()::: static spring get minimum value:::return
Spring.StaticSpring#getPreferredValue()::: static spring get preferred value:::return
Spring.StaticSpring#getMaximumValue()::: static spring get maximum value:::return
Spring.NegativeSpring#getMinimumValue()::: negative spring get minimum value:::return->s->getMaximumValue
Spring.NegativeSpring#getPreferredValue()::: negative spring get preferred value:::return->s->getPreferredValue
Spring.NegativeSpring#getMaximumValue()::: negative spring get maximum value:::return->s->getMinimumValue
Spring.NegativeSpring#getValue()::: negative spring get value:::return->s->getValue
Spring.NegativeSpring#setValue(int)::: negative spring set value:::s->setValue
Spring.NegativeSpring#isCyclic(SpringLayout)::: negative spring is cyclic:::return->s->isCyclic
Spring.ScaleSpring#getMinimumValue()::: scale spring get minimum value:::return->Math->s->getMaximumValue->s->getMinimumValue->round
Spring.ScaleSpring#getPreferredValue()::: scale spring get preferred value:::return->Math->s->getPreferredValue->round
Spring.ScaleSpring#getMaximumValue()::: scale spring get maximum value:::return->Math->s->getMinimumValue->s->getMaximumValue->round
Spring.ScaleSpring#getValue()::: scale spring get value:::return->Math->s->getValue->round
Spring.ScaleSpring#setValue(int)::: scale spring set value:::if->s->setValue->else->s->Math->round->setValue
Spring.ScaleSpring#isCyclic(SpringLayout)::: scale spring is cyclic:::return->s->isCyclic
Spring.WidthSpring#getMinimumValue()::: width spring get minimum value:::return->c->getMinimumSize
Spring.WidthSpring#getPreferredValue()::: width spring get preferred value:::return->c->getPreferredSize
Spring.WidthSpring#getMaximumValue()::: width spring get maximum value:::return->Math->c->getMaximumSize->min
Spring.HeightSpring#getMinimumValue()::: height spring get minimum value:::return->c->getMinimumSize
Spring.HeightSpring#getPreferredValue()::: height spring get preferred value:::return->c->getPreferredSize
Spring.HeightSpring#getMaximumValue()::: height spring get maximum value:::return->Math->c->getMaximumSize->min
Spring.SpringMap#map(int)::: spring map map:::
Spring.SpringMap#inv(int)::: spring map inv:::
Spring.SpringMap#getMinimumValue()::: spring map get minimum value:::return->s->getMinimumValue->map
Spring.SpringMap#getPreferredValue()::: spring map get preferred value:::return->s->getPreferredValue->map
Spring.SpringMap#getMaximumValue()::: spring map get maximum value:::return->Math->s->getMaximumValue->map->min
Spring.SpringMap#getValue()::: spring map get value:::return->s->getValue->map
Spring.SpringMap#setValue(int)::: spring map set value:::if->s->setValue->else->s->inv->setValue
Spring.SpringMap#isCyclic(SpringLayout)::: spring map is cyclic:::return->s->isCyclic
Spring.CompoundSpring#toString()::: compound spring to string:::return
Spring.CompoundSpring#clear()::: compound spring clear:::super->clear->s1->setValue->s2->setValue
Spring.CompoundSpring#op(int, int)::: compound spring op:::
Spring.CompoundSpring#getMinimumValue()::: compound spring get minimum value:::if->s1->getMinimumValue->s2->getMinimumValue->op->return
Spring.CompoundSpring#getPreferredValue()::: compound spring get preferred value:::if->s1->getPreferredValue->s2->getPreferredValue->op->return
Spring.CompoundSpring#getMaximumValue()::: compound spring get maximum value:::if->s1->getMaximumValue->s2->getMaximumValue->op->return
Spring.CompoundSpring#getValue()::: compound spring get value:::if->s1->getValue->s2->getValue->op->return
Spring.CompoundSpring#isCyclic(SpringLayout)::: compound spring is cyclic:::return->l->isCyclic->l->isCyclic
Spring.SumSpring#op(int, int)::: sum spring op:::return
Spring.SumSpring#setNonClearValue(int)::: sum spring set non clear value:::super->setNonClearValue->s1->this->getStrain->setStrain->s2->s1->getValue->setValue
Spring.MaxSpring#op(int, int)::: max spring op:::return->Math->max
Spring.MaxSpring#setNonClearValue(int)::: max spring set non clear value:::super->setNonClearValue->s1->setValue->s2->setValue
Spring#constant(int):::Returns a strut -- a spring whose minimum, preferred, and maximum values each have the value pref.:::return->constant
Spring#constant(int, int, int):::Returns a spring whose minimum, preferred, and maximum values have the values: min, pref, and max respectively.:::return->new->StaticSpring
Spring#minus(Spring):::Returns -s: a spring running in the opposite direction to s.:::return->new->NegativeSpring
Spring#sum(Spring, Spring):::Returns s1+s2: a spring representing s1 and s2 in series:::return->new->SumSpring
Spring#max(Spring, Spring):::Returns max(s1, s2): a spring whose value is always greater than (or equal to)         the values of both s1 and s2.:::return->new->MaxSpring
Spring#difference(Spring, Spring)::: spring difference:::return->minus->sum
Spring#scale(Spring, float):::Returns a spring whose minimum, preferred, maximum and value properties are each multiples of the properties of the argument spring, s:::checkArg->return->new->ScaleSpring
Spring#width(Component):::Returns a spring whose minimum, preferred, maximum and value properties are defined by the widths of the minimumSize, preferredSize, maximumSize and size properties of the supplied component:::checkArg->return->new->WidthSpring
Spring#height(Component):::Returns a spring whose minimum, preferred, maximum and value properties are defined by the heights of the minimumSize, preferredSize, maximumSize and size properties of the supplied component:::checkArg->return->new->HeightSpring
Spring#checkArg(Object):::If s is null, this throws an NullPointerException.:::if->throw->new->NullPointerException
SpringLayout.Constraints#pushConstraint(String, Spring, boolean)::: constraints push constraint:::valid->history->if->history->contains->history->remove->else->if->history->size->history->remove->if->history->add->if->all->foreach->if->history->contains->setConstraint
SpringLayout.Constraints#sum(Spring, Spring)::: constraints sum:::return->Spring->sum
SpringLayout.Constraints#difference(Spring, Spring)::: constraints difference:::return->Spring->difference
SpringLayout.Constraints#scale(Spring, float)::: constraints scale:::return->Spring->scale
SpringLayout.Constraints#getBaselineFromHeight(int)::: constraints get baseline from height:::if->return->c->c->getPreferredSize->getBaseline->return->c->c->getPreferredSize->getBaseline
SpringLayout.Constraints#getHeightFromBaseLine(int)::: constraints get height from base line:::prefSize->c->getPreferredSize->prefHeight->prefBaseline->c->getBaseline->if->return->switch->c->getBaselineResizeBehavior->return->return->return
SpringLayout.Constraints#heightToRelativeBaseline(Spring)::: constraints height to relative baseline:::return->new->Spring.SpringMap
SpringLayout.Constraints#relativeBaselineToHeight(Spring)::: constraints relative baseline to height:::return->new->Spring.SpringMap
SpringLayout.Constraints#defined(List, String, String)::: constraints defined:::return->history->contains->history->contains
SpringLayout.Constraints#setX(Spring):::Sets the x property, which controls the x value of a component's location.:::pushConstraint
SpringLayout.Constraints#getX():::Returns the value of the x property.:::if->if->defined->difference->else->if->defined->scale->difference->else->if->defined->scale->difference->return
SpringLayout.Constraints#setY(Spring):::Sets the y property, which controls the y value of a component's location.:::pushConstraint
SpringLayout.Constraints#getY():::Returns the value of the y property.:::if->if->defined->difference->else->if->defined->scale->difference->else->if->defined->scale->difference->else->if->defined->heightToRelativeBaseline->difference->else->if->defined->heightToRelativeBaseline->difference->scale->return
SpringLayout.Constraints#setWidth(Spring):::Sets the width property, which controls the width of a component.:::pushConstraint
SpringLayout.Constraints#getWidth():::Returns the value of the width property.:::if->if->horizontalHistory->contains->getX->difference->else->if->horizontalHistory->contains->getX->difference->scale->return
SpringLayout.Constraints#setHeight(Spring):::Sets the height property, which controls the height of a component.:::pushConstraint
SpringLayout.Constraints#getHeight():::Returns the value of the height property.:::if->if->verticalHistory->contains->getY->difference->else->if->verticalHistory->contains->getY->difference->scale->else->if->verticalHistory->contains->getY->difference->relativeBaselineToHeight->return
SpringLayout.Constraints#setEast(Spring)::: constraints set east:::pushConstraint
SpringLayout.Constraints#getEast()::: constraints get east:::if->getX->getWidth->sum->return
SpringLayout.Constraints#setSouth(Spring)::: constraints set south:::pushConstraint
SpringLayout.Constraints#getSouth()::: constraints get south:::if->getY->getHeight->sum->return
SpringLayout.Constraints#getHorizontalCenter()::: constraints get horizontal center:::if->getX->getWidth->scale->sum->return
SpringLayout.Constraints#setHorizontalCenter(Spring)::: constraints set horizontal center:::pushConstraint
SpringLayout.Constraints#getVerticalCenter()::: constraints get vertical center:::if->getY->getHeight->scale->sum->return
SpringLayout.Constraints#setVerticalCenter(Spring)::: constraints set vertical center:::pushConstraint
SpringLayout.Constraints#getBaseline()::: constraints get baseline:::if->getY->getHeight->heightToRelativeBaseline->sum->return
SpringLayout.Constraints#setBaseline(Spring)::: constraints set baseline:::pushConstraint
SpringLayout.Constraints#setConstraint(String, Spring):::Sets the spring controlling the specified edge:::edgeName->intern->if->setX->else->if->setY->else->if->setEast->else->if->setSouth->else->if->setHorizontalCenter->else->if->setWidth->else->if->setHeight->else->if->setVerticalCenter->else->if->setBaseline
SpringLayout.Constraints#getConstraint(String):::Returns the value of the specified edge, which may be a derived value, or even null:::edgeName->intern->return->getX->getY->getEast->getSouth->getWidth->getHeight->getHorizontalCenter->getVerticalCenter->getBaseline
SpringLayout.Constraints#reset()::: constraints reset:::allSprings->foreach->if->s->setValue
SpringLayout.SpringProxy#getConstraint()::: spring proxy get constraint:::return->l->getConstraints->getConstraint
SpringLayout.SpringProxy#getMinimumValue()::: spring proxy get minimum value:::return->getConstraint->getMinimumValue
SpringLayout.SpringProxy#getPreferredValue()::: spring proxy get preferred value:::return->getConstraint->getPreferredValue
SpringLayout.SpringProxy#getMaximumValue()::: spring proxy get maximum value:::return->getConstraint->getMaximumValue
SpringLayout.SpringProxy#getValue()::: spring proxy get value:::return->getConstraint->getValue
SpringLayout.SpringProxy#setValue(int)::: spring proxy set value:::getConstraint->setValue
SpringLayout.SpringProxy#isCyclic(SpringLayout)::: spring proxy is cyclic:::return->l->getConstraint->isCyclic
SpringLayout.SpringProxy#toString()::: spring proxy to string:::return->c->getName
SpringLayout#resetCyclicStatuses()::: spring layout reset cyclic statuses:::new->HashSet<Spring>->new->HashSet<Spring>
SpringLayout#setParent(Container)::: spring layout set parent:::resetCyclicStatuses->pc->getConstraints->pc->Spring->constant->setX->pc->Spring->constant->setY->width->pc->getWidth->if->pc->Spring->constant->setWidth->height->pc->getHeight->if->pc->Spring->constant->setHeight
SpringLayout#isCyclic(Spring)::: spring layout is cyclic:::if->return->if->cyclicSprings->contains->return->if->acyclicSprings->contains->return->cyclicSprings->add->result->s->isCyclic->if->acyclicSprings->add->cyclicSprings->remove->else->println->return
SpringLayout#abandonCycles(Spring)::: spring layout abandon cycles:::return->isCyclic
SpringLayout#addLayoutComponent(String, Component):::Has no effect, since this layout manager does not use a per-component string.:::
SpringLayout#removeLayoutComponent(Component):::Removes the constraints associated with the specified component.:::componentConstraints->remove
SpringLayout#addInsets(int, int, Container)::: spring layout add insets:::i->p->getInsets->return->new->Dimension
SpringLayout#minimumLayoutSize(Container)::: spring layout minimum layout size:::setParent->pc->getConstraints->return->pc->getWidth->abandonCycles->getMinimumValue->pc->getHeight->abandonCycles->getMinimumValue->addInsets
SpringLayout#preferredLayoutSize(Container)::: spring layout preferred layout size:::setParent->pc->getConstraints->return->pc->getWidth->abandonCycles->getPreferredValue->pc->getHeight->abandonCycles->getPreferredValue->addInsets
SpringLayout#maximumLayoutSize(Container)::: spring layout maximum layout size:::setParent->pc->getConstraints->return->pc->getWidth->abandonCycles->getMaximumValue->pc->getHeight->abandonCycles->getMaximumValue->addInsets
SpringLayout#addLayoutComponent(Component, Object):::If constraints is an instance of SpringLayout.Constraints, associates the constraints with the specified component.:::if->putConstraints
SpringLayout#getLayoutAlignmentX(Container):::Returns 0.5f (centered).:::return
SpringLayout#getLayoutAlignmentY(Container):::Returns 0.5f (centered).:::return
SpringLayout#invalidateLayout(Container)::: spring layout invalidate layout:::
SpringLayout#putConstraint(String, Component, int, String, Component):::Links edge e1 of component c1 to edge e2 of component c2, with a fixed distance between the edges:::Spring->constant->putConstraint
SpringLayout#putConstraint(String, Component, Spring, String, Component):::Links edge e1 of component c1 to edge e2 of component c2:::Spring->getConstraint->sum->putConstraint
SpringLayout#putConstraint(String, Component, Spring)::: spring layout put constraint:::if->getConstraints->setConstraint
SpringLayout#applyDefaults(Component, Constraints)::: spring layout apply defaults:::if->new->Constraints->if->if->size->Spring->constant->Spring->width->applyDefaults->if->size->Spring->constant->Spring->height->applyDefaults->return
SpringLayout#applyDefaults(Constraints, String, Spring, String, Spring, List)::: spring layout apply defaults:::if->history->size->constraints->setConstraint->constraints->setConstraint->else->if->constraints->getConstraint->constraints->setConstraint->else->constraints->setConstraint->Collections->rotate
SpringLayout#putConstraints(Component, Constraints)::: spring layout put constraints:::componentConstraints->applyDefaults->put
SpringLayout#getConstraints(Component):::Returns the constraints for the specified component:::result->componentConstraints->get->if->if->cp->getClientProperty->if->return->applyDefaults->new->Constraints->putConstraints->return
SpringLayout#getConstraint(String, Component):::Returns the spring controlling the distance between the specified edge of the component and the top or left edge of its parent:::edgeName->intern->return->new->SpringProxy
SpringLayout#layoutContainer(Container)::: spring layout layout container:::setParent->n->parent->getComponentCount->getConstraints->reset->for->i->insets->parent->getInsets->pc->getConstraints->pc->getX->abandonCycles->setValue->pc->getY->abandonCycles->setValue->pc->getWidth->abandonCycles->parent->getWidth->setValue->pc->getHeight->abandonCycles->parent->getHeight->setValue->for->i
SwingPaintEventDispatcher#createPaintEvent(Component, int, int, int, int)::: swing paint event dispatcher create paint event:::if->appContext->SunToolkit->targetToAppContext->rm->RepaintManager->currentManager->if->rm->show->rm->nativeAddDirtyRegion->return->new->Rectangle->new->IgnorePaintEvent->else->if->appContext->SunToolkit->targetToAppContext->rm->RepaintManager->currentManager->rm->nativeAddDirtyRegion->return->new->Rectangle->new->IgnorePaintEvent->return->super->createPaintEvent
SwingPaintEventDispatcher#shouldDoNativeBackgroundErase(Component)::: swing paint event dispatcher should do native background erase:::return
SwingPaintEventDispatcher#queueSurfaceDataReplacing(Component, Runnable)::: swing paint event dispatcher queue surface data replacing:::if->appContext->SunToolkit->targetToAppContext->RepaintManager->currentManager->nativeQueueSurfaceDataRunnable->return->return->super->queueSurfaceDataReplacing
SwingUtilities#getSuppressDropTarget():::Returns true if setTransferHandler should change the DropTarget.:::if->Boolean->AccessController->new->GetPropertyAction->doPrivileged->valueOf->return
SwingUtilities#installSwingDropTargetAsNecessary(Component, TransferHandler):::Installs a DropTarget on the component as necessary for a TransferHandler change.:::if->getSuppressDropTarget->dropHandler->c->getDropTarget->if->if->c->setDropTarget->else->if->GraphicsEnvironment->isHeadless->c->new->TransferHandler.SwingDropTarget->setDropTarget
SwingUtilities#isRectangleContainingRectangle(Rectangle, Rectangle):::Return true if @{code a} contains b:::return
SwingUtilities#getLocalBounds(Component):::Return the rectangle (0,0,bounds.width,bounds.height) for the component aComponent:::b->aComponent->getBounds->new->Rectangle->return
SwingUtilities#getWindowAncestor(Component):::Returns the first Window  ancestor of c, or null if c is not contained inside a Window.:::for->p->c->getParent->p->getParent->return
SwingUtilities#convertScreenLocationToParent(Container, int, int):::Converts the location x y to the parents coordinate system, returning the location.:::for->p->p->getParent->throw->new->Error
SwingUtilities#convertPoint(Component, Point, Component):::Convert a aPoint in source coordinate system to destination coordinate system:::p->if->return->if->getWindowAncestor->if->throw->new->Error->new->Point->convertPointToScreen->if->getWindowAncestor->if->throw->new->Error->convertPointFromScreen->return
SwingUtilities#convertPoint(Component, int, int, Component):::Convert the point (x,y) in source coordinate system to destination coordinate system:::point->new->Point->return->convertPoint
SwingUtilities#convertRectangle(Component, Rectangle, Component):::Convert the rectangle aRectangle in source coordinate system to destination coordinate system:::point->new->Point->convertPoint->return->new->Rectangle
SwingUtilities#getAncestorOfClass(Class, Component):::Convenience method for searching above comp in the component hierarchy and returns the first object of class c it finds:::if->return->parent->comp->getParent->while->c->isInstance->parent->getParent->return
SwingUtilities#getAncestorNamed(String, Component):::Convenience method for searching above comp in the component hierarchy and returns the first object of name it finds:::if->return->parent->comp->getParent->while->name->parent->getName->equals->parent->getParent->return
SwingUtilities#getDeepestComponentAt(Component, int, int):::Returns the deepest visible descendent Component of parent that contains the location x, y:::if->parent->contains->return->if->components->getComponents->foreach->if->comp->isVisible->loc->comp->getLocation->if->getDeepestComponentAt->else->comp->getComponentAt->if->comp->isVisible->return->return
SwingUtilities#convertMouseEvent(Component, MouseEvent, Component):::Returns a MouseEvent similar to sourceEvent except that its x and y members have been converted to destination's coordinate system:::p->sourceEvent->getX->sourceEvent->getY->new->Point->convertPoint->newSource->if->else->newEvent->if->sourceWheelEvent->sourceWheelEvent->getID->sourceWheelEvent->getWhen->sourceWheelEvent->getModifiers->sourceWheelEvent->getModifiersEx->sourceWheelEvent->getXOnScreen->sourceWheelEvent->getYOnScreen->sourceWheelEvent->getClickCount->sourceWheelEvent->isPopupTrigger->sourceWheelEvent->getScrollType->sourceWheelEvent->getScrollAmount->sourceWheelEvent->getWheelRotation->sourceWheelEvent->getPreciseWheelRotation->new->MouseWheelEvent->else->if->sourceMenuDragEvent->sourceMenuDragEvent->getID->sourceMenuDragEvent->getWhen->sourceMenuDragEvent->getModifiers->sourceMenuDragEvent->getModifiersEx->sourceMenuDragEvent->getXOnScreen->sourceMenuDragEvent->getYOnScreen->sourceMenuDragEvent->getClickCount->sourceMenuDragEvent->isPopupTrigger->sourceMenuDragEvent->getPath->sourceMenuDragEvent->getMenuSelectionManager->new->MenuDragMouseEvent->else->sourceEvent->getID->sourceEvent->getWhen->sourceEvent->getModifiers->sourceEvent->getModifiersEx->sourceEvent->getXOnScreen->sourceEvent->getYOnScreen->sourceEvent->getClickCount->sourceEvent->isPopupTrigger->sourceEvent->getButton->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->return
SwingUtilities#convertPointToScreen(Point, Component):::Convert a point from a component's coordinate system to screen coordinates.:::b->x->y->do->if->c->getX->c->getY->else->if->try->pp->c->getLocationOnScreen->catch->c->getX->c->getY->finally->else->c->getX->c->getY->if->break->c->getParent->while
SwingUtilities#convertPointFromScreen(Point, Component):::Convert a point from a screen coordinates to a component's coordinate system:::b->x->y->do->if->c->getX->c->getY->else->if->try->pp->c->getLocationOnScreen->catch->c->getX->c->getY->finally->else->c->getX->c->getY->if->break->c->getParent->while
SwingUtilities#windowForComponent(Component):::Returns the first Window  ancestor of c, or null if c is not contained inside a Window:::return->getWindowAncestor
SwingUtilities#isDescendingFrom(Component, Component):::Return true if a component a descends from a component b:::if->return->for->p->a->getParent->p->getParent->return
SwingUtilities#computeIntersection(int, int, int, int, Rectangle):::Convenience to calculate the intersection of two rectangles without allocating a new rectangle:::x1->x2->y1->y2->if->return
SwingUtilities#computeUnion(int, int, int, int, Rectangle):::Convenience method that calculates the union of two rectangles without allocating a new rectangle.:::x1->x2->y1->y2->return
SwingUtilities#computeDifference(Rectangle, Rectangle):::Convenience returning an array of rect representing the regions within rectA that do not overlap with rectB:::if->rectA->intersects->isRectangleContainingRectangle->return->new->RectangleArr->t->new->Rectangle->a->b->c->d->result->rectCount->if->isRectangleContainingRectangle->if->new->Rectangle->if->new->Rectangle->if->new->Rectangle->if->new->Rectangle->else->if->if->if->else->if->t->setBounds->if->else->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->else->if->if->t->setBounds->if->else->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->else->if->if->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->else->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->else->if->if->t->setBounds->if->else->if->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->else->if->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->else->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->else->if->if->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->else->if->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->else->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->t->setBounds->if->new->Rectangle->new->RectangleArr->if->if->if->if->return
SwingUtilities#checkMouseButton(MouseEvent, int, int):::Check whether MouseEvent contains speficied mouse button or mouse button down mask based on MouseEvent ID.:::switch->anEvent->getID->return->anEvent->getButton->return->anEvent->getModifiersEx->return->anEvent->getModifiersEx->anEvent->getButton
SwingUtilities#isLeftMouseButton(MouseEvent):::Returns true if the mouse event specifies the left mouse button.:::return->checkMouseButton
SwingUtilities#isMiddleMouseButton(MouseEvent):::Returns true if the mouse event specifies the middle mouse button.:::return->checkMouseButton
SwingUtilities#isRightMouseButton(MouseEvent):::Returns true if the mouse event specifies the right mouse button.:::return->checkMouseButton
SwingUtilities#computeStringWidth(FontMetrics, String):::Compute the width of the string using a font with the specified "metrics" (sizes).:::return->SwingUtilities2->stringWidth
SwingUtilities#layoutCompoundLabel(JComponent, FontMetrics, String, Icon, int, int, int, int, Rectangle, Rectangle, Rectangle, int):::Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string:::orientationIsLeftToRight->hAlign->hTextPos->if->if->c->getComponentOrientation->isLeftToRight->switch->break->break->switch->break->break->return->layoutCompoundLabelImpl
SwingUtilities#layoutCompoundLabel(FontMetrics, String, Icon, int, int, int, int, Rectangle, Rectangle, Rectangle, int):::Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string:::return->layoutCompoundLabelImpl
SwingUtilities#layoutCompoundLabelImpl(JComponent, FontMetrics, String, Icon, int, int, int, int, Rectangle, Rectangle, Rectangle, int):::Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string:::if->icon->getIconWidth->icon->getIconHeight->else->textIsEmpty->text->equals->lsb->rsb->gap->v->if->else->availTextWidth->if->else->c->getClientProperty->if->Math->v->getPreferredSpan->min->v->getPreferredSpan->else->SwingUtilities2->stringWidth->SwingUtilities2->getLeftSideBearing->if->if->SwingUtilities2->clipString->SwingUtilities2->stringWidth->fm->getHeight->if->if->else->else->if->else->if->else->if->else->if->else->labelR_x->Math->min->labelR_width->Math->max->labelR_y->Math->min->labelR_height->Math->max->dx->dy->if->else->if->else->if->else->if->else->if->if->return
SwingUtilities#paintComponent(Graphics, Component, Container, int, int, int, int):::Paints a component to the specified Graphics:::getCellRendererPane->paintComponent
SwingUtilities#paintComponent(Graphics, Component, Container, Rectangle):::Paints a component to the specified Graphics:::paintComponent
SwingUtilities#getCellRendererPane(Component, Container)::: swing utilities get cell renderer pane:::shell->c->getParent->if->if->shell->getParent->p->add->else->new->CellRendererPane->shell->add->p->add->return
SwingUtilities#updateComponentTreeUI(Component):::A simple minded look and feel change: ask each node in the tree to updateUI() -- that is, to initialize its UI property with the current look and feel.:::updateComponentTreeUI0->c->invalidate->c->validate->c->repaint
SwingUtilities#updateComponentTreeUI0(Component)::: swing utilities update component tree i0:::if->jc->jc->updateUI->jpm->jc->getComponentPopupMenu->if->updateComponentTreeUI->children->if->getMenuComponents->else->if->getComponents->if->foreach->updateComponentTreeUI0
SwingUtilities#invokeLater(Runnable):::Causes doRun.run() to be executed asynchronously on the AWT event dispatching thread:::EventQueue->invokeLater
SwingUtilities#invokeAndWait(Runnable):::Causes doRun.run() to be executed synchronously on the AWT event dispatching thread:::EventQueue->invokeAndWait
SwingUtilities#isEventDispatchThread():::Returns true if the current thread is an AWT event dispatching thread:::return->EventQueue->isDispatchThread
SwingUtilities#getAccessibleIndexInParent(Component):::Get the index of this object in its accessible parent.  Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method.:::return->c->getAccessibleContext->getAccessibleIndexInParent
SwingUtilities#getAccessibleAt(Component, Point):::Returns the Accessible child contained at the local coordinate Point, if one exists:::if->return->c->getAccessibleContext->getAccessibleComponent->getAccessibleAt->else->if->a->if->ac->a->getAccessibleContext->if->acmp->location->nchildren->ac->getAccessibleChildrenCount->for->i->return->return
SwingUtilities#getAccessibleStateSet(Component):::Get the state of this object:::return->c->getAccessibleContext->getAccessibleStateSet
SwingUtilities#getAccessibleChildrenCount(Component):::Returns the number of accessible children in the object:::return->c->getAccessibleContext->getAccessibleChildrenCount
SwingUtilities#getAccessibleChild(Component, int):::Return the nth Accessible child of the object:::return->c->getAccessibleContext->getAccessibleChild
SwingUtilities#findFocusOwner(Component):::Return the child Component of the specified Component that is the focus owner, if any.:::focusOwner->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->for->temp->temp->getParent->return
SwingUtilities#getRootPane(Component):::If c is a JRootPane descendant return its JRootPane ancestor:::if->return->getRootPane->for->c->getParent->return
SwingUtilities#getRoot(Component):::Returns the root component for the current component tree.:::applet->for->p->p->getParent->return
SwingUtilities#getPaintingOrigin(JComponent)::: swing utilities get painting origin:::p->while->p->getParent->jp->if->jp->isPaintingOrigin->return->return
SwingUtilities#processKeyBindings(KeyEvent):::Process the key bindings for the Component associated with event:::if->if->event->isConsumed->return->component->event->getComponent->pressed->event->getID->if->isValidKeyEventForKeyBindings->return->while->if->return->processKeyBindings->if->return->JComponent->processKeyBindingsForAllComponents->component->getParent->return
SwingUtilities#isValidKeyEventForKeyBindings(KeyEvent):::Returns true if the e is a valid KeyEvent to use in processing the key bindings associated with JComponents.:::return
SwingUtilities#notifyAction(Action, KeyStroke, KeyEvent, Object, int):::Invokes actionPerformed on action if action is non-null and accepts the sender object:::if->action->accept->return->commandO->stayNull->action->getValue->if->else->command->if->commandO->toString->else->if->event->getKeyChar->String->event->getKeyChar->valueOf->else->action->event->getWhen->new->ActionEvent->actionPerformed->return
SwingUtilities#replaceUIInputMap(JComponent, int, InputMap):::Convenience method to change the UI InputMap for component to uiInputMap:::map->component->getInputMap->while->parent->map->getParent->if->map->setParent->return
SwingUtilities#replaceUIActionMap(JComponent, ActionMap):::Convenience method to change the UI ActionMap for component to uiActionMap:::map->component->getActionMap->while->parent->map->getParent->if->map->setParent->return
SwingUtilities#getUIInputMap(JComponent, int):::Returns the InputMap provided by the UI for condition condition in component component:::map->component->getInputMap->while->parent->map->getParent->if->return->return
SwingUtilities#getUIActionMap(JComponent):::Returns the ActionMap provided by the UI in component component:::map->component->getActionMap->while->parent->map->getParent->if->return->return
SwingUtilities.SharedOwnerFrame#addNotify()::: shared owner frame add notify:::super->addNotify->installListeners
SwingUtilities.SharedOwnerFrame#installListeners():::Install window listeners on owned windows to watch for displayability changes:::windows->getOwnedWindows->foreach->if->window->removeWindowListener->window->addWindowListener
SwingUtilities.SharedOwnerFrame#windowClosed(WindowEvent):::Watches for displayability changes and disposes shared instance if there are no displayable children left.:::synchronized->getTreeLock->windows->getOwnedWindows->foreach->if->if->window->isDisplayable->return->window->removeWindowListener->dispose
SwingUtilities.SharedOwnerFrame#windowOpened(WindowEvent)::: shared owner frame window opened:::
SwingUtilities.SharedOwnerFrame#windowClosing(WindowEvent)::: shared owner frame window closing:::
SwingUtilities.SharedOwnerFrame#windowIconified(WindowEvent)::: shared owner frame window iconified:::
SwingUtilities.SharedOwnerFrame#windowDeiconified(WindowEvent)::: shared owner frame window deiconified:::
SwingUtilities.SharedOwnerFrame#windowActivated(WindowEvent)::: shared owner frame window activated:::
SwingUtilities.SharedOwnerFrame#windowDeactivated(WindowEvent)::: shared owner frame window deactivated:::
SwingUtilities.SharedOwnerFrame#show()::: shared owner frame show:::
SwingUtilities.SharedOwnerFrame#dispose()::: shared owner frame dispose:::try->getToolkit->getSystemEventQueue->super->dispose->catch->finally
SwingUtilities#getSharedOwnerFrame():::Returns a toolkit-private, shared, invisible Frame to be the owner for JDialogs and JWindows created with null owners.:::sharedOwnerFrame->SwingUtilities->appContextGet->if->new->SharedOwnerFrame->SwingUtilities->appContextPut->return
SwingUtilities#getSharedOwnerFrameShutdownListener():::Returns a SharedOwnerFrame's shutdown listener to dispose the SharedOwnerFrame if it has no more displayable children.:::sharedOwnerFrame->getSharedOwnerFrame->return
SwingUtilities#appContextGet(Object)::: swing utilities app context get:::return->AppContext->getAppContext->get
SwingUtilities#appContextPut(Object, Object)::: swing utilities app context put:::AppContext->getAppContext->put
SwingUtilities#appContextRemove(Object)::: swing utilities app context remove:::AppContext->getAppContext->remove
SwingUtilities#loadSystemClass(String)::: swing utilities load system class:::ReflectUtil->checkPackageAccess->return->Class->Thread->currentThread->getContextClassLoader->forName
SwingUtilities#isLeftToRight(Component)::: swing utilities is left to right:::return->c->getComponentOrientation->isLeftToRight
SwingUtilities#doesIconReferenceImage(Icon, Image):::Returns true if the Icon icon is an instance of ImageIcon, and the image it contains is the same as image.:::iconImage->getImage->return
SwingUtilities#findDisplayedMnemonicIndex(String, int):::Returns index of the first occurrence of mnemonic within string text:::if->return->uc->Character->toUpperCase->lc->Character->toLowerCase->uci->text->indexOf->lci->text->indexOf->if->return->else->if->return->else->return
SwingUtilities#calculateInnerArea(JComponent, Rectangle):::Stores the position and size of the inner painting area of the specified component in r and returns r:::if->return->rect->insets->c->getInsets->if->new->Rectangle->c->getWidth->c->getHeight->return
SwingUtilities#updateRendererOrEditorUI(Object)::: swing utilities update renderer or editor i:::if->return->component->if->if->getComponent->if->SwingUtilities->updateComponentTreeUI
SwingUtilities#getUnwrappedParent(Component):::Returns the first ancestor of the component which is not an instance of JLayer.:::parent->component->getParent->while->parent->getParent->return
SwingUtilities#getUnwrappedView(JViewport):::Returns the first JViewport's descendant which is not an instance of JLayer:::view->viewport->getView->while->getView->return
SwingUtilities#getValidateRoot(Container, boolean):::Retrieves the validate root of a given container:::root->for->c->getParent->if->return->for->c->getParent->return
SwingWorker#doInBackground():::Computes a result, or throws an exception if unable to do so:::
SwingWorker#run():::Sets this Future to the result of computation unless it has been cancelled.:::future->run
SwingWorker#publish(V...):::Sends data chunks to the #process method:::synchronized->if->new->AccumulativeRunnable<V>->doProcess->add
SwingWorker#process(List):::Receives data chunks from the publish method asynchronously on the Event Dispatch Thread:::
SwingWorker#done():::Executed on the Event Dispatch Thread after the doInBackground method is finished:::
SwingWorker#setProgress(int):::Sets the progress bound property:::if->throw->new->IllegalArgumentException->if->return->oldProgress->if->getPropertyChangeSupport->hasListeners->return->synchronized->if->new->AccumulativeRunnable<Integer>->doNotifyProgressChange->add
SwingWorker#getProgress():::Returns the progress bound property.:::return
SwingWorker#execute():::Schedules this SwingWorker for execution on a worker thread:::getWorkersExecutorService->execute
SwingWorker#cancel(boolean)::: swing worker cancel:::return->future->cancel
SwingWorker#isCancelled()::: swing worker is cancelled:::return->future->isCancelled
SwingWorker#isDone()::: swing worker is done:::return->future->isDone
SwingWorker#get():::Note: calling {@code get on the Event Dispatch Thread blocks all events, including repaints, from being processed until this SwingWorker is complete:::return->future->get
SwingWorker#get(long, TimeUnit):::Please refer to {@link #get for more details.:::return->future->get
SwingWorker#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::getPropertyChangeSupport->addPropertyChangeListener
SwingWorker#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::getPropertyChangeSupport->removePropertyChangeListener
SwingWorker#firePropertyChange(String, Object, Object):::Reports a bound property update to any registered listeners:::getPropertyChangeSupport->firePropertyChange
SwingWorker#getPropertyChangeSupport():::Returns the PropertyChangeSupport for this SwingWorker:::return
SwingWorker#getState():::Returns the SwingWorker state bound property.:::if->isDone->return->else->return
SwingWorker#setState(StateValue):::Sets this SwingWorker state bound property.:::old->firePropertyChange
SwingWorker#doneEDT():::Invokes done on the EDT.:::doDone->new->Runnable->if->SwingUtilities->isEventDispatchThread->doDone->run->else->doSubmit->add
SwingWorker#getWorkersExecutorService():::returns workersExecutorService:::appContext->AppContext->getAppContext->executorService->appContext->get->if->threadFactory->new->ThreadFactory->new->LinkedBlockingQueue<Runnable>->new->ThreadPoolExecutor->appContext->put->es->appContext->new->PropertyChangeListener->addPropertyChangeListener->return
SwingWorker#getDoSubmit()::: swing worker get do submit:::synchronized->appContext->AppContext->getAppContext->doSubmit->appContext->get->if->new->DoSubmitAccumulativeRunnable->appContext->put->tmp->return
SwingWorker.DoSubmitAccumulativeRunnable#run(List)::: do submit accumulative runnable run:::foreach->runnable->run
SwingWorker.DoSubmitAccumulativeRunnable#submit()::: do submit accumulative runnable submit:::timer->new->Timer->timer->setRepeats->timer->start
SwingWorker.DoSubmitAccumulativeRunnable#actionPerformed(ActionEvent)::: do submit accumulative runnable action performed:::run
SwingWorker.SwingWorkerPropertyChangeSupport#firePropertyChange(PropertyChangeEvent)::: swing worker property change support fire property change:::if->SwingUtilities->isEventDispatchThread->super->firePropertyChange->else->doSubmit->new->Runnable->add
TablePrintable#print(Graphics, PageFormat, int):::Prints the specified page of the table into the given Graphics context, in the specified format.:::imgWidth->pageFormat->getImageableWidth->imgHeight->pageFormat->getImageableHeight->if->throw->new->PrinterException->pageNumber->new->ObjectArr->Integer->valueOf->headerText->if->headerFormat->format->footerText->if->footerFormat->format->hRect->fRect->headerTextSpace->footerTextSpace->availableSpace->if->graphics->setFont->graphics->getFontMetrics->getStringBounds->Math->hRect->getHeight->ceil->if->graphics->setFont->graphics->getFontMetrics->getStringBounds->Math->fRect->getHeight->ceil->if->throw->new->PrinterException->sf->if->while->if->table->getRowCount->return->scaledWidth->scaledHeight->findNextClip->if->table->getBounds->intersects->return->g2d->graphics->create->g2d->pageFormat->getImageableX->pageFormat->getImageableY->translate->oldTrans->if->g2d->getTransform->g2d->translate->printText->g2d->setTransform->if->printText->g2d->translate->g2d->clip->if->g2d->scale->else->diff->g2d->translate->g2d->getTransform->oldClip->g2d->getClip->if->g2d->translate->g2d->clip->header->print->g2d->setTransform->g2d->setClip->g2d->translate->g2d->translate->g2d->clip->if->table->putClientProperty->table->print->g2d->setTransform->g2d->setClip->g2d->setColor->visibleBounds->clip->table->getBounds->intersection->upperLeft->visibleBounds->getLocation->lowerRight->new->Point->rMin->table->rowAtPoint->rMax->table->rowAtPoint->if->if->table->getRowCount->rowHeight->for->visrow->if->g2d->drawRect->else->g2d->drawRect->if->table->putClientProperty->g2d->dispose->return
TablePrintable#printText(Graphics2D, String, Rectangle2D, Font, int):::A helper method that encapsulates common code for rendering the header and footer text.:::tx->if->rect->getWidth->rect->getWidth->else->if->table->getComponentOrientation->isLeftToRight->else->Math->rect->getWidth->ceil->ty->Math->Math->rect->getY->abs->ceil->g2d->setColor->g2d->setFont->g2d->drawString
TablePrintable#findNextClip(int, int):::Calculate the area of the table to be printed for the next page:::ltr->table->getComponentOrientation->isLeftToRight->if->if->else->rowCount->table->getRowCount->rowHeight->table->getRowHeight->do->if->break->table->getRowHeight->while->if->return->if->colCount->table->getColumnCount->colWidth->colModel->getColumn->getWidth->do->if->if->break->colModel->getColumn->getWidth->while
Timer#getAccessControlContext():::Returns the acc this timer was constructed with.:::if->throw->new->SecurityException->return
Timer.DoPostEvent#run()::: do post event run:::if->println->if->notify->get->getActionCommand->System->currentTimeMillis->new->ActionEvent->fireActionPerformed->if->cancelEvent
Timer.DoPostEvent#getTimer()::: do post event get timer:::return
Timer#addActionListener(ActionListener):::Adds an action listener to the Timer.:::listenerList->add
Timer#removeActionListener(ActionListener):::Removes the specified action listener from the Timer.:::listenerList->remove
Timer#getActionListeners():::Returns an array of all the action listeners registered on this timer.:::return->listenerList->getListeners
Timer#fireActionPerformed(ActionEvent):::Notifies all listeners that have registered interest for notification on this event type.:::listeners->listenerList->getListenerList->for->i
Timer#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this Timer:::return->listenerList->getListeners
Timer#timerQueue():::Returns the timer queue.:::return->TimerQueue->sharedInstance
Timer#setLogTimers(boolean):::Enables or disables the timer log:::
Timer#getLogTimers():::Returns true if logging is enabled.:::return
Timer#setDelay(int):::Sets the Timer's between-event delay, the number of milliseconds between successive action events:::checkDelay
Timer#checkDelay(int, String)::: timer check delay:::if->throw->new->IllegalArgumentException
Timer#getDelay():::Returns the delay, in milliseconds, between firings of action events.:::return
Timer#setInitialDelay(int):::Sets the Timer's initial delay, the time in milliseconds to wait after the timer is started before firing the first event:::checkDelay
Timer#getInitialDelay():::Returns the Timer's initial delay.:::return
Timer#setRepeats(boolean):::If flag is false, instructs the Timer to send only one action event to its listeners.:::
Timer#isRepeats():::Returns true (the default) if the Timer will send an action event to its listeners multiple times.:::return
Timer#setCoalesce(boolean):::Sets whether the Timer coalesces multiple pending ActionEvent firings:::old->if->cancelEvent
Timer#isCoalesce():::Returns true if the Timer coalesces multiple pending action events.:::return
Timer#setActionCommand(String):::Sets the string that will be delivered as the action command in ActionEvents fired by this timer:::
Timer#getActionCommand():::Returns the string that will be delivered as the action command in ActionEvents fired by this timer:::return
Timer#start():::Starts the Timer, causing it to start sending action events to its listeners.:::timerQueue->getInitialDelay->addTimer
Timer#isRunning():::Returns true if the Timer is running.:::return->timerQueue->containsTimer
Timer#stop():::Stops the Timer, causing it to stop sending action events to its listeners.:::getLock->lock->try->cancelEvent->timerQueue->removeTimer->catch->finally->getLock->unlock
Timer#restart():::Restarts the Timer, canceling any pending firings and causing it to fire with its initial delay.:::getLock->lock->try->stop->start->catch->finally->getLock->unlock
Timer#cancelEvent():::Resets the internal state to indicate this Timer shouldn't notify any of its listeners:::notify->set
Timer#post()::: timer post:::if->notify->compareAndSet->AccessController->new->PrivilegedAction<Void>->getAccessControlContext->doPrivileged
Timer#getLock()::: timer get lock:::return
Timer#readObject(ObjectInputStream)::: timer read object:::AccessController->getContext->f->in->readFields->newListenerList->f->get->if->throw->new->InvalidObjectException->newInitialDelay->f->get->checkDelay->newDelay->f->get->checkDelay->f->get->f->get->f->get
Timer#readResolve()::: timer read resolve:::timer->getDelay->new->Timer->return
TimerQueue#sharedInstance()::: timer queue shared instance:::synchronized->sharedInst->SwingUtilities->appContextGet->if->new->TimerQueue->SwingUtilities->appContextPut->return
TimerQueue#startIfNeeded()::: timer queue start if needed:::if->runningLock->lock->if->return->try->threadGroup->AppContext->getAppContext->getThreadGroup->AccessController->name->timerThread->new->Thread->timerThread->setDaemon->timerThread->setPriority->timerThread->start->return->doPrivileged->catch->finally->runningLock->unlock
TimerQueue#addTimer(Timer, long)::: timer queue add timer:::timer->getLock->lock->try->if->containsTimer->toNanos->now->new->DelayedTimer->addTimer->catch->finally->timer->getLock->unlock
TimerQueue#addTimer(DelayedTimer)::: timer queue add timer:::timer->delayedTimer->getTimer->timer->getLock->lock->try->queue->add->catch->finally->timer->getLock->unlock
TimerQueue#removeTimer(Timer)::: timer queue remove timer:::timer->getLock->lock->try->if->queue->remove->catch->finally->timer->getLock->unlock
TimerQueue#containsTimer(Timer)::: timer queue contains timer:::timer->getLock->lock->try->return->catch->finally->timer->getLock->unlock
TimerQueue#run()::: timer queue run:::runningLock->lock->try->while->try->runningTimer->queue->take->timer->runningTimer->getTimer->timer->getLock->lock->try->delayedTimer->if->timer->post->if->timer->isRepeats->delayedTimer->now->timer->getDelay->toNanos->setTime->addTimer->timer->getLock->newCondition->awaitNanos->catch->finally->timer->getLock->unlock->catch->if->AppContext->getAppContext->isDisposed->break->finally->catch->foreach->delayedTimer->getTimer->cancelEvent->throw->finally->runningLock->unlock
TimerQueue#toString()::: timer queue to string:::buf->new->StringBuilder->buf->append->isFirst->foreach->if->buf->append->buf->delayedTimer->getTimer->toString->append->buf->append->return->buf->toString
TimerQueue#now():::Returns nanosecond time offset by origin:::return->System->nanoTime
TimerQueue.DelayedTimer#getDelay(TimeUnit)::: delayed timer get delay:::return->unit->now->convert
TimerQueue.DelayedTimer#setTime(long)::: delayed timer set time:::
TimerQueue.DelayedTimer#getTimer()::: delayed timer get timer:::return
TimerQueue.DelayedTimer#compareTo(Delayed)::: delayed timer compare to:::if->return->if->x->diff->if->return->else->if->return->else->if->return->else->return->d->getDelay->other->getDelay->return
ToolTipManager#setEnabled(boolean):::Enables or disables the tooltip.:::if->hideTipWindow
ToolTipManager#isEnabled():::Returns true if this object is enabled.:::return
ToolTipManager#setLightWeightPopupEnabled(boolean):::When displaying the JToolTip, the ToolTipManager chooses to use a lightweight JPanel if it fits:::
ToolTipManager#isLightWeightPopupEnabled():::Returns true if lightweight (all-Java) Tooltips are in use, or false if heavyweight (native peer) Tooltips are being used.:::return
ToolTipManager#setInitialDelay(int):::Specifies the initial delay value.:::enterTimer->setInitialDelay
ToolTipManager#getInitialDelay():::Returns the initial delay value.:::return->enterTimer->getInitialDelay
ToolTipManager#setDismissDelay(int):::Specifies the dismissal delay value.:::insideTimer->setInitialDelay
ToolTipManager#getDismissDelay():::Returns the dismissal delay value.:::return->insideTimer->getInitialDelay
ToolTipManager#setReshowDelay(int):::Used to specify the amount of time before the user has to wait initialDelay milliseconds before a tooltip will be shown:::exitTimer->setInitialDelay
ToolTipManager#getReshowDelay():::Returns the reshow delay property.:::return->exitTimer->getInitialDelay
ToolTipManager#getDrawingGC(Point)::: tool tip manager get drawing c:::env->GraphicsEnvironment->getLocalGraphicsEnvironment->devices->env->getScreenDevices->foreach->config->device->getDefaultConfiguration->rect->config->getBounds->if->rect->contains->return->return
ToolTipManager#showTipWindow()::: tool tip manager show tip window:::if->insideComponent->isShowing->return->mode->UIManager->getString->if->equals->kfm->KeyboardFocusManager->getCurrentKeyboardFocusManager->if->kfm->getFocusedWindow->return->if->size->screenLocation->insideComponent->getLocationOnScreen->location->toFind->if->new->Point->else->mouseEvent->getLocationOnScreen->gc->getDrawingGC->if->mouseEvent->getLocationOnScreen->getDrawingGC->if->insideComponent->getGraphicsConfiguration->sBounds->gc->getBounds->screenInsets->Toolkit->getDefaultToolkit->getScreenInsets->leftToRight->SwingUtilities->isLeftToRight->hideTipWindow->insideComponent->createToolTip->tip->setTipText->tip->getPreferredSize->if->if->else->mouseEvent->getX->mouseEvent->getY->new->Point->if->if->if->new->Rectangle->popupRect->setBounds->if->else->if->Math->max->if->else->if->Math->max->popupFactory->PopupFactory->getSharedInstance->if->y->getPopupFitHeight->x->getPopupFitWidth->if->popupFactory->setPopupType->else->popupFactory->setPopupType->else->popupFactory->setPopupType->popupFactory->getPopup->popupFactory->setPopupType->tipWindow->show->componentWindow->SwingUtilities->windowForComponent->SwingUtilities->windowForComponent->if->window->addMouseListener->else->insideTimer->start
ToolTipManager#hideTipWindow()::: tool tip manager hide tip window:::if->if->window->removeMouseListener->tipWindow->hide->insideTimer->stop
ToolTipManager#sharedInstance():::Returns a shared ToolTipManager instance.:::value->SwingUtilities->appContextGet->if->return->manager->new->ToolTipManager->SwingUtilities->appContextPut->return
ToolTipManager#registerComponent(JComponent):::Registers a component for tooltip management:::component->removeMouseListener->component->addMouseListener->component->removeMouseMotionListener->component->addMouseMotionListener->if->removeMenuKeyListener->addMenuKeyListener->else->component->removeKeyListener->component->addKeyListener
ToolTipManager#unregisterComponent(JComponent):::Removes a component from tooltip control.:::component->removeMouseListener->component->removeMouseMotionListener->if->removeMenuKeyListener->else->component->removeKeyListener
ToolTipManager#mouseEntered(MouseEvent)::: Called when the mouse enters the region of a component:::initiateToolTip
ToolTipManager#initiateToolTip(MouseEvent)::: tool tip manager initiate tool tip:::if->event->getSource->return->component->event->getSource->component->removeMouseMotionListener->exitTimer->stop->location->event->getPoint->if->component->getWidth->component->getHeight->return->if->enterTimer->stop->component->removeMouseMotionListener->component->addMouseMotionListener->sameComponent->if->if->newToolTipText->component->getToolTipText->newPreferredLocation->component->getToolTipLocation->sameLoc->preferredLocation->equals->if->Objects->equals->showTipWindow->else->enterTimer->start
ToolTipManager#mouseExited(MouseEvent)::: Called when the mouse exits the region of a component:::shouldHide->if->if->event->getSource->insideComponentWindow->insideComponent->getTopLevelAncestor->if->location->event->getPoint->SwingUtilities->convertPointToScreen->insideComponentWindow->getX->insideComponentWindow->getY->SwingUtilities->convertPoint->if->insideComponent->getWidth->insideComponent->getHeight->else->else->if->event->getSource->win->SwingUtilities->getWindowAncestor->if->location->SwingUtilities->event->getPoint->convertPoint->bounds->insideComponent->getTopLevelAncestor->getBounds->loc->new->Point->SwingUtilities->convertPointToScreen->tip->getWidth->tip->getHeight->if->else->if->enterTimer->stop->if->insideComponent->removeMouseMotionListener->hideTipWindow->exitTimer->restart
ToolTipManager#mousePressed(MouseEvent)::: Called when the mouse is pressed:::hideTipWindow->enterTimer->stop
ToolTipManager#mouseDragged(MouseEvent)::: Called when the mouse is pressed and dragged:::
ToolTipManager#mouseMoved(MouseEvent)::: Called when the mouse is moved:::if->checkForTipChange->else->if->component->event->getSource->component->getToolTipText->if->component->getToolTipLocation->exitTimer->stop->showTipWindow->else->event->getSource->enterTimer->restart
ToolTipManager#checkForTipChange(MouseEvent):::Checks to see if the tooltip needs to be changed in response to the MouseMoved event event.:::component->event->getSource->newText->component->getToolTipText->newPreferredLocation->component->getToolTipLocation->if->if->newText->equals->newPreferredLocation->equals->if->insideTimer->restart->else->enterTimer->restart->else->if->hideTipWindow->showTipWindow->exitTimer->stop->else->enterTimer->restart->else->hideTipWindow->enterTimer->stop->exitTimer->restart
ToolTipManager.insideTimerAction#actionPerformed(ActionEvent):::inside timer action action performed:::if->insideComponent->isShowing->if->insideComponent->getToolTipText->insideComponent->getToolTipLocation->if->showTipWindow->else->hideTipWindow
ToolTipManager.outsideTimerAction#actionPerformed(ActionEvent):::outside timer action action performed:::
ToolTipManager.stillInsideTimerAction#actionPerformed(ActionEvent):::still inside timer action action performed:::hideTipWindow->enterTimer->stop
ToolTipManager.MoveBeforeEnterListener#mouseMoved(MouseEvent)::: move before enter listener mouse moved:::initiateToolTip
ToolTipManager#frameForComponent(Component)::: tool tip manager frame for component:::while->component->getParent->return
ToolTipManager#createFocusChangeListener()::: tool tip manager create focus change listener:::return->new->FocusAdapter
ToolTipManager#getPopupFitWidth(Rectangle, Component)::: tool tip manager get popup fit width:::if->parent->for->invoker->getParent->parent->getParent->return
ToolTipManager#getPopupFitHeight(Rectangle, Component)::: tool tip manager get popup fit height:::if->parent->for->invoker->getParent->parent->getParent->return
ToolTipManager#getHeightAdjust(Rectangle, Rectangle)::: tool tip manager get height adjust:::if->return->else->return
ToolTipManager#getWidthAdjust(Rectangle, Rectangle)::: tool tip manager get width adjust:::if->return->else->return
ToolTipManager#show(JComponent)::: tool tip manager show:::if->hideTipWindow->else->hideTipWindow->enterTimer->stop->exitTimer->stop->insideTimer->stop->if->insideComponent->getToolTipText->insideComponent->getHeight->new->Point->showTipWindow->if->createFocusChangeListener->insideComponent->addFocusListener
ToolTipManager#hide(JComponent)::: tool tip manager hide:::hideTipWindow->source->removeFocusListener
ToolTipManager.AccessibilityKeyListener#keyPressed(KeyEvent)::: accessibility key listener key pressed:::if->e->isConsumed->source->e->getComponent->keyStrokeForEvent->KeyStroke->getKeyStrokeForEvent->if->hideTip->equals->if->hide->e->consume->else->if->postTip->equals->ToolTipManager.this->show->e->consume
ToolTipManager.AccessibilityKeyListener#menuKeyTyped(MenuKeyEvent)::: accessibility key listener menu key typed:::
ToolTipManager.AccessibilityKeyListener#menuKeyPressed(MenuKeyEvent)::: accessibility key listener menu key pressed:::if->postTip->KeyStroke->getKeyStrokeForEvent->equals->path->e->getPath->element->msm->e->getMenuSelectionManager->selectedPath->msm->getSelectedPath->selectedElement->if->element->equals->source->element->getComponent->ToolTipManager.this->show->e->consume
ToolTipManager.AccessibilityKeyListener#menuKeyReleased(MenuKeyEvent)::: accessibility key listener menu key released:::
TransferHandler.HasGetTransferHandler#getTransferHandler():::Returns the TransferHandler.:::
TransferHandler.DropLocation#getDropPoint():::Returns the drop point, representing the mouse's current location within the component.:::return->new->Point
TransferHandler.DropLocation#toString():::Returns a string representation of this drop location:::return->getClass->getName
TransferHandler.TransferSupport#setDNDVariables(Component, DropTargetEvent):::Allows for a single instance to be reused during DnD.:::if->return->p->getLocation->getLocation->if->SunToolkit->isInstanceOf->SwingAccessor->getJTextComponentAccessor->dropLocationForPoint->else->if->dropLocationForPoint
TransferHandler.TransferSupport#isDrop():::Returns whether or not this TransferSupport represents a drop operation.:::return
TransferHandler.TransferSupport#getComponent():::Returns the target component of this transfer.:::return
TransferHandler.TransferSupport#assureIsDrop():::Checks that this is a drop and throws an IllegalStateException if it isn't.:::if->throw->new->IllegalStateException
TransferHandler.TransferSupport#getDropLocation():::Returns the current (non-null) drop location for the component, when this TransferSupport represents a drop:::assureIsDrop->if->p->getLocation->getLocation->new->DropLocation->return
TransferHandler.TransferSupport#setShowDropLocation(boolean):::Sets whether or not the drop location should be visually indicated for the transfer - which must represent a drop:::assureIsDrop
TransferHandler.TransferSupport#setDropAction(int):::Sets the drop action for the transfer - which must represent a drop - to the given action, instead of the default user drop action:::assureIsDrop->action->getSourceDropActions->if->throw->new->IllegalArgumentException
TransferHandler.TransferSupport#getDropAction():::Returns the action chosen for the drop, when this TransferSupport represents a drop:::return->getUserDropAction
TransferHandler.TransferSupport#getUserDropAction():::Returns the user drop action for the drop, when this TransferSupport represents a drop:::assureIsDrop->return->getDropAction->getDropAction
TransferHandler.TransferSupport#getSourceDropActions():::Returns the drag source's supported drop actions, when this TransferSupport represents a drop:::assureIsDrop->return->getSourceActions->getSourceActions
TransferHandler.TransferSupport#getDataFlavors():::Returns the data flavors for this transfer.:::if->if->return->getCurrentDataFlavors->else->return->getCurrentDataFlavors->return->getTransferDataFlavors
TransferHandler.TransferSupport#isDataFlavorSupported(DataFlavor):::Returns whether or not the given data flavor is supported.:::if->if->return->isDataFlavorSupported->else->return->isDataFlavorSupported->return->isDataFlavorSupported
TransferHandler.TransferSupport#getTransferable():::Returns the Transferable associated with this transfer:::if->if->return->getTransferable->else->return->getTransferable->return
TransferHandler#getCutAction():::Returns an Action that performs cut operations to the clipboard:::return
TransferHandler#getCopyAction():::Returns an Action that performs copy operations to the clipboard:::return
TransferHandler#getPasteAction():::Returns an Action that performs paste operations from the clipboard:::return
TransferHandler#setDragImage(Image):::Sets the drag image parameter:::
TransferHandler#getDragImage():::Returns the drag image:::return
TransferHandler#setDragImageOffset(Point):::Sets an anchor offset for the image to drag:::new->Point
TransferHandler#getDragImageOffset():::Returns an anchor offset for the image to drag.:::if->return->new->Point->return->new->Point
TransferHandler#exportAsDrag(JComponent, InputEvent, int):::Causes the Swing drag support to be initiated:::srcActions->getSourceActions->if->if->GraphicsEnvironment->isHeadless->if->new->DragHandler->new->SwingDragGestureRecognizer->recognizer->gestured->else->exportDone
TransferHandler#exportToClipboard(JComponent, Clipboard, int):::Causes a transfer from the given component to the given clipboard:::if->getSourceActions->t->createTransferable->if->try->clip->setContents->exportDone->return->catch->exportDone->throw->finally->exportDone
TransferHandler#importData(TransferSupport):::Causes a transfer to occur from a clipboard or a drag and drop operation:::return->support->getComponent->support->getComponent->support->getTransferable->importData
TransferHandler#importData(JComponent, Transferable):::Causes a transfer to a component from a clipboard or a DND drop operation:::prop->getPropertyDescriptor->if->writer->prop->getWriteMethod->if->return->params->writer->getParameterTypes->if->return->flavor->t->getTransferDataFlavors->getPropertyDataFlavor->if->try->value->t->getTransferData->args->MethodUtil->invoke->return->catch->println->finally->return
TransferHandler#canImport(TransferSupport):::This method is called repeatedly during a drag and drop operation to allow the developer to configure properties of, and to return the acceptability of transfers; with a return value of true indicating that the transfer represented by the given TransferSupport (which contains all of the details of the transfer) is acceptable at the current time, and a value of false rejecting the transfer:::return->support->getComponent->support->getComponent->support->getDataFlavors->canImport
TransferHandler#canImport(JComponent, DataFlavor[]):::Indicates whether a component will accept an import of the given set of data flavors prior to actually attempting to import it:::prop->getPropertyDescriptor->if->writer->prop->getWriteMethod->if->return->params->writer->getParameterTypes->if->return->flavor->getPropertyDataFlavor->if->return->return
TransferHandler#getSourceActions(JComponent):::Returns the type of transfer actions supported by the source; any bitwise-OR combination of COPY, MOVE and LINK:::prop->getPropertyDescriptor->if->return->return
TransferHandler#getVisualRepresentation(Transferable):::Returns an object that establishes the look of a transfer:::return
TransferHandler#createTransferable(JComponent):::Creates a Transferable to use as the source for a data transfer:::property->getPropertyDescriptor->if->return->new->PropertyTransferable->return
TransferHandler#exportDone(JComponent, Transferable, int):::Invoked after data has been exported:::
TransferHandler#getPropertyDescriptor(JComponent):::Fetches the property descriptor for the property assigned to this transfer handler on the given component (transfer handler may be shared):::if->return->k->comp->getClass->bi->try->Introspector->getBeanInfo->catch->return->finally->props->bi->getPropertyDescriptors->for->i->return
TransferHandler#getPropertyDataFlavor(Class, DataFlavor[]):::Fetches the data flavor from the array of possible flavors that has data of the type represented by property type:::for->i->return
TransferHandler#getDropTargetListener()::: transfer handler get drop target listener:::synchronized->handler->AppContext->getAppContext->get->if->new->DropHandler->AppContext->getAppContext->put->return
TransferHandler.PropertyTransferable#getTransferDataFlavors():::Returns an array of DataFlavor objects indicating the flavors the data can be provided in:::flavors->new->DataFlavorArr->propertyType->property->getPropertyType->mimeType->propertyType->getName->try->new->DataFlavor->catch->new->DataFlavorArr->finally->return
TransferHandler.PropertyTransferable#isDataFlavorSupported(DataFlavor):::Returns whether the specified data flavor is supported for this object.:::propertyType->property->getPropertyType->if->flavor->getPrimaryType->equals->flavor->getSubType->equals->flavor->getRepresentationClass->isAssignableFrom->return->return
TransferHandler.PropertyTransferable#getTransferData(DataFlavor):::Returns an object which represents the data to be transferred:::if->isDataFlavorSupported->throw->new->UnsupportedFlavorException->reader->property->getReadMethod->value->try->MethodUtil->invoke->catch->throw->property->getName->new->IOException->finally->return
TransferHandler.SwingDropTarget#addDropTargetListener(DropTargetListener)::: swing drop target add drop target listener:::if->new->EventListenerList->listenerList->add
TransferHandler.SwingDropTarget#removeDropTargetListener(DropTargetListener)::: swing drop target remove drop target listener:::if->listenerList->remove
TransferHandler.SwingDropTarget#dragEnter(DropTargetDragEvent)::: swing drop target drag enter:::super->dragEnter->if->listeners->listenerList->getListenerList->for->i
TransferHandler.SwingDropTarget#dragOver(DropTargetDragEvent)::: swing drop target drag over:::super->dragOver->if->listeners->listenerList->getListenerList->for->i
TransferHandler.SwingDropTarget#dragExit(DropTargetEvent)::: swing drop target drag exit:::super->dragExit->if->listeners->listenerList->getListenerList->for->i->if->isActive->dtListener->getDropTargetListener->if->cleanup
TransferHandler.SwingDropTarget#drop(DropTargetDropEvent)::: swing drop target drop:::super->drop->if->listeners->listenerList->getListenerList->for->i
TransferHandler.SwingDropTarget#dropActionChanged(DropTargetDragEvent)::: swing drop target drop action changed:::super->dropActionChanged->if->listeners->listenerList->getListenerList->for->i
TransferHandler.DropHandler#updateAutoscrollRegion(JComponent):::Update the geometry of the autoscroll region:::visible->c->getVisibleRect->outer->setBounds->i->new->Insets->if->minSize->if->if->inner->setBounds
TransferHandler.DropHandler#autoscroll(JComponent, Point):::Perform an autoscroll operation:::if->s->if->dy->s->getScrollableUnitIncrement->r->new->Rectangle->c->scrollRectToVisible->else->if->dy->s->getScrollableUnitIncrement->r->new->Rectangle->c->scrollRectToVisible->if->dx->s->getScrollableUnitIncrement->r->new->Rectangle->c->scrollRectToVisible->else->if->dx->s->getScrollableUnitIncrement->r->new->Rectangle->c->scrollRectToVisible
TransferHandler.DropHandler#initPropertiesIfNecessary():::Initializes the internal properties if they haven't been already inited:::if->t->Toolkit->getDefaultToolkit->prop->t->getDesktopProperty->prop->intValue->new->Timer->t->getDesktopProperty->timer->prop->intValue->setInitialDelay->t->getDesktopProperty->if->prop->intValue
TransferHandler.DropHandler#actionPerformed(ActionEvent):::The timer fired, perform autoscroll if the pointer is within the autoscroll region:::updateAutoscrollRegion->if->outer->contains->inner->contains->autoscroll
TransferHandler.DropHandler#setComponentDropLocation(TransferSupport, boolean)::: drop handler set component drop location:::dropLocation->support->getDropLocation->if->SunToolkit->isInstanceOf->SwingAccessor->getJTextComponentAccessor->setDropLocation->else->if->setDropLocation
TransferHandler.DropHandler#handleDrag(DropTargetDragEvent)::: drop handler handle drag:::importer->getTransferHandler->if->e->rejectDrag->setComponentDropLocation->return->support->setDNDVariables->canImport->importer->canImport->if->e->support->getDropAction->acceptDrag->else->e->rejectDrag->showLocation->setComponentDropLocation
TransferHandler.DropHandler#dragEnter(DropTargetDragEvent)::: drop handler drag enter:::e->getDropTargetContext->getComponent->handleDrag->if->e->getLocation->updateAutoscrollRegion->initPropertiesIfNecessary
TransferHandler.DropHandler#dragOver(DropTargetDragEvent)::: drop handler drag over:::handleDrag->if->return->p->e->getLocation->if->Math->abs->Math->abs->if->timer->isRunning->timer->stop->else->if->timer->isRunning->timer->start
TransferHandler.DropHandler#dragExit(DropTargetEvent)::: drop handler drag exit:::cleanup
TransferHandler.DropHandler#drop(DropTargetDropEvent)::: drop handler drop:::importer->getTransferHandler->if->e->rejectDrop->cleanup->return->support->setDNDVariables->canImport->importer->canImport->if->e->support->getDropAction->acceptDrop->showLocation->setComponentDropLocation->success->try->importer->importData->catch->finally->e->dropComplete->cleanup->else->e->rejectDrop->cleanup
TransferHandler.DropHandler#dropActionChanged(DropTargetDragEvent)::: drop handler drop action changed:::if->return->handleDrag
TransferHandler.DropHandler#cleanup(boolean)::: drop handler cleanup:::setComponentDropLocation->if->dndDone->if->timer->stop
TransferHandler.DragHandler#dragGestureRecognized(DragGestureEvent):::a Drag gesture has been recognized:::c->dge->getComponent->th->c->getTransferHandler->t->th->createTransferable->if->c->getAutoscrolls->c->setAutoscrolls->try->im->th->getDragImage->if->dge->startDrag->else->dge->th->getDragImageOffset->startDrag->return->catch->c->setAutoscrolls->finally->th->exportDone
TransferHandler.DragHandler#dragEnter(DragSourceDragEvent):::as the hotspot enters a platform dependent drop site:::
TransferHandler.DragHandler#dragOver(DragSourceDragEvent):::as the hotspot moves over a platform dependent drop site:::
TransferHandler.DragHandler#dragExit(DragSourceEvent):::as the hotspot exits a platform dependent drop site:::
TransferHandler.DragHandler#dragDropEnd(DragSourceDropEvent):::as the operation completes:::dsc->dsde->getDragSourceContext->c->dsc->getComponent->if->dsde->getDropSuccess->c->getTransferHandler->dsc->getTransferable->dsde->getDropAction->exportDone->else->c->getTransferHandler->dsc->getTransferable->exportDone->c->setAutoscrolls
TransferHandler.DragHandler#dropActionChanged(DragSourceDragEvent)::: drag handler drop action changed:::
TransferHandler.SwingDragGestureRecognizer#gestured(JComponent, MouseEvent, int, int)::: swing drag gesture recognizer gestured:::setComponent->setSourceActions->appendEvent->e->getPoint->fireDragGestureRecognized
TransferHandler.SwingDragGestureRecognizer#registerListeners():::register this DragGestureRecognizer's Listeners with the Component:::
TransferHandler.SwingDragGestureRecognizer#unregisterListeners():::unregister this DragGestureRecognizer's Listeners with the Component  subclasses must override this method:::
TransferHandler.TransferAction#accept(Object)::: transfer action accept:::return->getTransferHandler
TransferHandler.TransferAction#actionPerformed(ActionEvent)::: transfer action action performed:::src->e->getSource->action->new->PrivilegedAction<Void>->stack->AccessController->getContext->srcAcc->AWTAccessor->getComponentAccessor->getAccessControlContext->eventAcc->AWTAccessor->getAWTEventAccessor->getAccessControlContext->if->javaSecurityAccess->doIntersectionPrivilege->else->javaSecurityAccess->new->PrivilegedAction<Void>->doIntersectionPrivilege
TransferHandler.TransferAction#actionPerformedImpl(ActionEvent)::: transfer action action performed impl:::src->e->getSource->if->c->th->c->getTransferHandler->clipboard->getClipboard->name->getValue->trans->try->if->if->equals->th->exportToClipboard->else->if->equals->th->exportToClipboard->else->if->equals->clipboard->getContents->catch->UIManager->getLookAndFeel->provideErrorFeedback->return->finally->if->th->new->TransferSupport->importData
TransferHandler.TransferAction#getClipboard(JComponent):::Returns the clipboard to use for cut/copy/paste.:::if->SwingUtilities2->canAccessSystemClipboard->return->c->getToolkit->getSystemClipboard->clipboard->getAppContext->get->if->new->Clipboard->getAppContext->put->return
UIDefaults#get(Object):::Returns the value for key:::value->getFromHashtable->return->getFromResourceBundle
UIDefaults#getFromHashtable(Object):::Looks up the given key in our Hashtable and resolves LazyValues or ActiveValues.:::value->super->get->if->return->synchronized->super->get->if->do->try->this->wait->catch->finally->super->get->while->return->else->if->super->put->else->if->return->if->try->createValue->catch->finally->synchronized->if->super->remove->else->super->put->this->notifyAll->else->createValue->return
UIDefaults#get(Object, Locale):::Returns the value for key associated with the given locale:::value->getFromHashtable->return->getFromResourceBundle
UIDefaults#getFromResourceBundle(Object, Locale):::Looks up given key in our resource bundles.:::if->resourceBundles->isEmpty->return->if->if->return->else->synchronized->return->getResourceCache->get
UIDefaults#getResourceCache(Locale):::Returns a Map of the known resources for the given locale.:::values->resourceCache->get->if->new->TextAndMnemonicHashMap->for->i->resourceBundles->size->resourceCache->put->return
UIDefaults#isDesktopResourceBundle(String)::: defaults is desktop resource bundle:::thisModule->getModule->return->AccessController->new->PrivilegedAction<Boolean>->doPrivileged
UIDefaults#put(Object, Object):::Sets the value of key to value for all locales:::oldValue->super->remove->super->put->if->firePropertyChange->return
UIDefaults#putDefaults(Object[]):::Puts all of the key/value pairs in the database and unconditionally generates one PropertyChangeEvent:::for->i->max->firePropertyChange
UIDefaults#getFont(Object):::If the value of key is a Font return it, otherwise return null.:::value->get->return
UIDefaults#getFont(Object, Locale):::If the value of key for the given Locale is a Font return it, otherwise return null.:::value->get->return
UIDefaults#getColor(Object):::If the value of key is a Color return it, otherwise return null.:::value->get->return
UIDefaults#getColor(Object, Locale):::If the value of key for the given Locale is a Color return it, otherwise return null.:::value->get->return
UIDefaults#getIcon(Object):::If the value of key is an Icon return it, otherwise return null.:::value->get->return
UIDefaults#getIcon(Object, Locale):::If the value of key for the given Locale is an Icon return it, otherwise return null.:::value->get->return
UIDefaults#getBorder(Object):::If the value of key is a Border return it, otherwise return null.:::value->get->return
UIDefaults#getBorder(Object, Locale):::If the value of key for the given Locale is a Border return it, otherwise return null.:::value->get->return
UIDefaults#getString(Object):::If the value of key is a String return it, otherwise return null.:::value->get->return
UIDefaults#getString(Object, Locale):::If the value of key for the given Locale is a String return it, otherwise return null.:::value->get->return
UIDefaults#getInt(Object):::If the value of key is an Integer return its integer value, otherwise return 0.:::value->get->return->intValue
UIDefaults#getInt(Object, Locale):::If the value of key for the given Locale is an Integer return its integer value, otherwise return 0.:::value->get->return->intValue
UIDefaults#getBoolean(Object):::If the value of key is boolean, return the boolean value, otherwise return false.:::value->get->return->booleanValue
UIDefaults#getBoolean(Object, Locale):::If the value of key for the given Locale is boolean, return the boolean value, otherwise return false.:::value->get->return->booleanValue
UIDefaults#getInsets(Object):::If the value of key is an Insets return it, otherwise return null.:::value->get->return
UIDefaults#getInsets(Object, Locale):::If the value of key for the given Locale is an Insets return it, otherwise return null.:::value->get->return
UIDefaults#getDimension(Object):::If the value of key is a Dimension return it, otherwise return null.:::value->get->return
UIDefaults#getDimension(Object, Locale):::If the value of key for the given Locale is a Dimension return it, otherwise return null.:::value->get->return
UIDefaults#getUIClass(String, ClassLoader):::The value of get(uidClassID) must be the String name of a class that implements the corresponding ComponentUI class:::try->className->get->if->ReflectUtil->checkPackageAccess->cls->get->if->if->SwingUtilities->loadSystemClass->else->uiClassLoader->loadClass->if->put->tmp->return->catch->return->finally->return
UIDefaults#getUIClass(String):::Returns the L&amp;F class that renders this component.:::return->getUIClass
UIDefaults#getUIError(String):::If getUI() fails for any reason, it calls this method before returning null:::try->throw->new->Error->catch->e->printStackTrace->finally
UIDefaults#getUI(JComponent):::Creates an ComponentUI implementation for the specified component:::cl->get->uiClassLoader->target->getClass->getClassLoader->uiClass->target->getUIClassID->getUIClass->uiObject->if->getUIError->else->try->m->get->if->uiClass->new->Class<?>Arr->getMethod->put->if->uiClass->getModule->getModule->m->new->ObjectArr->invoke->else->MethodUtil->new->ObjectArr->invoke->catch->getUIError->getUIError->finally->return
UIDefaults#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::if->new->SwingPropertyChangeSupport->changeSupport->addPropertyChangeListener
UIDefaults#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::if->changeSupport->removePropertyChangeListener
UIDefaults#getPropertyChangeListeners():::Returns an array of all the PropertyChangeListeners added to this UIDefaults with addPropertyChangeListener().:::if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
UIDefaults#firePropertyChange(String, Object, Object):::Support for reporting bound property changes:::if->changeSupport->firePropertyChange
UIDefaults#addResourceBundle(String):::Adds a resource bundle to the list of resource bundles that are searched for localized values:::if->return->if->isDesktopResourceBundle->return->addInternalBundle
UIDefaults#addInternalBundle(String):::This methods should be used to register internal resource bundles from the java.desktop module.:::if->return->if->new->Vector<String>->if->resourceBundles->contains->resourceBundles->add->resourceCache->clear
UIDefaults#removeResourceBundle(String):::Removes a resource bundle from the list of resource bundles that are searched for localized defaults.:::if->resourceBundles->remove->resourceCache->clear
UIDefaults#setDefaultLocale(Locale):::Sets the default locale:::
UIDefaults#getDefaultLocale():::Returns the default locale:::return
UIDefaults.LazyValue#createValue(UIDefaults):::Creates the actual value retrieved from the UIDefaults table:::
UIDefaults.ActiveValue#createValue(UIDefaults):::Creates the value retrieved from the UIDefaults table:::
UIDefaults.ProxyLazyValue#createValue(UIDefaults):::Creates the value retrieved from the UIDefaults table:::if->System->getSecurityManager->throw->new->SecurityException->return->AccessController->new->PrivilegedAction<Object>->doPrivileged
UIDefaults.ProxyLazyValue#getClassArray(Object[])::: proxy lazy value get class array:::types->if->new->Class<?>Arr->for->i->return
UIDefaults.ProxyLazyValue#printArgs(Object[])::: proxy lazy value print args:::s->if->for->i->s->concat->else->s->concat->return
UIDefaults.LazyInputMap#createValue(UIDefaults):::Creates an InputMap with the bindings that are passed in.:::if->km->LookAndFeel->makeInputMap->return->return
UIDefaults.TextAndMnemonicHashMap#get(Object)::: text and mnemonic hash map get:::value->super->get->if->checkTitle->stringKey->key->toString->compositeKey->if->stringKey->endsWith->return->if->stringKey->endsWith->composeKey->else->if->stringKey->endsWith->composeKey->else->if->stringKey->endsWith->composeKey->if->super->get->if->composeKey->super->get->return->value->toString->getMnemonicFromProperty->if->stringKey->endsWith->composeKey->else->if->stringKey->endsWith->composeKey->else->if->stringKey->endsWith->composeKey->else->if->stringKey->endsWith->composeKey->if->super->get->return->value->toString->getTextFromProperty->if->stringKey->endsWith->composeKey->super->get->if->composeKey->super->get->return->value->toString->getIndexFromProperty->return
UIDefaults.TextAndMnemonicHashMap#composeKey(String, int, String)::: text and mnemonic hash map compose key:::return->key->key->length->substring
UIDefaults.TextAndMnemonicHashMap#getTextFromProperty(String)::: text and mnemonic hash map get text from property:::return->text->replace
UIDefaults.TextAndMnemonicHashMap#getMnemonicFromProperty(String)::: text and mnemonic hash map get mnemonic from property:::index->text->indexOf->if->text->length->c->text->charAt->return->Integer->Character->toUpperCase->toString->return
UIDefaults.TextAndMnemonicHashMap#getIndexFromProperty(String)::: text and mnemonic hash map get index from property:::index->text->indexOf->return->Integer->toString
UIManager.LAFState#getLookAndFeelDefaults()::: state get look and feel defaults:::return
UIManager.LAFState#setLookAndFeelDefaults(UIDefaults)::: state set look and feel defaults:::
UIManager.LAFState#getSystemDefaults()::: state get system defaults:::return
UIManager.LAFState#setSystemDefaults(UIDefaults)::: state set system defaults:::
UIManager.LAFState#getPropertyChangeSupport(boolean):::Returns the SwingPropertyChangeSupport for the current AppContext:::if->new->SwingPropertyChangeSupport->return
UIManager#getLAFState():::Return the LAFState object, lazily create one if necessary:::rv->SwingUtilities->appContextGet->if->synchronized->SwingUtilities->appContextGet->if->SwingUtilities->new->LAFState->appContextPut->return
UIManager#makeInstalledLAFKey(String, String):::Return a swing.properties file key for the attribute of specified look and feel:::return
UIManager#makeSwingPropertiesFilename():::The location of the swing.properties property file is implementation-specific:::sep->javaHome->System->getProperty->if->return
UIManager.LookAndFeelInfo#getName():::Returns the name of the look and feel in a form suitable for a menu or other presentation:::return
UIManager.LookAndFeelInfo#getClassName():::Returns the name of the class that implements this look and feel.:::return
UIManager.LookAndFeelInfo#toString():::Returns a string that displays and identifies this object's properties.:::return->getClass->getName->getName->getClassName
UIManager#getInstalledLookAndFeels():::Returns an array of LookAndFeelInfos representing the LookAndFeel implementations currently available:::maybeInitialize->ilafs->getLAFState->if->rv->new->LookAndFeelInfoArr->System->arraycopy->return
UIManager#setInstalledLookAndFeels(LookAndFeelInfo[]):::Sets the set of available look and feels:::maybeInitialize->newInfos->new->LookAndFeelInfoArr->System->arraycopy->getLAFState
UIManager#installLookAndFeel(LookAndFeelInfo):::Adds the specified look and feel to the set of available look and feels:::infos->getInstalledLookAndFeels->newInfos->new->LookAndFeelInfoArr->System->arraycopy->setInstalledLookAndFeels
UIManager#installLookAndFeel(String, String):::Adds the specified look and feel to the set of available look and feels:::new->LookAndFeelInfo->installLookAndFeel
UIManager#getLookAndFeel():::Returns the current look and feel or null.:::maybeInitialize->return->getLAFState
UIManager#createLookAndFeel(String):::Creates a supported built-in Java LookAndFeel specified by the given L&F name name.:::Objects->requireNonNull->if->equals->try->foreach->if->info->getName->equals->cls->Class->getModule->info->getClassName->forName->laf->cls->newInstance->if->laf->isSupportedLookAndFeel->break->return->catch->finally->throw->new->UnsupportedLookAndFeelException
UIManager#setLookAndFeel(LookAndFeel):::Sets the current look and feel to newLookAndFeel:::if->newLookAndFeel->isSupportedLookAndFeel->s->newLookAndFeel->toString->throw->new->UnsupportedLookAndFeelException->lafState->getLAFState->oldLookAndFeel->if->oldLookAndFeel->uninitialize->if->setDefaultLookup->newLookAndFeel->initialize->lafState->newLookAndFeel->getDefaults->setLookAndFeelDefaults->else->lafState->setLookAndFeelDefaults->changeSupport->lafState->getPropertyChangeSupport->if->changeSupport->firePropertyChange
UIManager#setLookAndFeel(String):::Loads the LookAndFeel specified by the given class name, using the current thread's context class loader, and passes it to setLookAndFeel(LookAndFeel).:::if->equals->new->javax.swing.plaf.metal.MetalLookAndFeel->setLookAndFeel->else->lnfClass->SwingUtilities->loadSystemClass->lnfClass->newInstance->setLookAndFeel
UIManager#getSystemLookAndFeelClassName():::Returns the name of the LookAndFeel class that implements the native system look and feel if there is one, otherwise the name of the default cross platform LookAndFeel class:::systemLAF->AccessController->new->GetPropertyAction->doPrivileged->if->return->osType->AccessController->OSInfo->getOSTypeAction->doPrivileged->if->return->else->desktop->AccessController->new->GetPropertyAction->doPrivileged->toolkit->Toolkit->getDefaultToolkit->if->equals->isNativeGTKAvailable->return->if->if->toolkit->getClass->getName->equals->return->if->return->return->getCrossPlatformLookAndFeelClassName
UIManager#getCrossPlatformLookAndFeelClassName():::Returns the name of the LookAndFeel class that implements the default cross platform look and feel -- the Java Look and Feel (JLF):::laf->AccessController->new->GetPropertyAction->doPrivileged->if->return->return
UIManager#getDefaults():::Returns the defaults:::maybeInitialize->return->getLAFState
UIManager#getFont(Object):::Returns a font from the defaults:::return->getDefaults->getFont
UIManager#getFont(Object, Locale):::Returns a font from the defaults that is appropriate for the given locale:::return->getDefaults->getFont
UIManager#getColor(Object):::Returns a color from the defaults:::return->getDefaults->getColor
UIManager#getColor(Object, Locale):::Returns a color from the defaults that is appropriate for the given locale:::return->getDefaults->getColor
UIManager#getIcon(Object):::Returns an Icon from the defaults:::return->getDefaults->getIcon
UIManager#getIcon(Object, Locale):::Returns an Icon from the defaults that is appropriate for the given locale:::return->getDefaults->getIcon
UIManager#getBorder(Object):::Returns a border from the defaults:::return->getDefaults->getBorder
UIManager#getBorder(Object, Locale):::Returns a border from the defaults that is appropriate for the given locale:::return->getDefaults->getBorder
UIManager#getString(Object):::Returns a string from the defaults:::return->getDefaults->getString
UIManager#getString(Object, Locale):::Returns a string from the defaults that is appropriate for the given locale:::return->getDefaults->getString
UIManager#getString(Object, Component):::Returns a string from the defaults that is appropriate for the given locale:::l->Locale->getDefault->c->getLocale->return->getString
UIManager#getInt(Object):::Returns an integer from the defaults:::return->getDefaults->getInt
UIManager#getInt(Object, Locale):::Returns an integer from the defaults that is appropriate for the given locale:::return->getDefaults->getInt
UIManager#getBoolean(Object):::Returns a boolean from the defaults which is associated with the key value:::return->getDefaults->getBoolean
UIManager#getBoolean(Object, Locale):::Returns a boolean from the defaults which is associated with the key value and the given Locale:::return->getDefaults->getBoolean
UIManager#getInsets(Object):::Returns an Insets object from the defaults:::return->getDefaults->getInsets
UIManager#getInsets(Object, Locale):::Returns an Insets object from the defaults that is appropriate for the given locale:::return->getDefaults->getInsets
UIManager#getDimension(Object):::Returns a dimension from the defaults:::return->getDefaults->getDimension
UIManager#getDimension(Object, Locale):::Returns a dimension from the defaults that is appropriate for the given locale:::return->getDefaults->getDimension
UIManager#get(Object):::Returns an object from the defaults.:::return->getDefaults->get
UIManager#get(Object, Locale):::Returns an object from the defaults that is appropriate for the given locale.:::return->getDefaults->get
UIManager#put(Object, Object):::Stores an object in the developer defaults:::return->getDefaults->put
UIManager#getUI(JComponent):::Returns the appropriate ComponentUI implementation for target:::maybeInitialize->maybeInitializeFocusPolicy->ui->multiLAF->getLAFState->if->multiLAF->getDefaults->getUI->if->getDefaults->getUI->return
UIManager#getLookAndFeelDefaults():::Returns the UIDefaults from the current look and feel, that were obtained at the time the look and feel was installed:::maybeInitialize->return->getLAFState->getLookAndFeelDefaults
UIManager#getMultiLookAndFeel():::Finds the Multiplexing LookAndFeel.:::multiLookAndFeel->getLAFState->if->defaultName->className->getLAFState->getProperty->try->lnfClass->SwingUtilities->loadSystemClass->lnfClass->newInstance->catch->println->finally->return
UIManager#addAuxiliaryLookAndFeel(LookAndFeel):::Adds a LookAndFeel to the list of auxiliary look and feels:::maybeInitialize->if->laf->isSupportedLookAndFeel->return->v->getLAFState->if->new->Vector<LookAndFeel>->if->v->contains->v->addElement->laf->initialize->getLAFState->if->getLAFState->getMultiLookAndFeel->getLAFState
UIManager#removeAuxiliaryLookAndFeel(LookAndFeel):::Removes a LookAndFeel from the list of auxiliary look and feels:::maybeInitialize->result->v->getLAFState->if->v->size->return->v->removeElement->if->if->v->size->getLAFState->getLAFState->else->getLAFState->laf->uninitialize->return
UIManager#getAuxiliaryLookAndFeels():::Returns the list of auxiliary look and feels (can be null):::maybeInitialize->v->getLAFState->if->v->size->return->else->rv->v->size->new->LookAndFeelArr->for->i->return
UIManager#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::synchronized->getLAFState->getPropertyChangeSupport->addPropertyChangeListener
UIManager#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::synchronized->getLAFState->getPropertyChangeSupport->removePropertyChangeListener
UIManager#getPropertyChangeListeners():::Returns an array of all the PropertyChangeListeners added to this UIManager with addPropertyChangeListener().:::synchronized->return->getLAFState->getPropertyChangeSupport->getPropertyChangeListeners
UIManager#loadSwingProperties()::: manager load swing properties:::if->getClassLoader->return->new->Properties->else->props->new->Properties->new->java.security.PrivilegedAction<Object>->doPrivileged->return
UIManager#checkProperty(Properties, String)::: manager check property:::value->System->getProperty->if->props->put
UIManager#initializeInstalledLAFs(Properties):::If a swing.properties file exist and it has a swing.installedlafs property then initialize the installedLAFs field.:::ilafsString->swingProps->getProperty->if->return->lafs->new->Vector<String>->st->new->StringTokenizer->while->st->hasMoreTokens->lafs->st->nextToken->addElement->ilafs->lafs->size->new->Vector<LookAndFeelInfo>->foreach->name->swingProps->makeInstalledLAFKey->getProperty->cls->swingProps->makeInstalledLAFKey->getProperty->if->ilafs->new->LookAndFeelInfo->addElement->installedLAFs->ilafs->size->new->LookAndFeelInfoArr->for->i->ilafs->size->getLAFState
UIManager#initializeDefaultLAF(Properties):::If the user has specified a default look and feel, use that:::if->getLAFState->return->lafName->lafData->AppContext->getAppContext->remove->if->lafData->remove->if->getCrossPlatformLookAndFeelClassName->swingProps->getProperty->try->setLookAndFeel->catch->throw->new->Error->finally->if->foreach->lafData->keySet->UIManager->lafData->get->put
UIManager#initializeAuxiliaryLAFs(Properties)::: manager initialize auxiliary fs:::auxLookAndFeelNames->swingProps->getProperty->if->return->auxLookAndFeels->new->Vector<LookAndFeel>->p->new->StringTokenizer->factoryName->while->p->hasMoreTokens->className->p->nextToken->try->lnfClass->SwingUtilities->loadSystemClass->newLAF->lnfClass->newInstance->newLAF->initialize->auxLookAndFeels->addElement->catch->println->finally->if->auxLookAndFeels->size->else->getMultiLookAndFeel->getLAFState->if->getLAFState->getLAFState
UIManager#initializeSystemDefaults(Properties)::: manager initialize system defaults:::getLAFState
UIManager#maybeInitialize()::: manager maybe initialize:::synchronized->if->getLAFState->getLAFState->initialize
UIManager#maybeInitializeFocusPolicy(JComponent)::: manager maybe initialize focus policy:::if->synchronized->if->getLAFState->getLAFState->if->FocusManager->isFocusManagerEnabled->KeyboardFocusManager->getCurrentKeyboardFocusManager->new->LayoutFocusTraversalPolicy->setDefaultFocusTraversalPolicy
UIManager#initialize()::: manager initialize:::swingProps->loadSwingProperties->initializeSystemDefaults->initializeDefaultLAF->initializeAuxiliaryLAFs->initializeInstalledLAFs->if->new->SwingPaintEventDispatcher->setPaintEventDispatcher->KeyboardFocusManager->getCurrentKeyboardFocusManager->new->KeyEventPostProcessor->addKeyEventPostProcessor->AWTAccessor->getComponentAccessor->setRequestFocusController
ViewportLayout#addLayoutComponent(String, Component):::Adds the specified component to the layout:::
ViewportLayout#removeLayoutComponent(Component):::Removes the specified component from the layout:::
ViewportLayout#preferredLayoutSize(Container):::Returns the preferred dimensions for this layout given the components in the specified target container.:::view->getView->if->return->new->Dimension->else->if->return->getPreferredScrollableViewportSize->else->return->view->getPreferredSize
ViewportLayout#minimumLayoutSize(Container):::Returns the minimum dimensions needed to layout the components contained in the specified target container.:::return->new->Dimension
ViewportLayout#layoutContainer(Container):::Called by the AWT when the specified container needs to be laid out.:::vp->view->vp->getView->scrollableView->if->return->else->if->insets->vp->getInsets->viewPrefSize->view->getPreferredSize->vpSize->vp->getSize->extentSize->vp->toViewCoordinates->viewSize->new->Dimension->if->if->scrollableView->getScrollableTracksViewportWidth->if->scrollableView->getScrollableTracksViewportHeight->viewPosition->vp->getViewPosition->if->vp->getParent->vp->getParent->getComponentOrientation->isLeftToRight->if->Math->max->else->if->else->Math->Math->min->max->if->Math->max->if->if->if->vp->setViewPosition->vp->setViewSize

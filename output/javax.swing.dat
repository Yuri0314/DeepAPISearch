javax.swing.AbstractAction#shouldReconfigure(PropertyChangeEvent)->boolean:::Whether or not to reconfigure all action properties from the specified event.
javax.swing.AbstractAction#setEnabledFromAction(JComponent, Action)->void:::Sets the enabled state of a component from an Action.
javax.swing.AbstractAction#setToolTipTextFromAction(JComponent, Action)->void:::Sets the tooltip text of a component from an Action.
javax.swing.AbstractAction#hasSelectedKey(Action)->boolean::: abstract action has selected key
javax.swing.AbstractAction#isSelected(Action)->boolean::: abstract action is selected
javax.swing.AbstractAction#getValue(String)->Object:::Gets the Object associated with the specified key.
javax.swing.AbstractAction#putValue(String, Object)->void:::Sets the Value associated with the specified key.
javax.swing.AbstractAction#isEnabled()->boolean:::Returns true if the action is enabled.
javax.swing.AbstractAction#setEnabled(boolean)->void:::Sets whether the Action is enabled
javax.swing.AbstractAction#getKeys()->Object[]:::Returns an array of Objects which are keys for which values have been set for this AbstractAction, or null if no keys have values set.
javax.swing.AbstractAction#firePropertyChange(String, Object, Object)->void:::Supports reporting bound property changes
javax.swing.AbstractAction#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
javax.swing.AbstractAction#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
javax.swing.AbstractAction#getPropertyChangeListeners()->PropertyChangeListener[]:::Returns an array of all the PropertyChangeListeners added to this AbstractAction with addPropertyChangeListener().
javax.swing.AbstractAction#clone()->Object::: abstract action clone
javax.swing.AbstractButton#setHideActionText(boolean)->void:::Sets the hideActionText property, which determines whether the button displays text from the Action
javax.swing.AbstractButton#getHideActionText()->boolean:::Returns the value of the hideActionText property, which determines whether the button displays text from the Action
javax.swing.AbstractButton#getText()->String:::Returns the button's text.
javax.swing.AbstractButton#setText(String)->void:::Sets the button's text.
javax.swing.AbstractButton#isSelected()->boolean:::Returns the state of the button
javax.swing.AbstractButton#setSelected(boolean)->void:::Sets the state of the button
javax.swing.AbstractButton#doClick()->void:::Programmatically perform a "click"
javax.swing.AbstractButton#doClick(int)->void:::Programmatically perform a "click"
javax.swing.AbstractButton#setMargin(Insets)->void:::Sets space for margin between the button's border and the label
javax.swing.AbstractButton#getMargin()->Insets:::Returns the margin between the button's border and the label.
javax.swing.AbstractButton#getIcon()->Icon:::Returns the default icon.
javax.swing.AbstractButton#setIcon(Icon)->void:::Sets the button's default icon
javax.swing.AbstractButton#getPressedIcon()->Icon:::Returns the pressed icon for the button.
javax.swing.AbstractButton#setPressedIcon(Icon)->void:::Sets the pressed icon for the button.
javax.swing.AbstractButton#getSelectedIcon()->Icon:::Returns the selected icon for the button.
javax.swing.AbstractButton#setSelectedIcon(Icon)->void:::Sets the selected icon for the button.
javax.swing.AbstractButton#getRolloverIcon()->Icon:::Returns the rollover icon for the button.
javax.swing.AbstractButton#setRolloverIcon(Icon)->void:::Sets the rollover icon for the button.
javax.swing.AbstractButton#getRolloverSelectedIcon()->Icon:::Returns the rollover selection icon for the button.
javax.swing.AbstractButton#setRolloverSelectedIcon(Icon)->void:::Sets the rollover selected icon for the button.
javax.swing.AbstractButton#getDisabledIcon()->Icon:::Returns the icon used by the button when it's disabled
javax.swing.AbstractButton#setDisabledIcon(Icon)->void:::Sets the disabled icon for the button.
javax.swing.AbstractButton#getDisabledSelectedIcon()->Icon:::Returns the icon used by the button when it's disabled and selected
javax.swing.AbstractButton#setDisabledSelectedIcon(Icon)->void:::Sets the disabled selection icon for the button.
javax.swing.AbstractButton#getVerticalAlignment()->int:::Returns the vertical alignment of the text and icon.
javax.swing.AbstractButton#setVerticalAlignment(int)->void:::Sets the vertical alignment of the icon and text.
javax.swing.AbstractButton#getHorizontalAlignment()->int:::Returns the horizontal alignment of the icon and text
javax.swing.AbstractButton#setHorizontalAlignment(int)->void:::Sets the horizontal alignment of the icon and text
javax.swing.AbstractButton#getVerticalTextPosition()->int:::Returns the vertical position of the text relative to the icon.
javax.swing.AbstractButton#setVerticalTextPosition(int)->void:::Sets the vertical position of the text relative to the icon.
javax.swing.AbstractButton#getHorizontalTextPosition()->int:::Returns the horizontal position of the text relative to the icon.
javax.swing.AbstractButton#setHorizontalTextPosition(int)->void:::Sets the horizontal position of the text relative to the icon.
javax.swing.AbstractButton#getIconTextGap()->int:::Returns the amount of space between the text and the icon displayed in this button.
javax.swing.AbstractButton#setIconTextGap(int)->void:::If both the icon and text properties are set, this property defines the space between them
javax.swing.AbstractButton#checkHorizontalKey(int, String)->int:::Verify that the key argument is a legal value for the horizontalAlignment and horizontalTextPosition properties
javax.swing.AbstractButton#checkVerticalKey(int, String)->int:::Verify that the key argument is a legal value for the vertical properties
javax.swing.AbstractButton#removeNotify()->void::: abstract button remove notify
javax.swing.AbstractButton#setActionCommand(String)->void:::Sets the action command for this button.
javax.swing.AbstractButton#getActionCommand()->String:::Returns the action command for this button.
javax.swing.AbstractButton#setAction(Action)->void:::Sets the Action
javax.swing.AbstractButton#getAction()->Action:::Returns the currently set Action for this ActionEvent source, or null if no Action is set.
javax.swing.AbstractButton#configurePropertiesFromAction(Action)->void:::Sets the properties on this button to match those in the specified Action
javax.swing.AbstractButton#clientPropertyChanged(Object, Object, Object)->void::: abstract button client property changed
javax.swing.AbstractButton#shouldUpdateSelectedStateFromAction()->boolean:::Button subclasses that support mirroring the selected state from the action should override this to return true
javax.swing.AbstractButton#actionPropertyChanged(Action, String)->void:::Updates the button's state in response to property changes in the associated action
javax.swing.AbstractButton#setIconFromAction(Action)->void::: abstract button set icon from action
javax.swing.AbstractButton#smallIconChanged(Action)->void::: abstract button small icon changed
javax.swing.AbstractButton#largeIconChanged(Action)->void::: abstract button large icon changed
javax.swing.AbstractButton#createActionPropertyChangeListener(Action)->PropertyChangeListener:::Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties
javax.swing.AbstractButton#createActionPropertyChangeListener0(Action)->PropertyChangeListener::: abstract button create action property change listener0
javax.swing.AbstractButton#isBorderPainted()->boolean:::Gets the borderPainted property.
javax.swing.AbstractButton#setBorderPainted(boolean)->void:::Sets the borderPainted property
javax.swing.AbstractButton#paintBorder(Graphics)->void:::Paint the button's border if BorderPainted property is true and the button has a border.
javax.swing.AbstractButton#isFocusPainted()->boolean:::Gets the paintFocus property.
javax.swing.AbstractButton#setFocusPainted(boolean)->void:::Sets the paintFocus property, which must be true for the focus state to be painted
javax.swing.AbstractButton#isContentAreaFilled()->boolean:::Gets the contentAreaFilled property.
javax.swing.AbstractButton#setContentAreaFilled(boolean)->void:::Sets the contentAreaFilled property
javax.swing.AbstractButton#isRolloverEnabled()->boolean:::Gets the rolloverEnabled property.
javax.swing.AbstractButton#setRolloverEnabled(boolean)->void:::Sets the rolloverEnabled property, which must be true for rollover effects to occur
javax.swing.AbstractButton#getMnemonic()->int:::Returns the keyboard mnemonic from the current model.
javax.swing.AbstractButton#setMnemonic(int)->void:::Sets the keyboard mnemonic on the current model
javax.swing.AbstractButton#setMnemonic(char)->void:::This method is now obsolete, please use setMnemonic(int) to set the mnemonic for a button
javax.swing.AbstractButton#setDisplayedMnemonicIndex(int)->void:::Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic
javax.swing.AbstractButton#getDisplayedMnemonicIndex()->int:::Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.
javax.swing.AbstractButton#setMultiClickThreshhold(long)->void:::Sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events
javax.swing.AbstractButton#getMultiClickThreshhold()->long:::Gets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.
javax.swing.AbstractButton#getModel()->ButtonModel:::Returns the model that this button represents.
javax.swing.AbstractButton#setModel(ButtonModel)->void:::Sets the model that this button represents.
javax.swing.AbstractButton#getUI()->ButtonUI:::Returns the L&amp;F object that renders this component.
javax.swing.AbstractButton#setUI(ButtonUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.AbstractButton#updateUI()->void:::Resets the UI property to a value from the current look and feel
javax.swing.AbstractButton#addImpl(Component, Object, int)->void:::Adds the specified component to this container at the specified index, refer to java.awt.Container#addImpl(Component, Object, int) for a complete description of this method.
javax.swing.AbstractButton#setLayout(LayoutManager)->void:::Sets the layout manager for this container, refer to java.awt.Container#setLayout(LayoutManager) for a complete description of this method.
javax.swing.AbstractButton#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to the button.
javax.swing.AbstractButton#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the button.
javax.swing.AbstractButton#getChangeListeners()->ChangeListener[]:::Returns an array of all the ChangeListeners added to this AbstractButton with addChangeListener().
javax.swing.AbstractButton#fireStateChanged()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.AbstractButton#addActionListener(ActionListener)->void:::Adds an ActionListener to the button.
javax.swing.AbstractButton#removeActionListener(ActionListener)->void:::Removes an ActionListener from the button
javax.swing.AbstractButton#getActionListeners()->ActionListener[]:::Returns an array of all the ActionListeners added to this AbstractButton with addActionListener().
javax.swing.AbstractButton#createChangeListener()->ChangeListener:::Subclasses that want to handle ChangeEvents differently can override this to return another ChangeListener implementation.
javax.swing.AbstractButton.ButtonChangeListener#stateChanged(ChangeEvent)->void::: button change listener state changed
javax.swing.AbstractButton#fireActionPerformed(ActionEvent)->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.AbstractButton#fireItemStateChanged(ItemEvent)->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.AbstractButton#createActionListener()->ActionListener:::Returns ActionListener that is added to model.
javax.swing.AbstractButton#createItemListener()->ItemListener:::Returns ItemListener that is added to model.
javax.swing.AbstractButton#setEnabled(boolean)->void:::Enables (or disables) the button.
javax.swing.AbstractButton#getLabel()->String:::Returns the label text.
javax.swing.AbstractButton#setLabel(String)->void:::Sets the label text.
javax.swing.AbstractButton#addItemListener(ItemListener)->void:::Adds an ItemListener to the checkbox.
javax.swing.AbstractButton#removeItemListener(ItemListener)->void:::Removes an ItemListener from the button.
javax.swing.AbstractButton#getItemListeners()->ItemListener[]:::Returns an array of all the ItemListeners added to this AbstractButton with addItemListener().
javax.swing.AbstractButton#getSelectedObjects()->Object[]:::Returns an array (length 1) containing the label or null if the button is not selected.
javax.swing.AbstractButton#init(String, Icon)->void:::Initialization of the AbstractButton.
javax.swing.AbstractButton#imageUpdate(Image, int, int, int, int, int)->boolean:::This is overridden to return false if the current Icon's Image is not equal to the passed in Image img.
javax.swing.AbstractButton#setUIProperty(String, Object)->void::: abstract button set property
javax.swing.AbstractButton#paramString()->String:::Returns a string representation of this AbstractButton
javax.swing.AbstractButton.Handler#stateChanged(ChangeEvent)->void::: handler state changed
javax.swing.AbstractButton.Handler#actionPerformed(ActionEvent)->void::: handler action performed
javax.swing.AbstractButton.Handler#itemStateChanged(ItemEvent)->void::: handler item state changed
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleName()->String:::Returns the accessible name of this object.
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleIcon()->AccessibleIcon[]:::Get the AccessibleIcons associated with this object if one or more exist
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleStateSet()->AccessibleStateSet:::Get the state set of this object.
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleRelationSet()->AccessibleRelationSet:::Get the AccessibleRelationSet associated with this object if one exists
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleAction()->AccessibleAction:::Get the AccessibleAction associated with this object
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleActionCount()->int:::Returns the number of Actions available in this object
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleActionDescription(int)->String:::Return a description of the specified action of the object.
javax.swing.AbstractButton.AccessibleAbstractButton#doAccessibleAction(int)->boolean:::Perform the specified Action on the object
javax.swing.AbstractButton.AccessibleAbstractButton#getCurrentAccessibleValue()->Number:::Get the value of this object as a Number.
javax.swing.AbstractButton.AccessibleAbstractButton#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
javax.swing.AbstractButton.AccessibleAbstractButton#getMinimumAccessibleValue()->Number:::Get the minimum value of this object as a Number.
javax.swing.AbstractButton.AccessibleAbstractButton#getMaximumAccessibleValue()->Number:::Get the maximum value of this object as a Number.
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleText()->AccessibleText::: accessible abstract button get accessible text
javax.swing.AbstractButton.AccessibleAbstractButton#getIndexAtPoint(Point)->int:::Given a point in local coordinates, return the zero-based index of the character under that Point
javax.swing.AbstractButton.AccessibleAbstractButton#getCharacterBounds(int)->Rectangle:::Determine the bounding box of the character at the given index into the string
javax.swing.AbstractButton.AccessibleAbstractButton#getCharCount()->int:::Return the number of characters (valid indicies)
javax.swing.AbstractButton.AccessibleAbstractButton#getCaretPosition()->int:::Return the zero-based offset of the caret
javax.swing.AbstractButton.AccessibleAbstractButton#getAtIndex(int, int)->String:::Returns the String at a given index.
javax.swing.AbstractButton.AccessibleAbstractButton#getAfterIndex(int, int)->String:::Returns the String after a given index.
javax.swing.AbstractButton.AccessibleAbstractButton#getBeforeIndex(int, int)->String:::Returns the String before a given index.
javax.swing.AbstractButton.AccessibleAbstractButton#getCharacterAttribute(int)->AttributeSet:::Return the AttributeSet for a given character at a given index
javax.swing.AbstractButton.AccessibleAbstractButton#getSelectionStart()->int:::Returns the start offset within the selected text
javax.swing.AbstractButton.AccessibleAbstractButton#getSelectionEnd()->int:::Returns the end offset within the selected text
javax.swing.AbstractButton.AccessibleAbstractButton#getSelectedText()->String:::Returns the portion of the text that is selected.
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleExtendedComponent()->AccessibleExtendedComponent:::Returns the AccessibleExtendedComponent
javax.swing.AbstractButton.AccessibleAbstractButton#getToolTipText()->String:::Returns the tool tip text
javax.swing.AbstractButton.AccessibleAbstractButton#getTitledBorderText()->String:::Returns the titled border text
javax.swing.AbstractButton.AccessibleAbstractButton#getAccessibleKeyBinding()->AccessibleKeyBinding:::Returns key bindings associated with this object
javax.swing.AbstractButton.AccessibleAbstractButton.ButtonKeyBinding#getAccessibleKeyBindingCount()->int:::Returns the number of key bindings for this object
javax.swing.AbstractButton.AccessibleAbstractButton.ButtonKeyBinding#getAccessibleKeyBinding(int)->java.lang.Object:::Returns a key binding for this object
javax.swing.AbstractCellEditor#isCellEditable(EventObject)->boolean:::Returns true.
javax.swing.AbstractCellEditor#shouldSelectCell(EventObject)->boolean:::Returns true.
javax.swing.AbstractCellEditor#stopCellEditing()->boolean:::Calls fireEditingStopped and returns true.
javax.swing.AbstractCellEditor#cancelCellEditing()->void:::Calls fireEditingCanceled.
javax.swing.AbstractCellEditor#addCellEditorListener(CellEditorListener)->void:::Adds a CellEditorListener to the listener list.
javax.swing.AbstractCellEditor#removeCellEditorListener(CellEditorListener)->void:::Removes a CellEditorListener from the listener list.
javax.swing.AbstractCellEditor#getCellEditorListeners()->CellEditorListener[]:::Returns an array of all the CellEditorListeners added to this AbstractCellEditor with addCellEditorListener().
javax.swing.AbstractCellEditor#fireEditingStopped()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.AbstractCellEditor#fireEditingCanceled()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.AbstractListModel#addListDataListener(ListDataListener)->void:::Adds a listener to the list that's notified each time a change to the data model occurs.
javax.swing.AbstractListModel#removeListDataListener(ListDataListener)->void:::Removes a listener from the list that's notified each time a change to the data model occurs.
javax.swing.AbstractListModel#getListDataListeners()->ListDataListener[]:::Returns an array of all the list data listeners registered on this AbstractListModel.
javax.swing.AbstractListModel#fireContentsChanged(Object, int, int)->void:::AbstractListModel subclasses must call this method after one or more elements of the list change
javax.swing.AbstractListModel#fireIntervalAdded(Object, int, int)->void:::AbstractListModel subclasses must call this method after one or more elements are added to the model
javax.swing.AbstractListModel#fireIntervalRemoved(Object, int, int)->void:::AbstractListModel subclasses must call this method after one or more elements are removed from the model
javax.swing.AbstractListModel#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this model
javax.swing.AbstractSpinnerModel#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to the model's listener list
javax.swing.AbstractSpinnerModel#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the model's listener list.
javax.swing.AbstractSpinnerModel#getChangeListeners()->ChangeListener[]:::Returns an array of all the ChangeListeners added to this AbstractSpinnerModel with addChangeListener().
javax.swing.AbstractSpinnerModel#fireStateChanged()->void:::Run each ChangeListeners stateChanged() method.
javax.swing.AbstractSpinnerModel#getListeners(Class)->T[]:::Return an array of all the listeners of the given type that were added to this model
javax.swing.Action#getValue(String)->Object:::Gets one of this object's properties using the associated key.
javax.swing.Action#putValue(String, Object)->void:::Sets one of this object's properties using the associated key
javax.swing.Action#setEnabled(boolean)->void:::Sets the enabled state of the Action
javax.swing.Action#isEnabled()->boolean:::Returns the enabled state of the Action
javax.swing.Action#accept(Object)->boolean:::Determines whether the action should be performed with the specified sender object
javax.swing.Action#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChange listener
javax.swing.Action#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChange listener.
javax.swing.ActionMap#setParent(ActionMap)->void:::Sets this ActionMap's parent.
javax.swing.ActionMap#getParent()->ActionMap:::Returns this ActionMap's parent.
javax.swing.ActionMap#put(Object, Action)->void:::Adds a binding for key to action
javax.swing.ActionMap#get(Object)->Action:::Returns the binding for key, messaging the parent ActionMap if the binding is not locally defined.
javax.swing.ActionMap#remove(Object)->void:::Removes the binding for key from this ActionMap.
javax.swing.ActionMap#clear()->void:::Removes all the mappings from this ActionMap.
javax.swing.ActionMap#keys()->Object[]:::Returns the Action names that are bound in this ActionMap.
javax.swing.ActionMap#size()->int:::Returns the number of bindings in this ActionMap.
javax.swing.ActionMap#allKeys()->Object[]:::Returns an array of the keys defined in this ActionMap and its parent
javax.swing.ActionPropertyChangeListener#propertyChange(PropertyChangeEvent)->void:::PropertyChangeListener method
javax.swing.ActionPropertyChangeListener#actionPropertyChanged(T, Action, PropertyChangeEvent)->void:::Invoked when a property changes on the Action and the target still exists.
javax.swing.ActionPropertyChangeListener#getTarget()->T::: action property change listener get target
javax.swing.ActionPropertyChangeListener#getAction()->Action::: action property change listener get action
javax.swing.AncestorNotifier#addAncestorListener(AncestorListener)->void::: ancestor notifier add ancestor listener
javax.swing.AncestorNotifier#removeAncestorListener(AncestorListener)->void::: ancestor notifier remove ancestor listener
javax.swing.AncestorNotifier#getAncestorListeners()->AncestorListener[]::: ancestor notifier get ancestor listeners
javax.swing.AncestorNotifier#fireAncestorAdded(JComponent, int, Container, Container)->void:::Notify all listeners that have registered interest for notification on this event type
javax.swing.AncestorNotifier#fireAncestorRemoved(JComponent, int, Container, Container)->void:::Notify all listeners that have registered interest for notification on this event type
javax.swing.AncestorNotifier#fireAncestorMoved(JComponent, int, Container, Container)->void:::Notify all listeners that have registered interest for notification on this event type
javax.swing.AncestorNotifier#removeAllListeners()->void::: ancestor notifier remove all listeners
javax.swing.AncestorNotifier#addListeners(Component, boolean)->void::: ancestor notifier add listeners
javax.swing.AncestorNotifier#removeListeners(Component)->void::: ancestor notifier remove listeners
javax.swing.AncestorNotifier#componentResized(ComponentEvent)->void::: ancestor notifier component resized
javax.swing.AncestorNotifier#componentMoved(ComponentEvent)->void::: ancestor notifier component moved
javax.swing.AncestorNotifier#componentShown(ComponentEvent)->void::: ancestor notifier component shown
javax.swing.AncestorNotifier#componentHidden(ComponentEvent)->void::: ancestor notifier component hidden
javax.swing.AncestorNotifier#propertyChange(PropertyChangeEvent)->void::: ancestor notifier property change
javax.swing.ArrayTable#writeArrayTable(ObjectOutputStream, ArrayTable)->void:::Writes the passed in ArrayTable to the passed in ObjectOutputStream
javax.swing.ArrayTable#put(Object, Object)->void::: array table put
javax.swing.ArrayTable#get(Object)->Object::: array table get
javax.swing.ArrayTable#size()->int::: array table size
javax.swing.ArrayTable#containsKey(Object)->boolean::: array table contains key
javax.swing.ArrayTable#remove(Object)->Object::: array table remove
javax.swing.ArrayTable#clear()->void:::Removes all the mappings.
javax.swing.ArrayTable#clone()->Object::: array table clone
javax.swing.ArrayTable#getKeys(Object[])->Object[]:::Returns the keys of the table, or null if there are currently no bindings.
javax.swing.Autoscroller#stop(JComponent)->void:::Stops autoscroll events from happening on the specified component.
javax.swing.Autoscroller#isRunning(JComponent)->boolean:::Stops autoscroll events from happening on the specified component.
javax.swing.Autoscroller#processMouseDragged(MouseEvent)->void:::Invoked when a mouse dragged event occurs, will start the autoscroller if necessary.
javax.swing.Autoscroller#actionPerformed(ActionEvent)->void:::ActionListener method
javax.swing.BorderFactory#createLineBorder(Color)->Border:::Creates a line border with the specified color.
javax.swing.BorderFactory#createLineBorder(Color, int)->Border:::Creates a line border with the specified color and width
javax.swing.BorderFactory#createLineBorder(Color, int, boolean)->Border:::Creates a line border with the specified color, thickness, and corner shape.
javax.swing.BorderFactory#createRaisedBevelBorder()->Border:::Creates a border with a raised beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
javax.swing.BorderFactory#createLoweredBevelBorder()->Border:::Creates a border with a lowered beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
javax.swing.BorderFactory#createBevelBorder(int)->Border:::Creates a beveled border of the specified type, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
javax.swing.BorderFactory#createBevelBorder(int, Color, Color)->Border:::Creates a beveled border of the specified type, using the specified highlighting and shadowing
javax.swing.BorderFactory#createBevelBorder(int, Color, Color, Color, Color)->Border:::Creates a beveled border of the specified type, using the specified colors for the inner and outer highlight and shadow areas.
javax.swing.BorderFactory#createSharedBevel(int)->Border::: border factory create shared bevel
javax.swing.BorderFactory#createRaisedSoftBevelBorder()->Border:::Creates a beveled border with a raised edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
javax.swing.BorderFactory#createLoweredSoftBevelBorder()->Border:::Creates a beveled border with a lowered edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
javax.swing.BorderFactory#createSoftBevelBorder(int)->Border:::Creates a beveled border of the specified type with softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows
javax.swing.BorderFactory#createSoftBevelBorder(int, Color, Color)->Border:::Creates a beveled border of the specified type with softened corners, using the specified highlighting and shadowing
javax.swing.BorderFactory#createSoftBevelBorder(int, Color, Color, Color, Color)->Border:::Creates a beveled border of the specified type with softened corners, using the specified colors for the inner and outer edges of the highlight and the shadow areas
javax.swing.BorderFactory#createEtchedBorder()->Border:::Creates a border with an "etched" look using the component's current background color for highlighting and shading.
javax.swing.BorderFactory#createEtchedBorder(Color, Color)->Border:::Creates a border with an "etched" look using the specified highlighting and shading colors.
javax.swing.BorderFactory#createEtchedBorder(int)->Border:::Creates a border with an "etched" look using the component's current background color for highlighting and shading.
javax.swing.BorderFactory#createEtchedBorder(int, Color, Color)->Border:::Creates a border with an "etched" look using the specified highlighting and shading colors.
javax.swing.BorderFactory#createTitledBorder(String)->TitledBorder:::Creates a new titled border with the specified title, the default border type (determined by the current look and feel), the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel).
javax.swing.BorderFactory#createTitledBorder(Border)->TitledBorder:::Creates a new titled border with an empty title, the specified border object, the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel).
javax.swing.BorderFactory#createTitledBorder(Border, String)->TitledBorder:::Adds a title to an existing border, with default positioning (determined by the current look and feel), default justification (leading) and the default font and text color (determined by the current look and feel).
javax.swing.BorderFactory#createTitledBorder(Border, String, int, int)->TitledBorder:::Adds a title to an existing border, with the specified positioning and using the default font and text color (determined by the current look and feel).
javax.swing.BorderFactory#createTitledBorder(Border, String, int, int, Font)->TitledBorder:::Adds a title to an existing border, with the specified positioning and font, and using the default text color (determined by the current look and feel).
javax.swing.BorderFactory#createTitledBorder(Border, String, int, int, Font, Color)->TitledBorder:::Adds a title to an existing border, with the specified positioning, font and color.
javax.swing.BorderFactory#createEmptyBorder()->Border:::Creates an empty border that takes up no space
javax.swing.BorderFactory#createEmptyBorder(int, int, int, int)->Border:::Creates an empty border that takes up space but which does no drawing, specifying the width of the top, left, bottom, and right sides.
javax.swing.BorderFactory#createCompoundBorder()->CompoundBorder:::Creates a compound border with a null inside edge and a null outside edge.
javax.swing.BorderFactory#createCompoundBorder(Border, Border)->CompoundBorder:::Creates a compound border specifying the border objects to use for the outside and inside edges.
javax.swing.BorderFactory#createMatteBorder(int, int, int, int, Color)->MatteBorder:::Creates a matte-look border using a solid color
javax.swing.BorderFactory#createMatteBorder(int, int, int, int, Icon)->MatteBorder:::Creates a matte-look border that consists of multiple tiles of a specified icon
javax.swing.BorderFactory#createStrokeBorder(BasicStroke)->Border:::Creates a border of the specified stroke
javax.swing.BorderFactory#createStrokeBorder(BasicStroke, Paint)->Border:::Creates a border of the specified stroke and paint
javax.swing.BorderFactory#createDashedBorder(Paint)->Border:::Creates a dashed border of the specified paint
javax.swing.BorderFactory#createDashedBorder(Paint, float, float)->Border:::Creates a dashed border of the specified paint, relative length, and relative spacing
javax.swing.BorderFactory#createDashedBorder(Paint, float, float, float, boolean)->Border:::Creates a dashed border of the specified paint, thickness, line shape, relative length, and relative spacing
javax.swing.BoundedRangeModel#getMinimum()->int:::Returns the minimum acceptable value.
javax.swing.BoundedRangeModel#setMinimum(int)->void:::Sets the model's minimum to newMinimum
javax.swing.BoundedRangeModel#getMaximum()->int:::Returns the model's maximum
javax.swing.BoundedRangeModel#setMaximum(int)->void:::Sets the model's maximum to newMaximum
javax.swing.BoundedRangeModel#getValue()->int:::Returns the model's current value
javax.swing.BoundedRangeModel#setValue(int)->void:::Sets the model's current value to newValue if newValue satisfies the model's constraints
javax.swing.BoundedRangeModel#setValueIsAdjusting(boolean)->void:::This attribute indicates that any upcoming changes to the value of the model should be considered a single event
javax.swing.BoundedRangeModel#getValueIsAdjusting()->boolean:::Returns true if the current changes to the value property are part of a series of changes.
javax.swing.BoundedRangeModel#getExtent()->int:::Returns the model's extent, the length of the inner range that begins at the model's value.
javax.swing.BoundedRangeModel#setExtent(int)->void:::Sets the model's extent
javax.swing.BoundedRangeModel#setRangeProperties(int, int, int, int, boolean)->void:::This method sets all of the model's data with a single method call
javax.swing.BoundedRangeModel#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to the model's listener list.
javax.swing.BoundedRangeModel#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the model's listener list.
javax.swing.Box#createHorizontalBox()->Box:::Creates a Box that displays its components from left to right
javax.swing.Box#createVerticalBox()->Box:::Creates a Box that displays its components from top to bottom
javax.swing.Box#createRigidArea(Dimension)->Component:::Creates an invisible component that's always the specified size
javax.swing.Box#createHorizontalStrut(int)->Component:::Creates an invisible, fixed-width component
javax.swing.Box#createVerticalStrut(int)->Component:::Creates an invisible, fixed-height component
javax.swing.Box#createGlue()->Component:::Creates an invisible "glue" component that can be useful in a Box whose visible components have a maximum width (for a horizontal box) or height (for a vertical box)
javax.swing.Box#createHorizontalGlue()->Component:::Creates a horizontal glue component.
javax.swing.Box#createVerticalGlue()->Component:::Creates a vertical glue component.
javax.swing.Box#setLayout(LayoutManager)->void:::Throws an AWTError, since a Box can use only a BoxLayout.
javax.swing.Box#paintComponent(Graphics)->void:::Paints this Box
javax.swing.Box.Filler#changeShape(Dimension, Dimension, Dimension)->void:::Change the size requests for this shape
javax.swing.Box.Filler#paintComponent(Graphics)->void:::Paints this Filler
javax.swing.Box.Filler#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Box.Filler
javax.swing.Box.Filler.AccessibleBoxFiller#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.Box#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this Box
javax.swing.Box.AccessibleBox#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.BoxLayout#getTarget()->Container:::Returns the container that uses this layout manager.
javax.swing.BoxLayout#getAxis()->int:::Returns the axis that was used to lay out components
javax.swing.BoxLayout#invalidateLayout(Container)->void:::Indicates that a child has changed its layout related information, and thus any cached calculations should be flushed
javax.swing.BoxLayout#addLayoutComponent(String, Component)->void:::Not used by this class.
javax.swing.BoxLayout#removeLayoutComponent(Component)->void:::Not used by this class.
javax.swing.BoxLayout#addLayoutComponent(Component, Object)->void:::Not used by this class.
javax.swing.BoxLayout#preferredLayoutSize(Container)->Dimension:::Returns the preferred dimensions for this layout, given the components in the specified target container.
javax.swing.BoxLayout#minimumLayoutSize(Container)->Dimension:::Returns the minimum dimensions needed to lay out the components contained in the specified target container.
javax.swing.BoxLayout#maximumLayoutSize(Container)->Dimension:::Returns the maximum dimensions the target container can use to lay out the components it contains.
javax.swing.BoxLayout#getLayoutAlignmentX(Container)->float:::Returns the alignment along the X axis for the container
javax.swing.BoxLayout#getLayoutAlignmentY(Container)->float:::Returns the alignment along the Y axis for the container
javax.swing.BoxLayout#layoutContainer(Container)->void:::Called by the AWT <!-- XXX CHECK! --> when the specified container needs to be laid out.
javax.swing.BoxLayout#checkContainer(Container)->void::: box layout check container
javax.swing.BoxLayout#checkRequests()->void::: box layout check requests
javax.swing.BufferStrategyPaintManager#dispose()->void:::Cleans up any created BufferStrategies.
javax.swing.BufferStrategyPaintManager#show(Container, int, int, int, int)->boolean:::Shows the specified region of the back buffer
javax.swing.BufferStrategyPaintManager#paint(JComponent, JComponent, Graphics, int, int, int, int)->boolean::: buffer strategy paint manager paint
javax.swing.BufferStrategyPaintManager#copyArea(JComponent, Graphics, int, int, int, int, int, int, boolean)->void::: buffer strategy paint manager copy area
javax.swing.BufferStrategyPaintManager#beginPaint()->void::: buffer strategy paint manager begin paint
javax.swing.BufferStrategyPaintManager#endPaint()->void::: buffer strategy paint manager end paint
javax.swing.BufferStrategyPaintManager#doubleBufferingChanged(JRootPane)->void:::Invoked when the double buffering or useTrueDoubleBuffering changes for a JRootPane
javax.swing.ButtonGroup#add(AbstractButton)->void:::Adds the button to the group.
javax.swing.ButtonGroup#remove(AbstractButton)->void:::Removes the button from the group.
javax.swing.ButtonGroup#clearSelection()->void:::Clears the selection such that none of the buttons in the ButtonGroup are selected.
javax.swing.ButtonGroup#getElements()->Enumeration:::Returns all the buttons that are participating in this group.
javax.swing.ButtonGroup#getSelection()->ButtonModel:::Returns the model of the selected button.
javax.swing.ButtonGroup#setSelected(ButtonModel, boolean)->void:::Sets the selected value for the ButtonModel
javax.swing.ButtonGroup#isSelected(ButtonModel)->boolean:::Returns whether a ButtonModel is selected.
javax.swing.ButtonGroup#getButtonCount()->int:::Returns the number of buttons in the group.
javax.swing.ButtonModel#isArmed()->boolean:::Indicates partial commitment towards triggering the button.
javax.swing.ButtonModel#isSelected()->boolean:::Indicates if the button has been selected
javax.swing.ButtonModel#isEnabled()->boolean:::Indicates if the button can be selected or triggered by an input device, such as a mouse pointer.
javax.swing.ButtonModel#isPressed()->boolean:::Indicates if the button is pressed.
javax.swing.ButtonModel#isRollover()->boolean:::Indicates that the mouse is over the button.
javax.swing.ButtonModel#setArmed(boolean)->void:::Marks the button as armed or unarmed.
javax.swing.ButtonModel#setSelected(boolean)->void:::Selects or deselects the button.
javax.swing.ButtonModel#setEnabled(boolean)->void:::Enables or disables the button.
javax.swing.ButtonModel#setPressed(boolean)->void:::Sets the button to pressed or unpressed.
javax.swing.ButtonModel#setRollover(boolean)->void:::Sets or clears the button's rollover state
javax.swing.ButtonModel#setMnemonic(int)->void:::Sets the keyboard mnemonic (shortcut key or accelerator key) for the button.
javax.swing.ButtonModel#getMnemonic()->int:::Gets the keyboard mnemonic for the button.
javax.swing.ButtonModel#setActionCommand(String)->void:::Sets the action command string that gets sent as part of the ActionEvent when the button is triggered.
javax.swing.ButtonModel#getActionCommand()->String:::Returns the action command string for the button.
javax.swing.ButtonModel#setGroup(ButtonGroup)->void:::Identifies the group the button belongs to -- needed for radio buttons, which are mutually exclusive within their group.
javax.swing.ButtonModel#getGroup()->ButtonGroup:::Returns the group that the button belongs to
javax.swing.ButtonModel#addActionListener(ActionListener)->void:::Adds an ActionListener to the model.
javax.swing.ButtonModel#removeActionListener(ActionListener)->void:::Removes an ActionListener from the model.
javax.swing.ButtonModel#addItemListener(ItemListener)->void:::Adds an ItemListener to the model.
javax.swing.ButtonModel#removeItemListener(ItemListener)->void:::Removes an ItemListener from the model.
javax.swing.ButtonModel#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to the model.
javax.swing.ButtonModel#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the model.
javax.swing.CellEditor#getCellEditorValue()->Object:::Returns the value contained in the editor.
javax.swing.CellEditor#isCellEditable(EventObject)->boolean:::Asks the editor if it can start editing using anEvent
javax.swing.CellEditor#shouldSelectCell(EventObject)->boolean:::Returns true if the editing cell should be selected, false otherwise
javax.swing.CellEditor#stopCellEditing()->boolean:::Tells the editor to stop editing and accept any partially edited value as the value of the editor
javax.swing.CellEditor#cancelCellEditing()->void:::Tells the editor to cancel editing and not accept any partially edited value.
javax.swing.CellEditor#addCellEditorListener(CellEditorListener)->void:::Adds a listener to the list that's notified when the editor stops, or cancels editing.
javax.swing.CellEditor#removeCellEditorListener(CellEditorListener)->void:::Removes a listener from the list that's notified
javax.swing.CellRendererPane#invalidate()->void:::Overridden to avoid propagating a invalidate up the tree when the cell renderer child is configured.
javax.swing.CellRendererPane#paint(Graphics)->void:::Shouldn't be called.
javax.swing.CellRendererPane#update(Graphics)->void:::Shouldn't be called.
javax.swing.CellRendererPane#addImpl(Component, Object, int)->void:::If the specified component is already a child of this then we don't bother doing anything - stacking order doesn't matter for cell renderer components (CellRendererPane doesn't paint anyway).
javax.swing.CellRendererPane#paintComponent(Graphics, Component, Container, int, int, int, int, boolean)->void:::Paint a cell renderer component c on graphics object g
javax.swing.CellRendererPane#paintComponent(Graphics, Component, Container, int, int, int, int)->void:::Calls this.paintComponent(g, c, p, x, y, w, h, false).
javax.swing.CellRendererPane#paintComponent(Graphics, Component, Container, Rectangle)->void:::Calls this.paintComponent() with the rectangles x,y,width,height fields.
javax.swing.CellRendererPane#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this CellRendererPane
javax.swing.CellRendererPane.AccessibleCellRendererPane#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.ComboBoxEditor#getEditorComponent()->Component:::Returns the component that should be added to the tree hierarchy for this editor
javax.swing.ComboBoxEditor#setItem(Object)->void:::Set the item that should be edited
javax.swing.ComboBoxEditor#getItem()->Object:::Returns the edited item
javax.swing.ComboBoxEditor#selectAll()->void:::Ask the editor to start editing and to select everything
javax.swing.ComboBoxEditor#addActionListener(ActionListener)->void:::Add an ActionListener
javax.swing.ComboBoxEditor#removeActionListener(ActionListener)->void:::Remove an ActionListener
javax.swing.ComboBoxModel#setSelectedItem(Object)->void:::Set the selected item
javax.swing.ComboBoxModel#getSelectedItem()->Object:::Returns the selected item
javax.swing.ComponentInputMap#setParent(InputMap)->void:::Sets the parent, which must be a ComponentInputMap associated with the same component as this ComponentInputMap.
javax.swing.ComponentInputMap#getComponent()->JComponent:::Returns the component the InputMap was created for.
javax.swing.ComponentInputMap#put(KeyStroke, Object)->void:::Adds a binding for keyStroke to actionMapKey
javax.swing.ComponentInputMap#remove(KeyStroke)->void:::Removes the binding for key from this object.
javax.swing.ComponentInputMap#clear()->void:::Removes all the mappings from this object.
javax.swing.DebugGraphics#create()->Graphics:::Overrides Graphics.create to return a DebugGraphics object.
javax.swing.DebugGraphics#create(int, int, int, int)->Graphics:::Overrides Graphics.create to return a DebugGraphics object.
javax.swing.DebugGraphics#setFlashColor(Color)->void:::Sets the Color used to flash drawing operations.
javax.swing.DebugGraphics#flashColor()->Color:::Returns the Color used to flash drawing operations.
javax.swing.DebugGraphics#setFlashTime(int)->void:::Sets the time delay of drawing operation flashing.
javax.swing.DebugGraphics#flashTime()->int:::Returns the time delay of drawing operation flashing.
javax.swing.DebugGraphics#setFlashCount(int)->void:::Sets the number of times that drawing operations will flash.
javax.swing.DebugGraphics#flashCount()->int:::Returns the number of times that drawing operations will flash.
javax.swing.DebugGraphics#setLogStream(java.io.PrintStream)->void:::Sets the stream to which the DebugGraphics logs drawing operations.
javax.swing.DebugGraphics#logStream()->java.io.PrintStream:::Returns the stream to which the DebugGraphics logs drawing operations.
javax.swing.DebugGraphics#setFont(Font)->void:::Sets the Font used for text drawing operations.
javax.swing.DebugGraphics#getFont()->Font:::Returns the Font used for text drawing operations.
javax.swing.DebugGraphics#setColor(Color)->void:::Sets the color to be used for drawing and filling lines and shapes.
javax.swing.DebugGraphics#getColor()->Color:::Returns the Color used for text drawing operations.
javax.swing.DebugGraphics#getFontMetrics()->FontMetrics:::Overrides Graphics.getFontMetrics.
javax.swing.DebugGraphics#getFontMetrics(Font)->FontMetrics:::Overrides Graphics.getFontMetrics.
javax.swing.DebugGraphics#translate(int, int)->void:::Overrides Graphics.translate.
javax.swing.DebugGraphics#setPaintMode()->void:::Overrides Graphics.setPaintMode.
javax.swing.DebugGraphics#setXORMode(Color)->void:::Overrides Graphics.setXORMode.
javax.swing.DebugGraphics#getClipBounds()->Rectangle:::Overrides Graphics.getClipBounds.
javax.swing.DebugGraphics#clipRect(int, int, int, int)->void:::Overrides Graphics.clipRect.
javax.swing.DebugGraphics#setClip(int, int, int, int)->void:::Overrides Graphics.setClip.
javax.swing.DebugGraphics#getClip()->Shape:::Overrides Graphics.getClip.
javax.swing.DebugGraphics#setClip(Shape)->void:::Overrides Graphics.setClip.
javax.swing.DebugGraphics#drawRect(int, int, int, int)->void:::Overrides Graphics.drawRect.
javax.swing.DebugGraphics#fillRect(int, int, int, int)->void:::Overrides Graphics.fillRect.
javax.swing.DebugGraphics#clearRect(int, int, int, int)->void:::Overrides Graphics.clearRect.
javax.swing.DebugGraphics#drawRoundRect(int, int, int, int, int, int)->void:::Overrides Graphics.drawRoundRect.
javax.swing.DebugGraphics#fillRoundRect(int, int, int, int, int, int)->void:::Overrides Graphics.fillRoundRect.
javax.swing.DebugGraphics#drawLine(int, int, int, int)->void:::Overrides Graphics.drawLine.
javax.swing.DebugGraphics#draw3DRect(int, int, int, int, boolean)->void:::Overrides Graphics.draw3DRect.
javax.swing.DebugGraphics#fill3DRect(int, int, int, int, boolean)->void:::Overrides Graphics.fill3DRect.
javax.swing.DebugGraphics#drawOval(int, int, int, int)->void:::Overrides Graphics.drawOval.
javax.swing.DebugGraphics#fillOval(int, int, int, int)->void:::Overrides Graphics.fillOval.
javax.swing.DebugGraphics#drawArc(int, int, int, int, int, int)->void:::Overrides Graphics.drawArc.
javax.swing.DebugGraphics#fillArc(int, int, int, int, int, int)->void:::Overrides Graphics.fillArc.
javax.swing.DebugGraphics#drawPolyline(int[], int[], int)->void:::Overrides Graphics.drawPolyline.
javax.swing.DebugGraphics#drawPolygon(int[], int[], int)->void:::Overrides Graphics.drawPolygon.
javax.swing.DebugGraphics#fillPolygon(int[], int[], int)->void:::Overrides Graphics.fillPolygon.
javax.swing.DebugGraphics#drawString(String, int, int)->void:::Overrides Graphics.drawString.
javax.swing.DebugGraphics#drawString(AttributedCharacterIterator, int, int)->void:::Overrides Graphics.drawString.
javax.swing.DebugGraphics#drawBytes(byte[], int, int, int, int)->void:::Overrides Graphics.drawBytes.
javax.swing.DebugGraphics#drawChars(char[], int, int, int, int)->void:::Overrides Graphics.drawChars.
javax.swing.DebugGraphics#drawImage(Image, int, int, ImageObserver)->boolean:::Overrides Graphics.drawImage.
javax.swing.DebugGraphics#drawImage(Image, int, int, int, int, ImageObserver)->boolean:::Overrides Graphics.drawImage.
javax.swing.DebugGraphics#drawImage(Image, int, int, Color, ImageObserver)->boolean:::Overrides Graphics.drawImage.
javax.swing.DebugGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver)->boolean:::Overrides Graphics.drawImage.
javax.swing.DebugGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)->boolean:::Overrides Graphics.drawImage.
javax.swing.DebugGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean:::Overrides Graphics.drawImage.
javax.swing.DebugGraphics#loadImage(Image)->void::: debug graphics load image
javax.swing.DebugGraphics#copyArea(int, int, int, int, int, int)->void:::Overrides Graphics.copyArea.
javax.swing.DebugGraphics#sleep(int)->void::: debug graphics sleep
javax.swing.DebugGraphics#dispose()->void:::Overrides Graphics.dispose.
javax.swing.DebugGraphics#isDrawingBuffer()->boolean:::Returns the drawingBuffer value.
javax.swing.DebugGraphics#toShortString()->String::: debug graphics to short string
javax.swing.DebugGraphics#pointToString(int, int)->String::: debug graphics point to string
javax.swing.DebugGraphics#setDebugOptions(int)->void:::Enables/disables diagnostic information about every graphics operation
javax.swing.DebugGraphics#getDebugOptions()->int:::Returns the current debugging options for this DebugGraphics.
javax.swing.DebugGraphics#setDebugOptions(JComponent, int)->void:::Static wrapper method for DebugGraphicsInfo.setDebugOptions()
javax.swing.DebugGraphics#getDebugOptions(JComponent)->int:::Static wrapper method for DebugGraphicsInfo.getDebugOptions().
javax.swing.DebugGraphics#shouldComponentDebug(JComponent)->int:::Returns non-zero if component should display with DebugGraphics, zero otherwise
javax.swing.DebugGraphics#debugComponentCount()->int:::Returns the number of JComponents that have debugging options turned on.
javax.swing.DebugGraphics#debugLog()->boolean::: debug graphics debug log
javax.swing.DebugGraphics#debugFlash()->boolean::: debug graphics debug flash
javax.swing.DebugGraphics#debugBuffered()->boolean::: debug graphics debug buffered
javax.swing.DebugGraphics#info()->DebugGraphicsInfo:::Returns DebugGraphicsInfo, or creates one if none exists.
javax.swing.DebugGraphicsFilter#filterRGB(int, int, int)->int::: debug graphics filter filter b
javax.swing.DebugGraphicsInfo#setDebugOptions(JComponent, int)->void::: debug graphics info set debug options
javax.swing.DebugGraphicsInfo#getDebugOptions(JComponent)->int::: debug graphics info get debug options
javax.swing.DebugGraphicsInfo#log(String)->void::: debug graphics info log
javax.swing.DebugGraphicsObserver#allBitsPresent()->boolean::: debug graphics observer all bits present
javax.swing.DebugGraphicsObserver#imageHasProblem()->boolean::: debug graphics observer image has problem
javax.swing.DebugGraphicsObserver#imageUpdate(Image, int, int, int, int, int)->boolean::: debug graphics observer image update
javax.swing.DefaultBoundedRangeModel#getValue()->int:::Returns the model's current value.
javax.swing.DefaultBoundedRangeModel#getExtent()->int:::Returns the model's extent.
javax.swing.DefaultBoundedRangeModel#getMinimum()->int:::Returns the model's minimum.
javax.swing.DefaultBoundedRangeModel#getMaximum()->int:::Returns the model's maximum.
javax.swing.DefaultBoundedRangeModel#setValue(int)->void:::Sets the current value of the model
javax.swing.DefaultBoundedRangeModel#setExtent(int)->void:::Sets the extent to n after ensuring that n is greater than or equal to zero and falls within the model's constraints:      minimum &lt;= value &lt;= value+extent &lt;= maximum 
javax.swing.DefaultBoundedRangeModel#setMinimum(int)->void:::Sets the minimum to n after ensuring that n that the other three properties obey the model's constraints:      minimum &lt;= value &lt;= value+extent &lt;= maximum 
javax.swing.DefaultBoundedRangeModel#setMaximum(int)->void:::Sets the maximum to n after ensuring that n that the other three properties obey the model's constraints:      minimum &lt;= value &lt;= value+extent &lt;= maximum 
javax.swing.DefaultBoundedRangeModel#setValueIsAdjusting(boolean)->void:::Sets the valueIsAdjusting property.
javax.swing.DefaultBoundedRangeModel#getValueIsAdjusting()->boolean:::Returns true if the value is in the process of changing as a result of actions being taken by the user.
javax.swing.DefaultBoundedRangeModel#setRangeProperties(int, int, int, int, boolean)->void:::Sets all of the BoundedRangeModel properties after forcing the arguments to obey the usual constraints:      minimum &lt;= value &lt;= value+extent &lt;= maximum   At most, one ChangeEvent is generated.
javax.swing.DefaultBoundedRangeModel#addChangeListener(ChangeListener)->void:::Adds a ChangeListener
javax.swing.DefaultBoundedRangeModel#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener.
javax.swing.DefaultBoundedRangeModel#getChangeListeners()->ChangeListener[]:::Returns an array of all the change listeners registered on this DefaultBoundedRangeModel.
javax.swing.DefaultBoundedRangeModel#fireStateChanged()->void:::Runs each ChangeListener's stateChanged method.
javax.swing.DefaultBoundedRangeModel#toString()->String:::Returns a string that displays all of the BoundedRangeModel properties.
javax.swing.DefaultBoundedRangeModel#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this model
javax.swing.DefaultButtonModel#setActionCommand(String)->void::: default button model set action command
javax.swing.DefaultButtonModel#getActionCommand()->String::: default button model get action command
javax.swing.DefaultButtonModel#isArmed()->boolean::: default button model is armed
javax.swing.DefaultButtonModel#isSelected()->boolean::: default button model is selected
javax.swing.DefaultButtonModel#isEnabled()->boolean::: default button model is enabled
javax.swing.DefaultButtonModel#isPressed()->boolean::: default button model is pressed
javax.swing.DefaultButtonModel#isRollover()->boolean::: default button model is rollover
javax.swing.DefaultButtonModel#setArmed(boolean)->void::: default button model set armed
javax.swing.DefaultButtonModel#setEnabled(boolean)->void::: default button model set enabled
javax.swing.DefaultButtonModel#setSelected(boolean)->void::: default button model set selected
javax.swing.DefaultButtonModel#setPressed(boolean)->void::: default button model set pressed
javax.swing.DefaultButtonModel#setRollover(boolean)->void::: default button model set rollover
javax.swing.DefaultButtonModel#setMnemonic(int)->void::: default button model set mnemonic
javax.swing.DefaultButtonModel#getMnemonic()->int::: default button model get mnemonic
javax.swing.DefaultButtonModel#addChangeListener(ChangeListener)->void::: default button model add change listener
javax.swing.DefaultButtonModel#removeChangeListener(ChangeListener)->void::: default button model remove change listener
javax.swing.DefaultButtonModel#getChangeListeners()->ChangeListener[]:::Returns an array of all the change listeners registered on this DefaultButtonModel.
javax.swing.DefaultButtonModel#fireStateChanged()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.DefaultButtonModel#addActionListener(ActionListener)->void::: default button model add action listener
javax.swing.DefaultButtonModel#removeActionListener(ActionListener)->void::: default button model remove action listener
javax.swing.DefaultButtonModel#getActionListeners()->ActionListener[]:::Returns an array of all the action listeners registered on this DefaultButtonModel.
javax.swing.DefaultButtonModel#fireActionPerformed(ActionEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.DefaultButtonModel#addItemListener(ItemListener)->void::: default button model add item listener
javax.swing.DefaultButtonModel#removeItemListener(ItemListener)->void::: default button model remove item listener
javax.swing.DefaultButtonModel#getItemListeners()->ItemListener[]:::Returns an array of all the item listeners registered on this DefaultButtonModel.
javax.swing.DefaultButtonModel#fireItemStateChanged(ItemEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.DefaultButtonModel#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this model
javax.swing.DefaultButtonModel#getSelectedObjects()->Object[]:::Overridden to return null.
javax.swing.DefaultButtonModel#setGroup(ButtonGroup)->void::: default button model set group
javax.swing.DefaultButtonModel#getGroup()->ButtonGroup:::Returns the group that the button belongs to
javax.swing.DefaultButtonModel#isMenuItem()->boolean::: default button model is menu item
javax.swing.DefaultButtonModel#setMenuItem(boolean)->void::: default button model set menu item
javax.swing.DefaultCellEditor#getComponent()->Component:::Returns a reference to the editor component.
javax.swing.DefaultCellEditor#setClickCountToStart(int)->void:::Specifies the number of clicks needed to start editing.
javax.swing.DefaultCellEditor#getClickCountToStart()->int:::Returns the number of clicks needed to start editing.
javax.swing.DefaultCellEditor#getCellEditorValue()->Object:::Forwards the message from the CellEditor to the delegate.
javax.swing.DefaultCellEditor#isCellEditable(EventObject)->boolean:::Forwards the message from the CellEditor to the delegate.
javax.swing.DefaultCellEditor#shouldSelectCell(EventObject)->boolean:::Forwards the message from the CellEditor to the delegate.
javax.swing.DefaultCellEditor#stopCellEditing()->boolean:::Forwards the message from the CellEditor to the delegate.
javax.swing.DefaultCellEditor#cancelCellEditing()->void:::Forwards the message from the CellEditor to the delegate.
javax.swing.DefaultCellEditor#getTreeCellEditorComponent(JTree, Object, boolean, boolean, boolean, int)->Component:::Implements the TreeCellEditor interface.
javax.swing.DefaultCellEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int)->Component:::Implements the TableCellEditor interface.
javax.swing.DefaultCellEditor.EditorDelegate#getCellEditorValue()->Object:::Returns the value of this cell.
javax.swing.DefaultCellEditor.EditorDelegate#setValue(Object)->void:::Sets the value of this cell.
javax.swing.DefaultCellEditor.EditorDelegate#isCellEditable(EventObject)->boolean:::Returns true if anEvent is not a MouseEvent
javax.swing.DefaultCellEditor.EditorDelegate#shouldSelectCell(EventObject)->boolean:::Returns true to indicate that the editing cell may be selected.
javax.swing.DefaultCellEditor.EditorDelegate#startCellEditing(EventObject)->boolean:::Returns true to indicate that editing has begun.
javax.swing.DefaultCellEditor.EditorDelegate#stopCellEditing()->boolean:::Stops editing and returns true to indicate that editing has stopped
javax.swing.DefaultCellEditor.EditorDelegate#cancelCellEditing()->void:::Cancels editing
javax.swing.DefaultCellEditor.EditorDelegate#actionPerformed(ActionEvent)->void:::When an action is performed, editing is ended.
javax.swing.DefaultCellEditor.EditorDelegate#itemStateChanged(ItemEvent)->void:::When an item's state changes, editing is ended.
javax.swing.DefaultComboBoxModel#setSelectedItem(Object)->void:::Set the value of the selected item
javax.swing.DefaultComboBoxModel#getSelectedItem()->Object::: default combo box model get selected item
javax.swing.DefaultComboBoxModel#getSize()->int::: default combo box model get size
javax.swing.DefaultComboBoxModel#getElementAt(int)->E::: default combo box model get element at
javax.swing.DefaultComboBoxModel#getIndexOf(Object)->int:::Returns the index-position of the specified object in the list.
javax.swing.DefaultComboBoxModel#addElement(E)->void::: default combo box model add element
javax.swing.DefaultComboBoxModel#insertElementAt(E, int)->void::: default combo box model insert element at
javax.swing.DefaultComboBoxModel#removeElementAt(int)->void::: default combo box model remove element at
javax.swing.DefaultComboBoxModel#removeElement(Object)->void::: default combo box model remove element
javax.swing.DefaultComboBoxModel#removeAllElements()->void:::Empties the list.
javax.swing.DefaultComboBoxModel#addAll(Collection)->void:::Adds all of the elements present in the collection.
javax.swing.DefaultComboBoxModel#addAll(int, Collection)->void:::Adds all of the elements present in the collection, starting from the specified index.
javax.swing.DefaultDesktopManager#openFrame(JInternalFrame)->void:::Normally this method will not be called
javax.swing.DefaultDesktopManager#closeFrame(JInternalFrame)->void:::Removes the frame, and, if necessary, the desktopIcon, from its parent.
javax.swing.DefaultDesktopManager#maximizeFrame(JInternalFrame)->void:::Resizes the frame to fill its parents bounds.
javax.swing.DefaultDesktopManager#minimizeFrame(JInternalFrame)->void:::Restores the frame back to its size and position prior to a maximizeFrame call.
javax.swing.DefaultDesktopManager#iconifyFrame(JInternalFrame)->void:::Removes the frame from its parent and adds its desktopIcon to the parent.
javax.swing.DefaultDesktopManager#deiconifyFrame(JInternalFrame)->void:::Removes the desktopIcon from its parent and adds its frame to the parent.
javax.swing.DefaultDesktopManager#activateFrame(JInternalFrame)->void:::This will activate f moving it to the front
javax.swing.DefaultDesktopManager#deactivateFrame(JInternalFrame)->void::: default desktop manager deactivate frame
javax.swing.DefaultDesktopManager#beginDraggingFrame(JComponent)->void::: default desktop manager begin dragging frame
javax.swing.DefaultDesktopManager#dragFrame(JComponent, int, int)->void:::Moves the visible location of the frame being dragged to the location specified
javax.swing.DefaultDesktopManager#endDraggingFrame(JComponent)->void::: default desktop manager end dragging frame
javax.swing.DefaultDesktopManager#beginResizingFrame(JComponent, int)->void::: default desktop manager begin resizing frame
javax.swing.DefaultDesktopManager#resizeFrame(JComponent, int, int, int, int)->void:::Calls setBoundsForFrame with the new values.
javax.swing.DefaultDesktopManager#endResizingFrame(JComponent)->void::: default desktop manager end resizing frame
javax.swing.DefaultDesktopManager#setBoundsForFrame(JComponent, int, int, int, int)->void:::This moves the JComponent and repaints the damaged areas.
javax.swing.DefaultDesktopManager#removeIconFor(JInternalFrame)->void:::Convenience method to remove the desktopIcon of f is necessary.
javax.swing.DefaultDesktopManager#getBoundsForIconOf(JInternalFrame)->Rectangle:::The iconifyFrame() code calls this to determine the proper bounds for the desktopIcon.
javax.swing.DefaultDesktopManager#setPreviousBounds(JInternalFrame, Rectangle)->void:::Stores the bounds of the component just before a maximize call.
javax.swing.DefaultDesktopManager#getPreviousBounds(JInternalFrame)->Rectangle:::Gets the normal bounds of the component prior to the component being maximized.
javax.swing.DefaultDesktopManager#setWasIcon(JInternalFrame, Boolean)->void:::Sets that the component has been iconized and the bounds of the desktopIcon are valid.
javax.swing.DefaultDesktopManager#wasIcon(JInternalFrame)->boolean:::Returns true if the component has been iconized and the bounds of the desktopIcon are valid, otherwise returns false.
javax.swing.DefaultDesktopManager#getDesktopPane(JComponent)->JDesktopPane::: default desktop manager get desktop pane
javax.swing.DefaultFocusManager#getComponentAfter(Container, Component)->Component:::Returns the component after.
javax.swing.DefaultFocusManager#getComponentBefore(Container, Component)->Component:::Returns the component before.
javax.swing.DefaultFocusManager#getFirstComponent(Container)->Component:::Returns the first component.
javax.swing.DefaultFocusManager#getLastComponent(Container)->Component:::Returns the last component.
javax.swing.DefaultFocusManager#compareTabOrder(Component, Component)->boolean:::Compares the components by their focus traversal cycle order.
javax.swing.CompareTabOrderComparator#compare(Component, Component)->int::: compare tab order comparator compare
javax.swing.DefaultListCellRenderer#getListCellRendererComponent(JList, Object, int, boolean, boolean)->Component::: default list cell renderer get list cell renderer component
javax.swing.DefaultListCellRenderer#isOpaque()->boolean:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#validate()->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#invalidate()->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#repaint()->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#revalidate()->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#repaint(long, int, int, int, int)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#repaint(Rectangle)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#firePropertyChange(String, Object, Object)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#firePropertyChange(String, byte, byte)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#firePropertyChange(String, char, char)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#firePropertyChange(String, short, short)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#firePropertyChange(String, int, int)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#firePropertyChange(String, long, long)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#firePropertyChange(String, float, float)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#firePropertyChange(String, double, double)->void:::Overridden for performance reasons
javax.swing.DefaultListCellRenderer#firePropertyChange(String, boolean, boolean)->void:::Overridden for performance reasons
javax.swing.DefaultListModel#getSize()->int:::Returns the number of components in this list
javax.swing.DefaultListModel#getElementAt(int)->E:::Returns the component at the specified index
javax.swing.DefaultListModel#copyInto(Object[])->void:::Copies the components of this list into the specified array
javax.swing.DefaultListModel#trimToSize()->void:::Trims the capacity of this list to be the list's current size.
javax.swing.DefaultListModel#ensureCapacity(int)->void:::Increases the capacity of this list, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.
javax.swing.DefaultListModel#setSize(int)->void:::Sets the size of this list.
javax.swing.DefaultListModel#capacity()->int:::Returns the current capacity of this list.
javax.swing.DefaultListModel#size()->int:::Returns the number of components in this list.
javax.swing.DefaultListModel#isEmpty()->boolean:::Tests whether this list has any components.
javax.swing.DefaultListModel#elements()->Enumeration:::Returns an enumeration of the components of this list.
javax.swing.DefaultListModel#contains(Object)->boolean:::Tests whether the specified object is a component in this list.
javax.swing.DefaultListModel#indexOf(Object)->int:::Searches for the first occurrence of elem.
javax.swing.DefaultListModel#indexOf(Object, int)->int:::Searches for the first occurrence of elem, beginning the search at index.
javax.swing.DefaultListModel#lastIndexOf(Object)->int:::Returns the index of the last occurrence of elem.
javax.swing.DefaultListModel#lastIndexOf(Object, int)->int:::Searches backwards for elem, starting from the specified index, and returns an index to it.
javax.swing.DefaultListModel#elementAt(int)->E:::Returns the component at the specified index
javax.swing.DefaultListModel#firstElement()->E:::Returns the first component of this list.
javax.swing.DefaultListModel#lastElement()->E:::Returns the last component of the list.
javax.swing.DefaultListModel#setElementAt(E, int)->void:::Sets the component at the specified index of this list to be the specified element
javax.swing.DefaultListModel#removeElementAt(int)->void:::Deletes the component at the specified index
javax.swing.DefaultListModel#insertElementAt(E, int)->void:::Inserts the specified element as a component in this list at the specified index
javax.swing.DefaultListModel#addElement(E)->void:::Adds the specified component to the end of this list.
javax.swing.DefaultListModel#removeElement(Object)->boolean:::Removes the first (lowest-indexed) occurrence of the argument from this list.
javax.swing.DefaultListModel#removeAllElements()->void:::Removes all components from this list and sets its size to zero
javax.swing.DefaultListModel#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.DefaultListModel#toArray()->Object[]:::Returns an array containing all of the elements in this list in the correct order.
javax.swing.DefaultListModel#get(int)->E:::Returns the element at the specified position in this list.
javax.swing.DefaultListModel#set(int, E)->E:::Replaces the element at the specified position in this list with the specified element.
javax.swing.DefaultListModel#add(int, E)->void:::Inserts the specified element at the specified position in this list.
javax.swing.DefaultListModel#remove(int)->E:::Removes the element at the specified position in this list
javax.swing.DefaultListModel#clear()->void:::Removes all of the elements from this list
javax.swing.DefaultListModel#removeRange(int, int)->void:::Deletes the components at the specified range of indexes
javax.swing.DefaultListModel#addAll(Collection)->void:::Adds all of the elements present in the collection to the list.
javax.swing.DefaultListModel#addAll(int, Collection)->void:::Adds all of the elements present in the collection, starting from the specified index.
javax.swing.DefaultListSelectionModel#getMinSelectionIndex()->int::: default list selection model get min selection index
javax.swing.DefaultListSelectionModel#getMaxSelectionIndex()->int::: default list selection model get max selection index
javax.swing.DefaultListSelectionModel#getValueIsAdjusting()->boolean::: default list selection model get value is adjusting
javax.swing.DefaultListSelectionModel#getSelectionMode()->int::: default list selection model get selection mode
javax.swing.DefaultListSelectionModel#setSelectionMode(int)->void::: default list selection model set selection mode
javax.swing.DefaultListSelectionModel#isSelectedIndex(int)->boolean::: default list selection model is selected index
javax.swing.DefaultListSelectionModel#isSelectionEmpty()->boolean::: default list selection model is selection empty
javax.swing.DefaultListSelectionModel#addListSelectionListener(ListSelectionListener)->void::: default list selection model add list selection listener
javax.swing.DefaultListSelectionModel#removeListSelectionListener(ListSelectionListener)->void::: default list selection model remove list selection listener
javax.swing.DefaultListSelectionModel#getListSelectionListeners()->ListSelectionListener[]:::Returns an array of all the list selection listeners registered on this DefaultListSelectionModel.
javax.swing.DefaultListSelectionModel#fireValueChanged(boolean)->void:::Notifies listeners that we have ended a series of adjustments.
javax.swing.DefaultListSelectionModel#fireValueChanged(int, int)->void:::Notifies ListSelectionListeners that the value of the selection, in the closed interval firstIndex, lastIndex, has changed.
javax.swing.DefaultListSelectionModel#fireValueChanged(int, int, boolean)->void::: default list selection model fire value changed
javax.swing.DefaultListSelectionModel#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this model
javax.swing.DefaultListSelectionModel#setLeadAnchorNotificationEnabled(boolean)->void:::Sets the value of the leadAnchorNotificationEnabled flag.
javax.swing.DefaultListSelectionModel#isLeadAnchorNotificationEnabled()->boolean:::Returns the value of the leadAnchorNotificationEnabled flag
javax.swing.DefaultListSelectionModel#clearSelection()->void::: default list selection model clear selection
javax.swing.DefaultListSelectionModel#setSelectionInterval(int, int)->void:::Changes the selection to be between index0 and index1 inclusive
javax.swing.DefaultListSelectionModel#addSelectionInterval(int, int)->void:::Changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive
javax.swing.DefaultListSelectionModel#removeSelectionInterval(int, int)->void:::Changes the selection to be the set difference of the current selection and the indices between index0 and index1 inclusive
javax.swing.DefaultListSelectionModel#insertIndexInterval(int, int, boolean)->void:::Insert length indices beginning before/after index
javax.swing.DefaultListSelectionModel#removeIndexInterval(int, int)->void:::Remove the indices in the interval index0,index1 (inclusive) from the selection model
javax.swing.DefaultListSelectionModel#setValueIsAdjusting(boolean)->void::: default list selection model set value is adjusting
javax.swing.DefaultListSelectionModel#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.DefaultListSelectionModel#clone()->Object:::Returns a clone of this selection model with the same selection
javax.swing.DefaultListSelectionModel#getAnchorSelectionIndex()->int::: default list selection model get anchor selection index
javax.swing.DefaultListSelectionModel#getLeadSelectionIndex()->int::: default list selection model get lead selection index
javax.swing.DefaultListSelectionModel#setAnchorSelectionIndex(int)->void:::Set the anchor selection index, leaving all selection values unchanged
javax.swing.DefaultListSelectionModel#moveLeadSelectionIndex(int)->void:::Set the lead selection index, leaving all selection values unchanged
javax.swing.DefaultListSelectionModel#setLeadSelectionIndex(int)->void:::Sets the lead selection index, ensuring that values between the anchor and the new lead are either all selected or all deselected
javax.swing.DefaultRowSorter#setModelWrapper(ModelWrapper)->void:::Sets the model wrapper providing the data that is being sorted and filtered.
javax.swing.DefaultRowSorter#getModelWrapper()->ModelWrapper:::Returns the model wrapper providing the data that is being sorted and filtered.
javax.swing.DefaultRowSorter#getModel()->M:::Returns the underlying model.
javax.swing.DefaultRowSorter#setSortable(int, boolean)->void:::Sets whether or not the specified column is sortable
javax.swing.DefaultRowSorter#isSortable(int)->boolean:::Returns true if the specified column is sortable; otherwise, false.
javax.swing.DefaultRowSorter#setSortKeys(List)->void:::Sets the sort keys
javax.swing.DefaultRowSorter#getSortKeys()->List:::Returns the current sort keys
javax.swing.DefaultRowSorter#setMaxSortKeys(int)->void:::Sets the maximum number of sort keys
javax.swing.DefaultRowSorter#getMaxSortKeys()->int:::Returns the maximum number of sort keys.
javax.swing.DefaultRowSorter#setSortsOnUpdates(boolean)->void:::If true, specifies that a sort should happen when the underlying model is updated (rowsUpdated is invoked)
javax.swing.DefaultRowSorter#getSortsOnUpdates()->boolean:::Returns true if  a sort should happen when the underlying model is updated; otherwise, returns false.
javax.swing.DefaultRowSorter#setRowFilter(RowFilter)->void:::Sets the filter that determines which rows, if any, should be hidden from the view
javax.swing.DefaultRowSorter#getRowFilter()->RowFilter:::Returns the filter that determines which rows, if any, should be hidden from view.
javax.swing.DefaultRowSorter#toggleSortOrder(int)->void:::Reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order
javax.swing.DefaultRowSorter#convertRowIndexToView(int)->int::: default row sorter convert row index to view
javax.swing.DefaultRowSorter#convertRowIndexToModel(int)->int::: default row sorter convert row index to model
javax.swing.DefaultRowSorter#sort()->void:::Sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, associated with this sorter
javax.swing.DefaultRowSorter#useToString(int)->boolean:::Returns whether or not to convert the value to a string before doing comparisons when sorting
javax.swing.DefaultRowSorter#setComparator(int, Comparator)->void:::Sets the Comparator to use when sorting the specified column
javax.swing.DefaultRowSorter#getComparator(int)->Comparator:::Returns the Comparator for the specified column
javax.swing.DefaultRowSorter#getViewRowCount()->int::: default row sorter get view row count
javax.swing.DefaultRowSorter#getModelRowCount()->int::: default row sorter get model row count
javax.swing.DefaultRowSorter#modelStructureChanged()->void::: default row sorter model structure changed
javax.swing.DefaultRowSorter#allRowsChanged()->void::: default row sorter all rows changed
javax.swing.DefaultRowSorter#rowsInserted(int, int)->void::: default row sorter rows inserted
javax.swing.DefaultRowSorter#rowsDeleted(int, int)->void::: default row sorter rows deleted
javax.swing.DefaultRowSorter#rowsUpdated(int, int)->void::: default row sorter rows updated
javax.swing.DefaultRowSorter#rowsUpdated(int, int, int)->void::: default row sorter rows updated
javax.swing.DefaultRowSorter.ModelWrapper#getModel()->M:::Returns the underlying model that this Model is wrapping.
javax.swing.DefaultRowSorter.ModelWrapper#getColumnCount()->int:::Returns the number of columns in the model.
javax.swing.DefaultRowSorter.ModelWrapper#getRowCount()->int:::Returns the number of rows in the model.
javax.swing.DefaultRowSorter.ModelWrapper#getValueAt(int, int)->Object:::Returns the value at the specified index.
javax.swing.DefaultRowSorter.ModelWrapper#getStringValueAt(int, int)->String:::Returns the value as a String at the specified index
javax.swing.DefaultRowSorter.ModelWrapper#getIdentifier(int)->I:::Returns the identifier for the specified row
javax.swing.DefaultSingleSelectionModel#getSelectedIndex()->int::: default single selection model get selected index
javax.swing.DefaultSingleSelectionModel#setSelectedIndex(int)->void::: default single selection model set selected index
javax.swing.DefaultSingleSelectionModel#clearSelection()->void::: default single selection model clear selection
javax.swing.DefaultSingleSelectionModel#isSelected()->boolean::: default single selection model is selected
javax.swing.DefaultSingleSelectionModel#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to the button.
javax.swing.DefaultSingleSelectionModel#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the button.
javax.swing.DefaultSingleSelectionModel#getChangeListeners()->ChangeListener[]:::Returns an array of all the change listeners registered on this DefaultSingleSelectionModel.
javax.swing.DefaultSingleSelectionModel#fireStateChanged()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.DefaultSingleSelectionModel#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this model
javax.swing.DelegatingDefaultFocusManager#getDelegate()->KeyboardFocusManager::: delegating default focus manager get delegate
javax.swing.DelegatingDefaultFocusManager#processKeyEvent(Component, KeyEvent)->void::: delegating default focus manager process key event
javax.swing.DelegatingDefaultFocusManager#focusNextComponent(Component)->void::: delegating default focus manager focus next component
javax.swing.DelegatingDefaultFocusManager#focusPreviousComponent(Component)->void::: delegating default focus manager focus previous component
javax.swing.DelegatingDefaultFocusManager#getFocusOwner()->Component::: delegating default focus manager get focus owner
javax.swing.DelegatingDefaultFocusManager#clearGlobalFocusOwner()->void::: delegating default focus manager clear global focus owner
javax.swing.DelegatingDefaultFocusManager#getPermanentFocusOwner()->Component::: delegating default focus manager get permanent focus owner
javax.swing.DelegatingDefaultFocusManager#getFocusedWindow()->Window::: delegating default focus manager get focused window
javax.swing.DelegatingDefaultFocusManager#getActiveWindow()->Window::: delegating default focus manager get active window
javax.swing.DelegatingDefaultFocusManager#getDefaultFocusTraversalPolicy()->FocusTraversalPolicy::: delegating default focus manager get default focus traversal policy
javax.swing.DelegatingDefaultFocusManager#setDefaultFocusTraversalPolicy(FocusTraversalPolicy)->void::: delegating default focus manager set default focus traversal policy
javax.swing.DelegatingDefaultFocusManager#setDefaultFocusTraversalKeys(int, Set)->void::: delegating default focus manager set default focus traversal keys
javax.swing.DelegatingDefaultFocusManager#getDefaultFocusTraversalKeys(int)->Set::: delegating default focus manager get default focus traversal keys
javax.swing.DelegatingDefaultFocusManager#getCurrentFocusCycleRoot()->Container::: delegating default focus manager get current focus cycle root
javax.swing.DelegatingDefaultFocusManager#setGlobalCurrentFocusCycleRoot(Container)->void::: delegating default focus manager set global current focus cycle root
javax.swing.DelegatingDefaultFocusManager#addPropertyChangeListener(PropertyChangeListener)->void::: delegating default focus manager add property change listener
javax.swing.DelegatingDefaultFocusManager#removePropertyChangeListener(PropertyChangeListener)->void::: delegating default focus manager remove property change listener
javax.swing.DelegatingDefaultFocusManager#addPropertyChangeListener(String, PropertyChangeListener)->void::: delegating default focus manager add property change listener
javax.swing.DelegatingDefaultFocusManager#removePropertyChangeListener(String, PropertyChangeListener)->void::: delegating default focus manager remove property change listener
javax.swing.DelegatingDefaultFocusManager#addVetoableChangeListener(VetoableChangeListener)->void::: delegating default focus manager add vetoable change listener
javax.swing.DelegatingDefaultFocusManager#removeVetoableChangeListener(VetoableChangeListener)->void::: delegating default focus manager remove vetoable change listener
javax.swing.DelegatingDefaultFocusManager#addVetoableChangeListener(String, VetoableChangeListener)->void::: delegating default focus manager add vetoable change listener
javax.swing.DelegatingDefaultFocusManager#removeVetoableChangeListener(String, VetoableChangeListener)->void::: delegating default focus manager remove vetoable change listener
javax.swing.DelegatingDefaultFocusManager#addKeyEventDispatcher(KeyEventDispatcher)->void::: delegating default focus manager add key event dispatcher
javax.swing.DelegatingDefaultFocusManager#removeKeyEventDispatcher(KeyEventDispatcher)->void::: delegating default focus manager remove key event dispatcher
javax.swing.DelegatingDefaultFocusManager#dispatchEvent(AWTEvent)->boolean::: delegating default focus manager dispatch event
javax.swing.DelegatingDefaultFocusManager#dispatchKeyEvent(KeyEvent)->boolean::: delegating default focus manager dispatch key event
javax.swing.DelegatingDefaultFocusManager#upFocusCycle(Component)->void::: delegating default focus manager up focus cycle
javax.swing.DelegatingDefaultFocusManager#downFocusCycle(Container)->void::: delegating default focus manager down focus cycle
javax.swing.DesktopManager#openFrame(JInternalFrame)->void:::If possible, display this frame in an appropriate location
javax.swing.DesktopManager#closeFrame(JInternalFrame)->void:::Generally, this call should remove the frame from its parent.
javax.swing.DesktopManager#maximizeFrame(JInternalFrame)->void:::Generally, the frame should be resized to match its parents bounds.
javax.swing.DesktopManager#minimizeFrame(JInternalFrame)->void:::Generally, this indicates that the frame should be restored to its size and position prior to a maximizeFrame() call.
javax.swing.DesktopManager#iconifyFrame(JInternalFrame)->void:::Generally, remove this frame from its parent and add an iconic representation.
javax.swing.DesktopManager#deiconifyFrame(JInternalFrame)->void:::Generally, remove any iconic representation that is present and restore the frame to it's original size and location.
javax.swing.DesktopManager#activateFrame(JInternalFrame)->void:::Generally, indicate that this frame has focus
javax.swing.DesktopManager#deactivateFrame(JInternalFrame)->void:::Generally, indicate that this frame has lost focus
javax.swing.DesktopManager#beginDraggingFrame(JComponent)->void:::This method is normally called when the user has indicated that they will begin dragging a component around
javax.swing.DesktopManager#dragFrame(JComponent, int, int)->void:::The user has moved the frame
javax.swing.DesktopManager#endDraggingFrame(JComponent)->void:::This method signals the end of the dragging session
javax.swing.DesktopManager#beginResizingFrame(JComponent, int)->void:::This method is normally called when the user has indicated that they will begin resizing the frame
javax.swing.DesktopManager#resizeFrame(JComponent, int, int, int, int)->void:::The user has resized the component
javax.swing.DesktopManager#endResizingFrame(JComponent)->void:::This method signals the end of the resize session
javax.swing.DesktopManager#setBoundsForFrame(JComponent, int, int, int, int)->void:::This is a primitive reshape method.
javax.swing.FocusManager#getCurrentManager()->FocusManager:::Returns the current KeyboardFocusManager instance for the calling thread's context.
javax.swing.FocusManager#setCurrentManager(FocusManager)->void:::Sets the current KeyboardFocusManager instance for the calling thread's context
javax.swing.FocusManager#disableSwingFocusManager()->void:::Changes the current KeyboardFocusManager's default FocusTraversalPolicy to DefaultFocusTraversalPolicy.
javax.swing.FocusManager#isFocusManagerEnabled()->boolean:::Returns whether the application has invoked disableSwingFocusManager().
javax.swing.GraphicsWrapper#subGraphics()->Graphics::: graphics wrapper sub graphics
javax.swing.GraphicsWrapper#isClipIntersecting(Rectangle)->boolean::: graphics wrapper is clip intersecting
javax.swing.GraphicsWrapper#getClipX()->int::: graphics wrapper get clip x
javax.swing.GraphicsWrapper#getClipY()->int::: graphics wrapper get clip y
javax.swing.GraphicsWrapper#getClipWidth()->int::: graphics wrapper get clip width
javax.swing.GraphicsWrapper#getClipHeight()->int::: graphics wrapper get clip height
javax.swing.GrayFilter#createDisabledImage(Image)->Image:::Creates a disabled image
javax.swing.GrayFilter#filterRGB(int, int, int)->int:::Overrides RGBImageFilter.filterRGB.
javax.swing.GroupLayout#setHonorsVisibility(boolean)->void:::Sets whether component visibility is considered when sizing and positioning components
javax.swing.GroupLayout#getHonorsVisibility()->boolean:::Returns whether component visibility is considered when sizing and positioning components.
javax.swing.GroupLayout#setHonorsVisibility(Component, Boolean)->void:::Sets whether the component's visibility is considered for sizing and positioning
javax.swing.GroupLayout#setAutoCreateGaps(boolean)->void:::Sets whether a gap between components should automatically be created
javax.swing.GroupLayout#getAutoCreateGaps()->boolean:::Returns true if gaps between components are automatically created.
javax.swing.GroupLayout#setAutoCreateContainerGaps(boolean)->void:::Sets whether a gap between the container and components that touch the border of the container should automatically be created
javax.swing.GroupLayout#getAutoCreateContainerGaps()->boolean:::Returns true if gaps between the container and components that border the container are automatically created.
javax.swing.GroupLayout#setHorizontalGroup(Group)->void:::Sets the Group that positions and sizes components along the horizontal axis.
javax.swing.GroupLayout#setVerticalGroup(Group)->void:::Sets the Group that positions and sizes components along the vertical axis.
javax.swing.GroupLayout#createSequentialGroup()->SequentialGroup:::Creates and returns a SequentialGroup.
javax.swing.GroupLayout#createParallelGroup()->ParallelGroup:::Creates and returns a ParallelGroup with an alignment of Alignment.LEADING
javax.swing.GroupLayout#createParallelGroup(Alignment)->ParallelGroup:::Creates and returns a ParallelGroup with the specified alignment
javax.swing.GroupLayout#createParallelGroup(Alignment, boolean)->ParallelGroup:::Creates and returns a ParallelGroup with the specified alignment and resize behavior
javax.swing.GroupLayout#createBaselineGroup(boolean, boolean)->ParallelGroup:::Creates and returns a ParallelGroup that aligns it's elements along the baseline.
javax.swing.GroupLayout#linkSize(Component...)->void:::Forces the specified components to have the same size regardless of their preferred, minimum or maximum sizes
javax.swing.GroupLayout#linkSize(int, Component...)->void:::Forces the specified components to have the same size along the specified axis regardless of their preferred, minimum or maximum sizes
javax.swing.GroupLayout#replace(Component, Component)->void:::Replaces an existing component with a new one.
javax.swing.GroupLayout#setLayoutStyle(LayoutStyle)->void:::Sets the LayoutStyle used to calculate the preferred gaps between components
javax.swing.GroupLayout#getLayoutStyle()->LayoutStyle:::Returns the LayoutStyle used for calculating the preferred gap between components
javax.swing.GroupLayout#addLayoutComponent(String, Component)->void:::Notification that a Component has been added to the parent container
javax.swing.GroupLayout#removeLayoutComponent(Component)->void:::Notification that a Component has been removed from the parent container
javax.swing.GroupLayout#preferredLayoutSize(Container)->Dimension:::Returns the preferred size for the specified container.
javax.swing.GroupLayout#minimumLayoutSize(Container)->Dimension:::Returns the minimum size for the specified container.
javax.swing.GroupLayout#layoutContainer(Container)->void:::Lays out the specified container.
javax.swing.GroupLayout#addLayoutComponent(Component, Object)->void:::Notification that a Component has been added to the parent container
javax.swing.GroupLayout#maximumLayoutSize(Container)->Dimension:::Returns the maximum size for the specified container.
javax.swing.GroupLayout#getLayoutAlignmentX(Container)->float:::Returns the alignment along the x axis
javax.swing.GroupLayout#getLayoutAlignmentY(Container)->float:::Returns the alignment along the y axis
javax.swing.GroupLayout#invalidateLayout(Container)->void:::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.
javax.swing.GroupLayout#toString()->String:::Returns a string representation of this GroupLayout
javax.swing.GroupLayout.Group#addGroup(Group)->Group:::Adds a Group to this Group.
javax.swing.GroupLayout.Group#addComponent(Component)->Group:::Adds a Component to this Group.
javax.swing.GroupLayout.Group#addComponent(Component, int, int, int)->Group:::Adds a Component to this Group with the specified size.
javax.swing.GroupLayout.Group#addGap(int)->Group:::Adds a rigid gap to this Group.
javax.swing.GroupLayout.Group#addGap(int, int, int)->Group:::Adds a gap to this Group with the specified size.
javax.swing.GroupLayout.Group#getSpring(int)->Spring::: group get spring
javax.swing.GroupLayout.Group#indexOf(Spring)->int::: group index of
javax.swing.GroupLayout.Group#addSpring(Spring)->Group:::Adds the Spring to the list of Springs and returns the receiver.
javax.swing.GroupLayout.Group#setSize(int, int, int)->void::: group set size
javax.swing.GroupLayout.Group#setValidSize(int, int, int)->void:::This is invoked from setSize if passed a value other than UNSET.
javax.swing.GroupLayout.Group#calculateMinimumSize(int)->int::: group calculate minimum size
javax.swing.GroupLayout.Group#calculatePreferredSize(int)->int::: group calculate preferred size
javax.swing.GroupLayout.Group#calculateMaximumSize(int)->int::: group calculate maximum size
javax.swing.GroupLayout.Group#calculateSize(int, int)->int:::Calculates the specified size
javax.swing.GroupLayout.Group#getSpringSize(Spring, int, int)->int::: group get spring size
javax.swing.GroupLayout.Group#operator(int, int)->int:::Used to compute how the two values representing two springs will be combined
javax.swing.GroupLayout.Group#insertAutopadding(int, List, List, List, List, boolean)->void:::Adjusts the autopadding springs in this group and its children
javax.swing.GroupLayout.Group#removeAutopadding()->void:::Removes any AutopaddingSprings for this Group and its children.
javax.swing.GroupLayout.Group#unsetAutopadding()->void::: group unset autopadding
javax.swing.GroupLayout.Group#calculateAutopadding(int)->void::: group calculate autopadding
javax.swing.GroupLayout.Group#willHaveZeroSize(boolean)->boolean::: group will have zero size
javax.swing.GroupLayout.SequentialGroup#addGroup(Group)->SequentialGroup::: sequential group add group
javax.swing.GroupLayout.SequentialGroup#addGroup(boolean, Group)->SequentialGroup:::Adds a Group to this Group.
javax.swing.GroupLayout.SequentialGroup#addComponent(Component)->SequentialGroup::: sequential group add component
javax.swing.GroupLayout.SequentialGroup#addComponent(boolean, Component)->SequentialGroup:::Adds a Component to this Group.
javax.swing.GroupLayout.SequentialGroup#addComponent(Component, int, int, int)->SequentialGroup::: sequential group add component
javax.swing.GroupLayout.SequentialGroup#addComponent(boolean, Component, int, int, int)->SequentialGroup:::Adds a Component to this Group with the specified size.
javax.swing.GroupLayout.SequentialGroup#addGap(int)->SequentialGroup::: sequential group add gap
javax.swing.GroupLayout.SequentialGroup#addGap(int, int, int)->SequentialGroup::: sequential group add gap
javax.swing.GroupLayout.SequentialGroup#addPreferredGap(JComponent, JComponent, ComponentPlacement)->SequentialGroup:::Adds an element representing the preferred gap between two components
javax.swing.GroupLayout.SequentialGroup#addPreferredGap(JComponent, JComponent, ComponentPlacement, int, int)->SequentialGroup:::Adds an element representing the preferred gap between two components.
javax.swing.GroupLayout.SequentialGroup#addPreferredGap(ComponentPlacement)->SequentialGroup:::Adds an element representing the preferred gap between the nearest components
javax.swing.GroupLayout.SequentialGroup#addPreferredGap(ComponentPlacement, int, int)->SequentialGroup:::Adds an element representing the preferred gap between the nearest components
javax.swing.GroupLayout.SequentialGroup#addContainerGap()->SequentialGroup:::Adds an element representing the preferred gap between an edge the container and components that touch the border of the container
javax.swing.GroupLayout.SequentialGroup#addContainerGap(int, int)->SequentialGroup:::Adds an element representing the preferred gap between one edge of the container and the next or previous Component with the specified size
javax.swing.GroupLayout.SequentialGroup#operator(int, int)->int::: sequential group operator
javax.swing.GroupLayout.SequentialGroup#setValidSize(int, int, int)->void::: sequential group set valid size
javax.swing.GroupLayout.SequentialGroup#insertAutopadding(int, List, List, List, List, boolean)->void::: sequential group insert autopadding
javax.swing.GroupLayout.SequentialGroup#getBaseline()->int::: sequential group get baseline
javax.swing.GroupLayout.SequentialGroup#getBaselineResizeBehavior()->BaselineResizeBehavior::: sequential group get baseline resize behavior
javax.swing.GroupLayout.ParallelGroup#addGroup(Group)->ParallelGroup::: parallel group add group
javax.swing.GroupLayout.ParallelGroup#addComponent(Component)->ParallelGroup::: parallel group add component
javax.swing.GroupLayout.ParallelGroup#addComponent(Component, int, int, int)->ParallelGroup::: parallel group add component
javax.swing.GroupLayout.ParallelGroup#addGap(int)->ParallelGroup::: parallel group add gap
javax.swing.GroupLayout.ParallelGroup#addGap(int, int, int)->ParallelGroup::: parallel group add gap
javax.swing.GroupLayout.ParallelGroup#addGroup(Alignment, Group)->ParallelGroup:::Adds a Group to this ParallelGroup with the specified alignment
javax.swing.GroupLayout.ParallelGroup#addComponent(Component, Alignment)->ParallelGroup:::Adds a Component to this ParallelGroup with the specified alignment.
javax.swing.GroupLayout.ParallelGroup#addComponent(Component, Alignment, int, int, int)->ParallelGroup:::Adds a Component to this ParallelGroup with the specified alignment and size.
javax.swing.GroupLayout.ParallelGroup#isResizable()->boolean::: parallel group is resizable
javax.swing.GroupLayout.ParallelGroup#operator(int, int)->int::: parallel group operator
javax.swing.GroupLayout.ParallelGroup#calculateMinimumSize(int)->int::: parallel group calculate minimum size
javax.swing.GroupLayout.ParallelGroup#calculateMaximumSize(int)->int::: parallel group calculate maximum size
javax.swing.GroupLayout.ParallelGroup#setValidSize(int, int, int)->void::: parallel group set valid size
javax.swing.GroupLayout.ParallelGroup#setChildSize(Spring, int, int, int)->void::: parallel group set child size
javax.swing.GroupLayout.ParallelGroup#insertAutopadding(int, List, List, List, List, boolean)->void::: parallel group insert autopadding
javax.swing.Icon#paintIcon(Component, Graphics, int, int)->void:::Draw the icon at the specified location
javax.swing.Icon#getIconWidth()->int:::Returns the icon's width.
javax.swing.Icon#getIconHeight()->int:::Returns the icon's height.
javax.swing.ImageIcon#loadImage(Image)->void:::Loads the image, returning only when the image is loaded.
javax.swing.ImageIcon#getImageLoadStatus()->int:::Returns the status of the image loading operation.
javax.swing.ImageIcon#getImage()->Image:::Returns this icon's Image.
javax.swing.ImageIcon#setImage(Image)->void:::Sets the image displayed by this icon.
javax.swing.ImageIcon#getDescription()->String:::Gets the description of the image
javax.swing.ImageIcon#setDescription(String)->void:::Sets the description of the image
javax.swing.ImageIcon#paintIcon(Component, Graphics, int, int)->void:::Paints the icon
javax.swing.ImageIcon#getIconWidth()->int:::Gets the width of the icon.
javax.swing.ImageIcon#getIconHeight()->int:::Gets the height of the icon.
javax.swing.ImageIcon#setImageObserver(ImageObserver)->void:::Sets the image observer for the image
javax.swing.ImageIcon#getImageObserver()->ImageObserver:::Returns the image observer for the image.
javax.swing.ImageIcon#toString()->String:::Returns a string representation of this image.
javax.swing.ImageIcon#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this ImageIcon
javax.swing.ImageIcon.AccessibleImageIcon#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.ImageIcon.AccessibleImageIcon#getAccessibleStateSet()->AccessibleStateSet:::Gets the state of this object.
javax.swing.ImageIcon.AccessibleImageIcon#getAccessibleParent()->Accessible:::Gets the Accessible parent of this object
javax.swing.ImageIcon.AccessibleImageIcon#getAccessibleIndexInParent()->int:::Gets the index of this object in its accessible parent.
javax.swing.ImageIcon.AccessibleImageIcon#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
javax.swing.ImageIcon.AccessibleImageIcon#getAccessibleChild(int)->Accessible:::Returns the nth Accessible child of the object.
javax.swing.ImageIcon.AccessibleImageIcon#getLocale()->Locale:::Returns the locale of this object.
javax.swing.ImageIcon.AccessibleImageIcon#getAccessibleIconDescription()->String:::Gets the description of the icon
javax.swing.ImageIcon.AccessibleImageIcon#setAccessibleIconDescription(String)->void:::Sets the description of the icon
javax.swing.ImageIcon.AccessibleImageIcon#getAccessibleIconHeight()->int:::Gets the height of the icon.
javax.swing.ImageIcon.AccessibleImageIcon#getAccessibleIconWidth()->int:::Gets the width of the icon.
javax.swing.InputMap#setParent(InputMap)->void:::Sets this InputMap's parent.
javax.swing.InputMap#getParent()->InputMap:::Gets this InputMap's parent.
javax.swing.InputMap#put(KeyStroke, Object)->void:::Adds a binding for keyStroke to actionMapKey
javax.swing.InputMap#get(KeyStroke)->Object:::Returns the binding for keyStroke, messaging the parent InputMap if the binding is not locally defined.
javax.swing.InputMap#remove(KeyStroke)->void:::Removes the binding for key from this InputMap.
javax.swing.InputMap#clear()->void:::Removes all the mappings from this InputMap.
javax.swing.InputMap#keys()->KeyStroke[]:::Returns the KeyStrokes that are bound in this InputMap.
javax.swing.InputMap#size()->int:::Returns the number of KeyStroke bindings.
javax.swing.InputMap#allKeys()->KeyStroke[]:::Returns an array of the KeyStrokes defined in this InputMap and its parent
javax.swing.InputVerifier#verify(JComponent)->boolean:::Checks whether the JComponent's input is valid
javax.swing.InputVerifier#shouldYieldFocus(JComponent)->boolean:::Calls verify(input) to ensure that the input is valid
javax.swing.InputVerifier#verifyTarget(JComponent)->boolean:::Checks whether the target JComponent that will be receiving the focus is ready to accept it
javax.swing.InputVerifier#shouldYieldFocus(JComponent, JComponent)->boolean:::Is called by Swing if this InputVerifier is assigned to the source Swing component to check whether the requested focus transfer from the source to target is allowed
javax.swing.InternalFrameFocusTraversalPolicy#getInitialComponent(JInternalFrame)->Component:::Returns the Component that should receive the focus when a JInternalFrame is selected for the first time
javax.swing.JApplet#createRootPane()->JRootPane:::Called by the constructor methods to create the default rootPane.
javax.swing.JApplet#setTransferHandler(TransferHandler)->void:::Sets the transferHandler property, which is a mechanism to support transfer of data into this component
javax.swing.JApplet#getTransferHandler()->TransferHandler:::Gets the transferHandler property.
javax.swing.JApplet#update(Graphics)->void:::Just calls paint(g)
javax.swing.JApplet#setJMenuBar(JMenuBar)->void:::Sets the menubar for this applet.
javax.swing.JApplet#getJMenuBar()->JMenuBar:::Returns the menubar set on this applet.
javax.swing.JApplet#isRootPaneCheckingEnabled()->boolean:::Returns whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JApplet#setRootPaneCheckingEnabled(boolean)->void:::Sets whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JApplet#addImpl(Component, Object, int)->void:::Adds the specified child Component
javax.swing.JApplet#remove(Component)->void:::Removes the specified component from the container
javax.swing.JApplet#setLayout(LayoutManager)->void:::Sets the LayoutManager
javax.swing.JApplet#getRootPane()->JRootPane:::Returns the rootPane object for this applet.
javax.swing.JApplet#setRootPane(JRootPane)->void:::Sets the rootPane property
javax.swing.JApplet#getContentPane()->Container:::Returns the contentPane object for this applet.
javax.swing.JApplet#setContentPane(Container)->void:::Sets the contentPane property
javax.swing.JApplet#getLayeredPane()->JLayeredPane:::Returns the layeredPane object for this applet.
javax.swing.JApplet#setLayeredPane(JLayeredPane)->void:::Sets the layeredPane property
javax.swing.JApplet#getGlassPane()->Component:::Returns the glassPane object for this applet.
javax.swing.JApplet#setGlassPane(Component)->void:::Sets the glassPane property
javax.swing.JApplet#getGraphics()->Graphics::: applet get graphics
javax.swing.JApplet#repaint(long, int, int, int, int)->void:::Repaints the specified rectangle of this component within time milliseconds
javax.swing.JApplet#paramString()->String:::Returns a string representation of this JApplet
javax.swing.JApplet#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JApplet
javax.swing.JButton#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JButton#getUIClassID()->String:::Returns a string that specifies the name of the L&amp;F class that renders this component.
javax.swing.JButton#isDefaultButton()->boolean:::Gets the value of the defaultButton property, which if true means that this button is the current default button for its JRootPane
javax.swing.JButton#isDefaultCapable()->boolean:::Gets the value of the defaultCapable property.
javax.swing.JButton#setDefaultCapable(boolean)->void:::Sets the defaultCapable property, which determines whether this button can be made the default button for its root pane
javax.swing.JButton#removeNotify()->void:::Overrides JComponent.removeNotify to check if this button is currently set as the default button on the RootPane, and if so, sets the RootPane's default button to null to ensure the RootPane doesn't hold onto an invalid button reference.
javax.swing.JButton#paramString()->String:::Returns a string representation of this JButton
javax.swing.JButton#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JButton
javax.swing.JButton.AccessibleJButton#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JCheckBox#setBorderPaintedFlat(boolean)->void:::Sets the borderPaintedFlat property, which gives a hint to the look and feel as to the appearance of the check box border
javax.swing.JCheckBox#isBorderPaintedFlat()->boolean:::Gets the value of the borderPaintedFlat property.
javax.swing.JCheckBox#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JCheckBox#getUIClassID()->String:::Returns a string that specifies the name of the L&amp;F class that renders this component.
javax.swing.JCheckBox#setIconFromAction(Action)->void:::The icon for checkboxs comes from the look and feel, not the Action; this is overriden to do nothing.
javax.swing.JCheckBox#paramString()->String:::Returns a string representation of this JCheckBox
javax.swing.JCheckBox#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JCheckBox
javax.swing.JCheckBox.AccessibleJCheckBox#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JCheckBoxMenuItem#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JCheckBoxMenuItem#getState()->boolean:::Returns the selected-state of the item
javax.swing.JCheckBoxMenuItem#setState(boolean)->void:::Sets the selected-state of the item
javax.swing.JCheckBoxMenuItem#getSelectedObjects()->Object[]:::Returns an array (length 1) containing the check box menu item label or null if the check box is not selected.
javax.swing.JCheckBoxMenuItem#paramString()->String:::Returns a string representation of this JCheckBoxMenuItem
javax.swing.JCheckBoxMenuItem#shouldUpdateSelectedStateFromAction()->boolean:::Overriden to return true, JCheckBoxMenuItem supports the selected state.
javax.swing.JCheckBoxMenuItem#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JCheckBoxMenuItem
javax.swing.JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JColorChooser#showDialog(Component, String, Color)->Color:::Shows a modal color-chooser dialog and blocks until the dialog is hidden
javax.swing.JColorChooser#showDialog(Component, String, Color, boolean)->Color:::Shows a modal color-chooser dialog and blocks until the dialog is hidden
javax.swing.JColorChooser#createDialog(Component, String, boolean, JColorChooser, ActionListener, ActionListener)->JDialog:::Creates and returns a new dialog containing the specified ColorChooser pane along with "OK", "Cancel", and "Reset" buttons
javax.swing.JColorChooser#getUI()->ColorChooserUI:::Returns the L&amp;F object that renders this component.
javax.swing.JColorChooser#setUI(ColorChooserUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JColorChooser#updateUI()->void:::Notification from the UIManager that the L&amp;F has changed
javax.swing.JColorChooser#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JColorChooser#getColor()->Color:::Gets the current color value from the color chooser
javax.swing.JColorChooser#setColor(Color)->void:::Sets the current color of the color chooser to the specified color
javax.swing.JColorChooser#setColor(int, int, int)->void:::Sets the current color of the color chooser to the specified RGB color
javax.swing.JColorChooser#setColor(int)->void:::Sets the current color of the color chooser to the specified color.
javax.swing.JColorChooser#setDragEnabled(boolean)->void:::Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component
javax.swing.JColorChooser#getDragEnabled()->boolean:::Gets the value of the dragEnabled property.
javax.swing.JColorChooser#setPreviewPanel(JComponent)->void:::Sets the current preview panel
javax.swing.JColorChooser#getPreviewPanel()->JComponent:::Returns the preview panel that shows a chosen color.
javax.swing.JColorChooser#addChooserPanel(AbstractColorChooserPanel)->void:::Adds a color chooser panel to the color chooser.
javax.swing.JColorChooser#removeChooserPanel(AbstractColorChooserPanel)->AbstractColorChooserPanel:::Removes the Color Panel specified.
javax.swing.JColorChooser#setChooserPanels(AbstractColorChooserPanel[])->void:::Specifies the Color Panels used to choose a color value.
javax.swing.JColorChooser#getChooserPanels()->AbstractColorChooserPanel[]:::Returns the specified color panels.
javax.swing.JColorChooser#getSelectionModel()->ColorSelectionModel:::Returns the data model that handles color selections.
javax.swing.JColorChooser#setSelectionModel(ColorSelectionModel)->void:::Sets the model containing the selected color.
javax.swing.JColorChooser#paramString()->String:::Returns a string representation of this JColorChooser
javax.swing.JColorChooser#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JColorChooser
javax.swing.JColorChooser.AccessibleJColorChooser#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.ColorChooserDialog#initColorChooserDialog(Component, JColorChooser, ActionListener, ActionListener)->void::: color chooser dialog init color chooser dialog
javax.swing.ColorChooserDialog#show()->void::: color chooser dialog show
javax.swing.ColorChooserDialog#reset()->void::: color chooser dialog reset
javax.swing.ColorChooserDialog.Closer#windowClosing(WindowEvent)->void::: closer window closing
javax.swing.ColorChooserDialog.DisposeOnClose#componentHidden(ComponentEvent)->void::: dispose on close component hidden
javax.swing.ColorTracker#actionPerformed(ActionEvent)->void::: color tracker action performed
javax.swing.ColorTracker#getColor()->Color::: color tracker get color
javax.swing.JComboBox#installAncestorListener()->void:::Registers ancestor listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible
javax.swing.JComboBox#setUI(ComboBoxUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JComboBox#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JComboBox#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JComboBox#getUI()->ComboBoxUI:::Returns the L&amp;F object that renders this component.
javax.swing.JComboBox#setModel(ComboBoxModel)->void:::Sets the data model that the JComboBox uses to obtain the list of items.
javax.swing.JComboBox#getModel()->ComboBoxModel:::Returns the data model currently used by the JComboBox.
javax.swing.JComboBox#setLightWeightPopupEnabled(boolean)->void:::Sets the lightWeightPopupEnabled property, which provides a hint as to whether or not a lightweight Component should be used to contain the JComboBox, versus a heavyweight Component such as a Panel or a Window
javax.swing.JComboBox#isLightWeightPopupEnabled()->boolean:::Gets the value of the lightWeightPopupEnabled property.
javax.swing.JComboBox#setEditable(boolean)->void:::Determines whether the JComboBox field is editable
javax.swing.JComboBox#isEditable()->boolean:::Returns true if the JComboBox is editable
javax.swing.JComboBox#setMaximumRowCount(int)->void:::Sets the maximum number of rows the JComboBox displays
javax.swing.JComboBox#getMaximumRowCount()->int:::Returns the maximum number of items the combo box can display without a scrollbar
javax.swing.JComboBox#setRenderer(ListCellRenderer)->void:::Sets the renderer that paints the list items and the item selected from the list in the JComboBox field
javax.swing.JComboBox#getRenderer()->ListCellRenderer:::Returns the renderer used to display the selected item in the JComboBox field.
javax.swing.JComboBox#setEditor(ComboBoxEditor)->void:::Sets the editor used to paint and edit the selected item in the JComboBox field
javax.swing.JComboBox#getEditor()->ComboBoxEditor:::Returns the editor used to paint and edit the selected item in the JComboBox field.
javax.swing.JComboBox#setSelectedItem(Object)->void:::Sets the selected item in the combo box display area to the object in the argument
javax.swing.JComboBox#getSelectedItem()->Object:::Returns the current selected item
javax.swing.JComboBox#setSelectedIndex(int)->void:::Selects the item at index anIndex.
javax.swing.JComboBox#getSelectedIndex()->int:::Returns the first item in the list that matches the given item
javax.swing.JComboBox#getPrototypeDisplayValue()->E:::Returns the "prototypical display" value - an Object used for the calculation of the display height and width.
javax.swing.JComboBox#setPrototypeDisplayValue(E)->void:::Sets the prototype display value used to calculate the size of the display for the UI portion
javax.swing.JComboBox#addItem(E)->void:::Adds an item to the item list
javax.swing.JComboBox#insertItemAt(E, int)->void:::Inserts an item into the item list at a given index
javax.swing.JComboBox#removeItem(Object)->void:::Removes an item from the item list
javax.swing.JComboBox#removeItemAt(int)->void:::Removes the item at anIndex This method works only if the JComboBox uses a mutable data model.
javax.swing.JComboBox#removeAllItems()->void:::Removes all items from the item list.
javax.swing.JComboBox#checkMutableComboBoxModel()->void:::Checks that the dataModel is an instance of MutableComboBoxModel
javax.swing.JComboBox#showPopup()->void:::Causes the combo box to display its popup window.
javax.swing.JComboBox#hidePopup()->void:::Causes the combo box to close its popup window.
javax.swing.JComboBox#setPopupVisible(boolean)->void:::Sets the visibility of the popup.
javax.swing.JComboBox#isPopupVisible()->boolean:::Determines the visibility of the popup.
javax.swing.JComboBox#addItemListener(ItemListener)->void:::Adds an ItemListener
javax.swing.JComboBox#removeItemListener(ItemListener)->void:::Removes an ItemListener.
javax.swing.JComboBox#getItemListeners()->ItemListener[]:::Returns an array of all the ItemListeners added to this JComboBox with addItemListener().
javax.swing.JComboBox#addActionListener(ActionListener)->void:::Adds an ActionListener
javax.swing.JComboBox#removeActionListener(ActionListener)->void:::Removes an ActionListener.
javax.swing.JComboBox#getActionListeners()->ActionListener[]:::Returns an array of all the ActionListeners added to this JComboBox with addActionListener().
javax.swing.JComboBox#addPopupMenuListener(PopupMenuListener)->void:::Adds a PopupMenu listener which will listen to notification messages from the popup portion of the combo box
javax.swing.JComboBox#removePopupMenuListener(PopupMenuListener)->void:::Removes a PopupMenuListener.
javax.swing.JComboBox#getPopupMenuListeners()->PopupMenuListener[]:::Returns an array of all the PopupMenuListeners added to this JComboBox with addPopupMenuListener().
javax.swing.JComboBox#firePopupMenuWillBecomeVisible()->void:::Notifies PopupMenuListeners that the popup portion of the combo box will become visible
javax.swing.JComboBox#firePopupMenuWillBecomeInvisible()->void:::Notifies PopupMenuListeners that the popup portion of the combo box has become invisible
javax.swing.JComboBox#firePopupMenuCanceled()->void:::Notifies PopupMenuListeners that the popup portion of the combo box has been canceled
javax.swing.JComboBox#setActionCommand(String)->void:::Sets the action command that should be included in the event sent to action listeners.
javax.swing.JComboBox#getActionCommand()->String:::Returns the action command that is included in the event sent to action listeners.
javax.swing.JComboBox#setAction(Action)->void:::Sets the Action for the ActionEvent source
javax.swing.JComboBox#getAction()->Action:::Returns the currently set Action for this ActionEvent source, or null if no Action is set.
javax.swing.JComboBox#configurePropertiesFromAction(Action)->void:::Sets the properties on this combobox to match those in the specified Action
javax.swing.JComboBox#createActionPropertyChangeListener(Action)->PropertyChangeListener:::Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties
javax.swing.JComboBox#actionPropertyChanged(Action, String)->void:::Updates the combobox's state in response to property changes in associated action
javax.swing.JComboBox#fireItemStateChanged(ItemEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JComboBox#fireActionEvent()->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JComboBox#selectedItemChanged()->void:::This protected method is implementation specific
javax.swing.JComboBox#getSelectedObjects()->Object[]:::Returns an array containing the selected item
javax.swing.JComboBox#actionPerformed(ActionEvent)->void:::This method is public as an implementation side effect
javax.swing.JComboBox#contentsChanged(ListDataEvent)->void:::This method is public as an implementation side effect
javax.swing.JComboBox#intervalAdded(ListDataEvent)->void:::This method is public as an implementation side effect
javax.swing.JComboBox#intervalRemoved(ListDataEvent)->void:::This method is public as an implementation side effect
javax.swing.JComboBox#selectWithKeyChar(char)->boolean:::Selects the list item that corresponds to the specified keyboard character and returns true, if there is an item corresponding to that character
javax.swing.JComboBox#setEnabled(boolean)->void:::Enables the combo box so that items can be selected
javax.swing.JComboBox#configureEditor(ComboBoxEditor, Object)->void:::Initializes the editor with the specified item.
javax.swing.JComboBox#processKeyEvent(KeyEvent)->void:::Handles KeyEvents, looking for the Tab key
javax.swing.JComboBox#processKeyBinding(KeyStroke, KeyEvent, int, boolean)->boolean::: combo box process key binding
javax.swing.JComboBox#setKeySelectionManager(KeySelectionManager)->void:::Sets the object that translates a keyboard character into a list selection
javax.swing.JComboBox#getKeySelectionManager()->KeySelectionManager:::Returns the list's key-selection manager.
javax.swing.JComboBox#getItemCount()->int:::Returns the number of items in the list.
javax.swing.JComboBox#getItemAt(int)->E:::Returns the list item at the specified index
javax.swing.JComboBox#createDefaultKeySelectionManager()->KeySelectionManager:::Returns an instance of the default key-selection manager.
javax.swing.JComboBox.KeySelectionManager#selectionForKey(char, ComboBoxModel)->int:::Given aKey and the model, returns the row  that should become selected
javax.swing.JComboBox.DefaultKeySelectionManager#selectionForKey(char, ComboBoxModel)->int::: default key selection manager selection for key
javax.swing.JComboBox#paramString()->String:::Returns a string representation of this JComboBox
javax.swing.JComboBox#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JComboBox
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleChild(int)->Accessible:::Returns the nth Accessible child of the object
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleAction()->AccessibleAction:::Get the AccessibleAction associated with this object
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleActionDescription(int)->String:::Return a description of the specified action of the object.
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleActionCount()->int:::Returns the number of Actions available in this object
javax.swing.JComboBox.AccessibleJComboBox#doAccessibleAction(int)->boolean:::Perform the specified Action on the object
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleSelection()->AccessibleSelection:::Get the AccessibleSelection associated with this object
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleSelectionCount()->int:::Returns the number of Accessible children currently selected
javax.swing.JComboBox.AccessibleJComboBox#getAccessibleSelection(int)->Accessible:::Returns an Accessible representing the specified selected child in the popup
javax.swing.JComboBox.AccessibleJComboBox#isAccessibleChildSelected(int)->boolean:::Determines if the current child of this object is selected.
javax.swing.JComboBox.AccessibleJComboBox#addAccessibleSelection(int)->void:::Adds the specified Accessible child of the object to the object's selection
javax.swing.JComboBox.AccessibleJComboBox#removeAccessibleSelection(int)->void:::Removes the specified child of the object from the object's selection
javax.swing.JComboBox.AccessibleJComboBox#clearAccessibleSelection()->void:::Clears the selection in the object, so that no children in the object are selected.
javax.swing.JComboBox.AccessibleJComboBox#selectAllAccessibleSelection()->void:::Causes every child of the object to be selected if the object supports multiple selections.
javax.swing.JComponent#safelyGetGraphics(Component)->Graphics::: component safely get graphics
javax.swing.JComponent#safelyGetGraphics(Component, Component)->Graphics::: component safely get graphics
javax.swing.JComponent#getGraphicsInvoked(Component)->void::: component get graphics invoked
javax.swing.JComponent#getManagingFocusForwardTraversalKeys()->Set:::Returns the Set of KeyStrokes to use if the component is managing focus for forward focus traversal.
javax.swing.JComponent#getManagingFocusBackwardTraversalKeys()->Set:::Returns the Set of KeyStrokes to use if the component is managing focus for backward focus traversal.
javax.swing.JComponent#setInheritsPopupMenu(boolean)->void:::Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it
javax.swing.JComponent#getInheritsPopupMenu()->boolean:::Returns true if the JPopupMenu should be inherited from the parent.
javax.swing.JComponent#setComponentPopupMenu(JPopupMenu)->void:::Sets the JPopupMenu for this JComponent
javax.swing.JComponent#getComponentPopupMenu()->JPopupMenu:::Returns JPopupMenu that assigned for this component
javax.swing.JComponent#updateUI()->void:::Resets the UI property to a value from the current look and feel
javax.swing.JComponent#getUI()->ComponentUI:::Returns the look and feel delegate that renders this component.
javax.swing.JComponent#setUI(ComponentUI)->void:::Sets the look and feel delegate for this component
javax.swing.JComponent#getUIClassID()->String:::Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component
javax.swing.JComponent#getComponentGraphics(Graphics)->Graphics:::Returns the graphics object used to paint this component
javax.swing.JComponent#paintComponent(Graphics)->void:::Calls the UI delegate's paint method, if the UI delegate is non-null
javax.swing.JComponent#paintChildren(Graphics)->void:::Paints this component's children
javax.swing.JComponent#paintBorder(Graphics)->void:::Paints the component's border
javax.swing.JComponent#update(Graphics)->void:::Calls paint
javax.swing.JComponent#paint(Graphics)->void:::Invoked by Swing to draw components
javax.swing.JComponent#paintForceDoubleBuffered(Graphics)->void::: component paint force double buffered
javax.swing.JComponent#isPainting()->boolean:::Returns true if this component, or any of its ancestors, are in the processing of painting.
javax.swing.JComponent#printAll(Graphics)->void:::Invoke this method to print the component
javax.swing.JComponent#print(Graphics)->void:::Invoke this method to print the component to the specified Graphics
javax.swing.JComponent#printComponent(Graphics)->void:::This is invoked during a printing operation
javax.swing.JComponent#printChildren(Graphics)->void:::Prints this component's children
javax.swing.JComponent#printBorder(Graphics)->void:::Prints the component's border
javax.swing.JComponent#isPaintingTile()->boolean::: Returns true if the component is currently painting a tile
javax.swing.JComponent#isPaintingForPrint()->boolean:::Returns true if the current painting operation on this component is part of a print operation
javax.swing.JComponent#isManagingFocus()->boolean:::In release 1.4, the focus subsystem was rearchitected
javax.swing.JComponent#setNextFocusableComponent(Component)->void:::In release 1.4, the focus subsystem was rearchitected
javax.swing.JComponent#getNextFocusableComponent()->Component:::In release 1.4, the focus subsystem was rearchitected
javax.swing.JComponent#setRequestFocusEnabled(boolean)->void:::Provides a hint as to whether or not this JComponent should get focus
javax.swing.JComponent#isRequestFocusEnabled()->boolean:::Returns true if this JComponent should get focus; otherwise returns false
javax.swing.JComponent#requestFocus()->void:::Requests that this Component gets the input focus
javax.swing.JComponent#requestFocus(boolean)->boolean:::Requests that this Component gets the input focus
javax.swing.JComponent#requestFocusInWindow()->boolean:::Requests that this Component gets the input focus
javax.swing.JComponent#requestFocusInWindow(boolean)->boolean:::Requests that this Component gets the input focus
javax.swing.JComponent#grabFocus()->void:::Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window
javax.swing.JComponent#setVerifyInputWhenFocusTarget(boolean)->void:::Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus
javax.swing.JComponent#getVerifyInputWhenFocusTarget()->boolean:::Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.
javax.swing.JComponent#getFontMetrics(Font)->FontMetrics:::Gets the FontMetrics for the specified Font.
javax.swing.JComponent#setPreferredSize(Dimension)->void:::Sets the preferred size of this component
javax.swing.JComponent#getPreferredSize()->Dimension:::If the preferredSize has been set to a non-null value just returns it
javax.swing.JComponent#setMaximumSize(Dimension)->void:::Sets the maximum size of this component to a constant value
javax.swing.JComponent#getMaximumSize()->Dimension:::If the maximum size has been set to a non-null value just returns it
javax.swing.JComponent#setMinimumSize(Dimension)->void:::Sets the minimum size of this component to a constant value
javax.swing.JComponent#getMinimumSize()->Dimension:::If the minimum size has been set to a non-null value just returns it
javax.swing.JComponent#contains(int, int)->boolean:::Gives the UI delegate an opportunity to define the precise shape of this component for the sake of mouse processing.
javax.swing.JComponent#setBorder(Border)->void:::Sets the border of this component
javax.swing.JComponent#getBorder()->Border:::Returns the border of this component or null if no border is currently set.
javax.swing.JComponent#getInsets()->Insets:::If a border has been set on this component, returns the border's insets; otherwise calls super.getInsets.
javax.swing.JComponent#getInsets(Insets)->Insets:::Returns an Insets object containing this component's inset values
javax.swing.JComponent#getAlignmentY()->float:::Overrides Container.getAlignmentY to return the vertical alignment.
javax.swing.JComponent#setAlignmentY(float)->void:::Sets the vertical alignment.
javax.swing.JComponent#getAlignmentX()->float:::Overrides Container.getAlignmentX to return the horizontal alignment.
javax.swing.JComponent#setAlignmentX(float)->void:::Sets the horizontal alignment.
javax.swing.JComponent#setInputVerifier(InputVerifier)->void:::Sets the input verifier for this component.
javax.swing.JComponent#getInputVerifier()->InputVerifier:::Returns the input verifier for this component.
javax.swing.JComponent#getGraphics()->Graphics:::Returns this component's graphics context, which lets you draw on a component
javax.swing.JComponent#setDebugGraphicsOptions(int)->void:::Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.
javax.swing.JComponent#getDebugGraphicsOptions()->int:::Returns the state of graphics debugging.
javax.swing.JComponent#shouldDebugGraphics()->int:::Returns true if debug information is enabled for this JComponent or one of its parents.
javax.swing.JComponent#registerKeyboardAction(ActionListener, String, KeyStroke, int)->void:::This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior
javax.swing.JComponent#componentInputMapChanged(ComponentInputMap)->void:::Invoked from ComponentInputMap when its bindings change
javax.swing.JComponent#registerKeyboardAction(ActionListener, KeyStroke, int)->void:::This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.
javax.swing.JComponent#unregisterKeyboardAction(KeyStroke)->void:::This method is now obsolete
javax.swing.JComponent#getRegisteredKeyStrokes()->KeyStroke[]:::Returns the KeyStrokes that will initiate registered actions.
javax.swing.JComponent#getConditionForKeyStroke(KeyStroke)->int:::Returns the condition that determines whether a registered action occurs in response to the specified keystroke
javax.swing.JComponent#getActionForKeyStroke(KeyStroke)->ActionListener:::Returns the object that will perform the action registered for a given keystroke.
javax.swing.JComponent#resetKeyboardActions()->void:::Unregisters all the bindings in the first tier InputMaps and ActionMap
javax.swing.JComponent#setInputMap(int, InputMap)->void:::Sets the InputMap to use under the condition condition to map
javax.swing.JComponent#getInputMap(int)->InputMap:::Returns the InputMap that is used during condition.
javax.swing.JComponent#getInputMap()->InputMap:::Returns the InputMap that is used when the component has focus
javax.swing.JComponent#setActionMap(ActionMap)->void:::Sets the ActionMap to am
javax.swing.JComponent#getActionMap()->ActionMap:::Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding
javax.swing.JComponent#getInputMap(int, boolean)->InputMap:::Returns the InputMap to use for condition condition
javax.swing.JComponent#getActionMap(boolean)->ActionMap:::Finds and returns the appropriate ActionMap.
javax.swing.JComponent#getBaseline(int, int)->int:::Returns the baseline
javax.swing.JComponent#getBaselineResizeBehavior()->BaselineResizeBehavior:::Returns an enum indicating how the baseline of the component changes as the size changes
javax.swing.JComponent#requestDefaultFocus()->boolean:::In release 1.4, the focus subsystem was rearchitected
javax.swing.JComponent#setVisible(boolean)->void:::Makes the component visible or invisible
javax.swing.JComponent#setEnabled(boolean)->void:::Sets whether or not this component is enabled
javax.swing.JComponent#setForeground(Color)->void:::Sets the foreground color of this component
javax.swing.JComponent#setBackground(Color)->void:::Sets the background color of this component
javax.swing.JComponent#setFont(Font)->void:::Sets the font for this component.
javax.swing.JComponent#getDefaultLocale()->Locale:::Returns the default locale used to initialize each JComponent's locale property upon creation
javax.swing.JComponent#setDefaultLocale(Locale)->void:::Sets the default locale used to initialize each JComponent's locale property upon creation
javax.swing.JComponent#processComponentKeyEvent(KeyEvent)->void:::Processes any key events that the component itself recognizes
javax.swing.JComponent#processKeyEvent(KeyEvent)->void:::Overrides processKeyEvent to process events
javax.swing.JComponent#processKeyBinding(KeyStroke, KeyEvent, int, boolean)->boolean:::Invoked to process the key bindings for ks as the result of the KeyEvent e
javax.swing.JComponent#processKeyBindings(KeyEvent, boolean)->boolean:::This is invoked as the result of a KeyEvent that was not consumed by the FocusManager, KeyListeners, or the component
javax.swing.JComponent#processKeyBindingsForAllComponents(KeyEvent, Container, boolean)->boolean::: component process key bindings for all components
javax.swing.JComponent#setToolTipText(String)->void:::Registers the text to display in a tool tip
javax.swing.JComponent#getToolTipText()->String:::Returns the tooltip string that has been set with setToolTipText.
javax.swing.JComponent#getToolTipText(MouseEvent)->String:::Returns the string to be used as the tooltip for event
javax.swing.JComponent#getToolTipLocation(MouseEvent)->Point:::Returns the tooltip location in this component's coordinate system
javax.swing.JComponent#getPopupLocation(MouseEvent)->Point:::Returns the preferred location to display the popup menu in this component's coordinate system
javax.swing.JComponent#createToolTip()->JToolTip:::Returns the instance of JToolTip that should be used to display the tooltip
javax.swing.JComponent#scrollRectToVisible(Rectangle)->void:::Forwards the scrollRectToVisible() message to the JComponent's parent
javax.swing.JComponent#setAutoscrolls(boolean)->void:::Sets the autoscrolls property
javax.swing.JComponent#getAutoscrolls()->boolean:::Gets the autoscrolls property.
javax.swing.JComponent#setTransferHandler(TransferHandler)->void:::Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop
javax.swing.JComponent#getTransferHandler()->TransferHandler:::Gets the transferHandler property.
javax.swing.JComponent#dropLocationForPoint(Point)->TransferHandler.DropLocation:::Calculates a custom drop location for this type of component, representing where a drop at the given point should insert data
javax.swing.JComponent#setDropLocation(TransferHandler.DropLocation, Object, boolean)->Object:::Called to set or clear the drop location during a DnD operation
javax.swing.JComponent#dndDone()->void:::Called to indicate to this component that DnD is done
javax.swing.JComponent#processMouseEvent(MouseEvent)->void:::Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects, refer to java.awt.Component#processMouseEvent(MouseEvent) for a complete description of this method.
javax.swing.JComponent#processMouseMotionEvent(MouseEvent)->void:::Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED.
javax.swing.JComponent#superProcessMouseMotionEvent(MouseEvent)->void::: component super process mouse motion event
javax.swing.JComponent#setCreatedDoubleBuffer(boolean)->void:::This is invoked by the RepaintManager if createImage is called on the component.
javax.swing.JComponent#getCreatedDoubleBuffer()->boolean:::Returns true if the RepaintManager created the double buffer image from the component.
javax.swing.JComponent.ActionStandin#getValue(String)->Object::: action standin get value
javax.swing.JComponent.ActionStandin#isEnabled()->boolean::: action standin is enabled
javax.swing.JComponent.ActionStandin#actionPerformed(ActionEvent)->void::: action standin action performed
javax.swing.JComponent.ActionStandin#putValue(String, Object)->void::: action standin put value
javax.swing.JComponent.ActionStandin#setEnabled(boolean)->void::: action standin set enabled
javax.swing.JComponent.ActionStandin#addPropertyChangeListener(PropertyChangeListener)->void::: action standin add property change listener
javax.swing.JComponent.ActionStandin#removePropertyChangeListener(PropertyChangeListener)->void::: action standin remove property change listener
javax.swing.JComponent.IntVector#size()->int::: int vector size
javax.swing.JComponent.IntVector#elementAt(int)->int::: int vector element at
javax.swing.JComponent.IntVector#addElement(int)->void::: int vector add element
javax.swing.JComponent.IntVector#setElementAt(int, int)->void::: int vector set element at
javax.swing.JComponent.KeyboardState#getKeyCodeArray()->IntVector::: keyboard state get key code array
javax.swing.JComponent.KeyboardState#registerKeyPressed(int)->void::: keyboard state register key pressed
javax.swing.JComponent.KeyboardState#registerKeyReleased(int)->void::: keyboard state register key released
javax.swing.JComponent.KeyboardState#keyIsPressed(int)->boolean::: keyboard state key is pressed
javax.swing.JComponent.KeyboardState#shouldProcess(KeyEvent)->boolean:::Updates internal state of the KeyboardState and returns true if the event should be processed further.
javax.swing.JComponent#enable()->void::: component enable
javax.swing.JComponent#disable()->void::: component disable
javax.swing.JComponent.AccessibleJComponent.AccessibleContainerHandler#componentAdded(ContainerEvent)->void::: accessible container handler component added
javax.swing.JComponent.AccessibleJComponent.AccessibleContainerHandler#componentRemoved(ContainerEvent)->void::: accessible container handler component removed
javax.swing.JComponent.AccessibleJComponent.AccessibleFocusHandler#focusGained(FocusEvent)->void::: accessible focus handler focus gained
javax.swing.JComponent.AccessibleJComponent.AccessibleFocusHandler#focusLost(FocusEvent)->void::: accessible focus handler focus lost
javax.swing.JComponent.AccessibleJComponent#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list.
javax.swing.JComponent.AccessibleJComponent#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
javax.swing.JComponent.AccessibleJComponent#getBorderTitle(Border)->String:::Recursively search through the border hierarchy (if it exists) for a TitledBorder with a non-null title
javax.swing.JComponent.AccessibleJComponent#getAccessibleName()->String:::Gets the accessible name of this object
javax.swing.JComponent.AccessibleJComponent#getAccessibleDescription()->String:::Gets the accessible description of this object
javax.swing.JComponent.AccessibleJComponent#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.JComponent.AccessibleJComponent#getAccessibleStateSet()->AccessibleStateSet:::Gets the state of this object.
javax.swing.JComponent.AccessibleJComponent#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
javax.swing.JComponent.AccessibleJComponent#getAccessibleChild(int)->Accessible:::Returns the nth Accessible child of the object.
javax.swing.JComponent.AccessibleJComponent#getAccessibleExtendedComponent()->AccessibleExtendedComponent:::Returns the AccessibleExtendedComponent
javax.swing.JComponent.AccessibleJComponent#getToolTipText()->String:::Returns the tool tip text
javax.swing.JComponent.AccessibleJComponent#getTitledBorderText()->String:::Returns the titled border text
javax.swing.JComponent.AccessibleJComponent#getAccessibleKeyBinding()->AccessibleKeyBinding:::Returns key bindings associated with this object
javax.swing.JComponent#getClientProperty(Object)->Object:::Returns the value of the property with the specified key
javax.swing.JComponent#putClientProperty(Object, Object)->void:::Adds an arbitrary key/value "client property" to this component
javax.swing.JComponent#clientPropertyChanged(Object, Object, Object)->void::: component client property changed
javax.swing.JComponent#setUIProperty(String, Object)->void::: component set property
javax.swing.JComponent#setFocusTraversalKeys(int, Set)->void:::Sets the focus traversal keys for a given traversal operation for this Component
javax.swing.JComponent#isLightweightComponent(Component)->boolean:::Returns true if this component is lightweight, that is, if it doesn't have a native window system peer.
javax.swing.JComponent#reshape(int, int, int, int)->void::: component reshape
javax.swing.JComponent#getBounds(Rectangle)->Rectangle:::Stores the bounds of this component into "return value" rv and returns rv
javax.swing.JComponent#getSize(Dimension)->Dimension:::Stores the width/height of this component into "return value" rv and returns rv
javax.swing.JComponent#getLocation(Point)->Point:::Stores the x,y origin of this component into "return value" rv and returns rv
javax.swing.JComponent#getX()->int:::Returns the current x coordinate of the component's origin
javax.swing.JComponent#getY()->int:::Returns the current y coordinate of the component's origin
javax.swing.JComponent#getWidth()->int:::Returns the current width of this component
javax.swing.JComponent#getHeight()->int:::Returns the current height of this component
javax.swing.JComponent#isOpaque()->boolean:::Returns true if this component is completely opaque
javax.swing.JComponent#setOpaque(boolean)->void:::If true the component paints every pixel within its bounds
javax.swing.JComponent#rectangleIsObscured(int, int, int, int)->boolean:::If the specified rectangle is completely obscured by any of this component's opaque children then returns true
javax.swing.JComponent#computeVisibleRect(Component, Rectangle)->void:::Returns the Component's "visible rect rectangle" -  the intersection of the visible rectangles for the component c and all of its ancestors
javax.swing.JComponent#computeVisibleRect(Rectangle)->void:::Returns the Component's "visible rect rectangle" -  the intersection of the visible rectangles for this component and all of its ancestors
javax.swing.JComponent#getVisibleRect()->Rectangle:::Returns the Component's "visible rectangle" -  the intersection of this component's visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors' visible rectangles.
javax.swing.JComponent#firePropertyChange(String, boolean, boolean)->void:::Support for reporting bound property changes for boolean properties
javax.swing.JComponent#firePropertyChange(String, int, int)->void:::Support for reporting bound property changes for integer properties
javax.swing.JComponent#firePropertyChange(String, char, char)->void::: component fire property change
javax.swing.JComponent#fireVetoableChange(String, Object, Object)->void:::Supports reporting constrained property changes
javax.swing.JComponent#addVetoableChangeListener(VetoableChangeListener)->void:::Adds a VetoableChangeListener to the listener list
javax.swing.JComponent#removeVetoableChangeListener(VetoableChangeListener)->void:::Removes a VetoableChangeListener from the listener list
javax.swing.JComponent#getVetoableChangeListeners()->VetoableChangeListener[]:::Returns an array of all the vetoable change listeners registered on this component.
javax.swing.JComponent#getTopLevelAncestor()->Container:::Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container.
javax.swing.JComponent#addAncestorListener(AncestorListener)->void:::Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible
javax.swing.JComponent#removeAncestorListener(AncestorListener)->void:::Unregisters listener so that it will no longer receive AncestorEvents.
javax.swing.JComponent#getAncestorListeners()->AncestorListener[]:::Returns an array of all the ancestor listeners registered on this component.
javax.swing.JComponent#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this JComponent
javax.swing.JComponent#addNotify()->void:::Notifies this component that it now has a parent component
javax.swing.JComponent#removeNotify()->void:::Notifies this component that it no longer has a parent component
javax.swing.JComponent#repaint(long, int, int, int, int)->void:::Adds the specified region to the dirty region list if the component is showing
javax.swing.JComponent#repaint(Rectangle)->void:::Adds the specified region to the dirty region list if the component is showing
javax.swing.JComponent#revalidate()->void:::Supports deferred automatic layout
javax.swing.JComponent#isValidateRoot()->boolean:::If this method returns true, revalidate calls by descendants of this component will cause the entire tree beginning with this root to be validated
javax.swing.JComponent#isOptimizedDrawingEnabled()->boolean:::Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap
javax.swing.JComponent#isPaintingOrigin()->boolean:::Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors
javax.swing.JComponent#paintImmediately(int, int, int, int)->void:::Paints the specified region in this component and all of its descendants that overlap the region, immediately
javax.swing.JComponent#paintImmediately(Rectangle)->void:::Paints the specified region now.
javax.swing.JComponent#alwaysOnTop()->boolean::: component always on top
javax.swing.JComponent#setPaintingChild(Component)->void::: component set painting child
javax.swing.JComponent#_paintImmediately(int, int, int, int)->void::: component _paint immediately
javax.swing.JComponent#paintToOffscreen(Graphics, int, int, int, int, int, int)->void:::Paints to the specified graphics
javax.swing.JComponent#checkIfChildObscuredBySibling()->boolean:::Returns true, which implies that before checking if a child should be painted it is first check that the child is not obscured by another sibling
javax.swing.JComponent#setWriteObjCounter(JComponent, byte)->void::: component set write obj counter
javax.swing.JComponent#getWriteObjCounter(JComponent)->byte::: component get write obj counter
javax.swing.JComponent#setDoubleBuffered(boolean)->void::: Sets whether this component should use a buffer to paint
javax.swing.JComponent#isDoubleBuffered()->boolean:::Returns whether this component should use a buffer to paint.
javax.swing.JComponent#getRootPane()->JRootPane:::Returns the JRootPane ancestor for this component.
javax.swing.JComponent#compWriteObjectNotify()->void:::This is called from Component by way of reflection
javax.swing.JComponent#paramString()->String:::Returns a string representation of this JComponent
javax.swing.JComponent#hide()->void::: component hide
javax.swing.JDesktopPane#getUI()->DesktopPaneUI:::Returns the L&amp;F object that renders this component.
javax.swing.JDesktopPane#setUI(DesktopPaneUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JDesktopPane#setDragMode(int)->void:::Sets the "dragging style" used by the desktop pane
javax.swing.JDesktopPane#getDragMode()->int:::Gets the current "dragging style" used by the desktop pane.
javax.swing.JDesktopPane#getDesktopManager()->DesktopManager:::Returns the DesktopManger that handles desktop-specific UI actions.
javax.swing.JDesktopPane#setDesktopManager(DesktopManager)->void:::Sets the DesktopManger that will handle desktop-specific UI actions
javax.swing.JDesktopPane#updateUI()->void:::Notification from the UIManager that the L&amp;F has changed
javax.swing.JDesktopPane#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JDesktopPane#getAllFrames()->JInternalFrame[]:::Returns all JInternalFrames currently displayed in the desktop
javax.swing.JDesktopPane#getSelectedFrame()->JInternalFrame::: desktop pane get selected frame
javax.swing.JDesktopPane#setSelectedFrame(JInternalFrame)->void::: desktop pane set selected frame
javax.swing.JDesktopPane#getAllFramesInLayer(int)->JInternalFrame[]:::Returns all JInternalFrames currently displayed in the specified layer of the desktop
javax.swing.JDesktopPane#getNextFrame(JInternalFrame)->JInternalFrame::: desktop pane get next frame
javax.swing.JDesktopPane#remove(Component)->void::: desktop pane remove
javax.swing.JDesktopPane#selectFrame(boolean)->JInternalFrame:::Selects the next JInternalFrame in this desktop pane.
javax.swing.JDesktopPane#setComponentOrderCheckingEnabled(boolean)->void::: desktop pane set component order checking enabled
javax.swing.JDesktopPane#addImpl(Component, Object, int)->void::: desktop pane add impl
javax.swing.JDesktopPane#remove(int)->void::: desktop pane remove
javax.swing.JDesktopPane#removeAll()->void::: desktop pane remove all
javax.swing.JDesktopPane#setComponentZOrder(Component, int)->void::: desktop pane set component order
javax.swing.JDesktopPane#setUIProperty(String, Object)->void::: desktop pane set property
javax.swing.JDesktopPane#paramString()->String:::Returns a string representation of this JDesktopPane
javax.swing.JDesktopPane#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JDesktopPane
javax.swing.JDesktopPane.AccessibleJDesktopPane#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JDialog#dialogInit()->void:::Called by the constructors to init the JDialog properly.
javax.swing.JDialog#createRootPane()->JRootPane:::Called by the constructor methods to create the default rootPane.
javax.swing.JDialog#processWindowEvent(WindowEvent)->void:::Handles window events depending on the state of the defaultCloseOperation property.
javax.swing.JDialog#setDefaultCloseOperation(int)->void:::Sets the operation that will happen by default when the user initiates a "close" on this dialog
javax.swing.JDialog#getDefaultCloseOperation()->int:::Returns the operation which occurs when the user initiates a "close" on this dialog.
javax.swing.JDialog#setTransferHandler(TransferHandler)->void:::Sets the transferHandler property, which is a mechanism to support transfer of data into this component
javax.swing.JDialog#getTransferHandler()->TransferHandler:::Gets the transferHandler property.
javax.swing.JDialog#update(Graphics)->void:::Calls paint(g)
javax.swing.JDialog#setJMenuBar(JMenuBar)->void:::Sets the menubar for this dialog.
javax.swing.JDialog#getJMenuBar()->JMenuBar:::Returns the menubar set on this dialog.
javax.swing.JDialog#isRootPaneCheckingEnabled()->boolean:::Returns whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JDialog#setRootPaneCheckingEnabled(boolean)->void:::Sets whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JDialog#addImpl(Component, Object, int)->void:::Adds the specified child Component
javax.swing.JDialog#remove(Component)->void:::Removes the specified component from the container
javax.swing.JDialog#setLayout(LayoutManager)->void:::Sets the LayoutManager
javax.swing.JDialog#getRootPane()->JRootPane:::Returns the rootPane object for this dialog.
javax.swing.JDialog#setRootPane(JRootPane)->void:::Sets the rootPane property
javax.swing.JDialog#getContentPane()->Container:::Returns the contentPane object for this dialog.
javax.swing.JDialog#setContentPane(Container)->void:::Sets the contentPane property
javax.swing.JDialog#getLayeredPane()->JLayeredPane:::Returns the layeredPane object for this dialog.
javax.swing.JDialog#setLayeredPane(JLayeredPane)->void:::Sets the layeredPane property
javax.swing.JDialog#getGlassPane()->Component:::Returns the glassPane object for this dialog.
javax.swing.JDialog#setGlassPane(Component)->void:::Sets the glassPane property
javax.swing.JDialog#getGraphics()->Graphics::: dialog get graphics
javax.swing.JDialog#repaint(long, int, int, int, int)->void:::Repaints the specified rectangle of this component within time milliseconds
javax.swing.JDialog#setDefaultLookAndFeelDecorated(boolean)->void:::Provides a hint as to whether or not newly created JDialogs should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel
javax.swing.JDialog#isDefaultLookAndFeelDecorated()->boolean:::Returns true if newly created JDialogs should have their Window decorations provided by the current look and feel
javax.swing.JDialog#paramString()->String:::Returns a string representation of this JDialog
javax.swing.JDialog#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JDialog
javax.swing.JDialog.AccessibleJDialog#getAccessibleName()->String:::Get the accessible name of this object.
javax.swing.JDialog.AccessibleJDialog#getAccessibleStateSet()->AccessibleStateSet:::Get the state of this object.
javax.swing.JEditorPane#addHyperlinkListener(HyperlinkListener)->void:::Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered.
javax.swing.JEditorPane#removeHyperlinkListener(HyperlinkListener)->void:::Removes a hyperlink listener.
javax.swing.JEditorPane#getHyperlinkListeners()->HyperlinkListener[]:::Returns an array of all the HyperLinkListeners added to this JEditorPane with addHyperlinkListener().
javax.swing.JEditorPane#fireHyperlinkUpdate(HyperlinkEvent)->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JEditorPane#setPage(URL)->void:::Sets the current URL being displayed
javax.swing.JEditorPane#read(InputStream, Object)->void:::This method initializes from a stream
javax.swing.JEditorPane#read(InputStream, Document)->void:::This method invokes the EditorKit to initiate a read
javax.swing.JEditorPane.PageLoader#doInBackground()->URL:::Try to load the document, then scroll the view to the reference (if specified)
javax.swing.JEditorPane#getStream(URL)->InputStream:::Fetches a stream for the given URL, which is about to be loaded by the setPage method
javax.swing.JEditorPane#scrollToReference(String)->void:::Scrolls the view to the given reference location (that is, the value returned by the URL.getRef method for the URL being displayed)
javax.swing.JEditorPane#getPage()->URL:::Gets the current URL being displayed
javax.swing.JEditorPane#setPage(String)->void:::Sets the current URL being displayed.
javax.swing.JEditorPane#getUIClassID()->String:::Gets the class ID for the UI.
javax.swing.JEditorPane#createDefaultEditorKit()->EditorKit:::Creates the default editor kit (PlainEditorKit) for when the component is first created.
javax.swing.JEditorPane#getEditorKit()->EditorKit:::Fetches the currently installed kit for handling content
javax.swing.JEditorPane#getContentType()->String:::Gets the type of content that this editor is currently set to deal with
javax.swing.JEditorPane#setContentType(String)->void:::Sets the type of content that this editor handles
javax.swing.JEditorPane#setEditorKit(EditorKit)->void:::Sets the currently installed kit for handling content
javax.swing.JEditorPane#getEditorKitForContentType(String)->EditorKit:::Fetches the editor kit to use for the given type of content
javax.swing.JEditorPane#setEditorKitForContentType(String, EditorKit)->void:::Directly sets the editor kit to use for the given type
javax.swing.JEditorPane#replaceSelection(String)->void:::Replaces the currently selected content with new content represented by the given string
javax.swing.JEditorPane#createEditorKitForContentType(String)->EditorKit:::Creates a handler for the given type from the default registry of editor kits
javax.swing.JEditorPane#registerEditorKitForContentType(String, String)->void:::Establishes the default bindings of type to classname
javax.swing.JEditorPane#registerEditorKitForContentType(String, String, ClassLoader)->void:::Establishes the default bindings of type to classname
javax.swing.JEditorPane#getEditorKitClassNameForContentType(String)->String:::Returns the currently registered EditorKit class name for the type type.
javax.swing.JEditorPane#getPreferredSize()->Dimension:::Returns the preferred size for the JEditorPane
javax.swing.JEditorPane#setText(String)->void:::Sets the text of this TextComponent to the specified content, which is expected to be in the format of the content type of this editor
javax.swing.JEditorPane#getText()->String:::Returns the text contained in this TextComponent in terms of the content type of this editor
javax.swing.JEditorPane#getScrollableTracksViewportWidth()->boolean:::Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.
javax.swing.JEditorPane#getScrollableTracksViewportHeight()->boolean:::Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport.
javax.swing.JEditorPane#paramString()->String:::Returns a string representation of this JEditorPane
javax.swing.JEditorPane#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JEditorPane
javax.swing.JEditorPane.AccessibleJEditorPane#getAccessibleDescription()->String:::Gets the accessibleDescription property of this object
javax.swing.JEditorPane.AccessibleJEditorPane#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object.
javax.swing.JEditorPane.AccessibleJEditorPaneHTML#getAccessibleText()->AccessibleText:::Returns the accessible text.
javax.swing.JEditorPane.AccessibleJEditorPaneHTML#getAccessibleChildrenCount()->int:::Returns the number of accessible children of the object.
javax.swing.JEditorPane.AccessibleJEditorPaneHTML#getAccessibleChild(int)->Accessible:::Returns the specified Accessible child of the object
javax.swing.JEditorPane.AccessibleJEditorPaneHTML#getAccessibleAt(Point)->Accessible:::Returns the Accessible child, if one exists, contained at the local coordinate Point.
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#isValid()->boolean:::Since the document a link is associated with may have changed, this method returns whether this Link is valid anymore (with respect to the document it references).
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getAccessibleActionCount()->int:::Returns the number of accessible actions available in this Link If there are more than one, the first one is NOT considered the "default" action of this LINK object (e.g
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#doAccessibleAction(int)->boolean:::Perform the specified Action on the object
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getAccessibleActionDescription(int)->String:::Return a String description of this particular link action
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getAccessibleActionObject(int)->Object:::Returns a URL object that represents the link.
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getAccessibleActionAnchor(int)->Object:::Return an object that represents the link anchor, as appropriate for that link
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getStartIndex()->int:::Get the index with the hypertext document at which this link begins
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink#getEndIndex()->int:::Get the index with the hypertext document at which this link ends
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport#getLinkCount()->int:::Returns the number of links within this hypertext doc.
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport#getLinkIndex(int)->int:::Returns the index into an array of hyperlinks that is associated with this character index, or -1 if there is no hyperlink associated with this index.
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport#getLink(int)->AccessibleHyperlink:::Returns the index into an array of hyperlinks that index
javax.swing.JEditorPane.JEditorPaneAccessibleHypertextSupport#getLinkText(int)->String:::Returns the contiguous text within the document that is associated with this hyperlink.
javax.swing.JEditorPane.PlainEditorKit#getViewFactory()->ViewFactory:::Fetches a factory that is suitable for producing views of any models that are produced by this kit
javax.swing.JEditorPane.PlainEditorKit#create(Element)->View:::Creates a view from the given structural element of a document.
javax.swing.JEditorPane.PlainEditorKit#createI18N(Element)->View::: plain editor kit create i18 n
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph#setPropertiesFromAttributes()->void::: plain paragraph set properties from attributes
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph#getFlowSpan(int)->int:::Fetch the constraining span to flow against for the given child index.
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph#calculateMinorAxisRequirements(int, SizeRequirements)->SizeRequirements::: plain paragraph calculate minor axis requirements
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#getViewIndexAtPosition(int)->int::: logical view get view index at position
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#updateChildren(DocumentEvent.ElementChange, DocumentEvent, ViewFactory)->boolean::: logical view update children
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#loadChildren(ViewFactory)->void::: logical view load children
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#getPreferredSpan(int)->float::: logical view get preferred span
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#forwardUpdateToView(View, DocumentEvent, Shape, ViewFactory)->void:::Forward the DocumentEvent to the given child view
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#paint(Graphics, Shape)->void::: logical view paint
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#isBefore(int, int, Rectangle)->boolean::: logical view is before
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#isAfter(int, int, Rectangle)->boolean::: logical view is after
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#getViewAtPoint(int, int, Rectangle)->View::: logical view get view at point
javax.swing.JEditorPane.PlainEditorKit.PlainParagraph.LogicalView#childAllocation(int, Rectangle)->void::: logical view child allocation
javax.swing.JEditorPane.HeaderParser#findKey(int)->String::: header parser find key
javax.swing.JEditorPane.HeaderParser#findValue(int)->String::: header parser find value
javax.swing.JEditorPane.HeaderParser#findValue(String)->String::: header parser find value
javax.swing.JEditorPane.HeaderParser#findValue(String, String)->String::: header parser find value
javax.swing.JEditorPane.HeaderParser#findInt(String, int)->int::: header parser find int
javax.swing.JFileChooser#setup(FileSystemView)->void:::Performs common constructor initialization and setup.
javax.swing.JFileChooser#setDragEnabled(boolean)->void:::Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component
javax.swing.JFileChooser#getDragEnabled()->boolean:::Gets the value of the dragEnabled property.
javax.swing.JFileChooser#getSelectedFile()->File:::Returns the selected file
javax.swing.JFileChooser#setSelectedFile(File)->void:::Sets the selected file
javax.swing.JFileChooser#getSelectedFiles()->File[]:::Returns a list of selected files if the file chooser is set to allow multiple selection.
javax.swing.JFileChooser#setSelectedFiles(File[])->void:::Sets the list of selected files if the file chooser is set to allow multiple selection.
javax.swing.JFileChooser#getCurrentDirectory()->File:::Returns the current directory.
javax.swing.JFileChooser#setCurrentDirectory(File)->void:::Sets the current directory
javax.swing.JFileChooser#changeToParentDirectory()->void:::Changes the directory to be set to the parent of the current directory.
javax.swing.JFileChooser#rescanCurrentDirectory()->void:::Tells the UI to rescan its files list from the current directory.
javax.swing.JFileChooser#ensureFileIsVisible(File)->void:::Makes sure that the specified file is viewable, and not hidden.
javax.swing.JFileChooser#showOpenDialog(Component)->int:::Pops up an "Open File" file chooser dialog
javax.swing.JFileChooser#showSaveDialog(Component)->int:::Pops up a "Save File" file chooser dialog
javax.swing.JFileChooser#showDialog(Component, String)->int:::Pops a custom file chooser dialog with a custom approve button
javax.swing.JFileChooser#createDialog(Component)->JDialog:::Creates and returns a new JDialog wrapping this centered on the parent in the parent's frame
javax.swing.JFileChooser#getControlButtonsAreShown()->boolean:::Returns the value of the controlButtonsAreShown property.
javax.swing.JFileChooser#setControlButtonsAreShown(boolean)->void:::Sets the property that indicates whether the approve and cancel buttons are shown in the file chooser
javax.swing.JFileChooser#getDialogType()->int:::Returns the type of this dialog
javax.swing.JFileChooser#setDialogType(int)->void::: file chooser set dialog type
javax.swing.JFileChooser#setDialogTitle(String)->void:::Sets the string that goes in the JFileChooser window's title bar.
javax.swing.JFileChooser#getDialogTitle()->String:::Gets the string that goes in the JFileChooser's titlebar.
javax.swing.JFileChooser#setApproveButtonToolTipText(String)->void:::Sets the tooltip text used in the ApproveButton
javax.swing.JFileChooser#getApproveButtonToolTipText()->String:::Returns the tooltip text used in the ApproveButton
javax.swing.JFileChooser#getApproveButtonMnemonic()->int:::Returns the approve button's mnemonic.
javax.swing.JFileChooser#setApproveButtonMnemonic(int)->void:::Sets the approve button's mnemonic using a numeric keycode.
javax.swing.JFileChooser#setApproveButtonMnemonic(char)->void:::Sets the approve button's mnemonic using a character.
javax.swing.JFileChooser#setApproveButtonText(String)->void::: file chooser set approve button text
javax.swing.JFileChooser#getApproveButtonText()->String:::Returns the text used in the ApproveButton in the FileChooserUI
javax.swing.JFileChooser#getChoosableFileFilters()->FileFilter[]:::Gets the list of user choosable file filters.
javax.swing.JFileChooser#addChoosableFileFilter(FileFilter)->void:::Adds a filter to the list of user choosable file filters
javax.swing.JFileChooser#removeChoosableFileFilter(FileFilter)->boolean:::Removes a filter from the list of user choosable file filters
javax.swing.JFileChooser#resetChoosableFileFilters()->void:::Resets the choosable file filter list to its starting state
javax.swing.JFileChooser#getAcceptAllFileFilter()->FileFilter:::Returns the AcceptAll file filter
javax.swing.JFileChooser#isAcceptAllFileFilterUsed()->boolean:::Returns whether the AcceptAll FileFilter is used.
javax.swing.JFileChooser#setAcceptAllFileFilterUsed(boolean)->void:::Determines whether the AcceptAll FileFilter is used as an available choice in the choosable filter list
javax.swing.JFileChooser#getAccessory()->JComponent:::Returns the accessory component.
javax.swing.JFileChooser#setAccessory(JComponent)->void:::Sets the accessory component
javax.swing.JFileChooser#setFileSelectionMode(int)->void:::Sets the JFileChooser to allow the user to just select files, just select directories, or select both files and directories
javax.swing.JFileChooser#getFileSelectionMode()->int:::Returns the current file-selection mode
javax.swing.JFileChooser#isFileSelectionEnabled()->boolean:::Convenience call that determines if files are selectable based on the current file selection mode.
javax.swing.JFileChooser#isDirectorySelectionEnabled()->boolean:::Convenience call that determines if directories are selectable based on the current file selection mode.
javax.swing.JFileChooser#setMultiSelectionEnabled(boolean)->void:::Sets the file chooser to allow multiple file selections.
javax.swing.JFileChooser#isMultiSelectionEnabled()->boolean:::Returns true if multiple files can be selected.
javax.swing.JFileChooser#isFileHidingEnabled()->boolean:::Returns true if hidden files are not shown in the file chooser; otherwise, returns false.
javax.swing.JFileChooser#setFileHidingEnabled(boolean)->void:::Sets file hiding on or off
javax.swing.JFileChooser#setFileFilter(FileFilter)->void:::Sets the current file filter
javax.swing.JFileChooser#getFileFilter()->FileFilter:::Returns the currently selected file filter.
javax.swing.JFileChooser#setFileView(FileView)->void:::Sets the file view to be used to retrieve UI information, such as the icon that represents a file or the type description of a file.
javax.swing.JFileChooser#getFileView()->FileView:::Returns the current file view.
javax.swing.JFileChooser#getName(File)->String:::Returns the filename.
javax.swing.JFileChooser#getDescription(File)->String:::Returns the file description.
javax.swing.JFileChooser#getTypeDescription(File)->String:::Returns the file type.
javax.swing.JFileChooser#getIcon(File)->Icon:::Returns the icon for this file or type of file, depending on the system.
javax.swing.JFileChooser#isTraversable(File)->boolean:::Returns true if the file (directory) can be visited
javax.swing.JFileChooser#accept(File)->boolean:::Returns true if the file should be displayed.
javax.swing.JFileChooser#setFileSystemView(FileSystemView)->void:::Sets the file system view that the JFileChooser uses for accessing and creating file system resources, such as finding the floppy drive and getting a list of root drives.
javax.swing.JFileChooser#getFileSystemView()->FileSystemView:::Returns the file system view.
javax.swing.JFileChooser#approveSelection()->void:::Called by the UI when the user hits the Approve button (labeled "Open" or "Save", by default)
javax.swing.JFileChooser#cancelSelection()->void:::Called by the UI when the user chooses the Cancel button
javax.swing.JFileChooser#addActionListener(ActionListener)->void:::Adds an ActionListener to the file chooser.
javax.swing.JFileChooser#removeActionListener(ActionListener)->void:::Removes an ActionListener from the file chooser.
javax.swing.JFileChooser#getActionListeners()->ActionListener[]:::Returns an array of all the action listeners registered on this file chooser.
javax.swing.JFileChooser#fireActionPerformed(String)->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JFileChooser#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JFileChooser#getUIClassID()->String:::Returns a string that specifies the name of the L&amp;F class that renders this component.
javax.swing.JFileChooser#getUI()->FileChooserUI:::Gets the UI object which implements the L&amp;F for this component.
javax.swing.JFileChooser#paramString()->String:::Returns a string representation of this JFileChooser
javax.swing.JFileChooser#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JFileChooser
javax.swing.JFileChooser.AccessibleJFileChooser#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.JFormattedTextField#setFocusLostBehavior(int)->void:::Sets the behavior when focus is lost
javax.swing.JFormattedTextField#getFocusLostBehavior()->int:::Returns the behavior when focus is lost
javax.swing.JFormattedTextField#setFormatterFactory(AbstractFormatterFactory)->void:::Sets the AbstractFormatterFactory
javax.swing.JFormattedTextField#getFormatterFactory()->AbstractFormatterFactory:::Returns the current AbstractFormatterFactory.
javax.swing.JFormattedTextField#setFormatter(AbstractFormatter)->void:::Sets the current AbstractFormatter
javax.swing.JFormattedTextField#getFormatter()->AbstractFormatter:::Returns the AbstractFormatter that is used to format and parse the current value.
javax.swing.JFormattedTextField#setValue(Object)->void:::Sets the value that will be formatted by an AbstractFormatter obtained from the current AbstractFormatterFactory
javax.swing.JFormattedTextField#getValue()->Object:::Returns the last valid value
javax.swing.JFormattedTextField#commitEdit()->void:::Forces the current value to be taken from the AbstractFormatter and set as the current value
javax.swing.JFormattedTextField#isEditValid()->boolean:::Returns true if the current value being edited is valid
javax.swing.JFormattedTextField#invalidEdit()->void:::Invoked when the user inputs an invalid value
javax.swing.JFormattedTextField#processInputMethodEvent(InputMethodEvent)->void:::Processes any input method events, such as InputMethodEvent.INPUT_METHOD_TEXT_CHANGED or InputMethodEvent.CARET_POSITION_CHANGED.
javax.swing.JFormattedTextField#processFocusEvent(FocusEvent)->void:::Processes any focus events, such as FocusEvent.FOCUS_GAINED or FocusEvent.FOCUS_LOST.
javax.swing.JFormattedTextField#getActions()->Action[]:::Fetches the command list for the editor
javax.swing.JFormattedTextField#getUIClassID()->String:::Gets the class ID for a UI.
javax.swing.JFormattedTextField#setDocument(Document)->void:::Associates the editor with a text document
javax.swing.JFormattedTextField.AbstractFormatterFactory#getFormatter(JFormattedTextField)->AbstractFormatter:::Returns an AbstractFormatter that can handle formatting of the passed in JFormattedTextField.
javax.swing.JFormattedTextField.AbstractFormatter#install(JFormattedTextField)->void:::Installs the AbstractFormatter onto a particular JFormattedTextField
javax.swing.JFormattedTextField.AbstractFormatter#uninstall()->void:::Uninstalls any state the AbstractFormatter may have installed on the JFormattedTextField
javax.swing.JFormattedTextField.AbstractFormatter#stringToValue(String)->Object:::Parses text returning an arbitrary Object
javax.swing.JFormattedTextField.AbstractFormatter#valueToString(Object)->String:::Returns the string value to display for value.
javax.swing.JFormattedTextField.AbstractFormatter#getFormattedTextField()->JFormattedTextField:::Returns the current JFormattedTextField the AbstractFormatter is installed on.
javax.swing.JFormattedTextField.AbstractFormatter#invalidEdit()->void:::This should be invoked when the user types an invalid character
javax.swing.JFormattedTextField.AbstractFormatter#setEditValid(boolean)->void:::Invoke this to update the editValid property of the JFormattedTextField
javax.swing.JFormattedTextField.AbstractFormatter#getActions()->Action[]:::Subclass and override if you wish to provide a custom set of Actions
javax.swing.JFormattedTextField.AbstractFormatter#getDocumentFilter()->DocumentFilter:::Subclass and override if you wish to provide a DocumentFilter to restrict what can be input
javax.swing.JFormattedTextField.AbstractFormatter#getNavigationFilter()->NavigationFilter:::Subclass and override if you wish to provide a filter to restrict where the user can navigate to
javax.swing.JFormattedTextField.AbstractFormatter#clone()->Object:::Clones the AbstractFormatter
javax.swing.JFormattedTextField.CommitAction#actionPerformed(ActionEvent)->void::: commit action action performed
javax.swing.JFormattedTextField.CommitAction#isEnabled()->boolean::: commit action is enabled
javax.swing.JFrame#frameInit()->void:::Called by the constructors to init the JFrame properly.
javax.swing.JFrame#createRootPane()->JRootPane:::Called by the constructor methods to create the default rootPane.
javax.swing.JFrame#processWindowEvent(WindowEvent)->void:::Processes window events occurring on this component
javax.swing.JFrame#setDefaultCloseOperation(int)->void:::Sets the operation that will happen by default when the user initiates a "close" on this frame
javax.swing.JFrame#getDefaultCloseOperation()->int:::Returns the operation that occurs when the user initiates a "close" on this frame.
javax.swing.JFrame#setTransferHandler(TransferHandler)->void:::Sets the transferHandler property, which is a mechanism to support transfer of data into this component
javax.swing.JFrame#getTransferHandler()->TransferHandler:::Gets the transferHandler property.
javax.swing.JFrame#update(Graphics)->void:::Just calls paint(g)
javax.swing.JFrame#setJMenuBar(JMenuBar)->void:::Sets the menubar for this frame.
javax.swing.JFrame#getJMenuBar()->JMenuBar:::Returns the menubar set on this frame.
javax.swing.JFrame#isRootPaneCheckingEnabled()->boolean:::Returns whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JFrame#setRootPaneCheckingEnabled(boolean)->void:::Sets whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JFrame#addImpl(Component, Object, int)->void:::Adds the specified child Component
javax.swing.JFrame#remove(Component)->void:::Removes the specified component from the container
javax.swing.JFrame#setLayout(LayoutManager)->void:::Sets the LayoutManager
javax.swing.JFrame#getRootPane()->JRootPane:::Returns the rootPane object for this frame.
javax.swing.JFrame#setRootPane(JRootPane)->void:::Sets the rootPane property
javax.swing.JFrame#setIconImage(Image)->void::: frame set icon image
javax.swing.JFrame#getContentPane()->Container:::Returns the contentPane object for this frame.
javax.swing.JFrame#setContentPane(Container)->void:::Sets the contentPane property
javax.swing.JFrame#getLayeredPane()->JLayeredPane:::Returns the layeredPane object for this frame.
javax.swing.JFrame#setLayeredPane(JLayeredPane)->void:::Sets the layeredPane property
javax.swing.JFrame#getGlassPane()->Component:::Returns the glassPane object for this frame.
javax.swing.JFrame#setGlassPane(Component)->void:::Sets the glassPane property
javax.swing.JFrame#getGraphics()->Graphics::: frame get graphics
javax.swing.JFrame#repaint(long, int, int, int, int)->void:::Repaints the specified rectangle of this component within time milliseconds
javax.swing.JFrame#setDefaultLookAndFeelDecorated(boolean)->void:::Provides a hint as to whether or not newly created JFrames should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel
javax.swing.JFrame#isDefaultLookAndFeelDecorated()->boolean:::Returns true if newly created JFrames should have their Window decorations provided by the current look and feel
javax.swing.JFrame#paramString()->String:::Returns a string representation of this JFrame
javax.swing.JFrame#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JFrame
javax.swing.JFrame.AccessibleJFrame#getAccessibleName()->String:::Get the accessible name of this object.
javax.swing.JFrame.AccessibleJFrame#getAccessibleStateSet()->AccessibleStateSet:::Get the state of this object.
javax.swing.JInternalFrame#createRootPane()->JRootPane:::Called by the constructor to set up the JRootPane.
javax.swing.JInternalFrame#getUI()->InternalFrameUI:::Returns the look-and-feel object that renders this component.
javax.swing.JInternalFrame#setUI(InternalFrameUI)->void:::Sets the UI delegate for this JInternalFrame.
javax.swing.JInternalFrame#updateUI()->void:::Notification from the UIManager that the look and feel has changed
javax.swing.JInternalFrame#updateUIWhenHidden()->void::: internal frame update when hidden
javax.swing.JInternalFrame#getUIClassID()->String:::Returns the name of the look-and-feel class that renders this component.
javax.swing.JInternalFrame#isRootPaneCheckingEnabled()->boolean:::Returns whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JInternalFrame#setRootPaneCheckingEnabled(boolean)->void:::Sets whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JInternalFrame#addImpl(Component, Object, int)->void:::Adds the specified child Component
javax.swing.JInternalFrame#remove(Component)->void:::Removes the specified component from the container
javax.swing.JInternalFrame#setLayout(LayoutManager)->void:::Ensures that, by default, the layout of this component cannot be set
javax.swing.JInternalFrame#getMenuBar()->JMenuBar:::Returns the current JMenuBar for this JInternalFrame, or null if no menu bar has been set.
javax.swing.JInternalFrame#getJMenuBar()->JMenuBar:::Returns the current JMenuBar for this JInternalFrame, or null if no menu bar has been set.
javax.swing.JInternalFrame#setMenuBar(JMenuBar)->void:::Sets the menuBar property for this JInternalFrame.
javax.swing.JInternalFrame#setJMenuBar(JMenuBar)->void:::Sets the menuBar property for this JInternalFrame.
javax.swing.JInternalFrame#getContentPane()->Container:::Returns the content pane for this internal frame.
javax.swing.JInternalFrame#setContentPane(Container)->void:::Sets this JInternalFrame's contentPane property.
javax.swing.JInternalFrame#getLayeredPane()->JLayeredPane:::Returns the layered pane for this internal frame.
javax.swing.JInternalFrame#setLayeredPane(JLayeredPane)->void:::Sets this JInternalFrame's layeredPane property.
javax.swing.JInternalFrame#getGlassPane()->Component:::Returns the glass pane for this internal frame.
javax.swing.JInternalFrame#setGlassPane(Component)->void:::Sets this JInternalFrame's glassPane property.
javax.swing.JInternalFrame#getRootPane()->JRootPane:::Returns the rootPane object for this internal frame.
javax.swing.JInternalFrame#setRootPane(JRootPane)->void:::Sets the rootPane property for this JInternalFrame
javax.swing.JInternalFrame#setClosable(boolean)->void:::Sets whether this JInternalFrame can be closed by some user action.
javax.swing.JInternalFrame#isClosable()->boolean:::Returns whether this JInternalFrame can be closed by some user action.
javax.swing.JInternalFrame#isClosed()->boolean:::Returns whether this JInternalFrame is currently closed.
javax.swing.JInternalFrame#setClosed(boolean)->void:::Closes this internal frame if the argument is true
javax.swing.JInternalFrame#setResizable(boolean)->void:::Sets whether the JInternalFrame can be resized by some user action.
javax.swing.JInternalFrame#isResizable()->boolean:::Returns whether the JInternalFrame can be resized by some user action.
javax.swing.JInternalFrame#setIconifiable(boolean)->void:::Sets the iconable property, which must be true for the user to be able to make the JInternalFrame an icon
javax.swing.JInternalFrame#isIconifiable()->boolean:::Gets the iconable property, which by default is false.
javax.swing.JInternalFrame#isIcon()->boolean:::Returns whether the JInternalFrame is currently iconified.
javax.swing.JInternalFrame#setIcon(boolean)->void:::Iconifies or de-iconifies this internal frame, if the look and feel supports iconification
javax.swing.JInternalFrame#setMaximizable(boolean)->void:::Sets the maximizable property, which determines whether the JInternalFrame can be maximized by some user action
javax.swing.JInternalFrame#isMaximizable()->boolean:::Gets the value of the maximizable property.
javax.swing.JInternalFrame#isMaximum()->boolean:::Returns whether the JInternalFrame is currently maximized.
javax.swing.JInternalFrame#setMaximum(boolean)->void:::Maximizes and restores this internal frame
javax.swing.JInternalFrame#getTitle()->String:::Returns the title of the JInternalFrame.
javax.swing.JInternalFrame#setTitle(String)->void:::Sets the JInternalFrame title
javax.swing.JInternalFrame#setSelected(boolean)->void:::Selects or deselects the internal frame if it's showing
javax.swing.JInternalFrame#isSelected()->boolean:::Returns whether the JInternalFrame is the currently "selected" or active frame.
javax.swing.JInternalFrame#setFrameIcon(Icon)->void:::Sets an image to be displayed in the titlebar of this internal frame (usually in the top-left corner)
javax.swing.JInternalFrame#getFrameIcon()->Icon:::Returns the image displayed in the title bar of this internal frame (usually in the top-left corner).
javax.swing.JInternalFrame#moveToFront()->void:::Convenience method that moves this component to position 0 if its parent is a JLayeredPane.
javax.swing.JInternalFrame#moveToBack()->void:::Convenience method that moves this component to position -1 if its parent is a JLayeredPane.
javax.swing.JInternalFrame#getLastCursor()->Cursor:::Returns the last Cursor that was set by the setCursor method that is not a resizable Cursor.
javax.swing.JInternalFrame#setCursor(Cursor)->void::: internal frame set cursor
javax.swing.JInternalFrame#setLayer(Integer)->void:::Convenience method for setting the layer attribute of this component.
javax.swing.JInternalFrame#setLayer(int)->void:::Convenience method for setting the layer attribute of this component
javax.swing.JInternalFrame#getLayer()->int:::Convenience method for getting the layer attribute of this component.
javax.swing.JInternalFrame#getDesktopPane()->JDesktopPane:::Convenience method that searches the ancestor hierarchy for a JDesktop instance
javax.swing.JInternalFrame#setDesktopIcon(JDesktopIcon)->void:::Sets the JDesktopIcon associated with this JInternalFrame.
javax.swing.JInternalFrame#getDesktopIcon()->JDesktopIcon:::Returns the JDesktopIcon used when this JInternalFrame is iconified.
javax.swing.JInternalFrame#getNormalBounds()->Rectangle:::If the JInternalFrame is not in maximized state, returns getBounds(); otherwise, returns the bounds that the JInternalFrame would be restored to.
javax.swing.JInternalFrame#setNormalBounds(Rectangle)->void:::Sets the normal bounds for this internal frame, the bounds that this internal frame would be restored to from its maximized state
javax.swing.JInternalFrame#getFocusOwner()->Component:::If this JInternalFrame is active, returns the child that has focus
javax.swing.JInternalFrame#getMostRecentFocusOwner()->Component:::Returns the child component of this JInternalFrame that will receive the focus when this JInternalFrame is selected
javax.swing.JInternalFrame#restoreSubcomponentFocus()->void:::Requests the internal frame to restore focus to the last subcomponent that had focus
javax.swing.JInternalFrame#reshape(int, int, int, int)->void:::Moves and resizes this component
javax.swing.JInternalFrame#addInternalFrameListener(InternalFrameListener)->void:::Adds the specified listener to receive internal frame events from this internal frame.
javax.swing.JInternalFrame#removeInternalFrameListener(InternalFrameListener)->void:::Removes the specified internal frame listener so that it no longer receives internal frame events from this internal frame.
javax.swing.JInternalFrame#getInternalFrameListeners()->InternalFrameListener[]:::Returns an array of all the InternalFrameListeners added to this JInternalFrame with addInternalFrameListener.
javax.swing.JInternalFrame#fireInternalFrameEvent(int)->void:::Fires an internal frame event.
javax.swing.JInternalFrame#doDefaultCloseAction()->void:::Fires an INTERNAL_FRAME_CLOSING event and then performs the action specified by the internal frame's default close operation
javax.swing.JInternalFrame#setDefaultCloseOperation(int)->void:::Sets the operation that will happen by default when the user initiates a "close" on this internal frame
javax.swing.JInternalFrame#getDefaultCloseOperation()->int:::Returns the default operation that occurs when the user initiates a "close" on this internal frame.
javax.swing.JInternalFrame#pack()->void:::Causes subcomponents of this JInternalFrame to be laid out at their preferred size
javax.swing.JInternalFrame#show()->void:::If the internal frame is not visible, brings the internal frame to the front, makes it visible, and attempts to select it
javax.swing.JInternalFrame#hide()->void::: internal frame hide
javax.swing.JInternalFrame#dispose()->void:::Makes this internal frame invisible, unselected, and closed
javax.swing.JInternalFrame#toFront()->void:::Brings this internal frame to the front
javax.swing.JInternalFrame#toBack()->void:::Sends this internal frame to the back
javax.swing.JInternalFrame#setFocusCycleRoot(boolean)->void:::Does nothing because JInternalFrames must always be roots of a focus traversal cycle.
javax.swing.JInternalFrame#isFocusCycleRoot()->boolean:::Always returns true because all JInternalFrames must be roots of a focus traversal cycle.
javax.swing.JInternalFrame#getFocusCycleRootAncestor()->Container:::Always returns null because JInternalFrames must always be roots of a focus traversal cycle.
javax.swing.JInternalFrame#getWarningString()->String:::Gets the warning string that is displayed with this internal frame
javax.swing.JInternalFrame#compWriteObjectNotify()->void::: internal frame comp write object notify
javax.swing.JInternalFrame#paramString()->String:::Returns a string representation of this JInternalFrame
javax.swing.JInternalFrame#paintComponent(Graphics)->void:::Overridden to allow optimized painting when the internal frame is being dragged.
javax.swing.JInternalFrame#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JInternalFrame
javax.swing.JInternalFrame.AccessibleJInternalFrame#getAccessibleName()->String:::Get the accessible name of this object.
javax.swing.JInternalFrame.AccessibleJInternalFrame#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JInternalFrame.AccessibleJInternalFrame#getAccessibleValue()->AccessibleValue:::Gets the AccessibleValue associated with this object
javax.swing.JInternalFrame.AccessibleJInternalFrame#getCurrentAccessibleValue()->Number:::Get the value of this object as a Number.
javax.swing.JInternalFrame.AccessibleJInternalFrame#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
javax.swing.JInternalFrame.AccessibleJInternalFrame#getMinimumAccessibleValue()->Number:::Get the minimum value of this object as a Number.
javax.swing.JInternalFrame.AccessibleJInternalFrame#getMaximumAccessibleValue()->Number:::Get the maximum value of this object as a Number.
javax.swing.JInternalFrame.JDesktopIcon#getUI()->DesktopIconUI:::Returns the look-and-feel object that renders this component.
javax.swing.JInternalFrame.JDesktopIcon#setUI(DesktopIconUI)->void:::Sets the look-and-feel object that renders this component.
javax.swing.JInternalFrame.JDesktopIcon#getInternalFrame()->JInternalFrame:::Returns the JInternalFrame that this DesktopIcon is associated with.
javax.swing.JInternalFrame.JDesktopIcon#setInternalFrame(JInternalFrame)->void:::Sets the JInternalFrame with which this DesktopIcon is associated.
javax.swing.JInternalFrame.JDesktopIcon#getDesktopPane()->JDesktopPane:::Convenience method to ask the icon for the Desktop object it belongs to.
javax.swing.JInternalFrame.JDesktopIcon#updateUI()->void:::Notification from the UIManager that the look and feel has changed
javax.swing.JInternalFrame.JDesktopIcon#updateUIWhenHidden()->void::: desktop icon update when hidden
javax.swing.JInternalFrame.JDesktopIcon#getUIClassID()->String:::Returns the name of the look-and-feel class that renders this component.
javax.swing.JInternalFrame.JDesktopIcon#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JDesktopIcon
javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getAccessibleValue()->AccessibleValue:::Gets the AccessibleValue associated with this object
javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getCurrentAccessibleValue()->Number:::Gets the value of this object as a Number.
javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#setCurrentAccessibleValue(Number)->boolean:::Sets the value of this object as a Number.
javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getMinimumAccessibleValue()->Number:::Gets the minimum value of this object as a Number.
javax.swing.JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon#getMaximumAccessibleValue()->Number:::Gets the maximum value of this object as a Number.
javax.swing.JLabel#getUI()->LabelUI:::Returns the L&amp;F object that renders this component.
javax.swing.JLabel#setUI(LabelUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JLabel#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JLabel#getUIClassID()->String:::Returns a string that specifies the name of the l&amp;f class that renders this component.
javax.swing.JLabel#getText()->String:::Returns the text string that the label displays.
javax.swing.JLabel#setText(String)->void:::Defines the single line of text this component will display
javax.swing.JLabel#getIcon()->Icon:::Returns the graphic image (glyph, icon) that the label displays.
javax.swing.JLabel#setIcon(Icon)->void:::Defines the icon this component will display
javax.swing.JLabel#getDisabledIcon()->Icon:::Returns the icon used by the label when it's disabled
javax.swing.JLabel#setDisabledIcon(Icon)->void:::Set the icon to be displayed if this JLabel is "disabled" (JLabel.setEnabled(false))
javax.swing.JLabel#setDisplayedMnemonic(int)->void:::Specify a keycode that indicates a mnemonic key
javax.swing.JLabel#setDisplayedMnemonic(char)->void:::Specifies the displayedMnemonic as a char value.
javax.swing.JLabel#getDisplayedMnemonic()->int:::Return the keycode that indicates a mnemonic key
javax.swing.JLabel#setDisplayedMnemonicIndex(int)->void:::Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic
javax.swing.JLabel#getDisplayedMnemonicIndex()->int:::Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.
javax.swing.JLabel#checkHorizontalKey(int, String)->int:::Verify that key is a legal value for the horizontalAlignment properties.
javax.swing.JLabel#checkVerticalKey(int, String)->int:::Verify that key is a legal value for the verticalAlignment or verticalTextPosition properties.
javax.swing.JLabel#getIconTextGap()->int:::Returns the amount of space between the text and the icon displayed in this label.
javax.swing.JLabel#setIconTextGap(int)->void:::If both the icon and text properties are set, this property defines the space between them
javax.swing.JLabel#getVerticalAlignment()->int:::Returns the alignment of the label's contents along the Y axis.
javax.swing.JLabel#setVerticalAlignment(int)->void:::Sets the alignment of the label's contents along the Y axis
javax.swing.JLabel#getHorizontalAlignment()->int:::Returns the alignment of the label's contents along the X axis.
javax.swing.JLabel#setHorizontalAlignment(int)->void:::Sets the alignment of the label's contents along the X axis
javax.swing.JLabel#getVerticalTextPosition()->int:::Returns the vertical position of the label's text, relative to its image.
javax.swing.JLabel#setVerticalTextPosition(int)->void:::Sets the vertical position of the label's text, relative to its image
javax.swing.JLabel#getHorizontalTextPosition()->int:::Returns the horizontal position of the label's text, relative to its image.
javax.swing.JLabel#setHorizontalTextPosition(int)->void:::Sets the horizontal position of the label's text, relative to its image.
javax.swing.JLabel#imageUpdate(Image, int, int, int, int, int)->boolean:::This is overridden to return false if the current Icon's Image is not equal to the passed in Image img.
javax.swing.JLabel#paramString()->String:::Returns a string representation of this JLabel
javax.swing.JLabel#getLabelFor()->Component:::Get the component this is labelling.
javax.swing.JLabel#setLabelFor(Component)->void:::Set the component this is labelling
javax.swing.JLabel#getAccessibleContext()->AccessibleContext:::Get the AccessibleContext of this object
javax.swing.JLabel.AccessibleJLabel#getAccessibleName()->String:::Get the accessible name of this object.
javax.swing.JLabel.AccessibleJLabel#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JLabel.AccessibleJLabel#getAccessibleIcon()->AccessibleIcon[]:::Get the AccessibleIcons associated with this object if one or more exist
javax.swing.JLabel.AccessibleJLabel#getAccessibleRelationSet()->AccessibleRelationSet:::Get the AccessibleRelationSet associated with this object if one exists
javax.swing.JLabel.AccessibleJLabel#getAccessibleText()->AccessibleText::: accessible label get accessible text
javax.swing.JLabel.AccessibleJLabel#getIndexAtPoint(Point)->int:::Given a point in local coordinates, return the zero-based index of the character under that Point
javax.swing.JLabel.AccessibleJLabel#getCharacterBounds(int)->Rectangle:::Returns the bounding box of the character at the given index in the string
javax.swing.JLabel.AccessibleJLabel#getCharCount()->int:::Return the number of characters (valid indicies)
javax.swing.JLabel.AccessibleJLabel#getCaretPosition()->int:::Return the zero-based offset of the caret
javax.swing.JLabel.AccessibleJLabel#getAtIndex(int, int)->String:::Returns the String at a given index.
javax.swing.JLabel.AccessibleJLabel#getAfterIndex(int, int)->String:::Returns the String after a given index.
javax.swing.JLabel.AccessibleJLabel#getBeforeIndex(int, int)->String:::Returns the String before a given index.
javax.swing.JLabel.AccessibleJLabel#getCharacterAttribute(int)->AttributeSet:::Return the AttributeSet for a given character at a given index
javax.swing.JLabel.AccessibleJLabel#getSelectionStart()->int:::Returns the start offset within the selected text
javax.swing.JLabel.AccessibleJLabel#getSelectionEnd()->int:::Returns the end offset within the selected text
javax.swing.JLabel.AccessibleJLabel#getSelectedText()->String:::Returns the portion of the text that is selected.
javax.swing.JLabel.AccessibleJLabel#getAccessibleExtendedComponent()->AccessibleExtendedComponent:::Returns the AccessibleExtendedComponent
javax.swing.JLabel.AccessibleJLabel#getToolTipText()->String:::Returns the tool tip text
javax.swing.JLabel.AccessibleJLabel#getTitledBorderText()->String:::Returns the titled border text
javax.swing.JLabel.AccessibleJLabel#getAccessibleKeyBinding()->AccessibleKeyBinding:::Returns key bindings associated with this object
javax.swing.JLabel.AccessibleJLabel.LabelKeyBinding#getAccessibleKeyBindingCount()->int:::Returns the number of key bindings for this object
javax.swing.JLabel.AccessibleJLabel.LabelKeyBinding#getAccessibleKeyBinding(int)->java.lang.Object:::Returns a key binding for this object
javax.swing.JLayer#getView()->V:::Returns the JLayer's view component or null
javax.swing.JLayer#setView(V)->void:::Sets the JLayer's view component, which can be null
javax.swing.JLayer#setUI(LayerUI)->void:::Sets the javax.swing.plaf.LayerUI which will perform painting and receive input events for this JLayer.
javax.swing.JLayer#getUI()->LayerUI:::Returns the javax.swing.plaf.LayerUI for this JLayer.
javax.swing.JLayer#getGlassPane()->JPanel:::Returns the JLayer's glassPane component or null
javax.swing.JLayer#setGlassPane(JPanel)->void:::Sets the JLayer's glassPane component, which can be null
javax.swing.JLayer#createGlassPane()->JPanel:::Called by the constructor methods to create a default glassPane
javax.swing.JLayer#setLayout(LayoutManager)->void:::Sets the layout manager for this container
javax.swing.JLayer#setBorder(Border)->void:::Delegates its functionality to the getView().setBorder(Border) method, if the view component is an instance of javax.swing.JComponent, otherwise this method is a no-op.
javax.swing.JLayer#getBorder()->Border:::Delegates its functionality to the getView().getBorder() method, if the view component is an instance of javax.swing.JComponent, otherwise returns null.
javax.swing.JLayer#addImpl(Component, Object, int)->void:::This method is not supported by JLayer and always throws UnsupportedOperationException
javax.swing.JLayer#remove(Component)->void::: layer remove
javax.swing.JLayer#removeAll()->void::: layer remove all
javax.swing.JLayer#isPaintingOrigin()->boolean:::Always returns true to cause painting to originate from JLayer, or one of its ancestors.
javax.swing.JLayer#paintImmediately(int, int, int, int)->void:::Delegates its functionality to the javax.swing.plaf.LayerUI#paintImmediately(int, int, int, int, JLayer) method, if LayerUI is set.
javax.swing.JLayer#imageUpdate(Image, int, int, int, int, int)->boolean:::Delegates its functionality to the javax.swing.plaf.LayerUI#imageUpdate(java.awt.Image, int, int, int, int, int, JLayer) method, if the LayerUI is set.
javax.swing.JLayer#paint(Graphics)->void:::Delegates all painting to the javax.swing.plaf.LayerUI object.
javax.swing.JLayer#paintComponent(Graphics)->void:::This method is empty, because all painting is done by #paint(Graphics) and javax.swing.plaf.LayerUI#update(Graphics, JComponent) methods
javax.swing.JLayer#isOptimizedDrawingEnabled()->boolean:::The JLayer overrides the default implementation of this method (in JComponent) to return false
javax.swing.JLayer#propertyChange(PropertyChangeEvent)->void::: layer property change
javax.swing.JLayer#setLayerEventMask(long)->void:::Enables the events from JLayer and all its descendants defined by the specified event mask parameter to be delivered to the LayerUI#eventDispatched(AWTEvent, JLayer) method
javax.swing.JLayer#getLayerEventMask()->long:::Returns the bitmap of event mask to receive by this JLayer and its LayerUI
javax.swing.JLayer#updateUI()->void:::Delegates its functionality to the javax.swing.plaf.LayerUI#updateUI(JLayer) method, if LayerUI is set.
javax.swing.JLayer#getPreferredScrollableViewportSize()->Dimension:::Returns the preferred size of the viewport for a view component
javax.swing.JLayer#getScrollableBlockIncrement(Rectangle, int, int)->int:::Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one block of rows or columns, depending on the value of orientation
javax.swing.JLayer#getScrollableTracksViewportHeight()->boolean:::Returns false to indicate that the height of the viewport does not determine the height of the layer, unless the preferred height of the layer is smaller than the height of the viewport
javax.swing.JLayer#getScrollableTracksViewportWidth()->boolean:::Returns false to indicate that the width of the viewport does not determine the width of the layer, unless the preferred width of the layer is smaller than the width of the viewport
javax.swing.JLayer#getScrollableUnitIncrement(Rectangle, int, int)->int:::Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one new row or column, depending on the value of orientation
javax.swing.JLayer#addNotify()->void::: layer add notify
javax.swing.JLayer#removeNotify()->void::: layer remove notify
javax.swing.JLayer#doLayout()->void:::Delegates its functionality to the javax.swing.plaf.LayerUI#doLayout(JLayer) method, if LayerUI is set.
javax.swing.JLayer#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JLayer.
javax.swing.JLayeredPane#addImpl(Component, Object, int)->void::: layered pane add impl
javax.swing.JLayeredPane#remove(int)->void:::Remove the indexed component from this pane
javax.swing.JLayeredPane#removeAll()->void:::Removes all the components from this container.
javax.swing.JLayeredPane#isOptimizedDrawingEnabled()->boolean:::Returns false if components in the pane can overlap, which makes optimized drawing impossible
javax.swing.JLayeredPane#putLayer(JComponent, int)->void:::Sets the layer property on a JComponent
javax.swing.JLayeredPane#getLayer(JComponent)->int:::Gets the layer property for a JComponent, it does not cause any side effects like setLayer()
javax.swing.JLayeredPane#getLayeredPaneAbove(Component)->JLayeredPane:::Convenience method that returns the first JLayeredPane which contains the specified component
javax.swing.JLayeredPane#setLayer(Component, int)->void:::Sets the layer attribute on the specified component, making it the bottommost component in that layer
javax.swing.JLayeredPane#setLayer(Component, int, int)->void:::Sets the layer attribute for the specified component and also sets its position within that layer.
javax.swing.JLayeredPane#getLayer(Component)->int:::Returns the layer attribute for the specified Component.
javax.swing.JLayeredPane#getIndexOf(Component)->int:::Returns the index of the specified Component
javax.swing.JLayeredPane#moveToFront(Component)->void:::Moves the component to the top of the components in its current layer (position 0).
javax.swing.JLayeredPane#moveToBack(Component)->void:::Moves the component to the bottom of the components in its current layer (position -1).
javax.swing.JLayeredPane#setPosition(Component, int)->void:::Moves the component to position within its current layer, where 0 is the topmost position within the layer and -1 is the bottommost position
javax.swing.JLayeredPane#getPosition(Component)->int:::Get the relative position of the component within its layer.
javax.swing.JLayeredPane#highestLayer()->int:::Returns the highest layer value from all current children
javax.swing.JLayeredPane#lowestLayer()->int:::Returns the lowest layer value from all current children
javax.swing.JLayeredPane#getComponentCountInLayer(int)->int:::Returns the number of children currently in the specified layer.
javax.swing.JLayeredPane#getComponentsInLayer(int)->Component[]:::Returns an array of the components in the specified layer.
javax.swing.JLayeredPane#paint(Graphics)->void:::Paints this JLayeredPane within the specified graphics context.
javax.swing.JLayeredPane#getComponentToLayer()->Hashtable:::Returns the hashtable that maps components to layers.
javax.swing.JLayeredPane#getObjectForLayer(int)->Integer:::Returns the Integer object associated with a specified layer.
javax.swing.JLayeredPane#insertIndexForLayer(int, int)->int:::Primitive method that determines the proper location to insert a new child based on layer and position requests.
javax.swing.JLayeredPane#paramString()->String:::Returns a string representation of this JLayeredPane
javax.swing.JLayeredPane#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JLayeredPane
javax.swing.JLayeredPane.AccessibleJLayeredPane#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JList.DropLocation#getIndex()->int:::Returns the index where dropped data should be placed in the list
javax.swing.JList.DropLocation#isInsert()->boolean:::Returns whether or not this location represents an insert location.
javax.swing.JList.DropLocation#toString()->String:::Returns a string representation of this drop location
javax.swing.JList#getUI()->ListUI:::Returns the ListUI, the look and feel object that renders this component.
javax.swing.JList#setUI(ListUI)->void:::Sets the ListUI, the look and feel object that renders this component.
javax.swing.JList#updateUI()->void:::Resets the ListUI property by setting it to the value provided by the current look and feel
javax.swing.JList#getUIClassID()->String:::Returns "ListUI", the UIDefaults key used to look up the name of the javax.swing.plaf.ListUI class that defines the look and feel for this component.
javax.swing.JList#getPrototypeCellValue()->E:::Returns the "prototypical" cell value -- a value used to calculate a fixed width and height for cells
javax.swing.JList#setPrototypeCellValue(E)->void:::Sets the prototypeCellValue property, and then (if the new value is non-null), computes the fixedCellWidth and fixedCellHeight properties by requesting the cell renderer component for the given value (and index 0) from the cell renderer, and using that component's preferred size
javax.swing.JList#getFixedCellWidth()->int:::Returns the value of the fixedCellWidth property.
javax.swing.JList#setFixedCellWidth(int)->void:::Sets a fixed value to be used for the width of every cell in the list
javax.swing.JList#getFixedCellHeight()->int:::Returns the value of the fixedCellHeight property.
javax.swing.JList#setFixedCellHeight(int)->void:::Sets a fixed value to be used for the height of every cell in the list
javax.swing.JList#getCellRenderer()->ListCellRenderer:::Returns the object responsible for painting list items.
javax.swing.JList#setCellRenderer(ListCellRenderer)->void:::Sets the delegate that is used to paint each cell in the list
javax.swing.JList#getSelectionForeground()->Color:::Returns the color used to draw the foreground of selected items
javax.swing.JList#setSelectionForeground(Color)->void:::Sets the color used to draw the foreground of selected items, which cell renderers can use to render text and graphics
javax.swing.JList#getSelectionBackground()->Color:::Returns the color used to draw the background of selected items
javax.swing.JList#setSelectionBackground(Color)->void:::Sets the color used to draw the background of selected items, which cell renderers can use fill selected cells
javax.swing.JList#getVisibleRowCount()->int:::Returns the value of the visibleRowCount property
javax.swing.JList#setVisibleRowCount(int)->void:::Sets the visibleRowCount property, which has different meanings depending on the layout orientation: For a VERTICAL layout orientation, this sets the preferred number of rows to display without requiring scrolling; for other orientations, it affects the wrapping of cells
javax.swing.JList#getLayoutOrientation()->int:::Returns the layout orientation property for the list: VERTICAL if the layout is a single column of cells, VERTICAL_WRAP if the layout is "newspaper style" with the content flowing vertically then horizontally, or HORIZONTAL_WRAP if the layout is "newspaper style" with the content flowing horizontally then vertically.
javax.swing.JList#setLayoutOrientation(int)->void:::Defines the way list cells are layed out
javax.swing.JList#getFirstVisibleIndex()->int:::Returns the smallest list index that is currently visible
javax.swing.JList#getLastVisibleIndex()->int:::Returns the largest list index that is currently visible
javax.swing.JList#ensureIndexIsVisible(int)->void:::Scrolls the list within an enclosing viewport to make the specified cell completely visible
javax.swing.JList#setDragEnabled(boolean)->void:::Turns on or off automatic drag handling
javax.swing.JList#getDragEnabled()->boolean:::Returns whether or not automatic drag handling is enabled.
javax.swing.JList#setDropMode(DropMode)->void:::Sets the drop mode for this component
javax.swing.JList#getDropMode()->DropMode:::Returns the drop mode for this component.
javax.swing.JList#dropLocationForPoint(Point)->DropLocation:::Calculates a drop location in this component, representing where a drop at the given point should insert data.
javax.swing.JList#setDropLocation(TransferHandler.DropLocation, Object, boolean)->Object:::Called to set or clear the drop location during a DnD operation
javax.swing.JList#getDropLocation()->DropLocation:::Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown
javax.swing.JList#getNextMatch(String, int, Position.Bias)->int:::Returns the next list element whose toString value starts with the given prefix.
javax.swing.JList#getToolTipText(MouseEvent)->String:::Returns the tooltip text to be used for the given event
javax.swing.JList#locationToIndex(Point)->int:::Returns the cell index closest to the given location in the list's coordinate system
javax.swing.JList#indexToLocation(int)->Point:::Returns the origin of the specified item in the list's coordinate system
javax.swing.JList#getCellBounds(int, int)->Rectangle:::Returns the bounding rectangle, in the list's coordinate system, for the range of cells specified by the two indices
javax.swing.JList#getModel()->ListModel:::Returns the data model that holds the list of items displayed by the JList component.
javax.swing.JList#setModel(ListModel)->void:::Sets the model that represents the contents or "value" of the list, notifies property change listeners, and then clears the list's selection
javax.swing.JList#setListData(E[])->void:::Constructs a read-only ListModel from an array of items, and calls setModel with this model
javax.swing.JList#setListData(Vector)->void:::Constructs a read-only ListModel from a Vector and calls setModel with this model
javax.swing.JList#createSelectionModel()->ListSelectionModel:::Returns an instance of DefaultListSelectionModel; called during construction to initialize the list's selection model property.
javax.swing.JList#getSelectionModel()->ListSelectionModel:::Returns the current selection model
javax.swing.JList#fireSelectionValueChanged(int, int, boolean)->void:::Notifies ListSelectionListeners added directly to the list of selection changes made to the selection model
javax.swing.JList#addListSelectionListener(ListSelectionListener)->void:::Adds a listener to the list, to be notified each time a change to the selection occurs; the preferred way of listening for selection state changes
javax.swing.JList#removeListSelectionListener(ListSelectionListener)->void:::Removes a selection listener from the list.
javax.swing.JList#getListSelectionListeners()->ListSelectionListener[]:::Returns an array of all the ListSelectionListeners added to this JList by way of addListSelectionListener.
javax.swing.JList#setSelectionModel(ListSelectionModel)->void:::Sets the selectionModel for the list to a non-null ListSelectionModel implementation
javax.swing.JList#setSelectionMode(int)->void:::Sets the selection mode for the list
javax.swing.JList#getSelectionMode()->int:::Returns the current selection mode for the list
javax.swing.JList#getAnchorSelectionIndex()->int:::Returns the anchor selection index
javax.swing.JList#getLeadSelectionIndex()->int:::Returns the lead selection index
javax.swing.JList#getMinSelectionIndex()->int:::Returns the smallest selected cell index, or -1 if the selection is empty
javax.swing.JList#getMaxSelectionIndex()->int:::Returns the largest selected cell index, or -1 if the selection is empty
javax.swing.JList#isSelectedIndex(int)->boolean:::Returns true if the specified index is selected, else false
javax.swing.JList#isSelectionEmpty()->boolean:::Returns true if nothing is selected, else false
javax.swing.JList#clearSelection()->void:::Clears the selection; after calling this method, isSelectionEmpty will return true
javax.swing.JList#setSelectionInterval(int, int)->void:::Selects the specified interval
javax.swing.JList#addSelectionInterval(int, int)->void:::Sets the selection to be the union of the specified interval with current selection
javax.swing.JList#removeSelectionInterval(int, int)->void:::Sets the selection to be the set difference of the specified interval and the current selection
javax.swing.JList#setValueIsAdjusting(boolean)->void:::Sets the selection model's valueIsAdjusting property
javax.swing.JList#getValueIsAdjusting()->boolean:::Returns the value of the selection model's isAdjusting property
javax.swing.JList#getSelectedIndices()->int[]:::Returns an array of all of the selected indices, in increasing order.
javax.swing.JList#setSelectedIndex(int)->void:::Selects a single cell
javax.swing.JList#setSelectedIndices(int[])->void:::Changes the selection to be the set of indices specified by the given array
javax.swing.JList#getSelectedValues()->Object[]:::Returns an array of all the selected values, in increasing order based on their indices in the list.
javax.swing.JList#getSelectedValuesList()->List:::Returns a list of all the selected items, in increasing order based on their indices in the list.
javax.swing.JList#getSelectedIndex()->int:::Returns the smallest selected cell index; the selection when only a single item is selected in the list
javax.swing.JList#getSelectedValue()->E:::Returns the value for the smallest selected cell index; the selected value when only a single item is selected in the list
javax.swing.JList#setSelectedValue(Object, boolean)->void:::Selects the specified object from the list
javax.swing.JList#getPreferredScrollableViewportSize()->Dimension:::Computes the size of viewport needed to display visibleRowCount rows
javax.swing.JList#getScrollableUnitIncrement(Rectangle, int, int)->int:::Returns the distance to scroll to expose the next or previous row (for vertical scrolling) or column (for horizontal scrolling)
javax.swing.JList#getScrollableBlockIncrement(Rectangle, int, int)->int:::Returns the distance to scroll to expose the next or previous block
javax.swing.JList#getScrollableTracksViewportWidth()->boolean:::Returns true if this JList is displayed in a JViewport and the viewport is wider than the list's preferred width, or if the layout orientation is HORIZONTAL_WRAP and visibleRowCount <= 0; otherwise returns false
javax.swing.JList#getScrollableTracksViewportHeight()->boolean:::Returns true if this JList is displayed in a JViewport and the viewport is taller than the list's preferred height, or if the layout orientation is VERTICAL_WRAP and visibleRowCount <= 0; otherwise returns false
javax.swing.JList#paramString()->String:::Returns a String representation of this JList
javax.swing.JList#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JList
javax.swing.JList.AccessibleJList#propertyChange(PropertyChangeEvent)->void:::Property Change Listener change method
javax.swing.JList.AccessibleJList#valueChanged(ListSelectionEvent)->void:::List Selection Listener value change method
javax.swing.JList.AccessibleJList#intervalAdded(ListDataEvent)->void:::List Data Listener interval added method
javax.swing.JList.AccessibleJList#intervalRemoved(ListDataEvent)->void:::List Data Listener interval removed method
javax.swing.JList.AccessibleJList#contentsChanged(ListDataEvent)->void:::List Data Listener contents changed method
javax.swing.JList.AccessibleJList#getAccessibleStateSet()->AccessibleStateSet:::Get the state set of this object.
javax.swing.JList.AccessibleJList#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JList.AccessibleJList#getAccessibleAt(Point)->Accessible:::Returns the Accessible child contained at the local coordinate Point, if one exists
javax.swing.JList.AccessibleJList#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
javax.swing.JList.AccessibleJList#getAccessibleChild(int)->Accessible:::Return the nth Accessible child of the object.
javax.swing.JList.AccessibleJList#getAccessibleSelection()->AccessibleSelection:::Get the AccessibleSelection associated with this object
javax.swing.JList.AccessibleJList#getAccessibleSelectionCount()->int:::Returns the number of items currently selected
javax.swing.JList.AccessibleJList#getAccessibleSelection(int)->Accessible:::Returns an Accessible representing the specified selected item in the object
javax.swing.JList.AccessibleJList#isAccessibleChildSelected(int)->boolean:::Returns true if the current child of this object is selected.
javax.swing.JList.AccessibleJList#addAccessibleSelection(int)->void:::Adds the specified selected item in the object to the object's selection
javax.swing.JList.AccessibleJList#removeAccessibleSelection(int)->void:::Removes the specified selected item in the object from the object's selection
javax.swing.JList.AccessibleJList#clearAccessibleSelection()->void:::Clears the selection in the object, so that nothing in the object is selected.
javax.swing.JList.AccessibleJList#selectAllAccessibleSelection()->void:::Causes every selected item in the object to be selected if the object supports multiple selections.
javax.swing.JList.AccessibleJList.AccessibleJListChild#getCurrentAccessibleContext()->AccessibleContext::: accessible list child get current accessible context
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleContext()->AccessibleContext:::Get the AccessibleContext for this object
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleName()->String::: accessible list child get accessible name
javax.swing.JList.AccessibleJList.AccessibleJListChild#setAccessibleName(String)->void::: accessible list child set accessible name
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleDescription()->String::: accessible list child get accessible description
javax.swing.JList.AccessibleJList.AccessibleJListChild#setAccessibleDescription(String)->void::: accessible list child set accessible description
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleRole()->AccessibleRole::: accessible list child get accessible role
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleStateSet()->AccessibleStateSet::: accessible list child get accessible state set
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleIndexInParent()->int::: accessible list child get accessible index in parent
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleChildrenCount()->int::: accessible list child get accessible children count
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleChild(int)->Accessible::: accessible list child get accessible child
javax.swing.JList.AccessibleJList.AccessibleJListChild#getLocale()->Locale::: accessible list child get locale
javax.swing.JList.AccessibleJList.AccessibleJListChild#addPropertyChangeListener(PropertyChangeListener)->void::: accessible list child add property change listener
javax.swing.JList.AccessibleJList.AccessibleJListChild#removePropertyChangeListener(PropertyChangeListener)->void::: accessible list child remove property change listener
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleComponent()->AccessibleComponent:::Get the AccessibleComponent associated with this object
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleSelection()->AccessibleSelection::: accessible list child get accessible selection
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleText()->AccessibleText::: accessible list child get accessible text
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleValue()->AccessibleValue::: accessible list child get accessible value
javax.swing.JList.AccessibleJList.AccessibleJListChild#getBackground()->Color::: accessible list child get background
javax.swing.JList.AccessibleJList.AccessibleJListChild#setBackground(Color)->void::: accessible list child set background
javax.swing.JList.AccessibleJList.AccessibleJListChild#getForeground()->Color::: accessible list child get foreground
javax.swing.JList.AccessibleJList.AccessibleJListChild#setForeground(Color)->void::: accessible list child set foreground
javax.swing.JList.AccessibleJList.AccessibleJListChild#getCursor()->Cursor::: accessible list child get cursor
javax.swing.JList.AccessibleJList.AccessibleJListChild#setCursor(Cursor)->void::: accessible list child set cursor
javax.swing.JList.AccessibleJList.AccessibleJListChild#getFont()->Font::: accessible list child get font
javax.swing.JList.AccessibleJList.AccessibleJListChild#setFont(Font)->void::: accessible list child set font
javax.swing.JList.AccessibleJList.AccessibleJListChild#getFontMetrics(Font)->FontMetrics::: accessible list child get font metrics
javax.swing.JList.AccessibleJList.AccessibleJListChild#isEnabled()->boolean::: accessible list child is enabled
javax.swing.JList.AccessibleJList.AccessibleJListChild#setEnabled(boolean)->void::: accessible list child set enabled
javax.swing.JList.AccessibleJList.AccessibleJListChild#isVisible()->boolean::: accessible list child is visible
javax.swing.JList.AccessibleJList.AccessibleJListChild#setVisible(boolean)->void::: accessible list child set visible
javax.swing.JList.AccessibleJList.AccessibleJListChild#isShowing()->boolean::: accessible list child is showing
javax.swing.JList.AccessibleJList.AccessibleJListChild#contains(Point)->boolean::: accessible list child contains
javax.swing.JList.AccessibleJList.AccessibleJListChild#getLocationOnScreen()->Point::: accessible list child get location on screen
javax.swing.JList.AccessibleJList.AccessibleJListChild#getLocation()->Point::: accessible list child get location
javax.swing.JList.AccessibleJList.AccessibleJListChild#setLocation(Point)->void::: accessible list child set location
javax.swing.JList.AccessibleJList.AccessibleJListChild#getBounds()->Rectangle::: accessible list child get bounds
javax.swing.JList.AccessibleJList.AccessibleJListChild#setBounds(Rectangle)->void::: accessible list child set bounds
javax.swing.JList.AccessibleJList.AccessibleJListChild#getSize()->Dimension::: accessible list child get size
javax.swing.JList.AccessibleJList.AccessibleJListChild#setSize(Dimension)->void::: accessible list child set size
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleAt(Point)->Accessible::: accessible list child get accessible at
javax.swing.JList.AccessibleJList.AccessibleJListChild#isFocusTraversable()->boolean::: accessible list child is focus traversable
javax.swing.JList.AccessibleJList.AccessibleJListChild#requestFocus()->void::: accessible list child request focus
javax.swing.JList.AccessibleJList.AccessibleJListChild#addFocusListener(FocusListener)->void::: accessible list child add focus listener
javax.swing.JList.AccessibleJList.AccessibleJListChild#removeFocusListener(FocusListener)->void::: accessible list child remove focus listener
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleIcon()->AccessibleIcon[]:::Returns the icon for the element renderer, as the only item of an array of AccessibleIcons or a null array if the renderer component contains no icons.
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleAction()->AccessibleAction::: accessible list child get accessible action
javax.swing.JList.AccessibleJList.AccessibleJListChild#doAccessibleAction(int)->boolean::: accessible list child do accessible action
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleActionDescription(int)->String::: accessible list child get accessible action description
javax.swing.JList.AccessibleJList.AccessibleJListChild#getAccessibleActionCount()->int::: accessible list child get accessible action count
javax.swing.JMenu#initFocusability()->void:::Overriden to do nothing
javax.swing.JMenu#updateUI()->void:::Resets the UI property with a value from the current look and feel.
javax.swing.JMenu#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JMenu#setModel(ButtonModel)->void:::Sets the data model for the "menu button" -- the label that the user clicks to open or close the menu.
javax.swing.JMenu#isSelected()->boolean:::Returns true if the menu is currently selected (highlighted).
javax.swing.JMenu#setSelected(boolean)->void:::Sets the selection status of the menu.
javax.swing.JMenu#isPopupMenuVisible()->boolean:::Returns true if the menu's popup window is visible.
javax.swing.JMenu#setPopupMenuVisible(boolean)->void:::Sets the visibility of the menu's popup
javax.swing.JMenu#getPopupMenuOrigin()->Point:::Computes the origin for the JMenu's popup menu
javax.swing.JMenu#getDelay()->int:::Returns the suggested delay, in milliseconds, before submenus are popped up or down
javax.swing.JMenu#setDelay(int)->void:::Sets the suggested delay before the menu's PopupMenu is popped up or down
javax.swing.JMenu#setMenuLocation(int, int)->void:::Sets the location of the popup component.
javax.swing.JMenu#add(JMenuItem)->JMenuItem:::Appends a menu item to the end of this menu
javax.swing.JMenu#add(Component)->Component:::Appends a component to the end of this menu
javax.swing.JMenu#add(Component, int)->Component:::Adds the specified component to this container at the given position
javax.swing.JMenu#add(String)->JMenuItem:::Creates a new menu item with the specified text and appends it to the end of this menu.
javax.swing.JMenu#add(Action)->JMenuItem:::Creates a new menu item attached to the specified Action object and appends it to the end of this menu.
javax.swing.JMenu#createActionComponent(Action)->JMenuItem:::Factory method which creates the JMenuItem for Actions added to the JMenu.
javax.swing.JMenu#createActionChangeListener(JMenuItem)->PropertyChangeListener:::Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur.
javax.swing.JMenu#addSeparator()->void:::Appends a new separator to the end of the menu.
javax.swing.JMenu#insert(String, int)->void:::Inserts a new menu item with the specified text at a given position.
javax.swing.JMenu#insert(JMenuItem, int)->JMenuItem:::Inserts the specified JMenuitem at a given position.
javax.swing.JMenu#insert(Action, int)->JMenuItem:::Inserts a new menu item attached to the specified Action object at a given position.
javax.swing.JMenu#insertSeparator(int)->void:::Inserts a separator at the specified position.
javax.swing.JMenu#getItem(int)->JMenuItem:::Returns the JMenuItem at the specified position
javax.swing.JMenu#getItemCount()->int:::Returns the number of items on the menu, including separators
javax.swing.JMenu#isTearOff()->boolean:::Returns true if the menu can be torn off
javax.swing.JMenu#remove(JMenuItem)->void:::Removes the specified menu item from this menu
javax.swing.JMenu#remove(int)->void:::Removes the menu item at the specified index from this menu.
javax.swing.JMenu#remove(Component)->void:::Removes the component c from this menu.
javax.swing.JMenu#removeAll()->void:::Removes all menu items from this menu.
javax.swing.JMenu#getMenuComponentCount()->int:::Returns the number of components on the menu.
javax.swing.JMenu#getMenuComponent(int)->Component:::Returns the component at position n.
javax.swing.JMenu#getMenuComponents()->Component[]:::Returns an array of Components of the menu's subcomponents
javax.swing.JMenu#isTopLevelMenu()->boolean:::Returns true if the menu is a 'top-level menu', that is, if it is the direct child of a menubar.
javax.swing.JMenu#isMenuComponent(Component)->boolean:::Returns true if the specified component exists in the submenu hierarchy.
javax.swing.JMenu#getPopupMenu()->JPopupMenu:::Returns the popupmenu associated with this menu
javax.swing.JMenu#addMenuListener(MenuListener)->void:::Adds a listener for menu events.
javax.swing.JMenu#removeMenuListener(MenuListener)->void:::Removes a listener for menu events.
javax.swing.JMenu#getMenuListeners()->MenuListener[]:::Returns an array of all the MenuListeners added to this JMenu with addMenuListener().
javax.swing.JMenu#fireMenuSelected()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JMenu#fireMenuDeselected()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JMenu#fireMenuCanceled()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JMenu#configureAcceleratorFromAction(Action)->void::: menu configure accelerator from action
javax.swing.JMenu.MenuChangeListener#stateChanged(ChangeEvent)->void::: menu change listener state changed
javax.swing.JMenu#createWinListener(JPopupMenu)->WinListener:::Creates a window-closing listener for the popup.
javax.swing.JMenu.WinListener#windowClosing(WindowEvent)->void:::Deselect the menu when the popup is closed from outside.
javax.swing.JMenu#menuSelectionChanged(boolean)->void:::Messaged when the menubar selection changes to activate or deactivate this menu
javax.swing.JMenu#getSubElements()->MenuElement[]:::Returns an array of MenuElements containing the submenu for this menu component
javax.swing.JMenu#getComponent()->Component:::Returns the java.awt.Component used to paint this MenuElement
javax.swing.JMenu#applyComponentOrientation(ComponentOrientation)->void:::Sets the ComponentOrientation property of this menu and all components contained within it
javax.swing.JMenu#setComponentOrientation(ComponentOrientation)->void::: menu set component orientation
javax.swing.JMenu#setAccelerator(KeyStroke)->void:::setAccelerator is not defined for JMenu
javax.swing.JMenu#processKeyEvent(KeyEvent)->void:::Processes key stroke events such as mnemonics and accelerators.
javax.swing.JMenu#doClick(int)->void:::Programmatically performs a "click"
javax.swing.JMenu#paramString()->String:::Returns a string representation of this JMenu
javax.swing.JMenu#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JMenu
javax.swing.JMenu.AccessibleJMenu#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
javax.swing.JMenu.AccessibleJMenu#getAccessibleChild(int)->Accessible:::Returns the nth Accessible child of the object.
javax.swing.JMenu.AccessibleJMenu#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JMenu.AccessibleJMenu#getAccessibleSelection()->AccessibleSelection:::Get the AccessibleSelection associated with this object
javax.swing.JMenu.AccessibleJMenu#getAccessibleSelectionCount()->int:::Returns 1 if a sub-menu is currently selected in this menu.
javax.swing.JMenu.AccessibleJMenu#getAccessibleSelection(int)->Accessible:::Returns the currently selected sub-menu if one is selected, otherwise null (there can only be one selection, and it can only be a sub-menu, as otherwise menu items don't remain selected).
javax.swing.JMenu.AccessibleJMenu#isAccessibleChildSelected(int)->boolean:::Returns true if the current child of this object is selected (that is, if this child is a popped-up submenu).
javax.swing.JMenu.AccessibleJMenu#addAccessibleSelection(int)->void:::Selects the ith menu in the menu
javax.swing.JMenu.AccessibleJMenu#removeAccessibleSelection(int)->void:::Removes the nth item from the selection
javax.swing.JMenu.AccessibleJMenu#clearAccessibleSelection()->void:::Clears the selection in the object, so that nothing in the object is selected
javax.swing.JMenu.AccessibleJMenu#selectAllAccessibleSelection()->void:::Normally causes every selected item in the object to be selected if the object supports multiple selections
javax.swing.JMenuBar#getUI()->MenuBarUI:::Returns the menubar's current UI.
javax.swing.JMenuBar#setUI(MenuBarUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JMenuBar#updateUI()->void:::Resets the UI property with a value from the current look and feel.
javax.swing.JMenuBar#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JMenuBar#getSelectionModel()->SingleSelectionModel:::Returns the model object that handles single selections.
javax.swing.JMenuBar#setSelectionModel(SingleSelectionModel)->void:::Sets the model object to handle single selections.
javax.swing.JMenuBar#add(JMenu)->JMenu:::Appends the specified menu to the end of the menu bar.
javax.swing.JMenuBar#getMenu(int)->JMenu:::Returns the menu at the specified position in the menu bar.
javax.swing.JMenuBar#getMenuCount()->int:::Returns the number of items in the menu bar.
javax.swing.JMenuBar#setHelpMenu(JMenu)->void:::Sets the help menu that appears when the user selects the "help" option in the menu bar
javax.swing.JMenuBar#getHelpMenu()->JMenu:::Gets the help menu for the menu bar
javax.swing.JMenuBar#getComponentAtIndex(int)->Component:::Returns the component at the specified index.
javax.swing.JMenuBar#getComponentIndex(Component)->int:::Returns the index of the specified component.
javax.swing.JMenuBar#setSelected(Component)->void:::Sets the currently selected component, producing a a change to the selection model.
javax.swing.JMenuBar#isSelected()->boolean:::Returns true if the menu bar currently has a component selected.
javax.swing.JMenuBar#isBorderPainted()->boolean:::Returns true if the menu bars border should be painted.
javax.swing.JMenuBar#setBorderPainted(boolean)->void:::Sets whether the border should be painted.
javax.swing.JMenuBar#paintBorder(Graphics)->void:::Paints the menubar's border if BorderPainted property is true.
javax.swing.JMenuBar#setMargin(Insets)->void:::Sets the margin between the menubar's border and its menus
javax.swing.JMenuBar#getMargin()->Insets:::Returns the margin between the menubar's border and its menus
javax.swing.JMenuBar#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager)->void:::Implemented to be a MenuElement -- does nothing.
javax.swing.JMenuBar#processKeyEvent(KeyEvent, MenuElement[], MenuSelectionManager)->void:::Implemented to be a MenuElement -- does nothing.
javax.swing.JMenuBar#menuSelectionChanged(boolean)->void:::Implemented to be a MenuElement -- does nothing.
javax.swing.JMenuBar#getSubElements()->MenuElement[]:::Implemented to be a MenuElement -- returns the menus in this menu bar
javax.swing.JMenuBar#getComponent()->Component:::Implemented to be a MenuElement
javax.swing.JMenuBar#paramString()->String:::Returns a string representation of this JMenuBar
javax.swing.JMenuBar#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JMenuBar
javax.swing.JMenuBar.AccessibleJMenuBar#getAccessibleStateSet()->AccessibleStateSet:::Get the accessible state set of this object.
javax.swing.JMenuBar.AccessibleJMenuBar#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JMenuBar.AccessibleJMenuBar#getAccessibleSelection()->AccessibleSelection:::Get the AccessibleSelection associated with this object
javax.swing.JMenuBar.AccessibleJMenuBar#getAccessibleSelectionCount()->int:::Returns 1 if a menu is currently selected in this menu bar.
javax.swing.JMenuBar.AccessibleJMenuBar#getAccessibleSelection(int)->Accessible:::Returns the currently selected menu if one is selected, otherwise null.
javax.swing.JMenuBar.AccessibleJMenuBar#isAccessibleChildSelected(int)->boolean:::Returns true if the current child of this object is selected.
javax.swing.JMenuBar.AccessibleJMenuBar#addAccessibleSelection(int)->void:::Selects the nth menu in the menu bar, forcing it to pop up
javax.swing.JMenuBar.AccessibleJMenuBar#removeAccessibleSelection(int)->void:::Removes the nth selected item in the object from the object's selection
javax.swing.JMenuBar.AccessibleJMenuBar#clearAccessibleSelection()->void:::Clears the selection in the object, so that nothing in the object is selected
javax.swing.JMenuBar.AccessibleJMenuBar#selectAllAccessibleSelection()->void:::Normally causes every selected item in the object to be selected if the object supports multiple selections
javax.swing.JMenuBar#processKeyBinding(KeyStroke, KeyEvent, int, boolean)->boolean:::Subclassed to check all the child menus.
javax.swing.JMenuBar#processBindingForKeyStrokeRecursive(MenuElement, KeyStroke, KeyEvent, int, boolean)->boolean::: menu bar process binding for key stroke recursive
javax.swing.JMenuBar#addNotify()->void:::Overrides JComponent.addNotify to register this menu bar with the current keyboard manager.
javax.swing.JMenuBar#removeNotify()->void:::Overrides JComponent.removeNotify to unregister this menu bar with the current keyboard manager.
javax.swing.JMenuItem#setModel(ButtonModel)->void::: menu item set model
javax.swing.JMenuItem#initFocusability()->void:::Inititalizes the focusability of the JMenuItem
javax.swing.JMenuItem#init(String, Icon)->void:::Initializes the menu item with the specified text and icon.
javax.swing.JMenuItem#setUI(MenuItemUI)->void:::Sets the look and feel object that renders this component.
javax.swing.JMenuItem#updateUI()->void:::Resets the UI property with a value from the current look and feel.
javax.swing.JMenuItem#getUIClassID()->String:::Returns the suffix used to construct the name of the L&amp;F class used to render this component.
javax.swing.JMenuItem#setArmed(boolean)->void:::Identifies the menu item as "armed"
javax.swing.JMenuItem#isArmed()->boolean:::Returns whether the menu item is "armed".
javax.swing.JMenuItem#setEnabled(boolean)->void:::Enables or disables the menu item.
javax.swing.JMenuItem#alwaysOnTop()->boolean::: menu item always on top
javax.swing.JMenuItem#setAccelerator(KeyStroke)->void:::Sets the key combination which invokes the menu item's action listeners without navigating the menu hierarchy
javax.swing.JMenuItem#getAccelerator()->KeyStroke:::Returns the KeyStroke which serves as an accelerator for the menu item.
javax.swing.JMenuItem#configurePropertiesFromAction(Action)->void::: menu item configure properties from action
javax.swing.JMenuItem#setIconFromAction(Action)->void::: menu item set icon from action
javax.swing.JMenuItem#largeIconChanged(Action)->void::: menu item large icon changed
javax.swing.JMenuItem#smallIconChanged(Action)->void::: menu item small icon changed
javax.swing.JMenuItem#configureAcceleratorFromAction(Action)->void::: menu item configure accelerator from action
javax.swing.JMenuItem#actionPropertyChanged(Action, String)->void::: menu item action property changed
javax.swing.JMenuItem#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager)->void:::Processes a mouse event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using the MenuSelectionManager's API
javax.swing.JMenuItem#processKeyEvent(KeyEvent, MenuElement[], MenuSelectionManager)->void:::Processes a key event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using MenuSelectionManager's API
javax.swing.JMenuItem#processMenuDragMouseEvent(MenuDragMouseEvent)->void:::Handles mouse drag in a menu.
javax.swing.JMenuItem#processMenuKeyEvent(MenuKeyEvent)->void:::Handles a keystroke in a menu.
javax.swing.JMenuItem#fireMenuDragMouseEntered(MenuDragMouseEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem#fireMenuDragMouseExited(MenuDragMouseEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem#fireMenuDragMouseDragged(MenuDragMouseEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem#fireMenuDragMouseReleased(MenuDragMouseEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem#fireMenuKeyPressed(MenuKeyEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem#fireMenuKeyReleased(MenuKeyEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem#fireMenuKeyTyped(MenuKeyEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JMenuItem#menuSelectionChanged(boolean)->void:::Called by the MenuSelectionManager when the MenuElement is selected or unselected.
javax.swing.JMenuItem#getSubElements()->MenuElement[]:::This method returns an array containing the sub-menu components for this menu component.
javax.swing.JMenuItem#getComponent()->Component:::Returns the java.awt.Component used to paint this object
javax.swing.JMenuItem#addMenuDragMouseListener(MenuDragMouseListener)->void:::Adds a MenuDragMouseListener to the menu item.
javax.swing.JMenuItem#removeMenuDragMouseListener(MenuDragMouseListener)->void:::Removes a MenuDragMouseListener from the menu item.
javax.swing.JMenuItem#getMenuDragMouseListeners()->MenuDragMouseListener[]:::Returns an array of all the MenuDragMouseListeners added to this JMenuItem with addMenuDragMouseListener().
javax.swing.JMenuItem#addMenuKeyListener(MenuKeyListener)->void:::Adds a MenuKeyListener to the menu item.
javax.swing.JMenuItem#removeMenuKeyListener(MenuKeyListener)->void:::Removes a MenuKeyListener from the menu item.
javax.swing.JMenuItem#getMenuKeyListeners()->MenuKeyListener[]:::Returns an array of all the MenuKeyListeners added to this JMenuItem with addMenuKeyListener().
javax.swing.JMenuItem#paramString()->String:::Returns a string representation of this JMenuItem
javax.swing.JMenuItem#getAccessibleContext()->AccessibleContext:::Returns the AccessibleContext associated with this JMenuItem
javax.swing.JMenuItem.AccessibleJMenuItem#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JMenuItem.AccessibleJMenuItem#stateChanged(ChangeEvent)->void:::Supports the change listener interface and fires property changes.
javax.swing.JOptionPane#showInputDialog(Object)->String:::Shows a question-message dialog requesting input from the user
javax.swing.JOptionPane#showInputDialog(Object, Object)->String:::Shows a question-message dialog requesting input from the user, with the input value initialized to initialSelectionValue
javax.swing.JOptionPane#showInputDialog(Component, Object)->String:::Shows a question-message dialog requesting input from the user parented to parentComponent
javax.swing.JOptionPane#showInputDialog(Component, Object, Object)->String:::Shows a question-message dialog requesting input from the user and parented to parentComponent
javax.swing.JOptionPane#showInputDialog(Component, Object, String, int)->String:::Shows a dialog requesting input from the user parented to parentComponent with the dialog having the title title and message type messageType.
javax.swing.JOptionPane#showInputDialog(Component, Object, String, int, Icon, Object[], Object)->Object:::Prompts the user for input in a blocking dialog where the initial selection, possible selections, and all other options can be specified
javax.swing.JOptionPane#showMessageDialog(Component, Object)->void:::Brings up an information-message dialog titled "Message".
javax.swing.JOptionPane#showMessageDialog(Component, Object, String, int)->void:::Brings up a dialog that displays a message using a default icon determined by the messageType parameter.
javax.swing.JOptionPane#showMessageDialog(Component, Object, String, int, Icon)->void:::Brings up a dialog displaying a message, specifying all parameters.
javax.swing.JOptionPane#showConfirmDialog(Component, Object)->int:::Brings up a dialog with the options Yes, No and Cancel; with the title, Select an Option.
javax.swing.JOptionPane#showConfirmDialog(Component, Object, String, int)->int:::Brings up a dialog where the number of choices is determined by the optionType parameter.
javax.swing.JOptionPane#showConfirmDialog(Component, Object, String, int, int)->int:::Brings up a dialog where the number of choices is determined by the optionType parameter, where the messageType parameter determines the icon to display
javax.swing.JOptionPane#showConfirmDialog(Component, Object, String, int, int, Icon)->int:::Brings up a dialog with a specified icon, where the number of choices is determined by the optionType parameter
javax.swing.JOptionPane#showOptionDialog(Component, Object, String, int, int, Icon, Object[], Object)->int:::Brings up a dialog with a specified icon, where the initial choice is determined by the initialValue parameter and the number of choices is determined by the optionType parameter
javax.swing.JOptionPane#createDialog(Component, String)->JDialog:::Creates and returns a new JDialog wrapping this centered on the parentComponent in the parentComponent's frame
javax.swing.JOptionPane#createDialog(String)->JDialog:::Creates and returns a new parentless JDialog with the specified title
javax.swing.JOptionPane#showInternalMessageDialog(Component, Object)->void:::Brings up an internal confirmation dialog panel
javax.swing.JOptionPane#showInternalMessageDialog(Component, Object, String, int)->void:::Brings up an internal dialog panel that displays a message using a default icon determined by the messageType parameter.
javax.swing.JOptionPane#showInternalMessageDialog(Component, Object, String, int, Icon)->void:::Brings up an internal dialog panel displaying a message, specifying all parameters.
javax.swing.JOptionPane#showInternalConfirmDialog(Component, Object)->int:::Brings up an internal dialog panel with the options Yes, No and Cancel; with the title, Select an Option.
javax.swing.JOptionPane#showInternalConfirmDialog(Component, Object, String, int)->int:::Brings up a internal dialog panel where the number of choices is determined by the optionType parameter.
javax.swing.JOptionPane#showInternalConfirmDialog(Component, Object, String, int, int)->int:::Brings up an internal dialog panel where the number of choices is determined by the optionType parameter, where the messageType parameter determines the icon to display
javax.swing.JOptionPane#showInternalConfirmDialog(Component, Object, String, int, int, Icon)->int:::Brings up an internal dialog panel with a specified icon, where the number of choices is determined by the optionType parameter
javax.swing.JOptionPane#showInternalOptionDialog(Component, Object, String, int, int, Icon, Object[], Object)->int:::Brings up an internal dialog panel with a specified icon, where the initial choice is determined by the initialValue parameter and the number of choices is determined by the optionType parameter
javax.swing.JOptionPane#showInternalInputDialog(Component, Object)->String:::Shows an internal question-message dialog requesting input from the user parented to parentComponent
javax.swing.JOptionPane#showInternalInputDialog(Component, Object, String, int)->String:::Shows an internal dialog requesting input from the user parented to parentComponent with the dialog having the title title and message type messageType.
javax.swing.JOptionPane#showInternalInputDialog(Component, Object, String, int, Icon, Object[], Object)->Object:::Prompts the user for input in a blocking internal dialog where the initial selection, possible selections, and all other options can be specified
javax.swing.JOptionPane#createInternalFrame(Component, String)->JInternalFrame:::Creates and returns an instance of JInternalFrame
javax.swing.JOptionPane#getFrameForComponent(Component)->Frame:::Returns the specified component's Frame.
javax.swing.JOptionPane#getWindowForComponent(Component)->Window:::Returns the specified component's toplevel Frame or Dialog.
javax.swing.JOptionPane#getDesktopPaneForComponent(Component)->JDesktopPane:::Returns the specified component's desktop pane.
javax.swing.JOptionPane#setRootFrame(Frame)->void:::Sets the frame to use for class methods in which a frame is not provided
javax.swing.JOptionPane#getRootFrame()->Frame:::Returns the Frame to use for the class methods in which a frame is not provided.
javax.swing.JOptionPane#setUI(OptionPaneUI)->void:::Sets the UI object which implements the L&F for this component.
javax.swing.JOptionPane#getUI()->OptionPaneUI:::Returns the UI object which implements the L&F for this component.
javax.swing.JOptionPane#updateUI()->void:::Notification from the UIManager that the L&F has changed
javax.swing.JOptionPane#getUIClassID()->String:::Returns the name of the UI class that implements the L&F for this component.
javax.swing.JOptionPane#setMessage(Object)->void:::Sets the option pane's message-object.
javax.swing.JOptionPane#getMessage()->Object:::Returns the message-object this pane displays.
javax.swing.JOptionPane#setIcon(Icon)->void:::Sets the icon to display
javax.swing.JOptionPane#getIcon()->Icon:::Returns the icon this pane displays.
javax.swing.JOptionPane#setValue(Object)->void:::Sets the value the user has chosen.
javax.swing.JOptionPane#getValue()->Object:::Returns the value the user has selected
javax.swing.JOptionPane#setOptions(Object[])->void:::Sets the options this pane displays
javax.swing.JOptionPane#getOptions()->Object[]:::Returns the choices the user can make.
javax.swing.JOptionPane#setInitialValue(Object)->void:::Sets the initial value that is to be enabled -- the Component that has the focus when the pane is initially displayed.
javax.swing.JOptionPane#getInitialValue()->Object:::Returns the initial value.
javax.swing.JOptionPane#setMessageType(int)->void:::Sets the option pane's message type
javax.swing.JOptionPane#getMessageType()->int:::Returns the message type.
javax.swing.JOptionPane#setOptionType(int)->void:::Sets the options to display
javax.swing.JOptionPane#getOptionType()->int:::Returns the type of options that are displayed.
javax.swing.JOptionPane#setSelectionValues(Object[])->void:::Sets the input selection values for a pane that provides the user with a list of items to choose from
javax.swing.JOptionPane#getSelectionValues()->Object[]:::Returns the input selection values.
javax.swing.JOptionPane#setInitialSelectionValue(Object)->void:::Sets the input value that is initially displayed as selected to the user
javax.swing.JOptionPane#getInitialSelectionValue()->Object:::Returns the input value that is displayed as initially selected to the user.
javax.swing.JOptionPane#setInputValue(Object)->void:::Sets the input value that was selected or input by the user
javax.swing.JOptionPane#getInputValue()->Object:::Returns the value the user has input, if wantsInput is true.
javax.swing.JOptionPane#getMaxCharactersPerLineCount()->int:::Returns the maximum number of characters to place on a line in a message
javax.swing.JOptionPane#setWantsInput(boolean)->void:::Sets the wantsInput property
javax.swing.JOptionPane#getWantsInput()->boolean:::Returns the value of the wantsInput property.
javax.swing.JOptionPane#selectInitialValue()->void:::Requests that the initial value be selected, which will set focus to the initial value
javax.swing.JOptionPane#paramString()->String:::Returns a string representation of this JOptionPane
javax.swing.JOptionPane#getAccessibleContext()->AccessibleContext:::Returns the AccessibleContext associated with this JOptionPane
javax.swing.JOptionPane.AccessibleJOptionPane#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JPanel#updateUI()->void:::Resets the UI property with a value from the current look and feel.
javax.swing.JPanel#getUI()->PanelUI:::Returns the look and feel (L&amp;F) object that renders this component.
javax.swing.JPanel#setUI(PanelUI)->void:::Sets the look and feel (L&amp;F) object that renders this component.
javax.swing.JPanel#getUIClassID()->String:::Returns a string that specifies the name of the L&amp;F class that renders this component.
javax.swing.JPanel#paramString()->String:::Returns a string representation of this JPanel
javax.swing.JPanel#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JPanel
javax.swing.JPanel.AccessibleJPanel#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JPasswordField#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JPasswordField#updateUI()->void::: password field update i
javax.swing.JPasswordField#getEchoChar()->char:::Returns the character to be used for echoing
javax.swing.JPasswordField#setEchoChar(char)->void:::Sets the echo character for this JPasswordField
javax.swing.JPasswordField#echoCharIsSet()->boolean:::Returns true if this JPasswordField has a character set for echoing
javax.swing.JPasswordField#cut()->void:::Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep
javax.swing.JPasswordField#copy()->void:::Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep
javax.swing.JPasswordField#getText()->String:::Returns the text contained in this TextComponent
javax.swing.JPasswordField#getText(int, int)->String:::Fetches a portion of the text represented by the component
javax.swing.JPasswordField#getPassword()->char[]:::Returns the text contained in this TextComponent
javax.swing.JPasswordField#paramString()->String:::Returns a string representation of this JPasswordField
javax.swing.JPasswordField#customSetUIProperty(String, Object)->boolean:::This method is a hack to get around the fact that we cannot directly override setUIProperty because part of the inheritance hierarchy goes outside of the javax.swing package, and therefore calling a package private method isn't allowed
javax.swing.JPasswordField#getAccessibleContext()->AccessibleContext:::Returns the AccessibleContext associated with this JPasswordField
javax.swing.JPasswordField.AccessibleJPasswordField#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.JPasswordField.AccessibleJPasswordField#getAccessibleText()->AccessibleText:::Gets the AccessibleText for the JPasswordField
javax.swing.JPasswordField.AccessibleJPasswordField#getAtIndex(int, int)->String:::Returns the String at a given index.
javax.swing.JPasswordField.AccessibleJPasswordField#getAfterIndex(int, int)->String:::Returns the String after a given index.
javax.swing.JPasswordField.AccessibleJPasswordField#getBeforeIndex(int, int)->String:::Returns the String before a given index.
javax.swing.JPasswordField.AccessibleJPasswordField#getTextRange(int, int)->String:::Returns the text between two indices.
javax.swing.JPasswordField.AccessibleJPasswordField#getTextSequenceAt(int, int)->AccessibleTextSequence:::Returns the AccessibleTextSequence at a given index.
javax.swing.JPasswordField.AccessibleJPasswordField#getTextSequenceAfter(int, int)->AccessibleTextSequence:::Returns the AccessibleTextSequence after a given index.
javax.swing.JPasswordField.AccessibleJPasswordField#getTextSequenceBefore(int, int)->AccessibleTextSequence:::Returns the AccessibleTextSequence before a given index.
javax.swing.JPopupMenu#setDefaultLightWeightPopupEnabled(boolean)->void::: Sets the default value of the lightWeightPopupEnabled  property.
javax.swing.JPopupMenu#getDefaultLightWeightPopupEnabled()->boolean::: Gets the defaultLightWeightPopupEnabled property,  which by default is true.
javax.swing.JPopupMenu#getUI()->PopupMenuUI:::Returns the look and feel (L&amp;F) object that renders this component.
javax.swing.JPopupMenu#setUI(PopupMenuUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JPopupMenu#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JPopupMenu#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JPopupMenu#processFocusEvent(FocusEvent)->void::: popup menu process focus event
javax.swing.JPopupMenu#processKeyEvent(KeyEvent)->void:::Processes key stroke events such as mnemonics and accelerators.
javax.swing.JPopupMenu#getSelectionModel()->SingleSelectionModel:::Returns the model object that handles single selections.
javax.swing.JPopupMenu#setSelectionModel(SingleSelectionModel)->void:::Sets the model object to handle single selections.
javax.swing.JPopupMenu#add(JMenuItem)->JMenuItem:::Appends the specified menu item to the end of this menu.
javax.swing.JPopupMenu#add(String)->JMenuItem:::Creates a new menu item with the specified text and appends it to the end of this menu.
javax.swing.JPopupMenu#add(Action)->JMenuItem:::Appends a new menu item to the end of the menu which dispatches the specified Action object.
javax.swing.JPopupMenu#adjustPopupLocationToFitScreen(int, int)->Point:::Returns an point which has been adjusted to take into account of the desktop bounds, taskbar and multi-monitor configuration
javax.swing.JPopupMenu#canPopupOverlapTaskBar()->boolean:::Returns whether popup is allowed to be shown above the task bar.
javax.swing.JPopupMenu#createActionComponent(Action)->JMenuItem:::Factory method which creates the JMenuItem for Actions added to the JPopupMenu.
javax.swing.JPopupMenu#createActionChangeListener(JMenuItem)->PropertyChangeListener:::Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur.
javax.swing.JPopupMenu#remove(int)->void:::Removes the component at the specified index from this popup menu.
javax.swing.JPopupMenu#setLightWeightPopupEnabled(boolean)->void:::Sets the value of the lightWeightPopupEnabled property, which by default is true
javax.swing.JPopupMenu#isLightWeightPopupEnabled()->boolean:::Gets the lightWeightPopupEnabled property.
javax.swing.JPopupMenu#getLabel()->String:::Returns the popup menu's label
javax.swing.JPopupMenu#setLabel(String)->void:::Sets the popup menu's label
javax.swing.JPopupMenu#addSeparator()->void:::Appends a new separator at the end of the menu.
javax.swing.JPopupMenu#insert(Action, int)->void:::Inserts a menu item for the specified Action object at a given position.
javax.swing.JPopupMenu#insert(Component, int)->void:::Inserts the specified component into the menu at a given position.
javax.swing.JPopupMenu#addPopupMenuListener(PopupMenuListener)->void::: Adds a PopupMenu listener.
javax.swing.JPopupMenu#removePopupMenuListener(PopupMenuListener)->void:::Removes a PopupMenu listener.
javax.swing.JPopupMenu#getPopupMenuListeners()->PopupMenuListener[]:::Returns an array of all the PopupMenuListeners added to this JMenuItem with addPopupMenuListener().
javax.swing.JPopupMenu#addMenuKeyListener(MenuKeyListener)->void:::Adds a MenuKeyListener to the popup menu.
javax.swing.JPopupMenu#removeMenuKeyListener(MenuKeyListener)->void:::Removes a MenuKeyListener from the popup menu.
javax.swing.JPopupMenu#getMenuKeyListeners()->MenuKeyListener[]:::Returns an array of all the MenuKeyListeners added to this JPopupMenu with addMenuKeyListener().
javax.swing.JPopupMenu#firePopupMenuWillBecomeVisible()->void:::Notifies PopupMenuListeners that this popup menu will become visible.
javax.swing.JPopupMenu#firePopupMenuWillBecomeInvisible()->void:::Notifies PopupMenuListeners that this popup menu will become invisible.
javax.swing.JPopupMenu#firePopupMenuCanceled()->void:::Notifies PopupMenuListeners that this popup menu is cancelled.
javax.swing.JPopupMenu#alwaysOnTop()->boolean::: popup menu always on top
javax.swing.JPopupMenu#pack()->void:::Lays out the container so that it uses the minimum space needed to display its contents.
javax.swing.JPopupMenu#setVisible(boolean)->void:::Sets the visibility of the popup menu.
javax.swing.JPopupMenu#isVisible()->boolean:::Returns true if the popup menu is visible (currently being displayed).
javax.swing.JPopupMenu#setLocation(int, int)->void:::Sets the location of the upper left corner of the popup menu using x, y coordinates
javax.swing.JPopupMenu#getInvoker()->Component:::Returns the component which is the 'invoker' of this popup menu.
javax.swing.JPopupMenu#setInvoker(Component)->void:::Sets the invoker of this popup menu -- the component in which the popup menu menu is to be displayed.
javax.swing.JPopupMenu#show(Component, int, int)->void:::Displays the popup menu at the position x,y in the coordinate space of the component invoker.
javax.swing.JPopupMenu#getRootPopupMenu()->JPopupMenu:::Returns the popup menu which is at the root of the menu system for this popup menu.
javax.swing.JPopupMenu#getComponentAtIndex(int)->Component:::Returns the component at the specified index.
javax.swing.JPopupMenu#getComponentIndex(Component)->int:::Returns the index of the specified component.
javax.swing.JPopupMenu#setPopupSize(Dimension)->void:::Sets the size of the Popup window using a Dimension object
javax.swing.JPopupMenu#setPopupSize(int, int)->void:::Sets the size of the Popup window to the specified width and height
javax.swing.JPopupMenu#setSelected(Component)->void:::Sets the currently selected component,  This will result in a change to the selection model.
javax.swing.JPopupMenu#isBorderPainted()->boolean:::Checks whether the border should be painted.
javax.swing.JPopupMenu#setBorderPainted(boolean)->void:::Sets whether the border should be painted.
javax.swing.JPopupMenu#paintBorder(Graphics)->void:::Paints the popup menu's border if the borderPainted property is true.
javax.swing.JPopupMenu#getMargin()->Insets:::Returns the margin, in pixels, between the popup menu's border and its containers.
javax.swing.JPopupMenu#isSubPopupMenu(JPopupMenu)->boolean:::Examines the list of menu items to determine whether popup is a popup menu.
javax.swing.JPopupMenu#paramString()->String:::Returns a string representation of this JPopupMenu
javax.swing.JPopupMenu#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JPopupMenu
javax.swing.JPopupMenu.AccessibleJPopupMenu#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JPopupMenu.AccessibleJPopupMenu#propertyChange(PropertyChangeEvent)->void:::This method gets called when a bound property is changed.
javax.swing.JPopupMenu#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager)->void:::This method is required to conform to the MenuElement interface, but it not implemented.
javax.swing.JPopupMenu#processKeyEvent(KeyEvent, MenuElement[], MenuSelectionManager)->void:::Processes a key event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using MenuSelectionManager's API
javax.swing.JPopupMenu#menuSelectionChanged(boolean)->void:::Messaged when the menubar selection changes to activate or deactivate this menu
javax.swing.JPopupMenu#getSubElements()->MenuElement[]:::Returns an array of MenuElements containing the submenu for this menu component
javax.swing.JPopupMenu#getComponent()->Component:::Returns this JPopupMenu component.
javax.swing.JPopupMenu.Separator#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JPopupMenu#isPopupTrigger(MouseEvent)->boolean:::Returns true if the MouseEvent is considered a popup trigger by the JPopupMenu's currently installed UI.
javax.swing.JProgressBar#getOrientation()->int:::Returns SwingConstants.VERTICAL or SwingConstants.HORIZONTAL, depending on the orientation of the progress bar
javax.swing.JProgressBar#setOrientation(int)->void:::Sets the progress bar's orientation to newOrientation, which must be SwingConstants.VERTICAL or SwingConstants.HORIZONTAL
javax.swing.JProgressBar#isStringPainted()->boolean:::Returns the value of the stringPainted property.
javax.swing.JProgressBar#setStringPainted(boolean)->void:::Sets the value of the stringPainted property, which determines whether the progress bar should render a progress string
javax.swing.JProgressBar#getString()->String:::Returns a String representation of the current progress
javax.swing.JProgressBar#setString(String)->void:::Sets the value of the progress string
javax.swing.JProgressBar#getPercentComplete()->double:::Returns the percent complete for the progress bar
javax.swing.JProgressBar#isBorderPainted()->boolean:::Returns the borderPainted property.
javax.swing.JProgressBar#setBorderPainted(boolean)->void:::Sets the borderPainted property, which is true if the progress bar should paint its border
javax.swing.JProgressBar#paintBorder(Graphics)->void:::Paints the progress bar's border if the borderPainted property is true.
javax.swing.JProgressBar#getUI()->ProgressBarUI:::Returns the look-and-feel object that renders this component.
javax.swing.JProgressBar#setUI(ProgressBarUI)->void:::Sets the look-and-feel object that renders this component.
javax.swing.JProgressBar#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JProgressBar#getUIClassID()->String:::Returns the name of the look-and-feel class that renders this component.
javax.swing.JProgressBar#createChangeListener()->ChangeListener:::Subclasses that want to handle change events from the model differently can override this to return an instance of a custom ChangeListener implementation
javax.swing.JProgressBar#addChangeListener(ChangeListener)->void:::Adds the specified ChangeListener to the progress bar.
javax.swing.JProgressBar#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the progress bar.
javax.swing.JProgressBar#getChangeListeners()->ChangeListener[]:::Returns an array of all the ChangeListeners added to this progress bar with addChangeListener.
javax.swing.JProgressBar#fireStateChanged()->void:::Send a ChangeEvent, whose source is this JProgressBar, to all ChangeListeners that have registered interest in ChangeEvents
javax.swing.JProgressBar#getModel()->BoundedRangeModel:::Returns the data model used by this progress bar.
javax.swing.JProgressBar#setModel(BoundedRangeModel)->void:::Sets the data model used by the JProgressBar
javax.swing.JProgressBar#getValue()->int:::Returns the progress bar's current value from the BoundedRangeModel
javax.swing.JProgressBar#getMinimum()->int:::Returns the progress bar's minimum value from the BoundedRangeModel.
javax.swing.JProgressBar#getMaximum()->int:::Returns the progress bar's maximum value from the BoundedRangeModel.
javax.swing.JProgressBar#setValue(int)->void:::Sets the progress bar's current value to n
javax.swing.JProgressBar#setMinimum(int)->void:::Sets the progress bar's minimum value (stored in the progress bar's data model) to n
javax.swing.JProgressBar#setMaximum(int)->void:::Sets the progress bar's maximum value (stored in the progress bar's data model) to n
javax.swing.JProgressBar#setIndeterminate(boolean)->void:::Sets the indeterminate property of the progress bar, which determines whether the progress bar is in determinate or indeterminate mode
javax.swing.JProgressBar#isIndeterminate()->boolean:::Returns the value of the indeterminate property.
javax.swing.JProgressBar#paramString()->String:::Returns a string representation of this JProgressBar
javax.swing.JProgressBar#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JProgressBar
javax.swing.JProgressBar.AccessibleJProgressBar#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object.
javax.swing.JProgressBar.AccessibleJProgressBar#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.JProgressBar.AccessibleJProgressBar#getAccessibleValue()->AccessibleValue:::Gets the AccessibleValue associated with this object
javax.swing.JProgressBar.AccessibleJProgressBar#getCurrentAccessibleValue()->Number:::Gets the accessible value of this object.
javax.swing.JProgressBar.AccessibleJProgressBar#setCurrentAccessibleValue(Number)->boolean:::Sets the value of this object as a Number.
javax.swing.JProgressBar.AccessibleJProgressBar#getMinimumAccessibleValue()->Number:::Gets the minimum accessible value of this object.
javax.swing.JProgressBar.AccessibleJProgressBar#getMaximumAccessibleValue()->Number:::Gets the maximum accessible value of this object.
javax.swing.JRadioButton#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JRadioButton#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JRadioButton#setIconFromAction(Action)->void:::The icon for radio buttons comes from the look and feel, not the Action.
javax.swing.JRadioButton#paramString()->String:::Returns a string representation of this JRadioButton
javax.swing.JRadioButton#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JRadioButton
javax.swing.JRadioButton.AccessibleJRadioButton#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JRadioButtonMenuItem#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JRadioButtonMenuItem#paramString()->String:::Returns a string representation of this JRadioButtonMenuItem
javax.swing.JRadioButtonMenuItem#shouldUpdateSelectedStateFromAction()->boolean:::Overriden to return true, JRadioButtonMenuItem supports the selected state.
javax.swing.JRadioButtonMenuItem#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JRadioButtonMenuItem
javax.swing.JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JRootPane#setDoubleBuffered(boolean)->void::: root pane set double buffered
javax.swing.JRootPane#getWindowDecorationStyle()->int:::Returns a constant identifying the type of Window decorations the JRootPane is providing.
javax.swing.JRootPane#setWindowDecorationStyle(int)->void:::Sets the type of Window decorations (such as borders, widgets for closing a Window, title ...) the JRootPane should provide
javax.swing.JRootPane#getUI()->RootPaneUI:::Returns the L&amp;F object that renders this component.
javax.swing.JRootPane#setUI(RootPaneUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JRootPane#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JRootPane#getUIClassID()->String:::Returns a string that specifies the name of the L&amp;F class that renders this component.
javax.swing.JRootPane#createLayeredPane()->JLayeredPane:::Called by the constructor methods to create the default layeredPane
javax.swing.JRootPane#createContentPane()->Container:::Called by the constructor methods to create the default contentPane
javax.swing.JRootPane#createGlassPane()->Component:::Called by the constructor methods to create the default glassPane
javax.swing.JRootPane#createRootLayout()->LayoutManager:::Called by the constructor methods to create the default layoutManager.
javax.swing.JRootPane#setJMenuBar(JMenuBar)->void:::Adds or changes the menu bar used in the layered pane.
javax.swing.JRootPane#setMenuBar(JMenuBar)->void:::Specifies the menu bar value.
javax.swing.JRootPane#getJMenuBar()->JMenuBar:::Returns the menu bar from the layered pane.
javax.swing.JRootPane#getMenuBar()->JMenuBar:::Returns the menu bar value.
javax.swing.JRootPane#setContentPane(Container)->void:::Sets the content pane -- the container that holds the components parented by the root pane
javax.swing.JRootPane#getContentPane()->Container:::Returns the content pane -- the container that holds the components parented by the root pane.
javax.swing.JRootPane#setLayeredPane(JLayeredPane)->void:::Sets the layered pane for the root pane
javax.swing.JRootPane#getLayeredPane()->JLayeredPane:::Gets the layered pane used by the root pane
javax.swing.JRootPane#setGlassPane(Component)->void:::Sets a specified Component to be the glass pane for this root pane
javax.swing.JRootPane#getGlassPane()->Component:::Returns the current glass pane for this JRootPane.
javax.swing.JRootPane#isValidateRoot()->boolean:::If a descendant of this JRootPane calls revalidate, validate from here on down
javax.swing.JRootPane#isOptimizedDrawingEnabled()->boolean:::The glassPane and contentPane have the same bounds, which means JRootPane does not tiles its children and this should return false
javax.swing.JRootPane#addNotify()->void::: root pane add notify
javax.swing.JRootPane#removeNotify()->void::: root pane remove notify
javax.swing.JRootPane#setDefaultButton(JButton)->void:::Sets the defaultButton property, which determines the current default button for this JRootPane
javax.swing.JRootPane#getDefaultButton()->JButton:::Returns the value of the defaultButton property.
javax.swing.JRootPane#setUseTrueDoubleBuffering(boolean)->void::: root pane set use true double buffering
javax.swing.JRootPane#getUseTrueDoubleBuffering()->boolean::: root pane get use true double buffering
javax.swing.JRootPane#disableTrueDoubleBuffering()->void::: root pane disable true double buffering
javax.swing.JRootPane#addImpl(Component, Object, int)->void:::Overridden to enforce the position of the glass component as the zero child.
javax.swing.JRootPane.RootLayout#preferredLayoutSize(Container)->Dimension:::Returns the amount of space the layout would like to have.
javax.swing.JRootPane.RootLayout#minimumLayoutSize(Container)->Dimension:::Returns the minimum amount of space the layout needs.
javax.swing.JRootPane.RootLayout#maximumLayoutSize(Container)->Dimension:::Returns the maximum amount of space the layout can use.
javax.swing.JRootPane.RootLayout#layoutContainer(Container)->void:::Instructs the layout manager to perform the layout for the specified container.
javax.swing.JRootPane.RootLayout#addLayoutComponent(String, Component)->void::: root layout add layout component
javax.swing.JRootPane.RootLayout#removeLayoutComponent(Component)->void::: root layout remove layout component
javax.swing.JRootPane.RootLayout#addLayoutComponent(Component, Object)->void::: root layout add layout component
javax.swing.JRootPane.RootLayout#getLayoutAlignmentX(Container)->float::: root layout get layout alignment x
javax.swing.JRootPane.RootLayout#getLayoutAlignmentY(Container)->float::: root layout get layout alignment y
javax.swing.JRootPane.RootLayout#invalidateLayout(Container)->void::: root layout invalidate layout
javax.swing.JRootPane#paramString()->String:::Returns a string representation of this JRootPane
javax.swing.JRootPane#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JRootPane
javax.swing.JRootPane.AccessibleJRootPane#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JRootPane.AccessibleJRootPane#getAccessibleChildrenCount()->int:::Returns the number of accessible children of the object.
javax.swing.JRootPane.AccessibleJRootPane#getAccessibleChild(int)->Accessible:::Returns the specified Accessible child of the object
javax.swing.JScrollBar#setUI(ScrollBarUI)->void:::Sets the L&F object that renders this component.
javax.swing.JScrollBar#getUI()->ScrollBarUI:::Returns the delegate that implements the look and feel for this component.
javax.swing.JScrollBar#updateUI()->void:::Overrides JComponent.updateUI.
javax.swing.JScrollBar#getUIClassID()->String:::Returns the name of the LookAndFeel class for this component.
javax.swing.JScrollBar#getOrientation()->int:::Returns the component's orientation (horizontal or vertical).
javax.swing.JScrollBar#setOrientation(int)->void:::Set the scrollbar's orientation to either VERTICAL or HORIZONTAL.
javax.swing.JScrollBar#getModel()->BoundedRangeModel:::Returns data model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent.
javax.swing.JScrollBar#setModel(BoundedRangeModel)->void:::Sets the model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent.
javax.swing.JScrollBar#getUnitIncrement(int)->int:::Returns the amount to change the scrollbar's value by, given a unit up/down request
javax.swing.JScrollBar#setUnitIncrement(int)->void:::Sets the unitIncrement property
javax.swing.JScrollBar#getBlockIncrement(int)->int:::Returns the amount to change the scrollbar's value by, given a block (usually "page") up/down request
javax.swing.JScrollBar#setBlockIncrement(int)->void:::Sets the blockIncrement property
javax.swing.JScrollBar#getUnitIncrement()->int:::For backwards compatibility with java.awt.Scrollbar.
javax.swing.JScrollBar#getBlockIncrement()->int:::For backwards compatibility with java.awt.Scrollbar.
javax.swing.JScrollBar#getValue()->int:::Returns the scrollbar's value.
javax.swing.JScrollBar#setValue(int)->void:::Sets the scrollbar's value
javax.swing.JScrollBar#getVisibleAmount()->int:::Returns the scrollbar's extent, aka its "visibleAmount"
javax.swing.JScrollBar#setVisibleAmount(int)->void:::Set the model's extent property.
javax.swing.JScrollBar#getMinimum()->int:::Returns the minimum value supported by the scrollbar (usually zero).
javax.swing.JScrollBar#setMinimum(int)->void:::Sets the model's minimum property.
javax.swing.JScrollBar#getMaximum()->int:::The maximum value of the scrollbar is maximum - extent.
javax.swing.JScrollBar#setMaximum(int)->void:::Sets the model's maximum property
javax.swing.JScrollBar#getValueIsAdjusting()->boolean:::True if the scrollbar knob is being dragged.
javax.swing.JScrollBar#setValueIsAdjusting(boolean)->void:::Sets the model's valueIsAdjusting property
javax.swing.JScrollBar#setValues(int, int, int, int)->void:::Sets the four BoundedRangeModel properties after forcing the arguments to obey the usual constraints:  minimum &le; value &le; value+extent &le; maximum 
javax.swing.JScrollBar#addAdjustmentListener(AdjustmentListener)->void:::Adds an AdjustmentListener
javax.swing.JScrollBar#removeAdjustmentListener(AdjustmentListener)->void:::Removes an AdjustmentEvent listener.
javax.swing.JScrollBar#getAdjustmentListeners()->AdjustmentListener[]:::Returns an array of all the AdjustmentListeners added to this JScrollBar with addAdjustmentListener().
javax.swing.JScrollBar#fireAdjustmentValueChanged(int, int, int)->void:::Notify listeners that the scrollbar's model has changed.
javax.swing.JScrollBar#getMinimumSize()->Dimension:::The scrollbar is flexible along it's scrolling axis and rigid along the other axis.
javax.swing.JScrollBar#getMaximumSize()->Dimension:::The scrollbar is flexible along it's scrolling axis and rigid along the other axis.
javax.swing.JScrollBar#setEnabled(boolean)->void:::Enables the component so that the knob position can be changed
javax.swing.JScrollBar#paramString()->String:::Returns a string representation of this JScrollBar
javax.swing.JScrollBar#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JScrollBar
javax.swing.JScrollBar.AccessibleJScrollBar#getAccessibleStateSet()->AccessibleStateSet:::Get the state set of this object.
javax.swing.JScrollBar.AccessibleJScrollBar#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JScrollBar.AccessibleJScrollBar#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object
javax.swing.JScrollBar.AccessibleJScrollBar#getCurrentAccessibleValue()->Number:::Get the accessible value of this object.
javax.swing.JScrollBar.AccessibleJScrollBar#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
javax.swing.JScrollBar.AccessibleJScrollBar#getMinimumAccessibleValue()->Number:::Get the minimum accessible value of this object.
javax.swing.JScrollBar.AccessibleJScrollBar#getMaximumAccessibleValue()->Number:::Get the maximum accessible value of this object.
javax.swing.JScrollPane#getUI()->ScrollPaneUI:::Returns the look and feel (L&amp;F) object that renders this component.
javax.swing.JScrollPane#setUI(ScrollPaneUI)->void:::Sets the ScrollPaneUI object that provides the look and feel (L&amp;F) for this component.
javax.swing.JScrollPane#updateUI()->void:::Replaces the current ScrollPaneUI object with a version from the current default look and feel
javax.swing.JScrollPane#getUIClassID()->String:::Returns the suffix used to construct the name of the L&amp;F class used to render this component.
javax.swing.JScrollPane#setLayout(LayoutManager)->void:::Sets the layout manager for this JScrollPane
javax.swing.JScrollPane#isValidateRoot()->boolean:::Overridden to return true so that any calls to revalidate on any descendants of this JScrollPane will cause the entire tree beginning with this JScrollPane to be validated.
javax.swing.JScrollPane#getVerticalScrollBarPolicy()->int:::Returns the vertical scroll bar policy value.
javax.swing.JScrollPane#setVerticalScrollBarPolicy(int)->void:::Determines when the vertical scrollbar appears in the scrollpane
javax.swing.JScrollPane#getHorizontalScrollBarPolicy()->int:::Returns the horizontal scroll bar policy value.
javax.swing.JScrollPane#setHorizontalScrollBarPolicy(int)->void:::Determines when the horizontal scrollbar appears in the scrollpane
javax.swing.JScrollPane#getViewportBorder()->Border:::Returns the Border object that surrounds the viewport.
javax.swing.JScrollPane#setViewportBorder(Border)->void:::Adds a border around the viewport
javax.swing.JScrollPane#getViewportBorderBounds()->Rectangle:::Returns the bounds of the viewport's border.
javax.swing.JScrollPane.ScrollBar#setUnitIncrement(int)->void:::Messages super to set the value, and resets the unitIncrementSet instance variable to true.
javax.swing.JScrollPane.ScrollBar#getUnitIncrement(int)->int:::Computes the unit increment for scrolling if the viewport's view is a Scrollable object
javax.swing.JScrollPane.ScrollBar#setBlockIncrement(int)->void:::Messages super to set the value, and resets the blockIncrementSet instance variable to true.
javax.swing.JScrollPane.ScrollBar#getBlockIncrement(int)->int:::Computes the block increment for scrolling if the viewport's view is a Scrollable object
javax.swing.JScrollPane#createHorizontalScrollBar()->JScrollBar:::Returns a JScrollPane.ScrollBar by default
javax.swing.JScrollPane#getHorizontalScrollBar()->JScrollBar:::Returns the horizontal scroll bar that controls the viewport's horizontal view position.
javax.swing.JScrollPane#setHorizontalScrollBar(JScrollBar)->void:::Adds the scrollbar that controls the viewport's horizontal view position to the scrollpane
javax.swing.JScrollPane#createVerticalScrollBar()->JScrollBar:::Returns a JScrollPane.ScrollBar by default
javax.swing.JScrollPane#getVerticalScrollBar()->JScrollBar:::Returns the vertical scroll bar that controls the viewports vertical view position.
javax.swing.JScrollPane#setVerticalScrollBar(JScrollBar)->void:::Adds the scrollbar that controls the viewports vertical view position to the scrollpane
javax.swing.JScrollPane#createViewport()->JViewport:::Returns a new JViewport by default
javax.swing.JScrollPane#getViewport()->JViewport:::Returns the current JViewport.
javax.swing.JScrollPane#setViewport(JViewport)->void:::Removes the old viewport (if there is one); forces the viewPosition of the new viewport to be in the +x,+y quadrant; syncs up the row and column headers (if there are any) with the new viewport; and finally syncs the scrollbars and headers with the new viewport
javax.swing.JScrollPane#setViewportView(Component)->void:::Creates a viewport if necessary and then sets its view
javax.swing.JScrollPane#getRowHeader()->JViewport:::Returns the row header.
javax.swing.JScrollPane#setRowHeader(JViewport)->void:::Removes the old rowHeader, if it exists; if the new rowHeader isn't null, syncs the y coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane
javax.swing.JScrollPane#setRowHeaderView(Component)->void:::Creates a row-header viewport if necessary, sets its view and then adds the row-header viewport to the scrollpane
javax.swing.JScrollPane#getColumnHeader()->JViewport:::Returns the column header.
javax.swing.JScrollPane#setColumnHeader(JViewport)->void:::Removes the old columnHeader, if it exists; if the new columnHeader isn't null, syncs the x coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane
javax.swing.JScrollPane#setColumnHeaderView(Component)->void:::Creates a column-header viewport if necessary, sets its view, and then adds the column-header viewport to the scrollpane
javax.swing.JScrollPane#getCorner(String)->Component:::Returns the component at the specified corner
javax.swing.JScrollPane#setCorner(String, Component)->void:::Adds a child that will appear in one of the scroll panes corners, if there's room
javax.swing.JScrollPane#setComponentOrientation(ComponentOrientation)->void:::Sets the orientation for the vertical and horizontal scrollbars as determined by the ComponentOrientation argument.
javax.swing.JScrollPane#isWheelScrollingEnabled()->boolean:::Indicates whether or not scrolling will take place in response to the mouse wheel
javax.swing.JScrollPane#setWheelScrollingEnabled(boolean)->void:::Enables/disables scrolling in response to movement of the mouse wheel
javax.swing.JScrollPane#paramString()->String:::Returns a string representation of this JScrollPane
javax.swing.JScrollPane#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JScrollPane
javax.swing.JScrollPane.AccessibleJScrollPane#resetViewPort()->void:::Resets the viewport ChangeListener and PropertyChangeListener
javax.swing.JScrollPane.AccessibleJScrollPane#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JScrollPane.AccessibleJScrollPane#stateChanged(ChangeEvent)->void:::Invoked when the target of the listener has changed its state.
javax.swing.JScrollPane.AccessibleJScrollPane#propertyChange(PropertyChangeEvent)->void:::This method gets called when a bound property is changed.
javax.swing.JScrollPane.AccessibleJScrollPane#setScrollBarRelations(JScrollBar)->void::: accessible scroll pane set scroll bar relations
javax.swing.JSeparator#getUI()->SeparatorUI:::Returns the L&amp;F object that renders this component.
javax.swing.JSeparator#setUI(SeparatorUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JSeparator#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JSeparator#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JSeparator#getOrientation()->int:::Returns the orientation of this separator.
javax.swing.JSeparator#setOrientation(int)->void:::Sets the orientation of the separator
javax.swing.JSeparator#paramString()->String:::Returns a string representation of this JSeparator
javax.swing.JSeparator#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JSeparator
javax.swing.JSeparator.AccessibleJSeparator#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JSlider#getUI()->SliderUI:::Gets the UI object which implements the L&amp;F for this component.
javax.swing.JSlider#setUI(SliderUI)->void:::Sets the UI object which implements the L&amp;F for this component.
javax.swing.JSlider#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JSlider#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JSlider#createChangeListener()->ChangeListener:::Subclasses that want to handle ChangeEvents from the model differently can override this to return an instance of a custom ChangeListener implementation
javax.swing.JSlider#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to the slider.
javax.swing.JSlider#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the slider.
javax.swing.JSlider#getChangeListeners()->ChangeListener[]:::Returns an array of all the ChangeListeners added to this JSlider with addChangeListener().
javax.swing.JSlider#fireStateChanged()->void:::Send a ChangeEvent, whose source is this JSlider, to all ChangeListeners that have registered interest in ChangeEvents
javax.swing.JSlider#getModel()->BoundedRangeModel:::Returns the BoundedRangeModel that handles the slider's three fundamental properties: minimum, maximum, value.
javax.swing.JSlider#setModel(BoundedRangeModel)->void:::Sets the BoundedRangeModel that handles the slider's three fundamental properties: minimum, maximum, value
javax.swing.JSlider#getValue()->int:::Returns the slider's current value from the BoundedRangeModel.
javax.swing.JSlider#setValue(int)->void:::Sets the slider's current value to n
javax.swing.JSlider#getMinimum()->int:::Returns the minimum value supported by the slider from the BoundedRangeModel.
javax.swing.JSlider#setMinimum(int)->void:::Sets the slider's minimum value to minimum
javax.swing.JSlider#getMaximum()->int:::Returns the maximum value supported by the slider from the BoundedRangeModel.
javax.swing.JSlider#setMaximum(int)->void:::Sets the slider's maximum value to maximum
javax.swing.JSlider#getValueIsAdjusting()->boolean:::Returns the valueIsAdjusting property from the model
javax.swing.JSlider#setValueIsAdjusting(boolean)->void:::Sets the model's valueIsAdjusting property
javax.swing.JSlider#getExtent()->int:::Returns the "extent" from the BoundedRangeModel
javax.swing.JSlider#setExtent(int)->void:::Sets the size of the range "covered" by the knob
javax.swing.JSlider#getOrientation()->int:::Return this slider's vertical or horizontal orientation.
javax.swing.JSlider#setOrientation(int)->void:::Set the slider's orientation to either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.
javax.swing.JSlider#setFont(Font)->void::: slider set font
javax.swing.JSlider#imageUpdate(Image, int, int, int, int, int)->boolean::: slider image update
javax.swing.JSlider#getLabelTable()->Dictionary:::Returns the dictionary of what labels to draw at which values.
javax.swing.JSlider#setLabelTable(Dictionary)->void:::Used to specify what label will be drawn at any given value
javax.swing.JSlider#updateLabelUIs()->void:::Updates the UIs for the labels in the label table by calling updateUI on each label
javax.swing.JSlider#createStandardLabels(int)->Hashtable:::Creates a Hashtable of numerical text labels, starting at the slider minimum, and using the increment specified
javax.swing.JSlider#createStandardLabels(int, int)->Hashtable:::Creates a Hashtable of numerical text labels, starting at the starting point specified, and using the increment specified
javax.swing.JSlider#getInverted()->boolean:::Returns true if the value-range shown for the slider is reversed,
javax.swing.JSlider#setInverted(boolean)->void:::Specify true to reverse the value-range shown for the slider and false to put the value range in the normal order
javax.swing.JSlider#getMajorTickSpacing()->int:::This method returns the major tick spacing
javax.swing.JSlider#setMajorTickSpacing(int)->void:::This method sets the major tick spacing
javax.swing.JSlider#getMinorTickSpacing()->int:::This method returns the minor tick spacing
javax.swing.JSlider#setMinorTickSpacing(int)->void:::This method sets the minor tick spacing
javax.swing.JSlider#getSnapToTicks()->boolean:::Returns true if the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob.
javax.swing.JSlider#getSnapToValue()->boolean:::Returns true if the knob (and the data value it represents) resolve to the closest slider value next to where the user positioned the knob.
javax.swing.JSlider#setSnapToTicks(boolean)->void:::Specifying true makes the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob
javax.swing.JSlider#setSnapToValue(boolean)->void:::Specifying true makes the knob (and the data value it represents) resolve to the closest slider value next to where the user positioned the knob
javax.swing.JSlider#getPaintTicks()->boolean:::Tells if tick marks are to be painted.
javax.swing.JSlider#setPaintTicks(boolean)->void:::Determines whether tick marks are painted on the slider
javax.swing.JSlider#getPaintTrack()->boolean:::Tells if the track (area the slider slides in) is to be painted.
javax.swing.JSlider#setPaintTrack(boolean)->void:::Determines whether the track is painted on the slider
javax.swing.JSlider#getPaintLabels()->boolean:::Tells if labels are to be painted.
javax.swing.JSlider#setPaintLabels(boolean)->void:::Determines whether labels are painted on the slider
javax.swing.JSlider#paramString()->String:::Returns a string representation of this JSlider
javax.swing.JSlider#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JSlider
javax.swing.JSlider.AccessibleJSlider#getAccessibleStateSet()->AccessibleStateSet:::Get the state set of this object.
javax.swing.JSlider.AccessibleJSlider#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JSlider.AccessibleJSlider#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object
javax.swing.JSlider.AccessibleJSlider#getCurrentAccessibleValue()->Number:::Get the accessible value of this object.
javax.swing.JSlider.AccessibleJSlider#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
javax.swing.JSlider.AccessibleJSlider#getMinimumAccessibleValue()->Number:::Get the minimum accessible value of this object.
javax.swing.JSlider.AccessibleJSlider#getMaximumAccessibleValue()->Number:::Get the maximum accessible value of this object.
javax.swing.JSpinner#getUI()->SpinnerUI:::Returns the look and feel (L&amp;F) object that renders this component.
javax.swing.JSpinner#setUI(SpinnerUI)->void:::Sets the look and feel (L&amp;F) object that renders this component.
javax.swing.JSpinner#getUIClassID()->String:::Returns the suffix used to construct the name of the look and feel (L&amp;F) class used to render this component.
javax.swing.JSpinner#updateUI()->void:::Resets the UI property with the value from the current look and feel.
javax.swing.JSpinner#createEditor(SpinnerModel)->JComponent:::This method is called by the constructors to create the JComponent that displays the current value of the sequence
javax.swing.JSpinner#setModel(SpinnerModel)->void:::Changes the model that represents the value of this spinner
javax.swing.JSpinner#getModel()->SpinnerModel:::Returns the SpinnerModel that defines this spinners sequence of values.
javax.swing.JSpinner#getValue()->Object:::Returns the current value of the model, typically this value is displayed by the editor
javax.swing.JSpinner#setValue(Object)->void:::Changes current value of the model, typically this value is displayed by the editor
javax.swing.JSpinner#getNextValue()->Object:::Returns the object in the sequence that comes after the object returned by getValue()
javax.swing.JSpinner#addChangeListener(ChangeListener)->void:::Adds a listener to the list that is notified each time a change to the model occurs
javax.swing.JSpinner#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from this spinner.
javax.swing.JSpinner#getChangeListeners()->ChangeListener[]:::Returns an array of all the ChangeListeners added to this JSpinner with addChangeListener().
javax.swing.JSpinner#fireStateChanged()->void:::Sends a ChangeEvent, whose source is this JSpinner, to each ChangeListener
javax.swing.JSpinner#getPreviousValue()->Object:::Returns the object in the sequence that comes before the object returned by getValue()
javax.swing.JSpinner#setEditor(JComponent)->void:::Changes the JComponent that displays the current value of the SpinnerModel
javax.swing.JSpinner#getEditor()->JComponent:::Returns the component that displays and potentially changes the model's value.
javax.swing.JSpinner#commitEdit()->void:::Commits the currently edited value to the SpinnerModel
javax.swing.JSpinner.DefaultEditor#dismiss(JSpinner)->void:::Disconnect this editor from the specified JSpinner
javax.swing.JSpinner.DefaultEditor#getSpinner()->JSpinner:::Returns the JSpinner ancestor of this editor or null if none of the ancestors are a JSpinner
javax.swing.JSpinner.DefaultEditor#getTextField()->JFormattedTextField:::Returns the JFormattedTextField child of this editor
javax.swing.JSpinner.DefaultEditor#stateChanged(ChangeEvent)->void:::This method is called when the spinner's model's state changes
javax.swing.JSpinner.DefaultEditor#propertyChange(PropertyChangeEvent)->void:::Called by the JFormattedTextField PropertyChangeListener
javax.swing.JSpinner.DefaultEditor#addLayoutComponent(String, Component)->void:::This LayoutManager method does nothing
javax.swing.JSpinner.DefaultEditor#removeLayoutComponent(Component)->void:::This LayoutManager method does nothing
javax.swing.JSpinner.DefaultEditor#preferredLayoutSize(Container)->Dimension:::Returns the preferred size of first (and only) child plus the size of the parents insets.
javax.swing.JSpinner.DefaultEditor#minimumLayoutSize(Container)->Dimension:::Returns the minimum size of first (and only) child plus the size of the parents insets.
javax.swing.JSpinner.DefaultEditor#layoutContainer(Container)->void:::Resize the one (and only) child to completely fill the area within the parents insets.
javax.swing.JSpinner.DefaultEditor#commitEdit()->void:::Pushes the currently edited value to the SpinnerModel
javax.swing.JSpinner.DefaultEditor#getBaseline(int, int)->int:::Returns the baseline.
javax.swing.JSpinner.DefaultEditor#getBaselineResizeBehavior()->BaselineResizeBehavior:::Returns an enum indicating how the baseline of the component changes as the size changes.
javax.swing.JSpinner.DateEditor#getFormat()->SimpleDateFormat:::Returns the java.text.SimpleDateFormat object the JFormattedTextField uses to parse and format numbers.
javax.swing.JSpinner.DateEditor#getModel()->SpinnerDateModel:::Return our spinner ancestor's SpinnerDateModel.
javax.swing.JSpinner.NumberEditor#getFormat()->DecimalFormat:::Returns the java.text.DecimalFormat object the JFormattedTextField uses to parse and format numbers.
javax.swing.JSpinner.NumberEditor#getModel()->SpinnerNumberModel:::Return our spinner ancestor's SpinnerNumberModel.
javax.swing.JSpinner.NumberEditor#setComponentOrientation(ComponentOrientation)->void::: number editor set component orientation
javax.swing.JSpinner.ListEditor#getModel()->SpinnerListModel:::Return our spinner ancestor's SpinnerNumberModel.
javax.swing.JSpinner#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext for the JSpinner
javax.swing.JSpinner.AccessibleJSpinner#stateChanged(ChangeEvent)->void:::Invoked when the target of the listener has changed its state.
javax.swing.JSpinner.AccessibleJSpinner#getAccessibleRole()->AccessibleRole:::Gets the role of this object
javax.swing.JSpinner.AccessibleJSpinner#getAccessibleChildrenCount()->int:::Returns the number of accessible children of the object.
javax.swing.JSpinner.AccessibleJSpinner#getAccessibleChild(int)->Accessible:::Returns the specified Accessible child of the object
javax.swing.JSpinner.AccessibleJSpinner#getAccessibleAction()->AccessibleAction:::Gets the AccessibleAction associated with this object that supports one or more actions.
javax.swing.JSpinner.AccessibleJSpinner#getAccessibleText()->AccessibleText:::Gets the AccessibleText associated with this object presenting text on the display.
javax.swing.JSpinner.AccessibleJSpinner#getAccessibleValue()->AccessibleValue:::Gets the AccessibleValue associated with this object.
javax.swing.JSpinner.AccessibleJSpinner#getCurrentAccessibleValue()->Number:::Get the value of this object as a Number
javax.swing.JSpinner.AccessibleJSpinner#setCurrentAccessibleValue(Number)->boolean:::Set the value of this object as a Number.
javax.swing.JSpinner.AccessibleJSpinner#getMinimumAccessibleValue()->Number:::Get the minimum value of this object as a Number.
javax.swing.JSpinner.AccessibleJSpinner#getMaximumAccessibleValue()->Number:::Get the maximum value of this object as a Number.
javax.swing.JSpinner.AccessibleJSpinner#getAccessibleActionCount()->int:::Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object
javax.swing.JSpinner.AccessibleJSpinner#getAccessibleActionDescription(int)->String:::Returns a description of the specified action of the object.
javax.swing.JSpinner.AccessibleJSpinner#doAccessibleAction(int)->boolean:::Performs the specified Action on the object
javax.swing.JSpinner.AccessibleJSpinner#getIndexAtPoint(Point)->int:::Given a point in local coordinates, return the zero-based index of the character under that Point
javax.swing.JSpinner.AccessibleJSpinner#getCharacterBounds(int)->Rectangle:::Determines the bounding box of the character at the given index into the string
javax.swing.JSpinner.AccessibleJSpinner#getCharCount()->int:::Returns the number of characters (valid indicies)
javax.swing.JSpinner.AccessibleJSpinner#getCaretPosition()->int:::Returns the zero-based offset of the caret
javax.swing.JSpinner.AccessibleJSpinner#getAtIndex(int, int)->String:::Returns the String at a given index.
javax.swing.JSpinner.AccessibleJSpinner#getAfterIndex(int, int)->String:::Returns the String after a given index.
javax.swing.JSpinner.AccessibleJSpinner#getBeforeIndex(int, int)->String:::Returns the String before a given index.
javax.swing.JSpinner.AccessibleJSpinner#getCharacterAttribute(int)->AttributeSet:::Returns the AttributeSet for a given character at a given index
javax.swing.JSpinner.AccessibleJSpinner#getSelectionStart()->int:::Returns the start offset within the selected text
javax.swing.JSpinner.AccessibleJSpinner#getSelectionEnd()->int:::Returns the end offset within the selected text
javax.swing.JSpinner.AccessibleJSpinner#getSelectedText()->String:::Returns the portion of the text that is selected.
javax.swing.JSpinner.AccessibleJSpinner#setTextContents(String)->void:::Sets the text contents to the specified string.
javax.swing.JSpinner.AccessibleJSpinner#insertTextAtIndex(int, String)->void:::Inserts the specified string at the given index/
javax.swing.JSpinner.AccessibleJSpinner#getTextRange(int, int)->String:::Returns the text string between two indices.
javax.swing.JSpinner.AccessibleJSpinner#delete(int, int)->void:::Deletes the text between two indices
javax.swing.JSpinner.AccessibleJSpinner#cut(int, int)->void:::Cuts the text between two indices into the system clipboard.
javax.swing.JSpinner.AccessibleJSpinner#paste(int)->void:::Pastes the text from the system clipboard into the text starting at the specified index.
javax.swing.JSpinner.AccessibleJSpinner#replaceText(int, int, String)->void:::Replaces the text between two indices with the specified string.
javax.swing.JSpinner.AccessibleJSpinner#selectText(int, int)->void:::Selects the text between two indices.
javax.swing.JSpinner.AccessibleJSpinner#setAttributes(int, int, AttributeSet)->void:::Sets attributes for the text between two indices.
javax.swing.JSplitPane#setUI(SplitPaneUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JSplitPane#getUI()->SplitPaneUI:::Returns the SplitPaneUI that is providing the current look and feel.
javax.swing.JSplitPane#updateUI()->void:::Notification from the UIManager that the L&amp;F has changed
javax.swing.JSplitPane#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JSplitPane#setDividerSize(int)->void:::Sets the size of the divider.
javax.swing.JSplitPane#getDividerSize()->int:::Returns the size of the divider.
javax.swing.JSplitPane#setLeftComponent(Component)->void:::Sets the component to the left (or above) the divider.
javax.swing.JSplitPane#getLeftComponent()->Component:::Returns the component to the left (or above) the divider.
javax.swing.JSplitPane#setTopComponent(Component)->void:::Sets the component above, or to the left of the divider.
javax.swing.JSplitPane#getTopComponent()->Component:::Returns the component above, or to the left of the divider.
javax.swing.JSplitPane#setRightComponent(Component)->void:::Sets the component to the right (or below) the divider.
javax.swing.JSplitPane#getRightComponent()->Component:::Returns the component to the right (or below) the divider.
javax.swing.JSplitPane#setBottomComponent(Component)->void:::Sets the component below, or to the right of the divider.
javax.swing.JSplitPane#getBottomComponent()->Component:::Returns the component below, or to the right of the divider.
javax.swing.JSplitPane#setOneTouchExpandable(boolean)->void:::Sets the value of the oneTouchExpandable property, which must be true for the JSplitPane to provide a UI widget on the divider to quickly expand/collapse the divider
javax.swing.JSplitPane#isOneTouchExpandable()->boolean:::Gets the oneTouchExpandable property.
javax.swing.JSplitPane#setLastDividerLocation(int)->void:::Sets the last location the divider was at to newLastLocation.
javax.swing.JSplitPane#getLastDividerLocation()->int:::Returns the last location the divider was at.
javax.swing.JSplitPane#setOrientation(int)->void:::Sets the orientation, or how the splitter is divided
javax.swing.JSplitPane#getOrientation()->int:::Returns the orientation.
javax.swing.JSplitPane#setContinuousLayout(boolean)->void:::Sets the value of the continuousLayout property, which must be true for the child components to be continuously redisplayed and laid out during user intervention
javax.swing.JSplitPane#isContinuousLayout()->boolean:::Gets the continuousLayout property.
javax.swing.JSplitPane#setResizeWeight(double)->void:::Specifies how to distribute extra space when the size of the split pane changes
javax.swing.JSplitPane#getResizeWeight()->double:::Returns the number that determines how extra space is distributed.
javax.swing.JSplitPane#resetToPreferredSizes()->void:::Lays out the JSplitPane layout based on the preferred size of the children components
javax.swing.JSplitPane#setDividerLocation(double)->void:::Sets the divider location as a percentage of the JSplitPane's size
javax.swing.JSplitPane#setDividerLocation(int)->void:::Sets the location of the divider
javax.swing.JSplitPane#getDividerLocation()->int:::Returns the last value passed to setDividerLocation
javax.swing.JSplitPane#getMinimumDividerLocation()->int:::Returns the minimum location of the divider from the look and feel implementation.
javax.swing.JSplitPane#getMaximumDividerLocation()->int:::Returns the maximum location of the divider from the look and feel implementation.
javax.swing.JSplitPane#remove(Component)->void:::Removes the child component, component from the pane
javax.swing.JSplitPane#remove(int)->void:::Removes the Component at the specified index
javax.swing.JSplitPane#removeAll()->void:::Removes all the child components from the split pane
javax.swing.JSplitPane#isValidateRoot()->boolean:::Returns true, so that calls to revalidate on any descendant of this JSplitPane will cause a request to be queued that will validate the JSplitPane and all its descendants.
javax.swing.JSplitPane#addImpl(Component, Object, int)->void:::Adds the specified component to this split pane
javax.swing.JSplitPane#paintChildren(Graphics)->void:::Subclassed to message the UI with finishedPaintingChildren after super has been messaged, as well as painting the border.
javax.swing.JSplitPane#setUIProperty(String, Object)->void::: split pane set property
javax.swing.JSplitPane#paramString()->String:::Returns a string representation of this JSplitPane
javax.swing.JSplitPane#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JSplitPane
javax.swing.JSplitPane.AccessibleJSplitPane#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object.
javax.swing.JSplitPane.AccessibleJSplitPane#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object
javax.swing.JSplitPane.AccessibleJSplitPane#getCurrentAccessibleValue()->Number:::Gets the accessible value of this object.
javax.swing.JSplitPane.AccessibleJSplitPane#setCurrentAccessibleValue(Number)->boolean:::Sets the value of this object as a Number.
javax.swing.JSplitPane.AccessibleJSplitPane#getMinimumAccessibleValue()->Number:::Gets the minimum accessible value of this object.
javax.swing.JSplitPane.AccessibleJSplitPane#getMaximumAccessibleValue()->Number:::Gets the maximum accessible value of this object.
javax.swing.JSplitPane.AccessibleJSplitPane#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.JTabbedPane#getUI()->TabbedPaneUI:::Returns the UI object which implements the L&amp;F for this component.
javax.swing.JTabbedPane#setUI(TabbedPaneUI)->void:::Sets the UI object which implements the L&amp;F for this component.
javax.swing.JTabbedPane#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JTabbedPane#getUIClassID()->String:::Returns the name of the UI class that implements the L&amp;F for this component.
javax.swing.JTabbedPane.ModelListener#stateChanged(ChangeEvent)->void::: model listener state changed
javax.swing.JTabbedPane#createChangeListener()->ChangeListener:::Subclasses that want to handle ChangeEvents differently can override this to return a subclass of ModelListener or another ChangeListener implementation.
javax.swing.JTabbedPane#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to this tabbedpane.
javax.swing.JTabbedPane#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from this tabbedpane.
javax.swing.JTabbedPane#getChangeListeners()->ChangeListener[]:::Returns an array of all the ChangeListeners added to this JTabbedPane with addChangeListener.
javax.swing.JTabbedPane#fireStateChanged()->void:::Sends a ChangeEvent, with this JTabbedPane as the source, to each registered listener
javax.swing.JTabbedPane#getModel()->SingleSelectionModel:::Returns the model associated with this tabbedpane.
javax.swing.JTabbedPane#setModel(SingleSelectionModel)->void:::Sets the model to be used with this tabbedpane.
javax.swing.JTabbedPane#getTabPlacement()->int:::Returns the placement of the tabs for this tabbedpane.
javax.swing.JTabbedPane#setTabPlacement(int)->void:::Sets the tab placement for this tabbedpane
javax.swing.JTabbedPane#getTabLayoutPolicy()->int:::Returns the policy used by the tabbedpane to layout the tabs when all the tabs will not fit within a single run.
javax.swing.JTabbedPane#setTabLayoutPolicy(int)->void:::Sets the policy which the tabbedpane will use in laying out the tabs when all the tabs will not fit within a single run
javax.swing.JTabbedPane#getSelectedIndex()->int:::Returns the currently selected index for this tabbedpane
javax.swing.JTabbedPane#setSelectedIndex(int)->void:::Sets the selected index for this tabbedpane
javax.swing.JTabbedPane#getSelectedComponent()->Component:::Returns the currently selected component for this tabbedpane
javax.swing.JTabbedPane#setSelectedComponent(Component)->void:::Sets the selected component for this tabbedpane
javax.swing.JTabbedPane#insertTab(String, Icon, Component, String, int)->void:::Inserts a new tab for the given component, at the given index, represented by the given title and/or icon, either of which may be null.
javax.swing.JTabbedPane#addTab(String, Icon, Component, String)->void:::Adds a component and tip represented by a title and/or icon, either of which can be null
javax.swing.JTabbedPane#addTab(String, Icon, Component)->void:::Adds a component represented by a title and/or icon, either of which can be null
javax.swing.JTabbedPane#addTab(String, Component)->void:::Adds a component represented by a title and no icon
javax.swing.JTabbedPane#add(Component)->Component:::Adds a component with a tab title defaulting to the name of the component which is the result of calling component.getName
javax.swing.JTabbedPane#add(String, Component)->Component:::Adds a component with the specified tab title
javax.swing.JTabbedPane#add(Component, int)->Component:::Adds a component at the specified tab index with a tab title defaulting to the name of the component
javax.swing.JTabbedPane#add(Component, Object)->void:::Adds a component to the tabbed pane
javax.swing.JTabbedPane#add(Component, Object, int)->void:::Adds a component at the specified tab index
javax.swing.JTabbedPane#removeTabAt(int)->void:::Removes the tab at index
javax.swing.JTabbedPane#remove(Component)->void:::Removes the specified Component from the JTabbedPane
javax.swing.JTabbedPane#remove(int)->void:::Removes the tab and component which corresponds to the specified index.
javax.swing.JTabbedPane#removeAll()->void:::Removes all the tabs and their corresponding components from the tabbedpane.
javax.swing.JTabbedPane#getTabCount()->int:::Returns the number of tabs in this tabbedpane.
javax.swing.JTabbedPane#getTabRunCount()->int:::Returns the number of tab runs currently used to display the tabs.
javax.swing.JTabbedPane#getTitleAt(int)->String:::Returns the tab title at index.
javax.swing.JTabbedPane#getIconAt(int)->Icon:::Returns the tab icon at index.
javax.swing.JTabbedPane#getDisabledIconAt(int)->Icon:::Returns the tab disabled icon at index
javax.swing.JTabbedPane#getToolTipTextAt(int)->String:::Returns the tab tooltip text at index.
javax.swing.JTabbedPane#getBackgroundAt(int)->Color:::Returns the tab background color at index.
javax.swing.JTabbedPane#getForegroundAt(int)->Color:::Returns the tab foreground color at index.
javax.swing.JTabbedPane#isEnabledAt(int)->boolean:::Returns whether or not the tab at index is currently enabled.
javax.swing.JTabbedPane#getComponentAt(int)->Component:::Returns the component at index.
javax.swing.JTabbedPane#getMnemonicAt(int)->int:::Returns the keyboard mnemonic for accessing the specified tab
javax.swing.JTabbedPane#getDisplayedMnemonicIndexAt(int)->int:::Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.
javax.swing.JTabbedPane#getBoundsAt(int)->Rectangle:::Returns the tab bounds at index
javax.swing.JTabbedPane#setTitleAt(int, String)->void:::Sets the title at index to title which can be null
javax.swing.JTabbedPane#setIconAt(int, Icon)->void:::Sets the icon at index to icon which can be null
javax.swing.JTabbedPane#setDisabledIconAt(int, Icon)->void:::Sets the disabled icon at index to icon which can be null
javax.swing.JTabbedPane#setToolTipTextAt(int, String)->void:::Sets the tooltip text at index to toolTipText which can be null
javax.swing.JTabbedPane#setBackgroundAt(int, Color)->void:::Sets the background color at index to background which can be null, in which case the tab's background color will default to the background color of the tabbedpane
javax.swing.JTabbedPane#setForegroundAt(int, Color)->void:::Sets the foreground color at index to foreground which can be null, in which case the tab's foreground color will default to the foreground color of this tabbedpane
javax.swing.JTabbedPane#setEnabledAt(int, boolean)->void:::Sets whether or not the tab at index is enabled
javax.swing.JTabbedPane#setComponentAt(int, Component)->void:::Sets the component at index to component
javax.swing.JTabbedPane#setDisplayedMnemonicIndexAt(int, int)->void:::Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic
javax.swing.JTabbedPane#setMnemonicAt(int, int)->void:::Sets the keyboard mnemonic for accessing the specified tab
javax.swing.JTabbedPane#indexOfTab(String)->int:::Returns the first tab index with a given title,  or -1 if no tab has this title.
javax.swing.JTabbedPane#indexOfTab(Icon)->int:::Returns the first tab index with a given icon, or -1 if no tab has this icon.
javax.swing.JTabbedPane#indexOfComponent(Component)->int:::Returns the index of the tab for the specified component
javax.swing.JTabbedPane#indexAtLocation(int, int)->int:::Returns the tab index corresponding to the tab whose bounds intersect the specified location
javax.swing.JTabbedPane#getToolTipText(MouseEvent)->String:::Returns the tooltip text for the component determined by the mouse event location.
javax.swing.JTabbedPane#compWriteObjectNotify()->void::: tabbed pane comp write object notify
javax.swing.JTabbedPane#paramString()->String:::Returns a string representation of this JTabbedPane
javax.swing.JTabbedPane#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JTabbedPane
javax.swing.JTabbedPane.AccessibleJTabbedPane#getAccessibleName()->String:::Returns the accessible name of this object, or null if there is no accessible name.
javax.swing.JTabbedPane.AccessibleJTabbedPane#stateChanged(ChangeEvent)->void::: accessible tabbed pane state changed
javax.swing.JTabbedPane.AccessibleJTabbedPane#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JTabbedPane.AccessibleJTabbedPane#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object.
javax.swing.JTabbedPane.AccessibleJTabbedPane#getAccessibleChild(int)->Accessible:::Return the specified Accessible child of the object.
javax.swing.JTabbedPane.AccessibleJTabbedPane#getAccessibleSelection()->AccessibleSelection:::Gets the AccessibleSelection associated with this object
javax.swing.JTabbedPane.AccessibleJTabbedPane#getAccessibleAt(Point)->Accessible:::Returns the Accessible child contained at the local coordinate Point, if one exists
javax.swing.JTabbedPane.AccessibleJTabbedPane#getAccessibleSelectionCount()->int::: accessible tabbed pane get accessible selection count
javax.swing.JTabbedPane.AccessibleJTabbedPane#getAccessibleSelection(int)->Accessible::: accessible tabbed pane get accessible selection
javax.swing.JTabbedPane.AccessibleJTabbedPane#isAccessibleChildSelected(int)->boolean::: accessible tabbed pane is accessible child selected
javax.swing.JTabbedPane.AccessibleJTabbedPane#addAccessibleSelection(int)->void::: accessible tabbed pane add accessible selection
javax.swing.JTabbedPane.AccessibleJTabbedPane#removeAccessibleSelection(int)->void::: accessible tabbed pane remove accessible selection
javax.swing.JTabbedPane.AccessibleJTabbedPane#clearAccessibleSelection()->void::: accessible tabbed pane clear accessible selection
javax.swing.JTabbedPane.AccessibleJTabbedPane#selectAllAccessibleSelection()->void::: accessible tabbed pane select all accessible selection
javax.swing.JTabbedPane#setTabComponentAt(int, Component)->void:::Sets the component that is responsible for rendering the title for the specified tab
javax.swing.JTabbedPane#getTabComponentAt(int)->Component:::Returns the tab component at index.
javax.swing.JTabbedPane#indexOfTabComponent(Component)->int:::Returns the index of the tab for the specified tab component
javax.swing.JTable.DropLocation#getRow()->int:::Returns the row index where a dropped item should be placed in the table
javax.swing.JTable.DropLocation#getColumn()->int:::Returns the column index where a dropped item should be placed in the table
javax.swing.JTable.DropLocation#isInsertRow()->boolean:::Returns whether or not this location represents an insert of a row.
javax.swing.JTable.DropLocation#isInsertColumn()->boolean:::Returns whether or not this location represents an insert of a column.
javax.swing.JTable.DropLocation#toString()->String:::Returns a string representation of this drop location
javax.swing.JTable#addNotify()->void:::Calls the configureEnclosingScrollPane method.
javax.swing.JTable#configureEnclosingScrollPane()->void:::If this JTable is the viewportView of an enclosing JScrollPane (the usual situation), configure this ScrollPane by, amongst other things, installing the table's tableHeader as the columnHeaderView of the scroll pane
javax.swing.JTable#removeNotify()->void:::Calls the unconfigureEnclosingScrollPane method.
javax.swing.JTable#unconfigureEnclosingScrollPane()->void:::Reverses the effect of configureEnclosingScrollPane by replacing the columnHeaderView of the enclosing scroll pane with null
javax.swing.JTable#setUIProperty(String, Object)->void::: table set property
javax.swing.JTable#createScrollPaneForTable(JTable)->JScrollPane:::Equivalent to new JScrollPane(aTable).
javax.swing.JTable#setTableHeader(JTableHeader)->void:::Sets the tableHeader working with this JTable to newHeader
javax.swing.JTable#getTableHeader()->JTableHeader:::Returns the tableHeader used by this JTable.
javax.swing.JTable#setRowHeight(int)->void:::Sets the height, in pixels, of all cells to rowHeight, revalidates, and repaints
javax.swing.JTable#getRowHeight()->int:::Returns the height of a table row, in pixels.
javax.swing.JTable#setRowHeight(int, int)->void:::Sets the height for row to rowHeight, revalidates, and repaints
javax.swing.JTable#getRowHeight(int)->int:::Returns the height, in pixels, of the cells in row.
javax.swing.JTable#setRowMargin(int)->void:::Sets the amount of empty space between cells in adjacent rows.
javax.swing.JTable#getRowMargin()->int:::Gets the amount of empty space, in pixels, between cells
javax.swing.JTable#setIntercellSpacing(Dimension)->void:::Sets the rowMargin and the columnMargin -- the height and width of the space between cells -- to intercellSpacing.
javax.swing.JTable#getIntercellSpacing()->Dimension:::Returns the horizontal and vertical space between cells
javax.swing.JTable#setGridColor(Color)->void:::Sets the color used to draw grid lines to gridColor and redisplays
javax.swing.JTable#getGridColor()->Color:::Returns the color used to draw grid lines
javax.swing.JTable#setShowGrid(boolean)->void::: Sets whether the table draws grid lines around cells
javax.swing.JTable#setShowHorizontalLines(boolean)->void::: Sets whether the table draws horizontal lines between cells
javax.swing.JTable#setShowVerticalLines(boolean)->void::: Sets whether the table draws vertical lines between cells
javax.swing.JTable#getShowHorizontalLines()->boolean:::Returns true if the table draws horizontal lines between cells, false if it doesn't
javax.swing.JTable#getShowVerticalLines()->boolean:::Returns true if the table draws vertical lines between cells, false if it doesn't
javax.swing.JTable#setAutoResizeMode(int)->void:::Sets the table's auto resize mode when the table is resized
javax.swing.JTable#getAutoResizeMode()->int:::Returns the auto resize mode of the table
javax.swing.JTable#setAutoCreateColumnsFromModel(boolean)->void:::Sets this table's autoCreateColumnsFromModel flag
javax.swing.JTable#getAutoCreateColumnsFromModel()->boolean:::Determines whether the table will create default columns from the model
javax.swing.JTable#createDefaultColumnsFromModel()->void:::Creates default columns for the table from the data model using the getColumnCount method defined in the TableModel interface
javax.swing.JTable#setDefaultRenderer(Class, TableCellRenderer)->void:::Sets a default cell renderer to be used if no renderer has been set in a TableColumn
javax.swing.JTable#getDefaultRenderer(Class)->TableCellRenderer:::Returns the cell renderer to be used when no renderer has been set in a TableColumn
javax.swing.JTable#setDefaultEditor(Class, TableCellEditor)->void:::Sets a default cell editor to be used if no editor has been set in a TableColumn
javax.swing.JTable#getDefaultEditor(Class)->TableCellEditor:::Returns the editor to be used when no editor has been set in a TableColumn
javax.swing.JTable#setDragEnabled(boolean)->void:::Turns on or off automatic drag handling
javax.swing.JTable#getDragEnabled()->boolean:::Returns whether or not automatic drag handling is enabled.
javax.swing.JTable#setDropMode(DropMode)->void:::Sets the drop mode for this component
javax.swing.JTable#getDropMode()->DropMode:::Returns the drop mode for this component.
javax.swing.JTable#dropLocationForPoint(Point)->DropLocation:::Calculates a drop location in this component, representing where a drop at the given point should insert data.
javax.swing.JTable#setDropLocation(TransferHandler.DropLocation, Object, boolean)->Object:::Called to set or clear the drop location during a DnD operation
javax.swing.JTable#getDropLocation()->DropLocation:::Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown
javax.swing.JTable#setAutoCreateRowSorter(boolean)->void:::Specifies whether a RowSorter should be created for the table whenever its model changes
javax.swing.JTable#getAutoCreateRowSorter()->boolean:::Returns true if whenever the model changes, a new RowSorter should be created and installed as the table's sorter; otherwise, returns false.
javax.swing.JTable#setUpdateSelectionOnSort(boolean)->void:::Specifies whether the selection should be updated after sorting
javax.swing.JTable#getUpdateSelectionOnSort()->boolean:::Returns true if the selection should be updated after sorting.
javax.swing.JTable#setRowSorter(RowSorter)->void:::Sets the RowSorter
javax.swing.JTable#getRowSorter()->RowSorter:::Returns the object responsible for sorting.
javax.swing.JTable#setSelectionMode(int)->void:::Sets the table's selection mode to allow only single selections, a single contiguous interval, or multiple intervals
javax.swing.JTable#setRowSelectionAllowed(boolean)->void:::Sets whether the rows in this model can be selected.
javax.swing.JTable#getRowSelectionAllowed()->boolean:::Returns true if rows can be selected.
javax.swing.JTable#setColumnSelectionAllowed(boolean)->void:::Sets whether the columns in this model can be selected.
javax.swing.JTable#getColumnSelectionAllowed()->boolean:::Returns true if columns can be selected.
javax.swing.JTable#setCellSelectionEnabled(boolean)->void:::Sets whether this table allows both a column selection and a row selection to exist simultaneously
javax.swing.JTable#getCellSelectionEnabled()->boolean:::Returns true if both row and column selection models are enabled
javax.swing.JTable#selectAll()->void::: Selects all rows, columns, and cells in the table.
javax.swing.JTable#clearSelection()->void:::Deselects all selected columns and rows.
javax.swing.JTable#setRowSelectionInterval(int, int)->void:::Selects the rows from index0 to index1, inclusive.
javax.swing.JTable#setColumnSelectionInterval(int, int)->void:::Selects the columns from index0 to index1, inclusive.
javax.swing.JTable#addRowSelectionInterval(int, int)->void:::Adds the rows from index0 to index1, inclusive, to the current selection.
javax.swing.JTable#addColumnSelectionInterval(int, int)->void:::Adds the columns from index0 to index1, inclusive, to the current selection.
javax.swing.JTable#removeRowSelectionInterval(int, int)->void:::Deselects the rows from index0 to index1, inclusive.
javax.swing.JTable#removeColumnSelectionInterval(int, int)->void:::Deselects the columns from index0 to index1, inclusive.
javax.swing.JTable#getSelectedRow()->int:::Returns the index of the first selected row, -1 if no row is selected.
javax.swing.JTable#getSelectedColumn()->int:::Returns the index of the first selected column, -1 if no column is selected.
javax.swing.JTable#getSelectedRows()->int[]:::Returns the indices of all selected rows.
javax.swing.JTable#getSelectedColumns()->int[]:::Returns the indices of all selected columns.
javax.swing.JTable#getSelectedRowCount()->int:::Returns the number of selected rows.
javax.swing.JTable#getSelectedColumnCount()->int:::Returns the number of selected columns.
javax.swing.JTable#isRowSelected(int)->boolean:::Returns true if the specified index is in the valid range of rows, and the row at that index is selected.
javax.swing.JTable#isColumnSelected(int)->boolean:::Returns true if the specified index is in the valid range of columns, and the column at that index is selected.
javax.swing.JTable#isCellSelected(int, int)->boolean:::Returns true if the specified indices are in the valid range of rows and columns and the cell at the specified position is selected.
javax.swing.JTable#changeSelection(int, int, boolean, boolean)->void:::Updates the selection models of the table, depending on the state of the two flags: toggle and extend
javax.swing.JTable#getSelectionForeground()->Color:::Returns the foreground color for selected cells.
javax.swing.JTable#setSelectionForeground(Color)->void:::Sets the foreground color for selected cells
javax.swing.JTable#getSelectionBackground()->Color:::Returns the background color for selected cells.
javax.swing.JTable#setSelectionBackground(Color)->void:::Sets the background color for selected cells
javax.swing.JTable#getColumn(Object)->TableColumn:::Returns the TableColumn object for the column in the table whose identifier is equal to identifier, when compared using equals.
javax.swing.JTable#convertColumnIndexToModel(int)->int:::Maps the index of the column in the view at viewColumnIndex to the index of the column in the table model
javax.swing.JTable#convertColumnIndexToView(int)->int:::Maps the index of the column in the table model at modelColumnIndex to the index of the column in the view
javax.swing.JTable#convertRowIndexToView(int)->int:::Maps the index of the row in terms of the TableModel to the view
javax.swing.JTable#convertRowIndexToModel(int)->int:::Maps the index of the row in terms of the view to the underlying TableModel
javax.swing.JTable#getRowCount()->int:::Returns the number of rows that can be shown in the JTable, given unlimited space
javax.swing.JTable#getColumnCount()->int:::Returns the number of columns in the column model
javax.swing.JTable#getColumnName(int)->String:::Returns the name of the column appearing in the view at column position column.
javax.swing.JTable#getColumnClass(int)->Class:::Returns the type of the column appearing in the view at column position column.
javax.swing.JTable#getValueAt(int, int)->Object:::Returns the cell value at row and column
javax.swing.JTable#setValueAt(Object, int, int)->void:::Sets the value for the cell in the table model at row and column
javax.swing.JTable#isCellEditable(int, int)->boolean:::Returns true if the cell at row and column is editable
javax.swing.JTable#addColumn(TableColumn)->void::: Appends aColumn to the end of the array of columns held by  this JTable's column model
javax.swing.JTable#removeColumn(TableColumn)->void::: Removes aColumn from this JTable's  array of columns
javax.swing.JTable#moveColumn(int, int)->void:::Moves the column column to the position currently occupied by the column targetColumn in the view
javax.swing.JTable#columnAtPoint(Point)->int:::Returns the index of the column that point lies in, or -1 if the result is not in the range [0, getColumnCount()-1].
javax.swing.JTable#rowAtPoint(Point)->int:::Returns the index of the row that point lies in, or -1 if the result is not in the range [0, getRowCount()-1].
javax.swing.JTable#getCellRect(int, int, boolean)->Rectangle:::Returns a rectangle for the cell that lies at the intersection of row and column
javax.swing.JTable#doLayout()->void:::Causes this table to lay out its rows and columns
javax.swing.JTable#sizeColumnsToFit(boolean)->void:::Sizes the table columns to fit the available space.
javax.swing.JTable#sizeColumnsToFit(int)->void:::Obsolete as of Java 2 platform v1.4
javax.swing.JTable#getToolTipText(MouseEvent)->String:::Overrides JComponent's getToolTipText method in order to allow the renderer's tips to be used if it has text set
javax.swing.JTable#setSurrendersFocusOnKeystroke(boolean)->void:::Sets whether editors in this JTable get the keyboard focus when an editor is activated as a result of the JTable forwarding keyboard events for a cell
javax.swing.JTable#getSurrendersFocusOnKeystroke()->boolean:::Returns true if the editor should get the focus when keystrokes cause the editor to be activated
javax.swing.JTable#editCellAt(int, int)->boolean:::Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable
javax.swing.JTable#editCellAt(int, int, EventObject)->boolean:::Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable
javax.swing.JTable#isEditing()->boolean:::Returns true if a cell is being edited.
javax.swing.JTable#getEditorComponent()->Component:::Returns the component that is handling the editing session
javax.swing.JTable#getEditingColumn()->int:::Returns the index of the column that contains the cell currently being edited
javax.swing.JTable#getEditingRow()->int:::Returns the index of the row that contains the cell currently being edited
javax.swing.JTable#getUI()->TableUI:::Returns the L&amp;F object that renders this component.
javax.swing.JTable#setUI(TableUI)->void:::Sets the L&amp;F object that renders this component and repaints.
javax.swing.JTable#updateUI()->void:::Notification from the UIManager that the L&amp;F has changed
javax.swing.JTable#getUIClassID()->String:::Returns the suffix used to construct the name of the L&amp;F class used to render this component.
javax.swing.JTable#setModel(TableModel)->void:::Sets the data model for this table to dataModel and registers with it for listener notifications from the new data model.
javax.swing.JTable#getModel()->TableModel:::Returns the TableModel that provides the data displayed by this JTable.
javax.swing.JTable#setColumnModel(TableColumnModel)->void:::Sets the column model for this table to columnModel and registers for listener notifications from the new column model
javax.swing.JTable#getColumnModel()->TableColumnModel:::Returns the TableColumnModel that contains all column information of this table.
javax.swing.JTable#setSelectionModel(ListSelectionModel)->void:::Sets the row selection model for this table to selectionModel and registers for listener notifications from the new selection model.
javax.swing.JTable#getSelectionModel()->ListSelectionModel:::Returns the ListSelectionModel that is used to maintain row selection state.
javax.swing.JTable#sorterChanged(RowSorterEvent)->void:::RowSorterListener notification that the RowSorter has changed in some way.
javax.swing.JTable#tableChanged(TableModelEvent)->void:::Invoked when this table's TableModel generates a TableModelEvent
javax.swing.JTable#columnAdded(TableColumnModelEvent)->void:::Invoked when a column is added to the table column model
javax.swing.JTable#columnRemoved(TableColumnModelEvent)->void:::Invoked when a column is removed from the table column model
javax.swing.JTable#columnMoved(TableColumnModelEvent)->void:::Invoked when a column is repositioned
javax.swing.JTable#columnMarginChanged(ChangeEvent)->void:::Invoked when a column is moved due to a margin change
javax.swing.JTable#columnSelectionChanged(ListSelectionEvent)->void:::Invoked when the selection model of the TableColumnModel is changed
javax.swing.JTable#valueChanged(ListSelectionEvent)->void:::Invoked when the row selection changes -- repaints to show the new selection
javax.swing.JTable#editingStopped(ChangeEvent)->void:::Invoked when editing is finished
javax.swing.JTable#editingCanceled(ChangeEvent)->void:::Invoked when editing is canceled
javax.swing.JTable#setPreferredScrollableViewportSize(Dimension)->void:::Sets the preferred size of the viewport for this table.
javax.swing.JTable#getPreferredScrollableViewportSize()->Dimension:::Returns the preferred size of the viewport for this table.
javax.swing.JTable#getScrollableUnitIncrement(Rectangle, int, int)->int:::Returns the scroll increment (in pixels) that completely exposes one new row or column (depending on the orientation)
javax.swing.JTable#getScrollableBlockIncrement(Rectangle, int, int)->int:::Returns visibleRect.height or visibleRect.width, depending on this table's orientation
javax.swing.JTable#getScrollableTracksViewportWidth()->boolean:::Returns false if autoResizeMode is set to AUTO_RESIZE_OFF, which indicates that the width of the viewport does not determine the width of the table
javax.swing.JTable#getScrollableTracksViewportHeight()->boolean:::Returns false to indicate that the height of the viewport does not determine the height of the table, unless getFillsViewportHeight is true and the preferred height of the table is smaller than the viewport's height.
javax.swing.JTable#setFillsViewportHeight(boolean)->void:::Sets whether or not this table is always made large enough to fill the height of an enclosing viewport
javax.swing.JTable#getFillsViewportHeight()->boolean:::Returns whether or not this table is always made large enough to fill the height of an enclosing viewport.
javax.swing.JTable#processKeyBinding(KeyStroke, KeyEvent, int, boolean)->boolean::: table process key binding
javax.swing.JTable#createDefaultRenderers()->void:::Creates default cell renderers for objects, numbers, doubles, dates, booleans, and icons.
javax.swing.JTable.DoubleRenderer#setValue(Object)->void::: double renderer set value
javax.swing.JTable.DateRenderer#setValue(Object)->void::: date renderer set value
javax.swing.JTable.IconRenderer#setValue(Object)->void::: icon renderer set value
javax.swing.JTable.BooleanRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)->Component::: boolean renderer get table cell renderer component
javax.swing.JTable#createDefaultEditors()->void:::Creates default cell editors for objects, numbers, and boolean values.
javax.swing.JTable.GenericEditor#stopCellEditing()->boolean::: generic editor stop cell editing
javax.swing.JTable.GenericEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int)->Component::: generic editor get table cell editor component
javax.swing.JTable.GenericEditor#getCellEditorValue()->Object::: generic editor get cell editor value
javax.swing.JTable#initializeLocalVars()->void:::Initializes table properties to their default values.
javax.swing.JTable#createDefaultDataModel()->TableModel:::Returns the default table model object, which is a DefaultTableModel
javax.swing.JTable#createDefaultColumnModel()->TableColumnModel:::Returns the default column model object, which is a DefaultTableColumnModel
javax.swing.JTable#createDefaultSelectionModel()->ListSelectionModel:::Returns the default selection model object, which is a DefaultListSelectionModel
javax.swing.JTable#createDefaultTableHeader()->JTableHeader:::Returns the default table header object, which is a JTableHeader
javax.swing.JTable#resizeAndRepaint()->void:::Equivalent to revalidate followed by repaint.
javax.swing.JTable#getCellEditor()->TableCellEditor:::Returns the active cell editor, which is null if the table is not currently editing.
javax.swing.JTable#setCellEditor(TableCellEditor)->void:::Sets the active cell editor.
javax.swing.JTable#setEditingColumn(int)->void:::Sets the editingColumn variable.
javax.swing.JTable#setEditingRow(int)->void:::Sets the editingRow variable.
javax.swing.JTable#getCellRenderer(int, int)->TableCellRenderer:::Returns an appropriate renderer for the cell specified by this row and column
javax.swing.JTable#prepareRenderer(TableCellRenderer, int, int)->Component:::Prepares the renderer by querying the data model for the value and selection state of the cell at row, column
javax.swing.JTable#getCellEditor(int, int)->TableCellEditor:::Returns an appropriate editor for the cell specified by row and column
javax.swing.JTable#prepareEditor(TableCellEditor, int, int)->Component:::Prepares the editor by querying the data model for the value and selection state of the cell at row, column
javax.swing.JTable#removeEditor()->void:::Discards the editor object and frees the real estate it used for cell rendering.
javax.swing.JTable#compWriteObjectNotify()->void::: table comp write object notify
javax.swing.JTable#paramString()->String:::Returns a string representation of this table
javax.swing.JTable.CellEditorRemover#propertyChange(PropertyChangeEvent)->void::: cell editor remover property change
javax.swing.JTable#print()->boolean:::A convenience method that displays a printing dialog, and then prints this JTable in mode PrintMode.FIT_WIDTH, with no header or footer text
javax.swing.JTable#print(PrintMode)->boolean:::A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with no header or footer text
javax.swing.JTable#print(PrintMode, MessageFormat, MessageFormat)->boolean:::A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with the specified header and footer text
javax.swing.JTable#print(PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean)->boolean:::Prints this table, as specified by the fully featured #print(JTable.PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean, PrintService) print method, with the default printer specified as the print service.
javax.swing.JTable#print(PrintMode, MessageFormat, MessageFormat, boolean, PrintRequestAttributeSet, boolean, PrintService)->boolean:::Prints this JTable
javax.swing.JTable#getPrintable(PrintMode, MessageFormat, MessageFormat)->Printable:::Return a Printable for use in printing this JTable
javax.swing.JTable#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JTable
javax.swing.JTable.AccessibleJTable#propertyChange(PropertyChangeEvent)->void:::Track changes to selection model, column model, etc
javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange#getType()->int:::Returns the type.
javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange#getFirstRow()->int:::Returns the first row.
javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange#getLastRow()->int:::Returns the last row.
javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange#getFirstColumn()->int:::Returns the first column.
javax.swing.JTable.AccessibleJTable.AccessibleJTableModelChange#getLastColumn()->int:::Returns the last column.
javax.swing.JTable.AccessibleJTable#tableChanged(TableModelEvent)->void:::Track changes to the table contents
javax.swing.JTable.AccessibleJTable#tableRowsInserted(TableModelEvent)->void:::Track changes to the table contents (row insertions)
javax.swing.JTable.AccessibleJTable#tableRowsDeleted(TableModelEvent)->void:::Track changes to the table contents (row deletions)
javax.swing.JTable.AccessibleJTable#columnAdded(TableColumnModelEvent)->void:::Track changes to the table contents (column insertions)
javax.swing.JTable.AccessibleJTable#columnRemoved(TableColumnModelEvent)->void:::Track changes to the table contents (column deletions)
javax.swing.JTable.AccessibleJTable#columnMoved(TableColumnModelEvent)->void:::Track changes of a column repositioning.
javax.swing.JTable.AccessibleJTable#columnMarginChanged(ChangeEvent)->void:::Track changes of a column moving due to margin changes.
javax.swing.JTable.AccessibleJTable#columnSelectionChanged(ListSelectionEvent)->void:::Track that the selection model of the TableColumnModel changed.
javax.swing.JTable.AccessibleJTable#editingStopped(ChangeEvent)->void:::Track changes to a cell's contents
javax.swing.JTable.AccessibleJTable#editingCanceled(ChangeEvent)->void:::Invoked when editing is canceled
javax.swing.JTable.AccessibleJTable#valueChanged(ListSelectionEvent)->void:::Track changes to table cell selections
javax.swing.JTable.AccessibleJTable#getAccessibleSelection()->AccessibleSelection:::Get the AccessibleSelection associated with this object
javax.swing.JTable.AccessibleJTable#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.JTable.AccessibleJTable#getAccessibleAt(Point)->Accessible:::Returns the Accessible child, if one exists, contained at the local coordinate Point.
javax.swing.JTable.AccessibleJTable#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object
javax.swing.JTable.AccessibleJTable#getAccessibleChild(int)->Accessible:::Returns the nth Accessible child of the object.
javax.swing.JTable.AccessibleJTable#getAccessibleSelectionCount()->int:::Returns the number of Accessible children currently selected
javax.swing.JTable.AccessibleJTable#getAccessibleSelection(int)->Accessible:::Returns an Accessible representing the specified selected child in the object
javax.swing.JTable.AccessibleJTable#isAccessibleChildSelected(int)->boolean:::Determines if the current child of this object is selected.
javax.swing.JTable.AccessibleJTable#addAccessibleSelection(int)->void:::Adds the specified Accessible child of the object to the object's selection
javax.swing.JTable.AccessibleJTable#removeAccessibleSelection(int)->void:::Removes the specified child of the object from the object's selection
javax.swing.JTable.AccessibleJTable#clearAccessibleSelection()->void:::Clears the selection in the object, so that no children in the object are selected.
javax.swing.JTable.AccessibleJTable#selectAllAccessibleSelection()->void:::Causes every child of the object to be selected, but only if the JTable supports multiple selections, and if individual cell selection is enabled.
javax.swing.JTable.AccessibleJTable#getAccessibleRow(int)->int:::Returns the row number of an index in the table.
javax.swing.JTable.AccessibleJTable#getAccessibleColumn(int)->int:::Returns the column number of an index in the table.
javax.swing.JTable.AccessibleJTable#getAccessibleIndex(int, int)->int:::Returns the index at a row and column in the table.
javax.swing.JTable.AccessibleJTable#getAccessibleTable()->AccessibleTable:::Gets the AccessibleTable associated with this object
javax.swing.JTable.AccessibleJTable#getAccessibleCaption()->Accessible:::Returns the caption for the table.
javax.swing.JTable.AccessibleJTable#setAccessibleCaption(Accessible)->void:::Sets the caption for the table.
javax.swing.JTable.AccessibleJTable#getAccessibleSummary()->Accessible:::Returns the summary description of the table.
javax.swing.JTable.AccessibleJTable#setAccessibleSummary(Accessible)->void:::Sets the summary description of the table.
javax.swing.JTable.AccessibleJTable#getAccessibleRowCount()->int::: accessible table get accessible row count
javax.swing.JTable.AccessibleJTable#getAccessibleColumnCount()->int::: accessible table get accessible column count
javax.swing.JTable.AccessibleJTable#getAccessibleAt(int, int)->Accessible::: accessible table get accessible at
javax.swing.JTable.AccessibleJTable#getAccessibleRowExtentAt(int, int)->int:::Returns the number of rows occupied by the Accessible at a specified row and column in the table.
javax.swing.JTable.AccessibleJTable#getAccessibleColumnExtentAt(int, int)->int:::Returns the number of columns occupied by the Accessible at a given (row, column).
javax.swing.JTable.AccessibleJTable#getAccessibleRowHeader()->AccessibleTable:::Returns the row headers as an AccessibleTable.
javax.swing.JTable.AccessibleJTable#setAccessibleRowHeader(AccessibleTable)->void:::Sets the row headers as an AccessibleTable.
javax.swing.JTable.AccessibleJTable#getAccessibleColumnHeader()->AccessibleTable:::Returns the column headers as an AccessibleTable.
javax.swing.JTable.AccessibleJTable#setAccessibleColumnHeader(AccessibleTable)->void:::Sets the column headers as an AccessibleTable.
javax.swing.JTable.AccessibleJTable#getAccessibleRowDescription(int)->Accessible:::Returns the description of the specified row in the table.
javax.swing.JTable.AccessibleJTable#setAccessibleRowDescription(int, Accessible)->void:::Sets the description text of the specified row of the table.
javax.swing.JTable.AccessibleJTable#getAccessibleColumnDescription(int)->Accessible:::Returns the description of the specified column in the table.
javax.swing.JTable.AccessibleJTable#setAccessibleColumnDescription(int, Accessible)->void:::Sets the description text of the specified column of the table.
javax.swing.JTable.AccessibleJTable#isAccessibleSelected(int, int)->boolean:::Returns a boolean value indicating whether the accessible at a given (row, column) is selected.
javax.swing.JTable.AccessibleJTable#isAccessibleRowSelected(int)->boolean:::Returns a boolean value indicating whether the specified row is selected.
javax.swing.JTable.AccessibleJTable#isAccessibleColumnSelected(int)->boolean:::Returns a boolean value indicating whether the specified column is selected.
javax.swing.JTable.AccessibleJTable#getSelectedAccessibleRows()->int[]:::Returns the selected rows in a table.
javax.swing.JTable.AccessibleJTable#getSelectedAccessibleColumns()->int[]:::Returns the selected columns in a table.
javax.swing.JTable.AccessibleJTable#getAccessibleRowAtIndex(int)->int:::Returns the row at a given index into the table.
javax.swing.JTable.AccessibleJTable#getAccessibleColumnAtIndex(int)->int:::Returns the column at a given index into the table.
javax.swing.JTable.AccessibleJTable#getAccessibleIndexAt(int, int)->int:::Returns the index at a given (row, column) in the table.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this component
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getCurrentAccessibleContext()->AccessibleContext:::Gets the AccessibleContext for the table cell renderer.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getCurrentComponent()->Component:::Gets the table cell renderer component.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleName()->String:::Gets the accessible name of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setAccessibleName(String)->void:::Sets the localized accessible name of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleDescription()->String:::Gets the accessible description of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setAccessibleDescription(String)->void:::Sets the accessible description of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleRole()->AccessibleRole:::Gets the role of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleParent()->Accessible:::Gets the Accessible parent of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleIndexInParent()->int:::Gets the index of this object in its accessible parent.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleChild(int)->Accessible:::Returns the specified Accessible child of the object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getLocale()->Locale:::Gets the locale of the component
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleAction()->AccessibleAction:::Gets the AccessibleAction associated with this object if one exists
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleComponent()->AccessibleComponent:::Gets the AccessibleComponent associated with this object if one exists
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleSelection()->AccessibleSelection:::Gets the AccessibleSelection associated with this object if one exists
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleText()->AccessibleText:::Gets the AccessibleText associated with this object if one exists
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleValue()->AccessibleValue:::Gets the AccessibleValue associated with this object if one exists
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getBackground()->Color:::Gets the background color of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setBackground(Color)->void:::Sets the background color of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getForeground()->Color:::Gets the foreground color of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setForeground(Color)->void:::Sets the foreground color of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getCursor()->Cursor:::Gets the Cursor of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setCursor(Cursor)->void:::Sets the Cursor of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getFont()->Font:::Gets the Font of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setFont(Font)->void:::Sets the Font of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getFontMetrics(Font)->FontMetrics:::Gets the FontMetrics of this object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#isEnabled()->boolean:::Determines if the object is enabled.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setEnabled(boolean)->void:::Sets the enabled state of the object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#isVisible()->boolean:::Determines if this object is visible
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setVisible(boolean)->void:::Sets the visible state of the object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#isShowing()->boolean:::Determines if the object is showing
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#contains(Point)->boolean:::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getLocationOnScreen()->Point:::Returns the location of the object on the screen.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getLocation()->Point:::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setLocation(Point)->void:::Sets the location of the object relative to the parent.
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getBounds()->Rectangle::: accessible table cell get bounds
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setBounds(Rectangle)->void::: accessible table cell set bounds
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getSize()->Dimension::: accessible table cell get size
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#setSize(Dimension)->void::: accessible table cell set size
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#getAccessibleAt(Point)->Accessible::: accessible table cell get accessible at
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#isFocusTraversable()->boolean::: accessible table cell is focus traversable
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#requestFocus()->void::: accessible table cell request focus
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#addFocusListener(FocusListener)->void::: accessible table cell add focus listener
javax.swing.JTable.AccessibleJTable.AccessibleJTableCell#removeFocusListener(FocusListener)->void::: accessible table cell remove focus listener
javax.swing.JTextArea#getUIClassID()->String:::Returns the class ID for the UI.
javax.swing.JTextArea#createDefaultModel()->Document:::Creates the default implementation of the model to be used at construction if one isn't explicitly given
javax.swing.JTextArea#setTabSize(int)->void:::Sets the number of characters to expand tabs to
javax.swing.JTextArea#getTabSize()->int:::Gets the number of characters used to expand tabs
javax.swing.JTextArea#setLineWrap(boolean)->void:::Sets the line-wrapping policy of the text area
javax.swing.JTextArea#getLineWrap()->boolean:::Gets the line-wrapping policy of the text area
javax.swing.JTextArea#setWrapStyleWord(boolean)->void:::Sets the style of wrapping used if the text area is wrapping lines
javax.swing.JTextArea#getWrapStyleWord()->boolean:::Gets the style of wrapping used if the text area is wrapping lines
javax.swing.JTextArea#getLineOfOffset(int)->int:::Translates an offset into the components text to a line number.
javax.swing.JTextArea#getLineCount()->int:::Determines the number of lines contained in the area.
javax.swing.JTextArea#getLineStartOffset(int)->int:::Determines the offset of the start of the given line.
javax.swing.JTextArea#getLineEndOffset(int)->int:::Determines the offset of the end of the given line.
javax.swing.JTextArea#insert(String, int)->void:::Inserts the specified text at the specified position
javax.swing.JTextArea#append(String)->void:::Appends the given text to the end of the document
javax.swing.JTextArea#replaceRange(String, int, int)->void:::Replaces text from the indicated start to end position with the new text specified
javax.swing.JTextArea#getRows()->int:::Returns the number of rows in the TextArea.
javax.swing.JTextArea#setRows(int)->void:::Sets the number of rows for this TextArea
javax.swing.JTextArea#getRowHeight()->int:::Defines the meaning of the height of a row
javax.swing.JTextArea#getColumns()->int:::Returns the number of columns in the TextArea.
javax.swing.JTextArea#setColumns(int)->void:::Sets the number of columns for this TextArea
javax.swing.JTextArea#getColumnWidth()->int:::Gets column width
javax.swing.JTextArea#getPreferredSize()->Dimension:::Returns the preferred size of the TextArea
javax.swing.JTextArea#setFont(Font)->void:::Sets the current font
javax.swing.JTextArea#paramString()->String:::Returns a string representation of this JTextArea
javax.swing.JTextArea#getScrollableTracksViewportWidth()->boolean:::Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport
javax.swing.JTextArea#getPreferredScrollableViewportSize()->Dimension:::Returns the preferred size of the viewport if this component is embedded in a JScrollPane
javax.swing.JTextArea#getScrollableUnitIncrement(Rectangle, int, int)->int:::Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation
javax.swing.JTextArea#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JTextArea
javax.swing.JTextArea.AccessibleJTextArea#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object.
javax.swing.JTextField#getUIClassID()->String:::Gets the class ID for a UI.
javax.swing.JTextField#setDocument(Document)->void:::Associates the editor with a text document
javax.swing.JTextField#isValidateRoot()->boolean:::Calls to revalidate that come from within the textfield itself will be handled by validating the textfield, unless the textfield is contained within a JViewport, in which case this returns false.
javax.swing.JTextField#getHorizontalAlignment()->int:::Returns the horizontal alignment of the text
javax.swing.JTextField#setHorizontalAlignment(int)->void:::Sets the horizontal alignment of the text
javax.swing.JTextField#createDefaultModel()->Document:::Creates the default implementation of the model to be used at construction if one isn't explicitly given
javax.swing.JTextField#getColumns()->int:::Returns the number of columns in this TextField.
javax.swing.JTextField#setColumns(int)->void:::Sets the number of columns in this TextField, and then invalidate the layout.
javax.swing.JTextField#getColumnWidth()->int:::Returns the column width
javax.swing.JTextField#getPreferredSize()->Dimension:::Returns the preferred size Dimensions needed for this TextField
javax.swing.JTextField#setFont(Font)->void:::Sets the current font
javax.swing.JTextField#addActionListener(ActionListener)->void:::Adds the specified action listener to receive action events from this textfield.
javax.swing.JTextField#removeActionListener(ActionListener)->void:::Removes the specified action listener so that it no longer receives action events from this textfield.
javax.swing.JTextField#getActionListeners()->ActionListener[]:::Returns an array of all the ActionListeners added to this JTextField with addActionListener().
javax.swing.JTextField#fireActionPerformed()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JTextField#setActionCommand(String)->void:::Sets the command string used for action events.
javax.swing.JTextField#setAction(Action)->void:::Sets the Action for the ActionEvent source
javax.swing.JTextField#getAction()->Action:::Returns the currently set Action for this ActionEvent source, or null if no Action is set.
javax.swing.JTextField#configurePropertiesFromAction(Action)->void:::Sets the properties on this textfield to match those in the specified Action
javax.swing.JTextField#actionPropertyChanged(Action, String)->void:::Updates the textfield's state in response to property changes in associated action
javax.swing.JTextField#createActionPropertyChangeListener(Action)->PropertyChangeListener:::Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties
javax.swing.JTextField#getActions()->Action[]:::Fetches the command list for the editor
javax.swing.JTextField#postActionEvent()->void:::Processes action events occurring on this textfield by dispatching them to any registered ActionListener objects
javax.swing.JTextField#getHorizontalVisibility()->BoundedRangeModel:::Gets the visibility of the text field
javax.swing.JTextField#getScrollOffset()->int:::Gets the scroll offset, in pixels.
javax.swing.JTextField#setScrollOffset(int)->void:::Sets the scroll offset, in pixels.
javax.swing.JTextField#scrollRectToVisible(Rectangle)->void:::Scrolls the field left or right.
javax.swing.JTextField#hasActionListener()->boolean:::Returns true if the receiver has an ActionListener installed.
javax.swing.JTextField.NotifyAction#actionPerformed(ActionEvent)->void::: notify action action performed
javax.swing.JTextField.NotifyAction#isEnabled()->boolean::: notify action is enabled
javax.swing.JTextField.ScrollRepainter#stateChanged(ChangeEvent)->void::: scroll repainter state changed
javax.swing.JTextField#paramString()->String:::Returns a string representation of this JTextField
javax.swing.JTextField#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JTextField
javax.swing.JTextField.AccessibleJTextField#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object.
javax.swing.JTextPane#getUIClassID()->String:::Returns the class ID for the UI.
javax.swing.JTextPane#setDocument(Document)->void:::Associates the editor with a text document
javax.swing.JTextPane#setStyledDocument(StyledDocument)->void:::Associates the editor with a text document
javax.swing.JTextPane#getStyledDocument()->StyledDocument:::Fetches the model associated with the editor.
javax.swing.JTextPane#replaceSelection(String)->void:::Replaces the currently selected content with new content represented by the given string
javax.swing.JTextPane#insertComponent(Component)->void:::Inserts a component into the document as a replacement for the currently selected content
javax.swing.JTextPane#insertIcon(Icon)->void:::Inserts an icon into the document as a replacement for the currently selected content
javax.swing.JTextPane#addStyle(String, Style)->Style:::Adds a new style into the logical style hierarchy
javax.swing.JTextPane#removeStyle(String)->void:::Removes a named non-null style previously added to the document.
javax.swing.JTextPane#getStyle(String)->Style:::Fetches a named non-null style previously added.
javax.swing.JTextPane#setLogicalStyle(Style)->void:::Sets the logical style to use for the paragraph at the current caret position
javax.swing.JTextPane#getLogicalStyle()->Style:::Fetches the logical style assigned to the paragraph represented by the current position of the caret, or null.
javax.swing.JTextPane#getCharacterAttributes()->AttributeSet:::Fetches the character attributes in effect at the current location of the caret, or null.
javax.swing.JTextPane#setCharacterAttributes(AttributeSet, boolean)->void:::Applies the given attributes to character content
javax.swing.JTextPane#getParagraphAttributes()->AttributeSet:::Fetches the current paragraph attributes in effect at the location of the caret, or null if none.
javax.swing.JTextPane#setParagraphAttributes(AttributeSet, boolean)->void:::Applies the given attributes to paragraphs
javax.swing.JTextPane#getInputAttributes()->MutableAttributeSet:::Gets the input attributes for the pane.
javax.swing.JTextPane#getStyledEditorKit()->StyledEditorKit:::Gets the editor kit.
javax.swing.JTextPane#createDefaultEditorKit()->EditorKit:::Creates the EditorKit to use by default
javax.swing.JTextPane#setEditorKit(EditorKit)->void:::Sets the currently installed kit for handling content
javax.swing.JTextPane#paramString()->String:::Returns a string representation of this JTextPane
javax.swing.JToggleButton#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JToggleButton#getUIClassID()->String:::Returns a string that specifies the name of the l&amp;f class that renders this component.
javax.swing.JToggleButton#shouldUpdateSelectedStateFromAction()->boolean:::Overriden to return true, JToggleButton supports the selected state.
javax.swing.JToggleButton#requestFocus(FocusEvent.Cause)->void:::If this toggle button is a member of the ButtonGroup which has another toggle button which is selected and can be the focus owner, and the focus cause argument denotes window activation or focus traversal action of any direction the result of the method execution is the same as calling Component#requestFocus(FocusEvent.Cause) on the toggle button selected in the group
javax.swing.JToggleButton#requestFocusInWindow(FocusEvent.Cause)->boolean:::If this toggle button is a member of the ButtonGroup which has another toggle button which is selected and can be the focus owner, and the focus cause argument denotes window activation or focus traversal action of any direction the result of the method execution is the same as calling Component#requestFocusInWindow(FocusEvent.Cause) on the toggle button selected in the group
javax.swing.JToggleButton.ToggleButtonModel#isSelected()->boolean:::Checks if the button is selected.
javax.swing.JToggleButton.ToggleButtonModel#setSelected(boolean)->void:::Sets the selected state of the button.
javax.swing.JToggleButton.ToggleButtonModel#setPressed(boolean)->void:::Sets the pressed state of the toggle button.
javax.swing.JToggleButton#paramString()->String:::Returns a string representation of this JToggleButton
javax.swing.JToggleButton#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JToggleButton
javax.swing.JToggleButton.AccessibleJToggleButton#itemStateChanged(ItemEvent)->void:::Fire accessible property change events when the state of the toggle button changes.
javax.swing.JToggleButton.AccessibleJToggleButton#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JToolBar#getUI()->ToolBarUI:::Returns the tool bar's current UI.
javax.swing.JToolBar#setUI(ToolBarUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JToolBar#updateUI()->void:::Notification from the UIFactory that the L&amp;F has changed
javax.swing.JToolBar#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JToolBar#getComponentIndex(Component)->int:::Returns the index of the specified component
javax.swing.JToolBar#getComponentAtIndex(int)->Component:::Returns the component at the specified index.
javax.swing.JToolBar#setMargin(Insets)->void:::Sets the margin between the tool bar's border and its buttons
javax.swing.JToolBar#getMargin()->Insets:::Returns the margin between the tool bar's border and its buttons.
javax.swing.JToolBar#isBorderPainted()->boolean:::Gets the borderPainted property.
javax.swing.JToolBar#setBorderPainted(boolean)->void:::Sets the borderPainted property, which is true if the border should be painted
javax.swing.JToolBar#paintBorder(Graphics)->void:::Paints the tool bar's border if the borderPainted property is true.
javax.swing.JToolBar#isFloatable()->boolean:::Gets the floatable property.
javax.swing.JToolBar#setFloatable(boolean)->void:::Sets the floatable property, which must be true for the user to move the tool bar
javax.swing.JToolBar#getOrientation()->int:::Returns the current orientation of the tool bar
javax.swing.JToolBar#setOrientation(int)->void:::Sets the orientation of the tool bar
javax.swing.JToolBar#setRollover(boolean)->void:::Sets the rollover state of this toolbar
javax.swing.JToolBar#isRollover()->boolean:::Returns the rollover state.
javax.swing.JToolBar#addSeparator()->void:::Appends a separator of default size to the end of the tool bar
javax.swing.JToolBar#addSeparator(Dimension)->void:::Appends a separator of a specified size to the end of the tool bar.
javax.swing.JToolBar#add(Action)->JButton:::Adds a new JButton which dispatches the action.
javax.swing.JToolBar#createActionComponent(Action)->JButton:::Factory method which creates the JButton for Actions added to the JToolBar
javax.swing.JToolBar#createActionChangeListener(JButton)->PropertyChangeListener:::Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur, or null if the default property change listener for the control is desired.
javax.swing.JToolBar#addImpl(Component, Object, int)->void:::If a JButton is being added, it is initially set to be disabled.
javax.swing.JToolBar.Separator#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JToolBar.Separator#setSeparatorSize(Dimension)->void:::Sets the size of the separator.
javax.swing.JToolBar.Separator#getSeparatorSize()->Dimension:::Returns the size of the separator
javax.swing.JToolBar.Separator#getMinimumSize()->Dimension:::Returns the minimum size for the separator.
javax.swing.JToolBar.Separator#getMaximumSize()->Dimension:::Returns the maximum size for the separator.
javax.swing.JToolBar.Separator#getPreferredSize()->Dimension:::Returns the preferred size for the separator.
javax.swing.JToolBar#paramString()->String:::Returns a string representation of this JToolBar
javax.swing.JToolBar#setLayout(LayoutManager)->void::: tool bar set layout
javax.swing.JToolBar#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JToolBar
javax.swing.JToolBar.AccessibleJToolBar#getAccessibleStateSet()->AccessibleStateSet:::Get the state of this object.
javax.swing.JToolBar.AccessibleJToolBar#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JToolTip#getUI()->ToolTipUI:::Returns the L&amp;F object that renders this component.
javax.swing.JToolTip#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JToolTip#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JToolTip#setTipText(String)->void:::Sets the text to show when the tool tip is displayed
javax.swing.JToolTip#getTipText()->String:::Returns the text that is shown when the tool tip is displayed
javax.swing.JToolTip#setComponent(JComponent)->void:::Specifies the component that the tooltip describes
javax.swing.JToolTip#getComponent()->JComponent:::Returns the component the tooltip applies to
javax.swing.JToolTip#alwaysOnTop()->boolean::: tool tip always on top
javax.swing.JToolTip#paramString()->String:::Returns a string representation of this JToolTip
javax.swing.JToolTip#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JToolTip
javax.swing.JToolTip.AccessibleJToolTip#getAccessibleDescription()->String:::Get the accessible description of this object.
javax.swing.JToolTip.AccessibleJToolTip#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JTree.DropLocation#getChildIndex()->int:::Returns the index where the dropped data should be inserted with respect to the path returned by getPath()
javax.swing.JTree.DropLocation#getPath()->TreePath:::Returns the path where dropped data should be placed in the tree
javax.swing.JTree.DropLocation#toString()->String:::Returns a string representation of this drop location
javax.swing.JTree#getDefaultTreeModel()->TreeModel:::Creates and returns a sample TreeModel
javax.swing.JTree#createTreeModel(Object)->TreeModel:::Returns a TreeModel wrapping the specified object
javax.swing.JTree#getUI()->TreeUI:::Returns the L&amp;F object that renders this component.
javax.swing.JTree#setUI(TreeUI)->void:::Sets the L&amp;F object that renders this component
javax.swing.JTree#updateUI()->void:::Notification from the UIManager that the L&amp;F has changed
javax.swing.JTree#getUIClassID()->String:::Returns the name of the L&amp;F class that renders this component.
javax.swing.JTree#getCellRenderer()->TreeCellRenderer:::Returns the current TreeCellRenderer  that is rendering each cell.
javax.swing.JTree#setCellRenderer(TreeCellRenderer)->void:::Sets the TreeCellRenderer that will be used to draw each cell
javax.swing.JTree#setEditable(boolean)->void:::Determines whether the tree is editable
javax.swing.JTree#isEditable()->boolean:::Returns true if the tree is editable.
javax.swing.JTree#setCellEditor(TreeCellEditor)->void:::Sets the cell editor
javax.swing.JTree#getCellEditor()->TreeCellEditor:::Returns the editor used to edit entries in the tree.
javax.swing.JTree#getModel()->TreeModel:::Returns the TreeModel that is providing the data.
javax.swing.JTree#setModel(TreeModel)->void:::Sets the TreeModel that will provide the data
javax.swing.JTree#isRootVisible()->boolean:::Returns true if the root node of the tree is displayed.
javax.swing.JTree#setRootVisible(boolean)->void:::Determines whether or not the root node from the TreeModel is visible
javax.swing.JTree#setShowsRootHandles(boolean)->void:::Sets the value of the showsRootHandles property, which specifies whether the node handles should be displayed
javax.swing.JTree#getShowsRootHandles()->boolean:::Returns the value of the showsRootHandles property.
javax.swing.JTree#setRowHeight(int)->void:::Sets the height of each cell, in pixels
javax.swing.JTree#getRowHeight()->int:::Returns the height of each row
javax.swing.JTree#isFixedRowHeight()->boolean:::Returns true if the height of each display row is a fixed size.
javax.swing.JTree#setLargeModel(boolean)->void:::Specifies whether the UI should use a large model
javax.swing.JTree#isLargeModel()->boolean:::Returns true if the tree is configured for a large model.
javax.swing.JTree#setInvokesStopCellEditing(boolean)->void:::Determines what happens when editing is interrupted by selecting another node in the tree, a change in the tree's data, or by some other means
javax.swing.JTree#getInvokesStopCellEditing()->boolean:::Returns the indicator that tells what happens when editing is interrupted.
javax.swing.JTree#setScrollsOnExpand(boolean)->void:::Sets the scrollsOnExpand property, which determines whether the tree might scroll to show previously hidden children
javax.swing.JTree#getScrollsOnExpand()->boolean:::Returns the value of the scrollsOnExpand property.
javax.swing.JTree#setToggleClickCount(int)->void:::Sets the number of mouse clicks before a node will expand or close
javax.swing.JTree#getToggleClickCount()->int:::Returns the number of mouse clicks needed to expand or close a node.
javax.swing.JTree#setExpandsSelectedPaths(boolean)->void:::Configures the expandsSelectedPaths property
javax.swing.JTree#getExpandsSelectedPaths()->boolean:::Returns the expandsSelectedPaths property.
javax.swing.JTree#setDragEnabled(boolean)->void:::Turns on or off automatic drag handling
javax.swing.JTree#getDragEnabled()->boolean:::Returns whether or not automatic drag handling is enabled.
javax.swing.JTree#setDropMode(DropMode)->void:::Sets the drop mode for this component
javax.swing.JTree#getDropMode()->DropMode:::Returns the drop mode for this component.
javax.swing.JTree#dropLocationForPoint(Point)->DropLocation:::Calculates a drop location in this component, representing where a drop at the given point should insert data.
javax.swing.JTree#setDropLocation(TransferHandler.DropLocation, Object, boolean)->Object:::Called to set or clear the drop location during a DnD operation
javax.swing.JTree#dndDone()->void:::Called to indicate to this component that DnD is done
javax.swing.JTree#getDropLocation()->DropLocation:::Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown
javax.swing.JTree#isPathEditable(TreePath)->boolean:::Returns isEditable
javax.swing.JTree#getToolTipText(MouseEvent)->String:::Overrides JComponent's getToolTipText method in order to allow renderer's tips to be used if it has text set
javax.swing.JTree#convertValueToText(Object, boolean, boolean, boolean, int, boolean)->String:::Called by the renderers to convert the specified value to text
javax.swing.JTree#getRowCount()->int:::Returns the number of viewable nodes
javax.swing.JTree#setSelectionPath(TreePath)->void:::Selects the node identified by the specified path
javax.swing.JTree#setSelectionPaths(TreePath[])->void:::Selects the nodes identified by the specified array of paths
javax.swing.JTree#setLeadSelectionPath(TreePath)->void:::Sets the path identifies as the lead
javax.swing.JTree#setAnchorSelectionPath(TreePath)->void:::Sets the path identified as the anchor
javax.swing.JTree#setSelectionRow(int)->void:::Selects the node at the specified row in the display.
javax.swing.JTree#setSelectionRows(int[])->void:::Selects the nodes corresponding to each of the specified rows in the display
javax.swing.JTree#addSelectionPath(TreePath)->void:::Adds the node identified by the specified TreePath to the current selection
javax.swing.JTree#addSelectionPaths(TreePath[])->void:::Adds each path in the array of paths to the current selection
javax.swing.JTree#addSelectionRow(int)->void:::Adds the path at the specified row to the current selection.
javax.swing.JTree#addSelectionRows(int[])->void:::Adds the paths at each of the specified rows to the current selection.
javax.swing.JTree#getLastSelectedPathComponent()->Object:::Returns the last path component of the selected path
javax.swing.JTree#getLeadSelectionPath()->TreePath:::Returns the path identified as the lead.
javax.swing.JTree#getAnchorSelectionPath()->TreePath:::Returns the path identified as the anchor.
javax.swing.JTree#getSelectionPath()->TreePath:::Returns the path to the first selected node.
javax.swing.JTree#getSelectionPaths()->TreePath[]:::Returns the paths of all selected values.
javax.swing.JTree#getSelectionRows()->int[]:::Returns all of the currently selected rows
javax.swing.JTree#getSelectionCount()->int:::Returns the number of nodes selected.
javax.swing.JTree#getMinSelectionRow()->int:::Returns the smallest selected row
javax.swing.JTree#getMaxSelectionRow()->int:::Returns the largest selected row
javax.swing.JTree#getLeadSelectionRow()->int:::Returns the row index corresponding to the lead path.
javax.swing.JTree#isPathSelected(TreePath)->boolean:::Returns true if the item identified by the path is currently selected.
javax.swing.JTree#isRowSelected(int)->boolean:::Returns true if the node identified by row is selected.
javax.swing.JTree#getExpandedDescendants(TreePath)->Enumeration:::Returns an Enumeration of the descendants of the path parent that are currently expanded
javax.swing.JTree#hasBeenExpanded(TreePath)->boolean:::Returns true if the node identified by the path has ever been expanded.
javax.swing.JTree#isExpanded(TreePath)->boolean:::Returns true if the node identified by the path is currently expanded,
javax.swing.JTree#isExpanded(int)->boolean:::Returns true if the node at the specified display row is currently expanded.
javax.swing.JTree#isCollapsed(TreePath)->boolean:::Returns true if the value identified by path is currently collapsed, this will return false if any of the values in path are currently not being displayed.
javax.swing.JTree#isCollapsed(int)->boolean:::Returns true if the node at the specified display row is collapsed.
javax.swing.JTree#makeVisible(TreePath)->void:::Ensures that the node identified by path is currently viewable.
javax.swing.JTree#isVisible(TreePath)->boolean:::Returns true if the value identified by path is currently viewable, which means it is either the root or all of its parents are expanded
javax.swing.JTree#getPathBounds(TreePath)->Rectangle:::Returns the Rectangle that the specified node will be drawn into
javax.swing.JTree#getRowBounds(int)->Rectangle:::Returns the Rectangle that the node at the specified row is drawn in.
javax.swing.JTree#scrollPathToVisible(TreePath)->void:::Makes sure all the path components in path are expanded (except for the last path component) and scrolls so that the node identified by the path is displayed
javax.swing.JTree#scrollRowToVisible(int)->void:::Scrolls the item identified by row until it is displayed
javax.swing.JTree#getPathForRow(int)->TreePath:::Returns the path for the specified row
javax.swing.JTree#getRowForPath(TreePath)->int:::Returns the row that displays the node identified by the specified path.
javax.swing.JTree#expandPath(TreePath)->void:::Ensures that the node identified by the specified path is expanded and viewable
javax.swing.JTree#expandRow(int)->void:::Ensures that the node in the specified row is expanded and viewable
javax.swing.JTree#collapsePath(TreePath)->void:::Ensures that the node identified by the specified path is collapsed and viewable.
javax.swing.JTree#collapseRow(int)->void:::Ensures that the node in the specified row is collapsed
javax.swing.JTree#getPathForLocation(int, int)->TreePath:::Returns the path for the node at the specified location.
javax.swing.JTree#getRowForLocation(int, int)->int:::Returns the row for the specified location.
javax.swing.JTree#getClosestPathForLocation(int, int)->TreePath:::Returns the path to the node that is closest to x,y
javax.swing.JTree#getClosestRowForLocation(int, int)->int:::Returns the row to the node that is closest to x,y
javax.swing.JTree#isEditing()->boolean:::Returns true if the tree is being edited
javax.swing.JTree#stopEditing()->boolean:::Ends the current editing session
javax.swing.JTree#cancelEditing()->void:::Cancels the current editing session
javax.swing.JTree#startEditingAtPath(TreePath)->void:::Selects the node identified by the specified path and initiates editing
javax.swing.JTree#getEditingPath()->TreePath:::Returns the path to the element that is currently being edited.
javax.swing.JTree#setSelectionModel(TreeSelectionModel)->void:::Sets the tree's selection model
javax.swing.JTree#getSelectionModel()->TreeSelectionModel:::Returns the model for selections
javax.swing.JTree#getPathBetweenRows(int, int)->TreePath[]:::Returns the paths (inclusive) between the specified rows
javax.swing.JTree#setSelectionInterval(int, int)->void:::Selects the rows in the specified interval (inclusive)
javax.swing.JTree#addSelectionInterval(int, int)->void:::Adds the specified rows (inclusive) to the selection
javax.swing.JTree#removeSelectionInterval(int, int)->void:::Removes the specified rows (inclusive) from the selection
javax.swing.JTree#removeSelectionPath(TreePath)->void:::Removes the node identified by the specified path from the current selection.
javax.swing.JTree#removeSelectionPaths(TreePath[])->void:::Removes the nodes identified by the specified paths from the current selection.
javax.swing.JTree#removeSelectionRow(int)->void:::Removes the row at the index row from the current selection.
javax.swing.JTree#removeSelectionRows(int[])->void:::Removes the rows that are selected at each of the specified rows.
javax.swing.JTree#clearSelection()->void:::Clears the selection.
javax.swing.JTree#isSelectionEmpty()->boolean:::Returns true if the selection is currently empty.
javax.swing.JTree#addTreeExpansionListener(TreeExpansionListener)->void:::Adds a listener for TreeExpansion events.
javax.swing.JTree#removeTreeExpansionListener(TreeExpansionListener)->void:::Removes a listener for TreeExpansion events.
javax.swing.JTree#getTreeExpansionListeners()->TreeExpansionListener[]:::Returns an array of all the TreeExpansionListeners added to this JTree with addTreeExpansionListener().
javax.swing.JTree#addTreeWillExpandListener(TreeWillExpandListener)->void:::Adds a listener for TreeWillExpand events.
javax.swing.JTree#removeTreeWillExpandListener(TreeWillExpandListener)->void:::Removes a listener for TreeWillExpand events.
javax.swing.JTree#getTreeWillExpandListeners()->TreeWillExpandListener[]:::Returns an array of all the TreeWillExpandListeners added to this JTree with addTreeWillExpandListener().
javax.swing.JTree#fireTreeExpanded(TreePath)->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JTree#fireTreeCollapsed(TreePath)->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JTree#fireTreeWillExpand(TreePath)->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JTree#fireTreeWillCollapse(TreePath)->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.JTree#addTreeSelectionListener(TreeSelectionListener)->void:::Adds a listener for TreeSelection events.
javax.swing.JTree#removeTreeSelectionListener(TreeSelectionListener)->void:::Removes a TreeSelection listener.
javax.swing.JTree#getTreeSelectionListeners()->TreeSelectionListener[]:::Returns an array of all the TreeSelectionListeners added to this JTree with addTreeSelectionListener().
javax.swing.JTree#fireValueChanged(TreeSelectionEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.JTree#treeDidChange()->void:::Sent when the tree has changed enough that we need to resize the bounds, but not enough that we need to remove the expanded node set (e.g nodes were expanded or collapsed, or nodes were inserted into the tree)
javax.swing.JTree#setVisibleRowCount(int)->void:::Sets the number of rows that are to be displayed
javax.swing.JTree#getVisibleRowCount()->int:::Returns the number of rows that are displayed in the display area.
javax.swing.JTree#getNextMatch(String, int, Position.Bias)->TreePath:::Returns the TreePath to the next tree element that begins with a prefix
javax.swing.JTree.EmptySelectionModel#sharedInstance()->EmptySelectionModel:::Returns the single instance of EmptySelectionModel.
javax.swing.JTree.EmptySelectionModel#setSelectionPaths(TreePath[])->void:::This is overriden to do nothing; EmptySelectionModel does not allow a selection.
javax.swing.JTree.EmptySelectionModel#addSelectionPaths(TreePath[])->void:::This is overriden to do nothing; EmptySelectionModel does not allow a selection.
javax.swing.JTree.EmptySelectionModel#removeSelectionPaths(TreePath[])->void:::This is overriden to do nothing; EmptySelectionModel does not allow a selection.
javax.swing.JTree.EmptySelectionModel#setSelectionMode(int)->void:::This is overriden to do nothing; EmptySelectionModel does not allow a selection.
javax.swing.JTree.EmptySelectionModel#setRowMapper(RowMapper)->void:::This is overriden to do nothing; EmptySelectionModel does not allow a selection.
javax.swing.JTree.EmptySelectionModel#addTreeSelectionListener(TreeSelectionListener)->void:::This is overriden to do nothing; EmptySelectionModel does not allow a selection.
javax.swing.JTree.EmptySelectionModel#removeTreeSelectionListener(TreeSelectionListener)->void:::This is overriden to do nothing; EmptySelectionModel does not allow a selection.
javax.swing.JTree.EmptySelectionModel#addPropertyChangeListener(PropertyChangeListener)->void:::This is overriden to do nothing; EmptySelectionModel does not allow a selection.
javax.swing.JTree.EmptySelectionModel#removePropertyChangeListener(PropertyChangeListener)->void:::This is overriden to do nothing; EmptySelectionModel does not allow a selection.
javax.swing.JTree.TreeSelectionRedirector#valueChanged(TreeSelectionEvent)->void:::Invoked by the TreeSelectionModel when the selection changes.
javax.swing.JTree#getPreferredScrollableViewportSize()->Dimension:::Returns the preferred display size of a JTree
javax.swing.JTree#getScrollableUnitIncrement(Rectangle, int, int)->int:::Returns the amount to increment when scrolling
javax.swing.JTree#getScrollableBlockIncrement(Rectangle, int, int)->int:::Returns the amount for a block increment, which is the height or width of visibleRect, based on orientation.
javax.swing.JTree#getScrollableTracksViewportWidth()->boolean:::Returns false to indicate that the width of the viewport does not determine the width of the table, unless the preferred width of the tree is smaller than the viewports width
javax.swing.JTree#getScrollableTracksViewportHeight()->boolean:::Returns false to indicate that the height of the viewport does not determine the height of the table, unless the preferred height of the tree is smaller than the viewports height
javax.swing.JTree#setExpandedState(TreePath, boolean)->void:::Sets the expanded state of this JTree
javax.swing.JTree#getDescendantToggledPaths(TreePath)->Enumeration:::Returns an Enumeration of TreePaths that have been expanded that are descendants of parent.
javax.swing.JTree#removeDescendantToggledPaths(Enumeration)->void:::Removes any descendants of the TreePaths in toRemove that have been expanded.
javax.swing.JTree#clearToggledPaths()->void:::Clears the cache of toggled tree paths
javax.swing.JTree#createTreeModelListener()->TreeModelListener:::Creates and returns an instance of TreeModelHandler
javax.swing.JTree#removeDescendantSelectedPaths(TreePath, boolean)->boolean:::Removes any paths in the selection that are descendants of path
javax.swing.JTree#removeDescendantSelectedPaths(TreeModelEvent)->void:::Removes any paths from the selection model that are descendants of the nodes identified by in e.
javax.swing.JTree.TreeModelHandler#treeNodesChanged(TreeModelEvent)->void::: tree model handler tree nodes changed
javax.swing.JTree.TreeModelHandler#treeNodesInserted(TreeModelEvent)->void::: tree model handler tree nodes inserted
javax.swing.JTree.TreeModelHandler#treeStructureChanged(TreeModelEvent)->void::: tree model handler tree structure changed
javax.swing.JTree.TreeModelHandler#treeNodesRemoved(TreeModelEvent)->void::: tree model handler tree nodes removed
javax.swing.JTree.DynamicUtilTreeNode#createChildren(DefaultMutableTreeNode, Object)->void:::Adds to parent all the children in children
javax.swing.JTree.DynamicUtilTreeNode#isLeaf()->boolean:::Returns true if this node allows children
javax.swing.JTree.DynamicUtilTreeNode#getChildCount()->int:::Returns the number of child nodes.
javax.swing.JTree.DynamicUtilTreeNode#loadChildren()->void:::Loads the children based on childValue
javax.swing.JTree.DynamicUtilTreeNode#getChildAt(int)->TreeNode:::Subclassed to load the children, if necessary.
javax.swing.JTree.DynamicUtilTreeNode#children()->Enumeration:::Subclassed to load the children, if necessary.
javax.swing.JTree#setUIProperty(String, Object)->void::: tree set property
javax.swing.JTree#paramString()->String:::Returns a string representation of this JTree
javax.swing.JTree#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JTree
javax.swing.JTree.AccessibleJTree#valueChanged(TreeSelectionEvent)->void:::Tree Selection Listener value change method
javax.swing.JTree.AccessibleJTree#fireVisibleDataPropertyChange()->void:::Fire a visible data property change notification
javax.swing.JTree.AccessibleJTree#treeNodesChanged(TreeModelEvent)->void:::Tree Model Node change notification.
javax.swing.JTree.AccessibleJTree#treeNodesInserted(TreeModelEvent)->void:::Tree Model Node change notification.
javax.swing.JTree.AccessibleJTree#treeNodesRemoved(TreeModelEvent)->void:::Tree Model Node change notification.
javax.swing.JTree.AccessibleJTree#treeStructureChanged(TreeModelEvent)->void:::Tree Model structure change change notification.
javax.swing.JTree.AccessibleJTree#treeCollapsed(TreeExpansionEvent)->void:::Tree Collapsed notification.
javax.swing.JTree.AccessibleJTree#treeExpanded(TreeExpansionEvent)->void:::Tree Model Expansion notification.
javax.swing.JTree.AccessibleJTree#fireActiveDescendantPropertyChange(TreePath, TreePath)->void::: Fire an active descendant property change notification
javax.swing.JTree.AccessibleJTree#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JTree.AccessibleJTree#getAccessibleAt(Point)->Accessible:::Returns the Accessible child, if one exists, contained at the local coordinate Point
javax.swing.JTree.AccessibleJTree#getAccessibleChildrenCount()->int:::Returns the number of top-level children nodes of this JTree
javax.swing.JTree.AccessibleJTree#getAccessibleChild(int)->Accessible:::Return the nth Accessible child of the object.
javax.swing.JTree.AccessibleJTree#getAccessibleIndexInParent()->int:::Get the index of this object in its accessible parent.
javax.swing.JTree.AccessibleJTree#getAccessibleSelection()->AccessibleSelection:::Get the AccessibleSelection associated with this object
javax.swing.JTree.AccessibleJTree#getAccessibleSelectionCount()->int:::Returns the number of items currently selected
javax.swing.JTree.AccessibleJTree#getAccessibleSelection(int)->Accessible:::Returns an Accessible representing the specified selected item in the object
javax.swing.JTree.AccessibleJTree#isAccessibleChildSelected(int)->boolean:::Returns true if the current child of this object is selected.
javax.swing.JTree.AccessibleJTree#addAccessibleSelection(int)->void:::Adds the specified selected item in the object to the object's selection
javax.swing.JTree.AccessibleJTree#removeAccessibleSelection(int)->void:::Removes the specified selected item in the object from the object's selection
javax.swing.JTree.AccessibleJTree#clearAccessibleSelection()->void:::Clears the selection in the object, so that nothing in the object is selected.
javax.swing.JTree.AccessibleJTree#selectAllAccessibleSelection()->void:::Causes every selected item in the object to be selected if the object supports multiple selections.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleContext()->AccessibleContext:::Get the AccessibleContext associated with this tree node
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleName()->String:::Get the accessible name of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setAccessibleName(String)->void:::Set the localized accessible name of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleDescription()->String:::Get the accessible description of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setAccessibleDescription(String)->void:::Set the accessible description of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleStateSet()->AccessibleStateSet:::Get the state set of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleParent()->Accessible:::Get the Accessible parent of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleIndexInParent()->int:::Get the index of this object in its accessible parent.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleChildrenCount()->int:::Returns the number of accessible children in the object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleChild(int)->Accessible:::Return the specified Accessible child of the object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getLocale()->Locale:::Gets the locale of the component
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#addPropertyChangeListener(PropertyChangeListener)->void:::Add a PropertyChangeListener to the listener list
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#removePropertyChangeListener(PropertyChangeListener)->void:::Remove a PropertyChangeListener from the listener list
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleAction()->AccessibleAction:::Get the AccessibleAction associated with this object
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleComponent()->AccessibleComponent:::Get the AccessibleComponent associated with this object
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleSelection()->AccessibleSelection:::Get the AccessibleSelection associated with this object if one exists
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleText()->AccessibleText:::Get the AccessibleText associated with this object if one exists
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleValue()->AccessibleValue:::Get the AccessibleValue associated with this object if one exists
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getBackground()->Color:::Get the background color of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setBackground(Color)->void:::Set the background color of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getForeground()->Color:::Get the foreground color of this object.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setForeground(Color)->void::: accessible tree node set foreground
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getCursor()->Cursor::: accessible tree node get cursor
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setCursor(Cursor)->void::: accessible tree node set cursor
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getFont()->Font::: accessible tree node get font
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setFont(Font)->void::: accessible tree node set font
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getFontMetrics(Font)->FontMetrics::: accessible tree node get font metrics
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#isEnabled()->boolean::: accessible tree node is enabled
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setEnabled(boolean)->void::: accessible tree node set enabled
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#isVisible()->boolean::: accessible tree node is visible
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setVisible(boolean)->void::: accessible tree node set visible
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#isShowing()->boolean::: accessible tree node is showing
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#contains(Point)->boolean::: accessible tree node contains
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getLocationOnScreen()->Point::: accessible tree node get location on screen
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getLocationInJTree()->Point:::Returns the relative location of the node
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getLocation()->Point::: accessible tree node get location
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setLocation(Point)->void::: accessible tree node set location
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getBounds()->Rectangle::: accessible tree node get bounds
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setBounds(Rectangle)->void::: accessible tree node set bounds
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getSize()->Dimension::: accessible tree node get size
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#setSize(Dimension)->void::: accessible tree node set size
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleAt(Point)->Accessible:::Returns the Accessible child, if one exists, contained at the local coordinate Point
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#isFocusTraversable()->boolean::: accessible tree node is focus traversable
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#requestFocus()->void::: accessible tree node request focus
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#addFocusListener(FocusListener)->void::: accessible tree node add focus listener
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#removeFocusListener(FocusListener)->void::: accessible tree node remove focus listener
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleSelectionCount()->int:::Returns the number of items currently selected
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleSelection(int)->Accessible:::Returns an Accessible representing the specified selected item in the object
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#isAccessibleChildSelected(int)->boolean:::Returns true if the current child of this object is selected.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#addAccessibleSelection(int)->void:::Adds the specified selected item in the object to the object's selection
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#removeAccessibleSelection(int)->void:::Removes the specified selected item in the object from the object's selection
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#clearAccessibleSelection()->void:::Clears the selection in the object, so that nothing in the object is selected.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#selectAllAccessibleSelection()->void:::Causes every selected item in the object to be selected if the object supports multiple selections.
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleActionCount()->int:::Returns the number of accessible actions available in this tree node
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#getAccessibleActionDescription(int)->String:::Return a description of the specified action of the tree node
javax.swing.JTree.AccessibleJTree.AccessibleJTreeNode#doAccessibleAction(int)->boolean:::Perform the specified Action on the tree node
javax.swing.JViewport#getUI()->ViewportUI:::Returns the L&amp;F object that renders this component.
javax.swing.JViewport#setUI(ViewportUI)->void:::Sets the L&amp;F object that renders this component.
javax.swing.JViewport#updateUI()->void:::Resets the UI property to a value from the current look and feel.
javax.swing.JViewport#getUIClassID()->String:::Returns a string that specifies the name of the L&amp;F class that renders this component.
javax.swing.JViewport#addImpl(Component, Object, int)->void:::Sets the JViewport's one lightweight child, which can be null
javax.swing.JViewport#remove(Component)->void:::Removes the Viewports one lightweight child.
javax.swing.JViewport#scrollRectToVisible(Rectangle)->void:::Scrolls the view so that Rectangle within the view becomes visible
javax.swing.JViewport#setBorder(Border)->void:::The viewport "scrolls" its child (called the "view") by the normal parent/child clipping (typically the view is moved in the opposite direction of the scroll)
javax.swing.JViewport#getInsets()->Insets:::Returns the insets (border) dimensions as (0,0,0,0), since borders are not supported on a JViewport.
javax.swing.JViewport#getInsets(Insets)->Insets:::Returns an Insets object containing this JViewports inset values
javax.swing.JViewport#isOptimizedDrawingEnabled()->boolean:::The JViewport overrides the default implementation of this method (in JComponent) to return false
javax.swing.JViewport#isPaintingOrigin()->boolean:::Returns true if scroll mode is a BACKINGSTORE_SCROLL_MODE to cause painting to originate from JViewport, or one of its ancestors
javax.swing.JViewport#paint(Graphics)->void:::Depending on whether the backingStore is enabled, either paint the image through the backing store or paint just the recently exposed part, using the backing store to "blit" the remainder
javax.swing.JViewport.BackingStoreMultiResolutionImage#getWidth(ImageObserver)->int::: backing store multi resolution image get width
javax.swing.JViewport.BackingStoreMultiResolutionImage#getHeight(ImageObserver)->int::: backing store multi resolution image get height
javax.swing.JViewport.BackingStoreMultiResolutionImage#getBaseImage()->Image::: backing store multi resolution image get base image
javax.swing.JViewport.BackingStoreMultiResolutionImage#getGraphics()->Graphics::: backing store multi resolution image get graphics
javax.swing.JViewport.BackingStoreMultiResolutionImage#getResolutionVariant(double, double)->Image::: backing store multi resolution image get resolution variant
javax.swing.JViewport.BackingStoreMultiResolutionImage#getResolutionVariants()->java.util.List::: backing store multi resolution image get resolution variants
javax.swing.JViewport#reshape(int, int, int, int)->void:::Sets the bounds of this viewport
javax.swing.JViewport#setScrollMode(int)->void:::Used to control the method of scrolling the viewport contents
javax.swing.JViewport#getScrollMode()->int:::Returns the current scrolling mode.
javax.swing.JViewport#isBackingStoreEnabled()->boolean:::Returns true if this viewport is maintaining an offscreen image of its contents.
javax.swing.JViewport#setBackingStoreEnabled(boolean)->void:::If true if this viewport will maintain an offscreen image of its contents
javax.swing.JViewport#getView()->Component:::Returns the JViewport's one child or null.
javax.swing.JViewport#setView(Component)->void:::Sets the JViewport's one lightweight child (view), which can be null.
javax.swing.JViewport#getViewSize()->Dimension:::If the view's size hasn't been explicitly set, return the preferred size, otherwise return the view's current size
javax.swing.JViewport#setViewSize(Dimension)->void:::Sets the size of the view
javax.swing.JViewport#getViewPosition()->Point:::Returns the view coordinates that appear in the upper left hand corner of the viewport, or 0,0 if there's no view.
javax.swing.JViewport#setViewPosition(Point)->void:::Sets the view coordinates that appear in the upper left hand corner of the viewport, does nothing if there's no view.
javax.swing.JViewport#getViewRect()->Rectangle:::Returns a rectangle whose origin is getViewPosition and size is getExtentSize
javax.swing.JViewport#computeBlit(int, int, Point, Point, Dimension, Rectangle)->boolean:::Computes the parameters for a blit where the backing store image currently contains oldLoc in the upper left hand corner and we're scrolling to newLoc
javax.swing.JViewport#getExtentSize()->Dimension:::Returns the size of the visible part of the view in view coordinates.
javax.swing.JViewport#toViewCoordinates(Dimension)->Dimension:::Converts a size in pixel coordinates to view coordinates
javax.swing.JViewport#toViewCoordinates(Point)->Point:::Converts a point in pixel coordinates to view coordinates
javax.swing.JViewport#setExtentSize(Dimension)->void:::Sets the size of the visible part of the view using view coordinates.
javax.swing.JViewport.ViewListener#componentResized(ComponentEvent)->void::: view listener component resized
javax.swing.JViewport#createViewListener()->ViewListener:::Creates a listener for the view.
javax.swing.JViewport#createLayoutManager()->LayoutManager:::Subclassers can override this to install a different layout manager (or null) in the constructor
javax.swing.JViewport#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to the list that is notified each time the view's size, position, or the viewport's extent size has changed.
javax.swing.JViewport#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the list that's notified each time the views size, position, or the viewports extent size has changed.
javax.swing.JViewport#getChangeListeners()->ChangeListener[]:::Returns an array of all the ChangeListeners added to this JViewport with addChangeListener().
javax.swing.JViewport#fireStateChanged()->void:::Notifies all ChangeListeners when the views size, position, or the viewports extent size has changed.
javax.swing.JViewport#repaint(long, int, int, int, int)->void:::Always repaint in the parents coordinate system to make sure only one paint is performed by the RepaintManager.
javax.swing.JViewport#paramString()->String:::Returns a string representation of this JViewport
javax.swing.JViewport#firePropertyChange(String, Object, Object)->void:::Notifies listeners of a property change
javax.swing.JViewport#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JViewport
javax.swing.JViewport.AccessibleJViewport#getAccessibleRole()->AccessibleRole:::Get the role of this object.
javax.swing.JWindow#windowInit()->void:::Called by the constructors to init the JWindow properly.
javax.swing.JWindow#createRootPane()->JRootPane:::Called by the constructor methods to create the default rootPane.
javax.swing.JWindow#isRootPaneCheckingEnabled()->boolean:::Returns whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JWindow#setTransferHandler(TransferHandler)->void:::Sets the transferHandler property, which is a mechanism to support transfer of data into this component
javax.swing.JWindow#getTransferHandler()->TransferHandler:::Gets the transferHandler property.
javax.swing.JWindow#update(Graphics)->void:::Calls paint(g)
javax.swing.JWindow#setRootPaneCheckingEnabled(boolean)->void:::Sets whether calls to add and setLayout are forwarded to the contentPane.
javax.swing.JWindow#addImpl(Component, Object, int)->void:::Adds the specified child Component
javax.swing.JWindow#remove(Component)->void:::Removes the specified component from the container
javax.swing.JWindow#setLayout(LayoutManager)->void:::Sets the LayoutManager
javax.swing.JWindow#getRootPane()->JRootPane:::Returns the rootPane object for this window.
javax.swing.JWindow#setRootPane(JRootPane)->void:::Sets the new rootPane object for this window
javax.swing.JWindow#getContentPane()->Container:::Returns the Container which is the contentPane for this window.
javax.swing.JWindow#setContentPane(Container)->void:::Sets the contentPane property for this window
javax.swing.JWindow#getLayeredPane()->JLayeredPane:::Returns the layeredPane object for this window.
javax.swing.JWindow#setLayeredPane(JLayeredPane)->void:::Sets the layeredPane property
javax.swing.JWindow#getGlassPane()->Component:::Returns the glassPane Component for this window.
javax.swing.JWindow#setGlassPane(Component)->void:::Sets the glassPane property
javax.swing.JWindow#getGraphics()->Graphics::: window get graphics
javax.swing.JWindow#repaint(long, int, int, int, int)->void:::Repaints the specified rectangle of this component within time milliseconds
javax.swing.JWindow#paramString()->String:::Returns a string representation of this JWindow
javax.swing.JWindow#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext associated with this JWindow
javax.swing.KeyboardManager#getCurrentManager()->KeyboardManager::: keyboard manager get current manager
javax.swing.KeyboardManager#setCurrentManager(KeyboardManager)->void::: keyboard manager set current manager
javax.swing.KeyboardManager#registerKeyStroke(KeyStroke, JComponent)->void:::register keystrokes here which are for the WHEN_IN_FOCUSED_WINDOW case
javax.swing.KeyboardManager#unregisterKeyStroke(KeyStroke, JComponent)->void::: keyboard manager unregister key stroke
javax.swing.KeyboardManager#fireKeyboardAction(KeyEvent, boolean, Container)->boolean:::This method is called when the focused component (and none of its ancestors) want the key event
javax.swing.KeyboardManager#fireBinding(JComponent, KeyStroke, KeyEvent, boolean)->void::: keyboard manager fire binding
javax.swing.KeyboardManager#registerMenuBar(JMenuBar)->void::: keyboard manager register menu bar
javax.swing.KeyboardManager#unregisterMenuBar(JMenuBar)->void::: keyboard manager unregister menu bar
javax.swing.KeyboardManager#registerNewTopContainer(Container)->Hashtable::: keyboard manager register new top container
javax.swing.KeyboardManager.ComponentKeyStrokePair#equals(Object)->boolean::: component key stroke pair equals
javax.swing.KeyboardManager.ComponentKeyStrokePair#hashCode()->int::: component key stroke pair hash code
javax.swing.KeyStroke#getKeyStroke(char)->KeyStroke:::Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified character.
javax.swing.KeyStroke#getKeyStroke(char, boolean)->KeyStroke:::Returns an instance of a KeyStroke, specifying whether the key is considered to be activated when it is pressed or released
javax.swing.KeyStroke#getKeyStroke(Character, int)->KeyStroke:::Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified Character object and a set of modifiers
javax.swing.KeyStroke#getKeyStroke(int, int, boolean)->KeyStroke:::Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released
javax.swing.KeyStroke#getKeyStroke(int, int)->KeyStroke:::Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers
javax.swing.KeyStroke#getKeyStrokeForEvent(KeyEvent)->KeyStroke:::Returns a KeyStroke which represents the stroke which generated a given KeyEvent
javax.swing.KeyStroke#getKeyStroke(String)->KeyStroke:::Parses a string and returns a KeyStroke
javax.swing.LayoutComparator#setComponentOrientation(ComponentOrientation)->void::: layout comparator set component orientation
javax.swing.LayoutComparator#compare(Component, Component)->int::: layout comparator compare
javax.swing.LayoutFocusTraversalPolicy#getComponentAfter(Container, Component)->Component:::Returns the Component that should receive the focus after aComponent
javax.swing.LayoutFocusTraversalPolicy#getComponentBefore(Container, Component)->Component:::Returns the Component that should receive the focus before aComponent
javax.swing.LayoutFocusTraversalPolicy#getFirstComponent(Container)->Component:::Returns the first Component in the traversal cycle
javax.swing.LayoutFocusTraversalPolicy#getLastComponent(Container)->Component:::Returns the last Component in the traversal cycle
javax.swing.LayoutFocusTraversalPolicy#accept(Component)->boolean:::Determines whether the specified Component is an acceptable choice as the new focus owner
javax.swing.SwingDefaultFocusTraversalPolicy#accept(Component)->boolean::: swing default focus traversal policy accept
javax.swing.LayoutStyle#setInstance(LayoutStyle)->void:::Sets the shared instance of LayoutStyle
javax.swing.LayoutStyle#getInstance()->LayoutStyle:::Returns the shared instance of LayoutStyle
javax.swing.LayoutStyle#getPreferredGap(JComponent, JComponent, ComponentPlacement, int, Container)->int:::Returns the amount of space to use between two components
javax.swing.LayoutStyle#getContainerGap(JComponent, int, Container)->int:::Returns the amount of space to place between the component and specified edge of its parent.
javax.swing.LegacyGlueFocusTraversalPolicy#setNextFocusableComponent(Component, Component)->void::: legacy glue focus traversal policy set next focusable component
javax.swing.LegacyGlueFocusTraversalPolicy#unsetNextFocusableComponent(Component, Component)->void::: legacy glue focus traversal policy unset next focusable component
javax.swing.LegacyGlueFocusTraversalPolicy#getComponentAfter(Container, Component)->Component::: legacy glue focus traversal policy get component after
javax.swing.LegacyGlueFocusTraversalPolicy#getComponentBefore(Container, Component)->Component::: legacy glue focus traversal policy get component before
javax.swing.LegacyGlueFocusTraversalPolicy#getFirstComponent(Container)->Component::: legacy glue focus traversal policy get first component
javax.swing.LegacyGlueFocusTraversalPolicy#getLastComponent(Container)->Component::: legacy glue focus traversal policy get last component
javax.swing.LegacyGlueFocusTraversalPolicy#getDefaultComponent(Container)->Component::: legacy glue focus traversal policy get default component
javax.swing.ListCellRenderer#getListCellRendererComponent(JList, E, int, boolean, boolean)->Component:::Return a component that has been configured to display the specified value
javax.swing.ListModel#getSize()->int:::Returns the length of the list.
javax.swing.ListModel#getElementAt(int)->E:::Returns the value at the specified index.
javax.swing.ListModel#addListDataListener(ListDataListener)->void:::Adds a listener to the list that's notified each time a change to the data model occurs.
javax.swing.ListModel#removeListDataListener(ListDataListener)->void:::Removes a listener from the list that's notified each time a change to the data model occurs.
javax.swing.ListSelectionModel#setSelectionInterval(int, int)->void:::Changes the selection to be between index0 and index1 inclusive
javax.swing.ListSelectionModel#addSelectionInterval(int, int)->void:::Changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive
javax.swing.ListSelectionModel#removeSelectionInterval(int, int)->void:::Changes the selection to be the set difference of the current selection and the indices between index0 and index1 inclusive
javax.swing.ListSelectionModel#getMinSelectionIndex()->int:::Returns the first selected index or -1 if the selection is empty.
javax.swing.ListSelectionModel#getMaxSelectionIndex()->int:::Returns the last selected index or -1 if the selection is empty.
javax.swing.ListSelectionModel#isSelectedIndex(int)->boolean:::Returns true if the specified index is selected.
javax.swing.ListSelectionModel#getAnchorSelectionIndex()->int:::Return the first index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval()
javax.swing.ListSelectionModel#setAnchorSelectionIndex(int)->void:::Set the anchor selection index.
javax.swing.ListSelectionModel#getLeadSelectionIndex()->int:::Return the second index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
javax.swing.ListSelectionModel#setLeadSelectionIndex(int)->void:::Set the lead selection index.
javax.swing.ListSelectionModel#clearSelection()->void:::Change the selection to the empty set
javax.swing.ListSelectionModel#isSelectionEmpty()->boolean:::Returns true if no indices are selected.
javax.swing.ListSelectionModel#insertIndexInterval(int, int, boolean)->void:::Insert length indices beginning before/after index
javax.swing.ListSelectionModel#removeIndexInterval(int, int)->void:::Remove the indices in the interval index0,index1 (inclusive) from the selection model
javax.swing.ListSelectionModel#setValueIsAdjusting(boolean)->void:::Sets the valueIsAdjusting property, which indicates whether or not upcoming selection changes should be considered part of a single change
javax.swing.ListSelectionModel#getValueIsAdjusting()->boolean:::Returns true if the selection is undergoing a series of changes.
javax.swing.ListSelectionModel#setSelectionMode(int)->void:::Sets the selection mode
javax.swing.ListSelectionModel#getSelectionMode()->int:::Returns the current selection mode.
javax.swing.ListSelectionModel#addListSelectionListener(ListSelectionListener)->void:::Add a listener to the list that's notified each time a change to the selection occurs.
javax.swing.ListSelectionModel#removeListSelectionListener(ListSelectionListener)->void:::Remove a listener from the list that's notified each time a change to the selection occurs.
javax.swing.ListSelectionModel#getSelectedIndices()->int[]:::Returns an array of all of the selected indices in the selection model, in increasing order.
javax.swing.ListSelectionModel#getSelectedItemsCount()->int:::Returns the number of selected items.
javax.swing.LookAndFeel#installColors(JComponent, String, String)->void:::Convenience method for setting a component's foreground and background color properties with values from the defaults
javax.swing.LookAndFeel#installColorsAndFont(JComponent, String, String, String)->void:::Convenience method for setting a component's foreground, background and font properties with values from the defaults
javax.swing.LookAndFeel#installBorder(JComponent, String)->void:::Convenience method for setting a component's border property with a value from the defaults
javax.swing.LookAndFeel#uninstallBorder(JComponent)->void:::Convenience method for uninstalling a border
javax.swing.LookAndFeel#installProperty(JComponent, String, Object)->void:::Convenience method for installing a property with the specified name and value on a component if that property has not already been set by the developer
javax.swing.LookAndFeel#makeKeyBindings(Object[])->JTextComponent.KeyBinding[]:::Convenience method for building an array of KeyBindings
javax.swing.LookAndFeel#makeInputMap(Object[])->InputMap:::Creates an InputMapUIResource from keys
javax.swing.LookAndFeel#makeComponentInputMap(JComponent, Object[])->ComponentInputMap:::Creates a ComponentInputMapUIResource from keys
javax.swing.LookAndFeel#loadKeyBindings(InputMap, Object[])->void:::Populates an InputMap with the specified bindings
javax.swing.LookAndFeel#makeIcon(Class, String)->Object:::Creates and returns a UIDefault.LazyValue that loads an image
javax.swing.LookAndFeel#getLayoutStyle()->LayoutStyle:::Returns the LayoutStyle for this look and feel
javax.swing.LookAndFeel#provideErrorFeedback(Component)->void:::Invoked when the user attempts an invalid operation, such as pasting into an uneditable JTextField that has focus
javax.swing.LookAndFeel#getDesktopPropertyValue(String, Object)->Object:::Returns the value of the specified system desktop property by invoking Toolkit.getDefaultToolkit().getDesktopProperty()
javax.swing.LookAndFeel#getDisabledIcon(JComponent, Icon)->Icon:::Returns an Icon with a disabled appearance
javax.swing.LookAndFeel#getDisabledSelectedIcon(JComponent, Icon)->Icon:::Returns an Icon for use by disabled components that are also selected
javax.swing.LookAndFeel#getName()->String:::Return a short string that identifies this look and feel, e.g
javax.swing.LookAndFeel#getID()->String:::Return a string that identifies this look and feel
javax.swing.LookAndFeel#getDescription()->String:::Return a one line description of this look and feel implementation, e.g
javax.swing.LookAndFeel#getSupportsWindowDecorations()->boolean:::Returns true if the LookAndFeel returned RootPaneUI instances support providing Window decorations in a JRootPane
javax.swing.LookAndFeel#isNativeLookAndFeel()->boolean:::If the underlying platform has a "native" look and feel, and this is an implementation of it, return true
javax.swing.LookAndFeel#isSupportedLookAndFeel()->boolean:::Return true if the underlying platform supports and or permits this look and feel
javax.swing.LookAndFeel#initialize()->void:::Initializes the look and feel
javax.swing.LookAndFeel#uninitialize()->void:::Uninitializes the look and feel
javax.swing.LookAndFeel#getDefaults()->UIDefaults:::Returns the look and feel defaults
javax.swing.LookAndFeel#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.MenuElement#processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager)->void:::Processes a mouse event
javax.swing.MenuElement#processKeyEvent(KeyEvent, MenuElement[], MenuSelectionManager)->void::: Process a key event.
javax.swing.MenuElement#menuSelectionChanged(boolean)->void:::Call by the MenuSelectionManager when the MenuElement is added or removed from the menu selection.
javax.swing.MenuElement#getSubElements()->MenuElement[]:::This method should return an array containing the sub-elements for the receiving menu element.
javax.swing.MenuElement#getComponent()->Component:::This method should return the java.awt.Component used to paint the receiving element
javax.swing.MenuSelectionManager#defaultManager()->MenuSelectionManager:::Returns the default menu selection manager.
javax.swing.MenuSelectionManager#setSelectedPath(MenuElement[])->void:::Changes the selection in the menu hierarchy
javax.swing.MenuSelectionManager#getSelectedPath()->MenuElement[]:::Returns the path to the currently selected menu item
javax.swing.MenuSelectionManager#clearSelectedPath()->void:::Tell the menu selection to close and unselect all the menu components
javax.swing.MenuSelectionManager#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to the button.
javax.swing.MenuSelectionManager#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the button.
javax.swing.MenuSelectionManager#getChangeListeners()->ChangeListener[]:::Returns an array of all the ChangeListeners added to this MenuSelectionManager with addChangeListener().
javax.swing.MenuSelectionManager#fireStateChanged()->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.MenuSelectionManager#processMouseEvent(MouseEvent)->void:::When a MenuElement receives an event from a MouseListener, it should never process the event directly
javax.swing.MenuSelectionManager#componentForPoint(Component, Point)->Component:::Returns the component in the currently selected path which contains sourcePoint.
javax.swing.MenuSelectionManager#processKeyEvent(KeyEvent)->void:::When a MenuElement receives an event from a KeyListener, it should never process the event directly
javax.swing.MenuSelectionManager#isComponentPartOfCurrentMenu(Component)->boolean:::Return true if c is part of the currently used menu
javax.swing.MultiUIDefaults#get(Object)->Object::: multi defaults get
javax.swing.MultiUIDefaults#get(Object, Locale)->Object::: multi defaults get
javax.swing.MultiUIDefaults#size()->int::: multi defaults size
javax.swing.MultiUIDefaults#isEmpty()->boolean::: multi defaults is empty
javax.swing.MultiUIDefaults#keys()->Enumeration::: multi defaults keys
javax.swing.MultiUIDefaults#elements()->Enumeration::: multi defaults elements
javax.swing.MultiUIDefaults#entrySet()->Set>::: multi defaults entry set
javax.swing.MultiUIDefaults#getUIError(String)->void::: multi defaults get error
javax.swing.MultiUIDefaults#remove(Object)->Object::: multi defaults remove
javax.swing.MultiUIDefaults#clear()->void::: multi defaults clear
javax.swing.MultiUIDefaults#toString()->String::: multi defaults to string
javax.swing.MutableComboBoxModel#addElement(E)->void:::Adds an item at the end of the model
javax.swing.MutableComboBoxModel#removeElement(Object)->void:::Removes an item from the model
javax.swing.MutableComboBoxModel#insertElementAt(E, int)->void:::Adds an item at a specific index
javax.swing.MutableComboBoxModel#removeElementAt(int)->void:::Removes an item at a specific index
javax.swing.OverlayLayout#getTarget()->Container:::Returns the container that uses this layout manager.
javax.swing.OverlayLayout#invalidateLayout(Container)->void:::Indicates a child has changed its layout related information, which causes any cached calculations to be flushed.
javax.swing.OverlayLayout#addLayoutComponent(String, Component)->void:::Adds the specified component to the layout
javax.swing.OverlayLayout#removeLayoutComponent(Component)->void:::Removes the specified component from the layout
javax.swing.OverlayLayout#addLayoutComponent(Component, Object)->void:::Adds the specified component to the layout, using the specified constraint object
javax.swing.OverlayLayout#preferredLayoutSize(Container)->Dimension:::Returns the preferred dimensions for this layout given the components in the specified target container
javax.swing.OverlayLayout#minimumLayoutSize(Container)->Dimension:::Returns the minimum dimensions needed to lay out the components contained in the specified target container
javax.swing.OverlayLayout#maximumLayoutSize(Container)->Dimension:::Returns the maximum dimensions needed to lay out the components contained in the specified target container
javax.swing.OverlayLayout#getLayoutAlignmentX(Container)->float:::Returns the alignment along the x axis for the container.
javax.swing.OverlayLayout#getLayoutAlignmentY(Container)->float:::Returns the alignment along the y axis for the container.
javax.swing.OverlayLayout#layoutContainer(Container)->void:::Called by the AWT when the specified container needs to be laid out.
javax.swing.OverlayLayout#checkContainer(Container)->void::: overlay layout check container
javax.swing.OverlayLayout#checkRequests()->void::: overlay layout check requests
javax.swing.Painter#paint(Graphics2D, T, int, int)->void:::Renders to the given java.awt.Graphics2D object
javax.swing.Popup#show()->void::: popup show
javax.swing.Popup#hide()->void::: popup hide
javax.swing.Popup#dispose()->void:::Frees any resources the Popup may be holding onto.
javax.swing.Popup#reset(Component, Component, int, int)->void:::Resets the Popup to an initial state.
javax.swing.Popup#pack()->void:::Causes the Popup to be sized to fit the preferred size of the Component it contains.
javax.swing.Popup#createComponent(Component)->Component:::Creates the Component to use as the parent of the Popup
javax.swing.Popup#getComponent()->Component:::Returns the Component returned from createComponent that will hold the Popup.
javax.swing.Popup.HeavyWeightWindow#update(Graphics)->void::: heavy weight window update
javax.swing.Popup.HeavyWeightWindow#show()->void::: heavy weight window show
javax.swing.PopupFactory#setSharedInstance(PopupFactory)->void:::Sets the PopupFactory that will be used to obtain Popups
javax.swing.PopupFactory#getSharedInstance()->PopupFactory:::Returns the shared PopupFactory which can be used to obtain Popups.
javax.swing.PopupFactory#setPopupType(int)->void:::Provides a hint as to the type of Popup that should be created.
javax.swing.PopupFactory#getPopupType()->int:::Returns the preferred type of Popup to create.
javax.swing.PopupFactory#getPopup(Component, Component, int, int)->Popup:::Creates a Popup for the Component owner containing the Component contents
javax.swing.PopupFactory#getPopup(Component, Component, int, int, boolean)->Popup:::Creates a Popup for the Component owner containing the Component contents
javax.swing.ProgressMonitor#setProgress(int)->void:::Indicate the progress of the operation being monitored
javax.swing.ProgressMonitor#close()->void:::Indicate that the operation is complete
javax.swing.ProgressMonitor#getMinimum()->int:::Returns the minimum value -- the lower end of the progress value.
javax.swing.ProgressMonitor#setMinimum(int)->void:::Specifies the minimum value.
javax.swing.ProgressMonitor#getMaximum()->int:::Returns the maximum value -- the higher end of the progress value.
javax.swing.ProgressMonitor#setMaximum(int)->void:::Specifies the maximum value.
javax.swing.ProgressMonitor#isCanceled()->boolean:::Returns true if the user hits the Cancel button or closes the progress dialog.
javax.swing.ProgressMonitor#setMillisToDecideToPopup(int)->void:::Specifies the amount of time to wait before deciding whether or not to popup a progress monitor.
javax.swing.ProgressMonitor#getMillisToDecideToPopup()->int:::Returns the amount of time this object waits before deciding whether or not to popup a progress monitor.
javax.swing.ProgressMonitor#setMillisToPopup(int)->void:::Specifies the amount of time it will take for the popup to appear
javax.swing.ProgressMonitor#getMillisToPopup()->int:::Returns the amount of time it will take for the popup to appear.
javax.swing.ProgressMonitor#setNote(String)->void:::Specifies the additional note that is displayed along with the progress message
javax.swing.ProgressMonitor#getNote()->String:::Specifies the additional note that is displayed along with the progress message.
javax.swing.ProgressMonitor#getAccessibleContext()->AccessibleContext:::Gets the AccessibleContext for the ProgressMonitor
javax.swing.ProgressMonitor.AccessibleProgressMonitor#stateChanged(ChangeEvent)->void:::Invoked when the target of the listener has changed its state.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#propertyChange(PropertyChangeEvent)->void:::This method gets called when a bound property is changed.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleName()->String:::Gets the accessibleName property of this object
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleDescription()->String:::Gets the accessibleDescription property of this object
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleRole()->AccessibleRole:::Gets the role of this object
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleStateSet()->AccessibleStateSet:::Gets the state set of this object
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleParent()->Accessible:::Gets the Accessible parent of this object.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleIndexInParent()->int:::Gets the 0-based index of this object in its accessible parent.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleChildrenCount()->int:::Returns the number of accessible children of the object.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleChild(int)->Accessible:::Returns the specified Accessible child of the object
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getLocale()->Locale:::Gets the locale of the component
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleComponent()->AccessibleComponent:::Gets the AccessibleComponent associated with this object that has a graphical representation.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleValue()->AccessibleValue:::Gets the AccessibleValue associated with this object that supports a Numerical value.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAccessibleText()->AccessibleText:::Gets the AccessibleText associated with this object presenting text on the display.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getIndexAtPoint(Point)->int:::Given a point in local coordinates, return the zero-based index of the character under that Point
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getCharacterBounds(int)->Rectangle:::Determines the bounding box of the character at the given index into the string
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getCharCount()->int:::Returns the number of characters (valid indicies)
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getCaretPosition()->int:::Returns the zero-based offset of the caret
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAtIndex(int, int)->String:::Returns the String at a given index.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getAfterIndex(int, int)->String:::Returns the String after a given index.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getBeforeIndex(int, int)->String:::Returns the String before a given index.
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getCharacterAttribute(int)->AttributeSet:::Returns the AttributeSet for a given character at a given index
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getSelectionStart()->int:::Returns the start offset within the selected text
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getSelectionEnd()->int:::Returns the end offset within the selected text
javax.swing.ProgressMonitor.AccessibleProgressMonitor#getSelectedText()->String:::Returns the portion of the text that is selected.
javax.swing.ProgressMonitorInputStream#getProgressMonitor()->ProgressMonitor:::Get the ProgressMonitor object being used by this stream
javax.swing.ProgressMonitorInputStream#read()->int:::Overrides FilterInputStream.read to update the progress monitor after the read.
javax.swing.ProgressMonitorInputStream#read(byte[])->int:::Overrides FilterInputStream.read to update the progress monitor after the read.
javax.swing.ProgressMonitorInputStream#read(byte[], int, int)->int:::Overrides FilterInputStream.read to update the progress monitor after the read.
javax.swing.ProgressMonitorInputStream#skip(long)->long:::Overrides FilterInputStream.skip to update the progress monitor after the skip.
javax.swing.ProgressMonitorInputStream#close()->void:::Overrides FilterInputStream.close to close the progress monitor as well as the stream.
javax.swing.ProgressMonitorInputStream#reset()->void:::Overrides FilterInputStream.reset to reset the progress monitor as well as the stream.
javax.swing.Renderer#setValue(Object, boolean)->void:::Specifies the value to display and whether or not the value should be portrayed as "currently selected".
javax.swing.Renderer#getComponent()->Component:::Returns the component used to render the value.
javax.swing.RepaintManager#currentManager(Component)->RepaintManager:::Return the RepaintManager for the calling thread given a Component.
javax.swing.RepaintManager#currentManager(AppContext)->RepaintManager:::Returns the RepaintManager for the specified AppContext
javax.swing.RepaintManager#currentManager(JComponent)->RepaintManager:::Return the RepaintManager for the calling thread given a JComponent
javax.swing.RepaintManager#setCurrentManager(RepaintManager)->void:::Set the RepaintManager that should be used for the calling thread
javax.swing.RepaintManager#addInvalidComponent(JComponent)->void:::Mark the component as in need of layout and queue a runnable for the event dispatching thread that will validate the components first isValidateRoot() ancestor.
javax.swing.RepaintManager#removeInvalidComponent(JComponent)->void:::Remove a component from the list of invalid components.
javax.swing.RepaintManager#addDirtyRegion(JComponent, int, int, int, int)->void:::Add a component in the list of components that should be refreshed
javax.swing.RepaintManager#addDirtyRegion(Window, int, int, int, int)->void:::Adds window to the list of Components that need to be repainted.
javax.swing.RepaintManager#addDirtyRegion(Applet, int, int, int, int)->void:::Adds applet to the list of Components that need to be repainted.
javax.swing.RepaintManager#scheduleHeavyWeightPaints()->void::: repaint manager schedule heavy weight paints
javax.swing.RepaintManager#nativeAddDirtyRegion(AppContext, Container, int, int, int, int)->void::: repaint manager native add dirty region
javax.swing.RepaintManager#nativeQueueSurfaceDataRunnable(AppContext, Component, Runnable)->void::: repaint manager native queue surface data runnable
javax.swing.RepaintManager#getDirtyRegion(JComponent)->Rectangle:::Return the current dirty region for a component
javax.swing.RepaintManager#markCompletelyDirty(JComponent)->void:::Mark a component completely dirty
javax.swing.RepaintManager#markCompletelyClean(JComponent)->void:::Mark a component completely clean
javax.swing.RepaintManager#isCompletelyDirty(JComponent)->boolean:::Convenience method that returns true if aComponent will be completely painted during the next paintDirtyRegions()
javax.swing.RepaintManager#validateInvalidComponents()->void:::Validate all of the components that have been marked invalid.
javax.swing.RepaintManager#isPainting()->boolean::: repaint manager is painting
javax.swing.RepaintManager#paintDirtyRegions()->void:::Paint all of the components that have been marked dirty.
javax.swing.RepaintManager#collectDirtyComponents(Map, Component, java.util.List)->void::: repaint manager collect dirty components
javax.swing.RepaintManager#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.RepaintManager#getOffscreenBuffer(Component, int, int)->Image:::Return the offscreen buffer that should be used as a double buffer with the component c
javax.swing.RepaintManager#getVolatileOffscreenBuffer(Component, int, int)->Image:::Return a volatile offscreen buffer that should be used as a double buffer with the specified component c
javax.swing.RepaintManager#setDoubleBufferMaximumSize(Dimension)->void:::Set the maximum double buffer size.
javax.swing.RepaintManager#getDoubleBufferMaximumSize()->Dimension:::Returns the maximum double buffer size.
javax.swing.RepaintManager#setDoubleBufferingEnabled(boolean)->void:::Enables or disables double buffering in this RepaintManager
javax.swing.RepaintManager#isDoubleBufferingEnabled()->boolean:::Returns true if this RepaintManager is double buffered
javax.swing.RepaintManager#resetDoubleBuffer()->void:::This resets the double buffer
javax.swing.RepaintManager#resetVolatileDoubleBuffer(GraphicsConfiguration)->void:::This resets the volatile double buffer.
javax.swing.RepaintManager#useVolatileDoubleBuffer()->boolean:::Returns true if we should use the Image returned from getVolatileOffscreenBuffer to do double buffering.
javax.swing.RepaintManager#paint(JComponent, JComponent, Graphics, int, int, int, int)->void:::Paints a region of a component
javax.swing.RepaintManager#copyArea(JComponent, Graphics, int, int, int, int, int, int, boolean)->void:::Does a copy area on the specified region.
javax.swing.RepaintManager#notifyRepaintPerformed(JComponent, int, int, int, int)->void:::Notify the attached repaint listeners that an area of the c component has been immediately repainted, that is without scheduling a repaint runnable, due to performing a "blit" (via calling the copyArea method).
javax.swing.RepaintManager#beginPaint()->void:::Invoked prior to any paint/copyArea method calls
javax.swing.RepaintManager#endPaint()->void:::Invoked after beginPaint has been invoked.
javax.swing.RepaintManager#show(Container, int, int, int, int)->boolean:::If possible this will show a previously rendered portion of a Component
javax.swing.RepaintManager#doubleBufferingChanged(JRootPane)->void:::Invoked when the doubleBuffered or useTrueDoubleBuffering properties of a JRootPane change
javax.swing.RepaintManager#setPaintManager(PaintManager)->void:::Sets the PaintManager that is used to handle all double buffered painting.
javax.swing.RepaintManager.PaintManager#paint(JComponent, JComponent, Graphics, int, int, int, int)->boolean:::Paints a region of a component
javax.swing.RepaintManager.PaintManager#copyArea(JComponent, Graphics, int, int, int, int, int, int, boolean)->void:::Does a copy area on the specified region.
javax.swing.RepaintManager.PaintManager#beginPaint()->void:::Invoked prior to any calls to paint or copyArea.
javax.swing.RepaintManager.PaintManager#endPaint()->void:::Invoked to indicate painting has been completed.
javax.swing.RepaintManager.PaintManager#show(Container, int, int, int, int)->boolean:::Shows a region of a previously rendered component
javax.swing.RepaintManager.PaintManager#doubleBufferingChanged(JRootPane)->void:::Invoked when the doubleBuffered or useTrueDoubleBuffering properties of a JRootPane change
javax.swing.RepaintManager.PaintManager#paintDoubleBuffered(JComponent, Image, Graphics, int, int, int, int)->void:::Paints a portion of a component to an offscreen buffer.
javax.swing.RepaintManager.PaintManager#repaintRoot(JComponent)->void:::Schedules a repaint for the specified component
javax.swing.RepaintManager.PaintManager#isRepaintingRoot()->boolean:::Returns true if the component being painted is the root component that was previously passed to repaintRoot.
javax.swing.RepaintManager.PaintManager#dispose()->void:::Cleans up any state
javax.swing.RootPaneContainer#getRootPane()->JRootPane:::Return this component's single JRootPane child
javax.swing.RootPaneContainer#setContentPane(Container)->void:::The "contentPane" is the primary container for application specific components
javax.swing.RootPaneContainer#getContentPane()->Container:::Returns the contentPane.
javax.swing.RootPaneContainer#setLayeredPane(JLayeredPane)->void:::A Container that manages the contentPane and in some cases a menu bar
javax.swing.RootPaneContainer#getLayeredPane()->JLayeredPane:::Returns the layeredPane.
javax.swing.RootPaneContainer#setGlassPane(Component)->void:::The glassPane is always the first child of the rootPane and the rootPanes layout manager ensures that it's always as big as the rootPane
javax.swing.RootPaneContainer#getGlassPane()->Component:::Returns the glassPane.
javax.swing.RowFilter#regexFilter(String, int...)->RowFilter:::Returns a RowFilter that uses a regular expression to determine which entries to include
javax.swing.RowFilter#dateFilter(ComparisonType, Date, int...)->RowFilter:::Returns a RowFilter that includes entries that have at least one Date value meeting the specified criteria
javax.swing.RowFilter#numberFilter(ComparisonType, Number, int...)->RowFilter:::Returns a RowFilter that includes entries that have at least one Number value meeting the specified criteria
javax.swing.RowFilter#orFilter(Iterable>)->RowFilter:::Returns a RowFilter that includes entries if any of the supplied filters includes the entry
javax.swing.RowFilter#andFilter(Iterable>)->RowFilter:::Returns a RowFilter that includes entries if all of the supplied filters include the entry
javax.swing.RowFilter#notFilter(RowFilter)->RowFilter:::Returns a RowFilter that includes entries if the supplied filter does not include the entry.
javax.swing.RowFilter#include(Entry)->boolean:::Returns true if the specified entry should be shown; returns false if the entry should be hidden
javax.swing.RowFilter.Entry#getModel()->M:::Returns the underlying model.
javax.swing.RowFilter.Entry#getValueCount()->int:::Returns the number of values in the entry
javax.swing.RowFilter.Entry#getValue(int)->Object:::Returns the value at the specified index
javax.swing.RowFilter.Entry#getStringValue(int)->String:::Returns the string value at the specified index
javax.swing.RowFilter.Entry#getIdentifier()->I:::Returns the identifer (in the model) of the entry
javax.swing.RowSorter#getModel()->M:::Returns the underlying model.
javax.swing.RowSorter#toggleSortOrder(int)->void:::Reverses the sort order of the specified column
javax.swing.RowSorter#convertRowIndexToModel(int)->int:::Returns the location of index in terms of the underlying model
javax.swing.RowSorter#convertRowIndexToView(int)->int:::Returns the location of index in terms of the view
javax.swing.RowSorter#setSortKeys(List)->void:::Sets the current sort keys.
javax.swing.RowSorter#getSortKeys()->List:::Returns the current sort keys
javax.swing.RowSorter#getViewRowCount()->int:::Returns the number of rows in the view
javax.swing.RowSorter#getModelRowCount()->int:::Returns the number of rows in the underlying model.
javax.swing.RowSorter#modelStructureChanged()->void:::Invoked when the underlying model structure has completely changed
javax.swing.RowSorter#allRowsChanged()->void:::Invoked when the contents of the underlying model have completely changed
javax.swing.RowSorter#rowsInserted(int, int)->void:::Invoked when rows have been inserted into the underlying model in the specified range (inclusive)
javax.swing.RowSorter#rowsDeleted(int, int)->void:::Invoked when rows have been deleted from the underlying model in the specified range (inclusive)
javax.swing.RowSorter#rowsUpdated(int, int)->void:::Invoked when rows have been changed in the underlying model between the specified range (inclusive)
javax.swing.RowSorter#rowsUpdated(int, int, int)->void:::Invoked when the column in the rows have been updated in the underlying model between the specified range
javax.swing.RowSorter#addRowSorterListener(RowSorterListener)->void:::Adds a RowSorterListener to receive notification about this RowSorter
javax.swing.RowSorter#removeRowSorterListener(RowSorterListener)->void:::Removes a RowSorterListener
javax.swing.RowSorter#fireSortOrderChanged()->void:::Notifies listener that the sort order has changed.
javax.swing.RowSorter#fireRowSorterChanged(int[])->void:::Notifies listener that the mapping has changed.
javax.swing.RowSorter#fireRowSorterChanged(RowSorterEvent)->void::: row sorter fire row sorter changed
javax.swing.RowSorter.SortKey#getColumn()->int:::Returns the index of the column.
javax.swing.RowSorter.SortKey#getSortOrder()->SortOrder:::Returns the sort order of the column.
javax.swing.RowSorter.SortKey#hashCode()->int:::Returns the hash code for this SortKey.
javax.swing.RowSorter.SortKey#equals(Object)->boolean:::Returns true if this object equals the specified object
javax.swing.Scrollable#getPreferredScrollableViewportSize()->Dimension:::Returns the preferred size of the viewport for a view component
javax.swing.Scrollable#getScrollableUnitIncrement(Rectangle, int, int)->int:::Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation
javax.swing.Scrollable#getScrollableBlockIncrement(Rectangle, int, int)->int:::Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of orientation
javax.swing.Scrollable#getScrollableTracksViewportWidth()->boolean:::Return true if a viewport should always force the width of this Scrollable to match the width of the viewport
javax.swing.Scrollable#getScrollableTracksViewportHeight()->boolean:::Return true if a viewport should always force the height of this Scrollable to match the height of the viewport
javax.swing.ScrollPaneLayout#syncWithScrollPane(JScrollPane)->void:::This method is invoked after the ScrollPaneLayout is set as the LayoutManager of a JScrollPane
javax.swing.ScrollPaneLayout#addSingletonComponent(Component, Component)->Component:::Removes an existing component
javax.swing.ScrollPaneLayout#addLayoutComponent(String, Component)->void:::Adds the specified component to the layout
javax.swing.ScrollPaneLayout#removeLayoutComponent(Component)->void:::Removes the specified component from the layout.
javax.swing.ScrollPaneLayout#getVerticalScrollBarPolicy()->int:::Returns the vertical scrollbar-display policy.
javax.swing.ScrollPaneLayout#setVerticalScrollBarPolicy(int)->void:::Sets the vertical scrollbar-display policy
javax.swing.ScrollPaneLayout#getHorizontalScrollBarPolicy()->int:::Returns the horizontal scrollbar-display policy.
javax.swing.ScrollPaneLayout#setHorizontalScrollBarPolicy(int)->void:::Sets the horizontal scrollbar-display policy
javax.swing.ScrollPaneLayout#getViewport()->JViewport:::Returns the JViewport object that displays the scrollable contents.
javax.swing.ScrollPaneLayout#getHorizontalScrollBar()->JScrollBar:::Returns the JScrollBar object that handles horizontal scrolling.
javax.swing.ScrollPaneLayout#getVerticalScrollBar()->JScrollBar:::Returns the JScrollBar object that handles vertical scrolling.
javax.swing.ScrollPaneLayout#getRowHeader()->JViewport:::Returns the JViewport object that is the row header.
javax.swing.ScrollPaneLayout#getColumnHeader()->JViewport:::Returns the JViewport object that is the column header.
javax.swing.ScrollPaneLayout#getCorner(String)->Component:::Returns the Component at the specified corner.
javax.swing.ScrollPaneLayout#preferredLayoutSize(Container)->Dimension:::The preferred size of a ScrollPane is the size of the insets, plus the preferred size of the viewport, plus the preferred size of the visible headers, plus the preferred size of the scrollbars that will appear given the current view and the current scrollbar displayPolicies
javax.swing.ScrollPaneLayout#minimumLayoutSize(Container)->Dimension:::The minimum size of a ScrollPane is the size of the insets plus minimum size of the viewport, plus the scrollpane's viewportBorder insets, plus the minimum size of the visible headers, plus the minimum size of the scrollbars whose displayPolicy isn't NEVER.
javax.swing.ScrollPaneLayout#layoutContainer(Container)->void:::Lays out the scrollpane
javax.swing.ScrollPaneLayout#getViewportBorderBounds(JScrollPane)->Rectangle:::Returns the bounds of the border around the specified scroll pane's viewport.
javax.swing.SingleSelectionModel#getSelectedIndex()->int:::Returns the model's selection.
javax.swing.SingleSelectionModel#setSelectedIndex(int)->void:::Sets the model's selected index to index
javax.swing.SingleSelectionModel#clearSelection()->void:::Clears the selection (to -1).
javax.swing.SingleSelectionModel#isSelected()->boolean:::Returns true if the selection model currently has a selected value.
javax.swing.SingleSelectionModel#addChangeListener(ChangeListener)->void:::Adds listener as a listener to changes in the model.
javax.swing.SingleSelectionModel#removeChangeListener(ChangeListener)->void:::Removes listener as a listener to changes in the model.
javax.swing.SizeRequirements#toString()->String:::Returns a string describing the minimum, preferred, and maximum size requirements, along with the alignment.
javax.swing.SizeRequirements#getTiledSizeRequirements(SizeRequirements[])->SizeRequirements:::Determines the total space necessary to place a set of components end-to-end
javax.swing.SizeRequirements#getAlignedSizeRequirements(SizeRequirements[])->SizeRequirements:::Determines the total space necessary to align a set of components
javax.swing.SizeRequirements#calculateTiledPositions(int, SizeRequirements, SizeRequirements[], int[], int[])->void:::Creates a set of offset/span pairs representing how to lay out a set of components end-to-end
javax.swing.SizeRequirements#calculateTiledPositions(int, SizeRequirements, SizeRequirements[], int[], int[], boolean)->void:::Creates a set of offset/span pairs representing how to lay out a set of components end-to-end
javax.swing.SizeRequirements#calculateAlignedPositions(int, SizeRequirements, SizeRequirements[], int[], int[])->void:::Creates a bunch of offset/span pairs specifying how to lay out a set of components with the specified alignments
javax.swing.SizeRequirements#calculateAlignedPositions(int, SizeRequirements, SizeRequirements[], int[], int[], boolean)->void:::Creates a set of offset/span pairs specifying how to lay out a set of components with the specified alignments
javax.swing.SizeRequirements#adjustSizes(int, SizeRequirements[])->int[]:::Adjust a specified array of sizes by a given amount.
javax.swing.SizeSequence#setSizes(int, int)->void:::Resets the size sequence to contain length items all with a size of size.
javax.swing.SizeSequence#setSizes(int[])->void:::Resets this SizeSequence object, using the data in the sizes argument
javax.swing.SizeSequence#getSizes()->int[]:::Returns the size of all entries.
javax.swing.SizeSequence#getPosition(int)->int:::Returns the start position for the specified entry
javax.swing.SizeSequence#getIndex(int)->int:::Returns the index of the entry that corresponds to the specified position
javax.swing.SizeSequence#getSize(int)->int:::Returns the size of the specified entry
javax.swing.SizeSequence#setSize(int, int)->void:::Sets the size of the specified entry
javax.swing.SizeSequence#insertEntries(int, int, int)->void:::Adds a contiguous group of entries to this SizeSequence
javax.swing.SizeSequence#removeEntries(int, int)->void:::Removes a contiguous group of entries from this SizeSequence
javax.swing.SortingFocusTraversalPolicy#getTopmostProvider(Container, Component)->Container::: sorting focus traversal policy get topmost provider
javax.swing.SortingFocusTraversalPolicy#getComponentAfter(Container, Component)->Component:::Returns the Component that should receive the focus after aComponent
javax.swing.SortingFocusTraversalPolicy#getComponentBefore(Container, Component)->Component:::Returns the Component that should receive the focus before aComponent
javax.swing.SortingFocusTraversalPolicy#getFirstComponent(Container)->Component:::Returns the first Component in the traversal cycle
javax.swing.SortingFocusTraversalPolicy#getLastComponent(Container)->Component:::Returns the last Component in the traversal cycle
javax.swing.SortingFocusTraversalPolicy#getDefaultComponent(Container)->Component:::Returns the default Component to focus
javax.swing.SortingFocusTraversalPolicy#setImplicitDownCycleTraversal(boolean)->void:::Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle implicitly
javax.swing.SortingFocusTraversalPolicy#getImplicitDownCycleTraversal()->boolean:::Returns whether this SortingFocusTraversalPolicy transfers focus down- cycle implicitly
javax.swing.SortingFocusTraversalPolicy#setComparator(Comparator)->void:::Sets the Comparator which will be used to sort the Components in a focus traversal cycle.
javax.swing.SortingFocusTraversalPolicy#getComparator()->Comparator:::Returns the Comparator which will be used to sort the Components in a focus traversal cycle.
javax.swing.SortingFocusTraversalPolicy#accept(Component)->boolean:::Determines whether a Component is an acceptable choice as the new focus owner
javax.swing.SwingContainerOrderFocusTraversalPolicy#accept(Component)->boolean::: swing container order focus traversal policy accept
javax.swing.SpinnerDateModel#setStart(Comparable)->void:::Changes the lower limit for Dates in this sequence
javax.swing.SpinnerDateModel#getStart()->Comparable:::Returns the first Date in the sequence.
javax.swing.SpinnerDateModel#setEnd(Comparable)->void:::Changes the upper limit for Dates in this sequence
javax.swing.SpinnerDateModel#getEnd()->Comparable:::Returns the last Date in the sequence.
javax.swing.SpinnerDateModel#setCalendarField(int)->void:::Changes the size of the date value change computed by the nextValue and previousValue methods
javax.swing.SpinnerDateModel#getCalendarField()->int:::Returns the Calendar field that is added to or subtracted from by the nextValue and previousValue methods.
javax.swing.SpinnerDateModel#getNextValue()->Object:::Returns the next Date in the sequence, or null if the next date is after end.
javax.swing.SpinnerDateModel#getPreviousValue()->Object:::Returns the previous Date in the sequence, or null if the previous date is before start.
javax.swing.SpinnerDateModel#getDate()->Date:::Returns the current element in this sequence of Dates
javax.swing.SpinnerDateModel#getValue()->Object:::Returns the current element in this sequence of Dates.
javax.swing.SpinnerDateModel#setValue(Object)->void:::Sets the current Date for this sequence
javax.swing.SpinnerListModel#getList()->List:::Returns the List that defines the sequence for this model.
javax.swing.SpinnerListModel#setList(List)->void:::Changes the list that defines this sequence and resets the index of the models value to zero
javax.swing.SpinnerListModel#getValue()->Object:::Returns the current element of the sequence.
javax.swing.SpinnerListModel#setValue(Object)->void:::Changes the current element of the sequence and notifies ChangeListeners
javax.swing.SpinnerListModel#getNextValue()->Object:::Returns the next legal value of the underlying sequence or null if value is already the last element.
javax.swing.SpinnerListModel#getPreviousValue()->Object:::Returns the previous element of the underlying sequence or null if value is already the first element.
javax.swing.SpinnerListModel#findNextMatch(String)->Object:::Returns the next object that starts with substring.
javax.swing.SpinnerModel#getValue()->Object:::The current element of the sequence
javax.swing.SpinnerModel#setValue(Object)->void:::Changes current value of the model, typically this value is displayed by the editor part of a  JSpinner
javax.swing.SpinnerModel#getNextValue()->Object:::Return the object in the sequence that comes after the object returned by getValue()
javax.swing.SpinnerModel#getPreviousValue()->Object:::Return the object in the sequence that comes before the object returned by getValue()
javax.swing.SpinnerModel#addChangeListener(ChangeListener)->void:::Adds a ChangeListener to the model's listener list
javax.swing.SpinnerModel#removeChangeListener(ChangeListener)->void:::Removes a ChangeListener from the model's listener list.
javax.swing.SpinnerNumberModel#setMinimum(Comparable)->void:::Changes the lower bound for numbers in this sequence
javax.swing.SpinnerNumberModel#getMinimum()->Comparable:::Returns the first number in this sequence.
javax.swing.SpinnerNumberModel#setMaximum(Comparable)->void:::Changes the upper bound for numbers in this sequence
javax.swing.SpinnerNumberModel#getMaximum()->Comparable:::Returns the last number in the sequence.
javax.swing.SpinnerNumberModel#setStepSize(Number)->void:::Changes the size of the value change computed by the getNextValue and getPreviousValue methods
javax.swing.SpinnerNumberModel#getStepSize()->Number:::Returns the size of the value change computed by the getNextValue and getPreviousValue methods.
javax.swing.SpinnerNumberModel#getNextValue()->Object:::Returns the next number in the sequence.
javax.swing.SpinnerNumberModel#getPreviousValue()->Object:::Returns the previous number in the sequence.
javax.swing.SpinnerNumberModel#getNumber()->Number:::Returns the value of the current element of the sequence.
javax.swing.SpinnerNumberModel#getValue()->Object:::Returns the value of the current element of the sequence.
javax.swing.SpinnerNumberModel#setValue(Object)->void:::Sets the current value for this sequence
javax.swing.Spring#getMinimumValue()->int:::Returns the minimum value of this Spring.
javax.swing.Spring#getPreferredValue()->int:::Returns the preferred value of this Spring.
javax.swing.Spring#getMaximumValue()->int:::Returns the maximum value of this Spring.
javax.swing.Spring#getValue()->int:::Returns the current value of this Spring.
javax.swing.Spring#setValue(int)->void:::Sets the current value of this Spring to value.
javax.swing.Spring#getStrain()->double::: spring get strain
javax.swing.Spring#setStrain(double)->void::: spring set strain
javax.swing.Spring#isCyclic(SpringLayout)->boolean::: spring is cyclic
javax.swing.Spring.AbstractSpring#getValue()->int::: abstract spring get value
javax.swing.Spring.AbstractSpring#setValue(int)->void::: abstract spring set value
javax.swing.Spring.AbstractSpring#clear()->void::: abstract spring clear
javax.swing.Spring.AbstractSpring#setNonClearValue(int)->void::: abstract spring set non clear value
javax.swing.Spring.WidthSpring#getMinimumValue()->int::: width spring get minimum value
javax.swing.Spring.WidthSpring#getPreferredValue()->int::: width spring get preferred value
javax.swing.Spring.WidthSpring#getMaximumValue()->int::: width spring get maximum value
javax.swing.Spring.HeightSpring#getMinimumValue()->int::: height spring get minimum value
javax.swing.Spring.HeightSpring#getPreferredValue()->int::: height spring get preferred value
javax.swing.Spring.HeightSpring#getMaximumValue()->int::: height spring get maximum value
javax.swing.Spring.SpringMap#map(int)->int::: spring map map
javax.swing.Spring.SpringMap#inv(int)->int::: spring map inv
javax.swing.Spring.SpringMap#getMinimumValue()->int::: spring map get minimum value
javax.swing.Spring.SpringMap#getPreferredValue()->int::: spring map get preferred value
javax.swing.Spring.SpringMap#getMaximumValue()->int::: spring map get maximum value
javax.swing.Spring.SpringMap#getValue()->int::: spring map get value
javax.swing.Spring.SpringMap#setValue(int)->void::: spring map set value
javax.swing.Spring.SpringMap#isCyclic(SpringLayout)->boolean::: spring map is cyclic
javax.swing.Spring.CompoundSpring#toString()->String::: compound spring to string
javax.swing.Spring.CompoundSpring#clear()->void::: compound spring clear
javax.swing.Spring.CompoundSpring#op(int, int)->int::: compound spring op
javax.swing.Spring.CompoundSpring#getMinimumValue()->int::: compound spring get minimum value
javax.swing.Spring.CompoundSpring#getPreferredValue()->int::: compound spring get preferred value
javax.swing.Spring.CompoundSpring#getMaximumValue()->int::: compound spring get maximum value
javax.swing.Spring.CompoundSpring#getValue()->int::: compound spring get value
javax.swing.Spring.CompoundSpring#isCyclic(SpringLayout)->boolean::: compound spring is cyclic
javax.swing.Spring#constant(int)->Spring:::Returns a strut -- a spring whose minimum, preferred, and maximum values each have the value pref.
javax.swing.Spring#constant(int, int, int)->Spring:::Returns a spring whose minimum, preferred, and maximum values have the values: min, pref, and max respectively.
javax.swing.Spring#minus(Spring)->Spring:::Returns -s: a spring running in the opposite direction to s.
javax.swing.Spring#sum(Spring, Spring)->Spring:::Returns s1+s2: a spring representing s1 and s2 in series
javax.swing.Spring#max(Spring, Spring)->Spring:::Returns max(s1, s2): a spring whose value is always greater than (or equal to)         the values of both s1 and s2.
javax.swing.Spring#difference(Spring, Spring)->Spring::: spring difference
javax.swing.Spring#scale(Spring, float)->Spring:::Returns a spring whose minimum, preferred, maximum and value properties are each multiples of the properties of the argument spring, s
javax.swing.Spring#width(Component)->Spring:::Returns a spring whose minimum, preferred, maximum and value properties are defined by the widths of the minimumSize, preferredSize, maximumSize and size properties of the supplied component
javax.swing.Spring#height(Component)->Spring:::Returns a spring whose minimum, preferred, maximum and value properties are defined by the heights of the minimumSize, preferredSize, maximumSize and size properties of the supplied component
javax.swing.SpringLayout.Constraints#setX(Spring)->void:::Sets the x property, which controls the x value of a component's location.
javax.swing.SpringLayout.Constraints#getX()->Spring:::Returns the value of the x property.
javax.swing.SpringLayout.Constraints#setY(Spring)->void:::Sets the y property, which controls the y value of a component's location.
javax.swing.SpringLayout.Constraints#getY()->Spring:::Returns the value of the y property.
javax.swing.SpringLayout.Constraints#setWidth(Spring)->void:::Sets the width property, which controls the width of a component.
javax.swing.SpringLayout.Constraints#getWidth()->Spring:::Returns the value of the width property.
javax.swing.SpringLayout.Constraints#setHeight(Spring)->void:::Sets the height property, which controls the height of a component.
javax.swing.SpringLayout.Constraints#getHeight()->Spring:::Returns the value of the height property.
javax.swing.SpringLayout.Constraints#setConstraint(String, Spring)->void:::Sets the spring controlling the specified edge
javax.swing.SpringLayout.Constraints#getConstraint(String)->Spring:::Returns the value of the specified edge, which may be a derived value, or even null
javax.swing.SpringLayout.Constraints#reset()->void::: constraints reset
javax.swing.SpringLayout#isCyclic(Spring)->boolean::: spring layout is cyclic
javax.swing.SpringLayout#addLayoutComponent(String, Component)->void:::Has no effect, since this layout manager does not use a per-component string.
javax.swing.SpringLayout#removeLayoutComponent(Component)->void:::Removes the constraints associated with the specified component.
javax.swing.SpringLayout#minimumLayoutSize(Container)->Dimension::: spring layout minimum layout size
javax.swing.SpringLayout#preferredLayoutSize(Container)->Dimension::: spring layout preferred layout size
javax.swing.SpringLayout#maximumLayoutSize(Container)->Dimension::: spring layout maximum layout size
javax.swing.SpringLayout#addLayoutComponent(Component, Object)->void:::If constraints is an instance of SpringLayout.Constraints, associates the constraints with the specified component.
javax.swing.SpringLayout#getLayoutAlignmentX(Container)->float:::Returns 0.5f (centered).
javax.swing.SpringLayout#getLayoutAlignmentY(Container)->float:::Returns 0.5f (centered).
javax.swing.SpringLayout#invalidateLayout(Container)->void::: spring layout invalidate layout
javax.swing.SpringLayout#putConstraint(String, Component, int, String, Component)->void:::Links edge e1 of component c1 to edge e2 of component c2, with a fixed distance between the edges
javax.swing.SpringLayout#putConstraint(String, Component, Spring, String, Component)->void:::Links edge e1 of component c1 to edge e2 of component c2
javax.swing.SpringLayout#getConstraints(Component)->Constraints:::Returns the constraints for the specified component
javax.swing.SpringLayout#getConstraint(String, Component)->Spring:::Returns the spring controlling the distance between the specified edge of the component and the top or left edge of its parent
javax.swing.SpringLayout#layoutContainer(Container)->void::: spring layout layout container
javax.swing.SwingPaintEventDispatcher#createPaintEvent(Component, int, int, int, int)->PaintEvent::: swing paint event dispatcher create paint event
javax.swing.SwingPaintEventDispatcher#shouldDoNativeBackgroundErase(Component)->boolean::: swing paint event dispatcher should do native background erase
javax.swing.SwingPaintEventDispatcher#queueSurfaceDataReplacing(Component, Runnable)->boolean::: swing paint event dispatcher queue surface data replacing
javax.swing.SwingUtilities#installSwingDropTargetAsNecessary(Component, TransferHandler)->void:::Installs a DropTarget on the component as necessary for a TransferHandler change.
javax.swing.SwingUtilities#isRectangleContainingRectangle(Rectangle, Rectangle)->boolean:::Return true if @{code a} contains b
javax.swing.SwingUtilities#getLocalBounds(Component)->Rectangle:::Return the rectangle (0,0,bounds.width,bounds.height) for the component aComponent
javax.swing.SwingUtilities#getWindowAncestor(Component)->Window:::Returns the first Window  ancestor of c, or null if c is not contained inside a Window.
javax.swing.SwingUtilities#convertScreenLocationToParent(Container, int, int)->Point:::Converts the location x y to the parents coordinate system, returning the location.
javax.swing.SwingUtilities#convertPoint(Component, Point, Component)->Point:::Convert a aPoint in source coordinate system to destination coordinate system
javax.swing.SwingUtilities#convertPoint(Component, int, int, Component)->Point:::Convert the point (x,y) in source coordinate system to destination coordinate system
javax.swing.SwingUtilities#convertRectangle(Component, Rectangle, Component)->Rectangle:::Convert the rectangle aRectangle in source coordinate system to destination coordinate system
javax.swing.SwingUtilities#getAncestorOfClass(Class, Component)->Container:::Convenience method for searching above comp in the component hierarchy and returns the first object of class c it finds
javax.swing.SwingUtilities#getAncestorNamed(String, Component)->Container:::Convenience method for searching above comp in the component hierarchy and returns the first object of name it finds
javax.swing.SwingUtilities#getDeepestComponentAt(Component, int, int)->Component:::Returns the deepest visible descendent Component of parent that contains the location x, y
javax.swing.SwingUtilities#convertMouseEvent(Component, MouseEvent, Component)->MouseEvent:::Returns a MouseEvent similar to sourceEvent except that its x and y members have been converted to destination's coordinate system
javax.swing.SwingUtilities#convertPointToScreen(Point, Component)->void:::Convert a point from a component's coordinate system to screen coordinates.
javax.swing.SwingUtilities#convertPointFromScreen(Point, Component)->void:::Convert a point from a screen coordinates to a component's coordinate system
javax.swing.SwingUtilities#windowForComponent(Component)->Window:::Returns the first Window  ancestor of c, or null if c is not contained inside a Window
javax.swing.SwingUtilities#isDescendingFrom(Component, Component)->boolean:::Return true if a component a descends from a component b
javax.swing.SwingUtilities#computeIntersection(int, int, int, int, Rectangle)->Rectangle:::Convenience to calculate the intersection of two rectangles without allocating a new rectangle
javax.swing.SwingUtilities#computeUnion(int, int, int, int, Rectangle)->Rectangle:::Convenience method that calculates the union of two rectangles without allocating a new rectangle.
javax.swing.SwingUtilities#computeDifference(Rectangle, Rectangle)->Rectangle[]:::Convenience returning an array of rect representing the regions within rectA that do not overlap with rectB
javax.swing.SwingUtilities#isLeftMouseButton(MouseEvent)->boolean:::Returns true if the mouse event specifies the left mouse button.
javax.swing.SwingUtilities#isMiddleMouseButton(MouseEvent)->boolean:::Returns true if the mouse event specifies the middle mouse button.
javax.swing.SwingUtilities#isRightMouseButton(MouseEvent)->boolean:::Returns true if the mouse event specifies the right mouse button.
javax.swing.SwingUtilities#computeStringWidth(FontMetrics, String)->int:::Compute the width of the string using a font with the specified "metrics" (sizes).
javax.swing.SwingUtilities#layoutCompoundLabel(JComponent, FontMetrics, String, Icon, int, int, int, int, Rectangle, Rectangle, Rectangle, int)->String:::Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string
javax.swing.SwingUtilities#layoutCompoundLabel(FontMetrics, String, Icon, int, int, int, int, Rectangle, Rectangle, Rectangle, int)->String:::Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string
javax.swing.SwingUtilities#paintComponent(Graphics, Component, Container, int, int, int, int)->void:::Paints a component to the specified Graphics
javax.swing.SwingUtilities#paintComponent(Graphics, Component, Container, Rectangle)->void:::Paints a component to the specified Graphics
javax.swing.SwingUtilities#updateComponentTreeUI(Component)->void:::A simple minded look and feel change: ask each node in the tree to updateUI() -- that is, to initialize its UI property with the current look and feel.
javax.swing.SwingUtilities#invokeLater(Runnable)->void:::Causes doRun.run() to be executed asynchronously on the AWT event dispatching thread
javax.swing.SwingUtilities#invokeAndWait(Runnable)->void:::Causes doRun.run() to be executed synchronously on the AWT event dispatching thread
javax.swing.SwingUtilities#isEventDispatchThread()->boolean:::Returns true if the current thread is an AWT event dispatching thread
javax.swing.SwingUtilities#getAccessibleIndexInParent(Component)->int:::Get the index of this object in its accessible parent.  Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method.
javax.swing.SwingUtilities#getAccessibleAt(Component, Point)->Accessible:::Returns the Accessible child contained at the local coordinate Point, if one exists
javax.swing.SwingUtilities#getAccessibleStateSet(Component)->AccessibleStateSet:::Get the state of this object
javax.swing.SwingUtilities#getAccessibleChildrenCount(Component)->int:::Returns the number of accessible children in the object
javax.swing.SwingUtilities#getAccessibleChild(Component, int)->Accessible:::Return the nth Accessible child of the object
javax.swing.SwingUtilities#findFocusOwner(Component)->Component:::Return the child Component of the specified Component that is the focus owner, if any.
javax.swing.SwingUtilities#getRootPane(Component)->JRootPane:::If c is a JRootPane descendant return its JRootPane ancestor
javax.swing.SwingUtilities#getRoot(Component)->Component:::Returns the root component for the current component tree.
javax.swing.SwingUtilities#getPaintingOrigin(JComponent)->JComponent::: swing utilities get painting origin
javax.swing.SwingUtilities#processKeyBindings(KeyEvent)->boolean:::Process the key bindings for the Component associated with event
javax.swing.SwingUtilities#isValidKeyEventForKeyBindings(KeyEvent)->boolean:::Returns true if the e is a valid KeyEvent to use in processing the key bindings associated with JComponents.
javax.swing.SwingUtilities#notifyAction(Action, KeyStroke, KeyEvent, Object, int)->boolean:::Invokes actionPerformed on action if action is non-null and accepts the sender object
javax.swing.SwingUtilities#replaceUIInputMap(JComponent, int, InputMap)->void:::Convenience method to change the UI InputMap for component to uiInputMap
javax.swing.SwingUtilities#replaceUIActionMap(JComponent, ActionMap)->void:::Convenience method to change the UI ActionMap for component to uiActionMap
javax.swing.SwingUtilities#getUIInputMap(JComponent, int)->InputMap:::Returns the InputMap provided by the UI for condition condition in component component
javax.swing.SwingUtilities#getUIActionMap(JComponent)->ActionMap:::Returns the ActionMap provided by the UI in component component
javax.swing.SwingUtilities.SharedOwnerFrame#addNotify()->void::: shared owner frame add notify
javax.swing.SwingUtilities.SharedOwnerFrame#installListeners()->void:::Install window listeners on owned windows to watch for displayability changes
javax.swing.SwingUtilities.SharedOwnerFrame#windowClosed(WindowEvent)->void:::Watches for displayability changes and disposes shared instance if there are no displayable children left.
javax.swing.SwingUtilities.SharedOwnerFrame#windowOpened(WindowEvent)->void::: shared owner frame window opened
javax.swing.SwingUtilities.SharedOwnerFrame#windowClosing(WindowEvent)->void::: shared owner frame window closing
javax.swing.SwingUtilities.SharedOwnerFrame#windowIconified(WindowEvent)->void::: shared owner frame window iconified
javax.swing.SwingUtilities.SharedOwnerFrame#windowDeiconified(WindowEvent)->void::: shared owner frame window deiconified
javax.swing.SwingUtilities.SharedOwnerFrame#windowActivated(WindowEvent)->void::: shared owner frame window activated
javax.swing.SwingUtilities.SharedOwnerFrame#windowDeactivated(WindowEvent)->void::: shared owner frame window deactivated
javax.swing.SwingUtilities.SharedOwnerFrame#show()->void::: shared owner frame show
javax.swing.SwingUtilities.SharedOwnerFrame#dispose()->void::: shared owner frame dispose
javax.swing.SwingUtilities#getSharedOwnerFrame()->Frame:::Returns a toolkit-private, shared, invisible Frame to be the owner for JDialogs and JWindows created with null owners.
javax.swing.SwingUtilities#getSharedOwnerFrameShutdownListener()->WindowListener:::Returns a SharedOwnerFrame's shutdown listener to dispose the SharedOwnerFrame if it has no more displayable children.
javax.swing.SwingUtilities#appContextGet(Object)->Object::: swing utilities app context get
javax.swing.SwingUtilities#appContextPut(Object, Object)->void::: swing utilities app context put
javax.swing.SwingUtilities#appContextRemove(Object)->void::: swing utilities app context remove
javax.swing.SwingUtilities#loadSystemClass(String)->Class::: swing utilities load system class
javax.swing.SwingUtilities#isLeftToRight(Component)->boolean::: swing utilities is left to right
javax.swing.SwingUtilities#doesIconReferenceImage(Icon, Image)->boolean:::Returns true if the Icon icon is an instance of ImageIcon, and the image it contains is the same as image.
javax.swing.SwingUtilities#findDisplayedMnemonicIndex(String, int)->int:::Returns index of the first occurrence of mnemonic within string text
javax.swing.SwingUtilities#calculateInnerArea(JComponent, Rectangle)->Rectangle:::Stores the position and size of the inner painting area of the specified component in r and returns r
javax.swing.SwingUtilities#updateRendererOrEditorUI(Object)->void::: swing utilities update renderer or editor i
javax.swing.SwingUtilities#getUnwrappedParent(Component)->Container:::Returns the first ancestor of the component which is not an instance of JLayer.
javax.swing.SwingUtilities#getUnwrappedView(JViewport)->Component:::Returns the first JViewport's descendant which is not an instance of JLayer
javax.swing.SwingUtilities#getValidateRoot(Container, boolean)->Container:::Retrieves the validate root of a given container
javax.swing.SwingWorker#doInBackground()->T:::Computes a result, or throws an exception if unable to do so
javax.swing.SwingWorker#run()->void:::Sets this Future to the result of computation unless it has been cancelled.
javax.swing.SwingWorker#publish(V...)->void:::Sends data chunks to the #process method
javax.swing.SwingWorker#process(List)->void:::Receives data chunks from the publish method asynchronously on the Event Dispatch Thread
javax.swing.SwingWorker#done()->void:::Executed on the Event Dispatch Thread after the doInBackground method is finished
javax.swing.SwingWorker#setProgress(int)->void:::Sets the progress bound property
javax.swing.SwingWorker#getProgress()->int:::Returns the progress bound property.
javax.swing.SwingWorker#execute()->void:::Schedules this SwingWorker for execution on a worker thread
javax.swing.SwingWorker#cancel(boolean)->boolean::: swing worker cancel
javax.swing.SwingWorker#isCancelled()->boolean::: swing worker is cancelled
javax.swing.SwingWorker#isDone()->boolean::: swing worker is done
javax.swing.SwingWorker#get()->T:::Note: calling {@code get on the Event Dispatch Thread blocks all events, including repaints, from being processed until this SwingWorker is complete
javax.swing.SwingWorker#get(long, TimeUnit)->T:::Please refer to {@link #get for more details.
javax.swing.SwingWorker#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
javax.swing.SwingWorker#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
javax.swing.SwingWorker#firePropertyChange(String, Object, Object)->void:::Reports a bound property update to any registered listeners
javax.swing.SwingWorker#getPropertyChangeSupport()->PropertyChangeSupport:::Returns the PropertyChangeSupport for this SwingWorker
javax.swing.SwingWorker#getState()->StateValue:::Returns the SwingWorker state bound property.
javax.swing.TablePrintable#print(Graphics, PageFormat, int)->int:::Prints the specified page of the table into the given Graphics context, in the specified format.
javax.swing.Timer#getAccessControlContext()->AccessControlContext:::Returns the acc this timer was constructed with.
javax.swing.Timer.DoPostEvent#run()->void::: do post event run
javax.swing.Timer.DoPostEvent#getTimer()->Timer::: do post event get timer
javax.swing.Timer#addActionListener(ActionListener)->void:::Adds an action listener to the Timer.
javax.swing.Timer#removeActionListener(ActionListener)->void:::Removes the specified action listener from the Timer.
javax.swing.Timer#getActionListeners()->ActionListener[]:::Returns an array of all the action listeners registered on this timer.
javax.swing.Timer#fireActionPerformed(ActionEvent)->void:::Notifies all listeners that have registered interest for notification on this event type.
javax.swing.Timer#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this Timer
javax.swing.Timer#setLogTimers(boolean)->void:::Enables or disables the timer log
javax.swing.Timer#getLogTimers()->boolean:::Returns true if logging is enabled.
javax.swing.Timer#setDelay(int)->void:::Sets the Timer's between-event delay, the number of milliseconds between successive action events
javax.swing.Timer#getDelay()->int:::Returns the delay, in milliseconds, between firings of action events.
javax.swing.Timer#setInitialDelay(int)->void:::Sets the Timer's initial delay, the time in milliseconds to wait after the timer is started before firing the first event
javax.swing.Timer#getInitialDelay()->int:::Returns the Timer's initial delay.
javax.swing.Timer#setRepeats(boolean)->void:::If flag is false, instructs the Timer to send only one action event to its listeners.
javax.swing.Timer#isRepeats()->boolean:::Returns true (the default) if the Timer will send an action event to its listeners multiple times.
javax.swing.Timer#setCoalesce(boolean)->void:::Sets whether the Timer coalesces multiple pending ActionEvent firings
javax.swing.Timer#isCoalesce()->boolean:::Returns true if the Timer coalesces multiple pending action events.
javax.swing.Timer#setActionCommand(String)->void:::Sets the string that will be delivered as the action command in ActionEvents fired by this timer
javax.swing.Timer#getActionCommand()->String:::Returns the string that will be delivered as the action command in ActionEvents fired by this timer
javax.swing.Timer#start()->void:::Starts the Timer, causing it to start sending action events to its listeners.
javax.swing.Timer#isRunning()->boolean:::Returns true if the Timer is running.
javax.swing.Timer#stop()->void:::Stops the Timer, causing it to stop sending action events to its listeners.
javax.swing.Timer#restart()->void:::Restarts the Timer, canceling any pending firings and causing it to fire with its initial delay.
javax.swing.Timer#cancelEvent()->void:::Resets the internal state to indicate this Timer shouldn't notify any of its listeners
javax.swing.Timer#post()->void::: timer post
javax.swing.Timer#getLock()->Lock::: timer get lock
javax.swing.TimerQueue#sharedInstance()->TimerQueue::: timer queue shared instance
javax.swing.TimerQueue#startIfNeeded()->void::: timer queue start if needed
javax.swing.TimerQueue#addTimer(Timer, long)->void::: timer queue add timer
javax.swing.TimerQueue#removeTimer(Timer)->void::: timer queue remove timer
javax.swing.TimerQueue#containsTimer(Timer)->boolean::: timer queue contains timer
javax.swing.TimerQueue#run()->void::: timer queue run
javax.swing.TimerQueue#toString()->String::: timer queue to string
javax.swing.TimerQueue.DelayedTimer#getDelay(TimeUnit)->long::: delayed timer get delay
javax.swing.TimerQueue.DelayedTimer#setTime(long)->void::: delayed timer set time
javax.swing.TimerQueue.DelayedTimer#getTimer()->Timer::: delayed timer get timer
javax.swing.TimerQueue.DelayedTimer#compareTo(Delayed)->int::: delayed timer compare to
javax.swing.ToolTipManager#setEnabled(boolean)->void:::Enables or disables the tooltip.
javax.swing.ToolTipManager#isEnabled()->boolean:::Returns true if this object is enabled.
javax.swing.ToolTipManager#setLightWeightPopupEnabled(boolean)->void:::When displaying the JToolTip, the ToolTipManager chooses to use a lightweight JPanel if it fits
javax.swing.ToolTipManager#isLightWeightPopupEnabled()->boolean:::Returns true if lightweight (all-Java) Tooltips are in use, or false if heavyweight (native peer) Tooltips are being used.
javax.swing.ToolTipManager#setInitialDelay(int)->void:::Specifies the initial delay value.
javax.swing.ToolTipManager#getInitialDelay()->int:::Returns the initial delay value.
javax.swing.ToolTipManager#setDismissDelay(int)->void:::Specifies the dismissal delay value.
javax.swing.ToolTipManager#getDismissDelay()->int:::Returns the dismissal delay value.
javax.swing.ToolTipManager#setReshowDelay(int)->void:::Used to specify the amount of time before the user has to wait initialDelay milliseconds before a tooltip will be shown
javax.swing.ToolTipManager#getReshowDelay()->int:::Returns the reshow delay property.
javax.swing.ToolTipManager#showTipWindow()->void::: tool tip manager show tip window
javax.swing.ToolTipManager#hideTipWindow()->void::: tool tip manager hide tip window
javax.swing.ToolTipManager#sharedInstance()->ToolTipManager:::Returns a shared ToolTipManager instance.
javax.swing.ToolTipManager#registerComponent(JComponent)->void:::Registers a component for tooltip management
javax.swing.ToolTipManager#unregisterComponent(JComponent)->void:::Removes a component from tooltip control.
javax.swing.ToolTipManager#mouseEntered(MouseEvent)->void::: Called when the mouse enters the region of a component
javax.swing.ToolTipManager#mouseExited(MouseEvent)->void::: Called when the mouse exits the region of a component
javax.swing.ToolTipManager#mousePressed(MouseEvent)->void::: Called when the mouse is pressed
javax.swing.ToolTipManager#mouseDragged(MouseEvent)->void::: Called when the mouse is pressed and dragged
javax.swing.ToolTipManager#mouseMoved(MouseEvent)->void::: Called when the mouse is moved
javax.swing.ToolTipManager.insideTimerAction#actionPerformed(ActionEvent)->void:::inside timer action action performed
javax.swing.ToolTipManager.outsideTimerAction#actionPerformed(ActionEvent)->void:::outside timer action action performed
javax.swing.ToolTipManager.stillInsideTimerAction#actionPerformed(ActionEvent)->void:::still inside timer action action performed
javax.swing.ToolTipManager#frameForComponent(Component)->Frame::: tool tip manager frame for component
javax.swing.TransferHandler.HasGetTransferHandler#getTransferHandler()->TransferHandler:::Returns the TransferHandler.
javax.swing.TransferHandler.DropLocation#getDropPoint()->Point:::Returns the drop point, representing the mouse's current location within the component.
javax.swing.TransferHandler.DropLocation#toString()->String:::Returns a string representation of this drop location
javax.swing.TransferHandler.TransferSupport#isDrop()->boolean:::Returns whether or not this TransferSupport represents a drop operation.
javax.swing.TransferHandler.TransferSupport#getComponent()->Component:::Returns the target component of this transfer.
javax.swing.TransferHandler.TransferSupport#getDropLocation()->DropLocation:::Returns the current (non-null) drop location for the component, when this TransferSupport represents a drop
javax.swing.TransferHandler.TransferSupport#setShowDropLocation(boolean)->void:::Sets whether or not the drop location should be visually indicated for the transfer - which must represent a drop
javax.swing.TransferHandler.TransferSupport#setDropAction(int)->void:::Sets the drop action for the transfer - which must represent a drop - to the given action, instead of the default user drop action
javax.swing.TransferHandler.TransferSupport#getDropAction()->int:::Returns the action chosen for the drop, when this TransferSupport represents a drop
javax.swing.TransferHandler.TransferSupport#getUserDropAction()->int:::Returns the user drop action for the drop, when this TransferSupport represents a drop
javax.swing.TransferHandler.TransferSupport#getSourceDropActions()->int:::Returns the drag source's supported drop actions, when this TransferSupport represents a drop
javax.swing.TransferHandler.TransferSupport#getDataFlavors()->DataFlavor[]:::Returns the data flavors for this transfer.
javax.swing.TransferHandler.TransferSupport#isDataFlavorSupported(DataFlavor)->boolean:::Returns whether or not the given data flavor is supported.
javax.swing.TransferHandler.TransferSupport#getTransferable()->Transferable:::Returns the Transferable associated with this transfer
javax.swing.TransferHandler#getCutAction()->Action:::Returns an Action that performs cut operations to the clipboard
javax.swing.TransferHandler#getCopyAction()->Action:::Returns an Action that performs copy operations to the clipboard
javax.swing.TransferHandler#getPasteAction()->Action:::Returns an Action that performs paste operations from the clipboard
javax.swing.TransferHandler#setDragImage(Image)->void:::Sets the drag image parameter
javax.swing.TransferHandler#getDragImage()->Image:::Returns the drag image
javax.swing.TransferHandler#setDragImageOffset(Point)->void:::Sets an anchor offset for the image to drag
javax.swing.TransferHandler#getDragImageOffset()->Point:::Returns an anchor offset for the image to drag.
javax.swing.TransferHandler#exportAsDrag(JComponent, InputEvent, int)->void:::Causes the Swing drag support to be initiated
javax.swing.TransferHandler#exportToClipboard(JComponent, Clipboard, int)->void:::Causes a transfer from the given component to the given clipboard
javax.swing.TransferHandler#importData(TransferSupport)->boolean:::Causes a transfer to occur from a clipboard or a drag and drop operation
javax.swing.TransferHandler#importData(JComponent, Transferable)->boolean:::Causes a transfer to a component from a clipboard or a DND drop operation
javax.swing.TransferHandler#canImport(TransferSupport)->boolean:::This method is called repeatedly during a drag and drop operation to allow the developer to configure properties of, and to return the acceptability of transfers; with a return value of true indicating that the transfer represented by the given TransferSupport (which contains all of the details of the transfer) is acceptable at the current time, and a value of false rejecting the transfer
javax.swing.TransferHandler#canImport(JComponent, DataFlavor[])->boolean:::Indicates whether a component will accept an import of the given set of data flavors prior to actually attempting to import it
javax.swing.TransferHandler#getSourceActions(JComponent)->int:::Returns the type of transfer actions supported by the source; any bitwise-OR combination of COPY, MOVE and LINK
javax.swing.TransferHandler#getVisualRepresentation(Transferable)->Icon:::Returns an object that establishes the look of a transfer
javax.swing.TransferHandler#createTransferable(JComponent)->Transferable:::Creates a Transferable to use as the source for a data transfer
javax.swing.TransferHandler#exportDone(JComponent, Transferable, int)->void:::Invoked after data has been exported
javax.swing.TransferHandler.PropertyTransferable#getTransferDataFlavors()->DataFlavor[]:::Returns an array of DataFlavor objects indicating the flavors the data can be provided in
javax.swing.TransferHandler.PropertyTransferable#isDataFlavorSupported(DataFlavor)->boolean:::Returns whether the specified data flavor is supported for this object.
javax.swing.TransferHandler.PropertyTransferable#getTransferData(DataFlavor)->Object:::Returns an object which represents the data to be transferred
javax.swing.TransferHandler.SwingDropTarget#addDropTargetListener(DropTargetListener)->void::: swing drop target add drop target listener
javax.swing.TransferHandler.SwingDropTarget#removeDropTargetListener(DropTargetListener)->void::: swing drop target remove drop target listener
javax.swing.TransferHandler.SwingDropTarget#dragEnter(DropTargetDragEvent)->void::: swing drop target drag enter
javax.swing.TransferHandler.SwingDropTarget#dragOver(DropTargetDragEvent)->void::: swing drop target drag over
javax.swing.TransferHandler.SwingDropTarget#dragExit(DropTargetEvent)->void::: swing drop target drag exit
javax.swing.TransferHandler.SwingDropTarget#drop(DropTargetDropEvent)->void::: swing drop target drop
javax.swing.TransferHandler.SwingDropTarget#dropActionChanged(DropTargetDragEvent)->void::: swing drop target drop action changed
javax.swing.TransferHandler.TransferAction#accept(Object)->boolean::: transfer action accept
javax.swing.TransferHandler.TransferAction#actionPerformed(ActionEvent)->void::: transfer action action performed
javax.swing.UIDefaults#get(Object)->Object:::Returns the value for key
javax.swing.UIDefaults#get(Object, Locale)->Object:::Returns the value for key associated with the given locale
javax.swing.UIDefaults#put(Object, Object)->Object:::Sets the value of key to value for all locales
javax.swing.UIDefaults#putDefaults(Object[])->void:::Puts all of the key/value pairs in the database and unconditionally generates one PropertyChangeEvent
javax.swing.UIDefaults#getFont(Object)->Font:::If the value of key is a Font return it, otherwise return null.
javax.swing.UIDefaults#getFont(Object, Locale)->Font:::If the value of key for the given Locale is a Font return it, otherwise return null.
javax.swing.UIDefaults#getColor(Object)->Color:::If the value of key is a Color return it, otherwise return null.
javax.swing.UIDefaults#getColor(Object, Locale)->Color:::If the value of key for the given Locale is a Color return it, otherwise return null.
javax.swing.UIDefaults#getIcon(Object)->Icon:::If the value of key is an Icon return it, otherwise return null.
javax.swing.UIDefaults#getIcon(Object, Locale)->Icon:::If the value of key for the given Locale is an Icon return it, otherwise return null.
javax.swing.UIDefaults#getBorder(Object)->Border:::If the value of key is a Border return it, otherwise return null.
javax.swing.UIDefaults#getBorder(Object, Locale)->Border:::If the value of key for the given Locale is a Border return it, otherwise return null.
javax.swing.UIDefaults#getString(Object)->String:::If the value of key is a String return it, otherwise return null.
javax.swing.UIDefaults#getString(Object, Locale)->String:::If the value of key for the given Locale is a String return it, otherwise return null.
javax.swing.UIDefaults#getInt(Object)->int:::If the value of key is an Integer return its integer value, otherwise return 0.
javax.swing.UIDefaults#getInt(Object, Locale)->int:::If the value of key for the given Locale is an Integer return its integer value, otherwise return 0.
javax.swing.UIDefaults#getBoolean(Object)->boolean:::If the value of key is boolean, return the boolean value, otherwise return false.
javax.swing.UIDefaults#getBoolean(Object, Locale)->boolean:::If the value of key for the given Locale is boolean, return the boolean value, otherwise return false.
javax.swing.UIDefaults#getInsets(Object)->Insets:::If the value of key is an Insets return it, otherwise return null.
javax.swing.UIDefaults#getInsets(Object, Locale)->Insets:::If the value of key for the given Locale is an Insets return it, otherwise return null.
javax.swing.UIDefaults#getDimension(Object)->Dimension:::If the value of key is a Dimension return it, otherwise return null.
javax.swing.UIDefaults#getDimension(Object, Locale)->Dimension:::If the value of key for the given Locale is a Dimension return it, otherwise return null.
javax.swing.UIDefaults#getUIClass(String, ClassLoader)->Class:::The value of get(uidClassID) must be the String name of a class that implements the corresponding ComponentUI class
javax.swing.UIDefaults#getUIClass(String)->Class:::Returns the L&amp;F class that renders this component.
javax.swing.UIDefaults#getUIError(String)->void:::If getUI() fails for any reason, it calls this method before returning null
javax.swing.UIDefaults#getUI(JComponent)->ComponentUI:::Creates an ComponentUI implementation for the specified component
javax.swing.UIDefaults#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
javax.swing.UIDefaults#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
javax.swing.UIDefaults#getPropertyChangeListeners()->PropertyChangeListener[]:::Returns an array of all the PropertyChangeListeners added to this UIDefaults with addPropertyChangeListener().
javax.swing.UIDefaults#firePropertyChange(String, Object, Object)->void:::Support for reporting bound property changes
javax.swing.UIDefaults#addResourceBundle(String)->void:::Adds a resource bundle to the list of resource bundles that are searched for localized values
javax.swing.UIDefaults#removeResourceBundle(String)->void:::Removes a resource bundle from the list of resource bundles that are searched for localized defaults.
javax.swing.UIDefaults#setDefaultLocale(Locale)->void:::Sets the default locale
javax.swing.UIDefaults#getDefaultLocale()->Locale:::Returns the default locale
javax.swing.UIDefaults.LazyValue#createValue(UIDefaults)->Object:::Creates the actual value retrieved from the UIDefaults table
javax.swing.UIDefaults.ActiveValue#createValue(UIDefaults)->Object:::Creates the value retrieved from the UIDefaults table
javax.swing.UIDefaults.ProxyLazyValue#createValue(UIDefaults)->Object:::Creates the value retrieved from the UIDefaults table
javax.swing.UIDefaults.LazyInputMap#createValue(UIDefaults)->Object:::Creates an InputMap with the bindings that are passed in.
javax.swing.UIManager.LookAndFeelInfo#getName()->String:::Returns the name of the look and feel in a form suitable for a menu or other presentation
javax.swing.UIManager.LookAndFeelInfo#getClassName()->String:::Returns the name of the class that implements this look and feel.
javax.swing.UIManager.LookAndFeelInfo#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.UIManager#getInstalledLookAndFeels()->LookAndFeelInfo[]:::Returns an array of LookAndFeelInfos representing the LookAndFeel implementations currently available
javax.swing.UIManager#setInstalledLookAndFeels(LookAndFeelInfo[])->void:::Sets the set of available look and feels
javax.swing.UIManager#installLookAndFeel(LookAndFeelInfo)->void:::Adds the specified look and feel to the set of available look and feels
javax.swing.UIManager#installLookAndFeel(String, String)->void:::Adds the specified look and feel to the set of available look and feels
javax.swing.UIManager#getLookAndFeel()->LookAndFeel:::Returns the current look and feel or null.
javax.swing.UIManager#createLookAndFeel(String)->LookAndFeel:::Creates a supported built-in Java LookAndFeel specified by the given L&F name name.
javax.swing.UIManager#setLookAndFeel(LookAndFeel)->void:::Sets the current look and feel to newLookAndFeel
javax.swing.UIManager#setLookAndFeel(String)->void:::Loads the LookAndFeel specified by the given class name, using the current thread's context class loader, and passes it to setLookAndFeel(LookAndFeel).
javax.swing.UIManager#getSystemLookAndFeelClassName()->String:::Returns the name of the LookAndFeel class that implements the native system look and feel if there is one, otherwise the name of the default cross platform LookAndFeel class
javax.swing.UIManager#getCrossPlatformLookAndFeelClassName()->String:::Returns the name of the LookAndFeel class that implements the default cross platform look and feel -- the Java Look and Feel (JLF)
javax.swing.UIManager#getDefaults()->UIDefaults:::Returns the defaults
javax.swing.UIManager#getFont(Object)->Font:::Returns a font from the defaults
javax.swing.UIManager#getFont(Object, Locale)->Font:::Returns a font from the defaults that is appropriate for the given locale
javax.swing.UIManager#getColor(Object)->Color:::Returns a color from the defaults
javax.swing.UIManager#getColor(Object, Locale)->Color:::Returns a color from the defaults that is appropriate for the given locale
javax.swing.UIManager#getIcon(Object)->Icon:::Returns an Icon from the defaults
javax.swing.UIManager#getIcon(Object, Locale)->Icon:::Returns an Icon from the defaults that is appropriate for the given locale
javax.swing.UIManager#getBorder(Object)->Border:::Returns a border from the defaults
javax.swing.UIManager#getBorder(Object, Locale)->Border:::Returns a border from the defaults that is appropriate for the given locale
javax.swing.UIManager#getString(Object)->String:::Returns a string from the defaults
javax.swing.UIManager#getString(Object, Locale)->String:::Returns a string from the defaults that is appropriate for the given locale
javax.swing.UIManager#getString(Object, Component)->String:::Returns a string from the defaults that is appropriate for the given locale
javax.swing.UIManager#getInt(Object)->int:::Returns an integer from the defaults
javax.swing.UIManager#getInt(Object, Locale)->int:::Returns an integer from the defaults that is appropriate for the given locale
javax.swing.UIManager#getBoolean(Object)->boolean:::Returns a boolean from the defaults which is associated with the key value
javax.swing.UIManager#getBoolean(Object, Locale)->boolean:::Returns a boolean from the defaults which is associated with the key value and the given Locale
javax.swing.UIManager#getInsets(Object)->Insets:::Returns an Insets object from the defaults
javax.swing.UIManager#getInsets(Object, Locale)->Insets:::Returns an Insets object from the defaults that is appropriate for the given locale
javax.swing.UIManager#getDimension(Object)->Dimension:::Returns a dimension from the defaults
javax.swing.UIManager#getDimension(Object, Locale)->Dimension:::Returns a dimension from the defaults that is appropriate for the given locale
javax.swing.UIManager#get(Object)->Object:::Returns an object from the defaults.
javax.swing.UIManager#get(Object, Locale)->Object:::Returns an object from the defaults that is appropriate for the given locale.
javax.swing.UIManager#put(Object, Object)->Object:::Stores an object in the developer defaults
javax.swing.UIManager#getUI(JComponent)->ComponentUI:::Returns the appropriate ComponentUI implementation for target
javax.swing.UIManager#getLookAndFeelDefaults()->UIDefaults:::Returns the UIDefaults from the current look and feel, that were obtained at the time the look and feel was installed
javax.swing.UIManager#addAuxiliaryLookAndFeel(LookAndFeel)->void:::Adds a LookAndFeel to the list of auxiliary look and feels
javax.swing.UIManager#removeAuxiliaryLookAndFeel(LookAndFeel)->boolean:::Removes a LookAndFeel from the list of auxiliary look and feels
javax.swing.UIManager#getAuxiliaryLookAndFeels()->LookAndFeel[]:::Returns the list of auxiliary look and feels (can be null)
javax.swing.UIManager#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
javax.swing.UIManager#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
javax.swing.UIManager#getPropertyChangeListeners()->PropertyChangeListener[]:::Returns an array of all the PropertyChangeListeners added to this UIManager with addPropertyChangeListener().
javax.swing.ViewportLayout#addLayoutComponent(String, Component)->void:::Adds the specified component to the layout
javax.swing.ViewportLayout#removeLayoutComponent(Component)->void:::Removes the specified component from the layout
javax.swing.ViewportLayout#preferredLayoutSize(Container)->Dimension:::Returns the preferred dimensions for this layout given the components in the specified target container.
javax.swing.ViewportLayout#minimumLayoutSize(Container)->Dimension:::Returns the minimum dimensions needed to layout the components contained in the specified target container.
javax.swing.ViewportLayout#layoutContainer(Container)->void:::Called by the AWT when the specified container needs to be laid out.

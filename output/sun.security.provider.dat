AbstractDrbg#chooseAlgorithmAndStrength():::Decides what algorithm and strength to use (SHA-256 or AES-256, 128 or 256):::
AbstractDrbg#initEngine():::Initiates security engines (MessageDigest, Mac, or Cipher):::
AbstractDrbg#instantiateAlgorithm(byte[]):::Instantiates a DRBG:::
AbstractDrbg#generateAlgorithm(byte[], byte[]):::The generate function.:::
AbstractDrbg#reseedAlgorithm(byte[], byte[]):::The reseed function.:::throw->new->UnsupportedOperationException
AbstractDrbg#engineNextBytes(byte[])::: abstract drbg engine next bytes:::DrbgParameters->nextBytes->engineNextBytes
AbstractDrbg#engineNextBytes(byte[], SecureRandomParameters)::: abstract drbg engine next bytes:::Objects->requireNonNull->if->debug->println->if->dp->if->if->dp->getStrength->throw->dp->getStrength->new->IllegalArgumentException->ai->dp->getAdditionalInput->if->throw->new->IllegalArgumentException->pr->dp->getPredictionResistance->if->throw->new->IllegalArgumentException->instantiateIfNecessary->if->synchronized->if->getEntropyInput->reseedAlgorithm->generateAlgorithm->else->throw->params->getClass->new->IllegalArgumentException
AbstractDrbg#engineReseed(SecureRandomParameters)::: abstract drbg engine reseed:::if->debug->println->if->throw->new->UnsupportedOperationException->if->DrbgParameters->reseed->if->dp->pr->dp->getPredictionResistance->if->throw->new->IllegalArgumentException->ai->dp->getAdditionalInput->if->throw->new->IllegalArgumentException->instantiateIfNecessary->getEntropyInput->reseedAlgorithm->else->throw->params->getClass->new->IllegalArgumentException
AbstractDrbg#engineGenerateSeed(int):::Returns the given number of seed bytes:::b->new->byteArr->SeedGenerator->generateSeed->return
AbstractDrbg#engineSetSeed(byte[]):::Reseeds this random object with the given seed:::if->debug->println->if->Arrays->copyOf->else->if->Arrays->copyOf->if->instantiateIfNecessary->else->reseedAlgorithm
AbstractDrbg#getEntropyInput(boolean)::: abstract drbg get entropy input:::return->getEntropyInput
AbstractDrbg#getEntropyInput(int, int, int, boolean)::: abstract drbg get entropy input:::if->debug->println->esNow->if->return->esNow->getEntropy
AbstractDrbg#engineGetParameters():::Returns the current configuration as a DrbgParameters.Instantiation object.:::return->DrbgParameters->instantiation
AbstractDrbg#configure(SecureRandomParameters):::Configure this DRBG:::if->debug->println->if->DrbgParameters->instantiation->if->m->DrbgParameters->instantiation->if->if->inst->if->inst->getStrength->throw->inst->getStrength->new->IllegalArgumentException->if->inst->getCapability->supportsPredictionResistance->throw->new->IllegalArgumentException->ps->inst->getPersonalizationString->if->throw->new->IllegalArgumentException->if->inst->getCapability->supportsReseeding->throw->new->IllegalArgumentException->inst->getCapability->supportsPredictionResistance->inst->getStrength->else->throw->params->getClass->new->IllegalArgumentException->chooseAlgorithmAndStrength->if->debug->println
AbstractDrbg#instantiateIfNecessary(byte[]):::Instantiate if necessary,:::if->if->getEntropyInput->if->else->NonceProvider->next->initEngine->instantiateAlgorithm
AbstractDrbg.NonceProvider#next()::: nonce provider next:::k->while->return->block->clone
AbstractDrbg#hex(byte[]):::A handy method returning hexdump string with no colon or new line.:::sb->new->StringBuilder->foreach->sb->String->format->append->return->sb->toString
AbstractDrbg#getStandardStrength(int):::Returns the smallest standard strength (112, 128, 192, 256) that is greater or equal to the input.:::if->return->if->return->if->return->if->return->throw->new->IllegalArgumentException
AbstractDrbg#toString()::: abstract drbg to string:::return
AbstractHashDrbg#alg2strength(String)::: abstract hash drbg alg2strength:::switch->algorithm->toUpperCase->return->return->throw->new->IllegalArgumentException
AbstractHashDrbg#chooseAlgorithmAndStrength()::: abstract hash drbg choose algorithm and strength:::if->requestedAlgorithm->toUpperCase->supportedStrength->alg2strength->if->tryStrength->getStandardStrength->if->throw->new->IllegalArgumentException->else->else->tryStrength->getStandardStrength->switch->algorithm->toUpperCase->break->break->break->break->throw->new->IllegalArgumentException
AbstractHashDrbg#instantiateAlgorithm(byte[])::: abstract hash drbg instantiate algorithm:::if->debug->println->inputs->new->ArrayList<>->inputs->add->inputs->add->if->inputs->add->hashReseedInternal
AbstractHashDrbg#reseedAlgorithm(byte[], byte[])::: abstract hash drbg reseed algorithm:::if->debug->new->HexDumpEncoder->encodeBuffer->new->HexDumpEncoder->encodeBuffer->println->inputs->new->ArrayList<>->inputs->add->if->inputs->add->hashReseedInternal
AbstractHashDrbg#hashReseedInternal(List):::Operates on multiple inputs.:::
ByteArrayAccess#unaligned()::: byte array access unaligned:::return->unsafe->unalignedAccess
ByteArrayAccess#b2iLittle(byte[], int, int[], int, int):::byte[] to int[] conversion, little endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->getInt->else->if->while->unsafe->getInt->reverseBytes->else->while
ByteArrayAccess#b2iLittle64(byte[], int, int[])::: byte array access b2i little64:::if->throw->new->ArrayIndexOutOfBoundsException->if->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->else->if->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->else->b2iLittle
ByteArrayAccess#i2bLittle(int[], int, byte[], int, int):::int[] to byte[] conversion, little endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->putInt->else->if->while->unsafe->reverseBytes->putInt->else->while->i
ByteArrayAccess#i2bLittle4(int, byte[], int)::: byte array access i2b little4:::if->throw->new->ArrayIndexOutOfBoundsException->if->unsafe->putInt->else->if->unsafe->reverseBytes->putInt->else
ByteArrayAccess#b2iBig(byte[], int, int[], int, int):::byte[] to int[] conversion, big endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->getInt->reverseBytes->else->if->while->unsafe->getInt->else->while
ByteArrayAccess#b2iBig64(byte[], int, int[])::: byte array access b2i big64:::if->throw->new->ArrayIndexOutOfBoundsException->if->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->unsafe->getInt->reverseBytes->else->if->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->unsafe->getInt->else->b2iBig
ByteArrayAccess#i2bBig(int[], int, byte[], int, int):::int[] to byte[] conversion, big endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->reverseBytes->putInt->else->if->while->unsafe->putInt->else->while->i
ByteArrayAccess#i2bBig4(int, byte[], int)::: byte array access i2b big4:::if->throw->new->ArrayIndexOutOfBoundsException->if->unsafe->reverseBytes->putInt->else->if->unsafe->putInt->else
ByteArrayAccess#b2lBig(byte[], int, long[], int, int):::byte[] to long[] conversion, big endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->getLong->reverseBytes->else->if->while->unsafe->getInt->unsafe->getInt->else->while->i1->i2
ByteArrayAccess#b2lBig128(byte[], int, long[])::: byte array access b2l big128:::if->throw->new->ArrayIndexOutOfBoundsException->if->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->unsafe->getLong->reverseBytes->else->b2lBig
ByteArrayAccess#l2bBig(long[], int, byte[], int, int):::long[] to byte[] conversion, big endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->reverseBytes->putLong->else->while->i
ByteArrayAccess#b2lLittle(byte[], int, long[], int, int):::byte[] to long[] conversion, little endian byte order:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->getLong->else->while
ByteArrayAccess#l2bLittle(long[], int, byte[], int, int):::long[] to byte[] conversion, little endian byte order:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->putLong->else->while->i
ConfigFile#getAppConfigurationEntry(String)::: config file get app configuration entry:::return->spi->engineGetAppConfigurationEntry
ConfigFile#refresh()::: config file refresh:::spi->engineRefresh
ConfigFile.Spi#init():::Read and initialize the entire login Configuration from the configured URL.:::initialized->expand->Security->getProperty->if->System->getProperty->if->equals->newConfig->new->HashMap<>->if->if->debugConfig->println->init->return->allowSys->Security->getProperty->if->equalsIgnoreCase->extra_config->System->getProperty->if->overrideAll->if->extra_config->startsWith->extra_config->substring->try->PropertyExpander->expand->catch->throw->ioException->finally->configURL->try->new->URL->catch->configFile->new->File->if->configFile->exists->configFile->toURI->toURL->else->throw->ioException->finally->if->debugConfig->println->init->if->if->debugConfig->println->return->n->config_url->while->Security->getProperty->try->PropertyExpander->expand->replace->if->debugConfig->println->new->URL->init->catch->throw->ioException->finally->if->if->debugConfig->println->System->getProperty->userConfigFile->if->new->File->exists->new->File->toURI->toURL->init
ConfigFile.Spi#init(URL, Map>)::: spi init:::try->isr->getInputStream->new->InputStreamReader->readConfig->catch->if->debugConfig->fnfe->toString->println->throw->ResourcesMgr->getAuthResourceString->new->IOException->finally
ConfigFile.Spi#engineGetAppConfigurationEntry(String):::Retrieve an entry from the Configuration using an application name as an index.:::list->synchronized->configuration->get->if->list->size->return->entries->list->size->new->AppConfigurationEntryArr->iterator->list->iterator->for->i->iterator->hasNext->return
ConfigFile.Spi#engineRefresh():::Refresh and reload the Configuration by re-reading all of the login configurations.:::sm->System->getSecurityManager->if->sm->new->AuthPermission->checkPermission->AccessController->new->PrivilegedAction<Void>->doPrivileged
ConfigFile.Spi#readConfig(Reader, Map>)::: spi read config:::if->new->BufferedReader->new->StreamTokenizer->st->quoteChar->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->lowerCaseMode->st->slashSlashComments->st->slashStarComments->st->eolIsSignificant->nextToken->while->parseLoginEntry
ConfigFile.Spi#parseLoginEntry(Map>)::: spi parse login entry:::configEntries->new->LinkedList<>->appName->nextToken->if->debugParser->println->match->while->peek->moduleClass->match->controlFlag->sflag->match->toUpperCase->switch->break->break->break->break->throw->ioException->options->new->HashMap<>->while->peek->key->match->match->try->options->match->expand->put->catch->throw->peee->getLocalizedMessage->new->IOException->finally->nextToken->if->debugParser->println->foreach->options->keySet->debugParser->options->get->println->configEntries->new->AppConfigurationEntry->add->match->match->if->newConfig->containsKey->throw->ioException->newConfig->put
ConfigFile.Spi#match(String)::: spi match:::value->switch->throw->ioException->if->expect->equalsIgnoreCase->expect->equalsIgnoreCase->expect->equalsIgnoreCase->expect->equalsIgnoreCase->nextToken->else->throw->ioException->break->if->expect->equalsIgnoreCase->nextToken->else->throw->ioException->break->if->expect->equalsIgnoreCase->nextToken->else->throw->ioException->break->if->expect->equalsIgnoreCase->nextToken->else->throw->ioException->break->if->expect->equalsIgnoreCase->nextToken->else->throw->ioException->break->throw->ioException->return
ConfigFile.Spi#peek(String)::: spi peek:::switch->return->expect->equalsIgnoreCase->return->expect->equalsIgnoreCase->return->expect->equalsIgnoreCase->return->expect->equalsIgnoreCase->return
ConfigFile.Spi#nextToken()::: spi next token:::tok->while->st->nextToken->return
ConfigFile.Spi#getInputStream(URL)::: spi get input stream:::if->url->getProtocol->equalsIgnoreCase->try->return->url->openStream->catch->file->url->getPath->if->url->getHost->length->url->getHost->if->debugConfig->println->return->new->FileInputStream->finally->else->return->url->openStream
ConfigFile.Spi#expand(String)::: spi expand:::if->value->isEmpty->return->if->return->s->PropertyExpander->expand->if->s->length->throw->ioException->return
ConfigFile.Spi#ioException(String, Object...)::: spi io exception:::form->ResourcesMgr->getAuthResourceString->new->MessageFormat->return->form->format->new->IOException
CtrDrbg#alg2strength(String)::: ctr drbg alg2strength:::switch->algorithm->toUpperCase->return->return->return->throw->new->IllegalArgumentException
CtrDrbg#chooseAlgorithmAndStrength()::: ctr drbg choose algorithm and strength:::if->requestedAlgorithm->toUpperCase->supportedStrength->alg2strength->if->tryStrength->getStandardStrength->if->throw->new->IllegalArgumentException->else->else->tryStrength->getStandardStrength->if->else->if->else->throw->new->IllegalArgumentException->switch->algorithm->toUpperCase->switch->break->if->throw->new->IllegalArgumentException->break->if->throw->new->IllegalArgumentException->break->throw->new->IllegalArgumentException->break->throw->new->IllegalArgumentException->if->else
CtrDrbg#initEngine():::This call, used by the constructors, instantiates the digest.:::try->Cipher->getInstance->catch->try->Cipher->getInstance->catch->throw->new->InternalError->finally->finally
CtrDrbg#status()::: ctr drbg status:::if->debug->hex->println->debug->hex->println->debug->println
CtrDrbg#update(byte[])::: ctr drbg update:::if->throw->new->IllegalArgumentException->try->m->temp->new->byteArr->for->i->Arrays->copyOf->for->i->Arrays->copyOf->Arrays->copyOfRange->catch->throw->new->InternalError->finally
CtrDrbg#instantiateAlgorithm(byte[])::: ctr drbg instantiate algorithm:::if->debug->println->more->if->if->else->if->throw->new->IllegalArgumentException->Arrays->copyOf->System->arraycopy->else->reseedAlgorithm
CtrDrbg#df(byte[]):::Block_cipher_df in 10.3.2:::l->n->ln->new->byteArr->k->new->byteArr->for->i->temp->new->byteArr->for->i->Arrays->copyOf->x->Arrays->copyOfRange->for->i->return
CtrDrbg#bcc(byte[], byte[]...):::Block_Encrypt in 10.3.3:::chain->new->byteArr->n1->n2->while->j->for->if->break->try->cipher->new->SecretKeySpec->init->cipher->doFinal->catch->throw->new->InternalError->finally->return
CtrDrbg#reseedAlgorithm(byte[], byte[])::: ctr drbg reseed algorithm:::if->if->if->throw->new->IllegalArgumentException->temp->Arrays->copyOf->System->arraycopy->df->else->if->for->i->if->new->byteArr->new->byteArr->update
CtrDrbg#addOne(byte[], int):::Add one to data, only touch the last len bytes.:::for->i
CtrDrbg#generateAlgorithm(byte[], byte[])::: ctr drbg generate algorithm:::if->debug->println->if->if->df->else->Arrays->copyOf->update->else->new->byteArr->pos->len->while->addOne->try->cipher->new->SecretKeySpec->init->out->cipher->doFinal->System->arraycopy->catch->throw->new->InternalError->finally->if->break->update
CtrDrbg#toString()::: ctr drbg to string:::return->super->toString
DigestBase#engineGetDigestLength()::: digest base engine get digest length:::return
DigestBase#engineUpdate(byte)::: digest base engine update:::if->new->byteArr->engineUpdate
DigestBase#engineUpdate(byte[], int, int)::: digest base engine update:::if->return->if->throw->new->ArrayIndexOutOfBoundsException->if->engineReset->if->n->Math->min->System->arraycopy->if->implCompress->if->limit->implCompressMultiBlock->if->System->arraycopy
DigestBase#implCompressMultiBlock(byte[], int, int)::: digest base impl compress multi block:::implCompressMultiBlockCheck->return->implCompressMultiBlock0
DigestBase#implCompressMultiBlock0(byte[], int, int)::: digest base impl compress multi block0:::for->return
DigestBase#implCompressMultiBlockCheck(byte[], int, int)::: digest base impl compress multi block check:::if->return->Objects->requireNonNull->if->throw->new->ArrayIndexOutOfBoundsException->endIndex->if->throw->new->ArrayIndexOutOfBoundsException
DigestBase#engineReset()::: digest base engine reset:::if->return->implReset->Arrays->fill
DigestBase#engineDigest()::: digest base engine digest:::b->new->byteArr->try->engineDigest->catch->throw->new->ProviderException->initCause->finally->return
DigestBase#engineDigest(byte[], int, int)::: digest base engine digest:::if->throw->new->DigestException->if->throw->new->DigestException->if->engineReset->implDigest->return
DigestBase#implCompress(byte[], int):::Core compression function:::
DigestBase#implDigest(byte[], int):::Return the digest:::
DigestBase#implReset():::Reset subclass specific state to their initial values:::
DigestBase#clone()::: digest base clone:::copy->super->clone->clone->return
DomainKeyStore.DKS#convertAlias(String)::: s convert alias:::return->alias->toLowerCase
DomainKeyStore#convertAlias(String)::: domain key store convert alias:::
DomainKeyStore#engineGetKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it.:::pair->getKeystoresForReading->key->try->entryAlias->pair->getKey->foreach->pair->getValue->keystore->getKey->if->break->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias.:::pair->getKeystoresForReading->chain->try->entryAlias->pair->getKey->foreach->pair->getValue->keystore->getCertificateChain->if->break->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineGetCertificate(String):::Returns the certificate associated with the given alias:::pair->getKeystoresForReading->cert->try->entryAlias->pair->getKey->foreach->pair->getValue->keystore->getCertificate->if->break->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::pair->getKeystoresForReading->date->try->entryAlias->pair->getKey->foreach->pair->getValue->keystore->getCreationDate->if->break->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineSetKeyEntry(String, Key, char[], Certificate[]):::Assigns the given private key to the given alias, protecting it with the given password as defined in PKCS8:::pair->getKeystoreForWriting->if->throw->new->KeyStoreException->entryAlias->pair->getKey->keystore->pair->getValue->keystore->getValue->setKeyEntry
DomainKeyStore#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::pair->getKeystoreForWriting->if->throw->new->KeyStoreException->entryAlias->pair->getKey->keystore->pair->getValue->keystore->getValue->setKeyEntry
DomainKeyStore#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias:::pair->getKeystoreForWriting->if->throw->new->KeyStoreException->entryAlias->pair->getKey->keystore->pair->getValue->keystore->getValue->setCertificateEntry
DomainKeyStore#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::pair->getKeystoreForWriting->if->throw->new->KeyStoreException->entryAlias->pair->getKey->keystore->pair->getValue->keystore->getValue->deleteEntry
DomainKeyStore#engineAliases():::Lists all the alias names of this keystore.:::iterator->keystores->entrySet->iterator->return->new->Enumeration<String>
DomainKeyStore#engineContainsAlias(String):::Checks if the given alias exists in this keystore.:::pair->getKeystoresForReading->try->entryAlias->pair->getKey->foreach->pair->getValue->if->keystore->containsAlias->return->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineSize():::Retrieves the number of entries in this keystore.:::size->try->foreach->keystores->values->keystore->size->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias is a key entry, and false otherwise.:::pair->getKeystoresForReading->try->entryAlias->pair->getKey->foreach->pair->getValue->if->keystore->isKeyEntry->return->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias is a trusted certificate entry, and false otherwise.:::pair->getKeystoresForReading->try->entryAlias->pair->getKey->foreach->pair->getValue->if->keystore->isCertificateEntry->return->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#getKeystoresForReading(String)::: domain key store get keystores for reading:::splits->alias->split->if->keystore->keystores->get->if->return->Collections->singleton->new->AbstractMap.SimpleEntry<>->else->if->return->keystores->values->new->AbstractMap.SimpleEntry<>->return->Collections->emptyList->new->AbstractMap.SimpleEntry<>
DomainKeyStore#getKeystoreForWriting(String)::: domain key store get keystore for writing:::splits->alias->split->if->keystore->keystores->get->if->return->new->AbstractMap.SimpleEntry<>->new->AbstractMap.SimpleEntry<>->return
DomainKeyStore#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::try->alias->foreach->keystores->values->if->keystore->getCertificateAlias->break->return->catch->throw->new->IllegalStateException->finally
DomainKeyStore#engineStore(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.:::try->if->keystores->size->keystores->values->iterator->next->store->return->catch->throw->new->IllegalStateException->finally->throw->new->UnsupportedOperationException
DomainKeyStore#engineStore(KeyStore.LoadStoreParameter)::: domain key store engine store:::if->domainParameter->builders->domainParameter->getConfiguration->domainParameter->getProtectionParams->getBuilders->foreach->try->pp->if->throw->new->IllegalArgumentException->new->KeyStoreException->password->getPassword->keystore->keystores->get->try->stream->new->FileOutputStream->keystore->store->catch->finally->catch->throw->new->IOException->finally->else->throw->new->UnsupportedOperationException
DomainKeyStore#engineLoad(InputStream, char[]):::Loads the keystore from the given input stream:::try->keystore->try->KeyStore->getInstance->keystore->load->catch->if->equalsIgnoreCase->KeyStore->getInstance->keystore->load->else->throw->finally->keystoreName->keystores->put->catch->throw->new->UnsupportedOperationException->finally
DomainKeyStore#engineLoad(KeyStore.LoadStoreParameter)::: domain key store engine load:::if->domainParameter->builders->domainParameter->getConfiguration->domainParameter->getProtectionParams->getBuilders->foreach->try->if->keystores->newInstance->getKeyStore->put->else->keystores->newInstance->getKeyStore->put->catch->throw->new->IOException->finally->else->throw->new->UnsupportedOperationException
DomainKeyStore#getBuilders(URI, Map)::: domain key store get builders:::parser->new->PolicyParser->domains->builders->new->ArrayList<>->uriDomain->configuration->getFragment->try->configurationReader->PolicyUtil->configuration->toURL->getInputStream->new->InputStreamReader->parser->read->parser->getDomainEntries->catch->throw->new->IOException->throw->new->IOException->finally->foreach->domainProperties->domain->getProperties->if->uriDomain->domain->getName->equalsIgnoreCase->continue->if->domainProperties->containsKey->domainProperties->get->ch->s->new->StringBuilder->for->i->length->s->toString->keystores->domain->getEntries->foreach->keystoreName->keystore->getName->properties->new->HashMap<>->properties->keystore->getProperties->putAll->keystoreType->if->properties->containsKey->properties->get->keystoreProvider->if->properties->containsKey->keystoreProviderName->properties->get->Security->getProvider->if->throw->new->IOException->keystoreFile->if->properties->containsKey->uri->properties->get->try->if->uri->startsWith->new->URI->new->File->else->new->File->catch->throw->new->IOException->finally->keystoreProtection->if->passwords->containsKey->passwords->get->else->if->properties->containsKey->env->properties->get->pwd->System->getenv->if->pwd->toCharArray->new->KeyStore.PasswordProtection->else->throw->new->IOException->else->new->KeyStore.PasswordProtection->builders->new->KeyStoreBuilderComponents->add->break->if->builders->isEmpty->throw->new->IOException->return
DRBG#createImpl()::: g create impl:::switch->toLowerCase->new->HashDrbg->break->new->HmacDrbg->break->new->CtrDrbg->break->throw->new->IllegalArgumentException
DRBG#engineSetSeed(byte[])::: g engine set seed:::impl->engineSetSeed
DRBG#engineNextBytes(byte[])::: g engine next bytes:::impl->engineNextBytes
DRBG#engineGenerateSeed(int)::: g engine generate seed:::return->impl->engineGenerateSeed
DRBG#engineNextBytes(byte[], SecureRandomParameters)::: g engine next bytes:::impl->engineNextBytes
DRBG#engineReseed(SecureRandomParameters)::: g engine reseed:::impl->engineReseed
DRBG#engineGetParameters()::: g engine get parameters:::return->impl->engineGetParameters
DRBG#toString()::: g to string:::return->impl->toString
DRBG#checkTwice(boolean, String):::Ensures an aspect is not set more than once.:::if->throw->new->IllegalArgumentException
DRBG#readObject(java.io.ObjectInputStream)::: g read object:::s->defaultReadObject->if->throw->new->IllegalArgumentException->createImpl
DSA#checkKey(DSAParams, int, String)::: a check key:::valueN->params->getQ->bitLength->if->throw->new->InvalidKeyException
DSA#engineInitSign(PrivateKey):::Initialize the DSA object with a DSA private key.:::if->throw->new->InvalidKeyException->priv->params->priv->getParams->if->throw->new->InvalidKeyException->if->md->getAlgorithm->md->getDigestLength->md->getAlgorithm->checkKey->priv->getX->params->getP->params->getQ->params->getG->reset
DSA#engineInitVerify(PublicKey):::Initialize the DSA object with a DSA public key.:::if->throw->new->InvalidKeyException->pub->params->pub->getParams->if->throw->new->InvalidKeyException->pub->getY->params->getP->params->getQ->params->getG->reset
DSA#engineUpdate(byte):::Update a byte to be signed or verified.:::md->update
DSA#engineUpdate(byte[], int, int):::Update an array of bytes to be signed or verified.:::md->update
DSA#engineUpdate(ByteBuffer)::: a engine update:::md->update
DSA#engineSign():::Sign all the data thus far updated:::k->generateK->r->generateR->s->generateS->if->rBytes->r->toByteArray->sBytes->s->toByteArray->size->presetQ->bitLength->outseq->new->byteArr->rLength->sLength->i->for->j->for->System->arraycopy->System->arraycopy->return->else->try->outseq->new->DerOutputStream->outseq->putInteger->outseq->putInteger->result->outseq->toByteArray->new->DerValue->return->result->toByteArray->catch->throw->new->SignatureException->finally
DSA#engineVerify(byte[]):::Verify all the data thus far updated.:::return->engineVerify
DSA#engineVerify(byte[], int, int):::Verify all the data thus far updated.:::r->s->if->if->throw->new->SignatureException->mid->Arrays->copyOfRange->new->BigInteger->Arrays->copyOfRange->new->BigInteger->else->try->in->new->DerInputStream->values->in->getSequence->if->in->available->throw->new->IOException->getBigInteger->getBigInteger->catch->throw->new->SignatureException->finally->if->r->signum->r->toByteArray->new->BigInteger->if->s->signum->s->toByteArray->new->BigInteger->if->r->compareTo->s->compareTo->w->generateW->v->generateV->return->v->equals->else->throw->new->SignatureException
DSA#engineSetParameter(String, Object)::: a engine set parameter:::throw->new->InvalidParameterException
DSA#engineSetParameter(AlgorithmParameterSpec)::: a engine set parameter:::if->throw->new->InvalidAlgorithmParameterException
DSA#engineGetParameter(String)::: a engine get parameter:::return
DSA#engineGetParameters()::: a engine get parameters:::return
DSA#generateR(BigInteger, BigInteger, BigInteger, BigInteger)::: a generate r:::random->getSigningRandom->blindingValue->new->BigInteger->blindingValue->add->k->q->multiply->add->temp->g->modPow->return->temp->mod
DSA#generateS(BigInteger, BigInteger, BigInteger, BigInteger)::: a generate s:::s2->try->md->digest->catch->throw->re->getMessage->new->SignatureException->finally->nBytes->q->bitLength->if->Arrays->copyOfRange->z->new->BigInteger->k1->k->modInverse->return->x->multiply->add->multiply->mod
DSA#generateW(BigInteger, BigInteger, BigInteger, BigInteger)::: a generate w:::return->s->modInverse
DSA#generateV(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger)::: a generate v:::s2->try->md->digest->catch->throw->re->getMessage->new->SignatureException->finally->nBytes->q->bitLength->if->Arrays->copyOfRange->z->new->BigInteger->u1->z->multiply->mod->u2->r->multiply->mod->t1->g->modPow->t2->y->modPow->t3->t1->multiply->t5->t3->mod->return->t5->mod
DSA#generateK(BigInteger)::: a generate k:::random->getSigningRandom->kValue->q->bitLength->new->byteArr->random->nextBytes->return->new->BigInteger->q->subtract->mod->add
DSA#getSigningRandom()::: a get signing random:::if->if->else->JCAUtil->getSecureRandom->return
DSA#toString():::Return a human readable rendition of the engine.:::printable->if->Debug->toHexString->Debug->toHexString->Debug->toHexString->else->if->Debug->toHexString->if->return
DSA.Raw.NullDigest20#engineUpdate(byte)::: null digest20 engine update:::if->else
DSA.Raw.NullDigest20#engineUpdate(byte[], int, int)::: null digest20 engine update:::if->else->System->arraycopy
DSA.Raw.NullDigest20#engineUpdate(ByteBuffer)::: null digest20 engine update:::inputLen->input->remaining->if->else->input->get
DSA.Raw.NullDigest20#engineDigest()::: null digest20 engine digest:::if->throw->new->RuntimeException->reset->return
DSA.Raw.NullDigest20#engineDigest(byte[], int, int)::: null digest20 engine digest:::if->throw->new->DigestException->if->throw->new->DigestException->System->arraycopy->reset->return
DSA.Raw.NullDigest20#engineReset()::: null digest20 engine reset:::
DSA.Raw.NullDigest20#engineGetDigestLength()::: null digest20 engine get digest length:::return
DSAKeyFactory#engineGeneratePublic(KeySpec):::Generates a public key object from the provided key specification (key material).:::try->if->dsaPubKeySpec->if->return->dsaPubKeySpec->getY->dsaPubKeySpec->getP->dsaPubKeySpec->getQ->dsaPubKeySpec->getG->new->DSAPublicKey->else->return->dsaPubKeySpec->getY->dsaPubKeySpec->getP->dsaPubKeySpec->getQ->dsaPubKeySpec->getG->new->DSAPublicKeyImpl->else->if->if->return->getEncoded->new->DSAPublicKey->else->return->getEncoded->new->DSAPublicKeyImpl->else->throw->new->InvalidKeySpecException->catch->throw->e->getMessage->new->InvalidKeySpecException->finally
DSAKeyFactory#engineGeneratePrivate(KeySpec):::Generates a private key object from the provided key specification (key material).:::try->if->dsaPrivKeySpec->return->dsaPrivKeySpec->getX->dsaPrivKeySpec->getP->dsaPrivKeySpec->getQ->dsaPrivKeySpec->getG->new->DSAPrivateKey->else->if->return->getEncoded->new->DSAPrivateKey->else->throw->new->InvalidKeySpecException->catch->throw->e->getMessage->new->InvalidKeySpecException->finally
DSAKeyFactory#engineGetKeySpec(Key, Class):::Returns a specification (key material) of the given key object in the requested format.:::params->try->if->dsaPubKeySpec->Class->forName->x509KeySpec->Class->forName->if->dsaPubKeySpec->isAssignableFrom->dsaPubKey->dsaPubKey->getParams->return->keySpec->dsaPubKey->getY->params->getP->params->getQ->params->getG->new->DSAPublicKeySpec->cast->else->if->x509KeySpec->isAssignableFrom->return->keySpec->key->getEncoded->new->X509EncodedKeySpec->cast->else->throw->new->InvalidKeySpecException->else->if->dsaPrivKeySpec->Class->forName->pkcs8KeySpec->Class->forName->if->dsaPrivKeySpec->isAssignableFrom->dsaPrivKey->dsaPrivKey->getParams->return->keySpec->dsaPrivKey->getX->params->getP->params->getQ->params->getG->new->DSAPrivateKeySpec->cast->else->if->pkcs8KeySpec->isAssignableFrom->return->keySpec->key->getEncoded->new->PKCS8EncodedKeySpec->cast->else->throw->new->InvalidKeySpecException->else->throw->new->InvalidKeySpecException->catch->throw->e->getMessage->new->InvalidKeySpecException->finally
DSAKeyFactory#engineTranslateKey(Key):::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.:::try->if->if->return->dsaPubKeySpec->engineGetKeySpec->return->engineGeneratePublic->else->if->if->return->dsaPrivKeySpec->engineGetKeySpec->return->engineGeneratePrivate->else->throw->new->InvalidKeyException->catch->throw->e->getMessage->new->InvalidKeyException->finally
DSAKeyPairGenerator#checkStrength(int, int)::: key pair generator check strength:::if->else->if->else->if->else->throw->new->InvalidParameterException
DSAKeyPairGenerator#initialize(int, SecureRandom)::: key pair generator initialize:::init
DSAKeyPairGenerator#initialize(AlgorithmParameterSpec, SecureRandom):::Initializes the DSA object using a parameter object.:::if->throw->new->InvalidAlgorithmParameterException->init
DSAKeyPairGenerator#init(int, SecureRandom, boolean)::: key pair generator init:::subPrimeLen->getDefDSASubprimeSize->checkStrength
DSAKeyPairGenerator#init(DSAParameterSpec, SecureRandom, boolean)::: key pair generator init:::sizeP->params->getP->bitLength->sizeQ->params->getQ->bitLength->checkStrength
DSAKeyPairGenerator#generateKeyPair():::Generates a pair of keys usable by any JavaSecurity compliant DSA implementation.:::if->JCAUtil->getSecureRandom->spec->try->if->ParameterCache->getNewDSAParameterSpec->else->if->ParameterCache->getDSAParameterSpec->catch->throw->new->ProviderException->finally->return->spec->getP->spec->getQ->spec->getG->generateKeyPair
DSAKeyPairGenerator#generateKeyPair(BigInteger, BigInteger, BigInteger, SecureRandom)::: key pair generator generate key pair:::x->generateX->y->generateY->try->pub->if->new->DSAPublicKey->else->new->DSAPublicKeyImpl->priv->new->DSAPrivateKey->pair->new->KeyPair->return->catch->throw->new->ProviderException->finally
DSAKeyPairGenerator#generateX(SecureRandom, BigInteger):::Generate the private key component of the key pair using the provided source of random bits:::x->temp->new->byteArr->while->random->nextBytes->new->BigInteger->mod->if->x->signum->x->compareTo->return
DSAKeyPairGenerator#generateY(BigInteger, BigInteger, BigInteger):::Generate the public key component y of the key pair.:::y->g->modPow->return
DSAKeyPairGenerator.Legacy#initialize(int, boolean, SecureRandom):::Initializes the DSA key pair generator:::if->super->init->else->cachedParams->ParameterCache->getDefDSASubprimeSize->getCachedDSAParameterSpec->if->throw->new->InvalidParameterException->super->init
DSAKeyPairGenerator.Legacy#initialize(DSAParams, SecureRandom):::Initializes the DSA object using a DSA parameter object.:::if->throw->new->InvalidParameterException->spec->params->getP->params->getQ->params->getG->new->DSAParameterSpec->super->init
DSAParameterGenerator#engineInit(int, SecureRandom):::Initializes this parameter generator for a certain strength and source of randomness.:::if->throw->new->InvalidParameterException->getDefDSASubprimeSize
DSAParameterGenerator#engineInit(AlgorithmParameterSpec, SecureRandom):::Initializes this parameter generator with a set of algorithm-specific parameter generation values.:::if->throw->new->InvalidAlgorithmParameterException->dsaGenParams->dsaGenParams->getPrimePLength->dsaGenParams->getSubprimeQLength->dsaGenParams->getSeedLength
DSAParameterGenerator#engineGenerateParameters():::Generates the parameters.:::algParams->try->if->new->SecureRandom->if->engineInit->pAndQ->generatePandQ->paramP->paramQ->paramG->generateG->dsaParamSpec->new->DSAParameterSpec->AlgorithmParameters->getInstance->algParams->init->catch->throw->e->getMessage->new->RuntimeException->throw->e->getMessage->new->RuntimeException->throw->e->getMessage->new->RuntimeException->finally->return
DSAParameterGenerator#generatePandQ(SecureRandom, int, int, int)::: parameter generator generate pand q:::hashAlg->if->else->if->else->if->hashObj->try->MessageDigest->getInstance->catch->nsae->printStackTrace->finally->outLen->hashObj->getDigestLength->n->b->seedBytes->new->byteArr->twoSl->pow->primeCertainty->if->else->if->else->if->if->throw->new->ProviderException->resultP->resultQ->seed->counter->while->do->random->nextBytes->new->BigInteger->U->hashObj->digest->new->BigInteger->pow->mod->pow->add->add->U->mod->subtract->while->resultQ->isProbablePrime->offset->for
DSAParameterGenerator#generateG(BigInteger, BigInteger)::: parameter generator generate g:::h->pMinusOneOverQ->p->subtract->divide->resultG->while->resultG->compareTo->h->modPow->h->add->return
DSAParameterGenerator#toByteArray(BigInteger)::: parameter generator to byte array:::result->bigInt->toByteArray->if->tmp->new->byteArr->System->arraycopy->return
DSAParameters#engineInit(AlgorithmParameterSpec)::: parameters engine init:::if->throw->new->InvalidParameterSpecException->getP->getQ->getG
DSAParameters#engineInit(byte[])::: parameters engine init:::encodedParams->new->DerValue->if->throw->new->IOException->reset->getBigInteger->getBigInteger->getBigInteger->if->available->throw->available->new->IOException
DSAParameters#engineInit(byte[], String)::: parameters engine init:::engineInit
DSAParameters#engineGetParameterSpec(Class)::: parameters engine get parameter spec:::try->dsaParamSpec->Class->forName->if->dsaParamSpec->isAssignableFrom->return->paramSpec->new->DSAParameterSpec->cast->else->throw->new->InvalidParameterSpecException->catch->throw->e->getMessage->new->InvalidParameterSpecException->finally
DSAParameters#engineGetEncoded()::: parameters engine get encoded:::out->new->DerOutputStream->bytes->new->DerOutputStream->bytes->putInteger->bytes->putInteger->bytes->putInteger->out->write->return->out->toByteArray
DSAParameters#engineGetEncoded(String)::: parameters engine get encoded:::return->engineGetEncoded
DSAParameters#engineToString()::: parameters engine to string:::return->Debug->toHexString->Debug->toHexString->Debug->toHexString
DSAPrivateKey#getParams():::Returns the DSA parameters associated with this key, or null if the parameters could not be parsed.:::try->if->return->else->paramSpec->algParams->algid->getParameters->if->return->algParams->getParameterSpec->return->catch->return->finally
DSAPrivateKey#getX():::Get the raw private key, x, without the parameters.:::return
DSAPrivateKey#clearOldKey()::: private key clear old key:::i->if->for->if->for
DSAPrivateKey#parseKeyBits()::: private key parse key bits:::try->in->new->DerInputStream->in->getBigInteger->catch->ike->e->getMessage->new->InvalidKeyException->ike->initCause->throw->finally
DSAPublicKey#getParams():::Returns the DSA parameters associated with this key, or null if the parameters could not be parsed.:::try->if->return->else->paramSpec->algParams->algid->getParameters->if->return->algParams->getParameterSpec->return->catch->return->finally
DSAPublicKey#getY():::Get the raw public value, y, without the parameters.:::return
DSAPublicKey#toString()::: public key to string:::return->Debug->toHexString
DSAPublicKey#parseKeyBits()::: public key parse key bits:::try->in->getKey->toByteArray->new->DerInputStream->in->getBigInteger->catch->throw->e->getMessage->new->InvalidKeyException->finally
DSAPublicKeyImpl#writeReplace()::: public key impl write replace:::return->getAlgorithm->getFormat->getEncoded->new->KeyRep
EntropySource#getEntropy(int, int, int, boolean):::Returns a byte array containing entropy:::
FileInputStreamPool#getInputStream(File):::This method opens an underlying java.io.FileInputStream for a given file and returns a wrapper over it:::oldRref->while->refQueue->poll->pool->remove->cfile->file->getCanonicalFile->pool->get->oldStream->oldRref->get->newRef->newStream->while->if->if->try->newStream->getWrappedStream->close->catch->finally->return->else->if->new->FileInputStream->new->UnclosableInputStream->new->StreamRef->if->pool->putIfAbsent->else->pool->replace->pool->get->if->return->else->oldRref->get
FileInputStreamPool.UnclosableInputStream#close()::: unclosable input stream close:::
FileInputStreamPool.UnclosableInputStream#getWrappedStream()::: unclosable input stream get wrapped stream:::return
HashDrbg#initEngine():::This call, used by the constructors, instantiates the digest.:::try->MessageDigest->getInstance->catch->try->MessageDigest->getInstance->catch->throw->new->InternalError->finally->finally
HashDrbg#hashDf(int, List)::: hash drbg hash df:::return->hashDf
HashDrbg#hashDf(MessageDigest, int, int, List):::A hash-based derivation function defined in NIST SP 800-90Ar1 10.3.1:::len->temp->new->byteArr->counter->for->i->return->Arrays->copyOf
HashDrbg#hashReseedInternal(List)::: hash drbg hash reseed internal:::seed->if->inputs->add->inputs->add->hashDf->else->hashDf->new->ArrayList<>->inputs->add->inputs->add->hashDf
HashDrbg#status()::: hash drbg status:::if->debug->hex->println->debug->hex->println->debug->println
HashDrbg#addBytes(byte[], int, byte[]...):::Adds byte arrays into an existing one.:::foreach->dlen->carry->for->i
HashDrbg#generateAlgorithm(byte[], byte[]):::Generates a user-specified number of random bytes.:::if->debug->println->if->digest->update->digest->update->digest->update->digest->digest->addBytes->hashGen->digest->update->digest->update->h->digest->digest->rcBytes->if->new->byteArr->else->BigInteger->valueOf->toByteArray->addBytes
HashDrbg#hashGen(byte[], byte[])::: hash drbg hash gen:::data->pos->len->while->if->System->digest->digest->arraycopy->else->try->digest->update->digest->digest->catch->throw->new->AssertionError->finally->if->break->if->Arrays->copyOf->addBytes
HmacDrbg#status()::: hmac drbg status:::if->debug->hex->println->debug->hex->println->debug->println
HmacDrbg#update(List)::: hmac drbg update:::try->mac->new->SecretKeySpec->init->mac->update->mac->update->foreach->mac->update->mac->doFinal->mac->new->SecretKeySpec->init->mac->doFinal->if->inputs->isEmpty->mac->update->mac->update->foreach->mac->update->mac->doFinal->mac->new->SecretKeySpec->init->mac->doFinal->catch->throw->new->InternalError->finally
HmacDrbg#initEngine():::This call, used by the constructors, instantiates the digest.:::algorithm->substring->try->Mac->getInstance->catch->try->Mac->getInstance->catch->throw->new->InternalError->finally->finally
HmacDrbg#hashReseedInternal(List)::: hmac drbg hash reseed internal:::if->new->byteArr->new->byteArr->Arrays->fill->update
HmacDrbg#generateAlgorithm(byte[], byte[]):::Generates a user-specified number of random bytes.:::if->debug->println->if->Collections->singletonList->update->pos->len->while->try->mac->new->SecretKeySpec->init->catch->throw->new->InternalError->finally->mac->doFinal->System->arraycopy->if->break->if->Collections->singletonList->update->else->Collections->emptyList->update
JavaKeyStore.JKS#convertAlias(String)::: s convert alias:::return->alias->toLowerCase
JavaKeyStore.CaseExactJKS#convertAlias(String)::: case exact s convert alias:::return
JavaKeyStore#convertAlias(String)::: java key store convert alias:::
JavaKeyStore#engineGetKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it.:::entry->entries->convertAlias->get->if->return->if->throw->new->UnrecoverableKeyException->passwordBytes->convertToBytes->keyProtector->new->KeyProtector->encrBytes->encrInfo->try->new->EncryptedPrivateKeyInfo->return->keyProtector->recover->catch->throw->new->UnrecoverableKeyException->finally->Arrays->fill
JavaKeyStore#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias.:::entry->entries->convertAlias->get->if->if->return->else->return->clone->else->return
JavaKeyStore#engineGetCertificate(String):::Returns the certificate associated with the given alias:::entry->entries->convertAlias->get->if->if->return->else->if->return->else->return->else->return
JavaKeyStore#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::entry->entries->convertAlias->get->if->if->return->getTime->new->Date->else->return->getTime->new->Date->else->return
JavaKeyStore#engineSetKeyEntry(String, Key, char[], Certificate[]):::Assigns the given private key to the given alias, protecting it with the given password as defined in PKCS8:::keyProtector->passwordBytes->if->throw->new->KeyStoreException->try->synchronized->entry->new->KeyEntry->new->Date->convertToBytes->new->KeyProtector->keyProtector->protect->if->chain->clone->else->entries->convertAlias->put->catch->throw->new->KeyStoreException->finally->if->Arrays->fill
JavaKeyStore#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::synchronized->try->new->EncryptedPrivateKeyInfo->catch->throw->new->KeyStoreException->finally->entry->new->KeyEntry->new->Date->key->clone->if->chain->clone->else->entries->convertAlias->put
JavaKeyStore#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias:::synchronized->entry->entries->convertAlias->get->if->throw->new->KeyStoreException->trustedCertEntry->new->TrustedCertEntry->new->Date->entries->convertAlias->put
JavaKeyStore#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::synchronized->entries->convertAlias->remove
JavaKeyStore#engineAliases():::Lists all the alias names of this keystore.:::return->entries->keys
JavaKeyStore#engineContainsAlias(String):::Checks if the given alias exists in this keystore.:::return->entries->convertAlias->containsKey
JavaKeyStore#engineSize():::Retrieves the number of entries in this keystore.:::return->entries->size
JavaKeyStore#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias is a key entry, and false otherwise.:::entry->entries->convertAlias->get->if->return->else->return
JavaKeyStore#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias is a trusted certificate entry, and false otherwise.:::entry->entries->convertAlias->get->if->return->else->return
JavaKeyStore#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::certElem->for->e->entries->keys->e->hasMoreElements->return
JavaKeyStore#engineStore(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.:::synchronized->if->throw->new->IllegalArgumentException->encoded->md->getPreKeyedHash->dos->new->DigestOutputStream->new->DataOutputStream->dos->writeInt->dos->writeInt->dos->entries->size->writeInt->for->e->entries->keys->e->hasMoreElements->digest->md->digest->dos->write->dos->flush
JavaKeyStore#engineLoad(InputStream, char[]):::Loads the keystore from the given input stream:::synchronized->dis->md->cf->cfs->bais->encoded->trustedKeyCount->privateKeyCount->if->return->if->getPreKeyedHash->new->DigestInputStream->new->DataInputStream->else->new->DataInputStream->xMagic->dis->readInt->xVersion->dis->readInt->if->throw->new->IOException->if->CertificateFactory->getInstance->else->new->Hashtable<String,CertificateFactory>->entries->clear->count->dis->readInt->for->i->if->debug->println->if->computed->md->digest->actual->IOUtils->readExactlyNBytes->if->MessageDigest->isEqual->t->new->UnrecoverableKeyException->throw->new->IOException->initCause
JavaKeyStore#getPreKeyedHash(char[]):::To guard against tampering with the keystore, we append a keyed hash with a bit of whitener.:::md->MessageDigest->getInstance->passwdBytes->convertToBytes->md->update->Arrays->fill->md->getBytes->update->return
JavaKeyStore#convertToBytes(char[])::: java key store convert to bytes:::i->j->passwdBytes->new->byteArr->for->return
JavaKeyStore#engineProbe(InputStream):::Probe the first few bytes of the keystore data stream for a valid JKS keystore encoding.:::dataStream->if->else->new->DataInputStream->return->dataStream->readInt
KeyProtector#protect(Key)::: key protector protect:::i->numRounds->digest->xorOffset->encrKeyOffset->if->throw->new->IllegalArgumentException->if->key->getFormat->equalsIgnoreCase->throw->new->KeyStoreException->plainKey->key->getEncoded->if->throw->new->KeyStoreException->if->salt->new->byteArr->random->new->SecureRandom->random->nextBytes->xorKey->new->byteArr->for->tmpKey->new->byteArr->for->encrKey->new->byteArr->System->arraycopy->System->arraycopy->md->update->Arrays->fill->md->update->md->digest->md->reset->System->arraycopy->encrAlg->try->new->ObjectIdentifier->new->AlgorithmId->return->new->EncryptedPrivateKeyInfo->getEncoded->catch->throw->ioe->getMessage->new->KeyStoreException->finally
KeyProtector#recover(EncryptedPrivateKeyInfo)::: key protector recover:::i->digest->numRounds->xorOffset->encrKeyLen->encrAlg->encrInfo->getAlgorithm->if->encrAlg->getOID->toString->equals->throw->new->UnrecoverableKeyException->protectedKey->encrInfo->getEncryptedData->salt->new->byteArr->System->arraycopy->if->encrKey->new->byteArr->System->arraycopy->xorKey->new->byteArr->for->plainKey->new->byteArr->for->md->update->Arrays->fill->md->update->md->digest->md->reset->for->try->return->PKCS8Key->new->DerValue->parseKey->catch->throw->ioe->getMessage->new->UnrecoverableKeyException->finally
MD2#clone()::: d2 clone:::copy->super->clone->clone->clone->new->byteArr->return
MD2#implReset()::: d2 impl reset:::Arrays->fill->Arrays->fill
MD2#implDigest(byte[], int)::: d2 impl digest:::padValue->engineUpdate->for->i->implCompress->for->i
MD2#implCompress(byte[], int)::: d2 impl compress:::for->i->t->for->i->for->i
MD4#getInstance()::: d4 get instance:::try->return->MessageDigest->getInstance->catch->throw->new->ProviderException->finally
MD4#clone()::: d4 clone:::copy->super->clone->clone->new->intArr->return
MD4#implReset():::Reset the state of this object.:::resetHashes->Arrays->fill
MD4#resetHashes()::: d4 reset hashes:::
MD4#implDigest(byte[], int):::Perform the final computations, any buffered bytes are added to the digest, the count is added to the digest, and the resulting digest is stored.:::bitsProcessed->index->padLen->engineUpdate->i2bLittle4->i2bLittle4->implCompress->i2bLittle
MD4#FF(int, int, int, int, int, int)::: d4  f:::return
MD4#GG(int, int, int, int, int, int)::: d4  g:::return
MD4#HH(int, int, int, int, int, int)::: d4  h:::return
MD4#implCompress(byte[], int):::This is where the functions come together as the generic MD4 transformation operation:::b2iLittle64->a->b->c->d->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH
MD5#clone()::: d5 clone:::copy->super->clone->clone->new->intArr->return
MD5#implReset():::Reset the state of this object.:::resetHashes->Arrays->fill
MD5#resetHashes()::: d5 reset hashes:::
MD5#implDigest(byte[], int):::Perform the final computations, any buffered bytes are added to the digest, the count is added to the digest, and the resulting digest is stored.:::bitsProcessed->index->padLen->engineUpdate->i2bLittle4->i2bLittle4->implCompress->i2bLittle
MD5#FF(int, int, int, int, int, int, int)::: d5  f:::return
MD5#GG(int, int, int, int, int, int, int)::: d5  g:::return
MD5#HH(int, int, int, int, int, int, int)::: d5  h:::return
MD5#II(int, int, int, int, int, int, int)::: d5  i:::return
MD5#implCompress(byte[], int):::This is where the functions come together as the generic MD5 transformation operation:::b2iLittle64->a->b->c->d->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->II->II->II->II->II->II->II->II->II->II->II->II->II->II->II->II
MoreDrbgParameters#toString()::: more drbg parameters to string:::return
MoreDrbgParameters#readObject(java.io.ObjectInputStream)::: more drbg parameters read object:::s->defaultReadObject->if->nonce->clone->if->personalizationString->clone->if->throw->new->IllegalArgumentException
NativePRNG#isAvailable()::: native g is available:::return
NativePRNG.NonBlocking#isAvailable()::: non blocking is available:::return
NativePRNG.Blocking#isAvailable()::: blocking is available:::return
NativeSeedGenerator#nativeGenerateSeed(byte[]):::Native method to do the actual work.:::
NativeSeedGenerator#getSeedBytes(byte[])::: native seed generator get seed bytes:::if->nativeGenerateSeed->throw->new->InternalError
ParameterCache#getCachedDSAParameterSpec(int, int):::Return cached DSA parameters for the given length combination of prime and subprime, or null if none are available in the cache.:::return->dsaCache->Integer->valueOf->get
ParameterCache#getCachedDHParameterSpec(int):::Return cached DH parameters for the given keylength, or null if none are available in the cache.:::return->dhCache->Integer->valueOf->get
ParameterCache#getDSAParameterSpec(int, SecureRandom):::Return DSA parameters for the given primeLen:::if->return->getDSAParameterSpec->else->if->return->getDSAParameterSpec->else->if->return->getDSAParameterSpec->else->return
ParameterCache#getDSAParameterSpec(int, int, SecureRandom):::Return DSA parameters for the given primeLen and subprimeLen:::spec->getCachedDSAParameterSpec->if->return->getNewDSAParameterSpec->dsaCache->Integer->valueOf->put->return
ParameterCache#getDHParameterSpec(int, SecureRandom):::Return DH parameters for the given keylength:::spec->getCachedDHParameterSpec->if->return->gen->AlgorithmParameterGenerator->getInstance->gen->init->params->gen->generateParameters->params->getParameterSpec->dhCache->Integer->valueOf->put->return
ParameterCache#getNewDSAParameterSpec(int, int, SecureRandom):::Return new DSA parameters for the given length combination of prime and sub prime:::gen->AlgorithmParameterGenerator->getInstance->if->gen->init->else->genParams->new->DSAGenParameterSpec->gen->init->params->gen->generateParameters->spec->params->getParameterSpec->return
PolicyFile#init(URL):::Initializes the Policy object and reads the default policy configuration file(s) into the Policy object:::numCacheStr->AccessController->new->PrivilegedAction<>->doPrivileged->numCaches->if->try->Integer->parseInt->catch->finally->else->newInfo->new->PolicyInfo->initPolicyFile
PolicyFile#initPolicyFile(PolicyInfo, URL)::: policy file init policy file:::if->debug->println->AccessController->new->PrivilegedAction<>->doPrivileged->if->if->debug->println->AccessController->new->PrivilegedAction<>->doPrivileged->else->loaded_one->initPolicyFile->if->initStaticPolicy
PolicyFile#initPolicyFile(String, String, PolicyInfo)::: policy file init policy file:::loadedPolicy->AccessController->new->PrivilegedAction<>->doPrivileged->return
PolicyFile#init(URL, PolicyInfo, boolean):::Reads a policy configuration into the Policy object using a Reader object.:::if->badPolicyURLs->contains->if->debug->println->return->try->isr->PolicyUtil->getInputStream->getInputStreamReader->pp->new->PolicyParser->pp->read->keyStore->try->PolicyUtil->pp->getKeyStoreUrl->pp->getKeyStoreType->pp->getKeyStoreProvider->pp->getStorePassURL->getKeyStore->catch->if->debug->println->e->printStackTrace->finally->enum_->pp->grantElements->while->enum_->hasMoreElements->ge->enum_->nextElement->addGrantEntry->return->catch->if->throw->new->InternalError->badPolicyURLs->add->source->pe->getNonlocalizedMessage->LocalizedMessage->getNonlocalized->println->if->pe->printStackTrace->if->throw->new->InternalError->if->debug->println->debug->e->toString->println->e->printStackTrace->finally->return
PolicyFile#getInputStreamReader(InputStream)::: policy file get input stream reader:::return->new->InputStreamReader->new->InputStreamReader
PolicyFile#initStaticPolicy(PolicyInfo)::: policy file init static policy:::if->debug->println->AccessController->new->PrivilegedAction<>->doPrivileged
PolicyFile#getCodeSource(PolicyParser.GrantEntry, KeyStore, PolicyInfo):::Given a GrantEntry, create a codeSource.:::certs->if->getCertificates->if->if->debug->println->return->location->if->new->URL->else->return->new->CodeSource->canonicalizeCodebase
PolicyFile#addGrantEntry(PolicyParser.GrantEntry, KeyStore, PolicyInfo):::Add one policy entry to the list.:::if->debug->println->debug->println->debug->println->if->foreach->debug->pppe->toString->println->try->codesource->getCodeSource->if->return->if->replacePrincipals->return->entry->new->PolicyEntry->enum_->ge->permissionElements->while->enum_->hasMoreElements->pe->enum_->nextElement->try->expandPermissionName->perm->if->equals->endsWith->indexOf->substring->if->indexOf->certs->if->getCertificates->else->new->SelfPermission->else->getInstance->entry->add->if->debug->println->catch->certs->if->getCertificates->else->if->perm->new->UnresolvedPermission->entry->add->if->debug->println->source->ite->getTargetException->toString->LocalizedMessage->getNonlocalized->println->source->e->toString->LocalizedMessage->getNonlocalized->println->finally->add->catch->source->e->toString->LocalizedMessage->getNonlocalized->println->finally->if->debug->println
PolicyFile#getInstance(String, String, String)::: policy file get instance:::pc->Class->forName->answer->getKnownPermission->if->return->if->isAssignableFrom->throw->new->ClassCastException->if->try->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->catch->try->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->catch->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->finally->finally->else->if->try->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->catch->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->finally->else->c->pc->getConstructor->return->c->new->ObjectArr->newInstance
PolicyFile#getKnownPermission(Class, String, String):::Creates one of the well-known permissions in the java.base module directly instead of via reflection:::if->claz->equals->return->new->FilePermission->else->if->claz->equals->return->new->SocketPermission->else->if->claz->equals->return->new->RuntimePermission->else->if->claz->equals->return->new->PropertyPermission->else->if->claz->equals->return->new->NetPermission->else->if->claz->equals->return->else->if->claz->equals->return->new->SecurityPermission->else->return
PolicyFile#getKnownPrincipal(Class, String):::Creates one of the well-known principals in the java.base module directly instead of via reflection:::if->claz->equals->return->new->X500Principal->else->return
PolicyFile#getCertificates(KeyStore, String, PolicyInfo):::Fetch all certs associated with this alias.:::vcerts->st->new->StringTokenizer->n->while->st->hasMoreTokens->alias->st->nextToken->trim->cert->synchronized->get->if->try->keyStore->getCertificate->catch->finally->if->put->put->if->if->new->ArrayList<>->vcerts->add->if->vcerts->size->certs->vcerts->size->new->CertificateArr->vcerts->toArray->return->else->return
PolicyFile#refresh():::Refreshes the policy object by re-reading all the policy files.:::init
PolicyFile#implies(ProtectionDomain, Permission):::Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted.:::pdMap->policyInfo->getPdMapping->pc->pdMap->get->if->return->pc->implies->getPermissions->if->return->pdMap->put->return->pc->implies
PolicyFile#getPermissions(ProtectionDomain):::Examines this Policy and returns the permissions granted to the specified ProtectionDomain:::perms->new->Permissions->if->return->getPermissions->pc->domain->getPermissions->if->synchronized->e->pc->elements->while->e->hasMoreElements->perms->FilePermCompat->e->nextElement->newPermPlusAltPath->add->return
PolicyFile#getPermissions(CodeSource):::Examines this Policy and creates a PermissionCollection object with the set of permissions for the specified CodeSource.:::return->new->Permissions->getPermissions
PolicyFile#getPermissions(Permissions, ProtectionDomain):::Examines the global policy and returns the provided Permissions object with additional permissions granted to the specified ProtectionDomain.:::if->debug->printPD->println->cs->pd->getCodeSource->if->return->canonCodeSource->AccessController->new->java.security.PrivilegedAction<>->doPrivileged->return->pd->getPrincipals->getPermissions
PolicyFile#getPermissions(Permissions, CodeSource):::Examines the global policy and returns the provided Permissions object with additional permissions granted to the specified CodeSource.:::if->return->canonCodeSource->AccessController->new->PrivilegedAction<>->doPrivileged->return->getPermissions
PolicyFile#getPermissions(Permissions, CodeSource, Principal[])::: policy file get permissions:::foreach->addPermissions->return
PolicyFile#addPermissions(Permissions, CodeSource, Principal[], PolicyEntry)::: policy file add permissions:::if->debug->entry->getCodeSource->println->imp->AccessController->new->PrivilegedAction<>->doPrivileged->if->imp->booleanValue->if->debug->println->return->entryPs->entry->getPrincipals->if->accPs->new->ArrayList<>->if->for->i->debug->println->if->entryPs->isEmpty->addPerms->if->debug->println->return->else->if->if->debug->println->return->foreach->if->pppe->isWildcardClass->continue->if->pppe->isWildcardName->if->wildcardPrincipalNameImplies->continue->if->debug->println->return->pSet->Arrays->asList->new->HashSet<>->subject->new->Subject->try->cl->Thread->currentThread->getContextClassLoader->pClass->Class->forName->p->getKnownPrincipal->if->if->isAssignableFrom->throw->new->ClassCastException->c->pClass->getConstructor->c->new->ObjectArr->newInstance->if->debug->p->getClass->getName->println->if->p->implies->if->debug->println->return->catch->if->e->printStackTrace->if->pppe->implies->if->debug->println->return->finally->if->debug->println->addPerms
PolicyFile#wildcardPrincipalNameImplies(String, Principal[]):::Returns true if the array of principals contains at least one principal of the specified class.:::foreach->if->principalClass->p->getClass->getName->equals->return->return
PolicyFile#addPerms(Permissions, Principal[], PolicyEntry)::: policy file add perms:::for->i->size
PolicyFile#expandSelf(SelfPermission, List, Principal[], Permissions)::: policy file expand self:::if->entryPs->isEmpty->if->debug->sp->getSelfType->sp->getSelfName->println->return->startIndex->v->sb->new->StringBuilder->while->sp->getSelfName->indexOf->sb->sp->getSelfName->substring->append->pli->entryPs->iterator->while->pli->hasNext->pppe->pli->next->principalInfo->getPrincipalInfo->for->i->if->pli->hasNext->sb->append->SELF->length->sb->sp->getSelfName->substring->append->if->debug->sp->getSelfName->sb->toString->println->try->perms->FilePermCompat->sp->getSelfType->sb->toString->sp->getSelfActions->getInstance->newPermPlusAltPath->add->catch->pc->synchronized->e->perms->elements->while->e->hasMoreElements->pElement->e->nextElement->if->pElement->getClass->getName->sp->getSelfType->equals->pElement->getClass->break->if->perms->sp->getSelfType->sb->toString->sp->getSelfActions->sp->getCerts->new->UnresolvedPermission->add->else->try->c->if->sp->getSelfActions->try->pc->getConstructor->perms->c->new->ObjectArr->sb->toString->newInstance->add->catch->pc->getConstructor->perms->c->new->ObjectArr->sb->toString->sp->getSelfActions->newInstance->add->finally->else->pc->getConstructor->perms->c->new->ObjectArr->sb->toString->sp->getSelfActions->newInstance->add->catch->if->debug->nme->toString->println->finally->if->debug->e->toString->println->finally
PolicyFile#getPrincipalInfo(PolicyParser.PrincipalEntry, Principal[]):::return the principal class/name pair in the 2D array:::if->pe->isWildcardClass->pe->isWildcardName->info->new->StringArrs->return->else->if->pe->isWildcardClass->pe->isWildcardName->plist->new->ArrayList<>->for->i->info->plist->size->new->StringArrs->i->foreach->p->getClass->getName->p->getName->return->else->info->new->StringArrs->for->i->return
PolicyFile#getSignerCertificates(CodeSource)::: policy file get signer certificates:::certs->if->cs->getCertificates->return->for->i->i->count->while->while->getIssuerDN->getSubjectDN->equals->if->return->userCertList->new->ArrayList<>->while->userCertList->add->while->getIssuerDN->getSubjectDN->equals->userCerts->userCertList->size->new->CertificateArr->userCertList->toArray->return
PolicyFile#canonicalizeCodebase(CodeSource, boolean)::: policy file canonicalize codebase:::path->canonCs->u->cs->getLocation->if->if->u->getProtocol->equals->spec->u->getFile->separator->spec->indexOf->if->try->spec->substring->new->URL->catch->finally->if->u->getProtocol->equals->isLocalFile->host->u->getHost->host->equals->host->equals->host->equalsIgnoreCase->if->u->getFile->replace->ParseUtil->decode->if->try->csUrl->canonPath->ParseUtil->new->File->fileToEncodedURL->if->getSignerCertificates->new->CodeSource->else->cs->getCertificates->new->CodeSource->catch->if->cs->getLocation->getSignerCertificates->new->CodeSource->finally->else->if->cs->getLocation->getSignerCertificates->new->CodeSource->return
PolicyFile#canonPath(String)::: policy file canon path:::if->path->endsWith->path->path->length->substring->new->File->getCanonicalPath->return->path->path->length->substring->else->return->new->File->getCanonicalPath
PolicyFile#printPD(ProtectionDomain)::: policy file print d:::principals->pd->getPrincipals->pals->if->palBuf->new->StringBuilder->for->i->palBuf->toString->return->pd->getCodeSource->pd->getClassLoader
PolicyFile#replacePrincipals(List, KeyStore):::return true if no replacement was performed, or if replacement succeeded.:::if->principals->isEmpty->return->foreach->if->pppe->isReplaceName->name->if->getDN->return->if->debug->println->return
PolicyFile#expandPermissionName(PolicyParser.PermissionEntry, KeyStore)::: policy file expand permission name:::if->indexOf->return->startIndex->b->e->sb->new->StringBuilder->while->indexOf->indexOf->if->break->sb->substring->append->value->substring->colonIndex->prefix->suffix->if->value->indexOf->value->substring->if->prefix->equalsIgnoreCase->sb->substring->append->continue->else->if->prefix->equalsIgnoreCase->if->source->throw->LocalizedMessage->getNonlocalized->new->Exception->value->substring->if->getDN->source->value->substring->throw->LocalizedMessage->getNonlocalized->new->Exception->sb->append->else->source->throw->LocalizedMessage->getNonlocalized->new->Exception->sb->substring->append->if->debug->sb->toString->println->sb->toString
PolicyFile#getDN(String, KeyStore)::: policy file get n:::cert->try->keystore->getCertificate->catch->if->debug->e->toString->println->return->finally->if->if->debug->println->return->else->x509Cert->p->x509Cert->getSubjectX500Principal->toString->new->X500Principal->return->p->getName
PolicyFile.PolicyEntry#getPrincipals()::: policy entry get principals:::return
PolicyFile.PolicyEntry#add(Permission):::add a Permission object to this entry:::permissions->add
PolicyFile.PolicyEntry#getCodeSource():::Return the CodeSource for this policy entry:::return
PolicyFile.PolicyEntry#toString()::: policy entry to string:::sb->new->StringBuilder->sb->ResourcesMgr->getString->append->sb->getCodeSource->append->sb->append->for->j->permissions->size->sb->ResourcesMgr->getString->append->sb->ResourcesMgr->getString->append->return->sb->toString
PolicyFile.SelfPermission#implies(Permission):::This method always returns false for SelfPermission permissions:::return
PolicyFile.SelfPermission#equals(Object):::Checks two SelfPermission objects for equality:::if->return->if->return->that->if->equals->equals->equals->return->if->return->i->j->match->for->for->return
PolicyFile.SelfPermission#hashCode():::Returns the hash code value for this object.:::hash->type->hashCode->if->name->hashCode->if->actions->hashCode->return
PolicyFile.SelfPermission#getActions():::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for an SelfPermission:::return
PolicyFile.SelfPermission#getSelfType()::: self permission get self type:::return
PolicyFile.SelfPermission#getSelfName()::: self permission get self name:::return
PolicyFile.SelfPermission#getSelfActions()::: self permission get self actions:::return
PolicyFile.SelfPermission#getCerts()::: self permission get certs:::return
PolicyFile.SelfPermission#toString():::Returns a string describing this SelfPermission:::return
PolicyFile.PolicyInfo#getPdMapping()::: policy info get pd mapping:::if->return->else->i->random->nextInt->abs->return
PolicyParser#expand(String)::: policy parser expand:::return->expand
PolicyParser#expand(String, boolean)::: policy parser expand:::if->return->else->return->PropertyExpander->expand
PolicyParser#read(Reader)::: policy parser read:::if->new->BufferedReader->new->StreamTokenizer->st->resetSyntax->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->whitespaceChars->st->commentChar->st->quoteChar->st->quoteChar->st->lowerCaseMode->st->ordinaryChar->st->slashSlashComments->st->slashStarComments->st->nextToken->ge->while->if->peek->parseGrantEntry->if->add->else->if->peek->parseKeyStoreEntry->else->if->peek->parseStorePassURL->else->if->peek->if->new->TreeMap<>->de->parseDomainEntry->if->domainName->de->getName->if->domainEntries->containsKey->domainEntries->put->else->localizedMsg->new->LocalizedMessage->source->msg->throw->new->ParsingException->else->match->if->throw->LocalizedMessage->getNonlocalized->new->ParsingException
PolicyParser#add(GrantEntry)::: policy parser add:::grantEntries->addElement
PolicyParser#replace(GrantEntry, GrantEntry)::: policy parser replace:::grantEntries->grantEntries->indexOf->setElementAt
PolicyParser#remove(GrantEntry)::: policy parser remove:::return->grantEntries->removeElement
PolicyParser#getKeyStoreUrl():::Returns the (possibly expanded) keystore location, or null if the expansion fails.:::try->if->keyStoreUrlString->length->return->expand->replace->catch->if->debug->peee->toString->println->return->finally->return
PolicyParser#setKeyStoreUrl(String)::: policy parser set key store url:::
PolicyParser#getKeyStoreType()::: policy parser get key store type:::return
PolicyParser#setKeyStoreType(String)::: policy parser set key store type:::
PolicyParser#getKeyStoreProvider()::: policy parser get key store provider:::return
PolicyParser#setKeyStoreProvider(String)::: policy parser set key store provider:::
PolicyParser#getStorePassURL()::: policy parser get store pass l:::try->if->storePassURL->length->return->expand->replace->catch->if->debug->peee->toString->println->return->finally->return
PolicyParser#setStorePassURL(String)::: policy parser set store pass l:::
PolicyParser#grantElements():::Enumerate all the entries in the global policy object:::return->grantEntries->elements
PolicyParser#getDomainEntries()::: policy parser get domain entries:::return->domainEntries->values
PolicyParser#write(Writer)::: policy parser write:::out->new->BufferedWriter->new->PrintWriter->enum_->grantElements->out->new->java.util.Date->println->out->println->out->println->if->writeKeyStoreEntry->if->writeStorePassURL->while->enum_->hasMoreElements->ge->enum_->nextElement->ge->write->out->println->out->flush
PolicyParser#parseKeyStoreEntry():::parses a keystore entry:::match->match->if->peek->return->match->if->peek->match->else->throw->st->lineno->LocalizedMessage->getNonlocalized->new->ParsingException->if->peek->return->match->if->peek->match->else->throw->st->lineno->LocalizedMessage->getNonlocalized->new->ParsingException
PolicyParser#parseStorePassURL()::: policy parser parse store pass l:::match->match
PolicyParser#writeKeyStoreEntry(PrintWriter):::writes the (unexpanded) keystore entry:::out->print->out->print->out->print->if->keyStoreType->length->out->print->if->keyStoreProvider->length->out->print->out->println->out->println
PolicyParser#writeStorePassURL(PrintWriter)::: policy parser write store pass l:::out->print->out->print->out->print->out->println->out->println
PolicyParser#parseGrantEntry():::parse a Grant entry:::e->new->GrantEntry->principals->ignoreEntry->match->while->peek->if->peekAndMatch->if->throw->st->lineno->LocalizedMessage->getNonlocalized->new->ParsingException->match->peekAndMatch->else->if->peekAndMatch->if->throw->st->lineno->LocalizedMessage->getNonlocalized->new->ParsingException->match->aliases->new->StringTokenizer->actr->cctr->while->aliases->hasMoreTokens->alias->aliases->nextToken->trim->if->alias->equals->else->if->alias->length->if->throw->st->lineno->LocalizedMessage->getNonlocalized->new->ParsingException->peekAndMatch->else->if->peekAndMatch->if->new->LinkedList<>->principalClass->principalName->if->peek->match->else->if->peek->match->else->match->if->peek->match->else->match->if->principalClass->equals->principalName->equals->if->debug->println->throw->st->lineno->LocalizedMessage->getNonlocalized->new->ParsingException->try->expand->if->principalClass->equals->principalName->equals->p->new->X500Principal->toString->new->X500Principal->p->getName->principals->new->PrincipalEntry->add->catch->if->debug->println->finally->peekAndMatch->else->throw->st->lineno->LocalizedMessage->getNonlocalized->new->ParsingException->if->match->while->peek->if->peek->try->pe->parsePermissionEntry->e->add->catch->if->debug->peee->toString->println->skipEntry->finally->match->else->throw->st->lineno->LocalizedMessage->getNonlocalized->new->ParsingException->match->try->if->expand->if->expand->replace->catch->if->debug->peee->toString->println->return->finally->return
PolicyParser#parsePermissionEntry():::parse a Permission entry:::e->new->PermissionEntry->match->match->if->peek->match->expand->if->peek->return->match->if->peek->match->expand->if->peek->return->match->if->peekAndMatch->match->expand->return
PolicyParser#parseDomainEntry():::parse a domain entry:::ignoreEntry->domainEntry->name->properties->new->HashMap<>->match->match->while->peek->parseProperties->match->new->DomainEntry->while->peek->match->match->if->peek->parseProperties->match->domainEntry->new->KeyStoreEntry->add->match->return
PolicyParser#parseProperties(String)::: policy parser parse properties:::properties->new->HashMap<>->key->value->while->peek->match->match->try->match->expand->catch->throw->peee->getLocalizedMessage->new->IOException->finally->properties->key->toLowerCase->put->return
PolicyParser#peekAndMatch(String)::: policy parser peek and match:::if->peek->match->return->else->return
PolicyParser#peek(String)::: policy parser peek:::found->switch->if->expect->equalsIgnoreCase->break->if->expect->equalsIgnoreCase->break->if->expect->equalsIgnoreCase->break->if->expect->equalsIgnoreCase->break->if->expect->equalsIgnoreCase->break->if->expect->equalsIgnoreCase->break->if->expect->equalsIgnoreCase->break->return
PolicyParser#match(String)::: policy parser match:::value->switch->throw->st->lineno->LocalizedMessage->getNonlocalized->String->valueOf->new->ParsingException->localizedMsg->new->LocalizedMessage->source->msg->throw->new->ParsingException->if->expect->equalsIgnoreCase->st->nextToken->else->if->expect->equalsIgnoreCase->st->nextToken->else->if->expect->equalsIgnoreCase->st->nextToken->else->if->expect->equalsIgnoreCase->expect->equalsIgnoreCase->expect->equalsIgnoreCase->st->nextToken->else->throw->st->lineno->new->ParsingException->break->if->expect->equalsIgnoreCase->st->nextToken->else->if->expect->equalsIgnoreCase->st->nextToken->else->if->expect->equalsIgnoreCase->st->nextToken->else->throw->st->lineno->new->ParsingException->break->if->expect->equalsIgnoreCase->st->nextToken->else->throw->st->lineno->new->ParsingException->break->if->expect->equalsIgnoreCase->st->nextToken->else->throw->st->lineno->new->ParsingException->break->if->expect->equalsIgnoreCase->st->nextToken->else->throw->st->lineno->new->ParsingException->break->if->expect->equalsIgnoreCase->st->nextToken->else->throw->st->lineno->new->ParsingException->break->if->expect->equalsIgnoreCase->st->nextToken->else->throw->st->lineno->new->ParsingException->break->if->expect->equalsIgnoreCase->st->nextToken->else->throw->st->lineno->new->ParsingException->break->throw->st->lineno->new->charArr->new->String->new->ParsingException->return
PolicyParser#skipEntry():::skip all tokens for this entry leaving the delimiter ";" in the stream.:::while->switch->throw->st->lineno->LocalizedMessage->getNonlocalized->String->valueOf->new->ParsingException->throw->LocalizedMessage->getNonlocalized->new->ParsingException->st->nextToken
PolicyParser.GrantEntry#add(PermissionEntry)::: grant entry add:::permissionEntries->addElement
PolicyParser.GrantEntry#remove(PrincipalEntry)::: grant entry remove:::return->principals->remove
PolicyParser.GrantEntry#remove(PermissionEntry)::: grant entry remove:::return->permissionEntries->removeElement
PolicyParser.GrantEntry#contains(PrincipalEntry)::: grant entry contains:::return->principals->contains
PolicyParser.GrantEntry#contains(PermissionEntry)::: grant entry contains:::return->permissionEntries->contains
PolicyParser.GrantEntry#permissionElements():::Enumerate all the permission entries in this GrantEntry.:::return->permissionEntries->elements
PolicyParser.GrantEntry#write(PrintWriter)::: grant entry write:::out->print->if->out->print->out->print->out->print->if->out->print->if->out->print->out->print->out->print->if->principals->size->out->print->if->principals->size->pli->principals->iterator->while->pli->hasNext->out->print->pe->pli->next->pe->write->if->pli->hasNext->out->print->out->println->enum_->permissionEntries->elements->while->enum_->hasMoreElements->pe->enum_->nextElement->out->write->pe->write->out->println
PolicyParser.GrantEntry#clone()::: grant entry clone:::ge->new->GrantEntry->new->LinkedList<PrincipalEntry>->new->Vector<PermissionEntry>->return
PolicyParser.PrincipalEntry#isWildcardName()::: principal entry is wildcard name:::return->principalName->equals
PolicyParser.PrincipalEntry#isWildcardClass()::: principal entry is wildcard class:::return->principalClass->equals
PolicyParser.PrincipalEntry#isReplaceName()::: principal entry is replace name:::return->principalClass->equals
PolicyParser.PrincipalEntry#getPrincipalClass()::: principal entry get principal class:::return
PolicyParser.PrincipalEntry#getPrincipalName()::: principal entry get principal name:::return
PolicyParser.PrincipalEntry#getDisplayClass()::: principal entry get display class:::if->isWildcardClass->return->else->if->isReplaceName->return->else->return
PolicyParser.PrincipalEntry#getDisplayName()::: principal entry get display name:::return->getDisplayName
PolicyParser.PrincipalEntry#getDisplayName(boolean)::: principal entry get display name:::if->isWildcardName->return->else->if->return->else->return
PolicyParser.PrincipalEntry#getName()::: principal entry get name:::return
PolicyParser.PrincipalEntry#toString()::: principal entry to string:::if->isReplaceName->return->getDisplayClass->getDisplayName->else->return->getDisplayName
PolicyParser.PrincipalEntry#equals(Object):::Test for equality between the specified object and this object:::if->return->if->return->that->return->principalClass->equals->principalName->equals
PolicyParser.PrincipalEntry#hashCode():::Return a hashcode for this PrincipalEntry.:::return->principalClass->hashCode
PolicyParser.PrincipalEntry#write(PrintWriter)::: principal entry write:::out->getDisplayClass->getDisplayName->print
PolicyParser.PermissionEntry#hashCode():::Calculates a hash code value for the object:::retval->permission->hashCode->if->name->hashCode->if->action->hashCode->return
PolicyParser.PermissionEntry#equals(Object)::: permission entry equals:::if->return->if->return->that->if->if->return->else->if->equals->return->if->if->return->else->if->equals->return->if->if->return->else->if->equals->return->if->if->return->else->if->equals->return->return
PolicyParser.PermissionEntry#write(PrintWriter)::: permission entry write:::out->print->out->print->if->out->print->out->name->replaceAll->replaceAll->print->out->print->if->out->print->out->print->out->print->if->out->print->out->print->out->print->out->println
PolicyParser.DomainEntry#getName()::: domain entry get name:::return
PolicyParser.DomainEntry#getProperties()::: domain entry get properties:::return
PolicyParser.DomainEntry#getEntries()::: domain entry get entries:::return->entries->values
PolicyParser.DomainEntry#add(KeyStoreEntry)::: domain entry add:::keystoreName->entry->getName->if->entries->containsKey->entries->put->else->localizedMsg->new->LocalizedMessage->source->msg->throw->new->ParsingException
PolicyParser.DomainEntry#toString()::: domain entry to string:::s->new->StringBuilder->append->if->foreach->properties->entrySet->s->append->property->getKey->append->append->property->getValue->append->s->append->if->foreach->entries->values->s->append->append->s->append->return->s->toString
PolicyParser.KeyStoreEntry#getName()::: key store entry get name:::return
PolicyParser.KeyStoreEntry#getProperties()::: key store entry get properties:::return
PolicyParser.KeyStoreEntry#toString()::: key store entry to string:::s->new->StringBuilder->append->if->foreach->properties->entrySet->s->append->property->getKey->append->append->property->getValue->append->s->append->return->s->toString
PolicyParser.ParsingException#getNonlocalizedMessage()::: parsing exception get nonlocalized message:::return->localizedMsg->formatNonlocalized
PolicyParser#main(String[])::: policy parser main:::try->fr->new->FileReader->fw->new->FileWriter->pp->new->PolicyParser->pp->read->pp->write->catch->finally
PolicySpiFile#engineGetPermissions(CodeSource)::: policy spi file engine get permissions:::return->pf->getPermissions
PolicySpiFile#engineGetPermissions(ProtectionDomain)::: policy spi file engine get permissions:::return->pf->getPermissions
PolicySpiFile#engineImplies(ProtectionDomain, Permission)::: policy spi file engine implies:::return->pf->implies
PolicySpiFile#engineRefresh()::: policy spi file engine refresh:::pf->refresh
SecureRandom#init(byte[]):::This call, used by the constructors, instantiates the SHA digest and sets the seed, if given.:::try->MessageDigest->getInstance->catch->try->MessageDigest->getInstance->catch->throw->new->InternalError->finally->finally->if->engineSetSeed
SecureRandom#engineGenerateSeed(int):::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself:::b->new->byteArr->SeedGenerator->generateSeed->return
SecureRandom#engineSetSeed(byte[]):::Reseeds this random object:::if->digest->update->for->i->digest->digest
SecureRandom#updateState(byte[], byte[])::: secure random update state:::last->v->t->zf->for->i->if
SecureRandom#engineNextBytes(byte[]):::Generates a user-specified number of random bytes.:::index->todo->output->if->seed->new->byteArr->engineNextBytes->digest->digest->r->if->for->i->while->digest->update->digest->digest->updateState->for->i
SecureRandom#readObject(java.io.ObjectInputStream)::: secure random read object:::s->defaultReadObject->try->MessageDigest->getInstance->catch->try->MessageDigest->getInstance->catch->throw->new->InternalError->finally->finally
SeedGenerator#generateSeed(byte[]):::Fill result with bytes from the queue:::instance->getSeedBytes
SeedGenerator#getSeedBytes(byte[])::: seed generator get seed bytes:::
SeedGenerator#getSystemEntropy():::Retrieve some system information, hashed.:::md->try->MessageDigest->getInstance->catch->throw->new->InternalError->finally->b->System->currentTimeMillis->md->update->new->java.security.PrivilegedAction<>->doPrivileged->return->md->digest
SeedGenerator#addNetworkAdapterInfo(MessageDigest)::: seed generator add network adapter info:::try->ifcs->NetworkInterface->getNetworkInterfaces->while->ifcs->hasMoreElements->ifc->ifcs->nextElement->md->ifc->toString->getBytes->update->if->ifc->isVirtual->bs->ifc->getHardwareAddress->if->md->update->break->catch->finally
SeedGenerator#longToByteArray(long):::Helper function to convert a long into a byte array (least significant byte first).:::retVal->new->byteArr->for->i->return
SeedGenerator.ThreadedSeedGenerator#run():::This method does the actual work:::try->while->synchronized->while->wait->counter->quanta->v->for->synchronized->if->notifyAll->catch->throw->new->InternalError->finally
SeedGenerator.ThreadedSeedGenerator#getSeedBytes(byte[])::: threaded seed generator get seed bytes:::for->i
SeedGenerator.ThreadedSeedGenerator#getSeedByte()::: threaded seed generator get seed byte:::b->try->synchronized->while->wait->catch->if->throw->new->InternalError->finally->synchronized->if->notifyAll->return
SeedGenerator.ThreadedSeedGenerator.BogusThread#run()::: bogus thread run:::try->for->i->catch->finally
SeedGenerator.URLSeedGenerator#init()::: seed generator init:::device->new->URL->try->new->java.security.PrivilegedExceptionAction<>->doPrivileged->catch->throw->e->getCause->new->IOException->finally
SeedGenerator.URLSeedGenerator#getSeedBytes(byte[])::: seed generator get seed bytes:::len->read->try->while->count->seedStream->read->if->throw->new->InternalError->catch->throw->ioe->getMessage->new->InternalError->finally
SHA#clone()::: a clone:::copy->super->clone->clone->new->intArr->return
SHA#implReset():::Resets the buffers and hash value to start a new hash.:::resetHashes->Arrays->fill
SHA#resetHashes()::: a reset hashes:::
SHA#implDigest(byte[], int):::Computes the final hash and copies the 20 bytes to the output array.:::bitsProcessed->index->padLen->engineUpdate->i2bBig4->i2bBig4->implCompress->i2bBig
SHA#implCompress(byte[], int):::Compute a the hash for the current block:::implCompressCheck->implCompress0
SHA#implCompressCheck(byte[], int)::: a impl compress check:::Objects->requireNonNull->b2iBig64
SHA#implCompress0(byte[], int)::: a impl compress0:::for->t->a->b->c->d->e->for->i->for->i->for->i->for->i
SHA2#implReset():::Resets the buffers and hash value to start a new hash.:::resetHashes->Arrays->fill
SHA2#resetHashes()::: a2 reset hashes:::System->arraycopy
SHA2#implDigest(byte[], int)::: a2 impl digest:::bitsProcessed->index->padLen->engineUpdate->i2bBig4->i2bBig4->implCompress->engineGetDigestLength->i2bBig
SHA2#lf_ch(int, int, int):::logical function ch(x,y,z) as defined in spec::::return
SHA2#lf_maj(int, int, int):::logical function maj(x,y,z) as defined in spec::::return
SHA2#lf_R(int, int):::logical function R(x,s) - right shift:::return
SHA2#lf_S(int, int):::logical function S(x,s) - right rotation:::return
SHA2#lf_sigma0(int):::logical function sigma0(x) - xor of results of right rotations:::return->lf_S->lf_S->lf_S
SHA2#lf_sigma1(int):::logical function sigma1(x) - xor of results of right rotations:::return->lf_S->lf_S->lf_S
SHA2#lf_delta0(int):::logical function delta0(x) - xor of results of right shifts/rotations:::return->lf_S->lf_S->lf_R
SHA2#lf_delta1(int):::logical function delta1(x) - xor of results of right shifts/rotations:::return->lf_S->lf_S->lf_R
SHA2#implCompress(byte[], int):::Process the current block to update the state variable state.:::implCompressCheck->implCompress0
SHA2#implCompressCheck(byte[], int)::: a2 impl compress check:::Objects->requireNonNull->b2iBig64
SHA2#implCompress0(byte[], int)::: a2 impl compress0:::for->t->a->b->c->d->e->f->g->h->for->i
SHA2#clone()::: a2 clone:::copy->super->clone->clone->new->intArr->return
SHA3#implCompress(byte[], int):::Core compression function:::for->i->keccak
SHA3#implDigest(byte[], int):::Return the digest:::numOfPadding->setPaddingBytes->if->throw->new->ProviderException->for->i->keccak->System->engineGetDigestLength->arraycopy
SHA3#implReset():::Resets the internal state to start a new hash.:::Arrays->fill->Arrays->fill
SHA3#setPaddingBytes(byte[], int):::Utility function for padding the specified data based on the pad10*1 algorithm (section 5.1) and the 2-bit suffix "01" required for SHA-3 hash (section 6.1).:::if->Arrays->fill->return
SHA3#bytes2Lanes(byte[], long[]):::Utility function for transforming the specified byte array 's' into array of lanes 'm' as defined in section 3.1.2.:::sOfs->for->y
SHA3#lanes2Bytes(long[], byte[]):::Utility function for transforming the specified array of lanes 'm' into a byte array 's' as defined in section 3.1.3.:::sOfs->for->y
SHA3#smTheta(long[]):::Step mapping Theta as defined in section 3.2.1 .:::c0->c1->c2->c3->c4->d0->Long->rotateLeft->d1->Long->rotateLeft->d2->Long->rotateLeft->d3->Long->rotateLeft->d4->Long->rotateLeft->for->y->return
SHA3#smPiRho(long[]):::Merged Step mapping Rho (section 3.2.2) and Pi (section 3.2.3):::tmp->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->Long->rotateLeft->return
SHA3#smChi(long[]):::Step mapping Chi as defined in section 3.2.4.:::for->y->return
SHA3#smIota(long[], int):::Step mapping Iota as defined in section 3.2.5.:::return
SHA3#keccak():::The function Keccak as defined in section 5.2 with rate r = 1600 and capacity c = (digest length x 2).:::bytes2Lanes->for->ir->lanes2Bytes
SHA3#clone()::: a3 clone:::copy->super->clone->clone->return
SHA5#implReset()::: a5 impl reset:::resetHashes->Arrays->fill
SHA5#resetHashes()::: a5 reset hashes:::System->arraycopy
SHA5#implDigest(byte[], int)::: a5 impl digest:::bitsProcessed->index->padLen->engineUpdate->i2bBig4->i2bBig4->implCompress->len->engineGetDigestLength->if->l2bBig->i2bBig4->else->l2bBig
SHA5#lf_ch(long, long, long):::logical function ch(x,y,z) as defined in spec::::return
SHA5#lf_maj(long, long, long):::logical function maj(x,y,z) as defined in spec::::return
SHA5#lf_R(long, int):::logical function R(x,s) - right shift:::return
SHA5#lf_S(long, int):::logical function S(x,s) - right rotation:::return
SHA5#lf_sigma0(long):::logical function sigma0(x) - xor of results of right rotations:::return->lf_S->lf_S->lf_S
SHA5#lf_sigma1(long):::logical function sigma1(x) - xor of results of right rotations:::return->lf_S->lf_S->lf_S
SHA5#lf_delta0(long):::logical function delta0(x) - xor of results of right shifts/rotations:::return->lf_S->lf_S->lf_R
SHA5#lf_delta1(long):::logical function delta1(x) - xor of results of right shifts/rotations:::return->lf_S->lf_S->lf_R
SHA5#implCompress(byte[], int):::Compute the hash for the current block:::implCompressCheck->implCompress0
SHA5#implCompressCheck(byte[], int)::: a5 impl compress check:::Objects->requireNonNull->b2lBig128
SHA5#implCompress0(byte[], int)::: a5 impl compress0:::for->t->a->b->c->d->e->f->g->h->for->i
SHA5#clone()::: a5 clone:::copy->super->clone->clone->new->longArr->return
SubjectCodeSource#getPrincipals():::Get the Principals associated with this SubjectCodeSource:::return
SubjectCodeSource#getSubject():::Get the Subject associated with this SubjectCodeSource:::return
SubjectCodeSource#implies(CodeSource):::Returns true if this SubjectCodeSource object "implies" the specified CodeSource:::subjectList->if->super->implies->if->debug->println->return->that->if->if->debug->println->return->if->that->getSubject->that->getSubject->getPrincipals->size->if->debug->println->return->li->listIterator->while->li->hasNext->pppe->li->next->try->pClass->Class->forName->if->isAssignableFrom->throw->new->ClassCastException->c->pClass->getConstructor->p->c->new->ObjectArr->newInstance->if->p->that->getSubject->implies->if->debug->println->return->else->if->debug->println->return->catch->if->if->that->getSubject->if->debug->println->return->i->that->getSubject->getPrincipals->iterator->new->LinkedList<PrincipalEntry>->while->i->hasNext->p->i->next->spppe->p->getClass->getName->p->getName->new->PrincipalEntry->subjectList->add->if->subjectListImpliesPrincipalEntry->if->debug->println->return->finally->if->debug->println->return
SubjectCodeSource#subjectListImpliesPrincipalEntry(LinkedList, PrincipalEntry):::This method returns, true, if the provided subjectList "contains" the Principal specified in the provided pppe argument:::li->subjectList->listIterator->while->li->hasNext->listPppe->li->next->if->pppe->getPrincipalClass->equals->pppe->getPrincipalClass->listPppe->getPrincipalClass->equals->if->pppe->getPrincipalName->equals->pppe->getPrincipalName->listPppe->getPrincipalName->equals->return->return
SubjectCodeSource#equals(Object):::Tests for equality between the specified object and this object:::if->return->if->super->equals->return->if->return->that->try->if->this->getSubject->that->getSubject->return->catch->return->finally->if->return->if->if->containsAll->containsAll->return->return
SubjectCodeSource#hashCode():::Return a hashcode for this SubjectCodeSource:::return->super->hashCode
SubjectCodeSource#toString():::Return a String representation of this SubjectCodeSource:::returnMe->super->toString->if->getSubject->if->finalSubject->getSubject->new->java.security.PrivilegedAction<String>->doPrivileged->else->getSubject->toString->if->li->principals->listIterator->while->li->hasNext->pppe->li->next->ResourcesMgr->getAuthResourceString->pppe->getPrincipalClass->pppe->getPrincipalName->return
SunEntries#putEntries(Map)::: sun entries put entries:::nativeAvailable->NativePRNG->isAvailable->useNativePRNG->seedSource->equals->seedSource->equals->if->map->put->map->put->map->put->map->put->map->put->map->put->if->map->put->map->put->if->isAvailable->map->put->map->put->if->isAvailable->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->dsaKeyClasses->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->dsaKPGImplClass->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put
SunEntries#getSeedSource()::: sun entries get seed source:::return
SunEntries#getDeviceFile(URL)::: sun entries get device file:::try->deviceURI->device->toURI->if->deviceURI->isOpaque->localDir->StaticProperty->userDir->new->File->toURI->uriPath->localDir->toString->deviceURI->toString->substring->return->URI->create->new->File->else->return->new->File->catch->return->device->getPath->new->File->finally
X509Factory#engineGenerateCertificate(InputStream):::Generates an X.509 certificate object and initializes it with the data read from the input stream is.:::if->certCache->clear->X509CertificatePair->clearCache->throw->new->CertificateException->try->encoding->readOneBlock->if->cert->getFromCache->if->return->new->X509CertImpl->cert->getEncodedInternal->addToCache->commitEvent->return->else->throw->new->IOException->catch->throw->ioe->toString->new->CertificateException->finally
X509Factory#readFully(InputStream, ByteArrayOutputStream, int):::Read from the stream until length bytes have been read or EOF has been reached:::read->buffer->new->byteArr->while->n->in->read->if->break->bout->write->return
X509Factory#intern(X509Certificate):::Return an interned X509CertImpl for the given certificate:::if->return->isImpl->encoding->if->getEncodedInternal->else->c->getEncoded->newC->getFromCache->if->return->if->else->new->X509CertImpl->newC->getEncodedInternal->addToCache->return
X509Factory#intern(X509CRL):::Return an interned X509CRLImpl for the given certificate:::if->return->isImpl->encoding->if->getEncodedInternal->else->c->getEncoded->newC->getFromCache->if->return->if->else->new->X509CRLImpl->newC->getEncodedInternal->addToCache->return
X509Factory#getFromCache(Cache, byte[]):::Get the X509CertImpl or X509CRLImpl from the cache.:::key->new->Cache.EqualByteArray->return->cache->get
X509Factory#addToCache(Cache, byte[], V):::Add the X509CertImpl or X509CRLImpl to the cache.:::if->return->key->new->Cache.EqualByteArray->cache->put
X509Factory#engineGenerateCertPath(InputStream):::Generates a CertPath object and initializes it with the data read from the InputStream inStream:::if->throw->new->CertificateException->try->encoding->readOneBlock->if->return->new->ByteArrayInputStream->new->X509CertPath->else->throw->new->IOException->catch->throw->ioe->getMessage->new->CertificateException->finally
X509Factory#engineGenerateCertPath(InputStream, String):::Generates a CertPath object and initializes it with the data read from the InputStream inStream:::if->throw->new->CertificateException->try->data->readOneBlock->if->return->new->ByteArrayInputStream->new->X509CertPath->else->throw->new->IOException->catch->throw->ioe->getMessage->new->CertificateException->finally
X509Factory#engineGenerateCertPath(List):::Generates a CertPath object and initializes it with a List of Certificates:::return->new->X509CertPath
X509Factory#engineGetCertPathEncodings():::Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first:::return->X509CertPath->getEncodingsStatic
X509Factory#engineGenerateCertificates(InputStream):::Returns a (possibly empty) collection view of X.509 certificates read from the given input stream is.:::if->throw->new->CertificateException->try->return->parseX509orPKCS7Cert->catch->throw->new->CertificateException->finally
X509Factory#engineGenerateCRL(InputStream):::Generates an X.509 certificate revocation list (CRL) object and initializes it with the data read from the given input stream is.:::if->crlCache->clear->throw->new->CRLException->try->encoding->readOneBlock->if->crl->getFromCache->if->return->new->X509CRLImpl->crl->getEncodedInternal->addToCache->return->else->throw->new->IOException->catch->throw->ioe->getMessage->new->CRLException->finally
X509Factory#engineGenerateCRLs(InputStream):::Returns a (possibly empty) collection view of X.509 CRLs read from the given input stream is.:::if->throw->new->CRLException->try->return->parseX509orPKCS7CRL->catch->throw->ioe->getMessage->new->CRLException->finally
X509Factory#parseX509orPKCS7Cert(InputStream)::: x509 factory parse x509or s7 cert:::peekByte->data->pbis->new->PushbackInputStream->coll->new->ArrayList<>->pbis->read->if->return->new->ArrayList<>->else->pbis->unread->readOneBlock->if->throw->new->CertificateException->try->pkcs7->new->PKCS7->certs->pkcs7->getCertificates->if->return->Arrays->asList->else->return->new->ArrayList<>->catch->while->coll->new->X509CertImpl->add->readOneBlock->finally->return
X509Factory#parseX509orPKCS7CRL(InputStream)::: x509 factory parse x509or s7 l:::peekByte->data->pbis->new->PushbackInputStream->coll->new->ArrayList<>->pbis->read->if->return->new->ArrayList<>->else->pbis->unread->readOneBlock->if->throw->new->CRLException->try->pkcs7->new->PKCS7->crls->pkcs7->getCRLs->if->return->Arrays->asList->else->return->new->ArrayList<>->catch->while->coll->new->X509CRLImpl->add->readOneBlock->finally->return
X509Factory#readOneBlock(InputStream):::Returns an ASN.1 SEQUENCE from a stream, which might be a BER-encoded binary block or a PEM-style BASE64-encoded ASCII data:::c->is->read->if->return->if->bout->new->ByteArrayOutputStream->bout->write->readBERInternal->return->bout->toByteArray->else->data->new->ByteArrayOutputStream->hyphen->last->while->next->is->read->if->return->if->else->if->break->end->header->new->StringBuilder->while->next->is->read->if->throw->new->IOException->if->break->if->is->read->if->throw->new->IOException->if->else->if->data->write->break->header->append->while->next->is->read->if->throw->new->IOException->if->if->data->write->else->break->footer->new->StringBuilder->while->next->is->read->if->break->if->footer->append->header->toString->footer->toString->checkHeaderFooter->try->return->Base64->getDecoder->data->toByteArray->decode->catch->throw->new->IOException->finally
X509Factory#checkHeaderFooter(String, String)::: x509 factory check header footer:::if->header->length->header->startsWith->header->endsWith->throw->new->IOException->if->footer->length->footer->startsWith->footer->endsWith->throw->new->IOException->headerType->header->header->length->substring->footerType->footer->footer->length->substring->if->headerType->equals->throw->new->IOException
X509Factory#readBERInternal(InputStream, ByteArrayOutputStream, int):::Read one BER data block:::if->is->read->if->throw->new->IOException->if->throw->new->IOException->bout->write->n->is->read->if->throw->new->IOException->bout->write->length->if->if->throw->new->IOException->while->subTag->readBERInternal->if->break->else->if->else->if->is->read->if->throw->new->IOException->bout->write->else->if->highByte->is->read->lowByte->is->read->if->throw->new->IOException->bout->write->bout->write->else->if->highByte->is->read->midByte->is->read->lowByte->is->read->if->throw->new->IOException->bout->write->bout->write->bout->write->else->if->highByte->is->read->nextByte->is->read->midByte->is->read->lowByte->is->read->if->throw->new->IOException->if->throw->new->IOException->bout->write->bout->write->bout->write->bout->write->else->throw->new->IOException->if->readFully->throw->new->IOException->return
X509Factory#commitEvent(X509CertImpl)::: x509 factory commit event:::xce->new->X509CertificateEvent->if->xce->shouldCommit->EventHelper->isLoggingSecurity->pKey->info->getPublicKey->algId->info->getSigAlgName->serNum->info->getSerialNumber->toString->subject->info->getSubjectDN->getName->issuer->info->getIssuerDN->getName->keyType->pKey->getAlgorithm->length->KeyUtil->getKeySize->hashCode->info->hashCode->beginDate->info->getNotBefore->getTime->endDate->info->getNotAfter->getTime->if->xce->shouldCommit->xce->commit->if->EventHelper->isLoggingSecurity->EventHelper->logX509CertificateEvent

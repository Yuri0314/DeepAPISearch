AbstractDrbg#chooseAlgorithmAndStrength():::Decides what algorithm and strength to use (SHA-256 or AES-256, 128 or 256):::
AbstractDrbg#initEngine():::Initiates security engines (MessageDigest, Mac, or Cipher):::
AbstractDrbg#instantiateAlgorithm(byte[]):::Instantiates a DRBG:::
AbstractDrbg#generateAlgorithm(byte[], byte[]):::The generate function.:::
AbstractDrbg#reseedAlgorithm(byte[], byte[]):::The reseed function.:::throw->new->UnsupportedOperationException
AbstractDrbg#engineGenerateSeed(int):::Returns the given number of seed bytes:::b->new->byteArr->SeedGenerator->generateSeed->return
AbstractDrbg#engineSetSeed(byte[]):::Reseeds this random object with the given seed:::if->debug->println->if->Arrays->copyOf->else->if->Arrays->copyOf->if->instantiateIfNecessary->else->reseedAlgorithm
AbstractDrbg#engineGetParameters():::Returns the current configuration as a DrbgParameters.Instantiation object.:::return->DrbgParameters->instantiation
AbstractDrbg#configure(SecureRandomParameters):::Configure this DRBG:::if->debug->println->if->DrbgParameters->instantiation->if->m->DrbgParameters->instantiation->if->if->inst->if->inst->getStrength->throw->inst->getStrength->new->IllegalArgumentException->if->inst->getCapability->supportsPredictionResistance->throw->new->IllegalArgumentException->ps->inst->getPersonalizationString->if->throw->new->IllegalArgumentException->if->inst->getCapability->supportsReseeding->throw->new->IllegalArgumentException->inst->getCapability->supportsPredictionResistance->inst->getStrength->else->throw->params->getClass->new->IllegalArgumentException->chooseAlgorithmAndStrength->if->debug->println
AbstractDrbg#hex(byte[]):::A handy method returning hexdump string with no colon or new line.:::sb->new->StringBuilder->foreach->sb->String->format->append->return->sb->toString
AbstractDrbg#getStandardStrength(int):::Returns the smallest standard strength (112, 128, 192, 256) that is greater or equal to the input.:::if->return->if->return->if->return->if->return->throw->new->IllegalArgumentException
AbstractHashDrbg#hashReseedInternal(List):::Operates on multiple inputs.:::
ByteArrayAccess#b2iLittle(byte[], int, int[], int, int):::byte[] to int[] conversion, little endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->getInt->else->if->while->unsafe->getInt->reverseBytes->else->while
ByteArrayAccess#i2bLittle(int[], int, byte[], int, int):::int[] to byte[] conversion, little endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->putInt->else->if->while->unsafe->reverseBytes->putInt->else->while->i
ByteArrayAccess#b2iBig(byte[], int, int[], int, int):::byte[] to int[] conversion, big endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->getInt->reverseBytes->else->if->while->unsafe->getInt->else->while
ByteArrayAccess#i2bBig(int[], int, byte[], int, int):::int[] to byte[] conversion, big endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->reverseBytes->putInt->else->if->while->unsafe->putInt->else->while->i
ByteArrayAccess#b2lBig(byte[], int, long[], int, int):::byte[] to long[] conversion, big endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->getLong->reverseBytes->else->if->while->unsafe->getInt->unsafe->getInt->else->while->i1->i2
ByteArrayAccess#l2bBig(long[], int, byte[], int, int):::long[] to byte[] conversion, big endian byte order.:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->reverseBytes->putLong->else->while->i
ByteArrayAccess#b2lLittle(byte[], int, long[], int, int):::byte[] to long[] conversion, little endian byte order:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->getLong->else->while
ByteArrayAccess#l2bLittle(long[], int, byte[], int, int):::long[] to byte[] conversion, little endian byte order:::if->throw->new->ArrayIndexOutOfBoundsException->if->while->unsafe->putLong->else->while->i
ConfigFile.Spi#engineGetAppConfigurationEntry(String):::Retrieve an entry from the Configuration using an application name as an index.:::list->synchronized->configuration->get->if->list->size->return->entries->list->size->new->AppConfigurationEntryArr->iterator->list->iterator->for->i->iterator->hasNext->return
ConfigFile.Spi#engineRefresh():::Refresh and reload the Configuration by re-reading all of the login configurations.:::sm->System->getSecurityManager->if->sm->new->AuthPermission->checkPermission->AccessController->new->PrivilegedAction<Void>->doPrivileged
CtrDrbg#initEngine():::This call, used by the constructors, instantiates the digest.:::try->Cipher->getInstance->catch->try->Cipher->getInstance->catch->throw->new->InternalError->finally->finally
DigestBase#implCompress(byte[], int):::Core compression function:::
DigestBase#implDigest(byte[], int):::Return the digest:::
DigestBase#implReset():::Reset subclass specific state to their initial values:::
DomainKeyStore#engineGetKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it.:::pair->getKeystoresForReading->key->try->entryAlias->pair->getKey->foreach->pair->getValue->keystore->getKey->if->break->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias.:::pair->getKeystoresForReading->chain->try->entryAlias->pair->getKey->foreach->pair->getValue->keystore->getCertificateChain->if->break->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineGetCertificate(String):::Returns the certificate associated with the given alias:::pair->getKeystoresForReading->cert->try->entryAlias->pair->getKey->foreach->pair->getValue->keystore->getCertificate->if->break->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::pair->getKeystoresForReading->date->try->entryAlias->pair->getKey->foreach->pair->getValue->keystore->getCreationDate->if->break->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineSetKeyEntry(String, Key, char[], Certificate[]):::Assigns the given private key to the given alias, protecting it with the given password as defined in PKCS8:::pair->getKeystoreForWriting->if->throw->new->KeyStoreException->entryAlias->pair->getKey->keystore->pair->getValue->keystore->getValue->setKeyEntry
DomainKeyStore#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::pair->getKeystoreForWriting->if->throw->new->KeyStoreException->entryAlias->pair->getKey->keystore->pair->getValue->keystore->getValue->setKeyEntry
DomainKeyStore#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias:::pair->getKeystoreForWriting->if->throw->new->KeyStoreException->entryAlias->pair->getKey->keystore->pair->getValue->keystore->getValue->setCertificateEntry
DomainKeyStore#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::pair->getKeystoreForWriting->if->throw->new->KeyStoreException->entryAlias->pair->getKey->keystore->pair->getValue->keystore->getValue->deleteEntry
DomainKeyStore#engineAliases():::Lists all the alias names of this keystore.:::iterator->keystores->entrySet->iterator->return->new->Enumeration<String>
DomainKeyStore#engineContainsAlias(String):::Checks if the given alias exists in this keystore.:::pair->getKeystoresForReading->try->entryAlias->pair->getKey->foreach->pair->getValue->if->keystore->containsAlias->return->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineSize():::Retrieves the number of entries in this keystore.:::size->try->foreach->keystores->values->keystore->size->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias is a key entry, and false otherwise.:::pair->getKeystoresForReading->try->entryAlias->pair->getKey->foreach->pair->getValue->if->keystore->isKeyEntry->return->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias is a trusted certificate entry, and false otherwise.:::pair->getKeystoresForReading->try->entryAlias->pair->getKey->foreach->pair->getValue->if->keystore->isCertificateEntry->return->catch->throw->new->IllegalStateException->finally->return
DomainKeyStore#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::try->alias->foreach->keystores->values->if->keystore->getCertificateAlias->break->return->catch->throw->new->IllegalStateException->finally
DomainKeyStore#engineStore(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.:::try->if->keystores->size->keystores->values->iterator->next->store->return->catch->throw->new->IllegalStateException->finally->throw->new->UnsupportedOperationException
DomainKeyStore#engineLoad(InputStream, char[]):::Loads the keystore from the given input stream:::try->keystore->try->KeyStore->getInstance->keystore->load->catch->if->equalsIgnoreCase->KeyStore->getInstance->keystore->load->else->throw->finally->keystoreName->keystores->put->catch->throw->new->UnsupportedOperationException->finally
DSA#engineInitSign(PrivateKey):::Initialize the DSA object with a DSA private key.:::if->throw->new->InvalidKeyException->priv->params->priv->getParams->if->throw->new->InvalidKeyException->if->md->getAlgorithm->md->getDigestLength->md->getAlgorithm->checkKey->priv->getX->params->getP->params->getQ->params->getG->reset
DSA#engineInitVerify(PublicKey):::Initialize the DSA object with a DSA public key.:::if->throw->new->InvalidKeyException->pub->params->pub->getParams->if->throw->new->InvalidKeyException->pub->getY->params->getP->params->getQ->params->getG->reset
DSA#engineUpdate(byte):::Update a byte to be signed or verified.:::md->update
DSA#engineUpdate(byte[], int, int):::Update an array of bytes to be signed or verified.:::md->update
DSA#engineSign():::Sign all the data thus far updated:::k->generateK->r->generateR->s->generateS->if->rBytes->r->toByteArray->sBytes->s->toByteArray->size->presetQ->bitLength->outseq->new->byteArr->rLength->sLength->i->for->j->for->System->arraycopy->System->arraycopy->return->else->try->outseq->new->DerOutputStream->outseq->putInteger->outseq->putInteger->result->outseq->toByteArray->new->DerValue->return->result->toByteArray->catch->throw->new->SignatureException->finally
DSA#engineVerify(byte[]):::Verify all the data thus far updated.:::return->engineVerify
DSA#engineVerify(byte[], int, int):::Verify all the data thus far updated.:::r->s->if->if->throw->new->SignatureException->mid->Arrays->copyOfRange->new->BigInteger->Arrays->copyOfRange->new->BigInteger->else->try->in->new->DerInputStream->values->in->getSequence->if->in->available->throw->new->IOException->getBigInteger->getBigInteger->catch->throw->new->SignatureException->finally->if->r->signum->r->toByteArray->new->BigInteger->if->s->signum->s->toByteArray->new->BigInteger->if->r->compareTo->s->compareTo->w->generateW->v->generateV->return->v->equals->else->throw->new->SignatureException
DSA#toString():::Return a human readable rendition of the engine.:::printable->if->Debug->toHexString->Debug->toHexString->Debug->toHexString->else->if->Debug->toHexString->if->return
DSAKeyFactory#engineGeneratePublic(KeySpec):::Generates a public key object from the provided key specification (key material).:::try->if->dsaPubKeySpec->if->return->dsaPubKeySpec->getY->dsaPubKeySpec->getP->dsaPubKeySpec->getQ->dsaPubKeySpec->getG->new->DSAPublicKey->else->return->dsaPubKeySpec->getY->dsaPubKeySpec->getP->dsaPubKeySpec->getQ->dsaPubKeySpec->getG->new->DSAPublicKeyImpl->else->if->if->return->getEncoded->new->DSAPublicKey->else->return->getEncoded->new->DSAPublicKeyImpl->else->throw->new->InvalidKeySpecException->catch->throw->e->getMessage->new->InvalidKeySpecException->finally
DSAKeyFactory#engineGeneratePrivate(KeySpec):::Generates a private key object from the provided key specification (key material).:::try->if->dsaPrivKeySpec->return->dsaPrivKeySpec->getX->dsaPrivKeySpec->getP->dsaPrivKeySpec->getQ->dsaPrivKeySpec->getG->new->DSAPrivateKey->else->if->return->getEncoded->new->DSAPrivateKey->else->throw->new->InvalidKeySpecException->catch->throw->e->getMessage->new->InvalidKeySpecException->finally
DSAKeyFactory#engineGetKeySpec(Key, Class):::Returns a specification (key material) of the given key object in the requested format.:::params->try->if->dsaPubKeySpec->Class->forName->x509KeySpec->Class->forName->if->dsaPubKeySpec->isAssignableFrom->dsaPubKey->dsaPubKey->getParams->return->keySpec->dsaPubKey->getY->params->getP->params->getQ->params->getG->new->DSAPublicKeySpec->cast->else->if->x509KeySpec->isAssignableFrom->return->keySpec->key->getEncoded->new->X509EncodedKeySpec->cast->else->throw->new->InvalidKeySpecException->else->if->dsaPrivKeySpec->Class->forName->pkcs8KeySpec->Class->forName->if->dsaPrivKeySpec->isAssignableFrom->dsaPrivKey->dsaPrivKey->getParams->return->keySpec->dsaPrivKey->getX->params->getP->params->getQ->params->getG->new->DSAPrivateKeySpec->cast->else->if->pkcs8KeySpec->isAssignableFrom->return->keySpec->key->getEncoded->new->PKCS8EncodedKeySpec->cast->else->throw->new->InvalidKeySpecException->else->throw->new->InvalidKeySpecException->catch->throw->e->getMessage->new->InvalidKeySpecException->finally
DSAKeyFactory#engineTranslateKey(Key):::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.:::try->if->if->return->dsaPubKeySpec->engineGetKeySpec->return->engineGeneratePublic->else->if->if->return->dsaPrivKeySpec->engineGetKeySpec->return->engineGeneratePrivate->else->throw->new->InvalidKeyException->catch->throw->e->getMessage->new->InvalidKeyException->finally
DSAKeyPairGenerator#initialize(AlgorithmParameterSpec, SecureRandom):::Initializes the DSA object using a parameter object.:::if->throw->new->InvalidAlgorithmParameterException->init
DSAKeyPairGenerator#generateKeyPair():::Generates a pair of keys usable by any JavaSecurity compliant DSA implementation.:::if->JCAUtil->getSecureRandom->spec->try->if->ParameterCache->getNewDSAParameterSpec->else->if->ParameterCache->getDSAParameterSpec->catch->throw->new->ProviderException->finally->return->spec->getP->spec->getQ->spec->getG->generateKeyPair
DSAKeyPairGenerator#generateY(BigInteger, BigInteger, BigInteger):::Generate the public key component y of the key pair.:::y->g->modPow->return
DSAKeyPairGenerator.Legacy#initialize(int, boolean, SecureRandom):::Initializes the DSA key pair generator:::if->super->init->else->cachedParams->ParameterCache->getDefDSASubprimeSize->getCachedDSAParameterSpec->if->throw->new->InvalidParameterException->super->init
DSAKeyPairGenerator.Legacy#initialize(DSAParams, SecureRandom):::Initializes the DSA object using a DSA parameter object.:::if->throw->new->InvalidParameterException->spec->params->getP->params->getQ->params->getG->new->DSAParameterSpec->super->init
DSAParameterGenerator#engineInit(int, SecureRandom):::Initializes this parameter generator for a certain strength and source of randomness.:::if->throw->new->InvalidParameterException->getDefDSASubprimeSize
DSAParameterGenerator#engineInit(AlgorithmParameterSpec, SecureRandom):::Initializes this parameter generator with a set of algorithm-specific parameter generation values.:::if->throw->new->InvalidAlgorithmParameterException->dsaGenParams->dsaGenParams->getPrimePLength->dsaGenParams->getSubprimeQLength->dsaGenParams->getSeedLength
DSAParameterGenerator#engineGenerateParameters():::Generates the parameters.:::algParams->try->if->new->SecureRandom->if->engineInit->pAndQ->generatePandQ->paramP->paramQ->paramG->generateG->dsaParamSpec->new->DSAParameterSpec->AlgorithmParameters->getInstance->algParams->init->catch->throw->e->getMessage->new->RuntimeException->throw->e->getMessage->new->RuntimeException->throw->e->getMessage->new->RuntimeException->finally->return
DSAPrivateKey#getParams():::Returns the DSA parameters associated with this key, or null if the parameters could not be parsed.:::try->if->return->else->paramSpec->algParams->algid->getParameters->if->return->algParams->getParameterSpec->return->catch->return->finally
DSAPrivateKey#getX():::Get the raw private key, x, without the parameters.:::return
DSAPublicKey#getParams():::Returns the DSA parameters associated with this key, or null if the parameters could not be parsed.:::try->if->return->else->paramSpec->algParams->algid->getParameters->if->return->algParams->getParameterSpec->return->catch->return->finally
DSAPublicKey#getY():::Get the raw public value, y, without the parameters.:::return
EntropySource#getEntropy(int, int, int, boolean):::Returns a byte array containing entropy:::
FileInputStreamPool#getInputStream(File):::This method opens an underlying java.io.FileInputStream for a given file and returns a wrapper over it:::oldRref->while->refQueue->poll->pool->remove->cfile->file->getCanonicalFile->pool->get->oldStream->oldRref->get->newRef->newStream->while->if->if->try->newStream->getWrappedStream->close->catch->finally->return->else->if->new->FileInputStream->new->UnclosableInputStream->new->StreamRef->if->pool->putIfAbsent->else->pool->replace->pool->get->if->return->else->oldRref->get
HashDrbg#initEngine():::This call, used by the constructors, instantiates the digest.:::try->MessageDigest->getInstance->catch->try->MessageDigest->getInstance->catch->throw->new->InternalError->finally->finally
HashDrbg#hashDf(MessageDigest, int, int, List):::A hash-based derivation function defined in NIST SP 800-90Ar1 10.3.1:::len->temp->new->byteArr->counter->for->i->return->Arrays->copyOf
HashDrbg#generateAlgorithm(byte[], byte[]):::Generates a user-specified number of random bytes.:::if->debug->println->if->digest->update->digest->update->digest->update->digest->digest->addBytes->hashGen->digest->update->digest->update->h->digest->digest->rcBytes->if->new->byteArr->else->BigInteger->valueOf->toByteArray->addBytes
HmacDrbg#initEngine():::This call, used by the constructors, instantiates the digest.:::algorithm->substring->try->Mac->getInstance->catch->try->Mac->getInstance->catch->throw->new->InternalError->finally->finally
HmacDrbg#generateAlgorithm(byte[], byte[]):::Generates a user-specified number of random bytes.:::if->debug->println->if->Collections->singletonList->update->pos->len->while->try->mac->new->SecretKeySpec->init->catch->throw->new->InternalError->finally->mac->doFinal->System->arraycopy->if->break->if->Collections->singletonList->update->else->Collections->emptyList->update
JavaKeyStore#engineGetKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it.:::entry->entries->convertAlias->get->if->return->if->throw->new->UnrecoverableKeyException->passwordBytes->convertToBytes->keyProtector->new->KeyProtector->encrBytes->encrInfo->try->new->EncryptedPrivateKeyInfo->return->keyProtector->recover->catch->throw->new->UnrecoverableKeyException->finally->Arrays->fill
JavaKeyStore#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias.:::entry->entries->convertAlias->get->if->if->return->else->return->clone->else->return
JavaKeyStore#engineGetCertificate(String):::Returns the certificate associated with the given alias:::entry->entries->convertAlias->get->if->if->return->else->if->return->else->return->else->return
JavaKeyStore#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::entry->entries->convertAlias->get->if->if->return->getTime->new->Date->else->return->getTime->new->Date->else->return
JavaKeyStore#engineSetKeyEntry(String, Key, char[], Certificate[]):::Assigns the given private key to the given alias, protecting it with the given password as defined in PKCS8:::keyProtector->passwordBytes->if->throw->new->KeyStoreException->try->synchronized->entry->new->KeyEntry->new->Date->convertToBytes->new->KeyProtector->keyProtector->protect->if->chain->clone->else->entries->convertAlias->put->catch->throw->new->KeyStoreException->finally->if->Arrays->fill
JavaKeyStore#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::synchronized->try->new->EncryptedPrivateKeyInfo->catch->throw->new->KeyStoreException->finally->entry->new->KeyEntry->new->Date->key->clone->if->chain->clone->else->entries->convertAlias->put
JavaKeyStore#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias:::synchronized->entry->entries->convertAlias->get->if->throw->new->KeyStoreException->trustedCertEntry->new->TrustedCertEntry->new->Date->entries->convertAlias->put
JavaKeyStore#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::synchronized->entries->convertAlias->remove
JavaKeyStore#engineAliases():::Lists all the alias names of this keystore.:::return->entries->keys
JavaKeyStore#engineContainsAlias(String):::Checks if the given alias exists in this keystore.:::return->entries->convertAlias->containsKey
JavaKeyStore#engineSize():::Retrieves the number of entries in this keystore.:::return->entries->size
JavaKeyStore#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias is a key entry, and false otherwise.:::entry->entries->convertAlias->get->if->return->else->return
JavaKeyStore#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias is a trusted certificate entry, and false otherwise.:::entry->entries->convertAlias->get->if->return->else->return
JavaKeyStore#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::certElem->for->e->entries->keys->e->hasMoreElements->return
JavaKeyStore#engineStore(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.:::synchronized->if->throw->new->IllegalArgumentException->encoded->md->getPreKeyedHash->dos->new->DigestOutputStream->new->DataOutputStream->dos->writeInt->dos->writeInt->dos->entries->size->writeInt->for->e->entries->keys->e->hasMoreElements->digest->md->digest->dos->write->dos->flush
JavaKeyStore#engineLoad(InputStream, char[]):::Loads the keystore from the given input stream:::synchronized->dis->md->cf->cfs->bais->encoded->trustedKeyCount->privateKeyCount->if->return->if->getPreKeyedHash->new->DigestInputStream->new->DataInputStream->else->new->DataInputStream->xMagic->dis->readInt->xVersion->dis->readInt->if->throw->new->IOException->if->CertificateFactory->getInstance->else->new->Hashtable<String,CertificateFactory>->entries->clear->count->dis->readInt->for->i->if->debug->println->if->computed->md->digest->actual->IOUtils->readExactlyNBytes->if->MessageDigest->isEqual->t->new->UnrecoverableKeyException->throw->new->IOException->initCause
JavaKeyStore#engineProbe(InputStream):::Probe the first few bytes of the keystore data stream for a valid JKS keystore encoding.:::dataStream->if->else->new->DataInputStream->return->dataStream->readInt
MD4#implReset():::Reset the state of this object.:::resetHashes->Arrays->fill
MD4#implDigest(byte[], int):::Perform the final computations, any buffered bytes are added to the digest, the count is added to the digest, and the resulting digest is stored.:::bitsProcessed->index->padLen->engineUpdate->i2bLittle4->i2bLittle4->implCompress->i2bLittle
MD4#implCompress(byte[], int):::This is where the functions come together as the generic MD4 transformation operation:::b2iLittle64->a->b->c->d->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH
MD5#implReset():::Reset the state of this object.:::resetHashes->Arrays->fill
MD5#implDigest(byte[], int):::Perform the final computations, any buffered bytes are added to the digest, the count is added to the digest, and the resulting digest is stored.:::bitsProcessed->index->padLen->engineUpdate->i2bLittle4->i2bLittle4->implCompress->i2bLittle
MD5#implCompress(byte[], int):::This is where the functions come together as the generic MD5 transformation operation:::b2iLittle64->a->b->c->d->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->FF->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->GG->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->HH->II->II->II->II->II->II->II->II->II->II->II->II->II->II->II->II
ParameterCache#getCachedDSAParameterSpec(int, int):::Return cached DSA parameters for the given length combination of prime and subprime, or null if none are available in the cache.:::return->dsaCache->Integer->valueOf->get
ParameterCache#getCachedDHParameterSpec(int):::Return cached DH parameters for the given keylength, or null if none are available in the cache.:::return->dhCache->Integer->valueOf->get
ParameterCache#getDSAParameterSpec(int, SecureRandom):::Return DSA parameters for the given primeLen:::if->return->getDSAParameterSpec->else->if->return->getDSAParameterSpec->else->if->return->getDSAParameterSpec->else->return
ParameterCache#getDSAParameterSpec(int, int, SecureRandom):::Return DSA parameters for the given primeLen and subprimeLen:::spec->getCachedDSAParameterSpec->if->return->getNewDSAParameterSpec->dsaCache->Integer->valueOf->put->return
ParameterCache#getDHParameterSpec(int, SecureRandom):::Return DH parameters for the given keylength:::spec->getCachedDHParameterSpec->if->return->gen->AlgorithmParameterGenerator->getInstance->gen->init->params->gen->generateParameters->params->getParameterSpec->dhCache->Integer->valueOf->put->return
ParameterCache#getNewDSAParameterSpec(int, int, SecureRandom):::Return new DSA parameters for the given length combination of prime and sub prime:::gen->AlgorithmParameterGenerator->getInstance->if->gen->init->else->genParams->new->DSAGenParameterSpec->gen->init->params->gen->generateParameters->spec->params->getParameterSpec->return
PolicyFile#refresh():::Refreshes the policy object by re-reading all the policy files.:::init
PolicyFile#implies(ProtectionDomain, Permission):::Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted.:::pdMap->policyInfo->getPdMapping->pc->pdMap->get->if->return->pc->implies->getPermissions->if->return->pdMap->put->return->pc->implies
PolicyFile#getPermissions(ProtectionDomain):::Examines this Policy and returns the permissions granted to the specified ProtectionDomain:::perms->new->Permissions->if->return->getPermissions->pc->domain->getPermissions->if->synchronized->e->pc->elements->while->e->hasMoreElements->perms->FilePermCompat->e->nextElement->newPermPlusAltPath->add->return
PolicyFile#getPermissions(CodeSource):::Examines this Policy and creates a PermissionCollection object with the set of permissions for the specified CodeSource.:::return->new->Permissions->getPermissions
PolicyParser#getKeyStoreUrl():::Returns the (possibly expanded) keystore location, or null if the expansion fails.:::try->if->keyStoreUrlString->length->return->expand->replace->catch->if->debug->peee->toString->println->return->finally->return
PolicyParser#grantElements():::Enumerate all the entries in the global policy object:::return->grantEntries->elements
PolicyParser.GrantEntry#permissionElements():::Enumerate all the permission entries in this GrantEntry.:::return->permissionEntries->elements
PolicyParser.PrincipalEntry#equals(Object):::Test for equality between the specified object and this object:::if->return->if->return->that->return->principalClass->equals->principalName->equals
PolicyParser.PrincipalEntry#hashCode():::Return a hashcode for this PrincipalEntry.:::return->principalClass->hashCode
PolicyParser.PermissionEntry#hashCode():::Calculates a hash code value for the object:::retval->permission->hashCode->if->name->hashCode->if->action->hashCode->return
SecureRandom#engineGenerateSeed(int):::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself:::b->new->byteArr->SeedGenerator->generateSeed->return
SecureRandom#engineSetSeed(byte[]):::Reseeds this random object:::if->digest->update->for->i->digest->digest
SecureRandom#engineNextBytes(byte[]):::Generates a user-specified number of random bytes.:::index->todo->output->if->seed->new->byteArr->engineNextBytes->digest->digest->r->if->for->i->while->digest->update->digest->digest->updateState->for->i
SeedGenerator#generateSeed(byte[]):::Fill result with bytes from the queue:::instance->getSeedBytes
SeedGenerator#getSystemEntropy():::Retrieve some system information, hashed.:::md->try->MessageDigest->getInstance->catch->throw->new->InternalError->finally->b->System->currentTimeMillis->md->update->new->java.security.PrivilegedAction<>->doPrivileged->return->md->digest
SHA#implReset():::Resets the buffers and hash value to start a new hash.:::resetHashes->Arrays->fill
SHA#implDigest(byte[], int):::Computes the final hash and copies the 20 bytes to the output array.:::bitsProcessed->index->padLen->engineUpdate->i2bBig4->i2bBig4->implCompress->i2bBig
SHA#implCompress(byte[], int):::Compute a the hash for the current block:::implCompressCheck->implCompress0
SHA2#implReset():::Resets the buffers and hash value to start a new hash.:::resetHashes->Arrays->fill
SHA2#implCompress(byte[], int):::Process the current block to update the state variable state.:::implCompressCheck->implCompress0
SHA3#implCompress(byte[], int):::Core compression function:::for->i->keccak
SHA3#implDigest(byte[], int):::Return the digest:::numOfPadding->setPaddingBytes->if->throw->new->ProviderException->for->i->keccak->System->engineGetDigestLength->arraycopy
SHA3#implReset():::Resets the internal state to start a new hash.:::Arrays->fill->Arrays->fill
SHA5#implCompress(byte[], int):::Compute the hash for the current block:::implCompressCheck->implCompress0
SubjectCodeSource#getPrincipals():::Get the Principals associated with this SubjectCodeSource:::return
SubjectCodeSource#getSubject():::Get the Subject associated with this SubjectCodeSource:::return
SubjectCodeSource#implies(CodeSource):::Returns true if this SubjectCodeSource object "implies" the specified CodeSource:::subjectList->if->super->implies->if->debug->println->return->that->if->if->debug->println->return->if->that->getSubject->that->getSubject->getPrincipals->size->if->debug->println->return->li->listIterator->while->li->hasNext->pppe->li->next->try->pClass->Class->forName->if->isAssignableFrom->throw->new->ClassCastException->c->pClass->getConstructor->p->c->new->ObjectArr->newInstance->if->p->that->getSubject->implies->if->debug->println->return->else->if->debug->println->return->catch->if->if->that->getSubject->if->debug->println->return->i->that->getSubject->getPrincipals->iterator->new->LinkedList<PrincipalEntry>->while->i->hasNext->p->i->next->spppe->p->getClass->getName->p->getName->new->PrincipalEntry->subjectList->add->if->subjectListImpliesPrincipalEntry->if->debug->println->return->finally->if->debug->println->return
SubjectCodeSource#equals(Object):::Tests for equality between the specified object and this object:::if->return->if->super->equals->return->if->return->that->try->if->this->getSubject->that->getSubject->return->catch->return->finally->if->return->if->if->containsAll->containsAll->return->return
SubjectCodeSource#hashCode():::Return a hashcode for this SubjectCodeSource:::return->super->hashCode
SubjectCodeSource#toString():::Return a String representation of this SubjectCodeSource:::returnMe->super->toString->if->getSubject->if->finalSubject->getSubject->new->java.security.PrivilegedAction<String>->doPrivileged->else->getSubject->toString->if->li->principals->listIterator->while->li->hasNext->pppe->li->next->ResourcesMgr->getAuthResourceString->pppe->getPrincipalClass->pppe->getPrincipalName->return
X509Factory#engineGenerateCertificate(InputStream):::Generates an X.509 certificate object and initializes it with the data read from the input stream is.:::if->certCache->clear->X509CertificatePair->clearCache->throw->new->CertificateException->try->encoding->readOneBlock->if->cert->getFromCache->if->return->new->X509CertImpl->cert->getEncodedInternal->addToCache->commitEvent->return->else->throw->new->IOException->catch->throw->ioe->toString->new->CertificateException->finally
X509Factory#intern(X509Certificate):::Return an interned X509CertImpl for the given certificate:::if->return->isImpl->encoding->if->getEncodedInternal->else->c->getEncoded->newC->getFromCache->if->return->if->else->new->X509CertImpl->newC->getEncodedInternal->addToCache->return
X509Factory#intern(X509CRL):::Return an interned X509CRLImpl for the given certificate:::if->return->isImpl->encoding->if->getEncodedInternal->else->c->getEncoded->newC->getFromCache->if->return->if->else->new->X509CRLImpl->newC->getEncodedInternal->addToCache->return
X509Factory#engineGenerateCertPath(InputStream):::Generates a CertPath object and initializes it with the data read from the InputStream inStream:::if->throw->new->CertificateException->try->encoding->readOneBlock->if->return->new->ByteArrayInputStream->new->X509CertPath->else->throw->new->IOException->catch->throw->ioe->getMessage->new->CertificateException->finally
X509Factory#engineGenerateCertPath(InputStream, String):::Generates a CertPath object and initializes it with the data read from the InputStream inStream:::if->throw->new->CertificateException->try->data->readOneBlock->if->return->new->ByteArrayInputStream->new->X509CertPath->else->throw->new->IOException->catch->throw->ioe->getMessage->new->CertificateException->finally
X509Factory#engineGenerateCertPath(List):::Generates a CertPath object and initializes it with a List of Certificates:::return->new->X509CertPath
X509Factory#engineGetCertPathEncodings():::Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first:::return->X509CertPath->getEncodingsStatic
X509Factory#engineGenerateCertificates(InputStream):::Returns a (possibly empty) collection view of X.509 certificates read from the given input stream is.:::if->throw->new->CertificateException->try->return->parseX509orPKCS7Cert->catch->throw->new->CertificateException->finally
X509Factory#engineGenerateCRL(InputStream):::Generates an X.509 certificate revocation list (CRL) object and initializes it with the data read from the given input stream is.:::if->crlCache->clear->throw->new->CRLException->try->encoding->readOneBlock->if->crl->getFromCache->if->return->new->X509CRLImpl->crl->getEncodedInternal->addToCache->return->else->throw->new->IOException->catch->throw->ioe->getMessage->new->CRLException->finally
X509Factory#engineGenerateCRLs(InputStream):::Returns a (possibly empty) collection view of X.509 CRLs read from the given input stream is.:::if->throw->new->CRLException->try->return->parseX509orPKCS7CRL->catch->throw->ioe->getMessage->new->CRLException->finally

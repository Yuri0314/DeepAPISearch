JdpBroadcaster#sendPacket(JdpPacket):::Broadcast pre-built packet:::data->packet->getPacketData->b->ByteBuffer->wrap->channel->new->InetSocketAddress->send
JdpBroadcaster#shutdown():::Shutdown broadcaster and close underlying socket channel:::channel->close
JdpController.JDPControllerRunner#run()::: controller runner run:::try->while->bcast->sendPacket->try->Thread->sleep->catch->finally->catch->finally->try->stop->bcast->shutdown->catch->finally
JdpController.JDPControllerRunner#stop()::: controller runner stop:::
JdpController#getInteger(String, int, String)::: jdp controller get integer:::try->return->Integer->parseInt->catch->throw->new->JdpException->finally
JdpController#getInetAddress(String, InetAddress, String)::: jdp controller get inet address:::try->return->InetAddress->getByName->catch->throw->new->JdpException->finally
JdpController#getProcessId()::: jdp controller get process id:::try->return->ProcessHandle->current->pid->catch->return->finally
JdpController#startDiscoveryService(InetAddress, int, String, String):::Starts discovery service:::ttl->System->getProperty->getInteger->pause->System->getProperty->getInteger->sourceAddress->System->getProperty->getInetAddress->id->UUID->randomUUID->packet->new->JdpJmxPacket->javaCommand->System->getProperty->if->arr->javaCommand->split->packet->setMainClass->packet->setInstanceName->rmiHostname->System->getProperty->packet->setRmiHostname->packet->Integer->toString->setBroadcastInterval->pid->getProcessId->if->packet->pid->toString->setProcessId->bcast->new->JdpBroadcaster->stopDiscoveryService->new->JDPControllerRunner->t->new->Thread->t->setDaemon->t->start
JdpController#stopDiscoveryService():::Stop running discovery service, it's safe to attempt to stop not started service:::if->controller->stop
JdpGenericPacket#checkMagic(int):::Validate protocol header magic field:::if->throw->new->JdpException
JdpGenericPacket#checkVersion(short):::Validate protocol header version field:::if->throw->new->JdpException
JdpGenericPacket#getMagic()::: jdp generic packet get magic:::return
JdpGenericPacket#getVersion()::: jdp generic packet get version:::return
JdpJmxPacket#setMainClass(String):::Set main class field:::
JdpJmxPacket#setInstanceName(String):::Set instance name field:::
JdpJmxPacket#getId()::: jdp jmx packet get id:::return
JdpJmxPacket#getMainClass()::: jdp jmx packet get main class:::return
JdpJmxPacket#getJmxServiceUrl()::: jdp jmx packet get jmx service url:::return
JdpJmxPacket#getInstanceName()::: jdp jmx packet get instance name:::return
JdpJmxPacket#getProcessId()::: jdp jmx packet get process id:::return
JdpJmxPacket#setProcessId(String)::: jdp jmx packet set process id:::
JdpJmxPacket#getRmiHostname()::: jdp jmx packet get rmi hostname:::return
JdpJmxPacket#setRmiHostname(String)::: jdp jmx packet set rmi hostname:::
JdpJmxPacket#getBroadcastInterval()::: jdp jmx packet get broadcast interval:::return
JdpJmxPacket#setBroadcastInterval(String)::: jdp jmx packet set broadcast interval:::
JdpJmxPacket#getPacketData()::: jdp jmx packet get packet data:::writer->new->JdpPacketWriter->writer->id->toString->addEntry->writer->addEntry->writer->addEntry->writer->addEntry->writer->addEntry->writer->addEntry->writer->addEntry->return->writer->getPacketBytes
JdpJmxPacket#hashCode()::: jdp jmx packet hash code:::hash->id->hashCode->jmxServiceUrl->hashCode->return
JdpJmxPacket#equals(Object):::Compare two packets:::if->return->p->return->Objects->p->getId->equals->Objects->p->getJmxServiceUrl->equals
JdpPacket#getPacketData():::This method responsible to assemble packet and return a byte array ready to be sent across a Net.:::
JdpPacketReader#getEntry():::Get next entry from packet:::try->len->pkt->readShort->if->pkt->available->throw->new->JdpException->b->new->byteArr->if->pkt->read->throw->new->JdpException->return->new->String->catch->throw->throw->new->JdpException->throw->new->JdpException->finally
JdpPacketReader#getDiscoveryDataAsMap():::return packet content as a key/value map:::if->return->key->value->tmpMap->new->HashMap<>->try->while->getEntry->getEntry->tmpMap->put->catch->if->throw->new->JdpException->finally->Collections->unmodifiableMap->return
JdpPacketWriter#addEntry(String):::Put string entry to packet:::pkt->writeUTF
JdpPacketWriter#addEntry(String, String):::Put key/value pair to packet:::if->addEntry->addEntry
JdpPacketWriter#getPacketBytes():::Return assembled packet as a byte array:::return->baos->toByteArray

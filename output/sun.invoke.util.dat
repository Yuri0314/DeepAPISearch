BytecodeName#toBytecodeName(String):::Given a source name, produce the corresponding bytecode name:::bn->mangle->return
BytecodeName#toSourceName(String):::Given an unqualified bytecode name, produce the corresponding source name:::checkSafeBytecodeName->sn->if->looksMangled->demangle->return
BytecodeName#parseBytecodeName(String):::Given a bytecode name from a classfile, separate it into components delimited by dangerous characters:::slen->s->length->res->for->pass->return
BytecodeName#unparseBytecodeName(Object[]):::Given a series of components, create a bytecode name for a classfile:::components0->for->i->return->appendAll
BytecodeName#toDisplayName(String):::Given a bytecode name, produce the corresponding display name:::components->parseBytecodeName->for->i->return->appendAll
BytecodeName#isSafeBytecodeName(String):::Report whether a simple name is safe as a bytecode name:::if->s->length->return->foreach->if->continue->if->s->indexOf->return->return
BytecodeName#isSafeBytecodeChar(char):::Report whether a character is safe in a bytecode name:::return->DANGEROUS_CHARS->indexOf
ValueConversions#unboxExact(Wrapper):::Return an exact unboxer for the given primitive type.:::return->unbox
ValueConversions#unboxExact(Wrapper, boolean):::Return an exact unboxer for the given primitive type, with optional null-to-zero conversion:::return->unbox
ValueConversions#unboxWiden(Wrapper):::Return a widening unboxer for the given primitive type:::return->unbox
ValueConversions#unboxCast(Wrapper):::Return a casting unboxer for the given primitive type:::return->unbox
ValueConversions#primitiveConversion(Wrapper, Object, boolean):::Produce a Number which represents the given value x according to the primitive type of the given wrapper wrap:::res->if->if->return->return->if->else->if->else->if->else->xwrap->Wrapper->x->getClass->findWrapperType->if->wrap->isConvertibleFrom->return->wrap->wrapperType->cast->return
ValueConversions#widenSubword(Object):::The JVM verifier allows boolean, byte, short, or char to widen to int:::if->return->else->if->return->fromBoolean->else->if->return->else->if->return->else->if->return->else->return
ValueConversions#cast():::Return a method that casts its second argument (an Object) to the given type (a Class).:::return
VerifyAccess#isMemberAccessible(Class, Class, int, Class, int):::Evaluate the JVM linkage rules for access to the given method on behalf of a caller class which proposes to perform the access:::if->return->if->isClassAccessible->return->if->return->switch->return->if->isSamePackage->return->if->return->if->isRelatedClass->return->if->isSubClass->return->return->return->isSamePackage->canAccess->Reflection->areNestMates->return->throw->Modifier->toString->new->IllegalArgumentException
VerifyAccess#isClassAccessible(Class, Class, int):::Evaluate the JVM linkage rules for access to the given class on behalf of caller:::if->return->mods->getClassModifiers->if->isPublic->lookupModule->lookupClass->getModule->refModule->refc->getModule->if->return->if->return->if->lookupModule->canRead->if->if->refModule->refc->getPackageName->isExported->return->else->if->refModule->refc->getPackageName->isExported->return->if->isModuleSystemInited->return->return->if->isSamePackage->return->return
VerifyAccess#isTypeVisible(Class, Class):::Decide if the given method type, attributed to a member or symbolic reference of a given reference class, is really visible to that class.:::if->return->while->type->isArray->type->getComponentType->if->type->isPrimitive->return->typeLoader->type->getClassLoader->refcLoader->refc->getClassLoader->if->return->if->return->if->type->getName->startsWith->return->name->type->getName->res->new->java.security.PrivilegedAction<>->doPrivileged->return
VerifyAccess#isTypeVisible(java.lang.invoke.MethodType, Class):::Decide if the given method type, attributed to a member or symbolic reference of a given reference class, is really visible to that class.:::if->type->returnType->isTypeVisible->return->for->n->max->type->parameterCount->return
VerifyAccess#isSameModule(Class, Class):::Tests if two classes are in the same module.:::return->class1->getModule->class2->getModule
VerifyAccess#isSamePackage(Class, Class):::Test if two classes have the same class loader and package qualifier.:::if->return->if->class1->getClassLoader->class2->getClassLoader->return->return->Objects->class1->getPackageName->class2->getPackageName->equals
VerifyAccess#isSamePackageMember(Class, Class):::Test if two classes are defined as part of the same package member (top-level class):::if->return->if->isSamePackage->return->if->getOutermostEnclosingClass->getOutermostEnclosingClass->return->return
VerifyAccess#classLoaderIsAncestor(Class, Class):::Is the class loader of parentClass identical to, or an ancestor of, the class loader of childClass?:::return->parentClass->getClassLoader->childClass->getClassLoader->loadersAreRelated
VerifyType#isNullConversion(Class, Class, boolean):::True if a value can be stacked as the source type and unstacked as the destination type, without violating the JVM's type consistency:::if->return->if->if->dst->isInterface->if->src->isInterface->if->return->if->isNullType->return->dst->isPrimitive->if->src->isPrimitive->return->dst->isAssignableFrom->if->dst->isPrimitive->return->sw->Wrapper->forPrimitiveType->if->return->sw->isSubwordOrInt->dw->Wrapper->forPrimitiveType->if->sw->isSubwordOrInt->return->if->dw->isSubwordOrInt->return->if->dw->isSigned->sw->isSigned->return->return->dw->bitWidth->sw->bitWidth
VerifyType#isNullReferenceConversion(Class, Class):::Specialization of isNullConversion to reference types.:::if->dst->isInterface->return->if->isNullType->return->return->dst->isAssignableFrom
VerifyType#isNullType(Class):::Is the given type java.lang.Null or an equivalent null-only type?:::if->return->if->return->return
VerifyType#isNullConversion(MethodType, MethodType, boolean):::True if a method handle can receive a call under a slightly different method type, without moving or reformatting any stack elements.:::if->return->len->call->parameterCount->if->recv->parameterCount->return->for->i->return->recv->returnType->call->returnType->isNullConversion
VerifyType#canPassUnchecked(Class, Class):::Determine if the JVM verifier allows a value of type call to be passed to a formal parameter (or return variable) of type recv:::if->return->if->dst->isPrimitive->if->return->if->return->if->src->isPrimitive->return->sw->Wrapper->forPrimitiveType->dw->Wrapper->forPrimitiveType->if->sw->isSubwordOrInt->dw->isSubwordOrInt->if->sw->bitWidth->dw->bitWidth->return->if->dw->isSigned->sw->isSigned->return->return->if->if->return->else->return->else->return->else->if->src->isPrimitive->return->if->isNullReferenceConversion->return->return

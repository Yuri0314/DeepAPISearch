sun.invoke.util.BytecodeDescriptor#parseMethod(String, ClassLoader)->List>::: bytecode descriptor parse method
sun.invoke.util.BytecodeDescriptor#parseMethod(String, int, int, ClassLoader)->List>::: bytecode descriptor parse method
sun.invoke.util.BytecodeDescriptor#unparse(Class)->String::: bytecode descriptor unparse
sun.invoke.util.BytecodeDescriptor#unparse(MethodType)->String::: bytecode descriptor unparse
sun.invoke.util.BytecodeDescriptor#unparse(Object)->String::: bytecode descriptor unparse
sun.invoke.util.BytecodeDescriptor#unparseMethod(Class, List>)->String::: bytecode descriptor unparse method
sun.invoke.util.BytecodeDescriptor#unparseMethod(Class, Class[])->String::: bytecode descriptor unparse method
sun.invoke.util.BytecodeName#toBytecodeName(String)->String:::Given a source name, produce the corresponding bytecode name
sun.invoke.util.BytecodeName#toSourceName(String)->String:::Given an unqualified bytecode name, produce the corresponding source name
sun.invoke.util.BytecodeName#parseBytecodeName(String)->Object[]:::Given a bytecode name from a classfile, separate it into components delimited by dangerous characters
sun.invoke.util.BytecodeName#unparseBytecodeName(Object[])->String:::Given a series of components, create a bytecode name for a classfile
sun.invoke.util.BytecodeName#toDisplayName(String)->String:::Given a bytecode name, produce the corresponding display name
sun.invoke.util.BytecodeName#isSafeBytecodeName(String)->boolean:::Report whether a simple name is safe as a bytecode name
sun.invoke.util.BytecodeName#isSafeBytecodeChar(char)->boolean:::Report whether a character is safe in a bytecode name
sun.invoke.util.BytecodeName#isSpecial(char)->boolean::: bytecode name is special
sun.invoke.util.BytecodeName#replacementOf(char)->char::: bytecode name replacement of
sun.invoke.util.BytecodeName#originalOfReplacement(char)->char::: bytecode name original of replacement
sun.invoke.util.BytecodeName#isDangerous(char)->boolean::: bytecode name is dangerous
sun.invoke.util.BytecodeName#indexOfDangerousChar(String, int)->int::: bytecode name index of dangerous char
sun.invoke.util.BytecodeName#lastIndexOfDangerousChar(String, int)->int::: bytecode name last index of dangerous char
sun.invoke.util.ValueConversions#unboxInteger(Integer)->int::: value conversions unbox integer
sun.invoke.util.ValueConversions#unboxInteger(Object, boolean)->int::: value conversions unbox integer
sun.invoke.util.ValueConversions#unboxByte(Byte)->byte::: value conversions unbox byte
sun.invoke.util.ValueConversions#unboxByte(Object, boolean)->byte::: value conversions unbox byte
sun.invoke.util.ValueConversions#unboxShort(Short)->short::: value conversions unbox short
sun.invoke.util.ValueConversions#unboxShort(Object, boolean)->short::: value conversions unbox short
sun.invoke.util.ValueConversions#unboxBoolean(Boolean)->boolean::: value conversions unbox boolean
sun.invoke.util.ValueConversions#unboxBoolean(Object, boolean)->boolean::: value conversions unbox boolean
sun.invoke.util.ValueConversions#unboxCharacter(Character)->char::: value conversions unbox character
sun.invoke.util.ValueConversions#unboxCharacter(Object, boolean)->char::: value conversions unbox character
sun.invoke.util.ValueConversions#unboxLong(Long)->long::: value conversions unbox long
sun.invoke.util.ValueConversions#unboxLong(Object, boolean)->long::: value conversions unbox long
sun.invoke.util.ValueConversions#unboxFloat(Float)->float::: value conversions unbox float
sun.invoke.util.ValueConversions#unboxFloat(Object, boolean)->float::: value conversions unbox float
sun.invoke.util.ValueConversions#unboxDouble(Double)->double::: value conversions unbox double
sun.invoke.util.ValueConversions#unboxDouble(Object, boolean)->double::: value conversions unbox double
sun.invoke.util.ValueConversions#unboxExact(Wrapper)->MethodHandle:::Return an exact unboxer for the given primitive type.
sun.invoke.util.ValueConversions#unboxExact(Wrapper, boolean)->MethodHandle:::Return an exact unboxer for the given primitive type, with optional null-to-zero conversion
sun.invoke.util.ValueConversions#unboxWiden(Wrapper)->MethodHandle:::Return a widening unboxer for the given primitive type
sun.invoke.util.ValueConversions#unboxCast(Wrapper)->MethodHandle:::Return a casting unboxer for the given primitive type
sun.invoke.util.ValueConversions#primitiveConversion(Wrapper, Object, boolean)->Number:::Produce a Number which represents the given value x according to the primitive type of the given wrapper wrap
sun.invoke.util.ValueConversions#widenSubword(Object)->int:::The JVM verifier allows boolean, byte, short, or char to widen to int
sun.invoke.util.ValueConversions#boxInteger(int)->Integer::: value conversions box integer
sun.invoke.util.ValueConversions#boxByte(byte)->Byte::: value conversions box byte
sun.invoke.util.ValueConversions#boxShort(short)->Short::: value conversions box short
sun.invoke.util.ValueConversions#boxBoolean(boolean)->Boolean::: value conversions box boolean
sun.invoke.util.ValueConversions#boxCharacter(char)->Character::: value conversions box character
sun.invoke.util.ValueConversions#boxLong(long)->Long::: value conversions box long
sun.invoke.util.ValueConversions#boxFloat(float)->Float::: value conversions box float
sun.invoke.util.ValueConversions#boxDouble(double)->Double::: value conversions box double
sun.invoke.util.ValueConversions#boxExact(Wrapper)->MethodHandle::: value conversions box exact
sun.invoke.util.ValueConversions#ignore(Object)->void::: value conversions ignore
sun.invoke.util.ValueConversions#empty()->void::: value conversions empty
sun.invoke.util.ValueConversions#zeroObject()->Object::: value conversions zero object
sun.invoke.util.ValueConversions#zeroInteger()->int::: value conversions zero integer
sun.invoke.util.ValueConversions#zeroLong()->long::: value conversions zero long
sun.invoke.util.ValueConversions#zeroFloat()->float::: value conversions zero float
sun.invoke.util.ValueConversions#zeroDouble()->double::: value conversions zero double
sun.invoke.util.ValueConversions#zeroConstantFunction(Wrapper)->MethodHandle::: value conversions zero constant function
sun.invoke.util.ValueConversions#ignore()->MethodHandle::: value conversions ignore
sun.invoke.util.ValueConversions#cast()->MethodHandle:::Return a method that casts its second argument (an Object) to the given type (a Class).
sun.invoke.util.ValueConversions#doubleToFloat(double)->float::: value conversions double to float
sun.invoke.util.ValueConversions#doubleToLong(double)->long::: value conversions double to long
sun.invoke.util.ValueConversions#doubleToInt(double)->int::: value conversions double to int
sun.invoke.util.ValueConversions#doubleToShort(double)->short::: value conversions double to short
sun.invoke.util.ValueConversions#doubleToChar(double)->char::: value conversions double to char
sun.invoke.util.ValueConversions#doubleToByte(double)->byte::: value conversions double to byte
sun.invoke.util.ValueConversions#doubleToBoolean(double)->boolean::: value conversions double to boolean
sun.invoke.util.ValueConversions#floatToDouble(float)->double::: value conversions float to double
sun.invoke.util.ValueConversions#floatToLong(float)->long::: value conversions float to long
sun.invoke.util.ValueConversions#floatToInt(float)->int::: value conversions float to int
sun.invoke.util.ValueConversions#floatToShort(float)->short::: value conversions float to short
sun.invoke.util.ValueConversions#floatToChar(float)->char::: value conversions float to char
sun.invoke.util.ValueConversions#floatToByte(float)->byte::: value conversions float to byte
sun.invoke.util.ValueConversions#floatToBoolean(float)->boolean::: value conversions float to boolean
sun.invoke.util.ValueConversions#longToDouble(long)->double::: value conversions long to double
sun.invoke.util.ValueConversions#longToFloat(long)->float::: value conversions long to float
sun.invoke.util.ValueConversions#longToInt(long)->int::: value conversions long to int
sun.invoke.util.ValueConversions#longToShort(long)->short::: value conversions long to short
sun.invoke.util.ValueConversions#longToChar(long)->char::: value conversions long to char
sun.invoke.util.ValueConversions#longToByte(long)->byte::: value conversions long to byte
sun.invoke.util.ValueConversions#longToBoolean(long)->boolean::: value conversions long to boolean
sun.invoke.util.ValueConversions#intToDouble(int)->double::: value conversions int to double
sun.invoke.util.ValueConversions#intToFloat(int)->float::: value conversions int to float
sun.invoke.util.ValueConversions#intToLong(int)->long::: value conversions int to long
sun.invoke.util.ValueConversions#intToShort(int)->short::: value conversions int to short
sun.invoke.util.ValueConversions#intToChar(int)->char::: value conversions int to char
sun.invoke.util.ValueConversions#intToByte(int)->byte::: value conversions int to byte
sun.invoke.util.ValueConversions#intToBoolean(int)->boolean::: value conversions int to boolean
sun.invoke.util.ValueConversions#shortToDouble(short)->double::: value conversions short to double
sun.invoke.util.ValueConversions#shortToFloat(short)->float::: value conversions short to float
sun.invoke.util.ValueConversions#shortToLong(short)->long::: value conversions short to long
sun.invoke.util.ValueConversions#shortToInt(short)->int::: value conversions short to int
sun.invoke.util.ValueConversions#shortToChar(short)->char::: value conversions short to char
sun.invoke.util.ValueConversions#shortToByte(short)->byte::: value conversions short to byte
sun.invoke.util.ValueConversions#shortToBoolean(short)->boolean::: value conversions short to boolean
sun.invoke.util.ValueConversions#charToDouble(char)->double::: value conversions char to double
sun.invoke.util.ValueConversions#charToFloat(char)->float::: value conversions char to float
sun.invoke.util.ValueConversions#charToLong(char)->long::: value conversions char to long
sun.invoke.util.ValueConversions#charToInt(char)->int::: value conversions char to int
sun.invoke.util.ValueConversions#charToShort(char)->short::: value conversions char to short
sun.invoke.util.ValueConversions#charToByte(char)->byte::: value conversions char to byte
sun.invoke.util.ValueConversions#charToBoolean(char)->boolean::: value conversions char to boolean
sun.invoke.util.ValueConversions#byteToDouble(byte)->double::: value conversions byte to double
sun.invoke.util.ValueConversions#byteToFloat(byte)->float::: value conversions byte to float
sun.invoke.util.ValueConversions#byteToLong(byte)->long::: value conversions byte to long
sun.invoke.util.ValueConversions#byteToInt(byte)->int::: value conversions byte to int
sun.invoke.util.ValueConversions#byteToShort(byte)->short::: value conversions byte to short
sun.invoke.util.ValueConversions#byteToChar(byte)->char::: value conversions byte to char
sun.invoke.util.ValueConversions#byteToBoolean(byte)->boolean::: value conversions byte to boolean
sun.invoke.util.ValueConversions#booleanToDouble(boolean)->double::: value conversions boolean to double
sun.invoke.util.ValueConversions#booleanToFloat(boolean)->float::: value conversions boolean to float
sun.invoke.util.ValueConversions#booleanToLong(boolean)->long::: value conversions boolean to long
sun.invoke.util.ValueConversions#booleanToInt(boolean)->int::: value conversions boolean to int
sun.invoke.util.ValueConversions#booleanToShort(boolean)->short::: value conversions boolean to short
sun.invoke.util.ValueConversions#booleanToChar(boolean)->char::: value conversions boolean to char
sun.invoke.util.ValueConversions#booleanToByte(boolean)->byte::: value conversions boolean to byte
sun.invoke.util.ValueConversions#toBoolean(byte)->boolean::: value conversions to boolean
sun.invoke.util.ValueConversions#fromBoolean(boolean)->byte::: value conversions from boolean
sun.invoke.util.ValueConversions#convertPrimitive(Wrapper, Wrapper)->MethodHandle::: value conversions convert primitive
sun.invoke.util.ValueConversions#convertPrimitive(Class, Class)->MethodHandle::: value conversions convert primitive
sun.invoke.util.VerifyAccess#isMemberAccessible(Class, Class, int, Class, int)->boolean:::Evaluate the JVM linkage rules for access to the given method on behalf of a caller class which proposes to perform the access
sun.invoke.util.VerifyAccess#isRelatedClass(Class, Class)->boolean::: verify access is related class
sun.invoke.util.VerifyAccess#isSubClass(Class, Class)->boolean::: verify access is sub class
sun.invoke.util.VerifyAccess#getClassModifiers(Class)->int::: verify access get class modifiers
sun.invoke.util.VerifyAccess#isClassAccessible(Class, Class, int)->boolean:::Evaluate the JVM linkage rules for access to the given class on behalf of caller
sun.invoke.util.VerifyAccess#isTypeVisible(Class, Class)->boolean:::Decide if the given method type, attributed to a member or symbolic reference of a given reference class, is really visible to that class.
sun.invoke.util.VerifyAccess#isTypeVisible(java.lang.invoke.MethodType, Class)->boolean:::Decide if the given method type, attributed to a member or symbolic reference of a given reference class, is really visible to that class.
sun.invoke.util.VerifyAccess#isSameModule(Class, Class)->boolean:::Tests if two classes are in the same module.
sun.invoke.util.VerifyAccess#isSamePackage(Class, Class)->boolean:::Test if two classes have the same class loader and package qualifier.
sun.invoke.util.VerifyAccess#isSamePackageMember(Class, Class)->boolean:::Test if two classes are defined as part of the same package member (top-level class)
sun.invoke.util.VerifyAccess#classLoaderIsAncestor(Class, Class)->boolean:::Is the class loader of parentClass identical to, or an ancestor of, the class loader of childClass?
sun.invoke.util.VerifyType#isNullConversion(Class, Class, boolean)->boolean:::True if a value can be stacked as the source type and unstacked as the destination type, without violating the JVM's type consistency
sun.invoke.util.VerifyType#isNullReferenceConversion(Class, Class)->boolean:::Specialization of isNullConversion to reference types.
sun.invoke.util.VerifyType#isNullType(Class)->boolean:::Is the given type java.lang.Null or an equivalent null-only type?
sun.invoke.util.VerifyType#isNullConversion(MethodType, MethodType, boolean)->boolean:::True if a method handle can receive a call under a slightly different method type, without moving or reformatting any stack elements.
sun.invoke.util.VerifyType#canPassUnchecked(Class, Class)->int:::Determine if the JVM verifier allows a value of type call to be passed to a formal parameter (or return variable) of type recv
sun.invoke.util.VerifyType#isSpreadArgType(Class)->boolean::: verify type is spread arg type
sun.invoke.util.VerifyType#spreadArgElementType(Class, int)->Class::: verify type spread arg element type

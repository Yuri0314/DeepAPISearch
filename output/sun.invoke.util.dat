BytecodeDescriptor#parseMethod(String, ClassLoader)::: bytecode descriptor parse method:::return->bytecodeSignature->length->parseMethod
BytecodeDescriptor#parseMethod(String, int, int, ClassLoader)::: bytecode descriptor parse method:::str->i->ptypes->new->ArrayList<Class<?>>->if->str->charAt->while->str->charAt->pt->parseSig->if->parseError->ptypes->add->else->parseError->rtype->parseSig->if->parseError->ptypes->add->return
BytecodeDescriptor#parseError(String, String)::: bytecode descriptor parse error:::throw->new->IllegalArgumentException
BytecodeDescriptor#parseSig(String, int[], int, ClassLoader)::: bytecode descriptor parse sig:::if->return->c->str->charAt->if->begc->endc->str->indexOf->if->return->name->str->substring->replace->try->return->Class->forName->loader->loadClass->catch->throw->new->TypeNotPresentException->finally->else->if->t->parseSig->if->newInstance->getClass->return->else->return->Wrapper->forBasicType->primitiveType
BytecodeDescriptor#unparse(Class)::: bytecode descriptor unparse:::if->return->else->if->return->sb->new->StringBuilder->unparseSig->return->sb->toString
BytecodeDescriptor#unparse(MethodType)::: bytecode descriptor unparse:::return->type->returnType->type->parameterArray->unparseMethod
BytecodeDescriptor#unparse(Object)::: bytecode descriptor unparse:::if->return->unparse->if->return->unparse->return
BytecodeDescriptor#unparseMethod(Class, List>)::: bytecode descriptor unparse method:::sb->new->StringBuilder->sb->append->foreach->unparseSig->sb->append->unparseSig->return->sb->toString
BytecodeDescriptor#unparseMethod(Class, Class[])::: bytecode descriptor unparse method:::sb->new->StringBuilder->sb->append->foreach->unparseSig->sb->append->unparseSig->return->sb->toString
BytecodeDescriptor#unparseSig(Class, StringBuilder)::: bytecode descriptor unparse sig:::c->Wrapper->forBasicType->basicTypeChar->if->sb->append->else->if->sb->append->else->lsemi->t->isArray->if->sb->append->sb->t->getName->replace->append->if->sb->append
BytecodeName#toBytecodeName(String):::Given a source name, produce the corresponding bytecode name:::bn->mangle->return
BytecodeName#toSourceName(String):::Given an unqualified bytecode name, produce the corresponding source name:::checkSafeBytecodeName->sn->if->looksMangled->demangle->return
BytecodeName#parseBytecodeName(String):::Given a bytecode name from a classfile, separate it into components delimited by dangerous characters:::slen->s->length->res->for->pass->return
BytecodeName#unparseBytecodeName(Object[]):::Given a series of components, create a bytecode name for a classfile:::components0->for->i->return->appendAll
BytecodeName#appendAll(Object[])::: bytecode name append all:::if->if->return->String->valueOf->return->slen->foreach->if->String->valueOf->length->else->sb->new->StringBuilder->foreach->sb->append->return->sb->toString
BytecodeName#toDisplayName(String):::Given a bytecode name, produce the corresponding display name:::components->parseBytecodeName->for->i->return->appendAll
BytecodeName#isJavaIdent(String)::: bytecode name is java ident:::slen->s->length->if->return->if->Character->s->charAt->isJavaIdentifierStart->return->for->i->return
BytecodeName#quoteDisplay(String)::: bytecode name quote display:::return->s->replaceAll
BytecodeName#checkSafeBytecodeName(String)::: bytecode name check safe bytecode name:::if->isSafeBytecodeName->throw->new->IllegalArgumentException
BytecodeName#isSafeBytecodeName(String):::Report whether a simple name is safe as a bytecode name:::if->s->length->return->foreach->if->continue->if->s->indexOf->return->return
BytecodeName#isSafeBytecodeChar(char):::Report whether a character is safe in a bytecode name:::return->DANGEROUS_CHARS->indexOf
BytecodeName#looksMangled(String)::: bytecode name looks mangled:::return->s->charAt
BytecodeName#mangle(String)::: bytecode name mangle:::if->s->length->return->sb->for->i->slen->s->length->if->return->sb->toString->return
BytecodeName#demangle(String)::: bytecode name demangle:::sb->stringStart->if->s->startsWith->for->i->slen->s->length->if->return->sb->toString->return->s->substring
BytecodeName#isSpecial(char)::: bytecode name is special:::if->return->else->return
BytecodeName#replacementOf(char)::: bytecode name replacement of:::if->isSpecial->return->i->DANGEROUS_CHARS->indexOf->if->return->return->REPLACEMENT_CHARS->charAt
BytecodeName#originalOfReplacement(char)::: bytecode name original of replacement:::if->isSpecial->return->i->REPLACEMENT_CHARS->indexOf->if->return->return->DANGEROUS_CHARS->charAt
BytecodeName#isDangerous(char)::: bytecode name is dangerous:::if->isSpecial->return->return->DANGEROUS_CHARS->indexOf
BytecodeName#indexOfDangerousChar(String, int)::: bytecode name index of dangerous char:::for->i->slen->s->length->return
BytecodeName#lastIndexOfDangerousChar(String, int)::: bytecode name last index of dangerous char:::for->i->Math->s->length->min->return
ValueConversions.WrapperCache#get(Wrapper)::: wrapper cache get:::return->w->ordinal
ValueConversions.WrapperCache#put(Wrapper, MethodHandle)::: wrapper cache put:::prev->w->ordinal->if->return->else->w->ordinal->return
ValueConversions#newWrapperCaches(int)::: value conversions new wrapper caches:::caches->new->WrapperCacheArr->for->i->return
ValueConversions#unboxInteger(Integer)::: value conversions unbox integer:::return
ValueConversions#unboxInteger(Object, boolean)::: value conversions unbox integer:::if->return->return->primitiveConversion->intValue
ValueConversions#unboxByte(Byte)::: value conversions unbox byte:::return
ValueConversions#unboxByte(Object, boolean)::: value conversions unbox byte:::if->return->return->primitiveConversion->byteValue
ValueConversions#unboxShort(Short)::: value conversions unbox short:::return
ValueConversions#unboxShort(Object, boolean)::: value conversions unbox short:::if->return->return->primitiveConversion->shortValue
ValueConversions#unboxBoolean(Boolean)::: value conversions unbox boolean:::return
ValueConversions#unboxBoolean(Object, boolean)::: value conversions unbox boolean:::if->return->return->primitiveConversion->intValue
ValueConversions#unboxCharacter(Character)::: value conversions unbox character:::return
ValueConversions#unboxCharacter(Object, boolean)::: value conversions unbox character:::if->return->return->primitiveConversion->intValue
ValueConversions#unboxLong(Long)::: value conversions unbox long:::return
ValueConversions#unboxLong(Object, boolean)::: value conversions unbox long:::if->return->return->primitiveConversion->longValue
ValueConversions#unboxFloat(Float)::: value conversions unbox float:::return
ValueConversions#unboxFloat(Object, boolean)::: value conversions unbox float:::if->return->return->primitiveConversion->floatValue
ValueConversions#unboxDouble(Double)::: value conversions unbox double:::return
ValueConversions#unboxDouble(Object, boolean)::: value conversions unbox double:::if->return->return->primitiveConversion->doubleValue
ValueConversions#unboxType(Wrapper, int)::: value conversions unbox type:::if->return->MethodType->wrap->primitiveType->wrap->wrapperType->methodType->return->MethodType->wrap->primitiveType->methodType
ValueConversions#unbox(Wrapper, int)::: value conversions unbox:::cache->mh->cache->get->if->return->switch->throw->new->IllegalArgumentException->name->wrap->wrapperSimpleName->type->unboxType->try->IMPL_LOOKUP->findStatic->catch->finally->if->if->cast->MethodHandles->insertArguments->if->mh->unboxType->asType->return->cache->put->throw->new->IllegalArgumentException
ValueConversions#unboxExact(Wrapper):::Return an exact unboxer for the given primitive type.:::return->unbox
ValueConversions#unboxExact(Wrapper, boolean):::Return an exact unboxer for the given primitive type, with optional null-to-zero conversion:::return->unbox
ValueConversions#unboxWiden(Wrapper):::Return a widening unboxer for the given primitive type:::return->unbox
ValueConversions#unboxCast(Wrapper):::Return a casting unboxer for the given primitive type:::return->unbox
ValueConversions#primitiveConversion(Wrapper, Object, boolean):::Produce a Number which represents the given value x according to the primitive type of the given wrapper wrap:::res->if->if->return->return->if->else->if->else->if->else->xwrap->Wrapper->x->getClass->findWrapperType->if->wrap->isConvertibleFrom->return->wrap->wrapperType->cast->return
ValueConversions#widenSubword(Object):::The JVM verifier allows boolean, byte, short, or char to widen to int:::if->return->else->if->return->fromBoolean->else->if->return->else->if->return->else->if->return->else->return
ValueConversions#boxInteger(int)::: value conversions box integer:::return
ValueConversions#boxByte(byte)::: value conversions box byte:::return
ValueConversions#boxShort(short)::: value conversions box short:::return
ValueConversions#boxBoolean(boolean)::: value conversions box boolean:::return
ValueConversions#boxCharacter(char)::: value conversions box character:::return
ValueConversions#boxLong(long)::: value conversions box long:::return
ValueConversions#boxFloat(float)::: value conversions box float:::return
ValueConversions#boxDouble(double)::: value conversions box double:::return
ValueConversions#boxType(Wrapper)::: value conversions box type:::boxType->wrap->wrapperType->return->MethodType->wrap->primitiveType->methodType
ValueConversions#boxExact(Wrapper)::: value conversions box exact:::cache->mh->cache->get->if->return->name->wrap->wrapperSimpleName->type->boxType->try->IMPL_LOOKUP->findStatic->catch->finally->if->return->cache->put->throw->new->IllegalArgumentException
ValueConversions#ignore(Object)::: value conversions ignore:::
ValueConversions#empty()::: value conversions empty:::
ValueConversions#zeroObject()::: value conversions zero object:::return
ValueConversions#zeroInteger()::: value conversions zero integer:::return
ValueConversions#zeroLong()::: value conversions zero long:::return
ValueConversions#zeroFloat()::: value conversions zero float:::return
ValueConversions#zeroDouble()::: value conversions zero double:::return
ValueConversions#zeroConstantFunction(Wrapper)::: value conversions zero constant function:::cache->mh->cache->get->if->return->type->MethodType->wrap->primitiveType->methodType->switch->break->try->IMPL_LOOKUP->wrap->wrapperSimpleName->findStatic->catch->finally->break->if->return->cache->put->if->wrap->isSubwordOrInt->MethodHandles->zeroConstantFunction->explicitCastArguments->return->cache->put->throw->new->IllegalArgumentException
ValueConversions#ignore()::: value conversions ignore:::return
ValueConversions#cast():::Return a method that casts its second argument (an Object) to the given type (a Class).:::return
ValueConversions#doubleToFloat(double)::: value conversions double to float:::return
ValueConversions#doubleToLong(double)::: value conversions double to long:::return
ValueConversions#doubleToInt(double)::: value conversions double to int:::return
ValueConversions#doubleToShort(double)::: value conversions double to short:::return
ValueConversions#doubleToChar(double)::: value conversions double to char:::return
ValueConversions#doubleToByte(double)::: value conversions double to byte:::return
ValueConversions#doubleToBoolean(double)::: value conversions double to boolean:::return->toBoolean
ValueConversions#floatToDouble(float)::: value conversions float to double:::return
ValueConversions#floatToLong(float)::: value conversions float to long:::return
ValueConversions#floatToInt(float)::: value conversions float to int:::return
ValueConversions#floatToShort(float)::: value conversions float to short:::return
ValueConversions#floatToChar(float)::: value conversions float to char:::return
ValueConversions#floatToByte(float)::: value conversions float to byte:::return
ValueConversions#floatToBoolean(float)::: value conversions float to boolean:::return->toBoolean
ValueConversions#longToDouble(long)::: value conversions long to double:::return
ValueConversions#longToFloat(long)::: value conversions long to float:::return
ValueConversions#longToInt(long)::: value conversions long to int:::return
ValueConversions#longToShort(long)::: value conversions long to short:::return
ValueConversions#longToChar(long)::: value conversions long to char:::return
ValueConversions#longToByte(long)::: value conversions long to byte:::return
ValueConversions#longToBoolean(long)::: value conversions long to boolean:::return->toBoolean
ValueConversions#intToDouble(int)::: value conversions int to double:::return
ValueConversions#intToFloat(int)::: value conversions int to float:::return
ValueConversions#intToLong(int)::: value conversions int to long:::return
ValueConversions#intToShort(int)::: value conversions int to short:::return
ValueConversions#intToChar(int)::: value conversions int to char:::return
ValueConversions#intToByte(int)::: value conversions int to byte:::return
ValueConversions#intToBoolean(int)::: value conversions int to boolean:::return->toBoolean
ValueConversions#shortToDouble(short)::: value conversions short to double:::return
ValueConversions#shortToFloat(short)::: value conversions short to float:::return
ValueConversions#shortToLong(short)::: value conversions short to long:::return
ValueConversions#shortToInt(short)::: value conversions short to int:::return
ValueConversions#shortToChar(short)::: value conversions short to char:::return
ValueConversions#shortToByte(short)::: value conversions short to byte:::return
ValueConversions#shortToBoolean(short)::: value conversions short to boolean:::return->toBoolean
ValueConversions#charToDouble(char)::: value conversions char to double:::return
ValueConversions#charToFloat(char)::: value conversions char to float:::return
ValueConversions#charToLong(char)::: value conversions char to long:::return
ValueConversions#charToInt(char)::: value conversions char to int:::return
ValueConversions#charToShort(char)::: value conversions char to short:::return
ValueConversions#charToByte(char)::: value conversions char to byte:::return
ValueConversions#charToBoolean(char)::: value conversions char to boolean:::return->toBoolean
ValueConversions#byteToDouble(byte)::: value conversions byte to double:::return
ValueConversions#byteToFloat(byte)::: value conversions byte to float:::return
ValueConversions#byteToLong(byte)::: value conversions byte to long:::return
ValueConversions#byteToInt(byte)::: value conversions byte to int:::return
ValueConversions#byteToShort(byte)::: value conversions byte to short:::return
ValueConversions#byteToChar(byte)::: value conversions byte to char:::return
ValueConversions#byteToBoolean(byte)::: value conversions byte to boolean:::return->toBoolean
ValueConversions#booleanToDouble(boolean)::: value conversions boolean to double:::return->fromBoolean
ValueConversions#booleanToFloat(boolean)::: value conversions boolean to float:::return->fromBoolean
ValueConversions#booleanToLong(boolean)::: value conversions boolean to long:::return->fromBoolean
ValueConversions#booleanToInt(boolean)::: value conversions boolean to int:::return->fromBoolean
ValueConversions#booleanToShort(boolean)::: value conversions boolean to short:::return->fromBoolean
ValueConversions#booleanToChar(boolean)::: value conversions boolean to char:::return->fromBoolean
ValueConversions#booleanToByte(boolean)::: value conversions boolean to byte:::return->fromBoolean
ValueConversions#toBoolean(byte)::: value conversions to boolean:::return
ValueConversions#fromBoolean(boolean)::: value conversions from boolean:::return
ValueConversions#convertPrimitive(Wrapper, Wrapper)::: value conversions convert primitive:::cache->wsrc->ordinal->mh->cache->get->if->return->src->wsrc->primitiveType->dst->wdst->primitiveType->type->MethodType->methodType->if->MethodHandles->identity->else->try->IMPL_LOOKUP->src->getSimpleName->dst->getSimpleName->capitalize->findStatic->catch->finally->if->return->cache->put->throw->src->getSimpleName->dst->getSimpleName->new->IllegalArgumentException
ValueConversions#convertPrimitive(Class, Class)::: value conversions convert primitive:::return->Wrapper->forPrimitiveType->Wrapper->forPrimitiveType->convertPrimitive
ValueConversions#capitalize(String)::: value conversions capitalize:::return->Character->x->charAt->toUpperCase->x->substring
ValueConversions#newInternalError(String, Throwable)::: value conversions new internal error:::return->new->InternalError
ValueConversions#newInternalError(Throwable)::: value conversions new internal error:::return->new->InternalError
VerifyAccess#isMemberAccessible(Class, Class, int, Class, int):::Evaluate the JVM linkage rules for access to the given method on behalf of a caller class which proposes to perform the access:::if->return->if->isClassAccessible->return->if->return->switch->return->if->isSamePackage->return->if->return->if->isRelatedClass->return->if->isSubClass->return->return->return->isSamePackage->canAccess->Reflection->areNestMates->return->throw->Modifier->toString->new->IllegalArgumentException
VerifyAccess#isRelatedClass(Class, Class)::: verify access is related class:::return->isSubClass->isSubClass
VerifyAccess#isSubClass(Class, Class)::: verify access is sub class:::return->defc->isAssignableFrom->lookupClass->isInterface
VerifyAccess#getClassModifiers(Class)::: verify access get class modifiers:::if->c->isArray->c->isPrimitive->return->c->getModifiers->return->Reflection->getClassAccessFlags
VerifyAccess#isClassAccessible(Class, Class, int):::Evaluate the JVM linkage rules for access to the given class on behalf of caller:::if->return->mods->getClassModifiers->if->isPublic->lookupModule->lookupClass->getModule->refModule->refc->getModule->if->return->if->return->if->lookupModule->canRead->if->if->refModule->refc->getPackageName->isExported->return->else->if->refModule->refc->getPackageName->isExported->return->if->isModuleSystemInited->return->return->if->isSamePackage->return->return
VerifyAccess#isTypeVisible(Class, Class):::Decide if the given method type, attributed to a member or symbolic reference of a given reference class, is really visible to that class.:::if->return->while->type->isArray->type->getComponentType->if->type->isPrimitive->return->typeLoader->type->getClassLoader->refcLoader->refc->getClassLoader->if->return->if->return->if->type->getName->startsWith->return->name->type->getName->res->new->java.security.PrivilegedAction<>->doPrivileged->return
VerifyAccess#isTypeVisible(java.lang.invoke.MethodType, Class):::Decide if the given method type, attributed to a member or symbolic reference of a given reference class, is really visible to that class.:::if->type->returnType->isTypeVisible->return->for->n->max->type->parameterCount->return
VerifyAccess#isSameModule(Class, Class):::Tests if two classes are in the same module.:::return->class1->getModule->class2->getModule
VerifyAccess#isSamePackage(Class, Class):::Test if two classes have the same class loader and package qualifier.:::if->return->if->class1->getClassLoader->class2->getClassLoader->return->return->Objects->class1->getPackageName->class2->getPackageName->equals
VerifyAccess#isSamePackageMember(Class, Class):::Test if two classes are defined as part of the same package member (top-level class):::if->return->if->isSamePackage->return->if->getOutermostEnclosingClass->getOutermostEnclosingClass->return->return
VerifyAccess#getOutermostEnclosingClass(Class)::: verify access get outermost enclosing class:::pkgmem->for->enc->enc->getEnclosingClass->return
VerifyAccess#loadersAreRelated(ClassLoader, ClassLoader, boolean)::: verify access loaders are related:::if->return->for->scan2->scan2->getParent->if->return->for->scan1->scan1->getParent->return
VerifyAccess#classLoaderIsAncestor(Class, Class):::Is the class loader of parentClass identical to, or an ancestor of, the class loader of childClass?:::return->parentClass->getClassLoader->childClass->getClassLoader->loadersAreRelated
VerifyType#isNullConversion(Class, Class, boolean):::True if a value can be stacked as the source type and unstacked as the destination type, without violating the JVM's type consistency:::if->return->if->if->dst->isInterface->if->src->isInterface->if->return->if->isNullType->return->dst->isPrimitive->if->src->isPrimitive->return->dst->isAssignableFrom->if->dst->isPrimitive->return->sw->Wrapper->forPrimitiveType->if->return->sw->isSubwordOrInt->dw->Wrapper->forPrimitiveType->if->sw->isSubwordOrInt->return->if->dw->isSubwordOrInt->return->if->dw->isSigned->sw->isSigned->return->return->dw->bitWidth->sw->bitWidth
VerifyType#isNullReferenceConversion(Class, Class):::Specialization of isNullConversion to reference types.:::if->dst->isInterface->return->if->isNullType->return->return->dst->isAssignableFrom
VerifyType#isNullType(Class):::Is the given type java.lang.Null or an equivalent null-only type?:::if->return->if->return->return
VerifyType#isNullConversion(MethodType, MethodType, boolean):::True if a method handle can receive a call under a slightly different method type, without moving or reformatting any stack elements.:::if->return->len->call->parameterCount->if->recv->parameterCount->return->for->i->return->recv->returnType->call->returnType->isNullConversion
VerifyType#canPassUnchecked(Class, Class):::Determine if the JVM verifier allows a value of type call to be passed to a formal parameter (or return variable) of type recv:::if->return->if->dst->isPrimitive->if->return->if->return->if->src->isPrimitive->return->sw->Wrapper->forPrimitiveType->dw->Wrapper->forPrimitiveType->if->sw->isSubwordOrInt->dw->isSubwordOrInt->if->sw->bitWidth->dw->bitWidth->return->if->dw->isSigned->sw->isSigned->return->return->if->if->return->else->return->else->return->else->if->src->isPrimitive->return->if->isNullReferenceConversion->return->return
VerifyType#isSpreadArgType(Class)::: verify type is spread arg type:::return->spreadArg->isArray
VerifyType#spreadArgElementType(Class, int)::: verify type spread arg element type:::return->spreadArg->getComponentType

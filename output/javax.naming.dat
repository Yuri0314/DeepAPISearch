BinaryRefAddr#getContent():::Retrieves the contents of this address as an Object:::return
BinaryRefAddr#equals(Object):::Determines whether obj is equal to this address:::if->target->if->addrType->compareTo->if->return->if->return->for->i->return->return
BinaryRefAddr#hashCode():::Computes the hash code of this address using its address type and contents:::hash->addrType->hashCode->for->i->return
BinaryRefAddr#toString():::Generates the string representation of this address:::str->new->StringBuilder->str->append->for->i->if->str->append->return->str->toString
Binding#getClassName():::Retrieves the class name of the object bound to the name of this binding:::cname->super->getClassName->if->return->if->return->boundObj->getClass->getName->else->return
Binding#setObject(Object):::Sets the object associated with this binding.:::
CannotProceedException#getEnvironment():::Retrieves the environment that was in effect when this exception was created.:::return
CannotProceedException#setEnvironment(Hashtable):::Sets the environment that will be returned when getEnvironment() is called.:::
CannotProceedException#getRemainingNewName():::Retrieves the "remaining new name" field of this exception, which is used when this exception is thrown during a rename() operation.:::return
CannotProceedException#setRemainingNewName(Name):::Sets the "remaining new name" field of this exception:::if->newName->clone->else
CannotProceedException#getAltName():::Retrieves the altName field of this exception:::return
CannotProceedException#setAltName(Name):::Sets the altName field of this exception.:::
CannotProceedException#getAltNameCtx():::Retrieves the altNameCtx field of this exception:::return
CannotProceedException#setAltNameCtx(Context):::Sets the altNameCtx field of this exception.:::
CompositeName#toString():::Generates the string representation of this composite name:::return->impl->toString
CompositeName#equals(Object):::Determines whether two composite names are equal:::return->impl->equals
CompositeName#hashCode():::Computes the hash code of this composite name:::return->impl->hashCode
CompositeName#compareTo(Object):::Compares this CompositeName with the specified Object for order:::if->throw->new->ClassCastException->return->impl->compareTo
CompositeName#clone():::Generates a copy of this composite name:::return->getAll->new->CompositeName
CompositeName#size():::Retrieves the number of components in this composite name.:::return->impl->size
CompositeName#isEmpty():::Determines whether this composite name is empty:::return->impl->isEmpty
CompositeName#getAll():::Retrieves the components of this composite name as an enumeration of strings:::return->impl->getAll
CompositeName#get(int):::Retrieves a component of this composite name.:::return->impl->get
CompositeName#getPrefix(int):::Creates a composite name whose components consist of a prefix of the components in this composite name:::comps->impl->getPrefix->return->new->CompositeName
CompositeName#getSuffix(int):::Creates a composite name whose components consist of a suffix of the components in this composite name:::comps->impl->getSuffix->return->new->CompositeName
CompositeName#startsWith(Name):::Determines whether a composite name is a prefix of this composite name:::if->return->impl->n->size->n->getAll->startsWith->else->return
CompositeName#endsWith(Name):::Determines whether a composite name is a suffix of this composite name:::if->return->impl->n->size->n->getAll->endsWith->else->return
CompositeName#addAll(Name):::Adds the components of a composite name -- in order -- to the end of this composite name.:::if->impl->suffix->getAll->addAll->return->else->throw->suffix->toString->new->InvalidNameException
CompositeName#addAll(int, Name):::Adds the components of a composite name -- in order -- at a specified position within this composite name:::if->impl->n->getAll->addAll->return->else->throw->n->toString->new->InvalidNameException
CompositeName#add(String):::Adds a single component to the end of this composite name.:::impl->add->return
CompositeName#add(int, String):::Adds a single component at a specified position within this composite name:::impl->add->return
CompositeName#remove(int):::Deletes a component from this composite name:::return->impl->remove
CompoundName#toString():::Generates the string representation of this compound name, using the syntax rules of the compound name:::return->impl->toString
CompoundName#equals(Object):::Determines whether obj is syntactically equal to this compound name:::return->impl->equals
CompoundName#hashCode():::Computes the hash code of this compound name:::return->impl->hashCode
CompoundName#clone():::Creates a copy of this compound name:::return->getAll->new->CompoundName
CompoundName#compareTo(Object):::Compares this CompoundName with the specified Object for order:::if->throw->new->ClassCastException->return->impl->compareTo
CompoundName#size():::Retrieves the number of components in this compound name.:::return->impl->size
CompoundName#isEmpty():::Determines whether this compound name is empty:::return->impl->isEmpty
CompoundName#getAll():::Retrieves the components of this compound name as an enumeration of strings:::return->impl->getAll
CompoundName#get(int):::Retrieves a component of this compound name.:::return->impl->get
CompoundName#getPrefix(int):::Creates a compound name whose components consist of a prefix of the components in this compound name:::comps->impl->getPrefix->return->new->CompoundName
CompoundName#getSuffix(int):::Creates a compound name whose components consist of a suffix of the components in this compound name:::comps->impl->getSuffix->return->new->CompoundName
CompoundName#startsWith(Name):::Determines whether a compound name is a prefix of this compound name:::if->return->impl->n->size->n->getAll->startsWith->else->return
CompoundName#endsWith(Name):::Determines whether a compound name is a suffix of this compound name:::if->return->impl->n->size->n->getAll->endsWith->else->return
CompoundName#addAll(Name):::Adds the components of a compound name -- in order -- to the end of this compound name:::if->impl->suffix->getAll->addAll->return->else->throw->suffix->toString->new->InvalidNameException
CompoundName#addAll(int, Name):::Adds the components of a compound name -- in order -- at a specified position within this compound name:::if->impl->n->getAll->addAll->return->else->throw->n->toString->new->InvalidNameException
CompoundName#add(String):::Adds a single component to the end of this compound name.:::impl->add->return
CompoundName#add(int, String):::Adds a single component at a specified position within this compound name:::impl->add->return
CompoundName#remove(int):::Deletes a component from this compound name:::return->impl->remove
Context#lookup(Name):::Retrieves the named object:::
Context#lookup(String):::Retrieves the named object:::
Context#bind(Name, Object):::Binds a name to an object:::
Context#bind(String, Object):::Binds a name to an object:::
Context#rebind(Name, Object):::Binds a name to an object, overwriting any existing binding:::
Context#rebind(String, Object):::Binds a name to an object, overwriting any existing binding:::
Context#unbind(Name):::Unbinds the named object:::
Context#unbind(String):::Unbinds the named object:::
Context#rename(Name, Name):::Binds a new name to the object bound to an old name, and unbinds the old name:::
Context#rename(String, String):::Binds a new name to the object bound to an old name, and unbinds the old name:::
Context#list(Name):::Enumerates the names bound in the named context, along with the class names of objects bound to them:::
Context#list(String):::Enumerates the names bound in the named context, along with the class names of objects bound to them:::
Context#listBindings(Name):::Enumerates the names bound in the named context, along with the objects bound to them:::
Context#listBindings(String):::Enumerates the names bound in the named context, along with the objects bound to them:::
Context#destroySubcontext(Name):::Destroys the named context and removes it from the namespace:::
Context#destroySubcontext(String):::Destroys the named context and removes it from the namespace:::
Context#createSubcontext(Name):::Creates and binds a new context:::
Context#createSubcontext(String):::Creates and binds a new context:::
Context#lookupLink(Name):::Retrieves the named object, following links except for the terminal atomic component of the name:::
Context#lookupLink(String):::Retrieves the named object, following links except for the terminal atomic component of the name:::
Context#getNameParser(Name):::Retrieves the parser associated with the named context:::
Context#getNameParser(String):::Retrieves the parser associated with the named context:::
Context#composeName(Name, Name):::Composes the name of this context with a name relative to this context:::
Context#composeName(String, String):::Composes the name of this context with a name relative to this context:::
Context#addToEnvironment(String, Object):::Adds a new environment property to the environment of this context:::
Context#removeFromEnvironment(String):::Removes an environment property from the environment of this context:::
Context#getEnvironment():::Retrieves the environment in effect for this context:::
Context#close():::Closes this context:::
Context#getNameInNamespace():::Retrieves the full name of this context within its own namespace:::
InitialContext#init(Hashtable):::Initializes the initial context using the supplied environment:::ResourceManager->getInitialEnvironment->if->myProps->get->getDefaultInitCtx
InitialContext#doLookup(Name):::A static method to retrieve the named object:::return->new->InitialContext->lookup
InitialContext#doLookup(String):::A static method to retrieve the named object:::return->new->InitialContext->lookup
InitialContext#getDefaultInitCtx():::Retrieves the initial context by calling NamingManager.getInitialContext() and cache it in defaultInitCtx:::if->NamingManager->getInitialContext->if->throw->new->NoInitialContextException->return
InitialContext#getURLOrDefaultInitCtx(String):::Retrieves a context for resolving the string name name:::if->NamingManager->hasInitialContextFactoryBuilder->return->getDefaultInitCtx->scheme->getURLScheme->if->ctx->NamingManager->getURLContext->if->return->return->getDefaultInitCtx
InitialContext#getURLOrDefaultInitCtx(Name):::Retrieves a context for resolving name:::if->NamingManager->hasInitialContextFactoryBuilder->return->getDefaultInitCtx->if->name->size->first->name->get->scheme->getURLScheme->if->ctx->NamingManager->getURLContext->if->return->return->getDefaultInitCtx
InitialContext#composeName(String, String):::Composes the name of this context with a name relative to this context:::return
InitialContext#composeName(Name, Name):::Composes the name of this context with a name relative to this context:::return->name->clone
LinkException#getLinkResolvedName():::Retrieves the leading portion of the link name that was resolved successfully.:::return
LinkException#getLinkRemainingName():::Retrieves the remaining unresolved portion of the link name.:::return
LinkException#getLinkResolvedObj():::Retrieves the object to which resolution was successful:::return
LinkException#getLinkExplanation():::Retrieves the explanation associated with the problem encountered when resolving a link.:::return
LinkException#setLinkExplanation(String):::Sets the explanation associated with the problem encountered when resolving a link.:::
LinkException#setLinkResolvedName(Name):::Sets the resolved link name field of this exception:::if->name->clone->else
LinkException#setLinkRemainingName(Name):::Sets the remaining link name field of this exception:::if->name->clone->else
LinkException#setLinkResolvedObj(Object):::Sets the link resolved object field of this exception:::
LinkException#toString():::Generates the string representation of this exception:::return->super->toString
LinkException#toString(boolean):::Generates the string representation of this exception:::if->return->this->toString->return->this->toString
LinkRef#getLinkName():::Retrieves the name of this link.:::if->className->equals->addr->get->if->return->getContent->throw->new->MalformedLinkException
Name#clone():::Generates a new copy of this name:::
Name#compareTo(Object):::Compares this name with another name for order:::
Name#size():::Returns the number of components in this name.:::
Name#isEmpty():::Determines whether this name is empty:::
Name#getAll():::Retrieves the components of this name as an enumeration of strings:::
Name#get(int):::Retrieves a component of this name.:::
Name#getPrefix(int):::Creates a name whose components consist of a prefix of the components of this name:::
Name#getSuffix(int):::Creates a name whose components consist of a suffix of the components in this name:::
Name#startsWith(Name):::Determines whether this name starts with a specified prefix:::
Name#endsWith(Name):::Determines whether this name ends with a specified suffix:::
Name#addAll(Name):::Adds the components of a name -- in order -- to the end of this name.:::
Name#addAll(int, Name):::Adds the components of a name -- in order -- at a specified position within this name:::
Name#add(String):::Adds a single component to the end of this name.:::
Name#add(int, String):::Adds a single component at a specified position within this name:::
Name#remove(int):::Removes a component from this name:::
NameClassPair#getClassName():::Retrieves the class name of the object bound to the name of this binding:::return
NameClassPair#getName():::Retrieves the name of this binding:::return
NameClassPair#setName(String):::Sets the name of this binding.:::
NameClassPair#setClassName(String):::Sets the class name of this binding.:::
NameClassPair#isRelative():::Determines whether the name of this binding is relative to the target context (which is named by the first parameter of the list() method).:::return
NameClassPair#setRelative(boolean):::Sets whether the name of this binding is relative to the target context (which is named by the first parameter of the list() method).:::
NameClassPair#getNameInNamespace():::Retrieves the full name of this binding:::if->throw->new->UnsupportedOperationException->return
NameClassPair#setNameInNamespace(String):::Sets the full name of this binding:::
NameClassPair#toString():::Generates the string representation of this name/class pair:::return->isRelative->getName->getClassName
NameImpl#compareTo(NameImpl):::Compares obj to this NameImpl to determine ordering:::if->return->len1->size->len2->obj->size->n->Math->min->index1->index2->while->comp1->get->comp2->obj->get->if->comp1->trim->comp2->trim->local->if->comp1->compareToIgnoreCase->else->comp1->compareTo->if->return->return
NameParser#parse(String):::Parses a name into its components.:::
NamingEnumeration#next():::Retrieves the next element in the enumeration:::
NamingEnumeration#hasMore():::Determines whether there are any more elements in the enumeration:::
NamingEnumeration#close():::Closes this enumeration:::
NamingException#getResolvedName():::Retrieves the leading portion of the name that was resolved successfully.:::return
NamingException#getRemainingName():::Retrieves the remaining unresolved portion of the name.:::return
NamingException#getResolvedObj():::Retrieves the object to which resolution was successful:::return
NamingException#getExplanation():::Retrieves the explanation associated with this exception.:::return->getMessage
NamingException#setResolvedName(Name):::Sets the resolved name field of this exception:::if->name->clone->else
NamingException#setRemainingName(Name):::Sets the remaining name field of this exception:::if->name->clone->else
NamingException#setResolvedObj(Object):::Sets the resolved object field of this exception.:::
NamingException#appendRemainingComponent(String):::Add name as the last component in remaining name.:::if->try->if->new->CompositeName->remainingName->add->catch->throw->e->toString->new->IllegalArgumentException->finally
NamingException#appendRemainingName(Name):::Add components from 'name' as the last components in remaining name:::if->return->if->try->remainingName->addAll->catch->throw->e->toString->new->IllegalArgumentException->finally->else->name->clone
NamingException#getRootCause():::Retrieves the root cause of this NamingException, if any:::return
NamingException#setRootCause(Throwable):::Records the root cause of this NamingException:::if
NamingException#getCause():::Returns the cause of this exception:::return->getRootCause
NamingException#initCause(Throwable):::Initializes the cause of this exception to the specified value:::super->initCause->setRootCause->return
NamingException#toString():::Generates the string representation of this exception:::answer->super->toString->if->if->return
NamingException#toString(boolean):::Generates the string representation in more detail:::if->return->toString->else->return->toString
RefAddr#getType():::Retrieves the address type of this address.:::return
RefAddr#getContent():::Retrieves the contents of this address.:::
RefAddr#equals(Object):::Determines whether obj is equal to this RefAddr:::if->target->if->addrType->compareTo->thisobj->this->getContent->thatobj->target->getContent->if->return->if->return->thisobj->equals->return
RefAddr#hashCode():::Computes the hash code of this address using its address type and contents:::return->getContent->addrType->hashCode->addrType->hashCode->getContent->hashCode
RefAddr#toString():::Generates the string representation of this address:::str->new->StringBuilder->str->getContent->append->return->str->toString
Reference#getClassName():::Retrieves the class name of the object to which this reference refers.:::return
Reference#getFactoryClassName():::Retrieves the class name of the factory of the object to which this reference refers.:::return
Reference#getFactoryClassLocation():::Retrieves the location of the factory of the object to which this reference refers:::return
Reference#get(String):::Retrieves the first address that has the address type 'addrType':::len->addrs->size->addr->for->i->return
Reference#get(int):::Retrieves the address at index posn.:::return->addrs->elementAt
Reference#getAll():::Retrieves an enumeration of the addresses in this reference:::return->addrs->elements
Reference#size():::Retrieves the number of addresses in this reference.:::return->addrs->size
Reference#add(RefAddr):::Adds an address to the end of the list of addresses.:::addrs->addElement
Reference#add(int, RefAddr):::Adds an address to the list of addresses at index posn:::addrs->insertElementAt
Reference#remove(int):::Deletes the address at index posn from the list of addresses:::r->addrs->elementAt->addrs->removeElementAt->return
Reference#clear():::Deletes all addresses from this reference.:::addrs->setSize
Reference#equals(Object):::Determines whether obj is a reference with the same addresses (in same order) as this reference:::if->target->if->equals->target->size->this->size->mycomps->getAll->comps->target->getAll->while->mycomps->hasMoreElements->if->mycomps->nextElement->comps->nextElement->equals->return->return->return
Reference#hashCode():::Computes the hash code of this reference:::hash->className->hashCode->for->e->getAll->e->hasMoreElements->return
Reference#toString():::Generates the string representation of this reference:::sb->new->StringBuilder->len->addrs->size->for->i->return->sb->toString
Reference#clone():::Makes a copy of this reference using its class name list of addresses, class factory name and class factory location:::r->new->Reference->a->getAll->new->Vector<>->while->a->hasMoreElements->a->nextElement->addElement->return
Referenceable#getReference():::Retrieves the Reference of this object.:::
ReferralException#getReferralInfo():::Retrieves information (such as URLs) related to this referral:::
ReferralException#getReferralContext():::Retrieves the context at which to continue the method:::
ReferralException#getReferralContext(Hashtable):::Retrieves the context at which to continue the method using environment properties:::
ReferralException#skipReferral():::Discards the referral about to be processed:::
ReferralException#retryReferral():::Retries the referral currently being processed:::
StringRefAddr#getContent():::Retrieves the contents of this address:::return

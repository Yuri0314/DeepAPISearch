org.graalvm.compiler.replacements.test.ArrayEqualsConstantLengthTest#testEqualsBoolean()->void::: array equals constant length test test equals boolean
org.graalvm.compiler.replacements.test.ArrayEqualsConstantLengthTest#testEqualsByte()->void::: array equals constant length test test equals byte
org.graalvm.compiler.replacements.test.ArrayEqualsConstantLengthTest#testEqualsChar()->void::: array equals constant length test test equals char
org.graalvm.compiler.replacements.test.ArrayEqualsConstantLengthTest#testEqualsShort()->void::: array equals constant length test test equals short
org.graalvm.compiler.replacements.test.ArrayEqualsConstantLengthTest#testEqualsInt()->void::: array equals constant length test test equals int
org.graalvm.compiler.replacements.test.ArrayEqualsConstantLengthTest#testEqualsLong()->void::: array equals constant length test test equals long
org.graalvm.compiler.replacements.test.ArrayEqualsConstantLengthTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)->GraphBuilderConfiguration::: array equals constant length test edit graph builder configuration
org.graalvm.compiler.replacements.test.ArrayEqualsConstantLengthTest#testSubstitution(String, Class, Class, String, Class[], boolean, boolean, Object[], Object[])->void::: array equals constant length test test substitution
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testEqualsBoolean()->void::: arrays substitutions test test equals boolean
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testEqualsByte()->void::: arrays substitutions test test equals byte
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testEqualsChar()->void::: arrays substitutions test test equals char
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testEqualsShort()->void::: arrays substitutions test test equals short
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testEqualsInt()->void::: arrays substitutions test test equals int
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testEqualsLong()->void::: arrays substitutions test test equals long
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testEqualsNodeGVN()->void::: arrays substitutions test test equals node n
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testEqualsNodeGVNSnippet(boolean)->boolean::: arrays substitutions test test equals node snippet
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testConstants()->void::: arrays substitutions test test constants
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testConstantsSnippet()->boolean::: arrays substitutions test test constants snippet
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testCanonicalLength()->void::: arrays substitutions test test canonical length
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testCanonicalLengthSnippet()->boolean::: arrays substitutions test test canonical length snippet
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testCanonicalEqual()->void::: arrays substitutions test test canonical equal
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testCanonicalEqualSnippet()->boolean::: arrays substitutions test test canonical equal snippet
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testVirtualEqual()->void::: arrays substitutions test test virtual equal
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testVirtualEqualSnippet()->boolean::: arrays substitutions test test virtual equal snippet
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testVirtualNotEqual()->void::: arrays substitutions test test virtual not equal
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTest#testVirtualNotEqualSnippet(int)->boolean::: arrays substitutions test test virtual not equal snippet
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#arraysEqualsBoolean(boolean[], boolean[])->boolean::: arrays substitutions test base arrays equals boolean
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#arraysEqualsByte(byte[], byte[])->boolean::: arrays substitutions test base arrays equals byte
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#arraysEqualsChar(char[], char[])->boolean::: arrays substitutions test base arrays equals char
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#arraysEqualsShort(short[], short[])->boolean::: arrays substitutions test base arrays equals short
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#arraysEqualsInt(int[], int[])->boolean::: arrays substitutions test base arrays equals int
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#arraysEqualsLong(long[], long[])->boolean::: arrays substitutions test base arrays equals long
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase.ArrayBuilder#newArray(int, int, int)->Object::: array builder new array
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#booleanArray(int, int, int)->boolean[]::: arrays substitutions test base boolean array
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#byteArray(int, int, int)->byte[]::: arrays substitutions test base byte array
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#charArray(int, int, int)->char[]::: arrays substitutions test base char array
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#shortArray(int, int, int)->short[]::: arrays substitutions test base short array
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#intArray(int, int, int)->int[]::: arrays substitutions test base int array
org.graalvm.compiler.replacements.test.ArraysSubstitutionsTestBase#longArray(int, int, int)->long[]::: arrays substitutions test base long array
org.graalvm.compiler.replacements.test.ArrayStoreBytecodeExceptionTest#registerInvocationPlugins(InvocationPlugins)->void::: array store bytecode exception test register invocation plugins
org.graalvm.compiler.replacements.test.ArrayStoreBytecodeExceptionTest#arrayStoreSnippet(Object)->void::: array store bytecode exception test array store snippet
org.graalvm.compiler.replacements.test.ArrayStoreBytecodeExceptionTest#data()->Collection::: array store bytecode exception test data
org.graalvm.compiler.replacements.test.ArrayStoreBytecodeExceptionTest#testArrayStoreException()->void::: array store bytecode exception test test array store exception
org.graalvm.compiler.replacements.test.BitOpNodesTest#isBitCountIntrinsicSupported(Architecture)->boolean:::Determines if the current VM context supports intrinsics for the bitCount methods in Integer and Long.
org.graalvm.compiler.replacements.test.BitOpNodesTest#isNumberLeadingZerosIntrinsicSupported(Architecture)->boolean:::Determines if the current VM context supports intrinsics for the numberOfLeadingZeros methods in Integer and Long.
org.graalvm.compiler.replacements.test.BitOpNodesTest#isNumberTrailingZerosIntrinsicSupported(Architecture)->boolean:::Determines if the current VM context supports intrinsics for the numberOfTrailingZeros methods in Integer and Long.
org.graalvm.compiler.replacements.test.BitOpNodesTest#bitCountIntConstantSnippet()->int::: bit op nodes test bit count int constant snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testBitCountIntConstant()->void::: bit op nodes test test bit count int constant
org.graalvm.compiler.replacements.test.BitOpNodesTest#bitCountLongConstantSnippet()->int::: bit op nodes test bit count long constant snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#bitCountIntSnippet(int)->int::: bit op nodes test bit count int snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testBitCountInt()->void::: bit op nodes test test bit count int
org.graalvm.compiler.replacements.test.BitOpNodesTest#bitCountIntEmptySnippet(int)->int::: bit op nodes test bit count int empty snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testBitCountIntEmpty()->void::: bit op nodes test test bit count int empty
org.graalvm.compiler.replacements.test.BitOpNodesTest#testBitCountLongConstant()->void::: bit op nodes test test bit count long constant
org.graalvm.compiler.replacements.test.BitOpNodesTest#bitCountLongSnippet(long)->int::: bit op nodes test bit count long snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testBitCountLong()->void::: bit op nodes test test bit count long
org.graalvm.compiler.replacements.test.BitOpNodesTest#bitCountLongEmptySnippet(long)->int::: bit op nodes test bit count long empty snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testBitCountLongEmpty()->void::: bit op nodes test test bit count long empty
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanForwardIntConstantSnippet()->int::: bit op nodes test scan forward int constant snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanForwardIntConstant()->void::: bit op nodes test test scan forward int constant
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanForwardIntSnippet(int)->int::: bit op nodes test scan forward int snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanForwardInt()->void::: bit op nodes test test scan forward int
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanForwardLongConstantSnippet()->int::: bit op nodes test scan forward long constant snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanForwardLongConstant()->void::: bit op nodes test test scan forward long constant
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanForwardLongSnippet(long)->int::: bit op nodes test scan forward long snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanForwardLong()->void::: bit op nodes test test scan forward long
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanForwardLongEmptySnippet(long)->int::: bit op nodes test scan forward long empty snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanForwardLongEmpty()->void::: bit op nodes test test scan forward long empty
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanReverseIntConstantSnippet()->int::: bit op nodes test scan reverse int constant snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanReverseIntConstant()->void::: bit op nodes test test scan reverse int constant
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanReverseIntSnippet(int)->int::: bit op nodes test scan reverse int snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanReverseInt()->void::: bit op nodes test test scan reverse int
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanReverseLongConstantSnippet()->int::: bit op nodes test scan reverse long constant snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanReverseLongConstant()->void::: bit op nodes test test scan reverse long constant
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanReverseLongSnippet(long)->int::: bit op nodes test scan reverse long snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanReverseLong()->void::: bit op nodes test test scan reverse long
org.graalvm.compiler.replacements.test.BitOpNodesTest#scanReverseLongEmptySnippet(long)->int::: bit op nodes test scan reverse long empty snippet
org.graalvm.compiler.replacements.test.BitOpNodesTest#testScanReverseLongEmpty()->void::: bit op nodes test test scan reverse long empty
org.graalvm.compiler.replacements.test.BytecodeExceptionTest#throwBytecodeException(GraphBuilderContext, BytecodeExceptionKind, ValueNode...)->boolean::: bytecode exception test throw bytecode exception
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#registerInvocationPlugins(InvocationPlugins)->void::: class cast bytecode exception test register invocation plugins
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#data()->Collection::: class cast bytecode exception test data
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#castToDouble(Object)->void::: class cast bytecode exception test cast to double
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#testCastToDouble()->void::: class cast bytecode exception test test cast to double
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#castToByteArray(Object)->void::: class cast bytecode exception test cast to byte array
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#testCastToByteArray()->void::: class cast bytecode exception test test cast to byte array
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#castToStringArray(Object)->void::: class cast bytecode exception test cast to string array
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#testCastToStringArray()->void::: class cast bytecode exception test test cast to string array
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#castToArrayArray(Object)->void::: class cast bytecode exception test cast to array array
org.graalvm.compiler.replacements.test.ClassCastBytecodeExceptionTest#testCastToArrayArray()->void::: class cast bytecode exception test test cast to array array
org.graalvm.compiler.replacements.test.CompiledExceptionHandlerTest#createSuites(OptionValues)->Suites::: compiled exception handler test create suites
org.graalvm.compiler.replacements.test.CompiledExceptionHandlerTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInfo::: compiled exception handler test bytecode parser should inline invoke
org.graalvm.compiler.replacements.test.CompiledExceptionHandlerTest#parse(Builder, PhaseSuite)->StructuredGraph::: compiled exception handler test parse
org.graalvm.compiler.replacements.test.CompiledExceptionHandlerTest#test1()->void::: compiled exception handler test test1
org.graalvm.compiler.replacements.test.CompiledExceptionHandlerTest#test1Snippet(String)->String::: compiled exception handler test test1 snippet
org.graalvm.compiler.replacements.test.CompiledExceptionHandlerTest#test2()->void::: compiled exception handler test test2
org.graalvm.compiler.replacements.test.CompiledExceptionHandlerTest#test2Snippet(String, String, String, String, String)->String::: compiled exception handler test test2 snippet
org.graalvm.compiler.replacements.test.CompiledNullPointerExceptionTest#createSuites(OptionValues)->Suites::: compiled null pointer exception test create suites
org.graalvm.compiler.replacements.test.CompiledNullPointerExceptionTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInfo::: compiled null pointer exception test bytecode parser should inline invoke
org.graalvm.compiler.replacements.test.CompiledNullPointerExceptionTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)->GraphBuilderConfiguration::: compiled null pointer exception test edit graph builder configuration
org.graalvm.compiler.replacements.test.CompiledNullPointerExceptionTest#parse(Builder, PhaseSuite)->StructuredGraph::: compiled null pointer exception test parse
org.graalvm.compiler.replacements.test.CompiledNullPointerExceptionTest#test()->void::: compiled null pointer exception test test
org.graalvm.compiler.replacements.test.CompiledNullPointerExceptionTest#testSnippet(TestClass, Object)->String::: compiled null pointer exception test test snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#test1()->void::: deoptimize on exception test test1
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#test1Snippet(String, String, String, String, String)->String::: deoptimize on exception test test1 snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#test2()->void::: deoptimize on exception test test2
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#test2Snippet()->String::: deoptimize on exception test test2 snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#test3()->void::: deoptimize on exception test test3
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInvokePlugin.InlineInfo::: deoptimize on exception test bytecode parser should inline invoke
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#test3Snippet(boolean)->boolean::: deoptimize on exception test test3 snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest.MyClassLoader#findClass(String)->Class::: my class loader find class
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#methodB()->void::: deoptimize on exception test method b
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#methodA()->void::: deoptimize on exception test method a
org.graalvm.compiler.replacements.test.DeoptimizeOnExceptionTest#getM()->Object::: deoptimize on exception test get m
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testAddExactSnippet(int, int)->int::: deoptimize on integer exact test test add exact snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testSubtractExactSnippet(int, int)->int::: deoptimize on integer exact test test subtract exact snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testMultiplyExactSnippet(int, int)->int::: deoptimize on integer exact test test multiply exact snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testIncrementExactSnippet(int, int)->int::: deoptimize on integer exact test test increment exact snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testDecrementExactSnippet(int, int)->int::: deoptimize on integer exact test test decrement exact snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testAgainIfDeopt(String, int, int)->void::: deoptimize on integer exact test test again if deopt
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testAddExact()->void::: deoptimize on integer exact test test add exact
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testSubtractExact()->void::: deoptimize on integer exact test test subtract exact
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testMultiplyExact()->void::: deoptimize on integer exact test test multiply exact
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testIncrementExact()->void::: deoptimize on integer exact test test increment exact
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#testDecrementExact()->void::: deoptimize on integer exact test test decrement exact
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#getSpeculationLog()->SpeculationLog::: deoptimize on integer exact test get speculation log
org.graalvm.compiler.replacements.test.DeoptimizeOnIntegerExactTest#addMethod(DebugContext, ResolvedJavaMethod, CompilationResult)->InstalledCode::: deoptimize on integer exact test add method
org.graalvm.compiler.replacements.test.DeoptimizeOnVolatileReadTest#test1Snippet(Dummy)->int::: deoptimize on volatile read test test1 snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnVolatileReadTest#test1()->void::: deoptimize on volatile read test test1
org.graalvm.compiler.replacements.test.DeoptimizeOnVolatileReadTest#test2Snippet(Dummy)->int::: deoptimize on volatile read test test2 snippet
org.graalvm.compiler.replacements.test.DeoptimizeOnVolatileReadTest#test2()->void::: deoptimize on volatile read test test2
org.graalvm.compiler.replacements.test.DerivedOopTest#testFieldOffset()->void::: derived oop test test field offset
org.graalvm.compiler.replacements.test.DerivedOopTest#getRawPointer(Object)->long::: derived oop test get raw pointer
org.graalvm.compiler.replacements.test.DerivedOopTest#getRawPointerIntrinsic(Object)->long::: derived oop test get raw pointer intrinsic
org.graalvm.compiler.replacements.test.DerivedOopTest#fieldOffsetSnippet(Result, long)->Result::: derived oop test field offset snippet
org.graalvm.compiler.replacements.test.DerivedOopTest#testFieldOffsetMergeNonLiveBasePointer()->void::: derived oop test test field offset merge non live base pointer
org.graalvm.compiler.replacements.test.DerivedOopTest#testFieldOffsetMergeNonLiveBasePointerNotAccrossSafepoint()->void::: derived oop test test field offset merge non live base pointer not accross safepoint
org.graalvm.compiler.replacements.test.DerivedOopTest#testFieldOffsetMergeLiveBasePointer()->void::: derived oop test test field offset merge live base pointer
org.graalvm.compiler.replacements.test.DerivedOopTest#fieldOffsetMergeSnippet01(Result, long, long)->Result::: derived oop test field offset merge snippet01
org.graalvm.compiler.replacements.test.DerivedOopTest#fieldOffsetMergeSnippet02(Result, long, long)->Result::: derived oop test field offset merge snippet02
org.graalvm.compiler.replacements.test.DerivedOopTest#fieldOffsetMergeSnippet03(Result, Result, Result, long, long)->Result::: derived oop test field offset merge snippet03
org.graalvm.compiler.replacements.test.DerivedOopTest#registerInvocationPlugins(InvocationPlugins)->void::: derived oop test register invocation plugins
org.graalvm.compiler.replacements.test.DerivedOopTest#checkHighTierGraph(StructuredGraph)->void::: derived oop test check high tier graph
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#test1()->void::: dynamic new array test test1
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#test2()->void::: dynamic new array test test2
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#test3()->void::: dynamic new array test test3
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#test4()->void::: dynamic new array test test4
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#test5()->void::: dynamic new array test test5
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#test6()->void::: dynamic new array test test6
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#test7()->void::: dynamic new array test test7
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#testStub()->void::: dynamic new array test test stub
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#test1snippet()->Object::: dynamic new array test test1snippet
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#test2snippet()->Object::: dynamic new array test test2snippet
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#dynamic(Class, int)->Object::: dynamic new array test dynamic
org.graalvm.compiler.replacements.test.DynamicNewArrayTest#dynamicSynchronized(Class, int)->Object::: dynamic new array test dynamic synchronized
org.graalvm.compiler.replacements.test.EdgesTest#createGraph()->StructuredGraph::: edges test create graph
org.graalvm.compiler.replacements.test.EdgesTest#test0()->void:::Checks that there are no checkcasts in the compiled version of Edges#getNode(Node, long[], int).
org.graalvm.compiler.replacements.test.EdgesTest#test1()->void:::Checks that there are no checkcasts in the compiled version of Edges#getNodeList(Node, long[], int).
org.graalvm.compiler.replacements.test.EdgesTest#test2()->void:::Checks that there are no checkcasts in the compiled version of Edges#setNode(Node, int, Node).
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testFloatArraySnippet(float[], float[])->boolean::: float arrays equals test test float array snippet
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testFloatArray()->void::: float arrays equals test test float array
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testDoubleArraySnippet(double[], double[])->boolean::: float arrays equals test test double array snippet
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testDoubleArrayOrdinary()->void::: float arrays equals test test double array ordinary
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testFloatArrayWithPEASnippet0()->boolean::: float arrays equals test test float array with snippet0
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testFloatArrayWithPEASnippet1()->boolean::: float arrays equals test test float array with snippet1
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testFloatArrayWithPEASnippet2()->boolean::: float arrays equals test test float array with snippet2
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testFloatArrayWithPEA()->void::: float arrays equals test test float array with a
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testDoubleArrayWithPEASnippet0()->boolean::: float arrays equals test test double array with snippet0
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testDoubleArrayWithPEASnippet1()->boolean::: float arrays equals test test double array with snippet1
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testDoubleArrayWithPEASnippet2()->boolean::: float arrays equals test test double array with snippet2
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testDoubleArrayWithPEA()->void::: float arrays equals test test double array with a
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testStableFloatArraySnippet0()->boolean::: float arrays equals test test stable float array snippet0
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testStableFloatArraySnippet1()->boolean::: float arrays equals test test stable float array snippet1
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testStableDoubleArraySnippet0()->boolean::: float arrays equals test test stable double array snippet0
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testStableDoubleArraySnippet1()->boolean::: float arrays equals test test stable double array snippet1
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testStableArray(String)->void::: float arrays equals test test stable array
org.graalvm.compiler.replacements.test.FloatArraysEqualsTest#testStableArray()->void::: float arrays equals test test stable array
org.graalvm.compiler.replacements.test.FoldTest.FoldUtils#multiply(int, int)->int::: fold utils multiply
org.graalvm.compiler.replacements.test.FoldTest.FoldUtils#getNumber()->int::: fold utils get number
org.graalvm.compiler.replacements.test.FoldTest#registerInvocationPlugins(InvocationPlugins)->void::: fold test register invocation plugins
org.graalvm.compiler.replacements.test.FoldTest#callTest()->int::: fold test call test
org.graalvm.compiler.replacements.test.FoldTest#checkHighTierGraph(StructuredGraph)->void::: fold test check high tier graph
org.graalvm.compiler.replacements.test.FoldTest#snippetTest()->void::: fold test snippet test
org.graalvm.compiler.replacements.test.IndexOobBytecodeExceptionTest#registerInvocationPlugins(InvocationPlugins)->void::: index oob bytecode exception test register invocation plugins
org.graalvm.compiler.replacements.test.IndexOobBytecodeExceptionTest#oobSnippet(int, int)->void::: index oob bytecode exception test oob snippet
org.graalvm.compiler.replacements.test.IndexOobBytecodeExceptionTest#data()->Collection::: index oob bytecode exception test data
org.graalvm.compiler.replacements.test.IndexOobBytecodeExceptionTest#testOutOfBoundsException()->void::: index oob bytecode exception test test out of bounds exception
org.graalvm.compiler.replacements.test.InstanceOfDynamicTest#id(int)->int::: instance of dynamic test id
org.graalvm.compiler.replacements.test.InstanceOfDynamicTest#test100()->void::: instance of dynamic test test100
org.graalvm.compiler.replacements.test.InstanceOfDynamicTest#test101()->void::: instance of dynamic test test101
org.graalvm.compiler.replacements.test.InstanceOfDynamicTest#test103()->void::: instance of dynamic test test103
org.graalvm.compiler.replacements.test.InstanceOfDynamicTest#test104()->void::: instance of dynamic test test104
org.graalvm.compiler.replacements.test.InstanceOfDynamicTest#isStringDynamic(Object)->boolean::: instance of dynamic test is string dynamic
org.graalvm.compiler.replacements.test.InstanceOfDynamicTest#isStringIntDynamic(Object)->int::: instance of dynamic test is string int dynamic
org.graalvm.compiler.replacements.test.InstanceOfDynamicTest#isInstanceDynamic(Class, Object)->boolean::: instance of dynamic test is instance dynamic
org.graalvm.compiler.replacements.test.InstanceOfDynamicTest#isInstanceIntDynamic(Class, Object)->int::: instance of dynamic test is instance int dynamic
org.graalvm.compiler.replacements.test.InstanceOfTest#replaceProfile(StructuredGraph, JavaTypeProfile)->void::: instance of test replace profile
org.graalvm.compiler.replacements.test.InstanceOfTest#test1()->void::: instance of test test1
org.graalvm.compiler.replacements.test.InstanceOfTest#test2()->void::: instance of test test2
org.graalvm.compiler.replacements.test.InstanceOfTest#test201()->void::: instance of test test201
org.graalvm.compiler.replacements.test.InstanceOfTest#test3()->void::: instance of test test3
org.graalvm.compiler.replacements.test.InstanceOfTest#test301()->void::: instance of test test301
org.graalvm.compiler.replacements.test.InstanceOfTest#test4()->void::: instance of test test4
org.graalvm.compiler.replacements.test.InstanceOfTest#test5()->void::: instance of test test5
org.graalvm.compiler.replacements.test.InstanceOfTest#test6()->void::: instance of test test6
org.graalvm.compiler.replacements.test.InstanceOfTest#test7()->void::: instance of test test7
org.graalvm.compiler.replacements.test.InstanceOfTest#test8()->void::: instance of test test8
org.graalvm.compiler.replacements.test.InstanceOfTest#isString(Object)->boolean::: instance of test is string
org.graalvm.compiler.replacements.test.InstanceOfTest#isStringInt(Object)->int::: instance of test is string int
org.graalvm.compiler.replacements.test.InstanceOfTest#isStringIntComplex(Object)->int::: instance of test is string int complex
org.graalvm.compiler.replacements.test.InstanceOfTest#id(int)->int::: instance of test id
org.graalvm.compiler.replacements.test.InstanceOfTest#isThrowable(Object)->boolean::: instance of test is throwable
org.graalvm.compiler.replacements.test.InstanceOfTest#onlyFirstIsException(Throwable, Throwable)->int::: instance of test only first is exception
org.graalvm.compiler.replacements.test.InstanceOfTest#isThrowableInt(Object)->int::: instance of test is throwable int
org.graalvm.compiler.replacements.test.InstanceOfTest#isMap(Object)->boolean::: instance of test is map
org.graalvm.compiler.replacements.test.InstanceOfTest#isMapInt(Object)->int::: instance of test is map int
org.graalvm.compiler.replacements.test.InstanceOfTest#isDepth12(Object)->boolean::: instance of test is depth12
org.graalvm.compiler.replacements.test.InstanceOfTest#isDepth12Int(Object)->int::: instance of test is depth12 int
org.graalvm.compiler.replacements.test.InstanceOfTest#test9()->void::: instance of test test9
org.graalvm.compiler.replacements.test.InstanceOfTest#compareMySites(MySite, MySite)->int::: instance of test compare my sites
org.graalvm.compiler.replacements.test.InstanceOfTest#test10()->void::: instance of test test10
org.graalvm.compiler.replacements.test.InstanceOfTest#compareSites(Site, Site)->int::: instance of test compare sites
org.graalvm.compiler.replacements.test.InstanceOfTest#testRemoveIntermediateMaterialization()->void:::This test exists to show the kind of pattern that is be optimizable by removeIntermediateMaterialization() in IfNode
org.graalvm.compiler.replacements.test.InstanceOfTest#removeIntermediateMaterialization(List, Object, String, String)->String::: instance of test remove intermediate materialization
org.graalvm.compiler.replacements.test.InstanceOfTest#isArrayOfA(Object)->boolean::: instance of test is array of a
org.graalvm.compiler.replacements.test.InstanceOfTest#isArrayOfB(Object)->boolean::: instance of test is array of b
org.graalvm.compiler.replacements.test.InstanceOfTest#isArrayOfC(Object)->boolean::: instance of test is array of c
org.graalvm.compiler.replacements.test.InstanceOfTest#isArrayOfD(Object)->boolean::: instance of test is array of d
org.graalvm.compiler.replacements.test.InstanceOfTest#testArray()->void::: instance of test test array
org.graalvm.compiler.replacements.test.InstanceOfTest#arrayCopyTypeName(T[])->String::: instance of test array copy type name
org.graalvm.compiler.replacements.test.InstanceOfTest#testArrayCopy()->void::: instance of test test array copy
org.graalvm.compiler.replacements.test.InstanceOfTest#conditionalInstantiation(Object)->int::: instance of test conditional instantiation
org.graalvm.compiler.replacements.test.InstanceOfTest#testInstantiation()->void::: instance of test test instantiation
org.graalvm.compiler.replacements.test.InstanceOfTest#exactlyObject(Thread)->boolean::: instance of test exactly object
org.graalvm.compiler.replacements.test.InstanceOfTest#exactlyObjectArray(Thread[])->boolean::: instance of test exactly object array
org.graalvm.compiler.replacements.test.InstanceOfTest#exactlyString(Thread)->boolean::: instance of test exactly string
org.graalvm.compiler.replacements.test.InstanceOfTest#exactlyStringArray(Thread[])->boolean::: instance of test exactly string array
org.graalvm.compiler.replacements.test.InstanceOfTest#instanceofStringArray(Thread[])->boolean::: instance of test instanceof string array
org.graalvm.compiler.replacements.test.InstanceOfTest#instanceofString(Thread)->boolean::: instance of test instanceof string
org.graalvm.compiler.replacements.test.InstanceOfTest#testTypeCheck()->void::: instance of test test type check
org.graalvm.compiler.replacements.test.InstanceOfTest#buildGraph(String)->StructuredGraph::: instance of test build graph
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExactOverflowSnippet(int)->void::: integer exact exception test test integer exact overflow snippet
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExact()->void::: integer exact exception test test integer exact
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExactOverflowWithoutHandlerSnippetW(int)->void::: integer exact exception test test integer exact overflow without handler snippet w
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExactWithoutHandler()->void::: integer exact exception test test integer exact without handler
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExactOverflowWithoutUse1(int)->void::: integer exact exception test test integer exact overflow without use1
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExactOverflowWithoutUse2(int, boolean)->void::: integer exact exception test test integer exact overflow without use2
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExactOverflowWithoutUse3()->void::: integer exact exception test test integer exact overflow without use3
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExactWithoutUse1()->void::: integer exact exception test test integer exact without use1
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExactWithoutUse2()->void::: integer exact exception test test integer exact without use2
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testIntegerExactWithoutUse3()->void::: integer exact exception test test integer exact without use3
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testLongExactOverflowSnippet(long)->void::: integer exact exception test test long exact overflow snippet
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testLongExact()->void::: integer exact exception test test long exact
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testLongExactWithoutHandlerSnippet(long)->void::: integer exact exception test test long exact without handler snippet
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testLongExactWithoutHandler()->void::: integer exact exception test test long exact without handler
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testLongExactOverflowWithoutUse1(long)->void::: integer exact exception test test long exact overflow without use1
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testLongExactOverflowWithoutUse2(long, boolean)->void::: integer exact exception test test long exact overflow without use2
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testLongExactWithoutUse1()->void::: integer exact exception test test long exact without use1
org.graalvm.compiler.replacements.test.IntegerExactExceptionTest#testLongExactWithoutUse2()->void::: integer exact exception test test long exact without use2
org.graalvm.compiler.replacements.test.IntegerExactFoldTest#testFolding()->void::: integer exact fold test test folding
org.graalvm.compiler.replacements.test.IntegerExactFoldTest#testFoldingAfterLowering()->void::: integer exact fold test test folding after lowering
org.graalvm.compiler.replacements.test.IntegerExactFoldTest#prepareGraph()->StructuredGraph::: integer exact fold test prepare graph
org.graalvm.compiler.replacements.test.IntegerExactFoldTest#data()->Collection::: integer exact fold test data
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck()->void::: integer sub overflows test test overflow check
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck01()->void::: integer sub overflows test test overflow check01
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck02()->void::: integer sub overflows test test overflow check02
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck03()->void::: integer sub overflows test test overflow check03
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck04()->void::: integer sub overflows test test overflow check04
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck05()->void::: integer sub overflows test test overflow check05
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck06()->void::: integer sub overflows test test overflow check06
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck07()->void::: integer sub overflows test test overflow check07
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck08()->void::: integer sub overflows test test overflow check08
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck09()->void::: integer sub overflows test test overflow check09
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck10()->void::: integer sub overflows test test overflow check10
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheck11()->void::: integer sub overflows test test overflow check11
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp()->void::: integer sub overflows test test overflow check stamp
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp01()->void::: integer sub overflows test test overflow check stamp01
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp02()->void::: integer sub overflows test test overflow check stamp02
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp03()->void::: integer sub overflows test test overflow check stamp03
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp04()->void::: integer sub overflows test test overflow check stamp04
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp05()->void::: integer sub overflows test test overflow check stamp05
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp06()->void::: integer sub overflows test test overflow check stamp06
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp07()->void::: integer sub overflows test test overflow check stamp07
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp08()->void::: integer sub overflows test test overflow check stamp08
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp09()->void::: integer sub overflows test test overflow check stamp09
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp10()->void::: integer sub overflows test test overflow check stamp10
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowCheckStamp11()->void::: integer sub overflows test test overflow check stamp11
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowBIgStamps01()->void::: integer sub overflows test test overflow ig stamps01
org.graalvm.compiler.replacements.test.IntegerSubOverflowsTest#testOverflowBIgStamps02()->void::: integer sub overflows test test overflow ig stamps02
org.graalvm.compiler.replacements.test.InvokerSignatureMismatchTest#test()->void::: invoker signature mismatch test test
org.graalvm.compiler.replacements.test.TestISMBL#main(String[])->void::: test l main
org.graalvm.compiler.replacements.test.TestISMBL#getClass(String)->Class::: test l get class
org.graalvm.compiler.replacements.test.TestISMBL#generateClass(String)->byte[]::: test l generate class
org.graalvm.compiler.replacements.test.InvokeTest.I#virtualMethod(String)->String::: i virtual method
org.graalvm.compiler.replacements.test.InvokeTest.A#virtualMethod(String)->String::: a virtual method
org.graalvm.compiler.replacements.test.InvokeTest#test1()->void::: invoke test test1
org.graalvm.compiler.replacements.test.InvokeTest#invokestatic(String)->String::: invoke test invokestatic
org.graalvm.compiler.replacements.test.InvokeTest#staticMethod(String)->String::: invoke test static method
org.graalvm.compiler.replacements.test.InvokeTest#invokespecialConstructor(String)->String::: invoke test invokespecial constructor
org.graalvm.compiler.replacements.test.InvokeTest#invokespecial(InvokeTest, String)->String::: invoke test invokespecial
org.graalvm.compiler.replacements.test.InvokeTest#invokevirtual(A, String)->String::: invoke test invokevirtual
org.graalvm.compiler.replacements.test.InvokeTest#invokevirtual2(A, String)->String::: invoke test invokevirtual2
org.graalvm.compiler.replacements.test.InvokeTest#invokeinterface(I, String)->String::: invoke test invokeinterface
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#testGraph(String)->StructuredGraph::: method substitution test test graph
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#testGraph(String, boolean)->StructuredGraph::: method substitution test test graph
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#testGraph(String, String)->StructuredGraph::: method substitution test test graph
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#testGraph(String, String, boolean)->StructuredGraph::: method substitution test test graph
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#testGraph(ResolvedJavaMethod, String, boolean)->StructuredGraph::: method substitution test test graph
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#assertNotInGraph(StructuredGraph, Class)->StructuredGraph::: method substitution test assert not in graph
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#testSubstitution(String, Class, Class, String, Class[], boolean, boolean, Object[], Object[])->void::: method substitution test test substitution
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#assertInGraph(StructuredGraph, Class)->StructuredGraph::: method substitution test assert in graph
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#executeVarargsSafe(InstalledCode, Object...)->Object::: method substitution test execute varargs safe
org.graalvm.compiler.replacements.test.MethodSubstitutionTest#invokeSafe(ResolvedJavaMethod, Object, Object...)->Object::: method substitution test invoke safe
org.graalvm.compiler.replacements.test.MonitorTest#test0()->void::: monitor test test0
org.graalvm.compiler.replacements.test.MonitorTest#test01()->void::: monitor test test01
org.graalvm.compiler.replacements.test.MonitorTest#test02()->void::: monitor test test02
org.graalvm.compiler.replacements.test.MonitorTest#test101()->void::: monitor test test101
org.graalvm.compiler.replacements.test.MonitorTest#test102()->void::: monitor test test102
org.graalvm.compiler.replacements.test.MonitorTest#test2()->void::: monitor test test2
org.graalvm.compiler.replacements.test.MonitorTest#test3()->void:::Tests monitor operations on PartialEscapePhase virtual objects.
org.graalvm.compiler.replacements.test.MonitorTest#test4()->void:::Tests recursive locking of objects which should be biasable.
org.graalvm.compiler.replacements.test.MonitorTest#test5()->void:::Tests recursive locking of objects which do not appear to be biasable.
org.graalvm.compiler.replacements.test.MonitorTest#test6()->void:::Extends #test4() with contention.
org.graalvm.compiler.replacements.test.MonitorTest#test7()->void:::Extends #test5() with contention.
org.graalvm.compiler.replacements.test.MonitorTest#lockObjectSimple(Object, Object)->Object::: monitor test lock object simple
org.graalvm.compiler.replacements.test.MonitorTest#lockThisSimple(String, Object)->String::: monitor test lock this simple
org.graalvm.compiler.replacements.test.MonitorTest#lockObject(Object, String, String[])->String::: monitor test lock object
org.graalvm.compiler.replacements.test.MonitorTest#lockThis(String, String[])->String::: monitor test lock this
org.graalvm.compiler.replacements.test.MonitorTest#lockLocalObject(String, String[])->String::: monitor test lock local object
org.graalvm.compiler.replacements.test.MonitorTest#copyObj(Chars, Chars, int)->String::: monitor test copy obj
org.graalvm.compiler.replacements.test.MonitorTest#copyArr(char[], char[], int)->String::: monitor test copy arr
org.graalvm.compiler.replacements.test.MonitorTest#lockBoxedLong(long)->String::: monitor test lock boxed long
org.graalvm.compiler.replacements.test.MonitorTest#test8()->void:::Reproduces issue reported in https://github.com/graalvm/graal-core/issues/201
org.graalvm.compiler.replacements.test.NestedExceptionHandlerTest#foo()->void::: nested exception handler test foo
org.graalvm.compiler.replacements.test.NestedExceptionHandlerTest#bar()->void::: nested exception handler test bar
org.graalvm.compiler.replacements.test.NestedExceptionHandlerTest#nestedExceptionHandler()->int::: nested exception handler test nested exception handler
org.graalvm.compiler.replacements.test.NestedExceptionHandlerTest#testNestedExceptionHandler()->void::: nested exception handler test test nested exception handler
org.graalvm.compiler.replacements.test.NestedExceptionHandlerTest#snippet1()->String::: nested exception handler test snippet1
org.graalvm.compiler.replacements.test.NestedExceptionHandlerTest#raise()->void::: nested exception handler test raise
org.graalvm.compiler.replacements.test.NestedExceptionHandlerTest#snippet2()->String::: nested exception handler test snippet2
org.graalvm.compiler.replacements.test.NestedExceptionHandlerTest#testSnippet1()->void::: nested exception handler test test snippet1
org.graalvm.compiler.replacements.test.NestedExceptionHandlerTest#testSnippet2()->void::: nested exception handler test test snippet2
org.graalvm.compiler.replacements.test.NewArrayTest#assertDeepEquals(Object, Object)->void::: new array test assert deep equals
org.graalvm.compiler.replacements.test.NewArrayTest#test1()->void::: new array test test1
org.graalvm.compiler.replacements.test.NewArrayTest#newCharArray7()->Object::: new array test new char array7
org.graalvm.compiler.replacements.test.NewArrayTest#newCharArrayMinus7()->Object::: new array test new char array minus7
org.graalvm.compiler.replacements.test.NewArrayTest#newCharArray(int)->Object::: new array test new char array
org.graalvm.compiler.replacements.test.NewArrayTest#newShortArray7()->Object::: new array test new short array7
org.graalvm.compiler.replacements.test.NewArrayTest#newShortArrayMinus7()->Object::: new array test new short array minus7
org.graalvm.compiler.replacements.test.NewArrayTest#newShortArray(int)->Object::: new array test new short array
org.graalvm.compiler.replacements.test.NewArrayTest#newFloatArray7()->Object::: new array test new float array7
org.graalvm.compiler.replacements.test.NewArrayTest#newFloatArrayMinus7()->Object::: new array test new float array minus7
org.graalvm.compiler.replacements.test.NewArrayTest#newFloatArray(int)->Object::: new array test new float array
org.graalvm.compiler.replacements.test.NewArrayTest#newLongArray7()->Object::: new array test new long array7
org.graalvm.compiler.replacements.test.NewArrayTest#newLongArrayMinus7()->Object::: new array test new long array minus7
org.graalvm.compiler.replacements.test.NewArrayTest#newLongArray(int)->Object::: new array test new long array
org.graalvm.compiler.replacements.test.NewArrayTest#newDoubleArray7()->Object::: new array test new double array7
org.graalvm.compiler.replacements.test.NewArrayTest#newDoubleArrayMinus7()->Object::: new array test new double array minus7
org.graalvm.compiler.replacements.test.NewArrayTest#newDoubleArray(int)->Object::: new array test new double array
org.graalvm.compiler.replacements.test.NewArrayTest#newIntArray7()->Object::: new array test new int array7
org.graalvm.compiler.replacements.test.NewArrayTest#newIntArrayMinus7()->Object::: new array test new int array minus7
org.graalvm.compiler.replacements.test.NewArrayTest#newIntArray(int)->Object::: new array test new int array
org.graalvm.compiler.replacements.test.NewArrayTest#newByteArray7()->Object::: new array test new byte array7
org.graalvm.compiler.replacements.test.NewArrayTest#newByteArrayMinus7()->Object::: new array test new byte array minus7
org.graalvm.compiler.replacements.test.NewArrayTest#newByteArray(int)->Object::: new array test new byte array
org.graalvm.compiler.replacements.test.NewArrayTest#newStringArray7()->Object::: new array test new string array7
org.graalvm.compiler.replacements.test.NewArrayTest#newStringArrayMinus7()->Object::: new array test new string array minus7
org.graalvm.compiler.replacements.test.NewArrayTest#newStringArray(int)->Object::: new array test new string array
org.graalvm.compiler.replacements.test.NewInstanceTest#assertDeepEquals(Object, Object)->void::: new instance test assert deep equals
org.graalvm.compiler.replacements.test.NewInstanceTest#test1()->void::: new instance test test1
org.graalvm.compiler.replacements.test.NewInstanceTest#test2()->void::: new instance test test2
org.graalvm.compiler.replacements.test.NewInstanceTest#newObject()->Object::: new instance test new object
org.graalvm.compiler.replacements.test.NewInstanceTest#test3()->void::: new instance test test3
org.graalvm.compiler.replacements.test.NewInstanceTest#test4()->void::: new instance test test4
org.graalvm.compiler.replacements.test.NewInstanceTest#test5()->void::: new instance test test5
org.graalvm.compiler.replacements.test.NewInstanceTest#test6()->void::: new instance test test6
org.graalvm.compiler.replacements.test.NewInstanceTest#test7()->void::: new instance test test7
org.graalvm.compiler.replacements.test.NewInstanceTest#test8()->void::: new instance test test8
org.graalvm.compiler.replacements.test.NewInstanceTest#test9()->void::: new instance test test9
org.graalvm.compiler.replacements.test.NewInstanceTest#newObjectTwice()->Object[]::: new instance test new object twice
org.graalvm.compiler.replacements.test.NewInstanceTest#newObjectLoop(int)->Object[]::: new instance test new object loop
org.graalvm.compiler.replacements.test.NewInstanceTest#newBigObject()->BigObject::: new instance test new big object
org.graalvm.compiler.replacements.test.NewInstanceTest#newSomeObject()->SomeObject::: new instance test new some object
org.graalvm.compiler.replacements.test.NewInstanceTest#newEmptyString()->String::: new instance test new empty string
org.graalvm.compiler.replacements.test.NewInstanceTest#newString(String)->String::: new instance test new string
org.graalvm.compiler.replacements.test.NewInstanceTest#newHashMap(int)->HashMap::: new instance test new hash map
org.graalvm.compiler.replacements.test.NewInstanceTest.SomeObject#equals(Object)->boolean::: some object equals
org.graalvm.compiler.replacements.test.NewInstanceTest.SomeObject#hashCode()->int::: some object hash code
org.graalvm.compiler.replacements.test.NewInstanceTest#newRegression(boolean)->Object:::Tests that an earlier bug does not occur
org.graalvm.compiler.replacements.test.NewMultiArrayTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)->InstalledCode::: new multi array test get code
org.graalvm.compiler.replacements.test.NewMultiArrayTest#referenceInvoke(ResolvedJavaMethod, Object, Object...)->Object::: new multi array test reference invoke
org.graalvm.compiler.replacements.test.NewMultiArrayTest#test1()->void::: new multi array test test1
org.graalvm.compiler.replacements.test.NewMultiArrayTest#newMultiArray()->Object::: new multi array test new multi array
org.graalvm.compiler.replacements.test.NewMultiArrayTest#test2()->void::: new multi array test test2
org.graalvm.compiler.replacements.test.NewMultiArrayTest#newMultiArrayException()->Object::: new multi array test new multi array exception
org.graalvm.compiler.replacements.test.NullBytecodeExceptionTest#registerInvocationPlugins(InvocationPlugins)->void::: null bytecode exception test register invocation plugins
org.graalvm.compiler.replacements.test.NullBytecodeExceptionTest#nullSnippet()->void::: null bytecode exception test null snippet
org.graalvm.compiler.replacements.test.NullBytecodeExceptionTest#testNullPointerException()->void::: null bytecode exception test test null pointer exception
org.graalvm.compiler.replacements.test.ObjectAccessTest#testRead1()->void::: object access test test read1
org.graalvm.compiler.replacements.test.ObjectAccessTest#testRead2()->void::: object access test test read2
org.graalvm.compiler.replacements.test.ObjectAccessTest#testRead3()->void::: object access test test read3
org.graalvm.compiler.replacements.test.ObjectAccessTest#testWrite1()->void::: object access test test write1
org.graalvm.compiler.replacements.test.ObjectAccessTest#testWrite2()->void::: object access test test write2
org.graalvm.compiler.replacements.test.ObjectAccessTest#testWrite3()->void::: object access test test write3
org.graalvm.compiler.replacements.test.ObjectAccessTest#readByte1(Object, int)->byte::: object access test read byte1
org.graalvm.compiler.replacements.test.ObjectAccessTest#readByte2(Object, int)->byte::: object access test read byte2
org.graalvm.compiler.replacements.test.ObjectAccessTest#readByte3(Object, int)->byte::: object access test read byte3
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeByte1(Object, int, byte)->void::: object access test write byte1
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeByte2(Object, int, byte)->void::: object access test write byte2
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeByte3(Object, int, byte)->void::: object access test write byte3
org.graalvm.compiler.replacements.test.ObjectAccessTest#readChar1(Object, int)->char::: object access test read char1
org.graalvm.compiler.replacements.test.ObjectAccessTest#readChar2(Object, int)->char::: object access test read char2
org.graalvm.compiler.replacements.test.ObjectAccessTest#readChar3(Object, int)->char::: object access test read char3
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeChar1(Object, int, char)->void::: object access test write char1
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeChar2(Object, int, char)->void::: object access test write char2
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeChar3(Object, int, char)->void::: object access test write char3
org.graalvm.compiler.replacements.test.ObjectAccessTest#readShort1(Object, int)->short::: object access test read short1
org.graalvm.compiler.replacements.test.ObjectAccessTest#readShort2(Object, int)->short::: object access test read short2
org.graalvm.compiler.replacements.test.ObjectAccessTest#readShort3(Object, int)->short::: object access test read short3
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeShort1(Object, int, short)->void::: object access test write short1
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeShort2(Object, int, short)->void::: object access test write short2
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeShort3(Object, int, short)->void::: object access test write short3
org.graalvm.compiler.replacements.test.ObjectAccessTest#readInt1(Object, int)->int::: object access test read int1
org.graalvm.compiler.replacements.test.ObjectAccessTest#readInt2(Object, int)->int::: object access test read int2
org.graalvm.compiler.replacements.test.ObjectAccessTest#readInt3(Object, int)->int::: object access test read int3
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeInt1(Object, int, int)->void::: object access test write int1
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeInt2(Object, int, int)->void::: object access test write int2
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeInt3(Object, int, int)->void::: object access test write int3
org.graalvm.compiler.replacements.test.ObjectAccessTest#readLong1(Object, int)->long::: object access test read long1
org.graalvm.compiler.replacements.test.ObjectAccessTest#readLong2(Object, int)->long::: object access test read long2
org.graalvm.compiler.replacements.test.ObjectAccessTest#readLong3(Object, int)->long::: object access test read long3
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeLong1(Object, int, long)->void::: object access test write long1
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeLong2(Object, int, long)->void::: object access test write long2
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeLong3(Object, int, long)->void::: object access test write long3
org.graalvm.compiler.replacements.test.ObjectAccessTest#readFloat1(Object, int)->float::: object access test read float1
org.graalvm.compiler.replacements.test.ObjectAccessTest#readFloat2(Object, int)->float::: object access test read float2
org.graalvm.compiler.replacements.test.ObjectAccessTest#readFloat3(Object, int)->float::: object access test read float3
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeFloat1(Object, int, float)->void::: object access test write float1
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeFloat2(Object, int, float)->void::: object access test write float2
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeFloat3(Object, int, float)->void::: object access test write float3
org.graalvm.compiler.replacements.test.ObjectAccessTest#readDouble1(Object, int)->double::: object access test read double1
org.graalvm.compiler.replacements.test.ObjectAccessTest#readDouble2(Object, int)->double::: object access test read double2
org.graalvm.compiler.replacements.test.ObjectAccessTest#readDouble3(Object, int)->double::: object access test read double3
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeDouble1(Object, int, double)->void::: object access test write double1
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeDouble2(Object, int, double)->void::: object access test write double2
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeDouble3(Object, int, double)->void::: object access test write double3
org.graalvm.compiler.replacements.test.ObjectAccessTest#readObject1(Object, int)->Object::: object access test read object1
org.graalvm.compiler.replacements.test.ObjectAccessTest#readObject2(Object, int)->Object::: object access test read object2
org.graalvm.compiler.replacements.test.ObjectAccessTest#readObject3(Object, int)->Object::: object access test read object3
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeObject1(Object, int, Object)->void::: object access test write object1
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeObject2(Object, int, Object)->void::: object access test write object2
org.graalvm.compiler.replacements.test.ObjectAccessTest#writeObject3(Object, int, Object)->void::: object access test write object3
org.graalvm.compiler.replacements.test.PEGraphDecoderTest#doTest(Object)->int::: graph decoder test do test
org.graalvm.compiler.replacements.test.PEGraphDecoderTest.InlineAll#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInfo::: inline all should inline invoke
org.graalvm.compiler.replacements.test.PEGraphDecoderTest#test()->void::: graph decoder test test
org.graalvm.compiler.replacements.test.PointerTest#testRead1()->void::: pointer test test read1
org.graalvm.compiler.replacements.test.PointerTest#testRead2()->void::: pointer test test read2
org.graalvm.compiler.replacements.test.PointerTest#testRead3()->void::: pointer test test read3
org.graalvm.compiler.replacements.test.PointerTest#testWrite1()->void::: pointer test test write1
org.graalvm.compiler.replacements.test.PointerTest#testWrite2()->void::: pointer test test write2
org.graalvm.compiler.replacements.test.PointerTest#testWrite3()->void::: pointer test test write3
org.graalvm.compiler.replacements.test.PointerTest#readByte1(Object, int)->byte::: pointer test read byte1
org.graalvm.compiler.replacements.test.PointerTest#readByte2(Object, int)->byte::: pointer test read byte2
org.graalvm.compiler.replacements.test.PointerTest#readByte3(Object, int)->byte::: pointer test read byte3
org.graalvm.compiler.replacements.test.PointerTest#writeByte1(Object, int, byte)->void::: pointer test write byte1
org.graalvm.compiler.replacements.test.PointerTest#writeByte2(Object, int, byte)->void::: pointer test write byte2
org.graalvm.compiler.replacements.test.PointerTest#writeByte3(Object, int, byte)->void::: pointer test write byte3
org.graalvm.compiler.replacements.test.PointerTest#readChar1(Object, int)->char::: pointer test read char1
org.graalvm.compiler.replacements.test.PointerTest#readChar2(Object, int)->char::: pointer test read char2
org.graalvm.compiler.replacements.test.PointerTest#readChar3(Object, int)->char::: pointer test read char3
org.graalvm.compiler.replacements.test.PointerTest#writeChar1(Object, int, char)->void::: pointer test write char1
org.graalvm.compiler.replacements.test.PointerTest#writeChar2(Object, int, char)->void::: pointer test write char2
org.graalvm.compiler.replacements.test.PointerTest#writeChar3(Object, int, char)->void::: pointer test write char3
org.graalvm.compiler.replacements.test.PointerTest#readShort1(Object, int)->short::: pointer test read short1
org.graalvm.compiler.replacements.test.PointerTest#readShort2(Object, int)->short::: pointer test read short2
org.graalvm.compiler.replacements.test.PointerTest#readShort3(Object, int)->short::: pointer test read short3
org.graalvm.compiler.replacements.test.PointerTest#writeShort1(Object, int, short)->void::: pointer test write short1
org.graalvm.compiler.replacements.test.PointerTest#writeShort2(Object, int, short)->void::: pointer test write short2
org.graalvm.compiler.replacements.test.PointerTest#writeShort3(Object, int, short)->void::: pointer test write short3
org.graalvm.compiler.replacements.test.PointerTest#readInt1(Object, int)->int::: pointer test read int1
org.graalvm.compiler.replacements.test.PointerTest#readInt2(Object, int)->int::: pointer test read int2
org.graalvm.compiler.replacements.test.PointerTest#readInt3(Object, int)->int::: pointer test read int3
org.graalvm.compiler.replacements.test.PointerTest#writeInt1(Object, int, int)->void::: pointer test write int1
org.graalvm.compiler.replacements.test.PointerTest#writeInt2(Object, int, int)->void::: pointer test write int2
org.graalvm.compiler.replacements.test.PointerTest#writeInt3(Object, int, int)->void::: pointer test write int3
org.graalvm.compiler.replacements.test.PointerTest#readLong1(Object, int)->long::: pointer test read long1
org.graalvm.compiler.replacements.test.PointerTest#readLong2(Object, int)->long::: pointer test read long2
org.graalvm.compiler.replacements.test.PointerTest#readLong3(Object, int)->long::: pointer test read long3
org.graalvm.compiler.replacements.test.PointerTest#writeLong1(Object, int, long)->void::: pointer test write long1
org.graalvm.compiler.replacements.test.PointerTest#writeLong2(Object, int, long)->void::: pointer test write long2
org.graalvm.compiler.replacements.test.PointerTest#writeLong3(Object, int, long)->void::: pointer test write long3
org.graalvm.compiler.replacements.test.PointerTest#readFloat1(Object, int)->float::: pointer test read float1
org.graalvm.compiler.replacements.test.PointerTest#readFloat2(Object, int)->float::: pointer test read float2
org.graalvm.compiler.replacements.test.PointerTest#readFloat3(Object, int)->float::: pointer test read float3
org.graalvm.compiler.replacements.test.PointerTest#writeFloat1(Object, int, float)->void::: pointer test write float1
org.graalvm.compiler.replacements.test.PointerTest#writeFloat2(Object, int, float)->void::: pointer test write float2
org.graalvm.compiler.replacements.test.PointerTest#writeFloat3(Object, int, float)->void::: pointer test write float3
org.graalvm.compiler.replacements.test.PointerTest#readDouble1(Object, int)->double::: pointer test read double1
org.graalvm.compiler.replacements.test.PointerTest#readDouble2(Object, int)->double::: pointer test read double2
org.graalvm.compiler.replacements.test.PointerTest#readDouble3(Object, int)->double::: pointer test read double3
org.graalvm.compiler.replacements.test.PointerTest#writeDouble1(Object, int, double)->void::: pointer test write double1
org.graalvm.compiler.replacements.test.PointerTest#writeDouble2(Object, int, double)->void::: pointer test write double2
org.graalvm.compiler.replacements.test.PointerTest#writeDouble3(Object, int, double)->void::: pointer test write double3
org.graalvm.compiler.replacements.test.PointerTest#readObject1(Object, int)->Object::: pointer test read object1
org.graalvm.compiler.replacements.test.PointerTest#readObject2(Object, int)->Object::: pointer test read object2
org.graalvm.compiler.replacements.test.PointerTest#readObject3(Object, int)->Object::: pointer test read object3
org.graalvm.compiler.replacements.test.PointerTest#writeObject1(Object, int, Object)->void::: pointer test write object1
org.graalvm.compiler.replacements.test.PointerTest#writeObject2(Object, int, Object)->void::: pointer test write object2
org.graalvm.compiler.replacements.test.PointerTest#writeObject3(Object, int, Object)->void::: pointer test write object3
org.graalvm.compiler.replacements.test.PointerTest#testUnusedFromObject()->void::: pointer test test unused from object
org.graalvm.compiler.replacements.test.PointerTest#unusedFromObject(Object)->void::: pointer test unused from object
org.graalvm.compiler.replacements.test.PointerTest#testUnusedRawValue()->void::: pointer test test unused raw value
org.graalvm.compiler.replacements.test.PointerTest#unusedRawValue(Object)->void::: pointer test unused raw value
org.graalvm.compiler.replacements.test.PointerTest#testUsedRawValue()->void::: pointer test test used raw value
org.graalvm.compiler.replacements.test.PointerTest#usedRawValue(Object)->long::: pointer test used raw value
org.graalvm.compiler.replacements.test.PointerTest#testUnusedToObject()->void::: pointer test test unused to object
org.graalvm.compiler.replacements.test.PointerTest#unusedToObject(Word)->void::: pointer test unused to object
org.graalvm.compiler.replacements.test.PointerTest#testUsedToObject()->void::: pointer test test used to object
org.graalvm.compiler.replacements.test.PointerTest#usedToObject(Word)->Object::: pointer test used to object
org.graalvm.compiler.replacements.test.PointerTrackingTest#testTracking()->void::: pointer tracking test test tracking
org.graalvm.compiler.replacements.test.PointerTrackingTest#trackingSnippet(Object)->String::: pointer tracking test tracking snippet
org.graalvm.compiler.replacements.test.PointerTrackingTest#testVerification()->void::: pointer tracking test test verification
org.graalvm.compiler.replacements.test.PointerTrackingTest#verificationSnippet(Object)->long::: pointer tracking test verification snippet
org.graalvm.compiler.replacements.test.PointerTrackingTest#getTrackedPointer(Object)->long::: pointer tracking test get tracked pointer
org.graalvm.compiler.replacements.test.PointerTrackingTest#getUntrackedPointer(Object)->long::: pointer tracking test get untracked pointer
org.graalvm.compiler.replacements.test.PointerTrackingTest#getTrackedPointerIntrinsic(Object)->long::: pointer tracking test get tracked pointer intrinsic
org.graalvm.compiler.replacements.test.PointerTrackingTest#getUntrackedPointerIntrinsic(Object)->long::: pointer tracking test get untracked pointer intrinsic
org.graalvm.compiler.replacements.test.PointerTrackingTest#registerInvocationPlugins(InvocationPlugins)->void::: pointer tracking test register invocation plugins
org.graalvm.compiler.replacements.test.ReplacementsParseTest#copyFirstBody(byte[], byte[], boolean)->int::: replacements parse test copy first body
org.graalvm.compiler.replacements.test.ReplacementsParseTest#copyFirstL2RBody(byte[], byte[])->int::: replacements parse test copy first l2 body
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#next(double)->double::: test object next
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#next2(double)->double::: test object next2
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#nextAfter(double, double)->double::: test object next after
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#stringizeId()->String::: test object stringize id
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#stringize(Object)->String::: test object stringize
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#identity(String)->String::: test object identity
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#copyFirst(byte[], byte[], boolean)->int::: test object copy first
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#copyFirstL2R(byte[], byte[])->int::: test object copy first l2 r
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#nonVoidIntrinsicWithCall(int, int)->int::: test object non void intrinsic with call
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#nonVoidIntrinsicWithOptimizedSplit(int)->int::: test object non void intrinsic with optimized split
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObject#div(int, int)->int::: test object div
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#nextAfter(double, double)->double::: test object substitutions next after
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#stringize(Object)->String:::Tests conditional intrinsification of a static method.
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#stringizeId(TestObject)->String:::Tests conditional intrinsification of a non-static method.
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#outOfLinePartialIntrinsification(TestObject)->String::: test object substitutions out of line partial intrinsification
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#asNonNullString(Object)->String::: test object substitutions as non null string
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#copyFirst(byte[], byte[], boolean)->int:::An valid intrinsic as the frame state associated with the merge should prevent the frame states associated with the array stores from being associated with subsequent deoptimizing nodes.
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#copyFirstL2R(byte[], byte[])->int:::An invalid intrinsic as the frame state associated with the array assignment can leak out to subsequent deoptimizing nodes.
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#identity(String)->String:::Tests that non-capturing lambdas are folded away.
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#nonVoidIntrinsicWithCall(int, int)->int::: test object substitutions non void intrinsic with call
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#nonVoidIntrinsicWithOptimizedSplit(int)->int::: test object substitutions non void intrinsic with optimized split
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#div(int, int)->int::: test object substitutions div
org.graalvm.compiler.replacements.test.ReplacementsParseTest.TestObjectSubstitutions#nonVoidIntrinsicWithCallStub(int)->void::: test object substitutions non void intrinsic with call stub
org.graalvm.compiler.replacements.test.ReplacementsParseTest#registerInvocationPlugins(InvocationPlugins)->void::: replacements parse test register invocation plugins
org.graalvm.compiler.replacements.test.ReplacementsParseTest#warmupProfiles()->void::: replacements parse test warmup profiles
org.graalvm.compiler.replacements.test.ReplacementsParseTest#test1()->void:::Ensure that calling the original method from the substitution binds correctly.
org.graalvm.compiler.replacements.test.ReplacementsParseTest#test1Snippet(double)->double::: replacements parse test test1 snippet
org.graalvm.compiler.replacements.test.ReplacementsParseTest#test2()->void:::Ensure that calling the substitution method binds to the original method properly.
org.graalvm.compiler.replacements.test.ReplacementsParseTest#test2Snippet(double)->double::: replacements parse test test2 snippet
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testNextAfter()->void::: replacements parse test test next after
org.graalvm.compiler.replacements.test.ReplacementsParseTest#doNextAfter(double[], double[])->void::: replacements parse test do next after
org.graalvm.compiler.replacements.test.ReplacementsParseTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)->InstalledCode::: replacements parse test get code
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testCallStringize()->void::: replacements parse test test call stringize
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testCallStringizeWithoutInlinePartialIntrinsicExit()->void::: replacements parse test test call stringize without inline partial intrinsic exit
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testCallStringizeId()->void::: replacements parse test test call stringize id
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testCallStringizeIdWithoutInlinePartialIntrinsicExit()->void::: replacements parse test test call stringize id without inline partial intrinsic exit
org.graalvm.compiler.replacements.test.ReplacementsParseTest#callStringize(Object)->Object::: replacements parse test call stringize
org.graalvm.compiler.replacements.test.ReplacementsParseTest#callStringizeId(TestObject)->Object::: replacements parse test call stringize id
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testRootCompileStringize()->void::: replacements parse test test root compile stringize
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testLambda()->void::: replacements parse test test lambda
org.graalvm.compiler.replacements.test.ReplacementsParseTest#callLambda(String)->String::: replacements parse test call lambda
org.graalvm.compiler.replacements.test.ReplacementsParseTest#callCopyFirst(byte[], byte[], boolean)->int::: replacements parse test call copy first
org.graalvm.compiler.replacements.test.ReplacementsParseTest#callCopyFirstWrapper(byte[], byte[], boolean)->int::: replacements parse test call copy first wrapper
org.graalvm.compiler.replacements.test.ReplacementsParseTest#callCopyFirstL2R(byte[], byte[])->int::: replacements parse test call copy first l2 r
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testCallCopyFirst()->void::: replacements parse test test call copy first
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testCallCopyFirstL2R()->void::: replacements parse test test call copy first l2 r
org.graalvm.compiler.replacements.test.ReplacementsParseTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInvokePlugin.InlineInfo::: replacements parse test bytecode parser should inline invoke
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testCallCopyFirstWithoutInlinePartialIntrinsicExit()->void::: replacements parse test test call copy first without inline partial intrinsic exit
org.graalvm.compiler.replacements.test.ReplacementsParseTest#nonVoidIntrinsicWithCall(int, int)->int::: replacements parse test non void intrinsic with call
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testNonVoidIntrinsicWithCall()->void:::This tests the case where an intrinsic ends with a runtime call but returns some kind of value
org.graalvm.compiler.replacements.test.ReplacementsParseTest#nonVoidIntrinsicWithOptimizedSplit(int)->int::: replacements parse test non void intrinsic with optimized split
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testNonVoidIntrinsicWithOptimizedSplit()->void:::This is similar to #testNonVoidIntrinsicWithCall() but has a merge after the call which would normally capture the FrameState but in this case we force the merge to be optimized away.
org.graalvm.compiler.replacements.test.ReplacementsParseTest#div(int, int)->int::: replacements parse test div
org.graalvm.compiler.replacements.test.ReplacementsParseTest#testAssertionInMethodSubstitution()->void::: replacements parse test test assertion in method substitution
org.graalvm.compiler.replacements.test.ReplacementsTest#getSystemClassLoaderBytecodeProvider()->ClassfileBytecodeProvider:::Gets a ClassfileBytecodeProvider that enables snippets and intrinsics to be loaded from the system class path (instead of from the JVMCI class path or Graal module).
org.graalvm.compiler.replacements.test.RootMethodSubstitutionTest#data()->List::: root method substitution test data
org.graalvm.compiler.replacements.test.RootMethodSubstitutionTest#checkHighTierGraph(StructuredGraph)->void::: root method substitution test check high tier graph
org.graalvm.compiler.replacements.test.RootMethodSubstitutionTest#test()->void::: root method substitution test test
org.graalvm.compiler.replacements.test.SnippetsTest#parse(Builder, PhaseSuite)->StructuredGraph::: snippets test parse
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testMathSubstitutions()->void::: standard method substitutions test test math substitutions
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testMathPow()->void::: standard method substitutions test test math pow
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathPow(double, double)->double::: standard method substitutions test math pow
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathPow0(double, double)->double::: standard method substitutions test math pow0
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathAbs(double)->double::: standard method substitutions test math abs
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathSqrt(double)->double::: standard method substitutions test math sqrt
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathLog(double)->double::: standard method substitutions test math log
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathLog10(double)->double::: standard method substitutions test math log10
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathSin(double)->double::: standard method substitutions test math sin
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathCos(double)->double::: standard method substitutions test math cos
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathTan(double)->double::: standard method substitutions test math tan
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#mathAll(double)->double::: standard method substitutions test math all
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testSubstitution(String, Class, Class, String, boolean, Object...)->void::: standard method substitutions test test substitution
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testCharSubstitutions()->void::: standard method substitutions test test char substitutions
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#charReverseBytes(char)->char::: standard method substitutions test char reverse bytes
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testCharSubstitutionsNarrowing()->void::: standard method substitutions test test char substitutions narrowing
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#charReverseBytesNarrowing(int)->char::: standard method substitutions test char reverse bytes narrowing
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testShortSubstitutions()->void::: standard method substitutions test test short substitutions
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#shortReverseBytes(short)->short::: standard method substitutions test short reverse bytes
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testShortSubstitutionsNarrowing()->void::: standard method substitutions test test short substitutions narrowing
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#shortReverseBytesNarrowing(int)->short::: standard method substitutions test short reverse bytes narrowing
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testIntegerSubstitutions()->void::: standard method substitutions test test integer substitutions
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#integerReverseBytes(int)->int::: standard method substitutions test integer reverse bytes
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#integerNumberOfLeadingZeros(int)->int::: standard method substitutions test integer number of leading zeros
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#integerNumberOfTrailingZeros(int)->int::: standard method substitutions test integer number of trailing zeros
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#integerBitCount(int)->int::: standard method substitutions test integer bit count
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testLongSubstitutions()->void::: standard method substitutions test test long substitutions
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#longReverseBytes(long)->long::: standard method substitutions test long reverse bytes
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#longNumberOfLeadingZeros(long)->int::: standard method substitutions test long number of leading zeros
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#longNumberOfTrailingZeros(long)->int::: standard method substitutions test long number of trailing zeros
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#longBitCount(long)->int::: standard method substitutions test long bit count
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testFloatSubstitutions()->void::: standard method substitutions test test float substitutions
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#floatToIntBits(float)->int::: standard method substitutions test float to int bits
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#intBitsToFloat(int)->float::: standard method substitutions test int bits to float
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testDoubleSubstitutions()->void::: standard method substitutions test test double substitutions
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#doubleToLongBits(double)->long::: standard method substitutions test double to long bits
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#longBitsToDouble(long)->double::: standard method substitutions test long bits to double
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#isInstance(Class, Object)->boolean::: standard method substitutions test is instance
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#isInstance2(boolean, Object)->boolean::: standard method substitutions test is instance2
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#isAssignableFrom(Class, Class)->boolean::: standard method substitutions test is assignable from
org.graalvm.compiler.replacements.test.StandardMethodSubstitutionsTest#testClassSubstitutions()->void::: standard method substitutions test test class substitutions
org.graalvm.compiler.replacements.test.StringCompareToTest#initSubstitution(ResolvedJavaMethod, ResolvedJavaMethod, Class)->void::: string compare to test init substitution
org.graalvm.compiler.replacements.test.StringCompareToTest#stringCompareTo(String, String)->int::: string compare to test string compare to
org.graalvm.compiler.replacements.test.StringCompareToTest#testEqualString()->void::: string compare to test test equal string
org.graalvm.compiler.replacements.test.StringCompareToTest#testDifferentString()->void::: string compare to test test different string
org.graalvm.compiler.replacements.test.StringCompareToTest#testAllStrings()->void::: string compare to test test all strings
org.graalvm.compiler.replacements.test.StringCompressInflateTest#checkAMD64()->void::: string compress inflate test check d64
org.graalvm.compiler.replacements.test.StringCompressInflateTest#testStringLatin1Inflate()->void::: string compress inflate test test string latin1 inflate
org.graalvm.compiler.replacements.test.StringCompressInflateTest#testStringLatin1InflateByteByte()->void::: string compress inflate test test string latin1 inflate byte byte
org.graalvm.compiler.replacements.test.StringCompressInflateTest#testStringLatin1InflateByteChar()->void::: string compress inflate test test string latin1 inflate byte char
org.graalvm.compiler.replacements.test.StringCompressInflateTest#testStringUTF16Compress()->void::: string compress inflate test test string f16 compress
org.graalvm.compiler.replacements.test.StringCompressInflateTest#testStringUTF16CompressByteByte()->void::: string compress inflate test test string f16 compress byte byte
org.graalvm.compiler.replacements.test.StringCompressInflateTest#testStringUTF16CompressCharByte()->void::: string compress inflate test test string f16 compress char byte
org.graalvm.compiler.replacements.test.StringCompressInflateTest#testCompress(char[])->String::: string compress inflate test test compress
org.graalvm.compiler.replacements.test.StringCompressInflateTest#testInflate(String)->char[]::: string compress inflate test test inflate
org.graalvm.compiler.replacements.test.StringEqualsConstantTest#testSameString()->void::: string equals constant test test same string
org.graalvm.compiler.replacements.test.StringEqualsConstantTest#testEqualString()->void::: string equals constant test test equal string
org.graalvm.compiler.replacements.test.StringEqualsConstantTest#testDifferentString()->void::: string equals constant test test different string
org.graalvm.compiler.replacements.test.StringEqualsConstantTest#testSameLengthString()->void::: string equals constant test test same length string
org.graalvm.compiler.replacements.test.StringEqualsConstantTest#stringEquals(String, String)->boolean::: string equals constant test string equals
org.graalvm.compiler.replacements.test.StringEqualsTest#stringEquals(String, String)->boolean::: string equals test string equals
org.graalvm.compiler.replacements.test.StringEqualsTest#testEqualString()->void::: string equals test test equal string
org.graalvm.compiler.replacements.test.StringEqualsTest#testDifferentString()->void::: string equals test test different string
org.graalvm.compiler.replacements.test.StringEqualsTest#testAllStrings()->void::: string equals test test all strings
org.graalvm.compiler.replacements.test.StringHashConstantTest#test1()->void::: string hash constant test test1
org.graalvm.compiler.replacements.test.StringHashConstantTest#parameterizedHashCode(String)->int::: string hash constant test parameterized hash code
org.graalvm.compiler.replacements.test.StringHashConstantTest#test2()->void::: string hash constant test test2
org.graalvm.compiler.replacements.test.StringHashConstantTest#constantHashCode()->int::: string hash constant test constant hash code
org.graalvm.compiler.replacements.test.StringIndexOfCharTest#data()->Collection::: string index of char test data
org.graalvm.compiler.replacements.test.StringIndexOfCharTest#testStringIndexOf(String, int)->int::: string index of char test test string index of
org.graalvm.compiler.replacements.test.StringIndexOfCharTest#testStringIndexOfOffset(String, int, int)->int::: string index of char test test string index of offset
org.graalvm.compiler.replacements.test.StringIndexOfCharTest#testStringIndexOfConstant()->void::: string index of char test test string index of constant
org.graalvm.compiler.replacements.test.StringIndexOfCharTest#testStringIndexOfConstantOffset()->void::: string index of char test test string index of constant offset
org.graalvm.compiler.replacements.test.StringIndexOfConstantTest#testStringIndexOfConstant()->void::: string index of constant test test string index of constant
org.graalvm.compiler.replacements.test.StringIndexOfConstantTest#testStringIndexOfConstantOffset()->void::: string index of constant test test string index of constant offset
org.graalvm.compiler.replacements.test.StringIndexOfConstantTest#testStringBuilderIndexOfConstant()->void::: string index of constant test test string builder index of constant
org.graalvm.compiler.replacements.test.StringIndexOfConstantTest#testStringBuilderIndexOfConstantOffset()->void::: string index of constant test test string builder index of constant offset
org.graalvm.compiler.replacements.test.StringIndexOfConstantTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)->GraphBuilderConfiguration::: string index of constant test edit graph builder configuration
org.graalvm.compiler.replacements.test.StringIndexOfConstantTest#test(OptionValues, ResolvedJavaMethod, Object, Object...)->Result::: string index of constant test test
org.graalvm.compiler.replacements.test.StringIndexOfConstantTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)->InstalledCode::: string index of constant test get code
org.graalvm.compiler.replacements.test.StringIndexOfDeoptimizeTest#testStringIndexOfDeoptimize(String)->int::: string index of deoptimize test test string index of deoptimize
org.graalvm.compiler.replacements.test.StringIndexOfDeoptimizeTest#testStringIndexOfConstantDeoptimize()->void::: string index of deoptimize test test string index of constant deoptimize
org.graalvm.compiler.replacements.test.StringIndexOfTest#testStringIndexOfConstant()->void::: string index of test test string index of constant
org.graalvm.compiler.replacements.test.StringIndexOfTest#testStringIndexOfConstantOffset()->void::: string index of test test string index of constant offset
org.graalvm.compiler.replacements.test.StringIndexOfTest#testStringBuilderIndexOfConstant()->void::: string index of test test string builder index of constant
org.graalvm.compiler.replacements.test.StringIndexOfTest#testStringBuilderIndexOfConstantOffset()->void::: string index of test test string builder index of constant offset
org.graalvm.compiler.replacements.test.StringIndexOfTestBase#data()->Collection::: string index of test base data
org.graalvm.compiler.replacements.test.StringIndexOfTestBase#testStringIndexOf(String, String)->int::: string index of test base test string index of
org.graalvm.compiler.replacements.test.StringIndexOfTestBase#testStringIndexOfOffset(String, String, int)->int::: string index of test base test string index of offset
org.graalvm.compiler.replacements.test.StringIndexOfTestBase#testStringBuilderIndexOf(StringBuilder, String)->int::: string index of test base test string builder index of
org.graalvm.compiler.replacements.test.StringIndexOfTestBase#testStringBuilderIndexOfOffset(StringBuilder, String, int)->int::: string index of test base test string builder index of offset
org.graalvm.compiler.replacements.test.StringIndexOfTestBase#testStringIndexOfConstant()->void::: string index of test base test string index of constant
org.graalvm.compiler.replacements.test.StringIndexOfTestBase#testStringIndexOfConstantOffset()->void::: string index of test base test string index of constant offset
org.graalvm.compiler.replacements.test.StringIndexOfTestBase#testStringBuilderIndexOfConstant()->void::: string index of test base test string builder index of constant
org.graalvm.compiler.replacements.test.StringIndexOfTestBase#testStringBuilderIndexOfConstantOffset()->void::: string index of test base test string builder index of constant offset
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#testSubstitution(String, Class, Class, String, boolean, Object[], Object[])->void::: string substitutions test test substitution
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#testEquals()->void::: string substitutions test test equals
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#stringEquals(String, String)->boolean::: string substitutions test string equals
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#testIndexOfConstant()->void::: string substitutions test test index of constant
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#indexOfConstant()->int::: string substitutions test index of constant
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#testIndexOfConstantUTF16()->void::: string substitutions test test index of constant f16
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#indexOfConstantUTF16case1()->int::: string substitutions test index of constant f16case1
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#indexOfConstantUTF16case2()->int::: string substitutions test index of constant f16case2
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#indexOfConstantUTF16case3()->int::: string substitutions test index of constant f16case3
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#testCompareTo()->void::: string substitutions test test compare to
org.graalvm.compiler.replacements.test.StringSubstitutionsTest#compareTo()->int::: string substitutions test compare to
org.graalvm.compiler.replacements.test.StringSubstitutionTestBase#initSubstitution(ResolvedJavaMethod, ResolvedJavaMethod, Class)->void::: string substitution test base init substitution
org.graalvm.compiler.replacements.test.StringSubstitutionTestBase#testEqualString()->void::: string substitution test base test equal string
org.graalvm.compiler.replacements.test.StringSubstitutionTestBase#testDifferentString()->void::: string substitution test base test different string
org.graalvm.compiler.replacements.test.StringSubstitutionTestBase#testAllStrings()->void::: string substitution test base test all strings
org.graalvm.compiler.replacements.test.SubstitutionNodeSourcePositionTest.TestMethodSubstitution#test(int)->int::: test method substitution test
org.graalvm.compiler.replacements.test.SubstitutionNodeSourcePositionTest#registerInvocationPlugins(InvocationPlugins)->void::: substitution node source position test register invocation plugins
org.graalvm.compiler.replacements.test.SubstitutionNodeSourcePositionTest#methodSubstitution()->int::: substitution node source position test method substitution
org.graalvm.compiler.replacements.test.SubstitutionNodeSourcePositionTest#testMethodSubstitution()->void::: substitution node source position test test method substitution
org.graalvm.compiler.replacements.test.SubstitutionNodeSourcePositionTest#snippetLowering(String[], String)->void::: substitution node source position test snippet lowering
org.graalvm.compiler.replacements.test.SubstitutionNodeSourcePositionTest#testSnippetLowering()->void::: substitution node source position test test snippet lowering
org.graalvm.compiler.replacements.test.SubstitutionNodeSourcePositionTest#methodPlugin(int)->int::: substitution node source position test method plugin
org.graalvm.compiler.replacements.test.SubstitutionNodeSourcePositionTest#testMethodPlugin()->void::: substitution node source position test test method plugin
org.graalvm.compiler.replacements.test.SubstitutionsTest.TestMemory#memory()->Memory::: test memory memory
org.graalvm.compiler.replacements.test.SubstitutionsTest.TestGuard#guard(Memory)->Guard::: test guard guard
org.graalvm.compiler.replacements.test.SubstitutionsTest.TestValue#value(Guard)->int::: test value value
org.graalvm.compiler.replacements.test.SubstitutionsTest#registerInvocationPlugins(InvocationPlugins)->void::: substitutions test register invocation plugins
org.graalvm.compiler.replacements.test.SubstitutionsTest#callTest()->int::: substitutions test call test
org.graalvm.compiler.replacements.test.SubstitutionsTest#checkHighTierGraph(StructuredGraph)->void::: substitutions test check high tier graph
org.graalvm.compiler.replacements.test.SubstitutionsTest#snippetTest()->void::: substitutions test snippet test
org.graalvm.compiler.replacements.test.SystemArrayCopyTest#data()->Collection::: system array copy test data
org.graalvm.compiler.replacements.test.SystemArrayCopyTest#testArrayCopySnippet(Object, Object, int)->void::: system array copy test test array copy snippet
org.graalvm.compiler.replacements.test.SystemArrayCopyTest#testArrayCopy()->void::: system array copy test test array copy
org.graalvm.compiler.replacements.test.SystemArrayCopyTest#parse(StructuredGraph.Builder, PhaseSuite)->StructuredGraph::: system array copy test parse
org.graalvm.compiler.replacements.test.SystemArrayCopyTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)->InstalledCode::: system array copy test get code
org.graalvm.compiler.replacements.test.TypeCheckTest#replaceProfile(StructuredGraph, JavaTypeProfile)->void::: type check test replace profile
org.graalvm.compiler.replacements.test.TypeCheckTest#parseForCompile(ResolvedJavaMethod, CompilationIdentifier, OptionValues)->StructuredGraph::: type check test parse for compile
org.graalvm.compiler.replacements.test.TypeCheckTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)->InstalledCode::: type check test get code
org.graalvm.compiler.replacements.test.TypeCheckTest#profile(Class...)->JavaTypeProfile::: type check test profile
org.graalvm.compiler.replacements.test.TypeCheckTest#profile(TriState, Class...)->JavaTypeProfile::: type check test profile
org.graalvm.compiler.replacements.test.TypeCheckTest#test(String, JavaTypeProfile, Object...)->void::: type check test test
org.graalvm.compiler.replacements.test.UnsafeBooleanAccessTest#testGetBooleanSnippet()->boolean::: unsafe boolean access test test get boolean snippet
org.graalvm.compiler.replacements.test.UnsafeBooleanAccessTest#testGetBoolean()->void::: unsafe boolean access test test get boolean
org.graalvm.compiler.replacements.test.UnsafeBooleanAccessTest#testPutBooleanSnippet()->short::: unsafe boolean access test test put boolean snippet
org.graalvm.compiler.replacements.test.UnsafeBooleanAccessTest#testPutBoolean()->void::: unsafe boolean access test test put boolean
org.graalvm.compiler.replacements.test.UnsafeBooleanAccessTest#testAndBooleanSnippet()->boolean::: unsafe boolean access test test and boolean snippet
org.graalvm.compiler.replacements.test.UnsafeBooleanAccessTest#testAndBoolean()->void::: unsafe boolean access test test and boolean
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#testSubstitution(String, Class, String, Class[], Object, Object[], Object[])->void::: unsafe substitutions test test substitution
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#off(Object, String)->long::: unsafe substitutions test off
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#testUnsafeSubstitutions()->void::: unsafe substitutions test test unsafe substitutions
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeCompareAndSwapInt(Unsafe, Object, long)->boolean::: unsafe substitutions test unsafe compare and swap int
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeCompareAndSwapLong(Unsafe, Object, long)->boolean::: unsafe substitutions test unsafe compare and swap long
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeCompareAndSwapObject(Unsafe, Object, long)->boolean::: unsafe substitutions test unsafe compare and swap object
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetBoolean(Unsafe, Object, long)->boolean::: unsafe substitutions test unsafe get boolean
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetByte(Unsafe, Object, long)->int::: unsafe substitutions test unsafe get byte
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetShort(Unsafe, Object, long)->int::: unsafe substitutions test unsafe get short
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetChar(Unsafe, Object, long)->int::: unsafe substitutions test unsafe get char
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetInt(Unsafe, Object, long)->int::: unsafe substitutions test unsafe get int
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetLong(Unsafe, Object, long)->long::: unsafe substitutions test unsafe get long
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetFloat(Unsafe, Object, long)->float::: unsafe substitutions test unsafe get float
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetDouble(Unsafe, Object, long)->double::: unsafe substitutions test unsafe get double
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetObject(Unsafe, Object, long)->boolean::: unsafe substitutions test unsafe get object
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutBoolean(Unsafe, Object, long, boolean)->int::: unsafe substitutions test unsafe put boolean
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutByte(Unsafe, Object, long, byte)->int::: unsafe substitutions test unsafe put byte
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutShort(Unsafe, Object, long, short)->int::: unsafe substitutions test unsafe put short
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutChar(Unsafe, Object, long, char)->int::: unsafe substitutions test unsafe put char
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutInt(Unsafe, Object, long, int)->int::: unsafe substitutions test unsafe put int
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutLong(Unsafe, Object, long, long)->long::: unsafe substitutions test unsafe put long
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutFloat(Unsafe, Object, long, float)->float::: unsafe substitutions test unsafe put float
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutDouble(Unsafe, Object, long, double)->double::: unsafe substitutions test unsafe put double
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutObject(Unsafe, Object, long, Object, Object, Object)->Object[]::: unsafe substitutions test unsafe put object
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeGetAddress(Unsafe, long)->long::: unsafe substitutions test unsafe get address
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafePutAddress(Unsafe, long, long)->long::: unsafe substitutions test unsafe put address
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeDirectMemoryRead(Unsafe, long)->double::: unsafe substitutions test unsafe direct memory read
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeDirectMemoryWrite(Unsafe, long, long)->double::: unsafe substitutions test unsafe direct memory write
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest.MyObject#toString()->String::: my object to string
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#unsafeAllocateInstance(Unsafe)->String::: unsafe substitutions test unsafe allocate instance
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#testAllocateInstance()->void::: unsafe substitutions test test allocate instance
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#testGetAndAddInt()->void::: unsafe substitutions test test get and add int
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#getAndAddInt(Object, long, int)->int::: unsafe substitutions test get and add int
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#testGetAndAddLong()->void::: unsafe substitutions test test get and add long
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#getAndAddLong(Object, long, long)->long::: unsafe substitutions test get and add long
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#testGetAndSetInt()->void::: unsafe substitutions test test get and set int
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#getAndSetInt(Object, long, int)->int::: unsafe substitutions test get and set int
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#testGetAndSetLong()->void::: unsafe substitutions test test get and set long
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#getAndSetLong(Object, long, long)->long::: unsafe substitutions test get and set long
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#testGetAndSetObject()->void::: unsafe substitutions test test get and set object
org.graalvm.compiler.replacements.test.UnsafeSubstitutionsTest#getAndSetObject(Object, long, Object)->Object::: unsafe substitutions test get and set object
org.graalvm.compiler.replacements.test.UnsignedIntegerTest#compareInteger(int, int)->int::: unsigned integer test compare integer
org.graalvm.compiler.replacements.test.UnsignedIntegerTest#divideInteger(int, int)->int::: unsigned integer test divide integer
org.graalvm.compiler.replacements.test.UnsignedIntegerTest#remainderInteger(int, int)->int::: unsigned integer test remainder integer
org.graalvm.compiler.replacements.test.UnsignedIntegerTest#compareLong(long, long)->long::: unsigned integer test compare long
org.graalvm.compiler.replacements.test.UnsignedIntegerTest#divideLong(long, long)->long::: unsigned integer test divide long
org.graalvm.compiler.replacements.test.UnsignedIntegerTest#remainderLong(long, long)->long::: unsigned integer test remainder long
org.graalvm.compiler.replacements.test.UnsignedIntegerTest#testInteger()->void::: unsigned integer test test integer
org.graalvm.compiler.replacements.test.UnsignedIntegerTest#testLong()->void::: unsigned integer test test long
org.graalvm.compiler.replacements.test.UnsignedMathTest#aboveThanInt(int, int)->boolean::: unsigned math test above than int
org.graalvm.compiler.replacements.test.UnsignedMathTest#aboveOrEqualInt(int, int)->boolean::: unsigned math test above or equal int
org.graalvm.compiler.replacements.test.UnsignedMathTest#belowThanInt(int, int)->boolean::: unsigned math test below than int
org.graalvm.compiler.replacements.test.UnsignedMathTest#belowOrEqualInt(int, int)->boolean::: unsigned math test below or equal int
org.graalvm.compiler.replacements.test.UnsignedMathTest#divideInt(int, int)->int::: unsigned math test divide int
org.graalvm.compiler.replacements.test.UnsignedMathTest#remainderInt(int, int)->int::: unsigned math test remainder int
org.graalvm.compiler.replacements.test.UnsignedMathTest#aboveThanLong(long, long)->boolean::: unsigned math test above than long
org.graalvm.compiler.replacements.test.UnsignedMathTest#aboveOrEqualLong(long, long)->boolean::: unsigned math test above or equal long
org.graalvm.compiler.replacements.test.UnsignedMathTest#belowThanLong(long, long)->boolean::: unsigned math test below than long
org.graalvm.compiler.replacements.test.UnsignedMathTest#belowOrEqualLong(long, long)->boolean::: unsigned math test below or equal long
org.graalvm.compiler.replacements.test.UnsignedMathTest#divideLong(long, long)->long::: unsigned math test divide long
org.graalvm.compiler.replacements.test.UnsignedMathTest#remainderLong(long, long)->long::: unsigned math test remainder long
org.graalvm.compiler.replacements.test.UnsignedMathTest#testInt()->void::: unsigned math test test int
org.graalvm.compiler.replacements.test.UnsignedMathTest#testLong()->void::: unsigned math test test long
org.graalvm.compiler.replacements.test.UnwindExceptionToCallerTest#test1()->void::: unwind exception to caller test test1
org.graalvm.compiler.replacements.test.UnwindExceptionToCallerTest#test1Snippet(String, NullPointerException)->String::: unwind exception to caller test test1 snippet
org.graalvm.compiler.replacements.test.WordTest#parse(Builder, PhaseSuite)->StructuredGraph::: word test parse
org.graalvm.compiler.replacements.test.WordTest#construction()->void::: word test construction
org.graalvm.compiler.replacements.test.WordTest#testArithmetic()->void::: word test test arithmetic
org.graalvm.compiler.replacements.test.WordTest#testCompare()->void::: word test test compare
org.graalvm.compiler.replacements.test.WordTest#testCast()->void::: word test test cast
org.graalvm.compiler.replacements.test.WordTest#cast(long)->long::: word test cast
org.graalvm.compiler.replacements.test.WordTest#unsignedLong(long)->long::: word test unsigned long
org.graalvm.compiler.replacements.test.WordTest#unsignedInt(int)->long::: word test unsigned int
org.graalvm.compiler.replacements.test.WordTest#signedLong(long)->long::: word test signed long
org.graalvm.compiler.replacements.test.WordTest#signedInt(int)->long::: word test signed int
org.graalvm.compiler.replacements.test.WordTest#unsignedPlusInt(long, int)->long::: word test unsigned plus int
org.graalvm.compiler.replacements.test.WordTest#unsignedMinusInt(long, int)->long::: word test unsigned minus int
org.graalvm.compiler.replacements.test.WordTest#unsignedPlusLong(long, long)->long::: word test unsigned plus long
org.graalvm.compiler.replacements.test.WordTest#unsignedMinusLong(long, long)->long::: word test unsigned minus long
org.graalvm.compiler.replacements.test.WordTest#signedPlusInt(long, int)->long::: word test signed plus int
org.graalvm.compiler.replacements.test.WordTest#signedMinusInt(long, int)->long::: word test signed minus int
org.graalvm.compiler.replacements.test.WordTest#signedPlusLong(long, long)->long::: word test signed plus long
org.graalvm.compiler.replacements.test.WordTest#signedMinusLong(long, long)->long::: word test signed minus long
org.graalvm.compiler.replacements.test.WordTest#signedNot(long)->long::: word test signed not
org.graalvm.compiler.replacements.test.WordTest#unsignedNot(long)->long::: word test unsigned not
org.graalvm.compiler.replacements.test.WordTest#aboveOrEqual(long, long)->boolean::: word test above or equal
org.graalvm.compiler.replacements.test.WordTest#above(long, long)->boolean::: word test above
org.graalvm.compiler.replacements.test.WordTest#belowOrEqual(long, long)->boolean::: word test below or equal
org.graalvm.compiler.replacements.test.WordTest#below(long, long)->boolean::: word test below
org.graalvm.compiler.replacements.test.WordTest#andInt(long, int)->long::: word test and int
org.graalvm.compiler.replacements.test.WordTest#orInt(long, int)->long::: word test or int
org.graalvm.compiler.replacements.test.WordTest#andLong(long, long)->long::: word test and long
org.graalvm.compiler.replacements.test.WordTest#orLong(long, long)->long::: word test or long

ArrayEqualsConstantLengthTest#testEquals(String, Class[], ArrayBuilder)::: array equals constant length test test equals:::foreach->new->ObjectArr->builder->newArray->builder->newArray->builder->newArray->new->ObjectArr->builder->newArray->builder->newArray->builder->newArray->testSubstitution
ArrayEqualsConstantLengthTest#testEqualsBoolean()::: array equals constant length test test equals boolean:::new->Class<?>Arr->ArraysSubstitutionsTestBase->booleanArray->testEquals
ArrayEqualsConstantLengthTest#testEqualsByte()::: array equals constant length test test equals byte:::new->Class<?>Arr->ArraysSubstitutionsTestBase->byteArray->testEquals
ArrayEqualsConstantLengthTest#testEqualsChar()::: array equals constant length test test equals char:::new->Class<?>Arr->ArraysSubstitutionsTestBase->charArray->testEquals
ArrayEqualsConstantLengthTest#testEqualsShort()::: array equals constant length test test equals short:::new->Class<?>Arr->ArraysSubstitutionsTestBase->shortArray->testEquals
ArrayEqualsConstantLengthTest#testEqualsInt()::: array equals constant length test test equals int:::new->Class<?>Arr->ArraysSubstitutionsTestBase->intArray->testEquals
ArrayEqualsConstantLengthTest#testEqualsLong()::: array equals constant length test test equals long:::new->Class<?>Arr->ArraysSubstitutionsTestBase->longArray->testEquals
ArrayEqualsConstantLengthTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)::: array equals constant length test edit graph builder configuration:::if->constantBinding->this->getMetaAccess->this->getSnippetReflection->new->ConstantBindingParameterPlugin->conf->getPlugins->appendParameterPlugin->return->super->editGraphBuilderConfiguration
ArrayEqualsConstantLengthTest#testSubstitution(String, Class, Class, String, Class[], boolean, boolean, Object[], Object[])::: array equals constant length test test substitution:::new->ObjectArr->super->testSubstitution
ArraysSubstitutionsTest#testEquals(String, Class[], ArrayBuilder)::: arrays substitutions test test equals:::args1->new->ObjectArr->args2->new->ObjectArr->n->for->i->for->i->testSubstitution
ArraysSubstitutionsTest#testEqualsBoolean()::: arrays substitutions test test equals boolean:::new->Class<?>Arr->ArraysSubstitutionsTestBase->booleanArray->testEquals
ArraysSubstitutionsTest#testEqualsByte()::: arrays substitutions test test equals byte:::new->Class<?>Arr->ArraysSubstitutionsTestBase->byteArray->testEquals
ArraysSubstitutionsTest#testEqualsChar()::: arrays substitutions test test equals char:::new->Class<?>Arr->ArraysSubstitutionsTestBase->charArray->testEquals
ArraysSubstitutionsTest#testEqualsShort()::: arrays substitutions test test equals short:::new->Class<?>Arr->ArraysSubstitutionsTestBase->shortArray->testEquals
ArraysSubstitutionsTest#testEqualsInt()::: arrays substitutions test test equals int:::new->Class<?>Arr->ArraysSubstitutionsTestBase->intArray->testEquals
ArraysSubstitutionsTest#testEqualsLong()::: arrays substitutions test test equals long:::new->Class<?>Arr->ArraysSubstitutionsTestBase->longArray->testEquals
ArraysSubstitutionsTest#testEqualsNodeGVN()::: arrays substitutions test test equals node n:::test
ArraysSubstitutionsTest#testEqualsNodeGVNSnippet(boolean)::: arrays substitutions test test equals node snippet:::newIntArray->new->intArr->if->return->Arrays->equals->else->return->Arrays->equals
ArraysSubstitutionsTest#testConstants()::: arrays substitutions test test constants:::testGraph
ArraysSubstitutionsTest#testConstantsSnippet()::: arrays substitutions test test constants snippet:::try->return->Arrays->equals->catch->finally
ArraysSubstitutionsTest#testCanonicalLength()::: arrays substitutions test test canonical length:::graph->parseEager->context->getProviders->getDefaultGraphBuilderSuite->new->HighTierContext->createInliningPhase->apply->new->CanonicalizerPhase->getProviders->apply->Assert->graph->getNodes->first->result->asJavaConstant->asLong->assertTrue
ArraysSubstitutionsTest#testCanonicalLengthSnippet()::: arrays substitutions test test canonical length snippet:::return->Arrays->equals
ArraysSubstitutionsTest#testCanonicalEqual()::: arrays substitutions test test canonical equal:::graph->parseEager->context->getProviders->getDefaultGraphBuilderSuite->new->HighTierContext->createInliningPhase->apply->new->CanonicalizerPhase->getProviders->apply->Assert->graph->getNodes->first->result->asJavaConstant->asLong->assertTrue
ArraysSubstitutionsTest#testCanonicalEqualSnippet()::: arrays substitutions test test canonical equal snippet:::return->Arrays->equals
ArraysSubstitutionsTest#testVirtualEqual()::: arrays substitutions test test virtual equal:::graph->parseEager->context->getProviders->getDefaultGraphBuilderSuite->new->HighTierContext->createInliningPhase->apply->new->CanonicalizerPhase->getProviders->apply->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->new->CanonicalizerPhase->getProviders->apply->Assert->graph->getNodes->first->result->asJavaConstant->asLong->assertTrue
ArraysSubstitutionsTest#testVirtualEqualSnippet()::: arrays substitutions test test virtual equal snippet:::array1->new->intArr->array2->new->intArr->return->Arrays->equals
ArraysSubstitutionsTest#testVirtualNotEqual()::: arrays substitutions test test virtual not equal:::graph->parseEager->context->getDefaultHighTierContext->createInliningPhase->apply->new->CanonicalizerPhase->getProviders->apply->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->new->CanonicalizerPhase->getProviders->apply->Assert->graph->getNodes->first->result->asJavaConstant->asLong->assertTrue
ArraysSubstitutionsTest#testVirtualNotEqualSnippet(int)::: arrays substitutions test test virtual not equal snippet:::array1->new->intArr->array2->new->intArr->return->Arrays->equals
ArraysSubstitutionsTestBase#arraysEqualsBoolean(boolean[], boolean[])::: arrays substitutions test base arrays equals boolean:::return->Arrays->equals
ArraysSubstitutionsTestBase#arraysEqualsByte(byte[], byte[])::: arrays substitutions test base arrays equals byte:::return->Arrays->equals
ArraysSubstitutionsTestBase#arraysEqualsChar(char[], char[])::: arrays substitutions test base arrays equals char:::return->Arrays->equals
ArraysSubstitutionsTestBase#arraysEqualsShort(short[], short[])::: arrays substitutions test base arrays equals short:::return->Arrays->equals
ArraysSubstitutionsTestBase#arraysEqualsInt(int[], int[])::: arrays substitutions test base arrays equals int:::return->Arrays->equals
ArraysSubstitutionsTestBase#arraysEqualsLong(long[], long[])::: arrays substitutions test base arrays equals long:::return->Arrays->equals
ArraysSubstitutionsTestBase.ArrayBuilder#newArray(int, int, int)::: array builder new array:::
ArraysSubstitutionsTestBase#booleanArray(int, int, int)::: arrays substitutions test base boolean array:::arr->new->booleanArr->for->i->if->if->return
ArraysSubstitutionsTestBase#byteArray(int, int, int)::: arrays substitutions test base byte array:::arr->new->byteArr->for->i->if->if->return
ArraysSubstitutionsTestBase#charArray(int, int, int)::: arrays substitutions test base char array:::arr->new->charArr->for->i->if->if->return
ArraysSubstitutionsTestBase#shortArray(int, int, int)::: arrays substitutions test base short array:::arr->new->shortArr->for->i->if->if->return
ArraysSubstitutionsTestBase#intArray(int, int, int)::: arrays substitutions test base int array:::arr->new->intArr->for->i->if->if->return
ArraysSubstitutionsTestBase#longArray(int, int, int)::: arrays substitutions test base long array:::arr->new->longArr->for->i->if->if->return
ArrayStoreBytecodeExceptionTest.Exceptions#throwArrayStore(Object)::: exceptions throw array store:::
ArrayStoreBytecodeExceptionTest#registerInvocationPlugins(InvocationPlugins)::: array store bytecode exception test register invocation plugins:::invocationPlugins->new->InvocationPlugin->register->super->registerInvocationPlugins
ArrayStoreBytecodeExceptionTest#arrayStoreSnippet(Object)::: array store bytecode exception test array store snippet:::Exceptions->throwArrayStore
ArrayStoreBytecodeExceptionTest#data()::: array store bytecode exception test data:::objects->new->intArr->new->StringArr->new->doubleArrs->ret->new->ArrayList<>->foreach->ret->new->ObjectArr->o->getClass->add->return
ArrayStoreBytecodeExceptionTest#testArrayStoreException()::: array store bytecode exception test test array store exception:::test
BitOpNodesTest#isBitCountIntrinsicSupported(Architecture):::Determines if the current VM context supports intrinsics for the bitCount methods in Integer and Long.:::if->amd64->return->amd64->getFeatures->contains->else->return
BitOpNodesTest#isNumberLeadingZerosIntrinsicSupported(Architecture):::Determines if the current VM context supports intrinsics for the numberOfLeadingZeros methods in Integer and Long.:::if->amd64->return->amd64->getFeatures->contains->amd64->getFlags->contains->else->return
BitOpNodesTest#isNumberTrailingZerosIntrinsicSupported(Architecture):::Determines if the current VM context supports intrinsics for the numberOfTrailingZeros methods in Integer and Long.:::if->amd64->return->amd64->getFeatures->contains->amd64->getFlags->contains->else->return
BitOpNodesTest#bitCountIntConstantSnippet()::: bit op nodes test bit count int constant snippet:::return->Integer->bitCount->Integer->bitCount->Integer->bitCount
BitOpNodesTest#testBitCountIntConstant()::: bit op nodes test test bit count int constant:::result->parseAndInline->Assert->result->asJavaConstant->asInt->assertEquals
BitOpNodesTest#bitCountLongConstantSnippet()::: bit op nodes test bit count long constant snippet:::return->Long->bitCount->Long->bitCount->Long->bitCount
BitOpNodesTest#bitCountIntSnippet(int)::: bit op nodes test bit count int snippet:::return->Integer->bitCount
BitOpNodesTest#testBitCountInt()::: bit op nodes test test bit count int:::Assume->getBackend->getTarget->isBitCountIntrinsicSupported->assumeTrue->result->parseAndInline->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#bitCountIntEmptySnippet(int)::: bit op nodes test bit count int empty snippet:::return->Integer->bitCount
BitOpNodesTest#testBitCountIntEmpty()::: bit op nodes test test bit count int empty:::Assume->getBackend->getTarget->isBitCountIntrinsicSupported->assumeTrue->result->parseAndInline->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#testBitCountLongConstant()::: bit op nodes test test bit count long constant:::result->parseAndInline->Assert->result->asJavaConstant->asInt->assertEquals
BitOpNodesTest#bitCountLongSnippet(long)::: bit op nodes test bit count long snippet:::return->Long->bitCount
BitOpNodesTest#testBitCountLong()::: bit op nodes test test bit count long:::Assume->getBackend->getTarget->isBitCountIntrinsicSupported->assumeTrue->result->parseAndInline->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#bitCountLongEmptySnippet(long)::: bit op nodes test bit count long empty snippet:::return->Long->bitCount
BitOpNodesTest#testBitCountLongEmpty()::: bit op nodes test test bit count long empty:::Assume->getBackend->getTarget->isBitCountIntrinsicSupported->assumeTrue->result->parseAndInline->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#scanForwardIntConstantSnippet()::: bit op nodes test scan forward int constant snippet:::return->Integer->numberOfTrailingZeros->Integer->numberOfTrailingZeros->Integer->numberOfTrailingZeros
BitOpNodesTest#testScanForwardIntConstant()::: bit op nodes test test scan forward int constant:::result->parseAndInline->Assert->result->asJavaConstant->asInt->assertEquals
BitOpNodesTest#scanForwardIntSnippet(int)::: bit op nodes test scan forward int snippet:::return->Integer->numberOfTrailingZeros
BitOpNodesTest#testScanForwardInt()::: bit op nodes test test scan forward int:::result->parseAndInline->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#scanForwardLongConstantSnippet()::: bit op nodes test scan forward long constant snippet:::return->Long->numberOfTrailingZeros->Long->numberOfTrailingZeros->Long->numberOfTrailingZeros
BitOpNodesTest#testScanForwardLongConstant()::: bit op nodes test test scan forward long constant:::result->parseAndInline->Assert->result->asJavaConstant->asInt->assertEquals
BitOpNodesTest#scanForwardLongSnippet(long)::: bit op nodes test scan forward long snippet:::return->Long->numberOfTrailingZeros
BitOpNodesTest#testScanForwardLong()::: bit op nodes test test scan forward long:::result->parseAndInline->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#scanForwardLongEmptySnippet(long)::: bit op nodes test scan forward long empty snippet:::result->Long->numberOfTrailingZeros->return
BitOpNodesTest#testScanForwardLongEmpty()::: bit op nodes test test scan forward long empty:::result->parseAndInline->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#scanReverseIntConstantSnippet()::: bit op nodes test scan reverse int constant snippet:::return->Integer->numberOfLeadingZeros->Integer->numberOfLeadingZeros->Integer->numberOfLeadingZeros
BitOpNodesTest#testScanReverseIntConstant()::: bit op nodes test test scan reverse int constant:::result->parseAndInline->Assert->result->asJavaConstant->asInt->assertEquals
BitOpNodesTest#scanReverseIntSnippet(int)::: bit op nodes test scan reverse int snippet:::return->Integer->numberOfLeadingZeros
BitOpNodesTest#testScanReverseInt()::: bit op nodes test test scan reverse int:::result->parseAndInline->if->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#scanReverseLongConstantSnippet()::: bit op nodes test scan reverse long constant snippet:::return->Long->numberOfLeadingZeros->Long->numberOfLeadingZeros->Long->numberOfLeadingZeros
BitOpNodesTest#testScanReverseLongConstant()::: bit op nodes test test scan reverse long constant:::result->parseAndInline->Assert->result->asJavaConstant->asInt->assertEquals
BitOpNodesTest#scanReverseLongSnippet(long)::: bit op nodes test scan reverse long snippet:::result->Long->numberOfLeadingZeros->return
BitOpNodesTest#testScanReverseLong()::: bit op nodes test test scan reverse long:::result->parseAndInline->if->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#scanReverseLongEmptySnippet(long)::: bit op nodes test scan reverse long empty snippet:::result->Long->numberOfLeadingZeros->return
BitOpNodesTest#testScanReverseLongEmpty()::: bit op nodes test test scan reverse long empty:::result->parseAndInline->if->Assert->StampFactory->forInteger->result->stamp->assertEquals
BitOpNodesTest#parseAndInline(String)::: bit op nodes test parse and inline:::return->parseAndInline
BitOpNodesTest#parseAndInline(String, Class):::Parse and optimize name:::graph->parseEager->context->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->canonicalizer->apply->createInliningPhase->apply->canonicalizer->apply->Assert->graph->getNodes->count->assertEquals->if->if->graph->getNodes->filter->count->return->return->graph->getNodes->first->result
BytecodeExceptionTest#throwBytecodeException(GraphBuilderContext, BytecodeExceptionKind, ValueNode...)::: bytecode exception test throw bytecode exception:::exceptionNode->b->b->getMetaAccess->new->BytecodeExceptionNode->add->b->new->UnwindNode->add->return
ClassCastBytecodeExceptionTest.Exceptions#throwClassCast(Object, Class)::: exceptions throw class cast:::if->cast->GraalDirectives->blackhole->else->if->cast->GraalDirectives->blackhole->else->if->cast->GraalDirectives->blackhole->else->if->cast->GraalDirectives->blackhole->else->Assert->fail
ClassCastBytecodeExceptionTest#registerInvocationPlugins(InvocationPlugins)::: class cast bytecode exception test register invocation plugins:::invocationPlugins->new->InvocationPlugin->register->super->registerInvocationPlugins
ClassCastBytecodeExceptionTest#data()::: class cast bytecode exception test data:::objects->new->intArr->new->ObjectArr->new->doubleArrs->ret->new->ArrayList<>->foreach->ret->new->ObjectArr->o->getClass->add->return
ClassCastBytecodeExceptionTest#castToDouble(Object)::: class cast bytecode exception test cast to double:::Exceptions->throwClassCast
ClassCastBytecodeExceptionTest#testCastToDouble()::: class cast bytecode exception test test cast to double:::test
ClassCastBytecodeExceptionTest#castToByteArray(Object)::: class cast bytecode exception test cast to byte array:::Exceptions->throwClassCast
ClassCastBytecodeExceptionTest#testCastToByteArray()::: class cast bytecode exception test test cast to byte array:::test
ClassCastBytecodeExceptionTest#castToStringArray(Object)::: class cast bytecode exception test cast to string array:::Exceptions->throwClassCast
ClassCastBytecodeExceptionTest#testCastToStringArray()::: class cast bytecode exception test test cast to string array:::test
ClassCastBytecodeExceptionTest#castToArrayArray(Object)::: class cast bytecode exception test cast to array array:::Exceptions->throwClassCast
ClassCastBytecodeExceptionTest#testCastToArrayArray()::: class cast bytecode exception test test cast to array array:::test
CompiledExceptionHandlerTest#createSuites(OptionValues)::: compiled exception handler test create suites:::return->super->new->OptionValues->createSuites
CompiledExceptionHandlerTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: compiled exception handler test bytecode parser should inline invoke:::return
CompiledExceptionHandlerTest#parse(Builder, PhaseSuite)::: compiled exception handler test parse:::graph->super->parse->handlers->graph->getNodes->filter->count->Assert->assertEquals->return
CompiledExceptionHandlerTest#raiseExceptionSimple(String)::: compiled exception handler test raise exception simple:::throw->new->RuntimeException
CompiledExceptionHandlerTest#test1()::: compiled exception handler test test1:::test->test
CompiledExceptionHandlerTest#test1Snippet(String)::: compiled exception handler test test1 snippet:::if->try->raiseExceptionSimple->catch->return->e->getMessage->finally->return
CompiledExceptionHandlerTest#raiseException(String, String, String, String, String)::: compiled exception handler test raise exception:::throw->new->RuntimeException
CompiledExceptionHandlerTest#test2()::: compiled exception handler test test2:::test->test
CompiledExceptionHandlerTest#test2Snippet(String, String, String, String, String)::: compiled exception handler test test2 snippet:::if->try->raiseException->catch->return->finally->return
CompiledNullPointerExceptionTest#createSuites(OptionValues)::: compiled null pointer exception test create suites:::return->super->new->OptionValues->createSuites
CompiledNullPointerExceptionTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: compiled null pointer exception test bytecode parser should inline invoke:::return
CompiledNullPointerExceptionTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)::: compiled null pointer exception test edit graph builder configuration:::return->super->editGraphBuilderConfiguration->withBytecodeExceptionMode
CompiledNullPointerExceptionTest#parse(Builder, PhaseSuite)::: compiled null pointer exception test parse:::graph->super->parse->handlers->graph->getNodes->filter->count->Assert->assertEquals->return
CompiledNullPointerExceptionTest.TestClass#toString()::: test class to string:::return
CompiledNullPointerExceptionTest#test()::: compiled null pointer exception test test:::test->new->TestClass->test
CompiledNullPointerExceptionTest#testSnippet(TestClass, Object)::: compiled null pointer exception test test snippet:::try->return->o->toString->catch->return->String->valueOf->finally
DeoptimizeOnExceptionTest#raiseException(String, String, String, String, String)::: deoptimize on exception test raise exception:::throw->new->RuntimeException
DeoptimizeOnExceptionTest#test1()::: deoptimize on exception test test1:::test
DeoptimizeOnExceptionTest#test1Snippet(String, String, String, String, String)::: deoptimize on exception test test1 snippet:::if->raiseException->return
DeoptimizeOnExceptionTest#test2()::: deoptimize on exception test test2:::test
DeoptimizeOnExceptionTest#test2Snippet()::: deoptimize on exception test test2 snippet:::try->testCl->new->MyClassLoader->c->testCl->loadClass->r->c->getDeclaredConstructor->newInstance->for->i->method->getResolvedJavaMethod->getCode->r->run->catch->e->printStackTrace->Assert->fail->finally->return
DeoptimizeOnExceptionTest#test3()::: deoptimize on exception test test3:::Assume->assumeTrue->method->getResolvedJavaMethod->for->i
DeoptimizeOnExceptionTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: deoptimize on exception test bytecode parser should inline invoke:::if->method->getName->equals->if->b->getMethod->getProfilingInfo->getDeoptimizationCount->return->else->return->return->super->bytecodeParserShouldInlineInvoke
DeoptimizeOnExceptionTest#throwException()::: deoptimize on exception test throw exception:::throw->new->Exception
DeoptimizeOnExceptionTest#test3Snippet(boolean)::: deoptimize on exception test test3 snippet:::try->throwException->catch->if->throw->finally->return->GraalDirectives->inCompiledCode
DeoptimizeOnExceptionTest.MyClassLoader#findClass(String)::: my class loader find class:::return->name->replace->defineClass
DeoptimizeOnExceptionTest#methodB()::: deoptimize on exception test method b:::r->System->currentTimeMillis->new->Random->while->r->nextFloat->return
DeoptimizeOnExceptionTest#methodA()::: deoptimize on exception test method a:::r->System->currentTimeMillis->new->Random->while->r->nextDouble->return
DeoptimizeOnExceptionTest#getM()::: deoptimize on exception test get m:::if->return->else->return
DeoptimizeOnExceptionTest#makeClazz()::: deoptimize on exception test make clazz:::clazzName->getName->replace->w->new->ClassWriter->w->new->StringArr->visit->mv->w->new->StringArr->visitMethod->mv->visitCode->mv->visitVarInsn->mv->visitMethodInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd->w->visitMethod->mv->visitCode->mv->visitMethodInsn->l1->new->Label->mv->visitJumpInsn->mv->visitInsn->mv->visitLabel->mv->visitVarInsn->lElse->new->Label->lEnd->new->Label->mv->visitMethodInsn->mv->visitInsn->mv->visitMethodInsn->mv->visitInsn->mv->visitJumpInsn->mv->visitMethodInsn->mv->visitJumpInsn->mv->visitLabel->mv->visitMethodInsn->mv->visitLabel->mv->visitVarInsn->mv->visitMaxs->mv->visitEnd->return->w->toByteArray
DeoptimizeOnIntegerExactTest#testAddExactSnippet(int, int)::: deoptimize on integer exact test test add exact snippet:::if->return->Math->addExact->else->return->Math->addExact
DeoptimizeOnIntegerExactTest#testSubtractExactSnippet(int, int)::: deoptimize on integer exact test test subtract exact snippet:::if->return->Math->subtractExact->else->return->Math->subtractExact
DeoptimizeOnIntegerExactTest#testMultiplyExactSnippet(int, int)::: deoptimize on integer exact test test multiply exact snippet:::if->return->Math->multiplyExact->else->return->Math->multiplyExact
DeoptimizeOnIntegerExactTest#testIncrementExactSnippet(int, int)::: deoptimize on integer exact test test increment exact snippet:::if->return->Math->incrementExact->else->return->Math->incrementExact
DeoptimizeOnIntegerExactTest#testDecrementExactSnippet(int, int)::: deoptimize on integer exact test test decrement exact snippet:::if->return->Math->decrementExact->else->return->Math->decrementExact
DeoptimizeOnIntegerExactTest#testAgainIfDeopt(String, int, int)::: deoptimize on integer exact test test again if deopt:::method->getResolvedJavaMethod->code->getCode->code->executeVarargs->if->code->isValid->getCode->code->executeVarargs->code->isValid->assertTrue
DeoptimizeOnIntegerExactTest#testAddExact()::: deoptimize on integer exact test test add exact:::testAgainIfDeopt
DeoptimizeOnIntegerExactTest#testSubtractExact()::: deoptimize on integer exact test test subtract exact:::testAgainIfDeopt
DeoptimizeOnIntegerExactTest#testMultiplyExact()::: deoptimize on integer exact test test multiply exact:::testAgainIfDeopt
DeoptimizeOnIntegerExactTest#testIncrementExact()::: deoptimize on integer exact test test increment exact:::testAgainIfDeopt
DeoptimizeOnIntegerExactTest#testDecrementExact()::: deoptimize on integer exact test test decrement exact:::testAgainIfDeopt
DeoptimizeOnIntegerExactTest#getSpeculationLog()::: deoptimize on integer exact test get speculation log:::speculationLog->collectFailedSpeculations->return
DeoptimizeOnIntegerExactTest#addMethod(DebugContext, ResolvedJavaMethod, CompilationResult)::: deoptimize on integer exact test add method:::return->getBackend->createInstalledCode
DeoptimizeOnVolatileReadTest#test1Snippet(Dummy)::: deoptimize on volatile read test test1 snippet:::if->GraalDirectives->GraalDirectives->inCompiledCode->injectBranchProbability->return->return
DeoptimizeOnVolatileReadTest#test1()::: deoptimize on volatile read test test1:::method->getResolvedJavaMethod->dummy->new->Dummy->expected->executeExpected->new->Result->assertEquals->code->getCode->actual->try->code->executeVarargs->new->Result->catch->new->Result->finally->new->Result->assertEquals->code->isValid->assertFalse
DeoptimizeOnVolatileReadTest#test2Snippet(Dummy)::: deoptimize on volatile read test test2 snippet:::if->GraalDirectives->GraalDirectives->inCompiledCode->injectBranchProbability->return->return
DeoptimizeOnVolatileReadTest#test2()::: deoptimize on volatile read test test2:::method->getResolvedJavaMethod->dummy->new->Dummy->expected->executeExpected->new->Result->assertEquals->code->getCode->actual->try->code->executeVarargs->new->Result->catch->new->Result->finally->new->Result->assertEquals->code->isValid->assertFalse
DerivedOopTest.Pointers#delta()::: pointers delta:::return
DerivedOopTest.Pointers#equals(Object)::: pointers equals:::if->return->other->return->this->delta->other->delta
DerivedOopTest.Pointers#hashCode()::: pointers hash code:::return->delta
DerivedOopTest.Result#hashCode()::: result hash code:::prime->result->afterGC->hashCode->beforeGC->hashCode->return
DerivedOopTest.Result#equals(Object)::: result equals:::if->return->other->return->Objects->equals->Objects->equals
DerivedOopTest#testFieldOffset()::: derived oop test test field offset:::for->i
DerivedOopTest#getRawPointer(Object)::: derived oop test get raw pointer:::return->obj->hashCode
DerivedOopTest#getRawPointerIntrinsic(Object)::: derived oop test get raw pointer intrinsic:::return->Word->objectToTrackedPointer->rawValue
DerivedOopTest#fieldOffsetSnippet(Result, long)::: derived oop test field offset snippet:::internalPointer->getRawPointer->GraalDirectives->blackhole->getRawPointer->System->gc->getRawPointer->return
DerivedOopTest#testFieldOffsetMergeNonLiveBasePointer()::: derived oop test test field offset merge non live base pointer:::thrown->expect->thrown->expectMessage->debug->getDebugContext->try->s->debug->disable->for->i->catch->finally
DerivedOopTest#testFieldOffsetMergeNonLiveBasePointerNotAccrossSafepoint()::: derived oop test test field offset merge non live base pointer not accross safepoint:::for->i
DerivedOopTest#testFieldOffsetMergeLiveBasePointer()::: derived oop test test field offset merge live base pointer:::thrown->expect->thrown->expectMessage->debug->getDebugContext->try->s->debug->disable->for->i->catch->finally
DerivedOopTest#fieldOffsetMergeSnippet01(Result, long, long)::: derived oop test field offset merge snippet01:::internalPointer->if->getRawPointer->else->getRawPointer->GraalDirectives->controlFlowAnchor->GraalDirectives->blackhole->getRawPointer->System->gc->getRawPointer->return
DerivedOopTest#fieldOffsetMergeSnippet02(Result, long, long)::: derived oop test field offset merge snippet02:::internalPointer->if->getRawPointer->else->getRawPointer->GraalDirectives->controlFlowAnchor->GraalDirectives->blackhole->getRawPointer->getRawPointer->return
DerivedOopTest#fieldOffsetMergeSnippet03(Result, Result, Result, long, long)::: derived oop test field offset merge snippet03:::internalPointer->if->getRawPointer->else->getRawPointer->GraalDirectives->controlFlowAnchor->GraalDirectives->blackhole->getRawPointer->System->gc->getRawPointer->return
DerivedOopTest#registerInvocationPlugins(InvocationPlugins)::: derived oop test register invocation plugins:::r->new->Registration->bytecodeProvider->getSystemClassLoaderBytecodeProvider->intrinsic->getResolvedJavaMethod->r->new->InvocationPlugin->register1->super->registerInvocationPlugins
DerivedOopTest#checkHighTierGraph(StructuredGraph)::: derived oop test check high tier graph:::super->checkHighTierGraph
DynamicNewArrayTest#test1()::: dynamic new array test test1:::test
DynamicNewArrayTest#test2()::: dynamic new array test test2:::test
DynamicNewArrayTest#test3()::: dynamic new array test test3:::test
DynamicNewArrayTest#test4()::: dynamic new array test test4:::test->test
DynamicNewArrayTest#test5()::: dynamic new array test test5:::test
DynamicNewArrayTest#test6()::: dynamic new array test test6:::test
DynamicNewArrayTest#test7()::: dynamic new array test test7:::test
DynamicNewArrayTest#testStub()::: dynamic new array test test stub:::method->getResolvedJavaMethod->actual1->executeActual->actual2->executeActual->expected->executeExpected->assertEquals->assertEquals
DynamicNewArrayTest#test1snippet()::: dynamic new array test test1snippet:::return->Array->newInstance
DynamicNewArrayTest#test2snippet()::: dynamic new array test test2snippet:::return->Array->newInstance
DynamicNewArrayTest#dynamic(Class, int)::: dynamic new array test dynamic:::return->Array->newInstance
DynamicNewArrayTest#dynamicSynchronized(Class, int)::: dynamic new array test dynamic synchronized:::return->Array->newInstance
EdgesTest#createGraph()::: edges test create graph:::options->getInitialOptions->return->getDebugContext->new->StructuredGraph.Builder->build
EdgesTest#test0():::Checks that there are no checkcasts in the compiled version of Edges#getNode(Node, long[], int).:::getMethod->inputs->getOffsets->testMethod
EdgesTest#test1():::Checks that there are no checkcasts in the compiled version of Edges#getNodeList(Node, long[], int).:::getMethod->inputs->getOffsets->testMethod
EdgesTest#test2():::Checks that there are no checkcasts in the compiled version of Edges#setNode(Node, int, Node).:::getMethod->testMethod
EdgesTest#testMethod(Method, Object, Object...)::: edges test test method:::try->for->i->catch->throw->new->RuntimeException->finally->javaMethod->getMetaAccess->lookupJavaMethod->g->parseProfiled->context->getDefaultHighTierContext->new->InlineMethodSubstitutionsPolicy->new->CanonicalizerPhase->new->InliningPhase->apply->new->CanonicalizerPhase->apply->Assert->g->getNodes->filter->isEmpty->assertTrue
EdgesTest#getMethod(String, Class...)::: edges test get method:::try->return->getDeclaredMethod->catch->throw->new->RuntimeException->finally
FloatArraysEqualsTest#testFloatArraySnippet(float[], float[])::: float arrays equals test test float array snippet:::return->Arrays->equals
FloatArraysEqualsTest#testEqualInFloatArray(int, int, float, float)::: float arrays equals test test equal in float array:::if->a1->new->floatArr->a2->new->floatArr->test
FloatArraysEqualsTest#testFloatArray()::: float arrays equals test test float array:::foreach->new->intArr->foreach->new->intArr->testEqualInFloatArray->testEqualInFloatArray->Float->intBitsToFloat->Float->intBitsToFloat->testEqualInFloatArray->Float->intBitsToFloat->Float->intBitsToFloat->testEqualInFloatArray->Float->intBitsToFloat->testEqualInFloatArray
FloatArraysEqualsTest#testDoubleArraySnippet(double[], double[])::: float arrays equals test test double array snippet:::return->Arrays->equals
FloatArraysEqualsTest#testEqualInDoubleArray(int, int, double, double)::: float arrays equals test test equal in double array:::if->a1->new->doubleArr->a2->new->doubleArr->test
FloatArraysEqualsTest#testDoubleArrayOrdinary()::: float arrays equals test test double array ordinary:::foreach->new->intArr->foreach->new->intArr->testEqualInDoubleArray->testEqualInDoubleArray->Double->longBitsToDouble->Double->longBitsToDouble->testEqualInDoubleArray->Double->longBitsToDouble->Double->longBitsToDouble->testEqualInDoubleArray->Double->longBitsToDouble->testEqualInDoubleArray
FloatArraysEqualsTest#testFloatArrayWithPEASnippet0()::: float arrays equals test test float array with snippet0:::return->Arrays->new->floatArr->new->floatArr->equals
FloatArraysEqualsTest#testFloatArrayWithPEASnippet1()::: float arrays equals test test float array with snippet1:::return->Arrays->new->floatArr->Float->intBitsToFloat->new->floatArr->Float->intBitsToFloat->equals
FloatArraysEqualsTest#testFloatArrayWithPEASnippet2()::: float arrays equals test test float array with snippet2:::return->Arrays->new->floatArr->Float->intBitsToFloat->new->floatArr->Float->intBitsToFloat->equals
FloatArraysEqualsTest#testFloatArrayWithPEA()::: float arrays equals test test float array with a:::test->test->test
FloatArraysEqualsTest#testDoubleArrayWithPEASnippet0()::: float arrays equals test test double array with snippet0:::return->Arrays->new->doubleArr->new->doubleArr->equals
FloatArraysEqualsTest#testDoubleArrayWithPEASnippet1()::: float arrays equals test test double array with snippet1:::return->Arrays->new->doubleArr->Double->longBitsToDouble->new->doubleArr->Double->longBitsToDouble->equals
FloatArraysEqualsTest#testDoubleArrayWithPEASnippet2()::: float arrays equals test test double array with snippet2:::return->Arrays->new->doubleArr->Double->longBitsToDouble->new->doubleArr->Double->longBitsToDouble->equals
FloatArraysEqualsTest#testDoubleArrayWithPEA()::: float arrays equals test test double array with a:::test->test->test
FloatArraysEqualsTest#testStableFloatArraySnippet0()::: float arrays equals test test stable float array snippet0:::return->Arrays->equals
FloatArraysEqualsTest#testStableFloatArraySnippet1()::: float arrays equals test test stable float array snippet1:::return->Arrays->equals
FloatArraysEqualsTest#testStableDoubleArraySnippet0()::: float arrays equals test test stable double array snippet0:::return->Arrays->equals
FloatArraysEqualsTest#testStableDoubleArraySnippet1()::: float arrays equals test test stable double array snippet1:::return->Arrays->equals
FloatArraysEqualsTest#testStableArray(String)::: float arrays equals test test stable array:::method->getResolvedJavaMethod->expected->executeExpected->graph->parseEager->foreach->graph->getNodes->filter->snapshot->if->getConstantReflection->constantNode->asJavaConstant->readArrayLength->newConstantNode->ConstantNode->constantNode->asJavaConstant->getMetaAccess->forConstant->graph->unique->constantNode->replaceAndDelete->result->compile->code->graph->getDebug->addMethod->actual->try->code->executeVarargs->new->Result->catch->new->Result->finally->assertEquals
FloatArraysEqualsTest#testStableArray()::: float arrays equals test test stable array:::testStableArray->testStableArray->testStableArray->testStableArray
FoldTest.TestMethod#test()::: test method test:::return
FoldTest.FoldUtils#multiply(int, int)::: fold utils multiply:::return->GraalDirectives->opaque
FoldTest.FoldUtils#getNumber()::: fold utils get number:::return->GraalDirectives->opaque
FoldTest.TestMethodSubstitution#test()::: test method substitution test:::return->FoldUtils->utils->getNumber->multiply
FoldTest#registerInvocationPlugins(InvocationPlugins)::: fold test register invocation plugins:::injection->getMetaAccess->getSnippetReflection->getProviders->getForeignCalls->new->NodeIntrinsificationProvider->new->PluginFactory_FoldTest->registerPlugins->replacementBytecodeProvider->getSystemClassLoaderBytecodeProvider->r->new->Registration->r->registerMethodSubstitution->super->registerInvocationPlugins
FoldTest#callTest()::: fold test call test:::return->TestMethod->test
FoldTest#checkHighTierGraph(StructuredGraph)::: fold test check high tier graph:::start->graph->start->ret->start->next
FoldTest#snippetTest()::: fold test snippet test:::test
IndexOobBytecodeExceptionTest.Exceptions#throwOutOfBounds(int, int)::: exceptions throw out of bounds:::GraalDirectives->blackhole->GraalDirectives->blackhole
IndexOobBytecodeExceptionTest#registerInvocationPlugins(InvocationPlugins)::: index oob bytecode exception test register invocation plugins:::invocationPlugins->new->InvocationPlugin->register->super->registerInvocationPlugins
IndexOobBytecodeExceptionTest#oobSnippet(int, int)::: index oob bytecode exception test oob snippet:::Exceptions->throwOutOfBounds
IndexOobBytecodeExceptionTest#data()::: index oob bytecode exception test data:::values->ret->new->ArrayList<>->foreach->ret->new->ObjectArr->add->return
IndexOobBytecodeExceptionTest#testOutOfBoundsException()::: index oob bytecode exception test test out of bounds exception:::test
InstanceOfDynamicTest#id(int)::: instance of dynamic test id:::return
InstanceOfDynamicTest#test100()::: instance of dynamic test test100:::nul->test->test->test
InstanceOfDynamicTest#test101()::: instance of dynamic test test101:::nul->test->test->test
InstanceOfDynamicTest#test103()::: instance of dynamic test test103:::test->test->test->test->test->test
InstanceOfDynamicTest#test104()::: instance of dynamic test test104:::test->test->test->test->test->test
InstanceOfDynamicTest#isStringDynamic(Object)::: instance of dynamic test is string dynamic:::return->isInstance
InstanceOfDynamicTest#isStringIntDynamic(Object)::: instance of dynamic test is string int dynamic:::if->isInstance->return->o->toString->length->return->o->getClass->getName->length
InstanceOfDynamicTest#isInstanceDynamic(Class, Object)::: instance of dynamic test is instance dynamic:::return->c->isInstance
InstanceOfDynamicTest#isInstanceIntDynamic(Class, Object)::: instance of dynamic test is instance int dynamic:::if->c->isInstance->return->o->toString->length->return->o->getClass->getName->length
InstanceOfTest#replaceProfile(StructuredGraph, JavaTypeProfile)::: instance of test replace profile:::ion->graph->getNodes->filter->first->if->ion->graph->start->setProfile
InstanceOfTest#test1()::: instance of test test1:::profile->test->profile->test->profile->test->profile->test
InstanceOfTest#test2()::: instance of test test2:::profile->test->profile->test->profile->test->profile->test
InstanceOfTest#test201()::: instance of test test201:::profile->test->profile->test->profile->test->profile->test
InstanceOfTest#test3()::: instance of test test3:::throwable->new->Exception->profile->test->profile->test->profile->test->profile->test->profile->test->profile->test
InstanceOfTest#test301()::: instance of test test301:::new->Exception->new->Error->onlyFirstIsException->profile->new->Exception->new->Error->test->profile->new->Error->new->Exception->test->profile->new->Exception->new->Exception->test->profile->new->Error->new->Error->test
InstanceOfTest#test4()::: instance of test test4:::throwable->new->Exception->profile->test->profile->test->profile->test->profile->test->profile->test->profile->test
InstanceOfTest#test5()::: instance of test test5:::map->new->HashMap<>->profile->test->profile->test->profile->test->profile->test->profile->test->profile->test->profile->test
InstanceOfTest#test6()::: instance of test test6:::map->new->HashMap<>->profile->test->profile->test->profile->test->profile->test->profile->test->profile->test
InstanceOfTest#test7()::: instance of test test7:::o->new->Depth13->profile->test->profile->test->profile->test->profile->test->profile->test->profile->test->profile->test
InstanceOfTest#test8()::: instance of test test8:::o->new->Depth13->profile->test->profile->test->profile->test->profile->test->profile->test->profile->test
InstanceOfTest#isString(Object)::: instance of test is string:::return
InstanceOfTest#isStringInt(Object)::: instance of test is string int:::if->return->id->return->id
InstanceOfTest#isStringIntComplex(Object)::: instance of test is string int complex:::if->return->id->return->id
InstanceOfTest#id(int)::: instance of test id:::return
InstanceOfTest#isThrowable(Object)::: instance of test is throwable:::return
InstanceOfTest#onlyFirstIsException(Throwable, Throwable)::: instance of test only first is exception:::if->return->return
InstanceOfTest#isThrowableInt(Object)::: instance of test is throwable int:::result->if->return->id->return
InstanceOfTest#isMap(Object)::: instance of test is map:::return
InstanceOfTest#isMapInt(Object)::: instance of test is map int:::if->return->id->return->id
InstanceOfTest#isDepth12(Object)::: instance of test is depth12:::return
InstanceOfTest#isDepth12Int(Object)::: instance of test is depth12 int:::if->return->id->return->id
InstanceOfTest#test9()::: instance of test test9:::callAt63->new->MyCall->markAt63->new->MyMark->test->test->test->test
InstanceOfTest#compareMySites(MySite, MySite)::: instance of test compare my sites:::if->return->return
InstanceOfTest#test10()::: instance of test test10:::callAt63->new->Call->markAt63->new->Mark->test->test->test->test
InstanceOfTest#compareSites(Site, Site)::: instance of test compare sites:::if->return->return
InstanceOfTest#testRemoveIntermediateMaterialization():::This test exists to show the kind of pattern that is be optimizable by removeIntermediateMaterialization() in IfNode:::list->Arrays->asList->profile->test->profile->test->profile->test
InstanceOfTest#removeIntermediateMaterialization(List, Object, String, String)::: instance of test remove intermediate materialization:::test->if->else->foreach->if->i->equals->break->if->return->return
InstanceOfTest#isArrayOfA(Object)::: instance of test is array of a:::return
InstanceOfTest#isArrayOfB(Object)::: instance of test is array of b:::return
InstanceOfTest#isArrayOfC(Object)::: instance of test is array of c:::return
InstanceOfTest#isArrayOfD(Object)::: instance of test is array of d:::return
InstanceOfTest#testArray()::: instance of test test array:::aArray->new->AArr->test->bArray->new->BArr->test->test->test->test->cArray->new->CArr->test->test->test->test->test->test->test->test->test->dArray->new->DArr->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test
InstanceOfTest#arrayCopyTypeName(T[])::: instance of test array copy type name:::newType->original->getClass->if->return->getName->else->return->newType->getName
InstanceOfTest#testArrayCopy()::: instance of test test array copy:::new->ObjectArr->test->new->StringArr->test
InstanceOfTest#conditionalInstantiation(Object)::: instance of test conditional instantiation:::total->if->if->return
InstanceOfTest#testInstantiation()::: instance of test test instantiation:::test->new->StringBuilder->test->test
InstanceOfTest#exactlyObject(Thread)::: instance of test exactly object:::return->getClass
InstanceOfTest#exactlyObjectArray(Thread[])::: instance of test exactly object array:::return->getClass
InstanceOfTest#exactlyString(Thread)::: instance of test exactly string:::return->getClass
InstanceOfTest#exactlyStringArray(Thread[])::: instance of test exactly string array:::return->getClass
InstanceOfTest#instanceofStringArray(Thread[])::: instance of test instanceof string array:::return
InstanceOfTest#instanceofString(Thread)::: instance of test instanceof string:::return
InstanceOfTest#testTypeCheck()::: instance of test test type check:::testConstantReturn->testConstantReturn->testConstantReturn->testConstantReturn->testConstantReturn->testConstantReturn
InstanceOfTest#testConstantReturn(String, Object)::: instance of test test constant return:::result->buildGraph->ret->result->getNodes->first->result->getNodes->count->assertDeepEquals->ret->result->isConstant->assertDeepEquals->ret->result->asJavaConstant->asBoxedPrimitive->assertDeepEquals
InstanceOfTest#buildGraph(String)::: instance of test build graph:::debug->getDebugContext->try->s->debug->getMetaAccess->getMethod->lookupJavaMethod->scope->graph->parseEager->graph->method->compile->debug->dump->return->catch->throw->debug->handle->finally
IntegerExactExceptionTest#testIntegerExactOverflowSnippet(int)::: integer exact exception test test integer exact overflow snippet:::try->Math->addExact->catch->finally
IntegerExactExceptionTest#testIntegerExact()::: integer exact exception test test integer exact:::method->getResolvedJavaMethod->code->getCode->code->executeVarargs->if->code->isValid->getCode->code->executeVarargs->code->isValid->assertTrue
IntegerExactExceptionTest#testIntegerExactOverflowWithoutHandlerSnippetW(int)::: integer exact exception test test integer exact overflow without handler snippet w:::try->Math->addExact->catch->finally
IntegerExactExceptionTest#testIntegerExactWithoutHandler()::: integer exact exception test test integer exact without handler:::method->getResolvedJavaMethod->code->getCode->try->code->executeVarargs->catch->finally->if->code->isValid->getCode->try->code->executeVarargs->catch->finally->code->isValid->assertTrue
IntegerExactExceptionTest#testIntegerExactOverflowWithoutUse1(int)::: integer exact exception test test integer exact overflow without use1:::Math->addExact
IntegerExactExceptionTest#testIntegerExactOverflowWithoutUse2(int, boolean)::: integer exact exception test test integer exact overflow without use2:::if->Math->addExact->else->Math->addExact
IntegerExactExceptionTest#testIntegerExactOverflowWithoutUse3()::: integer exact exception test test integer exact overflow without use3:::Math->addExact
IntegerExactExceptionTest#testIntegerExactWithoutUse1()::: integer exact exception test test integer exact without use1:::method->getResolvedJavaMethod->code->getCode->gotException->try->code->executeVarargs->catch->finally->assertTrue
IntegerExactExceptionTest#testIntegerExactWithoutUse2()::: integer exact exception test test integer exact without use2:::method->getResolvedJavaMethod->code->getCode->gotException->try->code->executeVarargs->catch->finally->assertTrue
IntegerExactExceptionTest#testIntegerExactWithoutUse3()::: integer exact exception test test integer exact without use3:::method->getResolvedJavaMethod->code->getCode->gotException->try->code->executeVarargs->catch->finally->assertTrue
IntegerExactExceptionTest#testLongExactOverflowSnippet(long)::: integer exact exception test test long exact overflow snippet:::try->Math->addExact->catch->finally
IntegerExactExceptionTest#testLongExact()::: integer exact exception test test long exact:::method->getResolvedJavaMethod->code->getCode->code->executeVarargs->if->code->isValid->getCode->code->executeVarargs->code->isValid->assertTrue
IntegerExactExceptionTest#testLongExactWithoutHandlerSnippet(long)::: integer exact exception test test long exact without handler snippet:::try->Math->addExact->catch->finally
IntegerExactExceptionTest#testLongExactWithoutHandler()::: integer exact exception test test long exact without handler:::method->getResolvedJavaMethod->code->getCode->try->code->executeVarargs->catch->finally->if->code->isValid->getCode->try->code->executeVarargs->catch->finally->code->isValid->assertTrue
IntegerExactExceptionTest#testLongExactOverflowWithoutUse1(long)::: integer exact exception test test long exact overflow without use1:::Math->addExact
IntegerExactExceptionTest#testLongExactOverflowWithoutUse2(long, boolean)::: integer exact exception test test long exact overflow without use2:::if->Math->addExact->else->Math->addExact
IntegerExactExceptionTest#testLongExactWithoutUse1()::: integer exact exception test test long exact without use1:::method->getResolvedJavaMethod->code->getCode->gotException->try->code->executeVarargs->catch->finally->assertTrue
IntegerExactExceptionTest#testLongExactWithoutUse2()::: integer exact exception test test long exact without use2:::method->getResolvedJavaMethod->code->getCode->gotException->try->code->executeVarargs->catch->finally->assertTrue
IntegerExactFoldTest#testFolding()::: integer exact fold test test folding:::graph->prepareGraph->a->StampFactory->forInteger->b->StampFactory->forInteger->params->graph->getNodes->snapshot->params->get->graph->params->get->new->PiNode->addOrUnique->replaceAtMatchingUsages->params->get->graph->params->get->new->PiNode->addOrUnique->replaceAtMatchingUsages->originalNode->graph->getNodes->filter->first->assertNotNull->new->CanonicalizerPhase->getDefaultHighTierContext->apply->node->findNode->overflowExpected->resultStamp->node->stamp->operation->verifyOverflow
IntegerExactFoldTest#testFoldingAfterLowering()::: integer exact fold test test folding after lowering:::graph->prepareGraph->originalNode->graph->getNodes->filter->first->assertNotNull->canonicalizer->new->CanonicalizerPhase->highTierContext->getDefaultHighTierContext->new->LoweringPhase->apply->midTierContext->getDefaultMidTierContext->new->GuardLoweringPhase->apply->new->CanonicalizerPhase->apply->loweredNode->graph->getNodes->filter->first->assertNotNull->loweredNode->getX->StampFactory->forInteger->setStamp->loweredNode->getY->StampFactory->forInteger->setStamp->new->CanonicalizerPhase->apply->node->findNode->overflowExpected->resultStamp->node->stamp->operation->verifyOverflow
IntegerExactFoldTest#isInteger(long)::: integer exact fold test is integer:::return
IntegerExactFoldTest#findNode(StructuredGraph)::: integer exact fold test find node:::resultNode->graph->getNodes->filter->first->result->assertNotNull->return
IntegerExactFoldTest#prepareGraph()::: integer exact fold test prepare graph:::snippet->graph->operation->getClass->getResolvedJavaMethod->parseEager->context->getDefaultHighTierContext->new->CanonicalizerPhase->apply->return
IntegerExactFoldTest#addTest(ArrayList, long, long, long, long, int, Operation)::: integer exact fold test add test:::tests->new->ObjectArr->add
IntegerExactFoldTest#data()::: integer exact fold test data:::tests->new->ArrayList<>->operations->new->OperationArr->new->AddOperation->new->SubOperation->new->MulOperation->foreach->foreach->new->intArr->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->return
IntegerExactFoldTest.Operation#verifyOverflow(long, long, long, long, int, boolean, IntegerStamp)::: operation verify overflow:::
IntegerExactFoldTest.AddOperation#verifyOverflow(long, long, long, long, int, boolean, IntegerStamp)::: add operation verify overflow:::try->res->addExact->resultStamp->contains->addExact->resultStamp->contains->Assert->assertFalse->catch->Assert->assertTrue->finally
IntegerExactFoldTest.AddOperation#addExact(long, long, int)::: add operation add exact:::if->return->Math->addExact->else->return->Math->addExact
IntegerExactFoldTest.AddOperation#snippetInt32(int, int)::: add operation snippet int32:::return->Math->addExact
IntegerExactFoldTest.AddOperation#snippetInt64(long, long)::: add operation snippet int64:::return->Math->addExact
IntegerExactFoldTest.SubOperation#verifyOverflow(long, long, long, long, int, boolean, IntegerStamp)::: sub operation verify overflow:::try->res->subExact->Assert->resultStamp->contains->assertTrue->subExact->Assert->resultStamp->contains->assertTrue->Assert->assertFalse->catch->Assert->assertTrue->finally
IntegerExactFoldTest.SubOperation#subExact(long, long, int)::: sub operation sub exact:::if->return->Math->subtractExact->else->return->Math->subtractExact
IntegerExactFoldTest.SubOperation#snippetInt32(int, int)::: sub operation snippet int32:::return->Math->subtractExact
IntegerExactFoldTest.SubOperation#snippetInt64(long, long)::: sub operation snippet int64:::return->Math->subtractExact
IntegerExactFoldTest.MulOperation#verifyOverflow(long, long, long, long, int, boolean, IntegerStamp)::: mul operation verify overflow:::overflowOccurred->for->l1->Assert->assertEquals
IntegerExactFoldTest.MulOperation#mulExact(long, long, int)::: mul operation mul exact:::if->return->Math->multiplyExact->else->return->Math->multiplyExact
IntegerExactFoldTest.MulOperation#snippetInt32(int, int)::: mul operation snippet int32:::return->Math->multiplyExact
IntegerExactFoldTest.MulOperation#snippetInt64(long, long)::: mul operation snippet int64:::return->Math->multiplyExact
IntegerSubOverflowsTest#testOverflowCheck()::: integer sub overflows test test overflow check:::a->b->Assert->IntegerStamp->subtractionOverflows->assertFalse
IntegerSubOverflowsTest#testOverflowCheck01()::: integer sub overflows test test overflow check01:::a->b->Assert->IntegerStamp->subtractionOverflows->assertFalse
IntegerSubOverflowsTest#testOverflowCheck02()::: integer sub overflows test test overflow check02:::a->b->Assert->IntegerStamp->subtractionOverflows->assertFalse
IntegerSubOverflowsTest#testOverflowCheck03()::: integer sub overflows test test overflow check03:::a->b->Assert->IntegerStamp->subtractionOverflows->assertTrue
IntegerSubOverflowsTest#testOverflowCheck04()::: integer sub overflows test test overflow check04:::a->b->Assert->IntegerStamp->subtractionOverflows->assertFalse
IntegerSubOverflowsTest#testOverflowCheck05()::: integer sub overflows test test overflow check05:::a->b->Assert->IntegerStamp->subtractionOverflows->assertTrue
IntegerSubOverflowsTest#testOverflowCheck06()::: integer sub overflows test test overflow check06:::a->b->Assert->IntegerStamp->subtractionOverflows->assertFalse
IntegerSubOverflowsTest#testOverflowCheck07()::: integer sub overflows test test overflow check07:::a->b->Assert->IntegerStamp->subtractionOverflows->assertFalse
IntegerSubOverflowsTest#testOverflowCheck08()::: integer sub overflows test test overflow check08:::a->b->Assert->IntegerStamp->subtractionOverflows->assertFalse
IntegerSubOverflowsTest#testOverflowCheck09()::: integer sub overflows test test overflow check09:::a->b->Assert->IntegerStamp->subtractionOverflows->assertTrue
IntegerSubOverflowsTest#testOverflowCheck10()::: integer sub overflows test test overflow check10:::a->b->Assert->IntegerStamp->subtractionOverflows->assertFalse
IntegerSubOverflowsTest#testOverflowCheck11()::: integer sub overflows test test overflow check11:::a->b->Assert->IntegerStamp->subtractionOverflows->assertTrue
IntegerSubOverflowsTest#testOverflowCheckStamp()::: integer sub overflows test test overflow check stamp:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertFalse
IntegerSubOverflowsTest#testOverflowCheckStamp01()::: integer sub overflows test test overflow check stamp01:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertFalse
IntegerSubOverflowsTest#testOverflowCheckStamp02()::: integer sub overflows test test overflow check stamp02:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertFalse
IntegerSubOverflowsTest#testOverflowCheckStamp03()::: integer sub overflows test test overflow check stamp03:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertTrue
IntegerSubOverflowsTest#testOverflowCheckStamp04()::: integer sub overflows test test overflow check stamp04:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertFalse
IntegerSubOverflowsTest#testOverflowCheckStamp05()::: integer sub overflows test test overflow check stamp05:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertFalse
IntegerSubOverflowsTest#testOverflowCheckStamp06()::: integer sub overflows test test overflow check stamp06:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertFalse
IntegerSubOverflowsTest#testOverflowCheckStamp07()::: integer sub overflows test test overflow check stamp07:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertTrue
IntegerSubOverflowsTest#testOverflowCheckStamp08()::: integer sub overflows test test overflow check stamp08:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertFalse
IntegerSubOverflowsTest#testOverflowCheckStamp09()::: integer sub overflows test test overflow check stamp09:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertFalse
IntegerSubOverflowsTest#testOverflowCheckStamp10()::: integer sub overflows test test overflow check stamp10:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertFalse
IntegerSubOverflowsTest#testOverflowCheckStamp11()::: integer sub overflows test test overflow check stamp11:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertTrue
IntegerSubOverflowsTest#testOverflowBIgStamps01()::: integer sub overflows test test overflow ig stamps01:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertTrue
IntegerSubOverflowsTest#testOverflowBIgStamps02()::: integer sub overflows test test overflow ig stamps02:::s1->StampFactory->forInteger->s2->StampFactory->forInteger->Assert->IntegerStamp->subtractionCanOverflow->assertTrue
InvokerSignatureMismatchTest#test()::: invoker signature mismatch test test:::args->getVMCommandLine->withoutDebuggerArguments->classPath->System->getProperty->getProtectionDomain->getCodeSource->getLocation->getPath->args->add->args->add->args->add->args->add->args->getName->add->proc->SubprocessUtil->java->if->println
TestISMBL#main(String[])::: test l main:::try->new->TestISMBL->test->catch->e->printStackTrace->System->exit->finally->System->exit
TestISMBL#test()::: test l test:::getClass->testClass->getClass->mL->getResolvedJavaMethod->mI->getResolvedJavaMethod->executeActual->executeActual
TestISMBL#getClass(String)::: test l get class:::if->className->equals->return->super->MethodHandles->lookup->getClassBL->else->return->super->getClass
TestISMBL#generateClass(String)::: test l generate class:::exceptions->new->StringArr->cw->new->ClassWriter->cw->visit->if->className->equals->internalMemberName->cw->visitMethod->internalMemberName->visitCode->internalMemberName->visitVarInsn->internalMemberName->visitMethodInsn->internalMemberName->visitInsn->internalMemberName->visitMaxs->internalMemberName->visitEnd->linkToStatic->cw->visitMethod->linkToStatic->visitCode->linkToStatic->visitVarInsn->linkToStatic->visitVarInsn->linkToStatic->visitMethodInsn->linkToStatic->visitInsn->linkToStatic->visitMaxs->linkToStatic->visitEnd->invokeBasicI->cw->visitMethod->invokeBasicI->visitCode->invokeBasicI->visitVarInsn->invokeBasicI->visitVarInsn->invokeBasicI->visitMethodInsn->invokeBasicI->visitInsn->invokeBasicI->visitMaxs->invokeBasicI->visitEnd->else->cw->visitField->visitAnnotation->visitEnd->clinit->cw->visitMethod->clinit->visitCode->clinit->visitInsn->clinit->visitVarInsn->clinit->visitMethodInsn->clinit->Type->getObjectType->visitLdcInsn->clinit->visitLdcInsn->clinit->visitFieldInsn->clinit->visitFieldInsn->clinit->visitMethodInsn->clinit->visitMethodInsn->clinit->visitFieldInsn->clinit->visitInsn->clinit->visitMaxs->clinit->visitEnd->mainLink->cw->visitMethod->mainLink->visitCode->mainLink->visitFieldInsn->mainLink->visitMethodInsn->mainLink->visitVarInsn->mainLink->visitVarInsn->mainLink->visitInsn->mainLink->visitVarInsn->mainLink->visitMethodInsn->mainLink->visitInsn->mainLink->visitMaxs->mainLink->visitEnd->mainInvoke->cw->visitMethod->mainInvoke->visitCode->mainInvoke->visitFieldInsn->mainInvoke->visitVarInsn->mainInvoke->visitInsn->mainInvoke->visitMethodInsn->mainInvoke->visitInsn->mainInvoke->visitMaxs->mainInvoke->visitEnd->bodyI->cw->visitMethod->bodyI->visitCode->bodyI->visitVarInsn->bodyI->visitIntInsn->bodyI->visitInsn->bodyI->visitInsn->bodyI->visitMaxs->bodyI->visitEnd->cw->visitEnd->return->cw->toByteArray
InvokeTest.I#virtualMethod(String)::: i virtual method:::
InvokeTest.A#virtualMethod(String)::: a virtual method:::return
InvokeTest#privateMethod(String)::: invoke test private method:::return
InvokeTest#test1()::: invoke test test1:::test->test->test->new->A->test->new->A->test->new->A->test->args->test->test->test->test->test->test
InvokeTest#invokestatic(String)::: invoke test invokestatic:::return->staticMethod
InvokeTest#staticMethod(String)::: invoke test static method:::return
InvokeTest#invokespecialConstructor(String)::: invoke test invokespecial constructor:::return->new->A->virtualMethod
InvokeTest#invokespecial(InvokeTest, String)::: invoke test invokespecial:::return->a->privateMethod
InvokeTest#invokevirtual(A, String)::: invoke test invokevirtual:::return->a->virtualMethod
InvokeTest#invokevirtual2(A, String)::: invoke test invokevirtual2:::a->virtualMethod->return->a->virtualMethod
InvokeTest#invokeinterface(I, String)::: invoke test invokeinterface:::return->i->virtualMethod
MethodSubstitutionTest#testGraph(String)::: method substitution test test graph:::return->testGraph
MethodSubstitutionTest#testGraph(String, boolean)::: method substitution test test graph:::return->testGraph
MethodSubstitutionTest#testGraph(String, String)::: method substitution test test graph:::return->testGraph
MethodSubstitutionTest#testGraph(String, String, boolean)::: method substitution test test graph:::return->getResolvedJavaMethod->testGraph
MethodSubstitutionTest#testGraph(ResolvedJavaMethod, String, boolean)::: method substitution test test graph:::debug->getDebugContext->try->s->debug->scope->graph->parseEager->context->getDefaultHighTierContext->debug->dump->createInliningPhase->apply->debug->dump->new->CanonicalizerPhase->apply->new->DeadCodeEliminationPhase->apply->if->graph->getNodes->filter->isNotEmpty->new->CanonicalizerPhase->new->LoweringPhase->apply->if->graph->getNodes->filter->isNotEmpty->new->CanonicalizerPhase->new->LoweringPhase->apply->assertNotInGraph->if->foreach->graph->getNodes->if->invoke->if->invoke->callTarget->call->invoke->callTarget->found->call->targetMethod->getName->equals->if->assertTrue->else->assertFalse->else->if->assertInGraph->else->assertNotInGraph->return->catch->throw->debug->handle->finally
MethodSubstitutionTest#assertNotInGraph(StructuredGraph, Class)::: method substitution test assert not in graph:::foreach->graph->getNodes->if->clazz->isInstance->node->toString->fail->return
MethodSubstitutionTest#testSubstitution(String, Class, Class, String, Class[], boolean, boolean, Object[], Object[])::: method substitution test test substitution:::realMethod->getResolvedJavaMethod->testMethod->getResolvedJavaMethod->graph->testGraph->replacement->getReplacements->graph->getOptions->getSubstitution->if->assertInGraph->code->getCode->for->i
MethodSubstitutionTest#assertInGraph(StructuredGraph, Class)::: method substitution test assert in graph:::foreach->graph->getNodes->if->clazz->isInstance->return->clazz->getName->fail->return
MethodSubstitutionTest#executeVarargsSafe(InstalledCode, Object...)::: method substitution test execute varargs safe:::try->return->code->executeVarargs->catch->throw->new->RuntimeException->finally
MethodSubstitutionTest#invokeSafe(ResolvedJavaMethod, Object, Object...)::: method substitution test invoke safe:::try->return->invoke->catch->throw->new->RuntimeException->finally
MonitorTest#test0()::: monitor test test0:::new->Object->new->Object->test->new->Object->test->test
MonitorTest#test01()::: monitor test test01:::new->Object->test->test
MonitorTest#test02()::: monitor test test02:::test
MonitorTest#test101()::: monitor test test101:::new->Object->new->StringArr->test
MonitorTest#test102()::: monitor test test102:::new->StringArr->test
MonitorTest#test2()::: monitor test test2:::new->StringArr->test
MonitorTest#test3():::Tests monitor operations on PartialEscapePhase virtual objects.:::new->StringArr->test
MonitorTest#test4():::Tests recursive locking of objects which should be biasable.:::src->toCharArray->new->Chars->dst->new->Chars->test
MonitorTest#test5():::Tests recursive locking of objects which do not appear to be biasable.:::src->toCharArray->dst->new->charArr->test
MonitorTest#test6():::Extends #test4() with contention.:::src->toCharArray->new->Chars->dst->new->Chars->n->Runtime->getRuntime->availableProcessors->testN
MonitorTest#test7():::Extends #test5() with contention.:::src->toCharArray->dst->new->charArr->n->Math->Runtime->getRuntime->availableProcessors->min->testN
MonitorTest#setAndGet(String[], String)::: monitor test set and get:::synchronized->System->gc->synchronized->return
MonitorTest#lockObjectSimple(Object, Object)::: monitor test lock object simple:::synchronized->value->hashCode->return
MonitorTest#lockThisSimple(String, Object)::: monitor test lock this simple:::synchronized->synchronized->o->hashCode->return
MonitorTest#lockObject(Object, String, String[])::: monitor test lock object:::synchronized->return->setAndGet
MonitorTest#lockThis(String, String[])::: monitor test lock this:::synchronized->return->setAndGet
MonitorTest#lockLocalObject(String, String[])::: monitor test lock local object:::o->new->Object->synchronized->return->setAndGet
MonitorTest#copyObj(Chars, Chars, int)::: monitor test copy obj:::for->j->return->new->String
MonitorTest#copyArr(char[], char[], int)::: monitor test copy arr:::for->j->return->new->String
MonitorTest#lockBoxedLong(long)::: monitor test lock boxed long:::lock->synchronized->return->lock->toString
MonitorTest#test8():::Reproduces issue reported in https://github.com/graalvm/graal-core/issues/201:::test->test->test
NestedExceptionHandlerTest#foo()::: nested exception handler test foo:::
NestedExceptionHandlerTest#bar()::: nested exception handler test bar:::throw->new->NegativeArraySizeException
NestedExceptionHandlerTest#nestedExceptionHandler()::: nested exception handler test nested exception handler:::flag->try->try->try->foo->catch->finally->bar->catch->finally->catch->GraalDirectives->deoptimize->finally->return
NestedExceptionHandlerTest#testNestedExceptionHandler()::: nested exception handler test test nested exception handler:::getInitialOptions->new->OptionValues->test
NestedExceptionHandlerTest#snippet1()::: nested exception handler test snippet1:::try->synchronized->try->scope->return->catch->return->t->toString->finally->catch->finally->raise
NestedExceptionHandlerTest#raise()::: nested exception handler test raise:::throw->new->RuntimeException
NestedExceptionHandlerTest#snippet2()::: nested exception handler test snippet2:::try->synchronized->try->scope->return->performCompilation->catch->return->t->toString->finally->catch->finally->synchronized->toString
NestedExceptionHandlerTest#performCompilation()::: nested exception handler test perform compilation:::return
NestedExceptionHandlerTest#testSnippet1()::: nested exception handler test test snippet1:::options->parseAllCodeWithoutInlining->method->getResolvedJavaMethod->parseEager
NestedExceptionHandlerTest#testSnippet2()::: nested exception handler test test snippet2:::options->parseAllCodeWithoutInlining->method->getResolvedJavaMethod->parseEager
NestedExceptionHandlerTest#parseAllCodeWithoutInlining()::: nested exception handler test parse all code without inlining:::options->getInitialOptions->new->OptionValues->return
NewArrayTest#assertDeepEquals(Object, Object)::: new array test assert deep equals:::Assert->assertTrue->Assert->assertTrue->super->expected->getClass->actual->getClass->assertDeepEquals->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->if->Assert->assertArrayEquals->else->Assert->fail
NewArrayTest#test1()::: new array test test1:::foreach->new->StringArr->test->test->test->test->test->test
NewArrayTest#newCharArray7()::: new array test new char array7:::return->new->charArr
NewArrayTest#newCharArrayMinus7()::: new array test new char array minus7:::return->new->charArr
NewArrayTest#newCharArray(int)::: new array test new char array:::return->new->charArr
NewArrayTest#newShortArray7()::: new array test new short array7:::return->new->shortArr
NewArrayTest#newShortArrayMinus7()::: new array test new short array minus7:::return->new->shortArr
NewArrayTest#newShortArray(int)::: new array test new short array:::return->new->shortArr
NewArrayTest#newFloatArray7()::: new array test new float array7:::return->new->floatArr
NewArrayTest#newFloatArrayMinus7()::: new array test new float array minus7:::return->new->floatArr
NewArrayTest#newFloatArray(int)::: new array test new float array:::return->new->floatArr
NewArrayTest#newLongArray7()::: new array test new long array7:::return->new->longArr
NewArrayTest#newLongArrayMinus7()::: new array test new long array minus7:::return->new->longArr
NewArrayTest#newLongArray(int)::: new array test new long array:::return->new->longArr
NewArrayTest#newDoubleArray7()::: new array test new double array7:::return->new->doubleArr
NewArrayTest#newDoubleArrayMinus7()::: new array test new double array minus7:::return->new->doubleArr
NewArrayTest#newDoubleArray(int)::: new array test new double array:::return->new->doubleArr
NewArrayTest#newIntArray7()::: new array test new int array7:::return->new->intArr
NewArrayTest#newIntArrayMinus7()::: new array test new int array minus7:::return->new->intArr
NewArrayTest#newIntArray(int)::: new array test new int array:::return->new->intArr
NewArrayTest#newByteArray7()::: new array test new byte array7:::return->new->byteArr
NewArrayTest#newByteArrayMinus7()::: new array test new byte array minus7:::return->new->byteArr
NewArrayTest#newByteArray(int)::: new array test new byte array:::return->new->byteArr
NewArrayTest#newStringArray7()::: new array test new string array7:::return->new->StringArr
NewArrayTest#newStringArrayMinus7()::: new array test new string array minus7:::return->new->StringArr
NewArrayTest#newStringArray(int)::: new array test new string array:::return->new->StringArr
NewInstanceTest#assertDeepEquals(Object, Object)::: new instance test assert deep equals:::Assert->assertTrue->Assert->assertTrue->super->expected->getClass->actual->getClass->assertDeepEquals->if->Assert->assertTrue->eArr->aArr->Assert->assertTrue->for->i->else->if->expected->getClass->try->expected->getClass->getDeclaredMethod->super->assertDeepEquals->catch->finally
NewInstanceTest#test1()::: new instance test test1:::test
NewInstanceTest#test2()::: new instance test test2:::test
NewInstanceTest#newObject()::: new instance test new object:::return->new->Object
NewInstanceTest#test3()::: new instance test test3:::test
NewInstanceTest#test4()::: new instance test test4:::test
NewInstanceTest#test5()::: new instance test test5:::test
NewInstanceTest#test6()::: new instance test test6:::test
NewInstanceTest#test7()::: new instance test test7:::test
NewInstanceTest#test8()::: new instance test test8:::test
NewInstanceTest#test9()::: new instance test test9:::test
NewInstanceTest#newObjectTwice()::: new instance test new object twice:::res->new->Object->new->Object->return
NewInstanceTest#newObjectLoop(int)::: new instance test new object loop:::res->new->ObjectArr->for->i->return
NewInstanceTest#newBigObject()::: new instance test new big object:::return->new->BigObject
NewInstanceTest#newSomeObject()::: new instance test new some object:::return->new->SomeObject
NewInstanceTest#newEmptyString()::: new instance test new empty string:::return->new->String
NewInstanceTest#newString(String)::: new instance test new string:::return->new->String
NewInstanceTest#newHashMap(int)::: new instance test new hash map:::return->new->HashMap<>
NewInstanceTest.SomeObject#equals(Object)::: some object equals:::if->so->return->equals->equals->return
NewInstanceTest.SomeObject#hashCode()::: some object hash code:::return->name->hashCode
NewInstanceTest#newRegression(boolean):::Tests that an earlier bug does not occur:::result->if->arr->new->B->for->i->else->new->B->return
NewMultiArrayTest#rank(ResolvedJavaType)::: new multi array test rank:::name->type->getName->dims->while->name->length->name->charAt->return
NewMultiArrayTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)::: new multi array test get code:::graph->parseForCompile->forceCompile->if->snapshot->graph->getNodes->filter->snapshot->node->snapshot->get->rank->dimensionNodes->new->ValueNodeArr->for->i->repl->graph->new->NewMultiArrayNode->add->graph->replaceFixedWithFixed->return->super->getCode
NewMultiArrayTest#referenceInvoke(ResolvedJavaMethod, Object, Object...)::: new multi array test reference invoke:::if->try->return->Array->newInstance->catch->throw->new->InvocationTargetException->finally->return->super->referenceInvoke
NewMultiArrayTest#test1()::: new multi array test test1:::foreach->new->Class<?>Arr->getMetaAccess->lookupJavaType->foreach->new->intArr->while->rank->arrayType->getArrayClass->new->intArr->for->i->test
NewMultiArrayTest#newMultiArray()::: new multi array test new multi array:::return->new->ObjectArrs
NewMultiArrayTest#test2()::: new multi array test test2:::test
NewMultiArrayTest#newMultiArrayException()::: new multi array test new multi array exception:::return->new->ObjectArrs
NullBytecodeExceptionTest.Exceptions#throwNull()::: exceptions throw null:::obj->toString
NullBytecodeExceptionTest#registerInvocationPlugins(InvocationPlugins)::: null bytecode exception test register invocation plugins:::invocationPlugins->new->InvocationPlugin->register->super->registerInvocationPlugins
NullBytecodeExceptionTest#nullSnippet()::: null bytecode exception test null snippet:::Exceptions->throwNull
NullBytecodeExceptionTest#testNullPointerException()::: null bytecode exception test test null pointer exception:::test
ObjectAccessTest#testRead1()::: object access test test read1:::foreach->kind->name->parseEager->assertRead
ObjectAccessTest#testRead2()::: object access test test read2:::foreach->kind->name->parseEager->assertRead
ObjectAccessTest#testRead3()::: object access test test read3:::foreach->kind->name->parseEager->LocationIdentity->any->assertRead
ObjectAccessTest#testWrite1()::: object access test test write1:::foreach->kind->name->parseEager->assertWrite
ObjectAccessTest#testWrite2()::: object access test test write2:::foreach->kind->name->parseEager->assertWrite
ObjectAccessTest#testWrite3()::: object access test test write3:::foreach->kind->name->parseEager->LocationIdentity->any->assertWrite
ObjectAccessTest#assertRead(StructuredGraph, JavaKind, boolean, LocationIdentity)::: object access test assert read:::read->graph->start->next->Assert->kind->getStackKind->read->stamp->getStackKind->assertEquals->address->read->getAddress->Assert->graph->getParameter->address->getBase->assertEquals->Assert->read->getLocationIdentity->assertEquals->if->convert->address->getOffset->Assert->convert->getInputBits->assertEquals->Assert->convert->getResultBits->assertEquals->Assert->graph->getParameter->convert->getValue->assertEquals->else->Assert->graph->getParameter->address->getOffset->assertEquals->ret->read->next->Assert->ret->result->assertEquals
ObjectAccessTest#assertWrite(StructuredGraph, JavaKind, boolean, LocationIdentity)::: object access test assert write:::write->graph->start->next->valueNode->write->value->if->kind->getStackKind->while->getValue->Assert->graph->getParameter->assertEquals->address->write->getAddress->Assert->graph->getParameter->address->getBase->assertEquals->Assert->write->stateAfter->assertEquals->Assert->write->getLocationIdentity->assertEquals->if->convert->address->getOffset->Assert->convert->getInputBits->assertEquals->Assert->convert->getResultBits->assertEquals->Assert->graph->getParameter->convert->getValue->assertEquals->else->Assert->graph->getParameter->address->getOffset->assertEquals->ret->write->next->Assert->ret->result->assertEquals
ObjectAccessTest#readByte1(Object, int)::: object access test read byte1:::return->ObjectAccess->readByte
ObjectAccessTest#readByte2(Object, int)::: object access test read byte2:::return->ObjectAccess->WordFactory->signed->readByte
ObjectAccessTest#readByte3(Object, int)::: object access test read byte3:::return->ObjectAccess->readByte
ObjectAccessTest#writeByte1(Object, int, byte)::: object access test write byte1:::ObjectAccess->writeByte
ObjectAccessTest#writeByte2(Object, int, byte)::: object access test write byte2:::ObjectAccess->WordFactory->signed->writeByte
ObjectAccessTest#writeByte3(Object, int, byte)::: object access test write byte3:::ObjectAccess->writeByte
ObjectAccessTest#readChar1(Object, int)::: object access test read char1:::return->ObjectAccess->readChar
ObjectAccessTest#readChar2(Object, int)::: object access test read char2:::return->ObjectAccess->WordFactory->signed->readChar
ObjectAccessTest#readChar3(Object, int)::: object access test read char3:::return->ObjectAccess->readChar
ObjectAccessTest#writeChar1(Object, int, char)::: object access test write char1:::ObjectAccess->writeChar
ObjectAccessTest#writeChar2(Object, int, char)::: object access test write char2:::ObjectAccess->WordFactory->signed->writeChar
ObjectAccessTest#writeChar3(Object, int, char)::: object access test write char3:::ObjectAccess->writeChar
ObjectAccessTest#readShort1(Object, int)::: object access test read short1:::return->ObjectAccess->readShort
ObjectAccessTest#readShort2(Object, int)::: object access test read short2:::return->ObjectAccess->WordFactory->signed->readShort
ObjectAccessTest#readShort3(Object, int)::: object access test read short3:::return->ObjectAccess->readShort
ObjectAccessTest#writeShort1(Object, int, short)::: object access test write short1:::ObjectAccess->writeShort
ObjectAccessTest#writeShort2(Object, int, short)::: object access test write short2:::ObjectAccess->WordFactory->signed->writeShort
ObjectAccessTest#writeShort3(Object, int, short)::: object access test write short3:::ObjectAccess->writeShort
ObjectAccessTest#readInt1(Object, int)::: object access test read int1:::return->ObjectAccess->readInt
ObjectAccessTest#readInt2(Object, int)::: object access test read int2:::return->ObjectAccess->WordFactory->signed->readInt
ObjectAccessTest#readInt3(Object, int)::: object access test read int3:::return->ObjectAccess->readInt
ObjectAccessTest#writeInt1(Object, int, int)::: object access test write int1:::ObjectAccess->writeInt
ObjectAccessTest#writeInt2(Object, int, int)::: object access test write int2:::ObjectAccess->WordFactory->signed->writeInt
ObjectAccessTest#writeInt3(Object, int, int)::: object access test write int3:::ObjectAccess->writeInt
ObjectAccessTest#readLong1(Object, int)::: object access test read long1:::return->ObjectAccess->readLong
ObjectAccessTest#readLong2(Object, int)::: object access test read long2:::return->ObjectAccess->WordFactory->signed->readLong
ObjectAccessTest#readLong3(Object, int)::: object access test read long3:::return->ObjectAccess->readLong
ObjectAccessTest#writeLong1(Object, int, long)::: object access test write long1:::ObjectAccess->writeLong
ObjectAccessTest#writeLong2(Object, int, long)::: object access test write long2:::ObjectAccess->WordFactory->signed->writeLong
ObjectAccessTest#writeLong3(Object, int, long)::: object access test write long3:::ObjectAccess->writeLong
ObjectAccessTest#readFloat1(Object, int)::: object access test read float1:::return->ObjectAccess->readFloat
ObjectAccessTest#readFloat2(Object, int)::: object access test read float2:::return->ObjectAccess->WordFactory->signed->readFloat
ObjectAccessTest#readFloat3(Object, int)::: object access test read float3:::return->ObjectAccess->readFloat
ObjectAccessTest#writeFloat1(Object, int, float)::: object access test write float1:::ObjectAccess->writeFloat
ObjectAccessTest#writeFloat2(Object, int, float)::: object access test write float2:::ObjectAccess->WordFactory->signed->writeFloat
ObjectAccessTest#writeFloat3(Object, int, float)::: object access test write float3:::ObjectAccess->writeFloat
ObjectAccessTest#readDouble1(Object, int)::: object access test read double1:::return->ObjectAccess->readDouble
ObjectAccessTest#readDouble2(Object, int)::: object access test read double2:::return->ObjectAccess->WordFactory->signed->readDouble
ObjectAccessTest#readDouble3(Object, int)::: object access test read double3:::return->ObjectAccess->readDouble
ObjectAccessTest#writeDouble1(Object, int, double)::: object access test write double1:::ObjectAccess->writeDouble
ObjectAccessTest#writeDouble2(Object, int, double)::: object access test write double2:::ObjectAccess->WordFactory->signed->writeDouble
ObjectAccessTest#writeDouble3(Object, int, double)::: object access test write double3:::ObjectAccess->writeDouble
ObjectAccessTest#readObject1(Object, int)::: object access test read object1:::return->ObjectAccess->readObject
ObjectAccessTest#readObject2(Object, int)::: object access test read object2:::return->ObjectAccess->WordFactory->signed->readObject
ObjectAccessTest#readObject3(Object, int)::: object access test read object3:::return->ObjectAccess->readObject
ObjectAccessTest#writeObject1(Object, int, Object)::: object access test write object1:::ObjectAccess->writeObject
ObjectAccessTest#writeObject2(Object, int, Object)::: object access test write object2:::ObjectAccess->WordFactory->signed->writeObject
ObjectAccessTest#writeObject3(Object, int, Object)::: object access test write object3:::ObjectAccess->writeObject
PEGraphDecoderTest#readInt(Object, long):::This method is intrinsified to a node with a guard dependency on the block it is in:::
PEGraphDecoderTest#invokeSimple()::: graph decoder test invoke simple:::
PEGraphDecoderTest#invokeComplicated()::: graph decoder test invoke complicated:::if->else
PEGraphDecoderTest#readInt1(Object)::: graph decoder test read int1:::return->readInt
PEGraphDecoderTest#readInt2(Object)::: graph decoder test read int2:::invokeSimple->return->readInt
PEGraphDecoderTest#readInt3(Object)::: graph decoder test read int3:::invokeComplicated->return->readInt
PEGraphDecoderTest#readInt4(Object, int)::: graph decoder test read int4:::if->invokeComplicated->return->readInt
PEGraphDecoderTest#doTest(Object)::: graph decoder test do test:::result->readInt1->readInt2->readInt3->readInt4->return
PEGraphDecoderTest#registerPlugins(InvocationPlugins)::: graph decoder test register plugins:::r->new->Registration->r->new->InvocationPlugin->register2
PEGraphDecoderTest.InlineAll#shouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: inline all should inline invoke:::return->createStandardInlineInfo
PEGraphDecoderTest#test()::: graph decoder test test:::testMethod->getResolvedJavaMethod->targetGraph->debug->getDebugContext->try->scope->debug->scope->graphBuilderConfig->GraphBuilderConfiguration->getDefaultGraphBuilderPlugins->getDefault->withEagerResolving->withUnresolvedIsError->graphBuilderConfig->getPlugins->getInvocationPlugins->registerPlugins->getInitialOptions->new->StructuredGraph.Builder->method->build->decoder->getTarget->getProviders->new->InlineInvokePluginArr->new->InlineAll->new->CachingPEGraphDecoder->decoder->decode->debug->dump->targetGraph->verify->context->getProviders->new->CanonicalizerPhase->apply->targetGraph->verify->catch->if->debug->ex->toString->dump->debug->handle->finally
PointerTest#testRead1()::: pointer test test read1:::foreach->kind->name->parseEager->assertRead
PointerTest#testRead2()::: pointer test test read2:::foreach->kind->name->parseEager->assertRead
PointerTest#testRead3()::: pointer test test read3:::foreach->kind->name->parseEager->LocationIdentity->any->assertRead
PointerTest#testWrite1()::: pointer test test write1:::foreach->kind->name->parseEager->assertWrite
PointerTest#testWrite2()::: pointer test test write2:::foreach->kind->name->parseEager->assertWrite
PointerTest#testWrite3()::: pointer test test write3:::foreach->kind->name->parseEager->LocationIdentity->any->assertWrite
PointerTest#assertRead(StructuredGraph, JavaKind, boolean, LocationIdentity)::: pointer test assert read:::cast->graph->start->next->read->cast->next->Assert->kind->getStackKind->read->stamp->getStackKind->assertEquals->address->read->getAddress->Assert->address->getBase->assertEquals->Assert->graph->getParameter->cast->getInput->assertEquals->Assert->cast->stamp->getStackKind->assertEquals->Assert->read->getLocationIdentity->assertEquals->if->convert->address->getOffset->Assert->convert->getInputBits->assertEquals->Assert->convert->getResultBits->assertEquals->Assert->graph->getParameter->convert->getValue->assertEquals->else->Assert->graph->getParameter->address->getOffset->assertEquals->ret->read->next->Assert->ret->result->assertEquals
PointerTest#assertWrite(StructuredGraph, JavaKind, boolean, LocationIdentity)::: pointer test assert write:::cast->graph->start->next->write->cast->next->valueNode->write->value->if->kind->getStackKind->while->getValue->Assert->graph->getParameter->assertEquals->Assert->write->stateAfter->assertEquals->address->write->getAddress->Assert->address->getBase->assertEquals->Assert->graph->getParameter->cast->getInput->assertEquals->Assert->cast->stamp->getStackKind->assertEquals->Assert->write->getLocationIdentity->assertEquals->if->convert->address->getOffset->Assert->convert->getInputBits->assertEquals->Assert->convert->getResultBits->assertEquals->Assert->graph->getParameter->convert->getValue->assertEquals->else->Assert->graph->getParameter->address->getOffset->assertEquals->ret->write->next->Assert->ret->result->assertEquals
PointerTest#readByte1(Object, int)::: pointer test read byte1:::return->Word->objectToTrackedPointer->readByte
PointerTest#readByte2(Object, int)::: pointer test read byte2:::return->Word->objectToTrackedPointer->WordFactory->signed->readByte
PointerTest#readByte3(Object, int)::: pointer test read byte3:::return->Word->objectToTrackedPointer->readByte
PointerTest#writeByte1(Object, int, byte)::: pointer test write byte1:::Word->objectToTrackedPointer->writeByte
PointerTest#writeByte2(Object, int, byte)::: pointer test write byte2:::Word->objectToTrackedPointer->WordFactory->signed->writeByte
PointerTest#writeByte3(Object, int, byte)::: pointer test write byte3:::Word->objectToTrackedPointer->writeByte
PointerTest#readChar1(Object, int)::: pointer test read char1:::return->Word->objectToTrackedPointer->readChar
PointerTest#readChar2(Object, int)::: pointer test read char2:::return->Word->objectToTrackedPointer->WordFactory->signed->readChar
PointerTest#readChar3(Object, int)::: pointer test read char3:::return->Word->objectToTrackedPointer->readChar
PointerTest#writeChar1(Object, int, char)::: pointer test write char1:::Word->objectToTrackedPointer->writeChar
PointerTest#writeChar2(Object, int, char)::: pointer test write char2:::Word->objectToTrackedPointer->WordFactory->signed->writeChar
PointerTest#writeChar3(Object, int, char)::: pointer test write char3:::Word->objectToTrackedPointer->writeChar
PointerTest#readShort1(Object, int)::: pointer test read short1:::return->Word->objectToTrackedPointer->readShort
PointerTest#readShort2(Object, int)::: pointer test read short2:::return->Word->objectToTrackedPointer->WordFactory->signed->readShort
PointerTest#readShort3(Object, int)::: pointer test read short3:::return->Word->objectToTrackedPointer->readShort
PointerTest#writeShort1(Object, int, short)::: pointer test write short1:::Word->objectToTrackedPointer->writeShort
PointerTest#writeShort2(Object, int, short)::: pointer test write short2:::Word->objectToTrackedPointer->WordFactory->signed->writeShort
PointerTest#writeShort3(Object, int, short)::: pointer test write short3:::Word->objectToTrackedPointer->writeShort
PointerTest#readInt1(Object, int)::: pointer test read int1:::return->Word->objectToTrackedPointer->readInt
PointerTest#readInt2(Object, int)::: pointer test read int2:::return->Word->objectToTrackedPointer->WordFactory->signed->readInt
PointerTest#readInt3(Object, int)::: pointer test read int3:::return->Word->objectToTrackedPointer->readInt
PointerTest#writeInt1(Object, int, int)::: pointer test write int1:::Word->objectToTrackedPointer->writeInt
PointerTest#writeInt2(Object, int, int)::: pointer test write int2:::Word->objectToTrackedPointer->WordFactory->signed->writeInt
PointerTest#writeInt3(Object, int, int)::: pointer test write int3:::Word->objectToTrackedPointer->writeInt
PointerTest#readLong1(Object, int)::: pointer test read long1:::return->Word->objectToTrackedPointer->readLong
PointerTest#readLong2(Object, int)::: pointer test read long2:::return->Word->objectToTrackedPointer->WordFactory->signed->readLong
PointerTest#readLong3(Object, int)::: pointer test read long3:::return->Word->objectToTrackedPointer->readLong
PointerTest#writeLong1(Object, int, long)::: pointer test write long1:::Word->objectToTrackedPointer->writeLong
PointerTest#writeLong2(Object, int, long)::: pointer test write long2:::Word->objectToTrackedPointer->WordFactory->signed->writeLong
PointerTest#writeLong3(Object, int, long)::: pointer test write long3:::Word->objectToTrackedPointer->writeLong
PointerTest#readFloat1(Object, int)::: pointer test read float1:::return->Word->objectToTrackedPointer->readFloat
PointerTest#readFloat2(Object, int)::: pointer test read float2:::return->Word->objectToTrackedPointer->WordFactory->signed->readFloat
PointerTest#readFloat3(Object, int)::: pointer test read float3:::return->Word->objectToTrackedPointer->readFloat
PointerTest#writeFloat1(Object, int, float)::: pointer test write float1:::Word->objectToTrackedPointer->writeFloat
PointerTest#writeFloat2(Object, int, float)::: pointer test write float2:::Word->objectToTrackedPointer->WordFactory->signed->writeFloat
PointerTest#writeFloat3(Object, int, float)::: pointer test write float3:::Word->objectToTrackedPointer->writeFloat
PointerTest#readDouble1(Object, int)::: pointer test read double1:::return->Word->objectToTrackedPointer->readDouble
PointerTest#readDouble2(Object, int)::: pointer test read double2:::return->Word->objectToTrackedPointer->WordFactory->signed->readDouble
PointerTest#readDouble3(Object, int)::: pointer test read double3:::return->Word->objectToTrackedPointer->readDouble
PointerTest#writeDouble1(Object, int, double)::: pointer test write double1:::Word->objectToTrackedPointer->writeDouble
PointerTest#writeDouble2(Object, int, double)::: pointer test write double2:::Word->objectToTrackedPointer->WordFactory->signed->writeDouble
PointerTest#writeDouble3(Object, int, double)::: pointer test write double3:::Word->objectToTrackedPointer->writeDouble
PointerTest#readObject1(Object, int)::: pointer test read object1:::return->Word->objectToTrackedPointer->readObject
PointerTest#readObject2(Object, int)::: pointer test read object2:::return->Word->objectToTrackedPointer->WordFactory->signed->readObject
PointerTest#readObject3(Object, int)::: pointer test read object3:::return->Word->objectToTrackedPointer->readObject
PointerTest#writeObject1(Object, int, Object)::: pointer test write object1:::Word->objectToTrackedPointer->writeObject
PointerTest#writeObject2(Object, int, Object)::: pointer test write object2:::Word->objectToTrackedPointer->WordFactory->signed->writeObject
PointerTest#writeObject3(Object, int, Object)::: pointer test write object3:::Word->objectToTrackedPointer->writeObject
PointerTest#assertNumWordCasts(String, int)::: pointer test assert num word casts:::context->getProviders->new->HighTierContext->graph->parseEager->new->CanonicalizerPhase->apply->Assert->graph->getNodes->filter->count->assertEquals
PointerTest#testUnusedFromObject()::: pointer test test unused from object:::assertNumWordCasts
PointerTest#unusedFromObject(Object)::: pointer test unused from object:::Word->objectToTrackedPointer
PointerTest#testUnusedRawValue()::: pointer test test unused raw value:::assertNumWordCasts
PointerTest#unusedRawValue(Object)::: pointer test unused raw value:::Word->objectToTrackedPointer->rawValue
PointerTest#testUsedRawValue()::: pointer test test used raw value:::assertNumWordCasts
PointerTest#usedRawValue(Object)::: pointer test used raw value:::return->Word->objectToTrackedPointer->rawValue
PointerTest#testUnusedToObject()::: pointer test test unused to object:::assertNumWordCasts
PointerTest#unusedToObject(Word)::: pointer test unused to object:::w->toObject
PointerTest#testUsedToObject()::: pointer test test used to object:::assertNumWordCasts
PointerTest#usedToObject(Word)::: pointer test used to object:::return->w->toObject
PointerTrackingTest#testTracking()::: pointer tracking test test tracking:::result->getResolvedJavaMethod->new->Object->executeActual->new->Result->assertEquals
PointerTrackingTest#trackingSnippet(Object)::: pointer tracking test tracking snippet:::trackedBeforeGC->getTrackedPointer->untrackedBeforeGC->getUntrackedPointer->i->while->getTrackedPointer->System->gc->if->return->trackedAfterGC->getTrackedPointer->untrackedAfterGC->getUntrackedPointer->if->return->if->return->return
PointerTrackingTest#testVerification()::: pointer tracking test test verification:::debug->getDebugContext->try->d->debug->disableIntercept->s->debug->scope->getResolvedJavaMethod->compile->catch->finally
PointerTrackingTest#verificationSnippet(Object)::: pointer tracking test verification snippet:::value->getTrackedPointer->GraalDirectives->blackhole->System->gc->return
PointerTrackingTest#getTrackedPointer(Object)::: pointer tracking test get tracked pointer:::throw->GraalError->shouldNotReachHere
PointerTrackingTest#getUntrackedPointer(Object)::: pointer tracking test get untracked pointer:::throw->GraalError->shouldNotReachHere
PointerTrackingTest#getTrackedPointerIntrinsic(Object)::: pointer tracking test get tracked pointer intrinsic:::return->Word->objectToTrackedPointer->rawValue
PointerTrackingTest#getUntrackedPointerIntrinsic(Object)::: pointer tracking test get untracked pointer intrinsic:::return->Word->objectToUntrackedPointer->rawValue
PointerTrackingTest#register(Registration, String)::: pointer tracking test register:::intrinsic->getResolvedJavaMethod->bytecodeProvider->getSystemClassLoaderBytecodeProvider->r->new->InvocationPlugin->register1
PointerTrackingTest#registerInvocationPlugins(InvocationPlugins)::: pointer tracking test register invocation plugins:::r->new->Registration->register->register
ReplacementsParseTest#copyFirstBody(byte[], byte[], boolean)::: replacements parse test copy first body:::if->e->return->else->e->return
ReplacementsParseTest#copyFirstL2RBody(byte[], byte[])::: replacements parse test copy first l2 body:::e->return
ReplacementsParseTest.TestObject#next(double)::: test object next:::return->Math->nextAfter
ReplacementsParseTest.TestObject#next2(double)::: test object next2:::return->Math->nextAfter
ReplacementsParseTest.TestObject#nextAfter(double, double)::: test object next after:::return->Math->nextAfter
ReplacementsParseTest.TestObject#stringizeId()::: test object stringize id:::res->if->throw->new->CustomError->return->String->valueOf
ReplacementsParseTest.TestObject#stringize(Object)::: test object stringize:::res->if->throw->new->CustomError->return->String->valueOf
ReplacementsParseTest.TestObject#identity(String)::: test object identity:::return
ReplacementsParseTest.TestObject#copyFirst(byte[], byte[], boolean)::: test object copy first:::return->copyFirstBody
ReplacementsParseTest.TestObject#copyFirstL2R(byte[], byte[])::: test object copy first l2 r:::return->copyFirstL2RBody
ReplacementsParseTest.TestObject#nonVoidIntrinsicWithCall(int, int)::: test object non void intrinsic with call:::return
ReplacementsParseTest.TestObject#nonVoidIntrinsicWithOptimizedSplit(int)::: test object non void intrinsic with optimized split:::return
ReplacementsParseTest.TestObject#div(int, int)::: test object div:::return
ReplacementsParseTest.TestObjectSubstitutions#nextAfter(double, double)::: test object substitutions next after:::xx->return->Math->nextAfter
ReplacementsParseTest.TestObjectSubstitutions#stringize(Object):::Tests conditional intrinsification of a static method.:::if->obj->getClass->return->asNonNullString->else->return->stringize
ReplacementsParseTest.TestObjectSubstitutions#stringizeId(TestObject):::Tests conditional intrinsification of a non-static method.:::if->getClass->return->asNonNullString->else->return->outOfLinePartialIntrinsification
ReplacementsParseTest.TestObjectSubstitutions#outOfLinePartialIntrinsification(TestObject)::: test object substitutions out of line partial intrinsification:::return->stringizeId
ReplacementsParseTest.TestObjectSubstitutions#asNonNullString(Object)::: test object substitutions as non null string:::return->asNonNullStringIntrinsic
ReplacementsParseTest.TestObjectSubstitutions#asNonNullStringIntrinsic(Object, Class, boolean, boolean)::: test object substitutions as non null string intrinsic:::
ReplacementsParseTest.TestObjectSubstitutions#copyFirst(byte[], byte[], boolean):::An valid intrinsic as the frame state associated with the merge should prevent the frame states associated with the array stores from being associated with subsequent deoptimizing nodes.:::return->copyFirstBody
ReplacementsParseTest.TestObjectSubstitutions#copyFirstL2R(byte[], byte[]):::An invalid intrinsic as the frame state associated with the array assignment can leak out to subsequent deoptimizing nodes.:::return->copyFirstL2RBody
ReplacementsParseTest.TestObjectSubstitutions#identity(String):::Tests that non-capturing lambdas are folded away.:::return->apply
ReplacementsParseTest.TestObjectSubstitutions#apply(Function, String)::: test object substitutions apply:::return->f->apply
ReplacementsParseTest.TestObjectSubstitutions#nonVoidIntrinsicWithCall(int, int)::: test object substitutions non void intrinsic with call:::nonVoidIntrinsicWithCallStub->return
ReplacementsParseTest.TestObjectSubstitutions#nonVoidIntrinsicWithOptimizedSplit(int)::: test object substitutions non void intrinsic with optimized split:::if->GraalDirectives->opaque->nonVoidIntrinsicWithCallStub->return
ReplacementsParseTest.TestObjectSubstitutions#div(int, int)::: test object substitutions div:::return
ReplacementsParseTest.TestObjectSubstitutions#nonVoidIntrinsicWithCallStub(int)::: test object substitutions non void intrinsic with call stub:::nonVoidIntrinsicWithCallStub
ReplacementsParseTest.TestObjectSubstitutions#nonVoidIntrinsicWithCallStub(ForeignCallDescriptor, int)::: test object substitutions non void intrinsic with call stub:::
ReplacementsParseTest#registerInvocationPlugins(InvocationPlugins)::: replacements parse test register invocation plugins:::replacementBytecodeProvider->getSystemClassLoaderBytecodeProvider->r->new->Registration->injections->new->DummyInjectionProvider->new->PluginFactory_ReplacementsParseTest->registerPlugins->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->if->replacementBytecodeProvider->supportsInvokedynamic->r->registerMethodSubstitution->super->registerInvocationPlugins
ReplacementsParseTest#warmupProfiles()::: replacements parse test warmup profiles:::for->i
ReplacementsParseTest#test1():::Ensure that calling the original method from the substitution binds correctly.:::test
ReplacementsParseTest#test1Snippet(double)::: replacements parse test test1 snippet:::return->TestObject->next
ReplacementsParseTest#test2():::Ensure that calling the substitution method binds to the original method properly.:::test
ReplacementsParseTest#test2Snippet(double)::: replacements parse test test2 snippet:::return->TestObject->next2
ReplacementsParseTest#testNextAfter()::: replacements parse test test next after:::Assume->assumeFalse->inArray->new->doubleArr->outArray->new->doubleArr->for->i->test
ReplacementsParseTest#doNextAfter(double[], double[])::: replacements parse test do next after:::for->i
ReplacementsParseTest#testWithDifferentReturnValues(OptionValues, String, String, String, Object...)::: replacements parse test test with different return values:::method->getResolvedJavaMethod->receiver->expect->executeExpected->Assert->assertEquals->new->Result->testAgainstExpected
ReplacementsParseTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)::: replacements parse test get code:::return->super->getCode
ReplacementsParseTest#testCallStringize()::: replacements parse test test call stringize:::test->test->getResolvedJavaMethod->reprofile->standardReturnValue->compiledReturnValue->getInitialOptions->testWithDifferentReturnValues
ReplacementsParseTest#testCallStringizeWithoutInlinePartialIntrinsicExit()::: replacements parse test test call stringize without inline partial intrinsic exit:::options->getInitialOptions->new->OptionValues->test->test->standardReturnValue->compiledReturnValue->try->testWithDifferentReturnValues->catch->finally
ReplacementsParseTest#testCallStringizeId()::: replacements parse test test call stringize id:::new->TestObject->test->new->TestObject->test->getResolvedJavaMethod->reprofile->standardReturnValue->compiledReturnValue->getInitialOptions->new->TestObject->testWithDifferentReturnValues
ReplacementsParseTest#testCallStringizeIdWithoutInlinePartialIntrinsicExit()::: replacements parse test test call stringize id without inline partial intrinsic exit:::options->getInitialOptions->new->OptionValues->new->TestObject->test->new->TestObject->test->exceptionTestObject->new->TestObject->standardReturnValue->compiledReturnValue->try->testWithDifferentReturnValues->catch->finally
ReplacementsParseTest#callStringize(Object)::: replacements parse test call stringize:::try->return->TestObject->stringize->catch->if->GraalDirectives->inCompiledCode->return->return->finally
ReplacementsParseTest#callStringizeId(TestObject)::: replacements parse test call stringize id:::try->return->testObj->stringizeId->catch->if->GraalDirectives->inCompiledCode->return->return->finally
ReplacementsParseTest#testRootCompileStringize()::: replacements parse test test root compile stringize:::method->getResolvedJavaMethod->test->test->test
ReplacementsParseTest#testLambda()::: replacements parse test test lambda:::test->test
ReplacementsParseTest#callLambda(String)::: replacements parse test call lambda:::return->TestObject->identity
ReplacementsParseTest#callCopyFirst(byte[], byte[], boolean)::: replacements parse test call copy first:::res->TestObject->copyFirst->if->GraalDirectives->deoptimize->return
ReplacementsParseTest#callCopyFirstWrapper(byte[], byte[], boolean)::: replacements parse test call copy first wrapper:::return->callCopyFirst
ReplacementsParseTest#callCopyFirstL2R(byte[], byte[])::: replacements parse test call copy first l2 r:::res->TestObject->copyFirstL2R->if->GraalDirectives->deoptimize->return
ReplacementsParseTest#testCallCopyFirst()::: replacements parse test test call copy first:::in->out->new->byteArr->test->test
ReplacementsParseTest#testCallCopyFirstL2R()::: replacements parse test test call copy first l2 r:::in->out->new->byteArr->try->test->catch->e->getMessage->startsWith->assertTrue->finally
ReplacementsParseTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: replacements parse test bytecode parser should inline invoke:::if->inlineInvokeMethodName->method->getName->equals->return->return
ReplacementsParseTest#testCallCopyFirstWithoutInlinePartialIntrinsicExit()::: replacements parse test test call copy first without inline partial intrinsic exit:::options->getInitialOptions->new->OptionValues->try->in->out->new->byteArr->test->test->catch->finally
ReplacementsParseTest#nonVoidIntrinsicWithCall(int, int)::: replacements parse test non void intrinsic with call:::if->TestObject->nonVoidIntrinsicWithCall->GraalDirectives->deoptimize->return
ReplacementsParseTest#testNonVoidIntrinsicWithCall():::This tests the case where an intrinsic ends with a runtime call but returns some kind of value:::testGraph
ReplacementsParseTest#nonVoidIntrinsicWithOptimizedSplit(int)::: replacements parse test non void intrinsic with optimized split:::if->TestObject->nonVoidIntrinsicWithOptimizedSplit->GraalDirectives->deoptimize->return
ReplacementsParseTest#testNonVoidIntrinsicWithOptimizedSplit():::This is similar to #testNonVoidIntrinsicWithCall() but has a merge after the call which would normally capture the FrameState but in this case we force the merge to be optimized away.:::testGraph
ReplacementsParseTest#div(int, int)::: replacements parse test div:::return->TestObject->div
ReplacementsParseTest#testAssertionInMethodSubstitution()::: replacements parse test test assertion in method substitution:::try->method->getResolvedJavaMethod->options->getInitialOptions->new->OptionValues->getDebugContext->new->Builder->method->getCompilationId->compilationId->getEagerGraphBuilderSuite->parse->throw->GraalError->shouldNotReachHere->catch->finally
ReplacementsParseTest#testGraph(String)::: replacements parse test test graph:::graph->parseEager->try->s0->graph->getDebug->scope->foreach->graph->getNodes->filter->node->remove->context->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->new->LoweringPhase->apply->new->FloatingReadPhase->apply->canonicalizer->apply->new->DeadCodeEliminationPhase->apply->new->GuardLoweringPhase->getDefaultMidTierContext->apply->new->FrameStateAssignmentPhase->apply->catch->throw->graph->getDebug->handle->finally
ReplacementsParseTest.DummyInjectionProvider#getInjectedArgument(Class)::: dummy injection provider get injected argument:::if->return->new->ForeignCallsProvider->if->return->getSnippetReflection->return
ReplacementsParseTest.DummyInjectionProvider#getInjectedStamp(Class, boolean)::: dummy injection provider get injected stamp:::kind->JavaKind->fromJavaClass->return->StampFactory->forKind
ReplacementsTest#getSystemClassLoaderBytecodeProvider():::Gets a ClassfileBytecodeProvider that enables snippets and intrinsics to be loaded from the system class path (instead of from the JVMCI class path or Graal module).:::d->getReplacements->metaAccess->d->getProviders->getMetaAccess->bytecodeProvider->ClassLoader->getSystemClassLoader->new->ClassfileBytecodeProvider->return
RootMethodSubstitutionTest#data()::: root method substitution test data:::ret->new->ArrayList<>->backend->Graal->getRequiredCapability->getHostBackend->providers->backend->getProviders->cursor->providers->getReplacements->getGraphBuilderPlugins->getInvocationPlugins->getBindings->getEntries->metaAccess->providers->getMetaAccess->while->cursor->advance->className->cursor->getKey->type->try->typeName->className->className->length->substring->replace->cl->ClassLoader->getSystemClassLoader->clazz->Class->forName->metaAccess->lookupJavaType->catch->continue->finally->foreach->cursor->getValue->if->original->foreach->type->getDeclaredMethods->if->declared->getName->equals->if->declared->isStatic->if->declared->getSignature->toMethodDescriptor->startsWith->break->if->original->isNative->plugin->providers->getReplacements->getGraphBuilderPlugins->getInvocationPlugins->lookupInvocation->if->ret->new->ObjectArr->add->return
RootMethodSubstitutionTest#getIntrinsicGraph(boolean)::: root method substitution test get intrinsic graph:::options->getDebugContext->getOptions->new->OptionValues->debugContext->DebugContext->getDebugContext->getDescription->getDebugHandlersFactories->create->return->getReplacements->getIntrinsicGraph
RootMethodSubstitutionTest#checkHighTierGraph(StructuredGraph)::: root method substitution test check high tier graph:::if->graph->graph->getDebug->copy->else->graph->graph->getDebug->copy->super->checkHighTierGraph
RootMethodSubstitutionTest#test()::: root method substitution test test:::regularGraph->getIntrinsicGraph->assertTrue->getCode->encodedGraph->getIntrinsicGraph->assertTrue->getCode->assertEquals
SnippetsTest#parse(Builder, PhaseSuite)::: snippets test parse:::return->installer->getDebugContext->builder->getMethod->makeGraph
StandardMethodSubstitutionsTest#testMathSubstitutions()::: standard method substitutions test test math substitutions:::testGraph->assertNotInGraph->assertInGraph->value->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->test->test->test->test->test->test->test
StandardMethodSubstitutionsTest#testMathPow()::: standard method substitutions test test math pow:::a->b->test->test->test->test->test->test->test->test->test->test
StandardMethodSubstitutionsTest#mathPow(double, double)::: standard method substitutions test math pow:::return->mathPow0
StandardMethodSubstitutionsTest#mathPow0(double, double)::: standard method substitutions test math pow0:::return->Math->pow
StandardMethodSubstitutionsTest#mathAbs(double)::: standard method substitutions test math abs:::return->Math->abs
StandardMethodSubstitutionsTest#mathSqrt(double)::: standard method substitutions test math sqrt:::return->Math->sqrt
StandardMethodSubstitutionsTest#mathLog(double)::: standard method substitutions test math log:::return->Math->log
StandardMethodSubstitutionsTest#mathLog10(double)::: standard method substitutions test math log10:::return->Math->log10
StandardMethodSubstitutionsTest#mathSin(double)::: standard method substitutions test math sin:::return->Math->sin
StandardMethodSubstitutionsTest#mathCos(double)::: standard method substitutions test math cos:::return->Math->cos
StandardMethodSubstitutionsTest#mathTan(double)::: standard method substitutions test math tan:::return->Math->tan
StandardMethodSubstitutionsTest#mathAll(double)::: standard method substitutions test math all:::return->Math->sqrt->Math->log->Math->log10->Math->sin->Math->cos->Math->tan
StandardMethodSubstitutionsTest#testSubstitution(String, Class, Class, String, boolean, Object...)::: standard method substitutions test test substitution:::realJavaMethod->getResolvedJavaMethod->testJavaMethod->getResolvedJavaMethod->graph->testGraph->replacement->getReplacements->graph->getOptions->getSubstitution->if->assertInGraph->foreach->code->getCode->expected->invokeSafe->invokeSafe->assertDeepEquals->executeVarargsSafe->assertDeepEquals
StandardMethodSubstitutionsTest#testCharSubstitutions()::: standard method substitutions test test char substitutions:::args->new->CharacterArr->testSubstitution
StandardMethodSubstitutionsTest#charReverseBytes(char)::: standard method substitutions test char reverse bytes:::return->Character->reverseBytes
StandardMethodSubstitutionsTest#testCharSubstitutionsNarrowing()::: standard method substitutions test test char substitutions narrowing:::args->new->IntegerArr->foreach->test
StandardMethodSubstitutionsTest#charReverseBytesNarrowing(int)::: standard method substitutions test char reverse bytes narrowing:::return->Character->reverseBytes
StandardMethodSubstitutionsTest#testShortSubstitutions()::: standard method substitutions test test short substitutions:::args->new->ShortArr->testSubstitution
StandardMethodSubstitutionsTest#shortReverseBytes(short)::: standard method substitutions test short reverse bytes:::return->Short->reverseBytes
StandardMethodSubstitutionsTest#testShortSubstitutionsNarrowing()::: standard method substitutions test test short substitutions narrowing:::args->new->IntegerArr->foreach->test
StandardMethodSubstitutionsTest#shortReverseBytesNarrowing(int)::: standard method substitutions test short reverse bytes narrowing:::return->Short->reverseBytes
StandardMethodSubstitutionsTest#testIntegerSubstitutions()::: standard method substitutions test test integer substitutions:::args->new->ObjectArr->testSubstitution->testSubstitution->testSubstitution->testSubstitution
StandardMethodSubstitutionsTest#integerReverseBytes(int)::: standard method substitutions test integer reverse bytes:::return->Integer->reverseBytes
StandardMethodSubstitutionsTest#integerNumberOfLeadingZeros(int)::: standard method substitutions test integer number of leading zeros:::return->Integer->numberOfLeadingZeros
StandardMethodSubstitutionsTest#integerNumberOfTrailingZeros(int)::: standard method substitutions test integer number of trailing zeros:::return->Integer->numberOfTrailingZeros
StandardMethodSubstitutionsTest#integerBitCount(int)::: standard method substitutions test integer bit count:::return->Integer->bitCount
StandardMethodSubstitutionsTest#testLongSubstitutions()::: standard method substitutions test test long substitutions:::args->new->ObjectArr->testSubstitution->testSubstitution->testSubstitution->testSubstitution
StandardMethodSubstitutionsTest#longReverseBytes(long)::: standard method substitutions test long reverse bytes:::return->Long->reverseBytes
StandardMethodSubstitutionsTest#longNumberOfLeadingZeros(long)::: standard method substitutions test long number of leading zeros:::return->Long->numberOfLeadingZeros
StandardMethodSubstitutionsTest#longNumberOfTrailingZeros(long)::: standard method substitutions test long number of trailing zeros:::return->Long->numberOfTrailingZeros
StandardMethodSubstitutionsTest#longBitCount(long)::: standard method substitutions test long bit count:::return->Long->bitCount
StandardMethodSubstitutionsTest#testFloatSubstitutions()::: standard method substitutions test test float substitutions:::testGraph->assertInGraph->testGraph
StandardMethodSubstitutionsTest#floatToIntBits(float)::: standard method substitutions test float to int bits:::return->Float->floatToIntBits
StandardMethodSubstitutionsTest#intBitsToFloat(int)::: standard method substitutions test int bits to float:::return->Float->intBitsToFloat
StandardMethodSubstitutionsTest#testDoubleSubstitutions()::: standard method substitutions test test double substitutions:::testGraph->assertInGraph->testGraph
StandardMethodSubstitutionsTest#doubleToLongBits(double)::: standard method substitutions test double to long bits:::return->Double->doubleToLongBits
StandardMethodSubstitutionsTest#longBitsToDouble(long)::: standard method substitutions test long bits to double:::return->Double->longBitsToDouble
StandardMethodSubstitutionsTest#isInstance(Class, Object)::: standard method substitutions test is instance:::return->clazz->isInstance
StandardMethodSubstitutionsTest#isInstance2(boolean, Object)::: standard method substitutions test is instance2:::clazz->if->else->return->clazz->isInstance
StandardMethodSubstitutionsTest#isAssignableFrom(Class, Class)::: standard method substitutions test is assignable from:::return->clazz->isAssignableFrom
StandardMethodSubstitutionsTest#testClassSubstitutions()::: standard method substitutions test test class substitutions:::testGraph->testGraph->testGraph->foreach->new->Class<?>Arr->getClass->foreach->new->ObjectArr->new->intArr->new->StringArrs->new->Object->test->o->getClass->test->test->test->test->test->new->HashMap<>->test->new->HashMap<>->test
StringCompareToTest#countNode(ResolvedJavaMethod, Class, OptionValues)::: string compare to test count node:::graph->parseForCompile->applyFrontEnd->c->foreach->graph->getNodes->if->expectedNode->isInstance->return
StringCompareToTest#initSubstitution(ResolvedJavaMethod, ResolvedJavaMethod, Class)::: string compare to test init substitution:::Assume->getTarget->getTarget->assumeTrue->graph->testMethod->getName->testGraph->replacement->getReplacements->graph->getOptions->getSubstitution->if->assertInGraph->options->needCheckNode->if->else->vmArgs->GraalServices->getInputArguments->Assume->assumeTrue->foreach->if->vmArg->equals->if->getInitialOptions->new->OptionValues->Assert->countNode->assertEquals->else->getInitialOptions->getCode->Assert->assertNotNull
StringCompareToTest#stringCompareTo(String, String)::: string compare to test string compare to:::return->a->compareTo
StringCompareToTest#testEqualString()::: string compare to test test equal string:::super->testEqualString
StringCompareToTest#testDifferentString()::: string compare to test test different string:::super->testDifferentString
StringCompareToTest#testAllStrings()::: string compare to test test all strings:::super->testAllStrings
StringCompressInflateTest#checkAMD64()::: string compress inflate test check d64:::assumeFalse->getTarget->assumeTrue
StringCompressInflateTest#testStringLatin1Inflate()::: string compress inflate test test string latin1 inflate:::javaclass->Class->forName->testclass->tms->new->TestMethods->tms->testSubstitution->for->i
StringCompressInflateTest#testStringLatin1InflateByteByte()::: string compress inflate test test string latin1 inflate byte byte:::javaclass->Class->forName->caller->getResolvedJavaMethod->graph->getReplacements->getDebugContext->getIntrinsicGraph->assertInGraph->code->getCode->for->dstOffset
StringCompressInflateTest#testStringLatin1InflateByteChar()::: string compress inflate test test string latin1 inflate byte char:::javaclass->Class->forName->caller->getResolvedJavaMethod->graph->getReplacements->getDebugContext->getIntrinsicGraph->assertInGraph->code->getCode->for->dstOffset
StringCompressInflateTest#testStringUTF16Compress()::: string compress inflate test test string f16 compress:::javaclass->Class->forName->testclass->tms->new->TestMethods->tms->testSubstitution->for->i
StringCompressInflateTest#testStringUTF16CompressByteByte()::: string compress inflate test test string f16 compress byte byte:::javaclass->Class->forName->caller->getResolvedJavaMethod->graph->getReplacements->getDebugContext->getIntrinsicGraph->assertInGraph->code->getCode->for->dstOffset
StringCompressInflateTest#testStringUTF16CompressCharByte()::: string compress inflate test test string f16 compress char byte:::javaclass->Class->forName->caller->getResolvedJavaMethod->graph->getReplacements->getDebugContext->getIntrinsicGraph->assertInGraph->code->getCode->for->dstOffset
StringCompressInflateTest#testCompress(char[])::: string compress inflate test test compress:::return->new->String
StringCompressInflateTest#testInflate(String)::: string compress inflate test test inflate:::return->a->toCharArray
StringCompressInflateTest.TestMethods#replacementGraph()::: test methods replacement graph:::return->getReplacements->getInitialOptions->getSubstitution
StringCompressInflateTest.TestMethods#testMethodGraph()::: test methods test method graph:::return
StringCompressInflateTest.TestMethods#testSubstitution(Class)::: test methods test substitution:::if->replacementGraph->testMethodGraph->assertInGraph
StringCompressInflateTest.TestMethods#invokeJava(Object...)::: test methods invoke java:::return->invokeSafe
StringCompressInflateTest.TestMethods#invokeTest(Object...)::: test methods invoke test:::return->invokeSafe
StringCompressInflateTest.TestMethods#invokeCode(Object...)::: test methods invoke code:::return->executeVarargsSafe
StringCompressInflateTest#fillLatinBytes(byte[])::: string compress inflate test fill latin bytes:::for->ch->i->return
StringCompressInflateTest#fillLatinChars(char[])::: string compress inflate test fill latin chars:::for->ch->i->return
StringCompressInflateTest#fillLatinChars(byte[])::: string compress inflate test fill latin chars:::for->ch->i->return
StringCompressInflateTest#i2sz(int)::: string compress inflate test i2sz:::return
StringEqualsConstantTest#asConstant(StructuredGraph, String)::: string equals constant test as constant:::return->ConstantNode->getSnippetReflection->forObject->getMetaAccess->forConstant
StringEqualsConstantTest#testStringEquals(String, String)::: string equals constant test test string equals:::method->getResolvedJavaMethod->graph->parseForCompile->graph->getParameter->asConstant->replaceAndDelete->graph->getParameter->asConstant->replaceAndDelete->compile->firstFixed->graph->start->next->Assert->instanceOf->assertThat->ret->result->ret->result->asJavaConstant->if->Assert->ret->result->fail->else->expected->s0->equals->Assert->result->asInt->assertEquals
StringEqualsConstantTest#testSameString()::: string equals constant test test same string:::s->testStringEquals
StringEqualsConstantTest#testEqualString()::: string equals constant test test equal string:::s->s->toCharArray->new->String->testStringEquals
StringEqualsConstantTest#testDifferentString()::: string equals constant test test different string:::testStringEquals
StringEqualsConstantTest#testSameLengthString()::: string equals constant test test same length string:::testStringEquals
StringEqualsConstantTest#stringEquals(String, String)::: string equals constant test string equals:::return->a->equals
StringEqualsTest#stringEquals(String, String)::: string equals test string equals:::return->a->equals
StringEqualsTest#testEqualString()::: string equals test test equal string:::super->testEqualString
StringEqualsTest#testDifferentString()::: string equals test test different string:::super->testDifferentString
StringEqualsTest#testAllStrings()::: string equals test test all strings:::super->testAllStrings
StringHashConstantTest#asConstant(StructuredGraph, String)::: string hash constant test as constant:::return->ConstantNode->getSnippetReflection->forObject->getMetaAccess->forConstant
StringHashConstantTest#test1()::: string hash constant test test1:::method->getResolvedJavaMethod->graph->parseForCompile->s->expected->s->hashCode->graph->getParameter->asConstant->replaceAndDelete->compile->firstFixed->graph->start->next->Assert->instanceOf->assertThat->ret->result->ret->result->asJavaConstant->if->Assert->ret->result->fail->else->Assert->result->asInt->assertEquals
StringHashConstantTest#parameterizedHashCode(String)::: string hash constant test parameterized hash code:::return->value->hashCode
StringHashConstantTest#test2()::: string hash constant test test2:::method->getResolvedJavaMethod->graph->parseForCompile->firstFixed->graph->start->next->Assert->instanceOf->assertThat->ret->result->ret->result->asJavaConstant->if->Assert->ret->result->fail->else->expected->A_CONSTANT_STRING->hashCode->Assert->result->asInt->assertEquals
StringHashConstantTest#constantHashCode()::: string hash constant test constant hash code:::return->A_CONSTANT_STRING->hashCode
StringIndexOfCharTest#data()::: string index of char test data:::tests->new->ArrayList<>->longString->for->i->longUTF16String->mediumString->mediumUTF16String->targets->new->StringArr->targetChars->new->intArr->targetOffsets->new->intArr->for->i->foreach->foreach->foreach->tests->new->ObjectArr->add->return
StringIndexOfCharTest#testStringIndexOf(String, int)::: string index of char test test string index of:::return->a->indexOf
StringIndexOfCharTest#testStringIndexOfOffset(String, int, int)::: string index of char test test string index of offset:::return->a->indexOf
StringIndexOfCharTest#testStringIndexOfConstant()::: string index of char test test string index of constant:::test
StringIndexOfCharTest#testStringIndexOfConstantOffset()::: string index of char test test string index of constant offset:::test
StringIndexOfConstantTest#testStringIndexOfConstant()::: string index of constant test test string index of constant:::super->testStringIndexOfConstant
StringIndexOfConstantTest#testStringIndexOfConstantOffset()::: string index of constant test test string index of constant offset:::super->testStringIndexOfConstantOffset
StringIndexOfConstantTest#testStringBuilderIndexOfConstant()::: string index of constant test test string builder index of constant:::super->testStringBuilderIndexOfConstant
StringIndexOfConstantTest#testStringBuilderIndexOfConstantOffset()::: string index of constant test test string builder index of constant offset:::super->testStringBuilderIndexOfConstantOffset
StringIndexOfConstantTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)::: string index of constant test edit graph builder configuration:::if->constantBinding->this->getMetaAccess->this->getSnippetReflection->new->ConstantBindingParameterPlugin->conf->getPlugins->appendParameterPlugin->return->super->editGraphBuilderConfiguration
StringIndexOfConstantTest#test(OptionValues, ResolvedJavaMethod, Object, Object...)::: string index of constant test test:::new->ObjectArr->for->i->return->super->test
StringIndexOfConstantTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)::: string index of constant test get code:::return->super->getCode
StringIndexOfDeoptimizeTest#testStringIndexOfDeoptimize(String)::: string index of deoptimize test test string index of deoptimize:::result->a->indexOf->if->GraalDirectives->deoptimizeAndInvalidate->return
StringIndexOfDeoptimizeTest#testStringIndexOfConstantDeoptimize()::: string index of deoptimize test test string index of constant deoptimize:::test
StringIndexOfTest#testStringIndexOfConstant()::: string index of test test string index of constant:::super->testStringIndexOfConstant
StringIndexOfTest#testStringIndexOfConstantOffset()::: string index of test test string index of constant offset:::super->testStringIndexOfConstantOffset
StringIndexOfTest#testStringBuilderIndexOfConstant()::: string index of test test string builder index of constant:::super->testStringBuilderIndexOfConstant
StringIndexOfTest#testStringBuilderIndexOfConstantOffset()::: string index of test test string builder index of constant offset:::super->testStringBuilderIndexOfConstantOffset
StringIndexOfTestBase#data()::: string index of test base data:::tests->new->ArrayList<>->targets->new->StringArr->utf16targets->new->StringArr->addTargets->addTargets->lipsum->lipsumUTF16->subStringLengths->foreach->target->lipsum->substring->tests->new->ObjectArr->add->tests->new->ObjectArr->add->tests->new->ObjectArr->add->tests->new->ObjectArr->add->tests->new->ObjectArr->add->tests->new->ObjectArr->add->return
StringIndexOfTestBase#addTargets(ArrayList, String[])::: string index of test base add targets:::foreach->foreach->tests->new->ObjectArr->add->tests->new->ObjectArr->add->tests->new->ObjectArr->add->tests->new->ObjectArr->add->foreach->s->for->i->foreach->tests->new->ObjectArr->add->tests->new->ObjectArr->add->tests->new->ObjectArr->s->s->length->substring->add
StringIndexOfTestBase#testStringIndexOf(String, String)::: string index of test base test string index of:::return->a->indexOf
StringIndexOfTestBase#testStringIndexOfOffset(String, String, int)::: string index of test base test string index of offset:::return->a->indexOf
StringIndexOfTestBase#testStringBuilderIndexOf(StringBuilder, String)::: string index of test base test string builder index of:::return->a->indexOf
StringIndexOfTestBase#testStringBuilderIndexOfOffset(StringBuilder, String, int)::: string index of test base test string builder index of offset:::return->a->indexOf
StringIndexOfTestBase#testStringIndexOfConstant()::: string index of test base test string index of constant:::new->ObjectArr->test
StringIndexOfTestBase#testStringIndexOfConstantOffset()::: string index of test base test string index of constant offset:::new->ObjectArr->test->new->ObjectArr->test->new->ObjectArr->Math->sourceString->length->constantString->length->max->test
StringIndexOfTestBase#testStringBuilderIndexOfConstant()::: string index of test base test string builder index of constant:::getTarget->assumeFalse->sb->new->StringBuilder->sb->append->sb->sourceString->length->setLength->new->ObjectArr->test
StringIndexOfTestBase#testStringBuilderIndexOfConstantOffset()::: string index of test base test string builder index of constant offset:::getTarget->assumeFalse->sb->new->StringBuilder->sb->append->sb->sourceString->length->setLength->new->ObjectArr->test->new->ObjectArr->test->new->ObjectArr->Math->sourceString->length->constantString->length->max->test
StringSubstitutionsTest#testSubstitution(String, Class, Class, String, boolean, Object[], Object[])::: string substitutions test test substitution:::realMethod->getResolvedJavaMethod->testMethod->getResolvedJavaMethod->graph->testGraph->replacement->getReplacements->graph->getOptions->getSubstitution->if->assertInGraph->code->getCode->for->i
StringSubstitutionsTest#testEquals()::: string substitutions test test equals:::if->return->n->args1->new->ObjectArr->args2->new->ObjectArr->s1->s2->for->i->for->i->testSubstitution
StringSubstitutionsTest#stringEquals(String, String)::: string substitutions test string equals:::return->a->equals
StringSubstitutionsTest#testIndexOfConstant()::: string substitutions test test index of constant:::test
StringSubstitutionsTest#indexOfConstant()::: string substitutions test index of constant:::foobar->bar->return->foobar->indexOf
StringSubstitutionsTest#testIndexOfConstantUTF16()::: string substitutions test test index of constant f16:::test->test->test
StringSubstitutionsTest#indexOfConstantUTF16case1()::: string substitutions test index of constant f16case1:::return->indexOf
StringSubstitutionsTest#indexOfConstantUTF16case2()::: string substitutions test index of constant f16case2:::index->indexOf->return
StringSubstitutionsTest#indexOfConstantUTF16case3()::: string substitutions test index of constant f16case3:::index->indexOf->return
StringSubstitutionsTest#testCompareTo()::: string substitutions test test compare to:::test
StringSubstitutionsTest#compareTo()::: string substitutions test compare to:::return->compareTo
StringSubstitutionTestBase#initSubstitution(ResolvedJavaMethod, ResolvedJavaMethod, Class)::: string substitution test base init substitution:::Assume->getTarget->getTarget->assumeTrue->graph->testMethod->getName->testGraph->replacement->getReplacements->graph->getOptions->getSubstitution->if->assertInGraph->getCode->Assert->assertNotNull
StringSubstitutionTestBase#executeSubstitution(String, String)::: string substitution test base execute substitution:::expected->invokeSafe->invokeSafe->assertDeepEquals->executeVarargsSafe->assertDeepEquals
StringSubstitutionTestBase#testEqualString()::: string substitution test base test equal string:::s->s->toCharArray->new->String->executeSubstitution
StringSubstitutionTestBase#testDifferentString()::: string substitution test base test different string:::executeSubstitution->executeSubstitution->executeSubstitution->executeSubstitution
StringSubstitutionTestBase#testAllStrings()::: string substitution test base test all strings:::foreach->foreach->try->executeSubstitution->catch->println->println->println->throw->finally
SubstitutionNodeSourcePositionTest.TestMethod#test(int)::: test method test:::return
SubstitutionNodeSourcePositionTest.TestMethodSubstitution#test(int)::: test method substitution test:::blackhole->return
SubstitutionNodeSourcePositionTest.TestMethodSubstitution#blackhole(int)::: test method substitution blackhole:::
SubstitutionNodeSourcePositionTest#registerInvocationPlugins(InvocationPlugins)::: substitution node source position test register invocation plugins:::new->PluginFactory_SubstitutionNodeSourcePositionTest->registerPlugins->bytecodeProvider->getSystemClassLoaderBytecodeProvider->r->new->InvocationPlugins.Registration->r->registerMethodSubstitution->super->registerInvocationPlugins
SubstitutionNodeSourcePositionTest#methodSubstitution()::: substitution node source position test method substitution:::return->TestMethod->test
SubstitutionNodeSourcePositionTest#testMethodSubstitution()::: substitution node source position test test method substitution:::Assume->UseEncodedGraphs->getInitialOptions->getValue->assumeFalse->checkMappings
SubstitutionNodeSourcePositionTest#snippetLowering(String[], String)::: substitution node source position test snippet lowering:::
SubstitutionNodeSourcePositionTest#testSnippetLowering()::: substitution node source position test test snippet lowering:::Assume->UseEncodedGraphs->getInitialOptions->getValue->assumeFalse->checkMappings
SubstitutionNodeSourcePositionTest#methodPlugin(int)::: substitution node source position test method plugin:::GraalDirectives->blackhole->return
SubstitutionNodeSourcePositionTest#testMethodPlugin()::: substitution node source position test test method plugin:::checkMappings
SubstitutionNodeSourcePositionTest#checkMappings(String, boolean, Class, String)::: substitution node source position test check mappings:::mappings->getSourceMappings->resolvedJavaType->getMetaAccess->lookupJavaType->found->Assert->mappings->isEmpty->assertTrue->foreach->callee->for->pos->mapping->getSourcePosition->pos->getCaller->Assert->assertTrue
SubstitutionNodeSourcePositionTest#getSourceMappings(String)::: substitution node source position test get source mappings:::method->getResolvedJavaMethod->options->getInitialOptions->new->OptionValues->graph->parseEager->cr->graph->method->getProviders->getBackend->getDefaultGraphBuilderSuite->graph->getProfilingInfo->graph->getOptions->createSuites->graph->getOptions->createLIRSuites->graph->compilationId->new->CompilationResult->compileGraph->return->cr->getSourceMappings
SubstitutionsTest.TestMemory#memory()::: test memory memory:::
SubstitutionsTest.TestGuard#guard(Memory)::: test guard guard:::
SubstitutionsTest.TestValue#value(Guard)::: test value value:::
SubstitutionsTest.TestMethod#test()::: test method test:::return
SubstitutionsTest.TestMethodSubstitution#test()::: test method substitution test:::memory->TestMemory->memory->guard->TestGuard->guard->return->TestValue->value
SubstitutionsTest#registerInvocationPlugins(InvocationPlugins)::: substitutions test register invocation plugins:::new->PluginFactory_SubstitutionsTest->registerPlugins->bytecodeProvider->getSystemClassLoaderBytecodeProvider->r->new->Registration->r->registerMethodSubstitution->super->registerInvocationPlugins
SubstitutionsTest#callTest()::: substitutions test call test:::return->TestMethod->test
SubstitutionsTest#checkHighTierGraph(StructuredGraph)::: substitutions test check high tier graph:::retNodes->graph->getNodes->filter->Assert->retNodes->count->assertTrue->ret->retNodes->first->Assert->ret->result->instanceOf->assertThat->value->ret->result->Assert->instanceOf->assertThat->guard->Assert->instanceOf->assertThat->memory->ret->graph->ConstantNode->forInt->unique->replaceFirstInput->value->safeDelete->guard->safeDelete->graph->removeFixed
SubstitutionsTest#snippetTest()::: substitutions test snippet test:::test
SystemArrayCopyTest#data()::: system array copy test data:::srcs->new->intArr->new->doubleArr->new->IntegerArr->new->NumberArr->new->StringArr->new->ObjectArr->new->Object->dsts->new->intArr->new->NumberArr->lens->ret->new->ArrayList<>->foreach->foreach->foreach->ret->new->ObjectArr->src->getClass->getSimpleName->dst->getClass->getSimpleName->add->return
SystemArrayCopyTest#testArrayCopySnippet(Object, Object, int)::: system array copy test test array copy snippet:::System->arraycopy
SystemArrayCopyTest#testArrayCopy()::: system array copy test test array copy:::method->getResolvedJavaMethod->receiver->method->isStatic->args->expect->executeExpected->testAgainstExpected->for->i
SystemArrayCopyTest#parse(StructuredGraph.Builder, PhaseSuite)::: system array copy test parse:::graph->super->parse->if->m->graph->method->receiver->m->getModifiers->isStatic->args->argsWithReceiver->parameterTypes->m->toParameterTypes->foreach->graph->getNodes->index->param->index->if->c->getSnippetReflection->getJavaKind->forBoxed->replacement->ConstantNode->getMetaAccess->forConstant->param->replaceAtUsages->return
SystemArrayCopyTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)::: system array copy test get code:::return->super->getCode
TypeCheckTest#replaceProfile(StructuredGraph, JavaTypeProfile)::: type check test replace profile:::
TypeCheckTest#parseForCompile(ResolvedJavaMethod, CompilationIdentifier, OptionValues)::: type check test parse for compile:::graph->super->parseForCompile->if->replaceProfile->return
TypeCheckTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)::: type check test get code:::return->super->getCode
TypeCheckTest#profile(Class...)::: type check test profile:::return->profile
TypeCheckTest#profile(TriState, Class...)::: type check test profile:::if->return->ptypes->new->ProfiledTypeArr->for->i->return->new->JavaTypeProfile
TypeCheckTest#test(String, JavaTypeProfile, Object...)::: type check test test:::try->super->test->catch->finally
UnsafeBooleanAccessTest#testGetBooleanSnippet()::: unsafe boolean access test test get boolean snippet:::UNSAFE->putShort->return->UNSAFE->getBoolean
UnsafeBooleanAccessTest#testGetBoolean()::: unsafe boolean access test test get boolean:::test
UnsafeBooleanAccessTest#testPutBooleanSnippet()::: unsafe boolean access test test put boolean snippet:::UNSAFE->putShort->bool->UNSAFE->getBoolean->UNSAFE->putBoolean->return
UnsafeBooleanAccessTest#testPutBoolean()::: unsafe boolean access test test put boolean:::test
UnsafeBooleanAccessTest#testAndBooleanSnippet()::: unsafe boolean access test test and boolean snippet:::UNSAFE->putShort->bool0->UNSAFE->getBoolean->bool1->UNSAFE->getBoolean->return
UnsafeBooleanAccessTest#testAndBoolean()::: unsafe boolean access test test and boolean:::test
UnsafeSubstitutionsTest#testSubstitution(String, Class, String, Class[], Object, Object[], Object[])::: unsafe substitutions test test substitution:::testMethod->getResolvedJavaMethod->originalMethod->getResolvedJavaMethod->code->getCode->expected->invokeSafe->actual->invokeSafe->assertDeepEquals->invokeSafe->executeVarargsSafe->assertDeepEquals
UnsafeSubstitutionsTest#off(Object, String)::: unsafe substitutions test off:::try->return->UNSAFE->o->getClass->getDeclaredField->objectFieldOffset->catch->Assert->e->toString->fail->return->finally
UnsafeSubstitutionsTest#testUnsafeSubstitutions()::: unsafe substitutions test test unsafe substitutions:::new->Foo->supply->fooOffset->test->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->testGraph->address->UNSAFE->JavaKind->values->allocateMemory->foreach->new->UnsafeArr->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->new->Foo->supply->fooOffset->test->test->test->test->test->UNSAFE->freeMemory
UnsafeSubstitutionsTest#fooOffset(String)::: unsafe substitutions test foo offset:::try->return->UNSAFE->getDeclaredField->objectFieldOffset->catch->throw->new->AssertionError->finally
UnsafeSubstitutionsTest#unsafeCompareAndSwapInt(Unsafe, Object, long)::: unsafe substitutions test unsafe compare and swap int:::return->unsafe->compareAndSwapInt
UnsafeSubstitutionsTest#unsafeCompareAndSwapLong(Unsafe, Object, long)::: unsafe substitutions test unsafe compare and swap long:::return->unsafe->compareAndSwapLong
UnsafeSubstitutionsTest#unsafeCompareAndSwapObject(Unsafe, Object, long)::: unsafe substitutions test unsafe compare and swap object:::return->unsafe->new->Object->compareAndSwapObject
UnsafeSubstitutionsTest#unsafeGetBoolean(Unsafe, Object, long)::: unsafe substitutions test unsafe get boolean:::return->unsafe->getBoolean->unsafe->getBooleanVolatile
UnsafeSubstitutionsTest#unsafeGetByte(Unsafe, Object, long)::: unsafe substitutions test unsafe get byte:::return->unsafe->getByte->unsafe->getByteVolatile
UnsafeSubstitutionsTest#unsafeGetShort(Unsafe, Object, long)::: unsafe substitutions test unsafe get short:::return->unsafe->getShort->unsafe->getShortVolatile
UnsafeSubstitutionsTest#unsafeGetChar(Unsafe, Object, long)::: unsafe substitutions test unsafe get char:::return->unsafe->getChar->unsafe->getCharVolatile
UnsafeSubstitutionsTest#unsafeGetInt(Unsafe, Object, long)::: unsafe substitutions test unsafe get int:::return->unsafe->getInt->unsafe->getIntVolatile
UnsafeSubstitutionsTest#unsafeGetLong(Unsafe, Object, long)::: unsafe substitutions test unsafe get long:::return->unsafe->getLong->unsafe->getLongVolatile
UnsafeSubstitutionsTest#unsafeGetFloat(Unsafe, Object, long)::: unsafe substitutions test unsafe get float:::return->unsafe->getFloat->unsafe->getFloatVolatile
UnsafeSubstitutionsTest#unsafeGetDouble(Unsafe, Object, long)::: unsafe substitutions test unsafe get double:::return->unsafe->getDouble->unsafe->getDoubleVolatile
UnsafeSubstitutionsTest#unsafeGetObject(Unsafe, Object, long)::: unsafe substitutions test unsafe get object:::return->unsafe->getObject->unsafe->getObjectVolatile
UnsafeSubstitutionsTest#unsafePutBoolean(Unsafe, Object, long, boolean)::: unsafe substitutions test unsafe put boolean:::res->unsafe->putBoolean->unsafe->getBoolean->unsafe->putBooleanVolatile->unsafe->getBoolean->return
UnsafeSubstitutionsTest#unsafePutByte(Unsafe, Object, long, byte)::: unsafe substitutions test unsafe put byte:::res->unsafe->putByte->unsafe->getByte->unsafe->putByteVolatile->unsafe->getByte->return
UnsafeSubstitutionsTest#unsafePutShort(Unsafe, Object, long, short)::: unsafe substitutions test unsafe put short:::res->unsafe->putShort->unsafe->getShort->unsafe->putShortVolatile->unsafe->getShort->return
UnsafeSubstitutionsTest#unsafePutChar(Unsafe, Object, long, char)::: unsafe substitutions test unsafe put char:::res->unsafe->putChar->unsafe->getChar->unsafe->putCharVolatile->unsafe->getChar->return
UnsafeSubstitutionsTest#unsafePutInt(Unsafe, Object, long, int)::: unsafe substitutions test unsafe put int:::res->unsafe->putInt->unsafe->getInt->unsafe->putIntVolatile->unsafe->getInt->unsafe->putOrderedInt->unsafe->getInt->return
UnsafeSubstitutionsTest#unsafePutLong(Unsafe, Object, long, long)::: unsafe substitutions test unsafe put long:::res->unsafe->putLong->unsafe->getLong->unsafe->putLongVolatile->unsafe->getLong->unsafe->putOrderedLong->unsafe->getLong->return
UnsafeSubstitutionsTest#unsafePutFloat(Unsafe, Object, long, float)::: unsafe substitutions test unsafe put float:::res->unsafe->putFloat->unsafe->getFloat->unsafe->putFloatVolatile->unsafe->getFloat->return
UnsafeSubstitutionsTest#unsafePutDouble(Unsafe, Object, long, double)::: unsafe substitutions test unsafe put double:::res->unsafe->putDouble->unsafe->getDouble->unsafe->putDoubleVolatile->unsafe->getDouble->return
UnsafeSubstitutionsTest#unsafePutObject(Unsafe, Object, long, Object, Object, Object)::: unsafe substitutions test unsafe put object:::res->new->ObjectArr->unsafe->putObject->unsafe->getObject->unsafe->putObjectVolatile->unsafe->getObject->unsafe->putOrderedObject->unsafe->getObject->return
UnsafeSubstitutionsTest#unsafeGetAddress(Unsafe, long)::: unsafe substitutions test unsafe get address:::return->unsafe->getAddress
UnsafeSubstitutionsTest#unsafePutAddress(Unsafe, long, long)::: unsafe substitutions test unsafe put address:::res->unsafe->putAddress->unsafe->getAddress->return
UnsafeSubstitutionsTest#unsafeDirectMemoryRead(Unsafe, long)::: unsafe substitutions test unsafe direct memory read:::return->unsafe->getByte->unsafe->getShort->unsafe->getChar->unsafe->getInt->unsafe->getLong->unsafe->getFloat->unsafe->getDouble
UnsafeSubstitutionsTest#unsafeDirectMemoryWrite(Unsafe, long, long)::: unsafe substitutions test unsafe direct memory write:::unsafe->putByte->unsafe->putShort->unsafe->putChar->unsafe->putInt->unsafe->putLong->unsafe->putFloat->unsafe->putDouble->return->unsafeDirectMemoryRead
UnsafeSubstitutionsTest.MyObject#toString()::: my object to string:::return
UnsafeSubstitutionsTest#unsafeAllocateInstance(Unsafe)::: unsafe substitutions test unsafe allocate instance:::return->unsafe->allocateInstance->toString
UnsafeSubstitutionsTest#testAllocateInstance()::: unsafe substitutions test test allocate instance:::unsafeAllocateInstance->test->test
UnsafeSubstitutionsTest#testGetAndAddInt()::: unsafe substitutions test test get and add int:::f1->new->Foo->f2->new->Foo->offset->off->parameterTypes->new->Class<?>Arr->for->delta
UnsafeSubstitutionsTest#getAndAddInt(Object, long, int)::: unsafe substitutions test get and add int:::return->UNSAFE->getAndAddInt
UnsafeSubstitutionsTest#testGetAndAddLong()::: unsafe substitutions test test get and add long:::f1->new->Foo->f2->new->Foo->offset->off->parameterTypes->new->Class<?>Arr->for->delta
UnsafeSubstitutionsTest#getAndAddLong(Object, long, long)::: unsafe substitutions test get and add long:::return->UNSAFE->getAndAddLong
UnsafeSubstitutionsTest#testGetAndSetInt()::: unsafe substitutions test test get and set int:::f1->new->Foo->f2->new->Foo->offset->off->parameterTypes->new->Class<?>Arr->for->delta
UnsafeSubstitutionsTest#getAndSetInt(Object, long, int)::: unsafe substitutions test get and set int:::return->UNSAFE->getAndSetInt
UnsafeSubstitutionsTest#testGetAndSetLong()::: unsafe substitutions test test get and set long:::f1->new->Foo->f2->new->Foo->offset->off->parameterTypes->new->Class<?>Arr->for->newValue
UnsafeSubstitutionsTest#getAndSetLong(Object, long, long)::: unsafe substitutions test get and set long:::return->UNSAFE->getAndSetLong
UnsafeSubstitutionsTest#testGetAndSetObject()::: unsafe substitutions test test get and set object:::f1->new->Foo->f2->new->Foo->offset->off->parameterTypes->new->Class<?>Arr->for->i
UnsafeSubstitutionsTest#getAndSetObject(Object, long, Object)::: unsafe substitutions test get and set object:::return->UNSAFE->getAndSetObject
UnsignedIntegerTest#compareInteger(int, int)::: unsigned integer test compare integer:::return->Integer->compareUnsigned
UnsignedIntegerTest#divideInteger(int, int)::: unsigned integer test divide integer:::return->Integer->divideUnsigned
UnsignedIntegerTest#remainderInteger(int, int)::: unsigned integer test remainder integer:::return->Integer->remainderUnsigned
UnsignedIntegerTest#compareLong(long, long)::: unsigned integer test compare long:::return->Long->compareUnsigned
UnsignedIntegerTest#divideLong(long, long)::: unsigned integer test divide long:::return->Long->divideUnsigned
UnsignedIntegerTest#remainderLong(long, long)::: unsigned integer test remainder long:::return->Long->remainderUnsigned
UnsignedIntegerTest#testInteger(int, int)::: unsigned integer test test integer:::test->test->test
UnsignedIntegerTest#testLong(long, long)::: unsigned integer test test long:::test->test->test
UnsignedIntegerTest#testInteger()::: unsigned integer test test integer:::testInteger->testInteger->testInteger->testInteger
UnsignedIntegerTest#testLong()::: unsigned integer test test long:::testLong->testLong->testLong->testLong
UnsignedMathTest#aboveThanInt(int, int)::: unsigned math test above than int:::return->UnsignedMath->aboveThan
UnsignedMathTest#aboveOrEqualInt(int, int)::: unsigned math test above or equal int:::return->UnsignedMath->aboveOrEqual
UnsignedMathTest#belowThanInt(int, int)::: unsigned math test below than int:::return->UnsignedMath->belowThan
UnsignedMathTest#belowOrEqualInt(int, int)::: unsigned math test below or equal int:::return->UnsignedMath->belowOrEqual
UnsignedMathTest#divideInt(int, int)::: unsigned math test divide int:::return->Integer->divideUnsigned
UnsignedMathTest#remainderInt(int, int)::: unsigned math test remainder int:::return->Integer->remainderUnsigned
UnsignedMathTest#aboveThanLong(long, long)::: unsigned math test above than long:::return->UnsignedMath->aboveThan
UnsignedMathTest#aboveOrEqualLong(long, long)::: unsigned math test above or equal long:::return->UnsignedMath->aboveOrEqual
UnsignedMathTest#belowThanLong(long, long)::: unsigned math test below than long:::return->UnsignedMath->belowThan
UnsignedMathTest#belowOrEqualLong(long, long)::: unsigned math test below or equal long:::return->UnsignedMath->belowOrEqual
UnsignedMathTest#divideLong(long, long)::: unsigned math test divide long:::return->Long->divideUnsigned
UnsignedMathTest#remainderLong(long, long)::: unsigned math test remainder long:::return->Long->remainderUnsigned
UnsignedMathTest#testInt(int, int)::: unsigned math test test int:::test->test->test->test->test->test
UnsignedMathTest#testLong(long, long)::: unsigned math test test long:::test->test->test->test->test->test
UnsignedMathTest#testInt()::: unsigned math test test int:::testInt->testInt->testInt->testInt
UnsignedMathTest#testLong()::: unsigned math test test long:::testLong->testLong->testLong->testLong
UnwindExceptionToCallerTest#test1()::: unwind exception to caller test test1:::npe->new->NullPointerException->test->test
UnwindExceptionToCallerTest#test1Snippet(String, NullPointerException)::: unwind exception to caller test test1 snippet:::if->throw->return
WordTest#parse(Builder, PhaseSuite)::: word test parse:::debug->getDebugContext->originalGraph->installer->builder->getMethod->makeGraph->return->originalGraph->builder->getCompilationId->copyWithIdentifier
WordTest#construction()::: word test construction:::words->new->longArr->foreach->test->test->test->test
WordTest#testArithmetic()::: word test test arithmetic:::words->new->longArr->foreach->test->test->foreach->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test->test
WordTest#testCompare()::: word test test compare:::words->new->longArr->foreach->foreach->foreach->new->StringArr->test->test
WordTest#testCast()::: word test test cast:::test
WordTest#cast(long)::: word test cast:::base->WordFactory->signed->unsigned->pointer->word->return->word->rawValue
WordTest#unsignedLong(long)::: word test unsigned long:::return->WordFactory->unsigned->rawValue
WordTest#unsignedInt(int)::: word test unsigned int:::return->WordFactory->unsigned->rawValue
WordTest#signedLong(long)::: word test signed long:::return->WordFactory->signed->rawValue
WordTest#signedInt(int)::: word test signed int:::return->WordFactory->signed->rawValue
WordTest#unsignedPlusInt(long, int)::: word test unsigned plus int:::return->WordFactory->unsigned->add->rawValue
WordTest#unsignedMinusInt(long, int)::: word test unsigned minus int:::return->WordFactory->unsigned->subtract->rawValue
WordTest#unsignedPlusLong(long, long)::: word test unsigned plus long:::return->WordFactory->unsigned->WordFactory->unsigned->add->rawValue
WordTest#unsignedMinusLong(long, long)::: word test unsigned minus long:::return->WordFactory->unsigned->WordFactory->unsigned->subtract->rawValue
WordTest#signedPlusInt(long, int)::: word test signed plus int:::return->WordFactory->signed->add->rawValue
WordTest#signedMinusInt(long, int)::: word test signed minus int:::return->WordFactory->signed->subtract->rawValue
WordTest#signedPlusLong(long, long)::: word test signed plus long:::return->WordFactory->signed->WordFactory->signed->add->rawValue
WordTest#signedMinusLong(long, long)::: word test signed minus long:::return->WordFactory->signed->WordFactory->signed->subtract->rawValue
WordTest#signedNot(long)::: word test signed not:::return->WordFactory->signed->not->rawValue
WordTest#unsignedNot(long)::: word test unsigned not:::return->WordFactory->unsigned->not->rawValue
WordTest#aboveOrEqual(long, long)::: word test above or equal:::return->WordFactory->unsigned->WordFactory->unsigned->aboveOrEqual
WordTest#above(long, long)::: word test above:::return->WordFactory->unsigned->WordFactory->unsigned->aboveThan
WordTest#belowOrEqual(long, long)::: word test below or equal:::return->WordFactory->unsigned->WordFactory->unsigned->belowOrEqual
WordTest#below(long, long)::: word test below:::return->WordFactory->unsigned->WordFactory->unsigned->belowThan
WordTest#andInt(long, int)::: word test and int:::return->WordFactory->unsigned->and->rawValue
WordTest#orInt(long, int)::: word test or int:::return->WordFactory->unsigned->or->rawValue
WordTest#andLong(long, long)::: word test and long:::return->WordFactory->unsigned->WordFactory->unsigned->and->rawValue
WordTest#orLong(long, long)::: word test or long:::return->WordFactory->unsigned->WordFactory->unsigned->or->rawValue

OnStackReplacementPhase_OptionDescriptors#get(String)::: on stack replacement phase_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
OnStackReplacementPhase_OptionDescriptors#iterator()::: on stack replacement phase_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
AheadOfTimeVerificationPhase#verify(StructuredGraph, CoreProviders)::: ahead of time verification phase verify:::foreach->getConstantNodes->if->isIllegalObjectConstant->throw->new->VerificationError
AheadOfTimeVerificationPhase#isIllegalObjectConstant(ConstantNode)::: ahead of time verification phase is illegal object constant:::return->isObject->isNullReference->isInternedString->isDirectMethodHandle->isBoundMethodHandle->isVarHandle
AheadOfTimeVerificationPhase#isObject(ConstantNode)::: ahead of time verification phase is object:::return->node->getStackKind
AheadOfTimeVerificationPhase#isNullReference(ConstantNode)::: ahead of time verification phase is null reference:::return->isObject->node->isNullConstant
AheadOfTimeVerificationPhase#isDirectMethodHandle(ConstantNode)::: ahead of time verification phase is direct method handle:::if->isObject->return->return->StampTool->typeOrNull->getName->equals
AheadOfTimeVerificationPhase#isBoundMethodHandle(ConstantNode)::: ahead of time verification phase is bound method handle:::if->isObject->return->return->StampTool->typeOrNull->getName->startsWith
AheadOfTimeVerificationPhase#isVarHandle(ConstantNode)::: ahead of time verification phase is var handle:::if->isObject->return->name->StampTool->typeOrNull->getName->return->name->equals
AheadOfTimeVerificationPhase#isInternedString(ConstantNode)::: ahead of time verification phase is interned string:::if->isObject->return->c->node->asConstant->return->c->isInternedString
LoadJavaMirrorWithKlassPhase#getClassConstantReplacement(StructuredGraph, CoreProviders, JavaConstant)::: load java mirror with klass phase get class constant replacement:::if->constantReflection->context->getConstantReflection->type->constantReflection->asJavaType->if->metaAccess->context->getMetaAccess->stamp->StampFactory->TypeReference->metaAccess->lookupJavaType->createExactTrusted->objectNonNull->if->klass->ConstantNode->KlassPointerStamp->klassNonNull->klass->forConstant->getClass->graph->new->HubGetClassNode->unique->if->isCompressed->return->HotSpotCompressionNode->compress->else->return->else->primitive->boxingClass->metaAccess->primitive->getJavaKind->toBoxedJavaClass->lookupJavaType->clazz->ConstantNode->context->getConstantReflection->asJavaClass->forConstant->a->boxingClass->getStaticFields->typeField->foreach->if->f->getName->equals->break->if->throw->new->GraalError->if->HotSpotNarrowOopStamp->compressed->address->graph->ConstantNode->typeField->getOffset->forLong->new->OffsetAddressNode->unique->read->graph->new->FloatingReadNode->unique->if->isCompressed->return->else->return->HotSpotCompressionNode->uncompress->return
LoadJavaMirrorWithKlassPhase#run(StructuredGraph, CoreProviders)::: load java mirror with klass phase run:::foreach->getConstantNodes->constant->node->asJavaConstant->freadNode->getClassConstantReplacement->if->node->replace
LoadJavaMirrorWithKlassPhase#codeSizeIncrease()::: load java mirror with klass phase code size increase:::return
OnStackReplacementPhase#supportOSRWithLocks(OptionValues)::: on stack replacement phase support with locks:::return->getValue
OnStackReplacementPhase#run(StructuredGraph)::: on stack replacement phase run:::debug->graph->getDebug->if->graph->getEntryBCI->return->debug->graph->getEntryBCI->dump->osr->maxIterations->iterations->originalOSRNode->getEntryMarker->originalOSRLoop->osrLoop->currentOSRWithLocks->osrWithLocks->if->throw->new->PermanentBailoutException->if->graph->getOptions->supportOSRWithLocks->throw->new->PermanentBailoutException->do->getEntryMarker->loops->new->LoopsData->l->loops->getCFG->getNodeToBlock->get->getLoop->if->break->if->l->getDepth->else->if->throw->GraalError->shouldNotReachHere->while->l->getParent->l->getParent->loop->loops->loop->loop->loopBegin->markOsrLoop->LoopTransformations->peel->osr->prepareDelete->GraphUtil->removeFixedWithUnusedInputs->debug->dump->while->start->graph->start->osrState->osr->stateAfter->osrStart->try->context->osr->withNodeSourcePosition->osr->setStateAfter->graph->new->OSRStartNode->add->next->osr->next->osr->setNext->osrStart->setNext->graph->setStart->osrStart->setStateAfter->debug->dump->localsSize->osrState->localsSize->locksSize->osrState->locksSize->for->i->osr->replaceAtUsages->osr->replaceAtUsages->catch->finally->debug->dump->GraphUtil->killCFG->debug->dump->new->DeadCodeEliminationPhase->apply->if->OsrWithLocksCount->increment->try->context->osrStart->withNodeSourcePosition->for->i->osrState->monitorIdCount->catch->finally->debug->dump->foreach->graph->getNodes->id->exit->getMonitorId->if->id->usages->filter->count->throw->new->PermanentBailoutException->debug->dump->new->DeadCodeEliminationPhase->apply
OnStackReplacementPhase#getEntryMarker(StructuredGraph)::: on stack replacement phase get entry marker:::osrNodes->graph->getNodes->osr->osrNodes->first->if->throw->new->GraalError->if->osrNodes->count->throw->new->GraalError->if->osr->stateAfter->stackSize->throw->osr->stateAfter->toString->new->PermanentBailoutException->return
OnStackReplacementPhase#osrLoop(EntryMarkerNode)::: on stack replacement phase osr loop:::loops->osr->graph->new->LoopsData->l->loops->getCFG->getNodeToBlock->get->getLoop->if->return->return->l->getHeader->getBeginNode
OnStackReplacementPhase#osrWithLocks(EntryMarkerNode)::: on stack replacement phase osr with locks:::return->osr->stateAfter->locksSize
OnStackReplacementPhase#codeSizeIncrease()::: on stack replacement phase code size increase:::return

CoreReflectionFactory#getDecl()::: core reflection factory get decl:::return
CoreReflectionFactory#getScope()::: core reflection factory get scope:::return
CoreReflectionFactory#getDeclsLoader()::: core reflection factory get decls loader:::if->return->getClassLoader->if->return->getDeclaringClass->getClassLoader->return->getDeclaringClass->getClassLoader
CoreReflectionFactory#make(GenericDeclaration, Scope):::Factory for this class:::return->new->CoreReflectionFactory
CoreReflectionFactory#makeTypeVariable(String, FieldTypeSignature[])::: core reflection factory make type variable:::return->TypeVariableImpl->getDecl->make
CoreReflectionFactory#makeWildcard(FieldTypeSignature[], FieldTypeSignature[])::: core reflection factory make wildcard:::return->WildcardTypeImpl->make
CoreReflectionFactory#makeParameterizedType(Type, Type[], Type)::: core reflection factory make parameterized type:::return->ParameterizedTypeImpl->make
CoreReflectionFactory#findTypeVariable(String)::: core reflection factory find type variable:::return->getScope->lookup
CoreReflectionFactory#makeNamedType(String)::: core reflection factory make named type:::try->return->Class->getDeclsLoader->forName->catch->throw->new->TypeNotPresentException->finally
CoreReflectionFactory#makeArrayType(Type)::: core reflection factory make array type:::if->return->Array->newInstance->getClass->else->return->GenericArrayTypeImpl->make
CoreReflectionFactory#makeByte()::: core reflection factory make byte:::return
CoreReflectionFactory#makeBool()::: core reflection factory make bool:::return
CoreReflectionFactory#makeShort()::: core reflection factory make short:::return
CoreReflectionFactory#makeChar()::: core reflection factory make char:::return
CoreReflectionFactory#makeInt()::: core reflection factory make int:::return
CoreReflectionFactory#makeLong()::: core reflection factory make long:::return
CoreReflectionFactory#makeFloat()::: core reflection factory make float:::return
CoreReflectionFactory#makeDouble()::: core reflection factory make double:::return
CoreReflectionFactory#makeVoid()::: core reflection factory make void:::return
GenericsFactory#makeTypeVariable(String, FieldTypeSignature[]):::Returns a new type variable declaration:::
GenericsFactory#makeParameterizedType(Type, Type[], Type):::Returns an instance of the ParameterizedType interface that corresponds to a generic type instantiation of the generic declaration declaration with actual type arguments typeArgs:::
GenericsFactory#findTypeVariable(String):::Returns the type variable with name name, if such a type variable is declared in the scope used to create this factory:::
GenericsFactory#makeWildcard(FieldTypeSignature[], FieldTypeSignature[]):::Returns a new wildcard type variable:::
GenericsFactory#makeNamedType(String)::: generics factory make named type:::
GenericsFactory#makeArrayType(Type):::Returns a (possibly generic) array type:::
GenericsFactory#makeByte():::Returns the reflective representation of type byte.:::
GenericsFactory#makeBool():::Returns the reflective representation of type boolean.:::
GenericsFactory#makeShort():::Returns the reflective representation of type short.:::
GenericsFactory#makeChar():::Returns the reflective representation of type char.:::
GenericsFactory#makeInt():::Returns the reflective representation of type int.:::
GenericsFactory#makeLong():::Returns the reflective representation of type long.:::
GenericsFactory#makeFloat():::Returns the reflective representation of type float.:::
GenericsFactory#makeDouble():::Returns the reflective representation of type double.:::
GenericsFactory#makeVoid():::Returns the reflective representation of void.:::

GenericArrayTypeImpl#make(Type):::Factory method.:::return->new->GenericArrayTypeImpl
GenericArrayTypeImpl#getGenericComponentType():::Returns a Type object representing the component type of this array.:::return
GenericArrayTypeImpl#toString()::: generic array type impl to string:::return->getGenericComponentType->getTypeName
GenericArrayTypeImpl#equals(Object)::: generic array type impl equals:::if->that->return->Objects->that->getGenericComponentType->equals->else->return
GenericArrayTypeImpl#hashCode()::: generic array type impl hash code:::return->Objects->hashCode
LazyReflectiveObjectGenerator#getFactory()::: lazy reflective object generator get factory:::return
LazyReflectiveObjectGenerator#getReifier()::: lazy reflective object generator get reifier:::return->Reifier->getFactory->make
LazyReflectiveObjectGenerator#reifyBounds(FieldTypeSignature[])::: lazy reflective object generator reify bounds:::length->bounds->new->TypeArr->for->i->return
ParameterizedTypeImpl#validateConstructorArguments()::: parameterized type impl validate constructor arguments:::formals->rawType->getTypeParameters->if->throw->new->MalformedParameterizedTypeException->for->i
ParameterizedTypeImpl#make(Class, Type[], Type):::Static factory:::return->new->ParameterizedTypeImpl
ParameterizedTypeImpl#getActualTypeArguments():::Returns an array of Type objects representing the actual type arguments to this type:::return->actualTypeArguments->clone
ParameterizedTypeImpl#getRawType():::Returns the Type object representing the class or interface that declared this type.:::return
ParameterizedTypeImpl#getOwnerType():::Returns a Type object representing the type that this type is a member of:::return
ParameterizedTypeImpl#equals(Object)::: parameterized type impl equals:::if->that->if->return->thatOwner->that->getOwnerType->thatRawType->that->getRawType->if->ownerEquality->ownerType->equals->rawEquality->rawType->equals->typeArgEquality->Arrays->that->getActualTypeArguments->equals->foreach->t->getClass->printf->printf->return->return->Objects->equals->Objects->equals->Arrays->that->getActualTypeArguments->equals->else->return
ParameterizedTypeImpl#hashCode()::: parameterized type impl hash code:::return->Arrays->hashCode->Objects->hashCode->Objects->hashCode
ParameterizedTypeImpl#toString()::: parameterized type impl to string:::sb->new->StringBuilder->if->sb->ownerType->getTypeName->append->sb->append->if->sb->rawType->getName->getName->replace->append->else->sb->rawType->getSimpleName->append->else->sb->rawType->getName->append->if->sj->new->StringJoiner->sj->setEmptyValue->foreach->sj->t->getTypeName->add->sb->sj->toString->append->return->sb->toString
TypeVariableImpl#make(T, String, FieldTypeSignature[], GenericsFactory):::Factory method.:::if->throw->decl->getClass->toString->new->AssertionError->return->new->TypeVariableImpl<T>
TypeVariableImpl#getBounds():::Returns an array of Type objects representing the upper bound(s) of this type variable:::value->if->reifyBounds->return->value->clone
TypeVariableImpl#getGenericDeclaration():::Returns the GenericDeclaration object representing the generic declaration that declared this type variable.:::if->ReflectUtil->checkPackageAccess->else->if->ReflectUtil->conservativeCheckMemberAccess->else->throw->new->AssertionError->return
TypeVariableImpl#getName():::Returns the name of this type variable, as it occurs in the source code.:::return
TypeVariableImpl#toString()::: type variable impl to string:::return->getName
TypeVariableImpl#equals(Object)::: type variable impl equals:::if->o->getClass->that->thatDecl->that->getGenericDeclaration->thatName->that->getName->return->Objects->equals->Objects->equals->else->return
TypeVariableImpl#hashCode()::: type variable impl hash code:::return->genericDeclaration->hashCode->name->hashCode
TypeVariableImpl#getAnnotation(Class)::: type variable impl get annotation:::Objects->requireNonNull->return->getAnnotations->mapAnnotations->get
TypeVariableImpl#getDeclaredAnnotation(Class)::: type variable impl get declared annotation:::Objects->requireNonNull->return->getAnnotation
TypeVariableImpl#getAnnotationsByType(Class)::: type variable impl get annotations by type:::Objects->requireNonNull->return->AnnotationSupport->getAnnotations->mapAnnotations->getDirectlyAndIndirectlyPresent
TypeVariableImpl#getDeclaredAnnotationsByType(Class)::: type variable impl get declared annotations by type:::Objects->requireNonNull->return->getAnnotationsByType
TypeVariableImpl#getAnnotations()::: type variable impl get annotations:::myIndex->typeVarIndex->if->throw->new->AssertionError->return->TypeAnnotationParser->getGenericDeclaration->parseTypeVariableAnnotations
TypeVariableImpl#getDeclaredAnnotations()::: type variable impl get declared annotations:::return->getAnnotations
TypeVariableImpl#getAnnotatedBounds()::: type variable impl get annotated bounds:::return->TypeAnnotationParser->getBounds->getGenericDeclaration->typeVarIndex->parseAnnotatedBounds
TypeVariableImpl#typeVarIndex()::: type variable impl type var index:::tVars->getGenericDeclaration->getTypeParameters->i->foreach->if->equals->return->return
TypeVariableImpl#mapAnnotations(Annotation[])::: type variable impl map annotations:::result->new->LinkedHashMap<>->foreach->klass->a->annotationType->type->AnnotationType->getInstance->if->type->retention->if->result->put->throw->new->AnnotationFormatError->return
WildcardTypeImpl#make(FieldTypeSignature[], FieldTypeSignature[], GenericsFactory):::Factory method.:::return->new->WildcardTypeImpl
WildcardTypeImpl#getUpperBounds():::Returns an array of Type objects representing the upper bound(s) of this type variable:::value->if->reifyBounds->return->value->clone
WildcardTypeImpl#getLowerBounds():::Returns an array of Type objects representing the lower bound(s) of this type variable:::value->if->reifyBounds->return->value->clone
WildcardTypeImpl#toString()::: wildcard type impl to string:::lowerBounds->getLowerBounds->bounds->sb->new->StringBuilder->if->sb->append->else->upperBounds->getUpperBounds->if->equals->sb->append->else->return->sj->new->StringJoiner->foreach->sj->bound->getTypeName->add->sb->sj->toString->append->return->sb->toString
WildcardTypeImpl#equals(Object)::: wildcard type impl equals:::if->that->return->Arrays->this->getLowerBounds->that->getLowerBounds->equals->Arrays->this->getUpperBounds->that->getUpperBounds->equals->else->return
WildcardTypeImpl#hashCode()::: wildcard type impl hash code:::lowerBounds->getLowerBounds->upperBounds->getUpperBounds->return->Arrays->hashCode->Arrays->hashCode

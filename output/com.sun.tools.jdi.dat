AbstractLauncher#launch(Map)::: abstract launcher launch:::
AbstractLauncher#name()::: abstract launcher name:::
AbstractLauncher#description()::: abstract launcher description:::
AbstractLauncher#tokenizeCommand(String, char)::: abstract launcher tokenize command:::quoteStr->String->valueOf->tokenizer->new->StringTokenizer->quoted->pending->tokenList->new->ArrayList<>->while->tokenizer->hasMoreTokens->token->tokenizer->nextToken->if->if->token->equals->tokenList->add->else->else->if->if->token->equals->else->if->token->length->Character->token->charAt->isWhitespace->tokenList->add->else->throw->new->InternalException->else->if->token->equals->else->if->token->length->Character->token->charAt->isWhitespace->else->if->tokenList->add->if->tokenList->add->tokenArray->tokenList->size->new->StringArr->for->i->tokenList->size->return
AbstractLauncher#launch(String[], String, TransportService.ListenKey, TransportService)::: abstract launcher launch:::helper->new->Helper->helper->launchAndAccept->manager->Bootstrap->virtualMachineManager->return->manager->helper->connection->helper->process->createVirtualMachine
AbstractLauncher.Helper#commandString()::: helper command string:::str->for->i->return
AbstractLauncher.Helper#launchAndAccept()::: helper launch and accept:::Runtime->getRuntime->exec->acceptingThread->acceptConnection->monitoringThread->monitorTarget->try->while->wait->if->throw->commandString->new->VMStartException->if->throw->catch->throw->new->InterruptedIOException->finally->acceptingThread->interrupt->monitoringThread->interrupt
AbstractLauncher.Helper#process()::: helper process:::return
AbstractLauncher.Helper#connection()::: helper connection:::return
AbstractLauncher.Helper#notifyOfExit()::: helper notify of exit:::notify
AbstractLauncher.Helper#notifyOfConnection(Connection)::: helper notify of connection:::notify
AbstractLauncher.Helper#notifyOfAcceptException(IOException)::: helper notify of accept exception:::notify
AbstractLauncher.Helper#monitorTarget()::: helper monitor target:::thread->new->Thread->thread->setDaemon->thread->start->return
AbstractLauncher.Helper#acceptConnection()::: helper accept connection:::thread->new->Thread->thread->setDaemon->thread->start->return
ArrayReferenceImpl#invokableReferenceType(Method)::: array reference impl invokable reference type:::return->method->declaringType
ArrayReferenceImpl#arrayType()::: array reference impl array type:::return->type
ArrayReferenceImpl#length():::Return array length:::if->try->process->catch->throw->exc->toJDIException->finally->return
ArrayReferenceImpl#getValue(int)::: array reference impl get value:::list->getValues->return->list->get
ArrayReferenceImpl#getValues()::: array reference impl get values:::return->getValues
ArrayReferenceImpl#validateArrayAccess(int, int):::Validate that the range to set/get is valid:::if->length->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->if->length->throw->new->IndexOutOfBoundsException
ArrayReferenceImpl#cast(Object)::: array reference impl cast:::return
ArrayReferenceImpl#getValues(int, int)::: array reference impl get values:::if->length->validateArrayAccess->if->return->new->ArrayList<Value>->vals->try->process->cast->catch->throw->exc->toJDIException->finally->return
ArrayReferenceImpl#setValue(int, Value)::: array reference impl set value:::list->new->ArrayList<Value>->list->add->setValues
ArrayReferenceImpl#setValues(List)::: array reference impl set values:::setValues
ArrayReferenceImpl#setValues(int, List, int, int)::: array reference impl set values:::if->Math->length->values->size->min->validateMirrorsOrNulls->validateArrayAccess->if->values->size->throw->new->IndexOutOfBoundsException->if->values->size->throw->new->IndexOutOfBoundsException->somethingToSet->setValues->new->ValueImplArr->for->i->if->try->process->catch->throw->exc->toJDIException->finally
ArrayReferenceImpl#toString()::: array reference impl to string:::return->arrayType->componentTypeName->length->uniqueID
ArrayReferenceImpl#typeValueKey()::: array reference impl type value key:::return
ArrayReferenceImpl#validateAssignment(ValueContainer)::: array reference impl validate assignment:::try->super->validateAssignment->catch->valid->destParser->destination->signature->new->JNITypeParser->srcParser->arrayType->signature->new->JNITypeParser->destDims->destParser->dimensionCount->if->srcParser->dimensionCount->destComponentSignature->destParser->componentSignature->destComponentType->destination->findType->srcComponentSignature->srcParser->componentSignature->srcComponentType->arrayType->findComponentType->ArrayTypeImpl->isComponentAssignable->if->throw->arrayType->name->destination->typeName->new->InvalidTypeException->finally
ArrayReferenceImpl.Component#type()::: component type:::return->arrayType->componentType
ArrayReferenceImpl.Component#typeName()::: component type name:::return->arrayType->componentTypeName
ArrayReferenceImpl.Component#signature()::: component signature:::return->arrayType->componentSignature
ArrayReferenceImpl.Component#findType(String)::: component find type:::return->arrayType->findComponentType
ArrayTypeImpl#newInstance(int)::: array type impl new instance:::try->return->process->catch->throw->exc->toJDIException->finally
ArrayTypeImpl#componentSignature()::: array type impl component signature:::return->signature->substring
ArrayTypeImpl#componentTypeName()::: array type impl component type name:::parser->componentSignature->new->JNITypeParser->return->parser->typeName
ArrayTypeImpl#type()::: array type impl type:::return->componentSignature->findType
ArrayTypeImpl#addVisibleMethods(Map, Set)::: array type impl add visible methods:::
ArrayTypeImpl#allMethods()::: array type impl all methods:::return->new->ArrayList<>
ArrayTypeImpl#findComponentType(String)::: array type impl find component type:::tag->signature->charAt->if->PacketStream->isObjectTag->parser->componentSignature->new->JNITypeParser->list->vm->parser->typeName->classesByName->iter->list->iterator->while->iter->hasNext->type->iter->next->cl->type->classLoader->if->classLoader->cl->classLoader->equals->return->throw->componentTypeName->new->ClassNotLoadedException->else->return->vm->primitiveTypeMirror
ArrayTypeImpl#componentType()::: array type impl component type:::return->componentSignature->findComponentType
ArrayTypeImpl#isComponentAssignable(Type, Type)::: array type impl is component assignable:::if->return->source->equals->else->if->return->refSource->refDestination->return->refSource->isAssignableTo
ArrayTypeImpl#isAssignableTo(ReferenceType)::: array type impl is assignable to:::if->try->destComponentType->componentType->return->componentType->isComponentAssignable->catch->return->finally->else->if->return->destType->name->equals->else->return->destType->name->equals
ArrayTypeImpl#inheritedTypes()::: array type impl inherited types:::return->new->ArrayList<ReferenceType>
ArrayTypeImpl#getModifiers()::: array type impl get modifiers:::if->return->try->t->componentType->if->else->rt->rt->modifiers->catch->cnle->printStackTrace->finally
ArrayTypeImpl#toString()::: array type impl to string:::return->name->loaderString
ArrayTypeImpl#isPrepared()::: array type impl is prepared:::return
ArrayTypeImpl#isVerified()::: array type impl is verified:::return
ArrayTypeImpl#isInitialized()::: array type impl is initialized:::return
ArrayTypeImpl#failedToInitialize()::: array type impl failed to initialize:::return
ArrayTypeImpl#isAbstract()::: array type impl is abstract:::return
ArrayTypeImpl#isFinal()::: array type impl is final:::return
ArrayTypeImpl#isStatic()::: array type impl is static:::return
BaseLineInfo#liStratum()::: base line info li stratum:::return
BaseLineInfo#liLineNumber()::: base line info li line number:::return
BaseLineInfo#liSourceName()::: base line info li source name:::return->declaringType->baseSourceName
BaseLineInfo#liSourcePath()::: base line info li source path:::return->declaringType->baseSourcePath
BooleanTypeImpl#signature()::: boolean type impl signature:::return->String->valueOf
BooleanTypeImpl#convert(PrimitiveValue)::: boolean type impl convert:::return->vm->checkedBooleanValue->mirrorOf
BooleanValueImpl#equals(Object)::: boolean value impl equals:::if->return->value->super->equals->else->return
BooleanValueImpl#hashCode()::: boolean value impl hash code:::return->intValue
BooleanValueImpl#type()::: boolean value impl type:::return->vm->theBooleanType
BooleanValueImpl#value()::: boolean value impl value:::return
BooleanValueImpl#booleanValue()::: boolean value impl boolean value:::return
BooleanValueImpl#byteValue()::: boolean value impl byte value:::return
BooleanValueImpl#charValue()::: boolean value impl char value:::return
BooleanValueImpl#shortValue()::: boolean value impl short value:::return
BooleanValueImpl#intValue()::: boolean value impl int value:::return
BooleanValueImpl#longValue()::: boolean value impl long value:::return
BooleanValueImpl#floatValue()::: boolean value impl float value:::return
BooleanValueImpl#doubleValue()::: boolean value impl double value:::return
BooleanValueImpl#toString()::: boolean value impl to string:::return
BooleanValueImpl#typeValueKey()::: boolean value impl type value key:::return
ByteTypeImpl#signature()::: byte type impl signature:::return->String->valueOf
ByteTypeImpl#convert(PrimitiveValue)::: byte type impl convert:::return->vm->checkedByteValue->mirrorOf
ByteValueImpl#equals(Object)::: byte value impl equals:::if->return->value->super->equals->else->return
ByteValueImpl#hashCode()::: byte value impl hash code:::return->intValue
ByteValueImpl#compareTo(ByteValue)::: byte value impl compare to:::other->obj->value->return->value
ByteValueImpl#type()::: byte value impl type:::return->vm->theByteType
ByteValueImpl#value()::: byte value impl value:::return
ByteValueImpl#booleanValue()::: byte value impl boolean value:::return
ByteValueImpl#byteValue()::: byte value impl byte value:::return
ByteValueImpl#charValue()::: byte value impl char value:::return
ByteValueImpl#shortValue()::: byte value impl short value:::return
ByteValueImpl#intValue()::: byte value impl int value:::return
ByteValueImpl#longValue()::: byte value impl long value:::return
ByteValueImpl#floatValue()::: byte value impl float value:::return
ByteValueImpl#doubleValue()::: byte value impl double value:::return
ByteValueImpl#checkedCharValue()::: byte value impl checked char value:::if->throw->new->InvalidTypeException->else->return->super->checkedCharValue
ByteValueImpl#toString()::: byte value impl to string:::return
ByteValueImpl#typeValueKey()::: byte value impl type value key:::return
CharTypeImpl#signature()::: char type impl signature:::return->String->valueOf
CharTypeImpl#convert(PrimitiveValue)::: char type impl convert:::return->vm->checkedCharValue->mirrorOf
CharValueImpl#equals(Object)::: char value impl equals:::if->return->value->super->equals->else->return
CharValueImpl#hashCode()::: char value impl hash code:::return->intValue
CharValueImpl#compareTo(CharValue)::: char value impl compare to:::other->obj->value->return->value
CharValueImpl#type()::: char value impl type:::return->vm->theCharType
CharValueImpl#value()::: char value impl value:::return
CharValueImpl#booleanValue()::: char value impl boolean value:::return
CharValueImpl#byteValue()::: char value impl byte value:::return
CharValueImpl#charValue()::: char value impl char value:::return
CharValueImpl#shortValue()::: char value impl short value:::return
CharValueImpl#intValue()::: char value impl int value:::return
CharValueImpl#longValue()::: char value impl long value:::return
CharValueImpl#floatValue()::: char value impl float value:::return
CharValueImpl#doubleValue()::: char value impl double value:::return
CharValueImpl#toString()::: char value impl to string:::return
CharValueImpl#checkedByteValue()::: char value impl checked byte value:::if->throw->new->InvalidTypeException->else->return->super->checkedByteValue
CharValueImpl#checkedShortValue()::: char value impl checked short value:::if->throw->new->InvalidTypeException->else->return->super->checkedShortValue
CharValueImpl#typeValueKey()::: char value impl type value key:::return
ClassLoaderReferenceImpl#newCache()::: class loader reference impl new cache:::return->new->Cache
ClassLoaderReferenceImpl#description()::: class loader reference impl description:::return->uniqueID
ClassLoaderReferenceImpl#definedClasses()::: class loader reference impl defined classes:::definedClasses->new->ArrayList<>->foreach->vm->allClasses->if->type->isPrepared->type->classLoader->equals->definedClasses->add->return
ClassLoaderReferenceImpl#visibleClasses()::: class loader reference impl visible classes:::classes->try->local->getCache->if->if->jdwpClasses->process->new->ArrayList<>->for->i->Collections->unmodifiableList->if->if->vm->description->classes->size->printTrace->catch->throw->exc->toJDIException->finally->return
ClassLoaderReferenceImpl#findType(String)::: class loader reference impl find type:::types->visibleClasses->iter->types->iterator->while->iter->hasNext->type->iter->next->if->type->signature->equals->return->parser->new->JNITypeParser->throw->parser->typeName->parser->typeName->new->ClassNotLoadedException
ClassLoaderReferenceImpl#typeValueKey()::: class loader reference impl type value key:::return
ClassObjectReferenceImpl#reflectedType()::: class object reference impl reflected type:::if->try->reply->process->vm->referenceType->catch->throw->exc->toJDIException->finally->return
ClassObjectReferenceImpl#typeValueKey()::: class object reference impl type value key:::return
ClassObjectReferenceImpl#toString()::: class object reference impl to string:::return->referenceType->name->reflectedType->name->uniqueID
ClassTypeImpl.IResult#getException()::: result get exception:::return
ClassTypeImpl.IResult#getResult()::: result get result:::return
ClassTypeImpl#superclass()::: class type impl superclass:::if->sup->try->process->catch->throw->exc->toJDIException->finally->if->return
ClassTypeImpl#interfaces()::: class type impl interfaces:::if->getInterfaces->return
ClassTypeImpl#allInterfaces()::: class type impl all interfaces:::return->getAllInterfaces
ClassTypeImpl#subclasses()::: class type impl subclasses:::subs->new->ArrayList<>->foreach->vm->allClasses->if->clazz->superclass->clazz->superclass->if->superclass->equals->subs->add->return
ClassTypeImpl#isEnum()::: class type impl is enum:::superclass->superclass->if->superclass->name->equals->return->return
ClassTypeImpl#setValue(Field, Value)::: class type impl set value:::validateMirror->validateMirrorOrNull->validateFieldSet->if->field->isStatic->throw->new->IllegalArgumentException->try->values->new->JDWP.ClassType.SetValues.FieldValueArr->ref->ValueImpl->prepareForAssignment->new->JDWP.ClassType.SetValues.FieldValue->try->process->catch->throw->exc->toJDIException->finally->catch->if->throw->finally
ClassTypeImpl#sendNewInstanceCommand(ThreadReferenceImpl, MethodImpl, ValueImpl[], int)::: class type impl send new instance command:::sender->new->CommandSender->stream->if->thread->sendResumingCommand->else->vm->sendResumingCommand->return
ClassTypeImpl#newInstance(ThreadReference, Method, List, int)::: class type impl new instance:::validateMirror->validateMirror->validateMirrorsOrNulls->method->thread->validateConstructorInvocation->arguments->method->validateAndPrepareArgumentsForInvoke->args->arguments->new->ValueImplArr->toArray->ret->try->stream->sendNewInstanceCommand->waitForReply->catch->if->exc->errorCode->throw->new->IncompatibleThreadStateException->else->throw->exc->toJDIException->finally->if->vm->notifySuspend->if->throw->new->InvocationException->else->return
ClassTypeImpl#concreteMethodByName(String, String)::: class type impl concrete method by name:::method->foreach->visibleMethods->if->candidate->name->equals->candidate->signature->equals->candidate->isAbstract->break->return
ClassTypeImpl#validateConstructorInvocation(Method)::: class type impl validate constructor invocation:::declType->method->declaringType->if->declType->equals->throw->new->IllegalArgumentException->if->method->isConstructor->throw->new->IllegalArgumentException
ClassTypeImpl#toString()::: class type impl to string:::return->name->loaderString
ClassTypeImpl#getInvokeMethodSender(ThreadReferenceImpl, MethodImpl, ValueImpl[], int)::: class type impl get invoke method sender:::return->method->ref->enqueueCommand
ClassTypeImpl#waitForReply(PacketStream)::: class type impl wait for reply:::return->waitForReply->new->IResult
ClassTypeImpl#canInvoke(Method)::: class type impl can invoke:::return->method->declaringType->isAssignableFrom
CommandSender#send()::: command sender send:::
ConcreteMethodImpl#location()::: concrete method impl location:::if->getBaseLocations->return
ConcreteMethodImpl#sourceNameFilter(List, SDE.Stratum, String)::: concrete method impl source name filter:::if->return->else->locs->new->ArrayList<>->foreach->if->sourceName->equals->locs->add->return
ConcreteMethodImpl#allLineLocations(SDE.Stratum, String)::: concrete method impl all line locations:::lineLocations->getLocations->if->lineLocations->size->throw->new->AbsentInformationException->return->Collections->sourceNameFilter->unmodifiableList
ConcreteMethodImpl#locationsOfLine(SDE.Stratum, String, int)::: concrete method impl locations of line:::info->getLocations->if->size->throw->new->AbsentInformationException->list->get->if->new->ArrayList<>->return->Collections->sourceNameFilter->unmodifiableList
ConcreteMethodImpl#locationOfCodeIndex(long)::: concrete method impl location of code index:::if->getBaseLocations->if->return->return->virtualMachine->new->LocationImpl
ConcreteMethodImpl#codeIndexToLineInfo(SDE.Stratum, long)::: concrete method impl code index to line info:::if->getBaseLocations->if->throw->new->InternalError->lineLocations->getLocations->if->lineLocations->size->return->super->codeIndexToLineInfo->iter->lineLocations->iterator->bestMatch->iter->next->while->iter->hasNext->current->iter->next->if->current->codeIndex->break->return->bestMatch->getLineInfo
ConcreteMethodImpl#variables()::: concrete method impl variables:::return->getVariables
ConcreteMethodImpl#variablesByName(String)::: concrete method impl variables by name:::variables->getVariables->retList->new->ArrayList<>->iter->variables->iterator->while->iter->hasNext->variable->iter->next->if->variable->name->equals->retList->add->return
ConcreteMethodImpl#arguments()::: concrete method impl arguments:::variables->getVariables->retList->variables->size->new->ArrayList<>->iter->variables->iterator->while->iter->hasNext->variable->iter->next->if->variable->isArgument->retList->add->return
ConcreteMethodImpl#bytecodes()::: concrete method impl bytecodes:::bytecodes->bytecodesRef->get->if->try->process->catch->throw->exc->toJDIException->finally->new->SoftReference<>->return->bytecodes->clone
ConcreteMethodImpl#argSlotCount()::: concrete method impl arg slot count:::if->getVariables->return
ConcreteMethodImpl#getLocations(SDE.Stratum)::: concrete method impl get locations:::if->stratum->isJava->return->getBaseLocations->stratumID->stratum->id->info->softOtherLocationXRefsRef->get->if->equals->return->lineLocations->new->ArrayList<Location>->lineMapper->new->HashMap<>->lowestLine->highestLine->lastLineStratum->baseStratum->declaringType->stratum->it->getBaseLocations->iterator->while->it->hasNext->loc->it->next->baseLineNumber->loc->lineNumber->lineStratum->stratum->lineStratum->if->continue->lineNumber->lineStratum->lineNumber->if->lineStratum->equals->if->if->loc->lineStratum->sourceName->lineStratum->sourcePath->new->StratumLineInfo->addStratumLineInfo->lineLocations->add->key->mappedLocs->lineMapper->get->if->new->ArrayList<Location>->lineMapper->put->mappedLocs->add->new->SoftLocationXRefs->new->SoftReference<>->return
ConcreteMethodImpl#getBaseLocations()::: concrete method impl get base locations:::info->softBaseLocationXRefsRef->get->if->return->lntab->try->process->catch->throw->exc->toJDIException->finally->count->lineLocations->new->ArrayList<>->lineMapper->new->HashMap<>->lowestLine->highestLine->for->i->if->if->lineLocations->get->else->virtualMachine->new->LocationImpl->new->SoftLocationXRefs->new->SoftReference<SoftLocationXRefs>->return
ConcreteMethodImpl#getVariables1_4()::: concrete method impl get variables1_4:::vartab->try->process->catch->if->exc->errorCode->throw->new->AbsentInformationException->else->throw->exc->toJDIException->finally->count->variables->new->ArrayList<>->for->i->return
ConcreteMethodImpl#getVariables1()::: concrete method impl get variables1:::if->vm->canGet1_5LanguageFeatures->return->getVariables1_4->vartab->try->process->catch->if->exc->errorCode->throw->new->AbsentInformationException->else->throw->exc->toJDIException->finally->count->variables->new->ArrayList<LocalVariable>->for->i->return
ConcreteMethodImpl#getVariables()::: concrete method impl get variables:::if->throw->new->AbsentInformationException->variables->variablesRef->get->if->return->getVariables1->Collections->unmodifiableList->new->SoftReference<>->return
ConnectorImpl#defaultArguments()::: connector impl default arguments:::defaults->new->LinkedHashMap<>->values->defaultArguments->values->iter->values->iterator->while->iter->hasNext->argument->iter->next->defaults->argument->name->argument->clone->put->return
ConnectorImpl#addStringArgument(String, String, String, String, boolean)::: connector impl add string argument:::defaultArguments->new->StringArgumentImpl->put
ConnectorImpl#addBooleanArgument(String, String, String, boolean, boolean)::: connector impl add boolean argument:::defaultArguments->new->BooleanArgumentImpl->put
ConnectorImpl#addIntegerArgument(String, String, String, String, boolean, int, int)::: connector impl add integer argument:::defaultArguments->new->IntegerArgumentImpl->put
ConnectorImpl#addSelectedArgument(String, String, String, String, boolean, List)::: connector impl add selected argument:::defaultArguments->new->SelectedArgumentImpl->put
ConnectorImpl#argument(String, Map)::: connector impl argument:::argument->arguments->get->if->throw->new->IllegalConnectorArgumentsException->value->argument->value->if->value->length->if->argument->mustSpecify->throw->new->IllegalConnectorArgumentsException->else->if->argument->isValid->throw->new->IllegalConnectorArgumentsException->return
ConnectorImpl#getString(String)::: connector impl get string:::if->ResourceBundle->getBundle->return->messages->getString
ConnectorImpl#toString()::: connector impl to string:::string->name->iter->defaultArguments->values->iterator->first->while->iter->hasNext->argument->iter->next->if->argument->toString->return
ConnectorImpl.ArgumentImpl#isValid(String)::: argument impl is valid:::
ConnectorImpl.ArgumentImpl#name()::: argument impl name:::return
ConnectorImpl.ArgumentImpl#label()::: argument impl label:::return
ConnectorImpl.ArgumentImpl#description()::: argument impl description:::return
ConnectorImpl.ArgumentImpl#value()::: argument impl value:::return
ConnectorImpl.ArgumentImpl#setValue(String)::: argument impl set value:::if->throw->new->NullPointerException
ConnectorImpl.ArgumentImpl#mustSpecify()::: argument impl must specify:::return
ConnectorImpl.ArgumentImpl#equals(Object)::: argument impl equals:::if->other->return->name->other->name->equals->description->other->description->equals->mustSpecify->other->mustSpecify->value->other->value->equals->else->return
ConnectorImpl.ArgumentImpl#hashCode()::: argument impl hash code:::return->description->hashCode
ConnectorImpl.ArgumentImpl#clone()::: argument impl clone:::try->return->super->clone->catch->throw->new->InternalException->finally
ConnectorImpl.ArgumentImpl#toString()::: argument impl to string:::return->name->value
ConnectorImpl.BooleanArgumentImpl#setValue(boolean):::Sets the value of the argument.:::stringValueOf->setValue
ConnectorImpl.BooleanArgumentImpl#isValid(String):::Performs basic sanity check of argument.:::return->value->equals->value->equals
ConnectorImpl.BooleanArgumentImpl#stringValueOf(boolean):::Return the string representation of the value parameter:::return
ConnectorImpl.BooleanArgumentImpl#booleanValue():::Return the value of the argument as a boolean:::return->value->equals
ConnectorImpl.IntegerArgumentImpl#setValue(int):::Sets the value of the argument:::stringValueOf->setValue
ConnectorImpl.IntegerArgumentImpl#isValid(String):::Performs basic sanity check of argument.:::if->return->try->return->Integer->decode->intValue->isValid->catch->return->finally
ConnectorImpl.IntegerArgumentImpl#isValid(int):::Performs basic sanity check of argument.:::return
ConnectorImpl.IntegerArgumentImpl#stringValueOf(int):::Return the string representation of the value parameter:::return
ConnectorImpl.IntegerArgumentImpl#intValue():::Return the value of the argument as a int:::if->value->return->try->return->Integer->value->decode->intValue->catch->return->finally
ConnectorImpl.IntegerArgumentImpl#max():::The upper bound for the value.:::return
ConnectorImpl.IntegerArgumentImpl#min():::The lower bound for the value.:::return
ConnectorImpl.StringArgumentImpl#isValid(String):::Performs basic sanity check of argument.:::return
ConnectorImpl.SelectedArgumentImpl#choices():::Return the possible values for the argument:::return
ConnectorImpl.SelectedArgumentImpl#isValid(String):::Performs basic sanity check of argument.:::return->choices->contains
DoubleTypeImpl#signature()::: double type impl signature:::return->String->valueOf
DoubleTypeImpl#convert(PrimitiveValue)::: double type impl convert:::return->vm->checkedDoubleValue->mirrorOf
DoubleValueImpl#equals(Object)::: double value impl equals:::if->return->value->super->equals->else->return
DoubleValueImpl#compareTo(DoubleValue)::: double value impl compare to:::other->obj->value->if->value->return->else->if->value->return->else->return
DoubleValueImpl#hashCode()::: double value impl hash code:::return->intValue
DoubleValueImpl#type()::: double value impl type:::return->vm->theDoubleType
DoubleValueImpl#value()::: double value impl value:::return
DoubleValueImpl#booleanValue()::: double value impl boolean value:::return
DoubleValueImpl#byteValue()::: double value impl byte value:::return
DoubleValueImpl#charValue()::: double value impl char value:::return
DoubleValueImpl#shortValue()::: double value impl short value:::return
DoubleValueImpl#intValue()::: double value impl int value:::return
DoubleValueImpl#longValue()::: double value impl long value:::return
DoubleValueImpl#floatValue()::: double value impl float value:::return
DoubleValueImpl#doubleValue()::: double value impl double value:::return
DoubleValueImpl#checkedByteValue()::: double value impl checked byte value:::if->throw->new->InvalidTypeException->else->return->super->checkedByteValue
DoubleValueImpl#checkedCharValue()::: double value impl checked char value:::if->throw->new->InvalidTypeException->else->return->super->checkedCharValue
DoubleValueImpl#checkedShortValue()::: double value impl checked short value:::if->throw->new->InvalidTypeException->else->return->super->checkedShortValue
DoubleValueImpl#checkedIntValue()::: double value impl checked int value:::if->throw->new->InvalidTypeException->else->return->super->checkedIntValue
DoubleValueImpl#checkedLongValue()::: double value impl checked long value:::longValue->if->throw->new->InvalidTypeException->else->return->super->checkedLongValue
DoubleValueImpl#checkedFloatValue()::: double value impl checked float value:::floatValue->if->throw->new->InvalidTypeException->else->return->super->checkedFloatValue
DoubleValueImpl#toString()::: double value impl to string:::return
DoubleValueImpl#typeValueKey()::: double value impl type value key:::return
EventQueueImpl#equals(Object)::: event queue impl equals:::return
EventQueueImpl#hashCode()::: event queue impl hash code:::return->System->identityHashCode
EventQueueImpl#enqueue(EventSet)::: event queue impl enqueue:::eventSets->add->notifyAll
EventQueueImpl#size()::: event queue impl size:::return->eventSets->size
EventQueueImpl#close()::: event queue impl close:::if->new->EventSetImpl->enqueue
EventQueueImpl#remove()::: event queue impl remove:::return->remove
EventQueueImpl#remove(long):::Filter out events not for user's eyes:::if->throw->new->IllegalArgumentException->eventSet->while->fullEventSet->removeUnfiltered->if->break->fullEventSet->userFilter->if->eventSet->isEmpty->break->if->eventSet->suspendPolicy->vm->notifySuspend->return
EventQueueImpl#removeInternal()::: event queue impl remove internal:::eventSet->do->removeUnfiltered->internalFilter->while->eventSet->isEmpty->return
EventQueueImpl#startTimerThread(long)::: event queue impl start timer thread:::thread->new->TimerThread->thread->setDaemon->thread->start->return
EventQueueImpl#shouldWait(TimerThread)::: event queue impl should wait:::return->eventSets->isEmpty->timerThread->timedOut
EventQueueImpl#removeUnfiltered(long)::: event queue impl remove unfiltered:::eventSet->vm->waitInitCompletion->synchronized->if->eventSets->isEmpty->eventSets->removeFirst->else->timerThread->try->if->startTimerThread->while->shouldWait->this->wait->catch->finally->if->timerThread->timedOut->timerThread->interrupt->if->eventSets->isEmpty->if->throw->new->VMDisconnectedException->else->eventSets->removeFirst->if->target->notifyDequeueEventSet->eventSet->build->return
EventQueueImpl.TimerThread#timedOut()::: timer thread timed out:::return
EventQueueImpl.TimerThread#run()::: timer thread run:::try->Thread->sleep->queue->synchronized->queue->notifyAll->catch->finally
EventRequestManagerImpl#JDWPtoJDISuspendPolicy(byte)::: event request manager impl  pto suspend policy:::switch->return->return->return->throw->new->IllegalArgumentException
EventRequestManagerImpl#JDItoJDWPSuspendPolicy(int)::: event request manager impl  ito suspend policy:::switch->return->return->return->throw->new->IllegalArgumentException
EventRequestManagerImpl#equals(Object)::: event request manager impl equals:::return
EventRequestManagerImpl#hashCode()::: event request manager impl hash code:::return->System->identityHashCode
EventRequestManagerImpl.EventRequestImpl#equals(Object)::: event request impl equals:::return
EventRequestManagerImpl.EventRequestImpl#hashCode()::: event request impl hash code:::return->System->identityHashCode
EventRequestManagerImpl.EventRequestImpl#eventCmd()::: event request impl event cmd:::
EventRequestManagerImpl.EventRequestImpl#invalidState()::: event request impl invalid state:::return->toString->new->InvalidRequestStateException
EventRequestManagerImpl.EventRequestImpl#state()::: event request impl state:::return->isEnabled
EventRequestManagerImpl.EventRequestImpl#requestList()::: event request impl request list:::return->EventRequestManagerImpl.this->eventCmd->requestList
EventRequestManagerImpl.EventRequestImpl#delete():::delete the event request:::if->requestList->remove->disable
EventRequestManagerImpl.EventRequestImpl#isEnabled()::: event request impl is enabled:::return
EventRequestManagerImpl.EventRequestImpl#enable()::: event request impl enable:::setEnabled
EventRequestManagerImpl.EventRequestImpl#disable()::: event request impl disable:::setEnabled
EventRequestManagerImpl.EventRequestImpl#setEnabled(boolean)::: event request impl set enabled:::if->throw->invalidState->else->if->if->clear->else->set
EventRequestManagerImpl.EventRequestImpl#addCountFilter(int)::: event request impl add count filter:::if->isEnabled->throw->invalidState->if->throw->new->IllegalArgumentException->filters->create->add
EventRequestManagerImpl.EventRequestImpl#setSuspendPolicy(int)::: event request impl set suspend policy:::if->isEnabled->throw->invalidState->JDItoJDWPSuspendPolicy
EventRequestManagerImpl.EventRequestImpl#suspendPolicy()::: event request impl suspend policy:::return->JDWPtoJDISuspendPolicy
EventRequestManagerImpl.EventRequestImpl#set():::set (enable) the event request:::mods->filters->filters->size->new->JDWP.EventRequest.Set.ModifierArr->toArray->try->eventCmd->process->catch->throw->exc->toJDIException->finally
EventRequestManagerImpl.EventRequestImpl#clear()::: event request impl clear:::try->eventCmd->process->catch->throw->exc->toJDIException->finally
EventRequestManagerImpl.EventRequestImpl#getProperties()::: event request impl get properties:::if->new->HashMap<>->return
EventRequestManagerImpl.EventRequestImpl#getProperty(Object):::Returns the value of the property with the specified key:::if->return->else->return->getProperties->get
EventRequestManagerImpl.EventRequestImpl#putProperty(Object, Object):::Add an arbitrary key/value "property" to this component.:::if->getProperties->put->else->getProperties->remove
EventRequestManagerImpl.ThreadVisibleEventRequestImpl#addThreadFilter(ThreadReference)::: thread visible event request impl add thread filter:::validateMirror->if->isEnabled->throw->invalidState->filters->create->add
EventRequestManagerImpl.ClassVisibleEventRequestImpl#addClassFilter(ReferenceType)::: class visible event request impl add class filter:::validateMirror->if->isEnabled->throw->invalidState->filters->create->add
EventRequestManagerImpl.ClassVisibleEventRequestImpl#addClassFilter(String)::: class visible event request impl add class filter:::if->isEnabled->throw->invalidState->if->throw->new->NullPointerException->filters->create->add
EventRequestManagerImpl.ClassVisibleEventRequestImpl#addClassExclusionFilter(String)::: class visible event request impl add class exclusion filter:::if->isEnabled->throw->invalidState->if->throw->new->NullPointerException->filters->create->add
EventRequestManagerImpl.ClassVisibleEventRequestImpl#addInstanceFilter(ObjectReference)::: class visible event request impl add instance filter:::validateMirror->if->isEnabled->throw->invalidState->if->vm->canUseInstanceFilters->throw->new->UnsupportedOperationException->filters->create->add
EventRequestManagerImpl.BreakpointRequestImpl#location()::: breakpoint request impl location:::return
EventRequestManagerImpl.BreakpointRequestImpl#eventCmd()::: breakpoint request impl event cmd:::return
EventRequestManagerImpl.BreakpointRequestImpl#toString()::: breakpoint request impl to string:::return->location->state
EventRequestManagerImpl.ClassPrepareRequestImpl#eventCmd()::: class prepare request impl event cmd:::return
EventRequestManagerImpl.ClassPrepareRequestImpl#addSourceNameFilter(String)::: class prepare request impl add source name filter:::if->isEnabled->throw->invalidState->if->vm->canUseSourceNameFilters->throw->new->UnsupportedOperationException->if->throw->new->NullPointerException->filters->create->add
EventRequestManagerImpl.ClassPrepareRequestImpl#toString()::: class prepare request impl to string:::return->state
EventRequestManagerImpl.ClassUnloadRequestImpl#eventCmd()::: class unload request impl event cmd:::return
EventRequestManagerImpl.ClassUnloadRequestImpl#toString()::: class unload request impl to string:::return->state
EventRequestManagerImpl.ExceptionRequestImpl#exception()::: exception request impl exception:::return
EventRequestManagerImpl.ExceptionRequestImpl#notifyCaught()::: exception request impl notify caught:::return
EventRequestManagerImpl.ExceptionRequestImpl#notifyUncaught()::: exception request impl notify uncaught:::return
EventRequestManagerImpl.ExceptionRequestImpl#eventCmd()::: exception request impl event cmd:::return
EventRequestManagerImpl.ExceptionRequestImpl#toString()::: exception request impl to string:::return->exception->state
EventRequestManagerImpl.MethodEntryRequestImpl#eventCmd()::: method entry request impl event cmd:::return
EventRequestManagerImpl.MethodEntryRequestImpl#toString()::: method entry request impl to string:::return->state
EventRequestManagerImpl.MethodExitRequestImpl#eventCmd()::: method exit request impl event cmd:::return
EventRequestManagerImpl.MethodExitRequestImpl#toString()::: method exit request impl to string:::return->state
EventRequestManagerImpl.MonitorContendedEnterRequestImpl#eventCmd()::: monitor contended enter request impl event cmd:::return
EventRequestManagerImpl.MonitorContendedEnterRequestImpl#toString()::: monitor contended enter request impl to string:::return->state
EventRequestManagerImpl.MonitorContendedEnteredRequestImpl#eventCmd()::: monitor contended entered request impl event cmd:::return
EventRequestManagerImpl.MonitorContendedEnteredRequestImpl#toString()::: monitor contended entered request impl to string:::return->state
EventRequestManagerImpl.MonitorWaitRequestImpl#eventCmd()::: monitor wait request impl event cmd:::return
EventRequestManagerImpl.MonitorWaitRequestImpl#toString()::: monitor wait request impl to string:::return->state
EventRequestManagerImpl.MonitorWaitedRequestImpl#eventCmd()::: monitor waited request impl event cmd:::return
EventRequestManagerImpl.MonitorWaitedRequestImpl#toString()::: monitor waited request impl to string:::return->state
EventRequestManagerImpl.StepRequestImpl#depth()::: step request impl depth:::return
EventRequestManagerImpl.StepRequestImpl#size()::: step request impl size:::return
EventRequestManagerImpl.StepRequestImpl#thread()::: step request impl thread:::return
EventRequestManagerImpl.StepRequestImpl#eventCmd()::: step request impl event cmd:::return
EventRequestManagerImpl.StepRequestImpl#toString()::: step request impl to string:::return->thread->state
EventRequestManagerImpl.ThreadDeathRequestImpl#eventCmd()::: thread death request impl event cmd:::return
EventRequestManagerImpl.ThreadDeathRequestImpl#toString()::: thread death request impl to string:::return->state
EventRequestManagerImpl.ThreadStartRequestImpl#eventCmd()::: thread start request impl event cmd:::return
EventRequestManagerImpl.ThreadStartRequestImpl#toString()::: thread start request impl to string:::return->state
EventRequestManagerImpl.WatchpointRequestImpl#field()::: watchpoint request impl field:::return
EventRequestManagerImpl.AccessWatchpointRequestImpl#eventCmd()::: access watchpoint request impl event cmd:::return
EventRequestManagerImpl.AccessWatchpointRequestImpl#toString()::: access watchpoint request impl to string:::return->state
EventRequestManagerImpl.ModificationWatchpointRequestImpl#eventCmd()::: modification watchpoint request impl event cmd:::return
EventRequestManagerImpl.ModificationWatchpointRequestImpl#toString()::: modification watchpoint request impl to string:::return->state
EventRequestManagerImpl.VMDeathRequestImpl#eventCmd()::: death request impl event cmd:::return
EventRequestManagerImpl.VMDeathRequestImpl#toString()::: death request impl to string:::return->state
EventRequestManagerImpl#createClassPrepareRequest()::: event request manager impl create class prepare request:::return->new->ClassPrepareRequestImpl
EventRequestManagerImpl#createClassUnloadRequest()::: event request manager impl create class unload request:::return->new->ClassUnloadRequestImpl
EventRequestManagerImpl#createExceptionRequest(ReferenceType, boolean, boolean)::: event request manager impl create exception request:::validateMirrorOrNull->return->new->ExceptionRequestImpl
EventRequestManagerImpl#createStepRequest(ThreadReference, int, int)::: event request manager impl create step request:::validateMirror->return->new->StepRequestImpl
EventRequestManagerImpl#createThreadDeathRequest()::: event request manager impl create thread death request:::return->new->ThreadDeathRequestImpl
EventRequestManagerImpl#createThreadStartRequest()::: event request manager impl create thread start request:::return->new->ThreadStartRequestImpl
EventRequestManagerImpl#createMethodEntryRequest()::: event request manager impl create method entry request:::return->new->MethodEntryRequestImpl
EventRequestManagerImpl#createMethodExitRequest()::: event request manager impl create method exit request:::return->new->MethodExitRequestImpl
EventRequestManagerImpl#createMonitorContendedEnterRequest()::: event request manager impl create monitor contended enter request:::if->vm->canRequestMonitorEvents->throw->new->UnsupportedOperationException->return->new->MonitorContendedEnterRequestImpl
EventRequestManagerImpl#createMonitorContendedEnteredRequest()::: event request manager impl create monitor contended entered request:::if->vm->canRequestMonitorEvents->throw->new->UnsupportedOperationException->return->new->MonitorContendedEnteredRequestImpl
EventRequestManagerImpl#createMonitorWaitRequest()::: event request manager impl create monitor wait request:::if->vm->canRequestMonitorEvents->throw->new->UnsupportedOperationException->return->new->MonitorWaitRequestImpl
EventRequestManagerImpl#createMonitorWaitedRequest()::: event request manager impl create monitor waited request:::if->vm->canRequestMonitorEvents->throw->new->UnsupportedOperationException->return->new->MonitorWaitedRequestImpl
EventRequestManagerImpl#createBreakpointRequest(Location)::: event request manager impl create breakpoint request:::validateMirror->if->location->codeIndex->throw->new->NativeMethodException->return->new->BreakpointRequestImpl
EventRequestManagerImpl#createAccessWatchpointRequest(Field)::: event request manager impl create access watchpoint request:::validateMirror->if->vm->canWatchFieldAccess->throw->new->UnsupportedOperationException->return->new->AccessWatchpointRequestImpl
EventRequestManagerImpl#createModificationWatchpointRequest(Field)::: event request manager impl create modification watchpoint request:::validateMirror->if->vm->canWatchFieldModification->throw->new->UnsupportedOperationException->return->new->ModificationWatchpointRequestImpl
EventRequestManagerImpl#createVMDeathRequest()::: event request manager impl create death request:::if->vm->canRequestVMDeathEvent->throw->new->UnsupportedOperationException->return->new->VMDeathRequestImpl
EventRequestManagerImpl#deleteEventRequest(EventRequest)::: event request manager impl delete event request:::validateMirror->delete
EventRequestManagerImpl#deleteEventRequests(List)::: event request manager impl delete event requests:::validateMirrors->iter->new->ArrayList<>->iterator->while->iter->hasNext->iter->next->delete
EventRequestManagerImpl#deleteAllBreakpoints()::: event request manager impl delete all breakpoints:::requestList->clear->try->process->catch->throw->exc->toJDIException->finally
EventRequestManagerImpl#stepRequests()::: event request manager impl step requests:::return->unmodifiableRequestList
EventRequestManagerImpl#classPrepareRequests()::: event request manager impl class prepare requests:::return->unmodifiableRequestList
EventRequestManagerImpl#classUnloadRequests()::: event request manager impl class unload requests:::return->unmodifiableRequestList
EventRequestManagerImpl#threadStartRequests()::: event request manager impl thread start requests:::return->unmodifiableRequestList
EventRequestManagerImpl#threadDeathRequests()::: event request manager impl thread death requests:::return->unmodifiableRequestList
EventRequestManagerImpl#exceptionRequests()::: event request manager impl exception requests:::return->unmodifiableRequestList
EventRequestManagerImpl#breakpointRequests()::: event request manager impl breakpoint requests:::return->unmodifiableRequestList
EventRequestManagerImpl#accessWatchpointRequests()::: event request manager impl access watchpoint requests:::return->unmodifiableRequestList
EventRequestManagerImpl#modificationWatchpointRequests()::: event request manager impl modification watchpoint requests:::return->unmodifiableRequestList
EventRequestManagerImpl#methodEntryRequests()::: event request manager impl method entry requests:::return->unmodifiableRequestList
EventRequestManagerImpl#methodExitRequests()::: event request manager impl method exit requests:::return->unmodifiableRequestList
EventRequestManagerImpl#monitorContendedEnterRequests()::: event request manager impl monitor contended enter requests:::return->unmodifiableRequestList
EventRequestManagerImpl#monitorContendedEnteredRequests()::: event request manager impl monitor contended entered requests:::return->unmodifiableRequestList
EventRequestManagerImpl#monitorWaitRequests()::: event request manager impl monitor wait requests:::return->unmodifiableRequestList
EventRequestManagerImpl#monitorWaitedRequests()::: event request manager impl monitor waited requests:::return->unmodifiableRequestList
EventRequestManagerImpl#vmDeathRequests()::: event request manager impl vm death requests:::return->unmodifiableRequestList
EventRequestManagerImpl#unmodifiableRequestList(int)::: event request manager impl unmodifiable request list:::return->Collections->requestList->new->ArrayList<>->unmodifiableList
EventRequestManagerImpl#request(int, int)::: event request manager impl request:::rl->requestList->synchronized->itr->rl->iterator->while->itr->hasNext->er->itr->next->if->return->return
EventRequestManagerImpl#requestList(int)::: event request manager impl request list:::return
EventSetImpl#toString()::: event set impl to string:::string->this->size->first->foreach->if->event->toString->return
EventSetImpl.EventImpl#equals(Object)::: event impl equals:::return
EventSetImpl.EventImpl#hashCode()::: event impl hash code:::return->System->identityHashCode
EventSetImpl.EventImpl#request()::: event impl request:::return
EventSetImpl.EventImpl#requestID()::: event impl request d:::return
EventSetImpl.EventImpl#destination()::: event impl destination:::if->return->if->ermi->getInternalEventRequestManager->if->ermi->request->return->return->if->request->isEnabled->return->return
EventSetImpl.EventImpl#eventName()::: event impl event name:::
EventSetImpl.EventImpl#toString()::: event impl to string:::return->eventName
EventSetImpl.ThreadedEventImpl#thread()::: threaded event impl thread:::return
EventSetImpl.ThreadedEventImpl#toString()::: threaded event impl to string:::return->eventName->thread->name
EventSetImpl.LocatableEventImpl#location()::: locatable event impl location:::return
EventSetImpl.LocatableEventImpl#method():::For MethodEntry and MethodExit:::return->location->method
EventSetImpl.LocatableEventImpl#toString()::: locatable event impl to string:::return->eventName->location->location->toString->thread->name
EventSetImpl.BreakpointEventImpl#eventName()::: breakpoint event impl event name:::return
EventSetImpl.StepEventImpl#eventName()::: step event impl event name:::return
EventSetImpl.MethodEntryEventImpl#eventName()::: method entry event impl event name:::return
EventSetImpl.MethodExitEventImpl#eventName()::: method exit event impl event name:::return
EventSetImpl.MethodExitEventImpl#returnValue()::: method exit event impl return value:::if->canGetMethodReturnValues->throw->new->UnsupportedOperationException->return
EventSetImpl.MonitorContendedEnterEventImpl#eventName()::: monitor contended enter event impl event name:::return
EventSetImpl.MonitorContendedEnterEventImpl#monitor()::: monitor contended enter event impl monitor:::return
EventSetImpl.MonitorContendedEnteredEventImpl#eventName()::: monitor contended entered event impl event name:::return
EventSetImpl.MonitorContendedEnteredEventImpl#monitor()::: monitor contended entered event impl monitor:::return
EventSetImpl.MonitorWaitEventImpl#eventName()::: monitor wait event impl event name:::return
EventSetImpl.MonitorWaitEventImpl#monitor()::: monitor wait event impl monitor:::return
EventSetImpl.MonitorWaitEventImpl#timeout()::: monitor wait event impl timeout:::return
EventSetImpl.MonitorWaitedEventImpl#eventName()::: monitor waited event impl event name:::return
EventSetImpl.MonitorWaitedEventImpl#monitor()::: monitor waited event impl monitor:::return
EventSetImpl.MonitorWaitedEventImpl#timedout()::: monitor waited event impl timedout:::return
EventSetImpl.ClassPrepareEventImpl#referenceType()::: class prepare event impl reference type:::return
EventSetImpl.ClassPrepareEventImpl#eventName()::: class prepare event impl event name:::return
EventSetImpl.ClassUnloadEventImpl#className()::: class unload event impl class name:::return->classSignature->classSignature->length->substring->replace
EventSetImpl.ClassUnloadEventImpl#classSignature()::: class unload event impl class signature:::return
EventSetImpl.ClassUnloadEventImpl#eventName()::: class unload event impl event name:::return
EventSetImpl.ExceptionEventImpl#exception()::: exception event impl exception:::return
EventSetImpl.ExceptionEventImpl#catchLocation()::: exception event impl catch location:::return
EventSetImpl.ExceptionEventImpl#eventName()::: exception event impl event name:::return
EventSetImpl.ThreadDeathEventImpl#eventName()::: thread death event impl event name:::return
EventSetImpl.ThreadStartEventImpl#eventName()::: thread start event impl event name:::return
EventSetImpl.VMStartEventImpl#eventName()::: start event impl event name:::return
EventSetImpl.VMDeathEventImpl#eventName()::: death event impl event name:::return
EventSetImpl.VMDisconnectEventImpl#eventName()::: disconnect event impl event name:::return
EventSetImpl.WatchpointEventImpl#field()::: watchpoint event impl field:::if->refType->getFieldMirror->return
EventSetImpl.WatchpointEventImpl#object()::: watchpoint event impl object:::return
EventSetImpl.WatchpointEventImpl#valueCurrent()::: watchpoint event impl value current:::if->return->refType->field->getValue->else->return->object->field->getValue
EventSetImpl.AccessWatchpointEventImpl#eventName()::: access watchpoint event impl event name:::return
EventSetImpl.ModificationWatchpointEventImpl#valueToBe()::: modification watchpoint event impl value to be:::return
EventSetImpl.ModificationWatchpointEventImpl#eventName()::: modification watchpoint event impl event name:::return
EventSetImpl#addEvent(EventImpl)::: event set impl add event:::super->add
EventSetImpl#build()::: event set impl build:::if->return->ps->new->PacketStream->compEvt->new->JDWP.Event.Composite->if->switch->vm->printTrace->break->vm->printTrace->break->vm->printTrace->break->fix6485605->for->i->if->super->size->if->vm->resume->else->if->if->fix6485605->resume->else
EventSetImpl#userFilter():::Filter out internal events:::return
EventSetImpl#internalFilter():::Filter out user events.:::return
EventSetImpl#createEvent(JDWP.Event.Composite.Events)::: event set impl create event:::comm->switch->return->new->ThreadStartEventImpl->return->new->ThreadDeathEventImpl->return->new->ExceptionEventImpl->return->new->BreakpointEventImpl->return->new->MethodEntryEventImpl->return->new->MethodExitEventImpl->return->new->MethodExitEventImpl->return->new->AccessWatchpointEventImpl->return->new->ModificationWatchpointEventImpl->return->new->StepEventImpl->return->new->ClassPrepareEventImpl->return->new->ClassUnloadEventImpl->return->new->MonitorContendedEnterEventImpl->return->new->MonitorContendedEnteredEventImpl->return->new->MonitorWaitEventImpl->return->new->MonitorWaitedEventImpl->return->new->VMStartEventImpl->return->new->VMDeathEventImpl->println->return
EventSetImpl#virtualMachine()::: event set impl virtual machine:::return
EventSetImpl#suspendPolicy()::: event set impl suspend policy:::return->EventRequestManagerImpl->JDWPtoJDISuspendPolicy
EventSetImpl#eventThread()::: event set impl event thread:::foreach->if->return->thread->return
EventSetImpl#resume()::: event set impl resume:::switch->suspendPolicy->vm->resume->break->thread->eventThread->if->throw->new->InternalException->thread->resume->break->break->throw->new->InternalException
EventSetImpl#iterator()::: event set impl iterator:::return->new->Itr
EventSetImpl#eventIterator()::: event set impl event iterator:::return->new->Itr
EventSetImpl.Itr#hasNext()::: itr has next:::return->size
EventSetImpl.Itr#next()::: itr next:::try->nxt->get->return->catch->throw->new->NoSuchElementException->finally
EventSetImpl.Itr#nextEvent()::: itr next event:::return->next
EventSetImpl.Itr#remove()::: itr remove:::throw->new->UnsupportedOperationException
EventSetImpl#spliterator()::: event set impl spliterator:::return->Spliterators->spliterator
EventSetImpl#add(Event)::: event set impl add:::throw->new->UnsupportedOperationException
EventSetImpl#remove(Object)::: event set impl remove:::throw->new->UnsupportedOperationException
EventSetImpl#addAll(Collection)::: event set impl add all:::throw->new->UnsupportedOperationException
EventSetImpl#removeAll(Collection)::: event set impl remove all:::throw->new->UnsupportedOperationException
EventSetImpl#retainAll(Collection)::: event set impl retain all:::throw->new->UnsupportedOperationException
EventSetImpl#clear()::: event set impl clear:::throw->new->UnsupportedOperationException
FieldImpl#equals(Object)::: field impl equals:::if->other->return->declaringType->other->declaringType->equals->ref->other->ref->super->equals->else->return
FieldImpl#hashCode()::: field impl hash code:::return->ref
FieldImpl#compareTo(Field)::: field impl compare to:::declaringType->declaringType->rc->declaringType->field->declaringType->compareTo->if->declaringType->indexOf->declaringType->indexOf->return
FieldImpl#type()::: field impl type:::return->signature->findType
FieldImpl#findType(String)::: field impl find type:::enclosing->declaringType->return->enclosing->findType
FieldImpl#typeName()::: field impl type name:::parser->signature->new->JNITypeParser->return->parser->typeName
FieldImpl#isTransient()::: field impl is transient:::return->isModifierSet
FieldImpl#isVolatile()::: field impl is volatile:::return->isModifierSet
FieldImpl#isEnumConstant()::: field impl is enum constant:::return->isModifierSet
FieldImpl#toString()::: field impl to string:::sb->new->StringBuilder->sb->declaringType->name->append->sb->append->sb->name->append->return->sb->toString
FloatTypeImpl#signature()::: float type impl signature:::return->String->valueOf
FloatTypeImpl#convert(PrimitiveValue)::: float type impl convert:::return->vm->checkedFloatValue->mirrorOf
FloatValueImpl#equals(Object)::: float value impl equals:::if->return->value->super->equals->else->return
FloatValueImpl#hashCode()::: float value impl hash code:::return->intValue
FloatValueImpl#compareTo(FloatValue)::: float value impl compare to:::other->obj->value->if->value->return->else->if->value->return->else->return
FloatValueImpl#type()::: float value impl type:::return->vm->theFloatType
FloatValueImpl#value()::: float value impl value:::return
FloatValueImpl#booleanValue()::: float value impl boolean value:::return
FloatValueImpl#byteValue()::: float value impl byte value:::return
FloatValueImpl#charValue()::: float value impl char value:::return
FloatValueImpl#shortValue()::: float value impl short value:::return
FloatValueImpl#intValue()::: float value impl int value:::return
FloatValueImpl#longValue()::: float value impl long value:::return
FloatValueImpl#floatValue()::: float value impl float value:::return
FloatValueImpl#doubleValue()::: float value impl double value:::return
FloatValueImpl#checkedByteValue()::: float value impl checked byte value:::if->throw->new->InvalidTypeException->else->return->super->checkedByteValue
FloatValueImpl#checkedCharValue()::: float value impl checked char value:::if->throw->new->InvalidTypeException->else->return->super->checkedCharValue
FloatValueImpl#checkedShortValue()::: float value impl checked short value:::if->throw->new->InvalidTypeException->else->return->super->checkedShortValue
FloatValueImpl#checkedIntValue()::: float value impl checked int value:::intValue->if->throw->new->InvalidTypeException->else->return->super->checkedIntValue
FloatValueImpl#checkedLongValue()::: float value impl checked long value:::longValue->if->throw->new->InvalidTypeException->else->return->super->checkedLongValue
FloatValueImpl#toString()::: float value impl to string:::return
FloatValueImpl#typeValueKey()::: float value impl type value key:::return
GenericAttachingConnector#create(TransportService)::: generic attaching connector create:::return->new->GenericAttachingConnector
GenericAttachingConnector#attach(String, Map):::Attach to a target VM using the specified address and Connector arguments.:::ts->argument->value->timeout->if->ts->length->Integer->decode->intValue->connection->transportService->attach->return->Bootstrap->virtualMachineManager->createVirtualMachine
GenericAttachingConnector#attach(Map):::Attach to a target VM using the specified arguments - the address of the target VM is specified by the address connector argument.:::address->argument->value->return->attach
GenericAttachingConnector#name()::: generic attaching connector name:::return->transport->name
GenericAttachingConnector#description()::: generic attaching connector description:::return->transportService->description
GenericAttachingConnector#transport()::: generic attaching connector transport:::return
GenericListeningConnector#create(TransportService):::Create an instance of this Connector:::return->new->GenericListeningConnector
GenericListeningConnector#startListening(String, Map)::: generic listening connector start listening:::listener->listenMap->get->if->throw->args->keySet->new->ArrayList<>->new->IllegalConnectorArgumentsException->transportService->startListening->updateArgumentMapIfRequired->listenMap->put->return->listener->address
GenericListeningConnector#startListening(Map)::: generic listening connector start listening:::address->argument->value->return->startListening
GenericListeningConnector#stopListening(Map)::: generic listening connector stop listening:::listener->listenMap->get->if->throw->args->keySet->new->ArrayList<>->new->IllegalConnectorArgumentsException->transportService->stopListening->listenMap->remove
GenericListeningConnector#accept(Map)::: generic listening connector accept:::ts->argument->value->timeout->if->ts->length->Integer->decode->intValue->listener->listenMap->get->connection->if->transportService->accept->else->startListening->listenMap->get->transportService->accept->stopListening->return->Bootstrap->virtualMachineManager->createVirtualMachine
GenericListeningConnector#supportsMultipleConnections()::: generic listening connector supports multiple connections:::return->transportService->capabilities->supportsMultipleConnections
GenericListeningConnector#name()::: generic listening connector name:::return->transport->name
GenericListeningConnector#description()::: generic listening connector description:::return->transportService->description
GenericListeningConnector#transport()::: generic listening connector transport:::return
GenericListeningConnector#updateArgumentMapIfRequired(Map, TransportService.ListenKey)::: generic listening connector update argument map if required:::
IntegerTypeImpl#signature()::: integer type impl signature:::return->String->valueOf
IntegerTypeImpl#convert(PrimitiveValue)::: integer type impl convert:::return->vm->checkedIntValue->mirrorOf
IntegerValueImpl#equals(Object)::: integer value impl equals:::if->return->value->super->equals->else->return
IntegerValueImpl#hashCode()::: integer value impl hash code:::return->intValue
IntegerValueImpl#compareTo(IntegerValue)::: integer value impl compare to:::other->obj->value->return->value->value
IntegerValueImpl#type()::: integer value impl type:::return->vm->theIntegerType
IntegerValueImpl#value()::: integer value impl value:::return
IntegerValueImpl#booleanValue()::: integer value impl boolean value:::return
IntegerValueImpl#byteValue()::: integer value impl byte value:::return
IntegerValueImpl#charValue()::: integer value impl char value:::return
IntegerValueImpl#shortValue()::: integer value impl short value:::return
IntegerValueImpl#intValue()::: integer value impl int value:::return
IntegerValueImpl#longValue()::: integer value impl long value:::return
IntegerValueImpl#floatValue()::: integer value impl float value:::return
IntegerValueImpl#doubleValue()::: integer value impl double value:::return
IntegerValueImpl#checkedByteValue()::: integer value impl checked byte value:::if->throw->new->InvalidTypeException->else->return->super->checkedByteValue
IntegerValueImpl#checkedCharValue()::: integer value impl checked char value:::if->throw->new->InvalidTypeException->else->return->super->checkedCharValue
IntegerValueImpl#checkedShortValue()::: integer value impl checked short value:::if->throw->new->InvalidTypeException->else->return->super->checkedShortValue
IntegerValueImpl#toString()::: integer value impl to string:::return
IntegerValueImpl#typeValueKey()::: integer value impl type value key:::return
InterfaceTypeImpl.IResult#getException()::: result get exception:::return
InterfaceTypeImpl.IResult#getResult()::: result get result:::return
InterfaceTypeImpl#superinterfaces()::: interface type impl superinterfaces:::superinterfaces->superinterfacesRef->get->if->getInterfaces->Collections->unmodifiableList->new->SoftReference<List<InterfaceType>>->return
InterfaceTypeImpl#subinterfaces()::: interface type impl subinterfaces:::subs->new->ArrayList<InterfaceType>->foreach->vm->allClasses->if->interfaze->if->interfaze->isPrepared->interfaze->superinterfaces->contains->subs->add->return
InterfaceTypeImpl#implementors()::: interface type impl implementors:::implementors->new->ArrayList<ClassType>->foreach->vm->allClasses->if->clazz->if->clazz->isPrepared->clazz->interfaces->contains->implementors->add->return
InterfaceTypeImpl#isInitialized()::: interface type impl is initialized:::return->isPrepared
InterfaceTypeImpl#toString()::: interface type impl to string:::return->name->loaderString
InterfaceTypeImpl#waitForReply(PacketStream)::: interface type impl wait for reply:::return->waitForReply->new->IResult
InterfaceTypeImpl#getInvokeMethodSender(ThreadReferenceImpl, MethodImpl, ValueImpl[], int)::: interface type impl get invoke method sender:::return->method->ref->enqueueCommand
InterfaceTypeImpl#superclass()::: interface type impl superclass:::return
InterfaceTypeImpl#isAssignableTo(ReferenceType)::: interface type impl is assignable to:::if->type->name->equals->return->return->super->isAssignableTo
InterfaceTypeImpl#interfaces()::: interface type impl interfaces:::return->superinterfaces
InterfaceTypeImpl#canInvoke(Method)::: interface type impl can invoke:::return->this->method->declaringType->equals
InternalEventHandler#run()::: internal event handler run:::if->vm->printTrace->try->while->try->eventSet->queue->removeInternal->it->eventSet->eventIterator->while->it->hasNext->event->it->nextEvent->if->cuEvent->vm->cuEvent->classSignature->removeReferenceType->if->vm->cuEvent->classSignature->printTrace->else->if->cpEvent->cpEvent->referenceType->markPrepared->if->vm->cpEvent->referenceType->name->printTrace->catch->vmme->printStackTrace->idie->printStackTrace->oce->printStackTrace->cnpe->printStackTrace->finally->catch->finally->if->vm->printTrace
InvokableTypeImpl.InvocationResult#getException()::: invocation result get exception:::
InvokableTypeImpl.InvocationResult#getResult()::: invocation result get result:::
InvokableTypeImpl#invokeMethod(ThreadReference, Method, List, int):::Method invocation support:::validateMirror->validateMirror->validateMirrorsOrNulls->method->thread->validateMethodInvocation->arguments->method->validateAndPrepareArgumentsForInvoke->args->arguments->new->ValueImplArr->toArray->ret->try->stream->sendInvokeCommand->waitForReply->catch->if->exc->errorCode->throw->new->IncompatibleThreadStateException->else->throw->exc->toJDIException->finally->if->vm->notifySuspend->if->ret->getException->throw->ret->getException->new->InvocationException->else->return->ret->getResult
InvokableTypeImpl#isAssignableTo(ReferenceType)::: invokable type impl is assignable to:::superclazz->superclass->if->this->equals->return->else->if->superclazz->isAssignableTo->return->else->interfaces->interfaces->iter->interfaces->iterator->while->iter->hasNext->interfaze->iter->next->if->interfaze->isAssignableTo->return->return
InvokableTypeImpl#addVisibleMethods(Map, Set)::: invokable type impl add visible methods:::iter->interfaces->iterator->while->iter->hasNext->interfaze->iter->next->if->seenInterfaces->contains->interfaze->addVisibleMethods->seenInterfaces->add->clazz->superclass->if->clazz->addVisibleMethods->methods->addToMethodMap
InvokableTypeImpl#addInterfaces(List)::: invokable type impl add interfaces:::immediate->interfaces->list->interfaces->addAll->iter->immediate->iterator->while->iter->hasNext->interfaze->iter->next->interfaze->addInterfaces->superclass->superclass->if->superclass->addInterfaces
InvokableTypeImpl#getAllInterfaces():::Returns all the implemented interfaces recursively:::all->new->ArrayList<>->addInterfaces->return
InvokableTypeImpl#allMethods():::Shared implementation of ClassType#allMethods() and InterfaceType#allMethods():::list->methods->new->ArrayList<>->clazz->superclass->while->list->clazz->methods->addAll->clazz->superclass->foreach->getAllInterfaces->list->interfaze->methods->addAll->return
InvokableTypeImpl#inheritedTypes()::: invokable type impl inherited types:::inherited->new->ArrayList<>->if->superclass->inherited->superclass->add->foreach->interfaces->inherited->add->return
InvokableTypeImpl#sendInvokeCommand(ThreadReferenceImpl, MethodImpl, ValueImpl[], int)::: invokable type impl send invoke command:::if->foreach->arg->toString->sender->getInvokeMethodSender->stream->if->thread->sendResumingCommand->else->vm->sendResumingCommand->return
InvokableTypeImpl#validateMethodInvocation(Method)::: invokable type impl validate method invocation:::if->canInvoke->throw->new->IllegalArgumentException->if->method->isStatic->throw->new->IllegalArgumentException->else->if->method->isStaticInitializer->throw->new->IllegalArgumentException
InvokableTypeImpl#getInvokeMethodSender(ThreadReferenceImpl, MethodImpl, ValueImpl[], int):::A subclass will provide specific CommandSender:::
InvokableTypeImpl#waitForReply(PacketStream):::Waits for the reply to the last sent command:::
InvokableTypeImpl#superclass():::Get the ReferenceType superclass:::
InvokableTypeImpl#interfaces():::Get the implemented/extended interfaces:::
InvokableTypeImpl#canInvoke(Method):::Checks the provided method whether it can be invoked:::
JDWP.VirtualMachine.Version#process(VirtualMachineImpl)::: version process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.Version#enqueueCommand(VirtualMachineImpl)::: version enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.Version#waitForReply(VirtualMachineImpl, PacketStream)::: version wait for reply:::ps->waitForReply->return->new->Version
JDWP.VirtualMachine.ClassesBySignature#process(VirtualMachineImpl, String)::: classes by signature process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.ClassesBySignature#enqueueCommand(VirtualMachineImpl, String)::: classes by signature enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->printTrace->ps->writeString->ps->send->return
JDWP.VirtualMachine.ClassesBySignature#waitForReply(VirtualMachineImpl, PacketStream)::: classes by signature wait for reply:::ps->waitForReply->return->new->ClassesBySignature
JDWP.VirtualMachine.AllClasses#process(VirtualMachineImpl)::: all classes process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.AllClasses#enqueueCommand(VirtualMachineImpl)::: all classes enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.AllClasses#waitForReply(VirtualMachineImpl, PacketStream)::: all classes wait for reply:::ps->waitForReply->return->new->AllClasses
JDWP.VirtualMachine.AllThreads#process(VirtualMachineImpl)::: all threads process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.AllThreads#enqueueCommand(VirtualMachineImpl)::: all threads enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.AllThreads#waitForReply(VirtualMachineImpl, PacketStream)::: all threads wait for reply:::ps->waitForReply->return->new->AllThreads
JDWP.VirtualMachine.TopLevelThreadGroups#process(VirtualMachineImpl)::: top level thread groups process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.TopLevelThreadGroups#enqueueCommand(VirtualMachineImpl)::: top level thread groups enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.TopLevelThreadGroups#waitForReply(VirtualMachineImpl, PacketStream)::: top level thread groups wait for reply:::ps->waitForReply->return->new->TopLevelThreadGroups
JDWP.VirtualMachine.Dispose#process(VirtualMachineImpl)::: dispose process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.Dispose#enqueueCommand(VirtualMachineImpl)::: dispose enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.Dispose#waitForReply(VirtualMachineImpl, PacketStream)::: dispose wait for reply:::ps->waitForReply->return->new->Dispose
JDWP.VirtualMachine.IDSizes#process(VirtualMachineImpl)::: sizes process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.IDSizes#enqueueCommand(VirtualMachineImpl)::: sizes enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.IDSizes#waitForReply(VirtualMachineImpl, PacketStream)::: sizes wait for reply:::ps->waitForReply->return->new->IDSizes
JDWP.VirtualMachine.Suspend#process(VirtualMachineImpl)::: suspend process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.Suspend#enqueueCommand(VirtualMachineImpl)::: suspend enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.Suspend#waitForReply(VirtualMachineImpl, PacketStream)::: suspend wait for reply:::ps->waitForReply->return->new->Suspend
JDWP.VirtualMachine.Resume#process(VirtualMachineImpl)::: resume process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.Resume#enqueueCommand(VirtualMachineImpl)::: resume enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.Resume#waitForReply(VirtualMachineImpl, PacketStream)::: resume wait for reply:::ps->waitForReply->return->new->Resume
JDWP.VirtualMachine.Exit#process(VirtualMachineImpl, int)::: exit process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.Exit#enqueueCommand(VirtualMachineImpl, int)::: exit enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->printTrace->ps->writeInt->ps->send->return
JDWP.VirtualMachine.Exit#waitForReply(VirtualMachineImpl, PacketStream)::: exit wait for reply:::ps->waitForReply->return->new->Exit
JDWP.VirtualMachine.CreateString#process(VirtualMachineImpl, String)::: create string process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.CreateString#enqueueCommand(VirtualMachineImpl, String)::: create string enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->printTrace->ps->writeString->ps->send->return
JDWP.VirtualMachine.CreateString#waitForReply(VirtualMachineImpl, PacketStream)::: create string wait for reply:::ps->waitForReply->return->new->CreateString
JDWP.VirtualMachine.Capabilities#process(VirtualMachineImpl)::: capabilities process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.Capabilities#enqueueCommand(VirtualMachineImpl)::: capabilities enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.Capabilities#waitForReply(VirtualMachineImpl, PacketStream)::: capabilities wait for reply:::ps->waitForReply->return->new->Capabilities
JDWP.VirtualMachine.ClassPaths#process(VirtualMachineImpl)::: class paths process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.ClassPaths#enqueueCommand(VirtualMachineImpl)::: class paths enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.ClassPaths#waitForReply(VirtualMachineImpl, PacketStream)::: class paths wait for reply:::ps->waitForReply->return->new->ClassPaths
JDWP.VirtualMachine.DisposeObjects.Request#write(PacketStream)::: request write:::if->object->ref->printTrace->ps->object->ref->writeObjectRef->if->printTrace->ps->writeInt
JDWP.VirtualMachine.DisposeObjects#process(VirtualMachineImpl, Request[])::: dispose objects process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.DisposeObjects#enqueueCommand(VirtualMachineImpl, Request[])::: dispose objects enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.VirtualMachine.DisposeObjects#waitForReply(VirtualMachineImpl, PacketStream)::: dispose objects wait for reply:::ps->waitForReply->return->new->DisposeObjects
JDWP.VirtualMachine.HoldEvents#process(VirtualMachineImpl)::: hold events process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.HoldEvents#enqueueCommand(VirtualMachineImpl)::: hold events enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.HoldEvents#waitForReply(VirtualMachineImpl, PacketStream)::: hold events wait for reply:::ps->waitForReply->return->new->HoldEvents
JDWP.VirtualMachine.ReleaseEvents#process(VirtualMachineImpl)::: release events process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.ReleaseEvents#enqueueCommand(VirtualMachineImpl)::: release events enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.ReleaseEvents#waitForReply(VirtualMachineImpl, PacketStream)::: release events wait for reply:::ps->waitForReply->return->new->ReleaseEvents
JDWP.VirtualMachine.CapabilitiesNew#process(VirtualMachineImpl)::: capabilities new process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.CapabilitiesNew#enqueueCommand(VirtualMachineImpl)::: capabilities new enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.CapabilitiesNew#waitForReply(VirtualMachineImpl, PacketStream)::: capabilities new wait for reply:::ps->waitForReply->return->new->CapabilitiesNew
JDWP.VirtualMachine.RedefineClasses.ClassDef#write(PacketStream)::: class def write:::if->refType->ref->printTrace->ps->refType->ref->writeClassRef->if->printTrace->ps->writeInt->for->i
JDWP.VirtualMachine.RedefineClasses#process(VirtualMachineImpl, ClassDef[])::: redefine classes process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.RedefineClasses#enqueueCommand(VirtualMachineImpl, ClassDef[])::: redefine classes enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.VirtualMachine.RedefineClasses#waitForReply(VirtualMachineImpl, PacketStream)::: redefine classes wait for reply:::ps->waitForReply->return->new->RedefineClasses
JDWP.VirtualMachine.SetDefaultStratum#process(VirtualMachineImpl, String)::: set default stratum process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.SetDefaultStratum#enqueueCommand(VirtualMachineImpl, String)::: set default stratum enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->printTrace->ps->writeString->ps->send->return
JDWP.VirtualMachine.SetDefaultStratum#waitForReply(VirtualMachineImpl, PacketStream)::: set default stratum wait for reply:::ps->waitForReply->return->new->SetDefaultStratum
JDWP.VirtualMachine.AllClassesWithGeneric#process(VirtualMachineImpl)::: all classes with generic process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.AllClassesWithGeneric#enqueueCommand(VirtualMachineImpl)::: all classes with generic enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.AllClassesWithGeneric#waitForReply(VirtualMachineImpl, PacketStream)::: all classes with generic wait for reply:::ps->waitForReply->return->new->AllClassesWithGeneric
JDWP.VirtualMachine.InstanceCounts#process(VirtualMachineImpl, ReferenceTypeImpl[])::: instance counts process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.InstanceCounts#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl[])::: instance counts enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.VirtualMachine.InstanceCounts#waitForReply(VirtualMachineImpl, PacketStream)::: instance counts wait for reply:::ps->waitForReply->return->new->InstanceCounts
JDWP.VirtualMachine.AllModules#process(VirtualMachineImpl)::: all modules process:::ps->enqueueCommand->return->waitForReply
JDWP.VirtualMachine.AllModules#enqueueCommand(VirtualMachineImpl)::: all modules enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.VirtualMachine.AllModules#waitForReply(VirtualMachineImpl, PacketStream)::: all modules wait for reply:::ps->waitForReply->return->new->AllModules
JDWP.ReferenceType.Signature#process(VirtualMachineImpl, ReferenceTypeImpl)::: signature process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.Signature#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: signature enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.Signature#waitForReply(VirtualMachineImpl, PacketStream)::: signature wait for reply:::ps->waitForReply->return->new->Signature
JDWP.ReferenceType.ClassLoader#process(VirtualMachineImpl, ReferenceTypeImpl)::: class loader process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.ClassLoader#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: class loader enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.ClassLoader#waitForReply(VirtualMachineImpl, PacketStream)::: class loader wait for reply:::ps->waitForReply->return->new->ClassLoader
JDWP.ReferenceType.Modifiers#process(VirtualMachineImpl, ReferenceTypeImpl)::: modifiers process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.Modifiers#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: modifiers enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.Modifiers#waitForReply(VirtualMachineImpl, PacketStream)::: modifiers wait for reply:::ps->waitForReply->return->new->Modifiers
JDWP.ReferenceType.Fields#process(VirtualMachineImpl, ReferenceTypeImpl)::: fields process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.Fields#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: fields enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.Fields#waitForReply(VirtualMachineImpl, PacketStream)::: fields wait for reply:::ps->waitForReply->return->new->Fields
JDWP.ReferenceType.Methods#process(VirtualMachineImpl, ReferenceTypeImpl)::: methods process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.Methods#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: methods enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.Methods#waitForReply(VirtualMachineImpl, PacketStream)::: methods wait for reply:::ps->waitForReply->return->new->Methods
JDWP.ReferenceType.GetValues.Field#write(PacketStream)::: field write:::if->printTrace->ps->writeFieldRef
JDWP.ReferenceType.GetValues#process(VirtualMachineImpl, ReferenceTypeImpl, Field[])::: get values process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.GetValues#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl, Field[])::: get values enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.ReferenceType.GetValues#waitForReply(VirtualMachineImpl, PacketStream)::: get values wait for reply:::ps->waitForReply->return->new->GetValues
JDWP.ReferenceType.SourceFile#process(VirtualMachineImpl, ReferenceTypeImpl)::: source file process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.SourceFile#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: source file enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.SourceFile#waitForReply(VirtualMachineImpl, PacketStream)::: source file wait for reply:::ps->waitForReply->return->new->SourceFile
JDWP.ReferenceType.NestedTypes#process(VirtualMachineImpl, ReferenceTypeImpl)::: nested types process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.NestedTypes#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: nested types enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.NestedTypes#waitForReply(VirtualMachineImpl, PacketStream)::: nested types wait for reply:::ps->waitForReply->return->new->NestedTypes
JDWP.ReferenceType.Status#process(VirtualMachineImpl, ReferenceTypeImpl)::: status process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.Status#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: status enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.Status#waitForReply(VirtualMachineImpl, PacketStream)::: status wait for reply:::ps->waitForReply->return->new->Status
JDWP.ReferenceType.Interfaces#process(VirtualMachineImpl, ReferenceTypeImpl)::: interfaces process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.Interfaces#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: interfaces enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.Interfaces#waitForReply(VirtualMachineImpl, PacketStream)::: interfaces wait for reply:::ps->waitForReply->return->new->Interfaces
JDWP.ReferenceType.ClassObject#process(VirtualMachineImpl, ReferenceTypeImpl)::: class object process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.ClassObject#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: class object enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.ClassObject#waitForReply(VirtualMachineImpl, PacketStream)::: class object wait for reply:::ps->waitForReply->return->new->ClassObject
JDWP.ReferenceType.SourceDebugExtension#process(VirtualMachineImpl, ReferenceTypeImpl)::: source debug extension process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.SourceDebugExtension#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: source debug extension enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.SourceDebugExtension#waitForReply(VirtualMachineImpl, PacketStream)::: source debug extension wait for reply:::ps->waitForReply->return->new->SourceDebugExtension
JDWP.ReferenceType.SignatureWithGeneric#process(VirtualMachineImpl, ReferenceTypeImpl)::: signature with generic process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.SignatureWithGeneric#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: signature with generic enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.SignatureWithGeneric#waitForReply(VirtualMachineImpl, PacketStream)::: signature with generic wait for reply:::ps->waitForReply->return->new->SignatureWithGeneric
JDWP.ReferenceType.FieldsWithGeneric#process(VirtualMachineImpl, ReferenceTypeImpl)::: fields with generic process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.FieldsWithGeneric#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: fields with generic enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.FieldsWithGeneric#waitForReply(VirtualMachineImpl, PacketStream)::: fields with generic wait for reply:::ps->waitForReply->return->new->FieldsWithGeneric
JDWP.ReferenceType.MethodsWithGeneric#process(VirtualMachineImpl, ReferenceTypeImpl)::: methods with generic process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.MethodsWithGeneric#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: methods with generic enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.MethodsWithGeneric#waitForReply(VirtualMachineImpl, PacketStream)::: methods with generic wait for reply:::ps->waitForReply->return->new->MethodsWithGeneric
JDWP.ReferenceType.Instances#process(VirtualMachineImpl, ReferenceTypeImpl, int)::: instances process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.Instances#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl, int)::: instances enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->if->printTrace->ps->writeInt->ps->send->return
JDWP.ReferenceType.Instances#waitForReply(VirtualMachineImpl, PacketStream)::: instances wait for reply:::ps->waitForReply->return->new->Instances
JDWP.ReferenceType.ClassFileVersion#process(VirtualMachineImpl, ReferenceTypeImpl)::: class file version process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.ClassFileVersion#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: class file version enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.ClassFileVersion#waitForReply(VirtualMachineImpl, PacketStream)::: class file version wait for reply:::ps->waitForReply->return->new->ClassFileVersion
JDWP.ReferenceType.ConstantPool#process(VirtualMachineImpl, ReferenceTypeImpl)::: constant pool process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.ConstantPool#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: constant pool enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.ConstantPool#waitForReply(VirtualMachineImpl, PacketStream)::: constant pool wait for reply:::ps->waitForReply->return->new->ConstantPool
JDWP.ReferenceType.Module#process(VirtualMachineImpl, ReferenceTypeImpl)::: module process:::ps->enqueueCommand->return->waitForReply
JDWP.ReferenceType.Module#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl)::: module enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->ps->send->return
JDWP.ReferenceType.Module#waitForReply(VirtualMachineImpl, PacketStream)::: module wait for reply:::ps->waitForReply->return->new->Module
JDWP.ClassType.Superclass#process(VirtualMachineImpl, ClassTypeImpl)::: superclass process:::ps->enqueueCommand->return->waitForReply
JDWP.ClassType.Superclass#enqueueCommand(VirtualMachineImpl, ClassTypeImpl)::: superclass enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->clazz->ref->printTrace->ps->clazz->ref->writeClassRef->ps->send->return
JDWP.ClassType.Superclass#waitForReply(VirtualMachineImpl, PacketStream)::: superclass wait for reply:::ps->waitForReply->return->new->Superclass
JDWP.ClassType.SetValues.FieldValue#write(PacketStream)::: field value write:::if->printTrace->ps->writeFieldRef->if->printTrace->ps->writeUntaggedValue
JDWP.ClassType.SetValues#process(VirtualMachineImpl, ClassTypeImpl, FieldValue[])::: set values process:::ps->enqueueCommand->return->waitForReply
JDWP.ClassType.SetValues#enqueueCommand(VirtualMachineImpl, ClassTypeImpl, FieldValue[])::: set values enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->clazz->ref->printTrace->ps->clazz->ref->writeClassRef->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.ClassType.SetValues#waitForReply(VirtualMachineImpl, PacketStream)::: set values wait for reply:::ps->waitForReply->return->new->SetValues
JDWP.ClassType.InvokeMethod#process(VirtualMachineImpl, ClassTypeImpl, ThreadReferenceImpl, long, ValueImpl[], int)::: invoke method process:::ps->enqueueCommand->return->waitForReply
JDWP.ClassType.InvokeMethod#enqueueCommand(VirtualMachineImpl, ClassTypeImpl, ThreadReferenceImpl, long, ValueImpl[], int)::: invoke method enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->clazz->ref->printTrace->ps->clazz->ref->writeClassRef->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeMethodRef->if->printTrace->ps->writeInt->for->i->if->printTrace->ps->writeInt->ps->send->return
JDWP.ClassType.InvokeMethod#waitForReply(VirtualMachineImpl, PacketStream)::: invoke method wait for reply:::ps->waitForReply->return->new->InvokeMethod
JDWP.ClassType.NewInstance#process(VirtualMachineImpl, ClassTypeImpl, ThreadReferenceImpl, long, ValueImpl[], int)::: new instance process:::ps->enqueueCommand->return->waitForReply
JDWP.ClassType.NewInstance#enqueueCommand(VirtualMachineImpl, ClassTypeImpl, ThreadReferenceImpl, long, ValueImpl[], int)::: new instance enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->clazz->ref->printTrace->ps->clazz->ref->writeClassRef->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeMethodRef->if->printTrace->ps->writeInt->for->i->if->printTrace->ps->writeInt->ps->send->return
JDWP.ClassType.NewInstance#waitForReply(VirtualMachineImpl, PacketStream)::: new instance wait for reply:::ps->waitForReply->return->new->NewInstance
JDWP.ArrayType.NewInstance#process(VirtualMachineImpl, ArrayTypeImpl, int)::: new instance process:::ps->enqueueCommand->return->waitForReply
JDWP.ArrayType.NewInstance#enqueueCommand(VirtualMachineImpl, ArrayTypeImpl, int)::: new instance enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->arrType->ref->printTrace->ps->arrType->ref->writeClassRef->if->printTrace->ps->writeInt->ps->send->return
JDWP.ArrayType.NewInstance#waitForReply(VirtualMachineImpl, PacketStream)::: new instance wait for reply:::ps->waitForReply->return->new->NewInstance
JDWP.InterfaceType.InvokeMethod#process(VirtualMachineImpl, InterfaceTypeImpl, ThreadReferenceImpl, long, ValueImpl[], int)::: invoke method process:::ps->enqueueCommand->return->waitForReply
JDWP.InterfaceType.InvokeMethod#enqueueCommand(VirtualMachineImpl, InterfaceTypeImpl, ThreadReferenceImpl, long, ValueImpl[], int)::: invoke method enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->clazz->ref->printTrace->ps->clazz->ref->writeClassRef->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeMethodRef->if->printTrace->ps->writeInt->for->i->if->printTrace->ps->writeInt->ps->send->return
JDWP.InterfaceType.InvokeMethod#waitForReply(VirtualMachineImpl, PacketStream)::: invoke method wait for reply:::ps->waitForReply->return->new->InvokeMethod
JDWP.Method.LineTable#process(VirtualMachineImpl, ReferenceTypeImpl, long)::: line table process:::ps->enqueueCommand->return->waitForReply
JDWP.Method.LineTable#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl, long)::: line table enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->if->printTrace->ps->writeMethodRef->ps->send->return
JDWP.Method.LineTable#waitForReply(VirtualMachineImpl, PacketStream)::: line table wait for reply:::ps->waitForReply->return->new->LineTable
JDWP.Method.VariableTable#process(VirtualMachineImpl, ReferenceTypeImpl, long)::: variable table process:::ps->enqueueCommand->return->waitForReply
JDWP.Method.VariableTable#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl, long)::: variable table enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->if->printTrace->ps->writeMethodRef->ps->send->return
JDWP.Method.VariableTable#waitForReply(VirtualMachineImpl, PacketStream)::: variable table wait for reply:::ps->waitForReply->return->new->VariableTable
JDWP.Method.Bytecodes#process(VirtualMachineImpl, ReferenceTypeImpl, long)::: bytecodes process:::ps->enqueueCommand->return->waitForReply
JDWP.Method.Bytecodes#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl, long)::: bytecodes enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->if->printTrace->ps->writeMethodRef->ps->send->return
JDWP.Method.Bytecodes#waitForReply(VirtualMachineImpl, PacketStream)::: bytecodes wait for reply:::ps->waitForReply->return->new->Bytecodes
JDWP.Method.IsObsolete#process(VirtualMachineImpl, ReferenceTypeImpl, long)::: is obsolete process:::ps->enqueueCommand->return->waitForReply
JDWP.Method.IsObsolete#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl, long)::: is obsolete enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->if->printTrace->ps->writeMethodRef->ps->send->return
JDWP.Method.IsObsolete#waitForReply(VirtualMachineImpl, PacketStream)::: is obsolete wait for reply:::ps->waitForReply->return->new->IsObsolete
JDWP.Method.VariableTableWithGeneric#process(VirtualMachineImpl, ReferenceTypeImpl, long)::: variable table with generic process:::ps->enqueueCommand->return->waitForReply
JDWP.Method.VariableTableWithGeneric#enqueueCommand(VirtualMachineImpl, ReferenceTypeImpl, long)::: variable table with generic enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->refType->ref->printTrace->ps->refType->ref->writeClassRef->if->printTrace->ps->writeMethodRef->ps->send->return
JDWP.Method.VariableTableWithGeneric#waitForReply(VirtualMachineImpl, PacketStream)::: variable table with generic wait for reply:::ps->waitForReply->return->new->VariableTableWithGeneric
JDWP.ObjectReference.ReferenceType#process(VirtualMachineImpl, ObjectReferenceImpl)::: reference type process:::ps->enqueueCommand->return->waitForReply
JDWP.ObjectReference.ReferenceType#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl)::: reference type enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->object->ref->printTrace->ps->object->ref->writeObjectRef->ps->send->return
JDWP.ObjectReference.ReferenceType#waitForReply(VirtualMachineImpl, PacketStream)::: reference type wait for reply:::ps->waitForReply->return->new->ReferenceType
JDWP.ObjectReference.GetValues.Field#write(PacketStream)::: field write:::if->printTrace->ps->writeFieldRef
JDWP.ObjectReference.GetValues#process(VirtualMachineImpl, ObjectReferenceImpl, Field[])::: get values process:::ps->enqueueCommand->return->waitForReply
JDWP.ObjectReference.GetValues#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl, Field[])::: get values enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->object->ref->printTrace->ps->object->ref->writeObjectRef->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.ObjectReference.GetValues#waitForReply(VirtualMachineImpl, PacketStream)::: get values wait for reply:::ps->waitForReply->return->new->GetValues
JDWP.ObjectReference.SetValues.FieldValue#write(PacketStream)::: field value write:::if->printTrace->ps->writeFieldRef->if->printTrace->ps->writeUntaggedValue
JDWP.ObjectReference.SetValues#process(VirtualMachineImpl, ObjectReferenceImpl, FieldValue[])::: set values process:::ps->enqueueCommand->return->waitForReply
JDWP.ObjectReference.SetValues#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl, FieldValue[])::: set values enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->object->ref->printTrace->ps->object->ref->writeObjectRef->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.ObjectReference.SetValues#waitForReply(VirtualMachineImpl, PacketStream)::: set values wait for reply:::ps->waitForReply->return->new->SetValues
JDWP.ObjectReference.MonitorInfo#process(VirtualMachineImpl, ObjectReferenceImpl)::: monitor info process:::ps->enqueueCommand->return->waitForReply
JDWP.ObjectReference.MonitorInfo#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl)::: monitor info enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->object->ref->printTrace->ps->object->ref->writeObjectRef->ps->send->return
JDWP.ObjectReference.MonitorInfo#waitForReply(VirtualMachineImpl, PacketStream)::: monitor info wait for reply:::ps->waitForReply->return->new->MonitorInfo
JDWP.ObjectReference.InvokeMethod#process(VirtualMachineImpl, ObjectReferenceImpl, ThreadReferenceImpl, ClassTypeImpl, long, ValueImpl[], int)::: invoke method process:::ps->enqueueCommand->return->waitForReply
JDWP.ObjectReference.InvokeMethod#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl, ThreadReferenceImpl, ClassTypeImpl, long, ValueImpl[], int)::: invoke method enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->object->ref->printTrace->ps->object->ref->writeObjectRef->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->clazz->ref->printTrace->ps->clazz->ref->writeClassRef->if->printTrace->ps->writeMethodRef->if->printTrace->ps->writeInt->for->i->if->printTrace->ps->writeInt->ps->send->return
JDWP.ObjectReference.InvokeMethod#waitForReply(VirtualMachineImpl, PacketStream)::: invoke method wait for reply:::ps->waitForReply->return->new->InvokeMethod
JDWP.ObjectReference.DisableCollection#process(VirtualMachineImpl, ObjectReferenceImpl)::: disable collection process:::ps->enqueueCommand->return->waitForReply
JDWP.ObjectReference.DisableCollection#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl)::: disable collection enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->object->ref->printTrace->ps->object->ref->writeObjectRef->ps->send->return
JDWP.ObjectReference.DisableCollection#waitForReply(VirtualMachineImpl, PacketStream)::: disable collection wait for reply:::ps->waitForReply->return->new->DisableCollection
JDWP.ObjectReference.EnableCollection#process(VirtualMachineImpl, ObjectReferenceImpl)::: enable collection process:::ps->enqueueCommand->return->waitForReply
JDWP.ObjectReference.EnableCollection#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl)::: enable collection enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->object->ref->printTrace->ps->object->ref->writeObjectRef->ps->send->return
JDWP.ObjectReference.EnableCollection#waitForReply(VirtualMachineImpl, PacketStream)::: enable collection wait for reply:::ps->waitForReply->return->new->EnableCollection
JDWP.ObjectReference.IsCollected#process(VirtualMachineImpl, ObjectReferenceImpl)::: is collected process:::ps->enqueueCommand->return->waitForReply
JDWP.ObjectReference.IsCollected#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl)::: is collected enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->object->ref->printTrace->ps->object->ref->writeObjectRef->ps->send->return
JDWP.ObjectReference.IsCollected#waitForReply(VirtualMachineImpl, PacketStream)::: is collected wait for reply:::ps->waitForReply->return->new->IsCollected
JDWP.ObjectReference.ReferringObjects#process(VirtualMachineImpl, ObjectReferenceImpl, int)::: referring objects process:::ps->enqueueCommand->return->waitForReply
JDWP.ObjectReference.ReferringObjects#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl, int)::: referring objects enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->object->ref->printTrace->ps->object->ref->writeObjectRef->if->printTrace->ps->writeInt->ps->send->return
JDWP.ObjectReference.ReferringObjects#waitForReply(VirtualMachineImpl, PacketStream)::: referring objects wait for reply:::ps->waitForReply->return->new->ReferringObjects
JDWP.StringReference.Value#process(VirtualMachineImpl, ObjectReferenceImpl)::: value process:::ps->enqueueCommand->return->waitForReply
JDWP.StringReference.Value#enqueueCommand(VirtualMachineImpl, ObjectReferenceImpl)::: value enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->stringObject->ref->printTrace->ps->stringObject->ref->writeObjectRef->ps->send->return
JDWP.StringReference.Value#waitForReply(VirtualMachineImpl, PacketStream)::: value wait for reply:::ps->waitForReply->return->new->Value
JDWP.ThreadReference.Name#process(VirtualMachineImpl, ThreadReferenceImpl)::: name process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.Name#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: name enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.Name#waitForReply(VirtualMachineImpl, PacketStream)::: name wait for reply:::ps->waitForReply->return->new->Name
JDWP.ThreadReference.Suspend#process(VirtualMachineImpl, ThreadReferenceImpl)::: suspend process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.Suspend#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: suspend enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.Suspend#waitForReply(VirtualMachineImpl, PacketStream)::: suspend wait for reply:::ps->waitForReply->return->new->Suspend
JDWP.ThreadReference.Resume#process(VirtualMachineImpl, ThreadReferenceImpl)::: resume process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.Resume#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: resume enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.Resume#waitForReply(VirtualMachineImpl, PacketStream)::: resume wait for reply:::ps->waitForReply->return->new->Resume
JDWP.ThreadReference.Status#process(VirtualMachineImpl, ThreadReferenceImpl)::: status process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.Status#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: status enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.Status#waitForReply(VirtualMachineImpl, PacketStream)::: status wait for reply:::ps->waitForReply->return->new->Status
JDWP.ThreadReference.ThreadGroup#process(VirtualMachineImpl, ThreadReferenceImpl)::: thread group process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.ThreadGroup#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: thread group enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.ThreadGroup#waitForReply(VirtualMachineImpl, PacketStream)::: thread group wait for reply:::ps->waitForReply->return->new->ThreadGroup
JDWP.ThreadReference.Frames#process(VirtualMachineImpl, ThreadReferenceImpl, int, int)::: frames process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.Frames#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl, int, int)::: frames enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeInt->if->printTrace->ps->writeInt->ps->send->return
JDWP.ThreadReference.Frames#waitForReply(VirtualMachineImpl, PacketStream)::: frames wait for reply:::ps->waitForReply->return->new->Frames
JDWP.ThreadReference.FrameCount#process(VirtualMachineImpl, ThreadReferenceImpl)::: frame count process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.FrameCount#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: frame count enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.FrameCount#waitForReply(VirtualMachineImpl, PacketStream)::: frame count wait for reply:::ps->waitForReply->return->new->FrameCount
JDWP.ThreadReference.OwnedMonitors#process(VirtualMachineImpl, ThreadReferenceImpl)::: owned monitors process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.OwnedMonitors#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: owned monitors enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.OwnedMonitors#waitForReply(VirtualMachineImpl, PacketStream)::: owned monitors wait for reply:::ps->waitForReply->return->new->OwnedMonitors
JDWP.ThreadReference.CurrentContendedMonitor#process(VirtualMachineImpl, ThreadReferenceImpl)::: current contended monitor process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.CurrentContendedMonitor#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: current contended monitor enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.CurrentContendedMonitor#waitForReply(VirtualMachineImpl, PacketStream)::: current contended monitor wait for reply:::ps->waitForReply->return->new->CurrentContendedMonitor
JDWP.ThreadReference.Stop#process(VirtualMachineImpl, ThreadReferenceImpl, ObjectReferenceImpl)::: stop process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.Stop#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl, ObjectReferenceImpl)::: stop enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->throwable->ref->printTrace->ps->throwable->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.Stop#waitForReply(VirtualMachineImpl, PacketStream)::: stop wait for reply:::ps->waitForReply->return->new->Stop
JDWP.ThreadReference.Interrupt#process(VirtualMachineImpl, ThreadReferenceImpl)::: interrupt process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.Interrupt#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: interrupt enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.Interrupt#waitForReply(VirtualMachineImpl, PacketStream)::: interrupt wait for reply:::ps->waitForReply->return->new->Interrupt
JDWP.ThreadReference.SuspendCount#process(VirtualMachineImpl, ThreadReferenceImpl)::: suspend count process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.SuspendCount#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: suspend count enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.SuspendCount#waitForReply(VirtualMachineImpl, PacketStream)::: suspend count wait for reply:::ps->waitForReply->return->new->SuspendCount
JDWP.ThreadReference.OwnedMonitorsStackDepthInfo#process(VirtualMachineImpl, ThreadReferenceImpl)::: owned monitors stack depth info process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.OwnedMonitorsStackDepthInfo#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl)::: owned monitors stack depth info enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->ps->send->return
JDWP.ThreadReference.OwnedMonitorsStackDepthInfo#waitForReply(VirtualMachineImpl, PacketStream)::: owned monitors stack depth info wait for reply:::ps->waitForReply->return->new->OwnedMonitorsStackDepthInfo
JDWP.ThreadReference.ForceEarlyReturn#process(VirtualMachineImpl, ThreadReferenceImpl, ValueImpl)::: force early return process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadReference.ForceEarlyReturn#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl, ValueImpl)::: force early return enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeValue->ps->send->return
JDWP.ThreadReference.ForceEarlyReturn#waitForReply(VirtualMachineImpl, PacketStream)::: force early return wait for reply:::ps->waitForReply->return->new->ForceEarlyReturn
JDWP.ThreadGroupReference.Name#process(VirtualMachineImpl, ThreadGroupReferenceImpl)::: name process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadGroupReference.Name#enqueueCommand(VirtualMachineImpl, ThreadGroupReferenceImpl)::: name enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->group->ref->printTrace->ps->group->ref->writeObjectRef->ps->send->return
JDWP.ThreadGroupReference.Name#waitForReply(VirtualMachineImpl, PacketStream)::: name wait for reply:::ps->waitForReply->return->new->Name
JDWP.ThreadGroupReference.Parent#process(VirtualMachineImpl, ThreadGroupReferenceImpl)::: parent process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadGroupReference.Parent#enqueueCommand(VirtualMachineImpl, ThreadGroupReferenceImpl)::: parent enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->group->ref->printTrace->ps->group->ref->writeObjectRef->ps->send->return
JDWP.ThreadGroupReference.Parent#waitForReply(VirtualMachineImpl, PacketStream)::: parent wait for reply:::ps->waitForReply->return->new->Parent
JDWP.ThreadGroupReference.Children#process(VirtualMachineImpl, ThreadGroupReferenceImpl)::: children process:::ps->enqueueCommand->return->waitForReply
JDWP.ThreadGroupReference.Children#enqueueCommand(VirtualMachineImpl, ThreadGroupReferenceImpl)::: children enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->group->ref->printTrace->ps->group->ref->writeObjectRef->ps->send->return
JDWP.ThreadGroupReference.Children#waitForReply(VirtualMachineImpl, PacketStream)::: children wait for reply:::ps->waitForReply->return->new->Children
JDWP.ArrayReference.Length#process(VirtualMachineImpl, ArrayReferenceImpl)::: length process:::ps->enqueueCommand->return->waitForReply
JDWP.ArrayReference.Length#enqueueCommand(VirtualMachineImpl, ArrayReferenceImpl)::: length enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->arrayObject->ref->printTrace->ps->arrayObject->ref->writeObjectRef->ps->send->return
JDWP.ArrayReference.Length#waitForReply(VirtualMachineImpl, PacketStream)::: length wait for reply:::ps->waitForReply->return->new->Length
JDWP.ArrayReference.GetValues#process(VirtualMachineImpl, ArrayReferenceImpl, int, int)::: get values process:::ps->enqueueCommand->return->waitForReply
JDWP.ArrayReference.GetValues#enqueueCommand(VirtualMachineImpl, ArrayReferenceImpl, int, int)::: get values enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->arrayObject->ref->printTrace->ps->arrayObject->ref->writeObjectRef->if->printTrace->ps->writeInt->if->printTrace->ps->writeInt->ps->send->return
JDWP.ArrayReference.GetValues#waitForReply(VirtualMachineImpl, PacketStream)::: get values wait for reply:::ps->waitForReply->return->new->GetValues
JDWP.ArrayReference.SetValues#process(VirtualMachineImpl, ArrayReferenceImpl, int, ValueImpl[])::: set values process:::ps->enqueueCommand->return->waitForReply
JDWP.ArrayReference.SetValues#enqueueCommand(VirtualMachineImpl, ArrayReferenceImpl, int, ValueImpl[])::: set values enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->arrayObject->ref->printTrace->ps->arrayObject->ref->writeObjectRef->if->printTrace->ps->writeInt->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.ArrayReference.SetValues#waitForReply(VirtualMachineImpl, PacketStream)::: set values wait for reply:::ps->waitForReply->return->new->SetValues
JDWP.ClassLoaderReference.VisibleClasses#process(VirtualMachineImpl, ClassLoaderReferenceImpl)::: visible classes process:::ps->enqueueCommand->return->waitForReply
JDWP.ClassLoaderReference.VisibleClasses#enqueueCommand(VirtualMachineImpl, ClassLoaderReferenceImpl)::: visible classes enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->classLoaderObject->ref->printTrace->ps->classLoaderObject->ref->writeObjectRef->ps->send->return
JDWP.ClassLoaderReference.VisibleClasses#waitForReply(VirtualMachineImpl, PacketStream)::: visible classes wait for reply:::ps->waitForReply->return->new->VisibleClasses
JDWP.EventRequest.Set.Modifier.ModifierCommon#write(PacketStream)::: modifier common write:::
JDWP.EventRequest.Set.Modifier#write(PacketStream)::: modifier write:::if->printTrace->ps->writeByte->aModifierCommon->write
JDWP.EventRequest.Set.Modifier.Count#create(int)::: count create:::return->new->Count->new->Modifier
JDWP.EventRequest.Set.Modifier.Count#write(PacketStream)::: count write:::if->printTrace->ps->writeInt
JDWP.EventRequest.Set.Modifier.Conditional#create(int)::: conditional create:::return->new->Conditional->new->Modifier
JDWP.EventRequest.Set.Modifier.Conditional#write(PacketStream)::: conditional write:::if->printTrace->ps->writeInt
JDWP.EventRequest.Set.Modifier.ThreadOnly#create(ThreadReferenceImpl)::: thread only create:::return->new->ThreadOnly->new->Modifier
JDWP.EventRequest.Set.Modifier.ThreadOnly#write(PacketStream)::: thread only write:::if->thread->ref->printTrace->ps->thread->ref->writeObjectRef
JDWP.EventRequest.Set.Modifier.ClassOnly#create(ReferenceTypeImpl)::: class only create:::return->new->ClassOnly->new->Modifier
JDWP.EventRequest.Set.Modifier.ClassOnly#write(PacketStream)::: class only write:::if->clazz->ref->printTrace->ps->clazz->ref->writeClassRef
JDWP.EventRequest.Set.Modifier.ClassMatch#create(String)::: class match create:::return->new->ClassMatch->new->Modifier
JDWP.EventRequest.Set.Modifier.ClassMatch#write(PacketStream)::: class match write:::if->printTrace->ps->writeString
JDWP.EventRequest.Set.Modifier.ClassExclude#create(String)::: class exclude create:::return->new->ClassExclude->new->Modifier
JDWP.EventRequest.Set.Modifier.ClassExclude#write(PacketStream)::: class exclude write:::if->printTrace->ps->writeString
JDWP.EventRequest.Set.Modifier.LocationOnly#create(Location)::: location only create:::return->new->LocationOnly->new->Modifier
JDWP.EventRequest.Set.Modifier.LocationOnly#write(PacketStream)::: location only write:::if->printTrace->ps->writeLocation
JDWP.EventRequest.Set.Modifier.ExceptionOnly#create(ReferenceTypeImpl, boolean, boolean)::: exception only create:::return->new->ExceptionOnly->new->Modifier
JDWP.EventRequest.Set.Modifier.ExceptionOnly#write(PacketStream)::: exception only write:::if->exceptionOrNull->ref->printTrace->ps->exceptionOrNull->ref->writeClassRef->if->printTrace->ps->writeBoolean->if->printTrace->ps->writeBoolean
JDWP.EventRequest.Set.Modifier.FieldOnly#create(ReferenceTypeImpl, long)::: field only create:::return->new->FieldOnly->new->Modifier
JDWP.EventRequest.Set.Modifier.FieldOnly#write(PacketStream)::: field only write:::if->declaring->ref->printTrace->ps->declaring->ref->writeClassRef->if->printTrace->ps->writeFieldRef
JDWP.EventRequest.Set.Modifier.Step#create(ThreadReferenceImpl, int, int)::: step create:::return->new->Step->new->Modifier
JDWP.EventRequest.Set.Modifier.Step#write(PacketStream)::: step write:::if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeInt->if->printTrace->ps->writeInt
JDWP.EventRequest.Set.Modifier.InstanceOnly#create(ObjectReferenceImpl)::: instance only create:::return->new->InstanceOnly->new->Modifier
JDWP.EventRequest.Set.Modifier.InstanceOnly#write(PacketStream)::: instance only write:::if->instance->ref->printTrace->ps->instance->ref->writeObjectRef
JDWP.EventRequest.Set.Modifier.SourceNameMatch#create(String)::: source name match create:::return->new->SourceNameMatch->new->Modifier
JDWP.EventRequest.Set.Modifier.SourceNameMatch#write(PacketStream)::: source name match write:::if->printTrace->ps->writeString
JDWP.EventRequest.Set#process(VirtualMachineImpl, byte, byte, Modifier[])::: set process:::ps->enqueueCommand->return->waitForReply
JDWP.EventRequest.Set#enqueueCommand(VirtualMachineImpl, byte, byte, Modifier[])::: set enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->printTrace->ps->writeByte->if->printTrace->ps->writeByte->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.EventRequest.Set#waitForReply(VirtualMachineImpl, PacketStream)::: set wait for reply:::ps->waitForReply->return->new->Set
JDWP.EventRequest.Clear#process(VirtualMachineImpl, byte, int)::: clear process:::ps->enqueueCommand->return->waitForReply
JDWP.EventRequest.Clear#enqueueCommand(VirtualMachineImpl, byte, int)::: clear enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->printTrace->ps->writeByte->if->printTrace->ps->writeInt->ps->send->return
JDWP.EventRequest.Clear#waitForReply(VirtualMachineImpl, PacketStream)::: clear wait for reply:::ps->waitForReply->return->new->Clear
JDWP.EventRequest.ClearAllBreakpoints#process(VirtualMachineImpl)::: clear all breakpoints process:::ps->enqueueCommand->return->waitForReply
JDWP.EventRequest.ClearAllBreakpoints#enqueueCommand(VirtualMachineImpl)::: clear all breakpoints enqueue command:::ps->new->PacketStream->if->vm->printTrace->ps->send->return
JDWP.EventRequest.ClearAllBreakpoints#waitForReply(VirtualMachineImpl, PacketStream)::: clear all breakpoints wait for reply:::ps->waitForReply->return->new->ClearAllBreakpoints
JDWP.StackFrame.GetValues.SlotInfo#write(PacketStream)::: slot info write:::if->printTrace->ps->writeInt->if->printTrace->ps->writeByte
JDWP.StackFrame.GetValues#process(VirtualMachineImpl, ThreadReferenceImpl, long, SlotInfo[])::: get values process:::ps->enqueueCommand->return->waitForReply
JDWP.StackFrame.GetValues#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl, long, SlotInfo[])::: get values enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeFrameRef->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.StackFrame.GetValues#waitForReply(VirtualMachineImpl, PacketStream)::: get values wait for reply:::ps->waitForReply->return->new->GetValues
JDWP.StackFrame.SetValues.SlotInfo#write(PacketStream)::: slot info write:::if->printTrace->ps->writeInt->if->printTrace->ps->writeValue
JDWP.StackFrame.SetValues#process(VirtualMachineImpl, ThreadReferenceImpl, long, SlotInfo[])::: set values process:::ps->enqueueCommand->return->waitForReply
JDWP.StackFrame.SetValues#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl, long, SlotInfo[])::: set values enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeFrameRef->if->printTrace->ps->writeInt->for->i->ps->send->return
JDWP.StackFrame.SetValues#waitForReply(VirtualMachineImpl, PacketStream)::: set values wait for reply:::ps->waitForReply->return->new->SetValues
JDWP.StackFrame.ThisObject#process(VirtualMachineImpl, ThreadReferenceImpl, long)::: this object process:::ps->enqueueCommand->return->waitForReply
JDWP.StackFrame.ThisObject#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl, long)::: this object enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeFrameRef->ps->send->return
JDWP.StackFrame.ThisObject#waitForReply(VirtualMachineImpl, PacketStream)::: this object wait for reply:::ps->waitForReply->return->new->ThisObject
JDWP.StackFrame.PopFrames#process(VirtualMachineImpl, ThreadReferenceImpl, long)::: pop frames process:::ps->enqueueCommand->return->waitForReply
JDWP.StackFrame.PopFrames#enqueueCommand(VirtualMachineImpl, ThreadReferenceImpl, long)::: pop frames enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->thread->ref->printTrace->ps->thread->ref->writeObjectRef->if->printTrace->ps->writeFrameRef->ps->send->return
JDWP.StackFrame.PopFrames#waitForReply(VirtualMachineImpl, PacketStream)::: pop frames wait for reply:::ps->waitForReply->return->new->PopFrames
JDWP.ClassObjectReference.ReflectedType#process(VirtualMachineImpl, ClassObjectReferenceImpl)::: reflected type process:::ps->enqueueCommand->return->waitForReply
JDWP.ClassObjectReference.ReflectedType#enqueueCommand(VirtualMachineImpl, ClassObjectReferenceImpl)::: reflected type enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->classObject->ref->printTrace->ps->classObject->ref->writeObjectRef->ps->send->return
JDWP.ClassObjectReference.ReflectedType#waitForReply(VirtualMachineImpl, PacketStream)::: reflected type wait for reply:::ps->waitForReply->return->new->ReflectedType
JDWP.ModuleReference.Name#process(VirtualMachineImpl, ModuleReferenceImpl)::: name process:::ps->enqueueCommand->return->waitForReply
JDWP.ModuleReference.Name#enqueueCommand(VirtualMachineImpl, ModuleReferenceImpl)::: name enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->module->ref->printTrace->ps->module->ref->writeModuleRef->ps->send->return
JDWP.ModuleReference.Name#waitForReply(VirtualMachineImpl, PacketStream)::: name wait for reply:::ps->waitForReply->return->new->Name
JDWP.ModuleReference.ClassLoader#process(VirtualMachineImpl, ModuleReferenceImpl)::: class loader process:::ps->enqueueCommand->return->waitForReply
JDWP.ModuleReference.ClassLoader#enqueueCommand(VirtualMachineImpl, ModuleReferenceImpl)::: class loader enqueue command:::ps->new->PacketStream->if->vm->printTrace->if->module->ref->printTrace->ps->module->ref->writeModuleRef->ps->send->return
JDWP.ModuleReference.ClassLoader#waitForReply(VirtualMachineImpl, PacketStream)::: class loader wait for reply:::ps->waitForReply->return->new->ClassLoader
JDWP.Event.Composite.Events.EventsCommon#eventKind()::: events common event kind:::
JDWP.Event.Composite.Events.VMStart#eventKind()::: start event kind:::return
JDWP.Event.Composite.Events.SingleStep#eventKind()::: single step event kind:::return
JDWP.Event.Composite.Events.Breakpoint#eventKind()::: breakpoint event kind:::return
JDWP.Event.Composite.Events.MethodEntry#eventKind()::: method entry event kind:::return
JDWP.Event.Composite.Events.MethodExit#eventKind()::: method exit event kind:::return
JDWP.Event.Composite.Events.MethodExitWithReturnValue#eventKind()::: method exit with return value event kind:::return
JDWP.Event.Composite.Events.MonitorContendedEnter#eventKind()::: monitor contended enter event kind:::return
JDWP.Event.Composite.Events.MonitorContendedEntered#eventKind()::: monitor contended entered event kind:::return
JDWP.Event.Composite.Events.MonitorWait#eventKind()::: monitor wait event kind:::return
JDWP.Event.Composite.Events.MonitorWaited#eventKind()::: monitor waited event kind:::return
JDWP.Event.Composite.Events.Exception#eventKind()::: exception event kind:::return
JDWP.Event.Composite.Events.ThreadStart#eventKind()::: thread start event kind:::return
JDWP.Event.Composite.Events.ThreadDeath#eventKind()::: thread death event kind:::return
JDWP.Event.Composite.Events.ClassPrepare#eventKind()::: class prepare event kind:::return
JDWP.Event.Composite.Events.ClassUnload#eventKind()::: class unload event kind:::return
JDWP.Event.Composite.Events.FieldAccess#eventKind()::: field access event kind:::return
JDWP.Event.Composite.Events.FieldModification#eventKind()::: field modification event kind:::return
JDWP.Event.Composite.Events.VMDeath#eventKind()::: death event kind:::return
JDWPException#errorCode()::: exception error code:::return
JDWPException#toJDIException()::: exception to exception:::switch->return->new->ObjectCollectedException->return->new->InvalidModuleException->return->new->VMDisconnectedException->return->new->VMOutOfMemoryException->return->new->ClassNotPreparedException->return->new->InvalidStackFrameException->return->new->UnsupportedOperationException->return->new->IndexOutOfBoundsException->return->new->InconsistentDebugInfoException->return->new->IllegalThreadStateException->return->new->InternalException
JNITypeParser#typeNameToSignature(String)::: type parser type name to signature:::sb->new->StringBuilder->firstIndex->signature->indexOf->index->while->sb->append->signature->indexOf->if->signature->substring->if->signature->equals->sb->append->else->if->signature->equals->sb->append->else->if->signature->equals->sb->append->else->if->signature->equals->sb->append->else->if->signature->equals->sb->append->else->if->signature->equals->sb->append->else->if->signature->equals->sb->append->else->if->signature->equals->sb->append->else->sb->append->sb->signature->replace->append->sb->append->return->sb->toString
JNITypeParser#typeName()::: type parser type name:::return->typeNameList->typeNameList->size->get
JNITypeParser#argumentTypeNames()::: type parser argument type names:::return->typeNameList->typeNameList->size->subList
JNITypeParser#signature()::: type parser signature:::return->signatureList->signatureList->size->get
JNITypeParser#argumentSignatures()::: type parser argument signatures:::return->signatureList->signatureList->size->subList
JNITypeParser#dimensionCount()::: type parser dimension count:::count->signature->signature->while->signature->charAt->return
JNITypeParser#componentSignature(int)::: type parser component signature:::return->signature->substring
JNITypeParser#signatureList()::: type parser signature list:::if->new->ArrayList<>->elem->while->signature->length->nextSignature->signatureList->add->if->signatureList->size->throw->new->IllegalArgumentException->return
JNITypeParser#typeNameList()::: type parser type name list:::if->new->ArrayList<>->elem->while->signature->length->nextTypeName->typeNameList->add->if->typeNameList->size->throw->new->IllegalArgumentException->return
JNITypeParser#nextSignature()::: type parser next signature:::key->signature->charAt->switch->return->nextSignature->endClass->signature->indexOf->retVal->signature->substring->return->return->String->valueOf->return->nextSignature->throw->new->IllegalArgumentException
JNITypeParser#nextTypeName()::: type parser next type name:::key->signature->charAt->switch->return->nextTypeName->return->return->endClass->signature->indexOf->retVal->signature->substring->retVal->replace->return->return->return->return->return->return->return->return->return->nextTypeName->throw->new->IllegalArgumentException
LineInfo#liStratum()::: line info li stratum:::
LineInfo#liLineNumber()::: line info li line number:::
LineInfo#liSourceName()::: line info li source name:::
LineInfo#liSourcePath()::: line info li source path:::
LocalVariableImpl#equals(Object)::: local variable impl equals:::if->other->return->slot->other->slot->scopeStart->equals->super->equals->else->return
LocalVariableImpl#hashCode()::: local variable impl hash code:::return->scopeStart->hashCode->slot
LocalVariableImpl#compareTo(LocalVariable)::: local variable impl compare to:::other->rc->scopeStart->compareTo->if->slot->other->slot->return
LocalVariableImpl#name()::: local variable impl name:::return
LocalVariableImpl#typeName()::: local variable impl type name:::parser->new->JNITypeParser->return->parser->typeName
LocalVariableImpl#type()::: local variable impl type:::return->signature->findType
LocalVariableImpl#findType(String)::: local variable impl find type:::enclosing->method->declaringType->return->enclosing->findType
LocalVariableImpl#signature()::: local variable impl signature:::return
LocalVariableImpl#genericSignature()::: local variable impl generic signature:::return
LocalVariableImpl#isVisible(StackFrame)::: local variable impl is visible:::validateMirror->frameMethod->frame->location->method->if->frameMethod->equals->throw->new->IllegalArgumentException->if->frameMethod->isNative->return->return->scopeStart->frame->location->compareTo->scopeEnd->frame->location->compareTo
LocalVariableImpl#isArgument()::: local variable impl is argument:::try->method->scopeStart->method->return->method->argSlotCount->catch->throw->new->InternalException->finally
LocalVariableImpl#slot()::: local variable impl slot:::return
LocalVariableImpl#hides(LocalVariable)::: local variable impl hides:::otherImpl->if->method->equals->name->equals->return->else->return->scopeStart->compareTo
LocalVariableImpl#toString()::: local variable impl to string:::return->name->method->toString->scopeStart->toString
LocationImpl#equals(Object)::: location impl equals:::if->other->return->method->other->method->equals->codeIndex->other->codeIndex->super->equals->else->return
LocationImpl#hashCode()::: location impl hash code:::return->method->hashCode->codeIndex
LocationImpl#compareTo(Location)::: location impl compare to:::rc->method->other->method->compareTo->if->diff->codeIndex->other->codeIndex->if->return->else->if->return->else->return->return
LocationImpl#declaringType()::: location impl declaring type:::return
LocationImpl#method()::: location impl method:::if->declaringType->getMethodMirror->if->method->isNative->return
LocationImpl#codeIndex()::: location impl code index:::method->return
LocationImpl#getBaseLineInfo(SDE.Stratum)::: location impl get base line info:::lineInfo->if->return->methodImpl->method->methodImpl->codeIndex->codeIndexToLineInfo->addBaseLineInfo->return
LocationImpl#getLineInfo(SDE.Stratum)::: location impl get line info:::lineInfo->if->stratum->isJava->return->getBaseLineInfo->if->stratum->id->lineInfo->liStratum->equals->return->baseLineNumber->lineNumber->lineStratum->stratum->lineStratum->if->lineStratum->lineNumber->stratum->id->lineStratum->lineNumber->lineStratum->sourceName->lineStratum->sourcePath->new->StratumLineInfo->else->methodImpl->method->methodImpl->codeIndex->codeIndexToLineInfo->addStratumLineInfo->return
LocationImpl#addStratumLineInfo(LineInfo)::: location impl add stratum line info:::
LocationImpl#addBaseLineInfo(LineInfo)::: location impl add base line info:::
LocationImpl#sourceName()::: location impl source name:::return->vm->getDefaultStratum->sourceName
LocationImpl#sourceName(String)::: location impl source name:::return->declaringType->stratum->sourceName
LocationImpl#sourceName(SDE.Stratum)::: location impl source name:::return->getLineInfo->liSourceName
LocationImpl#sourcePath()::: location impl source path:::return->vm->getDefaultStratum->sourcePath
LocationImpl#sourcePath(String)::: location impl source path:::return->declaringType->stratum->sourcePath
LocationImpl#sourcePath(SDE.Stratum)::: location impl source path:::return->getLineInfo->liSourcePath
LocationImpl#lineNumber()::: location impl line number:::return->vm->getDefaultStratum->lineNumber
LocationImpl#lineNumber(String)::: location impl line number:::return->declaringType->stratum->lineNumber
LocationImpl#lineNumber(SDE.Stratum)::: location impl line number:::return->getLineInfo->liLineNumber
LocationImpl#toString()::: location impl to string:::if->lineNumber->return->method->toString->codeIndex->else->return->declaringType->name->lineNumber
LongTypeImpl#signature()::: long type impl signature:::return->String->valueOf
LongTypeImpl#convert(PrimitiveValue)::: long type impl convert:::return->vm->checkedLongValue->mirrorOf
LongValueImpl#equals(Object)::: long value impl equals:::if->return->value->super->equals->else->return
LongValueImpl#hashCode()::: long value impl hash code:::return->intValue
LongValueImpl#compareTo(LongValue)::: long value impl compare to:::other->obj->value->if->value->return->else->if->value->return->else->return
LongValueImpl#type()::: long value impl type:::return->vm->theLongType
LongValueImpl#value()::: long value impl value:::return
LongValueImpl#booleanValue()::: long value impl boolean value:::return
LongValueImpl#byteValue()::: long value impl byte value:::return
LongValueImpl#charValue()::: long value impl char value:::return
LongValueImpl#shortValue()::: long value impl short value:::return
LongValueImpl#intValue()::: long value impl int value:::return
LongValueImpl#longValue()::: long value impl long value:::return
LongValueImpl#floatValue()::: long value impl float value:::return
LongValueImpl#doubleValue()::: long value impl double value:::return
LongValueImpl#checkedByteValue()::: long value impl checked byte value:::if->throw->new->InvalidTypeException->else->return->super->checkedByteValue
LongValueImpl#checkedCharValue()::: long value impl checked char value:::if->throw->new->InvalidTypeException->else->return->super->checkedCharValue
LongValueImpl#checkedShortValue()::: long value impl checked short value:::if->throw->new->InvalidTypeException->else->return->super->checkedShortValue
LongValueImpl#checkedIntValue()::: long value impl checked int value:::if->throw->new->InvalidTypeException->else->return->super->checkedIntValue
LongValueImpl#toString()::: long value impl to string:::return
LongValueImpl#typeValueKey()::: long value impl type value key:::return
MethodImpl#argSlotCount()::: method impl arg slot count:::
MethodImpl#allLineLocations(SDE.Stratum, String)::: method impl all line locations:::
MethodImpl#locationsOfLine(SDE.Stratum, String, int)::: method impl locations of line:::
MethodImpl#createMethodImpl(VirtualMachine, ReferenceTypeImpl, long, String, String, String, int)::: method impl create method impl:::if->return->new->NonConcreteMethodImpl->else->return->new->ConcreteMethodImpl
MethodImpl#equals(Object)::: method impl equals:::if->other->return->declaringType->other->declaringType->equals->ref->other->ref->super->equals->else->return
MethodImpl#hashCode()::: method impl hash code:::return->ref
MethodImpl#allLineLocations()::: method impl all line locations:::return->vm->getDefaultStratum->allLineLocations
MethodImpl#allLineLocations(String, String)::: method impl all line locations:::return->declaringType->stratum->allLineLocations
MethodImpl#locationsOfLine(int)::: method impl locations of line:::return->vm->getDefaultStratum->locationsOfLine
MethodImpl#locationsOfLine(String, String, int)::: method impl locations of line:::return->declaringType->stratum->locationsOfLine
MethodImpl#codeIndexToLineInfo(SDE.Stratum, long)::: method impl code index to line info:::if->stratum->isJava->return->new->BaseLineInfo->else->return->stratum->id->new->StratumLineInfo
MethodImpl#returnTypeName()::: method impl return type name:::return->signatureParser->typeName
MethodImpl#returnSignature()::: method impl return signature:::return->signatureParser->signature
MethodImpl#returnType()::: method impl return type:::return->returnSignature->findType
MethodImpl#findType(String)::: method impl find type:::enclosing->declaringType->return->enclosing->findType
MethodImpl#argumentTypeNames()::: method impl argument type names:::return->signatureParser->argumentTypeNames
MethodImpl#argumentSignatures()::: method impl argument signatures:::return->signatureParser->argumentSignatures
MethodImpl#argumentType(int)::: method impl argument type:::enclosing->declaringType->signature->argumentSignatures->get->return->enclosing->findType
MethodImpl#argumentTypes()::: method impl argument types:::size->argumentSignatures->size->types->new->ArrayList<>->for->i->return
MethodImpl#compareTo(Method)::: method impl compare to:::declaringType->declaringType->rc->declaringType->method->declaringType->compareTo->if->declaringType->indexOf->declaringType->indexOf->return
MethodImpl#isAbstract()::: method impl is abstract:::return->isModifierSet
MethodImpl#isDefault()::: method impl is default:::return->isModifierSet->isModifierSet->isModifierSet->declaringType
MethodImpl#isSynchronized()::: method impl is synchronized:::return->isModifierSet
MethodImpl#isNative()::: method impl is native:::return->isModifierSet
MethodImpl#isVarArgs()::: method impl is var args:::return->isModifierSet
MethodImpl#isBridge()::: method impl is bridge:::return->isModifierSet
MethodImpl#isConstructor()::: method impl is constructor:::return->name->equals
MethodImpl#isStaticInitializer()::: method impl is static initializer:::return->name->equals
MethodImpl#isObsolete()::: method impl is obsolete:::try->return->process->catch->throw->exc->toJDIException->finally
MethodImpl.ReturnContainer#type()::: return container type:::return->returnType
MethodImpl.ReturnContainer#typeName()::: return container type name:::return->returnTypeName
MethodImpl.ReturnContainer#signature()::: return container signature:::return->returnSignature
MethodImpl.ReturnContainer#findType(String)::: return container find type:::return->MethodImpl.this->findType
MethodImpl#getReturnValueContainer()::: method impl get return value container:::if->new->ReturnContainer->return
MethodImpl.ArgumentContainer#type()::: argument container type:::return->argumentType
MethodImpl.ArgumentContainer#typeName()::: argument container type name:::return->argumentTypeNames->get
MethodImpl.ArgumentContainer#signature()::: argument container signature:::return->argumentSignatures->get
MethodImpl.ArgumentContainer#findType(String)::: argument container find type:::return->MethodImpl.this->findType
MethodImpl#handleVarArgs(List)::: method impl handle var args:::paramTypes->this->argumentTypes->lastParamType->paramTypes->paramTypes->size->get->argCount->arguments->size->paramCount->paramTypes->size->if->return->if->argArray->lastParamType->newInstance->arguments->add->return->nthArgValue->arguments->get->if->return->nthArgType->nthArgValue->type->if->if->isAssignableTo->return->count->argArray->lastParamType->newInstance->argArray->setValues->arguments->set->for->ii->return
MethodImpl#validateAndPrepareArgumentsForInvoke(List)::: method impl validate and prepare arguments for invoke:::arguments->new->ArrayList<>->if->isVarArgs->handleVarArgs->argSize->arguments->size->parser->signature->new->JNITypeParser->signatures->parser->argumentSignatures->if->signatures->size->throw->signatures->size->arguments->size->new->IllegalArgumentException->for->i->return
MethodImpl#toString()::: method impl to string:::sb->new->StringBuilder->sb->declaringType->name->append->sb->append->sb->name->append->sb->append->first->foreach->argumentTypeNames->if->sb->append->sb->append->sb->append->return->sb->toString
MirrorImpl#virtualMachine()::: mirror impl virtual machine:::return
MirrorImpl#equals(Object)::: mirror impl equals:::if->other->return->vm->other->virtualMachine->equals->else->return
MirrorImpl#hashCode()::: mirror impl hash code:::return->vm->hashCode
MirrorImpl#validateMirror(Mirror):::Throw NullPointerException on null mirror:::if->vm->mirror->virtualMachine->equals->throw->mirror->toString->new->VMMismatchException
MirrorImpl#validateMirrorOrNull(Mirror):::Allow null mirror:::if->vm->mirror->virtualMachine->equals->throw->mirror->toString->new->VMMismatchException
MirrorImpl#validateMirrors(Collection):::Throw NullPointerException on null mirrors:::foreach->validateMirror
MirrorImpl#validateMirrorsOrNulls(Collection):::Allow null mirrors:::foreach->validateMirrorOrNull
ModuleReferenceImpl#description()::: module reference impl description:::return->ref
ModuleReferenceImpl#name()::: module reference impl name:::if->return->try->process->if->name->length->catch->throw->ex->toJDIException->finally->return
ModuleReferenceImpl#classLoader()::: module reference impl class loader:::if->return->try->process->catch->throw->ex->toJDIException->finally->return
MonitorInfoImpl#threadResumable(ThreadAction)::: monitor info impl thread resumable:::synchronized->vm->state->if->return->else->throw->new->InternalException
MonitorInfoImpl#validateMonitorInfo()::: monitor info impl validate monitor info:::if->throw->new->InvalidStackFrameException
MonitorInfoImpl#monitor()::: monitor info impl monitor:::validateMonitorInfo->return
MonitorInfoImpl#stackDepth()::: monitor info impl stack depth:::validateMonitorInfo->return
MonitorInfoImpl#thread()::: monitor info impl thread:::validateMonitorInfo->return
NonConcreteMethodImpl#location()::: non concrete method impl location:::if->isAbstract->return->if->new->LocationImpl->return
NonConcreteMethodImpl#allLineLocations(String, String)::: non concrete method impl all line locations:::return->new->ArrayList<>
NonConcreteMethodImpl#allLineLocations(SDE.Stratum, String)::: non concrete method impl all line locations:::return->new->ArrayList<>
NonConcreteMethodImpl#locationsOfLine(String, String, int)::: non concrete method impl locations of line:::return->new->ArrayList<>
NonConcreteMethodImpl#locationsOfLine(SDE.Stratum, String, int)::: non concrete method impl locations of line:::return->new->ArrayList<>
NonConcreteMethodImpl#locationOfCodeIndex(long)::: non concrete method impl location of code index:::return
NonConcreteMethodImpl#variables()::: non concrete method impl variables:::throw->new->AbsentInformationException
NonConcreteMethodImpl#variablesByName(String)::: non concrete method impl variables by name:::throw->new->AbsentInformationException
NonConcreteMethodImpl#arguments()::: non concrete method impl arguments:::throw->new->AbsentInformationException
NonConcreteMethodImpl#bytecodes()::: non concrete method impl bytecodes:::return->new->byteArr
NonConcreteMethodImpl#argSlotCount()::: non concrete method impl arg slot count:::throw->new->InternalException
ObjectReferenceImpl#disableCache()::: object reference impl disable cache:::synchronized->vm->state
ObjectReferenceImpl#enableCache()::: object reference impl enable cache:::synchronized->vm->state
ObjectReferenceImpl#newCache()::: object reference impl new cache:::return->new->Cache
ObjectReferenceImpl#getCache()::: object reference impl get cache:::synchronized->vm->state->if->if->vm->state->isSuspended->enableCache->else->disableCache->if->newCache->return
ObjectReferenceImpl#invokableReferenceType(Method)::: object reference impl invokable reference type:::return->referenceType
ObjectReferenceImpl#description()::: object reference impl description:::return->uniqueID
ObjectReferenceImpl#vmSuspended(VMAction)::: object reference impl vm suspended:::enableCache->return
ObjectReferenceImpl#vmNotSuspended(VMAction)::: object reference impl vm not suspended:::synchronized->vm->state->if->vm->description->printTrace->disableCache->if->return->else->return
ObjectReferenceImpl#equals(Object)::: object reference impl equals:::if->other->return->ref->other->ref->super->equals->else->return
ObjectReferenceImpl#hashCode()::: object reference impl hash code:::return->ref
ObjectReferenceImpl#type()::: object reference impl type:::return->referenceType
ObjectReferenceImpl#referenceType()::: object reference impl reference type:::if->try->rtinfo->process->vm->referenceType->catch->throw->exc->toJDIException->finally->return
ObjectReferenceImpl#getValue(Field)::: object reference impl get value:::list->new->ArrayList<>->list->add->map->getValues->return->map->get
ObjectReferenceImpl#getValues(List)::: object reference impl get values:::validateMirrors->staticFields->new->ArrayList<>->size->theFields->size->instanceFields->new->ArrayList<>->for->i->map->if->staticFields->size->referenceType->getValues->else->new->HashMap<Field,Value>->instanceFields->size->queryFields->new->JDWP.ObjectReference.GetValues.FieldArr->for->i->values->try->process->catch->throw->exc->toJDIException->finally->if->throw->new->InternalException->for->i->return
ObjectReferenceImpl#setValue(Field, Value)::: object reference impl set value:::validateMirror->validateMirrorOrNull->referenceType->validateFieldSet->if->field->isStatic->type->referenceType->if->setValue->return->else->throw->new->IllegalArgumentException->try->fvals->new->JDWP.ObjectReference.SetValues.FieldValueArr->ref->ValueImpl->prepareForAssignment->new->JDWP.ObjectReference.SetValues.FieldValue->try->process->catch->throw->exc->toJDIException->finally->catch->if->throw->finally
ObjectReferenceImpl#validateMethodInvocation(Method, int)::: object reference impl validate method invocation:::declType->method->declaringType->if->declType->isAssignableFrom->throw->new->IllegalArgumentException->if->validateClassMethodInvocation->else->if->validateIfaceMethodInvocation->else->throw->new->InvalidTypeException
ObjectReferenceImpl#validateClassMethodInvocation(Method, int)::: object reference impl validate class method invocation:::if->method->isConstructor->throw->new->IllegalArgumentException->if->isNonVirtual->if->method->isAbstract->throw->new->IllegalArgumentException
ObjectReferenceImpl#validateIfaceMethodInvocation(Method, int)::: object reference impl validate iface method invocation:::if->isNonVirtual->if->method->isAbstract->throw->new->IllegalArgumentException
ObjectReferenceImpl#sendInvokeCommand(ThreadReferenceImpl, ClassTypeImpl, MethodImpl, ValueImpl[], int)::: object reference impl send invoke command:::sender->new->CommandSender->stream->if->thread->sendResumingCommand->else->vm->sendResumingCommand->return
ObjectReferenceImpl#invokeMethod(ThreadReference, Method, List, int)::: object reference impl invoke method:::validateMirror->validateMirror->validateMirrorsOrNulls->method->thread->if->method->isStatic->if->referenceType->type->referenceType->return->type->invokeMethod->else->if->referenceType->type->referenceType->return->type->invokeMethod->else->throw->new->IllegalArgumentException->validateMethodInvocation->arguments->method->validateAndPrepareArgumentsForInvoke->args->arguments->new->ValueImplArr->toArray->ret->try->stream->invokableReferenceType->sendInvokeCommand->waitForReply->catch->if->exc->errorCode->throw->new->IncompatibleThreadStateException->else->throw->exc->toJDIException->finally->if->vm->notifySuspend->if->throw->new->InvocationException->else->return
ObjectReferenceImpl#disableCollection()::: object reference impl disable collection:::if->try->process->catch->throw->exc->toJDIException->finally
ObjectReferenceImpl#enableCollection()::: object reference impl enable collection:::if->try->process->catch->if->exc->errorCode->throw->exc->toJDIException->return->finally
ObjectReferenceImpl#isCollected()::: object reference impl is collected:::try->return->process->catch->throw->exc->toJDIException->finally
ObjectReferenceImpl#uniqueID()::: object reference impl unique d:::return->ref
ObjectReferenceImpl#jdwpMonitorInfo()::: object reference impl jdwp monitor info:::info->try->local->synchronized->vm->state->getCache->if->if->vm->state->hasListener->vm->state->addListener->if->process->if->if->vm->uniqueID->printTrace->catch->if->exc->errorCode->throw->new->IncompatibleThreadStateException->else->throw->exc->toJDIException->finally->return
ObjectReferenceImpl#waitingThreads()::: object reference impl waiting threads:::return->Arrays->jdwpMonitorInfo->asList
ObjectReferenceImpl#owningThread()::: object reference impl owning thread:::return->jdwpMonitorInfo
ObjectReferenceImpl#entryCount()::: object reference impl entry count:::return->jdwpMonitorInfo
ObjectReferenceImpl#referringObjects(long)::: object reference impl referring objects:::if->vm->canGetInstanceInfo->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException->intMax->try->return->Arrays->process->asList->catch->throw->exc->toJDIException->finally
ObjectReferenceImpl#ref()::: object reference impl ref:::return
ObjectReferenceImpl#isClassObject()::: object reference impl is class object:::return->referenceType->name->equals
ObjectReferenceImpl#prepareForAssignmentTo(ValueContainer)::: object reference impl prepare for assignment to:::validateAssignment->return
ObjectReferenceImpl#validateAssignment(ValueContainer)::: object reference impl validate assignment:::if->destination->signature->length->throw->new->InvalidTypeException->if->destination->signature->charAt->type->signature->charAt->throw->new->InvalidTypeException->if->destination->typeName->equals->throw->new->InvalidTypeException->destType->destination->type->myType->referenceType->if->myType->isAssignableTo->parser->destType->signature->new->JNITypeParser->destTypeName->parser->typeName->throw->type->name->new->InvalidTypeException
ObjectReferenceImpl#toString()::: object reference impl to string:::return->referenceType->name->uniqueID
ObjectReferenceImpl#typeValueKey()::: object reference impl type value key:::return
ObjectReferenceImpl#isNonVirtual(int)::: object reference impl is non virtual:::return
ObsoleteMethodImpl#isObsolete()::: obsolete method impl is obsolete:::return
ObsoleteMethodImpl#returnTypeName()::: obsolete method impl return type name:::return
ObsoleteMethodImpl#returnType()::: obsolete method impl return type:::throw->new->ClassNotLoadedException
ObsoleteMethodImpl#argumentTypeNames()::: obsolete method impl argument type names:::return->new->ArrayList<>
ObsoleteMethodImpl#argumentSignatures()::: obsolete method impl argument signatures:::return->new->ArrayList<>
ObsoleteMethodImpl#argumentType(int)::: obsolete method impl argument type:::throw->new->ClassNotLoadedException
ObsoleteMethodImpl#argumentTypes()::: obsolete method impl argument types:::return->new->ArrayList<>
Packet#toByteArray():::Return byte representation of the packet:::len->b->new->byteArr->if->else->if->System->arraycopy->return
Packet#fromByteArray(byte[]):::Create a packet from its byte array representation:::if->throw->new->IOException->b0->b1->b2->b3->len->if->throw->new->IOException->b4->b5->b6->b7->p->new->Packet->if->else->b9->b10->new->byteArr->System->arraycopy->return
Packet#uniqID()::: packet uniq d:::return
PacketStream#id()::: packet stream id:::return
PacketStream#send()::: packet stream send:::if->dataStream->toByteArray->vm->sendToTarget
PacketStream#waitForReply()::: packet stream wait for reply:::if->throw->new->InternalException->vm->waitForTargetReply->if->throw->new->JDWPException
PacketStream#writeBoolean(boolean)::: packet stream write boolean:::if->dataStream->write->else->dataStream->write
PacketStream#writeByte(byte)::: packet stream write byte:::dataStream->write
PacketStream#writeChar(char)::: packet stream write char:::dataStream->write->dataStream->write
PacketStream#writeShort(short)::: packet stream write short:::dataStream->write->dataStream->write
PacketStream#writeInt(int)::: packet stream write int:::dataStream->write->dataStream->write->dataStream->write->dataStream->write
PacketStream#writeLong(long)::: packet stream write long:::dataStream->write->dataStream->write->dataStream->write->dataStream->write->dataStream->write->dataStream->write->dataStream->write->dataStream->write
PacketStream#writeFloat(float)::: packet stream write float:::Float->floatToIntBits->writeInt
PacketStream#writeDouble(double)::: packet stream write double:::Double->doubleToLongBits->writeLong
PacketStream#writeID(int, long)::: packet stream write d:::switch->writeLong->break->writeInt->break->writeShort->break->throw->new->UnsupportedOperationException
PacketStream#writeNullObjectRef()::: packet stream write null object ref:::writeObjectRef
PacketStream#writeObjectRef(long)::: packet stream write object ref:::writeID
PacketStream#writeClassRef(long)::: packet stream write class ref:::writeID
PacketStream#writeMethodRef(long)::: packet stream write method ref:::writeID
PacketStream#writeModuleRef(long)::: packet stream write module ref:::writeID
PacketStream#writeFieldRef(long)::: packet stream write field ref:::writeID
PacketStream#writeFrameRef(long)::: packet stream write frame ref:::writeID
PacketStream#writeByteArray(byte[])::: packet stream write byte array:::dataStream->write
PacketStream#writeString(String)::: packet stream write string:::try->stringBytes->string->getBytes->writeInt->writeByteArray->catch->throw->new->InternalException->finally
PacketStream#writeLocation(Location)::: packet stream write location:::refType->location->declaringType->tag->if->else->if->else->throw->new->InternalException->writeByte->refType->ref->writeClassRef->location->method->ref->writeMethodRef->location->codeIndex->writeLong
PacketStream#writeValue(Value)::: packet stream write value:::try->writeValueChecked->catch->throw->new->RuntimeException->finally
PacketStream#writeValueChecked(Value)::: packet stream write value checked:::ValueImpl->typeValueKey->writeByte->writeUntaggedValue
PacketStream#writeUntaggedValue(Value)::: packet stream write untagged value:::try->writeUntaggedValueChecked->catch->throw->new->RuntimeException->finally
PacketStream#writeUntaggedValueChecked(Value)::: packet stream write untagged value checked:::tag->ValueImpl->typeValueKey->if->isObjectTag->if->writeObjectRef->else->if->throw->new->InvalidTypeException->ref->writeObjectRef->else->switch->if->throw->new->InvalidTypeException->byteValue->writeByte->break->if->throw->new->InvalidTypeException->charValue->writeChar->break->if->throw->new->InvalidTypeException->floatValue->writeFloat->break->if->throw->new->InvalidTypeException->doubleValue->writeDouble->break->if->throw->new->InvalidTypeException->intValue->writeInt->break->if->throw->new->InvalidTypeException->longValue->writeLong->break->if->throw->new->InvalidTypeException->shortValue->writeShort->break->if->throw->new->InvalidTypeException->booleanValue->writeBoolean->break
PacketStream#readByte():::Read byte represented as one bytes.:::ret->return
PacketStream#readBoolean():::Read boolean represented as one byte.:::ret->readByte->return
PacketStream#readChar():::Read char represented as two bytes.:::b1->b2->return
PacketStream#readShort():::Read short represented as two bytes.:::b1->b2->return
PacketStream#readInt():::Read int represented as four bytes.:::b1->b2->b3->b4->return
PacketStream#readLong():::Read long represented as eight bytes.:::b1->b2->b3->b4->b5->b6->b7->b8->return
PacketStream#readFloat():::Read float represented as four bytes.:::return->Float->readInt->intBitsToFloat
PacketStream#readDouble():::Read double represented as eight bytes.:::return->Double->readLong->longBitsToDouble
PacketStream#readString():::Read string represented as four byte length followed by characters of the string.:::ret->len->readInt->try->new->String->catch->println->finally->return
PacketStream#readID(int)::: packet stream read d:::switch->return->readLong->return->readInt->return->readShort->throw->new->UnsupportedOperationException
PacketStream#readObjectRef():::Read object represented as vm specific byte sequence.:::return->readID
PacketStream#readClassRef()::: packet stream read class ref:::return->readID
PacketStream#readTaggedObjectReference()::: packet stream read tagged object reference:::typeKey->readByte->return->vm->readObjectRef->objectMirror
PacketStream#readObjectReference()::: packet stream read object reference:::return->vm->readObjectRef->objectMirror
PacketStream#readStringReference()::: packet stream read string reference:::ref->readObjectRef->return->vm->stringMirror
PacketStream#readArrayReference()::: packet stream read array reference:::ref->readObjectRef->return->vm->arrayMirror
PacketStream#readThreadReference()::: packet stream read thread reference:::ref->readObjectRef->return->vm->threadMirror
PacketStream#readThreadGroupReference()::: packet stream read thread group reference:::ref->readObjectRef->return->vm->threadGroupMirror
PacketStream#readClassLoaderReference()::: packet stream read class loader reference:::ref->readObjectRef->return->vm->classLoaderMirror
PacketStream#readClassObjectReference()::: packet stream read class object reference:::ref->readObjectRef->return->vm->classObjectMirror
PacketStream#readReferenceType()::: packet stream read reference type:::tag->readByte->ref->readObjectRef->return->vm->referenceType
PacketStream#readModule()::: packet stream read module:::ref->readModuleRef->return->vm->moduleMirror
PacketStream#readMethodRef():::Read method reference represented as vm specific byte sequence.:::return->readID
PacketStream#readModuleRef():::Read module reference represented as vm specific byte sequence.:::return->readID
PacketStream#readFieldRef():::Read field reference represented as vm specific byte sequence.:::return->readID
PacketStream#readField():::Read field represented as vm specific byte sequence.:::refType->readReferenceType->fieldRef->readFieldRef->return->refType->getFieldMirror
PacketStream#readFrameRef():::Read frame represented as vm specific byte sequence.:::return->readID
PacketStream#readValue():::Read a value, first byte describes type of value to read.:::typeKey->readByte->return->readUntaggedValue
PacketStream#readUntaggedValue(byte)::: packet stream read untagged value:::val->if->isObjectTag->vm->readObjectRef->objectMirror->else->switch->readByte->new->ByteValueImpl->break->readChar->new->CharValueImpl->break->readFloat->new->FloatValueImpl->break->readDouble->new->DoubleValueImpl->break->readInt->new->IntegerValueImpl->break->readLong->new->LongValueImpl->break->readShort->new->ShortValueImpl->break->readBoolean->new->BooleanValueImpl->break->new->VoidValueImpl->break->return
PacketStream#readLocation():::Read location represented as vm specific byte sequence.:::tag->readByte->classRef->readObjectRef->methodRef->readMethodRef->codeIndex->readLong->if->refType->vm->referenceType->return->new->LocationImpl->else->return
PacketStream#readByteArray(int)::: packet stream read byte array:::array->new->byteArr->System->arraycopy->return
PacketStream#readArrayRegion()::: packet stream read array region:::typeKey->readByte->length->readInt->list->new->ArrayList<>->gettingObjects->isObjectTag->for->i->return
PacketStream#writeArrayRegion(List)::: packet stream write array region:::srcValues->size->writeInt->for->i->srcValues->size
PacketStream#skipBytes(int)::: packet stream skip bytes:::return
PacketStream#command()::: packet stream command:::return
PacketStream#isObjectTag(byte)::: packet stream is object tag:::return
PrimitiveTypeImpl#convert(PrimitiveValue)::: primitive type impl convert:::
PrimitiveTypeImpl#toString()::: primitive type impl to string:::return->name
PrimitiveValueImpl#booleanValue()::: primitive value impl boolean value:::
PrimitiveValueImpl#byteValue()::: primitive value impl byte value:::
PrimitiveValueImpl#charValue()::: primitive value impl char value:::
PrimitiveValueImpl#shortValue()::: primitive value impl short value:::
PrimitiveValueImpl#intValue()::: primitive value impl int value:::
PrimitiveValueImpl#longValue()::: primitive value impl long value:::
PrimitiveValueImpl#floatValue()::: primitive value impl float value:::
PrimitiveValueImpl#doubleValue()::: primitive value impl double value:::
PrimitiveValueImpl#checkedByteValue()::: primitive value impl checked byte value:::return->byteValue
PrimitiveValueImpl#checkedCharValue()::: primitive value impl checked char value:::return->charValue
PrimitiveValueImpl#checkedShortValue()::: primitive value impl checked short value:::return->shortValue
PrimitiveValueImpl#checkedIntValue()::: primitive value impl checked int value:::return->intValue
PrimitiveValueImpl#checkedLongValue()::: primitive value impl checked long value:::return->longValue
PrimitiveValueImpl#checkedFloatValue()::: primitive value impl checked float value:::return->floatValue
PrimitiveValueImpl#checkedBooleanValue()::: primitive value impl checked boolean value:::if->return->booleanValue->else->throw->new->InvalidTypeException
PrimitiveValueImpl#checkedDoubleValue()::: primitive value impl checked double value:::return->doubleValue
PrimitiveValueImpl#prepareForAssignmentTo(ValueContainer)::: primitive value impl prepare for assignment to:::return->convertForAssignmentTo
PrimitiveValueImpl#convertForAssignmentTo(ValueContainer)::: primitive value impl convert for assignment to:::if->destination->signature->length->throw->new->InvalidTypeException->if->destination->signature->charAt->type->signature->charAt->throw->new->InvalidTypeException->if->destination->signature->charAt->type->signature->charAt->throw->new->InvalidTypeException->if->destination->typeName->equals->throw->new->InvalidTypeException->try->primitiveType->destination->type->return->primitiveType->convert->catch->throw->destination->typeName->new->InternalException->finally
ProcessAttachingConnector#attach(Map):::Attach to a target VM using the specified address and Connector arguments.:::pid->argument->value->t->argument->value->timeout->if->t->length->Integer->decode->intValue->address->vm->try->attach->props->vm->getAgentProperties->props->getProperty->catch->throw->x->getMessage->new->IOException->finally->if->vm->detach->if->throw->new->IOException->pos->address->indexOf->if->throw->new->IOException->lib->address->substring->address->address->length->substring->ts->if->lib->equals->new->SocketTransportService->else->if->lib->equals->try->c->Class->forName->tmp->c->newInstance->catch->finally->if->throw->new->IOException->connection->ts->attach->return->Bootstrap->virtualMachineManager->createVirtualMachine
ProcessAttachingConnector#name()::: process attaching connector name:::return
ProcessAttachingConnector#description()::: process attaching connector description:::return->getString
ProcessAttachingConnector#transport()::: process attaching connector transport:::if->return->new->Transport->return
RawCommandLineLauncher#transportService()::: raw command line launcher transport service:::return
RawCommandLineLauncher#transport()::: raw command line launcher transport:::return
RawCommandLineLauncher#launch(Map)::: raw command line launcher launch:::command->argument->value->address->argument->value->quote->argument->value->if->quote->length->throw->new->IllegalConnectorArgumentsException->listener->transportService->startListening->try->return->quote->charAt->tokenizeCommand->launch->catch->finally->transportService->stopListening
RawCommandLineLauncher#name()::: raw command line launcher name:::return
RawCommandLineLauncher#description()::: raw command line launcher description:::return->getString
ReferenceTypeImpl#noticeRedefineClass()::: reference type impl notice redefine class:::
ReferenceTypeImpl#getMethodMirror(long)::: reference type impl get method mirror:::if->return->new->ObsoleteMethodImpl->it->methods->iterator->while->it->hasNext->method->it->next->if->method->ref->return->throw->new->IllegalArgumentException
ReferenceTypeImpl#getFieldMirror(long)::: reference type impl get field mirror:::it->fields->iterator->while->it->hasNext->field->it->next->if->field->ref->return->throw->new->IllegalArgumentException
ReferenceTypeImpl#equals(Object)::: reference type impl equals:::if->other->return->ref->other->ref->vm->other->virtualMachine->equals->else->return
ReferenceTypeImpl#hashCode()::: reference type impl hash code:::return->ref
ReferenceTypeImpl#compareTo(ReferenceType)::: reference type impl compare to:::other->comp->name->other->name->compareTo->if->rf1->ref->rf2->other->ref->if->other->virtualMachine->else->return
ReferenceTypeImpl#signature()::: reference type impl signature:::if->if->vm->canGet1_5LanguageFeatures->genericSignature->else->try->process->catch->throw->exc->toJDIException->finally->return
ReferenceTypeImpl#genericSignature()::: reference type impl generic signature:::if->vm->canGet1_5LanguageFeatures->result->try->process->catch->throw->exc->toJDIException->finally->setGenericSignature->return
ReferenceTypeImpl#classLoader()::: reference type impl class loader:::if->try->process->catch->throw->exc->toJDIException->finally->return
ReferenceTypeImpl#module()::: reference type impl module:::if->return->try->m->process->vm->m->ref->getModule->catch->throw->exc->toJDIException->finally->return
ReferenceTypeImpl#isPublic()::: reference type impl is public:::if->getModifiers->return
ReferenceTypeImpl#isProtected()::: reference type impl is protected:::if->getModifiers->return
ReferenceTypeImpl#isPrivate()::: reference type impl is private:::if->getModifiers->return
ReferenceTypeImpl#isPackagePrivate()::: reference type impl is package private:::return->isPublic->isPrivate->isProtected
ReferenceTypeImpl#isAbstract()::: reference type impl is abstract:::if->getModifiers->return
ReferenceTypeImpl#isFinal()::: reference type impl is final:::if->getModifiers->return
ReferenceTypeImpl#isStatic()::: reference type impl is static:::if->getModifiers->return
ReferenceTypeImpl#isPrepared()::: reference type impl is prepared:::if->updateStatus->return
ReferenceTypeImpl#isVerified()::: reference type impl is verified:::if->updateStatus->return
ReferenceTypeImpl#isInitialized()::: reference type impl is initialized:::if->updateStatus->return
ReferenceTypeImpl#failedToInitialize()::: reference type impl failed to initialize:::if->updateStatus->return
ReferenceTypeImpl#fields()::: reference type impl fields:::fields->fieldsRef->get->if->if->vm->canGet1_5LanguageFeatures->jdwpFields->try->process->catch->throw->exc->toJDIException->finally->new->ArrayList<>->for->i->else->jdwpFields->try->process->catch->throw->exc->toJDIException->finally->new->ArrayList<>->for->i->Collections->unmodifiableList->new->SoftReference<List<Field>>->return
ReferenceTypeImpl#inheritedTypes()::: reference type impl inherited types:::
ReferenceTypeImpl#addVisibleFields(List, Map, List)::: reference type impl add visible fields:::foreach->visibleFields->name->field->name->if->ambiguousNames->contains->duplicate->visibleTable->get->if->visibleList->add->visibleTable->put->else->if->field->equals->ambiguousNames->add->visibleTable->remove->visibleList->remove->else
ReferenceTypeImpl#visibleFields()::: reference type impl visible fields:::visibleList->new->ArrayList<>->visibleTable->new->HashMap<String,Field>->ambiguousNames->new->ArrayList<String>->types->inheritedTypes->iter->types->iterator->while->iter->hasNext->type->iter->next->type->addVisibleFields->retList->fields->new->ArrayList<>->foreach->hidden->visibleTable->field->name->get->if->visibleList->remove->retList->addAll->return
ReferenceTypeImpl#addAllFields(List, Set)::: reference type impl add all fields:::if->typeSet->contains->typeSet->add->fieldList->fields->addAll->types->inheritedTypes->iter->types->iterator->while->iter->hasNext->type->iter->next->type->addAllFields
ReferenceTypeImpl#allFields()::: reference type impl all fields:::fieldList->new->ArrayList<>->typeSet->new->HashSet<ReferenceType>->addAllFields->return
ReferenceTypeImpl#fieldByName(String)::: reference type impl field by name:::searchList->visibleFields->for->i->searchList->size->return
ReferenceTypeImpl#methods()::: reference type impl methods:::methods->methodsRef->get->if->if->vm->canGet1_5LanguageFeatures->methods1_4->else->declared->try->process->catch->throw->exc->toJDIException->finally->new->ArrayList<>->for->i->Collections->unmodifiableList->new->SoftReference<List<Method>>->return
ReferenceTypeImpl#methods1_4()::: reference type impl methods1_4:::methods->declared->try->process->catch->throw->exc->toJDIException->finally->new->ArrayList<Method>->for->i->return
ReferenceTypeImpl#addToMethodMap(Map, List)::: reference type impl add to method map:::foreach->methodMap->method->name->method->signature->concat->put
ReferenceTypeImpl#addVisibleMethods(Map, Set)::: reference type impl add visible methods:::
ReferenceTypeImpl#visibleMethods()::: reference type impl visible methods:::map->new->HashMap<String,Method>->new->HashSet<InterfaceType>->addVisibleMethods->list->allMethods->list->map->values->new->HashSet<Method>->retainAll->return
ReferenceTypeImpl#allMethods()::: reference type impl all methods:::
ReferenceTypeImpl#methodsByName(String)::: reference type impl methods by name:::methods->visibleMethods->retList->methods->size->new->ArrayList<Method>->foreach->if->candidate->name->equals->retList->add->retList->trimToSize->return
ReferenceTypeImpl#methodsByName(String, String)::: reference type impl methods by name:::methods->visibleMethods->retList->methods->size->new->ArrayList<Method>->foreach->if->candidate->name->equals->candidate->signature->equals->retList->add->retList->trimToSize->return
ReferenceTypeImpl#getInterfaces()::: reference type impl get interfaces:::intfs->try->process->catch->throw->exc->toJDIException->finally->return->Arrays->asList
ReferenceTypeImpl#nestedTypes()::: reference type impl nested types:::all->vm->allClasses->nested->new->ArrayList<ReferenceType>->outername->name->outerlen->outername->length->iter->all->iterator->while->iter->hasNext->refType->iter->next->name->refType->name->len->name->length->if->name->startsWith->c->name->charAt->if->nested->add->return
ReferenceTypeImpl#getValue(Field)::: reference type impl get value:::list->new->ArrayList<Field>->list->add->map->getValues->return->map->get
ReferenceTypeImpl#validateFieldAccess(Field)::: reference type impl validate field access:::declType->field->declaringType->if->declType->isAssignableFrom->throw->new->IllegalArgumentException
ReferenceTypeImpl#validateFieldSet(Field)::: reference type impl validate field set:::validateFieldAccess->if->field->isFinal->throw->new->IllegalArgumentException
ReferenceTypeImpl#getValues(List):::Returns a map of field values:::validateMirrors->size->theFields->size->queryFields->new->JDWP.ReferenceType.GetValues.FieldArr->for->i->map->new->HashMap<Field,Value>->values->try->process->catch->throw->exc->toJDIException->finally->if->throw->new->InternalException->for->i->return
ReferenceTypeImpl#classObject()::: reference type impl class object:::if->synchronized->if->try->process->catch->throw->exc->toJDIException->finally->return
ReferenceTypeImpl#stratum(String)::: reference type impl stratum:::sde->sourceDebugExtensionInfo->if->sde->isValid->return->sde->stratum
ReferenceTypeImpl#sourceName()::: reference type impl source name:::return->vm->getDefaultStratum->sourceNames->get
ReferenceTypeImpl#sourceNames(String)::: reference type impl source names:::stratum->stratum->if->stratum->isJava->result->new->ArrayList<String>->result->baseSourceName->add->return->return->stratum->sourceNames
ReferenceTypeImpl#sourcePaths(String)::: reference type impl source paths:::stratum->stratum->if->stratum->isJava->result->new->ArrayList<String>->result->baseSourceDir->baseSourceName->add->return->return->stratum->sourcePaths
ReferenceTypeImpl#baseSourceName()::: reference type impl base source name:::bsn->if->try->process->catch->if->exc->errorCode->else->throw->exc->toJDIException->finally->if->throw->new->AbsentInformationException->return
ReferenceTypeImpl#baseSourcePath()::: reference type impl base source path:::bsp->if->baseSourceDir->baseSourceName->return
ReferenceTypeImpl#baseSourceDir()::: reference type impl base source dir:::if->typeName->name->sb->typeName->length->new->StringBuilder->index->nextIndex->while->typeName->indexOf->sb->typeName->substring->append->sb->append->sb->toString->return
ReferenceTypeImpl#sourceDebugExtension()::: reference type impl source debug extension:::if->vm->canGetSourceDebugExtension->throw->new->UnsupportedOperationException->sde->sourceDebugExtensionInfo->if->throw->new->AbsentInformationException->return
ReferenceTypeImpl#sourceDebugExtensionInfo()::: reference type impl source debug extension info:::if->vm->canGetSourceDebugExtension->return->sde->sdeRef->get->if->extension->try->process->catch->if->exc->errorCode->new->SoftReference<SDE>->throw->exc->toJDIException->finally->if->else->new->SDE->new->SoftReference<SDE>->return
ReferenceTypeImpl#availableStrata()::: reference type impl available strata:::sde->sourceDebugExtensionInfo->if->sde->isValid->return->sde->availableStrata->else->strata->new->ArrayList<String>->strata->add->return
ReferenceTypeImpl#defaultStratum():::Always returns non-null stratumID:::sdei->sourceDebugExtensionInfo->if->sdei->isValid->return->else->return
ReferenceTypeImpl#modifiers()::: reference type impl modifiers:::if->getModifiers->return
ReferenceTypeImpl#allLineLocations()::: reference type impl all line locations:::return->vm->getDefaultStratum->allLineLocations
ReferenceTypeImpl#allLineLocations(String, String)::: reference type impl all line locations:::someAbsent->stratum->stratum->list->new->ArrayList<Location>->for->iter->methods->iterator->iter->hasNext->if->list->size->throw->new->AbsentInformationException->return
ReferenceTypeImpl#locationsOfLine(int)::: reference type impl locations of line:::return->vm->getDefaultStratum->locationsOfLine
ReferenceTypeImpl#locationsOfLine(String, String, int)::: reference type impl locations of line:::someAbsent->somePresent->methods->methods->stratum->stratum->list->new->ArrayList<Location>->iter->methods->iterator->while->iter->hasNext->method->iter->next->if->method->isAbstract->method->isNative->try->list->method->locationsOfLine->addAll->catch->finally->if->throw->new->AbsentInformationException->return
ReferenceTypeImpl#instances(long)::: reference type impl instances:::if->vm->canGetInstanceInfo->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException->intMax->try->return->Arrays->process->asList->catch->throw->exc->toJDIException->finally
ReferenceTypeImpl#getClassFileVersion()::: reference type impl get class file version:::if->vm->canGetClassFileVersion->throw->new->UnsupportedOperationException->classFileVersion->if->return->else->try->process->catch->if->exc->errorCode->return->else->throw->exc->toJDIException->finally
ReferenceTypeImpl#majorVersion()::: reference type impl major version:::try->getClassFileVersion->catch->throw->finally->return
ReferenceTypeImpl#minorVersion()::: reference type impl minor version:::try->getClassFileVersion->catch->throw->finally->return
ReferenceTypeImpl#getConstantPoolInfo()::: reference type impl get constant pool info:::jdwpCPool->if->vm->canGetConstantPool->throw->new->UnsupportedOperationException->if->if->return->cpbytes->constantPoolBytesRef->get->if->return->try->process->catch->if->exc->errorCode->return->else->throw->exc->toJDIException->finally->cpbytes->new->SoftReference<byte[]>->return
ReferenceTypeImpl#constantPoolCount()::: reference type impl constant pool count:::try->getConstantPoolInfo->catch->throw->finally->return
ReferenceTypeImpl#constantPool()::: reference type impl constant pool:::cpbytes->try->getConstantPoolInfo->catch->throw->finally->if->return->cpbytes->clone->else->return
ReferenceTypeImpl#getModifiers()::: reference type impl get modifiers:::if->return->try->process->catch->throw->exc->toJDIException->finally
ReferenceTypeImpl#decodeStatus(int)::: reference type impl decode status:::if
ReferenceTypeImpl#updateStatus()::: reference type impl update status:::try->process->decodeStatus->catch->throw->exc->toJDIException->finally
ReferenceTypeImpl#markPrepared()::: reference type impl mark prepared:::
ReferenceTypeImpl#ref()::: reference type impl ref:::return
ReferenceTypeImpl#indexOf(Method)::: reference type impl index of:::return->methods->indexOf
ReferenceTypeImpl#indexOf(Field)::: reference type impl index of:::return->fields->indexOf
ReferenceTypeImpl#isAssignableTo(ReferenceType)::: reference type impl is assignable to:::
ReferenceTypeImpl#isAssignableFrom(ReferenceType)::: reference type impl is assignable from:::return->isAssignableTo
ReferenceTypeImpl#isAssignableFrom(ObjectReference)::: reference type impl is assignable from:::return->object->referenceType->isAssignableFrom
ReferenceTypeImpl#setStatus(int)::: reference type impl set status:::decodeStatus
ReferenceTypeImpl#setSignature(String)::: reference type impl set signature:::
ReferenceTypeImpl#setGenericSignature(String)::: reference type impl set generic signature:::if->signature->length->else
ReferenceTypeImpl#isOneDimensionalPrimitiveArray(String)::: reference type impl is one dimensional primitive array:::i->signature->lastIndexOf->isPA->if->signature->startsWith->else->c->signature->charAt->return
ReferenceTypeImpl#findType(String)::: reference type impl find type:::type->if->signature->length->sig->signature->charAt->if->vm->theVoidType->else->vm->primitiveTypeMirror->else->loader->classLoader->if->isOneDimensionalPrimitiveArray->vm->findBootType->else->loader->findType->return
ReferenceTypeImpl#loaderString()::: reference type impl loader string:::if->classLoader->return->classLoader->toString->else->return
SDE.FileTableRecord#getSourcePath(ReferenceTypeImpl):::Return the sourcePath, computing it if not set:::if->if->refType->baseSourceDir->else->sb->new->StringBuilder->for->i->sourcePath->length->sb->toString->return
SDE.Stratum#id()::: stratum id:::return
SDE.Stratum#isJava()::: stratum is java:::return
SDE.Stratum#sourceNames(ReferenceTypeImpl):::Return all the sourceNames for this stratum:::i->fileIndexStart->fileIndexEnd->result->new->ArrayList<>->for->return
SDE.Stratum#sourcePaths(ReferenceTypeImpl):::Return all the sourcePaths for this stratum:::i->fileIndexStart->fileIndexEnd->result->new->ArrayList<>->for->return
SDE.Stratum#lineStratum(ReferenceTypeImpl, int)::: stratum line stratum:::lti->stiLineTableIndex->if->return->else->return->new->LineStratum
SDE.LineStratum#equals(Object)::: line stratum equals:::if->other->return->lineNumber->other->lineNumber->refType->equals->else->return
SDE.LineStratum#hashCode()::: line stratum hash code:::return->lineNumber->refType->hashCode
SDE.LineStratum#lineNumber()::: line stratum line number:::return->stiLineNumber
SDE.LineStratum#getSourceInfo():::Fetch the source name and source path for this line, converting or constructing the source path if needed.:::if->return->fti->stiFileTableIndex->if->throw->new->InternalError->ftr->ftr->getSourcePath
SDE.LineStratum#sourceName()::: line stratum source name:::getSourceInfo->return
SDE.LineStratum#sourcePath()::: line stratum source path:::getSourceInfo->return
SDE#sdePeek()::: e sde peek:::if->sourceDebugExtension->length->syntax->return->sourceDebugExtension->charAt
SDE#sdeRead()::: e sde read:::if->sourceDebugExtension->length->syntax->return->sourceDebugExtension->charAt
SDE#sdeAdvance()::: e sde advance:::
SDE#syntax()::: e syntax:::throw->new->InternalError
SDE#syntax(String)::: e syntax:::throw->new->InternalError
SDE#assureLineTableSize()::: e assure line table size:::len->if->i->newLen->newTable->new->LineTableRecordArr->for->for
SDE#assureFileTableSize()::: e assure file table size:::len->if->i->newLen->newTable->new->FileTableRecordArr->for->for
SDE#assureStratumTableSize()::: e assure stratum table size:::len->if->i->newLen->newTable->new->StratumTableRecordArr->for->for
SDE#readLine()::: e read line:::sb->new->StringBuilder->ch->ignoreWhite->while->sdeRead->sb->append->if->sdePeek->sdeRead->ignoreWhite->return->sb->toString
SDE#defaultStratumTableIndex()::: e default stratum table index:::if->stratumTableIndex->return
SDE#stratumTableIndex(String)::: e stratum table index:::i->if->return->defaultStratumTableIndex->for->return->defaultStratumTableIndex
SDE#stratum(String)::: e stratum:::sti->stratumTableIndex->return->new->Stratum
SDE#availableStrata()::: e available strata:::strata->new->ArrayList<>->for->i->return
SDE#ignoreWhite()::: e ignore white:::ch->while->sdePeek->sdeAdvance
SDE#ignoreLine()::: e ignore line:::ch->while->sdeRead->if->sdePeek->sdeAdvance->ignoreWhite
SDE#readNumber()::: e read number:::value->ch->ignoreWhite->while->sdePeek->sdeAdvance->ignoreWhite->return
SDE#storeFile(int, String, String)::: e store file:::assureFileTableSize
SDE#fileLine()::: e file line:::hasAbsolute->fileId->sourceName->sourcePath->if->sdePeek->sdeAdvance->readNumber->readLine->if->readLine->storeFile
SDE#storeLine(int, int, int, int, int, int)::: e store line:::assureLineTableSize
SDE#lineLine():::Parse line translation info:::lineCount->lineIncrement->njplsStart->jplsStart->readNumber->if->sdePeek->sdeAdvance->readNumber->if->sdePeek->sdeAdvance->readNumber->if->sdeRead->syntax->readNumber->if->sdePeek->sdeAdvance->readNumber->ignoreLine->storeLine
SDE#storeStratum(String):::Until the next stratum section, everything after this is in stratumId - so, store the current indicies.:::if->if->assureStratumTableSize
SDE#stratumSection():::The beginning of a stratum's info:::readLine->storeStratum
SDE#fileSection()::: e file section:::ignoreLine->while->sdePeek->fileLine
SDE#lineSection()::: e line section:::ignoreLine->while->sdePeek->lineLine
SDE#ignoreSection():::Ignore a section we don't know about.:::ignoreLine->while->sdePeek->ignoreLine
SDE#createJavaStratum():::A base "Java" stratum is always available, though it is not in the SourceDebugExtension:::storeStratum->storeFile->storeLine->storeStratum
SDE#decode():::Decode a SourceDebugExtension which is in SourceMap format:::if->sourceDebugExtension->length->sdeRead->sdeRead->sdeRead->sdeRead->return->ignoreLine->readLine->readLine->createJavaStratum->while->if->sdeRead->syntax->switch->sdeRead->stratumSection->break->fileSection->break->lineSection->break->storeStratum->return->ignoreSection
SDE#createProxyForAbsentSDE()::: e create proxy for absent e:::createJavaStratum->storeStratum
SDE#stiLineTableIndex(int, int)::: e sti line table index:::i->lineIndexStart->lineIndexEnd->for->return
SDE#stiLineNumber(int, int, int)::: e sti line number:::return
SDE#fileTableIndex(int, int)::: e file table index:::i->fileIndexStart->fileIndexEnd->for->return
SDE#stiFileTableIndex(int, int)::: e sti file table index:::return->fileTableIndex
SDE#isValid()::: e is valid:::return
SharedMemoryAttachingConnector#attach(Map)::: shared memory attaching connector attach:::name->argument->value->return->super->attach
SharedMemoryAttachingConnector#name()::: shared memory attaching connector name:::return
SharedMemoryAttachingConnector#description()::: shared memory attaching connector description:::return->getString
SharedMemoryConnection#receiveByte0(long)::: shared memory connection receive byte0:::
SharedMemoryConnection#sendByte0(long, byte)::: shared memory connection send byte0:::
SharedMemoryConnection#close0(long)::: shared memory connection close0:::
SharedMemoryConnection#receivePacket0(long)::: shared memory connection receive packet0:::
SharedMemoryConnection#sendPacket0(long, byte[])::: shared memory connection send packet0:::
SharedMemoryConnection#handshake(long)::: shared memory connection handshake:::hello->getBytes->for->i->for->i
SharedMemoryConnection#close()::: shared memory connection close:::synchronized->if->close0
SharedMemoryConnection#isOpen()::: shared memory connection is open:::synchronized->return
SharedMemoryConnection#readPacket()::: shared memory connection read packet:::if->isOpen->throw->new->ClosedConnectionException->b->try->synchronized->receivePacket0->catch->if->isOpen->throw->new->ClosedConnectionException->else->throw->finally->return
SharedMemoryConnection#writePacket(byte[])::: shared memory connection write packet:::if->isOpen->throw->new->ClosedConnectionException->if->throw->new->IllegalArgumentException->b0->b1->b2->b3->len->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->try->synchronized->sendPacket0->catch->if->isOpen->throw->new->ClosedConnectionException->else->throw->finally
SharedMemoryListeningConnector#startListening(Map)::: shared memory listening connector start listening:::name->argument->value->if->name->length->ts->ts->defaultAddress->return->super->startListening
SharedMemoryListeningConnector#name()::: shared memory listening connector name:::return
SharedMemoryListeningConnector#description()::: shared memory listening connector description:::return->getString
SharedMemoryTransportService.SharedMemoryListenKey#id()::: shared memory listen key id:::return
SharedMemoryTransportService.SharedMemoryListenKey#setId(long)::: shared memory listen key set id:::
SharedMemoryTransportService.SharedMemoryListenKey#address()::: shared memory listen key address:::return
SharedMemoryTransportService.SharedMemoryListenKey#toString()::: shared memory listen key to string:::return->address
SharedMemoryTransportService#name()::: shared memory transport service name:::return
SharedMemoryTransportService#defaultAddress()::: shared memory transport service default address:::return
SharedMemoryTransportService#description():::Return localized description of this transport service:::synchronized->if->ResourceBundle->getBundle->return->messages->getString
SharedMemoryTransportService#capabilities()::: shared memory transport service capabilities:::return->new->SharedMemoryTransportServiceCapabilities
SharedMemoryTransportService#initialize()::: shared memory transport service initialize:::
SharedMemoryTransportService#startListening0(String)::: shared memory transport service start listening0:::
SharedMemoryTransportService#attach0(String, long)::: shared memory transport service attach0:::
SharedMemoryTransportService#stopListening0(long)::: shared memory transport service stop listening0:::
SharedMemoryTransportService#accept0(long, long)::: shared memory transport service accept0:::
SharedMemoryTransportService#name(long)::: shared memory transport service name:::
SharedMemoryTransportService#attach(String, long, long)::: shared memory transport service attach:::if->throw->new->NullPointerException->id->attach0->conn->new->SharedMemoryConnection->conn->handshake->return
SharedMemoryTransportService#startListening(String)::: shared memory transport service start listening:::if->address->length->defaultAddress->id->startListening0->return->name->new->SharedMemoryListenKey
SharedMemoryTransportService#startListening()::: shared memory transport service start listening:::return->startListening
SharedMemoryTransportService#stopListening(ListenKey)::: shared memory transport service stop listening:::if->throw->new->IllegalArgumentException->id->key->synchronized->key->id->if->throw->new->IllegalArgumentException->key->setId->stopListening0
SharedMemoryTransportService#accept(ListenKey, long, long)::: shared memory transport service accept:::if->throw->new->IllegalArgumentException->transportId->key->synchronized->key->id->if->throw->new->IllegalArgumentException->connectId->accept0->conn->new->SharedMemoryConnection->conn->handshake->return
SharedMemoryTransportServiceCapabilities#supportsMultipleConnections()::: shared memory transport service capabilities supports multiple connections:::return
SharedMemoryTransportServiceCapabilities#supportsAttachTimeout()::: shared memory transport service capabilities supports attach timeout:::return
SharedMemoryTransportServiceCapabilities#supportsAcceptTimeout()::: shared memory transport service capabilities supports accept timeout:::return
SharedMemoryTransportServiceCapabilities#supportsHandshakeTimeout()::: shared memory transport service capabilities supports handshake timeout:::return
ShortTypeImpl#signature()::: short type impl signature:::return->String->valueOf
ShortTypeImpl#convert(PrimitiveValue)::: short type impl convert:::return->vm->checkedShortValue->mirrorOf
ShortValueImpl#equals(Object)::: short value impl equals:::if->return->value->super->equals->else->return
ShortValueImpl#hashCode()::: short value impl hash code:::return->intValue
ShortValueImpl#compareTo(ShortValue)::: short value impl compare to:::other->obj->value->return->value
ShortValueImpl#type()::: short value impl type:::return->vm->theShortType
ShortValueImpl#value()::: short value impl value:::return
ShortValueImpl#booleanValue()::: short value impl boolean value:::return
ShortValueImpl#byteValue()::: short value impl byte value:::return
ShortValueImpl#charValue()::: short value impl char value:::return
ShortValueImpl#shortValue()::: short value impl short value:::return
ShortValueImpl#intValue()::: short value impl int value:::return
ShortValueImpl#longValue()::: short value impl long value:::return
ShortValueImpl#floatValue()::: short value impl float value:::return
ShortValueImpl#doubleValue()::: short value impl double value:::return
ShortValueImpl#checkedByteValue()::: short value impl checked byte value:::if->throw->new->InvalidTypeException->else->return->super->checkedByteValue
ShortValueImpl#checkedCharValue()::: short value impl checked char value:::if->throw->new->InvalidTypeException->else->return->super->checkedCharValue
ShortValueImpl#toString()::: short value impl to string:::return
ShortValueImpl#typeValueKey()::: short value impl type value key:::return
SocketAttachingConnector#attach(Map)::: socket attaching connector attach:::host->argument->value->if->host->length->address->argument->value->return->super->attach
SocketAttachingConnector#name()::: socket attaching connector name:::return
SocketAttachingConnector#description()::: socket attaching connector description:::return->getString
SocketConnection#close()::: socket connection close:::synchronized->if->return->socketOutput->close->socketInput->close->socket->close
SocketConnection#isOpen()::: socket connection is open:::synchronized->return
SocketConnection#readPacket()::: socket connection read packet:::if->isOpen->throw->new->ClosedConnectionException->synchronized->b1->b2->b3->b4->try->socketInput->read->socketInput->read->socketInput->read->socketInput->read->catch->if->isOpen->throw->new->ClosedConnectionException->else->throw->finally->if->return->new->byteArr->if->throw->new->IOException->len->if->throw->new->IOException->b->new->byteArr->off->while->count->try->socketInput->read->catch->if->isOpen->throw->new->ClosedConnectionException->else->throw->finally->if->throw->new->IOException->return
SocketConnection#writePacket(byte[])::: socket connection write packet:::if->isOpen->throw->new->ClosedConnectionException->if->throw->new->IllegalArgumentException->b0->b1->b2->b3->len->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->synchronized->try->socketOutput->write->catch->if->isOpen->throw->new->ClosedConnectionException->else->throw->finally
SocketListeningConnector#startListening(Map)::: socket listening connector start listening:::port->argument->value->localaddr->argument->value->if->port->length->if->localaddr->length->else->return->super->startListening
SocketListeningConnector#name()::: socket listening connector name:::return
SocketListeningConnector#description()::: socket listening connector description:::return->getString
SocketListeningConnector#updateArgumentMapIfRequired(Map, TransportService.ListenKey)::: socket listening connector update argument map if required:::if->isWildcardPort->address->listener->address->split->if->args->get->setValue
SocketListeningConnector#isWildcardPort(Map)::: socket listening connector is wildcard port:::port->args->get->value->return->port->isEmpty->Integer->valueOf
SocketTransportService.SocketListenKey#socket()::: socket listen key socket:::return
SocketTransportService.SocketListenKey#address()::: socket listen key address:::address->ss->getInetAddress->if->address->isAnyLocalAddress->try->InetAddress->getLocalHost->catch->loopback->try->InetAddress->getByAddress->catch->throw->new->InternalError->finally->finally->result->hostname->address->getHostName->hostaddr->address->getHostAddress->if->hostname->equals->if->else->else->return->ss->getLocalPort
SocketTransportService.SocketListenKey#toString()::: socket listen key to string:::return->address
SocketTransportService#handshake(Socket, long):::Handshake with the debuggee:::s->setSoTimeout->hello->getBytes->s->getOutputStream->write->b->new->byteArr->received->while->n->try->s->getInputStream->read->catch->throw->new->IOException->finally->if->s->close->throw->new->IOException->for->i->s->setSoTimeout
SocketTransportService#name():::The name of this transport service:::return
SocketTransportService#description():::Return localized description of this transport service:::synchronized->if->ResourceBundle->getBundle->return->messages->getString
SocketTransportService#capabilities():::Return the capabilities of this transport service:::return->new->TransportService.Capabilities
SocketTransportService#attach(String, long, long):::Attach to the specified address with optional attach and handshake timeout.:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->splitIndex->address->indexOf->host->portStr->if->else->address->substring->address->substring->if->host->equals->InetAddress->getLocalHost->getHostName->port->try->Integer->decode->intValue->catch->throw->new->IllegalArgumentException->finally->sa->new->InetSocketAddress->s->new->Socket->try->s->connect->catch->try->s->close->catch->finally->throw->new->TransportTimeoutException->finally->try->handshake->catch->try->s->close->catch->finally->throw->finally->return->new->SocketConnection
SocketTransportService#startListening(String, int)::: socket transport service start listening:::sa->if->new->InetSocketAddress->else->new->InetSocketAddress->ss->new->ServerSocket->if->ss->setReuseAddress->ss->bind->return->new->SocketListenKey
SocketTransportService#startListening(String):::Listen on the specified address:::if->address->length->splitIndex->address->indexOf->localaddr->if->address->substring->address->substring->port->try->Integer->decode->intValue->catch->throw->new->IllegalArgumentException->finally->return->startListening
SocketTransportService#startListening():::Listen on the default address:::return->startListening
SocketTransportService#stopListening(ListenKey):::Stop the listener:::if->throw->new->IllegalArgumentException->synchronized->ss->socket->if->ss->isClosed->throw->new->IllegalArgumentException->ss->close
SocketTransportService#accept(ListenKey, long, long):::Accept a connection from a debuggee and handshake with it.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->ss->synchronized->socket->if->ss->isClosed->throw->new->IllegalArgumentException->ss->setSoTimeout->s->try->ss->accept->catch->throw->new->TransportTimeoutException->finally->handshake->return->new->SocketConnection
SocketTransportService#toString()::: socket transport service to string:::return->name
StackFrameImpl#threadResumable(ThreadAction)::: stack frame impl thread resumable:::synchronized->vm->state->if->return->else->throw->new->InternalException
StackFrameImpl#validateStackFrame()::: stack frame impl validate stack frame:::if->throw->new->InvalidStackFrameException
StackFrameImpl#location():::Return the frame location:::validateStackFrame->return
StackFrameImpl#thread():::Return the thread holding the frame:::validateStackFrame->return
StackFrameImpl#equals(Object)::: stack frame impl equals:::if->other->return->thread->other->thread->equals->location->other->location->equals->super->equals->else->return
StackFrameImpl#hashCode()::: stack frame impl hash code:::return->thread->hashCode
StackFrameImpl#thisObject()::: stack frame impl this object:::validateStackFrame->currentMethod->location->method->if->currentMethod->isStatic->currentMethod->isNative->return->else->if->ps->synchronized->vm->state->validateStackFrame->enqueueCommand->try->waitForReply->catch->switch->exc->errorCode->throw->new->InvalidStackFrameException->throw->exc->toJDIException->finally->return
StackFrameImpl#createVisibleVariables():::Build the visible variable map:::if->allVariables->location->method->variables->map->allVariables->size->new->HashMap<>->foreach->name->variable->name->if->variable->isVisible->existing->map->get->if->hides->map->put
StackFrameImpl#visibleVariables():::Return the list of visible variable in the frame:::validateStackFrame->createVisibleVariables->mapAsList->visibleVariables->values->new->ArrayList<>->Collections->sort->return
StackFrameImpl#visibleVariableByName(String):::Return a particular variable in the frame:::validateStackFrame->createVisibleVariables->return->visibleVariables->get
StackFrameImpl#getValue(LocalVariable)::: stack frame impl get value:::list->new->ArrayList<>->list->add->return->getValues->get
StackFrameImpl#getValues(List)::: stack frame impl get values:::validateStackFrame->validateMirrors->count->variables->size->slots->new->JDWP.StackFrame.GetValues.SlotInfoArr->for->i->ps->synchronized->vm->state->validateStackFrame->enqueueCommand->values->try->waitForReply->catch->switch->exc->errorCode->throw->new->InvalidStackFrameException->throw->exc->toJDIException->finally->if->throw->new->InternalException->map->new->HashMap<>->for->i->return
StackFrameImpl#setValue(LocalVariable, Value)::: stack frame impl set value:::validateStackFrame->validateMirror->validateMirrorOrNull->variable->value->if->variable->isVisible->throw->variable->name->new->IllegalArgumentException->try->ValueImpl->prepareForAssignment->slotVals->new->JDWP.StackFrame.SetValues.SlotInfoArr->variable->slot->new->JDWP.StackFrame.SetValues.SlotInfo->ps->synchronized->vm->state->validateStackFrame->enqueueCommand->try->waitForReply->catch->switch->exc->errorCode->throw->new->InvalidStackFrameException->throw->exc->toJDIException->finally->catch->if->throw->finally
StackFrameImpl#getArgumentValues()::: stack frame impl get argument values:::validateStackFrame->mmm->location->method->argSigs->mmm->argumentSignatures->count->argSigs->size->slots->new->JDWP.StackFrame.GetValues.SlotInfoArr->slot->if->mmm->isStatic->else->for->ii->ps->synchronized->vm->state->validateStackFrame->enqueueCommand->values->try->waitForReply->catch->switch->exc->errorCode->throw->new->InvalidStackFrameException->throw->exc->toJDIException->finally->if->throw->new->InternalException->return->Arrays->asList
StackFrameImpl#pop()::: stack frame impl pop:::validateStackFrame->sender->new->CommandSender->try->stream->thread->sendResumingCommand->waitForReply->catch->switch->exc->errorCode->throw->new->IncompatibleThreadStateException->throw->new->IncompatibleThreadStateException->throw->new->InvalidStackFrameException->throw->exc->toJDIException->finally->vm->state->freeze
StackFrameImpl#toString()::: stack frame impl to string:::return->location->toString->thread->toString
StratumLineInfo#liStratum()::: stratum line info li stratum:::return
StratumLineInfo#liLineNumber()::: stratum line info li line number:::return
StratumLineInfo#liSourceName()::: stratum line info li source name:::if->throw->new->AbsentInformationException->return
StratumLineInfo#liSourcePath()::: stratum line info li source path:::if->throw->new->AbsentInformationException->return
StringReferenceImpl#value()::: string reference impl value:::if->try->process->catch->throw->exc->toJDIException->finally->return
StringReferenceImpl#toString()::: string reference impl to string:::return->value
StringReferenceImpl#typeValueKey()::: string reference impl type value key:::return
SunCommandLineLauncher#transportService()::: sun command line launcher transport service:::return
SunCommandLineLauncher#transport()::: sun command line launcher transport:::return
SunCommandLineLauncher#hasWhitespace(String)::: sun command line launcher has whitespace:::length->string->length->for->i->return
SunCommandLineLauncher#launch(Map)::: sun command line launcher launch:::vm->home->argument->value->options->argument->value->mainClassAndArgs->argument->value->wait->argument->booleanValue->quote->argument->value->exe->argument->value->exePath->if->quote->length->throw->new->IllegalConnectorArgumentsException->if->options->indexOf->options->toLowerCase->indexOf->throw->new->IllegalConnectorArgumentsException->listenKey->if->rr->new->Random->failCount->while->try->address->String->rr->nextInt->valueOf->transportService->startListening->break->catch->if->throw->finally->else->transportService->startListening->address->listenKey->address->try->if->home->length->else->if->hasWhitespace->xrun->transport->name->if->hasWhitespace->command->quote->charAt->tokenizeCommand->transportService->launch->catch->finally->transportService->stopListening->return
SunCommandLineLauncher#name()::: sun command line launcher name:::return
SunCommandLineLauncher#description()::: sun command line launcher description:::return->getString
SunSDK#home():::Returns the home directory of a Java 2 SDK if the current JRE is embedded in one.:::jreHome->System->getProperty->new->File->jreParent->jreHome->getParent->new->File->jdwpLibName->System->mapLibraryName->jdwpLib->new->File->return->jdwpLib->exists->jreParent->getAbsolutePath
TargetVM#start()::: target m start:::readerThread->start
TargetVM#dumpPacket(Packet, boolean)::: target m dump packet:::direction->if->vm->printTrace->else->type->vm->printTrace->line->new->StringBuilder->line->append->for->i->if->line->length->vm->line->toString->printTrace
TargetVM#run()::: target m run:::if->vm->printTrace->p->p2->idString->while->done->try->b->connection->readPacket->if->Packet->fromByteArray->catch->finally->if->try->connection->close->catch->finally->break->if->dumpPacket->if->handleVMCommand->else->vm->state->notifyCommandComplete->String->valueOf->synchronized->waitingQueue->get->if->waitingQueue->remove->if->println->continue->synchronized->p2->notify->disposeVirtualMachine->if->eventController->release->synchronized->iter->eventQueues->iterator->while->iter->hasNext->iter->next->close->synchronized->iter->waitingQueue->values->iterator->while->iter->hasNext->packet->iter->next->synchronized->packet->notify->waitingQueue->clear->if->vm->printTrace
TargetVM#handleVMCommand(Packet)::: target m handle command:::switch->handleEventCmdSet->break->println->return
TargetVM#handleEventCmdSet(Packet)::: target m handle event cmd set:::eventSet->new->EventSetImpl->queueEventSet
TargetVM#eventController()::: target m event controller:::if->new->EventController->return
TargetVM#controlEventFlow(int)::: target m control event flow:::if->eventController->hold->else->if->eventController->release
TargetVM#notifyDequeueEventSet()::: target m notify dequeue event set:::maxQueueSize->synchronized->iter->eventQueues->iterator->while->iter->hasNext->queue->iter->next->Math->queue->size->max->controlEventFlow
TargetVM#queueEventSet(EventSet)::: target m queue event set:::maxQueueSize->synchronized->iter->eventQueues->iterator->while->iter->hasNext->queue->iter->next->queue->enqueue->Math->queue->size->max->controlEventFlow
TargetVM#send(Packet)::: target m send:::id->String->valueOf->synchronized->waitingQueue->put->if->dumpPacket->try->connection->packet->toByteArray->writePacket->catch->throw->e->getMessage->new->VMDisconnectedException->finally
TargetVM#waitForReply(Packet)::: target m wait for reply:::synchronized->while->try->packet->wait->catch->finally->if->throw->new->VMDisconnectedException
TargetVM#addEventQueue(EventQueueImpl)::: target m add event queue:::if->vm->printTrace->eventQueues->add
TargetVM#stopListening()::: target m stop listening:::if->vm->printTrace->try->connection->close->catch->finally
TargetVM.EventController#hold()::: event controller hold:::notifyAll
TargetVM.EventController#release()::: event controller release:::notifyAll
TargetVM.EventController#run()::: event controller run:::while->currentRequest->synchronized->while->try->wait->catch->finally->if->return->try->if->process->else->process->catch->e->toJDIException->printStackTrace->finally
ThreadAction#thread()::: thread action thread:::return->getSource
ThreadAction#id()::: thread action id:::return
ThreadGroupReferenceImpl#newCache()::: thread group reference impl new cache:::return->new->Cache
ThreadGroupReferenceImpl#description()::: thread group reference impl description:::return->uniqueID
ThreadGroupReferenceImpl#name()::: thread group reference impl name:::if->try->process->catch->throw->exc->toJDIException->finally->return
ThreadGroupReferenceImpl#parent()::: thread group reference impl parent:::if->try->process->catch->throw->exc->toJDIException->finally->return
ThreadGroupReferenceImpl#suspend()::: thread group reference impl suspend:::foreach->threads->thread->suspend->foreach->threadGroups->threadGroup->suspend
ThreadGroupReferenceImpl#resume()::: thread group reference impl resume:::foreach->threads->thread->resume->foreach->threadGroups->threadGroup->resume
ThreadGroupReferenceImpl#kids()::: thread group reference impl kids:::kids->try->local->getCache->if->if->process->if->if->vm->description->printTrace->catch->throw->exc->toJDIException->finally->return
ThreadGroupReferenceImpl#threads()::: thread group reference impl threads:::return->Arrays->kids->asList
ThreadGroupReferenceImpl#threadGroups()::: thread group reference impl thread groups:::return->Arrays->kids->asList
ThreadGroupReferenceImpl#toString()::: thread group reference impl to string:::return->referenceType->name->name->uniqueID
ThreadGroupReferenceImpl#typeValueKey()::: thread group reference impl type value key:::return
ThreadListener#threadResumable(ThreadAction)::: thread listener thread resumable:::
ThreadReferenceImpl#resetLocalCache()::: thread reference impl reset local cache:::new->LocalCache
ThreadReferenceImpl#newCache()::: thread reference impl new cache:::return->new->Cache
ThreadReferenceImpl#description()::: thread reference impl description:::return->uniqueID
ThreadReferenceImpl#vmNotSuspended(VMAction)::: thread reference impl vm not suspended:::if->action->resumingThread->synchronized->vm->state->new->ThreadAction->processThreadAction->return->super->vmNotSuspended
ThreadReferenceImpl#name():::Note that we only cache the name string while the entire VM is suspended because the name can change via Thread.setName arbitrarily while this thread is running.:::name->try->local->getCache->if->if->process->if->catch->throw->exc->toJDIException->finally->return
ThreadReferenceImpl#sendResumingCommand(CommandSender)::: thread reference impl send resuming command:::synchronized->vm->state->new->ThreadAction->processThreadAction->return->sender->send
ThreadReferenceImpl#suspend()::: thread reference impl suspend:::try->process->catch->throw->exc->toJDIException->finally
ThreadReferenceImpl#resume()::: thread reference impl resume:::if->return->stream->synchronized->vm->state->new->ThreadAction->processThreadAction->enqueueCommand->try->waitForReply->catch->throw->exc->toJDIException->finally
ThreadReferenceImpl#suspendCount()::: thread reference impl suspend count:::if->return->try->return->process->catch->throw->exc->toJDIException->finally
ThreadReferenceImpl#stop(ObjectReference)::: thread reference impl stop:::validateMirrorOrNull->list->vm->classesByName->throwableClass->list->get->if->throwableClass->isAssignableFrom->throw->new->InvalidTypeException->try->process->catch->throw->exc->toJDIException->finally
ThreadReferenceImpl#interrupt()::: thread reference impl interrupt:::try->process->catch->throw->exc->toJDIException->finally
ThreadReferenceImpl#jdwpStatus()::: thread reference impl jdwp status:::snapshot->myStatus->try->if->process->if->catch->throw->exc->toJDIException->finally->return
ThreadReferenceImpl#status()::: thread reference impl status:::return->jdwpStatus
ThreadReferenceImpl#isSuspended()::: thread reference impl is suspended:::return->jdwpStatus
ThreadReferenceImpl#isAtBreakpoint()::: thread reference impl is at breakpoint:::try->frame->frame->location->frame->location->requests->vm->eventRequestManager->breakpointRequests->iter->requests->iterator->while->iter->hasNext->request->iter->next->if->location->request->location->equals->return->return->catch->return->return->finally
ThreadReferenceImpl#threadGroup()::: thread reference impl thread group:::if->try->process->catch->throw->exc->toJDIException->finally->return
ThreadReferenceImpl#frameCount()::: thread reference impl frame count:::snapshot->try->if->process->catch->switch->exc->errorCode->throw->new->IncompatibleThreadStateException->throw->exc->toJDIException->finally->return
ThreadReferenceImpl#frames()::: thread reference impl frames:::return->privateFrames
ThreadReferenceImpl#frame(int)::: thread reference impl frame:::list->privateFrames->return->list->get
ThreadReferenceImpl#isSubrange(LocalCache, int, int):::Is the requested subrange within what has been retrieved? local is known to be non-null:::if->return->if->return->if->if->size->throw->new->IndexOutOfBoundsException->return->return
ThreadReferenceImpl#frames(int, int)::: thread reference impl frames:::if->throw->new->IndexOutOfBoundsException->return->privateFrames
ThreadReferenceImpl#privateFrames(int, int):::Private version of frames() allows "-1" to specify all remaining frames.:::snapshot->try->if->isSubrange->jdwpFrames->process->count->new->ArrayList<>->for->i->return->Collections->unmodifiableList->else->fromIndex->toIndex->if->size->else->return->Collections->subList->unmodifiableList->catch->switch->exc->errorCode->throw->new->IncompatibleThreadStateException->throw->exc->toJDIException->finally
ThreadReferenceImpl#ownedMonitors()::: thread reference impl owned monitors:::snapshot->try->if->Arrays->process->asList->if->vm->description->size->printTrace->catch->switch->exc->errorCode->throw->new->IncompatibleThreadStateException->throw->exc->toJDIException->finally->return
ThreadReferenceImpl#currentContendedMonitor()::: thread reference impl current contended monitor:::snapshot->try->if->process->if->vm->description->uniqueID->printTrace->catch->switch->exc->errorCode->throw->new->IncompatibleThreadStateException->throw->exc->toJDIException->finally->return
ThreadReferenceImpl#ownedMonitorsAndFrames()::: thread reference impl owned monitors and frames:::snapshot->try->if->minfo->process->new->ArrayList<>->for->i->if->vm->description->size->printTrace->catch->switch->exc->errorCode->throw->new->IncompatibleThreadStateException->throw->exc->toJDIException->finally->return
ThreadReferenceImpl#popFrames(StackFrame)::: thread reference impl pop frames:::if->frame->thread->equals->throw->new->IllegalArgumentException->if->vm->canPopFrames->throw->new->UnsupportedOperationException->pop
ThreadReferenceImpl#forceEarlyReturn(Value)::: thread reference impl force early return:::if->vm->canForceEarlyReturn->throw->new->UnsupportedOperationException->validateMirrorOrNull->sf->try->frame->catch->throw->new->InvalidStackFrameException->finally->sf->validateStackFrame->meth->sf->location->method->convertedValue->ValueImpl->meth->getReturnValueContainer->prepareForAssignment->try->process->catch->switch->exc->errorCode->throw->new->NativeMethodException->throw->new->IncompatibleThreadStateException->throw->new->IncompatibleThreadStateException->throw->new->InvalidStackFrameException->throw->exc->toJDIException->finally
ThreadReferenceImpl#toString()::: thread reference impl to string:::return->referenceType->name->name->uniqueID
ThreadReferenceImpl#typeValueKey()::: thread reference impl type value key:::return
ThreadReferenceImpl#addListener(ThreadListener)::: thread reference impl add listener:::synchronized->vm->state->listeners->new->WeakReference<>->add
ThreadReferenceImpl#removeListener(ThreadListener)::: thread reference impl remove listener:::synchronized->vm->state->iter->listeners->iterator->while->iter->hasNext->ref->iter->next->if->listener->ref->get->equals->iter->remove->break
ThreadReferenceImpl#processThreadAction(ThreadAction):::Propagate the thread state change information to registered listeners:::synchronized->vm->state->iter->listeners->iterator->while->iter->hasNext->ref->iter->next->listener->ref->get->if->switch->action->id->if->listener->threadResumable->iter->remove->break->else->iter->remove->resetLocalCache
TypeComponentImpl#name()::: type component impl name:::return
TypeComponentImpl#signature()::: type component impl signature:::return
TypeComponentImpl#genericSignature()::: type component impl generic signature:::return
TypeComponentImpl#modifiers()::: type component impl modifiers:::return
TypeComponentImpl#declaringType()::: type component impl declaring type:::return
TypeComponentImpl#isStatic()::: type component impl is static:::return->isModifierSet
TypeComponentImpl#isFinal()::: type component impl is final:::return->isModifierSet
TypeComponentImpl#isPrivate()::: type component impl is private:::return->isModifierSet
TypeComponentImpl#isPackagePrivate()::: type component impl is package private:::return->isModifierSet
TypeComponentImpl#isProtected()::: type component impl is protected:::return->isModifierSet
TypeComponentImpl#isPublic()::: type component impl is public:::return->isModifierSet
TypeComponentImpl#isSynthetic()::: type component impl is synthetic:::return->isModifierSet
TypeComponentImpl#ref()::: type component impl ref:::return
TypeComponentImpl#isModifierSet(int)::: type component impl is modifier set:::return
TypeImpl#signature()::: type impl signature:::
TypeImpl#name()::: type impl name:::if->parser->signature->new->JNITypeParser->parser->typeName->return
TypeImpl#equals(Object)::: type impl equals:::if->other->return->signature->other->signature->equals->super->equals->else->return
TypeImpl#hashCode()::: type impl hash code:::return->signature->hashCode
ValueContainer#type()::: value container type:::
ValueContainer#findType(String)::: value container find type:::
ValueContainer#typeName()::: value container type name:::
ValueContainer#signature()::: value container signature:::
ValueImpl#prepareForAssignment(Value, ValueContainer)::: value impl prepare for assignment:::if->if->destination->signature->length->throw->new->InvalidTypeException->return->else->return->prepareForAssignmentTo
ValueImpl#typeValueKey(Value)::: value impl type value key:::if->return->else->return->typeValueKey
ValueImpl#prepareForAssignmentTo(ValueContainer)::: value impl prepare for assignment to:::
ValueImpl#typeValueKey()::: value impl type value key:::
VirtualMachineImpl#notifyInitCompletion()::: virtual machine impl notify init completion:::synchronized->initMonitor->notifyAll
VirtualMachineImpl#waitInitCompletion()::: virtual machine impl wait init completion:::synchronized->while->try->initMonitor->wait->catch->finally
VirtualMachineImpl#state()::: virtual machine impl state:::return
VirtualMachineImpl#threadResumable(ThreadAction)::: virtual machine impl thread resumable:::state->action->thread->thaw->return
VirtualMachineImpl#getInternalEventRequestManager()::: virtual machine impl get internal event request manager:::return
VirtualMachineImpl#validateVM()::: virtual machine impl validate m:::
VirtualMachineImpl#equals(Object)::: virtual machine impl equals:::return
VirtualMachineImpl#hashCode()::: virtual machine impl hash code:::return->System->identityHashCode
VirtualMachineImpl#allModules()::: virtual machine impl all modules:::validateVM->modules->retrieveAllModules->return->Collections->unmodifiableList
VirtualMachineImpl#classesByName(String)::: virtual machine impl classes by name:::validateVM->signature->JNITypeParser->typeNameToSignature->list->if->findReferenceTypes->else->retrieveClassesBySignature->return->Collections->unmodifiableList
VirtualMachineImpl#allClasses()::: virtual machine impl all classes:::validateVM->if->retrieveAllClasses->a->synchronized->new->ArrayList<>->return->Collections->unmodifiableList
VirtualMachineImpl#redefineClasses(Map)::: virtual machine impl redefine classes:::cnt->classToBytes->size->defs->new->JDWP.VirtualMachine.RedefineClasses.ClassDefArr->validateVM->if->canRedefineClasses->throw->new->UnsupportedOperationException->it->classToBytes->entrySet->iterator->for->i->it->hasNext->vm->state->thaw->try->process->catch->switch->exc->errorCode->throw->new->ClassFormatError->throw->new->ClassCircularityError->throw->new->VerifyError->throw->new->UnsupportedClassVersionError->throw->new->UnsupportedOperationException->throw->new->UnsupportedOperationException->throw->new->UnsupportedOperationException->throw->new->UnsupportedOperationException->throw->new->UnsupportedOperationException->throw->new->UnsupportedOperationException->throw->new->UnsupportedOperationException->throw->new->NoClassDefFoundError->throw->exc->toJDIException->finally->toDelete->new->ArrayList<>->erm->eventRequestManager->erm->breakpointRequests->iterator->while->it->hasNext->req->it->next->if->classToBytes->req->location->declaringType->containsKey->toDelete->add->erm->deleteEventRequests->classToBytes->keySet->iterator->while->it->hasNext->rti->it->next->rti->noticeRedefineClass
VirtualMachineImpl#allThreads()::: virtual machine impl all threads:::validateVM->return->state->allThreads
VirtualMachineImpl#topLevelThreadGroups()::: virtual machine impl top level thread groups:::validateVM->return->state->topLevelThreadGroups
VirtualMachineImpl#sendResumingCommand(CommandSender)::: virtual machine impl send resuming command:::return->state->thawCommand
VirtualMachineImpl#notifySuspend()::: virtual machine impl notify suspend:::state->freeze
VirtualMachineImpl#suspend()::: virtual machine impl suspend:::validateVM->try->process->catch->throw->exc->toJDIException->finally->notifySuspend
VirtualMachineImpl#resume()::: virtual machine impl resume:::validateVM->sender->new->CommandSender->try->stream->state->thawCommand->waitForReply->catch->switch->exc->errorCode->return->throw->exc->toJDIException->finally
VirtualMachineImpl#eventQueue()::: virtual machine impl event queue:::return
VirtualMachineImpl#eventRequestManager()::: virtual machine impl event request manager:::validateVM->return
VirtualMachineImpl#eventRequestManagerImpl()::: virtual machine impl event request manager impl:::return
VirtualMachineImpl#mirrorOf(boolean)::: virtual machine impl mirror of:::validateVM->return->new->BooleanValueImpl
VirtualMachineImpl#mirrorOf(byte)::: virtual machine impl mirror of:::validateVM->return->new->ByteValueImpl
VirtualMachineImpl#mirrorOf(char)::: virtual machine impl mirror of:::validateVM->return->new->CharValueImpl
VirtualMachineImpl#mirrorOf(short)::: virtual machine impl mirror of:::validateVM->return->new->ShortValueImpl
VirtualMachineImpl#mirrorOf(int)::: virtual machine impl mirror of:::validateVM->return->new->IntegerValueImpl
VirtualMachineImpl#mirrorOf(long)::: virtual machine impl mirror of:::validateVM->return->new->LongValueImpl
VirtualMachineImpl#mirrorOf(float)::: virtual machine impl mirror of:::validateVM->return->new->FloatValueImpl
VirtualMachineImpl#mirrorOf(double)::: virtual machine impl mirror of:::validateVM->return->new->DoubleValueImpl
VirtualMachineImpl#mirrorOf(String)::: virtual machine impl mirror of:::validateVM->try->return->process->catch->throw->exc->toJDIException->finally
VirtualMachineImpl#mirrorOfVoid()::: virtual machine impl mirror of void:::if->new->VoidValueImpl->return
VirtualMachineImpl#instanceCounts(List)::: virtual machine impl instance counts:::if->canGetInstanceInfo->throw->new->UnsupportedOperationException->retValue->rtArray->classes->size->new->ReferenceTypeImplArr->ii->foreach->validateMirror->try->process->catch->throw->exc->toJDIException->finally->return
VirtualMachineImpl#dispose()::: virtual machine impl dispose:::validateVM->try->process->catch->throw->exc->toJDIException->finally->target->stopListening
VirtualMachineImpl#exit(int)::: virtual machine impl exit:::validateVM->try->process->catch->throw->exc->toJDIException->finally->target->stopListening
VirtualMachineImpl#process()::: virtual machine impl process:::validateVM->return
VirtualMachineImpl#versionInfo()::: virtual machine impl version info:::try->if->process->return->catch->throw->exc->toJDIException->finally
VirtualMachineImpl#description()::: virtual machine impl description:::validateVM->return->MessageFormat->vmManager->getString->vmManager->majorInterfaceVersion->vmManager->minorInterfaceVersion->versionInfo->format
VirtualMachineImpl#version()::: virtual machine impl version:::validateVM->return->versionInfo
VirtualMachineImpl#name()::: virtual machine impl name:::validateVM->return->versionInfo
VirtualMachineImpl#canWatchFieldModification()::: virtual machine impl can watch field modification:::validateVM->return->capabilities
VirtualMachineImpl#canWatchFieldAccess()::: virtual machine impl can watch field access:::validateVM->return->capabilities
VirtualMachineImpl#canGetBytecodes()::: virtual machine impl can get bytecodes:::validateVM->return->capabilities
VirtualMachineImpl#canGetSyntheticAttribute()::: virtual machine impl can get synthetic attribute:::validateVM->return->capabilities
VirtualMachineImpl#canGetOwnedMonitorInfo()::: virtual machine impl can get owned monitor info:::validateVM->return->capabilities
VirtualMachineImpl#canGetCurrentContendedMonitor()::: virtual machine impl can get current contended monitor:::validateVM->return->capabilities
VirtualMachineImpl#canGetMonitorInfo()::: virtual machine impl can get monitor info:::validateVM->return->capabilities
VirtualMachineImpl#hasNewCapabilities()::: virtual machine impl has new capabilities:::return->versionInfo->versionInfo
VirtualMachineImpl#canGet1_5LanguageFeatures()::: virtual machine impl can get1_5 language features:::return->versionInfo->versionInfo
VirtualMachineImpl#canUseInstanceFilters()::: virtual machine impl can use instance filters:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canRedefineClasses()::: virtual machine impl can redefine classes:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canAddMethod()::: virtual machine impl can add method:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canUnrestrictedlyRedefineClasses()::: virtual machine impl can unrestrictedly redefine classes:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canPopFrames()::: virtual machine impl can pop frames:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canGetMethodReturnValues()::: virtual machine impl can get method return values:::return->versionInfo->versionInfo
VirtualMachineImpl#canGetInstanceInfo()::: virtual machine impl can get instance info:::if->versionInfo->versionInfo->validateVM->return->hasNewCapabilities->capabilitiesNew->else->return
VirtualMachineImpl#canUseSourceNameFilters()::: virtual machine impl can use source name filters:::return->versionInfo->versionInfo
VirtualMachineImpl#canForceEarlyReturn()::: virtual machine impl can force early return:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canBeModified()::: virtual machine impl can be modified:::return
VirtualMachineImpl#canGetSourceDebugExtension()::: virtual machine impl can get source debug extension:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canGetClassFileVersion()::: virtual machine impl can get class file version:::return->versionInfo->versionInfo
VirtualMachineImpl#canGetConstantPool()::: virtual machine impl can get constant pool:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canRequestVMDeathEvent()::: virtual machine impl can request death event:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canRequestMonitorEvents()::: virtual machine impl can request monitor events:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canGetMonitorFrameInfo()::: virtual machine impl can get monitor frame info:::validateVM->return->hasNewCapabilities->capabilitiesNew
VirtualMachineImpl#canGetModuleInfo()::: virtual machine impl can get module info:::validateVM->return->versionInfo
VirtualMachineImpl#setDebugTraceMode(int)::: virtual machine impl set debug trace mode:::validateVM
VirtualMachineImpl#printTrace(String)::: virtual machine impl print trace:::println
VirtualMachineImpl#printReceiveTrace(int, String)::: virtual machine impl print receive trace:::sb->new->StringBuilder->for->i->sb->append->sb->toString->printTrace
VirtualMachineImpl#addReferenceType(long, int, String)::: virtual machine impl add reference type:::if->initReferenceTypes->type->switch->new->ClassTypeImpl->break->new->InterfaceTypeImpl->break->new->ArrayTypeImpl->break->throw->new->InternalException->if->type->setSignature->typesByID->put->typesBySignature->add->if->vm->printTrace->return
VirtualMachineImpl#removeReferenceType(String)::: virtual machine impl remove reference type:::if->return->iter->typesBySignature->iterator->matches->while->iter->hasNext->type->iter->next->comp->signature->type->signature->compareTo->if->iter->remove->typesByID->type->ref->remove->if->vm->type->ref->printTrace->if->retrieveClassesBySignature
VirtualMachineImpl#findReferenceTypes(String)::: virtual machine impl find reference types:::if->return->new->ArrayList<>->iter->typesBySignature->iterator->list->new->ArrayList<>->while->iter->hasNext->type->iter->next->comp->signature->type->signature->compareTo->if->list->add->return
VirtualMachineImpl#initReferenceTypes()::: virtual machine impl init reference types:::new->HashMap<>->new->TreeSet<>
VirtualMachineImpl#referenceType(long, byte)::: virtual machine impl reference type:::return->referenceType
VirtualMachineImpl#classType(long)::: virtual machine impl class type:::return->referenceType
VirtualMachineImpl#interfaceType(long)::: virtual machine impl interface type:::return->referenceType
VirtualMachineImpl#arrayType(long)::: virtual machine impl array type:::return->referenceType
VirtualMachineImpl#referenceType(long, int, String)::: virtual machine impl reference type:::if->sb->new->StringBuilder->sb->append->if->sb->append->else->if->sb->append->else->if->sb->append->else->sb->append->append->if->sb->append->append->append->sb->append->append->vm->sb->toString->printTrace->if->return->else->retType->synchronized->if->typesByID->get->if->addReferenceType->return
VirtualMachineImpl#capabilities()::: virtual machine impl capabilities:::if->try->process->catch->throw->exc->toJDIException->finally->return
VirtualMachineImpl#capabilitiesNew()::: virtual machine impl capabilities new:::if->try->process->catch->throw->exc->toJDIException->finally->return
VirtualMachineImpl#addModule(long)::: virtual machine impl add module:::if->new->HashMap<>->module->new->ModuleReferenceImpl->modulesByID->put->return
VirtualMachineImpl#getModule(long)::: virtual machine impl get module:::if->return->else->module->synchronized->if->modulesByID->get->if->addModule->return
VirtualMachineImpl#retrieveAllModules()::: virtual machine impl retrieve all modules:::reqModules->try->process->catch->throw->exc->toJDIException->finally->modules->new->ArrayList<>->for->i->return
VirtualMachineImpl#retrieveClassesBySignature(String)::: virtual machine impl retrieve classes by signature:::if->vm->printTrace->cinfos->try->process->catch->throw->exc->toJDIException->finally->count->list->new->ArrayList<>->synchronized->for->i->return
VirtualMachineImpl#retrieveAllClasses1_4()::: virtual machine impl retrieve all classes1_4:::cinfos->try->process->catch->throw->exc->toJDIException->finally->synchronized->if->count->for->i
VirtualMachineImpl#retrieveAllClasses()::: virtual machine impl retrieve all classes:::if->vm->printTrace->if->vm->canGet1_5LanguageFeatures->retrieveAllClasses1_4->return->cinfos->try->process->catch->throw->exc->toJDIException->finally->synchronized->if->count->for->i
VirtualMachineImpl#sendToTarget(Packet)::: virtual machine impl send to target:::target->send
VirtualMachineImpl#waitForTargetReply(Packet)::: virtual machine impl wait for target reply:::target->waitForReply->processBatchedDisposes
VirtualMachineImpl#findBootType(String)::: virtual machine impl find boot type:::types->retrieveClassesBySignature->iter->types->iterator->while->iter->hasNext->type->iter->next->if->type->classLoader->return->parser->new->JNITypeParser->throw->parser->typeName->parser->typeName->new->ClassNotLoadedException
VirtualMachineImpl#theBooleanType()::: virtual machine impl the boolean type:::if->synchronized->if->new->BooleanTypeImpl->return
VirtualMachineImpl#theByteType()::: virtual machine impl the byte type:::if->synchronized->if->new->ByteTypeImpl->return
VirtualMachineImpl#theCharType()::: virtual machine impl the char type:::if->synchronized->if->new->CharTypeImpl->return
VirtualMachineImpl#theShortType()::: virtual machine impl the short type:::if->synchronized->if->new->ShortTypeImpl->return
VirtualMachineImpl#theIntegerType()::: virtual machine impl the integer type:::if->synchronized->if->new->IntegerTypeImpl->return
VirtualMachineImpl#theLongType()::: virtual machine impl the long type:::if->synchronized->if->new->LongTypeImpl->return
VirtualMachineImpl#theFloatType()::: virtual machine impl the float type:::if->synchronized->if->new->FloatTypeImpl->return
VirtualMachineImpl#theDoubleType()::: virtual machine impl the double type:::if->synchronized->if->new->DoubleTypeImpl->return
VirtualMachineImpl#theVoidType()::: virtual machine impl the void type:::if->synchronized->if->new->VoidTypeImpl->return
VirtualMachineImpl#primitiveTypeMirror(byte)::: virtual machine impl primitive type mirror:::switch->return->theBooleanType->return->theByteType->return->theCharType->return->theShortType->return->theIntegerType->return->theLongType->return->theFloatType->return->theDoubleType->throw->new->IllegalArgumentException
VirtualMachineImpl#processBatchedDisposes()::: virtual machine impl process batched disposes:::if->return->requests->synchronized->size->batchedDisposeRequests->size->if->if->printTrace->new->JDWP.VirtualMachine.DisposeObjects.RequestArr->for->i->batchedDisposeRequests->clear->if->try->process->catch->throw->exc->toJDIException->finally
VirtualMachineImpl#batchForDispose(SoftObjectReference)::: virtual machine impl batch for dispose:::if->ref->key->longValue->ref->count->printTrace->batchedDisposeRequests->add
VirtualMachineImpl#processQueue()::: virtual machine impl process queue:::ref->while->referenceQueue->poll->softRef->removeObjectMirror->batchForDispose
VirtualMachineImpl#objectMirror(long, int)::: virtual machine impl object mirror:::processQueue->if->return->object->key->ref->objectsByID->get->if->ref->object->if->switch->new->ObjectReferenceImpl->break->new->StringReferenceImpl->break->new->ArrayReferenceImpl->break->thread->new->ThreadReferenceImpl->thread->addListener->break->new->ThreadGroupReferenceImpl->break->new->ClassLoaderReferenceImpl->break->new->ClassObjectReferenceImpl->break->throw->new->IllegalArgumentException->new->SoftObjectReference->objectsByID->put->if->object->getClass->getName->printTrace->else->ref->incrementCount->return
VirtualMachineImpl#removeObjectMirror(ObjectReferenceImpl)::: virtual machine impl remove object mirror:::processQueue->ref->objectsByID->object->ref->remove->if->batchForDispose->else->throw->object->ref->new->InternalException
VirtualMachineImpl#removeObjectMirror(SoftObjectReference)::: virtual machine impl remove object mirror:::objectsByID->ref->key->remove
VirtualMachineImpl#objectMirror(long)::: virtual machine impl object mirror:::return->objectMirror
VirtualMachineImpl#stringMirror(long)::: virtual machine impl string mirror:::return->objectMirror
VirtualMachineImpl#arrayMirror(long)::: virtual machine impl array mirror:::return->objectMirror
VirtualMachineImpl#threadMirror(long)::: virtual machine impl thread mirror:::return->objectMirror
VirtualMachineImpl#threadGroupMirror(long)::: virtual machine impl thread group mirror:::return->objectMirror
VirtualMachineImpl#classLoaderMirror(long)::: virtual machine impl class loader mirror:::return->objectMirror
VirtualMachineImpl#classObjectMirror(long)::: virtual machine impl class object mirror:::return->objectMirror
VirtualMachineImpl#moduleMirror(long)::: virtual machine impl module mirror:::return->getModule
VirtualMachineImpl#getClasspath()::: virtual machine impl get classpath:::if->try->process->catch->throw->exc->toJDIException->finally->return
VirtualMachineImpl#classPath()::: virtual machine impl class path:::return->Arrays->getClasspath->asList
VirtualMachineImpl#bootClassPath()::: virtual machine impl boot class path:::return->Collections->emptyList
VirtualMachineImpl#baseDirectory()::: virtual machine impl base directory:::return->getClasspath
VirtualMachineImpl#setDefaultStratum(String)::: virtual machine impl set default stratum:::if->try->process->catch->throw->exc->toJDIException->finally
VirtualMachineImpl#getDefaultStratum()::: virtual machine impl get default stratum:::return
VirtualMachineImpl#threadGroupForJDI()::: virtual machine impl thread group for i:::return
VirtualMachineImpl.SoftObjectReference#count()::: soft object reference count:::return
VirtualMachineImpl.SoftObjectReference#incrementCount()::: soft object reference increment count:::
VirtualMachineImpl.SoftObjectReference#key()::: soft object reference key:::return
VirtualMachineImpl.SoftObjectReference#object()::: soft object reference object:::return->get
VirtualMachineManagerImpl#virtualMachineManager()::: virtual machine manager impl virtual machine manager:::sm->System->getSecurityManager->if->vmmPermission->new->JDIPermission->sm->checkPermission->synchronized->if->new->VirtualMachineManagerImpl->return
VirtualMachineManagerImpl#defaultConnector()::: virtual machine manager impl default connector:::if->throw->new->Error->return
VirtualMachineManagerImpl#setDefaultConnector(LaunchingConnector)::: virtual machine manager impl set default connector:::
VirtualMachineManagerImpl#launchingConnectors()::: virtual machine manager impl launching connectors:::launchingConnectors->connectors->size->new->ArrayList<>->foreach->if->launchingConnectors->add->return->Collections->unmodifiableList
VirtualMachineManagerImpl#attachingConnectors()::: virtual machine manager impl attaching connectors:::attachingConnectors->connectors->size->new->ArrayList<>->foreach->if->attachingConnectors->add->return->Collections->unmodifiableList
VirtualMachineManagerImpl#listeningConnectors()::: virtual machine manager impl listening connectors:::listeningConnectors->connectors->size->new->ArrayList<>->foreach->if->listeningConnectors->add->return->Collections->unmodifiableList
VirtualMachineManagerImpl#allConnectors()::: virtual machine manager impl all connectors:::return->Collections->unmodifiableList
VirtualMachineManagerImpl#connectedVirtualMachines()::: virtual machine manager impl connected virtual machines:::return->Collections->unmodifiableList
VirtualMachineManagerImpl#addConnector(Connector)::: virtual machine manager impl add connector:::connectors->add
VirtualMachineManagerImpl#removeConnector(Connector)::: virtual machine manager impl remove connector:::connectors->remove
VirtualMachineManagerImpl#createVirtualMachine(Connection, Process)::: virtual machine manager impl create virtual machine:::if->connection->isOpen->throw->new->IllegalStateException->vm->try->new->VirtualMachineImpl->catch->throw->e->getMessage->new->IOException->finally->targets->add->return
VirtualMachineManagerImpl#createVirtualMachine(Connection)::: virtual machine manager impl create virtual machine:::return->createVirtualMachine
VirtualMachineManagerImpl#addVirtualMachine(VirtualMachine)::: virtual machine manager impl add virtual machine:::targets->add
VirtualMachineManagerImpl#disposeVirtualMachine(VirtualMachine)::: virtual machine manager impl dispose virtual machine:::targets->remove
VirtualMachineManagerImpl#majorInterfaceVersion()::: virtual machine manager impl major interface version:::return
VirtualMachineManagerImpl#minorInterfaceVersion()::: virtual machine manager impl minor interface version:::return
VirtualMachineManagerImpl#mainGroupForJDI()::: virtual machine manager impl main group for i:::return
VirtualMachineManagerImpl#getString(String)::: virtual machine manager impl get string:::if->ResourceBundle->getBundle->return->messages->getString
VirtualMachineManagerService#setDefaultConnector(LaunchingConnector):::Replaces the default connector.:::
VirtualMachineManagerService#addConnector(Connector):::Adds a connector to the list of known connectors.:::
VirtualMachineManagerService#removeConnector(Connector):::Removes a connector from the list of known connectors.:::
VMAction#vm()::: action vm:::return->getSource
VMAction#id()::: action id:::return
VMAction#resumingThread()::: action resuming thread:::return
VMListener#vmSuspended(VMAction)::: listener vm suspended:::
VMListener#vmNotSuspended(VMAction)::: listener vm not suspended:::
VMState#disableCache()::: state disable cache:::synchronized
VMState#enableCache()::: state enable cache:::synchronized
VMState#getCache()::: state get cache:::synchronized->if->new->Cache->return
VMState#isSuspended():::Is the VM currently suspended, for the purpose of caching? Must be called synchronized on vm.state():::return
VMState#notifyCommandComplete(int)::: state notify command complete:::
VMState#freeze()::: state freeze:::if->new->VMAction->processVMAction->enableCache
VMState#thawCommand(CommandSender)::: state thaw command:::stream->sender->send->stream->id->thaw->return
VMState#thaw():::All threads are resuming:::thaw
VMState#thaw(ThreadReference):::Tell listeners to invalidate suspend-sensitive caches:::if->if->vm->printTrace->disableCache->new->VMAction->processVMAction
VMState#processVMAction(VMAction)::: state process action:::if->iter->listeners->iterator->while->iter->hasNext->ref->iter->next->listener->ref->get->if->keep->switch->action->id->listener->vmSuspended->break->listener->vmNotSuspended->break->if->iter->remove->else->iter->remove
VMState#addListener(VMListener)::: state add listener:::listeners->new->WeakReference<VMListener>->add
VMState#hasListener(VMListener)::: state has listener:::return->listeners->contains
VMState#removeListener(VMListener)::: state remove listener:::iter->listeners->iterator->while->iter->hasNext->ref->iter->next->if->listener->ref->get->equals->iter->remove->break
VMState#allThreads()::: state all threads:::threads->try->local->getCache->if->if->Arrays->process->asList->if->if->vm->threads->size->printTrace->catch->throw->exc->toJDIException->finally->return
VMState#topLevelThreadGroups()::: state top level thread groups:::groups->try->local->getCache->if->if->Arrays->process->asList->if->if->vm->groups->size->printTrace->catch->throw->exc->toJDIException->finally->return
VoidTypeImpl#signature()::: void type impl signature:::return->String->valueOf
VoidTypeImpl#toString()::: void type impl to string:::return->name
VoidValueImpl#equals(Object)::: void value impl equals:::return->super->equals
VoidValueImpl#hashCode()::: void value impl hash code:::return
VoidValueImpl#type()::: void value impl type:::return->vm->theVoidType
VoidValueImpl#prepareForAssignmentTo(ValueContainer)::: void value impl prepare for assignment to:::if->destination->typeName->equals->return->throw->new->InvalidTypeException
VoidValueImpl#toString()::: void value impl to string:::return
VoidValueImpl#typeValueKey()::: void value impl type value key:::return

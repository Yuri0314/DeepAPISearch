ArrayReferenceImpl#length():::Return array length:::if->try->process->catch->throw->exc->toJDIException->finally->return
ConnectorImpl.BooleanArgumentImpl#setValue(boolean):::Sets the value of the argument.:::stringValueOf->setValue
ConnectorImpl.BooleanArgumentImpl#isValid(String):::Performs basic sanity check of argument.:::return->value->equals->value->equals
ConnectorImpl.BooleanArgumentImpl#stringValueOf(boolean):::Return the string representation of the value parameter:::return
ConnectorImpl.BooleanArgumentImpl#booleanValue():::Return the value of the argument as a boolean:::return->value->equals
ConnectorImpl.IntegerArgumentImpl#setValue(int):::Sets the value of the argument:::stringValueOf->setValue
ConnectorImpl.IntegerArgumentImpl#isValid(String):::Performs basic sanity check of argument.:::if->return->try->return->Integer->decode->intValue->isValid->catch->return->finally
ConnectorImpl.IntegerArgumentImpl#isValid(int):::Performs basic sanity check of argument.:::return
ConnectorImpl.IntegerArgumentImpl#stringValueOf(int):::Return the string representation of the value parameter:::return
ConnectorImpl.IntegerArgumentImpl#intValue():::Return the value of the argument as a int:::if->value->return->try->return->Integer->value->decode->intValue->catch->return->finally
ConnectorImpl.IntegerArgumentImpl#max():::The upper bound for the value.:::return
ConnectorImpl.IntegerArgumentImpl#min():::The lower bound for the value.:::return
ConnectorImpl.StringArgumentImpl#isValid(String):::Performs basic sanity check of argument.:::return
ConnectorImpl.SelectedArgumentImpl#choices():::Return the possible values for the argument:::return
ConnectorImpl.SelectedArgumentImpl#isValid(String):::Performs basic sanity check of argument.:::return->choices->contains
EventQueueImpl#remove(long):::Filter out events not for user's eyes:::if->throw->new->IllegalArgumentException->eventSet->while->fullEventSet->removeUnfiltered->if->break->fullEventSet->userFilter->if->eventSet->isEmpty->break->if->eventSet->suspendPolicy->vm->notifySuspend->return
EventSetImpl.LocatableEventImpl#method():::For MethodEntry and MethodExit:::return->location->method
EventSetImpl#userFilter():::Filter out internal events:::return
EventSetImpl#internalFilter():::Filter out user events.:::return
GenericAttachingConnector#attach(String, Map):::Attach to a target VM using the specified address and Connector arguments.:::ts->argument->value->timeout->if->ts->length->Integer->decode->intValue->connection->transportService->attach->return->Bootstrap->virtualMachineManager->createVirtualMachine
GenericAttachingConnector#attach(Map):::Attach to a target VM using the specified arguments - the address of the target VM is specified by the address connector argument.:::address->argument->value->return->attach
GenericListeningConnector#create(TransportService):::Create an instance of this Connector:::return->new->GenericListeningConnector
InvokableTypeImpl#invokeMethod(ThreadReference, Method, List, int):::Method invocation support:::validateMirror->validateMirror->validateMirrorsOrNulls->method->thread->validateMethodInvocation->arguments->method->validateAndPrepareArgumentsForInvoke->args->arguments->new->ValueImplArr->toArray->ret->try->stream->sendInvokeCommand->waitForReply->catch->if->exc->errorCode->throw->new->IncompatibleThreadStateException->else->throw->exc->toJDIException->finally->if->vm->notifySuspend->if->ret->getException->throw->ret->getException->new->InvocationException->else->return->ret->getResult
InvokableTypeImpl#getAllInterfaces():::Returns all the implemented interfaces recursively:::all->new->ArrayList<>->addInterfaces->return
InvokableTypeImpl#allMethods():::Shared implementation of ClassType#allMethods() and InterfaceType#allMethods():::list->methods->new->ArrayList<>->clazz->superclass->while->list->clazz->methods->addAll->clazz->superclass->foreach->getAllInterfaces->list->interfaze->methods->addAll->return
InvokableTypeImpl#getInvokeMethodSender(ThreadReferenceImpl, MethodImpl, ValueImpl[], int):::A subclass will provide specific CommandSender:::
InvokableTypeImpl#waitForReply(PacketStream):::Waits for the reply to the last sent command:::
InvokableTypeImpl#superclass():::Get the ReferenceType superclass:::
InvokableTypeImpl#interfaces():::Get the implemented/extended interfaces:::
InvokableTypeImpl#canInvoke(Method):::Checks the provided method whether it can be invoked:::
MirrorImpl#validateMirror(Mirror):::Throw NullPointerException on null mirror:::if->vm->mirror->virtualMachine->equals->throw->mirror->toString->new->VMMismatchException
MirrorImpl#validateMirrorOrNull(Mirror):::Allow null mirror:::if->vm->mirror->virtualMachine->equals->throw->mirror->toString->new->VMMismatchException
MirrorImpl#validateMirrors(Collection):::Throw NullPointerException on null mirrors:::foreach->validateMirror
MirrorImpl#validateMirrorsOrNulls(Collection):::Allow null mirrors:::foreach->validateMirrorOrNull
Packet#toByteArray():::Return byte representation of the packet:::len->b->new->byteArr->if->else->if->System->arraycopy->return
Packet#fromByteArray(byte[]):::Create a packet from its byte array representation:::if->throw->new->IOException->b0->b1->b2->b3->len->if->throw->new->IOException->b4->b5->b6->b7->p->new->Packet->if->else->b9->b10->new->byteArr->System->arraycopy->return
PacketStream#readByte():::Read byte represented as one bytes.:::ret->return
PacketStream#readBoolean():::Read boolean represented as one byte.:::ret->readByte->return
PacketStream#readChar():::Read char represented as two bytes.:::b1->b2->return
PacketStream#readShort():::Read short represented as two bytes.:::b1->b2->return
PacketStream#readInt():::Read int represented as four bytes.:::b1->b2->b3->b4->return
PacketStream#readLong():::Read long represented as eight bytes.:::b1->b2->b3->b4->b5->b6->b7->b8->return
PacketStream#readFloat():::Read float represented as four bytes.:::return->Float->readInt->intBitsToFloat
PacketStream#readDouble():::Read double represented as eight bytes.:::return->Double->readLong->longBitsToDouble
PacketStream#readString():::Read string represented as four byte length followed by characters of the string.:::ret->len->readInt->try->new->String->catch->println->finally->return
PacketStream#readObjectRef():::Read object represented as vm specific byte sequence.:::return->readID
PacketStream#readMethodRef():::Read method reference represented as vm specific byte sequence.:::return->readID
PacketStream#readModuleRef():::Read module reference represented as vm specific byte sequence.:::return->readID
PacketStream#readFieldRef():::Read field reference represented as vm specific byte sequence.:::return->readID
PacketStream#readField():::Read field represented as vm specific byte sequence.:::refType->readReferenceType->fieldRef->readFieldRef->return->refType->getFieldMirror
PacketStream#readFrameRef():::Read frame represented as vm specific byte sequence.:::return->readID
PacketStream#readValue():::Read a value, first byte describes type of value to read.:::typeKey->readByte->return->readUntaggedValue
PacketStream#readLocation():::Read location represented as vm specific byte sequence.:::tag->readByte->classRef->readObjectRef->methodRef->readMethodRef->codeIndex->readLong->if->refType->vm->referenceType->return->new->LocationImpl->else->return
ProcessAttachingConnector#attach(Map):::Attach to a target VM using the specified address and Connector arguments.:::pid->argument->value->t->argument->value->timeout->if->t->length->Integer->decode->intValue->address->vm->try->attach->props->vm->getAgentProperties->props->getProperty->catch->throw->x->getMessage->new->IOException->finally->if->vm->detach->if->throw->new->IOException->pos->address->indexOf->if->throw->new->IOException->lib->address->substring->address->address->length->substring->ts->if->lib->equals->new->SocketTransportService->else->if->lib->equals->try->c->Class->forName->tmp->c->newInstance->catch->finally->if->throw->new->IOException->connection->ts->attach->return->Bootstrap->virtualMachineManager->createVirtualMachine
ReferenceTypeImpl#getValues(List):::Returns a map of field values:::validateMirrors->size->theFields->size->queryFields->new->JDWP.ReferenceType.GetValues.FieldArr->for->i->map->new->HashMap<Field,Value>->values->try->process->catch->throw->exc->toJDIException->finally->if->throw->new->InternalException->for->i->return
ReferenceTypeImpl#defaultStratum():::Always returns non-null stratumID:::sdei->sourceDebugExtensionInfo->if->sdei->isValid->return->else->return
SDE.Stratum#sourceNames(ReferenceTypeImpl):::Return all the sourceNames for this stratum:::i->fileIndexStart->fileIndexEnd->result->new->ArrayList<>->for->return
SDE.Stratum#sourcePaths(ReferenceTypeImpl):::Return all the sourcePaths for this stratum:::i->fileIndexStart->fileIndexEnd->result->new->ArrayList<>->for->return
SDE.LineStratum#getSourceInfo():::Fetch the source name and source path for this line, converting or constructing the source path if needed.:::if->return->fti->stiFileTableIndex->if->throw->new->InternalError->ftr->ftr->getSourcePath
SDE#lineLine():::Parse line translation info:::lineCount->lineIncrement->njplsStart->jplsStart->readNumber->if->sdePeek->sdeAdvance->readNumber->if->sdePeek->sdeAdvance->readNumber->if->sdeRead->syntax->readNumber->if->sdePeek->sdeAdvance->readNumber->ignoreLine->storeLine
SDE#storeStratum(String):::Until the next stratum section, everything after this is in stratumId - so, store the current indicies.:::if->if->assureStratumTableSize
SDE#stratumSection():::The beginning of a stratum's info:::readLine->storeStratum
SDE#ignoreSection():::Ignore a section we don't know about.:::ignoreLine->while->sdePeek->ignoreLine
SDE#createJavaStratum():::A base "Java" stratum is always available, though it is not in the SourceDebugExtension:::storeStratum->storeFile->storeLine->storeStratum
SDE#decode():::Decode a SourceDebugExtension which is in SourceMap format:::if->sourceDebugExtension->length->sdeRead->sdeRead->sdeRead->sdeRead->return->ignoreLine->readLine->readLine->createJavaStratum->while->if->sdeRead->syntax->switch->sdeRead->stratumSection->break->fileSection->break->lineSection->break->storeStratum->return->ignoreSection
SharedMemoryTransportService#description():::Return localized description of this transport service:::synchronized->if->ResourceBundle->getBundle->return->messages->getString
SocketTransportService#handshake(Socket, long):::Handshake with the debuggee:::s->setSoTimeout->hello->getBytes->s->getOutputStream->write->b->new->byteArr->received->while->n->try->s->getInputStream->read->catch->throw->new->IOException->finally->if->s->close->throw->new->IOException->for->i->s->setSoTimeout
SocketTransportService#name():::The name of this transport service:::return
SocketTransportService#description():::Return localized description of this transport service:::synchronized->if->ResourceBundle->getBundle->return->messages->getString
SocketTransportService#capabilities():::Return the capabilities of this transport service:::return->new->TransportService.Capabilities
SocketTransportService#attach(String, long, long):::Attach to the specified address with optional attach and handshake timeout.:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->splitIndex->address->indexOf->host->portStr->if->else->address->substring->address->substring->if->host->equals->InetAddress->getLocalHost->getHostName->port->try->Integer->decode->intValue->catch->throw->new->IllegalArgumentException->finally->sa->new->InetSocketAddress->s->new->Socket->try->s->connect->catch->try->s->close->catch->finally->throw->new->TransportTimeoutException->finally->try->handshake->catch->try->s->close->catch->finally->throw->finally->return->new->SocketConnection
SocketTransportService#startListening(String):::Listen on the specified address:::if->address->length->splitIndex->address->indexOf->localaddr->if->address->substring->address->substring->port->try->Integer->decode->intValue->catch->throw->new->IllegalArgumentException->finally->return->startListening
SocketTransportService#startListening():::Listen on the default address:::return->startListening
SocketTransportService#stopListening(ListenKey):::Stop the listener:::if->throw->new->IllegalArgumentException->synchronized->ss->socket->if->ss->isClosed->throw->new->IllegalArgumentException->ss->close
SocketTransportService#accept(ListenKey, long, long):::Accept a connection from a debuggee and handshake with it.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->ss->synchronized->socket->if->ss->isClosed->throw->new->IllegalArgumentException->ss->setSoTimeout->s->try->ss->accept->catch->throw->new->TransportTimeoutException->finally->handshake->return->new->SocketConnection
StackFrameImpl#location():::Return the frame location:::validateStackFrame->return
StackFrameImpl#thread():::Return the thread holding the frame:::validateStackFrame->return
StackFrameImpl#visibleVariables():::Return the list of visible variable in the frame:::validateStackFrame->createVisibleVariables->mapAsList->visibleVariables->values->new->ArrayList<>->Collections->sort->return
StackFrameImpl#visibleVariableByName(String):::Return a particular variable in the frame:::validateStackFrame->createVisibleVariables->return->visibleVariables->get
SunSDK#home():::Returns the home directory of a Java 2 SDK if the current JRE is embedded in one.:::jreHome->System->getProperty->new->File->jreParent->jreHome->getParent->new->File->jdwpLibName->System->mapLibraryName->jdwpLib->new->File->return->jdwpLib->exists->jreParent->getAbsolutePath
ThreadReferenceImpl#name():::Note that we only cache the name string while the entire VM is suspended because the name can change via Thread.setName arbitrarily while this thread is running.:::name->try->local->getCache->if->if->process->if->catch->throw->exc->toJDIException->finally->return
VirtualMachineManagerService#setDefaultConnector(LaunchingConnector):::Replaces the default connector.:::
VirtualMachineManagerService#addConnector(Connector):::Adds a connector to the list of known connectors.:::
VirtualMachineManagerService#removeConnector(Connector):::Removes a connector from the list of known connectors.:::
VMState#isSuspended():::Is the VM currently suspended, for the purpose of caching? Must be called synchronized on vm.state():::return
VMState#thaw():::All threads are resuming:::thaw
VMState#thaw(ThreadReference):::Tell listeners to invalidate suspend-sensitive caches:::if->if->vm->printTrace->disableCache->new->VMAction->processVMAction

org.graalvm.compiler.graph.Graph_OptionDescriptors#get(String)->OptionDescriptor::: graph_ option descriptors get
org.graalvm.compiler.graph.Graph_OptionDescriptors#iterator()->Iterator::: graph_ option descriptors iterator
org.graalvm.compiler.graph.CachedGraph#fromReadonlyCopy(G)->CachedGraph::: cached graph from readonly copy
org.graalvm.compiler.graph.CachedGraph#fromMutableCopy(G)->CachedGraph::: cached graph from mutable copy
org.graalvm.compiler.graph.CachedGraph#getReadonlyCopy()->G::: cached graph get readonly copy
org.graalvm.compiler.graph.CachedGraph#hasMutableCopy()->boolean::: cached graph has mutable copy
org.graalvm.compiler.graph.CachedGraph#getMutableCopy(Consumer>)->G::: cached graph get mutable copy
org.graalvm.compiler.graph.Edges#translateInto(Edges, ArrayList)->void::: edges translate into
org.graalvm.compiler.graph.Edges#getNodeUnsafe(Node, long)->Node::: edges get node unsafe
org.graalvm.compiler.graph.Edges#getNodeListUnsafe(Node, long)->NodeList::: edges get node list unsafe
org.graalvm.compiler.graph.Edges#putNodeUnsafe(Node, long, Node)->void::: edges put node unsafe
org.graalvm.compiler.graph.Edges#putNodeListUnsafe(Node, long, NodeList)->void::: edges put node list unsafe
org.graalvm.compiler.graph.Edges#getDirectCount()->int:::Get the number of direct edges represented by this object
org.graalvm.compiler.graph.Edges#getNode(Node, long[], int)->Node:::Gets the Node at the end point of a #getDirectCount() direct edge.
org.graalvm.compiler.graph.Edges#getNodeList(Node, long[], int)->NodeList:::Gets the NodeList at the end point of a #getDirectCount() direct edge.
org.graalvm.compiler.graph.Edges#clear(Node)->void:::Clear edges in a given node
org.graalvm.compiler.graph.Edges#initializeLists(Node, Node)->void:::Initializes the list edges in a given node based on the size of the list edges in a prototype node.
org.graalvm.compiler.graph.Edges#copy(Node, Node)->void:::Copies edges from fromNode to toNode
org.graalvm.compiler.graph.Edges#set(Object, int, Object)->void::: edges set
org.graalvm.compiler.graph.Edges#initializeNode(Node, int, Node)->void:::Sets the value of a given edge without notifying the new and old nodes on the other end of the edge of the change.
org.graalvm.compiler.graph.Edges#initializeList(Node, int, NodeList)->void::: edges initialize list
org.graalvm.compiler.graph.Edges#setNode(Node, int, Node)->void:::Sets the value of a given edge and notifies the new and old nodes on the other end of the edge of the change.
org.graalvm.compiler.graph.Edges#update(Node, Node, Node)->void::: edges update
org.graalvm.compiler.graph.Edges#contains(Node, Node)->boolean::: edges contains
org.graalvm.compiler.graph.Edges#getPositionsIterable(Node)->Iterable::: edges get positions iterable
org.graalvm.compiler.graph.Edges#type()->Type::: edges type
org.graalvm.compiler.graph.GraalGraphError#addContext(Graph)->GraalGraphError:::Adds a graph to the context of this VerificationError
org.graalvm.compiler.graph.GraalGraphError#addContext(Node)->GraalGraphError:::Adds a node to the context of this VerificationError
org.graalvm.compiler.graph.GraalGraphError#transformAndAddContext(GraalError, Graph)->GraalGraphError:::Transform a GraalError into a GraalGraphInternalError and add a graph to the context.
org.graalvm.compiler.graph.GraalGraphError#transformAndAddContext(GraalError, Node)->GraalGraphError:::Transform a GraalError into a GraalGraphInternalError and add a node to the context.
org.graalvm.compiler.graph.GraalGraphError#node()->Node::: graal graph error node
org.graalvm.compiler.graph.GraalGraphError#graph()->Graph::: graal graph error graph
org.graalvm.compiler.graph.Graph#currentNodeSourcePosition()->NodeSourcePosition::: graph current node source position
org.graalvm.compiler.graph.Graph#withNodeSourcePosition(Node)->DebugCloseable:::Opens a scope in which the source information from node is copied into nodes created within the scope
org.graalvm.compiler.graph.Graph#withNodeSourcePosition(NodeSourcePosition)->DebugCloseable:::Opens a scope in which sourcePosition is copied into nodes created within the scope
org.graalvm.compiler.graph.Graph#withoutNodeSourcePosition()->DebugCloseable:::Opens a scope in which newly created nodes do not get any source information added.
org.graalvm.compiler.graph.Graph#trackNodeSourcePosition()->boolean::: graph track node source position
org.graalvm.compiler.graph.Graph#setTrackNodeSourcePosition()->void::: graph set track node source position
org.graalvm.compiler.graph.Graph#trackNodeSourcePositionDefault(OptionValues, DebugContext)->boolean::: graph track node source position default
org.graalvm.compiler.graph.Graph#isModificationCountsEnabled()->boolean:::We only want the expensive modification count tracking when assertions are enabled for the Graph class.
org.graalvm.compiler.graph.Graph#extractOriginalNodeId(Node)->int::: graph extract original node id
org.graalvm.compiler.graph.Graph#modCount(Node)->int::: graph mod count
org.graalvm.compiler.graph.Graph#incModCount(Node)->void::: graph inc mod count
org.graalvm.compiler.graph.Graph#usageModCount(Node)->int::: graph usage mod count
org.graalvm.compiler.graph.Graph#incUsageModCount(Node)->void::: graph inc usage mod count
org.graalvm.compiler.graph.Graph#copy(DebugContext)->Graph:::Creates a copy of this graph.
org.graalvm.compiler.graph.Graph#copy(Consumer>, DebugContext)->Graph:::Creates a copy of this graph.
org.graalvm.compiler.graph.Graph#copy(String, DebugContext)->Graph:::Creates a copy of this graph.
org.graalvm.compiler.graph.Graph#copy(String, Consumer>, DebugContext)->Graph:::Creates a copy of this graph.
org.graalvm.compiler.graph.Graph#getOptions()->OptionValues::: graph get options
org.graalvm.compiler.graph.Graph#getDebug()->DebugContext::: graph get debug
org.graalvm.compiler.graph.Graph#resetDebug(DebugContext)->void:::Resets the DebugContext for this graph to a new value
org.graalvm.compiler.graph.Graph#toString()->String::: graph to string
org.graalvm.compiler.graph.Graph#getNodeCount()->int:::Gets the number of live nodes in this graph
org.graalvm.compiler.graph.Graph#getCompressions()->int:::Gets the number of times this graph has been #maybeCompress() compressed
org.graalvm.compiler.graph.Graph#getNodesDeletedSinceLastCompression()->int:::Gets the number of nodes which have been deleted from this graph since it was last #maybeCompress() compressed.
org.graalvm.compiler.graph.Graph#getTotalNodesDeleted()->int:::Gets the total number of nodes which have been deleted from this graph.
org.graalvm.compiler.graph.Graph#add(T)->T:::Adds a new node to the graph.
org.graalvm.compiler.graph.Graph#addWithoutUnique(T)->T::: graph add without unique
org.graalvm.compiler.graph.Graph#addOrUnique(T)->T::: graph add or unique
org.graalvm.compiler.graph.Graph#maybeAddOrUnique(T)->T::: graph maybe add or unique
org.graalvm.compiler.graph.Graph#addOrUniqueWithInputs(T)->T::: graph add or unique with inputs
org.graalvm.compiler.graph.Graph#addWithoutUniqueWithInputs(T)->T::: graph add without unique with inputs
org.graalvm.compiler.graph.Graph.NodeEventListener#event(NodeEvent, Node)->void:::A method called when a change event occurs
org.graalvm.compiler.graph.Graph.NodeEventListener#changed(NodeEvent, Node)->void:::Notifies this listener about any change event in the graph.
org.graalvm.compiler.graph.Graph.NodeEventListener#inputChanged(Node)->void:::Notifies this listener about a change in a node's inputs.
org.graalvm.compiler.graph.Graph.NodeEventListener#usagesDroppedToZero(Node)->void:::Notifies this listener of a node becoming unused.
org.graalvm.compiler.graph.Graph.NodeEventListener#nodeAdded(Node)->void:::Notifies this listener of an added node.
org.graalvm.compiler.graph.Graph.NodeEventListener#nodeRemoved(Node)->void:::Notifies this listener of a removed node.
org.graalvm.compiler.graph.Graph.NodeEventScope#close()->void::: node event scope close
org.graalvm.compiler.graph.Graph#trackNodeEvents(NodeEventListener)->NodeEventScope:::Registers a given NodeEventListener with this graph
org.graalvm.compiler.graph.Graph#unique(T)->T:::Looks for a node similar to node and returns it if found
org.graalvm.compiler.graph.Graph#uniqueHelper(T)->T::: graph unique helper
org.graalvm.compiler.graph.Graph#removeNodeFromCache(Node)->void::: graph remove node from cache
org.graalvm.compiler.graph.Graph#putNodeIntoCache(Node)->void::: graph put node into cache
org.graalvm.compiler.graph.Graph#findNodeInCache(Node)->Node::: graph find node in cache
org.graalvm.compiler.graph.Graph#findDuplicate(T)->T:::Returns a possible duplicate for the given node in the graph or null if no such duplicate exists.
org.graalvm.compiler.graph.Graph#isNew(Mark, Node)->boolean::: graph is new
org.graalvm.compiler.graph.Graph.Mark#equals(Object)->boolean::: mark equals
org.graalvm.compiler.graph.Graph.Mark#hashCode()->int::: mark hash code
org.graalvm.compiler.graph.Graph.Mark#isStart()->boolean:::Determines if this mark is positioned at the first live node in the graph.
org.graalvm.compiler.graph.Graph.Mark#getValue()->int:::Gets the Graph#getNodeCount() live node count of the associated graph when this object was created.
org.graalvm.compiler.graph.Graph.Mark#isCurrent()->boolean:::Determines if this mark still represents the Graph#getNodeCount() live node count of the graph.
org.graalvm.compiler.graph.Graph#getMark()->Mark:::Gets a mark that can be used with #getNewNodes.
org.graalvm.compiler.graph.Graph#getNewNodes(Mark)->NodeIterable:::Returns an Iterable providing all nodes added since the last Graph#getMark() mark.
org.graalvm.compiler.graph.Graph#getNodes()->NodeIterable:::Returns an Iterable providing all the live nodes.
org.graalvm.compiler.graph.Graph#maybeCompress()->boolean:::If the Options#GraphCompressionThreshold compression threshold is met, the list of nodes is compressed such that all non-null entries precede all null entries while preserving the ordering between the nodes within the list.
org.graalvm.compiler.graph.Graph#getNodes(NodeClass)->NodeIterable:::Returns an Iterable providing all the live nodes whose type is compatible with type.
org.graalvm.compiler.graph.Graph#hasNode(NodeClass)->boolean:::Returns whether the graph contains at least one node of the given type.
org.graalvm.compiler.graph.Graph#getIterableNodeStart(int)->Node::: graph get iterable node start
org.graalvm.compiler.graph.Graph#getIterableNodeNext(Node)->Node::: graph get iterable node next
org.graalvm.compiler.graph.Graph#createNodeBitMap()->NodeBitMap::: graph create node bit map
org.graalvm.compiler.graph.Graph#createNodeMap()->NodeMap::: graph create node map
org.graalvm.compiler.graph.Graph#createNodeFlood()->NodeFlood::: graph create node flood
org.graalvm.compiler.graph.Graph#createNodeWorkList()->NodeWorkList::: graph create node work list
org.graalvm.compiler.graph.Graph#createIterativeNodeWorkList(boolean, int)->NodeWorkList::: graph create iterative node work list
org.graalvm.compiler.graph.Graph#register(Node)->void::: graph register
org.graalvm.compiler.graph.Graph#afterRegister(Node)->void::: graph after register
org.graalvm.compiler.graph.Graph#unregister(Node)->void::: graph unregister
org.graalvm.compiler.graph.Graph#verify()->boolean::: graph verify
org.graalvm.compiler.graph.Graph#verifySourcePositions(boolean)->boolean::: graph verify source positions
org.graalvm.compiler.graph.Graph#getNode(int)->Node::: graph get node
org.graalvm.compiler.graph.Graph#nodeIdCount()->int:::Returns the number of node ids generated so far.
org.graalvm.compiler.graph.Graph#addDuplicates(Iterable, Graph, int, EconomicMap)->UnmodifiableEconomicMap:::Adds duplicates of the nodes in newNodes to this graph
org.graalvm.compiler.graph.Graph.DuplicationReplacement#replacement(Node)->Node::: duplication replacement replacement
org.graalvm.compiler.graph.Graph#addDuplicates(Iterable, Graph, int, DuplicationReplacement)->EconomicMap::: graph add duplicates
org.graalvm.compiler.graph.Graph#isFrozen()->boolean::: graph is frozen
org.graalvm.compiler.graph.Graph#freeze()->void::: graph freeze
org.graalvm.compiler.graph.Graph#temporaryFreeze()->void::: graph temporary freeze
org.graalvm.compiler.graph.Graph#unfreeze()->void::: graph unfreeze
org.graalvm.compiler.graph.GraphNodeIterator#hasNext()->boolean::: graph node iterator has next
org.graalvm.compiler.graph.GraphNodeIterator#next()->Node::: graph node iterator next
org.graalvm.compiler.graph.GraphNodeIterator#remove()->void::: graph node iterator remove
org.graalvm.compiler.graph.InlineCacheGuardPosition#getDispatchedType()->ResolvedJavaType::: inline cache guard position get dispatched type
org.graalvm.compiler.graph.InlineCacheGuardPosition#getTargetMethod()->ResolvedJavaMethod::: inline cache guard position get target method
org.graalvm.compiler.graph.InlineCacheGuardPosition#hashCode()->int::: inline cache guard position hash code
org.graalvm.compiler.graph.InlineCacheGuardPosition#equals(Object)->boolean::: inline cache guard position equals
org.graalvm.compiler.graph.InlineCacheGuardPosition#toString()->String::: inline cache guard position to string
org.graalvm.compiler.graph.InputEdges#translateInto(InputEdges, ArrayList)->void::: input edges translate into
org.graalvm.compiler.graph.InputEdges#getInputType(int)->InputType::: input edges get input type
org.graalvm.compiler.graph.InputEdges#isOptional(int)->boolean::: input edges is optional
org.graalvm.compiler.graph.InputEdges#update(Node, Node, Node)->void::: input edges update
org.graalvm.compiler.graph.Node.NodeStackTrace#getStrackTraceString()->String::: node stack trace get strack trace string
org.graalvm.compiler.graph.Node.NodeStackTrace#toString()->String::: node stack trace to string
org.graalvm.compiler.graph.Node#init(NodeClass)->void::: node init
org.graalvm.compiler.graph.Node#id()->int::: node id
org.graalvm.compiler.graph.Node#asNode()->Node::: node as node
org.graalvm.compiler.graph.Node#graph()->Graph:::Gets the graph context of this node.
org.graalvm.compiler.graph.Node#getOptions()->OptionValues:::Gets the option values associated with this node's graph.
org.graalvm.compiler.graph.Node#getDebug()->DebugContext:::Gets the debug context associated with this node's graph.
org.graalvm.compiler.graph.Node#inputs()->NodeIterable:::Returns an NodeIterable iterable which can be used to traverse all non-null input edges of this node.
org.graalvm.compiler.graph.Node#inputPositions()->Iterable:::Returns an Iterable iterable which can be used to traverse all non-null input edges of this node.
org.graalvm.compiler.graph.Node.EdgeVisitor#apply(Node, Node)->Node::: edge visitor apply
org.graalvm.compiler.graph.Node#applyInputs(EdgeVisitor)->void:::Applies the given visitor to all inputs of this node.
org.graalvm.compiler.graph.Node#applySuccessors(EdgeVisitor)->void:::Applies the given visitor to all successors of this node.
org.graalvm.compiler.graph.Node#successors()->NodeIterable:::Returns an NodeIterable iterable which can be used to traverse all non-null successor edges of this node.
org.graalvm.compiler.graph.Node#successorPositions()->Iterable:::Returns an Iterable iterable which can be used to traverse all successor edge positions of this node.
org.graalvm.compiler.graph.Node#getUsageCount()->int:::Gets the maximum number of usages this node has had at any point in time.
org.graalvm.compiler.graph.Node#usages()->NodeIterable:::Gets the list of nodes that use this node (i.e., as an input).
org.graalvm.compiler.graph.Node#hasNoUsages()->boolean:::Checks whether this node has no usages.
org.graalvm.compiler.graph.Node#hasUsages()->boolean:::Checks whether this node has usages.
org.graalvm.compiler.graph.Node#hasMoreThanOneUsage()->boolean:::Checks whether this node has more than one usages.
org.graalvm.compiler.graph.Node#hasExactlyOneUsage()->boolean:::Checks whether this node has exactly one usgae.
org.graalvm.compiler.graph.Node#addUsage(Node)->void:::Adds a given node to this node's #usages() usages.
org.graalvm.compiler.graph.Node#removeUsage(Node)->boolean:::Removes a given node from this node's #usages() usages.
org.graalvm.compiler.graph.Node#predecessor()->Node::: node predecessor
org.graalvm.compiler.graph.Node#modCount()->int::: node mod count
org.graalvm.compiler.graph.Node#incModCount()->void::: node inc mod count
org.graalvm.compiler.graph.Node#usageModCount()->int::: node usage mod count
org.graalvm.compiler.graph.Node#incUsageModCount()->void::: node inc usage mod count
org.graalvm.compiler.graph.Node#isDeleted()->boolean::: node is deleted
org.graalvm.compiler.graph.Node#isAlive()->boolean::: node is alive
org.graalvm.compiler.graph.Node#isUnregistered()->boolean::: node is unregistered
org.graalvm.compiler.graph.Node#updateUsages(Node, Node)->void:::Updates the usages sets of the given nodes after an input slot is changed from oldInput to newInput by removing this node from oldInput's usages and adds this node to newInput's usages.
org.graalvm.compiler.graph.Node#updateUsagesInterface(NodeInterface, NodeInterface)->void::: node update usages interface
org.graalvm.compiler.graph.Node#updatePredecessor(Node, Node)->void:::Updates the predecessor of the given nodes after a successor slot is changed from oldSuccessor to newSuccessor: removes this node from oldSuccessor's predecessors and adds this node to newSuccessor's predecessors.
org.graalvm.compiler.graph.Node#initialize(Graph)->void::: node initialize
org.graalvm.compiler.graph.Node#getNodeSourcePosition()->NodeSourcePosition::: node get node source position
org.graalvm.compiler.graph.Node#setNodeSourcePosition(NodeSourcePosition)->void:::Set the source position to sourcePosition
org.graalvm.compiler.graph.Node#clearNodeSourcePosition()->void::: node clear node source position
org.graalvm.compiler.graph.Node#getCreationPosition()->NodeCreationStackTrace::: node get creation position
org.graalvm.compiler.graph.Node#setCreationPosition(NodeCreationStackTrace)->void::: node set creation position
org.graalvm.compiler.graph.Node#getInsertionPosition()->NodeInsertionStackTrace::: node get insertion position
org.graalvm.compiler.graph.Node#setInsertionPosition(NodeInsertionStackTrace)->void::: node set insertion position
org.graalvm.compiler.graph.Node#updateNodeSourcePosition(Supplier)->void:::Update the source position only if it is null.
org.graalvm.compiler.graph.Node#withNodeSourcePosition()->DebugCloseable::: node with node source position
org.graalvm.compiler.graph.Node#getNodeClass()->NodeClass::: node get node class
org.graalvm.compiler.graph.Node#isAllowedUsageType(InputType)->boolean::: node is allowed usage type
org.graalvm.compiler.graph.Node#replaceAtUsages(Node)->void::: node replace at usages
org.graalvm.compiler.graph.Node#replaceAtUsages(Node, Predicate)->void::: node replace at usages
org.graalvm.compiler.graph.Node#replaceAtUsagesAndDelete(Node)->void::: node replace at usages and delete
org.graalvm.compiler.graph.Node#replaceAtUsagesAndDelete(Node, Predicate)->void::: node replace at usages and delete
org.graalvm.compiler.graph.Node#replaceAtUsages(Node, Predicate, Node)->void::: node replace at usages
org.graalvm.compiler.graph.Node#replaceAtAllUsages(Node, Node)->void::: node replace at all usages
org.graalvm.compiler.graph.Node#replaceAtMatchingUsages(Node, NodePredicate)->void::: node replace at matching usages
org.graalvm.compiler.graph.Node#replaceAtUsages(InputType, Node)->void::: node replace at usages
org.graalvm.compiler.graph.Node#maybeNotifyZeroUsages(Node)->void::: node maybe notify zero usages
org.graalvm.compiler.graph.Node#replaceAtPredecessor(Node)->void::: node replace at predecessor
org.graalvm.compiler.graph.Node#replaceAndDelete(Node)->void::: node replace and delete
org.graalvm.compiler.graph.Node#replaceFirstSuccessor(Node, Node)->void::: node replace first successor
org.graalvm.compiler.graph.Node#replaceFirstInput(Node, Node)->void::: node replace first input
org.graalvm.compiler.graph.Node#replaceFirstInput(Node, Node, InputType)->void::: node replace first input
org.graalvm.compiler.graph.Node#clearInputs()->void::: node clear inputs
org.graalvm.compiler.graph.Node#removeThisFromUsages(Node)->boolean::: node remove this from usages
org.graalvm.compiler.graph.Node#clearSuccessors()->void::: node clear successors
org.graalvm.compiler.graph.Node#safeDelete()->void:::Removes this node from its graph
org.graalvm.compiler.graph.Node#markDeleted()->void::: node mark deleted
org.graalvm.compiler.graph.Node#copyWithInputs()->Node::: node copy with inputs
org.graalvm.compiler.graph.Node#copyWithInputs(boolean)->Node::: node copy with inputs
org.graalvm.compiler.graph.Node#simplify(SimplifierTool)->void:::Must be overridden by subclasses that implement Simplifiable
org.graalvm.compiler.graph.Node#clone(Graph, EnumSet)->Node:::Makes a copy of this node in(to) a given graph.
org.graalvm.compiler.graph.Node#afterClone(Node)->void::: node after clone
org.graalvm.compiler.graph.Node#verifyInputs()->boolean::: node verify inputs
org.graalvm.compiler.graph.Node#verify()->boolean::: node verify
org.graalvm.compiler.graph.Node#verifySourcePosition()->boolean::: node verify source position
org.graalvm.compiler.graph.Node#verifyEdges()->boolean:::Perform expensive verification of inputs, usages, predecessors and successors.
org.graalvm.compiler.graph.Node#assertTrue(boolean, String, Object...)->boolean::: node assert true
org.graalvm.compiler.graph.Node#assertFalse(boolean, String, Object...)->boolean::: node assert false
org.graalvm.compiler.graph.Node#fail(String, Object...)->VerificationError::: node fail
org.graalvm.compiler.graph.Node#cfgPredecessors()->Iterable::: node cfg predecessors
org.graalvm.compiler.graph.Node#cfgSuccessors()->Iterable:::Returns an iterator that will provide all control-flow successors of this node
org.graalvm.compiler.graph.Node#hashCode()->int:::Nodes using their #id as the hash code
org.graalvm.compiler.graph.Node#getDebugProperties()->Map:::Provides a Map of properties of this node for use in debugging (e.g., to view in the ideal graph visualizer).
org.graalvm.compiler.graph.Node#getDebugProperties(Map)->Map:::Fills a Map with properties of this node for use in debugging (e.g., to view in the ideal graph visualizer)
org.graalvm.compiler.graph.Node#toString()->String:::This method is a shortcut for #toString(Verbosity) with Verbosity#Short.
org.graalvm.compiler.graph.Node#toString(Verbosity)->String:::Creates a String representation for this node with a given Verbosity.
org.graalvm.compiler.graph.Node#getId()->int::: node get id
org.graalvm.compiler.graph.Node#formatTo(Formatter, int, int, int)->void::: node format to
org.graalvm.compiler.graph.Node#valueEquals(Node)->boolean:::Determines if this node's NodeClass#getData() data fields are equal to the data fields of another node of the same type
org.graalvm.compiler.graph.Node#dataFlowEquals(Node)->boolean:::Determines if this node is equal to the other node while ignoring differences in Successor control-flow edges.
org.graalvm.compiler.graph.Node#pushInputs(NodeStack)->void::: node push inputs
org.graalvm.compiler.graph.Node#estimatedNodeSize()->NodeSize::: node estimated node size
org.graalvm.compiler.graph.Node#estimatedNodeCycles()->NodeCycles::: node estimated node cycles
org.graalvm.compiler.graph.NodeBitMap#getCounter()->int::: node bit map get counter
org.graalvm.compiler.graph.NodeBitMap#graph()->Graph::: node bit map graph
org.graalvm.compiler.graph.NodeBitMap#isNew(Node)->boolean::: node bit map is new
org.graalvm.compiler.graph.NodeBitMap#isMarked(Node)->boolean::: node bit map is marked
org.graalvm.compiler.graph.NodeBitMap#checkAndMarkInc(Node)->boolean::: node bit map check and mark inc
org.graalvm.compiler.graph.NodeBitMap#isMarked(int)->boolean::: node bit map is marked
org.graalvm.compiler.graph.NodeBitMap#isMarkedAndGrow(Node)->boolean::: node bit map is marked and grow
org.graalvm.compiler.graph.NodeBitMap#mark(Node)->void::: node bit map mark
org.graalvm.compiler.graph.NodeBitMap#markAndGrow(Node)->void::: node bit map mark and grow
org.graalvm.compiler.graph.NodeBitMap#clear(Node)->void::: node bit map clear
org.graalvm.compiler.graph.NodeBitMap#clearAndGrow(Node)->void::: node bit map clear and grow
org.graalvm.compiler.graph.NodeBitMap#clearAll()->void::: node bit map clear all
org.graalvm.compiler.graph.NodeBitMap#intersect(NodeBitMap)->void::: node bit map intersect
org.graalvm.compiler.graph.NodeBitMap#subtract(NodeBitMap)->void::: node bit map subtract
org.graalvm.compiler.graph.NodeBitMap#union(NodeBitMap)->void::: node bit map union
org.graalvm.compiler.graph.NodeBitMap#invert()->void::: node bit map invert
org.graalvm.compiler.graph.NodeBitMap#grow()->void::: node bit map grow
org.graalvm.compiler.graph.NodeBitMap#markAll(Iterable)->void::: node bit map mark all
org.graalvm.compiler.graph.NodeBitMap#nextMarkedNode(int)->Node::: node bit map next marked node
org.graalvm.compiler.graph.NodeBitMap#iterator()->Iterator::: node bit map iterator
org.graalvm.compiler.graph.NodeBitMap#copy()->NodeBitMap::: node bit map copy
org.graalvm.compiler.graph.NodeBitMap#count()->int::: node bit map count
org.graalvm.compiler.graph.NodeBitMap#contains(Node)->boolean::: node bit map contains
org.graalvm.compiler.graph.NodeBitMap#toString()->String::: node bit map to string
org.graalvm.compiler.graph.NodeClass#create(Class)->NodeClass:::Gets the NodeClass associated with a given Class.
org.graalvm.compiler.graph.NodeClass#get(Class)->NodeClass::: node class get
org.graalvm.compiler.graph.NodeClass#cycles()->NodeCycles::: node class cycles
org.graalvm.compiler.graph.NodeClass#size()->NodeSize::: node class size
org.graalvm.compiler.graph.NodeClass#computeIterationMask(Type, int, long[])->long::: node class compute iteration mask
org.graalvm.compiler.graph.NodeClass#shortName()->String::: node class short name
org.graalvm.compiler.graph.NodeClass#getAllFields()->Fields[]::: node class get all fields
org.graalvm.compiler.graph.NodeClass#iterableIds()->int[]::: node class iterable ids
org.graalvm.compiler.graph.NodeClass#iterableId()->int::: node class iterable id
org.graalvm.compiler.graph.NodeClass#valueNumberable()->boolean::: node class value numberable
org.graalvm.compiler.graph.NodeClass#isCanonicalizable()->boolean:::Determines if this node type implements Canonicalizable.
org.graalvm.compiler.graph.NodeClass#isCommutative()->boolean:::Determines if this node type implements BinaryCommutative.
org.graalvm.compiler.graph.NodeClass#isSimplifiable()->boolean:::Determines if this node type implements Simplifiable.
org.graalvm.compiler.graph.NodeClass#allocatedNodeIterabledIds()->int::: node class allocated node iterabled ids
org.graalvm.compiler.graph.NodeClass#getAllowedUsageTypes()->EnumSet::: node class get allowed usage types
org.graalvm.compiler.graph.NodeClass.EdgeInfo#compareTo(FieldsScanner.FieldInfo)->int:::Sorts non-list edges before list edges.
org.graalvm.compiler.graph.NodeClass.InputInfo#toString()->String::: input info to string
org.graalvm.compiler.graph.NodeClass.NodeFieldsScanner#scanField(Field, long)->void::: node fields scanner scan field
org.graalvm.compiler.graph.NodeClass#toString()->String::: node class to string
org.graalvm.compiler.graph.NodeClass#valueNumber(Node)->int::: node class value number
org.graalvm.compiler.graph.NodeClass#dataEquals(Node, Node)->boolean::: node class data equals
org.graalvm.compiler.graph.NodeClass#isValid(Position, NodeClass, Edges)->boolean::: node class is valid
org.graalvm.compiler.graph.NodeClass#updateEdgesInPlace(Node, InplaceUpdateClosure, Edges)->void::: node class update edges in place
org.graalvm.compiler.graph.NodeClass#updateInputSuccInPlace(Node, InplaceUpdateClosure)->void::: node class update input succ in place
org.graalvm.compiler.graph.NodeClass#getEdges(Edges.Type)->Edges:::Gets the input or successor edges defined by this node class.
org.graalvm.compiler.graph.NodeClass#getInputEdges()->Edges::: node class get input edges
org.graalvm.compiler.graph.NodeClass#getSuccessorEdges()->Edges::: node class get successor edges
org.graalvm.compiler.graph.NodeClass#allocateInstance()->Node:::Returns a newly allocated node for which no subclass-specific constructor has been called.
org.graalvm.compiler.graph.NodeClass#getJavaClass()->Class::: node class get java class
org.graalvm.compiler.graph.NodeClass#getNameTemplate()->String:::The template used to build the Verbosity#Name version
org.graalvm.compiler.graph.NodeClass.InplaceUpdateClosure#replacement(Node, Edges.Type)->Node::: inplace update closure replacement
org.graalvm.compiler.graph.NodeClass#addGraphDuplicate(Graph, Graph, int, Iterable, DuplicationReplacement)->EconomicMap::: node class add graph duplicate
org.graalvm.compiler.graph.NodeClass#isLeafNode()->boolean::: node class is leaf node
org.graalvm.compiler.graph.NodeClass#getLeafId()->int::: node class get leaf id
org.graalvm.compiler.graph.NodeClass#getSuperNodeClass()->NodeClass::: node class get super node class
org.graalvm.compiler.graph.NodeClass#inputsIteration()->long::: node class inputs iteration
org.graalvm.compiler.graph.NodeClass#getSuccessorIterable(Node)->NodeIterable::: node class get successor iterable
org.graalvm.compiler.graph.NodeClass#getInputIterable(Node)->NodeIterable::: node class get input iterable
org.graalvm.compiler.graph.NodeClass#equalSuccessors(Node, Node)->boolean::: node class equal successors
org.graalvm.compiler.graph.NodeClass#equalInputs(Node, Node)->boolean::: node class equal inputs
org.graalvm.compiler.graph.NodeClass#pushInputs(Node, NodeStack)->void::: node class push inputs
org.graalvm.compiler.graph.NodeClass#applySuccessors(Node, EdgeVisitor)->void::: node class apply successors
org.graalvm.compiler.graph.NodeClass#applyInputs(Node, EdgeVisitor)->void::: node class apply inputs
org.graalvm.compiler.graph.NodeClass#unregisterAtSuccessorsAsPredecessor(Node)->void::: node class unregister at successors as predecessor
org.graalvm.compiler.graph.NodeClass#registerAtSuccessorsAsPredecessor(Node)->void::: node class register at successors as predecessor
org.graalvm.compiler.graph.NodeClass#replaceFirstInput(Node, Node, Node)->boolean::: node class replace first input
org.graalvm.compiler.graph.NodeClass#replaceFirstSuccessor(Node, Node, Node)->boolean::: node class replace first successor
org.graalvm.compiler.graph.NodeClass#replaceFirstEdge(Node, Node, Node, long)->boolean::: node class replace first edge
org.graalvm.compiler.graph.NodeClass#registerAtInputsAsUsage(Node)->void::: node class register at inputs as usage
org.graalvm.compiler.graph.NodeClass#unregisterAtInputsAsUsage(Node)->void::: node class unregister at inputs as usage
org.graalvm.compiler.graph.NodeFlood#add(Node)->void::: node flood add
org.graalvm.compiler.graph.NodeFlood#getTotalMarkedCount()->int::: node flood get total marked count
org.graalvm.compiler.graph.NodeFlood#addAll(Iterable)->void::: node flood add all
org.graalvm.compiler.graph.NodeFlood#getVisited()->NodeBitMap::: node flood get visited
org.graalvm.compiler.graph.NodeFlood#isMarked(Node)->boolean::: node flood is marked
org.graalvm.compiler.graph.NodeFlood#isNew(Node)->boolean::: node flood is new
org.graalvm.compiler.graph.NodeFlood#iterator()->Iterator::: node flood iterator
org.graalvm.compiler.graph.NodeFlood#unmarkedNodes()->Iterable::: node flood unmarked nodes
org.graalvm.compiler.graph.NodeIdAccessor#getGraph()->Graph::: node id accessor get graph
org.graalvm.compiler.graph.NodeIdAccessor#verifyIdsAreStable()->boolean:::Verifies that node identifiers have not changed since this object was created.
org.graalvm.compiler.graph.NodeIdAccessor#getNodeId(Node)->int:::Gets the identifier for a node
org.graalvm.compiler.graph.NodeInputList#update(T, T)->void::: node input list update
org.graalvm.compiler.graph.NodeInputList#getEdgesType()->Type::: node input list get edges type
org.graalvm.compiler.graph.NodeInterface#asNode()->Node::: node interface as node
org.graalvm.compiler.graph.NodeList#isList()->boolean::: node list is list
org.graalvm.compiler.graph.NodeList#update(T, T)->void::: node list update
org.graalvm.compiler.graph.NodeList#getEdgesType()->Edges.Type::: node list get edges type
org.graalvm.compiler.graph.NodeList#size()->int::: node list size
org.graalvm.compiler.graph.NodeList#isEmpty()->boolean::: node list is empty
org.graalvm.compiler.graph.NodeList#isNotEmpty()->boolean::: node list is not empty
org.graalvm.compiler.graph.NodeList#count()->int::: node list count
org.graalvm.compiler.graph.NodeList#incModCount()->void::: node list inc mod count
org.graalvm.compiler.graph.NodeList#add(Node)->boolean::: node list add
org.graalvm.compiler.graph.NodeList#get(int)->T::: node list get
org.graalvm.compiler.graph.NodeList#last()->T::: node list last
org.graalvm.compiler.graph.NodeList#set(int, Node)->T::: node list set
org.graalvm.compiler.graph.NodeList#initialize(int, Node)->void::: node list initialize
org.graalvm.compiler.graph.NodeList#copy(NodeList)->void::: node list copy
org.graalvm.compiler.graph.NodeList#equals(Object)->boolean::: node list equals
org.graalvm.compiler.graph.NodeList#clear()->void::: node list clear
org.graalvm.compiler.graph.NodeList#clearWithoutUpdate()->void::: node list clear without update
org.graalvm.compiler.graph.NodeList#remove(Object)->boolean::: node list remove
org.graalvm.compiler.graph.NodeList#remove(int)->T::: node list remove
org.graalvm.compiler.graph.NodeList#replaceFirst(Node, Node)->boolean::: node list replace first
org.graalvm.compiler.graph.NodeList#iterator()->Iterator::: node list iterator
org.graalvm.compiler.graph.NodeList#contains(T)->boolean::: node list contains
org.graalvm.compiler.graph.NodeList#snapshot()->List::: node list snapshot
org.graalvm.compiler.graph.NodeList#snapshotTo(Collection)->void::: node list snapshot to
org.graalvm.compiler.graph.NodeList#setAll(NodeList)->void::: node list set all
org.graalvm.compiler.graph.NodeList#toArray(A[])->A[]::: node list to array
org.graalvm.compiler.graph.NodeList#toArray()->Object[]::: node list to array
org.graalvm.compiler.graph.NodeList#replace(T, T)->void::: node list replace
org.graalvm.compiler.graph.NodeList#indexOf(Object)->int::: node list index of
org.graalvm.compiler.graph.NodeList#contains(Object)->boolean::: node list contains
org.graalvm.compiler.graph.NodeList#containsAll(Collection)->boolean::: node list contains all
org.graalvm.compiler.graph.NodeList#addAll(Collection)->boolean::: node list add all
org.graalvm.compiler.graph.NodeList#addAll(T[])->boolean::: node list add all
org.graalvm.compiler.graph.NodeList#toString()->String::: node list to string
org.graalvm.compiler.graph.NodeList#first()->T::: node list first
org.graalvm.compiler.graph.NodeList#subList(int)->SubList::: node list sub list
org.graalvm.compiler.graph.NodeList.SubList#get(int)->R::: sub list get
org.graalvm.compiler.graph.NodeList.SubList#size()->int::: sub list size
org.graalvm.compiler.graph.NodeList.SubList#subList(int)->SubList::: sub list sub list
org.graalvm.compiler.graph.NodeList.SubList#iterator()->Iterator::: sub list iterator
org.graalvm.compiler.graph.NodeMap#get(Node)->T::: node map get
org.graalvm.compiler.graph.NodeMap#getAndGrow(Node)->T::: node map get and grow
org.graalvm.compiler.graph.NodeMap#isEmpty()->boolean::: node map is empty
org.graalvm.compiler.graph.NodeMap#containsKey(Node)->boolean::: node map contains key
org.graalvm.compiler.graph.NodeMap#containsValue(Object)->boolean::: node map contains value
org.graalvm.compiler.graph.NodeMap#graph()->Graph::: node map graph
org.graalvm.compiler.graph.NodeMap#set(Node, T)->void::: node map set
org.graalvm.compiler.graph.NodeMap#setAndGrow(Node, T)->void::: node map set and grow
org.graalvm.compiler.graph.NodeMap#getKey(int)->Node::: node map get key
org.graalvm.compiler.graph.NodeMap#size()->int::: node map size
org.graalvm.compiler.graph.NodeMap#capacity()->int::: node map capacity
org.graalvm.compiler.graph.NodeMap#isNew(Node)->boolean::: node map is new
org.graalvm.compiler.graph.NodeMap#clear()->void::: node map clear
org.graalvm.compiler.graph.NodeMap#getKeys()->Iterable::: node map get keys
org.graalvm.compiler.graph.NodeMap#getEntries()->MapCursor::: node map get entries
org.graalvm.compiler.graph.NodeMap#getValues()->Iterable::: node map get values
org.graalvm.compiler.graph.NodeMap#toString()->String::: node map to string
org.graalvm.compiler.graph.NodeMap#put(Node, T)->T::: node map put
org.graalvm.compiler.graph.NodeMap#removeKey(Node)->T::: node map remove key
org.graalvm.compiler.graph.NodeMap#replaceAll(BiFunction)->void::: node map replace all
org.graalvm.compiler.graph.NodeSourcePosition#trim()->NodeSourcePosition:::Remove marker frames.
org.graalvm.compiler.graph.NodeSourcePosition#getRootMethod()->ResolvedJavaMethod::: node source position get root method
org.graalvm.compiler.graph.NodeSourcePosition#verifyRootMethod(ResolvedJavaMethod)->boolean::: node source position verify root method
org.graalvm.compiler.graph.NodeSourcePosition#iterator()->Iterator::: node source position iterator
org.graalvm.compiler.graph.NodeSourcePosition#placeholder(ResolvedJavaMethod)->NodeSourcePosition::: node source position placeholder
org.graalvm.compiler.graph.NodeSourcePosition#placeholder(ResolvedJavaMethod, int)->NodeSourcePosition::: node source position placeholder
org.graalvm.compiler.graph.NodeSourcePosition#isPlaceholder()->boolean::: node source position is placeholder
org.graalvm.compiler.graph.NodeSourcePosition#substitution(ResolvedJavaMethod)->NodeSourcePosition::: node source position substitution
org.graalvm.compiler.graph.NodeSourcePosition#substitution(ResolvedJavaMethod, int)->NodeSourcePosition::: node source position substitution
org.graalvm.compiler.graph.NodeSourcePosition#substitution(NodeSourcePosition, ResolvedJavaMethod)->NodeSourcePosition::: node source position substitution
org.graalvm.compiler.graph.NodeSourcePosition#substitution(NodeSourcePosition, ResolvedJavaMethod, int)->NodeSourcePosition::: node source position substitution
org.graalvm.compiler.graph.NodeSourcePosition#isSubstitution()->boolean::: node source position is substitution
org.graalvm.compiler.graph.NodeSourcePosition#equals(Object)->boolean::: node source position equals
org.graalvm.compiler.graph.NodeSourcePosition#hashCode()->int::: node source position hash code
org.graalvm.compiler.graph.NodeSourcePosition#depth()->int::: node source position depth
org.graalvm.compiler.graph.NodeSourcePosition#getSourceLanguage()->SourceLanguagePosition::: node source position get source language
org.graalvm.compiler.graph.NodeSourcePosition#getCaller()->NodeSourcePosition::: node source position get caller
org.graalvm.compiler.graph.NodeSourcePosition#addCaller(SourceLanguagePosition, NodeSourcePosition)->NodeSourcePosition::: node source position add caller
org.graalvm.compiler.graph.NodeSourcePosition#addCaller(NodeSourcePosition)->NodeSourcePosition::: node source position add caller
org.graalvm.compiler.graph.NodeSourcePosition#addCaller(NodeSourcePosition, boolean)->NodeSourcePosition::: node source position add caller
org.graalvm.compiler.graph.NodeSourcePosition#addCaller(SourceLanguagePosition, NodeSourcePosition, boolean)->NodeSourcePosition::: node source position add caller
org.graalvm.compiler.graph.NodeSourcePosition#toString()->String::: node source position to string
org.graalvm.compiler.graph.NodeSourcePosition#shallowToString()->String::: node source position shallow to string
org.graalvm.compiler.graph.NodeSourcePosition#verify()->boolean::: node source position verify
org.graalvm.compiler.graph.NodeStack#size()->int::: node stack size
org.graalvm.compiler.graph.NodeStack#push(Node)->void::: node stack push
org.graalvm.compiler.graph.NodeStack#get(int)->Node::: node stack get
org.graalvm.compiler.graph.NodeStack#pop()->Node::: node stack pop
org.graalvm.compiler.graph.NodeStack#peek()->Node::: node stack peek
org.graalvm.compiler.graph.NodeStack#isEmpty()->boolean::: node stack is empty
org.graalvm.compiler.graph.NodeStack#clear()->void::: node stack clear
org.graalvm.compiler.graph.NodeStack#toString()->String::: node stack to string
org.graalvm.compiler.graph.NodeSuccessorList#update(T, T)->void::: node successor list update
org.graalvm.compiler.graph.NodeSuccessorList#getEdgesType()->Type::: node successor list get edges type
org.graalvm.compiler.graph.NodeUnionFind#union(Node, Node)->void:::Merge the equivalence sets of two nodes
org.graalvm.compiler.graph.NodeUnionFind#find(Node)->Node:::Get a representative element of the equivalence set of a node
org.graalvm.compiler.graph.NodeUnionFind#equiv(Node, Node)->boolean::: node union find equiv
org.graalvm.compiler.graph.NodeUsageIterable#iterator()->NodeUsageIterator::: node usage iterable iterator
org.graalvm.compiler.graph.NodeUsageIterable#first()->Node::: node usage iterable first
org.graalvm.compiler.graph.NodeUsageIterable#isEmpty()->boolean::: node usage iterable is empty
org.graalvm.compiler.graph.NodeUsageIterable#isNotEmpty()->boolean::: node usage iterable is not empty
org.graalvm.compiler.graph.NodeUsageIterable#count()->int::: node usage iterable count
org.graalvm.compiler.graph.NodeUsageIterable#toString()->String::: node usage iterable to string
org.graalvm.compiler.graph.NodeUsageIterator#advance()->void::: node usage iterator advance
org.graalvm.compiler.graph.NodeUsageIterator#hasNext()->boolean::: node usage iterator has next
org.graalvm.compiler.graph.NodeUsageIterator#next()->Node::: node usage iterator next
org.graalvm.compiler.graph.NodeUsageIterator#remove()->void::: node usage iterator remove
org.graalvm.compiler.graph.NodeUsageWithModCountIterator#hasNext()->boolean::: node usage with mod count iterator has next
org.graalvm.compiler.graph.NodeUsageWithModCountIterator#next()->Node::: node usage with mod count iterator next
org.graalvm.compiler.graph.NodeWorkList#addAll(Iterable)->void::: node work list add all
org.graalvm.compiler.graph.NodeWorkList#add(Node)->void::: node work list add
org.graalvm.compiler.graph.NodeWorkList#contains(Node)->boolean::: node work list contains
org.graalvm.compiler.graph.NodeWorkList.IterativeNodeWorkList#iterator()->Iterator::: iterative node work list iterator
org.graalvm.compiler.graph.NodeWorkList.IterativeNodeWorkList#add(Node)->void::: iterative node work list add
org.graalvm.compiler.graph.NodeWorkList.IterativeNodeWorkList#contains(Node)->boolean::: iterative node work list contains
org.graalvm.compiler.graph.NodeWorkList.SingletonNodeWorkList#add(Node)->void::: singleton node work list add
org.graalvm.compiler.graph.NodeWorkList.SingletonNodeWorkList#contains(Node)->boolean::: singleton node work list contains
org.graalvm.compiler.graph.NodeWorkList.SingletonNodeWorkList#iterator()->Iterator::: singleton node work list iterator
org.graalvm.compiler.graph.Position#get(Node)->Node::: position get
org.graalvm.compiler.graph.Position#getInputType()->InputType::: position get input type
org.graalvm.compiler.graph.Position#getName()->String::: position get name
org.graalvm.compiler.graph.Position#isInputOptional()->boolean::: position is input optional
org.graalvm.compiler.graph.Position#set(Node, Node)->void::: position set
org.graalvm.compiler.graph.Position#initialize(Node, Node)->void::: position initialize
org.graalvm.compiler.graph.Position#toString()->String::: position to string
org.graalvm.compiler.graph.Position#hashCode()->int::: position hash code
org.graalvm.compiler.graph.Position#equals(Object)->boolean::: position equals
org.graalvm.compiler.graph.Position#getSubIndex()->int:::Gets the index within a NodeList if #getIndex() denotes a NodeList field otherwise Node#NOT_ITERABLE.
org.graalvm.compiler.graph.Position#getIndex()->int:::Gets the index of the Node or NodeList field denoted by this position.
org.graalvm.compiler.graph.Position#getType()->Class::: position get type
org.graalvm.compiler.graph.SourceLanguagePosition#toShortString()->String:::Produce a compact description of this position suitable for printing.
org.graalvm.compiler.graph.SourceLanguagePosition#getOffsetEnd()->int:::Mimics GraphLocations operation.
org.graalvm.compiler.graph.SourceLanguagePosition#getOffsetStart()->int:::Mimics GraphLocations operation.
org.graalvm.compiler.graph.SourceLanguagePosition#getLineNumber()->int:::Mimics GraphLocations operation.
org.graalvm.compiler.graph.SourceLanguagePosition#getURI()->URI:::Mimics GraphLocations operation.
org.graalvm.compiler.graph.SourceLanguagePosition#getLanguage()->String:::Mimics GraphLocations operation.
org.graalvm.compiler.graph.SourceLanguagePositionProvider#getPosition(JavaConstant)->SourceLanguagePosition::: source language position provider get position
org.graalvm.compiler.graph.SuccessorEdges#update(Node, Node, Node)->void::: successor edges update
org.graalvm.compiler.graph.TypedGraphNodeIterator#hasNext()->boolean::: typed graph node iterator has next
org.graalvm.compiler.graph.TypedGraphNodeIterator#next()->T::: typed graph node iterator next
org.graalvm.compiler.graph.TypedGraphNodeIterator#remove()->void::: typed graph node iterator remove

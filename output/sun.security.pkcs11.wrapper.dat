sun.security.pkcs11.wrapper.CK_AES_CTR_PARAMS#toString()->String::: k_ s_ r_ s to string
sun.security.pkcs11.wrapper.CK_ATTRIBUTE#getBigInteger()->BigInteger::: k_ e get big integer
sun.security.pkcs11.wrapper.CK_ATTRIBUTE#getBoolean()->boolean::: k_ e get boolean
sun.security.pkcs11.wrapper.CK_ATTRIBUTE#getCharArray()->char[]::: k_ e get char array
sun.security.pkcs11.wrapper.CK_ATTRIBUTE#getByteArray()->byte[]::: k_ e get byte array
sun.security.pkcs11.wrapper.CK_ATTRIBUTE#getLong()->long::: k_ e get long
sun.security.pkcs11.wrapper.CK_ATTRIBUTE#toString()->String:::Returns the string representation of CK_ATTRIBUTE.
sun.security.pkcs11.wrapper.CK_CCM_PARAMS#toString()->String::: k_ m_ s to string
sun.security.pkcs11.wrapper.CK_CREATEMUTEX#CK_CREATEMUTEX()->Object:::Method CK_CREATEMUTEX
sun.security.pkcs11.wrapper.CK_DATE#clone()->Object:::Create a (deep) clone of this object.
sun.security.pkcs11.wrapper.CK_DATE#toString()->String:::Returns the string representation of CK_DATE.
sun.security.pkcs11.wrapper.CK_DESTROYMUTEX#CK_DESTROYMUTEX(Object)->void:::Method CK_DESTROYMUTEX
sun.security.pkcs11.wrapper.CK_ECDH1_DERIVE_PARAMS#toString()->String:::Returns the string representation of CK_PKCS5_PBKD2_PARAMS.
sun.security.pkcs11.wrapper.CK_ECDH2_DERIVE_PARAMS#toString()->String:::Returns the string representation of CK_PKCS5_PBKD2_PARAMS.
sun.security.pkcs11.wrapper.CK_GCM_PARAMS#toString()->String::: k_ m_ s to string
sun.security.pkcs11.wrapper.CK_INFO#toString()->String:::Returns the string representation of CK_INFO.
sun.security.pkcs11.wrapper.CK_LOCKMUTEX#CK_LOCKMUTEX(Object)->void:::Method CK_LOCKMUTEX
sun.security.pkcs11.wrapper.CK_MECHANISM#setParameter(CK_RSA_PKCS_PSS_PARAMS)->void::: k_ m set parameter
sun.security.pkcs11.wrapper.CK_MECHANISM#freeHandle()->void::: k_ m free handle
sun.security.pkcs11.wrapper.CK_MECHANISM#toString()->String:::Returns the string representation of CK_MECHANISM.
sun.security.pkcs11.wrapper.CK_MECHANISM_INFO#toString()->String:::Returns the string representation of CK_MECHANISM_INFO.
sun.security.pkcs11.wrapper.CK_NOTIFY#CK_NOTIFY(long, long, Object)->void:::Method CK_NOTIFY
sun.security.pkcs11.wrapper.CK_PBE_PARAMS#toString()->String:::Returns the string representation of CK_PBE_PARAMS.
sun.security.pkcs11.wrapper.CK_PKCS5_PBKD2_PARAMS#toString()->String:::Returns the string representation of CK_PKCS5_PBKD2_PARAMS.
sun.security.pkcs11.wrapper.CK_RSA_PKCS_OAEP_PARAMS#toString()->String:::Returns the string representation of CK_RSA_PKCS_OAEP_PARAMS.
sun.security.pkcs11.wrapper.CK_RSA_PKCS_PSS_PARAMS#equals(Object)->boolean::: k_ a_ s_ s_ s equals
sun.security.pkcs11.wrapper.CK_RSA_PKCS_PSS_PARAMS#hashCode()->int::: k_ a_ s_ s_ s hash code
sun.security.pkcs11.wrapper.CK_RSA_PKCS_PSS_PARAMS#toString()->String::: k_ a_ s_ s_ s to string
sun.security.pkcs11.wrapper.CK_SESSION_INFO#toString()->String:::Returns the string representation of CK_SESSION_INFO.
sun.security.pkcs11.wrapper.CK_SLOT_INFO#toString()->String:::Returns the string representation of CK_SLOT_INFO.
sun.security.pkcs11.wrapper.CK_SSL3_KEY_MAT_OUT#toString()->String:::Returns the string representation of CK_SSL3_KEY_MAT_OUT.
sun.security.pkcs11.wrapper.CK_SSL3_KEY_MAT_PARAMS#toString()->String:::Returns the string representation of CK_SSL3_KEY_MAT_PARAMS.
sun.security.pkcs11.wrapper.CK_SSL3_MASTER_KEY_DERIVE_PARAMS#toString()->String:::Returns the string representation of CK_SSL3_MASTER_KEY_DERIVE_PARAMS.
sun.security.pkcs11.wrapper.CK_SSL3_RANDOM_DATA#toString()->String:::Returns the string representation of CK_SSL3_RANDOM_DATA.
sun.security.pkcs11.wrapper.CK_TLS12_KEY_MAT_PARAMS#toString()->String:::Returns the string representation of CK_TLS12_KEY_MAT_PARAMS.
sun.security.pkcs11.wrapper.CK_TOKEN_INFO#toString()->String:::Returns the string representation of CK_TOKEN_INFO.
sun.security.pkcs11.wrapper.CK_UNLOCKMUTEX#CK_UNLOCKMUTEX(Object)->void:::Method CK_UNLOCKMUTEX
sun.security.pkcs11.wrapper.CK_VERSION#toString()->String:::Returns the string representation of CK_VERSION.
sun.security.pkcs11.wrapper.CK_X9_42_DH1_DERIVE_PARAMS#toString()->String:::Returns the string representation of CK_PKCS5_PBKD2_PARAMS.
sun.security.pkcs11.wrapper.CK_X9_42_DH2_DERIVE_PARAMS#toString()->String:::Returns the string representation of CK_PKCS5_PBKD2_PARAMS.
sun.security.pkcs11.wrapper.Functions#toFullHexString(long)->String:::Converts a long value to a hexadecimal String of length 16
sun.security.pkcs11.wrapper.Functions#toFullHexString(int)->String:::Converts a int value to a hexadecimal String of length 8
sun.security.pkcs11.wrapper.Functions#toHexString(long)->String:::converts a long value to a hexadecimal String
sun.security.pkcs11.wrapper.Functions#toHexString(byte[])->String:::Converts a byte array to a hexadecimal String
sun.security.pkcs11.wrapper.Functions#toBinaryString(long)->String:::converts a long value to a binary String
sun.security.pkcs11.wrapper.Functions#toBinaryString(byte[])->String:::converts a byte array to a binary String
sun.security.pkcs11.wrapper.Functions#slotInfoFlagsToString(long)->String:::converts the long value flags to a SlotInfoFlag string
sun.security.pkcs11.wrapper.Functions#tokenInfoFlagsToString(long)->String:::converts long value flags to a TokenInfoFlag string
sun.security.pkcs11.wrapper.Functions#sessionInfoFlagsToString(long)->String:::converts the long value flags to a SessionInfoFlag string
sun.security.pkcs11.wrapper.Functions#sessionStateToString(long)->String:::converts the long value state to a SessionState string
sun.security.pkcs11.wrapper.Functions#mechanismInfoFlagsToString(long)->String:::converts the long value flags to a MechanismInfoFlag string
sun.security.pkcs11.wrapper.Functions#getId(Map, String)->long::: functions get id
sun.security.pkcs11.wrapper.Functions#getMechanismName(long)->String::: functions get mechanism name
sun.security.pkcs11.wrapper.Functions#getMechanismId(String)->long::: functions get mechanism id
sun.security.pkcs11.wrapper.Functions#getKeyName(long)->String::: functions get key name
sun.security.pkcs11.wrapper.Functions#getKeyId(String)->long::: functions get key id
sun.security.pkcs11.wrapper.Functions#getAttributeName(long)->String::: functions get attribute name
sun.security.pkcs11.wrapper.Functions#getAttributeId(String)->long::: functions get attribute id
sun.security.pkcs11.wrapper.Functions#getObjectClassName(long)->String::: functions get object class name
sun.security.pkcs11.wrapper.Functions#getObjectClassId(String)->long::: functions get object class id
sun.security.pkcs11.wrapper.Functions#getHashMechId(String)->long::: functions get hash mech id
sun.security.pkcs11.wrapper.Functions#getMGFName(long)->String::: functions get name
sun.security.pkcs11.wrapper.Functions#getMGFId(String)->long::: functions get id
sun.security.pkcs11.wrapper.Functions#equals(CK_DATE, CK_DATE)->boolean:::Check the given dates for equalitiy
sun.security.pkcs11.wrapper.Functions#hashCode(byte[])->int:::Calculate a hash code for the given byte array.
sun.security.pkcs11.wrapper.Functions#hashCode(char[])->int:::Calculate a hash code for the given char array.
sun.security.pkcs11.wrapper.Functions#hashCode(CK_DATE)->int:::Calculate a hash code for the given date object.
sun.security.pkcs11.wrapper.PKCS11#loadNative()->void::: s11 load native
sun.security.pkcs11.wrapper.PKCS11#freeMechanism(long)->long::: s11 free mechanism
sun.security.pkcs11.wrapper.PKCS11#getInstance(String, String, CK_C_INITIALIZE_ARGS, boolean)->PKCS11::: s11 get instance
sun.security.pkcs11.wrapper.PKCS11#C_Initialize(Object)->void:::C_Initialize initializes the Cryptoki library
sun.security.pkcs11.wrapper.PKCS11#C_Finalize(Object)->void:::C_Finalize indicates that an application is done with the Cryptoki library (General-purpose)
sun.security.pkcs11.wrapper.PKCS11#C_GetInfo()->CK_INFO:::C_GetInfo returns general information about Cryptoki
sun.security.pkcs11.wrapper.PKCS11#C_GetSlotList(boolean)->long[]:::C_GetSlotList obtains a list of slots in the system
sun.security.pkcs11.wrapper.PKCS11#C_GetSlotInfo(long)->CK_SLOT_INFO:::C_GetSlotInfo obtains information about a particular slot in the system
sun.security.pkcs11.wrapper.PKCS11#C_GetTokenInfo(long)->CK_TOKEN_INFO:::C_GetTokenInfo obtains information about a particular token in the system
sun.security.pkcs11.wrapper.PKCS11#C_GetMechanismList(long)->long[]:::C_GetMechanismList obtains a list of mechanism types supported by a token
sun.security.pkcs11.wrapper.PKCS11#C_GetMechanismInfo(long, long)->CK_MECHANISM_INFO:::C_GetMechanismInfo obtains information about a particular mechanism possibly supported by a token
sun.security.pkcs11.wrapper.PKCS11#C_OpenSession(long, long, Object, CK_NOTIFY)->long:::C_OpenSession opens a session between an application and a token
sun.security.pkcs11.wrapper.PKCS11#C_CloseSession(long)->void:::C_CloseSession closes a session between an application and a token
sun.security.pkcs11.wrapper.PKCS11#C_GetSessionInfo(long)->CK_SESSION_INFO:::C_GetSessionInfo obtains information about the session
sun.security.pkcs11.wrapper.PKCS11#C_GetOperationState(long)->byte[]:::C_GetOperationState obtains the state of the cryptographic operation in a session
sun.security.pkcs11.wrapper.PKCS11#C_SetOperationState(long, byte[], long, long)->void:::C_SetOperationState restores the state of the cryptographic operation in a session
sun.security.pkcs11.wrapper.PKCS11#C_Login(long, long, char[])->void:::C_Login logs a user into a token
sun.security.pkcs11.wrapper.PKCS11#C_Logout(long)->void:::C_Logout logs a user out from a token
sun.security.pkcs11.wrapper.PKCS11#C_CreateObject(long, CK_ATTRIBUTE[])->long:::C_CreateObject creates a new object
sun.security.pkcs11.wrapper.PKCS11#C_CopyObject(long, long, CK_ATTRIBUTE[])->long:::C_CopyObject copies an object, creating a new object for the copy
sun.security.pkcs11.wrapper.PKCS11#C_DestroyObject(long, long)->void:::C_DestroyObject destroys an object
sun.security.pkcs11.wrapper.PKCS11#C_GetAttributeValue(long, long, CK_ATTRIBUTE[])->void:::C_GetAttributeValue obtains the value of one or more object attributes
sun.security.pkcs11.wrapper.PKCS11#C_SetAttributeValue(long, long, CK_ATTRIBUTE[])->void:::C_SetAttributeValue modifies the value of one or more object attributes (Object management)
sun.security.pkcs11.wrapper.PKCS11#C_FindObjectsInit(long, CK_ATTRIBUTE[])->void:::C_FindObjectsInit initializes a search for token and session objects that match a template
sun.security.pkcs11.wrapper.PKCS11#C_FindObjects(long, long)->long[]:::C_FindObjects continues a search for token and session objects that match a template, obtaining additional object handles
sun.security.pkcs11.wrapper.PKCS11#C_FindObjectsFinal(long)->void:::C_FindObjectsFinal finishes a search for token and session objects
sun.security.pkcs11.wrapper.PKCS11#C_EncryptInit(long, CK_MECHANISM, long)->void:::C_EncryptInit initializes an encryption operation
sun.security.pkcs11.wrapper.PKCS11#C_Encrypt(long, long, byte[], int, int, long, byte[], int, int)->int:::C_Encrypt encrypts single-part data
sun.security.pkcs11.wrapper.PKCS11#C_EncryptUpdate(long, long, byte[], int, int, long, byte[], int, int)->int:::C_EncryptUpdate continues a multiple-part encryption operation
sun.security.pkcs11.wrapper.PKCS11#C_EncryptFinal(long, long, byte[], int, int)->int:::C_EncryptFinal finishes a multiple-part encryption operation
sun.security.pkcs11.wrapper.PKCS11#C_DecryptInit(long, CK_MECHANISM, long)->void:::C_DecryptInit initializes a decryption operation
sun.security.pkcs11.wrapper.PKCS11#C_Decrypt(long, long, byte[], int, int, long, byte[], int, int)->int:::C_Decrypt decrypts encrypted data in a single part
sun.security.pkcs11.wrapper.PKCS11#C_DecryptUpdate(long, long, byte[], int, int, long, byte[], int, int)->int:::C_DecryptUpdate continues a multiple-part decryption operation
sun.security.pkcs11.wrapper.PKCS11#C_DecryptFinal(long, long, byte[], int, int)->int:::C_DecryptFinal finishes a multiple-part decryption operation
sun.security.pkcs11.wrapper.PKCS11#C_DigestInit(long, CK_MECHANISM)->void:::C_DigestInit initializes a message-digesting operation
sun.security.pkcs11.wrapper.PKCS11#C_DigestSingle(long, CK_MECHANISM, byte[], int, int, byte[], int, int)->int:::C_Digest digests data in a single part
sun.security.pkcs11.wrapper.PKCS11#C_DigestUpdate(long, long, byte[], int, int)->void:::C_DigestUpdate continues a multiple-part message-digesting operation
sun.security.pkcs11.wrapper.PKCS11#C_DigestKey(long, long)->void:::C_DigestKey continues a multi-part message-digesting operation, by digesting the value of a secret key as part of the data already digested
sun.security.pkcs11.wrapper.PKCS11#C_DigestFinal(long, byte[], int, int)->int:::C_DigestFinal finishes a multiple-part message-digesting operation
sun.security.pkcs11.wrapper.PKCS11#C_SignInit(long, CK_MECHANISM, long)->void:::C_SignInit initializes a signature (private key encryption) operation, where the signature is (will be) an appendix to the data, and plaintext cannot be recovered from the signature
sun.security.pkcs11.wrapper.PKCS11#C_Sign(long, byte[])->byte[]:::C_Sign signs (encrypts with private key) data in a single part, where the signature is (will be) an appendix to the data, and plaintext cannot be recovered from the signature
sun.security.pkcs11.wrapper.PKCS11#C_SignUpdate(long, long, byte[], int, int)->void:::C_SignUpdate continues a multiple-part signature operation, where the signature is (will be) an appendix to the data, and plaintext cannot be recovered from the signature
sun.security.pkcs11.wrapper.PKCS11#C_SignFinal(long, int)->byte[]:::C_SignFinal finishes a multiple-part signature operation, returning the signature
sun.security.pkcs11.wrapper.PKCS11#C_SignRecoverInit(long, CK_MECHANISM, long)->void:::C_SignRecoverInit initializes a signature operation, where the data can be recovered from the signature
sun.security.pkcs11.wrapper.PKCS11#C_SignRecover(long, byte[], int, int, byte[], int, int)->int:::C_SignRecover signs data in a single operation, where the data can be recovered from the signature
sun.security.pkcs11.wrapper.PKCS11#C_VerifyInit(long, CK_MECHANISM, long)->void:::C_VerifyInit initializes a verification operation, where the signature is an appendix to the data, and plaintext cannot cannot be recovered from the signature (e.g
sun.security.pkcs11.wrapper.PKCS11#C_Verify(long, byte[], byte[])->void:::C_Verify verifies a signature in a single-part operation, where the signature is an appendix to the data, and plaintext cannot be recovered from the signature
sun.security.pkcs11.wrapper.PKCS11#C_VerifyUpdate(long, long, byte[], int, int)->void:::C_VerifyUpdate continues a multiple-part verification operation, where the signature is an appendix to the data, and plaintext cannot be recovered from the signature
sun.security.pkcs11.wrapper.PKCS11#C_VerifyFinal(long, byte[])->void:::C_VerifyFinal finishes a multiple-part verification operation, checking the signature
sun.security.pkcs11.wrapper.PKCS11#C_VerifyRecoverInit(long, CK_MECHANISM, long)->void:::C_VerifyRecoverInit initializes a signature verification operation, where the data is recovered from the signature
sun.security.pkcs11.wrapper.PKCS11#C_VerifyRecover(long, byte[], int, int, byte[], int, int)->int:::C_VerifyRecover verifies a signature in a single-part operation, where the data is recovered from the signature
sun.security.pkcs11.wrapper.PKCS11#getNativeKeyInfo(long, long, long, CK_MECHANISM)->byte[]:::getNativeKeyInfo gets the key object attributes and values as an opaque byte array to be used in createNativeKey method
sun.security.pkcs11.wrapper.PKCS11#createNativeKey(long, byte[], long, CK_MECHANISM)->long:::createNativeKey creates a key object with attributes and values specified by parameter as an opaque byte array
sun.security.pkcs11.wrapper.PKCS11#C_GenerateKey(long, CK_MECHANISM, CK_ATTRIBUTE[])->long:::C_GenerateKey generates a secret key, creating a new key object
sun.security.pkcs11.wrapper.PKCS11#C_GenerateKeyPair(long, CK_MECHANISM, CK_ATTRIBUTE[], CK_ATTRIBUTE[])->long[]:::C_GenerateKeyPair generates a public-key/private-key pair, creating new key objects
sun.security.pkcs11.wrapper.PKCS11#C_WrapKey(long, CK_MECHANISM, long, long)->byte[]:::C_WrapKey wraps (i.e., encrypts) a key
sun.security.pkcs11.wrapper.PKCS11#C_UnwrapKey(long, CK_MECHANISM, long, byte[], CK_ATTRIBUTE[])->long:::C_UnwrapKey unwraps (decrypts) a wrapped key, creating a new key object
sun.security.pkcs11.wrapper.PKCS11#C_DeriveKey(long, CK_MECHANISM, long, CK_ATTRIBUTE[])->long:::C_DeriveKey derives a key from a base key, creating a new key object
sun.security.pkcs11.wrapper.PKCS11#C_SeedRandom(long, byte[])->void:::C_SeedRandom mixes additional seed material into the token's random number generator
sun.security.pkcs11.wrapper.PKCS11#C_GenerateRandom(long, byte[])->void:::C_GenerateRandom generates random data
sun.security.pkcs11.wrapper.PKCS11#toString()->String:::Returns the string representation of this object.
sun.security.pkcs11.wrapper.PKCS11#finalize()->void:::Calls disconnect() to cleanup the native part of the wrapper
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_Initialize(Object)->void::: synchronized s11  c_ initialize
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_Finalize(Object)->void::: synchronized s11  c_ finalize
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GetInfo()->CK_INFO::: synchronized s11  c_ get info
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GetSlotList(boolean)->long[]::: synchronized s11  c_ get slot list
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GetSlotInfo(long)->CK_SLOT_INFO::: synchronized s11  c_ get slot info
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GetTokenInfo(long)->CK_TOKEN_INFO::: synchronized s11  c_ get token info
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GetMechanismList(long)->long[]::: synchronized s11  c_ get mechanism list
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GetMechanismInfo(long, long)->CK_MECHANISM_INFO::: synchronized s11  c_ get mechanism info
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_OpenSession(long, long, Object, CK_NOTIFY)->long::: synchronized s11  c_ open session
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_CloseSession(long)->void::: synchronized s11  c_ close session
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GetSessionInfo(long)->CK_SESSION_INFO::: synchronized s11  c_ get session info
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_Login(long, long, char[])->void::: synchronized s11  c_ login
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_Logout(long)->void::: synchronized s11  c_ logout
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_CreateObject(long, CK_ATTRIBUTE[])->long::: synchronized s11  c_ create object
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_CopyObject(long, long, CK_ATTRIBUTE[])->long::: synchronized s11  c_ copy object
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DestroyObject(long, long)->void::: synchronized s11  c_ destroy object
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GetAttributeValue(long, long, CK_ATTRIBUTE[])->void::: synchronized s11  c_ get attribute value
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_SetAttributeValue(long, long, CK_ATTRIBUTE[])->void::: synchronized s11  c_ set attribute value
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_FindObjectsInit(long, CK_ATTRIBUTE[])->void::: synchronized s11  c_ find objects init
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_FindObjects(long, long)->long[]::: synchronized s11  c_ find objects
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_FindObjectsFinal(long)->void::: synchronized s11  c_ find objects final
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_EncryptInit(long, CK_MECHANISM, long)->void::: synchronized s11  c_ encrypt init
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_Encrypt(long, long, byte[], int, int, long, byte[], int, int)->int::: synchronized s11  c_ encrypt
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_EncryptUpdate(long, long, byte[], int, int, long, byte[], int, int)->int::: synchronized s11  c_ encrypt update
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_EncryptFinal(long, long, byte[], int, int)->int::: synchronized s11  c_ encrypt final
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DecryptInit(long, CK_MECHANISM, long)->void::: synchronized s11  c_ decrypt init
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_Decrypt(long, long, byte[], int, int, long, byte[], int, int)->int::: synchronized s11  c_ decrypt
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DecryptUpdate(long, long, byte[], int, int, long, byte[], int, int)->int::: synchronized s11  c_ decrypt update
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DecryptFinal(long, long, byte[], int, int)->int::: synchronized s11  c_ decrypt final
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DigestInit(long, CK_MECHANISM)->void::: synchronized s11  c_ digest init
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DigestSingle(long, CK_MECHANISM, byte[], int, int, byte[], int, int)->int::: synchronized s11  c_ digest single
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DigestUpdate(long, long, byte[], int, int)->void::: synchronized s11  c_ digest update
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DigestKey(long, long)->void::: synchronized s11  c_ digest key
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DigestFinal(long, byte[], int, int)->int::: synchronized s11  c_ digest final
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_SignInit(long, CK_MECHANISM, long)->void::: synchronized s11  c_ sign init
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_Sign(long, byte[])->byte[]::: synchronized s11  c_ sign
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_SignUpdate(long, long, byte[], int, int)->void::: synchronized s11  c_ sign update
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_SignFinal(long, int)->byte[]::: synchronized s11  c_ sign final
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_SignRecoverInit(long, CK_MECHANISM, long)->void::: synchronized s11  c_ sign recover init
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_SignRecover(long, byte[], int, int, byte[], int, int)->int::: synchronized s11  c_ sign recover
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_VerifyInit(long, CK_MECHANISM, long)->void::: synchronized s11  c_ verify init
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_Verify(long, byte[], byte[])->void::: synchronized s11  c_ verify
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_VerifyUpdate(long, long, byte[], int, int)->void::: synchronized s11  c_ verify update
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_VerifyFinal(long, byte[])->void::: synchronized s11  c_ verify final
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_VerifyRecoverInit(long, CK_MECHANISM, long)->void::: synchronized s11  c_ verify recover init
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_VerifyRecover(long, byte[], int, int, byte[], int, int)->int::: synchronized s11  c_ verify recover
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GenerateKey(long, CK_MECHANISM, CK_ATTRIBUTE[])->long::: synchronized s11  c_ generate key
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GenerateKeyPair(long, CK_MECHANISM, CK_ATTRIBUTE[], CK_ATTRIBUTE[])->long[]::: synchronized s11  c_ generate key pair
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_WrapKey(long, CK_MECHANISM, long, long)->byte[]::: synchronized s11  c_ wrap key
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_UnwrapKey(long, CK_MECHANISM, long, byte[], CK_ATTRIBUTE[])->long::: synchronized s11  c_ unwrap key
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_DeriveKey(long, CK_MECHANISM, long, CK_ATTRIBUTE[])->long::: synchronized s11  c_ derive key
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_SeedRandom(long, byte[])->void::: synchronized s11  c_ seed random
sun.security.pkcs11.wrapper.PKCS11.SynchronizedPKCS11#C_GenerateRandom(long, byte[])->void::: synchronized s11  c_ generate random
sun.security.pkcs11.wrapper.PKCS11Exception#getMessage()->String:::This method gets the corresponding text error message from a property file
sun.security.pkcs11.wrapper.PKCS11Exception#getErrorCode()->long:::Returns the PKCS#11 error code.

AddResourcePlugin#getName()::: add resource plugin get name:::return
AddResourcePlugin#getDescription()::: add resource plugin get description:::return->PluginsResourceBundle->getDescription
AddResourcePlugin#getType()::: add resource plugin get type:::return
AddResourcePlugin#hasArguments()::: add resource plugin has arguments:::return
AddResourcePlugin#hasRawArgument()::: add resource plugin has raw argument:::return
AddResourcePlugin#getArgumentsDescription()::: add resource plugin get arguments description:::return->PluginsResourceBundle->getArgument
AddResourcePlugin#configure(Map)::: add resource plugin configure:::v->config->get->if->throw->new->AssertionError
AddResourcePlugin#transform(ResourcePool, ResourcePoolBuilder)::: add resource plugin transform:::in->Function->identity->transformAndCopy->out->ResourcePoolEntry->value->getBytes->create->add->return->out->build
DefaultCompressPlugin#getName()::: default compress plugin get name:::return
DefaultCompressPlugin#transform(ResourcePool, ResourcePoolBuilder)::: default compress plugin transform:::if->resMgr->in->byteOrder->getStringTable->new->ImagePluginStack.OrderedResourcePoolManager->return->zip->ss->resMgr->resourcePoolBuilder->transform->transform->else->if->return->ss->transform->else->if->return->zip->transform->else->in->Function->identity->transformAndCopy->return->out->build
DefaultCompressPlugin#previsit(ResourcePool, StringTable)::: default compress plugin previsit:::if->ss->previsit
DefaultCompressPlugin#getType()::: default compress plugin get type:::return
DefaultCompressPlugin#getDescription()::: default compress plugin get description:::return->PluginsResourceBundle->getDescription
DefaultCompressPlugin#hasArguments()::: default compress plugin has arguments:::return
DefaultCompressPlugin#getArgumentsDescription()::: default compress plugin get arguments description:::return->PluginsResourceBundle->getArgument
DefaultCompressPlugin#configure(Map)::: default compress plugin configure:::resFilter->ResourceFilter->config->get->includeFilter->level->config->get->if->switch->break->new->StringSharingPlugin->break->new->ZipPlugin->break->throw->new->IllegalArgumentException->else->throw->new->IllegalArgumentException
ExcludeFilesPlugin#getName()::: exclude files plugin get name:::return
ExcludeFilesPlugin#transform(ResourcePool, ResourcePoolBuilder)::: exclude files plugin transform:::in->if->file->type->equals->predicate->file->path->test->return->transformAndCopy->return->out->build
ExcludeFilesPlugin#getType()::: exclude files plugin get type:::return
ExcludeFilesPlugin#getDescription()::: exclude files plugin get description:::return->PluginsResourceBundle->getDescription
ExcludeFilesPlugin#hasArguments()::: exclude files plugin has arguments:::return
ExcludeFilesPlugin#getArgumentsDescription()::: exclude files plugin get arguments description:::return->PluginsResourceBundle->getArgument
ExcludeFilesPlugin#configure(Map)::: exclude files plugin configure:::ResourceFilter->config->get->excludeFilter
ExcludeJmodSectionPlugin#getName()::: exclude jmod section plugin get name:::return
ExcludeJmodSectionPlugin#configure(Map)::: exclude jmod section plugin configure:::arg->config->get->if->arg->isEmpty->throw->new->IllegalArgumentException->switch->filters->add->break->filters->add->break->throw->new->IllegalArgumentException
ExcludeJmodSectionPlugin#transform(ResourcePool, ResourcePoolBuilder)::: exclude jmod section plugin transform:::in->if->filters->entry->type->contains->return->transformAndCopy->return->out->build
ExcludeJmodSectionPlugin#getType()::: exclude jmod section plugin get type:::return
ExcludeJmodSectionPlugin#getDescription()::: exclude jmod section plugin get description:::return->PluginsResourceBundle->getDescription
ExcludeJmodSectionPlugin#hasArguments()::: exclude jmod section plugin has arguments:::return
ExcludeJmodSectionPlugin#getArgumentsDescription()::: exclude jmod section plugin get arguments description:::return->PluginsResourceBundle->getArgument
ExcludePlugin#getName()::: exclude plugin get name:::return
ExcludePlugin#transform(ResourcePool, ResourcePoolBuilder)::: exclude plugin transform:::in->if->resource->type->equals->shouldExclude->predicate->resource->path->test->if->resource->path->resource->moduleName->equals->throw->resource->path->new->PluginException->return->return->transformAndCopy->return->out->build
ExcludePlugin#getDescription()::: exclude plugin get description:::return->PluginsResourceBundle->getDescription
ExcludePlugin#hasArguments()::: exclude plugin has arguments:::return
ExcludePlugin#getArgumentsDescription()::: exclude plugin get arguments description:::return->PluginsResourceBundle->getArgument
ExcludePlugin#getType()::: exclude plugin get type:::return
ExcludePlugin#configure(Map)::: exclude plugin configure:::ResourceFilter->config->get->excludeFilter
ExcludeVMPlugin.JvmComparator#compare(Jvm, Jvm)::: jvm comparator compare:::return->o1->getEfficience->o2->getEfficience
ExcludeVMPlugin#getName()::: exclude plugin get name:::return
ExcludeVMPlugin#getVMs(ResourcePoolModule, String[]):::VM paths: /java.base/lib/{architecture}/{server|client|minimal}/{shared lib} e.g.: /java.base/lib/server/libjvm.so /java.base/lib/server/libjvm.dylib:::ret->javaBase->entries->path->t->path->foreach->if->t->path->endsWith->return->return->filter->Collectors->toList->collect->return
ExcludeVMPlugin#transform(ResourcePool, ResourcePoolBuilder)::: exclude plugin transform:::javaBase->in->moduleView->findModule->get->jvmlibs->jvmlibs->existing->new->JvmComparator->new->TreeSet<>->removed->new->JvmComparator->new->TreeSet<>->if->jvms->getVMs->foreach->Jvm->values->foreach->mdPath->md->path->foreach->if->mdPath->jvm->getName->endsWith->existing->add->if->isRemoved->removed->add->if->if->existing->contains->throw->target->getName->new->PluginException->in->if->if->file->type->equals->if->file->path->endsWith->try->handleJvmCfgFile->catch->throw->new->UncheckedIOException->finally->isRemoved->return->transformAndCopy->return->out->build
ExcludeVMPlugin#isRemoved(ResourcePoolEntry)::: exclude plugin is removed:::return->predicate->file->path->test
ExcludeVMPlugin#getType()::: exclude plugin get type:::return
ExcludeVMPlugin#getDescription()::: exclude plugin get description:::return->PluginsResourceBundle->getDescription
ExcludeVMPlugin#hasArguments()::: exclude plugin has arguments:::return
ExcludeVMPlugin#getArgumentsDescription()::: exclude plugin get arguments description:::return->PluginsResourceBundle->getArgument
ExcludeVMPlugin#configure(Map)::: exclude plugin configure:::value->config->get->exclude->switch->break->break->break->break->throw->new->IllegalArgumentException->ResourceFilter->excludeFilter
ExcludeVMPlugin#handleJvmCfgFile(ResourcePoolEntry, TreeSet, TreeSet)::: exclude plugin handle jvm cfg file:::if->return->builder->new->StringBuilder->try->reader->orig->content->new->InputStreamReader->new->BufferedReader->reader->lines->if->s->startsWith->builder->append->append->forEach->catch->finally->remaining->new->JvmComparator->new->TreeSet<>->foreach->if->removed->contains->remaining->add->builder->append->platform->getName->append->append->foreach->removed->descendingSet->builder->append->platform->getName->append->append->remaining->last->getName->append->append->content->builder->toString->getBytes->return->orig->copyWithContent
ExcludeVMPlugin#jvmlibs(ResourcePoolModule)::: exclude plugin jvmlibs:::platform->Platform->getTargetPlatform->switch->return->new->StringArr->return->new->StringArr->return->new->StringArr
GenerateJLIClassesPlugin#getName()::: generate classes plugin get name:::return
GenerateJLIClassesPlugin#getDescription()::: generate classes plugin get description:::return
GenerateJLIClassesPlugin#getState()::: generate classes plugin get state:::return->EnumSet->of
GenerateJLIClassesPlugin#hasArguments()::: generate classes plugin has arguments:::return
GenerateJLIClassesPlugin#getArgumentsDescription()::: generate classes plugin get arguments description:::return->PluginsResourceBundle->getArgument
GenerateJLIClassesPlugin#defaultSpecies()::: generate classes plugin default species:::return->Set->of
GenerateJLIClassesPlugin#defaultInvokers()::: generate classes plugin default invokers:::return->Set->of
GenerateJLIClassesPlugin#defaultCallSiteTypes()::: generate classes plugin default call site types:::return->Set->of
GenerateJLIClassesPlugin#defaultDMHMethods()::: generate classes plugin default methods:::return->Map->Set->of->Set->of->Set->of->Set->of->Set->of->Set->of->of
GenerateJLIClassesPlugin#configure(Map)::: generate classes plugin configure:::config->get
GenerateJLIClassesPlugin#initialize(ResourcePool)::: generate classes plugin initialize:::defaultSpecies->stream->expandSignature->map->Collectors->toSet->collect->defaultInvokers->validateMethodTypes->defaultCallSiteTypes->defaultDMHMethods->foreach->dmhMethods->values->validateMethodTypes->if->mainArgument->startsWith->try->traceFile->this->getClass->getResourceAsStream->if->new->InputStreamReader->new->BufferedReader->lines->readTraceConfig->catch->throw->new->PluginException->finally->else->file->mainArgument->substring->new->File->if->file->exists->fileLines->readTraceConfig
GenerateJLIClassesPlugin#readTraceConfig(Stream)::: generate classes plugin read trace config:::new->TreeSet<>->new->TreeSet<>->new->TreeSet<>->newDMHMethods->new->TreeMap<>->foreach->dmhMethods->entrySet->newDMHMethods->entry->getKey->entry->getValue->new->TreeSet<>->put->lines->line->split->map->switch->if->startsWith->species->length->substring->if->equals->speciesTypes->expandSignature->add->break->methodType->validateMethodType->if->equals->if->equals->equals->callSiteTypes->add->else->invokerTypes->add->else->if->contains->dmh->if->DMH_METHOD_TYPE_MAP->containsKey->addDMHMethodType->break->break->forEach
GenerateJLIClassesPlugin#addDMHMethodType(String, String)::: generate classes plugin add method type:::validateMethodType->methodTypes->dmhMethods->get->if->new->TreeSet<>->dmhMethods->put->methodTypes->add
GenerateJLIClassesPlugin#fileLines(File)::: generate classes plugin file lines:::try->return->Files->file->toPath->lines->catch->throw->new->PluginException->finally
GenerateJLIClassesPlugin#validateMethodTypes(Set)::: generate classes plugin validate method types:::foreach->validateMethodType
GenerateJLIClassesPlugin#validateMethodType(String)::: generate classes plugin validate method type:::typeParts->type->split->if->length->charAt->indexOf->throw->new->PluginException->expandSignature
GenerateJLIClassesPlugin#requireBasicType(char)::: generate classes plugin require basic type:::if->indexOf->throw->new->PluginException
GenerateJLIClassesPlugin#transform(ResourcePool, ResourcePoolBuilder)::: generate classes plugin transform:::initialize->in->path->entry->path->if->path->equals->path->equals->path->equals->path->equals->return->else->return->transformAndCopy->speciesTypes->generateBMHClass->forEach->generateHolderClasses->return->out->build
GenerateJLIClassesPlugin#generateBMHClass(String, ResourcePoolBuilder)::: generate classes plugin generate class:::try->result->JLIA->generateConcreteBMHClassBytes->className->result->getKey->bytes->result->getValue->ndata->ResourcePoolEntry->create->out->add->catch->throw->new->PluginException->finally
GenerateJLIClassesPlugin#generateHolderClasses(ResourcePoolBuilder)::: generate classes plugin generate holder classes:::count->foreach->dmhMethods->values->entry->size->directMethodTypes->new->MethodTypeArr->dmhTypes->new->intArr->index->foreach->dmhMethods->entrySet->dmhType->entry->getKey->foreach->entry->getValue->mt->asMethodType->if->mt->parameterCount->mt->parameterType->throw->new->PluginException->mt->dropParameterTypes->DMH_METHOD_TYPE_MAP->get->invokerMethodTypes->size->new->MethodTypeArr->i->foreach->mt->asMethodType->lastParam->mt->parameterCount->if->mt->parameterCount->mt->parameterType->mt->parameterType->throw->new->PluginException->mt->dropParameterTypes->mt->dropParameterTypes->callSiteMethodTypes->size->new->MethodTypeArr->foreach->mt->asMethodType->lastParam->mt->parameterCount->if->mt->parameterCount->mt->parameterType->throw->new->PluginException->mt->dropParameterTypes->try->bytes->JLIA->generateDirectMethodHandleHolderClassBytes->ndata->ResourcePoolEntry->create->out->add->JLIA->generateDelegatingMethodHandleHolderClassBytes->ResourcePoolEntry->create->out->add->JLIA->generateInvokersHolderClassBytes->ResourcePoolEntry->create->out->add->JLIA->generateBasicFormsClassBytes->ResourcePoolEntry->create->out->add->catch->throw->new->PluginException->finally
GenerateJLIClassesPlugin#expandSignature(String)::: generate classes plugin expand signature:::sb->new->StringBuilder->last->count->for->i->signature->length->if->requireBasicType->for->j->return->sb->toString
GenerateJLIClassesPlugin#asMethodType(String)::: generate classes plugin as method type:::parts->basicSignatureString->split->parameters->expandSignature->rtype->charAt->simpleType->if->parameters->isEmpty->return->MethodType->methodType->else->ptypes->parameters->length->new->Class<?>Arr->for->i->return->MethodType->methodType
GenerateJLIClassesPlugin#simpleType(char)::: generate classes plugin simple type:::switch->return->return->return->return->return->return->throw->new->IllegalArgumentException->throw->new->IllegalArgumentException
IncludeLocalesPlugin#getName()::: include locales plugin get name:::return
IncludeLocalesPlugin#transform(ResourcePool, ResourcePoolBuilder)::: include locales plugin transform:::in->if->resource->moduleName->equals->path->resource->path->predicate->test->if->resource->type->equals->bytes->resource->contentBytes->cr->new->ClassReader->if->Arrays->cr->getInterfaces->stream->i->contains->anyMatch->stripUnsupportedLocales->resource->copyWithContent->return->transformAndCopy->return->out->build
IncludeLocalesPlugin#getType()::: include locales plugin get type:::return
IncludeLocalesPlugin#getDescription()::: include locales plugin get description:::return->PluginsResourceBundle->getDescription
IncludeLocalesPlugin#hasArguments()::: include locales plugin has arguments:::return
IncludeLocalesPlugin#getArgumentsDescription()::: include locales plugin get arguments description:::return->PluginsResourceBundle->getArgument
IncludeLocalesPlugin#configure(Map)::: include locales plugin configure:::config->get->try->parse->catch->throw->String->PluginsResourceBundle->getMessage->iae->getMessage->replaceFirst->format->new->IllegalArgumentException->finally
IncludeLocalesPlugin#previsit(ResourcePool, StringTable)::: include locales plugin previsit:::p->Pattern->compile->optMod->resources->moduleView->findModule->if->optMod->isPresent->module->optMod->get->packages->module->packages->if->packages->containsAll->throw->PluginsResourceBundle->getMessage->LOCALEDATA_PACKAGES->stream->packages->contains->filter->Collectors->joining->collect->new->PluginException->Stream->module->entries->p->md->path->matcher->map->m->matches->filter->m->group->replaceAll->map->Stream->Stream->of->Stream->of->concat->concat->distinct->sorted->IncludeLocalesPlugin->tagToLocale->map->Collectors->toList->collect->else->throw->PluginsResourceBundle->getMessage->new->PluginException->filterLocales->if->filtered->isEmpty->throw->String->PluginsResourceBundle->getMessage->format->new->PluginException->value->Stream->META_FILES->stream->filtered->stream->includeLocaleFilePatterns->stream->flatMap->concat->map->Collectors->toList->collect->ResourceFilter->includeFilter
IncludeLocalesPlugin#includeLocaleFilePatterns(String)::: include locales plugin include locale file patterns:::if->tag->matches->return->List->of->files->tag->replaceAll->includeLocaleFiles->new->ArrayList<>->if->tag->equals->files->add->files->add->if->tag->equals->files->includeLocaleFiles->addAll->return
IncludeLocalesPlugin#includeLocaleFiles(String)::: include locales plugin include locale files:::return->INCLUDE_LOCALE_FILES->stream->map->Collectors->toList->collect
IncludeLocalesPlugin#stripUnsupportedLocales(byte[], ClassReader)::: include locales plugin strip unsupported locales:::buf->cr->getMaxStringLength->new->charArr->modified->new->booleanArr->IntStream->cr->getItemCount->range->cr->getItem->map->if->length->cr->readUnsignedShort->b->new->byteArr->System->arraycopy->if->filterOutUnsupportedTags->System->arraycopy->forEach->return
IncludeLocalesPlugin#filterOutUnsupportedTags(byte[])::: include locales plugin filter out unsupported tags:::locales->originalTags->Arrays->new->String->split->asList->try->originalTags->stream->tag->isEmpty->filter->IncludeLocalesPlugin->tagToLocale->map->Collectors->toList->collect->catch->return->finally->filteredBytes->filterLocales->stream->originalTags->contains->filter->Collectors->joining->collect->getBytes->if->throw->new->InternalError->System->arraycopy->Arrays->fill->return
IncludeLocalesPlugin#filterLocales(List)::: include locales plugin filter locales:::ret->Locale->filter->stream->Stream->Control->getNoFallbackControl->getCandidateLocales->stream->CLDR_ADAPTER->getCandidateLocales->stream->concat->flatMap->locales->stream->l->toString->loc->toString->equalsIgnoreCase->filter->findAny->map->Optional->stream->flatMap->IncludeLocalesPlugin->localeToTags->flatMap->distinct->Collectors->toList->collect->return
IncludeLocalesPlugin#tagToLocale(String)::: include locales plugin tag to locale:::tag->replaceFirst->replaceFirst->replaceFirst->switch->return->return->return->LOCALE_BUILDER->clear->LOCALE_BUILDER->setLanguageTag->return->LOCALE_BUILDER->build
IncludeLocalesPlugin#localeToTags(Locale)::: include locales plugin locale to tags:::Objects->requireNonNull->tag->loc->toLanguageTag->tags->switch->loc->getLanguage->List->tag->replaceFirst->of->break->List->tag->replaceFirst->of->break->List->tag->replaceFirst->of->break->if->loc->getCountry->List->of->break->if->loc->getCountry->List->of->break->if->loc->getCountry->List->of->break->return->List->of->stream->tags->stream
LegalNoticeFilePlugin#getName()::: legal notice file plugin get name:::return
LegalNoticeFilePlugin#getState()::: legal notice file plugin get state:::return->EnumSet->of
LegalNoticeFilePlugin#configure(Map)::: legal notice file plugin configure:::arg->config->get->if->if->arg->equals->else->throw->new->IllegalArgumentException
LegalNoticeFilePlugin#transform(ResourcePool, ResourcePoolBuilder)::: legal notice file plugin transform:::in->moduleView->new->ModuleSorter->sorted->ResourcePoolModule->entries->flatMap->entry->type->filter->this->dedupLegalNoticeEntry->forEach->in->entries->entry->type->filter->out->add->forEach->licenseOrNotice->values->stream->List->stream->flatMap->out->add->forEach->return->out->build
LegalNoticeFilePlugin#dedupLegalNoticeEntry(ResourcePoolEntry)::: legal notice file plugin dedup legal notice entry:::path->Utils->entry->path->getJRTFSPath->filename->path->getFileName->entries->licenseOrNotice->filename->toString->new->ArrayList<>->computeIfAbsent->otarget->entries->stream->e->linkedTarget->filter->Arrays->e->contentBytes->entry->contentBytes->equals->filter->findFirst->if->otarget->isPresent->if->ores->entries->stream->e->linkedTarget->filter->findAny->if->ores->isPresent->throw->ores->get->path->entry->path->new->PluginException->entries->add->else->entries->ResourcePoolEntry->entry->path->entry->type->otarget->get->createSymLink->add
LegalNoticeFilePlugin#getType()::: legal notice file plugin get type:::return
LegalNoticeFilePlugin#getDescription()::: legal notice file plugin get description:::return->PluginsResourceBundle->getDescription
LegalNoticeFilePlugin#hasArguments()::: legal notice file plugin has arguments:::return
LegalNoticeFilePlugin#getArgumentsDescription()::: legal notice file plugin get arguments description:::return->PluginsResourceBundle->getArgument
OrderResourcesPlugin#getName()::: order resources plugin get name:::return
OrderResourcesPlugin.SortWrapper#getResource()::: sort wrapper get resource:::return
OrderResourcesPlugin.SortWrapper#getPath()::: sort wrapper get path:::return->resource->path
OrderResourcesPlugin.SortWrapper#getOrdinal()::: sort wrapper get ordinal:::return
OrderResourcesPlugin#stripModule(String)::: order resources plugin strip module:::if->path->startsWith->index->path->indexOf->if->return->path->substring->return
OrderResourcesPlugin#getOrdinal(ResourcePoolEntry)::: order resources plugin get ordinal:::path->resource->path->value->orderedPaths->stripModule->get->if->return->foreach->ordinal->function->applyAsInt->if->return->return
OrderResourcesPlugin#compare(SortWrapper, SortWrapper)::: order resources plugin compare:::compare->wrapper1->getOrdinal->wrapper2->getOrdinal->if->return->return->wrapper1->getPath->wrapper2->getPath->compareTo
OrderResourcesPlugin#transform(ResourcePool, ResourcePoolBuilder)::: order resources plugin transform:::in->entries->resource->type->equals->filter->getOrdinal->new->SortWrapper->map->OrderResourcesPlugin->compare->sorted->out->wrapper->getResource->add->forEach->in->entries->other->type->equals->filter->out->add->forEach->return->out->build
OrderResourcesPlugin#getType()::: order resources plugin get type:::return
OrderResourcesPlugin#getDescription()::: order resources plugin get description:::return->PluginsResourceBundle->getDescription
OrderResourcesPlugin#hasArguments()::: order resources plugin has arguments:::return
OrderResourcesPlugin#getArgumentsDescription()::: order resources plugin get arguments description:::return->PluginsResourceBundle->getArgument
OrderResourcesPlugin#configure(Map)::: order resources plugin configure:::patterns->Utils->config->get->parseList->ordinal->foreach->if->pattern->startsWith->file->pattern->substring->new->File->if->file->exists->lines->try->Files->file->toPath->readAllLines->catch->throw->new->UncheckedIOException->finally->foreach->if->line->startsWith->orderedPaths->put->else->result->matcher->Utils->getPathMatcher->function->matcher->JRT_FILE_SYSTEM->getPath->matches->filters->add
PluginsResourceBundle#getArgument(String, Object...)::: plugins resource bundle get argument:::return->getMessage
PluginsResourceBundle#getDescription(String)::: plugins resource bundle get description:::return->getMessage
PluginsResourceBundle#getOption(String, String)::: plugins resource bundle get option:::return->getMessage
PluginsResourceBundle#getMessage(String, Object...)::: plugins resource bundle get message:::val->pluginsBundle->getString->return->MessageFormat->format
ReleaseInfoPlugin#getType()::: release info plugin get type:::return
ReleaseInfoPlugin#getName()::: release info plugin get name:::return
ReleaseInfoPlugin#getDescription()::: release info plugin get description:::return->PluginsResourceBundle->getDescription
ReleaseInfoPlugin#getState()::: release info plugin get state:::return->EnumSet->of
ReleaseInfoPlugin#hasArguments()::: release info plugin has arguments:::return
ReleaseInfoPlugin#getArgumentsDescription()::: release info plugin get arguments description:::return->PluginsResourceBundle->getArgument
ReleaseInfoPlugin#configure(Map)::: release info plugin configure:::operation->config->get->if->return->switch->config->keySet->stream->NAME->equals->filter->release->config->get->put->forEach->break->Utils->config->get->parseList->stream->release->remove->forEach->break->props->new->Properties->try->fis->new->FileInputStream->props->load->catch->throw->new->UncheckedIOException->finally->props->release->k->toString->v->toString->put->forEach->break
ReleaseInfoPlugin#transform(ResourcePool, ResourcePoolBuilder)::: release info plugin transform:::in->Function->identity->transformAndCopy->javaBase->in->moduleView->findModule->orElse->if->javaBase->targetPlatform->throw->new->PluginException->desc->javaBase->descriptor->desc->version->release->parseVersion->quote->put->ifPresent->release->in->moduleView->new->ModuleSorter->sorted->ResourcePoolModule->name->map->Collectors->joining->collect->put->out->ResourcePoolEntry->releaseFileContent->create->add->return->out->build
ReleaseInfoPlugin#parseVersion(ModuleDescriptor.Version)::: release info plugin parse version:::return->v->toString->parse->version->stream->Object->toString->map->Collectors->joining->collect
ReleaseInfoPlugin#quote(String)::: release info plugin quote:::return
ReleaseInfoPlugin#releaseFileContent()::: release info plugin release file content:::baos->new->ByteArrayOutputStream->try->pw->new->PrintWriter->release->entrySet->stream->comparingByKey->sorted->pw->e->getKey->e->getValue->format->forEach->catch->finally->return->baos->toByteArray
ResourceFilter#includeFilter(List)::: resource filter include filter:::Objects->requireNonNull->return->new->ResourceFilter
ResourceFilter#includeFilter(String)::: resource filter include filter:::if->return->includeFilter->return->Utils->parseList->includeFilter
ResourceFilter#excludeFilter(List)::: resource filter exclude filter:::Objects->requireNonNull->return->new->ResourceFilter
ResourceFilter#excludeFilter(String)::: resource filter exclude filter:::if->return->excludeFilter->return->Utils->parseList->excludeFilter
ResourceFilter#test(String)::: resource filter test:::Objects->requireNonNull->path->Utils->getJRTFSPath->foreach->if->matcher->matches->return->return
StringSharingPlugin.CompactCPHelper.DescriptorsScanner#scan()::: descriptors scanner scan:::utf8Descriptors->new->HashSet<>->scanConstantPool->scanFields->scanMethods->scanAttributes->return
StringSharingPlugin.CompactCPHelper.DescriptorsScanner#scanAttributes(Attributes, Set)::: descriptors scanner scan attributes:::foreach->if->sig->utf8Descriptors->add->else->if->an->foreach->scanAnnotation->else->if->an->foreach->scanAnnotation->else->if->rap->foreach->foreach->scanAnnotation->else->if->lvt->foreach->utf8Descriptors->add->else->if->lvt->foreach->utf8Descriptors->add
StringSharingPlugin.CompactCPHelper.DescriptorsScanner#scanAnnotation(Annotation, Set)::: descriptors scanner scan annotation:::utf8Descriptors->add->foreach->utf8Descriptors->add->scanElementValue
StringSharingPlugin.CompactCPHelper.DescriptorsScanner#scanElementValue(Annotation.element_value, Set)::: descriptors scanner scan element value:::if->eev->utf8Descriptors->add->if->eev->utf8Descriptors->add->if->aev->scanAnnotation->if->aev->foreach->scanElementValue
StringSharingPlugin.CompactCPHelper.DescriptorsScanner#scanFields(Set)::: descriptors scanner scan fields:::foreach->descriptorIndex->utf8Descriptors->add->scanAttributes
StringSharingPlugin.CompactCPHelper.DescriptorsScanner#scanMethods(Set)::: descriptors scanner scan methods:::foreach->descriptorIndex->utf8Descriptors->add->scanAttributes
StringSharingPlugin.CompactCPHelper.DescriptorsScanner#scanConstantPool(Set)::: descriptors scanner scan constant pool:::for->i->size
StringSharingPlugin.CompactCPHelper#transform(ResourcePoolEntry, ResourcePoolBuilder, StringTable)::: compact helper transform:::content->resource->contentBytes->cf->try->stream->new->ByteArrayInputStream->ClassFile->read->catch->throw->resource->path->new->IOException->finally->scanner->new->DescriptorsScanner->return->scanner->scan->optimize
StringSharingPlugin.CompactCPHelper#optimize(ResourcePoolEntry, ResourcePoolBuilder, StringTable, Set, byte[])::: compact helper optimize:::stream->new->ByteArrayInputStream->new->DataInputStream->outStream->new->ByteArrayOutputStream->out->new->DataOutputStream->header->new->byteArr->stream->readFully->out->write->count->stream->readUnsignedShort->out->writeShort->for->i->out->stream->available->stream->available->write->out->flush->return->outStream->toByteArray
StringSharingPlugin.CompactCPHelper#writeDescriptorReference(DataOutputStream, List)::: compact helper write descriptor reference:::buffers->new->ArrayList<>->l->foreach->buffer->CompressIndexes->compress->buffers->add->bb->ByteBuffer->allocate->buffers->stream->bb->put->forEach->compressed_indices->bb->array->compressed_size->CompressIndexes->compress->out->write->out->write
StringSharingPlugin.CompactCPHelper#writeUTF8Reference(DataOutputStream, int)::: compact helper write f8 reference:::out->write->compressed->CompressIndexes->compress->out->write
StringSharingPlugin#getType()::: string sharing plugin get type:::return
StringSharingPlugin#transform(ResourcePool, ResourcePoolBuilder)::: string sharing plugin transform:::visit->new->CompactCPHelper->in->res->if->predicate->resource->path->test->resource->path->endsWith->compressed->try->visit->getStringTable->transform->catch->throw->new->PluginException->finally->ResourcePoolManager->ByteBuffer->wrap->getName->getStringTable->in->byteOrder->newCompressedResource->return->transformAndCopy->return->result->build
StringSharingPlugin#getName()::: string sharing plugin get name:::return
StringSharingPlugin#getDescription()::: string sharing plugin get description:::return->PluginsResourceBundle->getDescription
StringSharingPlugin#hasArguments()::: string sharing plugin has arguments:::return
StringSharingPlugin#getArgumentsDescription()::: string sharing plugin get arguments description:::return->PluginsResourceBundle->getArgument
StringSharingPlugin#configure(Map)::: string sharing plugin configure:::ResourceFilter->config->get->includeFilter
StringSharingPlugin#previsit(ResourcePool, StringTable)::: string sharing plugin previsit:::preVisit->new->CompactCPHelper->resources->entries->if->resource->type->equals->resource->path->endsWith->predicate->resource->path->test->try->preVisit->transform->catch->throw->new->PluginException->finally->forEach
StripDebugPlugin#getName()::: strip debug plugin get name:::return
StripDebugPlugin#getDescription()::: strip debug plugin get description:::return->PluginsResourceBundle->getDescription
StripDebugPlugin#transform(ResourcePool, ResourcePoolBuilder)::: strip debug plugin transform:::in->res->if->resource->type->equals->path->resource->path->if->path->endsWith->if->path->endsWith->else->reader->resource->contentBytes->new->ClassReader->writer->new->ClassWriter->reader->accept->content->writer->toByteArray->resource->copyWithContent->else->if->predicate->res->path->test->return->transformAndCopy->return->out->build
StripNativeCommandsPlugin#getName()::: strip native commands plugin get name:::return
StripNativeCommandsPlugin#getType()::: strip native commands plugin get type:::return
StripNativeCommandsPlugin#transform(ResourcePool, ResourcePoolBuilder)::: strip native commands plugin transform:::in->return->file->type->transformAndCopy->return->out->build
StripNativeCommandsPlugin#getDescription()::: strip native commands plugin get description:::return->PluginsResourceBundle->getDescription
SystemModulesPlugin#getName()::: system modules plugin get name:::return
SystemModulesPlugin#getDescription()::: system modules plugin get description:::return
SystemModulesPlugin#getState()::: system modules plugin get state:::return->EnumSet->of->EnumSet->of
SystemModulesPlugin#hasArguments()::: system modules plugin has arguments:::return
SystemModulesPlugin#getArgumentsDescription()::: system modules plugin get arguments description:::return->PluginsResourceBundle->getArgument
SystemModulesPlugin#configure(Map)::: system modules plugin configure:::arg->config->get->if->throw->new->IllegalArgumentException
SystemModulesPlugin#transform(ResourcePool, ResourcePoolBuilder)::: system modules plugin transform:::if->throw->new->PluginException->moduleInfos->transformModuleInfos->generated->genSystemModulesClasses->in->entries->data->path->endsWith->generated->data->path->contains->filter->out->add->forEach->return->out->build
SystemModulesPlugin#transformModuleInfos(ResourcePool, ResourcePoolBuilder):::Validates and transforms the module-info.class files in the modules, adding the ModulePackages class file attribute if needed.:::moduleInfos->new->ArrayList<>->in->moduleView->new->ModuleSorter->sorted->data->module->findEntry->module->name->new->PluginException->orElseThrow->try->content->data->contentBytes->packages->module->packages->moduleInfo->new->ModuleInfo->moduleInfo->validateNames->moduleInfo->validatePackages->if->moduleInfo->shouldRewrite->data->moduleInfo->getBytes->copyWithContent->moduleInfos->add->out->add->catch->throw->new->PluginException->finally->forEach->return
SystemModulesPlugin#genSystemModulesClasses(List, ResourcePoolBuilder):::Generates the SystemModules classes (at least one) and the SystemModulesMap class to map initial modules to a SystemModules class.:::moduleCount->moduleInfos->size->finder->finderOf->map->new->LinkedHashMap<>->generated->new->HashSet<>->allModuleNames->moduleInfos->stream->ModuleInfo->moduleName->map->Collectors->toSet->collect->rn->resolve->genSystemModulesClass->generated->add->defaultSystemModulesClassName->cf->DefaultRoots->compute->resolve->if->cf->modules->size->else->sublist->genSystemModulesClass->generated->add->suffix->foreach->if->mi->descriptor->mainClass->isPresent->moduleName->mi->moduleName->Set->of->resolve->if->cf->modules->size->map->put->else->cn->sublist->genSystemModulesClass->map->put->generated->add->genSystemModulesMapClass->generated->add->return
SystemModulesPlugin#resolve(ModuleFinder, Set):::Resolves a collection of root modules, with service binding, to create configuration.:::return->Configuration->empty->ModuleFinder->of->resolveAndBind
SystemModulesPlugin#sublist(List, Configuration):::Returns the list of ModuleInfo objects that correspond to the modules in the given configuration.:::names->cf->modules->stream->ResolvedModule->name->map->Collectors->toSet->collect->return->moduleInfos->stream->names->mi->moduleName->contains->filter->Collectors->toList->collect
SystemModulesPlugin#genSystemModulesClass(List, Configuration, String, ResourcePoolBuilder):::Generate a SystemModules implementation class and add it as a resource.:::generator->new->SystemModulesClassGenerator->bytes->generator->getClassWriter->toByteArray->rn->e->ResourcePoolEntry->create->out->add->return
SystemModulesPlugin.ModuleInfo#moduleName()::: module info module name:::return->attrs->descriptor->name
SystemModulesPlugin.ModuleInfo#descriptor()::: module info descriptor:::return
SystemModulesPlugin.ModuleInfo#packages()::: module info packages:::return
SystemModulesPlugin.ModuleInfo#target()::: module info target:::return->attrs->target
SystemModulesPlugin.ModuleInfo#recordedHashes()::: module info recorded hashes:::return->attrs->recordedHashes
SystemModulesPlugin.ModuleInfo#moduleResolution()::: module info module resolution:::return->attrs->moduleResolution
SystemModulesPlugin.ModuleInfo#validateNames():::Validates names in ModuleDescriptor:::Checks->descriptor->name->requireModuleName->foreach->descriptor->requires->Checks->req->name->requireModuleName->foreach->descriptor->exports->Checks->e->source->requirePackageName->if->e->isQualified->e->targets->Checks->requireModuleName->forEach->foreach->descriptor->opens->Checks->opens->source->requirePackageName->if->opens->isQualified->opens->targets->Checks->requireModuleName->forEach->foreach->descriptor->provides->Checks->provides->service->requireServiceTypeName->provides->providers->Checks->requireServiceProviderName->forEach->foreach->descriptor->uses->Checks->requireServiceTypeName->foreach->descriptor->packages->Checks->requirePackageName->foreach->Checks->requirePackageName
SystemModulesPlugin.ModuleInfo#validatePackages():::Validates if exported and open packages are present:::nonExistPackages->new->TreeSet<>->descriptor->exports->stream->Exports->source->map->packages->contains->filter->nonExistPackages->add->forEach->descriptor->opens->stream->Opens->source->map->packages->contains->filter->nonExistPackages->add->forEach->if->nonExistPackages->isEmpty->throw->descriptor->name->new->PluginException
SystemModulesPlugin.ModuleInfo#hasModulePackages()::: module info has module packages:::packages->new->HashSet<>->cv->new->ClassVisitor->try->in->getInputStream->cr->new->ClassReader->cr->accept->return->packages->size->catch->finally
SystemModulesPlugin.ModuleInfo#shouldRewrite():::Returns true if module-info.class should be rewritten to add the ModulePackages attribute.:::return
SystemModulesPlugin.ModuleInfo#getBytes():::Returns the bytes for the (possibly updated) module-info.class.:::try->in->getInputStream->if->shouldRewrite->rewriter->new->ModuleInfoRewriter->if->rewriter->addModulePackages->bytes->rewriter->getBytes->try->bais->new->ByteArrayInputStream->ModuleDescriptor->read->catch->finally->return->else->return->in->readAllBytes->catch->finally
SystemModulesPlugin.ModuleInfo#getInputStream()::: module info get input stream:::bais->reset->return
SystemModulesPlugin.ModuleInfo.ModuleInfoRewriter#addModulePackages(Set)::: module info rewriter add module packages:::if->packages->size->extender->packages
SystemModulesPlugin.ModuleInfo.ModuleInfoRewriter#getBytes()::: module info rewriter get bytes:::extender->write->return
SystemModulesPlugin.SystemModulesClassGenerator#getNextLocalVar()::: system modules class generator get next local var:::return
SystemModulesPlugin.SystemModulesClassGenerator#dedups(ModuleDescriptor)::: system modules class generator dedups:::foreach->md->exports->dedupSetBuilder->e->targets->stringSet->dedupSetBuilder->e->modifiers->exportsModifiers->foreach->md->opens->dedupSetBuilder->opens->targets->stringSet->dedupSetBuilder->opens->modifiers->opensModifiers->foreach->md->requires->dedupSetBuilder->r->modifiers->requiresModifiers->dedupSetBuilder->md->uses->stringSet
SystemModulesPlugin.SystemModulesClassGenerator#getClassWriter(Configuration):::Generate SystemModules class:::cw->new->ClassWriter->cw->new->StringArr->visit->genConstructor->genHasSplitPackages->genIncubatorModules->genModuleDescriptorsMethod->genModuleTargetsMethod->genModuleHashesMethod->genModuleResolutionsMethod->genModuleReads->genXXXPackagesToOpenMethods->return
SystemModulesPlugin.SystemModulesClassGenerator#genConstructor(ClassWriter):::Generate byteccode for no-arg constructor:::mv->cw->visitMethod->mv->visitVarInsn->mv->visitMethodInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd
SystemModulesPlugin.SystemModulesClassGenerator#genHasSplitPackages(ClassWriter):::Generate bytecode for hasSplitPackages method:::distinct->moduleInfos->stream->ModuleInfo->packages->map->Set->stream->flatMap->new->HashSet<>->add->allMatch->hasSplitPackages->cw->visitMethod->mv->visitCode->if->mv->visitInsn->else->mv->visitInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd
SystemModulesPlugin.SystemModulesClassGenerator#genIncubatorModules(ClassWriter):::Generate bytecode for hasIncubatorModules method:::hasIncubatorModules->moduleInfos->stream->ModuleInfo->moduleResolution->map->mres->hasIncubatingWarning->filter->findFirst->isPresent->cw->visitMethod->mv->visitCode->if->mv->visitInsn->else->mv->visitInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd
SystemModulesPlugin.SystemModulesClassGenerator#genModuleDescriptorsMethod(ClassWriter):::Generate bytecode for moduleDescriptors method:::cw->visitMethod->mv->visitCode->moduleInfos->size->pushInt->mv->visitTypeInsn->mv->visitVarInsn->for->index->moduleInfos->size->mv->visitVarInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd
SystemModulesPlugin.SystemModulesClassGenerator#genModuleTargetsMethod(ClassWriter):::Generate bytecode for moduleTargets method:::mv->cw->visitMethod->mv->visitCode->moduleInfos->size->pushInt->mv->visitTypeInsn->mv->visitVarInsn->base->moduleInfos->get->if->base->moduleName->equals->throw->new->InternalError->target->base->target->count->if->target->targetPlatform->else->moduleInfos->size->for->index->mv->visitVarInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd
SystemModulesPlugin.SystemModulesClassGenerator#genModuleHashesMethod(ClassWriter):::Generate bytecode for moduleHashes method:::hmv->cw->visitMethod->hmv->visitCode->moduleInfos->size->pushInt->hmv->visitTypeInsn->hmv->visitVarInsn->for->index->moduleInfos->size->hmv->visitVarInsn->hmv->visitInsn->hmv->visitMaxs->hmv->visitEnd
SystemModulesPlugin.SystemModulesClassGenerator#genModuleResolutionsMethod(ClassWriter):::Generate bytecode for moduleResolutions method:::mresmv->cw->visitMethod->mresmv->visitCode->moduleInfos->size->pushInt->mresmv->visitTypeInsn->mresmv->visitVarInsn->for->index->moduleInfos->size->mresmv->visitVarInsn->mresmv->visitInsn->mresmv->visitMaxs->mresmv->visitEnd
SystemModulesPlugin.SystemModulesClassGenerator#genModuleReads(ClassWriter, Configuration):::Generate bytecode for moduleReads method:::map->cf->modules->stream->Collectors->ResolvedModule->name->m->reads->stream->ResolvedModule->name->map->Collectors->toSet->collect->toMap->collect->generate
SystemModulesPlugin.SystemModulesClassGenerator#genXXXPackagesToOpenMethods(ClassWriter):::Generate concealedPackagesToOpen and exportedPackagesToOpen methods.:::finder->finderOf->maps->IllegalAccessMaps->generate->maps->concealedPackagesToOpen->generate->maps->exportedPackagesToOpen->generate
SystemModulesPlugin.SystemModulesClassGenerator#generate(ClassWriter, String, Map>, boolean):::Generate method to return Map<String, Set<String>>:::mv->cw->visitMethod->mv->visitCode->locals->if->values->map->values->duplicateSets->values->stream->distinct->Collections->frequency->filter->Collectors->toSet->collect->new->HashMap<>->index->foreach->genImmutableSet->mv->visitVarInsn->locals->put->if->break->else->Map->of->map->size->pushInt->mv->visitTypeInsn->index->foreach->map->entrySet->name->e->getKey->s->e->getValue->mv->visitInsn->pushInt->mv->visitLdcInsn->varIndex->locals->get->if->genImmutableSet->else->mv->visitVarInsn->desc->mv->visitMethodInsn->mv->visitInsn->mv->visitMethodInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd
SystemModulesPlugin.SystemModulesClassGenerator#genImmutableSet(MethodVisitor, Set):::Generate code to generate an immutable set.:::size->set->size->if->pushInt->mv->visitTypeInsn->i->foreach->mv->visitInsn->pushInt->mv->visitLdcInsn->mv->visitInsn->mv->visitMethodInsn->else->sb->new->StringBuilder->foreach->mv->visitLdcInsn->sb->append->sb->append->mv->sb->toString->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#build()::: module descriptor builder build:::newBuilder->md->requires->requires->md->exports->exports->md->opens->opens->md->uses->uses->md->provides->provides->packages->md->version->this->version->ifPresent->md->mainClass->this->mainClass->ifPresent->putModuleDescriptor
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newBuilder()::: module descriptor builder new builder:::mv->visitTypeInsn->mv->visitInsn->mv->md->name->visitLdcInsn->mv->visitMethodInsn->mv->visitVarInsn->mv->visitVarInsn->if->md->isOpen->setModuleBit->if->md->modifiers->contains->setModuleBit->if->md->modifiers->contains->setModuleBit
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#setModuleBit(String, boolean)::: module descriptor builder set module bit:::mv->visitVarInsn->if->mv->visitInsn->else->mv->visitInsn->mv->visitMethodInsn->mv->visitInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#putModuleDescriptor()::: module descriptor builder put module descriptor:::mv->visitVarInsn->pushInt->mv->visitVarInsn->mv->md->hashCode->visitLdcInsn->mv->visitMethodInsn->mv->visitInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#requires(Set)::: module descriptor builder requires:::mv->visitVarInsn->requires->size->pushInt->mv->visitTypeInsn->arrayIndex->foreach->compiledVersion->if->require->compiledVersion->isPresent->require->compiledVersion->get->toString->mv->visitInsn->pushInt->require->modifiers->require->name->newRequires->mv->visitInsn->mv->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newRequires(Set, String, String)::: module descriptor builder new requires:::varIndex->dedupSetBuilder->indexOfRequiresModifiers->mv->visitVarInsn->mv->visitLdcInsn->if->mv->visitLdcInsn->mv->visitMethodInsn->else->mv->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#exports(Set)::: module descriptor builder exports:::mv->visitVarInsn->exports->size->pushInt->mv->visitTypeInsn->arrayIndex->foreach->mv->visitInsn->pushInt->export->modifiers->export->source->export->targets->newExports->mv->visitInsn->mv->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newExports(Set, String, Set)::: module descriptor builder new exports:::modifiersSetIndex->dedupSetBuilder->indexOfExportsModifiers->if->targets->isEmpty->stringSetIndex->dedupSetBuilder->indexOfStringSet->mv->visitVarInsn->mv->visitLdcInsn->mv->visitVarInsn->mv->visitMethodInsn->else->mv->visitVarInsn->mv->visitLdcInsn->mv->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#opens(Set):::Call Builder::newOpens to create Opens instances and then pass it to the builder by calling: Builder.opens(Opens[]):::mv->visitVarInsn->opens->size->pushInt->mv->visitTypeInsn->arrayIndex->foreach->mv->visitInsn->pushInt->open->modifiers->open->source->open->targets->newOpens->mv->visitInsn->mv->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newOpens(Set, String, Set)::: module descriptor builder new opens:::modifiersSetIndex->dedupSetBuilder->indexOfOpensModifiers->if->targets->isEmpty->stringSetIndex->dedupSetBuilder->indexOfStringSet->mv->visitVarInsn->mv->visitLdcInsn->mv->visitVarInsn->mv->visitMethodInsn->else->mv->visitVarInsn->mv->visitLdcInsn->mv->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#uses(Set)::: module descriptor builder uses:::varIndex->dedupSetBuilder->indexOfStringSet->mv->visitVarInsn->mv->visitVarInsn->mv->visitMethodInsn->mv->visitInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#provides(Collection)::: module descriptor builder provides:::mv->visitVarInsn->provides->size->pushInt->mv->visitTypeInsn->arrayIndex->foreach->mv->visitInsn->pushInt->provide->service->provide->providers->newProvides->mv->visitInsn->mv->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newProvides(String, List)::: module descriptor builder new provides:::mv->visitLdcInsn->providers->size->pushInt->mv->visitTypeInsn->arrayIndex->foreach->mv->visitInsn->pushInt->mv->visitLdcInsn->mv->visitInsn->mv->visitMethodInsn->mv->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#packages(Set)::: module descriptor builder packages:::varIndex->dedupSetBuilder->newStringSet->mv->visitVarInsn->mv->visitVarInsn->mv->visitMethodInsn->mv->visitInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#mainClass(String)::: module descriptor builder main class:::mv->visitVarInsn->mv->visitLdcInsn->mv->visitMethodInsn->mv->visitInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#version(Version)::: module descriptor builder version:::mv->visitVarInsn->mv->v->toString->visitLdcInsn->mv->visitMethodInsn->mv->visitInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#invokeBuilderMethod(String, String)::: module descriptor builder invoke builder method:::mv->visitVarInsn->mv->visitLdcInsn->mv->visitMethodInsn->mv->visitInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleHashesBuilder#build():::Build ModuleHashes:::if->return->newModuleHashesBuilder->recordedHashes->names->recordedHashes->hashFor->hashForModule->forEach->pushModuleHashes
SystemModulesPlugin.SystemModulesClassGenerator.ModuleHashesBuilder#newModuleHashesBuilder()::: module hashes builder new module hashes builder:::hmv->visitTypeInsn->hmv->visitInsn->hmv->recordedHashes->algorithm->visitLdcInsn->recordedHashes->names->size->pushInt->hmv->visitMethodInsn->hmv->visitVarInsn->hmv->visitVarInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleHashesBuilder#pushModuleHashes()::: module hashes builder push module hashes:::hmv->visitVarInsn->pushInt->hmv->visitVarInsn->hmv->visitMethodInsn->hmv->visitInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleHashesBuilder#hashForModule(String, byte[])::: module hashes builder hash for module:::hmv->visitVarInsn->hmv->visitLdcInsn->pushInt->hmv->visitIntInsn->for->i->hmv->visitMethodInsn->hmv->visitInsn
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#stringSet(Set)::: dedup set builder string set:::stringSets->new->SetBuilder<>->computeIfAbsent->increment
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#exportsModifiers(Set)::: dedup set builder exports modifiers:::exportsModifiersSets->new->EnumSetBuilder<>->computeIfAbsent->increment
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#opensModifiers(Set)::: dedup set builder opens modifiers:::opensModifiersSets->new->EnumSetBuilder<>->computeIfAbsent->increment
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#requiresModifiers(Set)::: dedup set builder requires modifiers:::requiresModifiersSets->new->EnumSetBuilder<>->computeIfAbsent->increment
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#indexOfStringSet(Set)::: dedup set builder index of string set:::return->stringSets->get->build
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#indexOfExportsModifiers(Set)::: dedup set builder index of exports modifiers:::return->exportsModifiersSets->get->build
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#indexOfOpensModifiers(Set):::Retrieve the index to the given set of Opens.Modifier:::return->opensModifiersSets->get->build
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#indexOfRequiresModifiers(Set)::: dedup set builder index of requires modifiers:::return->requiresModifiersSets->get->build
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#newStringSet(Set)::: dedup set builder new string set:::index->new->SetBuilder<>->build->return
SystemModulesPlugin.SystemModulesClassGenerator.SetBuilder#increment()::: set builder increment:::
SystemModulesPlugin.SystemModulesClassGenerator.SetBuilder#visitElement(T, MethodVisitor):::Generate the appropriate instructions to load an object reference to the element onto the stack.:::mv->visitLdcInsn
SystemModulesPlugin.SystemModulesClassGenerator.SetBuilder#build()::: set builder build:::index->if->nextLocalVar->getAsInt->if->else->generateSetOf->return
SystemModulesPlugin.SystemModulesClassGenerator.SetBuilder#generateSetOf(int)::: set builder generate set of:::if->elements->size->sb->new->StringBuilder->foreach->sb->append->visitElement->sb->append->mv->sb->toString->visitMethodInsn->else->elements->size->pushInt->mv->visitTypeInsn->arrayIndex->foreach->mv->visitInsn->pushInt->visitElement->mv->visitInsn->mv->visitMethodInsn->mv->visitVarInsn
SystemModulesPlugin.SystemModulesClassGenerator.EnumSetBuilder#visitElement(T, MethodVisitor):::Loads an Enum field.:::mv->t->toString->visitFieldInsn
SystemModulesPlugin#genSystemModulesMapClass(String, String, Map, ResourcePoolBuilder):::Generate SystemModulesMap and add it as a resource.:::cw->new->ClassWriter->cw->visit->mv->cw->visitMethod->mv->visitVarInsn->mv->visitMethodInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd->cw->visitMethod->mv->visitCode->mv->visitTypeInsn->mv->visitInsn->mv->visitMethodInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd->cw->visitMethod->mv->visitCode->mv->visitTypeInsn->mv->visitInsn->mv->visitMethodInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd->cw->visitMethod->mv->visitCode->map->size->pushInt->mv->visitTypeInsn->index->foreach->map->keySet->mv->visitInsn->pushInt->mv->visitLdcInsn->mv->visitInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd->cw->visitMethod->mv->visitCode->map->size->pushInt->mv->visitTypeInsn->foreach->map->values->mv->visitInsn->pushInt->mv->className->replace->visitLdcInsn->mv->visitInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd->rn->e->ResourcePoolEntry->cw->toByteArray->create->out->add->return
SystemModulesPlugin#pushInt(MethodVisitor, int):::Pushes an int constant:::if->mv->visitInsn->else->if->mv->visitIntInsn->else->if->mv->visitIntInsn->else->throw->new->IllegalArgumentException
SystemModulesPlugin#finderOf(Collection):::Returns a module finder that finds all modules in the given list:::readerSupplier->namesToReference->new->HashMap<>->foreach->name->mi->moduleName->mref->mi->descriptor->URI->create->mi->target->mi->moduleResolution->new->ModuleReferenceImpl->namesToReference->put->return->new->ModuleFinder
VersionPropsPlugin#getName()::: version props plugin get name:::return
VersionPropsPlugin#getDescription()::: version props plugin get description:::return->PluginsResourceBundle->getDescription
VersionPropsPlugin#getType()::: version props plugin get type:::return
VersionPropsPlugin#hasArguments()::: version props plugin has arguments:::return
VersionPropsPlugin#hasRawArgument()::: version props plugin has raw argument:::return
VersionPropsPlugin#getArgumentsDescription()::: version props plugin get arguments description:::return->PluginsResourceBundle->getArgument
VersionPropsPlugin#configure(Map)::: version props plugin configure:::v->config->get->if->throw->new->AssertionError
VersionPropsPlugin#redefine(byte[])::: version props plugin redefine:::cr->new->ClassReader->cw->new->ClassWriter->cr->new->ClassVisitor->accept->return->cw->toByteArray
VersionPropsPlugin#transform(ResourcePool, ResourcePoolBuilder)::: version props plugin transform:::in->if->res->type->equals->if->res->path->equals->return->res->res->contentBytes->redefine->copyWithContent->return->transformAndCopy->if->throw->new->AssertionError->return->out->build
ZipPlugin#getName()::: zip plugin get name:::return
ZipPlugin#getType()::: zip plugin get type:::return
ZipPlugin#getDescription()::: zip plugin get description:::return->PluginsResourceBundle->getDescription
ZipPlugin#hasArguments()::: zip plugin has arguments:::return
ZipPlugin#getArgumentsDescription()::: zip plugin get arguments description:::return->PluginsResourceBundle->getArgument
ZipPlugin#configure(Map)::: zip plugin configure:::ResourceFilter->config->get->includeFilter
ZipPlugin#compress(byte[])::: zip plugin compress:::deflater->new->Deflater->deflater->setInput->stream->new->ByteArrayOutputStream->buffer->new->byteArr->deflater->finish->while->deflater->finished->count->deflater->deflate->stream->write->try->stream->close->catch->return->finally->bytesOut->stream->toByteArray->deflater->end->return
ZipPlugin#transform(ResourcePool, ResourcePoolBuilder)::: zip plugin transform:::in->res->if->resource->type->equals->predicate->resource->path->test->compressed->resource->contentBytes->compress->ResourcePoolManager->ByteBuffer->wrap->getName->getStringTable->in->byteOrder->newCompressedResource->return->transformAndCopy->return->out->build

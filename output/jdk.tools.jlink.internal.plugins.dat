jdk.tools.jlink.internal.plugins.AddResourcePlugin#getName()->String::: add resource plugin get name
jdk.tools.jlink.internal.plugins.AddResourcePlugin#getDescription()->String::: add resource plugin get description
jdk.tools.jlink.internal.plugins.AddResourcePlugin#getType()->Category::: add resource plugin get type
jdk.tools.jlink.internal.plugins.AddResourcePlugin#hasArguments()->boolean::: add resource plugin has arguments
jdk.tools.jlink.internal.plugins.AddResourcePlugin#hasRawArgument()->boolean::: add resource plugin has raw argument
jdk.tools.jlink.internal.plugins.AddResourcePlugin#getArgumentsDescription()->String::: add resource plugin get arguments description
jdk.tools.jlink.internal.plugins.AddResourcePlugin#configure(Map)->void::: add resource plugin configure
jdk.tools.jlink.internal.plugins.AddResourcePlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: add resource plugin transform
jdk.tools.jlink.internal.plugins.DefaultCompressPlugin#getName()->String::: default compress plugin get name
jdk.tools.jlink.internal.plugins.DefaultCompressPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: default compress plugin transform
jdk.tools.jlink.internal.plugins.DefaultCompressPlugin#previsit(ResourcePool, StringTable)->void::: default compress plugin previsit
jdk.tools.jlink.internal.plugins.DefaultCompressPlugin#getType()->Category::: default compress plugin get type
jdk.tools.jlink.internal.plugins.DefaultCompressPlugin#getDescription()->String::: default compress plugin get description
jdk.tools.jlink.internal.plugins.DefaultCompressPlugin#hasArguments()->boolean::: default compress plugin has arguments
jdk.tools.jlink.internal.plugins.DefaultCompressPlugin#getArgumentsDescription()->String::: default compress plugin get arguments description
jdk.tools.jlink.internal.plugins.DefaultCompressPlugin#configure(Map)->void::: default compress plugin configure
jdk.tools.jlink.internal.plugins.ExcludeFilesPlugin#getName()->String::: exclude files plugin get name
jdk.tools.jlink.internal.plugins.ExcludeFilesPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: exclude files plugin transform
jdk.tools.jlink.internal.plugins.ExcludeFilesPlugin#getType()->Category::: exclude files plugin get type
jdk.tools.jlink.internal.plugins.ExcludeFilesPlugin#getDescription()->String::: exclude files plugin get description
jdk.tools.jlink.internal.plugins.ExcludeFilesPlugin#hasArguments()->boolean::: exclude files plugin has arguments
jdk.tools.jlink.internal.plugins.ExcludeFilesPlugin#getArgumentsDescription()->String::: exclude files plugin get arguments description
jdk.tools.jlink.internal.plugins.ExcludeFilesPlugin#configure(Map)->void::: exclude files plugin configure
jdk.tools.jlink.internal.plugins.ExcludeJmodSectionPlugin#getName()->String::: exclude jmod section plugin get name
jdk.tools.jlink.internal.plugins.ExcludeJmodSectionPlugin#configure(Map)->void::: exclude jmod section plugin configure
jdk.tools.jlink.internal.plugins.ExcludeJmodSectionPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: exclude jmod section plugin transform
jdk.tools.jlink.internal.plugins.ExcludeJmodSectionPlugin#getType()->Category::: exclude jmod section plugin get type
jdk.tools.jlink.internal.plugins.ExcludeJmodSectionPlugin#getDescription()->String::: exclude jmod section plugin get description
jdk.tools.jlink.internal.plugins.ExcludeJmodSectionPlugin#hasArguments()->boolean::: exclude jmod section plugin has arguments
jdk.tools.jlink.internal.plugins.ExcludeJmodSectionPlugin#getArgumentsDescription()->String::: exclude jmod section plugin get arguments description
jdk.tools.jlink.internal.plugins.ExcludePlugin#getName()->String::: exclude plugin get name
jdk.tools.jlink.internal.plugins.ExcludePlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: exclude plugin transform
jdk.tools.jlink.internal.plugins.ExcludePlugin#getDescription()->String::: exclude plugin get description
jdk.tools.jlink.internal.plugins.ExcludePlugin#hasArguments()->boolean::: exclude plugin has arguments
jdk.tools.jlink.internal.plugins.ExcludePlugin#getArgumentsDescription()->String::: exclude plugin get arguments description
jdk.tools.jlink.internal.plugins.ExcludePlugin#getType()->Category::: exclude plugin get type
jdk.tools.jlink.internal.plugins.ExcludePlugin#configure(Map)->void::: exclude plugin configure
jdk.tools.jlink.internal.plugins.ExcludeVMPlugin#getName()->String::: exclude plugin get name
jdk.tools.jlink.internal.plugins.ExcludeVMPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: exclude plugin transform
jdk.tools.jlink.internal.plugins.ExcludeVMPlugin#getType()->Category::: exclude plugin get type
jdk.tools.jlink.internal.plugins.ExcludeVMPlugin#getDescription()->String::: exclude plugin get description
jdk.tools.jlink.internal.plugins.ExcludeVMPlugin#hasArguments()->boolean::: exclude plugin has arguments
jdk.tools.jlink.internal.plugins.ExcludeVMPlugin#getArgumentsDescription()->String::: exclude plugin get arguments description
jdk.tools.jlink.internal.plugins.ExcludeVMPlugin#configure(Map)->void::: exclude plugin configure
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#getName()->String::: generate classes plugin get name
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#getDescription()->String::: generate classes plugin get description
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#getState()->Set::: generate classes plugin get state
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#hasArguments()->boolean::: generate classes plugin has arguments
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#getArgumentsDescription()->String::: generate classes plugin get arguments description
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#defaultSpecies()->Set::: generate classes plugin default species
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#configure(Map)->void::: generate classes plugin configure
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#initialize(ResourcePool)->void::: generate classes plugin initialize
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: generate classes plugin transform
jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin#expandSignature(String)->String::: generate classes plugin expand signature
jdk.tools.jlink.internal.plugins.IncludeLocalesPlugin#getName()->String::: include locales plugin get name
jdk.tools.jlink.internal.plugins.IncludeLocalesPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: include locales plugin transform
jdk.tools.jlink.internal.plugins.IncludeLocalesPlugin#getType()->Category::: include locales plugin get type
jdk.tools.jlink.internal.plugins.IncludeLocalesPlugin#getDescription()->String::: include locales plugin get description
jdk.tools.jlink.internal.plugins.IncludeLocalesPlugin#hasArguments()->boolean::: include locales plugin has arguments
jdk.tools.jlink.internal.plugins.IncludeLocalesPlugin#getArgumentsDescription()->String::: include locales plugin get arguments description
jdk.tools.jlink.internal.plugins.IncludeLocalesPlugin#configure(Map)->void::: include locales plugin configure
jdk.tools.jlink.internal.plugins.IncludeLocalesPlugin#previsit(ResourcePool, StringTable)->void::: include locales plugin previsit
jdk.tools.jlink.internal.plugins.LegalNoticeFilePlugin#getName()->String::: legal notice file plugin get name
jdk.tools.jlink.internal.plugins.LegalNoticeFilePlugin#getState()->Set::: legal notice file plugin get state
jdk.tools.jlink.internal.plugins.LegalNoticeFilePlugin#configure(Map)->void::: legal notice file plugin configure
jdk.tools.jlink.internal.plugins.LegalNoticeFilePlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: legal notice file plugin transform
jdk.tools.jlink.internal.plugins.LegalNoticeFilePlugin#getType()->Category::: legal notice file plugin get type
jdk.tools.jlink.internal.plugins.LegalNoticeFilePlugin#getDescription()->String::: legal notice file plugin get description
jdk.tools.jlink.internal.plugins.LegalNoticeFilePlugin#hasArguments()->boolean::: legal notice file plugin has arguments
jdk.tools.jlink.internal.plugins.LegalNoticeFilePlugin#getArgumentsDescription()->String::: legal notice file plugin get arguments description
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin#getName()->String::: order resources plugin get name
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin.SortWrapper#getResource()->ResourcePoolEntry::: sort wrapper get resource
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin.SortWrapper#getPath()->String::: sort wrapper get path
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin.SortWrapper#getOrdinal()->int::: sort wrapper get ordinal
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: order resources plugin transform
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin#getType()->Category::: order resources plugin get type
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin#getDescription()->String::: order resources plugin get description
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin#hasArguments()->boolean::: order resources plugin has arguments
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin#getArgumentsDescription()->String::: order resources plugin get arguments description
jdk.tools.jlink.internal.plugins.OrderResourcesPlugin#configure(Map)->void::: order resources plugin configure
jdk.tools.jlink.internal.plugins.PluginsResourceBundle#getArgument(String, Object...)->String::: plugins resource bundle get argument
jdk.tools.jlink.internal.plugins.PluginsResourceBundle#getDescription(String)->String::: plugins resource bundle get description
jdk.tools.jlink.internal.plugins.PluginsResourceBundle#getOption(String, String)->String::: plugins resource bundle get option
jdk.tools.jlink.internal.plugins.PluginsResourceBundle#getMessage(String, Object...)->String::: plugins resource bundle get message
jdk.tools.jlink.internal.plugins.ReleaseInfoPlugin#getType()->Category::: release info plugin get type
jdk.tools.jlink.internal.plugins.ReleaseInfoPlugin#getName()->String::: release info plugin get name
jdk.tools.jlink.internal.plugins.ReleaseInfoPlugin#getDescription()->String::: release info plugin get description
jdk.tools.jlink.internal.plugins.ReleaseInfoPlugin#getState()->Set::: release info plugin get state
jdk.tools.jlink.internal.plugins.ReleaseInfoPlugin#hasArguments()->boolean::: release info plugin has arguments
jdk.tools.jlink.internal.plugins.ReleaseInfoPlugin#getArgumentsDescription()->String::: release info plugin get arguments description
jdk.tools.jlink.internal.plugins.ReleaseInfoPlugin#configure(Map)->void::: release info plugin configure
jdk.tools.jlink.internal.plugins.ReleaseInfoPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: release info plugin transform
jdk.tools.jlink.internal.plugins.ResourceFilter#includeFilter(List)->ResourceFilter::: resource filter include filter
jdk.tools.jlink.internal.plugins.ResourceFilter#includeFilter(String)->ResourceFilter::: resource filter include filter
jdk.tools.jlink.internal.plugins.ResourceFilter#excludeFilter(List)->ResourceFilter::: resource filter exclude filter
jdk.tools.jlink.internal.plugins.ResourceFilter#excludeFilter(String)->ResourceFilter::: resource filter exclude filter
jdk.tools.jlink.internal.plugins.ResourceFilter#test(String)->boolean::: resource filter test
jdk.tools.jlink.internal.plugins.StringSharingPlugin#getType()->Category::: string sharing plugin get type
jdk.tools.jlink.internal.plugins.StringSharingPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: string sharing plugin transform
jdk.tools.jlink.internal.plugins.StringSharingPlugin#getName()->String::: string sharing plugin get name
jdk.tools.jlink.internal.plugins.StringSharingPlugin#getDescription()->String::: string sharing plugin get description
jdk.tools.jlink.internal.plugins.StringSharingPlugin#hasArguments()->boolean::: string sharing plugin has arguments
jdk.tools.jlink.internal.plugins.StringSharingPlugin#getArgumentsDescription()->String::: string sharing plugin get arguments description
jdk.tools.jlink.internal.plugins.StringSharingPlugin#configure(Map)->void::: string sharing plugin configure
jdk.tools.jlink.internal.plugins.StringSharingPlugin#previsit(ResourcePool, StringTable)->void::: string sharing plugin previsit
jdk.tools.jlink.internal.plugins.StripDebugPlugin#getName()->String::: strip debug plugin get name
jdk.tools.jlink.internal.plugins.StripDebugPlugin#getDescription()->String::: strip debug plugin get description
jdk.tools.jlink.internal.plugins.StripDebugPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: strip debug plugin transform
jdk.tools.jlink.internal.plugins.StripNativeCommandsPlugin#getName()->String::: strip native commands plugin get name
jdk.tools.jlink.internal.plugins.StripNativeCommandsPlugin#getType()->Category::: strip native commands plugin get type
jdk.tools.jlink.internal.plugins.StripNativeCommandsPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: strip native commands plugin transform
jdk.tools.jlink.internal.plugins.StripNativeCommandsPlugin#getDescription()->String::: strip native commands plugin get description
jdk.tools.jlink.internal.plugins.SystemModulesPlugin#getName()->String::: system modules plugin get name
jdk.tools.jlink.internal.plugins.SystemModulesPlugin#getDescription()->String::: system modules plugin get description
jdk.tools.jlink.internal.plugins.SystemModulesPlugin#getState()->Set::: system modules plugin get state
jdk.tools.jlink.internal.plugins.SystemModulesPlugin#hasArguments()->boolean::: system modules plugin has arguments
jdk.tools.jlink.internal.plugins.SystemModulesPlugin#getArgumentsDescription()->String::: system modules plugin get arguments description
jdk.tools.jlink.internal.plugins.SystemModulesPlugin#configure(Map)->void::: system modules plugin configure
jdk.tools.jlink.internal.plugins.SystemModulesPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: system modules plugin transform
jdk.tools.jlink.internal.plugins.SystemModulesPlugin#transformModuleInfos(ResourcePool, ResourcePoolBuilder)->List:::Validates and transforms the module-info.class files in the modules, adding the ModulePackages class file attribute if needed.
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#moduleName()->String::: module info module name
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#descriptor()->ModuleDescriptor::: module info descriptor
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#packages()->Set::: module info packages
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#target()->ModuleTarget::: module info target
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#recordedHashes()->ModuleHashes::: module info recorded hashes
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#moduleResolution()->ModuleResolution::: module info module resolution
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#validateNames()->void:::Validates names in ModuleDescriptor
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#validatePackages()->void:::Validates if exported and open packages are present
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#hasModulePackages()->boolean::: module info has module packages
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#shouldRewrite()->boolean:::Returns true if module-info.class should be rewritten to add the ModulePackages attribute.
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#getBytes()->byte[]:::Returns the bytes for the (possibly updated) module-info.class.
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo#getInputStream()->InputStream::: module info get input stream
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo.ModuleInfoRewriter#addModulePackages(Set)->void::: module info rewriter add module packages
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.ModuleInfo.ModuleInfoRewriter#getBytes()->byte[]::: module info rewriter get bytes
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator#getClassWriter(Configuration)->ClassWriter:::Generate SystemModules class
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#build()->void::: module descriptor builder build
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newBuilder()->void::: module descriptor builder new builder
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#setModuleBit(String, boolean)->void::: module descriptor builder set module bit
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#putModuleDescriptor()->void::: module descriptor builder put module descriptor
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#requires(Set)->void::: module descriptor builder requires
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newRequires(Set, String, String)->void::: module descriptor builder new requires
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#exports(Set)->void::: module descriptor builder exports
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newExports(Set, String, Set)->void::: module descriptor builder new exports
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#opens(Set)->void:::Call Builder::newOpens to create Opens instances and then pass it to the builder by calling: Builder.opens(Opens[])
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newOpens(Set, String, Set)->void::: module descriptor builder new opens
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#uses(Set)->void::: module descriptor builder uses
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#provides(Collection)->void::: module descriptor builder provides
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#newProvides(String, List)->void::: module descriptor builder new provides
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#packages(Set)->void::: module descriptor builder packages
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#mainClass(String)->void::: module descriptor builder main class
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#version(Version)->void::: module descriptor builder version
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#invokeBuilderMethod(String, String)->void::: module descriptor builder invoke builder method
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleHashesBuilder#build()->void:::Build ModuleHashes
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleHashesBuilder#newModuleHashesBuilder()->void::: module hashes builder new module hashes builder
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleHashesBuilder#pushModuleHashes()->void::: module hashes builder push module hashes
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.ModuleHashesBuilder#hashForModule(String, byte[])->void::: module hashes builder hash for module
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#stringSet(Set)->void::: dedup set builder string set
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#exportsModifiers(Set)->void::: dedup set builder exports modifiers
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#opensModifiers(Set)->void::: dedup set builder opens modifiers
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#requiresModifiers(Set)->void::: dedup set builder requires modifiers
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#indexOfStringSet(Set)->int::: dedup set builder index of string set
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#indexOfExportsModifiers(Set)->int::: dedup set builder index of exports modifiers
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#indexOfOpensModifiers(Set)->int:::Retrieve the index to the given set of Opens.Modifier
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#indexOfRequiresModifiers(Set)->int::: dedup set builder index of requires modifiers
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#newStringSet(Set)->int::: dedup set builder new string set
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.SetBuilder#increment()->void::: set builder increment
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.SetBuilder#visitElement(T, MethodVisitor)->void:::Generate the appropriate instructions to load an object reference to the element onto the stack.
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.SetBuilder#build()->int::: set builder build
jdk.tools.jlink.internal.plugins.SystemModulesPlugin.SystemModulesClassGenerator.EnumSetBuilder#visitElement(T, MethodVisitor)->void:::Loads an Enum field.
jdk.tools.jlink.internal.plugins.VersionPropsPlugin#getName()->String::: version props plugin get name
jdk.tools.jlink.internal.plugins.VersionPropsPlugin#getDescription()->String::: version props plugin get description
jdk.tools.jlink.internal.plugins.VersionPropsPlugin#getType()->Category::: version props plugin get type
jdk.tools.jlink.internal.plugins.VersionPropsPlugin#hasArguments()->boolean::: version props plugin has arguments
jdk.tools.jlink.internal.plugins.VersionPropsPlugin#hasRawArgument()->boolean::: version props plugin has raw argument
jdk.tools.jlink.internal.plugins.VersionPropsPlugin#getArgumentsDescription()->String::: version props plugin get arguments description
jdk.tools.jlink.internal.plugins.VersionPropsPlugin#configure(Map)->void::: version props plugin configure
jdk.tools.jlink.internal.plugins.VersionPropsPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: version props plugin transform
jdk.tools.jlink.internal.plugins.ZipPlugin#getName()->String::: zip plugin get name
jdk.tools.jlink.internal.plugins.ZipPlugin#getType()->Category::: zip plugin get type
jdk.tools.jlink.internal.plugins.ZipPlugin#getDescription()->String::: zip plugin get description
jdk.tools.jlink.internal.plugins.ZipPlugin#hasArguments()->boolean::: zip plugin has arguments
jdk.tools.jlink.internal.plugins.ZipPlugin#getArgumentsDescription()->String::: zip plugin get arguments description
jdk.tools.jlink.internal.plugins.ZipPlugin#configure(Map)->void::: zip plugin configure
jdk.tools.jlink.internal.plugins.ZipPlugin#compress(byte[])->byte[]::: zip plugin compress
jdk.tools.jlink.internal.plugins.ZipPlugin#transform(ResourcePool, ResourcePoolBuilder)->ResourcePool::: zip plugin transform

SystemModulesPlugin#transformModuleInfos(ResourcePool, ResourcePoolBuilder):::Validates and transforms the module-info.class files in the modules, adding the ModulePackages class file attribute if needed.:::moduleInfos->new->ArrayList<>->in->moduleView->new->ModuleSorter->sorted->data->module->findEntry->module->name->new->PluginException->orElseThrow->try->content->data->contentBytes->packages->module->packages->moduleInfo->new->ModuleInfo->moduleInfo->validateNames->moduleInfo->validatePackages->if->moduleInfo->shouldRewrite->data->moduleInfo->getBytes->copyWithContent->moduleInfos->add->out->add->catch->throw->new->PluginException->finally->forEach->return
SystemModulesPlugin.ModuleInfo#validateNames():::Validates names in ModuleDescriptor:::Checks->descriptor->name->requireModuleName->foreach->descriptor->requires->Checks->req->name->requireModuleName->foreach->descriptor->exports->Checks->e->source->requirePackageName->if->e->isQualified->e->targets->Checks->requireModuleName->forEach->foreach->descriptor->opens->Checks->opens->source->requirePackageName->if->opens->isQualified->opens->targets->Checks->requireModuleName->forEach->foreach->descriptor->provides->Checks->provides->service->requireServiceTypeName->provides->providers->Checks->requireServiceProviderName->forEach->foreach->descriptor->uses->Checks->requireServiceTypeName->foreach->descriptor->packages->Checks->requirePackageName->foreach->Checks->requirePackageName
SystemModulesPlugin.ModuleInfo#validatePackages():::Validates if exported and open packages are present:::nonExistPackages->new->TreeSet<>->descriptor->exports->stream->Exports->source->map->packages->contains->filter->nonExistPackages->add->forEach->descriptor->opens->stream->Opens->source->map->packages->contains->filter->nonExistPackages->add->forEach->if->nonExistPackages->isEmpty->throw->descriptor->name->new->PluginException
SystemModulesPlugin.ModuleInfo#shouldRewrite():::Returns true if module-info.class should be rewritten to add the ModulePackages attribute.:::return
SystemModulesPlugin.ModuleInfo#getBytes():::Returns the bytes for the (possibly updated) module-info.class.:::try->in->getInputStream->if->shouldRewrite->rewriter->new->ModuleInfoRewriter->if->rewriter->addModulePackages->bytes->rewriter->getBytes->try->bais->new->ByteArrayInputStream->ModuleDescriptor->read->catch->finally->return->else->return->in->readAllBytes->catch->finally
SystemModulesPlugin.SystemModulesClassGenerator#getClassWriter(Configuration):::Generate SystemModules class:::cw->new->ClassWriter->cw->new->StringArr->visit->genConstructor->genHasSplitPackages->genIncubatorModules->genModuleDescriptorsMethod->genModuleTargetsMethod->genModuleHashesMethod->genModuleResolutionsMethod->genModuleReads->genXXXPackagesToOpenMethods->return
SystemModulesPlugin.SystemModulesClassGenerator.ModuleDescriptorBuilder#opens(Set):::Call Builder::newOpens to create Opens instances and then pass it to the builder by calling: Builder.opens(Opens[]):::mv->visitVarInsn->opens->size->pushInt->mv->visitTypeInsn->arrayIndex->foreach->mv->visitInsn->pushInt->open->modifiers->open->source->open->targets->newOpens->mv->visitInsn->mv->visitMethodInsn
SystemModulesPlugin.SystemModulesClassGenerator.ModuleHashesBuilder#build():::Build ModuleHashes:::if->return->newModuleHashesBuilder->recordedHashes->names->recordedHashes->hashFor->hashForModule->forEach->pushModuleHashes
SystemModulesPlugin.SystemModulesClassGenerator.DedupSetBuilder#indexOfOpensModifiers(Set):::Retrieve the index to the given set of Opens.Modifier:::return->opensModifiersSets->get->build
SystemModulesPlugin.SystemModulesClassGenerator.SetBuilder#visitElement(T, MethodVisitor):::Generate the appropriate instructions to load an object reference to the element onto the stack.:::mv->visitLdcInsn
SystemModulesPlugin.SystemModulesClassGenerator.EnumSetBuilder#visitElement(T, MethodVisitor):::Loads an Enum field.:::mv->t->toString->visitFieldInsn

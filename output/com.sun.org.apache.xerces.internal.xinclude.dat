MultipleScopeNamespaceSupport#getAllPrefixes()::: multiple scope namespace support get all prefixes:::count->if->prefixes->new->StringArr->prefix->unique->for->i->return->new->Prefixes
MultipleScopeNamespaceSupport#getScopeForContext(int)::: multiple scope namespace support get scope for context:::scope->while->return
MultipleScopeNamespaceSupport#getPrefix(String)::: multiple scope namespace support get prefix:::return->getPrefix
MultipleScopeNamespaceSupport#getURI(String)::: multiple scope namespace support get i:::return->getURI
MultipleScopeNamespaceSupport#getPrefix(String, int)::: multiple scope namespace support get prefix:::return->getScopeForContext->getPrefix
MultipleScopeNamespaceSupport#getURI(String, int)::: multiple scope namespace support get i:::return->getScopeForContext->getURI
MultipleScopeNamespaceSupport#getPrefix(String, int, int)::: multiple scope namespace support get prefix:::if->return->if->return->for->i->return
MultipleScopeNamespaceSupport#getURI(String, int, int)::: multiple scope namespace support get i:::if->return->if->return->for->i->return
MultipleScopeNamespaceSupport#reset():::Only resets the current scope -- all namespaces defined in lower scopes remain valid after a call to reset.:::
MultipleScopeNamespaceSupport#pushScope():::Begins a new scope:::if->contextarray->new->intArr->System->arraycopy->pushContext
MultipleScopeNamespaceSupport#popScope():::Pops the current scope:::popContext
XInclude11TextReader#isValid(int):::Returns true if the specified character is a valid XML character as per the rules of XML 1.1.:::return->XML11Char->isXML11Valid
XIncludeHandler#reset(XMLComponentManager)::: include handler reset:::isRootDocument->fParentXIncludeHandler->getResultDepth->fNotations->clear->fUnparsedEntities->clear->fBaseURIScope->clear->fBaseURI->clear->fLiteralSystemID->clear->fExpandedSystemID->clear->fLanguageScope->clear->fLanguageStack->clear->for->i->for->i->for->i->try->if->componentManager->getFeature->return->catch->finally->try->componentManager->getFeature->if->fChildConfig->setFeature->catch->finally->try->componentManager->getFeature->if->fChildConfig->setFeature->catch->finally->try->componentManager->getFeature->if->fChildConfig->setFeature->catch->finally->try->value->componentManager->getProperty->if->if->fChildConfig->setProperty->catch->finally->try->value->componentManager->getProperty->if->setErrorReporter->if->fChildConfig->setProperty->catch->finally->try->value->componentManager->getProperty->if->if->fChildConfig->setProperty->catch->finally->try->value->componentManager->getProperty->if->if->fChildConfig->setProperty->catch->finally->componentManager->getProperty->componentManager->getFeature->componentManager->getPropertyName->getProperty->componentManager->getPropertyName->getProperty->componentManager->getPropertyName->getProperty->componentManager->getPropertyName->getProperty->try->value->componentManager->getProperty->if->if->fChildConfig->setProperty->else->getPropertyDefault->catch->getPropertyDefault->finally->if->fXInclude10TextReader->setBufferSize->if->fXInclude11TextReader->setBufferSize->new->ParserConfigurationSettings->copyFeatures->try->if->componentManager->getFeature->fSettings->setFeature->if->componentManager->getProperty->equals->fSettings->setFeature->else->if->componentManager->getFeature->fSettings->setFeature->catch->finally
XIncludeHandler#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->RECOGNIZED_FEATURES->clone
XIncludeHandler#setFeature(String, boolean):::Sets the state of a feature:::if->featureId->equals->if->fSettings->setFeature
XIncludeHandler#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->RECOGNIZED_PROPERTIES->clone
XIncludeHandler#setProperty(String, Object):::Sets the value of a property:::if->propertyId->equals->if->fChildConfig->setProperty->return->if->propertyId->equals->setErrorReporter->if->fChildConfig->setProperty->return->if->propertyId->equals->if->fChildConfig->setProperty->return->if->propertyId->equals->if->fChildConfig->setProperty->return->if->propertyId->equals->if->fChildConfig->setProperty->return->if->propertyId->equals->bufferSize->if->fChildConfig->setProperty->if->bufferSize->intValue->bufferSize->intValue->if->fXInclude10TextReader->setBufferSize->if->fXInclude11TextReader->setBufferSize->return
XIncludeHandler#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return
XIncludeHandler#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return
XIncludeHandler#setDocumentHandler(XMLDocumentHandler)::: include handler set document handler:::if->if->fXIncludeChildConfig->setDocumentHandler->if->fXPointerChildConfig->setDocumentHandler
XIncludeHandler#getDocumentHandler()::: include handler get document handler:::return
XIncludeHandler#startDocument(XMLLocator, String, NamespaceContext, Augmentations):::Event sent at the start of the document:::fErrorReporter->setDocumentLocator->if->reportFatalError->fXIncludeLocator->setLocator->setupCurrentBaseURI->saveBaseURI->if->new->AugmentationsImpl->augs->putItem->if->isRootDocument->if->fParentXIncludeHandler->fCurrentBaseURI->getExpandedSystemId->searchForRecursiveIncludes->new->ObjectArr->fCurrentBaseURI->getExpandedSystemId->reportFatalError->saveLanguage->if->isRootDocument->fDocumentHandler->startDocument
XIncludeHandler#xmlDecl(String, String, String, Augmentations)::: include handler xml decl:::equals->if->isRootDocument->fDocumentHandler->xmlDecl
XIncludeHandler#doctypeDecl(String, String, String, Augmentations)::: include handler doctype decl:::if->isRootDocument->fDocumentHandler->doctypeDecl
XIncludeHandler#comment(XMLString, Augmentations)::: include handler comment:::if->if->getState->modifyAugmentations->fDocumentHandler->comment->else->if->fDTDHandler->comment
XIncludeHandler#processingInstruction(String, XMLString, Augmentations)::: include handler processing instruction:::if->if->getState->modifyAugmentations->fDocumentHandler->processingInstruction->else->if->fDTDHandler->processingInstruction
XIncludeHandler#startElement(QName, XMLAttributes, Augmentations)::: include handler start element:::lastState->getState->if->getState->setState->else->setState->processXMLBaseAttributes->if->processXMLLangAttributes->if->isIncludeElement->success->this->handleIncludeElement->if->setState->else->setState->else->if->isFallbackElement->this->handleFallbackElement->else->if->hasXIncludeNamespace->if->getSawInclude->new->ObjectArr->reportFatalError->if->getSawFallback->new->ObjectArr->reportFatalError->if->getState->if->checkMultipleRootElements->if->modifyAugmentations->processAttributes->fDocumentHandler->startElement->else->if->getState->if->checkMultipleRootElements->if->modifyAugmentations->processAttributes->fDocumentHandler->startElement
XIncludeHandler#emptyElement(QName, XMLAttributes, Augmentations)::: include handler empty element:::lastState->getState->if->getState->setState->else->setState->processXMLBaseAttributes->if->processXMLLangAttributes->if->isIncludeElement->success->this->handleIncludeElement->if->setState->else->new->ObjectArr->attributes->getValue->reportFatalError->else->if->isFallbackElement->this->handleFallbackElement->else->if->hasXIncludeNamespace->if->getSawInclude->new->ObjectArr->reportFatalError->if->getSawFallback->new->ObjectArr->reportFatalError->if->getState->if->checkMultipleRootElements->if->modifyAugmentations->processAttributes->fDocumentHandler->emptyElement->else->if->getState->if->checkMultipleRootElements->if->modifyAugmentations->processAttributes->fDocumentHandler->emptyElement->setSawFallback->setSawInclude->if->fBaseURIScope->size->fBaseURIScope->peek->restoreBaseURI
XIncludeHandler#endElement(QName, Augmentations)::: include handler end element:::if->isIncludeElement->if->getState->getSawFallback->new->ObjectArr->reportFatalError->if->isFallbackElement->if->getState->setState->else->if->getState->if->fDocumentHandler->endElement->setSawFallback->setSawInclude->if->fBaseURIScope->size->fBaseURIScope->peek->restoreBaseURI->if->fLanguageScope->size->fLanguageScope->peek->restoreLanguage
XIncludeHandler#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations)::: include handler start general entity:::if->getState->if->if->augs->getItem->equals->reportFatalError->else->if->fDocumentHandler->startGeneralEntity
XIncludeHandler#textDecl(String, String, Augmentations)::: include handler text decl:::if->getState->fDocumentHandler->textDecl
XIncludeHandler#endGeneralEntity(String, Augmentations)::: include handler end general entity:::if->getState->fDocumentHandler->endGeneralEntity
XIncludeHandler#characters(XMLString, Augmentations)::: include handler characters:::if->getState->if->checkWhitespace->else->if->modifyAugmentations->fDocumentHandler->characters
XIncludeHandler#ignorableWhitespace(XMLString, Augmentations)::: include handler ignorable whitespace:::if->getState->fDocumentHandler->ignorableWhitespace
XIncludeHandler#startCDATA(Augmentations)::: include handler start a:::if->getState->fDocumentHandler->startCDATA
XIncludeHandler#endCDATA(Augmentations)::: include handler end a:::if->getState->fDocumentHandler->endCDATA
XIncludeHandler#endDocument(Augmentations)::: include handler end document:::if->isRootDocument->if->reportFatalError->if->fDocumentHandler->endDocument
XIncludeHandler#setDocumentSource(XMLDocumentSource)::: include handler set document source:::
XIncludeHandler#getDocumentSource()::: include handler get document source:::return
XIncludeHandler#attributeDecl(String, String, String, String[], String, XMLString, XMLString, Augmentations)::: include handler attribute decl:::if->fDTDHandler->attributeDecl
XIncludeHandler#elementDecl(String, String, Augmentations)::: include handler element decl:::if->fDTDHandler->elementDecl
XIncludeHandler#endAttlist(Augmentations)::: include handler end attlist:::if->fDTDHandler->endAttlist
XIncludeHandler#endConditional(Augmentations)::: include handler end conditional:::if->fDTDHandler->endConditional
XIncludeHandler#endDTD(Augmentations)::: include handler end d:::if->fDTDHandler->endDTD
XIncludeHandler#endExternalSubset(Augmentations)::: include handler end external subset:::if->fDTDHandler->endExternalSubset
XIncludeHandler#endParameterEntity(String, Augmentations)::: include handler end parameter entity:::if->fDTDHandler->endParameterEntity
XIncludeHandler#externalEntityDecl(String, XMLResourceIdentifier, Augmentations)::: include handler external entity decl:::if->fDTDHandler->externalEntityDecl
XIncludeHandler#getDTDSource()::: include handler get source:::return
XIncludeHandler#ignoredCharacters(XMLString, Augmentations)::: include handler ignored characters:::if->fDTDHandler->ignoredCharacters
XIncludeHandler#internalEntityDecl(String, XMLString, XMLString, Augmentations)::: include handler internal entity decl:::if->fDTDHandler->internalEntityDecl
XIncludeHandler#notationDecl(String, XMLResourceIdentifier, Augmentations)::: include handler notation decl:::this->addNotation->if->fDTDHandler->notationDecl
XIncludeHandler#setDTDSource(XMLDTDSource)::: include handler set source:::
XIncludeHandler#startAttlist(String, Augmentations)::: include handler start attlist:::if->fDTDHandler->startAttlist
XIncludeHandler#startConditional(short, Augmentations)::: include handler start conditional:::if->fDTDHandler->startConditional
XIncludeHandler#startDTD(XMLLocator, Augmentations)::: include handler start d:::if->fDTDHandler->startDTD
XIncludeHandler#startExternalSubset(XMLResourceIdentifier, Augmentations)::: include handler start external subset:::if->fDTDHandler->startExternalSubset
XIncludeHandler#startParameterEntity(String, XMLResourceIdentifier, String, Augmentations)::: include handler start parameter entity:::if->fDTDHandler->startParameterEntity
XIncludeHandler#unparsedEntityDecl(String, XMLResourceIdentifier, String, Augmentations)::: include handler unparsed entity decl:::this->addUnparsedEntity->if->fDTDHandler->unparsedEntityDecl
XIncludeHandler#getDTDHandler()::: include handler get handler:::return
XIncludeHandler#setDTDHandler(XMLDTDHandler)::: include handler set handler:::
XIncludeHandler#setErrorReporter(XMLErrorReporter)::: include handler set error reporter:::if->fErrorReporter->putMessageFormatter->if->fErrorReporter->setDocumentLocator
XIncludeHandler#handleFallbackElement()::: include handler handle fallback element:::if->getSawInclude->if->getState->return->reportFatalError->setSawInclude->fNamespaceContext->setContextInvalid->if->getSawFallback->reportFatalError->else->setSawFallback->if->getState->setState
XIncludeHandler#handleIncludeElement(XMLAttributes)::: include handler handle include element:::if->getSawInclude->new->ObjectArr->reportFatalError->if->getState->return->setSawInclude->fNamespaceContext->setContextInvalid->href->attributes->getValue->parse->attributes->getValue->xpointer->attributes->getValue->accept->attributes->getValue->acceptLanguage->attributes->getValue->if->if->if->href->length->XINCLUDE_PARSE_XML->equals->if->reportFatalError->else->locale->fErrorReporter->getLocale->reason->fXIncludeMessageFormatter->formatMessage->new->ObjectArr->reportResourceError->return->hrefURI->try->new->URI->if->hrefURI->getFragment->new->ObjectArr->reportFatalError->catch->newHref->escapeHref->if->try->new->URI->if->hrefURI->getFragment->new->ObjectArr->reportFatalError->catch->new->ObjectArr->reportFatalError->finally->else->new->ObjectArr->reportFatalError->finally->if->isValidInHTTPHeader->reportFatalError->if->isValidInHTTPHeader->reportFatalError->includedSource->if->try->resourceIdentifier->fCurrentBaseURI->getExpandedSystemId->XMLEntityManager->fCurrentBaseURI->getExpandedSystemId->expandSystemId->new->XMLResourceIdentifierImpl->fEntityResolver->resolveEntity->if->if->JdkXmlUtils->getCatalogFeatures->fCatalogFeatures->get->if->source->try->if->CatalogManager->catalogResolver->fCatalogResolver->fCurrentBaseURI->getExpandedSystemId->resolve->catch->finally->if->source->isEmpty->source->getSystemId->fCurrentBaseURI->getExpandedSystemId->new->XMLInputSource->else->if->CatalogManager->catalogResolver->is->fCatalogResolver->resolveEntity->if->is->isEmpty->new->XMLInputSource->if->includedSource->getCharacterStream->includedSource->getByteStream->includedSource->getPublicId->includedSource->getSystemId->includedSource->getBaseSystemId->createInputSource->catch->new->ObjectArr->e->getMessage->reportResourceError->return->finally->if->if->fCurrentBaseURI->getExpandedSystemId->createInputSource->else->fCurrentBaseURI->getExpandedSystemId->new->XMLInputSource->if->parse->equals->if->if->new->XIncludeParserConfiguration->else->new->XPointerParserConfiguration->if->fChildConfig->setProperty->if->fChildConfig->setProperty->if->fChildConfig->setProperty->fChildConfig->setProperty->fChildConfig->setProperty->fChildConfig->setProperty->fChildConfig->setProperty->fChildConfig->setFeature->fChildConfig->setFeature->if->newHandler->fChildConfig->getProperty->setProperty->setProperty->setProperty->if->setProperty->newHandler->setParent->newHandler->setHref->newHandler->setXIncludeLocator->newHandler->this->getDocumentHandler->setDocumentHandler->else->newHandler->fChildConfig->getProperty->newHandler->setParent->newHandler->setHref->newHandler->this->getDocumentHandler->setDocumentHandler->if->try->fXPtrProcessor->parseXPointer->catch->new->ObjectArr->ex->getMessage->reportResourceError->return->finally->else->if->copyFeatures->try->fNamespaceContext->pushScope->fChildConfig->parse->fXIncludeLocator->setLocator->if->fErrorReporter->setDocumentLocator->if->if->fXPtrProcessor->isXPointerResolved->locale->fErrorReporter->getLocale->reason->fXIncludeMessageFormatter->formatMessage->new->ObjectArr->reportResourceError->return->catch->fXIncludeLocator->setLocator->if->fErrorReporter->setDocumentLocator->new->ObjectArr->e->getMessage->reportFatalError->fXIncludeLocator->setLocator->if->fErrorReporter->setDocumentLocator->if->throw->new->XNIException->new->ObjectArr->e->getMessage->reportResourceError->return->finally->fNamespaceContext->popScope->else->if->parse->equals->encoding->attributes->getValue->includedSource->setEncoding->textReader->try->if->if->new->XIncludeTextReader->else->fXInclude10TextReader->setInputSource->else->if->new->XInclude11TextReader->else->fXInclude11TextReader->setInputSource->textReader->setErrorReporter->textReader->parse->catch->fErrorReporter->ex->getDomain->ex->getKey->ex->getArguments->reportError->fErrorReporter->reportError->if->throw->new->XNIException->new->ObjectArr->e->getMessage->reportResourceError->return->finally->if->try->textReader->close->catch->new->ObjectArr->e->getMessage->reportResourceError->return->finally->else->new->ObjectArr->reportFatalError->return
XIncludeHandler#hasXIncludeNamespace(QName):::Returns true if the element has the namespace "http://www.w3.org/2001/XInclude":::return->fNamespaceContext->getURI
XIncludeHandler#isIncludeElement(QName):::Checks if the element is an <include> element:::return->equals->hasXIncludeNamespace
XIncludeHandler#isFallbackElement(QName):::Checks if the element is an <fallback> element:::return->equals->hasXIncludeNamespace
XIncludeHandler#sameBaseURIAsIncludeParent():::Returns true if the current [base URI] is the same as the [base URI] that was in effect on the include parent:::parentBaseURI->getIncludeParentBaseURI->baseURI->fCurrentBaseURI->getExpandedSystemId->return->parentBaseURI->equals
XIncludeHandler#sameLanguageAsIncludeParent():::Returns true if the current [language] is equivalent to the [language] that was in effect on the include parent, taking case-insensitivity into account as per [RFC 3066]:::parentLanguage->getIncludeParentLanguage->return->parentLanguage->equalsIgnoreCase
XIncludeHandler#setupCurrentBaseURI(XMLLocator)::: include handler setup current base i:::fCurrentBaseURI->locator->getBaseSystemId->setBaseSystemId->if->locator->getLiteralSystemId->fCurrentBaseURI->locator->getLiteralSystemId->setLiteralSystemId->else->fCurrentBaseURI->setLiteralSystemId->expandedSystemId->locator->getExpandedSystemId->if->try->XMLEntityManager->fCurrentBaseURI->getLiteralSystemId->fCurrentBaseURI->getBaseSystemId->expandSystemId->if->fCurrentBaseURI->getLiteralSystemId->catch->reportFatalError->finally->fCurrentBaseURI->setExpandedSystemId
XIncludeHandler#searchForRecursiveIncludes(String):::Checks if the file indicated by the given system id has already been included in the current stack.:::if->includedSysId->fCurrentBaseURI->getExpandedSystemId->equals->return->else->if->return->else->return->fParentXIncludeHandler->searchForRecursiveIncludes
XIncludeHandler#isTopLevelIncludedItem():::Returns true if the current element is a top level included item:::return->isTopLevelIncludedItemViaInclude->isTopLevelIncludedItemViaFallback
XIncludeHandler#isTopLevelIncludedItemViaInclude()::: include handler is top level included item via include:::return->isRootDocument
XIncludeHandler#isTopLevelIncludedItemViaFallback()::: include handler is top level included item via fallback:::return->getSawFallback
XIncludeHandler#processAttributes(XMLAttributes):::Processes the XMLAttributes object of startElement() calls:::if->isTopLevelIncludedItem->if->sameBaseURIAsIncludeParent->if->new->XMLAttributesImpl->uri->try->this->getRelativeBaseURI->catch->fCurrentBaseURI->getExpandedSystemId->finally->index->attributes->addAttribute->attributes->setSpecified->if->sameLanguageAsIncludeParent->if->new->XMLAttributesImpl->index->attributes->addAttribute->attributes->setSpecified->inscopeNS->fNamespaceContext->getAllPrefixes->while->inscopeNS->hasMoreElements->prefix->inscopeNS->nextElement->parentURI->fNamespaceContext->getURIFromIncludeParent->uri->fNamespaceContext->getURI->if->if->if->attributes->getValue->if->new->XMLAttributesImpl->ns->NEW_NS_ATTR_QNAME->clone->index->attributes->addAttribute->attributes->setSpecified->fNamespaceContext->declarePrefix->else->if->attributes->getValue->if->new->XMLAttributesImpl->ns->NEW_NS_ATTR_QNAME->clone->fSymbolTable->addSymbol->intern->index->attributes->addAttribute->attributes->setSpecified->fNamespaceContext->declarePrefix->if->length->attributes->getLength->for->i->return
XIncludeHandler#getRelativeBaseURI():::Returns a URI, relative to the include parent's base URI, of the current [base URI]:::includeParentDepth->getIncludeParentDepth->relativeURI->this->getRelativeURI->if->isRootDocument->return->else->if->relativeURI->length->fCurrentBaseURI->getLiteralSystemId->if->if->fParentXIncludeHandler->getRelativeBaseURI->if->fParentRelativeURI->length->return->base->new->URI->uri->new->URI->baseScheme->base->getScheme->literalScheme->uri->getScheme->if->Objects->equals->return->baseAuthority->base->getAuthority->literalAuthority->uri->getAuthority->if->Objects->equals->return->uri->getSchemeSpecificPart->literalPath->uri->getPath->literalQuery->uri->getQueryString->literalFragment->uri->getFragment->if->buffer->new->StringBuilder->if->buffer->append->if->buffer->append->buffer->append->if->buffer->append->buffer->append->return->buffer->toString->return->else->return
XIncludeHandler#getIncludeParentBaseURI():::Returns the [base URI] of the include parent.:::depth->getIncludeParentDepth->if->isRootDocument->return->fParentXIncludeHandler->getIncludeParentBaseURI->else->return->this->getBaseURI
XIncludeHandler#getIncludeParentLanguage():::Returns the [language] of the include parent.:::depth->getIncludeParentDepth->if->isRootDocument->return->fParentXIncludeHandler->getIncludeParentLanguage->else->return->getLanguage
XIncludeHandler#getIncludeParentDepth():::Returns the depth of the include parent:::for->i->return
XIncludeHandler#getResultDepth():::Returns the current element depth of the result infoset.:::return
XIncludeHandler#modifyAugmentations(Augmentations):::Modify the augmentations:::return->modifyAugmentations
XIncludeHandler#modifyAugmentations(Augmentations, boolean):::Modify the augmentations:::if->isTopLevelIncludedItem->if->new->AugmentationsImpl->augs->putItem->return
XIncludeHandler#getState(int)::: include handler get state:::return
XIncludeHandler#getState()::: include handler get state:::return
XIncludeHandler#setState(int)::: include handler set state:::if->newarray->new->intArr->System->arraycopy
XIncludeHandler#setSawFallback(int, boolean):::Records that an <fallback> was encountered at the specified depth, as an ancestor of the current element, or as a sibling of an ancestor of the current element.:::if->newarray->new->booleanArr->System->arraycopy
XIncludeHandler#getSawFallback(int):::Returns whether an <fallback> was encountered at the specified depth, as an ancestor of the current element, or as a sibling of an ancestor of the current element.:::if->return->return
XIncludeHandler#setSawInclude(int, boolean):::Records that an <include> was encountered at the specified depth, as an ancestor of the current item.:::if->newarray->new->booleanArr->System->arraycopy
XIncludeHandler#getSawInclude(int):::Return whether an <include> was encountered at the specified depth, as an ancestor of the current item.:::if->return->return
XIncludeHandler#reportResourceError(String)::: include handler report resource error:::this->reportResourceError
XIncludeHandler#reportResourceError(String, Object[])::: include handler report resource error:::this->reportResourceError
XIncludeHandler#reportResourceError(String, Object[], Exception)::: include handler report resource error:::this->reportError
XIncludeHandler#reportFatalError(String)::: include handler report fatal error:::this->reportFatalError
XIncludeHandler#reportFatalError(String, Object[])::: include handler report fatal error:::this->reportFatalError
XIncludeHandler#reportFatalError(String, Object[], Exception)::: include handler report fatal error:::this->reportError
XIncludeHandler#reportError(String, Object[], short, Exception)::: include handler report error:::if->fErrorReporter->reportError
XIncludeHandler#setParent(XIncludeHandler):::Set the parent of this XIncludeHandler in the tree:::
XIncludeHandler#setHref(String)::: include handler set href:::
XIncludeHandler#setXIncludeLocator(XMLLocatorWrapper)::: include handler set include locator:::
XIncludeHandler#isRootDocument()::: include handler is root document:::return
XIncludeHandler#addUnparsedEntity(String, XMLResourceIdentifier, String, Augmentations):::Caches an unparsed entity.:::ent->new->UnparsedEntity->identifier->getLiteralSystemId->identifier->getPublicId->identifier->getBaseSystemId->identifier->getExpandedSystemId->fUnparsedEntities->add
XIncludeHandler#addNotation(String, XMLResourceIdentifier, Augmentations):::Caches a notation.:::not->new->Notation->identifier->getLiteralSystemId->identifier->getPublicId->identifier->getBaseSystemId->identifier->getExpandedSystemId->fNotations->add
XIncludeHandler#checkUnparsedEntity(String):::Checks if an UnparsedEntity with the given name was declared in the DTD of the document for the current pipeline:::ent->new->UnparsedEntity->index->fUnparsedEntities->indexOf->if->fUnparsedEntities->get->checkNotation->checkAndSendUnparsedEntity
XIncludeHandler#checkNotation(String):::Checks if a Notation with the given name was declared in the DTD of the document for the current pipeline:::not->new->Notation->index->fNotations->indexOf->if->fNotations->get->checkAndSendNotation
XIncludeHandler#checkAndSendUnparsedEntity(UnparsedEntity):::The purpose of this method is to check if an UnparsedEntity conflicts with a previously declared entity in the current pipeline stack:::if->isRootDocument->index->fUnparsedEntities->indexOf->if->id->new->XMLResourceIdentifierImpl->addUnparsedEntity->if->fDTDHandler->unparsedEntityDecl->else->localEntity->fUnparsedEntities->get->if->ent->isDuplicate->new->ObjectArr->reportFatalError->else->fParentXIncludeHandler->checkAndSendUnparsedEntity
XIncludeHandler#checkAndSendNotation(Notation):::The purpose of this method is to check if a Notation conflicts with a previously declared notation in the current pipeline stack:::if->isRootDocument->index->fNotations->indexOf->if->id->new->XMLResourceIdentifierImpl->addNotation->if->fDTDHandler->notationDecl->else->localNotation->fNotations->get->if->not->isDuplicate->new->ObjectArr->reportFatalError->else->fParentXIncludeHandler->checkAndSendNotation
XIncludeHandler#checkWhitespace(XMLString):::Checks whether the string only contains white space characters.:::end->for->i
XIncludeHandler#checkMultipleRootElements():::Checks whether the root element has already been processed.:::if->getRootElementProcessed->reportFatalError->setRootElementProcessed
XIncludeHandler#setRootElementProcessed(boolean):::Sets whether the root element has been processed.:::if->isRootDocument->return->fParentXIncludeHandler->setRootElementProcessed
XIncludeHandler#getRootElementProcessed():::Returns whether the root element has been processed.:::return->isRootDocument->fParentXIncludeHandler->getRootElementProcessed
XIncludeHandler#copyFeatures(XMLComponentManager, ParserConfigurationSettings)::: include handler copy features:::features->Constants->getXercesFeatures->copyFeatures1->Constants->getSAXFeatures->copyFeatures1
XIncludeHandler#copyFeatures(XMLComponentManager, XMLParserConfiguration)::: include handler copy features:::features->Constants->getXercesFeatures->copyFeatures1->Constants->getSAXFeatures->copyFeatures1
XIncludeHandler#copyFeatures1(Enumeration, String, XMLComponentManager, ParserConfigurationSettings)::: include handler copy features1:::while->features->hasMoreElements->featureId->features->nextElement->to->new->StringArr->addRecognizedFeatures->try->to->from->getFeature->setFeature->catch->finally
XIncludeHandler#copyFeatures1(Enumeration, String, XMLComponentManager, XMLParserConfiguration)::: include handler copy features1:::while->features->hasMoreElements->featureId->features->nextElement->value->from->getFeature->try->to->setFeature->catch->finally
XIncludeHandler.Notation#equals(Object)::: notation equals:::return->Objects->equals
XIncludeHandler.Notation#hashCode()::: notation hash code:::return->Objects->hashCode
XIncludeHandler.Notation#isDuplicate(Object)::: notation is duplicate:::if->other->return->Objects->equals->Objects->equals->Objects->equals->return
XIncludeHandler.UnparsedEntity#equals(Object)::: unparsed entity equals:::return->Objects->equals
XIncludeHandler.UnparsedEntity#hashCode()::: unparsed entity hash code:::return->Objects->hashCode
XIncludeHandler.UnparsedEntity#isDuplicate(Object)::: unparsed entity is duplicate:::if->other->return->Objects->equals->Objects->equals->Objects->equals->Objects->equals->return
XIncludeHandler#saveBaseURI():::Saves the current base URI to the top of the stack.:::fBaseURIScope->push->fBaseURI->fCurrentBaseURI->getBaseSystemId->push->fLiteralSystemID->fCurrentBaseURI->getLiteralSystemId->push->fExpandedSystemID->fCurrentBaseURI->getExpandedSystemId->push
XIncludeHandler#restoreBaseURI():::Discards the URIs at the top of the stack, and restores the ones beneath it.:::fBaseURI->pop->fLiteralSystemID->pop->fExpandedSystemID->pop->fBaseURIScope->pop->fCurrentBaseURI->fBaseURI->peek->setBaseSystemId->fCurrentBaseURI->fLiteralSystemID->peek->setLiteralSystemId->fCurrentBaseURI->fExpandedSystemID->peek->setExpandedSystemId
XIncludeHandler#saveLanguage(String):::Saves the given language on the top of the stack.:::fLanguageScope->push->fLanguageStack->push
XIncludeHandler#restoreLanguage():::Discards the language at the top of the stack, and returns the one beneath it.:::fLanguageStack->pop->fLanguageScope->pop->return->fLanguageStack->peek
XIncludeHandler#getBaseURI(int):::Gets the base URI that was in use at that depth:::scope->scopeOfBaseURI->return->fExpandedSystemID->get
XIncludeHandler#getLanguage(int):::Gets the language that was in use at that depth.:::scope->scopeOfLanguage->return->fLanguageStack->get
XIncludeHandler#getRelativeURI(int):::Returns a relative URI, which when resolved against the base URI at the specified depth, will create the current base URI:::start->scopeOfBaseURI->if->fBaseURIScope->size->return->uri->fLiteralSystemID->get->new->URI->for->i->fBaseURIScope->size->return->uri->getPath
XIncludeHandler#scopeOfBaseURI(int)::: include handler scope of base i:::for->i->fBaseURIScope->size->return
XIncludeHandler#scopeOfLanguage(int)::: include handler scope of language:::for->i->fLanguageScope->size->return
XIncludeHandler#processXMLBaseAttributes(XMLAttributes):::Search for a xml:base attribute, and if one is found, put the new base URI into effect.:::baseURIValue->attributes->getValue->if->try->expandedValue->XMLEntityManager->fCurrentBaseURI->getExpandedSystemId->expandSystemId->fCurrentBaseURI->setLiteralSystemId->fCurrentBaseURI->fCurrentBaseURI->getExpandedSystemId->setBaseSystemId->fCurrentBaseURI->setExpandedSystemId->saveBaseURI->catch->finally
XIncludeHandler#processXMLLangAttributes(XMLAttributes):::Search for a xml:lang attribute, and if one is found, put the new [language] into effect.:::language->attributes->getValue->if->saveLanguage
XIncludeHandler#isValidInHTTPHeader(String):::Returns true if the given string would be valid in an HTTP header.:::ch->for->i->value->length->return
XIncludeHandler#createInputSource(String, String, String, String, String):::Returns a new XMLInputSource from the given parameters.:::httpSource->new->HTTPInputSource->if->accept->length->httpSource->setHTTPRequestProperty->if->acceptLanguage->length->httpSource->setHTTPRequestProperty->return
XIncludeHandler#escapeHref(String)::: include handler escape href:::len->href->length->ch->buffer->new->StringBuilder->i->for->if->for->j->bytes->b->try->href->substring->getBytes->catch->return->finally->for->if->buffer->length->return->buffer->toString->else->return
XIncludeMessageFormatter#formatMessage(Locale, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::if->if->SecuritySupport->getResourceBundle->if->SecuritySupport->getResourceBundle->msg->fResourceBundle->getString->if->try->format->catch->fResourceBundle->getString->fResourceBundle->getString->finally->if->fResourceBundle->getString->throw->new->MissingResourceException->return
XIncludeNamespaceSupport#pushContext():::Pushes a new context onto the stack.:::super->pushContext->if->contextarray->new->booleanArr->System->arraycopy
XIncludeNamespaceSupport#setContextInvalid():::This method is used to set a context invalid for XInclude namespace processing:::
XIncludeNamespaceSupport#getURIFromIncludeParent(String):::This returns the namespace URI which was associated with the given pretext, in the context that existed at the include parent of the current element:::lastValidContext->while->return->getURI
XIncludeTextReader#setErrorReporter(XMLErrorReporter):::Sets the XMLErrorReporter used for reporting errors while reading the text include.:::
XIncludeTextReader#getReader(XMLInputSource):::Return the Reader for given XMLInputSource.:::if->source->getCharacterStream->return->source->getCharacterStream->else->stream->encoding->source->getEncoding->if->if->source->getByteStream->source->getByteStream->if->new->BufferedInputStream->else->expandedSystemId->XMLEntityManager->source->getSystemId->source->getBaseSystemId->expandSystemId->url->new->URL->urlCon->url->openConnection->if->urlConnection->httpInputSource->propIter->httpInputSource->getHTTPRequestProperties->while->propIter->hasNext->entry->propIter->next->urlConnection->entry->getKey->entry->getValue->setRequestProperty->followRedirects->httpInputSource->getFollowHTTPRedirects->if->urlConnection->setInstanceFollowRedirects->urlCon->getInputStream->new->BufferedInputStream->rawContentType->urlCon->getContentType->index->rawContentType->indexOf->contentType->charset->if->rawContentType->substring->trim->rawContentType->substring->trim->if->charset->startsWith->charset->substring->trim->if->charset->charAt->charset->charset->length->charAt->charset->charAt->charset->charset->length->charAt->charset->charset->length->substring->else->else->rawContentType->trim->detectedEncoding->if->contentType->equals->if->else->else->if->contentType->equals->if->else->getEncodingName->else->if->contentType->endsWith->getEncodingName->if->encoding->toUpperCase->consumeBOM->if->encoding->equals->return->createUTF8Reader->else->if->encoding->equals->return->createUTF16Reader->else->if->encoding->equals->return->createUTF16Reader->javaEncoding->EncodingMap->getIANA2JavaMapping->if->aFormatter->fErrorReporter->getMessageFormatter->aLocale->fErrorReporter->getLocale->throw->aFormatter->new->ObjectArr->formatMessage->new->IOException->else->if->javaEncoding->equals->return->createASCIIReader->else->if->javaEncoding->equals->return->createLatin1Reader->return->new->InputStreamReader
XIncludeTextReader#createUTF8Reader(InputStream):::Create a new UTF-8 reader from the InputStream:::return->fErrorReporter->getMessageFormatter->fErrorReporter->getLocale->new->UTF8Reader
XIncludeTextReader#createUTF16Reader(InputStream, boolean):::Create a new UTF-16 reader from the InputStream:::return->fErrorReporter->getMessageFormatter->fErrorReporter->getLocale->new->UTF16Reader
XIncludeTextReader#createASCIIReader(InputStream):::Create a new ASCII reader from the InputStream:::return->fErrorReporter->getMessageFormatter->fErrorReporter->getLocale->new->ASCIIReader
XIncludeTextReader#createLatin1Reader(InputStream):::Create a new ISO-8859-1 reader from the InputStream:::return->new->Latin1Reader
XIncludeTextReader#getEncodingName(InputStream):::XMLEntityManager cares about endian-ness, since it creates its own optimized readers:::b4->new->byteArr->encoding->stream->mark->count->stream->read->stream->reset->if->getEncodingName->return
XIncludeTextReader#consumeBOM(InputStream, String):::Removes the byte order mark from the stream, if it exists and returns the encoding name.:::b->new->byteArr->count->stream->mark->if->encoding->equals->stream->read->if->b0->b1->b2->if->stream->reset->else->stream->reset->else->if->encoding->startsWith->stream->read->if->b0->b1->if->return->else->if->return->stream->reset->return
XIncludeTextReader#getEncodingName(byte[]):::REVISIT: This code is taken from com.sun.org.apache.xerces.internal.impl.XMLEntityManager:::b0->b1->if->return->if->return->b2->if->return->b3->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
XIncludeTextReader#parse():::Read the input stream as text, and pass the text on to the XIncludeHandler using calls to characters():::getReader->readSize->fReader->read->while->for->i->if->fHandler->fHandler->modifyAugmentations->characters->fReader->read
XIncludeTextReader#setInputSource(XMLInputSource):::Sets the input source on this text reader.:::
XIncludeTextReader#close():::Closes the stream:::if->fReader->close
XIncludeTextReader#isValid(int):::Returns true if the specified character is a valid XML character as per the rules of XML 1.0.:::return->XMLChar->isValid
XIncludeTextReader#setBufferSize(int):::Sets the buffer size property for the reader which decides the chunk sizes that are parsed by the reader at a time and passed to the handler:::if->new->charArr

MultipleScopeNamespaceSupport#reset():::Only resets the current scope -- all namespaces defined in lower scopes remain valid after a call to reset.:::
MultipleScopeNamespaceSupport#pushScope():::Begins a new scope:::if->contextarray->new->intArr->System->arraycopy->pushContext
MultipleScopeNamespaceSupport#popScope():::Pops the current scope:::popContext
XInclude11TextReader#isValid(int):::Returns true if the specified character is a valid XML character as per the rules of XML 1.1.:::return->XML11Char->isXML11Valid
XIncludeHandler#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->RECOGNIZED_FEATURES->clone
XIncludeHandler#setFeature(String, boolean):::Sets the state of a feature:::if->featureId->equals->if->fSettings->setFeature
XIncludeHandler#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->RECOGNIZED_PROPERTIES->clone
XIncludeHandler#setProperty(String, Object):::Sets the value of a property:::if->propertyId->equals->if->fChildConfig->setProperty->return->if->propertyId->equals->setErrorReporter->if->fChildConfig->setProperty->return->if->propertyId->equals->if->fChildConfig->setProperty->return->if->propertyId->equals->if->fChildConfig->setProperty->return->if->propertyId->equals->if->fChildConfig->setProperty->return->if->propertyId->equals->bufferSize->if->fChildConfig->setProperty->if->bufferSize->intValue->bufferSize->intValue->if->fXInclude10TextReader->setBufferSize->if->fXInclude11TextReader->setBufferSize->return
XIncludeHandler#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return
XIncludeHandler#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return
XIncludeHandler#startDocument(XMLLocator, String, NamespaceContext, Augmentations):::Event sent at the start of the document:::fErrorReporter->setDocumentLocator->if->reportFatalError->fXIncludeLocator->setLocator->setupCurrentBaseURI->saveBaseURI->if->new->AugmentationsImpl->augs->putItem->if->isRootDocument->if->fParentXIncludeHandler->fCurrentBaseURI->getExpandedSystemId->searchForRecursiveIncludes->new->ObjectArr->fCurrentBaseURI->getExpandedSystemId->reportFatalError->saveLanguage->if->isRootDocument->fDocumentHandler->startDocument
XIncludeHandler#hasXIncludeNamespace(QName):::Returns true if the element has the namespace "http://www.w3.org/2001/XInclude":::return->fNamespaceContext->getURI
XIncludeHandler#isIncludeElement(QName):::Checks if the element is an &lt;include&gt; element:::return->equals->hasXIncludeNamespace
XIncludeHandler#isFallbackElement(QName):::Checks if the element is an &lt;fallback&gt; element:::return->equals->hasXIncludeNamespace
XIncludeHandler#sameBaseURIAsIncludeParent():::Returns true if the current [base URI] is the same as the [base URI] that was in effect on the include parent:::parentBaseURI->getIncludeParentBaseURI->baseURI->fCurrentBaseURI->getExpandedSystemId->return->parentBaseURI->equals
XIncludeHandler#sameLanguageAsIncludeParent():::Returns true if the current [language] is equivalent to the [language] that was in effect on the include parent, taking case-insensitivity into account as per [RFC 3066]:::parentLanguage->getIncludeParentLanguage->return->parentLanguage->equalsIgnoreCase
XIncludeHandler#searchForRecursiveIncludes(String):::Checks if the file indicated by the given system id has already been included in the current stack.:::if->includedSysId->fCurrentBaseURI->getExpandedSystemId->equals->return->else->if->return->else->return->fParentXIncludeHandler->searchForRecursiveIncludes
XIncludeHandler#isTopLevelIncludedItem():::Returns true if the current element is a top level included item:::return->isTopLevelIncludedItemViaInclude->isTopLevelIncludedItemViaFallback
XIncludeHandler#processAttributes(XMLAttributes):::Processes the XMLAttributes object of startElement() calls:::if->isTopLevelIncludedItem->if->sameBaseURIAsIncludeParent->if->new->XMLAttributesImpl->uri->try->this->getRelativeBaseURI->catch->fCurrentBaseURI->getExpandedSystemId->finally->index->attributes->addAttribute->attributes->setSpecified->if->sameLanguageAsIncludeParent->if->new->XMLAttributesImpl->index->attributes->addAttribute->attributes->setSpecified->inscopeNS->fNamespaceContext->getAllPrefixes->while->inscopeNS->hasMoreElements->prefix->inscopeNS->nextElement->parentURI->fNamespaceContext->getURIFromIncludeParent->uri->fNamespaceContext->getURI->if->if->if->attributes->getValue->if->new->XMLAttributesImpl->ns->NEW_NS_ATTR_QNAME->clone->index->attributes->addAttribute->attributes->setSpecified->fNamespaceContext->declarePrefix->else->if->attributes->getValue->if->new->XMLAttributesImpl->ns->NEW_NS_ATTR_QNAME->clone->fSymbolTable->addSymbol->intern->index->attributes->addAttribute->attributes->setSpecified->fNamespaceContext->declarePrefix->if->length->attributes->getLength->for->i->return
XIncludeHandler#getRelativeBaseURI():::Returns a URI, relative to the include parent's base URI, of the current [base URI]:::includeParentDepth->getIncludeParentDepth->relativeURI->this->getRelativeURI->if->isRootDocument->return->else->if->relativeURI->length->fCurrentBaseURI->getLiteralSystemId->if->if->fParentXIncludeHandler->getRelativeBaseURI->if->fParentRelativeURI->length->return->base->new->URI->uri->new->URI->baseScheme->base->getScheme->literalScheme->uri->getScheme->if->Objects->equals->return->baseAuthority->base->getAuthority->literalAuthority->uri->getAuthority->if->Objects->equals->return->uri->getSchemeSpecificPart->literalPath->uri->getPath->literalQuery->uri->getQueryString->literalFragment->uri->getFragment->if->buffer->new->StringBuilder->if->buffer->append->if->buffer->append->buffer->append->if->buffer->append->buffer->append->return->buffer->toString->return->else->return
XIncludeHandler#modifyAugmentations(Augmentations):::Modify the augmentations:::return->modifyAugmentations
XIncludeHandler#modifyAugmentations(Augmentations, boolean):::Modify the augmentations:::if->isTopLevelIncludedItem->if->new->AugmentationsImpl->augs->putItem->return
XIncludeHandler#setSawFallback(int, boolean):::Records that an &lt;fallback&gt; was encountered at the specified depth, as an ancestor of the current element, or as a sibling of an ancestor of the current element.:::if->newarray->new->booleanArr->System->arraycopy
XIncludeHandler#getSawFallback(int):::Returns whether an &lt;fallback&gt; was encountered at the specified depth, as an ancestor of the current element, or as a sibling of an ancestor of the current element.:::if->return->return
XIncludeHandler#setSawInclude(int, boolean):::Records that an &lt;include&gt; was encountered at the specified depth, as an ancestor of the current item.:::if->newarray->new->booleanArr->System->arraycopy
XIncludeHandler#getSawInclude(int):::Return whether an &lt;include&gt; was encountered at the specified depth, as an ancestor of the current item.:::if->return->return
XIncludeHandler#setParent(XIncludeHandler):::Set the parent of this XIncludeHandler in the tree:::
XIncludeHandler#addUnparsedEntity(String, XMLResourceIdentifier, String, Augmentations):::Caches an unparsed entity.:::ent->new->UnparsedEntity->identifier->getLiteralSystemId->identifier->getPublicId->identifier->getBaseSystemId->identifier->getExpandedSystemId->fUnparsedEntities->add
XIncludeHandler#addNotation(String, XMLResourceIdentifier, Augmentations):::Caches a notation.:::not->new->Notation->identifier->getLiteralSystemId->identifier->getPublicId->identifier->getBaseSystemId->identifier->getExpandedSystemId->fNotations->add
XIncludeHandler#checkUnparsedEntity(String):::Checks if an UnparsedEntity with the given name was declared in the DTD of the document for the current pipeline:::ent->new->UnparsedEntity->index->fUnparsedEntities->indexOf->if->fUnparsedEntities->get->checkNotation->checkAndSendUnparsedEntity
XIncludeHandler#checkNotation(String):::Checks if a Notation with the given name was declared in the DTD of the document for the current pipeline:::not->new->Notation->index->fNotations->indexOf->if->fNotations->get->checkAndSendNotation
XIncludeHandler#checkAndSendUnparsedEntity(UnparsedEntity):::The purpose of this method is to check if an UnparsedEntity conflicts with a previously declared entity in the current pipeline stack:::if->isRootDocument->index->fUnparsedEntities->indexOf->if->id->new->XMLResourceIdentifierImpl->addUnparsedEntity->if->fDTDHandler->unparsedEntityDecl->else->localEntity->fUnparsedEntities->get->if->ent->isDuplicate->new->ObjectArr->reportFatalError->else->fParentXIncludeHandler->checkAndSendUnparsedEntity
XIncludeHandler#checkAndSendNotation(Notation):::The purpose of this method is to check if a Notation conflicts with a previously declared notation in the current pipeline stack:::if->isRootDocument->index->fNotations->indexOf->if->id->new->XMLResourceIdentifierImpl->addNotation->if->fDTDHandler->notationDecl->else->localNotation->fNotations->get->if->not->isDuplicate->new->ObjectArr->reportFatalError->else->fParentXIncludeHandler->checkAndSendNotation
XIncludeHandler#saveBaseURI():::Saves the current base URI to the top of the stack.:::fBaseURIScope->push->fBaseURI->fCurrentBaseURI->getBaseSystemId->push->fLiteralSystemID->fCurrentBaseURI->getLiteralSystemId->push->fExpandedSystemID->fCurrentBaseURI->getExpandedSystemId->push
XIncludeHandler#restoreBaseURI():::Discards the URIs at the top of the stack, and restores the ones beneath it.:::fBaseURI->pop->fLiteralSystemID->pop->fExpandedSystemID->pop->fBaseURIScope->pop->fCurrentBaseURI->fBaseURI->peek->setBaseSystemId->fCurrentBaseURI->fLiteralSystemID->peek->setLiteralSystemId->fCurrentBaseURI->fExpandedSystemID->peek->setExpandedSystemId
XIncludeHandler#saveLanguage(String):::Saves the given language on the top of the stack.:::fLanguageScope->push->fLanguageStack->push
XIncludeHandler#restoreLanguage():::Discards the language at the top of the stack, and returns the one beneath it.:::fLanguageStack->pop->fLanguageScope->pop->return->fLanguageStack->peek
XIncludeHandler#getBaseURI(int):::Gets the base URI that was in use at that depth:::scope->scopeOfBaseURI->return->fExpandedSystemID->get
XIncludeHandler#getLanguage(int):::Gets the language that was in use at that depth.:::scope->scopeOfLanguage->return->fLanguageStack->get
XIncludeHandler#getRelativeURI(int):::Returns a relative URI, which when resolved against the base URI at the specified depth, will create the current base URI:::start->scopeOfBaseURI->if->fBaseURIScope->size->return->uri->fLiteralSystemID->get->new->URI->for->i->fBaseURIScope->size->return->uri->getPath
XIncludeHandler#processXMLBaseAttributes(XMLAttributes):::Search for a xml:base attribute, and if one is found, put the new base URI into effect.:::baseURIValue->attributes->getValue->if->try->expandedValue->XMLEntityManager->fCurrentBaseURI->getExpandedSystemId->expandSystemId->fCurrentBaseURI->setLiteralSystemId->fCurrentBaseURI->fCurrentBaseURI->getExpandedSystemId->setBaseSystemId->fCurrentBaseURI->setExpandedSystemId->saveBaseURI->catch->finally
XIncludeHandler#processXMLLangAttributes(XMLAttributes):::Search for a xml:lang attribute, and if one is found, put the new [language] into effect.:::language->attributes->getValue->if->saveLanguage
XIncludeMessageFormatter#formatMessage(Locale, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::if->if->SecuritySupport->getResourceBundle->if->SecuritySupport->getResourceBundle->msg->fResourceBundle->getString->if->try->format->catch->fResourceBundle->getString->fResourceBundle->getString->finally->if->fResourceBundle->getString->throw->new->MissingResourceException->return
XIncludeNamespaceSupport#pushContext():::Pushes a new context onto the stack.:::super->pushContext->if->contextarray->new->booleanArr->System->arraycopy
XIncludeNamespaceSupport#setContextInvalid():::This method is used to set a context invalid for XInclude namespace processing:::
XIncludeNamespaceSupport#getURIFromIncludeParent(String):::This returns the namespace URI which was associated with the given pretext, in the context that existed at the include parent of the current element:::lastValidContext->while->return->getURI
XIncludeTextReader#setErrorReporter(XMLErrorReporter):::Sets the XMLErrorReporter used for reporting errors while reading the text include.:::
XIncludeTextReader#getReader(XMLInputSource):::Return the Reader for given XMLInputSource.:::if->source->getCharacterStream->return->source->getCharacterStream->else->stream->encoding->source->getEncoding->if->if->source->getByteStream->source->getByteStream->if->new->BufferedInputStream->else->expandedSystemId->XMLEntityManager->source->getSystemId->source->getBaseSystemId->expandSystemId->url->new->URL->urlCon->url->openConnection->if->urlConnection->httpInputSource->propIter->httpInputSource->getHTTPRequestProperties->while->propIter->hasNext->entry->propIter->next->urlConnection->entry->getKey->entry->getValue->setRequestProperty->followRedirects->httpInputSource->getFollowHTTPRedirects->if->urlConnection->setInstanceFollowRedirects->urlCon->getInputStream->new->BufferedInputStream->rawContentType->urlCon->getContentType->index->rawContentType->indexOf->contentType->charset->if->rawContentType->substring->trim->rawContentType->substring->trim->if->charset->startsWith->charset->substring->trim->if->charset->charAt->charset->charset->length->charAt->charset->charAt->charset->charset->length->charAt->charset->charset->length->substring->else->else->rawContentType->trim->detectedEncoding->if->contentType->equals->if->else->else->if->contentType->equals->if->else->getEncodingName->else->if->contentType->endsWith->getEncodingName->if->encoding->toUpperCase->consumeBOM->if->encoding->equals->return->createUTF8Reader->else->if->encoding->equals->return->createUTF16Reader->else->if->encoding->equals->return->createUTF16Reader->javaEncoding->EncodingMap->getIANA2JavaMapping->if->aFormatter->fErrorReporter->getMessageFormatter->aLocale->fErrorReporter->getLocale->throw->aFormatter->new->ObjectArr->formatMessage->new->IOException->else->if->javaEncoding->equals->return->createASCIIReader->else->if->javaEncoding->equals->return->createLatin1Reader->return->new->InputStreamReader
XIncludeTextReader#getEncodingName(InputStream):::XMLEntityManager cares about endian-ness, since it creates its own optimized readers:::b4->new->byteArr->encoding->stream->mark->count->stream->read->stream->reset->if->getEncodingName->return
XIncludeTextReader#consumeBOM(InputStream, String):::Removes the byte order mark from the stream, if it exists and returns the encoding name.:::b->new->byteArr->count->stream->mark->if->encoding->equals->stream->read->if->b0->b1->b2->if->stream->reset->else->stream->reset->else->if->encoding->startsWith->stream->read->if->b0->b1->if->return->else->if->return->stream->reset->return
XIncludeTextReader#getEncodingName(byte[]):::REVISIT: This code is taken from com.sun.org.apache.xerces.internal.impl.XMLEntityManager:::b0->b1->if->return->if->return->b2->if->return->b3->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
XIncludeTextReader#parse():::Read the input stream as text, and pass the text on to the XIncludeHandler using calls to characters():::getReader->readSize->fReader->read->while->for->i->if->fHandler->fHandler->modifyAugmentations->characters->fReader->read
XIncludeTextReader#setInputSource(XMLInputSource):::Sets the input source on this text reader.:::
XIncludeTextReader#close():::Closes the stream:::if->fReader->close
XIncludeTextReader#isValid(int):::Returns true if the specified character is a valid XML character as per the rules of XML 1.0.:::return->XMLChar->isValid
XIncludeTextReader#setBufferSize(int):::Sets the buffer size property for the reader which decides the chunk sizes that are parsed by the reader at a time and passed to the handler:::if->new->charArr

jdk.dynalink.linker.support.CompositeGuardingDynamicLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation:::Delegates the call to its component linkers
jdk.dynalink.linker.support.CompositeTypeBasedGuardingDynamicLinker#canLinkType(Class)->boolean:::Returns true if at least one of the composite linkers returns true from TypeBasedGuardingDynamicLinker#canLinkType(Class) for the type.
jdk.dynalink.linker.support.CompositeTypeBasedGuardingDynamicLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: composite type based guarding dynamic linker get guarded invocation
jdk.dynalink.linker.support.CompositeTypeBasedGuardingDynamicLinker#optimize(Iterable)->List:::Optimizes a list of type-based linkers
jdk.dynalink.linker.support.DefaultInternalObjectFilter#transform(MethodHandle)->MethodHandle::: default internal object filter transform
jdk.dynalink.linker.support.Guards#isOfClass(Class, MethodType)->MethodHandle:::Creates a guard method handle with arguments of a specified type, but with boolean return value
jdk.dynalink.linker.support.Guards#isInstance(Class, MethodType)->MethodHandle:::Creates a method handle with arguments of a specified type, but with boolean return value
jdk.dynalink.linker.support.Guards#isInstance(Class, int, MethodType)->MethodHandle:::Creates a method handle with arguments of a specified type, but with boolean return value
jdk.dynalink.linker.support.Guards#isArray(int, MethodType)->MethodHandle:::Creates a method handle that returns true if the argument in the specified position is a Java array.
jdk.dynalink.linker.support.Guards#asType(MethodHandle, MethodType)->MethodHandle:::Takes a method handle intended to be used as a guard, and adapts it to the requested type, but returning a boolean
jdk.dynalink.linker.support.Guards#asType(LinkerServices, MethodHandle, MethodType)->MethodHandle:::Takes a method handle intended to be used as a guard, and adapts it to the requested type, but returning a boolean
jdk.dynalink.linker.support.Guards#getClassGuard(Class)->MethodHandle:::Creates a guard method that tests its only argument for being of an exact particular class.
jdk.dynalink.linker.support.Guards#getInstanceOfGuard(Class)->MethodHandle:::Creates a guard method that tests its only argument for being an instance of a particular class.
jdk.dynalink.linker.support.Guards#getIdentityGuard(Object)->MethodHandle:::Creates a guard method that tests its only argument for being referentially identical to another object
jdk.dynalink.linker.support.Guards#isNull()->MethodHandle:::Returns a guard that tests whether the first argument is null.
jdk.dynalink.linker.support.Guards#isNotNull()->MethodHandle:::Returns a guard that tests whether the first argument is not null.
jdk.dynalink.linker.support.Lookup#unreflect(Method)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#unreflect(Method), converting any encountered IllegalAccessException into an IllegalAccessError.
jdk.dynalink.linker.support.Lookup#unreflect(MethodHandles.Lookup, Method)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#unreflect(Method), converting any encountered IllegalAccessException into an IllegalAccessError.
jdk.dynalink.linker.support.Lookup#unreflectGetter(Field)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#unreflectGetter(Field), converting any encountered IllegalAccessException into an IllegalAccessError.
jdk.dynalink.linker.support.Lookup#findGetter(Class, String, Class)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#findGetter(Class, String, Class), converting any encountered IllegalAccessException into an IllegalAccessError and NoSuchFieldException into a NoSuchFieldError.
jdk.dynalink.linker.support.Lookup#unreflectSetter(Field)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#unreflectSetter(Field), converting any encountered IllegalAccessException into an IllegalAccessError.
jdk.dynalink.linker.support.Lookup#unreflectConstructor(Constructor)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#unreflectConstructor(Constructor), converting any encountered IllegalAccessException into an IllegalAccessError.
jdk.dynalink.linker.support.Lookup#unreflectConstructor(MethodHandles.Lookup, Constructor)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#unreflectConstructor(Constructor), converting any encountered IllegalAccessException into an IllegalAccessError.
jdk.dynalink.linker.support.Lookup#findSpecial(Class, String, MethodType)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#findSpecial(Class, String, MethodType, Class) on the underlying lookup
jdk.dynalink.linker.support.Lookup#findStatic(Class, String, MethodType)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#findStatic(Class, String, MethodType) on the underlying lookup
jdk.dynalink.linker.support.Lookup#findVirtual(Class, String, MethodType)->MethodHandle:::Performs a java.lang.invoke.MethodHandles.Lookup#findVirtual(Class, String, MethodType) on the underlying lookup
jdk.dynalink.linker.support.Lookup#findOwnSpecial(MethodHandles.Lookup, String, Class, Class...)->MethodHandle:::Given a lookup, finds using #findSpecial(Class, String, MethodType) a method on that lookup's class
jdk.dynalink.linker.support.Lookup#findOwnSpecial(String, Class, Class...)->MethodHandle:::Finds using #findSpecial(Class, String, MethodType) a method on that lookup's class
jdk.dynalink.linker.support.Lookup#findOwnStatic(MethodHandles.Lookup, String, Class, Class...)->MethodHandle:::Given a lookup, finds using #findStatic(Class, String, MethodType) a method on that lookup's class
jdk.dynalink.linker.support.Lookup#findOwnStatic(String, Class, Class...)->MethodHandle:::Finds using #findStatic(Class, String, MethodType) a method on that lookup's class
jdk.dynalink.linker.support.SimpleLinkRequest#getArguments()->Object[]::: simple link request get arguments
jdk.dynalink.linker.support.SimpleLinkRequest#getReceiver()->Object::: simple link request get receiver
jdk.dynalink.linker.support.SimpleLinkRequest#getCallSiteDescriptor()->CallSiteDescriptor::: simple link request get call site descriptor
jdk.dynalink.linker.support.SimpleLinkRequest#isCallSiteUnstable()->boolean::: simple link request is call site unstable
jdk.dynalink.linker.support.SimpleLinkRequest#replaceArguments(CallSiteDescriptor, Object...)->LinkRequest::: simple link request replace arguments
jdk.dynalink.linker.support.TypeUtilities#isMethodInvocationConvertible(Class, Class)->boolean:::Determines whether one type can be converted to another type using a method invocation conversion, as per JLS 5.3 "Method Invocation Conversion"
jdk.dynalink.linker.support.TypeUtilities#isConvertibleWithoutLoss(Class, Class)->boolean:::Determines whether a type can be converted to another without losing any precision
jdk.dynalink.linker.support.TypeUtilities#isSubtype(Class, Class)->boolean:::Determines whether one type is a subtype of another type, as per JLS 4.10 "Subtyping"
jdk.dynalink.linker.support.TypeUtilities#getPrimitiveTypeByName(String)->Class:::Given a name of a primitive type returns the class representing it
jdk.dynalink.linker.support.TypeUtilities#getPrimitiveType(Class)->Class:::When passed a class representing a wrapper for a primitive type, returns the class representing the corresponding primitive type
jdk.dynalink.linker.support.TypeUtilities#getWrapperType(Class)->Class:::When passed a class representing a primitive type, returns the class representing the corresponding wrapper type
jdk.dynalink.linker.support.TypeUtilities#isWrapperType(Class)->boolean:::Returns true if the passed type is a wrapper for a primitive type.

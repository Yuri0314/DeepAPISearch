jdk.vm.ci.code.stack.InspectedFrame#getLocal(int)->Object:::Returns the value of the object local at index
jdk.vm.ci.code.stack.InspectedFrame#isVirtual(int)->boolean:::Returns whether the local at index is a virtual object, and therefore the object returned by #getLocal(int) is a copy.
jdk.vm.ci.code.stack.InspectedFrame#hasVirtualObjects()->boolean:::Returns true if the stack frame is a compiled stack frame and there are virtual objects anywhere in the current state of the compiled method
jdk.vm.ci.code.stack.InspectedFrame#materializeVirtualObjects(boolean)->void:::This method will materialize all virtual objects, deoptimize the stack frame and make sure that subsequent execution of the deoptimized frame uses the materialized values.
jdk.vm.ci.code.stack.InspectedFrame#getBytecodeIndex()->int::: inspected frame get bytecode index
jdk.vm.ci.code.stack.InspectedFrame#getMethod()->ResolvedJavaMethod::: inspected frame get method
jdk.vm.ci.code.stack.InspectedFrame#isMethod(ResolvedJavaMethod)->boolean:::Checks if the current method is equal to the given method
jdk.vm.ci.code.stack.InspectedFrameVisitor#visitFrame(InspectedFrame)->T::: inspected frame visitor visit frame
jdk.vm.ci.code.stack.StackIntrospection#iterateFrames(ResolvedJavaMethod[], ResolvedJavaMethod[], int, InspectedFrameVisitor)->T:::Walks the current stack, providing InspectedFrames to the visitor that can be used to inspect the stack frame's contents

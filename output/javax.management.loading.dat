ClassLoaderRepository#loadClass(String):::Load the given class name through the list of class loaders:::
ClassLoaderRepository#loadClassWithout(ClassLoader, String):::Load the given class name through the list of class loaders, excluding the given one:::
ClassLoaderRepository#loadClassBefore(ClassLoader, String):::Load the given class name through the list of class loaders, stopping at the given one:::
DefaultLoaderRepository#loadClass(String):::Go through the list of class loaders and try to load the requested class:::MBEANSERVER_LOGGER->log->return->load
DefaultLoaderRepository#loadClassWithout(ClassLoader, String):::Go through the list of class loaders but exclude the given class loader, then try to load the requested class:::MBEANSERVER_LOGGER->log->return->load
MLet#addURL(URL):::Appends the specified URL to the list of URLs to search for classes and resources.:::if->Arrays->getURLs->asList->contains->super->addURL
MLet#addURL(String):::Appends the specified URL to the list of URLs to search for classes and resources.:::try->ur->new->URL->if->Arrays->getURLs->asList->contains->super->addURL->catch->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->throw->new->ServiceNotFoundException->finally
MLet#getURLs():::Returns the search path of URLs for loading classes and resources:::return->super->getURLs
MLet#getMBeansFromURL(URL):::Loads a text file containing MLET tags that define the MBeans to be added to the MBean server:::if->throw->new->ServiceNotFoundException->return->url->toString->getMBeansFromURL
MLet#getMBeansFromURL(String):::Loads a text file containing MLET tags that define the MBeans to be added to the MBean server:::if->throw->new->IllegalStateException->if->MLET_LOGGER->log->throw->new->ServiceNotFoundException->else->url->replace->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->try->parser->new->MLetParser->parser->parseURL->catch->msg->e->toString->MLET_LOGGER->log->throw->EnvHelp->new->ServiceNotFoundException->initCause->finally->if->mletList->size->msg->MLET_LOGGER->log->throw->new->ServiceNotFoundException->mbeans->new->HashSet<Object>->foreach->code->elmt->getCode->if->if->code->endsWith->code->code->length->substring->name->elmt->getName->codebase->elmt->getCodeBase->version->elmt->getVersion->serName->elmt->getSerializedObject->jarFiles->elmt->getJarFiles->documentBase->elmt->getDocumentBase->if->MLET_LOGGER->isLoggable->strb->new->StringBuilder->append->elmt->getAttributes->append->append->append->append->append->append->append->append->append->append->append->append->append->append->append->MLET_LOGGER->strb->toString->log->st->new->StringTokenizer->while->st->hasMoreTokens->tok->st->nextToken->trim->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->try->check->catch->MLET_LOGGER->log->mbeans->add->continue->finally->try->if->Arrays->getURLs->asList->codebase->toString->new->URL->contains->addURL->catch->finally->o->objInst->if->msg->MLET_LOGGER->log->mbeans->new->Error->add->continue->if->msg->MLET_LOGGER->log->mbeans->new->Error->add->continue->try->if->signat->elmt->getParameterTypes->stringPars->elmt->getParameterValues->objectPars->new->ArrayList<Object>->for->i->signat->size->if->signat->isEmpty->if->server->createMBean->else->server->new->ObjectName->createMBean->else->parms->objectPars->toArray->signature->signat->size->new->StringArr->signat->toArray->if->MLET_LOGGER->isLoggable->strb->new->StringBuilder->for->i->MLET_LOGGER->strb->toString->log->if->server->createMBean->else->server->new->ObjectName->createMBean->else->loadSerializedObject->if->server->registerMBean->else->server->new->ObjectName->registerMBean->o->getClass->getName->new->ObjectInstance->catch->MLET_LOGGER->log->mbeans->add->continue->MLET_LOGGER->log->mbeans->add->continue->MLET_LOGGER->log->mbeans->add->continue->MLET_LOGGER->log->mbeans->add->continue->MLET_LOGGER->log->mbeans->add->continue->MLET_LOGGER->log->mbeans->add->continue->MLET_LOGGER->log->mbeans->add->continue->MLET_LOGGER->log->mbeans->add->continue->MLET_LOGGER->log->mbeans->add->continue->MLET_LOGGER->log->mbeans->add->continue->finally->mbeans->add->return
MLet#getLibraryDirectory():::Gets the current directory used by the library loader for storing native libraries before they are loaded into memory.:::return
MLet#setLibraryDirectory(String):::Sets the directory used by the library loader for storing native libraries before they are loaded into memory.:::
MLet#preRegister(MBeanServer, ObjectName):::Allows the m-let to perform any operations it needs before being registered in the MBean server:::setMBeanServer->if->server->getDefaultDomain->new->ObjectName->return
MLet#postRegister(Boolean):::Allows the m-let to perform any operations needed after having been registered in the MBean server or after the registration has failed.:::
MLet#preDeregister():::Allows the m-let to perform any operations it needs before being unregistered by the MBean server.:::
MLet#postDeregister():::Allows the m-let to perform any operations needed after having been unregistered in the MBean server.:::
MLet#writeExternal(ObjectOutput):::Save this MLet's contents to the given ObjectOutput:::throw->new->UnsupportedOperationException
MLet#readExternal(ObjectInput):::Restore this MLet's contents from the given ObjectInput:::throw->new->UnsupportedOperationException
MLet#loadClass(String, ClassLoaderRepository):::Load a class, using the given ClassLoaderRepository if the class is not found in this MLet's URLs:::before->try->return->loadClass->catch->finally
MLet#findClass(String):::This is the main method for class loaders that is being redefined.:::return->findClass
MLet#findClass(String, ClassLoaderRepository):::Called by MLet#findClass(java.lang.String).:::c->MLET_LOGGER->log->try->super->findClass->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->catch->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->finally->if->try->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->clr->loadClassBefore->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->catch->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->finally->if->MLET_LOGGER->log->throw->new->ClassNotFoundException->return
MLet#findLibrary(String):::Returns the absolute path name of a native library:::abs_path->mth->nativelibname->System->mapLibraryName->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->loadLibraryAsResource->if->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->return->System->getProperty->removeSpace->System->getProperty->removeSpace->System->getProperty->removeSpace->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->loadLibraryAsResource->if->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->return->if->MLET_LOGGER->isLoggable->MLET_LOGGER->log->MLET_LOGGER->log->return
MLet#check(String, URL, String, MLetContent):::This method is to be overridden when extending this service to support caching and versioning:::return
MLetContent#getAttributes():::Gets the attributes of the <CODE>MLET</CODE> tag:::return
MLetContent#getDocumentBase():::Gets the MLet text file's base URL.:::return
MLetContent#getCodeBase():::Gets the code base URL.:::return
MLetContent#getJarFiles():::Gets the list of <CODE>.jar</CODE> files specified by the <CODE>ARCHIVE</CODE> attribute of the <CODE>MLET</CODE> tag.:::return->getParameter
MLetContent#getCode():::Gets the value of the <CODE>CODE</CODE> attribute of the <CODE>MLET</CODE> tag.:::return->getParameter
MLetContent#getSerializedObject():::Gets the value of the <CODE>OBJECT</CODE> attribute of the <CODE>MLET</CODE> tag.:::return->getParameter
MLetContent#getName():::Gets the value of the <CODE>NAME</CODE> attribute of the <CODE>MLET</CODE> tag.:::return->getParameter
MLetContent#getVersion():::Gets the value of the <CODE>VERSION</CODE> attribute of the <CODE>MLET</CODE> tag.:::return->getParameter
MLetContent#getParameterTypes():::Gets the list of values of the TYPE attribute in each nested &lt;PARAM&gt; tag within the MLET tag.:::return
MLetContent#getParameterValues():::Gets the list of values of the VALUE attribute in each nested &lt;PARAM&gt; tag within the MLET tag.:::return
MLetMBean#getMBeansFromURL(String):::Loads a text file containing MLET tags that define the MBeans to be added to the MBean server:::
MLetMBean#getMBeansFromURL(URL):::Loads a text file containing MLET tags that define the MBeans to be added to the MBean server:::
MLetMBean#addURL(URL):::Appends the specified URL to the list of URLs to search for classes and resources.:::
MLetMBean#addURL(String):::Appends the specified URL to the list of URLs to search for classes and resources.:::
MLetMBean#getURLs():::Returns the search path of URLs for loading classes and resources:::
MLetMBean#getResource(String):::Finds the resource with the given name:::
MLetMBean#getResourceAsStream(String):::Returns an input stream for reading the specified resource:::
MLetMBean#getResources(String):::Finds all the resources with the given name:::
MLetMBean#getLibraryDirectory():::Gets the current directory used by the library loader for storing native libraries before they are loaded into memory.:::
MLetMBean#setLibraryDirectory(String):::Sets the directory used by the library loader for storing native libraries before they are loaded into memory.:::
MLetObjectInputStream#resolveClass(ObjectStreamClass):::Use the given ClassLoader rather than using the system class:::s->objectstreamclass->getName->if->s->startsWith->i->for->s->charAt->class1->if->s->charAt->loader->s->s->length->substring->loadClass->else->if->s->length->throw->new->ClassNotFoundException->s->charAt->primitiveType->ai->new->intArr->for->j->return->Array->newInstance->getClass->else->return->loader->loadClass
MLetObjectInputStream#getClassLoader():::Returns the ClassLoader being used:::return
MLetParser#skipSpace(Reader):::Scan spaces.:::while->in->read
MLetParser#scanIdentifier(Reader):::Scan identifier:::buf->new->StringBuilder->while->if->buf->append->in->read->else->return->buf->toString
MLetParser#scanTag(Reader):::Scan tag:::atts->new->HashMap<String,String>->skipSpace->while->if->throw->new->IOException->att->scanIdentifier->val->skipSpace->if->quote->in->read->skipSpace->if->in->read->buf->new->StringBuilder->while->buf->append->in->read->if->in->read->skipSpace->buf->toString->atts->att->toLowerCase->put->skipSpace->return
MLetParser#parse(URL):::Scan an html file for <mlet> tags.:::requiresTypeWarning->requiresValueWarning->paramOutsideWarning->requiresCodeWarning->requiresJarsWarning->conn->url->openConnection->in->conn->getInputStream->new->InputStreamReader->new->BufferedReader->conn->getURL->mlets->new->ArrayList<MLetContent>->atts->types->new->ArrayList<String>->values->new->ArrayList<String>->while->in->read->if->break->if->in->read->if->in->read->nm->scanIdentifier->if->throw->new->IOException->if->nm->equalsIgnoreCase->if->mlets->new->MLetContent->add->new->ArrayList<String>->new->ArrayList<String>->else->nm->scanIdentifier->if->nm->equalsIgnoreCase->t->scanTag->att->t->get->if->MLET_LOGGER->log->throw->new->IOException->else->if->types->add->else->MLET_LOGGER->log->throw->new->IOException->val->t->get->if->MLET_LOGGER->log->throw->new->IOException->else->if->values->add->else->MLET_LOGGER->log->throw->new->IOException->else->if->nm->equalsIgnoreCase->scanTag->if->atts->get->atts->get->MLET_LOGGER->log->throw->new->IOException->if->atts->get->MLET_LOGGER->log->throw->new->IOException->in->close->return
MLetParser#parseURL(String):::Parse the document pointed by the URL urlname:::url->if->urlname->indexOf->userDir->System->getProperty->prot->if->userDir->charAt->userDir->charAt->else->userDir->replace->new->URL->new->URL->else->new->URL->return->parse

SignatureParser#init(String)::: signature parser init:::
SignatureParser#current()::: signature parser current:::return->input->length->input->charAt
SignatureParser#advance()::: signature parser advance:::if->input->length
SignatureParser#mark()::: signature parser mark:::
SignatureParser#remainder()::: signature parser remainder:::return->input->substring
SignatureParser#markToCurrent()::: signature parser mark to current:::return->input->substring
SignatureParser#error(String)::: signature parser error:::return->remainder->new->GenericSignatureFormatError
SignatureParser#progress(int):::Verify the parse has made forward progress; throw an exception if no progress.:::if->throw->error
SignatureParser#make():::Static factory method:::return->new->SignatureParser
SignatureParser#parseClassSig(String):::Parses a class signature (as defined in the JVMS, chapter 4) and produces an abstract syntax tree representing it.:::if->println->init->return->parseClassSignature
SignatureParser#parseMethodSig(String):::Parses a method signature (as defined in the JVMS, chapter 4) and produces an abstract syntax tree representing it.:::if->println->init->return->parseMethodTypeSignature
SignatureParser#parseTypeSig(String):::Parses a type signature and produces an abstract syntax tree representing it.:::if->println->init->return->parseTypeSignature
SignatureParser#parseClassSignature():::ClassSignature:     FormalTypeParameters_opt SuperclassSignature SuperinterfaceSignature*:::return->ClassSignature->parseZeroOrMoreFormalTypeParameters->parseClassTypeSignature->parseSuperInterfaces->make
SignatureParser#parseZeroOrMoreFormalTypeParameters()::: signature parser parse zero or more formal type parameters:::if->current->return->parseFormalTypeParameters->else->return->new->FormalTypeParameterArr
SignatureParser#parseFormalTypeParameters():::FormalTypeParameters:     "<" FormalTypeParameter+ ">":::ftps->new->ArrayList<>->if->current->throw->error->advance->ftps->parseFormalTypeParameter->add->while->current->startingPosition->ftps->parseFormalTypeParameter->add->progress->advance->return->ftps->ftps->size->new->FormalTypeParameterArr->toArray
SignatureParser#parseFormalTypeParameter():::FormalTypeParameter:     Identifier ClassBound InterfaceBound*:::id->parseIdentifier->bs->parseBounds->return->FormalTypeParameter->make
SignatureParser#parseIdentifier()::: signature parser parse identifier:::mark->skipIdentifier->return->markToCurrent
SignatureParser#skipIdentifier()::: signature parser skip identifier:::c->current->while->Character->isWhitespace->advance->current
SignatureParser#parseFieldTypeSignature():::FieldTypeSignature:     ClassTypeSignature     ArrayTypeSignature     TypeVariableSignature:::return->parseFieldTypeSignature
SignatureParser#parseFieldTypeSignature(boolean)::: signature parser parse field type signature:::switch->current->return->parseClassTypeSignature->return->parseTypeVariableSignature->if->return->parseArrayTypeSignature->else->throw->error->throw->error
SignatureParser#parseClassTypeSignature():::ClassTypeSignature:     "L" PackageSpecifier_opt SimpleClassTypeSignature ClassTypeSignatureSuffix* ";":::if->current->throw->error->advance->scts->new->ArrayList<>->scts->parsePackageNameAndSimpleClassTypeSignature->add->parseClassTypeSignatureSuffix->if->current->throw->current->error->advance->return->ClassTypeSignature->make
SignatureParser#parsePackageNameAndSimpleClassTypeSignature():::PackageSpecifier:     Identifier "/" PackageSpecifier*:::mark->skipIdentifier->while->current->advance->skipIdentifier->id->markToCurrent->replace->switch->current->return->SimpleClassTypeSignature->new->TypeArgumentArr->make->if->remainder->println->return->SimpleClassTypeSignature->parseTypeArguments->make->throw->current->error
SignatureParser#parseSimpleClassTypeSignature(boolean):::SimpleClassTypeSignature:     Identifier TypeArguments_opt:::id->parseIdentifier->c->current->switch->return->SimpleClassTypeSignature->new->TypeArgumentArr->make->return->SimpleClassTypeSignature->parseTypeArguments->make->throw->error
SignatureParser#parseClassTypeSignatureSuffix(List):::ClassTypeSignatureSuffix:     "." SimpleClassTypeSignature:::while->current->advance->scts->parseSimpleClassTypeSignature->add
SignatureParser#parseTypeArguments():::TypeArguments:     "<" TypeArgument+ ">":::tas->new->ArrayList<>->if->current->throw->error->advance->tas->parseTypeArgument->add->while->current->tas->parseTypeArgument->add->advance->return->tas->tas->size->new->TypeArgumentArr->toArray
SignatureParser#parseTypeArgument():::TypeArgument:     WildcardIndicator_opt FieldTypeSignature     "*":::ub->lb->new->FieldTypeSignatureArr->new->FieldTypeSignatureArr->ta->new->TypeArgumentArr->c->current->switch->advance->parseFieldTypeSignature->BottomSignature->make->return->Wildcard->make->advance->SimpleClassTypeSignature->make->BottomSignature->make->return->Wildcard->make->advance->parseFieldTypeSignature->SimpleClassTypeSignature->make->return->Wildcard->make->return->parseFieldTypeSignature
SignatureParser#parseTypeVariableSignature():::TypeVariableSignature:     "T" Identifier ";":::if->current->throw->error->advance->ts->TypeVariableSignature->parseIdentifier->make->if->current->throw->ts->getIdentifier->error->advance->return
SignatureParser#parseArrayTypeSignature():::ArrayTypeSignature:     "[" TypeSignature:::if->current->throw->error->advance->return->ArrayTypeSignature->parseTypeSignature->make
SignatureParser#parseTypeSignature():::TypeSignature:     FieldTypeSignature     BaseType:::switch->current->return->parseBaseType->return->parseFieldTypeSignature
SignatureParser#parseBaseType()::: signature parser parse base type:::switch->current->advance->return->ByteSignature->make->advance->return->CharSignature->make->advance->return->DoubleSignature->make->advance->return->FloatSignature->make->advance->return->IntSignature->make->advance->return->LongSignature->make->advance->return->ShortSignature->make->advance->return->BooleanSignature->make->throw->error
SignatureParser#parseBounds():::ClassBound:     ":" FieldTypeSignature_opt  InterfaceBound:     ":" FieldTypeSignature:::fts->new->ArrayList<>->if->current->advance->switch->current->break->fts->parseFieldTypeSignature->add->while->current->advance->fts->parseFieldTypeSignature->add->else->error->return->fts->fts->size->new->FieldTypeSignatureArr->toArray
SignatureParser#parseSuperInterfaces():::SuperclassSignature:     ClassTypeSignature:::cts->new->ArrayList<>->while->current->cts->parseClassTypeSignature->add->return->cts->cts->size->new->ClassTypeSignatureArr->toArray
SignatureParser#parseMethodTypeSignature():::MethodTypeSignature:     FormalTypeParameters_opt "(" TypeSignature* ")" ReturnType ThrowsSignature*:::ets->return->MethodTypeSignature->parseZeroOrMoreFormalTypeParameters->parseFormalParameters->parseReturnType->parseZeroOrMoreThrowsSignatures->make
SignatureParser#parseFormalParameters()::: signature parser parse formal parameters:::if->current->throw->error->advance->pts->parseZeroOrMoreTypeSignatures->if->current->throw->error->advance->return
SignatureParser#parseZeroOrMoreTypeSignatures()::: signature parser parse zero or more type signatures:::ts->new->ArrayList<>->stop->while->switch->current->ts->parseTypeSignature->add->break->return->ts->ts->size->new->TypeSignatureArr->toArray
SignatureParser#parseReturnType():::ReturnType:     TypeSignature     VoidDescriptor:::if->current->advance->return->VoidDescriptor->make->else->return->parseTypeSignature
SignatureParser#parseZeroOrMoreThrowsSignatures()::: signature parser parse zero or more throws signatures:::ets->new->ArrayList<>->while->current->ets->parseThrowsSignature->add->return->ets->ets->size->new->FieldTypeSignatureArr->toArray
SignatureParser#parseThrowsSignature():::ThrowsSignature:     "^" ClassTypeSignature     "^" TypeVariableSignature:::if->current->throw->error->advance->return->parseFieldTypeSignature

ASMToolkit#getDescriptor(String):::Converts "int" into "I" and "java.lang.String" into "Ljava/lang/String;":::if->equals->return->if->equals->return->if->equals->return->if->equals->return->if->equals->return->if->equals->return->if->equals->return->if->equals->return->internal->getInternalName->return->Type->getObjectType->getDescriptor
ASMToolkit#getInternalName(String):::Converts java.lang.String into java/lang/String:::return->className->replace
JVM#getJVM():::Get the one and only JVM.:::return
JVM#beginRecording():::Begin recording events  Requires that JFR has been started with #createNativeJFR():::
JVM#counterTime():::Return ticks:::
JVM#emitEvent(long, long, long):::Emits native periodic event.:::
JVM#endRecording():::End recording events, which includes flushing data in thread buffers  Requires that JFR has been started with #createNativeJFR():::
JVM#getAllEventClasses():::Return a list of all classes deriving from jdk.internal.event.Event:::
JVM#getUnloadedEventClassCount():::Return a count of the number of unloaded classes deriving from Event:::
JVM#getClassId(Class):::Return a unique identifier for a class:::
JVM#getPid():::Return process identifier.:::
JVM#getStackTraceId(int):::Return unique identifier for stack trace:::
JVM#getThreadId(Thread):::Return identifier for thread:::
JVM#getTicksFrequency():::Frequency, ticks per second:::
JVM#log(int, int, String):::Write message to log:::
JVM#subscribeLogLevel(LogTag, int):::Subscribe to LogLevel updates for LogTag:::
JVM#retransformClasses(Class[]):::Call to invoke event tagging and retransformation of the passed classes:::
JVM#setEnabled(long, boolean):::Enable event:::
JVM#setFileNotification(long):::Interval at which the JVM should notify on #FILE_DELTA_CHANGE:::
JVM#setGlobalBufferCount(long):::Set the number of global buffers to use:::
JVM#setGlobalBufferSize(long):::Set size of a global buffer:::
JVM#setMemorySize(long):::Set overall memory size:::
JVM#setMethodSamplingInterval(long, long):::    /** Set interval for method samples, in milliseconds:::
JVM#setOutput(String):::Sets the file where data should be written:::
JVM#setForceInstrumentation(boolean):::Controls if a class deriving from jdk.jfr.Event should always be instrumented on class load.:::
JVM#setSampleThreads(boolean):::Turn on/off thread sampling.:::
JVM#setCompressedIntegers(boolean):::Turn on/off compressed integers.:::
JVM#setStackDepth(int):::Set stack depth.:::
JVM#setStackTraceEnabled(long, boolean):::Turn on stack trace for an event:::
JVM#setThreadBufferSize(long):::Set thread buffer size.:::
JVM#setThreshold(long, long):::Set threshold for event,  Long.MAXIMUM_VALUE = no limit:::
JVM#storeMetadataDescriptor(byte[]):::Store the metadata descriptor that is to be written at the end of a chunk, data should be written after GMT offset and size of metadata event should be adjusted  Requires that JFR has been started with #createNativeJFR():::
JVM#getAllowedToDoEventRetransforms():::If the JVM supports JVM TI and retransformation has not been disabled this method will return true:::
JVM#isAvailable():::Cheap test to check if JFR functionality is available.:::
JVM#getTimeConversionFactor():::To convert ticks to wall clock time.:::
JVM#getTypeId(Class):::Return a unique identifier for a class:::
JVM#getEventWriter():::Fast path fetching the EventWriter using VM intrinsics:::
JVM#newEventWriter():::Create a new EventWriter:::
JVM#flush(EventWriter, int, int):::Flushes the EventWriter for this thread.:::
JVM#setRepositoryLocation(String):::Sets the location of the disk repository, to be used at an emergency dump.:::
JVM#abort(String):::Access to VM termination support.:::
JVM#addStringConstant(boolean, long, String):::Adds a string to the string constant pool:::
JVM#getEpochAddress():::Gets the address of the jboolean epoch:::
JVM#setCutoff(long, long):::Sets cutoff for event:::
JVM#emitOldObjectSamples(long, boolean):::Emit old object sample events.:::
JVM#shouldRotateDisk():::Test if a chunk rotation is warranted.:::
JVMUpcalls#onRetransform(long, boolean, Class, byte[]):::Called by the JVM when a retransform happens on a tagged class:::try->if->isAssignableFrom->Modifier->clazz->getModifiers->isAbstract->handler->Utils->clazz->asSubclass->getHandler->if->Logger->clazz->getName->log->return->Logger->clazz->getName->log->ei->clazz->getSuperclass->new->EventInstrumentation->bytes->ei->buildInstrumented->ASMToolkit->clazz->getName->logASM->return->return->JDKEvents->retransformCallback->catch->Logger->clazz->getName->log->finally->return
JVMUpcalls#bytesForEagerInstrumentation(long, boolean, Class, byte[]):::Called by the JVM when requested to do an "eager" instrumentation:::if->JVMSupport->isNotAvailable->return->eventName->try->ei->new->EventInstrumentation->ei->getEventName->if->mr->MetadataRepository->getInstance->if->mr->ei->getEventName->isEnabled->ei->isEnabled->ei->isRegistered->Logger->log->return->ei->setGuardHandler->Logger->log->eh->ei->getSettingInfos->ei->getFieldInfos->new->EventHandlerCreator->eh->makeEventHandlerClass->bytes->ei->buildInstrumented->ASMToolkit->ei->getClassName->logASM->return->catch->Logger->log->return->finally
JVMUpcalls#createRecorderThread(ThreadGroup, ClassLoader):::Called by the JVM to create the recorder thread.:::return->SecuritySupport->createRecorderThread
SecuritySupport#addHandlerExport(Class):::Adds a qualified export of the internal.jdk.jfr.internal.handlers package (for EventHandler):::Modules->clazz->getModule->addExports
Utils#getAnnotations(Class):::Return all annotations as they are visible in the source code:::annos->new->ArrayList<>->foreach->clazz->getAnnotations->annos->getAnnotation->addAll->return
WriteableUserPath#getPotentiallyMaliciousOriginal():::Returns a potentially malicious path where the user may have implemented their own version of Path:::return
WriteableUserPath#getRealPathText():::Returns a string representation of the real path.:::return
WriteableUserPath#getOriginalText():::Returns a string representation of the original path.:::return
WriteableUserPath#getReal():::Returns a potentially malicious path where the user may have implemented their own version of Path:::if->throw->new->InternalError->return

jdk.jfr.internal.AnnotationConstruct#setAnnotationElements(List)->void::: annotation construct set annotation elements
jdk.jfr.internal.AnnotationConstruct#getLabel()->String::: annotation construct get label
jdk.jfr.internal.AnnotationConstruct#getDescription()->String::: annotation construct get description
jdk.jfr.internal.AnnotationConstruct#getAnnotation(Class)->T::: annotation construct get annotation
jdk.jfr.internal.AnnotationConstruct#getUnmodifiableAnnotationElements()->List::: annotation construct get unmodifiable annotation elements
jdk.jfr.internal.AnnotationConstruct#remove(AnnotationElement)->boolean::: annotation construct remove
jdk.jfr.internal.AnnotationConstruct#hasUnsigned()->boolean::: annotation construct has unsigned
jdk.jfr.internal.ASMToolkit#invokeSpecial(MethodVisitor, String, Method)->void::: toolkit invoke special
jdk.jfr.internal.ASMToolkit#invokeStatic(MethodVisitor, String, Method)->void::: toolkit invoke static
jdk.jfr.internal.ASMToolkit#invokeVirtual(MethodVisitor, String, Method)->void::: toolkit invoke virtual
jdk.jfr.internal.ASMToolkit#toType(ValueDescriptor)->Type::: toolkit to type
jdk.jfr.internal.ASMToolkit#getDescriptor(String)->String:::Converts "int" into "I" and "java.lang.String" into "Ljava/lang/String;"
jdk.jfr.internal.ASMToolkit#getInternalName(String)->String:::Converts java.lang.String into java/lang/String
jdk.jfr.internal.ASMToolkit#makeWriteMethod(List)->Method::: toolkit make write method
jdk.jfr.internal.ASMToolkit#logASM(String, byte[])->void::: toolkit log m
jdk.jfr.internal.Bits#putByte(long, byte)->int::: bits put byte
jdk.jfr.internal.Bits#putBoolean(long, boolean)->int::: bits put boolean
jdk.jfr.internal.Bits#putChar(long, char)->int::: bits put char
jdk.jfr.internal.Bits#putShort(long, short)->int::: bits put short
jdk.jfr.internal.Bits#putInt(long, int)->int::: bits put int
jdk.jfr.internal.Bits#putLong(long, long)->int::: bits put long
jdk.jfr.internal.Bits#putFloat(long, float)->int::: bits put float
jdk.jfr.internal.Bits#putDouble(long, double)->int::: bits put double
jdk.jfr.internal.ChunkInputStream#available()->int::: chunk input stream available
jdk.jfr.internal.ChunkInputStream#read()->int::: chunk input stream read
jdk.jfr.internal.ChunkInputStream#close()->void::: chunk input stream close
jdk.jfr.internal.ChunkInputStream#finalize()->void::: chunk input stream finalize
jdk.jfr.internal.ChunksChannel#read(ByteBuffer)->int::: chunks channel read
jdk.jfr.internal.ChunksChannel#transferTo(FileChannel)->long::: chunks channel transfer to
jdk.jfr.internal.ChunksChannel#close()->void::: chunks channel close
jdk.jfr.internal.ChunksChannel#isOpen()->boolean::: chunks channel is open
jdk.jfr.internal.ChunksChannel#finalize()->void::: chunks channel finalize
jdk.jfr.internal.Control#combine(Set)->String::: control combine
jdk.jfr.internal.Control#setValue(String)->void::: control set value
jdk.jfr.internal.Control#getValue()->String::: control get value
jdk.jfr.internal.Control#apply(Set)->void::: control apply
jdk.jfr.internal.Control#setDefault()->void::: control set default
jdk.jfr.internal.Control#getValueSafe()->String::: control get value safe
jdk.jfr.internal.Control#setValueSafe(String)->void::: control set value safe
jdk.jfr.internal.Control#getDefaultValue()->String::: control get default value
jdk.jfr.internal.Control#getLastValue()->String::: control get last value
jdk.jfr.internal.Control#clone()->Object::: control clone
jdk.jfr.internal.EventClassBuilder#build()->Class::: event class builder build
jdk.jfr.internal.EventControl#remove(PlatformEventType, List, Class)->void::: event control remove
jdk.jfr.internal.EventControl#disable()->void::: event control disable
jdk.jfr.internal.EventControl#writeActiveSettingEvent()->void::: event control write active setting event
jdk.jfr.internal.EventControl#getEntries()->Set>::: event control get entries
jdk.jfr.internal.EventControl#getEventType()->PlatformEventType::: event control get event type
jdk.jfr.internal.EventControl#getSettingsId()->String::: event control get settings id
jdk.jfr.internal.EventControl#getSettingInfos()->List::: event control get setting infos
jdk.jfr.internal.EventHandlerCreator#makeEventHandlerName(long)->String::: event handler creator make event handler name
jdk.jfr.internal.EventHandlerCreator#makeEventHandlerClass()->Class::: event handler creator make event handler class
jdk.jfr.internal.EventHandlerCreator#instantiateEventHandler(Class, boolean, EventType, EventControl)->EventHandler::: event handler creator instantiate event handler
jdk.jfr.internal.EventInstrumentation.FieldInfo#isString()->boolean::: field info is string
jdk.jfr.internal.EventInstrumentation#getClassName()->String::: event instrumentation get class name
jdk.jfr.internal.EventInstrumentation#isRegistered()->boolean::: event instrumentation is registered
jdk.jfr.internal.EventInstrumentation#isEnabled()->boolean::: event instrumentation is enabled
jdk.jfr.internal.EventInstrumentation#isValidField(int, String)->boolean::: event instrumentation is valid field
jdk.jfr.internal.EventInstrumentation#buildInstrumented()->byte[]::: event instrumentation build instrumented
jdk.jfr.internal.EventInstrumentation#builUninstrumented()->byte[]::: event instrumentation buil uninstrumented
jdk.jfr.internal.EventInstrumentation#makeWriteMethod(List)->Method::: event instrumentation make write method
jdk.jfr.internal.EventInstrumentation#getSettingInfos()->List::: event instrumentation get setting infos
jdk.jfr.internal.EventInstrumentation#getFieldInfos()->List::: event instrumentation get field infos
jdk.jfr.internal.EventInstrumentation#getEventName()->String::: event instrumentation get event name
jdk.jfr.internal.EventInstrumentation#setGuardHandler(boolean)->void::: event instrumentation set guard handler
jdk.jfr.internal.EventWriter#getEventWriter()->EventWriter::: event writer get event writer
jdk.jfr.internal.EventWriter#putBoolean(boolean)->void::: event writer put boolean
jdk.jfr.internal.EventWriter#putByte(byte)->void::: event writer put byte
jdk.jfr.internal.EventWriter#putChar(char)->void::: event writer put char
jdk.jfr.internal.EventWriter#putShort(short)->void::: event writer put short
jdk.jfr.internal.EventWriter#putInt(int)->void::: event writer put int
jdk.jfr.internal.EventWriter#putFloat(float)->void::: event writer put float
jdk.jfr.internal.EventWriter#putLong(long)->void::: event writer put long
jdk.jfr.internal.EventWriter#putDouble(double)->void::: event writer put double
jdk.jfr.internal.EventWriter#putString(String, StringPool)->void::: event writer put string
jdk.jfr.internal.EventWriter#putEventThread()->void::: event writer put event thread
jdk.jfr.internal.EventWriter#putThread(Thread)->void::: event writer put thread
jdk.jfr.internal.EventWriter#putClass(Class)->void::: event writer put class
jdk.jfr.internal.EventWriter#putStackTrace()->void::: event writer put stack trace
jdk.jfr.internal.EventWriter#beginEvent(PlatformEventType)->boolean::: event writer begin event
jdk.jfr.internal.EventWriter#endEvent()->boolean::: event writer end event
jdk.jfr.internal.JVM#getJVM()->JVM:::Get the one and only JVM.
jdk.jfr.internal.JVM#beginRecording()->void:::Begin recording events  Requires that JFR has been started with #createNativeJFR()
jdk.jfr.internal.JVM#counterTime()->long:::Return ticks
jdk.jfr.internal.JVM#emitEvent(long, long, long)->boolean:::Emits native periodic event.
jdk.jfr.internal.JVM#endRecording()->void:::End recording events, which includes flushing data in thread buffers  Requires that JFR has been started with #createNativeJFR()
jdk.jfr.internal.JVM#getAllEventClasses()->List>:::Return a list of all classes deriving from jdk.internal.event.Event
jdk.jfr.internal.JVM#getUnloadedEventClassCount()->long:::Return a count of the number of unloaded classes deriving from Event
jdk.jfr.internal.JVM#getClassId(Class)->long:::Return a unique identifier for a class
jdk.jfr.internal.JVM#getClassIdNonIntrinsic(Class)->long::: m get class id non intrinsic
jdk.jfr.internal.JVM#getPid()->String:::Return process identifier.
jdk.jfr.internal.JVM#getStackTraceId(int)->long:::Return unique identifier for stack trace
jdk.jfr.internal.JVM#getThreadId(Thread)->long:::Return identifier for thread
jdk.jfr.internal.JVM#getTicksFrequency()->long:::Frequency, ticks per second
jdk.jfr.internal.JVM#log(int, int, String)->void:::Write message to log
jdk.jfr.internal.JVM#subscribeLogLevel(LogTag, int)->void:::Subscribe to LogLevel updates for LogTag
jdk.jfr.internal.JVM#retransformClasses(Class[])->void:::Call to invoke event tagging and retransformation of the passed classes
jdk.jfr.internal.JVM#setEnabled(long, boolean)->void:::Enable event
jdk.jfr.internal.JVM#setFileNotification(long)->void:::Interval at which the JVM should notify on #FILE_DELTA_CHANGE
jdk.jfr.internal.JVM#setGlobalBufferCount(long)->void:::Set the number of global buffers to use
jdk.jfr.internal.JVM#setGlobalBufferSize(long)->void:::Set size of a global buffer
jdk.jfr.internal.JVM#setMemorySize(long)->void:::Set overall memory size
jdk.jfr.internal.JVM#setMethodSamplingInterval(long, long)->void:::    /** Set interval for method samples, in milliseconds
jdk.jfr.internal.JVM#setOutput(String)->void:::Sets the file where data should be written
jdk.jfr.internal.JVM#setForceInstrumentation(boolean)->void:::Controls if a class deriving from jdk.jfr.Event should always be instrumented on class load.
jdk.jfr.internal.JVM#setSampleThreads(boolean)->void:::Turn on/off thread sampling.
jdk.jfr.internal.JVM#setCompressedIntegers(boolean)->void:::Turn on/off compressed integers.
jdk.jfr.internal.JVM#setStackDepth(int)->void:::Set stack depth.
jdk.jfr.internal.JVM#setStackTraceEnabled(long, boolean)->void:::Turn on stack trace for an event
jdk.jfr.internal.JVM#setThreadBufferSize(long)->void:::Set thread buffer size.
jdk.jfr.internal.JVM#setThreshold(long, long)->boolean:::Set threshold for event,  Long.MAXIMUM_VALUE = no limit
jdk.jfr.internal.JVM#storeMetadataDescriptor(byte[])->void:::Store the metadata descriptor that is to be written at the end of a chunk, data should be written after GMT offset and size of metadata event should be adjusted  Requires that JFR has been started with #createNativeJFR()
jdk.jfr.internal.JVM#endRecording_()->void::: m end recording_
jdk.jfr.internal.JVM#beginRecording_()->void::: m begin recording_
jdk.jfr.internal.JVM#isRecording()->boolean::: m is recording
jdk.jfr.internal.JVM#getAllowedToDoEventRetransforms()->boolean:::If the JVM supports JVM TI and retransformation has not been disabled this method will return true
jdk.jfr.internal.JVM#createFailedNativeJFR()->boolean::: m create failed native r
jdk.jfr.internal.JVM#createNativeJFR()->void::: m create native r
jdk.jfr.internal.JVM#destroyNativeJFR()->boolean::: m destroy native r
jdk.jfr.internal.JVM#hasNativeJFR()->boolean::: m has native r
jdk.jfr.internal.JVM#isAvailable()->boolean:::Cheap test to check if JFR functionality is available.
jdk.jfr.internal.JVM#getTimeConversionFactor()->double:::To convert ticks to wall clock time.
jdk.jfr.internal.JVM#getTypeId(Class)->long:::Return a unique identifier for a class
jdk.jfr.internal.JVM#getEventWriter()->Object:::Fast path fetching the EventWriter using VM intrinsics
jdk.jfr.internal.JVM#newEventWriter()->EventWriter:::Create a new EventWriter
jdk.jfr.internal.JVM#flush(EventWriter, int, int)->boolean:::Flushes the EventWriter for this thread.
jdk.jfr.internal.JVM#setRepositoryLocation(String)->void:::Sets the location of the disk repository, to be used at an emergency dump.
jdk.jfr.internal.JVM#abort(String)->void:::Access to VM termination support.
jdk.jfr.internal.JVM#addStringConstant(boolean, long, String)->boolean:::Adds a string to the string constant pool
jdk.jfr.internal.JVM#getEpochAddress()->long:::Gets the address of the jboolean epoch
jdk.jfr.internal.JVM#uncaughtException(Thread, Throwable)->void::: m uncaught exception
jdk.jfr.internal.JVM#setCutoff(long, long)->boolean:::Sets cutoff for event
jdk.jfr.internal.JVM#emitOldObjectSamples(long, boolean)->void:::Emit old object sample events.
jdk.jfr.internal.JVM#shouldRotateDisk()->boolean:::Test if a chunk rotation is warranted.
jdk.jfr.internal.JVMSupport#ensureWithInternalError()->void::: support ensure with internal error
jdk.jfr.internal.JVMSupport#ensureWithIOException()->void::: support ensure with exception
jdk.jfr.internal.JVMSupport#ensureWithIllegalStateException()->void::: support ensure with illegal state exception
jdk.jfr.internal.JVMSupport#isNotAvailable()->boolean::: support is not available
jdk.jfr.internal.JVMSupport#tryToInitializeJVM()->void::: support try to initialize m
jdk.jfr.internal.JVMUpcalls#onRetransform(long, boolean, Class, byte[])->byte[]:::Called by the JVM when a retransform happens on a tagged class
jdk.jfr.internal.JVMUpcalls#bytesForEagerInstrumentation(long, boolean, Class, byte[])->byte[]:::Called by the JVM when requested to do an "eager" instrumentation
jdk.jfr.internal.JVMUpcalls#createRecorderThread(ThreadGroup, ClassLoader)->Thread:::Called by the JVM to create the recorder thread.
jdk.jfr.internal.Logger#log(LogTag, LogLevel, String)->void::: logger log
jdk.jfr.internal.Logger#log(LogTag, LogLevel, Supplier)->void::: logger log
jdk.jfr.internal.Logger#shouldLog(LogTag, LogLevel)->boolean::: logger should log
jdk.jfr.internal.MetadataDescriptor.Element#longValue(String)->long::: element long value
jdk.jfr.internal.MetadataDescriptor.Element#attribute(String)->String::: element attribute
jdk.jfr.internal.MetadataDescriptor.Element#toString()->String::: element to string
jdk.jfr.internal.MetadataDescriptor.Element#attribute(String, long)->long::: element attribute
jdk.jfr.internal.MetadataDescriptor.Element#attribute(String, String)->String::: element attribute
jdk.jfr.internal.MetadataDescriptor.Element#elements(String...)->List::: element elements
jdk.jfr.internal.MetadataDescriptor.Element#add(Element)->void::: element add
jdk.jfr.internal.MetadataDescriptor.Element#addAttribute(String, Object)->void::: element add attribute
jdk.jfr.internal.MetadataDescriptor.Element#newChild(String)->Element::: element new child
jdk.jfr.internal.MetadataDescriptor.Element#addArrayAttribute(Element, String, Object)->void::: element add array attribute
jdk.jfr.internal.MetadataDescriptor#getTypes()->Collection::: metadata descriptor get types
jdk.jfr.internal.MetadataDescriptor#getEventTypes()->List::: metadata descriptor get event types
jdk.jfr.internal.MetadataDescriptor#getGMTOffset()->int::: metadata descriptor get offset
jdk.jfr.internal.MetadataDescriptor#getLocale()->String::: metadata descriptor get locale
jdk.jfr.internal.MetadataDescriptor#read(DataInput)->MetadataDescriptor::: metadata descriptor read
jdk.jfr.internal.MetadataDescriptor#write(List, DataOutput)->void::: metadata descriptor write
jdk.jfr.internal.MetadataDescriptor#toString()->String::: metadata descriptor to string
jdk.jfr.internal.MetadataHandler#startElement(String, String, String, Attributes)->void::: metadata handler start element
jdk.jfr.internal.MetadataHandler#endElement(String, String, String)->void::: metadata handler end element
jdk.jfr.internal.MetadataHandler#createTypes()->List::: metadata handler create types
jdk.jfr.internal.MetadataReader#getDescriptor()->MetadataDescriptor::: metadata reader get descriptor
jdk.jfr.internal.MetadataRepository#getInstance()->MetadataRepository::: metadata repository get instance
jdk.jfr.internal.MetadataRepository#getRegisteredEventTypes()->List::: metadata repository get registered event types
jdk.jfr.internal.MetadataRepository#getEventType(Class)->EventType::: metadata repository get event type
jdk.jfr.internal.MetadataRepository#unregister(Class)->void::: metadata repository unregister
jdk.jfr.internal.MetadataRepository#register(Class)->EventType::: metadata repository register
jdk.jfr.internal.MetadataRepository#register(Class, List, List)->EventType::: metadata repository register
jdk.jfr.internal.MetadataRepository#setSettings(List>)->void::: metadata repository set settings
jdk.jfr.internal.MetadataRepository#disableEvents()->void::: metadata repository disable events
jdk.jfr.internal.MetadataRepository#getEventControls()->List::: metadata repository get event controls
jdk.jfr.internal.MetadataRepository#isEnabled(String)->boolean::: metadata repository is enabled
jdk.jfr.internal.MetadataRepository#setStaleMetadata()->void::: metadata repository set stale metadata
jdk.jfr.internal.MetadataRepository#setOutput(String)->void::: metadata repository set output
jdk.jfr.internal.MetadataRepository#setUnregistered()->void::: metadata repository set unregistered
jdk.jfr.internal.MetadataRepository#registerMirror(Class)->void::: metadata repository register mirror
jdk.jfr.internal.MetadataWriter#writeBinary(DataOutput)->void::: metadata writer write binary
jdk.jfr.internal.OldObjectSample#emit(PlatformRecording)->void::: old object sample emit
jdk.jfr.internal.OldObjectSample#emit(List, Boolean)->void::: old object sample emit
jdk.jfr.internal.OldObjectSample#updateSettingPathToGcRoots(Map, Boolean)->void::: old object sample update setting path to gc roots
jdk.jfr.internal.OldObjectSample#createSettingsForSnapshot(PlatformRecording, Boolean)->Map::: old object sample create settings for snapshot
jdk.jfr.internal.Options#setMaxChunkSize(long)->void::: options set max chunk size
jdk.jfr.internal.Options#getMaxChunkSize()->long::: options get max chunk size
jdk.jfr.internal.Options#setMemorySize(long)->void::: options set memory size
jdk.jfr.internal.Options#getMemorySize()->long::: options get memory size
jdk.jfr.internal.Options#setThreadBufferSize(long)->void::: options set thread buffer size
jdk.jfr.internal.Options#getThreadBufferSize()->long::: options get thread buffer size
jdk.jfr.internal.Options#getGlobalBufferSize()->long::: options get global buffer size
jdk.jfr.internal.Options#setGlobalBufferCount(long)->void::: options set global buffer count
jdk.jfr.internal.Options#getGlobalBufferCount()->long::: options get global buffer count
jdk.jfr.internal.Options#setGlobalBufferSize(long)->void::: options set global buffer size
jdk.jfr.internal.Options#setDumpPath(SafePath)->void::: options set dump path
jdk.jfr.internal.Options#getDumpPath()->SafePath::: options get dump path
jdk.jfr.internal.Options#setStackDepth(Integer)->void::: options set stack depth
jdk.jfr.internal.Options#getStackDepth()->int::: options get stack depth
jdk.jfr.internal.Options#setSampleThreads(Boolean)->void::: options set sample threads
jdk.jfr.internal.Options#getSampleThreads()->boolean::: options get sample threads
jdk.jfr.internal.Options#getWaitInterval()->long::: options get wait interval
jdk.jfr.internal.Options#ensureInitialized()->void::: options ensure initialized
jdk.jfr.internal.PlatformEventType#add(SettingDescriptor)->void::: platform event type add
jdk.jfr.internal.PlatformEventType#getSettings()->List::: platform event type get settings
jdk.jfr.internal.PlatformEventType#getAllSettings()->List::: platform event type get all settings
jdk.jfr.internal.PlatformEventType#setHasStackTrace(boolean)->void::: platform event type set has stack trace
jdk.jfr.internal.PlatformEventType#setHasDuration(boolean)->void::: platform event type set has duration
jdk.jfr.internal.PlatformEventType#setHasCutoff(boolean)->void::: platform event type set has cutoff
jdk.jfr.internal.PlatformEventType#setCutoff(long)->void::: platform event type set cutoff
jdk.jfr.internal.PlatformEventType#setHasPeriod(boolean)->void::: platform event type set has period
jdk.jfr.internal.PlatformEventType#hasStackTrace()->boolean::: platform event type has stack trace
jdk.jfr.internal.PlatformEventType#hasDuration()->boolean::: platform event type has duration
jdk.jfr.internal.PlatformEventType#hasPeriod()->boolean::: platform event type has period
jdk.jfr.internal.PlatformEventType#hasCutoff()->boolean::: platform event type has cutoff
jdk.jfr.internal.PlatformEventType#isEnabled()->boolean::: platform event type is enabled
jdk.jfr.internal.PlatformEventType#isJVM()->boolean::: platform event type is m
jdk.jfr.internal.PlatformEventType#isJDK()->boolean::: platform event type is k
jdk.jfr.internal.PlatformEventType#setEnabled(boolean)->void::: platform event type set enabled
jdk.jfr.internal.PlatformEventType#setPeriod(long, boolean, boolean)->void::: platform event type set period
jdk.jfr.internal.PlatformEventType#setStackTraceEnabled(boolean)->void::: platform event type set stack trace enabled
jdk.jfr.internal.PlatformEventType#setThreshold(long)->void::: platform event type set threshold
jdk.jfr.internal.PlatformEventType#isEveryChunk()->boolean::: platform event type is every chunk
jdk.jfr.internal.PlatformEventType#getStackTraceEnabled()->boolean::: platform event type get stack trace enabled
jdk.jfr.internal.PlatformEventType#getThresholdTicks()->long::: platform event type get threshold ticks
jdk.jfr.internal.PlatformEventType#getPeriod()->long::: platform event type get period
jdk.jfr.internal.PlatformEventType#hasEventHook()->boolean::: platform event type has event hook
jdk.jfr.internal.PlatformEventType#setEventHook(boolean)->void::: platform event type set event hook
jdk.jfr.internal.PlatformEventType#isBeginChunk()->boolean::: platform event type is begin chunk
jdk.jfr.internal.PlatformEventType#isEndChunk()->boolean::: platform event type is end chunk
jdk.jfr.internal.PlatformEventType#isInstrumented()->boolean::: platform event type is instrumented
jdk.jfr.internal.PlatformEventType#setInstrumented()->void::: platform event type set instrumented
jdk.jfr.internal.PlatformEventType#markForInstrumentation(boolean)->void::: platform event type mark for instrumentation
jdk.jfr.internal.PlatformEventType#isMarkedForInstrumentation()->boolean::: platform event type is marked for instrumentation
jdk.jfr.internal.PlatformEventType#setRegistered(boolean)->boolean::: platform event type set registered
jdk.jfr.internal.PlatformEventType#isRegistered()->boolean::: platform event type is registered
jdk.jfr.internal.PlatformEventType#isCommitable()->boolean::: platform event type is commitable
jdk.jfr.internal.PlatformEventType#getStackTraceOffset()->int::: platform event type get stack trace offset
jdk.jfr.internal.PlatformRecorder#newRecording(Map)->PlatformRecording::: platform recorder new recording
jdk.jfr.internal.PlatformRecorder#newTemporaryRecording()->PlatformRecording::: platform recorder new temporary recording
jdk.jfr.internal.PlatformRecorder#finish(PlatformRecording)->void::: platform recorder finish
jdk.jfr.internal.PlatformRecorder#getRecordings()->List::: platform recorder get recordings
jdk.jfr.internal.PlatformRecorder#addListener(FlightRecorderListener)->void::: platform recorder add listener
jdk.jfr.internal.PlatformRecorder#removeListener(FlightRecorderListener)->boolean::: platform recorder remove listener
jdk.jfr.internal.PlatformRecorder#getListeners()->List::: platform recorder get listeners
jdk.jfr.internal.PlatformRecorder#getTimer()->Timer::: platform recorder get timer
jdk.jfr.internal.PlatformRecorder#notifyRecorderInitialized(FlightRecorder)->void::: platform recorder notify recorder initialized
jdk.jfr.internal.PlatformRecorder#destroy()->void::: platform recorder destroy
jdk.jfr.internal.PlatformRecorder#start(PlatformRecording)->void::: platform recorder start
jdk.jfr.internal.PlatformRecorder#stop(PlatformRecording)->void::: platform recorder stop
jdk.jfr.internal.PlatformRecorder#updateSettings()->void::: platform recorder update settings
jdk.jfr.internal.PlatformRecorder#updateSettingsButIgnoreRecording(PlatformRecording)->void::: platform recorder update settings but ignore recording
jdk.jfr.internal.PlatformRecorder#rotateDisk()->void::: platform recorder rotate disk
jdk.jfr.internal.PlatformRecorder#newCopy(PlatformRecording, boolean)->Recording::: platform recorder new copy
jdk.jfr.internal.PlatformRecorder#fillWithRecordedData(PlatformRecording, Boolean)->void::: platform recorder fill with recorded data
jdk.jfr.internal.PlatformRecording#start()->void::: platform recording start
jdk.jfr.internal.PlatformRecording#stop(String)->boolean::: platform recording stop
jdk.jfr.internal.PlatformRecording#scheduleStart(Duration)->void::: platform recording schedule start
jdk.jfr.internal.PlatformRecording#scheduleStart(Instant)->void::: platform recording schedule start
jdk.jfr.internal.PlatformRecording#getSettings()->Map::: platform recording get settings
jdk.jfr.internal.PlatformRecording#getSize()->long::: platform recording get size
jdk.jfr.internal.PlatformRecording#getStopTime()->Instant::: platform recording get stop time
jdk.jfr.internal.PlatformRecording#getStartTime()->Instant::: platform recording get start time
jdk.jfr.internal.PlatformRecording#getMaxSize()->Long::: platform recording get max size
jdk.jfr.internal.PlatformRecording#getMaxAge()->Duration::: platform recording get max age
jdk.jfr.internal.PlatformRecording#getName()->String::: platform recording get name
jdk.jfr.internal.PlatformRecording#getState()->RecordingState::: platform recording get state
jdk.jfr.internal.PlatformRecording#close()->void::: platform recording close
jdk.jfr.internal.PlatformRecording#newSnapshotClone(String, Boolean)->PlatformRecording::: platform recording new snapshot clone
jdk.jfr.internal.PlatformRecording#isToDisk()->boolean::: platform recording is to disk
jdk.jfr.internal.PlatformRecording#setMaxSize(long)->void::: platform recording set max size
jdk.jfr.internal.PlatformRecording#setDestination(WriteableUserPath)->void::: platform recording set destination
jdk.jfr.internal.PlatformRecording#checkSetDestination(WriteableUserPath)->void::: platform recording check set destination
jdk.jfr.internal.PlatformRecording#getDestination()->WriteableUserPath::: platform recording get destination
jdk.jfr.internal.PlatformRecording#setState(RecordingState)->void::: platform recording set state
jdk.jfr.internal.PlatformRecording#setStartTime(Instant)->void::: platform recording set start time
jdk.jfr.internal.PlatformRecording#setStopTime(Instant)->void::: platform recording set stop time
jdk.jfr.internal.PlatformRecording#getId()->long::: platform recording get id
jdk.jfr.internal.PlatformRecording#setName(String)->void::: platform recording set name
jdk.jfr.internal.PlatformRecording#setDumpOnExit(boolean)->void::: platform recording set dump on exit
jdk.jfr.internal.PlatformRecording#getDumpOnExit()->boolean::: platform recording get dump on exit
jdk.jfr.internal.PlatformRecording#setToDisk(boolean)->void::: platform recording set to disk
jdk.jfr.internal.PlatformRecording#setSetting(String, String)->void::: platform recording set setting
jdk.jfr.internal.PlatformRecording#setSettings(Map)->void::: platform recording set settings
jdk.jfr.internal.PlatformRecording#setRecording(Recording)->void::: platform recording set recording
jdk.jfr.internal.PlatformRecording#getRecording()->Recording::: platform recording get recording
jdk.jfr.internal.PlatformRecording#toString()->String::: platform recording to string
jdk.jfr.internal.PlatformRecording#setConfiguration(Configuration)->void::: platform recording set configuration
jdk.jfr.internal.PlatformRecording#setMaxAge(Duration)->void::: platform recording set max age
jdk.jfr.internal.PlatformRecording#appendChunk(RepositoryChunk)->void::: platform recording append chunk
jdk.jfr.internal.PlatformRecording#add(RepositoryChunk)->void::: platform recording add
jdk.jfr.internal.PlatformRecording#getChunks()->List::: platform recording get chunks
jdk.jfr.internal.PlatformRecording#open(Instant, Instant)->InputStream::: platform recording open
jdk.jfr.internal.PlatformRecording#getDuration()->Duration::: platform recording get duration
jdk.jfr.internal.PlatformRecording#setInternalDuration(Duration)->void::: platform recording set internal duration
jdk.jfr.internal.PlatformRecording#setDuration(Duration)->void::: platform recording set duration
jdk.jfr.internal.PlatformRecording#updateTimer()->void::: platform recording update timer
jdk.jfr.internal.PlatformRecording#createStopTask()->TimerTask::: platform recording create stop task
jdk.jfr.internal.PlatformRecording#newCopy(boolean)->Recording::: platform recording new copy
jdk.jfr.internal.PlatformRecording#setStopTask(TimerTask)->void::: platform recording set stop task
jdk.jfr.internal.PlatformRecording#clearDestination()->void::: platform recording clear destination
jdk.jfr.internal.PlatformRecording#getNoDestinationDumpOnExitAccessControlContext()->AccessControlContext::: platform recording get no destination dump on exit access control context
jdk.jfr.internal.PlatformRecording#setShouldWriteActiveRecordingEvent(boolean)->void::: platform recording set should write active recording event
jdk.jfr.internal.PlatformRecording#shouldWriteMetadataEvent()->boolean::: platform recording should write metadata event
jdk.jfr.internal.PlatformRecording#dump(WriteableUserPath)->void::: platform recording dump
jdk.jfr.internal.PlatformRecording#dumpStopped(WriteableUserPath)->void::: platform recording dump stopped
jdk.jfr.internal.PlatformRecording#filter(Instant, Instant, Long)->void::: platform recording filter
jdk.jfr.internal.PlatformRecording#setDumpOnExitDirectory(SafePath)->void::: platform recording set dump on exit directory
jdk.jfr.internal.PlatformRecording#getDumpOnExitDirectory()->SafePath::: platform recording get dump on exit directory
jdk.jfr.internal.PrivateAccess#getInstance()->PrivateAccess::: private access get instance
jdk.jfr.internal.PrivateAccess#setPrivateAccess(PrivateAccess)->void::: private access set private access
jdk.jfr.internal.PrivateAccess#getType(Object)->Type::: private access get type
jdk.jfr.internal.PrivateAccess#newConfiguration(String, String, String, String, Map, String)->Configuration::: private access new configuration
jdk.jfr.internal.PrivateAccess#newEventType(PlatformEventType)->EventType::: private access new event type
jdk.jfr.internal.PrivateAccess#newAnnotation(Type, List, boolean)->AnnotationElement::: private access new annotation
jdk.jfr.internal.PrivateAccess#newValueDescriptor(String, Type, List, int, boolean, String)->ValueDescriptor::: private access new value descriptor
jdk.jfr.internal.PrivateAccess#getPlatformRecording(Recording)->PlatformRecording::: private access get platform recording
jdk.jfr.internal.PrivateAccess#getPlatformEventType(EventType)->PlatformEventType::: private access get platform event type
jdk.jfr.internal.PrivateAccess#isConstantPool(ValueDescriptor)->boolean::: private access is constant pool
jdk.jfr.internal.PrivateAccess#getFieldName(ValueDescriptor)->String::: private access get field name
jdk.jfr.internal.PrivateAccess#newValueDescriptor(Class, String)->ValueDescriptor::: private access new value descriptor
jdk.jfr.internal.PrivateAccess#newSettingDescriptor(Type, String, String, List)->SettingDescriptor::: private access new setting descriptor
jdk.jfr.internal.PrivateAccess#setAnnotations(ValueDescriptor, List)->void::: private access set annotations
jdk.jfr.internal.PrivateAccess#setAnnotations(SettingDescriptor, List)->void::: private access set annotations
jdk.jfr.internal.PrivateAccess#isUnsigned(ValueDescriptor)->boolean::: private access is unsigned
jdk.jfr.internal.PrivateAccess#getPlatformRecorder()->PlatformRecorder::: private access get platform recorder
jdk.jfr.internal.Repository#getRepository()->Repository::: repository get repository
jdk.jfr.internal.Repository#setBasePath(SafePath)->void::: repository set base path
jdk.jfr.internal.Repository#ensureRepository()->void::: repository ensure repository
jdk.jfr.internal.Repository#newChunk(Instant)->RepositoryChunk::: repository new chunk
jdk.jfr.internal.Repository#clear()->void::: repository clear
jdk.jfr.internal.Repository#getRepositoryPath()->SafePath::: repository get repository path
jdk.jfr.internal.RepositoryChunk#getUnfishedFile()->SafePath::: repository chunk get unfished file
jdk.jfr.internal.RepositoryChunk#finish(Instant)->void::: repository chunk finish
jdk.jfr.internal.RepositoryChunk#getStartTime()->Instant::: repository chunk get start time
jdk.jfr.internal.RepositoryChunk#getEndTime()->Instant::: repository chunk get end time
jdk.jfr.internal.RepositoryChunk#use()->void::: repository chunk use
jdk.jfr.internal.RepositoryChunk#release()->void::: repository chunk release
jdk.jfr.internal.RepositoryChunk#finalize()->void::: repository chunk finalize
jdk.jfr.internal.RepositoryChunk#getSize()->long::: repository chunk get size
jdk.jfr.internal.RepositoryChunk#isFinished()->boolean::: repository chunk is finished
jdk.jfr.internal.RepositoryChunk#toString()->String::: repository chunk to string
jdk.jfr.internal.RepositoryChunk#newChannel()->ReadableByteChannel::: repository chunk new channel
jdk.jfr.internal.RepositoryChunk#inInterval(Instant, Instant)->boolean::: repository chunk in interval
jdk.jfr.internal.RepositoryChunk#getFile()->SafePath::: repository chunk get file
jdk.jfr.internal.RequestEngine#addHook(AccessControlContext, PlatformEventType, Runnable)->void::: request engine add hook
jdk.jfr.internal.RequestEngine#addTrustedJDKHook(Class, Runnable)->void::: request engine add trusted hook
jdk.jfr.internal.RequestEngine#removeHook(Runnable)->boolean::: request engine remove hook
jdk.jfr.internal.RequestEngine#addHooks(List)->void::: request engine add hooks
jdk.jfr.internal.RequestEngine#doChunkEnd()->void::: request engine do chunk end
jdk.jfr.internal.RequestEngine#doChunkBegin()->void::: request engine do chunk begin
jdk.jfr.internal.RequestEngine#doPeriodic()->long::: request engine do periodic
jdk.jfr.internal.SecuritySupport.SecureRecorderListener#recordingStateChanged(Recording)->void::: secure recorder listener recording state changed
jdk.jfr.internal.SecuritySupport.SecureRecorderListener#recorderInitialized(FlightRecorder)->void::: secure recorder listener recorder initialized
jdk.jfr.internal.SecuritySupport.SecureRecorderListener#getChangeListener()->FlightRecorderListener::: secure recorder listener get change listener
jdk.jfr.internal.SecuritySupport.SafePath#toPath()->Path::: safe path to path
jdk.jfr.internal.SecuritySupport.SafePath#toString()->String::: safe path to string
jdk.jfr.internal.SecuritySupport#getPredefinedJFCFiles()->List::: security support get predefined files
jdk.jfr.internal.SecuritySupport#makeVisibleToJFR(Class)->void::: security support make visible to r
jdk.jfr.internal.SecuritySupport#addHandlerExport(Class)->void:::Adds a qualified export of the internal.jdk.jfr.internal.handlers package (for EventHandler)
jdk.jfr.internal.SecuritySupport#addEventsExport(Class)->void::: security support add events export
jdk.jfr.internal.SecuritySupport#addInstrumentExport(Class)->void::: security support add instrument export
jdk.jfr.internal.SecuritySupport#addReadEdge(Class)->void::: security support add read edge
jdk.jfr.internal.SecuritySupport#registerEvent(Class)->void::: security support register event
jdk.jfr.internal.SecuritySupport#registerMirror(Class)->void::: security support register mirror
jdk.jfr.internal.SecuritySupport#getBooleanProperty(String)->boolean::: security support get boolean property
jdk.jfr.internal.SecuritySupport#createRecorderThread(ThreadGroup, ClassLoader)->Thread::: security support create recorder thread
jdk.jfr.internal.SecuritySupport#registerShutdownHook(Thread)->void::: security support register shutdown hook
jdk.jfr.internal.SecuritySupport#setUncaughtExceptionHandler(Thread, Thread.UncaughtExceptionHandler)->void::: security support set uncaught exception handler
jdk.jfr.internal.SecuritySupport#moveReplace(SafePath, SafePath)->void::: security support move replace
jdk.jfr.internal.SecuritySupport#clearDirectory(SafePath)->void::: security support clear directory
jdk.jfr.internal.SecuritySupport#toRealPath(SafePath)->SafePath::: security support to real path
jdk.jfr.internal.SecuritySupport#existDirectory(SafePath)->boolean::: security support exist directory
jdk.jfr.internal.SecuritySupport#createRandomAccessFile(SafePath)->RandomAccessFile::: security support create random access file
jdk.jfr.internal.SecuritySupport#newFileInputStream(SafePath)->InputStream::: security support new file input stream
jdk.jfr.internal.SecuritySupport#getFileSize(SafePath)->long::: security support get file size
jdk.jfr.internal.SecuritySupport#createDirectories(SafePath)->SafePath::: security support create directories
jdk.jfr.internal.SecuritySupport#exists(SafePath)->boolean::: security support exists
jdk.jfr.internal.SecuritySupport#isDirectory(SafePath)->boolean::: security support is directory
jdk.jfr.internal.SecuritySupport#delete(SafePath)->void::: security support delete
jdk.jfr.internal.SecuritySupport#isWritable(SafePath)->boolean::: security support is writable
jdk.jfr.internal.SecuritySupport#deleteOnExit(SafePath)->void::: security support delete on exit
jdk.jfr.internal.SecuritySupport#newFileChannelToRead(SafePath)->ReadableByteChannel::: security support new file channel to read
jdk.jfr.internal.SecuritySupport#getResourceAsStream(String)->InputStream::: security support get resource as stream
jdk.jfr.internal.SecuritySupport#newFileReader(SafePath)->Reader::: security support new file reader
jdk.jfr.internal.SecuritySupport#touch(SafePath)->void::: security support touch
jdk.jfr.internal.SecuritySupport#setAccessible(Method)->void::: security support set accessible
jdk.jfr.internal.SecuritySupport#setAccessible(Field)->void::: security support set accessible
jdk.jfr.internal.SecuritySupport#setAccessible(Constructor)->void::: security support set accessible
jdk.jfr.internal.SecuritySupport#ensureClassIsInitialized(Class)->void::: security support ensure class is initialized
jdk.jfr.internal.SecuritySupport#defineClass(String, byte[], ClassLoader)->Class::: security support define class
jdk.jfr.internal.SecuritySupport#createThreadWitNoPermissions(String, Runnable)->Thread::: security support create thread wit no permissions
jdk.jfr.internal.SecuritySupport#setDaemonThread(Thread, boolean)->void::: security support set daemon thread
jdk.jfr.internal.SecuritySupport#getAbsolutePath(SafePath)->SafePath::: security support get absolute path
jdk.jfr.internal.SettingsManager#setSettings(List>)->void::: settings manager set settings
jdk.jfr.internal.SettingsManager#updateRetransform(List>)->void::: settings manager update retransform
jdk.jfr.internal.SettingsManager#setEventControl(EventControl)->void::: settings manager set event control
jdk.jfr.internal.SettingsManager#toString()->String::: settings manager to string
jdk.jfr.internal.SettingsManager#isEnabled(String)->boolean::: settings manager is enabled
jdk.jfr.internal.ShutdownHook#run()->void::: shutdown hook run
jdk.jfr.internal.ShutdownHook.ExceptionHandler#uncaughtException(Thread, Throwable)->void::: exception handler uncaught exception
jdk.jfr.internal.StringPool#addString(String)->long::: string pool add string
jdk.jfr.internal.Type#isDefinedByJVM(long)->boolean::: type is defined by m
jdk.jfr.internal.Type#getTypeId(Class)->long::: type get type id
jdk.jfr.internal.Type#getKnownTypes()->Collection::: type get known types
jdk.jfr.internal.Type#isValidJavaIdentifier(String)->boolean::: type is valid java identifier
jdk.jfr.internal.Type#isValidJavaFieldType(String)->boolean::: type is valid java field type
jdk.jfr.internal.Type#getKnownType(String)->Type::: type get known type
jdk.jfr.internal.Type#isKnownType(Class)->boolean::: type is known type
jdk.jfr.internal.Type#getKnownType(Class)->Type::: type get known type
jdk.jfr.internal.Type#getName()->String::: type get name
jdk.jfr.internal.Type#getLogName()->String::: type get log name
jdk.jfr.internal.Type#getFields()->List::: type get fields
jdk.jfr.internal.Type#isSimpleType()->boolean::: type is simple type
jdk.jfr.internal.Type#isDefinedByJVM()->boolean::: type is defined by m
jdk.jfr.internal.Type#add(ValueDescriptor)->void::: type add
jdk.jfr.internal.Type#trimFields()->void::: type trim fields
jdk.jfr.internal.Type#setAnnotations(List)->void::: type set annotations
jdk.jfr.internal.Type#getSuperType()->String::: type get super type
jdk.jfr.internal.Type#getId()->long::: type get id
jdk.jfr.internal.Type#isConstantPool()->boolean::: type is constant pool
jdk.jfr.internal.Type#getLabel()->String::: type get label
jdk.jfr.internal.Type#getAnnotationElements()->List::: type get annotation elements
jdk.jfr.internal.Type#getAnnotation(Class)->T::: type get annotation
jdk.jfr.internal.Type#getDescription()->String::: type get description
jdk.jfr.internal.Type#hashCode()->int::: type hash code
jdk.jfr.internal.Type#equals(Object)->boolean::: type equals
jdk.jfr.internal.Type#compareTo(Type)->int::: type compare to
jdk.jfr.internal.Type#log(String, LogTag, LogLevel)->void::: type log
jdk.jfr.internal.Type#toString()->String::: type to string
jdk.jfr.internal.Type#setRemove(boolean)->void::: type set remove
jdk.jfr.internal.Type#getRemove()->boolean::: type get remove
jdk.jfr.internal.Type#setId(long)->void::: type set id
jdk.jfr.internal.TypeLibrary#getInstance()->TypeLibrary::: type library get instance
jdk.jfr.internal.TypeLibrary#getTypes()->List::: type library get types
jdk.jfr.internal.TypeLibrary#createAnnotationType(Class)->Type::: type library create annotation type
jdk.jfr.internal.TypeLibrary#createAnnotation(Annotation)->AnnotationElement::: type library create annotation
jdk.jfr.internal.TypeLibrary#createType(Class)->Type::: type library create type
jdk.jfr.internal.TypeLibrary#createType(Class, List, List)->Type::: type library create type
jdk.jfr.internal.TypeLibrary#addImplicitFields(Type, boolean, boolean, boolean, boolean, boolean)->void::: type library add implicit fields
jdk.jfr.internal.TypeLibrary#clearUnregistered()->boolean::: type library clear unregistered
jdk.jfr.internal.TypeLibrary#addType(Type)->void::: type library add type
jdk.jfr.internal.TypeLibrary#addTypes(List)->void::: type library add types
jdk.jfr.internal.TypeLibrary#removeType(long)->void::: type library remove type
jdk.jfr.internal.Utils#checkAccessFlightRecorder()->void::: utils check access flight recorder
jdk.jfr.internal.Utils#checkRegisterPermission()->void::: utils check register permission
jdk.jfr.internal.Utils#formatBytesCompact(long)->String::: utils format bytes compact
jdk.jfr.internal.Utils#formatBits(long)->String::: utils format bits
jdk.jfr.internal.Utils#formatBytes(long)->String::: utils format bytes
jdk.jfr.internal.Utils#formatBytesPerSecond(long)->String::: utils format bytes per second
jdk.jfr.internal.Utils#formatBitsPerSecond(long)->String::: utils format bits per second
jdk.jfr.internal.Utils#formatTimespan(Duration, String)->String::: utils format timespan
jdk.jfr.internal.Utils#parseTimespanWithInfinity(String)->long::: utils parse timespan with infinity
jdk.jfr.internal.Utils#parseTimespan(String)->long::: utils parse timespan
jdk.jfr.internal.Utils#getAnnotations(Class)->List:::Return all annotations as they are visible in the source code
jdk.jfr.internal.Utils#isAfter(RecordingState, RecordingState)->boolean::: utils is after
jdk.jfr.internal.Utils#isBefore(RecordingState, RecordingState)->boolean::: utils is before
jdk.jfr.internal.Utils#isState(RecordingState, RecordingState...)->boolean::: utils is state
jdk.jfr.internal.Utils#touch(Path)->void::: utils touch
jdk.jfr.internal.Utils#unboxType(Class)->Class::: utils unbox type
jdk.jfr.internal.Utils#nanosToTicks(long)->long::: utils nanos to ticks
jdk.jfr.internal.Utils#getHandler(Class)->EventHandler::: utils get handler
jdk.jfr.internal.Utils#setHandler(Class, EventHandler)->void::: utils set handler
jdk.jfr.internal.Utils#sanitizeNullFreeStringMap(Map)->Map::: utils sanitize null free string map
jdk.jfr.internal.Utils#sanitizeNullFreeList(List, Class)->List::: utils sanitize null free list
jdk.jfr.internal.Utils#getVisibleEventFields(Class)->List::: utils get visible event fields
jdk.jfr.internal.Utils#ensureValidEventSubclass(Class)->void::: utils ensure valid event subclass
jdk.jfr.internal.Utils#writeGeneratedASM(String, byte[])->void::: utils write generated m
jdk.jfr.internal.Utils#ensureInitialized(Class)->void::: utils ensure initialized
jdk.jfr.internal.Utils#makePrimitiveArray(String, List)->Object::: utils make primitive array
jdk.jfr.internal.Utils#isSettingVisible(Control, boolean)->boolean::: utils is setting visible
jdk.jfr.internal.Utils#isSettingVisible(long, boolean)->boolean::: utils is setting visible
jdk.jfr.internal.Utils#getValidType(Class, String)->Type::: utils get valid type
jdk.jfr.internal.Utils#smallUnmodifiable(List)->List::: utils small unmodifiable
jdk.jfr.internal.Utils#upgradeLegacyJDKEvent(String)->String::: utils upgrade legacy event
jdk.jfr.internal.Utils#verifyMirror(Class, Class)->void::: utils verify mirror
jdk.jfr.internal.Utils#makeFilename(Recording)->String::: utils make filename
jdk.jfr.internal.WriteableUserPath#getPotentiallyMaliciousOriginal()->Path:::Returns a potentially malicious path where the user may have implemented their own version of Path
jdk.jfr.internal.WriteableUserPath#getRealPathText()->String:::Returns a string representation of the real path.
jdk.jfr.internal.WriteableUserPath#getOriginalText()->String:::Returns a string representation of the original path.
jdk.jfr.internal.WriteableUserPath#getReal()->Path:::Returns a potentially malicious path where the user may have implemented their own version of Path
jdk.jfr.internal.WriteableUserPath#doPriviligedIO(Callable)->void::: writeable user path do priviliged o

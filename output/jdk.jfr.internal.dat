AnnotationConstruct.AnnotationInvokationHandler#invoke(Object, Method, Object[])::: annotation invokation handler invoke:::methodName->method->getName->parameters->method->getTypeParameters->if->annotationElement->hasValue->return->annotationElement->getValue->throw->new->UnsupportedOperationException
AnnotationConstruct#setAnnotationElements(List)::: annotation construct set annotation elements:::Utils->smallUnmodifiable
AnnotationConstruct#getLabel()::: annotation construct get label:::label->getAnnotation->if->return->return->label->value
AnnotationConstruct#getDescription()::: annotation construct get description:::description->getAnnotation->if->return->return->description->value
AnnotationConstruct#getAnnotation(Class)::: annotation construct get annotation:::ae->getAnnotationElement->if->return->Proxy->clazz->getClassLoader->new->Class<?>Arr->new->AnnotationInvokationHandler->newProxyInstance->return
AnnotationConstruct#getUnmodifiableAnnotationElements()::: annotation construct get unmodifiable annotation elements:::return
AnnotationConstruct#remove(AnnotationElement)::: annotation construct remove:::return->annotationElements->remove
AnnotationConstruct#getAnnotationElement(Class)::: annotation construct get annotation element:::id->Type->getTypeId->className->clazz->getName->foreach->getUnmodifiableAnnotationElements->if->a->getTypeId->a->getTypeName->equals->return->foreach->getUnmodifiableAnnotationElements->if->a->getTypeName->equals->return->return
AnnotationConstruct#hasUnsigned()::: annotation construct has unsigned:::if->unsigned->getAnnotation->return
ASMToolkit#invokeSpecial(MethodVisitor, String, Method)::: toolkit invoke special:::methodVisitor->m->getName->m->getDescriptor->visitMethodInsn
ASMToolkit#invokeStatic(MethodVisitor, String, Method)::: toolkit invoke static:::methodVisitor->m->getName->m->getDescriptor->visitMethodInsn
ASMToolkit#invokeVirtual(MethodVisitor, String, Method)::: toolkit invoke virtual:::methodVisitor->m->getName->m->getDescriptor->visitMethodInsn
ASMToolkit#toType(ValueDescriptor)::: toolkit to type:::typeName->v->getTypeName->switch->return->return->return->return->return->return->return->return->return->return->return->throw->v->getTypeName->new->Error
ASMToolkit#getDescriptor(String):::Converts "int" into "I" and "java.lang.String" into "Ljava/lang/String;":::if->equals->return->if->equals->return->if->equals->return->if->equals->return->if->equals->return->if->equals->return->if->equals->return->if->equals->return->internal->getInternalName->return->Type->getObjectType->getDescriptor
ASMToolkit#getInternalName(String):::Converts java.lang.String into java/lang/String:::return->className->replace
ASMToolkit#makeWriteMethod(List)::: toolkit make write method:::sb->new->StringBuilder->sb->append->foreach->if->equals->equals->sb->append->sb->append->return->sb->toString->new->Method
ASMToolkit#logASM(String, byte[])::: toolkit log m:::Logger->log->Logger->cr->new->ClassReader->baos->new->ByteArrayOutputStream->w->new->PrintWriter->w->println->cr->new->TraceClassVisitor->accept->return->baos->toString->log
Bits#swap(short)::: bits swap:::return->Short->reverseBytes
Bits#swap(char)::: bits swap:::return->Character->reverseBytes
Bits#swap(int)::: bits swap:::return->Integer->reverseBytes
Bits#swap(long)::: bits swap:::return->Long->reverseBytes
Bits#swap(float)::: bits swap:::return->Float->Float->floatToIntBits->swap->intBitsToFloat
Bits#swap(double)::: bits swap:::return->Double->Double->doubleToLongBits->swap->longBitsToDouble
Bits#isAddressAligned(long, int)::: bits is address aligned:::return
Bits#char1(char)::: bits char1:::return
Bits#char0(char)::: bits char0:::return
Bits#short1(short)::: bits short1:::return
Bits#short0(short)::: bits short0:::return
Bits#int3(int)::: bits int3:::return
Bits#int2(int)::: bits int2:::return
Bits#int1(int)::: bits int1:::return
Bits#int0(int)::: bits int0:::return
Bits#long7(long)::: bits long7:::return
Bits#long6(long)::: bits long6:::return
Bits#long5(long)::: bits long5:::return
Bits#long4(long)::: bits long4:::return
Bits#long3(long)::: bits long3:::return
Bits#long2(long)::: bits long2:::return
Bits#long1(long)::: bits long1:::return
Bits#long0(long)::: bits long0:::return
Bits#putCharBigEndianUnaligned(long, char)::: bits put char big endian unaligned:::char1->putByte_->char0->putByte_
Bits#putShortBigEndianUnaligned(long, short)::: bits put short big endian unaligned:::short1->putByte_->short0->putByte_
Bits#putIntBigEndianUnaligned(long, int)::: bits put int big endian unaligned:::int3->putByte_->int2->putByte_->int1->putByte_->int0->putByte_
Bits#putLongBigEndianUnaligned(long, long)::: bits put long big endian unaligned:::long7->putByte_->long6->putByte_->long5->putByte_->long4->putByte_->long3->putByte_->long2->putByte_->long1->putByte_->long0->putByte_
Bits#putFloatBigEndianUnaligned(long, float)::: bits put float big endian unaligned:::Float->floatToRawIntBits->putIntBigEndianUnaligned
Bits#putDoubleBigEndianUnaligned(long, double)::: bits put double big endian unaligned:::Double->doubleToRawLongBits->putLongBigEndianUnaligned
Bits#putByte_(long, byte)::: bits put byte_:::unsafe->putByte
Bits#putBoolean_(long, boolean)::: bits put boolean_:::unsafe->putBoolean
Bits#putChar_(long, char)::: bits put char_:::unsafe->swap->putChar
Bits#putShort_(long, short)::: bits put short_:::unsafe->swap->putShort
Bits#putInt_(long, int)::: bits put int_:::unsafe->swap->putInt
Bits#putLong_(long, long)::: bits put long_:::unsafe->swap->putLong
Bits#putFloat_(long, float)::: bits put float_:::unsafe->swap->putFloat
Bits#putDouble_(long, double)::: bits put double_:::unsafe->swap->putDouble
Bits#putByte(long, byte)::: bits put byte:::putByte_->return
Bits#putBoolean(long, boolean)::: bits put boolean:::putBoolean_->return
Bits#putChar(long, char)::: bits put char:::if->isAddressAligned->putChar_->return->putCharBigEndianUnaligned->return
Bits#putShort(long, short)::: bits put short:::if->isAddressAligned->putShort_->return->putShortBigEndianUnaligned->return
Bits#putInt(long, int)::: bits put int:::if->isAddressAligned->putInt_->return->putIntBigEndianUnaligned->return
Bits#putLong(long, long)::: bits put long:::if->isAddressAligned->putLong_->return->putLongBigEndianUnaligned->return
Bits#putFloat(long, float)::: bits put float:::if->isAddressAligned->putFloat_->return->putFloatBigEndianUnaligned->return
Bits#putDouble(long, double)::: bits put double:::if->isAddressAligned->putDouble_->return->putDoubleBigEndianUnaligned->return
ChunkInputStream#available()::: chunk input stream available:::if->return->stream->available->return
ChunkInputStream#nextStream()::: chunk input stream next stream:::if->nextChunk->return->SecuritySupport->currentChunk->getFile->newFileInputStream->new->BufferedInputStream->return
ChunkInputStream#nextChunk()::: chunk input stream next chunk:::if->chunks->hasNext->return->chunks->next->return
ChunkInputStream#read()::: chunk input stream read:::while->if->r->stream->read->if->return->stream->close->currentChunk->release->if->nextStream->return
ChunkInputStream#close()::: chunk input stream close:::if->stream->close->while->currentChunk->release->if->nextChunk->return
ChunkInputStream#finalize()::: chunk input stream finalize:::super->finalize->close
ChunksChannel#nextChunk()::: chunks channel next chunk:::if->chunks->hasNext->return->chunks->next->return
ChunksChannel#nextChannel()::: chunks channel next channel:::if->nextChunk->return->current->newChannel->return
ChunksChannel#read(ByteBuffer)::: chunks channel read:::for
ChunksChannel#transferTo(FileChannel)::: chunks channel transfer to:::pos->for
ChunksChannel#close()::: chunks channel close:::if->channel->close->while->current->release->if->nextChunk->return
ChunksChannel#isOpen()::: chunks channel is open:::return
ChunksChannel#finalize()::: chunks channel finalize:::super->finalize->close
Control#combine(Set)::: control combine:::
Control#setValue(String)::: control set value:::
Control#getValue()::: control get value:::
Control#apply(Set)::: control apply:::findCombineSafe->setValueSafe
Control#setDefault()::: control set default:::if->getValueSafe->apply
Control#getValueSafe()::: control get value safe:::if->return->getValue->else->return->AccessController->new->PrivilegedAction<String>->doPrivileged
Control#apply(String)::: control apply:::if->Objects->equals->return->setValueSafe
Control#setValueSafe(String)::: control set value safe:::if->try->setValue->catch->Logger->getClass->log->finally->else->AccessController->new->PrivilegedAction<Void>->doPrivileged
Control#combineSafe(Set)::: control combine safe:::if->return->combine->return->AccessController->new->PrivilegedAction<String>->doPrivileged
Control#findCombineSafe(Set)::: control find combine safe:::if->values->size->return->values->iterator->next->for->i->result->combineSafe->for->i->return
Control#getDefaultValue()::: control get default value:::return
Control#getLastValue()::: control get last value:::return
Control#clone()::: control clone:::throw->new->CloneNotSupportedException
Control#writeObject(ObjectOutputStream)::: control write object:::throw->new->IOException
Control#readObject(ObjectInputStream)::: control read object:::throw->new->IOException
EventClassBuilder#build()::: event class builder build:::buildClassInfo->buildConstructor->buildFields->buildSetMethod->endClass->bytes->classWriter->toByteArray->ASMToolkit->logASM->return->SecuritySupport->type->getInternalName->getClassLoader->defineClass->asSubclass
EventClassBuilder#endClass()::: event class builder end class:::classWriter->visitEnd
EventClassBuilder#buildSetMethod()::: event class builder build set method:::ga->new->GeneratorAdapter->index->foreach->ga->loadArg->ga->visitLdcInsn->notEqual->new->Label->ga->ifICmp->ga->loadThis->ga->loadArg->fieldType->ASMToolkit->toType->ga->ASMToolkit->toType->unbox->ga->v->getName->putField->ga->visitInsn->ga->visitLabel->ga->fields->size->throwException->ga->endMethod
EventClassBuilder#buildConstructor()::: event class builder build constructor:::mv->classWriter->DEFAULT_CONSTRUCTOR->getName->DEFAULT_CONSTRUCTOR->getDescriptor->visitMethod->mv->visitIntInsn->ASMToolkit->TYPE_EVENT->getInternalName->invokeSpecial->mv->visitInsn->mv->visitMaxs
EventClassBuilder#buildClassInfo()::: event class builder build class info:::internalSuperName->ASMToolkit->getName->getInternalName->internalClassName->type->getInternalName->classWriter->visit->foreach->descriptor->ASMToolkit->a->getTypeName->getDescriptor->av->classWriter->visitAnnotation->foreach->a->getValueDescriptors->value->a->v->getName->getValue->name->v->getName->if->v->isArray->arrayVisitor->av->visitArray->array->for->i->arrayVisitor->visitEnd->else->av->visit->av->visitEnd
EventClassBuilder#buildFields()::: event class builder build fields:::foreach->internal->ASMToolkit->v->getTypeName->getDescriptor->classWriter->v->getName->visitField
EventControl#remove(PlatformEventType, List, Class)::: event control remove:::id->Type->getTypeId->foreach->type->getAnnotationElements->if->a->getTypeId->a->getTypeName->clazz->getName->equals->aes->remove
EventControl#defineSettings(Class)::: event control define settings:::allowPrivateMethod->while->foreach->eventClass->getDeclaredMethods->isPrivate->Modifier->m->getModifiers->isPrivate->if->m->getReturnType->m->getParameterCount->se->m->getDeclaredAnnotation->if->settingClass->m->getParameters->getType->if->Modifier->settingClass->getModifiers->isAbstract->isAssignableFrom->name->m->getName->n->m->getAnnotation->if->n->value->if->eventControls->containsKey->defineSetting->eventClass->getSuperclass
EventControl#defineSetting(Class, Method, PlatformEventType, String)::: event control define setting:::try->settingModule->settingsClass->getModule->Modules->getModule->addReads->index->settingInfos->size->si->new->SettingInfo->instantiateSettingControl->c->c->setDefault->defaultValue->c->getValueSafe->if->settingType->TypeLibrary->createType->aes->new->ArrayList<>->foreach->method->getDeclaredAnnotations->ae->TypeLibrary->createAnnotation->if->aes->add->aes->trimToSize->eventControls->put->eventType->PrivateAccess->getInstance->newSettingDescriptor->add->settingInfos->add->catch->throw->settingsClass->getName->eventType->getLogName->e->getMessage->new->InstantiationError->throw->settingsClass->getName->eventType->getLogName->e->getMessage->new->IllegalAccessError->finally
EventControl#instantiateSettingControl(Class)::: event control instantiate setting control:::SecuritySupport->makeVisibleToJFR->cc->try->settingControlClass->getDeclaredConstructors->catch->throw->settingControlClass->getName->new->InternalError->initCause->finally->SecuritySupport->setAccessible->try->return->cc->newInstance->catch->throw->settingControlClass->getName->new->InternalError->finally
EventControl#defineEnabled(PlatformEventType)::: event control define enabled:::enabled->type->getAnnotation->def->type->isJVM->if->Boolean->enabled->value->toString->type->PrivateAccess->getInstance->Collections->emptyList->newSettingDescriptor->add->return->new->EnabledSetting
EventControl#defineThreshold(PlatformEventType)::: event control define threshold:::threshold->type->getAnnotation->def->if->threshold->value->type->PrivateAccess->getInstance->Collections->emptyList->newSettingDescriptor->add->return->new->ThresholdSetting
EventControl#defineStackTrace(PlatformEventType)::: event control define stack trace:::stackTrace->type->getAnnotation->def->if->Boolean->stackTrace->value->toString->type->PrivateAccess->getInstance->Collections->emptyList->newSettingDescriptor->add->return->new->StackTraceSetting
EventControl#defineCutoff(PlatformEventType)::: event control define cutoff:::cutoff->type->getAnnotation->def->if->cutoff->value->type->PrivateAccess->getInstance->Collections->emptyList->newSettingDescriptor->add->return->new->CutoffSetting
EventControl#definePeriod(PlatformEventType)::: event control define period:::period->type->getAnnotation->def->if->period->value->type->PrivateAccess->getInstance->Collections->emptyList->newSettingDescriptor->add->return->new->PeriodSetting
EventControl#disable()::: event control disable:::foreach->eventControls->values->if->c->setValueSafe->return
EventControl#writeActiveSettingEvent()::: event control write active setting event:::if->type->isRegistered->return->foreach->eventControls->entrySet->c->entry->getValue->if->Utils->type->hasEventHook->isSettingVisible->value->c->getLastValue->if->c->getDefaultValue->ase->new->ActiveSettingEvent->type->getId->entry->getKey->ase->commit
EventControl#getEntries()::: event control get entries:::return->eventControls->entrySet
EventControl#getEventType()::: event control get event type:::return
EventControl#getSettingsId()::: event control get settings id:::return
EventControl#getSettingInfos()::: event control get setting infos:::return
EventHandlerCreator#makeEventHandlerName(long)::: event handler creator make event handler name:::return->getName
EventHandlerCreator#createFieldInfos(Class, EventType)::: event handler creator create field infos:::fieldInfos->new->ArrayList<>->foreach->type->getFields->if->fieldName->PrivateAccess->getInstance->getFieldName->fieldDescriptor->ASMToolkit->v->getTypeName->getDescriptor->c->internalName->while->try->field->c->getDeclaredField->if->Modifier->field->getModifiers->isPrivate->ASMToolkit->c->getName->getInternalName->break->catch->finally->c->getSuperclass->if->fieldInfos->new->FieldInfo->add->else->throw->type->getName->new->InternalError->return
EventHandlerCreator#makeEventHandlerClass()::: event handler creator make event handler class:::buildClassInfo->buildConstructor->buildWriteMethod->bytes->classWriter->toByteArray->ASMToolkit->logASM->return->SecuritySupport->getClassLoader->defineClass->asSubclass
EventHandlerCreator#instantiateEventHandler(Class, boolean, EventType, EventControl)::: event handler creator instantiate event handler:::cc->try->handlerClass->getDeclaredConstructors->catch->throw->eventType->getName->new->InternalError->initCause->finally->SecuritySupport->setAccessible->try->settingInfos->eventControl->getSettingInfos->arguments->settingInfos->size->new->ObjectArr->foreach->return->cc->newInstance->catch->throw->eventType->getName->e->getMessage->new->InternalError->initCause->finally
EventHandlerCreator#buildConstructor()::: event handler creator build constructor:::mv->classWriter->METHOD_EVENT_HANDLER_CONSTRUCTOR->getName->makeConstructorDescriptor->visitMethod->mv->visitVarInsn->mv->visitVarInsn->mv->visitVarInsn->mv->visitVarInsn->mv->Type->getInternalName->METHOD_EVENT_HANDLER_CONSTRUCTOR->getName->METHOD_EVENT_HANDLER_CONSTRUCTOR->getDescriptor->visitMethodInsn->foreach->mv->visitVarInsn->mv->visitVarInsn->mv->TYPE_SETTING_CONTROL->getDescriptor->visitFieldInsn->fieldIndex->foreach->if->field->isString->mv->visitVarInsn->mv->visitVarInsn->mv->Type->getInternalName->TYPE_STRING_POOL->getDescriptor->visitMethodInsn->mv->TYPE_STRING_POOL->getDescriptor->visitFieldInsn->mv->visitInsn->mv->visitMaxs->mv->visitEnd
EventHandlerCreator#buildClassInfo()::: event handler creator build class info:::internalSuperName->ASMToolkit->getName->getInternalName->classWriter->visit->foreach->classWriter->TYPE_SETTING_CONTROL->getDescriptor->visitField->fieldIndex->foreach->if->field->isString->classWriter->TYPE_STRING_POOL->getDescriptor->visitField
EventHandlerCreator#visitMethod(MethodVisitor, int, Type, Method)::: event handler creator visit method:::mv->type->getInternalName->method->getName->method->getDescriptor->visitMethodInsn
EventHandlerCreator#buildWriteMethod()::: event handler creator build write method:::argIndex->slotIndex->fieldIndex->desc->ASMToolkit->makeWriteMethod->argumentTypes->Type->desc->getDescriptor->getArgumentTypes->mv->classWriter->desc->getName->desc->getDescriptor->visitMethod->mv->visitCode->start->new->Label->endTryBlock->new->Label->exceptionHandler->new->Label->mv->visitTryCatchBlock->mv->visitLabel->visitMethod->mv->visitInsn->mv->visitVarInsn->mv->TYPE_EVENT_HANDLER->getInternalName->TYPE_PLATFORM_EVENT_TYPE->getDescriptor->visitFieldInsn->asASM->visitMethod->recursive->new->Label->mv->visitJumpInsn->mv->visitInsn->mv->getOpcode->visitVarInsn->getSize->asASM->visitMethod->mv->visitInsn->mv->getOpcode->visitVarInsn->getSize->asASM->visitMethod->mv->visitInsn->asASM->visitMethod->mv->visitInsn->asASM->visitMethod->while->fields->size->mv->visitInsn->mv->getOpcode->visitVarInsn->getSize->field->fields->get->if->field->isString->mv->visitVarInsn->mv->TYPE_STRING_POOL->getDescriptor->visitFieldInsn->eventMethod->EventWriterMethod->lookupMethod->eventMethod->asASM->visitMethod->asASM->visitMethod->mv->visitJumpInsn->mv->visitLabel->end->new->Label->mv->visitJumpInsn->mv->visitLabel->mv->new->ObjectArr->visitFrame->visitMethod->mv->visitInsn->rethrow->new->Label->mv->visitJumpInsn->mv->visitInsn->visitMethod->mv->visitLabel->mv->new->ObjectArr->TYPE_EVENT_WRITER->getInternalName->visitFrame->mv->visitInsn->mv->visitInsn->mv->visitLabel->mv->new->ObjectArr->TYPE_EVENT_WRITER->getInternalName->visitFrame->mv->visitInsn->mv->visitLabel->mv->visitFrame->mv->visitInsn->mv->visitMaxs->mv->visitEnd
EventHandlerCreator#makeConstructorDescriptor(List)::: event handler creator make constructor descriptor:::constructordescriptor->new->StringJoiner->constructordescriptor->getDescriptor->add->constructordescriptor->Type->getType->getDescriptor->add->constructordescriptor->Type->getType->getDescriptor->add->for->i->settingsInfos->size->return->constructordescriptor->toString
EventInstrumentation.FieldInfo#isString()::: field info is string:::return->STRING->getDescriptor->equals
EventInstrumentation#hasUntypedHandler()::: event instrumentation has untyped handler:::foreach->if->FIELD_EVENT_HANDLER->equals->return->TYPE_OBJECT->getDescriptor->equals->throw->new->InternalError
EventInstrumentation#getClassName()::: event instrumentation get class name:::return->replace
EventInstrumentation#createClassNode(byte[])::: event instrumentation create class node:::classNode->new->ClassNode->classReader->new->ClassReader->classReader->accept->return
EventInstrumentation#isRegistered()::: event instrumentation is registered:::result->ANNOTATION_TYPE_REGISTERED->getDescriptor->annotationValue->if->return->result->booleanValue->if->r->superClass->getAnnotation->if->return->r->value->return
EventInstrumentation#isEnabled()::: event instrumentation is enabled:::result->ANNOTATION_TYPE_ENABLED->getDescriptor->annotationValue->if->return->result->booleanValue->if->e->superClass->getAnnotation->if->return->e->value->return
EventInstrumentation#annotationValue(ClassNode, String, Class)::: event instrumentation annotation value:::if->foreach->if->typeDescriptor->equals->values->if->values->size->key->values->get->value->values->get->if->if->value->getClass->keyName->if->equals->return->return
EventInstrumentation#buildSettingInfos(Class, ClassNode)::: event instrumentation build setting infos:::methodSet->new->HashSet<>->settingInfos->new->ArrayList<>->settingDescriptor->Type->getType->getDescriptor->foreach->if->foreach->if->settingDescriptor->equals->returnType->Type->getReturnType->if->returnType->Type->getType->equals->args->Type->getArgumentTypes->if->paramType->fieldName->settingInfos->size->index->settingInfos->size->si->new->SettingInfo->paramType->getDescriptor->paramType->getInternalName->methodSet->add->settingInfos->add->for->c->c->getSuperclass->return
EventInstrumentation#buildFieldInfos(Class, ClassNode)::: event instrumentation build field infos:::fieldSet->new->HashSet<>->fieldInfos->size->new->ArrayList<>->fieldInfos->getDescriptor->new->FieldInfo->add->fieldInfos->getDescriptor->new->FieldInfo->add->foreach->if->fieldSet->contains->Type->getType->getClassName->isValidField->fi->new->FieldInfo->fieldInfos->add->fieldSet->add->for->c->c->getSuperclass->return
EventInstrumentation#isValidField(int, String)::: event instrumentation is valid field:::if->Modifier->isTransient->Modifier->isStatic->return->return->isValidJavaFieldType
EventInstrumentation#buildInstrumented()::: event instrumentation build instrumented:::makeInstrumented->return->toByteArray
EventInstrumentation#toByteArray()::: event instrumentation to byte array:::cw->new->ClassWriter->classNode->accept->cw->visitEnd->result->cw->toByteArray->Utils->writeGeneratedASM->return
EventInstrumentation#builUninstrumented()::: event instrumentation buil uninstrumented:::makeUninstrumented->return->toByteArray
EventInstrumentation#makeInstrumented()::: event instrumentation make instrumented:::nullLabel->new->Label->if->getEventHandler->methodVisitor->visitJumpInsn->getEventHandler->ASMToolkit->TYPE_EVENT_HANDLER->getInternalName->invokeVirtual->methodVisitor->visitInsn->if->methodVisitor->visitLabel->methodVisitor->visitFrame->methodVisitor->visitInsn->methodVisitor->visitInsn->updateMethod->methodVisitor->visitIntInsn->ASMToolkit->TYPE_EVENT_HANDLER->getInternalName->invokeStatic->methodVisitor->getInternalClassName->visitFieldInsn->methodVisitor->visitInsn->updateMethod->methodVisitor->visitIntInsn->methodVisitor->visitIntInsn->methodVisitor->getInternalClassName->visitFieldInsn->ASMToolkit->TYPE_EVENT_HANDLER->getInternalName->invokeStatic->methodVisitor->getInternalClassName->visitFieldInsn->methodVisitor->visitInsn->methodVisitor->visitMaxs->updateMethod->methodVisitor->visitCode->methodVisitor->visitVarInsn->methodVisitor->getInternalClassName->METHOD_IS_ENABLED->getName->METHOD_IS_ENABLED->getDescriptor->visitMethodInsn->l0->new->Label->methodVisitor->visitJumpInsn->methodVisitor->visitInsn->methodVisitor->visitLabel->methodVisitor->visitFrame->methodVisitor->visitVarInsn->methodVisitor->getInternalClassName->visitFieldInsn->methodVisitor->visitInsn->methodVisitor->visitInsn->durationalEvent->new->Label->methodVisitor->visitJumpInsn->methodVisitor->visitVarInsn->methodVisitor->TYPE_EVENT_HANDLER->getInternalName->METHOD_TIME_STAMP->getName->METHOD_TIME_STAMP->getDescriptor->visitMethodInsn->methodVisitor->getInternalClassName->visitFieldInsn->commit->new->Label->methodVisitor->visitJumpInsn->methodVisitor->visitLabel->methodVisitor->visitFrame->methodVisitor->visitVarInsn->methodVisitor->getInternalClassName->visitFieldInsn->methodVisitor->visitInsn->methodVisitor->visitInsn->methodVisitor->visitJumpInsn->methodVisitor->visitVarInsn->methodVisitor->TYPE_EVENT_HANDLER->getInternalName->METHOD_TIME_STAMP->getName->METHOD_TIME_STAMP->getDescriptor->visitMethodInsn->methodVisitor->visitVarInsn->methodVisitor->getInternalClassName->visitFieldInsn->methodVisitor->visitInsn->methodVisitor->getInternalClassName->visitFieldInsn->methodVisitor->visitLabel->methodVisitor->visitFrame->methodVisitor->visitVarInsn->methodVisitor->getInternalClassName->METHOD_EVENT_SHOULD_COMMIT->getName->METHOD_EVENT_SHOULD_COMMIT->getDescriptor->visitMethodInsn->end->new->Label->methodVisitor->visitJumpInsn->getEventHandler->methodVisitor->visitTypeInsn->foreach->methodVisitor->visitVarInsn->methodVisitor->visitFieldInsn->methodVisitor->writeMethod->getName->writeMethod->getDescriptor->visitMethodInsn->methodVisitor->visitLabel->methodVisitor->visitFrame->methodVisitor->visitInsn->methodVisitor->visitEnd->updateMethod->fail->new->Label->if->getEventHandler->methodVisitor->visitJumpInsn->getEventHandler->methodVisitor->visitVarInsn->methodVisitor->getInternalClassName->visitFieldInsn->ASMToolkit->TYPE_EVENT_HANDLER->getInternalName->invokeVirtual->methodVisitor->visitJumpInsn->foreach->methodVisitor->visitIntInsn->if->methodVisitor->getInternalClassName->TYPE_OBJECT->getDescriptor->visitFieldInsn->else->methodVisitor->getInternalClassName->Type->getDescriptor->visitFieldInsn->methodVisitor->visitTypeInsn->methodVisitor->TYPE_SETTING_CONTROL->getDescriptor->visitFieldInsn->methodVisitor->visitTypeInsn->methodVisitor->getInternalClassName->visitMethodInsn->methodVisitor->visitJumpInsn->methodVisitor->visitInsn->methodVisitor->visitInsn->methodVisitor->visitLabel->methodVisitor->visitInsn->methodVisitor->visitInsn->updateMethod
EventInstrumentation#getEventHandler(MethodVisitor)::: event instrumentation get event handler:::if->methodVisitor->getInternalClassName->TYPE_OBJECT->getDescriptor->visitFieldInsn->methodVisitor->TYPE_EVENT_HANDLER->getInternalName->visitTypeInsn->else->methodVisitor->getInternalClassName->Type->getDescriptor->visitFieldInsn
EventInstrumentation#makeUninstrumented()::: event instrumentation make uninstrumented:::updateExistingWithReturnFalse->updateExistingWithReturnFalse->updateExistingWithEmptyVoidMethod->updateExistingWithEmptyVoidMethod->updateExistingWithEmptyVoidMethod
EventInstrumentation#updateExistingWithEmptyVoidMethod(Method)::: event instrumentation update existing with empty void method:::methodVisitor->visitInsn->updateMethod
EventInstrumentation#updateExistingWithReturnFalse(Method)::: event instrumentation update existing with return false:::methodVisitor->visitInsn->methodVisitor->visitInsn->updateMethod
EventInstrumentation#getMethodNode(Method)::: event instrumentation get method node:::foreach->if->method->getName->equals->method->getDescriptor->equals->return->return
EventInstrumentation#updateMethod(Method, Consumer)::: event instrumentation update method:::old->getMethodNode->index->indexOf->remove->mv->classNode->visitMethod->mv->visitCode->code->accept->mv->visitMaxs->newMethod->getMethodNode->remove->add
EventInstrumentation#makeWriteMethod(List)::: event instrumentation make write method:::sb->new->StringBuilder->sb->append->foreach->sb->append->sb->append->return->sb->toString->new->Method
EventInstrumentation#getInternalClassName()::: event instrumentation get internal class name:::return
EventInstrumentation#getSettingInfos()::: event instrumentation get setting infos:::return
EventInstrumentation#getFieldInfos()::: event instrumentation get field infos:::return
EventInstrumentation#getEventName()::: event instrumentation get event name:::return
EventInstrumentation#setGuardHandler(boolean)::: event instrumentation set guard handler:::
EventWriter#getEventWriter()::: event writer get event writer:::ew->JVM->getEventWriter->return->JVM->newEventWriter
EventWriter#putBoolean(boolean)::: event writer put boolean:::if->isValidForSize->Bits->putBoolean
EventWriter#putByte(byte)::: event writer put byte:::if->isValidForSize->unsafe->putByte
EventWriter#putChar(char)::: event writer put char:::if->isValidForSize->putUncheckedLong
EventWriter#putUncheckedChar(char)::: event writer put unchecked char:::putUncheckedLong
EventWriter#putShort(short)::: event writer put short:::if->isValidForSize->putUncheckedLong
EventWriter#putInt(int)::: event writer put int:::if->isValidForSize->putUncheckedLong
EventWriter#putUncheckedInt(int)::: event writer put unchecked int:::putUncheckedLong
EventWriter#putFloat(float)::: event writer put float:::if->isValidForSize->Bits->putFloat
EventWriter#putLong(long)::: event writer put long:::if->isValidForSize->putUncheckedLong
EventWriter#putDouble(double)::: event writer put double:::if->isValidForSize->Bits->putDouble
EventWriter#putString(String, StringPool)::: event writer put string:::if->putByte->return->length->s->length->if->putByte->return->if->l->StringPool->addString->if->putByte->putLong->return->putStringValue->return
EventWriter#putStringValue(String)::: event writer put string value:::length->s->length->if->isValidForSize->putUncheckedByte->putUncheckedInt->for->i
EventWriter#putEventThread()::: event writer put event thread:::putLong
EventWriter#putThread(Thread)::: event writer put thread:::if->putLong->else->jvm->getThreadId->putLong
EventWriter#putClass(Class)::: event writer put class:::if->putLong->else->JVM->getClassIdNonIntrinsic->putLong
EventWriter#putStackTrace()::: event writer put stack trace:::if->eventType->getStackTraceEnabled->jvm->eventType->getStackTraceOffset->getStackTraceId->putLong->else->putLong
EventWriter#reserveEventSizeField()::: event writer reserve event size field:::if->isValidForSize
EventWriter#reset()::: event writer reset:::if->flush
EventWriter#isValidForSize(int)::: event writer is valid for size:::if->return->if->usedSize->flush->if->Logger->log->return->return
EventWriter#isNotified()::: event writer is notified:::return
EventWriter#resetNotified()::: event writer reset notified:::
EventWriter#usedSize()::: event writer used size:::return
EventWriter#flush()::: event writer flush:::return->usedSize->flush
EventWriter#flush(int, int)::: event writer flush:::return->JVM->flush
EventWriter#beginEvent(PlatformEventType)::: event writer begin event:::if->return->reserveEventSizeField->eventType->getId->putLong->return
EventWriter#endEvent()::: event writer end event:::if->reset->return->eventSize->usedSize->if->reset->return->Bits->makePaddedInt->putInt->if->isNotified->resetNotified->reset->return->unsafe->putAddress->if->flush->return
EventWriter#makePaddedInt(int)::: event writer make padded int:::b1->b2->b3->b4->return
EventWriter#putUncheckedLong(long)::: event writer put unchecked long:::if->putUncheckedByte->return->putUncheckedByte->if->putUncheckedByte->return->putUncheckedByte->if->putUncheckedByte->return->putUncheckedByte->if->putUncheckedByte->return->putUncheckedByte->if->putUncheckedByte->return->putUncheckedByte->if->putUncheckedByte->return->putUncheckedByte->if->putUncheckedByte->return->putUncheckedByte->if->putUncheckedByte->return->putUncheckedByte->putUncheckedByte
EventWriter#putUncheckedByte(byte)::: event writer put unchecked byte:::unsafe->putByte
JVM#registerNatives()::: m register natives:::
JVM#getJVM():::Get the one and only JVM.:::return
JVM#beginRecording():::Begin recording events  Requires that JFR has been started with #createNativeJFR():::
JVM#counterTime():::Return ticks:::
JVM#emitEvent(long, long, long):::Emits native periodic event.:::
JVM#endRecording():::End recording events, which includes flushing data in thread buffers  Requires that JFR has been started with #createNativeJFR():::
JVM#getAllEventClasses():::Return a list of all classes deriving from jdk.internal.event.Event:::
JVM#getUnloadedEventClassCount():::Return a count of the number of unloaded classes deriving from Event:::
JVM#getClassId(Class):::Return a unique identifier for a class:::
JVM#getClassIdNonIntrinsic(Class)::: m get class id non intrinsic:::
JVM#getPid():::Return process identifier.:::
JVM#getStackTraceId(int):::Return unique identifier for stack trace:::
JVM#getThreadId(Thread):::Return identifier for thread:::
JVM#getTicksFrequency():::Frequency, ticks per second:::
JVM#log(int, int, String):::Write message to log:::
JVM#subscribeLogLevel(LogTag, int):::Subscribe to LogLevel updates for LogTag:::
JVM#retransformClasses(Class[]):::Call to invoke event tagging and retransformation of the passed classes:::
JVM#setEnabled(long, boolean):::Enable event:::
JVM#setFileNotification(long):::Interval at which the JVM should notify on #FILE_DELTA_CHANGE:::
JVM#setGlobalBufferCount(long):::Set the number of global buffers to use:::
JVM#setGlobalBufferSize(long):::Set size of a global buffer:::
JVM#setMemorySize(long):::Set overall memory size:::
JVM#setMethodSamplingInterval(long, long):::    /** Set interval for method samples, in milliseconds:::
JVM#setOutput(String):::Sets the file where data should be written:::
JVM#setForceInstrumentation(boolean):::Controls if a class deriving from jdk.jfr.Event should always be instrumented on class load.:::
JVM#setSampleThreads(boolean):::Turn on/off thread sampling.:::
JVM#setCompressedIntegers(boolean):::Turn on/off compressed integers.:::
JVM#setStackDepth(int):::Set stack depth.:::
JVM#setStackTraceEnabled(long, boolean):::Turn on stack trace for an event:::
JVM#setThreadBufferSize(long):::Set thread buffer size.:::
JVM#setThreshold(long, long):::Set threshold for event,  Long.MAXIMUM_VALUE = no limit:::
JVM#storeMetadataDescriptor(byte[]):::Store the metadata descriptor that is to be written at the end of a chunk, data should be written after GMT offset and size of metadata event should be adjusted  Requires that JFR has been started with #createNativeJFR():::
JVM#endRecording_()::: m end recording_:::endRecording
JVM#beginRecording_()::: m begin recording_:::beginRecording
JVM#isRecording()::: m is recording:::return
JVM#getAllowedToDoEventRetransforms():::If the JVM supports JVM TI and retransformation has not been disabled this method will return true:::
JVM#createJFR(boolean):::Set up native resources, data structures, threads etc:::
JVM#destroyJFR():::Destroys native part of JFR:::
JVM#createFailedNativeJFR()::: m create failed native r:::return->createJFR
JVM#createNativeJFR()::: m create native r:::createJFR
JVM#destroyNativeJFR()::: m destroy native r:::result->destroyJFR->return
JVM#hasNativeJFR()::: m has native r:::return
JVM#isAvailable():::Cheap test to check if JFR functionality is available.:::
JVM#getTimeConversionFactor():::To convert ticks to wall clock time.:::
JVM#getTypeId(Class):::Return a unique identifier for a class:::
JVM#getEventWriter():::Fast path fetching the EventWriter using VM intrinsics:::
JVM#newEventWriter():::Create a new EventWriter:::
JVM#flush(EventWriter, int, int):::Flushes the EventWriter for this thread.:::
JVM#setRepositoryLocation(String):::Sets the location of the disk repository, to be used at an emergency dump.:::
JVM#abort(String):::Access to VM termination support.:::
JVM#addStringConstant(boolean, long, String):::Adds a string to the string constant pool:::
JVM#getEpochAddress():::Gets the address of the jboolean epoch:::
JVM#uncaughtException(Thread, Throwable)::: m uncaught exception:::
JVM#setCutoff(long, long):::Sets cutoff for event:::
JVM#emitOldObjectSamples(long, boolean):::Emit old object sample events.:::
JVM#shouldRotateDisk():::Test if a chunk rotation is warranted.:::
JVMSupport#checkAvailability()::: support check availability:::try->if->SecuritySupport->getBooleanProperty->return->catch->return->finally->try->JVM->getJVM->isAvailable->return->catch->return->finally
JVMSupport#ensureWithInternalError()::: support ensure with internal error:::if->throw->new->InternalError
JVMSupport#ensureWithIOException()::: support ensure with exception:::if->throw->new->IOException
JVMSupport#ensureWithIllegalStateException()::: support ensure with illegal state exception:::if->throw->new->IllegalStateException
JVMSupport#isNotAvailable()::: support is not available:::return
JVMSupport#tryToInitializeJVM()::: support try to initialize m:::
JVMUpcalls#onRetransform(long, boolean, Class, byte[]):::Called by the JVM when a retransform happens on a tagged class:::try->if->isAssignableFrom->Modifier->clazz->getModifiers->isAbstract->handler->Utils->clazz->asSubclass->getHandler->if->Logger->clazz->getName->log->return->Logger->clazz->getName->log->ei->clazz->getSuperclass->new->EventInstrumentation->bytes->ei->buildInstrumented->ASMToolkit->clazz->getName->logASM->return->return->JDKEvents->retransformCallback->catch->Logger->clazz->getName->log->finally->return
JVMUpcalls#bytesForEagerInstrumentation(long, boolean, Class, byte[]):::Called by the JVM when requested to do an "eager" instrumentation:::if->JVMSupport->isNotAvailable->return->eventName->try->ei->new->EventInstrumentation->ei->getEventName->if->mr->MetadataRepository->getInstance->if->mr->ei->getEventName->isEnabled->ei->isEnabled->ei->isRegistered->Logger->log->return->ei->setGuardHandler->Logger->log->eh->ei->getSettingInfos->ei->getFieldInfos->new->EventHandlerCreator->eh->makeEventHandlerClass->bytes->ei->buildInstrumented->ASMToolkit->ei->getClassName->logASM->return->catch->Logger->log->return->finally
JVMUpcalls#createRecorderThread(ThreadGroup, ClassLoader):::Called by the JVM to create the recorder thread.:::return->SecuritySupport->createRecorderThread
Logger#log(LogTag, LogLevel, String)::: logger log:::if->shouldLog->logInternal
Logger#log(LogTag, LogLevel, Supplier)::: logger log:::if->shouldLog->messageSupplier->get->logInternal
Logger#logInternal(LogTag, LogLevel, String)::: logger log internal:::if->message->length->JVM->log->else->JVM->message->substring->log
Logger#shouldLog(LogTag, LogLevel)::: logger should log:::return
MetadataDescriptor.Element#longValue(String)::: element long value:::v->attribute->if->return->Long->parseLong->else->throw->new->IllegalArgumentException
MetadataDescriptor.Element#attribute(String)::: element attribute:::foreach->if->equals->return->return
MetadataDescriptor.Element#toString()::: element to string:::sb->new->StringBuilder->try->prettyPrintXML->catch->finally->return->sb->toString
MetadataDescriptor.Element#attribute(String, long)::: element attribute:::text->attribute->if->return->return->Long->parseLong
MetadataDescriptor.Element#attribute(String, String)::: element attribute:::text->attribute->if->return->return
MetadataDescriptor.Element#elements(String...)::: element elements:::filteredElements->new->ArrayList<>->foreach->foreach->if->equals->filteredElements->add->return
MetadataDescriptor.Element#add(Element)::: element add:::elements->add
MetadataDescriptor.Element#addAttribute(String, Object)::: element add attribute:::attributes->String->valueOf->new->Attribute->add
MetadataDescriptor.Element#newChild(String)::: element new child:::e->new->Element->elements->add->return
MetadataDescriptor.Element#addArrayAttribute(Element, String, Object)::: element add array attribute:::typeName->value->getClass->getComponentType->getName->switch->ints->for->i->break->longs->for->i->break->floats->for->i->break->doubles->for->i->break->shorts->for->i->break->chars->for->i->break->bytes->for->i->break->booleans->for->i->break->strings->for->i->break->throw->new->InternalError
MetadataDescriptor#prettyPrintXML(Appendable, String, Element)::: metadata descriptor pretty print l:::sb->append->foreach->sb->append->append->append->append->append->if->size->sb->append->sb->append->foreach->prettyPrintXML->if->size->sb->append->append->append->append
MetadataDescriptor#getTypes()::: metadata descriptor get types:::return
MetadataDescriptor#getEventTypes()::: metadata descriptor get event types:::return
MetadataDescriptor#getGMTOffset()::: metadata descriptor get offset:::return
MetadataDescriptor#getLocale()::: metadata descriptor get locale:::return
MetadataDescriptor#read(DataInput)::: metadata descriptor read:::r->new->MetadataReader->return->r->getDescriptor
MetadataDescriptor#write(List, DataOutput)::: metadata descriptor write:::m->new->MetadataDescriptor->Locale->getDefault->toString->TimeZone->getDefault->getRawOffset->addAll->w->new->MetadataWriter->w->writeBinary
MetadataDescriptor#toString()::: metadata descriptor to string:::return->root->toString
MetadataHandler#startElement(String, String, String, Attributes)::: metadata handler start element:::switch->xmlType->new->XmlType->attributes->getValue->attributes->getValue->attributes->getValue->Boolean->attributes->getValue->valueOf->xmlTypes->put->break->new->TypeElement->attributes->getValue->attributes->getValue->attributes->getValue->attributes->getValue->getBoolean->getBoolean->getBoolean->attributes->getValue->getBoolean->getBoolean->qName->equals->break->new->FieldElement->getBoolean->getBoolean->attributes->getValue->attributes->getValue->attributes->getValue->attributes->getValue->getBoolean->attributes->getValue->attributes->getValue->attributes->getValue->break->name->attributes->getValue->annotation->attributes->getValue->xmlContentTypes->createAnnotationElements->put->break->n->attributes->getValue->relations->add->break
MetadataHandler#createAnnotationElements(String)::: metadata handler create annotation elements:::annotations->annotation->split->annotationElements->new->ArrayList<>->foreach->a->trim->leftParenthesis->a->indexOf->if->annotationElements->createAnnotationClass->new->AnnotationElement->add->else->rightParenthesis->a->lastIndexOf->if->throw->new->InternalError->value->a->substring->type->a->substring->annotationElements->createAnnotationClass->new->AnnotationElement->add->return
MetadataHandler#createAnnotationClass(String)::: metadata handler create annotation class:::try->if->type->startsWith->throw->new->IllegalStateException->c->Class->forName->return->catch->throw->new->IllegalStateException->finally
MetadataHandler#getBoolean(Attributes, String, boolean)::: metadata handler get boolean:::value->attributes->getValue->return->Boolean->valueOf
MetadataHandler#endElement(String, String, String)::: metadata handler end element:::switch->types->put->break->add->break
MetadataHandler#createTypes()::: metadata handler create types:::parser->new->SAXParserImpl->t->new->MetadataHandler->try->is->SecuritySupport->getResourceAsStream->new->BufferedInputStream->Logger->log->try->parser->parse->return->t->buildTypes->catch->e->printStackTrace->throw->new->IOException->finally->catch->finally
MetadataHandler#buildTypes()::: metadata handler build types:::removeXMLConvenience->typeMap->buildTypeMap->relationMap->buildRelationMap->addFields->return->trimTypes
MetadataHandler#buildRelationMap(Map)::: metadata handler build relation map:::relationMap->new->HashMap<>->foreach->relationType->new->Type->relationType->Collections->new->AnnotationElement->singletonList->setAnnotations->ae->PrivateAccess->getInstance->Collections->emptyList->newAnnotation->relationMap->put->typeMap->relationType->getName->put->return
MetadataHandler#trimTypes(Map)::: metadata handler trim types:::trimmedTypes->lookup->size->new->ArrayList<>->foreach->lookup->values->t->trimFields->trimmedTypes->add->return
MetadataHandler#addFields(Map, Map)::: metadata handler add fields:::foreach->types->values->type->lookup->get->if->periodic->TypeLibrary->addImplicitFields->foreach->fieldType->Type->getKnownType->if->Objects->lookup->get->requireNonNull->aes->new->ArrayList<>->if->aes->new->AnnotationElement->add->if->aes->Objects->xmlContentTypes->get->requireNonNull->addAll->if->aes->Objects->relationMap->get->requireNonNull->add->if->aes->new->AnnotationElement->add->if->aes->new->AnnotationElement->add->if->aes->new->AnnotationElement->add->if->equals->aes->new->AnnotationElement->add->if->equals->aes->new->AnnotationElement->add->constantPool->type->PrivateAccess->getInstance->newValueDescriptor->add
MetadataHandler#buildTypeMap()::: metadata handler build type map:::typeMap->new->HashMap<>->foreach->Type->getKnownTypes->typeMap->type->getName->put->foreach->types->values->aes->new->ArrayList<>->if->aes->buildCategoryArray->new->AnnotationElement->add->if->aes->new->AnnotationElement->add->if->aes->new->AnnotationElement->add->if->if->aes->new->AnnotationElement->add->else->if->aes->new->AnnotationElement->add->if->aes->new->AnnotationElement->add->if->aes->new->AnnotationElement->add->if->aes->new->AnnotationElement->add->type->if->aes->new->AnnotationElement->add->new->PlatformEventType->else->valueType->endsWith->nextTypeId->new->Type->type->setAnnotations->typeMap->put->return
MetadataHandler#nextTypeId(String)::: metadata handler next type id:::if->getName->equals->return->getId->if->getName->equals->return->getId->if->getName->equals->return->getId->foreach->Type->getKnownTypes->if->type->getName->equals->return->type->getId->return
MetadataHandler#buildCategoryArray(String)::: metadata handler build category array:::categories->new->ArrayList<>->sb->new->StringBuilder->foreach->category->toCharArray->if->categories->sb->toString->trim->add->sb->setLength->else->sb->append->categories->sb->toString->trim->add->return->categories->new->StringArr->toArray
MetadataHandler#removeXMLConvenience()::: metadata handler remove convenience:::foreach->types->values->xmlType->xmlTypes->get->if->else->if->else->foreach->types->values->foreach->types->get->xmlType->xmlTypes->get->if->if->if->if->if
MetadataReader#readString()::: metadata reader read string:::return->pool->readInt->get
MetadataReader#readInt()::: metadata reader read int:::return->input->readInt
MetadataReader#createElement()::: metadata reader create element:::name->readString->e->new->Element->attributeCount->readInt->for->i->childrenCount->readInt->for->i->return
MetadataReader#annotateTypes(Element)::: metadata reader annotate types:::foreach->metadata->elements->type->getType->aes->new->ArrayList<>->foreach->typeElement->elements->aes->makeAnnotation->add->aes->trimToSize->type->setAnnotations->index->if->settings->getAllSettings->foreach->typeElement->elements->annotations->new->ArrayList<>->foreach->settingElement->elements->annotations->makeAnnotation->add->annotations->trimToSize->PrivateAccess->getInstance->settings->get->setAnnotations->fields->type->getFields->foreach->typeElement->elements->annotations->new->ArrayList<>->foreach->fieldElement->elements->annotations->makeAnnotation->add->annotations->trimToSize->PrivateAccess->getInstance->fields->get->setAnnotations
MetadataReader#makeAnnotation(Element)::: metadata reader make annotation:::annotationType->getType->values->new->ArrayList<>->foreach->annotationType->getFields->if->v->isArray->list->new->ArrayList<>->index->while->text->annotationElement->v->getName->attribute->if->break->list->v->getTypeName->objectify->add->object->Utils->v->getTypeName->makePrimitiveArray->if->throw->new->IOException->values->add->else->text->annotationElement->v->getName->attribute->values->v->getTypeName->objectify->add->return->PrivateAccess->getInstance->newAnnotation
MetadataReader#objectify(String, String)::: metadata reader objectify:::try->switch->return->Integer->valueOf->return->Long->valueOf->return->Double->valueOf->return->Float->valueOf->return->Short->valueOf->if->text->length->throw->new->IOException->return->text->charAt->return->Byte->valueOf->return->Boolean->valueOf->return->catch->throw->new->IOException->finally->throw->new->IOException
MetadataReader#getType(String, Element)::: metadata reader get type:::id->element->longValue->type->types->get->if->name->element->attribute->throw->new->IllegalStateException->return
MetadataReader#buildEvenTypes()::: metadata reader build even types:::foreach->if->PrivateAccess->getInstance->newEventType->add
MetadataReader#defineTypes(Element)::: metadata reader define types:::foreach->metadata->elements->id->typeElement->attribute->t->types->get->foreach->typeElement->elements->name->fieldElement->attribute->defaultValue->fieldElement->attribute->settingType->getType->eventType->eventType->PrivateAccess->getInstance->new->ArrayList<>->newSettingDescriptor->add->foreach->typeElement->elements->name->fieldElement->attribute->fieldType->getType->dimension->fieldElement->attribute->constantPool->fieldElement->attribute->t->PrivateAccess->getInstance->new->ArrayList<>->newValueDescriptor->add->t->trimFields
MetadataReader#declareTypes(Element)::: metadata reader declare types:::foreach->metadata->elements->typeName->typeElement->attribute->superType->typeElement->attribute->simpleType->typeElement->attribute->id->typeElement->attribute->t->if->equals->new->PlatformEventType->else->new->Type->types->put->add
MetadataReader#getDescriptor()::: metadata reader get descriptor:::return
MetadataRepository#initializeJVMEventTypes()::: metadata repository initialize event types:::requestHooks->new->ArrayList<>->foreach->typeLibrary->getTypes->if->pEventType->eventType->PrivateAccess->getInstance->newEventType->pEventType->eventType->getAnnotation->setHasDuration->pEventType->eventType->getAnnotation->setHasStackTrace->pEventType->eventType->getAnnotation->setHasCutoff->pEventType->eventType->getAnnotation->setHasPeriod->if->pEventType->hasPeriod->pEventType->setEventHook->if->type->getName->equals->requestHooks->new->RequestHook->add->nativeControls->new->EventControl->add->nativeEventTypes->add->RequestEngine->addHooks
MetadataRepository#getInstance()::: metadata repository get instance:::return
MetadataRepository#getRegisteredEventTypes()::: metadata repository get registered event types:::handlers->getEventHandlers->eventTypes->handlers->size->nativeEventTypes->size->new->ArrayList<>->foreach->if->h->isRegistered->eventTypes->h->getEventType->add->eventTypes->addAll->return
MetadataRepository#getEventType(Class)::: metadata repository get event type:::h->getHandler->if->h->isRegistered->return->h->getEventType->throw->eventClass->getName->new->IllegalStateException
MetadataRepository#unregister(Class)::: metadata repository unregister:::Utils->checkRegisterPermission->handler->getHandler->if->handler->setRegistered
MetadataRepository#register(Class)::: metadata repository register:::return->Collections->emptyList->Collections->emptyList->register
MetadataRepository#register(Class, List, List)::: metadata repository register:::Utils->checkRegisterPermission->handler->getHandler->if->if->eventClass->getAnnotation->return->pe->findMirrorType->makeHandler->handler->setRegistered->typeLibrary->handler->getPlatformEventType->addType->if->jvm->isRecording->storeDescriptorInJVM->settingsManager->handler->getEventControl->setEventControl->settingsManager->Collections->singletonList->updateRetransform->else->setStaleMetadata->return->handler->getEventType
MetadataRepository#findMirrorType(Class)::: metadata repository find mirror type:::fullName->eventClass->getModule->getName->eventClass->getName->mirrorClass->mirrors->get->if->return->Utils->verifyMirror->et->TypeLibrary->createType->typeLibrary->et->getId->removeType->id->Type->getTypeId->et->setId->return
MetadataRepository#getHandler(Class)::: metadata repository get handler:::Utils->ensureValidEventSubclass->SecuritySupport->makeVisibleToJFR->Utils->ensureInitialized->return->Utils->getHandler
MetadataRepository#makeHandler(Class, PlatformEventType, List, List)::: metadata repository make handler:::SecuritySupport->addHandlerExport->if->TypeLibrary->createType->eventType->PrivateAccess->getInstance->newEventType->ec->new->EventControl->handlerClass->try->eventHandlerName->EventHandlerCreator->eventType->getId->makeEventHandlerName->Class->getClassLoader->forName->asSubclass->pEventType->setInstrumented->Logger->eventType->getName->log->catch->ehc->eventType->getId->ec->getSettingInfos->new->EventHandlerCreator->ehc->makeEventHandlerClass->Logger->eventType->getName->log->finally->handler->EventHandlerCreator->instantiateEventHandler->Utils->setHandler->return
MetadataRepository#setSettings(List>)::: metadata repository set settings:::settingsManager->setSettings
MetadataRepository#disableEvents()::: metadata repository disable events:::foreach->getEventControls->c->disable
MetadataRepository#getEventControls()::: metadata repository get event controls:::controls->new->ArrayList<>->controls->addAll->foreach->getEventHandlers->controls->eh->getEventControl->add->return
MetadataRepository#storeDescriptorInJVM()::: metadata repository store descriptor in m:::jvm->getBinaryRepresentation->storeMetadataDescriptor
MetadataRepository#getEventHandlers()::: metadata repository get event handlers:::allEventClasses->jvm->getAllEventClasses->eventHandlers->allEventClasses->size->new->ArrayList<>->foreach->eh->Utils->getHandler->if->eventHandlers->add->return
MetadataRepository#getBinaryRepresentation()::: metadata repository get binary representation:::baos->new->ByteArrayOutputStream->daos->new->DataOutputStream->try->types->typeLibrary->getTypes->Collections->sort->MetadataDescriptor->write->daos->flush->return->baos->toByteArray->catch->throw->new->InternalError->finally
MetadataRepository#isEnabled(String)::: metadata repository is enabled:::return->settingsManager->isEnabled
MetadataRepository#setStaleMetadata()::: metadata repository set stale metadata:::
MetadataRepository#setOutput(String)::: metadata repository set output:::jvm->setOutput->unregisterUnloaded->if->typeLibrary->clearUnregistered->if->storeDescriptorInJVM
MetadataRepository#unregisterUnloaded()::: metadata repository unregister unloaded:::unloaded->jvm->getUnloadedEventClassCount->if->eventClasses->jvm->getAllEventClasses->knownIds->eventClasses->size->new->HashSet<>->foreach->knownIds->Type->getTypeId->add->foreach->typeLibrary->getTypes->if->if->knownIds->type->getId->contains->pe->if->pe->isJVM->pe->setRegistered
MetadataRepository#setUnregistered()::: metadata repository set unregistered:::
MetadataRepository#registerMirror(Class)::: metadata repository register mirror:::me->eventClass->getAnnotation->if->fullName->me->module->me->className->mirrors->put->return->throw->getName->new->InternalError
MetadataWriter#writeBinary(DataOutput)::: metadata writer write binary:::stringPool->new->HashSet<>->buildStringPool->lookup->stringPool->size->new->LinkedHashMap<>->index->poolSize->stringPool->size->writeInt->foreach->lookup->put->writeString->write
MetadataWriter#writeString(DataOutput, String)::: metadata writer write string:::if->out->writeByte->return->out->writeByte->length->s->length->writeInt->for->i
MetadataWriter#writeInt(DataOutput, int)::: metadata writer write int:::s->if->out->write->return->out->write->if->out->write->return->out->write->if->out->write->return->out->write->if->out->write->return->out->write
MetadataWriter#buildStringPool(Element, Set)::: metadata writer build string pool:::pool->add->foreach->pool->add->pool->add->foreach->buildStringPool
MetadataWriter#write(DataOutput, Element, HashMap)::: metadata writer write:::lookup->get->writeInt->size->writeInt->foreach->lookup->get->writeInt->lookup->get->writeInt->size->writeInt->foreach->write
MetadataWriter#makeTypeElement(Element, Type)::: metadata writer make type element:::element->root->newChild->element->type->getName->addAttribute->superType->type->getSuperType->if->element->addAttribute->if->type->isSimpleType->element->addAttribute->element->type->getId->addAttribute->if->foreach->getSettings->makeSettingElement->foreach->type->getFields->makeFieldElement->foreach->type->getAnnotationElements->makeAnnotation
MetadataWriter#makeSettingElement(Element, SettingDescriptor)::: metadata writer make setting element:::element->typeElement->newChild->element->s->getName->addAttribute->element->s->getTypeId->addAttribute->element->s->getDefaultValue->addAttribute->foreach->s->getAnnotationElements->makeAnnotation
MetadataWriter#makeFieldElement(Element, ValueDescriptor)::: metadata writer make field element:::element->typeElement->newChild->element->v->getName->addAttribute->element->v->getTypeId->addAttribute->if->v->isArray->element->addAttribute->if->PrivateAccess->getInstance->isConstantPool->element->addAttribute->foreach->v->getAnnotationElements->makeAnnotation
MetadataWriter#makeAnnotation(Element, AnnotationElement)::: metadata writer make annotation:::element->entity->newChild->element->annotation->getTypeId->addAttribute->values->annotation->getValues->index->foreach->annotation->getValueDescriptors->value->values->get->if->v->isArray->element->v->getName->addArrayAttribute->else->element->v->getName->addAttribute
OldObjectSample#emit(PlatformRecording)::: old object sample emit:::if->isEnabled->nanos->CutoffSetting->recording->getSettings->get->parseValueSafe->ticks->Utils->nanosToTicks->JVM->getJVM->WhiteBox->getWriteAllObjectSamples->emitOldObjectSamples
OldObjectSample#emit(List, Boolean)::: old object sample emit:::enabled->cutoffNanos->equals->foreach->if->r->getState->if->isEnabled->c->CutoffSetting->r->getSettings->get->parseValueSafe->Math->max->if->ticks->Utils->nanosToTicks->JVM->getJVM->WhiteBox->getWriteAllObjectSamples->emitOldObjectSamples
OldObjectSample#updateSettingPathToGcRoots(Map, Boolean)::: old object sample update setting path to gc roots:::if->s->put
OldObjectSample#createSettingsForSnapshot(PlatformRecording, Boolean)::: old object sample create settings for snapshot:::settings->recording->getSettings->new->HashMap<>->updateSettingPathToGcRoots->return
OldObjectSample#isEnabled(PlatformRecording)::: old object sample is enabled:::settings->r->getSettings->s->settings->get->return->equals
Options#setMaxChunkSize(long)::: options set max chunk size:::if->throw->new->IllegalArgumentException->jvm->setFileNotification
Options#getMaxChunkSize()::: options get max chunk size:::return
Options#setMemorySize(long)::: options set memory size:::jvm->setMemorySize
Options#getMemorySize()::: options get memory size:::return
Options#setThreadBufferSize(long)::: options set thread buffer size:::jvm->setThreadBufferSize
Options#getThreadBufferSize()::: options get thread buffer size:::return
Options#getGlobalBufferSize()::: options get global buffer size:::return
Options#setGlobalBufferCount(long)::: options set global buffer count:::jvm->setGlobalBufferCount
Options#getGlobalBufferCount()::: options get global buffer count:::return
Options#setGlobalBufferSize(long)::: options set global buffer size:::jvm->setGlobalBufferSize
Options#setDumpPath(SafePath)::: options set dump path:::
Options#getDumpPath()::: options get dump path:::return
Options#setStackDepth(Integer)::: options set stack depth:::jvm->setStackDepth
Options#getStackDepth()::: options get stack depth:::return
Options#setSampleThreads(Boolean)::: options set sample threads:::jvm->setSampleThreads
Options#getSampleThreads()::: options get sample threads:::return
Options#reset()::: options reset:::setMaxChunkSize->setMemorySize->setGlobalBufferSize->setGlobalBufferCount->setDumpPath->setSampleThreads->setStackDepth->setThreadBufferSize
Options#getWaitInterval()::: options get wait interval:::return
Options#ensureInitialized()::: options ensure initialized:::
PlatformEventType#stackTraceOffset(String, boolean)::: platform event type stack trace offset:::if->if->name->equals->return->if->name->equals->return->return
PlatformEventType#add(SettingDescriptor)::: platform event type add:::Objects->requireNonNull->settings->add
PlatformEventType#getSettings()::: platform event type get settings:::if->list->settings->size->new->ArrayList<>->foreach->if->Utils->s->getTypeId->isSettingVisible->list->add->return->return
PlatformEventType#getAllSettings()::: platform event type get all settings:::return
PlatformEventType#setHasStackTrace(boolean)::: platform event type set has stack trace:::
PlatformEventType#setHasDuration(boolean)::: platform event type set has duration:::
PlatformEventType#setHasCutoff(boolean)::: platform event type set has cutoff:::
PlatformEventType#setCutoff(long)::: platform event type set cutoff:::if->cutoffTicks->Utils->nanosToTicks->JVM->getJVM->getId->setCutoff
PlatformEventType#setHasPeriod(boolean)::: platform event type set has period:::
PlatformEventType#hasStackTrace()::: platform event type has stack trace:::return
PlatformEventType#hasDuration()::: platform event type has duration:::return
PlatformEventType#hasPeriod()::: platform event type has period:::return
PlatformEventType#hasCutoff()::: platform event type has cutoff:::return
PlatformEventType#isEnabled()::: platform event type is enabled:::return
PlatformEventType#isJVM()::: platform event type is m:::return
PlatformEventType#isJDK()::: platform event type is k:::return
PlatformEventType#setEnabled(boolean)::: platform event type set enabled:::updateCommitable->if->if->p->JVM->getJVM->getId->setMethodSamplingInterval->else->JVM->getJVM->getId->setEnabled
PlatformEventType#setPeriod(long, boolean, boolean)::: platform event type set period:::if->p->JVM->getJVM->getId->setMethodSamplingInterval
PlatformEventType#setStackTraceEnabled(boolean)::: platform event type set stack trace enabled:::if->JVM->getJVM->getId->setStackTraceEnabled
PlatformEventType#setThreshold(long)::: platform event type set threshold:::Utils->nanosToTicks->if->JVM->getJVM->getId->setThreshold
PlatformEventType#isEveryChunk()::: platform event type is every chunk:::return
PlatformEventType#getStackTraceEnabled()::: platform event type get stack trace enabled:::return
PlatformEventType#getThresholdTicks()::: platform event type get threshold ticks:::return
PlatformEventType#getPeriod()::: platform event type get period:::return
PlatformEventType#hasEventHook()::: platform event type has event hook:::return
PlatformEventType#setEventHook(boolean)::: platform event type set event hook:::
PlatformEventType#isBeginChunk()::: platform event type is begin chunk:::return
PlatformEventType#isEndChunk()::: platform event type is end chunk:::return
PlatformEventType#isInstrumented()::: platform event type is instrumented:::return
PlatformEventType#setInstrumented()::: platform event type set instrumented:::
PlatformEventType#markForInstrumentation(boolean)::: platform event type mark for instrumentation:::
PlatformEventType#isMarkedForInstrumentation()::: platform event type is marked for instrumentation:::return
PlatformEventType#setRegistered(boolean)::: platform event type set registered:::if->updateCommitable->logTag->isJVM->isJDK->if->Logger->getLogName->log->else->Logger->getLogName->log->if->MetadataRepository->getInstance->setUnregistered->return->return
PlatformEventType#updateCommitable()::: platform event type update commitable:::
PlatformEventType#isRegistered()::: platform event type is registered:::return
PlatformEventType#isCommitable()::: platform event type is commitable:::return
PlatformEventType#getStackTraceOffset()::: platform event type get stack trace offset:::return
PlatformRecorder#createTimer()::: platform recorder create timer:::try->result->new->CopyOnWriteArrayList<>->t->SecuritySupport->result->new->Timer->add->createThreadWitNoPermissions->t->start->t->join->return->result->get->catch->throw->e->getMessage->new->IllegalStateException->finally
PlatformRecorder#newRecording(Map)::: platform recorder new recording:::return->newRecording
PlatformRecorder#newTemporaryRecording()::: platform recorder new temporary recording:::if->Thread->holdsLock->throw->new->InternalError->return->new->HashMap<>->newRecording
PlatformRecorder#newRecording(Map, long)::: platform recorder new recording:::recording->new->PlatformRecording->if->settings->isEmpty->recording->setSettings->recordings->add->return
PlatformRecorder#finish(PlatformRecording)::: platform recorder finish:::if->recording->getState->recording->stop->recordings->remove
PlatformRecorder#getRecordings()::: platform recorder get recordings:::return->Collections->new->ArrayList<PlatformRecording>->unmodifiableList
PlatformRecorder#addListener(FlightRecorderListener)::: platform recorder add listener:::context->AccessController->getContext->sl->new->SecureRecorderListener->runInitialized->synchronized->FlightRecorder->isInitialized->changeListeners->add->if->sl->FlightRecorder->getFlightRecorder->recorderInitialized
PlatformRecorder#removeListener(FlightRecorderListener)::: platform recorder remove listener:::foreach->new->ArrayList<>->if->s->getChangeListener->changeListeners->remove->return->return
PlatformRecorder#getListeners()::: platform recorder get listeners:::return->new->ArrayList<>
PlatformRecorder#getTimer()::: platform recorder get timer:::return
PlatformRecorder#notifyRecorderInitialized(FlightRecorder)::: platform recorder notify recorder initialized:::Logger->log->foreach->getListeners->r->recorderInitialized
PlatformRecorder#destroy()::: platform recorder destroy:::try->timer->cancel->catch->Logger->log->finally->foreach->getRecordings->if->p->getState->try->p->stop->catch->Logger->p->getName->p->getId->log->finally->JDKEvents->remove->if->jvm->hasNativeJFR->if->jvm->isRecording->jvm->endRecording_->jvm->destroyNativeJFR->repository->clear
PlatformRecorder#start(PlatformRecording)::: platform recorder start:::now->Instant->now->recording->setStartTime->recording->updateTimer->duration->recording->getDuration->if->recording->now->plus->setStopTime->toDisk->recording->isToDisk->beginPhysical->foreach->getRecordings->if->s->getState->if->s->isToDisk->if->newChunk->if->repository->newChunk->MetadataRepository->getInstance->newChunk->getUnfishedFile->toString->setOutput->else->MetadataRepository->getInstance->setOutput->jvm->beginRecording_->recording->setState->updateSettings->writeMetaEvents->else->newChunk->if->repository->newChunk->RequestEngine->doChunkEnd->MetadataRepository->getInstance->newChunk->getUnfishedFile->toString->setOutput->recording->setState->updateSettings->writeMetaEvents->if->finishChunk->RequestEngine->doChunkBegin
PlatformRecorder#stop(PlatformRecording)::: platform recorder stop:::state->recording->getState->if->Utils->isAfter->throw->new->IllegalStateException->if->Utils->isBefore->throw->new->IllegalStateException->now->Instant->now->toDisk->endPhysical->foreach->getRecordings->rs->s->getState->if->if->s->isToDisk->OldObjectSample->emit->if->RequestEngine->doChunkEnd->if->recording->isToDisk->if->MetadataRepository->getInstance->setOutput->finishChunk->else->dumpMemoryToDestination->jvm->endRecording_->disableEvents->else->newChunk->RequestEngine->doChunkEnd->updateSettingsButIgnoreRecording->if->repository->newChunk->MetadataRepository->getInstance->newChunk->getUnfishedFile->toString->setOutput->else->MetadataRepository->getInstance->setOutput->writeMetaEvents->if->finishChunk->RequestEngine->doChunkBegin->recording->setState
PlatformRecorder#dumpMemoryToDestination(PlatformRecording)::: platform recorder dump memory to destination:::dest->recording->getDestination->if->MetadataRepository->getInstance->dest->getRealPathText->setOutput->recording->clearDestination
PlatformRecorder#disableEvents()::: platform recorder disable events:::MetadataRepository->getInstance->disableEvents
PlatformRecorder#updateSettings()::: platform recorder update settings:::updateSettingsButIgnoreRecording
PlatformRecorder#updateSettingsButIgnoreRecording(PlatformRecording)::: platform recorder update settings but ignore recording:::recordings->getRunningRecordings->list->recordings->size->new->ArrayList<>->foreach->if->list->r->getSettings->add->MetadataRepository->getInstance->setSettings
PlatformRecorder#rotateDisk()::: platform recorder rotate disk:::now->Instant->now->newChunk->repository->newChunk->RequestEngine->doChunkEnd->MetadataRepository->getInstance->newChunk->getUnfishedFile->toString->setOutput->writeMetaEvents->if->finishChunk->RequestEngine->doChunkBegin
PlatformRecorder#getRunningRecordings()::: platform recorder get running recordings:::runningRecordings->new->ArrayList<>->foreach->getRecordings->if->recording->getState->runningRecordings->add->return
PlatformRecorder#makeChunkList(Instant, Instant)::: platform recorder make chunk list:::chunkSet->new->HashSet<>->foreach->getRecordings->chunkSet->r->getChunks->addAll->if->chunkSet->size->chunks->chunkSet->size->new->ArrayList<>->foreach->if->rc->inInterval->chunks->add->Collections->sort->return->return->Collections->emptyList
PlatformRecorder#startDiskMonitor()::: platform recorder start disk monitor:::t->SecuritySupport->periodicTask->createThreadWitNoPermissions->SecuritySupport->setDaemonThread->t->start
PlatformRecorder#finishChunk(RepositoryChunk, Instant, PlatformRecording)::: platform recorder finish chunk:::chunk->finish->foreach->getRecordings->if->r->getState->r->appendChunk
PlatformRecorder#writeMetaEvents()::: platform recorder write meta events:::if->activeRecordingEvent->isEnabled->foreach->getRecordings->if->r->getState->r->shouldWriteMetadataEvent->event->new->ActiveRecordingEvent->r->getId->r->getName->p->r->getDestination->p->getRealPathText->d->r->getDuration->d->toMillis->age->r->getMaxAge->age->toMillis->size->r->getMaxSize->start->r->getStartTime->start->toEpochMilli->event->commit->if->activeSettingEvent->isEnabled->foreach->MetadataRepository->getInstance->getEventControls->ec->writeActiveSettingEvent
PlatformRecorder#periodicTask()::: platform recorder periodic task:::if->jvm->hasNativeJFR->return->while->synchronized->if->jvm->shouldRotateDisk->rotateDisk->minDelta->RequestEngine->doPeriodic->wait->Math->Options->getWaitInterval->min->takeNap
PlatformRecorder#takeNap(long)::: platform recorder take nap:::try->synchronized->wait->catch->e->printStackTrace->finally
PlatformRecorder#newCopy(PlatformRecording, boolean)::: platform recorder new copy:::newRec->new->Recording->copy->PrivateAccess->getInstance->getPlatformRecording->copy->r->getSettings->setSettings->copy->r->getMaxAge->setMaxAge->copy->r->getMaxSize->setMaxSize->copy->r->getDumpOnExit->setDumpOnExit->copy->r->getName->setName->copy->r->isToDisk->setToDisk->copy->r->getDuration->setInternalDuration->copy->r->getStartTime->setStartTime->copy->r->getStopTime->setStopTime->if->r->getState->return->if->r->getState->copy->r->getStartTime->scheduleStart->return->copy->r->getState->setState->foreach->r->getChunks->copy->add->if->r->getState->if->copy->r->getName->stop->else->if->r->getStopTime->stopTask->copy->createStopTask->copy->copy->createStopTask->setStopTask->getTimer->r->getStopTime->toEpochMilli->schedule->return
PlatformRecorder#fillWithRecordedData(PlatformRecording, Boolean)::: platform recorder fill with recorded data:::running->toDisk->foreach->if->r->getState->if->r->isToDisk->if->if->OldObjectSample->emit->rotateDisk->else->try->snapshot->newTemporaryRecording->snapshot->setToDisk->snapshot->setShouldWriteActiveRecordingEvent->snapshot->start->OldObjectSample->emit->snapshot->stop->fillWithDiskChunks->catch->finally->return->fillWithDiskChunks
PlatformRecorder#fillWithDiskChunks(PlatformRecording)::: platform recorder fill with disk chunks:::foreach->makeChunkList->target->add->target->setState->startTime->endTime->foreach->target->getChunks->if->c->getStartTime->isBefore->c->getStartTime->if->c->getEndTime->isAfter->c->getEndTime->now->Instant->now->if->if->target->setStartTime->target->setStopTime->target->Duration->between->setInternalDuration
PlatformRecording#start()::: platform recording start:::oldState->newState->synchronized->getState->if->Utils->isBefore->throw->new->IllegalStateException->if->startTask->cancel->recorder->start->Logger->options->new->StringJoiner->if->options->add->if->options->Utils->formatTimespan->add->if->options->Utils->formatBytesCompact->add->if->options->add->if->options->Utils->formatTimespan->add->if->options->destination->getRealPathText->add->optionText->options->toString->if->optionText->length->return->getName->getId->log->getState->notifyIfStateChanged
PlatformRecording#stop(String)::: platform recording stop:::oldState->newState->synchronized->getState->if->stopTask->cancel->recorder->stop->endText->Logger->getName->getId->log->Instant->now->getState->dest->getDestination->if->try->dumpStopped->Logger->getName->getId->dest->getRealPathText->log->notifyIfStateChanged->close->catch->finally->else->notifyIfStateChanged->return
PlatformRecording#scheduleStart(Duration)::: platform recording schedule start:::synchronized->ensureOkForSchedule->Instant->now->plus->now->LocalDateTime->now->plus->setState->createStartTask->recorder->getTimer->delay->toMillis->schedule->Logger->getName->getId->log
PlatformRecording#ensureOkForSchedule()::: platform recording ensure ok for schedule:::if->getState->throw->new->IllegalStateException
PlatformRecording#createStartTask()::: platform recording create start task:::return->new->TimerTask
PlatformRecording#scheduleStart(Instant)::: platform recording schedule start:::synchronized->ensureOkForSchedule->setState->createStartTask->recorder->getTimer->startTime->toEpochMilli->schedule
PlatformRecording#getSettings()::: platform recording get settings:::synchronized->return
PlatformRecording#getSize()::: platform recording get size:::return
PlatformRecording#getStopTime()::: platform recording get stop time:::synchronized->return
PlatformRecording#getStartTime()::: platform recording get start time:::synchronized->return
PlatformRecording#getMaxSize()::: platform recording get max size:::synchronized->return
PlatformRecording#getMaxAge()::: platform recording get max age:::synchronized->return
PlatformRecording#getName()::: platform recording get name:::synchronized->return
PlatformRecording#getState()::: platform recording get state:::synchronized->return
PlatformRecording#close()::: platform recording close:::oldState->newState->synchronized->getState->if->getState->if->startTask->cancel->recorder->finish->foreach->removed->chunks->clear->setState->Logger->getName->getId->log->getState->notifyIfStateChanged
PlatformRecording#newSnapshotClone(String, Boolean)::: platform recording new snapshot clone:::if->Thread->holdsLock->throw->new->InternalError->state->getState->if->throw->new->IOException->if->throw->new->IOException->if->clone->recorder->newTemporaryRecording->foreach->clone->add->return->clone->recorder->newTemporaryRecording->clone->setShouldWriteActiveRecordingEvent->clone->getName->setName->clone->setToDisk->if->isToDisk->clone->start->else->foreach->clone->add->clone->setState->clone->getStartTime->setStartTime->if->clone->getSettings->setSettings->clone->stop->else->synchronized->MetadataRepository->getInstance->clone->OldObjectSample->createSettingsForSnapshot->setSettings->clone->stop->return
PlatformRecording#isToDisk()::: platform recording is to disk:::synchronized->return
PlatformRecording#setMaxSize(long)::: platform recording set max size:::synchronized->if->getState->throw->new->IllegalStateException->trimToSize
PlatformRecording#setDestination(WriteableUserPath)::: platform recording set destination:::synchronized->checkSetDestination
PlatformRecording#checkSetDestination(WriteableUserPath)::: platform recording check set destination:::synchronized->if->Utils->getState->isState->throw->new->IllegalStateException
PlatformRecording#getDestination()::: platform recording get destination:::synchronized->return
PlatformRecording#setState(RecordingState)::: platform recording set state:::synchronized
PlatformRecording#setStartTime(Instant)::: platform recording set start time:::synchronized
PlatformRecording#setStopTime(Instant)::: platform recording set stop time:::synchronized
PlatformRecording#getId()::: platform recording get id:::synchronized->return
PlatformRecording#setName(String)::: platform recording set name:::synchronized->ensureNotClosed
PlatformRecording#ensureNotClosed()::: platform recording ensure not closed:::if->getState->throw->new->IllegalStateException
PlatformRecording#setDumpOnExit(boolean)::: platform recording set dump on exit:::synchronized
PlatformRecording#getDumpOnExit()::: platform recording get dump on exit:::synchronized->return
PlatformRecording#setToDisk(boolean)::: platform recording set to disk:::synchronized->if->Utils->getState->isState->else->throw->new->IllegalStateException
PlatformRecording#setSetting(String, String)::: platform recording set setting:::synchronized->put->if->getState->recorder->updateSettings
PlatformRecording#setSettings(Map)::: platform recording set settings:::setSettings
PlatformRecording#setSettings(Map, boolean)::: platform recording set settings:::if->Logger->shouldLog->ordered->new->TreeMap<>->Logger->getName->getId->log->foreach->ordered->entrySet->text->entry->getKey->entry->getValue->Logger->log->synchronized->new->LinkedHashMap<>->if->getState->recorder->updateSettings
PlatformRecording#notifyIfStateChanged(RecordingState, RecordingState)::: platform recording notify if state changed:::if->return->foreach->PlatformRecorder->getListeners->try->cl->getRecording->recordingStateChanged->catch->Logger->re->getMessage->log->finally
PlatformRecording#setRecording(Recording)::: platform recording set recording:::
PlatformRecording#getRecording()::: platform recording get recording:::return
PlatformRecording#toString()::: platform recording to string:::return->getName->getId->getState
PlatformRecording#setConfiguration(Configuration)::: platform recording set configuration:::c->getSettings->setSettings
PlatformRecording#setMaxAge(Duration)::: platform recording set max age:::synchronized->if->getState->throw->new->IllegalStateException->if->Instant->now->minus->trimToAge
PlatformRecording#appendChunk(RepositoryChunk)::: platform recording append chunk:::if->chunk->isFinished->throw->chunk->getStartTime->new->Error->synchronized->if->return->if->chunk->getEndTime->minus->trimToAge->chunks->addLast->added->trimToSize
PlatformRecording#trimToSize()::: platform recording trim to size:::if->return->while->chunks->size->c->chunks->removeFirst->removed
PlatformRecording#trimToAge(Instant)::: platform recording trim to age:::while->chunks->isEmpty->oldestChunk->chunks->peek->if->oldestChunk->getEndTime->isAfter->return->chunks->removeFirst->removed
PlatformRecording#add(RepositoryChunk)::: platform recording add:::chunks->add->added
PlatformRecording#added(RepositoryChunk)::: platform recording added:::c->use->c->getSize->Logger->c->toString->log
PlatformRecording#removed(RepositoryChunk)::: platform recording removed:::c->getSize->Logger->c->toString->log->c->release
PlatformRecording#getChunks()::: platform recording get chunks:::return
PlatformRecording#open(Instant, Instant)::: platform recording open:::synchronized->if->getState->throw->new->IOException->chunksToUse->new->ArrayList<RepositoryChunk>->foreach->if->chunk->isFinished->chunkStart->chunk->getStartTime->chunkEnd->chunk->getEndTime->if->chunkEnd->isBefore->if->chunkStart->isAfter->chunksToUse->add->if->chunksToUse->isEmpty->return->return->new->ChunkInputStream
PlatformRecording#getDuration()::: platform recording get duration:::synchronized->return
PlatformRecording#setInternalDuration(Duration)::: platform recording set internal duration:::
PlatformRecording#setDuration(Duration)::: platform recording set duration:::synchronized->if->Utils->getState->isState->throw->new->IllegalStateException->setInternalDuration->if->getState->updateTimer
PlatformRecording#updateTimer()::: platform recording update timer:::if->stopTask->cancel->if->getState->return->if->createStopTask->recorder->getTimer->startTime->plus->toEpochMilli->new->Date->schedule
PlatformRecording#createStopTask()::: platform recording create stop task:::return->new->TimerTask
PlatformRecording#newCopy(boolean)::: platform recording new copy:::return->recorder->newCopy
PlatformRecording#setStopTask(TimerTask)::: platform recording set stop task:::synchronized
PlatformRecording#clearDestination()::: platform recording clear destination:::
PlatformRecording#getNoDestinationDumpOnExitAccessControlContext()::: platform recording get no destination dump on exit access control context:::return
PlatformRecording#setShouldWriteActiveRecordingEvent(boolean)::: platform recording set should write active recording event:::
PlatformRecording#shouldWriteMetadataEvent()::: platform recording should write metadata event:::return
PlatformRecording#dump(WriteableUserPath)::: platform recording dump:::synchronized->try->p->newSnapshotClone->p->dumpStopped->catch->finally
PlatformRecording#dumpStopped(WriteableUserPath)::: platform recording dump stopped:::synchronized->userPath->try->cc->new->ChunksChannel->fc->FileChannel->userPath->getReal->open->cc->transferTo->fc->force->catch->finally->return->doPriviligedIO
PlatformRecording#filter(Instant, Instant, Long)::: platform recording filter:::synchronized->result->new->ArrayList<>->removeBefore->removeAfter->if->if->reduceFromBeginning->else->reduceFromEnd->size->foreach->r->getSize->r->use->foreach->r->release->chunks->clear->chunks->addAll
PlatformRecording#removeBefore(Instant, List)::: platform recording remove before:::if->return->result->input->size->new->ArrayList<>->foreach->if->r->getEndTime->isBefore->result->add->return
PlatformRecording#removeAfter(Instant, List)::: platform recording remove after:::if->return->result->input->size->new->ArrayList<>->foreach->if->r->getStartTime->isAfter->result->add->return
PlatformRecording#reduceFromBeginning(Long, List)::: platform recording reduce from beginning:::if->input->isEmpty->return->result->input->size->new->ArrayList<>->total->foreach->r->getSize->if->break->result->add->if->result->isEmpty->result->input->get->add->return
PlatformRecording#reduceFromEnd(Long, List)::: platform recording reduce from end:::Collections->reverse->result->reduceFromBeginning->Collections->reverse->return
PlatformRecording#setDumpOnExitDirectory(SafePath)::: platform recording set dump on exit directory:::
PlatformRecording#getDumpOnExitDirectory()::: platform recording get dump on exit directory:::return
PrivateAccess#getInstance()::: private access get instance:::if->new->FlightRecorderPermission->return
PrivateAccess#setPrivateAccess(PrivateAccess)::: private access set private access:::
PrivateAccess#getType(Object)::: private access get type:::
PrivateAccess#newConfiguration(String, String, String, String, Map, String)::: private access new configuration:::
PrivateAccess#newEventType(PlatformEventType)::: private access new event type:::
PrivateAccess#newAnnotation(Type, List, boolean)::: private access new annotation:::
PrivateAccess#newValueDescriptor(String, Type, List, int, boolean, String)::: private access new value descriptor:::
PrivateAccess#getPlatformRecording(Recording)::: private access get platform recording:::
PrivateAccess#getPlatformEventType(EventType)::: private access get platform event type:::
PrivateAccess#isConstantPool(ValueDescriptor)::: private access is constant pool:::
PrivateAccess#getFieldName(ValueDescriptor)::: private access get field name:::
PrivateAccess#newValueDescriptor(Class, String)::: private access new value descriptor:::
PrivateAccess#newSettingDescriptor(Type, String, String, List)::: private access new setting descriptor:::
PrivateAccess#setAnnotations(ValueDescriptor, List)::: private access set annotations:::
PrivateAccess#setAnnotations(SettingDescriptor, List)::: private access set annotations:::
PrivateAccess#isUnsigned(ValueDescriptor)::: private access is unsigned:::
PrivateAccess#getPlatformRecorder()::: private access get platform recorder:::
Repository#getRepository()::: repository get repository:::return
Repository#setBasePath(SafePath)::: repository set base path:::createRepository->try->SecuritySupport->delete->catch->Logger->log->finally
Repository#ensureRepository()::: repository ensure repository:::if->setBasePath
Repository#newChunk(Instant)::: repository new chunk:::try->if->SecuritySupport->existDirectory->createRepository->jvm->repository->toString->setRepositoryLocation->cleanupDirectories->add->return->new->RepositoryChunk->catch->errorMsg->String->e->getMessage->format->Logger->log->jvm->abort->throw->new->InternalError->finally
Repository#createRepository(SafePath)::: repository create repository:::canonicalBaseRepositoryPath->createRealBasePath->f->basename->REPO_DATE_FORMAT->LocalDateTime->now->format->JVM->getJVM->getPid->name->i->for->if->throw->new->Exception->canonicalRepositoryPath->SecuritySupport->toRealPath->return
Repository#createRealBasePath(SafePath)::: repository create real base path:::if->SecuritySupport->exists->if->SecuritySupport->isWritable->throw->safePath->toString->new->IOException->return->SecuritySupport->toRealPath->p->SecuritySupport->createDirectories->return->SecuritySupport->toRealPath
Repository#tryToUseAsRepository(SafePath)::: repository try to use as repository:::parent->path->toPath->getParent->if->return->try->try->SecuritySupport->createDirectories->catch->finally->if->SecuritySupport->exists->return->if->SecuritySupport->isDirectory->return->return->catch->return->finally
Repository#clear()::: repository clear:::foreach->try->SecuritySupport->clearDirectory->Logger->log->catch->Logger->e->getMessage->log->finally
Repository#getRepositoryPath()::: repository get repository path:::return
RepositoryChunk#findFileName(SafePath, String, String)::: repository chunk find file name:::p->directory->toPath->resolve->for->i->directory->toPath->System->currentTimeMillis->resolve->return->SecuritySupport->new->SafePath->toRealPath
RepositoryChunk#getUnfishedFile()::: repository chunk get unfished file:::return
RepositoryChunk#finish(Instant)::: repository chunk finish:::try->finishWithException->catch->Logger->e->getMessage->log->finally
RepositoryChunk#finishWithException(Instant)::: repository chunk finish with exception:::unFinishedRAF->close->finish->Logger->log
RepositoryChunk#finish(SafePath, SafePath)::: repository chunk finish:::Objects->requireNonNull->Objects->requireNonNull->SecuritySupport->delete->SecuritySupport->moveReplace->return->SecuritySupport->getFileSize
RepositoryChunk#getStartTime()::: repository chunk get start time:::return
RepositoryChunk#getEndTime()::: repository chunk get end time:::return
RepositoryChunk#delete(SafePath)::: repository chunk delete:::try->SecuritySupport->delete->Logger->log->catch->Logger->e->getMessage->log->if->SecuritySupport->deleteOnExit->finally
RepositoryChunk#destroy()::: repository chunk destroy:::if->isFinished->finish->if->delete->try->unFinishedRAF->close->catch->Logger->unFinishedFile->toString->e->getMessage->log->finally
RepositoryChunk#use()::: repository chunk use:::Logger->toString->log
RepositoryChunk#release()::: repository chunk release:::Logger->toString->log->if->destroy
RepositoryChunk#finalize()::: repository chunk finalize:::destroy->synchronized->if->if->destroy
RepositoryChunk#getSize()::: repository chunk get size:::return
RepositoryChunk#isFinished()::: repository chunk is finished:::return
RepositoryChunk#toString()::: repository chunk to string:::if->isFinished->return->file->toString->return->unFinishedFile->toString
RepositoryChunk#newChannel()::: repository chunk new channel:::if->isFinished->throw->new->IOException->return->SecuritySupport->newFileChannelToRead
RepositoryChunk#inInterval(Instant, Instant)::: repository chunk in interval:::if->getEndTime->isBefore->return->if->getStartTime->isAfter->return->return
RepositoryChunk#getFile()::: repository chunk get file:::return
RequestEngine.RequestHook#execute()::: request hook execute:::try->if->if->type->isJDK->hook->run->else->jvm->type->getId->JVM->counterTime->emitEvent->Logger->type->getLogName->log->else->executeSecure->catch->Logger->type->getLogName->log->finally
RequestEngine.RequestHook#executeSecure()::: request hook execute secure:::AccessController->new->PrivilegedAction<Void>->doPrivileged
RequestEngine#addHook(AccessControlContext, PlatformEventType, Runnable)::: request engine add hook:::Objects->requireNonNull->addHookInternal
RequestEngine#addHookInternal(AccessControlContext, PlatformEventType, Runnable)::: request engine add hook internal:::he->new->RequestHook->foreach->if->throw->new->IllegalArgumentException->setEventHook->entries->add->logHook
RequestEngine#addTrustedJDKHook(Class, Runnable)::: request engine add trusted hook:::if->eventClass->getClassLoader->throw->new->SecurityException->if->runnable->getClass->getClassLoader->throw->new->SecurityException->eType->MetadataRepository->getInstance->getEventType->pType->PrivateAccess->getInstance->getPlatformEventType->addHookInternal
RequestEngine#logHook(String, PlatformEventType)::: request engine log hook:::if->type->isJDK->type->isJVM->Logger->type->getLogName->log->else->Logger->type->getLogName->log
RequestEngine#removeHook(Runnable)::: request engine remove hook:::foreach->if->entries->remove->setEventHook->logHook->return->return
RequestEngine#addHooks(List)::: request engine add hooks:::addEntries->new->ArrayList<>->foreach->setEventHook->addEntries->add->logHook->entries->addAll
RequestEngine#doChunkEnd()::: request engine do chunk end:::x->isEndChunk->doChunk
RequestEngine#doChunkBegin()::: request engine do chunk begin:::x->isBeginChunk->doChunk
RequestEngine#doChunk(Predicate)::: request engine do chunk:::foreach->s->if->s->isEnabled->predicate->test->requestHook->execute
RequestEngine#doPeriodic()::: request engine do periodic:::return->run_requests
RequestEngine#run_requests(Collection)::: request engine run_requests:::last->now->System->currentTimeMillis->min->delta->if->if->return->foreach->left->es->if->es->isEnabled->es->isEveryChunk->continue->r_period->es->getPeriod->r_delta->if->he->execute->if->if->return
SecuritySupport.SecureRecorderListener#recordingStateChanged(Recording)::: secure recorder listener recording state changed:::AccessController->try->changeListener->recordingStateChanged->catch->Logger->changeListener->getClass->log->finally->return->doPrivileged
SecuritySupport.SecureRecorderListener#recorderInitialized(FlightRecorder)::: secure recorder listener recorder initialized:::AccessController->try->changeListener->recorderInitialized->catch->Logger->changeListener->getClass->log->finally->return->doPrivileged
SecuritySupport.SecureRecorderListener#getChangeListener()::: secure recorder listener get change listener:::return
SecuritySupport.DirectoryCleaner#visitFile(Path, BasicFileAttributes)::: directory cleaner visit file:::Files->delete->return
SecuritySupport.DirectoryCleaner#postVisitDirectory(Path, IOException)::: directory cleaner post visit directory:::if->throw->Files->delete->return
SecuritySupport.SafePath#toPath()::: safe path to path:::return
SecuritySupport.SafePath#toString()::: safe path to string:::return
SecuritySupport.RunnableWithCheckedException#run()::: runnable with checked exception run:::
SecuritySupport.CallableWithoutCheckException#call()::: callable without check exception call:::
SecuritySupport#doPrivilegedIOWithReturn(Callable)::: security support do privileged with return:::try->return->AccessController->new->PrivilegedExceptionAction<U>->doPrivileged->catch->t->e->getCause->if->throw->throw->t->getMessage->new->IOException->finally
SecuritySupport#doPriviligedIO(RunnableWithCheckedException)::: security support do priviliged o:::function->run->return->doPrivilegedIOWithReturn
SecuritySupport#doPrivileged(Runnable, Permission...)::: security support do privileged:::AccessController->new->PrivilegedAction<Void>->doPrivileged
SecuritySupport#doPrivileged(Runnable)::: security support do privileged:::AccessController->new->PrivilegedAction<Void>->doPrivileged
SecuritySupport#doPrivilegedWithReturn(CallableWithoutCheckException, Permission...)::: security support do privileged with return:::return->AccessController->new->PrivilegedAction<T>->doPrivileged
SecuritySupport#getPredefinedJFCFiles()::: security support get predefined files:::list->new->ArrayList<>->try->pathIterator->return->Files->JFC_DIRECTORY->toPath->newDirectoryStream->iterator->doPrivilegedIOWithReturn->while->pathIterator->hasNext->path->pathIterator->next->if->path->toString->endsWith->list->new->SafePath->add->catch->Logger->ioe->getMessage->log->finally->return
SecuritySupport#makeVisibleToJFR(Class)::: security support make visible to r:::classModule->clazz->getModule->Modules->addReads->if->clazz->getPackage->packageName->clazz->getPackage->getName->Modules->addExports->Modules->addOpens
SecuritySupport#addHandlerExport(Class):::Adds a qualified export of the internal.jdk.jfr.internal.handlers package (for EventHandler):::Modules->clazz->getModule->addExports
SecuritySupport#addEventsExport(Class)::: security support add events export:::Modules->clazz->getModule->addExports
SecuritySupport#addInstrumentExport(Class)::: security support add instrument export:::Modules->clazz->getModule->addExports
SecuritySupport#addReadEdge(Class)::: security support add read edge:::Modules->clazz->getModule->addReads
SecuritySupport#registerEvent(Class)::: security support register event:::MetadataRepository->getInstance->register->new->FlightRecorderPermission->doPrivileged
SecuritySupport#registerMirror(Class)::: security support register mirror:::MetadataRepository->getInstance->registerMirror->new->FlightRecorderPermission->doPrivileged
SecuritySupport#getBooleanProperty(String)::: security support get boolean property:::return->Boolean->getBoolean->new->PropertyPermission->doPrivilegedWithReturn
SecuritySupport#getPathInProperty(String, String)::: security support get path in property:::return->path->System->getProperty->if->return->file->new->File->new->File->return->file->getAbsolutePath->new->SafePath->new->PropertyPermission->doPrivilegedWithReturn
SecuritySupport#createRecorderThread(ThreadGroup, ClassLoader)::: security support create recorder thread:::thread->new->Thread->new->RuntimePermission->new->RuntimePermission->doPrivilegedWithReturn->thread->setContextClassLoader->new->RuntimePermission->new->RuntimePermission->doPrivileged->return
SecuritySupport#registerShutdownHook(Thread)::: security support register shutdown hook:::Runtime->getRuntime->addShutdownHook->new->RuntimePermission->doPrivileged
SecuritySupport#setUncaughtExceptionHandler(Thread, Thread.UncaughtExceptionHandler)::: security support set uncaught exception handler:::thread->setUncaughtExceptionHandler->new->RuntimePermission->doPrivileged
SecuritySupport#moveReplace(SafePath, SafePath)::: security support move replace:::Files->from->toPath->to->toPath->move->doPrivilegedIOWithReturn
SecuritySupport#clearDirectory(SafePath)::: security support clear directory:::Files->safePath->toPath->new->DirectoryCleaner->walkFileTree->doPriviligedIO
SecuritySupport#toRealPath(SafePath)::: security support to real path:::return->safePath->toPath->toRealPath->doPrivilegedIOWithReturn->new->SafePath
SecuritySupport#existDirectory(SafePath)::: security support exist directory:::return->Files->directory->toPath->exists->doPrivilegedIOWithReturn
SecuritySupport#createRandomAccessFile(SafePath)::: security support create random access file:::return->path->toPath->toFile->new->RandomAccessFile->doPrivilegedIOWithReturn
SecuritySupport#newFileInputStream(SafePath)::: security support new file input stream:::return->Files->safePath->toPath->newInputStream->doPrivilegedIOWithReturn
SecuritySupport#getFileSize(SafePath)::: security support get file size:::return->Files->safePath->toPath->size->doPrivilegedIOWithReturn
SecuritySupport#createDirectories(SafePath)::: security support create directories:::p->Files->safePath->toPath->createDirectories->doPrivilegedIOWithReturn->return->new->SafePath
SecuritySupport#exists(SafePath)::: security support exists:::return->Files->safePath->toPath->exists->doPrivilegedIOWithReturn
SecuritySupport#isDirectory(SafePath)::: security support is directory:::return->Files->safePath->toPath->isDirectory->doPrivilegedIOWithReturn
SecuritySupport#delete(SafePath)::: security support delete:::Files->localPath->toPath->delete->doPriviligedIO
SecuritySupport#isWritable(SafePath)::: security support is writable:::return->Files->safePath->toPath->isWritable->doPrivilegedIOWithReturn
SecuritySupport#deleteOnExit(SafePath)::: security support delete on exit:::safePath->toPath->toFile->deleteOnExit->doPrivileged
SecuritySupport#newFileChannelToRead(SafePath)::: security support new file channel to read:::return->FileChannel->safePath->toPath->open->doPrivilegedIOWithReturn
SecuritySupport#getResourceAsStream(String)::: security support get resource as stream:::return->getResourceAsStream->doPrivilegedIOWithReturn
SecuritySupport#newFileReader(SafePath)::: security support new file reader:::return->Files->safePath->toPath->newBufferedReader->doPrivilegedIOWithReturn
SecuritySupport#touch(SafePath)::: security support touch:::path->toPath->toFile->new->RandomAccessFile->close->doPriviligedIO
SecuritySupport#setAccessible(Method)::: security support set accessible:::method->setAccessible->new->ReflectPermission->doPrivileged
SecuritySupport#setAccessible(Field)::: security support set accessible:::field->setAccessible->new->ReflectPermission->doPrivileged
SecuritySupport#setAccessible(Constructor)::: security support set accessible:::constructor->setAccessible->new->ReflectPermission->doPrivileged
SecuritySupport#ensureClassIsInitialized(Class)::: security support ensure class is initialized:::unsafe->ensureClassInitialized
SecuritySupport#defineClass(String, byte[], ClassLoader)::: security support define class:::return->unsafe->defineClass
SecuritySupport#createThreadWitNoPermissions(String, Runnable)::: security support create thread wit no permissions:::return->new->Thread->new->PermissionArr->doPrivilegedWithReturn
SecuritySupport#setDaemonThread(Thread, boolean)::: security support set daemon thread:::t->setDaemon->new->RuntimePermission->doPrivileged
SecuritySupport#getAbsolutePath(SafePath)::: security support get absolute path:::return->path->toPath->toAbsolutePath->doPrivilegedIOWithReturn->new->SafePath
SettingsManager.InternalSetting#getValues(String)::: internal setting get values:::if->return->enabledMap->get->else->return->allMap->get
SettingsManager.InternalSetting#add(String, String)::: internal setting add:::if->equals->equals->addToMap->if->addToMap
SettingsManager.InternalSetting#addToMap(Map>, String, String)::: internal setting add to map:::values->map->get->if->new->HashSet<String>->map->put->values->add
SettingsManager.InternalSetting#getSettingsId()::: internal setting get settings id:::return
SettingsManager.InternalSetting#add(InternalSetting)::: internal setting add:::foreach->entrySet->foreach->entry->getValue->entry->getKey->add
SettingsManager.InternalSetting#isEnabled()::: internal setting is enabled:::return
SettingsManager.InternalSetting#toString()::: internal setting to string:::sb->new->StringBuilder->sb->append->sb->append->sb->enabledMap->toString->append->return->sb->toString
SettingsManager.InternalSetting#finish()::: internal setting finish:::if->disabledMap->new->HashMap<>->values->new->HashSet<>->values->add->disabledMap->put
SettingsManager#setSettings(List>)::: settings manager set settings:::createSettingsMap->eventControls->MetadataRepository->getInstance->getEventControls->if->JVM->getJVM->isRecording->foreach->ec->disable->else->if->Logger->shouldLog->Collections->x->getEventType->getName->y->getEventType->getName->compareTo->sort->foreach->setEventControl->if->JVM->getJVM->getAllowedToDoEventRetransforms->JVM->getJVM->getAllEventClasses->updateRetransform
SettingsManager#updateRetransform(List>)::: settings manager update retransform:::classes->new->ArrayList<>->foreach->eh->Utils->getHandler->if->eventType->eh->getPlatformEventType->if->eventType->isMarkedForInstrumentation->classes->add->eventType->markForInstrumentation->eventType->setInstrumented->if->classes->isEmpty->JVM->getJVM->classes->new->Class<?>Arr->toArray->retransformClasses
SettingsManager#createSettingsMap(List>)::: settings manager create settings map:::map->activeSettings->size->new->LinkedHashMap<>->foreach->foreach->makeInternalSettings->is->map->internal->getSettingsId->get->if->map->internal->getSettingsId->put->else->is->add->return
SettingsManager#makeInternalSettings(Map)::: settings manager make internal settings:::internals->new->LinkedHashMap<>->foreach->rec->entrySet->key->entry->getKey->value->entry->getValue->index->key->indexOf->if->key->length->eventName->key->substring->Utils->upgradeLegacyJDKEvent->s->internals->get->settingName->key->substring->trim->if->new->InternalSetting->internals->put->s->add->foreach->internals->values->s->finish->return->internals->values
SettingsManager#setEventControl(EventControl)::: settings manager set event control:::is->getInternalSetting->Logger->ec->getEventType->getLogName->log->foreach->ec->getEntries->values->settingName->entry->getKey->if->is->getValues->control->entry->getValue->if->control->apply->after->control->getLastValue->if->Logger->shouldLog->if->Utils->ec->getEventType->hasEventHook->isSettingVisible->if->values->size->sj->new->StringJoiner->foreach->sj->add->message->sj->toString->Logger->log->else->message->control->getLastValue->Logger->log->else->control->setDefault->if->Logger->shouldLog->message->control->getLastValue->Logger->log->ec->writeActiveSettingEvent->Logger->log
SettingsManager#getInternalSetting(EventControl)::: settings manager get internal setting:::name->ec->getEventType->getName->nameBased->availableSettings->get->idBased->availableSettings->ec->getSettingsId->get->if->return->if->return->if->return->mixed->nameBased->getSettingsId->new->InternalSetting->mixed->add->mixed->add->return
SettingsManager#toString()::: settings manager to string:::sb->new->StringBuilder->foreach->availableSettings->values->sb->enabled->toString->append->sb->append->return->sb->toString
SettingsManager#isEnabled(String)::: settings manager is enabled:::is->availableSettings->get->if->return->return->is->isEnabled
ShutdownHook#run()::: shutdown hook run:::new->Object->foreach->recorder->getRecordings->if->recording->getDumpOnExit->recording->getState->dump->recorder->destroy
ShutdownHook#dump(PlatformRecording)::: shutdown hook dump:::try->dest->recording->getDestination->if->makeDumpOnExitPath->recording->setDestination->if->recording->stop->catch->Logger->recording->getName->log->finally
ShutdownHook#makeDumpOnExitPath(PlatformRecording)::: shutdown hook make dump on exit path:::try->name->Utils->recording->getRecording->makeFilename->acc->recording->getNoDestinationDumpOnExitAccessControlContext->return->AccessController->new->PrivilegedExceptionAction<WriteableUserPath>->doPrivileged->catch->t->e->getCause->if->Logger->recording->getId->log->if->Logger->recording->getId->log->return->finally
ShutdownHook.ExceptionHandler#uncaughtException(Thread, Throwable)::: exception handler uncaught exception:::JVM->getJVM->uncaughtException
StringPool#addString(String)::: string pool add string:::return->sp->addString
StringPool#getCurrentEpoch()::: string pool get current epoch:::return->unsafe->getByte
StringPool.SimpleStringIdPool#reset()::: simple string id pool reset:::getCurrentEpoch->reset
StringPool.SimpleStringIdPool#reset(boolean)::: simple string id pool reset:::clear
StringPool.SimpleStringIdPool#addString(String)::: simple string id pool add string:::currentEpoch->getCurrentEpoch->if->lsid->get->if->return->lsid->longValue->else->reset->if->preCache->return->if->cache->size->reset->return->storeString
StringPool.SimpleStringIdPool#storeString(String)::: simple string id pool store string:::sid->getAndIncrement->put->currentEpoch->synchronized->JVM->addStringConstant->s->length->return
StringPool.SimpleStringIdPool#preCache(String)::: simple string id pool pre cache:::if->equals->return->if->equals->return->if->equals->return->if->equals->return->return
Type#isDefinedByJVM(long)::: type is defined by m:::return
Type#getTypeId(Class)::: type get type id:::type->Type->getKnownType->return->JVM->getJVM->getTypeId->type->getId
Type#getKnownTypes()::: type get known types:::return->knownTypes->keySet
Type#isValidJavaIdentifier(String)::: type is valid java identifier:::if->identifier->isEmpty->return->if->Character->identifier->charAt->isJavaIdentifierStart->return->for->i->identifier->length->return
Type#isValidJavaFieldType(String)::: type is valid java field type:::foreach->knownTypes->entrySet->clazz->entry->getValue->if->name->clazz->getName->equals->return->return
Type#getKnownType(String)::: type get known type:::foreach->knownTypes->keySet->if->type->getName->equals->return->return
Type#isKnownType(Class)::: type is known type:::if->type->isPrimitive->return->if->type->equals->type->equals->type->equals->return->return
Type#getKnownType(Class)::: type get known type:::foreach->knownTypes->entrySet->if->clazz->entry->getValue->equals->return->entry->getKey->return
Type#getName()::: type get name:::return
Type#getLogName()::: type get log name:::return->getName->getId
Type#getFields()::: type get fields:::if->trimToSize->Collections->unmodifiableList->return
Type#isSimpleType()::: type is simple type:::if->calculateSimpleType->return->simpleType->booleanValue
Type#calculateSimpleType()::: type calculate simple type:::if->fields->size->return->return
Type#isDefinedByJVM()::: type is defined by m:::return
Type#register(Class, Type)::: type register:::knownTypes->put->return
Type#add(ValueDescriptor)::: type add:::Objects->requireNonNull->fields->add
Type#trimFields()::: type trim fields:::getFields
Type#setAnnotations(List)::: type set annotations:::annos->setAnnotationElements
Type#getSuperType()::: type get super type:::return
Type#getId()::: type get id:::return
Type#isConstantPool()::: type is constant pool:::return
Type#getLabel()::: type get label:::return->annos->getLabel
Type#getAnnotationElements()::: type get annotation elements:::return->annos->getUnmodifiableAnnotationElements
Type#getAnnotation(Class)::: type get annotation:::return->annos->getAnnotation
Type#getDescription()::: type get description:::return->annos->getDescription
Type#hashCode()::: type hash code:::return->Long->hashCode
Type#equals(Object)::: type equals:::if->that->return->return
Type#compareTo(Type)::: type compare to:::return->Long->compare
Type#log(String, LogTag, LogLevel)::: type log:::if->Logger->shouldLog->isSimpleType->Logger->typeText->getLogName->log->foreach->getFields->array->v->isArray->Logger->v->getTypeName->v->getName->log->Logger->log->else->if->Logger->shouldLog->isSimpleType->Logger->typeText->getLogName->log
Type#typeText()::: type type text:::if->return->if->equals->return->if->equals->return->return
Type#toString()::: type to string:::sb->new->StringBuilder->sb->getLogName->append->if->getFields->isEmpty->sb->append->foreach->getFields->sb->td->getTypeName->td->getTypeId->td->getName->append->sb->append->return->sb->toString
Type#setRemove(boolean)::: type set remove:::
Type#getRemove()::: type get remove:::return
Type#setId(long)::: type set id:::
TypeLibrary#createStartTimeField()::: type library create start time field:::annos->createStandardAnnotations->annos->new->jdk.jfr.AnnotationElement->add->return->PrivateAccess->getInstance->newValueDescriptor
TypeLibrary#createStackTraceField()::: type library create stack trace field:::annos->new->ArrayList<>->createStandardAnnotations->return->PrivateAccess->getInstance->newValueDescriptor
TypeLibrary#createThreadField()::: type library create thread field:::annos->new->ArrayList<>->createStandardAnnotations->return->PrivateAccess->getInstance->newValueDescriptor
TypeLibrary#createDurationField()::: type library create duration field:::annos->new->ArrayList<>->createStandardAnnotations->annos->new->jdk.jfr.AnnotationElement->add->return->PrivateAccess->getInstance->newValueDescriptor
TypeLibrary#getInstance()::: type library get instance:::synchronized->if->jvmTypes->try->MetadataHandler->createTypes->Collections->Long->a->getId->b->getId->compare->sort->catch->throw->new->Error->finally->new->TypeLibrary->return
TypeLibrary#getTypes()::: type library get types:::return->types->values->new->ArrayList<>
TypeLibrary#createAnnotationType(Class)::: type library create annotation type:::if->shouldPersist->type->defineType->if->SecuritySupport->makeVisibleToJFR->foreach->a->getDeclaredMethods->type->PrivateAccess->getInstance->method->getReturnType->method->getName->newValueDescriptor->add->aes->new->ArrayList<>->foreach->a->getAnnotations->resolveRepeatedAnnotations->ae->createAnnotation->if->aes->add->aes->trimToSize->type->setAnnotations->return->getType->return
TypeLibrary#createAnnotation(Annotation)::: type library create annotation:::annotationType->annotation->annotationType->type->createAnnotationType->if->values->new->ArrayList<>->foreach->type->getFields->values->v->getName->invokeAnnotation->add->return->PrivateAccess->getInstance->annotation->annotationType->getClassLoader->newAnnotation->return
TypeLibrary#invokeAnnotation(Annotation, String)::: type library invoke annotation:::m->try->annotation->getClass->new->Class<?>Arr->getMethod->catch->throw->annotation->getClass->getName->new->InternalError->finally->SecuritySupport->setAccessible->try->return->m->new->ObjectArr->invoke->catch->throw->annotation->getClass->getName->new->InternalError->finally
TypeLibrary#shouldPersist(Class)::: type library should persist:::if->a->getAnnotation->return->return
TypeLibrary#isDefined(Class)::: type library is defined:::return->types->Type->getTypeId->containsKey
TypeLibrary#getType(Class)::: type library get type:::return->types->Type->getTypeId->get
TypeLibrary#defineType(Class, String, boolean)::: type library define type:::if->isDefined->name->clazz->getAnnotation->typeName->name->value->clazz->getName->id->Type->getTypeId->t->if->clazz->getClassLoader->new->PlatformEventType->else->new->Type->types->t->getId->put->return->return
TypeLibrary#createType(Class)::: type library create type:::return->Collections->emptyList->Collections->emptyList->createType
TypeLibrary#createType(Class, List, List)::: type library create type:::if->return->if->isAssignableFrom->return->if->equals->return->if->isDefined->return->getType->if->clazz->isPrimitive->return->defineType->if->clazz->isArray->throw->new->InternalError->superType->eventType->if->isAssignableFrom->if->isAssignableFrom->defineType->type->getType->if->addImplicitFields->addUserFields->type->trimFields->addAnnotations->if->clazz->getClassLoader->type->log->else->type->log->return
TypeLibrary#addAnnotations(Class, Type, List)::: type library add annotations:::aes->new->ArrayList<>->if->dynamicAnnotations->isEmpty->foreach->Utils->getAnnotations->ae->createAnnotation->if->aes->add->else->newTypes->new->ArrayList<>->aes->addAll->foreach->newTypes->PrivateAccess->getInstance->getType->add->addTypes->type->setAnnotations->aes->trimToSize
TypeLibrary#addUserFields(Class, Type, List)::: type library add user fields:::dynamicFieldSet->new->HashMap<>->foreach->dynamicFieldSet->dynamicField->getName->put->newTypes->new->ArrayList<>->foreach->Utils->getVisibleEventFields->vd->dynamicFieldSet->field->getName->get->if->if->vd->getTypeName->field->getType->getName->equals->throw->vd->getName->field->getName->vd->getName->new->InternalError->foreach->vd->getAnnotationElements->newTypes->PrivateAccess->getInstance->getType->add->newTypes->PrivateAccess->getInstance->getType->add->else->createField->if->type->add->addTypes
TypeLibrary#addImplicitFields(Type, boolean, boolean, boolean, boolean, boolean)::: type library add implicit fields:::createAnnotationType->createAnnotationType->createAnnotationType->defineType->addFields
TypeLibrary#addFields(Type, boolean, boolean, boolean, boolean, boolean)::: type library add fields:::type->add->if->type->add->if->type->add->if->type->add
TypeLibrary#createStandardAnnotations(String, String)::: type library create standard annotations:::annotationElements->new->ArrayList<>->annotationElements->new->jdk.jfr.AnnotationElement->add->if->annotationElements->new->jdk.jfr.AnnotationElement->add->return
TypeLibrary#createField(Field)::: type library create field:::mod->field->getModifiers->if->Modifier->isTransient->return->if->Modifier->isStatic->return->fieldType->field->getType->if->Type->isKnownType->return->constantPool->type->createType->fieldName->field->getName->name->field->getAnnotation->useName->if->name->value->ans->new->ArrayList<>->foreach->field->getAnnotations->resolveRepeatedAnnotations->ae->createAnnotation->if->ans->add->return->PrivateAccess->getInstance->newValueDescriptor
TypeLibrary#resolveRepeatedAnnotations(Annotation[])::: type library resolve repeated annotations:::annos->new->ArrayList<>->foreach->repeated->m->try->a->annotationType->getMethod->returnType->m->getReturnType->if->returnType->isArray->ct->returnType->getComponentType->if->isAssignableFrom->ct->getAnnotation->res->m->new->ObjectArr->invoke->if->res->getClass->isAssignableFrom->foreach->m->new->ObjectArr->invoke->annos->add->catch->finally->if->annos->add->return
TypeLibrary#clearUnregistered()::: type library clear unregistered:::Logger->log->registered->new->ArrayList<>->foreach->types->values->if->if->isRegistered->registered->add->t->getRemove->t->setRemove->visitReachable->removeIds->new->ArrayList<>->foreach->types->values->if->type->getRemove->Type->type->getId->isDefinedByJVM->removeIds->type->getId->add->if->Logger->shouldLog->Logger->type->getName->log->type->setRemove->foreach->types->remove->return->removeIds->isEmpty
TypeLibrary#addType(Type)::: type library add type:::Collections->singletonList->addTypes
TypeLibrary#addTypes(List)::: type library add types:::if->ts->isEmpty->types->t->getId->containsKey->types->t->getId->put->visitReachable
TypeLibrary#visitReachable(Collection, Predicate, Consumer):::Iterates all reachable types from a start collection:::typeQ->new->ArrayDeque<>->while->typeQ->isEmpty->type->typeQ->poll->if->p->test->c->accept->type->getAnnotationElements->visitAnnotations->foreach->type->getFields->typeQ->PrivateAccess->getInstance->getType->add->v->getAnnotationElements->visitAnnotations->if->pe->foreach->pe->getAllSettings->typeQ->PrivateAccess->getInstance->getType->add->s->getAnnotationElements->visitAnnotations
TypeLibrary#visitAnnotations(Queue, List)::: type library visit annotations:::aQ->new->ArrayDeque<>->visited->new->HashSet<>->while->aQ->isEmpty->ae->aQ->poll->if->visited->contains->ty->PrivateAccess->getInstance->getType->typeQ->add->visited->add->aQ->ae->getAnnotationElements->addAll
TypeLibrary#removeType(long)::: type library remove type:::types->remove
Utils#checkAccessFlightRecorder()::: utils check access flight recorder:::sm->System->getSecurityManager->if->sm->new->FlightRecorderPermission->checkPermission
Utils#checkRegisterPermission()::: utils check register permission:::sm->System->getSecurityManager->if->sm->new->FlightRecorderPermission->checkPermission
Utils#formatDataAmount(String, long)::: utils format data amount:::exp->Math->Math->abs->log->Math->log->unitPrefix->charAt->return->String->Math->pow->format
Utils#formatBytesCompact(long)::: utils format bytes compact:::if->return->String->valueOf->return->formatDataAmount
Utils#formatBits(long)::: utils format bits:::if->return->if->return->return->formatDataAmount
Utils#formatBytes(long)::: utils format bytes:::if->return->if->return->return->formatDataAmount
Utils#formatBytesPerSecond(long)::: utils format bytes per second:::if->return->return->formatDataAmount
Utils#formatBitsPerSecond(long)::: utils format bits per second:::if->return->return->formatDataAmount
Utils#formatTimespan(Duration, String)::: utils format timespan:::if->return->value->dValue->toNanos->result->foreach->TimespanUnit->values->amount->if->break->return->String->format
Utils#parseTimespanWithInfinity(String)::: utils parse timespan with infinity:::if->INFINITY->equals->return->return->parseTimespan
Utils#parseTimespan(String)::: utils parse timespan:::if->s->endsWith->return->Long->s->s->length->substring->trim->parseLong->if->s->endsWith->return->NANOSECONDS->Long->s->s->length->substring->trim->parseLong->convert->if->s->endsWith->return->NANOSECONDS->Long->s->s->length->substring->trim->parseLong->convert->if->s->endsWith->return->NANOSECONDS->Long->s->s->length->substring->trim->parseLong->convert->if->s->endsWith->return->NANOSECONDS->Long->s->s->length->substring->trim->parseLong->convert->if->s->endsWith->return->NANOSECONDS->Long->s->s->length->substring->trim->parseLong->convert->if->s->endsWith->return->NANOSECONDS->Long->s->s->length->substring->trim->parseLong->convert->try->Long->parseLong->catch->throw->new->NumberFormatException->finally->throw->new->NumberFormatException
Utils#getAnnotations(Class):::Return all annotations as they are visible in the source code:::annos->new->ArrayList<>->foreach->clazz->getAnnotations->annos->getAnnotation->addAll->return
Utils#getAnnotation(Annotation)::: utils get annotation:::annotated->a->annotationType->valueMethod->getValueMethod->if->returnType->valueMethod->getReturnType->if->returnType->isArray->candidate->returnType->getComponentType->r->candidate->getAnnotation->if->repeatClass->r->value->if->return->getAnnotationValues->annos->new->ArrayList<>->annos->add->return
Utils#isAfter(RecordingState, RecordingState)::: utils is after:::return->stateToTest->ordinal->b->ordinal
Utils#isBefore(RecordingState, RecordingState)::: utils is before:::return->stateToTest->ordinal->b->ordinal
Utils#isState(RecordingState, RecordingState...)::: utils is state:::foreach->if->return->return
Utils#getAnnotationValues(Annotation, Method)::: utils get annotation values:::try->return->Arrays->valueMethod->new->ObjectArr->invoke->asList->catch->return->new->ArrayList<>->finally
Utils#getValueMethod(Class)::: utils get value method:::try->return->annotated->new->Class<?>Arr->getMethod->catch->return->finally
Utils#touch(Path)::: utils touch:::raf->dumpFile->toFile->new->RandomAccessFile->raf->close
Utils#unboxType(Class)::: utils unbox type:::if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return
Utils#nanosToTicks(long)::: utils nanos to ticks:::return->JVM->getJVM->getTimeConversionFactor
Utils#getHandler(Class)::: utils get handler:::Utils->ensureValidEventSubclass->try->f->eventClass->getDeclaredField->SecuritySupport->setAccessible->return->f->get->catch->throw->new->InternalError->finally
Utils#setHandler(Class, EventHandler)::: utils set handler:::Utils->ensureValidEventSubclass->try->field->eventClass->getDeclaredField->SecuritySupport->setAccessible->field->set->catch->throw->new->InternalError->finally
Utils#sanitizeNullFreeStringMap(Map)::: utils sanitize null free string map:::map->settings->size->new->HashMap<>->foreach->settings->entrySet->key->e->getKey->if->throw->new->NullPointerException->value->e->getValue->if->throw->new->NullPointerException->map->put->return
Utils#sanitizeNullFreeList(List, Class)::: utils sanitize null free list:::sanitized->elements->size->new->ArrayList<>->foreach->if->throw->new->NullPointerException->if->element->getClass->throw->new->ClassCastException->sanitized->add->return
Utils#getVisibleEventFields(Class)::: utils get visible event fields:::Utils->ensureValidEventSubclass->fields->new->ArrayList<>->for->c->c->getSuperclass->return
Utils#ensureValidEventSubclass(Class)::: utils ensure valid event subclass:::if->isAssignableFrom->Modifier->eventClass->getModifiers->isAbstract->throw->new->IllegalArgumentException->if->isAssignableFrom->throw->getName->new->IllegalArgumentException
Utils#writeGeneratedASM(String, byte[])::: utils write generated m:::if->SecuritySupport->getBooleanProperty->if->try->try->fos->new->FileOutputStream->fos->write->catch->finally->try->fw->new->FileWriter->pw->new->PrintWriter->cr->new->ClassReader->CheckClassAdapter->verify->catch->finally->Logger->log->catch->Logger->log->finally
Utils#ensureInitialized(Class)::: utils ensure initialized:::SecuritySupport->ensureClassIsInitialized
Utils#makePrimitiveArray(String, List)::: utils make primitive array:::length->values->size->switch->ints->new->intArr->for->i->return->longs->new->longArr->for->i->return->floats->new->floatArr->for->i->return->doubles->new->doubleArr->for->i->return->shorts->new->shortArr->for->i->return->chars->new->charArr->for->i->return->bytes->new->byteArr->for->i->return->booleans->new->booleanArr->for->i->return->strings->new->StringArr->for->i->return->return
Utils#isSettingVisible(Control, boolean)::: utils is setting visible:::if->return->if->return->if->return->return
Utils#isSettingVisible(long, boolean)::: utils is setting visible:::if->ThresholdSetting->isType->return->if->PeriodSetting->isType->return->if->StackTraceSetting->isType->return->return
Utils#getValidType(Class, String)::: utils get valid type:::Objects->requireNonNull->if->type->isArray->type->getComponentType->if->type->isPrimitive->throw->new->IllegalArgumentException->knownType->Type->getKnownType->if->throw->type->getName->new->IllegalArgumentException->return
Utils#smallUnmodifiable(List)::: utils small unmodifiable:::if->list->isEmpty->return->Collections->emptyList->if->list->size->return->Collections->list->get->singletonList->return->Collections->unmodifiableList
Utils#upgradeLegacyJDKEvent(String)::: utils upgrade legacy event:::if->eventName->length->LEGACY_EVENT_NAME_PREFIX->length->return->if->eventName->startsWith->index->eventName->lastIndexOf->if->LEGACY_EVENT_NAME_PREFIX->length->return->eventName->substring->return
Utils#verifyMirror(Class, Class)::: utils verify mirror:::cMirror->Objects->requireNonNull->cReal->Objects->requireNonNull->while->mirrorFields->new->HashMap<>->if->foreach->cMirror->getDeclaredFields->if->f->getType->isSupportedType->mirrorFields->f->getName->put->foreach->cReal->getDeclaredFields->if->realField->getType->isSupportedType->fieldName->realField->getName->mirrorField->mirrorFields->get->if->throw->cReal->getName->new->InternalError->if->realField->getModifiers->mirrorField->getModifiers->throw->cMirror->getName->new->InternalError->mirrorFields->remove->if->mirrorFields->isEmpty->throw->cMirror->getName->mirrorFields->keySet->new->InternalError->if->cMirror->getSuperclass->cReal->getSuperclass
Utils#isSupportedType(Class)::: utils is supported type:::if->Modifier->type->getModifiers->isTransient->Modifier->type->getModifiers->isStatic->return->return->Type->type->getName->isValidJavaFieldType
Utils#makeFilename(Recording)::: utils make filename:::pid->JVM->getJVM->getPid->date->LocalDateTime->now->format->idText->Long->recording->getId->toString->return
WriteableUserPath#getPotentiallyMaliciousOriginal():::Returns a potentially malicious path where the user may have implemented their own version of Path:::return
WriteableUserPath#getRealPathText():::Returns a string representation of the real path.:::return
WriteableUserPath#getOriginalText():::Returns a string representation of the original path.:::return
WriteableUserPath#getReal():::Returns a potentially malicious path where the user may have implemented their own version of Path:::if->throw->new->InternalError->return
WriteableUserPath#doPriviligedIO(Callable)::: writeable user path do priviliged o:::try->AccessController->new->PrivilegedExceptionAction<Void>->doPrivileged->catch->throw->new->IOException->finally

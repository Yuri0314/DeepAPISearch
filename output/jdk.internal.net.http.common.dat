jdk.internal.net.http.common.BufferSupplier#get()->ByteBuffer:::Returns a buffer to read encrypted data off the socket.
jdk.internal.net.http.common.BufferSupplier#recycle(ByteBuffer)->void:::Returns a buffer to the pool.
jdk.internal.net.http.common.DebugLogger#getName()->String::: debug logger get name
jdk.internal.net.http.common.DebugLogger#on()->boolean::: debug logger on
jdk.internal.net.http.common.DebugLogger#levelEnabledFor(Level, Level, Level, System.Logger)->boolean::: debug logger level enabled for
jdk.internal.net.http.common.DebugLogger#isLoggable(Level)->boolean::: debug logger is loggable
jdk.internal.net.http.common.DebugLogger#log(Level, ResourceBundle, String, Object...)->void::: debug logger log
jdk.internal.net.http.common.DebugLogger#log(Level, ResourceBundle, String, Throwable)->void::: debug logger log
jdk.internal.net.http.common.DebugLogger#createHttpLogger(Supplier, Level, Level)->DebugLogger::: debug logger create http logger
jdk.internal.net.http.common.DebugLogger#createWebSocketLogger(Supplier, Level, Level)->DebugLogger::: debug logger create web socket logger
jdk.internal.net.http.common.DebugLogger#createHpackLogger(Supplier, Level, Level)->DebugLogger::: debug logger create hpack logger
jdk.internal.net.http.common.Demand#increase(long)->boolean:::Increases this demand by the specified positive value.
jdk.internal.net.http.common.Demand#increaseIfFulfilled()->boolean:::Increases this demand by 1 but only if it is fulfilled.
jdk.internal.net.http.common.Demand#decreaseAndGet(long)->long:::Tries to decrease this demand by the specified positive value
jdk.internal.net.http.common.Demand#tryDecrement()->boolean:::Tries to decrease this demand by 1.
jdk.internal.net.http.common.Demand#isFulfilled()->boolean::: demand is fulfilled
jdk.internal.net.http.common.Demand#reset()->void:::Resets this object to its initial state.
jdk.internal.net.http.common.Demand#get()->long:::Returns the current value of this demand.
jdk.internal.net.http.common.Demand#toString()->String::: demand to string
jdk.internal.net.http.common.FlowTube.TubeSubscriber#dropSubscription()->void:::Called when the flow is connected again, and the subscription is handed over to a new subscriber
jdk.internal.net.http.common.FlowTube.TubeSubscriber#supportsRecycling()->boolean::: tube subscriber supports recycling
jdk.internal.net.http.common.FlowTube#connectFlows(TubePublisher, TubeSubscriber)->void:::Connects the bidirectional flows to a write Publisher and a read Subscriber
jdk.internal.net.http.common.FlowTube#isFinished()->boolean:::Returns true if this flow was completed, either exceptionally or normally (EOF reached).
jdk.internal.net.http.common.FlowTube#asTubeSubscriber(Flow.Subscriber>)->TubeSubscriber:::Returns s if s is a TubeSubscriber, otherwise wraps it in a TubeSubscriber
jdk.internal.net.http.common.FlowTube#asTubePublisher(Flow.Publisher>)->TubePublisher:::Returns s if s is a TubePublisher, otherwise wraps it in a TubePublisher.
jdk.internal.net.http.common.FlowTube.AbstractTubePublisher.TubePublisherWrapper#subscribe(Flow.Subscriber>)->void::: tube publisher wrapper subscribe
jdk.internal.net.http.common.FlowTube.AbstractTubeSubscriber.TubeSubscriberWrapper#dropSubscription()->void::: tube subscriber wrapper drop subscription
jdk.internal.net.http.common.FlowTube.AbstractTubeSubscriber.TubeSubscriberWrapper#onSubscribe(Flow.Subscription)->void::: tube subscriber wrapper on subscribe
jdk.internal.net.http.common.FlowTube.AbstractTubeSubscriber.TubeSubscriberWrapper#onNext(List)->void::: tube subscriber wrapper on next
jdk.internal.net.http.common.FlowTube.AbstractTubeSubscriber.TubeSubscriberWrapper#onError(Throwable)->void::: tube subscriber wrapper on error
jdk.internal.net.http.common.FlowTube.AbstractTubeSubscriber.TubeSubscriberWrapper#onComplete()->void::: tube subscriber wrapper on complete
jdk.internal.net.http.common.HttpHeadersBuilder#structuralCopy()->HttpHeadersBuilder::: http headers builder structural copy
jdk.internal.net.http.common.HttpHeadersBuilder#addHeader(String, String)->void::: http headers builder add header
jdk.internal.net.http.common.HttpHeadersBuilder#setHeader(String, String)->void::: http headers builder set header
jdk.internal.net.http.common.HttpHeadersBuilder#clear()->void::: http headers builder clear
jdk.internal.net.http.common.HttpHeadersBuilder#map()->Map>::: http headers builder map
jdk.internal.net.http.common.HttpHeadersBuilder#build()->HttpHeaders::: http headers builder build
jdk.internal.net.http.common.HttpHeadersBuilder#toString()->String::: http headers builder to string
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getId()->byte[]::: immutable extended session get id
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getSessionContext()->SSLSessionContext::: immutable extended session get session context
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getCreationTime()->long::: immutable extended session get creation time
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getLastAccessedTime()->long::: immutable extended session get last accessed time
jdk.internal.net.http.common.ImmutableExtendedSSLSession#invalidate()->void::: immutable extended session invalidate
jdk.internal.net.http.common.ImmutableExtendedSSLSession#isValid()->boolean::: immutable extended session is valid
jdk.internal.net.http.common.ImmutableExtendedSSLSession#putValue(String, Object)->void::: immutable extended session put value
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getValue(String)->Object::: immutable extended session get value
jdk.internal.net.http.common.ImmutableExtendedSSLSession#removeValue(String)->void::: immutable extended session remove value
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getValueNames()->String[]::: immutable extended session get value names
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getPeerCertificates()->java.security.cert.Certificate[]::: immutable extended session get peer certificates
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getLocalCertificates()->java.security.cert.Certificate[]::: immutable extended session get local certificates
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getPeerCertificateChain()->javax.security.cert.X509Certificate[]::: immutable extended session get peer certificate chain
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getPeerPrincipal()->Principal::: immutable extended session get peer principal
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getLocalPrincipal()->Principal::: immutable extended session get local principal
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getCipherSuite()->String::: immutable extended session get cipher suite
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getProtocol()->String::: immutable extended session get protocol
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getPeerHost()->String::: immutable extended session get peer host
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getPeerPort()->int::: immutable extended session get peer port
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getPacketBufferSize()->int::: immutable extended session get packet buffer size
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getApplicationBufferSize()->int::: immutable extended session get application buffer size
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getLocalSupportedSignatureAlgorithms()->String[]::: immutable extended session get local supported signature algorithms
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getPeerSupportedSignatureAlgorithms()->String[]::: immutable extended session get peer supported signature algorithms
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getRequestedServerNames()->List::: immutable extended session get requested server names
jdk.internal.net.http.common.ImmutableExtendedSSLSession#getStatusResponses()->List::: immutable extended session get status responses
jdk.internal.net.http.common.ImmutableSSLSession#getId()->byte[]::: immutable session get id
jdk.internal.net.http.common.ImmutableSSLSession#getSessionContext()->SSLSessionContext::: immutable session get session context
jdk.internal.net.http.common.ImmutableSSLSession#getCreationTime()->long::: immutable session get creation time
jdk.internal.net.http.common.ImmutableSSLSession#getLastAccessedTime()->long::: immutable session get last accessed time
jdk.internal.net.http.common.ImmutableSSLSession#invalidate()->void::: immutable session invalidate
jdk.internal.net.http.common.ImmutableSSLSession#isValid()->boolean::: immutable session is valid
jdk.internal.net.http.common.ImmutableSSLSession#putValue(String, Object)->void::: immutable session put value
jdk.internal.net.http.common.ImmutableSSLSession#getValue(String)->Object::: immutable session get value
jdk.internal.net.http.common.ImmutableSSLSession#removeValue(String)->void::: immutable session remove value
jdk.internal.net.http.common.ImmutableSSLSession#getValueNames()->String[]::: immutable session get value names
jdk.internal.net.http.common.ImmutableSSLSession#getPeerCertificates()->java.security.cert.Certificate[]::: immutable session get peer certificates
jdk.internal.net.http.common.ImmutableSSLSession#getLocalCertificates()->java.security.cert.Certificate[]::: immutable session get local certificates
jdk.internal.net.http.common.ImmutableSSLSession#getPeerCertificateChain()->javax.security.cert.X509Certificate[]::: immutable session get peer certificate chain
jdk.internal.net.http.common.ImmutableSSLSession#getPeerPrincipal()->Principal::: immutable session get peer principal
jdk.internal.net.http.common.ImmutableSSLSession#getLocalPrincipal()->Principal::: immutable session get local principal
jdk.internal.net.http.common.ImmutableSSLSession#getCipherSuite()->String::: immutable session get cipher suite
jdk.internal.net.http.common.ImmutableSSLSession#getProtocol()->String::: immutable session get protocol
jdk.internal.net.http.common.ImmutableSSLSession#getPeerHost()->String::: immutable session get peer host
jdk.internal.net.http.common.ImmutableSSLSession#getPeerPort()->int::: immutable session get peer port
jdk.internal.net.http.common.ImmutableSSLSession#getPacketBufferSize()->int::: immutable session get packet buffer size
jdk.internal.net.http.common.ImmutableSSLSession#getApplicationBufferSize()->int::: immutable session get application buffer size
jdk.internal.net.http.common.Log#errors()->boolean::: log errors
jdk.internal.net.http.common.Log#requests()->boolean::: log requests
jdk.internal.net.http.common.Log#headers()->boolean::: log headers
jdk.internal.net.http.common.Log#trace()->boolean::: log trace
jdk.internal.net.http.common.Log#ssl()->boolean::: log ssl
jdk.internal.net.http.common.Log#frames()->boolean::: log frames
jdk.internal.net.http.common.Log#channel()->boolean::: log channel
jdk.internal.net.http.common.Log#logError(String, Object...)->void::: log log error
jdk.internal.net.http.common.Log#logError(Throwable)->void::: log log error
jdk.internal.net.http.common.Log#logSSL(String, Object...)->void::: log log l
jdk.internal.net.http.common.Log#logSSL(Supplier)->void::: log log l
jdk.internal.net.http.common.Log#logChannel(String, Object...)->void::: log log channel
jdk.internal.net.http.common.Log#logChannel(Supplier)->void::: log log channel
jdk.internal.net.http.common.Log#logTrace(String, Object...)->void::: log log trace
jdk.internal.net.http.common.Log#logRequest(String, Object...)->void::: log log request
jdk.internal.net.http.common.Log#logResponse(Supplier)->void::: log log response
jdk.internal.net.http.common.Log#logHeaders(String, Object...)->void::: log log headers
jdk.internal.net.http.common.Log#loggingFrame(Class)->boolean::: log logging frame
jdk.internal.net.http.common.Log#logFrames(Http2Frame, String)->void::: log log frames
jdk.internal.net.http.common.Log#logParams(SSLParameters)->void::: log log params
jdk.internal.net.http.common.Log#dumpHeaders(StringBuilder, String, HttpHeaders)->void::: log dump headers
jdk.internal.net.http.common.Logger#on()->boolean:::Tells whether this logger is on.
jdk.internal.net.http.common.Logger#log(String)->void:::Logs a message.
jdk.internal.net.http.common.Logger#log(Supplier)->void:::Logs a lazily supplied message.
jdk.internal.net.http.common.Logger#log(Object)->void:::Logs a message produced from the given object.
jdk.internal.net.http.common.Logger#log(String, Throwable)->void:::Logs a message associated with a given throwable.
jdk.internal.net.http.common.Logger#log(Supplier, Throwable)->void:::Logs a lazily supplied message associated with a given throwable.
jdk.internal.net.http.common.Logger#log(String, Object...)->void:::Logs a message with an optional list of parameters.
jdk.internal.net.http.common.MinimalFuture.ExceptionalSupplier#get()->U::: exceptional supplier get
jdk.internal.net.http.common.MinimalFuture#completedFuture(U)->MinimalFuture::: minimal future completed future
jdk.internal.net.http.common.MinimalFuture#failedFuture(Throwable)->CompletableFuture::: minimal future failed future
jdk.internal.net.http.common.MinimalFuture#supply(ExceptionalSupplier)->CompletableFuture::: minimal future supply
jdk.internal.net.http.common.MinimalFuture#newIncompleteFuture()->MinimalFuture::: minimal future new incomplete future
jdk.internal.net.http.common.MinimalFuture#obtrudeValue(T)->void::: minimal future obtrude value
jdk.internal.net.http.common.MinimalFuture#obtrudeException(Throwable)->void::: minimal future obtrude exception
jdk.internal.net.http.common.MinimalFuture#toString()->String::: minimal future to string
jdk.internal.net.http.common.MinimalFuture#of(CompletionStage)->MinimalFuture::: minimal future of
jdk.internal.net.http.common.OperationTrackers.Tracker#getOutstandingOperations()->long::: tracker get outstanding operations
jdk.internal.net.http.common.OperationTrackers.Tracker#getOutstandingHttpOperations()->long::: tracker get outstanding http operations
jdk.internal.net.http.common.OperationTrackers.Tracker#getOutstandingHttp2Streams()->long::: tracker get outstanding http2 streams
jdk.internal.net.http.common.OperationTrackers.Tracker#getOutstandingWebSocketOperations()->long::: tracker get outstanding web socket operations
jdk.internal.net.http.common.OperationTrackers.Tracker#isFacadeReferenced()->boolean::: tracker is facade referenced
jdk.internal.net.http.common.OperationTrackers.Tracker#getName()->String::: tracker get name
jdk.internal.net.http.common.OperationTrackers.Trackable#getOperationsTracker()->Tracker::: trackable get operations tracker
jdk.internal.net.http.common.OperationTrackers#getTracker(HttpClient)->Tracker:::Returns a tracker to track pending operations started on an HttpClient instance
jdk.internal.net.http.common.Pair#pair(T, U)->Pair::: pair pair
jdk.internal.net.http.common.Pair#toString()->String::: pair to string
jdk.internal.net.http.common.SequentialScheduler.DeferredCompleter#complete()->void:::Completes the task
jdk.internal.net.http.common.SequentialScheduler.RestartableTask#run(DeferredCompleter)->void:::The body of the task.
jdk.internal.net.http.common.SequentialScheduler.CompleteRestartableTask#run(DeferredCompleter)->void::: complete restartable task run
jdk.internal.net.http.common.SequentialScheduler.CompleteRestartableTask#run()->void:::The body of the task.
jdk.internal.net.http.common.SequentialScheduler.SynchronizedRestartableTask#run()->void::: synchronized restartable task run
jdk.internal.net.http.common.SequentialScheduler#runOrSchedule()->void:::Runs or schedules the task to be run.
jdk.internal.net.http.common.SequentialScheduler#runOrSchedule(Executor)->void:::Executes or schedules the task to be executed in the provided executor
jdk.internal.net.http.common.SequentialScheduler#isStopped()->boolean:::Tells whether, or not, this scheduler has been permanently stopped
jdk.internal.net.http.common.SequentialScheduler#stop()->void:::Stops this scheduler
jdk.internal.net.http.common.SequentialScheduler#synchronizedScheduler(Runnable)->SequentialScheduler:::Returns a new SequentialScheduler that executes the provided mainLoop from within a SynchronizedRestartableTask.
jdk.internal.net.http.common.SSLFlowDelegate#closeNotifyReceived()->boolean:::Returns true if the SSLFlowDelegate has detected a TLS close_notify from the server.
jdk.internal.net.http.common.SSLFlowDelegate#connect(Subscriber>, Subscriber>)->void:::Connects the read sink (downReader) to the SSLFlowDelegate Reader, and the write sink (downWriter) to the SSLFlowDelegate Writer
jdk.internal.net.http.common.SSLFlowDelegate#alpn()->CompletableFuture:::Returns a CompletableFuture<String> which completes after the initial handshake completes, and which contains the negotiated alpn.
jdk.internal.net.http.common.SSLFlowDelegate#monitor()->String::: flow delegate monitor
jdk.internal.net.http.common.SSLFlowDelegate#enterReadScheduling()->SchedulingAction::: flow delegate enter read scheduling
jdk.internal.net.http.common.SSLFlowDelegate.Reader#supportsRecycling()->boolean::: reader supports recycling
jdk.internal.net.http.common.SSLFlowDelegate.Reader#enterScheduling()->SchedulingAction::: reader enter scheduling
jdk.internal.net.http.common.SSLFlowDelegate.Reader#dbgString()->String::: reader dbg string
jdk.internal.net.http.common.SSLFlowDelegate.Reader#incoming(List, boolean)->void:::entry point for buffers delivered from upstream Subscriber
jdk.internal.net.http.common.SSLFlowDelegate.Reader#toString()->String::: reader to string
jdk.internal.net.http.common.SSLFlowDelegate.Reader#upstreamWindowUpdate(long, long)->long::: reader upstream window update
jdk.internal.net.http.common.SSLFlowDelegate.Reader#schedule()->void::: reader schedule
jdk.internal.net.http.common.SSLFlowDelegate.Reader#stop()->void::: reader stop
jdk.internal.net.http.common.SSLFlowDelegate.Reader#processData()->void::: reader process data
jdk.internal.net.http.common.SSLFlowDelegate.Reader#unwrapBuffer(ByteBuffer)->EngineResult::: reader unwrap buffer
jdk.internal.net.http.common.SSLFlowDelegate.Monitorable#getInfo()->String::: monitorable get info
jdk.internal.net.http.common.SSLFlowDelegate.Monitor.FinalMonitorable#getInfo()->String::: final monitorable get info
jdk.internal.net.http.common.SSLFlowDelegate.Monitor#addTarget(Monitorable)->void::: monitor add target
jdk.internal.net.http.common.SSLFlowDelegate.Monitor#removeTarget(Monitorable)->void::: monitor remove target
jdk.internal.net.http.common.SSLFlowDelegate.Monitor#add(Monitorable)->void::: monitor add
jdk.internal.net.http.common.SSLFlowDelegate.Monitor#remove(Monitorable)->void::: monitor remove
jdk.internal.net.http.common.SSLFlowDelegate.Monitor#run()->void::: monitor run
jdk.internal.net.http.common.SSLFlowDelegate.Writer.WriterDownstreamPusher#run()->void::: writer downstream pusher run
jdk.internal.net.http.common.SSLFlowDelegate.Writer#incoming(List, boolean)->void::: writer incoming
jdk.internal.net.http.common.SSLFlowDelegate.Writer#dbgString()->String::: writer dbg string
jdk.internal.net.http.common.SSLFlowDelegate.Writer#onSubscribe()->void::: writer on subscribe
jdk.internal.net.http.common.SSLFlowDelegate.Writer#schedule()->void::: writer schedule
jdk.internal.net.http.common.SSLFlowDelegate.Writer#stop()->void::: writer stop
jdk.internal.net.http.common.SSLFlowDelegate.Writer#closing()->boolean::: writer closing
jdk.internal.net.http.common.SSLFlowDelegate.Writer#upstreamWindowUpdate(long, long)->long::: writer upstream window update
jdk.internal.net.http.common.SSLFlowDelegate.Writer#triggerWrite()->void::: writer trigger write
jdk.internal.net.http.common.SSLFlowDelegate.Writer#wrapBuffers(ByteBuffer[])->EngineResult::: writer wrap buffers
jdk.internal.net.http.common.SSLFlowDelegate.Writer#toString()->String::: writer to string
jdk.internal.net.http.common.SSLFlowDelegate#trySetALPN()->boolean::: flow delegate try set n
jdk.internal.net.http.common.SSLFlowDelegate#doClosure(EngineResult)->EngineResult::: flow delegate do closure
jdk.internal.net.http.common.SSLFlowDelegate#upstreamReader()->Flow.Subscriber>:::Returns the upstream Flow.Subscriber of the reading (incoming) side
jdk.internal.net.http.common.SSLFlowDelegate#upstreamWriter()->Flow.Subscriber>:::Returns the upstream Flow.Subscriber of the writing (outgoing) side
jdk.internal.net.http.common.SSLFlowDelegate#resumeReader()->boolean::: flow delegate resume reader
jdk.internal.net.http.common.SSLFlowDelegate#resetReaderDemand()->void::: flow delegate reset reader demand
jdk.internal.net.http.common.SSLFlowDelegate.EngineResult#handshaking()->boolean::: engine result handshaking
jdk.internal.net.http.common.SSLFlowDelegate.EngineResult#needUnwrap()->boolean::: engine result need unwrap
jdk.internal.net.http.common.SSLFlowDelegate.EngineResult#bytesConsumed()->int::: engine result bytes consumed
jdk.internal.net.http.common.SSLFlowDelegate.EngineResult#bytesProduced()->int::: engine result bytes produced
jdk.internal.net.http.common.SSLFlowDelegate.EngineResult#handshakeStatus()->SSLEngineResult.HandshakeStatus::: engine result handshake status
jdk.internal.net.http.common.SSLFlowDelegate.EngineResult#status()->SSLEngineResult.Status::: engine result status
jdk.internal.net.http.common.SSLFlowDelegate#getNetBuffer()->ByteBuffer::: flow delegate get net buffer
jdk.internal.net.http.common.SSLFlowDelegate#getAppBuffer()->ByteBuffer::: flow delegate get app buffer
jdk.internal.net.http.common.SSLFlowDelegate#dbgString()->String::: flow delegate dbg string
jdk.internal.net.http.common.SSLTube.SSLTubeFlowDelegate#enterReadScheduling()->SchedulingAction::: tube flow delegate enter read scheduling
jdk.internal.net.http.common.SSLTube.SSLTubeFlowDelegate#connect(Flow.Subscriber>, Flow.Subscriber>)->void::: tube flow delegate connect
jdk.internal.net.http.common.SSLTube#getALPN()->CompletableFuture::: tube get n
jdk.internal.net.http.common.SSLTube#subscribe(Flow.Subscriber>)->void::: tube subscribe
jdk.internal.net.http.common.SSLTube#isFinished()->boolean:::Tells whether, or not, this FlowTube has finished receiving data.
jdk.internal.net.http.common.SSLTube.DelegateWrapper#dropSubscription()->void::: delegate wrapper drop subscription
jdk.internal.net.http.common.SSLTube.DelegateWrapper#onNext(List)->void::: delegate wrapper on next
jdk.internal.net.http.common.SSLTube.DelegateWrapper#onSubscribe(Flow.Subscription)->void::: delegate wrapper on subscribe
jdk.internal.net.http.common.SSLTube.DelegateWrapper#onError(Throwable)->void::: delegate wrapper on error
jdk.internal.net.http.common.SSLTube.DelegateWrapper#onComplete()->void::: delegate wrapper on complete
jdk.internal.net.http.common.SSLTube.DelegateWrapper#toString()->String::: delegate wrapper to string
jdk.internal.net.http.common.SSLTube.SSLSubscriberWrapper#toString()->String::: subscriber wrapper to string
jdk.internal.net.http.common.SSLTube.SSLSubscriberWrapper#setDelegate(Flow.Subscriber>)->void::: subscriber wrapper set delegate
jdk.internal.net.http.common.SSLTube.SSLSubscriberWrapper#processPendingSubscriber()->void::: subscriber wrapper process pending subscriber
jdk.internal.net.http.common.SSLTube.SSLSubscriberWrapper#dropSubscription()->void::: subscriber wrapper drop subscription
jdk.internal.net.http.common.SSLTube.SSLSubscriberWrapper#onSubscribe(Flow.Subscription)->void::: subscriber wrapper on subscribe
jdk.internal.net.http.common.SSLTube.SSLSubscriberWrapper#onNext(List)->void::: subscriber wrapper on next
jdk.internal.net.http.common.SSLTube.SSLSubscriberWrapper#onErrorImpl(Throwable)->void::: subscriber wrapper on error impl
jdk.internal.net.http.common.SSLTube.SSLSubscriberWrapper#onError(Throwable)->void::: subscriber wrapper on error
jdk.internal.net.http.common.SSLTube.SSLSubscriberWrapper#onComplete()->void::: subscriber wrapper on complete
jdk.internal.net.http.common.SSLTube#connectFlows(TubePublisher, TubeSubscriber)->void::: tube connect flows
jdk.internal.net.http.common.SSLTube.SSLSubscriptionWrapper#setSubscription(Flow.Subscription)->void::: subscription wrapper set subscription
jdk.internal.net.http.common.SSLTube.SSLSubscriptionWrapper#request(long)->void::: subscription wrapper request
jdk.internal.net.http.common.SSLTube.SSLSubscriptionWrapper#cancel()->void::: subscription wrapper cancel
jdk.internal.net.http.common.SSLTube#onSubscribe(Flow.Subscription)->void::: tube on subscribe
jdk.internal.net.http.common.SSLTube#onNext(List)->void::: tube on next
jdk.internal.net.http.common.SSLTube#onError(Throwable)->void::: tube on error
jdk.internal.net.http.common.SSLTube#onComplete()->void::: tube on complete
jdk.internal.net.http.common.SSLTube#toString()->String::: tube to string
jdk.internal.net.http.common.SSLTube#dbgString()->String::: tube dbg string
jdk.internal.net.http.common.SubscriberWrapper#subscribe(Subscriber>)->void::: subscriber wrapper subscribe
jdk.internal.net.http.common.SubscriberWrapper#incoming(List, boolean)->void:::Delivers data to be processed by this wrapper
jdk.internal.net.http.common.SubscriberWrapper#upstreamWindowUpdate(long, long)->long:::This method is called to determine the window size to use at any time
jdk.internal.net.http.common.SubscriberWrapper#onSubscribe()->void:::Override this if anything needs to be done after the upstream subscriber has subscribed
jdk.internal.net.http.common.SubscriberWrapper#enterScheduling()->SchedulingAction:::Override this if anything needs to be done before checking for error and processing the input queue.
jdk.internal.net.http.common.SubscriberWrapper#signalScheduling()->boolean::: subscriber wrapper signal scheduling
jdk.internal.net.http.common.SubscriberWrapper#outgoing(ByteBuffer, boolean)->void:::Delivers buffers of data downstream
jdk.internal.net.http.common.SubscriberWrapper#closing()->boolean:::Sometime it might be necessary to complete the downstream subscriber before the upstream completes
jdk.internal.net.http.common.SubscriberWrapper#outgoing(List, boolean)->void::: subscriber wrapper outgoing
jdk.internal.net.http.common.SubscriberWrapper#completion()->CompletableFuture:::Returns a CompletableFuture which completes when this wrapper completes
jdk.internal.net.http.common.SubscriberWrapper.DownstreamPusher#run()->void::: downstream pusher run
jdk.internal.net.http.common.SubscriberWrapper#upstreamWindowUpdate()->void::: subscriber wrapper upstream window update
jdk.internal.net.http.common.SubscriberWrapper#onSubscribe(Flow.Subscription)->void::: subscriber wrapper on subscribe
jdk.internal.net.http.common.SubscriberWrapper#onNext(List)->void::: subscriber wrapper on next
jdk.internal.net.http.common.SubscriberWrapper#requestMore()->void::: subscriber wrapper request more
jdk.internal.net.http.common.SubscriberWrapper#upstreamWindow()->long::: subscriber wrapper upstream window
jdk.internal.net.http.common.SubscriberWrapper#onError(Throwable)->void::: subscriber wrapper on error
jdk.internal.net.http.common.SubscriberWrapper#errorCommon(Throwable)->boolean::: subscriber wrapper error common
jdk.internal.net.http.common.SubscriberWrapper#close()->void::: subscriber wrapper close
jdk.internal.net.http.common.SubscriberWrapper#close(Throwable)->void::: subscriber wrapper close
jdk.internal.net.http.common.SubscriberWrapper#onComplete()->void::: subscriber wrapper on complete
jdk.internal.net.http.common.SubscriberWrapper#addData(ByteBuffer)->void:::Adds the given data to the input queue.
jdk.internal.net.http.common.SubscriberWrapper#checkCompletion()->void::: subscriber wrapper check completion
jdk.internal.net.http.common.SubscriberWrapper#downstreamCompletion()->void::: subscriber wrapper downstream completion
jdk.internal.net.http.common.SubscriberWrapper#resetDownstreamDemand()->void::: subscriber wrapper reset downstream demand
jdk.internal.net.http.common.SubscriberWrapper#toString()->String::: subscriber wrapper to string
jdk.internal.net.http.common.SubscriberWrapper#dbgString()->String::: subscriber wrapper dbg string
jdk.internal.net.http.common.SubscriptionBase#request(long)->void::: subscription base request
jdk.internal.net.http.common.SubscriptionBase#toString()->String::: subscription base to string
jdk.internal.net.http.common.SubscriptionBase#tryDecrement()->boolean:::Returns true if the window was reduced by 1
jdk.internal.net.http.common.SubscriptionBase#window()->long::: subscription base window
jdk.internal.net.http.common.SubscriptionBase#cancel()->void::: subscription base cancel
jdk.internal.net.http.common.Utils#wrapForDebug(Logger, String, CompletableFuture)->CompletableFuture::: utils wrap for debug
jdk.internal.net.http.common.Utils#proxyHasDisabledSchemes(boolean)->boolean::: utils proxy has disabled schemes
jdk.internal.net.http.common.Utils#newIAE(String, Object...)->IllegalArgumentException::: utils new e
jdk.internal.net.http.common.Utils#getBuffer()->ByteBuffer::: utils get buffer
jdk.internal.net.http.common.Utils#getCompletionCause(Throwable)->Throwable::: utils get completion cause
jdk.internal.net.http.common.Utils#getIOException(Throwable)->IOException::: utils get exception
jdk.internal.net.http.common.Utils#wrapWithExtraDetail(Throwable, Supplier)->Throwable:::Adds a more specific exception detail message, based on the given exception type and the message supplier
jdk.internal.net.http.common.Utils#permissionForProxy(InetSocketAddress)->URLPermission:::Returns the security permissions required to connect to the proxy, or null if none is required or applicable.
jdk.internal.net.http.common.Utils#permissionForServer(URI, String, Stream)->URLPermission:::Returns the security permission required for the given details.
jdk.internal.net.http.common.Utils#isValidName(String)->boolean::: utils is valid name
jdk.internal.net.http.common.Utils.ServerName#getName()->String::: server name get name
jdk.internal.net.http.common.Utils.ServerName#isLiteral()->boolean::: server name is literal
jdk.internal.net.http.common.Utils#getServerName(InetSocketAddress)->ServerName:::Analyse the given address and determine if it is literal or not, returning the address in String form.
jdk.internal.net.http.common.Utils#isValidValue(String)->boolean::: utils is valid value
jdk.internal.net.http.common.Utils#getIntegerNetProperty(String, int)->int::: utils get integer net property
jdk.internal.net.http.common.Utils#getNetProperty(String)->String::: utils get net property
jdk.internal.net.http.common.Utils#getBooleanProperty(String, boolean)->boolean::: utils get boolean property
jdk.internal.net.http.common.Utils#getProperty(String)->String::: utils get property
jdk.internal.net.http.common.Utils#getIntegerProperty(String, int)->int::: utils get integer property
jdk.internal.net.http.common.Utils#copySSLParameters(SSLParameters)->SSLParameters::: utils copy parameters
jdk.internal.net.http.common.Utils#flipToMark(ByteBuffer, int)->void:::Set limit to position, and position to mark.
jdk.internal.net.http.common.Utils#stackTrace(Throwable)->String::: utils stack trace
jdk.internal.net.http.common.Utils#copy(ByteBuffer, ByteBuffer)->int:::Copies as much of src to dst as possible
jdk.internal.net.http.common.Utils#accumulateBuffers(List, List)->long:::Adds the data from buffersToAdd to currentList
jdk.internal.net.http.common.Utils#copy(ByteBuffer)->ByteBuffer::: utils copy
jdk.internal.net.http.common.Utils#copyAligned(ByteBuffer)->ByteBuffer::: utils copy aligned
jdk.internal.net.http.common.Utils#dump(Object...)->String::: utils dump
jdk.internal.net.http.common.Utils#stringOf(Collection)->String::: utils string of
jdk.internal.net.http.common.Utils#remaining(ByteBuffer[])->long::: utils remaining
jdk.internal.net.http.common.Utils#hasRemaining(List)->boolean::: utils has remaining
jdk.internal.net.http.common.Utils#remaining(List)->long::: utils remaining
jdk.internal.net.http.common.Utils#remaining(List, int)->int::: utils remaining
jdk.internal.net.http.common.Utils#remaining(ByteBuffer[], int)->int::: utils remaining
jdk.internal.net.http.common.Utils#close(Closeable...)->void::: utils close
jdk.internal.net.http.common.Utils#sliceWithLimitedCapacity(ByteBuffer, int)->ByteBuffer:::Returns a slice of size amount from the given buffer
jdk.internal.net.http.common.Utils#charsetFrom(HttpHeaders)->Charset:::Get the Charset from the Content-encoding header
jdk.internal.net.http.common.Utils#unchecked(IOException)->UncheckedIOException::: utils unchecked
jdk.internal.net.http.common.Utils#getDebugLogger(Supplier)->Logger:::Get a logger for debug HTTP traces
jdk.internal.net.http.common.Utils#getDebugLogger(Supplier, Level)->Logger:::Get a logger for debug HTTP traces.The logger should only be used with levels whose severity is <= DEBUG
jdk.internal.net.http.common.Utils#getDebugLogger(Supplier, boolean)->Logger:::Get a logger for debug HTTP traces.The logger should only be used with levels whose severity is <= DEBUG
jdk.internal.net.http.common.Utils#getHpackLogger(Supplier, Level)->Logger:::Get a logger for debug HPACK traces.The logger should only be used with levels whose severity is <= DEBUG
jdk.internal.net.http.common.Utils#getHpackLogger(Supplier, boolean)->Logger:::Get a logger for debug HPACK traces.The logger should only be used with levels whose severity is <= DEBUG
jdk.internal.net.http.common.Utils#getWebSocketLogger(Supplier, Level)->Logger:::Get a logger for debug WebSocket traces.The logger should only be used with levels whose severity is <= DEBUG
jdk.internal.net.http.common.Utils#getWebSocketLogger(Supplier, boolean)->Logger:::Get a logger for debug WebSocket traces.The logger should only be used with levels whose severity is <= DEBUG
jdk.internal.net.http.common.Utils#immutableSession(SSLSession)->SSLSession:::SSLSessions returned to user are wrapped in an immutable object
jdk.internal.net.http.common.Utils#isHostnameVerificationDisabled()->boolean:::Enabled by default
jdk.internal.net.http.common.Utils#resolveAddress(InetSocketAddress)->InetSocketAddress::: utils resolve address
jdk.internal.net.http.common.Utils#toConnectException(Throwable)->Throwable::: utils to connect exception
jdk.internal.net.http.common.Utils#pow2Size(int)->int:::Returns the smallest (closest to zero) positive number m (which is also a power of 2) such that n <= m
jdk.internal.net.http.common.Utils#encode(String)->String::: utils encode

AdaptableX509CertSelector#setValidityPeriod(Date, Date):::Sets the criterion of the X509Certificate validity period:::
AdaptableX509CertSelector#setSubjectKeyIdentifier(byte[]):::This selector overrides the subjectKeyIdentifier matching rules of X509CertSelector, so it throws IllegalArgumentException if this method is ever called.:::throw->new->IllegalArgumentException
AdaptableX509CertSelector#setSerialNumber(BigInteger):::This selector overrides the serialNumber matching rules of X509CertSelector, so it throws IllegalArgumentException if this method is ever called.:::throw->new->IllegalArgumentException
AdaptableX509CertSelector#setSkiAndSerialNumber(AuthorityKeyIdentifierExtension):::Sets the subjectKeyIdentifier and serialNumber criteria from the authority key identifier extension:::if->ext->getEncodedKeyIdentifier->asn->ext->get->if->asn->getNumber
AdaptableX509CertSelector#match(Certificate):::Decides whether a Certificate should be selected:::xcert->if->matchSubjectKeyID->return->version->xcert->getVersion->if->if->serial->xcert->getSerialNumber->equals->return->if->if->try->xcert->checkValidity->catch->return->finally->if->try->xcert->checkValidity->catch->return->finally->if->super->match->return->return
AdjacencyList#iterator():::Gets an Iterator to iterate over the set of BuildSteps in build-order:::return->Collections->unmodifiableList->iterator
AdjacencyList#toString():::Prints out a string representation of this AdjacencyList.:::sb->new->StringBuilder->i->foreach->sb->append->append->append->foreach->sb->step->toString->append->append->sb->append->return->sb->toString
AlgorithmChecker#trySetTrustAnchor(TrustAnchor):::Try to set the trust anchor of the checker:::if->if->throw->new->IllegalArgumentException->if->anchor->getTrustedCert->anchor->getTrustedCert->getPublicKey->anchor->getTrustedCert->checkFingerprint->if->debug->println->else->anchor->getCAPublicKey
AlgorithmChecker#check(PublicKey, X509CRL, String):::Check the signature algorithm with the specified public key.:::x509CRLImpl->try->X509CRLImpl->toImpl->catch->throw->new->CertPathValidatorException->finally->algorithmId->x509CRLImpl->getSigAlgId->check
AlgorithmChecker#check(PublicKey, AlgorithmId, String):::Check the signature algorithm with the specified public key.:::sigAlgName->algorithmId->getName->sigAlgParams->algorithmId->getParameters->certPathDefaultConstraints->new->ConstraintsParameters->permits
BasicChecker#init(boolean):::Initializes the internal state of the checker from parameters specified in the constructor.:::if->if->PKIX->isDSAPublicKeyWithoutParams->throw->new->CertPathValidatorException->else->throw->new->CertPathValidatorException
BasicChecker#check(Certificate, Collection):::Performs the signature, validity, and subject/issuer name chaining checks on the certificate using its internal state:::currCert->if->verifyValidity->verifyNameChaining->verifySignature->updateState
BasicChecker#makeInheritedParamsKey(PublicKey, PublicKey):::Internal method to create a new key with inherited key parameters.:::if->throw->new->CertPathValidatorException->params->getParams->if->throw->new->CertPathValidatorException->try->y->getY->kf->KeyFactory->getInstance->ks->params->getP->params->getQ->params->getG->new->DSAPublicKeySpec->return->kf->generatePublic->catch->throw->e->getMessage->new->CertPathValidatorException->finally
BasicChecker#getPublicKey():::return the public key associated with the last certificate processed:::return
Builder#getMatchingCerts(State, List):::Retrieves certificates from the list of certStores using the buildParams and the currentState as a filter:::
Builder#verifyCert(X509Certificate, State, List):::Verifies the cert against the currentState, using the certPathList generated thus far to help with loop detection:::
Builder#isPathCompleted(X509Certificate):::Verifies whether the input certificate completes the path:::
Builder#addCertToPath(X509Certificate, LinkedList):::Adds the certificate to the certPathList:::
Builder#removeFinalCertFromPath(LinkedList):::Removes final certificate from the certPathList:::
Builder#distance(GeneralNameInterface, GeneralNameInterface, int):::get distance of one GeneralName from another:::switch->base->constrains->if->debug->println->return->if->debug->println->return->return->break->break->return->return->test->subtreeDepth->base->subtreeDepth
Builder#hops(GeneralNameInterface, GeneralNameInterface, int):::get hop distance of one GeneralName from another in links where the names need not have an ancestor/descendant relationship:::baseRtest->base->constrains->switch->if->debug->println->return->break->return->return->test->subtreeDepth->base->subtreeDepth->return->test->subtreeDepth->base->subtreeDepth->return->if->base->getType->if->debug->println->return->baseName->testName->commonName->baseName->commonAncestor->if->if->debug->println->return->else->commonDistance->commonName->subtreeDepth->baseDistance->baseName->subtreeDepth->testDistance->testName->subtreeDepth->return
Builder#targetDistance(NameConstraintsExtension, X509Certificate, GeneralNameInterface):::Determine how close a given certificate gets you toward a given target.:::if->constraints->verify->throw->new->IOException->certImpl->try->X509CertImpl->toImpl->catch->throw->new->IOException->finally->subject->X500Name->certImpl->getSubjectX500Principal->asX500Name->if->subject->equals->return->altNameExt->certImpl->getSubjectAlternativeNameExtension->if->altNames->altNameExt->get->if->for->j->n->altNames->size->ncExt->certImpl->getNameConstraintsExtension->if->return->if->constraints->merge->else->ncExt->clone->if->debug->String->valueOf->println->permitted->constraints->get->excluded->constraints->get->if->permitted->reduce->if->debug->println->if->constraints->verify->throw->new->IOException->if->return->for->i->n->permitted->size->return
Builder#getMatchingPolicies():::This method can be used as an optimization to filter out certificates that do not have policies which are valid:::if->initialPolicies->buildParams->initialPolicies->if->initialPolicies->isEmpty->initialPolicies->contains->buildParams->policyMappingInhibited->new->HashSet<>->matchingPolicies->add->else->Collections->emptySet->return
Builder#addMatchingCerts(X509CertSelector, Collection, Collection, boolean):::Search the specified CertStores and add all certificates matching selector to resultCerts:::targetCert->selector->getCertificate->if->if->selector->match->X509CertImpl->buildParams->sigProvider->isSelfSigned->if->debug->Debug->targetCert->getSerialNumber->toHexString->targetCert->getSubjectX500Principal->targetCert->getIssuerX500Principal->println->return->resultCerts->add->return->add->foreach->try->certs->store->getCertificates->foreach->if->X509CertImpl->buildParams->sigProvider->isSelfSigned->if->resultCerts->add->if->return->catch->if->debug->println->cse->printStackTrace->finally->return
BuildStep#getVertex():::return vertex description for this build step:::return
BuildStep#getCertificate():::return the certificate associated with this build step:::return
BuildStep#getIssuerName():::return string form of issuer name from certificate associated with this build step:::return->getIssuerName
BuildStep#getIssuerName(String):::return string form of issuer name from certificate associated with this build step, or a default name if no certificate associated with this build step, or if issuer name could not be obtained from the certificate.:::return->cert->getIssuerX500Principal->toString
BuildStep#getSubjectName():::return string form of subject name from certificate associated with this build step.:::return->getSubjectName
BuildStep#getSubjectName(String):::return string form of subject name from certificate associated with this build step, or a default name if no certificate associated with this build step, or if subject name could not be obtained from the certificate.:::return->cert->getSubjectX500Principal->toString
BuildStep#getThrowable():::return the exception associated with this build step.:::return
BuildStep#getResult():::return the result code associated with this build step:::return
BuildStep#resultToString(int):::return a string representing the meaning of the result code associated with this build step.:::resultString->switch->break->break->break->break->break->return
BuildStep#toString():::return a string representation of this build step, showing minimal detail.:::out->switch->resultToString->vertex->throwableToString->break->resultToString->break->return
BuildStep#verboseToString():::return a string representation of this build step, showing all detail of the vertex state appropriate to the result of this build step, and the certificate contents.:::out->getResult->resultToString->switch->vertex->throwableToString->break->vertex->moreToString->break->break->break->vertex->certToString->return
BuildStep#fullToString():::return a string representation of this build step, including all possible detail of the vertex state, but not including the certificate contents.:::return->getResult->resultToString->vertex->toString
CertId#getHashAlgorithm():::Return the hash algorithm identifier.:::return
CertId#getIssuerNameHash():::Return the hash value for the issuer name.:::return
CertId#getIssuerKeyHash():::Return the hash value for the issuer key.:::return
CertId#getSerialNumber():::Return the serial number.:::return->certSerialNumber->getNumber
CertId#encode(DerOutputStream):::Encode the CertId using ASN.1 DER:::tmp->new->DerOutputStream->hashAlgId->encode->tmp->putOctetString->tmp->putOctetString->certSerialNumber->encode->out->write->if->encoder->new->HexDumpEncoder->encoder->out->toByteArray->encode->println
CertId#hashCode():::Returns a hashcode value for this CertId.:::if->hashAlgId->hashCode->for->i->for->i->certSerialNumber->getNumber->hashCode->return
CertId#equals(Object):::Compares this CertId for equality with the specified object:::if->return->if->return->that->if->hashAlgId->that->getHashAlgorithm->equals->Arrays->that->getIssuerNameHash->equals->Arrays->that->getIssuerKeyHash->equals->certSerialNumber->getNumber->that->getSerialNumber->equals->return->else->return
CertId#toString():::Create a string representation of the CertId.:::sb->new->StringBuilder->sb->append->sb->hashAlgId->toString->append->sb->append->encoder->new->HexDumpEncoder->sb->encoder->encode->append->sb->append->sb->encoder->encode->append->sb->certSerialNumber->toString->append->return->sb->toString
CollectionCertStore#engineGetCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector:::if->throw->new->CertStoreException->for->c->throw->new->ConcurrentModificationException
CollectionCertStore#engineGetCRLs(CRLSelector):::Returns a Collection of CRLs that match the specified selector:::if->throw->new->CertStoreException->for->c->throw->new->ConcurrentModificationException
ConstraintsChecker#check(Certificate, Collection):::Performs the basic constraints and name constraints checks on the certificate using its internal state.:::currCert->checkBasicConstraints->verifyNameConstraints->if->unresCritExts->isEmpty->unresCritExts->BasicConstraints_Id->toString->remove->unresCritExts->NameConstraints_Id->toString->remove
ConstraintsChecker#mergeNameConstraints(X509Certificate, NameConstraintsExtension):::Helper to fold sets of name constraints together:::currCertImpl->try->X509CertImpl->toImpl->catch->throw->new->CertPathValidatorException->finally->newConstraints->currCertImpl->getNameConstraintsExtension->if->debug->String->valueOf->println->if->if->debug->String->valueOf->println->if->return->else->return->newConstraints->clone->else->try->prevNC->merge->catch->throw->new->CertPathValidatorException->finally->if->debug->println->return
ConstraintsChecker#mergeBasicConstraints(X509Certificate, int):::Merges the specified maxPathLength with the pathLenConstraint obtained from the certificate.:::pathLenConstraint->cert->getBasicConstraints->if->X509CertImpl->isSelfIssued->if->return
DistributionPointFetcher#getCRLs(X509CRLSelector, boolean, PublicKey, String, List, boolean[], Set, Date, String):::Return the X509CRLs matching this selector:::return->getCRLs
DistributionPointFetcher#getCRLs(X509CRLSelector, boolean, PublicKey, X509Certificate, String, List, boolean[], Set, Date, String):::Return the X509CRLs matching this selector:::cert->selector->getCertificateChecking->if->return->Collections->emptySet->try->certImpl->X509CertImpl->toImpl->if->debug->certImpl->getSubjectX500Principal->println->ext->certImpl->getCRLDistributionPointsExtension->if->if->debug->println->return->Collections->emptySet->points->ext->get->results->new->HashSet<>->for->t->points->iterator->t->hasNext->Arrays->equals->if->debug->results->size->println->return->catch->return->Collections->emptySet->finally
DistributionPointFetcher#verifyCRL(X509CertImpl, DistributionPoint, X509CRL, boolean[], boolean, PublicKey, X509Certificate, String, Set, List, Date, String):::Verifies a CRL for the given certificate's Distribution Point to ensure it is appropriate for checking the revocation status.:::if->debug->Debug->certImpl->getSerialNumber->toHexString->certImpl->getSubjectX500Principal->certImpl->getIssuerX500Principal->println->indirectCRL->crlImpl->X509CRLImpl->toImpl->idpExt->crlImpl->getIssuingDistributionPointExtension->certIssuer->certImpl->getIssuerDN->crlIssuer->crlImpl->getIssuerDN->pointCrlIssuers->point->getCRLIssuer->pointCrlIssuer->if->if->idpExt->get->equals->return->match->for->t->pointCrlIssuers->iterator->t->hasNext->if->return->if->issues->certImpl->getPublicKey->else->else->if->crlIssuer->equals->if->debug->println->return->else->certAKID->certImpl->getAuthKeyId->crlAKID->crlImpl->getAuthKeyId->if->if->issues->certImpl->getPublicKey->else->if->certAKID->equals->if->issues->certImpl->getPublicKey->else->if->return->if->idpPoint->idpExt->get->if->idpNames->idpPoint->getFullName->if->relativeName->idpPoint->getRelativeName->if->if->debug->println->return->if->debug->println->getFullNames->if->point->getFullName->point->getRelativeName->pointNames->point->getFullName->if->relativeName->point->getRelativeName->if->if->debug->println->return->if->debug->println->if->if->pointCrlIssuers->size->if->debug->println->return->getFullNames->else->getFullNames->match->for->i->idpNames->iterator->i->hasNext->if->if->debug->println->return->else->match->for->t->pointCrlIssuers->iterator->t->hasNext->if->return->b->idpExt->get->if->b->equals->certImpl->getBasicConstraints->if->debug->println->return->idpExt->get->if->b->equals->certImpl->getBasicConstraints->if->debug->println->return->idpExt->get->if->b->equals->if->debug->println->return->interimReasonsMask->new->booleanArr->reasons->if->idpExt->get->pointReasonFlags->point->getReasonFlags->if->if->idpReasonFlags->reasons->getFlags->for->i->else->reasons->getFlags->clone->else->if->if->pointReasonFlags->clone->else->Arrays->fill->oneOrMore->for->i->if->return->if->certSel->new->X509CertSelector->certSel->crlIssuer->asX500Principal->setSubject->crlSign->certSel->setKeyUsage->akidext->crlImpl->getAuthKeyIdExtension->if->kid->akidext->getEncodedKeyIdentifier->if->certSel->setSubjectKeyIdentifier->asn->akidext->get->if->certSel->asn->getNumber->setSerialNumber->newTrustAnchors->new->HashSet<>->if->temporary->if->new->TrustAnchor->else->principal->certImpl->getIssuerX500Principal->new->TrustAnchor->newTrustAnchors->add->params->try->new->PKIXBuilderParameters->catch->throw->new->CRLException->finally->params->setCertStores->params->setSigProvider->params->setDate->try->builder->CertPathBuilder->getInstance->result->builder->build->result->getPublicKey->catch->throw->new->CRLException->finally->try->AlgorithmChecker->check->catch->if->debug->println->return->finally->try->crl->verify->catch->if->debug->println->return->finally->unresCritExts->crl->getCriticalExtensionOIDs->if->unresCritExts->IssuingDistributionPoint_Id->toString->remove->if->unresCritExts->isEmpty->if->debug->println->foreach->debug->println->return->for->i->return
ForwardBuilder#getMatchingCerts(State, List):::Retrieves all certs from the specified CertStores that satisfy the requirements specified in the parameters and the current PKIX state (name constraints, policy constraints, etc).:::if->debug->println->currState->comparator->new->PKIXCertComparator->certs->new->TreeSet<>->if->currState->isInitial->getMatchingEECerts->getMatchingCACerts->return
ForwardBuilder#verifyCert(X509Certificate, State, List):::Verifies a matching certificate:::if->debug->Debug->cert->getSerialNumber->toHexString->cert->getIssuerX500Principal->cert->getSubjectX500Principal->println->currState->Collections->emptySet->check->if->foreach->if->cert->equals->if->debug->println->throw->new->CertPathValidatorException->isTrustedCert->trustedCerts->contains->if->unresCritExts->cert->getCriticalExtensionOIDs->if->Collections->emptySet->foreach->checker->check->foreach->buildParams->certPathCheckers->if->checker->isForwardCheckingSupported->supportedExts->checker->getSupportedExtensions->if->unresCritExts->removeAll->if->unresCritExts->isEmpty->unresCritExts->BasicConstraints_Id->toString->remove->unresCritExts->NameConstraints_Id->toString->remove->unresCritExts->CertificatePolicies_Id->toString->remove->unresCritExts->PolicyMappings_Id->toString->remove->unresCritExts->PolicyConstraints_Id->toString->remove->unresCritExts->InhibitAnyPolicy_Id->toString->remove->unresCritExts->SubjectAlternativeName_Id->toString->remove->unresCritExts->KeyUsage_Id->toString->remove->unresCritExts->ExtendedKeyUsage_Id->toString->remove->if->unresCritExts->isEmpty->throw->new->CertPathValidatorException->if->currState->isInitial->return->if->if->cert->getBasicConstraints->throw->new->CertificateException->KeyChecker->verifyCAKeyUsage->if->currState->keyParamsNeeded->cert->getPublicKey->buildParams->sigProvider->verify
ForwardBuilder#isPathCompleted(X509Certificate):::Verifies whether the input certificate completes the path:::otherAnchors->new->ArrayList<>->foreach->if->anchor->getTrustedCert->if->cert->anchor->getTrustedCert->equals->return->else->continue->principal->anchor->getCA->publicKey->anchor->getCAPublicKey->if->principal->cert->getSubjectX500Principal->equals->if->publicKey->cert->getPublicKey->equals->return->otherAnchors->add->foreach->principal->anchor->getCA->publicKey->anchor->getCAPublicKey->if->principal->cert->getIssuerX500Principal->equals->continue->if->PKIX->isDSAPublicKeyWithoutParams->continue->try->cert->buildParams->sigProvider->verify->catch->if->debug->println->continue->if->debug->println->e->printStackTrace->continue->finally->return->return
ForwardBuilder#addCertToPath(X509Certificate, LinkedList):::Adds the certificate to the certPathList:::certPathList->addFirst
ForwardBuilder#removeFinalCertFromPath(LinkedList):::Removes final certificate from the certPathList:::certPathList->removeFirst
ForwardState#isInitial():::Returns a boolean flag indicating if the state is initial (just starting):::return
ForwardState#keyParamsNeeded():::Return boolean flag indicating whether a public key that needs to inherit key parameters has been encountered.:::return
ForwardState#toString():::Display state for debugging purposes:::sb->new->StringBuilder->sb->append->sb->append->append->sb->append->append->sb->append->String->valueOf->append->sb->append->String->valueOf->append->sb->append->append->sb->append->return->sb->toString
ForwardState#initState(List):::Initialize the state.:::new->HashSet<GeneralNameInterface>->new->ArrayList<PKIXCertPathChecker>->foreach->if->checker->isForwardCheckingSupported->checker->init->forwardCheckers->add
ForwardState#updateState(X509Certificate):::Update the state with the next certificate added to the path.:::if->return->icert->X509CertImpl->toImpl->if->PKIX->icert->getPublicKey->isDSAPublicKeyWithoutParams->cert->getIssuerX500Principal->if->X509CertImpl->isSelfIssued->if->cert->getBasicConstraints->if->X509CertImpl->isSelfIssued->subjName->cert->getSubjectX500Principal->subjectNamesTraversed->X500Name->asX500Name->add->try->subjAltNameExt->icert->getSubjectAlternativeNameExtension->if->gNames->subjAltNameExt->get->foreach->gNames->names->subjectNamesTraversed->gName->getName->add->catch->if->debug->println->e->printStackTrace->throw->new->CertPathValidatorException->finally
IndexedCollectionCertStore#engineGetCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector:::if->matches->new->HashSet<>->new->X509CertSelector->matchX509Certs->matches->addAll->return->if->matches->new->HashSet<>->matchX509Certs->foreach->if->selector->match->matches->add->return->if->certSubjects->isEmpty->return->Collections->emptySet->x509Selector->subject->matchCert->x509Selector->getCertificate->if->matchCert->getSubjectX500Principal->else->x509Selector->getSubject->if->entry->certSubjects->get->if->return->Collections->emptySet->if->x509Entry->if->x509Selector->match->return->Collections->singleton->else->return->Collections->emptySet->else->list->matches->new->HashSet<>->foreach->if->x509Selector->match->matches->add->return->matches->new->HashSet<>->matchX509Certs->return
IndexedCollectionCertStore#engineGetCRLs(CRLSelector):::Returns a Collection of CRLs that match the specified selector:::if->matches->new->HashSet<>->new->X509CRLSelector->matchX509CRLs->matches->addAll->return->if->matches->new->HashSet<>->matchX509CRLs->foreach->if->selector->match->matches->add->return->if->crlIssuers->isEmpty->return->Collections->emptySet->x509Selector->issuers->x509Selector->getIssuers->if->matches->new->HashSet<>->foreach->entry->crlIssuers->get->if->else->if->crl->if->x509Selector->match->matches->add->else->list->foreach->if->x509Selector->match->matches->add->return->matches->new->HashSet<>->matchX509CRLs->return
KeyChecker#init(boolean):::Initializes the internal state of the checker from parameters specified in the constructor:::if->else->throw->new->CertPathValidatorException
KeyChecker#check(Certificate, Collection):::Checks that keyUsage and target constraints are satisfied by the specified certificate.:::currCert->if->if->targetConstraints->match->throw->new->CertPathValidatorException->else->verifyCAKeyUsage->if->unresCritExts->isEmpty->unresCritExts->KeyUsage_Id->toString->remove->unresCritExts->ExtendedKeyUsage_Id->toString->remove->unresCritExts->SubjectAlternativeName_Id->toString->remove
KeyChecker#verifyCAKeyUsage(X509Certificate):::Verifies the key usage extension in a CA cert:::msg->if->debug->println->keyUsageBits->cert->getKeyUsage->if->return->if->throw->new->CertPathValidatorException->if->debug->println
OCSP#check(List, URI, OCSPResponse.IssuerInfo, X509Certificate, Date, List, String):::Checks the revocation status of a list of certificates using OCSP.:::nonce->foreach->if->ext->getId->toString->equals->ext->getValue->ocspResponse->try->response->getOCSPBytes->new->OCSPResponse->ocspResponse->verify->catch->throw->new->CertPathValidatorException->finally->return
OCSP#getOCSPBytes(List, URI, List):::Send an OCSP request, then read and return the OCSP response bytes.:::request->new->OCSPRequest->bytes->request->encodeBytes->in->out->response->try->url->responderURI->toURL->if->debug->println->con->url->openConnection->con->setConnectTimeout->con->setReadTimeout->con->setDoOutput->con->setDoInput->con->setRequestMethod->con->setRequestProperty->con->String->valueOf->setRequestProperty->con->getOutputStream->out->write->out->flush->if->con->getResponseCode->debug->con->getResponseCode->con->getResponseMessage->println->con->getInputStream->contentLength->con->getContentLength->if->new->byteArr->total->while->count->in->read->if->break->if->Arrays->copyOf->Arrays->copyOf->catch->finally->if->try->in->close->catch->throw->finally->if->try->out->close->catch->throw->finally->return
OCSP.RevocationStatus#getCertStatus():::Returns the revocation status.:::
OCSP.RevocationStatus#getRevocationTime():::Returns the time when the certificate was revoked, or null if it has not been revoked.:::
OCSP.RevocationStatus#getRevocationReason():::Returns the reason the certificate was revoked, or null if it has not been revoked.:::
OCSP.RevocationStatus#getSingleExtensions():::Returns a Map of additional extensions.:::
OCSPNonceExtension#getNonceValue():::Return the nonce bytes themselves, without any DER encoding.:::return->nonceData->clone
OCSPNonceExtension#toString():::Returns a printable representation of the OCSPNonceExtension.:::sb->new->StringBuilder->sb->super->toString->append->append->append->sb->Debug->toString->append->sb->append->return->sb->toString
OCSPNonceExtension#getName():::Return the name of the extension as a String:::return
OCSPResponse#getResponseStatus():::Returns the OCSP ResponseStatus.:::return
OCSPResponse#getSingleResponse(CertId):::Returns the SingleResponse of the specified CertId, or null if there is no response for that CertId.:::return->singleResponseMap->get
OCSPResponse#getCertIds():::Return a set of all CertIds in this OCSPResponse:::return->Collections->singleResponseMap->keySet->unmodifiableSet
OCSPResponse#getResponderId():::Get the ResponderId from this OCSPResponse:::return
OCSPResponse#toString():::Provide a String representation of an OCSPResponse:::sb->new->StringBuilder->sb->append->sb->append->append->append->sb->append->append->append->sb->append->append->append->count->singleResponseMap->size->sb->append->append->foreach->singleResponseMap->values->sb->append->append->if->responseExtensions->size->responseExtensions->size->sb->append->append->foreach->responseExtensions->keySet->sb->responseExtensions->get->append->append->return->sb->toString
OCSPResponse.SingleResponse#getCertId():::Get the Cert ID that this SingleResponse is for.:::return
OCSPResponse.SingleResponse#getThisUpdate():::Get the thisUpdate field from this SingleResponse.:::return->thisUpdate->clone
OCSPResponse.SingleResponse#getNextUpdate():::Get the nextUpdate field from this SingleResponse.:::return->nextUpdate->clone
OCSPResponse.SingleResponse#getRevocationTime():::Get the revocationTime field from this SingleResponse.:::return->revocationTime->clone
OCSPResponse.SingleResponse#getRevocationReason():::Get the revocationReason field for the SingleResponse.:::return
OCSPResponse.SingleResponse#getSingleExtensions():::Get the singleExtensions for this SingleResponse.:::return->Collections->unmodifiableMap
OCSPResponse.SingleResponse#toString():::Construct a string representation of a single OCSP response.:::sb->new->StringBuilder->sb->append->sb->append->sb->append->append->append->if->sb->append->sb->append->append->sb->append->sb->append->append->sb->append->append->append->if->sb->append->append->append->foreach->singleExtensions->values->sb->append->sb->ext->toString->append->append->return->sb->toString
OCSPResponse.IssuerInfo#getCertificate():::Get the certificate in this IssuerInfo if present.:::return
OCSPResponse.IssuerInfo#getName():::Get the name of this issuer.:::return
OCSPResponse.IssuerInfo#getPublicKey():::Get the public key for this issuer.:::return
OCSPResponse.IssuerInfo#getAnchor():::Get the TrustAnchor for the certificate chain.:::return
OCSPResponse.IssuerInfo#toString():::Create a string representation of this IssuerInfo.:::sb->new->StringBuilder->sb->append->sb->append->name->toString->append->append->sb->append->pubKey->toString->append->append->return->sb->toString
PKIXCertPathValidator#engineValidate(CertPath, CertPathParameters):::Validates a certification path consisting exclusively of X509Certificates using the PKIX validation algorithm, which uses the specified input parameter set:::valParams->PKIX->checkParams->return->validate
PKIXMasterCertPathValidator#validate(CertPath, List, List):::Validates a certification path consisting exclusively of X509Certificates using the specified PKIXCertPathCheckers:::cpSize->reversedCertList->size->if->debug->println->debug->println->for->i->if->debug->println->debug->println
PolicyChecker#init(boolean):::Initializes the internal state of the checker from parameters specified in the constructor:::if->throw->new->CertPathValidatorException
PolicyChecker#isForwardCheckingSupported():::Checks if forward checking is supported:::return
PolicyChecker#getSupportedExtensions():::Gets an immutable Set of the OID strings for the extensions that the PKIXCertPathChecker supports (i.e:::if->new->HashSet<String>->supportedExts->CertificatePolicies_Id->toString->add->supportedExts->PolicyMappings_Id->toString->add->supportedExts->PolicyConstraints_Id->toString->add->supportedExts->InhibitAnyPolicy_Id->toString->add->Collections->unmodifiableSet->return
PolicyChecker#check(Certificate, Collection):::Performs the policy processing checks on the certificate using its internal state.:::checkPolicy->if->unresCritExts->isEmpty->unresCritExts->CertificatePolicies_Id->toString->remove->unresCritExts->PolicyMappings_Id->toString->remove->unresCritExts->PolicyConstraints_Id->toString->remove->unresCritExts->InhibitAnyPolicy_Id->toString->remove
PolicyChecker#mergeExplicitPolicy(int, X509CertImpl, boolean):::Merges the specified explicitPolicy value with the requireExplicitPolicy field of the PolicyConstraints extension obtained from the certificate:::if->X509CertImpl->isSelfIssued->try->polConstExt->currCert->getPolicyConstraintsExtension->if->return->require->polConstExt->get->intValue->if->debug->println->if->if->if->else->if->catch->if->debug->println->e->printStackTrace->throw->new->CertPathValidatorException->finally->return
PolicyChecker#mergePolicyMapping(int, X509CertImpl):::Merges the specified policyMapping value with the inhibitPolicyMapping field of the PolicyConstraints extension obtained from the certificate:::if->X509CertImpl->isSelfIssued->try->polConstExt->currCert->getPolicyConstraintsExtension->if->return->inhibit->polConstExt->get->intValue->if->debug->println->if->if->catch->if->debug->println->e->printStackTrace->throw->new->CertPathValidatorException->finally->return
PolicyChecker#mergeInhibitAnyPolicy(int, X509CertImpl):::Merges the specified inhibitAnyPolicy value with the SkipCerts value of the InhibitAnyPolicy extension obtained from the certificate.:::if->X509CertImpl->isSelfIssued->try->inhAnyPolExt->currCert->getExtension->if->return->skipCerts->inhAnyPolExt->get->intValue->if->debug->println->if->if->catch->if->debug->println->e->printStackTrace->throw->new->CertPathValidatorException->finally->return
PolicyChecker#processPolicies(int, Set, int, int, int, boolean, PolicyNodeImpl, X509CertImpl, boolean):::Processes certificate policies in the certificate.:::policiesCritical->policyInfo->rootNode->anyQuals->new->HashSet<>->if->else->origRootNode->copyTree->currCertPolicies->currCert->getCertificatePoliciesExtension->if->currCertPolicies->isCritical->if->debug->println->try->currCertPolicies->get->catch->throw->new->CertPathValidatorException->finally->if->debug->println->foundAnyPolicy->foreach->curPolicy->curPolInfo->getPolicyIdentifier->getIdentifier->toString->if->curPolicy->equals->curPolInfo->getPolicyQualifiers->else->if->debug->println->pQuals->curPolInfo->getPolicyQualifiers->if->pQuals->isEmpty->throw->new->CertPathValidatorException->foundMatch->processParents->if->processParents->if->if->X509CertImpl->isSelfIssued->if->debug->println->processParents->rootNode->prune->if->rootNode->getChildren->hasNext->else->if->if->debug->println->if->if->processPolicyMappings->if->initPolicies->contains->removeInvalidNodes->if->rewriteLeafNodes->if->mergeExplicitPolicy->if->throw->new->CertPathValidatorException->return
PolicyChecker#getPolicyTree():::Gets the root node of the valid policy tree, or null if the valid policy tree is null:::if->return->else->policyTree->rootNode->copyTree->policyTree->setImmutable->return
PolicyNodeImpl#toString():::Return a printable representation of the PolicyNode:::buffer->this->asString->new->StringBuilder->foreach->buffer->append->return->buffer->toString
PolicyNodeImpl#setImmutable():::Sets the immutability flag of this node and all of its children to true.:::if->return->foreach->node->setImmutable
PolicyNodeImpl#addExpectedPolicy(String):::Adds an expectedPolicy to the expected policy set:::if->throw->new->IllegalStateException->if->mExpectedPolicySet->clear->mExpectedPolicySet->add
PolicyNodeImpl#prune(int):::Removes all paths which don't reach the specified depth.:::if->throw->new->IllegalStateException->if->mChildren->size->return->it->mChildren->iterator->while->it->hasNext->node->it->next->node->prune->if->size->it->remove
PolicyNodeImpl#deleteChild(PolicyNode):::Deletes the specified child node of this node, if it exists.:::if->throw->new->IllegalStateException->mChildren->remove
PolicyNodeImpl#copyTree():::Returns a copy of the tree, without copying the policy-related data, rooted at the node on which this was called.:::return->copyTree
PolicyNodeImpl#getPolicyNodes(int):::Returns all nodes at the specified depth in the tree.:::set->new->HashSet<>->getPolicyNodes->return
PolicyNodeImpl#getPolicyNodesExpected(int, String, boolean):::Finds all nodes at the specified depth whose expected_policy_set contains the specified expected OID (if matchAny is false) or the special OID "any value" (if matchAny is true).:::if->expectedOID->equals->return->getPolicyNodes->else->return->getPolicyNodesExpectedHelper
PolicyNodeImpl#getPolicyNodesValid(int, String):::Finds all nodes at the specified depth that contains the specified valid OID:::set->new->HashSet<>->if->foreach->set->node->getPolicyNodesValid->addAll->else->if->mValidPolicy->equals->set->add->return
PolicyNodeImpl#asString():::Prints out some data on this node.:::if->return->else->sb->new->StringBuilder->for->i->n->getDepth->sb->getValidPolicy->policyToString->append->sb->append->sb->isCritical->append->sb->append->foreach->getExpectedPolicies->sb->policyToString->append->sb->append->sb->append->sb->getDepth->append->sb->append->return->sb->toString
ResponderId#getEncoded():::Encode a ResponderId in DER form:::return->encodedRid->clone
ResponderId#getType():::Return the type of :::return
ResponderId#length():::Get the length of the encoded ResponderId (including the tag and length of the explicit tagging from the outer ASN.1 CHOICE).:::return
ResponderId#getResponderName():::Obtain the underlying X500Principal from a ResponderId:::return
ResponderId#getKeyIdentifier():::Obtain the underlying key identifier from a ResponderId:::return
ResponderId#equals(Object):::Compares the specified object with this ResponderId for equality:::if->return->if->return->if->respObj->return->Arrays->respObj->getEncoded->equals->return
ResponderId#hashCode():::Returns the hash code value for this ResponderId:::return->Arrays->hashCode
ResponderId#toString():::Create a String representation of this ResponderId:::sb->new->StringBuilder->switch->sb->append->append->append->break->sb->append->append->foreach->responderKeyId->getIdentifier->sb->String->format->append->break->sb->append->append->return->sb->toString
RevocationChecker#certCanSignCrl(X509Certificate):::Checks that a cert can be used to verify a CRL.:::keyUsage->cert->getKeyUsage->if->return->return
State#updateState(X509Certificate):::Update the state with the next certificate added to the path.:::
State#clone():::Creates and returns a copy of this object:::
State#isInitial():::Returns a boolean flag indicating if the state is initial (just starting):::
State#keyParamsNeeded():::Returns a boolean flag indicating if a key lacking necessary key algorithm parameters has been encountered.:::
SunCertPathBuilder#engineBuild(CertPathParameters):::Attempts to build a certification path using the Sun build algorithm from a trusted anchor(s) to a target subject, which must both be specified in the input parameter set:::if->debug->println->PKIX->checkBuilderParams->return->build
SunCertPathBuilderException#getAdjacencyList():::Returns the adjacency list containing information about the build.:::return
SunCertPathBuilderResult#getAdjacencyList():::Returns the adjacency list containing information about the build.:::return
URICertStore#getInstance(AccessDescription):::Creates a CertStore from information included in the AccessDescription object of a certificate's Authority Information Access Extension.:::if->ad->getAccessMethod->equals->return->gn->ad->getAccessLocation->getName->if->return->uri->getURI->try->return->URICertStore->new->URICertStoreParameters->getInstance->catch->if->debug->println->ex->printStackTrace->return->finally
URICertStore#engineGetCertificates(CertSelector):::Returns a Collection of X509Certificates that match the specified selector:::if->return->ldapCertStore->getCertificates->time->System->currentTimeMillis->if->if->debug->println->return->getMatchingCerts->try->connection->uri->toURL->openConnection->if->connection->setIfModifiedSince->oldLastModified->try->in->connection->getInputStream->connection->getLastModified->if->if->if->debug->println->return->getMatchingCerts->else->if->hconn->if->hconn->getResponseCode->if->debug->println->return->getMatchingCerts->if->debug->println->factory->generateCertificates->catch->finally->return->getMatchingCerts->catch->if->debug->println->e->printStackTrace->finally->Collections->emptySet->return
URICertStore#engineGetCRLs(CRLSelector):::Returns a Collection of X509CRLs that match the specified selector:::if->try->return->ldapCertStore->getCRLs->catch->throw->new->PKIX.CertStoreTypeException->finally->time->System->currentTimeMillis->if->if->debug->println->return->getMatchingCRLs->try->connection->uri->toURL->openConnection->if->connection->setIfModifiedSince->oldLastModified->connection->setConnectTimeout->try->in->connection->getInputStream->connection->getLastModified->if->if->if->debug->println->return->getMatchingCRLs->else->if->hconn->if->hconn->getResponseCode->if->debug->println->return->getMatchingCRLs->if->debug->println->factory->generateCRL->catch->finally->return->getMatchingCRLs->catch->if->debug->println->e->printStackTrace->throw->new->CertStoreException->new->PKIX.CertStoreTypeException->finally
Vertex#getCertificate():::return the certificate for this vertex:::return
Vertex#getIndex():::get the index for this vertex, where the index is the row of the adjacency list that contains certificates that could follow this certificate.:::return
Vertex#setIndex(int):::set the index for this vertex, where the index is the row of the adjacency list that contains certificates that could follow this certificate.:::
Vertex#getThrowable():::return the throwable associated with this vertex; returns null if none.:::return
Vertex#setThrowable(Throwable):::set throwable associated with this vertex; default value is null.:::
Vertex#toString():::Return full string representation of vertex:::return->certToString->throwableToString->indexToString
Vertex#certToString():::Return string representation of this vertex's certificate information.:::sb->new->StringBuilder->x509Cert->try->X509CertImpl->toImpl->catch->if->debug->println->ce->printStackTrace->return->sb->toString->finally->sb->append->x509Cert->getIssuerX500Principal->append->append->sb->append->x509Cert->getSubjectX500Principal->append->append->sb->append->x509Cert->getSerialNumber->toString->append->append->sb->append->x509Cert->getNotAfter->toString->append->append->iUID->x509Cert->getIssuerUniqueID->if->sb->append->foreach->sb->append->sb->append->sUID->x509Cert->getSubjectUniqueID->if->sb->append->foreach->sb->append->sb->append->try->sKeyID->x509Cert->getSubjectKeyIdentifierExtension->if->keyID->sKeyID->get->sb->append->keyID->toString->append->aKeyID->x509Cert->getAuthorityKeyIdentifierExtension->if->keyID->aKeyID->get->sb->append->keyID->toString->append->catch->if->debug->println->e->printStackTrace->finally->return->sb->toString
Vertex#throwableToString():::return Vertex throwable as String compatible with the way toString returns other information:::sb->new->StringBuilder->if->sb->throwable->toString->append->else->sb->append->sb->append->return->sb->toString
Vertex#moreToString():::return Vertex index as String compatible with the way other Vertex.xToString() methods display information.:::sb->new->StringBuilder->sb->append->sb->append->return->sb->toString
Vertex#indexToString():::return Vertex index as String compatible with the way other Vertex.xToString() methods displays other information.:::return
X509CertificatePair#clearCache():::Clear the cache for debugging.:::cache->clear
X509CertificatePair#generateCertificatePair(byte[]):::Create a X509CertificatePair from its encoding:::key->new->Cache.EqualByteArray->pair->cache->get->if->return->new->X509CertificatePair->new->Cache.EqualByteArray->cache->put->return
X509CertificatePair#setForward(X509Certificate):::Sets the forward component of the certificate pair.:::checkPair
X509CertificatePair#setReverse(X509Certificate):::Sets the reverse component of the certificate pair.:::checkPair
X509CertificatePair#getForward():::Returns the forward component of the certificate pair.:::return
X509CertificatePair#getReverse():::Returns the reverse component of the certificate pair.:::return
X509CertificatePair#getEncoded():::Return the DER encoded form of the certificate pair.:::try->if->tmp->new->DerOutputStream->emit->tmp->toByteArray->catch->throw->ex->toString->new->CertificateEncodingException->finally->return
X509CertificatePair#toString():::Return a printable representation of the certificate pair.:::sb->new->StringBuilder->sb->append->if->sb->append->append->append->if->sb->append->append->append->sb->append->return->sb->toString
X509CertPath#getEncoded():::Returns the encoded form of this certification path, using the default encoding.:::return->encodePKIPATH
X509CertPath#getEncoded(String):::Returns the encoded form of this certification path, using the specified encoding.:::switch->return->encodePKIPATH->return->encodePKCS7->throw->new->CertificateEncodingException
X509CertPath#getEncodingsStatic():::Returns the encodings supported by this certification path, with the default encoding first.:::return->encodingList->iterator
X509CertPath#getEncodings():::Returns an iteration of the encodings supported by this certification path, with the default encoding first:::return->getEncodingsStatic
X509CertPath#getCertificates():::Returns the list of certificates in this certification path:::return

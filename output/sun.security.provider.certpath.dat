AdaptableX509CertSelector#setValidityPeriod(Date, Date):::Sets the criterion of the X509Certificate validity period:::
AdaptableX509CertSelector#setSubjectKeyIdentifier(byte[]):::This selector overrides the subjectKeyIdentifier matching rules of X509CertSelector, so it throws IllegalArgumentException if this method is ever called.:::throw->new->IllegalArgumentException
AdaptableX509CertSelector#setSerialNumber(BigInteger):::This selector overrides the serialNumber matching rules of X509CertSelector, so it throws IllegalArgumentException if this method is ever called.:::throw->new->IllegalArgumentException
AdaptableX509CertSelector#setSkiAndSerialNumber(AuthorityKeyIdentifierExtension):::Sets the subjectKeyIdentifier and serialNumber criteria from the authority key identifier extension:::if->ext->getEncodedKeyIdentifier->asn->ext->get->if->asn->getNumber
AdaptableX509CertSelector#match(Certificate):::Decides whether a Certificate should be selected:::xcert->if->matchSubjectKeyID->return->version->xcert->getVersion->if->if->serial->xcert->getSerialNumber->equals->return->if->if->try->xcert->checkValidity->catch->return->finally->if->try->xcert->checkValidity->catch->return->finally->if->super->match->return->return
AdaptableX509CertSelector#matchSubjectKeyID(X509Certificate)::: adaptable x509 cert selector match subject key d:::if->return->try->extVal->xcert->getExtensionValue->if->if->Debug->isVerbose->debug->xcert->getSubjectX500Principal->println->return->in->new->DerInputStream->certSubjectKeyID->in->getOctetString->if->Arrays->equals->if->Debug->isVerbose->debug->Arrays->toString->Arrays->toString->println->return->catch->if->Debug->isVerbose->debug->println->return->finally->return
AdaptableX509CertSelector#clone()::: adaptable x509 cert selector clone:::copy->super->clone->if->startDate->clone->if->endDate->clone->if->ski->clone->return
AdjacencyList#iterator():::Gets an Iterator to iterate over the set of BuildSteps in build-order:::return->Collections->unmodifiableList->iterator
AdjacencyList#buildList(List>, int, BuildStep):::Recursive, private method which actually builds the step list from the given adjacency list:::l->theList->get->allNegOne->allXcps->foreach->if->v->getIndex->if->theList->v->getIndex->get->size->else->if->v->getThrowable->mStepList->new->BuildStep->add->if->if->if->mStepList->new->BuildStep->add->else->mStepList->follow->getVertex->new->BuildStep->add->return->else->possibles->new->ArrayList<>->foreach->if->v->getThrowable->possibles->add->if->possibles->size->mStepList->possibles->get->new->BuildStep->add->else->mStepList->possibles->get->new->BuildStep->add->return->else->success->foreach->if->v->getIndex->if->theList->v->getIndex->get->size->bs->new->BuildStep->mStepList->add->v->getIndex->buildList->if->return->else->if->mStepList->new->BuildStep->add->else->mStepList->follow->getVertex->new->BuildStep->add->return
AdjacencyList#toString():::Prints out a string representation of this AdjacencyList.:::sb->new->StringBuilder->i->foreach->sb->append->append->append->foreach->sb->step->toString->append->append->sb->append->return->sb->toString
AlgorithmChecker#checkFingerprint(X509Certificate)::: algorithm checker check fingerprint:::if->return->if->debug->cert->getSigAlgName->println->return->AnchorCertificates->contains
AlgorithmChecker#init(boolean)::: algorithm checker init:::if->if->else->else->throw->new->CertPathValidatorException
AlgorithmChecker#isForwardCheckingSupported()::: algorithm checker is forward checking supported:::return
AlgorithmChecker#getSupportedExtensions()::: algorithm checker get supported extensions:::return
AlgorithmChecker#check(Certificate, Collection)::: algorithm checker check:::if->return->keyUsage->getKeyUsage->if->throw->new->CertPathValidatorException->x509Cert->algorithmId->try->X509CertImpl->toImpl->x509Cert->get->catch->throw->new->CertPathValidatorException->finally->currSigAlgParams->algorithmId->getParameters->currPubKey->cert->getPublicKey->currSigAlg->x509Cert->getSigAlgName->if->constraints->permits->throw->new->CertPathValidatorException->primitives->if->EnumSet->noneOf->if->primitives->add->if->primitives->add->if->primitives->add->if->primitives->add->if->primitives->isEmpty->throw->new->CertPathValidatorException->cp->new->ConstraintsParameters->if->permits->else->certPathDefaultConstraints->permits->if->constraints->permits->throw->currPubKey->getAlgorithm->getKeySize->new->CertPathValidatorException->if->return->if->constraints->permits->throw->new->CertPathValidatorException->if->PKIX->isDSAPublicKeyWithoutParams->if->throw->new->CertPathValidatorException->params->getParams->if->throw->new->CertPathValidatorException->try->y->getY->kf->KeyFactory->getInstance->ks->params->getP->params->getQ->params->getG->new->DSAPublicKeySpec->kf->generatePublic->catch->throw->e->getMessage->new->CertPathValidatorException->finally
AlgorithmChecker#trySetTrustAnchor(TrustAnchor):::Try to set the trust anchor of the checker:::if->if->throw->new->IllegalArgumentException->if->anchor->getTrustedCert->anchor->getTrustedCert->getPublicKey->anchor->getTrustedCert->checkFingerprint->if->debug->println->else->anchor->getCAPublicKey
AlgorithmChecker#check(PublicKey, X509CRL, String):::Check the signature algorithm with the specified public key.:::x509CRLImpl->try->X509CRLImpl->toImpl->catch->throw->new->CertPathValidatorException->finally->algorithmId->x509CRLImpl->getSigAlgId->check
AlgorithmChecker#check(PublicKey, AlgorithmId, String):::Check the signature algorithm with the specified public key.:::sigAlgName->algorithmId->getName->sigAlgParams->algorithmId->getParameters->certPathDefaultConstraints->new->ConstraintsParameters->permits
BasicChecker#init(boolean):::Initializes the internal state of the checker from parameters specified in the constructor.:::if->if->PKIX->isDSAPublicKeyWithoutParams->throw->new->CertPathValidatorException->else->throw->new->CertPathValidatorException
BasicChecker#isForwardCheckingSupported()::: basic checker is forward checking supported:::return
BasicChecker#getSupportedExtensions()::: basic checker get supported extensions:::return
BasicChecker#check(Certificate, Collection):::Performs the signature, validity, and subject/issuer name chaining checks on the certificate using its internal state:::currCert->if->verifyValidity->verifyNameChaining->verifySignature->updateState
BasicChecker#verifySignature(X509Certificate):::Verifies the signature on the certificate using the previous public key.:::msg->if->debug->println->try->cert->verify->catch->throw->new->CertPathValidatorException->throw->new->CertPathValidatorException->finally->if->debug->println
BasicChecker#verifyValidity(X509Certificate):::Internal method to verify the validity on a certificate:::msg->if->debug->date->toString->println->try->cert->checkValidity->catch->throw->new->CertPathValidatorException->throw->new->CertPathValidatorException->finally->if->debug->println
BasicChecker#verifyNameChaining(X509Certificate):::Internal method to check that cert has a valid DN to be next in a chain:::if->msg->if->debug->println->currIssuer->cert->getIssuerX500Principal->if->X500Name->asX500Name->isEmpty->throw->new->CertPathValidatorException->if->currIssuer->equals->throw->new->CertPathValidatorException->if->debug->println
BasicChecker#updateState(X509Certificate):::Internal method to manage state information at each iteration:::cKey->currCert->getPublicKey->if->debug->currCert->getIssuerX500Principal->toString->currCert->getSubjectX500Principal->currCert->getSerialNumber->toString->println->if->PKIX->isDSAPublicKeyWithoutParams->makeInheritedParamsKey->if->debug->println->currCert->getSubjectX500Principal
BasicChecker#makeInheritedParamsKey(PublicKey, PublicKey):::Internal method to create a new key with inherited key parameters.:::if->throw->new->CertPathValidatorException->params->getParams->if->throw->new->CertPathValidatorException->try->y->getY->kf->KeyFactory->getInstance->ks->params->getP->params->getQ->params->getG->new->DSAPublicKeySpec->return->kf->generatePublic->catch->throw->e->getMessage->new->CertPathValidatorException->finally
BasicChecker#getPublicKey():::return the public key associated with the last certificate processed:::return
Builder#getMatchingCerts(State, List):::Retrieves certificates from the list of certStores using the buildParams and the currentState as a filter:::
Builder#verifyCert(X509Certificate, State, List):::Verifies the cert against the currentState, using the certPathList generated thus far to help with loop detection:::
Builder#isPathCompleted(X509Certificate):::Verifies whether the input certificate completes the path:::
Builder#addCertToPath(X509Certificate, LinkedList):::Adds the certificate to the certPathList:::
Builder#removeFinalCertFromPath(LinkedList):::Removes final certificate from the certPathList:::
Builder#distance(GeneralNameInterface, GeneralNameInterface, int):::get distance of one GeneralName from another:::switch->base->constrains->if->debug->println->return->if->debug->println->return->return->break->break->return->return->test->subtreeDepth->base->subtreeDepth
Builder#hops(GeneralNameInterface, GeneralNameInterface, int):::get hop distance of one GeneralName from another in links where the names need not have an ancestor/descendant relationship:::baseRtest->base->constrains->switch->if->debug->println->return->break->return->return->test->subtreeDepth->base->subtreeDepth->return->test->subtreeDepth->base->subtreeDepth->return->if->base->getType->if->debug->println->return->baseName->testName->commonName->baseName->commonAncestor->if->if->debug->println->return->else->commonDistance->commonName->subtreeDepth->baseDistance->baseName->subtreeDepth->testDistance->testName->subtreeDepth->return
Builder#targetDistance(NameConstraintsExtension, X509Certificate, GeneralNameInterface):::Determine how close a given certificate gets you toward a given target.:::if->constraints->verify->throw->new->IOException->certImpl->try->X509CertImpl->toImpl->catch->throw->new->IOException->finally->subject->X500Name->certImpl->getSubjectX500Principal->asX500Name->if->subject->equals->return->altNameExt->certImpl->getSubjectAlternativeNameExtension->if->altNames->altNameExt->get->if->for->j->n->altNames->size->ncExt->certImpl->getNameConstraintsExtension->if->return->if->constraints->merge->else->ncExt->clone->if->debug->String->valueOf->println->permitted->constraints->get->excluded->constraints->get->if->permitted->reduce->if->debug->println->if->constraints->verify->throw->new->IOException->if->return->for->i->n->permitted->size->return
Builder#getMatchingPolicies():::This method can be used as an optimization to filter out certificates that do not have policies which are valid:::if->initialPolicies->buildParams->initialPolicies->if->initialPolicies->isEmpty->initialPolicies->contains->buildParams->policyMappingInhibited->new->HashSet<>->matchingPolicies->add->else->Collections->emptySet->return
Builder#addMatchingCerts(X509CertSelector, Collection, Collection, boolean):::Search the specified CertStores and add all certificates matching selector to resultCerts:::targetCert->selector->getCertificate->if->if->selector->match->X509CertImpl->buildParams->sigProvider->isSelfSigned->if->debug->Debug->targetCert->getSerialNumber->toHexString->targetCert->getSubjectX500Principal->targetCert->getIssuerX500Principal->println->return->resultCerts->add->return->add->foreach->try->certs->store->getCertificates->foreach->if->X509CertImpl->buildParams->sigProvider->isSelfSigned->if->resultCerts->add->if->return->catch->if->debug->println->cse->printStackTrace->finally->return
BuildStep#getVertex():::return vertex description for this build step:::return
BuildStep#getCertificate():::return the certificate associated with this build step:::return
BuildStep#getIssuerName():::return string form of issuer name from certificate associated with this build step:::return->getIssuerName
BuildStep#getIssuerName(String):::return string form of issuer name from certificate associated with this build step, or a default name if no certificate associated with this build step, or if issuer name could not be obtained from the certificate.:::return->cert->getIssuerX500Principal->toString
BuildStep#getSubjectName():::return string form of subject name from certificate associated with this build step.:::return->getSubjectName
BuildStep#getSubjectName(String):::return string form of subject name from certificate associated with this build step, or a default name if no certificate associated with this build step, or if subject name could not be obtained from the certificate.:::return->cert->getSubjectX500Principal->toString
BuildStep#getThrowable():::return the exception associated with this build step.:::return
BuildStep#getResult():::return the result code associated with this build step:::return
BuildStep#resultToString(int):::return a string representing the meaning of the result code associated with this build step.:::resultString->switch->break->break->break->break->break->return
BuildStep#toString():::return a string representation of this build step, showing minimal detail.:::out->switch->resultToString->vertex->throwableToString->break->resultToString->break->return
BuildStep#verboseToString():::return a string representation of this build step, showing all detail of the vertex state appropriate to the result of this build step, and the certificate contents.:::out->getResult->resultToString->switch->vertex->throwableToString->break->vertex->moreToString->break->break->break->vertex->certToString->return
BuildStep#fullToString():::return a string representation of this build step, including all possible detail of the vertex state, but not including the certificate contents.:::return->getResult->resultToString->vertex->toString
CertId#getHashAlgorithm():::Return the hash algorithm identifier.:::return
CertId#getIssuerNameHash():::Return the hash value for the issuer name.:::return
CertId#getIssuerKeyHash():::Return the hash value for the issuer key.:::return
CertId#getSerialNumber():::Return the serial number.:::return->certSerialNumber->getNumber
CertId#encode(DerOutputStream):::Encode the CertId using ASN.1 DER:::tmp->new->DerOutputStream->hashAlgId->encode->tmp->putOctetString->tmp->putOctetString->certSerialNumber->encode->out->write->if->encoder->new->HexDumpEncoder->encoder->out->toByteArray->encode->println
CertId#hashCode():::Returns a hashcode value for this CertId.:::if->hashAlgId->hashCode->for->i->for->i->certSerialNumber->getNumber->hashCode->return
CertId#equals(Object):::Compares this CertId for equality with the specified object:::if->return->if->return->that->if->hashAlgId->that->getHashAlgorithm->equals->Arrays->that->getIssuerNameHash->equals->Arrays->that->getIssuerKeyHash->equals->certSerialNumber->getNumber->that->getSerialNumber->equals->return->else->return
CertId#toString():::Create a string representation of the CertId.:::sb->new->StringBuilder->sb->append->sb->hashAlgId->toString->append->sb->append->encoder->new->HexDumpEncoder->sb->encoder->encode->append->sb->append->sb->encoder->encode->append->sb->certSerialNumber->toString->append->return->sb->toString
CertPathHelper#implSetPathToNames(X509CertSelector, Set)::: cert path helper impl set path to names:::
CertPathHelper#implSetDateAndTime(X509CRLSelector, Date, long)::: cert path helper impl set date and time:::
CertPathHelper#setPathToNames(X509CertSelector, Set)::: cert path helper set path to names:::instance->implSetPathToNames
CertPathHelper#setDateAndTime(X509CRLSelector, Date, long)::: cert path helper set date and time:::instance->implSetDateAndTime
CollectionCertStore#engineGetCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector:::if->throw->new->CertStoreException->for->c->throw->new->ConcurrentModificationException
CollectionCertStore#engineGetCRLs(CRLSelector):::Returns a Collection of CRLs that match the specified selector:::if->throw->new->CertStoreException->for->c->throw->new->ConcurrentModificationException
ConstraintsChecker#init(boolean)::: constraints checker init:::if->else->throw->new->CertPathValidatorException
ConstraintsChecker#isForwardCheckingSupported()::: constraints checker is forward checking supported:::return
ConstraintsChecker#getSupportedExtensions()::: constraints checker get supported extensions:::if->new->HashSet<String>->supportedExts->BasicConstraints_Id->toString->add->supportedExts->NameConstraints_Id->toString->add->Collections->unmodifiableSet->return
ConstraintsChecker#check(Certificate, Collection):::Performs the basic constraints and name constraints checks on the certificate using its internal state.:::currCert->checkBasicConstraints->verifyNameConstraints->if->unresCritExts->isEmpty->unresCritExts->BasicConstraints_Id->toString->remove->unresCritExts->NameConstraints_Id->toString->remove
ConstraintsChecker#verifyNameConstraints(X509Certificate):::Internal method to check the name constraints against a cert:::msg->if->debug->println->if->X509CertImpl->isSelfIssued->if->debug->currCert->getSubjectX500Principal->println->try->if->prevNC->verify->throw->new->CertPathValidatorException->catch->throw->new->CertPathValidatorException->finally->mergeNameConstraints->if->debug->println
ConstraintsChecker#mergeNameConstraints(X509Certificate, NameConstraintsExtension):::Helper to fold sets of name constraints together:::currCertImpl->try->X509CertImpl->toImpl->catch->throw->new->CertPathValidatorException->finally->newConstraints->currCertImpl->getNameConstraintsExtension->if->debug->String->valueOf->println->if->if->debug->String->valueOf->println->if->return->else->return->newConstraints->clone->else->try->prevNC->merge->catch->throw->new->CertPathValidatorException->finally->if->debug->println->return
ConstraintsChecker#checkBasicConstraints(X509Certificate):::Internal method to check that a given cert meets basic constraints.:::msg->if->debug->println->debug->println->if->pathLenConstraint->if->currCert->getVersion->if->if->X509CertImpl->isSelfIssued->else->currCert->getBasicConstraints->if->throw->new->CertPathValidatorException->if->X509CertImpl->isSelfIssued->if->throw->new->CertPathValidatorException->if->if->debug->println->debug->println
ConstraintsChecker#mergeBasicConstraints(X509Certificate, int):::Merges the specified maxPathLength with the pathLenConstraint obtained from the certificate.:::pathLenConstraint->cert->getBasicConstraints->if->X509CertImpl->isSelfIssued->if->return
DistributionPointFetcher#getCRLs(X509CRLSelector, boolean, PublicKey, String, List, boolean[], Set, Date, String):::Return the X509CRLs matching this selector:::return->getCRLs
DistributionPointFetcher#getCRLs(X509CRLSelector, boolean, PublicKey, String, List, boolean[], Set, Date)::: distribution point fetcher get ls:::return->getCRLs
DistributionPointFetcher#getCRLs(X509CRLSelector, boolean, PublicKey, X509Certificate, String, List, boolean[], Set, Date, String):::Return the X509CRLs matching this selector:::cert->selector->getCertificateChecking->if->return->Collections->emptySet->try->certImpl->X509CertImpl->toImpl->if->debug->certImpl->getSubjectX500Principal->println->ext->certImpl->getCRLDistributionPointsExtension->if->if->debug->println->return->Collections->emptySet->points->ext->get->results->new->HashSet<>->for->t->points->iterator->t->hasNext->Arrays->equals->if->debug->results->size->println->return->catch->return->Collections->emptySet->finally
DistributionPointFetcher#getCRLs(X509CRLSelector, X509CertImpl, DistributionPoint, boolean[], boolean, PublicKey, X509Certificate, String, List, Set, Date, String):::Download CRLs from the given distribution point, verify and return them:::fullName->point->getFullName->if->relativeName->point->getRelativeName->if->return->Collections->emptySet->try->crlIssuers->point->getCRLIssuer->if->certImpl->getIssuerDN->getFullNames->else->if->crlIssuers->size->return->Collections->emptySet->else->crlIssuers->get->getName->getFullNames->catch->return->Collections->emptySet->finally->possibleCRLs->new->ArrayList<>->savedCSE->for->t->fullName->iterator->t->hasNext->if->possibleCRLs->isEmpty->throw->crls->new->ArrayList<>->foreach->try->selector->setIssuerNames->if->selector->match->verifyCRL->crls->add->catch->if->debug->e->getMessage->println->e->printStackTrace->finally->return
DistributionPointFetcher#getCRL(URIName):::Download CRL from given URI.:::uri->name->getURI->if->debug->println->ucs->try->URICertStore->new->URICertStoreParameters->getInstance->catch->if->debug->e->getMessage->println->return->finally->crls->ucs->getCRLs->if->crls->isEmpty->return->else->return->crls->iterator->next
DistributionPointFetcher#getCRLs(X500Name, X500Principal, List):::Fetch CRLs from certStores.:::if->debug->println->xcs->new->X509CRLSelector->xcs->name->asX500Principal->addIssuer->xcs->addIssuer->crls->new->ArrayList<>->savedCSE->foreach->try->foreach->store->getCRLs->crls->add->catch->if->debug->println->cse->printStackTrace->store->getType->new->PKIX.CertStoreTypeException->finally->if->crls->isEmpty->throw->else->return
DistributionPointFetcher#verifyCRL(X509CertImpl, DistributionPoint, X509CRL, boolean[], boolean, PublicKey, X509Certificate, String, Set, List, Date, String):::Verifies a CRL for the given certificate's Distribution Point to ensure it is appropriate for checking the revocation status.:::if->debug->Debug->certImpl->getSerialNumber->toHexString->certImpl->getSubjectX500Principal->certImpl->getIssuerX500Principal->println->indirectCRL->crlImpl->X509CRLImpl->toImpl->idpExt->crlImpl->getIssuingDistributionPointExtension->certIssuer->certImpl->getIssuerDN->crlIssuer->crlImpl->getIssuerDN->pointCrlIssuers->point->getCRLIssuer->pointCrlIssuer->if->if->idpExt->get->equals->return->match->for->t->pointCrlIssuers->iterator->t->hasNext->if->return->if->issues->certImpl->getPublicKey->else->else->if->crlIssuer->equals->if->debug->println->return->else->certAKID->certImpl->getAuthKeyId->crlAKID->crlImpl->getAuthKeyId->if->if->issues->certImpl->getPublicKey->else->if->certAKID->equals->if->issues->certImpl->getPublicKey->else->if->return->if->idpPoint->idpExt->get->if->idpNames->idpPoint->getFullName->if->relativeName->idpPoint->getRelativeName->if->if->debug->println->return->if->debug->println->getFullNames->if->point->getFullName->point->getRelativeName->pointNames->point->getFullName->if->relativeName->point->getRelativeName->if->if->debug->println->return->if->debug->println->if->if->pointCrlIssuers->size->if->debug->println->return->getFullNames->else->getFullNames->match->for->i->idpNames->iterator->i->hasNext->if->if->debug->println->return->else->match->for->t->pointCrlIssuers->iterator->t->hasNext->if->return->b->idpExt->get->if->b->equals->certImpl->getBasicConstraints->if->debug->println->return->idpExt->get->if->b->equals->certImpl->getBasicConstraints->if->debug->println->return->idpExt->get->if->b->equals->if->debug->println->return->interimReasonsMask->new->booleanArr->reasons->if->idpExt->get->pointReasonFlags->point->getReasonFlags->if->if->idpReasonFlags->reasons->getFlags->for->i->else->reasons->getFlags->clone->else->if->if->pointReasonFlags->clone->else->Arrays->fill->oneOrMore->for->i->if->return->if->certSel->new->X509CertSelector->certSel->crlIssuer->asX500Principal->setSubject->crlSign->certSel->setKeyUsage->akidext->crlImpl->getAuthKeyIdExtension->if->kid->akidext->getEncodedKeyIdentifier->if->certSel->setSubjectKeyIdentifier->asn->akidext->get->if->certSel->asn->getNumber->setSerialNumber->newTrustAnchors->new->HashSet<>->if->temporary->if->new->TrustAnchor->else->principal->certImpl->getIssuerX500Principal->new->TrustAnchor->newTrustAnchors->add->params->try->new->PKIXBuilderParameters->catch->throw->new->CRLException->finally->params->setCertStores->params->setSigProvider->params->setDate->try->builder->CertPathBuilder->getInstance->result->builder->build->result->getPublicKey->catch->throw->new->CRLException->finally->try->AlgorithmChecker->check->catch->if->debug->println->return->finally->try->crl->verify->catch->if->debug->println->return->finally->unresCritExts->crl->getCriticalExtensionOIDs->if->unresCritExts->IssuingDistributionPoint_Id->toString->remove->if->unresCritExts->isEmpty->if->debug->println->foreach->debug->println->return->for->i->return
DistributionPointFetcher#getFullNames(X500Name, RDN):::Append relative name to the issuer name and return a new GeneralNames object.:::rdns->issuer->rdns->new->ArrayList<>->rdns->add->fullName->rdns->new->RDNArr->toArray->new->X500Name->fullNames->new->GeneralNames->fullNames->new->GeneralName->add->return
DistributionPointFetcher#issues(X509CertImpl, X509CRLImpl, String):::Verifies whether a CRL is issued by a certain certificate:::matched->issuerSelector->new->AdaptableX509CertSelector->usages->cert->getKeyUsage->if->issuerSelector->setKeyUsage->crlIssuer->crl->getIssuerX500Principal->issuerSelector->setSubject->crlAKID->crl->getAuthKeyIdExtension->issuerSelector->setSkiAndSerialNumber->issuerSelector->match->if->cert->getAuthorityKeyIdentifierExtension->try->crl->cert->getPublicKey->verify->catch->finally->return
ForwardBuilder#getMatchingCerts(State, List):::Retrieves all certs from the specified CertStores that satisfy the requirements specified in the parameters and the current PKIX state (name constraints, policy constraints, etc).:::if->debug->println->currState->comparator->new->PKIXCertComparator->certs->new->TreeSet<>->if->currState->isInitial->getMatchingEECerts->getMatchingCACerts->return
ForwardBuilder#getMatchingEECerts(ForwardState, List, Collection)::: forward builder get matching certs:::if->debug->println->if->targetCertConstraints->clone->eeSelector->buildParams->date->setCertificateValid->if->buildParams->explicitPolicyRequired->eeSelector->getMatchingPolicies->setPolicy->eeSelector->setBasicConstraints->addMatchingCerts
ForwardBuilder#getMatchingCACerts(ForwardState, List, Collection):::Retrieves all CA certificates which satisfy constraints and requirements specified in the parameters and PKIX state.:::if->debug->println->initialSize->caCerts->size->sel->if->currentState->isInitial->if->targetCertConstraints->getBasicConstraints->return->if->debug->println->if->targetCertConstraints->clone->if->buildParams->explicitPolicyRequired->caTargetSelector->getMatchingPolicies->setPolicy->else->if->new->AdaptableX509CertSelector->if->buildParams->explicitPolicyRequired->caSelector->getMatchingPolicies->setPolicy->caSelector->setSubject->CertPathHelper->setPathToNames->caSelector->getNotBefore->getNotAfter->setValidityPeriod->sel->setBasicConstraints->foreach->if->sel->match->if->debug->Debug->trustedCert->getSerialNumber->toHexString->trustedCert->getSubjectX500Principal->trustedCert->getIssuerX500Principal->println->if->caCerts->add->return->sel->buildParams->date->setCertificateValid->sel->setBasicConstraints->if->currentState->isInitial->buildParams->maxPathLength->buildParams->maxPathLength->if->addMatchingCerts->return->if->currentState->isInitial->aiaExt->getAuthorityInfoAccessExtension->if->getCerts->if->numCerts->caCerts->size->debug->println
ForwardBuilder#getCerts(AuthorityInfoAccessExtension, Collection)::: forward builder get certs:::if->return->adList->aiaExt->getAccessDescriptions->if->adList->isEmpty->return->add->foreach->cs->URICertStore->getInstance->if->try->if->certs->cs->getCertificates->addAll->if->return->catch->if->debug->println->cse->printStackTrace->finally->return
ForwardBuilder.PKIXCertComparator#getSelector(X509CertImpl):::Returns an X509CertSelector for matching on the authority key identifier, or null if not applicable.:::if->akidExt->previousCert->getAuthorityKeyIdentifierExtension->if->skid->akidExt->getEncodedKeyIdentifier->if->selector->new->X509CertSelector->selector->setSubjectKeyIdentifier->return->return
ForwardBuilder.PKIXCertComparator#compare(X509Certificate, X509Certificate)::: cert comparator compare:::if->oCert1->equals->return->if->if->certSkidSelector->match->return->if->certSkidSelector->match->return->cIssuer1->oCert1->getIssuerX500Principal->cIssuer2->oCert2->getIssuerX500Principal->cIssuer1Name->X500Name->asX500Name->cIssuer2Name->X500Name->asX500Name->if->debug->println->debug->println->if->debug->println->m1->trustedSubjectDNs->contains->m2->trustedSubjectDNs->contains->if->debug->println->debug->println->if->return->else->if->return->else->if->return->if->debug->println->foreach->tSubjectName->X500Name->asX500Name->distanceTto1->Builder->distance->distanceTto2->Builder->distance->if->debug->println->debug->println->if->if->return->else->if->return->else->if->return->else->if->return->else->return->if->debug->println->foreach->tSubjectName->X500Name->asX500Name->distanceTto1->Builder->distance->distanceTto2->Builder->distance->if->debug->println->debug->println->if->if->return->else->if->return->else->if->return->else->if->return->else->return->if->debug->println->foreach->tSubjectName->X500Name->asX500Name->tAo1->tSubjectName->commonAncestor->tAo2->tSubjectName->commonAncestor->if->debug->String->valueOf->println->debug->String->valueOf->println->if->if->hopsTto1->Builder->hops->hopsTto2->Builder->hops->if->debug->println->debug->println->if->else->if->return->else->return->else->if->return->else->return->if->debug->println->cSubject1->oCert1->getSubjectX500Principal->cSubject2->oCert2->getSubjectX500Principal->cSubject1Name->X500Name->asX500Name->cSubject2Name->X500Name->asX500Name->if->debug->println->debug->println->distanceStoI1->Builder->distance->distanceStoI2->Builder->distance->if->debug->println->debug->println->if->return->else->if->return->if->debug->println->return
ForwardBuilder#verifyCert(X509Certificate, State, List):::Verifies a matching certificate:::if->debug->Debug->cert->getSerialNumber->toHexString->cert->getIssuerX500Principal->cert->getSubjectX500Principal->println->currState->Collections->emptySet->check->if->foreach->if->cert->equals->if->debug->println->throw->new->CertPathValidatorException->isTrustedCert->trustedCerts->contains->if->unresCritExts->cert->getCriticalExtensionOIDs->if->Collections->emptySet->foreach->checker->check->foreach->buildParams->certPathCheckers->if->checker->isForwardCheckingSupported->supportedExts->checker->getSupportedExtensions->if->unresCritExts->removeAll->if->unresCritExts->isEmpty->unresCritExts->BasicConstraints_Id->toString->remove->unresCritExts->NameConstraints_Id->toString->remove->unresCritExts->CertificatePolicies_Id->toString->remove->unresCritExts->PolicyMappings_Id->toString->remove->unresCritExts->PolicyConstraints_Id->toString->remove->unresCritExts->InhibitAnyPolicy_Id->toString->remove->unresCritExts->SubjectAlternativeName_Id->toString->remove->unresCritExts->KeyUsage_Id->toString->remove->unresCritExts->ExtendedKeyUsage_Id->toString->remove->if->unresCritExts->isEmpty->throw->new->CertPathValidatorException->if->currState->isInitial->return->if->if->cert->getBasicConstraints->throw->new->CertificateException->KeyChecker->verifyCAKeyUsage->if->currState->keyParamsNeeded->cert->getPublicKey->buildParams->sigProvider->verify
ForwardBuilder#isPathCompleted(X509Certificate):::Verifies whether the input certificate completes the path:::otherAnchors->new->ArrayList<>->foreach->if->anchor->getTrustedCert->if->cert->anchor->getTrustedCert->equals->return->else->continue->principal->anchor->getCA->publicKey->anchor->getCAPublicKey->if->principal->cert->getSubjectX500Principal->equals->if->publicKey->cert->getPublicKey->equals->return->otherAnchors->add->foreach->principal->anchor->getCA->publicKey->anchor->getCAPublicKey->if->principal->cert->getIssuerX500Principal->equals->continue->if->PKIX->isDSAPublicKeyWithoutParams->continue->try->cert->buildParams->sigProvider->verify->catch->if->debug->println->continue->if->debug->println->e->printStackTrace->continue->finally->return->return
ForwardBuilder#addCertToPath(X509Certificate, LinkedList):::Adds the certificate to the certPathList:::certPathList->addFirst
ForwardBuilder#removeFinalCertFromPath(LinkedList):::Removes final certificate from the certPathList:::certPathList->removeFirst
ForwardState#isInitial():::Returns a boolean flag indicating if the state is initial (just starting):::return
ForwardState#keyParamsNeeded():::Return boolean flag indicating whether a public key that needs to inherit key parameters has been encountered.:::return
ForwardState#toString():::Display state for debugging purposes:::sb->new->StringBuilder->sb->append->sb->append->append->sb->append->append->sb->append->String->valueOf->append->sb->append->String->valueOf->append->sb->append->append->sb->append->return->sb->toString
ForwardState#initState(List):::Initialize the state.:::new->HashSet<GeneralNameInterface>->new->ArrayList<PKIXCertPathChecker>->foreach->if->checker->isForwardCheckingSupported->checker->init->forwardCheckers->add
ForwardState#updateState(X509Certificate):::Update the state with the next certificate added to the path.:::if->return->icert->X509CertImpl->toImpl->if->PKIX->icert->getPublicKey->isDSAPublicKeyWithoutParams->cert->getIssuerX500Principal->if->X509CertImpl->isSelfIssued->if->cert->getBasicConstraints->if->X509CertImpl->isSelfIssued->subjName->cert->getSubjectX500Principal->subjectNamesTraversed->X500Name->asX500Name->add->try->subjAltNameExt->icert->getSubjectAlternativeNameExtension->if->gNames->subjAltNameExt->get->foreach->gNames->names->subjectNamesTraversed->gName->getName->add->catch->if->debug->println->e->printStackTrace->throw->new->CertPathValidatorException->finally
ForwardState#clone()::: forward state clone:::try->clonedState->super->clone->forwardCheckers->clone->li->listIterator->while->li->hasNext->checker->li->next->if->li->checker->clone->set->subjectNamesTraversed->clone->return->catch->throw->e->toString->new->InternalError->finally
IndexedCollectionCertStore#buildIndex(Collection):::Index the specified Collection copying all references to Certificates and CRLs.:::new->HashMap<X500Principal,Object>->new->HashMap<X500Principal,Object>->foreach->if->indexCertificate->else->if->indexCRL->else->if->if->new->HashSet<Certificate>->otherCertificates->add->else->if->if->new->HashSet<CRL>->otherCRLs->add->else->if->Collections->emptySet->if->Collections->emptySet
IndexedCollectionCertStore#indexCertificate(X509Certificate):::Add an X509Certificate to the index.:::subject->cert->getSubjectX500Principal->oldEntry->certSubjects->put->if->if->if->cert->equals->return->list->new->ArrayList<>->list->add->list->add->certSubjects->put->else->list->if->list->contains->list->add->certSubjects->put
IndexedCollectionCertStore#indexCRL(X509CRL):::Add an X509CRL to the index.:::issuer->crl->getIssuerX500Principal->oldEntry->crlIssuers->put->if->if->if->crl->equals->return->list->new->ArrayList<>->list->add->list->add->crlIssuers->put->else->list->if->list->contains->list->add->crlIssuers->put
IndexedCollectionCertStore#engineGetCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector:::if->matches->new->HashSet<>->new->X509CertSelector->matchX509Certs->matches->addAll->return->if->matches->new->HashSet<>->matchX509Certs->foreach->if->selector->match->matches->add->return->if->certSubjects->isEmpty->return->Collections->emptySet->x509Selector->subject->matchCert->x509Selector->getCertificate->if->matchCert->getSubjectX500Principal->else->x509Selector->getSubject->if->entry->certSubjects->get->if->return->Collections->emptySet->if->x509Entry->if->x509Selector->match->return->Collections->singleton->else->return->Collections->emptySet->else->list->matches->new->HashSet<>->foreach->if->x509Selector->match->matches->add->return->matches->new->HashSet<>->matchX509Certs->return
IndexedCollectionCertStore#matchX509Certs(CertSelector, Collection):::Iterate through all the X509Certificates and add matches to the collection.:::foreach->certSubjects->values->if->cert->if->selector->match->matches->add->else->list->foreach->if->selector->match->matches->add
IndexedCollectionCertStore#engineGetCRLs(CRLSelector):::Returns a Collection of CRLs that match the specified selector:::if->matches->new->HashSet<>->new->X509CRLSelector->matchX509CRLs->matches->addAll->return->if->matches->new->HashSet<>->matchX509CRLs->foreach->if->selector->match->matches->add->return->if->crlIssuers->isEmpty->return->Collections->emptySet->x509Selector->issuers->x509Selector->getIssuers->if->matches->new->HashSet<>->foreach->entry->crlIssuers->get->if->else->if->crl->if->x509Selector->match->matches->add->else->list->foreach->if->x509Selector->match->matches->add->return->matches->new->HashSet<>->matchX509CRLs->return
IndexedCollectionCertStore#matchX509CRLs(CRLSelector, Collection):::Iterate through all the X509CRLs and add matches to the collection.:::foreach->crlIssuers->values->if->crl->if->selector->match->matches->add->else->list->foreach->if->selector->match->matches->add
KeyChecker#init(boolean):::Initializes the internal state of the checker from parameters specified in the constructor:::if->else->throw->new->CertPathValidatorException
KeyChecker#isForwardCheckingSupported()::: key checker is forward checking supported:::return
KeyChecker#getSupportedExtensions()::: key checker get supported extensions:::if->new->HashSet<String>->supportedExts->KeyUsage_Id->toString->add->supportedExts->ExtendedKeyUsage_Id->toString->add->supportedExts->SubjectAlternativeName_Id->toString->add->Collections->unmodifiableSet->return
KeyChecker#check(Certificate, Collection):::Checks that keyUsage and target constraints are satisfied by the specified certificate.:::currCert->if->if->targetConstraints->match->throw->new->CertPathValidatorException->else->verifyCAKeyUsage->if->unresCritExts->isEmpty->unresCritExts->KeyUsage_Id->toString->remove->unresCritExts->ExtendedKeyUsage_Id->toString->remove->unresCritExts->SubjectAlternativeName_Id->toString->remove
KeyChecker#verifyCAKeyUsage(X509Certificate):::Verifies the key usage extension in a CA cert:::msg->if->debug->println->keyUsageBits->cert->getKeyUsage->if->return->if->throw->new->CertPathValidatorException->if->debug->println
OCSP#initializeTimeout():::Initialize the timeout length by getting the OCSP timeout system property:::tmp->new->GetIntegerAction->doPrivileged->if->return->return
OCSP#check(X509Certificate, X509Certificate, URI, X509Certificate, Date)::: p check:::return->Collections->emptyList->check
OCSP#check(X509Certificate, X509Certificate, URI, X509Certificate, Date, List, String)::: p check:::return->check
OCSP#check(X509Certificate, URI, TrustAnchor, X509Certificate, X509Certificate, Date, List, String)::: p check:::certId->try->certImpl->X509CertImpl->toImpl->certImpl->getSerialNumberObject->new->CertId->catch->throw->new->CertPathValidatorException->finally->ocspResponse->Collections->singletonList->new->OCSPResponse.IssuerInfo->check->return->ocspResponse->getSingleResponse
OCSP#check(List, URI, OCSPResponse.IssuerInfo, X509Certificate, Date, List, String):::Checks the revocation status of a list of certificates using OCSP.:::nonce->foreach->if->ext->getId->toString->equals->ext->getValue->ocspResponse->try->response->getOCSPBytes->new->OCSPResponse->ocspResponse->verify->catch->throw->new->CertPathValidatorException->finally->return
OCSP#getOCSPBytes(List, URI, List):::Send an OCSP request, then read and return the OCSP response bytes.:::request->new->OCSPRequest->bytes->request->encodeBytes->in->out->response->try->url->responderURI->toURL->if->debug->println->con->url->openConnection->con->setConnectTimeout->con->setReadTimeout->con->setDoOutput->con->setDoInput->con->setRequestMethod->con->setRequestProperty->con->String->valueOf->setRequestProperty->con->getOutputStream->out->write->out->flush->if->con->getResponseCode->debug->con->getResponseCode->con->getResponseMessage->println->con->getInputStream->contentLength->con->getContentLength->if->new->byteArr->total->while->count->in->read->if->break->if->Arrays->copyOf->Arrays->copyOf->catch->finally->if->try->in->close->catch->throw->finally->if->try->out->close->catch->throw->finally->return
OCSP#getResponderURI(X509Certificate)::: p get responder i:::try->return->X509CertImpl->toImpl->getResponderURI->catch->return->finally
OCSP#getResponderURI(X509CertImpl)::: p get responder i:::aia->certImpl->getAuthorityInfoAccessExtension->if->return->descriptions->aia->getAccessDescriptions->foreach->if->description->getAccessMethod->equals->generalName->description->getAccessLocation->if->generalName->getType->uri->generalName->getName->return->uri->getURI->return
OCSP.RevocationStatus#getCertStatus():::Returns the revocation status.:::
OCSP.RevocationStatus#getRevocationTime():::Returns the time when the certificate was revoked, or null if it has not been revoked.:::
OCSP.RevocationStatus#getRevocationReason():::Returns the reason the certificate was revoked, or null if it has not been revoked.:::
OCSP.RevocationStatus#getSingleExtensions():::Returns a Map of additional extensions.:::
OCSPNonceExtension#getNonceValue():::Return the nonce bytes themselves, without any DER encoding.:::return->nonceData->clone
OCSPNonceExtension#toString():::Returns a printable representation of the OCSPNonceExtension.:::sb->new->StringBuilder->sb->super->toString->append->append->append->sb->Debug->toString->append->sb->append->return->sb->toString
OCSPNonceExtension#getName():::Return the name of the extension as a String:::return
OCSPRequest#encodeBytes()::: request encode bytes:::tmp->new->DerOutputStream->requestsOut->new->DerOutputStream->foreach->certIdOut->new->DerOutputStream->certId->encode->requestsOut->write->tmp->write->if->extensions->isEmpty->extOut->new->DerOutputStream->foreach->ext->encode->if->ext->getId->toString->equals->ext->getValue->extsOut->new->DerOutputStream->extsOut->write->tmp->DerValue->createTag->write->tbsRequest->new->DerOutputStream->tbsRequest->write->ocspRequest->new->DerOutputStream->ocspRequest->write->bytes->ocspRequest->toByteArray->if->hexEnc->new->HexDumpEncoder->debug->hexEnc->encode->println->return
OCSPRequest#getCertIds()::: request get cert ids:::return
OCSPRequest#getNonce()::: request get nonce:::return
OCSPResponse#initializeClockSkew():::Initialize the maximum allowable clock skew by getting the OCSP clock skew system property:::tmp->new->GetIntegerAction->doPrivileged->if->return->return
OCSPResponse#verify(List, IssuerInfo, X509Certificate, Date, byte[], String)::: response verify:::switch->break->throw->new->CertPathValidatorException->throw->new->CertPathValidatorException->foreach->sr->getSingleResponse->if->if->debug->println->throw->new->CertPathValidatorException->if->debug->certId->getSerialNumber->sr->getCertStatus->println->if->try->if->issuerInfo->getCertificate->certs->X509CertImpl->issuerInfo->getCertificate->toImpl->add->if->certs->X509CertImpl->toImpl->add->catch->throw->new->CertPathValidatorException->finally->if->respId->getType->rName->respId->getResponderName->foreach->if->cert->getSubjectX500Principal->equals->break->else->if->respId->getType->ridKeyId->respId->getKeyIdentifier->foreach->certKeyId->cert->getSubjectKeyId->if->ridKeyId->equals->break->else->try->cert->getPublicKey->new->KeyIdentifier->catch->finally->if->ridKeyId->equals->break->if->if->signerCert->getSubjectX500Principal->issuerInfo->getName->equals->signerCert->getPublicKey->issuerInfo->getPublicKey->equals->if->debug->println->else->if->signerCert->equals->if->debug->println->else->if->signerCert->getIssuerX500Principal->issuerInfo->getName->equals->try->keyPurposes->signerCert->getExtendedKeyUsage->if->keyPurposes->contains->throw->new->CertPathValidatorException->catch->throw->new->CertPathValidatorException->finally->algChecker->issuerInfo->getAnchor->new->AlgorithmChecker->algChecker->init->algChecker->Collections->emptySet->check->try->if->signerCert->checkValidity->else->signerCert->checkValidity->catch->throw->new->CertPathValidatorException->finally->noCheck->signerCert->getExtension->if->if->debug->println->else->try->signerCert->issuerInfo->getPublicKey->verify->if->debug->println->catch->finally->else->throw->new->CertPathValidatorException->if->AlgorithmChecker->signerCert->getPublicKey->check->if->verifySignature->throw->new->CertPathValidatorException->else->throw->new->CertPathValidatorException->if->if->Arrays->equals->throw->new->CertPathValidatorException->now->System->currentTimeMillis->date->getTime->nowPlusSkew->new->Date->nowMinusSkew->new->Date->foreach->singleResponseMap->values->if->until->if->debug->println->debug->new->Date->println->if->nowPlusSkew->before->nowMinusSkew->after->throw->new->CertPathValidatorException
OCSPResponse#getResponseStatus():::Returns the OCSP ResponseStatus.:::return
OCSPResponse#verifySignature(X509Certificate)::: response verify signature:::try->respSignature->Signature->sigAlgId->getName->getInstance->respSignature->cert->getPublicKey->initVerify->respSignature->update->if->respSignature->verify->if->debug->println->return->else->if->debug->println->return->catch->throw->new->CertPathValidatorException->finally
OCSPResponse#getSingleResponse(CertId):::Returns the SingleResponse of the specified CertId, or null if there is no response for that CertId.:::return->singleResponseMap->get
OCSPResponse#getCertIds():::Return a set of all CertIds in this OCSPResponse:::return->Collections->singleResponseMap->keySet->unmodifiableSet
OCSPResponse#getSignerCertificate()::: response get signer certificate:::return
OCSPResponse#getResponderId():::Get the ResponderId from this OCSPResponse:::return
OCSPResponse#toString():::Provide a String representation of an OCSPResponse:::sb->new->StringBuilder->sb->append->sb->append->append->append->sb->append->append->append->sb->append->append->append->count->singleResponseMap->size->sb->append->append->foreach->singleResponseMap->values->sb->append->append->if->responseExtensions->size->responseExtensions->size->sb->append->append->foreach->responseExtensions->keySet->sb->responseExtensions->get->append->append->return->sb->toString
OCSPResponse#parseExtensions(DerValue):::Build a String-Extension map from DER encoded data.:::extDer->getSequence->extMap->new->HashMap<>->foreach->ext->new->Extension->if->debug->println->if->ext->isCritical->throw->ext->getExtensionId->new->IOException->extMap->ext->getId->put->return
OCSPResponse.SingleResponse#getCertStatus()::: single response get cert status:::return
OCSPResponse.SingleResponse#getCertId():::Get the Cert ID that this SingleResponse is for.:::return
OCSPResponse.SingleResponse#getThisUpdate():::Get the thisUpdate field from this SingleResponse.:::return->thisUpdate->clone
OCSPResponse.SingleResponse#getNextUpdate():::Get the nextUpdate field from this SingleResponse.:::return->nextUpdate->clone
OCSPResponse.SingleResponse#getRevocationTime():::Get the revocationTime field from this SingleResponse.:::return->revocationTime->clone
OCSPResponse.SingleResponse#getRevocationReason():::Get the revocationReason field for the SingleResponse.:::return
OCSPResponse.SingleResponse#getSingleExtensions():::Get the singleExtensions for this SingleResponse.:::return->Collections->unmodifiableMap
OCSPResponse.SingleResponse#toString():::Construct a string representation of a single OCSP response.:::sb->new->StringBuilder->sb->append->sb->append->sb->append->append->append->if->sb->append->sb->append->append->sb->append->sb->append->append->sb->append->append->append->if->sb->append->append->append->foreach->singleExtensions->values->sb->append->sb->ext->toString->append->append->return->sb->toString
OCSPResponse.IssuerInfo#getCertificate():::Get the certificate in this IssuerInfo if present.:::return
OCSPResponse.IssuerInfo#getName():::Get the name of this issuer.:::return
OCSPResponse.IssuerInfo#getPublicKey():::Get the public key for this issuer.:::return
OCSPResponse.IssuerInfo#getAnchor():::Get the TrustAnchor for the certificate chain.:::return
OCSPResponse.IssuerInfo#toString():::Create a string representation of this IssuerInfo.:::sb->new->StringBuilder->sb->append->sb->append->name->toString->append->append->sb->append->pubKey->toString->append->append->return->sb->toString
PKIX#isDSAPublicKeyWithoutParams(PublicKey)::: x is public key without params:::return->getParams
PKIX#checkParams(CertPath, CertPathParameters)::: x check params:::if->throw->new->InvalidAlgorithmParameterException->return->new->ValidatorParams
PKIX#checkBuilderParams(CertPathParameters)::: x check builder params:::if->throw->new->InvalidAlgorithmParameterException->return->new->BuilderParams
PKIX.ValidatorParams#certPath()::: validator params cert path:::return
PKIX.ValidatorParams#setCertPath(CertPath)::: validator params set cert path:::
PKIX.ValidatorParams#certificates()::: validator params certificates:::if->if->Collections->emptyList->else->xc->certPath->getCertificates->new->ArrayList<>->Collections->reverse->return
PKIX.ValidatorParams#certPathCheckers()::: validator params cert path checkers:::if->params->getCertPathCheckers->return
PKIX.ValidatorParams#certStores()::: validator params cert stores:::if->params->getCertStores->return
PKIX.ValidatorParams#date()::: validator params date:::if->params->getDate->if->new->Date->return
PKIX.ValidatorParams#initialPolicies()::: validator params initial policies:::if->params->getInitialPolicies->return
PKIX.ValidatorParams#targetCertConstraints()::: validator params target cert constraints:::if->params->getTargetCertConstraints->return
PKIX.ValidatorParams#trustAnchors()::: validator params trust anchors:::return
PKIX.ValidatorParams#revocationEnabled()::: validator params revocation enabled:::return->params->isRevocationEnabled
PKIX.ValidatorParams#policyMappingInhibited()::: validator params policy mapping inhibited:::return->params->isPolicyMappingInhibited
PKIX.ValidatorParams#explicitPolicyRequired()::: validator params explicit policy required:::return->params->isExplicitPolicyRequired
PKIX.ValidatorParams#policyQualifiersRejected()::: validator params policy qualifiers rejected:::return->params->getPolicyQualifiersRejected
PKIX.ValidatorParams#sigProvider()::: validator params sig provider:::return->params->getSigProvider
PKIX.ValidatorParams#anyPolicyInhibited()::: validator params any policy inhibited:::return->params->isAnyPolicyInhibited
PKIX.ValidatorParams#getPKIXParameters()::: validator params get parameters:::return
PKIX.ValidatorParams#timestamp()::: validator params timestamp:::return
PKIX.ValidatorParams#variant()::: validator params variant:::return
PKIX.BuilderParams#checkParams(PKIXBuilderParameters)::: builder params check params:::sel->targetCertConstraints->if->throw->new->InvalidAlgorithmParameterException->certStores->targetCertConstraints->getTargetSubject
PKIX.BuilderParams#certStores()::: builder params cert stores:::if->params->getCertStores->new->ArrayList<>->Collections->new->CertStoreComparator->sort->return
PKIX.BuilderParams#maxPathLength()::: builder params max path length:::return->params->getMaxPathLength
PKIX.BuilderParams#params()::: builder params params:::return
PKIX.BuilderParams#targetSubject()::: builder params target subject:::return
PKIX.BuilderParams#getTargetSubject(List, X509CertSelector):::Returns the target subject DN from the first X509Certificate that is fetched that matches the specified X509CertSelector.:::subject->sel->getSubject->if->return->cert->sel->getCertificate->if->cert->getSubjectX500Principal->if->return->foreach->try->certs->store->getCertificates->if->certs->isEmpty->xc->certs->iterator->next->return->xc->getSubjectX500Principal->catch->if->debug->println->e->printStackTrace->finally->throw->new->InvalidAlgorithmParameterException
PKIX.CertStoreTypeException#getType()::: cert store type exception get type:::return
PKIX.CertStoreComparator#compare(CertStore, CertStore)::: cert store comparator compare:::if->store1->getType->equals->store1->getCertStoreParameters->return->else->return
PKIXCertPathValidator#engineGetRevocationChecker()::: cert path validator engine get revocation checker:::return->new->RevocationChecker
PKIXCertPathValidator#engineValidate(CertPath, CertPathParameters):::Validates a certification path consisting exclusively of X509Certificates using the PKIX validation algorithm, which uses the specified input parameter set:::valParams->PKIX->checkParams->return->validate
PKIXCertPathValidator#validate(ValidatorParams)::: cert path validator validate:::if->debug->println->selector->certList->params->certificates->if->certList->isEmpty->new->AdaptableX509CertSelector->firstCert->certList->get->selector->firstCert->getIssuerX500Principal->setSubject->try->firstCertImpl->X509CertImpl->toImpl->selector->firstCertImpl->getAuthorityKeyIdentifierExtension->setSkiAndSerialNumber->catch->finally->lastException->foreach->params->trustAnchors->trustedCert->anchor->getTrustedCert->if->if->selector->match->if->Debug->isVerbose->debug->println->continue->if->debug->println->debug->trustedCert->getSubjectX500Principal->println->else->if->debug->println->try->return->validate->catch->finally->if->throw->throw->new->CertPathValidatorException
PKIXCertPathValidator#validate(TrustAnchor, ValidatorParams)::: cert path validator validate:::untrustedChecker->new->UntrustedChecker->anchorCert->anchor->getTrustedCert->if->untrustedChecker->check->certPathLen->params->certificates->size->certPathCheckers->new->ArrayList<>->certPathCheckers->add->certPathCheckers->params->date->params->timestamp->params->variant->new->AlgorithmChecker->add->certPathCheckers->params->targetCertConstraints->new->KeyChecker->add->certPathCheckers->new->ConstraintsChecker->add->rootNode->Collections->singleton->new->PolicyNodeImpl->pc->params->initialPolicies->params->explicitPolicyRequired->params->policyMappingInhibited->params->anyPolicyInhibited->params->policyQualifiersRejected->new->PolicyChecker->certPathCheckers->add->timeToCheck->if->params->variant->params->variant->params->timestamp->params->timestamp->getTimestamp->else->params->date->bc->params->sigProvider->new->BasicChecker->certPathCheckers->add->revCheckerAdded->checkers->params->certPathCheckers->foreach->if->if->throw->new->CertPathValidatorException->if->init->if->params->revocationEnabled->certPathCheckers->new->RevocationChecker->add->certPathCheckers->addAll->PKIXMasterCertPathValidator->params->certPath->params->certificates->validate->xve->new->X509ValidationEvent->if->xve->shouldCommit->EventHelper->isLoggingSecurity->certIds->params->certificates->stream->x->hashCode->mapToInt->toArray->anchorCertId->anchor->getTrustedCert->hashCode->if->xve->shouldCommit->certificatePos->validationCounter->incrementAndGet->xve->commit->foreach->xve->commit->if->EventHelper->isLoggingSecurity->EventHelper->logX509ValidationEvent->return->pc->getPolicyTree->bc->getPublicKey->new->PKIXCertPathValidatorResult
PKIXExtendedParameters#getTimestamp()::: extended parameters get timestamp:::return
PKIXExtendedParameters#setTimestamp(Timestamp)::: extended parameters set timestamp:::
PKIXExtendedParameters#getVariant()::: extended parameters get variant:::return
PKIXExtendedParameters#setDate(Date)::: extended parameters set date:::p->setDate
PKIXExtendedParameters#addCertPathChecker(PKIXCertPathChecker)::: extended parameters add cert path checker:::p->addCertPathChecker
PKIXExtendedParameters#setMaxPathLength(int)::: extended parameters set max path length:::p->setMaxPathLength
PKIXExtendedParameters#getMaxPathLength()::: extended parameters get max path length:::return->p->getMaxPathLength
PKIXExtendedParameters#toString()::: extended parameters to string:::return->p->toString
PKIXExtendedParameters#getTrustAnchors()::: extended parameters get trust anchors:::return->p->getTrustAnchors
PKIXExtendedParameters#setTrustAnchors(Set)::: extended parameters set trust anchors:::if->return->p->setTrustAnchors
PKIXExtendedParameters#getInitialPolicies()::: extended parameters get initial policies:::return->p->getInitialPolicies
PKIXExtendedParameters#setInitialPolicies(Set)::: extended parameters set initial policies:::p->setInitialPolicies
PKIXExtendedParameters#setCertStores(List)::: extended parameters set cert stores:::p->setCertStores
PKIXExtendedParameters#addCertStore(CertStore)::: extended parameters add cert store:::p->addCertStore
PKIXExtendedParameters#getCertStores()::: extended parameters get cert stores:::return->p->getCertStores
PKIXExtendedParameters#setRevocationEnabled(boolean)::: extended parameters set revocation enabled:::p->setRevocationEnabled
PKIXExtendedParameters#isRevocationEnabled()::: extended parameters is revocation enabled:::return->p->isRevocationEnabled
PKIXExtendedParameters#setExplicitPolicyRequired(boolean)::: extended parameters set explicit policy required:::p->setExplicitPolicyRequired
PKIXExtendedParameters#isExplicitPolicyRequired()::: extended parameters is explicit policy required:::return->p->isExplicitPolicyRequired
PKIXExtendedParameters#setPolicyMappingInhibited(boolean)::: extended parameters set policy mapping inhibited:::p->setPolicyMappingInhibited
PKIXExtendedParameters#isPolicyMappingInhibited()::: extended parameters is policy mapping inhibited:::return->p->isPolicyMappingInhibited
PKIXExtendedParameters#setAnyPolicyInhibited(boolean)::: extended parameters set any policy inhibited:::p->setAnyPolicyInhibited
PKIXExtendedParameters#isAnyPolicyInhibited()::: extended parameters is any policy inhibited:::return->p->isAnyPolicyInhibited
PKIXExtendedParameters#setPolicyQualifiersRejected(boolean)::: extended parameters set policy qualifiers rejected:::p->setPolicyQualifiersRejected
PKIXExtendedParameters#getPolicyQualifiersRejected()::: extended parameters get policy qualifiers rejected:::return->p->getPolicyQualifiersRejected
PKIXExtendedParameters#getDate()::: extended parameters get date:::return->p->getDate
PKIXExtendedParameters#setCertPathCheckers(List)::: extended parameters set cert path checkers:::p->setCertPathCheckers
PKIXExtendedParameters#getCertPathCheckers()::: extended parameters get cert path checkers:::return->p->getCertPathCheckers
PKIXExtendedParameters#getSigProvider()::: extended parameters get sig provider:::return->p->getSigProvider
PKIXExtendedParameters#setSigProvider(String)::: extended parameters set sig provider:::p->setSigProvider
PKIXExtendedParameters#getTargetCertConstraints()::: extended parameters get target cert constraints:::return->p->getTargetCertConstraints
PKIXExtendedParameters#setTargetCertConstraints(CertSelector)::: extended parameters set target cert constraints:::if->return->p->setTargetCertConstraints
PKIXMasterCertPathValidator#validate(CertPath, List, List):::Validates a certification path consisting exclusively of X509Certificates using the specified PKIXCertPathCheckers:::cpSize->reversedCertList->size->if->debug->println->debug->println->for->i->if->debug->println->debug->println
PolicyChecker#init(boolean):::Initializes the internal state of the checker from parameters specified in the constructor:::if->throw->new->CertPathValidatorException
PolicyChecker#isForwardCheckingSupported():::Checks if forward checking is supported:::return
PolicyChecker#getSupportedExtensions():::Gets an immutable Set of the OID strings for the extensions that the PKIXCertPathChecker supports (i.e:::if->new->HashSet<String>->supportedExts->CertificatePolicies_Id->toString->add->supportedExts->PolicyMappings_Id->toString->add->supportedExts->PolicyConstraints_Id->toString->add->supportedExts->InhibitAnyPolicy_Id->toString->add->Collections->unmodifiableSet->return
PolicyChecker#check(Certificate, Collection):::Performs the policy processing checks on the certificate using its internal state.:::checkPolicy->if->unresCritExts->isEmpty->unresCritExts->CertificatePolicies_Id->toString->remove->unresCritExts->PolicyMappings_Id->toString->remove->unresCritExts->PolicyConstraints_Id->toString->remove->unresCritExts->InhibitAnyPolicy_Id->toString->remove
PolicyChecker#checkPolicy(X509Certificate):::Internal method to run through all the checks.:::msg->if->debug->println->debug->println->debug->println->debug->println->debug->println->debug->println->currCertImpl->try->X509CertImpl->toImpl->catch->throw->new->CertPathValidatorException->finally->finalCert->processPolicies->if->mergeExplicitPolicy->mergePolicyMapping->mergeInhibitAnyPolicy->if->debug->println->debug->println->debug->println->debug->println->debug->println
PolicyChecker#mergeExplicitPolicy(int, X509CertImpl, boolean):::Merges the specified explicitPolicy value with the requireExplicitPolicy field of the PolicyConstraints extension obtained from the certificate:::if->X509CertImpl->isSelfIssued->try->polConstExt->currCert->getPolicyConstraintsExtension->if->return->require->polConstExt->get->intValue->if->debug->println->if->if->if->else->if->catch->if->debug->println->e->printStackTrace->throw->new->CertPathValidatorException->finally->return
PolicyChecker#mergePolicyMapping(int, X509CertImpl):::Merges the specified policyMapping value with the inhibitPolicyMapping field of the PolicyConstraints extension obtained from the certificate:::if->X509CertImpl->isSelfIssued->try->polConstExt->currCert->getPolicyConstraintsExtension->if->return->inhibit->polConstExt->get->intValue->if->debug->println->if->if->catch->if->debug->println->e->printStackTrace->throw->new->CertPathValidatorException->finally->return
PolicyChecker#mergeInhibitAnyPolicy(int, X509CertImpl):::Merges the specified inhibitAnyPolicy value with the SkipCerts value of the InhibitAnyPolicy extension obtained from the certificate.:::if->X509CertImpl->isSelfIssued->try->inhAnyPolExt->currCert->getExtension->if->return->skipCerts->inhAnyPolExt->get->intValue->if->debug->println->if->if->catch->if->debug->println->e->printStackTrace->throw->new->CertPathValidatorException->finally->return
PolicyChecker#processPolicies(int, Set, int, int, int, boolean, PolicyNodeImpl, X509CertImpl, boolean):::Processes certificate policies in the certificate.:::policiesCritical->policyInfo->rootNode->anyQuals->new->HashSet<>->if->else->origRootNode->copyTree->currCertPolicies->currCert->getCertificatePoliciesExtension->if->currCertPolicies->isCritical->if->debug->println->try->currCertPolicies->get->catch->throw->new->CertPathValidatorException->finally->if->debug->println->foundAnyPolicy->foreach->curPolicy->curPolInfo->getPolicyIdentifier->getIdentifier->toString->if->curPolicy->equals->curPolInfo->getPolicyQualifiers->else->if->debug->println->pQuals->curPolInfo->getPolicyQualifiers->if->pQuals->isEmpty->throw->new->CertPathValidatorException->foundMatch->processParents->if->processParents->if->if->X509CertImpl->isSelfIssued->if->debug->println->processParents->rootNode->prune->if->rootNode->getChildren->hasNext->else->if->if->debug->println->if->if->processPolicyMappings->if->initPolicies->contains->removeInvalidNodes->if->rewriteLeafNodes->if->mergeExplicitPolicy->if->throw->new->CertPathValidatorException->return
PolicyChecker#rewriteLeafNodes(int, Set, PolicyNodeImpl):::Rewrite leaf nodes at the end of validation as described in RFC 5280 section 6.1.5: Step (g)(iii):::anyNodes->rootNode->getPolicyNodesValid->if->anyNodes->isEmpty->return->anyNode->anyNodes->iterator->next->parentNode->anyNode->getParent->parentNode->deleteChild->initial->new->HashSet<>->foreach->rootNode->getPolicyNodes->initial->node->getValidPolicy->remove->if->initial->isEmpty->rootNode->prune->if->rootNode->getChildren->hasNext->else->anyCritical->anyNode->isCritical->anyQualifiers->anyNode->getPolicyQualifiers->foreach->expectedPolicies->Collections->singleton->node->new->PolicyNodeImpl->return
PolicyChecker#processParents(int, boolean, boolean, PolicyNodeImpl, String, Set, boolean):::Finds the policy nodes of depth (certIndex-1) where curPolicy is in the expected policy set and creates a new child node appropriately:::foundMatch->if->debug->println->parentNodes->rootNode->getPolicyNodesExpected->foreach->if->debug->curParent->asString->println->curParPolicy->curParent->getValidPolicy->curNode->curExpPols->if->curPolicy->equals->parExpPols->curParent->getExpectedPolicies->foreach->childIter->curParent->getChildren->while->childIter->hasNext->childNode->childIter->next->childPolicy->childNode->getValidPolicy->if->curParExpPol->equals->if->debug->println->continue->expPols->new->HashSet<>->expPols->add->new->PolicyNodeImpl->else->new->HashSet<String>->curExpPols->add->new->PolicyNodeImpl->return
PolicyChecker#processPolicyMappings(X509CertImpl, int, int, PolicyNodeImpl, boolean, Set):::Processes policy mappings in the certificate.:::polMappingsExt->currCert->getPolicyMappingsExtension->if->return->if->debug->println->maps->try->polMappingsExt->get->catch->if->debug->println->e->printStackTrace->throw->new->CertPathValidatorException->finally->childDeleted->foreach->issuerDomain->polMap->getIssuerIdentifier->getIdentifier->toString->subjectDomain->polMap->getSubjectIdentifier->getIdentifier->toString->if->debug->println->debug->println->if->issuerDomain->equals->throw->new->CertPathValidatorException->if->subjectDomain->equals->throw->new->CertPathValidatorException->validNodes->rootNode->getPolicyNodesValid->if->validNodes->isEmpty->foreach->if->curNode->addExpectedPolicy->else->if->parentNode->curNode->getParent->if->debug->println->parentNode->deleteChild->if->debug->println->else->if->validAnyNodes->rootNode->getPolicyNodesValid->foreach->curAnyNodeParent->curAnyNode->getParent->expPols->new->HashSet<>->expPols->add->curNode->new->PolicyNodeImpl->if->rootNode->prune->if->rootNode->getChildren->hasNext->if->debug->println->return
PolicyChecker#removeInvalidNodes(PolicyNodeImpl, int, Set, CertificatePoliciesExtension):::Removes those nodes which do not intersect with the initial policies specified by the user.:::policyInfo->try->currCertPolicies->get->catch->throw->new->CertPathValidatorException->finally->childDeleted->foreach->curPolicy->curPolInfo->getPolicyIdentifier->getIdentifier->toString->if->debug->println->validNodes->rootNode->getPolicyNodesValid->foreach->parentNode->curNode->getParent->if->parentNode->getValidPolicy->equals->if->initPolicies->contains->curPolicy->equals->if->debug->println->parentNode->deleteChild->if->debug->println->if->rootNode->prune->if->rootNode->getChildren->hasNext->return
PolicyChecker#getPolicyTree():::Gets the root node of the valid policy tree, or null if the valid policy tree is null:::if->return->else->policyTree->rootNode->copyTree->policyTree->setImmutable->return
PolicyNodeImpl#getParent()::: policy node impl get parent:::return
PolicyNodeImpl#getChildren()::: policy node impl get children:::return->Collections->unmodifiableSet->iterator
PolicyNodeImpl#getDepth()::: policy node impl get depth:::return
PolicyNodeImpl#getValidPolicy()::: policy node impl get valid policy:::return
PolicyNodeImpl#getPolicyQualifiers()::: policy node impl get policy qualifiers:::return->Collections->unmodifiableSet
PolicyNodeImpl#getExpectedPolicies()::: policy node impl get expected policies:::return->Collections->unmodifiableSet
PolicyNodeImpl#isCritical()::: policy node impl is critical:::return
PolicyNodeImpl#toString():::Return a printable representation of the PolicyNode:::buffer->this->asString->new->StringBuilder->foreach->buffer->append->return->buffer->toString
PolicyNodeImpl#isImmutable()::: policy node impl is immutable:::return
PolicyNodeImpl#setImmutable():::Sets the immutability flag of this node and all of its children to true.:::if->return->foreach->node->setImmutable
PolicyNodeImpl#addChild(PolicyNodeImpl):::Private method sets a child node:::if->throw->new->IllegalStateException->mChildren->add
PolicyNodeImpl#addExpectedPolicy(String):::Adds an expectedPolicy to the expected policy set:::if->throw->new->IllegalStateException->if->mExpectedPolicySet->clear->mExpectedPolicySet->add
PolicyNodeImpl#prune(int):::Removes all paths which don't reach the specified depth.:::if->throw->new->IllegalStateException->if->mChildren->size->return->it->mChildren->iterator->while->it->hasNext->node->it->next->node->prune->if->size->it->remove
PolicyNodeImpl#deleteChild(PolicyNode):::Deletes the specified child node of this node, if it exists.:::if->throw->new->IllegalStateException->mChildren->remove
PolicyNodeImpl#copyTree():::Returns a copy of the tree, without copying the policy-related data, rooted at the node on which this was called.:::return->copyTree
PolicyNodeImpl#copyTree(PolicyNodeImpl)::: policy node impl copy tree:::newNode->new->PolicyNodeImpl->foreach->node->copyTree->return
PolicyNodeImpl#getPolicyNodes(int):::Returns all nodes at the specified depth in the tree.:::set->new->HashSet<>->getPolicyNodes->return
PolicyNodeImpl#getPolicyNodes(int, Set):::Add all nodes at depth to set and return the Set:::if->set->add->else->foreach->node->getPolicyNodes
PolicyNodeImpl#getPolicyNodesExpected(int, String, boolean):::Finds all nodes at the specified depth whose expected_policy_set contains the specified expected OID (if matchAny is false) or the special OID "any value" (if matchAny is true).:::if->expectedOID->equals->return->getPolicyNodes->else->return->getPolicyNodesExpectedHelper
PolicyNodeImpl#getPolicyNodesExpectedHelper(int, String, boolean)::: policy node impl get policy nodes expected helper:::set->new->HashSet<>->if->foreach->set->node->getPolicyNodesExpectedHelper->addAll->else->if->if->mExpectedPolicySet->contains->set->add->else->if->mExpectedPolicySet->contains->set->add->return
PolicyNodeImpl#getPolicyNodesValid(int, String):::Finds all nodes at the specified depth that contains the specified valid OID:::set->new->HashSet<>->if->foreach->set->node->getPolicyNodesValid->addAll->else->if->mValidPolicy->equals->set->add->return
PolicyNodeImpl#policyToString(String)::: policy node impl policy to string:::if->oid->equals->return->else->return
PolicyNodeImpl#asString():::Prints out some data on this node.:::if->return->else->sb->new->StringBuilder->for->i->n->getDepth->sb->getValidPolicy->policyToString->append->sb->append->sb->isCritical->append->sb->append->foreach->getExpectedPolicies->sb->policyToString->append->sb->append->sb->append->sb->getDepth->append->sb->append->return->sb->toString
ResponderId#getEncoded():::Encode a ResponderId in DER form:::return->encodedRid->clone
ResponderId#getType():::Return the type of :::return
ResponderId#length():::Get the length of the encoded ResponderId (including the tag and length of the explicit tagging from the outer ASN.1 CHOICE).:::return
ResponderId#getResponderName():::Obtain the underlying X500Principal from a ResponderId:::return
ResponderId#getKeyIdentifier():::Obtain the underlying key identifier from a ResponderId:::return
ResponderId#equals(Object):::Compares the specified object with this ResponderId for equality:::if->return->if->return->if->respObj->return->Arrays->respObj->getEncoded->equals->return
ResponderId#hashCode():::Returns the hash code value for this ResponderId:::return->Arrays->hashCode
ResponderId#toString():::Create a String representation of this ResponderId:::sb->new->StringBuilder->switch->sb->append->append->append->break->sb->append->append->foreach->responderKeyId->getIdentifier->sb->String->format->append->break->sb->append->append->return->sb->toString
ResponderId#principalToBytes():::Convert the responderName data member into its DER-encoded form:::dv->DerValue->value->createTag->responderName->getEncoded->new->DerValue->return->dv->toByteArray
ResponderId#keyIdToBytes():::Convert the responderKeyId data member into its DER-encoded form:::inner->responderKeyId->getIdentifier->new->DerValue->outer->DerValue->value->createTag->inner->toByteArray->new->DerValue->return->outer->toByteArray
RevocationChecker#init(TrustAnchor, ValidatorParams)::: revocation checker init:::rp->getRevocationProperties->uri->getOcspResponder->toURI->cert->getOcspResponderCert->params->trustAnchors->params->certStores->getResponderCert->options->getOptions->foreach->switch->break->throw->new->CertPathValidatorException->options->contains->if->else->if->options->contains->if->options->contains->else->else->if->options->contains->options->contains->if->else->getOcspResponses->getOcspExtensions->params->certStores->new->ArrayList<>->try->CertStore->params->certificates->new->CollectionCertStoreParameters->getInstance->add->catch->if->debug->println->finally
RevocationChecker#toURI(String)::: revocation checker to i:::try->if->return->new->URI->return->catch->throw->new->CertPathValidatorException->finally
RevocationChecker#getRevocationProperties()::: revocation checker get revocation properties:::return->AccessController->new->PrivilegedAction<RevocationProperties>->doPrivileged
RevocationChecker#getResponderCert(RevocationProperties, Set, List)::: revocation checker get responder cert:::if->return->getResponderCert->else->if->return->getResponderCert->else->if->throw->new->CertPathValidatorException->return
RevocationChecker#getResponderCert(String, Set, List)::: revocation checker get responder cert:::sel->new->X509CertSelector->try->sel->new->X500Principal->setSubject->catch->throw->new->CertPathValidatorException->finally->return->getResponderCert
RevocationChecker#getResponderCert(String, String, Set, List)::: revocation checker get responder cert:::sel->new->X509CertSelector->try->sel->new->X500Principal->setIssuer->catch->throw->new->CertPathValidatorException->finally->try->sel->stripOutSeparators->new->BigInteger->setSerialNumber->catch->throw->new->CertPathValidatorException->finally->return->getResponderCert
RevocationChecker#getResponderCert(X509CertSelector, Set, List)::: revocation checker get responder cert:::foreach->cert->anchor->getTrustedCert->if->continue->if->sel->match->return->foreach->try->certs->store->getCertificates->if->certs->isEmpty->return->certs->iterator->next->catch->if->debug->println->continue->finally->throw->new->CertPathValidatorException
RevocationChecker#init(boolean)::: revocation checker init:::if->throw->new->CertPathValidatorException->if->new->OCSPResponse.IssuerInfo->issuerInfo->getPublicKey->if->params->certPath->params->certPath->getCertificates->size->else->softFailExceptions->clear
RevocationChecker#isForwardCheckingSupported()::: revocation checker is forward checking supported:::return
RevocationChecker#getSupportedExtensions()::: revocation checker get supported extensions:::return
RevocationChecker#getSoftFailExceptions()::: revocation checker get soft fail exceptions:::return->Collections->unmodifiableList
RevocationChecker#check(Certificate, Collection)::: revocation checker check:::check
RevocationChecker#check(X509Certificate, Collection, PublicKey, boolean)::: revocation checker check:::if->debug->Debug->xcert->getSerialNumber->toHexString->xcert->getSubjectX500Principal->xcert->getIssuerX500Principal->println->try->if->xcert->getBasicConstraints->if->debug->println->return->switch->checkOCSP->break->checkCRLs->break->catch->if->e->getReason->throw->eSoftFail->isSoftFailException->if->if->return->else->if->throw->cause->if->debug->e->getMessage->println->debug->println->try->switch->checkCRLs->break->checkOCSP->break->catch->if->debug->println->debug->x->getMessage->println->if->x->getReason->throw->if->isSoftFailException->cause->addSuppressed->throw->else->if->throw->finally->finally->updateState
RevocationChecker#isSoftFailException(CertPathValidatorException)::: revocation checker is soft fail exception:::if->e->getReason->e2->e->getMessage->e->getCause->params->certPath->e->getReason->new->CertPathValidatorException->softFailExceptions->addFirst->return->return
RevocationChecker#updateState(X509Certificate)::: revocation checker update state:::new->OCSPResponse.IssuerInfo->pubKey->cert->getPublicKey->if->PKIX->isDSAPublicKeyWithoutParams->BasicChecker->makeInheritedParamsKey->certCanSignCrl->if
RevocationChecker#checkCRLs(X509Certificate, Collection, Set, PublicKey, boolean)::: revocation checker check ls:::params->trustAnchors->checkCRLs
RevocationChecker#isCausedByNetworkIssue(String, CertStoreException)::: revocation checker is caused by network issue:::result->t->cse->getCause->switch->if->cn->t->getClass->getName->cn->equals->cn->equals->else->break->break->break->return->return
RevocationChecker#checkCRLs(X509Certificate, PublicKey, X509Certificate, boolean, boolean, Set, Set)::: revocation checker check ls:::if->debug->println->if->stackedCerts->contains->if->debug->println->throw->new->CertPathValidatorException->possibleCRLs->new->HashSet<>->approvedCRLs->new->HashSet<>->sel->new->X509CRLSelector->sel->setCertificateChecking->CertPathHelper->params->date->setDateAndTime->networkFailureException->foreach->try->foreach->store->getCRLs->possibleCRLs->add->catch->if->debug->e->getMessage->println->if->store->getType->isCausedByNetworkIssue->new->CertPathValidatorException->finally->if->debug->possibleCRLs->size->println->reasonsMask->new->booleanArr->if->possibleCRLs->isEmpty->approvedCRLs->verifyPossibleCRLs->addAll->if->debug->approvedCRLs->size->println->if->approvedCRLs->isEmpty->Arrays->equals->checkApprovedCRLs->else->try->if->approvedCRLs->DistributionPointFetcher->params->sigProvider->params->variant->getCRLs->addAll->catch->if->cste->if->cste->getType->isCausedByNetworkIssue->throw->new->CertPathValidatorException->throw->new->CertPathValidatorException->finally->if->approvedCRLs->isEmpty->Arrays->equals->checkApprovedCRLs->else->if->try->verifyWithSeparateSigningKey->return->catch->if->throw->throw->finally->else->if->throw->throw->new->CertPathValidatorException
RevocationChecker#checkApprovedCRLs(X509Certificate, Set)::: revocation checker check approved ls:::if->sn->cert->getSerialNumber->debug->println->debug->sn->toString->println->reasonCode->entry->foreach->e->crl->getRevokedCertificate->if->try->X509CRLEntryImpl->toImpl->catch->throw->new->CertPathValidatorException->finally->if->debug->entry->toString->println->unresCritExts->entry->getCriticalExtensionOIDs->if->unresCritExts->isEmpty->unresCritExts->ReasonCode_Id->toString->remove->unresCritExts->CertificateIssuer_Id->toString->remove->if->unresCritExts->isEmpty->throw->new->CertPathValidatorException->entry->getRevocationReason->if->revocationDate->entry->getRevocationDate->if->revocationDate->params->date->before->t->crl->getIssuerX500Principal->entry->getExtensions->new->CertificateRevokedException->throw->t->getMessage->new->CertPathValidatorException
RevocationChecker#checkOCSP(X509Certificate, Collection)::: revocation checker check p:::currCert->try->X509CertImpl->toImpl->catch->throw->new->CertPathValidatorException->finally->response->certId->try->issuerInfo->getName->issuerInfo->getPublicKey->currCert->getSerialNumberObject->new->CertId->responseBytes->ocspResponses->get->if->if->debug->println->new->OCSPResponse->nonce->foreach->if->ext->getId->equals->ext->getValue->response->Collections->singletonList->params->date->params->variant->verify->else->responderURI->OCSP->getResponderURI->if->throw->new->CertPathValidatorException->OCSP->Collections->singletonList->params->variant->check->catch->throw->new->CertPathValidatorException->finally->rs->response->getSingleResponse->certStatus->rs->getCertStatus->if->revocationTime->rs->getRevocationTime->if->revocationTime->params->date->before->t->rs->getRevocationReason->response->getSignerCertificate->getSubjectX500Principal->rs->getSingleExtensions->new->CertificateRevokedException->throw->t->getMessage->new->CertPathValidatorException->else->if->throw->params->certPath->new->CertPathValidatorException
RevocationChecker#stripOutSeparators(String)::: revocation checker strip out separators:::chars->value->toCharArray->hexNumber->new->StringBuilder->for->i->return->hexNumber->toString
RevocationChecker#certCanSignCrl(X509Certificate):::Checks that a cert can be used to verify a CRL.:::keyUsage->cert->getKeyUsage->if->return->return
RevocationChecker#verifyPossibleCRLs(Set, X509Certificate, PublicKey, boolean, boolean[], Set)::: revocation checker verify possible ls:::try->certImpl->X509CertImpl->toImpl->if->debug->certImpl->getSubjectX500Principal->println->ext->certImpl->getCRLDistributionPointsExtension->points->if->certIssuer->certImpl->getIssuerDN->point->new->GeneralNames->new->GeneralName->add->new->DistributionPoint->Collections->singletonList->else->ext->get->results->new->HashSet<>->foreach->foreach->if->DistributionPointFetcher->params->sigProvider->params->date->params->variant->verifyCRL->results->add->if->Arrays->equals->break->return->catch->if->debug->e->getMessage->println->e->printStackTrace->return->Collections->emptySet->finally
RevocationChecker#verifyWithSeparateSigningKey(X509Certificate, PublicKey, boolean, Set):::We have a cert whose revocation status couldn't be verified by a CRL issued by the cert that issued the CRL:::msg->if->debug->println->if->stackedCerts->contains->if->debug->println->throw->new->CertPathValidatorException->if->buildToNewKey->else->buildToNewKey
RevocationChecker#buildToNewKey(X509Certificate, PublicKey, Set)::: revocation checker build to new key:::if->debug->println->badKeys->new->HashSet<>->if->badKeys->add->certSel->new->RejectKeySelector->certSel->currCert->getIssuerX500Principal->setSubject->certSel->setKeyUsage->newAnchors->params->trustAnchors->Collections->singleton->builderParams->try->new->PKIXBuilderParameters->catch->throw->new->RuntimeException->finally->builderParams->params->initialPolicies->setInitialPolicies->builderParams->setCertStores->builderParams->params->explicitPolicyRequired->setExplicitPolicyRequired->builderParams->params->policyMappingInhibited->setPolicyMappingInhibited->builderParams->params->anyPolicyInhibited->setAnyPolicyInhibited->builderParams->params->date->setDate->builderParams->params->certPathCheckers->setCertPathCheckers->builderParams->params->sigProvider->setSigProvider->builderParams->setRevocationEnabled->if->currCertImpl->try->X509CertImpl->toImpl->catch->if->debug->println->finally->aiaExt->if->currCertImpl->getAuthorityInfoAccessExtension->if->adList->aiaExt->getAccessDescriptions->if->foreach->cs->URICertStore->getInstance->if->if->debug->println->builderParams->addCertStore->builder->try->CertPathBuilder->getInstance->catch->throw->new->CertPathValidatorException->finally->while->try->if->debug->println->cpbr->builder->build->if->debug->println->if->new->HashSet<X509Certificate>->stackedCerts->add->ta->cpbr->getTrustAnchor->prevKey2->ta->getCAPublicKey->if->ta->getTrustedCert->getPublicKey->signFlag->cpList->cpbr->getCertPath->getCertificates->try->for->i->cpList->size->catch->badKeys->cpbr->getPublicKey->add->continue->finally->if->debug->cpbr->getPublicKey->println->newKey->cpbr->getPublicKey->newCert->cpList->isEmpty->cpList->get->try->params->trustAnchors->checkCRLs->return->catch->if->cpve->getReason->throw->finally->badKeys->add->catch->throw->new->CertPathValidatorException->throw->new->CertPathValidatorException->finally
RevocationChecker.RejectKeySelector#match(Certificate):::Decides whether a Certificate should be selected.:::if->super->match->return->if->badKeySet->cert->getPublicKey->contains->if->debug->println->return->if->debug->println->return
RevocationChecker.RejectKeySelector#toString():::Return a printable representation of the CertSelector.:::sb->new->StringBuilder->sb->append->sb->super->toString->append->sb->append->sb->append->return->sb->toString
State#updateState(X509Certificate):::Update the state with the next certificate added to the path.:::
State#clone():::Creates and returns a copy of this object:::
State#isInitial():::Returns a boolean flag indicating if the state is initial (just starting):::
State#keyParamsNeeded():::Returns a boolean flag indicating if a key lacking necessary key algorithm parameters has been encountered.:::
SunCertPathBuilder#engineGetRevocationChecker()::: sun cert path builder engine get revocation checker:::return->new->RevocationChecker
SunCertPathBuilder#engineBuild(CertPathParameters):::Attempts to build a certification path using the Sun build algorithm from a trusted anchor(s) to a target subject, which must both be specified in the input parameter set:::if->debug->println->PKIX->checkBuilderParams->return->build
SunCertPathBuilder#build()::: sun cert path builder build:::adjList->new->ArrayList<>->result->buildCertPath->if->if->debug->println->adjList->clear->buildCertPath->if->throw->new->AdjacencyList->new->SunCertPathBuilderException->return
SunCertPathBuilder#buildCertPath(boolean, List>)::: sun cert path builder build cert path:::certPathList->new->LinkedList<>->try->buildForward->catch->if->debug->println->e->printStackTrace->throw->new->AdjacencyList->new->SunCertPathBuilderException->finally->try->if->if->debug->println->Collections->reverse->return->cf->generateCertPath->new->AdjacencyList->new->SunCertPathBuilderResult->catch->if->debug->println->e->printStackTrace->throw->new->AdjacencyList->new->SunCertPathBuilderException->finally->return
SunCertPathBuilder#buildForward(List>, LinkedList, boolean)::: sun cert path builder build forward:::if->debug->println->currentState->new->ForwardState->currentState->buildParams->certPathCheckers->initState->adjacencyList->clear->adjacencyList->new->LinkedList<Vertex>->add->new->UntrustedChecker->buildParams->targetSubject->new->ForwardBuilder->depthFirstSearchForward
SunCertPathBuilder#depthFirstSearchForward(X500Principal, ForwardState, ForwardBuilder, List>, LinkedList)::: sun cert path builder depth first search forward:::if->debug->currentState->toString->println->certs->builder->buildParams->certStores->getMatchingCerts->vertices->addVertices->if->debug->vertices->size->println->foreach->nextState->currentState->clone->cert->vertex->getCertificate->try->builder->verifyCert->catch->if->debug->println->gse->printStackTrace->vertex->setThrowable->continue->finally->if->builder->isPathCompleted->if->debug->println->appendedCerts->new->ArrayList<>->if->getTrustedCert->appendedCerts->add->initExpPolSet->Collections->singleton->rootNode->new->PolicyNodeImpl->checkers->new->ArrayList<>->policyChecker->buildParams->initialPolicies->appendedCerts->size->buildParams->explicitPolicyRequired->buildParams->policyMappingInhibited->buildParams->anyPolicyInhibited->buildParams->policyQualifiersRejected->new->PolicyChecker->checkers->add->checkers->buildParams->date->buildParams->variant->new->AlgorithmChecker->add->basicChecker->if->nextState->keyParamsNeeded->rootKey->cert->getPublicKey->if->getTrustedCert->getCAPublicKey->if->debug->rootKey->toString->println->anchor->cert->getSubjectX500Principal->new->TrustAnchor->buildParams->date->buildParams->sigProvider->new->BasicChecker->checkers->add->buildParams->cf->generateCertPath->setCertPath->revCheckerAdded->ckrs->buildParams->certPathCheckers->foreach->if->if->throw->new->CertPathValidatorException->if->init->if->buildParams->revocationEnabled->checkers->new->RevocationChecker->add->checkers->addAll->for->i->appendedCerts->size->if->debug->println->if->getTrustedCert->builder->addCertToPath->if->basicChecker->getPublicKey->else->finalCert->if->cpList->isEmpty->getTrustedCert->else->cpList->getLast->finalCert->getPublicKey->policyChecker->getPolicyTree->return->else->builder->addCertToPath->nextState->updateState->adjList->new->LinkedList<Vertex>->add->vertex->adjList->size->setIndex->cert->getIssuerX500Principal->depthFirstSearchForward->if->return->else->if->debug->println->builder->removeFinalCertFromPath
SunCertPathBuilder#addVertices(Collection, List>)::: sun cert path builder add vertices:::l->adjList->adjList->size->get->foreach->v->new->Vertex->l->add->return
SunCertPathBuilder#anchorIsTarget(TrustAnchor, CertSelector):::Returns true if trust anchor certificate matches specified certificate constraints.:::anchorCert->anchor->getTrustedCert->if->return->sel->match->return
SunCertPathBuilderException#getAdjacencyList():::Returns the adjacency list containing information about the build.:::return
SunCertPathBuilderResult#getAdjacencyList():::Returns the adjacency list containing information about the build.:::return
UntrustedChecker#init(boolean)::: untrusted checker init:::
UntrustedChecker#isForwardCheckingSupported()::: untrusted checker is forward checking supported:::return
UntrustedChecker#getSupportedExtensions()::: untrusted checker get supported extensions:::return
UntrustedChecker#check(Certificate, Collection)::: untrusted checker check:::currCert->if->UntrustedCertificates->isUntrusted->if->debug->currCert->getSubjectX500Principal->println->throw->currCert->getSubjectX500Principal->new->CertPathValidatorException
URICertStore#initializeTimeout():::Initialize the timeout length by getting the CRL timeout system property:::tmp->new->GetIntegerAction->doPrivileged->if->return->return
URICertStore#getInstance(URICertStoreParameters)::: cert store get instance:::if->debug->params->getURI->println->ucs->certStoreCache->get->if->new->URICertStore->new->UCS->certStoreCache->put->else->if->debug->println->return
URICertStore#getInstance(AccessDescription):::Creates a CertStore from information included in the AccessDescription object of a certificate's Authority Information Access Extension.:::if->ad->getAccessMethod->equals->return->gn->ad->getAccessLocation->getName->if->return->uri->getURI->try->return->URICertStore->new->URICertStoreParameters->getInstance->catch->if->debug->println->ex->printStackTrace->return->finally
URICertStore#engineGetCertificates(CertSelector):::Returns a Collection of X509Certificates that match the specified selector:::if->return->ldapCertStore->getCertificates->time->System->currentTimeMillis->if->if->debug->println->return->getMatchingCerts->try->connection->uri->toURL->openConnection->if->connection->setIfModifiedSince->oldLastModified->try->in->connection->getInputStream->connection->getLastModified->if->if->if->debug->println->return->getMatchingCerts->else->if->hconn->if->hconn->getResponseCode->if->debug->println->return->getMatchingCerts->if->debug->println->factory->generateCertificates->catch->finally->return->getMatchingCerts->catch->if->debug->println->e->printStackTrace->finally->Collections->emptySet->return
URICertStore#getMatchingCerts(Collection, CertSelector):::Iterates over the specified Collection of X509Certificates and returns only those that match the criteria specified in the CertSelector.:::if->return->matchedCerts->certs->size->new->ArrayList<>->foreach->if->selector->match->matchedCerts->add->return
URICertStore#engineGetCRLs(CRLSelector):::Returns a Collection of X509CRLs that match the specified selector:::if->try->return->ldapCertStore->getCRLs->catch->throw->new->PKIX.CertStoreTypeException->finally->time->System->currentTimeMillis->if->if->debug->println->return->getMatchingCRLs->try->connection->uri->toURL->openConnection->if->connection->setIfModifiedSince->oldLastModified->connection->setConnectTimeout->try->in->connection->getInputStream->connection->getLastModified->if->if->if->debug->println->return->getMatchingCRLs->else->if->hconn->if->hconn->getResponseCode->if->debug->println->return->getMatchingCRLs->if->debug->println->factory->generateCRL->catch->finally->return->getMatchingCRLs->catch->if->debug->println->e->printStackTrace->throw->new->CertStoreException->new->PKIX.CertStoreTypeException->finally
URICertStore#getMatchingCRLs(X509CRL, CRLSelector):::Checks if the specified X509CRL matches the criteria specified in the CRLSelector.:::if->selector->match->return->Collections->singletonList->else->return->Collections->emptyList
Vertex#getCertificate():::return the certificate for this vertex:::return
Vertex#getIndex():::get the index for this vertex, where the index is the row of the adjacency list that contains certificates that could follow this certificate.:::return
Vertex#setIndex(int):::set the index for this vertex, where the index is the row of the adjacency list that contains certificates that could follow this certificate.:::
Vertex#getThrowable():::return the throwable associated with this vertex; returns null if none.:::return
Vertex#setThrowable(Throwable):::set throwable associated with this vertex; default value is null.:::
Vertex#toString():::Return full string representation of vertex:::return->certToString->throwableToString->indexToString
Vertex#certToString():::Return string representation of this vertex's certificate information.:::sb->new->StringBuilder->x509Cert->try->X509CertImpl->toImpl->catch->if->debug->println->ce->printStackTrace->return->sb->toString->finally->sb->append->x509Cert->getIssuerX500Principal->append->append->sb->append->x509Cert->getSubjectX500Principal->append->append->sb->append->x509Cert->getSerialNumber->toString->append->append->sb->append->x509Cert->getNotAfter->toString->append->append->iUID->x509Cert->getIssuerUniqueID->if->sb->append->foreach->sb->append->sb->append->sUID->x509Cert->getSubjectUniqueID->if->sb->append->foreach->sb->append->sb->append->try->sKeyID->x509Cert->getSubjectKeyIdentifierExtension->if->keyID->sKeyID->get->sb->append->keyID->toString->append->aKeyID->x509Cert->getAuthorityKeyIdentifierExtension->if->keyID->aKeyID->get->sb->append->keyID->toString->append->catch->if->debug->println->e->printStackTrace->finally->return->sb->toString
Vertex#throwableToString():::return Vertex throwable as String compatible with the way toString returns other information:::sb->new->StringBuilder->if->sb->throwable->toString->append->else->sb->append->sb->append->return->sb->toString
Vertex#moreToString():::return Vertex index as String compatible with the way other Vertex.xToString() methods display information.:::sb->new->StringBuilder->sb->append->sb->append->return->sb->toString
Vertex#indexToString():::return Vertex index as String compatible with the way other Vertex.xToString() methods displays other information.:::return
X509CertificatePair#clearCache():::Clear the cache for debugging.:::cache->clear
X509CertificatePair#generateCertificatePair(byte[]):::Create a X509CertificatePair from its encoding:::key->new->Cache.EqualByteArray->pair->cache->get->if->return->new->X509CertificatePair->new->Cache.EqualByteArray->cache->put->return
X509CertificatePair#setForward(X509Certificate):::Sets the forward component of the certificate pair.:::checkPair
X509CertificatePair#setReverse(X509Certificate):::Sets the reverse component of the certificate pair.:::checkPair
X509CertificatePair#getForward():::Returns the forward component of the certificate pair.:::return
X509CertificatePair#getReverse():::Returns the reverse component of the certificate pair.:::return
X509CertificatePair#getEncoded():::Return the DER encoded form of the certificate pair.:::try->if->tmp->new->DerOutputStream->emit->tmp->toByteArray->catch->throw->ex->toString->new->CertificateEncodingException->finally->return
X509CertificatePair#toString():::Return a printable representation of the certificate pair.:::sb->new->StringBuilder->sb->append->if->sb->append->append->append->if->sb->append->append->append->sb->append->return->sb->toString
X509CertificatePair#parse(DerValue)::: x509 certificate pair parse:::if->throw->new->IOException->while->available->opt->getDerValue->tag->switch->if->opt->isContextSpecific->opt->isConstructed->if->throw->new->IOException->getDerValue->X509Factory->opt->toByteArray->new->X509CertImpl->intern->break->if->opt->isContextSpecific->opt->isConstructed->if->throw->new->IOException->getDerValue->X509Factory->opt->toByteArray->new->X509CertImpl->intern->break->throw->new->IOException->if->throw->new->CertificateException
X509CertificatePair#emit(DerOutputStream)::: x509 certificate pair emit:::tagged->new->DerOutputStream->if->tmp->new->DerOutputStream->tmp->forward->getEncoded->new->DerValue->putDerValue->tagged->DerValue->createTag->write->if->tmp->new->DerOutputStream->tmp->reverse->getEncoded->new->DerValue->putDerValue->tagged->DerValue->createTag->write->out->write
X509CertificatePair#checkPair()::: x509 certificate pair check pair:::if->return->fwSubject->forward->getSubjectX500Principal->fwIssuer->forward->getIssuerX500Principal->rvSubject->reverse->getSubjectX500Principal->rvIssuer->reverse->getIssuerX500Principal->if->fwIssuer->equals->rvIssuer->equals->throw->new->CertificateException->try->pk->reverse->getPublicKey->if->getParams->forward->verify->forward->getPublicKey->if->getParams->reverse->verify->catch->throw->e->getMessage->new->CertificateException->finally
X509CertPath#parsePKIPATH(InputStream):::Parse a PKIPATH format CertPath from an InputStream:::certList->certFac->if->throw->new->CertificateException->try->dis->readAllBytes->new->DerInputStream->seq->dis->getSequence->if->return->Collections->emptyList->CertificateFactory->getInstance->new->ArrayList<X509Certificate>->for->i->return->Collections->unmodifiableList->catch->throw->new->CertificateException->finally
X509CertPath#parsePKCS7(InputStream):::Parse a PKCS#7 format CertPath from an InputStream:::certList->if->throw->new->CertificateException->try->if->is->markSupported->readAllBytes->new->ByteArrayInputStream->pkcs7->new->PKCS7->certArray->pkcs7->getCertificates->if->Arrays->asList->else->new->ArrayList<X509Certificate>->catch->throw->new->CertificateException->finally->return->Collections->unmodifiableList
X509CertPath#readAllBytes(InputStream)::: x509 cert path read all bytes:::buffer->new->byteArr->baos->new->ByteArrayOutputStream->n->while->is->read->baos->write->return->baos->toByteArray
X509CertPath#getEncoded():::Returns the encoded form of this certification path, using the default encoding.:::return->encodePKIPATH
X509CertPath#encodePKIPATH():::Encode the CertPath using PKIPATH format.:::li->certs->certs->size->listIterator->try->bytes->new->DerOutputStream->while->li->hasPrevious->cert->li->previous->if->certs->lastIndexOf->certs->indexOf->throw->new->CertificateEncodingException->encoded->cert->getEncoded->bytes->write->derout->new->DerOutputStream->derout->write->return->derout->toByteArray->catch->throw->new->CertificateEncodingException->finally
X509CertPath#encodePKCS7():::Encode the CertPath using PKCS#7 format.:::p7->new->AlgorithmIdArr->new->ContentInfo->certs->certs->size->new->X509CertificateArr->toArray->new->SignerInfoArr->new->PKCS7->derout->new->DerOutputStream->try->p7->encodeSignedData->catch->throw->ioe->getMessage->new->CertificateEncodingException->finally->return->derout->toByteArray
X509CertPath#getEncoded(String):::Returns the encoded form of this certification path, using the specified encoding.:::switch->return->encodePKIPATH->return->encodePKCS7->throw->new->CertificateEncodingException
X509CertPath#getEncodingsStatic():::Returns the encodings supported by this certification path, with the default encoding first.:::return->encodingList->iterator
X509CertPath#getEncodings():::Returns an iteration of the encodings supported by this certification path, with the default encoding first:::return->getEncodingsStatic
X509CertPath#getCertificates():::Returns the list of certificates in this certification path:::return

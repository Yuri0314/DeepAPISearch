AuxBfEfRecord#getLineNumber():::Actual ordinal line number (1, 2, 3, etc.) within source file,       corresponding to the .bf or .ef record.:::
AuxBfEfRecord#getPointerToNextFunction():::Symbol-table index of the next .bf symbol record:::
AuxFunctionDefinitionRecord#getTagIndex():::Symbol-table index of the corresponding .bf (begin function)       symbol record.:::
AuxFunctionDefinitionRecord#getTotalSize():::Size of the executable code for the function itself:::
AuxFunctionDefinitionRecord#getPointerToLineNumber():::Index of the first COFF line-number entry for the function in       the global array of line numbers (see sun.jvm.hotspot.debugger.win32.coff.SectionHeader#getCOFFLineNumber),       or -1 if none exists.:::
AuxFunctionDefinitionRecord#getPointerToNextFunction():::Symbol-table index of the record for the next function:::
AuxSectionDefinitionsRecord#getLength():::Size of section data; same as Size of Raw Data in the section       header.:::
AuxSectionDefinitionsRecord#getNumberOfRelocations():::Number of relocation entries for the section.:::
AuxSectionDefinitionsRecord#getNumberOfLineNumbers():::Number of line-number entries for the section.:::
AuxSectionDefinitionsRecord#getCheckSum():::Checksum for communal data:::
AuxSectionDefinitionsRecord#getNumber():::One-based index into the Section Table for the associated       section; used when the COMDAT Selection setting is 5.:::
AuxSectionDefinitionsRecord#getSelection():::COMDAT selection number:::
AuxSymbolRecord#getType():::Returns #FUNCTION_DEFINITION, #BF_EF_RECORD,       #WEAK_EXTERNAL, #FILE, or #SECTION_DEFINITION, indicating the concrete subtype of this       interface.:::
AuxWeakExternalRecord#getTagIndex():::Symbol-table index of sym2, the symbol to be linked if sym1 is       not found.:::
AuxWeakExternalRecord#getCharacteristics():::<P> A value of #IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY       indicates that no library search for sym1 should be       performed:::
COFFFile#isImage():::Indicates whether the file is an image (.EXE or .DLL) or not       (.OBJ).:::
COFFFile#close():::Closes this COFF file:::
COFFFileParser#getParser():::This class is a singleton; returns the sole instance.:::if->new->COFFFileParser->return
COFFFileParser.COFFFileImpl.COFFHeaderImpl.StringTable#getAtOffset(int):::This version takes an absolute offset in the file:::i->Arrays->new->COFFString->new->Comparator->binarySearch->if->throw->new->COFFException->return
COFFFileParser.COFFFileImpl#readShortAt(long):::NOTE: reads little-endian short:::seek->return->readShort
COFFFileParser.COFFFileImpl#readShort():::NOTE: reads little-endian short:::try->return->file->readShort->byteSwap->catch->throw->e->toString->Long->toHexString->new->COFFException->finally
COFFFileParser.COFFFileImpl#readIntAt(long):::NOTE: reads little-endian int:::seek->return->readInt
COFFFileParser.COFFFileImpl#readInt():::NOTE: reads little-endian int:::try->return->file->readInt->byteSwap->catch->throw->e->toString->Long->toHexString->new->COFFException->finally
COFFFileParser.COFFFileImpl#readLongAt(long):::NOTE: reads little-endian long:::seek->return->readLong
COFFFileParser.COFFFileImpl#readLong():::NOTE: reads little-endian long:::try->return->file->readLong->byteSwap->catch->throw->e->toString->Long->toHexString->new->COFFException->finally
COFFFileParser.COFFFileImpl#readFloat():::NOTE: reads little-endian float:::i->readInt->return->Float->intBitsToFloat
COFFFileParser.COFFFileImpl#readDouble():::NOTE: reads little-endian double:::l->readLong->return->Double->longBitsToDouble
COFFHeader#getMachineType():::Returns one of the constants in sun.jvm.hotspot.debugger.win32.coff.MachineTypes.:::
COFFHeader#getNumberOfSections():::Number of sections; indicates size of the Section Table, which       immediately follows the headers.:::
COFFHeader#getTimeDateStamp():::Time and date the file was created.:::
COFFHeader#getPointerToSymbolTable():::File offset of the COFF symbol table or 0 if none is present.:::
COFFHeader#getNumberOfSymbols():::Number of entries in the symbol table:::
COFFHeader#getSizeOfOptionalHeader():::Size of the optional header, which is required for executable       files but not for object files:::
COFFHeader#getOptionalHeader():::Returns the optional header if one is present or null if not.:::
COFFHeader#getCharacteristics():::Gets the union of all characteristics set for this object or       image file:::
COFFHeader#hasCharacteristic(short):::Indicates whether this file has the given characteristic:::
COFFHeader#getSectionHeader(int):::Retrieves the section header at the given index, between       1 and getNumberOfSections():::
COFFHeader#getCOFFSymbol(int):::Retrieves the COFF symbol at the given index, between 0 and       getNumberOfSymbols() - 1:::
COFFHeader#getNumberOfStrings():::Returns the number of strings in the String Table, which       immediately follows the COFF Symbol Table.:::
COFFHeader#getString(int):::Retrieves the ith string (0..#getNumberOfStrings - 1)       from the string table.:::
COFFLineNumber#getType():::<P> Union of two fields: Symbol Table Index and RVA:::
COFFLineNumber#getLineNumber():::When nonzero, this field specifies a one-based line number:::
COFFRelocation#getVirtualAddress():::Address of the item to which relocation is applied: this is the       offset from the beginning of the section, plus the value of the       section's RVA/Offset field (see sun.jvm.hotspot.debugger.win32.coff.SectionHeader.) For example, if       the first byte of the section has an address of 0x10, the third       byte has an address of 0x12.:::
COFFRelocation#getSymbolTableIndex():::A zero-based index into the symbol table:::
COFFRelocation#getType():::A value indicating what kind of relocation should be       performed:::
COFFSymbol#getOffset():::Offset within the file of this record:::
COFFSymbol#getValue():::Value associated with the symbol:::
COFFSymbol#getSectionNumber():::Signed integer identifying the section, using a one-based index       into the Section Table:::
COFFSymbol#getType():::<P> The Type field of a symbol table entry contains two bytes,       each byte representing type information:::
COFFSymbol#getStorageClass():::Enumerated value representing storage class:::
COFFSymbol#getNumberOfAuxSymbols():::Number of auxiliary symbol table entries that follow this       record:::
COFFSymbol#isFunctionDefinition():::Indicates whether this symbol is a function definition: storage       class EXTERNAL (2), a Type value indicating it is a function       (0x20), and a section number greater than zero:::
COFFSymbol#getAuxFunctionDefinitionRecord():::This should only be called if #isFunctionDefinition       returns true.:::
COFFSymbol#isBfOrEfSymbol():::Indicates whether this symbol is a .bf or .ef symbol record and       is therefore followed by an sun.jvm.hotspot.debugger.win32.coff.AuxBfEfRecord.:::
COFFSymbol#getAuxBfEfRecord():::This should only be called if #isBfOrEfSymbol returns       true.:::
COFFSymbol#isWeakExternal():::Indicates whether this symbol is a weak external and is       therefore followed by an sun.jvm.hotspot.debugger.win32.coff.AuxWeakExternalRecord.:::
COFFSymbol#getAuxWeakExternalRecord():::This should only be called if #isWeakExternal returns       true.:::
COFFSymbol#isFile():::Indicates whether this symbol has storage class FILE and is       therefore followed by a sun.jvm.hotspot.debugger.win32.coff.AuxFileRecord.:::
COFFSymbol#getAuxFileRecord():::This should only be called if #isFile returns       true.:::
COFFSymbol#isSectionDefinition():::Indicates whether this symbol defines a section and is therefore       followed by an sun.jvm.hotspot.debugger.win32.coff.AuxSectionDefinitionsRecord.:::
COFFSymbol#getAuxSectionDefinitionsRecord():::This should only be called if #isSectionDefinition returns       true.:::
DataDirectory#getRVA():::The relative virtual address of the table:::
DataDirectory#getSize():::The size in bytes of this directory.:::
DebugDirectory#getNumEntries():::Number of entries in the directory:::
DebugDirectory#getEntry(int):::Fetch the ith entry (0..getNumEntries() - 1):::
DebugDirectoryEntry#getCharacteristics():::A reserved field intended to be used for flags, set to zero for       now.:::
DebugDirectoryEntry#getTimeDateStamp():::Time and date the debug data was created.:::
DebugDirectoryEntry#getMajorVersion():::Major version number of the debug data format.:::
DebugDirectoryEntry#getMinorVersion():::Minor version number of the debug data format.:::
DebugDirectoryEntry#getType():::Format of debugging information: this field enables support of       multiple debuggers:::
DebugDirectoryEntry#getSizeOfData():::Size of the debug data (not including the debug directory itself).:::
DebugDirectoryEntry#getAddressOfRawData():::Address of the debug data when loaded, relative to the image base.:::
DebugDirectoryEntry#getPointerToRawData():::File pointer to the debug data.:::
DebugDirectoryEntry#getDebugVC50():::If this debug directory entry is of type       IMAGE_DEBUG_TYPE_CODEVIEW (see:::
DebugDirectoryEntry#getRawDataByte(int):::Placeholder:::
DebugVC50SegDesc#getFlags():::Descriptor flags bit field:::
DebugVC50SegDesc#getOverlayNum():::The logical overlay number.:::
DebugVC50SegDesc#getGroup():::The group index into the descriptor array:::
DebugVC50SegDesc#getFrame()::: This value has different meanings depending upon the values       of fAbs and fSel in the flags bit array and ovl:                <table>       <tr> <td> fAbs <td> fSel <td> ovl <td> Operation       <tr> <td> 0    <td> 0    <td> 0   <td> Frame is added to PSP + 0x10 if not a .com file       <tr> <td> 0    <td> 0    <td> 0   <td> Frame is added to PSP if it is a .com file       <tr> <td> 0    <td> 0    <td> != 0 <td> Frame is added to current overlay base       <tr> <td> 1    <td> 0    <td> x   <td> Frame is absolute address       <tr> <td> 0    <td> 1    <td> x   <td> Frame contains a selector       </table>       :::
DebugVC50SegDesc#getName():::The byte index of the segment or group name in the sstSegName       table:::
DebugVC50SegDesc#getClassName():::The byte index of the class name in the sstSegName table:::
DebugVC50SegDesc#getOffset():::Byte offset of the logical segment within the specified physical       segment:::
DebugVC50SegDesc#getSize():::Byte count of the logical segment or group.:::
DebugVC50SegInfo#getSegment():::Segment that this structure describes:::
DebugVC50SegInfo#getOffset():::Offset in segment where the code starts:::
DebugVC50SegInfo#getSegmentCodeSize():::Count of the number of bytes of code in the segment:::
DebugVC50SrcModFileDesc#getNumCodeSegments():::The number of code segments receiving code from this module.:::
DebugVC50SrcModFileDesc#getLineNumberMap(int):::Get the ith (0..getNumCodeSegments() - 1) line       number/address map for the given segment.:::
DebugVC50SrcModFileDesc#getSegmentStartOffset(int):::Get ith (0..getNumCodeSegments() - 1) start offset,       within a segment, of code contributed to that segment:::
DebugVC50SrcModFileDesc#getSegmentEndOffset(int):::Get ith (0..getNumCodeSegments() - 1) end offset, within       a segment, of code contributed to that segment:::
DebugVC50SrcModFileDesc#getSourceFileName():::Source file name:::
DebugVC50SrcModLineNumberMap#getSegment():::Segment index for this table.:::
DebugVC50SrcModLineNumberMap#getNumSourceLinePairs():::Number of source line pairs.:::
DebugVC50SrcModLineNumberMap#getCodeOffset(int):::Get the ith (i..getNumSourceLinePairs() - 1) offset       within the code segment of the start of the line in the parallel       line number array.:::
DebugVC50SrcModLineNumberMap#getLineNumber(int):::Get the ith (i..getNumSourceLinePairs() - 1) line       number.:::
DebugVC50SSFileIndex#getNumModules():::Number of file name references per module.:::
DebugVC50SSFileIndex#getNumReferences():::Count of the total number of file name references.:::
DebugVC50SSFileIndex#getModStart():::Array of indices into the NameOffset table for each       module:::
DebugVC50SSFileIndex#getRefCount():::Number of file name references per module.:::
DebugVC50SSFileIndex#getNameRef():::Array of offsets into the Names table:::
DebugVC50SSFileIndex#getNames():::List of zero terminated file names:::
DebugVC50SSGlobalTypes#getNumTypes():::Number of types in the table.:::
DebugVC50SSGlobalTypes#getTypeOffset(int):::Absolute file offset of the ith (0..getNumTypes() - 1)       type in the table.:::
DebugVC50SSGlobalTypes#getTypeIterator():::Create a new type iterator pointing to the first type in the       subsection.:::
DebugVC50SSModule#getLibrariesIndex():::Index into sstLibraries subsection if this module was linked       from a library.:::
DebugVC50SSModule#getNumCodeSegments():::Count of the number of code segments this module contributes to:::
DebugVC50SSModule#getDebuggingStyle():::Debugging style for this module:::
DebugVC50SSModule#getSegInfo(int):::Fetch description of segment to which this module contributes       code (0..getNumCodeSegments - 1):::
DebugVC50SSModule#getName():::Name of the module:::
DebugVC50SSSegMap#getNumSegDesc():::Count of the number of segment descriptors in table.:::
DebugVC50SSSegMap#getNumLogicalSegDesc():::The total number of logical segments:::
DebugVC50SSSegMap#getSegDesc(int):::Get the ith segment descriptor (0..getNumSegDesc() -       1).:::
DebugVC50SSSegName#getSegName(int):::Indexed by (0..DebugVC50SSSegMap.getNumSegDesc() - 1):::
DebugVC50SSSrcModule#getNumSourceFiles():::The number of source files contributing code to segments.:::
DebugVC50SSSrcModule#getNumCodeSegments():::The number of code segments receiving code from this module.:::
DebugVC50SSSrcModule#getSourceFileDesc(int):::Get description of ith source file       (0..getNumSourceFiles() - 1) contributing code to this       module.:::
DebugVC50SSSrcModule#getSegmentStartOffset(int):::Get ith (0..getNumCodeSegments() - 1) start offset,       within a segment, of code contributed to that segment:::
DebugVC50SSSrcModule#getSegmentEndOffset(int):::Get ith (0..getNumCodeSegments() - 1) end offset, within       a segment, of code contributed to that segment:::
DebugVC50SSSrcModule#getSegment(int):::Get ith (0..getNumCodeSegments() - 1) segment to which       this module contributes code:::
DebugVC50SSSymbolBase#getSymHashIndex():::Index of the symbol hash function:::
DebugVC50SSSymbolBase#getAddrHashIndex():::Index of the address hash function:::
DebugVC50SSSymbolBase#getSymTabSize():::Size in bytes of the symbol table:::
DebugVC50SSSymbolBase#getSymHashSize():::Size in bytes of the symbol hash table:::
DebugVC50SSSymbolBase#getAddrHashSize():::Size in bytes of the address hash table:::
DebugVC50SSSymbolBase#getSymbolIterator():::Retrieves an iterator over the symbols, which can be used to       parse these platform-dependent symbols into a platform-       independent format:::
DebugVC50Subsection#getSubsectionType():::Returns type of this subsection; see sun.jvm.hotspot.debugger.win32.coff.DebugVC50SubsectionTypes.:::
DebugVC50Subsection#getSubsectionModuleIndex():::Returns module index associated with this subsection:::
DebugVC50Subsection#getSubsectionSize():::Number of bytes in subsection.:::
DebugVC50SubsectionDirectory#getSubsection(int):::Returns subsection at (zero-based) index i.:::
DebugVC50SymbolIterator#done():::Indicates whether this iterator has processed all of the       available symbols.:::
DebugVC50SymbolIterator#next():::Go to the next symbol:::
DebugVC50SymbolIterator#getLength():::Length of record, in bytes, excluding the length field.:::
DebugVC50SymbolIterator#getType():::The type enumeration is defined in sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolTypes:::
DebugVC50SymbolIterator#getOffset():::For debugging: returns the file offset of the current symbol.:::
DebugVC50SymbolIterator#getCompilerTargetProcessor():::Machine enumeration specifying target processor; see       DebugVC50SymbolEnums.:::
DebugVC50SymbolIterator#getCompilerFlags():::Compile flags; see DebugVC50SymbolEnums.:::
DebugVC50SymbolIterator#getComplierVersion():::Length-prefixed string specifying language processor version:::
DebugVC50SymbolIterator#getRegisterSymbolType():::Type of the symbol which is in the register:::
DebugVC50SymbolIterator#getRegisterEnum():::Enumerate of the registers in which the symbol is stored:::
DebugVC50SymbolIterator#getRegisterSymbolName():::Length-prefixed name of the symbol stored in the register.:::
DebugVC50SymbolIterator#getConstantType():::Type of symbol or containing enum:::
DebugVC50SymbolIterator#getConstantValueAsInt():::Numeric leaf containing the value of the symbol as an int:::
DebugVC50SymbolIterator#getConstantValueAsLong():::Numeric leaf containing the value of the symbol as a long:::
DebugVC50SymbolIterator#getConstantValueAsFloat():::Numeric leaf containing the value of the symbol as a float:::
DebugVC50SymbolIterator#getConstantValueAsDouble():::Numeric leaf containing the value of the symbol as a double:::
DebugVC50SymbolIterator#getConstantName():::Length-prefixed name of the symbol:::
DebugVC50SymbolIterator#getUDTType():::Type of symbol:::
DebugVC50SymbolIterator#getUDTName():::Length-prefixed name of the user defined type.:::
DebugVC50SymbolIterator#getSearchSymbolOffset():::$$SYMBOL offset of the procedure or thunk record for this module       that has the lowest offset for the specified segment.:::
DebugVC50SymbolIterator#getSearchSegment():::Segment (PE section) that this Start Search refers to.:::
DebugVC50SymbolIterator#getObjectCodeViewSignature():::Signature used to determine whether changes in precompiled types       defined in this module require a recompilation of users of those       types:::
DebugVC50SymbolIterator#getObjectName():::Length prefixed name of the object file without any path       information prepended to the name.:::
DebugVC50SymbolIterator#getManyRegType():::Type index of the symbol:::
DebugVC50SymbolIterator#getManyRegCount():::Count of the register enumerates that follow.:::
DebugVC50SymbolIterator#getManyRegRegister(int):::Get the ith register (0..getManyRegCount() - 1):::
DebugVC50SymbolIterator#getManyRegName():::Name of the symbol.:::
DebugVC50SymbolIterator#getReturnFlags():::Logical or of FUNCRET_VARARGS_LEFT_TO_RIGHT_MASK (push varargs       left to right if set) and FUNCRET_RETURNEE_STACK_CLEANUP_MASK       (returnee cleans up stack if true).:::
DebugVC50SymbolIterator#getReturnStyle():::Function return style; see constants in sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolEnums.:::
DebugVC50SymbolIterator#getReturnRegisterCount():::Get count of registers containing return value; only valid for       FUNCRET_IN_REGISTERS return style.:::
DebugVC50SymbolIterator#getReturnRegister(int):::Get ith register (0..getReturnRegisterCount() - 1)       containing return value, high order first; only valid for       FUNCRET_IN_REGISTERS return style.:::
DebugVC50SymbolIterator#advanceToEntryThisSymbol():::Advance this iterator to the symbol (which actually describes       the this pointer) contained within the S_ENTRYTHIS       symbol.:::
DebugVC50SymbolIterator#getBPRelOffset():::Signed offset relative to BP:::
DebugVC50SymbolIterator#getBPRelType():::Type of the symbol.:::
DebugVC50SymbolIterator#getBPRelName():::Length-prefixed name of the symbol.:::
DebugVC50SymbolIterator#getLGDataType():::Type index of the symbol.:::
DebugVC50SymbolIterator#getLGDataOffset():::Offset portion of the symbol address.:::
DebugVC50SymbolIterator#getLGDataSegment():::Segment portion of the symbol address.:::
DebugVC50SymbolIterator#getLGDataName():::Length-prefixed name of symbol.:::
DebugVC50SymbolIterator#getLGProcParent():::Creates a new symbol iterator pointing to the symbol opening the       enclosing lexical scope of this function (if any); returns null       if there is no enclosing scope.:::
DebugVC50SymbolIterator#getLGProcParentOffset():::Gets the absolute file offset of the parent symbol, or 0 if       none:::
DebugVC50SymbolIterator#getLGProcEnd():::Creates a new symbol iterator pointing to the block end symbol       terminating the lexical scope, or NULL if there is no containing       lexical scope.:::
DebugVC50SymbolIterator#getLGProcEndOffset():::Gets the absolute file offset of the end symbol:::
DebugVC50SymbolIterator#getLGProcNext():::Creates a new symbol iterator pointing to the next outermost       scope symbol in the segment (if any); returns null if this is       the last outermost scope for the current segment:::
DebugVC50SymbolIterator#getLGProcNextOffset():::Gets the absolute file offset of the next symbol, or 0 if none:::
DebugVC50SymbolIterator#getLGProcLength():::Length in bytes of this procedure.:::
DebugVC50SymbolIterator#getLGProcDebugStart():::Offset in bytes from the start of the procedure to the point       where the stack frame has been set up:::
DebugVC50SymbolIterator#getLGProcDebugEnd():::Offset in bytes from the start of the procedure to the point       where the procedure is ready to return and has calculated its       return value, if any:::
DebugVC50SymbolIterator#getLGProcType():::Type of the procedure type record.:::
DebugVC50SymbolIterator#getLGProcOffset():::Offset portion of the procedure address.:::
DebugVC50SymbolIterator#getLGProcSegment():::Segment portion of the procedure address.:::
DebugVC50SymbolIterator#getLGProcFlags():::Value defined by bitwise or of the the PROCFLAGS enumeration in       sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolEnums.:::
DebugVC50SymbolIterator#getLGProcName():::Length-prefixed name of procedure.:::
DebugVC50SymbolIterator#getThunkParent():::Creates a new symbol iterator pointing to the symbol opening the       enclosing lexical scope of this thunk (if any); returns null if       there is no enclosing scope.:::
DebugVC50SymbolIterator#getThunkParentOffset():::Gets the absolute file offset of the parent symbol, or 0 if       none:::
DebugVC50SymbolIterator#getThunkEnd():::Creates a new symbol iterator pointing to the block end symbol       terminating the lexical scope, or NULL if there is no containing       lexical scope.:::
DebugVC50SymbolIterator#getThunkEndOffset():::Gets the absolute file offset of the end symbol:::
DebugVC50SymbolIterator#getThunkNext():::Creates a new symbol iterator pointing to the next outermost       scope symbol in the segment (if any); returns null if this is       the last outermost scope for the current segment:::
DebugVC50SymbolIterator#getThunkNextOffset():::Gets the absolute file offset of the next symbol, or 0 if none:::
DebugVC50SymbolIterator#getThunkOffset():::Offset portion of the thunk address.:::
DebugVC50SymbolIterator#getThunkSegment():::Segment portion of the procedure address.:::
DebugVC50SymbolIterator#getThunkLength():::Length in bytes of this thunk.:::
DebugVC50SymbolIterator#getThunkType():::Ordinal specifying the type of thunk; see THUNK enumeration in       sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolEnums.:::
DebugVC50SymbolIterator#getThunkName():::Length-prefixed name of thunk.:::
DebugVC50SymbolIterator#getThunkAdjustorThisDelta():::Delta to be added to "this" pointer; only valid if thunk type is       "adjustor".:::
DebugVC50SymbolIterator#getThunkAdjustorTargetName():::Length-prefixed name of target function; only valid if thunk type is       "adjustor".:::
DebugVC50SymbolIterator#getThunkVCallDisplacement():::Displacement into the virtual table; only valid if thunk type is       "vcall".:::
DebugVC50SymbolIterator#getThunkPCodeOffset():::Offset of p-code entry point; only valid if thunk type is       "pcode".:::
DebugVC50SymbolIterator#getThunkPCodeSegment():::Segment of p-code entry point; only valid if thunk type is       "pcode".:::
DebugVC50SymbolIterator#getBlockParent():::Creates a new symbol iterator pointing to the symbol opening the       enclosing lexical scope of this scope (if any); returns null if       there is no enclosing scope.:::
DebugVC50SymbolIterator#getBlockParentOffset():::Gets the absolute file offset of the parent symbol, or 0 if       none:::
DebugVC50SymbolIterator#getBlockEnd():::Creates a new symbol iterator pointing to the block end symbol       terminating this scope.:::
DebugVC50SymbolIterator#getBlockEndOffset():::Gets the absolute file offset of the end symbol:::
DebugVC50SymbolIterator#getBlockLength():::Length in bytes of the scope of this block.:::
DebugVC50SymbolIterator#getBlockOffset():::Offset portion of the segmented procedure address.:::
DebugVC50SymbolIterator#getBlockSegment():::Segment portion of the segmented procedure address.:::
DebugVC50SymbolIterator#getBlockName():::Length-prefixed name of the block.:::
DebugVC50SymbolIterator#getLabelOffset():::Offset portion of the segmented address of the start of the       block.:::
DebugVC50SymbolIterator#getLabelSegment():::Segment portion of the segmented address of the start of the       block.:::
DebugVC50SymbolIterator#getLabelFlags():::Label flags:::
DebugVC50SymbolIterator#getLabelName():::Length prefixed name of label.:::
DebugVC50SymbolIterator#getChangeOffset():::Offset portion of start of the block where the change occurs.:::
DebugVC50SymbolIterator#getChangeSegment():::Segment portion of start of the block where the change occurs.:::
DebugVC50SymbolIterator#getChangeModel():::The execution model, enumerated in EXMODEL constants in sun.jvm.hotspot.debugger.win32.coff.DebugVC50SymbolEnums.:::
DebugVC50SymbolIterator#getVTableRoot():::The type index of the class at the root of the path.:::
DebugVC50SymbolIterator#getVTablePath():::Type index of the record describing the base class path from the       root to the leaf class for the virtual function table.:::
DebugVC50SymbolIterator#getVTableOffset():::Offset portion of start of the virtual function table.:::
DebugVC50SymbolIterator#getVTableSegment():::Segment portion of the virtual function table.:::
DebugVC50SymbolIterator#getRegRelOffset():::Signed offset relative to register.:::
DebugVC50SymbolIterator#getRegRelType():::Type of the symbol.:::
DebugVC50SymbolIterator#getRegRelRegister():::Register enumerates on which the symbol is based:::
DebugVC50SymbolIterator#getRegRelName():::Length-prefixed name of the symbol.:::
DebugVC50SymbolIterator#getLThreadType():::Type index.:::
DebugVC50SymbolIterator#getLThreadOffset():::Offset into thread local storage.:::
DebugVC50SymbolIterator#getLThreadSegment():::Segment of thread local storage.:::
DebugVC50SymbolIterator#getLThreadName():::Length prefixed name.:::
DebugVC50TypeIterator#done():::Indicates whether the iteration through the type table is       complete.:::
DebugVC50TypeIterator#next():::Go to the next type in the type table:::
DebugVC50TypeIterator#getLength():::Gets the length, in bytes, of the current type record.:::
DebugVC50TypeIterator#getTypeIndex():::Gets the type index of the current type:::
DebugVC50TypeIterator#getNumTypes():::Debugging support only:::
DebugVC50TypeIterator#typeStringDone():::Indicates whether iteration through the current type string is       complete.:::
DebugVC50TypeIterator#typeStringNext():::Goes to the next element in the current type string:::
DebugVC50TypeIterator#typeStringLeaf():::Return the leaf index (see sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeLeafIndices)       for the current element of the current type string.:::
DebugVC50TypeIterator#typeStringOffset():::For debugging: returns the file offset of the current type       string leaf.:::
DebugVC50TypeIterator#getModifierIndex():::Type index of the modified type.:::
DebugVC50TypeIterator#getModifierAttribute():::Attributes specified in MODIFIER_ enums in sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeEnums.:::
DebugVC50TypeIterator#getPointerType():::Type index of object pointed to.:::
DebugVC50TypeIterator#getPointerAttributes():::Pointer attributes:::
DebugVC50TypeIterator#getPointerBasedOnTypeIndex():::Only valid if the pointer type is BASED_ON_TYPE; retrieves index       of type.:::
DebugVC50TypeIterator#getPointerBasedOnTypeName():::Only valid if the pointer type is BASED_ON_TYPE; retrieves name       of type.:::
DebugVC50TypeIterator#getPointerToMemberClass():::Only valid if the pointer mode is either PTR_TO_DATA_MEMBER or       PTR_TO_METHOD; retrieves the type index of the containing       class.:::
DebugVC50TypeIterator#getPointerToMemberFormat():::Only valid if the pointer mode is either PTR_TO_DATA_MEMBER or       PTR_TO_METHOD; retrieves the data format of the pointer in       memory:::
DebugVC50TypeIterator#getArrayElementType():::Type index of each array element.:::
DebugVC50TypeIterator#getArrayIndexType():::Type index of indexing variable.:::
DebugVC50TypeIterator#getArrayLength():::Length of the array in bytes.:::
DebugVC50TypeIterator#getArrayName():::Length-prefixed name of array.:::
DebugVC50TypeIterator#getClassCount():::Number of elements in the class or structure:::
DebugVC50TypeIterator#getClassProperty():::Property bit field; see PROPERTY_ enumeration in sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeEnums.:::
DebugVC50TypeIterator#getClassFieldList():::Type index of the field list for this class.:::
DebugVC50TypeIterator#getClassFieldListIterator():::Get new iterator pointing at the field list of this class.:::
DebugVC50TypeIterator#getClassDerivationList():::Type index of the derivation list:::
DebugVC50TypeIterator#getClassVShape():::Type index of the virtual function table shape descriptor.:::
DebugVC50TypeIterator#getClassSize():::Numeric leaf specifying size in bytes of the structure.:::
DebugVC50TypeIterator#getClassName():::Length-prefixed name of this type.:::
DebugVC50TypeIterator#getUnionCount():::Number of fields in the union.:::
DebugVC50TypeIterator#getUnionProperty():::Property bit field.:::
DebugVC50TypeIterator#getUnionFieldList():::Type index of field list.:::
DebugVC50TypeIterator#getUnionFieldListIterator():::Get new iterator pointing at the field list of this union.:::
DebugVC50TypeIterator#getUnionSize():::Numeric leaf specifying size in bytes of the union.:::
DebugVC50TypeIterator#getUnionName():::Length-prefixed name of union.:::
DebugVC50TypeIterator#getEnumCount():::Number of enumerates.:::
DebugVC50TypeIterator#getEnumProperty():::Property bit field.:::
DebugVC50TypeIterator#getEnumType():::Index of underlying type of enum.:::
DebugVC50TypeIterator#getEnumFieldList():::Type index of field list.:::
DebugVC50TypeIterator#getEnumFieldListIterator():::Get new iterator pointing at the field list of this enum.:::
DebugVC50TypeIterator#getEnumName():::Length-prefixed name of enum.:::
DebugVC50TypeIterator#getProcedureReturnType():::Type index of the value returned by the procedure.:::
DebugVC50TypeIterator#getProcedureCallingConvention():::Calling convention of the procedure; see CALLCONV_ enumeration       in sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeEnums.:::
DebugVC50TypeIterator#getProcedureNumberOfParameters():::Number of parameters.:::
DebugVC50TypeIterator#getProcedureArgumentList():::Type index of argument list type record.:::
DebugVC50TypeIterator#getProcedureArgumentListIterator():::Get new iterator pointing at the argument list of this procedure.:::
DebugVC50TypeIterator#getMFunctionReturnType():::Type index of the value returned by the procedure.:::
DebugVC50TypeIterator#getMFunctionContainingClass():::Type index of the containing class of the function.:::
DebugVC50TypeIterator#getMFunctionThis():::Type index of the this parameter of the member function:::
DebugVC50TypeIterator#getMFunctionCallingConvention():::Calling convention of the procedure; see CALLCONV_ enumeration       in sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeEnums.:::
DebugVC50TypeIterator#getMFunctionNumberOfParameters():::Number of parameters:::
DebugVC50TypeIterator#getMFunctionArgumentList():::List of parameter specifiers:::
DebugVC50TypeIterator#getMFunctionArgumentListIterator():::Get new iterator pointing at the argument list of this member function.:::
DebugVC50TypeIterator#getMFunctionThisAdjust():::Logical this adjustor for the method:::
DebugVC50TypeIterator#getVTShapeCount():::Number of descriptors.:::
DebugVC50TypeIterator#getVTShapeDescriptor(int):::Fetch the ith descriptor (0..getVTShapeCount() - 1):::
DebugVC50TypeIterator#getBasicArrayType():::Type of each element of the array.:::
DebugVC50TypeIterator#getLabelAddressMode():::Addressing mode of the label, described by LABEL_ADDR_MODE_ enum       in sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeEnums.:::
DebugVC50TypeIterator#getDimArrayType():::Underlying type of the array.:::
DebugVC50TypeIterator#getDimArrayDimInfo():::Index of the type record containing the dimension information.:::
DebugVC50TypeIterator#getDimArrayName():::Length-prefixed name of the array.:::
DebugVC50TypeIterator#getVFTPathCount():::Count of number of bases in the path to the virtual function       table.:::
DebugVC50TypeIterator#getVFTPathBase(int):::Type indices of the base classes in the path       (0..getVFTPathCount() - 1).:::
DebugVC50TypeIterator#getSkipIndex():::In processing $$TYPES, the index counter is advanced to index       count, skipping all intermediate indices:::
DebugVC50TypeIterator#getArgListCount():::Count of number of indices in list.:::
DebugVC50TypeIterator#getArgListType(int):::List of type indices (0..getArgListCount() - 1) for describing       the formal parameters to a function or method.:::
DebugVC50TypeIterator#getDefaultArgType():::Type index of resulting expression.:::
DebugVC50TypeIterator#getDefaultArgExpression():::Length-prefixed string of supplied default expression.:::
DebugVC50TypeIterator#getDerivedCount():::Number of types in the list.:::
DebugVC50TypeIterator#getDerivedType(int):::Fetch ith derived type (0..getDerivedCount() - 1).:::
DebugVC50TypeIterator#getBitfieldFieldType():::Type index of the field.:::
DebugVC50TypeIterator#getBitfieldLength():::The length in bits of the object.:::
DebugVC50TypeIterator#getBitfieldPosition():::Starting position (from bit 0) of the object in the word.:::
DebugVC50TypeIterator#getMListAttribute():::Attribute of the member function; see sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeEnums and sun.jvm.hotspot.debugger.win32.coff.DebugVC50MemberAttributes.:::
DebugVC50TypeIterator#getMListLength():::Number of types corresponding to this overloaded method:::
DebugVC50TypeIterator#getMListType(int):::Type index of the procedure record for the ith occurrence       of the function (0..getMListLength() - 1).:::
DebugVC50TypeIterator#isMListIntroducingVirtual():::Convenience routine indicating whether this member function is       introducing virtual.:::
DebugVC50TypeIterator#getMListVtabOffset():::Present only when property attribute is introducing virtual       (optional):::
DebugVC50TypeIterator#getRefSym():::Create a new SymbolIterator pointing at the copy of the symbol       this record contains.:::
DebugVC50TypeIterator#getBClassAttribute():::Member attribute bit field.:::
DebugVC50TypeIterator#getBClassType():::Index to type record of the class:::
DebugVC50TypeIterator#getBClassOffset():::Offset of subobject that represents the base class within the       structure.:::
DebugVC50TypeIterator#getVBClassAttribute():::Member attribute bit field.:::
DebugVC50TypeIterator#getVBClassBaseClassType():::Index to type record of the direct or indirect virtual base       class:::
DebugVC50TypeIterator#getVBClassVirtualBaseClassType():::Type index of the virtual base pointer for this base.:::
DebugVC50TypeIterator#getVBClassVBPOff():::Numeric leaf specifying the offset of the virtual base pointer       from the address point of the class for this virtual base.:::
DebugVC50TypeIterator#getVBClassVBOff():::Numeric leaf specifying the index into the virtual base       displacement table of the entry that contains the displacement       of the virtual base:::
DebugVC50TypeIterator#getIVBClassAttribute():::Member attribute bit field.:::
DebugVC50TypeIterator#getIVBClassBType():::Index to type record of the direct or indirect virtual base       class:::
DebugVC50TypeIterator#getIVBClassVBPType():::Type index of the virtual base pointer for this base.:::
DebugVC50TypeIterator#getIVBClassVBPOff():::Numeric leaf specifying the offset of the virtual base pointer       from the address point of the class for this virtual base.:::
DebugVC50TypeIterator#getIVBClassVBOff():::Numeric leaf specifying the index into the virtual base       displacement table of the entry that contains the displacement       of the virtual base:::
DebugVC50TypeIterator#getEnumerateAttribute():::Member attribute bit field.:::
DebugVC50TypeIterator#getEnumerateValue():::Numeric leaf specifying the value of enumerate.:::
DebugVC50TypeIterator#getEnumerateName():::Length-prefixed name of the member field.:::
DebugVC50TypeIterator#getFriendFcnType():::Index to type record of the friend function.:::
DebugVC50TypeIterator#getFriendFcnName():::Length prefixed name of friend function.:::
DebugVC50TypeIterator#getIndexValue():::Type index:::
DebugVC50TypeIterator#getIndexIterator():::Create a new type iterator starting at the above index.:::
DebugVC50TypeIterator#getMemberAttribute():::Member attribute bit field.:::
DebugVC50TypeIterator#getMemberType():::Index to type record for field.:::
DebugVC50TypeIterator#getMemberOffset():::Numeric leaf specifying the offset of field in the structure.:::
DebugVC50TypeIterator#getMemberName():::Length-prefixed name of the member field.:::
DebugVC50TypeIterator#getStaticAttribute():::Member attribute bit field.:::
DebugVC50TypeIterator#getStaticType():::Index to type record for field.:::
DebugVC50TypeIterator#getStaticName():::Length-prefixed name of the member field.:::
DebugVC50TypeIterator#getMethodCount():::Number of occurrences of function within the class:::
DebugVC50TypeIterator#getMethodList():::Type index of method list.:::
DebugVC50TypeIterator#getMethodName():::Length-prefixed name of method.:::
DebugVC50TypeIterator#getNestedType():::Type index of nested type.:::
DebugVC50TypeIterator#getNestedName():::Length-prefixed name of type.:::
DebugVC50TypeIterator#getVFuncTabType():::Index to the pointer record describing the pointer:::
DebugVC50TypeIterator#getFriendClsType():::Index to type record of the friend class:::
DebugVC50TypeIterator#getOneMethodAttribute():::Method attribute; see sun.jvm.hotspot.debugger.win32.coff.DebugVC50TypeEnums and       sun.jvm.hotspot.debugger.win32.coff.DebugVC50MemberAttributes.:::
DebugVC50TypeIterator#getOneMethodType():::Type index of method.:::
DebugVC50TypeIterator#isOneMethodIntroducingVirtual():::Convenience routine indicating whether this method is       introducing virtual.:::
DebugVC50TypeIterator#getOneMethodVBaseOff():::Offset in virtual function table if introducing virtual method:::
DebugVC50TypeIterator#getOneMethodName():::Length prefixed name of method.:::
DebugVC50TypeIterator#getVFuncOffType():::Type index of virtual function table pointer.:::
DebugVC50TypeIterator#getVFuncOffOffset():::Offset of virtual function table pointer relative to address       point of class.:::
DebugVC50TypeIterator#getNestedExAttribute():::Nested type attribute (protection fields are valid).:::
DebugVC50TypeIterator#getNestedExType():::Type index of nested type.:::
DebugVC50TypeIterator#getNestedExName():::Length-prefixed name of type.:::
DebugVC50TypeIterator#getMemberModifyAttribute():::New protection attributes.:::
DebugVC50TypeIterator#getMemberModifyType():::Type index of base class that introduced the member.:::
DebugVC50TypeIterator#getMemberModifyName():::Length-prefixed name of member.:::
DebugVC50TypeIterator#getNumericTypeAt(int):::Fetch the two-byte type (or data, for short integer numeric       leaves) of the numeric leaf at the given offset, in bytes, from       the start of the current leaf.:::
DebugVC50TypeIterator#getNumericLengthAt(int):::The size in bytes of the numeric leaf at the given offset, in       bytes, from the start of the current leaf.:::
DebugVC50TypeIterator#getNumericIntAt(int):::Fetch the value of the integer numeric leaf at the given offset,       in bytes, from the start of the current leaf.:::
DebugVC50TypeIterator#getNumericLongAt(int):::Fetch the value of the long or integer numeric leaf at the given       offset, in bytes, from the start of the current leaf.:::
DebugVC50TypeIterator#getNumericFloatAt(int):::Fetch the value of the single-precision floating-point numeric       leaf at the given offset, in bytes, from the start of the       current leaf.:::
DebugVC50TypeIterator#getNumericDoubleAt(int):::Fetch the value of the double-precision floating-point numeric       leaf at the given offset, in bytes, from the start of the       current leaf.:::
DebugVC50TypeIterator#getNumericDataAt(int):::Fetch the raw bytes, including LF_ prefix (if any), of the       numeric leaf at the given offset, in bytes, from the start of       the current leaf.:::
ExportDirectoryTable#getExportFlags():::A reserved field, set to zero for now.:::
ExportDirectoryTable#getTimeDateStamp():::Time and date the export data was created.:::
ExportDirectoryTable#getMajorVersion():::Major version number:::
ExportDirectoryTable#getMinorVersion():::Minor version number.:::
ExportDirectoryTable#getNameRVA():::Address of the ASCII string containing the name of the       DLL:::
ExportDirectoryTable#getDLLName():::Convenience routine which returns the name of the DLL containing       this export directory.:::
ExportDirectoryTable#getOrdinalBase():::Starting ordinal number for exports in this image:::
ExportDirectoryTable#getNumberOfAddressTableEntries():::Number of entries in the Export Address Table.:::
ExportDirectoryTable#getNumberOfNamePointers():::Number of entries in the Name Pointer Table (also the number of       entries in the Ordinal Table).:::
ExportDirectoryTable#getExportAddressTableRVA():::Address of the Export Address Table, relative to the image       base.:::
ExportDirectoryTable#getNamePointerTableRVA():::Address of the Export Name Pointer Table, relative to the image       base:::
ExportDirectoryTable#getOrdinalTableRVA():::Address of the Ordinal Table, relative to the image base.:::
ExportDirectoryTable#getExportName(int):::Returns the ith exported symbol (from 0..#getNumberOfNamePointers - 1):::
ExportDirectoryTable#getExportOrdinal(int):::Returns the ith entry (0..#getNumberOfNamePointers in the Export Ordinal Table:::
ExportDirectoryTable#isExportAddressForwarder(short):::Indicates whether the specified export address is really a       forwarder, in which case the value is not an address but a       string.:::
ExportDirectoryTable#getExportAddressForwarder(short):::Get the forwarder name for the given ordinal:::
ExportDirectoryTable#getExportAddress(short):::<P> Takes in an ordinal from the Export Ordinal Table (see       #getExportOrdinal):::
OptionalHeader#getMagicNumber():::Returns the magic number of the Optional Header (#MAGIC_PE32, #MAGIC_PE32_PLUS, or #MAGIC_ROM_IMAGE):::
OptionalHeader#getStandardFields():::These are defined for all implementations of COFF, including       UNIX.:::
OptionalHeader#getWindowsSpecificFields():::These include additional fields to support specific features of       Windows (for example, subsystem).:::
OptionalHeader#getDataDirectories():::Gets the data directories portion of the optional header.:::
OptionalHeaderDataDirectories#getExportTable():::Export Table address and size.:::
OptionalHeaderDataDirectories#getExportDirectoryTable():::Returns the Export Table, or null if none was present.:::
OptionalHeaderDataDirectories#getImportTable():::Import Table address and size:::
OptionalHeaderDataDirectories#getResourceTable():::Resource Table address and size.:::
OptionalHeaderDataDirectories#getExceptionTable():::Exception Table address and size.:::
OptionalHeaderDataDirectories#getCertificateTable():::Attribute Certificate Table address and size.:::
OptionalHeaderDataDirectories#getBaseRelocationTable():::Base Relocation Table address and size.:::
OptionalHeaderDataDirectories#getDebug():::Debug data starting address and size.:::
OptionalHeaderDataDirectories#getDebugDirectory():::Returns the Debug Directory, or null if none was present.:::
OptionalHeaderDataDirectories#getArchitecture():::Architecture-specific data address and size.:::
OptionalHeaderDataDirectories#getGlobalPtr():::Relative virtual address of the value to be stored in the global       pointer register:::
OptionalHeaderDataDirectories#getTLSTable():::Thread Local Storage (TLS) Table address and size.:::
OptionalHeaderDataDirectories#getLoadConfigTable():::Load Configuration Table address and size.:::
OptionalHeaderDataDirectories#getBoundImportTable():::Bound Import Table address and size.:::
OptionalHeaderDataDirectories#getImportAddressTable():::Import Address Table address and size.:::
OptionalHeaderDataDirectories#getDelayImportDescriptor():::Address and size of the Delay Import Descriptor.:::
OptionalHeaderDataDirectories#getCOMPlusRuntimeHeader():::COM+ Runtime Header address and size:::
OptionalHeaderStandardFields#getSizeOfCode():::Size of the code (text) section, or the sum of all code sections       if there are multiple sections.:::
OptionalHeaderStandardFields#getSizeOfInitializedData():::Size of the initialized data section, or the sum of all such       sections if there are multiple data sections.:::
OptionalHeaderStandardFields#getSizeOfUninitializedData():::Size of the uninitialized data section (BSS), or the sum of all       such sections if there are multiple BSS sections.:::
OptionalHeaderStandardFields#getAddressOfEntryPoint():::Address of entry point, relative to image base, when executable       file is loaded into memory:::
OptionalHeaderStandardFields#getBaseOfCode():::Address, relative to image base, of beginning of code section,       when loaded into memory.:::
OptionalHeaderStandardFields#getBaseOfData():::Onle present in PE32 files; absent in PE32+ files:::
OptionalHeaderWindowsSpecificFields#getImageBase():::Preferred address of first byte of image when loaded into       memory; must be a multiple of 64K:::
OptionalHeaderWindowsSpecificFields#getSectionAlignment():::Alignment (in bytes) of sections when loaded into memory:::
OptionalHeaderWindowsSpecificFields#getFileAlignment():::Alignment factor (in bytes) used to align the raw data of       sections in the image file:::
OptionalHeaderWindowsSpecificFields#getMajorOperatingSystemVersion():::Major version number of required OS.:::
OptionalHeaderWindowsSpecificFields#getMinorOperatingSystemVersion():::Minor version number of required OS.:::
OptionalHeaderWindowsSpecificFields#getMajorImageVersion():::Major version number of image.:::
OptionalHeaderWindowsSpecificFields#getMinorImageVersion():::Minor version number of image.:::
OptionalHeaderWindowsSpecificFields#getMajorSubsystemVersion():::Major version number of subsystem.:::
OptionalHeaderWindowsSpecificFields#getMinorSubsystemVersion():::Minor version number of subsystem.:::
OptionalHeaderWindowsSpecificFields#getSizeOfImage():::Size, in bytes, of image, including all headers; must be a       multiple of Section Alignment.:::
OptionalHeaderWindowsSpecificFields#getSizeOfHeaders():::Combined size of MS-DOS stub, PE Header, and section headers       rounded up to a multiple of FileAlignment.:::
OptionalHeaderWindowsSpecificFields#getCheckSum():::Image file checksum:::
OptionalHeaderWindowsSpecificFields#getSubsystem():::Subsystem required to run this image; returns one of the       constants defined in sun.jvm.hotspot.debugger.win32.coff.WindowsNTSubsystem.:::
OptionalHeaderWindowsSpecificFields#getDLLCharacteristics():::Indicates characteristics of a DLL; see sun.jvm.hotspot.debugger.win32.coff.DLLCharacteristics.:::
OptionalHeaderWindowsSpecificFields#getSizeOfStackReserve():::Size of stack to reserve:::
OptionalHeaderWindowsSpecificFields#getSizeOfStackCommit():::Size of stack to commit.:::
OptionalHeaderWindowsSpecificFields#getSizeOfHeapReserve():::Size of local heap space to reserve:::
OptionalHeaderWindowsSpecificFields#getSizeOfHeapCommit():::Size of local heap space to commit.:::
OptionalHeaderWindowsSpecificFields#getLoaderFlags():::Obsolete.:::
OptionalHeaderWindowsSpecificFields#getNumberOfRvaAndSizes():::Number of data-dictionary entries in the remainder of the       Optional Header:::
SectionHeader#getSize():::Total size of the section when loaded into memory:::
SectionHeader#getVirtualAddress():::For executable images this is the address of the first byte of       the section, when loaded into memory, relative to the image       base:::
SectionHeader#getSizeOfRawData():::Size of the section (object file) or size of the initialized       data on disk (image files):::
SectionHeader#getPointerToRawData():::File pointer to section's first page within the COFF file:::
SectionHeader#getPointerToRelocations():::File pointer to beginning of relocation entries for the section:::
SectionHeader#getPointerToLineNumbers():::File pointer to beginning of line-number entries for the       section:::
SectionHeader#getNumberOfRelocations():::Number of relocation entries for the section:::
SectionHeader#getNumberOfLineNumbers():::Number of line-number entries for the section.:::
SectionHeader#getSectionFlags():::Flags describing section's characteristics; see sun.jvm.hotspot.debugger.win32.coff.SectionFlags.:::
SectionHeader#hasSectionFlag(int):::Returns true if the appropriate flag (from sun.jvm.hotspot.debugger.win32.coff.SectionFlags) is set.:::
SectionHeader#getCOFFRelocation(int):::This is only present for object files:::
SectionHeader#getCOFFLineNumber(int):::Retrieves the COFF line number at the given index; valid indices       are numbered 0...getNumberOfLineNumbers() - 1.:::

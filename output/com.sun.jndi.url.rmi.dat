rmiURLContext#getRootURLContext(String, Hashtable):::Resolves the registry portion of "url" to the corresponding RMI registry, and returns the atomic object name as the remaining name.:::if->url->startsWith->throw->new->IllegalArgumentException->host->port->objName->i->if->url->startsWith->slash->url->indexOf->if->url->length->if->url->startsWith->brac->url->indexOf->if->throw->new->IllegalArgumentException->url->substring->else->colon->url->indexOf->hostEnd->if->url->substring->if->if->url->startsWith->Integer->url->substring->parseInt->else->throw->new->IllegalArgumentException->if->equals->if->url->startsWith->if->url->length->url->substring->remaining->new->CompositeName->if->remaining->add->regCtx->new->RegistryContext->return->new->ResolveResult
rmiURLContextFactory#getObjectInstance(Object, Name, Context, Hashtable):::rmi context factory get object instance:::if->return->new->rmiURLContext->else->if->return->getUsingURL->else->if->return->getUsingURLs->else->throw->new->ConfigurationException
rmiURLContextFactory#getUsingURL(String, Hashtable):::rmi context factory get using l:::urlCtx->new->rmiURLContext->try->return->urlCtx->lookup->catch->finally->urlCtx->close
rmiURLContextFactory#getUsingURLs(String[], Hashtable):::rmi context factory get using ls:::if->throw->new->ConfigurationException->urlCtx->new->rmiURLContext->try->ne->for->i->throw->catch->finally->urlCtx->close

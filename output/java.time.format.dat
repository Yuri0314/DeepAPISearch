java.time.format.DateTimeFormatter#ofPattern(String)->DateTimeFormatter:::Creates a formatter using the specified pattern
java.time.format.DateTimeFormatter#ofPattern(String, Locale)->DateTimeFormatter:::Creates a formatter using the specified pattern and locale
java.time.format.DateTimeFormatter#ofLocalizedDate(FormatStyle)->DateTimeFormatter:::Returns a locale specific date format for the ISO chronology
java.time.format.DateTimeFormatter#ofLocalizedTime(FormatStyle)->DateTimeFormatter:::Returns a locale specific time format for the ISO chronology
java.time.format.DateTimeFormatter#ofLocalizedDateTime(FormatStyle)->DateTimeFormatter:::Returns a locale specific date-time formatter for the ISO chronology
java.time.format.DateTimeFormatter#ofLocalizedDateTime(FormatStyle, FormatStyle)->DateTimeFormatter:::Returns a locale specific date and time format for the ISO chronology
java.time.format.DateTimeFormatter#parsedExcessDays()->TemporalQuery<Period>:::A query that provides access to the excess days that were parsed
java.time.format.DateTimeFormatter#parsedLeapSecond()->TemporalQuery<Boolean>:::A query that provides access to whether a leap-second was parsed
java.time.format.DateTimeFormatter#getLocale()->Locale:::Gets the locale to be used during formatting
java.time.format.DateTimeFormatter#withLocale(Locale)->DateTimeFormatter:::Returns a copy of this formatter with a new locale
java.time.format.DateTimeFormatter#localizedBy(Locale)->DateTimeFormatter:::Returns a copy of this formatter with localized values of the locale, calendar, region, decimal style and/or timezone, that supercede values in this formatter
java.time.format.DateTimeFormatter#getDecimalStyle()->DecimalStyle:::Gets the DecimalStyle to be used during formatting.
java.time.format.DateTimeFormatter#withDecimalStyle(DecimalStyle)->DateTimeFormatter:::Returns a copy of this formatter with a new DecimalStyle
java.time.format.DateTimeFormatter#getChronology()->Chronology:::Gets the overriding chronology to be used during formatting
java.time.format.DateTimeFormatter#withChronology(Chronology)->DateTimeFormatter:::Returns a copy of this formatter with a new override chronology
java.time.format.DateTimeFormatter#getZone()->ZoneId:::Gets the overriding zone to be used during formatting
java.time.format.DateTimeFormatter#withZone(ZoneId)->DateTimeFormatter:::Returns a copy of this formatter with a new override zone
java.time.format.DateTimeFormatter#getResolverStyle()->ResolverStyle:::Gets the resolver style to use during parsing
java.time.format.DateTimeFormatter#withResolverStyle(ResolverStyle)->DateTimeFormatter:::Returns a copy of this formatter with a new resolver style
java.time.format.DateTimeFormatter#getResolverFields()->Set<TemporalField>:::Gets the resolver fields to use during parsing
java.time.format.DateTimeFormatter#withResolverFields(TemporalField...)->DateTimeFormatter:::Returns a copy of this formatter with a new set of resolver fields
java.time.format.DateTimeFormatter#withResolverFields(Set<TemporalField>)->DateTimeFormatter:::Returns a copy of this formatter with a new set of resolver fields
java.time.format.DateTimeFormatter#format(TemporalAccessor)->String:::Formats a date-time object using this formatter
java.time.format.DateTimeFormatter#formatTo(TemporalAccessor, Appendable)->void:::Formats a date-time object to an Appendable using this formatter
java.time.format.DateTimeFormatter#parse(CharSequence)->TemporalAccessor:::Fully parses the text producing a temporal object
java.time.format.DateTimeFormatter#parse(CharSequence, ParsePosition)->TemporalAccessor:::Parses the text using this formatter, providing control over the text position
java.time.format.DateTimeFormatter#parse(CharSequence, TemporalQuery<T>)->T:::Fully parses the text producing an object of the specified type
java.time.format.DateTimeFormatter#parseBest(CharSequence, TemporalQuery<?>...)->TemporalAccessor:::Fully parses the text producing an object of one of the specified types
java.time.format.DateTimeFormatter#parseUnresolved(CharSequence, ParsePosition)->TemporalAccessor:::Parses the text using this formatter, without resolving the result, intended for advanced use cases
java.time.format.DateTimeFormatter#toPrinterParser(boolean)->CompositePrinterParser:::Returns the formatter as a composite printer parser.
java.time.format.DateTimeFormatter#toFormat()->Format:::Returns this formatter as a java.text.Format instance
java.time.format.DateTimeFormatter#toFormat(TemporalQuery<?>)->Format:::Returns this formatter as a java.text.Format instance that will parse using the specified query
java.time.format.DateTimeFormatter#toString()->String:::Returns a description of the underlying formatters.
java.time.format.DateTimeFormatter.ClassicFormat#format(Object, StringBuffer, FieldPosition)->StringBuffer:::
java.time.format.DateTimeFormatter.ClassicFormat#parseObject(String)->Object:::
java.time.format.DateTimeFormatter.ClassicFormat#parseObject(String, ParsePosition)->Object:::
java.time.format.DateTimeFormatterBuilder#getLocalizedDateTimePattern(FormatStyle, FormatStyle, Chronology, Locale)->String:::Gets the formatting pattern for date and time styles for a locale and chronology
java.time.format.DateTimeFormatterBuilder#parseCaseSensitive()->DateTimeFormatterBuilder:::Changes the parse style to be case sensitive for the remainder of the formatter
java.time.format.DateTimeFormatterBuilder#parseCaseInsensitive()->DateTimeFormatterBuilder:::Changes the parse style to be case insensitive for the remainder of the formatter
java.time.format.DateTimeFormatterBuilder#parseStrict()->DateTimeFormatterBuilder:::Changes the parse style to be strict for the remainder of the formatter
java.time.format.DateTimeFormatterBuilder#parseLenient()->DateTimeFormatterBuilder:::Changes the parse style to be lenient for the remainder of the formatter
java.time.format.DateTimeFormatterBuilder#parseDefaulting(TemporalField, long)->DateTimeFormatterBuilder:::Appends a default value for a field to the formatter for use in parsing
java.time.format.DateTimeFormatterBuilder#appendValue(TemporalField)->DateTimeFormatterBuilder:::Appends the value of a date-time field to the formatter using a normal output style
java.time.format.DateTimeFormatterBuilder#appendValue(TemporalField, int)->DateTimeFormatterBuilder:::Appends the value of a date-time field to the formatter using a fixed width, zero-padded approach
java.time.format.DateTimeFormatterBuilder#appendValue(TemporalField, int, int, SignStyle)->DateTimeFormatterBuilder:::Appends the value of a date-time field to the formatter providing full control over formatting
java.time.format.DateTimeFormatterBuilder#appendValueReduced(TemporalField, int, int, int)->DateTimeFormatterBuilder:::Appends the reduced value of a date-time field to the formatter
java.time.format.DateTimeFormatterBuilder#appendValueReduced(TemporalField, int, int, ChronoLocalDate)->DateTimeFormatterBuilder:::Appends the reduced value of a date-time field to the formatter
java.time.format.DateTimeFormatterBuilder#appendFraction(TemporalField, int, int, boolean)->DateTimeFormatterBuilder:::Appends the fractional value of a date-time field to the formatter
java.time.format.DateTimeFormatterBuilder#appendText(TemporalField)->DateTimeFormatterBuilder:::Appends the text of a date-time field to the formatter using the full text style
java.time.format.DateTimeFormatterBuilder#appendText(TemporalField, TextStyle)->DateTimeFormatterBuilder:::Appends the text of a date-time field to the formatter
java.time.format.DateTimeFormatterBuilder#appendText(TemporalField, Map<Long, String>)->DateTimeFormatterBuilder:::Appends the text of a date-time field to the formatter using the specified map to supply the text
java.time.format.DateTimeFormatterBuilder#appendInstant()->DateTimeFormatterBuilder:::Appends an instant using ISO-8601 to the formatter, formatting fractional digits in groups of three
java.time.format.DateTimeFormatterBuilder#appendInstant(int)->DateTimeFormatterBuilder:::Appends an instant using ISO-8601 to the formatter with control over the number of fractional digits
java.time.format.DateTimeFormatterBuilder#appendOffsetId()->DateTimeFormatterBuilder:::Appends the zone offset, such as '+01:00', to the formatter
java.time.format.DateTimeFormatterBuilder#appendOffset(String, String)->DateTimeFormatterBuilder:::Appends the zone offset, such as '+01:00', to the formatter
java.time.format.DateTimeFormatterBuilder#appendLocalizedOffset(TextStyle)->DateTimeFormatterBuilder:::Appends the localized zone offset, such as 'GMT+01:00', to the formatter
java.time.format.DateTimeFormatterBuilder#appendZoneId()->DateTimeFormatterBuilder:::Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter
java.time.format.DateTimeFormatterBuilder#appendZoneRegionId()->DateTimeFormatterBuilder:::Appends the time-zone region ID, such as 'Europe/Paris', to the formatter, rejecting the zone ID if it is a ZoneOffset
java.time.format.DateTimeFormatterBuilder#appendZoneOrOffsetId()->DateTimeFormatterBuilder:::Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter, using the best available zone ID
java.time.format.DateTimeFormatterBuilder#appendZoneText(TextStyle)->DateTimeFormatterBuilder:::Appends the time-zone name, such as 'British Summer Time', to the formatter
java.time.format.DateTimeFormatterBuilder#appendZoneText(TextStyle, Set<ZoneId>)->DateTimeFormatterBuilder:::Appends the time-zone name, such as 'British Summer Time', to the formatter
java.time.format.DateTimeFormatterBuilder#appendGenericZoneText(TextStyle)->DateTimeFormatterBuilder:::Appends the generic time-zone name, such as 'Pacific Time', to the formatter
java.time.format.DateTimeFormatterBuilder#appendGenericZoneText(TextStyle, Set<ZoneId>)->DateTimeFormatterBuilder:::Appends the generic time-zone name, such as 'Pacific Time', to the formatter
java.time.format.DateTimeFormatterBuilder#appendChronologyId()->DateTimeFormatterBuilder:::Appends the chronology ID, such as 'ISO' or 'ThaiBuddhist', to the formatter
java.time.format.DateTimeFormatterBuilder#appendChronologyText(TextStyle)->DateTimeFormatterBuilder:::Appends the chronology name to the formatter
java.time.format.DateTimeFormatterBuilder#appendLocalized(FormatStyle, FormatStyle)->DateTimeFormatterBuilder:::Appends a localized date-time pattern to the formatter
java.time.format.DateTimeFormatterBuilder#appendLiteral(char)->DateTimeFormatterBuilder:::Appends a character literal to the formatter
java.time.format.DateTimeFormatterBuilder#appendLiteral(String)->DateTimeFormatterBuilder:::Appends a string literal to the formatter
java.time.format.DateTimeFormatterBuilder#append(DateTimeFormatter)->DateTimeFormatterBuilder:::Appends all the elements of a formatter to the builder
java.time.format.DateTimeFormatterBuilder#appendOptional(DateTimeFormatter)->DateTimeFormatterBuilder:::Appends a formatter to the builder which will optionally format/parse
java.time.format.DateTimeFormatterBuilder#appendPattern(String)->DateTimeFormatterBuilder:::Appends the elements defined by the specified pattern to the builder
java.time.format.DateTimeFormatterBuilder#padNext(int)->DateTimeFormatterBuilder:::Causes the next added printer/parser to pad to a fixed width using a space
java.time.format.DateTimeFormatterBuilder#padNext(int, char)->DateTimeFormatterBuilder:::Causes the next added printer/parser to pad to a fixed width
java.time.format.DateTimeFormatterBuilder#optionalStart()->DateTimeFormatterBuilder:::Mark the start of an optional section
java.time.format.DateTimeFormatterBuilder#optionalEnd()->DateTimeFormatterBuilder:::Ends an optional section
java.time.format.DateTimeFormatterBuilder#toFormatter()->DateTimeFormatter:::Completes this builder by creating the DateTimeFormatter using the default locale
java.time.format.DateTimeFormatterBuilder#toFormatter(Locale)->DateTimeFormatter:::Completes this builder by creating the DateTimeFormatter using the specified locale
java.time.format.DateTimeFormatterBuilder#toFormatter(ResolverStyle, Chronology)->DateTimeFormatter:::Completes this builder by creating the formatter
java.time.format.DateTimeFormatterBuilder.DateTimePrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::Prints the date-time object to the buffer
java.time.format.DateTimeFormatterBuilder.DateTimePrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::Parses text into date-time information
java.time.format.DateTimeFormatterBuilder.CompositePrinterParser#withOptional(boolean)->CompositePrinterParser:::Returns a copy of this printer-parser with the optional flag changed.
java.time.format.DateTimeFormatterBuilder.CompositePrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.CompositePrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.CompositePrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.PadPrinterParserDecorator#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.PadPrinterParserDecorator#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.PadPrinterParserDecorator#toString()->String:::
java.time.format.DateTimeFormatterBuilder.DefaultValueParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.DefaultValueParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.CharLiteralPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.CharLiteralPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.CharLiteralPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.StringLiteralPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.StringLiteralPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.StringLiteralPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.NumberPrinterParser#withFixedWidth()->NumberPrinterParser:::Returns a new instance with fixed width flag set.
java.time.format.DateTimeFormatterBuilder.NumberPrinterParser#withSubsequentWidth(int)->NumberPrinterParser:::Returns a new instance with an updated subsequent width.
java.time.format.DateTimeFormatterBuilder.NumberPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.NumberPrinterParser#getValue(DateTimePrintContext, long)->long:::Gets the value to output.
java.time.format.DateTimeFormatterBuilder.NumberPrinterParser#isFixedWidth(DateTimeParseContext)->boolean:::For NumberPrinterParser, the width is fixed depending on the minWidth, maxWidth, signStyle and whether subsequent fields are fixed.
java.time.format.DateTimeFormatterBuilder.NumberPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.NumberPrinterParser#setValue(DateTimeParseContext, long, int, int)->int:::Stores the value.
java.time.format.DateTimeFormatterBuilder.NumberPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.ReducedPrinterParser#getValue(DateTimePrintContext, long)->long:::
java.time.format.DateTimeFormatterBuilder.ReducedPrinterParser#setValue(DateTimeParseContext, long, int, int)->int:::
java.time.format.DateTimeFormatterBuilder.ReducedPrinterParser#withFixedWidth()->ReducedPrinterParser:::Returns a new instance with fixed width flag set.
java.time.format.DateTimeFormatterBuilder.ReducedPrinterParser#withSubsequentWidth(int)->ReducedPrinterParser:::Returns a new instance with an updated subsequent width.
java.time.format.DateTimeFormatterBuilder.ReducedPrinterParser#isFixedWidth(DateTimeParseContext)->boolean:::For a ReducedPrinterParser, fixed width is false if the mode is strict, otherwise it is set as for NumberPrinterParser.
java.time.format.DateTimeFormatterBuilder.ReducedPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.FractionPrinterParser#withFixedWidth()->FractionPrinterParser:::Returns a new instance with fixed width flag set.
java.time.format.DateTimeFormatterBuilder.FractionPrinterParser#withSubsequentWidth(int)->FractionPrinterParser:::Returns a new instance with an updated subsequent width.
java.time.format.DateTimeFormatterBuilder.FractionPrinterParser#isFixedWidth(DateTimeParseContext)->boolean:::For FractionPrinterPrinterParser, the width is fixed if context is sttrict, minWidth equal to maxWidth and decimalpoint is absent.
java.time.format.DateTimeFormatterBuilder.FractionPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.FractionPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.FractionPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.TextPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.TextPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.TextPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.InstantPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.InstantPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.InstantPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.OffsetIdPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.OffsetIdPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.OffsetIdPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.LocalizedOffsetIdPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.LocalizedOffsetIdPrinterParser#getDigit(CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.LocalizedOffsetIdPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.LocalizedOffsetIdPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.ZoneTextPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.ZoneTextPrinterParser#getTree(DateTimeParseContext)->PrefixTree:::
java.time.format.DateTimeFormatterBuilder.ZoneIdPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.ZoneIdPrinterParser#getTree(DateTimeParseContext)->PrefixTree:::
java.time.format.DateTimeFormatterBuilder.ZoneIdPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::This implementation looks for the longest matching string
java.time.format.DateTimeFormatterBuilder.ZoneIdPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.PrefixTree#newTree(DateTimeParseContext)->PrefixTree:::Creates a new prefix parsing tree based on parse context.
java.time.format.DateTimeFormatterBuilder.PrefixTree#newTree(Set<String>, DateTimeParseContext)->PrefixTree:::Creates a new prefix parsing tree.
java.time.format.DateTimeFormatterBuilder.PrefixTree#copyTree()->PrefixTree:::Clone a copy of this tree
java.time.format.DateTimeFormatterBuilder.PrefixTree#add(String, String)->boolean:::Adds a pair of {key, value} into the prefix tree.
java.time.format.DateTimeFormatterBuilder.PrefixTree#match(CharSequence, int, int)->String:::Match text with the prefix tree.
java.time.format.DateTimeFormatterBuilder.PrefixTree#match(CharSequence, ParsePosition)->String:::Match text with the prefix tree.
java.time.format.DateTimeFormatterBuilder.PrefixTree#toKey(String)->String:::
java.time.format.DateTimeFormatterBuilder.PrefixTree#newNode(String, String, PrefixTree)->PrefixTree:::
java.time.format.DateTimeFormatterBuilder.PrefixTree#isEqual(char, char)->boolean:::
java.time.format.DateTimeFormatterBuilder.PrefixTree#prefixOf(CharSequence, int, int)->boolean:::
java.time.format.DateTimeFormatterBuilder.ChronoPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.ChronoPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.LocalizedPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.LocalizedPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.LocalizedPrinterParser#toString()->String:::
java.time.format.DateTimeFormatterBuilder.WeekBasedFieldPrinterParser#withFixedWidth()->WeekBasedFieldPrinterParser:::Returns a new instance with fixed width flag set.
java.time.format.DateTimeFormatterBuilder.WeekBasedFieldPrinterParser#withSubsequentWidth(int)->WeekBasedFieldPrinterParser:::Returns a new instance with an updated subsequent width.
java.time.format.DateTimeFormatterBuilder.WeekBasedFieldPrinterParser#format(DateTimePrintContext, StringBuilder)->boolean:::
java.time.format.DateTimeFormatterBuilder.WeekBasedFieldPrinterParser#parse(DateTimeParseContext, CharSequence, int)->int:::
java.time.format.DateTimeFormatterBuilder.WeekBasedFieldPrinterParser#toString()->String:::
java.time.format.DateTimeParseContext#copy()->DateTimeParseContext:::Creates a copy of this context
java.time.format.DateTimeParseContext#getLocale()->Locale:::Gets the locale
java.time.format.DateTimeParseContext#getDecimalStyle()->DecimalStyle:::Gets the DecimalStyle
java.time.format.DateTimeParseContext#getEffectiveChronology()->Chronology:::Gets the effective chronology during parsing.
java.time.format.DateTimeParseContext#isCaseSensitive()->boolean:::Checks if parsing is case sensitive.
java.time.format.DateTimeParseContext#setCaseSensitive(boolean)->void:::Sets whether the parsing is case sensitive or not.
java.time.format.DateTimeParseContext#subSequenceEquals(CharSequence, int, CharSequence, int, int)->boolean:::Helper to compare two CharSequence instances
java.time.format.DateTimeParseContext#charEquals(char, char)->boolean:::Helper to compare two char
java.time.format.DateTimeParseContext#charEqualsIgnoreCase(char, char)->boolean:::Compares two characters ignoring case.
java.time.format.DateTimeParseContext#isStrict()->boolean:::Checks if parsing is strict
java.time.format.DateTimeParseContext#setStrict(boolean)->void:::Sets whether parsing is strict or lenient.
java.time.format.DateTimeParseContext#startOptional()->void:::Starts the parsing of an optional segment of the input.
java.time.format.DateTimeParseContext#endOptional(boolean)->void:::Ends the parsing of an optional segment of the input.
java.time.format.DateTimeParseContext#toUnresolved()->Parsed:::Gets the unresolved result of the parse.
java.time.format.DateTimeParseContext#toResolved(ResolverStyle, Set<TemporalField>)->TemporalAccessor:::Gets the resolved result of the parse.
java.time.format.DateTimeParseContext#getParsed(TemporalField)->Long:::Gets the first value that was parsed for the specified field
java.time.format.DateTimeParseContext#setParsedField(TemporalField, long, int, int)->int:::Stores the parsed field
java.time.format.DateTimeParseContext#setParsed(Chronology)->void:::Stores the parsed chronology
java.time.format.DateTimeParseContext#addChronoChangedListener(Consumer<Chronology>)->void:::Adds a Consumer<Chronology> to the list of listeners to be notified if the Chronology changes.
java.time.format.DateTimeParseContext#setParsed(ZoneId)->void:::Stores the parsed zone
java.time.format.DateTimeParseContext#setParsedLeapSecond()->void:::Stores the parsed leap second.
java.time.format.DateTimeParseContext#toString()->String:::Returns a string version of the context for debugging.
java.time.format.DateTimeParseException#getParsedString()->String:::Returns the string that was being parsed.
java.time.format.DateTimeParseException#getErrorIndex()->int:::Returns the index where the error was found.
java.time.format.DateTimePrintContext#getTemporal()->TemporalAccessor:::Gets the temporal object being output.
java.time.format.DateTimePrintContext#getLocale()->Locale:::Gets the locale
java.time.format.DateTimePrintContext#getDecimalStyle()->DecimalStyle:::Gets the DecimalStyle
java.time.format.DateTimePrintContext#startOptional()->void:::Starts the printing of an optional segment of the input.
java.time.format.DateTimePrintContext#endOptional()->void:::Ends the printing of an optional segment of the input.
java.time.format.DateTimePrintContext#getValue(TemporalQuery<R>)->R:::Gets a value using a query.
java.time.format.DateTimePrintContext#getValue(TemporalField)->Long:::Gets the value of the specified field
java.time.format.DateTimePrintContext#toString()->String:::Returns a string version of the context for debugging.
java.time.format.DateTimeTextProvider#getInstance()->DateTimeTextProvider:::Gets the provider of text.
java.time.format.DateTimeTextProvider#getText(TemporalField, long, TextStyle, Locale)->String:::Gets the text for the specified field, locale and style for the purpose of formatting
java.time.format.DateTimeTextProvider#getText(Chronology, TemporalField, long, TextStyle, Locale)->String:::Gets the text for the specified chrono, field, locale and style for the purpose of formatting
java.time.format.DateTimeTextProvider#getTextIterator(TemporalField, TextStyle, Locale)->Iterator<Entry<String, Long>>:::Gets an iterator of text to field for the specified field, locale and style for the purpose of parsing
java.time.format.DateTimeTextProvider#getTextIterator(Chronology, TemporalField, TextStyle, Locale)->Iterator<Entry<String, Long>>:::Gets an iterator of text to field for the specified chrono, field, locale and style for the purpose of parsing
java.time.format.DateTimeTextProvider#getLocalizedResource(String, Locale)->T:::Returns the localized resource of the given key and locale, or null if no localized resource is available.
java.time.format.DateTimeTextProvider.LocaleStore#getText(long, TextStyle)->String:::Gets the text for the specified field value, locale and style for the purpose of printing.
java.time.format.DateTimeTextProvider.LocaleStore#getTextIterator(TextStyle)->Iterator<Entry<String, Long>>:::Gets an iterator of text to field for the specified style for the purpose of parsing
java.time.format.DecimalStyle#getAvailableLocales()->Set<Locale>:::Lists all the locales that are supported
java.time.format.DecimalStyle#ofDefaultLocale()->DecimalStyle:::Obtains the DecimalStyle for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale
java.time.format.DecimalStyle#of(Locale)->DecimalStyle:::Obtains the DecimalStyle for the specified locale
java.time.format.DecimalStyle#getZeroDigit()->char:::Gets the character that represents zero
java.time.format.DecimalStyle#withZeroDigit(char)->DecimalStyle:::Returns a copy of the info with a new character that represents zero
java.time.format.DecimalStyle#getPositiveSign()->char:::Gets the character that represents the positive sign
java.time.format.DecimalStyle#withPositiveSign(char)->DecimalStyle:::Returns a copy of the info with a new character that represents the positive sign
java.time.format.DecimalStyle#getNegativeSign()->char:::Gets the character that represents the negative sign
java.time.format.DecimalStyle#withNegativeSign(char)->DecimalStyle:::Returns a copy of the info with a new character that represents the negative sign
java.time.format.DecimalStyle#getDecimalSeparator()->char:::Gets the character that represents the decimal point
java.time.format.DecimalStyle#withDecimalSeparator(char)->DecimalStyle:::Returns a copy of the info with a new character that represents the decimal point
java.time.format.DecimalStyle#convertToDigit(char)->int:::Checks whether the character is a digit, based on the currently set zero character.
java.time.format.DecimalStyle#convertNumberToI18N(String)->String:::Converts the input numeric text to the internationalized form using the zero character.
java.time.format.DecimalStyle#equals(Object)->boolean:::Checks if this DecimalStyle is equal to another DecimalStyle.
java.time.format.DecimalStyle#hashCode()->int:::A hash code for this DecimalStyle.
java.time.format.DecimalStyle#toString()->String:::Returns a string describing this DecimalStyle.
java.time.format.Parsed#copy()->Parsed:::Creates a copy.
java.time.format.Parsed#isSupported(TemporalField)->boolean:::
java.time.format.Parsed#getLong(TemporalField)->long:::
java.time.format.Parsed#query(TemporalQuery<R>)->R:::
java.time.format.Parsed#resolve(ResolverStyle, Set<TemporalField>)->TemporalAccessor:::Resolves the fields in this context.
java.time.format.Parsed#toString()->String:::
java.time.format.ZoneName#toZid(String, Locale)->String:::
java.time.format.ZoneName#toZid(String)->String:::

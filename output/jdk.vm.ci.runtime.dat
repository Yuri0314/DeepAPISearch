jdk.vm.ci.runtime.JVMCI#initialize()->void::: i initialize
jdk.vm.ci.runtime.JVMCI#getRuntime()->JVMCIRuntime:::Gets the singleton JVMCIRuntime instance available to the application.
jdk.vm.ci.runtime.JVMCIBackend#getMetaAccess()->MetaAccessProvider::: backend get meta access
jdk.vm.ci.runtime.JVMCIBackend#getCodeCache()->CodeCacheProvider::: backend get code cache
jdk.vm.ci.runtime.JVMCIBackend#getConstantReflection()->ConstantReflectionProvider::: backend get constant reflection
jdk.vm.ci.runtime.JVMCIBackend#getTarget()->TargetDescription::: backend get target
jdk.vm.ci.runtime.JVMCIBackend#getStackIntrospection()->StackIntrospection::: backend get stack introspection
jdk.vm.ci.runtime.JVMCICompiler#compileMethod(CompilationRequest)->CompilationRequestResult:::Services a compilation request
jdk.vm.ci.runtime.JVMCICompilerFactory#getCompilerName()->String:::Get the name of this compiler
jdk.vm.ci.runtime.JVMCICompilerFactory#onSelection()->void:::Notifies this object that it has been selected to #createCompiler(JVMCIRuntime) create a compiler and it should now perform any heavy weight initialization that it deferred during construction.
jdk.vm.ci.runtime.JVMCICompilerFactory#createCompiler(JVMCIRuntime)->JVMCICompiler:::Create a new instance of a JVMCICompiler.
jdk.vm.ci.runtime.JVMCICompilerFactory#printProperties(PrintStream)->void:::Prints a description of the properties used to configure this compiler.
jdk.vm.ci.runtime.JVMCIRuntime#getCompiler()->JVMCICompiler:::Gets the default system compiler.
jdk.vm.ci.runtime.JVMCIRuntime#getHostJVMCIBackend()->JVMCIBackend:::Gets the host JVMCI backend.
jdk.vm.ci.runtime.JVMCIRuntime#getJVMCIBackend(Class)->JVMCIBackend:::Gets the backend for a given architecture.

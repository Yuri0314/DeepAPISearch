ChannelBinding#getInitiatorAddress():::Get the initiator's address for this channel binding.:::return
ChannelBinding#getAcceptorAddress():::Get the acceptor's address for this channel binding.:::return
ChannelBinding#getApplicationData():::Get the application specified data for this channel binding.:::if->return->retVal->new->byteArr->System->arraycopy->return
ChannelBinding#equals(Object):::Compares two instances of ChannelBinding.:::if->return->if->return->cb->if->return->if->initiator->equals->return->if->return->if->acceptor->equals->return->return->Arrays->equals
ChannelBinding#hashCode():::Returns a hashcode value for this ChannelBinding object.:::if->return->initiator->hashCode->else->if->return->acceptor->hashCode->else->if->return->new->String->hashCode->else->return
GSSContext#initSecContext(byte[], int, int):::Called by the context initiator to start the context creation phase and process any tokens generated by the peer's acceptSecContext method:::
GSSContext#initSecContext(InputStream, OutputStream):::Called by the context initiator to start the context creation phase and process any tokens generated by the peer's acceptSecContext method using streams:::
GSSContext#acceptSecContext(byte[], int, int):::Called by the context acceptor upon receiving a token from the peer:::
GSSContext#acceptSecContext(InputStream, OutputStream)::: context accept sec context:::
GSSContext#isEstablished():::Used during context establishment to determine the state of the context.:::
GSSContext#dispose():::Releases any system resources and cryptographic information stored in the context object and invalidates the context.:::
GSSContext#getWrapSizeLimit(int, boolean, int):::Used to determine limits on the size of the message that can be passed to wrap:::
GSSContext#wrap(byte[], int, int, MessageProp):::Applies per-message security services over the established security context:::
GSSContext#wrap(InputStream, OutputStream, MessageProp):::Applies per-message security services over the established security context using streams:::
GSSContext#unwrap(byte[], int, int, MessageProp):::Used to process tokens generated by the wrap method on the other side of the context:::
GSSContext#unwrap(InputStream, OutputStream, MessageProp):::Uses streams to process tokens generated by the wrap method on the other side of the context:::
GSSContext#getMIC(byte[], int, int, MessageProp):::Returns a token containing a cryptographic Message Integrity Code (MIC) for the supplied message,  for transfer to the peer application:::
GSSContext#getMIC(InputStream, OutputStream, MessageProp):::Uses streams to produce a token containing a cryptographic MIC for the supplied message, for transfer to the peer application:::
GSSContext#verifyMIC(byte[], int, int, byte[], int, int, MessageProp):::Verifies the cryptographic MIC, contained in the token parameter, over the supplied message.  The MessageProp object is instantiated by the application and is used by the underlying mechanism to return information to the caller such as the QOP indicating the strength of protection that was applied to the message and other supplementary message state information.  Since some application-level protocols may wish to use tokens emitted by getMIC to provide "secure framing", implementations should support the calculation and verification of MICs over zero-length messages.:::
GSSContext#verifyMIC(InputStream, InputStream, MessageProp):::Uses streams to verify the cryptographic MIC, contained in the token parameter, over the supplied message:::
GSSContext#export():::Exports this context so that another process may import it.:::
GSSContext#requestMutualAuth(boolean):::Requests that mutual authentication be done during context establishment:::
GSSContext#requestReplayDet(boolean):::Requests that replay detection be enabled for the per-message security services after context establishment:::
GSSContext#requestSequenceDet(boolean):::Requests that sequence checking be enabled for the per-message security services after context establishment:::
GSSContext#requestCredDeleg(boolean):::Requests that the initiator's credentials be delegated to the acceptor during context establishment:::
GSSContext#requestAnonymity(boolean):::Requests that the initiator's identity not be disclosed to the acceptor:::
GSSContext#requestConf(boolean):::Requests that data confidentiality be enabled for the wrap method:::
GSSContext#requestInteg(boolean):::Requests that data integrity be enabled for the wrap and getMICmethods:::
GSSContext#requestLifetime(int):::Requests a lifetime in seconds for the context:::
GSSContext#setChannelBinding(ChannelBinding):::Sets the channel bindings to be used during context establishment:::
GSSContext#getCredDelegState():::Determines if credential delegation is enabled on this context:::
GSSContext#getMutualAuthState():::Determines if mutual authentication is enabled on this context:::
GSSContext#getReplayDetState():::Determines if replay detection is enabled for the per-message security services from this context:::
GSSContext#getSequenceDetState():::Determines if sequence checking is enabled for the per-message security services from this context:::
GSSContext#getAnonymityState():::Determines if the context initiator is anonymously authenticated to the context acceptor:::
GSSContext#isTransferable():::Determines if the context is transferable to other processes through the use of the #export() export method:::
GSSContext#isProtReady():::Determines if the context is ready for per message operations to be used over it:::
GSSContext#getConfState():::Determines if data confidentiality is available over the context:::
GSSContext#getIntegState():::Determines if data integrity is available over the context:::
GSSContext#getLifetime():::Determines what the remaining lifetime for this context is:::
GSSContext#getSrcName():::Returns the name of the context initiator:::
GSSContext#getTargName():::Returns the name of the context acceptor:::
GSSContext#getMech():::Determines what mechanism is being used for this context:::
GSSContext#getDelegCred():::Obtains the credentials delegated by the context initiator to the context acceptor:::
GSSContext#isInitiator():::Determines if this is the context initiator:::
GSSCredential#dispose():::Releases any sensitive information that the GSSCredential object may be containing:::
GSSCredential#getName()::: Retrieves the name of the entity that the credential asserts.:::
GSSCredential#getName(Oid):::Retrieves a Mechanism Name of the entity that the credential asserts:::
GSSCredential#getRemainingLifetime():::Returns the remaining lifetime in seconds for a credential:::
GSSCredential#getRemainingInitLifetime(Oid):::Returns the lifetime in seconds for the credential to remain capable of initiating security contexts using the specified mechanism:::
GSSCredential#getRemainingAcceptLifetime(Oid):::Returns the lifetime in seconds for the credential to remain capable of accepting security contexts using the specified mechanism:::
GSSCredential#getUsage():::Returns the credential usage mode:::
GSSCredential#getUsage(Oid):::Returns the credential usage mode for a specific mechanism:::
GSSCredential#getMechs():::Returns a list of mechanisms supported by this credential:::
GSSCredential#add(GSSName, int, int, Oid, int):::Adds a mechanism specific credential-element to an existing credential:::
GSSCredential#equals(Object):::Tests if this GSSCredential asserts the same entity as the supplied object:::
GSSCredential#hashCode():::Returns a hashcode value for this GSSCredential.:::
GSSException#getMajor():::Returns the GSS-API level major error code for the problem causing this exception to be thrown:::return
GSSException#getMinor():::Returns the mechanism level error code for the problem causing this exception to be thrown:::return
GSSException#getMajorString():::Returns a string explaining the GSS-API level major error code in this exception.:::if->return->else->return
GSSException#getMinorString():::Returns a string explaining the mechanism specific error code:::return
GSSException#setMinor(int, String):::Used by the exception thrower to set the mechanism level minor error code and its string explanation:::
GSSException#toString():::Returns a textual representation of both the major and the minor status codes.:::return->getMessage
GSSException#getMessage():::Returns a textual representation of both the major and the minor status codes.:::if->return->getMajorString->return->getMajorString->getMinorString
GSSException#validateMajor(int)::: exception validate major:::if->return->return
GSSManager#getInstance():::Returns the default GSSManager implementation.:::return->new->sun.security.jgss.GSSManagerImpl
GSSManager#getMechs():::Returns a list of mechanisms that are available to GSS-API callers through this GSSManager:::
GSSManager#getNamesForMech(Oid):::Returns then name types supported by the indicated mechanism.  The default GSSManager instance includes support for the Kerberos v5 mechanism:::
GSSManager#getMechsForName(Oid):::Returns a list of mechanisms that support the indicated name type.  The Kerberos v5 mechanism ("1.2.840.113554.1.2.2") will always be returned in this list when the indicated nametype is one of GSSName#NT_HOSTBASED_SERVICE GSSName.NT_HOSTBASED_SERVICE, GSSName#NT_EXPORT_NAME GSSName.NT_EXPORT_NAME, or "1.2.840.113554.1.2.2.1".:::
GSSManager#createName(String, Oid):::Factory method to convert a string name from the specified namespace to a GSSName object:::
GSSManager#createName(byte[], Oid):::Factory method to convert a byte array containing a name from the specified namespace to a GSSName object:::
GSSManager#createName(String, Oid, Oid)::: Factory method to convert a string name from the specified namespace to a GSSName object and canonicalize it at the same time for a mechanism:::
GSSManager#createName(byte[], Oid, Oid)::: Factory method to convert a byte array containing a name from the specified namespace to a GSSName object and canonicalize it at the same time for a mechanism:::
GSSManager#createCredential(int):::Factory method for acquiring default credentials:::
GSSManager#createCredential(GSSName, int, Oid, int):::Factory method for acquiring a single mechanism credential.  GSS-API mechanism providers must impose a local access-control policy on callers to prevent unauthorized callers from acquiring credentials to which they are not entitled:::
GSSManager#createCredential(GSSName, int, Oid[], int):::Factory method for acquiring credentials over a set of mechanisms:::
GSSManager#createContext(GSSName, Oid, GSSCredential, int):::Factory method for creating a context on the initiator's side:::
GSSManager#createContext(GSSCredential):::Factory method for creating a context on the acceptor' side:::
GSSManager#createContext(byte[]):::Factory method for creating a previously exported context:::
GSSManager#addProviderAtFront(Provider, Oid):::This method is used to indicate to the GSSManager that the application would like a particular provider to be used ahead of all others when support is desired for the given mechanism:::
GSSManager#addProviderAtEnd(Provider, Oid):::This method is used to indicate to the GSSManager that the application would like a particular provider to be used if no other provider can be found that supports the given mechanism:::
GSSName#equals(GSSName):::Compares two GSSName objects to determine if they refer to the same entity.:::
GSSName#equals(Object):::Compares this GSSName object to another Object that might be a GSSName:::
GSSName#hashCode():::Returns a hashcode value for this GSSName.:::
GSSName#canonicalize(Oid):::Creates a name that is canonicalized for some mechanism.:::
GSSName#export():::Returns a canonical contiguous byte representation of a mechanism name (MN), suitable for direct, byte by byte comparison by authorization functions:::
GSSName#toString():::Returns a textual representation of the GSSName object:::
GSSName#getStringNameType():::Returns the name type of the printable representation of this name that can be obtained from the  toString method.:::
GSSName#isAnonymous():::Tests if this name object represents an anonymous entity.:::
GSSName#isMN():::Tests if this name object represents a Mechanism Name (MN):::
MessageProp#getQOP():::Retrieves the QOP value.:::return
MessageProp#getPrivacy():::Retrieves the privacy state.:::return
MessageProp#setQOP(int):::Sets the QOP value.:::
MessageProp#setPrivacy(boolean):::Sets the privacy state.:::
MessageProp#isDuplicateToken():::Tests if this is a duplicate of an earlier token.:::return
MessageProp#isOldToken():::Tests if this token's validity period has expired, i.e., the token is too old to be checked for duplication.:::return
MessageProp#isUnseqToken():::Tests if a later token had already been processed.:::return
MessageProp#isGapToken():::Tests if an expected token was not received, i.e., one or more predecessor tokens have not yet been successfully processed.:::return
MessageProp#getMinorStatus():::Retrieves the minor status code that the underlying mechanism might have set for this per-message operation.:::return
MessageProp#getMinorString():::Retrieves a string explaining the minor status code.:::return
MessageProp#setSupplementaryStates(boolean, boolean, boolean, boolean, int, String):::This method sets the state for the supplementary information flags and the minor status in MessageProp:::
MessageProp#resetStatusValues():::Resets the supplementary status values to false.:::
Oid#getInstance(String):::Only for calling by initializators used with declarations.:::retVal->try->new->Oid->catch->finally->return
Oid#toString():::Returns a string representation of the oid's integer components in dot separated notation.:::return->oid->toString
Oid#equals(Object):::Tests if two Oid objects represent the same Object identifier value.:::if->return->if->return->equals->else->if->return->equals->else->return
Oid#getDER():::Returns the full ASN.1 DER encoding for this oid object, which includes the tag and length.:::if->dout->new->DerOutputStream->try->dout->putOID->catch->throw->e->getMessage->new->GSSException->finally->dout->toByteArray->return->derEncoding->clone
Oid#containedIn(Oid[]):::A utility method to test if this Oid value is contained within the supplied Oid array.:::for->i->return
Oid#hashCode():::Returns a hashcode value for this Oid.:::return->oid->hashCode

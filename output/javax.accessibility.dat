AccessibilityProvider#checkPermission():::If this code is running with a security manager and if the permission "accessibilityProvider" has not been granted SecurityException will be thrown.:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return
AccessibilityProvider#getName():::Returns the name of this service provider:::
AccessibilityProvider#activate():::Activates the support provided by this service provider.:::
Accessible#getAccessibleContext():::Returns the AccessibleContext associated with this object:::
AccessibleAction#getAccessibleActionCount():::Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object.:::
AccessibleAction#getAccessibleActionDescription(int):::Returns a description of the specified action of the object.:::
AccessibleAction#doAccessibleAction(int):::Performs the specified action on the object.:::
AccessibleBundle#toDisplayString(String, Locale):::Obtains the key as a localized string:::loadResourceBundle->ht->table->get->if->o->ht->get->if->return->return
AccessibleBundle#toDisplayString(Locale):::Obtains the key as a localized string:::return->toDisplayString
AccessibleBundle#toDisplayString():::Gets localized string describing the key using the default locale.:::return->Locale->getDefault->toDisplayString
AccessibleBundle#toString():::Gets localized string describing the key using the default locale.:::return->toDisplayString
AccessibleBundle#loadResourceBundle(String, Locale):::Loads the Accessibility resource bundle if necessary.:::if->table->containsKey->try->resourceTable->new->Hashtable<>->bundle->ResourceBundle->getBundle->iter->bundle->getKeys->while->iter->hasMoreElements->key->iter->nextElement->resourceTable->bundle->getObject->put->table->put->catch->println->return->finally
AccessibleComponent#getBackground():::Gets the background color of this object.:::
AccessibleComponent#setBackground(Color):::Sets the background color of this object.:::
AccessibleComponent#getForeground():::Gets the foreground color of this object.:::
AccessibleComponent#setForeground(Color):::Sets the foreground color of this object.:::
AccessibleComponent#getCursor():::Gets the cursor of this object.:::
AccessibleComponent#setCursor(Cursor):::Sets the cursor of this object.:::
AccessibleComponent#getFont():::Gets the font of this object.:::
AccessibleComponent#setFont(Font):::Sets the font of this object.:::
AccessibleComponent#getFontMetrics(Font):::Gets the FontMetrics of this object.:::
AccessibleComponent#isEnabled():::Determines if the object is enabled:::
AccessibleComponent#setEnabled(boolean):::Sets the enabled state of the object.:::
AccessibleComponent#isVisible():::Determines if the object is visible:::
AccessibleComponent#setVisible(boolean):::Sets the visible state of the object.:::
AccessibleComponent#isShowing():::Determines if the object is showing:::
AccessibleComponent#contains(Point):::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.:::
AccessibleComponent#getLocationOnScreen():::Returns the location of the object on the screen.:::
AccessibleComponent#getLocation():::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.:::
AccessibleComponent#setLocation(Point):::Sets the location of the object relative to the parent.:::
AccessibleComponent#getBounds():::Gets the bounds of this object in the form of a Rectangle object:::
AccessibleComponent#setBounds(Rectangle):::Sets the bounds of this object in the form of a Rectangle object:::
AccessibleComponent#getSize():::Returns the size of this object in the form of a Dimension object:::
AccessibleComponent#setSize(Dimension):::Resizes this object so that it has width and height.:::
AccessibleComponent#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point.:::
AccessibleComponent#isFocusTraversable():::Returns whether this object can accept focus or not:::
AccessibleComponent#requestFocus():::Requests focus for this object:::
AccessibleComponent#addFocusListener(FocusListener):::Adds the specified focus listener to receive focus events from this component.:::
AccessibleComponent#removeFocusListener(FocusListener):::Removes the specified focus listener so it no longer receives focus events from this component.:::
AccessibleContext#getAccessibleName():::Gets the accessibleName property of this object:::return
AccessibleContext#setAccessibleName(String):::Sets the localized accessible name of this object:::oldName->firePropertyChange
AccessibleContext#getAccessibleDescription():::Gets the accessibleDescription property of this object:::return
AccessibleContext#setAccessibleDescription(String):::Sets the accessible description of this object:::oldDescription->firePropertyChange
AccessibleContext#getAccessibleRole():::Gets the role of this object:::
AccessibleContext#getAccessibleStateSet():::Gets the state set of this object:::
AccessibleContext#getAccessibleParent():::Gets the Accessible parent of this object.:::return
AccessibleContext#setAccessibleParent(Accessible):::Sets the Accessible parent of this object:::
AccessibleContext#getAccessibleIndexInParent():::Gets the 0-based index of this object in its accessible parent.:::
AccessibleContext#getAccessibleChildrenCount():::Returns the number of accessible children of the object.:::
AccessibleContext#getAccessibleChild(int):::Returns the specified Accessible child of the object:::
AccessibleContext#getLocale():::Gets the locale of the component:::
AccessibleContext#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::if->new->PropertyChangeSupport->accessibleChangeSupport->addPropertyChangeListener
AccessibleContext#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::if->accessibleChangeSupport->removePropertyChangeListener
AccessibleContext#getAccessibleAction():::Gets the AccessibleAction associated with this object that supports one or more actions.:::return
AccessibleContext#getAccessibleComponent():::Gets the AccessibleComponent associated with this object that has a graphical representation.:::return
AccessibleContext#getAccessibleSelection():::Gets the AccessibleSelection associated with this object which allows its Accessible children to be selected.:::return
AccessibleContext#getAccessibleText():::Gets the AccessibleText associated with this object presenting text on the display.:::return
AccessibleContext#getAccessibleEditableText():::Gets the AccessibleEditableText associated with this object presenting editable text on the display.:::return
AccessibleContext#getAccessibleValue():::Gets the AccessibleValue associated with this object that supports a Numerical value.:::return
AccessibleContext#getAccessibleIcon():::Gets the AccessibleIcons associated with an object that has one or more associated icons.:::return
AccessibleContext#getAccessibleRelationSet():::Gets the AccessibleRelationSet associated with an object.:::return
AccessibleContext#getAccessibleTable():::Gets the AccessibleTable associated with an object.:::return
AccessibleContext#firePropertyChange(String, Object, Object):::Support for reporting bound property changes:::if->if->pce->accessibleChangeSupport->firePropertyChange->else->accessibleChangeSupport->firePropertyChange
AccessibleEditableText#setTextContents(String):::Sets the text contents to the specified string.:::
AccessibleEditableText#insertTextAtIndex(int, String):::Inserts the specified string at the given index.:::
AccessibleEditableText#getTextRange(int, int):::Returns the text string between two indices.:::
AccessibleEditableText#delete(int, int):::Deletes the text between two indices.:::
AccessibleEditableText#cut(int, int):::Cuts the text between two indices into the system clipboard.:::
AccessibleEditableText#paste(int):::Pastes the text from the system clipboard into the text starting at the specified index.:::
AccessibleEditableText#replaceText(int, int, String):::Replaces the text between two indices with the specified string.:::
AccessibleEditableText#selectText(int, int):::Selects the text between two indices.:::
AccessibleEditableText#setAttributes(int, int, AttributeSet):::Sets attributes for the text between two indices.:::
AccessibleExtendedComponent#getToolTipText():::Returns the tool tip text.:::
AccessibleExtendedComponent#getTitledBorderText():::Returns the titled border text.:::
AccessibleExtendedComponent#getAccessibleKeyBinding():::Returns key bindings associated with this object.:::
AccessibleExtendedTable#getAccessibleRow(int):::Returns the row number of an index in the table.:::
AccessibleExtendedTable#getAccessibleColumn(int):::Returns the column number of an index in the table.:::
AccessibleExtendedTable#getAccessibleIndex(int, int):::Returns the index at a row and column in the table.:::
AccessibleExtendedText#getTextRange(int, int):::Returns the text between two indices.:::
AccessibleExtendedText#getTextSequenceAt(int, int):::Returns the AccessibleTextSequence at a given index.:::
AccessibleExtendedText#getTextSequenceAfter(int, int):::Returns the AccessibleTextSequence after a given index.:::
AccessibleExtendedText#getTextSequenceBefore(int, int):::Returns the AccessibleTextSequence before a given index.:::
AccessibleExtendedText#getTextBounds(int, int):::Returns the bounding rectangle of the text between two indices.:::
AccessibleHyperlink#isValid():::Since the document a link is associated with may have changed, this method returns whether or not this Link is still valid (with respect to the document it references).:::
AccessibleHyperlink#getAccessibleActionCount():::Returns the number of accessible actions available in this Link If there are more than one, the first one is NOT considered the "default" action of this LINK object (e.g:::
AccessibleHyperlink#doAccessibleAction(int):::Performs the specified action on the object.:::
AccessibleHyperlink#getAccessibleActionDescription(int):::Returns a string description of this particular link action:::
AccessibleHyperlink#getAccessibleActionObject(int):::Returns an object that represents the link action, as appropriate for that link:::
AccessibleHyperlink#getAccessibleActionAnchor(int):::Returns an object that represents the link anchor, as appropriate for that link:::
AccessibleHyperlink#getStartIndex():::Gets the index with the hypertext document at which this link begins.:::
AccessibleHyperlink#getEndIndex():::Gets the index with the hypertext document at which this link ends.:::
AccessibleHypertext#getLinkCount():::Returns the number of links within this hypertext document.:::
AccessibleHypertext#getLink(int):::Returns the nth Link of this Hypertext document.:::
AccessibleHypertext#getLinkIndex(int):::Returns the index into an array of hyperlinks that is associated with this character index, or -1 if there is no hyperlink associated with this index.:::
AccessibleIcon#getAccessibleIconDescription():::Gets the description of the icon:::
AccessibleIcon#setAccessibleIconDescription(String):::Sets the description of the icon:::
AccessibleIcon#getAccessibleIconWidth():::Gets the width of the icon.:::
AccessibleIcon#getAccessibleIconHeight():::Gets the height of the icon.:::
AccessibleKeyBinding#getAccessibleKeyBindingCount():::Returns the number of key bindings for this object.:::
AccessibleKeyBinding#getAccessibleKeyBinding(int):::Returns a key binding for this object:::
AccessibleRelation#getKey():::Returns the key for this relation.:::return
AccessibleRelation#getTarget():::Returns the target objects for this relation.:::if->new->ObjectArr->retval->new->ObjectArr->for->i->return
AccessibleRelation#setTarget(Object):::Sets the target object for this relation.:::new->ObjectArr
AccessibleRelation#setTarget(Object[]):::Sets the target objects for this relation.:::
AccessibleRelationSet#add(AccessibleRelation):::Adds a new relation to the current relation set:::if->new->Vector<>->existingRelation->relation->getKey->get->if->relations->addElement->return->else->existingTarget->existingRelation->getTarget->newTarget->relation->getTarget->mergedLength->mergedTarget->new->ObjectArr->for->i->for->i->j->existingRelation->setTarget->return
AccessibleRelationSet#addAll(AccessibleRelation[]):::Adds all of the relations to the existing relation set:::if->if->new->Vector<>->for->i
AccessibleRelationSet#remove(AccessibleRelation):::Removes a relation from the current relation set:::if->return->else->return->relations->removeElement
AccessibleRelationSet#clear():::Removes all the relations from the current relation set.:::if->relations->removeAllElements
AccessibleRelationSet#size():::Returns the number of relations in the relation set.:::if->return->else->return->relations->size
AccessibleRelationSet#contains(String):::Returns whether the relation set contains a relation that matches the specified key.:::return->get
AccessibleRelationSet#get(String):::Returns the relation that matches the specified key.:::if->return->else->len->relations->size->for->i->return
AccessibleRelationSet#toArray():::Returns the current relation set as an array of AccessibleRelation.:::if->return->new->AccessibleRelationArr->else->relationArray->relations->size->new->AccessibleRelationArr->for->i->return
AccessibleRelationSet#toString():::Creates a localized string representing all the relations in the set using the default locale.:::ret->if->relations->size->relations->elementAt->toDisplayString->for->i->relations->size->return
AccessibleResourceBundle#getContents():::Returns the mapping between the programmatic keys and the localized display strings.:::return->new->ObjectArrs
AccessibleSelection#getAccessibleSelectionCount():::Returns the number of Accessible children currently selected:::
AccessibleSelection#getAccessibleSelection(int):::Returns an Accessible representing the specified selected child of the object:::
AccessibleSelection#isAccessibleChildSelected(int):::Determines if the current child of this object is selected.:::
AccessibleSelection#addAccessibleSelection(int):::Adds the specified Accessible child of the object to the object's selection:::
AccessibleSelection#removeAccessibleSelection(int):::Removes the specified child of the object from the object's selection:::
AccessibleSelection#clearAccessibleSelection():::Clears the selection in the object, so that no children in the object are selected.:::
AccessibleSelection#selectAllAccessibleSelection():::Causes every child of the object to be selected if the object supports multiple selections.:::
AccessibleStateSet#add(AccessibleState):::Adds a new state to the current state set if it is not already present:::if->new->Vector<>->if->states->contains->states->addElement->return->else->return
AccessibleStateSet#addAll(AccessibleState[]):::Adds all of the states to the existing state set:::if->if->new->Vector<>->for->i
AccessibleStateSet#remove(AccessibleState):::Removes a state from the current state set:::if->return->else->return->states->removeElement
AccessibleStateSet#clear():::Removes all the states from the current state set.:::if->states->removeAllElements
AccessibleStateSet#contains(AccessibleState):::Checks if the current state is in the state set.:::if->return->else->return->states->contains
AccessibleStateSet#toArray():::Returns the current state set as an array of AccessibleState.:::if->return->new->AccessibleStateArr->else->stateArray->states->size->new->AccessibleStateArr->for->i->return
AccessibleStateSet#toString():::Creates a localized string representing all the states in the set using the default locale.:::ret->if->states->size->states->elementAt->toDisplayString->for->i->states->size->return
AccessibleStreamable#getMimeTypes():::Returns an array of DataFlavor objects for the MIME types this object supports.:::
AccessibleStreamable#getStream(DataFlavor):::Returns an InputStream for a DataFlavor.:::
AccessibleTable#getAccessibleCaption():::Returns the caption for the table.:::
AccessibleTable#setAccessibleCaption(Accessible):::Sets the caption for the table.:::
AccessibleTable#getAccessibleSummary():::Returns the summary description of the table.:::
AccessibleTable#setAccessibleSummary(Accessible):::Sets the summary description of the table.:::
AccessibleTable#getAccessibleRowCount():::Returns the number of rows in the table.:::
AccessibleTable#getAccessibleColumnCount():::Returns the number of columns in the table.:::
AccessibleTable#getAccessibleAt(int, int):::Returns the Accessible at a specified row and column in the table.:::
AccessibleTable#getAccessibleRowExtentAt(int, int):::Returns the number of rows occupied by the Accessible at a specified row and column in the table.:::
AccessibleTable#getAccessibleColumnExtentAt(int, int):::Returns the number of columns occupied by the Accessible at a specified row and column in the table.:::
AccessibleTable#getAccessibleRowHeader():::Returns the row headers as an AccessibleTable.:::
AccessibleTable#setAccessibleRowHeader(AccessibleTable):::Sets the row headers.:::
AccessibleTable#getAccessibleColumnHeader():::Returns the column headers as an AccessibleTable.:::
AccessibleTable#setAccessibleColumnHeader(AccessibleTable):::Sets the column headers.:::
AccessibleTable#getAccessibleRowDescription(int):::Returns the description of the specified row in the table.:::
AccessibleTable#setAccessibleRowDescription(int, Accessible):::Sets the description text of the specified row of the table.:::
AccessibleTable#getAccessibleColumnDescription(int):::Returns the description text of the specified column in the table.:::
AccessibleTable#setAccessibleColumnDescription(int, Accessible):::Sets the description text of the specified column in the table.:::
AccessibleTable#isAccessibleSelected(int, int):::Returns a boolean value indicating whether the accessible at a specified row and column is selected.:::
AccessibleTable#isAccessibleRowSelected(int):::Returns a boolean value indicating whether the specified row is selected.:::
AccessibleTable#isAccessibleColumnSelected(int):::Returns a boolean value indicating whether the specified column is selected.:::
AccessibleTable#getSelectedAccessibleRows():::Returns the selected rows in a table.:::
AccessibleTable#getSelectedAccessibleColumns():::Returns the selected columns in a table.:::
AccessibleTableModelChange#getType():::Returns the type of event.:::
AccessibleTableModelChange#getFirstRow():::Returns the first row that changed.:::
AccessibleTableModelChange#getLastRow():::Returns the last row that changed.:::
AccessibleTableModelChange#getFirstColumn():::Returns the first column that changed.:::
AccessibleTableModelChange#getLastColumn():::Returns the last column that changed.:::
AccessibleText#getIndexAtPoint(Point):::Given a point in local coordinates, return the zero-based index of the character under that point:::
AccessibleText#getCharacterBounds(int):::Determines the bounding box of the character at the given index into the string:::
AccessibleText#getCharCount():::Returns the number of characters (valid indicies).:::
AccessibleText#getCaretPosition():::Returns the zero-based offset of the caret:::
AccessibleText#getAtIndex(int, int):::Returns the String at a given index.:::
AccessibleText#getAfterIndex(int, int):::Returns the String after a given index.:::
AccessibleText#getBeforeIndex(int, int):::Returns the String before a given index.:::
AccessibleText#getCharacterAttribute(int):::Returns the AttributeSet for a given character at a given index.:::
AccessibleText#getSelectionStart():::Returns the start offset within the selected text:::
AccessibleText#getSelectionEnd():::Returns the end offset within the selected text:::
AccessibleText#getSelectedText():::Returns the portion of the text that is selected.:::
AccessibleValue#getCurrentAccessibleValue():::Get the value of this object as a Number:::
AccessibleValue#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::
AccessibleValue#getMinimumAccessibleValue():::Get the minimum value of this object as a Number.:::
AccessibleValue#getMaximumAccessibleValue():::Get the maximum value of this object as a Number.:::

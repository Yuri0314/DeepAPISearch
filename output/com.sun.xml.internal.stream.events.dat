com.sun.xml.internal.stream.events.AttributeImpl#toString()->String::: attribute impl to string
com.sun.xml.internal.stream.events.AttributeImpl#setName(QName)->void::: attribute impl set name
com.sun.xml.internal.stream.events.AttributeImpl#getName()->QName::: attribute impl get name
com.sun.xml.internal.stream.events.AttributeImpl#setValue(String)->void::: attribute impl set value
com.sun.xml.internal.stream.events.AttributeImpl#getValue()->String::: attribute impl get value
com.sun.xml.internal.stream.events.AttributeImpl#setNonNormalizedValue(String)->void::: attribute impl set non normalized value
com.sun.xml.internal.stream.events.AttributeImpl#getNonNormalizedValue()->String::: attribute impl get non normalized value
com.sun.xml.internal.stream.events.AttributeImpl#setAttributeType(String)->void::: attribute impl set attribute type
com.sun.xml.internal.stream.events.AttributeImpl#getDTDType()->String::: attribute impl get type
com.sun.xml.internal.stream.events.AttributeImpl#setSpecified(boolean)->void::: attribute impl set specified
com.sun.xml.internal.stream.events.AttributeImpl#isSpecified()->boolean::: attribute impl is specified
com.sun.xml.internal.stream.events.AttributeImpl#writeAsEncodedUnicodeEx(java.io.Writer)->void::: attribute impl write as encoded unicode ex
com.sun.xml.internal.stream.events.AttributeImpl#init()->void::: attribute impl init
com.sun.xml.internal.stream.events.CharacterEvent#init()->void::: character event init
com.sun.xml.internal.stream.events.CharacterEvent#getData()->String::: character event get data
com.sun.xml.internal.stream.events.CharacterEvent#setData(String)->void::: character event set data
com.sun.xml.internal.stream.events.CharacterEvent#isCData()->boolean::: character event is data
com.sun.xml.internal.stream.events.CharacterEvent#toString()->String::: character event to string
com.sun.xml.internal.stream.events.CharacterEvent#writeAsEncodedUnicodeEx(Writer)->void:::This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters
com.sun.xml.internal.stream.events.CharacterEvent#isIgnorableWhiteSpace()->boolean:::Return true if this is ignorableWhiteSpace
com.sun.xml.internal.stream.events.CharacterEvent#isWhiteSpace()->boolean:::Returns true if this set of Characters is all whitespace
com.sun.xml.internal.stream.events.CommentEvent#init()->void::: comment event init
com.sun.xml.internal.stream.events.CommentEvent#toString()->String::: comment event to string
com.sun.xml.internal.stream.events.CommentEvent#getText()->String:::Return the string data of the comment, returns empty string if it does not exist
com.sun.xml.internal.stream.events.CommentEvent#writeAsEncodedUnicodeEx(java.io.Writer)->void::: comment event write as encoded unicode ex
com.sun.xml.internal.stream.events.DTDEvent#setDocumentTypeDeclaration(String)->void::: event set document type declaration
com.sun.xml.internal.stream.events.DTDEvent#getDocumentTypeDeclaration()->String::: event get document type declaration
com.sun.xml.internal.stream.events.DTDEvent#setEntities(List)->void::: event set entities
com.sun.xml.internal.stream.events.DTDEvent#getEntities()->List::: event get entities
com.sun.xml.internal.stream.events.DTDEvent#setNotations(List)->void::: event set notations
com.sun.xml.internal.stream.events.DTDEvent#getNotations()->List::: event get notations
com.sun.xml.internal.stream.events.DTDEvent#getProcessedDTD()->Object:::Returns an implementation defined representation of the DTD
com.sun.xml.internal.stream.events.DTDEvent#init()->void::: event init
com.sun.xml.internal.stream.events.DTDEvent#toString()->String::: event to string
com.sun.xml.internal.stream.events.DTDEvent#writeAsEncodedUnicodeEx(java.io.Writer)->void::: event write as encoded unicode ex
com.sun.xml.internal.stream.events.DummyEvent#getEventType()->int::: dummy event get event type
com.sun.xml.internal.stream.events.DummyEvent#setEventType(int)->void::: dummy event set event type
com.sun.xml.internal.stream.events.DummyEvent#isStartElement()->boolean::: dummy event is start element
com.sun.xml.internal.stream.events.DummyEvent#isEndElement()->boolean::: dummy event is end element
com.sun.xml.internal.stream.events.DummyEvent#isEntityReference()->boolean::: dummy event is entity reference
com.sun.xml.internal.stream.events.DummyEvent#isProcessingInstruction()->boolean::: dummy event is processing instruction
com.sun.xml.internal.stream.events.DummyEvent#isCharacterData()->boolean::: dummy event is character data
com.sun.xml.internal.stream.events.DummyEvent#isStartDocument()->boolean::: dummy event is start document
com.sun.xml.internal.stream.events.DummyEvent#isEndDocument()->boolean::: dummy event is end document
com.sun.xml.internal.stream.events.DummyEvent#getLocation()->Location::: dummy event get location
com.sun.xml.internal.stream.events.DummyEvent#setLocation(Location)->void::: dummy event set location
com.sun.xml.internal.stream.events.DummyEvent#asCharacters()->Characters:::Returns this event as Characters, may result in a class cast exception if this event is not Characters.
com.sun.xml.internal.stream.events.DummyEvent#asEndElement()->EndElement:::Returns this event as an end  element event, may result in a class cast exception if this event is not a end element.
com.sun.xml.internal.stream.events.DummyEvent#asStartElement()->StartElement:::Returns this event as a start element event, may result in a class cast exception if this event is not a start element.
com.sun.xml.internal.stream.events.DummyEvent#getSchemaType()->QName:::This method is provided for implementations to provide optional type information about the associated event
com.sun.xml.internal.stream.events.DummyEvent#isAttribute()->boolean:::A utility function to check if this event is an Attribute.
com.sun.xml.internal.stream.events.DummyEvent#isCharacters()->boolean:::A utility function to check if this event is Characters.
com.sun.xml.internal.stream.events.DummyEvent#isNamespace()->boolean:::A utility function to check if this event is a Namespace.
com.sun.xml.internal.stream.events.DummyEvent#writeAsEncodedUnicode(Writer)->void:::This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters
com.sun.xml.internal.stream.events.DummyEvent#writeAsEncodedUnicodeEx(Writer)->void:::Helper method in order to expose IOException.
com.sun.xml.internal.stream.events.DummyEvent#charEncode(Writer, String)->void:::Helper method to escape < > & for characters event and  quotes, lt and amps for Entity
com.sun.xml.internal.stream.events.DummyEvent.DummyLocation#getCharacterOffset()->int::: dummy location get character offset
com.sun.xml.internal.stream.events.DummyEvent.DummyLocation#getColumnNumber()->int::: dummy location get column number
com.sun.xml.internal.stream.events.DummyEvent.DummyLocation#getLineNumber()->int::: dummy location get line number
com.sun.xml.internal.stream.events.DummyEvent.DummyLocation#getPublicId()->String::: dummy location get public id
com.sun.xml.internal.stream.events.DummyEvent.DummyLocation#getSystemId()->String::: dummy location get system id
com.sun.xml.internal.stream.events.EndDocumentEvent#init()->void::: end document event init
com.sun.xml.internal.stream.events.EndDocumentEvent#toString()->String::: end document event to string
com.sun.xml.internal.stream.events.EndDocumentEvent#writeAsEncodedUnicodeEx(java.io.Writer)->void::: end document event write as encoded unicode ex
com.sun.xml.internal.stream.events.EndElementEvent#init()->void::: end element event init
com.sun.xml.internal.stream.events.EndElementEvent#getName()->QName::: end element event get name
com.sun.xml.internal.stream.events.EndElementEvent#setName(QName)->void::: end element event set name
com.sun.xml.internal.stream.events.EndElementEvent#writeAsEncodedUnicodeEx(java.io.Writer)->void::: end element event write as encoded unicode ex
com.sun.xml.internal.stream.events.EndElementEvent#getNamespaces()->Iterator:::Returns an Iterator of namespaces that have gone out of scope
com.sun.xml.internal.stream.events.EndElementEvent#addNamespace(Namespace)->void::: end element event add namespace
com.sun.xml.internal.stream.events.EndElementEvent#toString()->String::: end element event to string
com.sun.xml.internal.stream.events.EndElementEvent#nameAsString()->String::: end element event name as string
com.sun.xml.internal.stream.events.EntityDeclarationImpl#setEntityName(String)->void::: entity declaration impl set entity name
com.sun.xml.internal.stream.events.EntityDeclarationImpl#getEntityName()->String::: entity declaration impl get entity name
com.sun.xml.internal.stream.events.EntityDeclarationImpl#setEntityReplacementText(String)->void::: entity declaration impl set entity replacement text
com.sun.xml.internal.stream.events.EntityDeclarationImpl#setXMLResourceIdentifier(XMLResourceIdentifier)->void::: entity declaration impl set resource identifier
com.sun.xml.internal.stream.events.EntityDeclarationImpl#getXMLResourceIdentifier()->XMLResourceIdentifier::: entity declaration impl get resource identifier
com.sun.xml.internal.stream.events.EntityDeclarationImpl#getSystemId()->String::: entity declaration impl get system id
com.sun.xml.internal.stream.events.EntityDeclarationImpl#getPublicId()->String::: entity declaration impl get public id
com.sun.xml.internal.stream.events.EntityDeclarationImpl#getBaseURI()->String::: entity declaration impl get base i
com.sun.xml.internal.stream.events.EntityDeclarationImpl#getName()->String::: entity declaration impl get name
com.sun.xml.internal.stream.events.EntityDeclarationImpl#getNotationName()->String::: entity declaration impl get notation name
com.sun.xml.internal.stream.events.EntityDeclarationImpl#setNotationName(String)->void::: entity declaration impl set notation name
com.sun.xml.internal.stream.events.EntityDeclarationImpl#getReplacementText()->String::: entity declaration impl get replacement text
com.sun.xml.internal.stream.events.EntityDeclarationImpl#init()->void::: entity declaration impl init
com.sun.xml.internal.stream.events.EntityDeclarationImpl#writeAsEncodedUnicodeEx(java.io.Writer)->void::: entity declaration impl write as encoded unicode ex
com.sun.xml.internal.stream.events.EntityReferenceEvent#getName()->String::: entity reference event get name
com.sun.xml.internal.stream.events.EntityReferenceEvent#toString()->String::: entity reference event to string
com.sun.xml.internal.stream.events.EntityReferenceEvent#writeAsEncodedUnicodeEx(java.io.Writer)->void::: entity reference event write as encoded unicode ex
com.sun.xml.internal.stream.events.EntityReferenceEvent#getDeclaration()->EntityDeclaration::: entity reference event get declaration
com.sun.xml.internal.stream.events.EntityReferenceEvent#init()->void::: entity reference event init
com.sun.xml.internal.stream.events.LocationImpl#getCharacterOffset()->int::: location impl get character offset
com.sun.xml.internal.stream.events.LocationImpl#getColumnNumber()->int::: location impl get column number
com.sun.xml.internal.stream.events.LocationImpl#getLineNumber()->int::: location impl get line number
com.sun.xml.internal.stream.events.LocationImpl#getPublicId()->String::: location impl get public id
com.sun.xml.internal.stream.events.LocationImpl#getSystemId()->String::: location impl get system id
com.sun.xml.internal.stream.events.LocationImpl#toString()->String::: location impl to string
com.sun.xml.internal.stream.events.NamedEvent#getPrefix()->String::: named event get prefix
com.sun.xml.internal.stream.events.NamedEvent#getName()->QName::: named event get name
com.sun.xml.internal.stream.events.NamedEvent#setName(QName)->void::: named event set name
com.sun.xml.internal.stream.events.NamedEvent#nameAsString()->String::: named event name as string
com.sun.xml.internal.stream.events.NamedEvent#getNamespace()->String::: named event get namespace
com.sun.xml.internal.stream.events.NamedEvent#writeAsEncodedUnicodeEx(java.io.Writer)->void::: named event write as encoded unicode ex
com.sun.xml.internal.stream.events.NamespaceImpl#isDefaultNamespaceDeclaration()->boolean::: namespace impl is default namespace declaration
com.sun.xml.internal.stream.events.NamespaceImpl#setPrefix(String)->void::: namespace impl set prefix
com.sun.xml.internal.stream.events.NamespaceImpl#getPrefix()->String::: namespace impl get prefix
com.sun.xml.internal.stream.events.NamespaceImpl#getNamespaceURI()->String::: namespace impl get namespace i
com.sun.xml.internal.stream.events.NamespaceImpl#setNamespaceURI(String)->void::: namespace impl set namespace i
com.sun.xml.internal.stream.events.NamespaceImpl#init()->void::: namespace impl init
com.sun.xml.internal.stream.events.NamespaceImpl#getEventType()->int::: namespace impl get event type
com.sun.xml.internal.stream.events.NamespaceImpl#isNamespace()->boolean::: namespace impl is namespace
com.sun.xml.internal.stream.events.NotationDeclarationImpl#getName()->String::: notation declaration impl get name
com.sun.xml.internal.stream.events.NotationDeclarationImpl#getPublicId()->String::: notation declaration impl get public id
com.sun.xml.internal.stream.events.NotationDeclarationImpl#getSystemId()->String::: notation declaration impl get system id
com.sun.xml.internal.stream.events.NotationDeclarationImpl#setPublicId(String)->void::: notation declaration impl set public id
com.sun.xml.internal.stream.events.NotationDeclarationImpl#setSystemId(String)->void::: notation declaration impl set system id
com.sun.xml.internal.stream.events.NotationDeclarationImpl#setName(String)->void::: notation declaration impl set name
com.sun.xml.internal.stream.events.NotationDeclarationImpl#writeAsEncodedUnicodeEx(java.io.Writer)->void::: notation declaration impl write as encoded unicode ex
com.sun.xml.internal.stream.events.ProcessingInstructionEvent#init()->void::: processing instruction event init
com.sun.xml.internal.stream.events.ProcessingInstructionEvent#getTarget()->String::: processing instruction event get target
com.sun.xml.internal.stream.events.ProcessingInstructionEvent#setTarget(String)->void::: processing instruction event set target
com.sun.xml.internal.stream.events.ProcessingInstructionEvent#setData(String)->void::: processing instruction event set data
com.sun.xml.internal.stream.events.ProcessingInstructionEvent#getData()->String::: processing instruction event get data
com.sun.xml.internal.stream.events.ProcessingInstructionEvent#toString()->String::: processing instruction event to string
com.sun.xml.internal.stream.events.ProcessingInstructionEvent#writeAsEncodedUnicodeEx(java.io.Writer)->void::: processing instruction event write as encoded unicode ex
com.sun.xml.internal.stream.events.StartDocumentEvent#init(String, String, boolean, Location)->void::: start document event init
com.sun.xml.internal.stream.events.StartDocumentEvent#getSystemId()->String::: start document event get system id
com.sun.xml.internal.stream.events.StartDocumentEvent#getCharacterEncodingScheme()->String::: start document event get character encoding scheme
com.sun.xml.internal.stream.events.StartDocumentEvent#isStandalone()->boolean::: start document event is standalone
com.sun.xml.internal.stream.events.StartDocumentEvent#getVersion()->String::: start document event get version
com.sun.xml.internal.stream.events.StartDocumentEvent#setStandalone(boolean)->void::: start document event set standalone
com.sun.xml.internal.stream.events.StartDocumentEvent#setStandalone(String)->void::: start document event set standalone
com.sun.xml.internal.stream.events.StartDocumentEvent#encodingSet()->boolean::: start document event encoding set
com.sun.xml.internal.stream.events.StartDocumentEvent#standaloneSet()->boolean::: start document event standalone set
com.sun.xml.internal.stream.events.StartDocumentEvent#setEncoding(String)->void::: start document event set encoding
com.sun.xml.internal.stream.events.StartDocumentEvent#setDeclaredEncoding(boolean)->void::: start document event set declared encoding
com.sun.xml.internal.stream.events.StartDocumentEvent#setVersion(String)->void::: start document event set version
com.sun.xml.internal.stream.events.StartDocumentEvent#clear()->void::: start document event clear
com.sun.xml.internal.stream.events.StartDocumentEvent#toString()->String::: start document event to string
com.sun.xml.internal.stream.events.StartDocumentEvent#isStartDocument()->boolean::: start document event is start document
com.sun.xml.internal.stream.events.StartDocumentEvent#writeAsEncodedUnicodeEx(java.io.Writer)->void::: start document event write as encoded unicode ex
com.sun.xml.internal.stream.events.StartElementEvent#init()->void::: start element event init
com.sun.xml.internal.stream.events.StartElementEvent#getName()->QName::: start element event get name
com.sun.xml.internal.stream.events.StartElementEvent#setName(QName)->void::: start element event set name
com.sun.xml.internal.stream.events.StartElementEvent#getAttributes()->Iterator::: start element event get attributes
com.sun.xml.internal.stream.events.StartElementEvent#getNamespaces()->Iterator::: start element event get namespaces
com.sun.xml.internal.stream.events.StartElementEvent#getAttributeByName(QName)->Attribute::: start element event get attribute by name
com.sun.xml.internal.stream.events.StartElementEvent#getNamespace()->String::: start element event get namespace
com.sun.xml.internal.stream.events.StartElementEvent#getNamespaceURI(String)->String::: start element event get namespace i
com.sun.xml.internal.stream.events.StartElementEvent#toString()->String::: Return a String representation of this StartElement formatted as XML.
com.sun.xml.internal.stream.events.StartElementEvent#nameAsString()->String:::Return this event as String
com.sun.xml.internal.stream.events.StartElementEvent#getNamespaceContext()->NamespaceContext:::Gets a read-only namespace context
com.sun.xml.internal.stream.events.StartElementEvent#setNamespaceContext(NamespaceContext)->void::: start element event set namespace context
com.sun.xml.internal.stream.events.StartElementEvent#writeAsEncodedUnicodeEx(java.io.Writer)->void::: start element event write as encoded unicode ex
com.sun.xml.internal.stream.events.StartElementEvent#addAttribute(Attribute)->void::: start element event add attribute
com.sun.xml.internal.stream.events.StartElementEvent#addAttributes(Iterator)->void::: start element event add attributes
com.sun.xml.internal.stream.events.StartElementEvent#addNamespaceAttribute(Namespace)->void::: start element event add namespace attribute
com.sun.xml.internal.stream.events.StartElementEvent#addNamespaceAttributes(Iterator)->void::: start element event add namespace attributes
com.sun.xml.internal.stream.events.XMLEventAllocatorImpl#allocate(XMLStreamReader)->XMLEvent::: event allocator impl allocate
com.sun.xml.internal.stream.events.XMLEventAllocatorImpl#allocate(XMLStreamReader, XMLEventConsumer)->void::: event allocator impl allocate
com.sun.xml.internal.stream.events.XMLEventAllocatorImpl#newInstance()->javax.xml.stream.util.XMLEventAllocator::: event allocator impl new instance
com.sun.xml.internal.stream.events.XMLEventAllocatorImpl#getXMLEvent(XMLStreamReader)->XMLEvent::: event allocator impl get event
com.sun.xml.internal.stream.events.XMLEventAllocatorImpl#getNextEvent(XMLStreamReader)->XMLEvent::: event allocator impl get next event
com.sun.xml.internal.stream.events.XMLEventAllocatorImpl#fillAttributes(StartElementEvent, XMLStreamReader)->void::: event allocator impl fill attributes
com.sun.xml.internal.stream.events.XMLEventAllocatorImpl#fillNamespaceAttributes(StartElementEvent, XMLStreamReader)->void::: event allocator impl fill namespace attributes
com.sun.xml.internal.stream.events.XMLEventAllocatorImpl#fillNamespaceAttributes(EndElementEvent, XMLStreamReader)->void::: event allocator impl fill namespace attributes
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createAttribute(String, String)->Attribute::: event factory impl create attribute
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createAttribute(QName, String)->Attribute::: event factory impl create attribute
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createAttribute(String, String, String, String)->Attribute::: event factory impl create attribute
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createCData(String)->Characters::: event factory impl create data
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createCharacters(String)->Characters::: event factory impl create characters
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createComment(String)->javax.xml.stream.events.Comment::: event factory impl create comment
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createDTD(String)->javax.xml.stream.events.DTD::: event factory impl create d
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createEndDocument()->javax.xml.stream.events.EndDocument::: event factory impl create end document
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createEndElement(QName, Iterator)->javax.xml.stream.events.EndElement::: event factory impl create end element
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createEndElement(String, String, String)->javax.xml.stream.events.EndElement::: event factory impl create end element
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createEndElement(String, String, String, Iterator)->javax.xml.stream.events.EndElement::: event factory impl create end element
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createEntityReference(String, EntityDeclaration)->EntityReference::: event factory impl create entity reference
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createIgnorableSpace(String)->Characters::: event factory impl create ignorable space
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createNamespace(String)->Namespace::: event factory impl create namespace
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createNamespace(String, String)->Namespace::: event factory impl create namespace
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createProcessingInstruction(String, String)->ProcessingInstruction::: event factory impl create processing instruction
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createSpace(String)->Characters::: event factory impl create space
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createStartDocument()->StartDocument::: event factory impl create start document
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createStartDocument(String)->StartDocument::: event factory impl create start document
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createStartDocument(String, String)->StartDocument::: event factory impl create start document
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createStartDocument(String, String, boolean)->StartDocument::: event factory impl create start document
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createStartElement(QName, Iterator, Iterator)->StartElement::: event factory impl create start element
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createStartElement(String, String, String)->StartElement::: event factory impl create start element
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createStartElement(String, String, String, Iterator, Iterator)->StartElement::: event factory impl create start element
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#createStartElement(String, String, String, Iterator, Iterator, NamespaceContext)->StartElement::: event factory impl create start element
com.sun.xml.internal.stream.events.XMLEventFactoryImpl#setLocation(javax.xml.stream.Location)->void::: event factory impl set location

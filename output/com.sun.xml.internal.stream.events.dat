AttributeImpl#toString()::: attribute impl to string:::if->fQName->getPrefix->fQName->getPrefix->length->return->fQName->getPrefix->fQName->getLocalPart->else->return->fQName->getLocalPart
AttributeImpl#setName(QName)::: attribute impl set name:::
AttributeImpl#getName()::: attribute impl get name:::return
AttributeImpl#setValue(String)::: attribute impl set value:::
AttributeImpl#getValue()::: attribute impl get value:::return
AttributeImpl#setNonNormalizedValue(String)::: attribute impl set non normalized value:::
AttributeImpl#getNonNormalizedValue()::: attribute impl get non normalized value:::return
AttributeImpl#setAttributeType(String)::: attribute impl set attribute type:::
AttributeImpl#getDTDType()::: attribute impl get type:::return
AttributeImpl#setSpecified(boolean)::: attribute impl set specified:::
AttributeImpl#isSpecified()::: attribute impl is specified:::return
AttributeImpl#writeAsEncodedUnicodeEx(java.io.Writer)::: attribute impl write as encoded unicode ex:::writer->toString->write
AttributeImpl#init()::: attribute impl init:::setEventType
CharacterEvent#init()::: character event init:::setEventType
CharacterEvent#getData()::: character event get data:::return
CharacterEvent#setData(String)::: character event set data:::
CharacterEvent#isCData()::: character event is data:::return
CharacterEvent#toString()::: character event to string:::if->return->getData->else->return
CharacterEvent#writeAsEncodedUnicodeEx(Writer):::This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters:::if->writer->getData->write->else->charEncode
CharacterEvent#isIgnorableWhiteSpace():::Return true if this is ignorableWhiteSpace:::return
CharacterEvent#isWhiteSpace():::Returns true if this set of Characters is all whitespace:::if->checkWhiteSpace->return
CharacterEvent#checkWhiteSpace()::: character event check white space:::if->fData->length->for->i->fData->length
CommentEvent#init()::: comment event init:::setEventType
CommentEvent#toString()::: comment event to string:::return->getText
CommentEvent#getText():::Return the string data of the comment, returns empty string if it does not exist:::return
CommentEvent#writeAsEncodedUnicodeEx(java.io.Writer)::: comment event write as encoded unicode ex:::writer->getText->write
DTDEvent#setDocumentTypeDeclaration(String)::: event set document type declaration:::
DTDEvent#getDocumentTypeDeclaration()::: event get document type declaration:::return
DTDEvent#setEntities(List)::: event set entities:::
DTDEvent#getEntities()::: event get entities:::return
DTDEvent#setNotations(List)::: event set notations:::
DTDEvent#getNotations()::: event get notations:::return
DTDEvent#getProcessedDTD():::Returns an implementation defined representation of the DTD:::return
DTDEvent#init()::: event init:::setEventType
DTDEvent#toString()::: event to string:::return
DTDEvent#writeAsEncodedUnicodeEx(java.io.Writer)::: event write as encoded unicode ex:::writer->write
DummyEvent#getEventType()::: dummy event get event type:::return
DummyEvent#setEventType(int)::: dummy event set event type:::
DummyEvent#isStartElement()::: dummy event is start element:::return
DummyEvent#isEndElement()::: dummy event is end element:::return
DummyEvent#isEntityReference()::: dummy event is entity reference:::return
DummyEvent#isProcessingInstruction()::: dummy event is processing instruction:::return
DummyEvent#isCharacterData()::: dummy event is character data:::return
DummyEvent#isStartDocument()::: dummy event is start document:::return
DummyEvent#isEndDocument()::: dummy event is end document:::return
DummyEvent#getLocation()::: dummy event get location:::return
DummyEvent#setLocation(Location)::: dummy event set location:::if->else
DummyEvent#asCharacters():::Returns this event as Characters, may result in a class cast exception if this event is not Characters.:::return
DummyEvent#asEndElement():::Returns this event as an end  element event, may result in a class cast exception if this event is not a end element.:::return
DummyEvent#asStartElement():::Returns this event as a start element event, may result in a class cast exception if this event is not a start element.:::return
DummyEvent#getSchemaType():::This method is provided for implementations to provide optional type information about the associated event:::return
DummyEvent#isAttribute():::A utility function to check if this event is an Attribute.:::return
DummyEvent#isCharacters():::A utility function to check if this event is Characters.:::return
DummyEvent#isNamespace():::A utility function to check if this event is a Namespace.:::return
DummyEvent#writeAsEncodedUnicode(Writer):::This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters:::try->writeAsEncodedUnicodeEx->catch->throw->new->XMLStreamException->finally
DummyEvent#writeAsEncodedUnicodeEx(Writer):::Helper method in order to expose IOException.:::
DummyEvent#charEncode(Writer, String):::Helper method to escape < > & for characters event and  quotes, lt and amps for Entity:::if->return->i->start->len->data->length->for->writer->write
DummyEvent.DummyLocation#getCharacterOffset()::: dummy location get character offset:::return
DummyEvent.DummyLocation#getColumnNumber()::: dummy location get column number:::return
DummyEvent.DummyLocation#getLineNumber()::: dummy location get line number:::return
DummyEvent.DummyLocation#getPublicId()::: dummy location get public id:::return
DummyEvent.DummyLocation#getSystemId()::: dummy location get system id:::return
EndDocumentEvent#init()::: end document event init:::setEventType
EndDocumentEvent#toString()::: end document event to string:::return
EndDocumentEvent#writeAsEncodedUnicodeEx(java.io.Writer)::: end document event write as encoded unicode ex:::
EndElementEvent#init()::: end element event init:::setEventType->new->ArrayList<>
EndElementEvent#getName()::: end element event get name:::return
EndElementEvent#setName(QName)::: end element event set name:::
EndElementEvent#writeAsEncodedUnicodeEx(java.io.Writer)::: end element event write as encoded unicode ex:::writer->write->prefix->fQName->getPrefix->if->prefix->length->writer->write->writer->write->writer->fQName->getLocalPart->write->writer->write
EndElementEvent#getNamespaces():::Returns an Iterator of namespaces that have gone out of scope:::if->fNamespaces->iterator->return->new->ReadOnlyIterator<>
EndElementEvent#addNamespace(Namespace)::: end element event add namespace:::if->fNamespaces->add
EndElementEvent#toString()::: end element event to string:::s->nameAsString->return
EndElementEvent#nameAsString()::: end element event name as string:::if->fQName->getNamespaceURI->equals->return->fQName->getLocalPart->if->fQName->getPrefix->return->fQName->getNamespaceURI->fQName->getPrefix->fQName->getLocalPart->else->return->fQName->getNamespaceURI->fQName->getLocalPart
EntityDeclarationImpl#setEntityName(String)::: entity declaration impl set entity name:::
EntityDeclarationImpl#getEntityName()::: entity declaration impl get entity name:::return
EntityDeclarationImpl#setEntityReplacementText(String)::: entity declaration impl set entity replacement text:::
EntityDeclarationImpl#setXMLResourceIdentifier(XMLResourceIdentifier)::: entity declaration impl set resource identifier:::
EntityDeclarationImpl#getXMLResourceIdentifier()::: entity declaration impl get resource identifier:::return
EntityDeclarationImpl#getSystemId()::: entity declaration impl get system id:::if->return->fXMLResourceIdentifier->getLiteralSystemId->return
EntityDeclarationImpl#getPublicId()::: entity declaration impl get public id:::if->return->fXMLResourceIdentifier->getPublicId->return
EntityDeclarationImpl#getBaseURI()::: entity declaration impl get base i:::if->return->fXMLResourceIdentifier->getBaseSystemId->return
EntityDeclarationImpl#getName()::: entity declaration impl get name:::return
EntityDeclarationImpl#getNotationName()::: entity declaration impl get notation name:::return
EntityDeclarationImpl#setNotationName(String)::: entity declaration impl set notation name:::
EntityDeclarationImpl#getReplacementText()::: entity declaration impl get replacement text:::return
EntityDeclarationImpl#init()::: entity declaration impl init:::setEventType
EntityDeclarationImpl#writeAsEncodedUnicodeEx(java.io.Writer)::: entity declaration impl write as encoded unicode ex:::writer->write->writer->write->if->writer->write->charEncode->else->pubId->getPublicId->if->writer->write->writer->write->else->writer->write->writer->getSystemId->write->writer->write->if->writer->write->writer->write->writer->write
EntityReferenceEvent#getName()::: entity reference event get name:::return
EntityReferenceEvent#toString()::: entity reference event to string:::text->fEntityDeclaration->getReplacementText->if->return->getName
EntityReferenceEvent#writeAsEncodedUnicodeEx(java.io.Writer)::: entity reference event write as encoded unicode ex:::writer->write->writer->getName->write->writer->write
EntityReferenceEvent#getDeclaration()::: entity reference event get declaration:::return
EntityReferenceEvent#init()::: entity reference event init:::setEventType
LocationImpl#getCharacterOffset()::: location impl get character offset:::return
LocationImpl#getColumnNumber()::: location impl get column number:::return
LocationImpl#getLineNumber()::: location impl get line number:::return
LocationImpl#getPublicId()::: location impl get public id:::return
LocationImpl#getSystemId()::: location impl get system id:::return
LocationImpl#toString()::: location impl to string:::sbuffer->new->StringBuffer->sbuffer->getLineNumber->append->sbuffer->append->sbuffer->getColumnNumber->append->sbuffer->append->sbuffer->getSystemId->append->sbuffer->append->sbuffer->getPublicId->append->sbuffer->append->sbuffer->getCharacterOffset->append->sbuffer->append->return->sbuffer->toString
NamedEvent#getPrefix()::: named event get prefix:::return->getPrefix
NamedEvent#getName()::: named event get name:::return
NamedEvent#setName(QName)::: named event set name:::
NamedEvent#nameAsString()::: named event name as string:::if->name->getNamespaceURI->equals->return->name->getLocalPart->if->name->getPrefix->return->name->getNamespaceURI->getPrefix->name->getLocalPart->else->return->name->getNamespaceURI->name->getLocalPart
NamedEvent#getNamespace()::: named event get namespace:::return->name->getNamespaceURI
NamedEvent#writeAsEncodedUnicodeEx(java.io.Writer)::: named event write as encoded unicode ex:::writer->nameAsString->write
NamespaceImpl#isDefaultNamespaceDeclaration()::: namespace impl is default namespace declaration:::name->this->getName->if->name->getLocalPart->equals->return->return
NamespaceImpl#setPrefix(String)::: namespace impl set prefix:::if->new->QName->setName->else->new->QName->setName
NamespaceImpl#getPrefix()::: namespace impl get prefix:::name->this->getName->if->return->name->getLocalPart->return
NamespaceImpl#getNamespaceURI()::: namespace impl get namespace i:::return->this->getValue
NamespaceImpl#setNamespaceURI(String)::: namespace impl set namespace i:::this->setValue
NamespaceImpl#init()::: namespace impl init:::setEventType
NamespaceImpl#getEventType()::: namespace impl get event type:::return
NamespaceImpl#isNamespace()::: namespace impl is namespace:::return
NotationDeclarationImpl#getName()::: notation declaration impl get name:::return
NotationDeclarationImpl#getPublicId()::: notation declaration impl get public id:::return
NotationDeclarationImpl#getSystemId()::: notation declaration impl get system id:::return
NotationDeclarationImpl#setPublicId(String)::: notation declaration impl set public id:::
NotationDeclarationImpl#setSystemId(String)::: notation declaration impl set system id:::
NotationDeclarationImpl#setName(String)::: notation declaration impl set name:::
NotationDeclarationImpl#writeAsEncodedUnicodeEx(java.io.Writer)::: notation declaration impl write as encoded unicode ex:::writer->write->writer->getName->write->if->writer->write->writer->write->writer->write->else->if->writer->write->writer->write->writer->write->writer->write->writer->write
ProcessingInstructionEvent#init()::: processing instruction event init:::setEventType
ProcessingInstructionEvent#getTarget()::: processing instruction event get target:::return
ProcessingInstructionEvent#setTarget(String)::: processing instruction event set target:::
ProcessingInstructionEvent#setData(String)::: processing instruction event set data:::
ProcessingInstructionEvent#getData()::: processing instruction event get data:::return
ProcessingInstructionEvent#toString()::: processing instruction event to string:::if->return->if->return->if->return->else->return
ProcessingInstructionEvent#writeAsEncodedUnicodeEx(java.io.Writer)::: processing instruction event write as encoded unicode ex:::writer->toString->write
StartDocumentEvent#init(String, String, boolean, Location)::: start document event init:::setEventType->if->encoding->equals->else
StartDocumentEvent#getSystemId()::: start document event get system id:::if->return->else->return->fLocation->getSystemId
StartDocumentEvent#getCharacterEncodingScheme()::: start document event get character encoding scheme:::return
StartDocumentEvent#isStandalone()::: start document event is standalone:::return
StartDocumentEvent#getVersion()::: start document event get version:::return
StartDocumentEvent#setStandalone(boolean)::: start document event set standalone:::
StartDocumentEvent#setStandalone(String)::: start document event set standalone:::if->return->if->s->equals->else
StartDocumentEvent#encodingSet()::: start document event encoding set:::return
StartDocumentEvent#standaloneSet()::: start document event standalone set:::return
StartDocumentEvent#setEncoding(String)::: start document event set encoding:::
StartDocumentEvent#setDeclaredEncoding(boolean)::: start document event set declared encoding:::
StartDocumentEvent#setVersion(String)::: start document event set version:::
StartDocumentEvent#clear()::: start document event clear:::
StartDocumentEvent#toString()::: start document event to string:::s->if->if->else->else->return
StartDocumentEvent#isStartDocument()::: start document event is start document:::return
StartDocumentEvent#writeAsEncodedUnicodeEx(java.io.Writer)::: start document event write as encoded unicode ex:::writer->toString->write
StartElementEvent#init()::: start element event init:::setEventType->new->HashMap<>->new->ArrayList<>
StartElementEvent#getName()::: start element event get name:::return
StartElementEvent#setName(QName)::: start element event set name:::
StartElementEvent#getAttributes()::: start element event get attributes:::if->coll->fAttributes->values->return->coll->iterator->new->ReadOnlyIterator<>->return->new->ReadOnlyIterator<>
StartElementEvent#getNamespaces()::: start element event get namespaces:::if->return->fNamespaces->iterator->new->ReadOnlyIterator<>->return->new->ReadOnlyIterator<>
StartElementEvent#getAttributeByName(QName)::: start element event get attribute by name:::if->return->return->fAttributes->get
StartElementEvent#getNamespace()::: start element event get namespace:::return->fQName->getNamespaceURI
StartElementEvent#getNamespaceURI(String)::: start element event get namespace i:::if->getNamespace->fQName->getPrefix->equals->return->getNamespace->if->return->fNamespaceContext->getNamespaceURI->return
StartElementEvent#toString()::: Return a String representation of this StartElement formatted as XML.:::startElement->new->StringBuilder->startElement->append->startElement->nameAsString->append->if->it->this->getAttributes->attr->while->it->hasNext->it->next->startElement->append->startElement->attr->toString->append->if->it->fNamespaces->iterator->ns->while->it->hasNext->it->next->startElement->append->startElement->ns->toString->append->startElement->append->return->startElement->toString
StartElementEvent#nameAsString():::Return this event as String:::if->fQName->getNamespaceURI->equals->return->fQName->getLocalPart->if->fQName->getPrefix->return->fQName->getNamespaceURI->fQName->getPrefix->fQName->getLocalPart->else->return->fQName->getNamespaceURI->fQName->getLocalPart
StartElementEvent#getNamespaceContext():::Gets a read-only namespace context:::return
StartElementEvent#setNamespaceContext(NamespaceContext)::: start element event set namespace context:::
StartElementEvent#writeAsEncodedUnicodeEx(java.io.Writer)::: start element event write as encoded unicode ex:::writer->toString->write
StartElementEvent#addAttribute(Attribute)::: start element event add attribute:::if->attr->isNamespace->fNamespaces->add->else->fAttributes->attr->getName->put
StartElementEvent#addAttributes(Iterator)::: start element event add attributes:::if->return->while->attrs->hasNext->attr->attrs->next->fAttributes->attr->getName->put
StartElementEvent#addNamespaceAttribute(Namespace)::: start element event add namespace attribute:::if->return->fNamespaces->add
StartElementEvent#addNamespaceAttributes(Iterator)::: start element event add namespace attributes:::if->return->while->attrs->hasNext->attr->attrs->next->fNamespaces->add
XMLEventAllocatorImpl#allocate(XMLStreamReader)::: event allocator impl allocate:::if->throw->new->XMLStreamException->return->getXMLEvent
XMLEventAllocatorImpl#allocate(XMLStreamReader, XMLEventConsumer)::: event allocator impl allocate:::currentEvent->getXMLEvent->if->xMLEventConsumer->add->return
XMLEventAllocatorImpl#newInstance()::: event allocator impl new instance:::return->new->XMLEventAllocatorImpl
XMLEventAllocatorImpl#getXMLEvent(XMLStreamReader)::: event allocator impl get event:::event->eventType->streamReader->getEventType->switch->startElementEvent->getQName->new->StartElementEvent->fillAttributes->if->streamReader->getProperty->fillNamespaceAttributes->setNamespaceContext->startElementEvent->streamReader->getLocation->setLocation->break->endElementEvent->getQName->new->EndElementEvent->endElementEvent->streamReader->getLocation->setLocation->if->streamReader->getProperty->fillNamespaceAttributes->break->piEvent->streamReader->getPITarget->streamReader->getPIData->new->ProcessingInstructionEvent->piEvent->streamReader->getLocation->setLocation->break->cDataEvent->streamReader->getText->new->CharacterEvent->cDataEvent->streamReader->getLocation->setLocation->break->commentEvent->streamReader->getText->new->CommentEvent->commentEvent->streamReader->getLocation->setLocation->break->sdEvent->new->StartDocumentEvent->sdEvent->streamReader->getVersion->setVersion->sdEvent->streamReader->getEncoding->setEncoding->if->streamReader->getCharacterEncodingScheme->sdEvent->setDeclaredEncoding->else->sdEvent->setDeclaredEncoding->sdEvent->streamReader->isStandalone->setStandalone->sdEvent->streamReader->getLocation->setLocation->break->endDocumentEvent->new->EndDocumentEvent->endDocumentEvent->streamReader->getLocation->setLocation->break->entityEvent->streamReader->getLocalName->streamReader->getLocalName->streamReader->getText->new->EntityDeclarationImpl->new->EntityReferenceEvent->entityEvent->streamReader->getLocation->setLocation->break->break->dtdEvent->streamReader->getText->new->DTDEvent->dtdEvent->streamReader->getLocation->setLocation->entities->streamReader->getProperty->if->entities->size->dtdEvent->setEntities->notations->streamReader->getProperty->if->notations->isEmpty->dtdEvent->setNotations->break->cDataEvent->streamReader->getText->new->CharacterEvent->cDataEvent->streamReader->getLocation->setLocation->break->spaceEvent->streamReader->getText->new->CharacterEvent->spaceEvent->streamReader->getLocation->setLocation->break->return
XMLEventAllocatorImpl#getNextEvent(XMLStreamReader)::: event allocator impl get next event:::streamReader->next->return->getXMLEvent
XMLEventAllocatorImpl#fillAttributes(StartElementEvent, XMLStreamReader)::: event allocator impl fill attributes:::len->xmlr->getAttributeCount->qname->attr->nattr->for->i
XMLEventAllocatorImpl#fillNamespaceAttributes(StartElementEvent, XMLStreamReader)::: event allocator impl fill namespace attributes:::count->xmlr->getNamespaceCount->uri->prefix->attr->for->i
XMLEventAllocatorImpl#fillNamespaceAttributes(EndElementEvent, XMLStreamReader)::: event allocator impl fill namespace attributes:::count->xmlr->getNamespaceCount->uri->prefix->attr->for->i
XMLEventAllocatorImpl#setNamespaceContext(StartElementEvent, XMLStreamReader)::: event allocator impl set namespace context:::contextWrapper->xmlr->getNamespaceContext->ns->contextWrapper->getNamespaceContext->new->NamespaceSupport->event->new->NamespaceContextWrapper->setNamespaceContext
XMLEventAllocatorImpl#getQName(XMLStreamReader)::: event allocator impl get name:::return->xmlr->getNamespaceURI->xmlr->getLocalName->xmlr->getPrefix->new->QName
XMLEventFactoryImpl#createAttribute(String, String)::: event factory impl create attribute:::attr->new->AttributeImpl->if->attr->setLocation->return
XMLEventFactoryImpl#createAttribute(QName, String)::: event factory impl create attribute:::return->name->getPrefix->name->getNamespaceURI->name->getLocalPart->createAttribute
XMLEventFactoryImpl#createAttribute(String, String, String, String)::: event factory impl create attribute:::attr->new->AttributeImpl->if->attr->setLocation->return
XMLEventFactoryImpl#createCData(String)::: event factory impl create data:::charEvent->new->CharacterEvent->if->charEvent->setLocation->return
XMLEventFactoryImpl#createCharacters(String)::: event factory impl create characters:::charEvent->new->CharacterEvent->if->charEvent->setLocation->return
XMLEventFactoryImpl#createComment(String)::: event factory impl create comment:::charEvent->new->CommentEvent->if->charEvent->setLocation->return
XMLEventFactoryImpl#createDTD(String)::: event factory impl create d:::dtdEvent->new->DTDEvent->if->dtdEvent->setLocation->return
XMLEventFactoryImpl#createEndDocument()::: event factory impl create end document:::event->new->EndDocumentEvent->if->event->setLocation->return
XMLEventFactoryImpl#createEndElement(QName, Iterator)::: event factory impl create end element:::return->name->getPrefix->name->getNamespaceURI->name->getLocalPart->createEndElement
XMLEventFactoryImpl#createEndElement(String, String, String)::: event factory impl create end element:::event->new->EndElementEvent->if->event->setLocation->return
XMLEventFactoryImpl#createEndElement(String, String, String, Iterator)::: event factory impl create end element:::event->new->EndElementEvent->if->while->namespaces->hasNext->event->namespaces->next->addNamespace->if->event->setLocation->return
XMLEventFactoryImpl#createEntityReference(String, EntityDeclaration)::: event factory impl create entity reference:::event->new->EntityReferenceEvent->if->event->setLocation->return
XMLEventFactoryImpl#createIgnorableSpace(String)::: event factory impl create ignorable space:::event->new->CharacterEvent->if->event->setLocation->return
XMLEventFactoryImpl#createNamespace(String)::: event factory impl create namespace:::event->new->NamespaceImpl->if->event->setLocation->return
XMLEventFactoryImpl#createNamespace(String, String)::: event factory impl create namespace:::event->new->NamespaceImpl->if->event->setLocation->return
XMLEventFactoryImpl#createProcessingInstruction(String, String)::: event factory impl create processing instruction:::event->new->ProcessingInstructionEvent->if->event->setLocation->return
XMLEventFactoryImpl#createSpace(String)::: event factory impl create space:::event->new->CharacterEvent->if->event->setLocation->return
XMLEventFactoryImpl#createStartDocument()::: event factory impl create start document:::event->new->StartDocumentEvent->if->event->setLocation->return
XMLEventFactoryImpl#createStartDocument(String)::: event factory impl create start document:::event->new->StartDocumentEvent->if->event->setLocation->return
XMLEventFactoryImpl#createStartDocument(String, String)::: event factory impl create start document:::event->new->StartDocumentEvent->if->event->setLocation->return
XMLEventFactoryImpl#createStartDocument(String, String, boolean)::: event factory impl create start document:::event->new->StartDocumentEvent->if->event->setLocation->return
XMLEventFactoryImpl#createStartElement(QName, Iterator, Iterator)::: event factory impl create start element:::return->name->getPrefix->name->getNamespaceURI->name->getLocalPart->createStartElement
XMLEventFactoryImpl#createStartElement(String, String, String)::: event factory impl create start element:::event->new->StartElementEvent->if->event->setLocation->return
XMLEventFactoryImpl#createStartElement(String, String, String, Iterator, Iterator)::: event factory impl create start element:::return->createStartElement
XMLEventFactoryImpl#createStartElement(String, String, String, Iterator, Iterator, NamespaceContext)::: event factory impl create start element:::elem->new->StartElementEvent->elem->addAttributes->elem->addNamespaceAttributes->elem->setNamespaceContext->if->elem->setLocation->return
XMLEventFactoryImpl#setLocation(javax.xml.stream.Location)::: event factory impl set location:::

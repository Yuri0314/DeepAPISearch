CharacterEvent#writeAsEncodedUnicodeEx(Writer):::This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters:::if->writer->getData->write->else->charEncode
CharacterEvent#isIgnorableWhiteSpace():::Return true if this is ignorableWhiteSpace:::return
CharacterEvent#isWhiteSpace():::Returns true if this set of Characters is all whitespace:::if->checkWhiteSpace->return
CommentEvent#getText():::Return the string data of the comment, returns empty string if it does not exist:::return
DTDEvent#getProcessedDTD():::Returns an implementation defined representation of the DTD:::return
DummyEvent#asCharacters():::Returns this event as Characters, may result in a class cast exception if this event is not Characters.:::return
DummyEvent#asEndElement():::Returns this event as an end  element event, may result in a class cast exception if this event is not a end element.:::return
DummyEvent#asStartElement():::Returns this event as a start element event, may result in a class cast exception if this event is not a start element.:::return
DummyEvent#getSchemaType():::This method is provided for implementations to provide optional type information about the associated event:::return
DummyEvent#isAttribute():::A utility function to check if this event is an Attribute.:::return
DummyEvent#isCharacters():::A utility function to check if this event is Characters.:::return
DummyEvent#isNamespace():::A utility function to check if this event is a Namespace.:::return
DummyEvent#writeAsEncodedUnicode(Writer):::This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters:::try->writeAsEncodedUnicodeEx->catch->throw->new->XMLStreamException->finally
DummyEvent#writeAsEncodedUnicodeEx(Writer):::Helper method in order to expose IOException.:::
DummyEvent#charEncode(Writer, String):::Helper method to escape < > & for characters event and  quotes, lt and amps for Entity:::if->return->i->start->len->data->length->for->writer->write
EndElementEvent#getNamespaces():::Returns an Iterator of namespaces that have gone out of scope:::if->fNamespaces->iterator->return->new->ReadOnlyIterator<>
StartElementEvent#toString()::: Return a String representation of this StartElement formatted as XML.:::startElement->new->StringBuilder->startElement->append->startElement->nameAsString->append->if->it->this->getAttributes->attr->while->it->hasNext->it->next->startElement->append->startElement->attr->toString->append->if->it->fNamespaces->iterator->ns->while->it->hasNext->it->next->startElement->append->startElement->ns->toString->append->startElement->append->return->startElement->toString
StartElementEvent#nameAsString():::Return this event as String:::if->fQName->getNamespaceURI->equals->return->fQName->getLocalPart->if->fQName->getPrefix->return->fQName->getNamespaceURI->fQName->getPrefix->fQName->getLocalPart->else->return->fQName->getNamespaceURI->fQName->getLocalPart
StartElementEvent#getNamespaceContext():::Gets a read-only namespace context:::return

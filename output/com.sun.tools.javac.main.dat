Arguments#instance(Context):::Gets the Arguments instance for this context.:::instance->context->get->if->new->Arguments->return
Arguments#init(String, String...):::Initializes this Args instance with a set of command line args:::new->LinkedHashSet<>->new->LinkedHashMap<>->new->LinkedHashSet<>->List->from->Option->getJavaCompilerOptions->processArgs->if->log->printLines
Arguments#init(String, Iterable, Iterable, Iterable):::Initializes this Args instance with the parameters for a JavacTask:::toSet->toSet->if->toList->Option->getJavacToolOptions->processArgs
Arguments#init(String):::Minimal initialization for tools, like javadoc, to be able to process javac options for themselves, and then call validate.:::
Arguments#getFileObjects():::Gets the files to be compiled.:::if->new->LinkedHashSet<>->if->jfm->getFileManager->foreach->jfm->getJavaFileObjectsFromPaths->fileObjects->add->return
Arguments#getClassNames():::Gets the classes to be subject to annotation processing.:::return
Arguments#handleReleaseOptions(Predicate>):::Handles the --release option.:::platformString->options->get->Errors->ReleaseBootclasspathConflict->reportDiag->checkOptionAllowed->if->platformDescription->PlatformUtils->lookupPlatformDescription->if->Errors->UnsupportedReleaseVersion->reportDiag->return->options->platformDescription->getSourceVersion->put->options->platformDescription->getTargetVersion->put->context->put->if->additionalOptions->platformDescription->getAdditionalOptions->test->return->platformFM->platformDescription->getFileManager->DelegatingJavaFileManager->getFileManager->installReleaseFileManager->return
Arguments#processArgs(Iterable, Set, OptionHelper, boolean, boolean):::Processes strings containing options and operands.:::if->doProcessArgs->return->if->doProcessArgs->handleReleaseOptions->return->options->notifyListeners->return
Arguments#doProcessArgs(Iterable, Set, OptionHelper, boolean, boolean)::: arguments do process args:::fm->getFileManager->argIter->args->iterator->while->argIter->hasNext->arg->argIter->next->if->arg->isEmpty->Errors->InvalidFlag->reportDiag->return->option->if->arg->startsWith->Option->lookup->else->if->matches->if->try->option->handleOption->catch->error->return->finally->continue->if->fm->handleOption->continue->Errors->InvalidFlag->reportDiag->return->return
Arguments#validate():::Validates the overall consistency of the options and operands processed by processOptions.:::fm->getFileManager->if->options->isSet->if->fm->hasLocation->log->error->else->if->fm->hasLocation->log->error->else->modules->Arrays->options->get->split->asList->try->foreach->sourceLoc->fm->getLocationForModule->if->log->Errors->ModuleNotFoundInModuleSourcePath->error->else->classLoc->fm->getLocationForModule->foreach->fm->EnumSet->of->list->className->fm->inferBinaryName->classFile->fm->getJavaFileForInput->if->classFile->getLastModified->file->getLastModified->if->new->HashSet<>->fileObjects->add->catch->log->printLines->ex->log->getWriter->printStackTrace->return->finally->if->isEmpty->if->options->isSet->options->isSet->options->isSet->options->isSet->options->isSet->return->if->if->if->JavaCompiler->explicitAnnotationProcessingRequested->reportDiag->else->reportDiag->return->if->checkDirectory->return->if->checkDirectory->return->if->checkDirectory->return->if->sfm->if->sfm->hasLocation->outDir->sfm->getLocationAsPaths->iterator->next->if->sfm->hasLocation->if->Files->outDir->resolve->exists->log->Errors->MultiModuleOutdirCannotBeExplodedModule->error->else->lintPaths->options->isUnset->if->outDirParent->outDir->getParent->if->Files->outDirParent->resolve->exists->log->Warnings->OutdirIsInExplodedModule->warning->sourceString->options->get->source->Source->lookup->targetString->options->get->target->Target->lookup->if->Character->charAt->isDigit->if->target->source->requiredTarget->compareTo->if->if->Warnings->source->requiredTarget->TargetDefaultSourceConflict->reportDiag->else->Warnings->source->requiredTarget->SourceTargetConflict->reportDiag->return->else->source->requiredTarget->options->put->if->options->isSet->if->report->return->else->if->Errors->PreviewNotLatest->report->return->profileString->options->get->if->profile->Profile->lookup->if->profile->isValid->Warnings->ProfileTargetConflict->reportDiag->if->options->get->reportDiag->if->options->isSet->options->isSet->reportDiag->lintOptions->options->isUnset->if->source->compareTo->options->isSet->if->if->isDefaultBootClassPath->log->Warnings->SourceNoBootclasspath->warning->obsoleteOptionFound->if->source->compareTo->log->Errors->OptionRemovedSource->error->else->if->log->Warnings->OptionObsoleteSource->warning->if->target->compareTo->log->Errors->OptionRemovedTarget->error->else->if->log->Warnings->OptionObsoleteTarget->warning->t->t->compareTo->Errors->OptionNotAllowedWithTarget->reportDiag->checkOptionAllowed->t->compareTo->Errors->OptionNotAllowedWithTarget->reportDiag->checkOptionAllowed->if->options->isSet->target->hasMethodParameters->log->Warnings->OptionParametersUnsupported->warning->if->fm->hasLocation->if->options->isSet->fm->hasLocation->log->error->if->fm->hasLocation->fm->hasLocation->log->error->if->log->warning->sv->Source->toSourceVersion->validateAddExports->validateAddModules->validateAddReads->validateLimitModules->validateDefaultModuleForCreatedFiles->if->options->isSet->log->warning->return
Arguments#validateAddExports(SourceVersion)::: arguments validate add exports:::addExports->options->get->if->p->getPattern->foreach->addExports->split->m->p->matcher->if->m->matches->sourceModuleName->m->group->if->SourceVersion->isName->log->Warnings->BadNameForOption->warning->sourcePackageName->m->group->if->SourceVersion->isName->log->Warnings->BadNameForOption->warning->targetNames->m->group->foreach->targetNames->split->switch->break->if->SourceVersion->isName->log->Warnings->BadNameForOption->warning->break
Arguments#validateAddReads(SourceVersion)::: arguments validate add reads:::addReads->options->get->if->p->getPattern->foreach->addReads->split->m->p->matcher->if->m->matches->sourceName->m->group->if->SourceVersion->isName->log->Warnings->BadNameForOption->warning->targetNames->m->group->foreach->targetNames->split->switch->break->if->SourceVersion->isName->log->Warnings->BadNameForOption->warning->break
Arguments#validateAddModules(SourceVersion)::: arguments validate add modules:::addModules->options->get->if->foreach->addModules->split->switch->break->if->SourceVersion->isName->log->Errors->BadNameForOption->error->break
Arguments#validateLimitModules(SourceVersion)::: arguments validate limit modules:::limitModules->options->get->if->foreach->limitModules->split->switch->break->if->SourceVersion->isName->log->Errors->BadNameForOption->error->break
Arguments#validateDefaultModuleForCreatedFiles(SourceVersion)::: arguments validate default module for created files:::moduleName->options->get->if->if->SourceVersion->isName->log->Errors->BadNameForOption->error
Arguments#isEmpty():::Returns true if there are no files or classes specified for use.:::return->files->isEmpty->fileObjects->isEmpty->classNames->isEmpty
Arguments#allowEmpty()::: arguments allow empty:::
Arguments#getDeferredFileManagerOptions():::Gets the file manager options which may have been deferred during processArgs.:::return
Arguments#getPluginOpts():::Gets any options specifying plugins to be run.:::plugins->options->get->if->return->Collections->emptySet->pluginOpts->new->LinkedHashSet<>->foreach->plugins->split->pluginOpts->List->plugin->split->from->add->return->Collections->unmodifiableSet
Arguments#getDocLintOpts():::Gets any options specifying how doclint should be run:::xdoclint->options->get->xdoclintCustom->options->get->if->return->List->nil->doclintOpts->new->LinkedHashSet<>->if->doclintOpts->add->if->foreach->xdoclintCustom->split->if->s->isEmpty->continue->doclintOpts->add->if->doclintOpts->Collections->singleton->equals->return->List->nil->checkPackages->options->get->if->doclintOpts->add->format->options->get->if->doclintOpts->add->doclintOpts->add->return->List->doclintOpts->doclintOpts->size->new->StringArr->toArray->from
Arguments#checkDirectory(Option)::: arguments check directory:::value->options->get->if->return->file->Paths->get->if->Files->exists->Files->isDirectory->Errors->FileNotDirectory->reportDiag->return->return
Arguments.ErrorReporter#report(Option)::: error reporter report:::
Arguments#checkOptionAllowed(boolean, ErrorReporter, Option...)::: arguments check option allowed:::if->Stream->of->options->isSet->filter->r->report->forEach
Arguments#reportDiag(DiagnosticInfo)::: arguments report diag:::switch->msg->log->localize->throw->new->IllegalArgumentException->new->PropagatedException->msg->log->localize->throw->new->IllegalStateException->new->PropagatedException->report
Arguments#error(Option.InvalidValueException)::: arguments error:::msg->f->getMessage->switch->throw->f->getCause->new->IllegalArgumentException->new->PropagatedException->throw->f->getCause->new->IllegalStateException->new->PropagatedException->log->printRawLines
Arguments#report(DiagnosticInfo)::: arguments report:::if->log->error->else->if->log->warning
Arguments#getFileManager()::: arguments get file manager:::if->context->get->return
Arguments#toList(Iterable)::: arguments to list:::list->new->ListBuffer<>->if->foreach->list->add->return
Arguments#toSet(Iterable)::: arguments to set:::set->new->LinkedHashSet<>->if->foreach->set->add->return
CommandLine#parse(String[]):::Process Win32-style command files for the specified command line arguments and return the resulting arguments:::newArgs->new->ArrayList<>->Arrays->asList->appendParsedCommandArgs->return->newArgs->newArgs->size->new->StringArr->toArray
CommandLine#appendParsedCommandArgs(List, List)::: command line append parsed command args:::foreach->if->arg->length->arg->charAt->arg->substring->if->arg->charAt->newArgs->add->else->loadCmdFile->else->newArgs->add
CommandLine#parse(String, List):::Process the given environment variable and appends any Win32-style command files for the specified command line arguments and return the resulting arguments:::inArgs->new->ArrayList<>->appendParsedEnvVariables->inArgs->addAll->newArgs->new->ArrayList<>->appendParsedCommandArgs->return
CommandLine#parse(String, String[]):::Process the given environment variable and appends any Win32-style command files for the specified command line arguments and return the resulting arguments:::out->Arrays->asList->parse->return->out->out->size->new->StringArr->toArray
CommandLine#loadCmdFile(String, List)::: command line load cmd file:::try->r->Files->Paths->get->newBufferedReader->t->new->Tokenizer->s->while->t->nextToken->args->add->catch->finally
CommandLine.Tokenizer#nextToken()::: tokenizer next token:::skipWhite->if->return->sb->new->StringBuilder->quoteChar->while->switch->if->return->sb->toString->sb->append->break->return->sb->toString->if->else->if->else->sb->append->break->if->in->read->switch->while->in->read->continue->break->break->break->break->sb->append->break->sb->append->in->read->return->sb->toString
CommandLine.Tokenizer#skipWhite()::: tokenizer skip white:::while->switch->break->in->read->while->in->read->break->return->in->read
CommandLine#appendParsedEnvVariables(List, String)::: command line append parsed env variables:::if->return->in->System->getenv->if->in->trim->isEmpty->return->NUL->len->in->length->pos->sb->new->StringBuilder->quote->ch->while->in->charAt->switch->if->else->if->else->sb->append->break->if->newArgs->sb->toString->add->sb->setLength->while->if->break->in->charAt->break->sb->append->if->sb->length->newArgs->sb->toString->add->if->throw->new->UnmatchedQuote
DelegatingJavaFileManager#installReleaseFileManager(Context, JavaFileManager, JavaFileManager)::: delegating java file manager install release file manager:::context->put->nue->new->DelegatingSJFM->new->DelegatingJavaFileManager->context->put
DelegatingJavaFileManager#delegate(Location)::: delegating java file manager delegate:::if->releaseFM->hasLocation->return->return
DelegatingJavaFileManager#getClassLoader(Location)::: delegating java file manager get class loader:::return->delegate->getClassLoader
DelegatingJavaFileManager#list(Location, String, Set, boolean)::: delegating java file manager list:::return->delegate->list
DelegatingJavaFileManager#inferBinaryName(Location, JavaFileObject)::: delegating java file manager infer binary name:::return->delegate->inferBinaryName
DelegatingJavaFileManager#isSameFile(FileObject, FileObject)::: delegating java file manager is same file:::return->baseFM->isSameFile
DelegatingJavaFileManager#handleOption(String, Iterator)::: delegating java file manager handle option:::return->baseFM->handleOption
DelegatingJavaFileManager#hasLocation(Location)::: delegating java file manager has location:::return->releaseFM->hasLocation->baseFM->hasLocation
DelegatingJavaFileManager#getJavaFileForInput(Location, String, Kind)::: delegating java file manager get java file for input:::return->delegate->getJavaFileForInput
DelegatingJavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)::: delegating java file manager get java file for output:::return->delegate->getJavaFileForOutput
DelegatingJavaFileManager#getFileForInput(Location, String, String)::: delegating java file manager get file for input:::return->delegate->getFileForInput
DelegatingJavaFileManager#getFileForOutput(Location, String, String, FileObject)::: delegating java file manager get file for output:::return->delegate->getFileForOutput
DelegatingJavaFileManager#flush()::: delegating java file manager flush:::releaseFM->flush->baseFM->flush
DelegatingJavaFileManager#close()::: delegating java file manager close:::releaseFM->close->baseFM->close
DelegatingJavaFileManager#getLocationForModule(Location, String)::: delegating java file manager get location for module:::return->delegate->getLocationForModule
DelegatingJavaFileManager#getLocationForModule(Location, JavaFileObject)::: delegating java file manager get location for module:::return->delegate->getLocationForModule
DelegatingJavaFileManager#getServiceLoader(Location, Class)::: delegating java file manager get service loader:::return->delegate->getServiceLoader
DelegatingJavaFileManager#inferModuleName(Location)::: delegating java file manager infer module name:::return->delegate->inferModuleName
DelegatingJavaFileManager#listLocationsForModules(Location)::: delegating java file manager list locations for modules:::return->delegate->listLocationsForModules
DelegatingJavaFileManager#contains(Location, FileObject)::: delegating java file manager contains:::return->delegate->contains
DelegatingJavaFileManager#isSupportedOption(String)::: delegating java file manager is supported option:::return->baseFM->isSupportedOption
DelegatingJavaFileManager#getBaseFileManager()::: delegating java file manager get base file manager:::return
DelegatingJavaFileManager.DelegatingSJFM#isSameFile(FileObject, FileObject)::: delegating m is same file:::return->baseSJFM->isSameFile
DelegatingJavaFileManager.DelegatingSJFM#getJavaFileObjectsFromFiles(Iterable)::: delegating m get java file objects from files:::return->baseSJFM->getJavaFileObjectsFromFiles
DelegatingJavaFileManager.DelegatingSJFM#getJavaFileObjectsFromPaths(Iterable)::: delegating m get java file objects from paths:::return->baseSJFM->getJavaFileObjectsFromPaths
DelegatingJavaFileManager.DelegatingSJFM#getJavaFileObjects(File...)::: delegating m get java file objects:::return->baseSJFM->getJavaFileObjects
DelegatingJavaFileManager.DelegatingSJFM#getJavaFileObjects(Path...)::: delegating m get java file objects:::return->baseSJFM->getJavaFileObjects
DelegatingJavaFileManager.DelegatingSJFM#getJavaFileObjectsFromStrings(Iterable)::: delegating m get java file objects from strings:::return->baseSJFM->getJavaFileObjectsFromStrings
DelegatingJavaFileManager.DelegatingSJFM#getJavaFileObjects(String...)::: delegating m get java file objects:::return->baseSJFM->getJavaFileObjects
DelegatingJavaFileManager.DelegatingSJFM#setLocation(Location, Iterable)::: delegating m set location:::baseSJFM->setLocation
DelegatingJavaFileManager.DelegatingSJFM#setLocationFromPaths(Location, Collection)::: delegating m set location from paths:::baseSJFM->setLocationFromPaths
DelegatingJavaFileManager.DelegatingSJFM#setLocationForModule(Location, String, Collection)::: delegating m set location for module:::baseSJFM->setLocationForModule
DelegatingJavaFileManager.DelegatingSJFM#getLocation(Location)::: delegating m get location:::return->baseSJFM->getLocation
DelegatingJavaFileManager.DelegatingSJFM#getLocationAsPaths(Location)::: delegating m get location as paths:::return->baseSJFM->getLocationAsPaths
DelegatingJavaFileManager.DelegatingSJFM#asPath(FileObject)::: delegating m as path:::return->baseSJFM->asPath
DelegatingJavaFileManager.DelegatingSJFM#setPathFactory(PathFactory)::: delegating m set path factory:::baseSJFM->setPathFactory
JavaCompiler#instance(Context):::Get the JavaCompiler instance for this context.:::instance->context->get->if->new->JavaCompiler->return
JavaCompiler#version():::The current version number as a string.:::return->version
JavaCompiler#fullVersion():::The current full version number as a string.:::return->version
JavaCompiler#version(String)::: java compiler version:::if->try->ResourceBundle->getBundle->catch->return->Log->getLocalizedString->finally->try->return->versionRB->getString->catch->return->Log->getLocalizedString->finally
JavaCompiler#shouldStop(CompileState)::: java compiler should stop:::shouldStopPolicy->errorCount->unrecoverableError->return->cs->isAfter
JavaCompiler#errorCount():::The number of errors reported so far.:::if->log->error->return
JavaCompiler#stopIfError(CompileState, Queue)::: java compiler stop if error:::return->shouldStop->new->ListBuffer<T>
JavaCompiler#stopIfError(CompileState, List)::: java compiler stop if error:::return->shouldStop->List->nil
JavaCompiler#warningCount():::The number of warnings reported so far.:::return
JavaCompiler#readSource(JavaFileObject):::Try to open input stream with given name:::try->inputFiles->add->return->filename->getCharContent->catch->log->Errors->JavacFileManager->getMessage->ErrorReadingFile->error->return->finally
JavaCompiler#parse(JavaFileObject, CharSequence):::Parse contents of input stream.:::msec->now->tree->make->List->nil->TopLevel->if->if->log->printVerbose->if->taskListener->isEmpty->e->new->TaskEvent->taskListener->started->parser->parserFactory->keepComments->filename->isNameCompatible->newParser->parser->parseCompilationUnit->if->log->Long->elapsed->toString->printVerbose->if->taskListener->isEmpty->e->new->TaskEvent->taskListener->finished->return
JavaCompiler#keepComments()::: java compiler keep comments:::return
JavaCompiler#parse(String):::Parse contents of file.:::fm->return->fm->List->of->getJavaFileObjectsFromStrings->iterator->next->parse
JavaCompiler#parse(JavaFileObject):::Parse contents of file.:::prev->log->useSource->try->t->readSource->parse->if->log->setEndPosTable->return->catch->finally->log->useSource
JavaCompiler#resolveBinaryNameOrIdent(String):::Resolve an identifier which may be the binary name of a class or the Java name of a class or package.:::msym->typeName->sep->name->indexOf->if->modules->getDefaultModule->else->if->allowedInSource->modName->names->name->substring->fromString->moduleFinder->findModule->name->substring->else->log->Errors->InvalidModuleSpecifier->error->return->return->resolveBinaryNameOrIdent
JavaCompiler#resolveBinaryNameOrIdent(ModuleSymbol, String):::Resolve an identifier which may be the binary name of a class or the Java name of a class or package.:::try->flatname->names->name->replace->fromString->return->finder->loadClass->catch->return->resolveIdent->finally
JavaCompiler#resolveIdent(ModuleSymbol, String):::Resolve an identifier.:::if->name->equals->return->prev->log->useSource->try->tree->foreach->name->split->if->SourceVersion->isIdentifier->return->make->names->fromString->Ident->make->names->fromString->Select->toplevel->make->List->nil->TopLevel->return->attr->attribIdent->catch->finally->log->useSource
JavaCompiler#genCode(Env, JCClassDecl):::Generate code and emit a class file for a given class:::try->if->gen->genClass->errorCount->return->writer->writeClass->catch->log->cdef->pos->error->log->cdef->pos->Errors->substring->LimitStringOverflow->error->chk->cdef->pos->completionError->finally->return
JavaCompiler#printSource(Env, JCClassDecl):::Emit plain Java source for a class.:::outFile->fileManager->toString->getJavaFileForOutput->if->inputFiles->contains->log->cdef->pos->Errors->SourceCantOverwriteInputFile->error->return->else->try->out->outFile->openWriter->new->BufferedWriter->new->Pretty->printUnit->if->log->outFile->getName->printVerbose->catch->finally->return
JavaCompiler#readSourceFile(ClassSymbol):::Compile a source file that has been accessed by the class finder.:::readSourceFile
JavaCompiler#readSourceFile(JCCompilationUnit, ClassSymbol):::Compile a ClassSymbol from source, optionally using the given compilation unit as  the source tree.:::if->msg->diagFactory->fragment->throw->new->CompletionFailure->filename->prev->log->useSource->if->try->filename->getCharContent->parse->catch->log->Errors->JavacFileManager->getMessage->ErrorReadingFile->error->make->List->nil->TopLevel->finally->log->useSource->if->taskListener->isEmpty->e->new->TaskEvent->taskListener->started->if->modules->List->of->enter->throw->diags->fragment->new->CompletionFailure->enter->List->of->complete->if->taskListener->isEmpty->e->new->TaskEvent->taskListener->finished->if->enter->getEnv->isPkgInfo->isNameCompatible->isModuleInfo->isNameCompatible->if->if->enter->getEnv->diag->diagFactory->fragment->throw->new->ClassFinder.BadClassFile->else->if->if->enter->getEnv->diag->diagFactory->Fragments->c->location->FileDoesNotContainPackage->fragment->throw->new->ClassFinder.BadClassFile->else->diag->diagFactory->Fragments->c->getQualifiedName->FileDoesntContainClass->fragment->throw->new->ClassFinder.BadClassFile
JavaCompiler#compile(List)::: java compiler compile:::List->nil->List->nil->compile
JavaCompiler#compile(Collection, Collection, Iterable, Collection):::Main method: compile a list of files, return all compiled classes:::if->taskListener->isEmpty->taskListener->new->TaskEvent->started->if->processors->iterator->hasNext->if->checkReusable->options->put->options->remove->now->try->initProcessAnnotations->foreach->sep->className->indexOf->if->modules->className->substring->addExtraAddModules->foreach->modules->addExtraAddModules->parseFiles->stopIfError->initModules->stopIfError->enterTrees->processAnnotations->if->taskListener->isEmpty->todo->retainFiles->switch->attribute->break->attribute->flow->break->attribute->flow->desugar->generate->break->q->todo->groupByFile->while->q->isEmpty->shouldStop->q->remove->attribute->flow->desugar->generate->break->while->todo->isEmpty->todo->remove->attribute->flow->desugar->generate->break->Assert->error->catch->if->ex->printStackTrace->finally->if->elapsed->log->Long->toString->printVerbose->reportDeferredDiagnostics->if->log->hasDiagnosticListener->errorCount->printCount->warningCount->printCount->if->taskListener->isEmpty->taskListener->new->TaskEvent->finished->close->if->procEnvImpl->close
JavaCompiler#checkReusable()::: java compiler check reusable:::throw->new->AssertionError
JavaCompiler#parseFiles(Iterable):::Parses a list of files.:::if->shouldStop->return->List->nil->trees->new->ListBuffer<>->filesSoFar->new->HashSet<>->foreach->if->filesSoFar->contains->filesSoFar->add->trees->parse->append->return->trees->toList
JavaCompiler#enterTreesIfNeeded(List):::Enter the symbols found in a list of parse trees if the compilation is expected to proceed beyond anno processing into attr:::if->shouldStop->return->List->nil->return->initModules->enterTrees
JavaCompiler#initModules(List)::: java compiler init modules:::modules->initModules->if->roots->isEmpty->enterDone->return
JavaCompiler#enterTrees(List):::Enter the symbols found in a list of parse trees:::if->taskListener->isEmpty->foreach->e->new->TaskEvent->taskListener->started->enter->main->enterDone->if->taskListener->isEmpty->foreach->e->new->TaskEvent->taskListener->finished->if->cdefs->new->ListBuffer<>->foreach->for->defs->defs->nonEmpty->cdefs->toList->foreach->inputFiles->add->return
JavaCompiler#initProcessAnnotations(Iterable, Collection, Collection):::Check if we should process annotations:::if->options->isSet->else->if->JavacProcessingEnvironment->instance->procEnvImpl->setProcessors->procEnvImpl->atLeastOneProcessor->if->options->put->if->taskListener->isEmpty->taskListener->new->TaskEvent->started->new->Log.DeferredDiagnosticHandler->procEnvImpl->getFiler->setInitialState->else->procEnvImpl->close
JavaCompiler#processAnnotations(List)::: java compiler process annotations:::List->nil->processAnnotations
JavaCompiler#processAnnotations(List, Collection)::: java compiler process annotations:::if->shouldStop->if->unrecoverableError->deferredDiagnosticHandler->reportDeferredDiagnostics->log->popDiagnosticHandler->return->if->if->options->isSet->log->warning->todo->clear->if->classnames->isEmpty->log->Errors->ProcNoExplicitAnnotationProcessingRequested->error->Assert->checkNull->return->Assert->checkNonNull->try->classSymbols->List->nil->pckSymbols->List->nil->if->classnames->isEmpty->if->explicitAnnotationProcessingRequested->log->Errors->ProcNoExplicitAnnotationProcessingRequested->error->deferredDiagnosticHandler->reportDeferredDiagnostics->log->popDiagnosticHandler->return->else->errors->foreach->sym->resolveBinaryNameOrIdent->if->if->log->Errors->ProcCantFindClass->error->continue->try->if->sym->complete->if->sym->exists->if->pckSymbols->prepend->else->classSymbols->prepend->continue->Assert->check->log->Warnings->ProcPackageDoesNotExist->warning->pckSymbols->prepend->catch->log->Errors->ProcCantFindClass->error->continue->finally->if->deferredDiagnosticHandler->reportDeferredDiagnostics->log->popDiagnosticHandler->return->try->procEnvImpl->doProcessing->catch->finally->procEnvImpl->close->catch->log->Errors->ex->getDetailValue->CantAccess->error->if->deferredDiagnosticHandler->reportDeferredDiagnostics->log->popDiagnosticHandler->finally
JavaCompiler#unrecoverableError()::: java compiler unrecoverable error:::if->foreach->deferredDiagnosticHandler->getDiagnostics->if->d->getKind->d->isFlagSet->return->return
JavaCompiler#explicitAnnotationProcessingRequested()::: java compiler explicit annotation processing requested:::return->explicitAnnotationProcessingRequested
JavaCompiler#explicitAnnotationProcessingRequested(Options)::: java compiler explicit annotation processing requested:::return->options->isSet->options->isSet->options->isSet->options->isSet->options->isSet
JavaCompiler#setDeferredDiagnosticHandler(Log.DeferredDiagnosticHandler)::: java compiler set deferred diagnostic handler:::
JavaCompiler#attribute(Queue>):::Attribute a list of parse trees, such as found on the "todo" list:::results->new->ListBuffer<>->while->envs->isEmpty->results->envs->remove->attribute->append->return->stopIfError
JavaCompiler#attribute(Env):::Attribute a parse tree.:::if->compileStates->isDone->return->if->printNote->if->log->printVerbose->if->taskListener->isEmpty->e->new->TaskEvent->taskListener->started->prev->log->useSource->try->attr->attrib->if->errorCount->shouldStop->attr->postAttr->compileStates->put->catch->finally->log->useSource->return
JavaCompiler#flow(Queue>):::Perform dataflow checks on attributed parse trees:::results->new->ListBuffer<>->foreach->flow->return->stopIfError
JavaCompiler#flow(Env):::Perform dataflow checks on an attributed parse tree.:::results->new->ListBuffer<>->flow->return->stopIfError
JavaCompiler#flow(Env, Queue>):::Perform dataflow checks on an attributed parse tree.:::if->compileStates->isDone->results->add->return->try->if->shouldStop->return->if->printNote->prev->log->useSource->try->make->at->localMake->make->forToplevel->flow->analyzeTree->compileStates->put->if->shouldStop->return->analyzer->flush->results->add->catch->finally->log->useSource->catch->finally->if->taskListener->isEmpty->e->new->TaskEvent->taskListener->finished
JavaCompiler#desugar(Queue>):::Prepare attributed parse trees, in conjunction with their attribution contexts, for source or code generation:::results->new->ListBuffer<>->foreach->desugar->return->stopIfError
JavaCompiler#desugar(Env, Queue, JCClassDecl>>):::Prepare attributed parse trees, in conjunction with their attribution contexts, for source or code generation:::if->shouldStop->return->if->inputFiles->contains->return->if->modules->getDefaultModule->return->if->compileStates->isDone->results->desugaredEnvs->get->addAll->return->scanner->new->ScanNested->scanner->scan->foreach->if->compileStates->isDone->desugaredEnvs->attribute->flow->desugar->put->if->shouldStop->return->if->printNote->prev->log->useSource->try->untranslated->make->at->localMake->make->forToplevel->if->hasTag->hasTag->if->if->shouldStop->return->def->lower->translateTopLevelClass->if->Assert->isEmpty->check->results->new->Pair<>->add->return->if->shouldStop->return->transTypes->translateTopLevelClass->compileStates->put->if->allowedInSource->if->shouldStop->return->LambdaToMethod->instance->translateTopLevelClass->compileStates->put->if->shouldStop->return->if->cdef->if->rootClasses->contains->results->new->Pair<>->add->return->cdefs->lower->translateTopLevelClass->compileStates->put->if->shouldStop->return->for->l->l->nonEmpty->catch->finally->log->useSource
JavaCompiler#generate(Queue, JCClassDecl>>):::Generates the source or class file for a list of classes:::generate
JavaCompiler#generate(Queue, JCClassDecl>>, Queue)::: java compiler generate:::if->shouldStop->return->foreach->env->cdef->if->printNote->if->taskListener->isEmpty->e->new->TaskEvent->taskListener->started->prev->log->useSource->try->file->if->printSource->else->if->fileManager->hasLocation->jniWriter->needsHeader->jniWriter->write->genCode->if->results->add->catch->log->cdef->pos->Errors->ex->getMessage->ClassCantWrite->error->return->finally->log->useSource->if->taskListener->isEmpty->e->new->TaskEvent->taskListener->finished
JavaCompiler#groupByFile(Queue>)::: java compiler group by file:::map->new->LinkedHashMap<>->foreach->sublist->map->get->if->new->ListBuffer<>->map->put->sublist->add->return
JavaCompiler#removeMethodBodies(JCClassDecl)::: java compiler remove method bodies:::isInterface->r->new->MethodBodyRemover->return->r->translate
JavaCompiler#reportDeferredDiagnostics()::: java compiler report deferred diagnostics:::if->errorCount->if->explicitAnnotationProcessingRequested->log->warning->else->log->warning->chk->reportDeferredDiagnostics->preview->reportDeferredDiagnostics->if->log->mandatoryNote
JavaCompiler#enterDone()::: java compiler enter done:::annotate->enterDone
JavaCompiler#isEnterDone()::: java compiler is enter done:::return
JavaCompiler#readModuleName(JavaFileObject)::: java compiler read module name:::return->md->t->getModuleDecl->return->TreeInfo->md->getName->fullName->parseAndGetName
JavaCompiler#findPackageInFile(JavaFileObject)::: java compiler find package in file:::return->t->getPackage->TreeInfo->t->getPackage->getPackageName->fullName->parseAndGetName
JavaCompiler#parseAndGetName(JavaFileObject, Function)::: java compiler parse and get name:::dh->new->DiscardDiagnosticHandler->try->t->fo->getCharContent->parse->return->tree2Name->apply->catch->return->finally->log->popDiagnosticHandler
JavaCompiler#close():::Close the compiler, flushing the logs:::if->todo->clear->log->flush->try->fileManager->flush->catch->throw->new->Abort->finally->if->names->dispose->foreach->try->c->close->catch->msg->diagFactory->fragment->throw->new->FatalError->finally->List->nil
JavaCompiler#printNote(String)::: java compiler print note:::log->printRawLines
JavaCompiler#printCount(String, int):::Print numbers of errors and warnings.:::if->key->if->else->log->String->valueOf->printLines->log->flush
JavaCompiler#now()::: java compiler now:::return->System->currentTimeMillis
JavaCompiler#elapsed(long)::: java compiler elapsed:::return->now
JavaCompiler#newRound()::: java compiler new round:::inputFiles->clear->todo->clear
JavacToolProvider#name()::: javac tool provider name:::return
JavacToolProvider#run(PrintWriter, PrintWriter, String...)::: javac tool provider run:::compiler->new->Main->return->compiler->compile
Main#reportDiag(DiagnosticInfo):::Report a usage error.:::if->msg->log->localize->throw->new->IllegalStateException->new->PropagatedException->reportHelper->log->printLines
Main#reportHelper(DiagnosticInfo):::Report helper.:::msg->log->localize->errorPrefix->log->localize->msg->startsWith->log->printRawLines
Main#compile(String[]):::Programmatic interface for main function.:::context->new->Context->JavacFileManager->preRegister->result->compile->try->if->fileManager->close->catch->bugMessage->finally->return
Main#compile(String[], Context):::Internal version of compile, allowing context to be provided:::if->context->put->if->context->put->Log->instance->if->h->new->OptionHelper.GrumpyHelper->try->process->catch->finally->return->try->CommandLine->parse->catch->Errors->UnmatchedQuote->reportDiag->return->Errors->e->getMessage->FileNotFound->reportHelper->return->log->printLines->ex->log->getWriter->printStackTrace->return->finally->args->Arguments->instance->args->init->if->return->options->Options->instance->forceStdOut->options->isSet->if->log->flush->log->new->PrintWriter->setWriters->batchMode->options->isUnset->System->getProperty->if->CacheFSInfo->preRegister->ok->context->get->undel->getBaseFileManager->if->setContext->args->getDeferredFileManagerOptions->handleOptions->showClass->options->get->if->if->showClass->equals->showClass->args->validate->if->return->if->args->isEmpty->return->if->options->isSet->preRegister->pluginOpts->args->getPluginOpts->if->pluginOpts->isEmpty->context->get->t->BasicJavacTask->instance->t->initPlugins->if->fileManager->isSupportedOption->target->Target->instance->list->List->target->multiReleaseValue->of->fileManager->list->iterator->handleOption->comp->JavaCompiler->instance->docLintOpts->args->getDocLintOpts->if->docLintOpts->isEmpty->t->BasicJavacTask->instance->t->initDocLint->if->options->get->log->getWriter->prepend->try->comp->args->getFileObjects->args->getClassNames->List->nil->compile->if->if->isEmpty->log->printRawLines->return->else->log->printRawLines->return->return->comp->errorCount->catch->resourceMessage->return->feMessage->return->apMessage->return->throw->ex->getCause->if->twoClassLoadersInUse->bugMessage->return->if->comp->errorCount->options->isSet->bugMessage->return->finally->if->try->comp->close->catch->throw->ex->getCause->new->RuntimeException->finally
Main#twoClassLoadersInUse(IllegalAccessError)::: main two class loaders in use:::msg->iae->getMessage->pattern->Pattern->compile->matcher->pattern->matcher->if->matcher->find->try->otherClassName->matcher->group->otherClass->Class->forName->otherClassLoader->otherClass->getClassLoader->javacClassLoader->this->getClass->getClassLoader->if->otherClassCodeSource->otherClass->getProtectionDomain->getCodeSource->javacCodeSource->this->getClass->getProtectionDomain->getCodeSource->if->log->Errors->otherClassCodeSource->getLocation->javacCodeSource->getLocation->TwoClassLoaders2->printLines->else->log->printLines->return->catch->return->finally->return
Main#bugMessage(Throwable):::Print a message reporting an internal error.:::log->JavaCompiler->version->printLines->ex->log->getWriter->printStackTrace
Main#feMessage(Throwable, Options):::Print a message reporting a fatal error.:::log->ex->getMessage->printRawLines->if->ex->getCause->options->isSet->ex->getCause->log->getWriter->printStackTrace
Main#ioMessage(Throwable):::Print a message reporting an input/output error.:::log->printLines->ex->log->getWriter->printStackTrace
Main#resourceMessage(Throwable):::Print a message reporting an out-of-resources error.:::log->printLines->ex->log->getWriter->printStackTrace
Main#apMessage(AnnotationProcessingError):::Print a message reporting an uncaught exception from an annotation processor.:::log->printLines->ex->getCause->log->getWriter->printStackTrace
Main#pluginMessage(Throwable):::Print a message reporting an uncaught exception from an annotation processor.:::log->printLines->ex->log->getWriter->printStackTrace
Main#showClass(String):::Display the location and checksum of a class.:::pw->log->getWriter->pw->println->url->getClass->className->replace->getResource->if->pw->println->try->in->getClass->className->replace->getResourceAsStream->algorithm->digest->md->MessageDigest->getInstance->try->din->new->DigestInputStream->buf->new->byteArr->n->do->din->read->while->md->digest->catch->finally->sb->new->StringBuilder->foreach->sb->String->format->append->pw->println->catch->pw->println->finally
OptionHelper#get(Option):::Get the current value of an option.:::
OptionHelper#put(String, String):::Set the value of an option.:::
OptionHelper#remove(String):::Remove any prior value for an option.:::
OptionHelper#handleFileManagerOption(Option, String):::Handle a file manager option.:::
OptionHelper#getLog():::Get access to the Log for the compilation.:::
OptionHelper#getOwnName():::Get the name of the tool, such as "javac", to be used in info like -help.:::
OptionHelper#newInvalidValueException(Error):::Returns a new InvalidValueException, with a localized detail message.:::return->getLog->localize->new->Option.InvalidValueException
OptionHelper#addFile(Path):::Record a file to be compiled.:::
OptionHelper#addClassName(String):::Record the name of a class for annotation processing.:::
OptionHelper.GrumpyHelper#getLog()::: grumpy helper get log:::return
OptionHelper.GrumpyHelper#getOwnName()::: grumpy helper get own name:::throw->new->IllegalStateException
OptionHelper.GrumpyHelper#get(Option)::: grumpy helper get:::throw->new->IllegalArgumentException
OptionHelper.GrumpyHelper#put(String, String)::: grumpy helper put:::throw->new->IllegalArgumentException
OptionHelper.GrumpyHelper#remove(String)::: grumpy helper remove:::throw->new->IllegalArgumentException
OptionHelper.GrumpyHelper#handleFileManagerOption(Option, String)::: grumpy helper handle file manager option:::throw->new->IllegalArgumentException
OptionHelper.GrumpyHelper#addFile(Path)::: grumpy helper add file:::throw->p->toString->new->IllegalArgumentException
OptionHelper.GrumpyHelper#addClassName(String)::: grumpy helper add class name:::throw->new->IllegalArgumentException

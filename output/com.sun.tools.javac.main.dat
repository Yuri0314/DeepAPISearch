com.sun.tools.javac.main.Arguments#instance(Context)->Arguments:::Gets the Arguments instance for this context.
com.sun.tools.javac.main.Arguments#init(String, String...)->void:::Initializes this Args instance with a set of command line args
com.sun.tools.javac.main.Arguments#init(String, Iterable, Iterable, Iterable)->void:::Initializes this Args instance with the parameters for a JavacTask
com.sun.tools.javac.main.Arguments#init(String)->void:::Minimal initialization for tools, like javadoc, to be able to process javac options for themselves, and then call validate.
com.sun.tools.javac.main.Arguments#getFileObjects()->Set:::Gets the files to be compiled.
com.sun.tools.javac.main.Arguments#getClassNames()->Set:::Gets the classes to be subject to annotation processing.
com.sun.tools.javac.main.Arguments#handleReleaseOptions(Predicate>)->boolean:::Handles the --release option.
com.sun.tools.javac.main.Arguments#validate()->boolean:::Validates the overall consistency of the options and operands processed by processOptions.
com.sun.tools.javac.main.Arguments#isEmpty()->boolean:::Returns true if there are no files or classes specified for use.
com.sun.tools.javac.main.Arguments#allowEmpty()->void::: arguments allow empty
com.sun.tools.javac.main.Arguments#getDeferredFileManagerOptions()->Map:::Gets the file manager options which may have been deferred during processArgs.
com.sun.tools.javac.main.Arguments#getPluginOpts()->Set>:::Gets any options specifying plugins to be run.
com.sun.tools.javac.main.Arguments#getDocLintOpts()->List:::Gets any options specifying how doclint should be run
com.sun.tools.javac.main.Arguments#checkOptionAllowed(boolean, ErrorReporter, Option...)->void::: arguments check option allowed
com.sun.tools.javac.main.Arguments#reportDiag(DiagnosticInfo)->void::: arguments report diag
com.sun.tools.javac.main.Arguments#error(Option.InvalidValueException)->void::: arguments error
com.sun.tools.javac.main.Arguments#toList(Iterable)->ListBuffer::: arguments to list
com.sun.tools.javac.main.Arguments#toSet(Iterable)->Set::: arguments to set
com.sun.tools.javac.main.CommandLine#parse(String[])->String[]:::Process Win32-style command files for the specified command line arguments and return the resulting arguments
com.sun.tools.javac.main.CommandLine#parse(String, List)->List:::Process the given environment variable and appends any Win32-style command files for the specified command line arguments and return the resulting arguments
com.sun.tools.javac.main.CommandLine#parse(String, String[])->String[]:::Process the given environment variable and appends any Win32-style command files for the specified command line arguments and return the resulting arguments
com.sun.tools.javac.main.CommandLine.Tokenizer#nextToken()->String::: tokenizer next token
com.sun.tools.javac.main.CommandLine.Tokenizer#skipWhite()->void::: tokenizer skip white
com.sun.tools.javac.main.DelegatingJavaFileManager#installReleaseFileManager(Context, JavaFileManager, JavaFileManager)->void::: delegating java file manager install release file manager
com.sun.tools.javac.main.DelegatingJavaFileManager#getClassLoader(Location)->ClassLoader::: delegating java file manager get class loader
com.sun.tools.javac.main.DelegatingJavaFileManager#list(Location, String, Set, boolean)->Iterable::: delegating java file manager list
com.sun.tools.javac.main.DelegatingJavaFileManager#inferBinaryName(Location, JavaFileObject)->String::: delegating java file manager infer binary name
com.sun.tools.javac.main.DelegatingJavaFileManager#isSameFile(FileObject, FileObject)->boolean::: delegating java file manager is same file
com.sun.tools.javac.main.DelegatingJavaFileManager#handleOption(String, Iterator)->boolean::: delegating java file manager handle option
com.sun.tools.javac.main.DelegatingJavaFileManager#hasLocation(Location)->boolean::: delegating java file manager has location
com.sun.tools.javac.main.DelegatingJavaFileManager#getJavaFileForInput(Location, String, Kind)->JavaFileObject::: delegating java file manager get java file for input
com.sun.tools.javac.main.DelegatingJavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)->JavaFileObject::: delegating java file manager get java file for output
com.sun.tools.javac.main.DelegatingJavaFileManager#getFileForInput(Location, String, String)->FileObject::: delegating java file manager get file for input
com.sun.tools.javac.main.DelegatingJavaFileManager#getFileForOutput(Location, String, String, FileObject)->FileObject::: delegating java file manager get file for output
com.sun.tools.javac.main.DelegatingJavaFileManager#flush()->void::: delegating java file manager flush
com.sun.tools.javac.main.DelegatingJavaFileManager#close()->void::: delegating java file manager close
com.sun.tools.javac.main.DelegatingJavaFileManager#getLocationForModule(Location, String)->Location::: delegating java file manager get location for module
com.sun.tools.javac.main.DelegatingJavaFileManager#getLocationForModule(Location, JavaFileObject)->Location::: delegating java file manager get location for module
com.sun.tools.javac.main.DelegatingJavaFileManager#getServiceLoader(Location, Class)->ServiceLoader::: delegating java file manager get service loader
com.sun.tools.javac.main.DelegatingJavaFileManager#inferModuleName(Location)->String::: delegating java file manager infer module name
com.sun.tools.javac.main.DelegatingJavaFileManager#listLocationsForModules(Location)->Iterable>::: delegating java file manager list locations for modules
com.sun.tools.javac.main.DelegatingJavaFileManager#contains(Location, FileObject)->boolean::: delegating java file manager contains
com.sun.tools.javac.main.DelegatingJavaFileManager#isSupportedOption(String)->int::: delegating java file manager is supported option
com.sun.tools.javac.main.DelegatingJavaFileManager#getBaseFileManager()->JavaFileManager::: delegating java file manager get base file manager
com.sun.tools.javac.main.JavaCompiler#instance(Context)->JavaCompiler:::Get the JavaCompiler instance for this context.
com.sun.tools.javac.main.JavaCompiler#version()->String:::The current version number as a string.
com.sun.tools.javac.main.JavaCompiler#fullVersion()->String:::The current full version number as a string.
com.sun.tools.javac.main.JavaCompiler#shouldStop(CompileState)->boolean::: java compiler should stop
com.sun.tools.javac.main.JavaCompiler#errorCount()->int:::The number of errors reported so far.
com.sun.tools.javac.main.JavaCompiler#stopIfError(CompileState, Queue)->Queue::: java compiler stop if error
com.sun.tools.javac.main.JavaCompiler#stopIfError(CompileState, List)->List::: java compiler stop if error
com.sun.tools.javac.main.JavaCompiler#warningCount()->int:::The number of warnings reported so far.
com.sun.tools.javac.main.JavaCompiler#readSource(JavaFileObject)->CharSequence:::Try to open input stream with given name
com.sun.tools.javac.main.JavaCompiler#parse(JavaFileObject, CharSequence)->JCCompilationUnit:::Parse contents of input stream.
com.sun.tools.javac.main.JavaCompiler#keepComments()->boolean::: java compiler keep comments
com.sun.tools.javac.main.JavaCompiler#parse(String)->JCTree.JCCompilationUnit:::Parse contents of file.
com.sun.tools.javac.main.JavaCompiler#parse(JavaFileObject)->JCTree.JCCompilationUnit:::Parse contents of file.
com.sun.tools.javac.main.JavaCompiler#resolveBinaryNameOrIdent(String)->Symbol:::Resolve an identifier which may be the binary name of a class or the Java name of a class or package.
com.sun.tools.javac.main.JavaCompiler#resolveBinaryNameOrIdent(ModuleSymbol, String)->Symbol:::Resolve an identifier which may be the binary name of a class or the Java name of a class or package.
com.sun.tools.javac.main.JavaCompiler#resolveIdent(ModuleSymbol, String)->Symbol:::Resolve an identifier.
com.sun.tools.javac.main.JavaCompiler#genCode(Env, JCClassDecl)->JavaFileObject:::Generate code and emit a class file for a given class
com.sun.tools.javac.main.JavaCompiler#printSource(Env, JCClassDecl)->JavaFileObject:::Emit plain Java source for a class.
com.sun.tools.javac.main.JavaCompiler#readSourceFile(JCCompilationUnit, ClassSymbol)->void:::Compile a ClassSymbol from source, optionally using the given compilation unit as  the source tree.
com.sun.tools.javac.main.JavaCompiler#compile(List)->void::: java compiler compile
com.sun.tools.javac.main.JavaCompiler#compile(Collection, Collection, Iterable, Collection)->void:::Main method: compile a list of files, return all compiled classes
com.sun.tools.javac.main.JavaCompiler#checkReusable()->void::: java compiler check reusable
com.sun.tools.javac.main.JavaCompiler#parseFiles(Iterable)->List:::Parses a list of files.
com.sun.tools.javac.main.JavaCompiler#enterTreesIfNeeded(List)->List:::Enter the symbols found in a list of parse trees if the compilation is expected to proceed beyond anno processing into attr
com.sun.tools.javac.main.JavaCompiler#initModules(List)->List::: java compiler init modules
com.sun.tools.javac.main.JavaCompiler#enterTrees(List)->List:::Enter the symbols found in a list of parse trees
com.sun.tools.javac.main.JavaCompiler#initProcessAnnotations(Iterable, Collection, Collection)->void:::Check if we should process annotations
com.sun.tools.javac.main.JavaCompiler#processAnnotations(List)->void::: java compiler process annotations
com.sun.tools.javac.main.JavaCompiler#processAnnotations(List, Collection)->void::: java compiler process annotations
com.sun.tools.javac.main.JavaCompiler#explicitAnnotationProcessingRequested()->boolean::: java compiler explicit annotation processing requested
com.sun.tools.javac.main.JavaCompiler#explicitAnnotationProcessingRequested(Options)->boolean::: java compiler explicit annotation processing requested
com.sun.tools.javac.main.JavaCompiler#setDeferredDiagnosticHandler(Log.DeferredDiagnosticHandler)->void::: java compiler set deferred diagnostic handler
com.sun.tools.javac.main.JavaCompiler#attribute(Queue>)->Queue>:::Attribute a list of parse trees, such as found on the "todo" list
com.sun.tools.javac.main.JavaCompiler#attribute(Env)->Env:::Attribute a parse tree.
com.sun.tools.javac.main.JavaCompiler#flow(Queue>)->Queue>:::Perform dataflow checks on attributed parse trees
com.sun.tools.javac.main.JavaCompiler#flow(Env)->Queue>:::Perform dataflow checks on an attributed parse tree.
com.sun.tools.javac.main.JavaCompiler#flow(Env, Queue>)->void:::Perform dataflow checks on an attributed parse tree.
com.sun.tools.javac.main.JavaCompiler#desugar(Queue>)->Queue, JCClassDecl>>:::Prepare attributed parse trees, in conjunction with their attribution contexts, for source or code generation
com.sun.tools.javac.main.JavaCompiler#desugar(Env, Queue, JCClassDecl>>)->void:::Prepare attributed parse trees, in conjunction with their attribution contexts, for source or code generation
com.sun.tools.javac.main.JavaCompiler#generate(Queue, JCClassDecl>>)->void:::Generates the source or class file for a list of classes
com.sun.tools.javac.main.JavaCompiler#generate(Queue, JCClassDecl>>, Queue)->void::: java compiler generate
com.sun.tools.javac.main.JavaCompiler#groupByFile(Queue>)->Map>>::: java compiler group by file
com.sun.tools.javac.main.JavaCompiler#removeMethodBodies(JCClassDecl)->JCClassDecl::: java compiler remove method bodies
com.sun.tools.javac.main.JavaCompiler#reportDeferredDiagnostics()->void::: java compiler report deferred diagnostics
com.sun.tools.javac.main.JavaCompiler#enterDone()->void::: java compiler enter done
com.sun.tools.javac.main.JavaCompiler#isEnterDone()->boolean::: java compiler is enter done
com.sun.tools.javac.main.JavaCompiler#close()->void:::Close the compiler, flushing the logs
com.sun.tools.javac.main.JavaCompiler#printNote(String)->void::: java compiler print note
com.sun.tools.javac.main.JavaCompiler#printCount(String, int)->void:::Print numbers of errors and warnings.
com.sun.tools.javac.main.JavaCompiler#newRound()->void::: java compiler new round
com.sun.tools.javac.main.JavacToolProvider#name()->String::: javac tool provider name
com.sun.tools.javac.main.JavacToolProvider#run(PrintWriter, PrintWriter, String...)->int::: javac tool provider run
com.sun.tools.javac.main.Main#reportDiag(DiagnosticInfo)->void:::Report a usage error.
com.sun.tools.javac.main.Main#reportHelper(DiagnosticInfo)->void:::Report helper.
com.sun.tools.javac.main.Main#compile(String[])->Result:::Programmatic interface for main function.
com.sun.tools.javac.main.Main#compile(String[], Context)->Result:::Internal version of compile, allowing context to be provided
com.sun.tools.javac.main.Main#bugMessage(Throwable)->void:::Print a message reporting an internal error.
com.sun.tools.javac.main.Main#feMessage(Throwable, Options)->void:::Print a message reporting a fatal error.
com.sun.tools.javac.main.Main#ioMessage(Throwable)->void:::Print a message reporting an input/output error.
com.sun.tools.javac.main.Main#resourceMessage(Throwable)->void:::Print a message reporting an out-of-resources error.
com.sun.tools.javac.main.Main#apMessage(AnnotationProcessingError)->void:::Print a message reporting an uncaught exception from an annotation processor.
com.sun.tools.javac.main.Main#pluginMessage(Throwable)->void:::Print a message reporting an uncaught exception from an annotation processor.
com.sun.tools.javac.main.Main#showClass(String)->void:::Display the location and checksum of a class.
com.sun.tools.javac.main.OptionHelper#get(Option)->String:::Get the current value of an option.
com.sun.tools.javac.main.OptionHelper#put(String, String)->void:::Set the value of an option.
com.sun.tools.javac.main.OptionHelper#remove(String)->void:::Remove any prior value for an option.
com.sun.tools.javac.main.OptionHelper#handleFileManagerOption(Option, String)->boolean:::Handle a file manager option.
com.sun.tools.javac.main.OptionHelper#getLog()->Log:::Get access to the Log for the compilation.
com.sun.tools.javac.main.OptionHelper#getOwnName()->String:::Get the name of the tool, such as "javac", to be used in info like -help.
com.sun.tools.javac.main.OptionHelper#newInvalidValueException(Error)->Option.InvalidValueException:::Returns a new InvalidValueException, with a localized detail message.
com.sun.tools.javac.main.OptionHelper#addFile(Path)->void:::Record a file to be compiled.
com.sun.tools.javac.main.OptionHelper#addClassName(String)->void:::Record the name of a class for annotation processing.
com.sun.tools.javac.main.OptionHelper.GrumpyHelper#getLog()->Log::: grumpy helper get log
com.sun.tools.javac.main.OptionHelper.GrumpyHelper#getOwnName()->String::: grumpy helper get own name
com.sun.tools.javac.main.OptionHelper.GrumpyHelper#get(Option)->String::: grumpy helper get
com.sun.tools.javac.main.OptionHelper.GrumpyHelper#put(String, String)->void::: grumpy helper put
com.sun.tools.javac.main.OptionHelper.GrumpyHelper#remove(String)->void::: grumpy helper remove
com.sun.tools.javac.main.OptionHelper.GrumpyHelper#handleFileManagerOption(Option, String)->boolean::: grumpy helper handle file manager option
com.sun.tools.javac.main.OptionHelper.GrumpyHelper#addFile(Path)->void::: grumpy helper add file
com.sun.tools.javac.main.OptionHelper.GrumpyHelper#addClassName(String)->void::: grumpy helper add class name

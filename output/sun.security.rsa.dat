MGF1#generateAndXor(byte[], int, int, int, byte[], int):::Using the specified seed bytes, generate the mask, xor the mask with the specified output buffer and store the result into the output buffer (essentially replaced in place).:::C->new->byteArr->digest->md->getDigestLength->new->byteArr->while->md->update->md->update->try->md->digest->catch->throw->e->toString->new->RuntimeException->finally->for->i->if->for->i
MGF1#getName():::Returns the name of this MGF1 instance, i.e:::return->md->getAlgorithm
PSSParameters#engineInit(AlgorithmParameterSpec)::: parameters engine init:::if->throw->new->InvalidParameterSpecException->spec->spec->getDigestAlgorithm->mgfName->spec->getMGFAlgorithm->if->mgfName->equalsIgnoreCase->throw->new->InvalidParameterSpecException->mgfSpec->spec->getMGFParameters->if->throw->new->InvalidParameterSpecException->spec->getSaltLength->spec->getTrailerField
PSSParameters#engineInit(byte[])::: parameters engine init:::DEFAULT->getDigestAlgorithm->DEFAULT->getMGFParameters->DEFAULT->getSaltLength->DEFAULT->getTrailerField->der->new->DerInputStream->datum->der->getSequence->foreach->if->d->isContextSpecific->AlgorithmId->getDerValue->parse->getName->else->if->d->isContextSpecific->val->AlgorithmId->getDerValue->parse->if->val->getOID->equals->throw->new->IOException->params->AlgorithmId->val->getEncodedParams->new->DerValue->parse->mgfDigestName->params->getName->switch->break->break->break->break->break->break->break->throw->new->IOException->else->if->d->isContextSpecific->getDerValue->getInteger->if->throw->new->IOException->else->if->d->isContextSpecific->getDerValue->getInteger->if->throw->new->IOException->else->throw->new->IOException
PSSParameters#engineInit(byte[], String)::: parameters engine init:::if->decodingMethod->equalsIgnoreCase->throw->new->IllegalArgumentException->engineInit
PSSParameters#engineGetParameterSpec(Class)::: parameters engine get parameter spec:::if->isAssignableFrom->return->paramSpec->new->PSSParameterSpec->cast->else->throw->new->InvalidParameterSpecException
PSSParameters#engineGetEncoded()::: parameters engine get encoded:::tmp->new->DerOutputStream->tmp2->tmp3->mdAlgId->try->AlgorithmId->get->catch->throw->new->IOException->finally->new->DerOutputStream->mdAlgId->derEncode->tmp->DerValue->createTag->write->new->DerOutputStream->tmp2->putOID->mgfDigestId->try->AlgorithmId->mgfSpec->getDigestAlgorithm->get->catch->throw->mgfSpec->getDigestAlgorithm->new->IOException->finally->mgfDigestId->encode->new->DerOutputStream->tmp3->write->tmp->DerValue->createTag->write->new->DerOutputStream->tmp2->putInteger->tmp->DerValue->createTag->write->new->DerOutputStream->tmp2->putInteger->tmp->DerValue->createTag->write->out->new->DerOutputStream->out->write->return->out->toByteArray
PSSParameters#engineGetEncoded(String)::: parameters engine get encoded:::if->encMethod->equalsIgnoreCase->throw->new->IllegalArgumentException->return->engineGetEncoded
PSSParameters#engineToString()::: parameters engine to string:::sb->new->StringBuilder->sb->append->mgfSpec->getDigestAlgorithm->append->append->append->return->sb->toString
RSACore#getByteLength(BigInteger):::Return the number of bytes required to store the magnitude byte[] of this BigInteger:::n->b->bitLength->return
RSACore#getByteLength(RSAKey):::Return the number of bytes required to store the modulus of this RSA key.:::return->key->getModulus->getByteLength
RSACore#convert(byte[], int, int)::: core convert:::if->return->else->t->new->byteArr->System->arraycopy->return
RSACore#rsa(byte[], RSAPublicKey):::Perform an RSA public key operation.:::return->key->getModulus->key->getPublicExponent->crypt
RSACore#rsa(byte[], RSAPrivateKey):::Perform an RSA private key operation:::return->rsa
RSACore#rsa(byte[], RSAPrivateKey, boolean):::Perform an RSA private key operation:::if->return->crtCrypt->else->return->key->getModulus->key->getPrivateExponent->priCrypt
RSACore#crypt(byte[], BigInteger, BigInteger):::RSA public key ops:::m->parseMsg->c->m->modPow->return->getByteLength->toByteArray
RSACore#priCrypt(byte[], BigInteger, BigInteger):::RSA non-CRT private key operations.:::c->parseMsg->brp->m->if->getBlindingRandomPair->c->multiply->mod->c->modPow->m->multiply->mod->else->c->modPow->return->getByteLength->toByteArray
RSACore#crtCrypt(byte[], RSAPrivateCrtKey, boolean):::RSA private key operations with CRT:::n->key->getModulus->c0->parseMsg->c->p->key->getPrimeP->q->key->getPrimeQ->dP->key->getPrimeExponentP->dQ->key->getPrimeExponentQ->qInv->key->getCrtCoefficient->e->key->getPublicExponent->d->key->getPrivateExponent->brp->if->getBlindingRandomPair->c->multiply->mod->m1->c->modPow->m2->c->modPow->mtmp->m1->subtract->if->mtmp->signum->mtmp->add->h->mtmp->multiply->mod->m->h->multiply->add->if->m->multiply->mod->if->c0->m->modPow->equals->throw->new->BadPaddingException->return->getByteLength->toByteArray
RSACore#parseMsg(byte[], BigInteger):::Parse the msg into a BigInteger and check against the modulus n.:::m->new->BigInteger->if->m->compareTo->throw->new->BadPaddingException->return
RSACore#toByteArray(BigInteger, int):::Return the encoding of this BigInteger that is exactly len bytes long:::b->bi->toByteArray->n->if->return->if->t->new->byteArr->System->arraycopy->return->t->new->byteArr->System->arraycopy->return
RSACore.BlindingParameters#getBlindingRandomPair(BigInteger, BigInteger, BigInteger)::: blinding parameters get blinding random pair:::if->equals->equals->brp->synchronized->if->u->equals->v->equals->new->BlindingRandomPair->if->u->compareTo->v->compareTo->else->u->modPow->v->modPow->return->return
RSACore#getBlindingRandomPair(BigInteger, BigInteger, BigInteger)::: core get blinding random pair:::bps->synchronized->blindingCache->get->if->new->BlindingParameters->synchronized->blindingCache->putIfAbsent->brp->bps->getBlindingRandomPair->if->new->BlindingParameters->synchronized->blindingCache->replace->bps->getBlindingRandomPair->return
RSAKeyFactory#getInstance(KeyType)::: key factory get instance:::return->new->RSAKeyFactory
RSAKeyFactory#checkKeyAlgo(Key, String)::: key factory check key algo:::keyAlg->key->getAlgorithm->if->keyAlg->equalsIgnoreCase->throw->new->InvalidKeyException
RSAKeyFactory#toRSAKey(Key):::Static method to convert Key into an instance of RSAPublicKeyImpl or RSAPrivate(Crt)KeyImpl:::if->throw->new->InvalidKeyException->if->return->else->try->type->KeyType->key->getAlgorithm->lookup->kf->RSAKeyFactory->getInstance->return->kf->engineTranslateKey->catch->throw->new->InvalidKeyException->finally
RSAKeyFactory#checkRSAProviderKeyLengths(int, BigInteger)::: key factory check provider key lengths:::checkKeyLengths
RSAKeyFactory#checkKeyLengths(int, BigInteger, int, int):::Check the length of an RSA key modulus/exponent to make sure it is not too short or long:::if->throw->new->InvalidKeyException->maxLen->Math->min->if->throw->new->InvalidKeyException->if->exponent->bitLength->throw->new->InvalidKeyException
RSAKeyFactory#engineTranslateKey(Key):::Translate an RSA key into a SunRsaSign RSA key:::if->throw->new->InvalidKeyException->type->keyAlgo->checkKeyAlgo->if->return->if->return->translatePublicKey->else->if->return->translatePrivateKey->else->throw->new->InvalidKeyException
RSAKeyFactory#engineGeneratePublic(KeySpec)::: key factory engine generate public:::try->return->generatePublic->catch->throw->throw->new->InvalidKeySpecException->finally
RSAKeyFactory#engineGeneratePrivate(KeySpec)::: key factory engine generate private:::try->return->generatePrivate->catch->throw->throw->new->InvalidKeySpecException->finally
RSAKeyFactory#translatePublicKey(PublicKey)::: key factory translate public key:::if->rsaKey->try->return->RSAUtil->rsaKey->getParams->createAlgorithmId->rsaKey->getModulus->rsaKey->getPublicExponent->new->RSAPublicKeyImpl->catch->throw->new->InvalidKeyException->finally->else->if->key->getFormat->equals->translated->key->getEncoded->new->RSAPublicKeyImpl->type->keyAlgo->checkKeyAlgo->return->else->throw->new->InvalidKeyException
RSAKeyFactory#translatePrivateKey(PrivateKey)::: key factory translate private key:::if->rsaKey->try->return->RSAUtil->rsaKey->getParams->createAlgorithmId->rsaKey->getModulus->rsaKey->getPublicExponent->rsaKey->getPrivateExponent->rsaKey->getPrimeP->rsaKey->getPrimeQ->rsaKey->getPrimeExponentP->rsaKey->getPrimeExponentQ->rsaKey->getCrtCoefficient->new->RSAPrivateCrtKeyImpl->catch->throw->new->InvalidKeyException->finally->else->if->rsaKey->try->return->RSAUtil->rsaKey->getParams->createAlgorithmId->rsaKey->getModulus->rsaKey->getPrivateExponent->new->RSAPrivateKeyImpl->catch->throw->new->InvalidKeyException->finally->else->if->key->getFormat->equals->translated->RSAPrivateCrtKeyImpl->key->getEncoded->newKey->type->keyAlgo->checkKeyAlgo->return->else->throw->new->InvalidKeyException
RSAKeyFactory#generatePublic(KeySpec)::: key factory generate public:::if->x509Spec->generated->x509Spec->getEncoded->new->RSAPublicKeyImpl->type->keyAlgo->checkKeyAlgo->return->else->if->rsaSpec->try->return->RSAUtil->rsaSpec->getParams->createAlgorithmId->rsaSpec->getModulus->rsaSpec->getPublicExponent->new->RSAPublicKeyImpl->catch->throw->new->InvalidKeySpecException->finally->else->throw->new->InvalidKeySpecException
RSAKeyFactory#generatePrivate(KeySpec)::: key factory generate private:::if->pkcsSpec->generated->RSAPrivateCrtKeyImpl->pkcsSpec->getEncoded->newKey->type->keyAlgo->checkKeyAlgo->return->else->if->rsaSpec->try->return->RSAUtil->rsaSpec->getParams->createAlgorithmId->rsaSpec->getModulus->rsaSpec->getPublicExponent->rsaSpec->getPrivateExponent->rsaSpec->getPrimeP->rsaSpec->getPrimeQ->rsaSpec->getPrimeExponentP->rsaSpec->getPrimeExponentQ->rsaSpec->getCrtCoefficient->new->RSAPrivateCrtKeyImpl->catch->throw->new->InvalidKeySpecException->finally->else->if->rsaSpec->try->return->RSAUtil->rsaSpec->getParams->createAlgorithmId->rsaSpec->getModulus->rsaSpec->getPrivateExponent->new->RSAPrivateKeyImpl->catch->throw->new->InvalidKeySpecException->finally->else->throw->new->InvalidKeySpecException
RSAKeyFactory#engineGetKeySpec(Key, Class)::: key factory engine get key spec:::try->engineTranslateKey->catch->throw->new->InvalidKeySpecException->finally->if->rsaKey->if->RSA_PUB_KEYSPEC_CLS->isAssignableFrom->return->keySpec->rsaKey->getModulus->rsaKey->getPublicExponent->rsaKey->getParams->new->RSAPublicKeySpec->cast->else->if->X509_KEYSPEC_CLS->isAssignableFrom->return->keySpec->key->getEncoded->new->X509EncodedKeySpec->cast->else->throw->new->InvalidKeySpecException->else->if->if->PKCS8_KEYSPEC_CLS->isAssignableFrom->return->keySpec->key->getEncoded->new->PKCS8EncodedKeySpec->cast->else->if->RSA_PRIVCRT_KEYSPEC_CLS->isAssignableFrom->if->crtKey->return->keySpec->crtKey->getModulus->crtKey->getPublicExponent->crtKey->getPrivateExponent->crtKey->getPrimeP->crtKey->getPrimeQ->crtKey->getPrimeExponentP->crtKey->getPrimeExponentQ->crtKey->getCrtCoefficient->crtKey->getParams->new->RSAPrivateCrtKeySpec->cast->else->throw->new->InvalidKeySpecException->else->if->RSA_PRIV_KEYSPEC_CLS->isAssignableFrom->rsaKey->return->keySpec->rsaKey->getModulus->rsaKey->getPrivateExponent->rsaKey->getParams->new->RSAPrivateKeySpec->cast->else->throw->new->InvalidKeySpecException->else->throw->new->InvalidKeySpecException
RSAKeyPairGenerator#initialize(int, SecureRandom)::: key pair generator initialize:::try->new->RSAKeyGenParameterSpec->initialize->catch->throw->iape->getMessage->new->InvalidParameterException->finally
RSAKeyPairGenerator#initialize(AlgorithmParameterSpec, SecureRandom)::: key pair generator initialize:::if->throw->new->InvalidAlgorithmParameterException->rsaSpec->tmpKeySize->rsaSpec->getKeysize->tmpPublicExponent->rsaSpec->getPublicExponent->tmpParams->rsaSpec->getKeyParams->if->else->if->tmpPublicExponent->compareTo->throw->new->InvalidAlgorithmParameterException->if->tmpPublicExponent->bitLength->throw->new->InvalidAlgorithmParameterException->try->RSAKeyFactory->checkKeyLengths->catch->throw->new->InvalidAlgorithmParameterException->finally->try->RSAUtil->createAlgorithmId->catch->throw->new->InvalidAlgorithmParameterException->finally
RSAKeyPairGenerator#generateKeyPair()::: key pair generator generate key pair:::lp->lq->if->JCAUtil->getSecureRandom->e->while->p->BigInteger->probablePrime->q->n->do->BigInteger->probablePrime->if->p->compareTo->tmp->p->multiply->while->n->bitLength->p1->p->subtract->q1->q->subtract->phi->p1->multiply->if->e->gcd->equals->continue->d->e->modInverse->pe->d->mod->qe->d->mod->coeff->q->modInverse->try->publicKey->new->RSAPublicKeyImpl->privateKey->new->RSAPrivateCrtKeyImpl->return->new->KeyPair->catch->throw->new->RuntimeException->finally
RSAPadding#getInstance(int, int):::Get a RSAPadding instance of the specified type:::return->new->RSAPadding
RSAPadding#getInstance(int, int, SecureRandom):::Get a RSAPadding instance of the specified type:::return->new->RSAPadding
RSAPadding#getInstance(int, int, SecureRandom, OAEPParameterSpec):::Get a RSAPadding instance of the specified type, which must be OAEP:::return->new->RSAPadding
RSAPadding#getInitialHash(MessageDigest, byte[]):::Return the value of the digest using the specified message digest md and the digest input digestInput:::result->if->digestName->md->getAlgorithm->emptyHashes->get->if->md->digest->emptyHashes->put->else->md->digest->return
RSAPadding#getMaxDataSize():::Return the maximum size of the plaintext data that can be processed using this object.:::return
RSAPadding#pad(byte[], int, int):::Pad the data and return the padded block.:::return->RSACore->convert->pad
RSAPadding#pad(byte[]):::Pad the data and return the padded block.:::if->throw->new->BadPaddingException->switch->return->return->padV15->return->padOAEP->throw->new->AssertionError
RSAPadding#unpad(byte[], int, int):::Unpad the padded block and return the data.:::return->RSACore->convert->unpad
RSAPadding#unpad(byte[]):::Unpad the padded block and return the data.:::if->throw->new->BadPaddingException->switch->return->return->unpadV15->return->unpadOAEP->throw->new->AssertionError
RSAPadding#padV15(byte[]):::PKCS#1 v1.5 padding (blocktype 1 and 2).:::padded->new->byteArr->System->arraycopy->psSize->k->if->while->else->if->JCAUtil->getSecureRandom->while->r->new->byteArr->random->nextBytes->for->i->return
RSAPadding#unpadV15(byte[]):::PKCS#1 v1.5 unpadding (blocktype 1 (signature) and 2 (encryption)):::k->bp->if->if->p->while->b->if->if->if->n->if->padding->new->byteArr->System->arraycopy->data->new->byteArr->System->arraycopy->bpe->new->BadPaddingException->if->throw->else->return
RSAPadding#padOAEP(byte[]):::PKCS#1 v2.0 OAEP padding (MGF1):::if->JCAUtil->getSecureRandom->hLen->seed->new->byteArr->random->nextBytes->EM->new->byteArr->seedStart->seedLen->System->arraycopy->dbStart->dbLen->mStart->System->arraycopy->System->arraycopy->mgf->generateAndXor->mgf->generateAndXor->return
RSAPadding#unpadOAEP(byte[]):::PKCS#1 v2.1 OAEP unpadding (MGF1).:::EM->bp->hLen->if->seedStart->seedLen->dbStart->dbLen->mgf->generateAndXor->mgf->generateAndXor->for->i->padStart->onePos->for->i->if->mStart->tmp->new->byteArr->System->arraycopy->m->new->byteArr->System->arraycopy->bpe->new->BadPaddingException->if->throw->else->return
RSAPrivateCrtKeyImpl#newKey(byte[]):::Generate a new key from its encoding:::key->new->RSAPrivateCrtKeyImpl->if->key->getPublicExponent->signum->key->getPrimeExponentP->signum->key->getPrimeExponentQ->signum->key->getPrimeP->signum->key->getPrimeQ->signum->key->getCrtCoefficient->signum->return->key->getModulus->key->getPrivateExponent->new->RSAPrivateKeyImpl->else->return
RSAPrivateCrtKeyImpl#newKey(KeyType, AlgorithmParameterSpec, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger):::Generate a new key from the specified type and components:::key->rsaId->RSAUtil->createAlgorithmId->if->e->signum->p->signum->q->signum->pe->signum->qe->signum->coeff->signum->return->new->RSAPrivateKeyImpl->else->return->new->RSAPrivateCrtKeyImpl
RSAPrivateCrtKeyImpl#getAlgorithm()::: private crt key impl get algorithm:::return->algid->getName
RSAPrivateCrtKeyImpl#getModulus()::: private crt key impl get modulus:::return
RSAPrivateCrtKeyImpl#getPublicExponent()::: private crt key impl get public exponent:::return
RSAPrivateCrtKeyImpl#getPrivateExponent()::: private crt key impl get private exponent:::return
RSAPrivateCrtKeyImpl#getPrimeP()::: private crt key impl get prime p:::return
RSAPrivateCrtKeyImpl#getPrimeQ()::: private crt key impl get prime q:::return
RSAPrivateCrtKeyImpl#getPrimeExponentP()::: private crt key impl get prime exponent p:::return
RSAPrivateCrtKeyImpl#getPrimeExponentQ()::: private crt key impl get prime exponent q:::return
RSAPrivateCrtKeyImpl#getCrtCoefficient()::: private crt key impl get crt coefficient:::return
RSAPrivateCrtKeyImpl#getParams()::: private crt key impl get params:::return
RSAPrivateCrtKeyImpl#toString()::: private crt key impl to string:::return->getAlgorithm->n->bitLength
RSAPrivateCrtKeyImpl#parseKeyBits():::Parse the key:::try->in->new->DerInputStream->derValue->in->getDerValue->if->throw->new->IOException->data->version->data->getInteger->if->throw->new->IOException->data->getPositiveBigInteger->data->getPositiveBigInteger->data->getPositiveBigInteger->data->getPositiveBigInteger->data->getPositiveBigInteger->data->getPositiveBigInteger->data->getPositiveBigInteger->data->getPositiveBigInteger->if->available->throw->new->IOException->catch->throw->new->InvalidKeyException->finally
RSAPrivateKeyImpl#getAlgorithm()::: private key impl get algorithm:::return->algid->getName
RSAPrivateKeyImpl#getModulus()::: private key impl get modulus:::return
RSAPrivateKeyImpl#getPrivateExponent()::: private key impl get private exponent:::return
RSAPrivateKeyImpl#getParams()::: private key impl get params:::return
RSAPrivateKeyImpl#toString()::: private key impl to string:::return->getAlgorithm->n->bitLength
RSAPSSSignature#isDigestEqual(String, String)::: signature is digest equal:::if->return->if->givenAlg->indexOf->return->stdAlg->equalsIgnoreCase->else->if->stdAlg->equals->return->givenAlg->equalsIgnoreCase->givenAlg->equalsIgnoreCase->else->sb->new->StringBuilder->if->givenAlg->regionMatches->sb->insert->toString->return->stdAlg->equalsIgnoreCase->else->throw->new->ProviderException
RSAPSSSignature#engineInitVerify(PublicKey)::: signature engine init verify:::if->throw->new->InvalidKeyException->isValid->resetDigest
RSAPSSSignature#engineInitSign(PrivateKey)::: signature engine init sign:::engineInitSign
RSAPSSSignature#engineInitSign(PrivateKey, SecureRandom)::: signature engine init sign:::if->throw->new->InvalidKeyException->isValid->JCAUtil->getSecureRandom->resetDigest
RSAPSSSignature#isCompatible(AlgorithmParameterSpec, PSSParameterSpec):::Utility method for checking the key PSS parameters against signature PSS parameters:::if->return->if->return->if->return->pssKeyParams->if->pssKeyParams->getSaltLength->sigParams->getSaltLength->return->keyParams2->pssKeyParams->getDigestAlgorithm->pssKeyParams->getMGFAlgorithm->pssKeyParams->getMGFParameters->sigParams->getSaltLength->pssKeyParams->getTrailerField->new->PSSParameterSpec->ap->new->PSSParameters->try->ap->engineInit->encoded->ap->engineGetEncoded->ap->engineInit->encoded2->ap->engineGetEncoded->return->Arrays->equals->catch->if->e->printStackTrace->return->finally
RSAPSSSignature#isValid(RSAKey):::Validate the specified RSAKey and its associated parameters against internal signature parameters.:::try->keyParams->rsaKey->getParams->if->rsaKey->getParams->isCompatible->throw->new->InvalidKeyException->if->hLen->DIGEST_LENGTHS->getDigestAlgorithm->get->if->throw->getDigestAlgorithm->new->ProviderException->getSaltLength->checkKeyLength->return->catch->throw->new->InvalidKeyException->finally
RSAPSSSignature#validateSigParams(AlgorithmParameterSpec):::Validate the specified Signature PSS parameters.:::if->throw->new->InvalidAlgorithmParameterException->if->throw->new->InvalidAlgorithmParameterException->params->if->return->key->if->if->key->getParams->isCompatible->throw->new->InvalidAlgorithmParameterException->if->params->getMGFAlgorithm->equalsIgnoreCase->throw->new->InvalidAlgorithmParameterException->if->params->getTrailerField->throw->new->InvalidAlgorithmParameterException->digestAlgo->params->getDigestAlgorithm->if->try->hLen->DIGEST_LENGTHS->get->params->getSaltLength->checkKeyLength->catch->throw->new->InvalidAlgorithmParameterException->finally->return
RSAPSSSignature#ensureInit():::Ensure the object is initialized with key and parameters and reset digest:::key->if->throw->new->SignatureException->if->throw->new->SignatureException
RSAPSSSignature#checkKeyLength(RSAKey, int, int):::Utility method for checking key length against digest length and salt length:::if->keyLength->getKeyLengthInBits->minLength->Math->Math->addExact->addExact->if->throw->new->SignatureException
RSAPSSSignature#resetDigest():::Reset the message digest if it is not already reset.:::if->reset
RSAPSSSignature#getDigestValue():::Return the message digest value.:::return->digest
RSAPSSSignature#engineUpdate(byte)::: signature engine update:::ensureInit->update
RSAPSSSignature#engineUpdate(byte[], int, int)::: signature engine update:::ensureInit->update
RSAPSSSignature#engineUpdate(ByteBuffer)::: signature engine update:::try->ensureInit->catch->throw->se->getMessage->new->RuntimeException->finally->update
RSAPSSSignature#engineSign()::: signature engine sign:::ensureInit->mHash->getDigestValue->try->encoded->encodeSignature->encrypted->RSACore->rsa->return->catch->throw->new->SignatureException->throw->new->SignatureException->finally
RSAPSSSignature#engineVerify(byte[])::: signature engine verify:::ensureInit->try->if->RSACore->getByteLength->throw->RSACore->getByteLength->new->SignatureException->mHash->getDigestValue->decrypted->RSACore->rsa->return->decodeSignature->catch->return->throw->new->SignatureException->finally->resetDigest
RSAPSSSignature#getKeyLengthInBits(RSAKey)::: signature get key length in bits:::if->return->k->getModulus->bitLength->return
RSAPSSSignature#encodeSignature(byte[]):::Encode the digest 'mHash', return the to-be-signed data:::mgfParams->getMGFParameters->mgfDigestAlgo->if->getDigestAlgorithm->else->getAlgorithm->try->emBits->getKeyLengthInBits->emLen->hLen->getDigestLength->dbLen->sLen->getSaltLength->em->new->byteArr->if->throw->new->ProviderException->update->update->if->salt->new->byteArr->nextBytes->update->System->arraycopy->digest->mgf1->new->MGF1->mgf1->generateAndXor->numZeroBits->if->MASK->return->catch->throw->e->toString->new->IOException->finally
RSAPSSSignature#decodeSignature(byte[], byte[]):::Decode the signature data:::hLen->sLen->getSaltLength->emLen->emBits->getKeyLengthInBits->if->return->if->return->numZeroBits->if->MASK->if->return->mgfDigestAlgo->mgfParams->getMGFParameters->if->getDigestAlgorithm->else->getAlgorithm->dbLen->try->mgf1->new->MGF1->mgf1->generateAndXor->catch->throw->nsae->toString->new->IOException->finally->if->MASK->i->for->if->return->update->update->if->update->digest2->digest->digestInEM->Arrays->copyOfRange->return->MessageDigest->isEqual
RSAPSSSignature#engineSetParameter(String, Object)::: signature engine set parameter:::throw->new->UnsupportedOperationException
RSAPSSSignature#engineSetParameter(AlgorithmParameterSpec)::: signature engine set parameter:::validateSigParams->if->throw->new->ProviderException->newHashAlg->getDigestAlgorithm->if->getAlgorithm->equalsIgnoreCase->try->MessageDigest->getInstance->catch->throw->new->InvalidAlgorithmParameterException->finally
RSAPSSSignature#engineGetParameter(String)::: signature engine get parameter:::throw->new->UnsupportedOperationException
RSAPSSSignature#engineGetParameters()::: signature engine get parameters:::ap->if->try->AlgorithmParameters->getInstance->ap->init->catch->throw->gse->getMessage->new->ProviderException->finally->return
RSAPublicKeyImpl#newKey(byte[]):::Generate a new RSAPublicKey from the specified encoding:::return->new->RSAPublicKeyImpl
RSAPublicKeyImpl#newKey(KeyType, AlgorithmParameterSpec, BigInteger, BigInteger):::Generate a new RSAPublicKey from the specified type and components:::rsaId->RSAUtil->createAlgorithmId->return->new->RSAPublicKeyImpl
RSAPublicKeyImpl#checkExponentRange(BigInteger, BigInteger)::: public key impl check exponent range:::if->exp->compareTo->throw->new->InvalidKeyException->if->exp->compareTo->throw->new->InvalidKeyException
RSAPublicKeyImpl#getAlgorithm()::: public key impl get algorithm:::return->algid->getName
RSAPublicKeyImpl#getModulus()::: public key impl get modulus:::return
RSAPublicKeyImpl#getPublicExponent()::: public key impl get public exponent:::return
RSAPublicKeyImpl#getParams()::: public key impl get params:::return
RSAPublicKeyImpl#parseKeyBits():::Parse the key:::try->in->getKey->toByteArray->new->DerInputStream->derValue->in->getDerValue->if->throw->new->IOException->data->data->getPositiveBigInteger->data->getPositiveBigInteger->if->available->throw->new->IOException->catch->throw->new->InvalidKeyException->finally
RSAPublicKeyImpl#toString()::: public key impl to string:::return->getAlgorithm->n->bitLength
RSAPublicKeyImpl#writeReplace()::: public key impl write replace:::return->getAlgorithm->getFormat->getEncoded->new->KeyRep
RSASignature#engineInitVerify(PublicKey)::: signature engine init verify:::rsaKey->RSAKeyFactory->toRSAKey->initCommon
RSASignature#engineInitSign(PrivateKey)::: signature engine init sign:::engineInitSign
RSASignature#engineInitSign(PrivateKey, SecureRandom)::: signature engine init sign:::rsaKey->RSAKeyFactory->toRSAKey->initCommon
RSASignature#initCommon(RSAKey, SecureRandom):::Init code common to sign and verify.:::try->RSAUtil->rsaKey->getParams->checkParamsAgainstType->catch->throw->new->InvalidKeyException->finally->resetDigest->keySize->RSACore->getByteLength->try->RSAPadding->getInstance->catch->throw->iape->getMessage->new->InvalidKeyException->finally->maxDataSize->padding->getMaxDataSize->if->throw->new->InvalidKeyException
RSASignature#resetDigest():::Reset the message digest if it is not already reset.:::if->md->reset
RSASignature#getDigestValue():::Return the message digest value.:::return->md->digest
RSASignature#engineUpdate(byte)::: signature engine update:::md->update
RSASignature#engineUpdate(byte[], int, int)::: signature engine update:::md->update
RSASignature#engineUpdate(ByteBuffer)::: signature engine update:::md->update
RSASignature#engineSign()::: signature engine sign:::if->throw->new->SignatureException->digest->getDigestValue->try->encoded->encodeSignature->padded->padding->pad->encrypted->RSACore->rsa->return->catch->throw->new->SignatureException->throw->new->SignatureException->finally
RSASignature#engineVerify(byte[])::: signature engine verify:::if->throw->new->SignatureException->try->if->RSACore->getByteLength->throw->RSACore->getByteLength->new->SignatureException->digest->getDigestValue->decrypted->RSACore->rsa->unpadded->padding->unpad->decodedDigest->decodeSignature->return->MessageDigest->isEqual->catch->return->throw->new->SignatureException->finally->resetDigest
RSASignature#encodeSignature(ObjectIdentifier, byte[]):::Encode the digest, return the to-be-signed data:::out->new->DerOutputStream->new->AlgorithmId->encode->out->putOctetString->result->out->toByteArray->new->DerValue->return->result->toByteArray
RSASignature#decodeSignature(ObjectIdentifier, byte[]):::Decode the signature data:::in->new->DerInputStream->values->in->getSequence->if->in->available->throw->new->IOException->algId->AlgorithmId->parse->if->algId->getOID->equals->throw->algId->getOID->new->IOException->if->algId->getEncodedParams->throw->new->IOException->digest->getOctetString->return
RSASignature#engineSetParameter(String, Object)::: signature engine set parameter:::throw->new->UnsupportedOperationException
RSASignature#engineSetParameter(AlgorithmParameterSpec)::: signature engine set parameter:::if->throw->new->InvalidAlgorithmParameterException
RSASignature#engineGetParameter(String)::: signature engine get parameter:::throw->new->UnsupportedOperationException
RSASignature#engineGetParameters()::: signature engine get parameters:::return
RSAUtil#checkParamsAgainstType(KeyType, AlgorithmParameterSpec)::: util check params against type:::switch->if->throw->type->keyAlgo->new->ProviderException->break->if->throw->type->keyAlgo->new->ProviderException->break->throw->new->ProviderException
RSAUtil#createAlgorithmId(KeyType, AlgorithmParameterSpec)::: util create algorithm id:::checkParamsAgainstType->oid->params->try->switch->break->if->AlgorithmParameters->type->keyAlgo->getInstance->params->init->break->throw->new->ProviderException->result->if->new->AlgorithmId->else->new->AlgorithmId->return->catch->throw->new->ProviderException->finally
RSAUtil#getParamSpec(AlgorithmId)::: util get param spec:::if->throw->new->ProviderException->return->algid->getParameters->getParamSpec
RSAUtil#getParamSpec(AlgorithmParameters)::: util get param spec:::if->return->try->algName->params->getAlgorithm->type->KeyType->lookup->specCls->switch->throw->type->keyAlgo->new->ProviderException->break->throw->new->ProviderException->return->params->getParameterSpec->catch->throw->throw->new->ProviderException->finally
SunRsaSignEntries#putEntries(Map)::: sun rsa sign entries put entries:::map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->rsaKeyClasses->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put->map->put

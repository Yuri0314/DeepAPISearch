sun.util.logging.internal.LoggingProviderImpl.JULWrapper#getName()->String::: wrapper get name
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, String, Throwable)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, String, Object...)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, String)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, Supplier)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, Throwable, Supplier)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#logrb(sun.util.logging.PlatformLogger.Level, ResourceBundle, String, Throwable)->void::: wrapper logrb
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#logrb(sun.util.logging.PlatformLogger.Level, ResourceBundle, String, Object...)->void::: wrapper logrb
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String)->void::: wrapper logp
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, Supplier)->void::: wrapper logp
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String, Object...)->void::: wrapper logp
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String, Throwable)->void::: wrapper logp
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, Throwable, Supplier)->void::: wrapper logp
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#logrb(sun.util.logging.PlatformLogger.Level, String, String, ResourceBundle, String, Object...)->void::: wrapper logrb
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#logrb(sun.util.logging.PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)->void::: wrapper logrb
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#isLoggable(sun.util.logging.PlatformLogger.Level)->boolean::: wrapper is loggable
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#isLoggable(Level)->boolean::: wrapper is loggable
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(Level, String)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(Level, Supplier)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(Level, Object)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(Level, String, Throwable)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(Level, Supplier, Throwable)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(Level, String, Object...)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(Level, ResourceBundle, String, Throwable)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#log(Level, ResourceBundle, String, Object...)->void::: wrapper log
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#toJUL(Level)->java.util.logging.Level::: wrapper to l
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#isEnabled()->boolean::: wrapper is enabled
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#getPlatformLevel()->PlatformLogger.Level::: wrapper get platform level
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#setPlatformLevel(PlatformLogger.Level)->void::: wrapper set platform level
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#getLoggerConfiguration()->LoggerConfiguration::: wrapper get logger configuration
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#toJUL(PlatformLogger.Level)->java.util.logging.Level::: wrapper to l
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#equals(Object)->boolean::: wrapper equals
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#hashCode()->int::: wrapper hash code
sun.util.logging.internal.LoggingProviderImpl.JULWrapper#of(java.util.logging.Logger)->JULWrapper::: wrapper of
sun.util.logging.internal.LoggingProviderImpl#demandLoggerFor(String, Module)->Logger::: logging provider impl demand logger for
sun.util.logging.internal.LoggingProviderImpl.LogManagerAccess#demandLoggerFor(LogManager, String, Module)->java.util.logging.Logger::: log manager access demand logger for
sun.util.logging.internal.LoggingProviderImpl#getLogManagerAccess()->LogManagerAccess::: logging provider impl get log manager access
sun.util.logging.internal.LoggingProviderImpl#setLogManagerAccess(LogManagerAccess)->void::: logging provider impl set log manager access

LoggingProviderImpl.JULWrapper#getName()::: wrapper get name:::return->julLogger->getName
LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, String, Throwable)::: wrapper log:::julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, String, Object...)::: wrapper log:::julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, String)::: wrapper log:::julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, Supplier)::: wrapper log:::julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#log(sun.util.logging.PlatformLogger.Level, Throwable, Supplier)::: wrapper log:::julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#logrb(sun.util.logging.PlatformLogger.Level, ResourceBundle, String, Throwable)::: wrapper logrb:::julLogger->toJUL->logrb
LoggingProviderImpl.JULWrapper#logrb(sun.util.logging.PlatformLogger.Level, ResourceBundle, String, Object...)::: wrapper logrb:::julLogger->toJUL->logrb
LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String)::: wrapper logp:::julLogger->toJUL->logp
LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, Supplier)::: wrapper logp:::julLogger->toJUL->logp
LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String, Object...)::: wrapper logp:::julLogger->toJUL->logp
LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String, Throwable)::: wrapper logp:::julLogger->toJUL->logp
LoggingProviderImpl.JULWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, Throwable, Supplier)::: wrapper logp:::julLogger->toJUL->logp
LoggingProviderImpl.JULWrapper#logrb(sun.util.logging.PlatformLogger.Level, String, String, ResourceBundle, String, Object...)::: wrapper logrb:::julLogger->toJUL->logrb
LoggingProviderImpl.JULWrapper#logrb(sun.util.logging.PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)::: wrapper logrb:::julLogger->toJUL->logrb
LoggingProviderImpl.JULWrapper#isLoggable(sun.util.logging.PlatformLogger.Level)::: wrapper is loggable:::return->julLogger->toJUL->isLoggable
LoggingProviderImpl.JULWrapper#isLoggable(Level)::: wrapper is loggable:::return->julLogger->toJUL->isLoggable
LoggingProviderImpl.JULWrapper#log(Level, String)::: wrapper log:::julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#log(Level, Supplier)::: wrapper log:::Objects->requireNonNull->julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#log(Level, Object)::: wrapper log:::Objects->requireNonNull->julLogger->toJUL->obj->toString->log
LoggingProviderImpl.JULWrapper#log(Level, String, Throwable)::: wrapper log:::julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#log(Level, Supplier, Throwable)::: wrapper log:::Objects->requireNonNull->julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#log(Level, String, Object...)::: wrapper log:::julLogger->toJUL->log
LoggingProviderImpl.JULWrapper#log(Level, ResourceBundle, String, Throwable)::: wrapper log:::julLogger->toJUL->logrb
LoggingProviderImpl.JULWrapper#log(Level, ResourceBundle, String, Object...)::: wrapper log:::julLogger->toJUL->logrb
LoggingProviderImpl.JULWrapper#toJUL(Level)::: wrapper to l:::if->return->return->level->ordinal
LoggingProviderImpl.JULWrapper#isEnabled()::: wrapper is enabled:::return->julLogger->getLevel
LoggingProviderImpl.JULWrapper#getPlatformLevel()::: wrapper get platform level:::javaLevel->julLogger->getLevel->if->return->try->return->javaLevel->getName->valueOf->catch->return->javaLevel->intValue->valueOf->finally
LoggingProviderImpl.JULWrapper#setPlatformLevel(PlatformLogger.Level)::: wrapper set platform level:::julLogger->toJUL->setLevel
LoggingProviderImpl.JULWrapper#getLoggerConfiguration()::: wrapper get logger configuration:::return
LoggingProviderImpl.JULWrapper#toJUL(PlatformLogger.Level)::: wrapper to l:::if->return->return->level->ordinal
LoggingProviderImpl.JULWrapper#equals(Object)::: wrapper equals:::return->obj->getClass->this->getClass
LoggingProviderImpl.JULWrapper#hashCode()::: wrapper hash code:::return->julLogger->hashCode
LoggingProviderImpl.JULWrapper#of(java.util.logging.Logger)::: wrapper of:::return->new->JULWrapper
LoggingProviderImpl#demandJULLoggerFor(String, Module):::Creates a java.util.logging.Logger for the given module.:::manager->LogManager->getLogManager->sm->System->getSecurityManager->if->return->logManagerAccess->demandLoggerFor->else->pa->logManagerAccess->demandLoggerFor->return->AccessController->doPrivileged
LoggingProviderImpl#demandLoggerFor(String, Module)::: logging provider impl demand logger for:::sm->System->getSecurityManager->if->sm->checkPermission->return->JULWrapper->demandJULLoggerFor->of
LoggingProviderImpl.LogManagerAccess#demandLoggerFor(LogManager, String, Module)::: log manager access demand logger for:::
LoggingProviderImpl#getLogManagerAccess()::: logging provider impl get log manager access:::sm->System->getSecurityManager->if->sm->checkPermission->if->LogManager->getLogManager->return
LoggingProviderImpl#setLogManagerAccess(LogManagerAccess)::: logging provider impl set log manager access:::sm->System->getSecurityManager->if->sm->checkPermission

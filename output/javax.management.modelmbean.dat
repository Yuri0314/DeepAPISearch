DescriptorSupport#init(Map)::: descriptor support init:::new->TreeMap<String,Object>->if->descriptorMap->putAll
DescriptorSupport#getFieldValue(String)::: descriptor support get field value:::if->fieldName->equals->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->msg->iae->new->IllegalArgumentException->throw->new->RuntimeOperationsException->retValue->descriptorMap->get->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
DescriptorSupport#setField(String, Object)::: descriptor support set field:::if->fieldName->equals->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->msg->iae->new->IllegalArgumentException->throw->new->RuntimeOperationsException->if->validateField->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->msg->iae->new->IllegalArgumentException->throw->new->RuntimeOperationsException->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->descriptorMap->put
DescriptorSupport#getFields()::: descriptor support get fields:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->numberOfEntries->descriptorMap->size->responseFields->new->StringArr->returnedSet->descriptorMap->entrySet->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->for->iter->returnedSet->iterator->iter->hasNext->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
DescriptorSupport#getFieldNames()::: descriptor support get field names:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->numberOfEntries->descriptorMap->size->responseFields->new->StringArr->returnedSet->descriptorMap->entrySet->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->for->iter->returnedSet->iterator->iter->hasNext->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
DescriptorSupport#getFieldValues(String...)::: descriptor support get field values:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->numberOfEntries->descriptorMap->size->responseFields->new->ObjectArr->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->foreach->descriptorMap->values->else->for->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
DescriptorSupport#setFields(String[], Object[])::: descriptor support set fields:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->msg->iae->new->IllegalArgumentException->throw->new->RuntimeOperationsException->for->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log
DescriptorSupport#clone()::: descriptor support clone:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->new->DescriptorSupport
DescriptorSupport#removeField(String)::: descriptor support remove field:::if->fieldName->equals->return->descriptorMap->remove
DescriptorSupport#equals(Object)::: descriptor support equals:::if->return->if->return->if->return->o->equals->return->new->ImmutableDescriptor->equals
DescriptorSupport#hashCode()::: descriptor support hash code:::size->descriptorMap->size->return->Util->descriptorMap->keySet->new->StringArr->toArray->descriptorMap->values->new->ObjectArr->toArray->hashCode
DescriptorSupport#isValid()::: descriptor support is valid:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->returnedSet->descriptorMap->entrySet->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->thisName->this->getFieldValue->thisDescType->getFieldValue->if->thisName->equals->thisDescType->equals->return->foreach->if->if->currElement->getValue->if->currElement->getKey->toString->currElement->getValue->toString->validateField->continue->else->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->currElement->getKey->currElement->getValue->log->return->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
DescriptorSupport#validateField(String, Object)::: descriptor support validate field:::if->fldName->equals->return->SfldValue->isAString->if->nameOrDescriptorType->fldName->equalsIgnoreCase->fldName->equalsIgnoreCase->if->fldName->equalsIgnoreCase->fldName->equalsIgnoreCase->fldName->equalsIgnoreCase->fldName->equalsIgnoreCase->if->return->if->SfldValue->equals->return->return->else->if->fldName->equalsIgnoreCase->v->if->toNumeric->else->if->intValue->else->return->if->return->else->return->else->if->fldName->equalsIgnoreCase->v->if->toNumeric->else->if->intValue->else->return->return->else->if->fldName->equalsIgnoreCase->return->SfldValue->equalsIgnoreCase->SfldValue->equalsIgnoreCase->SfldValue->equalsIgnoreCase->SfldValue->equalsIgnoreCase->SfldValue->equalsIgnoreCase->SfldValue->equalsIgnoreCase->else->if->fldName->equalsIgnoreCase->fldName->equalsIgnoreCase->fldName->equalsIgnoreCase->fldName->equalsIgnoreCase->v->if->toNumeric->else->if->longValue->else->return->return->else->if->fldName->equalsIgnoreCase->return->SfldValue->equalsIgnoreCase->SfldValue->equalsIgnoreCase->SfldValue->equalsIgnoreCase->SfldValue->equalsIgnoreCase->return
DescriptorSupport#toXMLString():::Returns an XML String representing the descriptor.  The format is not defined, but an implementation must ensure that the string returned by this method can be used to build an equivalent descriptor when instantiated using the constructor #DescriptorSupport(String) DescriptorSupport(String inStr).  Fields which are not String objects will have toString() called on them to create the value:::buf->new->StringBuilder->returnedSet->descriptorMap->entrySet->foreach->name->currElement->getKey->value->currElement->getValue->valueString->if->svalue->if->svalue->startsWith->svalue->endsWith->quote->if->makeFieldValue->buf->append->append->append->append->append->buf->append->return->buf->toString
DescriptorSupport#isMagic(char)::: descriptor support is magic:::return
DescriptorSupport#quote(String)::: descriptor support quote:::found->for->i->s->length->if->return->buf->new->StringBuilder->for->i->s->length->return->buf->toString
DescriptorSupport#unquote(String)::: descriptor support unquote:::if->s->startsWith->s->endsWith->throw->new->XMLParseException->buf->new->StringBuilder->len->s->length->for->i->return->buf->toString
DescriptorSupport#makeFieldValue(Object):::Make the string that will go inside "..." for a value that is not a plain String.:::if->return->valueClass->value->getClass->try->valueClass->getConstructor->catch->msg->iae->new->IllegalArgumentException->throw->new->RuntimeOperationsException->finally->quotedValueString->value->toString->quote->return->valueClass->getName
DescriptorSupport#parseQuotedFieldValue(String)::: descriptor support parse quoted field value:::unquote->if->s->equalsIgnoreCase->return->if->s->startsWith->s->endsWith->return->slash->s->indexOf->if->return->s->s->length->substring->className->s->substring->constr->try->ReflectUtil->checkPackageAccess->contextClassLoader->Thread->currentThread->getContextClassLoader->c->Class->forName->c->new->Class<?>Arr->getConstructor->catch->throw->new->XMLParseException->finally->arg->s->s->length->substring->try->return->constr->new->ObjectArr->newInstance->catch->msg->throw->new->XMLParseException->finally
DescriptorSupport#toString():::Returns a human readable string representing the descriptor:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->respStr->fields->getFields->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->for->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
DescriptorSupport#toNumeric(String)::: descriptor support to numeric:::try->return->parseLong->catch->return->finally
DescriptorSupport#readObject(ObjectInputStream):::Deserializes a DescriptorSupport from an ObjectInputStream.:::fields->in->readFields->descriptor->fields->get->cast->init->if->descriptorMap->putAll
DescriptorSupport#writeObject(ObjectOutputStream)::: descriptor support write object:::fields->out->putFields->compat->equals->if->fields->put->startMap->if->startMap->containsKey->new->TreeMap<String,Object>->startMap->remove->descriptor->if->equals->equals->new->HashMap<String,Object>->foreach->startMap->entrySet->descriptor->entry->getKey->toLowerCase->entry->getValue->put->else->new->HashMap<String,Object>->fields->put->out->writeFields
InvalidTargetObjectTypeException#readObject(ObjectInputStream):::Deserializes an InvalidTargetObjectTypeException from an ObjectInputStream.:::if->fields->in->readFields->fields->get->if->fields->defaulted->throw->new->NullPointerException->else->in->defaultReadObject
InvalidTargetObjectTypeException#writeObject(ObjectOutputStream):::Serializes an InvalidTargetObjectTypeException to an ObjectOutputStream.:::if->fields->out->putFields->fields->put->fields->exception->getMessage->put->out->writeFields->else->out->defaultWriteObject
ModelMBean#setModelMBeanInfo(ModelMBeanInfo):::Initializes a ModelMBean object using ModelMBeanInfo passed in:::
ModelMBean#setManagedResource(Object, String):::Sets the instance handle of the object against which to execute all methods in this ModelMBean management interface (MBeanInfo and Descriptors).:::
ModelMBeanAttributeInfo#getDescriptor()::: model bean attribute info get descriptor:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->validDescriptor->return->attrDescriptor->clone
ModelMBeanAttributeInfo#setDescriptor(Descriptor):::Sets associated Descriptor (full replace) for the ModelMBeanAttributeDescriptor:::validDescriptor
ModelMBeanAttributeInfo#clone()::: model bean attribute info clone:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->new->ModelMBeanAttributeInfo
ModelMBeanAttributeInfo#toString():::Returns a human-readable version of the ModelMBeanAttributeInfo instance.:::return->this->getName->this->getDescription->this->getType->this->isReadable->this->isWritable->this->getDescriptor
ModelMBeanAttributeInfo#validDescriptor(Descriptor):::Clones the passed in Descriptor, sets default values, and checks for validity:::clone->defaulted->if->new->DescriptorSupport->MODELMBEAN_LOGGER->log->else->in->clone->if->clone->getFieldValue->clone->this->getName->setField->MODELMBEAN_LOGGER->this->getName->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->getFieldValue->clone->this->getName->setField->MODELMBEAN_LOGGER->this->getName->log->if->clone->isValid->throw->new->IllegalArgumentException->clone->toString->new->RuntimeOperationsException->if->getName->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->this->getName->clone->getFieldValue->new->RuntimeOperationsException->if->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->clone->getFieldValue->new->RuntimeOperationsException->return
ModelMBeanAttributeInfo#readObject(ObjectInputStream):::Deserializes a ModelMBeanAttributeInfo from an ObjectInputStream.:::in->defaultReadObject
ModelMBeanAttributeInfo#writeObject(ObjectOutputStream):::Serializes a ModelMBeanAttributeInfo to an ObjectOutputStream.:::if->fields->out->putFields->fields->put->fields->put->out->writeFields->else->out->defaultWriteObject
ModelMBeanConstructorInfo#clone():::Creates and returns a new ModelMBeanConstructorInfo which is a duplicate of this ModelMBeanConstructorInfo.:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->new->ModelMBeanConstructorInfo
ModelMBeanConstructorInfo#getDescriptor()::: model bean constructor info get descriptor:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->validDescriptor->return->consDescriptor->clone
ModelMBeanConstructorInfo#setDescriptor(Descriptor):::Sets associated Descriptor (full replace) of ModelMBeanConstructorInfo:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->validDescriptor
ModelMBeanConstructorInfo#toString():::Returns a string containing the entire contents of the ModelMBeanConstructorInfo in human readable form.:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->retStr->this->getName->this->getDescription->this->getDescriptor->pTypes->this->getSignature->for->i->return
ModelMBeanConstructorInfo#validDescriptor(Descriptor):::Clones the passed in Descriptor, sets default values, and checks for validity:::clone->defaulted->if->new->DescriptorSupport->MODELMBEAN_LOGGER->log->else->in->clone->if->clone->getFieldValue->clone->this->getName->setField->MODELMBEAN_LOGGER->this->getName->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->getFieldValue->clone->this->getName->setField->MODELMBEAN_LOGGER->this->getName->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->isValid->throw->new->IllegalArgumentException->clone->toString->new->RuntimeOperationsException->if->getName->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->this->getName->clone->getFieldValue->new->RuntimeOperationsException->if->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->clone->getFieldValue->new->RuntimeOperationsException->if->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->clone->getFieldValue->new->RuntimeOperationsException->return
ModelMBeanConstructorInfo#readObject(ObjectInputStream):::Deserializes a ModelMBeanConstructorInfo from an ObjectInputStream.:::in->defaultReadObject
ModelMBeanConstructorInfo#writeObject(ObjectOutputStream):::Serializes a ModelMBeanConstructorInfo to an ObjectOutputStream.:::if->fields->out->putFields->fields->put->fields->put->out->writeFields->else->out->defaultWriteObject
ModelMBeanInfo#getDescriptors(String):::Returns a Descriptor array consisting of all Descriptors for the ModelMBeanInfo of type inDescriptorType.:::
ModelMBeanInfo#setDescriptors(Descriptor[]):::Adds or replaces descriptors in the ModelMBeanInfo.:::
ModelMBeanInfo#getDescriptor(String, String)::: model bean info get descriptor:::
ModelMBeanInfo#setDescriptor(Descriptor, String)::: model bean info set descriptor:::
ModelMBeanInfo#getMBeanDescriptor():::Returns the ModelMBean's descriptor which contains MBean wide policies:::
ModelMBeanInfo#setMBeanDescriptor(Descriptor)::: model bean info set bean descriptor:::
ModelMBeanInfo#getAttribute(String)::: model bean info get attribute:::
ModelMBeanInfo#getOperation(String)::: model bean info get operation:::
ModelMBeanInfo#getNotification(String):::Returns a ModelMBeanNotificationInfo requested by name.:::
ModelMBeanInfo#clone():::Creates and returns a copy of this object.:::
ModelMBeanInfo#getAttributes():::Returns the list of attributes exposed for management:::
ModelMBeanInfo#getClassName():::Returns the name of the Java class of the MBean described by this <CODE>MBeanInfo</CODE>.:::
ModelMBeanInfo#getConstructors():::Returns the list of the public constructors  of the MBean:::
ModelMBeanInfo#getDescription():::Returns a human readable description of the MBean.:::
ModelMBeanInfo#getNotifications():::Returns the list of the notifications emitted by the MBean:::
ModelMBeanInfo#getOperations():::Returns the list of operations  of the MBean:::
ModelMBeanInfoSupport#clone():::Returns a shallow clone of this instance:::return->new->ModelMBeanInfoSupport
ModelMBeanInfoSupport#getDescriptors(String)::: model bean info support get descriptors:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->inDescriptorType->equals->retList->if->inDescriptorType->equalsIgnoreCase->new->DescriptorArr->else->if->inDescriptorType->equalsIgnoreCase->attrList->numAttrs->if->new->DescriptorArr->for->i->else->if->inDescriptorType->equalsIgnoreCase->operList->numOpers->if->new->DescriptorArr->for->i->else->if->inDescriptorType->equalsIgnoreCase->consList->numCons->if->new->DescriptorArr->for->i->else->if->inDescriptorType->equalsIgnoreCase->notifList->numNotifs->if->new->DescriptorArr->for->i->else->if->inDescriptorType->equalsIgnoreCase->attrList->numAttrs->if->operList->numOpers->if->consList->numCons->if->notifList->numNotifs->if->count->new->DescriptorArr->j->for->i->for->i->for->i->for->i->else->iae->new->IllegalArgumentException->msg->throw->new->RuntimeOperationsException->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
ModelMBeanInfoSupport#setDescriptors(Descriptor[])::: model bean info support set descriptors:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->return->for->j->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log
ModelMBeanInfoSupport#getDescriptor(String)::: model bean info support get descriptor:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->getDescriptor
ModelMBeanInfoSupport#getDescriptor(String, String)::: model bean info support get descriptor:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->MMB->equalsIgnoreCase->return->modelMBeanDescriptor->clone->if->ATTR->equalsIgnoreCase->attr->getAttribute->if->return->attr->getDescriptor->if->return->if->OPER->equalsIgnoreCase->oper->getOperation->if->return->oper->getDescriptor->if->return->if->CONS->equalsIgnoreCase->oper->getConstructor->if->return->oper->getDescriptor->if->return->if->NOTF->equalsIgnoreCase->notif->getNotification->if->return->notif->getDescriptor->if->return->if->return->throw->new->IllegalArgumentException->new->RuntimeOperationsException
ModelMBeanInfoSupport#setDescriptor(Descriptor, String)::: model bean info support set descriptor:::excMsg->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->new->DescriptorSupport->if->inDescriptorType->equals->inDescriptor->getFieldValue->if->MODELMBEAN_LOGGER->log->inDescriptorName->inDescriptor->getFieldValue->if->MODELMBEAN_LOGGER->this->getClassName->log->this->getClassName->found->if->inDescriptorType->equalsIgnoreCase->setMBeanDescriptor->else->if->inDescriptorType->equalsIgnoreCase->attrList->numAttrs->if->for->i->else->if->inDescriptorType->equalsIgnoreCase->operList->numOpers->if->for->i->else->if->inDescriptorType->equalsIgnoreCase->consList->numCons->if->for->i->else->if->inDescriptorType->equalsIgnoreCase->notifList->numNotifs->if->for->i->else->iae->new->IllegalArgumentException->throw->new->RuntimeOperationsException->if->iae->new->IllegalArgumentException->throw->new->RuntimeOperationsException->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log
ModelMBeanInfoSupport#getAttribute(String)::: model bean info support get attribute:::retInfo->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->attrList->numAttrs->if->for->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
ModelMBeanInfoSupport#getOperation(String)::: model bean info support get operation:::retInfo->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->operList->numOpers->if->for->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
ModelMBeanInfoSupport#getConstructor(String)::: model bean info support get constructor:::retInfo->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->consList->numCons->if->for->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
ModelMBeanInfoSupport#getNotification(String)::: model bean info support get notification:::retInfo->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->notifList->numNotifs->if->for->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
ModelMBeanInfoSupport#getDescriptor()::: model bean info support get descriptor:::return->getMBeanDescriptorNoException
ModelMBeanInfoSupport#getMBeanDescriptor()::: model bean info support get bean descriptor:::return->getMBeanDescriptorNoException
ModelMBeanInfoSupport#getMBeanDescriptorNoException()::: model bean info support get bean descriptor no exception:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->validDescriptor->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->modelMBeanDescriptor->clone
ModelMBeanInfoSupport#setMBeanDescriptor(Descriptor)::: model bean info support set bean descriptor:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->validDescriptor
ModelMBeanInfoSupport#validDescriptor(Descriptor):::Clones the passed in Descriptor, sets default values, and checks for validity:::clone->defaulted->if->new->DescriptorSupport->MODELMBEAN_LOGGER->log->else->in->clone->if->clone->getFieldValue->clone->this->getClassName->setField->MODELMBEAN_LOGGER->this->getClassName->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->getFieldValue->clone->this->getClassName->setField->MODELMBEAN_LOGGER->this->getClassName->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->isValid->throw->new->IllegalArgumentException->clone->toString->new->RuntimeOperationsException->if->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->clone->getFieldValue->new->RuntimeOperationsException->return
ModelMBeanInfoSupport#readObject(ObjectInputStream):::Deserializes a ModelMBeanInfoSupport from an ObjectInputStream.:::if->fields->in->readFields->fields->get->if->fields->defaulted->throw->new->NullPointerException->fields->get->if->fields->defaulted->throw->new->NullPointerException->fields->get->if->fields->defaulted->throw->new->NullPointerException->fields->get->if->fields->defaulted->throw->new->NullPointerException->fields->get->if->fields->defaulted->throw->new->NullPointerException->else->in->defaultReadObject
ModelMBeanInfoSupport#writeObject(ObjectOutputStream):::Serializes a ModelMBeanInfoSupport to an ObjectOutputStream.:::if->fields->out->putFields->fields->put->fields->put->fields->put->fields->put->fields->put->fields->put->out->writeFields->else->out->defaultWriteObject
ModelMBeanNotificationBroadcaster#sendNotification(Notification)::: model bean notification broadcaster send notification:::
ModelMBeanNotificationBroadcaster#sendNotification(String):::Sends a Notification which contains the text string that is passed in to the registered Notification listeners on the ModelMBean.:::
ModelMBeanNotificationBroadcaster#sendAttributeChangeNotification(AttributeChangeNotification):::Sends an attributeChangeNotification which is passed in to the registered attributeChangeNotification listeners on the ModelMBean.:::
ModelMBeanNotificationBroadcaster#sendAttributeChangeNotification(Attribute, Attribute):::Sends an attributeChangeNotification which contains the old value and new value for the attribute to the registered AttributeChangeNotification listeners on the ModelMBean.:::
ModelMBeanNotificationBroadcaster#addAttributeChangeNotificationListener(NotificationListener, String, Object):::Registers an object which implements the NotificationListener interface as a listener:::
ModelMBeanNotificationBroadcaster#removeAttributeChangeNotificationListener(NotificationListener, String)::: model bean notification broadcaster remove attribute change notification listener:::
ModelMBeanNotificationInfo#clone():::Creates and returns a new ModelMBeanNotificationInfo which is a duplicate of this ModelMBeanNotificationInfo.:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->new->ModelMBeanNotificationInfo
ModelMBeanNotificationInfo#getDescriptor():::Returns a copy of the associated Descriptor for the ModelMBeanNotificationInfo.:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->validDescriptor->return->notificationDescriptor->clone
ModelMBeanNotificationInfo#setDescriptor(Descriptor):::Sets associated Descriptor (full replace) for the ModelMBeanNotificationInfo If the new Descriptor is null, then the associated Descriptor reverts to a default descriptor:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->validDescriptor
ModelMBeanNotificationInfo#toString():::Returns a human readable string containing ModelMBeanNotificationInfo.:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->retStr->new->StringBuilder->retStr->append->this->getName->append->retStr->append->this->getDescription->append->retStr->append->this->getDescriptor->append->retStr->append->nTypes->this->getNotifTypes->for->i->return->retStr->toString
ModelMBeanNotificationInfo#validDescriptor(Descriptor):::Clones the passed in Descriptor, sets default values, and checks for validity:::clone->defaulted->if->new->DescriptorSupport->MODELMBEAN_LOGGER->log->else->in->clone->if->clone->getFieldValue->clone->this->getName->setField->MODELMBEAN_LOGGER->this->getName->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->getFieldValue->clone->this->getName->setField->MODELMBEAN_LOGGER->this->getName->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->isValid->throw->new->IllegalArgumentException->clone->toString->new->RuntimeOperationsException->if->getName->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->this->getName->clone->getFieldValue->new->RuntimeOperationsException->if->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->clone->getFieldValue->new->RuntimeOperationsException->return
ModelMBeanNotificationInfo#readObject(ObjectInputStream):::Deserializes a ModelMBeanNotificationInfo from an ObjectInputStream.:::in->defaultReadObject
ModelMBeanNotificationInfo#writeObject(ObjectOutputStream):::Serializes a ModelMBeanNotificationInfo to an ObjectOutputStream.:::if->fields->out->putFields->fields->put->fields->put->out->writeFields->else->out->defaultWriteObject
ModelMBeanOperationInfo#clone()::: model bean operation info clone:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->new->ModelMBeanOperationInfo
ModelMBeanOperationInfo#getDescriptor()::: model bean operation info get descriptor:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->validDescriptor->return->operationDescriptor->clone
ModelMBeanOperationInfo#setDescriptor(Descriptor):::Sets associated Descriptor (full replace) for the ModelMBeanOperationInfo If the new Descriptor is null, then the associated Descriptor reverts to a default descriptor:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->validDescriptor
ModelMBeanOperationInfo#toString():::Returns a string containing the entire contents of the ModelMBeanOperationInfo in human readable form.:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->retStr->this->getName->this->getDescription->this->getDescriptor->this->getReturnType->pTypes->this->getSignature->for->i->return
ModelMBeanOperationInfo#validDescriptor(Descriptor):::Clones the passed in Descriptor, sets default values, and checks for validity:::clone->defaulted->if->new->DescriptorSupport->MODELMBEAN_LOGGER->log->else->in->clone->if->clone->getFieldValue->clone->this->getName->setField->MODELMBEAN_LOGGER->this->getName->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->getFieldValue->clone->this->getName->setField->MODELMBEAN_LOGGER->this->getName->log->if->clone->getFieldValue->clone->setField->MODELMBEAN_LOGGER->log->if->clone->isValid->throw->new->IllegalArgumentException->clone->toString->new->RuntimeOperationsException->if->getName->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->this->getName->clone->getFieldValue->new->RuntimeOperationsException->if->clone->getFieldValue->equalsIgnoreCase->throw->new->IllegalArgumentException->clone->getFieldValue->new->RuntimeOperationsException->role->clone->getFieldValue->if->role->equalsIgnoreCase->role->equalsIgnoreCase->role->equalsIgnoreCase->throw->new->IllegalArgumentException->clone->getFieldValue->new->RuntimeOperationsException->targetValue->clone->getFieldValue->if->if->throw->new->IllegalArgumentException->targetValue->getClass->getName->new->RuntimeOperationsException->return
ModelMBeanOperationInfo#readObject(ObjectInputStream):::Deserializes a ModelMBeanOperationInfo from an ObjectInputStream.:::in->defaultReadObject
ModelMBeanOperationInfo#writeObject(ObjectOutputStream):::Serializes a ModelMBeanOperationInfo to an ObjectOutputStream.:::if->fields->out->putFields->fields->put->fields->put->out->writeFields->else->out->defaultWriteObject
RequiredModelMBean#setModelMBeanInfo(ModelMBeanInfo):::Initializes a ModelMBean object using ModelMBeanInfo passed in:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->x->new->IllegalArgumentException->exceptionText->throw->new->RuntimeOperationsException->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->exceptionText->x->new->IllegalStateException->throw->new->RuntimeOperationsException->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->printModelMBeanInfo->log->noOfNotifications->if->mbi->getNotifications->mbi->getNotifications->MODELMBEAN_LOGGER->log->mbi->clone->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->printModelMBeanInfo->log->MODELMBEAN_LOGGER->log
RequiredModelMBean#setManagedResource(Object, String):::Sets the instance handle of the object against which to execute all methods in this ModelMBean management interface (MBeanInfo and Descriptors).:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->mr_type->equalsIgnoreCase->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->throw->new->InvalidTargetObjectTypeException->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log
RequiredModelMBean#load():::Instantiates this MBean instance with the data found for the MBean in the persistent store:::x->new->ServiceNotFoundException->throw->x->getMessage->new->MBeanException
RequiredModelMBean#store():::Captures the current state of this MBean instance and writes it out to the persistent store:::x->new->ServiceNotFoundException->throw->x->getMessage->new->MBeanException
RequiredModelMBean#resolveForCacheValue(Descriptor):::The resolveForCacheValue method checks the descriptor passed in to see if there is a valid cached value in the descriptor:::tracing->MODELMBEAN_LOGGER->isLoggable->if->MODELMBEAN_LOGGER->log->response->resetValue->returnCachedValue->currencyPeriod->if->if->MODELMBEAN_LOGGER->log->return->if->MODELMBEAN_LOGGER->log->mmbDescr->modelMBeanInfo->getMBeanDescriptor->if->if->MODELMBEAN_LOGGER->log->objExpTime->descr->getFieldValue->expTime->if->objExpTime->toString->else->if->mmbDescr->getFieldValue->if->objExpTime->toString->else->if->if->MODELMBEAN_LOGGER->log->Long->parseLong->if->if->MODELMBEAN_LOGGER->log->else->if->if->MODELMBEAN_LOGGER->log->else->objtStamp->descr->getFieldValue->tStamp->if->objtStamp->toString->else->if->MODELMBEAN_LOGGER->log->if->lastTime->Long->parseLong->if->MODELMBEAN_LOGGER->log->now->new->Date->getTime->if->if->MODELMBEAN_LOGGER->log->else->if->MODELMBEAN_LOGGER->log->if->MODELMBEAN_LOGGER->log->if->currValue->descr->getFieldValue->if->if->MODELMBEAN_LOGGER->log->else->if->MODELMBEAN_LOGGER->log->if->descr->removeField->descr->removeField->modelMBeanInfo->setDescriptor->if->MODELMBEAN_LOGGER->log->if->MODELMBEAN_LOGGER->log->return
RequiredModelMBean#getMBeanInfo():::Returns the attributes, operations, constructors and notifications that this RequiredModelMBean exposes for management.:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->createDefaultModelMBeanInfo->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->modelMBeanInfo->getClassName->modelMBeanInfo->getDescription->log->MODELMBEAN_LOGGER->printModelMBeanInfo->log->return->modelMBeanInfo->clone
RequiredModelMBean#printModelMBeanInfo(ModelMBeanInfo)::: required model bean print model bean info:::retStr->new->StringBuilder->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->retStr->append->retStr->append->info->getClassName->append->retStr->append->info->getDescription->append->try->retStr->append->info->getMBeanDescriptor->append->catch->retStr->append->finally->retStr->append->attrInfo->info->getAttributes->if->for->i->else->retStr->append->retStr->append->constrInfo->info->getConstructors->if->for->i->else->retStr->append->retStr->append->opsInfo->info->getOperations->if->for->i->else->retStr->append->retStr->append->notifInfo->info->getNotifications->if->for->i->else->retStr->append->retStr->append->return->retStr->toString
RequiredModelMBean#invoke(String, Object[], String[])::: required model bean invoke:::tracing->MODELMBEAN_LOGGER->isLoggable->if->MODELMBEAN_LOGGER->log->if->x->new->IllegalArgumentException->throw->new->RuntimeOperationsException->opClassName->opMethodName->opSplitter->opName->lastIndexOf->if->opName->substring->opName->substring->else->opMethodName->indexOf->if->opMethodName->substring->if->MODELMBEAN_LOGGER->log->opInfo->modelMBeanInfo->getOperation->if->msg->throw->new->ServiceNotFoundException->new->MBeanException->opDescr->opInfo->getDescriptor->if->msg->throw->new->ServiceNotFoundException->new->MBeanException->cached->resolveForCacheValue->if->if->MODELMBEAN_LOGGER->log->return->if->opDescr->getFieldValue->opDescr->getFieldValue->if->msg->throw->new->ServiceNotFoundException->new->MBeanException->targetTypeField->opDescr->getFieldValue->if->targetTypeField->equalsIgnoreCase->msg->throw->new->InvalidTargetObjectTypeException->new->MBeanException->targetObjectField->opDescr->getFieldValue->if->MODELMBEAN_LOGGER->log->method->targetObject->findRMMBMethod->if->else->if->MODELMBEAN_LOGGER->log->if->else->if->msg->snfe->new->ServiceNotFoundException->throw->new->MBeanException->targetClass->if->try->stack->AccessController->getContext->obj->className->caughtException->new->ClassNotFoundExceptionArr->javaSecurityAccess->new->PrivilegedAction<Class<?>>->doIntersectionPrivilege->if->throw->catch->msg->throw->new->ReflectionException->finally->else->targetObject->getClass->resolveMethod->if->MODELMBEAN_LOGGER->log->result->invokeMethod->if->MODELMBEAN_LOGGER->log->if->cacheResult->return
RequiredModelMBean#resolveMethod(Class, String, String[])::: required model bean resolve method:::tracing->MODELMBEAN_LOGGER->isLoggable->if->MODELMBEAN_LOGGER->targetClass->getName->log->argClasses->if->else->stack->AccessController->getContext->caughtException->new->ReflectionExceptionArr->targetClassLoader->targetClass->getClassLoader->new->Class<?>Arr->javaSecurityAccess->new->PrivilegedAction<Void>->doIntersectionPrivilege->if->throw->try->return->targetClass->getMethod->catch->msg->targetClass->getName->throw->new->ReflectionException->finally
RequiredModelMBean#findRMMBMethod(String, Object, String, String[])::: required model bean find method:::tracing->MODELMBEAN_LOGGER->isLoggable->if->MODELMBEAN_LOGGER->log->if->isRMMBMethodName->return->if->return->rmmbClass->targetClass->if->else->stack->AccessController->getContext->className->javaSecurityAccess->new->PrivilegedAction<Class<?>>->doIntersectionPrivilege->try->return->resolveMethod->catch->return->finally
RequiredModelMBean#invokeMethod(String, Method, Object, Object[])::: required model bean invoke method:::try->caughtException->new->ThrowableArr->stack->AccessController->getContext->rslt->javaSecurityAccess->new->PrivilegedAction<Object>->doIntersectionPrivilege->if->if->throw->else->if->throw->return->catch->throw->new->RuntimeOperationsException->throw->new->RuntimeOperationsException->throw->new->ReflectionException->mmbTargEx->ite->getTargetException->if->throw->new->MBeanException->else->if->throw->new->RuntimeErrorException->else->if->throw->else->throw->new->MBeanException->throw->new->RuntimeErrorException->throw->new->ReflectionException->finally
RequiredModelMBean#cacheResult(ModelMBeanOperationInfo, Descriptor, Object)::: required model bean cache result:::mmbDesc->modelMBeanInfo->getMBeanDescriptor->objctl->opDescr->getFieldValue->ctl->if->objctl->toString->else->if->mmbDesc->getFieldValue->if->objctl->toString->else->if->ctl->equals->opDescr->setField->opDescr->String->new->Date->getTime->valueOf->setField->modelMBeanInfo->setDescriptor->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log
RequiredModelMBean#isRMMBMethodName(String)::: required model bean is method name:::if->try->names->new->HashSet<String>->methods->getMethods->for->i->catch->return->finally->return->rmmbMethodNames->contains
RequiredModelMBean#getAttribute(String):::Returns the value of a specific attribute defined for this ModelMBean:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->tracing->MODELMBEAN_LOGGER->isLoggable->if->MODELMBEAN_LOGGER->log->response->try->if->throw->new->AttributeNotFoundException->attrInfo->modelMBeanInfo->getAttribute->mmbDesc->modelMBeanInfo->getMBeanDescriptor->if->throw->new->AttributeNotFoundException->attrDescr->attrInfo->getDescriptor->if->if->attrInfo->isReadable->throw->new->AttributeNotFoundException->resolveForCacheValue->if->MODELMBEAN_LOGGER->log->if->if->MODELMBEAN_LOGGER->log->attrGetMethod->attrDescr->getFieldValue->if->if->MODELMBEAN_LOGGER->log->getResponse->new->ObjectArr->new->StringArr->invoke->if->if->MODELMBEAN_LOGGER->log->objctl->attrDescr->getFieldValue->ctl->if->objctl->toString->else->if->mmbDesc->getFieldValue->if->objctl->toString->else->if->ctl->equals->if->MODELMBEAN_LOGGER->log->attrDescr->setField->stamp->String->new->Date->getTime->valueOf->attrDescr->setField->attrInfo->setDescriptor->modelMBeanInfo->setDescriptor->if->MODELMBEAN_LOGGER->log->MODELMBEAN_LOGGER->attrInfo->getDescriptor->log->attStr->modelMBeanInfo->getDescriptor->toString->MODELMBEAN_LOGGER->log->else->if->MODELMBEAN_LOGGER->log->else->qualifier->attrDescr->getFieldValue->if->attrDescr->getFieldValue->if->MODELMBEAN_LOGGER->log->respType->attrInfo->getType->if->responseClass->response->getClass->getName->if->respType->equals->wrongType->primitiveType->correspondingTypes->for->i->if->if->else->subtype->try->respClass->response->getClass->caughException->new->ExceptionArr->stack->AccessController->getContext->c->javaSecurityAccess->new->PrivilegedAction<Class<?>>->doIntersectionPrivilege->if->throw->c->isInstance->catch->if->MODELMBEAN_LOGGER->log->finally->if->if->if->MODELMBEAN_LOGGER->log->throw->new->InvalidAttributeValueException->new->MBeanException->else->if->MODELMBEAN_LOGGER->log->throw->new->InvalidAttributeValueException->new->MBeanException->catch->throw->throw->if->MODELMBEAN_LOGGER->e->getMessage->e->getClass->toString->log->throw->e->getMessage->new->MBeanException->finally->if->MODELMBEAN_LOGGER->log->return
RequiredModelMBean#getAttributes(String[]):::Returns the values of several attributes in the ModelMBean:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->getName->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->responseList->new->AttributeList->for->i->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
RequiredModelMBean#setAttribute(Attribute):::Sets the value of a specific attribute of a named ModelMBean:::tracing->MODELMBEAN_LOGGER->isLoggable->if->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->attrName->attribute->getName->attrValue->attribute->getValue->updateDescriptor->attrInfo->modelMBeanInfo->getAttribute->if->throw->new->AttributeNotFoundException->mmbDesc->modelMBeanInfo->getMBeanDescriptor->attrDescr->attrInfo->getDescriptor->if->if->attrInfo->isWritable->throw->new->AttributeNotFoundException->attrSetMethod->attrDescr->getFieldValue->attrGetMethod->attrDescr->getFieldValue->attrType->attrInfo->getType->currValue->try->this->getAttribute->catch->finally->oldAttr->new->Attribute->if->if->try->clazz->loadClass->if->clazz->isInstance->throw->clazz->getName->attrValue->getClass->getName->new->InvalidAttributeValueException->catch->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->finally->else->new->ObjectArr->new->StringArr->invoke->objctl->attrDescr->getFieldValue->ctl->if->objctl->toString->else->if->mmbDesc->getFieldValue->if->objctl->toString->else->updateCache->ctl->equals->if->throw->new->ServiceNotFoundException->new->MBeanException->if->if->MODELMBEAN_LOGGER->log->attrDescr->setField->if->currtime->String->new->Date->getTime->valueOf->attrDescr->setField->attrInfo->setDescriptor->modelMBeanInfo->setDescriptor->if->strb->new->StringBuilder->append->append->append->attrInfo->getDescriptor->append->append->modelMBeanInfo->getDescriptor->append->MODELMBEAN_LOGGER->strb->toString->log->if->MODELMBEAN_LOGGER->log->sendAttributeChangeNotification->else->if->MODELMBEAN_LOGGER->log->throw->new->InvalidAttributeValueException->if->MODELMBEAN_LOGGER->log
RequiredModelMBean#setAttributes(AttributeList):::Sets the values of an array of attributes of this ModelMBean:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->responseList->new->AttributeList->foreach->attributes->asList->try->setAttribute->responseList->add->catch->responseList->remove->finally->return
RequiredModelMBean#createDefaultModelMBeanInfo()::: required model bean create default model bean info:::return->this->getClass->getName->new->ModelMBeanInfoSupport
RequiredModelMBean#writeToLog(String, String)::: required model bean write to log:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return->fos->new->FileOutputStream->try->logOut->new->PrintStream->logOut->println->logOut->close->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->catch->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->e->toString->log->throw->finally->fos->close
RequiredModelMBean#addNotificationListener(NotificationListener, NotificationFilter, Object):::Registers an object which implements the NotificationListener interface as a listener:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->if->new->NotificationBroadcasterSupport->generalBroadcaster->addNotificationListener->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->MODELMBEAN_LOGGER->log
RequiredModelMBean#removeNotificationListener(NotificationListener):::Removes a listener for Notifications from the RequiredModelMBean.:::if->throw->new->ListenerNotFoundException->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->ListenerNotFoundException->generalBroadcaster->removeNotificationListener->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log
RequiredModelMBean#removeNotificationListener(NotificationListener, NotificationFilter, Object)::: required model bean remove notification listener:::if->throw->new->ListenerNotFoundException->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->ListenerNotFoundException->generalBroadcaster->removeNotificationListener->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log
RequiredModelMBean#sendNotification(Notification)::: required model bean send notification:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->ntfyDesc->modelMBeanInfo->ntfyObj->getType->getDescriptor->mmbDesc->modelMBeanInfo->getMBeanDescriptor->if->logging->ntfyDesc->getFieldValue->if->if->mmbDesc->getFieldValue->if->logging->equalsIgnoreCase->logging->equalsIgnoreCase->logfile->ntfyDesc->getFieldValue->if->if->mmbDesc->getFieldValue->if->try->ntfyObj->getTimeStamp->new->Date->toString->ntfyObj->getType->ntfyObj->getMessage->ntfyDesc->getFieldValue->writeToLog->catch->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->ntfyObj->getType->log->finally->if->generalBroadcaster->sendNotification->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->MODELMBEAN_LOGGER->log
RequiredModelMBean#sendNotification(String)::: required model bean send notification:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->myNtfyObj->new->Notification->sendNotification->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->MODELMBEAN_LOGGER->log
RequiredModelMBean#hasNotification(ModelMBeanInfo, String):::Returns `true' if the notification `notifName' is found in `info':::try->if->return->else->return->info->getNotification->catch->return->return->finally
RequiredModelMBean#makeGenericInfo():::Creates a default ModelMBeanNotificationInfo for GENERIC notification:::genericDescriptor->new->StringArr->new->DescriptorSupport->return->new->StringArr->new->ModelMBeanNotificationInfo
RequiredModelMBean#makeAttributeChangeInfo():::Creates a default ModelMBeanNotificationInfo for ATTRIBUTE_CHANGE notification:::attributeDescriptor->new->StringArr->new->DescriptorSupport->return->new->StringArr->new->ModelMBeanNotificationInfo
RequiredModelMBean#getNotificationInfo():::Returns the array of Notifications always generated by the RequiredModelMBean:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->hasGeneric->hasNotification->hasAttributeChange->hasNotification->currInfo->modelMBeanInfo->getNotifications->len->respInfo->new->ModelMBeanNotificationInfoArr->inserted->if->makeGenericInfo->if->makeAttributeChangeInfo->count->offset->for->j->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->return
RequiredModelMBean#addAttributeChangeNotificationListener(NotificationListener, String, Object)::: required model bean add attribute change notification listener:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->if->new->NotificationBroadcasterSupport->currFilter->new->AttributeChangeNotificationFilter->attrInfo->modelMBeanInfo->getAttributes->found->if->if->for->i->else->if->for->i->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->MODELMBEAN_LOGGER->isLoggable->enabledAttrs->currFilter->getEnabledAttributes->s->enabledAttrs->size->enabledAttrs->firstElement->enabledAttrs->toString->MODELMBEAN_LOGGER->log->attributeBroadcaster->addNotificationListener->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->MODELMBEAN_LOGGER->log
RequiredModelMBean#removeAttributeChangeNotificationListener(NotificationListener, String)::: required model bean remove attribute change notification listener:::if->throw->new->ListenerNotFoundException->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->getName->log->if->throw->new->ListenerNotFoundException->attrInfo->modelMBeanInfo->getAttributes->found->if->for->i->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->attributeBroadcaster->removeNotificationListener->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log
RequiredModelMBean#sendAttributeChangeNotification(AttributeChangeNotification)::: required model bean send attribute change notification:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->oldv->ntfyObj->getOldValue->newv->ntfyObj->getNewValue->if->if->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->ntfyObj->getAttributeName->ntfyObj->getAttributeType->ntfyObj->getNewValue->ntfyObj->getOldValue->log->ntfyDesc->modelMBeanInfo->ntfyObj->getType->getDescriptor->mmbDesc->modelMBeanInfo->getMBeanDescriptor->logging->logfile->if->ntfyDesc->getFieldValue->if->if->mmbDesc->getFieldValue->if->logging->equalsIgnoreCase->logging->equalsIgnoreCase->ntfyDesc->getFieldValue->if->if->mmbDesc->getFieldValue->if->try->ntfyObj->getTimeStamp->new->Date->toString->ntfyObj->getType->ntfyObj->getMessage->ntfyObj->getAttributeName->writeToLog->catch->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->ntfyObj->getType->log->finally->else->if->mmbDesc->getFieldValue->if->logging->equalsIgnoreCase->logging->equalsIgnoreCase->mmbDesc->getFieldValue->if->try->ntfyObj->getTimeStamp->new->Date->toString->ntfyObj->getType->ntfyObj->getMessage->ntfyObj->getAttributeName->writeToLog->catch->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->ntfyObj->getType->log->finally->if->attributeBroadcaster->sendNotification->if->generalBroadcaster->sendNotification->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->MODELMBEAN_LOGGER->log
RequiredModelMBean#sendAttributeChangeNotification(Attribute, Attribute)::: required model bean send attribute change notification:::if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->inOldVal->getName->inNewVal->getName->equals->throw->new->IllegalArgumentException->new->RuntimeOperationsException->newVal->inNewVal->getValue->oldVal->inOldVal->getValue->className->if->newVal->getClass->getName->if->oldVal->getClass->getName->myNtfyObj->new->Date->getTime->inOldVal->getName->inOldVal->getValue->inNewVal->getValue->new->AttributeChangeNotification->sendAttributeChangeNotification->if->MODELMBEAN_LOGGER->isLoggable->MODELMBEAN_LOGGER->log
RequiredModelMBean#getClassLoaderRepository():::Return the Class Loader Repository used to perform class loading:::return->MBeanServerFactory->getClassLoaderRepository
RequiredModelMBean#loadClass(String)::: required model bean load class:::stack->AccessController->getContext->caughtException->new->ClassNotFoundExceptionArr->c->javaSecurityAccess->new->PrivilegedAction<Class<?>>->doIntersectionPrivilege->if->throw->return
RequiredModelMBean#preRegister(MBeanServer, ObjectName):::Allows the MBean to perform any operations it needs before being registered in the MBean server:::if->throw->new->NullPointerException->return
RequiredModelMBean#postRegister(Boolean):::Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed:::registrationDone->booleanValue
RequiredModelMBean#preDeregister():::Allows the MBean to perform any operations it needs before being unregistered by the MBean server:::
RequiredModelMBean#postDeregister():::Allows the MBean to perform any operations needed after having been unregistered in the MBean server:::
XMLParseException#readObject(ObjectInputStream):::Deserializes an XMLParseException from an ObjectInputStream.:::in->defaultReadObject
XMLParseException#writeObject(ObjectOutputStream):::Serializes an XMLParseException to an ObjectOutputStream.:::if->fields->out->putFields->fields->getMessage->put->out->writeFields->else->out->defaultWriteObject

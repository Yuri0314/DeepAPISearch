CompileTimeBenchmark#compile(CompileState)::: compile time benchmark compile:::return->s->compile
CompileTimeBenchmark#frontend(FrontEndState)::: compile time benchmark frontend:::return->s->compile
CompileTimeBenchmark#backend(BackEndEndState)::: compile time benchmark backend:::return->s->compile
GraalCompilerState#useProfilingInfo()::: graal compiler state use profiling info:::return
GraalCompilerState#initializeMethod()::: graal compiler state initialize method:::graal->new->GraalState->method->getMethod->lookupJavaMethod->structuredGraph->try->s->debug->scope->useProfilingInfo->getGraph->preprocessOriginal->catch->debug->handle->finally
GraalCompilerState#getMethod()::: graal compiler state get method:::c->getClass->if->isMethodSpecAnnotationPresent->return->getMethodFromMethodSpec->return->findParamField
GraalCompilerState#isMethodSpecAnnotationPresent(Class)::: graal compiler state is method spec annotation present:::c->while->if->c->isAnnotationPresent->return->c->getSuperclass->return
GraalCompilerState#findParamField(Object)::: graal compiler state find param field:::c->obj->getClass->annotationClass->try->foreach->c->getFields->if->f->isAnnotationPresent->if->f->getType->equals->throw->annotationClass->getSimpleName->getSimpleName->new->RuntimeException->if->f->isAnnotationPresent->throw->annotationClass->getSimpleName->getSimpleName->new->RuntimeException->methodName->f->get->return->getMethodFromString->catch->throw->new->RuntimeException->finally->throw->annotationClass->getSimpleName->new->RuntimeException
GraalCompilerState#getMethodFromString(String):::Gets a Method from a method description string:::try->s0->methodDesc->split->if->throw->new->RuntimeException->className->clazz->Class->forName->s1->split->name->parameters->if->parametersPart->if->parametersPart->parametersPart->length->charAt->throw->new->RuntimeException->s2->parametersPart->parametersPart->length->substring->split->new->Class<?>Arr->for->i->return->GraalUtil->getMethod->catch->throw->new->RuntimeException->finally
GraalCompilerState#preprocessOriginal(StructuredGraph)::: graal compiler state preprocess original:::return
GraalCompilerState#getOptions()::: graal compiler state get options:::return
GraalCompilerState#createSuites(OptionValues)::: graal compiler state create suites:::return->backend->getSuites->getDefaultSuites->copy
GraalCompilerState#createLIRSuites(OptionValues)::: graal compiler state create suites:::return->backend->getSuites->getDefaultLIRSuites->copy
GraalCompilerState#getBackend()::: graal compiler state get backend:::return
GraalCompilerState#getProviders()::: graal compiler state get providers:::return
GraalCompilerState#getSnippetReflection()::: graal compiler state get snippet reflection:::return->Graal->getRequiredCapability
GraalCompilerState#getTarget()::: graal compiler state get target:::return->getTargetProvider->getTarget
GraalCompilerState#getTargetProvider()::: graal compiler state get target provider:::return->getBackend
GraalCompilerState#getCodeCache()::: graal compiler state get code cache:::return->getProviders->getCodeCache
GraalCompilerState#getConstantReflection()::: graal compiler state get constant reflection:::return->getProviders->getConstantReflection
GraalCompilerState#getMetaAccess()::: graal compiler state get meta access:::return->getProviders->getMetaAccess
GraalCompilerState#getLowerer()::: graal compiler state get lowerer:::return->getProviders->getLowerer
GraalCompilerState#getDefaultGraphBuilderSuite()::: graal compiler state get default graph builder suite:::return->backend->getSuites->getDefaultGraphBuilderSuite->copy
GraalCompilerState#getLIRSuites()::: graal compiler state get suites:::return
GraalCompilerState#prepareRequest():::Copies the #originalGraph original graph and prepares the #request:::compilationId->backend->originalGraph->method->getCompilationIdentifier->originalGraph->originalGraph->getDebug->copyWithIdentifier->installedCodeOwner->graph->method->getProviders->getBackend->getDefaultGraphBuilderSuite->graph->getProfilingInfo->getOptions->createSuites->getOptions->createLIRSuites->graph->compilationId->new->CompilationResult->new->Request<>
GraalCompilerState#emitFrontEnd():::Executes the high-level (FrontEnd) part of the compiler.:::GraalCompiler->emitFrontEnd->freeze
GraalCompilerState#emitBackEnd():::Executes the low-level (BackEnd) part of the compiler.:::emitLIR->emitCode
GraalCompilerState#emitLIR():::Generates LIR and executes the LIR pipeline.:::generateLIR->emitLowLevel
GraalCompilerState#generateLIR():::Generates the initial LIR.:::preLIRGeneration->lirGeneration
GraalCompilerState#preLIRGeneration():::Sets up LIR generation.:::stub->getLastSchedule->cfg->schedule->getCFG->deepCopy->blocks->cfg->getBlocks->startBlock->cfg->getStartBlock->ComputeBlockOrder->computeCodeEmittingOrder->ComputeBlockOrder->computeLinearScanOrder->lir->getGraphOptions->getGraphDebug->new->LIR->lirBackend->lirBackend->graph->compilationId->newLIRGenerationResult->lirBackend->newLIRGenerator->lirBackend->newNodeLIRBuilder
GraalCompilerState#getGraphOptions()::: graal compiler state get graph options:::return->graph->getOptions
GraalCompilerState#getGraphDebug()::: graal compiler state get graph debug:::return->graph->getDebug
GraalCompilerState#deepCopy(ControlFlowGraph)::: graal compiler state deep copy:::return->ControlFlowGraph->compute
GraalCompilerState#lirGeneration():::Executes the LIRGenerationPhase.:::context->new->LIRGenerationContext->new->LIRGenerationPhase->getTarget->apply
GraalCompilerState#emitLowLevel():::Executes the low-level compiler stages.:::preAllocationStage->allocationStage->postAllocationStage
GraalCompilerState#applyLIRPhase(LIRPhase, C):::Executes a LIRPhase within a given context.:::phase->getTarget->apply
GraalCompilerState#preAllocationStage():::Executes the PreAllocationStage:::getLIRSuites->getPreAllocationOptimizationStage->createPreAllocationOptimizationContext->applyLIRPhase
GraalCompilerState#createPreAllocationOptimizationContext()::: graal compiler state create pre allocation optimization context:::return->new->PreAllocationOptimizationContext
GraalCompilerState#allocationStage():::Executes the AllocationStage:::getLIRSuites->getAllocationStage->createAllocationContext->applyLIRPhase
GraalCompilerState#createAllocationContext()::: graal compiler state create allocation context:::return->lirGenTool->getSpillMoveFactory->newRegisterAllocationConfig->new->AllocationContext
GraalCompilerState#postAllocationStage():::Executes the PostAllocationStage:::getLIRSuites->getPostAllocationOptimizationStage->createPostAllocationOptimizationContext->applyLIRPhase
GraalCompilerState#createPostAllocationOptimizationContext()::: graal compiler state create post allocation optimization context:::return->new->PostAllocationOptimizationContext
GraalCompilerState#emitCode():::Emits the machine code.:::bytecodeSize->method->getBytecodeSize->speculationLog->hasUnsafeAccess->setHasUnsafeAccess->LIRCompilerBackend->getAssumptions->method->getMethods->getFields->emitCode
GraalCompilerState#graph()::: graal compiler state graph:::return
GraalCompilerState#getLIR()::: graal compiler state get r:::return->lirGenRes->getLIR
GraalCompilerState.Compile#init()::: compile init:::initializeMethod
GraalCompilerState.Compile#setup()::: compile setup:::prepareRequest
GraalCompilerState.Compile#compile()::: compile compile:::emitFrontEnd->emitBackEnd->return
GraalCompilerState.FrontEndOnly#init()::: front end only init:::initializeMethod
GraalCompilerState.FrontEndOnly#setup()::: front end only setup:::prepareRequest
GraalCompilerState.FrontEndOnly#compile()::: front end only compile:::emitFrontEnd->return
GraalCompilerState.BackEndOnly#init()::: back end only init:::initializeMethod
GraalCompilerState.BackEndOnly#setupGraph():::Cannot do this Level#Trial only once since #emitCode() closes the CompilationResult.:::prepareRequest->emitFrontEnd
GraalCompilerState.BackEndOnly#compile()::: back end only compile:::emitBackEnd->return
GraalCompilerState.PreAllocationStage#setupGraph():::No need to rebuild the graph for every invocation since it is not altered by the backend.:::initializeMethod->prepareRequest->emitFrontEnd
GraalCompilerState.PreAllocationStage#setup()::: pre allocation stage setup:::generateLIR
GraalCompilerState.PreAllocationStage#compile()::: pre allocation stage compile:::preAllocationStage->return
GraalCompilerState.AllocationStage#setupGraph():::No need to rebuild the graph for every invocation since it is not altered by the backend.:::initializeMethod->prepareRequest->emitFrontEnd
GraalCompilerState.AllocationStage#setup()::: allocation stage setup:::generateLIR->preAllocationStage
GraalCompilerState.AllocationStage#compile()::: allocation stage compile:::allocationStage->return
GraalCompilerState.PostAllocationStage#setupGraph():::No need to rebuild the graph for every invocation since it is not altered by the backend.:::initializeMethod->prepareRequest->emitFrontEnd
GraalCompilerState.PostAllocationStage#setup()::: post allocation stage setup:::generateLIR->preAllocationStage->allocationStage
GraalCompilerState.PostAllocationStage#compile()::: post allocation stage compile:::postAllocationStage->return
RegisterAllocationTimeBenchmark#allocateRegisters(State)::: register allocation time benchmark allocate registers:::return->s->compile

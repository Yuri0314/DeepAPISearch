org.graalvm.compiler.microbenchmarks.lir.CompileTimeBenchmark#compile(CompileState)->CompilationResult::: compile time benchmark compile
org.graalvm.compiler.microbenchmarks.lir.CompileTimeBenchmark#frontend(FrontEndState)->StructuredGraph::: compile time benchmark frontend
org.graalvm.compiler.microbenchmarks.lir.CompileTimeBenchmark#backend(BackEndEndState)->CompilationResult::: compile time benchmark backend
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#useProfilingInfo()->boolean::: graal compiler state use profiling info
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#initializeMethod()->void::: graal compiler state initialize method
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getMethod()->Method::: graal compiler state get method
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#isMethodSpecAnnotationPresent(Class)->boolean::: graal compiler state is method spec annotation present
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getMethodFromString(String)->Method:::Gets a Method from a method description string
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#preprocessOriginal(StructuredGraph)->StructuredGraph::: graal compiler state preprocess original
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getOptions()->OptionValues::: graal compiler state get options
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#createSuites(OptionValues)->Suites::: graal compiler state create suites
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#createLIRSuites(OptionValues)->LIRSuites::: graal compiler state create suites
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getBackend()->Backend::: graal compiler state get backend
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getProviders()->Providers::: graal compiler state get providers
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getSnippetReflection()->SnippetReflectionProvider::: graal compiler state get snippet reflection
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getTarget()->TargetDescription::: graal compiler state get target
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getTargetProvider()->TargetProvider::: graal compiler state get target provider
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getCodeCache()->CodeCacheProvider::: graal compiler state get code cache
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getConstantReflection()->ConstantReflectionProvider::: graal compiler state get constant reflection
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getMetaAccess()->MetaAccessProvider::: graal compiler state get meta access
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getLowerer()->LoweringProvider::: graal compiler state get lowerer
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getDefaultGraphBuilderSuite()->PhaseSuite::: graal compiler state get default graph builder suite
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getLIRSuites()->LIRSuites::: graal compiler state get suites
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#prepareRequest()->void:::Copies the #originalGraph original graph and prepares the #request
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#emitFrontEnd()->void:::Executes the high-level (FrontEnd) part of the compiler.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#emitBackEnd()->void:::Executes the low-level (BackEnd) part of the compiler.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#emitLIR()->void:::Generates LIR and executes the LIR pipeline.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#generateLIR()->void:::Generates the initial LIR.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#preLIRGeneration()->void:::Sets up LIR generation.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getGraphOptions()->OptionValues::: graal compiler state get graph options
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getGraphDebug()->DebugContext::: graal compiler state get graph debug
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#lirGeneration()->void:::Executes the LIRGenerationPhase.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#emitLowLevel()->void:::Executes the low-level compiler stages.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#applyLIRPhase(LIRPhase, C)->void:::Executes a LIRPhase within a given context.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#preAllocationStage()->void:::Executes the PreAllocationStage
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#createPreAllocationOptimizationContext()->PreAllocationOptimizationContext::: graal compiler state create pre allocation optimization context
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#allocationStage()->void:::Executes the AllocationStage
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#createAllocationContext()->AllocationContext::: graal compiler state create allocation context
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#postAllocationStage()->void:::Executes the PostAllocationStage
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#createPostAllocationOptimizationContext()->PostAllocationOptimizationContext::: graal compiler state create post allocation optimization context
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#emitCode()->void:::Emits the machine code.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#graph()->StructuredGraph::: graal compiler state graph
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState#getLIR()->LIR::: graal compiler state get r
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.Compile#init()->void::: compile init
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.Compile#setup()->void::: compile setup
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.Compile#compile()->CompilationResult::: compile compile
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.FrontEndOnly#init()->void::: front end only init
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.FrontEndOnly#setup()->void::: front end only setup
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.FrontEndOnly#compile()->StructuredGraph::: front end only compile
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.BackEndOnly#init()->void::: back end only init
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.BackEndOnly#setupGraph()->void:::Cannot do this Level#Trial only once since #emitCode() closes the CompilationResult.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.BackEndOnly#compile()->CompilationResult::: back end only compile
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.PreAllocationStage#setupGraph()->void:::No need to rebuild the graph for every invocation since it is not altered by the backend.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.PreAllocationStage#setup()->void::: pre allocation stage setup
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.PreAllocationStage#compile()->LIRGenerationResult::: pre allocation stage compile
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.AllocationStage#setupGraph()->void:::No need to rebuild the graph for every invocation since it is not altered by the backend.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.AllocationStage#setup()->void::: allocation stage setup
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.AllocationStage#compile()->LIRGenerationResult::: allocation stage compile
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.PostAllocationStage#setupGraph()->void:::No need to rebuild the graph for every invocation since it is not altered by the backend.
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.PostAllocationStage#setup()->void::: post allocation stage setup
org.graalvm.compiler.microbenchmarks.lir.GraalCompilerState.PostAllocationStage#compile()->LIRGenerationResult::: post allocation stage compile
org.graalvm.compiler.microbenchmarks.lir.RegisterAllocationTimeBenchmark#allocateRegisters(State)->LIRGenerationResult::: register allocation time benchmark allocate registers

FileURLConnection#connect()::: file connection connect:::if->try->file->toString->file->isDirectory->if->fileList->file->list->if->throw->new->FileNotFoundException->Arrays->asList->else->new->FileInputStream->new->BufferedInputStream->meteredInput->ProgressMonitor->getDefault->shouldMeterInput->if->pi->file->length->new->ProgressSource->file->length->new->MeteredStream->catch->throw->finally
FileURLConnection#initializeHeaders()::: file connection initialize headers:::try->connect->file->exists->catch->finally->if->file->length->file->lastModified->if->map->getFileNameMap->map->getContentTypeFor->if->properties->add->properties->String->valueOf->add->if->date->new->Date->fo->new->SimpleDateFormat->fo->TimeZone->getTimeZone->setTimeZone->properties->fo->format->add->else->properties->add
FileURLConnection#getHeaderField(String)::: file connection get header field:::initializeHeaders->return->super->getHeaderField
FileURLConnection#getHeaderField(int)::: file connection get header field:::initializeHeaders->return->super->getHeaderField
FileURLConnection#getContentLength()::: file connection get content length:::initializeHeaders->if->return->return
FileURLConnection#getContentLengthLong()::: file connection get content length long:::initializeHeaders->return
FileURLConnection#getHeaderFieldKey(int)::: file connection get header field key:::initializeHeaders->return->super->getHeaderFieldKey
FileURLConnection#getProperties()::: file connection get properties:::initializeHeaders->return->super->getProperties
FileURLConnection#getLastModified()::: file connection get last modified:::initializeHeaders->return
FileURLConnection#getInputStream()::: file connection get input stream:::iconHeight->iconWidth->connect->if->if->map->getFileNameMap->sb->new->StringBuilder->if->throw->new->FileNotFoundException->Collections->Collator->getInstance->sort->for->i->files->size->sb->toString->getBytes->new->ByteArrayInputStream->else->throw->new->FileNotFoundException->return
FileURLConnection#getPermission()::: file connection get permission:::if->decodedPath->ParseUtil->url->getPath->decode->if->new->FilePermission->else->if->decodedPath->length->decodedPath->charAt->decodedPath->charAt->decodedPath->substring->decodedPath->replace->new->FilePermission->return
Handler#getHost(URL)::: handler get host:::host->url->getHost->if->return
Handler#parseURL(URL, String, int, int)::: handler parse l:::super->spec->replace->parseURL
Handler#openConnection(URL)::: handler open connection:::return->openConnection
Handler#openConnection(URL, Proxy)::: handler open connection:::path->file->url->getFile->host->url->getHost->ParseUtil->decode->path->replace->path->replace->if->host->equals->host->equalsIgnoreCase->host->equals->return->new->File->createFileURLConnection->f->new->File->if->f->exists->return->new->UNCFileURLConnection->uc->newurl->try->url->getRef->url->getRef->new->URL->if->newurl->openConnection->else->newurl->openConnection->catch->finally->if->throw->url->toExternalForm->new->IOException->return
Handler#createFileURLConnection(URL, File):::Template method to be overriden by Java Plug-in:::return->new->FileURLConnection
Handler#hostsEqual(URL, URL):::Compares the host components of two URLs.:::s1->u1->getHost->s2->u2->getHost->if->equalsIgnoreCase->equals->return->if->equalsIgnoreCase->equals->return->return->super->hostsEqual
UNCFileURLConnection#getPermission()::: file connection get permission:::perm->if->new->FilePermission->return

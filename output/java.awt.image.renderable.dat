java.awt.image.renderable.ContextualRenderedImageFactory#mapRenderContext(int, RenderContext, ParameterBlock, RenderableImage)->RenderContext:::Maps the operation's output RenderContext into a RenderContext for each of the operation's sources
java.awt.image.renderable.ContextualRenderedImageFactory#create(RenderContext, ParameterBlock)->RenderedImage:::Creates a rendering, given a RenderContext and a ParameterBlock containing the operation's sources and parameters
java.awt.image.renderable.ContextualRenderedImageFactory#getBounds2D(ParameterBlock)->Rectangle2D:::Returns the bounding box for the output of the operation, performed on a given set of sources, in rendering-independent space
java.awt.image.renderable.ContextualRenderedImageFactory#getProperty(ParameterBlock, String)->Object:::Gets the appropriate instance of the property specified by the name parameter
java.awt.image.renderable.ContextualRenderedImageFactory#getPropertyNames()->String[]:::Returns a list of names recognized by getProperty.
java.awt.image.renderable.ContextualRenderedImageFactory#isDynamic()->boolean:::Returns true if successive renderings (that is, calls to create(RenderContext, ParameterBlock)) with the same arguments may produce different results
java.awt.image.renderable.ParameterBlock#shallowClone()->Object:::Creates a shallow copy of a ParameterBlock
java.awt.image.renderable.ParameterBlock#clone()->Object:::Creates a copy of a ParameterBlock
java.awt.image.renderable.ParameterBlock#addSource(Object)->ParameterBlock:::Adds an image to end of the list of sources
java.awt.image.renderable.ParameterBlock#getSource(int)->Object:::Returns a source as a general Object
java.awt.image.renderable.ParameterBlock#setSource(Object, int)->ParameterBlock:::Replaces an entry in the list of source with a new source
java.awt.image.renderable.ParameterBlock#getRenderedSource(int)->RenderedImage:::Returns a source as a RenderedImage
java.awt.image.renderable.ParameterBlock#getRenderableSource(int)->RenderableImage:::Returns a source as a RenderableImage
java.awt.image.renderable.ParameterBlock#getNumSources()->int:::Returns the number of source images.
java.awt.image.renderable.ParameterBlock#getSources()->Vector:::Returns the entire Vector of sources.
java.awt.image.renderable.ParameterBlock#setSources(Vector)->void:::Sets the entire Vector of sources to a given Vector.
java.awt.image.renderable.ParameterBlock#removeSources()->void:::Clears the list of source images.
java.awt.image.renderable.ParameterBlock#getNumParameters()->int:::Returns the number of parameters (not including source images).
java.awt.image.renderable.ParameterBlock#getParameters()->Vector:::Returns the entire Vector of parameters.
java.awt.image.renderable.ParameterBlock#setParameters(Vector)->void:::Sets the entire Vector of parameters to a given Vector.
java.awt.image.renderable.ParameterBlock#removeParameters()->void:::Clears the list of parameters.
java.awt.image.renderable.ParameterBlock#add(Object)->ParameterBlock:::Adds an object to the list of parameters.
java.awt.image.renderable.ParameterBlock#add(byte)->ParameterBlock:::Adds a Byte to the list of parameters.
java.awt.image.renderable.ParameterBlock#add(char)->ParameterBlock:::Adds a Character to the list of parameters.
java.awt.image.renderable.ParameterBlock#add(short)->ParameterBlock:::Adds a Short to the list of parameters.
java.awt.image.renderable.ParameterBlock#add(int)->ParameterBlock:::Adds a Integer to the list of parameters.
java.awt.image.renderable.ParameterBlock#add(long)->ParameterBlock:::Adds a Long to the list of parameters.
java.awt.image.renderable.ParameterBlock#add(float)->ParameterBlock:::Adds a Float to the list of parameters.
java.awt.image.renderable.ParameterBlock#add(double)->ParameterBlock:::Adds a Double to the list of parameters.
java.awt.image.renderable.ParameterBlock#set(Object, int)->ParameterBlock:::Replaces an Object in the list of parameters
java.awt.image.renderable.ParameterBlock#set(byte, int)->ParameterBlock:::Replaces an Object in the list of parameters with a Byte
java.awt.image.renderable.ParameterBlock#set(char, int)->ParameterBlock:::Replaces an Object in the list of parameters with a Character
java.awt.image.renderable.ParameterBlock#set(short, int)->ParameterBlock:::Replaces an Object in the list of parameters with a Short
java.awt.image.renderable.ParameterBlock#set(int, int)->ParameterBlock:::Replaces an Object in the list of parameters with an Integer
java.awt.image.renderable.ParameterBlock#set(long, int)->ParameterBlock:::Replaces an Object in the list of parameters with a Long
java.awt.image.renderable.ParameterBlock#set(float, int)->ParameterBlock:::Replaces an Object in the list of parameters with a Float
java.awt.image.renderable.ParameterBlock#set(double, int)->ParameterBlock:::Replaces an Object in the list of parameters with a Double
java.awt.image.renderable.ParameterBlock#getObjectParameter(int)->Object:::Gets a parameter as an object.
java.awt.image.renderable.ParameterBlock#getByteParameter(int)->byte:::A convenience method to return a parameter as a byte
java.awt.image.renderable.ParameterBlock#getCharParameter(int)->char:::A convenience method to return a parameter as a char
java.awt.image.renderable.ParameterBlock#getShortParameter(int)->short:::A convenience method to return a parameter as a short
java.awt.image.renderable.ParameterBlock#getIntParameter(int)->int:::A convenience method to return a parameter as an int
java.awt.image.renderable.ParameterBlock#getLongParameter(int)->long:::A convenience method to return a parameter as a long
java.awt.image.renderable.ParameterBlock#getFloatParameter(int)->float:::A convenience method to return a parameter as a float
java.awt.image.renderable.ParameterBlock#getDoubleParameter(int)->double:::A convenience method to return a parameter as a double
java.awt.image.renderable.ParameterBlock#getParamClasses()->Class[]:::Returns an array of Class objects describing the types of the parameters.
java.awt.image.renderable.RenderableImage#getSources()->Vector:::Returns a vector of RenderableImages that are the sources of image data for this RenderableImage
java.awt.image.renderable.RenderableImage#getProperty(String)->Object:::Gets a property from the property set of this image
java.awt.image.renderable.RenderableImage#getPropertyNames()->String[]:::Returns a list of names recognized by getProperty.
java.awt.image.renderable.RenderableImage#isDynamic()->boolean:::Returns true if successive renderings (that is, calls to createRendering() or createScaledRendering()) with the same arguments may produce different results
java.awt.image.renderable.RenderableImage#getWidth()->float:::Gets the width in user coordinate space
java.awt.image.renderable.RenderableImage#getHeight()->float:::Gets the height in user coordinate space
java.awt.image.renderable.RenderableImage#getMinX()->float:::Gets the minimum X coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImage#getMinY()->float:::Gets the minimum Y coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImage#createScaledRendering(int, int, RenderingHints)->RenderedImage:::Creates a RenderedImage instance of this image with width w, and height h in pixels
java.awt.image.renderable.RenderableImage#createDefaultRendering()->RenderedImage:::Returns a RenderedImage instance of this image with a default width and height in pixels
java.awt.image.renderable.RenderableImage#createRendering(RenderContext)->RenderedImage:::Creates a RenderedImage that represented a rendering of this image using a given RenderContext
java.awt.image.renderable.RenderableImageOp#getSources()->Vector:::Returns a vector of RenderableImages that are the sources of image data for this RenderableImage
java.awt.image.renderable.RenderableImageOp#getProperty(String)->Object:::Gets a property from the property set of this image
java.awt.image.renderable.RenderableImageOp#getPropertyNames()->String[]:::Return a list of names recognized by getProperty.
java.awt.image.renderable.RenderableImageOp#isDynamic()->boolean:::Returns true if successive renderings (that is, calls to createRendering() or createScaledRendering()) with the same arguments may produce different results
java.awt.image.renderable.RenderableImageOp#getWidth()->float:::Gets the width in user coordinate space
java.awt.image.renderable.RenderableImageOp#getHeight()->float:::Gets the height in user coordinate space
java.awt.image.renderable.RenderableImageOp#getMinX()->float:::Gets the minimum X coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImageOp#getMinY()->float:::Gets the minimum Y coordinate of the rendering-independent image data.
java.awt.image.renderable.RenderableImageOp#setParameterBlock(ParameterBlock)->ParameterBlock:::Change the current ParameterBlock of the operation, allowing editing of image rendering chains
java.awt.image.renderable.RenderableImageOp#getParameterBlock()->ParameterBlock:::Returns a reference to the current parameter block.
java.awt.image.renderable.RenderableImageOp#createScaledRendering(int, int, RenderingHints)->RenderedImage:::Creates a RenderedImage instance of this image with width w, and height h in pixels
java.awt.image.renderable.RenderableImageOp#createDefaultRendering()->RenderedImage:::Gets a RenderedImage instance of this image with a default width and height in pixels
java.awt.image.renderable.RenderableImageOp#createRendering(RenderContext)->RenderedImage:::Creates a RenderedImage which represents this RenderableImageOp (including its Renderable sources) rendered according to the given RenderContext
java.awt.image.renderable.RenderableImageProducer#setRenderContext(RenderContext)->void:::Sets a new RenderContext to use for the next startProduction() call.
java.awt.image.renderable.RenderableImageProducer#addConsumer(ImageConsumer)->void:::Adds an ImageConsumer to the list of consumers interested in data for this image.
java.awt.image.renderable.RenderableImageProducer#isConsumer(ImageConsumer)->boolean:::Determine if an ImageConsumer is on the list of consumers currently interested in data for this image.
java.awt.image.renderable.RenderableImageProducer#removeConsumer(ImageConsumer)->void:::Remove an ImageConsumer from the list of consumers interested in data for this image.
java.awt.image.renderable.RenderableImageProducer#startProduction(ImageConsumer)->void:::Adds an ImageConsumer to the list of consumers interested in data for this image, and immediately starts delivery of the image data through the ImageConsumer interface.
java.awt.image.renderable.RenderableImageProducer#requestTopDownLeftRightResend(ImageConsumer)->void:::Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order.
java.awt.image.renderable.RenderableImageProducer#run()->void:::The runnable method for this class
java.awt.image.renderable.RenderContext#getRenderingHints()->RenderingHints:::Gets the rendering hints of this RenderContext.
java.awt.image.renderable.RenderContext#setRenderingHints(RenderingHints)->void:::Sets the rendering hints of this RenderContext.
java.awt.image.renderable.RenderContext#setTransform(AffineTransform)->void:::Sets the current user-to-device AffineTransform contained in the RenderContext to a given transform.
java.awt.image.renderable.RenderContext#preConcatenateTransform(AffineTransform)->void:::Modifies the current user-to-device transform by prepending another transform
java.awt.image.renderable.RenderContext#preConcetenateTransform(AffineTransform)->void:::Modifies the current user-to-device transform by prepending another transform
java.awt.image.renderable.RenderContext#concatenateTransform(AffineTransform)->void:::Modifies the current user-to-device transform by appending another transform
java.awt.image.renderable.RenderContext#concetenateTransform(AffineTransform)->void:::Modifies the current user-to-device transform by appending another transform
java.awt.image.renderable.RenderContext#getTransform()->AffineTransform:::Gets the current user-to-device AffineTransform.
java.awt.image.renderable.RenderContext#setAreaOfInterest(Shape)->void:::Sets the current area of interest
java.awt.image.renderable.RenderContext#getAreaOfInterest()->Shape:::Gets the ares of interest currently contained in the RenderContext.
java.awt.image.renderable.RenderContext#clone()->Object:::Makes a copy of a RenderContext
java.awt.image.renderable.RenderedImageFactory#create(ParameterBlock, RenderingHints)->RenderedImage:::Creates a RenderedImage representing the results of an imaging operation (or chain of operations) for a given ParameterBlock and RenderingHints

AddressVisitor#visitAddress(Address)::: address visitor visit address:::
AddressVisitor#visitCompOopAddress(Address)::: address visitor visit comp oop address:::
Arguments#getJVMFlags()::: arguments get flags:::return->buildString
Arguments#getJVMArgs()::: arguments get args:::return->buildString
Arguments#getJavaCommand()::: arguments get java command:::return->getString
Arguments#initialize(TypeDataBase)::: arguments initialize:::argumentsType->db->lookupType->argumentsType->getAddressField->argumentsType->getAddressField->argumentsType->getAddressField->argumentsType->getCIntegerField->getValue->argumentsType->getCIntegerField->getValue
Arguments#buildString(AddressField, long)::: arguments build string:::sb->new->StringBuilder->if->sb->getStringAt->append->for->i->return->sb->toString
Arguments#getString(AddressField)::: arguments get string:::addr->field->getAddress->return->CStringUtilities->getString
Arguments#getStringAt(AddressField, long)::: arguments get string at:::addr->field->getAddress->return->CStringUtilities->addr->VM->getVM->getAddressSize->getAddressAt->getString
ArgumentSizeComputer#set(int, int)::: argument size computer set:::if->isReturnType
BasicLock#initialize(TypeDataBase)::: basic lock initialize:::type->db->lookupType->type->getCIntegerField
BasicLock#displacedHeader()::: basic lock displaced header:::return->addr->displacedHeaderField->getOffset->addOffsetTo->new->Mark
BasicObjectLock#initialize(TypeDataBase)::: basic object lock initialize:::type->db->lookupType->type->getField->type->getOopField->type->getSize
BasicObjectLock#obj()::: basic object lock obj:::return->objField->getValue
BasicObjectLock#lock()::: basic object lock lock:::return->addr->lockField->getOffset->addOffsetTo->new->BasicLock
BasicObjectLock#size():::Note: Use frame::interpreter_frame_monitor_size() for the size       of BasicObjectLocks in interpreter activation frames since it       includes machine-specific padding:::return
BasicObjectLock#address():::Helper routine for Frames (also probably needed for iteration):::return
BasicType#initialize(TypeDataBase)::: basic type initialize:::T_BOOLEAN->db->lookupIntConstant->intValue->setType->T_CHAR->db->lookupIntConstant->intValue->setType->T_FLOAT->db->lookupIntConstant->intValue->setType->T_DOUBLE->db->lookupIntConstant->intValue->setType->T_BYTE->db->lookupIntConstant->intValue->setType->T_SHORT->db->lookupIntConstant->intValue->setType->T_INT->db->lookupIntConstant->intValue->setType->T_LONG->db->lookupIntConstant->intValue->setType->T_OBJECT->db->lookupIntConstant->intValue->setType->T_ARRAY->db->lookupIntConstant->intValue->setType->T_VOID->db->lookupIntConstant->intValue->setType->T_ADDRESS->db->lookupIntConstant->intValue->setType->T_NARROWOOP->db->lookupIntConstant->intValue->setType->T_METADATA->db->lookupIntConstant->intValue->setType->T_NARROWKLASS->db->lookupIntConstant->intValue->setType->T_CONFLICT->db->lookupIntConstant->intValue->setType->T_ILLEGAL->db->lookupIntConstant->intValue->setType
BasicType#getTBoolean()::: basic type get boolean:::return->T_BOOLEAN->getType
BasicType#getTChar()::: basic type get char:::return->T_CHAR->getType
BasicType#getTFloat()::: basic type get float:::return->T_FLOAT->getType
BasicType#getTDouble()::: basic type get double:::return->T_DOUBLE->getType
BasicType#getTByte()::: basic type get byte:::return->T_BYTE->getType
BasicType#getTShort()::: basic type get short:::return->T_SHORT->getType
BasicType#getTInt()::: basic type get int:::return->T_INT->getType
BasicType#getTLong()::: basic type get long:::return->T_LONG->getType
BasicType#getTObject()::: basic type get object:::return->T_OBJECT->getType
BasicType#getTArray()::: basic type get array:::return->T_ARRAY->getType
BasicType#getTVoid()::: basic type get void:::return->T_VOID->getType
BasicType#getTAddress()::: basic type get address:::return->T_ADDRESS->getType
BasicType#getTNarrowOop()::: basic type get narrow oop:::return->T_NARROWOOP->getType
BasicType#getTMetadata()::: basic type get metadata:::return->T_METADATA->getType
BasicType#getTNarrowKlass()::: basic type get narrow klass:::return->T_NARROWKLASS->getType
BasicType#getTConflict():::For stack value type with conflicting contents:::return->T_CONFLICT->getType
BasicType#getTIllegal()::: basic type get illegal:::return->T_ILLEGAL->getType
BasicType#intToBasicType(int)::: basic type int to basic type:::if->T_BOOLEAN->getType->return->else->if->T_CHAR->getType->return->else->if->T_FLOAT->getType->return->else->if->T_DOUBLE->getType->return->else->if->T_BYTE->getType->return->else->if->T_SHORT->getType->return->else->if->T_INT->getType->return->else->if->T_LONG->getType->return->else->if->T_OBJECT->getType->return->else->if->T_ARRAY->getType->return->else->if->T_VOID->getType->return->else->if->T_ADDRESS->getType->return->else->if->T_NARROWOOP->getType->return->else->if->T_METADATA->getType->return->else->if->T_NARROWKLASS->getType->return->else->return
BasicType#charToBasicType(char)::: basic type char to basic type:::switch->return->return->return->return->return->return->return->return->return->return->return->return
BasicType#charToType(char)::: basic type char to type:::return->charToBasicType->getType
BasicType#getType()::: basic type get type:::return
BasicType#getName()::: basic type get name:::if->T_BOOLEAN->getType->return->else->if->T_CHAR->getType->return->else->if->T_FLOAT->getType->return->else->if->T_DOUBLE->getType->return->else->if->T_BYTE->getType->return->else->if->T_SHORT->getType->return->else->if->T_INT->getType->return->else->if->T_LONG->getType->return->else->if->T_OBJECT->getType->return->else->if->T_ARRAY->getType->return->else->if->T_VOID->getType->return->else->if->T_ADDRESS->getType->return->else->if->T_NARROWOOP->getType->return->else->if->T_METADATA->getType->return->else->if->T_NARROWKLASS->getType->return->else->if->T_CONFLICT->getType->return->else->return
BasicType#setType(int)::: basic type set type:::
BasicTypeSize#initialize(TypeDataBase)::: basic type size initialize:::db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue
BasicTypeSize#getTBooleanSize()::: basic type size get boolean size:::return
BasicTypeSize#getTCharSize()::: basic type size get char size:::return
BasicTypeSize#getTFloatSize()::: basic type size get float size:::return
BasicTypeSize#getTDoubleSize()::: basic type size get double size:::return
BasicTypeSize#getTByteSize()::: basic type size get byte size:::return
BasicTypeSize#getTShortSize()::: basic type size get short size:::return
BasicTypeSize#getTIntSize()::: basic type size get int size:::return
BasicTypeSize#getTLongSize()::: basic type size get long size:::return
BasicTypeSize#getTObjectSize()::: basic type size get object size:::return
BasicTypeSize#getTArraySize()::: basic type size get array size:::return
BasicTypeSize#getTNarrowOopSize()::: basic type size get narrow oop size:::return
BasicTypeSize#getTNarrowKlassSize()::: basic type size get narrow klass size:::return
BasicTypeSize#getTVoidSize()::: basic type size get void size:::return
Bytes#swapShort(short):::Should only swap if the hardware's underlying byte order is       different from Java's:::if->return->return
Bytes#swapInt(int):::Should only swap if the hardware's underlying byte order is       different from Java's:::if->return->return->swapShort->swapShort
Bytes#swapLong(long):::Should only swap if the hardware's underlying byte order is       different from Java's:::if->return->return->swapInt->swapInt
CodeCacheSweeperThread#isJavaThread()::: code cache sweeper thread is java thread:::return
CodeCacheSweeperThread#isHiddenFromExternalView()::: code cache sweeper thread is hidden from external view:::return
CodeCacheSweeperThread#isCodeCacheSweeperThread()::: code cache sweeper thread is code cache sweeper thread:::return
CompiledVFrame#isTop()::: compiled frame is top:::if->VM->getVM->isDebugging->return->getScope->getScope->isTop->else->return->getScope->isTop
CompiledVFrame#isCompiledFrame()::: compiled frame is compiled frame:::return
CompiledVFrame#isDeoptimized()::: compiled frame is deoptimized:::return->fr->isDeoptimized
CompiledVFrame#mayBeImpreciseDbg()::: compiled frame may be imprecise dbg:::return
CompiledVFrame#getCode():::Returns the active method:::return->VM->getVM->getCodeCache->fr->getPC->findNMethod
CompiledVFrame#getCodeUnsafe():::Returns the active method:::return->VM->getVM->getCodeCache->fr->getPC->findNMethodUnsafe
CompiledVFrame#getScope():::Returns the ScopeDesc:::return
CompiledVFrame#getMethod()::: compiled frame get method:::if->VM->getVM->isDebugging->getScope->return->getCodeUnsafe->getMethod->return->getScope->getMethod
CompiledVFrame#getLocals()::: compiled frame get locals:::if->getScope->return->new->StackValueCollection->scvList->getScope->getLocals->if->return->new->StackValueCollection->length->scvList->size->result->new->StackValueCollection->for->i->return
CompiledVFrame#getExpressions()::: compiled frame get expressions:::if->getScope->return->new->StackValueCollection->scvList->getScope->getExpressions->if->return->new->StackValueCollection->length->scvList->size->result->new->StackValueCollection->for->i->return
CompiledVFrame#getMonitors():::Returns List<MonitorInfo>:::if->getScope->return->new->ArrayList<>->monitors->getScope->getMonitors->if->return->new->ArrayList<>->result->monitors->size->new->ArrayList<>->for->i->monitors->size->return
CompiledVFrame#getBCI()::: compiled frame get i:::raw->getRawBCI->return
CompiledVFrame#getRawBCI():::Returns SynchronizationEntryBCI or bci() (used for synchronization):::if->VM->getVM->isDebugging->getScope->return->return->getScope->getBCI
CompiledVFrame#sender():::Returns the sender vframe:::if->Assert->isTop->that->return->sender
CompiledVFrame#sender(boolean)::: compiled frame sender:::if->VM->getVM->isDebugging->if->Assert->that->f->getFrame->clone->return->isTop->super->sender->getRegisterMap->getThread->getScope->sender->new->CompiledVFrame
CompiledVFrame#createStackValue(ScopeValue)::: compiled frame create stack value:::if->sv->isLocation->loc->getLocation->if->loc->isIllegal->return->new->StackValue->valueAddr->loc->isRegister->getRegisterMap->loc->getRegisterNumber->new->VMReg->getLocation->fr->getUnextendedSP->loc->getStackOffset->addOffsetTo->if->loc->holdsFloat->if->Assert->loc->isRegister->that->value->valueAddr->getJDoubleAt->return->Float->floatToIntBits->new->StackValue->else->if->loc->holdsInt->if->Assert->loc->isRegister->that->return->valueAddr->getJLongAt->new->StackValue->else->if->loc->holdsNarrowOop->if->loc->isRegister->VM->getVM->isBigEndian->return->valueAddr->VM->getVM->getIntSize->getCompOopHandleAt->new->StackValue->else->return->valueAddr->getCompOopHandleAt->new->StackValue->else->if->loc->holdsOop->return->valueAddr->getOopHandleAt->new->StackValue->else->if->loc->holdsDouble->return->valueAddr->getJIntAt->new->StackValue->else->if->loc->holdsAddr->if->Assert->VM->getVM->isServerCompiler->that->return->new->StackValue->else->if->VM->getVM->isLP64->loc->holdsLong->if->loc->isRegister->return->valueAddr->getJLongAt->valueAddr->getJLongAt->new->StackValue->else->return->valueAddr->getJLongAt->new->StackValue->else->if->loc->isRegister->return->valueAddr->getJIntAt->new->StackValue->else->return->valueAddr->getJIntAt->new->StackValue->else->if->sv->isConstantInt->return->getValue->new->StackValue->else->if->sv->isConstantOop->return->getValue->new->StackValue->else->if->sv->isConstantDouble->d->getValue->return->Double->doubleToLongBits->new->StackValue->else->if->VM->getVM->isLP64->sv->isConstantLong->return->getValue->new->StackValue->else->if->sv->isObject->return->getValue->new->StackValue->Assert->that->return->new->StackValue
CompiledVFrame#resolveMonitorLock(Location)::: compiled frame resolve monitor lock:::if->Assert->location->isStack->that->byteOffset->location->getStackOffset->return->getFrame->getUnextendedSP->addOffsetTo->new->BasicLock
CompilerThread#initialize(TypeDataBase)::: compiler thread initialize:::type->db->lookupType->type->getAddressField
CompilerThread#env()::: compiler thread env:::if->v->envField->this->getAddress->getValue->if->new->ciEnv->return
CompilerThread#isJavaThread()::: compiler thread is java thread:::return
CompilerThread#isHiddenFromExternalView()::: compiler thread is hidden from external view:::return
CompilerThread#isCompilerThread()::: compiler thread is compiler thread:::return
ConcurrentLocksPrinter#print(JavaThread, PrintStream)::: concurrent locks printer print:::locks->locksMap->get->tty->println->if->locks->isEmpty->tty->println->else->for->itr->locks->iterator->itr->hasNext
ConcurrentLocksPrinter#getOwnerThread(Oop)::: concurrent locks printer get owner thread:::threadOop->OopUtilities->abstractOwnableSynchronizerGetOwnerThread->if->return->else->return->OopUtilities->threadOopGetJavaThread
ConcurrentLocksPrinter#fillLocks()::: concurrent locks printer fill locks:::vm->VM->getVM->sysDict->vm->getSystemDictionary->absOwnSyncKlass->sysDict->getAbstractOwnableSynchronizerKlass->heap->vm->getObjectHeap->if->heap->new->DefaultHeapVisitor->iterateObjectsOfKlass
DeadlockDetector#print(PrintStream)::: deadlock detector print:::print
DeadlockDetector#print(PrintStream, boolean):::prints zero or more deadlocks into 'tty' taking current      snapshot of Java threads and locks:::tty->println->tty->println->globalDfn->thisDfn->numberOfDeadlocks->currentThread->previousThread->waitingToLockMonitor->waitingToLockBlocker->VM->getVM->getThreads->VM->getVM->getObjectHeap->createThreadTable->i->threadTable->entrySet->iterator->while->i->hasNext->e->i->next->if->dfn->continue->thread->e->getKey->try->thread->getCurrentPendingMonitor->catch->tty->println->return->finally->abstractOwnableSyncKlass->if->thread->getCurrentParkBlocker->sysDict->VM->getVM->getSystemDictionary->sysDict->getAbstractOwnableSynchronizerKlass->while->if->threads->owningThreadFromMonitor->else->if->if->waitingToLockBlocker->isA->threadOop->OopUtilities->abstractOwnableSynchronizerGetOwnerThread->if->OopUtilities->threadOopGetJavaThread->if->break->if->dfn->threadTable->new->Integer->put->else->if->dfn->break->else->if->break->else->printOneDeadlock->break->currentThread->getCurrentPendingMonitor->if->currentThread->getCurrentParkBlocker->switch->tty->println->break->tty->println->break->tty->println->break->tty->println
DeadlockDetector#createThreadTable()::: deadlock detector create thread table:::new->HashMap->for->cur->threads->first->cur->next
DeadlockDetector#dfn(JavaThread)::: deadlock detector dfn:::obj->threadTable->get->if->return->intValue->return
DeadlockDetector#dfn(Entry)::: deadlock detector dfn:::return->e->getValue->intValue
DeadlockDetector#printOneDeadlock(PrintStream, JavaThread, boolean)::: deadlock detector print one deadlock:::tty->println->tty->println->waitingToLockMonitor->waitingToLockBlocker->currentThread->do->tty->println->tty->currentThread->getThreadName->println->currentThread->getCurrentPendingMonitor->if->tty->waitingToLockMonitor->getAddress->print->obj->waitingToLockMonitor->object->oop->heap->newOop->if->tty->print->Oop->printOopAddressOn->tty->oop->getKlass->getName->asString->print->tty->print->else->tty->print->threads->owningThreadFromMonitor->tty->currentThread->getThreadName->print->else->if->currentThread->getCurrentParkBlocker->tty->print->Oop->printOopAddressOn->tty->waitingToLockBlocker->getKlass->getName->asString->print->threadOop->OopUtilities->abstractOwnableSynchronizerGetOwnerThread->OopUtilities->threadOopGetJavaThread->tty->print->tty->currentThread->getThreadName->print->while->currentThread->equals->tty->println->tty->println
ExternalVFrame#print()::: external frame print:::printOn
ExternalVFrame#printOn(PrintStream)::: external frame print on:::getFrame->printValueOn
ExternalVFrame#printValue()::: external frame print value:::printValueOn
ExternalVFrame#printValueOn(PrintStream)::: external frame print value on:::super->printOn
ExternalVFrame#mayBeImpreciseDbg()::: external frame may be imprecise dbg:::return
Frame#pcReturnOffset()::: frame pc return offset:::return
Frame#initialize(TypeDataBase)::: frame initialize:::ConstMethodType->db->lookupType->ConstMethodType->getSize->db->lookupIntConstant->intValue
Frame#bcpToBci(Address, ConstMethod)::: frame bcp to bci:::if->return->bci->bcp->minus->if->cm->getCodeSize->return->return->bcp->cm->getAddress->minus
Frame#bcpToBci(Address, Method)::: frame bcp to bci:::return->m->getConstMethod->bcpToBci
Frame#clone()::: frame clone:::
Frame#getPC():::pc: Returns the pc at which this frame will continue normally:::return
Frame#setPC(Address)::: frame set c:::
Frame#isDeoptimized()::: frame is deoptimized:::return
Frame#cb()::: frame cb:::return->VM->getVM->getCodeCache->getPC->findBlob
Frame#getSP()::: frame get p:::
Frame#getID()::: frame get d:::
Frame#getFP()::: frame get p:::
Frame#equals(Object):::testers -- platform dependent:::
Frame#isInterpretedFrame():::type testers:::return->VM->getVM->getInterpreter->getPC->contains
Frame#isJavaFrame()::: frame is java frame:::if->isInterpretedFrame->return->if->VM->getVM->isCore->if->isCompiledFrame->return->return
Frame#isEntryFrame():::Java frame called from C?:::return->VM->getVM->getStubRoutines->getPC->returnsToCallStub
Frame#isNativeFrame()::: frame is native frame:::if->VM->getVM->isCore->cb->VM->getVM->getCodeCache->getPC->findBlob->return->cb->isNativeMethod->else->return
Frame#isCompiledFrame()::: frame is compiled frame:::if->Assert->VM->getVM->isCore->that->cb->VM->getVM->getCodeCache->getPC->findBlob->return->cb->isJavaMethod
Frame#isRuntimeFrame()::: frame is runtime frame:::if->Assert->VM->getVM->isCore->that->cb->VM->getVM->getCodeCache->getPC->findBlob->if->return->if->cb->isRuntimeStub->return->else->return
Frame#isFirstFrame()::: frame is first frame:::return->isEntryFrame->entryFrameIsFirst->isJavaFrame->hasSenderPD
Frame#isFirstJavaFrame():::same for Java frame:::throw->new->RuntimeException
Frame#isSignalHandlerFrameDbg():::This is an addition for debugging purposes on platforms which       have the notion of signals.:::
Frame#getSignalNumberDbg():::If this is a signal handler frame (again, on a platform with a       notion of signals), get the signal number.:::
Frame#getSignalNameDbg():::If this is a signal handler frame (again, on a platform with a       notion of signals), get the name of the signal.:::
Frame#isInterpretedFrameValid():::performs sanity checks on interpreted frames.:::
Frame#shouldBeDeoptimized():::tells whether this frame is marked for deoptimization:::throw->new->RuntimeException
Frame#canBeDeoptimized():::tells whether this frame can be deoptimized:::throw->new->RuntimeException
Frame#sender(RegisterMap, CodeBlob):::returns the sending frame:::
Frame#sender(RegisterMap):::equivalent to sender(map, null):::return->sender
Frame#realSender(RegisterMap):::returns the sender, but skips conversion frames:::if->VM->getVM->isCore->result->sender->while->result->isRuntimeFrame->result->sender->return->else->return->sender
Frame#hasSenderPD():::Platform-dependent query indicating whether this frame has a       sender:::
Frame#addressOfStackSlot(int):::Returns the address of the requested "slot" on the stack:::return->getFP->VM->getVM->getAddressSize->addOffsetTo
Frame#getOopHandleAt(int):::Fetches the OopHandle at the requested slot:::return->addressOfStackSlot->getOopHandleAt
Frame#getIntAt(int):::Fetches the (Java) int at the requested slot:::return->addressOfStackSlot->getJIntAt
Frame#frameSize():::returns the frame size in stack slots:::
Frame#getLink():::Link (i.e., the pointer to the previous frame):::
Frame#getSenderPC():::Return address:::
Frame#getUnextendedSP():::The frame's original SP, before any extension by an interpreted       callee; used for packing debug info into vframeArray objects and       vframeArray lookup.:::
Frame#getSenderSP():::Returns the stack pointer of the calling frame:::
Frame#addressOfInterpreterFrameLocals()::: frame address of interpreter frame locals:::
Frame#addressOfInterpreterFrameLocal(int)::: frame address of interpreter frame local:::return->addressOfInterpreterFrameLocals->getAddressAt->VM->getVM->getAddressSize->addOffsetTo
Frame#getInterpreterFrameBCI():::Byte code index:::
Frame#addressOfInterpreterFrameExpressionStack()::: frame address of interpreter frame expression stack:::
Frame#getInterpreterFrameExpressionStackDirection()::: frame get interpreter frame expression stack direction:::
Frame#addressOfInterpreterFrameExpressionStackSlot(int)::: frame address of interpreter frame expression stack slot:::return->addressOfInterpreterFrameExpressionStack->VM->getVM->getAddressSize->addOffsetTo
Frame#addressOfInterpreterFrameTOS():::Top of expression stack:::
Frame#addressOfInterpreterFrameTOSAt(int):::Expression stack from top down:::
Frame#getInterpreterFrameExpressionStackSize():::FIXME: is this portable?:::return->getInterpreterFrameExpressionStackDirection->addressOfInterpreterFrameTOS->addressOfInterpreterFrameExpressionStack->minus
Frame#getInterpreterFrameSenderSP()::: frame get interpreter frame sender p:::
Frame#interpreterFrameMonitorBegin()::: frame interpreter frame monitor begin:::
Frame#interpreterFrameMonitorEnd()::: frame interpreter frame monitor end:::
Frame#interpreterFrameMonitorSize():::NOTE: this returns a size in BYTES in this system!:::
Frame#nextMonitorInInterpreterFrame(BasicObjectLock)::: frame next monitor in interpreter frame:::return->cur->address->interpreterFrameMonitorSize->addOffsetTo->new->BasicObjectLock
Frame#previousMonitorInInterpreterFrame(BasicObjectLock)::: frame previous monitor in interpreter frame:::return->cur->address->interpreterFrameMonitorSize->addOffsetTo->new->BasicObjectLock
Frame#addressOfInterpreterFrameMethod():::Current method:::
Frame#getInterpreterFrameMethod():::Current method:::return->Metadata->addressOfInterpreterFrameMethod->getAddressAt->instantiateWrapperFor
Frame#addressOfInterpreterFrameCPCache():::Constant pool cache:::
Frame#getInterpreterFrameCPCache():::Constant pool cache:::return->Metadata->addressOfInterpreterFrameCPCache->getAddressAt->instantiateWrapperFor
Frame#getEntryFrameCallWrapper()::: frame get entry frame call wrapper:::
Frame#entryFrameIsFirst():::Tells whether there is another chunk of Delta stack above:::return->getEntryFrameCallWrapper->getLastJavaSP
Frame#addressOfSavedOopResult()::: frame address of saved oop result:::
Frame#addressOfSavedReceiver()::: frame address of saved receiver:::
Frame#getSavedOopResult()::: frame get saved oop result:::return->addressOfSavedOopResult->getOopHandleAt
Frame#getSavedReceiver()::: frame get saved receiver:::return->addressOfSavedReceiver->getOopHandleAt
Frame#oopsInterpretedArgumentsDo(Symbol, boolean, AddressVisitor)::: frame oops interpreted arguments do:::finder->new->ArgumentOopFinder->finder->oopsDo
Frame#oopMapRegToLocation(VMReg, RegisterMap):::Conversion from an VMReg::Name to physical stack location:::stack0->VM->getVM->getVMRegImplInfo->getStack0->if->reg->lessThan->return->regMap->getLocation->else->spOffset->reg->reg2Stack->VM->getVM->getVMRegImplInfo->getStackSlotSize->return->getUnextendedSP->addOffsetTo
Frame#oopsDo(AddressVisitor, RegisterMap)::: frame oops do:::if->isInterpretedFrame->oopsInterpretedDo->else->if->isEntryFrame->oopsEntryDo->else->if->VM->getVM->getCodeCache->getPC->contains->oopsCodeBlobDo->else->Assert->that
Frame#printValue()::: frame print value:::printValueOn
Frame#printValueOn(PrintStream)::: frame print value on:::
Frame#print()::: frame print:::printOn
Frame#printOn(PrintStream)::: frame print on:::
Frame#interpreterFramePrintOn(PrintStream)::: frame interpreter frame print on:::
Frame.InterpVisitor#setAddressVisitor(AddressVisitor)::: interp visitor set address visitor:::
Frame.InterpVisitor#visitOopLocation(Address)::: interp visitor visit oop location:::addressVisitor->visitAddress
Frame.InterpVisitor#visitDerivedOopLocation(Address, Address)::: interp visitor visit derived oop location:::if->VM->getVM->isClientCompiler->Assert->that->else->if->VM->getVM->isServerCompiler->VM->getVM->useDerivedPointerTable->Assert->that
Frame.InterpVisitor#visitNarrowOopLocation(Address)::: interp visitor visit narrow oop location:::addressVisitor->visitCompOopAddress
Frame#oopsInterpretedDo(AddressVisitor, RegisterMap)::: frame oops interpreted do:::if->Assert->that->m->getInterpreterFrameMethod->bci->getInterpreterFrameBCI->if->VM->getVM->isDebugging->if->m->getCodeSize->return->if->Assert->m->isNative->m->getCodeSize->that->maxLocals->m->isNative->m->getSizeOfParameters->m->getMaxLocals->blk->m->getMaxStack->new->InterpreterFrameClosure->mask->m->getMaskFor->mask->iterateOop->if->map->getIncludeArgumentOops->m->isNative->call->BytecodeInvoke->atCheck->if->getInterpreterFrameExpressionStackSize->call->signature->call->isInvokestatic->oopsInterpretedArgumentsDo
Frame#oopsEntryDo(AddressVisitor, RegisterMap)::: frame oops entry do:::
Frame#oopsCodeBlobDo(AddressVisitor, RegisterMap)::: frame oops code blob do:::cb->VM->getVM->getCodeCache->getPC->findBlob->if->Assert->that->if->cb->getOopMaps->ImmutableOopMapSet->VM->getVM->isDebugging->oopsDo
InterpreterFrameClosure#offsetDo(int)::: interpreter frame closure offset do:::if->fr->getInterpreterFrameMethod->getMethodHolder->getName->asString->fr->getInterpreterFrameMethod->getName->asString->println->addr->if->fr->addressOfInterpreterFrameLocal->if->Assert->AddressOps->fr->getSP->gte->that->if->println->f->visitAddress->else->fr->addressOfInterpreterFrameExpressionStackSlot->if->fr->addressOfInterpreterFrameTOS->println->inStack->if->fr->getInterpreterFrameExpressionStackDirection->AddressOps->fr->addressOfInterpreterFrameTOS->lte->else->AddressOps->fr->addressOfInterpreterFrameTOS->gte->if->if->println->f->visitAddress->else->if->println
ArgumentOopFinder#set(int, int)::: argument oop finder set:::if->BasicType->getTObject->BasicType->getTArray->oopOffsetDo
ArgumentOopFinder#oopOffsetDo()::: argument oop finder oop offset do:::f->fr->addressOfInterpreterFrameTOSAt->visitAddress
ArgumentOopFinder#oopsDo()::: argument oop finder oops do:::if->oopOffsetDo->iterateParameters
InstanceConstructor#instantiateWrapperFor(Address):::Instantiate the most-precisely typed wrapper object available       for the type of the given Address:::
InstanceConstructor#newWrongTypeException(Address)::: instance constructor new wrong type exception:::message->cdbg->VM->getVM->getDebugger->getCDebugger->if->vtblPtr->addr->getAddressAt->lo->cdbg->loadObjectContainingPC->if->symbol->lo->closestSymbolToPC->if->symbol->getName->return->new->WrongTypeException
InterpretedVFrame#getMethod():::JVM state:::return->getFrame->getInterpreterFrameMethod
InterpretedVFrame#getLocals()::: interpreted frame get locals:::m->getMethod->length->m->getMaxLocals->if->m->isNative->m->getSizeOfParameters->result->new->StackValueCollection->oopMask->getMethod->getBCI->getMaskFor->for->i->return
InterpretedVFrame#getExpressions()::: interpreted frame get expressions:::length->getFrame->getInterpreterFrameExpressionStackSize->if->getMethod->isNative->nofLocals->getMethod->getMaxLocals->result->new->StackValueCollection->oopMask->getMethod->getBCI->getMaskFor->for->i->return
InterpretedVFrame#getMonitors():::Returns List<MonitorInfo>:::result->new->ArrayList<>->for->current->getFrame->interpreterFrameMonitorEnd->current->address->getFrame->interpreterFrameMonitorBegin->address->lessThan->getFrame->nextMonitorInInterpreterFrame->return
InterpretedVFrame#isInterpretedFrame():::Test operation:::return
InterpretedVFrame#getBCI():::Accessor for Byte Code Index (NOTE: access to BCP is not allowed       in this system; see Frame.java):::return->getFrame->getInterpreterFrameBCI
InterpretedVFrame#verify()::: interpreted frame verify:::
InterpretedVFrame#addressOfLocalAt(int)::: interpreted frame address of local at:::if->Assert->getFrame->isInterpretedFrame->that->return->fr->addressOfInterpreterFrameLocal
InterpretedVFrame#addressOfExpressionStackAt(int)::: interpreted frame address of expression stack at:::return->fr->addressOfInterpreterFrameExpressionStackSlot
JavaCallWrapper#initialize(TypeDataBase)::: java call wrapper initialize:::type->db->lookupType->anchorType->db->lookupType->type->getAddressField->anchorType->getAddressField->anchorType->getAddressField
JavaCallWrapper#getLastJavaSP()::: java call wrapper get last java p:::return->lastJavaSPField->addr->anchorField->getOffset->addOffsetTo->getValue
JavaCallWrapper#getLastJavaPC()::: java call wrapper get last java c:::return->lastJavaPCField->addr->anchorField->getOffset->addOffsetTo->getValue
JavaThread#initialize(TypeDataBase)::: java thread initialize:::type->db->lookupType->anchorType->db->lookupType->type->getAddressField->type->getOopField->type->getAddressField->anchorType->getAddressField->anchorType->getAddressField->type->getCIntegerField->type->getAddressField->type->getAddressField->type->getCIntegerField->type->getCIntegerField->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue
JavaThread#setThreadPDAccess(JavaThreadPDAccess)::: java thread set thread access:::
JavaThread#next()::: java thread next:::threadAddr->nextField->getValue->if->return->return->VM->getVM->getThreads->createJavaThreadWrapper
JavaThread#isJavaThread():::NOTE: for convenience, this differs in definition from the underlying VM:::return
JavaThread#isExiting()::: java thread is exiting:::return->getTerminated->isTerminated
JavaThread#isTerminated()::: java thread is terminated:::return->getTerminated->getTerminated
JavaThread#getAnchorField()::: java thread get anchor field:::return
JavaThread#getLastJavaSP():::Get the last Java stack pointer:::sp->lastJavaSPField->addr->anchorField->getOffset->addOffsetTo->getValue->return
JavaThread#getLastJavaPC()::: java thread get last java c:::pc->lastJavaPCField->addr->anchorField->getOffset->addOffsetTo->getValue->return
JavaThread#getLastJavaFP():::Abstract accessor to last Java frame pointer, implemented by       OS/CPU-specific JavaThread implementation:::return->access->getLastJavaFP
JavaThread#getBaseOfStackPointer():::A stack pointer older than any java frame stack pointer:::return->access->getBaseOfStackPointer
JavaThread#hasLastJavaFrame():::Tells whether the last Java frame is set:::return->getLastJavaSP
JavaThread#getLastFrame():::Accessing frames:::return->getLastFramePD->cookLastFrame
JavaThread#getLastFramePD():::Internal routine implemented by platform-dependent subclasses:::return->access->getLastFramePD
JavaThread#getLastJavaVFrame(RegisterMap):::Accessing frames:::if->Assert->that->f->getLastFrame->if->return->for->vf->VFrame->newVFrame->vf->sender->return
JavaThread#getLastJavaVFrameDbg():::This should only be used by a debugger:::regMap->newRegisterMap->f->getCurrentFrameGuess->if->return->imprecise->if->f->isInterpretedFrame->f->isInterpretedFrameValid->if->println->f->sender->vf->VFrame->newVFrame->if->if->println->return->return->vf->isJavaFrame->vf->javaSender
JavaThread#newRegisterMap(boolean):::In this system, a JavaThread is the top-level factory for a       RegisterMap, since the JavaThread implementation is already       platform-specific and RegisterMap is also necessarily       platform-specific:::return->access->newRegisterMap
JavaThread#getCurrentFrameGuess():::This is only designed to be used by the debugging system:::return->access->getCurrentFrameGuess
JavaThread#printThreadIDOn(PrintStream):::Also only intended for use by the debugging system:::access->printThreadIDOn
JavaThread#printThreadID()::: java thread print thread d:::printThreadIDOn
JavaThread#getThreadProxy()::: java thread get thread proxy:::return->access->getThreadProxy
JavaThread#getThreadState()::: java thread get thread state:::val->threadStateField->getValue->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->throw->new->RuntimeException
JavaThread#getOSThread()::: java thread get thread:::return->VMObjectFactory->osThreadField->getValue->newObject
JavaThread#getStackBase()::: java thread get stack base:::return->stackBaseField->getValue
JavaThread#getStackBaseValue()::: java thread get stack base value:::return->VM->getVM->getStackBase->getAddressValue
JavaThread#getStackSize()::: java thread get stack size:::return->stackSizeField->getValue
JavaThread#getTerminated()::: java thread get terminated:::return->terminatedField->getValue
JavaThread#getThreadObj():::Gets the Java-side thread object for this JavaThread:::obj->try->VM->getVM->getObjectHeap->threadObjField->getValue->newOop->catch->e->printStackTrace->finally->return
JavaThread#getThreadName():::Get the Java-side name of this thread:::threadObj->getThreadObj->if->return->return->OopUtilities->threadOopGetName
JavaThread#oopsDo(AddressVisitor)::: java thread oops do:::super->oopsDo->for->fst->new->StackFrameStream->fst->isDone->fst->next
JavaThread#isInStack(Address)::: java thread is in stack:::if->Assert->VM->getVM->isDebugging->that->sp->lastSPDbg->stackBase->getStackBase->if->return->return->stackBase->greaterThan->sp->lessThanOrEqual
JavaThread#isLockOwned(Address)::: java thread is lock owned:::stackBase->getStackBase->stackLimit->stackBase->getStackSize->addOffsetTo->return->stackBase->greaterThan->stackLimit->lessThanOrEqual
JavaThread#getCurrentParkBlocker()::: java thread get current park blocker:::threadObj->getThreadObj->if->return->OopUtilities->threadOopGetParkBlocker->return
JavaThread#printInfoOn(PrintStream)::: java thread print info on:::tty->getThreadState->toString->println->tmpFrame->getCurrentFrameGuess->if->sp->tmpFrame->getSP->maxSP->minSP->tmpMap->newRegisterMap->while->tmpFrame->isFirstFrame->tmpFrame->sender->if->tmpFrame->getSP->AddressOps->max->AddressOps->min->tty->println->else->tty->println->tty->getStackBase->println->tty->getLastJavaSP->println->tty->getLastJavaFP->println->tty->getLastJavaPC->println->access->printInfoOn
JavaThread#cookLastFrame(Frame)::: java thread cook last frame:::if->return->pc->fr->getPC->if->if->Assert->VM->getVM->isDebugging->that->return
JavaThread#lastSPDbg()::: java thread last dbg:::return->access->getLastSP
JavaThread#printThreadInfoOn(PrintStream)::: java thread print thread info on:::threadOop->this->getThreadObj->out->print->out->this->getThreadName->print->out->print->out->OopUtilities->threadOopGetTID->print->if->OopUtilities->threadOopGetDaemon->out->print->out->print->out->OopUtilities->threadOopGetPriority->print->out->print->out->this->getAddress->print->out->print->out->String->this->getOSThread->threadId->format->print->out->getOSThread->getThreadState->getPrintVal->print->out->print->if->this->getLastJavaSP->out->String->format->print->else->out->this->getLastJavaSP->andWithMask->print->out->println->out->print->out->OopUtilities->threadOopGetThreadStatusName->println->out->print->out->this->getThreadState->toString->toLowerCase->println
JavaThreadFactory#createJavaThreadWrapper(Address, TypeDataBase)::: java thread factory create java thread wrapper:::
JavaThreadPDAccess#getLastJavaFP(Address)::: java thread access get last java p:::
JavaThreadPDAccess#getLastJavaPC(Address)::: java thread access get last java c:::
JavaThreadPDAccess#getBaseOfStackPointer(Address)::: java thread access get base of stack pointer:::
JavaThreadPDAccess#getLastFramePD(JavaThread, Address)::: java thread access get last frame d:::
JavaThreadPDAccess#newRegisterMap(JavaThread, boolean)::: java thread access new register map:::
JavaThreadPDAccess#getCurrentFrameGuess(JavaThread, Address)::: java thread access get current frame guess:::
JavaThreadPDAccess#printThreadIDOn(Address, PrintStream)::: java thread access print thread on:::
JavaThreadPDAccess#printInfoOn(Address, PrintStream)::: java thread access print info on:::
JavaThreadPDAccess#getLastSP(Address)::: java thread access get last p:::
JavaThreadPDAccess#getThreadProxy(Address)::: java thread access get thread proxy:::
JavaThreadState#toString()::: java thread state to string:::return
JavaVFrame#getMethod():::JVM state:::
JavaVFrame#getBCI()::: java frame get i:::
JavaVFrame#getLocals()::: java frame get locals:::
JavaVFrame#getExpressions()::: java frame get expressions:::
JavaVFrame#getMonitors()::: java frame get monitors:::
JavaVFrame#isJavaFrame():::Test operation:::return
JavaVFrame#printLockedObjectClassName(PrintStream, OopHandle, String)::: java frame print locked object class name:::if->hobj->asLongValue->tty->hobj->asLongValue->format->klass->Oop->getKlassForOopHandle->klassName->klass->getName->asString->tty->print->if->klassName->equals->obj->VM->getVM->getObjectHeap->newOop->java_lang_Class->asExternalName->tty->print->tty->klassName->replace->println
JavaVFrame#identifyLockState(MonitorInfo, String)::: java frame identify lock state:::mark->monitor->owner->new->Mark->if->mark->hasMonitor->mark->monitor->thread->getCurrentPendingMonitor->equals->mark->monitor->isEntered->return->return
JavaVFrame#printLockInfo(PrintStream, int):::Printing used during stack dumps:::if->if->getMethod->getName->asString->equals->getMethod->getMethodHolder->getName->asString->equals->waitState->locs->getLocals->if->locs->isEmpty->sv->locs->get->if->sv->getType->BasicType->getTObject->o->sv->getObject->printLockedObjectClassName->else->tty->println->else->if->thread->getCurrentParkBlocker->obj->thread->getCurrentParkBlocker->k->obj->getKlass->tty->obj->getHandle->asLongValue->k->getName->asString->format->tty->println->mons->getMonitors->if->mons->isEmpty->foundFirstMonitor->for->index->mons->size
JavaVFrame#print()::: java frame print:::printOn
JavaVFrame#printOn(PrintStream)::: java frame print on:::super->printOn->tty->print->getMethod->printValueOn->tty->println->tty->getBCI->println->getLocals->printStackValuesOn->getExpressions->printStackValuesOn
JavaVFrame#printActivation(int)::: java frame print activation:::printActivationOn
JavaVFrame#printActivationOn(PrintStream, int)::: java frame print activation on:::tty->print->printValueOn->tty->println->if->VM->getVM->wizardMode->printOn->tty->println
JavaVFrame#verify():::Verification operations:::
JavaVFrame#equals(Object)::: java frame equals:::if->return->other->if->getMethod->other->getMethod->equals->return->if->getBCI->other->getBCI->return->if->getFrame->other->getFrame->equals->return->return
JavaVFrame#hashCode()::: java frame hash code:::return->getMethod->hashCode->getBCI->getFrame->hashCode
JavaVFrame#structuralCompare(JavaVFrame):::Structural compare:::if->getMethod->other->getMethod->equals->return->if->getBCI->other->getBCI->return->locs->getLocals->otherLocs->other->getLocals->if->Assert->locs->size->otherLocs->size->that->for->i->locs->size->exprs->getExpressions->otherExprs->other->getExpressions->if->Assert->exprs->size->otherExprs->size->that->for->i->exprs->size->return
JavaVFrame#printStackValuesOn(PrintStream, String, StackValueCollection)::: java frame print stack values on:::if->values->isEmpty->return->tty->println->for->index->values->size
JNIHandleBlock#initialize(TypeDataBase)::: handle block initialize:::type->db->lookupType->type->getField->type->getCIntegerField->type->getAddressField->db->lookupIntConstant->intValue
JNIHandleBlock#next()::: handle block next:::handleAddr->nextField->getValue->if->return->if->top->return->return->new->JNIHandleBlock
JNIHandleBlock#top()::: handle block top:::return->topField->getValue
JNIHandleBlock#oopsDo(AddressVisitor)::: handle block oops do:::for->i->top->n->next->if->n->oopsDo
JNIHandleBlock#getOopHandle(int)::: handle block get oop handle:::oopAddr->getOopHandleAddress->if->return->oopAddr->getOopHandleAt->return
JNIHandleBlock#blockContainingHandle(Address):::Debugging routine only:::cur->while->if->indexOfHandle->return->cur->next->return
JNIHandleBlock#indexOfHandle(Address):::Debugging routine: returns the index (0..top() - 1) of the       handle in this block, or -1 if the handle was not contained in       this block:::for->i->top->return
JNIHandleBlock#toString()::: handle block to string:::handleBase->addr->handlesField->getOffset->addOffsetTo->handleEnd->addr->handlesField->getOffset->top->VM->getVM->getOopSize->addOffsetTo->return
JNIHandleBlock#getOopHandleAddress(int):::Only returns addresses of valid OopHandles:::if->Assert->top->that->oopAddr->addr->handlesField->getOffset->VM->getVM->getOopSize->addOffsetTo->handle->oopAddr->getOopHandleAt->if->VM->getVM->getUniverse->isInReserved->return->else->return
JNIHandles#initialize(TypeDataBase)::: handles initialize:::type->db->lookupType->type->getAddressField->type->getAddressField
JNIHandles#globalHandles()::: handles global handles:::handleAddr->globalHandlesField->getValue->if->return->return->new->OopStorage
JNIHandles#weakGlobalHandles()::: handles weak global handles:::handleAddr->weakGlobalHandlesField->getValue->if->return->return->new->OopStorage
JvmtiAgentThread#isJavaThread()::: jvmti agent thread is java thread:::return
JvmtiAgentThread#isJvmtiAgentThread()::: jvmti agent thread is jvmti agent thread:::return
MonitorInfo#owner()::: monitor info owner:::Assert->that->return
MonitorInfo#ownerKlass()::: monitor info owner klass:::Assert->that->return
MonitorInfo#lock()::: monitor info lock:::return
MonitorInfo#eliminated()::: monitor info eliminated:::return
MonitorInfo#ownerIsScalarReplaced()::: monitor info owner is scalar replaced:::return
NativeSignatureIterator#doBool()::: native signature iterator do bool:::passInt
NativeSignatureIterator#doChar()::: native signature iterator do char:::passInt
NativeSignatureIterator#doFloat()::: native signature iterator do float:::if->VM->getVM->isLP64->passFloat->else->passInt
NativeSignatureIterator#doDouble()::: native signature iterator do double:::if->VM->getVM->isLP64->passDouble->else->passDouble
NativeSignatureIterator#doByte()::: native signature iterator do byte:::passInt
NativeSignatureIterator#doShort()::: native signature iterator do short:::passInt
NativeSignatureIterator#doInt()::: native signature iterator do int:::passInt
NativeSignatureIterator#doLong()::: native signature iterator do long:::if->VM->getVM->isLP64->passLong->else->passLong
NativeSignatureIterator#doVoid()::: native signature iterator do void:::throw->new->RuntimeException
NativeSignatureIterator#doObject(int, int)::: native signature iterator do object:::passObject
NativeSignatureIterator#doArray(int, int)::: native signature iterator do array:::passObject
NativeSignatureIterator#method()::: native signature iterator method:::return
NativeSignatureIterator#offset()::: native signature iterator offset:::return
NativeSignatureIterator#jniOffset()::: native signature iterator jni offset:::return
NativeSignatureIterator#isStatic()::: native signature iterator is static:::return->method->isStatic
NativeSignatureIterator#passInt()::: native signature iterator pass int:::
NativeSignatureIterator#passLong()::: native signature iterator pass long:::
NativeSignatureIterator#passObject()::: native signature iterator pass object:::
NativeSignatureIterator#passFloat()::: native signature iterator pass float:::
NativeSignatureIterator#passDouble()::: native signature iterator pass double:::
NativeSignatureIterator#iterate()::: native signature iterator iterate:::if->isStatic->passObject->iterateParameters
ObjectMonitor#initialize(TypeDataBase)::: object monitor initialize:::VM->getVM->getObjectHeap->type->db->lookupType->f->type->getField->f->getOffset->type->getField->f->getOffset->type->getField->f->getOffset->type->getField->f->getOffset->type->getJIntField->type->getJIntField->type->getCIntegerField
ObjectMonitor#header()::: object monitor header:::return->addr->addOffsetTo->new->Mark
ObjectMonitor#isEntered(sun.jvm.hotspot.runtime.Thread)::: object monitor is entered:::o->owner->if->current->threadObjectAddress->equals->current->isLockOwned->return->return
ObjectMonitor#owner()::: object monitor owner:::return->addr->getAddressAt
ObjectMonitor#waiters()::: object monitor waiters:::return->waitersField->getValue
ObjectMonitor#freeNext()::: object monitor free next:::return->addr->getAddressAt
ObjectMonitor#count()::: object monitor count:::return->countField->getValue
ObjectMonitor#recursions()::: object monitor recursions:::return->recursionsField->getValue
ObjectMonitor#object()::: object monitor object:::return->addr->getOopHandleAt
ObjectMonitor#contentions()::: object monitor contentions:::return->count
ObjectSynchronizer#initialize(TypeDataBase)::: object synchronizer initialize:::type->try->db->lookupType->type->getAddressField->getValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->catch->finally->db->lookupType->type->getSize->if->needLines
ObjectSynchronizer#identityHashValueFor(Oop)::: object synchronizer identity hash value for:::mark->obj->getMark->if->mark->isUnlocked->return->mark->hash->else->if->mark->hasMonitor->monitor->mark->monitor->temp->monitor->header->return->temp->hash->else->if->Assert->VM->getVM->isDebugging->that->if->mark->hasDisplacedMarkHelper->temp->mark->displacedMarkHelper->return->temp->hash->return
ObjectSynchronizer#objectMonitorIterator()::: object synchronizer object monitor iterator:::if->return->new->ObjectMonitorIterator->else->return
ObjectSynchronizer.ObjectMonitorIterator#hasNext()::: object monitor iterator has next:::return->block->freeNext
ObjectSynchronizer.ObjectMonitorIterator#next()::: object monitor iterator next:::addr->if->block->freeNext->if->throw->new->NoSuchElementException->new->ObjectMonitor->blockAddr->addOffsetTo->return->new->ObjectMonitor
ObjectSynchronizer.ObjectMonitorIterator#remove()::: object monitor iterator remove:::throw->new->UnsupportedOperationException
OSThread#initialize(TypeDataBase)::: thread initialize:::type->db->lookupType->type->getJIntField->type->getField->type->getCIntegerField->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue
OSThread#interrupted()::: thread interrupted:::return->interruptedField->getValue
OSThread#threadId()::: thread thread id:::return->threadIdField->getJInt
OSThread#getThreadState()::: thread get thread state:::val->threadStateField->getValue->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->throw->new->RuntimeException
PerfDataEntry#initialize(TypeDataBase)::: perf data entry initialize:::type->db->lookupType->type->getJIntField->type->getJIntField->type->getJIntField->type->getJByteField->type->getJByteField->type->getJByteField->type->getJByteField->type->getJIntField
PerfDataEntry#entryLength()::: perf data entry entry length:::return->entryLengthField->getValue
PerfDataEntry#nameOffset()::: perf data entry name offset:::return->nameOffsetField->getValue
PerfDataEntry#vectorLength()::: perf data entry vector length:::return->vectorLengthField->getValue
PerfDataEntry#dataType()::: perf data entry data type:::ch->dataTypeField->getValue->return->BasicType->charToType
PerfDataEntry#flags()::: perf data entry flags:::return->flagsField->getValue
PerfDataEntry#supported()::: perf data entry supported:::return->flags
PerfDataEntry.PerfDataUnits#initialize(TypeDataBase)::: perf data units initialize:::db->lookupIntConstant->db->lookupIntConstant->db->lookupIntConstant->db->lookupIntConstant->db->lookupIntConstant->db->lookupIntConstant
PerfDataEntry#dataUnits()::: perf data entry data units:::return->dataUnitsField->getValue
PerfDataEntry#dataVariability()::: perf data entry data variability:::return->dataVariabilityField->getValue
PerfDataEntry#dataOffset()::: perf data entry data offset:::return->dataOffsetField->getValue
PerfDataEntry#name()::: perf data entry name:::off->nameOffset->return->CStringUtilities->addr->addOffsetTo->getString
PerfDataEntry#booleanValue()::: perf data entry boolean value:::if->Assert->vectorLength->dataType->BasicType->getTBoolean->that->return->addr->dataOffset->getJBooleanAt
PerfDataEntry#charValue()::: perf data entry char value:::if->Assert->vectorLength->dataType->BasicType->getTChar->that->return->addr->dataOffset->getJCharAt
PerfDataEntry#byteValue()::: perf data entry byte value:::if->Assert->vectorLength->dataType->BasicType->getTByte->that->return->addr->dataOffset->getJByteAt
PerfDataEntry#shortValue()::: perf data entry short value:::if->Assert->vectorLength->dataType->BasicType->getTShort->that->return->addr->dataOffset->getJShortAt
PerfDataEntry#intValue()::: perf data entry int value:::if->Assert->vectorLength->dataType->BasicType->getTInt->that->return->addr->dataOffset->getJIntAt
PerfDataEntry#longValue()::: perf data entry long value:::if->Assert->vectorLength->dataType->BasicType->getTLong->that->return->addr->dataOffset->getJLongAt
PerfDataEntry#floatValue()::: perf data entry float value:::if->Assert->vectorLength->dataType->BasicType->getTFloat->that->return->addr->dataOffset->getJFloatAt
PerfDataEntry#doubleValue()::: perf data entry double value:::if->Assert->vectorLength->dataType->BasicType->getTDouble->that->return->addr->dataOffset->getJDoubleAt
PerfDataEntry#booleanArrayValue()::: perf data entry boolean array value:::len->vectorLength->if->Assert->dataType->BasicType->getTBoolean->that->res->new->booleanArr->off->dataOffset->size->getHeap->getBooleanSize->for->i->return
PerfDataEntry#charArrayValue()::: perf data entry char array value:::len->vectorLength->if->Assert->dataType->BasicType->getTChar->that->res->new->charArr->off->dataOffset->size->getHeap->getCharSize->for->i->return
PerfDataEntry#byteArrayValue()::: perf data entry byte array value:::len->vectorLength->if->Assert->dataType->BasicType->getTByte->that->res->new->byteArr->off->dataOffset->size->getHeap->getByteSize->for->i->return
PerfDataEntry#shortArrayValue()::: perf data entry short array value:::len->vectorLength->if->Assert->dataType->BasicType->getTShort->that->res->new->shortArr->off->dataOffset->size->getHeap->getShortSize->for->i->return
PerfDataEntry#intArrayValue()::: perf data entry int array value:::len->vectorLength->if->Assert->dataType->BasicType->getTInt->that->res->new->intArr->off->dataOffset->size->getHeap->getIntSize->for->i->return
PerfDataEntry#longArrayValue()::: perf data entry long array value:::len->vectorLength->if->Assert->dataType->BasicType->getTLong->that->res->new->longArr->off->dataOffset->size->getHeap->getLongSize->for->i->return
PerfDataEntry#floatArrayValue()::: perf data entry float array value:::len->vectorLength->if->Assert->dataType->BasicType->getTFloat->that->res->new->floatArr->off->dataOffset->size->getHeap->getFloatSize->for->i->return
PerfDataEntry#doubleArrayValue()::: perf data entry double array value:::len->vectorLength->if->Assert->dataType->BasicType->getTDouble->that->res->new->doubleArr->off->dataOffset->size->getHeap->getDoubleSize->for->i->return
PerfDataEntry#valueAsString()::: perf data entry value as string:::dataType->dataType->len->vectorLength->str->if->if->BasicType->getTBoolean->Boolean->booleanValue->toString->else->if->BasicType->getTChar->Character->charValue->toString->else->if->BasicType->getTByte->Byte->byteValue->toString->else->if->BasicType->getTShort->Short->shortValue->toString->else->if->BasicType->getTInt->Integer->intValue->toString->else->if->BasicType->getTLong->Long->longValue->toString->else->if->BasicType->getTFloat->Float->floatValue->toString->else->if->BasicType->getTDouble->Double->doubleValue->toString->else->else->if->BasicType->getTBoolean->res->booleanArrayValue->buf->new->StringBuffer->buf->append->for->i->buf->append->buf->toString->else->if->BasicType->getTChar->charArrayValue->new->String->else->if->BasicType->getTByte->CStringUtilities->addr->dataOffset->addOffsetTo->getString->else->if->BasicType->getTShort->res->shortArrayValue->buf->new->StringBuffer->buf->append->for->i->buf->append->buf->toString->else->if->BasicType->getTInt->res->intArrayValue->buf->new->StringBuffer->buf->append->for->i->buf->append->buf->toString->else->if->BasicType->getTLong->res->longArrayValue->buf->new->StringBuffer->buf->append->for->i->buf->append->buf->toString->else->if->BasicType->getTFloat->res->floatArrayValue->buf->new->StringBuffer->buf->append->for->i->buf->append->buf->toString->else->if->BasicType->getTDouble->res->doubleArrayValue->buf->new->StringBuffer->buf->append->for->i->buf->append->buf->toString->else->dataUnitsValue->dataUnits->if->else->if->else->if->else->if->return
PerfDataEntry#getHeap()::: perf data entry get heap:::return->VM->getVM->getObjectHeap
PerfDataPrologue#initialize(TypeDataBase)::: perf data prologue initialize:::type->db->lookupType->type->getJIntField->type->getJByteField->type->getJByteField->type->getJByteField->type->getJByteField->type->getJIntField->type->getJIntField->type->getJLongField->type->getJIntField->type->getJIntField
PerfDataPrologue#magic()::: perf data prologue magic:::return->magicField->getValue
PerfDataPrologue#byteOrder()::: perf data prologue byte order:::return->byteOrderField->getValue
PerfDataPrologue#majorVersion()::: perf data prologue major version:::return->majorVersionField->getValue
PerfDataPrologue#accessible()::: perf data prologue accessible:::return->accessibleField->getValue
PerfDataPrologue#used()::: perf data prologue used:::return->usedField->getValue
PerfDataPrologue#overflow()::: perf data prologue overflow:::return->overflowField->getValue
PerfDataPrologue#modTimeStamp()::: perf data prologue mod time stamp:::return->modTimeStampField->getValue
PerfDataPrologue#entryOffset()::: perf data prologue entry offset:::return->entryOffsetField->getValue
PerfDataPrologue#numEntries()::: perf data prologue num entries:::return->numEntriesField->getValue
PerfMemory#initialize(TypeDataBase)::: perf memory initialize:::type->db->lookupType->type->getAddressField->type->getAddressField->type->getAddressField->type->getCIntegerField->type->getAddressField->type->getCIntegerField
PerfMemory#start()::: perf memory start:::return->startField->getValue
PerfMemory#end()::: perf memory end:::return->endField->getValue
PerfMemory#top()::: perf memory top:::return->topField->getValue
PerfMemory#capacity()::: perf memory capacity:::return->capacityField->getValue
PerfMemory#initialized()::: perf memory initialized:::return->initializedField->getValue
PerfMemory#prologue()::: perf memory prologue:::return->VMObjectFactory->prologueField->getValue->newObject
PerfMemory#contains(Address)::: perf memory contains:::return->start->addr->start->minus->end->minus
PerfMemory.PerfDataEntryVisitor#visit(PerfDataEntry)::: perf data entry visitor visit:::
PerfMemory#iterate(PerfDataEntryVisitor)::: perf memory iterate:::header->prologue->off->header->entryOffset->num->header->numEntries->addr->header->getAddress->for->i
RegisterMap#initialize(TypeDataBase)::: register map initialize:::db->lookupIntConstant->intValue->db->lookupType->getSize
RegisterMap#clone()::: register map clone:::
RegisterMap#copy()::: register map copy:::return->clone
RegisterMap#clear()::: register map clear:::setIncludeArgumentOops->if->VM->getVM->isCore->if->for->i->clearPD->else->initializePD
RegisterMap#getLocation(VMReg)::: register map get location:::i->reg->getValue->index->if->Assert->that->Assert->that->if->return->else->return->getLocationPD
RegisterMap#setLocation(VMReg, Address)::: register map set location:::i->reg->getValue->index->if->Assert->that->Assert->that->Assert->that
RegisterMap#getIncludeArgumentOops()::: register map get include argument oops:::return
RegisterMap#setIncludeArgumentOops(boolean)::: register map set include argument oops:::
RegisterMap#getThread()::: register map get thread:::return
RegisterMap#getUpdateMap()::: register map get update map:::return
RegisterMap#print()::: register map print:::printOn
RegisterMap#printOn(PrintStream)::: register map print on:::tty->println->for->i
RegisterMap#clearPD():::Platform-dependent clear() functionality:::
RegisterMap#initializePD():::Platform-dependent initialize() functionality:::
RegisterMap#initializeFromPD(RegisterMap):::Platform-dependent initializeFrom() functionality:::
RegisterMap#getLocationPD(VMReg):::Platform-dependent getLocation() functionality:::
ResultTypeFinder#set(int, int)::: result type finder set:::if->isReturnType
ServiceThread#isJavaThread()::: service thread is java thread:::return
ServiceThread#isHiddenFromExternalView()::: service thread is hidden from external view:::return
ServiceThread#isServiceThread()::: service thread is service thread:::return
SignatureConverter#doBool()::: signature converter do bool:::appendComma->buf->append
SignatureConverter#doChar()::: signature converter do char:::appendComma->buf->append
SignatureConverter#doFloat()::: signature converter do float:::appendComma->buf->append
SignatureConverter#doDouble()::: signature converter do double:::appendComma->buf->append
SignatureConverter#doByte()::: signature converter do byte:::appendComma->buf->append
SignatureConverter#doShort()::: signature converter do short:::appendComma->buf->append
SignatureConverter#doInt()::: signature converter do int:::appendComma->buf->append
SignatureConverter#doLong()::: signature converter do long:::appendComma->buf->append
SignatureConverter#doVoid()::: signature converter do void:::if->isReturnType->appendComma->buf->append->else->throw->new->RuntimeException
SignatureConverter#doObject(int, int)::: signature converter do object:::doObject
SignatureConverter#doArray(int, int)::: signature converter do array:::appendComma->inner->arrayInnerBegin->switch->_signature->getByteAt->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->doObject->break->break->for->i
SignatureConverter#appendComma()::: signature converter append comma:::if->buf->append
SignatureConverter#doObject(int, int, boolean)::: signature converter do object:::if->appendComma->appendSubstring
SignatureConverter#appendSubstring(int, int)::: signature converter append substring:::for->i
SignatureConverter#arrayInnerBegin(int)::: signature converter array inner begin:::while->_signature->getByteAt->return
SignatureInfo#lazyIterate()::: signature info lazy iterate:::if->iterate
SignatureInfo#set(int, int)::: signature info set:::
SignatureInfo#doBool()::: signature info do bool:::BasicTypeSize->getTBooleanSize->BasicType->getTBoolean->set
SignatureInfo#doChar()::: signature info do char:::BasicTypeSize->getTCharSize->BasicType->getTChar->set
SignatureInfo#doFloat()::: signature info do float:::BasicTypeSize->getTFloatSize->BasicType->getTFloat->set
SignatureInfo#doDouble()::: signature info do double:::BasicTypeSize->getTDoubleSize->BasicType->getTDouble->set
SignatureInfo#doByte()::: signature info do byte:::BasicTypeSize->getTByteSize->BasicType->getTByte->set
SignatureInfo#doShort()::: signature info do short:::BasicTypeSize->getTShortSize->BasicType->getTShort->set
SignatureInfo#doInt()::: signature info do int:::BasicTypeSize->getTIntSize->BasicType->getTInt->set
SignatureInfo#doLong()::: signature info do long:::BasicTypeSize->getTLongSize->BasicType->getTLong->set
SignatureInfo#doVoid()::: signature info do void:::BasicTypeSize->getTVoidSize->BasicType->getTVoid->set
SignatureInfo#doObject(int, int)::: signature info do object:::BasicTypeSize->getTObjectSize->BasicType->getTObject->set
SignatureInfo#doArray(int, int)::: signature info do array:::BasicTypeSize->getTArraySize->BasicType->getTArray->set
SignatureInfo#size()::: signature info size:::lazyIterate->return
SignatureInfo#type()::: signature info type:::lazyIterate->return
SignatureIterator#expect(char)::: signature iterator expect:::if->_signature->getByteAt->throw->new->RuntimeException
SignatureIterator#skipOptionalSize()::: signature iterator skip optional size:::c->_signature->getByteAt->while->_signature->getByteAt
SignatureIterator#parseType()::: signature iterator parse type:::switch->_signature->getByteAt->doByte->return->BasicTypeSize->getTByteSize->doChar->return->BasicTypeSize->getTCharSize->doDouble->return->BasicTypeSize->getTDoubleSize->doFloat->return->BasicTypeSize->getTFloatSize->doInt->return->BasicTypeSize->getTIntSize->doLong->return->BasicTypeSize->getTLongSize->doShort->return->BasicTypeSize->getTShortSize->doBool->return->BasicTypeSize->getTBooleanSize->if->isReturnType->throw->new->RuntimeException->doVoid->return->BasicTypeSize->getTVoidSize->begin->while->_signature->getByteAt->doObject->return->BasicTypeSize->getTObjectSize->begin->skipOptionalSize->while->_signature->getByteAt->skipOptionalSize->if->_signature->getByteAt->while->_signature->getByteAt->else->doArray->return->BasicTypeSize->getTArraySize->throw->_signature->getByteAt->_signature->asString->new->RuntimeException
SignatureIterator#checkSignatureEnd()::: signature iterator check signature end:::if->_signature->getLength->println->_signature->printValueOn->println
SignatureIterator#dispatchField()::: signature iterator dispatch field:::parseType->checkSignatureEnd
SignatureIterator#iterateParameters()::: signature iterator iterate parameters:::expect->while->_signature->getByteAt->parseType->expect
SignatureIterator#iterateReturntype()::: signature iterator iterate returntype:::expect->while->_signature->getByteAt->expect->parseType->checkSignatureEnd
SignatureIterator#iterate()::: signature iterator iterate:::expect->while->_signature->getByteAt->parseType->expect->parseType->checkSignatureEnd
SignatureIterator#parameterIndex()::: signature iterator parameter index:::return
SignatureIterator#isReturnType()::: signature iterator is return type:::return->parameterIndex
SignatureIterator#doBool()::: signature iterator do bool:::
SignatureIterator#doChar()::: signature iterator do char:::
SignatureIterator#doFloat()::: signature iterator do float:::
SignatureIterator#doDouble()::: signature iterator do double:::
SignatureIterator#doByte()::: signature iterator do byte:::
SignatureIterator#doShort()::: signature iterator do short:::
SignatureIterator#doInt()::: signature iterator do int:::
SignatureIterator#doLong()::: signature iterator do long:::
SignatureIterator#doVoid()::: signature iterator do void:::
SignatureIterator#doObject(int, int)::: signature iterator do object:::
SignatureIterator#doArray(int, int)::: signature iterator do array:::
StackFrameInfo#getMethod()::: stack frame info get method:::return
StackFrameInfo#getBCI()::: stack frame info get i:::return
StackFrameStream#isDone():::Iteration:::if->return->else->if->return->fr->isFirstFrame->return
StackFrameStream#next()::: stack frame stream next:::if->fr->sender
StackFrameStream#getCurrent():::Query:::return
StackFrameStream#getRegisterMap()::: stack frame stream get register map:::return
StackValue#getType():::This returns one of the "enum" values in BasicType.java:::return
StackValue#getObject()::: stack value get object:::if->Assert->BasicType->getTObject->that->return
StackValue#objIsScalarReplaced()::: stack value obj is scalar replaced:::if->Assert->BasicType->getTObject->that->return
StackValue#getInteger()::: stack value get integer:::if->Assert->BasicType->getTInt->that->return
StackValue#equals(Object)::: stack value equals:::if->return->if->arg->getClass->getClass->equals->return->sv->if->return->if->BasicType->getTObject->return->handleValue->equals->else->if->BasicType->getTInt->return->else->return
StackValue#hashCode()::: stack value hash code:::if->BasicType->getTObject->return->handleValue->hashCode->else->return
StackValue#print()::: stack value print:::printOn
StackValue#printOn(PrintStream)::: stack value print on:::if->BasicType->getTInt->tty->print->else->if->BasicType->getTObject->tty->print->else->if->BasicType->getTConflict->tty->print->else->throw->new->RuntimeException
StackValueCollection#add(StackValue)::: stack value collection add:::list->add
StackValueCollection#size()::: stack value collection size:::return->list->size
StackValueCollection#isEmpty()::: stack value collection is empty:::return->size
StackValueCollection#get(int)::: stack value collection get:::return->list->get
StackValueCollection#booleanAt(int)::: stack value collection boolean at:::return->get->getInteger
StackValueCollection#byteAt(int)::: stack value collection byte at:::return->get->getInteger
StackValueCollection#charAt(int)::: stack value collection char at:::return->get->getInteger
StackValueCollection#shortAt(int)::: stack value collection short at:::return->get->getInteger
StackValueCollection#intAt(int)::: stack value collection int at:::return->get->getInteger
StackValueCollection#longAt(int)::: stack value collection long at:::return->VM->getVM->get->getInteger->get->getInteger->buildLongFromIntsPD
StackValueCollection#oopHandleAt(int)::: stack value collection oop handle at:::sv->get->if->sv->getType->BasicType->getTConflict->throw->new->WrongTypeException->return->sv->getObject
StackValueCollection#floatAt(int)::: stack value collection float at:::return->Float->intAt->intBitsToFloat
StackValueCollection#doubleAt(int)::: stack value collection double at:::return->Double->longAt->longBitsToDouble
StaticBaseConstructor#instantiateWrapperFor(Address):::Instantiate a wrapper using staticType:::if->return->return->VMObjectFactory->newObject
StubRoutines#initialize(TypeDataBase)::: stub routines initialize:::type->db->lookupType->type->getAddressField
StubRoutines#returnsToCallStub(Address)::: stub routines returns to call stub:::addr->callStubReturnAddressField->getValue->if->return->else->return->addr->equals
Thread#initialize(TypeDataBase)::: thread initialize:::type->db->lookupType->type->getCIntegerField->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->type->getField->getOffset->type->getAddressField->type->getAddressField->type->getAddressField->type->getJLongField
Thread#suspendFlags()::: thread suspend flags:::return->suspendFlagsField->getValue
Thread#isExternalSuspend()::: thread is external suspend:::return->suspendFlags
Thread#isExtSuspended()::: thread is ext suspended:::return->suspendFlags
Thread#isBeingExtSuspended()::: thread is being ext suspended:::return->isExtSuspended->isExternalSuspend
Thread#isAnySuspended()::: thread is any suspended:::return->isExtSuspended
Thread#hasAsyncException()::: thread has async exception:::return->suspendFlags
Thread#tlab()::: thread tlab:::return->addr->addOffsetTo->new->ThreadLocalAllocBuffer
Thread#activeHandles()::: thread active handles:::a->activeHandlesField->getAddress->if->return->return->new->JNIHandleBlock
Thread#allocatedBytes()::: thread allocated bytes:::return->allocatedBytesField->getValue
Thread#isVMThread()::: thread is thread:::return
Thread#isJavaThread()::: thread is java thread:::return
Thread#isCompilerThread()::: thread is compiler thread:::return
Thread#isCodeCacheSweeperThread()::: thread is code cache sweeper thread:::return
Thread#isHiddenFromExternalView()::: thread is hidden from external view:::return
Thread#isJvmtiAgentThread()::: thread is jvmti agent thread:::return
Thread#isWatcherThread()::: thread is watcher thread:::return
Thread#isConcurrentMarkSweepThread()::: thread is concurrent mark sweep thread:::return
Thread#isServiceThread()::: thread is service thread:::return
Thread#oopsDo(AddressVisitor):::Memory operations:::
Thread#getCurrentPendingMonitor()::: thread get current pending monitor:::monitorAddr->currentPendingMonitorField->getValue->if->return->return->new->ObjectMonitor
Thread#getCurrentWaitingMonitor()::: thread get current waiting monitor:::monitorAddr->currentWaitingMonitorField->getValue->if->return->return->new->ObjectMonitor
Thread#isLockOwned(Address)::: thread is lock owned:::if->isInStack->return->return
Thread#isInStack(Address)::: thread is in stack:::return
Thread#threadObjectAddress():::Assistance for ObjectMonitor implementation:::return
ThreadLocalAllocBuffer#initialize(TypeDataBase)::: thread local alloc buffer initialize:::type->db->lookupType->type->getAddressField->type->getAddressField->type->getAddressField->type->getCIntegerField
ThreadLocalAllocBuffer#start()::: thread local alloc buffer start:::return->startField->getValue
ThreadLocalAllocBuffer#end()::: thread local alloc buffer end:::return->endField->getValue
ThreadLocalAllocBuffer#top()::: thread local alloc buffer top:::return->topField->getValue
ThreadLocalAllocBuffer#hardEnd()::: thread local alloc buffer hard end:::return->end->alignmentReserve->addOffsetTo
ThreadLocalAllocBuffer#alignmentReserve()::: thread local alloc buffer alignment reserve:::return->Oop->endReserve->alignObjectSize
ThreadLocalAllocBuffer#endReserve()::: thread local alloc buffer end reserve:::minFillerArraySize->Array->baseOffsetInBytes->reserveForAllocationPrefetch->VM->getVM->getReserveForAllocationPrefetch->heapWordSize->VM->getVM->getHeapWordSize->return->Math->max
ThreadLocalAllocBuffer#startAsOopHandle():::Support for iteration over heap -- not sure how this will       interact with GC in reflective system, but necessary for the       debugging mechanism:::return->startField->getOopHandle
ThreadLocalAllocBuffer#nextOopHandle(OopHandle, long):::Support for iteration over heap -- not sure how this will       interact with GC in reflective system, but necessary for the       debugging mechanism:::return->handle->addOffsetToAsOopHandle
ThreadLocalAllocBuffer#print()::: thread local alloc buffer print:::printOn
ThreadLocalAllocBuffer#contains(Address)::: thread local alloc buffer contains:::if->top->return->return->start->lessThanOrEqual->top->greaterThan
ThreadLocalAllocBuffer#printOn(PrintStream)::: thread local alloc buffer print on:::tty->start->top->end->hardEnd->println
Threads#initialize(TypeDataBase)::: threads initialize:::type->db->lookupType->type->getAddressField->type->getCIntegerField->os->VM->getVM->getOS->cpu->VM->getVM->getCPU->if->os->equals->if->cpu->equals->new->SolarisSPARCJavaThreadPDAccess->else->if->cpu->equals->new->SolarisX86JavaThreadPDAccess->else->if->cpu->equals->new->SolarisAMD64JavaThreadPDAccess->else->if->os->equals->if->cpu->equals->new->Win32X86JavaThreadPDAccess->else->if->cpu->equals->new->Win32AMD64JavaThreadPDAccess->else->if->os->equals->if->cpu->equals->new->LinuxX86JavaThreadPDAccess->else->if->cpu->equals->new->LinuxAMD64JavaThreadPDAccess->else->if->cpu->equals->new->LinuxSPARCJavaThreadPDAccess->else->if->cpu->equals->new->LinuxPPC64JavaThreadPDAccess->else->if->cpu->equals->new->LinuxAARCH64JavaThreadPDAccess->else->try->Class->cpu->toLowerCase->cpu->toUpperCase->forName->newInstance->catch->throw->new->RuntimeException->finally->else->if->os->equals->if->cpu->equals->new->BsdX86JavaThreadPDAccess->else->if->cpu->equals->cpu->equals->new->BsdAMD64JavaThreadPDAccess->else->if->os->equals->if->cpu->equals->cpu->equals->new->BsdAMD64JavaThreadPDAccess->if->throw->new->RuntimeException->new->VirtualConstructor->virtualConstructor->addMapping->if->VM->getVM->isCore->virtualConstructor->addMapping->virtualConstructor->addMapping->virtualConstructor->addMapping->virtualConstructor->addMapping
Threads#first():::NOTE: this returns objects of type JavaThread, CompilerThread,       JvmtiAgentThread, and ServiceThread:::threadAddr->threadListField->getValue->if->return->return->createJavaThreadWrapper
Threads#getNumberOfThreads()::: threads get number of threads:::return->numOfThreadsField->getValue
Threads#createJavaThreadWrapper(Address):::Routine for instantiating appropriately-typed wrapper for a       JavaThread:::try->thread->virtualConstructor->instantiateWrapperFor->thread->setThreadPDAccess->return->catch->throw->new->RuntimeException->finally
Threads#oopsDo(AddressVisitor):::Memory operations:::for->thread->first->thread->next
Threads#owningThreadFromMonitor(Address)::: threads owning thread from monitor:::if->return->for->thread->first->thread->next->for->thread->first->thread->next->return
Threads#owningThreadFromMonitor(ObjectMonitor)::: threads owning thread from monitor:::return->monitor->owner->owningThreadFromMonitor
Threads#getPendingThreads(ObjectMonitor)::: threads get pending threads:::pendingThreads->new->ArrayList->for->thread->first->thread->next->return
Threads#getWaitingThreads(ObjectMonitor)::: threads get waiting threads:::pendingThreads->new->ArrayList->for->thread->first->thread->next->return
ThreadStackTrace#getStackDepth()::: thread stack trace get stack depth:::return
ThreadStackTrace#stackFrameAt(int)::: thread stack trace stack frame at:::return->frames->get
ThreadStackTrace#dumpStack(int)::: thread stack trace dump stack:::if->thread->isJavaThread->println->return->try->for->vf->thread->getLastJavaVFrameDbg->vf->javaSender->catch->println->e->printStackTrace->finally
ThreadState#getPrintVal()::: thread state get print val:::return
VFrame#newVFrame(Frame, RegisterMap, JavaThread, boolean, boolean):::Factory method for creating vframes:::if->f->isInterpretedFrame->return->new->InterpretedVFrame->if->VM->getVM->isCore->cb->if->VM->getVM->getCodeCache->f->getPC->findBlobUnsafe->else->VM->getVM->getCodeCache->f->getPC->findBlob->if->if->cb->isNMethod->nm->scope->if->VM->getVM->isDebugging->nm->f->getPC->getScopeDescNearDbg->else->nm->f->getPC->getScopeDescAt->return->new->CompiledVFrame->if->f->isRuntimeFrame->tempMap->regMap->copy->s->f->sender->return->newVFrame->return->new->ExternalVFrame
VFrame#newVFrame(Frame, RegisterMap, JavaThread):::Factory method for creating vframes:::return->newVFrame
VFrame#getFrame():::Accessors:::return
VFrame#getRegisterMap()::: frame get register map:::return
VFrame#getThread()::: frame get thread:::return
VFrame#sender():::Returns the sender vframe:::if->Assert->isTop->that->return->sender
VFrame#sender(boolean):::Returns the sender vframe; takes argument for debugging situation:::tempMap->getRegisterMap->clone->if->fr->isFirstFrame->return->s->fr->realSender->if->return->if->s->isFirstFrame->return->return->VFrame->getThread->VM->getVM->isDebugging->newVFrame
VFrame#javaSender():::Returns the next javaVFrame on the stack (skipping all other       kinds of frames):::imprecise->if->VM->getVM->isDebugging->if->isJavaFrame->mayBeImpreciseDbg->f->sender->while->if->f->isJavaFrame->return->f->sender->return
VFrame#isTop():::Answers if the this is the top vframe in the frame, i.e., if the       sender vframe is in the caller frame:::return
VFrame#top():::Returns top vframe within same frame (see isTop()):::vf->while->vf->isTop->vf->sender->return
VFrame#isEntryFrame():::Type testing operations:::return
VFrame#isJavaFrame()::: frame is java frame:::return
VFrame#isInterpretedFrame()::: frame is interpreted frame:::return
VFrame#isCompiledFrame()::: frame is compiled frame:::return
VFrame#isDeoptimized()::: frame is deoptimized:::return
VFrame#mayBeImpreciseDbg():::An indication of whether this VFrame is "precise" or a best       guess:::return
VFrame#print():::Printing operations:::printOn
VFrame#printOn(PrintStream)::: frame print on:::if->VM->getVM->wizardMode->fr->printValueOn
VFrame#printValue()::: frame print value:::printValueOn
VFrame#printValueOn(PrintStream)::: frame print value on:::printOn
VirtualBaseConstructor#addMapping(String, Class):::Adds a mapping from the given C++ type name to the given Java       class:::if->map->get->return->map->put->return
VirtualBaseConstructor#instantiateWrapperFor(Address):::Instantiate the most-precisely typed wrapper object available       for the type of the given Address:::if->return->type->db->findDynamicTypeForAddress->if->return->VMObjectFactory->map->type->getName->get->newObject->else->if->return->VMObjectFactory->newObject->throw->newWrongTypeException
VirtualConstructor#addMapping(String, Class):::Adds a mapping from the given C++ type name to the given Java       class:::if->map->get->return->map->put->return
VirtualConstructor#instantiateWrapperFor(Address):::Instantiate the most-precisely typed wrapper object available       for the type of the given Address:::if->return->for->iter->map->keySet->iterator->iter->hasNext->throw->newWrongTypeException
VM.Flag#getType()::: flag get type:::return
VM.Flag#getName()::: flag get name:::return
VM.Flag#getAddress()::: flag get address:::return
VM.Flag#getOrigin()::: flag get origin:::return
VM.Flag#isBool()::: flag is bool:::return->type->equals
VM.Flag#getBool()::: flag get bool:::if->Assert->isBool->that->return->addr->boolType->getSize->boolType->isUnsigned->getCIntegerAt
VM.Flag#isInt()::: flag is int:::return->type->equals
VM.Flag#getInt()::: flag get int:::if->Assert->isInt->that->return->addr->intType->getSize->getCIntegerAt
VM.Flag#isUInt()::: flag is int:::return->type->equals
VM.Flag#getUInt()::: flag get int:::if->Assert->isUInt->that->return->addr->uintType->getSize->getCIntegerAt
VM.Flag#isIntx()::: flag is intx:::return->type->equals
VM.Flag#getIntx()::: flag get intx:::if->Assert->isIntx->that->return->addr->intxType->getSize->getCIntegerAt
VM.Flag#isUIntx()::: flag is intx:::return->type->equals
VM.Flag#getUIntx()::: flag get intx:::if->Assert->isUIntx->that->return->addr->uintxType->getSize->getCIntegerAt
VM.Flag#isSizet()::: flag is sizet:::return->type->equals
VM.Flag#getSizet()::: flag get sizet:::if->Assert->isSizet->that->return->addr->sizetType->getSize->getCIntegerAt
VM.Flag#getValue()::: flag get value:::if->isBool->return->Boolean->getBool->toString->else->if->isInt->return->Long->getInt->toString->else->if->isUInt->return->Long->getUInt->toString->else->if->isIntx->return->Long->getIntx->toString->else->if->isUIntx->return->Long->getUIntx->toString->else->if->isSizet->return->Long->getSizet->toString->else->return
VM#checkVMVersion(String)::: m check version:::if->System->getProperty->versionProp->saVersion->saProps->getProperty->if->throw->new->RuntimeException->vmVersion->vmRelease->replaceAll->if->saVersion->equals->return->if->saVersion->indexOf->saVersion->lastIndexOf->vmVersion->indexOf->vmVersion->lastIndexOf->throw->new->VMVersionMismatchException->else->println->else->println
VM#initialize(TypeDataBase, boolean):::This could be used by a reflective runtime system:::if->throw->new->RuntimeException->new->VM->for->iter->vmInitializedObservers->iterator->iter->hasNext
VM#initialize(TypeDataBase, JVMDebugger):::This is used by the debugging system:::if->return->debugger->getMachineDescription->isBigEndian->new->VM->for->iter->vmInitializedObservers->iterator->iter->hasNext->debugger->soleInstance->getHeapOopSize->soleInstance->getKlassPtrSize->Universe->getNarrowOopBase->Universe->getNarrowOopShift->Universe->getNarrowKlassBase->Universe->getNarrowKlassShift->putHeapConst
VM#shutdown():::This is used by the debugging system:::
VM#registerVMInitializedObserver(Observer):::This is used by both the debugger and any runtime system:::vmInitializedObservers->add->o->update
VM#getVM():::This is the primary accessor used by both the debugger and any       potential runtime system:::if->throw->new->RuntimeException->return
VM#registerVMResumedObserver(Observer):::This is only used by the debugging system:::vmResumedObservers->add
VM#registerVMSuspendedObserver(Observer):::This is only used by the debugging system:::vmSuspendedObservers->add
VM#fireVMResumed():::This is only used by the debugging system:::for->iter->vmResumedObservers->iterator->iter->hasNext
VM#fireVMSuspended():::This is only used by the debugging system:::for->iter->vmSuspendedObservers->iterator->iter->hasNext
VM#getOS():::Returns the OS this VM is running on:::if->return->debugger->getOS->return->PlatformInfo->getOS
VM#getCPU():::Returns the CPU this VM is running on:::if->return->debugger->getCPU->return->PlatformInfo->getCPU
VM#lookupType(String)::: m lookup type:::return->db->lookupType
VM#lookupIntConstant(String)::: m lookup int constant:::return->db->lookupIntConstant
VM#getAddressValue(Address)::: m get address value:::return->VM->getVM->getDebugger->getAddressValue
VM#getAddressSize()::: m get address size:::return->db->getAddressSize
VM#getOopSize()::: m get oop size:::return
VM#getLogAddressSize()::: m get log address size:::return
VM#getIntSize()::: m get int size:::return->db->getJIntType->getSize
VM#getStackBias():::NOTE: this offset is in BYTES in this system!:::return
VM#isLP64():::Indicates whether the underlying machine supports the LP64 data       model:::if->Assert->isDebugging->that->return
VM#getBytesPerLong():::Get bytes-per-long == long/double natural alignment.:::return
VM#getBytesPerWord()::: m get bytes per word:::return
VM#getMinObjAlignmentInBytes():::Get minimum object alignment in bytes.:::return
VM#getLogMinObjAlignmentInBytes()::: m get log min obj alignment in bytes:::return
VM#getHeapWordSize()::: m get heap word size:::return
VM#getHeapOopSize()::: m get heap oop size:::return
VM#getIndexSetSize()::: m get index set size:::return
VM#getKlassPtrSize()::: m get klass ptr size:::return
VM#alignUp(long, long):::Utility routine for getting data structure alignment correct:::return
VM#alignDown(long, long):::Utility routine for getting data structure alignment correct:::return
VM#buildIntFromShorts(short, short):::Utility routine for building an int from two "unsigned" 16-bit       shorts:::return
VM#buildLongFromIntsPD(int, int):::Utility routine for building a long from two "unsigned" 32-bit       ints in platform-dependent order:::if->return->else->return
VM#getTypeDataBase()::: m get type data base:::return
VM#getUniverse()::: m get universe:::if->new->Universe->return
VM#getObjectHeap()::: m get object heap:::if->new->ObjectHeap->return
VM#getSymbolTable()::: m get symbol table:::if->SymbolTable->getTheTable->return
VM#getSystemDictionary()::: m get system dictionary:::if->new->SystemDictionary->return
VM#getClassLoaderDataGraph()::: m get class loader data graph:::if->new->ClassLoaderDataGraph->return
VM#getThreads()::: m get threads:::if->new->Threads->return
VM#getObjectSynchronizer()::: m get object synchronizer:::if->new->ObjectSynchronizer->return
VM#getJNIHandles()::: m get handles:::if->new->JNIHandles->return
VM#getInterpreter()::: m get interpreter:::if->new->Interpreter->return
VM#getStubRoutines()::: m get stub routines:::if->new->StubRoutines->return
VM#getVMRegImplInfo()::: m get reg impl info:::if->new->VMRegImpl->return
VM#getFileMapInfo()::: m get file map info:::if->isSharingEnabled->return->if->new->FileMapInfo->return
VM#getBytes()::: m get bytes:::if->debugger->getMachineDescription->new->Bytes->return
VM#isBigEndian():::Returns true if this is a isBigEndian, false otherwise:::return
VM#isJvmtiSupported():::Returns true if JVMTI is supported, false otherwise:::return
VM#isCore():::Returns true if this is a "core" build, false if either C1 or C2       is present:::return
VM#isClientCompiler():::Returns true if this is a C1 build, false otherwise:::return
VM#isServerCompiler():::Returns true if this is a C2 build, false otherwise:::return
VM#useDerivedPointerTable():::Returns true if C2 derived pointer table should be used, false otherwise:::return
VM#getCodeCache():::Returns the code cache; should not be used if is core build:::if->Assert->isCore->that->if->new->CodeCache->return
VM#getRuntime1():::Should only be called for C1 builds:::if->Assert->isClientCompiler->that->if->new->Runtime1->return
VM#isDebugging():::Test to see whether we're in debugging mode (NOTE: this really       should not be tested by this code; currently only used in       StackFrameStream):::return
VM#getDebugger():::This is only used by the debugging (i.e., non-runtime) system:::if->throw->new->RuntimeException->return
VM#isJavaPCDbg(Address):::Indicates whether a given program counter is in Java code:::return->getInterpreter->contains->getCodeCache->contains
VM#getInvocationEntryBCI():::FIXME: figure out where to stick this:::return
VM#wizardMode()::: m wizard mode:::return
VM#getRevPtrs()::: m get rev ptrs:::return
VM#setRevPtrs(ReversePtrs)::: m set rev ptrs:::
VM#getVMRelease()::: m get release:::return
VM#getVMInternalInfo()::: m get internal info:::return
VM#getReserveForAllocationPrefetch()::: m get reserve for allocation prefetch:::return
VM#isSharingEnabled()::: m is sharing enabled:::if->flag->getCommandLineFlag->flag->getBool->return->sharingEnabled->booleanValue
VM#isCompressedOopsEnabled()::: m is compressed oops enabled:::if->flag->getCommandLineFlag->flag->getBool->return->compressedOopsEnabled->booleanValue
VM#isCompressedKlassPointersEnabled()::: m is compressed klass pointers enabled:::if->flag->getCommandLineFlag->flag->getBool->return->compressedKlassPointersEnabled->booleanValue
VM#getObjectAlignmentInBytes()::: m get object alignment in bytes:::if->flag->getCommandLineFlag->flag->getIntx->return
VM#getUseTLAB():::Indicates whether Thread-Local Allocation Buffers are used:::flag->getCommandLineFlag->return->flag->getBool
VM#getCommandLineBooleanFlag(String)::: m get command line boolean flag:::flag->getCommandLineFlag->return->flag->getBool
VM#getCommandLineFlags()::: m get command line flags:::if->readCommandLineFlags->return
VM#getCommandLineFlag(String)::: m get command line flag:::if->new->HashMap->flags->getCommandLineFlags->for->i->return->flagsMap->get
VM#readCommandLineFlags()::: m read command line flags:::db->getTypeDataBase->flagType->db->lookupType->numFlags->flagType->getCIntegerField->getValue->new->FlagArr->flagAddr->flagType->getAddressField->getValue->typeFld->flagType->getAddressField->nameFld->flagType->getAddressField->addrFld->flagType->getAddressField->flagsFld->flagType->getCIntegerField->new->CIntField->flagSize->flagType->getSize->for->f->Arrays->new->Comparator->sort
VM#getSystemProperty(String)::: m get system property:::props->getSystemProperties->return->props->getProperty
VM#getSystemProperties()::: m get system properties:::if->readSystemProperties->return
VM#readSystemProperties()::: m read system properties:::systemKls->getSystemDictionary->getSystemKlass->systemKls->new->DefaultOopVisitor->iterateStaticFields
VMObject#toString()::: object to string:::return->getClass->getName
VMObject#equals(Object)::: object equals:::if->return->if->getClass->arg->getClass->equals->return->obj->if->addr->equals->return->return
VMObject#hashCode()::: object hash code:::return->addr->hashCode
VMObject#getAddress()::: object get address:::return
VMObjectFactory#newObject(Class, Address)::: object factory new object:::try->if->return->c->clazz->new->ClassArr->getConstructor->return->c->new->ObjectArr->newInstance->catch->if->ite->getTargetException->throw->ite->getTargetException->throw->new->ConstructionException->throw->new->ConstructionException->finally
VMReg#initialize(TypeDataBase)::: reg initialize:::if->VM->getVM->isServerCompiler->type->db->lookupType->f->type->getField->f->getStaticFieldAddress
VMReg#getValue()::: reg get value:::return
VMReg#regEncode()::: reg reg encode:::if->return->matcherRegEncodeAddr->getCIntegerAt->return
VMReg#equals(Object)::: reg equals:::if->return->return
VMReg#lessThan(VMReg)::: reg less than:::return
VMReg#lessThanOrEqual(VMReg)::: reg less than or equal:::return
VMReg#greaterThan(VMReg)::: reg greater than:::return
VMReg#greaterThanOrEqual(VMReg)::: reg greater than or equal:::return
VMReg#minus(VMReg)::: reg minus:::return
VMReg#reg2Stack()::: reg reg2 stack:::return->VM->getVM->getVMRegImplInfo->getStack0->getValue
vmSymbols#initialize(TypeDataBase):::vm symbols initialize:::type->db->lookupType->type->getAddressField->getStaticFieldAddress->db->lookupIntConstant->db->lookupIntConstant
vmSymbols#symbolAt(int):::vm symbols symbol at:::if->throw->new->IndexOutOfBoundsException->return->Symbol->symbolsAddress->VM->getVM->getAddressSize->getAddressAt->create
VMVersionMismatchException#getMessage()::: version mismatch exception get message:::msg->new->StringBuffer->msg->append->msg->append->msg->append->msg->append->return->msg->toString
VMVersionMismatchException#getSupportedVersions()::: version mismatch exception get supported versions:::return
VMVersionMismatchException#getTargetVersion()::: version mismatch exception get target version:::return
WatcherThread#isWatcherThread()::: watcher thread is watcher thread:::return

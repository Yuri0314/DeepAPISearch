sun.jvm.hotspot.runtime.AddressVisitor#visitAddress(Address)->void::: address visitor visit address
sun.jvm.hotspot.runtime.AddressVisitor#visitCompOopAddress(Address)->void::: address visitor visit comp oop address
sun.jvm.hotspot.runtime.Arguments#getJVMFlags()->String::: arguments get flags
sun.jvm.hotspot.runtime.Arguments#getJVMArgs()->String::: arguments get args
sun.jvm.hotspot.runtime.Arguments#getJavaCommand()->String::: arguments get java command
sun.jvm.hotspot.runtime.ArgumentSizeComputer#set(int, int)->void::: argument size computer set
sun.jvm.hotspot.runtime.BasicLock#displacedHeader()->Mark::: basic lock displaced header
sun.jvm.hotspot.runtime.BasicObjectLock#obj()->OopHandle::: basic object lock obj
sun.jvm.hotspot.runtime.BasicObjectLock#lock()->BasicLock::: basic object lock lock
sun.jvm.hotspot.runtime.BasicObjectLock#size()->int:::Note: Use frame::interpreter_frame_monitor_size() for the size       of BasicObjectLocks in interpreter activation frames since it       includes machine-specific padding
sun.jvm.hotspot.runtime.BasicObjectLock#address()->Address:::Helper routine for Frames (also probably needed for iteration)
sun.jvm.hotspot.runtime.BasicType#getTBoolean()->int::: basic type get boolean
sun.jvm.hotspot.runtime.BasicType#getTChar()->int::: basic type get char
sun.jvm.hotspot.runtime.BasicType#getTFloat()->int::: basic type get float
sun.jvm.hotspot.runtime.BasicType#getTDouble()->int::: basic type get double
sun.jvm.hotspot.runtime.BasicType#getTByte()->int::: basic type get byte
sun.jvm.hotspot.runtime.BasicType#getTShort()->int::: basic type get short
sun.jvm.hotspot.runtime.BasicType#getTInt()->int::: basic type get int
sun.jvm.hotspot.runtime.BasicType#getTLong()->int::: basic type get long
sun.jvm.hotspot.runtime.BasicType#getTObject()->int::: basic type get object
sun.jvm.hotspot.runtime.BasicType#getTArray()->int::: basic type get array
sun.jvm.hotspot.runtime.BasicType#getTVoid()->int::: basic type get void
sun.jvm.hotspot.runtime.BasicType#getTAddress()->int::: basic type get address
sun.jvm.hotspot.runtime.BasicType#getTNarrowOop()->int::: basic type get narrow oop
sun.jvm.hotspot.runtime.BasicType#getTMetadata()->int::: basic type get metadata
sun.jvm.hotspot.runtime.BasicType#getTNarrowKlass()->int::: basic type get narrow klass
sun.jvm.hotspot.runtime.BasicType#getTConflict()->int:::For stack value type with conflicting contents
sun.jvm.hotspot.runtime.BasicType#getTIllegal()->int::: basic type get illegal
sun.jvm.hotspot.runtime.BasicType#intToBasicType(int)->BasicType::: basic type int to basic type
sun.jvm.hotspot.runtime.BasicType#charToBasicType(char)->BasicType::: basic type char to basic type
sun.jvm.hotspot.runtime.BasicType#charToType(char)->int::: basic type char to type
sun.jvm.hotspot.runtime.BasicType#getType()->int::: basic type get type
sun.jvm.hotspot.runtime.BasicType#getName()->String::: basic type get name
sun.jvm.hotspot.runtime.BasicTypeSize#getTBooleanSize()->int::: basic type size get boolean size
sun.jvm.hotspot.runtime.BasicTypeSize#getTCharSize()->int::: basic type size get char size
sun.jvm.hotspot.runtime.BasicTypeSize#getTFloatSize()->int::: basic type size get float size
sun.jvm.hotspot.runtime.BasicTypeSize#getTDoubleSize()->int::: basic type size get double size
sun.jvm.hotspot.runtime.BasicTypeSize#getTByteSize()->int::: basic type size get byte size
sun.jvm.hotspot.runtime.BasicTypeSize#getTShortSize()->int::: basic type size get short size
sun.jvm.hotspot.runtime.BasicTypeSize#getTIntSize()->int::: basic type size get int size
sun.jvm.hotspot.runtime.BasicTypeSize#getTLongSize()->int::: basic type size get long size
sun.jvm.hotspot.runtime.BasicTypeSize#getTObjectSize()->int::: basic type size get object size
sun.jvm.hotspot.runtime.BasicTypeSize#getTArraySize()->int::: basic type size get array size
sun.jvm.hotspot.runtime.BasicTypeSize#getTNarrowOopSize()->int::: basic type size get narrow oop size
sun.jvm.hotspot.runtime.BasicTypeSize#getTNarrowKlassSize()->int::: basic type size get narrow klass size
sun.jvm.hotspot.runtime.BasicTypeSize#getTVoidSize()->int::: basic type size get void size
sun.jvm.hotspot.runtime.Bytes#swapShort(short)->short:::Should only swap if the hardware's underlying byte order is       different from Java's
sun.jvm.hotspot.runtime.Bytes#swapInt(int)->int:::Should only swap if the hardware's underlying byte order is       different from Java's
sun.jvm.hotspot.runtime.Bytes#swapLong(long)->long:::Should only swap if the hardware's underlying byte order is       different from Java's
sun.jvm.hotspot.runtime.CodeCacheSweeperThread#isJavaThread()->boolean::: code cache sweeper thread is java thread
sun.jvm.hotspot.runtime.CodeCacheSweeperThread#isHiddenFromExternalView()->boolean::: code cache sweeper thread is hidden from external view
sun.jvm.hotspot.runtime.CodeCacheSweeperThread#isCodeCacheSweeperThread()->boolean::: code cache sweeper thread is code cache sweeper thread
sun.jvm.hotspot.runtime.CompiledVFrame#isTop()->boolean::: compiled frame is top
sun.jvm.hotspot.runtime.CompiledVFrame#isCompiledFrame()->boolean::: compiled frame is compiled frame
sun.jvm.hotspot.runtime.CompiledVFrame#isDeoptimized()->boolean::: compiled frame is deoptimized
sun.jvm.hotspot.runtime.CompiledVFrame#mayBeImpreciseDbg()->boolean::: compiled frame may be imprecise dbg
sun.jvm.hotspot.runtime.CompiledVFrame#getCode()->NMethod:::Returns the active method
sun.jvm.hotspot.runtime.CompiledVFrame#getCodeUnsafe()->NMethod:::Returns the active method
sun.jvm.hotspot.runtime.CompiledVFrame#getScope()->ScopeDesc:::Returns the ScopeDesc
sun.jvm.hotspot.runtime.CompiledVFrame#getMethod()->Method::: compiled frame get method
sun.jvm.hotspot.runtime.CompiledVFrame#getLocals()->StackValueCollection::: compiled frame get locals
sun.jvm.hotspot.runtime.CompiledVFrame#getExpressions()->StackValueCollection::: compiled frame get expressions
sun.jvm.hotspot.runtime.CompiledVFrame#getMonitors()->List:::Returns List<MonitorInfo>
sun.jvm.hotspot.runtime.CompiledVFrame#getBCI()->int::: compiled frame get i
sun.jvm.hotspot.runtime.CompiledVFrame#getRawBCI()->int:::Returns SynchronizationEntryBCI or bci() (used for synchronization)
sun.jvm.hotspot.runtime.CompiledVFrame#sender()->VFrame:::Returns the sender vframe
sun.jvm.hotspot.runtime.CompiledVFrame#sender(boolean)->VFrame::: compiled frame sender
sun.jvm.hotspot.runtime.CompilerThread#env()->ciEnv::: compiler thread env
sun.jvm.hotspot.runtime.CompilerThread#isJavaThread()->boolean::: compiler thread is java thread
sun.jvm.hotspot.runtime.CompilerThread#isHiddenFromExternalView()->boolean::: compiler thread is hidden from external view
sun.jvm.hotspot.runtime.CompilerThread#isCompilerThread()->boolean::: compiler thread is compiler thread
sun.jvm.hotspot.runtime.ConcurrentLocksPrinter#print(JavaThread, PrintStream)->void::: concurrent locks printer print
sun.jvm.hotspot.runtime.DeadlockDetector#print(PrintStream)->void::: deadlock detector print
sun.jvm.hotspot.runtime.DeadlockDetector#print(PrintStream, boolean)->void:::prints zero or more deadlocks into 'tty' taking current      snapshot of Java threads and locks
sun.jvm.hotspot.runtime.ExternalVFrame#print()->void::: external frame print
sun.jvm.hotspot.runtime.ExternalVFrame#printOn(PrintStream)->void::: external frame print on
sun.jvm.hotspot.runtime.ExternalVFrame#printValue()->void::: external frame print value
sun.jvm.hotspot.runtime.ExternalVFrame#printValueOn(PrintStream)->void::: external frame print value on
sun.jvm.hotspot.runtime.ExternalVFrame#mayBeImpreciseDbg()->boolean::: external frame may be imprecise dbg
sun.jvm.hotspot.runtime.Frame#pcReturnOffset()->int::: frame pc return offset
sun.jvm.hotspot.runtime.Frame#bcpToBci(Address, ConstMethod)->int::: frame bcp to bci
sun.jvm.hotspot.runtime.Frame#bcpToBci(Address, Method)->int::: frame bcp to bci
sun.jvm.hotspot.runtime.Frame#clone()->Object::: frame clone
sun.jvm.hotspot.runtime.Frame#getPC()->Address:::pc: Returns the pc at which this frame will continue normally
sun.jvm.hotspot.runtime.Frame#setPC(Address)->void::: frame set c
sun.jvm.hotspot.runtime.Frame#isDeoptimized()->boolean::: frame is deoptimized
sun.jvm.hotspot.runtime.Frame#cb()->CodeBlob::: frame cb
sun.jvm.hotspot.runtime.Frame#getSP()->Address::: frame get p
sun.jvm.hotspot.runtime.Frame#getID()->Address::: frame get d
sun.jvm.hotspot.runtime.Frame#getFP()->Address::: frame get p
sun.jvm.hotspot.runtime.Frame#equals(Object)->boolean:::testers -- platform dependent
sun.jvm.hotspot.runtime.Frame#isInterpretedFrame()->boolean:::type testers
sun.jvm.hotspot.runtime.Frame#isJavaFrame()->boolean::: frame is java frame
sun.jvm.hotspot.runtime.Frame#isEntryFrame()->boolean:::Java frame called from C?
sun.jvm.hotspot.runtime.Frame#isNativeFrame()->boolean::: frame is native frame
sun.jvm.hotspot.runtime.Frame#isCompiledFrame()->boolean::: frame is compiled frame
sun.jvm.hotspot.runtime.Frame#isRuntimeFrame()->boolean::: frame is runtime frame
sun.jvm.hotspot.runtime.Frame#isFirstFrame()->boolean::: frame is first frame
sun.jvm.hotspot.runtime.Frame#isFirstJavaFrame()->boolean:::same for Java frame
sun.jvm.hotspot.runtime.Frame#isSignalHandlerFrameDbg()->boolean:::This is an addition for debugging purposes on platforms which       have the notion of signals.
sun.jvm.hotspot.runtime.Frame#getSignalNumberDbg()->int:::If this is a signal handler frame (again, on a platform with a       notion of signals), get the signal number.
sun.jvm.hotspot.runtime.Frame#getSignalNameDbg()->String:::If this is a signal handler frame (again, on a platform with a       notion of signals), get the name of the signal.
sun.jvm.hotspot.runtime.Frame#isInterpretedFrameValid()->boolean:::performs sanity checks on interpreted frames.
sun.jvm.hotspot.runtime.Frame#shouldBeDeoptimized()->boolean:::tells whether this frame is marked for deoptimization
sun.jvm.hotspot.runtime.Frame#canBeDeoptimized()->boolean:::tells whether this frame can be deoptimized
sun.jvm.hotspot.runtime.Frame#sender(RegisterMap, CodeBlob)->Frame:::returns the sending frame
sun.jvm.hotspot.runtime.Frame#sender(RegisterMap)->Frame:::equivalent to sender(map, null)
sun.jvm.hotspot.runtime.Frame#realSender(RegisterMap)->Frame:::returns the sender, but skips conversion frames
sun.jvm.hotspot.runtime.Frame#hasSenderPD()->boolean:::Platform-dependent query indicating whether this frame has a       sender
sun.jvm.hotspot.runtime.Frame#addressOfStackSlot(int)->Address:::Returns the address of the requested "slot" on the stack
sun.jvm.hotspot.runtime.Frame#getOopHandleAt(int)->OopHandle:::Fetches the OopHandle at the requested slot
sun.jvm.hotspot.runtime.Frame#getIntAt(int)->int:::Fetches the (Java) int at the requested slot
sun.jvm.hotspot.runtime.Frame#frameSize()->long:::returns the frame size in stack slots
sun.jvm.hotspot.runtime.Frame#getLink()->Address:::Link (i.e., the pointer to the previous frame)
sun.jvm.hotspot.runtime.Frame#getSenderPC()->Address:::Return address
sun.jvm.hotspot.runtime.Frame#getUnextendedSP()->Address:::The frame's original SP, before any extension by an interpreted       callee; used for packing debug info into vframeArray objects and       vframeArray lookup.
sun.jvm.hotspot.runtime.Frame#getSenderSP()->Address:::Returns the stack pointer of the calling frame
sun.jvm.hotspot.runtime.Frame#addressOfInterpreterFrameLocals()->Address::: frame address of interpreter frame locals
sun.jvm.hotspot.runtime.Frame#addressOfInterpreterFrameLocal(int)->Address::: frame address of interpreter frame local
sun.jvm.hotspot.runtime.Frame#getInterpreterFrameBCI()->int:::Byte code index
sun.jvm.hotspot.runtime.Frame#addressOfInterpreterFrameExpressionStack()->Address::: frame address of interpreter frame expression stack
sun.jvm.hotspot.runtime.Frame#getInterpreterFrameExpressionStackDirection()->int::: frame get interpreter frame expression stack direction
sun.jvm.hotspot.runtime.Frame#addressOfInterpreterFrameExpressionStackSlot(int)->Address::: frame address of interpreter frame expression stack slot
sun.jvm.hotspot.runtime.Frame#addressOfInterpreterFrameTOS()->Address:::Top of expression stack
sun.jvm.hotspot.runtime.Frame#addressOfInterpreterFrameTOSAt(int)->Address:::Expression stack from top down
sun.jvm.hotspot.runtime.Frame#getInterpreterFrameExpressionStackSize()->int:::FIXME: is this portable?
sun.jvm.hotspot.runtime.Frame#getInterpreterFrameSenderSP()->Address::: frame get interpreter frame sender p
sun.jvm.hotspot.runtime.Frame#interpreterFrameMonitorBegin()->BasicObjectLock::: frame interpreter frame monitor begin
sun.jvm.hotspot.runtime.Frame#interpreterFrameMonitorEnd()->BasicObjectLock::: frame interpreter frame monitor end
sun.jvm.hotspot.runtime.Frame#interpreterFrameMonitorSize()->int:::NOTE: this returns a size in BYTES in this system!
sun.jvm.hotspot.runtime.Frame#nextMonitorInInterpreterFrame(BasicObjectLock)->BasicObjectLock::: frame next monitor in interpreter frame
sun.jvm.hotspot.runtime.Frame#previousMonitorInInterpreterFrame(BasicObjectLock)->BasicObjectLock::: frame previous monitor in interpreter frame
sun.jvm.hotspot.runtime.Frame#addressOfInterpreterFrameMethod()->Address:::Current method
sun.jvm.hotspot.runtime.Frame#getInterpreterFrameMethod()->Method:::Current method
sun.jvm.hotspot.runtime.Frame#addressOfInterpreterFrameCPCache()->Address:::Constant pool cache
sun.jvm.hotspot.runtime.Frame#getInterpreterFrameCPCache()->ConstantPoolCache:::Constant pool cache
sun.jvm.hotspot.runtime.Frame#getEntryFrameCallWrapper()->JavaCallWrapper::: frame get entry frame call wrapper
sun.jvm.hotspot.runtime.Frame#entryFrameIsFirst()->boolean:::Tells whether there is another chunk of Delta stack above
sun.jvm.hotspot.runtime.Frame#addressOfSavedOopResult()->Address::: frame address of saved oop result
sun.jvm.hotspot.runtime.Frame#addressOfSavedReceiver()->Address::: frame address of saved receiver
sun.jvm.hotspot.runtime.Frame#getSavedOopResult()->OopHandle::: frame get saved oop result
sun.jvm.hotspot.runtime.Frame#getSavedReceiver()->OopHandle::: frame get saved receiver
sun.jvm.hotspot.runtime.Frame#oopsInterpretedArgumentsDo(Symbol, boolean, AddressVisitor)->void::: frame oops interpreted arguments do
sun.jvm.hotspot.runtime.Frame#oopMapRegToLocation(VMReg, RegisterMap)->Address:::Conversion from an VMReg::Name to physical stack location
sun.jvm.hotspot.runtime.Frame#oopsDo(AddressVisitor, RegisterMap)->void::: frame oops do
sun.jvm.hotspot.runtime.Frame#printValue()->void::: frame print value
sun.jvm.hotspot.runtime.Frame#printValueOn(PrintStream)->void::: frame print value on
sun.jvm.hotspot.runtime.Frame#print()->void::: frame print
sun.jvm.hotspot.runtime.Frame#printOn(PrintStream)->void::: frame print on
sun.jvm.hotspot.runtime.Frame#interpreterFramePrintOn(PrintStream)->void::: frame interpreter frame print on
sun.jvm.hotspot.runtime.InterpreterFrameClosure#offsetDo(int)->void::: interpreter frame closure offset do
sun.jvm.hotspot.runtime.ArgumentOopFinder#set(int, int)->void::: argument oop finder set
sun.jvm.hotspot.runtime.ArgumentOopFinder#oopsDo()->void::: argument oop finder oops do
sun.jvm.hotspot.runtime.InstanceConstructor#instantiateWrapperFor(Address)->T:::Instantiate the most-precisely typed wrapper object available       for the type of the given Address
sun.jvm.hotspot.runtime.InstanceConstructor#newWrongTypeException(Address)->WrongTypeException::: instance constructor new wrong type exception
sun.jvm.hotspot.runtime.InterpretedVFrame#getMethod()->Method:::JVM state
sun.jvm.hotspot.runtime.InterpretedVFrame#getLocals()->StackValueCollection::: interpreted frame get locals
sun.jvm.hotspot.runtime.InterpretedVFrame#getExpressions()->StackValueCollection::: interpreted frame get expressions
sun.jvm.hotspot.runtime.InterpretedVFrame#getMonitors()->List:::Returns List<MonitorInfo>
sun.jvm.hotspot.runtime.InterpretedVFrame#isInterpretedFrame()->boolean:::Test operation
sun.jvm.hotspot.runtime.InterpretedVFrame#getBCI()->int:::Accessor for Byte Code Index (NOTE: access to BCP is not allowed       in this system; see Frame.java)
sun.jvm.hotspot.runtime.InterpretedVFrame#verify()->void::: interpreted frame verify
sun.jvm.hotspot.runtime.JavaCallWrapper#getLastJavaSP()->Address::: java call wrapper get last java p
sun.jvm.hotspot.runtime.JavaCallWrapper#getLastJavaPC()->Address::: java call wrapper get last java c
sun.jvm.hotspot.runtime.JavaThread#setThreadPDAccess(JavaThreadPDAccess)->void::: java thread set thread access
sun.jvm.hotspot.runtime.JavaThread#next()->JavaThread::: java thread next
sun.jvm.hotspot.runtime.JavaThread#isJavaThread()->boolean:::NOTE: for convenience, this differs in definition from the underlying VM
sun.jvm.hotspot.runtime.JavaThread#isExiting()->boolean::: java thread is exiting
sun.jvm.hotspot.runtime.JavaThread#isTerminated()->boolean::: java thread is terminated
sun.jvm.hotspot.runtime.JavaThread#getAnchorField()->AddressField::: java thread get anchor field
sun.jvm.hotspot.runtime.JavaThread#getLastJavaSP()->Address:::Get the last Java stack pointer
sun.jvm.hotspot.runtime.JavaThread#getLastJavaPC()->Address::: java thread get last java c
sun.jvm.hotspot.runtime.JavaThread#getLastJavaFP()->Address:::Abstract accessor to last Java frame pointer, implemented by       OS/CPU-specific JavaThread implementation
sun.jvm.hotspot.runtime.JavaThread#getBaseOfStackPointer()->Address:::A stack pointer older than any java frame stack pointer
sun.jvm.hotspot.runtime.JavaThread#hasLastJavaFrame()->boolean:::Tells whether the last Java frame is set
sun.jvm.hotspot.runtime.JavaThread#getLastFrame()->Frame:::Accessing frames
sun.jvm.hotspot.runtime.JavaThread#getLastFramePD()->Frame:::Internal routine implemented by platform-dependent subclasses
sun.jvm.hotspot.runtime.JavaThread#getLastJavaVFrame(RegisterMap)->JavaVFrame:::Accessing frames
sun.jvm.hotspot.runtime.JavaThread#getLastJavaVFrameDbg()->JavaVFrame:::This should only be used by a debugger
sun.jvm.hotspot.runtime.JavaThread#newRegisterMap(boolean)->RegisterMap:::In this system, a JavaThread is the top-level factory for a       RegisterMap, since the JavaThread implementation is already       platform-specific and RegisterMap is also necessarily       platform-specific
sun.jvm.hotspot.runtime.JavaThread#getCurrentFrameGuess()->Frame:::This is only designed to be used by the debugging system
sun.jvm.hotspot.runtime.JavaThread#printThreadIDOn(PrintStream)->void:::Also only intended for use by the debugging system
sun.jvm.hotspot.runtime.JavaThread#printThreadID()->void::: java thread print thread d
sun.jvm.hotspot.runtime.JavaThread#getThreadProxy()->ThreadProxy::: java thread get thread proxy
sun.jvm.hotspot.runtime.JavaThread#getThreadState()->JavaThreadState::: java thread get thread state
sun.jvm.hotspot.runtime.JavaThread#getOSThread()->OSThread::: java thread get thread
sun.jvm.hotspot.runtime.JavaThread#getStackBase()->Address::: java thread get stack base
sun.jvm.hotspot.runtime.JavaThread#getStackBaseValue()->long::: java thread get stack base value
sun.jvm.hotspot.runtime.JavaThread#getStackSize()->long::: java thread get stack size
sun.jvm.hotspot.runtime.JavaThread#getTerminated()->int::: java thread get terminated
sun.jvm.hotspot.runtime.JavaThread#getThreadObj()->Oop:::Gets the Java-side thread object for this JavaThread
sun.jvm.hotspot.runtime.JavaThread#getThreadName()->String:::Get the Java-side name of this thread
sun.jvm.hotspot.runtime.JavaThread#oopsDo(AddressVisitor)->void::: java thread oops do
sun.jvm.hotspot.runtime.JavaThread#isInStack(Address)->boolean::: java thread is in stack
sun.jvm.hotspot.runtime.JavaThread#isLockOwned(Address)->boolean::: java thread is lock owned
sun.jvm.hotspot.runtime.JavaThread#getCurrentParkBlocker()->Oop::: java thread get current park blocker
sun.jvm.hotspot.runtime.JavaThread#printInfoOn(PrintStream)->void::: java thread print info on
sun.jvm.hotspot.runtime.JavaThread#printThreadInfoOn(PrintStream)->void::: java thread print thread info on
sun.jvm.hotspot.runtime.JavaThreadFactory#createJavaThreadWrapper(Address, TypeDataBase)->JavaThread::: java thread factory create java thread wrapper
sun.jvm.hotspot.runtime.JavaThreadPDAccess#getLastJavaFP(Address)->Address::: java thread access get last java p
sun.jvm.hotspot.runtime.JavaThreadPDAccess#getLastJavaPC(Address)->Address::: java thread access get last java c
sun.jvm.hotspot.runtime.JavaThreadPDAccess#getBaseOfStackPointer(Address)->Address::: java thread access get base of stack pointer
sun.jvm.hotspot.runtime.JavaThreadPDAccess#getLastFramePD(JavaThread, Address)->Frame::: java thread access get last frame d
sun.jvm.hotspot.runtime.JavaThreadPDAccess#newRegisterMap(JavaThread, boolean)->RegisterMap::: java thread access new register map
sun.jvm.hotspot.runtime.JavaThreadPDAccess#getCurrentFrameGuess(JavaThread, Address)->Frame::: java thread access get current frame guess
sun.jvm.hotspot.runtime.JavaThreadPDAccess#printThreadIDOn(Address, PrintStream)->void::: java thread access print thread on
sun.jvm.hotspot.runtime.JavaThreadPDAccess#printInfoOn(Address, PrintStream)->void::: java thread access print info on
sun.jvm.hotspot.runtime.JavaThreadPDAccess#getLastSP(Address)->Address::: java thread access get last p
sun.jvm.hotspot.runtime.JavaThreadPDAccess#getThreadProxy(Address)->ThreadProxy::: java thread access get thread proxy
sun.jvm.hotspot.runtime.JavaThreadState#toString()->String::: java thread state to string
sun.jvm.hotspot.runtime.JavaVFrame#getMethod()->Method:::JVM state
sun.jvm.hotspot.runtime.JavaVFrame#getBCI()->int::: java frame get i
sun.jvm.hotspot.runtime.JavaVFrame#getLocals()->StackValueCollection::: java frame get locals
sun.jvm.hotspot.runtime.JavaVFrame#getExpressions()->StackValueCollection::: java frame get expressions
sun.jvm.hotspot.runtime.JavaVFrame#getMonitors()->List::: java frame get monitors
sun.jvm.hotspot.runtime.JavaVFrame#isJavaFrame()->boolean:::Test operation
sun.jvm.hotspot.runtime.JavaVFrame#printLockedObjectClassName(PrintStream, OopHandle, String)->void::: java frame print locked object class name
sun.jvm.hotspot.runtime.JavaVFrame#printLockInfo(PrintStream, int)->void:::Printing used during stack dumps
sun.jvm.hotspot.runtime.JavaVFrame#print()->void::: java frame print
sun.jvm.hotspot.runtime.JavaVFrame#printOn(PrintStream)->void::: java frame print on
sun.jvm.hotspot.runtime.JavaVFrame#printActivation(int)->void::: java frame print activation
sun.jvm.hotspot.runtime.JavaVFrame#printActivationOn(PrintStream, int)->void::: java frame print activation on
sun.jvm.hotspot.runtime.JavaVFrame#verify()->void:::Verification operations
sun.jvm.hotspot.runtime.JavaVFrame#equals(Object)->boolean::: java frame equals
sun.jvm.hotspot.runtime.JavaVFrame#hashCode()->int::: java frame hash code
sun.jvm.hotspot.runtime.JavaVFrame#structuralCompare(JavaVFrame)->boolean:::Structural compare
sun.jvm.hotspot.runtime.JNIHandleBlock#next()->JNIHandleBlock::: handle block next
sun.jvm.hotspot.runtime.JNIHandleBlock#top()->int::: handle block top
sun.jvm.hotspot.runtime.JNIHandleBlock#oopsDo(AddressVisitor)->void::: handle block oops do
sun.jvm.hotspot.runtime.JNIHandleBlock#getOopHandle(int)->OopHandle::: handle block get oop handle
sun.jvm.hotspot.runtime.JNIHandleBlock#blockContainingHandle(Address)->JNIHandleBlock:::Debugging routine only
sun.jvm.hotspot.runtime.JNIHandleBlock#indexOfHandle(Address)->int:::Debugging routine: returns the index (0..top() - 1) of the       handle in this block, or -1 if the handle was not contained in       this block
sun.jvm.hotspot.runtime.JNIHandleBlock#toString()->String::: handle block to string
sun.jvm.hotspot.runtime.JNIHandles#globalHandles()->OopStorage::: handles global handles
sun.jvm.hotspot.runtime.JNIHandles#weakGlobalHandles()->OopStorage::: handles weak global handles
sun.jvm.hotspot.runtime.JvmtiAgentThread#isJavaThread()->boolean::: jvmti agent thread is java thread
sun.jvm.hotspot.runtime.JvmtiAgentThread#isJvmtiAgentThread()->boolean::: jvmti agent thread is jvmti agent thread
sun.jvm.hotspot.runtime.MonitorInfo#owner()->OopHandle::: monitor info owner
sun.jvm.hotspot.runtime.MonitorInfo#ownerKlass()->OopHandle::: monitor info owner klass
sun.jvm.hotspot.runtime.MonitorInfo#lock()->BasicLock::: monitor info lock
sun.jvm.hotspot.runtime.MonitorInfo#eliminated()->boolean::: monitor info eliminated
sun.jvm.hotspot.runtime.MonitorInfo#ownerIsScalarReplaced()->boolean::: monitor info owner is scalar replaced
sun.jvm.hotspot.runtime.NativeSignatureIterator#doBool()->void::: native signature iterator do bool
sun.jvm.hotspot.runtime.NativeSignatureIterator#doChar()->void::: native signature iterator do char
sun.jvm.hotspot.runtime.NativeSignatureIterator#doFloat()->void::: native signature iterator do float
sun.jvm.hotspot.runtime.NativeSignatureIterator#doDouble()->void::: native signature iterator do double
sun.jvm.hotspot.runtime.NativeSignatureIterator#doByte()->void::: native signature iterator do byte
sun.jvm.hotspot.runtime.NativeSignatureIterator#doShort()->void::: native signature iterator do short
sun.jvm.hotspot.runtime.NativeSignatureIterator#doInt()->void::: native signature iterator do int
sun.jvm.hotspot.runtime.NativeSignatureIterator#doLong()->void::: native signature iterator do long
sun.jvm.hotspot.runtime.NativeSignatureIterator#doVoid()->void::: native signature iterator do void
sun.jvm.hotspot.runtime.NativeSignatureIterator#doObject(int, int)->void::: native signature iterator do object
sun.jvm.hotspot.runtime.NativeSignatureIterator#doArray(int, int)->void::: native signature iterator do array
sun.jvm.hotspot.runtime.NativeSignatureIterator#method()->Method::: native signature iterator method
sun.jvm.hotspot.runtime.NativeSignatureIterator#offset()->int::: native signature iterator offset
sun.jvm.hotspot.runtime.NativeSignatureIterator#jniOffset()->int::: native signature iterator jni offset
sun.jvm.hotspot.runtime.NativeSignatureIterator#isStatic()->boolean::: native signature iterator is static
sun.jvm.hotspot.runtime.NativeSignatureIterator#passInt()->void::: native signature iterator pass int
sun.jvm.hotspot.runtime.NativeSignatureIterator#passLong()->void::: native signature iterator pass long
sun.jvm.hotspot.runtime.NativeSignatureIterator#passObject()->void::: native signature iterator pass object
sun.jvm.hotspot.runtime.NativeSignatureIterator#passFloat()->void::: native signature iterator pass float
sun.jvm.hotspot.runtime.NativeSignatureIterator#passDouble()->void::: native signature iterator pass double
sun.jvm.hotspot.runtime.NativeSignatureIterator#iterate()->void::: native signature iterator iterate
sun.jvm.hotspot.runtime.ObjectMonitor#header()->Mark::: object monitor header
sun.jvm.hotspot.runtime.ObjectMonitor#isEntered(sun.jvm.hotspot.runtime.Thread)->boolean::: object monitor is entered
sun.jvm.hotspot.runtime.ObjectMonitor#owner()->Address::: object monitor owner
sun.jvm.hotspot.runtime.ObjectMonitor#waiters()->int::: object monitor waiters
sun.jvm.hotspot.runtime.ObjectMonitor#freeNext()->Address::: object monitor free next
sun.jvm.hotspot.runtime.ObjectMonitor#count()->int::: object monitor count
sun.jvm.hotspot.runtime.ObjectMonitor#recursions()->long::: object monitor recursions
sun.jvm.hotspot.runtime.ObjectMonitor#object()->OopHandle::: object monitor object
sun.jvm.hotspot.runtime.ObjectMonitor#contentions()->int::: object monitor contentions
sun.jvm.hotspot.runtime.ObjectSynchronizer#identityHashValueFor(Oop)->long::: object synchronizer identity hash value for
sun.jvm.hotspot.runtime.ObjectSynchronizer#objectMonitorIterator()->Iterator::: object synchronizer object monitor iterator
sun.jvm.hotspot.runtime.OSThread#interrupted()->boolean::: thread interrupted
sun.jvm.hotspot.runtime.OSThread#threadId()->int::: thread thread id
sun.jvm.hotspot.runtime.OSThread#getThreadState()->ThreadState::: thread get thread state
sun.jvm.hotspot.runtime.PerfDataEntry#entryLength()->int::: perf data entry entry length
sun.jvm.hotspot.runtime.PerfDataEntry#nameOffset()->int::: perf data entry name offset
sun.jvm.hotspot.runtime.PerfDataEntry#vectorLength()->int::: perf data entry vector length
sun.jvm.hotspot.runtime.PerfDataEntry#dataType()->int::: perf data entry data type
sun.jvm.hotspot.runtime.PerfDataEntry#flags()->byte::: perf data entry flags
sun.jvm.hotspot.runtime.PerfDataEntry#supported()->boolean::: perf data entry supported
sun.jvm.hotspot.runtime.PerfDataEntry#dataUnits()->int::: perf data entry data units
sun.jvm.hotspot.runtime.PerfDataEntry#dataVariability()->int::: perf data entry data variability
sun.jvm.hotspot.runtime.PerfDataEntry#dataOffset()->int::: perf data entry data offset
sun.jvm.hotspot.runtime.PerfDataEntry#name()->String::: perf data entry name
sun.jvm.hotspot.runtime.PerfDataEntry#booleanValue()->boolean::: perf data entry boolean value
sun.jvm.hotspot.runtime.PerfDataEntry#charValue()->char::: perf data entry char value
sun.jvm.hotspot.runtime.PerfDataEntry#byteValue()->byte::: perf data entry byte value
sun.jvm.hotspot.runtime.PerfDataEntry#shortValue()->short::: perf data entry short value
sun.jvm.hotspot.runtime.PerfDataEntry#intValue()->int::: perf data entry int value
sun.jvm.hotspot.runtime.PerfDataEntry#longValue()->long::: perf data entry long value
sun.jvm.hotspot.runtime.PerfDataEntry#floatValue()->float::: perf data entry float value
sun.jvm.hotspot.runtime.PerfDataEntry#doubleValue()->double::: perf data entry double value
sun.jvm.hotspot.runtime.PerfDataEntry#booleanArrayValue()->boolean[]::: perf data entry boolean array value
sun.jvm.hotspot.runtime.PerfDataEntry#charArrayValue()->char[]::: perf data entry char array value
sun.jvm.hotspot.runtime.PerfDataEntry#byteArrayValue()->byte[]::: perf data entry byte array value
sun.jvm.hotspot.runtime.PerfDataEntry#shortArrayValue()->short[]::: perf data entry short array value
sun.jvm.hotspot.runtime.PerfDataEntry#intArrayValue()->int[]::: perf data entry int array value
sun.jvm.hotspot.runtime.PerfDataEntry#longArrayValue()->long[]::: perf data entry long array value
sun.jvm.hotspot.runtime.PerfDataEntry#floatArrayValue()->float[]::: perf data entry float array value
sun.jvm.hotspot.runtime.PerfDataEntry#doubleArrayValue()->double[]::: perf data entry double array value
sun.jvm.hotspot.runtime.PerfDataEntry#valueAsString()->String::: perf data entry value as string
sun.jvm.hotspot.runtime.PerfDataPrologue#magic()->int::: perf data prologue magic
sun.jvm.hotspot.runtime.PerfDataPrologue#byteOrder()->byte::: perf data prologue byte order
sun.jvm.hotspot.runtime.PerfDataPrologue#majorVersion()->byte::: perf data prologue major version
sun.jvm.hotspot.runtime.PerfDataPrologue#accessible()->boolean::: perf data prologue accessible
sun.jvm.hotspot.runtime.PerfDataPrologue#used()->int::: perf data prologue used
sun.jvm.hotspot.runtime.PerfDataPrologue#overflow()->int::: perf data prologue overflow
sun.jvm.hotspot.runtime.PerfDataPrologue#modTimeStamp()->long::: perf data prologue mod time stamp
sun.jvm.hotspot.runtime.PerfDataPrologue#entryOffset()->int::: perf data prologue entry offset
sun.jvm.hotspot.runtime.PerfDataPrologue#numEntries()->int::: perf data prologue num entries
sun.jvm.hotspot.runtime.PerfMemory#start()->Address::: perf memory start
sun.jvm.hotspot.runtime.PerfMemory#end()->Address::: perf memory end
sun.jvm.hotspot.runtime.PerfMemory#top()->Address::: perf memory top
sun.jvm.hotspot.runtime.PerfMemory#capacity()->long::: perf memory capacity
sun.jvm.hotspot.runtime.PerfMemory#initialized()->boolean::: perf memory initialized
sun.jvm.hotspot.runtime.PerfMemory#prologue()->PerfDataPrologue::: perf memory prologue
sun.jvm.hotspot.runtime.PerfMemory#contains(Address)->boolean::: perf memory contains
sun.jvm.hotspot.runtime.PerfMemory.PerfDataEntryVisitor#visit(PerfDataEntry)->boolean::: perf data entry visitor visit
sun.jvm.hotspot.runtime.PerfMemory#iterate(PerfDataEntryVisitor)->void::: perf memory iterate
sun.jvm.hotspot.runtime.RegisterMap#clone()->Object::: register map clone
sun.jvm.hotspot.runtime.RegisterMap#copy()->RegisterMap::: register map copy
sun.jvm.hotspot.runtime.RegisterMap#clear()->void::: register map clear
sun.jvm.hotspot.runtime.RegisterMap#getLocation(VMReg)->Address::: register map get location
sun.jvm.hotspot.runtime.RegisterMap#setLocation(VMReg, Address)->void::: register map set location
sun.jvm.hotspot.runtime.RegisterMap#getIncludeArgumentOops()->boolean::: register map get include argument oops
sun.jvm.hotspot.runtime.RegisterMap#setIncludeArgumentOops(boolean)->void::: register map set include argument oops
sun.jvm.hotspot.runtime.RegisterMap#getThread()->JavaThread::: register map get thread
sun.jvm.hotspot.runtime.RegisterMap#getUpdateMap()->boolean::: register map get update map
sun.jvm.hotspot.runtime.RegisterMap#print()->void::: register map print
sun.jvm.hotspot.runtime.RegisterMap#printOn(PrintStream)->void::: register map print on
sun.jvm.hotspot.runtime.RegisterMap#clearPD()->void:::Platform-dependent clear() functionality
sun.jvm.hotspot.runtime.RegisterMap#initializePD()->void:::Platform-dependent initialize() functionality
sun.jvm.hotspot.runtime.RegisterMap#initializeFromPD(RegisterMap)->void:::Platform-dependent initializeFrom() functionality
sun.jvm.hotspot.runtime.RegisterMap#getLocationPD(VMReg)->Address:::Platform-dependent getLocation() functionality
sun.jvm.hotspot.runtime.ResultTypeFinder#set(int, int)->void::: result type finder set
sun.jvm.hotspot.runtime.ServiceThread#isJavaThread()->boolean::: service thread is java thread
sun.jvm.hotspot.runtime.ServiceThread#isHiddenFromExternalView()->boolean::: service thread is hidden from external view
sun.jvm.hotspot.runtime.ServiceThread#isServiceThread()->boolean::: service thread is service thread
sun.jvm.hotspot.runtime.SignatureConverter#doBool()->void::: signature converter do bool
sun.jvm.hotspot.runtime.SignatureConverter#doChar()->void::: signature converter do char
sun.jvm.hotspot.runtime.SignatureConverter#doFloat()->void::: signature converter do float
sun.jvm.hotspot.runtime.SignatureConverter#doDouble()->void::: signature converter do double
sun.jvm.hotspot.runtime.SignatureConverter#doByte()->void::: signature converter do byte
sun.jvm.hotspot.runtime.SignatureConverter#doShort()->void::: signature converter do short
sun.jvm.hotspot.runtime.SignatureConverter#doInt()->void::: signature converter do int
sun.jvm.hotspot.runtime.SignatureConverter#doLong()->void::: signature converter do long
sun.jvm.hotspot.runtime.SignatureConverter#doVoid()->void::: signature converter do void
sun.jvm.hotspot.runtime.SignatureConverter#doObject(int, int)->void::: signature converter do object
sun.jvm.hotspot.runtime.SignatureConverter#doArray(int, int)->void::: signature converter do array
sun.jvm.hotspot.runtime.SignatureConverter#appendComma()->void::: signature converter append comma
sun.jvm.hotspot.runtime.SignatureInfo#lazyIterate()->void::: signature info lazy iterate
sun.jvm.hotspot.runtime.SignatureInfo#set(int, int)->void::: signature info set
sun.jvm.hotspot.runtime.SignatureInfo#doBool()->void::: signature info do bool
sun.jvm.hotspot.runtime.SignatureInfo#doChar()->void::: signature info do char
sun.jvm.hotspot.runtime.SignatureInfo#doFloat()->void::: signature info do float
sun.jvm.hotspot.runtime.SignatureInfo#doDouble()->void::: signature info do double
sun.jvm.hotspot.runtime.SignatureInfo#doByte()->void::: signature info do byte
sun.jvm.hotspot.runtime.SignatureInfo#doShort()->void::: signature info do short
sun.jvm.hotspot.runtime.SignatureInfo#doInt()->void::: signature info do int
sun.jvm.hotspot.runtime.SignatureInfo#doLong()->void::: signature info do long
sun.jvm.hotspot.runtime.SignatureInfo#doVoid()->void::: signature info do void
sun.jvm.hotspot.runtime.SignatureInfo#doObject(int, int)->void::: signature info do object
sun.jvm.hotspot.runtime.SignatureInfo#doArray(int, int)->void::: signature info do array
sun.jvm.hotspot.runtime.SignatureInfo#size()->int::: signature info size
sun.jvm.hotspot.runtime.SignatureInfo#type()->int::: signature info type
sun.jvm.hotspot.runtime.SignatureIterator#expect(char)->void::: signature iterator expect
sun.jvm.hotspot.runtime.SignatureIterator#skipOptionalSize()->void::: signature iterator skip optional size
sun.jvm.hotspot.runtime.SignatureIterator#parseType()->int::: signature iterator parse type
sun.jvm.hotspot.runtime.SignatureIterator#checkSignatureEnd()->void::: signature iterator check signature end
sun.jvm.hotspot.runtime.SignatureIterator#dispatchField()->void::: signature iterator dispatch field
sun.jvm.hotspot.runtime.SignatureIterator#iterateParameters()->void::: signature iterator iterate parameters
sun.jvm.hotspot.runtime.SignatureIterator#iterateReturntype()->void::: signature iterator iterate returntype
sun.jvm.hotspot.runtime.SignatureIterator#iterate()->void::: signature iterator iterate
sun.jvm.hotspot.runtime.SignatureIterator#parameterIndex()->int::: signature iterator parameter index
sun.jvm.hotspot.runtime.SignatureIterator#isReturnType()->boolean::: signature iterator is return type
sun.jvm.hotspot.runtime.SignatureIterator#doBool()->void::: signature iterator do bool
sun.jvm.hotspot.runtime.SignatureIterator#doChar()->void::: signature iterator do char
sun.jvm.hotspot.runtime.SignatureIterator#doFloat()->void::: signature iterator do float
sun.jvm.hotspot.runtime.SignatureIterator#doDouble()->void::: signature iterator do double
sun.jvm.hotspot.runtime.SignatureIterator#doByte()->void::: signature iterator do byte
sun.jvm.hotspot.runtime.SignatureIterator#doShort()->void::: signature iterator do short
sun.jvm.hotspot.runtime.SignatureIterator#doInt()->void::: signature iterator do int
sun.jvm.hotspot.runtime.SignatureIterator#doLong()->void::: signature iterator do long
sun.jvm.hotspot.runtime.SignatureIterator#doVoid()->void::: signature iterator do void
sun.jvm.hotspot.runtime.SignatureIterator#doObject(int, int)->void::: signature iterator do object
sun.jvm.hotspot.runtime.SignatureIterator#doArray(int, int)->void::: signature iterator do array
sun.jvm.hotspot.runtime.StackFrameInfo#getMethod()->Method::: stack frame info get method
sun.jvm.hotspot.runtime.StackFrameInfo#getBCI()->int::: stack frame info get i
sun.jvm.hotspot.runtime.StackFrameStream#isDone()->boolean:::Iteration
sun.jvm.hotspot.runtime.StackFrameStream#next()->void::: stack frame stream next
sun.jvm.hotspot.runtime.StackFrameStream#getCurrent()->Frame:::Query
sun.jvm.hotspot.runtime.StackFrameStream#getRegisterMap()->RegisterMap::: stack frame stream get register map
sun.jvm.hotspot.runtime.StackValue#getType()->int:::This returns one of the "enum" values in BasicType.java
sun.jvm.hotspot.runtime.StackValue#getObject()->OopHandle::: stack value get object
sun.jvm.hotspot.runtime.StackValue#objIsScalarReplaced()->boolean::: stack value obj is scalar replaced
sun.jvm.hotspot.runtime.StackValue#getInteger()->long::: stack value get integer
sun.jvm.hotspot.runtime.StackValue#equals(Object)->boolean::: stack value equals
sun.jvm.hotspot.runtime.StackValue#hashCode()->int::: stack value hash code
sun.jvm.hotspot.runtime.StackValue#print()->void::: stack value print
sun.jvm.hotspot.runtime.StackValue#printOn(PrintStream)->void::: stack value print on
sun.jvm.hotspot.runtime.StackValueCollection#add(StackValue)->void::: stack value collection add
sun.jvm.hotspot.runtime.StackValueCollection#size()->int::: stack value collection size
sun.jvm.hotspot.runtime.StackValueCollection#isEmpty()->boolean::: stack value collection is empty
sun.jvm.hotspot.runtime.StackValueCollection#get(int)->StackValue::: stack value collection get
sun.jvm.hotspot.runtime.StackValueCollection#booleanAt(int)->boolean::: stack value collection boolean at
sun.jvm.hotspot.runtime.StackValueCollection#byteAt(int)->byte::: stack value collection byte at
sun.jvm.hotspot.runtime.StackValueCollection#charAt(int)->char::: stack value collection char at
sun.jvm.hotspot.runtime.StackValueCollection#shortAt(int)->short::: stack value collection short at
sun.jvm.hotspot.runtime.StackValueCollection#intAt(int)->int::: stack value collection int at
sun.jvm.hotspot.runtime.StackValueCollection#longAt(int)->long::: stack value collection long at
sun.jvm.hotspot.runtime.StackValueCollection#oopHandleAt(int)->OopHandle::: stack value collection oop handle at
sun.jvm.hotspot.runtime.StackValueCollection#floatAt(int)->float::: stack value collection float at
sun.jvm.hotspot.runtime.StackValueCollection#doubleAt(int)->double::: stack value collection double at
sun.jvm.hotspot.runtime.StaticBaseConstructor#instantiateWrapperFor(Address)->VMObject:::Instantiate a wrapper using staticType
sun.jvm.hotspot.runtime.StubRoutines#returnsToCallStub(Address)->boolean::: stub routines returns to call stub
sun.jvm.hotspot.runtime.Thread#suspendFlags()->int::: thread suspend flags
sun.jvm.hotspot.runtime.Thread#isExternalSuspend()->boolean::: thread is external suspend
sun.jvm.hotspot.runtime.Thread#isExtSuspended()->boolean::: thread is ext suspended
sun.jvm.hotspot.runtime.Thread#isBeingExtSuspended()->boolean::: thread is being ext suspended
sun.jvm.hotspot.runtime.Thread#isAnySuspended()->boolean::: thread is any suspended
sun.jvm.hotspot.runtime.Thread#hasAsyncException()->boolean::: thread has async exception
sun.jvm.hotspot.runtime.Thread#tlab()->ThreadLocalAllocBuffer::: thread tlab
sun.jvm.hotspot.runtime.Thread#activeHandles()->JNIHandleBlock::: thread active handles
sun.jvm.hotspot.runtime.Thread#allocatedBytes()->long::: thread allocated bytes
sun.jvm.hotspot.runtime.Thread#isVMThread()->boolean::: thread is thread
sun.jvm.hotspot.runtime.Thread#isJavaThread()->boolean::: thread is java thread
sun.jvm.hotspot.runtime.Thread#isCompilerThread()->boolean::: thread is compiler thread
sun.jvm.hotspot.runtime.Thread#isCodeCacheSweeperThread()->boolean::: thread is code cache sweeper thread
sun.jvm.hotspot.runtime.Thread#isHiddenFromExternalView()->boolean::: thread is hidden from external view
sun.jvm.hotspot.runtime.Thread#isJvmtiAgentThread()->boolean::: thread is jvmti agent thread
sun.jvm.hotspot.runtime.Thread#isWatcherThread()->boolean::: thread is watcher thread
sun.jvm.hotspot.runtime.Thread#isConcurrentMarkSweepThread()->boolean::: thread is concurrent mark sweep thread
sun.jvm.hotspot.runtime.Thread#isServiceThread()->boolean::: thread is service thread
sun.jvm.hotspot.runtime.Thread#oopsDo(AddressVisitor)->void:::Memory operations
sun.jvm.hotspot.runtime.Thread#getCurrentPendingMonitor()->ObjectMonitor::: thread get current pending monitor
sun.jvm.hotspot.runtime.Thread#getCurrentWaitingMonitor()->ObjectMonitor::: thread get current waiting monitor
sun.jvm.hotspot.runtime.Thread#isLockOwned(Address)->boolean::: thread is lock owned
sun.jvm.hotspot.runtime.Thread#isInStack(Address)->boolean::: thread is in stack
sun.jvm.hotspot.runtime.Thread#threadObjectAddress()->Address:::Assistance for ObjectMonitor implementation
sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer#start()->Address::: thread local alloc buffer start
sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer#end()->Address::: thread local alloc buffer end
sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer#top()->Address::: thread local alloc buffer top
sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer#hardEnd()->Address::: thread local alloc buffer hard end
sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer#startAsOopHandle()->OopHandle:::Support for iteration over heap -- not sure how this will       interact with GC in reflective system, but necessary for the       debugging mechanism
sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer#nextOopHandle(OopHandle, long)->OopHandle:::Support for iteration over heap -- not sure how this will       interact with GC in reflective system, but necessary for the       debugging mechanism
sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer#print()->void::: thread local alloc buffer print
sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer#contains(Address)->boolean::: thread local alloc buffer contains
sun.jvm.hotspot.runtime.ThreadLocalAllocBuffer#printOn(PrintStream)->void::: thread local alloc buffer print on
sun.jvm.hotspot.runtime.Threads#first()->JavaThread:::NOTE: this returns objects of type JavaThread, CompilerThread,       JvmtiAgentThread, and ServiceThread
sun.jvm.hotspot.runtime.Threads#getNumberOfThreads()->int::: threads get number of threads
sun.jvm.hotspot.runtime.Threads#createJavaThreadWrapper(Address)->JavaThread:::Routine for instantiating appropriately-typed wrapper for a       JavaThread
sun.jvm.hotspot.runtime.Threads#oopsDo(AddressVisitor)->void:::Memory operations
sun.jvm.hotspot.runtime.Threads#owningThreadFromMonitor(Address)->JavaThread::: threads owning thread from monitor
sun.jvm.hotspot.runtime.Threads#owningThreadFromMonitor(ObjectMonitor)->JavaThread::: threads owning thread from monitor
sun.jvm.hotspot.runtime.Threads#getPendingThreads(ObjectMonitor)->List::: threads get pending threads
sun.jvm.hotspot.runtime.Threads#getWaitingThreads(ObjectMonitor)->List::: threads get waiting threads
sun.jvm.hotspot.runtime.ThreadStackTrace#getStackDepth()->int::: thread stack trace get stack depth
sun.jvm.hotspot.runtime.ThreadStackTrace#stackFrameAt(int)->StackFrameInfo::: thread stack trace stack frame at
sun.jvm.hotspot.runtime.ThreadStackTrace#dumpStack(int)->void::: thread stack trace dump stack
sun.jvm.hotspot.runtime.ThreadState#getPrintVal()->String::: thread state get print val
sun.jvm.hotspot.runtime.VFrame#newVFrame(Frame, RegisterMap, JavaThread, boolean, boolean)->VFrame:::Factory method for creating vframes
sun.jvm.hotspot.runtime.VFrame#newVFrame(Frame, RegisterMap, JavaThread)->VFrame:::Factory method for creating vframes
sun.jvm.hotspot.runtime.VFrame#getFrame()->Frame:::Accessors
sun.jvm.hotspot.runtime.VFrame#getRegisterMap()->RegisterMap::: frame get register map
sun.jvm.hotspot.runtime.VFrame#getThread()->JavaThread::: frame get thread
sun.jvm.hotspot.runtime.VFrame#sender()->VFrame:::Returns the sender vframe
sun.jvm.hotspot.runtime.VFrame#sender(boolean)->VFrame:::Returns the sender vframe; takes argument for debugging situation
sun.jvm.hotspot.runtime.VFrame#javaSender()->JavaVFrame:::Returns the next javaVFrame on the stack (skipping all other       kinds of frames)
sun.jvm.hotspot.runtime.VFrame#isTop()->boolean:::Answers if the this is the top vframe in the frame, i.e., if the       sender vframe is in the caller frame
sun.jvm.hotspot.runtime.VFrame#top()->VFrame:::Returns top vframe within same frame (see isTop())
sun.jvm.hotspot.runtime.VFrame#isEntryFrame()->boolean:::Type testing operations
sun.jvm.hotspot.runtime.VFrame#isJavaFrame()->boolean::: frame is java frame
sun.jvm.hotspot.runtime.VFrame#isInterpretedFrame()->boolean::: frame is interpreted frame
sun.jvm.hotspot.runtime.VFrame#isCompiledFrame()->boolean::: frame is compiled frame
sun.jvm.hotspot.runtime.VFrame#isDeoptimized()->boolean::: frame is deoptimized
sun.jvm.hotspot.runtime.VFrame#mayBeImpreciseDbg()->boolean:::An indication of whether this VFrame is "precise" or a best       guess
sun.jvm.hotspot.runtime.VFrame#print()->void:::Printing operations
sun.jvm.hotspot.runtime.VFrame#printOn(PrintStream)->void::: frame print on
sun.jvm.hotspot.runtime.VFrame#printValue()->void::: frame print value
sun.jvm.hotspot.runtime.VFrame#printValueOn(PrintStream)->void::: frame print value on
sun.jvm.hotspot.runtime.VirtualBaseConstructor#addMapping(String, Class)->boolean:::Adds a mapping from the given C++ type name to the given Java       class
sun.jvm.hotspot.runtime.VirtualBaseConstructor#instantiateWrapperFor(Address)->T:::Instantiate the most-precisely typed wrapper object available       for the type of the given Address
sun.jvm.hotspot.runtime.VirtualConstructor#addMapping(String, Class)->boolean:::Adds a mapping from the given C++ type name to the given Java       class
sun.jvm.hotspot.runtime.VirtualConstructor#instantiateWrapperFor(Address)->VMObject:::Instantiate the most-precisely typed wrapper object available       for the type of the given Address
sun.jvm.hotspot.runtime.VM.Flag#getType()->String::: flag get type
sun.jvm.hotspot.runtime.VM.Flag#getName()->String::: flag get name
sun.jvm.hotspot.runtime.VM.Flag#getAddress()->Address::: flag get address
sun.jvm.hotspot.runtime.VM.Flag#getOrigin()->int::: flag get origin
sun.jvm.hotspot.runtime.VM.Flag#isBool()->boolean::: flag is bool
sun.jvm.hotspot.runtime.VM.Flag#getBool()->boolean::: flag get bool
sun.jvm.hotspot.runtime.VM.Flag#isInt()->boolean::: flag is int
sun.jvm.hotspot.runtime.VM.Flag#getInt()->long::: flag get int
sun.jvm.hotspot.runtime.VM.Flag#isUInt()->boolean::: flag is int
sun.jvm.hotspot.runtime.VM.Flag#getUInt()->long::: flag get int
sun.jvm.hotspot.runtime.VM.Flag#isIntx()->boolean::: flag is intx
sun.jvm.hotspot.runtime.VM.Flag#getIntx()->long::: flag get intx
sun.jvm.hotspot.runtime.VM.Flag#isUIntx()->boolean::: flag is intx
sun.jvm.hotspot.runtime.VM.Flag#getUIntx()->long::: flag get intx
sun.jvm.hotspot.runtime.VM.Flag#isSizet()->boolean::: flag is sizet
sun.jvm.hotspot.runtime.VM.Flag#getSizet()->long::: flag get sizet
sun.jvm.hotspot.runtime.VM.Flag#getValue()->String::: flag get value
sun.jvm.hotspot.runtime.VM#initialize(TypeDataBase, boolean)->void:::This could be used by a reflective runtime system
sun.jvm.hotspot.runtime.VM#initialize(TypeDataBase, JVMDebugger)->void:::This is used by the debugging system
sun.jvm.hotspot.runtime.VM#shutdown()->void:::This is used by the debugging system
sun.jvm.hotspot.runtime.VM#registerVMInitializedObserver(Observer)->void:::This is used by both the debugger and any runtime system
sun.jvm.hotspot.runtime.VM#getVM()->VM:::This is the primary accessor used by both the debugger and any       potential runtime system
sun.jvm.hotspot.runtime.VM#registerVMResumedObserver(Observer)->void:::This is only used by the debugging system
sun.jvm.hotspot.runtime.VM#registerVMSuspendedObserver(Observer)->void:::This is only used by the debugging system
sun.jvm.hotspot.runtime.VM#fireVMResumed()->void:::This is only used by the debugging system
sun.jvm.hotspot.runtime.VM#fireVMSuspended()->void:::This is only used by the debugging system
sun.jvm.hotspot.runtime.VM#getOS()->String:::Returns the OS this VM is running on
sun.jvm.hotspot.runtime.VM#getCPU()->String:::Returns the CPU this VM is running on
sun.jvm.hotspot.runtime.VM#lookupType(String)->Type::: m lookup type
sun.jvm.hotspot.runtime.VM#lookupIntConstant(String)->Integer::: m lookup int constant
sun.jvm.hotspot.runtime.VM#getAddressValue(Address)->long::: m get address value
sun.jvm.hotspot.runtime.VM#getAddressSize()->long::: m get address size
sun.jvm.hotspot.runtime.VM#getOopSize()->long::: m get oop size
sun.jvm.hotspot.runtime.VM#getLogAddressSize()->long::: m get log address size
sun.jvm.hotspot.runtime.VM#getIntSize()->long::: m get int size
sun.jvm.hotspot.runtime.VM#getStackBias()->long:::NOTE: this offset is in BYTES in this system!
sun.jvm.hotspot.runtime.VM#isLP64()->boolean:::Indicates whether the underlying machine supports the LP64 data       model
sun.jvm.hotspot.runtime.VM#getBytesPerLong()->int:::Get bytes-per-long == long/double natural alignment.
sun.jvm.hotspot.runtime.VM#getBytesPerWord()->int::: m get bytes per word
sun.jvm.hotspot.runtime.VM#getMinObjAlignmentInBytes()->int:::Get minimum object alignment in bytes.
sun.jvm.hotspot.runtime.VM#getLogMinObjAlignmentInBytes()->int::: m get log min obj alignment in bytes
sun.jvm.hotspot.runtime.VM#getHeapWordSize()->int::: m get heap word size
sun.jvm.hotspot.runtime.VM#getHeapOopSize()->int::: m get heap oop size
sun.jvm.hotspot.runtime.VM#getIndexSetSize()->int::: m get index set size
sun.jvm.hotspot.runtime.VM#getKlassPtrSize()->int::: m get klass ptr size
sun.jvm.hotspot.runtime.VM#alignUp(long, long)->long:::Utility routine for getting data structure alignment correct
sun.jvm.hotspot.runtime.VM#alignDown(long, long)->long:::Utility routine for getting data structure alignment correct
sun.jvm.hotspot.runtime.VM#buildIntFromShorts(short, short)->int:::Utility routine for building an int from two "unsigned" 16-bit       shorts
sun.jvm.hotspot.runtime.VM#buildLongFromIntsPD(int, int)->long:::Utility routine for building a long from two "unsigned" 32-bit       ints in platform-dependent order
sun.jvm.hotspot.runtime.VM#getTypeDataBase()->TypeDataBase::: m get type data base
sun.jvm.hotspot.runtime.VM#getUniverse()->Universe::: m get universe
sun.jvm.hotspot.runtime.VM#getObjectHeap()->ObjectHeap::: m get object heap
sun.jvm.hotspot.runtime.VM#getSymbolTable()->SymbolTable::: m get symbol table
sun.jvm.hotspot.runtime.VM#getSystemDictionary()->SystemDictionary::: m get system dictionary
sun.jvm.hotspot.runtime.VM#getClassLoaderDataGraph()->ClassLoaderDataGraph::: m get class loader data graph
sun.jvm.hotspot.runtime.VM#getThreads()->Threads::: m get threads
sun.jvm.hotspot.runtime.VM#getObjectSynchronizer()->ObjectSynchronizer::: m get object synchronizer
sun.jvm.hotspot.runtime.VM#getJNIHandles()->JNIHandles::: m get handles
sun.jvm.hotspot.runtime.VM#getInterpreter()->Interpreter::: m get interpreter
sun.jvm.hotspot.runtime.VM#getStubRoutines()->StubRoutines::: m get stub routines
sun.jvm.hotspot.runtime.VM#getVMRegImplInfo()->VMRegImpl::: m get reg impl info
sun.jvm.hotspot.runtime.VM#getFileMapInfo()->FileMapInfo::: m get file map info
sun.jvm.hotspot.runtime.VM#getBytes()->Bytes::: m get bytes
sun.jvm.hotspot.runtime.VM#isBigEndian()->boolean:::Returns true if this is a isBigEndian, false otherwise
sun.jvm.hotspot.runtime.VM#isJvmtiSupported()->boolean:::Returns true if JVMTI is supported, false otherwise
sun.jvm.hotspot.runtime.VM#isCore()->boolean:::Returns true if this is a "core" build, false if either C1 or C2       is present
sun.jvm.hotspot.runtime.VM#isClientCompiler()->boolean:::Returns true if this is a C1 build, false otherwise
sun.jvm.hotspot.runtime.VM#isServerCompiler()->boolean:::Returns true if this is a C2 build, false otherwise
sun.jvm.hotspot.runtime.VM#useDerivedPointerTable()->boolean:::Returns true if C2 derived pointer table should be used, false otherwise
sun.jvm.hotspot.runtime.VM#getCodeCache()->CodeCache:::Returns the code cache; should not be used if is core build
sun.jvm.hotspot.runtime.VM#getRuntime1()->Runtime1:::Should only be called for C1 builds
sun.jvm.hotspot.runtime.VM#isDebugging()->boolean:::Test to see whether we're in debugging mode (NOTE: this really       should not be tested by this code; currently only used in       StackFrameStream)
sun.jvm.hotspot.runtime.VM#getDebugger()->JVMDebugger:::This is only used by the debugging (i.e., non-runtime) system
sun.jvm.hotspot.runtime.VM#isJavaPCDbg(Address)->boolean:::Indicates whether a given program counter is in Java code
sun.jvm.hotspot.runtime.VM#getInvocationEntryBCI()->int:::FIXME: figure out where to stick this
sun.jvm.hotspot.runtime.VM#wizardMode()->boolean::: m wizard mode
sun.jvm.hotspot.runtime.VM#getRevPtrs()->ReversePtrs::: m get rev ptrs
sun.jvm.hotspot.runtime.VM#setRevPtrs(ReversePtrs)->void::: m set rev ptrs
sun.jvm.hotspot.runtime.VM#getVMRelease()->String::: m get release
sun.jvm.hotspot.runtime.VM#getVMInternalInfo()->String::: m get internal info
sun.jvm.hotspot.runtime.VM#getReserveForAllocationPrefetch()->int::: m get reserve for allocation prefetch
sun.jvm.hotspot.runtime.VM#isSharingEnabled()->boolean::: m is sharing enabled
sun.jvm.hotspot.runtime.VM#isCompressedOopsEnabled()->boolean::: m is compressed oops enabled
sun.jvm.hotspot.runtime.VM#isCompressedKlassPointersEnabled()->boolean::: m is compressed klass pointers enabled
sun.jvm.hotspot.runtime.VM#getObjectAlignmentInBytes()->int::: m get object alignment in bytes
sun.jvm.hotspot.runtime.VM#getUseTLAB()->boolean:::Indicates whether Thread-Local Allocation Buffers are used
sun.jvm.hotspot.runtime.VM#getCommandLineBooleanFlag(String)->boolean::: m get command line boolean flag
sun.jvm.hotspot.runtime.VM#getCommandLineFlags()->Flag[]::: m get command line flags
sun.jvm.hotspot.runtime.VM#getCommandLineFlag(String)->Flag::: m get command line flag
sun.jvm.hotspot.runtime.VM#getSystemProperty(String)->String::: m get system property
sun.jvm.hotspot.runtime.VM#getSystemProperties()->Properties::: m get system properties
sun.jvm.hotspot.runtime.VMObject#toString()->String::: object to string
sun.jvm.hotspot.runtime.VMObject#equals(Object)->boolean::: object equals
sun.jvm.hotspot.runtime.VMObject#hashCode()->int::: object hash code
sun.jvm.hotspot.runtime.VMObject#getAddress()->Address::: object get address
sun.jvm.hotspot.runtime.VMObjectFactory#newObject(Class, Address)->Object::: object factory new object
sun.jvm.hotspot.runtime.VMReg#getValue()->int::: reg get value
sun.jvm.hotspot.runtime.VMReg#regEncode()->int::: reg reg encode
sun.jvm.hotspot.runtime.VMReg#equals(Object)->boolean::: reg equals
sun.jvm.hotspot.runtime.VMReg#lessThan(VMReg)->boolean::: reg less than
sun.jvm.hotspot.runtime.VMReg#lessThanOrEqual(VMReg)->boolean::: reg less than or equal
sun.jvm.hotspot.runtime.VMReg#greaterThan(VMReg)->boolean::: reg greater than
sun.jvm.hotspot.runtime.VMReg#greaterThanOrEqual(VMReg)->boolean::: reg greater than or equal
sun.jvm.hotspot.runtime.VMReg#minus(VMReg)->int::: reg minus
sun.jvm.hotspot.runtime.VMReg#reg2Stack()->int::: reg reg2 stack
sun.jvm.hotspot.runtime.vmSymbols#symbolAt(int)->Symbol:::vm symbols symbol at
sun.jvm.hotspot.runtime.VMVersionMismatchException#getMessage()->String::: version mismatch exception get message
sun.jvm.hotspot.runtime.VMVersionMismatchException#getSupportedVersions()->String::: version mismatch exception get supported versions
sun.jvm.hotspot.runtime.VMVersionMismatchException#getTargetVersion()->String::: version mismatch exception get target version
sun.jvm.hotspot.runtime.WatcherThread#isWatcherThread()->boolean::: watcher thread is watcher thread

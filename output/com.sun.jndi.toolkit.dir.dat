AttrFilter#check(Attributes):::Determines whether an attribute passes the filter.:::
ContainmentFilter#check(Attributes)::: containment filter check:::return->matchingAttrs->size->contains
ContainmentFilter#contains(Attributes, Attributes)::: containment filter contains:::if->return->m->subset->getAll->while->m->hasMore->if->return->target->m->next->fromSuper->superset->target->getID->get->if->return->else->if->target->size->vals->target->getAll->while->vals->hasMore->if->fromSuper->vals->next->contains->return->return
ContextEnumerator#getImmediateChildren(Context)::: context enumerator get immediate children:::return->ctx->listBindings
ContextEnumerator#newEnumerator(Context, int, String, boolean)::: context enumerator new enumerator:::return->new->ContextEnumerator
ContextEnumerator#hasMore()::: context enumerator has more:::return->hasMoreDescendants
ContextEnumerator#hasMoreElements()::: context enumerator has more elements:::try->return->hasMore->catch->return->finally
ContextEnumerator#nextElement()::: context enumerator next element:::try->return->next->catch->throw->e->toString->new->NoSuchElementException->finally
ContextEnumerator#next()::: context enumerator next:::if->return->root->getClass->getName->new->Binding->if->hasMoreDescendants->return->getNextDescendant->throw->new->NoSuchElementException
ContextEnumerator#close()::: context enumerator close:::
ContextEnumerator#hasMoreChildren()::: context enumerator has more children:::return->children->hasMore
ContextEnumerator#getNextChild()::: context enumerator get next child:::oldBinding->children->next->newBinding->if->oldBinding->isRelative->contextName->equals->parser->root->getNameParser->newName->parser->parse->newName->oldBinding->getName->add->if->println->newName->toString->oldBinding->getClassName->oldBinding->getObject->oldBinding->isRelative->new->Binding->else->if->println->return
ContextEnumerator#hasMoreDescendants()::: context enumerator has more descendants:::if->if->println->return->else->if->currentChildEnum->hasMore->if->println->return->else->if->println->return->hasMoreChildren
ContextEnumerator#getNextDescendant()::: context enumerator get next descendant:::if->if->println->return->else->if->currentChildEnum->hasMore->if->println->return->currentChildEnum->next->else->if->println->prepNextChild->return->getNextDescendant
ContextEnumerator#prepNextChild()::: context enumerator prep next child:::if->hasMoreChildren->try->getNextChild->catch->if->println->if->e->printStackTrace->finally->else->return->if->currentChild->getObject->currentChild->getObject->currentChild->getName->newEnumerator->if->println->else->if->println
DirSearch#search(DirContext, Attributes, String[])::: dir search search:::cons->new->SearchControls->return->new->ContextEnumerator->new->ContainmentFilter->new->LazySearchEnumerationImpl
DirSearch#search(DirContext, String, SearchControls)::: dir search search:::if->new->SearchControls->return->cons->getSearchScope->new->ContextEnumerator->new->SearchFilter->new->LazySearchEnumerationImpl
DirSearch#search(DirContext, String, Object[], SearchControls)::: dir search search:::strfilter->SearchFilter->format->return->search
HierMemDirCtx#close()::: hier mem dir ctx close:::
HierMemDirCtx#getNameInNamespace()::: hier mem dir ctx get name in namespace:::throw->new->OperationNotSupportedException
HierMemDirCtx#init()::: hier mem dir ctx init:::new->BasicAttributes->new->Hashtable<>
HierMemDirCtx#lookup(String)::: hier mem dir ctx lookup:::return->myParser->parse->lookup
HierMemDirCtx#lookup(Name)::: hier mem dir ctx lookup:::return->doLookup
HierMemDirCtx#doLookup(Name, boolean)::: hier mem dir ctx do lookup:::target->canonizeName->switch->name->size->break->bindings->get->break->ctx->bindings->name->getPrefix->get->if->else->ctx->name->getSuffix->doLookup->break->if->throw->name->toString->new->NameNotFoundException->if->try->return->DirectoryManager->getObjectInstance->catch->throw->e2->new->NamingException->e2->setRootCause->throw->finally->else->return
HierMemDirCtx#bind(String, Object)::: hier mem dir ctx bind:::myParser->parse->bind
HierMemDirCtx#bind(Name, Object)::: hier mem dir ctx bind:::doBind
HierMemDirCtx#bind(String, Object, Attributes)::: hier mem dir ctx bind:::myParser->parse->bind
HierMemDirCtx#bind(Name, Object, Attributes)::: hier mem dir ctx bind:::doBind
HierMemDirCtx#doBind(Name, Object, Attributes, boolean)::: hier mem dir ctx do bind:::if->name->isEmpty->throw->new->InvalidNameException->if->res->DirectoryManager->getStateToBind->res->getObject->res->getAttributes->ctx->getInternalName->doLookup->ctx->getLeafName->doBindAux->if->attrs->size->modifyAttributes
HierMemDirCtx#doBindAux(Name, Object)::: hier mem dir ctx do bind aux:::if->throw->readOnlyEx->fillInStackTrace->if->bindings->get->throw->name->toString->new->NameAlreadyBoundException->if->bindings->put->else->throw->new->SchemaViolationException
HierMemDirCtx#rebind(String, Object)::: hier mem dir ctx rebind:::myParser->parse->rebind
HierMemDirCtx#rebind(Name, Object)::: hier mem dir ctx rebind:::doRebind
HierMemDirCtx#rebind(String, Object, Attributes)::: hier mem dir ctx rebind:::myParser->parse->rebind
HierMemDirCtx#rebind(Name, Object, Attributes)::: hier mem dir ctx rebind:::doRebind
HierMemDirCtx#doRebind(Name, Object, Attributes, boolean)::: hier mem dir ctx do rebind:::if->name->isEmpty->throw->new->InvalidNameException->if->res->DirectoryManager->getStateToBind->res->getObject->res->getAttributes->ctx->getInternalName->doLookup->ctx->getLeafName->doRebindAux->if->attrs->size->modifyAttributes
HierMemDirCtx#doRebindAux(Name, Object)::: hier mem dir ctx do rebind aux:::if->throw->readOnlyEx->fillInStackTrace->if->bindings->put->else->throw->new->SchemaViolationException
HierMemDirCtx#unbind(String)::: hier mem dir ctx unbind:::myParser->parse->unbind
HierMemDirCtx#unbind(Name)::: hier mem dir ctx unbind:::if->name->isEmpty->throw->new->InvalidNameException->else->ctx->getInternalName->doLookup->ctx->getLeafName->doUnbind
HierMemDirCtx#doUnbind(Name)::: hier mem dir ctx do unbind:::if->throw->readOnlyEx->fillInStackTrace->bindings->remove
HierMemDirCtx#rename(String, String)::: hier mem dir ctx rename:::myParser->parse->myParser->parse->rename
HierMemDirCtx#rename(Name, Name)::: hier mem dir ctx rename:::if->newname->isEmpty->oldname->isEmpty->throw->new->InvalidNameException->if->getInternalName->getInternalName->equals->throw->new->InvalidNameException->ctx->getInternalName->doLookup->ctx->getLeafName->getLeafName->doRename
HierMemDirCtx#doRename(Name, Name)::: hier mem dir ctx do rename:::if->throw->readOnlyEx->fillInStackTrace->canonizeName->canonizeName->if->bindings->get->throw->newname->toString->new->NameAlreadyBoundException->oldBinding->bindings->remove->if->throw->oldname->toString->new->NameNotFoundException->bindings->put
HierMemDirCtx#list(String)::: hier mem dir ctx list:::return->myParser->parse->list
HierMemDirCtx#list(Name)::: hier mem dir ctx list:::ctx->doLookup->return->ctx->doList
HierMemDirCtx#doList()::: hier mem dir ctx do list:::return->bindings->keys->new->FlatNames
HierMemDirCtx#listBindings(String)::: hier mem dir ctx list bindings:::return->myParser->parse->listBindings
HierMemDirCtx#listBindings(Name)::: hier mem dir ctx list bindings:::ctx->doLookup->return->ctx->doListBindings
HierMemDirCtx#doListBindings(boolean)::: hier mem dir ctx do list bindings:::return->new->FlatBindings
HierMemDirCtx#destroySubcontext(String)::: hier mem dir ctx destroy subcontext:::myParser->parse->destroySubcontext
HierMemDirCtx#destroySubcontext(Name)::: hier mem dir ctx destroy subcontext:::ctx->getInternalName->doLookup->ctx->getLeafName->doDestroySubcontext
HierMemDirCtx#doDestroySubcontext(Name)::: hier mem dir ctx do destroy subcontext:::if->throw->readOnlyEx->fillInStackTrace->canonizeName->bindings->remove
HierMemDirCtx#createSubcontext(String)::: hier mem dir ctx create subcontext:::return->myParser->parse->createSubcontext
HierMemDirCtx#createSubcontext(Name)::: hier mem dir ctx create subcontext:::return->createSubcontext
HierMemDirCtx#createSubcontext(String, Attributes)::: hier mem dir ctx create subcontext:::return->myParser->parse->createSubcontext
HierMemDirCtx#createSubcontext(Name, Attributes)::: hier mem dir ctx create subcontext:::ctx->getInternalName->doLookup->return->ctx->getLeafName->doCreateSubcontext
HierMemDirCtx#doCreateSubcontext(Name, Attributes)::: hier mem dir ctx do create subcontext:::if->throw->readOnlyEx->fillInStackTrace->canonizeName->if->bindings->get->throw->name->toString->new->NameAlreadyBoundException->newCtx->createNewCtx->bindings->put->if->newCtx->modifyAttributes->return
HierMemDirCtx#lookupLink(String)::: hier mem dir ctx lookup link:::return->myParser->parse->lookupLink
HierMemDirCtx#lookupLink(Name)::: hier mem dir ctx lookup link:::return->lookup
HierMemDirCtx#getNameParser(String)::: hier mem dir ctx get name parser:::return
HierMemDirCtx#getNameParser(Name)::: hier mem dir ctx get name parser:::return
HierMemDirCtx#composeName(String, String)::: hier mem dir ctx compose name:::result->new->CompositeName->new->CompositeName->composeName->return->result->toString
HierMemDirCtx#composeName(Name, Name)::: hier mem dir ctx compose name:::canonizeName->canonizeName->result->prefix->clone->result->addAll->return
HierMemDirCtx#addToEnvironment(String, Object)::: hier mem dir ctx add to environment:::new->Hashtable<String,Object>->myEnv->clone->return->myEnv->put
HierMemDirCtx#removeFromEnvironment(String)::: hier mem dir ctx remove from environment:::if->return->myEnv->clone->return->myEnv->remove
HierMemDirCtx#getEnvironment()::: hier mem dir ctx get environment:::if->return->new->Hashtable<>->else->return->myEnv->clone
HierMemDirCtx#getAttributes(String)::: hier mem dir ctx get attributes:::return->myParser->parse->getAttributes
HierMemDirCtx#getAttributes(Name)::: hier mem dir ctx get attributes:::ctx->doLookup->return->ctx->doGetAttributes
HierMemDirCtx#doGetAttributes()::: hier mem dir ctx do get attributes:::return->attrs->clone
HierMemDirCtx#getAttributes(String, String[])::: hier mem dir ctx get attributes:::return->myParser->parse->getAttributes
HierMemDirCtx#getAttributes(Name, String[])::: hier mem dir ctx get attributes:::ctx->doLookup->return->ctx->doGetAttributes
HierMemDirCtx#doGetAttributes(String[])::: hier mem dir ctx do get attributes:::if->return->doGetAttributes->attrs->new->BasicAttributes->attr->for->i->return
HierMemDirCtx#modifyAttributes(String, int, Attributes)::: hier mem dir ctx modify attributes:::myParser->parse->modifyAttributes
HierMemDirCtx#modifyAttributes(Name, int, Attributes)::: hier mem dir ctx modify attributes:::if->attrs->size->throw->new->IllegalArgumentException->attrEnum->attrs->getAll->mods->attrs->size->new->ModificationItemArr->for->i->attrEnum->hasMoreElements->modifyAttributes
HierMemDirCtx#modifyAttributes(String, ModificationItem[])::: hier mem dir ctx modify attributes:::myParser->parse->modifyAttributes
HierMemDirCtx#modifyAttributes(Name, ModificationItem[])::: hier mem dir ctx modify attributes:::ctx->doLookup->ctx->doModifyAttributes
HierMemDirCtx#doModifyAttributes(ModificationItem[])::: hier mem dir ctx do modify attributes:::if->throw->readOnlyEx->fillInStackTrace->applyMods
HierMemDirCtx#applyMods(ModificationItem[], Attributes)::: hier mem dir ctx apply mods:::mod->existingAttr->modAttr->modVals->for->i->return
HierMemDirCtx#search(String, Attributes)::: hier mem dir ctx search:::return->search
HierMemDirCtx#search(Name, Attributes)::: hier mem dir ctx search:::return->search
HierMemDirCtx#search(String, Attributes, String[])::: hier mem dir ctx search:::return->myParser->parse->search
HierMemDirCtx#search(Name, Attributes, String[])::: hier mem dir ctx search:::target->doLookup->cons->new->SearchControls->cons->setReturningAttributes->return->target->doListBindings->new->ContainmentFilter->new->LazySearchEnumerationImpl
HierMemDirCtx#search(Name, String, SearchControls)::: hier mem dir ctx search:::target->doLookup->stringfilter->new->SearchFilter->return->cons->getSearchScope->new->HierContextEnumerator->new->LazySearchEnumerationImpl
HierMemDirCtx#search(Name, String, Object[], SearchControls)::: hier mem dir ctx search:::strfilter->SearchFilter->format->return->search
HierMemDirCtx#search(String, String, SearchControls)::: hier mem dir ctx search:::return->myParser->parse->search
HierMemDirCtx#search(String, String, Object[], SearchControls)::: hier mem dir ctx search:::return->myParser->parse->search
HierMemDirCtx#createNewCtx()::: hier mem dir ctx create new ctx:::return->new->HierMemDirCtx
HierMemDirCtx#canonizeName(Name)::: hier mem dir ctx canonize name:::canonicalName->if->new->HierarchicalName->n->name->size->for->i->return
HierMemDirCtx#getInternalName(Name)::: hier mem dir ctx get internal name:::return->name->name->size->getPrefix
HierMemDirCtx#getLeafName(Name)::: hier mem dir ctx get leaf name:::return->name->name->size->getSuffix
HierMemDirCtx#getSchema(String)::: hier mem dir ctx get schema:::throw->new->OperationNotSupportedException
HierMemDirCtx#getSchema(Name)::: hier mem dir ctx get schema:::throw->new->OperationNotSupportedException
HierMemDirCtx#getSchemaClassDefinition(String)::: hier mem dir ctx get schema class definition:::throw->new->OperationNotSupportedException
HierMemDirCtx#getSchemaClassDefinition(Name)::: hier mem dir ctx get schema class definition:::throw->new->OperationNotSupportedException
HierMemDirCtx#setReadOnly(NamingException)::: hier mem dir ctx set read only:::
HierMemDirCtx#setIgnoreCase(boolean)::: hier mem dir ctx set ignore case:::
HierMemDirCtx#setNameParser(NameParser)::: hier mem dir ctx set name parser:::
HierMemDirCtx.BaseFlatNames#hasMoreElements()::: base flat names has more elements:::try->return->hasMore->catch->return->finally
HierMemDirCtx.BaseFlatNames#hasMore()::: base flat names has more:::return->names->hasMoreElements
HierMemDirCtx.BaseFlatNames#nextElement()::: base flat names next element:::try->return->next->catch->throw->e->toString->new->NoSuchElementException->finally
HierMemDirCtx.BaseFlatNames#next()::: base flat names next:::
HierMemDirCtx.BaseFlatNames#close()::: base flat names close:::
HierMemDirCtx.FlatNames#next()::: flat names next:::name->names->nextElement->className->bindings->get->getClass->getName->return->name->toString->new->NameClassPair
HierMemDirCtx.FlatBindings#next()::: flat bindings next:::name->names->nextElement->obj->bds->get->answer->if->attrs->obj->getAttributes->try->DirectoryManager->getObjectInstance->catch->throw->e2->new->NamingException->e2->setRootCause->throw->finally->return->name->toString->new->Binding
HierMemDirCtx.HierContextEnumerator#getImmediateChildren(Context)::: hier context enumerator get immediate children:::return->doListBindings
HierMemDirCtx.HierContextEnumerator#newEnumerator(Context, int, String, boolean)::: hier context enumerator new enumerator:::return->new->HierContextEnumerator
HierarchicalName#hashCode()::: hierarchical name hash code:::if->name->toString->toUpperCase->len->name->length->off->val->new->charArr->name->getChars->for->i->return
HierarchicalName#getPrefix(int)::: hierarchical name get prefix:::comps->super->getPrefix->getAll->return->new->HierarchicalName
HierarchicalName#getSuffix(int)::: hierarchical name get suffix:::comps->super->getSuffix->getAll->return->new->HierarchicalName
HierarchicalName#clone()::: hierarchical name clone:::return->getAll->new->HierarchicalName
HierarchicalNameParser#parse(String)::: hierarchical name parser parse:::return->new->HierarchicalName
LazySearchEnumerationImpl#hasMore()::: lazy search enumeration impl has more:::return->findNextMatch
LazySearchEnumerationImpl#hasMoreElements()::: lazy search enumeration impl has more elements:::try->return->hasMore->catch->return->finally
LazySearchEnumerationImpl#nextElement()::: lazy search enumeration impl next element:::try->return->findNextMatch->catch->throw->e->toString->new->NoSuchElementException->finally
LazySearchEnumerationImpl#next()::: lazy search enumeration impl next:::return->findNextMatch
LazySearchEnumerationImpl#close()::: lazy search enumeration impl close:::if->candidates->close
LazySearchEnumerationImpl#findNextMatch(boolean)::: lazy search enumeration impl find next match:::answer->if->if->return->else->next->obj->targetAttrs->while->candidates->hasMore->candidates->next->next->getObject->if->getAttributes->if->filter->check->if->cons->getReturningObjFlag->else->if->try->nm->next->getName->new->CompositeName->DirectoryManager->getObjectInstance->catch->throw->e2->new->NamingException->e2->setRootCause->throw->finally->next->getName->next->getClassName->SearchFilter->cons->getReturningAttributes->selectAttributes->new->SearchResult->if->return->return
SearchFilter.StringFilter#parse()::: string filter parse:::
SearchFilter#check(Attributes)::: search filter check:::if->return->return->rootFilter->check
SearchFilter#normalizeFilter()::: search filter normalize filter:::skipWhiteSpace->if->getCurrentChar->if->println
SearchFilter#skipWhiteSpace()::: search filter skip white space:::while->Character->getCurrentChar->isWhitespace->consumeChar
SearchFilter#createNextFilter()::: search filter create next filter:::filter->skipWhiteSpace->try->if->getCurrentChar->throw->new->InvalidSearchFilterException->this->consumeChar->skipWhiteSpace->switch->getCurrentChar->if->println->new->CompoundFilter->filter->parse->break->if->println->new->CompoundFilter->filter->parse->break->if->println->new->NotFilter->filter->parse->break->if->println->new->AtomicFilter->filter->parse->break->skipWhiteSpace->if->getCurrentChar->throw->new->InvalidSearchFilterException->this->consumeChar->catch->if->println->throw->if->e->getMessage->println->e->printStackTrace->throw->new->InvalidSearchFilterException->finally->return
SearchFilter#getCurrentChar()::: search filter get current char:::return->filter->charAt
SearchFilter#relCharAt(int)::: search filter rel char at:::return->filter->charAt
SearchFilter#consumeChar()::: search filter consume char:::
SearchFilter#consumeChars(int)::: search filter consume chars:::
SearchFilter#relIndexOf(int)::: search filter rel index of:::return->filter->indexOf
SearchFilter#relSubstring(int, int)::: search filter rel substring:::if->println->return->filter->substring
SearchFilter.CompoundFilter#parse()::: compound filter parse:::SearchFilter.this->consumeChar->while->SearchFilter.this->getCurrentChar->if->println->filter->SearchFilter.this->createNextFilter->subFilters->addElement->skipWhiteSpace
SearchFilter.CompoundFilter#check(Attributes)::: compound filter check:::for->i->subFilters->size->return
SearchFilter.NotFilter#parse()::: not filter parse:::SearchFilter.this->consumeChar->SearchFilter.this->createNextFilter
SearchFilter.NotFilter#check(Attributes)::: not filter check:::return->filter->check
SearchFilter.AtomicFilter#parse()::: atomic filter parse:::skipWhiteSpace->try->endPos->SearchFilter.this->relIndexOf->i->SearchFilter.this->relIndexOf->if->println->qualifier->SearchFilter.this->relCharAt->switch->if->println->SearchFilter.this->relSubstring->SearchFilter.this->relSubstring->break->if->println->SearchFilter.this->relSubstring->SearchFilter.this->relSubstring->break->if->println->SearchFilter.this->relSubstring->SearchFilter.this->relSubstring->break->if->println->throw->new->OperationNotSupportedException->if->println->SearchFilter.this->relSubstring->SearchFilter.this->relSubstring->break->attrID->trim->value->trim->SearchFilter.this->consumeChars->catch->if->e->getMessage->println->e->printStackTrace->sfe->new->InvalidSearchFilterException->sfe->setRootCause->throw->finally->if->println
SearchFilter.AtomicFilter#check(Attributes)::: atomic filter check:::candidates->try->attr->targetAttrs->get->if->return->attr->getAll->catch->if->println->return->finally->while->candidates->hasMoreElements->val->candidates->nextElement->toString->if->println->switch->if->substringMatch->if->println->return->break->if->println->if->val->compareTo->return->break->if->println->if->val->compareTo->return->break->if->println->return
SearchFilter.AtomicFilter#substringMatch(String, String)::: atomic filter substring match:::if->proto->Character->toString->equals->if->println->return->if->proto->indexOf->return->proto->equalsIgnoreCase->if->println->currentPos->subStrs->new->StringTokenizer->if->proto->charAt->value->toLowerCase->subStrs->nextToken->toLowerCase->startsWith->if->println->return->while->subStrs->hasMoreTokens->currentStr->subStrs->nextToken->if->println->value->toLowerCase->currentStr->toLowerCase->indexOf->if->return->currentStr->length->if->proto->proto->length->charAt->value->length->if->println->return->return
SearchFilter#format(Attributes):::Creates an LDAP filter as a conjunction of the attributes supplied.:::if->attrs->size->return->answer->attr->for->e->attrs->getAll->e->hasMore->return
SearchFilter#hexDigit(StringBuffer, byte)::: search filter hex digit:::c->if->else->buf->append->if->else->buf->append
SearchFilter#getEncodedStringRep(Object):::Returns the string representation of an object (such as an attr value):::str->if->return->if->bytes->b1->new->StringBuffer->for->i->return->b1->toString->if->obj->toString->else->len->str->length->sb->new->StringBuilder->ch->for->i->return->sb->toString
SearchFilter#findUnescaped(char, String, int):::Finds the first occurrence of ch in val starting from position start:::len->val->length->while->where->val->indexOf->if->val->charAt->return->return
SearchFilter#format(String, Object[])::: search filter format:::param->where->start->answer->expr->length->new->StringBuilder->while->findUnescaped->pstart->pend->expr->indexOf->if->throw->new->InvalidSearchFilterException->try->Integer->expr->substring->parseInt->catch->throw->new->InvalidSearchFilterException->finally->if->throw->new->InvalidSearchFilterException->answer->expr->substring->append->getEncodedStringRep->append->if->expr->length->answer->expr->substring->append->return->answer->toString
SearchFilter#selectAttributes(Attributes, String[])::: search filter select attributes:::if->return->result->new->BasicAttributes->for->i->return

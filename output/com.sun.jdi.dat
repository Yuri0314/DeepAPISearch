Accessible#modifiers():::Returns the Java&trade; programming language modifiers, encoded in an integer:::
Accessible#isPrivate():::Determines if this object mirrors a private item:::
Accessible#isPackagePrivate():::Determines if this object mirrors a package private item:::
Accessible#isProtected():::Determines if this object mirrors a protected item:::
Accessible#isPublic():::Determines if this object mirrors a public item:::
ArrayReference#length():::Returns the number of components in this array.:::
ArrayReference#getValue(int):::Returns an array component value.:::
ArrayReference#getValues():::Returns all of the components in this array.:::
ArrayReference#getValues(int, int):::Returns a range of array components.:::
ArrayReference#setValue(int, Value):::Replaces an array component with another value:::
ArrayReference#setValues(List):::Replaces all array components with other values:::
ArrayReference#setValues(int, List, int, int):::Replaces a range of array components with other values:::
ArrayType#newInstance(int):::Creates a new instance of this array class in the target VM:::
ArrayType#componentSignature():::Gets the JNI signature of the components of this array class:::
ArrayType#componentTypeName():::Returns a text representation of the component type of this array.:::
ArrayType#componentType():::Returns the component type of this array, as specified in the array declaration:::
BooleanValue#value():::Returns this BooleanValue as a boolean.:::
BooleanValue#equals(Object):::Compares the specified Object with this BooleanValue for equality.:::
BooleanValue#hashCode():::Returns the hash code value for this BooleanValue.:::
Bootstrap#virtualMachineManager():::Returns the virtual machine manager:::return->VirtualMachineManagerImpl->virtualMachineManager
ByteValue#value():::Returns this ByteValue as a byte.:::
ByteValue#equals(Object):::Compares the specified Object with this ByteValue for equality.:::
ByteValue#hashCode():::Returns the hash code value for this BooleanValue.:::
CharValue#value():::Returns this CharValue as a char.:::
CharValue#equals(Object):::Compares the specified Object with this CharValue for equality.:::
CharValue#hashCode():::Returns the hash code value for this CharValue.:::
ClassLoaderReference#definedClasses():::Returns a list of all loaded classes that were defined by this class loader:::
ClassLoaderReference#visibleClasses():::Returns a list of all classes for which this class loader has been recorded as the initiating loader in the target VM:::
ClassObjectReference#reflectedType():::Returns the ReferenceType corresponding to this class object:::
ClassType#superclass():::Gets the superclass of this class.:::
ClassType#interfaces():::Gets the interfaces directly implemented by this class:::
ClassType#allInterfaces():::Gets the interfaces directly and indirectly implemented by this class:::
ClassType#subclasses():::Gets the currently loaded, direct subclasses of this class:::
ClassType#isEnum():::Determine if this class was declared as an enum.:::
ClassType#setValue(Field, Value):::Assigns a value to a static field:::
ClassType#invokeMethod(ThreadReference, Method, List, int):::Invokes the specified static Method in the target VM:::
ClassType#newInstance(ThreadReference, Method, List, int):::Constructs a new instance of this type, using the given constructor Method in the target VM:::
ClassType#concreteMethodByName(String, String):::Returns a the single non-abstract Method visible from this class that has the given name and signature:::
DoubleValue#value():::Returns this DoubleValue as a double.:::
DoubleValue#equals(Object):::Compares the specified Object with this DoubleValue for equality.:::
DoubleValue#hashCode():::Returns the hash code value for this DoubleValue.:::
Field#typeName():::Returns a text representation of the type of this field:::
Field#type():::Returns the type of this field:::
Field#isTransient():::Determine if this is a transient field.:::
Field#isVolatile():::Determine if this is a volatile field.:::
Field#isEnumConstant():::Determine if this is a field that represents an enum constant.:::
Field#equals(Object):::Compares the specified Object with this field for equality.:::
Field#hashCode():::Returns the hash code value for this Field.:::
FloatValue#value():::Returns this FloatValue as a float.:::
FloatValue#equals(Object):::Compares the specified Object with this FloatValue for equality.:::
FloatValue#hashCode():::Returns the hash code value for this FloatValue.:::
IntegerValue#value():::Returns this IntegerValue as an int.:::
IntegerValue#equals(Object):::Compares the specified Object with this IntegerValue for equality.:::
IntegerValue#hashCode():::Returns the hash code value for this IntegerValue.:::
InterfaceType#superinterfaces():::Gets the interfaces directly extended by this interface:::
InterfaceType#subinterfaces():::Gets the currently prepared interfaces which directly extend this interface:::
InterfaceType#implementors():::Gets the currently prepared classes which directly implement this interface:::
InterfaceType#invokeMethod(ThreadReference, Method, List, int):::Invokes the specified static Method in the target VM:::throw->new->UnsupportedOperationException
LocalVariable#name():::Gets the name of the local variable.:::
LocalVariable#typeName():::Returns a text representation of the type of this variable:::
LocalVariable#type():::Returns the type of this variable:::
LocalVariable#signature():::Gets the JNI signature of the local variable.:::
LocalVariable#genericSignature():::Gets the generic signature for this variable if there is one:::
LocalVariable#isVisible(StackFrame):::Determines whether this variable can be accessed from the given StackFrame:::
LocalVariable#isArgument():::Determines if this variable is an argument to its method.:::
LocalVariable#equals(Object):::Compares the specified Object with this LocalVariable for equality.:::
LocalVariable#hashCode():::Returns the hash code value for this LocalVariable.:::
Locatable#location():::Returns the Location of this mirror, if there is executable code associated with it:::
Location#declaringType():::Gets the type to which this Location belongs:::
Location#method():::Gets the method containing this Location.:::
Location#codeIndex():::Gets the code position within this location's method.:::
Location#sourceName():::Gets an identifing name for the source corresponding to this location:::
Location#sourceName(String):::Gets an identifing name for the source corresponding to this location:::
Location#sourcePath():::Gets the path to the source corresponding to this location:::
Location#sourcePath(String):::Gets the path to the source corresponding to this location:::
Location#lineNumber():::Gets the line number of this Location:::
Location#lineNumber(String):::The line number of this Location:::
Location#equals(Object):::Compares the specified Object with this Location for equality.:::
Location#hashCode():::Returns the hash code value for this Location.:::
LongValue#value():::Returns this LongValue as a long.:::
LongValue#equals(Object):::Compares the specified Object with this LongValue for equality.:::
LongValue#hashCode():::Returns the hash code value for this LongValue.:::
Method#returnTypeName():::Returns a text representation of the return type, as specified in the declaration of this method:::
Method#returnType():::Returns the return type, as specified in the declaration of this method:::
Method#argumentTypeNames():::Returns a list containing a text representation of the type of each formal parameter of this method:::
Method#argumentTypes():::Returns a list containing the type of each formal parameter of this method:::
Method#isAbstract():::Determine if this method is abstract.:::
Method#isDefault():::Determine if this method is a default method:::throw->new->UnsupportedOperationException
Method#isSynchronized():::Determine if this method is synchronized.:::
Method#isNative():::Determine if this method is native.:::
Method#isVarArgs():::Determine if this method accepts a variable number of arguments.:::
Method#isBridge():::Determine if this method is a bridge method:::
Method#isConstructor():::Determine if this method is a constructor.:::
Method#isStaticInitializer():::Determine if this method is a static initializer.:::
Method#isObsolete():::Determine if this method is obsolete.:::
Method#allLineLocations():::Returns a list containing a Location object for each executable source line in this method:::
Method#allLineLocations(String, String):::Returns a list containing a Location object for each executable source line in this method:::
Method#locationsOfLine(int):::Returns a List containing all Location objects that map to the given line number:::
Method#locationsOfLine(String, String, int):::Returns a List containing all Location objects that map to the given line number and source name:::
Method#locationOfCodeIndex(long):::Returns a Location for the given code index.:::
Method#variables():::Returns a list containing each LocalVariable declared in this method:::
Method#variablesByName(String):::Returns a list containing each LocalVariable of a given name in this method:::
Method#arguments():::Returns a list containing each LocalVariable that is declared as an argument of this method:::
Method#bytecodes():::Returns an array containing the bytecodes for this method:::
Method#location():::Returns the Location of this method, if there is executable code associated with it.:::
Method#equals(Object):::Compares the specified Object with this method for equality.:::
Method#hashCode():::Returns the hash code value for this Method.:::
Mirror#virtualMachine():::Gets the VirtualMachine to which this Mirror belongs:::
Mirror#toString():::Returns a String describing this mirror:::
ModuleReference#name():::Returns the module name:::
ModuleReference#classLoader():::Returns the ClassLoaderReference object for this module.:::
MonitorInfo#monitor():::Returns the ObjectReference object for the monitor.:::
MonitorInfo#stackDepth():::Returns the stack depth at which this monitor was acquired by the owning thread:::
MonitorInfo#thread():::Returns a ThreadReference object for the thread that owns the monitor.:::
ObjectReference#referenceType():::Gets the ReferenceType that mirrors the type of this object:::
ObjectReference#getValue(Field):::Gets the value of a given instance or static field in this object:::
ObjectReference#getValues(List):::Gets the value of multiple instance and/or static fields in this object:::
ObjectReference#setValue(Field, Value):::Sets the value of a given instance or static field in this object:::
ObjectReference#invokeMethod(ThreadReference, Method, List, int):::Invokes the specified Method on this object in the target VM:::
ObjectReference#disableCollection():::Prevents garbage collection for this object:::
ObjectReference#enableCollection():::Permits garbage collection for this object:::
ObjectReference#isCollected():::Determines if this object has been garbage collected in the target VM.:::
ObjectReference#uniqueID():::Returns a unique identifier for this ObjectReference:::
ObjectReference#waitingThreads():::Returns a List containing a ThreadReference for each thread currently waiting for this object's monitor:::
ObjectReference#owningThread():::Returns an ThreadReference for the thread, if any, which currently owns this object's monitor:::
ObjectReference#entryCount():::Returns the number times this object's monitor has been entered by the current owning thread:::
ObjectReference#referringObjects(long):::Returns objects that directly reference this object:::
ObjectReference#equals(Object):::Compares the specified Object with this ObjectReference for equality.:::
ObjectReference#hashCode():::Returns the hash code value for this ObjectReference.:::
PathSearchingVirtualMachine#classPath():::Get the class path for this virtual machine.:::
PathSearchingVirtualMachine#bootClassPath():::Get the boot class path for this virtual machine.:::
PathSearchingVirtualMachine#baseDirectory():::Get the base directory used for path searching:::
PrimitiveValue#booleanValue():::Converts this value to a BooleanValue and returns the result as a boolean.:::
PrimitiveValue#byteValue():::Converts this value to a ByteValue and returns the result as a byte:::
PrimitiveValue#charValue():::Converts this value to a CharValue and returns the result as a char:::
PrimitiveValue#shortValue():::Converts this value to a ShortValue and returns the result as a short:::
PrimitiveValue#intValue():::Converts this value to an IntegerValue and returns the result as an int:::
PrimitiveValue#longValue():::Converts this value to a LongValue and returns the result as a long:::
PrimitiveValue#floatValue():::Converts this value to a FloatValue and returns the result as a float:::
PrimitiveValue#doubleValue():::Converts this value to a DoubleValue and returns the result as a double:::
ReferenceType#name():::Gets the fully qualified name of this type:::
ReferenceType#genericSignature():::Gets the generic signature for this type if there is one:::
ReferenceType#classLoader():::Gets the classloader object which loaded the class corresponding to this type.:::
ReferenceType#module():::Gets the module object which contains the class corresponding to this type:::throw->new->java.lang.UnsupportedOperationException
ReferenceType#sourceName():::Gets an identifying name for the source corresponding to the declaration of this type:::
ReferenceType#sourceNames(String):::Gets the identifying names for all the source corresponding to the declaration of this type:::
ReferenceType#sourcePaths(String):::Gets the paths to the source corresponding to the declaration of this type:::
ReferenceType#sourceDebugExtension():::Get the source debug extension of this type:::
ReferenceType#isStatic():::Determines if this type was declared static:::
ReferenceType#isAbstract():::Determines if this type was declared abstract:::
ReferenceType#isFinal():::Determines if this type was declared final:::
ReferenceType#isPrepared():::Determines if this type has been prepared:::
ReferenceType#isVerified():::Determines if this type has been verified:::
ReferenceType#isInitialized():::Determines if this type has been initialized:::
ReferenceType#failedToInitialize():::Determines if initialization failed for this class:::
ReferenceType#fields():::Returns a list containing each Field declared in this type:::
ReferenceType#visibleFields():::Returns a list containing each unhidden and unambiguous Field in this type:::
ReferenceType#allFields():::Returns a list containing each Field declared in this type, and its superclasses, implemented interfaces, and/or superinterfaces:::
ReferenceType#fieldByName(String):::Finds the visible Field with the given non-ambiguous name:::
ReferenceType#methods():::Returns a list containing each Method declared directly in this type:::
ReferenceType#visibleMethods():::Returns a list containing each Method declared or inherited by this type:::
ReferenceType#allMethods():::Returns a list containing each Method declared in this type, and its superclasses, implemented interfaces, and/or superinterfaces:::
ReferenceType#methodsByName(String):::Returns a List containing each visible Method that has the given name:::
ReferenceType#methodsByName(String, String):::Returns a List containing each visible Method that has the given name and signature:::
ReferenceType#nestedTypes():::Returns a List containing ReferenceType objects that are declared within this type and are currently loaded into the Virtual Machine:::
ReferenceType#getValue(Field):::Gets the Value of a given static Field in this type:::
ReferenceType#getValues(List):::Returns a map containing the Value of each static Field in the given list:::
ReferenceType#classObject():::Returns the class object that corresponds to this type in the target VM:::
ReferenceType#allLineLocations():::Returns a list containing a Location object for each executable source line in this reference type:::
ReferenceType#allLineLocations(String, String):::Returns a list containing a Location object for each executable source line in this reference type:::
ReferenceType#locationsOfLine(int):::Returns a List containing all Location objects that map to the given line number:::
ReferenceType#locationsOfLine(String, String, int):::Returns a List containing all Location objects that map to the given line number:::
ReferenceType#availableStrata():::Return the available strata for this reference type:::
ReferenceType#defaultStratum():::Returns the default stratum for this reference type:::
ReferenceType#instances(long):::Returns instances of this ReferenceType:::
ReferenceType#equals(Object):::Compares the specified Object with this ReferenceType for equality.:::
ReferenceType#hashCode():::Returns the hash code value for this ObjectReference.:::
ReferenceType#majorVersion():::Returns the class major version number, as defined in the class file format of the Java Virtual Machine Specification:::
ReferenceType#minorVersion():::Returns the class minor version number, as defined in the class file format of the Java Virtual Machine Specification:::
ReferenceType#constantPoolCount():::Returns the number of entries in the constant pool plus one:::
ReferenceType#constantPool():::Returns the raw bytes of the constant pool in the format of the constant_pool item of the Class File Format in the Java Virtual Machine Specification:::
ShortValue#value():::Returns this ShortValue as a short.:::
ShortValue#equals(Object):::Compares the specified Object with this ShortValue for equality.:::
ShortValue#hashCode():::Returns the hash code value for this ShortValue.:::
StackFrame#location():::Returns the Location of the current instruction in the frame:::
StackFrame#thread():::Returns the thread under which this frame's method is running.:::
StackFrame#thisObject():::Returns the value of 'this' for the current frame:::
StackFrame#visibleVariables():::Returns a list containing each LocalVariable that can be accessed from this frame's location:::
StackFrame#visibleVariableByName(String):::Finds a LocalVariable that matches the given name and is visible at the current frame location:::
StackFrame#getValue(LocalVariable):::Gets the Value of a LocalVariable in this frame:::
StackFrame#getValues(List):::Returns the values of multiple local variables in this frame:::
StackFrame#setValue(LocalVariable, Value):::Sets the Value of a LocalVariable in this frame:::
StackFrame#getArgumentValues():::Returns the values of all arguments in this frame:::
StringReference#value():::Returns the StringReference as a String:::
ThreadGroupReference#name():::Returns the name of this thread group.:::
ThreadGroupReference#parent():::Returns the parent of this thread group.:::
ThreadGroupReference#suspend():::Suspends all threads in this thread group:::
ThreadGroupReference#resume():::Resumes all threads in this thread group:::
ThreadGroupReference#threads():::Returns a List containing a ThreadReference for each live thread in this thread group:::
ThreadGroupReference#threadGroups():::Returns a List containing each active ThreadGroupReference in this thread group:::
ThreadReference#name():::Returns the name of this thread.:::
ThreadReference#suspend():::Suspends this thread:::
ThreadReference#resume():::Resumes this thread:::
ThreadReference#suspendCount():::Returns the number of pending suspends for this thread:::
ThreadReference#stop(ObjectReference):::Stops this thread with an asynchronous exception:::
ThreadReference#interrupt():::Interrupts this thread unless the thread has been suspended by the debugger.:::
ThreadReference#status():::Returns the thread's status:::
ThreadReference#isSuspended():::Determines whether the thread has been suspended by the the debugger.:::
ThreadReference#isAtBreakpoint():::Determines whether the thread is suspended at a breakpoint.:::
ThreadReference#threadGroup():::Returns this thread's thread group.:::
ThreadReference#frameCount():::Returns the number of stack frames in the thread's current call stack:::
ThreadReference#frames():::Returns a List containing each StackFrame in the thread's current call stack:::
ThreadReference#frame(int):::Returns the StackFrame at the given index in the thread's current call stack:::
ThreadReference#frames(int, int):::Returns a List containing a range of StackFrame mirrors from the thread's current call stack:::
ThreadReference#ownedMonitors():::Returns a List containing an ObjectReference for each monitor owned by the thread:::
ThreadReference#ownedMonitorsAndFrames():::Returns a List containing a MonitorInfo object for each monitor owned by the thread:::
ThreadReference#currentContendedMonitor():::Returns an ObjectReference for the monitor, if any, for which this thread is currently waiting:::
ThreadReference#popFrames(StackFrame):::Pop stack frames:::
ThreadReference#forceEarlyReturn(Value):::Force a method to return before it reaches a return statement:::
Type#signature():::Returns the JNI-style signature for this type:::
TypeComponent#name():::Gets the name of this type component:::
TypeComponent#signature():::Gets the JNI-style signature for this type component:::
TypeComponent#genericSignature():::Gets the generic signature for this TypeComponent if there is one:::
TypeComponent#declaringType():::Returns the type in which this component was declared:::
TypeComponent#isStatic():::Determines if this TypeComponent is static:::
TypeComponent#isFinal():::Determines if this TypeComponent is final:::
TypeComponent#isSynthetic():::Determines if this TypeComponent is synthetic:::
Value#type():::Returns the run-time type of this value.:::
VirtualMachine#allModules():::Returns all modules:::throw->new->java.lang.UnsupportedOperationException
VirtualMachine#classesByName(String):::Returns the loaded reference types that match a given name:::
VirtualMachine#allClasses():::Returns all loaded types:::
VirtualMachine#redefineClasses(Map):::All classes given are redefined according to the definitions supplied:::
VirtualMachine#allThreads():::Returns a list of the currently running threads:::
VirtualMachine#suspend():::Suspends the execution of the application running in this virtual machine:::
VirtualMachine#resume():::Continues the execution of the application running in this virtual machine:::
VirtualMachine#topLevelThreadGroups():::Returns each thread group which does not have a parent:::
VirtualMachine#eventQueue():::Returns the event queue for this virtual machine:::
VirtualMachine#eventRequestManager():::Returns the event request manager for this virtual machine:::
VirtualMachine#mirrorOf(boolean):::Creates a BooleanValue for the given value:::
VirtualMachine#mirrorOf(byte):::Creates a ByteValue for the given value:::
VirtualMachine#mirrorOf(char):::Creates a CharValue for the given value:::
VirtualMachine#mirrorOf(short):::Creates a ShortValue for the given value:::
VirtualMachine#mirrorOf(int):::Creates an IntegerValue for the given value:::
VirtualMachine#mirrorOf(long):::Creates a LongValue for the given value:::
VirtualMachine#mirrorOf(float):::Creates a FloatValue for the given value:::
VirtualMachine#mirrorOf(double):::Creates a DoubleValue for the given value:::
VirtualMachine#mirrorOf(String):::Creates a string in this virtual machine:::
VirtualMachine#mirrorOfVoid():::Creates a VoidValue:::
VirtualMachine#process():::Returns the java.lang.Process object for this virtual machine if launched by a LaunchingConnector:::
VirtualMachine#dispose():::Invalidates this virtual machine mirror:::
VirtualMachine#exit(int):::Causes the mirrored VM to terminate with the given error code:::
VirtualMachine#canWatchFieldModification():::Determines if the target VM supports watchpoints for field modification.:::
VirtualMachine#canWatchFieldAccess():::Determines if the target VM supports watchpoints for field access.:::
VirtualMachine#canGetBytecodes():::Determines if the target VM supports the retrieval of a method's bytecodes.:::
VirtualMachine#canGetSyntheticAttribute():::Determines if the target VM supports the query of the synthetic attribute of a method or field.:::
VirtualMachine#canGetOwnedMonitorInfo():::Determines if the target VM supports the retrieval of the monitors owned by a thread.:::
VirtualMachine#canGetCurrentContendedMonitor():::Determines if the target VM supports the retrieval of the monitor for which a thread is currently waiting.:::
VirtualMachine#canGetMonitorInfo():::Determines if the target VM supports the retrieval of the monitor information for an object.:::
VirtualMachine#canUseInstanceFilters():::Determines if the target VM supports filtering events by specific instance object:::
VirtualMachine#canRedefineClasses():::Determines if the target VM supports any level of class redefinition.:::
VirtualMachine#canAddMethod():::Determines if the target VM supports the addition of methods when performing class redefinition.:::
VirtualMachine#canUnrestrictedlyRedefineClasses():::Determines if the target VM supports changes when performing class redefinition that are otherwise restricted by #redefineClasses.:::
VirtualMachine#canPopFrames():::Determines if the target VM supports popping frames of a threads stack.:::
VirtualMachine#canGetSourceDebugExtension():::Determines if the target VM supports getting the source debug extension.:::
VirtualMachine#canRequestVMDeathEvent():::Determines if the target VM supports the creation of VMDeathRequests.:::
VirtualMachine#canGetMethodReturnValues():::Determines if the target VM supports the inclusion of return values in MethodExitEvents.:::
VirtualMachine#canGetInstanceInfo():::Determines if the target VM supports the accessing of class instances, instance counts, and referring objects.:::
VirtualMachine#canUseSourceNameFilters():::Determines if the target VM supports the filtering of class prepare events by source name:::
VirtualMachine#canForceEarlyReturn():::Determines if the target VM supports the forcing of a method to return early.:::
VirtualMachine#canGetClassFileVersion():::Determines if the target VM supports reading class file major and minor versions.:::
VirtualMachine#canGetConstantPool():::Determines if the target VM supports getting constant pool information of a class.:::
VirtualMachine#canGetModuleInfo():::Determines if the target VM supports getting information about modules.:::return
VirtualMachine#setDefaultStratum(String):::Set this VM's default stratum (see Location for a discussion of strata):::
VirtualMachine#getDefaultStratum():::Return this VM's default stratum.:::
VirtualMachine#instanceCounts(List):::Returns the number of instances of each ReferenceType in the 'refTypes' list:::
VirtualMachine#description():::Returns text information on the target VM and the debugger support that mirrors it:::
VirtualMachine#version():::Returns the version of the Java Runtime Environment in the target VM as reported by the property java.version:::
VirtualMachine#name():::Returns the name of the target VM as reported by the property java.vm.name.:::
VirtualMachine#setDebugTraceMode(int):::Traces the activities performed by the com.sun.jdi implementation:::
VirtualMachineManager#defaultConnector():::Identifies the default connector:::
VirtualMachineManager#launchingConnectors():::Returns the list of known LaunchingConnector objects:::
VirtualMachineManager#attachingConnectors():::Returns the list of known AttachingConnector objects:::
VirtualMachineManager#listeningConnectors():::Returns the list of known ListeningConnector objects:::
VirtualMachineManager#allConnectors():::Returns the list of all known Connector objects.:::
VirtualMachineManager#connectedVirtualMachines():::Lists all target VMs which are connected to the debugger:::
VirtualMachineManager#majorInterfaceVersion():::Returns the major version number of the JDI interface:::
VirtualMachineManager#minorInterfaceVersion():::Returns the minor version number of the JDI interface:::
VirtualMachineManager#createVirtualMachine(Connection, Process):::Create a virtual machine mirror for a target VM:::
VirtualMachineManager#createVirtualMachine(Connection):::Creates a new virtual machine:::
VoidValue#equals(Object):::Compares the specified Object with this VoidValue for equality.:::
VoidValue#hashCode():::Returns the hash code value for this VoidValue.:::

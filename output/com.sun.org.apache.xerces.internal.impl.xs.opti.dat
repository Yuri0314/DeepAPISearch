AttrImpl#getName()::: attr impl get name:::return
AttrImpl#getSpecified()::: attr impl get specified:::return
AttrImpl#getValue()::: attr impl get value:::return
AttrImpl#getNodeValue()::: attr impl get node value:::return->getValue
AttrImpl#getOwnerElement()::: attr impl get owner element:::return
AttrImpl#getOwnerDocument()::: attr impl get owner document:::return->element->getOwnerDocument
AttrImpl#setValue(String)::: attr impl set value:::
AttrImpl#isId()::: attr impl is id:::return
AttrImpl#getSchemaTypeInfo():::Method getSchemaTypeInfo.:::return
AttrImpl#toString():::NON-DOM method for debugging convenience:::return->getName->getValue
DefaultDocument#getDoctype()::: default document get doctype:::return
DefaultDocument#getImplementation()::: default document get implementation:::return
DefaultDocument#getDocumentElement()::: default document get document element:::return
DefaultDocument#getElementsByTagName(String)::: default document get elements by tag name:::return
DefaultDocument#getElementsByTagNameNS(String, String)::: default document get elements by tag name s:::return
DefaultDocument#getElementById(String)::: default document get element by id:::return
DefaultDocument#importNode(Node, boolean)::: default document import node:::throw->new->DOMException
DefaultDocument#createElement(String)::: default document create element:::throw->new->DOMException
DefaultDocument#createDocumentFragment()::: default document create document fragment:::return
DefaultDocument#createTextNode(String)::: default document create text node:::return
DefaultDocument#createComment(String)::: default document create comment:::return
DefaultDocument#createCDATASection(String)::: default document create section:::throw->new->DOMException
DefaultDocument#createProcessingInstruction(String, String)::: default document create processing instruction:::throw->new->DOMException
DefaultDocument#createAttribute(String)::: default document create attribute:::throw->new->DOMException
DefaultDocument#createEntityReference(String)::: default document create entity reference:::throw->new->DOMException
DefaultDocument#createElementNS(String, String)::: default document create element s:::throw->new->DOMException
DefaultDocument#createAttributeNS(String, String)::: default document create attribute s:::throw->new->DOMException
DefaultDocument#getInputEncoding()::: default document get input encoding:::return
DefaultDocument#getXmlEncoding()::: default document get xml encoding:::return
DefaultDocument#getXmlStandalone():::An attribute specifying, as part of the XML declaration, whether this document is standalone:::throw->new->DOMException
DefaultDocument#setXmlStandalone(boolean):::An attribute specifying, as part of the XML declaration, whether this document is standalone:::throw->new->DOMException
DefaultDocument#getXmlVersion():::An attribute specifying, as part of the XML declaration, the version number of this document:::return
DefaultDocument#setXmlVersion(String):::An attribute specifying, as part of the XML declaration, the version number of this document:::throw->new->DOMException
DefaultDocument#getStrictErrorChecking():::An attribute specifying whether errors checking is enforced or not:::return
DefaultDocument#setStrictErrorChecking(boolean):::An attribute specifying whether errors checking is enforced or not:::throw->new->DOMException
DefaultDocument#getDocumentURI():::The location of the document or null if undefined:::return
DefaultDocument#setDocumentURI(String):::The location of the document or null if undefined:::
DefaultDocument#adoptNode(Node):::DOM Level 3:::throw->new->DOMException
DefaultDocument#normalizeDocument():::DOM Level 3:::throw->new->DOMException
DefaultDocument#getDomConfig()::: The configuration used when Document.normalizeDocument is invoked.:::throw->new->DOMException
DefaultDocument#renameNode(Node, String, String):::DOM Level 3:::throw->new->DOMException
DefaultElement#getTagName()::: default element get tag name:::return
DefaultElement#getAttribute(String)::: default element get attribute:::return
DefaultElement#getAttributeNode(String)::: default element get attribute node:::return
DefaultElement#getElementsByTagName(String)::: default element get elements by tag name:::return
DefaultElement#getAttributeNS(String, String)::: default element get attribute s:::return
DefaultElement#getAttributeNodeNS(String, String)::: default element get attribute node s:::return
DefaultElement#getElementsByTagNameNS(String, String)::: default element get elements by tag name s:::return
DefaultElement#hasAttribute(String)::: default element has attribute:::return
DefaultElement#hasAttributeNS(String, String)::: default element has attribute s:::return
DefaultElement#getSchemaTypeInfo()::: default element get schema type info:::return
DefaultElement#setAttribute(String, String)::: default element set attribute:::throw->new->DOMException
DefaultElement#removeAttribute(String)::: default element remove attribute:::throw->new->DOMException
DefaultElement#removeAttributeNode(Attr)::: default element remove attribute node:::throw->new->DOMException
DefaultElement#setAttributeNode(Attr)::: default element set attribute node:::throw->new->DOMException
DefaultElement#setAttributeNS(String, String, String)::: default element set attribute s:::throw->new->DOMException
DefaultElement#removeAttributeNS(String, String)::: default element remove attribute s:::throw->new->DOMException
DefaultElement#setAttributeNodeNS(Attr)::: default element set attribute node s:::throw->new->DOMException
DefaultElement#setIdAttributeNode(Attr, boolean)::: default element set id attribute node:::throw->new->DOMException
DefaultElement#setIdAttribute(String, boolean)::: default element set id attribute:::throw->new->DOMException
DefaultElement#setIdAttributeNS(String, String, boolean)::: default element set id attribute s:::throw->new->DOMException
DefaultNode#getNodeName()::: default node get node name:::return
DefaultNode#getNodeValue()::: default node get node value:::return
DefaultNode#getNodeType()::: default node get node type:::return
DefaultNode#getParentNode()::: default node get parent node:::return
DefaultNode#getChildNodes()::: default node get child nodes:::return
DefaultNode#getFirstChild()::: default node get first child:::return
DefaultNode#getLastChild()::: default node get last child:::return
DefaultNode#getPreviousSibling()::: default node get previous sibling:::return
DefaultNode#getNextSibling()::: default node get next sibling:::return
DefaultNode#getAttributes()::: default node get attributes:::return
DefaultNode#getOwnerDocument()::: default node get owner document:::return
DefaultNode#hasChildNodes()::: default node has child nodes:::return
DefaultNode#cloneNode(boolean)::: default node clone node:::return
DefaultNode#normalize()::: default node normalize:::
DefaultNode#isSupported(String, String)::: default node is supported:::return
DefaultNode#getNamespaceURI()::: default node get namespace i:::return
DefaultNode#getPrefix()::: default node get prefix:::return
DefaultNode#getLocalName()::: default node get local name:::return
DefaultNode#getBaseURI():::DOM Level 3:::return
DefaultNode#hasAttributes()::: default node has attributes:::return
DefaultNode#setNodeValue(String)::: default node set node value:::throw->new->DOMException
DefaultNode#insertBefore(Node, Node)::: default node insert before:::throw->new->DOMException
DefaultNode#replaceChild(Node, Node)::: default node replace child:::throw->new->DOMException
DefaultNode#removeChild(Node)::: default node remove child:::throw->new->DOMException
DefaultNode#appendChild(Node)::: default node append child:::throw->new->DOMException
DefaultNode#setPrefix(String)::: default node set prefix:::throw->new->DOMException
DefaultNode#compareDocumentPosition(Node)::: default node compare document position:::throw->new->DOMException
DefaultNode#getTextContent()::: default node get text content:::throw->new->DOMException
DefaultNode#setTextContent(String)::: default node set text content:::throw->new->DOMException
DefaultNode#isSameNode(Node)::: default node is same node:::throw->new->DOMException
DefaultNode#lookupPrefix(String)::: default node lookup prefix:::throw->new->DOMException
DefaultNode#isDefaultNamespace(String)::: default node is default namespace:::throw->new->DOMException
DefaultNode#lookupNamespaceURI(String)::: default node lookup namespace i:::throw->new->DOMException
DefaultNode#isEqualNode(Node)::: default node is equal node:::throw->new->DOMException
DefaultNode#getFeature(String, String)::: default node get feature:::return
DefaultNode#setUserData(String, Object, UserDataHandler)::: default node set user data:::throw->new->DOMException
DefaultNode#getUserData(String)::: default node get user data:::return
DefaultText#getData():::The character data of the node that implements this interface:::return
DefaultText#setData(String):::The character data of the node that implements this interface:::throw->new->DOMException
DefaultText#getLength():::The number of 16-bit units that are available through data and the substringData method below:::return
DefaultText#substringData(int, int):::Extracts a range of data from the node.:::throw->new->DOMException
DefaultText#appendData(String):::Append the string to the end of the character data of the node:::throw->new->DOMException
DefaultText#insertData(int, String):::Insert a string at the specified 16-bit unit offset.:::throw->new->DOMException
DefaultText#deleteData(int, int):::Remove a range of 16-bit units from the node:::throw->new->DOMException
DefaultText#replaceData(int, int, String):::Replace the characters starting at the specified 16-bit unit offset with the specified string.:::throw->new->DOMException
DefaultText#splitText(int):::Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings:::throw->new->DOMException
DefaultText#isElementContentWhitespace():::DOM Level 3 CR:::throw->new->DOMException
DefaultText#getWholeText()::: default text get whole text:::throw->new->DOMException
DefaultText#replaceWholeText(String)::: default text replace whole text:::throw->new->DOMException
DefaultXMLDocumentHandler#startDocument(XMLLocator, String, NamespaceContext, Augmentations):::The start of the document.:::
DefaultXMLDocumentHandler#xmlDecl(String, String, String, Augmentations):::Notifies of the presence of an XMLDecl line in the document:::
DefaultXMLDocumentHandler#doctypeDecl(String, String, String, Augmentations):::Notifies of the presence of the DOCTYPE line in the document.:::
DefaultXMLDocumentHandler#comment(XMLString, Augmentations):::A comment.:::
DefaultXMLDocumentHandler#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::
DefaultXMLDocumentHandler#startPrefixMapping(String, String, Augmentations):::The start of a namespace prefix mapping:::
DefaultXMLDocumentHandler#startElement(QName, XMLAttributes, Augmentations):::The start of an element.:::
DefaultXMLDocumentHandler#emptyElement(QName, XMLAttributes, Augmentations):::An empty element.:::
DefaultXMLDocumentHandler#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies the start of a general entity:::
DefaultXMLDocumentHandler#textDecl(String, String, Augmentations):::Notifies of the presence of a TextDecl line in an entity:::
DefaultXMLDocumentHandler#endGeneralEntity(String, Augmentations):::This method notifies the end of a general entity:::
DefaultXMLDocumentHandler#characters(XMLString, Augmentations):::Character content.:::
DefaultXMLDocumentHandler#ignorableWhitespace(XMLString, Augmentations):::Ignorable whitespace:::
DefaultXMLDocumentHandler#endElement(QName, Augmentations):::The end of an element.:::
DefaultXMLDocumentHandler#endPrefixMapping(String, Augmentations):::The end of a namespace prefix mapping:::
DefaultXMLDocumentHandler#startCDATA(Augmentations):::The start of a CDATA section.:::
DefaultXMLDocumentHandler#endCDATA(Augmentations):::The end of a CDATA section.:::
DefaultXMLDocumentHandler#endDocument(Augmentations):::The end of the document.:::
DefaultXMLDocumentHandler#startDTD(XMLLocator, Augmentations):::The start of the DTD.:::
DefaultXMLDocumentHandler#startParameterEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies of the start of a parameter entity:::
DefaultXMLDocumentHandler#endParameterEntity(String, Augmentations):::This method notifies the end of a parameter entity:::
DefaultXMLDocumentHandler#startExternalSubset(XMLResourceIdentifier, Augmentations):::The start of the DTD external subset.:::
DefaultXMLDocumentHandler#endExternalSubset(Augmentations):::The end of the DTD external subset.:::
DefaultXMLDocumentHandler#elementDecl(String, String, Augmentations):::An element declaration.:::
DefaultXMLDocumentHandler#startAttlist(String, Augmentations):::The start of an attribute list.:::
DefaultXMLDocumentHandler#attributeDecl(String, String, String, String[], String, XMLString, XMLString, Augmentations):::An attribute declaration.:::
DefaultXMLDocumentHandler#endAttlist(Augmentations):::The end of an attribute list.:::
DefaultXMLDocumentHandler#internalEntityDecl(String, XMLString, XMLString, Augmentations):::An internal entity declaration.:::
DefaultXMLDocumentHandler#externalEntityDecl(String, XMLResourceIdentifier, Augmentations):::An external entity declaration.:::
DefaultXMLDocumentHandler#unparsedEntityDecl(String, XMLResourceIdentifier, String, Augmentations):::An unparsed entity declaration.:::
DefaultXMLDocumentHandler#notationDecl(String, XMLResourceIdentifier, Augmentations):::A notation declaration:::
DefaultXMLDocumentHandler#startConditional(short, Augmentations):::The start of a conditional section.:::
DefaultXMLDocumentHandler#ignoredCharacters(XMLString, Augmentations):::Characters within an IGNORE conditional section.:::
DefaultXMLDocumentHandler#endConditional(Augmentations):::The end of a conditional section.:::
DefaultXMLDocumentHandler#endDTD(Augmentations):::The end of the DTD.:::
DefaultXMLDocumentHandler#startContentModel(String, Augmentations):::The start of a content model:::
DefaultXMLDocumentHandler#any(Augmentations):::A content model of ANY.:::
DefaultXMLDocumentHandler#empty(Augmentations):::A content model of EMPTY.:::
DefaultXMLDocumentHandler#startGroup(Augmentations):::A start of either a mixed or children content model:::
DefaultXMLDocumentHandler#pcdata(Augmentations):::The appearance of "#PCDATA" within a group signifying a mixed content model:::
DefaultXMLDocumentHandler#element(String, Augmentations):::A referenced element in a mixed or children content model.:::
DefaultXMLDocumentHandler#separator(short, Augmentations):::The separator between choices or sequences of a mixed or children content model.:::
DefaultXMLDocumentHandler#occurrence(short, Augmentations):::The occurrence count for a child in a children content model or for the mixed content model group.:::
DefaultXMLDocumentHandler#endGroup(Augmentations):::The end of a group for mixed or children content models.:::
DefaultXMLDocumentHandler#endContentModel(Augmentations):::The end of a content model.:::
DefaultXMLDocumentHandler#setDocumentSource(XMLDocumentSource):::Sets the document source.:::
DefaultXMLDocumentHandler#getDocumentSource():::Returns the document source.:::return
DefaultXMLDocumentHandler#setDTDSource(XMLDTDSource)::: default document handler set source:::
DefaultXMLDocumentHandler#getDTDSource()::: default document handler get source:::return
DefaultXMLDocumentHandler#setDTDContentModelSource(XMLDTDContentModelSource)::: default document handler set content model source:::
DefaultXMLDocumentHandler#getDTDContentModelSource()::: default document handler get content model source:::return
ElementImpl#getOwnerDocument()::: element impl get owner document:::return
ElementImpl#getParentNode()::: element impl get parent node:::return
ElementImpl#hasChildNodes()::: element impl has child nodes:::if->return->else->return
ElementImpl#getFirstChild()::: element impl get first child:::if->return->return
ElementImpl#getLastChild()::: element impl get last child:::if->return->i->for->if->return
ElementImpl#getPreviousSibling()::: element impl get previous sibling:::if->return->return
ElementImpl#getNextSibling()::: element impl get next sibling:::if->return->return
ElementImpl#getAttributes()::: element impl get attributes:::return->new->NamedNodeMapImpl
ElementImpl#hasAttributes()::: element impl has attributes:::return
ElementImpl#getTagName()::: element impl get tag name:::return
ElementImpl#getAttribute(String)::: element impl get attribute:::for->i->return
ElementImpl#getAttributeNode(String)::: element impl get attribute node:::for->i->return
ElementImpl#getAttributeNS(String, String)::: element impl get attribute s:::for->i->return
ElementImpl#getAttributeNodeNS(String, String)::: element impl get attribute node s:::for->i->return
ElementImpl#hasAttribute(String)::: element impl has attribute:::for->i->return
ElementImpl#hasAttributeNS(String, String)::: element impl has attribute s:::for->i->return
ElementImpl#setAttribute(String, String)::: element impl set attribute:::for->i
ElementImpl#getLineNumber():::Returns the line number.:::return
ElementImpl#getColumnNumber():::Returns the column number.:::return
ElementImpl#getCharacterOffset():::Returns the character offset.:::return
ElementImpl#getAnnotation()::: element impl get annotation:::return
ElementImpl#getSyntheticAnnotation()::: element impl get synthetic annotation:::return
ElementImpl#nsEquals(String, String):::Compares two namespace URIs with an extra case for null entries:::if->return->else->return->nsURI_1->equals
NamedNodeMapImpl#getNamedItem(String)::: named node map impl get named item:::for->i->return
NamedNodeMapImpl#item(int)::: named node map impl item:::if->getLength->return->return
NamedNodeMapImpl#getLength()::: named node map impl get length:::return
NamedNodeMapImpl#getNamedItemNS(String, String)::: named node map impl get named item s:::for->i->return
NamedNodeMapImpl#setNamedItemNS(Node)::: named node map impl set named item s:::throw->new->DOMException
NamedNodeMapImpl#setNamedItem(Node)::: named node map impl set named item:::throw->new->DOMException
NamedNodeMapImpl#removeNamedItem(String)::: named node map impl remove named item:::throw->new->DOMException
NamedNodeMapImpl#removeNamedItemNS(String, String)::: named node map impl remove named item s:::throw->new->DOMException
NodeImpl#getNodeName()::: node impl get node name:::return
NodeImpl#getNamespaceURI()::: node impl get namespace i:::return
NodeImpl#getPrefix()::: node impl get prefix:::return
NodeImpl#getLocalName()::: node impl get local name:::return
NodeImpl#getNodeType()::: node impl get node type:::return
NodeImpl#setReadOnly(boolean, boolean)::: node impl set read only:::
NodeImpl#getReadOnly()::: node impl get read only:::return
SchemaDOM#startElement(QName, XMLAttributes, int, int, int)::: schema m start element:::node->new->ElementImpl->processElement->return
SchemaDOM#emptyElement(QName, XMLAttributes, int, int, int)::: schema m empty element:::node->new->ElementImpl->processElement->return
SchemaDOM#startElement(QName, XMLAttributes, int, int)::: schema m start element:::return->startElement
SchemaDOM#emptyElement(QName, XMLAttributes, int, int)::: schema m empty element:::return->emptyElement
SchemaDOM#processElement(QName, XMLAttributes, ElementImpl)::: schema m process element:::attrs->attributes->getLength->new->AttrArr->for->i->attributes->getLength->if->resizeRelations->if->foundPlace->i->for->if->resizeRelations
SchemaDOM#endElement()::: schema m end element:::
SchemaDOM#comment(XMLString)::: schema m comment:::fAnnotationBuffer->append->if->fAnnotationBuffer->append->fAnnotationBuffer->append
SchemaDOM#processingInstruction(String, XMLString)::: schema m processing instruction:::fAnnotationBuffer->append->append->if->fAnnotationBuffer->append->append->fAnnotationBuffer->append
SchemaDOM#characters(XMLString)::: schema m characters:::if->annotationBuffer->for->i->else->fAnnotationBuffer->append
SchemaDOM#charactersRaw(String)::: schema m characters raw:::fAnnotationBuffer->append
SchemaDOM#endAnnotation(QName, ElementImpl)::: schema m end annotation:::fAnnotationBuffer->append->append->append->fAnnotationBuffer->toString
SchemaDOM#endAnnotationElement(QName)::: schema m end annotation element:::endAnnotationElement
SchemaDOM#endAnnotationElement(String)::: schema m end annotation element:::fAnnotationBuffer->append->append->append
SchemaDOM#endSyntheticAnnotationElement(QName, boolean)::: schema m end synthetic annotation element:::endSyntheticAnnotationElement
SchemaDOM#endSyntheticAnnotationElement(String, boolean)::: schema m end synthetic annotation element:::if->fAnnotationBuffer->append->append->append->fAnnotationBuffer->toString->else->fAnnotationBuffer->append->append->append
SchemaDOM#startAnnotationCDATA()::: schema m start annotation a:::fAnnotationBuffer->append
SchemaDOM#endAnnotationCDATA()::: schema m end annotation a:::fAnnotationBuffer->append
SchemaDOM#resizeRelations()::: schema m resize relations:::temp->new->NodeImplArrs->System->arraycopy->for->i
SchemaDOM#resizeRelations(int)::: schema m resize relations:::temp->new->NodeImplArr->System->arraycopy
SchemaDOM#reset()::: schema m reset:::if->for->i->new->NodeImplArrs->new->ElementImpl->for->i
SchemaDOM#printDOM()::: schema m print m:::
SchemaDOM#traverse(Node, int)::: schema m traverse:::indent->node->getNodeName->print->if->node->hasAttributes->attrs->node->getAttributes->for->i->attrs->getLength->if->node->hasChildNodes->println->for->child->node->getFirstChild->child->getNextSibling->indent->node->getNodeName->println->else->println
SchemaDOM#indent(int)::: schema m indent:::for->i
SchemaDOM#getDocumentElement()::: schema m get document element:::return
SchemaDOM#getImplementation()::: schema m get implementation:::return->SchemaDOMImplementation->getDOMImplementation
SchemaDOM#startAnnotation(QName, XMLAttributes, NamespaceContext)::: schema m start annotation:::startAnnotation
SchemaDOM#startAnnotation(String, XMLAttributes, NamespaceContext)::: schema m start annotation:::if->new->StringBuffer->fAnnotationBuffer->append->append->append->namespaces->new->ArrayList<>->for->i->attributes->getLength->currPrefixes->namespaceContext->getAllPrefixes->while->currPrefixes->hasMoreElements->prefix->currPrefixes->nextElement->uri->namespaceContext->getURI->if->if->namespaces->contains->if->fAnnotationBuffer->append->append->processAttValue->append->append->else->fAnnotationBuffer->append->append->append->processAttValue->append->append->fAnnotationBuffer->append
SchemaDOM#startAnnotationElement(QName, XMLAttributes)::: schema m start annotation element:::startAnnotationElement
SchemaDOM#startAnnotationElement(String, XMLAttributes)::: schema m start annotation element:::fAnnotationBuffer->append->append->for->i->attributes->getLength->fAnnotationBuffer->append
SchemaDOM#processAttValue(String)::: schema m process att value:::length->original->length->for->i->return
SchemaDOM#escapeAttValue(String, int)::: schema m escape att value:::i->length->original->length->newVal->new->StringBuffer->newVal->original->substring->append->for->return->newVal->toString
SchemaDOMImplementation#getDOMImplementation():::NON-DOM: Obtain and return the single shared object:::return
SchemaDOMImplementation#createDocument(String, String, DocumentType)::: schema implementation create document:::throw->new->DOMException
SchemaDOMImplementation#createDocumentType(String, String, String)::: schema implementation create document type:::throw->new->DOMException
SchemaDOMImplementation#getFeature(String, String)::: schema implementation get feature:::if->singleton->hasFeature->return->return
SchemaDOMImplementation#hasFeature(String, String)::: schema implementation has feature:::anyVersion->version->length->return->feature->equalsIgnoreCase->feature->equalsIgnoreCase->version->equals->version->equals->version->equals
SchemaDOMParser#startDocument(XMLLocator, String, NamespaceContext, Augmentations)::: schema parser start document:::config->getProperty->config->getFeature->fHasNonSchemaAttributes->clear->fSawAnnotation->clear->new->SchemaDOM->schemaDOM->locator->getExpandedSystemId->setDocumentURI
SchemaDOMParser#endDocument(Augmentations):::The end of the document.:::
SchemaDOMParser#comment(XMLString, Augmentations):::A comment.:::if->schemaDOM->comment
SchemaDOMParser#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::if->schemaDOM->processingInstruction
SchemaDOMParser#characters(XMLString, Augmentations):::Character content.:::if->for->i->else->schemaDOM->characters
SchemaDOMParser#startElement(QName, XMLAttributes, Augmentations):::The start of an element.:::if->if->if->if->fSawAnnotation->size->fSawAnnotation->pop->fSawAnnotation->push->schemaDOM->startAnnotation->schemaDOM->fLocator->getLineNumber->fLocator->getColumnNumber->fLocator->getCharacterOffset->startElement->return->else->if->fSawAnnotation->push->fHasNonSchemaAttributes->hasNonSchemaAttributes->push->else->if->schemaDOM->startAnnotationElement->else->schemaDOM->startAnnotationElement->return->schemaDOM->fLocator->getLineNumber->fLocator->getColumnNumber->fLocator->getCharacterOffset->startElement
SchemaDOMParser#emptyElement(QName, XMLAttributes, Augmentations):::An empty element.:::if->hasNonSchemaAttributes->schemaDOM->fLocator->getLineNumber->fLocator->getColumnNumber->fLocator->getCharacterOffset->startElement->attributes->removeAllAttributes->schemaPrefix->fNamespaceContext->getPrefix->annRawName->schemaPrefix->length->schemaDOM->startAnnotation->elemRawName->schemaPrefix->length->schemaDOM->startAnnotationElement->schemaDOM->charactersRaw->schemaDOM->endSyntheticAnnotationElement->schemaDOM->endSyntheticAnnotationElement->schemaDOM->endElement->return->if->if->schemaDOM->startAnnotation->else->schemaDOM->startAnnotationElement->newElem->schemaDOM->fLocator->getLineNumber->fLocator->getColumnNumber->fLocator->getCharacterOffset->emptyElement->if->if->schemaDOM->endAnnotation->else->schemaDOM->endAnnotationElement
SchemaDOMParser#endElement(QName, Augmentations):::The end of an element.:::if->if->schemaDOM->endAnnotationElement->schemaDOM->endElement->else->if->schemaDOM->endAnnotation->schemaDOM->endElement->else->schemaDOM->endAnnotationElement->else->if->value->fHasNonSchemaAttributes->pop->sawann->fSawAnnotation->pop->if->schemaPrefix->fNamespaceContext->getPrefix->annRawName->schemaPrefix->length->schemaDOM->startAnnotation->elemRawName->schemaPrefix->length->schemaDOM->startAnnotationElement->schemaDOM->charactersRaw->schemaDOM->endSyntheticAnnotationElement->schemaDOM->endSyntheticAnnotationElement->schemaDOM->endElement
SchemaDOMParser#hasNonSchemaAttributes(QName, XMLAttributes)::: schema parser has non schema attributes:::length->attributes->getLength->for->i->return
SchemaDOMParser#ignorableWhitespace(XMLString, Augmentations):::Ignorable whitespace:::if->schemaDOM->characters
SchemaDOMParser#startCDATA(Augmentations):::The start of a CDATA section.:::if->schemaDOM->startAnnotationCDATA
SchemaDOMParser#endCDATA(Augmentations):::The end of a CDATA section.:::if->schemaDOM->endAnnotationCDATA
SchemaDOMParser#getDocument():::Returns the DOM document object.:::return
SchemaDOMParser#setFeature(String, boolean):::Delegates to SchemaParsingConfig.setFeature:::config->setFeature
SchemaDOMParser#getFeature(String):::Delegates to SchemaParsingConfig.getFeature:::return->config->getFeature
SchemaDOMParser#setProperty(String, Object):::Delegates to SchemaParsingConfig.setProperty.:::config->setProperty
SchemaDOMParser#getProperty(String):::Delegates to SchemaParsingConfig.getProperty.:::return->config->getProperty
SchemaDOMParser#setEntityResolver(XMLEntityResolver):::Delegates to SchemaParsingConfig.setEntityResolver.:::config->setEntityResolver
SchemaDOMParser#parse(XMLInputSource):::Delegates parsing to SchemaParsingConfig:::config->parse
SchemaDOMParser#reset():::Reset SchemaParsingConfig:::reset
SchemaDOMParser#resetNodePool():::ResetNodePool on SchemaParsingConfig:::resetNodePool
SchemaDOMParser.BooleanStack#size():::Returns the size of the stack.:::return
SchemaDOMParser.BooleanStack#push(boolean):::Pushes a value onto the stack.:::ensureCapacity
SchemaDOMParser.BooleanStack#pop():::Pops a value off of the stack.:::return
SchemaDOMParser.BooleanStack#clear():::Clears the stack.:::
SchemaDOMParser.BooleanStack#ensureCapacity(int):::Ensures capacity.:::if->new->booleanArr->else->if->newdata->new->booleanArr->System->arraycopy
SchemaParsingConfig#getFeatureState(String):::Returns the state of a feature.:::if->featureId->equals->return->FeatureState->is->return->super->getFeatureState
SchemaParsingConfig#setFeature(String, boolean):::Set the state of a feature:::fNamespaceScanner->setFeature->fDTDScanner->setFeature->if->try->fXML11DTDScanner->setFeature->catch->finally->try->fXML11NSDocScanner->setFeature->catch->finally->super->setFeature
SchemaParsingConfig#getPropertyState(String):::Returns the value of a property.:::if->LOCALE->equals->return->PropertyState->getLocale->is->return->super->getPropertyState
SchemaParsingConfig#setProperty(String, Object):::setProperty:::if->LOCALE->equals->setLocale->fNamespaceScanner->setProperty->fDTDScanner->setProperty->if->try->fXML11DTDScanner->setProperty->catch->finally->try->fXML11NSDocScanner->setProperty->catch->finally->super->setProperty
SchemaParsingConfig#setLocale(Locale):::Set the locale to use for messages.:::super->setLocale->fErrorReporter->setLocale
SchemaParsingConfig#setInputSource(XMLInputSource):::Sets the input source for the document to parse.:::
SchemaParsingConfig#parse(boolean):::Parses the document in a pull parsing fashion.:::if->try->fValidationManager->reset->fVersionDetector->reset->reset->version->fVersionDetector->determineDocVersion->if->configurePipeline->resetXML10->else->if->initXML11Components->configureXML11Pipeline->resetXML11->else->return->fVersionDetector->startDocumentParsing->catch->if->ex->printStackTrace->throw->if->ex->printStackTrace->throw->if->ex->printStackTrace->throw->if->ex->printStackTrace->throw->new->XNIException->finally->try->return->fCurrentScanner->scanDocument->catch->if->ex->printStackTrace->throw->if->ex->printStackTrace->throw->if->ex->printStackTrace->throw->if->ex->printStackTrace->throw->new->XNIException->finally
SchemaParsingConfig#cleanup():::If the application decides to terminate parsing before the xml document is fully parsed, the application should call this method to free any resource allocated during parsing:::fEntityManager->closeReaders
SchemaParsingConfig#parse(XMLInputSource):::Parses the specified input source.:::if->throw->new->XNIException->try->setInputSource->parse->catch->if->ex->printStackTrace->throw->if->ex->printStackTrace->throw->if->ex->printStackTrace->throw->if->ex->printStackTrace->throw->new->XNIException->finally->this->cleanup
SchemaParsingConfig#reset():::Reset all components before parsing.:::super->reset
SchemaParsingConfig#configurePipeline():::Configures the XML 1.0 pipeline.:::if->setProperty->if->setProperty->fNamespaceScanner->setDocumentHandler->if->fDocumentHandler->setDocumentSource->if->setProperty->fDTDScanner->setDTDHandler->if->fDTDHandler->setDTDSource->fDTDScanner->setDTDContentModelHandler->if->fDTDContentModelHandler->setDTDContentModelSource
SchemaParsingConfig#configureXML11Pipeline():::Configures the XML 1.1 pipeline.:::if->setProperty->if->setProperty->fXML11NSDocScanner->setDocumentHandler->if->fDocumentHandler->setDocumentSource->if->setProperty->fXML11DTDScanner->setDTDHandler->if->fDTDHandler->setDTDSource->fXML11DTDScanner->setDTDContentModelHandler->if->fDTDContentModelHandler->setDTDContentModelSource
SchemaParsingConfig#checkFeature(String):::Check a feature:::if->featureId->startsWith->suffixLength->featureId->length->length->if->length->featureId->endsWith->return->if->length->featureId->endsWith->return->if->length->featureId->endsWith->return->if->length->featureId->endsWith->return->if->length->featureId->endsWith->return->if->length->featureId->endsWith->return->return->super->checkFeature
SchemaParsingConfig#checkProperty(String):::Check a property:::if->propertyId->startsWith->suffixLength->propertyId->length->length->if->length->propertyId->endsWith->return->if->propertyId->startsWith->suffixLength->propertyId->length->length->if->length->propertyId->endsWith->return->return->super->checkProperty
SchemaParsingConfig#addRecognizedParamsAndSetDefaults(XMLComponent):::Adds all of the component's recognized features and properties to the list of default recognized features and properties, and sets default values on the configuration for features and properties which were previously absent from the configuration.:::recognizedFeatures->component->getRecognizedFeatures->addRecognizedFeatures->recognizedProperties->component->getRecognizedProperties->addRecognizedProperties->if->for->i->if->for->i
SchemaParsingConfig#resetXML10():::Reset all XML 1.0 components before parsing:::fNamespaceScanner->reset->fDTDScanner->reset
SchemaParsingConfig#resetXML11():::Reset all XML 1.1 components before parsing:::fXML11NSDocScanner->reset->fXML11DTDScanner->reset
SchemaParsingConfig#resetNodePool()::: schema parsing config reset node pool:::
SchemaParsingConfig#initXML11Components()::: schema parsing config init l11 components:::if->DTDDVFactory->getInstance->new->XML11DTDScannerImpl->addRecognizedParamsAndSetDefaults->new->XML11NSDocumentScannerImpl->addRecognizedParamsAndSetDefaults
TextImpl#getParentNode()::: text impl get parent node:::return
TextImpl#getPreviousSibling()::: text impl get previous sibling:::if->return->return
TextImpl#getNextSibling()::: text impl get next sibling:::if->return->return
TextImpl#getData():::The character data of the node that implements this interface:::return
TextImpl#getLength():::The number of 16-bit units that are available through data and the substringData method below:::if->return->return->fData->length
TextImpl#substringData(int, int):::Extracts a range of data from the node.:::if->return->if->fData->length->throw->new->DOMException->if->fData->length->return->fData->substring->return->fData->substring

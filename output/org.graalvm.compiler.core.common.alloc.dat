org.graalvm.compiler.core.common.alloc.BiDirectionalTraceBuilder#computeTraces(DebugContext, AbstractBlockBase, AbstractBlockBase[], TrivialTracePredicate)->TraceBuilderResult::: bi directional trace builder compute traces
org.graalvm.compiler.core.common.alloc.BiDirectionalTraceBuilder#buildTraces(DebugContext)->ArrayList::: bi directional trace builder build traces
org.graalvm.compiler.core.common.alloc.ComputeBlockOrder#computeLinearScanOrder(int, T)->AbstractBlockBase[]:::Computes the block order used for the linear scan register allocator.
org.graalvm.compiler.core.common.alloc.ComputeBlockOrder#computeCodeEmittingOrder(int, T)->AbstractBlockBase[]:::Computes the block order used for code emission.
org.graalvm.compiler.core.common.alloc.RegisterAllocationConfig#initAllocatable(RegisterArray)->RegisterArray::: register allocation config init allocatable
org.graalvm.compiler.core.common.alloc.RegisterAllocationConfig#getAllocatableRegisters(PlatformKind)->AllocatableRegisters:::Gets the set of registers that can be used by the register allocator for a value of a particular kind.
org.graalvm.compiler.core.common.alloc.RegisterAllocationConfig#getRegisterCategory(PlatformKind)->RegisterCategory:::Gets the RegisterCategory for the given PlatformKind.
org.graalvm.compiler.core.common.alloc.RegisterAllocationConfig#createAllocatableRegisters(RegisterArray)->AllocatableRegisters::: register allocation config create allocatable registers
org.graalvm.compiler.core.common.alloc.RegisterAllocationConfig#getAllocatableRegisters()->RegisterArray:::Gets the set of registers that can be used by the register allocator.
org.graalvm.compiler.core.common.alloc.RegisterAllocationConfig#getRegisterConfig()->RegisterConfig::: register allocation config get register config
org.graalvm.compiler.core.common.alloc.SingleBlockTraceBuilder#computeTraces(DebugContext, AbstractBlockBase, AbstractBlockBase[], TrivialTracePredicate)->TraceBuilderResult::: single block trace builder compute traces
org.graalvm.compiler.core.common.alloc.Trace#getBlocks()->AbstractBlockBase[]::: trace get blocks
org.graalvm.compiler.core.common.alloc.Trace#getSuccessors()->ArrayList::: trace get successors
org.graalvm.compiler.core.common.alloc.Trace#size()->int::: trace size
org.graalvm.compiler.core.common.alloc.Trace#toString()->String::: trace to string
org.graalvm.compiler.core.common.alloc.Trace#getId()->int::: trace get id
org.graalvm.compiler.core.common.alloc.Trace#setId(int)->void::: trace set id
org.graalvm.compiler.core.common.alloc.TraceBuilderResult.TrivialTracePredicate#isTrivialTrace(Trace)->boolean::: trivial trace predicate is trivial trace
org.graalvm.compiler.core.common.alloc.TraceBuilderResult#create(DebugContext, AbstractBlockBase[], ArrayList, Trace[], TrivialTracePredicate)->TraceBuilderResult::: trace builder result create
org.graalvm.compiler.core.common.alloc.TraceBuilderResult#getTraceForBlock(AbstractBlockBase)->Trace::: trace builder result get trace for block
org.graalvm.compiler.core.common.alloc.TraceBuilderResult#getTraces()->ArrayList::: trace builder result get traces
org.graalvm.compiler.core.common.alloc.TraceBuilderResult#incomingEdges(Trace)->boolean::: trace builder result incoming edges
org.graalvm.compiler.core.common.alloc.TraceBuilderResult#incomingSideEdges(Trace)->boolean::: trace builder result incoming side edges
org.graalvm.compiler.core.common.alloc.TraceBuilderResult#verify(TraceBuilderResult, int)->boolean::: trace builder result verify
org.graalvm.compiler.core.common.alloc.TraceMap#get(Trace)->T::: trace map get
org.graalvm.compiler.core.common.alloc.TraceMap#put(Trace, T)->void::: trace map put
org.graalvm.compiler.core.common.alloc.TraceStatisticsPrinter#printTraceStatistics(DebugContext, TraceBuilderResult, String)->void::: trace statistics printer print trace statistics
org.graalvm.compiler.core.common.alloc.TraceStatisticsPrinter#print(DebugContext, TraceBuilderResult, String)->void::: trace statistics printer print
org.graalvm.compiler.core.common.alloc.UniDirectionalTraceBuilder#computeTraces(DebugContext, AbstractBlockBase, AbstractBlockBase[], TrivialTracePredicate)->TraceBuilderResult::: uni directional trace builder compute traces
org.graalvm.compiler.core.common.alloc.UniDirectionalTraceBuilder#buildTraces(DebugContext, AbstractBlockBase)->ArrayList::: uni directional trace builder build traces

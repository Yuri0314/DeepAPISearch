BufferedInputStream#read():::See the general contract of the read method of InputStream.:::this.fill->this.getBufIfOpen
BufferedInputStream#read(byte[], int, int):::Reads bytes from this byte-input stream into the specified byte array, starting at the given offset:::this.getBufIfOpen->this.read1->input.available
BufferedInputStream#skip(long):::See the general contract of the skip method of InputStream.:::this.getBufIfOpen->getInIfOpen().skip->this.fill
BufferedInputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream:::getInIfOpen().available
BufferedInputStream#mark(int):::See the general contract of the mark method of InputStream.:::
BufferedInputStream#reset():::See the general contract of the reset method of InputStream:::this.getBufIfOpen
BufferedInputStream#markSupported():::Tests if this input stream supports the mark and reset methods:::
BufferedInputStream#close():::Closes this input stream and releases any system resources associated with the stream:::U.compareAndSetObject->input.close
BufferedOutputStream#write(int):::Writes the specified byte to this buffered output stream.:::this.flushBuffer
BufferedOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this buffered output stream:::this.flushBuffer->out.write->this.flushBuffer->System.arraycopy
BufferedOutputStream#flush():::Flushes this buffered output stream:::this.flushBuffer->out.flush
BufferedReader#read():::Reads a single character.:::this.ensureOpen->this.fill
BufferedReader#read(char[], int, int):::Reads characters into a portion of an array:::this.ensureOpen->this.read1->this.read1->in.ready
BufferedReader#readLine(boolean):::Reads a line of text:::this.ensureOpen->this.fill->s.length->s.toString->s.append->s.toString->s.append
BufferedReader#readLine():::Reads a line of text:::this.readLine
BufferedReader#skip(long):::Skips characters.:::this.ensureOpen->this.fill
BufferedReader#ready():::Tells whether this stream is ready to be read:::this.ensureOpen->in.ready->this.fill->in.ready
BufferedReader#markSupported():::Tells whether this stream supports the mark() operation, which it does.:::
BufferedReader#mark(int):::Marks the present position in the stream:::this.ensureOpen
BufferedReader#reset():::Resets the stream to the most recent mark.:::this.ensureOpen
BufferedReader#lines():::Returns a Stream, the elements of which are lines read from this BufferedReader:::this.readLine->this.hasNext->Spliterators.spliteratorUnknownSize->StreamSupport.stream
BufferedWriter#flushBuffer():::Flushes the output buffer to the underlying character stream, without flushing the stream itself:::this.ensureOpen->out.write
BufferedWriter#write(int):::Writes a single character.:::this.ensureOpen->this.flushBuffer
BufferedWriter#write(char[], int, int):::Writes a portion of an array of characters:::this.ensureOpen->this.flushBuffer->out.write->this.min->System.arraycopy->this.flushBuffer
BufferedWriter#write(String, int, int):::Writes a portion of a String.:::this.ensureOpen->this.min->s.getChars->this.flushBuffer
BufferedWriter#newLine():::Writes a line separator:::System.lineSeparator->this.write
BufferedWriter#flush():::Flushes the stream.:::this.flushBuffer->out.flush
ByteArrayInputStream#read():::Reads the next byte of data from this input stream:::
ByteArrayInputStream#read(byte[], int, int):::Reads up to len bytes of data into an array of bytes from this input stream:::Objects.checkFromIndexSize->System.arraycopy
ByteArrayInputStream#skip(long):::Skips n bytes of input from this input stream:::
ByteArrayInputStream#available():::Returns the number of remaining bytes that can be read (or skipped over) from this input stream:::
ByteArrayInputStream#markSupported():::Tests if this InputStream supports mark/reset:::
ByteArrayInputStream#mark(int):::Set the current marked position in the stream:::
ByteArrayInputStream#reset():::Resets the buffer to the marked position:::
ByteArrayInputStream#close():::Closing a ByteArrayInputStream has no effect:::
ByteArrayOutputStream#write(int):::Writes the specified byte to this ByteArrayOutputStream.:::this.ensureCapacity
ByteArrayOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this ByteArrayOutputStream.:::Objects.checkFromIndexSize->this.ensureCapacity->System.arraycopy
ByteArrayOutputStream#writeBytes(byte[]):::Writes the complete contents of the specified byte array to this ByteArrayOutputStream.:::this.write
ByteArrayOutputStream#writeTo(OutputStream):::Writes the complete contents of this ByteArrayOutputStream to the specified output stream argument, as if by calling the output stream's write method using out.write(buf, 0, count).:::out.write
ByteArrayOutputStream#reset():::Resets the count field of this ByteArrayOutputStream to zero, so that all currently accumulated output in the output stream is discarded:::
ByteArrayOutputStream#toByteArray():::Creates a newly allocated byte array:::Arrays.copyOf
ByteArrayOutputStream#size():::Returns the current size of the buffer.:::
ByteArrayOutputStream#toString():::Converts the buffer's contents into a string decoding bytes using the platform's default character set:::
ByteArrayOutputStream#toString(String):::Converts the buffer's contents into a string by decoding the bytes using the named java.nio.charset.Charset charset:::
ByteArrayOutputStream#toString(Charset):::Converts the buffer's contents into a string by decoding the bytes using the specified java.nio.charset.Charset charset:::
ByteArrayOutputStream#toString(int):::Creates a newly allocated string:::
ByteArrayOutputStream#close():::Closing a ByteArrayOutputStream has no effect:::
CharArrayReader#read():::Reads a single character.:::this.ensureOpen
CharArrayReader#read(char[], int, int):::Reads characters into a portion of an array.:::this.ensureOpen->System.arraycopy
CharArrayReader#skip(long):::Skips characters:::this.ensureOpen
CharArrayReader#ready():::Tells whether this stream is ready to be read:::this.ensureOpen
CharArrayReader#markSupported():::Tells whether this stream supports the mark() operation, which it does.:::
CharArrayReader#mark(int):::Marks the present position in the stream:::this.ensureOpen
CharArrayReader#reset():::Resets the stream to the most recent mark, or to the beginning if it has never been marked.:::this.ensureOpen
CharArrayReader#close():::Closes the stream and releases any system resources associated with it:::
CharArrayWriter#write(int):::Writes a character to the buffer.:::Math.max->Arrays.copyOf
CharArrayWriter#write(char[], int, int):::Writes characters to the buffer.:::Math.max->Arrays.copyOf->System.arraycopy
CharArrayWriter#write(String, int, int):::Write a portion of a string to the buffer.:::Math.max->Arrays.copyOf->str.getChars
CharArrayWriter#writeTo(Writer):::Writes the contents of the buffer to another character stream.:::out.write
CharArrayWriter#append(CharSequence):::Appends the specified character sequence to this writer:::String.valueOf->s.length->this.write
CharArrayWriter#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this writer:::csq.subSequence->this.append
CharArrayWriter#append(char):::Appends the specified character to this writer:::this.write
CharArrayWriter#reset():::Resets the buffer so that you can use it again without throwing away the already allocated buffer.:::
CharArrayWriter#toCharArray():::Returns a copy of the input data.:::Arrays.copyOf
CharArrayWriter#size():::Returns the current size of the buffer.:::
CharArrayWriter#toString():::Converts input data to a string.:::
CharArrayWriter#flush():::Flush the stream.:::
CharArrayWriter#close():::Close the stream:::
Closeable#close():::Closes this stream and releases any system resources associated with it:::
Console#writer():::Retrieves the unique java.io.PrintWriter PrintWriter object associated with this console.:::
Console#reader():::Retrieves the unique java.io.Reader Reader object associated with this console:::
Console#format(String, Object...):::Writes a formatted string to this console's output stream using the specified format string and arguments.:::formatter.format(fmt, args).flush
Console#printf(String, Object...):::A convenience method to write a formatted string to this console's output stream using the specified format string and arguments:::this.format
Console#readLine(String, Object...):::Provides a formatted prompt, then reads a single line of text from the console.:::fmt.length->pw.format->this.readline
Console#readLine():::Reads a single line of text from the console.:::this.readLine
Console#readPassword(String, Object...):::Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled.:::this.installShutdownHook->this.echo->ioe.addSuppressed->this.echo->fmt.length->pw.format->this.readline->pw.println
Console#readPassword():::Reads a password or passphrase from the console with echoing disabled:::this.readPassword
Console#flush():::Flushes the console and forces any buffered output to be written immediately .:::pw.flush
DataInput#readFully(byte[]):::Reads some bytes from an input stream and stores them into the buffer array b:::
DataInput#readFully(byte[], int, int):::Reads len bytes from an input stream:::
DataInput#skipBytes(int):::Makes an attempt to skip over n bytes of data from the input stream, discarding the skipped bytes:::
DataInput#readBoolean():::Reads one input byte and returns true if that byte is nonzero, false if that byte is zero:::
DataInput#readByte():::Reads and returns one input byte:::
DataInput#readUnsignedByte():::Reads one input byte, zero-extends it to type int, and returns the result, which is therefore in the range 0 through 255:::
DataInput#readShort():::Reads two input bytes and returns a short value:::
DataInput#readUnsignedShort():::Reads two input bytes and returns an int value in the range 0 through 65535:::
DataInput#readChar():::Reads two input bytes and returns a char value:::
DataInput#readInt():::Reads four input bytes and returns an int value:::
DataInput#readLong():::Reads eight input bytes and returns a long value:::
DataInput#readFloat():::Reads four input bytes and returns a float value:::
DataInput#readDouble():::Reads eight input bytes and returns a double value:::
DataInput#readLine():::Reads the next line of text from the input stream:::
DataInput#readUTF():::Reads in a string that has been encoded using a modified UTF-8 format:::
DataInputStream#read(byte[]):::Reads some number of bytes from the contained input stream and stores them into the buffer array b:::in.read
DataInputStream#read(byte[], int, int):::Reads up to len bytes of data from the contained input stream into an array of bytes:::in.read
DataInputStream#readFully(byte[]):::See the general contract of the readFully method of DataInput:::this.readFully
DataInputStream#readFully(byte[], int, int):::See the general contract of the readFully method of DataInput:::in.read
DataInputStream#skipBytes(int):::See the general contract of the skipBytes method of DataInput:::in.skip
DataInputStream#readBoolean():::See the general contract of the readBoolean method of DataInput:::in.read
DataInputStream#readByte():::See the general contract of the readByte method of DataInput:::in.read
DataInputStream#readUnsignedByte():::See the general contract of the readUnsignedByte method of DataInput:::in.read
DataInputStream#readShort():::See the general contract of the readShort method of DataInput:::in.read->in.read
DataInputStream#readUnsignedShort():::See the general contract of the readUnsignedShort method of DataInput:::in.read->in.read
DataInputStream#readChar():::See the general contract of the readChar method of DataInput:::in.read->in.read
DataInputStream#readInt():::See the general contract of the readInt method of DataInput:::in.read->in.read->in.read->in.read
DataInputStream#readLong():::See the general contract of the readLong method of DataInput:::this.readFully
DataInputStream#readFloat():::See the general contract of the readFloat method of DataInput:::this.readInt->Float.intBitsToFloat
DataInputStream#readDouble():::See the general contract of the readDouble method of DataInput:::this.readLong->Double.longBitsToDouble
DataInputStream#readLine():::See the general contract of the readLine method of DataInput:::in.read->((PushbackInputStream) in).unread->System.arraycopy->in.read->String.copyValueOf
DataInputStream#readUTF():::See the general contract of the readUTF method of DataInput:::this.readUTF
DataInputStream#readUTF(DataInput):::Reads from the stream in a representation of a Unicode  character string encoded in modified UTF-8 format; this string of characters is then returned as a String:::in.readUnsignedShort->in.readFully
DataOutput#write(int):::Writes to the output stream the eight low-order bits of the argument b:::
DataOutput#write(byte[]):::Writes to the output stream all the bytes in array b:::
DataOutput#write(byte[], int, int):::Writes len bytes from array b, in order,  to the output stream:::
DataOutput#writeBoolean(boolean):::Writes a boolean value to this output stream:::
DataOutput#writeByte(int):::Writes to the output stream the eight low- order bits of the argument v:::
DataOutput#writeShort(int):::Writes two bytes to the output stream to represent the value of the argument:::
DataOutput#writeChar(int):::Writes a char value, which is comprised of two bytes, to the output stream:::
DataOutput#writeInt(int):::Writes an int value, which is comprised of four bytes, to the output stream:::
DataOutput#writeLong(long):::Writes a long value, which is comprised of eight bytes, to the output stream:::
DataOutput#writeFloat(float):::Writes a float value, which is comprised of four bytes, to the output stream:::
DataOutput#writeDouble(double):::Writes a double value, which is comprised of eight bytes, to the output stream:::
DataOutput#writeBytes(String):::Writes a string to the output stream:::
DataOutput#writeChars(String):::Writes every character in the string s, to the output stream, in order, two bytes per character:::
DataOutput#writeUTF(String):::Writes two bytes of length information to the output stream, followed by the modified UTF-8 representation of  every character in the string s:::
DataOutputStream#write(int):::Writes the specified byte (the low eight bits of the argument b) to the underlying output stream:::out.write->this.incCount
DataOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to the underlying output stream:::out.write->this.incCount
DataOutputStream#flush():::Flushes this data output stream:::out.flush
DataOutputStream#writeBoolean(boolean):::Writes a boolean to the underlying output stream as a 1-byte value:::out.write->this.incCount
DataOutputStream#writeByte(int):::Writes out a byte to the underlying output stream as a 1-byte value:::out.write->this.incCount
DataOutputStream#writeShort(int):::Writes a short to the underlying output stream as two bytes, high byte first:::out.write->out.write->this.incCount
DataOutputStream#writeChar(int):::Writes a char to the underlying output stream as a 2-byte value, high byte first:::out.write->out.write->this.incCount
DataOutputStream#writeInt(int):::Writes an int to the underlying output stream as four bytes, high byte first:::out.write->out.write->out.write->out.write->this.incCount
DataOutputStream#writeLong(long):::Writes a long to the underlying output stream as eight bytes, high byte first:::out.write->this.incCount
DataOutputStream#writeFloat(float):::Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the underlying output stream as a 4-byte quantity, high byte first:::Float.floatToIntBits->this.writeInt
DataOutputStream#writeDouble(double):::Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the underlying output stream as an 8-byte quantity, high byte first:::Double.doubleToLongBits->this.writeLong
DataOutputStream#writeBytes(String):::Writes out the string to the underlying output stream as a sequence of bytes:::s.length->out.write->this.incCount
DataOutputStream#writeChars(String):::Writes a string to the underlying output stream as a sequence of characters:::s.length->s.charAt->out.write->out.write->this.incCount
DataOutputStream#writeUTF(String):::Writes a string to the underlying output stream using modified UTF-8 encoding in a machine-independent manner:::this.writeUTF
DataOutputStream#writeUTF(String, DataOutput):::Writes a string to the specified DataOutput using modified UTF-8 encoding in a machine-independent manner:::str.length->str.charAt->str.charAt->str.charAt->out.write
DataOutputStream#size():::Returns the current value of the counter written, the number of bytes written to this data output stream so far:::
DefaultFileSystem#getFileSystem():::Return the FileSystem object for Windows platform.:::
Externalizable#writeExternal(ObjectOutput):::The object implements the writeExternal method to save its contents by calling the methods of DataOutput for its primitive values or calling the writeObject method of ObjectOutput for objects, strings, and arrays.:::
Externalizable#readExternal(ObjectInput):::The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects, strings and arrays:::
File#isInvalid():::Check if the file has an invalid path:::this.path.indexOf
File#getPrefixLength():::Returns the length of this abstract pathname's prefix:::
File#getName():::Returns the name of the file or directory denoted by this abstract pathname:::path.lastIndexOf->path.substring->path.substring
File#getParent():::Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory:::path.lastIndexOf->path.length->path.substring->path.substring
File#getParentFile():::Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory:::this.getParent
File#getPath():::Converts this abstract pathname into a pathname string:::
File#isAbsolute():::Tests whether this abstract pathname is absolute:::fs.isAbsolute
File#getAbsolutePath():::Returns the absolute pathname string of this abstract pathname:::fs.resolve
File#getAbsoluteFile():::Returns the absolute form of this abstract pathname:::this.getAbsolutePath->fs.prefixLength
File#getCanonicalPath():::Returns the canonical pathname string of this abstract pathname:::this.isInvalid->fs.resolve->fs.canonicalize
File#getCanonicalFile():::Returns the canonical form of this abstract pathname:::this.getCanonicalPath->fs.prefixLength
File#toURL():::Converts this abstract pathname into a file: URL:::this.isInvalid->this.getAbsolutePath->this.isDirectory->this.slashify
File#toURI():::Constructs a file: URI that represents this abstract pathname:::this.getAbsoluteFile->f.getPath->f.isDirectory->this.slashify->sp.startsWith
File#canRead():::Tests whether the application can read the file denoted by this abstract pathname:::System.getSecurityManager->security.checkRead->this.isInvalid->fs.checkAccess
File#canWrite():::Tests whether the application can modify the file denoted by this abstract pathname:::System.getSecurityManager->security.checkWrite->this.isInvalid->fs.checkAccess
File#exists():::Tests whether the file or directory denoted by this abstract pathname exists.:::System.getSecurityManager->security.checkRead->this.isInvalid->fs.getBooleanAttributes
File#isDirectory():::Tests whether the file denoted by this abstract pathname is a directory:::System.getSecurityManager->security.checkRead->this.isInvalid->fs.getBooleanAttributes
File#isFile():::Tests whether the file denoted by this abstract pathname is a normal file:::System.getSecurityManager->security.checkRead->this.isInvalid->fs.getBooleanAttributes
File#isHidden():::Tests whether the file named by this abstract pathname is a hidden file:::System.getSecurityManager->security.checkRead->this.isInvalid->fs.getBooleanAttributes
File#lastModified():::Returns the time that the file denoted by this abstract pathname was last modified.:::System.getSecurityManager->security.checkRead->this.isInvalid->fs.getLastModifiedTime
File#length():::Returns the length of the file denoted by this abstract pathname:::System.getSecurityManager->security.checkRead->this.isInvalid->fs.getLength
File#createNewFile():::Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist:::System.getSecurityManager->security.checkWrite->this.isInvalid->fs.createFileExclusively
File#delete():::Deletes the file or directory denoted by this abstract pathname:::System.getSecurityManager->security.checkDelete->this.isInvalid->fs.delete
File#deleteOnExit():::Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates:::System.getSecurityManager->security.checkDelete->this.isInvalid->DeleteOnExitHook.add
File#list():::Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname:::System.getSecurityManager->security.checkRead->this.isInvalid->fs.list
File#list(FilenameFilter):::Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter:::this.list->filter.accept->v.add->v.toArray
File#listFiles():::Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname:::this.list
File#listFiles(FilenameFilter):::Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter:::this.list->filter.accept->files.add->files.toArray
File#listFiles(FileFilter):::Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter:::this.list->filter.accept->files.add->files.toArray
File#mkdir():::Creates the directory named by this abstract pathname.:::System.getSecurityManager->security.checkWrite->this.isInvalid->fs.createDirectory
File#mkdirs():::Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories:::this.exists->this.mkdir->this.getCanonicalFile->canonFile.getParentFile->parent.mkdirs->parent.exists->canonFile.mkdir
File#renameTo(File):::Renames the file denoted by this abstract pathname:::System.getSecurityManager->security.checkWrite->security.checkWrite->this.isInvalid->dest.isInvalid->fs.rename
File#setLastModified(long):::Sets the last-modified time of the file or directory named by this abstract pathname:::System.getSecurityManager->security.checkWrite->this.isInvalid->fs.setLastModifiedTime
File#setReadOnly():::Marks the file or directory named by this abstract pathname so that only read operations are allowed:::System.getSecurityManager->security.checkWrite->this.isInvalid->fs.setReadOnly
File#setWritable(boolean, boolean):::Sets the owner's or everybody's write permission for this abstract pathname:::System.getSecurityManager->security.checkWrite->this.isInvalid->fs.setPermission
File#setWritable(boolean):::A convenience method to set the owner's write permission for this abstract pathname:::this.setWritable
File#setReadable(boolean, boolean):::Sets the owner's or everybody's read permission for this abstract pathname:::System.getSecurityManager->security.checkWrite->this.isInvalid->fs.setPermission
File#setReadable(boolean):::A convenience method to set the owner's read permission for this abstract pathname:::this.setReadable
File#setExecutable(boolean, boolean):::Sets the owner's or everybody's execute permission for this abstract pathname:::System.getSecurityManager->security.checkWrite->this.isInvalid->fs.setPermission
File#setExecutable(boolean):::A convenience method to set the owner's execute permission for this abstract pathname:::this.setExecutable
File#canExecute():::Tests whether the application can execute the file denoted by this abstract pathname:::System.getSecurityManager->security.checkExec->this.isInvalid->fs.checkAccess
File#listRoots():::List the available filesystem roots:::fs.listRoots
File#getTotalSpace():::Returns the size of the partition named by this abstract pathname.:::System.getSecurityManager->sm.checkPermission->sm.checkRead->this.isInvalid->fs.getSpace
File#getFreeSpace():::Returns the number of unallocated bytes in the partition named by this abstract path name:::System.getSecurityManager->sm.checkPermission->sm.checkRead->this.isInvalid->fs.getSpace
File#getUsableSpace():::Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname:::System.getSecurityManager->sm.checkPermission->sm.checkRead->this.isInvalid->fs.getSpace
File#createTempFile(String, String, File)::: Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name:::prefix.length->TempDirectory.location->System.getSecurityManager->TempDirectory.generateFile->f.getPath->sm.checkWrite->fs.getBooleanAttributes->f.getPath->fs.createFileExclusively
File#createTempFile(String, String):::Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name:::this.createTempFile
File#compareTo(File):::Compares two abstract pathnames lexicographically:::fs.compare
File#equals(Object):::Tests this abstract pathname for equality with the given object:::this.compareTo
File#hashCode():::Computes a hash code for this abstract pathname:::fs.hashCode
File#toString():::Returns the pathname string of this abstract pathname:::this.getPath
File#toPath():::Returns a Path java.nio.file.Path object constructed from this abstract path:::FileSystems.getDefault().getPath
FileCleanable#register(FileDescriptor):::Register a Cleanable with the FileDescriptor if the FileDescriptor is non-null and valid.:::fdo.valid->fdAccess.get->fdAccess.getHandle->fdo.registerCleanup
FileCleanable#unregister(FileDescriptor):::Unregister a Cleanable from the FileDescriptor.:::fdo.unregisterCleanup
FileCleanable#performCleanup():::Close the native handle or fd.:::this.cleanupClose0
FileDescriptor#valid():::Tests if this file descriptor object is valid.:::
FileDescriptor#sync():::Force all system buffers to synchronize with the underlying device:::
FileDescriptor#set(int):::Set the fd:::cleanup.clear
FileDescriptor#setHandle(long):::Set the handle:::cleanup.clear
FileDescriptor#registerCleanup(PhantomCleanable):::Register a cleanup for the current handle:::Objects.requireNonNull->cleanup.clear
FileDescriptor#unregisterCleanup():::Unregister a cleanup for the current raw fd or handle:::cleanup.clear
FileDescriptor#close():::Close the raw file descriptor or handle, if it has not already been closed:::this.unregisterCleanup->this.close0
FileDescriptor#attach(Closeable):::Attach a Closeable to this FD for tracking:::otherParents.add->otherParents.add->otherParents.add
FileDescriptor#closeAll(Closeable):::Cycle through all Closeables sharing this FD and call close() on each one:::ex.addSuppressed->ioe.addSuppressed->referent.close
FileFilter#accept(File):::Tests whether or not the specified abstract pathname should be included in a pathname list.:::
FileInputStream#read():::Reads a byte of data from this input stream:::this.read0
FileInputStream#read(byte[]):::Reads up to b.length bytes of data from this input stream into an array of bytes:::this.readBytes
FileInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes:::this.readBytes
FileInputStream#skip(long):::Skips over and discards n bytes of data from the input stream:::this.skip0
FileInputStream#available():::Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream:::this.available0
FileInputStream#close():::Closes this file input stream and releases any system resources associated with the stream:::fc.close->fd.closeAll
FileInputStream#getFD():::Returns the FileDescriptor object  that represents the connection to the actual file in the file system being used by this FileInputStream.:::
FileInputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file input stream:::FileChannelImpl.open->fc.close
FileInputStream#finalize():::Ensures that the #close method of this file input stream is called when there are no more references to it:::
FilenameFilter#accept(File, String):::Tests if a specified file should be included in a file list.:::
FileOutputStream#write(int):::Writes the specified byte to this file output stream:::fdAccess.getAppend->this.write
FileOutputStream#write(byte[]):::Writes b.length bytes from the specified byte array to this file output stream.:::fdAccess.getAppend->this.writeBytes
FileOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this file output stream.:::fdAccess.getAppend->this.writeBytes
FileOutputStream#close():::Closes this file output stream and releases any system resources associated with this stream:::fc.close->fd.closeAll
FileOutputStream#getFD():::Returns the file descriptor associated with this stream.:::
FileOutputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file output stream:::FileChannelImpl.open->fc.close
FileOutputStream#finalize():::Cleans up the connection to the file, and ensures that the #close method of this file output stream is called when there are no more references to this stream:::
FilePermission#implies(Permission):::Checks if this FilePermission object "implies" the specified permission:::this.impliesIgnoreMask
FilePermission#impliesIgnoreMask(FilePermission):::Checks if the Permission's actions are a proper subset of the this object's actions:::this.cpath.equals->that.cpath.lastIndexOf->this.cpath.length->this.cpath.regionMatches->this.cpath.equals->that.cpath.length->this.cpath.length->that.cpath.startsWith->that.cpath.length->this.cpath.length->that.cpath.startsWith->this.npath.equals->this.containsPath->this.npath2.equals->this.containsPath
FilePermission#equals(Object):::Checks two FilePermission objects for equality:::this.cpath.equals->this.npath.equals->Objects.equals
FilePermission#hashCode():::Returns the hash code value for this object.:::Objects.hash
FilePermission#getMask():::Return the current action mask:::
FilePermission#getActions():::Returns the "canonical string representation" of the actions:::this.getActions
FilePermission#newPermissionCollection():::Returns a new PermissionCollection object for storing FilePermission objects:::
FilePermission#withNewActions(int):::Create a cloned FilePermission with a different actions.:::this.getName
FilePermissionCollection#add(Permission):::Adds a permission to the FilePermissionCollection:::this.isReadOnly->fp.getName->perms.merge
FilePermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".:::fperm.getMask->fp.getMask->fp.impliesIgnoreMask->fp.getMask->perms.values
FilePermissionCollection#elements():::Returns an enumeration of all the FilePermission objects in the container.:::perms.elements
FileSystem#getSeparator():::Return the local filesystem's name-separator character.:::
FileSystem#getPathSeparator():::Return the local filesystem's path-separator character.:::
FileSystem#normalize(String):::Convert the given pathname string to normal form:::
FileSystem#prefixLength(String):::Compute the length of this pathname string's prefix:::
FileSystem#resolve(String, String):::Resolve the child pathname string against the parent:::
FileSystem#getDefaultParent():::Return the parent pathname string to be used when the parent-directory argument in one of the two-argument File constructors is the empty pathname.:::
FileSystem#fromURIPath(String):::Post-process the given URI path string if necessary:::
FileSystem#isAbsolute(File):::Tell whether or not the given abstract pathname is absolute.:::
FileSystem#resolve(File):::Resolve the given abstract pathname into absolute form:::
FileSystem#getBooleanAttributes(File):::Return the simple boolean attributes for the file or directory denoted by the given abstract pathname, or zero if it does not exist or some other I/O error occurs.:::
FileSystem#checkAccess(File, int):::Check whether the file or directory denoted by the given abstract pathname may be accessed by this process:::
FileSystem#setPermission(File, int, boolean, boolean):::Set on or off the access permission (to owner only or to all) to the file or directory denoted by the given abstract pathname, based on the parameters enable, access and oweronly.:::
FileSystem#getLastModifiedTime(File):::Return the time at which the file or directory denoted by the given abstract pathname was last modified, or zero if it does not exist or some other I/O error occurs.:::
FileSystem#getLength(File):::Return the length in bytes of the file denoted by the given abstract pathname, or zero if it does not exist, is a directory, or some other I/O error occurs.:::
FileSystem#createFileExclusively(String):::Create a new empty file with the given pathname:::
FileSystem#delete(File):::Delete the file or directory denoted by the given abstract pathname, returning true if and only if the operation succeeds.:::
FileSystem#list(File):::List the elements of the directory denoted by the given abstract pathname:::
FileSystem#createDirectory(File):::Create a new directory denoted by the given abstract pathname, returning true if and only if the operation succeeds.:::
FileSystem#rename(File, File):::Rename the file or directory denoted by the first abstract pathname to the second abstract pathname, returning true if and only if the operation succeeds.:::
FileSystem#setLastModifiedTime(File, long):::Set the last-modified time of the file or directory denoted by the given abstract pathname, returning true if and only if the operation succeeds.:::
FileSystem#setReadOnly(File):::Mark the file or directory denoted by the given abstract pathname as read-only, returning true if and only if the operation succeeds.:::
FileSystem#listRoots():::List the available filesystem roots.:::
FileSystem#getNameMax(String):::Retrieve the maximum length of a component of a file path.:::
FileSystem#compare(File, File):::Compare two abstract pathnames lexicographically.:::
FileSystem#hashCode(File):::Compute the hash code of an abstract pathname.:::
FilterInputStream#read():::Reads the next byte of data from this input stream:::in.read
FilterInputStream#read(byte[]):::Reads up to b.length bytes of data from this input stream into an array of bytes:::this.read
FilterInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes:::in.read
FilterInputStream#skip(long):::Skips over and discards n bytes of data from the input stream:::in.skip
FilterInputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream:::in.available
FilterInputStream#close():::Closes this input stream and releases any system resources associated with the stream:::in.close
FilterInputStream#mark(int):::Marks the current position in this input stream:::in.mark
FilterInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream:::in.reset
FilterInputStream#markSupported():::Tests if this input stream supports the mark and reset methods:::in.markSupported
FilterOutputStream#write(int):::Writes the specified byte to this output stream:::out.write
FilterOutputStream#write(byte[]):::Writes b.length bytes to this output stream:::this.write
FilterOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this output stream:::this.write
FilterOutputStream#flush():::Flushes this output stream and forces any buffered output bytes to be written out to the stream:::out.flush
FilterOutputStream#close():::Closes this output stream and releases any system resources associated with the stream:::flushException.addSuppressed->closeException.addSuppressed->out.close->out.close->this.flush
FilterReader#read():::Reads a single character.:::in.read
FilterReader#read(char[], int, int):::Reads characters into a portion of an array.:::in.read
FilterReader#skip(long):::Skips characters.:::in.skip
FilterReader#ready():::Tells whether this stream is ready to be read.:::in.ready
FilterReader#markSupported():::Tells whether this stream supports the mark() operation.:::in.markSupported
FilterReader#mark(int):::Marks the present position in the stream.:::in.mark
FilterReader#reset():::Resets the stream.:::in.reset
FilterWriter#write(int):::Writes a single character.:::out.write
FilterWriter#write(char[], int, int):::Writes a portion of an array of characters.:::out.write
FilterWriter#write(String, int, int):::Writes a portion of a string.:::out.write
FilterWriter#flush():::Flushes the stream.:::out.flush
Flushable#flush():::Flushes this stream by writing any buffered output to the underlying stream.:::
InputStream#nullInputStream():::Returns a new InputStream that reads no bytes:::this.ensureOpen->this.ensureOpen->Objects.checkFromIndexSize->this.ensureOpen->this.ensureOpen->Objects.checkFromIndexSize->this.ensureOpen->this.ensureOpen->this.ensureOpen->Objects.requireNonNull->this.ensureOpen
InputStream#read():::Reads the next byte of data from the input stream:::
InputStream#read(byte[]):::Reads some number of bytes from the input stream and stores them into the buffer array b:::this.read
InputStream#read(byte[], int, int):::Reads up to len bytes of data from the input stream into an array of bytes:::Objects.checkFromIndexSize->this.read->this.read
InputStream#readAllBytes():::Reads all remaining bytes from the input stream:::this.readNBytes
InputStream#readNBytes(int):::Reads up to a specified number of bytes from the input stream:::Math.min->Math.min->this.read->bufs.add->bufs.add->Arrays.copyOf->Math.min->System.arraycopy
InputStream#readNBytes(byte[], int, int):::Reads the requested number of bytes from the input stream into the given byte array:::Objects.checkFromIndexSize->this.read
InputStream#skip(long):::Skips over and discards n bytes of data from this input stream:::Math.min->this.read
InputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking, which may be 0, or 0 when end of stream is detected:::
InputStream#close():::Closes this input stream and releases any system resources associated with the stream:::
InputStream#mark(int):::Marks the current position in this input stream:::
InputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream:::
InputStream#markSupported():::Tests if this input stream supports the mark and reset methods:::
InputStream#transferTo(OutputStream):::Reads all bytes from this input stream and writes the bytes to the given output stream in the order that they are read:::Objects.requireNonNull->out.write->this.read
InputStreamReader#getEncoding():::Returns the name of the character encoding being used by this stream:::sd.getEncoding
InputStreamReader#read():::Reads a single character.:::sd.read
InputStreamReader#read(char[], int, int):::Reads characters into a portion of an array.:::sd.read
InputStreamReader#ready():::Tells whether this stream is ready to be read:::sd.ready
InvalidClassException#getMessage():::Produce the message and include the classname, if present.:::super.getMessage->super.getMessage
LineNumberInputStream#read():::Reads the next byte of data from this input stream:::in.read->in.read
LineNumberInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes:::this.read->this.read
LineNumberInputStream#skip(long):::Skips over and discards n bytes of data from this input stream:::this.read
LineNumberInputStream#setLineNumber(int):::Sets the line number to the specified argument.:::
LineNumberInputStream#getLineNumber():::Returns the current line number.:::
LineNumberInputStream#available():::Returns the number of bytes that can be read from this input stream without blocking:::super.available->super.available
LineNumberInputStream#mark(int):::Marks the current position in this input stream:::in.mark
LineNumberInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream:::in.reset
LineNumberReader#setLineNumber(int):::Set the current line number.:::
LineNumberReader#getLineNumber():::Get the current line number.:::
LineNumberReader#read():::Read a single character:::super.read->super.read
LineNumberReader#read(char[], int, int):::Read characters into a portion of an array:::super.read
LineNumberReader#readLine():::Read a line of text:::super.readLine
LineNumberReader#skip(long):::Skip characters.:::Math.min->this.read
LineNumberReader#mark(int):::Mark the present position in the stream:::super.mark
LineNumberReader#reset():::Reset the stream to the most recent mark.:::super.reset
ObjectInput#readObject():::Read and return an object:::
ObjectInput#read():::Reads a byte of data:::
ObjectInput#read(byte[]):::Reads into an array of bytes:::
ObjectInput#read(byte[], int, int):::Reads into an array of bytes:::
ObjectInput#skip(long):::Skips n bytes of input.:::
ObjectInput#available():::Returns the number of bytes that can be read without blocking.:::
ObjectInput#close():::Closes the input stream:::
ObjectInputFilter#checkInput(FilterInfo):::Check the class, array length, number of object references, depth, stream size, and other available filtering information:::
ObjectInputFilter.FilterInfo#serialClass():::The class of an object being deserialized:::
ObjectInputFilter.FilterInfo#arrayLength():::The number of array elements when deserializing an array of the class.:::
ObjectInputFilter.FilterInfo#depth():::The current depth:::
ObjectInputFilter.FilterInfo#references():::The current number of object references.:::
ObjectInputFilter.FilterInfo#streamBytes():::The current number of bytes consumed.:::
ObjectInputFilter.Config#filterLog(System.Logger.Level, String, Object...):::Logger for debugging.:::configLog.log
ObjectInputFilter.Config#getSerialFilter():::Returns the process-wide serialization filter or null if not configured.:::
ObjectInputFilter.Config#setSerialFilter(ObjectInputFilter):::Set the process-wide filter if it has not already been configured or set.:::Objects.requireNonNull->System.getSecurityManager->sm.checkPermission
ObjectInputFilter.Config#createFilter(String):::Returns an ObjectInputFilter from a string of patterns:::Objects.requireNonNull->Global.createFilter
ObjectInputFilter.Config#createFilter2(String):::Returns an ObjectInputFilter from a string of patterns that checks only the length for arrays, not the component type.:::Objects.requireNonNull->Global.createFilter
ObjectInputFilter.Config.Global#createFilter(String, boolean):::Returns an ObjectInputFilter from a string of patterns.:::
ObjectInputFilter.Config.Global#toString():::Returns the pattern used to create this filter.:::
ObjectInputStream#readObject():::Read an object from the ObjectInputStream:::this.readObject
ObjectInputStream#readObjectOverride():::This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected no-arg constructor:::
ObjectInputStream#readUnshared():::Reads an "unshared" object from the ObjectInputStream:::this.clear->this.readObject0->handles.markDependency->handles.lookupException->vlist.doCallbacks->this.freeze
ObjectInputStream#defaultReadObject():::Read the non-static and non-transient fields of the current class from this stream:::ctx.getObj->ctx.getDesc->bin.setBlockDataMode->this.defaultReadFields->this.defaultCheckFieldValues->this.defaultSetFieldValues->bin.setBlockDataMode->curDesc.hasWriteObjectData->handles.lookupException
ObjectInputStream#readFields():::Reads the persistent fields from the stream and makes them available by name.:::ctx.checkAndSetUsed->ctx.getDesc->bin.setBlockDataMode->getField.readFields->bin.setBlockDataMode->curDesc.hasWriteObjectData
ObjectInputStream#registerValidation(ObjectInputValidation, int):::Register an object to be validated before the graph is returned:::vlist.register
ObjectInputStream#resolveClass(ObjectStreamClass):::Load the local class equivalent of the specified stream class description:::desc.getName->primClasses.get->this.latestUserDefinedLoader->Class.forName
ObjectInputStream#resolveProxyClass(String[]):::Returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class:::this.latestUserDefinedLoader->Class.forName->cl.getModifiers->cl.getClassLoader->cl.getClassLoader->Proxy.getProxyClass
ObjectInputStream#resolveObject(Object):::This method will allow trusted subclasses of ObjectInputStream to substitute one object for another during deserialization:::
ObjectInputStream#enableResolveObject(boolean):::Enables the stream to do replacement of objects read from the stream:::System.getSecurityManager->sm.checkPermission
ObjectInputStream#readStreamHeader():::The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers:::bin.readShort->bin.readShort->String.format
ObjectInputStream#readClassDescriptor():::Read a class descriptor from the serialization stream:::desc.readNonProxy
ObjectInputStream#read():::Reads a byte of data:::bin.read
ObjectInputStream#read(byte[], int, int):::Reads into an array of bytes:::bin.read
ObjectInputStream#available():::Returns the number of bytes that can be read without blocking.:::bin.available
ObjectInputStream#close():::Closes the input stream:::this.clear->bin.close
ObjectInputStream#readBoolean():::Reads in a boolean.:::bin.readBoolean
ObjectInputStream#readByte():::Reads an 8 bit byte.:::bin.readByte
ObjectInputStream#readUnsignedByte():::Reads an unsigned 8 bit byte.:::bin.readUnsignedByte
ObjectInputStream#readChar():::Reads a 16 bit char.:::bin.readChar
ObjectInputStream#readShort():::Reads a 16 bit short.:::bin.readShort
ObjectInputStream#readUnsignedShort():::Reads an unsigned 16 bit short.:::bin.readUnsignedShort
ObjectInputStream#readInt():::Reads a 32 bit int.:::bin.readInt
ObjectInputStream#readLong():::Reads a 64 bit long.:::bin.readLong
ObjectInputStream#readFloat():::Reads a 32 bit float.:::bin.readFloat
ObjectInputStream#readDouble():::Reads a 64 bit double.:::bin.readDouble
ObjectInputStream#readFully(byte[]):::Reads bytes, blocking until all bytes are read.:::bin.readFully
ObjectInputStream#readFully(byte[], int, int):::Reads bytes, blocking until all bytes are read.:::bin.readFully
ObjectInputStream#skipBytes(int):::Skips bytes.:::bin.skipBytes
ObjectInputStream#readLine():::Reads in a line that has been terminated by a \n, \r, \r\n or EOF.:::bin.readLine
ObjectInputStream#readUTF():::Reads a String in modified UTF-8 format.:::bin.readUTF
ObjectInputStream#getObjectInputFilter():::Returns the serialization filter for this stream:::
ObjectInputStream#setObjectInputFilter(ObjectInputFilter):::Set the serialization filter for the stream:::System.getSecurityManager->sm.checkPermission->ObjectInputFilter.Config.getSerialFilter
ObjectInputStream.GetField#getObjectStreamClass():::Get the ObjectStreamClass that describes the fields in the stream.:::
ObjectInputStream.GetField#defaulted(String):::Return true if the named field is defaulted and has no value in this stream.:::
ObjectInputStream.GetField#get(String, boolean):::Get the value of the named boolean field from the persistent field.:::
ObjectInputStream.GetField#get(String, byte):::Get the value of the named byte field from the persistent field.:::
ObjectInputStream.GetField#get(String, char):::Get the value of the named char field from the persistent field.:::
ObjectInputStream.GetField#get(String, short):::Get the value of the named short field from the persistent field.:::
ObjectInputStream.GetField#get(String, int):::Get the value of the named int field from the persistent field.:::
ObjectInputStream.GetField#get(String, long):::Get the value of the named long field from the persistent field.:::
ObjectInputStream.GetField#get(String, float):::Get the value of the named float field from the persistent field.:::
ObjectInputStream.GetField#get(String, double):::Get the value of the named double field from the persistent field.:::
ObjectInputStream.GetField#get(String, Object):::Get the value of the named Object field from the persistent field.:::
ObjectInputStream#readTypeString():::Reads string without allowing it to be replaced in stream:::bin.peekByte->this.readNull->this.readHandle->this.readString->String.format
ObjectInputValidation#validateObject():::Validates the object.:::
ObjectOutput#writeObject(Object):::Write an object to the underlying storage or stream:::
ObjectOutput#write(int):::Writes a byte:::
ObjectOutput#write(byte[]):::Writes an array of bytes:::
ObjectOutput#write(byte[], int, int):::Writes a sub array of bytes.:::
ObjectOutput#flush():::Flushes the stream:::
ObjectOutput#close():::Closes the stream:::
ObjectOutputStream#useProtocolVersion(int):::Specify stream protocol version to use when writing the stream:::handles.size
ObjectOutputStream#writeObject(Object):::Write the specified object to the ObjectOutputStream:::this.writeObjectOverride->this.writeFatalException->this.writeObject0
ObjectOutputStream#writeObjectOverride(Object):::Method used by subclasses to override the default writeObject method:::
ObjectOutputStream#writeUnshared(Object):::Writes an "unshared" object to the ObjectOutputStream:::this.writeFatalException->this.writeObject0
ObjectOutputStream#defaultWriteObject():::Write the non-static and non-transient fields of the current class to this stream:::ctx.getObj->ctx.getDesc->bout.setBlockDataMode->this.defaultWriteFields->bout.setBlockDataMode
ObjectOutputStream#putFields():::Retrieve the object used to buffer persistent fields to be written to the stream:::ctx.checkAndSetUsed->ctx.getDesc
ObjectOutputStream#writeFields():::Write the buffered fields to the stream.:::bout.setBlockDataMode->curPut.writeFields->bout.setBlockDataMode
ObjectOutputStream#reset():::Reset will disregard the state of any objects already written to the stream:::bout.setBlockDataMode->bout.writeByte->this.clear->bout.setBlockDataMode
ObjectOutputStream#annotateClass(Class):::Subclasses may implement this method to allow class data to be stored in the stream:::
ObjectOutputStream#annotateProxyClass(Class):::Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes:::
ObjectOutputStream#replaceObject(Object):::This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization:::
ObjectOutputStream#enableReplaceObject(boolean):::Enables the stream to do replacement of objects written to the stream:::System.getSecurityManager->sm.checkPermission
ObjectOutputStream#writeStreamHeader():::The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream:::bout.writeShort->bout.writeShort
ObjectOutputStream#writeClassDescriptor(ObjectStreamClass):::Write the specified class descriptor to the ObjectOutputStream:::desc.writeNonProxy
ObjectOutputStream#write(int):::Writes a byte:::bout.write
ObjectOutputStream#write(byte[]):::Writes an array of bytes:::bout.write
ObjectOutputStream#write(byte[], int, int):::Writes a sub array of bytes.:::bout.write
ObjectOutputStream#flush():::Flushes the stream:::bout.flush
ObjectOutputStream#drain():::Drain any buffered data in ObjectOutputStream:::bout.drain
ObjectOutputStream#close():::Closes the stream:::this.flush->this.clear->bout.close
ObjectOutputStream#writeBoolean(boolean):::Writes a boolean.:::bout.writeBoolean
ObjectOutputStream#writeByte(int):::Writes an 8 bit byte.:::bout.writeByte
ObjectOutputStream#writeShort(int):::Writes a 16 bit short.:::bout.writeShort
ObjectOutputStream#writeChar(int):::Writes a 16 bit char.:::bout.writeChar
ObjectOutputStream#writeInt(int):::Writes a 32 bit int.:::bout.writeInt
ObjectOutputStream#writeLong(long):::Writes a 64 bit long.:::bout.writeLong
ObjectOutputStream#writeFloat(float):::Writes a 32 bit float.:::bout.writeFloat
ObjectOutputStream#writeDouble(double):::Writes a 64 bit double.:::bout.writeDouble
ObjectOutputStream#writeBytes(String):::Writes a String as a sequence of bytes.:::bout.writeBytes
ObjectOutputStream#writeChars(String):::Writes a String as a sequence of chars.:::bout.writeChars
ObjectOutputStream#writeUTF(String):::Primitive data write of this String in modified UTF-8 format:::bout.writeUTF
ObjectOutputStream.PutField#put(String, boolean):::Put the value of the named boolean field into the persistent field.:::
ObjectOutputStream.PutField#put(String, byte):::Put the value of the named byte field into the persistent field.:::
ObjectOutputStream.PutField#put(String, char):::Put the value of the named char field into the persistent field.:::
ObjectOutputStream.PutField#put(String, short):::Put the value of the named short field into the persistent field.:::
ObjectOutputStream.PutField#put(String, int):::Put the value of the named int field into the persistent field.:::
ObjectOutputStream.PutField#put(String, long):::Put the value of the named long field into the persistent field.:::
ObjectOutputStream.PutField#put(String, float):::Put the value of the named float field into the persistent field.:::
ObjectOutputStream.PutField#put(String, double):::Put the value of the named double field into the persistent field.:::
ObjectOutputStream.PutField#put(String, Object):::Put the value of the named Object field into the persistent field.:::
ObjectOutputStream.PutField#write(ObjectOutput):::Write the data and fields to the specified ObjectOutput stream, which must be the same stream that produced this PutField object.:::
ObjectOutputStream#getProtocolVersion():::Returns protocol version in use.:::
ObjectOutputStream#writeTypeString(String):::Writes string without allowing it to be replaced in stream:::handles.lookup->this.writeString->this.writeHandle->this.writeNull
ObjectStreamClass#lookup(Class):::Find the descriptor for a class that can be serialized:::this.lookup
ObjectStreamClass#lookupAny(Class):::Returns the descriptor for any class, regardless of whether it implements Serializable.:::this.lookup
ObjectStreamClass#getName():::Returns the name of the class described by this descriptor:::
ObjectStreamClass#getSerialVersionUID():::Return the serialVersionUID for this class:::AccessController.doPrivileged->suid.longValue
ObjectStreamClass#forClass():::Return the class in the local VM that this version is mapped to:::this.requireInitialized->System.getSecurityManager->Reflection.getCallerClass->caller.getClassLoader->cl.getClassLoader->ReflectUtil.needsPackageAccessCheck->ReflectUtil.checkPackageAccess
ObjectStreamClass#getFields():::Return an array of the fields of this serializable class.:::this.getFields
ObjectStreamClass#getField(String):::Get the field of this class by name.:::this.getField
ObjectStreamClass#toString():::Return a string describing this ObjectStreamClass.:::this.getSerialVersionUID
ObjectStreamClass#lookup(Class, boolean):::Looks up and returns class descriptor for given class, or null if class is non-serializable and "all" is set to false.:::Serializable.class.isAssignableFrom->this.processQueue->Caches.localDescs.get->ref.get->Caches.localDescs.remove->Caches.localDescs.putIfAbsent->ref.get->future.getOwner->Thread.currentThread->future.get->future.set->future.get->Caches.localDescs.put
ObjectStreamClass#initProxy(Class, ClassNotFoundException, ObjectStreamClass):::Initializes class descriptor representing a proxy class.:::this.lookup->Long.valueOf->this.getReflector
ObjectStreamClass#initNonProxy(ObjectStreamClass, Class, ClassNotFoundException, ObjectStreamClass):::Initializes class descriptor representing a non-proxy class.:::model.getSerialVersionUID->Long.valueOf->this.lookup->cl.isArray->osc.getSerialVersionUID->osc.getSerialVersionUID->this.classNamesEqual->this.getReflector->fieldRefl.getFields
ObjectStreamClass#readNonProxy(ObjectInputStream):::Reads non-proxy class descriptor information from given input stream:::in.readUTF->in.readLong->Long.valueOf->in.readByte->suid.longValue->in.readShort->in.readByte->in.readUTF->in.readTypeString->new InvalidClassException(name, "invalid descriptor for field " + fname).initCause->this.computeFieldOffsets
ObjectStreamClass#writeNonProxy(ObjectOutputStream):::Writes non-proxy class descriptor information to given output stream.:::out.writeUTF->this.getSerialVersionUID->out.writeLong->out.getProtocolVersion->out.writeByte->out.writeShort->f.getTypeCode->out.writeByte->f.getName->out.writeUTF->f.isPrimitive->f.getTypeString->out.writeTypeString
ObjectStreamClass#getResolveException():::Returns ClassNotFoundException (if any) thrown while attempting to resolve local class corresponding to this class descriptor.:::
ObjectStreamClass#checkInitialized():::Throws InvalidClassException if not initialized:::
ObjectStreamClass#checkDeserialize():::Throws an InvalidClassException if object instances referencing this class descriptor should not be allowed to deserialize:::this.requireInitialized->deserializeEx.newInvalidClassException
ObjectStreamClass#checkSerialize():::Throws an InvalidClassException if objects whose class is represented by this descriptor should not be allowed to serialize:::this.requireInitialized->serializeEx.newInvalidClassException
ObjectStreamClass#checkDefaultSerialize():::Throws an InvalidClassException if objects whose class is represented by this descriptor should not be permitted to use default serialization (e.g., if the class declares serializable fields that do not correspond to actual fields, and hence must use the GetField API):::this.requireInitialized->defaultSerializeEx.newInvalidClassException
ObjectStreamClass#getSuperDesc():::Returns superclass descriptor:::this.requireInitialized
ObjectStreamClass#getLocalDesc():::Returns the "local" class descriptor for the class associated with this class descriptor (i.e., the result of ObjectStreamClass.lookup(this.forClass())) or null if there is no class associated with this descriptor.:::this.requireInitialized
ObjectStreamClass#getFields(boolean):::Returns arrays of ObjectStreamFields representing the serializable fields of the represented class:::fields.clone
ObjectStreamClass#getField(String, Class):::Looks up a serializable field of the represented class by name and type:::f.getName().equals->f.isPrimitive->f.getType->type.isAssignableFrom
ObjectStreamClass#isProxy():::Returns true if class descriptor represents a dynamic proxy class, false otherwise.:::this.requireInitialized
ObjectStreamClass#isEnum():::Returns true if class descriptor represents an enum type, false otherwise.:::this.requireInitialized
ObjectStreamClass#isExternalizable():::Returns true if represented class implements Externalizable, false otherwise.:::this.requireInitialized
ObjectStreamClass#isSerializable():::Returns true if represented class implements Serializable, false otherwise.:::this.requireInitialized
ObjectStreamClass#hasBlockExternalData():::Returns true if class descriptor represents externalizable class that has written its data in 1.2 (block data) format, false otherwise.:::this.requireInitialized
ObjectStreamClass#hasWriteObjectData():::Returns true if class descriptor represents serializable (but not externalizable) class which has written its data via a custom writeObject() method, false otherwise.:::this.requireInitialized
ObjectStreamClass#isInstantiable():::Returns true if represented class is serializable/externalizable and can be instantiated by the serialization runtime--i.e., if it is externalizable and defines a public no-arg constructor, or if it is non-externalizable and its first non-serializable superclass defines an accessible no-arg constructor:::this.requireInitialized
ObjectStreamClass#hasWriteObjectMethod():::Returns true if represented class is serializable (but not externalizable) and defines a conformant writeObject method:::this.requireInitialized
ObjectStreamClass#hasReadObjectMethod():::Returns true if represented class is serializable (but not externalizable) and defines a conformant readObject method:::this.requireInitialized
ObjectStreamClass#hasReadObjectNoDataMethod():::Returns true if represented class is serializable (but not externalizable) and defines a conformant readObjectNoData method:::this.requireInitialized
ObjectStreamClass#hasWriteReplaceMethod():::Returns true if represented class is serializable or externalizable and defines a conformant writeReplace method:::this.requireInitialized
ObjectStreamClass#hasReadResolveMethod():::Returns true if represented class is serializable or externalizable and defines a conformant readResolve method:::this.requireInitialized
ObjectStreamClass#newInstance():::Creates a new instance of the represented class:::this.requireInitialized->ex.initCause->SharedSecrets.getJavaSecurityAccess->cons.newInstance->x.getCause->AccessController.getContext->jsa.doIntersectionPrivilege->cons.newInstance
ObjectStreamClass#invokeWriteObject(Object, ObjectOutputStream):::Invokes the writeObject method of the represented serializable class:::this.requireInitialized->ex.getTargetException->this.throwMiscException->writeObjectMethod.invoke
ObjectStreamClass#invokeReadObject(Object, ObjectInputStream):::Invokes the readObject method of the represented serializable class:::this.requireInitialized->ex.getTargetException->this.throwMiscException->readObjectMethod.invoke
ObjectStreamClass#invokeReadObjectNoData(Object):::Invokes the readObjectNoData method of the represented serializable class:::this.requireInitialized->ex.getTargetException->this.throwMiscException->readObjectNoDataMethod.invoke
ObjectStreamClass#invokeWriteReplace(Object):::Invokes the writeReplace method of the represented serializable class and returns the result:::this.requireInitialized->ex.getTargetException->this.throwMiscException->writeReplaceMethod.invoke
ObjectStreamClass#invokeReadResolve(Object):::Invokes the readResolve method of the represented serializable class and returns the result:::this.requireInitialized->ex.getTargetException->this.throwMiscException->readResolveMethod.invoke
ObjectStreamClass#getClassDataLayout():::Returns array of ClassDataSlot instances representing the data layout (including superclass data) for serialized objects described by this class descriptor:::this.getClassDataLayout0
ObjectStreamClass#getPrimDataSize():::Returns aggregate size (in bytes) of marshalled primitive field values for represented class.:::
ObjectStreamClass#getNumObjFields():::Returns number of non-primitive serializable fields of represented class.:::
ObjectStreamClass#getPrimFieldValues(Object, byte[]):::Fetches the serializable primitive field values of object obj and marshals them into byte array buf starting at offset 0:::fieldRefl.getPrimFieldValues
ObjectStreamClass#setPrimFieldValues(Object, byte[]):::Sets the serializable primitive fields of object obj using values unmarshalled from byte array buf starting at offset 0:::fieldRefl.setPrimFieldValues
ObjectStreamClass#getObjFieldValues(Object, Object[]):::Fetches the serializable object field values of object obj and stores them in array vals starting at offset 0:::fieldRefl.getObjFieldValues
ObjectStreamClass#checkObjFieldValueTypes(Object, Object[]):::Checks that the given values, from array vals starting at offset 0, are assignable to the given serializable object fields.:::fieldRefl.checkObjectFieldValueTypes
ObjectStreamClass#setObjFieldValues(Object, Object[]):::Sets the serializable object fields of object obj using values from array vals starting at offset 0:::fieldRefl.setObjFieldValues
ObjectStreamClass#processQueue(ReferenceQueue>, ConcurrentMap>, ?>):::Removes from the specified map any keys that have been enqueued on the specified reference queue.:::map.remove->queue.poll
ObjectStreamClass.WeakClassKey#hashCode():::Returns the identity hash code of the original referent.:::
ObjectStreamClass.WeakClassKey#equals(Object):::Returns true if the given object is this identical WeakClassKey instance, or, if this object's referent has not been cleared, if the given object is another WeakClassKey instance with the identical non-null referent as this one.:::this.get->((WeakClassKey) obj).get
ObjectStreamField#getClassSignature(Class):::Returns JVM type signature for given class.:::cl.isPrimitive->appendClassSignature(new StringBuilder(), cl).toString->this.getPrimitiveSignature
ObjectStreamField#getName():::Get the name of this field.:::
ObjectStreamField#getType():::Get the type of the field:::System.getSecurityManager->Reflection.getCallerClass->caller.getClassLoader->type.getClassLoader->ReflectUtil.needsPackageAccessCheck->ReflectUtil.checkPackageAccess
ObjectStreamField#isUnshared():::Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.:::
ObjectStreamField#toString():::Return a string that describes this field.:::this.getSignature
ObjectStreamField#getField():::Returns field represented by this ObjectStreamField, or null if ObjectStreamField is not associated with an actual field.:::
ObjectStreamField#getSignature():::Returns JVM type signature of field (similar to getTypeString, except that signature strings are returned for primitive fields as well).:::getClassSignature(type).intern
OutputStream#nullOutputStream():::Returns a new OutputStream which discards all bytes:::this.ensureOpen->Objects.checkFromIndexSize->this.ensureOpen
OutputStream#write(int):::Writes the specified byte to this output stream:::
OutputStream#write(byte[]):::Writes b.length bytes from the specified byte array to this output stream:::this.write
OutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this output stream:::Objects.checkFromIndexSize->this.write
OutputStream#flush():::Flushes this output stream and forces any buffered output bytes to be written out:::
OutputStream#close():::Closes this output stream and releases any system resources associated with this stream:::
OutputStreamWriter#getEncoding():::Returns the name of the character encoding being used by this stream:::se.getEncoding
OutputStreamWriter#flushBuffer():::Flushes the output buffer to the underlying byte stream, without flushing the byte stream itself:::se.flushBuffer
OutputStreamWriter#write(int):::Writes a single character.:::se.write
OutputStreamWriter#write(char[], int, int):::Writes a portion of an array of characters.:::se.write
OutputStreamWriter#write(String, int, int):::Writes a portion of a string.:::se.write
OutputStreamWriter#flush():::Flushes the stream.:::se.flush
PipedInputStream#connect(PipedOutputStream):::Causes this piped input stream to be connected to the piped  output stream src:::src.connect
PipedInputStream#receive(int):::Receives a byte of data:::this.checkStateForReceive->Thread.currentThread->this.awaitSpace
PipedInputStream#receive(byte[], int, int):::Receives data into an array of bytes:::this.checkStateForReceive->Thread.currentThread->this.awaitSpace->System.arraycopy
PipedInputStream#receivedLast():::Notifies all waiting threads that the last byte of data has been received.:::this.notifyAll
PipedInputStream#read():::Reads the next byte of data from this piped input stream:::writeSide.isAlive->Thread.currentThread->writeSide.isAlive->this.notifyAll->this.wait
PipedInputStream#read(byte[], int, int):::Reads up to len bytes of data from this piped input stream into an array of bytes:::this.read->Math.min->System.arraycopy
PipedInputStream#available():::Returns the number of bytes that can be read from this input stream without blocking.:::
PipedInputStream#close():::Closes this piped input stream and releases any system resources associated with the stream.:::
PipedOutputStream#connect(PipedInputStream):::Connects this piped output stream to a receiver:::
PipedOutputStream#write(int):::Writes the specified byte to the piped output stream:::sink.receive
PipedOutputStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this piped output stream:::sink.receive
PipedOutputStream#flush():::Flushes this output stream and forces any buffered output bytes to be written out:::sink.notifyAll
PipedOutputStream#close():::Closes this piped output stream and releases any system resources associated with this stream:::sink.receivedLast
PipedReader#connect(PipedWriter):::Causes this piped reader to be connected to the piped  writer src:::src.connect
PipedReader#receive(int):::Receives a char of data:::readSide.isAlive->Thread.currentThread->readSide.isAlive->this.notifyAll->this.wait
PipedReader#receive(char[], int, int):::Receives data into an array of characters:::this.receive
PipedReader#receivedLast():::Notifies all waiting threads that the last character of data has been received.:::this.notifyAll
PipedReader#read():::Reads the next character of data from this piped stream:::writeSide.isAlive->Thread.currentThread->writeSide.isAlive->this.notifyAll->this.wait
PipedReader#read(char[], int, int):::Reads up to len characters of data from this piped stream into an array of characters:::writeSide.isAlive->this.read
PipedReader#ready():::Tell whether this stream is ready to be read:::writeSide.isAlive
PipedReader#close():::Closes this piped stream and releases any system resources associated with the stream.:::
PipedWriter#connect(PipedReader):::Connects this piped writer to a receiver:::
PipedWriter#write(int):::Writes the specified char to the piped output stream:::sink.receive
PipedWriter#write(char[], int, int):::Writes len characters from the specified character array starting at offset off to this piped output stream:::sink.receive
PipedWriter#flush():::Flushes this output stream and forces any buffered output characters to be written out:::sink.notifyAll
PipedWriter#close():::Closes this piped output stream and releases any system resources associated with this stream:::sink.receivedLast
PrintStream#flush():::Flushes the stream:::this.ensureOpen->out.flush
PrintStream#close():::Closes the stream:::textOut.close->out.close
PrintStream#checkError():::Flushes the stream and checks its error state:::this.flush->ps.checkError
PrintStream#setError():::Sets the error state of the stream to true:::
PrintStream#clearError():::Clears the internal error state of this stream:::
PrintStream#write(int):::Writes the specified byte to this stream:::Thread.currentThread().interrupt->this.ensureOpen->out.write->out.flush
PrintStream#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this stream:::Thread.currentThread().interrupt->this.ensureOpen->out.write->out.flush
PrintStream#print(boolean):::Prints a boolean value:::String.valueOf->this.write
PrintStream#print(char):::Prints a character:::String.valueOf->this.write
PrintStream#print(int):::Prints an integer:::String.valueOf->this.write
PrintStream#print(long):::Prints a long integer:::String.valueOf->this.write
PrintStream#print(float):::Prints a floating-point number:::String.valueOf->this.write
PrintStream#print(double):::Prints a double-precision floating-point number:::String.valueOf->this.write
PrintStream#print(char[]):::Prints an array of characters:::this.write
PrintStream#print(String):::Prints a string:::String.valueOf->this.write
PrintStream#print(Object):::Prints an object:::String.valueOf->this.write
PrintStream#println():::Terminates the current line by writing the line separator string:::this.newLine
PrintStream#println(boolean):::Prints a boolean and then terminate the line:::this.print->this.newLine
PrintStream#println(char):::Prints a character and then terminate the line:::this.print->this.newLine
PrintStream#println(int):::Prints an integer and then terminate the line:::this.print->this.newLine
PrintStream#println(long):::Prints a long and then terminate the line:::this.print->this.newLine
PrintStream#println(float):::Prints a float and then terminate the line:::this.print->this.newLine
PrintStream#println(double):::Prints a double and then terminate the line:::this.print->this.newLine
PrintStream#println(char[]):::Prints an array of characters and then terminate the line:::this.print->this.newLine
PrintStream#println(String):::Prints a String and then terminate the line:::this.print->this.newLine
PrintStream#println(Object):::Prints an Object and then terminate the line:::String.valueOf->this.print->this.newLine
PrintStream#printf(String, Object...):::A convenience method to write a formatted string to this output stream using the specified format string and arguments:::this.format
PrintStream#printf(Locale, String, Object...):::A convenience method to write a formatted string to this output stream using the specified format string and arguments:::this.format
PrintStream#format(String, Object...):::Writes a formatted string to this output stream using the specified format string and arguments:::Thread.currentThread().interrupt->this.ensureOpen->formatter.locale->Locale.getDefault->Locale.getDefault->formatter.format
PrintStream#format(Locale, String, Object...):::Writes a formatted string to this output stream using the specified format string and arguments.:::Thread.currentThread().interrupt->this.ensureOpen->formatter.locale->formatter.format
PrintStream#append(CharSequence):::Appends the specified character sequence to this output stream:::String.valueOf->this.print
PrintStream#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this output stream:::csq.subSequence->this.append
PrintStream#append(char):::Appends the specified character to this output stream:::this.print
PrintWriter#flush():::Flushes the stream.:::this.ensureOpen->out.flush
PrintWriter#close():::Closes the stream and releases any system resources associated with it:::out.close
PrintWriter#checkError():::Flushes the stream if it's not closed and checks its error state.:::this.flush->psOut.checkError->pw.checkError
PrintWriter#setError():::Indicates that an error has occurred:::
PrintWriter#clearError():::Clears the error state of this stream:::
PrintWriter#write(int):::Writes a single character.:::Thread.currentThread().interrupt->this.ensureOpen->out.write
PrintWriter#write(char[], int, int):::Writes A Portion of an array of characters.:::Thread.currentThread().interrupt->this.ensureOpen->out.write
PrintWriter#write(char[]):::Writes an array of characters:::this.write
PrintWriter#write(String, int, int):::Writes a portion of a string.:::Thread.currentThread().interrupt->this.ensureOpen->out.write
PrintWriter#write(String):::Writes a string:::s.length->this.write
PrintWriter#print(boolean):::Prints a boolean value:::String.valueOf->this.write
PrintWriter#print(char):::Prints a character:::this.write
PrintWriter#print(int):::Prints an integer:::String.valueOf->this.write
PrintWriter#print(long):::Prints a long integer:::String.valueOf->this.write
PrintWriter#print(float):::Prints a floating-point number:::String.valueOf->this.write
PrintWriter#print(double):::Prints a double-precision floating-point number:::String.valueOf->this.write
PrintWriter#print(char[]):::Prints an array of characters:::this.write
PrintWriter#print(String):::Prints a string:::String.valueOf->this.write
PrintWriter#print(Object):::Prints an object:::String.valueOf->this.write
PrintWriter#println():::Terminates the current line by writing the line separator string:::this.newLine
PrintWriter#println(boolean):::Prints a boolean value and then terminates the line:::this.print->this.println
PrintWriter#println(char):::Prints a character and then terminates the line:::this.print->this.println
PrintWriter#println(int):::Prints an integer and then terminates the line:::this.print->this.println
PrintWriter#println(long):::Prints a long integer and then terminates the line:::this.print->this.println
PrintWriter#println(float):::Prints a floating-point number and then terminates the line:::this.print->this.println
PrintWriter#println(double):::Prints a double-precision floating-point number and then terminates the line:::this.print->this.println
PrintWriter#println(char[]):::Prints an array of characters and then terminates the line:::this.print->this.println
PrintWriter#println(String):::Prints a String and then terminates the line:::this.print->this.println
PrintWriter#println(Object):::Prints an Object and then terminates the line:::String.valueOf->this.print->this.println
PrintWriter#printf(String, Object...):::A convenience method to write a formatted string to this writer using the specified format string and arguments:::this.format
PrintWriter#printf(Locale, String, Object...):::A convenience method to write a formatted string to this writer using the specified format string and arguments:::this.format
PrintWriter#format(String, Object...):::Writes a formatted string to this writer using the specified format string and arguments:::Thread.currentThread().interrupt->this.ensureOpen->formatter.locale->Locale.getDefault->Locale.getDefault->formatter.format->out.flush
PrintWriter#format(Locale, String, Object...):::Writes a formatted string to this writer using the specified format string and arguments:::Thread.currentThread().interrupt->this.ensureOpen->formatter.locale->formatter.format->out.flush
PrintWriter#append(CharSequence):::Appends the specified character sequence to this writer:::String.valueOf->this.write
PrintWriter#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this writer:::csq.subSequence->this.append
PrintWriter#append(char):::Appends the specified character to this writer:::this.write
PushbackInputStream#read():::Reads the next byte of data from this input stream:::this.ensureOpen->super.read
PushbackInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes:::this.ensureOpen->System.arraycopy->super.read
PushbackInputStream#unread(int):::Pushes back a byte by copying it to the front of the pushback buffer:::this.ensureOpen
PushbackInputStream#unread(byte[], int, int):::Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer:::this.ensureOpen->System.arraycopy
PushbackInputStream#unread(byte[]):::Pushes back an array of bytes by copying it to the front of the pushback buffer:::this.unread
PushbackInputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream:::this.ensureOpen->super.available
PushbackInputStream#skip(long):::Skips over and discards n bytes of data from this input stream:::this.ensureOpen->super.skip
PushbackInputStream#markSupported():::Tests if this input stream supports the mark and reset methods, which it does not.:::
PushbackInputStream#mark(int):::Marks the current position in this input stream:::
PushbackInputStream#reset():::Repositions this stream to the position at the time the mark method was last called on this input stream:::
PushbackInputStream#close():::Closes this input stream and releases any system resources associated with the stream:::in.close
PushbackReader#read():::Reads a single character.:::this.ensureOpen->super.read
PushbackReader#read(char[], int, int):::Reads characters into a portion of an array.:::this.ensureOpen->System.arraycopy->super.read
PushbackReader#unread(int):::Pushes back a single character by copying it to the front of the pushback buffer:::this.ensureOpen
PushbackReader#unread(char[], int, int):::Pushes back a portion of an array of characters by copying it to the front of the pushback buffer:::this.ensureOpen->System.arraycopy
PushbackReader#unread(char[]):::Pushes back an array of characters by copying it to the front of the pushback buffer:::this.unread
PushbackReader#ready():::Tells whether this stream is ready to be read.:::this.ensureOpen->super.ready
PushbackReader#mark(int):::Marks the present position in the stream:::
PushbackReader#reset():::Resets the stream:::
PushbackReader#markSupported():::Tells whether this stream supports the mark() operation, which it does not.:::
PushbackReader#close():::Closes the stream and releases any system resources associated with it:::super.close
PushbackReader#skip(long):::Skips characters:::this.ensureOpen->super.skip
RandomAccessFile#getFD():::Returns the opaque file descriptor object associated with this stream.:::
RandomAccessFile#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file:::FileChannelImpl.open->closed.get->fc.close
RandomAccessFile#read():::Reads a byte of data from this file:::this.read0
RandomAccessFile#read(byte[], int, int):::Reads up to len bytes of data from this file into an array of bytes:::this.readBytes
RandomAccessFile#read(byte[]):::Reads up to b.length bytes of data from this file into an array of bytes:::this.readBytes
RandomAccessFile#readFully(byte[]):::Reads b.length bytes from this file into the byte array, starting at the current file pointer:::this.readFully
RandomAccessFile#readFully(byte[], int, int):::Reads exactly len bytes from this file into the byte array, starting at the current file pointer:::this.read
RandomAccessFile#skipBytes(int):::Attempts to skip over n bytes of input discarding the skipped bytes:::this.getFilePointer->this.length->this.seek
RandomAccessFile#write(int):::Writes the specified byte to this file:::this.write0
RandomAccessFile#write(byte[]):::Writes b.length bytes from the specified byte array to this file, starting at the current file pointer.:::this.writeBytes
RandomAccessFile#write(byte[], int, int):::Writes len bytes from the specified byte array starting at offset off to this file.:::this.writeBytes
RandomAccessFile#getFilePointer():::Returns the current offset in this file.:::
RandomAccessFile#seek(long):::Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs:::this.seek0
RandomAccessFile#length():::Returns the length of this file.:::
RandomAccessFile#setLength(long):::Sets the length of this file:::
RandomAccessFile#close():::Closes this random access file stream and releases any system resources associated with the stream:::closed.compareAndSet->fc.close->fd.closeAll
RandomAccessFile#readBoolean():::Reads a boolean from this file:::this.read
RandomAccessFile#readByte():::Reads a signed eight-bit value from this file:::this.read
RandomAccessFile#readUnsignedByte():::Reads an unsigned eight-bit number from this file:::this.read
RandomAccessFile#readShort():::Reads a signed 16-bit number from this file:::this.read->this.read
RandomAccessFile#readUnsignedShort():::Reads an unsigned 16-bit number from this file:::this.read->this.read
RandomAccessFile#readChar():::Reads a character from this file:::this.read->this.read
RandomAccessFile#readInt():::Reads a signed 32-bit integer from this file:::this.read->this.read->this.read->this.read
RandomAccessFile#readLong():::Reads a signed 64-bit integer from this file:::this.readInt->this.readInt
RandomAccessFile#readFloat():::Reads a float from this file:::this.readInt->Float.intBitsToFloat
RandomAccessFile#readDouble():::Reads a double from this file:::this.readLong->Double.longBitsToDouble
RandomAccessFile#readUTF():::Reads in a string from this file:::DataInputStream.readUTF
RandomAccessFile#writeBoolean(boolean):::Writes a boolean to the file as a one-byte value:::this.write
RandomAccessFile#writeByte(int):::Writes a byte to the file as a one-byte value:::this.write
RandomAccessFile#writeShort(int):::Writes a short to the file as two bytes, high byte first:::this.write->this.write
RandomAccessFile#writeChar(int):::Writes a char to the file as a two-byte value, high byte first:::this.write->this.write
RandomAccessFile#writeInt(int):::Writes an int to the file as four bytes, high byte first:::this.write->this.write->this.write->this.write
RandomAccessFile#writeLong(long):::Writes a long to the file as eight bytes, high byte first:::this.write->this.write->this.write->this.write->this.write->this.write->this.write->this.write
RandomAccessFile#writeFloat(float):::Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first:::Float.floatToIntBits->this.writeInt
RandomAccessFile#writeDouble(double):::Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first:::Double.doubleToLongBits->this.writeLong
RandomAccessFile#writeBytes(String):::Writes the string to the file as a sequence of bytes:::s.length->s.getBytes->this.writeBytes
RandomAccessFile#writeChars(String):::Writes a string to the file as a sequence of characters:::s.length->s.getChars->this.writeBytes
RandomAccessFile#writeUTF(String):::Writes a string to the file using modified UTF-8 encoding in a machine-independent manner:::DataOutputStream.writeUTF
Reader#nullReader():::Returns a new Reader that reads no characters:::this.ensureOpen->Objects.checkFromIndexSize->this.ensureOpen->Objects.requireNonNull->this.ensureOpen->target.hasRemaining->this.ensureOpen->this.ensureOpen->Objects.requireNonNull->this.ensureOpen
Reader#read(java.nio.CharBuffer):::Attempts to read characters into the specified character buffer:::target.remaining->this.read->target.put
Reader#read():::Reads a single character:::this.read
Reader#read(char[]):::Reads characters into an array:::this.read
Reader#read(char[], int, int):::Reads characters into a portion of an array:::
Reader#skip(long):::Skips characters:::Math.min->this.read
Reader#ready():::Tells whether this stream is ready to be read.:::
Reader#markSupported():::Tells whether this stream supports the mark() operation:::
Reader#mark(int):::Marks the present position in the stream:::
Reader#reset():::Resets the stream:::
Reader#close():::Closes the stream and releases any system resources associated with it:::
Reader#transferTo(Writer):::Reads all characters from this reader and writes the characters to the given writer in the order that they are read:::Objects.requireNonNull->out.write->this.read
SequenceInputStream#nextStream()::: Continues reading in the next stream if an EOF is reached.:::in.close->this.peekNextStream
SequenceInputStream#available():::Returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream:::in.available
SequenceInputStream#read():::Reads the next byte of data from this input stream:::in.read->this.nextStream
SequenceInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes:::in.read->this.nextStream
SequenceInputStream#close():::Closes this input stream and releases any system resources associated with the stream:::this.nextStream
StreamTokenizer#resetSyntax():::Resets this tokenizer's syntax table so that all characters are "ordinary." See the ordinaryChar method for more information on a character being ordinary.:::
StreamTokenizer#wordChars(int, int):::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are word constituents:::
StreamTokenizer#whitespaceChars(int, int):::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are white space characters:::
StreamTokenizer#ordinaryChars(int, int):::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are "ordinary" in this tokenizer:::
StreamTokenizer#ordinaryChar(int):::Specifies that the character argument is "ordinary" in this tokenizer:::
StreamTokenizer#commentChar(int):::Specified that the character argument starts a single-line comment:::
StreamTokenizer#quoteChar(int):::Specifies that matching pairs of this character delimit string constants in this tokenizer:::
StreamTokenizer#parseNumbers():::Specifies that numbers should be parsed by this tokenizer:::
StreamTokenizer#eolIsSignificant(boolean):::Determines whether or not ends of line are treated as tokens:::
StreamTokenizer#slashStarComments(boolean):::Determines whether or not the tokenizer recognizes C-style comments:::
StreamTokenizer#slashSlashComments(boolean):::Determines whether or not the tokenizer recognizes C++-style comments:::
StreamTokenizer#lowerCaseMode(boolean):::Determines whether or not word token are automatically lowercased:::
StreamTokenizer#nextToken():::Parses the next token from the input stream of this tokenizer:::this.read->this.read->this.read->this.read->this.read->this.read->this.read->Arrays.copyOf->this.read->String.copyValueOf->sval.toLowerCase->this.read->this.read->this.read->this.read->this.read->this.read->this.read->Arrays.copyOf->String.copyValueOf->this.read->this.read->this.nextToken->this.read->this.nextToken->this.read->this.read->this.read->this.read->this.nextToken->this.read->this.nextToken
StreamTokenizer#pushBack():::Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field.:::
StreamTokenizer#lineno():::Return the current line number.:::
StreamTokenizer#toString():::Returns the string representation of the current stream token and the line number it occurs on:::
StringBufferInputStream#read():::Reads the next byte of data from this input stream:::buffer.charAt
StringBufferInputStream#read(byte[], int, int):::Reads up to len bytes of data from this input stream into an array of bytes:::buffer.getBytes
StringBufferInputStream#skip(long):::Skips n bytes of input from this input stream:::
StringBufferInputStream#available():::Returns the number of bytes that can be read from the input stream without blocking.:::
StringBufferInputStream#reset():::Resets the input stream to begin reading from the first character of this input stream's underlying buffer.:::
StringReader#read():::Reads a single character.:::this.ensureOpen->str.charAt
StringReader#read(char[], int, int):::Reads characters into a portion of an array.:::this.ensureOpen->Math.min->str.getChars
StringReader#skip(long):::Skips the specified number of characters in the stream:::this.ensureOpen->Math.min->Math.max
StringReader#ready():::Tells whether this stream is ready to be read.:::this.ensureOpen
StringReader#markSupported():::Tells whether this stream supports the mark() operation, which it does.:::
StringReader#mark(int):::Marks the present position in the stream:::this.ensureOpen
StringReader#reset():::Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked.:::this.ensureOpen
StringReader#close():::Closes the stream and releases any system resources associated with it:::
StringWriter#write(int):::Write a single character.:::buf.append
StringWriter#write(char[], int, int):::Write a portion of an array of characters.:::buf.append
StringWriter#write(String):::Write a string.:::buf.append
StringWriter#write(String, int, int):::Write a portion of a string.:::buf.append
StringWriter#append(CharSequence):::Appends the specified character sequence to this writer:::String.valueOf->this.write
StringWriter#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this writer:::csq.subSequence->this.append
StringWriter#append(char):::Appends the specified character to this writer:::this.write
StringWriter#toString():::Return the buffer's current value as a string.:::buf.toString
StringWriter#getBuffer():::Return the string buffer itself.:::
StringWriter#flush():::Flush the stream.:::
StringWriter#close():::Closing a StringWriter has no effect:::
UncheckedIOException#getCause():::Returns the cause of this exception.:::super.getCause
WriteAbortedException#getMessage():::Produce the message and include the message from the nested exception, if there is one.:::super.getMessage->detail.toString->super.getMessage
WriteAbortedException#getCause():::Returns the exception that terminated the operation (the cause).:::
Writer#nullWriter():::Returns a new Writer which discards all characters:::this.ensureOpen->this.ensureOpen->this.ensureOpen->csq.length->Objects.checkFromToIndex->this.ensureOpen->Objects.checkFromIndexSize->this.ensureOpen->Objects.requireNonNull->this.ensureOpen->str.length->Objects.checkFromIndexSize->this.ensureOpen->this.ensureOpen
Writer#write(int):::Writes a single character:::this.write
Writer#write(char[]):::Writes an array of characters.:::this.write
Writer#write(char[], int, int):::Writes a portion of an array of characters.:::
Writer#write(String):::Writes a string.:::str.length->this.write
Writer#write(String, int, int):::Writes a portion of a string.:::str.getChars->this.write
Writer#append(CharSequence):::Appends the specified character sequence to this writer:::String.valueOf->this.write
Writer#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this writer:::csq.subSequence->this.append
Writer#append(char):::Appends the specified character to this writer:::this.write
Writer#flush():::Flushes the stream:::
Writer#close():::Closes the stream, flushing it first:::

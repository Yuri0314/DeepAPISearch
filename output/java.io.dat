java.io.Bits#getBoolean(byte[], int)->boolean::: bits get boolean
java.io.Bits#getChar(byte[], int)->char::: bits get char
java.io.Bits#getShort(byte[], int)->short::: bits get short
java.io.Bits#getInt(byte[], int)->int::: bits get int
java.io.Bits#getFloat(byte[], int)->float::: bits get float
java.io.Bits#getLong(byte[], int)->long::: bits get long
java.io.Bits#getDouble(byte[], int)->double::: bits get double
java.io.Bits#putBoolean(byte[], int, boolean)->void::: bits put boolean
java.io.Bits#putChar(byte[], int, char)->void::: bits put char
java.io.Bits#putShort(byte[], int, short)->void::: bits put short
java.io.Bits#putInt(byte[], int, int)->void::: bits put int
java.io.Bits#putFloat(byte[], int, float)->void::: bits put float
java.io.Bits#putLong(byte[], int, long)->void::: bits put long
java.io.Bits#putDouble(byte[], int, double)->void::: bits put double
java.io.BufferedInputStream#read()->int:::See the general contract of the read method of InputStream.
java.io.BufferedInputStream#read(byte[], int, int)->int:::Reads bytes from this byte-input stream into the specified byte array, starting at the given offset
java.io.BufferedInputStream#skip(long)->long:::See the general contract of the skip method of InputStream.
java.io.BufferedInputStream#available()->int:::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
java.io.BufferedInputStream#mark(int)->void:::See the general contract of the mark method of InputStream.
java.io.BufferedInputStream#reset()->void:::See the general contract of the reset method of InputStream
java.io.BufferedInputStream#markSupported()->boolean:::Tests if this input stream supports the mark and reset methods
java.io.BufferedInputStream#close()->void:::Closes this input stream and releases any system resources associated with the stream
java.io.BufferedOutputStream#write(int)->void:::Writes the specified byte to this buffered output stream.
java.io.BufferedOutputStream#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to this buffered output stream
java.io.BufferedOutputStream#flush()->void:::Flushes this buffered output stream
java.io.BufferedReader#read()->int:::Reads a single character.
java.io.BufferedReader#read(char[], int, int)->int:::Reads characters into a portion of an array
java.io.BufferedReader#readLine(boolean)->String:::Reads a line of text
java.io.BufferedReader#readLine()->String:::Reads a line of text
java.io.BufferedReader#skip(long)->long:::Skips characters.
java.io.BufferedReader#ready()->boolean:::Tells whether this stream is ready to be read
java.io.BufferedReader#markSupported()->boolean:::Tells whether this stream supports the mark() operation, which it does.
java.io.BufferedReader#mark(int)->void:::Marks the present position in the stream
java.io.BufferedReader#reset()->void:::Resets the stream to the most recent mark.
java.io.BufferedReader#close()->void::: buffered reader close
java.io.BufferedReader#lines()->Stream:::Returns a Stream, the elements of which are lines read from this BufferedReader
java.io.BufferedWriter#flushBuffer()->void:::Flushes the output buffer to the underlying character stream, without flushing the stream itself
java.io.BufferedWriter#write(int)->void:::Writes a single character.
java.io.BufferedWriter#write(char[], int, int)->void:::Writes a portion of an array of characters
java.io.BufferedWriter#write(String, int, int)->void:::Writes a portion of a String.
java.io.BufferedWriter#newLine()->void:::Writes a line separator
java.io.BufferedWriter#flush()->void:::Flushes the stream.
java.io.BufferedWriter#close()->void::: buffered writer close
java.io.ByteArrayInputStream#read()->int:::Reads the next byte of data from this input stream
java.io.ByteArrayInputStream#read(byte[], int, int)->int:::Reads up to len bytes of data into an array of bytes from this input stream
java.io.ByteArrayInputStream#readAllBytes()->byte[]::: byte array input stream read all bytes
java.io.ByteArrayInputStream#readNBytes(byte[], int, int)->int::: byte array input stream read bytes
java.io.ByteArrayInputStream#transferTo(OutputStream)->long::: byte array input stream transfer to
java.io.ByteArrayInputStream#skip(long)->long:::Skips n bytes of input from this input stream
java.io.ByteArrayInputStream#available()->int:::Returns the number of remaining bytes that can be read (or skipped over) from this input stream
java.io.ByteArrayInputStream#markSupported()->boolean:::Tests if this InputStream supports mark/reset
java.io.ByteArrayInputStream#mark(int)->void:::Set the current marked position in the stream
java.io.ByteArrayInputStream#reset()->void:::Resets the buffer to the marked position
java.io.ByteArrayInputStream#close()->void:::Closing a ByteArrayInputStream has no effect
java.io.ByteArrayOutputStream#write(int)->void:::Writes the specified byte to this ByteArrayOutputStream.
java.io.ByteArrayOutputStream#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to this ByteArrayOutputStream.
java.io.ByteArrayOutputStream#writeBytes(byte[])->void:::Writes the complete contents of the specified byte array to this ByteArrayOutputStream.
java.io.ByteArrayOutputStream#writeTo(OutputStream)->void:::Writes the complete contents of this ByteArrayOutputStream to the specified output stream argument, as if by calling the output stream's write method using out.write(buf, 0, count).
java.io.ByteArrayOutputStream#reset()->void:::Resets the count field of this ByteArrayOutputStream to zero, so that all currently accumulated output in the output stream is discarded
java.io.ByteArrayOutputStream#toByteArray()->byte[]:::Creates a newly allocated byte array
java.io.ByteArrayOutputStream#size()->int:::Returns the current size of the buffer.
java.io.ByteArrayOutputStream#toString()->String:::Converts the buffer's contents into a string decoding bytes using the platform's default character set
java.io.ByteArrayOutputStream#toString(String)->String:::Converts the buffer's contents into a string by decoding the bytes using the named java.nio.charset.Charset charset
java.io.ByteArrayOutputStream#toString(Charset)->String:::Converts the buffer's contents into a string by decoding the bytes using the specified java.nio.charset.Charset charset
java.io.ByteArrayOutputStream#toString(int)->String:::Creates a newly allocated string
java.io.ByteArrayOutputStream#close()->void:::Closing a ByteArrayOutputStream has no effect
java.io.CharArrayReader#read()->int:::Reads a single character.
java.io.CharArrayReader#read(char[], int, int)->int:::Reads characters into a portion of an array.
java.io.CharArrayReader#skip(long)->long:::Skips characters
java.io.CharArrayReader#ready()->boolean:::Tells whether this stream is ready to be read
java.io.CharArrayReader#markSupported()->boolean:::Tells whether this stream supports the mark() operation, which it does.
java.io.CharArrayReader#mark(int)->void:::Marks the present position in the stream
java.io.CharArrayReader#reset()->void:::Resets the stream to the most recent mark, or to the beginning if it has never been marked.
java.io.CharArrayReader#close()->void:::Closes the stream and releases any system resources associated with it
java.io.CharArrayWriter#write(int)->void:::Writes a character to the buffer.
java.io.CharArrayWriter#write(char[], int, int)->void:::Writes characters to the buffer.
java.io.CharArrayWriter#write(String, int, int)->void:::Write a portion of a string to the buffer.
java.io.CharArrayWriter#writeTo(Writer)->void:::Writes the contents of the buffer to another character stream.
java.io.CharArrayWriter#append(CharSequence)->CharArrayWriter:::Appends the specified character sequence to this writer
java.io.CharArrayWriter#append(CharSequence, int, int)->CharArrayWriter:::Appends a subsequence of the specified character sequence to this writer
java.io.CharArrayWriter#append(char)->CharArrayWriter:::Appends the specified character to this writer
java.io.CharArrayWriter#reset()->void:::Resets the buffer so that you can use it again without throwing away the already allocated buffer.
java.io.CharArrayWriter#toCharArray()->char[]:::Returns a copy of the input data.
java.io.CharArrayWriter#size()->int:::Returns the current size of the buffer.
java.io.CharArrayWriter#toString()->String:::Converts input data to a string.
java.io.CharArrayWriter#flush()->void:::Flush the stream.
java.io.CharArrayWriter#close()->void:::Close the stream
java.io.Closeable#close()->void:::Closes this stream and releases any system resources associated with it
java.io.Console#writer()->PrintWriter:::Retrieves the unique java.io.PrintWriter PrintWriter object associated with this console.
java.io.Console#reader()->Reader:::Retrieves the unique java.io.Reader Reader object associated with this console
java.io.Console#format(String, Object...)->Console:::Writes a formatted string to this console's output stream using the specified format string and arguments.
java.io.Console#printf(String, Object...)->Console:::A convenience method to write a formatted string to this console's output stream using the specified format string and arguments
java.io.Console#readLine(String, Object...)->String:::Provides a formatted prompt, then reads a single line of text from the console.
java.io.Console#readLine()->String:::Reads a single line of text from the console.
java.io.Console#readPassword(String, Object...)->char[]:::Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled.
java.io.Console#readPassword()->char[]:::Reads a password or passphrase from the console with echoing disabled
java.io.Console#flush()->void:::Flushes the console and forces any buffered output to be written immediately .
java.io.Console.LineReader#close()->void::: line reader close
java.io.Console.LineReader#ready()->boolean::: line reader ready
java.io.Console.LineReader#read(char[], int, int)->int::: line reader read
java.io.DataInput#readFully(byte[])->void:::Reads some bytes from an input stream and stores them into the buffer array b
java.io.DataInput#readFully(byte[], int, int)->void:::Reads len bytes from an input stream
java.io.DataInput#skipBytes(int)->int:::Makes an attempt to skip over n bytes of data from the input stream, discarding the skipped bytes
java.io.DataInput#readBoolean()->boolean:::Reads one input byte and returns true if that byte is nonzero, false if that byte is zero
java.io.DataInput#readByte()->byte:::Reads and returns one input byte
java.io.DataInput#readUnsignedByte()->int:::Reads one input byte, zero-extends it to type int, and returns the result, which is therefore in the range 0 through 255
java.io.DataInput#readShort()->short:::Reads two input bytes and returns a short value
java.io.DataInput#readUnsignedShort()->int:::Reads two input bytes and returns an int value in the range 0 through 65535
java.io.DataInput#readChar()->char:::Reads two input bytes and returns a char value
java.io.DataInput#readInt()->int:::Reads four input bytes and returns an int value
java.io.DataInput#readLong()->long:::Reads eight input bytes and returns a long value
java.io.DataInput#readFloat()->float:::Reads four input bytes and returns a float value
java.io.DataInput#readDouble()->double:::Reads eight input bytes and returns a double value
java.io.DataInput#readLine()->String:::Reads the next line of text from the input stream
java.io.DataInput#readUTF()->String:::Reads in a string that has been encoded using a modified UTF-8 format
java.io.DataInputStream#read(byte[])->int:::Reads some number of bytes from the contained input stream and stores them into the buffer array b
java.io.DataInputStream#read(byte[], int, int)->int:::Reads up to len bytes of data from the contained input stream into an array of bytes
java.io.DataInputStream#readFully(byte[])->void:::See the general contract of the readFully method of DataInput
java.io.DataInputStream#readFully(byte[], int, int)->void:::See the general contract of the readFully method of DataInput
java.io.DataInputStream#skipBytes(int)->int:::See the general contract of the skipBytes method of DataInput
java.io.DataInputStream#readBoolean()->boolean:::See the general contract of the readBoolean method of DataInput
java.io.DataInputStream#readByte()->byte:::See the general contract of the readByte method of DataInput
java.io.DataInputStream#readUnsignedByte()->int:::See the general contract of the readUnsignedByte method of DataInput
java.io.DataInputStream#readShort()->short:::See the general contract of the readShort method of DataInput
java.io.DataInputStream#readUnsignedShort()->int:::See the general contract of the readUnsignedShort method of DataInput
java.io.DataInputStream#readChar()->char:::See the general contract of the readChar method of DataInput
java.io.DataInputStream#readInt()->int:::See the general contract of the readInt method of DataInput
java.io.DataInputStream#readLong()->long:::See the general contract of the readLong method of DataInput
java.io.DataInputStream#readFloat()->float:::See the general contract of the readFloat method of DataInput
java.io.DataInputStream#readDouble()->double:::See the general contract of the readDouble method of DataInput
java.io.DataInputStream#readLine()->String:::See the general contract of the readLine method of DataInput
java.io.DataInputStream#readUTF()->String:::See the general contract of the readUTF method of DataInput
java.io.DataInputStream#readUTF(DataInput)->String:::Reads from the stream in a representation of a Unicode  character string encoded in modified UTF-8 format; this string of characters is then returned as a String
java.io.DataOutput#write(int)->void:::Writes to the output stream the eight low-order bits of the argument b
java.io.DataOutput#write(byte[])->void:::Writes to the output stream all the bytes in array b
java.io.DataOutput#write(byte[], int, int)->void:::Writes len bytes from array b, in order,  to the output stream
java.io.DataOutput#writeBoolean(boolean)->void:::Writes a boolean value to this output stream
java.io.DataOutput#writeByte(int)->void:::Writes to the output stream the eight low- order bits of the argument v
java.io.DataOutput#writeShort(int)->void:::Writes two bytes to the output stream to represent the value of the argument
java.io.DataOutput#writeChar(int)->void:::Writes a char value, which is comprised of two bytes, to the output stream
java.io.DataOutput#writeInt(int)->void:::Writes an int value, which is comprised of four bytes, to the output stream
java.io.DataOutput#writeLong(long)->void:::Writes a long value, which is comprised of eight bytes, to the output stream
java.io.DataOutput#writeFloat(float)->void:::Writes a float value, which is comprised of four bytes, to the output stream
java.io.DataOutput#writeDouble(double)->void:::Writes a double value, which is comprised of eight bytes, to the output stream
java.io.DataOutput#writeBytes(String)->void:::Writes a string to the output stream
java.io.DataOutput#writeChars(String)->void:::Writes every character in the string s, to the output stream, in order, two bytes per character
java.io.DataOutput#writeUTF(String)->void:::Writes two bytes of length information to the output stream, followed by the modified UTF-8 representation of  every character in the string s
java.io.DataOutputStream#write(int)->void:::Writes the specified byte (the low eight bits of the argument b) to the underlying output stream
java.io.DataOutputStream#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to the underlying output stream
java.io.DataOutputStream#flush()->void:::Flushes this data output stream
java.io.DataOutputStream#writeBoolean(boolean)->void:::Writes a boolean to the underlying output stream as a 1-byte value
java.io.DataOutputStream#writeByte(int)->void:::Writes out a byte to the underlying output stream as a 1-byte value
java.io.DataOutputStream#writeShort(int)->void:::Writes a short to the underlying output stream as two bytes, high byte first
java.io.DataOutputStream#writeChar(int)->void:::Writes a char to the underlying output stream as a 2-byte value, high byte first
java.io.DataOutputStream#writeInt(int)->void:::Writes an int to the underlying output stream as four bytes, high byte first
java.io.DataOutputStream#writeLong(long)->void:::Writes a long to the underlying output stream as eight bytes, high byte first
java.io.DataOutputStream#writeFloat(float)->void:::Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the underlying output stream as a 4-byte quantity, high byte first
java.io.DataOutputStream#writeDouble(double)->void:::Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the underlying output stream as an 8-byte quantity, high byte first
java.io.DataOutputStream#writeBytes(String)->void:::Writes out the string to the underlying output stream as a sequence of bytes
java.io.DataOutputStream#writeChars(String)->void:::Writes a string to the underlying output stream as a sequence of characters
java.io.DataOutputStream#writeUTF(String)->void:::Writes a string to the underlying output stream using modified UTF-8 encoding in a machine-independent manner
java.io.DataOutputStream#writeUTF(String, DataOutput)->int:::Writes a string to the specified DataOutput using modified UTF-8 encoding in a machine-independent manner
java.io.DataOutputStream#size()->int:::Returns the current value of the counter written, the number of bytes written to this data output stream so far
java.io.DefaultFileSystem#getFileSystem()->FileSystem:::Return the FileSystem object for Windows platform.
java.io.DeleteOnExitHook#add(String)->void::: delete on exit hook add
java.io.DeleteOnExitHook#runHooks()->void::: delete on exit hook run hooks
java.io.ExpiringCache.Entry#timestamp()->long::: entry timestamp
java.io.ExpiringCache.Entry#setTimestamp(long)->void::: entry set timestamp
java.io.ExpiringCache.Entry#val()->String::: entry val
java.io.ExpiringCache.Entry#setVal(String)->void::: entry set val
java.io.ExpiringCache#get(String)->String::: expiring cache get
java.io.ExpiringCache#put(String, String)->void::: expiring cache put
java.io.ExpiringCache#clear()->void::: expiring cache clear
java.io.Externalizable#writeExternal(ObjectOutput)->void:::The object implements the writeExternal method to save its contents by calling the methods of DataOutput for its primitive values or calling the writeObject method of ObjectOutput for objects, strings, and arrays.
java.io.Externalizable#readExternal(ObjectInput)->void:::The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects, strings and arrays
java.io.File#isInvalid()->boolean:::Check if the file has an invalid path
java.io.File#getPrefixLength()->int:::Returns the length of this abstract pathname's prefix
java.io.File#getName()->String:::Returns the name of the file or directory denoted by this abstract pathname
java.io.File#getParent()->String:::Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory
java.io.File#getParentFile()->File:::Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory
java.io.File#getPath()->String:::Converts this abstract pathname into a pathname string
java.io.File#isAbsolute()->boolean:::Tests whether this abstract pathname is absolute
java.io.File#getAbsolutePath()->String:::Returns the absolute pathname string of this abstract pathname
java.io.File#getAbsoluteFile()->File:::Returns the absolute form of this abstract pathname
java.io.File#getCanonicalPath()->String:::Returns the canonical pathname string of this abstract pathname
java.io.File#getCanonicalFile()->File:::Returns the canonical form of this abstract pathname
java.io.File#toURL()->URL:::Converts this abstract pathname into a file: URL
java.io.File#toURI()->URI:::Constructs a file: URI that represents this abstract pathname
java.io.File#canRead()->boolean:::Tests whether the application can read the file denoted by this abstract pathname
java.io.File#canWrite()->boolean:::Tests whether the application can modify the file denoted by this abstract pathname
java.io.File#exists()->boolean:::Tests whether the file or directory denoted by this abstract pathname exists.
java.io.File#isDirectory()->boolean:::Tests whether the file denoted by this abstract pathname is a directory
java.io.File#isFile()->boolean:::Tests whether the file denoted by this abstract pathname is a normal file
java.io.File#isHidden()->boolean:::Tests whether the file named by this abstract pathname is a hidden file
java.io.File#lastModified()->long:::Returns the time that the file denoted by this abstract pathname was last modified.
java.io.File#length()->long:::Returns the length of the file denoted by this abstract pathname
java.io.File#createNewFile()->boolean:::Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist
java.io.File#delete()->boolean:::Deletes the file or directory denoted by this abstract pathname
java.io.File#deleteOnExit()->void:::Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates
java.io.File#list()->String[]:::Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname
java.io.File#list(FilenameFilter)->String[]:::Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
java.io.File#listFiles()->File[]:::Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname
java.io.File#listFiles(FilenameFilter)->File[]:::Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
java.io.File#listFiles(FileFilter)->File[]:::Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
java.io.File#mkdir()->boolean:::Creates the directory named by this abstract pathname.
java.io.File#mkdirs()->boolean:::Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories
java.io.File#renameTo(File)->boolean:::Renames the file denoted by this abstract pathname
java.io.File#setLastModified(long)->boolean:::Sets the last-modified time of the file or directory named by this abstract pathname
java.io.File#setReadOnly()->boolean:::Marks the file or directory named by this abstract pathname so that only read operations are allowed
java.io.File#setWritable(boolean, boolean)->boolean:::Sets the owner's or everybody's write permission for this abstract pathname
java.io.File#setWritable(boolean)->boolean:::A convenience method to set the owner's write permission for this abstract pathname
java.io.File#setReadable(boolean, boolean)->boolean:::Sets the owner's or everybody's read permission for this abstract pathname
java.io.File#setReadable(boolean)->boolean:::A convenience method to set the owner's read permission for this abstract pathname
java.io.File#setExecutable(boolean, boolean)->boolean:::Sets the owner's or everybody's execute permission for this abstract pathname
java.io.File#setExecutable(boolean)->boolean:::A convenience method to set the owner's execute permission for this abstract pathname
java.io.File#canExecute()->boolean:::Tests whether the application can execute the file denoted by this abstract pathname
java.io.File#listRoots()->File[]:::List the available filesystem roots
java.io.File#getTotalSpace()->long:::Returns the size of the partition named by this abstract pathname.
java.io.File#getFreeSpace()->long:::Returns the number of unallocated bytes in the partition named by this abstract path name
java.io.File#getUsableSpace()->long:::Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname
java.io.File#createTempFile(String, String, File)->File::: Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name
java.io.File#createTempFile(String, String)->File:::Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name
java.io.File#compareTo(File)->int:::Compares two abstract pathnames lexicographically
java.io.File#equals(Object)->boolean:::Tests this abstract pathname for equality with the given object
java.io.File#hashCode()->int:::Computes a hash code for this abstract pathname
java.io.File#toString()->String:::Returns the pathname string of this abstract pathname
java.io.File#toPath()->Path:::Returns a Path java.nio.file.Path object constructed from this abstract path
java.io.FileCleanable#register(FileDescriptor)->void:::Register a Cleanable with the FileDescriptor if the FileDescriptor is non-null and valid.
java.io.FileCleanable#unregister(FileDescriptor)->void:::Unregister a Cleanable from the FileDescriptor.
java.io.FileCleanable#performCleanup()->void:::Close the native handle or fd.
java.io.FileDescriptor#valid()->boolean:::Tests if this file descriptor object is valid.
java.io.FileDescriptor#sync()->void:::Force all system buffers to synchronize with the underlying device
java.io.FileDescriptor#set(int)->void:::Set the fd
java.io.FileDescriptor#setHandle(long)->void:::Set the handle
java.io.FileDescriptor#registerCleanup(PhantomCleanable)->void:::Register a cleanup for the current handle
java.io.FileDescriptor#unregisterCleanup()->void:::Unregister a cleanup for the current raw fd or handle
java.io.FileDescriptor#close()->void:::Close the raw file descriptor or handle, if it has not already been closed
java.io.FileDescriptor#attach(Closeable)->void:::Attach a Closeable to this FD for tracking
java.io.FileDescriptor#closeAll(Closeable)->void:::Cycle through all Closeables sharing this FD and call close() on each one
java.io.FileFilter#accept(File)->boolean:::Tests whether or not the specified abstract pathname should be included in a pathname list.
java.io.FileInputStream#read()->int:::Reads a byte of data from this input stream
java.io.FileInputStream#read(byte[])->int:::Reads up to b.length bytes of data from this input stream into an array of bytes
java.io.FileInputStream#read(byte[], int, int)->int:::Reads up to len bytes of data from this input stream into an array of bytes
java.io.FileInputStream#skip(long)->long:::Skips over and discards n bytes of data from the input stream
java.io.FileInputStream#available()->int:::Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
java.io.FileInputStream#close()->void:::Closes this file input stream and releases any system resources associated with the stream
java.io.FileInputStream#getFD()->FileDescriptor:::Returns the FileDescriptor object  that represents the connection to the actual file in the file system being used by this FileInputStream.
java.io.FileInputStream#getChannel()->FileChannel:::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file input stream
java.io.FileInputStream#finalize()->void:::Ensures that the #close method of this file input stream is called when there are no more references to it
java.io.FileInputStream.AltFinalizer#finalize()->void::: alt finalizer finalize
java.io.FilenameFilter#accept(File, String)->boolean:::Tests if a specified file should be included in a file list.
java.io.FileOutputStream#write(int)->void:::Writes the specified byte to this file output stream
java.io.FileOutputStream#write(byte[])->void:::Writes b.length bytes from the specified byte array to this file output stream.
java.io.FileOutputStream#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to this file output stream.
java.io.FileOutputStream#close()->void:::Closes this file output stream and releases any system resources associated with this stream
java.io.FileOutputStream#getFD()->FileDescriptor:::Returns the file descriptor associated with this stream.
java.io.FileOutputStream#getChannel()->FileChannel:::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file output stream
java.io.FileOutputStream#finalize()->void:::Cleans up the connection to the file, and ensures that the #close method of this file output stream is called when there are no more references to this stream
java.io.FileOutputStream.AltFinalizer#finalize()->void::: alt finalizer finalize
java.io.FilePermission#implies(Permission)->boolean:::Checks if this FilePermission object "implies" the specified permission
java.io.FilePermission#impliesIgnoreMask(FilePermission)->boolean:::Checks if the Permission's actions are a proper subset of the this object's actions
java.io.FilePermission#equals(Object)->boolean:::Checks two FilePermission objects for equality
java.io.FilePermission#hashCode()->int:::Returns the hash code value for this object.
java.io.FilePermission#getMask()->int:::Return the current action mask
java.io.FilePermission#getActions()->String:::Returns the "canonical string representation" of the actions
java.io.FilePermission#newPermissionCollection()->PermissionCollection:::Returns a new PermissionCollection object for storing FilePermission objects
java.io.FilePermission#withNewActions(int)->FilePermission:::Create a cloned FilePermission with a different actions.
java.io.FilePermissionCollection#add(Permission)->void:::Adds a permission to the FilePermissionCollection
java.io.FilePermissionCollection#implies(Permission)->boolean:::Check and see if this set of permissions implies the permissions expressed in "permission".
java.io.FilePermissionCollection#elements()->Enumeration:::Returns an enumeration of all the FilePermission objects in the container.
java.io.FileSystem#getSeparator()->char:::Return the local filesystem's name-separator character.
java.io.FileSystem#getPathSeparator()->char:::Return the local filesystem's path-separator character.
java.io.FileSystem#normalize(String)->String:::Convert the given pathname string to normal form
java.io.FileSystem#prefixLength(String)->int:::Compute the length of this pathname string's prefix
java.io.FileSystem#resolve(String, String)->String:::Resolve the child pathname string against the parent
java.io.FileSystem#getDefaultParent()->String:::Return the parent pathname string to be used when the parent-directory argument in one of the two-argument File constructors is the empty pathname.
java.io.FileSystem#fromURIPath(String)->String:::Post-process the given URI path string if necessary
java.io.FileSystem#isAbsolute(File)->boolean:::Tell whether or not the given abstract pathname is absolute.
java.io.FileSystem#resolve(File)->String:::Resolve the given abstract pathname into absolute form
java.io.FileSystem#canonicalize(String)->String::: file system canonicalize
java.io.FileSystem#getBooleanAttributes(File)->int:::Return the simple boolean attributes for the file or directory denoted by the given abstract pathname, or zero if it does not exist or some other I/O error occurs.
java.io.FileSystem#checkAccess(File, int)->boolean:::Check whether the file or directory denoted by the given abstract pathname may be accessed by this process
java.io.FileSystem#setPermission(File, int, boolean, boolean)->boolean:::Set on or off the access permission (to owner only or to all) to the file or directory denoted by the given abstract pathname, based on the parameters enable, access and oweronly.
java.io.FileSystem#getLastModifiedTime(File)->long:::Return the time at which the file or directory denoted by the given abstract pathname was last modified, or zero if it does not exist or some other I/O error occurs.
java.io.FileSystem#getLength(File)->long:::Return the length in bytes of the file denoted by the given abstract pathname, or zero if it does not exist, is a directory, or some other I/O error occurs.
java.io.FileSystem#createFileExclusively(String)->boolean:::Create a new empty file with the given pathname
java.io.FileSystem#delete(File)->boolean:::Delete the file or directory denoted by the given abstract pathname, returning true if and only if the operation succeeds.
java.io.FileSystem#list(File)->String[]:::List the elements of the directory denoted by the given abstract pathname
java.io.FileSystem#createDirectory(File)->boolean:::Create a new directory denoted by the given abstract pathname, returning true if and only if the operation succeeds.
java.io.FileSystem#rename(File, File)->boolean:::Rename the file or directory denoted by the first abstract pathname to the second abstract pathname, returning true if and only if the operation succeeds.
java.io.FileSystem#setLastModifiedTime(File, long)->boolean:::Set the last-modified time of the file or directory denoted by the given abstract pathname, returning true if and only if the operation succeeds.
java.io.FileSystem#setReadOnly(File)->boolean:::Mark the file or directory denoted by the given abstract pathname as read-only, returning true if and only if the operation succeeds.
java.io.FileSystem#listRoots()->File[]:::List the available filesystem roots.
java.io.FileSystem#getSpace(File, int)->long::: file system get space
java.io.FileSystem#getNameMax(String)->int:::Retrieve the maximum length of a component of a file path.
java.io.FileSystem#compare(File, File)->int:::Compare two abstract pathnames lexicographically.
java.io.FileSystem#hashCode(File)->int:::Compute the hash code of an abstract pathname.
java.io.FilterInputStream#read()->int:::Reads the next byte of data from this input stream
java.io.FilterInputStream#read(byte[])->int:::Reads up to b.length bytes of data from this input stream into an array of bytes
java.io.FilterInputStream#read(byte[], int, int)->int:::Reads up to len bytes of data from this input stream into an array of bytes
java.io.FilterInputStream#skip(long)->long:::Skips over and discards n bytes of data from the input stream
java.io.FilterInputStream#available()->int:::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream
java.io.FilterInputStream#close()->void:::Closes this input stream and releases any system resources associated with the stream
java.io.FilterInputStream#mark(int)->void:::Marks the current position in this input stream
java.io.FilterInputStream#reset()->void:::Repositions this stream to the position at the time the mark method was last called on this input stream
java.io.FilterInputStream#markSupported()->boolean:::Tests if this input stream supports the mark and reset methods
java.io.FilterOutputStream#write(int)->void:::Writes the specified byte to this output stream
java.io.FilterOutputStream#write(byte[])->void:::Writes b.length bytes to this output stream
java.io.FilterOutputStream#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to this output stream
java.io.FilterOutputStream#flush()->void:::Flushes this output stream and forces any buffered output bytes to be written out to the stream
java.io.FilterOutputStream#close()->void:::Closes this output stream and releases any system resources associated with the stream
java.io.FilterReader#read()->int:::Reads a single character.
java.io.FilterReader#read(char[], int, int)->int:::Reads characters into a portion of an array.
java.io.FilterReader#skip(long)->long:::Skips characters.
java.io.FilterReader#ready()->boolean:::Tells whether this stream is ready to be read.
java.io.FilterReader#markSupported()->boolean:::Tells whether this stream supports the mark() operation.
java.io.FilterReader#mark(int)->void:::Marks the present position in the stream.
java.io.FilterReader#reset()->void:::Resets the stream.
java.io.FilterReader#close()->void::: filter reader close
java.io.FilterWriter#write(int)->void:::Writes a single character.
java.io.FilterWriter#write(char[], int, int)->void:::Writes a portion of an array of characters.
java.io.FilterWriter#write(String, int, int)->void:::Writes a portion of a string.
java.io.FilterWriter#flush()->void:::Flushes the stream.
java.io.FilterWriter#close()->void::: filter writer close
java.io.Flushable#flush()->void:::Flushes this stream by writing any buffered output to the underlying stream.
java.io.InputStream#nullInputStream()->InputStream:::Returns a new InputStream that reads no bytes
java.io.InputStream#read()->int:::Reads the next byte of data from the input stream
java.io.InputStream#read(byte[])->int:::Reads some number of bytes from the input stream and stores them into the buffer array b
java.io.InputStream#read(byte[], int, int)->int:::Reads up to len bytes of data from the input stream into an array of bytes
java.io.InputStream#readAllBytes()->byte[]:::Reads all remaining bytes from the input stream
java.io.InputStream#readNBytes(int)->byte[]:::Reads up to a specified number of bytes from the input stream
java.io.InputStream#readNBytes(byte[], int, int)->int:::Reads the requested number of bytes from the input stream into the given byte array
java.io.InputStream#skip(long)->long:::Skips over and discards n bytes of data from this input stream
java.io.InputStream#available()->int:::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking, which may be 0, or 0 when end of stream is detected
java.io.InputStream#close()->void:::Closes this input stream and releases any system resources associated with the stream
java.io.InputStream#mark(int)->void:::Marks the current position in this input stream
java.io.InputStream#reset()->void:::Repositions this stream to the position at the time the mark method was last called on this input stream
java.io.InputStream#markSupported()->boolean:::Tests if this input stream supports the mark and reset methods
java.io.InputStream#transferTo(OutputStream)->long:::Reads all bytes from this input stream and writes the bytes to the given output stream in the order that they are read
java.io.InputStreamReader#getEncoding()->String:::Returns the name of the character encoding being used by this stream
java.io.InputStreamReader#read()->int:::Reads a single character.
java.io.InputStreamReader#read(char[], int, int)->int:::Reads characters into a portion of an array.
java.io.InputStreamReader#ready()->boolean:::Tells whether this stream is ready to be read
java.io.InputStreamReader#close()->void::: input stream reader close
java.io.InvalidClassException#getMessage()->String:::Produce the message and include the classname, if present.
java.io.LineNumberInputStream#read()->int:::Reads the next byte of data from this input stream
java.io.LineNumberInputStream#read(byte[], int, int)->int:::Reads up to len bytes of data from this input stream into an array of bytes
java.io.LineNumberInputStream#skip(long)->long:::Skips over and discards n bytes of data from this input stream
java.io.LineNumberInputStream#setLineNumber(int)->void:::Sets the line number to the specified argument.
java.io.LineNumberInputStream#getLineNumber()->int:::Returns the current line number.
java.io.LineNumberInputStream#available()->int:::Returns the number of bytes that can be read from this input stream without blocking
java.io.LineNumberInputStream#mark(int)->void:::Marks the current position in this input stream
java.io.LineNumberInputStream#reset()->void:::Repositions this stream to the position at the time the mark method was last called on this input stream
java.io.LineNumberReader#setLineNumber(int)->void:::Set the current line number.
java.io.LineNumberReader#getLineNumber()->int:::Get the current line number.
java.io.LineNumberReader#read()->int:::Read a single character
java.io.LineNumberReader#read(char[], int, int)->int:::Read characters into a portion of an array
java.io.LineNumberReader#readLine()->String:::Read a line of text
java.io.LineNumberReader#skip(long)->long:::Skip characters.
java.io.LineNumberReader#mark(int)->void:::Mark the present position in the stream
java.io.LineNumberReader#reset()->void:::Reset the stream to the most recent mark.
java.io.ObjectInput#readObject()->Object:::Read and return an object
java.io.ObjectInput#read()->int:::Reads a byte of data
java.io.ObjectInput#read(byte[])->int:::Reads into an array of bytes
java.io.ObjectInput#read(byte[], int, int)->int:::Reads into an array of bytes
java.io.ObjectInput#skip(long)->long:::Skips n bytes of input.
java.io.ObjectInput#available()->int:::Returns the number of bytes that can be read without blocking.
java.io.ObjectInput#close()->void:::Closes the input stream
java.io.ObjectInputFilter#checkInput(FilterInfo)->Status:::Check the class, array length, number of object references, depth, stream size, and other available filtering information
java.io.ObjectInputFilter.FilterInfo#serialClass()->Class:::The class of an object being deserialized
java.io.ObjectInputFilter.FilterInfo#arrayLength()->long:::The number of array elements when deserializing an array of the class.
java.io.ObjectInputFilter.FilterInfo#depth()->long:::The current depth
java.io.ObjectInputFilter.FilterInfo#references()->long:::The current number of object references.
java.io.ObjectInputFilter.FilterInfo#streamBytes()->long:::The current number of bytes consumed.
java.io.ObjectInputFilter.Config#filterLog(System.Logger.Level, String, Object...)->void:::Logger for debugging.
java.io.ObjectInputFilter.Config#getSerialFilter()->ObjectInputFilter:::Returns the process-wide serialization filter or null if not configured.
java.io.ObjectInputFilter.Config#setSerialFilter(ObjectInputFilter)->void:::Set the process-wide filter if it has not already been configured or set.
java.io.ObjectInputFilter.Config#createFilter(String)->ObjectInputFilter:::Returns an ObjectInputFilter from a string of patterns
java.io.ObjectInputFilter.Config#createFilter2(String)->ObjectInputFilter:::Returns an ObjectInputFilter from a string of patterns that checks only the length for arrays, not the component type.
java.io.ObjectInputFilter.Config.Global#createFilter(String, boolean)->ObjectInputFilter:::Returns an ObjectInputFilter from a string of patterns.
java.io.ObjectInputFilter.Config.Global#checkInput(FilterInfo)->Status::: global check input
java.io.ObjectInputFilter.Config.Global#toString()->String:::Returns the pattern used to create this filter.
java.io.ObjectInputStream#readObject()->Object:::Read an object from the ObjectInputStream
java.io.ObjectInputStream#readObjectOverride()->Object:::This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected no-arg constructor
java.io.ObjectInputStream#readUnshared()->Object:::Reads an "unshared" object from the ObjectInputStream
java.io.ObjectInputStream#defaultReadObject()->void:::Read the non-static and non-transient fields of the current class from this stream
java.io.ObjectInputStream#readFields()->ObjectInputStream.GetField:::Reads the persistent fields from the stream and makes them available by name.
java.io.ObjectInputStream#registerValidation(ObjectInputValidation, int)->void:::Register an object to be validated before the graph is returned
java.io.ObjectInputStream#resolveClass(ObjectStreamClass)->Class:::Load the local class equivalent of the specified stream class description
java.io.ObjectInputStream#resolveProxyClass(String[])->Class:::Returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class
java.io.ObjectInputStream#resolveObject(Object)->Object:::This method will allow trusted subclasses of ObjectInputStream to substitute one object for another during deserialization
java.io.ObjectInputStream#enableResolveObject(boolean)->boolean:::Enables the stream to do replacement of objects read from the stream
java.io.ObjectInputStream#readStreamHeader()->void:::The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers
java.io.ObjectInputStream#readClassDescriptor()->ObjectStreamClass:::Read a class descriptor from the serialization stream
java.io.ObjectInputStream#read()->int:::Reads a byte of data
java.io.ObjectInputStream#read(byte[], int, int)->int:::Reads into an array of bytes
java.io.ObjectInputStream#available()->int:::Returns the number of bytes that can be read without blocking.
java.io.ObjectInputStream#close()->void:::Closes the input stream
java.io.ObjectInputStream#readBoolean()->boolean:::Reads in a boolean.
java.io.ObjectInputStream#readByte()->byte:::Reads an 8 bit byte.
java.io.ObjectInputStream#readUnsignedByte()->int:::Reads an unsigned 8 bit byte.
java.io.ObjectInputStream#readChar()->char:::Reads a 16 bit char.
java.io.ObjectInputStream#readShort()->short:::Reads a 16 bit short.
java.io.ObjectInputStream#readUnsignedShort()->int:::Reads an unsigned 16 bit short.
java.io.ObjectInputStream#readInt()->int:::Reads a 32 bit int.
java.io.ObjectInputStream#readLong()->long:::Reads a 64 bit long.
java.io.ObjectInputStream#readFloat()->float:::Reads a 32 bit float.
java.io.ObjectInputStream#readDouble()->double:::Reads a 64 bit double.
java.io.ObjectInputStream#readFully(byte[])->void:::Reads bytes, blocking until all bytes are read.
java.io.ObjectInputStream#readFully(byte[], int, int)->void:::Reads bytes, blocking until all bytes are read.
java.io.ObjectInputStream#skipBytes(int)->int:::Skips bytes.
java.io.ObjectInputStream#readLine()->String:::Reads in a line that has been terminated by a \n, \r, \r\n or EOF.
java.io.ObjectInputStream#readUTF()->String:::Reads a String in modified UTF-8 format.
java.io.ObjectInputStream#getObjectInputFilter()->ObjectInputFilter:::Returns the serialization filter for this stream
java.io.ObjectInputStream#setObjectInputFilter(ObjectInputFilter)->void:::Set the serialization filter for the stream
java.io.ObjectInputStream.GetField#getObjectStreamClass()->ObjectStreamClass:::Get the ObjectStreamClass that describes the fields in the stream.
java.io.ObjectInputStream.GetField#defaulted(String)->boolean:::Return true if the named field is defaulted and has no value in this stream.
java.io.ObjectInputStream.GetField#get(String, boolean)->boolean:::Get the value of the named boolean field from the persistent field.
java.io.ObjectInputStream.GetField#get(String, byte)->byte:::Get the value of the named byte field from the persistent field.
java.io.ObjectInputStream.GetField#get(String, char)->char:::Get the value of the named char field from the persistent field.
java.io.ObjectInputStream.GetField#get(String, short)->short:::Get the value of the named short field from the persistent field.
java.io.ObjectInputStream.GetField#get(String, int)->int:::Get the value of the named int field from the persistent field.
java.io.ObjectInputStream.GetField#get(String, long)->long:::Get the value of the named long field from the persistent field.
java.io.ObjectInputStream.GetField#get(String, float)->float:::Get the value of the named float field from the persistent field.
java.io.ObjectInputStream.GetField#get(String, double)->double:::Get the value of the named double field from the persistent field.
java.io.ObjectInputStream.GetField#get(String, Object)->Object:::Get the value of the named Object field from the persistent field.
java.io.ObjectInputStream#readTypeString()->String:::Reads string without allowing it to be replaced in stream
java.io.ObjectInputStream.FilterValues#serialClass()->Class::: filter values serial class
java.io.ObjectInputStream.FilterValues#arrayLength()->long::: filter values array length
java.io.ObjectInputStream.FilterValues#references()->long::: filter values references
java.io.ObjectInputStream.FilterValues#depth()->long::: filter values depth
java.io.ObjectInputStream.FilterValues#streamBytes()->long::: filter values stream bytes
java.io.ObjectInputValidation#validateObject()->void:::Validates the object.
java.io.ObjectOutput#writeObject(Object)->void:::Write an object to the underlying storage or stream
java.io.ObjectOutput#write(int)->void:::Writes a byte
java.io.ObjectOutput#write(byte[])->void:::Writes an array of bytes
java.io.ObjectOutput#write(byte[], int, int)->void:::Writes a sub array of bytes.
java.io.ObjectOutput#flush()->void:::Flushes the stream
java.io.ObjectOutput#close()->void:::Closes the stream
java.io.ObjectOutputStream#useProtocolVersion(int)->void:::Specify stream protocol version to use when writing the stream
java.io.ObjectOutputStream#writeObject(Object)->void:::Write the specified object to the ObjectOutputStream
java.io.ObjectOutputStream#writeObjectOverride(Object)->void:::Method used by subclasses to override the default writeObject method
java.io.ObjectOutputStream#writeUnshared(Object)->void:::Writes an "unshared" object to the ObjectOutputStream
java.io.ObjectOutputStream#defaultWriteObject()->void:::Write the non-static and non-transient fields of the current class to this stream
java.io.ObjectOutputStream#putFields()->ObjectOutputStream.PutField:::Retrieve the object used to buffer persistent fields to be written to the stream
java.io.ObjectOutputStream#writeFields()->void:::Write the buffered fields to the stream.
java.io.ObjectOutputStream#reset()->void:::Reset will disregard the state of any objects already written to the stream
java.io.ObjectOutputStream#annotateClass(Class)->void:::Subclasses may implement this method to allow class data to be stored in the stream
java.io.ObjectOutputStream#annotateProxyClass(Class)->void:::Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes
java.io.ObjectOutputStream#replaceObject(Object)->Object:::This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization
java.io.ObjectOutputStream#enableReplaceObject(boolean)->boolean:::Enables the stream to do replacement of objects written to the stream
java.io.ObjectOutputStream#writeStreamHeader()->void:::The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream
java.io.ObjectOutputStream#writeClassDescriptor(ObjectStreamClass)->void:::Write the specified class descriptor to the ObjectOutputStream
java.io.ObjectOutputStream#write(int)->void:::Writes a byte
java.io.ObjectOutputStream#write(byte[])->void:::Writes an array of bytes
java.io.ObjectOutputStream#write(byte[], int, int)->void:::Writes a sub array of bytes.
java.io.ObjectOutputStream#flush()->void:::Flushes the stream
java.io.ObjectOutputStream#drain()->void:::Drain any buffered data in ObjectOutputStream
java.io.ObjectOutputStream#close()->void:::Closes the stream
java.io.ObjectOutputStream#writeBoolean(boolean)->void:::Writes a boolean.
java.io.ObjectOutputStream#writeByte(int)->void:::Writes an 8 bit byte.
java.io.ObjectOutputStream#writeShort(int)->void:::Writes a 16 bit short.
java.io.ObjectOutputStream#writeChar(int)->void:::Writes a 16 bit char.
java.io.ObjectOutputStream#writeInt(int)->void:::Writes a 32 bit int.
java.io.ObjectOutputStream#writeLong(long)->void:::Writes a 64 bit long.
java.io.ObjectOutputStream#writeFloat(float)->void:::Writes a 32 bit float.
java.io.ObjectOutputStream#writeDouble(double)->void:::Writes a 64 bit double.
java.io.ObjectOutputStream#writeBytes(String)->void:::Writes a String as a sequence of bytes.
java.io.ObjectOutputStream#writeChars(String)->void:::Writes a String as a sequence of chars.
java.io.ObjectOutputStream#writeUTF(String)->void:::Primitive data write of this String in modified UTF-8 format
java.io.ObjectOutputStream.PutField#put(String, boolean)->void:::Put the value of the named boolean field into the persistent field.
java.io.ObjectOutputStream.PutField#put(String, byte)->void:::Put the value of the named byte field into the persistent field.
java.io.ObjectOutputStream.PutField#put(String, char)->void:::Put the value of the named char field into the persistent field.
java.io.ObjectOutputStream.PutField#put(String, short)->void:::Put the value of the named short field into the persistent field.
java.io.ObjectOutputStream.PutField#put(String, int)->void:::Put the value of the named int field into the persistent field.
java.io.ObjectOutputStream.PutField#put(String, long)->void:::Put the value of the named long field into the persistent field.
java.io.ObjectOutputStream.PutField#put(String, float)->void:::Put the value of the named float field into the persistent field.
java.io.ObjectOutputStream.PutField#put(String, double)->void:::Put the value of the named double field into the persistent field.
java.io.ObjectOutputStream.PutField#put(String, Object)->void:::Put the value of the named Object field into the persistent field.
java.io.ObjectOutputStream.PutField#write(ObjectOutput)->void:::Write the data and fields to the specified ObjectOutput stream, which must be the same stream that produced this PutField object.
java.io.ObjectOutputStream#getProtocolVersion()->int:::Returns protocol version in use.
java.io.ObjectOutputStream#writeTypeString(String)->void:::Writes string without allowing it to be replaced in stream
java.io.ObjectStreamClass#lookup(Class)->ObjectStreamClass:::Find the descriptor for a class that can be serialized
java.io.ObjectStreamClass#lookupAny(Class)->ObjectStreamClass:::Returns the descriptor for any class, regardless of whether it implements Serializable.
java.io.ObjectStreamClass#getName()->String:::Returns the name of the class described by this descriptor
java.io.ObjectStreamClass#getSerialVersionUID()->long:::Return the serialVersionUID for this class
java.io.ObjectStreamClass#forClass()->Class:::Return the class in the local VM that this version is mapped to
java.io.ObjectStreamClass#getFields()->ObjectStreamField[]:::Return an array of the fields of this serializable class.
java.io.ObjectStreamClass#getField(String)->ObjectStreamField:::Get the field of this class by name.
java.io.ObjectStreamClass#toString()->String:::Return a string describing this ObjectStreamClass.
java.io.ObjectStreamClass#lookup(Class, boolean)->ObjectStreamClass:::Looks up and returns class descriptor for given class, or null if class is non-serializable and "all" is set to false.
java.io.ObjectStreamClass#initProxy(Class, ClassNotFoundException, ObjectStreamClass)->void:::Initializes class descriptor representing a proxy class.
java.io.ObjectStreamClass#initNonProxy(ObjectStreamClass, Class, ClassNotFoundException, ObjectStreamClass)->void:::Initializes class descriptor representing a non-proxy class.
java.io.ObjectStreamClass#readNonProxy(ObjectInputStream)->void:::Reads non-proxy class descriptor information from given input stream
java.io.ObjectStreamClass#writeNonProxy(ObjectOutputStream)->void:::Writes non-proxy class descriptor information to given output stream.
java.io.ObjectStreamClass#getResolveException()->ClassNotFoundException:::Returns ClassNotFoundException (if any) thrown while attempting to resolve local class corresponding to this class descriptor.
java.io.ObjectStreamClass#checkInitialized()->void:::Throws InvalidClassException if not initialized
java.io.ObjectStreamClass#checkDeserialize()->void:::Throws an InvalidClassException if object instances referencing this class descriptor should not be allowed to deserialize
java.io.ObjectStreamClass#checkSerialize()->void:::Throws an InvalidClassException if objects whose class is represented by this descriptor should not be allowed to serialize
java.io.ObjectStreamClass#checkDefaultSerialize()->void:::Throws an InvalidClassException if objects whose class is represented by this descriptor should not be permitted to use default serialization (e.g., if the class declares serializable fields that do not correspond to actual fields, and hence must use the GetField API)
java.io.ObjectStreamClass#getSuperDesc()->ObjectStreamClass:::Returns superclass descriptor
java.io.ObjectStreamClass#getLocalDesc()->ObjectStreamClass:::Returns the "local" class descriptor for the class associated with this class descriptor (i.e., the result of ObjectStreamClass.lookup(this.forClass())) or null if there is no class associated with this descriptor.
java.io.ObjectStreamClass#getFields(boolean)->ObjectStreamField[]:::Returns arrays of ObjectStreamFields representing the serializable fields of the represented class
java.io.ObjectStreamClass#getField(String, Class)->ObjectStreamField:::Looks up a serializable field of the represented class by name and type
java.io.ObjectStreamClass#isProxy()->boolean:::Returns true if class descriptor represents a dynamic proxy class, false otherwise.
java.io.ObjectStreamClass#isEnum()->boolean:::Returns true if class descriptor represents an enum type, false otherwise.
java.io.ObjectStreamClass#isExternalizable()->boolean:::Returns true if represented class implements Externalizable, false otherwise.
java.io.ObjectStreamClass#isSerializable()->boolean:::Returns true if represented class implements Serializable, false otherwise.
java.io.ObjectStreamClass#hasBlockExternalData()->boolean:::Returns true if class descriptor represents externalizable class that has written its data in 1.2 (block data) format, false otherwise.
java.io.ObjectStreamClass#hasWriteObjectData()->boolean:::Returns true if class descriptor represents serializable (but not externalizable) class which has written its data via a custom writeObject() method, false otherwise.
java.io.ObjectStreamClass#isInstantiable()->boolean:::Returns true if represented class is serializable/externalizable and can be instantiated by the serialization runtime--i.e., if it is externalizable and defines a public no-arg constructor, or if it is non-externalizable and its first non-serializable superclass defines an accessible no-arg constructor
java.io.ObjectStreamClass#hasWriteObjectMethod()->boolean:::Returns true if represented class is serializable (but not externalizable) and defines a conformant writeObject method
java.io.ObjectStreamClass#hasReadObjectMethod()->boolean:::Returns true if represented class is serializable (but not externalizable) and defines a conformant readObject method
java.io.ObjectStreamClass#hasReadObjectNoDataMethod()->boolean:::Returns true if represented class is serializable (but not externalizable) and defines a conformant readObjectNoData method
java.io.ObjectStreamClass#hasWriteReplaceMethod()->boolean:::Returns true if represented class is serializable or externalizable and defines a conformant writeReplace method
java.io.ObjectStreamClass#hasReadResolveMethod()->boolean:::Returns true if represented class is serializable or externalizable and defines a conformant readResolve method
java.io.ObjectStreamClass#newInstance()->Object:::Creates a new instance of the represented class
java.io.ObjectStreamClass#invokeWriteObject(Object, ObjectOutputStream)->void:::Invokes the writeObject method of the represented serializable class
java.io.ObjectStreamClass#invokeReadObject(Object, ObjectInputStream)->void:::Invokes the readObject method of the represented serializable class
java.io.ObjectStreamClass#invokeReadObjectNoData(Object)->void:::Invokes the readObjectNoData method of the represented serializable class
java.io.ObjectStreamClass#invokeWriteReplace(Object)->Object:::Invokes the writeReplace method of the represented serializable class and returns the result
java.io.ObjectStreamClass#invokeReadResolve(Object)->Object:::Invokes the readResolve method of the represented serializable class and returns the result
java.io.ObjectStreamClass#getClassDataLayout()->ClassDataSlot[]:::Returns array of ClassDataSlot instances representing the data layout (including superclass data) for serialized objects described by this class descriptor
java.io.ObjectStreamClass#getPrimDataSize()->int:::Returns aggregate size (in bytes) of marshalled primitive field values for represented class.
java.io.ObjectStreamClass#getNumObjFields()->int:::Returns number of non-primitive serializable fields of represented class.
java.io.ObjectStreamClass#getPrimFieldValues(Object, byte[])->void:::Fetches the serializable primitive field values of object obj and marshals them into byte array buf starting at offset 0
java.io.ObjectStreamClass#setPrimFieldValues(Object, byte[])->void:::Sets the serializable primitive fields of object obj using values unmarshalled from byte array buf starting at offset 0
java.io.ObjectStreamClass#getObjFieldValues(Object, Object[])->void:::Fetches the serializable object field values of object obj and stores them in array vals starting at offset 0
java.io.ObjectStreamClass#checkObjFieldValueTypes(Object, Object[])->void:::Checks that the given values, from array vals starting at offset 0, are assignable to the given serializable object fields.
java.io.ObjectStreamClass#setObjFieldValues(Object, Object[])->void:::Sets the serializable object fields of object obj using values from array vals starting at offset 0
java.io.ObjectStreamClass#processQueue(ReferenceQueue>, ConcurrentMap>, ?>)->void:::Removes from the specified map any keys that have been enqueued on the specified reference queue.
java.io.ObjectStreamClass.WeakClassKey#hashCode()->int:::Returns the identity hash code of the original referent.
java.io.ObjectStreamClass.WeakClassKey#equals(Object)->boolean:::Returns true if the given object is this identical WeakClassKey instance, or, if this object's referent has not been cleared, if the given object is another WeakClassKey instance with the identical non-null referent as this one.
java.io.ObjectStreamField#getClassSignature(Class)->String:::Returns JVM type signature for given class.
java.io.ObjectStreamField#appendClassSignature(StringBuilder, Class)->StringBuilder::: object stream field append class signature
java.io.ObjectStreamField#getName()->String:::Get the name of this field.
java.io.ObjectStreamField#getType()->Class:::Get the type of the field
java.io.ObjectStreamField#getTypeCode()->char::: object stream field get type code
java.io.ObjectStreamField#getTypeString()->String::: object stream field get type string
java.io.ObjectStreamField#getOffset()->int::: object stream field get offset
java.io.ObjectStreamField#setOffset(int)->void::: object stream field set offset
java.io.ObjectStreamField#isPrimitive()->boolean::: object stream field is primitive
java.io.ObjectStreamField#isUnshared()->boolean:::Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.
java.io.ObjectStreamField#compareTo(Object)->int::: object stream field compare to
java.io.ObjectStreamField#toString()->String:::Return a string that describes this field.
java.io.ObjectStreamField#getField()->Field:::Returns field represented by this ObjectStreamField, or null if ObjectStreamField is not associated with an actual field.
java.io.ObjectStreamField#getSignature()->String:::Returns JVM type signature of field (similar to getTypeString, except that signature strings are returned for primitive fields as well).
java.io.OutputStream#nullOutputStream()->OutputStream:::Returns a new OutputStream which discards all bytes
java.io.OutputStream#write(int)->void:::Writes the specified byte to this output stream
java.io.OutputStream#write(byte[])->void:::Writes b.length bytes from the specified byte array to this output stream
java.io.OutputStream#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to this output stream
java.io.OutputStream#flush()->void:::Flushes this output stream and forces any buffered output bytes to be written out
java.io.OutputStream#close()->void:::Closes this output stream and releases any system resources associated with this stream
java.io.OutputStreamWriter#getEncoding()->String:::Returns the name of the character encoding being used by this stream
java.io.OutputStreamWriter#flushBuffer()->void:::Flushes the output buffer to the underlying byte stream, without flushing the byte stream itself
java.io.OutputStreamWriter#write(int)->void:::Writes a single character.
java.io.OutputStreamWriter#write(char[], int, int)->void:::Writes a portion of an array of characters.
java.io.OutputStreamWriter#write(String, int, int)->void:::Writes a portion of a string.
java.io.OutputStreamWriter#append(CharSequence, int, int)->Writer::: output stream writer append
java.io.OutputStreamWriter#append(CharSequence)->Writer::: output stream writer append
java.io.OutputStreamWriter#flush()->void:::Flushes the stream.
java.io.OutputStreamWriter#close()->void::: output stream writer close
java.io.PipedInputStream#connect(PipedOutputStream)->void:::Causes this piped input stream to be connected to the piped  output stream src
java.io.PipedInputStream#receive(int)->void:::Receives a byte of data
java.io.PipedInputStream#receive(byte[], int, int)->void:::Receives data into an array of bytes
java.io.PipedInputStream#receivedLast()->void:::Notifies all waiting threads that the last byte of data has been received.
java.io.PipedInputStream#read()->int:::Reads the next byte of data from this piped input stream
java.io.PipedInputStream#read(byte[], int, int)->int:::Reads up to len bytes of data from this piped input stream into an array of bytes
java.io.PipedInputStream#available()->int:::Returns the number of bytes that can be read from this input stream without blocking.
java.io.PipedInputStream#close()->void:::Closes this piped input stream and releases any system resources associated with the stream.
java.io.PipedOutputStream#connect(PipedInputStream)->void:::Connects this piped output stream to a receiver
java.io.PipedOutputStream#write(int)->void:::Writes the specified byte to the piped output stream
java.io.PipedOutputStream#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to this piped output stream
java.io.PipedOutputStream#flush()->void:::Flushes this output stream and forces any buffered output bytes to be written out
java.io.PipedOutputStream#close()->void:::Closes this piped output stream and releases any system resources associated with this stream
java.io.PipedReader#connect(PipedWriter)->void:::Causes this piped reader to be connected to the piped  writer src
java.io.PipedReader#receive(int)->void:::Receives a char of data
java.io.PipedReader#receive(char[], int, int)->void:::Receives data into an array of characters
java.io.PipedReader#receivedLast()->void:::Notifies all waiting threads that the last character of data has been received.
java.io.PipedReader#read()->int:::Reads the next character of data from this piped stream
java.io.PipedReader#read(char[], int, int)->int:::Reads up to len characters of data from this piped stream into an array of characters
java.io.PipedReader#ready()->boolean:::Tell whether this stream is ready to be read
java.io.PipedReader#close()->void:::Closes this piped stream and releases any system resources associated with the stream.
java.io.PipedWriter#connect(PipedReader)->void:::Connects this piped writer to a receiver
java.io.PipedWriter#write(int)->void:::Writes the specified char to the piped output stream
java.io.PipedWriter#write(char[], int, int)->void:::Writes len characters from the specified character array starting at offset off to this piped output stream
java.io.PipedWriter#flush()->void:::Flushes this output stream and forces any buffered output characters to be written out
java.io.PipedWriter#close()->void:::Closes this piped output stream and releases any system resources associated with this stream
java.io.PrintStream#flush()->void:::Flushes the stream
java.io.PrintStream#close()->void:::Closes the stream
java.io.PrintStream#checkError()->boolean:::Flushes the stream and checks its error state
java.io.PrintStream#setError()->void:::Sets the error state of the stream to true
java.io.PrintStream#clearError()->void:::Clears the internal error state of this stream
java.io.PrintStream#write(int)->void:::Writes the specified byte to this stream
java.io.PrintStream#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to this stream
java.io.PrintStream#print(boolean)->void:::Prints a boolean value
java.io.PrintStream#print(char)->void:::Prints a character
java.io.PrintStream#print(int)->void:::Prints an integer
java.io.PrintStream#print(long)->void:::Prints a long integer
java.io.PrintStream#print(float)->void:::Prints a floating-point number
java.io.PrintStream#print(double)->void:::Prints a double-precision floating-point number
java.io.PrintStream#print(char[])->void:::Prints an array of characters
java.io.PrintStream#print(String)->void:::Prints a string
java.io.PrintStream#print(Object)->void:::Prints an object
java.io.PrintStream#println()->void:::Terminates the current line by writing the line separator string
java.io.PrintStream#println(boolean)->void:::Prints a boolean and then terminate the line
java.io.PrintStream#println(char)->void:::Prints a character and then terminate the line
java.io.PrintStream#println(int)->void:::Prints an integer and then terminate the line
java.io.PrintStream#println(long)->void:::Prints a long and then terminate the line
java.io.PrintStream#println(float)->void:::Prints a float and then terminate the line
java.io.PrintStream#println(double)->void:::Prints a double and then terminate the line
java.io.PrintStream#println(char[])->void:::Prints an array of characters and then terminate the line
java.io.PrintStream#println(String)->void:::Prints a String and then terminate the line
java.io.PrintStream#println(Object)->void:::Prints an Object and then terminate the line
java.io.PrintStream#printf(String, Object...)->PrintStream:::A convenience method to write a formatted string to this output stream using the specified format string and arguments
java.io.PrintStream#printf(Locale, String, Object...)->PrintStream:::A convenience method to write a formatted string to this output stream using the specified format string and arguments
java.io.PrintStream#format(String, Object...)->PrintStream:::Writes a formatted string to this output stream using the specified format string and arguments
java.io.PrintStream#format(Locale, String, Object...)->PrintStream:::Writes a formatted string to this output stream using the specified format string and arguments.
java.io.PrintStream#append(CharSequence)->PrintStream:::Appends the specified character sequence to this output stream
java.io.PrintStream#append(CharSequence, int, int)->PrintStream:::Appends a subsequence of the specified character sequence to this output stream
java.io.PrintStream#append(char)->PrintStream:::Appends the specified character to this output stream
java.io.PrintWriter#flush()->void:::Flushes the stream.
java.io.PrintWriter#close()->void:::Closes the stream and releases any system resources associated with it
java.io.PrintWriter#checkError()->boolean:::Flushes the stream if it's not closed and checks its error state.
java.io.PrintWriter#setError()->void:::Indicates that an error has occurred
java.io.PrintWriter#clearError()->void:::Clears the error state of this stream
java.io.PrintWriter#write(int)->void:::Writes a single character.
java.io.PrintWriter#write(char[], int, int)->void:::Writes A Portion of an array of characters.
java.io.PrintWriter#write(char[])->void:::Writes an array of characters
java.io.PrintWriter#write(String, int, int)->void:::Writes a portion of a string.
java.io.PrintWriter#write(String)->void:::Writes a string
java.io.PrintWriter#print(boolean)->void:::Prints a boolean value
java.io.PrintWriter#print(char)->void:::Prints a character
java.io.PrintWriter#print(int)->void:::Prints an integer
java.io.PrintWriter#print(long)->void:::Prints a long integer
java.io.PrintWriter#print(float)->void:::Prints a floating-point number
java.io.PrintWriter#print(double)->void:::Prints a double-precision floating-point number
java.io.PrintWriter#print(char[])->void:::Prints an array of characters
java.io.PrintWriter#print(String)->void:::Prints a string
java.io.PrintWriter#print(Object)->void:::Prints an object
java.io.PrintWriter#println()->void:::Terminates the current line by writing the line separator string
java.io.PrintWriter#println(boolean)->void:::Prints a boolean value and then terminates the line
java.io.PrintWriter#println(char)->void:::Prints a character and then terminates the line
java.io.PrintWriter#println(int)->void:::Prints an integer and then terminates the line
java.io.PrintWriter#println(long)->void:::Prints a long integer and then terminates the line
java.io.PrintWriter#println(float)->void:::Prints a floating-point number and then terminates the line
java.io.PrintWriter#println(double)->void:::Prints a double-precision floating-point number and then terminates the line
java.io.PrintWriter#println(char[])->void:::Prints an array of characters and then terminates the line
java.io.PrintWriter#println(String)->void:::Prints a String and then terminates the line
java.io.PrintWriter#println(Object)->void:::Prints an Object and then terminates the line
java.io.PrintWriter#printf(String, Object...)->PrintWriter:::A convenience method to write a formatted string to this writer using the specified format string and arguments
java.io.PrintWriter#printf(Locale, String, Object...)->PrintWriter:::A convenience method to write a formatted string to this writer using the specified format string and arguments
java.io.PrintWriter#format(String, Object...)->PrintWriter:::Writes a formatted string to this writer using the specified format string and arguments
java.io.PrintWriter#format(Locale, String, Object...)->PrintWriter:::Writes a formatted string to this writer using the specified format string and arguments
java.io.PrintWriter#append(CharSequence)->PrintWriter:::Appends the specified character sequence to this writer
java.io.PrintWriter#append(CharSequence, int, int)->PrintWriter:::Appends a subsequence of the specified character sequence to this writer
java.io.PrintWriter#append(char)->PrintWriter:::Appends the specified character to this writer
java.io.PushbackInputStream#read()->int:::Reads the next byte of data from this input stream
java.io.PushbackInputStream#read(byte[], int, int)->int:::Reads up to len bytes of data from this input stream into an array of bytes
java.io.PushbackInputStream#unread(int)->void:::Pushes back a byte by copying it to the front of the pushback buffer
java.io.PushbackInputStream#unread(byte[], int, int)->void:::Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer
java.io.PushbackInputStream#unread(byte[])->void:::Pushes back an array of bytes by copying it to the front of the pushback buffer
java.io.PushbackInputStream#available()->int:::Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream
java.io.PushbackInputStream#skip(long)->long:::Skips over and discards n bytes of data from this input stream
java.io.PushbackInputStream#markSupported()->boolean:::Tests if this input stream supports the mark and reset methods, which it does not.
java.io.PushbackInputStream#mark(int)->void:::Marks the current position in this input stream
java.io.PushbackInputStream#reset()->void:::Repositions this stream to the position at the time the mark method was last called on this input stream
java.io.PushbackInputStream#close()->void:::Closes this input stream and releases any system resources associated with the stream
java.io.PushbackReader#read()->int:::Reads a single character.
java.io.PushbackReader#read(char[], int, int)->int:::Reads characters into a portion of an array.
java.io.PushbackReader#unread(int)->void:::Pushes back a single character by copying it to the front of the pushback buffer
java.io.PushbackReader#unread(char[], int, int)->void:::Pushes back a portion of an array of characters by copying it to the front of the pushback buffer
java.io.PushbackReader#unread(char[])->void:::Pushes back an array of characters by copying it to the front of the pushback buffer
java.io.PushbackReader#ready()->boolean:::Tells whether this stream is ready to be read.
java.io.PushbackReader#mark(int)->void:::Marks the present position in the stream
java.io.PushbackReader#reset()->void:::Resets the stream
java.io.PushbackReader#markSupported()->boolean:::Tells whether this stream supports the mark() operation, which it does not.
java.io.PushbackReader#close()->void:::Closes the stream and releases any system resources associated with it
java.io.PushbackReader#skip(long)->long:::Skips characters
java.io.RandomAccessFile#getFD()->FileDescriptor:::Returns the opaque file descriptor object associated with this stream.
java.io.RandomAccessFile#getChannel()->FileChannel:::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file
java.io.RandomAccessFile#read()->int:::Reads a byte of data from this file
java.io.RandomAccessFile#read(byte[], int, int)->int:::Reads up to len bytes of data from this file into an array of bytes
java.io.RandomAccessFile#read(byte[])->int:::Reads up to b.length bytes of data from this file into an array of bytes
java.io.RandomAccessFile#readFully(byte[])->void:::Reads b.length bytes from this file into the byte array, starting at the current file pointer
java.io.RandomAccessFile#readFully(byte[], int, int)->void:::Reads exactly len bytes from this file into the byte array, starting at the current file pointer
java.io.RandomAccessFile#skipBytes(int)->int:::Attempts to skip over n bytes of input discarding the skipped bytes
java.io.RandomAccessFile#write(int)->void:::Writes the specified byte to this file
java.io.RandomAccessFile#write(byte[])->void:::Writes b.length bytes from the specified byte array to this file, starting at the current file pointer.
java.io.RandomAccessFile#write(byte[], int, int)->void:::Writes len bytes from the specified byte array starting at offset off to this file.
java.io.RandomAccessFile#getFilePointer()->long:::Returns the current offset in this file.
java.io.RandomAccessFile#seek(long)->void:::Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs
java.io.RandomAccessFile#length()->long:::Returns the length of this file.
java.io.RandomAccessFile#setLength(long)->void:::Sets the length of this file
java.io.RandomAccessFile#close()->void:::Closes this random access file stream and releases any system resources associated with the stream
java.io.RandomAccessFile#readBoolean()->boolean:::Reads a boolean from this file
java.io.RandomAccessFile#readByte()->byte:::Reads a signed eight-bit value from this file
java.io.RandomAccessFile#readUnsignedByte()->int:::Reads an unsigned eight-bit number from this file
java.io.RandomAccessFile#readShort()->short:::Reads a signed 16-bit number from this file
java.io.RandomAccessFile#readUnsignedShort()->int:::Reads an unsigned 16-bit number from this file
java.io.RandomAccessFile#readChar()->char:::Reads a character from this file
java.io.RandomAccessFile#readInt()->int:::Reads a signed 32-bit integer from this file
java.io.RandomAccessFile#readLong()->long:::Reads a signed 64-bit integer from this file
java.io.RandomAccessFile#readFloat()->float:::Reads a float from this file
java.io.RandomAccessFile#readDouble()->double:::Reads a double from this file
java.io.RandomAccessFile#readLine()->String::: random access file read line
java.io.RandomAccessFile#readUTF()->String:::Reads in a string from this file
java.io.RandomAccessFile#writeBoolean(boolean)->void:::Writes a boolean to the file as a one-byte value
java.io.RandomAccessFile#writeByte(int)->void:::Writes a byte to the file as a one-byte value
java.io.RandomAccessFile#writeShort(int)->void:::Writes a short to the file as two bytes, high byte first
java.io.RandomAccessFile#writeChar(int)->void:::Writes a char to the file as a two-byte value, high byte first
java.io.RandomAccessFile#writeInt(int)->void:::Writes an int to the file as four bytes, high byte first
java.io.RandomAccessFile#writeLong(long)->void:::Writes a long to the file as eight bytes, high byte first
java.io.RandomAccessFile#writeFloat(float)->void:::Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first
java.io.RandomAccessFile#writeDouble(double)->void:::Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first
java.io.RandomAccessFile#writeBytes(String)->void:::Writes the string to the file as a sequence of bytes
java.io.RandomAccessFile#writeChars(String)->void:::Writes a string to the file as a sequence of characters
java.io.RandomAccessFile#writeUTF(String)->void:::Writes a string to the file using modified UTF-8 encoding in a machine-independent manner
java.io.Reader#nullReader()->Reader:::Returns a new Reader that reads no characters
java.io.Reader#read(java.nio.CharBuffer)->int:::Attempts to read characters into the specified character buffer
java.io.Reader#read()->int:::Reads a single character
java.io.Reader#read(char[])->int:::Reads characters into an array
java.io.Reader#read(char[], int, int)->int:::Reads characters into a portion of an array
java.io.Reader#skip(long)->long:::Skips characters
java.io.Reader#ready()->boolean:::Tells whether this stream is ready to be read.
java.io.Reader#markSupported()->boolean:::Tells whether this stream supports the mark() operation
java.io.Reader#mark(int)->void:::Marks the present position in the stream
java.io.Reader#reset()->void:::Resets the stream
java.io.Reader#close()->void:::Closes the stream and releases any system resources associated with it
java.io.Reader#transferTo(Writer)->long:::Reads all characters from this reader and writes the characters to the given writer in the order that they are read
java.io.SequenceInputStream#nextStream()->void::: Continues reading in the next stream if an EOF is reached.
java.io.SequenceInputStream#available()->int:::Returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream
java.io.SequenceInputStream#read()->int:::Reads the next byte of data from this input stream
java.io.SequenceInputStream#read(byte[], int, int)->int:::Reads up to len bytes of data from this input stream into an array of bytes
java.io.SequenceInputStream#close()->void:::Closes this input stream and releases any system resources associated with the stream
java.io.SerialCallbackContext#getObj()->Object::: serial callback context get obj
java.io.SerialCallbackContext#getDesc()->ObjectStreamClass::: serial callback context get desc
java.io.SerialCallbackContext#check()->void::: serial callback context check
java.io.SerialCallbackContext#checkAndSetUsed()->void::: serial callback context check and set used
java.io.SerialCallbackContext#setUsed()->void::: serial callback context set used
java.io.StreamTokenizer#resetSyntax()->void:::Resets this tokenizer's syntax table so that all characters are "ordinary." See the ordinaryChar method for more information on a character being ordinary.
java.io.StreamTokenizer#wordChars(int, int)->void:::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are word constituents
java.io.StreamTokenizer#whitespaceChars(int, int)->void:::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are white space characters
java.io.StreamTokenizer#ordinaryChars(int, int)->void:::Specifies that all characters c in the range low&nbsp;&lt;=&nbsp;c&nbsp;&lt;=&nbsp;high are "ordinary" in this tokenizer
java.io.StreamTokenizer#ordinaryChar(int)->void:::Specifies that the character argument is "ordinary" in this tokenizer
java.io.StreamTokenizer#commentChar(int)->void:::Specified that the character argument starts a single-line comment
java.io.StreamTokenizer#quoteChar(int)->void:::Specifies that matching pairs of this character delimit string constants in this tokenizer
java.io.StreamTokenizer#parseNumbers()->void:::Specifies that numbers should be parsed by this tokenizer
java.io.StreamTokenizer#eolIsSignificant(boolean)->void:::Determines whether or not ends of line are treated as tokens
java.io.StreamTokenizer#slashStarComments(boolean)->void:::Determines whether or not the tokenizer recognizes C-style comments
java.io.StreamTokenizer#slashSlashComments(boolean)->void:::Determines whether or not the tokenizer recognizes C++-style comments
java.io.StreamTokenizer#lowerCaseMode(boolean)->void:::Determines whether or not word token are automatically lowercased
java.io.StreamTokenizer#nextToken()->int:::Parses the next token from the input stream of this tokenizer
java.io.StreamTokenizer#pushBack()->void:::Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field.
java.io.StreamTokenizer#lineno()->int:::Return the current line number.
java.io.StreamTokenizer#toString()->String:::Returns the string representation of the current stream token and the line number it occurs on
java.io.StringBufferInputStream#read()->int:::Reads the next byte of data from this input stream
java.io.StringBufferInputStream#read(byte[], int, int)->int:::Reads up to len bytes of data from this input stream into an array of bytes
java.io.StringBufferInputStream#skip(long)->long:::Skips n bytes of input from this input stream
java.io.StringBufferInputStream#available()->int:::Returns the number of bytes that can be read from the input stream without blocking.
java.io.StringBufferInputStream#reset()->void:::Resets the input stream to begin reading from the first character of this input stream's underlying buffer.
java.io.StringReader#read()->int:::Reads a single character.
java.io.StringReader#read(char[], int, int)->int:::Reads characters into a portion of an array.
java.io.StringReader#skip(long)->long:::Skips the specified number of characters in the stream
java.io.StringReader#ready()->boolean:::Tells whether this stream is ready to be read.
java.io.StringReader#markSupported()->boolean:::Tells whether this stream supports the mark() operation, which it does.
java.io.StringReader#mark(int)->void:::Marks the present position in the stream
java.io.StringReader#reset()->void:::Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked.
java.io.StringReader#close()->void:::Closes the stream and releases any system resources associated with it
java.io.StringWriter#write(int)->void:::Write a single character.
java.io.StringWriter#write(char[], int, int)->void:::Write a portion of an array of characters.
java.io.StringWriter#write(String)->void:::Write a string.
java.io.StringWriter#write(String, int, int)->void:::Write a portion of a string.
java.io.StringWriter#append(CharSequence)->StringWriter:::Appends the specified character sequence to this writer
java.io.StringWriter#append(CharSequence, int, int)->StringWriter:::Appends a subsequence of the specified character sequence to this writer
java.io.StringWriter#append(char)->StringWriter:::Appends the specified character to this writer
java.io.StringWriter#toString()->String:::Return the buffer's current value as a string.
java.io.StringWriter#getBuffer()->StringBuffer:::Return the string buffer itself.
java.io.StringWriter#flush()->void:::Flush the stream.
java.io.StringWriter#close()->void:::Closing a StringWriter has no effect
java.io.UncheckedIOException#getCause()->IOException:::Returns the cause of this exception.
java.io.WinNTFileSystem#getSeparator()->char::: win file system get separator
java.io.WinNTFileSystem#getPathSeparator()->char::: win file system get path separator
java.io.WinNTFileSystem#normalize(String)->String::: win file system normalize
java.io.WinNTFileSystem#prefixLength(String)->int::: win file system prefix length
java.io.WinNTFileSystem#resolve(String, String)->String::: win file system resolve
java.io.WinNTFileSystem#getDefaultParent()->String::: win file system get default parent
java.io.WinNTFileSystem#fromURIPath(String)->String::: win file system from path
java.io.WinNTFileSystem#isAbsolute(File)->boolean::: win file system is absolute
java.io.WinNTFileSystem#resolve(File)->String::: win file system resolve
java.io.WinNTFileSystem#canonicalize(String)->String::: win file system canonicalize
java.io.WinNTFileSystem#getBooleanAttributes(File)->int::: win file system get boolean attributes
java.io.WinNTFileSystem#checkAccess(File, int)->boolean::: win file system check access
java.io.WinNTFileSystem#getLastModifiedTime(File)->long::: win file system get last modified time
java.io.WinNTFileSystem#getLength(File)->long::: win file system get length
java.io.WinNTFileSystem#setPermission(File, int, boolean, boolean)->boolean::: win file system set permission
java.io.WinNTFileSystem#createFileExclusively(String)->boolean::: win file system create file exclusively
java.io.WinNTFileSystem#list(File)->String[]::: win file system list
java.io.WinNTFileSystem#createDirectory(File)->boolean::: win file system create directory
java.io.WinNTFileSystem#setLastModifiedTime(File, long)->boolean::: win file system set last modified time
java.io.WinNTFileSystem#setReadOnly(File)->boolean::: win file system set read only
java.io.WinNTFileSystem#delete(File)->boolean::: win file system delete
java.io.WinNTFileSystem#rename(File, File)->boolean::: win file system rename
java.io.WinNTFileSystem#listRoots()->File[]::: win file system list roots
java.io.WinNTFileSystem#getSpace(File, int)->long::: win file system get space
java.io.WinNTFileSystem#getNameMax(String)->int::: win file system get name max
java.io.WinNTFileSystem#compare(File, File)->int::: win file system compare
java.io.WinNTFileSystem#hashCode(File)->int::: win file system hash code
java.io.WriteAbortedException#getMessage()->String:::Produce the message and include the message from the nested exception, if there is one.
java.io.WriteAbortedException#getCause()->Throwable:::Returns the exception that terminated the operation (the cause).
java.io.Writer#nullWriter()->Writer:::Returns a new Writer which discards all characters
java.io.Writer#write(int)->void:::Writes a single character
java.io.Writer#write(char[])->void:::Writes an array of characters.
java.io.Writer#write(char[], int, int)->void:::Writes a portion of an array of characters.
java.io.Writer#write(String)->void:::Writes a string.
java.io.Writer#write(String, int, int)->void:::Writes a portion of a string.
java.io.Writer#append(CharSequence)->Writer:::Appends the specified character sequence to this writer
java.io.Writer#append(CharSequence, int, int)->Writer:::Appends a subsequence of the specified character sequence to this writer
java.io.Writer#append(char)->Writer:::Appends the specified character to this writer
java.io.Writer#flush()->void:::Flushes the stream
java.io.Writer#close()->void:::Closes the stream, flushing it first

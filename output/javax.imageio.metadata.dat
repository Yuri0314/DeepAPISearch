IIOInvalidTreeException#getOffendingNode():::Returns the Node that caused the error in parsing.:::return
IIOMetadata#isStandardMetadataFormatSupported():::Returns true if the standard metadata format is supported by getMetadataFormat, getAsTree, setFromTree, and mergeTree:::return
IIOMetadata#isReadOnly():::Returns true if this object does not support the mergeTree, setFromTree, and reset methods.:::
IIOMetadata#getNativeMetadataFormatName():::Returns the name of the "native" metadata format for this plug-in, which typically allows for lossless encoding and transmission of the metadata stored in the format handled by this plug-in:::return
IIOMetadata#getExtraMetadataFormatNames():::Returns an array of Strings containing the names of additional metadata formats, other than the native and standard formats, recognized by this plug-in's getAsTree, setFromTree, and mergeTree methods:::if->return->return->extraMetadataFormatNames->clone
IIOMetadata#getMetadataFormatNames():::Returns an array of Strings containing the names of all metadata formats, including the native and standard formats, recognized by this plug-in's getAsTree, setFromTree, and mergeTree methods:::nativeName->getNativeMetadataFormatName->standardName->isStandardMetadataFormatSupported->extraNames->getExtraMetadataFormatNames->numFormats->if->if->if->if->return->formats->new->StringArr->index->if->if->if->for->i->return
IIOMetadata#getMetadataFormat(String):::Returns an IIOMetadataFormat object describing the given metadata format, or null if no description is available:::if->throw->new->IllegalArgumentException->if->formatName->equals->return->IIOMetadataFormatImpl->getStandardFormatInstance->formatClassName->if->formatName->equals->else->if->for->i->if->throw->new->IllegalArgumentException->try->className->pa->return->getMetadataFormatClass->cls->AccessController->doPrivileged->meth->cls->getMethod->return->meth->invoke->catch->ex->new->IllegalStateException->ex->initCause->throw->finally
IIOMetadata#getAsTree(String):::Returns an XML DOM Node object that represents the root of a tree of metadata contained within this object according to the conventions defined by a given metadata format:::
IIOMetadata#mergeTree(String, Node):::Alters the internal state of this IIOMetadata object from a tree of XML DOM Nodes whose syntax is defined by the given metadata format:::
IIOMetadata#getStandardChromaNode():::Returns an IIOMetadataNode representing the chroma information of the standard javax_imageio_1.0 metadata format, or null if no such information is available:::return
IIOMetadata#getStandardCompressionNode():::Returns an IIOMetadataNode representing the compression information of the standard javax_imageio_1.0 metadata format, or null if no such information is available:::return
IIOMetadata#getStandardDataNode():::Returns an IIOMetadataNode representing the data format information of the standard javax_imageio_1.0 metadata format, or null if no such information is available:::return
IIOMetadata#getStandardDimensionNode():::Returns an IIOMetadataNode representing the dimension information of the standard javax_imageio_1.0 metadata format, or null if no such information is available:::return
IIOMetadata#getStandardDocumentNode():::Returns an IIOMetadataNode representing the document information of the standard javax_imageio_1.0 metadata format, or null if no such information is available:::return
IIOMetadata#getStandardTextNode():::Returns an IIOMetadataNode representing the textual information of the standard javax_imageio_1.0 metadata format, or null if no such information is available:::return
IIOMetadata#getStandardTileNode():::Returns an IIOMetadataNode representing the tiling information of the standard javax_imageio_1.0 metadata format, or null if no such information is available:::return
IIOMetadata#getStandardTransparencyNode():::Returns an IIOMetadataNode representing the transparency information of the standard javax_imageio_1.0 metadata format, or null if no such information is available:::return
IIOMetadata#getStandardTree():::A utility method to return a tree of IIOMetadataNodes representing the metadata contained within this object according to the conventions of the standard javax_imageio_1.0 metadata format:::root->new->IIOMetadataNode->getStandardChromaNode->append->getStandardCompressionNode->append->getStandardDataNode->append->getStandardDimensionNode->append->getStandardDocumentNode->append->getStandardTextNode->append->getStandardTileNode->append->getStandardTransparencyNode->append->return
IIOMetadata#setFromTree(String, Node):::Sets the internal state of this IIOMetadata object from a tree of XML DOM Nodes whose syntax is defined by the given metadata format:::reset->mergeTree
IIOMetadata#reset():::Resets all the data stored in this object to default values, usually to the state this object was in immediately after construction, though the precise semantics are plug-in specific:::
IIOMetadata#setController(IIOMetadataController):::Sets the IIOMetadataController to be used to provide settings for this IIOMetadata object when the activateController method is called, overriding any default controller:::
IIOMetadata#getController():::Returns whatever IIOMetadataController is currently installed:::return
IIOMetadata#getDefaultController():::Returns the default IIOMetadataController, if there is one, regardless of the currently installed controller:::return
IIOMetadata#hasController():::Returns true if there is a controller installed for this IIOMetadata object:::return->getController
IIOMetadata#activateController():::Activates the installed IIOMetadataController for this IIOMetadata object and returns the resulting value:::if->hasController->throw->new->IllegalStateException->return->getController->activate
IIOMetadataController#activate(IIOMetadata):::Activates the controller:::
IIOMetadataFormat#getRootName():::Returns the name of the root element of the format.:::
IIOMetadataFormat#canNodeAppear(String, ImageTypeSpecifier):::Returns true if the element (and the subtree below it) is allowed to appear in a metadata document for an image of the given type, defined by an ImageTypeSpecifier:::
IIOMetadataFormat#getElementMinChildren(String):::Returns the minimum number of children of the named element with child policy CHILD_POLICY_REPEAT:::
IIOMetadataFormat#getElementMaxChildren(String):::Returns the maximum number of children of the named element with child policy CHILD_POLICY_REPEAT:::
IIOMetadataFormat#getElementDescription(String, Locale):::Returns a String containing a description of the named element, or null:::
IIOMetadataFormat#getChildPolicy(String):::Returns one of the constants starting with CHILD_POLICY_, indicating the legal pattern of children for the named element.:::
IIOMetadataFormat#getChildNames(String):::Returns an array of Strings indicating the names of the element which are allowed to be children of the named element, in the order in which they should appear:::
IIOMetadataFormat#getAttributeNames(String):::Returns an array of Strings listing the names of the attributes that may be associated with the named element.:::
IIOMetadataFormat#getAttributeValueType(String, String):::Returns one of the constants starting with VALUE_, indicating whether the values of the given attribute within the named element are arbitrary, constrained to lie within a specified range, constrained to be one of a set of enumerated values, or are a whitespace-separated list of arbitrary values.:::
IIOMetadataFormat#getAttributeDataType(String, String):::Returns one of the constants starting with DATATYPE_, indicating the format and interpretation of the value of the given attribute within the named element:::
IIOMetadataFormat#isAttributeRequired(String, String):::Returns true if the named attribute must be present within the named element.:::
IIOMetadataFormat#getAttributeDefaultValue(String, String):::Returns the default value of the named attribute, if it is not explicitly present within the named element, as a String, or null if no default value is available.:::
IIOMetadataFormat#getAttributeEnumerations(String, String):::Returns an array of Strings containing the legal enumerated values for the given attribute within the named element:::
IIOMetadataFormat#getAttributeMinValue(String, String):::Returns the minimum legal value for the attribute:::
IIOMetadataFormat#getAttributeMaxValue(String, String):::Returns the maximum legal value for the attribute:::
IIOMetadataFormat#getAttributeListMinLength(String, String):::Returns the minimum number of list items that may be used to define this attribute:::
IIOMetadataFormat#getAttributeListMaxLength(String, String):::Returns the maximum number of list items that may be used to define this attribute:::
IIOMetadataFormat#getAttributeDescription(String, String, Locale):::Returns a String containing a description of the named attribute, or null:::
IIOMetadataFormat#getObjectValueType(String):::Returns one of the enumerated values starting with VALUE_, indicating the type of values (enumeration, range, or array) that are allowed for the Object reference:::
IIOMetadataFormat#getObjectClass(String):::Returns the Class type of the Object reference stored within the element:::
IIOMetadataFormat#getObjectDefaultValue(String):::Returns an Objects containing the default value for the Object reference within the named element.:::
IIOMetadataFormat#getObjectEnumerations(String):::Returns an array of Objects containing the legal enumerated values for the Object reference within the named element:::
IIOMetadataFormat#getObjectMinValue(String):::Returns the minimum legal value for the Object reference within the named element:::
IIOMetadataFormat#getObjectMaxValue(String):::Returns the maximum legal value for the Object reference within the named element:::
IIOMetadataFormat#getObjectArrayMinLength(String):::Returns the minimum number of array elements that may be used to define the Object reference within the named element:::
IIOMetadataFormat#getObjectArrayMaxLength(String):::Returns the maximum number of array elements that may be used to define the Object reference within the named element:::
IIOMetadataFormatImpl#setResourceBaseName(String):::Sets a new base name for locating ResourceBundles containing descriptions of elements and attributes for this format:::if->throw->new->IllegalArgumentException
IIOMetadataFormatImpl#getResourceBaseName():::Returns the currently set base name for locating ResourceBundles.:::return
IIOMetadataFormatImpl#addElement(String, String, int):::Adds a new element type to this metadata document format with a child policy other than CHILD_POLICY_REPEAT.:::parent->getElement->if->throw->new->IllegalArgumentException->element->new->Element->add->add->elementMap->put
IIOMetadataFormatImpl#addElement(String, String, int, int):::Adds a new element type to this metadata document format with a child policy of CHILD_POLICY_REPEAT.:::parent->getElement->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->element->new->Element->add->add->elementMap->put
IIOMetadataFormatImpl#addChildElement(String, String):::Adds an existing element to the list of legal children for a given parent node type.:::parent->getElement->element->getElement->add->add
IIOMetadataFormatImpl#removeElement(String):::Removes an element from the format:::element->getElement->if->iter->iterator->while->iter->hasNext->parentName->iter->next->parent->getElement->if->remove->elementMap->remove
IIOMetadataFormatImpl#addAttribute(String, String, int, boolean, String):::Adds a new attribute to a previously defined element that may be set to an arbitrary value.:::element->getElement->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->attr->new->Attribute->add->put
IIOMetadataFormatImpl#addAttribute(String, String, int, boolean, String, List):::Adds a new attribute to a previously defined element that will be defined by a set of enumerated values.:::element->getElement->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->enumeratedValues->size->throw->new->IllegalArgumentException->iter->enumeratedValues->iterator->while->iter->hasNext->o->iter->next->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->attr->new->Attribute->add->put
IIOMetadataFormatImpl#addAttribute(String, String, int, boolean, String, String, String, boolean, boolean):::Adds a new attribute to a previously defined element that will be defined by a range of values.:::element->getElement->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->attr->new->Attribute->if->if->add->put
IIOMetadataFormatImpl#addAttribute(String, String, int, boolean, int, int):::Adds a new attribute to a previously defined element that will be defined by a list of values.:::element->getElement->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->attr->new->Attribute->add->put
IIOMetadataFormatImpl#addBooleanAttribute(String, String, boolean, boolean):::Adds a new attribute to a previously defined element that will be defined by the enumerated values TRUE and FALSE, with a datatype of DATATYPE_BOOLEAN.:::values->new->ArrayList<>->values->add->values->add->dval->if->addAttribute
IIOMetadataFormatImpl#removeAttribute(String, String):::Removes an attribute from a previously defined element:::element->getElement->remove->remove
IIOMetadataFormatImpl#addObjectValue(String, Class, boolean, T):::Allows an Object reference of a given class type to be stored in nodes implementing the named element:::element->getElement->obj->new->ObjectValue<>
IIOMetadataFormatImpl#addObjectValue(String, Class, boolean, T, List):::Allows an Object reference of a given class type to be stored in nodes implementing the named element:::element->getElement->if->throw->new->IllegalArgumentException->if->enumeratedValues->size->throw->new->IllegalArgumentException->iter->enumeratedValues->iterator->while->iter->hasNext->o->iter->next->if->throw->new->IllegalArgumentException->if->classType->isInstance->throw->new->IllegalArgumentException->obj->new->ObjectValue<>
IIOMetadataFormatImpl#addObjectValue(String, Class, T, Comparable, Comparable, boolean, boolean):::Allows an Object reference of a given class type to be stored in nodes implementing the named element:::element->getElement->obj->new->ObjectValue<>->if->if
IIOMetadataFormatImpl#addObjectValue(String, Class, int, int):::Allows an Object reference of a given class type to be stored in nodes implementing the named element:::element->getElement->obj->new->ObjectValue<>
IIOMetadataFormatImpl#removeObjectValue(String):::Disallows an Object reference from being stored in nodes implementing the named element.:::element->getElement
IIOMetadataFormatImpl#getElementDescription(String, Locale):::Returns a String containing a description of the named element, or null:::element->getElement->return->getResource
IIOMetadataFormatImpl#getAttributeDescription(String, String, Locale):::Returns a String containing a description of the named attribute, or null:::element->getElement->if->throw->new->IllegalArgumentException->attr->get->if->throw->new->IllegalArgumentException->key->return->getResource
IIOMetadataFormatImpl#getStandardFormatInstance():::Returns an IIOMetadataFormat object describing the standard, plug-in neutral javax.imageio_1.0 metadata document format described in the comment of the javax.imageio.metadata package.:::createStandardFormat->return
IIONamedNodeMap#getNamedItemNS(String, String):::Equivalent to getNamedItem(localName).:::return->getNamedItem
IIONamedNodeMap#setNamedItemNS(Node):::Equivalent to setNamedItem(arg).:::return->setNamedItem
IIONamedNodeMap#removeNamedItemNS(String, String):::Equivalent to removeNamedItem(localName).:::return->removeNamedItem
IIOAttr#isId():::This method is new in the DOM L3 for Attr interface:::return
IIOMetadataNode#getNodeName():::Returns the node name associated with this node.:::return
IIOMetadataNode#getNodeValue():::Returns the value associated with this node.:::return
IIOMetadataNode#setNodeValue(String):::Sets the String value associated with this node.:::
IIOMetadataNode#getNodeType():::Returns the node type, which is always ELEMENT_NODE.:::return
IIOMetadataNode#getParentNode():::Returns the parent of this node:::return
IIOMetadataNode#getChildNodes():::Returns a NodeList that contains all children of this node:::return
IIOMetadataNode#getFirstChild():::Returns the first child of this node, or null if the node has no children.:::return
IIOMetadataNode#getLastChild():::Returns the last child of this node, or null if the node has no children.:::return
IIOMetadataNode#getPreviousSibling():::Returns the previous sibling of this node, or null if this node has no previous sibling.:::return
IIOMetadataNode#getNextSibling():::Returns the next sibling of this node, or null if the node has no next sibling.:::return
IIOMetadataNode#getAttributes():::Returns a NamedNodeMap containing the attributes of this node.:::return->new->IIONamedNodeMap
IIOMetadataNode#getOwnerDocument():::Returns null, since IIOMetadataNodes do not belong to any Document.:::return
IIOMetadataNode#insertBefore(Node, Node):::Inserts the node newChild before the existing child node refChild:::if->throw->new->IllegalArgumentException->checkNode->checkNode->newChildNode->refChildNode->previous->next->if->else->if->if->if->return
IIOMetadataNode#replaceChild(Node, Node):::Replaces the child node oldChild with newChild in the list of children, and returns the oldChild node.:::if->throw->new->IllegalArgumentException->checkNode->checkNode->newChildNode->oldChildNode->previous->next->if->if->if->if->return
IIOMetadataNode#removeChild(Node):::Removes the child node indicated by oldChild from the list of children, and returns it.:::if->throw->new->IllegalArgumentException->checkNode->oldChildNode->previous->next->if->if->if->if->return
IIOMetadataNode#appendChild(Node):::Adds the node newChild to the end of the list of children of this node.:::if->throw->new->IllegalArgumentException->checkNode->return->insertBefore
IIOMetadataNode#hasChildNodes():::Returns true if this node has child nodes.:::return
IIOMetadataNode#cloneNode(boolean):::Returns a duplicate of this node:::newNode->new->IIOMetadataNode->newNode->getUserObject->setUserObject->if->for->child->return
IIOMetadataNode#normalize():::Does nothing, since IIOMetadataNodes do not contain Text children.:::
IIOMetadataNode#isSupported(String, String):::Returns false since DOM features are not supported.:::return
IIOMetadataNode#getNamespaceURI():::Returns null, since namespaces are not supported.:::return
IIOMetadataNode#getPrefix():::Returns null, since namespaces are not supported.:::return
IIOMetadataNode#setPrefix(String):::Does nothing, since namespaces are not supported.:::
IIOMetadataNode#getLocalName():::Equivalent to getNodeName.:::return
IIOMetadataNode#getTagName():::Equivalent to getNodeName.:::return
IIOMetadataNode#getAttribute(String):::Retrieves an attribute value by name.:::attr->getAttributeNode->if->return->return->attr->getValue
IIOMetadataNode#getAttributeNS(String, String):::Equivalent to getAttribute(localName).:::return->getAttribute
IIOMetadataNode#setAttributeNS(String, String, String):::Equivalent to setAttribute(qualifiedName, value).:::setAttribute
IIOMetadataNode#removeAttributeNS(String, String):::Equivalent to removeAttribute(localName).:::removeAttribute
IIOMetadataNode#getAttributeNodeNS(String, String):::Equivalent to getAttributeNode(localName).:::return->getAttributeNode
IIOMetadataNode#setAttributeNodeNS(Attr):::Equivalent to setAttributeNode(newAttr).:::return->setAttributeNode
IIOMetadataNode#getElementsByTagNameNS(String, String):::Equivalent to getElementsByTagName(localName).:::return->getElementsByTagName
IIOMetadataNode#hasAttributeNS(String, String):::Equivalent to hasAttribute(localName).:::return->hasAttribute
IIOMetadataNode#getUserObject():::Returns the Object value associated with this node.:::return
IIOMetadataNode#setUserObject(Object):::Sets the value associated with this node.:::
IIOMetadataNode#setIdAttribute(String, boolean):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#setIdAttributeNS(String, String, boolean):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#setIdAttributeNode(Attr, boolean):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#getSchemaTypeInfo():::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#setUserData(String, Object, UserDataHandler):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#getUserData(String):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#getFeature(String, String):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#isSameNode(Node):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#isEqualNode(Node):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#lookupNamespaceURI(String):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#isDefaultNamespace(String):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#lookupPrefix(String):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#getTextContent():::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#setTextContent(String):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#compareDocumentPosition(Node):::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException
IIOMetadataNode#getBaseURI():::This DOM Level 3 method is not supported for IIOMetadataNode and will throw a DOMException.:::throw->new->DOMException

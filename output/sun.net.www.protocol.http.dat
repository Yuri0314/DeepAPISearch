sun.net.www.protocol.http.AuthCache#put(String, AuthCacheValue)->void:::Put an entry in the cache
sun.net.www.protocol.http.AuthCache#get(String, String)->AuthCacheValue:::Get an entry from the cache based on pkey as described above, but also using a pathname (skey) and the cache must return an entry if skey is a sub-path of the AuthCacheValue.path field.
sun.net.www.protocol.http.AuthCache#remove(String, AuthCacheValue)->void:::remove the entry from the cache whose pkey is specified and whose path is equal to entry.path
sun.net.www.protocol.http.AuthCacheImpl#setMap(HashMap>)->void::: auth cache impl set map
sun.net.www.protocol.http.AuthCacheImpl#put(String, AuthCacheValue)->void::: auth cache impl put
sun.net.www.protocol.http.AuthCacheImpl#get(String, String)->AuthCacheValue::: auth cache impl get
sun.net.www.protocol.http.AuthCacheImpl#remove(String, AuthCacheValue)->void::: auth cache impl remove
sun.net.www.protocol.http.AuthCacheValue#setAuthCache(AuthCache)->void::: auth cache value set auth cache
sun.net.www.protocol.http.AuthCacheValue#getAuthType()->Type:::Proxy or Server
sun.net.www.protocol.http.AuthCacheValue#getAuthScheme()->AuthScheme:::Authentication scheme
sun.net.www.protocol.http.AuthCacheValue#getHost()->String:::name of server/proxy
sun.net.www.protocol.http.AuthCacheValue#getPort()->int:::portnumber of server/proxy
sun.net.www.protocol.http.AuthCacheValue#getRealm()->String:::realm of authentication if known
sun.net.www.protocol.http.AuthCacheValue#getPath()->String:::root path of realm or the request path if the root is not known yet.
sun.net.www.protocol.http.AuthCacheValue#getProtocolScheme()->String:::returns http or https
sun.net.www.protocol.http.AuthCacheValue#credentials()->PasswordAuthentication:::the credentials associated with this authentication
sun.net.www.protocol.http.AuthenticationHeader#toString()->String::: authentication header to string
sun.net.www.protocol.http.AuthenticationHeader#getHttpCallerInfo()->HttpCallerInfo::: authentication header get http caller info
sun.net.www.protocol.http.AuthenticationHeader#headerParser()->HeaderParser:::return a header parser containing the preferred authentication scheme (only)
sun.net.www.protocol.http.AuthenticationHeader#scheme()->String:::return the name of the preferred scheme
sun.net.www.protocol.http.AuthenticationHeader#raw()->String::: authentication header raw
sun.net.www.protocol.http.AuthenticationHeader#isPresent()->boolean:::returns true is the header exists and contains a recognised scheme
sun.net.www.protocol.http.AuthenticationInfo#credentials()->PasswordAuthentication::: authentication info credentials
sun.net.www.protocol.http.AuthenticationInfo#getAuthType()->AuthCacheValue.Type::: authentication info get auth type
sun.net.www.protocol.http.AuthenticationInfo#getAuthScheme()->AuthScheme::: authentication info get auth scheme
sun.net.www.protocol.http.AuthenticationInfo#getHost()->String::: authentication info get host
sun.net.www.protocol.http.AuthenticationInfo#getPort()->int::: authentication info get port
sun.net.www.protocol.http.AuthenticationInfo#getRealm()->String::: authentication info get realm
sun.net.www.protocol.http.AuthenticationInfo#getPath()->String::: authentication info get path
sun.net.www.protocol.http.AuthenticationInfo#getProtocolScheme()->String::: authentication info get protocol scheme
sun.net.www.protocol.http.AuthenticationInfo#useAuthCache()->boolean:::Whether we should cache this instance in the AuthCache
sun.net.www.protocol.http.AuthenticationInfo#clone()->Object::: authentication info clone
sun.net.www.protocol.http.AuthenticationInfo#getAuthenticatorKey()->String:::The java.net.Authenticator#getKey(java.net.Authenticator) key of the authenticator that was used to obtain the credentials.
sun.net.www.protocol.http.AuthenticationInfo#reducePath(String)->String::: authentication info reduce path
sun.net.www.protocol.http.AuthenticationInfo#getServerAuth(URL, String)->AuthenticationInfo:::Returns info for the URL, for an HTTP server auth
sun.net.www.protocol.http.AuthenticationInfo#getServerAuthKey(URL, String, AuthScheme, String)->String:::Returns info for the URL, for an HTTP server auth
sun.net.www.protocol.http.AuthenticationInfo#getServerAuth(String)->AuthenticationInfo::: authentication info get server auth
sun.net.www.protocol.http.AuthenticationInfo#getAuth(String, URL)->AuthenticationInfo:::Return the AuthenticationInfo object from the cache if it's path is a substring of the supplied URLs path.
sun.net.www.protocol.http.AuthenticationInfo#getProxyAuth(String, int, String)->AuthenticationInfo:::Returns a firewall authentication, for the given host/port
sun.net.www.protocol.http.AuthenticationInfo#getProxyAuthKey(String, int, String, AuthScheme, String)->String:::Returns a firewall authentication, for the given host/port and realm
sun.net.www.protocol.http.AuthenticationInfo#getProxyAuth(String)->AuthenticationInfo::: authentication info get proxy auth
sun.net.www.protocol.http.AuthenticationInfo#addToCache()->void:::Add this authentication to the cache
sun.net.www.protocol.http.AuthenticationInfo#endAuthRequest(String)->void::: authentication info end auth request
sun.net.www.protocol.http.AuthenticationInfo#removeFromCache()->void:::Remove this authentication from the cache
sun.net.www.protocol.http.AuthenticationInfo#supportsPreemptiveAuthorization()->boolean::: authentication info supports preemptive authorization
sun.net.www.protocol.http.AuthenticationInfo#getHeaderName()->String::: authentication info get header name
sun.net.www.protocol.http.AuthenticationInfo#getHeaderValue(URL, String)->String:::Calculates and returns the authentication header value based on the stored authentication parameters
sun.net.www.protocol.http.AuthenticationInfo#setHeaders(HttpURLConnection, HeaderParser, String)->boolean:::Set header(s) on the given connection
sun.net.www.protocol.http.AuthenticationInfo#isAuthorizationStale(String)->boolean:::Check if the header indicates that the current auth
sun.net.www.protocol.http.AuthenticationInfo#cacheKey(boolean)->String:::Give a key for hash table lookups.
sun.net.www.protocol.http.AuthenticatorKeys#computeKey(Authenticator)->String::: authenticator keys compute key
sun.net.www.protocol.http.AuthenticatorKeys#getKey(Authenticator)->String:::Returns a key for the given authenticator.
sun.net.www.protocol.http.AuthenticatorKeys.AuthenticatorKeyAccess#getKey(Authenticator)->String::: authenticator key access get key
sun.net.www.protocol.http.AuthenticatorKeys#setAuthenticatorKeyAccess(AuthenticatorKeyAccess)->void::: authenticator keys set authenticator key access
sun.net.www.protocol.http.BasicAuthentication#supportsPreemptiveAuthorization()->boolean::: basic authentication supports preemptive authorization
sun.net.www.protocol.http.BasicAuthentication#setHeaders(HttpURLConnection, HeaderParser, String)->boolean:::Set header(s) on the given connection
sun.net.www.protocol.http.BasicAuthentication#getHeaderValue(URL, String)->String::: basic authentication get header value
sun.net.www.protocol.http.BasicAuthentication#isAuthorizationStale(String)->boolean:::For Basic Authentication, the security parameters can never be stale
sun.net.www.protocol.http.BasicAuthentication#getRootPath(String, String)->String::: basic authentication get root path
sun.net.www.protocol.http.DigestAuthentication.Parameters#authQop()->boolean::: parameters auth qop
sun.net.www.protocol.http.DigestAuthentication.Parameters#incrementNC()->void::: parameters increment c
sun.net.www.protocol.http.DigestAuthentication.Parameters#getNCCount()->int::: parameters get count
sun.net.www.protocol.http.DigestAuthentication.Parameters#getCnonce()->String::: parameters get cnonce
sun.net.www.protocol.http.DigestAuthentication.Parameters#setNewCnonce()->void::: parameters set new cnonce
sun.net.www.protocol.http.DigestAuthentication.Parameters#setQop(String)->void::: parameters set qop
sun.net.www.protocol.http.DigestAuthentication.Parameters#getOpaque()->String::: parameters get opaque
sun.net.www.protocol.http.DigestAuthentication.Parameters#setOpaque(String)->void::: parameters set opaque
sun.net.www.protocol.http.DigestAuthentication.Parameters#getNonce()->String::: parameters get nonce
sun.net.www.protocol.http.DigestAuthentication.Parameters#setNonce(String)->void::: parameters set nonce
sun.net.www.protocol.http.DigestAuthentication.Parameters#getCachedHA1()->String::: parameters get cached a1
sun.net.www.protocol.http.DigestAuthentication.Parameters#setCachedHA1(String)->void::: parameters set cached a1
sun.net.www.protocol.http.DigestAuthentication.Parameters#getAlgorithm()->String::: parameters get algorithm
sun.net.www.protocol.http.DigestAuthentication.Parameters#setAlgorithm(String)->void::: parameters set algorithm
sun.net.www.protocol.http.DigestAuthentication#supportsPreemptiveAuthorization()->boolean::: digest authentication supports preemptive authorization
sun.net.www.protocol.http.DigestAuthentication#getHeaderValue(URL, String)->String:::Recalculates the request-digest and returns it
sun.net.www.protocol.http.DigestAuthentication#getHeaderValue(String, String)->String:::Recalculates the request-digest and returns it
sun.net.www.protocol.http.DigestAuthentication#isAuthorizationStale(String)->boolean:::Check if the header indicates that the current auth
sun.net.www.protocol.http.DigestAuthentication#setHeaders(HttpURLConnection, HeaderParser, String)->boolean:::Set header(s) on the given connection.
sun.net.www.protocol.http.DigestAuthentication#checkResponse(String, String, URL)->void::: digest authentication check response
sun.net.www.protocol.http.DigestAuthentication#checkResponse(String, String, String)->void::: digest authentication check response
sun.net.www.protocol.http.Handler#getDefaultPort()->int::: handler get default port
sun.net.www.protocol.http.Handler#openConnection(URL)->java.net.URLConnection::: handler open connection
sun.net.www.protocol.http.Handler#openConnection(URL, Proxy)->java.net.URLConnection::: handler open connection
sun.net.www.protocol.http.HttpAuthenticator#schemeSupported(String)->boolean::: http authenticator scheme supported
sun.net.www.protocol.http.HttpAuthenticator#authString(URL, String, String)->String::: http authenticator auth string
sun.net.www.protocol.http.HttpURLConnection#getHttpLogger()->PlatformLogger::: http connection get http logger
sun.net.www.protocol.http.HttpURLConnection#authObj()->Object::: http connection auth obj
sun.net.www.protocol.http.HttpURLConnection#authObj(Object)->void::: http connection auth obj
sun.net.www.protocol.http.HttpURLConnection#setAuthenticator(Authenticator)->void::: http connection set authenticator
sun.net.www.protocol.http.HttpURLConnection#getAuthenticatorKey()->String::: http connection get authenticator key
sun.net.www.protocol.http.HttpURLConnection#setRequestMethod(String)->void::: http connection set request method
sun.net.www.protocol.http.HttpURLConnection#setNewClient(URL)->void:::Create a new HttpClient object, bypassing the cache of HTTP client objects/connections.
sun.net.www.protocol.http.HttpURLConnection#setNewClient(URL, boolean)->void:::Obtain a HttpsClient object
sun.net.www.protocol.http.HttpURLConnection#setProxiedClient(URL, String, int)->void:::Create a new HttpClient object, set up so that it uses per-instance proxying to the given HTTP proxy
sun.net.www.protocol.http.HttpURLConnection#setProxiedClient(URL, String, int, boolean)->void:::Obtain a HttpClient object, set up so that it uses per-instance proxying to the given HTTP proxy
sun.net.www.protocol.http.HttpURLConnection#proxiedConnect(URL, String, int, boolean)->void::: http connection proxied connect
sun.net.www.protocol.http.HttpURLConnection#setDefaultAuthenticator(HttpAuthenticator)->void::: http connection set default authenticator
sun.net.www.protocol.http.HttpURLConnection#openConnectionCheckRedirects(URLConnection)->InputStream:::opens a stream allowing redirects only to the same host.
sun.net.www.protocol.http.HttpURLConnection#connect()->void::: http connection connect
sun.net.www.protocol.http.HttpURLConnection#plainConnect()->void::: http connection plain connect
sun.net.www.protocol.http.HttpURLConnection#URLtoSocketPermission(URL)->SocketPermission::: if the caller has a URLPermission for connecting to the  given URL, then return a SocketPermission which permits  access to that destination
sun.net.www.protocol.http.HttpURLConnection#plainConnect0()->void::: http connection plain connect0
sun.net.www.protocol.http.HttpURLConnection#getNewHttpClient(URL, Proxy, int)->HttpClient::: http connection get new http client
sun.net.www.protocol.http.HttpURLConnection#getNewHttpClient(URL, Proxy, int, boolean)->HttpClient::: http connection get new http client
sun.net.www.protocol.http.HttpURLConnection#getOutputStream()->OutputStream::: http connection get output stream
sun.net.www.protocol.http.HttpURLConnection#streaming()->boolean::: http connection streaming
sun.net.www.protocol.http.HttpURLConnection#getInputStream()->InputStream::: http connection get input stream
sun.net.www.protocol.http.HttpURLConnection#getErrorStream()->InputStream::: http connection get error stream
sun.net.www.protocol.http.HttpURLConnection#tunnelState()->TunnelState:::Returns the tunnel state.
sun.net.www.protocol.http.HttpURLConnection#setTunnelState(TunnelState)->void:::Set the tunneling status.
sun.net.www.protocol.http.HttpURLConnection#doTunneling()->void:::establish a tunnel through proxy server
sun.net.www.protocol.http.HttpURLConnection#connectRequestURI(URL)->String::: http connection connect request i
sun.net.www.protocol.http.HttpURLConnection#getRequestURI()->String::: http connection get request i
sun.net.www.protocol.http.HttpURLConnection#disconnect()->void:::Disconnect from the server (public API)
sun.net.www.protocol.http.HttpURLConnection#usingProxy()->boolean::: http connection using proxy
sun.net.www.protocol.http.HttpURLConnection#getHeaderField(String)->String:::Gets a header field by name
sun.net.www.protocol.http.HttpURLConnection#getHeaderFields()->Map>:::Returns an unmodifiable Map of the header fields
sun.net.www.protocol.http.HttpURLConnection#getHeaderField(int)->String:::Gets a header field by index
sun.net.www.protocol.http.HttpURLConnection#getHeaderFieldKey(int)->String:::Gets a header field by index
sun.net.www.protocol.http.HttpURLConnection#setRequestProperty(String, String)->void:::Sets request property
sun.net.www.protocol.http.HttpURLConnection#getUserSetHeaders()->MessageHeader::: http connection get user set headers
sun.net.www.protocol.http.HttpURLConnection#addRequestProperty(String, String)->void:::Adds a general request property specified by a key-value pair
sun.net.www.protocol.http.HttpURLConnection#setAuthenticationProperty(String, String)->void::: http connection set authentication property
sun.net.www.protocol.http.HttpURLConnection#getRequestProperty(String)->String::: http connection get request property
sun.net.www.protocol.http.HttpURLConnection#getRequestProperties()->Map>:::Returns an unmodifiable Map of general request properties for this connection
sun.net.www.protocol.http.HttpURLConnection#setConnectTimeout(int)->void::: http connection set connect timeout
sun.net.www.protocol.http.HttpURLConnection#getConnectTimeout()->int:::Returns setting for connect timeout
sun.net.www.protocol.http.HttpURLConnection#setReadTimeout(int)->void:::Sets the read timeout to a specified timeout, in milliseconds
sun.net.www.protocol.http.HttpURLConnection#getReadTimeout()->int:::Returns setting for read timeout
sun.net.www.protocol.http.HttpURLConnection#getCookieHandler()->CookieHandler::: http connection get cookie handler
sun.net.www.protocol.http.HttpURLConnection#getMethod()->String::: http connection get method
sun.net.www.protocol.http.HttpURLConnection#stripIPv6ZoneId(String)->String:::Returns the given host, without the IPv6 Zone Id, if present
sun.net.www.protocol.http.HttpURLConnection.HttpInputStream#mark(int)->void:::Marks the current position in this input stream
sun.net.www.protocol.http.HttpURLConnection.HttpInputStream#reset()->void:::Repositions this stream to the position at the time the mark method was last called on this input stream
sun.net.www.protocol.http.HttpURLConnection.HttpInputStream#read()->int::: http input stream read
sun.net.www.protocol.http.HttpURLConnection.HttpInputStream#read(byte[])->int::: http input stream read
sun.net.www.protocol.http.HttpURLConnection.HttpInputStream#read(byte[], int, int)->int::: http input stream read
sun.net.www.protocol.http.HttpURLConnection.HttpInputStream#skip(long)->long::: http input stream skip
sun.net.www.protocol.http.HttpURLConnection.HttpInputStream#close()->void::: http input stream close
sun.net.www.protocol.http.HttpURLConnection.StreamingOutputStream#write(int)->void::: streaming output stream write
sun.net.www.protocol.http.HttpURLConnection.StreamingOutputStream#write(byte[])->void::: streaming output stream write
sun.net.www.protocol.http.HttpURLConnection.StreamingOutputStream#write(byte[], int, int)->void::: streaming output stream write
sun.net.www.protocol.http.HttpURLConnection.StreamingOutputStream#checkError()->void::: streaming output stream check error
sun.net.www.protocol.http.HttpURLConnection.StreamingOutputStream#writtenOK()->boolean::: streaming output stream written k
sun.net.www.protocol.http.HttpURLConnection.StreamingOutputStream#close()->void::: streaming output stream close
sun.net.www.protocol.http.HttpURLConnection.ErrorStream#getErrorStream(InputStream, long, HttpClient)->InputStream::: error stream get error stream
sun.net.www.protocol.http.HttpURLConnection.ErrorStream#available()->int::: error stream available
sun.net.www.protocol.http.HttpURLConnection.ErrorStream#read()->int::: error stream read
sun.net.www.protocol.http.HttpURLConnection.ErrorStream#read(byte[])->int::: error stream read
sun.net.www.protocol.http.HttpURLConnection.ErrorStream#read(byte[], int, int)->int::: error stream read
sun.net.www.protocol.http.HttpURLConnection.ErrorStream#close()->void::: error stream close
sun.net.www.protocol.http.EmptyInputStream#available()->int::: empty input stream available
sun.net.www.protocol.http.EmptyInputStream#read()->int::: empty input stream read
sun.net.www.protocol.http.NegotiateAuthentication#supportsPreemptiveAuthorization()->boolean::: negotiate authentication supports preemptive authorization
sun.net.www.protocol.http.NegotiateAuthentication#isSupported(HttpCallerInfo)->boolean:::Find out if the HttpCallerInfo supports Negotiate protocol
sun.net.www.protocol.http.NegotiateAuthentication#useAuthCache()->boolean::: negotiate authentication use auth cache
sun.net.www.protocol.http.NegotiateAuthentication#getHeaderValue(URL, String)->String:::Not supported
sun.net.www.protocol.http.NegotiateAuthentication#isAuthorizationStale(String)->boolean:::Check if the header indicates that the current auth
sun.net.www.protocol.http.NegotiateAuthentication#setHeaders(HttpURLConnection, HeaderParser, String)->boolean:::Set header(s) on the given connection.
sun.net.www.protocol.http.Negotiator#getNegotiator(HttpCallerInfo)->Negotiator::: negotiator get negotiator
sun.net.www.protocol.http.Negotiator#firstToken()->byte[]::: negotiator first token
sun.net.www.protocol.http.Negotiator#nextToken(byte[])->byte[]::: negotiator next token
sun.net.www.protocol.http.NTLMAuthenticationProxy#create(boolean, URL, PasswordAuthentication, String)->AuthenticationInfo::: authentication proxy create
sun.net.www.protocol.http.NTLMAuthenticationProxy#create(boolean, String, int, PasswordAuthentication, String)->AuthenticationInfo::: authentication proxy create
sun.net.www.protocol.http.NTLMAuthenticationProxy#isTrustedSite(URL)->boolean::: authentication proxy is trusted site
sun.net.www.protocol.http.NTLMAuthenticationProxy#finest(Exception)->void::: authentication proxy finest

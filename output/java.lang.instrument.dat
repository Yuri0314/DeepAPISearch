ClassDefinition#getDefinitionClass():::Returns the class.:::return
ClassDefinition#getDefinitionClassFile():::Returns the array of bytes that contains the new class file.:::return
ClassFileTransformer#transform(ClassLoader, String, Class, ProtectionDomain, byte[]):::Transforms the given class file and returns a new replacement class file:::return
ClassFileTransformer#transform(Module, ClassLoader, String, Class, ProtectionDomain, byte[]):::Transforms the given class file and returns a new replacement class file.:::return->transform
Instrumentation#addTransformer(ClassFileTransformer, boolean):::Registers the supplied transformer:::
Instrumentation#addTransformer(ClassFileTransformer):::Registers the supplied transformer:::
Instrumentation#removeTransformer(ClassFileTransformer):::Unregisters the supplied transformer:::
Instrumentation#isRetransformClassesSupported():::Returns whether or not the current JVM configuration supports retransformation of classes:::
Instrumentation#retransformClasses(Class...):::Retransform the supplied set of classes:::
Instrumentation#isRedefineClassesSupported():::Returns whether or not the current JVM configuration supports redefinition of classes:::
Instrumentation#redefineClasses(ClassDefinition...):::Redefine the supplied set of classes using the supplied class files:::
Instrumentation#isModifiableClass(Class):::Tests whether a class is modifiable by #retransformClasses retransformation or #redefineClasses redefinition:::
Instrumentation#getAllLoadedClasses():::Returns an array of all classes currently loaded by the JVM.:::
Instrumentation#getInitiatedClasses(ClassLoader):::Returns an array of all classes for which loader is an initiating loader:::
Instrumentation#getObjectSize(Object):::Returns an implementation-specific approximation of the amount of storage consumed by the specified object:::
Instrumentation#appendToBootstrapClassLoaderSearch(JarFile):::Specifies a JAR file with instrumentation classes to be defined by the bootstrap class loader:::
Instrumentation#appendToSystemClassLoaderSearch(JarFile):::Specifies a JAR file with instrumentation classes to be defined by the system class loader:::
Instrumentation#isNativeMethodPrefixSupported():::Returns whether the current JVM configuration supports #setNativeMethodPrefix(ClassFileTransformer,String) setting a native method prefix:::
Instrumentation#setNativeMethodPrefix(ClassFileTransformer, String):::This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name:::
Instrumentation#redefineModule(Module, Set, Map>, Map>, Set>, Map, List>>):::Redefine a module to expand the set of modules that it reads, the set of packages that it exports or opens, or the services that it uses or provides:::
Instrumentation#isModifiableModule(Module):::Tests whether a module can be modified with #redefineModule redefineModule:::

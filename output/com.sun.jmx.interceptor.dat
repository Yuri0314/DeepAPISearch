DefaultMBeanServerInterceptor#createMBean(String, ObjectName)::: default bean server interceptor create bean:::return->createMBean
DefaultMBeanServerInterceptor#createMBean(String, ObjectName, ObjectName)::: default bean server interceptor create bean:::return->createMBean
DefaultMBeanServerInterceptor#createMBean(String, ObjectName, Object[], String[])::: default bean server interceptor create bean:::try->return->createMBean->catch->throw->EnvHelp->new->IllegalArgumentException->initCause->finally
DefaultMBeanServerInterceptor#createMBean(String, ObjectName, ObjectName, Object[], String[])::: default bean server interceptor create bean:::return->createMBean
DefaultMBeanServerInterceptor#createMBean(String, ObjectName, ObjectName, boolean, Object[], String[])::: default bean server interceptor create bean:::theClass->if->wrapped->new->IllegalArgumentException->throw->new->RuntimeOperationsException->if->if->name->isPattern->wrapped->name->toString->new->IllegalArgumentException->msg->throw->new->RuntimeOperationsException->nonDefaultDomain->checkMBeanPermission->checkMBeanPermission->if->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->instantiator->findClassWithDefaultLoaderRepository->else->if->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->instantiator->server->getClass->getClassLoader->findClass->else->nonDefaultDomain->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->instantiator->findClass->checkMBeanTrustPermission->Introspector->testCreation->Introspector->checkCompliance->moi->instantiator->server->getClass->getClassLoader->instantiate->infoClassName->getNewMBeanClassName->return->registerObject
DefaultMBeanServerInterceptor#registerMBean(Object, ObjectName)::: default bean server interceptor register bean:::theClass->object->getClass->Introspector->checkCompliance->infoClassName->getNewMBeanClassName->checkMBeanPermission->checkMBeanTrustPermission->return->registerObject
DefaultMBeanServerInterceptor#getNewMBeanClassName(Object)::: default bean server interceptor get new bean class name:::if->mbean->name->try->mbean->getMBeanInfo->getClassName->catch->ncmbe->new->NotCompliantMBeanException->ncmbe->initCause->throw->finally->if->msg->throw->new->NotCompliantMBeanException->return->else->return->mbeanToRegister->getClass->getName
DefaultMBeanServerInterceptor#unregisterMBean(ObjectName)::: default bean server interceptor unregister bean:::if->wrapped->new->IllegalArgumentException->throw->new->RuntimeOperationsException->nonDefaultDomain->synchronized->while->beingUnregistered->contains->try->beingUnregistered->wait->catch->throw->e->toString->new->MBeanRegistrationException->finally->beingUnregistered->add->try->exclusiveUnregisterMBean->catch->finally->synchronized->beingUnregistered->remove->beingUnregistered->notifyAll
DefaultMBeanServerInterceptor#exclusiveUnregisterMBean(ObjectName)::: default bean server interceptor exclusive unregister bean:::instance->getMBean->checkMBeanPermission->if->preDeregisterInvoke->resource->getResource->context->unregisterFromRepository->try->if->postDeregisterInvoke->catch->finally->context->done
DefaultMBeanServerInterceptor#getObjectInstance(ObjectName)::: default bean server interceptor get object instance:::nonDefaultDomain->instance->getMBean->checkMBeanPermission->className->getClassName->return->new->ObjectInstance
DefaultMBeanServerInterceptor#queryMBeans(ObjectName, QueryExp)::: default bean server interceptor query beans:::sm->System->getSecurityManager->if->checkMBeanPermission->list->queryMBeansImpl->allowedList->list->size->new->HashSet<ObjectInstance>->foreach->try->oi->getClassName->oi->getObjectName->checkMBeanPermission->allowedList->add->catch->finally->return->filterListOfObjectInstances->else->return->queryMBeansImpl
DefaultMBeanServerInterceptor#queryMBeansImpl(ObjectName, QueryExp)::: default bean server interceptor query beans impl:::list->repository->query->return->objectInstancesFromFilteredNamedObjects
DefaultMBeanServerInterceptor#queryNames(ObjectName, QueryExp)::: default bean server interceptor query names:::queryList->sm->System->getSecurityManager->if->checkMBeanPermission->list->queryMBeansImpl->allowedList->list->size->new->HashSet<ObjectInstance>->foreach->try->oi->getClassName->oi->getObjectName->checkMBeanPermission->allowedList->add->catch->finally->queryObjectInstanceList->filterListOfObjectInstances->queryObjectInstanceList->size->new->HashSet<ObjectName>->foreach->queryList->oi->getObjectName->add->else->queryNamesImpl->return
DefaultMBeanServerInterceptor#queryNamesImpl(ObjectName, QueryExp)::: default bean server interceptor query names impl:::list->repository->query->return->objectNamesFromFilteredNamedObjects
DefaultMBeanServerInterceptor#isRegistered(ObjectName)::: default bean server interceptor is registered:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->nonDefaultDomain->return->repository->contains
DefaultMBeanServerInterceptor#getDomains()::: default bean server interceptor get domains:::sm->System->getSecurityManager->if->checkMBeanPermission->domains->repository->getDomains->result->new->ArrayList<String>->for->i->return->result->result->size->new->StringArr->toArray->else->return->repository->getDomains
DefaultMBeanServerInterceptor#getMBeanCount()::: default bean server interceptor get bean count:::return->repository->getCount
DefaultMBeanServerInterceptor#getAttribute(ObjectName, String)::: default bean server interceptor get attribute:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->nonDefaultDomain->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->instance->getMBean->checkMBeanPermission->try->return->instance->getAttribute->catch->throw->rethrowMaybeMBeanException->throw->new->AssertionError->finally
DefaultMBeanServerInterceptor#getAttributes(ObjectName, String[])::: default bean server interceptor get attributes:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->nonDefaultDomain->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->instance->getMBean->allowedAttributes->sm->System->getSecurityManager->if->else->classname->getClassName->checkMBeanPermission->allowedList->new->ArrayList<String>->foreach->try->checkMBeanPermission->allowedList->add->catch->finally->allowedList->allowedList->size->new->StringArr->toArray->try->return->instance->getAttributes->catch->rethrow->throw->new->AssertionError->finally
DefaultMBeanServerInterceptor#setAttribute(ObjectName, Attribute)::: default bean server interceptor set attribute:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->nonDefaultDomain->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->attribute->getName->log->instance->getMBean->attribute->getName->checkMBeanPermission->try->instance->setAttribute->catch->throw->throw->rethrowMaybeMBeanException->throw->new->AssertionError->finally
DefaultMBeanServerInterceptor#setAttributes(ObjectName, AttributeList)::: default bean server interceptor set attributes:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->nonDefaultDomain->instance->getMBean->allowedAttributes->sm->System->getSecurityManager->if->else->classname->getClassName->checkMBeanPermission->attributes->size->new->AttributeList->foreach->attributes->asList->try->attribute->getName->checkMBeanPermission->allowedAttributes->add->catch->finally->try->return->instance->setAttributes->catch->rethrow->throw->new->AssertionError->finally
DefaultMBeanServerInterceptor#invoke(ObjectName, String, Object[], String[])::: default bean server interceptor invoke:::nonDefaultDomain->instance->getMBean->checkMBeanPermission->try->return->instance->invoke->catch->rethrowMaybeMBeanException->throw->new->AssertionError->finally
DefaultMBeanServerInterceptor#rethrow(Throwable)::: default bean server interceptor rethrow:::try->throw->catch->throw->throw->throw->throw->e->toString->new->RuntimeMBeanException->throw->e->toString->new->RuntimeErrorException->throw->new->RuntimeException->finally
DefaultMBeanServerInterceptor#rethrowMaybeMBeanException(Throwable)::: default bean server interceptor rethrow maybe bean exception:::if->throw->rethrow
DefaultMBeanServerInterceptor#registerObject(String, Object, ObjectName):::Register object in the repository, with the given name:::if->wrapped->new->IllegalArgumentException->throw->new->RuntimeOperationsException->mbean->Introspector->makeDynamicMBean->return->registerDynamicMBean
DefaultMBeanServerInterceptor#registerDynamicMBean(String, DynamicMBean, ObjectName)::: default bean server interceptor register dynamic bean:::nonDefaultDomain->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->logicalName->preRegister->registered->registerFailed->context->try->if->try->preRegister2->catch->if->throw->if->throw->throw->new->RuntimeException->finally->if->ObjectName->nonDefaultDomain->getInstance->checkMBeanPermission->if->wrapped->new->IllegalArgumentException->throw->new->RuntimeOperationsException->resource->getResource->registerWithRepository->catch->finally->try->postRegister->catch->finally->if->context->done->return->new->ObjectInstance
DefaultMBeanServerInterceptor#throwMBeanRegistrationException(Throwable, String)::: default bean server interceptor throw bean registration exception:::if->throw->new->RuntimeMBeanException->else->if->throw->new->RuntimeErrorException->else->if->throw->else->if->throw->new->MBeanRegistrationException->else->throw->new->RuntimeException
DefaultMBeanServerInterceptor#preRegister(DynamicMBean, MBeanServer, ObjectName)::: default bean server interceptor pre register:::newName->try->if->preRegister->catch->throwMBeanRegistrationException->finally->if->return->else->return
DefaultMBeanServerInterceptor#postRegister(ObjectName, DynamicMBean, boolean, boolean)::: default bean server interceptor post register:::if->registerFailed->try->if->postRegister->catch->MBEANSERVER_LOGGER->log->throw->new->RuntimeMBeanException->MBEANSERVER_LOGGER->log->throw->new->RuntimeErrorException->finally
DefaultMBeanServerInterceptor#preDeregisterInvoke(MBeanRegistration)::: default bean server interceptor pre deregister invoke:::try->moi->preDeregister->catch->throwMBeanRegistrationException->finally
DefaultMBeanServerInterceptor#postDeregisterInvoke(ObjectName, MBeanRegistration)::: default bean server interceptor post deregister invoke:::try->moi->postDeregister->catch->MBEANSERVER_LOGGER->log->throw->new->RuntimeMBeanException->MBEANSERVER_LOGGER->log->throw->new->RuntimeErrorException->finally
DefaultMBeanServerInterceptor#getMBean(ObjectName):::Gets a specific MBean controlled by the DefaultMBeanServerInterceptor:::if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->obj->repository->retrieve->if->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->throw->name->toString->new->InstanceNotFoundException->return
DefaultMBeanServerInterceptor#getResource(DynamicMBean)::: default bean server interceptor get resource:::if->return->getResource->else->return
DefaultMBeanServerInterceptor#nonDefaultDomain(ObjectName)::: default bean server interceptor non default domain:::if->name->getDomain->length->return->completeName->return->Util->newObjectName
DefaultMBeanServerInterceptor#getDefaultDomain()::: default bean server interceptor get default domain:::return
DefaultMBeanServerInterceptor#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)::: default bean server interceptor add notification listener:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->instance->getMBean->checkMBeanPermission->broadcaster->getNotificationBroadcaster->if->throw->new->IllegalArgumentException->new->RuntimeOperationsException->listenerWrapper->getListenerWrapper->broadcaster->addNotificationListener
DefaultMBeanServerInterceptor#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)::: default bean server interceptor add notification listener:::instance->getMBean->resource->getResource->if->throw->listener->getCanonicalName->new->IllegalArgumentException->listener->getCanonicalName->new->RuntimeOperationsException->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->server->addNotificationListener
DefaultMBeanServerInterceptor#removeNotificationListener(ObjectName, NotificationListener)::: default bean server interceptor remove notification listener:::removeNotificationListener
DefaultMBeanServerInterceptor#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)::: default bean server interceptor remove notification listener:::removeNotificationListener
DefaultMBeanServerInterceptor#removeNotificationListener(ObjectName, ObjectName)::: default bean server interceptor remove notification listener:::instance->getListener->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->server->removeNotificationListener
DefaultMBeanServerInterceptor#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)::: default bean server interceptor remove notification listener:::instance->getListener->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->server->removeNotificationListener
DefaultMBeanServerInterceptor#getListener(ObjectName)::: default bean server interceptor get listener:::instance->try->getMBean->catch->throw->EnvHelp->e->getMessage->new->ListenerNotFoundException->initCause->finally->resource->getResource->if->exc->listener->getCanonicalName->new->IllegalArgumentException->msg->listener->getCanonicalName->getName->throw->new->RuntimeOperationsException->return
DefaultMBeanServerInterceptor#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object, boolean)::: default bean server interceptor remove notification listener:::if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->instance->getMBean->checkMBeanPermission->reqClass->broadcaster->getNotificationBroadcaster->listenerWrapper->getListenerWrapper->if->throw->new->ListenerNotFoundException->if->broadcaster->removeNotificationListener->else->emitter->emitter->removeNotificationListener
DefaultMBeanServerInterceptor#getNotificationBroadcaster(ObjectName, Object, Class)::: default bean server interceptor get notification broadcaster:::if->reqClass->isInstance->return->reqClass->cast->if->getResource->if->reqClass->isInstance->return->reqClass->cast->exc->name->getCanonicalName->new->IllegalArgumentException->msg->name->getCanonicalName->reqClass->getName->throw->new->RuntimeOperationsException
DefaultMBeanServerInterceptor#getMBeanInfo(ObjectName)::: default bean server interceptor get bean info:::moi->getMBean->mbi->try->moi->getMBeanInfo->catch->throw->throw->throw->new->RuntimeMBeanException->throw->new->RuntimeErrorException->finally->if->throw->new->JMRuntimeException->mbi->getClassName->checkMBeanPermission->return
DefaultMBeanServerInterceptor#isInstanceOf(ObjectName, String)::: default bean server interceptor is instance of:::instance->getMBean->checkMBeanPermission->try->resource->getResource->resourceClassName->getClassName->resource->getClass->getName->if->resourceClassName->equals->return->cl->resource->getClass->getClassLoader->classNameClass->Class->forName->if->classNameClass->isInstance->return->resourceClass->Class->forName->return->classNameClass->isAssignableFrom->catch->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->return->finally
DefaultMBeanServerInterceptor#getClassLoaderFor(ObjectName):::Return the java.lang.ClassLoader that was used for loading the class of the named MBean.:::instance->getMBean->checkMBeanPermission->return->getResource->getClass->getClassLoader
DefaultMBeanServerInterceptor#getClassLoader(ObjectName):::Return the named java.lang.ClassLoader.:::if->checkMBeanPermission->return->server->getClass->getClassLoader->instance->getMBean->checkMBeanPermission->resource->getResource->if->throw->loaderName->toString->new->InstanceNotFoundException->return
DefaultMBeanServerInterceptor#sendNotification(String, ObjectName):::Sends an MBeanServerNotifications with the specified type for the MBean with the specified ObjectName:::notif->new->MBeanServerNotification->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->delegate->sendNotification
DefaultMBeanServerInterceptor#objectNamesFromFilteredNamedObjects(Set, QueryExp):::Applies the specified queries to the set of NamedObjects.:::result->new->HashSet<ObjectName>->if->foreach->result->no->getName->add->else->oldServer->QueryEval->getMBeanServer->query->setMBeanServer->try->foreach->res->try->query->no->getName->apply->catch->finally->if->result->no->getName->add->catch->finally->query->setMBeanServer->return
DefaultMBeanServerInterceptor#objectInstancesFromFilteredNamedObjects(Set, QueryExp):::Applies the specified queries to the set of NamedObjects.:::result->new->HashSet<ObjectInstance>->if->foreach->obj->no->getObject->className->safeGetClassName->result->no->getName->new->ObjectInstance->add->else->oldServer->QueryEval->getMBeanServer->query->setMBeanServer->try->foreach->obj->no->getObject->res->try->query->no->getName->apply->catch->finally->if->className->safeGetClassName->result->no->getName->new->ObjectInstance->add->catch->finally->query->setMBeanServer->return
DefaultMBeanServerInterceptor#safeGetClassName(DynamicMBean)::: default bean server interceptor safe get class name:::try->return->getClassName->catch->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->log->return->finally
DefaultMBeanServerInterceptor#filterListOfObjectInstances(Set, QueryExp):::Applies the specified queries to the set of ObjectInstances.:::if->return->else->result->new->HashSet<ObjectInstance>->foreach->res->oldServer->QueryEval->getMBeanServer->query->setMBeanServer->try->query->oi->getObjectName->apply->catch->finally->query->setMBeanServer->if->result->add->return
DefaultMBeanServerInterceptor#getListenerWrapper(NotificationListener, ObjectName, DynamicMBean, boolean)::: default bean server interceptor get listener wrapper:::resource->getResource->wrapper->new->ListenerWrapper->synchronized->ref->listenerWrappers->get->if->existing->ref->get->if->return->if->new->WeakReference<ListenerWrapper>->listenerWrappers->put->return->else->return
DefaultMBeanServerInterceptor#instantiate(String)::: default bean server interceptor instantiate:::throw->new->UnsupportedOperationException
DefaultMBeanServerInterceptor#instantiate(String, ObjectName)::: default bean server interceptor instantiate:::throw->new->UnsupportedOperationException
DefaultMBeanServerInterceptor#instantiate(String, Object[], String[])::: default bean server interceptor instantiate:::throw->new->UnsupportedOperationException
DefaultMBeanServerInterceptor#instantiate(String, ObjectName, Object[], String[])::: default bean server interceptor instantiate:::throw->new->UnsupportedOperationException
DefaultMBeanServerInterceptor#getClassLoaderRepository()::: default bean server interceptor get class loader repository:::throw->new->UnsupportedOperationException
DefaultMBeanServerInterceptor.ListenerWrapper#handleNotification(Notification, Object)::: listener wrapper handle notification:::if->if->notification->getSource->notification->setSource->listener->handleNotification
DefaultMBeanServerInterceptor.ListenerWrapper#equals(Object)::: listener wrapper equals:::if->return->w->return->equals
DefaultMBeanServerInterceptor.ListenerWrapper#hashCode()::: listener wrapper hash code:::return->System->identityHashCode->System->identityHashCode
DefaultMBeanServerInterceptor#getClassName(DynamicMBean)::: default bean server interceptor get class name:::if->return->getClassName->else->return->mbean->getMBeanInfo->getClassName
DefaultMBeanServerInterceptor#checkMBeanPermission(DynamicMBean, String, ObjectName, String)::: default bean server interceptor check bean permission:::sm->System->getSecurityManager->if->safeGetClassName->checkMBeanPermission
DefaultMBeanServerInterceptor#checkMBeanPermission(String, String, ObjectName, String)::: default bean server interceptor check bean permission:::sm->System->getSecurityManager->if->perm->new->MBeanPermission->sm->checkPermission
DefaultMBeanServerInterceptor#checkMBeanTrustPermission(Class)::: default bean server interceptor check bean trust permission:::sm->System->getSecurityManager->if->perm->new->MBeanTrustPermission->act->new->PrivilegedAction<ProtectionDomain>->pd->AccessController->doPrivileged->acc->new->ProtectionDomainArr->new->AccessControlContext->sm->checkPermission
DefaultMBeanServerInterceptor.ResourceContext#done()::: resource context done:::
DefaultMBeanServerInterceptor#registerWithRepository(Object, DynamicMBean, ObjectName):::Adds a MBean in the repository, sends MBeanServerNotification.REGISTRATION_NOTIFICATION, returns ResourceContext for special resources such as ClassLoaders or JMXNamespaces:::context->makeResourceContextFor->repository->addMBean->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->logicalName->getCanonicalName->log->sendNotification->return
DefaultMBeanServerInterceptor#unregisterFromRepository(Object, DynamicMBean, ObjectName):::Removes a MBean in the repository, sends MBeanServerNotification.UNREGISTRATION_NOTIFICATION, returns ResourceContext for special resources such as ClassLoaders or JMXNamespaces, or null:::context->makeResourceContextFor->repository->remove->if->MBEANSERVER_LOGGER->isLoggable->MBEANSERVER_LOGGER->logicalName->getCanonicalName->log->sendNotification->return
DefaultMBeanServerInterceptor#addClassLoader(ClassLoader, ObjectName):::Registers a ClassLoader with the CLR:::clr->getInstantiatorCLR->if->wrapped->new->IllegalArgumentException->throw->new->RuntimeOperationsException->clr->addClassLoader
DefaultMBeanServerInterceptor#removeClassLoader(ClassLoader, ObjectName):::Unregisters a ClassLoader from the CLR:::if->server->getClass->getClassLoader->clr->getInstantiatorCLR->if->clr->removeClassLoader
DefaultMBeanServerInterceptor#createClassLoaderContext(ClassLoader, ObjectName):::Creates a ResourceContext for a ClassLoader MBean:::return->new->ResourceContext
DefaultMBeanServerInterceptor#makeResourceContextFor(Object, ObjectName):::Creates a ResourceContext for the given resource:::if->return->createClassLoaderContext->return
DefaultMBeanServerInterceptor#getInstantiatorCLR()::: default bean server interceptor get instantiator r:::return->AccessController->new->PrivilegedAction<ModifiableClassLoaderRepository>->doPrivileged
MBeanServerInterceptor#instantiate(String):::This method should never be called:::
MBeanServerInterceptor#instantiate(String, ObjectName):::This method should never be called:::
MBeanServerInterceptor#instantiate(String, Object[], String[]):::This method should never be called:::
MBeanServerInterceptor#instantiate(String, ObjectName, Object[], String[]):::This method should never be called:::
MBeanServerInterceptor#getClassLoaderRepository():::This method should never be called:::

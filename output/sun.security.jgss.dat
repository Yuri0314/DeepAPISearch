GSSCredentialImpl#getRemainingLifetime():::Returns the remaining lifetime of this credential:::if->throw->new->IllegalStateException->tempKey->tempCred->tempLife->tempInitLife->tempAcceptLife->min->for->e->hashtable->keys->e->hasMoreElements->return
GSSCredentialImpl#getUsage():::Returns the usage mode for this credential:::if->throw->new->IllegalStateException->tempKey->initiate->accept->for->e->hashtable->keys->e->hasMoreElements->if->if->return->else->return->else->return
GSSCredentialImpl#hashCode():::Returns a hashcode value for this GSSCredential.:::if->throw->new->IllegalStateException->return
GSSCredentialImpl#getElement(Oid, boolean):::Returns the specified mechanism's credential-element.:::if->throw->new->IllegalStateException->key->element->if->new->SearchKey->hashtable->get->if->new->SearchKey->hashtable->get->if->elements->hashtable->entrySet->toArray->for->i->else->if->new->SearchKey->else->new->SearchKey->hashtable->get->if->new->SearchKey->hashtable->get->if->throw->getElementStr->new->GSSExceptionImpl->return
GSSExceptionImpl#getMessage():::Returns the message that was embedded in this object, otherwise it returns the default message that an org.ietf.jgss.GSSException generates.:::if->return->else->return->super->getMessage
GSSHeader#getOid():::Used to obtain the Oid stored in this GSSHeader instance.:::return
GSSHeader#getMechTokenLength():::Used to obtain the length of the mechanism specific token that will follow the encoding of this GSSHeader instance.:::return
GSSHeader#getLength():::Used to obtain the length of the encoding of this GSSHeader.:::lenField->return->getLenFieldSize
GSSHeader#getMaxMechTokenSize(ObjectIdentifier, int):::Used to determine what the maximum possible mechanism token size is if the complete GSSToken returned to the application (including a GSSHeader) is not to exceed some pre-determined value in size.:::mechOidBytesSize->try->temp->new->DerOutputStream->temp->putOID->temp->toByteArray->catch->finally->return
GSSHeader#encode(OutputStream):::Encodes this GSSHeader instance onto the provided OutputStream.:::retVal->os->write->length->putLength->os->write->return
GSSNameImpl#equals(GSSName):::This method may return false negatives:::if->this->isAnonymous->other->isAnonymous->return->if->return->if->return->gssManager->other->toString->other->getStringNameType->createName->equals->that->myElement->element->if->this->element->getMechanism->getElement->else->if->that->myElement->getMechanism->getElement->if->return->myElement->equals->if->if->equals->return->myBytes->bytes->try->getBytes->getBytes->catch->finally->return->Arrays->equals->return
GSSNameImpl#hashCode():::Returns a hashcode value for this GSSName.:::return
GSSNameImpl#export():::Returns a flat name representation for this object:::if->getElement->mechPortion->mechElement->export->oidBytes->oid->try->mechElement->getMechanism->toString->new->ObjectIdentifier->catch->throw->new->GSSExceptionImpl->finally->dout->new->DerOutputStream->try->dout->putOID->catch->throw->oid->toString->new->GSSExceptionImpl->finally->dout->toByteArray->retVal->new->byteArr->pos->System->arraycopy->System->arraycopy->return
GSSToken#writeLittleEndian(int, byte[]):::Copies an integer value to a byte array in little endian form.:::writeLittleEndian
GSSToken#writeLittleEndian(int, byte[], int):::Copies an integer value to a byte array in little endian form.:::
GSSToken#readLittleEndian(byte[], int, int):::Reads an integer value from a byte array in little endian form:::retVal->shifter->while->return
GSSToken#writeInt(int, OutputStream):::Writes a two byte integer value to a OutputStream.:::os->write->os->write
GSSToken#writeInt(int, byte[], int):::Writes a two byte integer value to a byte array.:::return
GSSToken#readInt(InputStream):::Reads a two byte integer value from an InputStream.:::return->is->read->is->read
GSSToken#readInt(byte[], int):::Reads a two byte integer value from a byte array.:::return
GSSToken#readFully(InputStream, byte[]):::Blocks till the required number of bytes have been read from the input stream.:::readFully
GSSToken#readFully(InputStream, byte[], int, int):::Blocks till the required number of bytes have been read from the input stream.:::temp->while->is->read->if->throw->new->EOFException
GSSUtil#getSubject(GSSName, GSSCredential):::Note: The current impl only works with Sun's impl of GSSName and GSSCredential since it depends on package private APIs.:::privCredentials->pubCredentials->new->HashSet<Object>->gssCredentials->krb5Principals->new->HashSet<KerberosPrincipal>->if->try->ne->getElement->krbName->ne->toString->if->getKrb5PrincipalName->getName->krbPrinc->new->KerberosPrincipal->krb5Principals->add->catch->debug->finally->if->getElements->gssCredentials->size->new->HashSet<Object>->populateCredentials->else->new->HashSet<Object>->debug->debug->debug->debug->return->new->Subject
GSSUtil#login(GSSCaller, Oid):::Authenticate using the login module from the specified configuration entry.:::cb->if->info->new->sun.net.www.protocol.http.spnego.NegotiateCallbackHandler->else->defaultHandler->getProperty->if->defaultHandler->length->else->new->ConsoleCallbackHandler->lc->new->LoginConfigImpl->new->LoginContext->lc->login->return->lc->getSubject
GSSUtil#useSubjectCredsOnly(GSSCaller):::Determines if the application doesn't mind if the mechanism obtains the required credentials from outside of the current Subject:::propValue->GetPropertyAction->privilegedGetProperty->if->return->equalsIgnoreCase->else->return->equalsIgnoreCase
GSSUtil#useMSInterop():::Determines the SPNEGO interoperability mode with Microsoft; by default it is set to true:::propValue->AccessController->new->GetPropertyAction->doPrivileged->return->propValue->equalsIgnoreCase
GSSUtil#searchSubject(GSSNameSpi, Oid, boolean, Class):::Searches the private credentials of current Subject with the specified criteria and returns the matching GSSCredentialSpi object out of Sun's impl of GSSCredential:::getMechStr->name->toString->credCls->getName->debug->acc->AccessController->getContext->try->creds->AccessController->new->PrivilegedExceptionAction<Vector<T>>->doPrivileged->return->catch->debug->if->pae->printStackTrace->return->finally
JgssExtender#getExtender():::Gets "the extender":::return
JgssExtender#setExtender(JgssExtender):::Set "the extender" so that GSSManager can create extended objects.:::
JgssExtender#wrap(GSSCredential):::Wraps a plain GSSCredential object into an extended type.:::return
JgssExtender#wrap(GSSContext):::Wraps a plain GSSContext object into an extended type.:::return
ProviderList#getMechFactory(Oid, Provider):::Obtains a MechanismFactory for a given mechanism:::if->if->className->entry->list->preferences->iterator->while->list->hasNext->list->next->if->entry->impliesMechanism->retVal->getMechFactory->if->return->throw->new->GSSExceptionImpl->else->entry->new->PreferencesEntry->return->getMechFactory
TokenTracker#getProps(int, MessageProp):::Sets the sequencing and replay information for the given token number:::gap->old->unsequenced->duplicate->pos->getIntervalIndex->entry->if->list->get->if->else->if->entry->contains->else->if->if->else->if->else->if->else->else->if->if->else->if->if->else->else->else->if->else->if->else->if->add->if->prop->setSupplementaryStates
TokenTracker.Entry#compareTo(int):::Returns -1 if this interval represented by this entry precedes the number, 0 if the number is contained in the interval, and -1 if the interval occurs after the number.:::if->return->else->if->return->else->return

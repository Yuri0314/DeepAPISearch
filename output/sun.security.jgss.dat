sun.security.jgss.GSSCaller#toString()->String::: caller to string
sun.security.jgss.GSSContextImpl#initSecContext(byte[], int, int)->byte[]::: context impl init sec context
sun.security.jgss.GSSContextImpl#initSecContext(InputStream, OutputStream)->int::: context impl init sec context
sun.security.jgss.GSSContextImpl#acceptSecContext(byte[], int, int)->byte[]::: context impl accept sec context
sun.security.jgss.GSSContextImpl#acceptSecContext(InputStream, OutputStream)->void::: context impl accept sec context
sun.security.jgss.GSSContextImpl#isEstablished()->boolean::: context impl is established
sun.security.jgss.GSSContextImpl#getWrapSizeLimit(int, boolean, int)->int::: context impl get wrap size limit
sun.security.jgss.GSSContextImpl#wrap(byte[], int, int, MessageProp)->byte[]::: context impl wrap
sun.security.jgss.GSSContextImpl#wrap(InputStream, OutputStream, MessageProp)->void::: context impl wrap
sun.security.jgss.GSSContextImpl#unwrap(byte[], int, int, MessageProp)->byte[]::: context impl unwrap
sun.security.jgss.GSSContextImpl#unwrap(InputStream, OutputStream, MessageProp)->void::: context impl unwrap
sun.security.jgss.GSSContextImpl#getMIC(byte[], int, int, MessageProp)->byte[]::: context impl get c
sun.security.jgss.GSSContextImpl#getMIC(InputStream, OutputStream, MessageProp)->void::: context impl get c
sun.security.jgss.GSSContextImpl#verifyMIC(byte[], int, int, byte[], int, int, MessageProp)->void::: context impl verify c
sun.security.jgss.GSSContextImpl#verifyMIC(InputStream, InputStream, MessageProp)->void::: context impl verify c
sun.security.jgss.GSSContextImpl#export()->byte[]::: context impl export
sun.security.jgss.GSSContextImpl#requestMutualAuth(boolean)->void::: context impl request mutual auth
sun.security.jgss.GSSContextImpl#requestReplayDet(boolean)->void::: context impl request replay det
sun.security.jgss.GSSContextImpl#requestSequenceDet(boolean)->void::: context impl request sequence det
sun.security.jgss.GSSContextImpl#requestCredDeleg(boolean)->void::: context impl request cred deleg
sun.security.jgss.GSSContextImpl#requestAnonymity(boolean)->void::: context impl request anonymity
sun.security.jgss.GSSContextImpl#requestConf(boolean)->void::: context impl request conf
sun.security.jgss.GSSContextImpl#requestInteg(boolean)->void::: context impl request integ
sun.security.jgss.GSSContextImpl#requestLifetime(int)->void::: context impl request lifetime
sun.security.jgss.GSSContextImpl#setChannelBinding(ChannelBinding)->void::: context impl set channel binding
sun.security.jgss.GSSContextImpl#getCredDelegState()->boolean::: context impl get cred deleg state
sun.security.jgss.GSSContextImpl#getMutualAuthState()->boolean::: context impl get mutual auth state
sun.security.jgss.GSSContextImpl#getReplayDetState()->boolean::: context impl get replay det state
sun.security.jgss.GSSContextImpl#getSequenceDetState()->boolean::: context impl get sequence det state
sun.security.jgss.GSSContextImpl#getAnonymityState()->boolean::: context impl get anonymity state
sun.security.jgss.GSSContextImpl#isTransferable()->boolean::: context impl is transferable
sun.security.jgss.GSSContextImpl#isProtReady()->boolean::: context impl is prot ready
sun.security.jgss.GSSContextImpl#getConfState()->boolean::: context impl get conf state
sun.security.jgss.GSSContextImpl#getIntegState()->boolean::: context impl get integ state
sun.security.jgss.GSSContextImpl#getLifetime()->int::: context impl get lifetime
sun.security.jgss.GSSContextImpl#getSrcName()->GSSName::: context impl get src name
sun.security.jgss.GSSContextImpl#getTargName()->GSSName::: context impl get targ name
sun.security.jgss.GSSContextImpl#getMech()->Oid::: context impl get mech
sun.security.jgss.GSSContextImpl#getDelegCred()->GSSCredential::: context impl get deleg cred
sun.security.jgss.GSSContextImpl#isInitiator()->boolean::: context impl is initiator
sun.security.jgss.GSSContextImpl#dispose()->void::: context impl dispose
sun.security.jgss.GSSContextImpl#inquireSecContext(String)->Object::: context impl inquire sec context
sun.security.jgss.GSSContextImpl#requestDelegPolicy(boolean)->void::: context impl request deleg policy
sun.security.jgss.GSSContextImpl#getDelegPolicyState()->boolean::: context impl get deleg policy state
sun.security.jgss.GSSCredentialImpl#init(GSSManagerImpl)->void::: credential impl init
sun.security.jgss.GSSCredentialImpl#dispose()->void::: credential impl dispose
sun.security.jgss.GSSCredentialImpl#impersonate(GSSName)->GSSCredential::: credential impl impersonate
sun.security.jgss.GSSCredentialImpl#getName()->GSSName::: credential impl get name
sun.security.jgss.GSSCredentialImpl#getName(Oid)->GSSName::: credential impl get name
sun.security.jgss.GSSCredentialImpl#getRemainingLifetime()->int:::Returns the remaining lifetime of this credential
sun.security.jgss.GSSCredentialImpl#getRemainingInitLifetime(Oid)->int::: credential impl get remaining init lifetime
sun.security.jgss.GSSCredentialImpl#getRemainingAcceptLifetime(Oid)->int::: credential impl get remaining accept lifetime
sun.security.jgss.GSSCredentialImpl#getUsage()->int:::Returns the usage mode for this credential
sun.security.jgss.GSSCredentialImpl#getUsage(Oid)->int::: credential impl get usage
sun.security.jgss.GSSCredentialImpl#getMechs()->Oid[]::: credential impl get mechs
sun.security.jgss.GSSCredentialImpl#add(GSSName, int, int, Oid, int)->void::: credential impl add
sun.security.jgss.GSSCredentialImpl#equals(Object)->boolean::: credential impl equals
sun.security.jgss.GSSCredentialImpl#hashCode()->int:::Returns a hashcode value for this GSSCredential.
sun.security.jgss.GSSCredentialImpl#getElement(Oid, boolean)->GSSCredentialSpi:::Returns the specified mechanism's credential-element.
sun.security.jgss.GSSCredentialImpl#getElements()->Set::: credential impl get elements
sun.security.jgss.GSSCredentialImpl#toString()->String::: credential impl to string
sun.security.jgss.GSSCredentialImpl.SearchKey#getMech()->Oid::: search key get mech
sun.security.jgss.GSSCredentialImpl.SearchKey#getUsage()->int::: search key get usage
sun.security.jgss.GSSCredentialImpl.SearchKey#equals(Object)->boolean::: search key equals
sun.security.jgss.GSSCredentialImpl.SearchKey#hashCode()->int::: search key hash code
sun.security.jgss.GSSExceptionImpl#getMessage()->String:::Returns the message that was embedded in this object, otherwise it returns the default message that an org.ietf.jgss.GSSException generates.
sun.security.jgss.GSSHeader#getOid()->ObjectIdentifier:::Used to obtain the Oid stored in this GSSHeader instance.
sun.security.jgss.GSSHeader#getMechTokenLength()->int:::Used to obtain the length of the mechanism specific token that will follow the encoding of this GSSHeader instance.
sun.security.jgss.GSSHeader#getLength()->int:::Used to obtain the length of the encoding of this GSSHeader.
sun.security.jgss.GSSHeader#getMaxMechTokenSize(ObjectIdentifier, int)->int:::Used to determine what the maximum possible mechanism token size is if the complete GSSToken returned to the application (including a GSSHeader) is not to exceed some pre-determined value in size.
sun.security.jgss.GSSHeader#encode(OutputStream)->int:::Encodes this GSSHeader instance onto the provided OutputStream.
sun.security.jgss.GSSManagerImpl#getMechs()->Oid[]::: manager impl get mechs
sun.security.jgss.GSSManagerImpl#getNamesForMech(Oid)->Oid[]::: manager impl get names for mech
sun.security.jgss.GSSManagerImpl#getMechsForName(Oid)->Oid[]::: manager impl get mechs for name
sun.security.jgss.GSSManagerImpl#createName(String, Oid)->GSSName::: manager impl create name
sun.security.jgss.GSSManagerImpl#createName(byte[], Oid)->GSSName::: manager impl create name
sun.security.jgss.GSSManagerImpl#createName(String, Oid, Oid)->GSSName::: manager impl create name
sun.security.jgss.GSSManagerImpl#createName(byte[], Oid, Oid)->GSSName::: manager impl create name
sun.security.jgss.GSSManagerImpl#createCredential(int)->GSSCredential::: manager impl create credential
sun.security.jgss.GSSManagerImpl#createCredential(GSSName, int, Oid, int)->GSSCredential::: manager impl create credential
sun.security.jgss.GSSManagerImpl#createCredential(GSSName, int, Oid[], int)->GSSCredential::: manager impl create credential
sun.security.jgss.GSSManagerImpl#createContext(GSSName, Oid, GSSCredential, int)->GSSContext::: manager impl create context
sun.security.jgss.GSSManagerImpl#createContext(GSSCredential)->GSSContext::: manager impl create context
sun.security.jgss.GSSManagerImpl#createContext(byte[])->GSSContext::: manager impl create context
sun.security.jgss.GSSManagerImpl#addProviderAtFront(Provider, Oid)->void::: manager impl add provider at front
sun.security.jgss.GSSManagerImpl#addProviderAtEnd(Provider, Oid)->void::: manager impl add provider at end
sun.security.jgss.GSSManagerImpl#getCredentialElement(GSSNameSpi, int, int, Oid, int)->GSSCredentialSpi::: manager impl get credential element
sun.security.jgss.GSSManagerImpl#getNameElement(String, Oid, Oid)->GSSNameSpi::: manager impl get name element
sun.security.jgss.GSSManagerImpl#getNameElement(byte[], Oid, Oid)->GSSNameSpi::: manager impl get name element
sun.security.jgss.GSSManagerImpl#getMechanismContext(GSSNameSpi, GSSCredentialSpi, int, Oid)->GSSContextSpi::: manager impl get mechanism context
sun.security.jgss.GSSManagerImpl#getMechanismContext(GSSCredentialSpi, Oid)->GSSContextSpi::: manager impl get mechanism context
sun.security.jgss.GSSManagerImpl#getMechanismContext(byte[])->GSSContextSpi::: manager impl get mechanism context
sun.security.jgss.GSSManagerImpl#wrap(GSSCredentialImpl)->GSSCredential::: manager impl wrap
sun.security.jgss.GSSManagerImpl#wrap(GSSContextImpl)->GSSContext::: manager impl wrap
sun.security.jgss.GSSNameImpl#wrapElement(GSSManagerImpl, GSSNameSpi)->GSSNameImpl::: name impl wrap element
sun.security.jgss.GSSNameImpl#canonicalize(Oid)->GSSName::: name impl canonicalize
sun.security.jgss.GSSNameImpl#equals(GSSName)->boolean:::This method may return false negatives
sun.security.jgss.GSSNameImpl#hashCode()->int:::Returns a hashcode value for this GSSName.
sun.security.jgss.GSSNameImpl#equals(Object)->boolean::: name impl equals
sun.security.jgss.GSSNameImpl#export()->byte[]:::Returns a flat name representation for this object
sun.security.jgss.GSSNameImpl#toString()->String::: name impl to string
sun.security.jgss.GSSNameImpl#getStringNameType()->Oid::: name impl get string name type
sun.security.jgss.GSSNameImpl#isAnonymous()->boolean::: name impl is anonymous
sun.security.jgss.GSSNameImpl#isMN()->boolean::: name impl is n
sun.security.jgss.GSSNameImpl#getElement(Oid)->GSSNameSpi::: name impl get element
sun.security.jgss.GSSNameImpl#getElements()->Set::: name impl get elements
sun.security.jgss.GSSToken#writeLittleEndian(int, byte[])->void:::Copies an integer value to a byte array in little endian form.
sun.security.jgss.GSSToken#writeLittleEndian(int, byte[], int)->void:::Copies an integer value to a byte array in little endian form.
sun.security.jgss.GSSToken#writeBigEndian(int, byte[])->void::: token write big endian
sun.security.jgss.GSSToken#writeBigEndian(int, byte[], int)->void::: token write big endian
sun.security.jgss.GSSToken#readLittleEndian(byte[], int, int)->int:::Reads an integer value from a byte array in little endian form
sun.security.jgss.GSSToken#readBigEndian(byte[], int, int)->int::: token read big endian
sun.security.jgss.GSSToken#writeInt(int, OutputStream)->void:::Writes a two byte integer value to a OutputStream.
sun.security.jgss.GSSToken#writeInt(int, byte[], int)->int:::Writes a two byte integer value to a byte array.
sun.security.jgss.GSSToken#readInt(InputStream)->int:::Reads a two byte integer value from an InputStream.
sun.security.jgss.GSSToken#readInt(byte[], int)->int:::Reads a two byte integer value from a byte array.
sun.security.jgss.GSSToken#readFully(InputStream, byte[])->void:::Blocks till the required number of bytes have been read from the input stream.
sun.security.jgss.GSSToken#readFully(InputStream, byte[], int, int)->void:::Blocks till the required number of bytes have been read from the input stream.
sun.security.jgss.GSSToken#debug(String)->void::: token debug
sun.security.jgss.GSSToken#getHexBytes(byte[])->String::: token get hex bytes
sun.security.jgss.GSSToken#getHexBytes(byte[], int)->String::: token get hex bytes
sun.security.jgss.GSSToken#getHexBytes(byte[], int, int)->String::: token get hex bytes
sun.security.jgss.GSSUtil#debug(String)->void::: util debug
sun.security.jgss.GSSUtil#createOid(String)->Oid::: util create oid
sun.security.jgss.GSSUtil#isSpNegoMech(Oid)->boolean::: util is sp nego mech
sun.security.jgss.GSSUtil#isKerberosMech(Oid)->boolean::: util is kerberos mech
sun.security.jgss.GSSUtil#getMechStr(Oid)->String::: util get mech str
sun.security.jgss.GSSUtil#getSubject(GSSName, GSSCredential)->Subject:::Note: The current impl only works with Sun's impl of GSSName and GSSCredential since it depends on package private APIs.
sun.security.jgss.GSSUtil#login(GSSCaller, Oid)->Subject:::Authenticate using the login module from the specified configuration entry.
sun.security.jgss.GSSUtil#useSubjectCredsOnly(GSSCaller)->boolean:::Determines if the application doesn't mind if the mechanism obtains the required credentials from outside of the current Subject
sun.security.jgss.GSSUtil#useMSInterop()->boolean:::Determines the SPNEGO interoperability mode with Microsoft; by default it is set to true
sun.security.jgss.GSSUtil#searchSubject(GSSNameSpi, Oid, boolean, Class)->Vector:::Searches the private credentials of current Subject with the specified criteria and returns the matching GSSCredentialSpi object out of Sun's impl of GSSCredential
sun.security.jgss.HttpCaller#info()->HttpCallerInfo::: http caller info
sun.security.jgss.JgssExtender#getExtender()->JgssExtender:::Gets "the extender"
sun.security.jgss.JgssExtender#setExtender(JgssExtender)->void:::Set "the extender" so that GSSManager can create extended objects.
sun.security.jgss.JgssExtender#wrap(GSSCredential)->GSSCredential:::Wraps a plain GSSCredential object into an extended type.
sun.security.jgss.JgssExtender#wrap(GSSContext)->GSSContext:::Wraps a plain GSSContext object into an extended type.
sun.security.jgss.LoginConfigImpl#getAppConfigurationEntry(String)->AppConfigurationEntry[]::: login config impl get app configuration entry
sun.security.jgss.ProviderList#getMechFactory(Oid)->MechanismFactory::: provider list get mech factory
sun.security.jgss.ProviderList#getMechFactory(Oid, Provider)->MechanismFactory:::Obtains a MechanismFactory for a given mechanism
sun.security.jgss.ProviderList#getMechs()->Oid[]::: provider list get mechs
sun.security.jgss.ProviderList#addProviderAtFront(Provider, Oid)->void::: provider list add provider at front
sun.security.jgss.ProviderList#addProviderAtEnd(Provider, Oid)->void::: provider list add provider at end
sun.security.jgss.TokenTracker#getProps(int, MessageProp)->void:::Sets the sequencing and replay information for the given token number
sun.security.jgss.TokenTracker#toString()->String::: token tracker to string
sun.security.jgss.TokenTracker.Entry#compareTo(int)->int:::Returns -1 if this interval represented by this entry precedes the number, 0 if the number is contained in the interval, and -1 if the interval occurs after the number.
sun.security.jgss.TokenTracker.Entry#contains(int)->boolean::: entry contains
sun.security.jgss.TokenTracker.Entry#append(int)->void::: entry append
sun.security.jgss.TokenTracker.Entry#setInterval(int, int)->void::: entry set interval
sun.security.jgss.TokenTracker.Entry#setEnd(int)->void::: entry set end
sun.security.jgss.TokenTracker.Entry#setStart(int)->void::: entry set start
sun.security.jgss.TokenTracker.Entry#getStart()->int::: entry get start
sun.security.jgss.TokenTracker.Entry#getEnd()->int::: entry get end
sun.security.jgss.TokenTracker.Entry#toString()->String::: entry to string

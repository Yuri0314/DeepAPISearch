GSSCaller#toString()::: caller to string:::return
GSSContextImpl#initSecContext(byte[], int, int)::: context impl init sec context:::bos->new->ByteArrayOutputStream->bin->new->ByteArrayInputStream->size->initSecContext->return->bos->toByteArray
GSSContextImpl#initSecContext(InputStream, OutputStream)::: context impl init sec context:::if->throw->new->GSSExceptionImpl->gssHeader->inTokenLen->credElement->firstToken->try->if->if->try->myCred->getElement->catch->if->GSSUtil->isSpNegoMech->ge->getMajor->myCred->myCred->getMechs->getElement->else->throw->finally->nameElement->targName->getElement->gssManager->getMechanismContext->mechCtxt->requestConf->mechCtxt->requestInteg->mechCtxt->requestCredDeleg->mechCtxt->requestMutualAuth->mechCtxt->requestReplayDet->mechCtxt->requestSequenceDet->mechCtxt->requestAnonymity->mechCtxt->setChannelBinding->mechCtxt->requestDelegPolicy->mechOid->toString->new->ObjectIdentifier->else->if->mechCtxt->getProvider->getName->equals->GSSUtil->isSpNegoMech->else->new->GSSHeader->if->gssHeader->getOid->equals->throw->mechOid->toString->new->GSSExceptionImpl->gssHeader->getMechTokenLength->obuf->mechCtxt->initSecContext->retVal->if->if->mechCtxt->getProvider->getName->equals->GSSUtil->isSpNegoMech->else->new->GSSHeader->gssHeader->encode->outStream->write->if->mechCtxt->isEstablished->return->catch->throw->e->getMessage->new->GSSExceptionImpl->finally
GSSContextImpl#acceptSecContext(byte[], int, int)::: context impl accept sec context:::bos->new->ByteArrayOutputStream->new->ByteArrayInputStream->acceptSecContext->out->bos->toByteArray->return
GSSContextImpl#acceptSecContext(InputStream, OutputStream)::: context impl accept sec context:::if->throw->new->GSSExceptionImpl->gssHeader->inTokenLen->credElement->try->if->new->GSSHeader->gssHeader->getMechTokenLength->gssHeader->getOid->objId->toString->new->Oid->if->myCred->getElement->gssManager->getMechanismContext->mechCtxt->setChannelBinding->else->if->mechCtxt->getProvider->getName->equals->GSSUtil->isSpNegoMech->else->new->GSSHeader->if->gssHeader->getOid->equals->throw->mechOid->toString->new->GSSExceptionImpl->gssHeader->getMechTokenLength->obuf->mechCtxt->acceptSecContext->if->retVal->if->mechCtxt->getProvider->getName->equals->GSSUtil->isSpNegoMech->else->new->GSSHeader->gssHeader->encode->outStream->write->if->mechCtxt->isEstablished->catch->throw->e->getMessage->new->GSSExceptionImpl->finally
GSSContextImpl#isEstablished()::: context impl is established:::if->return->else->return
GSSContextImpl#getWrapSizeLimit(int, boolean, int)::: context impl get wrap size limit:::if->return->mechCtxt->getWrapSizeLimit->else->throw->new->GSSExceptionImpl
GSSContextImpl#wrap(byte[], int, int, MessageProp)::: context impl wrap:::if->return->mechCtxt->wrap->else->throw->new->GSSExceptionImpl
GSSContextImpl#wrap(InputStream, OutputStream, MessageProp)::: context impl wrap:::if->mechCtxt->wrap->else->throw->new->GSSExceptionImpl
GSSContextImpl#unwrap(byte[], int, int, MessageProp)::: context impl unwrap:::if->return->mechCtxt->unwrap->else->throw->new->GSSExceptionImpl
GSSContextImpl#unwrap(InputStream, OutputStream, MessageProp)::: context impl unwrap:::if->mechCtxt->unwrap->else->throw->new->GSSExceptionImpl
GSSContextImpl#getMIC(byte[], int, int, MessageProp)::: context impl get c:::if->return->mechCtxt->getMIC->else->throw->new->GSSExceptionImpl
GSSContextImpl#getMIC(InputStream, OutputStream, MessageProp)::: context impl get c:::if->mechCtxt->getMIC->else->throw->new->GSSExceptionImpl
GSSContextImpl#verifyMIC(byte[], int, int, byte[], int, int, MessageProp)::: context impl verify c:::if->mechCtxt->verifyMIC->else->throw->new->GSSExceptionImpl
GSSContextImpl#verifyMIC(InputStream, InputStream, MessageProp)::: context impl verify c:::if->mechCtxt->verifyMIC->else->throw->new->GSSExceptionImpl
GSSContextImpl#export()::: context impl export:::result->if->mechCtxt->isTransferable->mechCtxt->getProvider->getName->equals->mechCtxt->export->return
GSSContextImpl#requestMutualAuth(boolean)::: context impl request mutual auth:::if
GSSContextImpl#requestReplayDet(boolean)::: context impl request replay det:::if
GSSContextImpl#requestSequenceDet(boolean)::: context impl request sequence det:::if
GSSContextImpl#requestCredDeleg(boolean)::: context impl request cred deleg:::if
GSSContextImpl#requestAnonymity(boolean)::: context impl request anonymity:::if
GSSContextImpl#requestConf(boolean)::: context impl request conf:::if
GSSContextImpl#requestInteg(boolean)::: context impl request integ:::if
GSSContextImpl#requestLifetime(int)::: context impl request lifetime:::if
GSSContextImpl#setChannelBinding(ChannelBinding)::: context impl set channel binding:::if
GSSContextImpl#getCredDelegState()::: context impl get cred deleg state:::if->return->mechCtxt->getCredDelegState->else->return
GSSContextImpl#getMutualAuthState()::: context impl get mutual auth state:::if->return->mechCtxt->getMutualAuthState->else->return
GSSContextImpl#getReplayDetState()::: context impl get replay det state:::if->return->mechCtxt->getReplayDetState->else->return
GSSContextImpl#getSequenceDetState()::: context impl get sequence det state:::if->return->mechCtxt->getSequenceDetState->else->return
GSSContextImpl#getAnonymityState()::: context impl get anonymity state:::if->return->mechCtxt->getAnonymityState->else->return
GSSContextImpl#isTransferable()::: context impl is transferable:::if->return->mechCtxt->isTransferable->else->return
GSSContextImpl#isProtReady()::: context impl is prot ready:::if->return->mechCtxt->isProtReady->else->return
GSSContextImpl#getConfState()::: context impl get conf state:::if->return->mechCtxt->getConfState->else->return
GSSContextImpl#getIntegState()::: context impl get integ state:::if->return->mechCtxt->getIntegState->else->return
GSSContextImpl#getLifetime()::: context impl get lifetime:::if->return->mechCtxt->getLifetime->else->return
GSSContextImpl#getSrcName()::: context impl get src name:::if->GSSNameImpl->mechCtxt->getSrcName->wrapElement->return
GSSContextImpl#getTargName()::: context impl get targ name:::if->GSSNameImpl->mechCtxt->getTargName->wrapElement->return
GSSContextImpl#getMech()::: context impl get mech:::if->return->mechCtxt->getMech->return
GSSContextImpl#getDelegCred()::: context impl get deleg cred:::if->throw->new->GSSExceptionImpl->delCredElement->mechCtxt->getDelegCred->return->GSSManagerImpl->new->GSSCredentialImpl->wrap
GSSContextImpl#isInitiator()::: context impl is initiator:::return
GSSContextImpl#dispose()::: context impl dispose:::if->mechCtxt->dispose
GSSContextImpl#inquireSecContext(String)::: context impl inquire sec context:::if->throw->new->GSSException->return->mechCtxt->inquireSecContext
GSSContextImpl#requestDelegPolicy(boolean)::: context impl request deleg policy:::if
GSSContextImpl#getDelegPolicyState()::: context impl get deleg policy state:::if->return->mechCtxt->getDelegPolicyState->else->return
GSSCredentialImpl#init(GSSManagerImpl)::: credential impl init:::gssManager->getMechs->new->Hashtable<SearchKey,GSSCredentialSpi>
GSSCredentialImpl#dispose()::: credential impl dispose:::if->element->values->hashtable->elements->while->values->hasMoreElements->values->nextElement->element->dispose
GSSCredentialImpl#impersonate(GSSName)::: credential impl impersonate:::if->throw->new->IllegalStateException->mech->tempCred->getMechanism->nameElement->getElement->cred->tempCred->impersonate->return->GSSManagerImpl->new->GSSCredentialImpl->wrap
GSSCredentialImpl#getName()::: credential impl get name:::if->throw->new->IllegalStateException->return->GSSNameImpl->tempCred->getName->wrapElement
GSSCredentialImpl#getName(Oid)::: credential impl get name:::if->throw->new->IllegalStateException->key->element->if->new->SearchKey->hashtable->get->if->new->SearchKey->hashtable->get->if->new->SearchKey->hashtable->get->if->throw->new->GSSExceptionImpl->return->GSSNameImpl->element->getName->wrapElement
GSSCredentialImpl#getRemainingLifetime():::Returns the remaining lifetime of this credential:::if->throw->new->IllegalStateException->tempKey->tempCred->tempLife->tempInitLife->tempAcceptLife->min->for->e->hashtable->keys->e->hasMoreElements->return
GSSCredentialImpl#getRemainingInitLifetime(Oid)::: credential impl get remaining init lifetime:::if->throw->new->IllegalStateException->element->key->found->max->if->new->SearchKey->hashtable->get->if->if->element->getInitLifetime->element->getInitLifetime->new->SearchKey->hashtable->get->if->if->element->getInitLifetime->element->getInitLifetime->if->throw->new->GSSExceptionImpl->return
GSSCredentialImpl#getRemainingAcceptLifetime(Oid)::: credential impl get remaining accept lifetime:::if->throw->new->IllegalStateException->element->key->found->max->if->new->SearchKey->hashtable->get->if->if->element->getAcceptLifetime->element->getAcceptLifetime->new->SearchKey->hashtable->get->if->if->element->getAcceptLifetime->element->getAcceptLifetime->if->throw->new->GSSExceptionImpl->return
GSSCredentialImpl#getUsage():::Returns the usage mode for this credential:::if->throw->new->IllegalStateException->tempKey->initiate->accept->for->e->hashtable->keys->e->hasMoreElements->if->if->return->else->return->else->return
GSSCredentialImpl#getUsage(Oid)::: credential impl get usage:::if->throw->new->IllegalStateException->element->key->initiate->accept->if->new->SearchKey->hashtable->get->if->new->SearchKey->hashtable->get->if->new->SearchKey->hashtable->get->if->if->return->else->if->return->else->if->return->else->throw->new->GSSExceptionImpl
GSSCredentialImpl#getMechs()::: credential impl get mechs:::if->throw->new->IllegalStateException->result->hashtable->size->new->Vector<Oid>->for->e->hashtable->keys->e->hasMoreElements->return->result->new->OidArr->toArray
GSSCredentialImpl#add(GSSName, int, int, Oid, int)::: credential impl add:::if->throw->new->IllegalStateException->if->key->new->SearchKey->if->hashtable->containsKey->throw->getElementStr->new->GSSExceptionImpl->nameElement->getElement->gssManager->getCredentialElement->if->if->tempCred->isAcceptorCredential->tempCred->isInitiatorCredential->currentUsage->desiredUsage->if->tempCred->isInitiatorCredential->else->new->SearchKey->hashtable->put->gssManager->getCredentialElement->new->SearchKey->hashtable->put->else->hashtable->put
GSSCredentialImpl#equals(Object)::: credential impl equals:::if->throw->new->IllegalStateException->if->return->if->return->return
GSSCredentialImpl#hashCode():::Returns a hashcode value for this GSSCredential.:::if->throw->new->IllegalStateException->return
GSSCredentialImpl#getElement(Oid, boolean):::Returns the specified mechanism's credential-element.:::if->throw->new->IllegalStateException->key->element->if->new->SearchKey->hashtable->get->if->new->SearchKey->hashtable->get->if->elements->hashtable->entrySet->toArray->for->i->else->if->new->SearchKey->else->new->SearchKey->hashtable->get->if->new->SearchKey->hashtable->get->if->throw->getElementStr->new->GSSExceptionImpl->return
GSSCredentialImpl#getElements()::: credential impl get elements:::retVal->hashtable->size->new->HashSet<GSSCredentialSpi>->values->hashtable->elements->while->values->hasMoreElements->o->values->nextElement->retVal->add->return
GSSCredentialImpl#getElementStr(Oid, int)::: credential impl get element str:::displayString->mechOid->toString->if->displayString->concat->else->if->displayString->concat->else->displayString->concat->return
GSSCredentialImpl#toString()::: credential impl to string:::if->throw->new->IllegalStateException->element->sb->new->StringBuilder->elements->hashtable->entrySet->toArray->for->i->sb->append->return->sb->toString
GSSCredentialImpl.SearchKey#getMech()::: search key get mech:::return
GSSCredentialImpl.SearchKey#getUsage()::: search key get usage:::return
GSSCredentialImpl.SearchKey#equals(Object)::: search key equals:::if->return->that->return->equals
GSSCredentialImpl.SearchKey#hashCode()::: search key hash code:::return->mechOid->hashCode
GSSExceptionImpl#getMessage():::Returns the message that was embedded in this object, otherwise it returns the default message that an org.ietf.jgss.GSSException generates.:::if->return->else->return->super->getMessage
GSSHeader#getOid():::Used to obtain the Oid stored in this GSSHeader instance.:::return
GSSHeader#getMechTokenLength():::Used to obtain the length of the mechanism specific token that will follow the encoding of this GSSHeader instance.:::return
GSSHeader#getLength():::Used to obtain the length of the encoding of this GSSHeader.:::lenField->return->getLenFieldSize
GSSHeader#getMaxMechTokenSize(ObjectIdentifier, int):::Used to determine what the maximum possible mechanism token size is if the complete GSSToken returned to the application (including a GSSHeader) is not to exceed some pre-determined value in size.:::mechOidBytesSize->try->temp->new->DerOutputStream->temp->putOID->temp->toByteArray->catch->finally->return
GSSHeader#getLenFieldSize(int):::Used to determine the number of bytes that will be need to encode the length field of the GSSHeader.:::retVal->if->else->if->else->if->else->if->else->return
GSSHeader#encode(OutputStream):::Encodes this GSSHeader instance onto the provided OutputStream.:::retVal->os->write->length->putLength->os->write->return
GSSHeader#getLength(InputStream)::: header get length:::return->in->read->getLength
GSSHeader#getLength(int, InputStream)::: header get length:::value->tmp->if->else->if->return->if->throw->new->IOException->for->if->throw->new->IOException->return
GSSHeader#putLength(int, OutputStream)::: header put length:::retVal->if->out->write->else->if->out->write->out->write->else->if->out->write->out->write->out->write->else->if->out->write->out->write->out->write->out->write->else->out->write->out->write->out->write->out->write->out->write->return
GSSHeader#debug(String)::: header debug:::print
GSSHeader#getHexBytes(byte[], int)::: header get hex bytes:::sb->new->StringBuilder->for->i->return->sb->toString
GSSManagerImpl#getMechs()::: manager impl get mechs:::return->list->getMechs
GSSManagerImpl#getNamesForMech(Oid)::: manager impl get names for mech:::factory->list->getMechFactory->return->factory->getNameTypes->clone
GSSManagerImpl#getMechsForName(Oid)::: manager impl get mechs for name:::mechs->list->getMechs->retVal->new->OidArr->pos->if->nameType->equals->for->i->if->temp->new->OidArr->for->i->return
GSSManagerImpl#createName(String, Oid)::: manager impl create name:::return->new->GSSNameImpl
GSSManagerImpl#createName(byte[], Oid)::: manager impl create name:::return->new->GSSNameImpl
GSSManagerImpl#createName(String, Oid, Oid)::: manager impl create name:::return->new->GSSNameImpl
GSSManagerImpl#createName(byte[], Oid, Oid)::: manager impl create name:::return->new->GSSNameImpl
GSSManagerImpl#createCredential(int)::: manager impl create credential:::return->new->GSSCredentialImpl->wrap
GSSManagerImpl#createCredential(GSSName, int, Oid, int)::: manager impl create credential:::return->new->GSSCredentialImpl->wrap
GSSManagerImpl#createCredential(GSSName, int, Oid[], int)::: manager impl create credential:::return->new->GSSCredentialImpl->wrap
GSSManagerImpl#createContext(GSSName, Oid, GSSCredential, int)::: manager impl create context:::return->new->GSSContextImpl->wrap
GSSManagerImpl#createContext(GSSCredential)::: manager impl create context:::return->new->GSSContextImpl->wrap
GSSManagerImpl#createContext(byte[])::: manager impl create context:::return->new->GSSContextImpl->wrap
GSSManagerImpl#addProviderAtFront(Provider, Oid)::: manager impl add provider at front:::list->addProviderAtFront
GSSManagerImpl#addProviderAtEnd(Provider, Oid)::: manager impl add provider at end:::list->addProviderAtEnd
GSSManagerImpl#getCredentialElement(GSSNameSpi, int, int, Oid, int)::: manager impl get credential element:::factory->list->getMechFactory->return->factory->getCredentialElement
GSSManagerImpl#getNameElement(String, Oid, Oid)::: manager impl get name element:::factory->list->getMechFactory->return->factory->getNameElement
GSSManagerImpl#getNameElement(byte[], Oid, Oid)::: manager impl get name element:::factory->list->getMechFactory->return->factory->getNameElement
GSSManagerImpl#getMechanismContext(GSSNameSpi, GSSCredentialSpi, int, Oid)::: manager impl get mechanism context:::p->if->myInitiatorCred->getProvider->factory->list->getMechFactory->return->factory->getMechanismContext
GSSManagerImpl#getMechanismContext(GSSCredentialSpi, Oid)::: manager impl get mechanism context:::p->if->myAcceptorCred->getProvider->factory->list->getMechFactory->return->factory->getMechanismContext
GSSManagerImpl#getMechanismContext(byte[])::: manager impl get mechanism context:::if->throw->new->GSSException->result->mechs->list->getMechs->for->i->if->throw->new->GSSException->return
GSSManagerImpl#wrap(GSSCredentialImpl)::: manager impl wrap:::return->getExtender->wrap
GSSManagerImpl#wrap(GSSContextImpl)::: manager impl wrap:::return->getExtender->wrap
GSSNameImpl#wrapElement(GSSManagerImpl, GSSNameSpi)::: name impl wrap element:::return->new->GSSNameImpl
GSSNameImpl#init(GSSManagerImpl, Object, Oid, Oid)::: name impl init:::gssManager->getMechs->new->HashMap<Oid,GSSNameSpi>->if->if->else->getElement->if->mechElement->toString->mechElement->getStringNameType
GSSNameImpl#importName(GSSManagerImpl, Object)::: name impl import name:::pos->bytes->if->try->getBytes->catch->finally->else->if->throw->new->GSSExceptionImpl->oidLen->temp->try->din->new->DerInputStream->new->ObjectIdentifier->catch->throw->new->GSSExceptionImpl->finally->oid->temp->toString->new->Oid->mechPortionLen->if->throw->new->GSSExceptionImpl->mechPortion->new->byteArr->System->arraycopy->init
GSSNameImpl#canonicalize(Oid)::: name impl canonicalize:::if->return->getElement->wrapElement
GSSNameImpl#equals(GSSName):::This method may return false negatives:::if->this->isAnonymous->other->isAnonymous->return->if->return->if->return->gssManager->other->toString->other->getStringNameType->createName->equals->that->myElement->element->if->this->element->getMechanism->getElement->else->if->that->myElement->getMechanism->getElement->if->return->myElement->equals->if->if->equals->return->myBytes->bytes->try->getBytes->getBytes->catch->finally->return->Arrays->equals->return
GSSNameImpl#hashCode():::Returns a hashcode value for this GSSName.:::return
GSSNameImpl#equals(Object)::: name impl equals:::try->if->return->equals->catch->finally->return
GSSNameImpl#export():::Returns a flat name representation for this object:::if->getElement->mechPortion->mechElement->export->oidBytes->oid->try->mechElement->getMechanism->toString->new->ObjectIdentifier->catch->throw->new->GSSExceptionImpl->finally->dout->new->DerOutputStream->try->dout->putOID->catch->throw->oid->toString->new->GSSExceptionImpl->finally->dout->toByteArray->retVal->new->byteArr->pos->System->arraycopy->System->arraycopy->return
GSSNameImpl#toString()::: name impl to string:::return
GSSNameImpl#getStringNameType()::: name impl get string name type:::return
GSSNameImpl#isAnonymous()::: name impl is anonymous:::if->return->else->return->equals
GSSNameImpl#isMN()::: name impl is n:::return
GSSNameImpl#getElement(Oid)::: name impl get element:::retVal->elements->get->if->if->gssManager->getNameElement->else->gssManager->getNameElement->elements->put->return
GSSNameImpl#getElements()::: name impl get elements:::return->elements->values->new->HashSet<GSSNameSpi>
GSSNameImpl#getNameTypeStr(Oid)::: name impl get name type str:::if->return->if->nameTypeOid->equals->return->if->nameTypeOid->equals->return->if->nameTypeOid->equals->return->if->nameTypeOid->equals->return->else->return
GSSToken#writeLittleEndian(int, byte[]):::Copies an integer value to a byte array in little endian form.:::writeLittleEndian
GSSToken#writeLittleEndian(int, byte[], int):::Copies an integer value to a byte array in little endian form.:::
GSSToken#writeBigEndian(int, byte[])::: token write big endian:::writeBigEndian
GSSToken#writeBigEndian(int, byte[], int)::: token write big endian:::
GSSToken#readLittleEndian(byte[], int, int):::Reads an integer value from a byte array in little endian form:::retVal->shifter->while->return
GSSToken#readBigEndian(byte[], int, int)::: token read big endian:::retVal->shifter->while->return
GSSToken#writeInt(int, OutputStream):::Writes a two byte integer value to a OutputStream.:::os->write->os->write
GSSToken#writeInt(int, byte[], int):::Writes a two byte integer value to a byte array.:::return
GSSToken#readInt(InputStream):::Reads a two byte integer value from an InputStream.:::return->is->read->is->read
GSSToken#readInt(byte[], int):::Reads a two byte integer value from a byte array.:::return
GSSToken#readFully(InputStream, byte[]):::Blocks till the required number of bytes have been read from the input stream.:::readFully
GSSToken#readFully(InputStream, byte[], int, int):::Blocks till the required number of bytes have been read from the input stream.:::temp->while->is->read->if->throw->new->EOFException
GSSToken#debug(String)::: token debug:::print
GSSToken#getHexBytes(byte[])::: token get hex bytes:::return->getHexBytes
GSSToken#getHexBytes(byte[], int)::: token get hex bytes:::return->getHexBytes
GSSToken#getHexBytes(byte[], int, int)::: token get hex bytes:::sb->new->StringBuilder->for->i->return->sb->toString
GSSUtil#debug(String)::: util debug:::if->println
GSSUtil#createOid(String)::: util create oid:::try->return->new->Oid->catch->debug->return->finally
GSSUtil#isSpNegoMech(Oid)::: util is sp nego mech:::return->GSS_SPNEGO_MECH_OID->equals
GSSUtil#isKerberosMech(Oid)::: util is kerberos mech:::return->GSS_KRB5_MECH_OID->equals->GSS_KRB5_MECH_OID2->equals->GSS_KRB5_MECH_OID_MS->equals
GSSUtil#getMechStr(Oid)::: util get mech str:::if->isSpNegoMech->return->else->if->isKerberosMech->return->else->return->oid->toString
GSSUtil#getSubject(GSSName, GSSCredential):::Note: The current impl only works with Sun's impl of GSSName and GSSCredential since it depends on package private APIs.:::privCredentials->pubCredentials->new->HashSet<Object>->gssCredentials->krb5Principals->new->HashSet<KerberosPrincipal>->if->try->ne->getElement->krbName->ne->toString->if->getKrb5PrincipalName->getName->krbPrinc->new->KerberosPrincipal->krb5Principals->add->catch->debug->finally->if->getElements->gssCredentials->size->new->HashSet<Object>->populateCredentials->else->new->HashSet<Object>->debug->debug->debug->debug->return->new->Subject
GSSUtil#populateCredentials(Set, Set):::Populates the set credentials with elements from gssCredentials:::cred->elements->gssCredentials->iterator->while->elements->hasNext->elements->next->if->getInternalCred->if->if->cred->getClass->getName->equals->tempTkt->tempTkt->getEncoded->tempTkt->getClient->tempTkt->getServer->tempTkt->getSessionKey->getEncoded->tempTkt->getSessionKeyType->tempTkt->getFlags->tempTkt->getAuthTime->tempTkt->getStartTime->tempTkt->getEndTime->tempTkt->getRenewTill->tempTkt->getClientAddresses->new->KerberosTicket->credentials->add->else->if->if->cred->getClass->getName->equals->tempKey->tempKey->getPrincipal->tempKey->getEncoded->tempKey->getKeyType->tempKey->getVersionNumber->new->KerberosKey->credentials->add->else->debug
GSSUtil#login(GSSCaller, Oid):::Authenticate using the login module from the specified configuration entry.:::cb->if->info->new->sun.net.www.protocol.http.spnego.NegotiateCallbackHandler->else->defaultHandler->getProperty->if->defaultHandler->length->else->new->ConsoleCallbackHandler->lc->new->LoginConfigImpl->new->LoginContext->lc->login->return->lc->getSubject
GSSUtil#useSubjectCredsOnly(GSSCaller):::Determines if the application doesn't mind if the mechanism obtains the required credentials from outside of the current Subject:::propValue->GetPropertyAction->privilegedGetProperty->if->return->equalsIgnoreCase->else->return->equalsIgnoreCase
GSSUtil#useMSInterop():::Determines the SPNEGO interoperability mode with Microsoft; by default it is set to true:::propValue->AccessController->new->GetPropertyAction->doPrivileged->return->propValue->equalsIgnoreCase
GSSUtil#searchSubject(GSSNameSpi, Oid, boolean, Class):::Searches the private credentials of current Subject with the specified criteria and returns the matching GSSCredentialSpi object out of Sun's impl of GSSCredential:::getMechStr->name->toString->credCls->getName->debug->acc->AccessController->getContext->try->creds->AccessController->new->PrivilegedExceptionAction<Vector<T>>->doPrivileged->return->catch->debug->if->pae->printStackTrace->return->finally
HttpCaller#info()::: http caller info:::return
JgssExtender#getExtender():::Gets "the extender":::return
JgssExtender#setExtender(JgssExtender):::Set "the extender" so that GSSManager can create extended objects.:::
JgssExtender#wrap(GSSCredential):::Wraps a plain GSSCredential object into an extended type.:::return
JgssExtender#wrap(GSSContext):::Wraps a plain GSSContext object into an extended type.:::return
LoginConfigImpl#getAppConfigurationEntry(String)::: login config impl get app configuration entry:::entries->if->equalsIgnoreCase->return->alts->if->equals->if->new->StringArr->else->if->new->StringArr->else->if->new->StringArr->else->if->throw->new->AssertionError->else->throw->new->IllegalArgumentException->foreach->config->getAppConfigurationEntry->if->debug->println->if->break->if->if->debug->println->getDefaultConfigurationEntry->return
LoginConfigImpl#getDefaultConfigurationEntry():::Default value for a caller-mech pair when no entry is defined in the system-wide Configuration object.:::options->new->HashMap<String,String>->if->mechName->equals->if->isServerSide->options->put->options->put->options->put->options->put->options->put->else->if->options->put->else->options->put->options->put->return->new->AppConfigurationEntryArr->new->AppConfigurationEntry->return
LoginConfigImpl#isServerSide(GSSCaller)::: login config impl is server side:::return
ProviderList#isMechFactoryProperty(String):::Determines if the given provider property represents a GSS-API Oid to MechanismFactory mapping.:::return->prop->startsWith->prop->regionMatches
ProviderList#getOidFromMechFactoryProperty(String)::: provider list get oid from mech factory property:::oidPart->prop->substring->return->new->Oid
ProviderList#getMechFactory(Oid)::: provider list get mech factory:::if->return->getMechFactory
ProviderList#getMechFactory(Oid, Provider):::Obtains a MechanismFactory for a given mechanism:::if->if->className->entry->list->preferences->iterator->while->list->hasNext->list->next->if->entry->impliesMechanism->retVal->getMechFactory->if->return->throw->new->GSSExceptionImpl->else->entry->new->PreferencesEntry->return->getMechFactory
ProviderList#getMechFactory(PreferencesEntry, Oid):::Helper routine that uses a preferences entry to obtain an implementation of a MechanismFactory from it.:::p->e->getProvider->searchEntry->new->PreferencesEntry->retVal->factories->get->if->prop->mechOid->toString->className->p->getProperty->if->getMechFactoryImpl->factories->put->else->if->e->getOid->throw->p->getName->new->GSSExceptionImpl->return
ProviderList#getMechFactoryImpl(Provider, String, Oid, GSSCaller):::Helper routine to obtain a MechanismFactory implementation from the same class loader as the provider of this implementation.:::try->baseClass->Class->forName->cl->p->getClass->getClassLoader->implClass->if->cl->loadClass->else->Class->forName->if->baseClass->isAssignableFrom->c->implClass->getConstructor->mf->c->newInstance->if->setMech->return->else->throw->createGSSException->catch->throw->createGSSException->throw->createGSSException->throw->createGSSException->throw->createGSSException->throw->createGSSException->throw->createGSSException->finally
ProviderList#createGSSException(Provider, String, String, Exception)::: provider list create exception:::errClassInfo->p->getName->return->new->GSSExceptionImpl
ProviderList#getMechs()::: provider list get mechs:::return->mechs->new->OidArr->toArray
ProviderList#addProviderAtFront(Provider, Oid)::: provider list add provider at front:::newEntry->new->PreferencesEntry->oldEntry->foundSomeMech->list->preferences->iterator->while->list->hasNext->list->next->if->newEntry->implies->list->remove->if->addAllMechsFromProvider->else->oidStr->mechOid->toString->if->p->getProperty->throw->p->getName->new->GSSExceptionImpl->mechs->add->if->preferences->add
ProviderList#addProviderAtEnd(Provider, Oid)::: provider list add provider at end:::newEntry->new->PreferencesEntry->oldEntry->foundSomeMech->list->preferences->iterator->while->list->hasNext->list->next->if->oldEntry->implies->return->if->addAllMechsFromProvider->else->oidStr->mechOid->toString->if->p->getProperty->throw->p->getName->new->GSSExceptionImpl->mechs->add->if->preferences->add
ProviderList#addAllMechsFromProvider(Provider):::Helper routine to go through all properties contined in a provider and add its mechanisms to the list of supported mechanisms:::prop->retVal->props->p->keys->while->props->hasMoreElements->props->nextElement->if->isMechFactoryProperty->try->mechOid->getOidFromMechFactoryProperty->mechs->add->catch->GSSUtil->p->getName->debug->finally->return
ProviderList.PreferencesEntry#equals(Object)::: preferences entry equals:::if->return->if->return->that->if->getName->getName->equals->if->return->equals->else->return->return
ProviderList.PreferencesEntry#hashCode()::: preferences entry hash code:::result->p->getName->hashCode->if->oid->hashCode->return
ProviderList.PreferencesEntry#implies(Object):::Determines if a preference implies another:::if->temp->return->equals->p->getName->getName->equals->else->return
ProviderList.PreferencesEntry#getProvider()::: preferences entry get provider:::return
ProviderList.PreferencesEntry#getOid()::: preferences entry get oid:::return
ProviderList.PreferencesEntry#impliesMechanism(Oid):::Determines if this entry is applicable to the desired mechanism:::return->equals
ProviderList.PreferencesEntry#toString()::: preferences entry to string:::sb->new->StringBuilder->sb->p->getName->append->sb->append->sb->append->sb->append->return->sb->toString
SunProvider.ProviderService#newInstance(Object)::: provider service new instance:::type->getType->if->throw->new->InvalidParameterException->algo->getAlgorithm->try->if->type->equals->if->algo->equals->return->new->Krb5MechFactory->else->if->algo->equals->return->new->SpNegoMechFactory->catch->throw->new->NoSuchAlgorithmException->finally->throw->new->ProviderException
TokenTracker#getIntervalIndex(int):::Returns the index for the entry into which this number will fit:::entry->i->for->list->size->return
TokenTracker#getProps(int, MessageProp):::Sets the sequencing and replay information for the given token number:::gap->old->unsequenced->duplicate->pos->getIntervalIndex->entry->if->list->get->if->else->if->entry->contains->else->if->if->else->if->else->if->else->else->if->if->else->if->if->else->else->else->if->else->if->else->if->add->if->prop->setSupplementaryStates
TokenTracker#add(int, int):::Adds the number to the list just after the entry that is currently at position prevEntryPos:::entry->entryBefore->entryAfter->appended->prepended->if->list->get->if->entryBefore->getEnd->entryBefore->setEnd->nextEntryPos->if->list->size->list->get->if->entryAfter->getStart->if->entryAfter->setStart->else->entryAfter->entryBefore->getStart->setStart->list->remove->if->if->return->if->list->size->new->Entry->if->else->oldWindowStartIndex->if->list->size->list->remove->list->get->getStart->entry->setStart->entry->setEnd->if->else->if->if->else->list->add
TokenTracker#toString()::: token tracker to string:::sb->new->StringBuilder->sb->append->append->sb->append->append->sb->append->append->sb->append->append->sb->append->for->i->list->size->sb->append->return->sb->toString
TokenTracker.Entry#compareTo(int):::Returns -1 if this interval represented by this entry precedes the number, 0 if the number is contained in the interval, and -1 if the interval occurs after the number.:::if->return->else->if->return->else->return
TokenTracker.Entry#contains(int)::: entry contains:::return
TokenTracker.Entry#append(int)::: entry append:::if
TokenTracker.Entry#setInterval(int, int)::: entry set interval:::
TokenTracker.Entry#setEnd(int)::: entry set end:::
TokenTracker.Entry#setStart(int)::: entry set start:::
TokenTracker.Entry#getStart()::: entry get start:::return
TokenTracker.Entry#getEnd()::: entry get end:::return
TokenTracker.Entry#toString()::: entry to string:::return

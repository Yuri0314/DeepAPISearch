jdk.vm.ci.code.Architecture#toString()->String:::Converts this architecture to a string.
jdk.vm.ci.code.Architecture#getWordSize()->int:::Gets the natural size of words (typically registers and pointers) of this architecture, in bytes.
jdk.vm.ci.code.Architecture#getWordKind()->PlatformKind::: architecture get word kind
jdk.vm.ci.code.Architecture#getName()->String:::Gets the name of this architecture.
jdk.vm.ci.code.Architecture#getRegisters()->RegisterArray:::Gets the list of all registers that exist on this architecture
jdk.vm.ci.code.Architecture#getAvailableValueRegisters()->RegisterArray:::Gets a list of all registers available for storing values on this architecture
jdk.vm.ci.code.Architecture#getByteOrder()->ByteOrder::: architecture get byte order
jdk.vm.ci.code.Architecture#supportsUnalignedMemoryAccess()->boolean::: architecture supports unaligned memory access
jdk.vm.ci.code.Architecture#getReturnAddressSize()->int:::Gets the size of the return address pushed to the stack by a call instruction
jdk.vm.ci.code.Architecture#getMachineCodeCallDisplacementOffset()->int:::Gets the offset in bytes from the beginning of a call instruction to the displacement.
jdk.vm.ci.code.Architecture#requiredBarriers(int)->int:::Determines the barriers in a given barrier mask that are explicitly required on this architecture.
jdk.vm.ci.code.Architecture#canStoreValue(RegisterCategory, PlatformKind)->boolean:::Determine whether a kind can be stored in a register of a given category.
jdk.vm.ci.code.Architecture#getLargestStorableKind(RegisterCategory)->PlatformKind:::Return the largest kind that can be stored in a register of a given category.
jdk.vm.ci.code.Architecture#getPlatformKind(JavaKind)->PlatformKind:::Gets the PlatformKind that is used to store values of a given JavaKind.
jdk.vm.ci.code.Architecture#equals(Object)->boolean::: architecture equals
jdk.vm.ci.code.Architecture#hashCode()->int::: architecture hash code
jdk.vm.ci.code.BailoutException#isPermanent()->boolean::: bailout exception is permanent
jdk.vm.ci.code.BytecodeFrame#isPlaceholderBci(int)->boolean:::Determines if a given BCI matches one of the placeholder BCI constants defined in this class.
jdk.vm.ci.code.BytecodeFrame#getPlaceholderBciName(int)->String:::Gets the name of a given placeholder BCI.
jdk.vm.ci.code.BytecodeFrame#validateFormat()->boolean:::Ensure that the frame state is formatted as expected by the JVM, with null or Illegal in the slot following a double word item
jdk.vm.ci.code.BytecodeFrame#getLocalValueKind(int)->JavaKind:::Gets the kind of a local variable.
jdk.vm.ci.code.BytecodeFrame#getStackValueKind(int)->JavaKind:::Gets the kind of a stack slot.
jdk.vm.ci.code.BytecodeFrame#getLocalValue(int)->JavaValue:::Gets the value representing the specified local variable.
jdk.vm.ci.code.BytecodeFrame#getStackValue(int)->JavaValue:::Gets the value representing the specified stack slot.
jdk.vm.ci.code.BytecodeFrame#getLockValue(int)->JavaValue:::Gets the value representing the specified lock.
jdk.vm.ci.code.BytecodeFrame#caller()->BytecodeFrame:::Gets the caller of this frame.
jdk.vm.ci.code.BytecodeFrame#hashCode()->int::: bytecode frame hash code
jdk.vm.ci.code.BytecodeFrame#equals(Object)->boolean::: bytecode frame equals
jdk.vm.ci.code.BytecodeFrame#toString()->String::: bytecode frame to string
jdk.vm.ci.code.BytecodePosition#toString()->String:::Converts this code position to a string representation.
jdk.vm.ci.code.BytecodePosition#equals(Object)->boolean:::Deep equality test.
jdk.vm.ci.code.BytecodePosition#hashCode()->int::: bytecode position hash code
jdk.vm.ci.code.BytecodePosition#getBCI()->int::: bytecode position get i
jdk.vm.ci.code.BytecodePosition#getMethod()->ResolvedJavaMethod::: bytecode position get method
jdk.vm.ci.code.BytecodePosition#getCaller()->BytecodePosition:::The position where this position has been called, null if none.
jdk.vm.ci.code.BytecodePosition#addCaller(BytecodePosition)->BytecodePosition:::Adds a caller to the current position returning the new position.
jdk.vm.ci.code.CallingConvention#getReturn()->AllocatableValue:::Gets the location for the return value or Value#ILLEGAL if a void call.
jdk.vm.ci.code.CallingConvention#getArgument(int)->AllocatableValue:::Gets the location for the index'th argument.
jdk.vm.ci.code.CallingConvention#getStackSize()->int:::Gets the amount of stack space (in bytes) required for the stack-based arguments of the call.
jdk.vm.ci.code.CallingConvention#getArgumentCount()->int:::Gets the number of locations required for the arguments.
jdk.vm.ci.code.CallingConvention#getArguments()->AllocatableValue[]:::Gets the locations required for the arguments.
jdk.vm.ci.code.CallingConvention#toString()->String::: calling convention to string
jdk.vm.ci.code.CodeCacheProvider#addCode(ResolvedJavaMethod, CompiledCode, SpeculationLog, InstalledCode)->InstalledCode:::Installs code for a given method based on a given compilation result without making it the default implementation of the method.
jdk.vm.ci.code.CodeCacheProvider#setDefaultCode(ResolvedJavaMethod, CompiledCode)->InstalledCode:::Installs code for a given method based on a given compilation result and makes it the default implementation of the method.
jdk.vm.ci.code.CodeCacheProvider#installCode(ResolvedJavaMethod, CompiledCode, InstalledCode, SpeculationLog, boolean)->InstalledCode:::Installs code based on a given compilation result.
jdk.vm.ci.code.CodeCacheProvider#invalidateInstalledCode(InstalledCode)->void:::Invalidates installedCode such that InvalidInstalledCodeException will be raised the next time installedCode is InstalledCode#executeVarargs(Object...) executed.
jdk.vm.ci.code.CodeCacheProvider#getMarkName(Mark)->String:::Gets a name for a Mark mark.
jdk.vm.ci.code.CodeCacheProvider#getTargetName(Call)->String:::Gets a name for the Call#target target of a Call.
jdk.vm.ci.code.CodeCacheProvider#getRegisterConfig()->RegisterConfig:::Gets the register configuration to use when compiling a given method.
jdk.vm.ci.code.CodeCacheProvider#getMinimumOutgoingSize()->int:::Minimum size of the stack area reserved for outgoing parameters
jdk.vm.ci.code.CodeCacheProvider#getTarget()->TargetDescription:::Gets a description of the target architecture.
jdk.vm.ci.code.CodeCacheProvider#createSpeculationLog()->SpeculationLog:::Create a new speculation log for the target runtime.
jdk.vm.ci.code.CodeCacheProvider#getMaxCallTargetOffset(long)->long:::Returns the maximum absolute offset of a PC relative call to a given address from any position in the code cache or -1 when not applicable
jdk.vm.ci.code.CodeCacheProvider#shouldDebugNonSafepoints()->boolean:::Determines if debug info should also be emitted at non-safepoint locations.
jdk.vm.ci.code.CodeUtil#isOdd(int)->boolean::: code util is odd
jdk.vm.ci.code.CodeUtil#isEven(int)->boolean::: code util is even
jdk.vm.ci.code.CodeUtil#isPowerOf2(int)->boolean:::Checks whether the specified integer is a power of two.
jdk.vm.ci.code.CodeUtil#isPowerOf2(long)->boolean:::Checks whether the specified long is a power of two.
jdk.vm.ci.code.CodeUtil#log2(int)->int:::Computes the log (base 2) of the specified integer, rounding down
jdk.vm.ci.code.CodeUtil#log2(long)->int:::Computes the log (base 2) of the specified long, rounding down
jdk.vm.ci.code.CodeUtil#narrow(long, int)->long:::Narrow an integer value to a given bit width, and return the result as a signed long.
jdk.vm.ci.code.CodeUtil#signExtend(long, int)->long:::Sign extend an integer.
jdk.vm.ci.code.CodeUtil#zeroExtend(long, int)->long:::Zero extend an integer.
jdk.vm.ci.code.CodeUtil#convert(long, int, boolean)->long:::Convert an integer to long.
jdk.vm.ci.code.CodeUtil#mask(int)->long:::Get a bitmask with the low bits bit set and the high 64 - bits bit clear.
jdk.vm.ci.code.CodeUtil#minValue(int)->long:::Get the minimum value representable in a bits bit signed integer.
jdk.vm.ci.code.CodeUtil#maxValue(int)->long:::Get the maximum value representable in a bits bit signed integer.
jdk.vm.ci.code.CodeUtil#tabulateValues(BytecodeFrame)->String:::Formats the values in a frame as a tabulated string.
jdk.vm.ci.code.CodeUtil#tabulate(Object[], int, int, int)->String:::Formats a given table as a string
jdk.vm.ci.code.CodeUtil#append(StringBuilder, BytecodePosition)->StringBuilder:::Appends a formatted code position to a StringBuilder.
jdk.vm.ci.code.CodeUtil#append(StringBuilder, BytecodeFrame)->StringBuilder:::Appends a formatted frame to a StringBuilder.
jdk.vm.ci.code.CodeUtil.RefMapFormatter#formatStackSlot(int)->String::: ref map formatter format stack slot
jdk.vm.ci.code.CodeUtil.DefaultRefMapFormatter#formatStackSlot(int)->String::: default ref map formatter format stack slot
jdk.vm.ci.code.CodeUtil.NumberedRefMapFormatter#formatStackSlot(int)->String::: numbered ref map formatter format stack slot
jdk.vm.ci.code.CodeUtil.NumberedRefMapFormatter#formatRegister(int)->String::: numbered ref map formatter format register
jdk.vm.ci.code.CodeUtil#append(StringBuilder, DebugInfo, RefMapFormatter)->StringBuilder:::Appends a formatted debug info to a StringBuilder.
jdk.vm.ci.code.CodeUtil#getCallingConvention(CodeCacheProvider, CallingConvention.Type, ResolvedJavaMethod, ValueKindFactory)->CallingConvention:::Create a calling convention from a ResolvedJavaMethod.
jdk.vm.ci.code.CompilationRequest#getMethod()->ResolvedJavaMethod:::Gets the method to be compiled.
jdk.vm.ci.code.CompilationRequest#getEntryBCI()->int:::Gets the bytecode index (BCI) at which to start compiling where -1 denotes a non-OSR compilation request and all other values denote an on stack replacement (OSR) compilation request.
jdk.vm.ci.code.CompilationRequest#toString()->String::: compilation request to string
jdk.vm.ci.code.CompilationRequestResult#getFailure()->Object:::Determines if the compilation was successful.
jdk.vm.ci.code.DebugInfo#setReferenceMap(ReferenceMap)->void::: debug info set reference map
jdk.vm.ci.code.DebugInfo#hasFrame()->boolean::: debug info has frame
jdk.vm.ci.code.DebugInfo#frame()->BytecodeFrame:::Gets the deoptimization information for each inlined frame (if available).
jdk.vm.ci.code.DebugInfo#toString()->String::: debug info to string
jdk.vm.ci.code.DebugInfo#getBytecodePosition()->BytecodePosition::: debug info get bytecode position
jdk.vm.ci.code.DebugInfo#getReferenceMap()->ReferenceMap::: debug info get reference map
jdk.vm.ci.code.DebugInfo#getVirtualObjectMapping()->VirtualObject[]::: debug info get virtual object mapping
jdk.vm.ci.code.DebugInfo#setCalleeSaveInfo(RegisterSaveLayout)->void:::Sets the map from the registers (in the caller's frame) to the slots where they are saved in the current frame.
jdk.vm.ci.code.DebugInfo#getCalleeSaveInfo()->RegisterSaveLayout:::Gets the map from the registers (in the caller's frame) to the slots where they are saved in the current frame
jdk.vm.ci.code.DebugInfo#hashCode()->int::: debug info hash code
jdk.vm.ci.code.DebugInfo#equals(Object)->boolean::: debug info equals
jdk.vm.ci.code.InstalledCode#getAddress()->long::: installed code get address
jdk.vm.ci.code.InstalledCode#getEntryPoint()->long::: installed code get entry point
jdk.vm.ci.code.InstalledCode#getVersion()->long::: installed code get version
jdk.vm.ci.code.InstalledCode#getName()->String:::Returns the name of this installed code.
jdk.vm.ci.code.InstalledCode#getStart()->long:::Returns the start address of this installed code if it is #isValid() valid, 0 otherwise.
jdk.vm.ci.code.InstalledCode#isValid()->boolean::: installed code is valid
jdk.vm.ci.code.InstalledCode#isAlive()->boolean::: installed code is alive
jdk.vm.ci.code.InstalledCode#getCode()->byte[]:::Returns a copy of this installed code if it is #isValid() valid, null otherwise.
jdk.vm.ci.code.InstalledCode#invalidate()->void:::Invalidates this installed code such that any subsequent #executeVarargs(Object...) invocation will throw an InvalidInstalledCodeException and all existing invocations will be deoptimized.
jdk.vm.ci.code.InstalledCode#executeVarargs(Object...)->Object:::Executes the installed code with a variable number of arguments.
jdk.vm.ci.code.Location#register(Register)->Location:::Create a Location for a register.
jdk.vm.ci.code.Location#subregister(Register, int)->Location:::Create a Location for a vector subregister.
jdk.vm.ci.code.Location#stack(int)->Location:::Create a Location for a stack slot.
jdk.vm.ci.code.Location#isRegister()->boolean::: location is register
jdk.vm.ci.code.Location#isStack()->boolean::: location is stack
jdk.vm.ci.code.Location#toString()->String::: location to string
jdk.vm.ci.code.MemoryBarriers#barriersString(int)->String::: memory barriers barriers string
jdk.vm.ci.code.Register#encoding()->int:::The assembler calls this method to get the register's encoding.
jdk.vm.ci.code.Register.RegisterCategory#toString()->String::: register category to string
jdk.vm.ci.code.Register.RegisterCategory#hashCode()->int::: register category hash code
jdk.vm.ci.code.Register.RegisterCategory#equals(Object)->boolean::: register category equals
jdk.vm.ci.code.Register#getRegisterCategory()->RegisterCategory::: register get register category
jdk.vm.ci.code.Register#mayContainReference()->boolean:::Determine whether this register needs to be part of the reference map.
jdk.vm.ci.code.Register#asValue(ValueKind)->RegisterValue:::Gets this register as a RegisterValue value with a specified kind.
jdk.vm.ci.code.Register#asValue()->RegisterValue:::Gets this register as a RegisterValue value with no particular kind.
jdk.vm.ci.code.Register#isValid()->boolean:::Determines if this is a valid register.
jdk.vm.ci.code.Register#toString()->String::: register to string
jdk.vm.ci.code.Register#compareTo(Register)->int::: register compare to
jdk.vm.ci.code.Register#hashCode()->int::: register hash code
jdk.vm.ci.code.Register#equals(Object)->boolean::: register equals
jdk.vm.ci.code.RegisterArray#size()->int:::Gets the number of registers.
jdk.vm.ci.code.RegisterArray#get(int)->Register:::Gets the register at a given index.
jdk.vm.ci.code.RegisterArray#addTo(Collection)->void::: register array add to
jdk.vm.ci.code.RegisterArray#asList()->List:::Gets an immutable view of the registers as a list.
jdk.vm.ci.code.RegisterArray#toArray()->Register[]:::Gets a copy of the registers as an array.
jdk.vm.ci.code.RegisterArray#iterator()->Iterator::: register array iterator
jdk.vm.ci.code.RegisterArray#hashCode()->int::: register array hash code
jdk.vm.ci.code.RegisterArray#equals(Object)->boolean::: register array equals
jdk.vm.ci.code.RegisterArray#toString()->String::: register array to string
jdk.vm.ci.code.RegisterAttributes#createMap(RegisterConfig, RegisterArray)->RegisterAttributes[]:::Creates a map from register Register#number numbers to register RegisterAttributes attributes for a given register configuration and set of registers.
jdk.vm.ci.code.RegisterAttributes#isAllocatable()->boolean::: register attributes is allocatable
jdk.vm.ci.code.RegisterAttributes#isCalleeSave()->boolean::: register attributes is callee save
jdk.vm.ci.code.RegisterAttributes#isCallerSave()->boolean::: register attributes is caller save
jdk.vm.ci.code.RegisterConfig#getReturnRegister(JavaKind)->Register:::Gets the register to be used for returning a value of a given kind.
jdk.vm.ci.code.RegisterConfig#getMaximumFrameSize()->int:::Gets the maximum allowed size of the frame.
jdk.vm.ci.code.RegisterConfig#getFrameRegister()->Register:::Gets the register used as the frame pointer
jdk.vm.ci.code.RegisterConfig#getCallingConvention(Type, JavaType, JavaType[], ValueKindFactory)->CallingConvention:::Gets the calling convention describing how arguments are passed.
jdk.vm.ci.code.RegisterConfig#getCallingConventionRegisters(Type, JavaKind)->RegisterArray:::Gets the ordered set of registers that are can be used to pass parameters according to a given calling convention.
jdk.vm.ci.code.RegisterConfig#getAllocatableRegisters()->RegisterArray:::Gets the set of all registers that might be used by the register allocator.
jdk.vm.ci.code.RegisterConfig#filterAllocatableRegisters(PlatformKind, RegisterArray)->RegisterArray:::Filters a set of registers and returns only those that can be used by the register allocator for a value of a particular kind.
jdk.vm.ci.code.RegisterConfig#getCallerSaveRegisters()->RegisterArray:::Gets the registers whose values must be preserved by a method across any call it makes.
jdk.vm.ci.code.RegisterConfig#getCalleeSaveRegisters()->RegisterArray:::Gets the registers whose values must be preserved by the callee.
jdk.vm.ci.code.RegisterConfig#getAttributesMap()->RegisterAttributes[]:::Gets a map from register Register#number numbers to register RegisterAttributes attributes for this register configuration.
jdk.vm.ci.code.RegisterConfig#areAllAllocatableRegistersCallerSaved()->boolean:::Determines if all #getAllocatableRegisters() allocatable registers are #getCallerSaveRegisters() caller saved.
jdk.vm.ci.code.RegisterSaveLayout#registerToSlot(Register)->int:::Gets the frame slot index for a given register.
jdk.vm.ci.code.RegisterSaveLayout#registersToSlots(boolean)->Map:::Gets this layout information as a Map from registers to slots.
jdk.vm.ci.code.RegisterSaveLayout#slotsToRegisters(boolean)->Map:::Gets this layout information as a Map from slots to registers.
jdk.vm.ci.code.RegisterSaveLayout#hashCode()->int::: register save layout hash code
jdk.vm.ci.code.RegisterSaveLayout#equals(Object)->boolean::: register save layout equals
jdk.vm.ci.code.RegisterSaveLayout#toString()->String::: register save layout to string
jdk.vm.ci.code.RegisterValue#toString()->String::: register value to string
jdk.vm.ci.code.RegisterValue#getRegister()->Register::: register value get register
jdk.vm.ci.code.RegisterValue#hashCode()->int::: register value hash code
jdk.vm.ci.code.RegisterValue#equals(Object)->boolean::: register value equals
jdk.vm.ci.code.StackLockValue#getOwner()->JavaValue::: stack lock value get owner
jdk.vm.ci.code.StackLockValue#setOwner(JavaValue)->void::: stack lock value set owner
jdk.vm.ci.code.StackLockValue#getSlot()->Value::: stack lock value get slot
jdk.vm.ci.code.StackLockValue#isEliminated()->boolean::: stack lock value is eliminated
jdk.vm.ci.code.StackLockValue#toString()->String::: stack lock value to string
jdk.vm.ci.code.StackLockValue#hashCode()->int::: stack lock value hash code
jdk.vm.ci.code.StackLockValue#equals(Object)->boolean::: stack lock value equals
jdk.vm.ci.code.StackLockValue#setSlot(AllocatableValue)->void::: stack lock value set slot
jdk.vm.ci.code.StackSlot#get(ValueKind, int, boolean)->StackSlot:::Gets a StackSlot instance representing a stack slot at a given index holding a value of a given kind.
jdk.vm.ci.code.StackSlot#getOffset(int)->int:::Gets the offset of this stack slot, relative to the stack pointer.
jdk.vm.ci.code.StackSlot#isInCallerFrame()->boolean::: stack slot is in caller frame
jdk.vm.ci.code.StackSlot#getRawOffset()->int::: stack slot get raw offset
jdk.vm.ci.code.StackSlot#getRawAddFrameSize()->boolean::: stack slot get raw add frame size
jdk.vm.ci.code.StackSlot#toString()->String::: stack slot to string
jdk.vm.ci.code.StackSlot#asOutArg()->StackSlot:::Gets this stack slot used to pass an argument from the perspective of a caller.
jdk.vm.ci.code.StackSlot#asInArg()->StackSlot:::Gets this stack slot used to pass an argument from the perspective of a callee.
jdk.vm.ci.code.StackSlot#hashCode()->int::: stack slot hash code
jdk.vm.ci.code.StackSlot#equals(Object)->boolean::: stack slot equals
jdk.vm.ci.code.TargetDescription#hashCode()->int::: target description hash code
jdk.vm.ci.code.TargetDescription#equals(Object)->boolean::: target description equals
jdk.vm.ci.code.TargetDescription#toString()->String::: target description to string
jdk.vm.ci.code.ValueKindFactory#getValueKind(JavaKind)->K::: value kind factory get value kind
jdk.vm.ci.code.ValueUtil#isIllegal(Value)->boolean::: value util is illegal
jdk.vm.ci.code.ValueUtil#isIllegalJavaValue(JavaValue)->boolean::: value util is illegal java value
jdk.vm.ci.code.ValueUtil#isLegal(Value)->boolean::: value util is legal
jdk.vm.ci.code.ValueUtil#isVirtualObject(JavaValue)->boolean::: value util is virtual object
jdk.vm.ci.code.ValueUtil#asVirtualObject(JavaValue)->VirtualObject::: value util as virtual object
jdk.vm.ci.code.ValueUtil#isConstantJavaValue(JavaValue)->boolean::: value util is constant java value
jdk.vm.ci.code.ValueUtil#asConstantJavaValue(JavaValue)->JavaConstant::: value util as constant java value
jdk.vm.ci.code.ValueUtil#isAllocatableValue(Value)->boolean::: value util is allocatable value
jdk.vm.ci.code.ValueUtil#asAllocatableValue(Value)->AllocatableValue::: value util as allocatable value
jdk.vm.ci.code.ValueUtil#isStackSlot(Value)->boolean::: value util is stack slot
jdk.vm.ci.code.ValueUtil#asStackSlot(Value)->StackSlot::: value util as stack slot
jdk.vm.ci.code.ValueUtil#isRegister(Value)->boolean::: value util is register
jdk.vm.ci.code.ValueUtil#asRegister(Value)->Register::: value util as register
jdk.vm.ci.code.ValueUtil#asRegisterValue(Value)->RegisterValue::: value util as register value
jdk.vm.ci.code.ValueUtil#asRegister(Value, PlatformKind)->Register::: value util as register
jdk.vm.ci.code.VirtualObject#get(ResolvedJavaType, int)->VirtualObject:::Creates a new VirtualObject for the given type, with the given fields
jdk.vm.ci.code.VirtualObject#get(ResolvedJavaType, int, boolean)->VirtualObject:::Creates a new VirtualObject for the given type, with the given fields
jdk.vm.ci.code.VirtualObject.LayoutVerifier#getOffset(ResolvedJavaField)->int::: layout verifier get offset
jdk.vm.ci.code.VirtualObject.LayoutVerifier#getStorageKind(ResolvedJavaField)->JavaKind::: layout verifier get storage kind
jdk.vm.ci.code.VirtualObject#verifyLayout(LayoutVerifier)->void::: virtual object verify layout
jdk.vm.ci.code.VirtualObject#toString()->String::: virtual object to string
jdk.vm.ci.code.VirtualObject#getType()->ResolvedJavaType:::Returns the type of the object whose allocation was removed during compilation
jdk.vm.ci.code.VirtualObject#getValues()->JavaValue[]:::Returns the array containing all the values to be stored into the object when it is recreated
jdk.vm.ci.code.VirtualObject#getSlotKind(int)->JavaKind:::Returns the kind of the value at index.
jdk.vm.ci.code.VirtualObject#getId()->int:::Returns the unique id that identifies the object within the debug information for one position in the compiled code.
jdk.vm.ci.code.VirtualObject#isAutoBox()->boolean:::Returns true if the object is a box
jdk.vm.ci.code.VirtualObject#setIsAutoBox(boolean)->void:::Sets the value of the box flag.
jdk.vm.ci.code.VirtualObject#setValues(JavaValue[], JavaKind[])->void:::Overwrites the current set of values with a new one.
jdk.vm.ci.code.VirtualObject#hashCode()->int::: virtual object hash code
jdk.vm.ci.code.VirtualObject#equals(Object)->boolean::: virtual object equals

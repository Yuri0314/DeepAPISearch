Architecture#toString():::Converts this architecture to a string.:::return->getName->toLowerCase
Architecture#getWordSize():::Gets the natural size of words (typically registers and pointers) of this architecture, in bytes.:::return->wordKind->getSizeInBytes
Architecture#getName():::Gets the name of this architecture.:::return
Architecture#getRegisters():::Gets the list of all registers that exist on this architecture:::return
Architecture#getAvailableValueRegisters():::Gets a list of all registers available for storing values on this architecture:::return->getRegisters
Architecture#getReturnAddressSize():::Gets the size of the return address pushed to the stack by a call instruction:::return
Architecture#getMachineCodeCallDisplacementOffset():::Gets the offset in bytes from the beginning of a call instruction to the displacement.:::return
Architecture#requiredBarriers(int):::Determines the barriers in a given barrier mask that are explicitly required on this architecture.:::return
Architecture#canStoreValue(RegisterCategory, PlatformKind):::Determine whether a kind can be stored in a register of a given category.:::
Architecture#getLargestStorableKind(RegisterCategory):::Return the largest kind that can be stored in a register of a given category.:::
Architecture#getPlatformKind(JavaKind):::Gets the PlatformKind that is used to store values of a given JavaKind.:::
BytecodeFrame#isPlaceholderBci(int):::Determines if a given BCI matches one of the placeholder BCI constants defined in this class.:::return
BytecodeFrame#getPlaceholderBciName(int):::Gets the name of a given placeholder BCI.:::if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->return
BytecodeFrame#validateFormat():::Ensure that the frame state is formatted as expected by the JVM, with null or Illegal in the slot following a double word item:::if->caller->caller->validateFormat->for->i->return
BytecodeFrame#getLocalValueKind(int):::Gets the kind of a local variable.:::if->throw->new->IndexOutOfBoundsException->return
BytecodeFrame#getStackValueKind(int):::Gets the kind of a stack slot.:::if->throw->new->IndexOutOfBoundsException->return
BytecodeFrame#getLocalValue(int):::Gets the value representing the specified local variable.:::if->throw->new->IndexOutOfBoundsException->return
BytecodeFrame#getStackValue(int):::Gets the value representing the specified stack slot.:::if->throw->new->IndexOutOfBoundsException->return
BytecodeFrame#getLockValue(int):::Gets the value representing the specified lock.:::if->throw->new->IndexOutOfBoundsException->return
BytecodeFrame#caller():::Gets the caller of this frame.:::return->getCaller
BytecodePosition#toString():::Converts this code position to a string representation.:::return->CodeUtil->new->StringBuilder->append->toString
BytecodePosition#equals(Object):::Deep equality test.:::if->return->if->getClass->obj->getClass->that->if->Objects->this->getMethod->that->getMethod->equals->Objects->equals->return->return
BytecodePosition#getCaller():::The position where this position has been called, null if none.:::return
BytecodePosition#addCaller(BytecodePosition):::Adds a caller to the current position returning the new position.:::if->getCaller->return->getMethod->getBCI->new->BytecodePosition->else->return->getCaller->addCaller->getMethod->getBCI->new->BytecodePosition
CallingConvention#getReturn():::Gets the location for the return value or Value#ILLEGAL if a void call.:::return
CallingConvention#getArgument(int):::Gets the location for the index'th argument.:::return
CallingConvention#getStackSize():::Gets the amount of stack space (in bytes) required for the stack-based arguments of the call.:::return
CallingConvention#getArgumentCount():::Gets the number of locations required for the arguments.:::return
CallingConvention#getArguments():::Gets the locations required for the arguments.:::if->return->return->argumentLocations->clone
CodeCacheProvider#addCode(ResolvedJavaMethod, CompiledCode, SpeculationLog, InstalledCode):::Installs code for a given method based on a given compilation result without making it the default implementation of the method.:::return->installCode
CodeCacheProvider#setDefaultCode(ResolvedJavaMethod, CompiledCode):::Installs code for a given method based on a given compilation result and makes it the default implementation of the method.:::return->installCode
CodeCacheProvider#installCode(ResolvedJavaMethod, CompiledCode, InstalledCode, SpeculationLog, boolean):::Installs code based on a given compilation result.:::
CodeCacheProvider#invalidateInstalledCode(InstalledCode):::Invalidates installedCode such that InvalidInstalledCodeException will be raised the next time installedCode is InstalledCode#executeVarargs(Object...) executed.:::
CodeCacheProvider#getMarkName(Mark):::Gets a name for a Mark mark.:::return->String->valueOf
CodeCacheProvider#getTargetName(Call):::Gets a name for the Call#target target of a Call.:::return->String->valueOf
CodeCacheProvider#getRegisterConfig():::Gets the register configuration to use when compiling a given method.:::
CodeCacheProvider#getMinimumOutgoingSize():::Minimum size of the stack area reserved for outgoing parameters:::
CodeCacheProvider#getTarget():::Gets a description of the target architecture.:::
CodeCacheProvider#createSpeculationLog():::Create a new speculation log for the target runtime.:::
CodeCacheProvider#getMaxCallTargetOffset(long):::Returns the maximum absolute offset of a PC relative call to a given address from any position in the code cache or -1 when not applicable:::
CodeCacheProvider#shouldDebugNonSafepoints():::Determines if debug info should also be emitted at non-safepoint locations.:::
CodeUtil#isPowerOf2(int):::Checks whether the specified integer is a power of two.:::return
CodeUtil#isPowerOf2(long):::Checks whether the specified long is a power of two.:::return
CodeUtil#log2(int):::Computes the log (base 2) of the specified integer, rounding down:::return->Integer->numberOfLeadingZeros
CodeUtil#log2(long):::Computes the log (base 2) of the specified long, rounding down:::return->Long->numberOfLeadingZeros
CodeUtil#narrow(long, int):::Narrow an integer value to a given bit width, and return the result as a signed long.:::ret->mask->return->signExtend
CodeUtil#signExtend(long, int):::Sign extend an integer.:::if->if->return->else->return->else->return
CodeUtil#zeroExtend(long, int):::Zero extend an integer.:::if->return->else->return
CodeUtil#convert(long, int, boolean):::Convert an integer to long.:::if->return->zeroExtend->else->return->signExtend
CodeUtil#mask(int):::Get a bitmask with the low bits bit set and the high 64 - bits bit clear.:::if->return->else->return
CodeUtil#minValue(int):::Get the minimum value representable in a bits bit signed integer.:::return
CodeUtil#maxValue(int):::Get the maximum value representable in a bits bit signed integer.:::return->mask
CodeUtil#tabulateValues(BytecodeFrame):::Formats the values in a frame as a tabulated string.:::cols->Math->Math->max->max->cells->new->ArrayList<>->cells->add->for->i->if->cells->add->cells->Arrays->asList->subList->addAll->cells->Collections->nCopies->addAll->if->cells->add->cells->Arrays->asList->subList->addAll->cells->Collections->nCopies->addAll->if->cells->add->cells->Arrays->asList->subList->addAll->cells->Collections->nCopies->addAll->cellArray->cells->toArray->for->i->return->CodeUtil->tabulate
CodeUtil#tabulate(Object[], int, int, int):::Formats a given table as a string:::rows->colWidths->new->intArr->for->col->sb->new->StringBuilder->nl->for->row->return->sb->toString
CodeUtil#append(StringBuilder, BytecodePosition):::Appends a formatted code position to a StringBuilder.:::MetaUtil->sb->append->pos->getMethod->pos->getBCI->appendLocation->if->pos->getCaller->sb->append->pos->getCaller->append->return
CodeUtil#append(StringBuilder, BytecodeFrame):::Appends a formatted frame to a StringBuilder.:::MetaUtil->sb->append->frame->getMethod->frame->getBCI->appendLocation->sb->sb->length->deleteCharAt->sb->append->append->append->append->append->if->sb->append->table->tabulateValues->rows->table->split->for->i->if->frame->caller->sb->append->frame->caller->append->else->if->frame->getCaller->sb->append->frame->getCaller->append->return
CodeUtil#append(StringBuilder, DebugInfo, RefMapFormatter):::Appends a formatted debug info to a StringBuilder.:::formatter->if->new->NumberedRefMapFormatter->nl->refMap->info->getReferenceMap->if->sb->refMap->toString->append->calleeSaveInfo->info->getCalleeSaveInfo->if->sb->append->append->map->calleeSaveInfo->slotsToRegisters->foreach->map->entrySet->sb->append->e->getValue->append->append->formatter->e->getKey->formatStackSlot->append->append->frame->info->frame->if->append->else->if->info->getBytecodePosition->info->getBytecodePosition->append->return
CodeUtil#getCallingConvention(CodeCacheProvider, CallingConvention.Type, ResolvedJavaMethod, ValueKindFactory):::Create a calling convention from a ResolvedJavaMethod.:::sig->method->getSignature->retType->sig->getReturnType->sigCount->sig->getParameterCount->argTypes->argIndex->if->method->isStatic->new->JavaTypeArr->method->getDeclaringClass->else->new->JavaTypeArr->for->i->registerConfig->codeCache->getRegisterConfig->return->registerConfig->getCallingConvention
CompilationRequest#getMethod():::Gets the method to be compiled.:::return
CompilationRequest#getEntryBCI():::Gets the bytecode index (BCI) at which to start compiling where -1 denotes a non-OSR compilation request and all other values denote an on stack replacement (OSR) compilation request.:::return
CompilationRequestResult#getFailure():::Determines if the compilation was successful.:::
DebugInfo#frame():::Gets the deoptimization information for each inlined frame (if available).:::if->hasFrame->return->getBytecodePosition->return
DebugInfo#setCalleeSaveInfo(RegisterSaveLayout):::Sets the map from the registers (in the caller's frame) to the slots where they are saved in the current frame.:::
DebugInfo#getCalleeSaveInfo():::Gets the map from the registers (in the caller's frame) to the slots where they are saved in the current frame:::return
InstalledCode#getName():::Returns the name of this installed code.:::return
InstalledCode#getStart():::Returns the start address of this installed code if it is #isValid() valid, 0 otherwise.:::return
InstalledCode#getCode():::Returns a copy of this installed code if it is #isValid() valid, null otherwise.:::return
InstalledCode#invalidate():::Invalidates this installed code such that any subsequent #executeVarargs(Object...) invocation will throw an InvalidInstalledCodeException and all existing invocations will be deoptimized.:::throw->new->UnsupportedOperationException
InstalledCode#executeVarargs(Object...):::Executes the installed code with a variable number of arguments.:::throw->new->UnsupportedOperationException
Location#register(Register):::Create a Location for a register.:::return->new->Location
Location#subregister(Register, int):::Create a Location for a vector subregister.:::return->new->Location
Location#stack(int):::Create a Location for a stack slot.:::return->new->Location
Register#encoding():::The assembler calls this method to get the register's encoding.:::return
Register#mayContainReference():::Determine whether this register needs to be part of the reference map.:::return
Register#asValue(ValueKind):::Gets this register as a RegisterValue value with a specified kind.:::return->new->RegisterValue
Register#asValue():::Gets this register as a RegisterValue value with no particular kind.:::return->asValue
Register#isValid():::Determines if this is a valid register.:::return
RegisterArray#size():::Gets the number of registers.:::return
RegisterArray#get(int):::Gets the register at a given index.:::return
RegisterArray#asList():::Gets an immutable view of the registers as a list.:::return->Collections->Arrays->asList->unmodifiableList
RegisterArray#toArray():::Gets a copy of the registers as an array.:::return->registers->clone
RegisterAttributes#createMap(RegisterConfig, RegisterArray):::Creates a map from register Register#number numbers to register RegisterAttributes attributes for a given register configuration and set of registers.:::map->registers->size->new->RegisterAttributesArr->callerSaveRegisters->registerConfig->getCallerSaveRegisters->asList->calleeSaveRegisters->registerConfig->getCalleeSaveRegisters->Collections->emptyList->registerConfig->getCalleeSaveRegisters->asList->allocatableRegisters->registerConfig->getAllocatableRegisters->asList->foreach->if->attr->callerSaveRegisters->contains->calleeSaveRegisters->contains->allocatableRegisters->contains->new->RegisterAttributes->if->Arrays->copyOf->for->i->return
RegisterConfig#getReturnRegister(JavaKind):::Gets the register to be used for returning a value of a given kind.:::
RegisterConfig#getMaximumFrameSize():::Gets the maximum allowed size of the frame.:::return
RegisterConfig#getFrameRegister():::Gets the register used as the frame pointer:::
RegisterConfig#getCallingConvention(Type, JavaType, JavaType[], ValueKindFactory):::Gets the calling convention describing how arguments are passed.:::
RegisterConfig#getCallingConventionRegisters(Type, JavaKind):::Gets the ordered set of registers that are can be used to pass parameters according to a given calling convention.:::
RegisterConfig#getAllocatableRegisters():::Gets the set of all registers that might be used by the register allocator.:::
RegisterConfig#filterAllocatableRegisters(PlatformKind, RegisterArray):::Filters a set of registers and returns only those that can be used by the register allocator for a value of a particular kind.:::
RegisterConfig#getCallerSaveRegisters():::Gets the registers whose values must be preserved by a method across any call it makes.:::
RegisterConfig#getCalleeSaveRegisters():::Gets the registers whose values must be preserved by the callee.:::
RegisterConfig#getAttributesMap():::Gets a map from register Register#number numbers to register RegisterAttributes attributes for this register configuration.:::
RegisterConfig#areAllAllocatableRegistersCallerSaved():::Determines if all #getAllocatableRegisters() allocatable registers are #getCallerSaveRegisters() caller saved.:::
RegisterSaveLayout#registerToSlot(Register):::Gets the frame slot index for a given register.:::for->i->throw->new->IllegalArgumentException
RegisterSaveLayout#registersToSlots(boolean):::Gets this layout information as a Map from registers to slots.:::result->if->new->TreeMap<>->else->new->HashMap<>->for->i->return
RegisterSaveLayout#slotsToRegisters(boolean):::Gets this layout information as a Map from slots to registers.:::result->if->new->TreeMap<>->else->new->HashMap<>->for->i->return
StackSlot#get(ValueKind, int, boolean):::Gets a StackSlot instance representing a stack slot at a given index holding a value of a given kind.:::return->new->StackSlot
StackSlot#getOffset(int):::Gets the offset of this stack slot, relative to the stack pointer.:::result->return
StackSlot#asOutArg():::Gets this stack slot used to pass an argument from the perspective of a caller.:::if->return->getValueKind->get->return
StackSlot#asInArg():::Gets this stack slot used to pass an argument from the perspective of a callee.:::if->return->getValueKind->get->return
VirtualObject#get(ResolvedJavaType, int):::Creates a new VirtualObject for the given type, with the given fields:::return->new->VirtualObject
VirtualObject#get(ResolvedJavaType, int, boolean):::Creates a new VirtualObject for the given type, with the given fields:::return->new->VirtualObject
VirtualObject#getType():::Returns the type of the object whose allocation was removed during compilation:::return
VirtualObject#getValues():::Returns the array containing all the values to be stored into the object when it is recreated:::return
VirtualObject#getSlotKind(int):::Returns the kind of the value at index.:::return
VirtualObject#getId():::Returns the unique id that identifies the object within the debug information for one position in the compiled code.:::return
VirtualObject#isAutoBox():::Returns true if the object is a box:::return
VirtualObject#setIsAutoBox(boolean):::Sets the value of the box flag.:::
VirtualObject#setValues(JavaValue[], JavaKind[]):::Overwrites the current set of values with a new one.:::

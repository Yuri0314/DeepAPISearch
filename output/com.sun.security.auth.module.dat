Crypt#setkey(byte[])::: crypt setkey:::i->j->k->t->if->new->byteArr->for->for->for
Crypt#encrypt(byte[], int)::: crypt encrypt:::i->t->j->k->R->if->new->byteArr->for->for->for->for
Crypt#crypt(byte[], byte[])::: crypt crypt:::c->i->j->pwi->temp->block->new->byteArr->iobuf->new->byteArr->for->setkey->for->for->for->for->if->return
Crypt#main(String[])::: crypt main:::if->println->System->exit->c->new->Crypt->try->result->c->getBytes->getBytes->crypt->for->i->catch->finally
JndiLoginModule#initialize(Subject, CallbackHandler, Map, Map)::: jndi login module initialize:::options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->options->get->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase
JndiLoginModule#login():::Prompt for username and password:::if->throw->new->LoginException->if->throw->new->LoginException->if->println->println->if->try->attemptAuthentication->if->println->return->catch->cleanState->if->le->toString->println->finally->else->if->try->attemptAuthentication->if->println->return->catch->cleanState->if->println->throw->finally->try->attemptAuthentication->if->println->return->catch->cleanState->if->println->throw->finally
JndiLoginModule#commit():::Abstract method to commit the authentication process (phase 2):::if->return->else->if->subject->isReadOnly->cleanState->throw->new->LoginException->if->subject->getPrincipals->contains->subject->getPrincipals->add->if->subject->getPrincipals->contains->subject->getPrincipals->add->if->subject->getPrincipals->contains->subject->getPrincipals->add->for->i->supplementaryGroups->size->if->println->println->println->println->cleanState->return
JndiLoginModule#abort():::This method is called if the LoginContext's overall authentication failed:::if->println->if->return->else->if->cleanState->new->LinkedList<UnixNumericGroupPrincipal>->else->logout->return
JndiLoginModule#logout():::Logout a user:::if->subject->isReadOnly->cleanState->throw->new->LoginException->subject->getPrincipals->remove->subject->getPrincipals->remove->subject->getPrincipals->remove->for->i->supplementaryGroups->size->cleanState->new->LinkedList<UnixNumericGroupPrincipal>->if->println->return
JndiLoginModule#attemptAuthentication(boolean):::Attempt authentication:::encryptedPassword->getUsernamePassword->try->iCtx->new->InitialContext->iCtx->lookup->controls->new->SearchControls->ne->ctx->search->if->ne->hasMore->result->ne->next->attributes->result->getAttributes->pwd->attributes->get->encryptedPwd->pwd->get->new->String->encryptedPwd->CRYPT->length->substring->if->new->String->verifyPassword->if->println->else->if->println->throw->new->FailedLoginException->if->sharedState->containsKey->sharedState->containsKey->sharedState->put->sharedState->put->new->UnixPrincipal->uid->attributes->get->uidNumber->uid->get->new->UnixNumericUserPrincipal->if->println->gid->attributes->get->gidNumber->gid->get->new->UnixNumericGroupPrincipal->if->println->iCtx->lookup->ctx->new->BasicAttributes->search->while->ne->hasMore->ne->next->result->getAttributes->attributes->get->suppGid->gid->get->if->gidNumber->equals->suppPrincipal->new->UnixNumericGroupPrincipal->supplementaryGroups->add->if->println->else->if->println->throw->new->FailedLoginException->catch->if->println->ne->printStackTrace->throw->new->FailedLoginException->if->println->uee->printStackTrace->throw->new->LoginException->finally
JndiLoginModule#getUsernamePassword(boolean):::Get the username and password:::if->sharedState->get->sharedState->get->return->if->throw->new->LoginException->protocol->userProvider->userProvider->indexOf->substring->callbacks->new->CallbackArr->getAuthResourceString->new->NameCallback->getAuthResourceString->new->PasswordCallback->try->callbackHandler->handle->getName->tmpPassword->getPassword->new->charArr->System->arraycopy->clearPassword->catch->throw->ioe->toString->new->LoginException->throw->uce->getCallback->toString->new->LoginException->finally->if->println->print->for->i->println
JndiLoginModule#verifyPassword(String, String):::Verify a password against the encrypted passwd from /etc/shadow:::if->return->c->new->Crypt->try->oldCrypt->encryptedPassword->getBytes->newCrypt->c->password->getBytes->crypt->if->return->for->i->catch->return->finally->return
JndiLoginModule#cleanState():::Clean out state because of a failed authentication attempt:::if->for->i->if->sharedState->remove->sharedState->remove
KeyStoreLoginModule#initialize(Subject, CallbackHandler, Map, Map)::: key store login module initialize:::processOptions
KeyStoreLoginModule#processOptions()::: key store login module process options:::options->get->if->System->getProperty->replace->else->if->NONE->equals->options->get->if->KeyStore->getDefaultType->if->P11KEYSTORE->equalsIgnoreCase->options->get->options->get->options->get->options->get->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->if->debugPrint->debugPrint->debugPrint->debugPrint->debugPrint->debugPrint->debugPrint->debugPrint->debugPrint
KeyStoreLoginModule#login()::: key store login module login:::switch->throw->new->LoginException->if->throw->new->LoginException->if->throw->new->LoginException->if->throw->new->LoginException->if->getAliasAndPasswords->else->if->getAliasAndPasswords->else->getAliasAndPasswords->try->getKeyStoreInfo->catch->finally->if->Arrays->fill->if->Arrays->fill->return->return
KeyStoreLoginModule#getAliasAndPasswords(int):::Get the alias and passwords to use for looking up in the KeyStore.:::if->switch->checkAlias->break->checkAlias->checkStorePass->break->checkAlias->checkStorePass->checkKeyPass->break->else->aliasCallback->if->keyStoreAlias->length->getAuthResourceString->new->NameCallback->else->getAuthResourceString->new->NameCallback->storePassCallback->keyPassCallback->switch->break->getAuthResourceString->new->PasswordCallback->getAuthResourceString->new->PasswordCallback->break->prompt->if->debugPrint
KeyStoreLoginModule#checkAlias()::: key store login module check alias:::if->throw->new->LoginException
KeyStoreLoginModule#checkStorePass()::: key store login module check store pass:::if->throw->new->LoginException->in->try->new->URL->openStream->Password->readPassword->catch->le->new->LoginException->le->initCause->throw->finally->if->try->in->close->catch->le->new->LoginException->le->initCause->throw->finally
KeyStoreLoginModule#checkKeyPass()::: key store login module check key pass:::if->else->in->try->new->URL->openStream->Password->readPassword->catch->le->new->LoginException->le->initCause->throw->finally->if->try->in->close->catch->le->new->LoginException->le->initCause->throw->finally
KeyStoreLoginModule#prompt(NameCallback, PasswordCallback, PasswordCallback)::: key store login module prompt:::if->try->callbackHandler->new->CallbackArr->handle->catch->le->new->LoginException->le->initCause->throw->throw->e->getCallback->toString->new->LoginException->finally->confirmationResult->confirmationCallback->getSelectedIndex->if->throw->new->LoginException->saveAlias->else->if->try->callbackHandler->new->CallbackArr->handle->catch->le->new->LoginException->le->initCause->throw->throw->e->getCallback->toString->new->LoginException->finally->confirmationResult->confirmationCallback->getSelectedIndex->if->throw->new->LoginException->saveAlias->saveStorePass->else->try->callbackHandler->new->CallbackArr->handle->catch->le->new->LoginException->le->initCause->throw->throw->e->getCallback->toString->new->LoginException->finally->confirmationResult->confirmationCallback->getSelectedIndex->if->throw->new->LoginException->saveAlias->saveStorePass->saveKeyPass
KeyStoreLoginModule#saveAlias(NameCallback)::: key store login module save alias:::cb->getName
KeyStoreLoginModule#saveStorePass(PasswordCallback)::: key store login module save store pass:::c->getPassword->if->new->charArr->c->clearPassword
KeyStoreLoginModule#saveKeyPass(PasswordCallback)::: key store login module save key pass:::c->getPassword->if->c->clearPassword
KeyStoreLoginModule#getKeyStoreInfo():::Get the credentials from the KeyStore.:::try->if->KeyStore->getInstance->else->KeyStore->getInstance->catch->le->new->LoginException->le->initCause->throw->le->new->LoginException->le->initCause->throw->finally->in->try->if->keyStore->load->else->new->URL->openStream->keyStore->load->catch->le->new->LoginException->le->initCause->throw->le->new->LoginException->le->initCause->throw->le->new->LoginException->le->initCause->throw->finally->if->try->in->close->catch->le->new->LoginException->le->initCause->throw->finally->try->keyStore->getCertificateChain->if->throw->new->FailedLoginException->else->certList->new->LinkedList<>->for->i->certF->CertificateFactory->getInstance->certF->generateCertPath->catch->le->new->LoginException->le->initCause->throw->le->new->LoginException->le->initCause->throw->finally->try->certificate->certificate->getSubjectDN->getName->new->javax.security.auth.x500.X500Principal->privateKey->keyStore->getKey->if->throw->new->FailedLoginException->new->X500PrivateCredential->catch->le->new->LoginException->le->initCause->throw->le->new->LoginException->le->initCause->throw->fle->new->FailedLoginException->fle->initCause->throw->finally->if->privateCredential->getCertificate->privateCredential->getAlias->debugPrint
KeyStoreLoginModule#commit()::: key store login module commit:::switch->throw->new->LoginException->logoutInternal->throw->new->LoginException->if->commitInternal->return->else->logoutInternal->throw->new->LoginException->return
KeyStoreLoginModule#commitInternal()::: key store login module commit internal:::if->subject->isReadOnly->throw->new->LoginException->else->subject->getPrincipals->add->subject->getPublicCredentials->add->subject->getPrivateCredentials->add->return
KeyStoreLoginModule#abort()::: key store login module abort:::switch->return->return->logoutInternal->return->logoutInternal->return
KeyStoreLoginModule#logout()::: key store login module logout:::if->debugPrint->switch->throw->new->LoginException->return->logoutInternal->return
KeyStoreLoginModule#logoutInternal()::: key store login module logout internal:::if->debugPrint->logoutException->provider->keyStore->getProvider->if->ap->try->ap->logout->if->debugPrint->catch->finally->if->subject->isReadOnly->it->subject->getPrivateCredentials->iterator->while->it->hasNext->obj->it->next->if->privateCredential->equals->try->destroy->if->obj->getClass->getName->debugPrint->break->catch->le->obj->getClass->getName->new->LoginException->le->initCause->throw->finally->throw->new->LoginException->if->subject->getPrincipals->remove->if->subject->getPublicCredentials->remove->if->subject->getPrivateCredentials->remove->if->throw
KeyStoreLoginModule#debugPrint(String)::: key store login module debug print:::if->println->else->println
Krb5LoginModule#initialize(Subject, CallbackHandler, Map, Map)::: krb5 login module initialize:::options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->options->get->if->normalize->options->get->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->isInitiatorValue->options->get->if->else->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->if->print
Krb5LoginModule#login():::Authenticate the user:::if->try->if->println->refresh->catch->le->ke->getMessage->new->LoginException->le->initCause->throw->finally->principalProperty->System->getProperty->if->new->StringBuffer->else->if->new->StringBuffer->validateConfiguration->if->krb5PrincName->toString->equals->if->try->attemptAuthentication->if->println->cleanState->return->catch->cleanState->if->le->getMessage->println->finally->else->if->try->attemptAuthentication->cleanState->return->catch->if->e->getMessage->println->cleanState->throw->finally->try->attemptAuthentication->cleanState->return->catch->if->e->getMessage->println->cleanState->throw->finally
Krb5LoginModule#attemptAuthentication(boolean)::: krb5 login module attempt authentication:::if->try->krb5PrincName->toString->new->PrincipalName->catch->le->e->getMessage->new->LoginException->le->initCause->throw->finally->try->if->if->println->Credentials->acquireTGTFromCache->if->if->isOld->newCred->renewCredentials->if->newCred->cred->getProxy->setProxy->if->isCurrent->if->println->if->if->cred->getClient->if->println->if->println->if->if->promptForName->krb5PrincName->toString->new->PrincipalName->if->if->kp->principal->getName->new->KerberosPrincipal->KeyTab->getInstance->KeyTab->new->File->getInstance->else->KeyTab->getUnboundInstance->KeyTab->new->File->getUnboundInstance->if->if->Krb5Util->keysFromJavaxKeyTab->if->println->builder->if->promptForPass->new->KrbAsReqBuilder->if->builder->action->getCreds->if->builder->getKeys->else->new->KrbAsReqBuilder->if->builder->action->getCreds->builder->destroy->if->println->hd->new->HexDumpEncoder->if->println->else->if->for->i->if->throw->new->LoginException->catch->le->e->getMessage->new->LoginException->le->initCause->throw->ie->ioe->getMessage->new->LoginException->ie->initCause->throw->finally
Krb5LoginModule#promptForName(boolean)::: krb5 login module prompt for name:::new->StringBuffer->if->sharedState->get->if->println->if->println->throw->new->LoginException->if->println->if->username->length->krb5PrincName->insert->return->if->throw->new->LoginException->else->if->throw->new->LoginException->try->defUsername->System->getProperty->callbacks->new->CallbackArr->form->getAuthResourceString->new->MessageFormat->source->form->format->new->NameCallback->callbackHandler->handle->getName->if->username->length->krb5PrincName->insert->catch->throw->ioe->getMessage->new->LoginException->throw->uce->getMessage->new->LoginException->finally
Krb5LoginModule#promptForPass(boolean)::: krb5 login module prompt for pass:::if->sharedState->get->if->if->println->throw->new->LoginException->if->new->String->println->return->if->throw->new->LoginException->else->if->throw->new->LoginException->try->callbacks->new->CallbackArr->userName->krb5PrincName->toString->form->getAuthResourceString->new->MessageFormat->source->form->format->new->PasswordCallback->callbackHandler->handle->tmpPassword->getPassword->if->throw->new->LoginException->new->charArr->System->arraycopy->clearPassword->for->i->if->println->println->catch->throw->ioe->getMessage->new->LoginException->throw->uce->getMessage->new->LoginException->finally
Krb5LoginModule#validateConfiguration()::: krb5 login module validate configuration:::if->throw->new->LoginException->if->throw->new->LoginException->if->throw->new->LoginException->if->throw->new->LoginException->if->throw->new->LoginException->if->krb5PrincName->toString->equals->if->throw->new->LoginException
Krb5LoginModule#isCurrent(Credentials)::: krb5 login module is current:::endTime->creds->getEndTime->if->return->System->currentTimeMillis->endTime->getTime->return
Krb5LoginModule#isOld(Credentials)::: krb5 login module is old:::endTime->creds->getEndTime->if->authTime->creds->getAuthTime->now->System->currentTimeMillis->if->return->authTime->getTime->endTime->getTime->else->return->endTime->getTime->return
Krb5LoginModule#renewCredentials(Credentials)::: krb5 login module renew credentials:::lcreds->try->if->creds->isRenewable->throw->new->RefreshFailedException->if->creds->getRenewTill->return->if->System->currentTimeMillis->cred->getRenewTill->getTime->throw->new->RefreshFailedException->creds->renew->if->println->catch->if->e->getMessage->println->finally->return
Krb5LoginModule#commit()::: krb5 login module commit:::if->return->else->if->throw->new->LoginException->if->subject->isReadOnly->cleanKerberosCred->throw->new->LoginException->privCredSet->subject->getPrivateCredentials->princSet->subject->getPrincipals->principal->getName->new->KerberosPrincipal->if->Krb5Util->credsToTicket->if->cred->getProxy->KerberosSecrets->getJavaxSecurityAuthKerberosAccess->Krb5Util->cred->getProxy->credsToTicket->kerberosTicketSetProxy->if->if->throw->new->LoginException->new->KerberosKeyArr->for->i->if->princSet->contains->princSet->add->if->if->privCredSet->contains->privCredSet->add->if->if->if->if->privCredSet->contains->privCredSet->add->else->throw->new->LoginException->else->for->i->if->println->return
Krb5LoginModule#abort()::: krb5 login module abort:::if->return->else->if->cleanKerberosCred->else->logout->return
Krb5LoginModule#logout():::Logout the user:::if->println->if->subject->isReadOnly->cleanKerberosCred->throw->new->LoginException->subject->getPrincipals->remove->it->subject->getPrivateCredentials->iterator->while->it->hasNext->o->it->next->if->it->remove->cleanKerberosCred->if->println->return
Krb5LoginModule#cleanKerberosCred():::Clean Kerberos credentials:::try->if->kerbTicket->destroy->if->for->i->catch->throw->new->LoginException->finally
Krb5LoginModule#cleanState():::Clean out the state:::if->if->sharedState->containsKey->sharedState->containsKey->sharedState->put->sharedState->put->else->if->krb5PrincName->length->krb5PrincName->krb5PrincName->length->delete->if->sharedState->remove->sharedState->remove
LdapLoginModule#initialize(Subject, CallbackHandler, Map, Map)::: ldap login module initialize:::new->Hashtable<String,Object>->ldapEnvironment->put->foreach->options->keySet->if->key->indexOf->ldapEnvironment->options->get->put->options->get->if->ldapEnvironment->put->options->get->if->authcIdentity->indexOf->USERNAME_PATTERN->matcher->options->get->if->if->userFilter->indexOf->USERNAME_PATTERN->matcher->new->SearchControls->constraints->setSearchScope->constraints->new->StringArr->setReturningAttributes->options->get->if->authzIdentity->startsWith->authzIdentity->endsWith->if->authzIdentity->authzIdentity->length->substring->constraints->new->StringArr->setReturningAttributes->if->if->else->if->options->get->equalsIgnoreCase->ldapEnvironment->remove->else->ldapEnvironment->put->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->if->if->println->else->if->println->else->println
LdapLoginModule#login():::Begin user authentication:::if->throw->new->LoginException->if->println->if->try->attemptAuthentication->if->println->return->catch->cleanState->if->le->toString->println->finally->else->if->try->attemptAuthentication->if->println->return->catch->cleanState->if->println->throw->finally->try->attemptAuthentication->if->println->return->catch->cleanState->if->println->throw->finally
LdapLoginModule#commit():::Complete user authentication:::if->return->else->if->subject->isReadOnly->cleanState->throw->new->LoginException->principals->subject->getPrincipals->if->principals->contains->principals->add->if->println->if->principals->contains->principals->add->if->println->if->principals->contains->principals->add->if->println->cleanState->return
LdapLoginModule#abort():::Abort user authentication:::if->println->if->return->else->if->cleanState->else->logout->return
LdapLoginModule#logout():::Logout a user:::if->subject->isReadOnly->cleanState->throw->new->LoginException->principals->subject->getPrincipals->principals->remove->principals->remove->if->principals->remove->cleanState->if->println->return
LdapLoginModule#attemptAuthentication(boolean):::Attempt authentication:::getUsernamePassword->if->throw->new->FailedLoginException->dn->if->id->replaceUsernameToken->ldapEnvironment->put->ldapEnvironment->put->if->println->try->new->InitialLdapContext->catch->throw->new->FailedLoginException->initCause->finally->if->findUserDN->else->else->try->new->InitialLdapContext->catch->throw->new->FailedLoginException->initCause->finally->findUserDN->try->ctx->addToEnvironment->ctx->addToEnvironment->ctx->addToEnvironment->if->println->ctx->reconnect->catch->throw->new->FailedLoginException->initCause->finally->if->sharedState->containsKey->sharedState->containsKey->sharedState->put->sharedState->put->new->UserPrincipal->if->new->UserPrincipal->try->new->LdapPrincipal->catch->if->println->throw->new->FailedLoginException->initCause->finally
LdapLoginModule#findUserDN(LdapContext):::Search for the user's entry:::userDN->if->if->println->else->if->println->throw->new->FailedLoginException->try->canonicalUserFilter->escapeUsernameChars->replaceUsernameToken->results->ctx->search->if->results->hasMore->entry->results->next->entry->getNameInNamespace->if->println->if->attr->entry->getAttributes->get->if->val->attr->get->if->results->close->else->if->println->catch->finally->if->userDN->equals->throw->new->FailedLoginException->else->return
LdapLoginModule#escapeUsernameChars():::Modify the supplied username to encode characters that must be escaped according to RFC 4515: LDAP: String Representation of Search Filters:::len->username->length->escapedUsername->new->StringBuilder->for->i->return->escapedUsername->toString
LdapLoginModule#replaceUsernameToken(Matcher, String, String):::Replace the username token:::return->matcher->replaceAll
LdapLoginModule#getUsernamePassword(boolean):::Get the username and password:::if->sharedState->get->sharedState->get->return->if->throw->new->LoginException->callbacks->new->CallbackArr->getAuthResourceString->new->NameCallback->getAuthResourceString->new->PasswordCallback->try->callbackHandler->handle->getName->tmpPassword->getPassword->new->charArr->System->arraycopy->clearPassword->catch->throw->ioe->toString->new->LoginException->throw->uce->getCallback->toString->new->LoginException->finally
LdapLoginModule#cleanState():::Clean out state because of a failed authentication attempt:::if->Arrays->fill->try->if->ctx->close->catch->finally->if->sharedState->remove->sharedState->remove
NTLoginModule#initialize(Subject, CallbackHandler, Map, Map):::Initialize this LoginModule.:::options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->if
NTLoginModule#login():::Import underlying NT system identity information.:::try->new->NTSystem->catch->if->println->throw->System->getProperty->new->FailedLoginException->finally->if->ntSystem->getName->throw->new->FailedLoginException->ntSystem->getName->new->NTUserPrincipal->if->println->userPrincipal->getName->println->if->ntSystem->getUserSID->ntSystem->getUserSID->new->NTSidUserPrincipal->if->userSID->getName->println->if->ntSystem->getDomain->ntSystem->getDomain->new->NTDomainPrincipal->if->userDomain->getName->println->if->ntSystem->getDomainSID->ntSystem->getDomainSID->new->NTSidDomainPrincipal->if->domainSID->getName->println->if->ntSystem->getPrimaryGroupID->ntSystem->getPrimaryGroupID->new->NTSidPrimaryGroupPrincipal->if->primaryGroup->getName->println->if->ntSystem->getGroupIDs->ntSystem->getGroupIDs->groupSIDs->ntSystem->getGroupIDs->new->NTSidGroupPrincipalArr->for->i->if->ntSystem->getImpersonationToken->ntSystem->getImpersonationToken->new->NTNumericCredential->if->ntSystem->getImpersonationToken->println->return
NTLoginModule#commit():::This method is called if the LoginContext's overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded):::if->if->println->return->if->subject->isReadOnly->throw->new->LoginException->principals->subject->getPrincipals->if->principals->contains->principals->add->if->principals->contains->principals->add->if->principals->contains->principals->add->if->principals->contains->principals->add->if->principals->contains->principals->add->for->i->pubCreds->subject->getPublicCredentials->if->pubCreds->contains->pubCreds->add->return
NTLoginModule#abort():::This method is called if the LoginContext's overall authentication failed:::if->println->if->return->else->if->else->logout->return
NTLoginModule#logout():::Logout the user:::if->subject->isReadOnly->throw->new->LoginException->principals->subject->getPrincipals->if->principals->contains->principals->remove->if->principals->contains->principals->remove->if->principals->contains->principals->remove->if->principals->contains->principals->remove->if->principals->contains->principals->remove->for->i->pubCreds->subject->getPublicCredentials->if->pubCreds->contains->pubCreds->remove->if->println->return
NTSystem#getCurrent(boolean)::: system get current:::
NTSystem#getImpersonationToken0()::: system get impersonation token0:::
NTSystem#getName():::Get the username for the current NT user.:::return
NTSystem#getDomain():::Get the domain for the current NT user.:::return
NTSystem#getDomainSID():::Get a printable SID for the current NT user's domain.:::return
NTSystem#getUserSID():::Get a printable SID for the current NT user.:::return
NTSystem#getPrimaryGroupID():::Get a printable primary group SID for the current NT user.:::return
NTSystem#getGroupIDs():::Get the printable group SIDs for the current NT user.:::return->groupIDs->clone
NTSystem#getImpersonationToken():::Get an impersonation token for the current NT user.:::if->getImpersonationToken0->return
NTSystem#loadNative()::: system load native:::System->loadLibrary
UnixLoginModule#initialize(Subject, CallbackHandler, Map, Map):::Initialize this LoginModule.:::options->get->equalsIgnoreCase
UnixLoginModule#login():::Authenticate the user (first phase):::unixGroups->try->new->UnixSystem->catch->throw->System->getProperty->new->FailedLoginException->finally->ss->getUsername->new->UnixPrincipal->ss->getUid->new->UnixNumericUserPrincipal->ss->getGid->new->UnixNumericGroupPrincipal->if->ss->getGroups->ss->getGroups->ss->getGroups->for->i->if->println->ss->getUid->println->ss->getGid->println->ss->getGroups->for->i->return
UnixLoginModule#commit():::Commit the authentication (second phase):::if->if->println->return->else->if->subject->isReadOnly->throw->new->LoginException->if->subject->getPrincipals->contains->subject->getPrincipals->add->if->subject->getPrincipals->contains->subject->getPrincipals->add->if->subject->getPrincipals->contains->subject->getPrincipals->add->for->i->supplementaryGroups->size->if->println->println->println->println->return
UnixLoginModule#abort():::Abort the authentication (second phase):::if->println->if->return->else->if->new->LinkedList<UnixNumericGroupPrincipal>->else->logout->return
UnixLoginModule#logout():::Logout the user   This method removes the Principals associated with the Subject.:::if->subject->isReadOnly->throw->new->LoginException->subject->getPrincipals->remove->subject->getPrincipals->remove->subject->getPrincipals->remove->for->i->supplementaryGroups->size->new->LinkedList<UnixNumericGroupPrincipal>->if->println->return
UnixSystem#getUnixInfo()::: unix system get unix info:::
UnixSystem#getUsername():::Get the username for the current Unix user.:::return
UnixSystem#getUid():::Get the UID for the current Unix user.:::return
UnixSystem#getGid():::Get the GID for the current Unix user.:::return
UnixSystem#getGroups():::Get the supplementary groups for the current Unix user.:::return->groups->clone

AnnotationHandler#process(Element, AnnotationMirror, PluginGenerator):::Processes the presence of annotation on element.:::
APHotSpotSignature#parseSignature(String, int)::: hot spot signature parse signature:::cur->first->do->signature->charAt->while->switch->while->signature->charAt->break->break->throw->new->RuntimeException->return
APHotSpotSignature#getParameterCount(boolean)::: hot spot signature get parameter count:::return->arguments->size
APHotSpotSignature#getParameterType(ProcessingEnvironment, int)::: hot spot signature get parameter type:::if->arguments->size->new->TypeMirrorArr->type->if->arguments->get->throw->String->format->new->RuntimeException->if->arguments->get->lookupType->return
APHotSpotSignature#lookupType(ProcessingEnvironment, String)::: hot spot signature lookup type:::if->binaryName->length->kind->binaryName->charAt->fromPrimitiveOrVoidTypeChar->if->kind->isPrimitive->return->env->getTypeUtils->getPrimitiveType->else->if->return->env->getTypeUtils->getNoType->canonicalName->if->canonicalName->startsWith->canonicalName->endsWith->canonicalName->canonicalName->length->substring->env->getMessager->printMessage->arrayDims->while->canonicalName->startsWith->canonicalName->canonicalName->length->substring->canonicalName->replaceAll->typeElement->env->getElementUtils->getTypeElement->if->throw->String->format->new->RuntimeException->mirror->typeElement->asType->for->i->return
APHotSpotSignature#fromPrimitiveOrVoidTypeChar(char):::Returns the kind from the character describing a primitive or void.:::switch->return->return->return->return->return->return->return->return->return->throw->new->IllegalArgumentException
APHotSpotSignature#getReturnType(ProcessingEnvironment)::: hot spot signature get return type:::if->if->throw->new->RuntimeException->lookupType->return
APHotSpotSignature#toString()::: hot spot signature to string:::return
ClassSubstitutionHandler#process(Element, AnnotationMirror, PluginGenerator)::: class substitution handler process:::if->element->getKind->isClass->return->type->substitutionType->resolveOriginalType->if->return
ClassSubstitutionHandler#resolveOriginalType(AbstractProcessor, Element, AnnotationMirror)::: class substitution handler resolve original type:::type->getAnnotationValue->classNames->getAnnotationValueList->optional->getAnnotationValue->messager->processor->env->getMessager->if->type->getKind->messager->printMessage->return->if->classSubstition->getAnnotationType->asElement->asElement->equals->if->classNames->size->msg->messager->printMessage->messager->printMessage->return->asElement->if->classNames->size->typeElement->foreach->processor->getTypeElementOrNull->if->break->if->messager->String->format->printMessage->return->if->messager->String->format->printMessage->return
FoldHandler#process(Element, AnnotationMirror, PluginGenerator)::: fold handler process:::if->element->getKind->return->foldMethod->if->foldMethod->getReturnType->getKind->processor->env->getMessager->String->getSimpleName->format->printMessage->else->if->foldMethod->getModifiers->contains->processor->env->getMessager->String->getSimpleName->format->printMessage->else->generator->new->GeneratedFoldPlugin->addPlugin
GeneratedFoldPlugin#getAnnotationClass(AbstractProcessor)::: generated fold plugin get annotation class:::return->processor->getTypeElement
GeneratedFoldPlugin#extraImports(Set)::: generated fold plugin extra imports:::imports->add->imports->add->imports->add
GeneratedFoldPlugin#createExecute(AbstractProcessor, PrintWriter)::: generated fold plugin create execute:::deps->new->InjectedDependencies->params->intrinsicMethod->getParameters->argCount->receiver->if->intrinsicMethod->getModifiers->contains->intrinsicMethod->getEnclosingElement->else->type->intrinsicMethod->getEnclosingElement->type->asType->constantArgument->firstArg->foreach->if->processor->processor->getType->getAnnotation->param->asType->constantArgument->else->out->printf->out->printf->out->printf->out->param->asType->deps->param->asType->use->printf->suppressWarnings->new->TreeSet<>->if->intrinsicMethod->getAnnotation->suppressWarnings->add->if->intrinsicMethod->getReturnType->hasRawtypeWarning->suppressWarnings->add->foreach->if->param->asType->hasUncheckedWarning->suppressWarnings->add->if->suppressWarnings->size->out->printf->sep->foreach->out->printf->out->printf->out->intrinsicMethod->getReturnType->getErasedType->intrinsicMethod->getSimpleName->printf->if->out->printf->for->i->out->printf->returnType->intrinsicMethod->getReturnType->switch->returnType->getKind->out->printf->break->out->printf->break->out->printf->break->out->printf->break->out->printf->break->if->returnType->processor->getType->equals->out->deps->use->printf->else->out->deps->use->printf->break->throw->returnType->toString->new->IllegalArgumentException->out->deps->use->deps->use->printf->out->getReturnKind->printf->out->printf->out->printf->return
GeneratedNodeIntrinsicPlugin#getAnnotationClass(AbstractProcessor)::: generated node intrinsic plugin get annotation class:::return->processor->getTypeElement
GeneratedNodeIntrinsicPlugin#getParameters()::: generated node intrinsic plugin get parameters:::
GeneratedNodeIntrinsicPlugin#factoryCall(AbstractProcessor, PrintWriter, InjectedDependencies, int)::: generated node intrinsic plugin factory call:::
GeneratedNodeIntrinsicPlugin#createExecute(AbstractProcessor, PrintWriter)::: generated node intrinsic plugin create execute:::deps->new->InjectedDependencies->params->getParameters->idx->for->params->size->for->i->factoryCall->return
GeneratedNodeIntrinsicPlugin.ConstructorPlugin#extraImports(Set)::: constructor plugin extra imports:::if->intrinsicMethod->getReturnType->getKind->imports->add
GeneratedNodeIntrinsicPlugin.ConstructorPlugin#getParameters()::: constructor plugin get parameters:::return->constructor->getParameters
GeneratedNodeIntrinsicPlugin.ConstructorPlugin#factoryCall(AbstractProcessor, PrintWriter, InjectedDependencies, int)::: constructor plugin factory call:::out->constructor->getEnclosingElement->constructor->getEnclosingElement->printf->if->out->printf->for->i->out->printf->if->intrinsicMethod->getReturnType->getKind->out->printf->else->out->getReturnKind->printf->out->printf
GeneratedNodeIntrinsicPlugin.CustomFactoryPlugin#extraImports(Set)::: custom factory plugin extra imports:::
GeneratedNodeIntrinsicPlugin.CustomFactoryPlugin#getParameters()::: custom factory plugin get parameters:::ret->customFactory->getParameters->return->ret->ret->size->subList
GeneratedNodeIntrinsicPlugin.CustomFactoryPlugin#factoryCall(AbstractProcessor, PrintWriter, InjectedDependencies, int)::: custom factory plugin factory call:::out->customFactory->getEnclosingElement->customFactory->getSimpleName->printf->for->i->out->printf
GeneratedPlugin#getAnnotationClass(AbstractProcessor)::: generated plugin get annotation class:::
GeneratedPlugin#getPluginName()::: generated plugin get plugin name:::return
GeneratedPlugin#setPluginName(String)::: generated plugin set plugin name:::
GeneratedPlugin#generate(AbstractProcessor, PrintWriter)::: generated plugin generate:::out->intrinsicMethod->getEnclosingElement->printf->out->printf->out->getClass->getName->printf->out->printf->out->printf->out->printf->out->printf->deps->createExecute->out->printf->out->printf->out->printf->out->getAnnotationClass->getQualifiedName->toString->replace->printf->out->printf->createPrivateMembers->out->printf
GeneratedPlugin#register(PrintWriter)::: generated plugin register:::out->printf->if->out->printf->out->intrinsicMethod->getEnclosingElement->intrinsicMethod->getSimpleName->printf->if->intrinsicMethod->getModifiers->contains->out->printf->foreach->intrinsicMethod->getParameters->out->arg->asType->getErasedType->printf->out->printf
GeneratedPlugin#extraImports(Set)::: generated plugin extra imports:::
GeneratedPlugin#createExecute(AbstractProcessor, PrintWriter)::: generated plugin create execute:::
GeneratedPlugin#getErasedType(TypeMirror)::: generated plugin get erased type:::switch->type->getKind->declared->element->declared->asElement->return->element->getQualifiedName->toString->return->getUpperBound->getErasedType->return->getExtendsBound->getErasedType->return->getComponentType->getErasedType->return->type->toString
GeneratedPlugin#hasRawtypeWarning(TypeMirror)::: generated plugin has rawtype warning:::switch->type->getKind->declared->return->declared->getTypeArguments->size->return->return->return->getComponentType->hasRawtypeWarning->return
GeneratedPlugin#hasUncheckedWarning(TypeMirror)::: generated plugin has unchecked warning:::switch->type->getKind->declared->foreach->declared->getTypeArguments->if->hasUncheckedWarning->return->return->return->return->getExtendsBound->return->getComponentType->hasUncheckedWarning->return
GeneratedPlugin#createPrivateMembers(AbstractProcessor, PrintWriter, InjectedDependencies)::: generated plugin create private members:::if->deps->isEmpty->out->printf->foreach->out->printf->out->printf->out->printf->foreach->out->dep->inject->printf->out->printf
GeneratedPlugin#getReturnKind(ExecutableElement)::: generated plugin get return kind:::switch->method->getReturnType->getKind->return->return->return->return->return->return->throw->method->getReturnType->toString->new->IllegalArgumentException
GeneratedPlugin#constantArgument(AbstractProcessor, PrintWriter, InjectedDependencies, int, TypeMirror, int)::: generated plugin constant argument:::if->hasRawtypeWarning->out->printf->out->getErasedType->printf->out->printf->if->type->processor->getType->equals->out->printf->out->deps->use->printf->out->printf->out->deps->use->printf->out->printf->else->switch->type->getKind->out->printf->break->out->printf->break->out->printf->break->out->printf->break->out->printf->break->out->printf->break->out->printf->break->out->printf->break->out->deps->use->getErasedType->printf->break->throw->type->toString->new->IllegalArgumentException->out->printf->out->printf->out->printf->out->printf
InjectedDependencies.Dependency#inject(AbstractProcessor, ExecutableElement)::: dependency inject:::
InjectedDependencies.InjectedDependency#inject(AbstractProcessor, ExecutableElement)::: injected dependency inject:::return->String->format
InjectedDependencies.InjectedStampDependency#inject(AbstractProcessor, ExecutableElement)::: injected stamp dependency inject:::nodeIntrinsic->processor->processor->getType->getAnnotation->nonNull->getAnnotationValue->return->String->GeneratedPlugin->inject->getReturnType->getErasedType->format
InjectedDependencies#use(WellKnownDependency)::: injected dependencies use:::if->deps->put->return
InjectedDependencies#use(AbstractProcessor, DeclaredType)::: injected dependencies use:::foreach->WellKnownDependency->values->if->processor->env->getTypeUtils->wellKnown->getType->isAssignable->return->use->typeName->type->toString->ret->deps->get->if->type->asElement->getSimpleName->new->InjectedDependency->deps->put->return
InjectedDependencies#iterator()::: injected dependencies iterator:::return->deps->values->iterator
InjectedDependencies#isEmpty()::: injected dependencies is empty:::return->deps->isEmpty
MethodSubstitutionHandler#process(Element, AnnotationMirror, PluginGenerator)::: method substitution handler process:::if->element->getKind->return->substitutionMethod->substitutionType->findEnclosingClass->messager->processor->env->getMessager->substitutionClassAnnotation->processor->processor->getType->getAnnotation->if->messager->String->getSimpleName->format->printMessage->return->optional->getAnnotationValue->if->return->originalType->ClassSubstitutionHandler->resolveOriginalType->if->messager->String->getSimpleName->format->printMessage->return->if->substitutionMethod->getModifiers->contains->messager->String->getSimpleName->format->printMessage->if->substitutionMethod->getModifiers->contains->substitutionMethod->getModifiers->contains->messager->String->getSimpleName->format->printMessage->originalName->originalName->isStatic->getAnnotationValue->originalSignature->originalSignature->if->return->originalMethod->originalMethod->if->messager->String->findEnclosingClass->format->printMessage
MethodSubstitutionHandler#originalSignature(TypeElement, ExecutableElement, AnnotationMirror, boolean)::: method substitution handler original signature:::signatureString->getAnnotationValue->parameters->new->ArrayList<>->messager->processor->env->getMessager->if->signatureString->equals->for->i->method->getParameters->size->if->if->parameters->isEmpty->messager->printMessage->return->else->thisParam->parameters->remove->if->originalType->asType->isSubtype->thisName->method->getParameters->get->getSimpleName->messager->String->format->printMessage->parameters->method->getReturnType->add->else->try->signature->new->APHotSpotSignature->parameters->signature->processor->env->getReturnType->add->for->i->signature->getParameterCount->catch->messager->String->e->getMessage->e->getMessage->e->toString->format->printMessage->return->finally->return->parameters->parameters->size->new->TypeMirrorArr->toArray
MethodSubstitutionHandler#originalName(ExecutableElement, AnnotationMirror)::: method substitution handler original name:::originalMethodName->getAnnotationValue->if->originalMethodName->equals->substituteMethod->getSimpleName->toString->return
MethodSubstitutionHandler#originalMethod(ExecutableElement, AnnotationMirror, TypeElement, String, TypeMirror[], boolean)::: method substitution handler original method:::signatureReturnType->signatureParameters->Arrays->copyOfRange->searchElements->if->originalName->equals->ElementFilter->originalType->getEnclosedElements->constructorsIn->else->ElementFilter->originalType->getEnclosedElements->methodsIn->messager->processor->env->getMessager->originalMethod->foreach->if->searchElement->getSimpleName->toString->equals->searchElement->getParameters->size->for->i->break->if->optional->getAnnotationValue->if->messager->String->Arrays->toString->format->printMessage->return->if->originalMethod->getModifiers->contains->optional->getAnnotationValue->if->messager->String->format->printMessage->return->if->originalMethod->getReturnType->isTypeCompatible->messager->String->originalMethod->getReturnType->format->printMessage->return->return
MethodSubstitutionHandler#isTypeCompatible(TypeMirror, TypeMirror)::: method substitution handler is type compatible:::original->substitution->if->needsErasure->processor->env->getTypeUtils->erasure->if->needsErasure->processor->env->getTypeUtils->erasure->return->processor->env->getTypeUtils->isSameType
MethodSubstitutionHandler#isSubtype(TypeMirror, TypeMirror):::Tests whether one type is a subtype of another:::t1Erased->t2Erased->if->needsErasure->processor->env->getTypeUtils->erasure->if->needsErasure->processor->env->getTypeUtils->erasure->return->processor->env->getTypeUtils->isSubtype
MethodSubstitutionHandler#needsErasure(TypeMirror)::: method substitution handler needs erasure:::return->typeMirror->getKind->typeMirror->getKind->typeMirror->getKind->isPrimitive->typeMirror->getKind->typeMirror->getKind
MethodSubstitutionHandler#findEnclosingClass(Element)::: method substitution handler find enclosing class:::if->element->getKind->isClass->return->enclosing->element->getEnclosingElement->while->enclosing->getKind->if->enclosing->getKind->isClass->return->enclosing->getEnclosingElement->return
NodeIntrinsicHandler#process(Element, AnnotationMirror, PluginGenerator)::: node intrinsic handler process:::if->element->getKind->return->intrinsicMethod->messager->processor->env->getMessager->if->intrinsicMethod->getModifiers->contains->messager->String->getSimpleName->format->printMessage->if->intrinsicMethod->getModifiers->contains->messager->String->getSimpleName->format->printMessage->nodeClassMirror->getAnnotationValue->nodeClass->processor->asTypeElement->if->processor->env->getTypeUtils->annotation->getAnnotationType->isSameType->enclosingElement->intrinsicMethod->getEnclosingElement->while->enclosingElement->getKind->enclosingElement->getEnclosingElement->if->else->messager->String->getSimpleName->format->printMessage->returnType->intrinsicMethod->getReturnType->if->messager->printMessage->injectedStampIsNonNull->getAnnotationValue->if->returnType->getKind->foreach->intrinsicMethod->getParameters->if->processor->processor->getType->getAnnotation->messager->printMessage->break->constructorSignature->constructorSignature->nonMatches->new->HashMap<>->factories->findIntrinsifyFactoryMethod->constructors->Collections->emptyList->if->nodeClass->getModifiers->contains->if->factories->isEmpty->messager->String->nodeClass->getSimpleName->format->printMessage->else->if->isNodeType->if->factories->isEmpty->messager->String->nodeClass->getSimpleName->processor->getType->format->printMessage->else->ret->if->processor->env->getTypeUtils->processor->getType->isAssignable->checkInputType->findConstructors->msg->new->Formatter->if->factories->size->msg->format->foreach->msg->format->messager->msg->toString->printMessage->else->if->constructors->size->msg->format->foreach->msg->format->messager->msg->toString->printMessage->else->if->factories->size->generator->factories->get->new->GeneratedNodeIntrinsicPlugin.CustomFactoryPlugin->addPlugin->else->if->constructors->size->generator->constructors->get->new->GeneratedNodeIntrinsicPlugin.ConstructorPlugin->addPlugin->else->msg->format->if->nonMatches->isEmpty->msg->format->foreach->nonMatches->entrySet->msg->e->getKey->e->getValue->format->messager->msg->toString->printMessage
NodeIntrinsicHandler#checkInputType(TypeElement, TypeMirror, Element, AnnotationMirror)::: node intrinsic handler check input type:::inputType->getInputType->if->inputType->equals->allowed->allowedTypes->processor->processor->getType->getAnnotation->getAnnotationValueList->foreach->if->allowedType->getSimpleName->contentEquals->break->if->processor->env->getMessager->String->format->printMessage
NodeIntrinsicHandler#getInputType(TypeMirror, Element, AnnotationMirror)::: node intrinsic handler get input type:::current->processor->asTypeElement->while->markerType->processor->processor->getType->getAnnotation->if->return->getAnnotationValue->getSimpleName->toString->processor->current->getSuperclass->asTypeElement->processor->env->getMessager->String->element->getAnnotationMirrors->format->printMessage->return
NodeIntrinsicHandler#isNodeType(TypeElement)::: node intrinsic handler is node type:::return->processor->env->getTypeUtils->nodeClass->asType->processor->getType->isSubtype
NodeIntrinsicHandler#constructorSignature(ExecutableElement)::: node intrinsic handler constructor signature:::parameters->method->getParameters->size->new->TypeMirrorArr->for->i->method->getParameters->size->return
NodeIntrinsicHandler#findConstructors(TypeElement, TypeMirror[], Map, boolean)::: node intrinsic handler find constructors:::constructors->ElementFilter->nodeClass->getEnclosedElements->constructorsIn->found->constructors->size->new->ArrayList<>->foreach->if->matchSignature->found->add->return
NodeIntrinsicHandler#findIntrinsifyFactoryMethod(TypeElement, TypeMirror[], Map, boolean)::: node intrinsic handler find intrinsify factory method:::methods->ElementFilter->nodeClass->getEnclosedElements->methodsIn->found->methods->size->new->ArrayList<>->foreach->if->method->getSimpleName->toString->equals->continue->if->method->getParameters->size->nonMatches->put->continue->firstArg->method->getParameters->get->if->firstArg->asType->processor->getType->isTypeCompatible->nonMatches->put->continue->secondArg->method->getParameters->get->if->secondArg->asType->processor->getType->isTypeCompatible->nonMatches->put->continue->if->method->getReturnType->getKind->nonMatches->put->continue->if->method->getModifiers->contains->nonMatches->put->continue->if->matchSignature->found->add->return
NodeIntrinsicHandler#matchSignature(int, ExecutableElement, TypeMirror[], Map, boolean)::: node intrinsic handler match signature:::sIdx->cIdx->missingStampArgument->while->method->getParameters->size->parameter->method->getParameters->get->paramType->parameter->asType->if->processor->processor->getType->getAnnotation->if->processor->env->getTypeUtils->processor->getType->isSameType->continue->if->nonMatches->String->processor->getType->format->put->return->if->method->getParameters->size->paramType->getKind->varargsType->getComponentType->while->if->isTypeCompatible->nonMatches->String->format->put->return->else->if->nonMatches->put->return->else->if->isTypeCompatible->nonMatches->String->format->put->return->if->nonMatches->String->processor->getType->format->put->return->if->nonMatches->put->return->return
NodeIntrinsicHandler#isTypeCompatible(TypeMirror, TypeMirror)::: node intrinsic handler is type compatible:::original->substitution->if->needsErasure->processor->env->getTypeUtils->erasure->if->needsErasure->processor->env->getTypeUtils->erasure->return->processor->env->getTypeUtils->isSameType
NodeIntrinsicHandler#needsErasure(TypeMirror)::: node intrinsic handler needs erasure:::return->typeMirror->getKind->typeMirror->getKind->typeMirror->getKind->isPrimitive->typeMirror->getKind->typeMirror->getKind
PluginGenerator#addPlugin(GeneratedPlugin)::: plugin generator add plugin:::topLevel->getTopLevelClass->list->plugins->get->if->new->ArrayList<>->plugins->put->list->add
PluginGenerator#generateAll(AbstractProcessor)::: plugin generator generate all:::foreach->plugins->entrySet->entry->getValue->disambiguateNames->entry->getKey->entry->getValue->createPluginFactory
PluginGenerator#getTopLevelClass(Element)::: plugin generator get top level class:::prev->enclosing->element->getEnclosingElement->while->enclosing->getKind->enclosing->getEnclosingElement->return
PluginGenerator#disambiguateWith(List, Function)::: plugin generator disambiguate with:::plugins->Comparator->GeneratedPlugin->getPluginName->comparing->sort->current->plugins->get->currentName->current->getPluginName->for->i->plugins->size
PluginGenerator#disambiguateNames(List)::: plugin generator disambiguate names:::nextId->plugin->getPluginName->disambiguateWith
PluginGenerator#createPluginFactory(AbstractProcessor, Element, List)::: plugin generator create plugin factory:::pkg->topLevelClass->getEnclosingElement->genClassName->topLevelClass->getSimpleName->qualifiedGenClassName->pkg->getQualifiedName->try->factory->processor->env->getFiler->createSourceFile->try->out->factory->openWriter->new->PrintWriter->out->printf->out->printf->out->printf->out->getName->getName->printf->out->pkg->getQualifiedName->printf->out->printf->createImports->out->printf->foreach->plugin->generate->out->printf->out->printf->createPluginFactoryMethod->out->printf->catch->finally->catch->processor->env->getMessager->e->getMessage->printMessage->finally->processor->createProviderFile
PluginGenerator#createImports(PrintWriter, List)::: plugin generator create imports:::out->printf->out->printf->out->printf->out->printf->out->printf->out->printf->out->printf->out->printf->out->printf->extra->new->HashSet<>->foreach->plugin->extraImports->if->extra->isEmpty->out->printf->foreach->out->printf
PluginGenerator#createPluginFactoryMethod(PrintWriter, List)::: plugin generator create plugin factory method:::out->printf->out->printf->foreach->plugin->register->out->printf
ReplacementsAnnotationProcessor#getSupportedSourceVersion()::: replacements annotation processor get supported source version:::return->SourceVersion->latest
ReplacementsAnnotationProcessor#doProcess(Set, RoundEnvironment)::: replacements annotation processor do process:::if->roundEnv->processingOver->generator->new->PluginGenerator->foreach->getHandlers->annotationClass->getTypeElementOrNull->if->foreach->roundEnv->getElementsAnnotatedWith->annotationMirror->annotationClass->asType->getAnnotation->handler->process->else->roots->roundEnv->getRootElements->message->String->handler->getClass->getName->format->if->roots->isEmpty->env->getMessager->printMessage->else->env->getMessager->roots->iterator->next->printMessage->generator->generateAll->return
ReplacementsAnnotationProcessor#getHandlers()::: replacements annotation processor get handlers:::if->new->ArrayList<>->handlers->new->ClassSubstitutionHandler->add->handlers->new->MethodSubstitutionHandler->add->handlers->new->NodeIntrinsicHandler->add->handlers->new->FoldHandler->add->return
ReplacementsAnnotationProcessor#getSupportedAnnotationTypes()::: replacements annotation processor get supported annotation types:::annotationTypes->new->HashSet<>->foreach->getHandlers->annotationTypes->add->return

org.graalvm.compiler.replacements.processor.AnnotationHandler#process(Element, AnnotationMirror, PluginGenerator)->void:::Processes the presence of annotation on element.
org.graalvm.compiler.replacements.processor.APHotSpotSignature#getParameterCount(boolean)->int::: hot spot signature get parameter count
org.graalvm.compiler.replacements.processor.APHotSpotSignature#getParameterType(ProcessingEnvironment, int)->TypeMirror::: hot spot signature get parameter type
org.graalvm.compiler.replacements.processor.APHotSpotSignature#fromPrimitiveOrVoidTypeChar(char)->TypeKind:::Returns the kind from the character describing a primitive or void.
org.graalvm.compiler.replacements.processor.APHotSpotSignature#getReturnType(ProcessingEnvironment)->TypeMirror::: hot spot signature get return type
org.graalvm.compiler.replacements.processor.APHotSpotSignature#toString()->String::: hot spot signature to string
org.graalvm.compiler.replacements.processor.ClassSubstitutionHandler#process(Element, AnnotationMirror, PluginGenerator)->void::: class substitution handler process
org.graalvm.compiler.replacements.processor.ClassSubstitutionHandler#resolveOriginalType(AbstractProcessor, Element, AnnotationMirror)->TypeElement::: class substitution handler resolve original type
org.graalvm.compiler.replacements.processor.FoldHandler#process(Element, AnnotationMirror, PluginGenerator)->void::: fold handler process
org.graalvm.compiler.replacements.processor.GeneratedFoldPlugin#getAnnotationClass(AbstractProcessor)->TypeElement::: generated fold plugin get annotation class
org.graalvm.compiler.replacements.processor.GeneratedFoldPlugin#extraImports(Set)->void::: generated fold plugin extra imports
org.graalvm.compiler.replacements.processor.GeneratedFoldPlugin#createExecute(AbstractProcessor, PrintWriter)->InjectedDependencies::: generated fold plugin create execute
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin#getAnnotationClass(AbstractProcessor)->TypeElement::: generated node intrinsic plugin get annotation class
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin#getParameters()->List::: generated node intrinsic plugin get parameters
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin#factoryCall(AbstractProcessor, PrintWriter, InjectedDependencies, int)->void::: generated node intrinsic plugin factory call
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin#createExecute(AbstractProcessor, PrintWriter)->InjectedDependencies::: generated node intrinsic plugin create execute
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin.ConstructorPlugin#extraImports(Set)->void::: constructor plugin extra imports
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin.ConstructorPlugin#getParameters()->List::: constructor plugin get parameters
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin.ConstructorPlugin#factoryCall(AbstractProcessor, PrintWriter, InjectedDependencies, int)->void::: constructor plugin factory call
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin.CustomFactoryPlugin#extraImports(Set)->void::: custom factory plugin extra imports
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin.CustomFactoryPlugin#getParameters()->List::: custom factory plugin get parameters
org.graalvm.compiler.replacements.processor.GeneratedNodeIntrinsicPlugin.CustomFactoryPlugin#factoryCall(AbstractProcessor, PrintWriter, InjectedDependencies, int)->void::: custom factory plugin factory call
org.graalvm.compiler.replacements.processor.GeneratedPlugin#getAnnotationClass(AbstractProcessor)->TypeElement::: generated plugin get annotation class
org.graalvm.compiler.replacements.processor.GeneratedPlugin#getPluginName()->String::: generated plugin get plugin name
org.graalvm.compiler.replacements.processor.GeneratedPlugin#setPluginName(String)->void::: generated plugin set plugin name
org.graalvm.compiler.replacements.processor.GeneratedPlugin#generate(AbstractProcessor, PrintWriter)->void::: generated plugin generate
org.graalvm.compiler.replacements.processor.GeneratedPlugin#register(PrintWriter)->void::: generated plugin register
org.graalvm.compiler.replacements.processor.GeneratedPlugin#extraImports(Set)->void::: generated plugin extra imports
org.graalvm.compiler.replacements.processor.GeneratedPlugin#createExecute(AbstractProcessor, PrintWriter)->InjectedDependencies::: generated plugin create execute
org.graalvm.compiler.replacements.processor.GeneratedPlugin#getErasedType(TypeMirror)->String::: generated plugin get erased type
org.graalvm.compiler.replacements.processor.GeneratedPlugin#hasRawtypeWarning(TypeMirror)->boolean::: generated plugin has rawtype warning
org.graalvm.compiler.replacements.processor.GeneratedPlugin#hasUncheckedWarning(TypeMirror)->boolean::: generated plugin has unchecked warning
org.graalvm.compiler.replacements.processor.GeneratedPlugin#getReturnKind(ExecutableElement)->String::: generated plugin get return kind
org.graalvm.compiler.replacements.processor.GeneratedPlugin#constantArgument(AbstractProcessor, PrintWriter, InjectedDependencies, int, TypeMirror, int)->void::: generated plugin constant argument
org.graalvm.compiler.replacements.processor.InjectedDependencies.Dependency#inject(AbstractProcessor, ExecutableElement)->String::: dependency inject
org.graalvm.compiler.replacements.processor.InjectedDependencies#use(WellKnownDependency)->String::: injected dependencies use
org.graalvm.compiler.replacements.processor.InjectedDependencies#use(AbstractProcessor, DeclaredType)->String::: injected dependencies use
org.graalvm.compiler.replacements.processor.InjectedDependencies#iterator()->Iterator::: injected dependencies iterator
org.graalvm.compiler.replacements.processor.InjectedDependencies#isEmpty()->boolean::: injected dependencies is empty
org.graalvm.compiler.replacements.processor.MethodSubstitutionHandler#process(Element, AnnotationMirror, PluginGenerator)->void::: method substitution handler process
org.graalvm.compiler.replacements.processor.NodeIntrinsicHandler#process(Element, AnnotationMirror, PluginGenerator)->void::: node intrinsic handler process
org.graalvm.compiler.replacements.processor.PluginGenerator#addPlugin(GeneratedPlugin)->void::: plugin generator add plugin
org.graalvm.compiler.replacements.processor.PluginGenerator#generateAll(AbstractProcessor)->void::: plugin generator generate all
org.graalvm.compiler.replacements.processor.PluginGenerator#createImports(PrintWriter, List)->void::: plugin generator create imports
org.graalvm.compiler.replacements.processor.ReplacementsAnnotationProcessor#getSupportedSourceVersion()->SourceVersion::: replacements annotation processor get supported source version
org.graalvm.compiler.replacements.processor.ReplacementsAnnotationProcessor#doProcess(Set, RoundEnvironment)->boolean::: replacements annotation processor do process
org.graalvm.compiler.replacements.processor.ReplacementsAnnotationProcessor#getHandlers()->List::: replacements annotation processor get handlers
org.graalvm.compiler.replacements.processor.ReplacementsAnnotationProcessor#getSupportedAnnotationTypes()->Set::: replacements annotation processor get supported annotation types

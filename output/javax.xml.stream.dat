javax.xml.stream.EventFilter#accept(XMLEvent)->boolean:::Tests whether this event is part of this stream
javax.xml.stream.FactoryConfigurationError#getException()->Exception:::Return the nested exception (if any)
javax.xml.stream.FactoryConfigurationError#getCause()->Throwable:::use the exception chaining mechanism of JDK1.4
javax.xml.stream.FactoryConfigurationError#getMessage()->String:::Report the message associated with this error
javax.xml.stream.FactoryFinder#newInstance(Class, String, ClassLoader, boolean)->T:::Create an instance of a class
javax.xml.stream.FactoryFinder#newInstance(Class, String, ClassLoader, boolean, boolean)->T:::Create an instance of a class
javax.xml.stream.FactoryFinder#find(Class, String)->T:::Finds the implementation Class object in the specified order.
javax.xml.stream.FactoryFinder#find(Class, String, ClassLoader, String)->T:::Finds the implementation Class object in the specified order
javax.xml.stream.Location#getLineNumber()->int:::Return the line number where the current event ends, returns -1 if none is available.
javax.xml.stream.Location#getColumnNumber()->int:::Return the column number where the current event ends, returns -1 if none is available.
javax.xml.stream.Location#getCharacterOffset()->int:::Return the byte or character offset into the input source this location is pointing to
javax.xml.stream.Location#getPublicId()->String:::Returns the public ID of the XML
javax.xml.stream.Location#getSystemId()->String:::Returns the system ID of the XML
javax.xml.stream.StreamFilter#accept(XMLStreamReader)->boolean:::Tests whether the current state is part of this stream
javax.xml.stream.XMLEventFactory#newDefaultFactory()->XMLEventFactory:::Creates a new instance of the XMLEventFactory builtin system-default implementation.
javax.xml.stream.XMLEventFactory#newInstance()->XMLEventFactory:::Creates a new instance of the factory in exactly the same manner as the #newFactory() method.
javax.xml.stream.XMLEventFactory#newFactory()->XMLEventFactory:::Create a new instance of the factory
javax.xml.stream.XMLEventFactory#newInstance(String, ClassLoader)->XMLEventFactory:::Create a new instance of the factory
javax.xml.stream.XMLEventFactory#newFactory(String, ClassLoader)->XMLEventFactory:::Create a new instance of the factory
javax.xml.stream.XMLEventFactory#setLocation(Location)->void:::This method allows setting of the Location on each event that is created by this factory
javax.xml.stream.XMLEventFactory#createAttribute(String, String, String, String)->Attribute:::Create a new Attribute
javax.xml.stream.XMLEventFactory#createAttribute(String, String)->Attribute:::Create a new Attribute
javax.xml.stream.XMLEventFactory#createAttribute(QName, String)->Attribute:::Create a new Attribute
javax.xml.stream.XMLEventFactory#createNamespace(String)->Namespace:::Create a new default Namespace
javax.xml.stream.XMLEventFactory#createNamespace(String, String)->Namespace:::Create a new Namespace
javax.xml.stream.XMLEventFactory#createStartElement(QName, Iterator, Iterator)->StartElement:::Create a new StartElement
javax.xml.stream.XMLEventFactory#createStartElement(String, String, String)->StartElement:::Create a new StartElement
javax.xml.stream.XMLEventFactory#createStartElement(String, String, String, Iterator, Iterator)->StartElement:::Create a new StartElement
javax.xml.stream.XMLEventFactory#createStartElement(String, String, String, Iterator, Iterator, NamespaceContext)->StartElement:::Create a new StartElement
javax.xml.stream.XMLEventFactory#createEndElement(QName, Iterator)->EndElement:::Create a new EndElement
javax.xml.stream.XMLEventFactory#createEndElement(String, String, String)->EndElement:::Create a new EndElement
javax.xml.stream.XMLEventFactory#createEndElement(String, String, String, Iterator)->EndElement:::Create a new EndElement
javax.xml.stream.XMLEventFactory#createCharacters(String)->Characters:::Create a Characters event, this method does not check if the content is all whitespace
javax.xml.stream.XMLEventFactory#createCData(String)->Characters:::Create a Characters event with the CData flag set to true
javax.xml.stream.XMLEventFactory#createSpace(String)->Characters:::Create a Characters event with the isSpace flag set to true
javax.xml.stream.XMLEventFactory#createIgnorableSpace(String)->Characters:::Create an ignorable space
javax.xml.stream.XMLEventFactory#createStartDocument()->StartDocument:::Creates a new instance of a StartDocument event
javax.xml.stream.XMLEventFactory#createStartDocument(String, String, boolean)->StartDocument:::Creates a new instance of a StartDocument event
javax.xml.stream.XMLEventFactory#createStartDocument(String, String)->StartDocument:::Creates a new instance of a StartDocument event
javax.xml.stream.XMLEventFactory#createStartDocument(String)->StartDocument:::Creates a new instance of a StartDocument event
javax.xml.stream.XMLEventFactory#createEndDocument()->EndDocument:::Creates a new instance of an EndDocument event
javax.xml.stream.XMLEventFactory#createEntityReference(String, EntityDeclaration)->EntityReference:::Creates a new instance of a EntityReference event
javax.xml.stream.XMLEventFactory#createComment(String)->Comment:::Create a comment
javax.xml.stream.XMLEventFactory#createProcessingInstruction(String, String)->ProcessingInstruction:::Create a processing instruction
javax.xml.stream.XMLEventFactory#createDTD(String)->DTD:::Create a document type definition event This string contains the entire document type declaration that matches the doctypedecl in the XML 1.0 specification
javax.xml.stream.XMLEventReader#nextEvent()->XMLEvent:::Gets the next XMLEvent
javax.xml.stream.XMLEventReader#hasNext()->boolean:::Check if there are more events
javax.xml.stream.XMLEventReader#peek()->XMLEvent:::Check the next XMLEvent without reading it from the stream
javax.xml.stream.XMLEventReader#getElementText()->String:::Reads the content of a text-only element
javax.xml.stream.XMLEventReader#nextTag()->XMLEvent:::Skips any insignificant space events until a START_ELEMENT or END_ELEMENT is reached
javax.xml.stream.XMLEventReader#getProperty(java.lang.String)->Object:::Get the value of a feature/property from the underlying implementation
javax.xml.stream.XMLEventReader#close()->void:::Frees any resources associated with this Reader
javax.xml.stream.XMLEventWriter#flush()->void:::Writes any cached events to the underlying output mechanism
javax.xml.stream.XMLEventWriter#close()->void:::Frees any resources associated with this stream
javax.xml.stream.XMLEventWriter#add(XMLEvent)->void:::Add an event to the output stream Adding a START_ELEMENT will open a new namespace scope that will be closed when the corresponding END_ELEMENT is written
javax.xml.stream.XMLEventWriter#add(XMLEventReader)->void::: event writer add
javax.xml.stream.XMLEventWriter#getPrefix(String)->String:::Gets the prefix the uri is bound to
javax.xml.stream.XMLEventWriter#setPrefix(String, String)->void:::Sets the prefix the uri is bound to
javax.xml.stream.XMLEventWriter#setDefaultNamespace(String)->void:::Binds a URI to the default namespace This URI is bound in the scope of the current START_ELEMENT / END_ELEMENT pair
javax.xml.stream.XMLEventWriter#setNamespaceContext(NamespaceContext)->void:::Sets the current namespace context for prefix and uri bindings
javax.xml.stream.XMLEventWriter#getNamespaceContext()->NamespaceContext:::Returns the current namespace context.
javax.xml.stream.XMLInputFactory#newDefaultFactory()->XMLInputFactory:::Creates a new instance of the XMLInputFactory builtin system-default implementation.
javax.xml.stream.XMLInputFactory#newInstance()->XMLInputFactory:::Creates a new instance of the factory in exactly the same manner as the #newFactory() method.
javax.xml.stream.XMLInputFactory#newFactory()->XMLInputFactory:::Create a new instance of the factory
javax.xml.stream.XMLInputFactory#newInstance(String, ClassLoader)->XMLInputFactory:::Create a new instance of the factory
javax.xml.stream.XMLInputFactory#newFactory(String, ClassLoader)->XMLInputFactory:::Create a new instance of the factory
javax.xml.stream.XMLInputFactory#createXMLStreamReader(java.io.Reader)->XMLStreamReader:::Create a new XMLStreamReader from a reader
javax.xml.stream.XMLInputFactory#createXMLStreamReader(Source)->XMLStreamReader:::Create a new XMLStreamReader from a JAXP source
javax.xml.stream.XMLInputFactory#createXMLStreamReader(java.io.InputStream)->XMLStreamReader:::Create a new XMLStreamReader from a java.io.InputStream
javax.xml.stream.XMLInputFactory#createXMLStreamReader(java.io.InputStream, String)->XMLStreamReader:::Create a new XMLStreamReader from a java.io.InputStream
javax.xml.stream.XMLInputFactory#createXMLStreamReader(String, java.io.InputStream)->XMLStreamReader:::Create a new XMLStreamReader from a java.io.InputStream
javax.xml.stream.XMLInputFactory#createXMLStreamReader(String, java.io.Reader)->XMLStreamReader:::Create a new XMLStreamReader from a java.io.InputStream
javax.xml.stream.XMLInputFactory#createXMLEventReader(java.io.Reader)->XMLEventReader:::Create a new XMLEventReader from a reader
javax.xml.stream.XMLInputFactory#createXMLEventReader(String, java.io.Reader)->XMLEventReader:::Create a new XMLEventReader from a reader
javax.xml.stream.XMLInputFactory#createXMLEventReader(XMLStreamReader)->XMLEventReader:::Create a new XMLEventReader from an XMLStreamReader
javax.xml.stream.XMLInputFactory#createXMLEventReader(Source)->XMLEventReader:::Create a new XMLEventReader from a JAXP source
javax.xml.stream.XMLInputFactory#createXMLEventReader(java.io.InputStream)->XMLEventReader:::Create a new XMLEventReader from a java.io.InputStream
javax.xml.stream.XMLInputFactory#createXMLEventReader(java.io.InputStream, String)->XMLEventReader:::Create a new XMLEventReader from a java.io.InputStream
javax.xml.stream.XMLInputFactory#createXMLEventReader(String, java.io.InputStream)->XMLEventReader:::Create a new XMLEventReader from a java.io.InputStream
javax.xml.stream.XMLInputFactory#createFilteredReader(XMLStreamReader, StreamFilter)->XMLStreamReader:::Create a filtered reader that wraps the filter around the reader
javax.xml.stream.XMLInputFactory#createFilteredReader(XMLEventReader, EventFilter)->XMLEventReader:::Create a filtered event reader that wraps the filter around the event reader
javax.xml.stream.XMLInputFactory#getXMLResolver()->XMLResolver:::The resolver that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.
javax.xml.stream.XMLInputFactory#setXMLResolver(XMLResolver)->void:::The resolver that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.
javax.xml.stream.XMLInputFactory#getXMLReporter()->XMLReporter:::The reporter that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.
javax.xml.stream.XMLInputFactory#setXMLReporter(XMLReporter)->void:::The reporter that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.
javax.xml.stream.XMLInputFactory#setProperty(java.lang.String, Object)->void:::Allows the user to set specific feature/property on the underlying implementation
javax.xml.stream.XMLInputFactory#getProperty(java.lang.String)->Object:::Get the value of a feature/property from the underlying implementation
javax.xml.stream.XMLInputFactory#isPropertySupported(String)->boolean:::Query the set of properties that this factory supports.
javax.xml.stream.XMLInputFactory#setEventAllocator(XMLEventAllocator)->void:::Set a user defined event allocator for events
javax.xml.stream.XMLInputFactory#getEventAllocator()->XMLEventAllocator:::Gets the allocator used by streams created with this factory
javax.xml.stream.XMLOutputFactory#newDefaultFactory()->XMLOutputFactory:::Creates a new instance of the XMLOutputFactory builtin system-default implementation.
javax.xml.stream.XMLOutputFactory#newInstance()->XMLOutputFactory:::Creates a new instance of the factory in exactly the same manner as the #newFactory() method.
javax.xml.stream.XMLOutputFactory#newFactory()->XMLOutputFactory:::Create a new instance of the factory
javax.xml.stream.XMLOutputFactory#newInstance(String, ClassLoader)->XMLInputFactory:::Create a new instance of the factory.
javax.xml.stream.XMLOutputFactory#newFactory(String, ClassLoader)->XMLOutputFactory:::Create a new instance of the factory
javax.xml.stream.XMLOutputFactory#createXMLStreamWriter(java.io.Writer)->XMLStreamWriter:::Create a new XMLStreamWriter that writes to a writer
javax.xml.stream.XMLOutputFactory#createXMLStreamWriter(java.io.OutputStream)->XMLStreamWriter:::Create a new XMLStreamWriter that writes to a stream
javax.xml.stream.XMLOutputFactory#createXMLStreamWriter(java.io.OutputStream, String)->XMLStreamWriter:::Create a new XMLStreamWriter that writes to a stream
javax.xml.stream.XMLOutputFactory#createXMLStreamWriter(Result)->XMLStreamWriter:::Create a new XMLStreamWriter that writes to a JAXP result
javax.xml.stream.XMLOutputFactory#createXMLEventWriter(Result)->XMLEventWriter:::Create a new XMLEventWriter that writes to a JAXP result
javax.xml.stream.XMLOutputFactory#createXMLEventWriter(java.io.OutputStream)->XMLEventWriter:::Create a new XMLEventWriter that writes to a stream
javax.xml.stream.XMLOutputFactory#createXMLEventWriter(java.io.OutputStream, String)->XMLEventWriter:::Create a new XMLEventWriter that writes to a stream
javax.xml.stream.XMLOutputFactory#createXMLEventWriter(java.io.Writer)->XMLEventWriter:::Create a new XMLEventWriter that writes to a writer
javax.xml.stream.XMLOutputFactory#setProperty(java.lang.String, Object)->void:::Allows the user to set specific features/properties on the underlying implementation.
javax.xml.stream.XMLOutputFactory#getProperty(java.lang.String)->Object:::Get a feature/property on the underlying implementation
javax.xml.stream.XMLOutputFactory#isPropertySupported(String)->boolean:::Query the set of properties that this factory supports.
javax.xml.stream.XMLReporter#report(String, String, Object, Location)->void:::Report the desired message in an application specific format
javax.xml.stream.XMLResolver#resolveEntity(String, String, String, String)->Object:::Retrieves a resource
javax.xml.stream.XMLStreamException#getNestedException()->Throwable:::Gets the nested exception.
javax.xml.stream.XMLStreamException#getLocation()->Location:::Gets the location of the exception
javax.xml.stream.XMLStreamReader#getProperty(java.lang.String)->Object:::Get the value of a feature/property from the underlying implementation
javax.xml.stream.XMLStreamReader#next()->int:::Get next parsing event - a processor may return all contiguous character data in a single chunk, or it may split it into several chunks
javax.xml.stream.XMLStreamReader#require(int, String, String)->void:::Test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event
javax.xml.stream.XMLStreamReader#getElementText()->String:::Reads the content of a text-only element, an exception is thrown if this is not a text-only element
javax.xml.stream.XMLStreamReader#nextTag()->int:::Skips any white space (isWhiteSpace() returns true), COMMENT, or PROCESSING_INSTRUCTION, until a START_ELEMENT or END_ELEMENT is reached
javax.xml.stream.XMLStreamReader#hasNext()->boolean:::Returns true if there are more parsing events and false if there are no more events
javax.xml.stream.XMLStreamReader#close()->void:::Frees any resources associated with this Reader
javax.xml.stream.XMLStreamReader#getNamespaceURI(String)->String:::Return the uri for the given prefix
javax.xml.stream.XMLStreamReader#isStartElement()->boolean:::Returns true if the cursor points to a start tag (otherwise false)
javax.xml.stream.XMLStreamReader#isEndElement()->boolean:::Returns true if the cursor points to an end tag (otherwise false)
javax.xml.stream.XMLStreamReader#isCharacters()->boolean:::Returns true if the cursor points to a character data event
javax.xml.stream.XMLStreamReader#isWhiteSpace()->boolean:::Returns true if the cursor points to a character data event that consists of all whitespace
javax.xml.stream.XMLStreamReader#getAttributeValue(String, String)->String:::Returns the normalized attribute value of the attribute with the namespace and localName If the namespaceURI is null the namespace is not checked for equality
javax.xml.stream.XMLStreamReader#getAttributeCount()->int:::Returns the count of attributes on this START_ELEMENT, this method is only valid on a START_ELEMENT or ATTRIBUTE
javax.xml.stream.XMLStreamReader#getAttributeName(int)->QName:::Returns the qname of the attribute at the provided index
javax.xml.stream.XMLStreamReader#getAttributeNamespace(int)->String:::Returns the namespace of the attribute at the provided index
javax.xml.stream.XMLStreamReader#getAttributeLocalName(int)->String:::Returns the localName of the attribute at the provided index
javax.xml.stream.XMLStreamReader#getAttributePrefix(int)->String:::Returns the prefix of this attribute at the provided index
javax.xml.stream.XMLStreamReader#getAttributeType(int)->String:::Returns the XML type of the attribute at the provided index
javax.xml.stream.XMLStreamReader#getAttributeValue(int)->String:::Returns the value of the attribute at the index
javax.xml.stream.XMLStreamReader#isAttributeSpecified(int)->boolean:::Returns a boolean which indicates if this attribute was created by default
javax.xml.stream.XMLStreamReader#getNamespaceCount()->int:::Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT, this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE
javax.xml.stream.XMLStreamReader#getNamespacePrefix(int)->String:::Returns the prefix for the namespace declared at the index
javax.xml.stream.XMLStreamReader#getNamespaceURI(int)->String:::Returns the uri for the namespace declared at the index.
javax.xml.stream.XMLStreamReader#getNamespaceContext()->NamespaceContext:::Returns a read only namespace context for the current position
javax.xml.stream.XMLStreamReader#getEventType()->int:::Returns an integer code that indicates the type of the event the cursor is pointing to
javax.xml.stream.XMLStreamReader#getText()->String:::Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, the string value of a CDATA section, the string value for a SPACE event, or the String value of the internal subset of the DTD
javax.xml.stream.XMLStreamReader#getTextCharacters()->char[]:::Returns an array which contains the characters from this event
javax.xml.stream.XMLStreamReader#getTextCharacters(int, char[], int, int)->int:::Gets the the text associated with a CHARACTERS, SPACE or CDATA event
javax.xml.stream.XMLStreamReader#getTextStart()->int:::Returns the offset into the text character array where the first character (of this text event) is stored.
javax.xml.stream.XMLStreamReader#getTextLength()->int:::Returns the length of the sequence of characters for this Text event within the text character array.
javax.xml.stream.XMLStreamReader#getEncoding()->String:::Return input encoding if known or null if unknown.
javax.xml.stream.XMLStreamReader#hasText()->boolean:::Return a boolean indicating whether the current event has text
javax.xml.stream.XMLStreamReader#getLocation()->Location:::Return the current location of the processor
javax.xml.stream.XMLStreamReader#getName()->QName:::Returns a QName for the current START_ELEMENT or END_ELEMENT event
javax.xml.stream.XMLStreamReader#getLocalName()->String:::Returns the (local) name of the current event
javax.xml.stream.XMLStreamReader#hasName()->boolean:::returns a boolean indicating whether the current event has a name (is a START_ELEMENT or END_ELEMENT).
javax.xml.stream.XMLStreamReader#getNamespaceURI()->String:::If the current event is a START_ELEMENT or END_ELEMENT  this method returns the URI of the prefix or the default namespace
javax.xml.stream.XMLStreamReader#getPrefix()->String:::Returns the prefix of the current event or null if the event does not have a prefix
javax.xml.stream.XMLStreamReader#getVersion()->String:::Get the xml version declared on the xml declaration Returns null if none was declared
javax.xml.stream.XMLStreamReader#isStandalone()->boolean:::Get the standalone declaration from the xml declaration
javax.xml.stream.XMLStreamReader#standaloneSet()->boolean:::Checks if standalone was set in the document
javax.xml.stream.XMLStreamReader#getCharacterEncodingScheme()->String:::Returns the character encoding declared on the xml declaration Returns null if none was declared
javax.xml.stream.XMLStreamReader#getPITarget()->String:::Get the target of a processing instruction
javax.xml.stream.XMLStreamReader#getPIData()->String:::Get the data section of a processing instruction
javax.xml.stream.XMLStreamWriter#writeStartElement(String)->void:::Writes a start tag to the output
javax.xml.stream.XMLStreamWriter#writeStartElement(String, String)->void:::Writes a start tag to the output
javax.xml.stream.XMLStreamWriter#writeStartElement(String, String, String)->void:::Writes a start tag to the output
javax.xml.stream.XMLStreamWriter#writeEmptyElement(String, String)->void:::Writes an empty element tag to the output
javax.xml.stream.XMLStreamWriter#writeEmptyElement(String, String, String)->void:::Writes an empty element tag to the output
javax.xml.stream.XMLStreamWriter#writeEmptyElement(String)->void:::Writes an empty element tag to the output
javax.xml.stream.XMLStreamWriter#writeEndElement()->void:::Writes an end tag to the output relying on the internal state of the writer to determine the prefix and local name of the event.
javax.xml.stream.XMLStreamWriter#writeEndDocument()->void:::Closes any start tags and writes corresponding end tags.
javax.xml.stream.XMLStreamWriter#close()->void:::Close this writer and free any resources associated with the writer
javax.xml.stream.XMLStreamWriter#flush()->void:::Write any cached data to the underlying output mechanism.
javax.xml.stream.XMLStreamWriter#writeAttribute(String, String)->void:::Writes an attribute to the output stream without a prefix.
javax.xml.stream.XMLStreamWriter#writeAttribute(String, String, String, String)->void::: stream writer write attribute
javax.xml.stream.XMLStreamWriter#writeAttribute(String, String, String)->void:::Writes an attribute to the output stream
javax.xml.stream.XMLStreamWriter#writeNamespace(String, String)->void:::Writes a namespace to the output stream If the prefix argument to this method is the empty string, "xmlns", or null this method will delegate to writeDefaultNamespace
javax.xml.stream.XMLStreamWriter#writeDefaultNamespace(String)->void:::Writes the default namespace to the stream
javax.xml.stream.XMLStreamWriter#writeComment(String)->void:::Writes an xml comment with the data enclosed
javax.xml.stream.XMLStreamWriter#writeProcessingInstruction(String)->void:::Writes a processing instruction
javax.xml.stream.XMLStreamWriter#writeProcessingInstruction(String, String)->void:::Writes a processing instruction
javax.xml.stream.XMLStreamWriter#writeCData(String)->void:::Writes a CData section
javax.xml.stream.XMLStreamWriter#writeDTD(String)->void:::Write a DTD section
javax.xml.stream.XMLStreamWriter#writeEntityRef(String)->void:::Writes an entity reference
javax.xml.stream.XMLStreamWriter#writeStartDocument()->void:::Write the XML Declaration
javax.xml.stream.XMLStreamWriter#writeStartDocument(String)->void:::Write the XML Declaration
javax.xml.stream.XMLStreamWriter#writeStartDocument(String, String)->void:::Write the XML Declaration
javax.xml.stream.XMLStreamWriter#writeCharacters(String)->void:::Write text to the output
javax.xml.stream.XMLStreamWriter#writeCharacters(char[], int, int)->void:::Write text to the output
javax.xml.stream.XMLStreamWriter#getPrefix(String)->String:::Gets the prefix the uri is bound to
javax.xml.stream.XMLStreamWriter#setPrefix(String, String)->void:::Sets the prefix the uri is bound to
javax.xml.stream.XMLStreamWriter#setDefaultNamespace(String)->void:::Binds a URI to the default namespace This URI is bound in the scope of the current START_ELEMENT / END_ELEMENT pair
javax.xml.stream.XMLStreamWriter#setNamespaceContext(NamespaceContext)->void:::Sets the current namespace context for prefix and uri bindings
javax.xml.stream.XMLStreamWriter#getNamespaceContext()->NamespaceContext:::Returns the current namespace context.
javax.xml.stream.XMLStreamWriter#getProperty(java.lang.String)->Object:::Get the value of a feature/property from the underlying implementation

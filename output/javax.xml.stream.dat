EventFilter#accept(XMLEvent):::Tests whether this event is part of this stream:::
FactoryConfigurationError#getException():::Return the nested exception (if any):::return
FactoryConfigurationError#getCause():::use the exception chaining mechanism of JDK1.4:::return
FactoryConfigurationError#getMessage():::Report the message associated with this error:::msg->super->getMessage->if->return->if->nested->getMessage->if->nested->getClass->toString->return
FactoryFinder#dPrint(Supplier)::: factory finder d print:::if->msgGen->get->println
FactoryFinder#getProviderClass(String, ClassLoader, boolean, boolean):::Attempt to load a class using the class loader supplied:::try->if->if->return->Class->getClassLoader->forName->else->SecuritySupport->getContextClassLoader->if->throw->new->ClassNotFoundException->else->return->Class->forName->else->return->Class->forName->catch->if->return->Class->getClassLoader->forName->else->throw->finally
FactoryFinder#newInstance(Class, String, ClassLoader, boolean):::Create an instance of a class:::return->newInstance
FactoryFinder#newInstance(Class, String, ClassLoader, boolean, boolean):::Create an instance of a class:::if->System->getSecurityManager->if->className->startsWith->try->providerClass->getProviderClass->if->type->isAssignableFrom->throw->type->getName->new->ClassCastException->instance->providerClass->getConstructor->newInstance->clD->dPrint->return->type->cast->catch->throw->new->FactoryConfigurationError->throw->new->FactoryConfigurationError->finally
FactoryFinder#find(Class, String):::Finds the implementation Class object in the specified order.:::return->type->getName->find
FactoryFinder#find(Class, String, ClassLoader, String):::Finds the implementation Class object in the specified order:::dPrint->try->systemProp->if->type->getName->equals->SecuritySupport->getSystemProperty->else->System->getProperty->if->dPrint->return->newInstance->catch->throw->new->FactoryConfigurationError->finally->configFile->try->if->synchronized->if->SecuritySupport->getSystemProperty->fStax->new->File->if->SecuritySupport->doesFileExist->dPrint->cacheProps->SecuritySupport->getFileInputStream->load->else->SecuritySupport->getSystemProperty->fJaxp->new->File->if->SecuritySupport->doesFileExist->dPrint->cacheProps->SecuritySupport->getFileInputStream->load->factoryClassName->cacheProps->getProperty->if->foundIn->dPrint->return->newInstance->catch->if->ex->printStackTrace->finally->if->type->getName->equals->provider->findServiceProvider->if->return->else->if->throw->new->FactoryConfigurationError->dPrint->return->newInstance
FactoryFinder#findServiceProvider(Class, ClassLoader)::: factory finder find service provider:::try->return->AccessController->new->PrivilegedAction<T>->doPrivileged->catch->x->new->RuntimeException->error->x->getMessage->new->FactoryConfigurationError->throw->finally
Location#getLineNumber():::Return the line number where the current event ends, returns -1 if none is available.:::
Location#getColumnNumber():::Return the column number where the current event ends, returns -1 if none is available.:::
Location#getCharacterOffset():::Return the byte or character offset into the input source this location is pointing to:::
Location#getPublicId():::Returns the public ID of the XML:::
Location#getSystemId():::Returns the system ID of the XML:::
StreamFilter#accept(XMLStreamReader):::Tests whether the current state is part of this stream:::
XMLEventFactory#newDefaultFactory():::Creates a new instance of the XMLEventFactory builtin system-default implementation.:::return->new->XMLEventFactoryImpl
XMLEventFactory#newInstance():::Creates a new instance of the factory in exactly the same manner as the #newFactory() method.:::return->FactoryFinder->find
XMLEventFactory#newFactory():::Create a new instance of the factory:::return->FactoryFinder->find
XMLEventFactory#newInstance(String, ClassLoader):::Create a new instance of the factory:::return->FactoryFinder->find
XMLEventFactory#newFactory(String, ClassLoader):::Create a new instance of the factory:::return->FactoryFinder->find
XMLEventFactory#setLocation(Location):::This method allows setting of the Location on each event that is created by this factory:::
XMLEventFactory#createAttribute(String, String, String, String):::Create a new Attribute:::
XMLEventFactory#createAttribute(String, String):::Create a new Attribute:::
XMLEventFactory#createAttribute(QName, String):::Create a new Attribute:::
XMLEventFactory#createNamespace(String):::Create a new default Namespace:::
XMLEventFactory#createNamespace(String, String):::Create a new Namespace:::
XMLEventFactory#createStartElement(QName, Iterator, Iterator):::Create a new StartElement:::
XMLEventFactory#createStartElement(String, String, String):::Create a new StartElement:::
XMLEventFactory#createStartElement(String, String, String, Iterator, Iterator):::Create a new StartElement:::
XMLEventFactory#createStartElement(String, String, String, Iterator, Iterator, NamespaceContext):::Create a new StartElement:::
XMLEventFactory#createEndElement(QName, Iterator):::Create a new EndElement:::
XMLEventFactory#createEndElement(String, String, String):::Create a new EndElement:::
XMLEventFactory#createEndElement(String, String, String, Iterator):::Create a new EndElement:::
XMLEventFactory#createCharacters(String):::Create a Characters event, this method does not check if the content is all whitespace:::
XMLEventFactory#createCData(String):::Create a Characters event with the CData flag set to true:::
XMLEventFactory#createSpace(String):::Create a Characters event with the isSpace flag set to true:::
XMLEventFactory#createIgnorableSpace(String):::Create an ignorable space:::
XMLEventFactory#createStartDocument():::Creates a new instance of a StartDocument event:::
XMLEventFactory#createStartDocument(String, String, boolean):::Creates a new instance of a StartDocument event:::
XMLEventFactory#createStartDocument(String, String):::Creates a new instance of a StartDocument event:::
XMLEventFactory#createStartDocument(String):::Creates a new instance of a StartDocument event:::
XMLEventFactory#createEndDocument():::Creates a new instance of an EndDocument event:::
XMLEventFactory#createEntityReference(String, EntityDeclaration):::Creates a new instance of a EntityReference event:::
XMLEventFactory#createComment(String):::Create a comment:::
XMLEventFactory#createProcessingInstruction(String, String):::Create a processing instruction:::
XMLEventFactory#createDTD(String):::Create a document type definition event This string contains the entire document type declaration that matches the doctypedecl in the XML 1.0 specification:::
XMLEventReader#nextEvent():::Gets the next XMLEvent:::
XMLEventReader#hasNext():::Check if there are more events:::
XMLEventReader#peek():::Check the next XMLEvent without reading it from the stream:::
XMLEventReader#getElementText():::Reads the content of a text-only element:::
XMLEventReader#nextTag():::Skips any insignificant space events until a START_ELEMENT or END_ELEMENT is reached:::
XMLEventReader#getProperty(java.lang.String):::Get the value of a feature/property from the underlying implementation:::
XMLEventReader#close():::Frees any resources associated with this Reader:::
XMLEventWriter#flush():::Writes any cached events to the underlying output mechanism:::
XMLEventWriter#close():::Frees any resources associated with this stream:::
XMLEventWriter#add(XMLEvent):::Add an event to the output stream Adding a START_ELEMENT will open a new namespace scope that will be closed when the corresponding END_ELEMENT is written:::
XMLEventWriter#add(XMLEventReader)::: event writer add:::
XMLEventWriter#getPrefix(String):::Gets the prefix the uri is bound to:::
XMLEventWriter#setPrefix(String, String):::Sets the prefix the uri is bound to:::
XMLEventWriter#setDefaultNamespace(String):::Binds a URI to the default namespace This URI is bound in the scope of the current START_ELEMENT / END_ELEMENT pair:::
XMLEventWriter#setNamespaceContext(NamespaceContext):::Sets the current namespace context for prefix and uri bindings:::
XMLEventWriter#getNamespaceContext():::Returns the current namespace context.:::
XMLInputFactory#newDefaultFactory():::Creates a new instance of the XMLInputFactory builtin system-default implementation.:::return->new->XMLInputFactoryImpl
XMLInputFactory#newInstance():::Creates a new instance of the factory in exactly the same manner as the #newFactory() method.:::return->FactoryFinder->find
XMLInputFactory#newFactory():::Create a new instance of the factory:::return->FactoryFinder->find
XMLInputFactory#newInstance(String, ClassLoader):::Create a new instance of the factory:::return->FactoryFinder->find
XMLInputFactory#newFactory(String, ClassLoader):::Create a new instance of the factory:::return->FactoryFinder->find
XMLInputFactory#createXMLStreamReader(java.io.Reader):::Create a new XMLStreamReader from a reader:::
XMLInputFactory#createXMLStreamReader(Source):::Create a new XMLStreamReader from a JAXP source:::
XMLInputFactory#createXMLStreamReader(java.io.InputStream):::Create a new XMLStreamReader from a java.io.InputStream:::
XMLInputFactory#createXMLStreamReader(java.io.InputStream, String):::Create a new XMLStreamReader from a java.io.InputStream:::
XMLInputFactory#createXMLStreamReader(String, java.io.InputStream):::Create a new XMLStreamReader from a java.io.InputStream:::
XMLInputFactory#createXMLStreamReader(String, java.io.Reader):::Create a new XMLStreamReader from a java.io.InputStream:::
XMLInputFactory#createXMLEventReader(java.io.Reader):::Create a new XMLEventReader from a reader:::
XMLInputFactory#createXMLEventReader(String, java.io.Reader):::Create a new XMLEventReader from a reader:::
XMLInputFactory#createXMLEventReader(XMLStreamReader):::Create a new XMLEventReader from an XMLStreamReader:::
XMLInputFactory#createXMLEventReader(Source):::Create a new XMLEventReader from a JAXP source:::
XMLInputFactory#createXMLEventReader(java.io.InputStream):::Create a new XMLEventReader from a java.io.InputStream:::
XMLInputFactory#createXMLEventReader(java.io.InputStream, String):::Create a new XMLEventReader from a java.io.InputStream:::
XMLInputFactory#createXMLEventReader(String, java.io.InputStream):::Create a new XMLEventReader from a java.io.InputStream:::
XMLInputFactory#createFilteredReader(XMLStreamReader, StreamFilter):::Create a filtered reader that wraps the filter around the reader:::
XMLInputFactory#createFilteredReader(XMLEventReader, EventFilter):::Create a filtered event reader that wraps the filter around the event reader:::
XMLInputFactory#getXMLResolver():::The resolver that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.:::
XMLInputFactory#setXMLResolver(XMLResolver):::The resolver that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.:::
XMLInputFactory#getXMLReporter():::The reporter that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.:::
XMLInputFactory#setXMLReporter(XMLReporter):::The reporter that will be set on any XMLStreamReader or XMLEventReader created by this factory instance.:::
XMLInputFactory#setProperty(java.lang.String, Object):::Allows the user to set specific feature/property on the underlying implementation:::
XMLInputFactory#getProperty(java.lang.String):::Get the value of a feature/property from the underlying implementation:::
XMLInputFactory#isPropertySupported(String):::Query the set of properties that this factory supports.:::
XMLInputFactory#setEventAllocator(XMLEventAllocator):::Set a user defined event allocator for events:::
XMLInputFactory#getEventAllocator():::Gets the allocator used by streams created with this factory:::
XMLOutputFactory#newDefaultFactory():::Creates a new instance of the XMLOutputFactory builtin system-default implementation.:::return->new->XMLOutputFactoryImpl
XMLOutputFactory#newInstance():::Creates a new instance of the factory in exactly the same manner as the #newFactory() method.:::return->FactoryFinder->find
XMLOutputFactory#newFactory():::Create a new instance of the factory:::return->FactoryFinder->find
XMLOutputFactory#newInstance(String, ClassLoader):::Create a new instance of the factory.:::return->FactoryFinder->find
XMLOutputFactory#newFactory(String, ClassLoader):::Create a new instance of the factory:::return->FactoryFinder->find
XMLOutputFactory#createXMLStreamWriter(java.io.Writer):::Create a new XMLStreamWriter that writes to a writer:::
XMLOutputFactory#createXMLStreamWriter(java.io.OutputStream):::Create a new XMLStreamWriter that writes to a stream:::
XMLOutputFactory#createXMLStreamWriter(java.io.OutputStream, String):::Create a new XMLStreamWriter that writes to a stream:::
XMLOutputFactory#createXMLStreamWriter(Result):::Create a new XMLStreamWriter that writes to a JAXP result:::
XMLOutputFactory#createXMLEventWriter(Result):::Create a new XMLEventWriter that writes to a JAXP result:::
XMLOutputFactory#createXMLEventWriter(java.io.OutputStream):::Create a new XMLEventWriter that writes to a stream:::
XMLOutputFactory#createXMLEventWriter(java.io.OutputStream, String):::Create a new XMLEventWriter that writes to a stream:::
XMLOutputFactory#createXMLEventWriter(java.io.Writer):::Create a new XMLEventWriter that writes to a writer:::
XMLOutputFactory#setProperty(java.lang.String, Object):::Allows the user to set specific features/properties on the underlying implementation.:::
XMLOutputFactory#getProperty(java.lang.String):::Get a feature/property on the underlying implementation:::
XMLOutputFactory#isPropertySupported(String):::Query the set of properties that this factory supports.:::
XMLReporter#report(String, String, Object, Location):::Report the desired message in an application specific format:::
XMLResolver#resolveEntity(String, String, String, String):::Retrieves a resource:::
XMLStreamException#getNestedException():::Gets the nested exception.:::return
XMLStreamException#getLocation():::Gets the location of the exception:::return
XMLStreamReader#getProperty(java.lang.String):::Get the value of a feature/property from the underlying implementation:::
XMLStreamReader#next():::Get next parsing event - a processor may return all contiguous character data in a single chunk, or it may split it into several chunks:::
XMLStreamReader#require(int, String, String):::Test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event:::
XMLStreamReader#getElementText():::Reads the content of a text-only element, an exception is thrown if this is not a text-only element:::
XMLStreamReader#nextTag():::Skips any white space (isWhiteSpace() returns true), COMMENT, or PROCESSING_INSTRUCTION, until a START_ELEMENT or END_ELEMENT is reached:::
XMLStreamReader#hasNext():::Returns true if there are more parsing events and false if there are no more events:::
XMLStreamReader#close():::Frees any resources associated with this Reader:::
XMLStreamReader#getNamespaceURI(String):::Return the uri for the given prefix:::
XMLStreamReader#isStartElement():::Returns true if the cursor points to a start tag (otherwise false):::
XMLStreamReader#isEndElement():::Returns true if the cursor points to an end tag (otherwise false):::
XMLStreamReader#isCharacters():::Returns true if the cursor points to a character data event:::
XMLStreamReader#isWhiteSpace():::Returns true if the cursor points to a character data event that consists of all whitespace:::
XMLStreamReader#getAttributeValue(String, String):::Returns the normalized attribute value of the attribute with the namespace and localName If the namespaceURI is null the namespace is not checked for equality:::
XMLStreamReader#getAttributeCount():::Returns the count of attributes on this START_ELEMENT, this method is only valid on a START_ELEMENT or ATTRIBUTE:::
XMLStreamReader#getAttributeName(int):::Returns the qname of the attribute at the provided index:::
XMLStreamReader#getAttributeNamespace(int):::Returns the namespace of the attribute at the provided index:::
XMLStreamReader#getAttributeLocalName(int):::Returns the localName of the attribute at the provided index:::
XMLStreamReader#getAttributePrefix(int):::Returns the prefix of this attribute at the provided index:::
XMLStreamReader#getAttributeType(int):::Returns the XML type of the attribute at the provided index:::
XMLStreamReader#getAttributeValue(int):::Returns the value of the attribute at the index:::
XMLStreamReader#isAttributeSpecified(int):::Returns a boolean which indicates if this attribute was created by default:::
XMLStreamReader#getNamespaceCount():::Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT, this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE:::
XMLStreamReader#getNamespacePrefix(int):::Returns the prefix for the namespace declared at the index:::
XMLStreamReader#getNamespaceURI(int):::Returns the uri for the namespace declared at the index.:::
XMLStreamReader#getNamespaceContext():::Returns a read only namespace context for the current position:::
XMLStreamReader#getEventType():::Returns an integer code that indicates the type of the event the cursor is pointing to:::
XMLStreamReader#getText():::Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, the string value of a CDATA section, the string value for a SPACE event, or the String value of the internal subset of the DTD:::
XMLStreamReader#getTextCharacters():::Returns an array which contains the characters from this event:::
XMLStreamReader#getTextCharacters(int, char[], int, int):::Gets the the text associated with a CHARACTERS, SPACE or CDATA event:::
XMLStreamReader#getTextStart():::Returns the offset into the text character array where the first character (of this text event) is stored.:::
XMLStreamReader#getTextLength():::Returns the length of the sequence of characters for this Text event within the text character array.:::
XMLStreamReader#getEncoding():::Return input encoding if known or null if unknown.:::
XMLStreamReader#hasText():::Return a boolean indicating whether the current event has text:::
XMLStreamReader#getLocation():::Return the current location of the processor:::
XMLStreamReader#getName():::Returns a QName for the current START_ELEMENT or END_ELEMENT event:::
XMLStreamReader#getLocalName():::Returns the (local) name of the current event:::
XMLStreamReader#hasName():::returns a boolean indicating whether the current event has a name (is a START_ELEMENT or END_ELEMENT).:::
XMLStreamReader#getNamespaceURI():::If the current event is a START_ELEMENT or END_ELEMENT  this method returns the URI of the prefix or the default namespace:::
XMLStreamReader#getPrefix():::Returns the prefix of the current event or null if the event does not have a prefix:::
XMLStreamReader#getVersion():::Get the xml version declared on the xml declaration Returns null if none was declared:::
XMLStreamReader#isStandalone():::Get the standalone declaration from the xml declaration:::
XMLStreamReader#standaloneSet():::Checks if standalone was set in the document:::
XMLStreamReader#getCharacterEncodingScheme():::Returns the character encoding declared on the xml declaration Returns null if none was declared:::
XMLStreamReader#getPITarget():::Get the target of a processing instruction:::
XMLStreamReader#getPIData():::Get the data section of a processing instruction:::
XMLStreamWriter#writeStartElement(String):::Writes a start tag to the output:::
XMLStreamWriter#writeStartElement(String, String):::Writes a start tag to the output:::
XMLStreamWriter#writeStartElement(String, String, String):::Writes a start tag to the output:::
XMLStreamWriter#writeEmptyElement(String, String):::Writes an empty element tag to the output:::
XMLStreamWriter#writeEmptyElement(String, String, String):::Writes an empty element tag to the output:::
XMLStreamWriter#writeEmptyElement(String):::Writes an empty element tag to the output:::
XMLStreamWriter#writeEndElement():::Writes an end tag to the output relying on the internal state of the writer to determine the prefix and local name of the event.:::
XMLStreamWriter#writeEndDocument():::Closes any start tags and writes corresponding end tags.:::
XMLStreamWriter#close():::Close this writer and free any resources associated with the writer:::
XMLStreamWriter#flush():::Write any cached data to the underlying output mechanism.:::
XMLStreamWriter#writeAttribute(String, String):::Writes an attribute to the output stream without a prefix.:::
XMLStreamWriter#writeAttribute(String, String, String, String)::: stream writer write attribute:::
XMLStreamWriter#writeAttribute(String, String, String):::Writes an attribute to the output stream:::
XMLStreamWriter#writeNamespace(String, String):::Writes a namespace to the output stream If the prefix argument to this method is the empty string, "xmlns", or null this method will delegate to writeDefaultNamespace:::
XMLStreamWriter#writeDefaultNamespace(String):::Writes the default namespace to the stream:::
XMLStreamWriter#writeComment(String):::Writes an xml comment with the data enclosed:::
XMLStreamWriter#writeProcessingInstruction(String):::Writes a processing instruction:::
XMLStreamWriter#writeProcessingInstruction(String, String):::Writes a processing instruction:::
XMLStreamWriter#writeCData(String):::Writes a CData section:::
XMLStreamWriter#writeDTD(String):::Write a DTD section:::
XMLStreamWriter#writeEntityRef(String):::Writes an entity reference:::
XMLStreamWriter#writeStartDocument():::Write the XML Declaration:::
XMLStreamWriter#writeStartDocument(String):::Write the XML Declaration:::
XMLStreamWriter#writeStartDocument(String, String):::Write the XML Declaration:::
XMLStreamWriter#writeCharacters(String):::Write text to the output:::
XMLStreamWriter#writeCharacters(char[], int, int):::Write text to the output:::
XMLStreamWriter#getPrefix(String):::Gets the prefix the uri is bound to:::
XMLStreamWriter#setPrefix(String, String):::Sets the prefix the uri is bound to:::
XMLStreamWriter#setDefaultNamespace(String):::Binds a URI to the default namespace This URI is bound in the scope of the current START_ELEMENT / END_ELEMENT pair:::
XMLStreamWriter#setNamespaceContext(NamespaceContext):::Sets the current namespace context for prefix and uri bindings:::
XMLStreamWriter#getNamespaceContext():::Returns the current namespace context.:::
XMLStreamWriter#getProperty(java.lang.String):::Get the value of a feature/property from the underlying implementation:::

org.graalvm.compiler.java.BytecodeParserOptions_OptionDescriptors#get(String)->OptionDescriptor::: bytecode parser options_ option descriptors get
org.graalvm.compiler.java.BytecodeParserOptions_OptionDescriptors#iterator()->Iterator::: bytecode parser options_ option descriptors iterator
org.graalvm.compiler.java.BciBlockMapping.BciBlock.JSRData#copy()->JSRData::: data copy
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getStartBci()->int::: bci block get start bci
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getEndBci()->int::: bci block get end bci
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getLoops()->long::: bci block get loops
org.graalvm.compiler.java.BciBlockMapping.BciBlock#exceptionDispatchBlock()->BciBlock::: bci block exception dispatch block
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getId()->int::: bci block get id
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getPredecessorCount()->int::: bci block get predecessor count
org.graalvm.compiler.java.BciBlockMapping.BciBlock#numNormalSuccessors()->int::: bci block num normal successors
org.graalvm.compiler.java.BciBlockMapping.BciBlock#copy()->BciBlock::: bci block copy
org.graalvm.compiler.java.BciBlockMapping.BciBlock#toString()->String::: bci block to string
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getLoopDepth()->int::: bci block get loop depth
org.graalvm.compiler.java.BciBlockMapping.BciBlock#isLoopHeader()->boolean::: bci block is loop header
org.graalvm.compiler.java.BciBlockMapping.BciBlock#isExceptionEntry()->boolean::: bci block is exception entry
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getSuccessor(int)->BciBlock::: bci block get successor
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getLoopId()->int:::Get the loop id of the inner most loop.
org.graalvm.compiler.java.BciBlockMapping.BciBlock#loopIdIterable()->Iterable:::Iterate over loop ids.
org.graalvm.compiler.java.BciBlockMapping.BciBlock#probability()->double::: bci block probability
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getPostdominator()->BciBlock::: bci block get postdominator
org.graalvm.compiler.java.BciBlockMapping.BciBlock#setEndsWithRet()->void::: bci block set ends with ret
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getJsrScope()->JsrScope::: bci block get jsr scope
org.graalvm.compiler.java.BciBlockMapping.BciBlock#endsWithRet()->boolean::: bci block ends with ret
org.graalvm.compiler.java.BciBlockMapping.BciBlock#setRetSuccessor(BciBlock)->void::: bci block set ret successor
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getRetSuccessor()->BciBlock::: bci block get ret successor
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getJsrSuccessor()->BciBlock::: bci block get jsr successor
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getJsrReturnBci()->int::: bci block get jsr return bci
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getJsrAlternatives()->EconomicMap::: bci block get jsr alternatives
org.graalvm.compiler.java.BciBlockMapping.BciBlock#initJsrAlternatives()->void::: bci block init jsr alternatives
org.graalvm.compiler.java.BciBlockMapping.BciBlock#setJsrScope(JsrScope)->void::: bci block set jsr scope
org.graalvm.compiler.java.BciBlockMapping.BciBlock#setJsrSuccessor(BciBlock)->void::: bci block set jsr successor
org.graalvm.compiler.java.BciBlockMapping.BciBlock#setJsrReturnBci(int)->void::: bci block set jsr return bci
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getSuccessorCount()->int::: bci block get successor count
org.graalvm.compiler.java.BciBlockMapping.BciBlock#getSuccessors()->List::: bci block get successors
org.graalvm.compiler.java.BciBlockMapping.BciBlock#setId(int)->void::: bci block set id
org.graalvm.compiler.java.BciBlockMapping.BciBlock#addSuccessor(BciBlock)->void::: bci block add successor
org.graalvm.compiler.java.BciBlockMapping.BciBlock#clearSucccessors()->void::: bci block clear succcessors
org.graalvm.compiler.java.BciBlockMapping.BciBlock#isExceptionDispatch()->boolean::: bci block is exception dispatch
org.graalvm.compiler.java.BciBlockMapping.ExceptionDispatchBlock#isExceptionDispatch()->boolean::: exception dispatch block is exception dispatch
org.graalvm.compiler.java.BciBlockMapping#getBlocks()->BciBlock[]::: bci block mapping get blocks
org.graalvm.compiler.java.BciBlockMapping#build(BytecodeStream, OptionValues)->void:::Builds the block map and conservative CFG and numbers blocks.
org.graalvm.compiler.java.BciBlockMapping#log(BciBlock[], String)->void::: bci block mapping log
org.graalvm.compiler.java.BciBlockMapping#toString(BciBlock[], BciBlock[])->String::: bci block mapping to string
org.graalvm.compiler.java.BciBlockMapping#toString()->String::: bci block mapping to string
org.graalvm.compiler.java.BciBlockMapping#getLoopHeader(int)->BciBlock:::Get the header block for a loop index.
org.graalvm.compiler.java.BciBlockMapping#create(BytecodeStream, Bytecode, OptionValues, DebugContext)->BciBlockMapping::: bci block mapping create
org.graalvm.compiler.java.BciBlockMapping#getLoopHeaders()->BciBlock[]::: bci block mapping get loop headers
org.graalvm.compiler.java.BciBlockMapping#getStartBlock()->BciBlock::: bci block mapping get start block
org.graalvm.compiler.java.BciBlockMapping#getUnwindBlock()->ExceptionDispatchBlock::: bci block mapping get unwind block
org.graalvm.compiler.java.BciBlockMapping#getLoopCount()->int::: bci block mapping get loop count
org.graalvm.compiler.java.BciBlockMapping#getBlockCount()->int::: bci block mapping get block count
org.graalvm.compiler.java.BytecodeParser.InliningScope#close()->void::: inlining scope close
org.graalvm.compiler.java.BytecodeParser.InliningScope#processPlaceholderFrameStates(boolean)->void:::Fixes up the BytecodeFrame#isPlaceholderBci(int) placeholder frame states added to the graph while parsing/inlining the intrinsic for which this object exists.
org.graalvm.compiler.java.BytecodeParser.InliningScope#handleReturnMismatch(StructuredGraph, FrameState)->void::: inlining scope handle return mismatch
org.graalvm.compiler.java.BytecodeParser.IntrinsicScope#close()->void::: intrinsic scope close
org.graalvm.compiler.java.BytecodeParser.IntrinsicScope#handleReturnMismatch(StructuredGraph, FrameState)->void::: intrinsic scope handle return mismatch
org.graalvm.compiler.java.BytecodeParser.ReturnToCallerData#containsReturnValue(List, ValueNode)->boolean::: return to caller data contains return value
org.graalvm.compiler.java.BytecodeParser#getGraphBuilderInstance()->GraphBuilderPhase.Instance::: bytecode parser get graph builder instance
org.graalvm.compiler.java.BytecodeParser#getUnwindValue()->ValueNode::: bytecode parser get unwind value
org.graalvm.compiler.java.BytecodeParser#getBeforeUnwindNode()->FixedWithNextNode::: bytecode parser get before unwind node
org.graalvm.compiler.java.BytecodeParser#buildRootMethod()->void::: bytecode parser build root method
org.graalvm.compiler.java.BytecodeParser#build(FixedWithNextNode, FrameStateBuilder)->void::: bytecode parser build
org.graalvm.compiler.java.BytecodeParser#finishPrepare(FixedWithNextNode, int, FrameStateBuilder)->void:::Hook for subclasses to modify synthetic code (start nodes and unwind nodes).
org.graalvm.compiler.java.BytecodeParser#cleanupFinalGraph()->void::: bytecode parser cleanup final graph
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedLoadConstant(JavaType)->void::: bytecode parser handle unresolved load constant
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedCheckCast(JavaType, ValueNode)->void::: bytecode parser handle unresolved check cast
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedInstanceOf(JavaType, ValueNode)->void::: bytecode parser handle unresolved instance of
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedNewInstance(JavaType)->void::: bytecode parser handle unresolved new instance
org.graalvm.compiler.java.BytecodeParser#handleIllegalNewInstance(JavaType)->void::: bytecode parser handle illegal new instance
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedNewObjectArray(JavaType, ValueNode)->void::: bytecode parser handle unresolved new object array
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedNewMultiArray(JavaType, ValueNode[])->void::: bytecode parser handle unresolved new multi array
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedLoadField(JavaField, ValueNode)->void::: bytecode parser handle unresolved load field
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedStoreField(JavaField, ValueNode, ValueNode)->void::: bytecode parser handle unresolved store field
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedExceptionType(JavaType)->void::: bytecode parser handle unresolved exception type
org.graalvm.compiler.java.BytecodeParser#handleUnresolvedInvoke(JavaMethod, InvokeKind)->void::: bytecode parser handle unresolved invoke
org.graalvm.compiler.java.BytecodeParser#createHandleExceptionTarget(FixedWithNextNode, int, FrameStateBuilder)->void::: bytecode parser create handle exception target
org.graalvm.compiler.java.BytecodeParser#genLoadIndexed(ValueNode, ValueNode, GuardingNode, JavaKind)->ValueNode::: bytecode parser gen load indexed
org.graalvm.compiler.java.BytecodeParser#genStoreIndexed(ValueNode, ValueNode, GuardingNode, GuardingNode, JavaKind, ValueNode)->void::: bytecode parser gen store indexed
org.graalvm.compiler.java.BytecodeParser#genIntegerAdd(ValueNode, ValueNode)->ValueNode::: bytecode parser gen integer add
org.graalvm.compiler.java.BytecodeParser#genIntegerSub(ValueNode, ValueNode)->ValueNode::: bytecode parser gen integer sub
org.graalvm.compiler.java.BytecodeParser#genIntegerMul(ValueNode, ValueNode)->ValueNode::: bytecode parser gen integer mul
org.graalvm.compiler.java.BytecodeParser#genFloatAdd(ValueNode, ValueNode)->ValueNode::: bytecode parser gen float add
org.graalvm.compiler.java.BytecodeParser#genFloatSub(ValueNode, ValueNode)->ValueNode::: bytecode parser gen float sub
org.graalvm.compiler.java.BytecodeParser#genFloatMul(ValueNode, ValueNode)->ValueNode::: bytecode parser gen float mul
org.graalvm.compiler.java.BytecodeParser#genFloatDiv(ValueNode, ValueNode)->ValueNode::: bytecode parser gen float div
org.graalvm.compiler.java.BytecodeParser#genFloatRem(ValueNode, ValueNode)->ValueNode::: bytecode parser gen float rem
org.graalvm.compiler.java.BytecodeParser#genIntegerDiv(ValueNode, ValueNode, GuardingNode)->ValueNode::: bytecode parser gen integer div
org.graalvm.compiler.java.BytecodeParser#genIntegerRem(ValueNode, ValueNode, GuardingNode)->ValueNode::: bytecode parser gen integer rem
org.graalvm.compiler.java.BytecodeParser#genNegateOp(ValueNode)->ValueNode::: bytecode parser gen negate op
org.graalvm.compiler.java.BytecodeParser#genLeftShift(ValueNode, ValueNode)->ValueNode::: bytecode parser gen left shift
org.graalvm.compiler.java.BytecodeParser#genRightShift(ValueNode, ValueNode)->ValueNode::: bytecode parser gen right shift
org.graalvm.compiler.java.BytecodeParser#genUnsignedRightShift(ValueNode, ValueNode)->ValueNode::: bytecode parser gen unsigned right shift
org.graalvm.compiler.java.BytecodeParser#genAnd(ValueNode, ValueNode)->ValueNode::: bytecode parser gen and
org.graalvm.compiler.java.BytecodeParser#genOr(ValueNode, ValueNode)->ValueNode::: bytecode parser gen or
org.graalvm.compiler.java.BytecodeParser#genXor(ValueNode, ValueNode)->ValueNode::: bytecode parser gen xor
org.graalvm.compiler.java.BytecodeParser#genNormalizeCompare(ValueNode, ValueNode, boolean)->ValueNode::: bytecode parser gen normalize compare
org.graalvm.compiler.java.BytecodeParser#genFloatConvert(FloatConvert, ValueNode)->ValueNode::: bytecode parser gen float convert
org.graalvm.compiler.java.BytecodeParser#genNarrow(ValueNode, int)->ValueNode::: bytecode parser gen narrow
org.graalvm.compiler.java.BytecodeParser#genSignExtend(ValueNode, int)->ValueNode::: bytecode parser gen sign extend
org.graalvm.compiler.java.BytecodeParser#genZeroExtend(ValueNode, int)->ValueNode::: bytecode parser gen zero extend
org.graalvm.compiler.java.BytecodeParser#genGoto()->void::: bytecode parser gen goto
org.graalvm.compiler.java.BytecodeParser#genObjectEquals(ValueNode, ValueNode)->LogicNode::: bytecode parser gen object equals
org.graalvm.compiler.java.BytecodeParser#genIntegerEquals(ValueNode, ValueNode)->LogicNode::: bytecode parser gen integer equals
org.graalvm.compiler.java.BytecodeParser#genIntegerLessThan(ValueNode, ValueNode)->LogicNode::: bytecode parser gen integer less than
org.graalvm.compiler.java.BytecodeParser#genUnique(ValueNode)->ValueNode::: bytecode parser gen unique
org.graalvm.compiler.java.BytecodeParser#genUnique(LogicNode)->LogicNode::: bytecode parser gen unique
org.graalvm.compiler.java.BytecodeParser#genIfNode(LogicNode, FixedNode, FixedNode, double)->ValueNode::: bytecode parser gen if node
org.graalvm.compiler.java.BytecodeParser#genThrow()->void::: bytecode parser gen throw
org.graalvm.compiler.java.BytecodeParser#createInstanceOf(TypeReference, ValueNode)->LogicNode::: bytecode parser create instance of
org.graalvm.compiler.java.BytecodeParser#createAnchor(JavaTypeProfile)->AnchoringNode::: bytecode parser create anchor
org.graalvm.compiler.java.BytecodeParser#createInstanceOf(TypeReference, ValueNode, JavaTypeProfile)->LogicNode::: bytecode parser create instance of
org.graalvm.compiler.java.BytecodeParser#createInstanceOfAllowNull(TypeReference, ValueNode, JavaTypeProfile)->LogicNode::: bytecode parser create instance of allow null
org.graalvm.compiler.java.BytecodeParser#genConditional(ValueNode)->ValueNode::: bytecode parser gen conditional
org.graalvm.compiler.java.BytecodeParser#createNewInstance(ResolvedJavaType, boolean)->NewInstanceNode::: bytecode parser create new instance
org.graalvm.compiler.java.BytecodeParser#createNewArray(ResolvedJavaType, ValueNode, boolean)->NewArrayNode::: bytecode parser create new array
org.graalvm.compiler.java.BytecodeParser#createNewMultiArray(ResolvedJavaType, ValueNode[])->NewMultiArrayNode::: bytecode parser create new multi array
org.graalvm.compiler.java.BytecodeParser#genLoadField(ValueNode, ResolvedJavaField)->ValueNode::: bytecode parser gen load field
org.graalvm.compiler.java.BytecodeParser#genVolatileFieldReadProxy(ValueNode)->StateSplitProxyNode::: bytecode parser gen volatile field read proxy
org.graalvm.compiler.java.BytecodeParser#maybeEmitExplicitNullCheck(ValueNode)->ValueNode::: bytecode parser maybe emit explicit null check
org.graalvm.compiler.java.BytecodeParser#maybeEmitExplicitBoundsCheck(ValueNode, ValueNode)->GuardingNode::: bytecode parser maybe emit explicit bounds check
org.graalvm.compiler.java.BytecodeParser#maybeEmitExplicitStoreCheck(ValueNode, JavaKind, ValueNode)->GuardingNode::: bytecode parser maybe emit explicit store check
org.graalvm.compiler.java.BytecodeParser#maybeEmitExplicitDivisionByZeroCheck(ValueNode)->GuardingNode::: bytecode parser maybe emit explicit division by zero check
org.graalvm.compiler.java.BytecodeParser#genArrayLength(ValueNode)->ValueNode::: bytecode parser gen array length
org.graalvm.compiler.java.BytecodeParser#genStoreField(ValueNode, ResolvedJavaField, ValueNode)->void::: bytecode parser gen store field
org.graalvm.compiler.java.BytecodeParser#typeIsResolved(JavaType)->boolean:::Check if a type is resolved
org.graalvm.compiler.java.BytecodeParser#genInvokeStatic(int, int)->void::: bytecode parser gen invoke static
org.graalvm.compiler.java.BytecodeParser#genInvokeStatic(JavaMethod)->void::: bytecode parser gen invoke static
org.graalvm.compiler.java.BytecodeParser#genInvokeInterface(int, int)->void::: bytecode parser gen invoke interface
org.graalvm.compiler.java.BytecodeParser#genInvokeInterface(JavaMethod)->void::: bytecode parser gen invoke interface
org.graalvm.compiler.java.BytecodeParser#genInvokeDynamic(int, int)->void::: bytecode parser gen invoke dynamic
org.graalvm.compiler.java.BytecodeParser#genInvokeDynamic(JavaMethod)->void::: bytecode parser gen invoke dynamic
org.graalvm.compiler.java.BytecodeParser#genInvokeVirtual(int, int)->void::: bytecode parser gen invoke virtual
org.graalvm.compiler.java.BytecodeParser#genInvokeVirtual(ResolvedJavaMethod)->void::: bytecode parser gen invoke virtual
org.graalvm.compiler.java.BytecodeParser#genInvokeSpecial(int, int)->void::: bytecode parser gen invoke special
org.graalvm.compiler.java.BytecodeParser#genInvokeSpecial(JavaMethod)->void::: bytecode parser gen invoke special
org.graalvm.compiler.java.BytecodeParser#getInvokeKind()->InvokeKind::: bytecode parser get invoke kind
org.graalvm.compiler.java.BytecodeParser#getInvokeReturnType()->JavaType::: bytecode parser get invoke return type
org.graalvm.compiler.java.BytecodeParser#handleReplacedInvoke(InvokeKind, ResolvedJavaMethod, ValueNode[], boolean)->Invoke::: bytecode parser handle replaced invoke
org.graalvm.compiler.java.BytecodeParser#handleReplacedInvoke(CallTargetNode, JavaKind)->void::: bytecode parser handle replaced invoke
org.graalvm.compiler.java.BytecodeParser#appendInvoke(InvokeKind, ResolvedJavaMethod, ValueNode[])->Invoke::: bytecode parser append invoke
org.graalvm.compiler.java.BytecodeParser#emitCheckForInvokeSuperSpecial(ValueNode[])->void:::Checks that the class of the receiver of an Bytecodes#INVOKESPECIAL in a method declared in an interface (i.e., a default method) is assignable to the interface
org.graalvm.compiler.java.BytecodeParser#getProfileForInvoke(InvokeKind)->JavaTypeProfile::: bytecode parser get profile for invoke
org.graalvm.compiler.java.BytecodeParser#createNonInlinedInvoke(ExceptionEdgeAction, int, ValueNode[], ResolvedJavaMethod, InvokeKind, JavaKind, JavaType, JavaTypeProfile)->Invoke::: bytecode parser create non inlined invoke
org.graalvm.compiler.java.BytecodeParser#createNonInlinedInvoke(ExceptionEdgeAction, int, CallTargetNode, JavaKind)->Invoke::: bytecode parser create non inlined invoke
org.graalvm.compiler.java.BytecodeParser#getActionForInvokeExceptionEdge(InlineInfo)->ExceptionEdgeAction::: bytecode parser get action for invoke exception edge
org.graalvm.compiler.java.BytecodeParser.InvocationPluginAssertions#error(String, Object...)->String::: invocation plugin assertions error
org.graalvm.compiler.java.BytecodeParser.InvocationPluginAssertions#check(boolean)->boolean::: invocation plugin assertions check
org.graalvm.compiler.java.BytecodeParser#tryInvocationPlugin(InvokeKind, ValueNode[], ResolvedJavaMethod, JavaKind)->boolean::: bytecode parser try invocation plugin
org.graalvm.compiler.java.BytecodeParser#intrinsify(ResolvedJavaMethod, StructuredGraph, InvocationPlugin.Receiver, ValueNode[])->boolean:::Inline a method substitution graph
org.graalvm.compiler.java.BytecodeParser#intrinsify(BytecodeProvider, ResolvedJavaMethod, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: bytecode parser intrinsify
org.graalvm.compiler.java.BytecodeParser#notifyBeforeInline(ResolvedJavaMethod)->void::: bytecode parser notify before inline
org.graalvm.compiler.java.BytecodeParser#notifyAfterInline(ResolvedJavaMethod)->void::: bytecode parser notify after inline
org.graalvm.compiler.java.BytecodeParser#canInlinePartialIntrinsicExit()->boolean:::Determines if a partial intrinsic exit (i.e., a call to the original method within an intrinsic) can be inlined.
org.graalvm.compiler.java.BytecodeParser#traceWithContext(String, Object...)->void::: bytecode parser trace with context
org.graalvm.compiler.java.BytecodeParser#throwParserError(Throwable)->RuntimeException::: bytecode parser throw parser error
org.graalvm.compiler.java.BytecodeParser#parseAndInlineCallee(ResolvedJavaMethod, ValueNode[], IntrinsicContext)->void::: bytecode parser parse and inline callee
org.graalvm.compiler.java.BytecodeParser#createMethodCallTarget(InvokeKind, ResolvedJavaMethod, ValueNode[], StampPair, JavaTypeProfile)->MethodCallTargetNode::: bytecode parser create method call target
org.graalvm.compiler.java.BytecodeParser#createInvoke(int, CallTargetNode, JavaKind)->InvokeNode::: bytecode parser create invoke
org.graalvm.compiler.java.BytecodeParser#createInvokeWithException(int, CallTargetNode, JavaKind, ExceptionEdgeAction)->InvokeWithExceptionNode::: bytecode parser create invoke with exception
org.graalvm.compiler.java.BytecodeParser#genReturn(ValueNode, JavaKind)->void::: bytecode parser gen return
org.graalvm.compiler.java.BytecodeParser#createMonitorEnterNode(ValueNode, MonitorIdNode)->MonitorEnterNode::: bytecode parser create monitor enter node
org.graalvm.compiler.java.BytecodeParser#genMonitorEnter(ValueNode, int)->void::: bytecode parser gen monitor enter
org.graalvm.compiler.java.BytecodeParser#genMonitorExit(ValueNode, ValueNode, int)->void::: bytecode parser gen monitor exit
org.graalvm.compiler.java.BytecodeParser#genJsr(int)->void::: bytecode parser gen jsr
org.graalvm.compiler.java.BytecodeParser#genRet(int)->void::: bytecode parser gen ret
org.graalvm.compiler.java.BytecodeParser#genIntegerSwitch(ValueNode, ArrayList, int[], double[], int[])->void::: bytecode parser gen integer switch
org.graalvm.compiler.java.BytecodeParser#appendConstant(JavaConstant)->ConstantNode::: bytecode parser append constant
org.graalvm.compiler.java.BytecodeParser#append(T)->T::: bytecode parser append
org.graalvm.compiler.java.BytecodeParser#processBlock(BciBlock)->void::: bytecode parser process block
org.graalvm.compiler.java.BytecodeParser#iterateBytecodesForBlock(BciBlock)->void::: bytecode parser iterate bytecodes for block
org.graalvm.compiler.java.BytecodeParser#forceLoopPhis()->boolean::: bytecode parser force loop phis
org.graalvm.compiler.java.BytecodeParser#stampFromValueForForcedPhis()->boolean::: bytecode parser stamp from value for forced phis
org.graalvm.compiler.java.BytecodeParser#checkLastInstruction()->boolean::: bytecode parser check last instruction
org.graalvm.compiler.java.BytecodeParser#disableLoopSafepoint()->boolean::: bytecode parser disable loop safepoint
org.graalvm.compiler.java.BytecodeParser#finishInstruction(FixedWithNextNode, FrameStateBuilder)->FixedWithNextNode:::Hook for subclasses to modify the last instruction or add other instructions.
org.graalvm.compiler.java.BytecodeParser#genIf(ValueNode, Condition, ValueNode)->void::: bytecode parser gen if
org.graalvm.compiler.java.BytecodeParser#getProfileProbability(boolean)->double::: bytecode parser get profile probability
org.graalvm.compiler.java.BytecodeParser#genIf(LogicNode, BciBlock, BciBlock, double)->void::: bytecode parser gen if
org.graalvm.compiler.java.BytecodeParser#isPotentialCountedLoopExit(LogicNode, BciBlock)->boolean::: bytecode parser is potential counted loop exit
org.graalvm.compiler.java.BytecodeParser#shouldComplementProbability()->boolean:::Hook for subclasses to decide whether the IfNode probability should be complemented during conversion to Graal IR.
org.graalvm.compiler.java.BytecodeParser#postProcessIfNode(ValueNode)->void:::Hook for subclasses to generate custom nodes before an IfNode.
org.graalvm.compiler.java.BytecodeParser#getStampProvider()->StampProvider::: bytecode parser get stamp provider
org.graalvm.compiler.java.BytecodeParser#getMetaAccess()->MetaAccessProvider::: bytecode parser get meta access
org.graalvm.compiler.java.BytecodeParser#getReplacements()->Replacements::: bytecode parser get replacements
org.graalvm.compiler.java.BytecodeParser#push(JavaKind, ValueNode)->void::: bytecode parser push
org.graalvm.compiler.java.BytecodeParser#pop(JavaKind)->ValueNode::: bytecode parser pop
org.graalvm.compiler.java.BytecodeParser#getConstantReflection()->ConstantReflectionProvider::: bytecode parser get constant reflection
org.graalvm.compiler.java.BytecodeParser#getConstantFieldProvider()->ConstantFieldProvider::: bytecode parser get constant field provider
org.graalvm.compiler.java.BytecodeParser#getGraph()->StructuredGraph:::Gets the graph being processed by this builder.
org.graalvm.compiler.java.BytecodeParser#getParent()->BytecodeParser::: bytecode parser get parent
org.graalvm.compiler.java.BytecodeParser#getIntrinsic()->IntrinsicContext::: bytecode parser get intrinsic
org.graalvm.compiler.java.BytecodeParser#toString()->String::: bytecode parser to string
org.graalvm.compiler.java.BytecodeParser#bailout(String)->BailoutException::: bytecode parser bailout
org.graalvm.compiler.java.BytecodeParser#setStateAfter(StateSplit)->void::: bytecode parser set state after
org.graalvm.compiler.java.BytecodeParser#createBytecodePosition()->NodeSourcePosition::: bytecode parser create bytecode position
org.graalvm.compiler.java.BytecodeParser#setCurrentFrameState(FrameStateBuilder)->void::: bytecode parser set current frame state
org.graalvm.compiler.java.BytecodeParser#getStream()->BytecodeStream::: bytecode parser get stream
org.graalvm.compiler.java.BytecodeParser#bci()->int::: bytecode parser bci
org.graalvm.compiler.java.BytecodeParser#loadLocal(int, JavaKind)->void::: bytecode parser load local
org.graalvm.compiler.java.BytecodeParser#loadLocalObject(int)->void::: bytecode parser load local object
org.graalvm.compiler.java.BytecodeParser#storeLocal(JavaKind, int)->void::: bytecode parser store local
org.graalvm.compiler.java.BytecodeParser#genLoadConstant(int, int)->void::: bytecode parser gen load constant
org.graalvm.compiler.java.BytecodeParser#lookupType(int, int)->JavaType::: bytecode parser lookup type
org.graalvm.compiler.java.BytecodeParser#lookupField(int, int)->JavaField::: bytecode parser lookup field
org.graalvm.compiler.java.BytecodeParser#lookupField(JavaField)->JavaField::: bytecode parser lookup field
org.graalvm.compiler.java.BytecodeParser#maybeEagerlyResolve(int, int)->void::: bytecode parser maybe eagerly resolve
org.graalvm.compiler.java.BytecodeParser#maybeEagerlyResolve(JavaType, ResolvedJavaType)->JavaType::: bytecode parser maybe eagerly resolve
org.graalvm.compiler.java.BytecodeParser#maybeEagerlyInitialize(ResolvedJavaType)->void::: bytecode parser maybe eagerly initialize
org.graalvm.compiler.java.BytecodeParser#genCheckCast(JavaType, ValueNode)->void::: bytecode parser gen check cast
org.graalvm.compiler.java.BytecodeParser#genCheckCast(ResolvedJavaType, ValueNode)->void::: bytecode parser gen check cast
org.graalvm.compiler.java.BytecodeParser#genInstanceOf(JavaType, ValueNode)->void::: bytecode parser gen instance of
org.graalvm.compiler.java.BytecodeParser#genInstanceOf(ResolvedJavaType, ValueNode)->void::: bytecode parser gen instance of
org.graalvm.compiler.java.BytecodeParser#genNewInstance(int)->void::: bytecode parser gen new instance
org.graalvm.compiler.java.BytecodeParser#genNewInstance(JavaType)->void::: bytecode parser gen new instance
org.graalvm.compiler.java.BytecodeParser#genNewInstance(ResolvedJavaType)->void::: bytecode parser gen new instance
org.graalvm.compiler.java.BytecodeParser#genGetField(int, int)->void::: bytecode parser gen get field
org.graalvm.compiler.java.BytecodeParser#genGetField(int, int, ValueNode)->void::: bytecode parser gen get field
org.graalvm.compiler.java.BytecodeParser#needsExplicitNullCheckException(ValueNode)->boolean:::Returns true if an explicit null check should be emitted for the given object.
org.graalvm.compiler.java.BytecodeParser#needsExplicitBoundsCheckException(ValueNode, ValueNode)->boolean:::Returns true if an explicit null check should be emitted for the given object.
org.graalvm.compiler.java.BytecodeParser#needsExplicitClassCastException(ValueNode)->boolean:::Returns true if an explicit check for a ClassCastException should be emitted for the given object.
org.graalvm.compiler.java.BytecodeParser#needsExplicitStoreCheckException(ValueNode, ValueNode)->boolean:::Returns true if an explicit null check should be emitted for the given object.
org.graalvm.compiler.java.BytecodeParser#needsExplicitDivisionByZeroException(ValueNode)->boolean:::Returns true if an explicit null check should be emitted for the given object.
org.graalvm.compiler.java.BytecodeParser#needsExplicitException()->boolean::: bytecode parser needs explicit exception
org.graalvm.compiler.java.BytecodeParser#genExplicitExceptionEdge(BytecodeExceptionKind)->AbstractBeginNode::: bytecode parser gen explicit exception edge
org.graalvm.compiler.java.BytecodeParser#genPutField(int, int)->void::: bytecode parser gen put field
org.graalvm.compiler.java.BytecodeParser#genPutField(JavaField)->void::: bytecode parser gen put field
org.graalvm.compiler.java.BytecodeParser#genGetStatic(int, int)->void::: bytecode parser gen get static
org.graalvm.compiler.java.BytecodeParser#genPutStatic(int, int)->void::: bytecode parser gen put static
org.graalvm.compiler.java.BytecodeParser#genPutStatic(JavaField)->void::: bytecode parser gen put static
org.graalvm.compiler.java.BytecodeParser#isNeverExecutedCode(double)->boolean::: bytecode parser is never executed code
org.graalvm.compiler.java.BytecodeParser#processBytecode(int, int)->void::: bytecode parser process bytecode
org.graalvm.compiler.java.BytecodeParser#getMethod()->ResolvedJavaMethod::: bytecode parser get method
org.graalvm.compiler.java.BytecodeParser#getCode()->Bytecode::: bytecode parser get code
org.graalvm.compiler.java.BytecodeParser#getFrameStateBuilder()->FrameStateBuilder::: bytecode parser get frame state builder
org.graalvm.compiler.java.BytecodeParser#traceInstruction(int, int, boolean)->void::: bytecode parser trace instruction
org.graalvm.compiler.java.BytecodeParser#parsingIntrinsic()->boolean::: bytecode parser parsing intrinsic
org.graalvm.compiler.java.BytecodeParser#getNonIntrinsicAncestor()->BytecodeParser::: bytecode parser get non intrinsic ancestor
org.graalvm.compiler.java.BytecodeParser#nSpaces(int)->String::: bytecode parser n spaces
org.graalvm.compiler.java.ComputeLoopFrequenciesClosure#processNode(FixedNode, Double)->Double::: compute loop frequencies closure process node
org.graalvm.compiler.java.ComputeLoopFrequenciesClosure#merge(AbstractMergeNode, List)->Double::: compute loop frequencies closure merge
org.graalvm.compiler.java.ComputeLoopFrequenciesClosure#afterSplit(AbstractBeginNode, Double)->Double::: compute loop frequencies closure after split
org.graalvm.compiler.java.ComputeLoopFrequenciesClosure#processLoop(LoopBeginNode, Double)->EconomicMap::: compute loop frequencies closure process loop
org.graalvm.compiler.java.ComputeLoopFrequenciesClosure#compute(StructuredGraph)->void:::Computes the frequencies of all loops in the given graph
org.graalvm.compiler.java.ComputeLoopFrequenciesClosure.ComputeLoopFrequencyPhase#run(StructuredGraph)->void::: compute loop frequency phase run
org.graalvm.compiler.java.DefaultSuitesCreator#createSuites(OptionValues)->Suites::: default suites creator create suites
org.graalvm.compiler.java.DefaultSuitesCreator#createGraphBuilderSuite(Plugins)->PhaseSuite::: default suites creator create graph builder suite
org.graalvm.compiler.java.DefaultSuitesCreator#createLIRSuites(OptionValues)->LIRSuites::: default suites creator create suites
org.graalvm.compiler.java.FrameStateBuilder#disableKindVerification()->void::: frame state builder disable kind verification
org.graalvm.compiler.java.FrameStateBuilder#initializeFromArgumentsArray(ValueNode[])->void::: frame state builder initialize from arguments array
org.graalvm.compiler.java.FrameStateBuilder#initializeForMethodStart(Assumptions, boolean, Plugins)->void::: frame state builder initialize for method start
org.graalvm.compiler.java.FrameStateBuilder#getMethod()->ResolvedJavaMethod::: frame state builder get method
org.graalvm.compiler.java.FrameStateBuilder#toString()->String::: frame state builder to string
org.graalvm.compiler.java.FrameStateBuilder#create(int, StateSplit)->FrameState::: frame state builder create
org.graalvm.compiler.java.FrameStateBuilder#create(int, BytecodeParser, boolean, JavaKind[], ValueNode[])->FrameState::: frame state builder create
org.graalvm.compiler.java.FrameStateBuilder#createBytecodePosition(int)->NodeSourcePosition::: frame state builder create bytecode position
org.graalvm.compiler.java.FrameStateBuilder#copy()->FrameStateBuilder::: frame state builder copy
org.graalvm.compiler.java.FrameStateBuilder#isCompatibleWith(FrameStateBuilder)->boolean::: frame state builder is compatible with
org.graalvm.compiler.java.FrameStateBuilder#merge(AbstractMergeNode, FrameStateBuilder)->void::: frame state builder merge
org.graalvm.compiler.java.FrameStateBuilder#inferPhiStamps(AbstractMergeNode)->void::: frame state builder infer phi stamps
org.graalvm.compiler.java.FrameStateBuilder#insertLoopPhis(LocalLiveness, int, LoopBeginNode, boolean, boolean)->void::: frame state builder insert loop phis
org.graalvm.compiler.java.FrameStateBuilder#insertLoopProxies(LoopExitNode, FrameStateBuilder)->void::: frame state builder insert loop proxies
org.graalvm.compiler.java.FrameStateBuilder#insertProxies(Function)->void::: frame state builder insert proxies
org.graalvm.compiler.java.FrameStateBuilder#pushLock(ValueNode, MonitorIdNode)->void:::Adds a locked monitor to this frame state.
org.graalvm.compiler.java.FrameStateBuilder#popLock()->ValueNode:::Removes a locked monitor from this frame state.
org.graalvm.compiler.java.FrameStateBuilder#peekMonitorId()->MonitorIdNode::: frame state builder peek monitor id
org.graalvm.compiler.java.FrameStateBuilder#lockDepth(boolean)->int::: frame state builder lock depth
org.graalvm.compiler.java.FrameStateBuilder#contains(ValueNode)->boolean::: frame state builder contains
org.graalvm.compiler.java.FrameStateBuilder#clearNonLiveLocals(BciBlock, LocalLiveness, boolean)->void::: frame state builder clear non live locals
org.graalvm.compiler.java.FrameStateBuilder#clearLocals()->void:::Clears all local variables.
org.graalvm.compiler.java.FrameStateBuilder#rethrowException()->boolean::: frame state builder rethrow exception
org.graalvm.compiler.java.FrameStateBuilder#setRethrowException(boolean)->void::: frame state builder set rethrow exception
org.graalvm.compiler.java.FrameStateBuilder#localsSize()->int:::Returns the size of the local variables.
org.graalvm.compiler.java.FrameStateBuilder#stackSize()->int:::Gets the current size (height) of the stack.
org.graalvm.compiler.java.FrameStateBuilder#loadLocal(int, JavaKind)->ValueNode:::Loads the local variable at the specified index, checking that the returned value is non-null and that two-stack values are properly handled.
org.graalvm.compiler.java.FrameStateBuilder#storeLocal(int, JavaKind, ValueNode)->void:::Stores a given local variable at the specified index
org.graalvm.compiler.java.FrameStateBuilder#push(JavaKind, ValueNode)->void:::Pushes an instruction onto the stack with the expected type.
org.graalvm.compiler.java.FrameStateBuilder#pushReturn(JavaKind, ValueNode)->void::: frame state builder push return
org.graalvm.compiler.java.FrameStateBuilder#pop(JavaKind)->ValueNode:::Pops an instruction off the stack with the expected type.
org.graalvm.compiler.java.FrameStateBuilder#peekObject()->ValueNode::: frame state builder peek object
org.graalvm.compiler.java.FrameStateBuilder#popArguments(int)->ValueNode[]:::Pop the specified number of slots off of this stack and return them as an array of instructions.
org.graalvm.compiler.java.FrameStateBuilder#clearStack()->void:::Clears all values on this stack.
org.graalvm.compiler.java.FrameStateBuilder#stackOp(int)->void:::Performs a raw stack operation as defined in the Java bytecode specification.
org.graalvm.compiler.java.FrameStateBuilder#hashCode()->int::: frame state builder hash code
org.graalvm.compiler.java.FrameStateBuilder#equals(Object)->boolean::: frame state builder equals
org.graalvm.compiler.java.FrameStateBuilder#isAfterSideEffect()->boolean::: frame state builder is after side effect
org.graalvm.compiler.java.FrameStateBuilder#sideEffects()->Iterable::: frame state builder side effects
org.graalvm.compiler.java.FrameStateBuilder#addSideEffect(StateSplit)->void::: frame state builder add side effect
org.graalvm.compiler.java.GraphBuilderPhase#checkContract()->boolean::: graph builder phase check contract
org.graalvm.compiler.java.GraphBuilderPhase#run(StructuredGraph, HighTierContext)->void::: graph builder phase run
org.graalvm.compiler.java.GraphBuilderPhase#getGraphBuilderConfig()->GraphBuilderConfiguration::: graph builder phase get graph builder config
org.graalvm.compiler.java.GraphBuilderPhase.Instance#checkContract()->boolean::: instance check contract
org.graalvm.compiler.java.GraphBuilderPhase.Instance#run(StructuredGraph)->void::: instance run
org.graalvm.compiler.java.GraphBuilderPhase.Instance#createBytecodeParser(StructuredGraph, BytecodeParser, ResolvedJavaMethod, int, IntrinsicContext)->BytecodeParser::: instance create bytecode parser
org.graalvm.compiler.java.JsrScope#nextReturnAddress()->int::: jsr scope next return address
org.graalvm.compiler.java.JsrScope#push(int)->JsrScope::: jsr scope push
org.graalvm.compiler.java.JsrScope#isEmpty()->boolean::: jsr scope is empty
org.graalvm.compiler.java.JsrScope#isPrefixOf(JsrScope)->boolean::: jsr scope is prefix of
org.graalvm.compiler.java.JsrScope#pop()->JsrScope::: jsr scope pop
org.graalvm.compiler.java.JsrScope#hashCode()->int::: jsr scope hash code
org.graalvm.compiler.java.JsrScope#equals(Object)->boolean::: jsr scope equals
org.graalvm.compiler.java.JsrScope#toString()->String::: jsr scope to string
org.graalvm.compiler.java.LargeLocalLiveness#debugLiveIn(int)->String::: large local liveness debug live in
org.graalvm.compiler.java.LargeLocalLiveness#debugLiveOut(int)->String::: large local liveness debug live out
org.graalvm.compiler.java.LargeLocalLiveness#debugLiveGen(int)->String::: large local liveness debug live gen
org.graalvm.compiler.java.LargeLocalLiveness#debugLiveKill(int)->String::: large local liveness debug live kill
org.graalvm.compiler.java.LargeLocalLiveness#liveOutCardinality(int)->int::: large local liveness live out cardinality
org.graalvm.compiler.java.LargeLocalLiveness#propagateLiveness(int, int)->void::: large local liveness propagate liveness
org.graalvm.compiler.java.LargeLocalLiveness#updateLiveness(int)->void::: large local liveness update liveness
org.graalvm.compiler.java.LargeLocalLiveness#loadOne(int, int)->void::: large local liveness load one
org.graalvm.compiler.java.LargeLocalLiveness#storeOne(int, int)->void::: large local liveness store one
org.graalvm.compiler.java.LargeLocalLiveness#localIsLiveIn(BciBlock, int)->boolean::: large local liveness local is live in
org.graalvm.compiler.java.LargeLocalLiveness#localIsLiveOut(BciBlock, int)->boolean::: large local liveness local is live out
org.graalvm.compiler.java.LargeLocalLiveness#localIsChangedInLoop(int, int)->boolean::: large local liveness local is changed in loop
org.graalvm.compiler.java.LocalLiveness#compute(DebugContext, BytecodeStream, BciBlock[], int, int)->LocalLiveness::: local liveness compute
org.graalvm.compiler.java.LocalLiveness#computeLiveness(DebugContext, BytecodeStream)->void::: local liveness compute liveness
org.graalvm.compiler.java.LocalLiveness#localIsLiveIn(BciBlock, int)->boolean:::Returns whether the local is live at the beginning of the given block.
org.graalvm.compiler.java.LocalLiveness#localIsChangedInLoop(int, int)->boolean:::Returns whether the local is set in the given loop.
org.graalvm.compiler.java.LocalLiveness#localIsLiveOut(BciBlock, int)->boolean:::Returns whether the local is live at the end of the given block.
org.graalvm.compiler.java.LocalLiveness#debugLiveIn(int)->String:::Returns a string representation of the liveIn values of the given block.
org.graalvm.compiler.java.LocalLiveness#debugLiveOut(int)->String:::Returns a string representation of the liveOut values of the given block.
org.graalvm.compiler.java.LocalLiveness#debugLiveGen(int)->String:::Returns a string representation of the liveGen values of the given block.
org.graalvm.compiler.java.LocalLiveness#debugLiveKill(int)->String:::Returns a string representation of the liveKill values of the given block.
org.graalvm.compiler.java.LocalLiveness#liveOutCardinality(int)->int:::Returns the number of live locals at the end of the given block.
org.graalvm.compiler.java.LocalLiveness#propagateLiveness(int, int)->void:::Adds all locals the are in the liveIn of the successor to the liveOut of the block.
org.graalvm.compiler.java.LocalLiveness#updateLiveness(int)->void:::Calculates a new liveIn for the given block from liveOut, liveKill and liveGen.
org.graalvm.compiler.java.LocalLiveness#loadOne(int, int)->void:::Adds the local to liveGen if it wasn't already killed in this block.
org.graalvm.compiler.java.LocalLiveness#storeOne(int, int)->void:::Add this local to liveKill if it wasn't already generated in this block.
org.graalvm.compiler.java.SmallLocalLiveness#debugLiveIn(int)->String::: small local liveness debug live in
org.graalvm.compiler.java.SmallLocalLiveness#debugLiveOut(int)->String::: small local liveness debug live out
org.graalvm.compiler.java.SmallLocalLiveness#debugLiveGen(int)->String::: small local liveness debug live gen
org.graalvm.compiler.java.SmallLocalLiveness#debugLiveKill(int)->String::: small local liveness debug live kill
org.graalvm.compiler.java.SmallLocalLiveness#liveOutCardinality(int)->int::: small local liveness live out cardinality
org.graalvm.compiler.java.SmallLocalLiveness#propagateLiveness(int, int)->void::: small local liveness propagate liveness
org.graalvm.compiler.java.SmallLocalLiveness#updateLiveness(int)->void::: small local liveness update liveness
org.graalvm.compiler.java.SmallLocalLiveness#loadOne(int, int)->void::: small local liveness load one
org.graalvm.compiler.java.SmallLocalLiveness#storeOne(int, int)->void::: small local liveness store one
org.graalvm.compiler.java.SmallLocalLiveness#localIsLiveIn(BciBlock, int)->boolean::: small local liveness local is live in
org.graalvm.compiler.java.SmallLocalLiveness#localIsLiveOut(BciBlock, int)->boolean::: small local liveness local is live out
org.graalvm.compiler.java.SmallLocalLiveness#localIsChangedInLoop(int, int)->boolean::: small local liveness local is changed in loop
org.graalvm.compiler.java.SuitesProviderBase#getDefaultSuites(OptionValues)->Suites::: suites provider base get default suites
org.graalvm.compiler.java.SuitesProviderBase#getDefaultGraphBuilderSuite()->PhaseSuite::: suites provider base get default graph builder suite
org.graalvm.compiler.java.SuitesProviderBase#getDefaultLIRSuites(OptionValues)->LIRSuites::: suites provider base get default suites
org.graalvm.compiler.java.SuitesProviderBase#createLIRSuites(OptionValues)->LIRSuites::: suites provider base create suites
org.graalvm.compiler.java.SuitesProviderBase#createSuites(OptionValues)->Suites::: suites provider base create suites

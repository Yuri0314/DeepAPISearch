BciBlockMapping.BciBlock#getLoopId():::Get the loop id of the inner most loop.:::l->if->return->pos->for->lMask->return
BciBlockMapping.BciBlock#loopIdIterable():::Iterate over loop ids.:::return->new->Iterable<Integer>
BciBlockMapping#build(BytecodeStream, OptionValues):::Builds the block map and conservative CFG and numbers blocks.:::codeSize->code->getCodeSize->blockMap->new->BciBlockArr->makeExceptionEntries->iterateOverBytecodes->if->if->SupportJsrBytecodes->getValue->throw->new->JsrNotSupportedBailout->createJsrAlternatives->if->debug->isLogEnabled->this->log->computeBlockOrder->fixLoopBits->if->debug->isLogEnabled->this->log
BciBlockMapping#getLoopHeader(int):::Get the header block for a loop index.:::return
BytecodeParser.InliningScope#processPlaceholderFrameStates(boolean):::Fixes up the BytecodeFrame#isPlaceholderBci(int) placeholder frame states added to the graph while parsing/inlining the intrinsic for which this object exists.:::graph->parser->getGraph->graph->getDebug->dump->foreach->graph->getNewNodes->if->frameState->if->BytecodeFrame->isPlaceholderBci->if->if->parser->getInvokeReturnType->newFrameState->graph->new->FrameState->add->frameState->replaceAndDelete->else->returnKind->parser->getInvokeReturnType->getJavaKind->frameStateBuilder->if->frameState->stackSize->returnVal->frameState->stackAt->if->ReturnToCallerData->containsReturnValue->throw->new->GraalError->tos->frameStateBuilder->pop->newFrameState->frameStateBuilder->nextBCI->parser->getNonIntrinsicAncestor->new->JavaKindArr->new->ValueNodeArr->create->frameState->replaceAndDelete->newFrameState->frameState->getNodeSourcePosition->setNodeSourcePosition->frameStateBuilder->push->else->if->handleReturnMismatch->else->newFrameState->frameStateBuilder->nextBCI->create->newFrameState->frameState->getNodeSourcePosition->setNodeSourcePosition->frameState->replaceAndDelete->else->if->if->graph->start->stateAfter->if->frameState->replaceAndDelete->else->if->callee->isSynchronized->exceptionValue->frameState->stackAt->dispatchState->copy->dispatchState->clearStack->dispatchState->push->dispatchState->setRethrowException->foreach->frameState->usages->newFrameState->dispatchState->parser->bci->create->frameState->replaceAndDelete->newFrameState->frameState->getNodeSourcePosition->setNodeSourcePosition->else->if->if->graph->getGuardsStage->allowsFloatingGuards->throw->GraalError->shouldNotReachHere->else->graph->getDebug->dump
BytecodeParser#finishPrepare(FixedWithNextNode, int, FrameStateBuilder):::Hook for subclasses to modify synthetic code (start nodes and unwind nodes).:::
BytecodeParser#typeIsResolved(JavaType):::Check if a type is resolved:::return
BytecodeParser#emitCheckForInvokeSuperSpecial(ValueNode[]):::Checks that the class of the receiver of an Bytecodes#INVOKESPECIAL in a method declared in an interface (i.e., a default method) is assignable to the interface:::callingClass->method->getDeclaringClass->if->callingClass->getHostClass->callingClass->getHostClass->if->callingClass->isInterface->receiver->checkedType->TypeReference->graph->getAssumptions->createTrusted->condition->createInstanceOf->genUnique->fixedGuard->new->FixedGuardNode->append->PiNode->StampFactory->object->create->append
BytecodeParser#intrinsify(ResolvedJavaMethod, StructuredGraph, InvocationPlugin.Receiver, ValueNode[]):::Inline a method substitution graph:::if->receiver->get->withException->replacee->try->a->debug->scope->entryPointNode->substituteGraph->start->firstCFGNode->entryPointNode->next->replaceeGraph->replacee->graph->mark->replaceeGraph->getMark->try->inlineScope->new->IntrinsicScope->replacementsMap->EconomicMap->create->foreach->substituteGraph->getNodes->filter->replacementsMap->param->index->put->replacementsMap->AbstractBeginNode->prevBegin->put->debug->substituteGraph->method->dump->duplicates->inlineMethodSubstitution->firstCFGNodeDuplicate->duplicates->get->replacee->setNext->debug->substituteGraph->method->dump->foreach->graph->getNewNodes->if->invoke->if->invoke->bci->invoke->bci->replaceBci->if->intrinsicCallSiteParser->getNonIntrinsicAncestor->if->intrinsicCallSiteParser->getActionForInvokeExceptionEdge->newInvoke->graph->new->InvokeNode->add->newInvoke->withException->stateDuring->setStateDuring->newInvoke->withException->stateAfter->setStateAfter->withException->killExceptionEdge->next->withException->killKillingBegin->pred->withException->predecessor->pred->setNext->withException->setNext->newInvoke->setNext->withException->replaceAndDelete->else->withException->killExceptionEdge->else->if->call->if->call->getBci->call->bci->setBci->if->call->stateAfter->call->stateAfter->call->setStateAfter->calleeReturnDataList->new->ArrayList<>->foreach->substituteGraph->getNodes->filter->returnNode->duplicates->get->predecessor->returnNode->predecessor->calleeReturnDataList->returnNode->result->new->ReturnToCallerData->add->predecessor->setNext->returnNode->safeDelete->processCalleeReturn->catch->finally->if->withException->isAlive->exceptionEdge->bci->handleException->withException->setExceptionEdge->debug->dump->return->catch->throw->debug->handle->finally
BytecodeParser#canInlinePartialIntrinsicExit():::Determines if a partial intrinsic exit (i.e., a call to the original method within an intrinsic) can be inlined.:::return->InlinePartialIntrinsicExitDuringParsing->getValue->method->getAnnotation
BytecodeParser#finishInstruction(FixedWithNextNode, FrameStateBuilder):::Hook for subclasses to modify the last instruction or add other instructions.:::return
BytecodeParser#shouldComplementProbability():::Hook for subclasses to decide whether the IfNode probability should be complemented during conversion to Graal IR.:::return
BytecodeParser#postProcessIfNode(ValueNode):::Hook for subclasses to generate custom nodes before an IfNode.:::
BytecodeParser#getGraph():::Gets the graph being processed by this builder.:::return
BytecodeParser#needsExplicitNullCheckException(ValueNode):::Returns true if an explicit null check should be emitted for the given object.:::return->needsExplicitException
BytecodeParser#needsExplicitBoundsCheckException(ValueNode, ValueNode):::Returns true if an explicit null check should be emitted for the given object.:::return->needsExplicitException
BytecodeParser#needsExplicitClassCastException(ValueNode):::Returns true if an explicit check for a ClassCastException should be emitted for the given object.:::return->needsExplicitException
BytecodeParser#needsExplicitStoreCheckException(ValueNode, ValueNode):::Returns true if an explicit null check should be emitted for the given object.:::return->needsExplicitException
BytecodeParser#needsExplicitDivisionByZeroException(ValueNode):::Returns true if an explicit null check should be emitted for the given object.:::return->needsExplicitException
ComputeLoopFrequenciesClosure#compute(StructuredGraph):::Computes the frequencies of all loops in the given graph:::if->graph->hasLoops->ReentrantNodeIterator->graph->start->apply
FrameStateBuilder#pushLock(ValueNode, MonitorIdNode):::Adds a locked monitor to this frame state.:::Arrays->copyOf->Arrays->copyOf
FrameStateBuilder#popLock():::Removes a locked monitor from this frame state.:::try->return->catch->finally->Arrays->copyOf->Arrays->copyOf
FrameStateBuilder#clearLocals():::Clears all local variables.:::for->i
FrameStateBuilder#localsSize():::Returns the size of the local variables.:::return
FrameStateBuilder#stackSize():::Gets the current size (height) of the stack.:::return
FrameStateBuilder#loadLocal(int, JavaKind):::Loads the local variable at the specified index, checking that the returned value is non-null and that two-stack values are properly handled.:::x->return
FrameStateBuilder#storeLocal(int, JavaKind, ValueNode):::Stores a given local variable at the specified index:::if->if->slotKind->needsTwoSlots->if->else->if
FrameStateBuilder#push(JavaKind, ValueNode):::Pushes an instruction onto the stack with the expected type.:::xpush->if->slotKind->needsTwoSlots->xpush
FrameStateBuilder#pop(JavaKind):::Pops an instruction off the stack with the expected type.:::if->slotKind->needsTwoSlots->s->xpop->x->xpop->return
FrameStateBuilder#popArguments(int):::Pop the specified number of slots off of this stack and return them as an array of instructions.:::result->allocateArray->for->i->return
FrameStateBuilder#clearStack():::Clears all values on this stack.:::
FrameStateBuilder#stackOp(int):::Performs a raw stack operation as defined in the Java bytecode specification.:::switch->w1->xpop->break->xpop->w2->xpop->break->w1->xpeek->xpush->break->w1->xpop->w2->xpop->xpush->xpush->xpush->break->w1->xpop->w2->xpop->w3->xpop->xpush->xpush->xpush->xpush->break->w1->xpop->w2->xpop->xpush->xpush->xpush->xpush->break->w1->xpop->w2->xpop->w3->xpop->xpush->xpush->xpush->xpush->xpush->break->w1->xpop->w2->xpop->w3->xpop->w4->xpop->xpush->xpush->xpush->xpush->xpush->xpush->break->w1->xpop->w2->xpop->xpush->xpush->break->throw->shouldNotReachHere
LocalLiveness#localIsLiveIn(BciBlock, int):::Returns whether the local is live at the beginning of the given block.:::
LocalLiveness#localIsChangedInLoop(int, int):::Returns whether the local is set in the given loop.:::
LocalLiveness#localIsLiveOut(BciBlock, int):::Returns whether the local is live at the end of the given block.:::
LocalLiveness#debugLiveIn(int):::Returns a string representation of the liveIn values of the given block.:::
LocalLiveness#debugLiveOut(int):::Returns a string representation of the liveOut values of the given block.:::
LocalLiveness#debugLiveGen(int):::Returns a string representation of the liveGen values of the given block.:::
LocalLiveness#debugLiveKill(int):::Returns a string representation of the liveKill values of the given block.:::
LocalLiveness#liveOutCardinality(int):::Returns the number of live locals at the end of the given block.:::
LocalLiveness#propagateLiveness(int, int):::Adds all locals the are in the liveIn of the successor to the liveOut of the block.:::
LocalLiveness#updateLiveness(int):::Calculates a new liveIn for the given block from liveOut, liveKill and liveGen.:::
LocalLiveness#loadOne(int, int):::Adds the local to liveGen if it wasn't already killed in this block.:::
LocalLiveness#storeOne(int, int):::Add this local to liveKill if it wasn't already generated in this block.:::

Console#readLine(String)::: console read line:::return->in->readLine
Console#close()::: console close:::saveHistory
Console#saveHistory()::: console save history:::try->out->Files->historyFile->toPath->newBufferedWriter->lineSeparator->System->getProperty->out->getHistory->save->stream->Collectors->joining->collect->write->catch->finally
Console#getHistory()::: console get history:::return->in->getHistory
Console#terminalEditorRunning()::: console terminal editor running:::terminal->in->getTerminal->if->return->isRaw->return
Console#suspend()::: console suspend:::try->in->getTerminal->restore->catch->throw->new->IllegalStateException->finally
Console#resume()::: console resume:::try->in->getTerminal->init->catch->throw->new->IllegalStateException->finally
Console.JJSUnixTerminal#isRaw()::: unix terminal is raw:::try->return->getSettings->get->contains->catch->return->finally
Console.JJSUnixTerminal#disableInterruptCharacter()::: unix terminal disable interrupt character:::
Console.JJSUnixTerminal#enableInterruptCharacter()::: unix terminal enable interrupt character:::
Console.JJSWindowsTerminal#init()::: windows terminal init:::super->init->setAnsiSupported
Console#isCygwin()::: console is cygwin:::return->System->getenv
Console#bind(String, Object)::: console bind:::km->in->getKeys->for->i->shortcut->length
Console#showDocumentation(Function)::: console show documentation:::buffer->in->getCursorBuffer->toString->cursor->in->getCursorBuffer->doc->docHelper->buffer->substring->apply->try->if->in->println->in->println->in->redrawLine->in->flush->else->in->beep->catch->throw->new->IllegalStateException->finally
EditObject#getDefaultValue(Class)::: edit object get default value:::if->return->toString->return
EditObject#toString()::: edit object to string:::return
EditObject#keySet()::: edit object key set:::return
EditObject#getMember(String)::: edit object get member:::if->name->equals->return->return
EditObject#setMember(String, Object)::: edit object set member:::if->name->equals->JSType->toString
EditObject.SaveHandler#accept(String)::: save handler accept:::if->str->equals->evaluator->accept
EditObject#call(Object, Object...)::: edit object call:::initText->JSType->toString->saveHandler->new->SaveHandler->if->editor->isEmpty->ExternalEditor->edit->else->try->sl->ServiceLoader->load->provider->foreach->if->p->rank->provider->rank->if->provider->edit->else->errorHandler->Main->getMessage->accept->catch->errorHandler->Main->getMessage->accept->finally->return
EditObject#isFunction()::: edit object is function:::return
ExternalEditor#edit(String, String)::: external editor edit:::try->setupWatch->launch->catch->errorHandler->ex->getMessage->accept->finally
ExternalEditor#setupWatch(String):::Creates a WatchService and registers the given directory:::FileSystems->getDefault->newWatchService->Files->createTempDirectory->Files->createTempFile->Files->initialText->Charset->forName->getBytes->write->dir->register->for->new->Thread->watchedThread->start
ExternalEditor#launch(String)::: external editor launch:::pb->tmpfile->toString->new->ProcessBuilder->pb->inheritIO->try->input->suspend->process->pb->start->process->waitFor->catch->errorHandler->ex->getMessage->accept->errorHandler->ex->getMessage->accept->finally->try->watcher->close->watchedThread->join->saveFile->catch->errorHandler->ex->getMessage->accept->finally->input->resume
ExternalEditor#saveFile()::: external editor save file:::lines->try->Files->readAllLines->catch->errorHandler->ex->getMessage->accept->return->finally->sb->new->StringBuilder->foreach->sb->append->sb->append->saveHandler->sb->toString->accept
ExternalEditor#edit(String, Consumer, String, Consumer, Console)::: external editor edit:::ed->new->ExternalEditor->ed->edit
HistoryObject#isFunction()::: history object is function:::return
HistoryObject#call(Object, Object...)::: history object call:::if->index->JSType->toInteger->if->hist->size->else->if->hist->size->src->hist->get->hist->replace->err->println->evaluator->src->toString->accept->else->hist->removeLast->err->println->return
HistoryObject#getMember(String)::: history object get member:::switch->return->hist->clear->return->iterate->return->load->return->print->return->save->return->hist->size->return->toString->return
HistoryObject#getDefaultValue(Class)::: history object get default value:::if->return->toString->return
HistoryObject#toString()::: history object to string:::buf->new->StringBuilder->foreach->buf->e->value->append->append->return->buf->toString
HistoryObject#keySet()::: history object key set:::return
HistoryObject#save(Object)::: history object save:::file->getFile->try->pw->new->PrintWriter->foreach->pw->e->value->println->catch->throw->new->RuntimeException->finally
HistoryObject#load(Object)::: history object load:::file->getFile->item->try->r->new->FileReader->new->BufferedReader->while->r->readLine->hist->add->catch->throw->new->RuntimeException->finally
HistoryObject#print()::: history object print:::foreach->e->index->e->value->printf
HistoryObject#iterate(JSObject)::: history object iterate:::foreach->if->JSType->func->e->value->toString->call->toBoolean->break->return
HistoryObject#getFile(Object)::: history object get file:::file->if->new->File->else->if->else->throw->JSType->toString->typeError->return
JavacPackagesHelper#isAvailable():::Is this class available?:::return
JavacPackagesHelper#close()::: javac packages helper close:::if->fm->close
JavacPackagesHelper#listPackage(String)::: javac packages helper list package:::props->new->HashSet<>->listPackage->if->foreach->fm->listLocationsForModules->foreach->listPackage->listPackage->return
JavacPackagesHelper#listPackage(Location, String, Set)::: javac packages helper list package:::foreach->fm->list->binaryName->fm->inferBinaryName->if->binaryName->startsWith->continue->nextDot->binaryName->pkg->length->indexOf->start->pkg->length->if->pkgName->binaryName->substring->if->binaryName->substring->isPackageAccessible->props->binaryName->substring->add->else->clsName->binaryName->substring->if->clsName->indexOf->isClassAccessible->props->add
JavacPackagesHelper#getFiles(String)::: javac packages helper get files:::return->Stream->classPath->split->of->File->new->map->Collectors->toList->collect
JrtPackagesHelper#close()::: jrt packages helper close:::
JrtPackagesHelper#listPackage(String)::: jrt packages helper list package:::props->new->HashSet<>->pkgDir->jrtfs->getPath->if->Files->exists->pkgSlashName->pkg->replace->try->ds->Files->newDirectoryStream->foreach->pkgUnderMod->jrtfs->mod->toString->getPath->try->ds2->Files->newDirectoryStream->foreach->str->p->getFileName->toString->if->str->endsWith->clsName->str->str->length->length->substring->if->clsName->indexOf->isClassAccessible->props->add->else->if->isPackageAccessible->props->add->catch->finally->catch->finally->return
Main#main(String[]):::Main entry point with the default input, output and error streams.:::try->exitCode->main->if->System->exit->catch->println->System->exit->finally
Main#main(InputStream, OutputStream, OutputStream, String[]):::Starting point for executing a Shell:::return->new->Main->run
Main#readEvalPrint(Context, Global):::read-eval-print loop for Nashorn shell.:::env->context->getEnv->prompt->bundle->getString->prompt2->bundle->getString->err->context->getErr->oldGlobal->Context->getGlobal->globalChanged->propsHelper->new->PropertiesHelper->if->Context->setGlobal->jjsObj->context->readJJSScript->eval->isHeadless->ScriptRuntime->jjsObj->get->apply->fileChooserFunc->jjsObj->get->completer->new->NashornCompleter->browseFunc->jjsObj->get->javadoc->jjsObj->get->try->in->try->res->context->eval->if->if->NativeJava->isType->typeName->NativeJava->typeName->toString->url->typeName->replace->replace->openBrowserForJavadoc->else->if->pkgName->getName->url->pkgName->replace->openBrowserForJavadoc->else->if->NativeJava->isJavaMethod->ScriptRuntime->apply->return->else->if->sobj->if->sobj->has->return->sobj->get->toString->else->if->return->getDocumentation->return->toString->catch->finally->return->new->Console->global->addShellBuiltins->ScriptingFunctions->try->return->in->readLine->catch->throw->new->UncheckedIOException->finally->setReadLineHelper->if->System->getSecurityManager->evaluator->_oldGlobal->Context->getGlobal->_globalChanged->if->Context->setGlobal->try->evalImpl->catch->finally->if->Context->setGlobal->global->in->getHistory->new->HistoryObject->addOwnProperty->global->err->println->new->EditObject->addOwnProperty->while->source->try->in->readLine->catch->err->ioe->toString->println->if->ioe->printStackTrace->return->break->finally->if->break->if->source->isEmpty->continue->try->res->context->eval->if->err->toString->println->catch->if->completer->source->length->isSyntaxErrorAt->fullSrc->completer->readMoreLines->if->fullSrc->isEmpty->evalImpl->else->err->println->if->exp->printStackTrace->finally->catch->err->println->if->e->printStackTrace->finally->if->Context->setGlobal->try->propsHelper->close->catch->if->exp->printStackTrace->finally->return
Main#getMessage(String)::: main get message:::return->bundle->getString
Main#evalImpl(Context, Global, String, PrintWriter, boolean)::: main eval impl:::try->res->context->eval->if->err->toString->println->catch->err->println->if->e->printStackTrace->finally
Main#openBrowserForJavadoc(ScriptFunction, String)::: main open browser for javadoc:::try->uri->String->Runtime->version->feature->format->new->URI->ScriptRuntime->apply->catch->finally
Main#readJJSScript()::: main read script:::return->AccessController->new->PrivilegedAction<String>->doPrivileged
NashornCompleter#isSyntaxErrorAt(Throwable, int, int):::Is this a ECMAScript SyntaxError thrown for parse issue at the given line and column?:::if->eexp->if->eexp->getThrown->return->eexp->getCause->isParseErrorAt->return
NashornCompleter#isParseErrorAt(Throwable, int, int):::Is this a parse error at the given line and column?:::if->nexp->return->nexp->getLineNumber->nexp->getColumnNumber->return
NashornCompleter#readMoreLines(String, Exception, Console, String, PrintWriter):::Read more lines of code if we got SyntaxError at EOF and we can it fine by by reading more lines of code from the user:::line->buf->new->StringBuilder->while->buf->append->curLine->try->in->readLine->buf->append->catch->if->return->else->err->println->if->th->printStackTrace->return->finally->allLines->buf->toString->try->parser->parse->catch->if->curLine->length->isParseErrorAt->continue->else->err->println->if->pexp->printStackTrace->return->finally->return->buf->toString
NashornCompleter#isComplete(String)::: nashorn completer is complete:::try->parser->parse->catch->line->input->split->lastLineLen->input->length->input->lastIndexOf->if->isParseErrorAt->return->finally->return
NashornCompleter#complete(String, int, List)::: nashorn completer complete:::if->test->length->return->exprStart->partialParser->getLastExpressionStart->if->return->exprStr->test->substring->endsWithDot->SELECT_PROP_MISSING->matcher->matches->completeExpr->topExpr->getTopLevelExpression->if->if->LOAD_CALL->matcher->matches->name->context->getErr->readFileName->if->if->name->replace->result->add->return->name->length->return->rightMostExpr->getRightMostExpression->if->return->completeMemberSelect->else->if->return->completeIdentifier->else->return
NashornCompleter#readFileName(PrintWriter)::: nashorn completer read file name:::try->res->ScriptRuntime->apply->return->catch->err->println->if->e->printStackTrace->finally->return
NashornCompleter#completeMemberSelect(String, int, List, MemberSelectTree, boolean)::: nashorn completer complete member select:::objExpr->select->getExpression->objExprCode->exprStr->objExpr->getStartPosition->objExpr->getEndPosition->substring->obj->try->context->eval->catch->if->exp->printStackTrace->finally->if->if->result->propsHelper->getProperties->addAll->return->else->prefix->select->getIdentifier->result->propsHelper->getProperties->addAll->return->prefix->length->return
NashornCompleter#completeIdentifier(String, int, List, IdentifierTree)::: nashorn completer complete identifier:::name->ident->getName->result->propsHelper->getProperties->addAll->return->name->length
NashornCompleter#getTopLevelExpression(Parser, String)::: nashorn completer get top level expression:::try->cut->parser->parse->stats->cut->getSourceElements->if->stats->size->stat->stats->get->if->return->getExpression->catch->finally->return
NashornCompleter#getRightMostExpression(ExpressionTree)::: nashorn completer get right most expression:::return->expr->new->SimpleTreeVisitorES5_1<Tree,Void>->accept
NashornCompleter#createParser(ScriptEnvironment)::: nashorn completer create parser:::args->new->ArrayList<>->if->args->add->if->args->add->if->args->add->if->args->add->if->args->add->return->Parser->args->new->StringArr->toArray->create
PackagesHelper#create(Context)::: packages helper create:::return->isJavacHelperAvailable->new->JavacPackagesHelper->new->JrtPackagesHelper
PackagesHelper#getPackageProperties(String):::Return the list of properties of the given Java package or package prefix:::if->propsCache->containsKey->return->propsCache->get->try->props->listPackage->new->ArrayList<>->Collections->sort->propsCache->put->return->catch->if->exp->printStackTrace->return->Collections->emptyList->finally
PackagesHelper#close():::Close resources (like file system) used, if any.:::
PackagesHelper#listPackage(String):::Return the set of properties of a given package object.:::
PackagesHelper#isClassAccessible(String)::: packages helper is class accessible:::try->clz->context->findClass->return->Modifier->clz->getModifiers->isPublic->catch->finally->return
PackagesHelper#isPackageAccessible(String)::: packages helper is package accessible:::try->Context->checkPackageAccess->return->catch->return->finally
PackagesHelper#isJavacHelperAvailable()::: packages helper is javac helper available:::try->result->JavacPackagesHelper->isAvailable->if->println->return->catch->if->println->err->printStackTrace->return->finally
PropertiesHelper#close()::: properties helper close:::propsCache->clear->pkgsHelper->close
PropertiesHelper#getProperties(Object):::returns the list of properties of the given object.:::if->JSType->isPrimitive->return->JSType->toScriptObject->getProperties->if->if->return->pkgsHelper->getName->getPackageProperties->else->return->Collections->emptyList->if->sobj->pmap->sobj->getMap->if->propsCache->containsKey->return->propsCache->get->keys->sobj->getAllKeys->props->Arrays->asList->props->stream->Character->s->charAt->isJavaIdentifierStart->filter->Collectors->toList->collect->Collections->sort->propsCache->put->return->if->NativeJava->isType->if->propsCache->containsKey->return->propsCache->get->props->NativeJava->getProperties->Collections->sort->propsCache->put->return->clazz->obj->getClass->if->propsCache->containsKey->return->propsCache->get->props->NativeJava->getProperties->Collections->sort->propsCache->put->return
PropertiesHelper#makeCamelCasePattern(String)::: properties helper make camel case pattern:::chars->str->toCharArray->buf->new->StringBuilder->seenUpperCase->buf->append->for->idx->if->buf->append->try->return->Pattern->buf->toString->compile->catch->finally->return
PropertiesHelper#getProperties(Object, String):::Returns the list of properties of the given object that start with the given prefix.:::allProps->getProperties->props->allProps->stream->s->startsWith->filter->Collectors->toList->collect->if->props->isEmpty->pat->makeCamelCasePattern->if->return->allProps->stream->pat->matcher->matches->filter->Collectors->toList->collect->return

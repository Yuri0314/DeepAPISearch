jdk.nashorn.internal.runtime.doubleconv.Bignum#times10()->void::: bignum times10
jdk.nashorn.internal.runtime.doubleconv.Bignum#equal(Bignum, Bignum)->boolean::: bignum equal
jdk.nashorn.internal.runtime.doubleconv.Bignum#lessEqual(Bignum, Bignum)->boolean::: bignum less equal
jdk.nashorn.internal.runtime.doubleconv.Bignum#less(Bignum, Bignum)->boolean::: bignum less
jdk.nashorn.internal.runtime.doubleconv.Bignum#plusEqual(Bignum, Bignum, Bignum)->boolean::: bignum plus equal
jdk.nashorn.internal.runtime.doubleconv.Bignum#plusLessEqual(Bignum, Bignum, Bignum)->boolean::: bignum plus less equal
jdk.nashorn.internal.runtime.doubleconv.Bignum#plusLess(Bignum, Bignum, Bignum)->boolean::: bignum plus less
jdk.nashorn.internal.runtime.doubleconv.Bignum#bigitLength()->int::: bignum bigit length
jdk.nashorn.internal.runtime.doubleconv.Bignum#assignUInt16(char)->void::: bignum assign int16
jdk.nashorn.internal.runtime.doubleconv.Bignum#assignUInt64(long)->void::: bignum assign int64
jdk.nashorn.internal.runtime.doubleconv.Bignum#assignBignum(Bignum)->void::: bignum assign bignum
jdk.nashorn.internal.runtime.doubleconv.Bignum#readUInt64(String, int, int)->long::: bignum read int64
jdk.nashorn.internal.runtime.doubleconv.Bignum#assignDecimalString(String)->void::: bignum assign decimal string
jdk.nashorn.internal.runtime.doubleconv.Bignum#hexCharValue(char)->int::: bignum hex char value
jdk.nashorn.internal.runtime.doubleconv.Bignum#assignHexString(String)->void::: bignum assign hex string
jdk.nashorn.internal.runtime.doubleconv.Bignum#addUInt64(long)->void::: bignum add int64
jdk.nashorn.internal.runtime.doubleconv.Bignum#addBignum(Bignum)->void::: bignum add bignum
jdk.nashorn.internal.runtime.doubleconv.Bignum#subtractBignum(Bignum)->void::: bignum subtract bignum
jdk.nashorn.internal.runtime.doubleconv.Bignum#shiftLeft(int)->void::: bignum shift left
jdk.nashorn.internal.runtime.doubleconv.Bignum#multiplyByUInt32(int)->void::: bignum multiply by int32
jdk.nashorn.internal.runtime.doubleconv.Bignum#multiplyByUInt64(long)->void::: bignum multiply by int64
jdk.nashorn.internal.runtime.doubleconv.Bignum#multiplyByPowerOfTen(int)->void::: bignum multiply by power of ten
jdk.nashorn.internal.runtime.doubleconv.Bignum#square()->void::: bignum square
jdk.nashorn.internal.runtime.doubleconv.Bignum#assignPowerUInt16(int, int)->void::: bignum assign power int16
jdk.nashorn.internal.runtime.doubleconv.Bignum#divideModuloIntBignum(Bignum)->char::: bignum divide modulo int bignum
jdk.nashorn.internal.runtime.doubleconv.Bignum#sizeInHexChars(int)->int::: bignum size in hex chars
jdk.nashorn.internal.runtime.doubleconv.Bignum#hexCharOfValue(int)->char::: bignum hex char of value
jdk.nashorn.internal.runtime.doubleconv.Bignum#toHexString()->String::: bignum to hex string
jdk.nashorn.internal.runtime.doubleconv.Bignum#bigitOrZero(int)->int::: bignum bigit or zero
jdk.nashorn.internal.runtime.doubleconv.Bignum#compare(Bignum, Bignum)->int::: bignum compare
jdk.nashorn.internal.runtime.doubleconv.Bignum#plusCompare(Bignum, Bignum, Bignum)->int::: bignum plus compare
jdk.nashorn.internal.runtime.doubleconv.Bignum#clamp()->void::: bignum clamp
jdk.nashorn.internal.runtime.doubleconv.Bignum#isClamped()->boolean::: bignum is clamped
jdk.nashorn.internal.runtime.doubleconv.Bignum#zero()->void::: bignum zero
jdk.nashorn.internal.runtime.doubleconv.Bignum#align(Bignum)->void::: bignum align
jdk.nashorn.internal.runtime.doubleconv.Bignum#bigitsShiftLeft(int)->void::: bignum bigits shift left
jdk.nashorn.internal.runtime.doubleconv.Bignum#subtractTimes(Bignum, int)->void::: bignum subtract times
jdk.nashorn.internal.runtime.doubleconv.Bignum#toString()->String::: bignum to string
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#bignumDtoa(double, DtoaMode, int, DtoaBuffer)->void::: bignum dtoa bignum dtoa
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#generateShortestDigits(Bignum, Bignum, Bignum, Bignum, boolean, DtoaBuffer)->void::: bignum dtoa generate shortest digits
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#generateCountedDigits(int, Bignum, Bignum, DtoaBuffer)->void::: bignum dtoa generate counted digits
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#bignumToFixed(int, Bignum, Bignum, DtoaBuffer)->void::: bignum dtoa bignum to fixed
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#estimatePower(int)->int::: bignum dtoa estimate power
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#initialScaledStartValuesPositiveExponent(long, int, int, boolean, Bignum, Bignum, Bignum, Bignum)->void::: bignum dtoa initial scaled start values positive exponent
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#initialScaledStartValuesNegativeExponentPositivePower(long, int, int, boolean, Bignum, Bignum, Bignum, Bignum)->void::: bignum dtoa initial scaled start values negative exponent positive power
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#initialScaledStartValuesNegativeExponentNegativePower(long, int, int, boolean, Bignum, Bignum, Bignum, Bignum)->void::: bignum dtoa initial scaled start values negative exponent negative power
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#initialScaledStartValues(long, int, boolean, int, boolean, Bignum, Bignum, Bignum, Bignum)->void::: bignum dtoa initial scaled start values
jdk.nashorn.internal.runtime.doubleconv.BignumDtoa#fixupMultiply10(int, boolean, Bignum, Bignum, Bignum, Bignum)->int::: bignum dtoa fixup multiply10
jdk.nashorn.internal.runtime.doubleconv.CachedPowers#getCachedPowerForBinaryExponentRange(int, int, DiyFp)->int::: cached powers get cached power for binary exponent range
jdk.nashorn.internal.runtime.doubleconv.CachedPowers#getCachedPowerForDecimalExponent(int, DiyFp)->int::: cached powers get cached power for decimal exponent
jdk.nashorn.internal.runtime.doubleconv.DiyFp#subtract(DiyFp)->void::: diy fp subtract
jdk.nashorn.internal.runtime.doubleconv.DiyFp#minus(DiyFp, DiyFp)->DiyFp::: diy fp minus
jdk.nashorn.internal.runtime.doubleconv.DiyFp#multiply(DiyFp)->void::: diy fp multiply
jdk.nashorn.internal.runtime.doubleconv.DiyFp#times(DiyFp, DiyFp)->DiyFp::: diy fp times
jdk.nashorn.internal.runtime.doubleconv.DiyFp#normalize()->void::: diy fp normalize
jdk.nashorn.internal.runtime.doubleconv.DiyFp#normalize(DiyFp)->DiyFp::: diy fp normalize
jdk.nashorn.internal.runtime.doubleconv.DiyFp#f()->long::: diy fp f
jdk.nashorn.internal.runtime.doubleconv.DiyFp#e()->int::: diy fp e
jdk.nashorn.internal.runtime.doubleconv.DiyFp#setF(long)->void::: diy fp set f
jdk.nashorn.internal.runtime.doubleconv.DiyFp#setE(int)->void::: diy fp set e
jdk.nashorn.internal.runtime.doubleconv.DiyFp#toString()->String::: diy fp to string
jdk.nashorn.internal.runtime.doubleconv.DoubleConversion#toShortestString(double)->String:::Converts a double number to its shortest string representation.
jdk.nashorn.internal.runtime.doubleconv.DoubleConversion#toFixed(double, int)->String:::Converts a double number to a string representation with a fixed number of digits after the decimal point.
jdk.nashorn.internal.runtime.doubleconv.DoubleConversion#toPrecision(double, int)->String:::Converts a double number to a string representation with a fixed number of digits.
jdk.nashorn.internal.runtime.doubleconv.DoubleConversion#bignumDtoa(double, DtoaMode, int, DtoaBuffer)->void:::Converts a double number to a string representation using the BignumDtoa algorithm and the specified conversion mode and number of digits.
jdk.nashorn.internal.runtime.doubleconv.DoubleConversion#fastDtoaShortest(double, DtoaBuffer)->boolean:::Converts a double number to its shortest string representation using the FastDtoa algorithm.
jdk.nashorn.internal.runtime.doubleconv.DoubleConversion#fastDtoaCounted(double, int, DtoaBuffer)->boolean:::Converts a double number to a string representation with the given number of digits using the FastDtoa algorithm.
jdk.nashorn.internal.runtime.doubleconv.DoubleConversion#fixedDtoa(double, int, DtoaBuffer)->boolean:::Converts a double number to a string representation with a fixed number of digits after the decimal point using the FixedDtoa algorithm.
jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer#append(char)->void:::Append a character to the buffer, increasing its length.
jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer#reset()->void:::Clear the buffer contents and set its length to 0.
jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer#getRawDigits()->String:::Get the raw digits of this buffer as string.
jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer#getDecimalPoint()->int:::Get the position of the decimal point.
jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer#getLength()->int:::Returns the number of characters in the buffer.
jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer#format(DtoaMode, int)->String:::Returns the formatted buffer content as string, using the specified conversion mode and padding.
jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer#toString()->String::: dtoa buffer to string
jdk.nashorn.internal.runtime.doubleconv.FastDtoa#roundWeed(DtoaBuffer, long, long, long, long, long)->boolean::: fast dtoa round weed
jdk.nashorn.internal.runtime.doubleconv.FastDtoa#roundWeedCounted(char[], int, long, long, long)->int::: fast dtoa round weed counted
jdk.nashorn.internal.runtime.doubleconv.FastDtoa#biggestPowerTen(int, int)->long::: fast dtoa biggest power ten
jdk.nashorn.internal.runtime.doubleconv.FastDtoa#digitGen(DiyFp, DiyFp, DiyFp, DtoaBuffer, int)->boolean::: fast dtoa digit gen
jdk.nashorn.internal.runtime.doubleconv.FastDtoa#digitGenCounted(DiyFp, int, DtoaBuffer, int)->boolean::: fast dtoa digit gen counted
jdk.nashorn.internal.runtime.doubleconv.FastDtoa#grisu3(double, DtoaBuffer)->boolean::: fast dtoa grisu3
jdk.nashorn.internal.runtime.doubleconv.FastDtoa#grisu3Counted(double, int, DtoaBuffer)->boolean::: fast dtoa grisu3 counted
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa.UInt128#multiply(int)->void::: int128 multiply
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa.UInt128#shift(int)->void::: int128 shift
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa.UInt128#divModPowerOf2(int)->int::: int128 div mod power of2
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa.UInt128#isZero()->boolean::: int128 is zero
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa.UInt128#bitAt(int)->int::: int128 bit at
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa#fillDigits32FixedLength(int, int, DtoaBuffer)->void::: fixed dtoa fill digits32 fixed length
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa#fillDigits32(int, DtoaBuffer)->void::: fixed dtoa fill digits32
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa#fillDigits64FixedLength(long, DtoaBuffer)->void::: fixed dtoa fill digits64 fixed length
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa#FillDigits64(long, DtoaBuffer)->void::: fixed dtoa  fill digits64
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa#roundUp(DtoaBuffer)->void::: fixed dtoa round up
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa#fillFractionals(long, int, int, DtoaBuffer)->void::: fixed dtoa fill fractionals
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa#trimZeros(DtoaBuffer)->void::: fixed dtoa trim zeros
jdk.nashorn.internal.runtime.doubleconv.FixedDtoa#fastFixedDtoa(double, int, DtoaBuffer)->boolean::: fixed dtoa fast fixed dtoa
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#doubleToLong(double)->long::: ieee double double to long
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#longToDouble(long)->double::: ieee double long to double
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#asDiyFp(long)->DiyFp::: ieee double as diy fp
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#asNormalizedDiyFp(long)->DiyFp::: ieee double as normalized diy fp
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#nextDouble(long)->double::: ieee double next double
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#previousDouble(long)->double::: ieee double previous double
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#exponent(long)->int::: ieee double exponent
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#significand(long)->long::: ieee double significand
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#isDenormal(long)->boolean::: ieee double is denormal
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#isSpecial(long)->boolean::: ieee double is special
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#isNaN(long)->boolean::: ieee double is na n
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#isInfinite(long)->boolean::: ieee double is infinite
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#sign(long)->int::: ieee double sign
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#normalizedBoundaries(long, DiyFp, DiyFp)->void::: ieee double normalized boundaries
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#lowerBoundaryIsCloser(long)->boolean::: ieee double lower boundary is closer
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#value(long)->double::: ieee double value
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#significandSizeForOrderOfMagnitude(int)->int::: ieee double significand size for order of magnitude
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#Infinity()->double::: ieee double  infinity
jdk.nashorn.internal.runtime.doubleconv.IeeeDouble#NaN()->double::: ieee double  na n

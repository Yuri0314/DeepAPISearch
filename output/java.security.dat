AccessControlContext#getDebug()::: access control context get debug:::if->return->else->if->Policy->isSet->Debug->getInstance->return
AccessControlContext#getContext():::Returns this context's context.:::return
AccessControlContext#isPrivileged():::Returns true if this context is privileged.:::return
AccessControlContext#getAssignedCombiner():::get the assigned combiner from the privileged or inherited context:::acc->if->else->AccessController->getInheritedAccessControlContext->if->return->return
AccessControlContext#getDomainCombiner():::Get the DomainCombiner associated with this AccessControlContext.:::sm->System->getSecurityManager->if->sm->checkPermission->return->getCombiner
AccessControlContext#getCombiner():::package private for AccessController:::return
AccessControlContext#isAuthorized()::: access control context is authorized:::return
AccessControlContext#checkPermission(Permission):::Determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object:::dumpDebug->if->throw->new->NullPointerException->if->getDebug->Debug->isOn->if->for->i->Debug->isOn->Debug->perm->getClass->getCanonicalName->isOn->if->Debug->isOn->Thread->dumpStack->if->Debug->isOn->if->debug->println->else->for->i->if->checkPermission2->return->for->i->if->debug->println->checkPermission2
AccessControlContext#checkPermission2(Permission)::: access control context check permission2:::if->return->if->privilegedContext->checkPermission2->if->return->if->permClass->perm->getClass->for->i->if->if->parent->checkPermission2->else->parent->checkPermission
AccessControlContext#optimize():::Take the stack-based context (this) and combine it with the privileged or inherited context, if need be:::acc->combiner->parent->permissions->if->if->if->else->AccessController->getInheritedAccessControlContext->if->if->skipStack->skipAssigned->assigned->pd->skipLimited->if->if->getDebug->debug->println->combiner->combine->else->if->if->calculateFields->return->else->if->return->else->if->if->if->return->combine->if->return->else->if->calculateFields->return->calculateFields->return
AccessControlContext#combine(ProtectionDomain[], ProtectionDomain[])::: access control context combine:::skipStack->skipAssigned->slen->if->return->n->pd->new->ProtectionDomainArr->if->System->arraycopy->for->i->if->if->return->else->if->return->tmp->new->ProtectionDomainArr->System->arraycopy->return
AccessControlContext#calculateFields(AccessControlContext, AccessControlContext, Permission[])::: access control context calculate fields:::parentLimit->assignedLimit->newLimit->combine->if->if->containsAllPDs
AccessControlContext#equals(Object):::Checks two AccessControlContext objects for equality:::if->return->if->return->that->if->equalContext->return->if->equalLimitedContext->return->return
AccessControlContext#equalContext(AccessControlContext)::: access control context equal context:::if->equalPDs->return->if->return->if->equals->return->return
AccessControlContext#equalPDs(ProtectionDomain[], ProtectionDomain[])::: access control context equal ds:::if->return->if->return->if->containsAllPDs->containsAllPDs->return->return
AccessControlContext#equalLimitedContext(AccessControlContext)::: access control context equal limited context:::if->return->if->return->if->return->if->return->if->return->if->return->if->this->containsAllLimits->that->containsAllLimits->return->thisNextPC->getNextPC->thatNextPC->getNextPC->if->return->if->thisNextPC->equalLimitedContext->return->if->return->if->equals->return->return
AccessControlContext#getNextPC(AccessControlContext)::: access control context get next c:::while->if->return->return
AccessControlContext#containsAllPDs(ProtectionDomain[], ProtectionDomain[])::: access control context contains all ds:::match->thisPd->for->i->return
AccessControlContext#containsAllLimits(AccessControlContext)::: access control context contains all limits:::match->thisPerm->if->return->for->i->return
AccessControlContext#hashCode()::: access control context hash code:::hashCode->if->return->for->i->return
AccessControlException#getPermission():::Gets the Permission object associated with this exception, or null if there was no corresponding Permission object.:::return
AccessController#doPrivileged(PrivilegedAction)::: access controller do privileged:::
AccessController#doPrivilegedWithCombiner(PrivilegedAction):::Performs the specified PrivilegedAction with privileges enabled:::acc->getStackAccessControlContext->if->return->AccessController->doPrivileged->dc->acc->getAssignedCombiner->return->AccessController->Reflection->getCallerClass->preserveCombiner->doPrivileged
AccessController#doPrivileged(PrivilegedAction, AccessControlContext):::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext:::
AccessController#doPrivileged(PrivilegedAction, AccessControlContext, Permission...):::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments:::parent->getContext->if->throw->new->NullPointerException->caller->Reflection->getCallerClass->dc->context->getCombiner->return->AccessController->createWrapper->doPrivileged
AccessController#doPrivilegedWithCombiner(PrivilegedAction, AccessControlContext, Permission...):::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments:::parent->getContext->dc->parent->getCombiner->if->context->getCombiner->if->throw->new->NullPointerException->caller->Reflection->getCallerClass->return->AccessController->createWrapper->doPrivileged
AccessController#doPrivileged(PrivilegedExceptionAction):::Performs the specified PrivilegedExceptionAction with privileges enabled:::
AccessController#doPrivilegedWithCombiner(PrivilegedExceptionAction):::Performs the specified PrivilegedExceptionAction with privileges enabled:::acc->getStackAccessControlContext->if->return->AccessController->doPrivileged->dc->acc->getAssignedCombiner->return->AccessController->Reflection->getCallerClass->preserveCombiner->doPrivileged
AccessController#preserveCombiner(DomainCombiner, Class):::preserve the combiner across the doPrivileged call:::return->createWrapper
AccessController#createWrapper(DomainCombiner, Class, AccessControlContext, AccessControlContext, Permission[]):::Create a wrapper to contain the limited privilege scope data.:::callerPD->getCallerPD->if->context->isAuthorized->System->getSecurityManager->callerPD->impliesCreateAccessControlContext->return->getInnocuousAcc->else->return->new->AccessControlContext
AccessController#getInnocuousAcc()::: access controller get innocuous acc:::return
AccessController#getCallerPD(Class)::: access controller get caller d:::callerPd->new->PrivilegedAction<>->doPrivileged->return
AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext):::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext:::
AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext, Permission...):::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments:::parent->getContext->if->throw->new->NullPointerException->caller->Reflection->getCallerClass->dc->context->getCombiner->return->AccessController->createWrapper->doPrivileged
AccessController#doPrivilegedWithCombiner(PrivilegedExceptionAction, AccessControlContext, Permission...):::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments:::parent->getContext->dc->parent->getCombiner->if->context->getCombiner->if->throw->new->NullPointerException->caller->Reflection->getCallerClass->return->AccessController->createWrapper->doPrivileged
AccessController#getStackAccessControlContext()::: access controller get stack access control context:::
AccessController#getInheritedAccessControlContext()::: access controller get inherited access control context:::
AccessController#getContext()::: access controller get context:::acc->getStackAccessControlContext->if->return->new->AccessControlContext->else->return->acc->optimize
AccessController#checkPermission(Permission)::: access controller check permission:::if->throw->new->NullPointerException->stack->getStackAccessControlContext->if->debug->AccessControlContext->getDebug->dumpDebug->if->Debug->isOn->Debug->isOn->Debug->perm->getClass->getCanonicalName->isOn->if->Debug->isOn->Thread->dumpStack->if->Debug->isOn->debug->println->if->debug->println->return->acc->stack->optimize->acc->checkPermission
AlgorithmConstraints#permits(Set, String, AlgorithmParameters):::Determines whether an algorithm is granted permission for the specified cryptographic primitives.:::
AlgorithmConstraints#permits(Set, Key):::Determines whether a key is granted permission for the specified cryptographic primitives:::
AlgorithmConstraints#permits(Set, String, Key, AlgorithmParameters):::Determines whether an algorithm and the corresponding key are granted permission for the specified cryptographic primitives.:::
AlgorithmParameterGenerator#getAlgorithm():::Returns the standard name of the algorithm this parameter generator is associated with.:::return
AlgorithmParameterGenerator#getInstance(String):::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm:::Objects->requireNonNull->try->objs->Security->getImpl->return->new->AlgorithmParameterGenerator->catch->throw->new->NoSuchAlgorithmException->finally
AlgorithmParameterGenerator#getInstance(String, String):::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm:::Objects->requireNonNull->if->provider->length->throw->new->IllegalArgumentException->objs->Security->getImpl->return->new->AlgorithmParameterGenerator
AlgorithmParameterGenerator#getInstance(String, Provider):::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm:::Objects->requireNonNull->if->throw->new->IllegalArgumentException->objs->Security->getImpl->return->new->AlgorithmParameterGenerator
AlgorithmParameterGenerator#getProvider():::Returns the provider of this algorithm parameter generator object.:::return
AlgorithmParameterGenerator#init(int):::Initializes this parameter generator for a certain size:::paramGenSpi->new->SecureRandom->engineInit
AlgorithmParameterGenerator#init(int, SecureRandom):::Initializes this parameter generator for a certain size and source of randomness.:::paramGenSpi->engineInit
AlgorithmParameterGenerator#init(AlgorithmParameterSpec):::Initializes this parameter generator with a set of algorithm-specific parameter generation values:::paramGenSpi->new->SecureRandom->engineInit
AlgorithmParameterGenerator#init(AlgorithmParameterSpec, SecureRandom):::Initializes this parameter generator with a set of algorithm-specific parameter generation values.:::paramGenSpi->engineInit
AlgorithmParameterGenerator#generateParameters():::Generates the parameters.:::return->paramGenSpi->engineGenerateParameters
AlgorithmParameterGeneratorSpi#engineInit(int, SecureRandom):::Initializes this parameter generator for a certain size and source of randomness.:::
AlgorithmParameterGeneratorSpi#engineInit(AlgorithmParameterSpec, SecureRandom):::Initializes this parameter generator with a set of algorithm-specific parameter generation values.:::
AlgorithmParameterGeneratorSpi#engineGenerateParameters():::Generates the parameters.:::
AlgorithmParameters#getAlgorithm():::Returns the name of the algorithm associated with this parameter object.:::return
AlgorithmParameters#getInstance(String):::Returns a parameter object for the specified algorithm:::Objects->requireNonNull->try->objs->Security->getImpl->return->new->AlgorithmParameters->catch->throw->new->NoSuchAlgorithmException->finally
AlgorithmParameters#getInstance(String, String):::Returns a parameter object for the specified algorithm:::Objects->requireNonNull->if->provider->length->throw->new->IllegalArgumentException->objs->Security->getImpl->return->new->AlgorithmParameters
AlgorithmParameters#getInstance(String, Provider):::Returns a parameter object for the specified algorithm:::Objects->requireNonNull->if->throw->new->IllegalArgumentException->objs->Security->getImpl->return->new->AlgorithmParameters
AlgorithmParameters#getProvider():::Returns the provider of this parameter object.:::return
AlgorithmParameters#init(AlgorithmParameterSpec):::Initializes this parameter object using the parameters specified in paramSpec.:::if->throw->new->InvalidParameterSpecException->paramSpi->engineInit
AlgorithmParameters#init(byte[]):::Imports the specified parameters and decodes them according to the primary decoding format for parameters:::if->throw->new->IOException->paramSpi->engineInit
AlgorithmParameters#init(byte[], String):::Imports the parameters from params and decodes them according to the specified decoding scheme:::if->throw->new->IOException->paramSpi->engineInit
AlgorithmParameters#getParameterSpec(Class):::Returns a (transparent) specification of this parameter object:::if->throw->new->InvalidParameterSpecException->return->paramSpi->engineGetParameterSpec
AlgorithmParameters#getEncoded():::Returns the parameters in their primary encoding format:::if->throw->new->IOException->return->paramSpi->engineGetEncoded
AlgorithmParameters#getEncoded(String):::Returns the parameters encoded in the specified scheme:::if->throw->new->IOException->return->paramSpi->engineGetEncoded
AlgorithmParameters#toString():::Returns a formatted string describing the parameters.:::if->return->return->paramSpi->engineToString
AlgorithmParametersSpi#engineInit(AlgorithmParameterSpec):::Initializes this parameters object using the parameters specified in paramSpec.:::
AlgorithmParametersSpi#engineInit(byte[]):::Imports the specified parameters and decodes them according to the primary decoding format for parameters:::
AlgorithmParametersSpi#engineInit(byte[], String):::Imports the parameters from params and decodes them according to the specified decoding format:::
AlgorithmParametersSpi#engineGetParameterSpec(Class):::Returns a (transparent) specification of this parameters object:::
AlgorithmParametersSpi#engineGetEncoded():::Returns the parameters in their primary encoding format:::
AlgorithmParametersSpi#engineGetEncoded(String):::Returns the parameters encoded in the specified format:::
AlgorithmParametersSpi#engineToString():::Returns a formatted string describing the parameters.:::
AllPermission#implies(Permission):::Checks if the specified permission is "implied" by this object:::return
AllPermission#equals(Object):::Checks two AllPermission objects for equality:::return
AllPermission#hashCode()::: all permission hash code:::return
AllPermission#getActions():::Returns the canonical string representation of the actions.:::return
AllPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing AllPermission objects.:::return->new->AllPermissionCollection
AllPermissionCollection#add(Permission)::: all permission collection add:::if->throw->new->IllegalArgumentException->if->isReadOnly->throw->new->SecurityException
AllPermissionCollection#implies(Permission)::: all permission collection implies:::return
AllPermissionCollection#elements():::Returns an enumeration of all the AllPermission objects in the container.:::return->new->Enumeration<>
AuthProvider#login(Subject, CallbackHandler):::Log in to this provider:::
AuthProvider#logout():::Log out from this provider.:::
AuthProvider#setCallbackHandler(CallbackHandler):::Set a CallbackHandler:::
BasicPermission#init(String):::initialize a BasicPermission object:::if->throw->new->NullPointerException->len->name->length->if->throw->new->IllegalArgumentException->last->name->charAt->if->name->charAt->if->else->name->substring->else->if->name->equals->else
BasicPermission#implies(Permission):::Checks if the specified permission is "implied" by this object:::if->p->getClass->getClass->return->that->if->if->return->startsWith->else->return->length->length->startsWith->else->if->return->else->return->equals
BasicPermission#equals(Object):::Checks two BasicPermission objects for equality:::if->return->if->obj->getClass->getClass->return->bp->return->getName->bp->getName->equals
BasicPermission#hashCode():::Returns the hash code value for this object:::return->this->getName->hashCode
BasicPermission#getActions():::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for a BasicPermission.:::return
BasicPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing BasicPermission objects:::return->this->getClass->new->BasicPermissionCollection
BasicPermission#readObject(ObjectInputStream):::readObject is called to restore the state of the BasicPermission from a stream.:::s->defaultReadObject->getName->init
BasicPermission#getCanonicalName():::Returns the canonical name of this BasicPermission:::return->getName
BasicPermissionCollection#add(Permission):::Adds a permission to the BasicPermissions:::if->throw->new->IllegalArgumentException->if->isReadOnly->throw->new->SecurityException->bp->if->bp->getClass->else->if->bp->getClass->throw->new->IllegalArgumentException->canonName->bp->getCanonicalName->perms->put->if->if->canonName->equals
BasicPermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".:::if->return->bp->if->bp->getClass->return->if->return->path->bp->getCanonicalName->x->perms->get->if->return->x->implies->last->offset->path->length->while->path->lastIndexOf->path->substring->perms->get->if->return->x->implies->return
BasicPermissionCollection#elements():::Returns an enumeration of all the BasicPermission objects in the container.:::return->perms->elements
BasicPermissionCollection#writeObject(ObjectOutputStream)::: basic permission collection write object:::permissions->perms->size->new->Hashtable<>->permissions->putAll->pfields->out->putFields->pfields->put->pfields->put->pfields->put->out->writeFields
BasicPermissionCollection#readObject(java.io.ObjectInputStream):::readObject is called to restore the state of the BasicPermissionCollection from a stream.:::gfields->in->readFields->permissions->gfields->get->permissions->size->new->ConcurrentHashMap<>->perms->putAll->gfields->get->gfields->get->if->e->permissions->elements->if->e->hasMoreElements->p->e->nextElement->p->getClass
Certificate#getGuarantor():::Returns the guarantor of the certificate, that is, the principal guaranteeing that the public key associated with this certificate is that of the principal associated with this certificate:::
Certificate#getPrincipal():::Returns the principal of the principal-key pair being guaranteed by the guarantor.:::
Certificate#getPublicKey():::Returns the key of the principal-key pair being guaranteed by the guarantor.:::
Certificate#encode(OutputStream):::Encodes the certificate to an output stream in a format that can be decoded by the decode method.:::
Certificate#decode(InputStream):::Decodes a certificate from an input stream:::
Certificate#getFormat():::Returns the name of the coding format:::
Certificate#toString(boolean):::Returns a string that represents the contents of the certificate.:::
CodeSigner#getSignerCertPath():::Returns the signer's certificate path.:::return
CodeSigner#getTimestamp():::Returns the signature timestamp.:::return
CodeSigner#hashCode():::Returns the hash code value for this code signer:::if->if->signerCertPath->hashCode->else->signerCertPath->hashCode->timestamp->hashCode->return
CodeSigner#equals(Object):::Tests for equality between the specified object and this code signer:::if->return->that->if->return->thatTimestamp->that->getTimestamp->if->if->return->else->if->timestamp->equals->return->return->signerCertPath->that->getSignerCertPath->equals
CodeSigner#toString():::Returns a string describing this code signer.:::sb->new->StringBuilder->sb->append->sb->signerCertPath->getCertificates->get->append->if->sb->append->sb->append->return->sb->toString
CodeSigner#readObject(ObjectInputStream)::: code signer read object:::ois->defaultReadObject
CodeSource#hashCode():::Returns the hash code value for this object.:::if->return->location->hashCode->else->return
CodeSource#equals(Object):::Tests for equality between the specified object and this object:::if->return->if->return->cs->if->if->return->else->if->location->equals->return->return->matchCerts
CodeSource#getLocation():::Returns the location associated with this CodeSource.:::return
CodeSource#getLocationNoFragString():::Returns a String form of the URL for use as a key in HashMaps/Sets.:::return
CodeSource#getCertificates():::Returns the certificates associated with this CodeSource:::if->return->certs->clone->else->if->certChains->new->ArrayList<>->for->i->certChains->certChains->size->new->java.security.cert.CertificateArr->toArray->return->certs->clone->else->return
CodeSource#getCodeSigners():::Returns the code signers associated with this CodeSource:::if->return->signers->clone->else->if->convertCertArrayToSignerArray->return->signers->clone->else->return
CodeSource#implies(CodeSource):::Returns true if this CodeSource object "implies" the specified CodeSource:::if->return->return->matchCerts->matchLocation
CodeSource#matchCerts(CodeSource, boolean):::Returns true if all the certs in this CodeSource are also in that.:::match->if->if->return->else->return->else->if->if->return->for->i->return->else->if->if->return->for->i->return->return
CodeSource#matchLocation(CodeSource):::Returns true if two CodeSource's have the "same" location.:::if->return->if->return->if->location->equals->return->if->location->getProtocol->getProtocol->equalsIgnoreCase->return->thisPort->location->getPort->if->thatPort->getPort->port->getDefaultPort->if->return->if->location->getFile->endsWith->thisPath->location->getFile->location->getFile->length->substring->if->getFile->startsWith->return->else->if->location->getFile->endsWith->last->getFile->lastIndexOf->if->return->thisPath->location->getFile->location->getFile->length->substring->thatPath->getFile->substring->if->thatPath->equals->return->else->if->getFile->location->getFile->equals->getFile->location->getFile->equals->return->if->location->getRef->location->getRef->getRef->equals->return->thisHost->location->getHost->thatHost->getHost->if->if->equals->equals->equals->equals->else->if->thisHost->equals->if->return->if->new->SocketPermission->if->new->SocketPermission->if->implies->return->return
CodeSource#toString():::Returns a string describing this CodeSource, telling its URL and certificates.:::sb->new->StringBuilder->sb->append->sb->append->if->for->i->else->if->for->i->else->sb->append->sb->append->return->sb->toString
CodeSource#writeObject(java.io.ObjectOutputStream):::Writes this object out to a stream (i.e., serializes it).:::oos->defaultWriteObject->if->oos->writeInt->else->oos->writeInt->for->i->if->oos->writeObject
CodeSource#readObject(java.io.ObjectInputStream):::Restores this object from a stream (i.e., deserializes it).:::cf->cfs->certList->ois->defaultReadObject->size->ois->readInt->if->new->Hashtable<>->new->ArrayList<>->else->if->throw->new->IOException->for->i->if->certList->new->java.security.cert.CertificateArr->toArray->try->ois->readObject->clone->catch->finally->if->URLUtil->urlNoFragString
CodeSource#convertCertArrayToSignerArray(java.security.cert.Certificate[])::: code source convert cert array to signer array:::if->return->try->if->CertificateFactory->getInstance->i->signers->new->ArrayList<>->while->certChain->new->ArrayList<>->certChain->add->j->while->getBasicConstraints->certChain->add->certPath->factory->generateCertPath->signers->new->CodeSigner->add->if->signers->isEmpty->return->else->return->signers->signers->size->new->CodeSignerArr->toArray->catch->return->finally
DigestInputStream#getMessageDigest():::Returns the message digest associated with this stream.:::return
DigestInputStream#setMessageDigest(MessageDigest):::Associates the specified message digest with this stream.:::
DigestInputStream#read():::Reads a byte, and updates the message digest (if the digest function is on):::ch->in->read->if->digest->update->return
DigestInputStream#read(byte[], int, int):::Reads into a byte array, and updates the message digest (if the digest function is on):::result->in->read->if->digest->update->return
DigestInputStream#on(boolean):::Turns the digest function on or off:::
DigestInputStream#toString():::Prints a string representation of this digest input stream and its associated message digest object.:::return->digest->toString
DigestOutputStream#getMessageDigest():::Returns the message digest associated with this stream.:::return
DigestOutputStream#setMessageDigest(MessageDigest):::Associates the specified message digest with this stream.:::
DigestOutputStream#write(int):::Updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream:::out->write->if->digest->update
DigestOutputStream#write(byte[], int, int):::Updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream:::out->write->if->digest->update
DigestOutputStream#on(boolean):::Turns the digest function on or off:::
DigestOutputStream#toString():::Prints a string representation of this digest output stream and its associated message digest object.:::return->digest->toString
DomainCombiner#combine(ProtectionDomain[], ProtectionDomain[]):::Modify or update the provided ProtectionDomains:::
DomainLoadStoreParameter#getConfiguration():::Gets the identifier for the domain configuration data.:::return
DomainLoadStoreParameter#getProtectionParams():::Gets the keystore protection parameters for keystores in this domain.:::return
DomainLoadStoreParameter#getProtectionParameter():::Gets the keystore protection parameters for this domain:::return
DrbgParameters.Instantiation#getStrength():::Returns the security strength in bits.:::return
DrbgParameters.Instantiation#getCapability():::Returns the capability.:::return
DrbgParameters.Instantiation#getPersonalizationString():::Returns the personalization string as a byte array.:::return->personalizationString->clone
DrbgParameters.Instantiation#toString():::Returns a Human-readable string representation of this Instantiation.:::return
DrbgParameters.NextBytes#getStrength():::Returns the security strength requested in bits.:::return
DrbgParameters.NextBytes#getPredictionResistance():::Returns whether prediction resistance is requested.:::return
DrbgParameters.NextBytes#getAdditionalInput():::Returns the requested additional input.:::return->additionalInput->clone
DrbgParameters.Reseed#getPredictionResistance():::Returns whether prediction resistance is requested.:::return
DrbgParameters.Reseed#getAdditionalInput():::Returns the requested additional input.:::return->additionalInput->clone
DrbgParameters#instantiation(int, Capability, byte[]):::Generates a DrbgParameters.Instantiation object.:::return->Objects->requireNonNull->new->Instantiation
DrbgParameters#nextBytes(int, boolean, byte[]):::Generates a NextBytes object.:::return->new->NextBytes
DrbgParameters#reseed(boolean, byte[]):::Generates a Reseed object.:::return->new->Reseed
Guard#checkGuard(Object):::Determines whether or not to allow access to the guarded object object:::
GuardedObject#getObject():::Retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard.:::if->guard->checkGuard->return
GuardedObject#writeObject(java.io.ObjectOutputStream):::Writes this object out to a stream (i.e., serializes it):::if->guard->checkGuard->oos->defaultWriteObject
Identity#getName():::Returns this identity's name.:::return
Identity#getScope():::Returns this identity's scope.:::return
Identity#getPublicKey():::Returns this identity's public key.:::return
Identity#setPublicKey(PublicKey)::: identity set public key:::check->new->Vector<>
Identity#setInfo(String):::Specifies a general information string for this identity:::check
Identity#getInfo():::Returns general information previously specified for this identity.:::return
Identity#addCertificate(Certificate):::Adds a certificate for this identity:::check->if->new->Vector<>->if->if->certificate->getPublicKey->keyEquals->throw->new->KeyManagementException->else->certificate->getPublicKey->certificates->addElement
Identity#keyEquals(PublicKey, PublicKey)::: identity key equals:::aKeyFormat->aKey->getFormat->anotherKeyFormat->anotherKey->getFormat->if->return->if->if->aKeyFormat->equalsIgnoreCase->return->return->aKey->getEncoded->anotherKey->getEncoded->equals
Identity#removeCertificate(Certificate):::Removes a certificate from this identity:::check->if->certificates->removeElement
Identity#certificates():::Returns a copy of all the certificates for this identity.:::if->return->new->CertificateArr->len->certificates->size->certs->new->CertificateArr->certificates->copyInto->return
Identity#equals(Object):::Tests for equality between the specified object and this identity:::if->return->if->i->if->this->fullName->i->fullName->equals->return->else->return->identityEquals->return
Identity#identityEquals(Identity):::Tests for equality between the specified identity and this identity:::if->name->equalsIgnoreCase->return->if->return->if->if->publicKey->equals->return->return
Identity#fullName():::Returns a parsable name for identity: identityName.scopeName:::parsable->if->scope->getName->return
Identity#toString():::Returns a short string describing this identity, telling its name and its scope (if any):::check->printable->if->scope->getName->return
Identity#toString(boolean):::Returns a string representation of this identity, with optionally more details than that provided by the toString method without any arguments:::out->toString->if->printKeys->printCertificates->if->else->return
Identity#printKeys()::: identity print keys:::key->if->else->return
Identity#printCertificates()::: identity print certificates:::out->if->return->else->i->foreach->cert->getPrincipal->cert->getGuarantor->return
Identity#hashCode():::Returns a hashcode for this identity.:::return->name->hashCode
Identity#check(String)::: identity check:::security->System->getSecurityManager->if->security->checkSecurityAccess
IdentityScope#initializeSystemScope()::: identity scope initialize system scope:::classname->AccessController->new->PrivilegedAction<>->doPrivileged->if->return->else->try->Class->forName->catch->println->e->printStackTrace->finally
IdentityScope#getSystemScope():::Returns the system's identity scope.:::if->initializeSystemScope->return
IdentityScope#setSystemScope(IdentityScope):::Sets the system's identity scope:::check
IdentityScope#size():::Returns the number of identities within this identity scope.:::
IdentityScope#getIdentity(String):::Returns the identity in this scope with the specified name (if any).:::
IdentityScope#getIdentity(Principal):::Retrieves the identity whose name is the same as that of the specified principal:::return->principal->getName->getIdentity
IdentityScope#getIdentity(PublicKey):::Retrieves the identity with the specified public key.:::
IdentityScope#addIdentity(Identity):::Adds an identity to this identity scope.:::
IdentityScope#removeIdentity(Identity):::Removes an identity from this identity scope.:::
IdentityScope#identities():::Returns an enumeration of all identities in this identity scope.:::
IdentityScope#toString():::Returns a string representation of this identity scope, including its name, its scope name, and the number of identities in this identity scope.:::return->super->toString->size
IdentityScope#check(String)::: identity scope check:::security->System->getSecurityManager->if->security->checkSecurityAccess
Key#getAlgorithm():::Returns the standard algorithm name for this key:::
Key#getFormat():::Returns the name of the primary encoding format of this key, or null if this key does not support encoding:::
Key#getEncoded():::Returns the key in its primary encoding format, or null if this key does not support encoding.:::
KeyFactory#getInstance(String):::Returns a KeyFactory object that converts public/private keys of the specified algorithm:::Objects->requireNonNull->return->new->KeyFactory
KeyFactory#getInstance(String, String):::Returns a KeyFactory object that converts public/private keys of the specified algorithm:::Objects->requireNonNull->instance->GetInstance->getInstance->return->new->KeyFactory
KeyFactory#getInstance(String, Provider):::Returns a KeyFactory object that converts public/private keys of the specified algorithm:::Objects->requireNonNull->instance->GetInstance->getInstance->return->new->KeyFactory
KeyFactory#getProvider():::Returns the provider of this key factory object.:::synchronized->return
KeyFactory#getAlgorithm():::Gets the name of the algorithm associated with this KeyFactory.:::return
KeyFactory#nextSpi(KeyFactorySpi):::Update the active KeyFactorySpi of this class and return the next implementation for failover:::synchronized->if->return->if->return->while->serviceIterator->hasNext->s->serviceIterator->next->try->obj->s->newInstance->if->continue->spi->s->getProvider->return->catch->finally->return
KeyFactory#generatePublic(KeySpec):::Generates a public key object from the provided key specification (key material).:::if->return->spi->engineGeneratePublic->failure->mySpi->do->try->return->mySpi->engineGeneratePublic->catch->if->nextSpi->finally->while->if->throw->if->throw->throw->new->InvalidKeySpecException
KeyFactory#generatePrivate(KeySpec):::Generates a private key object from the provided key specification (key material).:::if->return->spi->engineGeneratePrivate->failure->mySpi->do->try->return->mySpi->engineGeneratePrivate->catch->if->nextSpi->finally->while->if->throw->if->throw->throw->new->InvalidKeySpecException
KeyFactory#getKeySpec(Key, Class):::Returns a specification (key material) of the given key object:::if->return->spi->engineGetKeySpec->failure->mySpi->do->try->return->mySpi->engineGetKeySpec->catch->if->nextSpi->finally->while->if->throw->if->throw->throw->new->InvalidKeySpecException
KeyFactory#translateKey(Key):::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.:::if->return->spi->engineTranslateKey->failure->mySpi->do->try->return->mySpi->engineTranslateKey->catch->if->nextSpi->finally->while->if->throw->if->throw->throw->new->InvalidKeyException
KeyFactorySpi#engineGeneratePublic(KeySpec):::Generates a public key object from the provided key specification (key material).:::
KeyFactorySpi#engineGeneratePrivate(KeySpec):::Generates a private key object from the provided key specification (key material).:::
KeyFactorySpi#engineGetKeySpec(Key, Class):::Returns a specification (key material) of the given key object:::
KeyFactorySpi#engineTranslateKey(Key):::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.:::
KeyPair#getPublic():::Returns a reference to the public key component of this key pair.:::return
KeyPair#getPrivate():::Returns a reference to the private key component of this key pair.:::return
KeyPairGenerator#getAlgorithm():::Returns the standard name of the algorithm for this key pair generator:::return
KeyPairGenerator#getInstance(Instance, String)::: key pair generator get instance:::kpg->if->else->spi->new->Delegate->if->pdebug->getName->println->return
KeyPairGenerator#getInstance(String):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm:::Objects->requireNonNull->list->GetInstance->getServices->t->list->iterator->if->t->hasNext->throw->new->NoSuchAlgorithmException->failure->do->s->t->next->try->instance->GetInstance->getInstance->if->return->getInstance->else->return->new->Delegate->catch->if->finally->while->t->hasNext->throw
KeyPairGenerator#getInstance(String, String):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm:::Objects->requireNonNull->instance->GetInstance->getInstance->return->getInstance
KeyPairGenerator#getInstance(String, Provider):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm:::Objects->requireNonNull->instance->GetInstance->getInstance->return->getInstance
KeyPairGenerator#getProvider():::Returns the provider of this key pair generator object.:::disableFailover->return
KeyPairGenerator#disableFailover()::: key pair generator disable failover:::
KeyPairGenerator#initialize(int):::Initializes the key pair generator for a certain keysize using a default parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness:::JCAUtil->getSecureRandom->initialize
KeyPairGenerator#initialize(int, SecureRandom):::Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).:::
KeyPairGenerator#initialize(AlgorithmParameterSpec):::Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness:::JCAUtil->getSecureRandom->initialize
KeyPairGenerator#initialize(AlgorithmParameterSpec, SecureRandom):::Initializes the key pair generator with the given parameter set and source of randomness:::
KeyPairGenerator#genKeyPair():::Generates a key pair:::return->generateKeyPair
KeyPairGenerator#generateKeyPair():::Generates a key pair:::return
KeyPairGenerator.Delegate#nextSpi(KeyPairGeneratorSpi, boolean):::Update the active spi of this class and return the next implementation for failover:::synchronized->if->return->if->return->while->serviceIterator->hasNext->s->serviceIterator->next->try->inst->s->newInstance->if->continue->if->continue->spi->if->if->spi->initialize->else->if->spi->initialize->else->if->throw->new->AssertionError->s->getProvider->return->catch->finally->disableFailover->return
KeyPairGenerator.Delegate#disableFailover()::: delegate disable failover:::
KeyPairGenerator.Delegate#initialize(int, SecureRandom)::: delegate initialize:::if->spi->initialize->return->failure->mySpi->do->try->mySpi->initialize->return->catch->if->nextSpi->finally->while->throw
KeyPairGenerator.Delegate#initialize(AlgorithmParameterSpec, SecureRandom)::: delegate initialize:::if->spi->initialize->return->failure->mySpi->do->try->mySpi->initialize->return->catch->if->nextSpi->finally->while->if->throw->throw
KeyPairGenerator.Delegate#generateKeyPair()::: delegate generate key pair:::if->return->spi->generateKeyPair->failure->mySpi->do->try->return->mySpi->generateKeyPair->catch->if->nextSpi->finally->while->throw
KeyPairGeneratorSpi#initialize(int, SecureRandom):::Initializes the key pair generator for a certain keysize, using the default parameter set.:::
KeyPairGeneratorSpi#initialize(AlgorithmParameterSpec, SecureRandom):::Initializes the key pair generator using the specified parameter set and user-provided source of randomness:::throw->new->UnsupportedOperationException
KeyPairGeneratorSpi#generateKeyPair():::Generates a key pair:::
KeyRep#readResolve():::Resolve the Key object:::try->if->RAW->equals->return->new->SecretKeySpec->else->if->X509->equals->f->KeyFactory->getInstance->return->f->new->X509EncodedKeySpec->generatePublic->else->if->PKCS8->equals->f->KeyFactory->getInstance->return->f->new->PKCS8EncodedKeySpec->generatePrivate->else->throw->new->NotSerializableException->catch->throw->nse->new->NotSerializableException->nse->initCause->throw->finally
KeyStore.LoadStoreParameter#getProtectionParameter():::Gets the parameter used to protect keystore data.:::
KeyStore.PasswordProtection#getProtectionAlgorithm():::Gets the name of the protection algorithm:::return
KeyStore.PasswordProtection#getProtectionParameters():::Gets the parameters supplied for the protection algorithm.:::return
KeyStore.PasswordProtection#getPassword():::Gets the password:::if->throw->new->IllegalStateException->return
KeyStore.PasswordProtection#destroy():::Clears the password.:::if->Arrays->fill
KeyStore.PasswordProtection#isDestroyed():::Determines if password has been cleared.:::return
KeyStore.CallbackHandlerProtection#getCallbackHandler():::Returns the CallbackHandler.:::return
KeyStore.Entry#getAttributes():::Retrieves the attributes associated with an entry.:::return->Collections->emptySet
KeyStore.Entry.Attribute#getName():::Returns the attribute's name.:::
KeyStore.Entry.Attribute#getValue():::Returns the attribute's value:::
KeyStore.PrivateKeyEntry#getPrivateKey():::Gets the PrivateKey from this entry.:::return
KeyStore.PrivateKeyEntry#getCertificateChain():::Gets the Certificate chain from this entry:::return->chain->clone
KeyStore.PrivateKeyEntry#getCertificate():::Gets the end entity Certificate from the certificate chain in this entry.:::return
KeyStore.PrivateKeyEntry#getAttributes():::Retrieves the attributes associated with an entry.:::return
KeyStore.PrivateKeyEntry#toString():::Returns a string representation of this PrivateKeyEntry.:::sb->new->StringBuilder->sb->append->foreach->sb->append->sb->append->return->sb->toString
KeyStore.SecretKeyEntry#getSecretKey():::Gets the SecretKey from this entry.:::return
KeyStore.SecretKeyEntry#getAttributes():::Retrieves the attributes associated with an entry.:::return
KeyStore.SecretKeyEntry#toString():::Returns a string representation of this SecretKeyEntry.:::return->sKey->getAlgorithm
KeyStore.TrustedCertificateEntry#getTrustedCertificate():::Gets the trusted Certficate from this entry.:::return
KeyStore.TrustedCertificateEntry#getAttributes():::Retrieves the attributes associated with an entry.:::return
KeyStore.TrustedCertificateEntry#toString():::Returns a string representation of this TrustedCertificateEntry.:::return->cert->toString
KeyStore#getProviderName()::: key store get provider name:::return->provider->getName
KeyStore#getInstance(String):::Returns a keystore object of the specified type:::Objects->requireNonNull->try->objs->Security->getImpl->return->new->KeyStore->catch->throw->new->KeyStoreException->throw->new->KeyStoreException->finally
KeyStore#getInstance(String, String):::Returns a keystore object of the specified type:::Objects->requireNonNull->if->provider->length->throw->new->IllegalArgumentException->try->objs->Security->getImpl->return->new->KeyStore->catch->throw->new->KeyStoreException->finally
KeyStore#getInstance(String, Provider):::Returns a keystore object of the specified type:::Objects->requireNonNull->if->throw->new->IllegalArgumentException->try->objs->Security->getImpl->return->new->KeyStore->catch->throw->new->KeyStoreException->finally
KeyStore#getDefaultType():::Returns the default keystore type as specified by the keystore.type security property, or the string "jks" (acronym for "Java keystore") if no such property exists:::kstype->AccessController->new->PrivilegedAction<>->doPrivileged->if->return
KeyStore#getProvider():::Returns the provider of this keystore.:::return
KeyStore#getType():::Returns the type of this keystore.:::return
KeyStore#getKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineGetKey
KeyStore#getCertificateChain(String):::Returns the certificate chain associated with the given alias:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineGetCertificateChain
KeyStore#getCertificate(String):::Returns the certificate associated with the given alias:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineGetCertificate
KeyStore#getCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineGetCreationDate
KeyStore#setKeyEntry(String, Key, char[], Certificate[]):::Assigns the given key to the given alias, protecting it with the given password:::if->throw->new->KeyStoreException->if->throw->new->IllegalArgumentException->keyStoreSpi->engineSetKeyEntry
KeyStore#setKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::if->throw->new->KeyStoreException->keyStoreSpi->engineSetKeyEntry
KeyStore#setCertificateEntry(String, Certificate):::Assigns the given trusted certificate to the given alias:::if->throw->new->KeyStoreException->keyStoreSpi->engineSetCertificateEntry
KeyStore#deleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::if->throw->new->KeyStoreException->keyStoreSpi->engineDeleteEntry
KeyStore#aliases():::Lists all the alias names of this keystore.:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineAliases
KeyStore#containsAlias(String):::Checks if the given alias exists in this keystore.:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineContainsAlias
KeyStore#size():::Retrieves the number of entries in this keystore.:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineSize
KeyStore#isKeyEntry(String):::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineIsKeyEntry
KeyStore#isCertificateEntry(String):::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineIsCertificateEntry
KeyStore#getCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::if->throw->new->KeyStoreException->return->keyStoreSpi->engineGetCertificateAlias
KeyStore#store(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.:::if->throw->new->KeyStoreException->keyStoreSpi->engineStore
KeyStore#store(LoadStoreParameter):::Stores this keystore using the given LoadStoreParameter.:::if->throw->new->KeyStoreException->keyStoreSpi->engineStore
KeyStore#load(InputStream, char[]):::Loads this KeyStore from the given input stream:::keyStoreSpi->engineLoad
KeyStore#load(LoadStoreParameter):::Loads this keystore using the given LoadStoreParameter:::keyStoreSpi->engineLoad
KeyStore#getEntry(String, ProtectionParameter):::Gets a keystore Entry for the specified alias with the specified protection parameter.:::if->throw->new->NullPointerException->if->throw->new->KeyStoreException->return->keyStoreSpi->engineGetEntry
KeyStore#setEntry(String, Entry, ProtectionParameter):::Saves a keystore Entry under the specified alias:::if->throw->new->NullPointerException->if->throw->new->KeyStoreException->keyStoreSpi->engineSetEntry
KeyStore#entryInstanceOf(String, Class):::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.:::if->throw->new->NullPointerException->if->throw->new->KeyStoreException->return->keyStoreSpi->engineEntryInstanceOf
KeyStore#getInstance(File, char[]):::Returns a loaded keystore object of the appropriate keystore type:::return->getInstance
KeyStore#getInstance(File, LoadStoreParameter):::Returns a loaded keystore object of the appropriate keystore type:::return->getInstance
KeyStore#getInstance(File, char[], LoadStoreParameter, boolean)::: key store get instance:::if->throw->new->NullPointerException->if->file->isFile->throw->new->IllegalArgumentException->keystore->try->dataStream->new->FileInputStream->new->BufferedInputStream->new->DataInputStream->dataStream->mark->foreach->Security->getAlgorithms->objs->try->Security->getImpl->impl->if->impl->engineProbe->if->kdebug->println->new->KeyStore->break->catch->if->kdebug->println->if->kdebug->println->finally->dataStream->reset->if->dataStream->reset->if->keystore->load->else->engineLoad->return->catch->finally->throw->new->KeyStoreException
KeyStore.Builder#getKeyStore():::Returns the KeyStore described by this object.:::
KeyStore.Builder#getProtectionParameter(String):::Returns the ProtectionParameters that should be used to obtain the KeyStore.Entry Entry with the given alias:::
KeyStore.Builder#newInstance(KeyStore, ProtectionParameter):::Returns a new Builder that encapsulates the given KeyStore:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->return->new->Builder
KeyStore.Builder#newInstance(String, Provider, File, ProtectionParameter):::Returns a new Builder object:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->if->file->isFile->throw->new->IllegalArgumentException->return->AccessController->getContext->new->FileBuilder
KeyStore.Builder#newInstance(File, ProtectionParameter):::Returns a new Builder object:::return->newInstance
KeyStore.Builder.FileBuilder#getKeyStore()::: file builder get key store:::if->return->if->throw->new->KeyStoreException->action->new->PrivilegedExceptionAction<KeyStore>->try->AccessController->doPrivileged->return->catch->e->getCause->throw->new->KeyStoreException->finally
KeyStore.Builder.FileBuilder#getProtectionParameter(String)::: file builder get protection parameter:::if->throw->new->NullPointerException->if->throw->new->IllegalStateException->return
KeyStore.Builder#newInstance(String, Provider, ProtectionParameter):::Returns a new Builder object:::if->throw->new->NullPointerException->context->AccessController->getContext->return->new->Builder
KeyStore.SimpleLoadStoreParameter#getProtectionParameter()::: simple load store parameter get protection parameter:::return
KeyStoreSpi#engineGetKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it:::
KeyStoreSpi#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias:::
KeyStoreSpi#engineGetCertificate(String):::Returns the certificate associated with the given alias:::
KeyStoreSpi#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::
KeyStoreSpi#engineSetKeyEntry(String, Key, char[], Certificate[]):::Assigns the given key to the given alias, protecting it with the given password:::
KeyStoreSpi#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::
KeyStoreSpi#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias:::
KeyStoreSpi#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::
KeyStoreSpi#engineAliases():::Lists all the alias names of this keystore.:::
KeyStoreSpi#engineContainsAlias(String):::Checks if the given alias exists in this keystore.:::
KeyStoreSpi#engineSize():::Retrieves the number of entries in this keystore.:::
KeyStoreSpi#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.:::
KeyStoreSpi#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.:::
KeyStoreSpi#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::
KeyStoreSpi#engineStore(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.:::
KeyStoreSpi#engineStore(KeyStore.LoadStoreParameter):::Stores this keystore using the given KeyStore.LoadStoreParmeter.:::throw->new->UnsupportedOperationException
KeyStoreSpi#engineLoad(InputStream, char[]):::Loads the keystore from the given input stream:::
KeyStoreSpi#engineLoad(KeyStore.LoadStoreParameter):::Loads the keystore using the given KeyStore.LoadStoreParameter:::engineLoad
KeyStoreSpi#engineLoad(InputStream, KeyStore.LoadStoreParameter)::: key store spi engine load:::if->engineLoad->return->protection->param->getProtectionParameter->password->if->getPassword->else->if->handler->getCallbackHandler->callback->new->PasswordCallback->try->handler->new->CallbackArr->handle->catch->throw->new->NoSuchAlgorithmException->finally->callback->getPassword->callback->clearPassword->if->throw->new->NoSuchAlgorithmException->else->throw->new->NoSuchAlgorithmException->engineLoad->return
KeyStoreSpi#engineGetEntry(String, KeyStore.ProtectionParameter):::Gets a KeyStore.Entry for the specified alias with the specified protection parameter.:::if->engineContainsAlias->return->if->if->engineIsCertificateEntry->return->engineGetCertificate->new->KeyStore.TrustedCertificateEntry->else->throw->new->UnrecoverableKeyException->if->if->engineIsCertificateEntry->throw->new->UnsupportedOperationException->else->if->engineIsKeyEntry->pp->if->pp->getProtectionAlgorithm->throw->new->KeyStoreException->password->pp->getPassword->key->engineGetKey->if->chain->engineGetCertificateChain->return->new->KeyStore.PrivateKeyEntry->else->if->return->new->KeyStore.SecretKeyEntry->throw->new->UnsupportedOperationException
KeyStoreSpi#engineSetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter):::Saves a KeyStore.Entry under the specified alias:::if->throw->new->KeyStoreException->pProtect->if->if->pProtect->getProtectionAlgorithm->throw->new->KeyStoreException->if->if->pProtect->getPassword->throw->new->KeyStoreException->else->tce->tce->getTrustedCertificate->engineSetCertificateEntry->return->else->if->if->pProtect->getPassword->throw->new->KeyStoreException->else->getPrivateKey->pProtect->getPassword->getCertificateChain->engineSetKeyEntry->return->else->if->if->pProtect->getPassword->throw->new->KeyStoreException->else->getSecretKey->pProtect->getPassword->engineSetKeyEntry->return->throw->entry->getClass->getName->new->KeyStoreException
KeyStoreSpi#engineEntryInstanceOf(String, Class):::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.:::if->return->engineIsCertificateEntry->if->return->engineIsKeyEntry->engineGetCertificate->if->return->engineIsKeyEntry->engineGetCertificate->return
KeyStoreSpi#engineProbe(InputStream):::Probes the specified input stream to determine whether it contains a keystore that is supported by this implementation, or not.:::if->throw->new->NullPointerException->return
MessageDigest#getInstance(String):::Returns a MessageDigest object that implements the specified digest algorithm:::Objects->requireNonNull->try->md->objs->Security->getImpl->if->else->new->Delegate->if->pdebug->getName->println->return->catch->throw->new->NoSuchAlgorithmException->finally
MessageDigest#getInstance(String, String):::Returns a MessageDigest object that implements the specified digest algorithm:::Objects->requireNonNull->if->provider->length->throw->new->IllegalArgumentException->objs->Security->getImpl->if->md->return->else->delegate->new->Delegate->return
MessageDigest#getInstance(String, Provider):::Returns a MessageDigest object that implements the specified digest algorithm:::Objects->requireNonNull->if->throw->new->IllegalArgumentException->objs->Security->getImpl->if->md->return->else->delegate->new->Delegate->return
MessageDigest#getProvider():::Returns the provider of this message digest object.:::return
MessageDigest#update(byte):::Updates the digest using the specified byte.:::engineUpdate
MessageDigest#update(byte[], int, int):::Updates the digest using the specified array of bytes, starting at the specified offset.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->engineUpdate
MessageDigest#update(byte[]):::Updates the digest using the specified array of bytes.:::engineUpdate
MessageDigest#update(ByteBuffer):::Update the digest using the specified ByteBuffer:::if->throw->new->NullPointerException->engineUpdate
MessageDigest#digest():::Completes the hash computation by performing final operations such as padding:::result->engineDigest->return
MessageDigest#digest(byte[], int, int):::Completes the hash computation by performing final operations such as padding:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->numBytes->engineDigest->return
MessageDigest#digest(byte[]):::Performs a final update on the digest using the specified array of bytes, then completes the digest computation:::update->return->digest
MessageDigest#getProviderName()::: message digest get provider name:::return->provider->getName
MessageDigest#toString():::Returns a string representation of this message digest object.:::baos->new->ByteArrayOutputStream->p->new->PrintStream->p->getProviderName->print->switch->p->print->break->p->print->break->p->println->return->baos->toString
MessageDigest#isEqual(byte[], byte[]):::Compares two digests for equality:::if->return->if->return->if->return->result->for->i->return
MessageDigest#reset():::Resets the digest for further use.:::engineReset
MessageDigest#getAlgorithm():::Returns a string that identifies the algorithm, independent of implementation details:::return
MessageDigest#getDigestLength():::Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable.:::digestLen->engineGetDigestLength->if->try->md->clone->digest->md->digest->return->catch->return->finally->return
MessageDigest#clone():::Returns a clone if the implementation is cloneable.:::if->return->super->clone->else->throw->new->CloneNotSupportedException
MessageDigest.Delegate#clone():::Returns a clone if the delegate is cloneable.:::if->digestSpiClone->digestSpi->clone->that->new->Delegate->return->else->throw->new->CloneNotSupportedException
MessageDigest.Delegate#engineGetDigestLength()::: delegate engine get digest length:::return->digestSpi->engineGetDigestLength
MessageDigest.Delegate#engineUpdate(byte)::: delegate engine update:::digestSpi->engineUpdate
MessageDigest.Delegate#engineUpdate(byte[], int, int)::: delegate engine update:::digestSpi->engineUpdate
MessageDigest.Delegate#engineUpdate(ByteBuffer)::: delegate engine update:::digestSpi->engineUpdate
MessageDigest.Delegate#engineUpdate(SecretKey)::: delegate engine update:::if->engineUpdate->else->throw->new->UnsupportedOperationException
MessageDigest.Delegate#engineDigest()::: delegate engine digest:::return->digestSpi->engineDigest
MessageDigest.Delegate#engineDigest(byte[], int, int)::: delegate engine digest:::return->digestSpi->engineDigest
MessageDigest.Delegate#engineReset()::: delegate engine reset:::digestSpi->engineReset
MessageDigestSpi#engineGetDigestLength():::Returns the digest length in bytes:::return
MessageDigestSpi#engineUpdate(byte):::Updates the digest using the specified byte.:::
MessageDigestSpi#engineUpdate(byte[], int, int):::Updates the digest using the specified array of bytes, starting at the specified offset.:::
MessageDigestSpi#engineUpdate(ByteBuffer):::Update the digest using the specified ByteBuffer:::if->input->hasRemaining->return->if->input->hasArray->b->input->array->ofs->input->arrayOffset->pos->input->position->lim->input->limit->engineUpdate->input->position->else->len->input->remaining->n->JCAUtil->getTempArraySize->if->new->byteArr->while->chunk->Math->min->input->get->engineUpdate
MessageDigestSpi#engineDigest():::Completes the hash computation by performing final operations such as padding:::
MessageDigestSpi#engineDigest(byte[], int, int):::Completes the hash computation by performing final operations such as padding:::digest->engineDigest->if->throw->new->DigestException->if->throw->new->DigestException->System->arraycopy->return
MessageDigestSpi#engineReset():::Resets the digest for further use.:::
MessageDigestSpi#clone():::Returns a clone if the implementation is cloneable.:::if->return->super->clone->else->throw->new->CloneNotSupportedException
Permission#checkGuard(Object):::Implements the guard interface for a permission:::sm->System->getSecurityManager->if->sm->checkPermission
Permission#implies(Permission)::: permission implies:::
Permission#equals(Object)::: permission equals:::
Permission#hashCode()::: permission hash code:::
Permission#getName()::: permission get name:::return
Permission#getActions()::: permission get actions:::
Permission#newPermissionCollection()::: permission new permission collection:::return
Permission#toString():::Returns a string describing this Permission:::actions->getActions->if->actions->length->return->getClass->getName->else->return->getClass->getName
PermissionCollection#add(Permission):::Adds a permission object to the current collection of permission objects.:::
PermissionCollection#implies(Permission):::Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection.:::
PermissionCollection#elements():::Returns an enumeration of all the Permission objects in the collection.:::
PermissionCollection#elementsAsStream():::Returns a stream of all the Permission objects in the collection:::characteristics->isReadOnly->return->StreamSupport->Spliterators->elements->asIterator->spliteratorUnknownSize->stream
PermissionCollection#setReadOnly():::Marks this PermissionCollection object as "readonly":::
PermissionCollection#isReadOnly():::Returns true if this PermissionCollection object is marked as readonly:::return
PermissionCollection#toString():::Returns a string describing this PermissionCollection object, providing information about all the permissions it contains:::enum_->elements->sb->new->StringBuilder->sb->super->toString->append->while->enum_->hasMoreElements->try->sb->append->sb->enum_->nextElement->toString->append->sb->append->catch->finally->sb->append->return->sb->toString
Permissions#add(Permission):::Adds a permission object to the PermissionCollection for the class the permission belongs to:::if->isReadOnly->throw->new->SecurityException->pc->getPermissionCollection->pc->add->if->if
Permissions#implies(Permission):::Checks to see if this object's PermissionCollection for permissions of the specified permission's class implies the permissions expressed in the permission object:::if->return->else->pc->getPermissionCollection->if->return->pc->implies->else->return
Permissions#elements():::Returns an enumeration of all the Permission objects in all the PermissionCollections in this Permissions object.:::return->permsMap->values->iterator->new->PermissionsEnumerator
Permissions#getPermissionCollection(Permission, boolean):::Gets the PermissionCollection in this Permissions object for permissions whose type is the same as that of p:::c->p->getClass->if->return->permsMap->get->return->permsMap->new->java.util.function.Function<>->computeIfAbsent
Permissions#getUnresolvedPermissions(Permission):::Resolves any unresolved permissions of type p.:::uc->permsMap->get->if->return->unresolvedPerms->uc->getUnresolvedPermissions->if->return->certs->signers->p->getClass->getSigners->n->if->for->j->new->java.security.cert.CertificateArr->for->j->pc->synchronized->len->unresolvedPerms->size->for->i->return
Permissions#writeObject(ObjectOutputStream)::: permissions write object:::perms->permsMap->size->new->Hashtable<>->perms->putAll->pfields->out->putFields->pfields->put->pfields->put->out->writeFields
Permissions#readObject(ObjectInputStream)::: permissions read object:::gfields->in->readFields->gfields->get->perms->gfields->get->perms->size->new->ConcurrentHashMap<>->permsMap->putAll->uc->permsMap->get->uc->elements->hasMoreElements
PermissionsEnumerator#hasMoreElements()::: permissions enumerator has more elements:::if->return->if->permset->hasMoreElements->return->getNextEnumWithMore->return
PermissionsEnumerator#nextElement()::: permissions enumerator next element:::if->hasMoreElements->return->permset->nextElement->else->throw->new->NoSuchElementException
PermissionsEnumerator#getNextEnumWithMore()::: permissions enumerator get next enum with more:::while->perms->hasNext->pc->perms->next->next->pc->elements->if->next->hasMoreElements->return->return
PermissionsHash#add(Permission):::Adds a permission to the PermissionsHash.:::permsMap->put
PermissionsHash#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".:::p->permsMap->get->if->foreach->permsMap->values->if->p_->implies->return->return->else->return
PermissionsHash#elements():::Returns an enumeration of all the Permission objects in the container.:::return->permsMap->elements
PermissionsHash#writeObject(ObjectOutputStream)::: permissions hash write object:::perms->permsMap->size->new->Hashtable<>->perms->putAll->pfields->out->putFields->pfields->put->out->writeFields
PermissionsHash#readObject(ObjectInputStream)::: permissions hash read object:::gfields->in->readFields->perms->gfields->get->perms->size->new->ConcurrentHashMap<>->permsMap->putAll
PKCS12Attribute#getName():::Returns the attribute's ASN.1 Object Identifier represented as a list of dot-separated integers.:::return
PKCS12Attribute#getValue():::Returns the attribute's ASN.1 DER-encoded value as a string:::return
PKCS12Attribute#getEncoded():::Returns the attribute's ASN.1 DER encoding.:::return->encoded->clone
PKCS12Attribute#equals(Object):::Compares this PKCS12Attribute and a specified object for equality.:::if->return->if->return->return->Arrays->equals
PKCS12Attribute#hashCode():::Returns the hashcode for this PKCS12Attribute:::h->if->Arrays->hashCode->return
PKCS12Attribute#toString():::Returns a string representation of this PKCS12Attribute.:::return
PKCS12Attribute#encode(ObjectIdentifier, String[])::: s12 attribute encode:::attribute->new->DerOutputStream->attribute->putOID->attrContent->new->DerOutputStream->foreach->if->COLON_SEPARATED_HEX_PAIRS->matcher->matches->bytes->value->replace->new->BigInteger->toByteArray->if->Arrays->copyOfRange->attrContent->putOctetString->else->attrContent->putUTF8String->attribute->write->attributeValue->new->DerOutputStream->attributeValue->write->return->attributeValue->toByteArray
PKCS12Attribute#parse(byte[])::: s12 attribute parse:::attributeValue->new->DerInputStream->attrSeq->attributeValue->getSequence->type->getOID->attrContent->toByteArray->new->DerInputStream->attrValueSet->attrContent->getSet->values->new->StringArr->printableString->for->i->type->toString->Arrays->toString
Policy#isSet():::package private for AccessControlContext and ProtectionDomain:::pi->return
Policy#checkPermission(String)::: policy check permission:::sm->System->getSecurityManager->if->sm->new->SecurityPermission->checkPermission
Policy#getPolicy():::Returns the installed Policy object:::sm->System->getSecurityManager->if->sm->checkPermission->return->getPolicyNoCheck
Policy#getPolicyNoCheck():::Returns the installed Policy object, skipping the security check:::pi->if->synchronized->if->return->loadPolicyProvider->return
Policy#loadPolicyProvider():::Loads and instantiates a Policy implementation specified by the policy.provider security property:::policyProvider->AccessController->new->PrivilegedAction<>->doPrivileged->if->policyProvider->isEmpty->policyProvider->equals->polFile->new->sun.security.provider.PolicyFile->new->PolicyInfo->return->polFile->new->sun.security.provider.PolicyFile->new->PolicyInfo->pol->AccessController->new->PrivilegedAction<>->doPrivileged->if->if->debug->println->new->PolicyInfo->return
Policy#setPolicy(Policy):::Sets the system-wide Policy object:::sm->System->getSecurityManager->if->sm->new->SecurityPermission->checkPermission->if->initPolicy->synchronized->new->PolicyInfo
Policy#initPolicy(Policy):::Initialize superclass state such that a legacy provider can handle queries for itself.:::policyDomain->AccessController->new->PrivilegedAction<>->doPrivileged->policyPerms->synchronized->if->new->WeakHashMap<>->if->policyDomain->getCodeSource->pol->if->pol->getPermissions->if->new->Permissions->policyPerms->add->synchronized->put->return
Policy#getInstance(String, Policy.Parameters):::Returns a Policy object of the specified type:::Objects->requireNonNull->checkPermission->try->instance->GetInstance->getInstance->return->new->PolicyDelegate->catch->return->handleException->finally
Policy#getInstance(String, Policy.Parameters, String):::Returns a Policy object of the specified type:::Objects->requireNonNull->if->provider->length->throw->new->IllegalArgumentException->checkPermission->try->instance->GetInstance->getInstance->return->new->PolicyDelegate->catch->return->handleException->finally
Policy#getInstance(String, Policy.Parameters, Provider):::Returns a Policy object of the specified type:::Objects->requireNonNull->if->throw->new->IllegalArgumentException->checkPermission->try->instance->GetInstance->getInstance->return->new->PolicyDelegate->catch->return->handleException->finally
Policy#handleException(NoSuchAlgorithmException)::: policy handle exception:::cause->nsae->getCause->if->throw->throw
Policy#getProvider():::Return the Provider of this Policy:::return
Policy#getType():::Return the type of this Policy:::return
Policy#getParameters():::Return Policy parameters:::return
Policy#getPermissions(CodeSource):::Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource:::return
Policy#getPermissions(ProtectionDomain):::Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain:::pc->if->return->new->Permissions->if->initPolicy->synchronized->pdMapping->get->if->perms->new->Permissions->synchronized->for->e->pc->elements->e->hasMoreElements->return->domain->getCodeSource->getPermissions->if->new->Permissions->domain->getPermissions->addStaticPerms->return
Policy#addStaticPerms(PermissionCollection, PermissionCollection):::add static permissions to provided permission collection:::if->synchronized->e->statics->elements->while->e->hasMoreElements->perms->e->nextElement->add
Policy#implies(ProtectionDomain, Permission):::Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted.:::pc->if->initPolicy->synchronized->pdMapping->get->if->return->pc->implies->getPermissions->if->return->synchronized->pdMapping->put->return->pc->implies
Policy#refresh():::Refreshes/reloads the policy configuration:::
Policy.PolicyDelegate#getType()::: policy delegate get type:::return
Policy.PolicyDelegate#getParameters()::: policy delegate get parameters:::return
Policy.PolicyDelegate#getProvider()::: policy delegate get provider:::return
Policy.PolicyDelegate#getPermissions(CodeSource)::: policy delegate get permissions:::return->spi->engineGetPermissions
Policy.PolicyDelegate#getPermissions(ProtectionDomain)::: policy delegate get permissions:::return->spi->engineGetPermissions
Policy.PolicyDelegate#implies(ProtectionDomain, Permission)::: policy delegate implies:::return->spi->engineImplies
Policy.PolicyDelegate#refresh()::: policy delegate refresh:::spi->engineRefresh
Policy.UnsupportedEmptyCollection#add(Permission):::Adds a permission object to the current collection of permission objects.:::perms->add
Policy.UnsupportedEmptyCollection#implies(Permission):::Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection.:::return->perms->implies
Policy.UnsupportedEmptyCollection#elements():::Returns an enumeration of all the Permission objects in the collection.:::return->perms->elements
PolicySpi#engineImplies(ProtectionDomain, Permission):::Check whether the policy has granted a Permission to a ProtectionDomain.:::
PolicySpi#engineRefresh():::Refreshes/reloads the policy configuration:::
PolicySpi#engineGetPermissions(CodeSource):::Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource:::return
PolicySpi#engineGetPermissions(ProtectionDomain):::Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain:::return
Principal#equals(Object):::Compares this principal to the specified object:::
Principal#toString():::Returns a string representation of this principal.:::
Principal#hashCode():::Returns a hashcode for this principal.:::
Principal#getName():::Returns the name of this principal.:::
Principal#implies(Subject):::Returns true if the specified subject is implied by this principal.:::if->return->return->subject->getPrincipals->contains
PrivilegedAction#run():::Performs the computation:::
PrivilegedActionException#getException():::Returns the exception thrown by the privileged computation that resulted in this PrivilegedActionException:::return
PrivilegedActionException#getCause():::Returns the cause of this exception (the exception thrown by the privileged computation that resulted in this PrivilegedActionException).:::return
PrivilegedActionException#toString()::: privileged action exception to string:::s->getClass->getName->return->exception->toString
PrivilegedExceptionAction#run()::: privileged exception action run:::
ProtectionDomain.JavaSecurityAccessImpl#doIntersectionPrivilege(PrivilegedAction, AccessControlContext, AccessControlContext)::: java security access impl do intersection privilege:::if->throw->new->NullPointerException->return->AccessController->getCombinedACC->doPrivileged
ProtectionDomain.JavaSecurityAccessImpl#doIntersectionPrivilege(PrivilegedAction, AccessControlContext)::: java security access impl do intersection privilege:::return->AccessController->getContext->doIntersectionPrivilege
ProtectionDomain.JavaSecurityAccessImpl#getProtectDomains(AccessControlContext)::: java security access impl get protect domains:::return->context->getContext
ProtectionDomain.JavaSecurityAccessImpl#getCombinedACC(AccessControlContext, AccessControlContext)::: java security access impl get combined c:::acc->stack->getCombiner->new->AccessControlContext->return->stack->getContext->new->AccessControlContext->optimize
ProtectionDomain.JavaSecurityAccessImpl#getProtectionDomainCache()::: java security access impl get protection domain cache:::return->new->ProtectionDomainCache
ProtectionDomain#getCodeSource():::Returns the CodeSource of this domain.:::return
ProtectionDomain#getClassLoader():::Returns the ClassLoader of this domain.:::return
ProtectionDomain#getPrincipals():::Returns an array of principals for this domain.:::return->clone
ProtectionDomain#getPermissions():::Returns the static permissions granted to this domain.:::return
ProtectionDomain#staticPermissionsOnly():::Returns true if this domain contains only static permissions and does not check the current Policy at the time of permission checking.:::return
ProtectionDomain#implies(Permission):::Check and see if this ProtectionDomain implies the permissions expressed in the Permission object:::if->return->if->Policy->getPolicyNoCheck->implies->return->if->return->permissions->implies->return
ProtectionDomain#impliesWithAltFilePerm(Permission):::This method has almost the same logic flow as #implies but it ensures some level of FilePermission compatibility after JDK-8164705:::if->getClass->return->implies->if->return->p2->p2Calculated->if->policy->Policy->getPolicyNoCheck->if->return->policy->implies->else->if->policy->implies->return->FilePermCompat->newPermUsingAltPath->if->policy->implies->return->if->if->permissions->implies->return->else->if->FilePermCompat->newPermUsingAltPath->if->return->permissions->implies->return
ProtectionDomain#impliesCreateAccessControlContext()::: protection domain implies create access control context:::return->implies
ProtectionDomain#toString():::Convert a ProtectionDomain to a String.:::pals->if->palBuf->new->StringBuilder->for->i->palBuf->toString->pc->Policy->isSet->seeAllp->mergePermissions->getPermissions->return
ProtectionDomain#seeAllp():::Return true (merge policy permissions) in the following cases:  :::sm->System->getSecurityManager->if->return->else->if->if->sm->getClass->getClassLoader->Policy->getPolicyNoCheck->getClass->getClassLoader->return->else->try->sm->checkPermission->return->catch->finally->return
ProtectionDomain#mergePermissions()::: protection domain merge permissions:::if->return->perms->new->java.security.PrivilegedAction<>->doPrivileged->mergedPerms->new->Permissions->swag->vcap->e->pdVector->new->ArrayList<>->plVector->new->ArrayList<>->if->synchronized->permissions->elements->while->e->hasMoreElements->pdVector->e->nextElement->add->if->synchronized->perms->elements->while->e->hasMoreElements->plVector->e->nextElement->add->if->synchronized->permissions->elements->while->e->hasMoreElements->pdp->e->nextElement->pdpClass->pdp->getClass->pdpActions->pdp->getActions->pdpName->pdp->getName->for->i->plVector->size->if->for->i->plVector->size->if->for->i->pdVector->size->return
Provider#newInstanceUtil(Class, Class, Object)::: provider new instance util:::if->con->clazz->getConstructor->return->con->newInstance->else->try->con->clazz->getConstructor->return->con->newInstance->catch->if->try->con->clazz->getConstructor->return->con->newInstance->catch->nsme->addSuppressed->throw->finally->else->throw->finally
Provider#parseVersionStr(String)::: provider parse version str:::try->firstDotIdx->s->indexOf->nextDotIdx->s->indexOf->if->s->substring->endIdx->s->indexOf->if->s->substring->s->indexOf->if->s->substring->return->Double->parseDouble->catch->return->finally
Provider#configure(String):::Apply the supplied configuration argument to this provider instance and return the configured provider:::throw->new->UnsupportedOperationException
Provider#isConfigured():::Check if this provider instance has been configured.:::return
Provider#getName():::Returns the name of this provider.:::return
Provider#getVersion():::Returns the version number for this provider.:::return
Provider#getVersionStr():::Returns the version string for this provider.:::return
Provider#getInfo():::Returns a human-readable description of the provider and its services:::return
Provider#toString():::Returns a string with the name and the version string of this provider.:::return
Provider#clear():::Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider:::check->if->debug->println->implClear
Provider#load(InputStream):::Reads a property list (key and element pairs) from the input stream.:::check->if->debug->println->tempProperties->new->Properties->tempProperties->load->implPutAll
Provider#putAll(Map):::Copies all of the mappings from the specified Map to this provider:::check->if->debug->println->implPutAll
Provider#entrySet():::Returns an unmodifiable Set view of the property entries contained in this Provider.:::checkInitialized->if->if->Collections->unmodifiableMap->entrySet->else->return->super->entrySet->if->throw->new->RuntimeException->return
Provider#keySet():::Returns an unmodifiable Set view of the property keys contained in this provider.:::checkInitialized->return->Collections->super->keySet->unmodifiableSet
Provider#values():::Returns an unmodifiable Collection view of the property values contained in this provider.:::checkInitialized->return->Collections->super->values->unmodifiableCollection
Provider#put(Object, Object):::Sets the key property to have the specified value:::check->if->debug->println->return->implPut
Provider#putIfAbsent(Object, Object):::If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value:::check->if->debug->println->return->implPutIfAbsent
Provider#remove(Object):::Removes the key property (and its corresponding value):::check->if->debug->println->return->implRemove
Provider#remove(Object, Object):::Removes the entry for the specified key only if it is currently mapped to the specified value:::check->if->debug->println->return->implRemove
Provider#replace(Object, Object, Object):::Replaces the entry for the specified key only if currently mapped to the specified value:::check->if->debug->println->return->implReplace
Provider#replace(Object, Object):::Replaces the entry for the specified key only if it is currently mapped to some value:::check->if->debug->println->return->implReplace
Provider#replaceAll(BiFunction):::Replaces each entry's value with the result of invoking the given function on that entry, in the order entries are returned by an entry set iterator, until all entries have been processed or the function throws an exception:::check->if->debug->println->implReplaceAll
Provider#compute(Object, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping):::check->check->if->debug->println->return->implCompute
Provider#computeIfAbsent(Object, Function):::If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null:::check->check->if->debug->println->return->implComputeIfAbsent
Provider#computeIfPresent(Object, BiFunction):::If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value:::check->check->if->debug->println->return->implComputeIfPresent
Provider#merge(Object, Object, BiFunction):::If the specified key is not already associated with a value or is associated with null, associates it with the given value:::check->check->if->debug->println->return->implMerge
Provider#get(Object)::: provider get:::checkInitialized->return->super->get
Provider#getOrDefault(Object, Object)::: provider get or default:::checkInitialized->return->super->getOrDefault
Provider#forEach(BiConsumer)::: provider for each:::checkInitialized->super->forEach
Provider#keys()::: provider keys:::checkInitialized->return->super->keys
Provider#elements()::: provider elements:::checkInitialized->return->super->elements
Provider#getProperty(String)::: provider get property:::checkInitialized->return->super->getProperty
Provider#checkInitialized()::: provider check initialized:::if->throw->new->IllegalStateException
Provider#check(String)::: provider check:::checkInitialized->security->System->getSecurityManager->if->security->checkSecurityAccess
Provider#putId()::: provider put id:::super->String->valueOf->put->super->String->valueOf->put->super->String->valueOf->put->super->this->getClass->getName->put
Provider#readObject(ObjectInputStream):::Reads the ObjectInputStream for the default serializable fields:::copy->new->HashMap<>->foreach->super->entrySet->copy->entry->getKey->entry->getValue->put->in->defaultReadObject->if->Double->toString->else->parseVersionStr->implClear->putAll
Provider#checkLegacy(Object)::: provider check legacy:::keyString->if->keyString->startsWith->return->if->new->LinkedHashMap<>->return
Provider#implPutAll(Map):::Copies all of the mappings from the specified Map to this provider:::foreach->t->entrySet->e->getKey->e->getValue->implPut
Provider#implRemove(Object)::: provider impl remove:::if->if->checkLegacy->return->legacyStrings->remove->return->super->remove
Provider#implRemove(Object, Object)::: provider impl remove:::if->if->checkLegacy->return->legacyStrings->remove->return->super->remove
Provider#implReplace(Object, Object, Object)::: provider impl replace:::if->if->checkLegacy->return->legacyStrings->replace->return->super->replace
Provider#implReplace(Object, Object)::: provider impl replace:::if->if->checkLegacy->return->legacyStrings->replace->return->super->replace
Provider#implReplaceAll(BiFunction)::: provider impl replace all:::if->new->LinkedHashMap<>->else->legacyStrings->replaceAll->super->replaceAll
Provider#implMerge(Object, Object, BiFunction)::: provider impl merge:::if->if->checkLegacy->return->legacyStrings->merge->return->super->merge
Provider#implCompute(Object, BiFunction)::: provider impl compute:::if->if->checkLegacy->return->legacyStrings->compute->return->super->compute
Provider#implComputeIfAbsent(Object, Function)::: provider impl compute if absent:::if->if->checkLegacy->return->legacyStrings->computeIfAbsent->return->super->computeIfAbsent
Provider#implComputeIfPresent(Object, BiFunction)::: provider impl compute if present:::if->if->checkLegacy->return->legacyStrings->computeIfPresent->return->super->computeIfPresent
Provider#implPut(Object, Object)::: provider impl put:::if->if->checkLegacy->return->legacyStrings->put->return->super->put
Provider#implPutIfAbsent(Object, Object)::: provider impl put if absent:::if->if->checkLegacy->return->legacyStrings->putIfAbsent->return->super->putIfAbsent
Provider#implClear()::: provider impl clear:::if->legacyStrings->clear->if->legacyMap->clear->if->serviceMap->clear->super->clear->putId
Provider.ServiceKey#hashCode()::: service key hash code:::return->type->hashCode->algorithm->hashCode
Provider.ServiceKey#equals(Object)::: service key equals:::if->return->if->return->other->return->equals->equals
Provider.ServiceKey#matches(String, String)::: service key matches:::return
Provider#ensureLegacyParsed():::Ensure all the legacy String properties are fully parsed into service objects.:::if->return->if->new->LinkedHashMap<>->else->legacyMap->clear->foreach->legacyStrings->entrySet->entry->getKey->entry->getValue->parseLegacyPut->removeInvalidServices
Provider#removeInvalidServices(Map):::Remove all invalid services from the Map:::for->t->map->entrySet->iterator->t->hasNext
Provider#getTypeAndAlgorithm(String)::: provider get type and algorithm:::i->key->indexOf->if->if->debug->println->return->type->key->substring->alg->key->substring->return->new->StringArr
Provider#parseLegacyPut(String, String)::: provider parse legacy put:::if->name->toLowerCase->startsWith->stdAlg->aliasKey->name->substring->typeAndAlg->getTypeAndAlgorithm->if->return->type->getEngineName->aliasAlg->intern->key->new->ServiceKey->s->legacyMap->get->if->new->Service->legacyMap->put->legacyMap->new->ServiceKey->put->s->addAlias->else->typeAndAlg->getTypeAndAlgorithm->if->return->i->indexOf->if->type->getEngineName->stdAlg->intern->className->key->new->ServiceKey->s->legacyMap->get->if->new->Service->legacyMap->put->else->attributeValue->type->getEngineName->attributeString->stdAlg->attributeString->substring->intern->attributeName->attributeString->substring->while->attributeName->startsWith->attributeName->substring->attributeName->intern->key->new->ServiceKey->s->legacyMap->get->if->new->Service->legacyMap->put->s->addAttribute
Provider#getService(String, String):::Get the service describing this Provider's implementation of the specified type of this algorithm or alias:::checkInitialized->key->if->key->matches->new->ServiceKey->if->service->serviceMap->get->if->return->ensureLegacyParsed->return->legacyMap->get
Provider#getServices():::Get an unmodifiable Set of all services supported by this Provider.:::checkInitialized->if->if->ensureLegacyParsed->set->new->LinkedHashSet<>->if->set->serviceMap->values->addAll->if->set->legacyMap->values->addAll->Collections->unmodifiableSet->return
Provider#putService(Service):::Add a service:::check->if->debug->println->if->throw->new->NullPointerException->if->s->getProvider->throw->new->IllegalArgumentException->if->new->LinkedHashMap<>->type->s->getType->algorithm->s->getAlgorithm->key->new->ServiceKey->serviceMap->get->implRemoveService->serviceMap->put->foreach->s->getAliases->serviceMap->new->ServiceKey->put->putPropertyStrings
Provider#putPropertyStrings(Service):::Put the string properties for this Service in this Provider's Hashtable.:::type->s->getType->algorithm->s->getAlgorithm->super->s->getClassName->put->foreach->s->getAliases->super->put->foreach->entrySet->key->entry->getKey->super->entry->getValue->put
Provider#removePropertyStrings(Service):::Remove the string properties for this Service from this Provider's Hashtable.:::type->s->getType->algorithm->s->getAlgorithm->super->remove->foreach->s->getAliases->super->remove->foreach->entrySet->key->entry->getKey->super->remove
Provider#removeService(Service):::Remove a service previously added using #putService putService():::check->if->debug->println->if->throw->new->NullPointerException->implRemoveService
Provider#implRemoveService(Service)::: provider impl remove service:::if->return->type->s->getType->algorithm->s->getAlgorithm->key->new->ServiceKey->oldService->serviceMap->get->if->return->serviceMap->remove->foreach->s->getAliases->serviceMap->new->ServiceKey->remove->removePropertyStrings
Provider.UString#hashCode()::: string hash code:::return->lowerString->hashCode
Provider.UString#equals(Object)::: string equals:::if->return->if->return->other->return->lowerString->equals
Provider.UString#toString()::: string to string:::return
Provider.EngineDescription#getConstructorParameterClass()::: engine description get constructor parameter class:::clazz->if->Class->forName->return
Provider#addEngine(String, boolean, String)::: provider add engine:::ed->new->EngineDescription->knownEngines->name->toLowerCase->put->knownEngines->put
Provider#getEngineName(String)::: provider get engine name:::e->knownEngines->get->if->knownEngines->s->toLowerCase->get->return
Provider.Service#isValid()::: service is valid:::return
Provider.Service#addAlias(String)::: service add alias:::if->aliases->isEmpty->new->ArrayList<>->aliases->add
Provider.Service#addAttribute(String, String)::: service add attribute:::if->attributes->isEmpty->new->HashMap<>->attributes->new->UString->put
Provider.Service#getType():::Get the type of this service:::return
Provider.Service#getAlgorithm():::Return the name of the algorithm of this service:::return
Provider.Service#getProvider():::Return the Provider of this service.:::return
Provider.Service#getClassName():::Return the name of the class implementing this service.:::return
Provider.Service#getAliases()::: service get aliases:::return
Provider.Service#getAttribute(String):::Return the value of the specified attribute or null if this attribute is not set for this Service.:::if->throw->new->NullPointerException->return->attributes->new->UString->get
Provider.Service#newInstance(Object):::Return a new instance of the implementation described by this service:::if->if->provider->getService->throw->provider->getName->new->NoSuchAlgorithmException->ctrParamClz->try->cap->knownEngines->get->if->constructorParameter->getClass->else->Class->forName->if->if->throw->new->InvalidParameterException->else->argClass->constructorParameter->getClass->if->ctrParamClz->isAssignableFrom->throw->replace->new->InvalidParameterException->return->getImplClass->newInstanceUtil->catch->throw->throw->provider->getName->e->getCause->new->NoSuchAlgorithmException->throw->provider->getName->new->NoSuchAlgorithmException->finally
Provider.Service#getImplClass()::: service get impl class:::try->ref->clazz->ref->get->if->cl->provider->getClass->getClassLoader->if->Class->forName->else->cl->loadClass->if->Modifier->clazz->getModifiers->isPublic->throw->provider->getName->new->NoSuchAlgorithmException->new->WeakReference<>->return->catch->throw->provider->getName->new->NoSuchAlgorithmException->finally
Provider.Service#supportsParameter(Object):::Test whether this Service can use the specified parameter:::cap->knownEngines->get->if->return->if->throw->new->InvalidParameterException->if->throw->new->InvalidParameterException->if->hasKeyAttributes->return->if->return->key->if->supportsKeyFormat->return->if->supportsKeyClass->return->return
Provider.Service#hasKeyAttributes():::Return whether this service has its supported properties for keys defined:::b->if->synchronized->s->getAttribute->if->s->split->getAttribute->if->classNames->s->split->classList->new->ArrayList<>->foreach->clazz->getKeyClass->if->classList->add->classList->toArray->bool->Boolean->valueOf->return->b->booleanValue
Provider.Service#getKeyClass(String)::: service get key class:::try->return->Class->forName->catch->finally->try->cl->provider->getClass->getClassLoader->if->return->cl->loadClass->catch->finally->return
Provider.Service#supportsKeyFormat(Key)::: service supports key format:::if->return->format->key->getFormat->if->return->foreach->if->supportedFormat->equals->return->return
Provider.Service#supportsKeyClass(Key)::: service supports key class:::if->return->keyClass->key->getClass->foreach->if->clazz->isAssignableFrom->return->return
Provider.Service#toString():::Return a String representation of this service.:::aString->aliases->isEmpty->aliases->toString->attrs->attributes->isEmpty->attributes->toString->return->provider->getName
SecureClassLoader#defineClass(String, byte[], int, int, CodeSource):::Converts an array of bytes into an instance of class Class, with an optional CodeSource:::return->getProtectionDomain->defineClass
SecureClassLoader#defineClass(String, java.nio.ByteBuffer, CodeSource):::Converts a java.nio.ByteBuffer ByteBuffer into an instance of class Class, with an optional CodeSource:::return->getProtectionDomain->defineClass
SecureClassLoader#getPermissions(CodeSource):::Returns the permissions for the given CodeSource object:::check->return->new->Permissions
SecureClassLoader#getProtectionDomain(CodeSource)::: secure class loader get protection domain:::if->return->key->new->CodeSourceKey->return->pdcache->new->Function<>->computeIfAbsent
SecureClassLoader#check()::: secure class loader check:::if->throw->new->SecurityException
SecureClassLoader.CodeSourceKey#hashCode()::: code source key hash code:::locationNoFrag->cs->getLocationNoFragString->return->locationNoFrag->hashCode
SecureClassLoader.CodeSourceKey#equals(Object)::: code source key equals:::if->return->if->return->csk->if->Objects->cs->getLocationNoFragString->getLocationNoFragString->equals->return->return->cs->matchCerts
SecureRandom#getThreadSafe()::: secure random get thread safe:::if->return->else->return->Boolean->provider->getProperty->parseBoolean
SecureRandom#getDefaultPRNG(boolean, byte[])::: secure random get default g:::prng->getPrngAlgorithm->if->new->sun.security.provider.SecureRandom->Providers->getSunProvider->if->engineSetSeed->else->try->random->SecureRandom->getInstance->random->getSecureRandomSpi->random->getProvider->if->engineSetSeed->catch->throw->new->RuntimeException->finally->if->getClass
SecureRandom#getProviderName()::: secure random get provider name:::return->provider->getName
SecureRandom#getInstance(String):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm:::Objects->requireNonNull->instance->GetInstance->getInstance->return->new->SecureRandom
SecureRandom#getInstance(String, String):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm:::Objects->requireNonNull->instance->GetInstance->getInstance->return->new->SecureRandom
SecureRandom#getInstance(String, Provider):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm:::Objects->requireNonNull->instance->GetInstance->getInstance->return->new->SecureRandom
SecureRandom#getInstance(String, SecureRandomParameters):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request:::Objects->requireNonNull->if->throw->new->IllegalArgumentException->instance->GetInstance->getInstance->return->new->SecureRandom
SecureRandom#getInstance(String, SecureRandomParameters, String):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request:::Objects->requireNonNull->if->throw->new->IllegalArgumentException->instance->GetInstance->getInstance->return->new->SecureRandom
SecureRandom#getInstance(String, SecureRandomParameters, Provider):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request:::Objects->requireNonNull->if->throw->new->IllegalArgumentException->instance->GetInstance->getInstance->return->new->SecureRandom
SecureRandom#getSecureRandomSpi():::Returns the SecureRandomSpi of this SecureRandom object.:::return
SecureRandom#getProvider():::Returns the provider of this SecureRandom object.:::return
SecureRandom#getAlgorithm():::Returns the name of the algorithm implemented by this SecureRandom object.:::return->Objects->toString
SecureRandom#toString():::Returns a Human-readable string representation of this SecureRandom.:::return->secureRandomSpi->toString
SecureRandom#getParameters():::Returns the effective SecureRandomParameters for this SecureRandom instance:::return->secureRandomSpi->engineGetParameters
SecureRandom#setSeed(byte[]):::Reseeds this random object with the given seed:::if->secureRandomSpi->engineSetSeed->else->synchronized->secureRandomSpi->engineSetSeed
SecureRandom#setSeed(long):::Reseeds this random object, using the eight bytes contained in the given long seed:::if->longToByteArray->setSeed
SecureRandom#nextBytes(byte[]):::Generates a user-specified number of random bytes.:::if->secureRandomSpi->engineNextBytes->else->synchronized->secureRandomSpi->engineNextBytes
SecureRandom#nextBytes(byte[], SecureRandomParameters):::Generates a user-specified number of random bytes with additional parameters.:::if->throw->new->IllegalArgumentException->if->secureRandomSpi->Objects->requireNonNull->engineNextBytes->else->synchronized->secureRandomSpi->Objects->requireNonNull->engineNextBytes
SecureRandom#next(int):::Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros):::numBytes->b->new->byteArr->next->nextBytes->for->i->return
SecureRandom#getSeed(int):::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself:::seedGen->if->new->SecureRandom->return->seedGen->generateSeed
SecureRandom#generateSeed(int):::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself:::if->throw->new->IllegalArgumentException->if->return->secureRandomSpi->engineGenerateSeed->else->synchronized->return->secureRandomSpi->engineGenerateSeed
SecureRandom#longToByteArray(long):::Helper function to convert a long into a byte array (least significant byte first).:::retVal->new->byteArr->for->i->return
SecureRandom#getPrngAlgorithm():::Gets a default PRNG algorithm by looking through all registered providers:::foreach->Providers->getProviderList->providers->foreach->p->getServices->if->s->getType->equals->return->s->getAlgorithm->return
SecureRandom#getInstanceStrong():::Returns a SecureRandom object that was selected by using the algorithms/providers specified in the securerandom.strongAlgorithms Security property:::property->AccessController->new->PrivilegedAction<>->doPrivileged->if->property->length->throw->new->NoSuchAlgorithmException->remainder->while->m->if->matcher->matches->alg->m->group->prov->m->group->try->if->return->SecureRandom->getInstance->else->return->SecureRandom->getInstance->catch->finally->m->group->else->throw->new->NoSuchAlgorithmException
SecureRandom#reseed():::Reseeds this SecureRandom with entropy input read from its entropy source.:::if->secureRandomSpi->engineReseed->else->synchronized->secureRandomSpi->engineReseed
SecureRandom#reseed(SecureRandomParameters):::Reseeds this SecureRandom with entropy input read from its entropy source with additional parameters:::if->throw->new->IllegalArgumentException->if->secureRandomSpi->engineReseed->else->synchronized->secureRandomSpi->engineReseed
SecureRandomSpi#engineSetSeed(byte[]):::Reseeds this random object with the given seed:::
SecureRandomSpi#engineNextBytes(byte[]):::Generates a user-specified number of random bytes:::
SecureRandomSpi#engineNextBytes(byte[], SecureRandomParameters):::Generates a user-specified number of random bytes with additional parameters:::throw->new->UnsupportedOperationException
SecureRandomSpi#engineGenerateSeed(int):::Returns the given number of seed bytes:::
SecureRandomSpi#engineReseed(SecureRandomParameters):::Reseeds this random object with entropy input read from its entropy source with additional parameters:::throw->new->UnsupportedOperationException
SecureRandomSpi#engineGetParameters():::Returns the effective SecureRandomParameters for this SecureRandom instance.:::return
SecureRandomSpi#toString():::Returns a Human-readable string representation of this SecureRandom.:::return->getClass->getSimpleName
Security#initialize()::: security initialize:::new->Properties->loadedProps->overrideAll->propFile->securityPropFile->if->propFile->exists->is->try->fis->new->FileInputStream->new->BufferedInputStream->props->load->if->sdebug->println->catch->if->sdebug->println->e->printStackTrace->finally->if->try->is->close->catch->if->sdebug->println->finally->if->props->getProperty->equalsIgnoreCase->extraPropFile->System->getProperty->if->extraPropFile->startsWith->extraPropFile->substring->if->new->Properties->if->sdebug->println->if->bis->try->propURL->PropertyExpander->expand->new->File->if->propFile->exists->propFile->getCanonicalPath->new->URL->else->new->URL->propURL->openStream->new->BufferedInputStream->props->load->if->sdebug->println->if->sdebug->println->catch->if->sdebug->println->e->printStackTrace->finally->if->try->bis->close->catch->if->sdebug->println->finally->if->initializeStatic->if->sdebug->println
Security#initializeStatic()::: security initialize static:::props->put->props->put->props->put->props->put->props->put->props->put
Security#securityPropFile(String)::: security security prop file:::sep->return->StaticProperty->javaHome->new->File
Security#getProviderProperty(String):::Looks up providers, and returns the property (and its associated provider) mapping the key, if any:::entry->providers->Providers->getProviderList->providers->for->i->providers->size->return
Security#getProviderProperty(String, Provider):::Returns the property (if any) mapping the key for the given provider.:::prop->provider->getProperty->if->for->e->provider->keys->e->hasMoreElements->return
Security#getAlgorithmProperty(String, String):::Gets a specified property for an algorithm:::entry->getProviderProperty->if->return->else->return
Security#insertProviderAt(Provider, int):::Adds a new provider, at a specified position:::providerName->provider->getName->checkInsertProvider->list->Providers->getFullProviderList->newList->ProviderList->insertAt->if->return->Providers->setProviderList->return->newList->getIndex
Security#addProvider(Provider):::Adds a provider to the next position available:::return->insertProviderAt
Security#removeProvider(String):::Removes the provider with the specified name:::check->list->Providers->getFullProviderList->newList->ProviderList->remove->Providers->setProviderList
Security#getProviders():::Returns an array containing all the installed providers:::return->Providers->getFullProviderList->toArray
Security#getProvider(String):::Returns the provider installed with the specified name, if any:::return->Providers->getProviderList->getProvider
Security#getProviders(String):::Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed:::key->value->index->filter->indexOf->if->else->filter->substring->filter->substring->hashtableFilter->new->Hashtable<>->hashtableFilter->put->return->getProviders
Security#getProviders(Map):::Returns an array containing all installed providers that satisfy the specified selection criteria, or null if no such providers have been installed:::allProviders->Security->getProviders->keySet->filter->keySet->candidates->new->LinkedHashSet<>->if->return->firstSearch->for->ite->keySet->iterator->ite->hasNext->if->candidates->isEmpty->return->candidatesArray->candidates->toArray->result->new->ProviderArr->for->i->return
Security#getSpiClass(String):::Return the Class object for the given engine type (e.g:::clazz->spiMap->get->if->return->try->Class->forName->spiMap->put->return->catch->throw->new->AssertionError->finally
Security#getImpl(String, String, String)::: security get impl:::if->return->GetInstance->getSpiClass->getInstance->toArray->else->return->GetInstance->getSpiClass->getInstance->toArray
Security#getImpl(String, String, String, Object)::: security get impl:::if->return->GetInstance->getSpiClass->getInstance->toArray->else->return->GetInstance->getSpiClass->getInstance->toArray
Security#getImpl(String, String, Provider)::: security get impl:::return->GetInstance->getSpiClass->getInstance->toArray
Security#getImpl(String, String, Provider, Object)::: security get impl:::return->GetInstance->getSpiClass->getInstance->toArray
Security#getProperty(String):::Gets a security property value:::sm->System->getSecurityManager->if->sm->new->SecurityPermission->checkPermission->name->props->getProperty->if->name->trim->return
Security#setProperty(String, String):::Sets a security property value:::check->props->put->invalidateSMCache->spe->new->SecurityPropertyModificationEvent->spe->commit->if->EventHelper->isLoggingSecurity->EventHelper->logSecurityPropertyEvent
Security#invalidateSMCache(String)::: security invalidate cache:::pa->key->equals->pd->key->equals->if->SharedSecrets->getJavaLangAccess->invalidatePackageAccessCache
Security#check(String)::: security check:::security->System->getSecurityManager->if->security->checkSecurityAccess
Security#checkInsertProvider(String)::: security check insert provider:::security->System->getSecurityManager->if->try->security->checkSecurityAccess->catch->try->security->checkSecurityAccess->catch->se1->addSuppressed->throw->finally->finally
Security#getAllQualifyingCandidates(String, String, Provider[])::: security get all qualifying candidates:::filterComponents->getFilterComponents->serviceName->algName->attrName->return->getProvidersNotUsingCache
Security#getProvidersNotUsingCache(String, String, String, String, Provider[])::: security get providers not using cache:::candidates->new->LinkedHashSet<>->for->i->return
Security#isCriterionSatisfied(Provider, String, String, String, String)::: security is criterion satisfied:::key->if->propValue->getProviderProperty->if->standardName->getProviderProperty->if->if->getProviderProperty->if->return->if->return->if->isStandardAttr->return->isConstraintSatisfied->else->return->filterValue->equalsIgnoreCase
Security#isStandardAttr(String)::: security is standard attr:::if->attribute->equalsIgnoreCase->return->if->attribute->equalsIgnoreCase->return->return
Security#isConstraintSatisfied(String, String, String)::: security is constraint satisfied:::if->attribute->equalsIgnoreCase->requestedSize->Integer->parseInt->maxSize->Integer->parseInt->if->return->else->return->if->attribute->equalsIgnoreCase->return->value->equalsIgnoreCase->return
Security#getFilterComponents(String, String)::: security get filter components:::algIndex->filterKey->indexOf->if->throw->new->InvalidParameterException->serviceName->filterKey->substring->algName->attrName->if->filterValue->length->filterKey->substring->trim->if->algName->length->throw->new->InvalidParameterException->else->attrIndex->filterKey->indexOf->if->throw->new->InvalidParameterException->else->filterKey->substring->trim->if->attrName->length->throw->new->InvalidParameterException->if->throw->new->InvalidParameterException->else->filterKey->substring->result->new->StringArr->return
Security#getAlgorithms(String):::Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore):::if->serviceName->length->serviceName->endsWith->return->Collections->emptySet->result->new->HashSet<>->providers->Security->getProviders->for->i->return->Collections->unmodifiableSet
Signature#getInstance(String):::Returns a Signature object that implements the specified signature algorithm:::Objects->requireNonNull->list->if->algorithm->equalsIgnoreCase->GetInstance->getServices->else->GetInstance->getServices->t->list->iterator->if->t->hasNext->throw->new->NoSuchAlgorithmException->failure->do->s->t->next->if->isSpi->return->new->Delegate->else->try->instance->GetInstance->getInstance->return->getInstance->catch->finally->while->t->hasNext->throw
Signature#getInstance(Instance, String)::: signature get instance:::sig->if->else->spi->new->Delegate->return
Signature#isSpi(Service)::: signature is spi:::if->s->getType->equals->return->className->s->getClassName->result->signatureInfo->get->if->try->instance->s->newInstance->r->if->debug->println->debug->s->getAlgorithm->println->Boolean->valueOf->signatureInfo->put->catch->return->finally->return->result->booleanValue
Signature#getInstance(String, String):::Returns a Signature object that implements the specified signature algorithm:::Objects->requireNonNull->if->algorithm->equalsIgnoreCase->if->provider->length->throw->new->IllegalArgumentException->p->Security->getProvider->if->throw->new->NoSuchProviderException->return->getInstanceRSA->instance->GetInstance->getInstance->return->getInstance
Signature#getInstance(String, Provider):::Returns a Signature object that implements the specified signature algorithm:::Objects->requireNonNull->if->algorithm->equalsIgnoreCase->if->throw->new->IllegalArgumentException->return->getInstanceRSA->instance->GetInstance->getInstance->return->getInstance
Signature#getInstanceRSA(Provider)::: signature get instance a:::s->p->getService->if->instance->GetInstance->getInstance->return->getInstance->try->c->Cipher->getInstance->return->new->CipherAdapter->new->Delegate->catch->throw->p->getName->new->NoSuchAlgorithmException->finally
Signature#getProvider():::Returns the provider of this signature object.:::chooseFirstProvider->return
Signature#getProviderName()::: signature get provider name:::return->provider->getName
Signature#chooseFirstProvider()::: signature choose first provider:::
Signature#initVerify(PublicKey):::Initializes this object for verification:::engineInitVerify->if->pdebug->getProviderName->println
Signature#initVerify(PublicKey, AlgorithmParameterSpec):::Initialize this object for verification:::engineInitVerify->if->pdebug->getProviderName->println
Signature#getPublicKeyFromCert(Certificate)::: signature get public key from cert:::if->c->critSet->c->getCriticalExtensionOIDs->if->critSet->isEmpty->critSet->contains->keyUsageInfo->c->getKeyUsage->if->throw->new->InvalidKeyException->return->cert->getPublicKey
Signature#initVerify(Certificate):::Initializes this object for verification, using the public key from the given certificate:::getPublicKeyFromCert->engineInitVerify->if->pdebug->getProviderName->println
Signature#initVerify(Certificate, AlgorithmParameterSpec):::Initializes this object for verification, using the public key from the given certificate:::getPublicKeyFromCert->engineInitVerify->if->pdebug->getProviderName->println
Signature#initSign(PrivateKey):::Initialize this object for signing:::engineInitSign->if->pdebug->getProviderName->println
Signature#initSign(PrivateKey, SecureRandom):::Initialize this object for signing:::engineInitSign->if->pdebug->getProviderName->println
Signature#initSign(PrivateKey, AlgorithmParameterSpec, SecureRandom):::Initialize this object for signing:::engineInitSign->if->pdebug->getProviderName->println
Signature#sign():::Returns the signature bytes of all the data updated:::if->return->engineSign->throw->new->SignatureException
Signature#sign(byte[], int, int):::Finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->SignatureException->return->engineSign
Signature#verify(byte[]):::Verifies the passed-in signature:::if->return->engineVerify->throw->new->SignatureException
Signature#verify(byte[], int, int):::Verifies the passed-in signature in the specified array of bytes, starting at the specified offset:::if->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->engineVerify->throw->new->SignatureException
Signature#update(byte):::Updates the data to be signed or verified by a byte.:::if->engineUpdate->else->throw->new->SignatureException
Signature#update(byte[]):::Updates the data to be signed or verified, using the specified array of bytes.:::update
Signature#update(byte[], int, int):::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.:::if->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->engineUpdate->else->throw->new->SignatureException
Signature#update(ByteBuffer):::Updates the data to be signed or verified using the specified ByteBuffer:::if->throw->new->SignatureException->if->throw->new->NullPointerException->engineUpdate
Signature#getAlgorithm():::Returns the name of the algorithm for this signature object.:::return
Signature#toString():::Returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used.:::initState->switch->break->break->break->return->getAlgorithm
Signature#setParameter(String, Object):::Sets the specified algorithm parameter to the specified value:::engineSetParameter
Signature#setParameter(AlgorithmParameterSpec):::Initializes this signature engine with the specified parameter set.:::engineSetParameter
Signature#getParameters():::Returns the parameters used with this signature object:::return->engineGetParameters
Signature#getParameter(String):::Gets the value of the specified algorithm parameter:::return->engineGetParameter
Signature#clone():::Returns a clone if the implementation is cloneable.:::if->return->super->clone->else->throw->new->CloneNotSupportedException
Signature.Delegate#clone():::Returns a clone if the delegate is cloneable.:::chooseFirstProvider->if->sigSpiClone->sigSpi->clone->that->new->Delegate->return->else->throw->new->CloneNotSupportedException
Signature.Delegate#newInstance(Service)::: delegate new instance:::if->s->getType->equals->try->c->Cipher->s->getProvider->getInstance->return->new->CipherAdapter->catch->throw->new->NoSuchAlgorithmException->finally->else->o->s->newInstance->if->throw->o->getClass->getName->new->NoSuchAlgorithmException->return
Signature.Delegate#chooseFirstProvider():::Choose the Spi from the first provider available:::if->return->synchronized->if->return->if->w->if->debug->println->if->debug->println->new->Exception->printStackTrace->lastException->while->serviceIterator->hasNext->s->if->else->serviceIterator->next->if->isSpi->continue->try->newInstance->s->getProvider->return->catch->finally->e->new->ProviderException->if->e->initCause->throw
Signature.Delegate#chooseProvider(int, Key, AlgorithmParameterSpec, SecureRandom)::: delegate choose provider:::synchronized->if->return->lastException->while->serviceIterator->hasNext->s->if->else->serviceIterator->next->if->s->supportsParameter->continue->if->isSpi->continue->try->spi->newInstance->tryOperation->s->getProvider->return->catch->if->finally->if->throw->if->throw->if->throw->k->key->getClass->getName->throw->new->InvalidKeyException
Signature.Delegate#tryOperation(SignatureSpi, int, Key, AlgorithmParameterSpec, SecureRandom)::: delegate try operation:::switch->spi->engineInitVerify->break->spi->engineInitVerify->break->spi->engineInitSign->break->spi->engineInitSign->break->spi->engineInitSign->break->spi->engineSetParameter->break->throw->new->AssertionError
Signature.Delegate#engineInitVerify(PublicKey)::: delegate engine init verify:::if->sigSpi->engineInitVerify->else->try->chooseProvider->catch->throw->new->InvalidKeyException->finally
Signature.Delegate#engineInitVerify(PublicKey, AlgorithmParameterSpec)::: delegate engine init verify:::if->sigSpi->engineInitVerify->else->chooseProvider
Signature.Delegate#engineInitSign(PrivateKey)::: delegate engine init sign:::if->sigSpi->engineInitSign->else->try->chooseProvider->catch->throw->new->InvalidKeyException->finally
Signature.Delegate#engineInitSign(PrivateKey, SecureRandom)::: delegate engine init sign:::if->sigSpi->engineInitSign->else->try->chooseProvider->catch->throw->new->InvalidKeyException->finally
Signature.Delegate#engineInitSign(PrivateKey, AlgorithmParameterSpec, SecureRandom)::: delegate engine init sign:::if->sigSpi->engineInitSign->else->chooseProvider
Signature.Delegate#engineUpdate(byte)::: delegate engine update:::chooseFirstProvider->sigSpi->engineUpdate
Signature.Delegate#engineUpdate(byte[], int, int)::: delegate engine update:::chooseFirstProvider->sigSpi->engineUpdate
Signature.Delegate#engineUpdate(ByteBuffer)::: delegate engine update:::chooseFirstProvider->sigSpi->engineUpdate
Signature.Delegate#engineSign()::: delegate engine sign:::chooseFirstProvider->return->sigSpi->engineSign
Signature.Delegate#engineSign(byte[], int, int)::: delegate engine sign:::chooseFirstProvider->return->sigSpi->engineSign
Signature.Delegate#engineVerify(byte[])::: delegate engine verify:::chooseFirstProvider->return->sigSpi->engineVerify
Signature.Delegate#engineVerify(byte[], int, int)::: delegate engine verify:::chooseFirstProvider->return->sigSpi->engineVerify
Signature.Delegate#engineSetParameter(String, Object)::: delegate engine set parameter:::chooseFirstProvider->sigSpi->engineSetParameter
Signature.Delegate#engineSetParameter(AlgorithmParameterSpec)::: delegate engine set parameter:::if->sigSpi->engineSetParameter->else->try->chooseProvider->catch->throw->new->InvalidAlgorithmParameterException->finally
Signature.Delegate#engineGetParameter(String)::: delegate engine get parameter:::chooseFirstProvider->return->sigSpi->engineGetParameter
Signature.Delegate#engineGetParameters()::: delegate engine get parameters:::chooseFirstProvider->return->sigSpi->engineGetParameters
Signature.CipherAdapter#engineInitVerify(PublicKey)::: cipher adapter engine init verify:::cipher->init->if->new->ByteArrayOutputStream->else->data->reset
Signature.CipherAdapter#engineInitSign(PrivateKey)::: cipher adapter engine init sign:::cipher->init
Signature.CipherAdapter#engineInitSign(PrivateKey, SecureRandom)::: cipher adapter engine init sign:::cipher->init
Signature.CipherAdapter#engineUpdate(byte)::: cipher adapter engine update:::new->byteArr->engineUpdate
Signature.CipherAdapter#engineUpdate(byte[], int, int)::: cipher adapter engine update:::if->data->write->return->out->cipher->update->if->throw->new->SignatureException
Signature.CipherAdapter#engineSign()::: cipher adapter engine sign:::try->return->cipher->doFinal->catch->throw->new->SignatureException->throw->new->SignatureException->finally
Signature.CipherAdapter#engineVerify(byte[])::: cipher adapter engine verify:::try->out->cipher->doFinal->dataBytes->data->toByteArray->data->reset->return->MessageDigest->isEqual->catch->return->throw->new->SignatureException->finally
Signature.CipherAdapter#engineSetParameter(String, Object)::: cipher adapter engine set parameter:::throw->new->InvalidParameterException
Signature.CipherAdapter#engineGetParameter(String)::: cipher adapter engine get parameter:::throw->new->InvalidParameterException
SignatureSpi#engineInitVerify(PublicKey):::Initializes this signature object with the specified public key for verification operations.:::
SignatureSpi#engineInitVerify(PublicKey, AlgorithmParameterSpec):::Initializes this signature object with the specified public key for verification operations.:::if->try->engineSetParameter->catch->throw->new->InvalidAlgorithmParameterException->finally->engineInitVerify
SignatureSpi#engineInitSign(PrivateKey):::Initializes this signature object with the specified private key for signing operations.:::
SignatureSpi#engineInitSign(PrivateKey, SecureRandom):::Initializes this signature object with the specified private key and source of randomness for signing operations:::engineInitSign
SignatureSpi#engineInitSign(PrivateKey, AlgorithmParameterSpec, SecureRandom):::Initializes this signature object with the specified private key and source of randomness for signing operations:::if->try->engineSetParameter->catch->throw->new->InvalidAlgorithmParameterException->finally->engineInitSign
SignatureSpi#engineUpdate(byte):::Updates the data to be signed or verified using the specified byte.:::
SignatureSpi#engineUpdate(byte[], int, int):::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.:::
SignatureSpi#engineUpdate(ByteBuffer):::Updates the data to be signed or verified using the specified ByteBuffer:::if->input->hasRemaining->return->try->if->input->hasArray->b->input->array->ofs->input->arrayOffset->pos->input->position->lim->input->limit->engineUpdate->input->position->else->len->input->remaining->b->JCAUtil->getTempArraySize->new->byteArr->while->chunk->Math->min->input->get->engineUpdate->catch->throw->new->ProviderException->finally
SignatureSpi#engineSign():::Returns the signature bytes of all the data updated so far:::
SignatureSpi#engineSign(byte[], int, int):::Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset:::sig->engineSign->if->throw->new->SignatureException->if->throw->new->SignatureException->System->arraycopy->return
SignatureSpi#engineVerify(byte[]):::Verifies the passed-in signature.:::
SignatureSpi#engineVerify(byte[], int, int):::Verifies the passed-in signature in the specified array of bytes, starting at the specified offset:::sigBytesCopy->new->byteArr->System->arraycopy->return->engineVerify
SignatureSpi#engineSetParameter(String, Object):::Sets the specified algorithm parameter to the specified value:::
SignatureSpi#engineSetParameter(AlgorithmParameterSpec):::This method is overridden by providers to initialize this signature engine with the specified parameter set.:::throw->new->UnsupportedOperationException
SignatureSpi#engineGetParameters():::This method is overridden by providers to return the parameters used with this signature engine:::throw->new->UnsupportedOperationException
SignatureSpi#engineGetParameter(String):::Gets the value of the specified algorithm parameter:::
SignatureSpi#clone():::Returns a clone if the implementation is cloneable.:::if->return->super->clone->else->throw->new->CloneNotSupportedException
SignedObject#getObject():::Retrieves the encapsulated object:::b->new->ByteArrayInputStream->a->new->ObjectInputStream->obj->a->readObject->b->close->a->close->return
SignedObject#getSignature():::Retrieves the signature on the signed object, in the form of a byte array.:::return->clone
SignedObject#getAlgorithm():::Retrieves the name of the signature algorithm.:::return
SignedObject#verify(PublicKey, Signature):::Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine.:::verificationEngine->initVerify->verificationEngine->clone->update->return->verificationEngine->clone->verify
SignedObject#sign(PrivateKey, Signature)::: signed object sign:::signingEngine->initSign->signingEngine->clone->update->signingEngine->sign->clone->signingEngine->getAlgorithm
SignedObject#readObject(java.io.ObjectInputStream):::readObject is called to restore the state of the SignedObject from a stream.:::fields->s->readFields->fields->get->clone->fields->get->clone->fields->get
Signer#getPrivateKey():::Returns this signer's private key:::check->return
Signer#setKeyPair(KeyPair):::Sets the key pair (public key and private key) for this signer:::check->pub->pair->getPublic->priv->pair->getPrivate->if->throw->new->InvalidParameterException->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->pae->getException->finally
Signer#printKeys()::: signer print keys:::keys->publicKey->getPublicKey->if->else->return
Signer#toString():::Returns a string of information about the signer.:::return->super->toString
Signer#check(String)::: signer check:::security->System->getSecurityManager->if->security->checkSecurityAccess
Timestamp#getTimestamp():::Returns the date and time when the timestamp was generated.:::return->timestamp->getTime->new->Date
Timestamp#getSignerCertPath():::Returns the certificate path for the Timestamping Authority.:::return
Timestamp#hashCode():::Returns the hash code value for this timestamp:::if->timestamp->hashCode->signerCertPath->hashCode->return
Timestamp#equals(Object):::Tests for equality between the specified object and this timestamp:::if->return->that->if->return->return->timestamp->that->getTimestamp->equals->signerCertPath->that->getSignerCertPath->equals
Timestamp#toString():::Returns a string describing this timestamp.:::sb->new->StringBuilder->sb->append->sb->append->certs->signerCertPath->getCertificates->if->certs->isEmpty->sb->certs->get->append->else->sb->append->sb->append->return->sb->toString
Timestamp#readObject(ObjectInputStream)::: timestamp read object:::ois->defaultReadObject->timestamp->getTime->new->Date
UnresolvedPermission#resolve(Permission, java.security.cert.Certificate[]):::try and resolve this permission using the class loader of the permission that was passed in.:::if->if->return->match->for->i->try->pc->p->getClass->if->try->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->catch->try->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->catch->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->finally->finally->else->if->try->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->catch->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->finally->else->c->pc->getConstructor->return->c->new->ObjectArr->newInstance->catch->if->debug->println->nsme->printStackTrace->return->if->debug->println->e->printStackTrace->return->finally
UnresolvedPermission#implies(Permission):::This method always returns false for unresolved permissions:::return
UnresolvedPermission#equals(Object):::Checks two UnresolvedPermission objects for equality:::if->return->if->return->that->if->equals->return->if->if->return->else->if->equals->return->if->if->return->else->if->equals->return->if->return->i->j->match->for->for->return
UnresolvedPermission#hashCode()::: unresolved permission hash code:::hash->type->hashCode->if->name->hashCode->if->actions->hashCode->return
UnresolvedPermission#getActions():::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for an UnresolvedPermission:::return
UnresolvedPermission#getUnresolvedType():::Get the type (class name) of the underlying permission that has not been resolved.:::return
UnresolvedPermission#getUnresolvedName():::Get the target name of the underlying permission that has not been resolved.:::return
UnresolvedPermission#getUnresolvedActions():::Get the actions for the underlying permission that has not been resolved.:::return
UnresolvedPermission#getUnresolvedCerts():::Get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved.:::return->certs->clone
UnresolvedPermission#toString():::Returns a string describing this UnresolvedPermission:::return
UnresolvedPermission#newPermissionCollection()::: unresolved permission new permission collection:::return->new->UnresolvedPermissionCollection
UnresolvedPermission#writeObject(java.io.ObjectOutputStream):::Writes this object out to a stream (i.e., serializes it).:::oos->defaultWriteObject->if->oos->writeInt->else->oos->writeInt->for->i
UnresolvedPermission#readObject(java.io.ObjectInputStream):::Restores this object from a stream (i.e., deserializes it).:::cf->cfs->certList->ois->defaultReadObject->if->throw->new->NullPointerException->size->ois->readInt->if->new->Hashtable<>->new->ArrayList<>->else->if->throw->new->IOException->for->i->if->certList->new->java.security.cert.CertificateArr->toArray
UnresolvedPermissionCollection#add(Permission):::Adds a permission to this UnresolvedPermissionCollection:::if->throw->new->IllegalArgumentException->up->perms->up->getName->new->java.util.function.BiFunction<>->compute
UnresolvedPermissionCollection#getUnresolvedPermissions(Permission):::get any unresolved permissions of the same type as p, and return the List containing them.:::return->perms->p->getClass->getName->get
UnresolvedPermissionCollection#implies(Permission):::always returns false for unresolved permissions:::return
UnresolvedPermissionCollection#elements():::Returns an enumeration of all the UnresolvedPermission lists in the container.:::results->new->ArrayList<>->foreach->perms->values->results->addAll->return->Collections->enumeration
UnresolvedPermissionCollection#writeObject(ObjectOutputStream)::: unresolved permission collection write object:::permissions->perms->size->new->Hashtable<>->set->perms->entrySet->foreach->list->e->getValue->vec->new->Vector<>->permissions->e->getKey->put->pfields->out->putFields->pfields->put->out->writeFields
UnresolvedPermissionCollection#readObject(ObjectInputStream)::: unresolved permission collection read object:::gfields->in->readFields->permissions->gfields->get->permissions->size->new->ConcurrentHashMap<>->set->permissions->entrySet->foreach->vec->e->getValue->list->new->CopyOnWriteArrayList<>->perms->e->getKey->put
URIParameter#getURI():::Returns the URI.:::return

AccessControlContext#getContext():::Returns this context's context.:::
AccessControlContext#isPrivileged():::Returns true if this context is privileged.:::
AccessControlContext#getAssignedCombiner():::get the assigned combiner from the privileged or inherited context:::AccessController.getInheritedAccessControlContext
AccessControlContext#getDomainCombiner():::Get the DomainCombiner associated with this AccessControlContext.:::System.getSecurityManager->sm.checkPermission->this.getCombiner
AccessControlContext#getCombiner():::package private for AccessController:::
AccessControlContext#checkPermission(Permission):::Determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object:::this.getDebug->Debug.isOn->context[i].getCodeSource->context[i].getCodeSource().getLocation->context[i].getCodeSource().getLocation().toString->Debug.isOn->Debug.isOn->perm.getClass().getCanonicalName->Debug.isOn->Debug.isOn->Thread.dumpStack->Debug.isOn->debug.println->debug.println->this.checkPermission2->context[i].impliesWithAltFilePerm->debug.println->Debug.isOn->debug.println->Thread.dumpStack->AccessController.doPrivileged->debug.println->this.checkPermission2
AccessControlContext#optimize():::Take the stack-based context (this) and combine it with the privileged or inherited context, if need be:::AccessController.getInheritedAccessControlContext->this.calculateFields->this.combine->this.calculateFields->this.getDebug->debug.println->combiner.combine->this.calculateFields
AccessControlContext#equals(Object):::Checks two AccessControlContext objects for equality:::this.equalContext->this.equalLimitedContext
AccessControlException#getPermission():::Gets the Permission object associated with this exception, or null if there was no corresponding Permission object.:::
AccessController#doPrivilegedWithCombiner(PrivilegedAction):::Performs the specified PrivilegedAction with privileges enabled:::this.getStackAccessControlContext->AccessController.doPrivileged->acc.getAssignedCombiner->Reflection.getCallerClass->this.preserveCombiner->AccessController.doPrivileged
AccessController#doPrivileged(PrivilegedAction, AccessControlContext):::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext:::
AccessController#doPrivileged(PrivilegedAction, AccessControlContext, Permission...):::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments:::this.getContext->Reflection.getCallerClass->context.getCombiner->this.createWrapper->AccessController.doPrivileged
AccessController#doPrivilegedWithCombiner(PrivilegedAction, AccessControlContext, Permission...):::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments:::this.getContext->parent.getCombiner->context.getCombiner->Reflection.getCallerClass->this.createWrapper->AccessController.doPrivileged
AccessController#doPrivileged(PrivilegedExceptionAction):::Performs the specified PrivilegedExceptionAction with privileges enabled:::
AccessController#doPrivilegedWithCombiner(PrivilegedExceptionAction):::Performs the specified PrivilegedExceptionAction with privileges enabled:::this.getStackAccessControlContext->AccessController.doPrivileged->acc.getAssignedCombiner->Reflection.getCallerClass->this.preserveCombiner->AccessController.doPrivileged
AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext):::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext:::
AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext, Permission...):::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments:::this.getContext->Reflection.getCallerClass->context.getCombiner->this.createWrapper->AccessController.doPrivileged
AccessController#doPrivilegedWithCombiner(PrivilegedExceptionAction, AccessControlContext, Permission...):::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments:::this.getContext->parent.getCombiner->context.getCombiner->Reflection.getCallerClass->this.createWrapper->AccessController.doPrivileged
AlgorithmConstraints#permits(Set, String, AlgorithmParameters):::Determines whether an algorithm is granted permission for the specified cryptographic primitives.:::
AlgorithmConstraints#permits(Set, Key):::Determines whether a key is granted permission for the specified cryptographic primitives:::
AlgorithmConstraints#permits(Set, String, Key, AlgorithmParameters):::Determines whether an algorithm and the corresponding key are granted permission for the specified cryptographic primitives.:::
AlgorithmParameterGenerator#getAlgorithm():::Returns the standard name of the algorithm this parameter generator is associated with.:::
AlgorithmParameterGenerator#getInstance(String):::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm:::Objects.requireNonNull->Security.getImpl
AlgorithmParameterGenerator#getInstance(String, String):::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm:::Objects.requireNonNull->provider.length->Security.getImpl
AlgorithmParameterGenerator#getInstance(String, Provider):::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm:::Objects.requireNonNull->Security.getImpl
AlgorithmParameterGenerator#getProvider():::Returns the provider of this algorithm parameter generator object.:::
AlgorithmParameterGenerator#init(int):::Initializes this parameter generator for a certain size:::paramGenSpi.engineInit
AlgorithmParameterGenerator#init(int, SecureRandom):::Initializes this parameter generator for a certain size and source of randomness.:::paramGenSpi.engineInit
AlgorithmParameterGenerator#init(AlgorithmParameterSpec):::Initializes this parameter generator with a set of algorithm-specific parameter generation values:::paramGenSpi.engineInit
AlgorithmParameterGenerator#init(AlgorithmParameterSpec, SecureRandom):::Initializes this parameter generator with a set of algorithm-specific parameter generation values.:::paramGenSpi.engineInit
AlgorithmParameterGenerator#generateParameters():::Generates the parameters.:::paramGenSpi.engineGenerateParameters
AlgorithmParameterGeneratorSpi#engineInit(int, SecureRandom):::Initializes this parameter generator for a certain size and source of randomness.:::
AlgorithmParameterGeneratorSpi#engineInit(AlgorithmParameterSpec, SecureRandom):::Initializes this parameter generator with a set of algorithm-specific parameter generation values.:::
AlgorithmParameterGeneratorSpi#engineGenerateParameters():::Generates the parameters.:::
AlgorithmParameters#getAlgorithm():::Returns the name of the algorithm associated with this parameter object.:::
AlgorithmParameters#getInstance(String):::Returns a parameter object for the specified algorithm:::Objects.requireNonNull->Security.getImpl
AlgorithmParameters#getInstance(String, String):::Returns a parameter object for the specified algorithm:::Objects.requireNonNull->provider.length->Security.getImpl
AlgorithmParameters#getInstance(String, Provider):::Returns a parameter object for the specified algorithm:::Objects.requireNonNull->Security.getImpl
AlgorithmParameters#getProvider():::Returns the provider of this parameter object.:::
AlgorithmParameters#init(AlgorithmParameterSpec):::Initializes this parameter object using the parameters specified in paramSpec.:::paramSpi.engineInit
AlgorithmParameters#init(byte[]):::Imports the specified parameters and decodes them according to the primary decoding format for parameters:::paramSpi.engineInit
AlgorithmParameters#init(byte[], String):::Imports the parameters from params and decodes them according to the specified decoding scheme:::paramSpi.engineInit
AlgorithmParameters#getParameterSpec(Class):::Returns a (transparent) specification of this parameter object:::paramSpi.engineGetParameterSpec
AlgorithmParameters#getEncoded():::Returns the parameters in their primary encoding format:::paramSpi.engineGetEncoded
AlgorithmParameters#getEncoded(String):::Returns the parameters encoded in the specified scheme:::paramSpi.engineGetEncoded
AlgorithmParameters#toString():::Returns a formatted string describing the parameters.:::paramSpi.engineToString
AlgorithmParametersSpi#engineInit(AlgorithmParameterSpec):::Initializes this parameters object using the parameters specified in paramSpec.:::
AlgorithmParametersSpi#engineInit(byte[]):::Imports the specified parameters and decodes them according to the primary decoding format for parameters:::
AlgorithmParametersSpi#engineInit(byte[], String):::Imports the parameters from params and decodes them according to the specified decoding format:::
AlgorithmParametersSpi#engineGetParameterSpec(Class):::Returns a (transparent) specification of this parameters object:::
AlgorithmParametersSpi#engineGetEncoded():::Returns the parameters in their primary encoding format:::
AlgorithmParametersSpi#engineGetEncoded(String):::Returns the parameters encoded in the specified format:::
AlgorithmParametersSpi#engineToString():::Returns a formatted string describing the parameters.:::
AllPermission#implies(Permission):::Checks if the specified permission is "implied" by this object:::
AllPermission#equals(Object):::Checks two AllPermission objects for equality:::
AllPermission#getActions():::Returns the canonical string representation of the actions.:::
AllPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing AllPermission objects.:::
AllPermissionCollection#elements():::Returns an enumeration of all the AllPermission objects in the container.:::
AuthProvider#login(Subject, CallbackHandler):::Log in to this provider:::
AuthProvider#logout():::Log out from this provider.:::
AuthProvider#setCallbackHandler(CallbackHandler):::Set a CallbackHandler:::
BasicPermission#implies(Permission):::Checks if the specified permission is "implied" by this object:::p.getClass->this.getClass->this.path.equals->that.path.length->this.path.length->that.path.startsWith->that.path.startsWith
BasicPermission#equals(Object):::Checks two BasicPermission objects for equality:::obj.getClass->this.getClass->bp.getName->getName().equals
BasicPermission#hashCode():::Returns the hash code value for this object:::this.getName().hashCode
BasicPermission#getActions():::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for a BasicPermission.:::
BasicPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing BasicPermission objects:::this.getClass
BasicPermission#getCanonicalName():::Returns the canonical name of this BasicPermission:::this.getName
BasicPermissionCollection#add(Permission):::Adds a permission to the BasicPermissions:::this.isReadOnly->bp.getClass->bp.getClass->bp.getCanonicalName->perms.put->canonName.equals
BasicPermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".:::bp.getClass->bp.getCanonicalName->perms.get->x.implies->path.length->path.substring->perms.get->x.implies->path.lastIndexOf
BasicPermissionCollection#elements():::Returns an enumeration of all the BasicPermission objects in the container.:::perms.elements
Certificate#getGuarantor():::Returns the guarantor of the certificate, that is, the principal guaranteeing that the public key associated with this certificate is that of the principal associated with this certificate:::
Certificate#getPrincipal():::Returns the principal of the principal-key pair being guaranteed by the guarantor.:::
Certificate#getPublicKey():::Returns the key of the principal-key pair being guaranteed by the guarantor.:::
Certificate#encode(OutputStream):::Encodes the certificate to an output stream in a format that can be decoded by the decode method.:::
Certificate#decode(InputStream):::Decodes a certificate from an input stream:::
Certificate#getFormat():::Returns the name of the coding format:::
Certificate#toString(boolean):::Returns a string that represents the contents of the certificate.:::
CodeSigner#getSignerCertPath():::Returns the signer's certificate path.:::
CodeSigner#getTimestamp():::Returns the signature timestamp.:::
CodeSigner#hashCode():::Returns the hash code value for this code signer:::signerCertPath.hashCode->timestamp.hashCode->signerCertPath.hashCode
CodeSigner#equals(Object):::Tests for equality between the specified object and this code signer:::that.getTimestamp->timestamp.equals->that.getSignerCertPath->signerCertPath.equals
CodeSigner#toString():::Returns a string describing this code signer.:::sb.append->signerCertPath.getCertificates().get->sb.append->sb.append->sb.append->sb.toString
CodeSource#hashCode():::Returns the hash code value for this object.:::location.hashCode
CodeSource#equals(Object):::Tests for equality between the specified object and this object:::location.equals->this.matchCerts
CodeSource#getLocation():::Returns the location associated with this CodeSource.:::
CodeSource#getLocationNoFragString():::Returns a String form of the URL for use as a key in HashMaps/Sets.:::
CodeSource#getCertificates():::Returns the certificates associated with this CodeSource:::signers[i].getSignerCertPath().getCertificates->certChains.addAll->certChains.toArray->certs.clone->certs.clone
CodeSource#getCodeSigners():::Returns the code signers associated with this CodeSource:::this.convertCertArrayToSignerArray->signers.clone->signers.clone
CodeSource#implies(CodeSource):::Returns true if this CodeSource object "implies" the specified CodeSource:::this.matchCerts->this.matchLocation
CodeSource#matchCerts(CodeSource, boolean):::Returns true if all the certs in this CodeSource are also in that.:::certs[i].equals->signers[i].equals
CodeSource#toString():::Returns a string describing this CodeSource, telling its URL and certificates.:::sb.append->sb.append->sb.append->sb.append->sb.append->sb.append->sb.toString
DigestInputStream#getMessageDigest():::Returns the message digest associated with this stream.:::
DigestInputStream#setMessageDigest(MessageDigest):::Associates the specified message digest with this stream.:::
DigestInputStream#read():::Reads a byte, and updates the message digest (if the digest function is on):::in.read->digest.update
DigestInputStream#read(byte[], int, int):::Reads into a byte array, and updates the message digest (if the digest function is on):::in.read->digest.update
DigestInputStream#on(boolean):::Turns the digest function on or off:::
DigestInputStream#toString():::Prints a string representation of this digest input stream and its associated message digest object.:::digest.toString
DigestOutputStream#getMessageDigest():::Returns the message digest associated with this stream.:::
DigestOutputStream#setMessageDigest(MessageDigest):::Associates the specified message digest with this stream.:::
DigestOutputStream#write(int):::Updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream:::out.write->digest.update
DigestOutputStream#write(byte[], int, int):::Updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream:::out.write->digest.update
DigestOutputStream#on(boolean):::Turns the digest function on or off:::
DigestOutputStream#toString():::Prints a string representation of this digest output stream and its associated message digest object.:::digest.toString
DomainCombiner#combine(ProtectionDomain[], ProtectionDomain[]):::Modify or update the provided ProtectionDomains:::
DomainLoadStoreParameter#getConfiguration():::Gets the identifier for the domain configuration data.:::
DomainLoadStoreParameter#getProtectionParams():::Gets the keystore protection parameters for keystores in this domain.:::
DomainLoadStoreParameter#getProtectionParameter():::Gets the keystore protection parameters for this domain:::
DrbgParameters.Instantiation#getStrength():::Returns the security strength in bits.:::
DrbgParameters.Instantiation#getCapability():::Returns the capability.:::
DrbgParameters.Instantiation#getPersonalizationString():::Returns the personalization string as a byte array.:::personalizationString.clone
DrbgParameters.Instantiation#toString():::Returns a Human-readable string representation of this Instantiation.:::
DrbgParameters.NextBytes#getStrength():::Returns the security strength requested in bits.:::
DrbgParameters.NextBytes#getPredictionResistance():::Returns whether prediction resistance is requested.:::
DrbgParameters.NextBytes#getAdditionalInput():::Returns the requested additional input.:::additionalInput.clone
DrbgParameters.Reseed#getPredictionResistance():::Returns whether prediction resistance is requested.:::
DrbgParameters.Reseed#getAdditionalInput():::Returns the requested additional input.:::additionalInput.clone
DrbgParameters#instantiation(int, Capability, byte[]):::Generates a DrbgParameters.Instantiation object.:::Objects.requireNonNull
DrbgParameters#nextBytes(int, boolean, byte[]):::Generates a NextBytes object.:::
DrbgParameters#reseed(boolean, byte[]):::Generates a Reseed object.:::
Guard#checkGuard(Object):::Determines whether or not to allow access to the guarded object object:::
GuardedObject#getObject():::Retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard.:::guard.checkGuard
Identity#getName():::Returns this identity's name.:::
Identity#getScope():::Returns this identity's scope.:::
Identity#getPublicKey():::Returns this identity's public key.:::
Identity#setInfo(String):::Specifies a general information string for this identity:::this.check
Identity#getInfo():::Returns general information previously specified for this identity.:::
Identity#addCertificate(Certificate):::Adds a certificate for this identity:::this.check->certificate.getPublicKey->certificate.getPublicKey->this.keyEquals->certificates.addElement
Identity#removeCertificate(Certificate):::Removes a certificate from this identity:::this.check->certificates.removeElement
Identity#certificates():::Returns a copy of all the certificates for this identity.:::certificates.size->certificates.copyInto
Identity#equals(Object):::Tests for equality between the specified object and this identity:::i.fullName->this.fullName().equals->this.identityEquals
Identity#identityEquals(Identity):::Tests for equality between the specified identity and this identity:::name.equalsIgnoreCase->publicKey.equals
Identity#fullName():::Returns a parsable name for identity: identityName.scopeName:::scope.getName
Identity#toString():::Returns a short string describing this identity, telling its name and its scope (if any):::this.check->scope.getName
Identity#toString(boolean):::Returns a string representation of this identity, with optionally more details than that provided by the toString method without any arguments:::this.toString->this.printKeys->this.printCertificates
Identity#hashCode():::Returns a hashcode for this identity.:::name.hashCode
IdentityScope#getSystemScope():::Returns the system's identity scope.:::this.initializeSystemScope
IdentityScope#setSystemScope(IdentityScope):::Sets the system's identity scope:::this.check
IdentityScope#size():::Returns the number of identities within this identity scope.:::
IdentityScope#getIdentity(String):::Returns the identity in this scope with the specified name (if any).:::
IdentityScope#getIdentity(Principal):::Retrieves the identity whose name is the same as that of the specified principal:::principal.getName->this.getIdentity
IdentityScope#getIdentity(PublicKey):::Retrieves the identity with the specified public key.:::
IdentityScope#addIdentity(Identity):::Adds an identity to this identity scope.:::
IdentityScope#removeIdentity(Identity):::Removes an identity from this identity scope.:::
IdentityScope#identities():::Returns an enumeration of all identities in this identity scope.:::
IdentityScope#toString():::Returns a string representation of this identity scope, including its name, its scope name, and the number of identities in this identity scope.:::super.toString->this.size
Key#getAlgorithm():::Returns the standard algorithm name for this key:::
Key#getFormat():::Returns the name of the primary encoding format of this key, or null if this key does not support encoding:::
Key#getEncoded():::Returns the key in its primary encoding format, or null if this key does not support encoding.:::
KeyFactory#getInstance(String):::Returns a KeyFactory object that converts public/private keys of the specified algorithm:::Objects.requireNonNull
KeyFactory#getInstance(String, String):::Returns a KeyFactory object that converts public/private keys of the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance
KeyFactory#getInstance(String, Provider):::Returns a KeyFactory object that converts public/private keys of the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance
KeyFactory#getProvider():::Returns the provider of this key factory object.:::
KeyFactory#getAlgorithm():::Gets the name of the algorithm associated with this KeyFactory.:::
KeyFactory#generatePublic(KeySpec):::Generates a public key object from the provided key specification (key material).:::spi.engineGeneratePublic->this.nextSpi->mySpi.engineGeneratePublic
KeyFactory#generatePrivate(KeySpec):::Generates a private key object from the provided key specification (key material).:::spi.engineGeneratePrivate->this.nextSpi->mySpi.engineGeneratePrivate
KeyFactory#getKeySpec(Key, Class):::Returns a specification (key material) of the given key object:::spi.engineGetKeySpec->this.nextSpi->mySpi.engineGetKeySpec
KeyFactory#translateKey(Key):::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.:::spi.engineTranslateKey->this.nextSpi->mySpi.engineTranslateKey
KeyFactorySpi#engineGeneratePublic(KeySpec):::Generates a public key object from the provided key specification (key material).:::
KeyFactorySpi#engineGeneratePrivate(KeySpec):::Generates a private key object from the provided key specification (key material).:::
KeyFactorySpi#engineGetKeySpec(Key, Class):::Returns a specification (key material) of the given key object:::
KeyFactorySpi#engineTranslateKey(Key):::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.:::
KeyPair#getPublic():::Returns a reference to the public key component of this key pair.:::
KeyPair#getPrivate():::Returns a reference to the private key component of this key pair.:::
KeyPairGenerator#getAlgorithm():::Returns the standard name of the algorithm for this key pair generator:::
KeyPairGenerator#getInstance(String):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm:::Objects.requireNonNull->GetInstance.getServices->list.iterator->t.hasNext->t.next->GetInstance.getInstance->this.getInstance->t.hasNext
KeyPairGenerator#getInstance(String, String):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance->this.getInstance
KeyPairGenerator#getInstance(String, Provider):::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm:::Objects.requireNonNull->GetInstance.getInstance->this.getInstance
KeyPairGenerator#getProvider():::Returns the provider of this key pair generator object.:::this.disableFailover
KeyPairGenerator#initialize(int):::Initializes the key pair generator for a certain keysize using a default parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness:::JCAUtil.getSecureRandom->this.initialize
KeyPairGenerator#initialize(int, SecureRandom):::Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).:::
KeyPairGenerator#initialize(AlgorithmParameterSpec):::Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness:::JCAUtil.getSecureRandom->this.initialize
KeyPairGenerator#initialize(AlgorithmParameterSpec, SecureRandom):::Initializes the key pair generator with the given parameter set and source of randomness:::
KeyPairGenerator#genKeyPair():::Generates a key pair:::this.generateKeyPair
KeyPairGenerator#generateKeyPair():::Generates a key pair:::
KeyPairGeneratorSpi#initialize(int, SecureRandom):::Initializes the key pair generator for a certain keysize, using the default parameter set.:::
KeyPairGeneratorSpi#initialize(AlgorithmParameterSpec, SecureRandom):::Initializes the key pair generator using the specified parameter set and user-provided source of randomness:::
KeyPairGeneratorSpi#generateKeyPair():::Generates a key pair:::
KeyRep#readResolve():::Resolve the Key object:::nse.initCause->RAW.equals->X509.equals->PKCS8.equals->KeyFactory.getInstance->f.generatePrivate->KeyFactory.getInstance->f.generatePublic
KeyStore.LoadStoreParameter#getProtectionParameter():::Gets the parameter used to protect keystore data.:::
KeyStore.PasswordProtection#getProtectionAlgorithm():::Gets the name of the protection algorithm:::
KeyStore.PasswordProtection#getProtectionParameters():::Gets the parameters supplied for the protection algorithm.:::
KeyStore.PasswordProtection#getPassword():::Gets the password:::
KeyStore.PasswordProtection#destroy():::Clears the password.:::Arrays.fill
KeyStore.PasswordProtection#isDestroyed():::Determines if password has been cleared.:::
KeyStore.CallbackHandlerProtection#getCallbackHandler():::Returns the CallbackHandler.:::
KeyStore.Entry#getAttributes():::Retrieves the attributes associated with an entry.:::Collections.emptySet
KeyStore.Entry.Attribute#getName():::Returns the attribute's name.:::
KeyStore.Entry.Attribute#getValue():::Returns the attribute's value:::
KeyStore.PrivateKeyEntry#getPrivateKey():::Gets the PrivateKey from this entry.:::
KeyStore.PrivateKeyEntry#getCertificateChain():::Gets the Certificate chain from this entry:::chain.clone
KeyStore.PrivateKeyEntry#getCertificate():::Gets the end entity Certificate from the certificate chain in this entry.:::
KeyStore.PrivateKeyEntry#getAttributes():::Retrieves the attributes associated with an entry.:::
KeyStore.PrivateKeyEntry#toString():::Returns a string representation of this PrivateKeyEntry.:::sb.append->sb.append->sb.append->sb.toString
KeyStore.SecretKeyEntry#getSecretKey():::Gets the SecretKey from this entry.:::
KeyStore.SecretKeyEntry#getAttributes():::Retrieves the attributes associated with an entry.:::
KeyStore.SecretKeyEntry#toString():::Returns a string representation of this SecretKeyEntry.:::sKey.getAlgorithm
KeyStore.TrustedCertificateEntry#getTrustedCertificate():::Gets the trusted Certficate from this entry.:::
KeyStore.TrustedCertificateEntry#getAttributes():::Retrieves the attributes associated with an entry.:::
KeyStore.TrustedCertificateEntry#toString():::Returns a string representation of this TrustedCertificateEntry.:::cert.toString
KeyStore#getInstance(String):::Returns a keystore object of the specified type:::Objects.requireNonNull->Security.getImpl
KeyStore#getInstance(String, String):::Returns a keystore object of the specified type:::Objects.requireNonNull->provider.length->Security.getImpl
KeyStore#getInstance(String, Provider):::Returns a keystore object of the specified type:::Objects.requireNonNull->Security.getImpl
KeyStore#getDefaultType():::Returns the default keystore type as specified by the keystore.type security property, or the string "jks" (acronym for "Java keystore") if no such property exists:::AccessController.doPrivileged
KeyStore#getProvider():::Returns the provider of this keystore.:::
KeyStore#getType():::Returns the type of this keystore.:::
KeyStore#getKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it:::keyStoreSpi.engineGetKey
KeyStore#getCertificateChain(String):::Returns the certificate chain associated with the given alias:::keyStoreSpi.engineGetCertificateChain
KeyStore#getCertificate(String):::Returns the certificate associated with the given alias:::keyStoreSpi.engineGetCertificate
KeyStore#getCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::keyStoreSpi.engineGetCreationDate
KeyStore#setKeyEntry(String, Key, char[], Certificate[]):::Assigns the given key to the given alias, protecting it with the given password:::keyStoreSpi.engineSetKeyEntry
KeyStore#setKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::keyStoreSpi.engineSetKeyEntry
KeyStore#setCertificateEntry(String, Certificate):::Assigns the given trusted certificate to the given alias:::keyStoreSpi.engineSetCertificateEntry
KeyStore#deleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::keyStoreSpi.engineDeleteEntry
KeyStore#aliases():::Lists all the alias names of this keystore.:::keyStoreSpi.engineAliases
KeyStore#containsAlias(String):::Checks if the given alias exists in this keystore.:::keyStoreSpi.engineContainsAlias
KeyStore#size():::Retrieves the number of entries in this keystore.:::keyStoreSpi.engineSize
KeyStore#isKeyEntry(String):::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.:::keyStoreSpi.engineIsKeyEntry
KeyStore#isCertificateEntry(String):::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.:::keyStoreSpi.engineIsCertificateEntry
KeyStore#getCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::keyStoreSpi.engineGetCertificateAlias
KeyStore#store(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.:::keyStoreSpi.engineStore
KeyStore#store(LoadStoreParameter):::Stores this keystore using the given LoadStoreParameter.:::keyStoreSpi.engineStore
KeyStore#load(InputStream, char[]):::Loads this KeyStore from the given input stream:::keyStoreSpi.engineLoad
KeyStore#load(LoadStoreParameter):::Loads this keystore using the given LoadStoreParameter:::keyStoreSpi.engineLoad
KeyStore#getEntry(String, ProtectionParameter):::Gets a keystore Entry for the specified alias with the specified protection parameter.:::keyStoreSpi.engineGetEntry
KeyStore#setEntry(String, Entry, ProtectionParameter):::Saves a keystore Entry under the specified alias:::keyStoreSpi.engineSetEntry
KeyStore#entryInstanceOf(String, Class):::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.:::keyStoreSpi.engineEntryInstanceOf
KeyStore#getInstance(File, char[]):::Returns a loaded keystore object of the appropriate keystore type:::this.getInstance
KeyStore#getInstance(File, LoadStoreParameter):::Returns a loaded keystore object of the appropriate keystore type:::this.getInstance
KeyStore.Builder#getKeyStore():::Returns the KeyStore described by this object.:::
KeyStore.Builder#getProtectionParameter(String):::Returns the ProtectionParameters that should be used to obtain the KeyStore.Entry Entry with the given alias:::
KeyStore.Builder#newInstance(KeyStore, ProtectionParameter):::Returns a new Builder that encapsulates the given KeyStore:::
KeyStore.Builder#newInstance(String, Provider, File, ProtectionParameter):::Returns a new Builder object:::file.isFile->AccessController.getContext
KeyStore.Builder#newInstance(File, ProtectionParameter):::Returns a new Builder object:::this.newInstance
KeyStore.Builder#newInstance(String, Provider, ProtectionParameter):::Returns a new Builder object:::AccessController.getContext->KeyStore.getInstance->KeyStore.getInstance->e.getCause->ks.load->ks.load->e.getCause->AccessController.doPrivileged
KeyStoreSpi#engineGetKey(String, char[]):::Returns the key associated with the given alias, using the given password to recover it:::
KeyStoreSpi#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias:::
KeyStoreSpi#engineGetCertificate(String):::Returns the certificate associated with the given alias:::
KeyStoreSpi#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::
KeyStoreSpi#engineSetKeyEntry(String, Key, char[], Certificate[]):::Assigns the given key to the given alias, protecting it with the given password:::
KeyStoreSpi#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::
KeyStoreSpi#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias:::
KeyStoreSpi#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::
KeyStoreSpi#engineAliases():::Lists all the alias names of this keystore.:::
KeyStoreSpi#engineContainsAlias(String):::Checks if the given alias exists in this keystore.:::
KeyStoreSpi#engineSize():::Retrieves the number of entries in this keystore.:::
KeyStoreSpi#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.:::
KeyStoreSpi#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.:::
KeyStoreSpi#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::
KeyStoreSpi#engineStore(OutputStream, char[]):::Stores this keystore to the given output stream, and protects its integrity with the given password.:::
KeyStoreSpi#engineStore(KeyStore.LoadStoreParameter):::Stores this keystore using the given KeyStore.LoadStoreParmeter.:::
KeyStoreSpi#engineLoad(InputStream, char[]):::Loads the keystore from the given input stream:::
KeyStoreSpi#engineLoad(KeyStore.LoadStoreParameter):::Loads the keystore using the given KeyStore.LoadStoreParameter:::this.engineLoad
KeyStoreSpi#engineGetEntry(String, KeyStore.ProtectionParameter):::Gets a KeyStore.Entry for the specified alias with the specified protection parameter.:::this.engineContainsAlias->this.engineIsCertificateEntry->this.engineGetCertificate->this.engineIsCertificateEntry->this.engineIsKeyEntry->pp.getProtectionAlgorithm->pp.getPassword->this.engineGetKey->this.engineGetCertificateChain
KeyStoreSpi#engineSetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter):::Saves a KeyStore.Entry under the specified alias:::pProtect.getProtectionAlgorithm->pProtect.getPassword->((KeyStore.SecretKeyEntry) entry).getSecretKey->pProtect.getPassword->this.engineSetKeyEntry->pProtect.getPassword->((KeyStore.PrivateKeyEntry) entry).getPrivateKey->pProtect.getPassword->((KeyStore.PrivateKeyEntry) entry).getCertificateChain->this.engineSetKeyEntry->pProtect.getPassword->tce.getTrustedCertificate->this.engineSetCertificateEntry->entry.getClass().getName
KeyStoreSpi#engineEntryInstanceOf(String, Class):::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.:::this.engineIsCertificateEntry->this.engineIsKeyEntry->this.engineGetCertificate->this.engineIsKeyEntry->this.engineGetCertificate
KeyStoreSpi#engineProbe(InputStream):::Probes the specified input stream to determine whether it contains a keystore that is supported by this implementation, or not.:::
MessageDigest#getInstance(String):::Returns a MessageDigest object that implements the specified digest algorithm:::Objects.requireNonNull->Security.getImpl->md.provider.getName->pdebug.println
MessageDigest#getInstance(String, String):::Returns a MessageDigest object that implements the specified digest algorithm:::Objects.requireNonNull->provider.length->Security.getImpl
MessageDigest#getInstance(String, Provider):::Returns a MessageDigest object that implements the specified digest algorithm:::Objects.requireNonNull->Security.getImpl
MessageDigest#getProvider():::Returns the provider of this message digest object.:::
MessageDigest#update(byte):::Updates the digest using the specified byte.:::this.engineUpdate
MessageDigest#update(byte[], int, int):::Updates the digest using the specified array of bytes, starting at the specified offset.:::this.engineUpdate
MessageDigest#update(byte[]):::Updates the digest using the specified array of bytes.:::this.engineUpdate
MessageDigest#update(ByteBuffer):::Update the digest using the specified ByteBuffer:::this.engineUpdate
MessageDigest#digest():::Completes the hash computation by performing final operations such as padding:::this.engineDigest
MessageDigest#digest(byte[], int, int):::Completes the hash computation by performing final operations such as padding:::this.engineDigest
MessageDigest#digest(byte[]):::Performs a final update on the digest using the specified array of bytes, then completes the digest computation:::this.update->this.digest
MessageDigest#toString():::Returns a string representation of this message digest object.:::this.getProviderName->p.print->p.print->p.print->p.println->baos.toString
MessageDigest#isEqual(byte[], byte[]):::Compares two digests for equality:::
MessageDigest#reset():::Resets the digest for further use.:::this.engineReset
MessageDigest#getAlgorithm():::Returns a string that identifies the algorithm, independent of implementation details:::
MessageDigest#getDigestLength():::Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable.:::this.engineGetDigestLength->this.clone->md.digest
MessageDigest#clone():::Returns a clone if the implementation is cloneable.:::super.clone
MessageDigest.Delegate#clone():::Returns a clone if the delegate is cloneable.:::digestSpi.clone
MessageDigestSpi#engineGetDigestLength():::Returns the digest length in bytes:::
MessageDigestSpi#engineUpdate(byte):::Updates the digest using the specified byte.:::
MessageDigestSpi#engineUpdate(byte[], int, int):::Updates the digest using the specified array of bytes, starting at the specified offset.:::
MessageDigestSpi#engineUpdate(ByteBuffer):::Update the digest using the specified ByteBuffer:::input.hasRemaining->input.hasArray->input.remaining->JCAUtil.getTempArraySize->Math.min->input.get->this.engineUpdate->input.array->input.arrayOffset->input.position->input.limit->this.engineUpdate->input.position
MessageDigestSpi#engineDigest():::Completes the hash computation by performing final operations such as padding:::
MessageDigestSpi#engineDigest(byte[], int, int):::Completes the hash computation by performing final operations such as padding:::this.engineDigest->System.arraycopy
MessageDigestSpi#engineReset():::Resets the digest for further use.:::
MessageDigestSpi#clone():::Returns a clone if the implementation is cloneable.:::super.clone
Permission#checkGuard(Object):::Implements the guard interface for a permission:::System.getSecurityManager->sm.checkPermission
Permission#toString():::Returns a string describing this Permission:::this.getActions->actions.length->getClass().getName->getClass().getName
PermissionCollection#add(Permission):::Adds a permission object to the current collection of permission objects.:::
PermissionCollection#implies(Permission):::Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection.:::
PermissionCollection#elements():::Returns an enumeration of all the Permission objects in the collection.:::
PermissionCollection#elementsAsStream():::Returns a stream of all the Permission objects in the collection:::this.isReadOnly->elements().asIterator->Spliterators.spliteratorUnknownSize->StreamSupport.stream
PermissionCollection#setReadOnly():::Marks this PermissionCollection object as "readonly":::
PermissionCollection#isReadOnly():::Returns true if this PermissionCollection object is marked as readonly:::
PermissionCollection#toString():::Returns a string describing this PermissionCollection object, providing information about all the permissions it contains:::this.elements->super.toString->sb.append->sb.append->enum_.nextElement().toString->sb.append->sb.append->enum_.hasMoreElements->sb.append->sb.toString
Permissions#add(Permission):::Adds a permission object to the PermissionCollection for the class the permission belongs to:::this.isReadOnly->this.getPermissionCollection->pc.add
Permissions#implies(Permission):::Checks to see if this object's PermissionCollection for permissions of the specified permission's class implies the permissions expressed in the permission object:::this.getPermissionCollection->pc.implies
Permissions#elements():::Returns an enumeration of all the Permission objects in all the PermissionCollections in this Permissions object.:::permsMap.values().iterator
PermissionsHash#add(Permission):::Adds a permission to the PermissionsHash.:::permsMap.put
PermissionsHash#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".:::permsMap.get->p_.implies->permsMap.values
PermissionsHash#elements():::Returns an enumeration of all the Permission objects in the container.:::permsMap.elements
PKCS12Attribute#getName():::Returns the attribute's ASN.1 Object Identifier represented as a list of dot-separated integers.:::
PKCS12Attribute#getValue():::Returns the attribute's ASN.1 DER-encoded value as a string:::
PKCS12Attribute#getEncoded():::Returns the attribute's ASN.1 DER encoding.:::encoded.clone
PKCS12Attribute#equals(Object):::Compares this PKCS12Attribute and a specified object for equality.:::Arrays.equals
PKCS12Attribute#hashCode():::Returns the hashcode for this PKCS12Attribute:::Arrays.hashCode
PKCS12Attribute#toString():::Returns a string representation of this PKCS12Attribute.:::
Policy#isSet():::package private for AccessControlContext and ProtectionDomain:::
Policy#getPolicy():::Returns the installed Policy object:::System.getSecurityManager->sm.checkPermission->this.getPolicyNoCheck
Policy#getPolicyNoCheck():::Returns the installed Policy object, skipping the security check:::this.loadPolicyProvider
Policy#setPolicy(Policy):::Sets the system-wide Policy object:::System.getSecurityManager->sm.checkPermission->this.initPolicy
Policy#getInstance(String, Policy.Parameters):::Returns a Policy object of the specified type:::Objects.requireNonNull->this.checkPermission->this.handleException->GetInstance.getInstance
Policy#getInstance(String, Policy.Parameters, String):::Returns a Policy object of the specified type:::Objects.requireNonNull->provider.length->this.checkPermission->this.handleException->GetInstance.getInstance
Policy#getInstance(String, Policy.Parameters, Provider):::Returns a Policy object of the specified type:::Objects.requireNonNull->this.checkPermission->this.handleException->GetInstance.getInstance
Policy#getProvider():::Return the Provider of this Policy:::
Policy#getType():::Return the type of this Policy:::
Policy#getParameters():::Return Policy parameters:::
Policy#getPermissions(CodeSource):::Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource:::
Policy#getPermissions(ProtectionDomain):::Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain:::this.initPolicy->pdMapping.get->e.nextElement->perms.add->e.hasMoreElements->pc.elements->domain.getCodeSource->this.getPermissions->domain.getPermissions->this.addStaticPerms
Policy#implies(ProtectionDomain, Permission):::Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted.:::this.initPolicy->pdMapping.get->pc.implies->this.getPermissions->pdMapping.put->pc.implies
Policy#refresh():::Refreshes/reloads the policy configuration:::
PolicySpi#engineImplies(ProtectionDomain, Permission):::Check whether the policy has granted a Permission to a ProtectionDomain.:::
PolicySpi#engineRefresh():::Refreshes/reloads the policy configuration:::
PolicySpi#engineGetPermissions(CodeSource):::Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource:::
PolicySpi#engineGetPermissions(ProtectionDomain):::Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain:::
Principal#equals(Object):::Compares this principal to the specified object:::
Principal#toString():::Returns a string representation of this principal.:::
Principal#hashCode():::Returns a hashcode for this principal.:::
Principal#getName():::Returns the name of this principal.:::
Principal#implies(Subject):::Returns true if the specified subject is implied by this principal.:::subject.getPrincipals().contains
PrivilegedAction#run():::Performs the computation:::
PrivilegedActionException#getException():::Returns the exception thrown by the privileged computation that resulted in this PrivilegedActionException:::
PrivilegedActionException#getCause():::Returns the cause of this exception (the exception thrown by the privileged computation that resulted in this PrivilegedActionException).:::
ProtectionDomain#getCodeSource():::Returns the CodeSource of this domain.:::
ProtectionDomain#getClassLoader():::Returns the ClassLoader of this domain.:::
ProtectionDomain#getPrincipals():::Returns an array of principals for this domain.:::this.principals.clone
ProtectionDomain#getPermissions():::Returns the static permissions granted to this domain.:::
ProtectionDomain#staticPermissionsOnly():::Returns true if this domain contains only static permissions and does not check the current Policy at the time of permission checking.:::
ProtectionDomain#implies(Permission):::Check and see if this ProtectionDomain implies the permissions expressed in the Permission object:::Policy.getPolicyNoCheck().implies->permissions.implies
ProtectionDomain#impliesWithAltFilePerm(Permission):::This method has almost the same logic flow as #implies but it ensures some level of FilePermission compatibility after JDK-8164705:::this.getClass->this.implies->Policy.getPolicyNoCheck->policy.implies->FilePermCompat.newPermUsingAltPath->policy.implies->policy.implies->permissions.implies->FilePermCompat.newPermUsingAltPath->permissions.implies
ProtectionDomain#toString():::Convert a ProtectionDomain to a String.:::principals[i].getClass().getName->principals[i].getName->palBuf.append->palBuf.append->palBuf.append->palBuf.toString->Policy.isSet->this.seeAllp->this.getPermissions->this.mergePermissions
Provider#configure(String):::Apply the supplied configuration argument to this provider instance and return the configured provider:::
Provider#isConfigured():::Check if this provider instance has been configured.:::
Provider#getName():::Returns the name of this provider.:::
Provider#getVersion():::Returns the version number for this provider.:::
Provider#getVersionStr():::Returns the version string for this provider.:::
Provider#getInfo():::Returns a human-readable description of the provider and its services:::
Provider#toString():::Returns a string with the name and the version string of this provider.:::
Provider#clear():::Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider:::this.check->debug.println->this.implClear
Provider#load(InputStream):::Reads a property list (key and element pairs) from the input stream.:::this.check->debug.println->tempProperties.load->this.implPutAll
Provider#putAll(Map):::Copies all of the mappings from the specified Map to this provider:::this.check->debug.println->this.implPutAll
Provider#entrySet():::Returns an unmodifiable Set view of the property entries contained in this Provider.:::this.checkInitialized->super.entrySet->Collections.unmodifiableMap(this).entrySet
Provider#keySet():::Returns an unmodifiable Set view of the property keys contained in this provider.:::this.checkInitialized->super.keySet->Collections.unmodifiableSet
Provider#values():::Returns an unmodifiable Collection view of the property values contained in this provider.:::this.checkInitialized->super.values->Collections.unmodifiableCollection
Provider#put(Object, Object):::Sets the key property to have the specified value:::this.check->debug.println->this.implPut
Provider#putIfAbsent(Object, Object):::If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value:::this.check->debug.println->this.implPutIfAbsent
Provider#remove(Object):::Removes the key property (and its corresponding value):::this.check->debug.println->this.implRemove
Provider#remove(Object, Object):::Removes the entry for the specified key only if it is currently mapped to the specified value:::this.check->debug.println->this.implRemove
Provider#replace(Object, Object, Object):::Replaces the entry for the specified key only if currently mapped to the specified value:::this.check->debug.println->this.implReplace
Provider#replace(Object, Object):::Replaces the entry for the specified key only if it is currently mapped to some value:::this.check->debug.println->this.implReplace
Provider#replaceAll(BiFunction):::Replaces each entry's value with the result of invoking the given function on that entry, in the order entries are returned by an entry set iterator, until all entries have been processed or the function throws an exception:::this.check->debug.println->this.implReplaceAll
Provider#compute(Object, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping):::this.check->this.check->debug.println->this.implCompute
Provider#computeIfAbsent(Object, Function):::If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null:::this.check->this.check->debug.println->this.implComputeIfAbsent
Provider#computeIfPresent(Object, BiFunction):::If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value:::this.check->this.check->debug.println->this.implComputeIfPresent
Provider#merge(Object, Object, BiFunction):::If the specified key is not already associated with a value or is associated with null, associates it with the given value:::this.check->this.check->debug.println->this.implMerge
Provider#getService(String, String):::Get the service describing this Provider's implementation of the specified type of this algorithm or alias:::this.checkInitialized->key.matches->serviceMap.get->this.ensureLegacyParsed->legacyMap.get
Provider#getServices():::Get an unmodifiable Set of all services supported by this Provider.:::this.checkInitialized->this.ensureLegacyParsed->serviceMap.values->set.addAll->legacyMap.values->set.addAll->Collections.unmodifiableSet
Provider#putService(Service):::Add a service:::this.check->debug.println->s.getProvider->s.getType->s.getAlgorithm->serviceMap.get->this.implRemoveService->serviceMap.put->serviceMap.put->s.getAliases->this.putPropertyStrings
Provider#removeService(Service):::Remove a service previously added using #putService putService():::this.check->debug.println->this.implRemoveService
Provider.Service#getType():::Get the type of this service:::
Provider.Service#getAlgorithm():::Return the name of the algorithm of this service:::
Provider.Service#getProvider():::Return the Provider of this service.:::
Provider.Service#getClassName():::Return the name of the class implementing this service.:::
Provider.Service#getAttribute(String):::Return the value of the specified attribute or null if this attribute is not set for this Service.:::attributes.get
Provider.Service#newInstance(Object):::Return a new instance of the implementation described by this service:::provider.getService->provider.getName->provider.getName->e.getCause->provider.getName->knownEngines.get->Class.forName->constructorParameter.getClass->ctrParamClz.isAssignableFrom->cap.constructorParameterClassName.replace->constructorParameter.getClass->this.getImplClass->this.newInstanceUtil
Provider.Service#supportsParameter(Object):::Test whether this Service can use the specified parameter:::knownEngines.get->this.hasKeyAttributes->this.supportsKeyFormat->this.supportsKeyClass
Provider.Service#toString():::Return a String representation of this service.:::aliases.isEmpty->aliases.toString->attributes.isEmpty->attributes.toString->provider.getName
SecureClassLoader#defineClass(String, byte[], int, int, CodeSource):::Converts an array of bytes into an instance of class Class, with an optional CodeSource:::this.getProtectionDomain->this.defineClass
SecureClassLoader#defineClass(String, java.nio.ByteBuffer, CodeSource):::Converts a java.nio.ByteBuffer ByteBuffer into an instance of class Class, with an optional CodeSource:::this.getProtectionDomain->this.defineClass
SecureClassLoader#getPermissions(CodeSource):::Returns the permissions for the given CodeSource object:::this.check
SecureRandom#getInstance(String):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm:::Objects.requireNonNull->GetInstance.getInstance
SecureRandom#getInstance(String, String):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm:::Objects.requireNonNull->GetInstance.getInstance
SecureRandom#getInstance(String, Provider):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm:::Objects.requireNonNull->GetInstance.getInstance
SecureRandom#getInstance(String, SecureRandomParameters):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request:::Objects.requireNonNull->GetInstance.getInstance
SecureRandom#getInstance(String, SecureRandomParameters, String):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request:::Objects.requireNonNull->GetInstance.getInstance
SecureRandom#getInstance(String, SecureRandomParameters, Provider):::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request:::Objects.requireNonNull->GetInstance.getInstance
SecureRandom#getSecureRandomSpi():::Returns the SecureRandomSpi of this SecureRandom object.:::
SecureRandom#getProvider():::Returns the provider of this SecureRandom object.:::
SecureRandom#getAlgorithm():::Returns the name of the algorithm implemented by this SecureRandom object.:::Objects.toString
SecureRandom#toString():::Returns a Human-readable string representation of this SecureRandom.:::secureRandomSpi.toString
SecureRandom#getParameters():::Returns the effective SecureRandomParameters for this SecureRandom instance:::secureRandomSpi.engineGetParameters
SecureRandom#setSeed(byte[]):::Reseeds this random object with the given seed:::secureRandomSpi.engineSetSeed->secureRandomSpi.engineSetSeed
SecureRandom#setSeed(long):::Reseeds this random object, using the eight bytes contained in the given long seed:::this.longToByteArray->this.setSeed
SecureRandom#nextBytes(byte[]):::Generates a user-specified number of random bytes.:::secureRandomSpi.engineNextBytes->secureRandomSpi.engineNextBytes
SecureRandom#nextBytes(byte[], SecureRandomParameters):::Generates a user-specified number of random bytes with additional parameters.:::Objects.requireNonNull->secureRandomSpi.engineNextBytes->Objects.requireNonNull->secureRandomSpi.engineNextBytes
SecureRandom#next(int):::Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros):::this.nextBytes
SecureRandom#getSeed(int):::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself:::seedGen.generateSeed
SecureRandom#generateSeed(int):::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself:::secureRandomSpi.engineGenerateSeed->secureRandomSpi.engineGenerateSeed
SecureRandom#getInstanceStrong():::Returns a SecureRandom object that was selected by using the algorithms/providers specified in the securerandom.strongAlgorithms Security property:::AccessController.doPrivileged->property.length->(m = StrongPatternHolder.pattern.matcher(remainder)).matches->m.group->m.group->SecureRandom.getInstance->SecureRandom.getInstance->m.group
SecureRandom#reseed():::Reseeds this SecureRandom with entropy input read from its entropy source.:::secureRandomSpi.engineReseed->secureRandomSpi.engineReseed
SecureRandom#reseed(SecureRandomParameters):::Reseeds this SecureRandom with entropy input read from its entropy source with additional parameters:::secureRandomSpi.engineReseed->secureRandomSpi.engineReseed
SecureRandomSpi#engineSetSeed(byte[]):::Reseeds this random object with the given seed:::
SecureRandomSpi#engineNextBytes(byte[]):::Generates a user-specified number of random bytes:::
SecureRandomSpi#engineNextBytes(byte[], SecureRandomParameters):::Generates a user-specified number of random bytes with additional parameters:::
SecureRandomSpi#engineGenerateSeed(int):::Returns the given number of seed bytes:::
SecureRandomSpi#engineReseed(SecureRandomParameters):::Reseeds this random object with entropy input read from its entropy source with additional parameters:::
SecureRandomSpi#engineGetParameters():::Returns the effective SecureRandomParameters for this SecureRandom instance.:::
SecureRandomSpi#toString():::Returns a Human-readable string representation of this SecureRandom.:::getClass().getSimpleName
Security#getAlgorithmProperty(String, String):::Gets a specified property for an algorithm:::this.getProviderProperty
Security#insertProviderAt(Provider, int):::Adds a new provider, at a specified position:::provider.getName->this.checkInsertProvider->Providers.getFullProviderList->ProviderList.insertAt->Providers.setProviderList->newList.getIndex
Security#addProvider(Provider):::Adds a provider to the next position available:::this.insertProviderAt
Security#removeProvider(String):::Removes the provider with the specified name:::this.check->Providers.getFullProviderList->ProviderList.remove->Providers.setProviderList
Security#getProviders():::Returns an array containing all the installed providers:::Providers.getFullProviderList().toArray
Security#getProvider(String):::Returns the provider installed with the specified name, if any:::Providers.getProviderList().getProvider
Security#getProviders(String):::Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed:::filter.indexOf->filter.substring->filter.substring->hashtableFilter.put->this.getProviders
Security#getProviders(Map):::Returns an array containing all installed providers that satisfy the specified selection criteria, or null if no such providers have been installed:::Security.getProviders->filter.keySet->ite.next->filter.get->this.getAllQualifyingCandidates->newCandidates.isEmpty->cansIte.next->newCandidates.contains->cansIte.remove->cansIte.hasNext->candidates.iterator->ite.hasNext->keySet.iterator->candidates.isEmpty->candidates.toArray
Security#getProperty(String):::Gets a security property value:::System.getSecurityManager->sm.checkPermission->props.getProperty->name.trim
Security#setProperty(String, String):::Sets a security property value:::this.check->props.put->this.invalidateSMCache->spe.commit->EventHelper.isLoggingSecurity->EventHelper.logSecurityPropertyEvent
Security#getAlgorithms(String):::Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore):::serviceName.length->serviceName.endsWith->Collections.emptySet->Security.getProviders->((String) e.nextElement()).toUpperCase->serviceName.toUpperCase->currentKey.startsWith->currentKey.indexOf->serviceName.length->currentKey.substring->result.add->e.hasMoreElements->providers[i].keys->Collections.unmodifiableSet
Signature#getInstance(String):::Returns a Signature object that implements the specified signature algorithm:::Objects.requireNonNull->algorithm.equalsIgnoreCase->GetInstance.getServices->GetInstance.getServices->list.iterator->t.hasNext->t.next->this.isSpi->GetInstance.getInstance->this.getInstance->t.hasNext
Signature#getInstance(String, String):::Returns a Signature object that implements the specified signature algorithm:::Objects.requireNonNull->algorithm.equalsIgnoreCase->provider.length->Security.getProvider->this.getInstanceRSA->GetInstance.getInstance->this.getInstance
Signature#getInstance(String, Provider):::Returns a Signature object that implements the specified signature algorithm:::Objects.requireNonNull->algorithm.equalsIgnoreCase->this.getInstanceRSA->GetInstance.getInstance->this.getInstance
Signature#getProvider():::Returns the provider of this signature object.:::this.chooseFirstProvider
Signature#initVerify(PublicKey):::Initializes this object for verification:::this.engineInitVerify->this.getProviderName->pdebug.println
Signature#initVerify(PublicKey, AlgorithmParameterSpec):::Initialize this object for verification:::this.engineInitVerify->this.getProviderName->pdebug.println
Signature#initVerify(Certificate):::Initializes this object for verification, using the public key from the given certificate:::this.getPublicKeyFromCert->this.engineInitVerify->this.getProviderName->pdebug.println
Signature#initVerify(Certificate, AlgorithmParameterSpec):::Initializes this object for verification, using the public key from the given certificate:::this.getPublicKeyFromCert->this.engineInitVerify->this.getProviderName->pdebug.println
Signature#initSign(PrivateKey):::Initialize this object for signing:::this.engineInitSign->this.getProviderName->pdebug.println
Signature#initSign(PrivateKey, SecureRandom):::Initialize this object for signing:::this.engineInitSign->this.getProviderName->pdebug.println
Signature#initSign(PrivateKey, AlgorithmParameterSpec, SecureRandom):::Initialize this object for signing:::this.engineInitSign->this.getProviderName->pdebug.println
Signature#sign():::Returns the signature bytes of all the data updated:::this.engineSign
Signature#sign(byte[], int, int):::Finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset:::this.engineSign
Signature#verify(byte[]):::Verifies the passed-in signature:::this.engineVerify
Signature#verify(byte[], int, int):::Verifies the passed-in signature in the specified array of bytes, starting at the specified offset:::this.engineVerify
Signature#update(byte):::Updates the data to be signed or verified by a byte.:::this.engineUpdate
Signature#update(byte[]):::Updates the data to be signed or verified, using the specified array of bytes.:::this.update
Signature#update(byte[], int, int):::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.:::this.engineUpdate
Signature#update(ByteBuffer):::Updates the data to be signed or verified using the specified ByteBuffer:::this.engineUpdate
Signature#getAlgorithm():::Returns the name of the algorithm for this signature object.:::
Signature#toString():::Returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used.:::this.getAlgorithm
Signature#setParameter(String, Object):::Sets the specified algorithm parameter to the specified value:::this.engineSetParameter
Signature#setParameter(AlgorithmParameterSpec):::Initializes this signature engine with the specified parameter set.:::this.engineSetParameter
Signature#getParameters():::Returns the parameters used with this signature object:::this.engineGetParameters
Signature#getParameter(String):::Gets the value of the specified algorithm parameter:::this.engineGetParameter
Signature#clone():::Returns a clone if the implementation is cloneable.:::super.clone
SignatureSpi#engineInitVerify(PublicKey):::Initializes this signature object with the specified public key for verification operations.:::
SignatureSpi#engineInitVerify(PublicKey, AlgorithmParameterSpec):::Initializes this signature object with the specified public key for verification operations.:::this.engineSetParameter->this.engineInitVerify
SignatureSpi#engineInitSign(PrivateKey):::Initializes this signature object with the specified private key for signing operations.:::
SignatureSpi#engineInitSign(PrivateKey, SecureRandom):::Initializes this signature object with the specified private key and source of randomness for signing operations:::this.engineInitSign
SignatureSpi#engineInitSign(PrivateKey, AlgorithmParameterSpec, SecureRandom):::Initializes this signature object with the specified private key and source of randomness for signing operations:::this.engineSetParameter->this.engineInitSign
SignatureSpi#engineUpdate(byte):::Updates the data to be signed or verified using the specified byte.:::
SignatureSpi#engineUpdate(byte[], int, int):::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.:::
SignatureSpi#engineUpdate(ByteBuffer):::Updates the data to be signed or verified using the specified ByteBuffer:::input.hasRemaining->input.hasArray->input.remaining->JCAUtil.getTempArraySize->Math.min->input.get->this.engineUpdate->input.array->input.arrayOffset->input.position->input.limit->this.engineUpdate->input.position
SignatureSpi#engineSign():::Returns the signature bytes of all the data updated so far:::
SignatureSpi#engineSign(byte[], int, int):::Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset:::this.engineSign->System.arraycopy
SignatureSpi#engineVerify(byte[]):::Verifies the passed-in signature.:::
SignatureSpi#engineVerify(byte[], int, int):::Verifies the passed-in signature in the specified array of bytes, starting at the specified offset:::System.arraycopy->this.engineVerify
SignatureSpi#engineSetParameter(String, Object):::Sets the specified algorithm parameter to the specified value:::
SignatureSpi#engineSetParameter(AlgorithmParameterSpec):::This method is overridden by providers to initialize this signature engine with the specified parameter set.:::
SignatureSpi#engineGetParameters():::This method is overridden by providers to return the parameters used with this signature engine:::
SignatureSpi#engineGetParameter(String):::Gets the value of the specified algorithm parameter:::
SignatureSpi#clone():::Returns a clone if the implementation is cloneable.:::super.clone
SignedObject#getObject():::Retrieves the encapsulated object:::a.readObject->b.close->a.close
SignedObject#getSignature():::Retrieves the signature on the signed object, in the form of a byte array.:::this.signature.clone
SignedObject#getAlgorithm():::Retrieves the name of the signature algorithm.:::
SignedObject#verify(PublicKey, Signature):::Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine.:::verificationEngine.initVerify->this.content.clone->verificationEngine.update->this.signature.clone->verificationEngine.verify
Signer#getPrivateKey():::Returns this signer's private key:::this.check
Signer#setKeyPair(KeyPair):::Sets the key pair (public key and private key) for this signer:::this.check->pair.getPublic->pair.getPrivate->pae.getException->AccessController.doPrivileged
Signer#toString():::Returns a string of information about the signer.:::super.toString
Timestamp#getTimestamp():::Returns the date and time when the timestamp was generated.:::timestamp.getTime
Timestamp#getSignerCertPath():::Returns the certificate path for the Timestamping Authority.:::
Timestamp#hashCode():::Returns the hash code value for this timestamp:::timestamp.hashCode->signerCertPath.hashCode
Timestamp#equals(Object):::Tests for equality between the specified object and this timestamp:::that.getTimestamp->timestamp.equals->that.getSignerCertPath->signerCertPath.equals
Timestamp#toString():::Returns a string describing this timestamp.:::sb.append->sb.append->signerCertPath.getCertificates->certs.isEmpty->sb.append->certs.get->sb.append->sb.append->sb.toString
UnresolvedPermission#resolve(Permission, java.security.cert.Certificate[]):::try and resolve this permission using the class loader of the permission that was passed in.:::this.certs[i].equals->debug.println->nsme.printStackTrace->debug.println->e.printStackTrace->p.getClass->pc.getConstructor->c.newInstance->pc.getConstructor->c.newInstance->pc.getConstructor->c.newInstance->pc.getConstructor->c.newInstance->pc.getConstructor->c.newInstance->pc.getConstructor->c.newInstance
UnresolvedPermission#implies(Permission):::This method always returns false for unresolved permissions:::
UnresolvedPermission#equals(Object):::Checks two UnresolvedPermission objects for equality:::this.type.equals->this.name.equals->this.actions.equals->this.certs[i].equals->that.certs[i].equals
UnresolvedPermission#getActions():::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for an UnresolvedPermission:::
UnresolvedPermission#getUnresolvedType():::Get the type (class name) of the underlying permission that has not been resolved.:::
UnresolvedPermission#getUnresolvedName():::Get the target name of the underlying permission that has not been resolved.:::
UnresolvedPermission#getUnresolvedActions():::Get the actions for the underlying permission that has not been resolved.:::
UnresolvedPermission#getUnresolvedCerts():::Get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved.:::certs.clone
UnresolvedPermission#toString():::Returns a string describing this UnresolvedPermission:::
UnresolvedPermissionCollection#add(Permission):::Adds a permission to this UnresolvedPermissionCollection:::up.getName->perms.compute
UnresolvedPermissionCollection#getUnresolvedPermissions(Permission):::get any unresolved permissions of the same type as p, and return the List containing them.:::p.getClass().getName->perms.get
UnresolvedPermissionCollection#implies(Permission):::always returns false for unresolved permissions:::
UnresolvedPermissionCollection#elements():::Returns an enumeration of all the UnresolvedPermission lists in the container.:::results.addAll->perms.values->Collections.enumeration
URIParameter#getURI():::Returns the URI.:::

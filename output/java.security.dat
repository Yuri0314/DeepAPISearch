java.security.AccessControlContext#getDebug()->Debug::: access control context get debug
java.security.AccessControlContext#getContext()->ProtectionDomain[]:::Returns this context's context.
java.security.AccessControlContext#isPrivileged()->boolean:::Returns true if this context is privileged.
java.security.AccessControlContext#getAssignedCombiner()->DomainCombiner:::get the assigned combiner from the privileged or inherited context
java.security.AccessControlContext#getDomainCombiner()->DomainCombiner:::Get the DomainCombiner associated with this AccessControlContext.
java.security.AccessControlContext#getCombiner()->DomainCombiner:::package private for AccessController
java.security.AccessControlContext#isAuthorized()->boolean::: access control context is authorized
java.security.AccessControlContext#checkPermission(Permission)->void:::Determines whether the access request indicated by the specified permission should be allowed or denied, based on the security policy currently in effect, and the context in this object
java.security.AccessControlContext#optimize()->AccessControlContext:::Take the stack-based context (this) and combine it with the privileged or inherited context, if need be
java.security.AccessControlContext#equals(Object)->boolean:::Checks two AccessControlContext objects for equality
java.security.AccessControlContext#hashCode()->int::: access control context hash code
java.security.AccessControlException#getPermission()->Permission:::Gets the Permission object associated with this exception, or null if there was no corresponding Permission object.
java.security.AccessController#doPrivileged(PrivilegedAction)->T::: access controller do privileged
java.security.AccessController#doPrivilegedWithCombiner(PrivilegedAction)->T:::Performs the specified PrivilegedAction with privileges enabled
java.security.AccessController#doPrivileged(PrivilegedAction, AccessControlContext)->T:::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext
java.security.AccessController#doPrivileged(PrivilegedAction, AccessControlContext, Permission...)->T:::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
java.security.AccessController#doPrivilegedWithCombiner(PrivilegedAction, AccessControlContext, Permission...)->T:::Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
java.security.AccessController#doPrivileged(PrivilegedExceptionAction)->T:::Performs the specified PrivilegedExceptionAction with privileges enabled
java.security.AccessController#doPrivilegedWithCombiner(PrivilegedExceptionAction)->T:::Performs the specified PrivilegedExceptionAction with privileges enabled
java.security.AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext)->T:::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext
java.security.AccessController#doPrivileged(PrivilegedExceptionAction, AccessControlContext, Permission...)->T:::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
java.security.AccessController#doPrivilegedWithCombiner(PrivilegedExceptionAction, AccessControlContext, Permission...)->T:::Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments
java.security.AccessController#getInheritedAccessControlContext()->AccessControlContext::: access controller get inherited access control context
java.security.AccessController#getContext()->AccessControlContext::: access controller get context
java.security.AccessController#checkPermission(Permission)->void::: access controller check permission
java.security.AlgorithmConstraints#permits(Set, String, AlgorithmParameters)->boolean:::Determines whether an algorithm is granted permission for the specified cryptographic primitives.
java.security.AlgorithmConstraints#permits(Set, Key)->boolean:::Determines whether a key is granted permission for the specified cryptographic primitives
java.security.AlgorithmConstraints#permits(Set, String, Key, AlgorithmParameters)->boolean:::Determines whether an algorithm and the corresponding key are granted permission for the specified cryptographic primitives.
java.security.AlgorithmParameterGenerator#getAlgorithm()->String:::Returns the standard name of the algorithm this parameter generator is associated with.
java.security.AlgorithmParameterGenerator#getInstance(String)->AlgorithmParameterGenerator:::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm
java.security.AlgorithmParameterGenerator#getInstance(String, String)->AlgorithmParameterGenerator:::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm
java.security.AlgorithmParameterGenerator#getInstance(String, Provider)->AlgorithmParameterGenerator:::Returns an AlgorithmParameterGenerator object for generating a set of parameters to be used with the specified algorithm
java.security.AlgorithmParameterGenerator#getProvider()->Provider:::Returns the provider of this algorithm parameter generator object.
java.security.AlgorithmParameterGenerator#init(int)->void:::Initializes this parameter generator for a certain size
java.security.AlgorithmParameterGenerator#init(int, SecureRandom)->void:::Initializes this parameter generator for a certain size and source of randomness.
java.security.AlgorithmParameterGenerator#init(AlgorithmParameterSpec)->void:::Initializes this parameter generator with a set of algorithm-specific parameter generation values
java.security.AlgorithmParameterGenerator#init(AlgorithmParameterSpec, SecureRandom)->void:::Initializes this parameter generator with a set of algorithm-specific parameter generation values.
java.security.AlgorithmParameterGenerator#generateParameters()->AlgorithmParameters:::Generates the parameters.
java.security.AlgorithmParameterGeneratorSpi#engineInit(int, SecureRandom)->void:::Initializes this parameter generator for a certain size and source of randomness.
java.security.AlgorithmParameterGeneratorSpi#engineInit(AlgorithmParameterSpec, SecureRandom)->void:::Initializes this parameter generator with a set of algorithm-specific parameter generation values.
java.security.AlgorithmParameterGeneratorSpi#engineGenerateParameters()->AlgorithmParameters:::Generates the parameters.
java.security.AlgorithmParameters#getAlgorithm()->String:::Returns the name of the algorithm associated with this parameter object.
java.security.AlgorithmParameters#getInstance(String)->AlgorithmParameters:::Returns a parameter object for the specified algorithm
java.security.AlgorithmParameters#getInstance(String, String)->AlgorithmParameters:::Returns a parameter object for the specified algorithm
java.security.AlgorithmParameters#getInstance(String, Provider)->AlgorithmParameters:::Returns a parameter object for the specified algorithm
java.security.AlgorithmParameters#getProvider()->Provider:::Returns the provider of this parameter object.
java.security.AlgorithmParameters#init(AlgorithmParameterSpec)->void:::Initializes this parameter object using the parameters specified in paramSpec.
java.security.AlgorithmParameters#init(byte[])->void:::Imports the specified parameters and decodes them according to the primary decoding format for parameters
java.security.AlgorithmParameters#init(byte[], String)->void:::Imports the parameters from params and decodes them according to the specified decoding scheme
java.security.AlgorithmParameters#getParameterSpec(Class)->T:::Returns a (transparent) specification of this parameter object
java.security.AlgorithmParameters#getEncoded()->byte[]:::Returns the parameters in their primary encoding format
java.security.AlgorithmParameters#getEncoded(String)->byte[]:::Returns the parameters encoded in the specified scheme
java.security.AlgorithmParameters#toString()->String:::Returns a formatted string describing the parameters.
java.security.AlgorithmParametersSpi#engineInit(AlgorithmParameterSpec)->void:::Initializes this parameters object using the parameters specified in paramSpec.
java.security.AlgorithmParametersSpi#engineInit(byte[])->void:::Imports the specified parameters and decodes them according to the primary decoding format for parameters
java.security.AlgorithmParametersSpi#engineInit(byte[], String)->void:::Imports the parameters from params and decodes them according to the specified decoding format
java.security.AlgorithmParametersSpi#engineGetParameterSpec(Class)->T:::Returns a (transparent) specification of this parameters object
java.security.AlgorithmParametersSpi#engineGetEncoded()->byte[]:::Returns the parameters in their primary encoding format
java.security.AlgorithmParametersSpi#engineGetEncoded(String)->byte[]:::Returns the parameters encoded in the specified format
java.security.AlgorithmParametersSpi#engineToString()->String:::Returns a formatted string describing the parameters.
java.security.AllPermission#implies(Permission)->boolean:::Checks if the specified permission is "implied" by this object
java.security.AllPermission#equals(Object)->boolean:::Checks two AllPermission objects for equality
java.security.AllPermission#hashCode()->int::: all permission hash code
java.security.AllPermission#getActions()->String:::Returns the canonical string representation of the actions.
java.security.AllPermission#newPermissionCollection()->PermissionCollection:::Returns a new PermissionCollection object for storing AllPermission objects.
java.security.AllPermissionCollection#add(Permission)->void::: all permission collection add
java.security.AllPermissionCollection#implies(Permission)->boolean::: all permission collection implies
java.security.AllPermissionCollection#elements()->Enumeration:::Returns an enumeration of all the AllPermission objects in the container.
java.security.AuthProvider#login(Subject, CallbackHandler)->void:::Log in to this provider
java.security.AuthProvider#logout()->void:::Log out from this provider.
java.security.AuthProvider#setCallbackHandler(CallbackHandler)->void:::Set a CallbackHandler
java.security.BasicPermission#implies(Permission)->boolean:::Checks if the specified permission is "implied" by this object
java.security.BasicPermission#equals(Object)->boolean:::Checks two BasicPermission objects for equality
java.security.BasicPermission#hashCode()->int:::Returns the hash code value for this object
java.security.BasicPermission#getActions()->String:::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for a BasicPermission.
java.security.BasicPermission#newPermissionCollection()->PermissionCollection:::Returns a new PermissionCollection object for storing BasicPermission objects
java.security.BasicPermission#getCanonicalName()->String:::Returns the canonical name of this BasicPermission
java.security.BasicPermissionCollection#add(Permission)->void:::Adds a permission to the BasicPermissions
java.security.BasicPermissionCollection#implies(Permission)->boolean:::Check and see if this set of permissions implies the permissions expressed in "permission".
java.security.BasicPermissionCollection#elements()->Enumeration:::Returns an enumeration of all the BasicPermission objects in the container.
java.security.Certificate#getGuarantor()->Principal:::Returns the guarantor of the certificate, that is, the principal guaranteeing that the public key associated with this certificate is that of the principal associated with this certificate
java.security.Certificate#getPrincipal()->Principal:::Returns the principal of the principal-key pair being guaranteed by the guarantor.
java.security.Certificate#getPublicKey()->PublicKey:::Returns the key of the principal-key pair being guaranteed by the guarantor.
java.security.Certificate#encode(OutputStream)->void:::Encodes the certificate to an output stream in a format that can be decoded by the decode method.
java.security.Certificate#decode(InputStream)->void:::Decodes a certificate from an input stream
java.security.Certificate#getFormat()->String:::Returns the name of the coding format
java.security.Certificate#toString(boolean)->String:::Returns a string that represents the contents of the certificate.
java.security.CodeSigner#getSignerCertPath()->CertPath:::Returns the signer's certificate path.
java.security.CodeSigner#getTimestamp()->Timestamp:::Returns the signature timestamp.
java.security.CodeSigner#hashCode()->int:::Returns the hash code value for this code signer
java.security.CodeSigner#equals(Object)->boolean:::Tests for equality between the specified object and this code signer
java.security.CodeSigner#toString()->String:::Returns a string describing this code signer.
java.security.CodeSource#hashCode()->int:::Returns the hash code value for this object.
java.security.CodeSource#equals(Object)->boolean:::Tests for equality between the specified object and this object
java.security.CodeSource#getLocation()->URL:::Returns the location associated with this CodeSource.
java.security.CodeSource#getLocationNoFragString()->String:::Returns a String form of the URL for use as a key in HashMaps/Sets.
java.security.CodeSource#getCertificates()->java.security.cert.Certificate[]:::Returns the certificates associated with this CodeSource
java.security.CodeSource#getCodeSigners()->CodeSigner[]:::Returns the code signers associated with this CodeSource
java.security.CodeSource#implies(CodeSource)->boolean:::Returns true if this CodeSource object "implies" the specified CodeSource
java.security.CodeSource#matchCerts(CodeSource, boolean)->boolean:::Returns true if all the certs in this CodeSource are also in that.
java.security.CodeSource#toString()->String:::Returns a string describing this CodeSource, telling its URL and certificates.
java.security.DigestInputStream#getMessageDigest()->MessageDigest:::Returns the message digest associated with this stream.
java.security.DigestInputStream#setMessageDigest(MessageDigest)->void:::Associates the specified message digest with this stream.
java.security.DigestInputStream#read()->int:::Reads a byte, and updates the message digest (if the digest function is on)
java.security.DigestInputStream#read(byte[], int, int)->int:::Reads into a byte array, and updates the message digest (if the digest function is on)
java.security.DigestInputStream#on(boolean)->void:::Turns the digest function on or off
java.security.DigestInputStream#toString()->String:::Prints a string representation of this digest input stream and its associated message digest object.
java.security.DigestOutputStream#getMessageDigest()->MessageDigest:::Returns the message digest associated with this stream.
java.security.DigestOutputStream#setMessageDigest(MessageDigest)->void:::Associates the specified message digest with this stream.
java.security.DigestOutputStream#write(int)->void:::Updates the message digest (if the digest function is on) using the specified byte, and in any case writes the byte to the output stream
java.security.DigestOutputStream#write(byte[], int, int)->void:::Updates the message digest (if the digest function is on) using the specified subarray, and in any case writes the subarray to the output stream
java.security.DigestOutputStream#on(boolean)->void:::Turns the digest function on or off
java.security.DigestOutputStream#toString()->String:::Prints a string representation of this digest output stream and its associated message digest object.
java.security.DomainCombiner#combine(ProtectionDomain[], ProtectionDomain[])->ProtectionDomain[]:::Modify or update the provided ProtectionDomains
java.security.DomainLoadStoreParameter#getConfiguration()->URI:::Gets the identifier for the domain configuration data.
java.security.DomainLoadStoreParameter#getProtectionParams()->Map:::Gets the keystore protection parameters for keystores in this domain.
java.security.DomainLoadStoreParameter#getProtectionParameter()->KeyStore.ProtectionParameter:::Gets the keystore protection parameters for this domain
java.security.DrbgParameters.Instantiation#getStrength()->int:::Returns the security strength in bits.
java.security.DrbgParameters.Instantiation#getCapability()->Capability:::Returns the capability.
java.security.DrbgParameters.Instantiation#getPersonalizationString()->byte[]:::Returns the personalization string as a byte array.
java.security.DrbgParameters.Instantiation#toString()->String:::Returns a Human-readable string representation of this Instantiation.
java.security.DrbgParameters.NextBytes#getStrength()->int:::Returns the security strength requested in bits.
java.security.DrbgParameters.NextBytes#getPredictionResistance()->boolean:::Returns whether prediction resistance is requested.
java.security.DrbgParameters.NextBytes#getAdditionalInput()->byte[]:::Returns the requested additional input.
java.security.DrbgParameters.Reseed#getPredictionResistance()->boolean:::Returns whether prediction resistance is requested.
java.security.DrbgParameters.Reseed#getAdditionalInput()->byte[]:::Returns the requested additional input.
java.security.DrbgParameters#instantiation(int, Capability, byte[])->Instantiation:::Generates a DrbgParameters.Instantiation object.
java.security.DrbgParameters#nextBytes(int, boolean, byte[])->NextBytes:::Generates a NextBytes object.
java.security.DrbgParameters#reseed(boolean, byte[])->Reseed:::Generates a Reseed object.
java.security.Guard#checkGuard(Object)->void:::Determines whether or not to allow access to the guarded object object
java.security.GuardedObject#getObject()->Object:::Retrieves the guarded object, or throws an exception if access to the guarded object is denied by the guard.
java.security.Identity#getName()->String:::Returns this identity's name.
java.security.Identity#getScope()->IdentityScope:::Returns this identity's scope.
java.security.Identity#getPublicKey()->PublicKey:::Returns this identity's public key.
java.security.Identity#setPublicKey(PublicKey)->void::: identity set public key
java.security.Identity#setInfo(String)->void:::Specifies a general information string for this identity
java.security.Identity#getInfo()->String:::Returns general information previously specified for this identity.
java.security.Identity#addCertificate(Certificate)->void:::Adds a certificate for this identity
java.security.Identity#removeCertificate(Certificate)->void:::Removes a certificate from this identity
java.security.Identity#certificates()->Certificate[]:::Returns a copy of all the certificates for this identity.
java.security.Identity#equals(Object)->boolean:::Tests for equality between the specified object and this identity
java.security.Identity#identityEquals(Identity)->boolean:::Tests for equality between the specified identity and this identity
java.security.Identity#fullName()->String:::Returns a parsable name for identity: identityName.scopeName
java.security.Identity#toString()->String:::Returns a short string describing this identity, telling its name and its scope (if any)
java.security.Identity#toString(boolean)->String:::Returns a string representation of this identity, with optionally more details than that provided by the toString method without any arguments
java.security.Identity#printKeys()->String::: identity print keys
java.security.Identity#printCertificates()->String::: identity print certificates
java.security.Identity#hashCode()->int:::Returns a hashcode for this identity.
java.security.IdentityScope#getSystemScope()->IdentityScope:::Returns the system's identity scope.
java.security.IdentityScope#setSystemScope(IdentityScope)->void:::Sets the system's identity scope
java.security.IdentityScope#size()->int:::Returns the number of identities within this identity scope.
java.security.IdentityScope#getIdentity(String)->Identity:::Returns the identity in this scope with the specified name (if any).
java.security.IdentityScope#getIdentity(Principal)->Identity:::Retrieves the identity whose name is the same as that of the specified principal
java.security.IdentityScope#getIdentity(PublicKey)->Identity:::Retrieves the identity with the specified public key.
java.security.IdentityScope#addIdentity(Identity)->void:::Adds an identity to this identity scope.
java.security.IdentityScope#removeIdentity(Identity)->void:::Removes an identity from this identity scope.
java.security.IdentityScope#identities()->Enumeration:::Returns an enumeration of all identities in this identity scope.
java.security.IdentityScope#toString()->String:::Returns a string representation of this identity scope, including its name, its scope name, and the number of identities in this identity scope.
java.security.Key#getAlgorithm()->String:::Returns the standard algorithm name for this key
java.security.Key#getFormat()->String:::Returns the name of the primary encoding format of this key, or null if this key does not support encoding
java.security.Key#getEncoded()->byte[]:::Returns the key in its primary encoding format, or null if this key does not support encoding.
java.security.KeyFactory#getInstance(String)->KeyFactory:::Returns a KeyFactory object that converts public/private keys of the specified algorithm
java.security.KeyFactory#getInstance(String, String)->KeyFactory:::Returns a KeyFactory object that converts public/private keys of the specified algorithm
java.security.KeyFactory#getInstance(String, Provider)->KeyFactory:::Returns a KeyFactory object that converts public/private keys of the specified algorithm
java.security.KeyFactory#getProvider()->Provider:::Returns the provider of this key factory object.
java.security.KeyFactory#getAlgorithm()->String:::Gets the name of the algorithm associated with this KeyFactory.
java.security.KeyFactory#generatePublic(KeySpec)->PublicKey:::Generates a public key object from the provided key specification (key material).
java.security.KeyFactory#generatePrivate(KeySpec)->PrivateKey:::Generates a private key object from the provided key specification (key material).
java.security.KeyFactory#getKeySpec(Key, Class)->T:::Returns a specification (key material) of the given key object
java.security.KeyFactory#translateKey(Key)->Key:::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.
java.security.KeyFactorySpi#engineGeneratePublic(KeySpec)->PublicKey:::Generates a public key object from the provided key specification (key material).
java.security.KeyFactorySpi#engineGeneratePrivate(KeySpec)->PrivateKey:::Generates a private key object from the provided key specification (key material).
java.security.KeyFactorySpi#engineGetKeySpec(Key, Class)->T:::Returns a specification (key material) of the given key object
java.security.KeyFactorySpi#engineTranslateKey(Key)->Key:::Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.
java.security.KeyPair#getPublic()->PublicKey:::Returns a reference to the public key component of this key pair.
java.security.KeyPair#getPrivate()->PrivateKey:::Returns a reference to the private key component of this key pair.
java.security.KeyPairGenerator#getAlgorithm()->String:::Returns the standard name of the algorithm for this key pair generator
java.security.KeyPairGenerator#getInstance(String)->KeyPairGenerator:::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
java.security.KeyPairGenerator#getInstance(String, String)->KeyPairGenerator:::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
java.security.KeyPairGenerator#getInstance(String, Provider)->KeyPairGenerator:::Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm
java.security.KeyPairGenerator#getProvider()->Provider:::Returns the provider of this key pair generator object.
java.security.KeyPairGenerator#disableFailover()->void::: key pair generator disable failover
java.security.KeyPairGenerator#initialize(int)->void:::Initializes the key pair generator for a certain keysize using a default parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness
java.security.KeyPairGenerator#initialize(int, SecureRandom)->void:::Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).
java.security.KeyPairGenerator#initialize(AlgorithmParameterSpec)->void:::Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness
java.security.KeyPairGenerator#initialize(AlgorithmParameterSpec, SecureRandom)->void:::Initializes the key pair generator with the given parameter set and source of randomness
java.security.KeyPairGenerator#genKeyPair()->KeyPair:::Generates a key pair
java.security.KeyPairGenerator#generateKeyPair()->KeyPair:::Generates a key pair
java.security.KeyPairGeneratorSpi#initialize(int, SecureRandom)->void:::Initializes the key pair generator for a certain keysize, using the default parameter set.
java.security.KeyPairGeneratorSpi#initialize(AlgorithmParameterSpec, SecureRandom)->void:::Initializes the key pair generator using the specified parameter set and user-provided source of randomness
java.security.KeyPairGeneratorSpi#generateKeyPair()->KeyPair:::Generates a key pair
java.security.KeyRep#readResolve()->Object:::Resolve the Key object
java.security.KeyStore.LoadStoreParameter#getProtectionParameter()->ProtectionParameter:::Gets the parameter used to protect keystore data.
java.security.KeyStore.PasswordProtection#getProtectionAlgorithm()->String:::Gets the name of the protection algorithm
java.security.KeyStore.PasswordProtection#getProtectionParameters()->AlgorithmParameterSpec:::Gets the parameters supplied for the protection algorithm.
java.security.KeyStore.PasswordProtection#getPassword()->char[]:::Gets the password
java.security.KeyStore.PasswordProtection#destroy()->void:::Clears the password.
java.security.KeyStore.PasswordProtection#isDestroyed()->boolean:::Determines if password has been cleared.
java.security.KeyStore.CallbackHandlerProtection#getCallbackHandler()->CallbackHandler:::Returns the CallbackHandler.
java.security.KeyStore.Entry#getAttributes()->Set:::Retrieves the attributes associated with an entry.
java.security.KeyStore.Entry.Attribute#getName()->String:::Returns the attribute's name.
java.security.KeyStore.Entry.Attribute#getValue()->String:::Returns the attribute's value
java.security.KeyStore.PrivateKeyEntry#getPrivateKey()->PrivateKey:::Gets the PrivateKey from this entry.
java.security.KeyStore.PrivateKeyEntry#getCertificateChain()->Certificate[]:::Gets the Certificate chain from this entry
java.security.KeyStore.PrivateKeyEntry#getCertificate()->Certificate:::Gets the end entity Certificate from the certificate chain in this entry.
java.security.KeyStore.PrivateKeyEntry#getAttributes()->Set:::Retrieves the attributes associated with an entry.
java.security.KeyStore.PrivateKeyEntry#toString()->String:::Returns a string representation of this PrivateKeyEntry.
java.security.KeyStore.SecretKeyEntry#getSecretKey()->SecretKey:::Gets the SecretKey from this entry.
java.security.KeyStore.SecretKeyEntry#getAttributes()->Set:::Retrieves the attributes associated with an entry.
java.security.KeyStore.SecretKeyEntry#toString()->String:::Returns a string representation of this SecretKeyEntry.
java.security.KeyStore.TrustedCertificateEntry#getTrustedCertificate()->Certificate:::Gets the trusted Certficate from this entry.
java.security.KeyStore.TrustedCertificateEntry#getAttributes()->Set:::Retrieves the attributes associated with an entry.
java.security.KeyStore.TrustedCertificateEntry#toString()->String:::Returns a string representation of this TrustedCertificateEntry.
java.security.KeyStore#getInstance(String)->KeyStore:::Returns a keystore object of the specified type
java.security.KeyStore#getInstance(String, String)->KeyStore:::Returns a keystore object of the specified type
java.security.KeyStore#getInstance(String, Provider)->KeyStore:::Returns a keystore object of the specified type
java.security.KeyStore#getDefaultType()->String:::Returns the default keystore type as specified by the keystore.type security property, or the string "jks" (acronym for "Java keystore") if no such property exists
java.security.KeyStore#getProvider()->Provider:::Returns the provider of this keystore.
java.security.KeyStore#getType()->String:::Returns the type of this keystore.
java.security.KeyStore#getKey(String, char[])->Key:::Returns the key associated with the given alias, using the given password to recover it
java.security.KeyStore#getCertificateChain(String)->Certificate[]:::Returns the certificate chain associated with the given alias
java.security.KeyStore#getCertificate(String)->Certificate:::Returns the certificate associated with the given alias
java.security.KeyStore#getCreationDate(String)->Date:::Returns the creation date of the entry identified by the given alias.
java.security.KeyStore#setKeyEntry(String, Key, char[], Certificate[])->void:::Assigns the given key to the given alias, protecting it with the given password
java.security.KeyStore#setKeyEntry(String, byte[], Certificate[])->void:::Assigns the given key (that has already been protected) to the given alias
java.security.KeyStore#setCertificateEntry(String, Certificate)->void:::Assigns the given trusted certificate to the given alias
java.security.KeyStore#deleteEntry(String)->void:::Deletes the entry identified by the given alias from this keystore.
java.security.KeyStore#aliases()->Enumeration:::Lists all the alias names of this keystore.
java.security.KeyStore#containsAlias(String)->boolean:::Checks if the given alias exists in this keystore.
java.security.KeyStore#size()->int:::Retrieves the number of entries in this keystore.
java.security.KeyStore#isKeyEntry(String)->boolean:::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.
java.security.KeyStore#isCertificateEntry(String)->boolean:::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.
java.security.KeyStore#getCertificateAlias(Certificate)->String:::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate
java.security.KeyStore#store(OutputStream, char[])->void:::Stores this keystore to the given output stream, and protects its integrity with the given password.
java.security.KeyStore#store(LoadStoreParameter)->void:::Stores this keystore using the given LoadStoreParameter.
java.security.KeyStore#load(InputStream, char[])->void:::Loads this KeyStore from the given input stream
java.security.KeyStore#load(LoadStoreParameter)->void:::Loads this keystore using the given LoadStoreParameter
java.security.KeyStore#getEntry(String, ProtectionParameter)->Entry:::Gets a keystore Entry for the specified alias with the specified protection parameter.
java.security.KeyStore#setEntry(String, Entry, ProtectionParameter)->void:::Saves a keystore Entry under the specified alias
java.security.KeyStore#entryInstanceOf(String, Class)->boolean:::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.
java.security.KeyStore#getInstance(File, char[])->KeyStore:::Returns a loaded keystore object of the appropriate keystore type
java.security.KeyStore#getInstance(File, LoadStoreParameter)->KeyStore:::Returns a loaded keystore object of the appropriate keystore type
java.security.KeyStore.Builder#getKeyStore()->KeyStore:::Returns the KeyStore described by this object.
java.security.KeyStore.Builder#getProtectionParameter(String)->ProtectionParameter:::Returns the ProtectionParameters that should be used to obtain the KeyStore.Entry Entry with the given alias
java.security.KeyStore.Builder#newInstance(KeyStore, ProtectionParameter)->Builder:::Returns a new Builder that encapsulates the given KeyStore
java.security.KeyStore.Builder#newInstance(String, Provider, File, ProtectionParameter)->Builder:::Returns a new Builder object
java.security.KeyStore.Builder#newInstance(File, ProtectionParameter)->Builder:::Returns a new Builder object
java.security.KeyStore.Builder#newInstance(String, Provider, ProtectionParameter)->Builder:::Returns a new Builder object
java.security.KeyStore.SimpleLoadStoreParameter#getProtectionParameter()->ProtectionParameter::: simple load store parameter get protection parameter
java.security.KeyStoreSpi#engineGetKey(String, char[])->Key:::Returns the key associated with the given alias, using the given password to recover it
java.security.KeyStoreSpi#engineGetCertificateChain(String)->Certificate[]:::Returns the certificate chain associated with the given alias
java.security.KeyStoreSpi#engineGetCertificate(String)->Certificate:::Returns the certificate associated with the given alias
java.security.KeyStoreSpi#engineGetCreationDate(String)->Date:::Returns the creation date of the entry identified by the given alias.
java.security.KeyStoreSpi#engineSetKeyEntry(String, Key, char[], Certificate[])->void:::Assigns the given key to the given alias, protecting it with the given password
java.security.KeyStoreSpi#engineSetKeyEntry(String, byte[], Certificate[])->void:::Assigns the given key (that has already been protected) to the given alias
java.security.KeyStoreSpi#engineSetCertificateEntry(String, Certificate)->void:::Assigns the given certificate to the given alias
java.security.KeyStoreSpi#engineDeleteEntry(String)->void:::Deletes the entry identified by the given alias from this keystore.
java.security.KeyStoreSpi#engineAliases()->Enumeration:::Lists all the alias names of this keystore.
java.security.KeyStoreSpi#engineContainsAlias(String)->boolean:::Checks if the given alias exists in this keystore.
java.security.KeyStoreSpi#engineSize()->int:::Retrieves the number of entries in this keystore.
java.security.KeyStoreSpi#engineIsKeyEntry(String)->boolean:::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.
java.security.KeyStoreSpi#engineIsCertificateEntry(String)->boolean:::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.
java.security.KeyStoreSpi#engineGetCertificateAlias(Certificate)->String:::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate
java.security.KeyStoreSpi#engineStore(OutputStream, char[])->void:::Stores this keystore to the given output stream, and protects its integrity with the given password.
java.security.KeyStoreSpi#engineStore(KeyStore.LoadStoreParameter)->void:::Stores this keystore using the given KeyStore.LoadStoreParmeter.
java.security.KeyStoreSpi#engineLoad(InputStream, char[])->void:::Loads the keystore from the given input stream
java.security.KeyStoreSpi#engineLoad(KeyStore.LoadStoreParameter)->void:::Loads the keystore using the given KeyStore.LoadStoreParameter
java.security.KeyStoreSpi#engineLoad(InputStream, KeyStore.LoadStoreParameter)->void::: key store spi engine load
java.security.KeyStoreSpi#engineGetEntry(String, KeyStore.ProtectionParameter)->KeyStore.Entry:::Gets a KeyStore.Entry for the specified alias with the specified protection parameter.
java.security.KeyStoreSpi#engineSetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)->void:::Saves a KeyStore.Entry under the specified alias
java.security.KeyStoreSpi#engineEntryInstanceOf(String, Class)->boolean:::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.
java.security.KeyStoreSpi#engineProbe(InputStream)->boolean:::Probes the specified input stream to determine whether it contains a keystore that is supported by this implementation, or not.
java.security.MessageDigest#getInstance(String)->MessageDigest:::Returns a MessageDigest object that implements the specified digest algorithm
java.security.MessageDigest#getInstance(String, String)->MessageDigest:::Returns a MessageDigest object that implements the specified digest algorithm
java.security.MessageDigest#getInstance(String, Provider)->MessageDigest:::Returns a MessageDigest object that implements the specified digest algorithm
java.security.MessageDigest#getProvider()->Provider:::Returns the provider of this message digest object.
java.security.MessageDigest#update(byte)->void:::Updates the digest using the specified byte.
java.security.MessageDigest#update(byte[], int, int)->void:::Updates the digest using the specified array of bytes, starting at the specified offset.
java.security.MessageDigest#update(byte[])->void:::Updates the digest using the specified array of bytes.
java.security.MessageDigest#update(ByteBuffer)->void:::Update the digest using the specified ByteBuffer
java.security.MessageDigest#digest()->byte[]:::Completes the hash computation by performing final operations such as padding
java.security.MessageDigest#digest(byte[], int, int)->int:::Completes the hash computation by performing final operations such as padding
java.security.MessageDigest#digest(byte[])->byte[]:::Performs a final update on the digest using the specified array of bytes, then completes the digest computation
java.security.MessageDigest#toString()->String:::Returns a string representation of this message digest object.
java.security.MessageDigest#isEqual(byte[], byte[])->boolean:::Compares two digests for equality
java.security.MessageDigest#reset()->void:::Resets the digest for further use.
java.security.MessageDigest#getAlgorithm()->String:::Returns a string that identifies the algorithm, independent of implementation details
java.security.MessageDigest#getDigestLength()->int:::Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable.
java.security.MessageDigest#clone()->Object:::Returns a clone if the implementation is cloneable.
java.security.MessageDigest.Delegate#clone()->Object:::Returns a clone if the delegate is cloneable.
java.security.MessageDigest.Delegate#engineGetDigestLength()->int::: delegate engine get digest length
java.security.MessageDigest.Delegate#engineUpdate(byte)->void::: delegate engine update
java.security.MessageDigest.Delegate#engineUpdate(byte[], int, int)->void::: delegate engine update
java.security.MessageDigest.Delegate#engineUpdate(ByteBuffer)->void::: delegate engine update
java.security.MessageDigest.Delegate#engineUpdate(SecretKey)->void::: delegate engine update
java.security.MessageDigest.Delegate#engineDigest()->byte[]::: delegate engine digest
java.security.MessageDigest.Delegate#engineDigest(byte[], int, int)->int::: delegate engine digest
java.security.MessageDigest.Delegate#engineReset()->void::: delegate engine reset
java.security.MessageDigestSpi#engineGetDigestLength()->int:::Returns the digest length in bytes
java.security.MessageDigestSpi#engineUpdate(byte)->void:::Updates the digest using the specified byte.
java.security.MessageDigestSpi#engineUpdate(byte[], int, int)->void:::Updates the digest using the specified array of bytes, starting at the specified offset.
java.security.MessageDigestSpi#engineUpdate(ByteBuffer)->void:::Update the digest using the specified ByteBuffer
java.security.MessageDigestSpi#engineDigest()->byte[]:::Completes the hash computation by performing final operations such as padding
java.security.MessageDigestSpi#engineDigest(byte[], int, int)->int:::Completes the hash computation by performing final operations such as padding
java.security.MessageDigestSpi#engineReset()->void:::Resets the digest for further use.
java.security.MessageDigestSpi#clone()->Object:::Returns a clone if the implementation is cloneable.
java.security.Permission#checkGuard(Object)->void:::Implements the guard interface for a permission
java.security.Permission#implies(Permission)->boolean::: permission implies
java.security.Permission#equals(Object)->boolean::: permission equals
java.security.Permission#hashCode()->int::: permission hash code
java.security.Permission#getName()->String::: permission get name
java.security.Permission#getActions()->String::: permission get actions
java.security.Permission#newPermissionCollection()->PermissionCollection::: permission new permission collection
java.security.Permission#toString()->String:::Returns a string describing this Permission
java.security.PermissionCollection#add(Permission)->void:::Adds a permission object to the current collection of permission objects.
java.security.PermissionCollection#implies(Permission)->boolean:::Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection.
java.security.PermissionCollection#elements()->Enumeration:::Returns an enumeration of all the Permission objects in the collection.
java.security.PermissionCollection#elementsAsStream()->Stream:::Returns a stream of all the Permission objects in the collection
java.security.PermissionCollection#setReadOnly()->void:::Marks this PermissionCollection object as "readonly"
java.security.PermissionCollection#isReadOnly()->boolean:::Returns true if this PermissionCollection object is marked as readonly
java.security.PermissionCollection#toString()->String:::Returns a string describing this PermissionCollection object, providing information about all the permissions it contains
java.security.Permissions#add(Permission)->void:::Adds a permission object to the PermissionCollection for the class the permission belongs to
java.security.Permissions#implies(Permission)->boolean:::Checks to see if this object's PermissionCollection for permissions of the specified permission's class implies the permissions expressed in the permission object
java.security.Permissions#elements()->Enumeration:::Returns an enumeration of all the Permission objects in all the PermissionCollections in this Permissions object.
java.security.PermissionsEnumerator#hasMoreElements()->boolean::: permissions enumerator has more elements
java.security.PermissionsEnumerator#nextElement()->Permission::: permissions enumerator next element
java.security.PermissionsHash#add(Permission)->void:::Adds a permission to the PermissionsHash.
java.security.PermissionsHash#implies(Permission)->boolean:::Check and see if this set of permissions implies the permissions expressed in "permission".
java.security.PermissionsHash#elements()->Enumeration:::Returns an enumeration of all the Permission objects in the container.
java.security.PKCS12Attribute#getName()->String:::Returns the attribute's ASN.1 Object Identifier represented as a list of dot-separated integers.
java.security.PKCS12Attribute#getValue()->String:::Returns the attribute's ASN.1 DER-encoded value as a string
java.security.PKCS12Attribute#getEncoded()->byte[]:::Returns the attribute's ASN.1 DER encoding.
java.security.PKCS12Attribute#equals(Object)->boolean:::Compares this PKCS12Attribute and a specified object for equality.
java.security.PKCS12Attribute#hashCode()->int:::Returns the hashcode for this PKCS12Attribute
java.security.PKCS12Attribute#toString()->String:::Returns a string representation of this PKCS12Attribute.
java.security.Policy#isSet()->boolean:::package private for AccessControlContext and ProtectionDomain
java.security.Policy#getPolicy()->Policy:::Returns the installed Policy object
java.security.Policy#getPolicyNoCheck()->Policy:::Returns the installed Policy object, skipping the security check
java.security.Policy#setPolicy(Policy)->void:::Sets the system-wide Policy object
java.security.Policy#getInstance(String, Policy.Parameters)->Policy:::Returns a Policy object of the specified type
java.security.Policy#getInstance(String, Policy.Parameters, String)->Policy:::Returns a Policy object of the specified type
java.security.Policy#getInstance(String, Policy.Parameters, Provider)->Policy:::Returns a Policy object of the specified type
java.security.Policy#getProvider()->Provider:::Return the Provider of this Policy
java.security.Policy#getType()->String:::Return the type of this Policy
java.security.Policy#getParameters()->Policy.Parameters:::Return Policy parameters
java.security.Policy#getPermissions(CodeSource)->PermissionCollection:::Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource
java.security.Policy#getPermissions(ProtectionDomain)->PermissionCollection:::Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain
java.security.Policy#implies(ProtectionDomain, Permission)->boolean:::Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted.
java.security.Policy#refresh()->void:::Refreshes/reloads the policy configuration
java.security.PolicySpi#engineImplies(ProtectionDomain, Permission)->boolean:::Check whether the policy has granted a Permission to a ProtectionDomain.
java.security.PolicySpi#engineRefresh()->void:::Refreshes/reloads the policy configuration
java.security.PolicySpi#engineGetPermissions(CodeSource)->PermissionCollection:::Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource
java.security.PolicySpi#engineGetPermissions(ProtectionDomain)->PermissionCollection:::Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain
java.security.Principal#equals(Object)->boolean:::Compares this principal to the specified object
java.security.Principal#toString()->String:::Returns a string representation of this principal.
java.security.Principal#hashCode()->int:::Returns a hashcode for this principal.
java.security.Principal#getName()->String:::Returns the name of this principal.
java.security.Principal#implies(Subject)->boolean:::Returns true if the specified subject is implied by this principal.
java.security.PrivilegedAction#run()->T:::Performs the computation
java.security.PrivilegedActionException#getException()->Exception:::Returns the exception thrown by the privileged computation that resulted in this PrivilegedActionException
java.security.PrivilegedActionException#getCause()->Throwable:::Returns the cause of this exception (the exception thrown by the privileged computation that resulted in this PrivilegedActionException).
java.security.PrivilegedActionException#toString()->String::: privileged action exception to string
java.security.PrivilegedExceptionAction#run()->T::: privileged exception action run
java.security.ProtectionDomain#getCodeSource()->CodeSource:::Returns the CodeSource of this domain.
java.security.ProtectionDomain#getClassLoader()->ClassLoader:::Returns the ClassLoader of this domain.
java.security.ProtectionDomain#getPrincipals()->Principal[]:::Returns an array of principals for this domain.
java.security.ProtectionDomain#getPermissions()->PermissionCollection:::Returns the static permissions granted to this domain.
java.security.ProtectionDomain#staticPermissionsOnly()->boolean:::Returns true if this domain contains only static permissions and does not check the current Policy at the time of permission checking.
java.security.ProtectionDomain#implies(Permission)->boolean:::Check and see if this ProtectionDomain implies the permissions expressed in the Permission object
java.security.ProtectionDomain#impliesWithAltFilePerm(Permission)->boolean:::This method has almost the same logic flow as #implies but it ensures some level of FilePermission compatibility after JDK-8164705
java.security.ProtectionDomain#impliesCreateAccessControlContext()->boolean::: protection domain implies create access control context
java.security.ProtectionDomain#toString()->String:::Convert a ProtectionDomain to a String.
java.security.Provider#configure(String)->Provider:::Apply the supplied configuration argument to this provider instance and return the configured provider
java.security.Provider#isConfigured()->boolean:::Check if this provider instance has been configured.
java.security.Provider#getName()->String:::Returns the name of this provider.
java.security.Provider#getVersion()->double:::Returns the version number for this provider.
java.security.Provider#getVersionStr()->String:::Returns the version string for this provider.
java.security.Provider#getInfo()->String:::Returns a human-readable description of the provider and its services
java.security.Provider#toString()->String:::Returns a string with the name and the version string of this provider.
java.security.Provider#clear()->void:::Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider
java.security.Provider#load(InputStream)->void:::Reads a property list (key and element pairs) from the input stream.
java.security.Provider#putAll(Map)->void:::Copies all of the mappings from the specified Map to this provider
java.security.Provider#entrySet()->Set>:::Returns an unmodifiable Set view of the property entries contained in this Provider.
java.security.Provider#keySet()->Set:::Returns an unmodifiable Set view of the property keys contained in this provider.
java.security.Provider#values()->Collection:::Returns an unmodifiable Collection view of the property values contained in this provider.
java.security.Provider#put(Object, Object)->Object:::Sets the key property to have the specified value
java.security.Provider#putIfAbsent(Object, Object)->Object:::If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value
java.security.Provider#remove(Object)->Object:::Removes the key property (and its corresponding value)
java.security.Provider#remove(Object, Object)->boolean:::Removes the entry for the specified key only if it is currently mapped to the specified value
java.security.Provider#replace(Object, Object, Object)->boolean:::Replaces the entry for the specified key only if currently mapped to the specified value
java.security.Provider#replace(Object, Object)->Object:::Replaces the entry for the specified key only if it is currently mapped to some value
java.security.Provider#replaceAll(BiFunction)->void:::Replaces each entry's value with the result of invoking the given function on that entry, in the order entries are returned by an entry set iterator, until all entries have been processed or the function throws an exception
java.security.Provider#compute(Object, BiFunction)->Object:::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)
java.security.Provider#computeIfAbsent(Object, Function)->Object:::If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null
java.security.Provider#computeIfPresent(Object, BiFunction)->Object:::If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value
java.security.Provider#merge(Object, Object, BiFunction)->Object:::If the specified key is not already associated with a value or is associated with null, associates it with the given value
java.security.Provider#get(Object)->Object::: provider get
java.security.Provider#getOrDefault(Object, Object)->Object::: provider get or default
java.security.Provider#forEach(BiConsumer)->void::: provider for each
java.security.Provider#keys()->Enumeration::: provider keys
java.security.Provider#elements()->Enumeration::: provider elements
java.security.Provider#getProperty(String)->String::: provider get property
java.security.Provider#getService(String, String)->Service:::Get the service describing this Provider's implementation of the specified type of this algorithm or alias
java.security.Provider#getServices()->Set:::Get an unmodifiable Set of all services supported by this Provider.
java.security.Provider#putService(Service)->void:::Add a service
java.security.Provider#removeService(Service)->void:::Remove a service previously added using #putService putService()
java.security.Provider.Service#addAttribute(String, String)->void::: service add attribute
java.security.Provider.Service#getType()->String:::Get the type of this service
java.security.Provider.Service#getAlgorithm()->String:::Return the name of the algorithm of this service
java.security.Provider.Service#getProvider()->Provider:::Return the Provider of this service.
java.security.Provider.Service#getClassName()->String:::Return the name of the class implementing this service.
java.security.Provider.Service#getAttribute(String)->String:::Return the value of the specified attribute or null if this attribute is not set for this Service.
java.security.Provider.Service#newInstance(Object)->Object:::Return a new instance of the implementation described by this service
java.security.Provider.Service#supportsParameter(Object)->boolean:::Test whether this Service can use the specified parameter
java.security.Provider.Service#toString()->String:::Return a String representation of this service.
java.security.SecureClassLoader#defineClass(String, byte[], int, int, CodeSource)->Class:::Converts an array of bytes into an instance of class Class, with an optional CodeSource
java.security.SecureClassLoader#defineClass(String, java.nio.ByteBuffer, CodeSource)->Class:::Converts a java.nio.ByteBuffer ByteBuffer into an instance of class Class, with an optional CodeSource
java.security.SecureClassLoader#getPermissions(CodeSource)->PermissionCollection:::Returns the permissions for the given CodeSource object
java.security.SecureRandom#getInstance(String)->SecureRandom:::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm
java.security.SecureRandom#getInstance(String, String)->SecureRandom:::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm
java.security.SecureRandom#getInstance(String, Provider)->SecureRandom:::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm
java.security.SecureRandom#getInstance(String, SecureRandomParameters)->SecureRandom:::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request
java.security.SecureRandom#getInstance(String, SecureRandomParameters, String)->SecureRandom:::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request
java.security.SecureRandom#getInstance(String, SecureRandomParameters, Provider)->SecureRandom:::Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request
java.security.SecureRandom#getSecureRandomSpi()->SecureRandomSpi:::Returns the SecureRandomSpi of this SecureRandom object.
java.security.SecureRandom#getProvider()->Provider:::Returns the provider of this SecureRandom object.
java.security.SecureRandom#getAlgorithm()->String:::Returns the name of the algorithm implemented by this SecureRandom object.
java.security.SecureRandom#toString()->String:::Returns a Human-readable string representation of this SecureRandom.
java.security.SecureRandom#getParameters()->SecureRandomParameters:::Returns the effective SecureRandomParameters for this SecureRandom instance
java.security.SecureRandom#setSeed(byte[])->void:::Reseeds this random object with the given seed
java.security.SecureRandom#setSeed(long)->void:::Reseeds this random object, using the eight bytes contained in the given long seed
java.security.SecureRandom#nextBytes(byte[])->void:::Generates a user-specified number of random bytes.
java.security.SecureRandom#nextBytes(byte[], SecureRandomParameters)->void:::Generates a user-specified number of random bytes with additional parameters.
java.security.SecureRandom#next(int)->int:::Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros)
java.security.SecureRandom#getSeed(int)->byte[]:::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself
java.security.SecureRandom#generateSeed(int)->byte[]:::Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself
java.security.SecureRandom#getInstanceStrong()->SecureRandom:::Returns a SecureRandom object that was selected by using the algorithms/providers specified in the securerandom.strongAlgorithms Security property
java.security.SecureRandom#reseed()->void:::Reseeds this SecureRandom with entropy input read from its entropy source.
java.security.SecureRandom#reseed(SecureRandomParameters)->void:::Reseeds this SecureRandom with entropy input read from its entropy source with additional parameters
java.security.SecureRandomSpi#engineSetSeed(byte[])->void:::Reseeds this random object with the given seed
java.security.SecureRandomSpi#engineNextBytes(byte[])->void:::Generates a user-specified number of random bytes
java.security.SecureRandomSpi#engineNextBytes(byte[], SecureRandomParameters)->void:::Generates a user-specified number of random bytes with additional parameters
java.security.SecureRandomSpi#engineGenerateSeed(int)->byte[]:::Returns the given number of seed bytes
java.security.SecureRandomSpi#engineReseed(SecureRandomParameters)->void:::Reseeds this random object with entropy input read from its entropy source with additional parameters
java.security.SecureRandomSpi#engineGetParameters()->SecureRandomParameters:::Returns the effective SecureRandomParameters for this SecureRandom instance.
java.security.SecureRandomSpi#toString()->String:::Returns a Human-readable string representation of this SecureRandom.
java.security.Security#getAlgorithmProperty(String, String)->String:::Gets a specified property for an algorithm
java.security.Security#insertProviderAt(Provider, int)->int:::Adds a new provider, at a specified position
java.security.Security#addProvider(Provider)->int:::Adds a provider to the next position available
java.security.Security#removeProvider(String)->void:::Removes the provider with the specified name
java.security.Security#getProviders()->Provider[]:::Returns an array containing all the installed providers
java.security.Security#getProvider(String)->Provider:::Returns the provider installed with the specified name, if any
java.security.Security#getProviders(String)->Provider[]:::Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed
java.security.Security#getProviders(Map)->Provider[]:::Returns an array containing all installed providers that satisfy the specified selection criteria, or null if no such providers have been installed
java.security.Security#getImpl(String, String, String)->Object[]::: security get impl
java.security.Security#getImpl(String, String, String, Object)->Object[]::: security get impl
java.security.Security#getImpl(String, String, Provider)->Object[]::: security get impl
java.security.Security#getImpl(String, String, Provider, Object)->Object[]::: security get impl
java.security.Security#getProperty(String)->String:::Gets a security property value
java.security.Security#setProperty(String, String)->void:::Sets a security property value
java.security.Security#getFilterComponents(String, String)->String[]::: security get filter components
java.security.Security#getAlgorithms(String)->Set:::Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore)
java.security.Signature#getInstance(String)->Signature:::Returns a Signature object that implements the specified signature algorithm
java.security.Signature#getInstance(String, String)->Signature:::Returns a Signature object that implements the specified signature algorithm
java.security.Signature#getInstance(String, Provider)->Signature:::Returns a Signature object that implements the specified signature algorithm
java.security.Signature#getProvider()->Provider:::Returns the provider of this signature object.
java.security.Signature#chooseFirstProvider()->void::: signature choose first provider
java.security.Signature#initVerify(PublicKey)->void:::Initializes this object for verification
java.security.Signature#initVerify(PublicKey, AlgorithmParameterSpec)->void:::Initialize this object for verification
java.security.Signature#initVerify(Certificate)->void:::Initializes this object for verification, using the public key from the given certificate
java.security.Signature#initVerify(Certificate, AlgorithmParameterSpec)->void:::Initializes this object for verification, using the public key from the given certificate
java.security.Signature#initSign(PrivateKey)->void:::Initialize this object for signing
java.security.Signature#initSign(PrivateKey, SecureRandom)->void:::Initialize this object for signing
java.security.Signature#initSign(PrivateKey, AlgorithmParameterSpec, SecureRandom)->void:::Initialize this object for signing
java.security.Signature#sign()->byte[]:::Returns the signature bytes of all the data updated
java.security.Signature#sign(byte[], int, int)->int:::Finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset
java.security.Signature#verify(byte[])->boolean:::Verifies the passed-in signature
java.security.Signature#verify(byte[], int, int)->boolean:::Verifies the passed-in signature in the specified array of bytes, starting at the specified offset
java.security.Signature#update(byte)->void:::Updates the data to be signed or verified by a byte.
java.security.Signature#update(byte[])->void:::Updates the data to be signed or verified, using the specified array of bytes.
java.security.Signature#update(byte[], int, int)->void:::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.
java.security.Signature#update(ByteBuffer)->void:::Updates the data to be signed or verified using the specified ByteBuffer
java.security.Signature#getAlgorithm()->String:::Returns the name of the algorithm for this signature object.
java.security.Signature#toString()->String:::Returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used.
java.security.Signature#setParameter(String, Object)->void:::Sets the specified algorithm parameter to the specified value
java.security.Signature#setParameter(AlgorithmParameterSpec)->void:::Initializes this signature engine with the specified parameter set.
java.security.Signature#getParameters()->AlgorithmParameters:::Returns the parameters used with this signature object
java.security.Signature#getParameter(String)->Object:::Gets the value of the specified algorithm parameter
java.security.Signature#clone()->Object:::Returns a clone if the implementation is cloneable.
java.security.SignatureSpi#engineInitVerify(PublicKey)->void:::Initializes this signature object with the specified public key for verification operations.
java.security.SignatureSpi#engineInitVerify(PublicKey, AlgorithmParameterSpec)->void:::Initializes this signature object with the specified public key for verification operations.
java.security.SignatureSpi#engineInitSign(PrivateKey)->void:::Initializes this signature object with the specified private key for signing operations.
java.security.SignatureSpi#engineInitSign(PrivateKey, SecureRandom)->void:::Initializes this signature object with the specified private key and source of randomness for signing operations
java.security.SignatureSpi#engineInitSign(PrivateKey, AlgorithmParameterSpec, SecureRandom)->void:::Initializes this signature object with the specified private key and source of randomness for signing operations
java.security.SignatureSpi#engineUpdate(byte)->void:::Updates the data to be signed or verified using the specified byte.
java.security.SignatureSpi#engineUpdate(byte[], int, int)->void:::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.
java.security.SignatureSpi#engineUpdate(ByteBuffer)->void:::Updates the data to be signed or verified using the specified ByteBuffer
java.security.SignatureSpi#engineSign()->byte[]:::Returns the signature bytes of all the data updated so far
java.security.SignatureSpi#engineSign(byte[], int, int)->int:::Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset
java.security.SignatureSpi#engineVerify(byte[])->boolean:::Verifies the passed-in signature.
java.security.SignatureSpi#engineVerify(byte[], int, int)->boolean:::Verifies the passed-in signature in the specified array of bytes, starting at the specified offset
java.security.SignatureSpi#engineSetParameter(String, Object)->void:::Sets the specified algorithm parameter to the specified value
java.security.SignatureSpi#engineSetParameter(AlgorithmParameterSpec)->void:::This method is overridden by providers to initialize this signature engine with the specified parameter set.
java.security.SignatureSpi#engineGetParameters()->AlgorithmParameters:::This method is overridden by providers to return the parameters used with this signature engine
java.security.SignatureSpi#engineGetParameter(String)->Object:::Gets the value of the specified algorithm parameter
java.security.SignatureSpi#clone()->Object:::Returns a clone if the implementation is cloneable.
java.security.SignedObject#getObject()->Object:::Retrieves the encapsulated object
java.security.SignedObject#getSignature()->byte[]:::Retrieves the signature on the signed object, in the form of a byte array.
java.security.SignedObject#getAlgorithm()->String:::Retrieves the name of the signature algorithm.
java.security.SignedObject#verify(PublicKey, Signature)->boolean:::Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine.
java.security.Signer#getPrivateKey()->PrivateKey:::Returns this signer's private key
java.security.Signer#setKeyPair(KeyPair)->void:::Sets the key pair (public key and private key) for this signer
java.security.Signer#printKeys()->String::: signer print keys
java.security.Signer#toString()->String:::Returns a string of information about the signer.
java.security.Timestamp#getTimestamp()->Date:::Returns the date and time when the timestamp was generated.
java.security.Timestamp#getSignerCertPath()->CertPath:::Returns the certificate path for the Timestamping Authority.
java.security.Timestamp#hashCode()->int:::Returns the hash code value for this timestamp
java.security.Timestamp#equals(Object)->boolean:::Tests for equality between the specified object and this timestamp
java.security.Timestamp#toString()->String:::Returns a string describing this timestamp.
java.security.UnresolvedPermission#resolve(Permission, java.security.cert.Certificate[])->Permission:::try and resolve this permission using the class loader of the permission that was passed in.
java.security.UnresolvedPermission#implies(Permission)->boolean:::This method always returns false for unresolved permissions
java.security.UnresolvedPermission#equals(Object)->boolean:::Checks two UnresolvedPermission objects for equality
java.security.UnresolvedPermission#hashCode()->int::: unresolved permission hash code
java.security.UnresolvedPermission#getActions()->String:::Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for an UnresolvedPermission
java.security.UnresolvedPermission#getUnresolvedType()->String:::Get the type (class name) of the underlying permission that has not been resolved.
java.security.UnresolvedPermission#getUnresolvedName()->String:::Get the target name of the underlying permission that has not been resolved.
java.security.UnresolvedPermission#getUnresolvedActions()->String:::Get the actions for the underlying permission that has not been resolved.
java.security.UnresolvedPermission#getUnresolvedCerts()->java.security.cert.Certificate[]:::Get the signer certificates (without any supporting chain) for the underlying permission that has not been resolved.
java.security.UnresolvedPermission#toString()->String:::Returns a string describing this UnresolvedPermission
java.security.UnresolvedPermission#newPermissionCollection()->PermissionCollection::: unresolved permission new permission collection
java.security.UnresolvedPermissionCollection#add(Permission)->void:::Adds a permission to this UnresolvedPermissionCollection
java.security.UnresolvedPermissionCollection#getUnresolvedPermissions(Permission)->List:::get any unresolved permissions of the same type as p, and return the List containing them.
java.security.UnresolvedPermissionCollection#implies(Permission)->boolean:::always returns false for unresolved permissions
java.security.UnresolvedPermissionCollection#elements()->Enumeration:::Returns an enumeration of all the UnresolvedPermission lists in the container.
java.security.URIParameter#getURI()->java.net.URI:::Returns the URI.

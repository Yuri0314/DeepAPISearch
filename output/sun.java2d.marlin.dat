ArrayCacheConst#getNewSize(int, int):::Return the new array size (~ x2):::if->throw->new->ArrayIndexOutOfBoundsException->initial->size->if->else->if->if->return
ArrayCacheConst#getNewLargeSize(long, long):::Return the new array size (~ x2):::if->throw->new->ArrayIndexOutOfBoundsException->size->if->else->if->else->if->else->if->if->return
Dasher#init(PathConsumer2D, float[], int, float, boolean):::Initialize the Dasher.:::sidx->sum->for->i->cycles->if->if->else->fullcycles->FloatMath->floor_int->if->while->if->else->if->if->else->fullcycles->FloatMath->floor_int->if->d->while->if->else->return
Dasher#dispose():::Disposes this dasher: clean up before reusing this instance:::if->Arrays->fill->if->dashes_ref->putArray->firstSegmentsBuffer_ref->putArray
Dasher.LengthIterator#reset():::Reset this LengthIterator.:::if->recLimit->for->i->Arrays->fill->Arrays->fill->Arrays->fill->Arrays->fill
DDasher#init(DPathConsumer2D, double[], int, double, boolean):::Initialize the DDasher.:::sidx->sum->for->i->cycles->if->if->else->fullcycles->FloatMath->floor_int->if->while->if->else->if->if->else->fullcycles->FloatMath->floor_int->if->d->while->if->else->return
DDasher#dispose():::Disposes this dasher: clean up before reusing this instance:::if->Arrays->fill->if->dashes_ref->putArray->firstSegmentsBuffer_ref->putArray
DDasher.LengthIterator#reset():::Reset this LengthIterator.:::if->recLimit->for->i->Arrays->fill->Arrays->fill->Arrays->fill->Arrays->fill
DHelpers#subdivideCubic(double[], double[], double[]):::Subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff&nbsp;+&nbsp;7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices:::x1->y1->cx1->cy1->cx2->cy2->x2->y2->cx->cy
DHelpers.PolyStack#dispose():::Disposes this PolyStack: clean up before reusing this instance:::if->stat_polystack_types->add->stat_polystack_curves->add->hist_polystack_curves->add->curves_ref->putArray->curveTypes_ref->putArray
DHelpers.IndexStack#dispose():::Disposes this PolyStack: clean up before reusing this instance:::if->stat_idxstack_indices->add->hist_idxstack_indices->add->indices_ref->putArray
DMarlinRenderingEngine#createStrokedShape(Shape, float, int, int, float, float[], float):::Create a widened path as specified by the parameters:::rdrCtx->getRendererContext->try->p2d->rdrCtx->getPath2D->wrapPath2D->strokeTo->return->new->Path2D.Double->catch->finally->returnRendererContext
DMarlinRenderingEngine#strokeTo(Shape, AffineTransform, BasicStroke, boolean, boolean, boolean, PathConsumer2D):::Sends the geometry for a widened path as specified by the parameters to the specified consumer:::norm->rdrCtx->getRendererContext->try->init->strokeTo->catch->finally->returnRendererContext
DMarlinRenderingEngine.NormalizingPathIterator#dispose():::Disposes this path iterator: clean up before reusing this instance:::
DMarlinRenderingEngine#getAATileGenerator(Shape, AffineTransform, Region, BasicStroke, boolean, boolean, int[]):::Construct an antialiased tile generator for the given shape with the given rendering attributes and store the bounds of the tile iteration in the bbox parameter:::ptg->r->rdrCtx->getRendererContext->try->if->MarlinProperties->isDoClipAtRuntime->clipRect->rdrOffX->rdrOffY->margin->clip->getLoY->clip->getLoY->clip->getHeight->clip->getLoX->clip->getLoX->clip->getWidth->if->MarlinUtils->Arrays->toString->logInfo->_at->at->isIdentity->norm->if->pi->norm->s->getPathIterator->getNormalizingPathIterator->clip->getLoX->clip->getLoY->clip->getWidth->clip->getHeight->pi->getWindingRule->init->pc2d->if->if->traceFiller->pathClipper->if->traceInput->pathTo->else->clip->getLoX->clip->getLoY->clip->getWidth->clip->getHeight->init->strokeTo->if->r->endRendering->init->ptg->getBbox->catch->finally->if->r->dispose->return
DMarlinRenderingEngine#getMinimumAAPenSize():::Returns the minimum pen width that the antialiasing rasterizer can represent without dropouts occuring.:::return
DMarlinRenderingEngine#getRendererContext():::Get the DRendererContext instance dedicated to the current thread:::rdrCtx->RDR_CTX_PROVIDER->acquire->if->start->return
DMarlinRenderingEngine#returnRendererContext(DRendererContext):::Reset and return the given DRendererContext instance for reuse:::rdrCtx->dispose->if->stop->RDR_CTX_PROVIDER->release
DPathConsumer2D#pathDone():::Called after the last segment of the last subpath when the iteration of the path segments is completely done:::
DPathConsumer2D#getNativeConsumer():::If a given PathConsumer performs all or most of its work natively then it can return a (non-zero) pointer to a native function vector that defines C functions for all of the above methods:::
DRenderer#dispose():::Disposes this renderer and recycle it clean up before reusing this instance:::if->add->add->add->add->crossings_ref->putArray->aux_crossings_ref->putArray->edgePtrs_ref->putArray->aux_edgePtrs_ref->putArray->alphaLine_ref->putArray->blkFlags_ref->putArray->if->if->edgeBuckets_ref->putArray->edgeBucketCounts_ref->putArray->else->edgeBuckets_ref->putArray->edgeBucketCounts_ref->putArray->if->edges->resize->if->edges->fill->if->stop->DMarlinRenderingEngine->returnRendererContext
DRendererContext#createContext():::Create a new renderer context:::return->Integer->CTX_COUNT->getAndIncrement->toString->new->DRendererContext
DRendererContext#dispose():::Disposes this renderer context: clean up before reusing this context:::if->if->if->dispose->dispose->dispose->dispose
DStroker#init(DPathConsumer2D, double, int, int, double, boolean):::Inits the DStroker.:::limit->if->margin->if->if->_clipRect->if->MarlinUtils->Arrays->toString->logInfo->if->curveSplitter->init->else->else->return
DStroker#dispose():::Disposes this stroker: clean up before reusing this instance:::reverse->dispose->if->Arrays->fill->Arrays->fill->Arrays->fill->Arrays->fill->Arrays->fill->Arrays->fill
DTransformingPathConsumer2D.ClosedPathDetector#dispose():::Disposes this instance: clean up before reusing this instance:::stack->dispose
DTransformingPathConsumer2D.PathClipFilter#dispose():::Disposes this instance: clean up before reusing this instance:::stack->dispose
FloatMath#ceil_f(float):::Returns the smallest (closest to negative infinity) float value that is greater than or equal to the argument and is equal to a mathematical integer:::doppel->Float->floatToRawIntBits->exponent->if->return->if->return->intpart->if->return->return->Float->intBitsToFloat
FloatMath#floor_f(float):::Returns the largest (closest to positive infinity) float value that is less than or equal to the argument and is equal to a mathematical integer:::doppel->Float->floatToRawIntBits->exponent->if->return->if->return->intpart->if->return->return->Float->intBitsToFloat
FloatMath#ceil_int(float):::Faster alternative to ceil(float) optimized for the integer domain and supporting NaN and +/-Infinity.:::intpart->if->Float->isNaN->return->return
FloatMath#ceil_int(double):::Faster alternative to ceil(double) optimized for the integer domain and supporting NaN and +/-Infinity.:::intpart->if->Double->isNaN->return->return
FloatMath#floor_int(float):::Faster alternative to floor(float) optimized for the integer domain and supporting NaN and +/-Infinity.:::intpart->if->Float->isNaN->return->return
FloatMath#floor_int(double):::Faster alternative to floor(double) optimized for the integer domain and supporting NaN and +/-Infinity.:::intpart->if->Double->isNaN->return->return
Helpers#subdivideCubic(float[], float[], float[]):::Subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff&nbsp;+&nbsp;7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices:::x1->y1->cx1->cy1->cx2->cy2->x2->y2->cx->cy
Helpers.PolyStack#dispose():::Disposes this PolyStack: clean up before reusing this instance:::if->stat_polystack_types->add->stat_polystack_curves->add->hist_polystack_curves->add->curves_ref->putArray->curveTypes_ref->putArray
Helpers.IndexStack#dispose():::Disposes this PolyStack: clean up before reusing this instance:::if->stat_idxstack_indices->add->hist_idxstack_indices->add->indices_ref->putArray
MarlinCache#dispose():::Disposes this cache: clean up before reusing this instance:::resetTileLine->if->touchedTile_ref->putArray->if->rowAAChunk->resize->if->rowAAChunk->fill
MarlinCache#copyAARowNoRLE(int[], int, int, int):::Copy the given alpha data into the rowAA cache:::px_bbox1->FloatMath->min->if->MarlinUtils->logInfo->row->pos->needSize->_rowAAChunk->if->expandRowAAChunk->if->add->_touchedTile->_TILE_SIZE_LG->from->to->_unsafe->SIZE_BYTE->addr_alpha->addr_off->for->x->val->tx->if->if->if->MarlinUtils->logInfo->IntArrayCache->fill
MarlinProperties#getInitialEdges():::Return the initial edge capacity used to define initial arrays (edges, polystack, crossings):::return->getInteger->align
MarlinProperties#getInitialPixelWidth():::Return the initial pixel width used to define initial arrays (tile AA chunk, alpha line):::return->getInteger->align
MarlinProperties#getInitialPixelHeight():::Return the initial pixel height used to define initial arrays (buckets):::return->getInteger->align
MarlinProperties#getSubPixel_Log2_X():::Return the log(2) corresponding to subpixel on x-axis:::return->getInteger
MarlinProperties#getSubPixel_Log2_Y():::Return the log(2) corresponding to subpixel on y-axis:::return->getInteger
MarlinProperties#getTileSize_Log2():::Return the log(2) corresponding to the square tile size in pixels:::return->getInteger
MarlinProperties#getTileWidth_Log2():::Return the log(2) corresponding to the tile width in pixels:::return->getInteger
MarlinProperties#getBlockSize_Log2():::Return the log(2) corresponding to the block size in pixels:::return->getInteger
MarlinRenderingEngine#createStrokedShape(Shape, float, int, int, float, float[], float):::Create a widened path as specified by the parameters:::rdrCtx->getRendererContext->try->p2d->rdrCtx->getPath2D->wrapPath2D->strokeTo->return->new->Path2D.Float->catch->finally->returnRendererContext
MarlinRenderingEngine#strokeTo(Shape, AffineTransform, BasicStroke, boolean, boolean, boolean, PathConsumer2D):::Sends the geometry for a widened path as specified by the parameters to the specified consumer:::norm->rdrCtx->getRendererContext->try->strokeTo->catch->finally->returnRendererContext
MarlinRenderingEngine.NormalizingPathIterator#dispose():::Disposes this path iterator: clean up before reusing this instance:::
MarlinRenderingEngine#getAATileGenerator(Shape, AffineTransform, Region, BasicStroke, boolean, boolean, int[]):::Construct an antialiased tile generator for the given shape with the given rendering attributes and store the bounds of the tile iteration in the bbox parameter:::ptg->r->rdrCtx->getRendererContext->try->if->MarlinProperties->isDoClipAtRuntime->clipRect->rdrOffX->rdrOffY->margin->clip->getLoY->clip->getLoY->clip->getHeight->clip->getLoX->clip->getLoX->clip->getWidth->if->MarlinUtils->Arrays->toString->logInfo->_at->at->isIdentity->norm->if->pi->norm->s->getPathIterator->getNormalizingPathIterator->clip->getLoX->clip->getLoY->clip->getWidth->clip->getHeight->pi->getWindingRule->init->pc2d->if->if->traceFiller->pathClipper->if->traceInput->pathTo->else->clip->getLoX->clip->getLoY->clip->getWidth->clip->getHeight->init->strokeTo->if->r->endRendering->init->ptg->getBbox->catch->finally->if->r->dispose->return
MarlinRenderingEngine#getMinimumAAPenSize():::Returns the minimum pen width that the antialiasing rasterizer can represent without dropouts occuring.:::return
MarlinRenderingEngine#getRendererContext():::Get the RendererContext instance dedicated to the current thread:::rdrCtx->RDR_CTX_PROVIDER->acquire->if->start->return
MarlinRenderingEngine#returnRendererContext(RendererContext):::Reset and return the given RendererContext instance for reuse:::rdrCtx->dispose->if->stop->RDR_CTX_PROVIDER->release
MarlinTileGenerator#dispose():::Disposes this tile generator: clean up before reusing this instance:::if->stop->cache->dispose->if->rdrF->dispose->else->if->rdrD->dispose
MarlinTileGenerator#getTileWidth():::Gets the width of the tiles that the generator batches output into.:::if->start->return
MarlinTileGenerator#getTileHeight():::Gets the height of the tiles that the generator batches output into.:::return
MarlinTileGenerator#getTypicalAlpha():::Gets the typical alpha value that will characterize the current tile:::if->return->al->cache->alphaSumInTile->alpha->if->add->return
MarlinTileGenerator#nextTile():::Skips the current tile and moves on to the next tile:::if->if->if->rdrF->endRendering->else->if->rdrD->endRendering
MarlinTileGenerator#getAlpha(byte[], int, int):::Gets the alpha coverage values for the current tile:::if->getAlphaRLE->else->getAlphaNoRLE
MarlinUtils#getRootThreadGroup():::Returns a root thread group:::currentTG->Thread->currentThread->getThreadGroup->parentTG->currentTG->getParent->while->currentTG->getParent->return
MergeSort#mergeSortNoCopy(int[], int[], int[], int[], int, int):::Modified merge sort: Input arrays are in both auxX/auxY (sorted: 0 to insertionSortIndex)                     and x/y (unsorted: insertionSortIndex to toIndex) Outputs are stored in x/y arrays:::if->throw->new->ArrayIndexOutOfBoundsException->mergeSort->if->System->arraycopy->System->arraycopy->return->for->i->p->q
Renderer#dispose():::Disposes this renderer and recycle it clean up before reusing this instance:::if->add->add->add->add->crossings_ref->putArray->aux_crossings_ref->putArray->edgePtrs_ref->putArray->aux_edgePtrs_ref->putArray->alphaLine_ref->putArray->blkFlags_ref->putArray->if->if->edgeBuckets_ref->putArray->edgeBucketCounts_ref->putArray->else->edgeBuckets_ref->putArray->edgeBucketCounts_ref->putArray->if->edges->resize->if->edges->fill->if->stop->MarlinRenderingEngine->returnRendererContext
RendererContext#createContext():::Create a new renderer context:::return->Integer->CTX_COUNT->getAndIncrement->toString->new->RendererContext
RendererContext#dispose():::Disposes this renderer context: clean up before reusing this context:::if->if->if->dispose->dispose->dispose->dispose
Stroker#init(PathConsumer2D, float, int, int, float, boolean):::Inits the Stroker.:::limit->if->margin->if->if->_clipRect->if->MarlinUtils->Arrays->toString->logInfo->if->curveSplitter->init->else->else->return
Stroker#dispose():::Disposes this stroker: clean up before reusing this instance:::reverse->dispose->if->Arrays->fill->Arrays->fill->Arrays->fill->Arrays->fill->Arrays->fill->Arrays->fill
TransformingPathConsumer2D.ClosedPathDetector#dispose():::Disposes this instance: clean up before reusing this instance:::stack->dispose
TransformingPathConsumer2D.PathClipFilter#dispose():::Disposes this instance: clean up before reusing this instance:::stack->dispose

sun.java2d.marlin.ArrayCacheConst#getBucket(int)->int::: array cache const get bucket
sun.java2d.marlin.ArrayCacheConst#getNewSize(int, int)->int:::Return the new array size (~ x2)
sun.java2d.marlin.ArrayCacheConst#getNewLargeSize(long, long)->long:::Return the new array size (~ x2)
sun.java2d.marlin.ArrayCacheConst.CacheStats#reset()->void::: cache stats reset
sun.java2d.marlin.ArrayCacheConst.CacheStats#dumpStats()->long::: cache stats dump stats
sun.java2d.marlin.ArrayCacheConst.CacheStats#getTotalInitialBytes()->long::: cache stats get total initial bytes
sun.java2d.marlin.ArrayCacheConst.BucketStats#reset()->void::: bucket stats reset
sun.java2d.marlin.ArrayCacheConst.BucketStats#updateMaxSize(int)->void::: bucket stats update max size
sun.java2d.marlin.ByteArrayCache#getCacheBucket(int)->Bucket::: byte array cache get cache bucket
sun.java2d.marlin.ByteArrayCache#createRef(int)->Reference::: byte array cache create ref
sun.java2d.marlin.ByteArrayCache.Reference#getArray(int)->byte[]::: reference get array
sun.java2d.marlin.ByteArrayCache.Reference#widenArray(byte[], int, int)->byte[]::: reference widen array
sun.java2d.marlin.ByteArrayCache.Reference#putArray(byte[])->byte[]::: reference put array
sun.java2d.marlin.ByteArrayCache.Reference#putArray(byte[], int, int)->byte[]::: reference put array
sun.java2d.marlin.ByteArrayCache.Bucket#getArray()->byte[]::: bucket get array
sun.java2d.marlin.ByteArrayCache.Bucket#putArray(byte[])->void::: bucket put array
sun.java2d.marlin.ByteArrayCache#createArray(int)->byte[]::: byte array cache create array
sun.java2d.marlin.ByteArrayCache#fill(byte[], int, int, byte)->void::: byte array cache fill
sun.java2d.marlin.ByteArrayCache#check(byte[], int, int, byte)->void::: byte array cache check
sun.java2d.marlin.ByteArrayCache#getLogPrefix(boolean)->String::: byte array cache get log prefix
sun.java2d.marlin.CollinearSimplifier#init(PathConsumer2D)->CollinearSimplifier::: collinear simplifier init
sun.java2d.marlin.CollinearSimplifier#pathDone()->void::: collinear simplifier path done
sun.java2d.marlin.CollinearSimplifier#closePath()->void::: collinear simplifier close path
sun.java2d.marlin.CollinearSimplifier#getNativeConsumer()->long::: collinear simplifier get native consumer
sun.java2d.marlin.CollinearSimplifier#quadTo(float, float, float, float)->void::: collinear simplifier quad to
sun.java2d.marlin.CollinearSimplifier#curveTo(float, float, float, float, float, float)->void::: collinear simplifier curve to
sun.java2d.marlin.CollinearSimplifier#moveTo(float, float)->void::: collinear simplifier move to
sun.java2d.marlin.CollinearSimplifier#lineTo(float, float)->void::: collinear simplifier line to
sun.java2d.marlin.Curve#set(float[], int)->void::: curve set
sun.java2d.marlin.Curve#set(float, float, float, float, float, float, float, float)->void::: curve set
sun.java2d.marlin.Curve#set(float, float, float, float, float, float)->void::: curve set
sun.java2d.marlin.Curve#set(float, float, float, float)->void::: curve set
sun.java2d.marlin.Curve#dxRoots(float[], int)->int::: curve dx roots
sun.java2d.marlin.Curve#dyRoots(float[], int)->int::: curve dy roots
sun.java2d.marlin.Curve#infPoints(float[], int)->int::: curve inf points
sun.java2d.marlin.Curve#xPoints(float[], int, float)->int::: curve x points
sun.java2d.marlin.Curve#yPoints(float[], int, float)->int::: curve y points
sun.java2d.marlin.Curve#rootsOfROCMinusW(float[], int, float, float)->int::: curve roots of minus w
sun.java2d.marlin.Dasher#init(PathConsumer2D, float[], int, float, boolean)->Dasher:::Initialize the Dasher.
sun.java2d.marlin.Dasher#dispose()->void:::Disposes this dasher: clean up before reusing this instance
sun.java2d.marlin.Dasher#copyDashArray(float[])->float[]::: dasher copy dash array
sun.java2d.marlin.Dasher#moveTo(float, float)->void::: dasher move to
sun.java2d.marlin.Dasher#lineTo(float, float)->void::: dasher line to
sun.java2d.marlin.Dasher#skipLen()->void::: dasher skip len
sun.java2d.marlin.Dasher.LengthIterator#reset()->void:::Reset this LengthIterator.
sun.java2d.marlin.Dasher.LengthIterator#initializeIterationOnCurve(float[], int)->void::: length iterator initialize iteration on curve
sun.java2d.marlin.Dasher.LengthIterator#next(float)->float::: length iterator next
sun.java2d.marlin.Dasher.LengthIterator#totalLength()->float::: length iterator total length
sun.java2d.marlin.Dasher.LengthIterator#lastSegLen()->float::: length iterator last seg len
sun.java2d.marlin.Dasher#curveTo(float, float, float, float, float, float)->void::: dasher curve to
sun.java2d.marlin.Dasher#quadTo(float, float, float, float)->void::: dasher quad to
sun.java2d.marlin.Dasher#closePath()->void::: dasher close path
sun.java2d.marlin.Dasher#pathDone()->void::: dasher path done
sun.java2d.marlin.Dasher#getNativeConsumer()->long::: dasher get native consumer
sun.java2d.marlin.DCollinearSimplifier#init(DPathConsumer2D)->DCollinearSimplifier::: collinear simplifier init
sun.java2d.marlin.DCollinearSimplifier#pathDone()->void::: collinear simplifier path done
sun.java2d.marlin.DCollinearSimplifier#closePath()->void::: collinear simplifier close path
sun.java2d.marlin.DCollinearSimplifier#getNativeConsumer()->long::: collinear simplifier get native consumer
sun.java2d.marlin.DCollinearSimplifier#quadTo(double, double, double, double)->void::: collinear simplifier quad to
sun.java2d.marlin.DCollinearSimplifier#curveTo(double, double, double, double, double, double)->void::: collinear simplifier curve to
sun.java2d.marlin.DCollinearSimplifier#moveTo(double, double)->void::: collinear simplifier move to
sun.java2d.marlin.DCollinearSimplifier#lineTo(double, double)->void::: collinear simplifier line to
sun.java2d.marlin.DCurve#set(double[], int)->void::: curve set
sun.java2d.marlin.DCurve#set(double, double, double, double, double, double, double, double)->void::: curve set
sun.java2d.marlin.DCurve#set(double, double, double, double, double, double)->void::: curve set
sun.java2d.marlin.DCurve#set(double, double, double, double)->void::: curve set
sun.java2d.marlin.DCurve#dxRoots(double[], int)->int::: curve dx roots
sun.java2d.marlin.DCurve#dyRoots(double[], int)->int::: curve dy roots
sun.java2d.marlin.DCurve#infPoints(double[], int)->int::: curve inf points
sun.java2d.marlin.DCurve#xPoints(double[], int, double)->int::: curve x points
sun.java2d.marlin.DCurve#yPoints(double[], int, double)->int::: curve y points
sun.java2d.marlin.DCurve#rootsOfROCMinusW(double[], int, double, double)->int::: curve roots of minus w
sun.java2d.marlin.DDasher#init(DPathConsumer2D, double[], int, double, boolean)->DDasher:::Initialize the DDasher.
sun.java2d.marlin.DDasher#dispose()->void:::Disposes this dasher: clean up before reusing this instance
sun.java2d.marlin.DDasher#copyDashArray(float[])->double[]::: dasher copy dash array
sun.java2d.marlin.DDasher#moveTo(double, double)->void::: dasher move to
sun.java2d.marlin.DDasher#lineTo(double, double)->void::: dasher line to
sun.java2d.marlin.DDasher#skipLen()->void::: dasher skip len
sun.java2d.marlin.DDasher.LengthIterator#reset()->void:::Reset this LengthIterator.
sun.java2d.marlin.DDasher.LengthIterator#initializeIterationOnCurve(double[], int)->void::: length iterator initialize iteration on curve
sun.java2d.marlin.DDasher.LengthIterator#next(double)->double::: length iterator next
sun.java2d.marlin.DDasher.LengthIterator#totalLength()->double::: length iterator total length
sun.java2d.marlin.DDasher.LengthIterator#lastSegLen()->double::: length iterator last seg len
sun.java2d.marlin.DDasher#curveTo(double, double, double, double, double, double)->void::: dasher curve to
sun.java2d.marlin.DDasher#quadTo(double, double, double, double)->void::: dasher quad to
sun.java2d.marlin.DDasher#closePath()->void::: dasher close path
sun.java2d.marlin.DDasher#pathDone()->void::: dasher path done
sun.java2d.marlin.DDasher#getNativeConsumer()->long::: dasher get native consumer
sun.java2d.marlin.DHelpers#within(double, double, double)->boolean::: helpers within
sun.java2d.marlin.DHelpers#evalCubic(double, double, double, double, double)->double::: helpers eval cubic
sun.java2d.marlin.DHelpers#evalQuad(double, double, double, double)->double::: helpers eval quad
sun.java2d.marlin.DHelpers#quadraticRoots(double, double, double, double[], int)->int::: helpers quadratic roots
sun.java2d.marlin.DHelpers#cubicRootsInAB(double, double, double, double, double[], int, double, double)->int::: helpers cubic roots in b
sun.java2d.marlin.DHelpers#filterOutNotInAB(double[], int, int, double, double)->int::: helpers filter out not in b
sun.java2d.marlin.DHelpers#fastLineLen(double, double, double, double)->double::: helpers fast line len
sun.java2d.marlin.DHelpers#linelen(double, double, double, double)->double::: helpers linelen
sun.java2d.marlin.DHelpers#fastQuadLen(double, double, double, double, double, double)->double::: helpers fast quad len
sun.java2d.marlin.DHelpers#quadlen(double, double, double, double, double, double)->double::: helpers quadlen
sun.java2d.marlin.DHelpers#fastCurvelen(double, double, double, double, double, double, double, double)->double::: helpers fast curvelen
sun.java2d.marlin.DHelpers#curvelen(double, double, double, double, double, double, double, double)->double::: helpers curvelen
sun.java2d.marlin.DHelpers#findSubdivPoints(DCurve, double[], double[], int, double)->int::: helpers find subdiv points
sun.java2d.marlin.DHelpers#findClipPoints(DCurve, double[], double[], int, int, double[])->int::: helpers find clip points
sun.java2d.marlin.DHelpers#subdivide(double[], double[], double[], int)->void::: helpers subdivide
sun.java2d.marlin.DHelpers#isort(double[], int)->void::: helpers isort
sun.java2d.marlin.DHelpers#subdivideCubic(double[], double[], double[])->void:::Subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff&nbsp;+&nbsp;7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices
sun.java2d.marlin.DHelpers#subdivideCubicAt(double, double[], int, double[], int, int)->void::: helpers subdivide cubic at
sun.java2d.marlin.DHelpers#subdivideQuad(double[], double[], double[])->void::: helpers subdivide quad
sun.java2d.marlin.DHelpers#subdivideQuadAt(double, double[], int, double[], int, int)->void::: helpers subdivide quad at
sun.java2d.marlin.DHelpers#subdivideLineAt(double, double[], int, double[], int, int)->void::: helpers subdivide line at
sun.java2d.marlin.DHelpers#subdivideAt(double, double[], int, double[], int, int)->void::: helpers subdivide at
sun.java2d.marlin.DHelpers#outcode(double, double, double[])->int::: helpers outcode
sun.java2d.marlin.DHelpers.PolyStack#dispose()->void:::Disposes this PolyStack: clean up before reusing this instance
sun.java2d.marlin.DHelpers.PolyStack#pushCubic(double, double, double, double, double, double)->void::: poly stack push cubic
sun.java2d.marlin.DHelpers.PolyStack#pushQuad(double, double, double, double)->void::: poly stack push quad
sun.java2d.marlin.DHelpers.PolyStack#pushLine(double, double)->void::: poly stack push line
sun.java2d.marlin.DHelpers.PolyStack#pullAll(DPathConsumer2D)->void::: poly stack pull all
sun.java2d.marlin.DHelpers.PolyStack#popAll(DPathConsumer2D)->void::: poly stack pop all
sun.java2d.marlin.DHelpers.PolyStack#toString()->String::: poly stack to string
sun.java2d.marlin.DHelpers.IndexStack#dispose()->void:::Disposes this PolyStack: clean up before reusing this instance
sun.java2d.marlin.DHelpers.IndexStack#isEmpty()->boolean::: index stack is empty
sun.java2d.marlin.DHelpers.IndexStack#reset()->void::: index stack reset
sun.java2d.marlin.DHelpers.IndexStack#push(int)->void::: index stack push
sun.java2d.marlin.DHelpers.IndexStack#pullAll(double[], DPathConsumer2D)->void::: index stack pull all
sun.java2d.marlin.DMarlinRenderingEngine#createStrokedShape(Shape, float, int, int, float, float[], float)->Shape:::Create a widened path as specified by the parameters
sun.java2d.marlin.DMarlinRenderingEngine#strokeTo(Shape, AffineTransform, BasicStroke, boolean, boolean, boolean, PathConsumer2D)->void:::Sends the geometry for a widened path as specified by the parameters to the specified consumer
sun.java2d.marlin.DMarlinRenderingEngine#strokeTo(DRendererContext, Shape, AffineTransform, BasicStroke, boolean, NormMode, boolean, DPathConsumer2D)->void::: marlin rendering engine stroke to
sun.java2d.marlin.DMarlinRenderingEngine#strokeTo(DRendererContext, Shape, AffineTransform, double, NormMode, int, int, float, float[], float, DPathConsumer2D)->void::: marlin rendering engine stroke to
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator#init(PathIterator)->NormalizingPathIterator::: normalizing path iterator init
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator#dispose()->void:::Disposes this path iterator: clean up before reusing this instance
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator#currentSegment(double[])->int::: normalizing path iterator current segment
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator#normCoord(double)->double::: normalizing path iterator norm coord
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator#currentSegment(float[])->int::: normalizing path iterator current segment
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator#getWindingRule()->int::: normalizing path iterator get winding rule
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator#isDone()->boolean::: normalizing path iterator is done
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator#next()->void::: normalizing path iterator next
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator.NearestPixelCenter#normCoord(double)->double::: nearest pixel center norm coord
sun.java2d.marlin.DMarlinRenderingEngine.NormalizingPathIterator.NearestPixelQuarter#normCoord(double)->double::: nearest pixel quarter norm coord
sun.java2d.marlin.DMarlinRenderingEngine#getAATileGenerator(Shape, AffineTransform, Region, BasicStroke, boolean, boolean, int[])->AATileGenerator:::Construct an antialiased tile generator for the given shape with the given rendering attributes and store the bounds of the tile iteration in the bbox parameter
sun.java2d.marlin.DMarlinRenderingEngine#getAATileGenerator(double, double, double, double, double, double, double, double, Region, int[])->AATileGenerator::: marlin rendering engine get tile generator
sun.java2d.marlin.DMarlinRenderingEngine#getMinimumAAPenSize()->float:::Returns the minimum pen width that the antialiasing rasterizer can represent without dropouts occuring.
sun.java2d.marlin.DMarlinRenderingEngine#getRendererContext()->DRendererContext:::Get the DRendererContext instance dedicated to the current thread
sun.java2d.marlin.DMarlinRenderingEngine#returnRendererContext(DRendererContext)->void:::Reset and return the given DRendererContext instance for reuse
sun.java2d.marlin.DoubleArrayCache#getCacheBucket(int)->Bucket::: double array cache get cache bucket
sun.java2d.marlin.DoubleArrayCache#createRef(int)->Reference::: double array cache create ref
sun.java2d.marlin.DoubleArrayCache.Reference#getArray(int)->double[]::: reference get array
sun.java2d.marlin.DoubleArrayCache.Reference#widenArray(double[], int, int)->double[]::: reference widen array
sun.java2d.marlin.DoubleArrayCache.Reference#putArray(double[])->double[]::: reference put array
sun.java2d.marlin.DoubleArrayCache.Reference#putArray(double[], int, int)->double[]::: reference put array
sun.java2d.marlin.DoubleArrayCache.Bucket#getArray()->double[]::: bucket get array
sun.java2d.marlin.DoubleArrayCache.Bucket#putArray(double[])->void::: bucket put array
sun.java2d.marlin.DoubleArrayCache#createArray(int)->double[]::: double array cache create array
sun.java2d.marlin.DoubleArrayCache#fill(double[], int, int, double)->void::: double array cache fill
sun.java2d.marlin.DoubleArrayCache#check(double[], int, int, double)->void::: double array cache check
sun.java2d.marlin.DoubleArrayCache#getLogPrefix(boolean)->String::: double array cache get log prefix
sun.java2d.marlin.DPathConsumer2D#moveTo(double, double)->void::: path consumer2 d move to
sun.java2d.marlin.DPathConsumer2D#lineTo(double, double)->void::: path consumer2 d line to
sun.java2d.marlin.DPathConsumer2D#quadTo(double, double, double, double)->void::: path consumer2 d quad to
sun.java2d.marlin.DPathConsumer2D#curveTo(double, double, double, double, double, double)->void::: path consumer2 d curve to
sun.java2d.marlin.DPathConsumer2D#closePath()->void::: path consumer2 d close path
sun.java2d.marlin.DPathConsumer2D#pathDone()->void:::Called after the last segment of the last subpath when the iteration of the path segments is completely done
sun.java2d.marlin.DPathConsumer2D#getNativeConsumer()->long:::If a given PathConsumer performs all or most of its work natively then it can return a (non-zero) pointer to a native function vector that defines C functions for all of the above methods
sun.java2d.marlin.DPathSimplifier#init(DPathConsumer2D)->DPathSimplifier::: path simplifier init
sun.java2d.marlin.DPathSimplifier#pathDone()->void::: path simplifier path done
sun.java2d.marlin.DPathSimplifier#closePath()->void::: path simplifier close path
sun.java2d.marlin.DPathSimplifier#getNativeConsumer()->long::: path simplifier get native consumer
sun.java2d.marlin.DPathSimplifier#quadTo(double, double, double, double)->void::: path simplifier quad to
sun.java2d.marlin.DPathSimplifier#curveTo(double, double, double, double, double, double)->void::: path simplifier curve to
sun.java2d.marlin.DPathSimplifier#moveTo(double, double)->void::: path simplifier move to
sun.java2d.marlin.DPathSimplifier#lineTo(double, double)->void::: path simplifier line to
sun.java2d.marlin.DRenderer#init(int, int, int, int, int)->DRenderer::: renderer init
sun.java2d.marlin.DRenderer#dispose()->void:::Disposes this renderer and recycle it clean up before reusing this instance
sun.java2d.marlin.DRenderer#moveTo(double, double)->void::: renderer move to
sun.java2d.marlin.DRenderer#lineTo(double, double)->void::: renderer line to
sun.java2d.marlin.DRenderer#curveTo(double, double, double, double, double, double)->void::: renderer curve to
sun.java2d.marlin.DRenderer#quadTo(double, double, double, double)->void::: renderer quad to
sun.java2d.marlin.DRenderer#closePath()->void::: renderer close path
sun.java2d.marlin.DRenderer#pathDone()->void::: renderer path done
sun.java2d.marlin.DRenderer#getNativeConsumer()->long::: renderer get native consumer
sun.java2d.marlin.DRenderer#endRendering()->boolean::: renderer end rendering
sun.java2d.marlin.DRenderer#endRendering(int)->void::: renderer end rendering
sun.java2d.marlin.DRenderer#copyAARow(int[], int, int, int, boolean)->void::: renderer copy row
sun.java2d.marlin.DRendererContext#createContext()->DRendererContext:::Create a new renderer context
sun.java2d.marlin.DRendererContext#dispose()->void:::Disposes this renderer context: clean up before reusing this context
sun.java2d.marlin.DRendererContext#getPath2D()->Path2D.Double::: renderer context get path2 d
sun.java2d.marlin.DRendererContext#stats()->RendererStats::: renderer context stats
sun.java2d.marlin.DRendererContext#newOffHeapArray(long)->OffHeapArray::: renderer context new off heap array
sun.java2d.marlin.DRendererContext#newCleanIntArrayRef(int)->IntArrayCache.Reference::: renderer context new clean int array ref
sun.java2d.marlin.DRendererContext#newDirtyIntArrayRef(int)->IntArrayCache.Reference::: renderer context new dirty int array ref
sun.java2d.marlin.DRendererContext#newDirtyDoubleArrayRef(int)->DoubleArrayCache.Reference::: renderer context new dirty double array ref
sun.java2d.marlin.DRendererContext#newDirtyByteArrayRef(int)->ByteArrayCache.Reference::: renderer context new dirty byte array ref
sun.java2d.marlin.DRendererContext.PathConsumer2DAdapter#init(sun.awt.geom.PathConsumer2D)->PathConsumer2DAdapter::: path consumer2 adapter init
sun.java2d.marlin.DRendererContext.PathConsumer2DAdapter#moveTo(double, double)->void::: path consumer2 adapter move to
sun.java2d.marlin.DRendererContext.PathConsumer2DAdapter#lineTo(double, double)->void::: path consumer2 adapter line to
sun.java2d.marlin.DRendererContext.PathConsumer2DAdapter#closePath()->void::: path consumer2 adapter close path
sun.java2d.marlin.DRendererContext.PathConsumer2DAdapter#pathDone()->void::: path consumer2 adapter path done
sun.java2d.marlin.DRendererContext.PathConsumer2DAdapter#curveTo(double, double, double, double, double, double)->void::: path consumer2 adapter curve to
sun.java2d.marlin.DRendererContext.PathConsumer2DAdapter#quadTo(double, double, double, double)->void::: path consumer2 adapter quad to
sun.java2d.marlin.DRendererContext.PathConsumer2DAdapter#getNativeConsumer()->long::: path consumer2 adapter get native consumer
sun.java2d.marlin.DStroker#init(DPathConsumer2D, double, int, int, double, boolean)->DStroker:::Inits the DStroker.
sun.java2d.marlin.DStroker#disableClipping()->void::: stroker disable clipping
sun.java2d.marlin.DStroker#dispose()->void:::Disposes this stroker: clean up before reusing this instance
sun.java2d.marlin.DStroker#moveTo(double, double)->void::: stroker move to
sun.java2d.marlin.DStroker#lineTo(double, double)->void::: stroker line to
sun.java2d.marlin.DStroker#closePath()->void::: stroker close path
sun.java2d.marlin.DStroker#pathDone()->void::: stroker path done
sun.java2d.marlin.DStroker#curveTo(double, double, double, double, double, double)->void::: stroker curve to
sun.java2d.marlin.DStroker#quadTo(double, double, double, double)->void::: stroker quad to
sun.java2d.marlin.DStroker#getNativeConsumer()->long::: stroker get native consumer
sun.java2d.marlin.DTransformingPathConsumer2D#wrapPath2D(Path2D.Double)->DPathConsumer2D::: transforming path consumer2 d wrap path2 d
sun.java2d.marlin.DTransformingPathConsumer2D#traceInput(DPathConsumer2D)->DPathConsumer2D::: transforming path consumer2 d trace input
sun.java2d.marlin.DTransformingPathConsumer2D#traceClosedPathDetector(DPathConsumer2D)->DPathConsumer2D::: transforming path consumer2 d trace closed path detector
sun.java2d.marlin.DTransformingPathConsumer2D#traceFiller(DPathConsumer2D)->DPathConsumer2D::: transforming path consumer2 d trace filler
sun.java2d.marlin.DTransformingPathConsumer2D#traceStroker(DPathConsumer2D)->DPathConsumer2D::: transforming path consumer2 d trace stroker
sun.java2d.marlin.DTransformingPathConsumer2D#traceDasher(DPathConsumer2D)->DPathConsumer2D::: transforming path consumer2 d trace dasher
sun.java2d.marlin.DTransformingPathConsumer2D#detectClosedPath(DPathConsumer2D)->DPathConsumer2D::: transforming path consumer2 d detect closed path
sun.java2d.marlin.DTransformingPathConsumer2D#pathClipper(DPathConsumer2D)->DPathConsumer2D::: transforming path consumer2 d path clipper
sun.java2d.marlin.DTransformingPathConsumer2D#deltaTransformConsumer(DPathConsumer2D, AffineTransform)->DPathConsumer2D::: transforming path consumer2 d delta transform consumer
sun.java2d.marlin.DTransformingPathConsumer2D#inverseDeltaTransformConsumer(DPathConsumer2D, AffineTransform)->DPathConsumer2D::: transforming path consumer2 d inverse delta transform consumer
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaScaleFilter#init(DPathConsumer2D, double, double)->DeltaScaleFilter::: delta scale filter init
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaScaleFilter#moveTo(double, double)->void::: delta scale filter move to
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaScaleFilter#lineTo(double, double)->void::: delta scale filter line to
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaScaleFilter#quadTo(double, double, double, double)->void::: delta scale filter quad to
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaScaleFilter#curveTo(double, double, double, double, double, double)->void::: delta scale filter curve to
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaScaleFilter#closePath()->void::: delta scale filter close path
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaScaleFilter#pathDone()->void::: delta scale filter path done
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaScaleFilter#getNativeConsumer()->long::: delta scale filter get native consumer
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaTransformFilter#init(DPathConsumer2D, double, double, double, double)->DeltaTransformFilter::: delta transform filter init
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaTransformFilter#moveTo(double, double)->void::: delta transform filter move to
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaTransformFilter#lineTo(double, double)->void::: delta transform filter line to
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaTransformFilter#quadTo(double, double, double, double)->void::: delta transform filter quad to
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaTransformFilter#curveTo(double, double, double, double, double, double)->void::: delta transform filter curve to
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaTransformFilter#closePath()->void::: delta transform filter close path
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaTransformFilter#pathDone()->void::: delta transform filter path done
sun.java2d.marlin.DTransformingPathConsumer2D.DeltaTransformFilter#getNativeConsumer()->long::: delta transform filter get native consumer
sun.java2d.marlin.DTransformingPathConsumer2D.Path2DWrapper#init(Path2D.Double)->Path2DWrapper::: path2 wrapper init
sun.java2d.marlin.DTransformingPathConsumer2D.Path2DWrapper#moveTo(double, double)->void::: path2 wrapper move to
sun.java2d.marlin.DTransformingPathConsumer2D.Path2DWrapper#lineTo(double, double)->void::: path2 wrapper line to
sun.java2d.marlin.DTransformingPathConsumer2D.Path2DWrapper#closePath()->void::: path2 wrapper close path
sun.java2d.marlin.DTransformingPathConsumer2D.Path2DWrapper#pathDone()->void::: path2 wrapper path done
sun.java2d.marlin.DTransformingPathConsumer2D.Path2DWrapper#curveTo(double, double, double, double, double, double)->void::: path2 wrapper curve to
sun.java2d.marlin.DTransformingPathConsumer2D.Path2DWrapper#quadTo(double, double, double, double)->void::: path2 wrapper quad to
sun.java2d.marlin.DTransformingPathConsumer2D.Path2DWrapper#getNativeConsumer()->long::: path2 wrapper get native consumer
sun.java2d.marlin.DTransformingPathConsumer2D.ClosedPathDetector#init(DPathConsumer2D)->ClosedPathDetector::: closed path detector init
sun.java2d.marlin.DTransformingPathConsumer2D.ClosedPathDetector#dispose()->void:::Disposes this instance: clean up before reusing this instance
sun.java2d.marlin.DTransformingPathConsumer2D.ClosedPathDetector#pathDone()->void::: closed path detector path done
sun.java2d.marlin.DTransformingPathConsumer2D.ClosedPathDetector#closePath()->void::: closed path detector close path
sun.java2d.marlin.DTransformingPathConsumer2D.ClosedPathDetector#moveTo(double, double)->void::: closed path detector move to
sun.java2d.marlin.DTransformingPathConsumer2D.ClosedPathDetector#lineTo(double, double)->void::: closed path detector line to
sun.java2d.marlin.DTransformingPathConsumer2D.ClosedPathDetector#curveTo(double, double, double, double, double, double)->void::: closed path detector curve to
sun.java2d.marlin.DTransformingPathConsumer2D.ClosedPathDetector#quadTo(double, double, double, double)->void::: closed path detector quad to
sun.java2d.marlin.DTransformingPathConsumer2D.ClosedPathDetector#getNativeConsumer()->long::: closed path detector get native consumer
sun.java2d.marlin.DTransformingPathConsumer2D.PathClipFilter#init(DPathConsumer2D)->PathClipFilter::: path clip filter init
sun.java2d.marlin.DTransformingPathConsumer2D.PathClipFilter#dispose()->void:::Disposes this instance: clean up before reusing this instance
sun.java2d.marlin.DTransformingPathConsumer2D.PathClipFilter#pathDone()->void::: path clip filter path done
sun.java2d.marlin.DTransformingPathConsumer2D.PathClipFilter#closePath()->void::: path clip filter close path
sun.java2d.marlin.DTransformingPathConsumer2D.PathClipFilter#moveTo(double, double)->void::: path clip filter move to
sun.java2d.marlin.DTransformingPathConsumer2D.PathClipFilter#lineTo(double, double)->void::: path clip filter line to
sun.java2d.marlin.DTransformingPathConsumer2D.PathClipFilter#curveTo(double, double, double, double, double, double)->void::: path clip filter curve to
sun.java2d.marlin.DTransformingPathConsumer2D.PathClipFilter#quadTo(double, double, double, double)->void::: path clip filter quad to
sun.java2d.marlin.DTransformingPathConsumer2D.PathClipFilter#getNativeConsumer()->long::: path clip filter get native consumer
sun.java2d.marlin.DTransformingPathConsumer2D.CurveClipSplitter#init()->void::: curve clip splitter init
sun.java2d.marlin.DTransformingPathConsumer2D.CurveClipSplitter#splitLine(double, double, double, double, int, DPathConsumer2D)->boolean::: curve clip splitter split line
sun.java2d.marlin.DTransformingPathConsumer2D.CurveClipSplitter#splitQuad(double, double, double, double, double, double, int, DPathConsumer2D)->boolean::: curve clip splitter split quad
sun.java2d.marlin.DTransformingPathConsumer2D.CurveClipSplitter#splitCurve(double, double, double, double, double, double, double, double, int, DPathConsumer2D)->boolean::: curve clip splitter split curve
sun.java2d.marlin.DTransformingPathConsumer2D.CurveClipSplitter#emitCurrent(int, double[], int, DPathConsumer2D)->void::: curve clip splitter emit current
sun.java2d.marlin.DTransformingPathConsumer2D.CurveBasicMonotonizer#init(double)->void::: curve basic monotonizer init
sun.java2d.marlin.DTransformingPathConsumer2D.CurveBasicMonotonizer#curve(double, double, double, double, double, double, double, double)->CurveBasicMonotonizer::: curve basic monotonizer curve
sun.java2d.marlin.DTransformingPathConsumer2D.CurveBasicMonotonizer#quad(double, double, double, double, double, double)->CurveBasicMonotonizer::: curve basic monotonizer quad
sun.java2d.marlin.DTransformingPathConsumer2D.PathTracer#init(DPathConsumer2D)->PathTracer::: path tracer init
sun.java2d.marlin.DTransformingPathConsumer2D.PathTracer#moveTo(double, double)->void::: path tracer move to
sun.java2d.marlin.DTransformingPathConsumer2D.PathTracer#lineTo(double, double)->void::: path tracer line to
sun.java2d.marlin.DTransformingPathConsumer2D.PathTracer#curveTo(double, double, double, double, double, double)->void::: path tracer curve to
sun.java2d.marlin.DTransformingPathConsumer2D.PathTracer#quadTo(double, double, double, double)->void::: path tracer quad to
sun.java2d.marlin.DTransformingPathConsumer2D.PathTracer#closePath()->void::: path tracer close path
sun.java2d.marlin.DTransformingPathConsumer2D.PathTracer#pathDone()->void::: path tracer path done
sun.java2d.marlin.DTransformingPathConsumer2D.PathTracer#getNativeConsumer()->long::: path tracer get native consumer
sun.java2d.marlin.FloatArrayCache#getCacheBucket(int)->Bucket::: float array cache get cache bucket
sun.java2d.marlin.FloatArrayCache#createRef(int)->Reference::: float array cache create ref
sun.java2d.marlin.FloatArrayCache.Reference#getArray(int)->float[]::: reference get array
sun.java2d.marlin.FloatArrayCache.Reference#widenArray(float[], int, int)->float[]::: reference widen array
sun.java2d.marlin.FloatArrayCache.Reference#putArray(float[])->float[]::: reference put array
sun.java2d.marlin.FloatArrayCache.Reference#putArray(float[], int, int)->float[]::: reference put array
sun.java2d.marlin.FloatArrayCache.Bucket#getArray()->float[]::: bucket get array
sun.java2d.marlin.FloatArrayCache.Bucket#putArray(float[])->void::: bucket put array
sun.java2d.marlin.FloatArrayCache#createArray(int)->float[]::: float array cache create array
sun.java2d.marlin.FloatArrayCache#fill(float[], int, int, float)->void::: float array cache fill
sun.java2d.marlin.FloatArrayCache#check(float[], int, int, float)->void::: float array cache check
sun.java2d.marlin.FloatArrayCache#getLogPrefix(boolean)->String::: float array cache get log prefix
sun.java2d.marlin.FloatMath#max(int, int)->int::: float math max
sun.java2d.marlin.FloatMath#min(int, int)->int::: float math min
sun.java2d.marlin.FloatMath#ceil_f(float)->float:::Returns the smallest (closest to negative infinity) float value that is greater than or equal to the argument and is equal to a mathematical integer
sun.java2d.marlin.FloatMath#floor_f(float)->float:::Returns the largest (closest to positive infinity) float value that is less than or equal to the argument and is equal to a mathematical integer
sun.java2d.marlin.FloatMath#ceil_int(float)->int:::Faster alternative to ceil(float) optimized for the integer domain and supporting NaN and +/-Infinity.
sun.java2d.marlin.FloatMath#ceil_int(double)->int:::Faster alternative to ceil(double) optimized for the integer domain and supporting NaN and +/-Infinity.
sun.java2d.marlin.FloatMath#floor_int(float)->int:::Faster alternative to floor(float) optimized for the integer domain and supporting NaN and +/-Infinity.
sun.java2d.marlin.FloatMath#floor_int(double)->int:::Faster alternative to floor(double) optimized for the integer domain and supporting NaN and +/-Infinity.
sun.java2d.marlin.Helpers#within(float, float, float)->boolean::: helpers within
sun.java2d.marlin.Helpers#within(double, double, double)->boolean::: helpers within
sun.java2d.marlin.Helpers#evalCubic(float, float, float, float, float)->float::: helpers eval cubic
sun.java2d.marlin.Helpers#evalQuad(float, float, float, float)->float::: helpers eval quad
sun.java2d.marlin.Helpers#quadraticRoots(float, float, float, float[], int)->int::: helpers quadratic roots
sun.java2d.marlin.Helpers#cubicRootsInAB(float, float, float, float, float[], int, float, float)->int::: helpers cubic roots in b
sun.java2d.marlin.Helpers#filterOutNotInAB(float[], int, int, float, float)->int::: helpers filter out not in b
sun.java2d.marlin.Helpers#fastLineLen(float, float, float, float)->float::: helpers fast line len
sun.java2d.marlin.Helpers#linelen(float, float, float, float)->float::: helpers linelen
sun.java2d.marlin.Helpers#fastQuadLen(float, float, float, float, float, float)->float::: helpers fast quad len
sun.java2d.marlin.Helpers#quadlen(float, float, float, float, float, float)->float::: helpers quadlen
sun.java2d.marlin.Helpers#fastCurvelen(float, float, float, float, float, float, float, float)->float::: helpers fast curvelen
sun.java2d.marlin.Helpers#curvelen(float, float, float, float, float, float, float, float)->float::: helpers curvelen
sun.java2d.marlin.Helpers#findSubdivPoints(Curve, float[], float[], int, float)->int::: helpers find subdiv points
sun.java2d.marlin.Helpers#findClipPoints(Curve, float[], float[], int, int, float[])->int::: helpers find clip points
sun.java2d.marlin.Helpers#subdivide(float[], float[], float[], int)->void::: helpers subdivide
sun.java2d.marlin.Helpers#isort(float[], int)->void::: helpers isort
sun.java2d.marlin.Helpers#subdivideCubic(float[], float[], float[])->void:::Subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff&nbsp;+&nbsp;7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices
sun.java2d.marlin.Helpers#subdivideCubicAt(float, float[], int, float[], int, int)->void::: helpers subdivide cubic at
sun.java2d.marlin.Helpers#subdivideQuad(float[], float[], float[])->void::: helpers subdivide quad
sun.java2d.marlin.Helpers#subdivideQuadAt(float, float[], int, float[], int, int)->void::: helpers subdivide quad at
sun.java2d.marlin.Helpers#subdivideLineAt(float, float[], int, float[], int, int)->void::: helpers subdivide line at
sun.java2d.marlin.Helpers#subdivideAt(float, float[], int, float[], int, int)->void::: helpers subdivide at
sun.java2d.marlin.Helpers#outcode(float, float, float[])->int::: helpers outcode
sun.java2d.marlin.Helpers.PolyStack#dispose()->void:::Disposes this PolyStack: clean up before reusing this instance
sun.java2d.marlin.Helpers.PolyStack#pushCubic(float, float, float, float, float, float)->void::: poly stack push cubic
sun.java2d.marlin.Helpers.PolyStack#pushQuad(float, float, float, float)->void::: poly stack push quad
sun.java2d.marlin.Helpers.PolyStack#pushLine(float, float)->void::: poly stack push line
sun.java2d.marlin.Helpers.PolyStack#pullAll(PathConsumer2D)->void::: poly stack pull all
sun.java2d.marlin.Helpers.PolyStack#popAll(PathConsumer2D)->void::: poly stack pop all
sun.java2d.marlin.Helpers.PolyStack#toString()->String::: poly stack to string
sun.java2d.marlin.Helpers.IndexStack#dispose()->void:::Disposes this PolyStack: clean up before reusing this instance
sun.java2d.marlin.Helpers.IndexStack#isEmpty()->boolean::: index stack is empty
sun.java2d.marlin.Helpers.IndexStack#reset()->void::: index stack reset
sun.java2d.marlin.Helpers.IndexStack#push(int)->void::: index stack push
sun.java2d.marlin.Helpers.IndexStack#pullAll(float[], PathConsumer2D)->void::: index stack pull all
sun.java2d.marlin.IntArrayCache#getCacheBucket(int)->Bucket::: int array cache get cache bucket
sun.java2d.marlin.IntArrayCache#createRef(int)->Reference::: int array cache create ref
sun.java2d.marlin.IntArrayCache.Reference#getArray(int)->int[]::: reference get array
sun.java2d.marlin.IntArrayCache.Reference#widenArray(int[], int, int)->int[]::: reference widen array
sun.java2d.marlin.IntArrayCache.Reference#putArray(int[])->int[]::: reference put array
sun.java2d.marlin.IntArrayCache.Reference#putArray(int[], int, int)->int[]::: reference put array
sun.java2d.marlin.IntArrayCache.Bucket#getArray()->int[]::: bucket get array
sun.java2d.marlin.IntArrayCache.Bucket#putArray(int[])->void::: bucket put array
sun.java2d.marlin.IntArrayCache#createArray(int)->int[]::: int array cache create array
sun.java2d.marlin.IntArrayCache#fill(int[], int, int, int)->void::: int array cache fill
sun.java2d.marlin.IntArrayCache#check(int[], int, int, int)->void::: int array cache check
sun.java2d.marlin.IntArrayCache#getLogPrefix(boolean)->String::: int array cache get log prefix
sun.java2d.marlin.IRendererContext#stats()->RendererStats::: renderer context stats
sun.java2d.marlin.IRendererContext#newOffHeapArray(long)->OffHeapArray::: renderer context new off heap array
sun.java2d.marlin.IRendererContext#newCleanIntArrayRef(int)->IntArrayCache.Reference::: renderer context new clean int array ref
sun.java2d.marlin.MarlinCache#init(int, int, int, int)->void::: marlin cache init
sun.java2d.marlin.MarlinCache#dispose()->void:::Disposes this cache: clean up before reusing this instance
sun.java2d.marlin.MarlinCache#resetTileLine(int)->void::: marlin cache reset tile line
sun.java2d.marlin.MarlinCache#clearAARow(int)->void::: marlin cache clear row
sun.java2d.marlin.MarlinCache#copyAARowNoRLE(int[], int, int, int)->void:::Copy the given alpha data into the rowAA cache
sun.java2d.marlin.MarlinCache#copyAARowRLE_WithBlockFlags(int[], int[], int, int, int)->void::: marlin cache copy row e_ with block flags
sun.java2d.marlin.MarlinCache#startRLERow(int, int, int)->long::: marlin cache start row
sun.java2d.marlin.MarlinCache#alphaSumInTile(int)->int::: marlin cache alpha sum in tile
sun.java2d.marlin.MarlinCache#toString()->String::: marlin cache to string
sun.java2d.marlin.MarlinProperties#isUseThreadLocal()->boolean::: marlin properties is use thread local
sun.java2d.marlin.MarlinProperties#getInitialEdges()->int:::Return the initial edge capacity used to define initial arrays (edges, polystack, crossings)
sun.java2d.marlin.MarlinProperties#getInitialPixelWidth()->int:::Return the initial pixel width used to define initial arrays (tile AA chunk, alpha line)
sun.java2d.marlin.MarlinProperties#getInitialPixelHeight()->int:::Return the initial pixel height used to define initial arrays (buckets)
sun.java2d.marlin.MarlinProperties#getSubPixel_Log2_X()->int:::Return the log(2) corresponding to subpixel on x-axis
sun.java2d.marlin.MarlinProperties#getSubPixel_Log2_Y()->int:::Return the log(2) corresponding to subpixel on y-axis
sun.java2d.marlin.MarlinProperties#getTileSize_Log2()->int:::Return the log(2) corresponding to the square tile size in pixels
sun.java2d.marlin.MarlinProperties#getTileWidth_Log2()->int:::Return the log(2) corresponding to the tile width in pixels
sun.java2d.marlin.MarlinProperties#getBlockSize_Log2()->int:::Return the log(2) corresponding to the block size in pixels
sun.java2d.marlin.MarlinProperties#isForceRLE()->boolean::: marlin properties is force e
sun.java2d.marlin.MarlinProperties#isForceNoRLE()->boolean::: marlin properties is force no e
sun.java2d.marlin.MarlinProperties#isUseTileFlags()->boolean::: marlin properties is use tile flags
sun.java2d.marlin.MarlinProperties#isUseTileFlagsWithHeuristics()->boolean::: marlin properties is use tile flags with heuristics
sun.java2d.marlin.MarlinProperties#getRLEMinWidth()->int::: marlin properties get min width
sun.java2d.marlin.MarlinProperties#isUseSimplifier()->boolean::: marlin properties is use simplifier
sun.java2d.marlin.MarlinProperties#isUsePathSimplifier()->boolean::: marlin properties is use path simplifier
sun.java2d.marlin.MarlinProperties#getPathSimplifierPixelTolerance()->float::: marlin properties get path simplifier pixel tolerance
sun.java2d.marlin.MarlinProperties#isDoClip()->boolean::: marlin properties is do clip
sun.java2d.marlin.MarlinProperties#isDoClipRuntimeFlag()->boolean::: marlin properties is do clip runtime flag
sun.java2d.marlin.MarlinProperties#isDoClipAtRuntime()->boolean::: marlin properties is do clip at runtime
sun.java2d.marlin.MarlinProperties#isDoClipSubdivider()->boolean::: marlin properties is do clip subdivider
sun.java2d.marlin.MarlinProperties#getSubdividerMinLength()->float::: marlin properties get subdivider min length
sun.java2d.marlin.MarlinProperties#isDoStats()->boolean::: marlin properties is do stats
sun.java2d.marlin.MarlinProperties#isDoMonitors()->boolean::: marlin properties is do monitors
sun.java2d.marlin.MarlinProperties#isDoChecks()->boolean::: marlin properties is do checks
sun.java2d.marlin.MarlinProperties#isLoggingEnabled()->boolean::: marlin properties is logging enabled
sun.java2d.marlin.MarlinProperties#isUseLogger()->boolean::: marlin properties is use logger
sun.java2d.marlin.MarlinProperties#isLogCreateContext()->boolean::: marlin properties is log create context
sun.java2d.marlin.MarlinProperties#isLogUnsafeMalloc()->boolean::: marlin properties is log unsafe malloc
sun.java2d.marlin.MarlinProperties#getCurveLengthError()->float::: marlin properties get curve length error
sun.java2d.marlin.MarlinProperties#getCubicDecD2()->float::: marlin properties get cubic dec d2
sun.java2d.marlin.MarlinProperties#getCubicIncD1()->float::: marlin properties get cubic inc d1
sun.java2d.marlin.MarlinProperties#getQuadDecD2()->float::: marlin properties get quad dec d2
sun.java2d.marlin.MarlinProperties#getBoolean(String, String)->boolean::: marlin properties get boolean
sun.java2d.marlin.MarlinProperties#getInteger(String, int, int, int)->int::: marlin properties get integer
sun.java2d.marlin.MarlinProperties#align(int, int)->int::: marlin properties align
sun.java2d.marlin.MarlinProperties#getDouble(String, double, double, double)->double::: marlin properties get double
sun.java2d.marlin.MarlinProperties#getFloat(String, float, float, float)->float::: marlin properties get float
sun.java2d.marlin.MarlinRenderingEngine#createStrokedShape(Shape, float, int, int, float, float[], float)->Shape:::Create a widened path as specified by the parameters
sun.java2d.marlin.MarlinRenderingEngine#strokeTo(Shape, AffineTransform, BasicStroke, boolean, boolean, boolean, PathConsumer2D)->void:::Sends the geometry for a widened path as specified by the parameters to the specified consumer
sun.java2d.marlin.MarlinRenderingEngine#strokeTo(RendererContext, Shape, AffineTransform, BasicStroke, boolean, NormMode, boolean, PathConsumer2D)->void::: marlin rendering engine stroke to
sun.java2d.marlin.MarlinRenderingEngine#strokeTo(RendererContext, Shape, AffineTransform, float, NormMode, int, int, float, float[], float, PathConsumer2D)->void::: marlin rendering engine stroke to
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator#init(PathIterator)->NormalizingPathIterator::: normalizing path iterator init
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator#dispose()->void:::Disposes this path iterator: clean up before reusing this instance
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator#currentSegment(float[])->int::: normalizing path iterator current segment
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator#normCoord(float)->float::: normalizing path iterator norm coord
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator#currentSegment(double[])->int::: normalizing path iterator current segment
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator#getWindingRule()->int::: normalizing path iterator get winding rule
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator#isDone()->boolean::: normalizing path iterator is done
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator#next()->void::: normalizing path iterator next
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator.NearestPixelCenter#normCoord(float)->float::: nearest pixel center norm coord
sun.java2d.marlin.MarlinRenderingEngine.NormalizingPathIterator.NearestPixelQuarter#normCoord(float)->float::: nearest pixel quarter norm coord
sun.java2d.marlin.MarlinRenderingEngine#getAATileGenerator(Shape, AffineTransform, Region, BasicStroke, boolean, boolean, int[])->AATileGenerator:::Construct an antialiased tile generator for the given shape with the given rendering attributes and store the bounds of the tile iteration in the bbox parameter
sun.java2d.marlin.MarlinRenderingEngine#getAATileGenerator(double, double, double, double, double, double, double, double, Region, int[])->AATileGenerator::: marlin rendering engine get tile generator
sun.java2d.marlin.MarlinRenderingEngine#getMinimumAAPenSize()->float:::Returns the minimum pen width that the antialiasing rasterizer can represent without dropouts occuring.
sun.java2d.marlin.MarlinRenderingEngine#getRendererContext()->RendererContext:::Get the RendererContext instance dedicated to the current thread
sun.java2d.marlin.MarlinRenderingEngine#returnRendererContext(RendererContext)->void:::Reset and return the given RendererContext instance for reuse
sun.java2d.marlin.MarlinTileGenerator#init()->MarlinTileGenerator::: marlin tile generator init
sun.java2d.marlin.MarlinTileGenerator#dispose()->void:::Disposes this tile generator: clean up before reusing this instance
sun.java2d.marlin.MarlinTileGenerator#getBbox(int[])->void::: marlin tile generator get bbox
sun.java2d.marlin.MarlinTileGenerator#getTileWidth()->int:::Gets the width of the tiles that the generator batches output into.
sun.java2d.marlin.MarlinTileGenerator#getTileHeight()->int:::Gets the height of the tiles that the generator batches output into.
sun.java2d.marlin.MarlinTileGenerator#getTypicalAlpha()->int:::Gets the typical alpha value that will characterize the current tile
sun.java2d.marlin.MarlinTileGenerator#nextTile()->void:::Skips the current tile and moves on to the next tile
sun.java2d.marlin.MarlinTileGenerator#getAlpha(byte[], int, int)->void:::Gets the alpha coverage values for the current tile
sun.java2d.marlin.MarlinTileGenerator#hex(int, int)->String::: marlin tile generator hex
sun.java2d.marlin.MarlinUtils#logInfo(String)->void::: marlin utils log info
sun.java2d.marlin.MarlinUtils#logException(String, Throwable)->void::: marlin utils log exception
sun.java2d.marlin.MarlinUtils#getRootThreadGroup()->ThreadGroup:::Returns a root thread group
sun.java2d.marlin.MergeSort#mergeSortNoCopy(int[], int[], int[], int[], int, int)->void:::Modified merge sort: Input arrays are in both auxX/auxY (sorted: 0 to insertionSortIndex)                     and x/y (unsorted: insertionSortIndex to toIndex) Outputs are stored in x/y arrays
sun.java2d.marlin.OffHeapArray#resize(long)->void::: off heap array resize
sun.java2d.marlin.OffHeapArray#free()->void::: off heap array free
sun.java2d.marlin.OffHeapArray#fill(byte)->void::: off heap array fill
sun.java2d.marlin.PathSimplifier#init(PathConsumer2D)->PathSimplifier::: path simplifier init
sun.java2d.marlin.PathSimplifier#pathDone()->void::: path simplifier path done
sun.java2d.marlin.PathSimplifier#closePath()->void::: path simplifier close path
sun.java2d.marlin.PathSimplifier#getNativeConsumer()->long::: path simplifier get native consumer
sun.java2d.marlin.PathSimplifier#quadTo(float, float, float, float)->void::: path simplifier quad to
sun.java2d.marlin.PathSimplifier#curveTo(float, float, float, float, float, float)->void::: path simplifier curve to
sun.java2d.marlin.PathSimplifier#moveTo(float, float)->void::: path simplifier move to
sun.java2d.marlin.PathSimplifier#lineTo(float, float)->void::: path simplifier line to
sun.java2d.marlin.Renderer#init(int, int, int, int, int)->Renderer::: renderer init
sun.java2d.marlin.Renderer#dispose()->void:::Disposes this renderer and recycle it clean up before reusing this instance
sun.java2d.marlin.Renderer#moveTo(float, float)->void::: renderer move to
sun.java2d.marlin.Renderer#lineTo(float, float)->void::: renderer line to
sun.java2d.marlin.Renderer#curveTo(float, float, float, float, float, float)->void::: renderer curve to
sun.java2d.marlin.Renderer#quadTo(float, float, float, float)->void::: renderer quad to
sun.java2d.marlin.Renderer#closePath()->void::: renderer close path
sun.java2d.marlin.Renderer#pathDone()->void::: renderer path done
sun.java2d.marlin.Renderer#getNativeConsumer()->long::: renderer get native consumer
sun.java2d.marlin.Renderer#endRendering()->boolean::: renderer end rendering
sun.java2d.marlin.Renderer#endRendering(int)->void::: renderer end rendering
sun.java2d.marlin.Renderer#copyAARow(int[], int, int, int, boolean)->void::: renderer copy row
sun.java2d.marlin.RendererContext#createContext()->RendererContext:::Create a new renderer context
sun.java2d.marlin.RendererContext#dispose()->void:::Disposes this renderer context: clean up before reusing this context
sun.java2d.marlin.RendererContext#getPath2D()->Path2D.Float::: renderer context get path2 d
sun.java2d.marlin.RendererContext#stats()->RendererStats::: renderer context stats
sun.java2d.marlin.RendererContext#newOffHeapArray(long)->OffHeapArray::: renderer context new off heap array
sun.java2d.marlin.RendererContext#newCleanIntArrayRef(int)->IntArrayCache.Reference::: renderer context new clean int array ref
sun.java2d.marlin.RendererContext#newDirtyIntArrayRef(int)->IntArrayCache.Reference::: renderer context new dirty int array ref
sun.java2d.marlin.RendererContext#newDirtyFloatArrayRef(int)->FloatArrayCache.Reference::: renderer context new dirty float array ref
sun.java2d.marlin.RendererContext#newDirtyByteArrayRef(int)->ByteArrayCache.Reference::: renderer context new dirty byte array ref
sun.java2d.marlin.RendererStats#createInstance(Object, String)->RendererStats::: renderer stats create instance
sun.java2d.marlin.RendererStats#dumpStats()->void::: renderer stats dump stats
sun.java2d.marlin.RendererStats#dump()->void::: renderer stats dump
sun.java2d.marlin.RendererStats.RendererStatsHolder#getInstance()->RendererStatsHolder::: renderer stats holder get instance
sun.java2d.marlin.RendererStats.RendererStatsHolder#dumpStats()->void::: renderer stats holder dump stats
sun.java2d.marlin.RendererStats.RendererStatsHolder#add(Object, RendererStats)->void::: renderer stats holder add
sun.java2d.marlin.RendererStats.RendererStatsHolder#remove(RendererStats)->void::: renderer stats holder remove
sun.java2d.marlin.RendererStats.RendererStatsHolder#dump()->void::: renderer stats holder dump
sun.java2d.marlin.Stroker#init(PathConsumer2D, float, int, int, float, boolean)->Stroker:::Inits the Stroker.
sun.java2d.marlin.Stroker#disableClipping()->void::: stroker disable clipping
sun.java2d.marlin.Stroker#dispose()->void:::Disposes this stroker: clean up before reusing this instance
sun.java2d.marlin.Stroker#moveTo(float, float)->void::: stroker move to
sun.java2d.marlin.Stroker#lineTo(float, float)->void::: stroker line to
sun.java2d.marlin.Stroker#closePath()->void::: stroker close path
sun.java2d.marlin.Stroker#pathDone()->void::: stroker path done
sun.java2d.marlin.Stroker#curveTo(float, float, float, float, float, float)->void::: stroker curve to
sun.java2d.marlin.Stroker#quadTo(float, float, float, float)->void::: stroker quad to
sun.java2d.marlin.Stroker#getNativeConsumer()->long::: stroker get native consumer
sun.java2d.marlin.TransformingPathConsumer2D#wrapPath2D(Path2D.Float)->PathConsumer2D::: transforming path consumer2 d wrap path2 d
sun.java2d.marlin.TransformingPathConsumer2D#traceInput(PathConsumer2D)->PathConsumer2D::: transforming path consumer2 d trace input
sun.java2d.marlin.TransformingPathConsumer2D#traceClosedPathDetector(PathConsumer2D)->PathConsumer2D::: transforming path consumer2 d trace closed path detector
sun.java2d.marlin.TransformingPathConsumer2D#traceFiller(PathConsumer2D)->PathConsumer2D::: transforming path consumer2 d trace filler
sun.java2d.marlin.TransformingPathConsumer2D#traceStroker(PathConsumer2D)->PathConsumer2D::: transforming path consumer2 d trace stroker
sun.java2d.marlin.TransformingPathConsumer2D#traceDasher(PathConsumer2D)->PathConsumer2D::: transforming path consumer2 d trace dasher
sun.java2d.marlin.TransformingPathConsumer2D#detectClosedPath(PathConsumer2D)->PathConsumer2D::: transforming path consumer2 d detect closed path
sun.java2d.marlin.TransformingPathConsumer2D#pathClipper(PathConsumer2D)->PathConsumer2D::: transforming path consumer2 d path clipper
sun.java2d.marlin.TransformingPathConsumer2D#deltaTransformConsumer(PathConsumer2D, AffineTransform)->PathConsumer2D::: transforming path consumer2 d delta transform consumer
sun.java2d.marlin.TransformingPathConsumer2D#inverseDeltaTransformConsumer(PathConsumer2D, AffineTransform)->PathConsumer2D::: transforming path consumer2 d inverse delta transform consumer
sun.java2d.marlin.TransformingPathConsumer2D.DeltaScaleFilter#init(PathConsumer2D, float, float)->DeltaScaleFilter::: delta scale filter init
sun.java2d.marlin.TransformingPathConsumer2D.DeltaScaleFilter#moveTo(float, float)->void::: delta scale filter move to
sun.java2d.marlin.TransformingPathConsumer2D.DeltaScaleFilter#lineTo(float, float)->void::: delta scale filter line to
sun.java2d.marlin.TransformingPathConsumer2D.DeltaScaleFilter#quadTo(float, float, float, float)->void::: delta scale filter quad to
sun.java2d.marlin.TransformingPathConsumer2D.DeltaScaleFilter#curveTo(float, float, float, float, float, float)->void::: delta scale filter curve to
sun.java2d.marlin.TransformingPathConsumer2D.DeltaScaleFilter#closePath()->void::: delta scale filter close path
sun.java2d.marlin.TransformingPathConsumer2D.DeltaScaleFilter#pathDone()->void::: delta scale filter path done
sun.java2d.marlin.TransformingPathConsumer2D.DeltaScaleFilter#getNativeConsumer()->long::: delta scale filter get native consumer
sun.java2d.marlin.TransformingPathConsumer2D.DeltaTransformFilter#init(PathConsumer2D, float, float, float, float)->DeltaTransformFilter::: delta transform filter init
sun.java2d.marlin.TransformingPathConsumer2D.DeltaTransformFilter#moveTo(float, float)->void::: delta transform filter move to
sun.java2d.marlin.TransformingPathConsumer2D.DeltaTransformFilter#lineTo(float, float)->void::: delta transform filter line to
sun.java2d.marlin.TransformingPathConsumer2D.DeltaTransformFilter#quadTo(float, float, float, float)->void::: delta transform filter quad to
sun.java2d.marlin.TransformingPathConsumer2D.DeltaTransformFilter#curveTo(float, float, float, float, float, float)->void::: delta transform filter curve to
sun.java2d.marlin.TransformingPathConsumer2D.DeltaTransformFilter#closePath()->void::: delta transform filter close path
sun.java2d.marlin.TransformingPathConsumer2D.DeltaTransformFilter#pathDone()->void::: delta transform filter path done
sun.java2d.marlin.TransformingPathConsumer2D.DeltaTransformFilter#getNativeConsumer()->long::: delta transform filter get native consumer
sun.java2d.marlin.TransformingPathConsumer2D.Path2DWrapper#init(Path2D.Float)->Path2DWrapper::: path2 wrapper init
sun.java2d.marlin.TransformingPathConsumer2D.Path2DWrapper#moveTo(float, float)->void::: path2 wrapper move to
sun.java2d.marlin.TransformingPathConsumer2D.Path2DWrapper#lineTo(float, float)->void::: path2 wrapper line to
sun.java2d.marlin.TransformingPathConsumer2D.Path2DWrapper#closePath()->void::: path2 wrapper close path
sun.java2d.marlin.TransformingPathConsumer2D.Path2DWrapper#pathDone()->void::: path2 wrapper path done
sun.java2d.marlin.TransformingPathConsumer2D.Path2DWrapper#curveTo(float, float, float, float, float, float)->void::: path2 wrapper curve to
sun.java2d.marlin.TransformingPathConsumer2D.Path2DWrapper#quadTo(float, float, float, float)->void::: path2 wrapper quad to
sun.java2d.marlin.TransformingPathConsumer2D.Path2DWrapper#getNativeConsumer()->long::: path2 wrapper get native consumer
sun.java2d.marlin.TransformingPathConsumer2D.ClosedPathDetector#init(PathConsumer2D)->ClosedPathDetector::: closed path detector init
sun.java2d.marlin.TransformingPathConsumer2D.ClosedPathDetector#dispose()->void:::Disposes this instance: clean up before reusing this instance
sun.java2d.marlin.TransformingPathConsumer2D.ClosedPathDetector#pathDone()->void::: closed path detector path done
sun.java2d.marlin.TransformingPathConsumer2D.ClosedPathDetector#closePath()->void::: closed path detector close path
sun.java2d.marlin.TransformingPathConsumer2D.ClosedPathDetector#moveTo(float, float)->void::: closed path detector move to
sun.java2d.marlin.TransformingPathConsumer2D.ClosedPathDetector#lineTo(float, float)->void::: closed path detector line to
sun.java2d.marlin.TransformingPathConsumer2D.ClosedPathDetector#curveTo(float, float, float, float, float, float)->void::: closed path detector curve to
sun.java2d.marlin.TransformingPathConsumer2D.ClosedPathDetector#quadTo(float, float, float, float)->void::: closed path detector quad to
sun.java2d.marlin.TransformingPathConsumer2D.ClosedPathDetector#getNativeConsumer()->long::: closed path detector get native consumer
sun.java2d.marlin.TransformingPathConsumer2D.PathClipFilter#init(PathConsumer2D)->PathClipFilter::: path clip filter init
sun.java2d.marlin.TransformingPathConsumer2D.PathClipFilter#dispose()->void:::Disposes this instance: clean up before reusing this instance
sun.java2d.marlin.TransformingPathConsumer2D.PathClipFilter#pathDone()->void::: path clip filter path done
sun.java2d.marlin.TransformingPathConsumer2D.PathClipFilter#closePath()->void::: path clip filter close path
sun.java2d.marlin.TransformingPathConsumer2D.PathClipFilter#moveTo(float, float)->void::: path clip filter move to
sun.java2d.marlin.TransformingPathConsumer2D.PathClipFilter#lineTo(float, float)->void::: path clip filter line to
sun.java2d.marlin.TransformingPathConsumer2D.PathClipFilter#curveTo(float, float, float, float, float, float)->void::: path clip filter curve to
sun.java2d.marlin.TransformingPathConsumer2D.PathClipFilter#quadTo(float, float, float, float)->void::: path clip filter quad to
sun.java2d.marlin.TransformingPathConsumer2D.PathClipFilter#getNativeConsumer()->long::: path clip filter get native consumer
sun.java2d.marlin.TransformingPathConsumer2D.CurveClipSplitter#init()->void::: curve clip splitter init
sun.java2d.marlin.TransformingPathConsumer2D.CurveClipSplitter#splitLine(float, float, float, float, int, PathConsumer2D)->boolean::: curve clip splitter split line
sun.java2d.marlin.TransformingPathConsumer2D.CurveClipSplitter#splitQuad(float, float, float, float, float, float, int, PathConsumer2D)->boolean::: curve clip splitter split quad
sun.java2d.marlin.TransformingPathConsumer2D.CurveClipSplitter#splitCurve(float, float, float, float, float, float, float, float, int, PathConsumer2D)->boolean::: curve clip splitter split curve
sun.java2d.marlin.TransformingPathConsumer2D.CurveClipSplitter#emitCurrent(int, float[], int, PathConsumer2D)->void::: curve clip splitter emit current
sun.java2d.marlin.TransformingPathConsumer2D.CurveBasicMonotonizer#init(float)->void::: curve basic monotonizer init
sun.java2d.marlin.TransformingPathConsumer2D.CurveBasicMonotonizer#curve(float, float, float, float, float, float, float, float)->CurveBasicMonotonizer::: curve basic monotonizer curve
sun.java2d.marlin.TransformingPathConsumer2D.CurveBasicMonotonizer#quad(float, float, float, float, float, float)->CurveBasicMonotonizer::: curve basic monotonizer quad
sun.java2d.marlin.TransformingPathConsumer2D.PathTracer#init(PathConsumer2D)->PathTracer::: path tracer init
sun.java2d.marlin.TransformingPathConsumer2D.PathTracer#moveTo(float, float)->void::: path tracer move to
sun.java2d.marlin.TransformingPathConsumer2D.PathTracer#lineTo(float, float)->void::: path tracer line to
sun.java2d.marlin.TransformingPathConsumer2D.PathTracer#curveTo(float, float, float, float, float, float)->void::: path tracer curve to
sun.java2d.marlin.TransformingPathConsumer2D.PathTracer#quadTo(float, float, float, float)->void::: path tracer quad to
sun.java2d.marlin.TransformingPathConsumer2D.PathTracer#closePath()->void::: path tracer close path
sun.java2d.marlin.TransformingPathConsumer2D.PathTracer#pathDone()->void::: path tracer path done
sun.java2d.marlin.TransformingPathConsumer2D.PathTracer#getNativeConsumer()->long::: path tracer get native consumer
sun.java2d.marlin.Version#getVersion()->String::: version get version

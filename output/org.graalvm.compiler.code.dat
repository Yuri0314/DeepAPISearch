CompilationResult#setAssumptions(Assumption[]):::Sets the assumptions made during compilation.:::
CompilationResult#getAssumptions():::Gets the assumptions made during compilation:::return
CompilationResult#setMethods(ResolvedJavaMethod, Collection):::Sets the methods whose bytecodes were used as input to the compilation.:::checkOpen->if->inlinedMethods->contains->inlinedMethods->inlinedMethods->size->new->ResolvedJavaMethodArr->toArray->for->i->else->inlinedMethods->size->new->ResolvedJavaMethodArr->i->foreach
CompilationResult#getMethods():::Gets the methods whose bytecodes were used as input to the compilation:::return
CompilationResult#setSpeculationLog(SpeculationLog):::Sets the SpeculationLog log used during compilation.:::checkOpen
CompilationResult#getSpeculationLog():::Gets the SpeculationLog log, if any, used during compilation.:::return
CompilationResult#setFields(EconomicSet):::Sets the fields that were referenced from the bytecodes that were used as input to the compilation.:::if->accessedFields->accessedFields->size->new->ResolvedJavaFieldArr->toArray
CompilationResult#getFields():::Gets the fields that were referenced from bytecodes that were used as input to the compilation:::return
CompilationResult#getTotalFrameSize():::The total frame size of the method in bytes:::return
CompilationResult#setTotalFrameSize(int):::Sets the total frame size in bytes:::checkOpen
CompilationResult#setTargetCode(byte[], int):::Sets the machine that has been generated by the compiler.:::checkOpen
CompilationResult#recordDataPatch(int, Reference):::Records a data patch in the code section:::checkOpen->dataPatches->new->DataPatch->add
CompilationResult#recordDataPatchWithNote(int, Reference, Object):::Records a data patch in the code section:::dataPatches->new->DataPatch->add
CompilationResult#recordCall(int, int, InvokeTarget, DebugInfo, boolean):::Records a call in the code array.:::checkOpen->call->new->Call->addInfopoint
CompilationResult#recordExceptionHandler(int, int):::Records an exception handler for this method.:::checkOpen->exceptionHandlers->new->ExceptionHandler->add
CompilationResult#recordInfopoint(int, DebugInfo, InfopointReason):::Records an infopoint in the code array.:::new->Infopoint->addInfopoint
CompilationResult#addInfopoint(Infopoint):::Records a custom infopoint in the code section:::checkOpen->infopoints->add
CompilationResult#recordMark(int, Object):::Records an instruction mark within this method.:::checkOpen->mark->new->Mark->marks->add->return
CompilationResult#getCustomStackArea():::Start of the custom stack area.:::return
CompilationResult#getName():::Gets the name for this compilation result:::return
CompilationResult#resetForEmittingCode():::Clears the information in this object pertaining to generating code:::checkOpen->infopoints->clear->sourceMapping->clear->dataPatches->clear->exceptionHandlers->clear->marks->clear->dataSection->clear->if->annotations->clear
CompilationResult#close():::Closes this compilation result to future updates.:::if->throw->new->IllegalStateException->dataSection->close
DataSection#insertData(Data):::Inserts a Data item into the data section:::checkOpen->synchronized->if->new->DataSectionReference->dataItems->add->return
DataSection#addAll(DataSection):::Transfers all Data from the provided other DataSection to this DataSection, and empties the other section.:::checkOpen->other->checkOpen->foreach->dataItems->add->clear
DataSection#closed():::Determines if this object has been #close() closed.:::return
DataSection#close():::Computes the layout of the data section and closes this object to further updates:::checkOpen->dataItems->sort->position->alignment->foreach->lcm->align->setOffset
DataSection#getSectionSize():::Gets the size of the data section:::checkClosed->return
DataSection#getSectionAlignment():::Gets the minimum alignment requirement of the data section:::checkClosed->return
DataSection#buildDataSection(ByteBuffer, Patches):::Builds the data section into a given buffer:::buildDataSection
DataSection#buildDataSection(ByteBuffer, Patches, BiConsumer):::Builds the data section into a given buffer:::checkClosed->start->buffer->position->foreach->BufferUtil->asBaseBuffer->getOffset->position->onEmit->d->getSize->accept->d->emit->BufferUtil->asBaseBuffer->position
DisassemblerProvider#disassembleCompiledCode(CodeCacheProvider, CompilationResult):::Gets a textual disassembly of a given compilation result.:::return
DisassemblerProvider#disassembleInstalledCode(CodeCacheProvider, CompilationResult, InstalledCode):::Gets a textual disassembly of a given installed code.:::return
DisassemblerProvider#getName():::Gets the name denoting the format of the disassembly returned by this object.:::
HexCodeFile#parse(String, int, String, String):::Parses a string in the format produced by #toString() to produce a HexCodeFile object.:::return->new->Parser
HexCodeFile#toString():::Formats this HexCodeFile as a string that can be parsed with #parse(String, int, String, String).:::baos->new->ByteArrayOutputStream->writeTo->return->baos->toString
HexCodeFile#hexCodeString(byte[]):::Formats a byte array as a string of hex digits.:::if->return->else->sb->new->StringBuilder->foreach->hex->Integer->toHexString->if->hex->length->sb->append->sb->append->return->sb->toString
HexCodeFile#addComment(int, String):::Adds a comment to the list of comments for a given position.:::list->comments->get->if->new->ArrayList<>->comments->put->list->encodeString->add
HexCodeFile#addOperandComment(int, String):::Adds an operand comment for a given position.:::list->comments->get->if->new->ArrayList<>->comments->put->list->encodeString->add
HexCodeFile#addAnnotations(HexCodeFile, List):::Adds any jump tables, lookup tables or code comments from a list of code annotations.:::if->annotations->isEmpty->return->foreach->if->table->add->else->if->comment->hcf->addComment
HexCodeFile#encodeString(String):::Modifies a string to mangle any substrings matching #SECTION_DELIM and #COLUMN_END.:::index->s->while->s->indexOf->s->substring->s->SECTION_DELIM->length->substring->while->s->indexOf->s->substring->s->COLUMN_END->length->substring->return

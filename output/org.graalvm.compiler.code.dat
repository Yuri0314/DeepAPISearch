CompilationResult.CodeAnnotation#hashCode()::: code annotation hash code:::throw->new->UnsupportedOperationException
CompilationResult.CodeAnnotation#toString()::: code annotation to string:::return->identityHashCodeString
CompilationResult.CodeAnnotation#equals(Object)::: code annotation equals:::
CompilationResult.CodeComment#equals(Object)::: code comment equals:::if->return->if->that->if->equals->return->return
CompilationResult.CodeComment#toString()::: code comment to string:::return->getClass->getSimpleName
CompilationResult.JumpTable#equals(Object)::: jump table equals:::if->return->if->that->if->return->return
CompilationResult.JumpTable#toString()::: jump table to string:::return->getClass->getSimpleName
CompilationResult#hashCode()::: compilation result hash code:::throw->new->UnsupportedOperationException
CompilationResult#toString()::: compilation result to string:::if->return->getClass->getName->format->return->identityHashCodeString
CompilationResult#equals(Object)::: compilation result equals:::if->return->if->obj->getClass->getClass->that->if->Objects->equals->Objects->equals->Objects->equals->Objects->equals->Objects->equals->Objects->equals->Objects->equals->Objects->equals->Objects->equals->Arrays->equals->Arrays->equals->return->return
CompilationResult#getEntryBCI()::: compilation result get entry i:::return
CompilationResult#setEntryBCI(int)::: compilation result set entry i:::checkOpen
CompilationResult#setAssumptions(Assumption[]):::Sets the assumptions made during compilation.:::
CompilationResult#getAssumptions():::Gets the assumptions made during compilation:::return
CompilationResult#setMethods(ResolvedJavaMethod, Collection):::Sets the methods whose bytecodes were used as input to the compilation.:::checkOpen->if->inlinedMethods->contains->inlinedMethods->inlinedMethods->size->new->ResolvedJavaMethodArr->toArray->for->i->else->inlinedMethods->size->new->ResolvedJavaMethodArr->i->foreach
CompilationResult#getMethods():::Gets the methods whose bytecodes were used as input to the compilation:::return
CompilationResult#setSpeculationLog(SpeculationLog):::Sets the SpeculationLog log used during compilation.:::checkOpen
CompilationResult#getSpeculationLog():::Gets the SpeculationLog log, if any, used during compilation.:::return
CompilationResult#setFields(EconomicSet):::Sets the fields that were referenced from the bytecodes that were used as input to the compilation.:::if->accessedFields->accessedFields->size->new->ResolvedJavaFieldArr->toArray
CompilationResult#getFields():::Gets the fields that were referenced from bytecodes that were used as input to the compilation:::return
CompilationResult#setBytecodeSize(int)::: compilation result set bytecode size:::checkOpen
CompilationResult#getBytecodeSize()::: compilation result get bytecode size:::return
CompilationResult#getDataSection()::: compilation result get data section:::return
CompilationResult#getTotalFrameSize():::The total frame size of the method in bytes:::return
CompilationResult#setTotalFrameSize(int):::Sets the total frame size in bytes:::checkOpen
CompilationResult#getMaxInterpreterFrameSize()::: compilation result get max interpreter frame size:::return
CompilationResult#setMaxInterpreterFrameSize(int)::: compilation result set max interpreter frame size:::checkOpen
CompilationResult#isImmutablePIC()::: compilation result is immutable c:::return
CompilationResult#setTargetCode(byte[], int):::Sets the machine that has been generated by the compiler.:::checkOpen
CompilationResult#recordDataPatch(int, Reference):::Records a data patch in the code section:::checkOpen->dataPatches->new->DataPatch->add
CompilationResult#recordDataPatchWithNote(int, Reference, Object):::Records a data patch in the code section:::dataPatches->new->DataPatch->add
CompilationResult#recordCall(int, int, InvokeTarget, DebugInfo, boolean):::Records a call in the code array.:::checkOpen->call->new->Call->addInfopoint
CompilationResult#recordExceptionHandler(int, int):::Records an exception handler for this method.:::checkOpen->exceptionHandlers->new->ExceptionHandler->add
CompilationResult#validateExceptionHandlerAdd(int, int):::Validate if the exception handler for codePos already exists and handlerPos is different.:::exHandler->getExceptionHandlerForCodePos->return
CompilationResult#getExceptionHandlerForCodePos(int):::Returns the first ExceptionHandler which matches codePos.:::foreach->if->return->return
CompilationResult#recordInfopoint(int, DebugInfo, InfopointReason):::Records an infopoint in the code array.:::new->Infopoint->addInfopoint
CompilationResult#addInfopoint(Infopoint):::Records a custom infopoint in the code section:::checkOpen->infopoints->add
CompilationResult#recordSourceMapping(int, int, NodeSourcePosition)::: compilation result record source mapping:::checkOpen->sourceMapping->new->SourceMapping->add
CompilationResult#recordMark(int, Object):::Records an instruction mark within this method.:::checkOpen->mark->new->Mark->marks->add->return
CompilationResult#getCustomStackArea():::Start of the custom stack area.:::return
CompilationResult#setCustomStackAreaOffset(StackSlot)::: compilation result set custom stack area offset:::checkOpen
CompilationResult#getTargetCode()::: compilation result get target code:::return
CompilationResult#getTargetCodeSize()::: compilation result get target code size:::return
CompilationResult#getCodeAnnotations()::: compilation result get code annotations:::if->return->Collections->emptyList->return
CompilationResult#addAnnotation(CodeAnnotation)::: compilation result add annotation:::checkOpen->if->new->ArrayList<>->annotations->add
CompilationResult#getInfopoints()::: compilation result get infopoints:::if->infopoints->isEmpty->return->emptyList->return->unmodifiableList
CompilationResult#getDataPatches()::: compilation result get data patches:::if->dataPatches->isEmpty->return->emptyList->return->unmodifiableList
CompilationResult#getExceptionHandlers()::: compilation result get exception handlers:::if->exceptionHandlers->isEmpty->return->emptyList->return->unmodifiableList
CompilationResult#getMarks()::: compilation result get marks:::if->marks->isEmpty->return->emptyList->return->unmodifiableList
CompilationResult#getSourceMappings()::: compilation result get source mappings:::if->sourceMapping->isEmpty->return->emptyList->return->unmodifiableList
CompilationResult#getName():::Gets the name for this compilation result:::return
CompilationResult#getCompilationId()::: compilation result get compilation id:::return
CompilationResult#setHasUnsafeAccess(boolean)::: compilation result set has unsafe access:::checkOpen
CompilationResult#hasUnsafeAccess()::: compilation result has unsafe access:::return
CompilationResult#resetForEmittingCode():::Clears the information in this object pertaining to generating code:::checkOpen->infopoints->clear->sourceMapping->clear->dataPatches->clear->exceptionHandlers->clear->marks->clear->dataSection->clear->if->annotations->clear
CompilationResult#clearInfopoints()::: compilation result clear infopoints:::infopoints->clear
CompilationResult#clearExceptionHandlers()::: compilation result clear exception handlers:::exceptionHandlers->clear
CompilationResult#checkOpen()::: compilation result check open:::if->throw->new->IllegalStateException
CompilationResult#close():::Closes this compilation result to future updates.:::if->throw->new->IllegalStateException->dataSection->close
DataSection.Patches#registerPatch(int, VMConstant)::: patches register patch:::
DataSection.Data#emit(ByteBuffer, Patches)::: data emit:::
DataSection.Data#updateAlignment(int)::: data update alignment:::if->return->lcm
DataSection.Data#getAlignment()::: data get alignment:::return
DataSection.Data#getSize()::: data get size:::return
DataSection.Data#hashCode()::: data hash code:::throw->new->UnsupportedOperationException
DataSection.Data#toString()::: data to string:::return->identityHashCodeString
DataSection.Data#equals(Object)::: data equals:::if->return->if->that->if->equals->return->return
DataSection.RawData#emit(ByteBuffer, Patches)::: raw data emit:::buffer->put
DataSection.SerializableData#emit(ByteBuffer, Patches)::: serializable data emit:::position->buffer->position->constant->serialize
DataSection.ZeroData#create(int, int)::: zero data create:::switch->return->new->ZeroData->return->new->ZeroData->return->new->ZeroData->return->new->ZeroData->return->new->ZeroData
DataSection.ZeroData#emit(ByteBuffer, Patches)::: zero data emit:::rest->getSize->while->buffer->putLong->while->buffer->put
DataSection.PackedData#create(Data[])::: packed data create:::size->alignment->for->i->return->new->PackedData
DataSection.PackedData#emit(ByteBuffer, Patches)::: packed data emit:::foreach->data->emit
DataSection#hashCode()::: data section hash code:::throw->new->UnsupportedOperationException
DataSection#toString()::: data section to string:::return->identityHashCodeString
DataSection#equals(Object)::: data section equals:::if->return->if->that->if->Objects->equals->return->return
DataSection#insertData(Data):::Inserts a Data item into the data section:::checkOpen->synchronized->if->new->DataSectionReference->dataItems->add->return
DataSection#addAll(DataSection):::Transfers all Data from the provided other DataSection to this DataSection, and empties the other section.:::checkOpen->other->checkOpen->foreach->dataItems->add->clear
DataSection#closed():::Determines if this object has been #close() closed.:::return
DataSection#close():::Computes the layout of the data section and closes this object to further updates:::checkOpen->dataItems->sort->position->alignment->foreach->lcm->align->setOffset
DataSection#getSectionSize():::Gets the size of the data section:::checkClosed->return
DataSection#getSectionAlignment():::Gets the minimum alignment requirement of the data section:::checkClosed->return
DataSection#buildDataSection(ByteBuffer, Patches):::Builds the data section into a given buffer:::buildDataSection
DataSection#buildDataSection(ByteBuffer, Patches, BiConsumer):::Builds the data section into a given buffer:::checkClosed->start->buffer->position->foreach->BufferUtil->asBaseBuffer->getOffset->position->onEmit->d->getSize->accept->d->emit->BufferUtil->asBaseBuffer->position
DataSection#findData(DataSectionReference)::: data section find data:::foreach->if->return->return
DataSection#emit(ByteBuffer, Data, Patches)::: data section emit:::data->emit
DataSection#iterator()::: data section iterator:::return->dataItems->iterator
DataSection#lcm(int, int)::: data section lcm:::if->return->else->if->return->a->Math->max->b->Math->min->while->tmp->gcd->return
DataSection#align(int, int)::: data section align:::return
DataSection#checkClosed()::: data section check closed:::if->throw->new->IllegalStateException
DataSection#checkOpen()::: data section check open:::if->throw->new->IllegalStateException
DataSection#clear()::: data section clear:::checkOpen->clear
DisassemblerProvider#disassembleCompiledCode(CodeCacheProvider, CompilationResult):::Gets a textual disassembly of a given compilation result.:::return
DisassemblerProvider#disassembleInstalledCode(CodeCacheProvider, CompilationResult, InstalledCode):::Gets a textual disassembly of a given installed code.:::return
DisassemblerProvider#getName():::Gets the name denoting the format of the disassembly returned by this object.:::
HexCodeFile#parse(String, int, String, String):::Parses a string in the format produced by #toString() to produce a HexCodeFile object.:::return->new->Parser
HexCodeFile#toString():::Formats this HexCodeFile as a string that can be parsed with #parse(String, int, String, String).:::baos->new->ByteArrayOutputStream->writeTo->return->baos->toString
HexCodeFile#toEmbeddedString()::: hex code file to embedded string:::return->toString
HexCodeFile#writeTo(OutputStream)::: hex code file write to:::ps->new->PrintStream->ps->printf->ps->HexCodeFile->hexCodeString->printf->foreach->ps->printf->foreach->comments->entrySet->pos->e->getKey->foreach->e->getValue->ps->printf->foreach->operandComments->entrySet->foreach->e->getValue->ps->e->getKey->printf->ps->flush
HexCodeFile#hexCodeString(byte[]):::Formats a byte array as a string of hex digits.:::if->return->else->sb->new->StringBuilder->foreach->hex->Integer->toHexString->if->hex->length->sb->append->sb->append->return->sb->toString
HexCodeFile#addComment(int, String):::Adds a comment to the list of comments for a given position.:::list->comments->get->if->new->ArrayList<>->comments->put->list->encodeString->add
HexCodeFile#addOperandComment(int, String):::Adds an operand comment for a given position.:::list->comments->get->if->new->ArrayList<>->comments->put->list->encodeString->add
HexCodeFile#addAnnotations(HexCodeFile, List):::Adds any jump tables, lookup tables or code comments from a list of code annotations.:::if->annotations->isEmpty->return->foreach->if->table->add->else->if->comment->hcf->addComment
HexCodeFile#encodeString(String):::Modifies a string to mangle any substrings matching #SECTION_DELIM and #COLUMN_END.:::index->s->while->s->indexOf->s->substring->s->SECTION_DELIM->length->substring->while->s->indexOf->s->substring->s->COLUMN_END->length->substring->return
HexCodeFile.Parser#makeHCF()::: parser make f:::if->if->new->HexCodeFile
HexCodeFile.Parser#checkHCF(String, int)::: parser check f:::check
HexCodeFile.Parser#check(boolean, int, String)::: parser check:::if->error
HexCodeFile.Parser#error(int, String)::: parser error:::throw->errorMessage->new->Error
HexCodeFile.Parser#warning(int, String)::: parser warning:::err->err->errorMessage->println
HexCodeFile.Parser#errorMessage(int, String)::: parser error message:::inputPos->filePos->lineEnd->input->indexOf->lineStart->line->input->substring->input->substring->return->String->format
HexCodeFile.Parser#filePos(int)::: parser file pos:::lineStart->input->lastIndexOf->l->input->substring->out->out->input->substring->println->out->println->pos->input->indexOf->line->while->input->indexOf->return->new->InputPos
HexCodeFile.Parser#parseSections(int, String)::: parser parse sections:::index->endIndex->source->indexOf->while->while->source->charAt->section->source->substring->trim->parseSection->SECTION_DELIM->length->source->indexOf
HexCodeFile.Parser#parseInt(int, String)::: parser parse int:::try->return->Integer->parseInt->catch->throw->error->finally
HexCodeFile.Parser#parseSection(int, String)::: parser parse section:::if->section->isEmpty->return->m->matcher->m->matches->check->header->m->group->body->m->group->headerOffset->m->start->bodyOffset->m->start->if->header->equals->check->matcher->m->matches->check->m->group->m->start->m->group->parseInt->makeHCF->else->if->header->equals->check->matcher->m->matches->check->hexAddress->m->group->Long->valueOf->hexCode->m->group->if->new->byteArr->else->hexCode->length->check->hexCode->length->new->byteArr->for->i->makeHCF->else->if->header->equals->checkHCF->matcher->m->matches->check->pos->m->start->m->group->parseInt->comment->m->group->hcf->addComment->else->if->header->equals->checkHCF->matcher->m->matches->check->pos->m->start->m->group->parseInt->comment->m->group->hcf->addOperandComment->else->if->header->equals->checkHCF->matcher->m->matches->check->pos->m->start->m->group->parseInt->entrySize->m->start->m->group->parseInt->low->m->start->m->group->parseInt->high->m->start->m->group->parseInt->new->JumpTable->add->else->error
HexCodeFileDisassemblerProvider#disassembleCompiledCode(CodeCacheProvider, CompilationResult)::: hex code file disassembler provider disassemble compiled code:::return->disassemble
HexCodeFileDisassemblerProvider#getName()::: hex code file disassembler provider get name:::return
HexCodeFileDisassemblerProvider#disassembleInstalledCode(CodeCacheProvider, CompilationResult, InstalledCode)::: hex code file disassembler provider disassemble installed code:::return->installedCode->isValid->disassemble
HexCodeFileDisassemblerProvider#disassemble(CodeCacheProvider, CompilationResult, InstalledCode)::: hex code file disassembler provider disassemble:::target->codeCache->getTarget->regConfig->codeCache->getRegisterConfig->code->Arrays->compResult->getTargetCode->compResult->getTargetCodeSize->copyOf->installedCode->getCode->if->return->start->installedCode->getStart->hcf->getName->new->HexCodeFile->if->HexCodeFile->compResult->getCodeAnnotations->addAnnotations->addExceptionHandlersComment->fp->regConfig->getFrameRegister->slotFormatter->new->DefaultRefMapFormatter->foreach->compResult->getInfopoints->if->call->if->hcf->CodeUtil->new->StringBuilder->append->toString->addComment->codeCache->getTargetName->addOperandComment->else->if->hcf->CodeUtil->new->StringBuilder->append->toString->addComment->addOperandComment->foreach->compResult->getDataPatches->hcf->toString->addOperandComment->foreach->compResult->getMarks->hcf->codeCache->getMarkName->addComment->hcfEmbeddedString->hcf->toEmbeddedString->return->HexCodeFileDisTool->tryDisassemble
HexCodeFileDisassemblerProvider#addExceptionHandlersComment(CompilationResult, HexCodeFile)::: hex code file disassembler provider add exception handlers comment:::if->compResult->getExceptionHandlers->isEmpty->nl->buf->new->StringBuilder->append->foreach->compResult->getExceptionHandlers->buf->append->append->append->append->append->hcf->addComment->hcf->addComment->hcf->buf->toString->addComment
HexCodeFileDisassemblerProvider#addOperandComment(HexCodeFile, int, String)::: hex code file disassembler provider add operand comment:::hcf->addOperandComment
HexCodeFileDisassemblerProvider.HexCodeFileDisTool#tryDisassemble(String)::: hex code file dis tool try disassemble:::if->try->return->processMethod->invokeExact->catch->throw->new->InternalError->finally->return
SourceMapping#getStartOffset()::: source mapping get start offset:::return
SourceMapping#getEndOffset()::: source mapping get end offset:::return
SourceMapping#getSourcePosition()::: source mapping get source position:::return
SourceMapping#toString()::: source mapping to string:::return->identityHashCodeString
SourceMapping#hashCode()::: source mapping hash code:::throw->new->UnsupportedOperationException
SourceMapping#equals(Object)::: source mapping equals:::if->other->return->equals->return
SourceMapping#contains(int)::: source mapping contains:::return
SourceStackTraceBailoutException#create(Throwable, String, StackTraceElement[])::: source stack trace bailout exception create:::return->new->SourceStackTraceBailoutException

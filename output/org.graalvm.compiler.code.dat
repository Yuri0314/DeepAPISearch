org.graalvm.compiler.code.CompilationResult.CodeAnnotation#hashCode()->int::: code annotation hash code
org.graalvm.compiler.code.CompilationResult.CodeAnnotation#toString()->String::: code annotation to string
org.graalvm.compiler.code.CompilationResult.CodeAnnotation#equals(Object)->boolean::: code annotation equals
org.graalvm.compiler.code.CompilationResult.CodeComment#equals(Object)->boolean::: code comment equals
org.graalvm.compiler.code.CompilationResult.CodeComment#toString()->String::: code comment to string
org.graalvm.compiler.code.CompilationResult.JumpTable#equals(Object)->boolean::: jump table equals
org.graalvm.compiler.code.CompilationResult.JumpTable#toString()->String::: jump table to string
org.graalvm.compiler.code.CompilationResult#hashCode()->int::: compilation result hash code
org.graalvm.compiler.code.CompilationResult#toString()->String::: compilation result to string
org.graalvm.compiler.code.CompilationResult#equals(Object)->boolean::: compilation result equals
org.graalvm.compiler.code.CompilationResult#getEntryBCI()->int::: compilation result get entry i
org.graalvm.compiler.code.CompilationResult#setEntryBCI(int)->void::: compilation result set entry i
org.graalvm.compiler.code.CompilationResult#setAssumptions(Assumption[])->void:::Sets the assumptions made during compilation.
org.graalvm.compiler.code.CompilationResult#getAssumptions()->Assumption[]:::Gets the assumptions made during compilation
org.graalvm.compiler.code.CompilationResult#setMethods(ResolvedJavaMethod, Collection)->void:::Sets the methods whose bytecodes were used as input to the compilation.
org.graalvm.compiler.code.CompilationResult#getMethods()->ResolvedJavaMethod[]:::Gets the methods whose bytecodes were used as input to the compilation
org.graalvm.compiler.code.CompilationResult#setSpeculationLog(SpeculationLog)->void:::Sets the SpeculationLog log used during compilation.
org.graalvm.compiler.code.CompilationResult#getSpeculationLog()->SpeculationLog:::Gets the SpeculationLog log, if any, used during compilation.
org.graalvm.compiler.code.CompilationResult#setFields(EconomicSet)->void:::Sets the fields that were referenced from the bytecodes that were used as input to the compilation.
org.graalvm.compiler.code.CompilationResult#getFields()->ResolvedJavaField[]:::Gets the fields that were referenced from bytecodes that were used as input to the compilation
org.graalvm.compiler.code.CompilationResult#setBytecodeSize(int)->void::: compilation result set bytecode size
org.graalvm.compiler.code.CompilationResult#getBytecodeSize()->int::: compilation result get bytecode size
org.graalvm.compiler.code.CompilationResult#getDataSection()->DataSection::: compilation result get data section
org.graalvm.compiler.code.CompilationResult#getTotalFrameSize()->int:::The total frame size of the method in bytes
org.graalvm.compiler.code.CompilationResult#setTotalFrameSize(int)->void:::Sets the total frame size in bytes
org.graalvm.compiler.code.CompilationResult#getMaxInterpreterFrameSize()->int::: compilation result get max interpreter frame size
org.graalvm.compiler.code.CompilationResult#setMaxInterpreterFrameSize(int)->void::: compilation result set max interpreter frame size
org.graalvm.compiler.code.CompilationResult#isImmutablePIC()->boolean::: compilation result is immutable c
org.graalvm.compiler.code.CompilationResult#setTargetCode(byte[], int)->void:::Sets the machine that has been generated by the compiler.
org.graalvm.compiler.code.CompilationResult#recordDataPatch(int, Reference)->void:::Records a data patch in the code section
org.graalvm.compiler.code.CompilationResult#recordDataPatchWithNote(int, Reference, Object)->void:::Records a data patch in the code section
org.graalvm.compiler.code.CompilationResult#recordCall(int, int, InvokeTarget, DebugInfo, boolean)->void:::Records a call in the code array.
org.graalvm.compiler.code.CompilationResult#recordExceptionHandler(int, int)->void:::Records an exception handler for this method.
org.graalvm.compiler.code.CompilationResult#recordInfopoint(int, DebugInfo, InfopointReason)->void:::Records an infopoint in the code array.
org.graalvm.compiler.code.CompilationResult#addInfopoint(Infopoint)->void:::Records a custom infopoint in the code section
org.graalvm.compiler.code.CompilationResult#recordSourceMapping(int, int, NodeSourcePosition)->void::: compilation result record source mapping
org.graalvm.compiler.code.CompilationResult#recordMark(int, Object)->Mark:::Records an instruction mark within this method.
org.graalvm.compiler.code.CompilationResult#getCustomStackArea()->StackSlot:::Start of the custom stack area.
org.graalvm.compiler.code.CompilationResult#setCustomStackAreaOffset(StackSlot)->void::: compilation result set custom stack area offset
org.graalvm.compiler.code.CompilationResult#getTargetCode()->byte[]::: compilation result get target code
org.graalvm.compiler.code.CompilationResult#getTargetCodeSize()->int::: compilation result get target code size
org.graalvm.compiler.code.CompilationResult#getCodeAnnotations()->List::: compilation result get code annotations
org.graalvm.compiler.code.CompilationResult#addAnnotation(CodeAnnotation)->void::: compilation result add annotation
org.graalvm.compiler.code.CompilationResult#getInfopoints()->List::: compilation result get infopoints
org.graalvm.compiler.code.CompilationResult#getDataPatches()->List::: compilation result get data patches
org.graalvm.compiler.code.CompilationResult#getExceptionHandlers()->List::: compilation result get exception handlers
org.graalvm.compiler.code.CompilationResult#getMarks()->List::: compilation result get marks
org.graalvm.compiler.code.CompilationResult#getSourceMappings()->List::: compilation result get source mappings
org.graalvm.compiler.code.CompilationResult#getName()->String:::Gets the name for this compilation result
org.graalvm.compiler.code.CompilationResult#getCompilationId()->CompilationIdentifier::: compilation result get compilation id
org.graalvm.compiler.code.CompilationResult#setHasUnsafeAccess(boolean)->void::: compilation result set has unsafe access
org.graalvm.compiler.code.CompilationResult#hasUnsafeAccess()->boolean::: compilation result has unsafe access
org.graalvm.compiler.code.CompilationResult#resetForEmittingCode()->void:::Clears the information in this object pertaining to generating code
org.graalvm.compiler.code.CompilationResult#clearInfopoints()->void::: compilation result clear infopoints
org.graalvm.compiler.code.CompilationResult#clearExceptionHandlers()->void::: compilation result clear exception handlers
org.graalvm.compiler.code.CompilationResult#close()->void:::Closes this compilation result to future updates.
org.graalvm.compiler.code.DataSection.Patches#registerPatch(int, VMConstant)->void::: patches register patch
org.graalvm.compiler.code.DataSection.Data#emit(ByteBuffer, Patches)->void::: data emit
org.graalvm.compiler.code.DataSection.Data#updateAlignment(int)->void::: data update alignment
org.graalvm.compiler.code.DataSection.Data#getAlignment()->int::: data get alignment
org.graalvm.compiler.code.DataSection.Data#getSize()->int::: data get size
org.graalvm.compiler.code.DataSection.Data#hashCode()->int::: data hash code
org.graalvm.compiler.code.DataSection.Data#toString()->String::: data to string
org.graalvm.compiler.code.DataSection.Data#equals(Object)->boolean::: data equals
org.graalvm.compiler.code.DataSection.RawData#emit(ByteBuffer, Patches)->void::: raw data emit
org.graalvm.compiler.code.DataSection.SerializableData#emit(ByteBuffer, Patches)->void::: serializable data emit
org.graalvm.compiler.code.DataSection.ZeroData#create(int, int)->ZeroData::: zero data create
org.graalvm.compiler.code.DataSection.ZeroData#emit(ByteBuffer, Patches)->void::: zero data emit
org.graalvm.compiler.code.DataSection.PackedData#create(Data[])->PackedData::: packed data create
org.graalvm.compiler.code.DataSection.PackedData#emit(ByteBuffer, Patches)->void::: packed data emit
org.graalvm.compiler.code.DataSection#hashCode()->int::: data section hash code
org.graalvm.compiler.code.DataSection#toString()->String::: data section to string
org.graalvm.compiler.code.DataSection#equals(Object)->boolean::: data section equals
org.graalvm.compiler.code.DataSection#insertData(Data)->DataSectionReference:::Inserts a Data item into the data section
org.graalvm.compiler.code.DataSection#addAll(DataSection)->void:::Transfers all Data from the provided other DataSection to this DataSection, and empties the other section.
org.graalvm.compiler.code.DataSection#closed()->boolean:::Determines if this object has been #close() closed.
org.graalvm.compiler.code.DataSection#close()->void:::Computes the layout of the data section and closes this object to further updates
org.graalvm.compiler.code.DataSection#getSectionSize()->int:::Gets the size of the data section
org.graalvm.compiler.code.DataSection#getSectionAlignment()->int:::Gets the minimum alignment requirement of the data section
org.graalvm.compiler.code.DataSection#buildDataSection(ByteBuffer, Patches)->void:::Builds the data section into a given buffer
org.graalvm.compiler.code.DataSection#buildDataSection(ByteBuffer, Patches, BiConsumer)->void:::Builds the data section into a given buffer
org.graalvm.compiler.code.DataSection#findData(DataSectionReference)->Data::: data section find data
org.graalvm.compiler.code.DataSection#emit(ByteBuffer, Data, Patches)->void::: data section emit
org.graalvm.compiler.code.DataSection#iterator()->Iterator::: data section iterator
org.graalvm.compiler.code.DataSection#clear()->void::: data section clear
org.graalvm.compiler.code.DisassemblerProvider#disassembleCompiledCode(CodeCacheProvider, CompilationResult)->String:::Gets a textual disassembly of a given compilation result.
org.graalvm.compiler.code.DisassemblerProvider#disassembleInstalledCode(CodeCacheProvider, CompilationResult, InstalledCode)->String:::Gets a textual disassembly of a given installed code.
org.graalvm.compiler.code.DisassemblerProvider#getName()->String:::Gets the name denoting the format of the disassembly returned by this object.
org.graalvm.compiler.code.HexCodeFile#parse(String, int, String, String)->HexCodeFile:::Parses a string in the format produced by #toString() to produce a HexCodeFile object.
org.graalvm.compiler.code.HexCodeFile#toString()->String:::Formats this HexCodeFile as a string that can be parsed with #parse(String, int, String, String).
org.graalvm.compiler.code.HexCodeFile#toEmbeddedString()->String::: hex code file to embedded string
org.graalvm.compiler.code.HexCodeFile#writeTo(OutputStream)->void::: hex code file write to
org.graalvm.compiler.code.HexCodeFile#hexCodeString(byte[])->String:::Formats a byte array as a string of hex digits.
org.graalvm.compiler.code.HexCodeFile#addComment(int, String)->void:::Adds a comment to the list of comments for a given position.
org.graalvm.compiler.code.HexCodeFile#addOperandComment(int, String)->void:::Adds an operand comment for a given position.
org.graalvm.compiler.code.HexCodeFile#addAnnotations(HexCodeFile, List)->void:::Adds any jump tables, lookup tables or code comments from a list of code annotations.
org.graalvm.compiler.code.HexCodeFile#encodeString(String)->String:::Modifies a string to mangle any substrings matching #SECTION_DELIM and #COLUMN_END.
org.graalvm.compiler.code.HexCodeFile.Parser#makeHCF()->void::: parser make f
org.graalvm.compiler.code.HexCodeFile.Parser#checkHCF(String, int)->void::: parser check f
org.graalvm.compiler.code.HexCodeFile.Parser#check(boolean, int, String)->void::: parser check
org.graalvm.compiler.code.HexCodeFile.Parser#error(int, String)->Error::: parser error
org.graalvm.compiler.code.HexCodeFile.Parser#warning(int, String)->void::: parser warning
org.graalvm.compiler.code.HexCodeFile.Parser#errorMessage(int, String)->String::: parser error message
org.graalvm.compiler.code.HexCodeFile.Parser#filePos(int)->InputPos::: parser file pos
org.graalvm.compiler.code.HexCodeFile.Parser#parseSections(int, String)->void::: parser parse sections
org.graalvm.compiler.code.HexCodeFile.Parser#parseInt(int, String)->int::: parser parse int
org.graalvm.compiler.code.HexCodeFile.Parser#parseSection(int, String)->void::: parser parse section
org.graalvm.compiler.code.HexCodeFileDisassemblerProvider#disassembleCompiledCode(CodeCacheProvider, CompilationResult)->String::: hex code file disassembler provider disassemble compiled code
org.graalvm.compiler.code.HexCodeFileDisassemblerProvider#getName()->String::: hex code file disassembler provider get name
org.graalvm.compiler.code.HexCodeFileDisassemblerProvider#disassembleInstalledCode(CodeCacheProvider, CompilationResult, InstalledCode)->String::: hex code file disassembler provider disassemble installed code
org.graalvm.compiler.code.HexCodeFileDisassemblerProvider.HexCodeFileDisTool#tryDisassemble(String)->String::: hex code file dis tool try disassemble
org.graalvm.compiler.code.SourceMapping#getStartOffset()->int::: source mapping get start offset
org.graalvm.compiler.code.SourceMapping#getEndOffset()->int::: source mapping get end offset
org.graalvm.compiler.code.SourceMapping#getSourcePosition()->NodeSourcePosition::: source mapping get source position
org.graalvm.compiler.code.SourceMapping#toString()->String::: source mapping to string
org.graalvm.compiler.code.SourceMapping#hashCode()->int::: source mapping hash code
org.graalvm.compiler.code.SourceMapping#equals(Object)->boolean::: source mapping equals
org.graalvm.compiler.code.SourceMapping#contains(int)->boolean::: source mapping contains
org.graalvm.compiler.code.SourceStackTraceBailoutException#create(Throwable, String, StackTraceElement[])->SourceStackTraceBailoutException::: source stack trace bailout exception create

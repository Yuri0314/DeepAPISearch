java.lang.AbstractStringBuilder#compareTo(AbstractStringBuilder)->int:::Compares the objects of two AbstractStringBuilder implementations lexicographically.
java.lang.AbstractStringBuilder#length()->int:::Returns the length (character count).
java.lang.AbstractStringBuilder#capacity()->int:::Returns the current capacity
java.lang.AbstractStringBuilder#ensureCapacity(int)->void:::Ensures that the capacity is at least equal to the specified minimum
java.lang.AbstractStringBuilder#trimToSize()->void:::Attempts to reduce storage used for the character sequence
java.lang.AbstractStringBuilder#setLength(int)->void:::Sets the length of the character sequence
java.lang.AbstractStringBuilder#charAt(int)->char:::Returns the char value in this sequence at the specified index
java.lang.AbstractStringBuilder#codePointAt(int)->int:::Returns the character (Unicode code point) at the specified index
java.lang.AbstractStringBuilder#codePointBefore(int)->int:::Returns the character (Unicode code point) before the specified index
java.lang.AbstractStringBuilder#codePointCount(int, int)->int:::Returns the number of Unicode code points in the specified text range of this sequence
java.lang.AbstractStringBuilder#offsetByCodePoints(int, int)->int:::Returns the index within this sequence that is offset from the given index by codePointOffset code points
java.lang.AbstractStringBuilder#getChars(int, int, char[], int)->void:::Characters are copied from this sequence into the destination character array dst
java.lang.AbstractStringBuilder#setCharAt(int, char)->void:::The character at the specified index is set to ch
java.lang.AbstractStringBuilder#append(Object)->AbstractStringBuilder:::Appends the string representation of the Object argument
java.lang.AbstractStringBuilder#append(String)->AbstractStringBuilder:::Appends the specified string to this character sequence
java.lang.AbstractStringBuilder#append(StringBuffer)->AbstractStringBuilder::: abstract string builder append
java.lang.AbstractStringBuilder#append(AbstractStringBuilder)->AbstractStringBuilder::: abstract string builder append
java.lang.AbstractStringBuilder#append(CharSequence)->AbstractStringBuilder::: abstract string builder append
java.lang.AbstractStringBuilder#append(CharSequence, int, int)->AbstractStringBuilder:::Appends a subsequence of the specified CharSequence to this sequence
java.lang.AbstractStringBuilder#append(char[])->AbstractStringBuilder:::Appends the string representation of the char array argument to this sequence
java.lang.AbstractStringBuilder#append(char[], int, int)->AbstractStringBuilder:::Appends the string representation of a subarray of the char array argument to this sequence
java.lang.AbstractStringBuilder#append(boolean)->AbstractStringBuilder:::Appends the string representation of the boolean argument to the sequence
java.lang.AbstractStringBuilder#append(char)->AbstractStringBuilder:::Appends the string representation of the char argument to this sequence
java.lang.AbstractStringBuilder#append(int)->AbstractStringBuilder:::Appends the string representation of the int argument to this sequence
java.lang.AbstractStringBuilder#append(long)->AbstractStringBuilder:::Appends the string representation of the long argument to this sequence
java.lang.AbstractStringBuilder#append(float)->AbstractStringBuilder:::Appends the string representation of the float argument to this sequence
java.lang.AbstractStringBuilder#append(double)->AbstractStringBuilder:::Appends the string representation of the double argument to this sequence
java.lang.AbstractStringBuilder#delete(int, int)->AbstractStringBuilder:::Removes the characters in a substring of this sequence
java.lang.AbstractStringBuilder#appendCodePoint(int)->AbstractStringBuilder:::Appends the string representation of the codePoint argument to this sequence
java.lang.AbstractStringBuilder#deleteCharAt(int)->AbstractStringBuilder:::Removes the char at the specified position in this sequence
java.lang.AbstractStringBuilder#replace(int, int, String)->AbstractStringBuilder:::Replaces the characters in a substring of this sequence with characters in the specified String
java.lang.AbstractStringBuilder#substring(int)->String:::Returns a new String that contains a subsequence of characters currently contained in this character sequence
java.lang.AbstractStringBuilder#subSequence(int, int)->CharSequence:::Returns a new character sequence that is a subsequence of this sequence
java.lang.AbstractStringBuilder#substring(int, int)->String:::Returns a new String that contains a subsequence of characters currently contained in this sequence
java.lang.AbstractStringBuilder#insert(int, char[], int, int)->AbstractStringBuilder:::Inserts the string representation of a subarray of the str array argument into this sequence
java.lang.AbstractStringBuilder#insert(int, Object)->AbstractStringBuilder:::Inserts the string representation of the Object argument into this character sequence
java.lang.AbstractStringBuilder#insert(int, String)->AbstractStringBuilder:::Inserts the string into this character sequence
java.lang.AbstractStringBuilder#insert(int, char[])->AbstractStringBuilder:::Inserts the string representation of the char array argument into this sequence
java.lang.AbstractStringBuilder#insert(int, CharSequence)->AbstractStringBuilder:::Inserts the specified CharSequence into this sequence
java.lang.AbstractStringBuilder#insert(int, CharSequence, int, int)->AbstractStringBuilder:::Inserts a subsequence of the specified CharSequence into this sequence
java.lang.AbstractStringBuilder#insert(int, boolean)->AbstractStringBuilder:::Inserts the string representation of the boolean argument into this sequence
java.lang.AbstractStringBuilder#insert(int, char)->AbstractStringBuilder:::Inserts the string representation of the char argument into this sequence
java.lang.AbstractStringBuilder#insert(int, int)->AbstractStringBuilder:::Inserts the string representation of the second int argument into this sequence
java.lang.AbstractStringBuilder#insert(int, long)->AbstractStringBuilder:::Inserts the string representation of the long argument into this sequence
java.lang.AbstractStringBuilder#insert(int, float)->AbstractStringBuilder:::Inserts the string representation of the float argument into this sequence
java.lang.AbstractStringBuilder#insert(int, double)->AbstractStringBuilder:::Inserts the string representation of the double argument into this sequence
java.lang.AbstractStringBuilder#indexOf(String)->int:::Returns the index within this string of the first occurrence of the specified substring
java.lang.AbstractStringBuilder#indexOf(String, int)->int:::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index
java.lang.AbstractStringBuilder#lastIndexOf(String)->int:::Returns the index within this string of the last occurrence of the specified substring
java.lang.AbstractStringBuilder#lastIndexOf(String, int)->int:::Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index
java.lang.AbstractStringBuilder#reverse()->AbstractStringBuilder:::Causes this character sequence to be replaced by the reverse of the sequence
java.lang.AbstractStringBuilder#toString()->String:::Returns a string representing the data in this sequence
java.lang.AbstractStringBuilder#chars()->IntStream::: abstract string builder chars
java.lang.AbstractStringBuilder#codePoints()->IntStream::: abstract string builder code points
java.lang.AbstractStringBuilder#getValue()->byte[]:::Needed by String for the contentEquals method.
java.lang.AbstractStringBuilder#getBytes(byte[], int, byte)->void::: abstract string builder get bytes
java.lang.AbstractStringBuilder#initBytes(char[], int, int)->void::: abstract string builder init bytes
java.lang.AbstractStringBuilder#getCoder()->byte::: abstract string builder get coder
java.lang.AbstractStringBuilder#isLatin1()->boolean::: abstract string builder is latin1
java.lang.Appendable#append(CharSequence)->Appendable:::Appends the specified character sequence to this Appendable
java.lang.Appendable#append(CharSequence, int, int)->Appendable:::Appends a subsequence of the specified character sequence to this Appendable
java.lang.Appendable#append(char)->Appendable:::Appends the specified character to this Appendable.
java.lang.ApplicationShutdownHooks#add(Thread)->void::: application shutdown hooks add
java.lang.ApplicationShutdownHooks#remove(Thread)->boolean::: application shutdown hooks remove
java.lang.ApplicationShutdownHooks#runHooks()->void::: application shutdown hooks run hooks
java.lang.AutoCloseable#close()->void:::Closes this resource, relinquishing any underlying resources
java.lang.Boolean#parseBoolean(String)->boolean:::Parses the string argument as a boolean
java.lang.Boolean#booleanValue()->boolean:::Returns the value of this Boolean object as a boolean primitive.
java.lang.Boolean#valueOf(boolean)->Boolean:::Returns a Boolean instance representing the specified boolean value
java.lang.Boolean#valueOf(String)->Boolean:::Returns a Boolean with a value represented by the specified string
java.lang.Boolean#toString(boolean)->String:::Returns a String object representing the specified boolean
java.lang.Boolean#toString()->String:::Returns a String object representing this Boolean's value
java.lang.Boolean#hashCode()->int:::Returns a hash code for this Boolean object.
java.lang.Boolean#hashCode(boolean)->int:::Returns a hash code for a boolean value; compatible with Boolean.hashCode().
java.lang.Boolean#equals(Object)->boolean:::Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object.
java.lang.Boolean#getBoolean(String)->boolean:::Returns true if and only if the system property named by the argument exists and is equal to, ignoring case, the string "true"
java.lang.Boolean#compareTo(Boolean)->int:::Compares this Boolean instance with another.
java.lang.Boolean#compare(boolean, boolean)->int:::Compares two boolean values
java.lang.Boolean#logicalAnd(boolean, boolean)->boolean:::Returns the result of applying the logical AND operator to the specified boolean operands.
java.lang.Boolean#logicalOr(boolean, boolean)->boolean:::Returns the result of applying the logical OR operator to the specified boolean operands.
java.lang.Boolean#logicalXor(boolean, boolean)->boolean:::Returns the result of applying the logical XOR operator to the specified boolean operands.
java.lang.Byte#toString(byte)->String:::Returns a new String object representing the specified byte
java.lang.Byte#valueOf(byte)->Byte:::Returns a Byte instance representing the specified byte value
java.lang.Byte#parseByte(String, int)->byte:::Parses the string argument as a signed byte in the radix specified by the second argument
java.lang.Byte#parseByte(String)->byte:::Parses the string argument as a signed decimal byte
java.lang.Byte#valueOf(String, int)->Byte:::Returns a Byte object holding the value extracted from the specified String when parsed with the radix given by the second argument
java.lang.Byte#valueOf(String)->Byte:::Returns a Byte object holding the value given by the specified String
java.lang.Byte#decode(String)->Byte:::Decodes a String into a Byte
java.lang.Byte#byteValue()->byte:::Returns the value of this Byte as a byte.
java.lang.Byte#shortValue()->short:::Returns the value of this Byte as a short after a widening primitive conversion.
java.lang.Byte#intValue()->int:::Returns the value of this Byte as an int after a widening primitive conversion.
java.lang.Byte#longValue()->long:::Returns the value of this Byte as a long after a widening primitive conversion.
java.lang.Byte#floatValue()->float:::Returns the value of this Byte as a float after a widening primitive conversion.
java.lang.Byte#doubleValue()->double:::Returns the value of this Byte as a double after a widening primitive conversion.
java.lang.Byte#toString()->String:::Returns a String object representing this Byte's value
java.lang.Byte#hashCode()->int:::Returns a hash code for this Byte; equal to the result of invoking intValue().
java.lang.Byte#hashCode(byte)->int:::Returns a hash code for a byte value; compatible with Byte.hashCode().
java.lang.Byte#equals(Object)->boolean:::Compares this object to the specified object
java.lang.Byte#compareTo(Byte)->int:::Compares two Byte objects numerically.
java.lang.Byte#compare(byte, byte)->int:::Compares two byte values numerically
java.lang.Byte#compareUnsigned(byte, byte)->int:::Compares two byte values numerically treating the values as unsigned.
java.lang.Byte#toUnsignedInt(byte)->int:::Converts the argument to an int by an unsigned conversion
java.lang.Byte#toUnsignedLong(byte)->long:::Converts the argument to a long by an unsigned conversion
java.lang.Character.Subset#equals(Object)->boolean:::Compares two Subset objects for equality
java.lang.Character.Subset#hashCode()->int:::Returns the standard hash code as defined by the Object#hashCode method
java.lang.Character.Subset#toString()->String:::Returns the name of this subset.
java.lang.Character.UnicodeBlock#of(char)->UnicodeBlock:::Returns the object representing the Unicode block containing the given character, or null if the character is not a member of a defined block
java.lang.Character.UnicodeBlock#of(int)->UnicodeBlock:::Returns the object representing the Unicode block containing the given character (Unicode code point), or null if the character is not a member of a defined block.
java.lang.Character.UnicodeBlock#forName(String)->UnicodeBlock:::Returns the UnicodeBlock with the given name
java.lang.Character#valueOf(char)->Character:::Returns a Character instance representing the specified char value
java.lang.Character#charValue()->char:::Returns the value of this Character object.
java.lang.Character#hashCode()->int:::Returns a hash code for this Character; equal to the result of invoking charValue().
java.lang.Character#hashCode(char)->int:::Returns a hash code for a char value; compatible with Character.hashCode().
java.lang.Character#equals(Object)->boolean:::Compares this object against the specified object
java.lang.Character#toString()->String:::Returns a String object representing this Character's value
java.lang.Character#toString(char)->String:::Returns a String object representing the specified char
java.lang.Character#toString(int)->String:::Returns a String object representing the specified character (Unicode code point)
java.lang.Character#isValidCodePoint(int)->boolean:::Determines whether the specified code point is a valid  Unicode code point value.
java.lang.Character#isBmpCodePoint(int)->boolean:::Determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP)
java.lang.Character#isSupplementaryCodePoint(int)->boolean:::Determines whether the specified character (Unicode code point) is in the supplementary character range.
java.lang.Character#isHighSurrogate(char)->boolean:::Determines if the given char value is a  Unicode high-surrogate code unit (also known as leading-surrogate code unit)
java.lang.Character#isLowSurrogate(char)->boolean:::Determines if the given char value is a  Unicode low-surrogate code unit (also known as trailing-surrogate code unit)
java.lang.Character#isSurrogate(char)->boolean:::Determines if the given char value is a Unicode surrogate code unit
java.lang.Character#isSurrogatePair(char, char)->boolean:::Determines whether the specified pair of char values is a valid  Unicode surrogate pair
java.lang.Character#charCount(int)->int:::Determines the number of char values needed to represent the specified character (Unicode code point)
java.lang.Character#toCodePoint(char, char)->int:::Converts the specified surrogate pair to its supplementary code point value
java.lang.Character#codePointAt(CharSequence, int)->int:::Returns the code point at the given index of the CharSequence
java.lang.Character#codePointAt(char[], int)->int:::Returns the code point at the given index of the char array
java.lang.Character#codePointAt(char[], int, int)->int:::Returns the code point at the given index of the char array, where only array elements with index less than limit can be used
java.lang.Character#codePointAtImpl(char[], int, int)->int::: character code point at impl
java.lang.Character#codePointBefore(CharSequence, int)->int:::Returns the code point preceding the given index of the CharSequence
java.lang.Character#codePointBefore(char[], int)->int:::Returns the code point preceding the given index of the char array
java.lang.Character#codePointBefore(char[], int, int)->int:::Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used
java.lang.Character#codePointBeforeImpl(char[], int, int)->int::: character code point before impl
java.lang.Character#highSurrogate(int)->char:::Returns the leading surrogate (a  high surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding
java.lang.Character#lowSurrogate(int)->char:::Returns the trailing surrogate (a  low surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding
java.lang.Character#toChars(int, char[], int)->int:::Converts the specified character (Unicode code point) to its UTF-16 representation
java.lang.Character#toChars(int)->char[]:::Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array
java.lang.Character#toSurrogates(int, char[], int)->void::: character to surrogates
java.lang.Character#codePointCount(CharSequence, int, int)->int:::Returns the number of Unicode code points in the text range of the specified char sequence
java.lang.Character#codePointCount(char[], int, int)->int:::Returns the number of Unicode code points in a subarray of the char array argument
java.lang.Character#codePointCountImpl(char[], int, int)->int::: character code point count impl
java.lang.Character#offsetByCodePoints(CharSequence, int, int)->int:::Returns the index within the given char sequence that is offset from the given index by codePointOffset code points
java.lang.Character#offsetByCodePoints(char[], int, int, int, int)->int:::Returns the index within the given char subarray that is offset from the given index by codePointOffset code points
java.lang.Character#offsetByCodePointsImpl(char[], int, int, int, int)->int::: character offset by code points impl
java.lang.Character#isLowerCase(char)->boolean:::Determines if the specified character is a lowercase character
java.lang.Character#isLowerCase(int)->boolean:::Determines if the specified character (Unicode code point) is a lowercase character
java.lang.Character#isUpperCase(char)->boolean:::Determines if the specified character is an uppercase character
java.lang.Character#isUpperCase(int)->boolean:::Determines if the specified character (Unicode code point) is an uppercase character
java.lang.Character#isTitleCase(char)->boolean:::Determines if the specified character is a titlecase character
java.lang.Character#isTitleCase(int)->boolean:::Determines if the specified character (Unicode code point) is a titlecase character
java.lang.Character#isDigit(char)->boolean:::Determines if the specified character is a digit
java.lang.Character#isDigit(int)->boolean:::Determines if the specified character (Unicode code point) is a digit
java.lang.Character#isDefined(char)->boolean:::Determines if a character is defined in Unicode
java.lang.Character#isDefined(int)->boolean:::Determines if a character (Unicode code point) is defined in Unicode
java.lang.Character#isLetter(char)->boolean:::Determines if the specified character is a letter
java.lang.Character#isLetter(int)->boolean:::Determines if the specified character (Unicode code point) is a letter
java.lang.Character#isLetterOrDigit(char)->boolean:::Determines if the specified character is a letter or digit
java.lang.Character#isLetterOrDigit(int)->boolean:::Determines if the specified character (Unicode code point) is a letter or digit
java.lang.Character#isJavaLetter(char)->boolean:::Determines if the specified character is permissible as the first character in a Java identifier
java.lang.Character#isJavaLetterOrDigit(char)->boolean:::Determines if the specified character may be part of a Java identifier as other than the first character
java.lang.Character#isAlphabetic(int)->boolean:::Determines if the specified character (Unicode code point) is an alphabet
java.lang.Character#isIdeographic(int)->boolean:::Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.
java.lang.Character#isJavaIdentifierStart(char)->boolean:::Determines if the specified character is permissible as the first character in a Java identifier
java.lang.Character#isJavaIdentifierStart(int)->boolean:::Determines if the character (Unicode code point) is permissible as the first character in a Java identifier
java.lang.Character#isJavaIdentifierPart(char)->boolean:::Determines if the specified character may be part of a Java identifier as other than the first character
java.lang.Character#isJavaIdentifierPart(int)->boolean:::Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character
java.lang.Character#isUnicodeIdentifierStart(char)->boolean:::Determines if the specified character is permissible as the first character in a Unicode identifier
java.lang.Character#isUnicodeIdentifierStart(int)->boolean:::Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier
java.lang.Character#isUnicodeIdentifierPart(char)->boolean:::Determines if the specified character may be part of a Unicode identifier as other than the first character
java.lang.Character#isUnicodeIdentifierPart(int)->boolean:::Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character
java.lang.Character#isIdentifierIgnorable(char)->boolean:::Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier
java.lang.Character#isIdentifierIgnorable(int)->boolean:::Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier
java.lang.Character#toLowerCase(char)->char:::Converts the character argument to lowercase using case mapping information from the UnicodeData file
java.lang.Character#toLowerCase(int)->int:::Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file
java.lang.Character#toUpperCase(char)->char:::Converts the character argument to uppercase using case mapping information from the UnicodeData file
java.lang.Character#toUpperCase(int)->int:::Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file
java.lang.Character#toTitleCase(char)->char:::Converts the character argument to titlecase using case mapping information from the UnicodeData file
java.lang.Character#toTitleCase(int)->int:::Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file
java.lang.Character#digit(char, int)->int:::Returns the numeric value of the character ch in the specified radix
java.lang.Character#digit(int, int)->int:::Returns the numeric value of the specified character (Unicode code point) in the specified radix
java.lang.Character#getNumericValue(char)->int:::Returns the int value that the specified Unicode character represents
java.lang.Character#getNumericValue(int)->int:::Returns the int value that the specified character (Unicode code point) represents
java.lang.Character#isSpace(char)->boolean:::Determines if the specified character is ISO-LATIN-1 white space
java.lang.Character#isSpaceChar(char)->boolean:::Determines if the specified character is a Unicode space character
java.lang.Character#isSpaceChar(int)->boolean:::Determines if the specified character (Unicode code point) is a Unicode space character
java.lang.Character#isWhitespace(char)->boolean:::Determines if the specified character is white space according to Java
java.lang.Character#isWhitespace(int)->boolean:::Determines if the specified character (Unicode code point) is white space according to Java
java.lang.Character#isISOControl(char)->boolean:::Determines if the specified character is an ISO control character
java.lang.Character#isISOControl(int)->boolean:::Determines if the referenced character (Unicode code point) is an ISO control character
java.lang.Character#getType(char)->int:::Returns a value indicating a character's general category
java.lang.Character#getType(int)->int:::Returns a value indicating a character's general category.
java.lang.Character#forDigit(int, int)->char:::Determines the character representation for a specific digit in the specified radix
java.lang.Character#getDirectionality(char)->byte:::Returns the Unicode directionality property for the given character
java.lang.Character#getDirectionality(int)->byte:::Returns the Unicode directionality property for the given character (Unicode code point)
java.lang.Character#isMirrored(char)->boolean:::Determines whether the character is mirrored according to the Unicode specification
java.lang.Character#isMirrored(int)->boolean:::Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification
java.lang.Character#compareTo(Character)->int:::Compares two Character objects numerically.
java.lang.Character#compare(char, char)->int:::Compares two char values numerically
java.lang.Character#toUpperCaseEx(int)->int:::Converts the character (Unicode code point) argument to uppercase using information from the UnicodeData file.
java.lang.Character#toUpperCaseCharArray(int)->char[]:::Converts the character (Unicode code point) argument to uppercase using case mapping information from the SpecialCasing file in the Unicode specification
java.lang.Character#reverseBytes(char)->char:::Returns the value obtained by reversing the order of the bytes in the specified char value.
java.lang.Character#getName(int)->String:::Returns the Unicode name of the specified character codePoint, or null if the code point is #UNASSIGNED unassigned
java.lang.Character#codePointOf(String)->int:::Returns the code point value of the Unicode character specified by the given Unicode character name
java.lang.CharacterData#getProperties(int)->int::: character data get properties
java.lang.CharacterData#getType(int)->int::: character data get type
java.lang.CharacterData#isWhitespace(int)->boolean::: character data is whitespace
java.lang.CharacterData#isMirrored(int)->boolean::: character data is mirrored
java.lang.CharacterData#isJavaIdentifierStart(int)->boolean::: character data is java identifier start
java.lang.CharacterData#isJavaIdentifierPart(int)->boolean::: character data is java identifier part
java.lang.CharacterData#isUnicodeIdentifierStart(int)->boolean::: character data is unicode identifier start
java.lang.CharacterData#isUnicodeIdentifierPart(int)->boolean::: character data is unicode identifier part
java.lang.CharacterData#isIdentifierIgnorable(int)->boolean::: character data is identifier ignorable
java.lang.CharacterData#toLowerCase(int)->int::: character data to lower case
java.lang.CharacterData#toUpperCase(int)->int::: character data to upper case
java.lang.CharacterData#toTitleCase(int)->int::: character data to title case
java.lang.CharacterData#digit(int, int)->int::: character data digit
java.lang.CharacterData#getNumericValue(int)->int::: character data get numeric value
java.lang.CharacterData#getDirectionality(int)->byte::: character data get directionality
java.lang.CharacterData#toUpperCaseEx(int)->int::: character data to upper case ex
java.lang.CharacterData#toUpperCaseCharArray(int)->char[]::: character data to upper case char array
java.lang.CharacterData#isOtherLowercase(int)->boolean::: character data is other lowercase
java.lang.CharacterData#isOtherUppercase(int)->boolean::: character data is other uppercase
java.lang.CharacterData#isOtherAlphabetic(int)->boolean::: character data is other alphabetic
java.lang.CharacterData#isIdeographic(int)->boolean::: character data is ideographic
java.lang.CharacterData#of(int)->CharacterData::: character data of
java.lang.CharacterData00#getProperties(int)->int::: character data00 get properties
java.lang.CharacterData00#getPropertiesEx(int)->int::: character data00 get properties ex
java.lang.CharacterData00#getType(int)->int::: character data00 get type
java.lang.CharacterData00#isOtherLowercase(int)->boolean::: character data00 is other lowercase
java.lang.CharacterData00#isOtherUppercase(int)->boolean::: character data00 is other uppercase
java.lang.CharacterData00#isOtherAlphabetic(int)->boolean::: character data00 is other alphabetic
java.lang.CharacterData00#isIdeographic(int)->boolean::: character data00 is ideographic
java.lang.CharacterData00#isJavaIdentifierStart(int)->boolean::: character data00 is java identifier start
java.lang.CharacterData00#isJavaIdentifierPart(int)->boolean::: character data00 is java identifier part
java.lang.CharacterData00#isUnicodeIdentifierStart(int)->boolean::: character data00 is unicode identifier start
java.lang.CharacterData00#isUnicodeIdentifierPart(int)->boolean::: character data00 is unicode identifier part
java.lang.CharacterData00#isIdentifierIgnorable(int)->boolean::: character data00 is identifier ignorable
java.lang.CharacterData00#toLowerCase(int)->int::: character data00 to lower case
java.lang.CharacterData00#toUpperCase(int)->int::: character data00 to upper case
java.lang.CharacterData00#toTitleCase(int)->int::: character data00 to title case
java.lang.CharacterData00#digit(int, int)->int::: character data00 digit
java.lang.CharacterData00#getNumericValue(int)->int::: character data00 get numeric value
java.lang.CharacterData00#isWhitespace(int)->boolean::: character data00 is whitespace
java.lang.CharacterData00#getDirectionality(int)->byte::: character data00 get directionality
java.lang.CharacterData00#isMirrored(int)->boolean::: character data00 is mirrored
java.lang.CharacterData00#toUpperCaseEx(int)->int::: character data00 to upper case ex
java.lang.CharacterData00#toUpperCaseCharArray(int)->char[]::: character data00 to upper case char array
java.lang.CharacterData00#findInCharMap(int)->int:::Finds the character in the uppercase mapping table.
java.lang.CharacterData01#getProperties(int)->int::: character data01 get properties
java.lang.CharacterData01#getPropertiesEx(int)->int::: character data01 get properties ex
java.lang.CharacterData01#getType(int)->int::: character data01 get type
java.lang.CharacterData01#isOtherLowercase(int)->boolean::: character data01 is other lowercase
java.lang.CharacterData01#isOtherUppercase(int)->boolean::: character data01 is other uppercase
java.lang.CharacterData01#isOtherAlphabetic(int)->boolean::: character data01 is other alphabetic
java.lang.CharacterData01#isIdeographic(int)->boolean::: character data01 is ideographic
java.lang.CharacterData01#isJavaIdentifierStart(int)->boolean::: character data01 is java identifier start
java.lang.CharacterData01#isJavaIdentifierPart(int)->boolean::: character data01 is java identifier part
java.lang.CharacterData01#isUnicodeIdentifierStart(int)->boolean::: character data01 is unicode identifier start
java.lang.CharacterData01#isUnicodeIdentifierPart(int)->boolean::: character data01 is unicode identifier part
java.lang.CharacterData01#isIdentifierIgnorable(int)->boolean::: character data01 is identifier ignorable
java.lang.CharacterData01#toLowerCase(int)->int::: character data01 to lower case
java.lang.CharacterData01#toUpperCase(int)->int::: character data01 to upper case
java.lang.CharacterData01#toTitleCase(int)->int::: character data01 to title case
java.lang.CharacterData01#digit(int, int)->int::: character data01 digit
java.lang.CharacterData01#getNumericValue(int)->int::: character data01 get numeric value
java.lang.CharacterData01#isWhitespace(int)->boolean::: character data01 is whitespace
java.lang.CharacterData01#getDirectionality(int)->byte::: character data01 get directionality
java.lang.CharacterData01#isMirrored(int)->boolean::: character data01 is mirrored
java.lang.CharacterData02#getProperties(int)->int::: character data02 get properties
java.lang.CharacterData02#getPropertiesEx(int)->int::: character data02 get properties ex
java.lang.CharacterData02#isOtherLowercase(int)->boolean::: character data02 is other lowercase
java.lang.CharacterData02#isOtherUppercase(int)->boolean::: character data02 is other uppercase
java.lang.CharacterData02#isOtherAlphabetic(int)->boolean::: character data02 is other alphabetic
java.lang.CharacterData02#isIdeographic(int)->boolean::: character data02 is ideographic
java.lang.CharacterData02#getType(int)->int::: character data02 get type
java.lang.CharacterData02#isJavaIdentifierStart(int)->boolean::: character data02 is java identifier start
java.lang.CharacterData02#isJavaIdentifierPart(int)->boolean::: character data02 is java identifier part
java.lang.CharacterData02#isUnicodeIdentifierStart(int)->boolean::: character data02 is unicode identifier start
java.lang.CharacterData02#isUnicodeIdentifierPart(int)->boolean::: character data02 is unicode identifier part
java.lang.CharacterData02#isIdentifierIgnorable(int)->boolean::: character data02 is identifier ignorable
java.lang.CharacterData02#toLowerCase(int)->int::: character data02 to lower case
java.lang.CharacterData02#toUpperCase(int)->int::: character data02 to upper case
java.lang.CharacterData02#toTitleCase(int)->int::: character data02 to title case
java.lang.CharacterData02#digit(int, int)->int::: character data02 digit
java.lang.CharacterData02#getNumericValue(int)->int::: character data02 get numeric value
java.lang.CharacterData02#isWhitespace(int)->boolean::: character data02 is whitespace
java.lang.CharacterData02#getDirectionality(int)->byte::: character data02 get directionality
java.lang.CharacterData02#isMirrored(int)->boolean::: character data02 is mirrored
java.lang.CharacterData0E#getProperties(int)->int::: character data0 e get properties
java.lang.CharacterData0E#getPropertiesEx(int)->int::: character data0 e get properties ex
java.lang.CharacterData0E#isOtherLowercase(int)->boolean::: character data0 e is other lowercase
java.lang.CharacterData0E#isOtherUppercase(int)->boolean::: character data0 e is other uppercase
java.lang.CharacterData0E#isOtherAlphabetic(int)->boolean::: character data0 e is other alphabetic
java.lang.CharacterData0E#isIdeographic(int)->boolean::: character data0 e is ideographic
java.lang.CharacterData0E#getType(int)->int::: character data0 e get type
java.lang.CharacterData0E#isJavaIdentifierStart(int)->boolean::: character data0 e is java identifier start
java.lang.CharacterData0E#isJavaIdentifierPart(int)->boolean::: character data0 e is java identifier part
java.lang.CharacterData0E#isUnicodeIdentifierStart(int)->boolean::: character data0 e is unicode identifier start
java.lang.CharacterData0E#isUnicodeIdentifierPart(int)->boolean::: character data0 e is unicode identifier part
java.lang.CharacterData0E#isIdentifierIgnorable(int)->boolean::: character data0 e is identifier ignorable
java.lang.CharacterData0E#toLowerCase(int)->int::: character data0 e to lower case
java.lang.CharacterData0E#toUpperCase(int)->int::: character data0 e to upper case
java.lang.CharacterData0E#toTitleCase(int)->int::: character data0 e to title case
java.lang.CharacterData0E#digit(int, int)->int::: character data0 e digit
java.lang.CharacterData0E#getNumericValue(int)->int::: character data0 e get numeric value
java.lang.CharacterData0E#isWhitespace(int)->boolean::: character data0 e is whitespace
java.lang.CharacterData0E#getDirectionality(int)->byte::: character data0 e get directionality
java.lang.CharacterData0E#isMirrored(int)->boolean::: character data0 e is mirrored
java.lang.CharacterDataLatin1#getProperties(int)->int::: character data latin1 get properties
java.lang.CharacterDataLatin1#getPropertiesEx(int)->int::: character data latin1 get properties ex
java.lang.CharacterDataLatin1#isOtherLowercase(int)->boolean::: character data latin1 is other lowercase
java.lang.CharacterDataLatin1#isOtherUppercase(int)->boolean::: character data latin1 is other uppercase
java.lang.CharacterDataLatin1#isOtherAlphabetic(int)->boolean::: character data latin1 is other alphabetic
java.lang.CharacterDataLatin1#isIdeographic(int)->boolean::: character data latin1 is ideographic
java.lang.CharacterDataLatin1#getType(int)->int::: character data latin1 get type
java.lang.CharacterDataLatin1#isJavaIdentifierStart(int)->boolean::: character data latin1 is java identifier start
java.lang.CharacterDataLatin1#isJavaIdentifierPart(int)->boolean::: character data latin1 is java identifier part
java.lang.CharacterDataLatin1#isUnicodeIdentifierStart(int)->boolean::: character data latin1 is unicode identifier start
java.lang.CharacterDataLatin1#isUnicodeIdentifierPart(int)->boolean::: character data latin1 is unicode identifier part
java.lang.CharacterDataLatin1#isIdentifierIgnorable(int)->boolean::: character data latin1 is identifier ignorable
java.lang.CharacterDataLatin1#toLowerCase(int)->int::: character data latin1 to lower case
java.lang.CharacterDataLatin1#toUpperCase(int)->int::: character data latin1 to upper case
java.lang.CharacterDataLatin1#toTitleCase(int)->int::: character data latin1 to title case
java.lang.CharacterDataLatin1#digit(int, int)->int::: character data latin1 digit
java.lang.CharacterDataLatin1#getNumericValue(int)->int::: character data latin1 get numeric value
java.lang.CharacterDataLatin1#isWhitespace(int)->boolean::: character data latin1 is whitespace
java.lang.CharacterDataLatin1#getDirectionality(int)->byte::: character data latin1 get directionality
java.lang.CharacterDataLatin1#isMirrored(int)->boolean::: character data latin1 is mirrored
java.lang.CharacterDataLatin1#toUpperCaseEx(int)->int::: character data latin1 to upper case ex
java.lang.CharacterDataLatin1#toUpperCaseCharArray(int)->char[]::: character data latin1 to upper case char array
java.lang.CharacterDataPrivateUse#getProperties(int)->int::: character data private use get properties
java.lang.CharacterDataPrivateUse#getType(int)->int::: character data private use get type
java.lang.CharacterDataPrivateUse#isJavaIdentifierStart(int)->boolean::: character data private use is java identifier start
java.lang.CharacterDataPrivateUse#isJavaIdentifierPart(int)->boolean::: character data private use is java identifier part
java.lang.CharacterDataPrivateUse#isUnicodeIdentifierStart(int)->boolean::: character data private use is unicode identifier start
java.lang.CharacterDataPrivateUse#isUnicodeIdentifierPart(int)->boolean::: character data private use is unicode identifier part
java.lang.CharacterDataPrivateUse#isIdentifierIgnorable(int)->boolean::: character data private use is identifier ignorable
java.lang.CharacterDataPrivateUse#toLowerCase(int)->int::: character data private use to lower case
java.lang.CharacterDataPrivateUse#toUpperCase(int)->int::: character data private use to upper case
java.lang.CharacterDataPrivateUse#toTitleCase(int)->int::: character data private use to title case
java.lang.CharacterDataPrivateUse#digit(int, int)->int::: character data private use digit
java.lang.CharacterDataPrivateUse#getNumericValue(int)->int::: character data private use get numeric value
java.lang.CharacterDataPrivateUse#isWhitespace(int)->boolean::: character data private use is whitespace
java.lang.CharacterDataPrivateUse#getDirectionality(int)->byte::: character data private use get directionality
java.lang.CharacterDataPrivateUse#isMirrored(int)->boolean::: character data private use is mirrored
java.lang.CharacterDataUndefined#getProperties(int)->int::: character data undefined get properties
java.lang.CharacterDataUndefined#getType(int)->int::: character data undefined get type
java.lang.CharacterDataUndefined#isJavaIdentifierStart(int)->boolean::: character data undefined is java identifier start
java.lang.CharacterDataUndefined#isJavaIdentifierPart(int)->boolean::: character data undefined is java identifier part
java.lang.CharacterDataUndefined#isUnicodeIdentifierStart(int)->boolean::: character data undefined is unicode identifier start
java.lang.CharacterDataUndefined#isUnicodeIdentifierPart(int)->boolean::: character data undefined is unicode identifier part
java.lang.CharacterDataUndefined#isIdentifierIgnorable(int)->boolean::: character data undefined is identifier ignorable
java.lang.CharacterDataUndefined#toLowerCase(int)->int::: character data undefined to lower case
java.lang.CharacterDataUndefined#toUpperCase(int)->int::: character data undefined to upper case
java.lang.CharacterDataUndefined#toTitleCase(int)->int::: character data undefined to title case
java.lang.CharacterDataUndefined#digit(int, int)->int::: character data undefined digit
java.lang.CharacterDataUndefined#getNumericValue(int)->int::: character data undefined get numeric value
java.lang.CharacterDataUndefined#isWhitespace(int)->boolean::: character data undefined is whitespace
java.lang.CharacterDataUndefined#getDirectionality(int)->byte::: character data undefined get directionality
java.lang.CharacterDataUndefined#isMirrored(int)->boolean::: character data undefined is mirrored
java.lang.CharacterName#getInstance()->CharacterName::: character name get instance
java.lang.CharacterName#getName(int)->String::: character name get name
java.lang.CharacterName#getCodePoint(String)->int::: character name get code point
java.lang.CharSequence#length()->int:::Returns the length of this character sequence
java.lang.CharSequence#charAt(int)->char:::Returns the char value at the specified index
java.lang.CharSequence#subSequence(int, int)->CharSequence:::Returns a CharSequence that is a subsequence of this sequence
java.lang.CharSequence#toString()->String:::Returns a string containing the characters in this sequence in the same order as this sequence
java.lang.CharSequence#chars()->IntStream:::Returns a stream of int zero-extending the char values from this sequence
java.lang.CharSequence#codePoints()->IntStream:::Returns a stream of code point values from this sequence
java.lang.CharSequence#compare(CharSequence, CharSequence)->int:::Compares two CharSequence instances lexicographically
java.lang.Class#toString()->String:::Converts the object to a string
java.lang.Class#toGenericString()->String:::Returns a string describing this Class, including information about modifiers and type parameters
java.lang.Class#forName(String)->Class:::Returns the Class object associated with the class or interface with the given string name
java.lang.Class#forName(String, boolean, ClassLoader)->Class:::Returns the Class object associated with the class or interface with the given string name, using the given class loader
java.lang.Class#forName(Module, String)->Class:::Returns the Class with the given  binary name in the given module
java.lang.Class#newInstance()->T:::Creates a new instance of the class represented by this Class object
java.lang.Class#isInstance(Object)->boolean:::Determines if the specified Object is assignment-compatible with the object represented by this Class
java.lang.Class#isAssignableFrom(Class)->boolean:::Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter
java.lang.Class#isInterface()->boolean:::Determines if the specified Class object represents an interface type.
java.lang.Class#isArray()->boolean:::Determines if this Class object represents an array class.
java.lang.Class#isPrimitive()->boolean:::Determines if the specified Class object represents a primitive type
java.lang.Class#isAnnotation()->boolean:::Returns true if this Class object represents an annotation type
java.lang.Class#isSynthetic()->boolean:::Returns true if this class is a synthetic class; returns false otherwise.
java.lang.Class#getName()->String:::Returns the  name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String
java.lang.Class#getClassLoader()->ClassLoader:::Returns the class loader for the class
java.lang.Class#getClassLoader0()->ClassLoader::: class get class loader0
java.lang.Class#getModule()->Module:::Returns the module that this class or interface is a member of
java.lang.Class#getTypeParameters()->TypeVariable>[]:::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order
java.lang.Class#getSuperclass()->Class:::Returns the Class representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class
java.lang.Class#getGenericSuperclass()->Type:::Returns the Type representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class
java.lang.Class#getPackage()->Package:::Gets the package of this class
java.lang.Class#getPackageName()->String:::Returns the fully qualified package name
java.lang.Class#getInterfaces()->Class[]:::Returns the interfaces directly implemented by the class or interface represented by this object
java.lang.Class#getGenericInterfaces()->Type[]:::Returns the Types representing the interfaces directly implemented by the class or interface represented by this object
java.lang.Class#getComponentType()->Class:::Returns the Class representing the component type of an array
java.lang.Class#getModifiers()->int:::Returns the Java language modifiers for this class or interface, encoded in an integer
java.lang.Class#getSigners()->Object[]:::Gets the signers of this class.
java.lang.Class#setSigners(Object[])->void:::Set the signers of this class.
java.lang.Class#getEnclosingMethod()->Method:::If this Class object represents a local or anonymous class within a method, returns a java.lang.reflect.Method Method object representing the immediately enclosing method of the underlying class
java.lang.Class#getEnclosingConstructor()->Constructor:::If this Class object represents a local or anonymous class within a constructor, returns a java.lang.reflect.Constructor Constructor object representing the immediately enclosing constructor of the underlying class
java.lang.Class#getDeclaringClass()->Class:::If the class or interface represented by this Class object is a member of another class, returns the Class object representing the class in which it was declared
java.lang.Class#getEnclosingClass()->Class:::Returns the immediately enclosing class of the underlying class
java.lang.Class#getSimpleName()->String:::Returns the simple name of the underlying class as given in the source code
java.lang.Class#getTypeName()->String:::Return an informative string for the name of this type.
java.lang.Class#getCanonicalName()->String:::Returns the canonical name of the underlying class as defined by the Java Language Specification
java.lang.Class#isAnonymousClass()->boolean:::Returns true if and only if the underlying class is an anonymous class.
java.lang.Class#isLocalClass()->boolean:::Returns true if and only if the underlying class is a local class.
java.lang.Class#isMemberClass()->boolean:::Returns true if and only if the underlying class is a member class.
java.lang.Class#getClasses()->Class[]:::Returns an array containing Class objects representing all the public classes and interfaces that are members of the class represented by this Class object
java.lang.Class#getFields()->Field[]:::Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object
java.lang.Class#getMethods()->Method[]:::Returns an array containing Method objects reflecting all the public methods of the class or interface represented by this Class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces
java.lang.Class#getConstructors()->Constructor[]:::Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object
java.lang.Class#getField(String)->Field:::Returns a Field object that reflects the specified public member field of the class or interface represented by this Class object
java.lang.Class#getMethod(String, Class...)->Method:::Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object
java.lang.Class#getConstructor(Class...)->Constructor:::Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object
java.lang.Class#getDeclaredClasses()->Class[]:::Returns an array of Class objects reflecting all the classes and interfaces declared as members of the class represented by this Class object
java.lang.Class#getDeclaredFields()->Field[]:::Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object
java.lang.Class#getDeclaredMethods()->Method[]:::Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods
java.lang.Class#getDeclaredConstructors()->Constructor[]:::Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object
java.lang.Class#getDeclaredField(String)->Field:::Returns a Field object that reflects the specified declared field of the class or interface represented by this Class object
java.lang.Class#getDeclaredMethod(String, Class...)->Method:::Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object
java.lang.Class#getDeclaredPublicMethods(String, Class...)->List:::Returns the list of Method objects for the declared public methods of this class or interface that have the specified method name and parameter types.
java.lang.Class#getDeclaredConstructor(Class...)->Constructor:::Returns a Constructor object that reflects the specified constructor of the class or interface represented by this Class object
java.lang.Class#getResourceAsStream(String)->InputStream:::Finds a resource with a given name
java.lang.Class#getResource(String)->URL:::Finds a resource with a given name
java.lang.Class#getProtectionDomain()->java.security.ProtectionDomain:::Returns the ProtectionDomain of this class
java.lang.Class#getPrimitiveClass(String)->Class::: class get primitive class
java.lang.Class#getRawAnnotations()->byte[]::: class get raw annotations
java.lang.Class#getRawTypeAnnotations()->byte[]::: class get raw type annotations
java.lang.Class#getExecutableTypeAnnotationBytes(Executable)->byte[]::: class get executable type annotation bytes
java.lang.Class#getConstantPool()->ConstantPool::: class get constant pool
java.lang.Class#desiredAssertionStatus()->boolean:::Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked
java.lang.Class#isEnum()->boolean:::Returns true if and only if this class was declared as an enum in the source code.
java.lang.Class#getEnumConstants()->T[]:::Returns the elements of this enum class or null if this Class object does not represent an enum type.
java.lang.Class#getEnumConstantsShared()->T[]:::Returns the elements of this enum class or null if this Class object does not represent an enum type; identical to getEnumConstants except that the result is uncloned, cached, and shared by all callers.
java.lang.Class#enumConstantDirectory()->Map:::Returns a map from simple name to enum constant
java.lang.Class#cast(Object)->T:::Casts an object to the class or interface represented by this Class object.
java.lang.Class#asSubclass(Class)->Class:::Casts this Class object to represent a subclass of the class represented by the specified class object
java.lang.Class#getAnnotation(Class)->A::: class get annotation
java.lang.Class#isAnnotationPresent(Class)->boolean::: class is annotation present
java.lang.Class#getAnnotationsByType(Class)->A[]::: class get annotations by type
java.lang.Class#getAnnotations()->Annotation[]::: class get annotations
java.lang.Class#getDeclaredAnnotation(Class)->A::: class get declared annotation
java.lang.Class#getDeclaredAnnotationsByType(Class)->A[]::: class get declared annotations by type
java.lang.Class#getDeclaredAnnotations()->Annotation[]::: class get declared annotations
java.lang.Class#casAnnotationType(AnnotationType, AnnotationType)->boolean::: class cas annotation type
java.lang.Class#getAnnotationType()->AnnotationType::: class get annotation type
java.lang.Class#getDeclaredAnnotationMap()->Map, Annotation>::: class get declared annotation map
java.lang.Class#getAnnotatedSuperclass()->AnnotatedType:::Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class object
java.lang.Class#getAnnotatedInterfaces()->AnnotatedType[]:::Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class object
java.lang.Class#getNestHost()->Class:::Returns the nest host of the nest to which the class or interface represented by this Class object belongs
java.lang.Class#isNestmateOf(Class)->boolean:::Determines if the given Class is a nestmate of the class or interface represented by this Class object
java.lang.Class#getNestMembers()->Class[]:::Returns an array containing Class objects representing all the classes and interfaces that are members of the nest to which the class or interface represented by this Class object belongs
java.lang.ClassLoader#addClass(Class)->void::: class loader add class
java.lang.ClassLoader#getName()->String:::Returns the name of this class loader or null if this class loader is not named.
java.lang.ClassLoader#name()->String::: class loader name
java.lang.ClassLoader#loadClass(String)->Class:::Loads the class with the specified binary name
java.lang.ClassLoader#loadClass(String, boolean)->Class:::Loads the class with the specified binary name
java.lang.ClassLoader#loadClass(Module, String)->Class:::Loads the class with the specified binary name in a module defined to this class loader
java.lang.ClassLoader#getClassLoadingLock(String)->Object:::Returns the lock object for class loading operations
java.lang.ClassLoader#findClass(String)->Class:::Finds the class with the specified binary name
java.lang.ClassLoader#findClass(String, String)->Class:::Finds the class with the given binary name in a module defined to this class loader
java.lang.ClassLoader#defineClass(byte[], int, int)->Class:::Converts an array of bytes into an instance of class Class
java.lang.ClassLoader#defineClass(String, byte[], int, int)->Class:::Converts an array of bytes into an instance of class Class
java.lang.ClassLoader#defineClass(String, byte[], int, int, ProtectionDomain)->Class:::Converts an array of bytes into an instance of class Class, with a given ProtectionDomain
java.lang.ClassLoader#defineClass(String, java.nio.ByteBuffer, ProtectionDomain)->Class:::Converts a java.nio.ByteBuffer ByteBuffer into an instance of class Class, with the given ProtectionDomain
java.lang.ClassLoader#defineClass1(ClassLoader, String, byte[], int, int, ProtectionDomain, String)->Class::: class loader define class1
java.lang.ClassLoader#defineClass2(ClassLoader, String, java.nio.ByteBuffer, int, int, ProtectionDomain, String)->Class::: class loader define class2
java.lang.ClassLoader#resolveClass(Class)->void:::Links the specified class
java.lang.ClassLoader#findSystemClass(String)->Class:::Finds a class with the specified binary name, loading it if necessary
java.lang.ClassLoader#findBootstrapClassOrNull(String)->Class:::Returns a class loaded by the bootstrap class loader; or return null if not found.
java.lang.ClassLoader#findLoadedClass(String)->Class:::Returns the class with the given binary name if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that binary name
java.lang.ClassLoader#setSigners(Class, Object[])->void:::Sets the signers of a class
java.lang.ClassLoader#findResource(String, String)->URL:::Returns a URL to a resource in a module defined to this class loader
java.lang.ClassLoader#getResource(String)->URL:::Finds the resource with the given name
java.lang.ClassLoader#getResources(String)->Enumeration:::Finds all the resources with the given name
java.lang.ClassLoader#resources(String)->Stream:::Returns a stream whose elements are the URLs of all the resources with the given name
java.lang.ClassLoader#findResource(String)->URL:::Finds the resource with the given name
java.lang.ClassLoader#findResources(String)->Enumeration:::Returns an enumeration of java.net.URL URL objects representing all the resources with the given name
java.lang.ClassLoader#registerAsParallelCapable()->boolean:::Registers the caller as #isRegisteredAsParallelCapable() parallel capable
java.lang.ClassLoader#isRegisteredAsParallelCapable()->boolean:::Returns true if this class loader is registered as #registerAsParallelCapable parallel capable, otherwise false.
java.lang.ClassLoader#getSystemResource(String)->URL:::Find a resource of the specified name from the search path used to load classes
java.lang.ClassLoader#getSystemResources(String)->Enumeration:::Finds all resources of the specified name from the search path used to load classes
java.lang.ClassLoader#getResourceAsStream(String)->InputStream:::Returns an input stream for reading the specified resource
java.lang.ClassLoader#getSystemResourceAsStream(String)->InputStream:::Open for reading, a resource of the specified name from the search path used to load classes
java.lang.ClassLoader#getParent()->ClassLoader:::Returns the parent class loader for delegation
java.lang.ClassLoader#getUnnamedModule()->Module:::Returns the unnamed Module for this class loader.
java.lang.ClassLoader#getPlatformClassLoader()->ClassLoader:::Returns the platform class loader
java.lang.ClassLoader#getSystemClassLoader()->ClassLoader:::Returns the system class loader
java.lang.ClassLoader#getBuiltinPlatformClassLoader()->ClassLoader::: class loader get builtin platform class loader
java.lang.ClassLoader#getBuiltinAppClassLoader()->ClassLoader::: class loader get builtin app class loader
java.lang.ClassLoader#initSystemClassLoader()->ClassLoader::: class loader init system class loader
java.lang.ClassLoader#isAncestor(ClassLoader)->boolean::: class loader is ancestor
java.lang.ClassLoader#getClassLoader(Class)->ClassLoader::: class loader get class loader
java.lang.ClassLoader#checkClassLoaderPermission(ClassLoader, Class)->void::: class loader check class loader permission
java.lang.ClassLoader#definePackage(Class)->Package:::Define a Package of the given Class object
java.lang.ClassLoader#definePackage(String, Module)->Package:::Defines a Package of the given name and module  This method does not throw IllegalArgumentException.
java.lang.ClassLoader#definePackage(String, String, String, String, String, String, String, URL)->Package:::Defines a package by name in this ClassLoader
java.lang.ClassLoader#getDefinedPackage(String)->Package:::Returns a Package of the given name that has been defined by this class loader.
java.lang.ClassLoader#getDefinedPackages()->Package[]:::Returns all of the Packages that have been defined by this class loader
java.lang.ClassLoader#getPackage(String)->Package:::Finds a package by name in this class loader and its ancestors
java.lang.ClassLoader#getPackages()->Package[]:::Returns all of the Packages that have been defined by this class loader and its ancestors
java.lang.ClassLoader#packages()->Stream:::Returns a stream of Packages defined in this class loader
java.lang.ClassLoader#findLibrary(String)->String:::Returns the absolute path name of a native library
java.lang.ClassLoader.NativeLibrary#load0(String, boolean)->boolean::: native library load0
java.lang.ClassLoader.NativeLibrary#findEntry(String)->long::: native library find entry
java.lang.ClassLoader.NativeLibrary#load()->boolean::: native library load
java.lang.ClassLoader.NativeLibrary#loadLibrary(Class, String, boolean)->boolean::: native library load library
java.lang.ClassLoader.NativeLibrary#getFromClass()->Class::: native library get from class
java.lang.ClassLoader.NativeLibrary.Unloader#run()->void::: unloader run
java.lang.ClassLoader.NativeLibrary#unload(String, boolean, long)->void::: native library unload
java.lang.ClassLoader#loadLibrary(Class, String, boolean)->void::: class loader load library
java.lang.ClassLoader#setDefaultAssertionStatus(boolean)->void:::Sets the default assertion status for this class loader
java.lang.ClassLoader#setPackageAssertionStatus(String, boolean)->void:::Sets the package default assertion status for the named package
java.lang.ClassLoader#setClassAssertionStatus(String, boolean)->void:::Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein
java.lang.ClassLoader#clearAssertionStatus()->void:::Sets the default assertion status for this class loader to false and discards any package defaults or class assertion status settings associated with the class loader
java.lang.ClassLoader#desiredAssertionStatus(String)->boolean:::Returns the assertion status that would be assigned to the specified class if it were to be initialized at the time this method is invoked
java.lang.ClassLoader#createOrGetClassLoaderValueMap()->ConcurrentHashMap:::Returns the ConcurrentHashMap used as a storage for ClassLoaderValue(s) associated with this ClassLoader, creating it if it doesn't already exist.
java.lang.CompoundEnumeration#hasMoreElements()->boolean::: compound enumeration has more elements
java.lang.CompoundEnumeration#nextElement()->E::: compound enumeration next element
java.lang.ClassLoaderHelper#mapAlternativeName(File)->File:::Returns an alternate path name for the given file such that if the original pathname did not exist, then the file may be located at the alternate location
java.lang.ClassNotFoundException#getException()->Throwable:::Returns the exception that was raised if an error occurred while attempting to load the class
java.lang.ClassNotFoundException#getCause()->Throwable:::Returns the cause of this exception (the exception that was raised if an error occurred while attempting to load the class; otherwise null).
java.lang.ClassValue#computeValue(Class)->T:::Computes the given class's derived value for this ClassValue
java.lang.ClassValue#get(Class)->T:::Returns the value for the given class
java.lang.ClassValue#remove(Class)->void:::Removes the associated value for the given class
java.lang.ClassValue#put(Class, T)->void::: class value put
java.lang.ClassValue#castEntry(Entry)->Entry::: class value cast entry
java.lang.ClassValue#match(Entry)->boolean:::Check that e is non-null, matches this ClassValue, and is live.
java.lang.ClassValue#version()->Version::: class value version
java.lang.ClassValue#bumpVersion()->void::: class value bump version
java.lang.ClassValue.Version#classValue()->ClassValue::: version class value
java.lang.ClassValue.Version#promise()->Entry::: version promise
java.lang.ClassValue.Version#isLive()->boolean::: version is live
java.lang.ClassValue.Entry#value()->T:::Fetch the value
java.lang.ClassValue.Entry#isPromise()->boolean::: entry is promise
java.lang.ClassValue.Entry#version()->Version::: entry version
java.lang.ClassValue.Entry#classValueOrNull()->ClassValue::: entry class value or null
java.lang.ClassValue.Entry#isLive()->boolean::: entry is live
java.lang.ClassValue.Entry#refreshVersion(Version)->Entry::: entry refresh version
java.lang.ClassValue#makeEntry(Version, T)->Entry::: class value make entry
java.lang.ClassValue.ClassValueMap#getCache()->Entry[]::: class value map get cache
java.lang.ClassValue.ClassValueMap#startEntry(ClassValue)->Entry:::Initiate a query
java.lang.ClassValue.ClassValueMap#finishEntry(ClassValue, Entry)->Entry:::Finish a query
java.lang.ClassValue.ClassValueMap#removeEntry(ClassValue)->void:::Remove an entry.
java.lang.ClassValue.ClassValueMap#changeEntry(ClassValue, T)->void:::Change the value for an entry.
java.lang.ClassValue.ClassValueMap#loadFromCache(Entry[], int)->Entry:::Load the cache entry at the given (hashed) location.
java.lang.ClassValue.ClassValueMap#probeHomeLocation(Entry[], ClassValue)->Entry:::Look in the cache, at the home location for the given ClassValue.
java.lang.ClassValue.ClassValueMap#probeBackupLocations(Entry[], ClassValue)->Entry:::Given that first probe was a collision, retry at nearby locations.
java.lang.Comparable#compareTo(T)->int:::Compares this object with the specified object for order
java.lang.Compiler#compileClass(Class)->boolean:::Compiles the specified class.
java.lang.Compiler#compileClasses(String)->boolean:::Compiles all classes whose name matches the specified string.
java.lang.Compiler#command(Object)->Object:::Examines the argument type and its fields and perform some documented operation
java.lang.Compiler#enable()->void:::Cause the Compiler to resume operation.
java.lang.Compiler#disable()->void:::Cause the Compiler to cease operation.
java.lang.ConditionalSpecialCasing#toLowerCaseEx(String, int, Locale)->int::: conditional special casing to lower case ex
java.lang.ConditionalSpecialCasing#toUpperCaseEx(String, int, Locale)->int::: conditional special casing to upper case ex
java.lang.ConditionalSpecialCasing#toLowerCaseCharArray(String, int, Locale)->char[]::: conditional special casing to lower case char array
java.lang.ConditionalSpecialCasing#toUpperCaseCharArray(String, int, Locale)->char[]::: conditional special casing to upper case char array
java.lang.ConditionalSpecialCasing.Entry#getCodePoint()->int::: entry get code point
java.lang.ConditionalSpecialCasing.Entry#getLowerCase()->char[]::: entry get lower case
java.lang.ConditionalSpecialCasing.Entry#getUpperCase()->char[]::: entry get upper case
java.lang.ConditionalSpecialCasing.Entry#getLanguage()->String::: entry get language
java.lang.ConditionalSpecialCasing.Entry#getCondition()->int::: entry get condition
java.lang.Double#toString(double)->String:::Returns a string representation of the double argument
java.lang.Double#toHexString(double)->String:::Returns a hexadecimal string representation of the double argument
java.lang.Double#valueOf(String)->Double:::Returns a Double object holding the double value represented by the argument string s
java.lang.Double#valueOf(double)->Double:::Returns a Double instance representing the specified double value
java.lang.Double#parseDouble(String)->double:::Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double.
java.lang.Double#isNaN(double)->boolean:::Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.
java.lang.Double#isInfinite(double)->boolean:::Returns true if the specified number is infinitely large in magnitude, false otherwise.
java.lang.Double#isFinite(double)->boolean:::Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).
java.lang.Double#isNaN()->boolean:::Returns true if this Double value is a Not-a-Number (NaN), false otherwise.
java.lang.Double#isInfinite()->boolean:::Returns true if this Double value is infinitely large in magnitude, false otherwise.
java.lang.Double#toString()->String:::Returns a string representation of this Double object
java.lang.Double#byteValue()->byte:::Returns the value of this Double as a byte after a narrowing primitive conversion.
java.lang.Double#shortValue()->short:::Returns the value of this Double as a short after a narrowing primitive conversion.
java.lang.Double#intValue()->int:::Returns the value of this Double as an int after a narrowing primitive conversion.
java.lang.Double#longValue()->long:::Returns the value of this Double as a long after a narrowing primitive conversion.
java.lang.Double#floatValue()->float:::Returns the value of this Double as a float after a narrowing primitive conversion.
java.lang.Double#doubleValue()->double:::Returns the double value of this Double object.
java.lang.Double#hashCode()->int:::Returns a hash code for this Double object
java.lang.Double#hashCode(double)->int:::Returns a hash code for a double value; compatible with Double.hashCode().
java.lang.Double#equals(Object)->boolean:::Compares this object against the specified object
java.lang.Double#doubleToLongBits(double)->long:::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout
java.lang.Double#doubleToRawLongBits(double)->long:::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout, preserving Not-a-Number (NaN) values
java.lang.Double#longBitsToDouble(long)->double:::Returns the double value corresponding to a given bit representation
java.lang.Double#compareTo(Double)->int:::Compares two Double objects numerically
java.lang.Double#compare(double, double)->int:::Compares the two specified double values
java.lang.Double#sum(double, double)->double:::Adds two double values together as per the + operator.
java.lang.Double#max(double, double)->double:::Returns the greater of two double values as if by calling Math#max(double, double) Math.max.
java.lang.Double#min(double, double)->double:::Returns the smaller of two double values as if by calling Math#min(double, double) Math.min.
java.lang.Enum#name()->String:::Returns the name of this enum constant, exactly as declared in its enum declaration
java.lang.Enum#ordinal()->int:::Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero)
java.lang.Enum#toString()->String:::Returns the name of this enum constant, as contained in the declaration
java.lang.Enum#equals(Object)->boolean:::Returns true if the specified object is equal to this enum constant.
java.lang.Enum#hashCode()->int:::Returns a hash code for this enum constant.
java.lang.Enum#clone()->Object:::Throws CloneNotSupportedException
java.lang.Enum#compareTo(E)->int:::Compares this enum with the specified object for order
java.lang.Enum#getDeclaringClass()->Class:::Returns the Class object corresponding to this enum constant's enum type
java.lang.Enum#valueOf(Class, String)->T:::Returns the enum constant of the specified enum type with the specified name
java.lang.Enum#finalize()->void:::enum classes cannot have finalize methods.
java.lang.EnumConstantNotPresentException#enumType()->Class:::Returns the type of the missing enum constant.
java.lang.EnumConstantNotPresentException#constantName()->String:::Returns the name of the missing enum constant.
java.lang.ExceptionInInitializerError#getException()->Throwable:::Returns the exception that occurred during a static initialization that caused this error to be created
java.lang.ExceptionInInitializerError#getCause()->Throwable:::Returns the cause of this error (the exception that occurred during a static initialization that caused this error to be created).
java.lang.FdLibm.Cbrt#compute(double)->double::: cbrt compute
java.lang.FdLibm.Hypot#compute(double, double)->double::: hypot compute
java.lang.FdLibm.Pow#compute(double, double)->double::: pow compute
java.lang.FdLibm.Exp#compute(double)->double::: exp compute
java.lang.Float#toString(float)->String:::Returns a string representation of the float argument
java.lang.Float#toHexString(float)->String:::Returns a hexadecimal string representation of the float argument
java.lang.Float#valueOf(String)->Float:::Returns a Float object holding the float value represented by the argument string s
java.lang.Float#valueOf(float)->Float:::Returns a Float instance representing the specified float value
java.lang.Float#parseFloat(String)->float:::Returns a new float initialized to the value represented by the specified String, as performed by the valueOf method of class Float.
java.lang.Float#isNaN(float)->boolean:::Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.
java.lang.Float#isInfinite(float)->boolean:::Returns true if the specified number is infinitely large in magnitude, false otherwise.
java.lang.Float#isFinite(float)->boolean:::Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).
java.lang.Float#isNaN()->boolean:::Returns true if this Float value is a Not-a-Number (NaN), false otherwise.
java.lang.Float#isInfinite()->boolean:::Returns true if this Float value is infinitely large in magnitude, false otherwise.
java.lang.Float#toString()->String:::Returns a string representation of this Float object
java.lang.Float#byteValue()->byte:::Returns the value of this Float as a byte after a narrowing primitive conversion.
java.lang.Float#shortValue()->short:::Returns the value of this Float as a short after a narrowing primitive conversion.
java.lang.Float#intValue()->int:::Returns the value of this Float as an int after a narrowing primitive conversion.
java.lang.Float#longValue()->long:::Returns value of this Float as a long after a narrowing primitive conversion.
java.lang.Float#floatValue()->float:::Returns the float value of this Float object.
java.lang.Float#doubleValue()->double:::Returns the value of this Float as a double after a widening primitive conversion.
java.lang.Float#hashCode()->int:::Returns a hash code for this Float object
java.lang.Float#hashCode(float)->int:::Returns a hash code for a float value; compatible with Float.hashCode().
java.lang.Float#equals(Object)->boolean:::Compares this object against the specified object
java.lang.Float#floatToIntBits(float)->int:::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout
java.lang.Float#floatToRawIntBits(float)->int:::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout, preserving Not-a-Number (NaN) values
java.lang.Float#intBitsToFloat(int)->float:::Returns the float value corresponding to a given bit representation
java.lang.Float#compareTo(Float)->int:::Compares two Float objects numerically
java.lang.Float#compare(float, float)->int:::Compares the two specified float values
java.lang.Float#sum(float, float)->float:::Adds two float values together as per the + operator.
java.lang.Float#max(float, float)->float:::Returns the greater of two float values as if by calling Math#max(float, float) Math.max.
java.lang.Float#min(float, float)->float:::Returns the smaller of two float values as if by calling Math#min(float, float) Math.min.
java.lang.InheritableThreadLocal#childValue(T)->T:::Computes the child's initial value for this inheritable thread-local variable as a function of the parent's value at the time the child thread is created
java.lang.InheritableThreadLocal#getMap(Thread)->ThreadLocalMap:::Get the map associated with a ThreadLocal.
java.lang.InheritableThreadLocal#createMap(Thread, T)->void:::Create the map associated with a ThreadLocal.
java.lang.Integer#toString(int, int)->String:::Returns a string representation of the first argument in the radix specified by the second argument
java.lang.Integer#toUnsignedString(int, int)->String:::Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument
java.lang.Integer#toHexString(int)->String:::Returns a string representation of the integer argument as an unsigned integer in base&nbsp;16
java.lang.Integer#toOctalString(int)->String:::Returns a string representation of the integer argument as an unsigned integer in base&nbsp;8
java.lang.Integer#toBinaryString(int)->String:::Returns a string representation of the integer argument as an unsigned integer in base&nbsp;2
java.lang.Integer#formatUnsignedInt(int, int, char[], int, int)->void:::Format an int (treated as unsigned) into a character buffer
java.lang.Integer#formatUnsignedInt(int, int, byte[], int, int)->void:::byte[]/LATIN1 version
java.lang.Integer#toString(int)->String:::Returns a String object representing the specified integer
java.lang.Integer#toUnsignedString(int)->String:::Returns a string representation of the argument as an unsigned decimal value
java.lang.Integer#getChars(int, int, byte[])->int:::Places characters representing the integer i into the character array buf
java.lang.Integer#stringSize(int)->int:::Returns the string representation size for a given int value.
java.lang.Integer#parseInt(String, int)->int:::Parses the string argument as a signed integer in the radix specified by the second argument
java.lang.Integer#parseInt(CharSequence, int, int, int)->int:::Parses the CharSequence argument as a signed int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1
java.lang.Integer#parseInt(String)->int:::Parses the string argument as a signed decimal integer
java.lang.Integer#parseUnsignedInt(String, int)->int:::Parses the string argument as an unsigned integer in the radix specified by the second argument
java.lang.Integer#parseUnsignedInt(CharSequence, int, int, int)->int:::Parses the CharSequence argument as an unsigned int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1
java.lang.Integer#parseUnsignedInt(String)->int:::Parses the string argument as an unsigned decimal integer
java.lang.Integer#valueOf(String, int)->Integer:::Returns an Integer object holding the value extracted from the specified String when parsed with the radix given by the second argument
java.lang.Integer#valueOf(String)->Integer:::Returns an Integer object holding the value of the specified String
java.lang.Integer#valueOf(int)->Integer:::Returns an Integer instance representing the specified int value
java.lang.Integer#byteValue()->byte:::Returns the value of this Integer as a byte after a narrowing primitive conversion.
java.lang.Integer#shortValue()->short:::Returns the value of this Integer as a short after a narrowing primitive conversion.
java.lang.Integer#intValue()->int:::Returns the value of this Integer as an int.
java.lang.Integer#longValue()->long:::Returns the value of this Integer as a long after a widening primitive conversion.
java.lang.Integer#floatValue()->float:::Returns the value of this Integer as a float after a widening primitive conversion.
java.lang.Integer#doubleValue()->double:::Returns the value of this Integer as a double after a widening primitive conversion.
java.lang.Integer#toString()->String:::Returns a String object representing this Integer's value
java.lang.Integer#hashCode()->int:::Returns a hash code for this Integer.
java.lang.Integer#hashCode(int)->int:::Returns a hash code for an int value; compatible with Integer.hashCode().
java.lang.Integer#equals(Object)->boolean:::Compares this object to the specified object
java.lang.Integer#getInteger(String)->Integer:::Determines the integer value of the system property with the specified name
java.lang.Integer#getInteger(String, int)->Integer:::Determines the integer value of the system property with the specified name
java.lang.Integer#getInteger(String, Integer)->Integer:::Returns the integer value of the system property with the specified name
java.lang.Integer#decode(String)->Integer:::Decodes a String into an Integer
java.lang.Integer#compareTo(Integer)->int:::Compares two Integer objects numerically.
java.lang.Integer#compare(int, int)->int:::Compares two int values numerically
java.lang.Integer#compareUnsigned(int, int)->int:::Compares two int values numerically treating the values as unsigned.
java.lang.Integer#toUnsignedLong(int)->long:::Converts the argument to a long by an unsigned conversion
java.lang.Integer#divideUnsigned(int, int)->int:::Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value
java.lang.Integer#remainderUnsigned(int, int)->int:::Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
java.lang.Integer#highestOneBit(int)->int:::Returns an int value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified int value
java.lang.Integer#lowestOneBit(int)->int:::Returns an int value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified int value
java.lang.Integer#numberOfLeadingZeros(int)->int:::Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified int value
java.lang.Integer#numberOfTrailingZeros(int)->int:::Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified int value
java.lang.Integer#bitCount(int)->int:::Returns the number of one-bits in the two's complement binary representation of the specified int value
java.lang.Integer#rotateLeft(int, int)->int:::Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits
java.lang.Integer#rotateRight(int, int)->int:::Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits
java.lang.Integer#reverse(int)->int:::Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value.
java.lang.Integer#signum(int)->int:::Returns the signum function of the specified int value
java.lang.Integer#reverseBytes(int)->int:::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified int value.
java.lang.Integer#sum(int, int)->int:::Adds two integers together as per the + operator.
java.lang.Integer#max(int, int)->int:::Returns the greater of two int values as if by calling Math#max(int, int) Math.max.
java.lang.Integer#min(int, int)->int:::Returns the smaller of two int values as if by calling Math#min(int, int) Math.min.
java.lang.Iterable#iterator()->Iterator:::Returns an iterator over elements of type T.
java.lang.Iterable#forEach(Consumer)->void:::Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception
java.lang.Iterable#spliterator()->Spliterator:::Creates a Spliterator over the elements described by this Iterable.
java.lang.LiveStackFrame#getMonitors()->Object[]:::Return the monitors held by this stack frame
java.lang.LiveStackFrame#getLocals()->Object[]:::Gets the local variable array of this stack frame
java.lang.LiveStackFrame#getStack()->Object[]:::Gets the operand stack of this stack frame
java.lang.LiveStackFrame.PrimitiveSlot#size()->int:::Returns the size, in bytes, of the slot.
java.lang.LiveStackFrame.PrimitiveSlot#intValue()->int:::Returns the int value if this primitive value is of size 4
java.lang.LiveStackFrame.PrimitiveSlot#longValue()->long:::Returns the long value if this primitive value is of size 8
java.lang.LiveStackFrame#getStackWalker()->StackWalker:::Gets StackWalker that can get locals and operands.
java.lang.LiveStackFrame#getStackWalker(Set)->StackWalker:::Gets a StackWalker instance with the given options specifying the stack frame information it can access, and which will traverse at most the given maxDepth number of stack frames
java.lang.LiveStackFrameInfo#getMonitors()->Object[]::: live stack frame info get monitors
java.lang.LiveStackFrameInfo#getLocals()->Object[]::: live stack frame info get locals
java.lang.LiveStackFrameInfo#getStack()->Object[]::: live stack frame info get stack
java.lang.LiveStackFrameInfo#toString()->String::: live stack frame info to string
java.lang.LiveStackFrameInfo#asPrimitive(int)->PrimitiveSlot::: live stack frame info as primitive
java.lang.LiveStackFrameInfo#asPrimitive(long)->PrimitiveSlot::: live stack frame info as primitive
java.lang.Long#toString(long, int)->String:::Returns a string representation of the first argument in the radix specified by the second argument
java.lang.Long#toUnsignedString(long, int)->String:::Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument
java.lang.Long#toHexString(long)->String:::Returns a string representation of the long argument as an unsigned integer in base&nbsp;16
java.lang.Long#toOctalString(long)->String:::Returns a string representation of the long argument as an unsigned integer in base&nbsp;8
java.lang.Long#toBinaryString(long)->String:::Returns a string representation of the long argument as an unsigned integer in base&nbsp;2
java.lang.Long#toUnsignedString0(long, int)->String:::Format a long (treated as unsigned) into a String.
java.lang.Long#formatUnsignedLong0(long, int, byte[], int, int)->void:::byte[]/LATIN1 version
java.lang.Long#fastUUID(long, long)->String::: long fast d
java.lang.Long#toString(long)->String:::Returns a String object representing the specified long
java.lang.Long#toUnsignedString(long)->String:::Returns a string representation of the argument as an unsigned decimal value
java.lang.Long#getChars(long, int, byte[])->int:::Places characters representing the long i into the character array buf
java.lang.Long#stringSize(long)->int:::Returns the string representation size for a given long value.
java.lang.Long#parseLong(String, int)->long:::Parses the string argument as a signed long in the radix specified by the second argument
java.lang.Long#parseLong(CharSequence, int, int, int)->long:::Parses the CharSequence argument as a signed long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1
java.lang.Long#parseLong(String)->long:::Parses the string argument as a signed decimal long
java.lang.Long#parseUnsignedLong(String, int)->long:::Parses the string argument as an unsigned long in the radix specified by the second argument
java.lang.Long#parseUnsignedLong(CharSequence, int, int, int)->long:::Parses the CharSequence argument as an unsigned long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1
java.lang.Long#parseUnsignedLong(String)->long:::Parses the string argument as an unsigned decimal long
java.lang.Long#valueOf(String, int)->Long:::Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument
java.lang.Long#valueOf(String)->Long:::Returns a Long object holding the value of the specified String
java.lang.Long#valueOf(long)->Long:::Returns a Long instance representing the specified long value
java.lang.Long#decode(String)->Long:::Decodes a String into a Long
java.lang.Long#byteValue()->byte:::Returns the value of this Long as a byte after a narrowing primitive conversion.
java.lang.Long#shortValue()->short:::Returns the value of this Long as a short after a narrowing primitive conversion.
java.lang.Long#intValue()->int:::Returns the value of this Long as an int after a narrowing primitive conversion.
java.lang.Long#longValue()->long:::Returns the value of this Long as a long value.
java.lang.Long#floatValue()->float:::Returns the value of this Long as a float after a widening primitive conversion.
java.lang.Long#doubleValue()->double:::Returns the value of this Long as a double after a widening primitive conversion.
java.lang.Long#toString()->String:::Returns a String object representing this Long's value
java.lang.Long#hashCode()->int:::Returns a hash code for this Long
java.lang.Long#hashCode(long)->int:::Returns a hash code for a long value; compatible with Long.hashCode().
java.lang.Long#equals(Object)->boolean:::Compares this object to the specified object
java.lang.Long#getLong(String)->Long:::Determines the long value of the system property with the specified name
java.lang.Long#getLong(String, long)->Long:::Determines the long value of the system property with the specified name
java.lang.Long#getLong(String, Long)->Long:::Returns the long value of the system property with the specified name
java.lang.Long#compareTo(Long)->int:::Compares two Long objects numerically.
java.lang.Long#compare(long, long)->int:::Compares two long values numerically
java.lang.Long#compareUnsigned(long, long)->int:::Compares two long values numerically treating the values as unsigned.
java.lang.Long#divideUnsigned(long, long)->long:::Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value
java.lang.Long#remainderUnsigned(long, long)->long:::Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.
java.lang.Long#highestOneBit(long)->long:::Returns a long value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified long value
java.lang.Long#lowestOneBit(long)->long:::Returns a long value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified long value
java.lang.Long#numberOfLeadingZeros(long)->int:::Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified long value
java.lang.Long#numberOfTrailingZeros(long)->int:::Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified long value
java.lang.Long#bitCount(long)->int:::Returns the number of one-bits in the two's complement binary representation of the specified long value
java.lang.Long#rotateLeft(long, int)->long:::Returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits
java.lang.Long#rotateRight(long, int)->long:::Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits
java.lang.Long#reverse(long)->long:::Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified long value.
java.lang.Long#signum(long)->int:::Returns the signum function of the specified long value
java.lang.Long#reverseBytes(long)->long:::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified long value.
java.lang.Long#sum(long, long)->long:::Adds two long values together as per the + operator.
java.lang.Long#max(long, long)->long:::Returns the greater of two long values as if by calling Math#max(long, long) Math.max.
java.lang.Long#min(long, long)->long:::Returns the smaller of two long values as if by calling Math#min(long, long) Math.min.
java.lang.Math#sin(double)->double:::Returns the trigonometric sine of an angle
java.lang.Math#cos(double)->double:::Returns the trigonometric cosine of an angle
java.lang.Math#tan(double)->double:::Returns the trigonometric tangent of an angle
java.lang.Math#asin(double)->double:::Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2
java.lang.Math#acos(double)->double:::Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi
java.lang.Math#atan(double)->double:::Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2
java.lang.Math#toRadians(double)->double:::Converts an angle measured in degrees to an approximately equivalent angle measured in radians
java.lang.Math#toDegrees(double)->double:::Converts an angle measured in radians to an approximately equivalent angle measured in degrees
java.lang.Math#exp(double)->double:::Returns Euler's number e raised to the power of a double value
java.lang.Math#log(double)->double:::Returns the natural logarithm (base e) of a double value
java.lang.Math#log10(double)->double:::Returns the base 10 logarithm of a double value
java.lang.Math#sqrt(double)->double:::Returns the correctly rounded positive square root of a double value
java.lang.Math#cbrt(double)->double:::Returns the cube root of a double value
java.lang.Math#IEEEremainder(double, double)->double:::Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard
java.lang.Math#ceil(double)->double:::Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer
java.lang.Math#floor(double)->double:::Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer
java.lang.Math#rint(double)->double:::Returns the double value that is closest in value to the argument and is equal to a mathematical integer
java.lang.Math#atan2(double, double)->double:::Returns the angle theta from the conversion of rectangular coordinates (x,&nbsp;y) to polar coordinates (r,&nbsp;theta)
java.lang.Math#pow(double, double)->double:::Returns the value of the first argument raised to the power of the second argument
java.lang.Math#round(float)->int:::Returns the closest int to the argument, with ties rounding to positive infinity
java.lang.Math#round(double)->long:::Returns the closest long to the argument, with ties rounding to positive infinity
java.lang.Math#random()->double:::Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0
java.lang.Math#addExact(int, int)->int:::Returns the sum of its arguments, throwing an exception if the result overflows an int.
java.lang.Math#addExact(long, long)->long:::Returns the sum of its arguments, throwing an exception if the result overflows a long.
java.lang.Math#subtractExact(int, int)->int:::Returns the difference of the arguments, throwing an exception if the result overflows an int.
java.lang.Math#subtractExact(long, long)->long:::Returns the difference of the arguments, throwing an exception if the result overflows a long.
java.lang.Math#multiplyExact(int, int)->int:::Returns the product of the arguments, throwing an exception if the result overflows an int.
java.lang.Math#multiplyExact(long, int)->long:::Returns the product of the arguments, throwing an exception if the result overflows a long.
java.lang.Math#multiplyExact(long, long)->long:::Returns the product of the arguments, throwing an exception if the result overflows a long.
java.lang.Math#incrementExact(int)->int:::Returns the argument incremented by one, throwing an exception if the result overflows an int.
java.lang.Math#incrementExact(long)->long:::Returns the argument incremented by one, throwing an exception if the result overflows a long.
java.lang.Math#decrementExact(int)->int:::Returns the argument decremented by one, throwing an exception if the result overflows an int.
java.lang.Math#decrementExact(long)->long:::Returns the argument decremented by one, throwing an exception if the result overflows a long.
java.lang.Math#negateExact(int)->int:::Returns the negation of the argument, throwing an exception if the result overflows an int.
java.lang.Math#negateExact(long)->long:::Returns the negation of the argument, throwing an exception if the result overflows a long.
java.lang.Math#toIntExact(long)->int:::Returns the value of the long argument; throwing an exception if the value overflows an int.
java.lang.Math#multiplyFull(int, int)->long:::Returns the exact mathematical product of the arguments.
java.lang.Math#multiplyHigh(long, long)->long:::Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors.
java.lang.Math#floorDiv(int, int)->int:::Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient
java.lang.Math#floorDiv(long, int)->long:::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient
java.lang.Math#floorDiv(long, long)->long:::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient
java.lang.Math#floorMod(int, int)->int:::Returns the floor modulus of the int arguments
java.lang.Math#floorMod(long, int)->int:::Returns the floor modulus of the long and int arguments
java.lang.Math#floorMod(long, long)->long:::Returns the floor modulus of the long arguments
java.lang.Math#abs(int)->int:::Returns the absolute value of an int value
java.lang.Math#abs(long)->long:::Returns the absolute value of a long value
java.lang.Math#abs(float)->float:::Returns the absolute value of a float value
java.lang.Math#abs(double)->double:::Returns the absolute value of a double value
java.lang.Math#max(int, int)->int:::Returns the greater of two int values
java.lang.Math#max(long, long)->long:::Returns the greater of two long values
java.lang.Math#max(float, float)->float:::Returns the greater of two float values
java.lang.Math#max(double, double)->double:::Returns the greater of two double values
java.lang.Math#min(int, int)->int:::Returns the smaller of two int values
java.lang.Math#min(long, long)->long:::Returns the smaller of two long values
java.lang.Math#min(float, float)->float:::Returns the smaller of two float values
java.lang.Math#min(double, double)->double:::Returns the smaller of two double values
java.lang.Math#fma(double, double, double)->double:::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double
java.lang.Math#fma(float, float, float)->float:::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float
java.lang.Math#ulp(double)->double:::Returns the size of an ulp of the argument
java.lang.Math#ulp(float)->float:::Returns the size of an ulp of the argument
java.lang.Math#signum(double)->double:::Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero
java.lang.Math#signum(float)->float:::Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero
java.lang.Math#sinh(double)->double:::Returns the hyperbolic sine of a double value
java.lang.Math#cosh(double)->double:::Returns the hyperbolic cosine of a double value
java.lang.Math#tanh(double)->double:::Returns the hyperbolic tangent of a double value
java.lang.Math#hypot(double, double)->double:::Returns sqrt(x^2&nbsp;+y^2) without intermediate overflow or underflow
java.lang.Math#expm1(double)->double:::Returns e^x&nbsp;-1
java.lang.Math#log1p(double)->double:::Returns the natural logarithm of the sum of the argument and 1
java.lang.Math#copySign(double, double)->double:::Returns the first floating-point argument with the sign of the second floating-point argument
java.lang.Math#copySign(float, float)->float:::Returns the first floating-point argument with the sign of the second floating-point argument
java.lang.Math#getExponent(float)->int:::Returns the unbiased exponent used in the representation of a float
java.lang.Math#getExponent(double)->int:::Returns the unbiased exponent used in the representation of a double
java.lang.Math#nextAfter(double, double)->double:::Returns the floating-point number adjacent to the first argument in the direction of the second argument
java.lang.Math#nextAfter(float, double)->float:::Returns the floating-point number adjacent to the first argument in the direction of the second argument
java.lang.Math#nextUp(double)->double:::Returns the floating-point value adjacent to d in the direction of positive infinity
java.lang.Math#nextUp(float)->float:::Returns the floating-point value adjacent to f in the direction of positive infinity
java.lang.Math#nextDown(double)->double:::Returns the floating-point value adjacent to d in the direction of negative infinity
java.lang.Math#nextDown(float)->float:::Returns the floating-point value adjacent to f in the direction of negative infinity
java.lang.Math#scalb(double, int)->double:::Returns d &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set
java.lang.Math#scalb(float, int)->float:::Returns f &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set
java.lang.Math#powerOfTwoD(int)->double:::Returns a floating-point power of two in the normal range.
java.lang.Math#powerOfTwoF(int)->float:::Returns a floating-point power of two in the normal range.
java.lang.Module#isNamed()->boolean:::Returns true if this module is a named module.
java.lang.Module#getName()->String:::Returns the module name or null if this module is an unnamed module.
java.lang.Module#getClassLoader()->ClassLoader:::Returns the ClassLoader for this module
java.lang.Module#getDescriptor()->ModuleDescriptor:::Returns the module descriptor for this module or null if this module is an unnamed module.
java.lang.Module#getLayer()->ModuleLayer:::Returns the module layer that contains this module or null if this module is not in a module layer
java.lang.Module#canRead(Module)->boolean:::Indicates if this module reads the given module
java.lang.Module#addReads(Module)->Module:::If the caller's module is this module then update this module to read the given module
java.lang.Module#implAddReads(Module)->void:::Updates this module to read another module.
java.lang.Module#implAddReadsAllUnnamed()->void:::Updates this module to read all unnamed modules.
java.lang.Module#implAddReadsNoSync(Module)->void:::Updates this module to read another module without notifying the VM.
java.lang.Module#isExported(String, Module)->boolean:::Returns true if this module exports the given package to at least the given module
java.lang.Module#isOpen(String, Module)->boolean:::Returns true if this module has opened a package to at least the given module
java.lang.Module#isExported(String)->boolean:::Returns true if this module exports the given package unconditionally
java.lang.Module#isOpen(String)->boolean:::Returns true if this module has opened a package unconditionally
java.lang.Module#isReflectivelyExported(String, Module)->boolean:::Returns true if this module reflectively exports the given package to the given module.
java.lang.Module#isReflectivelyOpened(String, Module)->boolean:::Returns true if this module reflectively opens the given package to the given module.
java.lang.Module#addExports(String, Module)->Module:::If the caller's module is this module then update this module to export the given package to the given module
java.lang.Module#addOpens(String, Module)->Module:::If this module has opened a package to at least the caller module then update this module to open the package to the given module
java.lang.Module#implAddExports(String)->void:::Updates this module to export a package unconditionally.
java.lang.Module#implAddExports(String, Module)->void:::Updates this module to export a package to another module.
java.lang.Module#implAddExportsToAllUnnamed(String)->void:::Updates this module to export a package to all unnamed modules.
java.lang.Module#implAddExportsNoSync(String)->void:::Updates this export to export a package unconditionally without notifying the VM.
java.lang.Module#implAddExportsNoSync(String, Module)->void:::Updates a module to export a package to another module without notifying the VM.
java.lang.Module#implAddOpens(String)->void:::Updates this module to open a package unconditionally.
java.lang.Module#implAddOpens(String, Module)->void:::Updates this module to open a package to another module.
java.lang.Module#implAddOpensToAllUnnamed(String)->void:::Updates this module to open a package to all unnamed modules.
java.lang.Module#implAddOpensToAllUnnamed(Iterator)->void:::Updates a module to open all packages returned by the given iterator to all unnamed modules.
java.lang.Module#addUses(Class)->Module:::If the caller's module is this module then update this module to add a service dependence on the given service type
java.lang.Module#implAddUses(Class)->void:::Update this module to add a service dependence on the given service type.
java.lang.Module#canUse(Class)->boolean:::Indicates if this module has a service dependence on the given service type
java.lang.Module#getPackages()->Set:::Returns the set of package names for the packages in this module
java.lang.Module#defineModules(Configuration, Function, ModuleLayer)->Map:::Defines all module in a configuration to the runtime.
java.lang.Module#getAnnotation(Class)->T:::This method returns {@code null when invoked on an unnamed module.
java.lang.Module#getAnnotations()->Annotation[]::: This method returns an empty array when invoked on an unnamed module.
java.lang.Module#getDeclaredAnnotations()->Annotation[]::: This method returns an empty array when invoked on an unnamed module.
java.lang.Module#getResourceAsStream(String)->InputStream:::Returns an input stream for reading a resource in this module
java.lang.Module#toString()->String:::Returns the string representation of this module
java.lang.ModuleLayer.Controller#layer()->ModuleLayer:::Returns the layer that this object controls.
java.lang.ModuleLayer.Controller#addReads(Module, Module)->Controller:::Updates module source in the layer to read module target
java.lang.ModuleLayer.Controller#addExports(Module, String, Module)->Controller:::Updates module source in the layer to export a package to module target
java.lang.ModuleLayer.Controller#addOpens(Module, String, Module)->Controller:::Updates module source in the layer to open a package to module target
java.lang.ModuleLayer#defineModulesWithOneLoader(Configuration, ClassLoader)->ModuleLayer:::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine
java.lang.ModuleLayer#defineModulesWithManyLoaders(Configuration, ClassLoader)->ModuleLayer:::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine
java.lang.ModuleLayer#defineModules(Configuration, Function)->ModuleLayer:::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine
java.lang.ModuleLayer#defineModulesWithOneLoader(Configuration, List, ClassLoader)->Controller:::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine
java.lang.ModuleLayer#defineModulesWithManyLoaders(Configuration, List, ClassLoader)->Controller:::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine
java.lang.ModuleLayer#defineModules(Configuration, List, Function)->Controller:::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine
java.lang.ModuleLayer#configuration()->Configuration:::Returns the configuration for this layer.
java.lang.ModuleLayer#parents()->List:::Returns the list of this layer's parents unless this is the #empty empty layer, which has no parents and so an empty list is returned.
java.lang.ModuleLayer#layers()->Stream:::Returns an ordered stream of layers
java.lang.ModuleLayer#modules()->Set:::Returns the set of the modules in this layer.
java.lang.ModuleLayer#findModule(String)->Optional:::Returns the module with the given name in this layer, or if not in this layer, the #parents() parent layers
java.lang.ModuleLayer#findLoader(String)->ClassLoader:::Returns the ClassLoader for the module with the given name
java.lang.ModuleLayer#toString()->String:::Returns a string describing this module layer.
java.lang.ModuleLayer#empty()->ModuleLayer:::Returns the empty layer
java.lang.ModuleLayer#boot()->ModuleLayer:::Returns the boot layer
java.lang.ModuleLayer#getServicesCatalog()->ServicesCatalog:::Returns the ServicesCatalog for this Layer, creating it if not already created.
java.lang.ModuleLayer#bindToLoader(ClassLoader)->void:::Record that this layer has at least one module defined to the given class loader.
java.lang.ModuleLayer#layers(ClassLoader)->Stream:::Returns a stream of the layers that have at least one module defined to the given class loader.
java.lang.NamedPackage#packageName()->String:::Returns the name of this package.
java.lang.NamedPackage#module()->Module:::Returns the module of this named package.
java.lang.NamedPackage#location()->URI:::Returns the location of the module if this named package is in a named module; otherwise, returns null.
java.lang.NamedPackage#toPackage(String, Module)->Package:::Creates a Package object of the given name and module.
java.lang.Number#intValue()->int:::Returns the value of the specified number as an int.
java.lang.Number#longValue()->long:::Returns the value of the specified number as a long.
java.lang.Number#floatValue()->float:::Returns the value of the specified number as a float.
java.lang.Number#doubleValue()->double:::Returns the value of the specified number as a double.
java.lang.Number#byteValue()->byte:::Returns the value of the specified number as a byte
java.lang.Number#shortValue()->short:::Returns the value of the specified number as a short
java.lang.NumberFormatException#forInputString(String)->NumberFormatException:::Factory method for making a NumberFormatException given the specified input which caused the error.
java.lang.NumberFormatException#forCharSequence(CharSequence, int, int, int)->NumberFormatException:::Factory method for making a NumberFormatException given the specified input which caused the error.
java.lang.Object#getClass()->Class:::Returns the runtime class of this Object
java.lang.Object#hashCode()->int:::Returns a hash code value for the object
java.lang.Object#equals(Object)->boolean:::Indicates whether some other object is "equal to" this one
java.lang.Object#clone()->Object:::Creates and returns a copy of this object
java.lang.Object#toString()->String:::Returns a string representation of the object
java.lang.Object#notify()->void:::Wakes up a single thread that is waiting on this object's monitor
java.lang.Object#notifyAll()->void:::Wakes up all threads that are waiting on this object's monitor
java.lang.Object#wait()->void:::Causes the current thread to wait until it is awakened, typically by being notified or interrupted
java.lang.Object#wait(long)->void:::Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed
java.lang.Object#wait(long, int)->void:::Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed
java.lang.Object#finalize()->void:::Called by the garbage collector on an object when garbage collection determines that there are no more references to the object
java.lang.Package#getName()->String:::Return the name of this package.
java.lang.Package#getSpecificationTitle()->String:::Return the title of the specification that this package implements.
java.lang.Package#getSpecificationVersion()->String:::Returns the version number of the specification that this package implements
java.lang.Package#getSpecificationVendor()->String:::Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package.
java.lang.Package#getImplementationTitle()->String:::Return the title of this package.
java.lang.Package#getImplementationVersion()->String:::Return the version of this implementation
java.lang.Package#getImplementationVendor()->String:::Returns the vendor that implemented this package, null is returned if it is not known.
java.lang.Package#isSealed()->boolean:::Returns true if this package is sealed.
java.lang.Package#isSealed(URL)->boolean:::Returns true if this package is sealed with respect to the specified code source url.
java.lang.Package#isCompatibleWith(String)->boolean:::Compare this package's specification version with a desired version
java.lang.Package#getPackage(String)->Package:::Finds a package by name in the caller's class loader and its ancestors
java.lang.Package#getPackages()->Package[]:::Returns all of the Packages defined by the caller's class loader and its ancestors
java.lang.Package#hashCode()->int:::Return the hash code computed from the package name.
java.lang.Package#toString()->String:::Returns the string representation of this Package
java.lang.Package#getAnnotation(Class)->A::: package get annotation
java.lang.Package#isAnnotationPresent(Class)->boolean::: package is annotation present
java.lang.Package#getAnnotationsByType(Class)->A[]::: package get annotations by type
java.lang.Package#getAnnotations()->Annotation[]::: package get annotations
java.lang.Package#getDeclaredAnnotation(Class)->A::: package get declared annotation
java.lang.Package#getDeclaredAnnotationsByType(Class)->A[]::: package get declared annotations by type
java.lang.Package#getDeclaredAnnotations()->Annotation[]::: package get declared annotations
java.lang.Package.VersionInfo#getInstance(String, String, String, String, String, String, URL)->VersionInfo::: version info get instance
java.lang.Process#getOutputStream()->OutputStream:::Returns the output stream connected to the normal input of the process
java.lang.Process#getInputStream()->InputStream:::Returns the input stream connected to the normal output of the process
java.lang.Process#getErrorStream()->InputStream:::Returns the input stream connected to the error output of the process
java.lang.Process#waitFor()->int:::Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated
java.lang.Process#waitFor(long, TimeUnit)->boolean:::Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated, or the specified waiting time elapses
java.lang.Process#exitValue()->int:::Returns the exit value for the process.
java.lang.Process#destroy()->void:::Kills the process
java.lang.Process#destroyForcibly()->Process:::Kills the process forcibly
java.lang.Process#supportsNormalTermination()->boolean:::Returns true if the implementation of #destroy is to normally terminate the process, Returns false if the implementation of destroy forcibly and immediately terminates the process
java.lang.Process#isAlive()->boolean:::Tests whether the process represented by this Process is alive.
java.lang.Process#pid()->long:::Returns the native process ID of the process
java.lang.Process#onExit()->CompletableFuture:::Returns a CompletableFuture<Process> for the termination of the Process
java.lang.Process#toHandle()->ProcessHandle:::Returns a ProcessHandle for the Process
java.lang.Process#info()->ProcessHandle.Info:::Returns a snapshot of information about the process
java.lang.Process#children()->Stream:::Returns a snapshot of the direct children of the process
java.lang.Process#descendants()->Stream:::Returns a snapshot of the descendants of the process
java.lang.Process.PipeInputStream#skip(long)->long::: pipe input stream skip
java.lang.ProcessBuilder#command(List)->ProcessBuilder:::Sets this process builder's operating system program and arguments
java.lang.ProcessBuilder#command(String...)->ProcessBuilder:::Sets this process builder's operating system program and arguments
java.lang.ProcessBuilder#command()->List:::Returns this process builder's operating system program and arguments
java.lang.ProcessBuilder#environment()->Map:::Returns a string map view of this process builder's environment
java.lang.ProcessBuilder#environment(String[])->ProcessBuilder::: process builder environment
java.lang.ProcessBuilder#directory()->File:::Returns this process builder's working directory
java.lang.ProcessBuilder#directory(File)->ProcessBuilder:::Sets this process builder's working directory
java.lang.ProcessBuilder.NullInputStream#read()->int::: null input stream read
java.lang.ProcessBuilder.NullInputStream#available()->int::: null input stream available
java.lang.ProcessBuilder.NullOutputStream#write(int)->void::: null output stream write
java.lang.ProcessBuilder.Redirect#type()->Type:::Returns the type of this Redirect.
java.lang.ProcessBuilder.Redirect#file()->File:::Returns the File source or destination associated with this redirect, or null if there is no such file.
java.lang.ProcessBuilder.Redirect#append()->boolean:::When redirected to a destination file, indicates if the output is to be written to the end of the file.
java.lang.ProcessBuilder.Redirect#from(File)->Redirect:::Returns a redirect to read from the specified file
java.lang.ProcessBuilder.Redirect#to(File)->Redirect:::Returns a redirect to write to the specified file
java.lang.ProcessBuilder.Redirect#appendTo(File)->Redirect:::Returns a redirect to append to the specified file
java.lang.ProcessBuilder.Redirect#equals(Object)->boolean:::Compares the specified object with this Redirect for equality
java.lang.ProcessBuilder.Redirect#hashCode()->int:::Returns a hash code value for this Redirect.
java.lang.ProcessBuilder.RedirectPipeImpl#type()->Type::: redirect pipe impl type
java.lang.ProcessBuilder.RedirectPipeImpl#toString()->String::: redirect pipe impl to string
java.lang.ProcessBuilder.RedirectPipeImpl#getFd()->FileDescriptor::: redirect pipe impl get fd
java.lang.ProcessBuilder#redirectInput(Redirect)->ProcessBuilder:::Sets this process builder's standard input source
java.lang.ProcessBuilder#redirectOutput(Redirect)->ProcessBuilder:::Sets this process builder's standard output destination
java.lang.ProcessBuilder#redirectError(Redirect)->ProcessBuilder:::Sets this process builder's standard error destination
java.lang.ProcessBuilder#redirectInput(File)->ProcessBuilder:::Sets this process builder's standard input source to a file
java.lang.ProcessBuilder#redirectOutput(File)->ProcessBuilder:::Sets this process builder's standard output destination to a file
java.lang.ProcessBuilder#redirectError(File)->ProcessBuilder:::Sets this process builder's standard error destination to a file
java.lang.ProcessBuilder#redirectInput()->Redirect:::Returns this process builder's standard input source
java.lang.ProcessBuilder#redirectOutput()->Redirect:::Returns this process builder's standard output destination
java.lang.ProcessBuilder#redirectError()->Redirect:::Returns this process builder's standard error destination
java.lang.ProcessBuilder#inheritIO()->ProcessBuilder:::Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process
java.lang.ProcessBuilder#redirectErrorStream()->boolean:::Tells whether this process builder merges standard error and standard output
java.lang.ProcessBuilder#redirectErrorStream(boolean)->ProcessBuilder:::Sets this process builder's redirectErrorStream property
java.lang.ProcessBuilder#start()->Process:::Starts a new process using the attributes of this process builder
java.lang.ProcessBuilder#startPipeline(List)->List:::Starts a Process for each ProcessBuilder, creating a pipeline of processes linked by their standard output and standard input streams
java.lang.ProcessEnvironment#put(String, String)->String::: process environment put
java.lang.ProcessEnvironment#get(Object)->String::: process environment get
java.lang.ProcessEnvironment#containsKey(Object)->boolean::: process environment contains key
java.lang.ProcessEnvironment#containsValue(Object)->boolean::: process environment contains value
java.lang.ProcessEnvironment#remove(Object)->String::: process environment remove
java.lang.ProcessEnvironment#keySet()->Set::: process environment key set
java.lang.ProcessEnvironment#values()->Collection::: process environment values
java.lang.ProcessEnvironment#entrySet()->Set>::: process environment entry set
java.lang.ProcessEnvironment#getenv(String)->String::: process environment getenv
java.lang.ProcessEnvironment#getenv()->Map::: process environment getenv
java.lang.ProcessEnvironment#environment()->Map::: process environment environment
java.lang.ProcessEnvironment#emptyEnvironment(int)->Map::: process environment empty environment
java.lang.ProcessEnvironment#toEnvironmentBlock()->String::: process environment to environment block
java.lang.ProcessEnvironment#toEnvironmentBlock(Map)->String::: process environment to environment block
java.lang.ProcessHandle#pid()->long:::Returns the native process ID of the process
java.lang.ProcessHandle#of(long)->Optional:::Returns an Optional<ProcessHandle> for an existing native process.
java.lang.ProcessHandle#current()->ProcessHandle:::Returns a ProcessHandle for the current process
java.lang.ProcessHandle#parent()->Optional:::Returns an Optional<ProcessHandle> for the parent process
java.lang.ProcessHandle#children()->Stream:::Returns a snapshot of the current direct children of the process
java.lang.ProcessHandle#descendants()->Stream:::Returns a snapshot of the descendants of the process
java.lang.ProcessHandle#allProcesses()->Stream:::Returns a snapshot of all processes visible to the current process
java.lang.ProcessHandle#info()->Info:::Returns a snapshot of information about the process
java.lang.ProcessHandle.Info#command()->Optional:::Returns the executable pathname of the process.
java.lang.ProcessHandle.Info#commandLine()->Optional:::Returns the command line of the process
java.lang.ProcessHandle.Info#arguments()->Optional:::Returns an array of Strings of the arguments of the process.
java.lang.ProcessHandle.Info#startInstant()->Optional:::Returns the start time of the process.
java.lang.ProcessHandle.Info#totalCpuDuration()->Optional:::Returns the total cputime accumulated of the process.
java.lang.ProcessHandle.Info#user()->Optional:::Return the user of the process.
java.lang.ProcessHandle#onExit()->CompletableFuture:::Returns a CompletableFuture<ProcessHandle> for the termination of the process
java.lang.ProcessHandle#supportsNormalTermination()->boolean:::Returns true if the implementation of #destroy normally terminates the process
java.lang.ProcessHandle#destroy()->boolean:::Requests the process to be killed
java.lang.ProcessHandle#destroyForcibly()->boolean:::Requests the process to be killed forcibly
java.lang.ProcessHandle#isAlive()->boolean:::Tests whether the process represented by this ProcessHandle is alive
java.lang.ProcessHandle#hashCode()->int:::Returns a hash code value for this ProcessHandle
java.lang.ProcessHandle#equals(Object)->boolean:::Returns true if other object is non-null, is of the same implementation, and represents the same system process; otherwise it returns false.
java.lang.ProcessHandle#compareTo(ProcessHandle)->int:::Compares this ProcessHandle with the specified ProcessHandle for order
java.lang.ProcessHandleImpl#completion(long, boolean)->CompletableFuture:::Returns a CompletableFuture that completes with process exit status when the process completes.
java.lang.ProcessHandleImpl#onExit()->CompletableFuture::: process handle impl on exit
java.lang.ProcessHandleImpl#get(long)->Optional:::Returns a ProcessHandle for an existing native process.
java.lang.ProcessHandleImpl#getInternal(long)->ProcessHandleImpl:::Returns a ProcessHandle for an existing native process known to be alive
java.lang.ProcessHandleImpl#pid()->long:::Returns the native process ID
java.lang.ProcessHandleImpl#current()->ProcessHandleImpl:::Returns the ProcessHandle for the current native process.
java.lang.ProcessHandleImpl#parent()->Optional:::Returns a ProcessHandle for the parent process.
java.lang.ProcessHandleImpl#destroyProcess(boolean)->boolean:::Destroy the process for this ProcessHandle
java.lang.ProcessHandleImpl#destroy()->boolean::: process handle impl destroy
java.lang.ProcessHandleImpl#destroyForcibly()->boolean::: process handle impl destroy forcibly
java.lang.ProcessHandleImpl#supportsNormalTermination()->boolean::: process handle impl supports normal termination
java.lang.ProcessHandleImpl#isAlive()->boolean:::Tests whether the process represented by this ProcessHandle is alive.
java.lang.ProcessHandleImpl#children()->Stream::: process handle impl children
java.lang.ProcessHandleImpl#children(long)->Stream:::Returns a Stream of the children of a process or all processes.
java.lang.ProcessHandleImpl#descendants()->Stream::: process handle impl descendants
java.lang.ProcessHandleImpl#info()->ProcessHandle.Info::: process handle impl info
java.lang.ProcessHandleImpl#compareTo(ProcessHandle)->int::: process handle impl compare to
java.lang.ProcessHandleImpl#toString()->String::: process handle impl to string
java.lang.ProcessHandleImpl#hashCode()->int::: process handle impl hash code
java.lang.ProcessHandleImpl#equals(Object)->boolean::: process handle impl equals
java.lang.ProcessHandleImpl.Info#info(long, long)->ProcessHandle.Info:::Returns the Info object with the fields from the process
java.lang.ProcessHandleImpl.Info#command()->Optional::: info command
java.lang.ProcessHandleImpl.Info#commandLine()->Optional::: info command line
java.lang.ProcessHandleImpl.Info#arguments()->Optional::: info arguments
java.lang.ProcessHandleImpl.Info#startInstant()->Optional::: info start instant
java.lang.ProcessHandleImpl.Info#totalCpuDuration()->Optional::: info total cpu duration
java.lang.ProcessHandleImpl.Info#user()->Optional::: info user
java.lang.ProcessHandleImpl.Info#toString()->String::: info to string
java.lang.ProcessImpl#start(String[], java.util.Map, String, ProcessBuilder.Redirect[], boolean)->Process::: process impl start
java.lang.ProcessImpl#getOutputStream()->OutputStream::: process impl get output stream
java.lang.ProcessImpl#getInputStream()->InputStream::: process impl get input stream
java.lang.ProcessImpl#getErrorStream()->InputStream::: process impl get error stream
java.lang.ProcessImpl#exitValue()->int::: process impl exit value
java.lang.ProcessImpl#waitFor()->int::: process impl wait for
java.lang.ProcessImpl#waitFor(long, TimeUnit)->boolean::: process impl wait for
java.lang.ProcessImpl#destroy()->void::: process impl destroy
java.lang.ProcessImpl#onExit()->CompletableFuture::: process impl on exit
java.lang.ProcessImpl#toHandle()->ProcessHandle::: process impl to handle
java.lang.ProcessImpl#supportsNormalTermination()->boolean::: process impl supports normal termination
java.lang.ProcessImpl#destroyForcibly()->Process::: process impl destroy forcibly
java.lang.ProcessImpl#pid()->long::: process impl pid
java.lang.ProcessImpl#isAlive()->boolean::: process impl is alive
java.lang.ProcessImpl#toString()->String:::The toString method returns a string consisting of the native process ID of the process and the exit value of the process.
java.lang.PublicMethods#merge(Method)->void:::Merges new method with existing methods
java.lang.PublicMethods#toArray()->Method[]:::Dumps methods to array.
java.lang.PublicMethods.MethodList#filter(Method[], String, Class[], boolean)->MethodList::: method list filter
java.lang.PublicMethods.MethodList#merge(MethodList, MethodList)->MethodList:::This method should only be called with the head (possibly null) of a list of Method(s) that share the same (method name, parameter types) and another methodList that also contains Method(s) with the same and equal (method name, parameter types) as the 1st list
java.lang.PublicMethods.MethodList#getMostSpecific()->Method::: method list get most specific
java.lang.Readable#read(java.nio.CharBuffer)->int:::Attempts to read characters into the specified character buffer
java.lang.Runnable#run()->void:::When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread
java.lang.Runtime#getRuntime()->Runtime:::Returns the runtime object associated with the current Java application
java.lang.Runtime#exit(int)->void:::Terminates the currently running Java virtual machine by initiating its shutdown sequence
java.lang.Runtime#addShutdownHook(Thread)->void:::Registers a new virtual-machine shutdown hook
java.lang.Runtime#removeShutdownHook(Thread)->boolean:::De-registers a previously-registered virtual-machine shutdown hook.
java.lang.Runtime#halt(int)->void:::Forcibly terminates the currently running Java virtual machine
java.lang.Runtime#exec(String)->Process:::Executes the specified string command in a separate process
java.lang.Runtime#exec(String, String[])->Process:::Executes the specified string command in a separate process with the specified environment
java.lang.Runtime#exec(String, String[], File)->Process:::Executes the specified string command in a separate process with the specified environment and working directory
java.lang.Runtime#exec(String[])->Process:::Executes the specified command and arguments in a separate process
java.lang.Runtime#exec(String[], String[])->Process:::Executes the specified command and arguments in a separate process with the specified environment
java.lang.Runtime#exec(String[], String[], File)->Process:::Executes the specified command and arguments in a separate process with the specified environment and working directory
java.lang.Runtime#availableProcessors()->int:::Returns the number of processors available to the Java virtual machine
java.lang.Runtime#freeMemory()->long:::Returns the amount of free memory in the Java Virtual Machine
java.lang.Runtime#totalMemory()->long:::Returns the total amount of memory in the Java virtual machine
java.lang.Runtime#maxMemory()->long:::Returns the maximum amount of memory that the Java virtual machine will attempt to use
java.lang.Runtime#gc()->void:::Runs the garbage collector
java.lang.Runtime#runFinalization()->void:::Runs the finalization methods of any objects pending finalization
java.lang.Runtime#traceInstructions(boolean)->void:::Not implemented, does nothing.
java.lang.Runtime#traceMethodCalls(boolean)->void:::Not implemented, does nothing.
java.lang.Runtime#load(String)->void:::Loads the native library specified by the filename argument
java.lang.Runtime#load0(Class, String)->void::: runtime load0
java.lang.Runtime#loadLibrary(String)->void:::Loads the native library specified by the libname argument
java.lang.Runtime#loadLibrary0(Class, String)->void::: runtime load library0
java.lang.Runtime#version()->Version:::Returns the version of the Java Runtime Environment as a Version.
java.lang.Runtime.Version#parse(String)->Version:::Parses the given string as a valid version string containing a version number followed by pre-release and build information.
java.lang.Runtime.Version#feature()->int:::Returns the value of the feature element of the version number.
java.lang.Runtime.Version#interim()->int:::Returns the value of the interim element of the version number, or zero if it is absent.
java.lang.Runtime.Version#update()->int:::Returns the value of the update element of the version number, or zero if it is absent.
java.lang.Runtime.Version#patch()->int:::Returns the value of the patch element of the version number, or zero if it is absent.
java.lang.Runtime.Version#major()->int:::Returns the value of the major element of the version number.
java.lang.Runtime.Version#minor()->int:::Returns the value of the minor element of the version number, or zero if it is absent.
java.lang.Runtime.Version#security()->int:::Returns the value of the security element of the version number, or zero if it is absent.
java.lang.Runtime.Version#version()->List:::Returns an unmodifiable java.util.List List of the integers represented in the version number
java.lang.Runtime.Version#pre()->Optional:::Returns the optional pre-release information.
java.lang.Runtime.Version#build()->Optional:::Returns the build number.
java.lang.Runtime.Version#optional()->Optional:::Returns optional additional identifying build information.
java.lang.Runtime.Version#compareTo(Version)->int:::Compares this version to another
java.lang.Runtime.Version#compareToIgnoreOptional(Version)->int:::Compares this version to another disregarding optional build information
java.lang.Runtime.Version#toString()->String:::Returns a string representation of this version.
java.lang.Runtime.Version#equals(Object)->boolean:::Determines whether this Version is equal to another object
java.lang.Runtime.Version#equalsIgnoreOptional(Object)->boolean:::Determines whether this Version is equal to another disregarding optional build information
java.lang.Runtime.Version#hashCode()->int:::Returns the hash code of this version.
java.lang.SecurityManager#getClassContext()->Class[]:::Returns the current execution stack as an array of classes
java.lang.SecurityManager#getSecurityContext()->Object:::Creates an object that encapsulates the current execution environment
java.lang.SecurityManager#checkPermission(Permission)->void:::Throws a SecurityException if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect
java.lang.SecurityManager#checkPermission(Permission, Object)->void:::Throws a SecurityException if the specified security context is denied access to the resource specified by the given permission
java.lang.SecurityManager#checkCreateClassLoader()->void:::Throws a SecurityException if the calling thread is not allowed to create a new class loader
java.lang.SecurityManager#checkAccess(Thread)->void:::Throws a SecurityException if the calling thread is not allowed to modify the thread argument
java.lang.SecurityManager#checkAccess(ThreadGroup)->void:::Throws a SecurityException if the calling thread is not allowed to modify the thread group argument
java.lang.SecurityManager#checkExit(int)->void:::Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code
java.lang.SecurityManager#checkExec(String)->void:::Throws a SecurityException if the calling thread is not allowed to create a subprocess
java.lang.SecurityManager#checkLink(String)->void:::Throws a SecurityException if the calling thread is not allowed to dynamic link the library code specified by the string argument file
java.lang.SecurityManager#checkRead(FileDescriptor)->void:::Throws a SecurityException if the calling thread is not allowed to read from the specified file descriptor
java.lang.SecurityManager#checkRead(String)->void:::Throws a SecurityException if the calling thread is not allowed to read the file specified by the string argument
java.lang.SecurityManager#checkRead(String, Object)->void:::Throws a SecurityException if the specified security context is not allowed to read the file specified by the string argument
java.lang.SecurityManager#checkWrite(FileDescriptor)->void:::Throws a SecurityException if the calling thread is not allowed to write to the specified file descriptor
java.lang.SecurityManager#checkWrite(String)->void:::Throws a SecurityException if the calling thread is not allowed to write to the file specified by the string argument
java.lang.SecurityManager#checkDelete(String)->void:::Throws a SecurityException if the calling thread is not allowed to delete the specified file
java.lang.SecurityManager#checkConnect(String, int)->void:::Throws a SecurityException if the calling thread is not allowed to open a socket connection to the specified host and port number
java.lang.SecurityManager#checkConnect(String, int, Object)->void:::Throws a SecurityException if the specified security context is not allowed to open a socket connection to the specified host and port number
java.lang.SecurityManager#checkListen(int)->void:::Throws a SecurityException if the calling thread is not allowed to wait for a connection request on the specified local port number
java.lang.SecurityManager#checkAccept(String, int)->void:::Throws a SecurityException if the calling thread is not permitted to accept a socket connection from the specified host and port number
java.lang.SecurityManager#checkMulticast(InetAddress)->void:::Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast
java.lang.SecurityManager#checkMulticast(InetAddress, byte)->void:::Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast
java.lang.SecurityManager#checkPropertiesAccess()->void:::Throws a SecurityException if the calling thread is not allowed to access or modify the system properties
java.lang.SecurityManager#checkPropertyAccess(String)->void:::Throws a SecurityException if the calling thread is not allowed to access the system property with the specified key name
java.lang.SecurityManager#checkPrintJobAccess()->void:::Throws a SecurityException if the calling thread is not allowed to initiate a print job request
java.lang.SecurityManager#addNonExportedPackages(ModuleLayer)->void:::Record the non-exported packages of the modules in the given layer
java.lang.SecurityManager#invalidatePackageAccessCache()->void:::Called by java.security.Security
java.lang.SecurityManager#checkPackageAccess(String)->void:::Throws a SecurityException if the calling thread is not allowed to access the specified package
java.lang.SecurityManager#checkPackageDefinition(String)->void:::Throws a SecurityException if the calling thread is not allowed to define classes in the specified package
java.lang.SecurityManager#checkSetFactory()->void:::Throws a SecurityException if the calling thread is not allowed to set the socket factory used by ServerSocket or Socket, or the stream handler factory used by URL
java.lang.SecurityManager#checkSecurityAccess(String)->void:::Determines whether the permission with the specified permission target name should be granted or denied
java.lang.SecurityManager#getThreadGroup()->ThreadGroup:::Returns the thread group into which to instantiate any new thread being created at the time this is being called
java.lang.Short#toString(short)->String:::Returns a new String object representing the specified short
java.lang.Short#parseShort(String, int)->short:::Parses the string argument as a signed short in the radix specified by the second argument
java.lang.Short#parseShort(String)->short:::Parses the string argument as a signed decimal short
java.lang.Short#valueOf(String, int)->Short:::Returns a Short object holding the value extracted from the specified String when parsed with the radix given by the second argument
java.lang.Short#valueOf(String)->Short:::Returns a Short object holding the value given by the specified String
java.lang.Short#valueOf(short)->Short:::Returns a Short instance representing the specified short value
java.lang.Short#decode(String)->Short:::Decodes a String into a Short
java.lang.Short#byteValue()->byte:::Returns the value of this Short as a byte after a narrowing primitive conversion.
java.lang.Short#shortValue()->short:::Returns the value of this Short as a short.
java.lang.Short#intValue()->int:::Returns the value of this Short as an int after a widening primitive conversion.
java.lang.Short#longValue()->long:::Returns the value of this Short as a long after a widening primitive conversion.
java.lang.Short#floatValue()->float:::Returns the value of this Short as a float after a widening primitive conversion.
java.lang.Short#doubleValue()->double:::Returns the value of this Short as a double after a widening primitive conversion.
java.lang.Short#toString()->String:::Returns a String object representing this Short's value
java.lang.Short#hashCode()->int:::Returns a hash code for this Short; equal to the result of invoking intValue().
java.lang.Short#hashCode(short)->int:::Returns a hash code for a short value; compatible with Short.hashCode().
java.lang.Short#equals(Object)->boolean:::Compares this object to the specified object
java.lang.Short#compareTo(Short)->int:::Compares two Short objects numerically.
java.lang.Short#compare(short, short)->int:::Compares two short values numerically
java.lang.Short#compareUnsigned(short, short)->int:::Compares two short values numerically treating the values as unsigned.
java.lang.Short#reverseBytes(short)->short:::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified short value.
java.lang.Short#toUnsignedInt(short)->int:::Converts the argument to an int by an unsigned conversion
java.lang.Short#toUnsignedLong(short)->long:::Converts the argument to a long by an unsigned conversion
java.lang.Shutdown#add(int, boolean, Runnable)->void:::Add a new system shutdown hook
java.lang.Shutdown#beforeHalt()->void::: shutdown before halt
java.lang.Shutdown#halt(int)->void::: shutdown halt
java.lang.Shutdown#halt0(int)->void::: shutdown halt0
java.lang.Shutdown#exit(int)->void::: shutdown exit
java.lang.Shutdown#shutdown()->void::: shutdown shutdown
java.lang.StackFrameInfo#declaringClass()->Class::: stack frame info declaring class
java.lang.StackFrameInfo#getClassName()->String::: stack frame info get class name
java.lang.StackFrameInfo#getDeclaringClass()->Class::: stack frame info get declaring class
java.lang.StackFrameInfo#getMethodName()->String::: stack frame info get method name
java.lang.StackFrameInfo#getMethodType()->MethodType::: stack frame info get method type
java.lang.StackFrameInfo#getDescriptor()->String::: stack frame info get descriptor
java.lang.StackFrameInfo#getByteCodeIndex()->int::: stack frame info get byte code index
java.lang.StackFrameInfo#getFileName()->String::: stack frame info get file name
java.lang.StackFrameInfo#getLineNumber()->int::: stack frame info get line number
java.lang.StackFrameInfo#isNativeMethod()->boolean::: stack frame info is native method
java.lang.StackFrameInfo#toString()->String::: stack frame info to string
java.lang.StackFrameInfo#toStackTraceElement()->StackTraceElement::: stack frame info to stack trace element
java.lang.StackStreamFactory#makeStackTraverser(StackWalker, Function, ? extends T>)->StackFrameTraverser::: stack stream factory make stack traverser
java.lang.StackStreamFactory#makeCallerFinder(StackWalker)->CallerClassFinder:::Gets a stack stream to find caller class.
java.lang.StackStreamFactory.AbstractStackWalker#consumeFrames()->R:::A callback method to consume the stack frames
java.lang.StackStreamFactory.AbstractStackWalker#initFrameBuffer()->void:::Initialize FrameBuffer
java.lang.StackStreamFactory.AbstractStackWalker#batchSize(int)->int:::Returns the suggested next batch size
java.lang.StackStreamFactory.AbstractStackWalker#getNextBatchSize()->int::: abstract stack walker get next batch size
java.lang.StackStreamFactory.AbstractStackWalker#checkState(WalkerState)->void::: abstract stack walker check state
java.lang.StackStreamFactory.AbstractStackWalker#walk()->R::: abstract stack walker walk
java.lang.StackStreamFactory.AbstractStackWalker#peekFrame()->Class::: abstract stack walker peek frame
java.lang.StackStreamFactory.AbstractStackWalker#nextFrame()->Class::: abstract stack walker next frame
java.lang.StackStreamFactory.AbstractStackWalker#hasNext()->boolean::: abstract stack walker has next
java.lang.StackStreamFactory.StackFrameTraverser.StackFrameBuffer#frames()->StackFrameInfo[]::: stack frame buffer frames
java.lang.StackStreamFactory.StackFrameTraverser.StackFrameBuffer#resize(int, int)->void::: stack frame buffer resize
java.lang.StackStreamFactory.StackFrameTraverser.StackFrameBuffer#nextStackFrame()->StackFrameInfo::: stack frame buffer next stack frame
java.lang.StackStreamFactory.StackFrameTraverser.StackFrameBuffer#at(int)->Class::: stack frame buffer at
java.lang.StackStreamFactory.StackFrameTraverser#nextStackFrame()->StackFrame:::Returns next StackFrame object in the current batch of stack frames; or null if no more stack frame.
java.lang.StackStreamFactory.StackFrameTraverser#consumeFrames()->T::: stack frame traverser consume frames
java.lang.StackStreamFactory.StackFrameTraverser#initFrameBuffer()->void::: stack frame traverser init frame buffer
java.lang.StackStreamFactory.StackFrameTraverser#batchSize(int)->int::: stack frame traverser batch size
java.lang.StackStreamFactory.StackFrameTraverser#trySplit()->Spliterator::: stack frame traverser try split
java.lang.StackStreamFactory.StackFrameTraverser#estimateSize()->long::: stack frame traverser estimate size
java.lang.StackStreamFactory.StackFrameTraverser#characteristics()->int::: stack frame traverser characteristics
java.lang.StackStreamFactory.StackFrameTraverser#forEachRemaining(Consumer)->void::: stack frame traverser for each remaining
java.lang.StackStreamFactory.StackFrameTraverser#tryAdvance(Consumer)->boolean::: stack frame traverser try advance
java.lang.StackStreamFactory.CallerClassFinder.ClassBuffer#frames()->Class[]::: class buffer frames
java.lang.StackStreamFactory.CallerClassFinder.ClassBuffer#at(int)->Class::: class buffer at
java.lang.StackStreamFactory.CallerClassFinder.ClassBuffer#resize(int, int)->void:::Resizes the buffers for VM to fill in the next batch of stack frames
java.lang.StackStreamFactory.CallerClassFinder#findCaller()->Class::: caller class finder find caller
java.lang.StackStreamFactory.CallerClassFinder#consumeFrames()->Integer::: caller class finder consume frames
java.lang.StackStreamFactory.CallerClassFinder#initFrameBuffer()->void::: caller class finder init frame buffer
java.lang.StackStreamFactory.CallerClassFinder#batchSize(int)->int::: caller class finder batch size
java.lang.StackStreamFactory.CallerClassFinder#getNextBatchSize()->int::: caller class finder get next batch size
java.lang.StackStreamFactory.LiveStackInfoTraverser.LiveStackFrameBuffer#frames()->LiveStackFrameInfo[]::: live stack frame buffer frames
java.lang.StackStreamFactory.LiveStackInfoTraverser.LiveStackFrameBuffer#resize(int, int)->void::: live stack frame buffer resize
java.lang.StackStreamFactory.LiveStackInfoTraverser.LiveStackFrameBuffer#nextStackFrame()->LiveStackFrameInfo::: live stack frame buffer next stack frame
java.lang.StackStreamFactory.LiveStackInfoTraverser.LiveStackFrameBuffer#at(int)->Class::: live stack frame buffer at
java.lang.StackStreamFactory.LiveStackInfoTraverser#initFrameBuffer()->void::: live stack info traverser init frame buffer
java.lang.StackStreamFactory.FrameBuffer#frames()->F[]::: frame buffer frames
java.lang.StackStreamFactory.FrameBuffer#resize(int, int)->void:::Resizes the buffers for VM to fill in the next batch of stack frames
java.lang.StackStreamFactory.FrameBuffer#at(int)->Class:::Return the class at the given position in the current batch.
java.lang.StackStreamFactory.FrameBuffer#startIndex()->int::: frame buffer start index
java.lang.StackStreamFactory.FrameBuffer#nextStackFrame()->F:::Returns next StackFrame object in the current batch of stack frames
java.lang.StackStreamFactory.FrameBuffer#curBatchFrameCount()->int::: frame buffer cur batch frame count
java.lang.StackStreamFactory.FrameBuffer#isEmpty()->boolean::: frame buffer is empty
java.lang.StackStreamFactory.FrameBuffer#freeze()->void::: frame buffer freeze
java.lang.StackStreamFactory.FrameBuffer#isActive()->boolean::: frame buffer is active
java.lang.StackStreamFactory.FrameBuffer#next()->Class:::Gets the class at the current frame and move to the next frame.
java.lang.StackStreamFactory.FrameBuffer#get()->Class:::Gets the class at the current frame.
java.lang.StackStreamFactory.FrameBuffer#getIndex()->int::: frame buffer get index
java.lang.StackStreamFactory.FrameBuffer#setBatch(int, int, int)->void::: frame buffer set batch
java.lang.StackStreamFactory.FrameBuffer#check(int)->void::: frame buffer check
java.lang.StackTraceElement#getFileName()->String:::Returns the name of the source file containing the execution point represented by this stack trace element
java.lang.StackTraceElement#getLineNumber()->int:::Returns the line number of the source line containing the execution point represented by this stack trace element
java.lang.StackTraceElement#getModuleName()->String:::Returns the module name of the module containing the execution point represented by this stack trace element.
java.lang.StackTraceElement#getModuleVersion()->String:::Returns the module version of the module containing the execution point represented by this stack trace element.
java.lang.StackTraceElement#getClassLoaderName()->String:::Returns the name of the class loader of the class containing the execution point represented by this stack trace element.
java.lang.StackTraceElement#getClassName()->String:::Returns the fully qualified name of the class containing the execution point represented by this stack trace element.
java.lang.StackTraceElement#getMethodName()->String:::Returns the name of the method containing the execution point represented by this stack trace element
java.lang.StackTraceElement#isNativeMethod()->boolean:::Returns true if the method containing the execution point represented by this stack trace element is a native method.
java.lang.StackTraceElement#toString()->String:::Returns a string representation of this stack trace element.
java.lang.StackTraceElement#equals(Object)->boolean:::Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance
java.lang.StackTraceElement#hashCode()->int:::Returns a hash code value for this stack trace element.
java.lang.StackTraceElement#of(Throwable, int)->StackTraceElement[]::: stack trace element of
java.lang.StackTraceElement#of(StackFrameInfo)->StackTraceElement::: stack trace element of
java.lang.StackWalker.StackFrame#getClassName()->String:::Gets the binary name of the declaring class of the method represented by this stack frame.
java.lang.StackWalker.StackFrame#getMethodName()->String:::Gets the name of the method represented by this stack frame.
java.lang.StackWalker.StackFrame#getDeclaringClass()->Class:::Gets the declaring Class for the method represented by this stack frame.
java.lang.StackWalker.StackFrame#getMethodType()->MethodType:::Returns the MethodType representing the parameter types and the return type for the method represented by this stack frame.
java.lang.StackWalker.StackFrame#getDescriptor()->String:::Returns the descriptor of the method represented by this stack frame as defined by The Java Virtual Machine Specification.
java.lang.StackWalker.StackFrame#getByteCodeIndex()->int:::Returns the index to the code array of the Code attribute containing the execution point represented by this stack frame
java.lang.StackWalker.StackFrame#getFileName()->String:::Returns the name of the source file containing the execution point represented by this stack frame
java.lang.StackWalker.StackFrame#getLineNumber()->int:::Returns the line number of the source line containing the execution point represented by this stack frame
java.lang.StackWalker.StackFrame#isNativeMethod()->boolean:::Returns true if the method containing the execution point represented by this stack frame is a native method.
java.lang.StackWalker.StackFrame#toStackTraceElement()->StackTraceElement:::Gets a StackTraceElement for this stack frame.
java.lang.StackWalker#getInstance()->StackWalker:::Returns a StackWalker instance
java.lang.StackWalker#getInstance(Option)->StackWalker:::Returns a StackWalker instance with the given option specifying the stack frame information it can access
java.lang.StackWalker#getInstance(Set)->StackWalker:::Returns a StackWalker instance with the given options specifying the stack frame information it can access
java.lang.StackWalker#getInstance(Set, int)->StackWalker:::Returns a StackWalker instance with the given options specifying the stack frame information it can access
java.lang.StackWalker#walk(Function, ? extends T>)->T:::Applies the given function to the stream of StackFrames for the current thread, traversing from the top frame of the stack, which is the method calling this walk method
java.lang.StackWalker#forEach(Consumer)->void:::Performs the given action on each element of StackFrame stream of the current thread, traversing from the top frame of the stack, which is the method calling this forEach method
java.lang.StackWalker#getCallerClass()->Class:::Gets the Class object of the caller who invoked the method that invoked getCallerClass
java.lang.StackWalker#newInstance(Set, ExtendedOption)->StackWalker::: stack walker new instance
java.lang.StackWalker#estimateDepth()->int::: stack walker estimate depth
java.lang.StackWalker#hasOption(Option)->boolean::: stack walker has option
java.lang.StackWalker#hasLocalsOperandsOption()->boolean::: stack walker has locals operands option
java.lang.StrictMath#sin(double)->double:::Returns the trigonometric sine of an angle
java.lang.StrictMath#cos(double)->double:::Returns the trigonometric cosine of an angle
java.lang.StrictMath#tan(double)->double:::Returns the trigonometric tangent of an angle
java.lang.StrictMath#asin(double)->double:::Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2
java.lang.StrictMath#acos(double)->double:::Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi
java.lang.StrictMath#atan(double)->double:::Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2
java.lang.StrictMath#toRadians(double)->double:::Converts an angle measured in degrees to an approximately equivalent angle measured in radians
java.lang.StrictMath#toDegrees(double)->double:::Converts an angle measured in radians to an approximately equivalent angle measured in degrees
java.lang.StrictMath#exp(double)->double:::Returns Euler's number e raised to the power of a double value
java.lang.StrictMath#log(double)->double:::Returns the natural logarithm (base e) of a double value
java.lang.StrictMath#log10(double)->double:::Returns the base 10 logarithm of a double value
java.lang.StrictMath#sqrt(double)->double:::Returns the correctly rounded positive square root of a double value
java.lang.StrictMath#cbrt(double)->double:::Returns the cube root of a double value
java.lang.StrictMath#IEEEremainder(double, double)->double:::Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard
java.lang.StrictMath#ceil(double)->double:::Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer
java.lang.StrictMath#floor(double)->double:::Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer
java.lang.StrictMath#rint(double)->double:::Returns the double value that is closest in value to the argument and is equal to a mathematical integer
java.lang.StrictMath#atan2(double, double)->double:::Returns the angle theta from the conversion of rectangular coordinates (x,&nbsp;y) to polar coordinates (r,&nbsp;theta)
java.lang.StrictMath#pow(double, double)->double:::Returns the value of the first argument raised to the power of the second argument
java.lang.StrictMath#round(float)->int:::Returns the closest int to the argument, with ties rounding to positive infinity
java.lang.StrictMath#round(double)->long:::Returns the closest long to the argument, with ties rounding to positive infinity
java.lang.StrictMath#random()->double:::Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0
java.lang.StrictMath#addExact(int, int)->int:::Returns the sum of its arguments, throwing an exception if the result overflows an int.
java.lang.StrictMath#addExact(long, long)->long:::Returns the sum of its arguments, throwing an exception if the result overflows a long.
java.lang.StrictMath#subtractExact(int, int)->int:::Returns the difference of the arguments, throwing an exception if the result overflows an int.
java.lang.StrictMath#subtractExact(long, long)->long:::Returns the difference of the arguments, throwing an exception if the result overflows a long.
java.lang.StrictMath#multiplyExact(int, int)->int:::Returns the product of the arguments, throwing an exception if the result overflows an int.
java.lang.StrictMath#multiplyExact(long, int)->long:::Returns the product of the arguments, throwing an exception if the result overflows a long.
java.lang.StrictMath#multiplyExact(long, long)->long:::Returns the product of the arguments, throwing an exception if the result overflows a long.
java.lang.StrictMath#toIntExact(long)->int:::Returns the value of the long argument; throwing an exception if the value overflows an int.
java.lang.StrictMath#multiplyFull(int, int)->long:::Returns the exact mathematical product of the arguments.
java.lang.StrictMath#multiplyHigh(long, long)->long:::Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors.
java.lang.StrictMath#floorDiv(int, int)->int:::Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient
java.lang.StrictMath#floorDiv(long, int)->long:::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient
java.lang.StrictMath#floorDiv(long, long)->long:::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient
java.lang.StrictMath#floorMod(int, int)->int:::Returns the floor modulus of the int arguments
java.lang.StrictMath#floorMod(long, int)->int:::Returns the floor modulus of the long and int arguments
java.lang.StrictMath#floorMod(long, long)->long:::Returns the floor modulus of the long arguments
java.lang.StrictMath#abs(int)->int:::Returns the absolute value of an int value
java.lang.StrictMath#abs(long)->long:::Returns the absolute value of a long value
java.lang.StrictMath#abs(float)->float:::Returns the absolute value of a float value
java.lang.StrictMath#abs(double)->double:::Returns the absolute value of a double value
java.lang.StrictMath#max(int, int)->int:::Returns the greater of two int values
java.lang.StrictMath#max(long, long)->long:::Returns the greater of two long values
java.lang.StrictMath#max(float, float)->float:::Returns the greater of two float values
java.lang.StrictMath#max(double, double)->double:::Returns the greater of two double values
java.lang.StrictMath#min(int, int)->int:::Returns the smaller of two int values
java.lang.StrictMath#min(long, long)->long:::Returns the smaller of two long values
java.lang.StrictMath#min(float, float)->float:::Returns the smaller of two float values
java.lang.StrictMath#min(double, double)->double:::Returns the smaller of two double values
java.lang.StrictMath#fma(double, double, double)->double:::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double
java.lang.StrictMath#fma(float, float, float)->float:::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float
java.lang.StrictMath#ulp(double)->double:::Returns the size of an ulp of the argument
java.lang.StrictMath#ulp(float)->float:::Returns the size of an ulp of the argument
java.lang.StrictMath#signum(double)->double:::Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero
java.lang.StrictMath#signum(float)->float:::Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero
java.lang.StrictMath#sinh(double)->double:::Returns the hyperbolic sine of a double value
java.lang.StrictMath#cosh(double)->double:::Returns the hyperbolic cosine of a double value
java.lang.StrictMath#tanh(double)->double:::Returns the hyperbolic tangent of a double value
java.lang.StrictMath#hypot(double, double)->double:::Returns sqrt(x^2&nbsp;+y^2) without intermediate overflow or underflow
java.lang.StrictMath#expm1(double)->double:::Returns e^x&nbsp;-1
java.lang.StrictMath#log1p(double)->double:::Returns the natural logarithm of the sum of the argument and 1
java.lang.StrictMath#copySign(double, double)->double:::Returns the first floating-point argument with the sign of the second floating-point argument
java.lang.StrictMath#copySign(float, float)->float:::Returns the first floating-point argument with the sign of the second floating-point argument
java.lang.StrictMath#getExponent(float)->int:::Returns the unbiased exponent used in the representation of a float
java.lang.StrictMath#getExponent(double)->int:::Returns the unbiased exponent used in the representation of a double
java.lang.StrictMath#nextAfter(double, double)->double:::Returns the floating-point number adjacent to the first argument in the direction of the second argument
java.lang.StrictMath#nextAfter(float, double)->float:::Returns the floating-point number adjacent to the first argument in the direction of the second argument
java.lang.StrictMath#nextUp(double)->double:::Returns the floating-point value adjacent to d in the direction of positive infinity
java.lang.StrictMath#nextUp(float)->float:::Returns the floating-point value adjacent to f in the direction of positive infinity
java.lang.StrictMath#nextDown(double)->double:::Returns the floating-point value adjacent to d in the direction of negative infinity
java.lang.StrictMath#nextDown(float)->float:::Returns the floating-point value adjacent to f in the direction of negative infinity
java.lang.StrictMath#scalb(double, int)->double:::Returns d &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set
java.lang.StrictMath#scalb(float, int)->float:::Returns f &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set
java.lang.String#length()->int:::Returns the length of this string
java.lang.String#isEmpty()->boolean:::Returns true if, and only if, #length() is 0.
java.lang.String#charAt(int)->char:::Returns the char value at the specified index
java.lang.String#codePointAt(int)->int:::Returns the character (Unicode code point) at the specified index
java.lang.String#codePointBefore(int)->int:::Returns the character (Unicode code point) before the specified index
java.lang.String#codePointCount(int, int)->int:::Returns the number of Unicode code points in the specified text range of this String
java.lang.String#offsetByCodePoints(int, int)->int:::Returns the index within this String that is offset from the given index by codePointOffset code points
java.lang.String#getChars(int, int, char[], int)->void:::Copies characters from this string into the destination character array
java.lang.String#getBytes(int, int, byte[], int)->void:::Copies characters from this string into the destination byte array
java.lang.String#getBytes(String)->byte[]:::Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array
java.lang.String#getBytes(Charset)->byte[]:::Encodes this String into a sequence of bytes using the given java.nio.charset.Charset charset, storing the result into a new byte array
java.lang.String#getBytes()->byte[]:::Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array
java.lang.String#equals(Object)->boolean:::Compares this string to the specified object
java.lang.String#contentEquals(StringBuffer)->boolean:::Compares this string to the specified StringBuffer
java.lang.String#contentEquals(CharSequence)->boolean:::Compares this string to the specified CharSequence
java.lang.String#equalsIgnoreCase(String)->boolean:::Compares this String to another String, ignoring case considerations
java.lang.String#compareTo(String)->int:::Compares two strings lexicographically
java.lang.String#compareToIgnoreCase(String)->int:::Compares two strings lexicographically, ignoring case differences
java.lang.String#regionMatches(int, String, int, int)->boolean:::Tests if two string regions are equal
java.lang.String#regionMatches(boolean, int, String, int, int)->boolean:::Tests if two string regions are equal
java.lang.String#startsWith(String, int)->boolean:::Tests if the substring of this string beginning at the specified index starts with the specified prefix.
java.lang.String#startsWith(String)->boolean:::Tests if this string starts with the specified prefix.
java.lang.String#endsWith(String)->boolean:::Tests if this string ends with the specified suffix.
java.lang.String#hashCode()->int:::Returns a hash code for this string
java.lang.String#indexOf(int)->int:::Returns the index within this string of the first occurrence of the specified character
java.lang.String#indexOf(int, int)->int:::Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index
java.lang.String#lastIndexOf(int)->int:::Returns the index within this string of the last occurrence of the specified character
java.lang.String#lastIndexOf(int, int)->int:::Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index
java.lang.String#indexOf(String)->int:::Returns the index within this string of the first occurrence of the specified substring
java.lang.String#indexOf(String, int)->int:::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index
java.lang.String#indexOf(byte[], byte, int, String, int)->int:::Code shared by String and AbstractStringBuilder to do searches
java.lang.String#lastIndexOf(String)->int:::Returns the index within this string of the last occurrence of the specified substring
java.lang.String#lastIndexOf(String, int)->int:::Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index
java.lang.String#lastIndexOf(byte[], byte, int, String, int)->int:::Code shared by String and AbstractStringBuilder to do searches
java.lang.String#substring(int)->String:::Returns a string that is a substring of this string
java.lang.String#substring(int, int)->String:::Returns a string that is a substring of this string
java.lang.String#subSequence(int, int)->CharSequence:::Returns a character sequence that is a subsequence of this sequence
java.lang.String#concat(String)->String:::Concatenates the specified string to the end of this string
java.lang.String#replace(char, char)->String:::Returns a string resulting from replacing all occurrences of oldChar in this string with newChar
java.lang.String#matches(String)->boolean:::Tells whether or not this string matches the given regular expression
java.lang.String#contains(CharSequence)->boolean:::Returns true if and only if this string contains the specified sequence of char values.
java.lang.String#replaceFirst(String, String)->String:::Replaces the first substring of this string that matches the given regular expression with the given replacement
java.lang.String#replaceAll(String, String)->String:::Replaces each substring of this string that matches the given regular expression with the given replacement
java.lang.String#replace(CharSequence, CharSequence)->String:::Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence
java.lang.String#split(String, int)->String[]:::Splits this string around matches of the given regular expression
java.lang.String#split(String)->String[]:::Splits this string around matches of the given regular expression
java.lang.String#join(CharSequence, CharSequence...)->String:::Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter
java.lang.String#join(CharSequence, Iterable)->String:::Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter
java.lang.String#toLowerCase(Locale)->String:::Converts all of the characters in this String to lower case using the rules of the given Locale
java.lang.String#toLowerCase()->String:::Converts all of the characters in this String to lower case using the rules of the default locale
java.lang.String#toUpperCase(Locale)->String:::Converts all of the characters in this String to upper case using the rules of the given Locale
java.lang.String#toUpperCase()->String:::Converts all of the characters in this String to upper case using the rules of the default locale
java.lang.String#trim()->String:::Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to 'U+0020' (the space character)
java.lang.String#strip()->String:::Returns a string whose value is this string, with all leading and trailing Character#isWhitespace(int) white space removed
java.lang.String#stripLeading()->String:::Returns a string whose value is this string, with all leading Character#isWhitespace(int) white space removed
java.lang.String#stripTrailing()->String:::Returns a string whose value is this string, with all trailing Character#isWhitespace(int) white space removed
java.lang.String#isBlank()->boolean:::Returns true if the string is empty or contains only Character#isWhitespace(int) white space codepoints, otherwise false.
java.lang.String#lines()->Stream:::Returns a stream of lines extracted from this string, separated by line terminators
java.lang.String#toString()->String:::This object (which is already a string!) is itself returned.
java.lang.String#chars()->IntStream:::Returns a stream of int zero-extending the char values from this sequence
java.lang.String#codePoints()->IntStream:::Returns a stream of code point values from this sequence
java.lang.String#toCharArray()->char[]:::Converts this string to a new character array.
java.lang.String#format(String, Object...)->String:::Returns a formatted string using the specified format string and arguments
java.lang.String#format(Locale, String, Object...)->String:::Returns a formatted string using the specified locale, format string, and arguments.
java.lang.String#valueOf(Object)->String:::Returns the string representation of the Object argument.
java.lang.String#valueOf(char[])->String:::Returns the string representation of the char array argument
java.lang.String#valueOf(char[], int, int)->String:::Returns the string representation of a specific subarray of the char array argument
java.lang.String#copyValueOf(char[], int, int)->String:::Equivalent to #valueOf(char[], int, int).
java.lang.String#copyValueOf(char[])->String:::Equivalent to #valueOf(char[]).
java.lang.String#valueOf(boolean)->String:::Returns the string representation of the boolean argument.
java.lang.String#valueOf(char)->String:::Returns the string representation of the char argument.
java.lang.String#valueOf(int)->String:::Returns the string representation of the int argument
java.lang.String#valueOf(long)->String:::Returns the string representation of the long argument
java.lang.String#valueOf(float)->String:::Returns the string representation of the float argument
java.lang.String#valueOf(double)->String:::Returns the string representation of the double argument
java.lang.String#intern()->String:::Returns a canonical representation for the string object
java.lang.String#repeat(int)->String:::Returns a string whose value is the concatenation of this string repeated count times
java.lang.String#getBytes(byte[], int, byte)->void:::Copy character bytes from this string into dst starting at dstBegin
java.lang.String#coder()->byte::: string coder
java.lang.String#value()->byte[]::: string value
java.lang.String#checkIndex(int, int)->void::: string check index
java.lang.String#checkOffset(int, int)->void::: string check offset
java.lang.String#checkBoundsOffCount(int, int, int)->void::: string check bounds off count
java.lang.String#checkBoundsBeginEnd(int, int, int)->void::: string check bounds begin end
java.lang.String#valueOfCodePoint(int)->String:::Returns the string representation of the codePoint argument.
java.lang.StringBuffer#compareTo(StringBuffer)->int:::Compares two StringBuffer instances lexicographically
java.lang.StringBuffer#length()->int::: string buffer length
java.lang.StringBuffer#capacity()->int::: string buffer capacity
java.lang.StringBuffer#ensureCapacity(int)->void::: string buffer ensure capacity
java.lang.StringBuffer#trimToSize()->void::: string buffer trim to size
java.lang.StringBuffer#setLength(int)->void::: string buffer set length
java.lang.StringBuffer#charAt(int)->char::: string buffer char at
java.lang.StringBuffer#codePointAt(int)->int::: string buffer code point at
java.lang.StringBuffer#codePointBefore(int)->int::: string buffer code point before
java.lang.StringBuffer#codePointCount(int, int)->int::: string buffer code point count
java.lang.StringBuffer#offsetByCodePoints(int, int)->int::: string buffer offset by code points
java.lang.StringBuffer#getChars(int, int, char[], int)->void::: string buffer get chars
java.lang.StringBuffer#setCharAt(int, char)->void::: string buffer set char at
java.lang.StringBuffer#append(Object)->StringBuffer::: string buffer append
java.lang.StringBuffer#append(String)->StringBuffer::: string buffer append
java.lang.StringBuffer#append(StringBuffer)->StringBuffer:::Appends the specified StringBuffer to this sequence
java.lang.StringBuffer#append(AbstractStringBuilder)->StringBuffer::: string buffer append
java.lang.StringBuffer#append(CharSequence)->StringBuffer:::Appends the specified CharSequence to this sequence
java.lang.StringBuffer#append(CharSequence, int, int)->StringBuffer::: string buffer append
java.lang.StringBuffer#append(char[])->StringBuffer::: string buffer append
java.lang.StringBuffer#append(char[], int, int)->StringBuffer::: string buffer append
java.lang.StringBuffer#append(boolean)->StringBuffer::: string buffer append
java.lang.StringBuffer#append(char)->StringBuffer::: string buffer append
java.lang.StringBuffer#append(int)->StringBuffer::: string buffer append
java.lang.StringBuffer#appendCodePoint(int)->StringBuffer::: string buffer append code point
java.lang.StringBuffer#append(long)->StringBuffer::: string buffer append
java.lang.StringBuffer#append(float)->StringBuffer::: string buffer append
java.lang.StringBuffer#append(double)->StringBuffer::: string buffer append
java.lang.StringBuffer#delete(int, int)->StringBuffer::: string buffer delete
java.lang.StringBuffer#deleteCharAt(int)->StringBuffer::: string buffer delete char at
java.lang.StringBuffer#replace(int, int, String)->StringBuffer::: string buffer replace
java.lang.StringBuffer#substring(int)->String::: string buffer substring
java.lang.StringBuffer#subSequence(int, int)->CharSequence::: string buffer sub sequence
java.lang.StringBuffer#substring(int, int)->String::: string buffer substring
java.lang.StringBuffer#insert(int, char[], int, int)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, Object)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, String)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, char[])->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, CharSequence)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, CharSequence, int, int)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, boolean)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, char)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, int)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, long)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, float)->StringBuffer::: string buffer insert
java.lang.StringBuffer#insert(int, double)->StringBuffer::: string buffer insert
java.lang.StringBuffer#indexOf(String)->int::: string buffer index of
java.lang.StringBuffer#indexOf(String, int)->int::: string buffer index of
java.lang.StringBuffer#lastIndexOf(String)->int::: string buffer last index of
java.lang.StringBuffer#lastIndexOf(String, int)->int::: string buffer last index of
java.lang.StringBuffer#reverse()->StringBuffer::: string buffer reverse
java.lang.StringBuffer#toString()->String::: string buffer to string
java.lang.StringBuffer#getBytes(byte[], int, byte)->void::: string buffer get bytes
java.lang.StringBuilder#compareTo(StringBuilder)->int:::Compares two StringBuilder instances lexicographically
java.lang.StringBuilder#append(Object)->StringBuilder::: string builder append
java.lang.StringBuilder#append(String)->StringBuilder::: string builder append
java.lang.StringBuilder#append(StringBuffer)->StringBuilder:::Appends the specified StringBuffer to this sequence
java.lang.StringBuilder#append(CharSequence)->StringBuilder::: string builder append
java.lang.StringBuilder#append(CharSequence, int, int)->StringBuilder::: string builder append
java.lang.StringBuilder#append(char[])->StringBuilder::: string builder append
java.lang.StringBuilder#append(char[], int, int)->StringBuilder::: string builder append
java.lang.StringBuilder#append(boolean)->StringBuilder::: string builder append
java.lang.StringBuilder#append(char)->StringBuilder::: string builder append
java.lang.StringBuilder#append(int)->StringBuilder::: string builder append
java.lang.StringBuilder#append(long)->StringBuilder::: string builder append
java.lang.StringBuilder#append(float)->StringBuilder::: string builder append
java.lang.StringBuilder#append(double)->StringBuilder::: string builder append
java.lang.StringBuilder#appendCodePoint(int)->StringBuilder::: string builder append code point
java.lang.StringBuilder#delete(int, int)->StringBuilder::: string builder delete
java.lang.StringBuilder#deleteCharAt(int)->StringBuilder::: string builder delete char at
java.lang.StringBuilder#replace(int, int, String)->StringBuilder::: string builder replace
java.lang.StringBuilder#insert(int, char[], int, int)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, Object)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, String)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, char[])->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, CharSequence)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, CharSequence, int, int)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, boolean)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, char)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, int)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, long)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, float)->StringBuilder::: string builder insert
java.lang.StringBuilder#insert(int, double)->StringBuilder::: string builder insert
java.lang.StringBuilder#indexOf(String)->int::: string builder index of
java.lang.StringBuilder#indexOf(String, int)->int::: string builder index of
java.lang.StringBuilder#lastIndexOf(String)->int::: string builder last index of
java.lang.StringBuilder#lastIndexOf(String, int)->int::: string builder last index of
java.lang.StringBuilder#reverse()->StringBuilder::: string builder reverse
java.lang.StringBuilder#toString()->String::: string builder to string
java.lang.StringCoding.Result#with()->Result::: result with
java.lang.StringCoding.Result#with(char[], int, int)->Result::: result with
java.lang.StringCoding.Result#with(byte[], byte)->Result::: result with
java.lang.StringCoding#hasNegatives(byte[], int, int)->boolean::: string coding has negatives
java.lang.StringCoding.StringDecoder#charsetName()->String::: string decoder charset name
java.lang.StringCoding.StringDecoder#requestedCharsetName()->String::: string decoder requested charset name
java.lang.StringCoding.StringDecoder#decode(byte[], int, int)->Result::: string decoder decode
java.lang.StringCoding#decode(String, byte[], int, int)->Result::: string coding decode
java.lang.StringCoding#decode(Charset, byte[], int, int)->Result::: string coding decode
java.lang.StringCoding#decode(byte[], int, int)->Result::: string coding decode
java.lang.StringCoding#encode(String, byte, byte[])->byte[]::: string coding encode
java.lang.StringCoding#encode(Charset, byte, byte[])->byte[]::: string coding encode
java.lang.StringCoding#encode(byte, byte[])->byte[]::: string coding encode
java.lang.StringCoding#newStringUTF8NoRepl(byte[], int, int)->String::: string coding new string f8 no repl
java.lang.StringCoding#getBytesUTF8NoRepl(String)->byte[]::: string coding get bytes f8 no repl
java.lang.StringCoding#newStringNoRepl(byte[], Charset)->String::: string coding new string no repl
java.lang.StringCoding#newStringNoRepl1(byte[], Charset)->String::: string coding new string no repl1
java.lang.StringCoding#getBytesNoRepl(String, Charset)->byte[]::: string coding get bytes no repl
java.lang.StringCoding#getBytesNoRepl1(String, Charset)->byte[]::: string coding get bytes no repl1
java.lang.StringConcatHelper#mixLen(int, boolean)->int:::Mix value length into current length
java.lang.StringConcatHelper#mixLen(int, byte)->int:::Mix value length into current length
java.lang.StringConcatHelper#mixLen(int, char)->int:::Mix value length into current length
java.lang.StringConcatHelper#mixLen(int, short)->int:::Mix value length into current length
java.lang.StringConcatHelper#mixLen(int, int)->int:::Mix value length into current length
java.lang.StringConcatHelper#mixLen(int, long)->int:::Mix value length into current length
java.lang.StringConcatHelper#mixLen(int, String)->int:::Mix value length into current length
java.lang.StringConcatHelper#mixCoder(byte, char)->byte:::Mix coder into current coder
java.lang.StringConcatHelper#mixCoder(byte, String)->byte:::Mix coder into current coder
java.lang.StringConcatHelper#mixCoder(byte, boolean)->byte:::Mix coder into current coder
java.lang.StringConcatHelper#mixCoder(byte, byte)->byte:::Mix coder into current coder
java.lang.StringConcatHelper#mixCoder(byte, short)->byte:::Mix coder into current coder
java.lang.StringConcatHelper#mixCoder(byte, int)->byte:::Mix coder into current coder
java.lang.StringConcatHelper#mixCoder(byte, long)->byte:::Mix coder into current coder
java.lang.StringConcatHelper#prepend(int, byte[], byte, boolean)->int:::Prepends the stringly representation of boolean value into buffer, given the coder and final index
java.lang.StringConcatHelper#prepend(int, byte[], byte, byte)->int:::Prepends the stringly representation of byte value into buffer, given the coder and final index
java.lang.StringConcatHelper#prepend(int, byte[], byte, char)->int:::Prepends the stringly representation of char value into buffer, given the coder and final index
java.lang.StringConcatHelper#prepend(int, byte[], byte, short)->int:::Prepends the stringly representation of short value into buffer, given the coder and final index
java.lang.StringConcatHelper#prepend(int, byte[], byte, int)->int:::Prepends the stringly representation of integer value into buffer, given the coder and final index
java.lang.StringConcatHelper#prepend(int, byte[], byte, long)->int:::Prepends the stringly representation of long value into buffer, given the coder and final index
java.lang.StringConcatHelper#prepend(int, byte[], byte, String)->int:::Prepends the stringly representation of String value into buffer, given the coder and final index
java.lang.StringConcatHelper#newString(byte[], int, byte)->String:::Instantiates the String with given buffer and coder
java.lang.StringConcatHelper#initialCoder()->byte:::Provides the initial coder for the String.
java.lang.StringLatin1#charAt(byte[], int)->char::: string latin1 char at
java.lang.StringLatin1#canEncode(int)->boolean::: string latin1 can encode
java.lang.StringLatin1#length(byte[])->int::: string latin1 length
java.lang.StringLatin1#codePointAt(byte[], int, int)->int::: string latin1 code point at
java.lang.StringLatin1#codePointBefore(byte[], int)->int::: string latin1 code point before
java.lang.StringLatin1#codePointCount(byte[], int, int)->int::: string latin1 code point count
java.lang.StringLatin1#toChars(byte[])->char[]::: string latin1 to chars
java.lang.StringLatin1#inflate(byte[], int, int)->byte[]::: string latin1 inflate
java.lang.StringLatin1#getChars(byte[], int, int, char[], int)->void::: string latin1 get chars
java.lang.StringLatin1#getBytes(byte[], int, int, byte[], int)->void::: string latin1 get bytes
java.lang.StringLatin1#equals(byte[], byte[])->boolean::: string latin1 equals
java.lang.StringLatin1#compareTo(byte[], byte[])->int::: string latin1 compare to
java.lang.StringLatin1#compareTo(byte[], byte[], int, int)->int::: string latin1 compare to
java.lang.StringLatin1#compareToUTF16(byte[], byte[])->int::: string latin1 compare to f16
java.lang.StringLatin1#compareToUTF16(byte[], byte[], int, int)->int::: string latin1 compare to f16
java.lang.StringLatin1#compareToCI(byte[], byte[])->int::: string latin1 compare to i
java.lang.StringLatin1#compareToCI_UTF16(byte[], byte[])->int::: string latin1 compare to i_ f16
java.lang.StringLatin1#hashCode(byte[])->int::: string latin1 hash code
java.lang.StringLatin1#indexOf(byte[], int, int)->int::: string latin1 index of
java.lang.StringLatin1#indexOf(byte[], byte[])->int::: string latin1 index of
java.lang.StringLatin1#indexOf(byte[], int, byte[], int, int)->int::: string latin1 index of
java.lang.StringLatin1#lastIndexOf(byte[], int, byte[], int, int)->int::: string latin1 last index of
java.lang.StringLatin1#lastIndexOf(byte[], int, int)->int::: string latin1 last index of
java.lang.StringLatin1#replace(byte[], char, char)->String::: string latin1 replace
java.lang.StringLatin1#regionMatchesCI(byte[], int, byte[], int, int)->boolean::: string latin1 region matches i
java.lang.StringLatin1#regionMatchesCI_UTF16(byte[], int, byte[], int, int)->boolean::: string latin1 region matches i_ f16
java.lang.StringLatin1#toLowerCase(String, byte[], Locale)->String::: string latin1 to lower case
java.lang.StringLatin1#toUpperCase(String, byte[], Locale)->String::: string latin1 to upper case
java.lang.StringLatin1#trim(byte[])->String::: string latin1 trim
java.lang.StringLatin1#indexOfNonWhitespace(byte[])->int::: string latin1 index of non whitespace
java.lang.StringLatin1#lastIndexOfNonWhitespace(byte[])->int::: string latin1 last index of non whitespace
java.lang.StringLatin1#strip(byte[])->String::: string latin1 strip
java.lang.StringLatin1#stripLeading(byte[])->String::: string latin1 strip leading
java.lang.StringLatin1#stripTrailing(byte[])->String::: string latin1 strip trailing
java.lang.StringLatin1#lines(byte[])->Stream::: string latin1 lines
java.lang.StringLatin1#putChar(byte[], int, int)->void::: string latin1 put char
java.lang.StringLatin1#getChar(byte[], int)->char::: string latin1 get char
java.lang.StringLatin1#toBytes(int[], int, int)->byte[]::: string latin1 to bytes
java.lang.StringLatin1#toBytes(char)->byte[]::: string latin1 to bytes
java.lang.StringLatin1#newString(byte[], int, int)->String::: string latin1 new string
java.lang.StringLatin1#fillNull(byte[], int, int)->void::: string latin1 fill null
java.lang.StringLatin1#inflate(byte[], int, char[], int, int)->void::: string latin1 inflate
java.lang.StringLatin1#inflate(byte[], int, byte[], int, int)->void::: string latin1 inflate
java.lang.StringLatin1.CharsSpliterator#trySplit()->OfInt::: chars spliterator try split
java.lang.StringLatin1.CharsSpliterator#forEachRemaining(IntConsumer)->void::: chars spliterator for each remaining
java.lang.StringLatin1.CharsSpliterator#tryAdvance(IntConsumer)->boolean::: chars spliterator try advance
java.lang.StringLatin1.CharsSpliterator#estimateSize()->long::: chars spliterator estimate size
java.lang.StringLatin1.CharsSpliterator#characteristics()->int::: chars spliterator characteristics
java.lang.StringUTF16#newBytesFor(int)->byte[]::: string f16 new bytes for
java.lang.StringUTF16#putChar(byte[], int, int)->void::: string f16 put char
java.lang.StringUTF16#getChar(byte[], int)->char::: string f16 get char
java.lang.StringUTF16#length(byte[])->int::: string f16 length
java.lang.StringUTF16#codePointAt(byte[], int, int)->int::: string f16 code point at
java.lang.StringUTF16#codePointBefore(byte[], int)->int::: string f16 code point before
java.lang.StringUTF16#codePointCount(byte[], int, int)->int::: string f16 code point count
java.lang.StringUTF16#toChars(byte[])->char[]::: string f16 to chars
java.lang.StringUTF16#toBytes(char[], int, int)->byte[]::: string f16 to bytes
java.lang.StringUTF16#compress(char[], int, int)->byte[]::: string f16 compress
java.lang.StringUTF16#compress(byte[], int, int)->byte[]::: string f16 compress
java.lang.StringUTF16#compress(char[], int, byte[], int, int)->int::: string f16 compress
java.lang.StringUTF16#compress(byte[], int, byte[], int, int)->int::: string f16 compress
java.lang.StringUTF16#toBytes(int[], int, int)->byte[]::: string f16 to bytes
java.lang.StringUTF16#toBytes(char)->byte[]::: string f16 to bytes
java.lang.StringUTF16#toBytesSupplementary(int)->byte[]::: string f16 to bytes supplementary
java.lang.StringUTF16#getChars(byte[], int, int, char[], int)->void::: string f16 get chars
java.lang.StringUTF16#getBytes(byte[], int, int, byte[], int)->void::: string f16 get bytes
java.lang.StringUTF16#equals(byte[], byte[])->boolean::: string f16 equals
java.lang.StringUTF16#compareTo(byte[], byte[])->int::: string f16 compare to
java.lang.StringUTF16#compareTo(byte[], byte[], int, int)->int::: string f16 compare to
java.lang.StringUTF16#compareToLatin1(byte[], byte[])->int::: string f16 compare to latin1
java.lang.StringUTF16#compareToLatin1(byte[], byte[], int, int)->int::: string f16 compare to latin1
java.lang.StringUTF16#compareToCI(byte[], byte[])->int::: string f16 compare to i
java.lang.StringUTF16#compareToCI_Latin1(byte[], byte[])->int::: string f16 compare to i_ latin1
java.lang.StringUTF16#hashCode(byte[])->int::: string f16 hash code
java.lang.StringUTF16#indexOf(byte[], int, int)->int::: string f16 index of
java.lang.StringUTF16#indexOf(byte[], byte[])->int::: string f16 index of
java.lang.StringUTF16#indexOf(byte[], int, byte[], int, int)->int::: string f16 index of
java.lang.StringUTF16#indexOfLatin1(byte[], byte[])->int:::Handles indexOf Latin1 substring in UTF16 string.
java.lang.StringUTF16#indexOfLatin1(byte[], int, byte[], int, int)->int::: string f16 index of latin1
java.lang.StringUTF16#indexOfLatin1Unsafe(byte[], int, byte[], int, int)->int::: string f16 index of latin1 unsafe
java.lang.StringUTF16#lastIndexOf(byte[], int, byte[], int, int)->int::: string f16 last index of
java.lang.StringUTF16#lastIndexOf(byte[], int, int)->int::: string f16 last index of
java.lang.StringUTF16#replace(byte[], char, char)->String::: string f16 replace
java.lang.StringUTF16#regionMatchesCI(byte[], int, byte[], int, int)->boolean::: string f16 region matches i
java.lang.StringUTF16#regionMatchesCI_Latin1(byte[], int, byte[], int, int)->boolean::: string f16 region matches i_ latin1
java.lang.StringUTF16#toLowerCase(String, byte[], Locale)->String::: string f16 to lower case
java.lang.StringUTF16#toUpperCase(String, byte[], Locale)->String::: string f16 to upper case
java.lang.StringUTF16#trim(byte[])->String::: string f16 trim
java.lang.StringUTF16#indexOfNonWhitespace(byte[])->int::: string f16 index of non whitespace
java.lang.StringUTF16#lastIndexOfNonWhitespace(byte[])->int::: string f16 last index of non whitespace
java.lang.StringUTF16#strip(byte[])->String::: string f16 strip
java.lang.StringUTF16#stripLeading(byte[])->String::: string f16 strip leading
java.lang.StringUTF16#stripTrailing(byte[])->String::: string f16 strip trailing
java.lang.StringUTF16#lines(byte[])->Stream::: string f16 lines
java.lang.StringUTF16#newString(byte[], int, int)->String::: string f16 new string
java.lang.StringUTF16#fillNull(byte[], int, int)->void::: string f16 fill null
java.lang.StringUTF16.CharsSpliterator#trySplit()->OfInt::: chars spliterator try split
java.lang.StringUTF16.CharsSpliterator#forEachRemaining(IntConsumer)->void::: chars spliterator for each remaining
java.lang.StringUTF16.CharsSpliterator#tryAdvance(IntConsumer)->boolean::: chars spliterator try advance
java.lang.StringUTF16.CharsSpliterator#estimateSize()->long::: chars spliterator estimate size
java.lang.StringUTF16.CharsSpliterator#characteristics()->int::: chars spliterator characteristics
java.lang.StringUTF16.CodePointsSpliterator#trySplit()->OfInt::: code points spliterator try split
java.lang.StringUTF16.CodePointsSpliterator#forEachRemaining(IntConsumer)->void::: code points spliterator for each remaining
java.lang.StringUTF16.CodePointsSpliterator#tryAdvance(IntConsumer)->boolean::: code points spliterator try advance
java.lang.StringUTF16.CodePointsSpliterator#estimateSize()->long::: code points spliterator estimate size
java.lang.StringUTF16.CodePointsSpliterator#characteristics()->int::: code points spliterator characteristics
java.lang.StringUTF16#putCharSB(byte[], int, int)->void::: string f16 put char b
java.lang.StringUTF16#putCharsSB(byte[], int, char[], int, int)->void::: string f16 put chars b
java.lang.StringUTF16#putCharsSB(byte[], int, CharSequence, int, int)->void::: string f16 put chars b
java.lang.StringUTF16#codePointAtSB(byte[], int, int)->int::: string f16 code point at b
java.lang.StringUTF16#codePointBeforeSB(byte[], int)->int::: string f16 code point before b
java.lang.StringUTF16#codePointCountSB(byte[], int, int)->int::: string f16 code point count b
java.lang.StringUTF16#getChars(int, int, int, byte[])->int::: string f16 get chars
java.lang.StringUTF16#getChars(long, int, int, byte[])->int::: string f16 get chars
java.lang.StringUTF16#contentEquals(byte[], byte[], int)->boolean::: string f16 content equals
java.lang.StringUTF16#contentEquals(byte[], CharSequence, int)->boolean::: string f16 content equals
java.lang.StringUTF16#putCharsAt(byte[], int, char, char, char, char)->int::: string f16 put chars at
java.lang.StringUTF16#putCharsAt(byte[], int, char, char, char, char, char)->int::: string f16 put chars at
java.lang.StringUTF16#charAt(byte[], int)->char::: string f16 char at
java.lang.StringUTF16#reverse(byte[], int)->void::: string f16 reverse
java.lang.StringUTF16#inflate(byte[], int, byte[], int, int)->void::: string f16 inflate
java.lang.StringUTF16#lastIndexOfLatin1(byte[], int, byte[], int, int)->int::: string f16 last index of latin1
java.lang.StringUTF16#getChars(int, int, byte[])->int:::This is a variant of Integer#getChars(int, int, byte[]), but for UTF-16 coder.
java.lang.StringUTF16#getChars(long, int, byte[])->int:::This is a variant of Long#getChars(long, int, byte[]), but for UTF-16 coder.
java.lang.StringUTF16#checkIndex(int, byte[])->void::: string f16 check index
java.lang.StringUTF16#checkOffset(int, byte[])->void::: string f16 check offset
java.lang.StringUTF16#checkBoundsBeginEnd(int, int, byte[])->void::: string f16 check bounds begin end
java.lang.StringUTF16#checkBoundsOffCount(int, int, byte[])->void::: string f16 check bounds off count
java.lang.System#setIn(InputStream)->void:::Reassigns the "standard" input stream
java.lang.System#setOut(PrintStream)->void:::Reassigns the "standard" output stream
java.lang.System#setErr(PrintStream)->void:::Reassigns the "standard" error output stream
java.lang.System#console()->Console:::Returns the unique java.io.Console Console object associated with the current Java virtual machine, if any.
java.lang.System#inheritedChannel()->Channel:::Returns the channel inherited from the entity that created this Java virtual machine
java.lang.System#setSecurityManager(SecurityManager)->void:::Sets the System security
java.lang.System#getSecurityManager()->SecurityManager:::Gets the system security interface.
java.lang.System#currentTimeMillis()->long:::Returns the current time in milliseconds
java.lang.System#nanoTime()->long:::Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds
java.lang.System#arraycopy(Object, int, Object, int, int)->void:::Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array
java.lang.System#identityHashCode(Object)->int:::Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode()
java.lang.System#getProperties()->Properties:::Determines the current system properties
java.lang.System#lineSeparator()->String:::Returns the system-dependent line separator string
java.lang.System#setProperties(Properties)->void:::Sets the system properties to the Properties argument
java.lang.System#getProperty(String)->String:::Gets the system property indicated by the specified key
java.lang.System#getProperty(String, String)->String:::Gets the system property indicated by the specified key
java.lang.System#setProperty(String, String)->String:::Sets the system property indicated by the specified key
java.lang.System#clearProperty(String)->String:::Removes the system property indicated by the specified key
java.lang.System#getenv(String)->String:::Gets the value of the specified environment variable
java.lang.System#getenv()->java.util.Map:::Returns an unmodifiable string map view of the current system environment
java.lang.System.Logger#getName()->String:::Returns the name of this logger.
java.lang.System.Logger#isLoggable(Level)->boolean:::Checks if a message of the given level would be logged by this logger.
java.lang.System.Logger#log(Level, String)->void:::Logs a message.
java.lang.System.Logger#log(Level, Supplier)->void:::Logs a lazily supplied message
java.lang.System.Logger#log(Level, Object)->void:::Logs a message produced from the given object
java.lang.System.Logger#log(Level, String, Throwable)->void:::Logs a message associated with a given throwable.
java.lang.System.Logger#log(Level, Supplier, Throwable)->void:::Logs a lazily supplied message associated with a given throwable
java.lang.System.Logger#log(Level, String, Object...)->void:::Logs a message with an optional list of parameters.
java.lang.System.Logger#log(Level, ResourceBundle, String, Throwable)->void:::Logs a localized message associated with a given throwable
java.lang.System.Logger#log(Level, ResourceBundle, String, Object...)->void:::Logs a message with resource bundle and an optional list of parameters
java.lang.System.LoggerFinder#getLogger(String, Module)->Logger:::Returns an instance of Logger Logger for the given module.
java.lang.System.LoggerFinder#getLocalizedLogger(String, ResourceBundle, Module)->Logger:::Returns a localizable instance of Logger Logger for the given module
java.lang.System.LoggerFinder#getLoggerFinder()->LoggerFinder:::Returns the LoggerFinder instance
java.lang.System.LoggerFinder#accessProvider()->LoggerFinder::: logger finder access provider
java.lang.System#getLogger(String)->Logger:::Returns an instance of Logger Logger for the caller's use.
java.lang.System#getLogger(String, ResourceBundle)->Logger:::Returns a localizable instance of Logger Logger for the caller's use
java.lang.System#exit(int)->void:::Terminates the currently running Java Virtual Machine
java.lang.System#gc()->void:::Runs the garbage collector
java.lang.System#runFinalization()->void:::Runs the finalization methods of any objects pending finalization
java.lang.System#load(String)->void:::Loads the native library specified by the filename argument
java.lang.System#loadLibrary(String)->void:::Loads the native library specified by the libname argument
java.lang.System#mapLibraryName(String)->String:::Maps a library name into a platform-specific string representing a native library.
java.lang.Terminator#setup()->void::: terminator setup
java.lang.Terminator#teardown()->void::: terminator teardown
java.lang.Thread#blockedOn(Interruptible)->void::: thread blocked on
java.lang.Thread#currentThread()->Thread:::Returns a reference to the currently executing thread object.
java.lang.Thread#yield()->void:::A hint to the scheduler that the current thread is willing to yield its current use of a processor
java.lang.Thread#sleep(long)->void:::Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers
java.lang.Thread#sleep(long, int)->void:::Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers
java.lang.Thread#onSpinWait()->void:::Indicates that the caller is momentarily unable to progress, until the occurrence of one or more actions on the part of other activities
java.lang.Thread#clone()->Object:::Throws CloneNotSupportedException as a Thread can not be meaningfully cloned
java.lang.Thread#start()->void:::Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread
java.lang.Thread#run()->void:::If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns
java.lang.Thread#stop()->void:::Forces the thread to stop executing
java.lang.Thread#interrupt()->void:::Interrupts this thread
java.lang.Thread#interrupted()->boolean:::Tests whether the current thread has been interrupted
java.lang.Thread#isInterrupted()->boolean:::Tests whether this thread has been interrupted
java.lang.Thread#isAlive()->boolean:::Tests if this thread is alive
java.lang.Thread#suspend()->void:::Suspends this thread
java.lang.Thread#resume()->void:::Resumes a suspended thread
java.lang.Thread#setPriority(int)->void:::Changes the priority of this thread
java.lang.Thread#getPriority()->int:::Returns this thread's priority.
java.lang.Thread#setName(String)->void:::Changes the name of this thread to be equal to the argument name
java.lang.Thread#getName()->String:::Returns this thread's name.
java.lang.Thread#getThreadGroup()->ThreadGroup:::Returns the thread group to which this thread belongs
java.lang.Thread#activeCount()->int:::Returns an estimate of the number of active threads in the current thread's java.lang.ThreadGroup thread group and its subgroups
java.lang.Thread#enumerate(Thread[])->int:::Copies into the specified array every active thread in the current thread's thread group and its subgroups
java.lang.Thread#countStackFrames()->int:::Counts the number of stack frames in this thread
java.lang.Thread#join(long)->void:::Waits at most millis milliseconds for this thread to die
java.lang.Thread#join(long, int)->void:::Waits at most millis milliseconds plus nanos nanoseconds for this thread to die
java.lang.Thread#join()->void:::Waits for this thread to die
java.lang.Thread#dumpStack()->void:::Prints a stack trace of the current thread to the standard error stream
java.lang.Thread#setDaemon(boolean)->void:::Marks this thread as either a #isDaemon daemon thread or a user thread
java.lang.Thread#isDaemon()->boolean:::Tests if this thread is a daemon thread.
java.lang.Thread#checkAccess()->void:::Determines if the currently running thread has permission to modify this thread
java.lang.Thread#toString()->String:::Returns a string representation of this thread, including the thread's name, priority, and thread group.
java.lang.Thread#getContextClassLoader()->ClassLoader:::Returns the context ClassLoader for this thread
java.lang.Thread#setContextClassLoader(ClassLoader)->void:::Sets the context ClassLoader for this Thread
java.lang.Thread#holdsLock(Object)->boolean:::Returns true if and only if the current thread holds the monitor lock on the specified object
java.lang.Thread#getStackTrace()->StackTraceElement[]:::Returns an array of stack trace elements representing the stack dump of this thread
java.lang.Thread#getAllStackTraces()->Map:::Returns a map of stack traces for all live threads
java.lang.Thread#getId()->long:::Returns the identifier of this Thread
java.lang.Thread#getState()->State:::Returns the state of this thread
java.lang.Thread.UncaughtExceptionHandler#uncaughtException(Thread, Throwable)->void:::Method invoked when the given thread terminates due to the given uncaught exception
java.lang.Thread#setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler)->void:::Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread
java.lang.Thread#getDefaultUncaughtExceptionHandler()->UncaughtExceptionHandler:::Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception
java.lang.Thread#getUncaughtExceptionHandler()->UncaughtExceptionHandler:::Returns the handler invoked when this thread abruptly terminates due to an uncaught exception
java.lang.Thread#setUncaughtExceptionHandler(UncaughtExceptionHandler)->void:::Set the handler invoked when this thread abruptly terminates due to an uncaught exception
java.lang.Thread#processQueue(ReferenceQueue>, ConcurrentMap>, ?>)->void:::Removes from the specified map any keys that have been enqueued on the specified reference queue.
java.lang.Thread.WeakClassKey#hashCode()->int:::Returns the identity hash code of the original referent.
java.lang.Thread.WeakClassKey#equals(Object)->boolean:::Returns true if the given object is this identical WeakClassKey instance, or, if this object's referent has not been cleared, if the given object is another WeakClassKey instance with the identical non-null referent as this one.
java.lang.ThreadGroup#getName()->String:::Returns the name of this thread group.
java.lang.ThreadGroup#getParent()->ThreadGroup:::Returns the parent of this thread group
java.lang.ThreadGroup#getMaxPriority()->int:::Returns the maximum priority of this thread group
java.lang.ThreadGroup#isDaemon()->boolean:::Tests if this thread group is a daemon thread group
java.lang.ThreadGroup#isDestroyed()->boolean:::Tests if this thread group has been destroyed.
java.lang.ThreadGroup#setDaemon(boolean)->void:::Changes the daemon status of this thread group
java.lang.ThreadGroup#setMaxPriority(int)->void:::Sets the maximum priority of the group
java.lang.ThreadGroup#parentOf(ThreadGroup)->boolean:::Tests if this thread group is either the thread group argument or one of its ancestor thread groups.
java.lang.ThreadGroup#checkAccess()->void:::Determines if the currently running thread has permission to modify this thread group
java.lang.ThreadGroup#activeCount()->int:::Returns an estimate of the number of active threads in this thread group and its subgroups
java.lang.ThreadGroup#enumerate(Thread[])->int:::Copies into the specified array every active thread in this thread group and its subgroups
java.lang.ThreadGroup#enumerate(Thread[], boolean)->int:::Copies into the specified array every active thread in this thread group
java.lang.ThreadGroup#activeGroupCount()->int:::Returns an estimate of the number of active groups in this thread group and its subgroups
java.lang.ThreadGroup#enumerate(ThreadGroup[])->int:::Copies into the specified array references to every active subgroup in this thread group and its subgroups
java.lang.ThreadGroup#enumerate(ThreadGroup[], boolean)->int:::Copies into the specified array references to every active subgroup in this thread group
java.lang.ThreadGroup#stop()->void:::Stops all threads in this thread group
java.lang.ThreadGroup#interrupt()->void:::Interrupts all threads in this thread group
java.lang.ThreadGroup#suspend()->void:::Suspends all threads in this thread group
java.lang.ThreadGroup#resume()->void:::Resumes all threads in this thread group
java.lang.ThreadGroup#destroy()->void:::Destroys this thread group and all of its subgroups
java.lang.ThreadGroup#addUnstarted()->void:::Increments the count of unstarted threads in the thread group
java.lang.ThreadGroup#add(Thread)->void:::Adds the specified thread to this thread group
java.lang.ThreadGroup#threadStartFailed(Thread)->void:::Notifies the group that the thread t has failed an attempt to start
java.lang.ThreadGroup#threadTerminated(Thread)->void:::Notifies the group that the thread t has terminated
java.lang.ThreadGroup#list()->void:::Prints information about this thread group to the standard output
java.lang.ThreadGroup#list(PrintStream, int)->void::: thread group list
java.lang.ThreadGroup#uncaughtException(Thread, Throwable)->void:::Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific Thread.UncaughtExceptionHandler installed
java.lang.ThreadGroup#allowThreadSuspension(boolean)->boolean:::Used by VM to control lowmem implicit suspension.
java.lang.ThreadGroup#toString()->String:::Returns a string representation of this Thread group.
java.lang.ThreadLocal#initialValue()->T:::Returns the current thread's "initial value" for this thread-local variable
java.lang.ThreadLocal#withInitial(Supplier)->ThreadLocal:::Creates a thread local variable
java.lang.ThreadLocal#get()->T:::Returns the value in the current thread's copy of this thread-local variable
java.lang.ThreadLocal#isPresent()->boolean:::Returns true if there is a value in the current thread's copy of this thread-local variable, even if that values is null.
java.lang.ThreadLocal#set(T)->void:::Sets the current thread's copy of this thread-local variable to the specified value
java.lang.ThreadLocal#remove()->void:::Removes the current thread's value for this thread-local variable
java.lang.ThreadLocal#getMap(Thread)->ThreadLocalMap:::Get the map associated with a ThreadLocal
java.lang.ThreadLocal#createMap(Thread, T)->void:::Create the map associated with a ThreadLocal
java.lang.ThreadLocal#createInheritedMap(ThreadLocalMap)->ThreadLocalMap:::Factory method to create map of inherited thread locals
java.lang.ThreadLocal#childValue(T)->T:::Method childValue is visibly defined in subclass InheritableThreadLocal, but is internally defined here for the sake of providing createInheritedMap factory method without needing to subclass the map class in InheritableThreadLocal
java.lang.ThreadLocal.SuppliedThreadLocal#initialValue()->T::: supplied thread local initial value
java.lang.Throwable#getMessage()->String:::Returns the detail message string of this throwable.
java.lang.Throwable#getLocalizedMessage()->String:::Creates a localized description of this throwable
java.lang.Throwable#getCause()->Throwable:::Returns the cause of this throwable or null if the cause is nonexistent or unknown
java.lang.Throwable#initCause(Throwable)->Throwable:::Initializes the cause of this throwable to the specified value
java.lang.Throwable#toString()->String:::Returns a short description of this throwable
java.lang.Throwable#printStackTrace()->void:::Prints this throwable and its backtrace to the standard error stream
java.lang.Throwable#printStackTrace(PrintStream)->void:::Prints this throwable and its backtrace to the specified print stream.
java.lang.Throwable#printStackTrace(PrintWriter)->void:::Prints this throwable and its backtrace to the specified print writer.
java.lang.Throwable#fillInStackTrace()->Throwable:::Fills in the execution stack trace
java.lang.Throwable#getStackTrace()->StackTraceElement[]:::Provides programmatic access to the stack trace information printed by #printStackTrace()
java.lang.Throwable#setStackTrace(StackTraceElement[])->void:::Sets the stack trace elements that will be returned by #getStackTrace() and printed by #printStackTrace() and related methods
java.lang.Throwable#addSuppressed(Throwable)->void:::Appends the specified exception to the exceptions that were suppressed in order to deliver this exception
java.lang.Throwable#getSuppressed()->Throwable[]:::Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception
java.lang.TypeNotPresentException#typeName()->String:::Returns the fully qualified name of the unavailable type.
java.lang.VersionProps#init(Properties)->void::: version props init
java.lang.VersionProps#parseVersionNumbers(String)->List::: version props parse version numbers
java.lang.VersionProps#versionNumbers()->List::: version props version numbers
java.lang.VersionProps#pre()->Optional::: version props pre
java.lang.VersionProps#build()->Optional::: version props build
java.lang.VersionProps#optional()->Optional::: version props optional
java.lang.VersionProps#print(boolean)->void:::In case you were wondering this method is called by java -version.
java.lang.VersionProps#println(boolean)->void:::This is the same as print except that it adds an extra line-feed at the end, typically used by the -showversion in the launcher
java.lang.WeakPairMap#containsKeyPair(K1, K2)->boolean:::Tests if the specified pair of keys are associated with a value in the WeakPairMap.
java.lang.WeakPairMap#get(K1, K2)->V:::Returns the value to which the specified pair of keys is mapped, or null if this WeakPairMap contains no mapping for the key pair
java.lang.WeakPairMap#put(K1, K2, V)->V:::Maps the specified key pair to the specified value in this WeakPairMap
java.lang.WeakPairMap#putIfAbsent(K1, K2, V)->V:::If the specified key pair is not already associated with a value, associates it with the given value and returns null, else does nothing and returns the currently associated value.
java.lang.WeakPairMap#computeIfAbsent(K1, K2, BiFunction)->V:::If the specified key pair is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this WeakPairMap unless null
java.lang.WeakPairMap#values()->Collection:::Returns a Collection view of the values contained in this WeakPairMap

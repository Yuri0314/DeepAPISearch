AbstractStringBuilder#compareTo(AbstractStringBuilder):::Compares the objects of two AbstractStringBuilder implementations lexicographically.:::this.isLatin1->StringUTF16.compareTo->StringLatin1.compareTo->this.isLatin1->StringUTF16.compareToLatin1->StringLatin1.compareToUTF16
AbstractStringBuilder#length():::Returns the length (character count).:::
AbstractStringBuilder#capacity():::Returns the current capacity:::
AbstractStringBuilder#ensureCapacity(int):::Ensures that the capacity is at least equal to the specified minimum:::this.ensureCapacityInternal
AbstractStringBuilder#trimToSize():::Attempts to reduce storage used for the character sequence:::Arrays.copyOf
AbstractStringBuilder#setLength(int):::Sets the length of the character sequence:::this.ensureCapacityInternal->this.isLatin1->StringUTF16.fillNull->StringLatin1.fillNull
AbstractStringBuilder#charAt(int):::Returns the char value in this sequence at the specified index:::this.checkIndex->this.isLatin1->StringUTF16.charAt
AbstractStringBuilder#codePointAt(int):::Returns the character (Unicode code point) at the specified index:::this.checkIndex->this.isLatin1->StringUTF16.codePointAtSB
AbstractStringBuilder#codePointBefore(int):::Returns the character (Unicode code point) before the specified index:::this.isLatin1->StringUTF16.codePointBeforeSB
AbstractStringBuilder#codePointCount(int, int):::Returns the number of Unicode code points in the specified text range of this sequence:::this.isLatin1->StringUTF16.codePointCountSB
AbstractStringBuilder#offsetByCodePoints(int, int):::Returns the index within this sequence that is offset from the given index by codePointOffset code points:::Character.offsetByCodePoints
AbstractStringBuilder#getChars(int, int, char[], int):::Characters are copied from this sequence into the destination character array dst:::this.checkRangeSIOOBE->this.checkRange->this.isLatin1->StringUTF16.getChars->StringLatin1.getChars
AbstractStringBuilder#setCharAt(int, char):::The character at the specified index is set to ch:::this.checkIndex->this.isLatin1->StringLatin1.canEncode->this.isLatin1->this.inflate->StringUTF16.putCharSB
AbstractStringBuilder#append(Object):::Appends the string representation of the Object argument:::String.valueOf->this.append
AbstractStringBuilder#append(String):::Appends the specified string to this character sequence:::this.appendNull->str.length->this.ensureCapacityInternal->this.putStringAt
AbstractStringBuilder#append(CharSequence, int, int):::Appends a subsequence of the specified CharSequence to this sequence:::s.length->this.checkRange->this.ensureCapacityInternal->this.appendChars
AbstractStringBuilder#append(char[]):::Appends the string representation of the char array argument to this sequence:::this.ensureCapacityInternal->this.appendChars
AbstractStringBuilder#append(char[], int, int):::Appends the string representation of a subarray of the char array argument to this sequence:::this.checkRange->this.ensureCapacityInternal->this.appendChars
AbstractStringBuilder#append(boolean):::Appends the string representation of the boolean argument to the sequence:::this.ensureCapacityInternal->this.isLatin1->StringUTF16.putCharsAt->StringUTF16.putCharsAt
AbstractStringBuilder#append(char):::Appends the string representation of the char argument to this sequence:::this.ensureCapacityInternal->this.isLatin1->StringLatin1.canEncode->this.isLatin1->this.inflate->StringUTF16.putCharSB
AbstractStringBuilder#append(int):::Appends the string representation of the int argument to this sequence:::Integer.stringSize->this.ensureCapacityInternal->this.isLatin1->StringUTF16.getChars->Integer.getChars
AbstractStringBuilder#append(long):::Appends the string representation of the long argument to this sequence:::Long.stringSize->this.ensureCapacityInternal->this.isLatin1->StringUTF16.getChars->Long.getChars
AbstractStringBuilder#append(float):::Appends the string representation of the float argument to this sequence:::FloatingDecimal.appendTo
AbstractStringBuilder#append(double):::Appends the string representation of the double argument to this sequence:::FloatingDecimal.appendTo
AbstractStringBuilder#delete(int, int):::Removes the characters in a substring of this sequence:::this.checkRangeSIOOBE->this.shift
AbstractStringBuilder#appendCodePoint(int):::Appends the string representation of the codePoint argument to this sequence:::Character.isBmpCodePoint->this.append->Character.toChars->this.append
AbstractStringBuilder#deleteCharAt(int):::Removes the char at the specified position in this sequence:::this.checkIndex->this.shift
AbstractStringBuilder#replace(int, int, String):::Replaces the characters in a substring of this sequence with characters in the specified String:::this.checkRangeSIOOBE->str.length->this.ensureCapacityInternal->this.shift->this.putStringAt
AbstractStringBuilder#substring(int):::Returns a new String that contains a subsequence of characters currently contained in this character sequence:::this.substring
AbstractStringBuilder#subSequence(int, int):::Returns a new character sequence that is a subsequence of this sequence:::this.substring
AbstractStringBuilder#substring(int, int):::Returns a new String that contains a subsequence of characters currently contained in this sequence:::this.checkRangeSIOOBE->this.isLatin1->StringLatin1.newString->StringUTF16.newString
AbstractStringBuilder#insert(int, char[], int, int):::Inserts the string representation of a subarray of the str array argument into this sequence:::this.checkOffset->this.checkRangeSIOOBE->this.ensureCapacityInternal->this.shift->this.putCharsAt
AbstractStringBuilder#insert(int, Object):::Inserts the string representation of the Object argument into this character sequence:::String.valueOf->this.insert
AbstractStringBuilder#insert(int, String):::Inserts the string into this character sequence:::this.checkOffset->str.length->this.ensureCapacityInternal->this.shift->this.putStringAt
AbstractStringBuilder#insert(int, char[]):::Inserts the string representation of the char array argument into this sequence:::this.checkOffset->this.ensureCapacityInternal->this.shift->this.putCharsAt
AbstractStringBuilder#insert(int, CharSequence):::Inserts the specified CharSequence into this sequence:::this.insert->s.length->this.insert
AbstractStringBuilder#insert(int, CharSequence, int, int):::Inserts a subsequence of the specified CharSequence into this sequence:::this.checkOffset->s.length->this.checkRange->this.ensureCapacityInternal->this.shift->this.putCharsAt
AbstractStringBuilder#insert(int, boolean):::Inserts the string representation of the boolean argument into this sequence:::String.valueOf->this.insert
AbstractStringBuilder#insert(int, char):::Inserts the string representation of the char argument into this sequence:::this.checkOffset->this.ensureCapacityInternal->this.shift->this.isLatin1->StringLatin1.canEncode->this.isLatin1->this.inflate->StringUTF16.putCharSB
AbstractStringBuilder#insert(int, int):::Inserts the string representation of the second int argument into this sequence:::String.valueOf->this.insert
AbstractStringBuilder#insert(int, long):::Inserts the string representation of the long argument into this sequence:::String.valueOf->this.insert
AbstractStringBuilder#insert(int, float):::Inserts the string representation of the float argument into this sequence:::String.valueOf->this.insert
AbstractStringBuilder#insert(int, double):::Inserts the string representation of the double argument into this sequence:::String.valueOf->this.insert
AbstractStringBuilder#indexOf(String):::Returns the index within this string of the first occurrence of the specified substring:::this.indexOf
AbstractStringBuilder#indexOf(String, int):::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index:::String.indexOf
AbstractStringBuilder#lastIndexOf(String):::Returns the index within this string of the last occurrence of the specified substring:::this.lastIndexOf
AbstractStringBuilder#lastIndexOf(String, int):::Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index:::String.lastIndexOf
AbstractStringBuilder#reverse():::Causes this character sequence to be replaced by the reverse of the sequence:::StringUTF16.reverse
AbstractStringBuilder#toString():::Returns a string representing the data in this sequence:::
AbstractStringBuilder#getValue():::Needed by String for the contentEquals method.:::
Appendable#append(CharSequence):::Appends the specified character sequence to this Appendable:::
Appendable#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this Appendable:::
Appendable#append(char):::Appends the specified character to this Appendable.:::
AutoCloseable#close():::Closes this resource, relinquishing any underlying resources:::
Boolean#parseBoolean(String):::Parses the string argument as a boolean:::"true".equalsIgnoreCase
Boolean#booleanValue():::Returns the value of this Boolean object as a boolean primitive.:::
Boolean#valueOf(boolean):::Returns a Boolean instance representing the specified boolean value:::
Boolean#valueOf(String):::Returns a Boolean with a value represented by the specified string:::this.parseBoolean
Boolean#toString(boolean):::Returns a String object representing the specified boolean:::
Boolean#toString():::Returns a String object representing this Boolean's value:::
Boolean#hashCode():::Returns a hash code for this Boolean object.:::Boolean.hashCode
Boolean#hashCode(boolean):::Returns a hash code for a boolean value; compatible with Boolean.hashCode().:::
Boolean#equals(Object):::Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object.:::((Boolean) obj).booleanValue
Boolean#getBoolean(String):::Returns true if and only if the system property named by the argument exists and is equal to, ignoring case, the string "true":::System.getProperty->this.parseBoolean
Boolean#compareTo(Boolean):::Compares this Boolean instance with another.:::this.compare
Boolean#compare(boolean, boolean):::Compares two boolean values:::
Boolean#logicalAnd(boolean, boolean):::Returns the result of applying the logical AND operator to the specified boolean operands.:::
Boolean#logicalOr(boolean, boolean):::Returns the result of applying the logical OR operator to the specified boolean operands.:::
Boolean#logicalXor(boolean, boolean):::Returns the result of applying the logical XOR operator to the specified boolean operands.:::
Byte#toString(byte):::Returns a new String object representing the specified byte:::Integer.toString
Byte#valueOf(byte):::Returns a Byte instance representing the specified byte value:::
Byte#parseByte(String, int):::Parses the string argument as a signed byte in the radix specified by the second argument:::Integer.parseInt
Byte#parseByte(String):::Parses the string argument as a signed decimal byte:::this.parseByte
Byte#valueOf(String, int):::Returns a Byte object holding the value extracted from the specified String when parsed with the radix given by the second argument:::this.parseByte->this.valueOf
Byte#valueOf(String):::Returns a Byte object holding the value given by the specified String:::this.valueOf
Byte#decode(String):::Decodes a String into a Byte:::Integer.decode->this.valueOf
Byte#byteValue():::Returns the value of this Byte as a byte.:::
Byte#shortValue():::Returns the value of this Byte as a short after a widening primitive conversion.:::
Byte#intValue():::Returns the value of this Byte as an int after a widening primitive conversion.:::
Byte#longValue():::Returns the value of this Byte as a long after a widening primitive conversion.:::
Byte#floatValue():::Returns the value of this Byte as a float after a widening primitive conversion.:::
Byte#doubleValue():::Returns the value of this Byte as a double after a widening primitive conversion.:::
Byte#toString():::Returns a String object representing this Byte's value:::Integer.toString
Byte#hashCode():::Returns a hash code for this Byte; equal to the result of invoking intValue().:::Byte.hashCode
Byte#hashCode(byte):::Returns a hash code for a byte value; compatible with Byte.hashCode().:::
Byte#equals(Object):::Compares this object to the specified object:::((Byte) obj).byteValue
Byte#compareTo(Byte):::Compares two Byte objects numerically.:::this.compare
Byte#compare(byte, byte):::Compares two byte values numerically:::
Byte#compareUnsigned(byte, byte):::Compares two byte values numerically treating the values as unsigned.:::Byte.toUnsignedInt->Byte.toUnsignedInt
Byte#toUnsignedInt(byte):::Converts the argument to an int by an unsigned conversion:::
Byte#toUnsignedLong(byte):::Converts the argument to a long by an unsigned conversion:::
Character.Subset#equals(Object):::Compares two Subset objects for equality:::
Character.Subset#hashCode():::Returns the standard hash code as defined by the Object#hashCode method:::super.hashCode
Character.Subset#toString():::Returns the name of this subset.:::
Character.UnicodeBlock#of(char):::Returns the object representing the Unicode block containing the given character, or null if the character is not a member of a defined block:::this.of
Character.UnicodeBlock#of(int):::Returns the object representing the Unicode block containing the given character (Unicode code point), or null if the character is not a member of a defined block.:::this.isValidCodePoint->String.format
Character.UnicodeBlock#forName(String):::Returns the UnicodeBlock with the given name:::blockName.toUpperCase->map.get
Character#valueOf(char):::Returns a Character instance representing the specified char value:::
Character#charValue():::Returns the value of this Character object.:::
Character#hashCode():::Returns a hash code for this Character; equal to the result of invoking charValue().:::Character.hashCode
Character#hashCode(char):::Returns a hash code for a char value; compatible with Character.hashCode().:::
Character#equals(Object):::Compares this object against the specified object:::((Character) obj).charValue
Character#toString():::Returns a String object representing this Character's value:::String.valueOf
Character#toString(char):::Returns a String object representing the specified char:::String.valueOf
Character#toString(int):::Returns a String object representing the specified character (Unicode code point):::String.valueOfCodePoint
Character#isValidCodePoint(int):::Determines whether the specified code point is a valid  Unicode code point value.:::
Character#isBmpCodePoint(int):::Determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP):::
Character#isSupplementaryCodePoint(int):::Determines whether the specified character (Unicode code point) is in the supplementary character range.:::
Character#isHighSurrogate(char):::Determines if the given char value is a  Unicode high-surrogate code unit (also known as leading-surrogate code unit):::
Character#isLowSurrogate(char):::Determines if the given char value is a  Unicode low-surrogate code unit (also known as trailing-surrogate code unit):::
Character#isSurrogate(char):::Determines if the given char value is a Unicode surrogate code unit:::
Character#isSurrogatePair(char, char):::Determines whether the specified pair of char values is a valid  Unicode surrogate pair:::this.isHighSurrogate->this.isLowSurrogate
Character#charCount(int):::Determines the number of char values needed to represent the specified character (Unicode code point):::
Character#toCodePoint(char, char):::Converts the specified surrogate pair to its supplementary code point value:::
Character#codePointAt(CharSequence, int):::Returns the code point at the given index of the CharSequence:::seq.charAt->this.isHighSurrogate->seq.length->seq.charAt->this.isLowSurrogate->this.toCodePoint
Character#codePointAt(char[], int):::Returns the code point at the given index of the char array:::this.codePointAtImpl
Character#codePointAt(char[], int, int):::Returns the code point at the given index of the char array, where only array elements with index less than limit can be used:::this.codePointAtImpl
Character#codePointBefore(CharSequence, int):::Returns the code point preceding the given index of the CharSequence:::seq.charAt->this.isLowSurrogate->seq.charAt->this.isHighSurrogate->this.toCodePoint
Character#codePointBefore(char[], int):::Returns the code point preceding the given index of the char array:::this.codePointBeforeImpl
Character#codePointBefore(char[], int, int):::Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used:::this.codePointBeforeImpl
Character#highSurrogate(int):::Returns the leading surrogate (a  high surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding:::
Character#lowSurrogate(int):::Returns the trailing surrogate (a  low surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding:::
Character#toChars(int, char[], int):::Converts the specified character (Unicode code point) to its UTF-16 representation:::this.isBmpCodePoint->this.isValidCodePoint->String.format->this.toSurrogates
Character#toChars(int):::Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array:::this.isBmpCodePoint->this.isValidCodePoint->String.format->this.toSurrogates
Character#codePointCount(CharSequence, int, int):::Returns the number of Unicode code points in the text range of the specified char sequence:::seq.length->seq.charAt->this.isHighSurrogate->seq.charAt->this.isLowSurrogate
Character#codePointCount(char[], int, int):::Returns the number of Unicode code points in a subarray of the char array argument:::this.codePointCountImpl
Character#offsetByCodePoints(CharSequence, int, int):::Returns the index within the given char sequence that is offset from the given index by codePointOffset code points:::seq.length->seq.charAt->this.isLowSurrogate->seq.charAt->this.isHighSurrogate->seq.charAt->this.isHighSurrogate->seq.charAt->this.isLowSurrogate
Character#offsetByCodePoints(char[], int, int, int, int):::Returns the index within the given char subarray that is offset from the given index by codePointOffset code points:::this.offsetByCodePointsImpl
Character#isLowerCase(char):::Determines if the specified character is a lowercase character:::this.isLowerCase
Character#isLowerCase(int):::Determines if the specified character (Unicode code point) is a lowercase character:::this.getType->CharacterData.of(codePoint).isOtherLowercase
Character#isUpperCase(char):::Determines if the specified character is an uppercase character:::this.isUpperCase
Character#isUpperCase(int):::Determines if the specified character (Unicode code point) is an uppercase character:::this.getType->CharacterData.of(codePoint).isOtherUppercase
Character#isTitleCase(char):::Determines if the specified character is a titlecase character:::this.isTitleCase
Character#isTitleCase(int):::Determines if the specified character (Unicode code point) is a titlecase character:::this.getType
Character#isDigit(char):::Determines if the specified character is a digit:::this.isDigit
Character#isDigit(int):::Determines if the specified character (Unicode code point) is a digit:::this.getType
Character#isDefined(char):::Determines if a character is defined in Unicode:::this.isDefined
Character#isDefined(int):::Determines if a character (Unicode code point) is defined in Unicode:::this.getType
Character#isLetter(char):::Determines if the specified character is a letter:::this.isLetter
Character#isLetter(int):::Determines if the specified character (Unicode code point) is a letter:::this.getType
Character#isLetterOrDigit(char):::Determines if the specified character is a letter or digit:::this.isLetterOrDigit
Character#isLetterOrDigit(int):::Determines if the specified character (Unicode code point) is a letter or digit:::this.getType
Character#isJavaLetter(char):::Determines if the specified character is permissible as the first character in a Java identifier:::this.isJavaIdentifierStart
Character#isJavaLetterOrDigit(char):::Determines if the specified character may be part of a Java identifier as other than the first character:::this.isJavaIdentifierPart
Character#isAlphabetic(int):::Determines if the specified character (Unicode code point) is an alphabet:::this.getType->CharacterData.of(codePoint).isOtherAlphabetic
Character#isIdeographic(int):::Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.:::CharacterData.of(codePoint).isIdeographic
Character#isJavaIdentifierStart(char):::Determines if the specified character is permissible as the first character in a Java identifier:::this.isJavaIdentifierStart
Character#isJavaIdentifierStart(int):::Determines if the character (Unicode code point) is permissible as the first character in a Java identifier:::CharacterData.of(codePoint).isJavaIdentifierStart
Character#isJavaIdentifierPart(char):::Determines if the specified character may be part of a Java identifier as other than the first character:::this.isJavaIdentifierPart
Character#isJavaIdentifierPart(int):::Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character:::CharacterData.of(codePoint).isJavaIdentifierPart
Character#isUnicodeIdentifierStart(char):::Determines if the specified character is permissible as the first character in a Unicode identifier:::this.isUnicodeIdentifierStart
Character#isUnicodeIdentifierStart(int):::Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier:::CharacterData.of(codePoint).isUnicodeIdentifierStart
Character#isUnicodeIdentifierPart(char):::Determines if the specified character may be part of a Unicode identifier as other than the first character:::this.isUnicodeIdentifierPart
Character#isUnicodeIdentifierPart(int):::Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character:::CharacterData.of(codePoint).isUnicodeIdentifierPart
Character#isIdentifierIgnorable(char):::Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier:::this.isIdentifierIgnorable
Character#isIdentifierIgnorable(int):::Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier:::CharacterData.of(codePoint).isIdentifierIgnorable
Character#toLowerCase(char):::Converts the character argument to lowercase using case mapping information from the UnicodeData file:::this.toLowerCase
Character#toLowerCase(int):::Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file:::CharacterData.of(codePoint).toLowerCase
Character#toUpperCase(char):::Converts the character argument to uppercase using case mapping information from the UnicodeData file:::this.toUpperCase
Character#toUpperCase(int):::Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file:::CharacterData.of(codePoint).toUpperCase
Character#toTitleCase(char):::Converts the character argument to titlecase using case mapping information from the UnicodeData file:::this.toTitleCase
Character#toTitleCase(int):::Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file:::CharacterData.of(codePoint).toTitleCase
Character#digit(char, int):::Returns the numeric value of the character ch in the specified radix:::this.digit
Character#digit(int, int):::Returns the numeric value of the specified character (Unicode code point) in the specified radix:::CharacterData.of(codePoint).digit
Character#getNumericValue(char):::Returns the int value that the specified Unicode character represents:::this.getNumericValue
Character#getNumericValue(int):::Returns the int value that the specified character (Unicode code point) represents:::CharacterData.of(codePoint).getNumericValue
Character#isSpace(char):::Determines if the specified character is ISO-LATIN-1 white space:::
Character#isSpaceChar(char):::Determines if the specified character is a Unicode space character:::this.isSpaceChar
Character#isSpaceChar(int):::Determines if the specified character (Unicode code point) is a Unicode space character:::this.getType
Character#isWhitespace(char):::Determines if the specified character is white space according to Java:::this.isWhitespace
Character#isWhitespace(int):::Determines if the specified character (Unicode code point) is white space according to Java:::CharacterData.of(codePoint).isWhitespace
Character#isISOControl(char):::Determines if the specified character is an ISO control character:::this.isISOControl
Character#isISOControl(int):::Determines if the referenced character (Unicode code point) is an ISO control character:::
Character#getType(char):::Returns a value indicating a character's general category:::this.getType
Character#getType(int):::Returns a value indicating a character's general category.:::CharacterData.of(codePoint).getType
Character#forDigit(int, int):::Determines the character representation for a specific digit in the specified radix:::
Character#getDirectionality(char):::Returns the Unicode directionality property for the given character:::this.getDirectionality
Character#getDirectionality(int):::Returns the Unicode directionality property for the given character (Unicode code point):::CharacterData.of(codePoint).getDirectionality
Character#isMirrored(char):::Determines whether the character is mirrored according to the Unicode specification:::this.isMirrored
Character#isMirrored(int):::Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification:::CharacterData.of(codePoint).isMirrored
Character#compareTo(Character):::Compares two Character objects numerically.:::this.compare
Character#compare(char, char):::Compares two char values numerically:::
Character#toUpperCaseEx(int):::Converts the character (Unicode code point) argument to uppercase using information from the UnicodeData file.:::this.isValidCodePoint->CharacterData.of(codePoint).toUpperCaseEx
Character#toUpperCaseCharArray(int):::Converts the character (Unicode code point) argument to uppercase using case mapping information from the SpecialCasing file in the Unicode specification:::this.isBmpCodePoint->CharacterData.of(codePoint).toUpperCaseCharArray
Character#reverseBytes(char):::Returns the value obtained by reversing the order of the bytes in the specified char value.:::
Character#getName(int):::Returns the Unicode name of the specified character codePoint, or null if the code point is #UNASSIGNED unassigned:::this.isValidCodePoint->String.format->CharacterName.getInstance().getName->this.getType->UnicodeBlock.of->block.toString().replace->Integer.toHexString(codePoint).toUpperCase->Integer.toHexString(codePoint).toUpperCase
Character#codePointOf(String):::Returns the code point value of the Unicode character specified by the given Unicode character name:::name.trim().toUpperCase->CharacterName.getInstance().getCodePoint->name.lastIndexOf->name.length->Integer.parseInt->this.isValidCodePoint->this.getName->name.equals
CharacterData00#findInCharMap(int):::Finds the character in the uppercase mapping table.:::
CharSequence#length():::Returns the length of this character sequence:::
CharSequence#charAt(int):::Returns the char value at the specified index:::
CharSequence#subSequence(int, int):::Returns a CharSequence that is a subsequence of this sequence:::
CharSequence#toString():::Returns a string containing the characters in this sequence in the same order as this sequence:::
CharSequence#chars():::Returns a stream of int zero-extending the char values from this sequence:::this.length->this.hasNext->this.charAt->this.charAt->block.accept->this.length->StreamSupport.intStream
CharSequence#codePoints():::Returns a stream of code point values from this sequence:::this.length->this.charAt->Character.isHighSurrogate->this.charAt->Character.isLowSurrogate->block.accept->Character.toCodePoint->block.accept->block.accept->this.length->this.length->this.charAt->Character.isHighSurrogate->this.charAt->Character.isLowSurrogate->Character.toCodePoint->StreamSupport.intStream
CharSequence#compare(CharSequence, CharSequence):::Compares two CharSequence instances lexicographically:::Objects.requireNonNull->Objects.requireNonNull->cs1.getClass->cs2.getClass->((Comparable<Object>) cs1).compareTo->cs1.charAt->cs2.charAt->cs1.length->cs2.length->Math.min->cs1.length->cs2.length
Class#toString():::Converts the object to a string:::this.isInterface->this.isPrimitive->this.getName
Class#toGenericString():::Returns a string describing this Class, including information about modifiers and type parameters:::this.isPrimitive->this.isArray->this.getModifiers->Modifier.classModifiers->Modifier.toString->sb.append->sb.append->this.isAnnotation->sb.append->this.isInterface->this.isEnum->sb.append->sb.append->sb.append->sb.append->this.getName->sb.append->component.getComponentType->component.isArray->component.getName->sb.append->component.getTypeParameters->typeparm.getTypeName->sj.add->sj.toString->sb.append->sb.append->sb.toString->this.toString
Class#forName(String):::Returns the Class object associated with the class or interface with the given string name:::Reflection.getCallerClass->ClassLoader.getClassLoader->this.forName0
Class#forName(String, boolean, ClassLoader):::Returns the Class object associated with the class or interface with the given string name, using the given class loader:::System.getSecurityManager->Reflection.getCallerClass->ClassLoader.getClassLoader->sm.checkPermission->this.forName0
Class#forName(Module, String):::Returns the Class with the given  binary name in the given module:::Objects.requireNonNull->Objects.requireNonNull->System.getSecurityManager->module.getClassLoader->Reflection.getCallerClass->caller.getModule->sm.checkPermission->AccessController.doPrivileged->BootLoader.loadClass->cl.loadClass
Class#newInstance():::Creates a new instance of the class represented by this Class object:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->new InstantiationException(getName()).initCause->this.getConstructor0->getReflectionFactory().copyConstructor->java.security.AccessController.doPrivileged->Reflection.getCallerClass->tmpConstructor.getModifiers->Reflection.ensureMemberAccess->e.getTargetException->Unsafe.getUnsafe().throwException->tmpConstructor.newInstance
Class#isInstance(Object):::Determines if the specified Object is assignment-compatible with the object represented by this Class:::
Class#isAssignableFrom(Class):::Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter:::
Class#isInterface():::Determines if the specified Class object represents an interface type.:::
Class#isArray():::Determines if this Class object represents an array class.:::
Class#isPrimitive():::Determines if the specified Class object represents a primitive type:::
Class#isAnnotation():::Returns true if this Class object represents an annotation type:::this.getModifiers
Class#isSynthetic():::Returns true if this class is a synthetic class; returns false otherwise.:::this.getModifiers
Class#getName():::Returns the  name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String:::this.initClassName
Class#getClassLoader():::Returns the class loader for the class:::this.getClassLoader0->System.getSecurityManager->Reflection.getCallerClass->ClassLoader.checkClassLoaderPermission
Class#getModule():::Returns the module that this class or interface is a member of:::
Class#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order:::this.getGenericInfo->info.getTypeParameters
Class#getSuperclass():::Returns the Class representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class:::
Class#getGenericSuperclass():::Returns the Type representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class:::this.getGenericInfo->this.getSuperclass->this.isInterface->info.getSuperclass
Class#getPackage():::Gets the package of this class:::this.isPrimitive->this.isArray->this.getClassLoader0->BootLoader.definePackage->cl.definePackage
Class#getPackageName():::Returns the fully qualified package name:::c.getComponentType->c.isArray->c.isPrimitive->c.getName->cn.lastIndexOf->cn.substring(0, dot).intern
Class#getInterfaces():::Returns the interfaces directly implemented by the class or interface represented by this object:::this.getInterfaces
Class#getGenericInterfaces():::Returns the Types representing the interfaces directly implemented by the class or interface represented by this object:::this.getGenericInfo->info.getSuperInterfaces->this.getInterfaces
Class#getComponentType():::Returns the Class representing the component type of an array:::this.isArray
Class#getModifiers():::Returns the Java language modifiers for this class or interface, encoded in an integer:::
Class#getSigners():::Gets the signers of this class.:::
Class#setSigners(Object[]):::Set the signers of this class.:::
Class#getEnclosingMethod():::If this Class object represents a local or anonymous class within a method, returns a java.lang.reflect.Method Method object representing the immediately enclosing method of the underlying class:::this.getEnclosingMethodInfo->enclosingInfo.isMethod->enclosingInfo.getDescriptor->this.getFactory->MethodRepository.make->typeInfo.getReturnType->this.toClass->typeInfo.getParameterTypes->this.toClass->enclosingInfo.getEnclosingClass->System.getSecurityManager->Reflection.getCallerClass->enclosingCandidate.checkMemberAccess->enclosingCandidate.privateGetDeclaredMethods->this.getReflectionFactory->enclosingInfo.getName->m.getName().equals->fact.getExecutableSharedParameterTypes->this.arrayContentsEq->m.getReturnType().equals->fact.copyMethod
Class#getEnclosingConstructor():::If this Class object represents a local or anonymous class within a constructor, returns a java.lang.reflect.Constructor Constructor object representing the immediately enclosing constructor of the underlying class:::this.getEnclosingMethodInfo->enclosingInfo.isConstructor->enclosingInfo.getDescriptor->this.getFactory->ConstructorRepository.make->typeInfo.getParameterTypes->this.toClass->enclosingInfo.getEnclosingClass->System.getSecurityManager->Reflection.getCallerClass->enclosingCandidate.checkMemberAccess->enclosingCandidate.privateGetDeclaredConstructors->this.getReflectionFactory->fact.getExecutableSharedParameterTypes->this.arrayContentsEq->fact.copyConstructor
Class#getDeclaringClass():::If the class or interface represented by this Class object is a member of another class, returns the Class object representing the class in which it was declared:::this.getDeclaringClass0->System.getSecurityManager->Reflection.getCallerClass->ClassLoader.getClassLoader->candidate.checkPackageAccess
Class#getEnclosingClass():::Returns the immediately enclosing class of the underlying class:::this.getEnclosingMethodInfo->enclosingInfo.getEnclosingClass->this.getDeclaringClass0->System.getSecurityManager->Reflection.getCallerClass->ClassLoader.getClassLoader->enclosingCandidate.checkPackageAccess
Class#getSimpleName():::Returns the simple name of the underlying class as given in the source code:::this.reflectionData->this.getSimpleName0
Class#getTypeName():::Return an informative string for the name of this type.:::this.isArray->cl.getComponentType->cl.isArray->cl.getName->sb.append->sb.append->sb.toString->this.getName
Class#getCanonicalName():::Returns the canonical name of the underlying class as defined by the Java Language Specification:::this.reflectionData->this.getCanonicalName0
Class#isAnonymousClass():::Returns true if and only if the underlying class is an anonymous class.:::this.isArray->this.isLocalOrAnonymousClass->this.getSimpleBinaryName0
Class#isLocalClass():::Returns true if and only if the underlying class is a local class.:::this.isLocalOrAnonymousClass->this.isArray->this.getSimpleBinaryName0
Class#isMemberClass():::Returns true if and only if the underlying class is a member class.:::this.isLocalOrAnonymousClass->this.getDeclaringClass0
Class#getClasses():::Returns an array containing Class objects representing all the public classes and interfaces that are members of the class represented by this Class object:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->java.security.AccessController.doPrivileged
Class#getFields():::Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.privateGetPublicFields->this.copyFields
Class#getMethods():::Returns an array containing Method objects reflecting all the public methods of the class or interface represented by this Class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.privateGetPublicMethods->this.copyMethods
Class#getConstructors():::Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.privateGetDeclaredConstructors->this.copyConstructors
Class#getField(String):::Returns a Field object that reflects the specified public member field of the class or interface represented by this Class object:::Objects.requireNonNull->System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.getField0->getReflectionFactory().copyField
Class#getMethod(String, Class...):::Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object:::Objects.requireNonNull->System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.getMethod0->this.methodToString->getReflectionFactory().copyMethod
Class#getConstructor(Class...):::Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.getConstructor0->getReflectionFactory().copyConstructor
Class#getDeclaredClasses():::Returns an array of Class objects reflecting all the classes and interfaces declared as members of the class represented by this Class object:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.getDeclaredClasses0
Class#getDeclaredFields():::Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.privateGetDeclaredFields->this.copyFields
Class#getDeclaredMethods():::Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.privateGetDeclaredMethods->this.copyMethods
Class#getDeclaredConstructors():::Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.privateGetDeclaredConstructors->this.copyConstructors
Class#getDeclaredField(String):::Returns a Field object that reflects the specified declared field of the class or interface represented by this Class object:::Objects.requireNonNull->System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.privateGetDeclaredFields->this.searchFields->getReflectionFactory().copyField
Class#getDeclaredMethod(String, Class...):::Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object:::Objects.requireNonNull->System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.privateGetDeclaredMethods->this.searchMethods->this.methodToString->getReflectionFactory().copyMethod
Class#getDeclaredPublicMethods(String, Class...):::Returns the list of Method objects for the declared public methods of this class or interface that have the specified method name and parameter types.:::this.privateGetDeclaredMethods->this.getReflectionFactory->method.getName().equals->factory.getExecutableSharedParameterTypes->Arrays.equals->factory.copyMethod->result.add
Class#getDeclaredConstructor(Class...):::Returns a Constructor object that reflects the specified constructor of the class or interface represented by this Class object:::System.getSecurityManager->Reflection.getCallerClass->this.checkMemberAccess->this.getConstructor0->getReflectionFactory().copyConstructor
Class#getResourceAsStream(String):::Finds a resource with a given name:::this.resolveName->this.getModule->thisModule.isNamed->Resources.canEncapsulate->Reflection.getCallerClass->this.isOpenToCaller->thisModule.getName->this.getClassLoader0->cl.findResource->url.openStream->((BuiltinClassLoader) cl).findResourceAsStream->BootLoader.findResourceAsStream->this.getClassLoader0->cl.getResourceAsStream->ClassLoader.getSystemResourceAsStream
Class#getResource(String):::Finds a resource with a given name:::this.resolveName->this.getModule->thisModule.isNamed->Resources.canEncapsulate->Reflection.getCallerClass->this.isOpenToCaller->thisModule.getName->this.getClassLoader0->cl.findResource->BootLoader.findResource->this.getClassLoader0->cl.getResource->ClassLoader.getSystemResource
Class#getProtectionDomain():::Returns the ProtectionDomain of this class:::System.getSecurityManager->sm.checkPermission->this.getProtectionDomain0->perms.add
Class#desiredAssertionStatus():::Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked:::this.getClassLoader0->this.desiredAssertionStatus0->this.getName->loader.desiredAssertionStatus->this.desiredAssertionStatus0
Class#isEnum():::Returns true if and only if this class was declared as an enum in the source code.:::this.getModifiers->this.getSuperclass
Class#getEnumConstants():::Returns the elements of this enum class or null if this Class object does not represent an enum type.:::this.getEnumConstantsShared->values.clone
Class#getEnumConstantsShared():::Returns the elements of this enum class or null if this Class object does not represent an enum type; identical to getEnumConstants except that the result is uncloned, cached, and shared by all callers.:::this.isEnum->this.getMethod->java.security.AccessController.doPrivileged->values.invoke
Class#enumConstantDirectory():::Returns a map from simple name to enum constant:::this.getEnumConstantsShared->this.getName->((Enum<?>) constant).name->directory.put
Class#cast(Object):::Casts an object to the class or interface represented by this Class object.:::this.isInstance->this.cannotCastMsg
Class#asSubclass(Class):::Casts this Class object to represent a subclass of the class represented by the specified class object:::clazz.isAssignableFrom->this.toString
Class#getAnnotatedSuperclass():::Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class object:::this.isInterface->this.isArray->this.isPrimitive->this.getRawTypeAnnotations->this.getConstantPool->TypeAnnotationParser.buildAnnotatedSuperclass
Class#getAnnotatedInterfaces():::Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class object:::this.getRawTypeAnnotations->this.getConstantPool->TypeAnnotationParser.buildAnnotatedInterfaces
Class#getNestHost():::Returns the nest host of the nest to which the class or interface represented by this Class object belongs:::this.isPrimitive->this.isArray->this.getNestHost0->System.getSecurityManager->Reflection.getCallerClass->ClassLoader.getClassLoader->this.checkPackageAccess
Class#isNestmateOf(Class):::Determines if the given Class is a nestmate of the class or interface represented by this Class object:::this.isPrimitive->this.isArray->c.isPrimitive->c.isArray->this.getNestHost0->c.getNestHost0
Class#getNestMembers():::Returns an array containing Class objects representing all the classes and interfaces that are members of the nest to which the class or interface represented by this Class object belongs:::this.isPrimitive->this.isArray->this.getNestMembers0->System.getSecurityManager->Reflection.getCallerClass->ClassLoader.getClassLoader->this.checkPackageAccess
ClassLoader#getName():::Returns the name of this class loader or null if this class loader is not named.:::
ClassLoader#loadClass(String):::Loads the class with the specified binary name:::this.loadClass
ClassLoader#loadClass(String, boolean):::Loads the class with the specified binary name:::this.findLoadedClass->System.nanoTime->this.findBootstrapClassOrNull->parent.loadClass->System.nanoTime->this.findClass->PerfCounter.getParentDelegationTime().addTime->PerfCounter.getFindClassTime().addElapsedTimeFrom->PerfCounter.getFindClasses().increment->this.resolveClass->this.getClassLoadingLock
ClassLoader#loadClass(Module, String):::Loads the class with the specified binary name in a module defined to this class loader:::this.findLoadedClass->module.getName->this.findClass->c.getModule->this.getClassLoadingLock
ClassLoader#getClassLoadingLock(String):::Returns the lock object for class loading operations:::parallelLockMap.putIfAbsent
ClassLoader#findClass(String):::Finds the class with the specified binary name:::
ClassLoader#findClass(String, String):::Finds the class with the given binary name in a module defined to this class loader:::this.findClass
ClassLoader#defineClass(byte[], int, int):::Converts an array of bytes into an instance of class Class:::this.defineClass
ClassLoader#defineClass(String, byte[], int, int):::Converts an array of bytes into an instance of class Class:::this.defineClass
ClassLoader#defineClass(String, byte[], int, int, ProtectionDomain):::Converts an array of bytes into an instance of class Class, with a given ProtectionDomain:::this.preDefineClass->this.defineClassSourceLocation->this.defineClass1->this.postDefineClass
ClassLoader#defineClass(String, java.nio.ByteBuffer, ProtectionDomain):::Converts a java.nio.ByteBuffer ByteBuffer into an instance of class Class, with the given ProtectionDomain:::b.remaining->b.isDirect->b.hasArray->b.get->this.defineClass->b.array->b.position->b.arrayOffset->this.defineClass->this.preDefineClass->this.defineClassSourceLocation->b.position->this.defineClass2->this.postDefineClass
ClassLoader#resolveClass(Class):::Links the specified class:::
ClassLoader#findSystemClass(String):::Finds a class with the specified binary name, loading it if necessary:::getSystemClassLoader().loadClass
ClassLoader#findBootstrapClassOrNull(String):::Returns a class loaded by the bootstrap class loader; or return null if not found.:::this.checkName->this.findBootstrapClass
ClassLoader#findLoadedClass(String):::Returns the class with the given binary name if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that binary name:::this.checkName->this.findLoadedClass0
ClassLoader#setSigners(Class, Object[]):::Sets the signers of a class:::c.setSigners
ClassLoader#findResource(String, String):::Returns a URL to a resource in a module defined to this class loader:::this.findResource
ClassLoader#getResource(String):::Finds the resource with the given name:::Objects.requireNonNull->BootLoader.findResource->parent.getResource->this.findResource
ClassLoader#getResources(String):::Finds all the resources with the given name:::Objects.requireNonNull->BootLoader.findResources->parent.getResources->this.findResources
ClassLoader#resources(String):::Returns a stream whose elements are the URLs of all the resources with the given name:::Objects.requireNonNull->getResources(name).asIterator->Spliterators.spliteratorUnknownSize->StreamSupport.stream
ClassLoader#findResource(String):::Finds the resource with the given name:::
ClassLoader#findResources(String):::Returns an enumeration of java.net.URL URL objects representing all the resources with the given name:::Collections.emptyEnumeration
ClassLoader#registerAsParallelCapable():::Registers the caller as #isRegisteredAsParallelCapable() parallel capable:::Reflection.getCallerClass().asSubclass->ParallelLoaders.register
ClassLoader#isRegisteredAsParallelCapable():::Returns true if this class loader is registered as #registerAsParallelCapable parallel capable, otherwise false.:::this.getClass->ParallelLoaders.isRegistered
ClassLoader#getSystemResource(String):::Find a resource of the specified name from the search path used to load classes:::getSystemClassLoader().getResource
ClassLoader#getSystemResources(String):::Finds all resources of the specified name from the search path used to load classes:::getSystemClassLoader().getResources
ClassLoader#getResourceAsStream(String):::Returns an input stream for reading the specified resource:::Objects.requireNonNull->this.getResource->url.openStream
ClassLoader#getSystemResourceAsStream(String):::Open for reading, a resource of the specified name from the search path used to load classes:::this.getSystemResource->url.openStream
ClassLoader#getParent():::Returns the parent class loader for delegation:::System.getSecurityManager->Reflection.getCallerClass->this.checkClassLoaderPermission
ClassLoader#getUnnamedModule():::Returns the unnamed Module for this class loader.:::
ClassLoader#getPlatformClassLoader():::Returns the platform class loader:::System.getSecurityManager->this.getBuiltinPlatformClassLoader->Reflection.getCallerClass->this.checkClassLoaderPermission
ClassLoader#getSystemClassLoader():::Returns the system class loader:::this.getBuiltinAppClassLoader->VM.isBooted->System.getSecurityManager->Reflection.getCallerClass->this.checkClassLoaderPermission->VM.initLevel
ClassLoader#definePackage(Class):::Define a Package of the given Class object:::c.isPrimitive->c.isArray->c.getPackageName->c.getModule->this.definePackage
ClassLoader#definePackage(String, Module):::Defines a Package of the given name and module  This method does not throw IllegalArgumentException.:::name.isEmpty->m.isNamed->packages.get->packages.compute
ClassLoader#definePackage(String, String, String, String, String, String, String, URL):::Defines a package by name in this ClassLoader:::Objects.requireNonNull->packages.putIfAbsent
ClassLoader#getDefinedPackage(String):::Returns a Package of the given name that has been defined by this class loader.:::Objects.requireNonNull->packages.get->p.module->this.definePackage
ClassLoader#getDefinedPackages():::Returns all of the Packages that have been defined by this class loader:::packages().toArray
ClassLoader#getPackage(String):::Finds a package by name in this class loader and its ancestors:::this.getDefinedPackage->BootLoader.getDefinedPackage->parent.getPackage
ClassLoader#getPackages():::Returns all of the Packages that have been defined by this class loader and its ancestors:::this.packages->ld.packages->Stream.concat->Stream.concat(BootLoader.packages(), pkgs).toArray
ClassLoader#packages():::Returns a stream of Packages defined in this class loader:::packages.values().stream().map
ClassLoader#findLibrary(String):::Returns the absolute path name of a native library:::
ClassLoader#setDefaultAssertionStatus(boolean):::Sets the default assertion status for this class loader:::this.initializeJavaAssertionMaps
ClassLoader#setPackageAssertionStatus(String, boolean):::Sets the package default assertion status for the named package:::this.initializeJavaAssertionMaps->packageAssertionStatus.put
ClassLoader#setClassAssertionStatus(String, boolean):::Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein:::this.initializeJavaAssertionMaps->classAssertionStatus.put
ClassLoader#clearAssertionStatus():::Sets the default assertion status for this class loader to false and discards any package defaults or class assertion status settings associated with the class loader:::
ClassLoader#desiredAssertionStatus(String):::Returns the assertion status that would be assigned to the specified class if it were to be initialized at the time this method is invoked:::classAssertionStatus.get->result.booleanValue->className.lastIndexOf->packageAssertionStatus.get->result.booleanValue->className.substring->packageAssertionStatus.get->result.booleanValue->className.lastIndexOf
ClassLoader#createOrGetClassLoaderValueMap():::Returns the ConcurrentHashMap used as a storage for ClassLoaderValue(s) associated with this ClassLoader, creating it if it doesn't already exist.:::this.trySetObjectField
ClassLoaderHelper#mapAlternativeName(File):::Returns an alternate path name for the given file such that if the original pathname did not exist, then the file may be located at the alternate location:::
ClassNotFoundException#getException():::Returns the exception that was raised if an error occurred while attempting to load the class:::
ClassNotFoundException#getCause():::Returns the cause of this exception (the exception that was raised if an error occurred while attempting to load the class; otherwise null).:::
ClassValue#computeValue(Class):::Computes the given class's derived value for this ClassValue:::
ClassValue#get(Class):::Returns the value for the given class:::this.probeHomeLocation->this.match->e.value->this.getFromBackup
ClassValue#remove(Class):::Removes the associated value for the given class:::this.getMap->map.removeEntry
ClassValue#match(Entry):::Check that e is non-null, matches this ClassValue, and is live.:::e.get
ClassValue.Entry#value():::Fetch the value:::this.assertNotPromise
ClassValue.ClassValueMap#startEntry(ClassValue):::Initiate a query:::this.get->classValue.version->e.isPromise->e.version->e.refreshVersion->this.put->this.checkCacheLoad->this.addToCache->e.version->v.promise->this.put->v.promise->this.put
ClassValue.ClassValueMap#finishEntry(ClassValue, Entry):::Finish a query:::this.get->e0.isPromise->e0.version->e.version->classValue.version->e.version->e.refreshVersion->this.put->this.checkCacheLoad->this.addToCache->e.isPromise->this.remove
ClassValue.ClassValueMap#removeEntry(ClassValue):::Remove an entry.:::this.remove->e.isPromise->classValue.bumpVersion->this.removeStaleEntries->this.put
ClassValue.ClassValueMap#changeEntry(ClassValue, T):::Change the value for an entry.:::this.get->classValue.version->e0.version->e0.value->classValue.bumpVersion->this.removeStaleEntries->this.makeEntry->this.put->this.checkCacheLoad->this.addToCache
ClassValue.ClassValueMap#loadFromCache(Entry[], int):::Load the cache entry at the given (hashed) location.:::
ClassValue.ClassValueMap#probeHomeLocation(Entry[], ClassValue):::Look in the cache, at the home location for the given ClassValue.:::this.loadFromCache->classValue.castEntry
ClassValue.ClassValueMap#probeBackupLocations(Entry[], ClassValue):::Given that first probe was a collision, retry at nearby locations.:::classValue.match->this.entryDislocation->classValue.castEntry->e.isLive
Comparable#compareTo(T):::Compares this object with the specified object for order:::
Compiler#compileClass(Class):::Compiles the specified class.:::
Compiler#compileClasses(String):::Compiles all classes whose name matches the specified string.:::
Compiler#command(Object):::Examines the argument type and its fields and perform some documented operation:::
Compiler#enable():::Cause the Compiler to resume operation.:::
Compiler#disable():::Cause the Compiler to cease operation.:::
Double#toString(double):::Returns a string representation of the double argument:::FloatingDecimal.toJavaFormatString
Double#toHexString(double):::Returns a hexadecimal string representation of the double argument:::this.isFinite->Math.copySign->answer.append->answer.append->Math.abs->Double.doubleToLongBits->answer.append->Long.toHexString(signifBits).substring->answer.append->answer.append->answer.append->answer.append->answer.toString->Double.toString
Double#valueOf(String):::Returns a Double object holding the double value represented by the argument string s:::this.parseDouble
Double#valueOf(double):::Returns a Double instance representing the specified double value:::
Double#parseDouble(String):::Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double.:::FloatingDecimal.parseDouble
Double#isNaN(double):::Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.:::
Double#isInfinite(double):::Returns true if the specified number is infinitely large in magnitude, false otherwise.:::
Double#isFinite(double):::Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).:::Math.abs
Double#isNaN():::Returns true if this Double value is a Not-a-Number (NaN), false otherwise.:::this.isNaN
Double#isInfinite():::Returns true if this Double value is infinitely large in magnitude, false otherwise.:::this.isInfinite
Double#toString():::Returns a string representation of this Double object:::this.toString
Double#byteValue():::Returns the value of this Double as a byte after a narrowing primitive conversion.:::
Double#shortValue():::Returns the value of this Double as a short after a narrowing primitive conversion.:::
Double#intValue():::Returns the value of this Double as an int after a narrowing primitive conversion.:::
Double#longValue():::Returns the value of this Double as a long after a narrowing primitive conversion.:::
Double#floatValue():::Returns the value of this Double as a float after a narrowing primitive conversion.:::
Double#doubleValue():::Returns the double value of this Double object.:::
Double#hashCode():::Returns a hash code for this Double object:::Double.hashCode
Double#hashCode(double):::Returns a hash code for a double value; compatible with Double.hashCode().:::this.doubleToLongBits
Double#equals(Object):::Compares this object against the specified object:::this.doubleToLongBits->this.doubleToLongBits
Double#doubleToLongBits(double):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout:::this.isNaN->this.doubleToRawLongBits
Double#doubleToRawLongBits(double):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout, preserving Not-a-Number (NaN) values:::
Double#longBitsToDouble(long):::Returns the double value corresponding to a given bit representation:::
Double#compareTo(Double):::Compares two Double objects numerically:::Double.compare
Double#compare(double, double):::Compares the two specified double values:::Double.doubleToLongBits->Double.doubleToLongBits
Double#sum(double, double):::Adds two double values together as per the + operator.:::
Double#max(double, double):::Returns the greater of two double values as if by calling Math#max(double, double) Math.max.:::Math.max
Double#min(double, double):::Returns the smaller of two double values as if by calling Math#min(double, double) Math.min.:::Math.min
Enum#name():::Returns the name of this enum constant, exactly as declared in its enum declaration:::
Enum#ordinal():::Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero):::
Enum#toString():::Returns the name of this enum constant, as contained in the declaration:::
Enum#equals(Object):::Returns true if the specified object is equal to this enum constant.:::
Enum#hashCode():::Returns a hash code for this enum constant.:::super.hashCode
Enum#clone():::Throws CloneNotSupportedException:::
Enum#compareTo(E):::Compares this enum with the specified object for order:::self.getClass->other.getClass->self.getDeclaringClass->other.getDeclaringClass
Enum#getDeclaringClass():::Returns the Class object corresponding to this enum constant's enum type:::this.getClass->clazz.getSuperclass
Enum#valueOf(Class, String):::Returns the enum constant of the specified enum type with the specified name:::enumType.enumConstantDirectory().get->enumType.getCanonicalName
Enum#finalize():::enum classes cannot have finalize methods.:::
EnumConstantNotPresentException#enumType():::Returns the type of the missing enum constant.:::
EnumConstantNotPresentException#constantName():::Returns the name of the missing enum constant.:::
ExceptionInInitializerError#getException():::Returns the exception that occurred during a static initialization that caused this error to be created:::
ExceptionInInitializerError#getCause():::Returns the cause of this error (the exception that occurred during a static initialization that caused this error to be created).:::
Float#toString(float):::Returns a string representation of the float argument:::FloatingDecimal.toJavaFormatString
Float#toHexString(float):::Returns a hexadecimal string representation of the float argument:::Math.abs->Double.toHexString->Math.scalb->Double.toHexString->s.replaceFirst
Float#valueOf(String):::Returns a Float object holding the float value represented by the argument string s:::this.parseFloat
Float#valueOf(float):::Returns a Float instance representing the specified float value:::
Float#parseFloat(String):::Returns a new float initialized to the value represented by the specified String, as performed by the valueOf method of class Float.:::FloatingDecimal.parseFloat
Float#isNaN(float):::Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.:::
Float#isInfinite(float):::Returns true if the specified number is infinitely large in magnitude, false otherwise.:::
Float#isFinite(float):::Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).:::Math.abs
Float#isNaN():::Returns true if this Float value is a Not-a-Number (NaN), false otherwise.:::this.isNaN
Float#isInfinite():::Returns true if this Float value is infinitely large in magnitude, false otherwise.:::this.isInfinite
Float#toString():::Returns a string representation of this Float object:::Float.toString
Float#byteValue():::Returns the value of this Float as a byte after a narrowing primitive conversion.:::
Float#shortValue():::Returns the value of this Float as a short after a narrowing primitive conversion.:::
Float#intValue():::Returns the value of this Float as an int after a narrowing primitive conversion.:::
Float#longValue():::Returns value of this Float as a long after a narrowing primitive conversion.:::
Float#floatValue():::Returns the float value of this Float object.:::
Float#doubleValue():::Returns the value of this Float as a double after a widening primitive conversion.:::
Float#hashCode():::Returns a hash code for this Float object:::Float.hashCode
Float#hashCode(float):::Returns a hash code for a float value; compatible with Float.hashCode().:::this.floatToIntBits
Float#equals(Object):::Compares this object against the specified object:::this.floatToIntBits->this.floatToIntBits
Float#floatToIntBits(float):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout:::this.isNaN->this.floatToRawIntBits
Float#floatToRawIntBits(float):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout, preserving Not-a-Number (NaN) values:::
Float#intBitsToFloat(int):::Returns the float value corresponding to a given bit representation:::
Float#compareTo(Float):::Compares two Float objects numerically:::Float.compare
Float#compare(float, float):::Compares the two specified float values:::Float.floatToIntBits->Float.floatToIntBits
Float#sum(float, float):::Adds two float values together as per the + operator.:::
Float#max(float, float):::Returns the greater of two float values as if by calling Math#max(float, float) Math.max.:::Math.max
Float#min(float, float):::Returns the smaller of two float values as if by calling Math#min(float, float) Math.min.:::Math.min
InheritableThreadLocal#childValue(T):::Computes the child's initial value for this inheritable thread-local variable as a function of the parent's value at the time the child thread is created:::
InheritableThreadLocal#getMap(Thread):::Get the map associated with a ThreadLocal.:::
InheritableThreadLocal#createMap(Thread, T):::Create the map associated with a ThreadLocal.:::
Integer#toString(int, int):::Returns a string representation of the first argument in the radix specified by the second argument:::this.toString->StringLatin1.newString->this.toStringUTF16
Integer#toUnsignedString(int, int):::Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument:::this.toUnsignedLong->Long.toUnsignedString
Integer#toHexString(int):::Returns a string representation of the integer argument as an unsigned integer in base&nbsp;16:::this.toUnsignedString0
Integer#toOctalString(int):::Returns a string representation of the integer argument as an unsigned integer in base&nbsp;8:::this.toUnsignedString0
Integer#toBinaryString(int):::Returns a string representation of the integer argument as an unsigned integer in base&nbsp;2:::this.toUnsignedString0
Integer#formatUnsignedInt(int, int, char[], int, int):::Format an int (treated as unsigned) into a character buffer:::
Integer#formatUnsignedInt(int, int, byte[], int, int):::byte[]/LATIN1 version:::
Integer#toString(int):::Returns a String object representing the specified integer:::this.stringSize->StringUTF16.getChars->this.getChars
Integer#toUnsignedString(int):::Returns a string representation of the argument as an unsigned decimal value:::this.toUnsignedLong->Long.toString
Integer#getChars(int, int, byte[]):::Places characters representing the integer i into the character array buf:::
Integer#stringSize(int):::Returns the string representation size for a given int value.:::
Integer#parseInt(String, int):::Parses the string argument as a signed integer in the radix specified by the second argument:::s.length->NumberFormatException.forInputString->s.charAt->NumberFormatException.forInputString->NumberFormatException.forInputString->s.charAt->Character.digit->NumberFormatException.forInputString->NumberFormatException.forInputString
Integer#parseInt(CharSequence, int, int, int):::Parses the CharSequence argument as a signed int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1:::Objects.requireNonNull->s.length->NumberFormatException.forInputString->s.charAt->NumberFormatException.forCharSequence->NumberFormatException.forCharSequence->s.charAt->Character.digit->NumberFormatException.forCharSequence->NumberFormatException.forCharSequence
Integer#parseInt(String):::Parses the string argument as a signed decimal integer:::this.parseInt
Integer#parseUnsignedInt(String, int):::Parses the string argument as an unsigned integer in the radix specified by the second argument:::s.length->NumberFormatException.forInputString->s.charAt->Long.parseLong->String.format->this.parseInt->String.format
Integer#parseUnsignedInt(CharSequence, int, int, int):::Parses the CharSequence argument as an unsigned int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1:::Objects.requireNonNull->s.length->s.charAt->Long.parseLong->String.format->this.parseInt->String.format
Integer#parseUnsignedInt(String):::Parses the string argument as an unsigned decimal integer:::this.parseUnsignedInt
Integer#valueOf(String, int):::Returns an Integer object holding the value extracted from the specified String when parsed with the radix given by the second argument:::this.parseInt->Integer.valueOf
Integer#valueOf(String):::Returns an Integer object holding the value of the specified String:::this.parseInt->Integer.valueOf
Integer#valueOf(int):::Returns an Integer instance representing the specified int value:::
Integer#byteValue():::Returns the value of this Integer as a byte after a narrowing primitive conversion.:::
Integer#shortValue():::Returns the value of this Integer as a short after a narrowing primitive conversion.:::
Integer#intValue():::Returns the value of this Integer as an int.:::
Integer#longValue():::Returns the value of this Integer as a long after a widening primitive conversion.:::
Integer#floatValue():::Returns the value of this Integer as a float after a widening primitive conversion.:::
Integer#doubleValue():::Returns the value of this Integer as a double after a widening primitive conversion.:::
Integer#toString():::Returns a String object representing this Integer's value:::this.toString
Integer#hashCode():::Returns a hash code for this Integer.:::Integer.hashCode
Integer#hashCode(int):::Returns a hash code for an int value; compatible with Integer.hashCode().:::
Integer#equals(Object):::Compares this object to the specified object:::((Integer) obj).intValue
Integer#getInteger(String):::Determines the integer value of the system property with the specified name:::this.getInteger
Integer#getInteger(String, int):::Determines the integer value of the system property with the specified name:::this.getInteger->Integer.valueOf
Integer#getInteger(String, Integer):::Returns the integer value of the system property with the specified name:::System.getProperty->Integer.decode
Integer#decode(String):::Decodes a String into an Integer:::nm.length->nm.charAt->nm.startsWith->nm.startsWith->nm.startsWith->nm.startsWith->nm.length->nm.startsWith->nm.startsWith->nm.substring->nm.substring->Integer.valueOf->nm.substring->Integer.valueOf->Integer.valueOf
Integer#compareTo(Integer):::Compares two Integer objects numerically.:::this.compare
Integer#compare(int, int):::Compares two int values numerically:::
Integer#compareUnsigned(int, int):::Compares two int values numerically treating the values as unsigned.:::this.compare
Integer#toUnsignedLong(int):::Converts the argument to a long by an unsigned conversion:::
Integer#divideUnsigned(int, int):::Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value:::this.toUnsignedLong->this.toUnsignedLong
Integer#remainderUnsigned(int, int):::Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.:::this.toUnsignedLong->this.toUnsignedLong
Integer#highestOneBit(int):::Returns an int value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified int value:::this.numberOfLeadingZeros
Integer#lowestOneBit(int):::Returns an int value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified int value:::
Integer#numberOfLeadingZeros(int):::Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified int value:::
Integer#numberOfTrailingZeros(int):::Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified int value:::
Integer#bitCount(int):::Returns the number of one-bits in the two's complement binary representation of the specified int value:::
Integer#rotateLeft(int, int):::Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits:::
Integer#rotateRight(int, int):::Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits:::
Integer#reverse(int):::Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value.:::this.reverseBytes
Integer#signum(int):::Returns the signum function of the specified int value:::
Integer#reverseBytes(int):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified int value.:::
Integer#sum(int, int):::Adds two integers together as per the + operator.:::
Integer#max(int, int):::Returns the greater of two int values as if by calling Math#max(int, int) Math.max.:::Math.max
Integer#min(int, int):::Returns the smaller of two int values as if by calling Math#min(int, int) Math.min.:::Math.min
Iterable#iterator():::Returns an iterator over elements of type T.:::
Iterable#forEach(Consumer):::Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception:::Objects.requireNonNull->action.accept
Iterable#spliterator():::Creates a Spliterator over the elements described by this Iterable.:::this.iterator->Spliterators.spliteratorUnknownSize
LiveStackFrame#getMonitors():::Return the monitors held by this stack frame:::
LiveStackFrame#getLocals():::Gets the local variable array of this stack frame:::
LiveStackFrame#getStack():::Gets the operand stack of this stack frame:::
LiveStackFrame.PrimitiveSlot#size():::Returns the size, in bytes, of the slot.:::
LiveStackFrame.PrimitiveSlot#intValue():::Returns the int value if this primitive value is of size 4:::this.size
LiveStackFrame.PrimitiveSlot#longValue():::Returns the long value if this primitive value is of size 8:::this.size
LiveStackFrame#getStackWalker():::Gets StackWalker that can get locals and operands.:::EnumSet.noneOf->this.getStackWalker
LiveStackFrame#getStackWalker(Set):::Gets a StackWalker instance with the given options specifying the stack frame information it can access, and which will traverse at most the given maxDepth number of stack frames:::System.getSecurityManager->sm.checkPermission->StackWalker.newInstance
Long#toString(long, int):::Returns a string representation of the first argument in the radix specified by the second argument:::this.toString->StringLatin1.newString->this.toStringUTF16
Long#toUnsignedString(long, int):::Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument:::this.toBinaryString->this.toUnsignedString0->this.toOctalString->this.toString->this.toHexString->this.toUnsignedString0->toUnsignedBigInteger(i).toString->this.toString
Long#toHexString(long):::Returns a string representation of the long argument as an unsigned integer in base&nbsp;16:::this.toUnsignedString0
Long#toOctalString(long):::Returns a string representation of the long argument as an unsigned integer in base&nbsp;8:::this.toUnsignedString0
Long#toBinaryString(long):::Returns a string representation of the long argument as an unsigned integer in base&nbsp;2:::this.toUnsignedString0
Long#toUnsignedString0(long, int):::Format a long (treated as unsigned) into a String.:::Long.numberOfLeadingZeros->Math.max->this.formatUnsignedLong0UTF16->this.formatUnsignedLong0
Long#formatUnsignedLong0(long, int, byte[], int, int):::byte[]/LATIN1 version:::
Long#toString(long):::Returns a String object representing the specified long:::this.stringSize->StringUTF16.getChars->this.getChars
Long#toUnsignedString(long):::Returns a string representation of the argument as an unsigned decimal value:::this.toUnsignedString
Long#getChars(long, int, byte[]):::Places characters representing the long i into the character array buf:::
Long#stringSize(long):::Returns the string representation size for a given long value.:::
Long#parseLong(String, int):::Parses the string argument as a signed long in the radix specified by the second argument:::s.length->NumberFormatException.forInputString->s.charAt->NumberFormatException.forInputString->NumberFormatException.forInputString->s.charAt->Character.digit->NumberFormatException.forInputString->NumberFormatException.forInputString
Long#parseLong(CharSequence, int, int, int):::Parses the CharSequence argument as a signed long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1:::Objects.requireNonNull->s.length->s.charAt->NumberFormatException.forCharSequence->NumberFormatException.forCharSequence->s.charAt->Character.digit->NumberFormatException.forCharSequence->NumberFormatException.forCharSequence
Long#parseLong(String):::Parses the string argument as a signed decimal long:::this.parseLong
Long#parseUnsignedLong(String, int):::Parses the string argument as an unsigned long in the radix specified by the second argument:::s.length->NumberFormatException.forInputString->s.charAt->this.parseLong->this.parseLong->s.charAt->Character.digit->String.format->String.format
Long#parseUnsignedLong(CharSequence, int, int, int):::Parses the CharSequence argument as an unsigned long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1:::Objects.requireNonNull->s.length->NumberFormatException.forInputString->s.charAt->this.parseLong->this.parseLong->s.charAt->Character.digit->s.subSequence->s.subSequence->String.format->s.subSequence->String.format
Long#parseUnsignedLong(String):::Parses the string argument as an unsigned decimal long:::this.parseUnsignedLong
Long#valueOf(String, int):::Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument:::this.parseLong->Long.valueOf
Long#valueOf(String):::Returns a Long object holding the value of the specified String:::this.parseLong->Long.valueOf
Long#valueOf(long):::Returns a Long instance representing the specified long value:::
Long#decode(String):::Decodes a String into a Long:::nm.length->nm.charAt->nm.startsWith->nm.startsWith->nm.startsWith->nm.startsWith->nm.length->nm.startsWith->nm.startsWith->nm.substring->nm.substring->Long.valueOf->nm.substring->Long.valueOf->Long.valueOf
Long#byteValue():::Returns the value of this Long as a byte after a narrowing primitive conversion.:::
Long#shortValue():::Returns the value of this Long as a short after a narrowing primitive conversion.:::
Long#intValue():::Returns the value of this Long as an int after a narrowing primitive conversion.:::
Long#longValue():::Returns the value of this Long as a long value.:::
Long#floatValue():::Returns the value of this Long as a float after a widening primitive conversion.:::
Long#doubleValue():::Returns the value of this Long as a double after a widening primitive conversion.:::
Long#toString():::Returns a String object representing this Long's value:::this.toString
Long#hashCode():::Returns a hash code for this Long:::Long.hashCode
Long#hashCode(long):::Returns a hash code for a long value; compatible with Long.hashCode().:::
Long#equals(Object):::Compares this object to the specified object:::((Long) obj).longValue
Long#getLong(String):::Determines the long value of the system property with the specified name:::this.getLong
Long#getLong(String, long):::Determines the long value of the system property with the specified name:::Long.getLong->Long.valueOf
Long#getLong(String, Long):::Returns the long value of the system property with the specified name:::System.getProperty->Long.decode
Long#compareTo(Long):::Compares two Long objects numerically.:::this.compare
Long#compare(long, long):::Compares two long values numerically:::
Long#compareUnsigned(long, long):::Compares two long values numerically treating the values as unsigned.:::this.compare
Long#divideUnsigned(long, long):::Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value:::this.compareUnsigned->toUnsignedBigInteger(dividend).divide(toUnsignedBigInteger(divisor)).longValue
Long#remainderUnsigned(long, long):::Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.:::this.compareUnsigned->toUnsignedBigInteger(dividend).remainder(toUnsignedBigInteger(divisor)).longValue
Long#highestOneBit(long):::Returns a long value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified long value:::this.numberOfLeadingZeros
Long#lowestOneBit(long):::Returns a long value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified long value:::
Long#numberOfLeadingZeros(long):::Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified long value:::Integer.numberOfLeadingZeros->Integer.numberOfLeadingZeros
Long#numberOfTrailingZeros(long):::Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified long value:::
Long#bitCount(long):::Returns the number of one-bits in the two's complement binary representation of the specified long value:::
Long#rotateLeft(long, int):::Returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits:::
Long#rotateRight(long, int):::Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits:::
Long#reverse(long):::Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified long value.:::this.reverseBytes
Long#signum(long):::Returns the signum function of the specified long value:::
Long#reverseBytes(long):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified long value.:::
Long#sum(long, long):::Adds two long values together as per the + operator.:::
Long#max(long, long):::Returns the greater of two long values as if by calling Math#max(long, long) Math.max.:::Math.max
Long#min(long, long):::Returns the smaller of two long values as if by calling Math#min(long, long) Math.min.:::Math.min
Math#sin(double):::Returns the trigonometric sine of an angle:::StrictMath.sin
Math#cos(double):::Returns the trigonometric cosine of an angle:::StrictMath.cos
Math#tan(double):::Returns the trigonometric tangent of an angle:::StrictMath.tan
Math#asin(double):::Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2:::StrictMath.asin
Math#acos(double):::Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi:::StrictMath.acos
Math#atan(double):::Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2:::StrictMath.atan
Math#toRadians(double):::Converts an angle measured in degrees to an approximately equivalent angle measured in radians:::
Math#toDegrees(double):::Converts an angle measured in radians to an approximately equivalent angle measured in degrees:::
Math#exp(double):::Returns Euler's number e raised to the power of a double value:::StrictMath.exp
Math#log(double):::Returns the natural logarithm (base e) of a double value:::StrictMath.log
Math#log10(double):::Returns the base 10 logarithm of a double value:::StrictMath.log10
Math#sqrt(double):::Returns the correctly rounded positive square root of a double value:::StrictMath.sqrt
Math#cbrt(double):::Returns the cube root of a double value:::StrictMath.cbrt
Math#IEEEremainder(double, double):::Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard:::StrictMath.IEEEremainder
Math#ceil(double):::Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer:::StrictMath.ceil
Math#floor(double):::Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer:::StrictMath.floor
Math#rint(double):::Returns the double value that is closest in value to the argument and is equal to a mathematical integer:::StrictMath.rint
Math#atan2(double, double):::Returns the angle theta from the conversion of rectangular coordinates (x,&nbsp;y) to polar coordinates (r,&nbsp;theta):::StrictMath.atan2
Math#pow(double, double):::Returns the value of the first argument raised to the power of the second argument:::StrictMath.pow
Math#round(float):::Returns the closest int to the argument, with ties rounding to positive infinity:::Float.floatToRawIntBits
Math#round(double):::Returns the closest long to the argument, with ties rounding to positive infinity:::Double.doubleToRawLongBits
Math#random():::Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0:::RandomNumberGeneratorHolder.randomNumberGenerator.nextDouble
Math#addExact(int, int):::Returns the sum of its arguments, throwing an exception if the result overflows an int.:::
Math#addExact(long, long):::Returns the sum of its arguments, throwing an exception if the result overflows a long.:::
Math#subtractExact(int, int):::Returns the difference of the arguments, throwing an exception if the result overflows an int.:::
Math#subtractExact(long, long):::Returns the difference of the arguments, throwing an exception if the result overflows a long.:::
Math#multiplyExact(int, int):::Returns the product of the arguments, throwing an exception if the result overflows an int.:::
Math#multiplyExact(long, int):::Returns the product of the arguments, throwing an exception if the result overflows a long.:::this.multiplyExact
Math#multiplyExact(long, long):::Returns the product of the arguments, throwing an exception if the result overflows a long.:::Math.abs->Math.abs
Math#incrementExact(int):::Returns the argument incremented by one, throwing an exception if the result overflows an int.:::
Math#incrementExact(long):::Returns the argument incremented by one, throwing an exception if the result overflows a long.:::
Math#decrementExact(int):::Returns the argument decremented by one, throwing an exception if the result overflows an int.:::
Math#decrementExact(long):::Returns the argument decremented by one, throwing an exception if the result overflows a long.:::
Math#negateExact(int):::Returns the negation of the argument, throwing an exception if the result overflows an int.:::
Math#negateExact(long):::Returns the negation of the argument, throwing an exception if the result overflows a long.:::
Math#toIntExact(long):::Returns the value of the long argument; throwing an exception if the value overflows an int.:::
Math#multiplyFull(int, int):::Returns the exact mathematical product of the arguments.:::
Math#multiplyHigh(long, long):::Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors.:::
Math#floorDiv(int, int):::Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient:::
Math#floorDiv(long, int):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient:::this.floorDiv
Math#floorDiv(long, long):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient:::
Math#floorMod(int, int):::Returns the floor modulus of the int arguments:::this.floorDiv
Math#floorMod(long, int):::Returns the floor modulus of the long and int arguments:::this.floorDiv
Math#floorMod(long, long):::Returns the floor modulus of the long arguments:::this.floorDiv
Math#abs(int):::Returns the absolute value of an int value:::
Math#abs(long):::Returns the absolute value of a long value:::
Math#abs(float):::Returns the absolute value of a float value:::
Math#abs(double):::Returns the absolute value of a double value:::
Math#max(int, int):::Returns the greater of two int values:::
Math#max(long, long):::Returns the greater of two long values:::
Math#max(float, float):::Returns the greater of two float values:::Float.floatToRawIntBits
Math#max(double, double):::Returns the greater of two double values:::Double.doubleToRawLongBits
Math#min(int, int):::Returns the smaller of two int values:::
Math#min(long, long):::Returns the smaller of two long values:::
Math#min(float, float):::Returns the smaller of two float values:::Float.floatToRawIntBits
Math#min(double, double):::Returns the smaller of two double values:::Double.doubleToRawLongBits
Math#fma(double, double, double):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double:::Double.isNaN->Double.isNaN->Double.isNaN->Double.isInfinite->Double.isInfinite->Double.isInfinite->(new BigDecimal(a)).multiply->product.add(new BigDecimal(c)).doubleValue->product.doubleValue->Double.isInfinite->Double.isFinite->Double.isInfinite
Math#fma(float, float, float):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float:::
Math#ulp(double):::Returns the size of an ulp of the argument:::this.getExponent->Math.abs->Double.longBitsToDouble->this.powerOfTwoD
Math#ulp(float):::Returns the size of an ulp of the argument:::this.getExponent->Math.abs->Float.intBitsToFloat->this.powerOfTwoF
Math#signum(double):::Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero:::Double.isNaN->this.copySign
Math#signum(float):::Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero:::Float.isNaN->this.copySign
Math#sinh(double):::Returns the hyperbolic sine of a double value:::StrictMath.sinh
Math#cosh(double):::Returns the hyperbolic cosine of a double value:::StrictMath.cosh
Math#tanh(double):::Returns the hyperbolic tangent of a double value:::StrictMath.tanh
Math#hypot(double, double):::Returns sqrt(x^2&nbsp;+y^2) without intermediate overflow or underflow:::StrictMath.hypot
Math#expm1(double):::Returns e^x&nbsp;-1:::StrictMath.expm1
Math#log1p(double):::Returns the natural logarithm of the sum of the argument and 1:::StrictMath.log1p
Math#copySign(double, double):::Returns the first floating-point argument with the sign of the second floating-point argument:::Double.longBitsToDouble
Math#copySign(float, float):::Returns the first floating-point argument with the sign of the second floating-point argument:::Float.intBitsToFloat
Math#getExponent(float):::Returns the unbiased exponent used in the representation of a float:::Float.floatToRawIntBits
Math#getExponent(double):::Returns the unbiased exponent used in the representation of a double:::Double.doubleToRawLongBits
Math#nextAfter(double, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument:::Double.doubleToRawLongBits->Double.longBitsToDouble->Double.doubleToRawLongBits->Double.longBitsToDouble
Math#nextAfter(float, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument:::Float.floatToRawIntBits->Float.intBitsToFloat->Float.floatToRawIntBits->Float.intBitsToFloat
Math#nextUp(double):::Returns the floating-point value adjacent to d in the direction of positive infinity:::Double.doubleToRawLongBits->Double.longBitsToDouble
Math#nextUp(float):::Returns the floating-point value adjacent to f in the direction of positive infinity:::Float.floatToRawIntBits->Float.intBitsToFloat
Math#nextDown(double):::Returns the floating-point value adjacent to d in the direction of negative infinity:::Double.isNaN->Double.doubleToRawLongBits->Double.longBitsToDouble
Math#nextDown(float):::Returns the floating-point value adjacent to f in the direction of negative infinity:::Float.isNaN->Float.floatToRawIntBits->Float.intBitsToFloat
Math#scalb(double, int):::Returns d &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set:::Math.min->Math.max->this.powerOfTwoD
Math#scalb(float, int):::Returns f &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set:::Math.min->Math.max->this.powerOfTwoD
Math#powerOfTwoD(int):::Returns a floating-point power of two in the normal range.:::Double.longBitsToDouble
Math#powerOfTwoF(int):::Returns a floating-point power of two in the normal range.:::Float.intBitsToFloat
Module#isNamed():::Returns true if this module is a named module.:::
Module#getName():::Returns the module name or null if this module is an unnamed module.:::
Module#getClassLoader():::Returns the ClassLoader for this module:::System.getSecurityManager->sm.checkPermission
Module#getDescriptor():::Returns the module descriptor for this module or null if this module is an unnamed module.:::
Module#getLayer():::Returns the module layer that contains this module or null if this module is not in a module layer:::this.isNamed->name.equals->ModuleLayer.boot
Module#canRead(Module):::Indicates if this module reads the given module:::Objects.requireNonNull->this.isNamed->other.isNamed->reads.contains->ReflectionData.reads.containsKeyPair->other.isNamed->ReflectionData.reads.containsKeyPair
Module#addReads(Module):::If the caller's module is this module then update this module to read the given module:::Objects.requireNonNull->this.isNamed->Reflection.getCallerClass->this.getCallerModule->this.implAddReads
Module#implAddReads(Module):::Updates this module to read another module.:::this.implAddReads
Module#implAddReadsAllUnnamed():::Updates this module to read all unnamed modules.:::this.implAddReads
Module#implAddReadsNoSync(Module):::Updates this module to read another module without notifying the VM.:::this.implAddReads
Module#isExported(String, Module):::Returns true if this module exports the given package to at least the given module:::Objects.requireNonNull->Objects.requireNonNull->this.implIsExportedOrOpen
Module#isOpen(String, Module):::Returns true if this module has opened a package to at least the given module:::Objects.requireNonNull->Objects.requireNonNull->this.implIsExportedOrOpen
Module#isExported(String):::Returns true if this module exports the given package unconditionally:::Objects.requireNonNull->this.implIsExportedOrOpen
Module#isOpen(String):::Returns true if this module has opened a package unconditionally:::Objects.requireNonNull->this.implIsExportedOrOpen
Module#isReflectivelyExported(String, Module):::Returns true if this module reflectively exports the given package to the given module.:::this.isReflectivelyExportedOrOpen
Module#isReflectivelyOpened(String, Module):::Returns true if this module reflectively opens the given package to the given module.:::this.isReflectivelyExportedOrOpen
Module#addExports(String, Module):::If the caller's module is this module then update this module to export the given package to the given module:::Objects.requireNonNull->this.isNamed->Reflection.getCallerClass->this.getCallerModule->this.implAddExportsOrOpens
Module#addOpens(String, Module):::If this module has opened a package to at least the caller module then update this module to open the package to the given module:::Objects.requireNonNull->this.isNamed->Reflection.getCallerClass->this.getCallerModule->this.isOpen->this.implAddExportsOrOpens
Module#implAddExports(String):::Updates this module to export a package unconditionally.:::this.implAddExportsOrOpens
Module#implAddExports(String, Module):::Updates this module to export a package to another module.:::this.implAddExportsOrOpens
Module#implAddExportsToAllUnnamed(String):::Updates this module to export a package to all unnamed modules.:::this.implAddExportsOrOpens
Module#implAddExportsNoSync(String):::Updates this export to export a package unconditionally without notifying the VM.:::pn.replace->this.implAddExportsOrOpens
Module#implAddExportsNoSync(String, Module):::Updates a module to export a package to another module without notifying the VM.:::pn.replace->this.implAddExportsOrOpens
Module#implAddOpens(String):::Updates this module to open a package unconditionally.:::this.implAddExportsOrOpens
Module#implAddOpens(String, Module):::Updates this module to open a package to another module.:::this.implAddExportsOrOpens
Module#implAddOpensToAllUnnamed(String):::Updates this module to open a package to all unnamed modules.:::this.implAddExportsOrOpens
Module#implAddOpensToAllUnnamed(Iterator):::Updates a module to open all packages returned by the given iterator to all unnamed modules.:::jdk.internal.misc.VM.isModuleSystemInited->iterator.next->openPackages.putIfAbsent->prev.add->this.addExportsToAllUnnamed0->iterator.hasNext
Module#addUses(Class):::If the caller's module is this module then update this module to add a service dependence on the given service type:::Objects.requireNonNull->this.isNamed->descriptor.isAutomatic->Reflection.getCallerClass->this.getCallerModule->this.implAddUses
Module#implAddUses(Class):::Update this module to add a service dependence on the given service type.:::this.canUse->ReflectionData.uses.putIfAbsent
Module#canUse(Class):::Indicates if this module has a service dependence on the given service type:::Objects.requireNonNull->this.isNamed->descriptor.isAutomatic->service.getName->descriptor.uses().contains->ReflectionData.uses.containsKeyPair
Module#getPackages():::Returns the set of package names for the packages in this module:::this.isNamed->loader.packages->BootLoader.packages->Collectors.toSet->packages.map(Package::getName).collect->descriptor.packages
Module#defineModules(Configuration, Function, ModuleLayer):::Defines all module in a configuration to the runtime.:::ModuleLayer.boot->cf.modules().size->resolvedModule.name->clf.apply->nameToLoader.put->ClassLoaders.platformClassLoader->loaders.add->cf.modules->resolvedModule.reference->mref.descriptor->descriptor.name->nameToLoader.get->name.equals->mref.location().orElse->Object.class.getModule->nameToModule.put->cf.modules->resolvedModule.reference->mref.descriptor->descriptor.name->nameToModule.get->Map.of->other.configuration->this.findModule->layer.parents->nameToSource.isEmpty->other.name->nameToSource.put->other.name->nameToModule.get->reads.add->this.addReads0->resolvedModule.reads->descriptor.isAutomatic->m.implAddReads->descriptor.isOpen->descriptor.isAutomatic->descriptor.opens().isEmpty->layer.parents->this.initExportsAndOpens->this.initExports->cf.modules->ClassLoaders.platformClassLoader->BootLoader.getServicesCatalog->ServicesCatalog.getServicesCatalog->resolvedModule.reference->mref.descriptor->descriptor.provides().isEmpty->descriptor.name->nameToModule.get->nameToLoader.get->pclCatalog.register->bootCatalog.register->cf.modules->layer.bindToLoader
Module#getAnnotation(Class):::This method returns {@code null when invoked on an unnamed module.:::moduleInfoClass().getDeclaredAnnotation
Module#getAnnotations()::: This method returns an empty array when invoked on an unnamed module.:::moduleInfoClass().getAnnotations
Module#getDeclaredAnnotations()::: This method returns an empty array when invoked on an unnamed module.:::moduleInfoClass().getDeclaredAnnotations
Module#getResourceAsStream(String):::Returns an input stream for reading a resource in this module:::name.startsWith->name.substring->this.isNamed->Resources.canEncapsulate->Reflection.getCallerClass->this.getCallerModule->Object.class.getModule->Resources.toPackageName->getPackages().contains->this.isOpen->this.isOpen->((BuiltinClassLoader) loader).findResourceAsStream->BootLoader.findResourceAsStream->loader.findResource->url.openStream
Module#toString():::Returns the string representation of this module:::this.isNamed->System.identityHashCode->Integer.toHexString
ModuleLayer.Controller#layer():::Returns the layer that this object controls.:::
ModuleLayer.Controller#addReads(Module, Module):::Updates module source in the layer to read module target:::this.ensureInLayer->source.implAddReads
ModuleLayer.Controller#addExports(Module, String, Module):::Updates module source in the layer to export a package to module target:::this.ensureInLayer->source.implAddExports
ModuleLayer.Controller#addOpens(Module, String, Module):::Updates module source in the layer to open a package to module target:::this.ensureInLayer->source.implAddOpens
ModuleLayer#defineModulesWithOneLoader(Configuration, ClassLoader):::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine:::defineModulesWithOneLoader(cf, List.of(this), parentLoader).layer
ModuleLayer#defineModulesWithManyLoaders(Configuration, ClassLoader):::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine:::defineModulesWithManyLoaders(cf, List.of(this), parentLoader).layer
ModuleLayer#defineModules(Configuration, Function):::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine:::defineModules(cf, List.of(this), clf).layer
ModuleLayer#defineModulesWithOneLoader(Configuration, List, ClassLoader):::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine:::this.checkConfiguration->this.checkCreateClassLoaderPermission->this.checkGetClassLoaderPermission->e.getMessage->cf.modules->loader.initRemotePackageMap
ModuleLayer#defineModulesWithManyLoaders(Configuration, List, ClassLoader):::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine:::this.checkConfiguration->this.checkCreateClassLoaderPermission->this.checkGetClassLoaderPermission->e.getMessage
ModuleLayer#defineModules(Configuration, List, Function):::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine:::this.checkConfiguration->Objects.requireNonNull->this.checkGetClassLoaderPermission->this.boot->this.checkForDuplicatePkgs->e.getMessage
ModuleLayer#configuration():::Returns the configuration for this layer.:::
ModuleLayer#parents():::Returns the list of this layer's parents unless this is the #empty empty layer, which has no parents and so an empty list is returned.:::
ModuleLayer#layers():::Returns an ordered stream of layers:::allLayers.stream->visited.add->stack.push->stack.pop->allLayers.add->layer.parents.get->visited.contains->visited.add->stack.push->layer.parents.size->stack.isEmpty->Collections.unmodifiableList->allLayers.stream
ModuleLayer#modules():::Returns the set of the modules in this layer.:::nameToModule.values->Set.copyOf
ModuleLayer#findModule(String):::Returns the module with the given name in this layer, or if not in this layer, the #parents() parent layers:::Objects.requireNonNull->Optional.empty->nameToModule.get->Optional.of->layers().skip(// skip this layer
1).map(l -> l.nameToModule.get(name)).filter(Objects::nonNull).findAny
ModuleLayer#findLoader(String):::Returns the ClassLoader for the module with the given name:::this.findModule->om.isPresent->om.get().getClassLoader
ModuleLayer#toString():::Returns a string describing this module layer.:::Collectors.joining->modules().stream().map(Module::getName).collect
ModuleLayer#empty():::Returns the empty layer:::
ModuleLayer#boot():::Returns the boot layer:::
ModuleLayer#getServicesCatalog():::Returns the ServicesCatalog for this Layer, creating it if not already created.:::ServicesCatalog.create->nameToModule.values().forEach
ModuleLayer#bindToLoader(ClassLoader):::Record that this layer has at least one module defined to the given class loader.:::CLV.get->CLV.putIfAbsent->list.add
ModuleLayer#layers(ClassLoader):::Returns a stream of the layers that have at least one module defined to the given class loader.:::CLV.get->Stream.empty->list.stream
NamedPackage#packageName():::Returns the name of this package.:::
NamedPackage#module():::Returns the module of this named package.:::
NamedPackage#location():::Returns the location of the module if this named package is in a named module; otherwise, returns null.:::module.isNamed->module.getLayer->module.getLayer().configuration->cf.findModule(module.getName()).get().reference->mref.location().orElse
NamedPackage#toPackage(String, Module):::Creates a Package object of the given name and module.:::
Number#intValue():::Returns the value of the specified number as an int.:::
Number#longValue():::Returns the value of the specified number as a long.:::
Number#floatValue():::Returns the value of the specified number as a float.:::
Number#doubleValue():::Returns the value of the specified number as a double.:::
Number#byteValue():::Returns the value of the specified number as a byte:::this.intValue
Number#shortValue():::Returns the value of the specified number as a short:::this.intValue
NumberFormatException#forInputString(String):::Factory method for making a NumberFormatException given the specified input which caused the error.:::
NumberFormatException#forCharSequence(CharSequence, int, int, int):::Factory method for making a NumberFormatException given the specified input which caused the error.:::s.subSequence
Object#getClass():::Returns the runtime class of this Object:::
Object#hashCode():::Returns a hash code value for the object:::
Object#equals(Object):::Indicates whether some other object is "equal to" this one:::
Object#clone():::Creates and returns a copy of this object:::
Object#toString():::Returns a string representation of the object:::getClass().getName->this.hashCode->Integer.toHexString
Object#notify():::Wakes up a single thread that is waiting on this object's monitor:::
Object#notifyAll():::Wakes up all threads that are waiting on this object's monitor:::
Object#wait():::Causes the current thread to wait until it is awakened, typically by being notified or interrupted:::this.wait
Object#wait(long):::Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed:::
Object#wait(long, int):::Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed:::this.wait
Object#finalize():::Called by the garbage collector on an object when garbage collection determines that there are no more references to the object:::
Package#getName():::Return the name of this package.:::this.packageName
Package#getSpecificationTitle():::Return the title of the specification that this package implements.:::
Package#getSpecificationVersion():::Returns the version number of the specification that this package implements:::
Package#getSpecificationVendor():::Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package.:::
Package#getImplementationTitle():::Return the title of this package.:::
Package#getImplementationVersion():::Return the version of this implementation:::
Package#getImplementationVendor():::Returns the vendor that implemented this package, null is returned if it is not known.:::
Package#isSealed():::Returns true if this package is sealed.:::module().isNamed
Package#isSealed(URL):::Returns true if this package is sealed with respect to the specified code source url.:::Objects.requireNonNull->this.location->uri.toURL->url.equals
Package#isCompatibleWith(String):::Compare this package's specification version with a desired version:::versionInfo.specVersion.length->versionInfo.specVersion.split->Integer.parseInt->NumberFormatException.forInputString->desired.split->Integer.parseInt->NumberFormatException.forInputString->Math.max
Package#getPackage(String):::Finds a package by name in the caller's class loader and its ancestors:::Reflection.getCallerClass->ClassLoader.getClassLoader->BootLoader.getDefinedPackage->l.getPackage
Package#getPackages():::Returns all of the Packages defined by the caller's class loader and its ancestors:::Reflection.getCallerClass->ClassLoader.getClassLoader->BootLoader.packages().toArray->cl.getPackages
Package#hashCode():::Return the hash code computed from the package name.:::packageName().hashCode
Package#toString():::Returns the string representation of this Package:::spec.length->ver.length->this.packageName
Process#getOutputStream():::Returns the output stream connected to the normal input of the process:::
Process#getInputStream():::Returns the input stream connected to the normal output of the process:::
Process#getErrorStream():::Returns the input stream connected to the error output of the process:::
Process#waitFor():::Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated:::
Process#waitFor(long, TimeUnit):::Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated, or the specified waiting time elapses:::System.nanoTime->unit.toNanos->TimeUnit.NANOSECONDS.toMillis->Math.min->Thread.sleep->this.exitValue->unit.toNanos->System.nanoTime
Process#exitValue():::Returns the exit value for the process.:::
Process#destroy():::Kills the process:::
Process#destroyForcibly():::Kills the process forcibly:::this.destroy
Process#supportsNormalTermination():::Returns true if the implementation of #destroy is to normally terminate the process, Returns false if the implementation of destroy forcibly and immediately terminates the process:::this.getClass
Process#isAlive():::Tests whether the process represented by this Process is alive.:::this.exitValue
Process#pid():::Returns the native process ID of the process:::toHandle().pid
Process#onExit():::Returns a CompletableFuture<Process> for the termination of the Process:::CompletableFuture.supplyAsync
Process#toHandle():::Returns a ProcessHandle for the Process:::this.getClass
Process#info():::Returns a snapshot of information about the process:::toHandle().info
Process#children():::Returns a snapshot of the direct children of the process:::toHandle().children
Process#descendants():::Returns a snapshot of the descendants of the process:::toHandle().descendants
ProcessBuilder#command(List):::Sets this process builder's operating system program and arguments:::
ProcessBuilder#command(String...):::Sets this process builder's operating system program and arguments:::this.command.add
ProcessBuilder#command():::Returns this process builder's operating system program and arguments:::
ProcessBuilder#environment():::Returns a string map view of this process builder's environment:::System.getSecurityManager->security.checkPermission->ProcessEnvironment.environment
ProcessBuilder#directory():::Returns this process builder's working directory:::
ProcessBuilder#directory(File):::Sets this process builder's working directory:::
ProcessBuilder.Redirect#type():::Returns the type of this Redirect.:::
ProcessBuilder.Redirect#file():::Returns the File source or destination associated with this redirect, or null if there is no such file.:::
ProcessBuilder.Redirect#append():::When redirected to a destination file, indicates if the output is to be written to the end of the file.:::
ProcessBuilder.Redirect#from(File):::Returns a redirect to read from the specified file:::
ProcessBuilder.Redirect#to(File):::Returns a redirect to write to the specified file:::
ProcessBuilder.Redirect#appendTo(File):::Returns a redirect to append to the specified file:::
ProcessBuilder.Redirect#equals(Object):::Compares the specified object with this Redirect for equality:::r.type->this.type->this.file->r.file->this.file().equals
ProcessBuilder.Redirect#hashCode():::Returns a hash code value for this Redirect.:::this.file->file.hashCode->super.hashCode
ProcessBuilder#redirectInput(Redirect):::Sets this process builder's standard input source:::source.type->source.type->this.redirects
ProcessBuilder#redirectOutput(Redirect):::Sets this process builder's standard output destination:::destination.type->this.redirects
ProcessBuilder#redirectError(Redirect):::Sets this process builder's standard error destination:::destination.type->this.redirects
ProcessBuilder#redirectInput(File):::Sets this process builder's standard input source to a file:::Redirect.from->this.redirectInput
ProcessBuilder#redirectOutput(File):::Sets this process builder's standard output destination to a file:::Redirect.to->this.redirectOutput
ProcessBuilder#redirectError(File):::Sets this process builder's standard error destination to a file:::Redirect.to->this.redirectError
ProcessBuilder#redirectInput():::Returns this process builder's standard input source:::
ProcessBuilder#redirectOutput():::Returns this process builder's standard output destination:::
ProcessBuilder#redirectError():::Returns this process builder's standard error destination:::
ProcessBuilder#inheritIO():::Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process:::this.redirects->Arrays.fill
ProcessBuilder#redirectErrorStream():::Tells whether this process builder merges standard error and standard output:::
ProcessBuilder#redirectErrorStream(boolean):::Sets this process builder's redirectErrorStream property:::
ProcessBuilder#start():::Starts a new process using the attributes of this process builder:::this.start
ProcessBuilder#startPipeline(List):::Starts a Process for each ProcessBuilder, creating a pipeline of processes linked by their standard output and standard input streams:::builders.size->processes.forEach->processes.forEach->builders.get->builder.redirects->builder.redirectInput->builder.redirectInput->builder.redirectOutput->builder.redirectOutput->builder.start->processes.add->builders.size
ProcessHandle#pid():::Returns the native process ID of the process:::
ProcessHandle#of(long):::Returns an Optional<ProcessHandle> for an existing native process.:::ProcessHandleImpl.get
ProcessHandle#current():::Returns a ProcessHandle for the current process:::ProcessHandleImpl.current
ProcessHandle#parent():::Returns an Optional<ProcessHandle> for the parent process:::
ProcessHandle#children():::Returns a snapshot of the current direct children of the process:::
ProcessHandle#descendants():::Returns a snapshot of the descendants of the process:::
ProcessHandle#allProcesses():::Returns a snapshot of all processes visible to the current process:::ProcessHandleImpl.children
ProcessHandle#info():::Returns a snapshot of information about the process:::
ProcessHandle.Info#command():::Returns the executable pathname of the process.:::
ProcessHandle.Info#commandLine():::Returns the command line of the process:::
ProcessHandle.Info#arguments():::Returns an array of Strings of the arguments of the process.:::
ProcessHandle.Info#startInstant():::Returns the start time of the process.:::
ProcessHandle.Info#totalCpuDuration():::Returns the total cputime accumulated of the process.:::
ProcessHandle.Info#user():::Return the user of the process.:::
ProcessHandle#onExit():::Returns a CompletableFuture<ProcessHandle> for the termination of the process:::
ProcessHandle#supportsNormalTermination():::Returns true if the implementation of #destroy normally terminates the process:::
ProcessHandle#destroy():::Requests the process to be killed:::
ProcessHandle#destroyForcibly():::Requests the process to be killed forcibly:::
ProcessHandle#isAlive():::Tests whether the process represented by this ProcessHandle is alive:::
ProcessHandle#hashCode():::Returns a hash code value for this ProcessHandle:::
ProcessHandle#equals(Object):::Returns true if other object is non-null, is of the same implementation, and represents the same system process; otherwise it returns false.:::
ProcessHandle#compareTo(ProcessHandle):::Compares this ProcessHandle with the specified ProcessHandle for order:::
ProcessHandleImpl#completion(long, boolean):::Returns a CompletableFuture that completes with process exit status when the process completes.:::completions.get->completions.replace->completions.get->completions.putIfAbsent->processReaperExecutor.execute
ProcessHandleImpl#get(long):::Returns a ProcessHandle for an existing native process.:::System.getSecurityManager->sm.checkPermission->this.isAlive0->Optional.empty->Optional.of
ProcessHandleImpl#getInternal(long):::Returns a ProcessHandle for an existing native process known to be alive:::this.isAlive0
ProcessHandleImpl#pid():::Returns the native process ID:::
ProcessHandleImpl#current():::Returns the ProcessHandle for the current native process.:::System.getSecurityManager->sm.checkPermission
ProcessHandleImpl#parent():::Returns a ProcessHandle for the parent process.:::System.getSecurityManager->sm.checkPermission->this.parent0->Optional.empty->this.get
ProcessHandleImpl#destroyProcess(boolean):::Destroy the process for this ProcessHandle:::this.equals->this.destroy0
ProcessHandleImpl#isAlive():::Tests whether the process represented by this ProcessHandle is alive.:::this.isAlive0
ProcessHandleImpl#children(long):::Returns a Stream of the children of a process or all processes.:::System.getSecurityManager->sm.checkPermission->this.getProcessPids0->IntStream.range(0, size).mapToObj
ProcessHandleImpl.Info#info(long, long):::Returns the Info object with the fields from the process:::info.info0
ProcessImpl#toString():::The toString method returns a string consisting of the native process ID of the process and the exit value of the process.:::this.getExitCodeProcess->new StringBuilder("Process[pid=").append(pid()).append(", exitValue=").append(exitCode == STILL_ACTIVE ? "\"not exited\"" : exitCode).append("]").toString
PublicMethods#merge(Method):::Merges new method with existing methods:::map.get->existing.length->MethodList.merge->merged.length->map.put
PublicMethods#toArray():::Dumps methods to array.:::map.values
PublicMethods.MethodList#merge(MethodList, MethodList):::This method should only be called with the head (possibly null) of a list of Method(s) that share the same (method name, parameter types) and another methodList that also contains Method(s) with the same and equal (method name, parameter types) as the 1st list:::this.merge
Readable#read(java.nio.CharBuffer):::Attempts to read characters into the specified character buffer:::
Runnable#run():::When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread:::
Runtime#getRuntime():::Returns the runtime object associated with the current Java application:::
Runtime#exit(int):::Terminates the currently running Java virtual machine by initiating its shutdown sequence:::System.getSecurityManager->security.checkExit->Shutdown.exit
Runtime#addShutdownHook(Thread):::Registers a new virtual-machine shutdown hook:::System.getSecurityManager->sm.checkPermission->ApplicationShutdownHooks.add
Runtime#removeShutdownHook(Thread):::De-registers a previously-registered virtual-machine shutdown hook.:::System.getSecurityManager->sm.checkPermission->ApplicationShutdownHooks.remove
Runtime#halt(int):::Forcibly terminates the currently running Java virtual machine:::System.getSecurityManager->sm.checkExit->Shutdown.beforeHalt->Shutdown.halt
Runtime#exec(String):::Executes the specified string command in a separate process:::this.exec
Runtime#exec(String, String[]):::Executes the specified string command in a separate process with the specified environment:::this.exec
Runtime#exec(String, String[], File):::Executes the specified string command in a separate process with the specified environment and working directory:::command.length->st.countTokens->st.nextToken->st.hasMoreTokens->this.exec
Runtime#exec(String[]):::Executes the specified command and arguments in a separate process:::this.exec
Runtime#exec(String[], String[]):::Executes the specified command and arguments in a separate process with the specified environment:::this.exec
Runtime#exec(String[], String[], File):::Executes the specified command and arguments in a separate process with the specified environment and working directory:::new ProcessBuilder(cmdarray).environment(envp).directory(dir).start
Runtime#availableProcessors():::Returns the number of processors available to the Java virtual machine:::
Runtime#freeMemory():::Returns the amount of free memory in the Java Virtual Machine:::
Runtime#totalMemory():::Returns the total amount of memory in the Java virtual machine:::
Runtime#maxMemory():::Returns the maximum amount of memory that the Java virtual machine will attempt to use:::
Runtime#gc():::Runs the garbage collector:::
Runtime#runFinalization():::Runs the finalization methods of any objects pending finalization:::SharedSecrets.getJavaLangRefAccess().runFinalization
Runtime#traceInstructions(boolean):::Not implemented, does nothing.:::
Runtime#traceMethodCalls(boolean):::Not implemented, does nothing.:::
Runtime#load(String):::Loads the native library specified by the filename argument:::Reflection.getCallerClass->this.load0
Runtime#loadLibrary(String):::Loads the native library specified by the libname argument:::Reflection.getCallerClass->this.loadLibrary0
Runtime#version():::Returns the version of the Java Runtime Environment as a Version.:::VersionProps.versionNumbers->VersionProps.pre->VersionProps.build->VersionProps.optional
Runtime.Version#parse(String):::Parses the given string as a valid version string containing a version number followed by pre-release and build information.:::this.isSimpleNumber->Integer.parseInt->List.of->Optional.empty->Optional.empty->Optional.empty->VersionPattern.VSTR_PATTERN.matcher->m.matches->m.group(VersionPattern.VNUM_GROUP).split->Integer.parseInt->m.group->Optional.ofNullable->m.group->Integer.parseInt->Optional.of->Optional.empty->m.group->Optional.ofNullable->build.isPresent->m.group->optional.isPresent->pre.isPresent->optional.isPresent->pre.isPresent->List.of
Runtime.Version#feature():::Returns the value of the feature element of the version number.:::version.get
Runtime.Version#interim():::Returns the value of the interim element of the version number, or zero if it is absent.:::version.size->version.get
Runtime.Version#update():::Returns the value of the update element of the version number, or zero if it is absent.:::version.size->version.get
Runtime.Version#patch():::Returns the value of the patch element of the version number, or zero if it is absent.:::version.size->version.get
Runtime.Version#major():::Returns the value of the major element of the version number.:::this.feature
Runtime.Version#minor():::Returns the value of the minor element of the version number, or zero if it is absent.:::this.interim
Runtime.Version#security():::Returns the value of the security element of the version number, or zero if it is absent.:::this.update
Runtime.Version#version():::Returns an unmodifiable java.util.List List of the integers represented in the version number:::
Runtime.Version#pre():::Returns the optional pre-release information.:::
Runtime.Version#build():::Returns the build number.:::
Runtime.Version#optional():::Returns optional additional identifying build information.:::
Runtime.Version#compareTo(Version):::Compares this version to another:::this.compare
Runtime.Version#compareToIgnoreOptional(Version):::Compares this version to another disregarding optional build information:::this.compare
Runtime.Version#toString():::Returns a string representation of this version.:::Collectors.joining->version.stream().map(Object::toString).collect->pre.ifPresent->build.isPresent->optional.isPresent->sb.append->optional.get->sb.append->build.get->sb.append("+").append->optional.isPresent->optional.get->sb.append("-").append->sb.toString
Runtime.Version#equals(Object):::Determines whether this Version is equal to another object:::this.equalsIgnoreOptional->that.optional->this.optional().equals
Runtime.Version#equalsIgnoreOptional(Object):::Determines whether this Version is equal to another disregarding optional build information:::that.version->this.version().equals->that.pre->this.pre().equals->that.build->this.build().equals
Runtime.Version#hashCode():::Returns the hash code of this version.:::version.hashCode->pre.hashCode->build.hashCode->optional.hashCode
SecurityManager#getClassContext():::Returns the current execution stack as an array of classes:::
SecurityManager#getSecurityContext():::Creates an object that encapsulates the current execution environment:::AccessController.getContext
SecurityManager#checkPermission(Permission):::Throws a SecurityException if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect:::java.security.AccessController.checkPermission
SecurityManager#checkPermission(Permission, Object):::Throws a SecurityException if the specified security context is denied access to the resource specified by the given permission:::((AccessControlContext) context).checkPermission
SecurityManager#checkCreateClassLoader():::Throws a SecurityException if the calling thread is not allowed to create a new class loader:::this.checkPermission
SecurityManager#checkAccess(Thread):::Throws a SecurityException if the calling thread is not allowed to modify the thread argument:::t.getThreadGroup->this.checkPermission
SecurityManager#checkAccess(ThreadGroup):::Throws a SecurityException if the calling thread is not allowed to modify the thread group argument:::this.checkPermission
SecurityManager#checkExit(int):::Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code:::this.checkPermission
SecurityManager#checkExec(String):::Throws a SecurityException if the calling thread is not allowed to create a subprocess:::f.isAbsolute->this.checkPermission->this.checkPermission
SecurityManager#checkLink(String):::Throws a SecurityException if the calling thread is not allowed to dynamic link the library code specified by the string argument file:::this.checkPermission
SecurityManager#checkRead(FileDescriptor):::Throws a SecurityException if the calling thread is not allowed to read from the specified file descriptor:::this.checkPermission
SecurityManager#checkRead(String):::Throws a SecurityException if the calling thread is not allowed to read the file specified by the string argument:::this.checkPermission
SecurityManager#checkRead(String, Object):::Throws a SecurityException if the specified security context is not allowed to read the file specified by the string argument:::this.checkPermission
SecurityManager#checkWrite(FileDescriptor):::Throws a SecurityException if the calling thread is not allowed to write to the specified file descriptor:::this.checkPermission
SecurityManager#checkWrite(String):::Throws a SecurityException if the calling thread is not allowed to write to the file specified by the string argument:::this.checkPermission
SecurityManager#checkDelete(String):::Throws a SecurityException if the calling thread is not allowed to delete the specified file:::this.checkPermission
SecurityManager#checkConnect(String, int):::Throws a SecurityException if the calling thread is not allowed to open a socket connection to the specified host and port number:::host.startsWith->host.indexOf->this.checkPermission->this.checkPermission
SecurityManager#checkConnect(String, int, Object):::Throws a SecurityException if the specified security context is not allowed to open a socket connection to the specified host and port number:::host.startsWith->host.indexOf->this.checkPermission->this.checkPermission
SecurityManager#checkListen(int):::Throws a SecurityException if the calling thread is not allowed to wait for a connection request on the specified local port number:::this.checkPermission
SecurityManager#checkAccept(String, int):::Throws a SecurityException if the calling thread is not permitted to accept a socket connection from the specified host and port number:::host.startsWith->host.indexOf->this.checkPermission
SecurityManager#checkMulticast(InetAddress):::Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast:::maddr.getHostAddress->host.startsWith->host.indexOf->this.checkPermission
SecurityManager#checkMulticast(InetAddress, byte):::Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast:::maddr.getHostAddress->host.startsWith->host.indexOf->this.checkPermission
SecurityManager#checkPropertiesAccess():::Throws a SecurityException if the calling thread is not allowed to access or modify the system properties:::this.checkPermission
SecurityManager#checkPropertyAccess(String):::Throws a SecurityException if the calling thread is not allowed to access the system property with the specified key name:::this.checkPermission
SecurityManager#checkPrintJobAccess():::Throws a SecurityException if the calling thread is not allowed to initiate a print job request:::this.checkPermission
SecurityManager#addNonExportedPackages(ModuleLayer):::Record the non-exported packages of the modules in the given layer:::ModuleLoaderMap.bootModules->ModuleLoaderMap.platformModules->layer.modules().stream().map(Module::getDescriptor).filter(md -> bootModules.contains(md.name()) || platformModules.contains(md.name())).map(SecurityManager::nonExportedPkgs).flatMap(Set::stream).forEach
SecurityManager#invalidatePackageAccessCache():::Called by java.security.Security:::
SecurityManager#checkPackageAccess(String):::Throws a SecurityException if the calling thread is not allowed to access the specified package:::Objects.requireNonNull->nonExportedPkgs.containsKey->this.checkPermission->AccessController.doPrivileged->this.getPackages->pkg.length->restrictedPkg.length->pkg.startsWith->restrictedPkg.startsWith->restrictedPkg.charAt->this.checkPermission
SecurityManager#checkPackageDefinition(String):::Throws a SecurityException if the calling thread is not allowed to define classes in the specified package:::Objects.requireNonNull->nonExportedPkgs.containsKey->this.checkPermission->AccessController.doPrivileged->this.getPackages->pkg.startsWith->restrictedPkg.equals->this.checkPermission
SecurityManager#checkSetFactory():::Throws a SecurityException if the calling thread is not allowed to set the socket factory used by ServerSocket or Socket, or the stream handler factory used by URL:::this.checkPermission
SecurityManager#checkSecurityAccess(String):::Determines whether the permission with the specified permission target name should be granted or denied:::this.checkPermission
SecurityManager#getThreadGroup():::Returns the thread group into which to instantiate any new thread being created at the time this is being called:::Thread.currentThread().getThreadGroup
Short#toString(short):::Returns a new String object representing the specified short:::Integer.toString
Short#parseShort(String, int):::Parses the string argument as a signed short in the radix specified by the second argument:::Integer.parseInt
Short#parseShort(String):::Parses the string argument as a signed decimal short:::this.parseShort
Short#valueOf(String, int):::Returns a Short object holding the value extracted from the specified String when parsed with the radix given by the second argument:::this.parseShort->this.valueOf
Short#valueOf(String):::Returns a Short object holding the value given by the specified String:::this.valueOf
Short#valueOf(short):::Returns a Short instance representing the specified short value:::
Short#decode(String):::Decodes a String into a Short:::Integer.decode->this.valueOf
Short#byteValue():::Returns the value of this Short as a byte after a narrowing primitive conversion.:::
Short#shortValue():::Returns the value of this Short as a short.:::
Short#intValue():::Returns the value of this Short as an int after a widening primitive conversion.:::
Short#longValue():::Returns the value of this Short as a long after a widening primitive conversion.:::
Short#floatValue():::Returns the value of this Short as a float after a widening primitive conversion.:::
Short#doubleValue():::Returns the value of this Short as a double after a widening primitive conversion.:::
Short#toString():::Returns a String object representing this Short's value:::Integer.toString
Short#hashCode():::Returns a hash code for this Short; equal to the result of invoking intValue().:::Short.hashCode
Short#hashCode(short):::Returns a hash code for a short value; compatible with Short.hashCode().:::
Short#equals(Object):::Compares this object to the specified object:::((Short) obj).shortValue
Short#compareTo(Short):::Compares two Short objects numerically.:::this.compare
Short#compare(short, short):::Compares two short values numerically:::
Short#compareUnsigned(short, short):::Compares two short values numerically treating the values as unsigned.:::Short.toUnsignedInt->Short.toUnsignedInt
Short#reverseBytes(short):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified short value.:::
Short#toUnsignedInt(short):::Converts the argument to an int by an unsigned conversion:::
Short#toUnsignedLong(short):::Converts the argument to a long by an unsigned conversion:::
Shutdown#add(int, boolean, Runnable):::Add a new system shutdown hook:::VM.isShutdown
StackStreamFactory#makeCallerFinder(StackWalker):::Gets a stack stream to find caller class.:::
StackStreamFactory.AbstractStackWalker#consumeFrames():::A callback method to consume the stack frames:::
StackStreamFactory.AbstractStackWalker#initFrameBuffer():::Initialize FrameBuffer:::
StackStreamFactory.AbstractStackWalker#batchSize(int):::Returns the suggested next batch size:::
StackStreamFactory.StackFrameTraverser#nextStackFrame():::Returns next StackFrame object in the current batch of stack frames; or null if no more stack frame.:::this.hasNext->frameBuffer.nextStackFrame
StackStreamFactory.CallerClassFinder.ClassBuffer#resize(int, int):::Resizes the buffers for VM to fill in the next batch of stack frames:::this.isActive->System.arraycopy
StackStreamFactory.FrameBuffer#resize(int, int):::Resizes the buffers for VM to fill in the next batch of stack frames:::
StackStreamFactory.FrameBuffer#at(int):::Return the class at the given position in the current batch.:::
StackStreamFactory.FrameBuffer#nextStackFrame():::Returns next StackFrame object in the current batch of stack frames:::
StackStreamFactory.FrameBuffer#next():::Gets the class at the current frame and move to the next frame.:::this.isEmpty->this.at->Objects.toString->System.out.format
StackStreamFactory.FrameBuffer#get():::Gets the class at the current frame.:::this.isEmpty->this.at
StackTraceElement#getFileName():::Returns the name of the source file containing the execution point represented by this stack trace element:::
StackTraceElement#getLineNumber():::Returns the line number of the source line containing the execution point represented by this stack trace element:::
StackTraceElement#getModuleName():::Returns the module name of the module containing the execution point represented by this stack trace element.:::
StackTraceElement#getModuleVersion():::Returns the module version of the module containing the execution point represented by this stack trace element.:::
StackTraceElement#getClassLoaderName():::Returns the name of the class loader of the class containing the execution point represented by this stack trace element.:::
StackTraceElement#getClassName():::Returns the fully qualified name of the class containing the execution point represented by this stack trace element.:::
StackTraceElement#getMethodName():::Returns the name of the method containing the execution point represented by this stack trace element:::
StackTraceElement#isNativeMethod():::Returns true if the method containing the execution point represented by this stack trace element is a native method.:::
StackTraceElement#toString():::Returns a string representation of this stack trace element.:::this.dropClassLoaderName->classLoaderName.isEmpty->moduleName.isEmpty->this.dropModuleVersion->moduleVersion.isEmpty->s.isEmpty->this.isNativeMethod
StackTraceElement#equals(Object):::Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance:::Objects.equals->Objects.equals->Objects.equals->e.declaringClass.equals->Objects.equals->Objects.equals
StackTraceElement#hashCode():::Returns a hash code value for this stack trace element.:::declaringClass.hashCode->methodName.hashCode->Objects.hashCode->Objects.hashCode->Objects.hashCode->Objects.hashCode
StackWalker.StackFrame#getClassName():::Gets the binary name of the declaring class of the method represented by this stack frame.:::
StackWalker.StackFrame#getMethodName():::Gets the name of the method represented by this stack frame.:::
StackWalker.StackFrame#getDeclaringClass():::Gets the declaring Class for the method represented by this stack frame.:::
StackWalker.StackFrame#getMethodType():::Returns the MethodType representing the parameter types and the return type for the method represented by this stack frame.:::
StackWalker.StackFrame#getDescriptor():::Returns the descriptor of the method represented by this stack frame as defined by The Java Virtual Machine Specification.:::
StackWalker.StackFrame#getByteCodeIndex():::Returns the index to the code array of the Code attribute containing the execution point represented by this stack frame:::
StackWalker.StackFrame#getFileName():::Returns the name of the source file containing the execution point represented by this stack frame:::
StackWalker.StackFrame#getLineNumber():::Returns the line number of the source line containing the execution point represented by this stack frame:::
StackWalker.StackFrame#isNativeMethod():::Returns true if the method containing the execution point represented by this stack frame is a native method.:::
StackWalker.StackFrame#toStackTraceElement():::Gets a StackTraceElement for this stack frame.:::
StackWalker#getInstance():::Returns a StackWalker instance:::
StackWalker#getInstance(Option):::Returns a StackWalker instance with the given option specifying the stack frame information it can access:::Objects.requireNonNull->EnumSet.of->this.getInstance
StackWalker#getInstance(Set):::Returns a StackWalker instance with the given options specifying the stack frame information it can access:::options.isEmpty->this.toEnumSet->this.checkPermission
StackWalker#getInstance(Set, int):::Returns a StackWalker instance with the given options specifying the stack frame information it can access:::this.toEnumSet->this.checkPermission
StackWalker#walk(Function, ? extends T>):::Applies the given function to the stream of StackFrames for the current thread, traversing from the top frame of the stack, which is the method calling this walk method:::Objects.requireNonNull->StackStreamFactory.makeStackTraverser(this, function).walk
StackWalker#forEach(Consumer):::Performs the given action on each element of StackFrame stream of the current thread, traversing from the top frame of the stack, which is the method calling this forEach method:::Objects.requireNonNull->StackStreamFactory.makeStackTraverser(this, s -> {
    s.forEach(action);
    return null;
}).walk
StackWalker#getCallerClass():::Gets the Class object of the caller who invoked the method that invoked getCallerClass:::StackStreamFactory.makeCallerFinder(this).findCaller
StrictMath#sin(double):::Returns the trigonometric sine of an angle:::
StrictMath#cos(double):::Returns the trigonometric cosine of an angle:::
StrictMath#tan(double):::Returns the trigonometric tangent of an angle:::
StrictMath#asin(double):::Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2:::
StrictMath#acos(double):::Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi:::
StrictMath#atan(double):::Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2:::
StrictMath#toRadians(double):::Converts an angle measured in degrees to an approximately equivalent angle measured in radians:::
StrictMath#toDegrees(double):::Converts an angle measured in radians to an approximately equivalent angle measured in degrees:::
StrictMath#exp(double):::Returns Euler's number e raised to the power of a double value:::FdLibm.Exp.compute
StrictMath#log(double):::Returns the natural logarithm (base e) of a double value:::
StrictMath#log10(double):::Returns the base 10 logarithm of a double value:::
StrictMath#sqrt(double):::Returns the correctly rounded positive square root of a double value:::
StrictMath#cbrt(double):::Returns the cube root of a double value:::FdLibm.Cbrt.compute
StrictMath#IEEEremainder(double, double):::Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard:::
StrictMath#ceil(double):::Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer:::this.floorOrCeil
StrictMath#floor(double):::Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer:::this.floorOrCeil
StrictMath#rint(double):::Returns the double value that is closest in value to the argument and is equal to a mathematical integer:::Math.copySign->Math.abs
StrictMath#atan2(double, double):::Returns the angle theta from the conversion of rectangular coordinates (x,&nbsp;y) to polar coordinates (r,&nbsp;theta):::
StrictMath#pow(double, double):::Returns the value of the first argument raised to the power of the second argument:::FdLibm.Pow.compute
StrictMath#round(float):::Returns the closest int to the argument, with ties rounding to positive infinity:::Math.round
StrictMath#round(double):::Returns the closest long to the argument, with ties rounding to positive infinity:::Math.round
StrictMath#random():::Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0:::RandomNumberGeneratorHolder.randomNumberGenerator.nextDouble
StrictMath#addExact(int, int):::Returns the sum of its arguments, throwing an exception if the result overflows an int.:::Math.addExact
StrictMath#addExact(long, long):::Returns the sum of its arguments, throwing an exception if the result overflows a long.:::Math.addExact
StrictMath#subtractExact(int, int):::Returns the difference of the arguments, throwing an exception if the result overflows an int.:::Math.subtractExact
StrictMath#subtractExact(long, long):::Returns the difference of the arguments, throwing an exception if the result overflows a long.:::Math.subtractExact
StrictMath#multiplyExact(int, int):::Returns the product of the arguments, throwing an exception if the result overflows an int.:::Math.multiplyExact
StrictMath#multiplyExact(long, int):::Returns the product of the arguments, throwing an exception if the result overflows a long.:::Math.multiplyExact
StrictMath#multiplyExact(long, long):::Returns the product of the arguments, throwing an exception if the result overflows a long.:::Math.multiplyExact
StrictMath#toIntExact(long):::Returns the value of the long argument; throwing an exception if the value overflows an int.:::Math.toIntExact
StrictMath#multiplyFull(int, int):::Returns the exact mathematical product of the arguments.:::Math.multiplyFull
StrictMath#multiplyHigh(long, long):::Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors.:::Math.multiplyHigh
StrictMath#floorDiv(int, int):::Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient:::Math.floorDiv
StrictMath#floorDiv(long, int):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient:::Math.floorDiv
StrictMath#floorDiv(long, long):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient:::Math.floorDiv
StrictMath#floorMod(int, int):::Returns the floor modulus of the int arguments:::Math.floorMod
StrictMath#floorMod(long, int):::Returns the floor modulus of the long and int arguments:::Math.floorMod
StrictMath#floorMod(long, long):::Returns the floor modulus of the long arguments:::Math.floorMod
StrictMath#abs(int):::Returns the absolute value of an int value:::Math.abs
StrictMath#abs(long):::Returns the absolute value of a long value:::Math.abs
StrictMath#abs(float):::Returns the absolute value of a float value:::Math.abs
StrictMath#abs(double):::Returns the absolute value of a double value:::Math.abs
StrictMath#max(int, int):::Returns the greater of two int values:::Math.max
StrictMath#max(long, long):::Returns the greater of two long values:::Math.max
StrictMath#max(float, float):::Returns the greater of two float values:::Math.max
StrictMath#max(double, double):::Returns the greater of two double values:::Math.max
StrictMath#min(int, int):::Returns the smaller of two int values:::Math.min
StrictMath#min(long, long):::Returns the smaller of two long values:::Math.min
StrictMath#min(float, float):::Returns the smaller of two float values:::Math.min
StrictMath#min(double, double):::Returns the smaller of two double values:::Math.min
StrictMath#fma(double, double, double):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double:::Math.fma
StrictMath#fma(float, float, float):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float:::Math.fma
StrictMath#ulp(double):::Returns the size of an ulp of the argument:::Math.ulp
StrictMath#ulp(float):::Returns the size of an ulp of the argument:::Math.ulp
StrictMath#signum(double):::Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero:::Math.signum
StrictMath#signum(float):::Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero:::Math.signum
StrictMath#sinh(double):::Returns the hyperbolic sine of a double value:::
StrictMath#cosh(double):::Returns the hyperbolic cosine of a double value:::
StrictMath#tanh(double):::Returns the hyperbolic tangent of a double value:::
StrictMath#hypot(double, double):::Returns sqrt(x^2&nbsp;+y^2) without intermediate overflow or underflow:::FdLibm.Hypot.compute
StrictMath#expm1(double):::Returns e^x&nbsp;-1:::
StrictMath#log1p(double):::Returns the natural logarithm of the sum of the argument and 1:::
StrictMath#copySign(double, double):::Returns the first floating-point argument with the sign of the second floating-point argument:::Math.copySign
StrictMath#copySign(float, float):::Returns the first floating-point argument with the sign of the second floating-point argument:::Math.copySign
StrictMath#getExponent(float):::Returns the unbiased exponent used in the representation of a float:::Math.getExponent
StrictMath#getExponent(double):::Returns the unbiased exponent used in the representation of a double:::Math.getExponent
StrictMath#nextAfter(double, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument:::Math.nextAfter
StrictMath#nextAfter(float, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument:::Math.nextAfter
StrictMath#nextUp(double):::Returns the floating-point value adjacent to d in the direction of positive infinity:::Math.nextUp
StrictMath#nextUp(float):::Returns the floating-point value adjacent to f in the direction of positive infinity:::Math.nextUp
StrictMath#nextDown(double):::Returns the floating-point value adjacent to d in the direction of negative infinity:::Math.nextDown
StrictMath#nextDown(float):::Returns the floating-point value adjacent to f in the direction of negative infinity:::Math.nextDown
StrictMath#scalb(double, int):::Returns d &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set:::Math.scalb
StrictMath#scalb(float, int):::Returns f &times; 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set:::Math.scalb
String#length():::Returns the length of this string:::this.coder
String#isEmpty():::Returns true if, and only if, #length() is 0.:::
String#charAt(int):::Returns the char value at the specified index:::this.isLatin1->StringUTF16.charAt->StringLatin1.charAt
String#codePointAt(int):::Returns the character (Unicode code point) at the specified index:::this.isLatin1->this.checkIndex->this.checkIndex->StringUTF16.codePointAt
String#codePointBefore(int):::Returns the character (Unicode code point) before the specified index:::this.length->this.isLatin1->StringUTF16.codePointBefore
String#codePointCount(int, int):::Returns the number of Unicode code points in the specified text range of this String:::this.length->this.isLatin1->StringUTF16.codePointCount
String#offsetByCodePoints(int, int):::Returns the index within this String that is offset from the given index by codePointOffset code points:::this.length->Character.offsetByCodePoints
String#getChars(int, int, char[], int):::Copies characters from this string into the destination character array:::this.length->this.checkBoundsBeginEnd->this.checkBoundsOffCount->this.isLatin1->StringUTF16.getChars->StringLatin1.getChars
String#getBytes(int, int, byte[], int):::Copies characters from this string into the destination byte array:::this.length->this.checkBoundsBeginEnd->Objects.requireNonNull->this.checkBoundsOffCount->this.isLatin1->StringUTF16.getBytes->StringLatin1.getBytes
String#getBytes(String):::Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array:::this.coder->StringCoding.encode
String#getBytes(Charset):::Encodes this String into a sequence of bytes using the given java.nio.charset.Charset charset, storing the result into a new byte array:::this.coder->StringCoding.encode
String#getBytes():::Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array:::this.coder->StringCoding.encode
String#equals(Object):::Compares this string to the specified object:::this.coder->aString.coder->this.isLatin1->StringUTF16.equals->StringLatin1.equals
String#contentEquals(StringBuffer):::Compares this string to the specified StringBuffer:::this.contentEquals
String#contentEquals(CharSequence):::Compares this string to the specified CharSequence:::this.nonSyncContentEquals->this.nonSyncContentEquals->this.equals->cs.length->this.length->this.isLatin1->StringUTF16.contentEquals->cs.charAt
String#equalsIgnoreCase(String):::Compares this String to another String, ignoring case considerations:::anotherString.length->this.length->this.length->this.regionMatches
String#compareTo(String):::Compares two strings lexicographically:::this.coder->anotherString.coder->this.isLatin1->StringUTF16.compareTo->StringLatin1.compareTo->this.isLatin1->StringUTF16.compareToLatin1->StringLatin1.compareToUTF16
String#compareToIgnoreCase(String):::Compares two strings lexicographically, ignoring case differences:::CASE_INSENSITIVE_ORDER.compare
String#regionMatches(int, String, int, int):::Tests if two string regions are equal:::this.length->other.length->this.coder->other.coder->this.coder->StringUTF16.getChar->StringLatin1.getChar->StringLatin1.getChar->StringUTF16.getChar->this.isLatin1
String#regionMatches(boolean, int, String, int, int):::Tests if two string regions are equal:::this.regionMatches->this.length->other.length->this.coder->other.coder->this.isLatin1->StringUTF16.regionMatchesCI->StringLatin1.regionMatchesCI->this.isLatin1->StringUTF16.regionMatchesCI_Latin1->StringLatin1.regionMatchesCI_UTF16
String#startsWith(String, int):::Tests if the substring of this string beginning at the specified index starts with the specified prefix.:::this.length->prefix.length->this.coder->prefix.coder->this.isLatin1->StringUTF16.getChar->this.isLatin1
String#startsWith(String):::Tests if this string starts with the specified prefix.:::this.startsWith
String#endsWith(String):::Tests if this string ends with the specified suffix.:::this.length->suffix.length->this.startsWith
String#hashCode():::Returns a hash code for this string:::this.isLatin1->StringUTF16.hashCode->StringLatin1.hashCode
String#indexOf(int):::Returns the index within this string of the first occurrence of the specified character:::this.indexOf
String#indexOf(int, int):::Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index:::this.isLatin1->StringUTF16.indexOf->StringLatin1.indexOf
String#lastIndexOf(int):::Returns the index within this string of the last occurrence of the specified character:::this.length->this.lastIndexOf
String#lastIndexOf(int, int):::Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index:::this.isLatin1->StringUTF16.lastIndexOf->StringLatin1.lastIndexOf
String#indexOf(String):::Returns the index within this string of the first occurrence of the specified substring:::this.coder->str.coder->this.isLatin1->StringUTF16.indexOf->StringLatin1.indexOf->this.coder->StringUTF16.indexOfLatin1
String#indexOf(String, int):::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index:::this.coder->this.length->this.indexOf
String#indexOf(byte[], byte, int, String, int):::Code shared by String and AbstractStringBuilder to do searches:::tgtStr.coder->tgtStr.length->StringUTF16.indexOf->StringLatin1.indexOf->StringUTF16.indexOfLatin1
String#lastIndexOf(String):::Returns the index within this string of the last occurrence of the specified substring:::this.length->this.lastIndexOf
String#lastIndexOf(String, int):::Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index:::this.coder->this.length->this.lastIndexOf
String#lastIndexOf(byte[], byte, int, String, int):::Code shared by String and AbstractStringBuilder to do searches:::tgtStr.coder->tgtStr.length->StringUTF16.lastIndexOf->StringLatin1.lastIndexOf->StringUTF16.lastIndexOfLatin1
String#substring(int):::Returns a string that is a substring of this string:::this.length->this.isLatin1->StringUTF16.newString->StringLatin1.newString
String#substring(int, int):::Returns a string that is a substring of this string:::this.length->this.checkBoundsBeginEnd->this.isLatin1->StringUTF16.newString->StringLatin1.newString
String#subSequence(int, int):::Returns a character sequence that is a subsequence of this sequence:::this.substring
String#concat(String):::Concatenates the specified string to the end of this string:::str.length->this.coder->str.coder->Arrays.copyOf->System.arraycopy->this.length->StringUTF16.newBytesFor->this.getBytes->str.getBytes
String#replace(char, char):::Returns a string resulting from replacing all occurrences of oldChar in this string with newChar:::this.isLatin1->StringUTF16.replace->StringLatin1.replace
String#matches(String):::Tells whether or not this string matches the given regular expression:::Pattern.matches
String#contains(CharSequence):::Returns true if and only if this string contains the specified sequence of char values.:::s.toString->this.indexOf
String#replaceFirst(String, String):::Replaces the first substring of this string that matches the given regular expression with the given replacement:::Pattern.compile(regex).matcher(this).replaceFirst
String#replaceAll(String, String):::Replaces each substring of this string that matches the given regular expression with the given replacement:::Pattern.compile(regex).matcher(this).replaceAll
String#replace(CharSequence, CharSequence):::Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence:::target.toString->replacement.toString->this.indexOf->tgtStr.length->Math.max->this.length->replStr.length->sb.append(this, i, j).append->this.indexOf->sb.append(this, i, thisLen).toString
String#split(String, int):::Splits this string around matches of the given regular expression:::regex.length->".$|()[{^?*+\\".indexOf->regex.length->regex.charAt->regex.charAt->list.size->this.length->this.substring->list.add->this.substring->list.add->this.indexOf->list.size->this.length->this.substring->list.add->list.size->list.get(resultSize - 1).length->list.subList(0, resultSize).toArray->Pattern.compile(regex).split
String#split(String):::Splits this string around matches of the given regular expression:::this.split
String#join(CharSequence, CharSequence...):::Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter:::Objects.requireNonNull->Objects.requireNonNull->joiner.add->joiner.toString
String#join(CharSequence, Iterable):::Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter:::Objects.requireNonNull->Objects.requireNonNull->joiner.add->joiner.toString
String#toLowerCase(Locale):::Converts all of the characters in this String to lower case using the rules of the given Locale:::this.isLatin1->StringUTF16.toLowerCase->StringLatin1.toLowerCase
String#toLowerCase():::Converts all of the characters in this String to lower case using the rules of the default locale:::Locale.getDefault->this.toLowerCase
String#toUpperCase(Locale):::Converts all of the characters in this String to upper case using the rules of the given Locale:::this.isLatin1->StringUTF16.toUpperCase->StringLatin1.toUpperCase
String#toUpperCase():::Converts all of the characters in this String to upper case using the rules of the default locale:::Locale.getDefault->this.toUpperCase
String#trim():::Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to 'U+0020' (the space character):::this.isLatin1->StringUTF16.trim->StringLatin1.trim
String#strip():::Returns a string whose value is this string, with all leading and trailing Character#isWhitespace(int) white space removed:::this.isLatin1->StringUTF16.strip->StringLatin1.strip
String#stripLeading():::Returns a string whose value is this string, with all leading Character#isWhitespace(int) white space removed:::this.isLatin1->StringUTF16.stripLeading->StringLatin1.stripLeading
String#stripTrailing():::Returns a string whose value is this string, with all trailing Character#isWhitespace(int) white space removed:::this.isLatin1->StringUTF16.stripTrailing->StringLatin1.stripTrailing
String#isBlank():::Returns true if the string is empty or contains only Character#isWhitespace(int) white space codepoints, otherwise false.:::this.indexOfNonWhitespace->this.length
String#lines():::Returns a stream of lines extracted from this string, separated by line terminators:::this.isLatin1->StringUTF16.lines->StringLatin1.lines
String#toString():::This object (which is already a string!) is itself returned.:::
String#chars():::Returns a stream of int zero-extending the char values from this sequence:::StreamSupport.intStream
String#codePoints():::Returns a stream of code point values from this sequence:::StreamSupport.intStream
String#toCharArray():::Converts this string to a new character array.:::this.isLatin1->StringUTF16.toChars->StringLatin1.toChars
String#format(String, Object...):::Returns a formatted string using the specified format string and arguments:::new Formatter().format(format, args).toString
String#format(Locale, String, Object...):::Returns a formatted string using the specified locale, format string, and arguments.:::new Formatter(l).format(format, args).toString
String#valueOf(Object):::Returns the string representation of the Object argument.:::obj.toString
String#valueOf(char[]):::Returns the string representation of the char array argument:::
String#valueOf(char[], int, int):::Returns the string representation of a specific subarray of the char array argument:::
String#copyValueOf(char[], int, int):::Equivalent to #valueOf(char[], int, int).:::
String#copyValueOf(char[]):::Equivalent to #valueOf(char[]).:::
String#valueOf(boolean):::Returns the string representation of the boolean argument.:::
String#valueOf(char):::Returns the string representation of the char argument.:::StringLatin1.canEncode->StringLatin1.toBytes->StringUTF16.toBytes
String#valueOf(int):::Returns the string representation of the int argument:::Integer.toString
String#valueOf(long):::Returns the string representation of the long argument:::Long.toString
String#valueOf(float):::Returns the string representation of the float argument:::Float.toString
String#valueOf(double):::Returns the string representation of the double argument:::Double.toString
String#intern():::Returns a canonical representation for the string object:::
String#repeat(int):::Returns a string whose value is the concatenation of this string repeated count times:::Arrays.fill->System.arraycopy->System.arraycopy->System.arraycopy
String#getBytes(byte[], int, byte):::Copy character bytes from this string into dst starting at dstBegin:::this.coder->StringLatin1.inflate->System.arraycopy
String#valueOfCodePoint(int):::Returns the string representation of the codePoint argument.:::StringLatin1.canEncode->Character.isBmpCodePoint->Character.isSupplementaryCodePoint->StringUTF16.toBytesSupplementary->StringUTF16.toBytes->StringLatin1.toBytes->this.format
StringBuffer#compareTo(StringBuffer):::Compares two StringBuffer instances lexicographically:::super.compareTo
StringBuffer#append(StringBuffer):::Appends the specified StringBuffer to this sequence:::super.append
StringBuffer#append(CharSequence):::Appends the specified CharSequence to this sequence:::super.append
StringBuilder#compareTo(StringBuilder):::Compares two StringBuilder instances lexicographically:::super.compareTo
StringBuilder#append(StringBuffer):::Appends the specified StringBuffer to this sequence:::super.append
StringConcatHelper#mixLen(int, boolean):::Mix value length into current length:::this.checkOverflow
StringConcatHelper#mixLen(int, byte):::Mix value length into current length:::this.mixLen
StringConcatHelper#mixLen(int, char):::Mix value length into current length:::this.checkOverflow
StringConcatHelper#mixLen(int, short):::Mix value length into current length:::this.mixLen
StringConcatHelper#mixLen(int, int):::Mix value length into current length:::Integer.stringSize->this.checkOverflow
StringConcatHelper#mixLen(int, long):::Mix value length into current length:::Long.stringSize->this.checkOverflow
StringConcatHelper#mixLen(int, String):::Mix value length into current length:::value.length->this.checkOverflow
StringConcatHelper#mixCoder(byte, char):::Mix coder into current coder:::StringLatin1.canEncode
StringConcatHelper#mixCoder(byte, String):::Mix coder into current coder:::value.coder
StringConcatHelper#mixCoder(byte, boolean):::Mix coder into current coder:::
StringConcatHelper#mixCoder(byte, byte):::Mix coder into current coder:::
StringConcatHelper#mixCoder(byte, short):::Mix coder into current coder:::
StringConcatHelper#mixCoder(byte, int):::Mix coder into current coder:::
StringConcatHelper#mixCoder(byte, long):::Mix coder into current coder:::
StringConcatHelper#prepend(int, byte[], byte, boolean):::Prepends the stringly representation of boolean value into buffer, given the coder and final index:::StringUTF16.putChar->StringUTF16.putChar->StringUTF16.putChar->StringUTF16.putChar->StringUTF16.putChar->StringUTF16.putChar->StringUTF16.putChar->StringUTF16.putChar->StringUTF16.putChar
StringConcatHelper#prepend(int, byte[], byte, byte):::Prepends the stringly representation of byte value into buffer, given the coder and final index:::this.prepend
StringConcatHelper#prepend(int, byte[], byte, char):::Prepends the stringly representation of char value into buffer, given the coder and final index:::StringUTF16.putChar
StringConcatHelper#prepend(int, byte[], byte, short):::Prepends the stringly representation of short value into buffer, given the coder and final index:::this.prepend
StringConcatHelper#prepend(int, byte[], byte, int):::Prepends the stringly representation of integer value into buffer, given the coder and final index:::StringUTF16.getChars->Integer.getChars
StringConcatHelper#prepend(int, byte[], byte, long):::Prepends the stringly representation of long value into buffer, given the coder and final index:::StringUTF16.getChars->Long.getChars
StringConcatHelper#prepend(int, byte[], byte, String):::Prepends the stringly representation of String value into buffer, given the coder and final index:::value.length->value.getBytes
StringConcatHelper#newString(byte[], int, byte):::Instantiates the String with given buffer and coder:::
StringConcatHelper#initialCoder():::Provides the initial coder for the String.:::
StringUTF16#indexOfLatin1(byte[], byte[]):::Handles indexOf Latin1 substring in UTF16 string.:::this.length->this.length->this.indexOfLatin1Unsafe
StringUTF16#getChars(int, int, byte[]):::This is a variant of Integer#getChars(int, int, byte[]), but for UTF-16 coder.:::this.putChar->this.putChar->this.putChar->this.putChar->this.putChar
StringUTF16#getChars(long, int, byte[]):::This is a variant of Long#getChars(long, int, byte[]), but for UTF-16 coder.:::this.putChar->this.putChar->this.putChar->this.putChar->this.putChar->this.putChar->this.putChar
System#setIn(InputStream):::Reassigns the "standard" input stream:::this.checkIO->this.setIn0
System#setOut(PrintStream):::Reassigns the "standard" output stream:::this.checkIO->this.setOut0
System#setErr(PrintStream):::Reassigns the "standard" error output stream:::this.checkIO->this.setErr0
System#console():::Returns the unique java.io.Console Console object associated with the current Java virtual machine, if any.:::SharedSecrets.getJavaIOAccess().console
System#inheritedChannel():::Returns the channel inherited from the entity that created this Java virtual machine:::SelectorProvider.provider().inheritedChannel
System#setSecurityManager(SecurityManager):::Sets the System security:::Object.class.getResource->DefaultFileSystemProvider.theFileSystem->s.checkPackageAccess->this.setSecurityManager0
System#getSecurityManager():::Gets the system security interface.:::
System#currentTimeMillis():::Returns the current time in milliseconds:::
System#nanoTime():::Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds:::
System#arraycopy(Object, int, Object, int, int):::Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array:::
System#identityHashCode(Object):::Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode():::
System#getProperties():::Determines the current system properties:::this.getSecurityManager->sm.checkPropertiesAccess
System#lineSeparator():::Returns the system-dependent line separator string:::
System#setProperties(Properties):::Sets the system properties to the Properties argument:::this.getSecurityManager->sm.checkPropertiesAccess->this.initProperties->VersionProps.init
System#getProperty(String):::Gets the system property indicated by the specified key:::this.checkKey->this.getSecurityManager->sm.checkPropertyAccess->props.getProperty
System#getProperty(String, String):::Gets the system property indicated by the specified key:::this.checkKey->this.getSecurityManager->sm.checkPropertyAccess->props.getProperty
System#setProperty(String, String):::Sets the system property indicated by the specified key:::this.checkKey->this.getSecurityManager->sm.checkPermission->props.setProperty
System#clearProperty(String):::Removes the system property indicated by the specified key:::this.checkKey->this.getSecurityManager->sm.checkPermission->props.remove
System#getenv(String):::Gets the value of the specified environment variable:::this.getSecurityManager->sm.checkPermission->ProcessEnvironment.getenv
System#getenv():::Returns an unmodifiable string map view of the current system environment:::this.getSecurityManager->sm.checkPermission->ProcessEnvironment.getenv
System.Logger#getName():::Returns the name of this logger.:::
System.Logger#isLoggable(Level):::Checks if a message of the given level would be logged by this logger.:::
System.Logger#log(Level, String):::Logs a message.:::this.log
System.Logger#log(Level, Supplier):::Logs a lazily supplied message:::Objects.requireNonNull->Objects.requireNonNull->this.isLoggable->msgSupplier.get->this.log
System.Logger#log(Level, Object):::Logs a message produced from the given object:::Objects.requireNonNull->Objects.requireNonNull->this.isLoggable->obj.toString->this.log
System.Logger#log(Level, String, Throwable):::Logs a message associated with a given throwable.:::this.log
System.Logger#log(Level, Supplier, Throwable):::Logs a lazily supplied message associated with a given throwable:::Objects.requireNonNull->Objects.requireNonNull->this.isLoggable->msgSupplier.get->this.log
System.Logger#log(Level, String, Object...):::Logs a message with an optional list of parameters.:::this.log
System.Logger#log(Level, ResourceBundle, String, Throwable):::Logs a localized message associated with a given throwable:::
System.Logger#log(Level, ResourceBundle, String, Object...):::Logs a message with resource bundle and an optional list of parameters:::
System.LoggerFinder#getLogger(String, Module):::Returns an instance of Logger Logger for the given module.:::
System.LoggerFinder#getLocalizedLogger(String, ResourceBundle, Module):::Returns a localizable instance of Logger Logger for the given module:::this.getLogger
System.LoggerFinder#getLoggerFinder():::Returns the LoggerFinder instance:::System.getSecurityManager->sm.checkPermission->this.accessProvider
System#getLogger(String):::Returns an instance of Logger Logger for the caller's use.:::Objects.requireNonNull->Reflection.getCallerClass->caller.getModule->LazyLoggers.getLogger
System#getLogger(String, ResourceBundle):::Returns a localizable instance of Logger Logger for the caller's use:::Objects.requireNonNull->Objects.requireNonNull->Reflection.getCallerClass->System.getSecurityManager->caller.getModule->LoggerFinder.accessProvider().getLocalizedLogger->AccessController.doPrivileged->caller.getModule->LoggerFinder.accessProvider().getLocalizedLogger
System#exit(int):::Terminates the currently running Java Virtual Machine:::Runtime.getRuntime().exit
System#gc():::Runs the garbage collector:::Runtime.getRuntime().gc
System#runFinalization():::Runs the finalization methods of any objects pending finalization:::Runtime.getRuntime().runFinalization
System#load(String):::Loads the native library specified by the filename argument:::Reflection.getCallerClass->Runtime.getRuntime().load0
System#loadLibrary(String):::Loads the native library specified by the libname argument:::Reflection.getCallerClass->Runtime.getRuntime().loadLibrary0
System#mapLibraryName(String):::Maps a library name into a platform-specific string representing a native library.:::
Thread#currentThread():::Returns a reference to the currently executing thread object.:::
Thread#yield():::A hint to the scheduler that the current thread is willing to yield its current use of a processor:::
Thread#sleep(long):::Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers:::
Thread#sleep(long, int):::Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers:::this.sleep
Thread#onSpinWait():::Indicates that the caller is momentarily unable to progress, until the occurrence of one or more actions on the part of other activities:::
Thread#clone():::Throws CloneNotSupportedException as a Thread can not be meaningfully cloned:::
Thread#start():::Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread:::group.add->group.threadStartFailed->this.start0
Thread#run():::If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns:::target.run
Thread#stop():::Forces the thread to stop executing:::System.getSecurityManager->this.checkAccess->Thread.currentThread->security.checkPermission->this.resume->this.stop0
Thread#interrupt():::Interrupts this thread:::Thread.currentThread->this.checkAccess->this.interrupt0->b.interrupt->this.interrupt0
Thread#interrupted():::Tests whether the current thread has been interrupted:::currentThread().isInterrupted
Thread#isInterrupted():::Tests whether this thread has been interrupted:::this.isInterrupted
Thread#isAlive():::Tests if this thread is alive:::
Thread#suspend():::Suspends this thread:::this.checkAccess->this.suspend0
Thread#resume():::Resumes a suspended thread:::this.checkAccess->this.resume0
Thread#setPriority(int):::Changes the priority of this thread:::this.checkAccess->this.getThreadGroup->g.getMaxPriority->g.getMaxPriority->this.setPriority0
Thread#getPriority():::Returns this thread's priority.:::
Thread#setName(String):::Changes the name of this thread to be equal to the argument name:::this.checkAccess->this.setNativeName
Thread#getName():::Returns this thread's name.:::
Thread#getThreadGroup():::Returns the thread group to which this thread belongs:::
Thread#activeCount():::Returns an estimate of the number of active threads in the current thread's java.lang.ThreadGroup thread group and its subgroups:::currentThread().getThreadGroup().activeCount
Thread#enumerate(Thread[]):::Copies into the specified array every active thread in the current thread's thread group and its subgroups:::currentThread().getThreadGroup().enumerate
Thread#countStackFrames():::Counts the number of stack frames in this thread:::
Thread#join(long):::Waits at most millis milliseconds for this thread to die:::System.currentTimeMillis->this.wait->System.currentTimeMillis->this.isAlive->this.wait->this.isAlive
Thread#join(long, int):::Waits at most millis milliseconds plus nanos nanoseconds for this thread to die:::this.join
Thread#join():::Waits for this thread to die:::this.join
Thread#dumpStack():::Prints a stack trace of the current thread to the standard error stream:::new Exception("Stack trace").printStackTrace
Thread#setDaemon(boolean):::Marks this thread as either a #isDaemon daemon thread or a user thread:::this.checkAccess->this.isAlive
Thread#isDaemon():::Tests if this thread is a daemon thread.:::
Thread#checkAccess():::Determines if the currently running thread has permission to modify this thread:::System.getSecurityManager->security.checkAccess
Thread#toString():::Returns a string representation of this thread, including the thread's name, priority, and thread group.:::this.getThreadGroup->this.getName->this.getPriority->this.getName->this.getPriority->group.getName
Thread#getContextClassLoader():::Returns the context ClassLoader for this thread:::System.getSecurityManager->Reflection.getCallerClass->ClassLoader.checkClassLoaderPermission
Thread#setContextClassLoader(ClassLoader):::Sets the context ClassLoader for this Thread:::System.getSecurityManager->sm.checkPermission
Thread#holdsLock(Object):::Returns true if and only if the current thread holds the monitor lock on the specified object:::
Thread#getStackTrace():::Returns an array of stack trace elements representing the stack dump of this thread:::Thread.currentThread->(new Exception()).getStackTrace->System.getSecurityManager->security.checkPermission->this.isAlive->this.dumpThreads
Thread#getAllStackTraces():::Returns a map of stack traces for all live threads:::System.getSecurityManager->security.checkPermission->security.checkPermission->this.getThreads->this.dumpThreads->m.put
Thread#getId():::Returns the identifier of this Thread:::
Thread#getState():::Returns the state of this thread:::jdk.internal.misc.VM.toThreadState
Thread.UncaughtExceptionHandler#uncaughtException(Thread, Throwable):::Method invoked when the given thread terminates due to the given uncaught exception:::
Thread#setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler):::Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread:::System.getSecurityManager->sm.checkPermission
Thread#getDefaultUncaughtExceptionHandler():::Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception:::
Thread#getUncaughtExceptionHandler():::Returns the handler invoked when this thread abruptly terminates due to an uncaught exception:::
Thread#setUncaughtExceptionHandler(UncaughtExceptionHandler):::Set the handler invoked when this thread abruptly terminates due to an uncaught exception:::this.checkAccess
Thread#processQueue(ReferenceQueue>, ConcurrentMap>, ?>):::Removes from the specified map any keys that have been enqueued on the specified reference queue.:::map.remove->queue.poll
Thread.WeakClassKey#hashCode():::Returns the identity hash code of the original referent.:::
Thread.WeakClassKey#equals(Object):::Returns true if the given object is this identical WeakClassKey instance, or, if this object's referent has not been cleared, if the given object is another WeakClassKey instance with the identical non-null referent as this one.:::this.get->((WeakClassKey) obj).get
ThreadGroup#getName():::Returns the name of this thread group.:::
ThreadGroup#getParent():::Returns the parent of this thread group:::parent.checkAccess
ThreadGroup#getMaxPriority():::Returns the maximum priority of this thread group:::
ThreadGroup#isDaemon():::Tests if this thread group is a daemon thread group:::
ThreadGroup#isDestroyed():::Tests if this thread group has been destroyed.:::
ThreadGroup#setDaemon(boolean):::Changes the daemon status of this thread group:::this.checkAccess
ThreadGroup#setMaxPriority(int):::Sets the maximum priority of the group:::this.checkAccess->Math.min->Arrays.copyOf->groupsSnapshot[i].setMaxPriority
ThreadGroup#parentOf(ThreadGroup):::Tests if this thread group is either the thread group argument or one of its ancestor thread groups.:::
ThreadGroup#checkAccess():::Determines if the currently running thread has permission to modify this thread group:::System.getSecurityManager->security.checkAccess
ThreadGroup#activeCount():::Returns an estimate of the number of active threads in this thread group and its subgroups:::Arrays.copyOf->groupsSnapshot[i].activeCount
ThreadGroup#enumerate(Thread[]):::Copies into the specified array every active thread in this thread group and its subgroups:::this.checkAccess->this.enumerate
ThreadGroup#enumerate(Thread[], boolean):::Copies into the specified array every active thread in this thread group:::this.checkAccess->this.enumerate
ThreadGroup#activeGroupCount():::Returns an estimate of the number of active groups in this thread group and its subgroups:::Arrays.copyOf->groupsSnapshot[i].activeGroupCount
ThreadGroup#enumerate(ThreadGroup[]):::Copies into the specified array references to every active subgroup in this thread group and its subgroups:::this.checkAccess->this.enumerate
ThreadGroup#enumerate(ThreadGroup[], boolean):::Copies into the specified array references to every active subgroup in this thread group:::this.checkAccess->this.enumerate
ThreadGroup#stop():::Stops all threads in this thread group:::this.stopOrSuspend->Thread.currentThread().stop
ThreadGroup#interrupt():::Interrupts all threads in this thread group:::this.checkAccess->threads[i].interrupt->Arrays.copyOf->groupsSnapshot[i].interrupt
ThreadGroup#suspend():::Suspends all threads in this thread group:::this.stopOrSuspend->Thread.currentThread().suspend
ThreadGroup#resume():::Resumes all threads in this thread group:::this.checkAccess->threads[i].resume->Arrays.copyOf->groupsSnapshot[i].resume
ThreadGroup#destroy():::Destroys this thread group and all of its subgroups:::this.checkAccess->Arrays.copyOf->groupsSnapshot[i].destroy->parent.remove
ThreadGroup#addUnstarted():::Increments the count of unstarted threads in the thread group:::
ThreadGroup#add(Thread):::Adds the specified thread to this thread group:::Arrays.copyOf
ThreadGroup#threadStartFailed(Thread):::Notifies the group that the thread t has failed an attempt to start:::this.remove
ThreadGroup#threadTerminated(Thread):::Notifies the group that the thread t has terminated:::this.remove->this.notifyAll->this.destroy
ThreadGroup#list():::Prints information about this thread group to the standard output:::this.list
ThreadGroup#uncaughtException(Thread, Throwable):::Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific Thread.UncaughtExceptionHandler installed:::Thread.getDefaultUncaughtExceptionHandler->t.getName->System.err.print->e.printStackTrace->ueh.uncaughtException->parent.uncaughtException
ThreadGroup#allowThreadSuspension(boolean):::Used by VM to control lowmem implicit suspension.:::
ThreadGroup#toString():::Returns a string representation of this Thread group.:::getClass().getName->this.getName
ThreadLocal#initialValue():::Returns the current thread's "initial value" for this thread-local variable:::
ThreadLocal#withInitial(Supplier):::Creates a thread local variable:::
ThreadLocal#get():::Returns the value in the current thread's copy of this thread-local variable:::Thread.currentThread->this.getMap->map.getEntry->this.setInitialValue
ThreadLocal#isPresent():::Returns true if there is a value in the current thread's copy of this thread-local variable, even if that values is null.:::Thread.currentThread->this.getMap->map.getEntry
ThreadLocal#set(T):::Sets the current thread's copy of this thread-local variable to the specified value:::Thread.currentThread->this.getMap->this.createMap->map.set
ThreadLocal#remove():::Removes the current thread's value for this thread-local variable:::Thread.currentThread->this.getMap->m.remove
ThreadLocal#getMap(Thread):::Get the map associated with a ThreadLocal:::
ThreadLocal#createMap(Thread, T):::Create the map associated with a ThreadLocal:::
ThreadLocal#createInheritedMap(ThreadLocalMap):::Factory method to create map of inherited thread locals:::
ThreadLocal#childValue(T):::Method childValue is visibly defined in subclass InheritableThreadLocal, but is internally defined here for the sake of providing createInheritedMap factory method without needing to subclass the map class in InheritableThreadLocal:::
Throwable#getMessage():::Returns the detail message string of this throwable.:::
Throwable#getLocalizedMessage():::Creates a localized description of this throwable:::this.getMessage
Throwable#getCause():::Returns the cause of this throwable or null if the cause is nonexistent or unknown:::
Throwable#initCause(Throwable):::Initializes the cause of this throwable to the specified value:::Objects.toString
Throwable#toString():::Returns a short description of this throwable:::getClass().getName->this.getLocalizedMessage
Throwable#printStackTrace():::Prints this throwable and its backtrace to the standard error stream:::this.printStackTrace
Throwable#printStackTrace(PrintStream):::Prints this throwable and its backtrace to the specified print stream.:::this.printStackTrace
Throwable#printStackTrace(PrintWriter):::Prints this throwable and its backtrace to the specified print writer.:::this.printStackTrace
Throwable#fillInStackTrace():::Fills in the execution stack trace:::this.fillInStackTrace
Throwable#getStackTrace():::Provides programmatic access to the stack trace information printed by #printStackTrace():::getOurStackTrace().clone
Throwable#setStackTrace(StackTraceElement[]):::Sets the stack trace elements that will be returned by #getStackTrace() and printed by #printStackTrace() and related methods:::stackTrace.clone
Throwable#addSuppressed(Throwable):::Appends the specified exception to the exceptions that were suppressed in order to deliver this exception:::suppressedExceptions.add
Throwable#getSuppressed():::Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception:::suppressedExceptions.toArray
TypeNotPresentException#typeName():::Returns the fully qualified name of the unavailable type.:::
VersionProps#print(boolean):::In case you were wondering this method is called by java -version.:::this.print
VersionProps#println(boolean):::This is the same as print except that it adds an extra line-feed at the end, typically used by the -showversion in the launcher:::this.print
WeakPairMap#containsKeyPair(K1, K2):::Tests if the specified pair of keys are associated with a value in the WeakPairMap.:::this.expungeStaleAssociations->Pair.lookup->map.containsKey
WeakPairMap#get(K1, K2):::Returns the value to which the specified pair of keys is mapped, or null if this WeakPairMap contains no mapping for the key pair:::this.expungeStaleAssociations->Pair.lookup->map.get
WeakPairMap#put(K1, K2, V):::Maps the specified key pair to the specified value in this WeakPairMap:::this.expungeStaleAssociations->Pair.weak->map.put
WeakPairMap#putIfAbsent(K1, K2, V):::If the specified key pair is not already associated with a value, associates it with the given value and returns null, else does nothing and returns the currently associated value.:::this.expungeStaleAssociations->Pair.weak->map.putIfAbsent
WeakPairMap#computeIfAbsent(K1, K2, BiFunction):::If the specified key pair is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this WeakPairMap unless null:::this.expungeStaleAssociations->Reference.reachabilityFence->Reference.reachabilityFence->Pair.weak->map.computeIfAbsent
WeakPairMap#values():::Returns a Collection view of the values contained in this WeakPairMap:::this.expungeStaleAssociations->map.values

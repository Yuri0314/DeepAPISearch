AbstractStringBuilder#compareTo(AbstractStringBuilder):::Compares the objects of two AbstractStringBuilder implementations lexicographically.:::if->return->val1->val2->count1->count2->if->return->isLatin1->StringLatin1->compareTo->StringUTF16->compareTo->return->isLatin1->StringLatin1->compareToUTF16->StringUTF16->compareToLatin1
AbstractStringBuilder#length():::Returns the length (character count).:::return
AbstractStringBuilder#capacity():::Returns the current capacity:::return
AbstractStringBuilder#ensureCapacity(int):::Ensures that the capacity is at least equal to the specified minimum:::if->ensureCapacityInternal
AbstractStringBuilder#ensureCapacityInternal(int):::For positive values of minimumCapacity, this method behaves like ensureCapacity, however it is never synchronized:::oldCapacity->if->Arrays->newCapacity->copyOf
AbstractStringBuilder#newCapacity(int):::Returns a capacity at least as large as the given minimum capacity:::oldCapacity->newCapacity->if->SAFE_BOUND->return->hugeCapacity
AbstractStringBuilder#hugeCapacity(int)::: abstract string builder huge capacity:::SAFE_BOUND->UNSAFE_BOUND->if->throw->new->OutOfMemoryError->return
AbstractStringBuilder#inflate():::If the coder is "isLatin1", this inflates the internal 8-bit storage to 16-bit <hi=0, low> pair storage.:::if->isLatin1->return->buf->StringUTF16->newBytesFor->StringLatin1->inflate
AbstractStringBuilder#trimToSize():::Attempts to reduce storage used for the character sequence:::length->if->Arrays->copyOf
AbstractStringBuilder#setLength(int):::Sets the length of the character sequence:::if->throw->new->StringIndexOutOfBoundsException->ensureCapacityInternal->if->if->isLatin1->StringLatin1->fillNull->else->StringUTF16->fillNull
AbstractStringBuilder#charAt(int):::Returns the char value in this sequence at the specified index:::checkIndex->if->isLatin1->return->return->StringUTF16->charAt
AbstractStringBuilder#codePointAt(int):::Returns the character (Unicode code point) at the specified index:::count->value->checkIndex->if->isLatin1->return->return->StringUTF16->codePointAtSB
AbstractStringBuilder#codePointBefore(int):::Returns the character (Unicode code point) before the specified index:::i->if->throw->new->StringIndexOutOfBoundsException->if->isLatin1->return->return->StringUTF16->codePointBeforeSB
AbstractStringBuilder#codePointCount(int, int):::Returns the number of Unicode code points in the specified text range of this sequence:::if->throw->new->IndexOutOfBoundsException->if->isLatin1->return->return->StringUTF16->codePointCountSB
AbstractStringBuilder#offsetByCodePoints(int, int):::Returns the index within this sequence that is offset from the given index by codePointOffset code points:::if->throw->new->IndexOutOfBoundsException->return->Character->offsetByCodePoints
AbstractStringBuilder#getChars(int, int, char[], int):::Characters are copied from this sequence into the destination character array dst:::checkRangeSIOOBE->n->checkRange->if->isLatin1->StringLatin1->getChars->else->StringUTF16->getChars
AbstractStringBuilder#setCharAt(int, char):::The character at the specified index is set to ch:::checkIndex->if->isLatin1->StringLatin1->canEncode->else->if->isLatin1->inflate->StringUTF16->putCharSB
AbstractStringBuilder#append(Object):::Appends the string representation of the Object argument:::return->String->valueOf->append
AbstractStringBuilder#append(String):::Appends the specified string to this character sequence:::if->return->appendNull->len->str->length->ensureCapacityInternal->putStringAt->return
AbstractStringBuilder#append(StringBuffer)::: abstract string builder append:::return->this->append
AbstractStringBuilder#append(AbstractStringBuilder)::: abstract string builder append:::if->return->appendNull->len->asb->length->ensureCapacityInternal->if->getCoder->asb->getCoder->inflate->asb->getBytes->return
AbstractStringBuilder#append(CharSequence)::: abstract string builder append:::if->return->appendNull->if->return->this->append->if->return->this->append->return->this->s->length->append
AbstractStringBuilder#appendNull()::: abstract string builder append null:::ensureCapacityInternal->count->val->if->isLatin1->else->StringUTF16->putCharsAt->return
AbstractStringBuilder#append(CharSequence, int, int):::Appends a subsequence of the specified CharSequence to this sequence:::if->s->length->checkRange->len->ensureCapacityInternal->appendChars->return
AbstractStringBuilder#append(char[]):::Appends the string representation of the char array argument to this sequence:::len->ensureCapacityInternal->appendChars->return
AbstractStringBuilder#append(char[], int, int):::Appends the string representation of a subarray of the char array argument to this sequence:::end->checkRange->ensureCapacityInternal->appendChars->return
AbstractStringBuilder#append(boolean):::Appends the string representation of the boolean argument to the sequence:::ensureCapacityInternal->count->val->if->isLatin1->if->else->else->if->StringUTF16->putCharsAt->else->StringUTF16->putCharsAt->return
AbstractStringBuilder#append(char):::Appends the string representation of the char argument to this sequence:::ensureCapacityInternal->if->isLatin1->StringLatin1->canEncode->else->if->isLatin1->inflate->StringUTF16->putCharSB->return
AbstractStringBuilder#append(int):::Appends the string representation of the int argument to this sequence:::count->spaceNeeded->Integer->stringSize->ensureCapacityInternal->if->isLatin1->Integer->getChars->else->StringUTF16->getChars->return
AbstractStringBuilder#append(long):::Appends the string representation of the long argument to this sequence:::count->spaceNeeded->Long->stringSize->ensureCapacityInternal->if->isLatin1->Long->getChars->else->StringUTF16->getChars->return
AbstractStringBuilder#append(float):::Appends the string representation of the float argument to this sequence:::FloatingDecimal->appendTo->return
AbstractStringBuilder#append(double):::Appends the string representation of the double argument to this sequence:::FloatingDecimal->appendTo->return
AbstractStringBuilder#delete(int, int):::Removes the characters in a substring of this sequence:::count->if->checkRangeSIOOBE->len->if->shift->return
AbstractStringBuilder#appendCodePoint(int):::Appends the string representation of the codePoint argument to this sequence:::if->Character->isBmpCodePoint->return->append->return->Character->toChars->append
AbstractStringBuilder#deleteCharAt(int):::Removes the char at the specified position in this sequence:::checkIndex->shift->return
AbstractStringBuilder#replace(int, int, String):::Replaces the characters in a substring of this sequence with characters in the specified String:::count->if->checkRangeSIOOBE->len->str->length->newCount->ensureCapacityInternal->shift->putStringAt->return
AbstractStringBuilder#substring(int):::Returns a new String that contains a subsequence of characters currently contained in this character sequence:::return->substring
AbstractStringBuilder#subSequence(int, int):::Returns a new character sequence that is a subsequence of this sequence:::return->substring
AbstractStringBuilder#substring(int, int):::Returns a new String that contains a subsequence of characters currently contained in this sequence:::checkRangeSIOOBE->if->isLatin1->return->StringLatin1->newString->return->StringUTF16->newString
AbstractStringBuilder#shift(int, int)::: abstract string builder shift:::System->arraycopy
AbstractStringBuilder#insert(int, char[], int, int):::Inserts the string representation of a subarray of the str array argument into this sequence:::checkOffset->checkRangeSIOOBE->ensureCapacityInternal->shift->putCharsAt->return
AbstractStringBuilder#insert(int, Object):::Inserts the string representation of the Object argument into this character sequence:::return->String->valueOf->insert
AbstractStringBuilder#insert(int, String):::Inserts the string into this character sequence:::checkOffset->if->len->str->length->ensureCapacityInternal->shift->putStringAt->return
AbstractStringBuilder#insert(int, char[]):::Inserts the string representation of the char array argument into this sequence:::checkOffset->len->ensureCapacityInternal->shift->putCharsAt->return
AbstractStringBuilder#insert(int, CharSequence):::Inserts the specified CharSequence into this sequence:::if->if->return->this->insert->return->this->s->length->insert
AbstractStringBuilder#insert(int, CharSequence, int, int):::Inserts a subsequence of the specified CharSequence into this sequence:::if->checkOffset->s->length->checkRange->len->ensureCapacityInternal->shift->putCharsAt->return
AbstractStringBuilder#insert(int, boolean):::Inserts the string representation of the boolean argument into this sequence:::return->String->valueOf->insert
AbstractStringBuilder#insert(int, char):::Inserts the string representation of the char argument into this sequence:::checkOffset->ensureCapacityInternal->shift->if->isLatin1->StringLatin1->canEncode->else->if->isLatin1->inflate->StringUTF16->putCharSB->return
AbstractStringBuilder#insert(int, int):::Inserts the string representation of the second int argument into this sequence:::return->String->valueOf->insert
AbstractStringBuilder#insert(int, long):::Inserts the string representation of the long argument into this sequence:::return->String->valueOf->insert
AbstractStringBuilder#insert(int, float):::Inserts the string representation of the float argument into this sequence:::return->String->valueOf->insert
AbstractStringBuilder#insert(int, double):::Inserts the string representation of the double argument into this sequence:::return->String->valueOf->insert
AbstractStringBuilder#indexOf(String):::Returns the index within this string of the first occurrence of the specified substring:::return->indexOf
AbstractStringBuilder#indexOf(String, int):::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index:::return->String->indexOf
AbstractStringBuilder#lastIndexOf(String):::Returns the index within this string of the last occurrence of the specified substring:::return->lastIndexOf
AbstractStringBuilder#lastIndexOf(String, int):::Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index:::return->String->lastIndexOf
AbstractStringBuilder#reverse():::Causes this character sequence to be replaced by the reverse of the sequence:::val->count->coder->n->if->for->j->else->StringUTF16->reverse->return
AbstractStringBuilder#toString():::Returns a string representing the data in this sequence:::
AbstractStringBuilder#chars()::: abstract string builder chars:::return->StreamSupport->val->count->coder->return->new->StringLatin1.CharsSpliterator->new->StringUTF16.CharsSpliterator->intStream
AbstractStringBuilder#codePoints()::: abstract string builder code points:::return->StreamSupport->val->count->coder->return->new->StringLatin1.CharsSpliterator->new->StringUTF16.CodePointsSpliterator->intStream
AbstractStringBuilder#getValue():::Needed by String for the contentEquals method.:::return
AbstractStringBuilder#getBytes(byte[], int, byte)::: abstract string builder get bytes:::if->System->arraycopy->else->StringLatin1->inflate
AbstractStringBuilder#initBytes(char[], int, int)::: abstract string builder init bytes:::if->StringUTF16->compress->if->return->StringUTF16->toBytes
AbstractStringBuilder#getCoder()::: abstract string builder get coder:::return
AbstractStringBuilder#isLatin1()::: abstract string builder is latin1:::return
AbstractStringBuilder#putCharsAt(int, char[], int, int)::: abstract string builder put chars at:::if->isLatin1->val->for->i->j->else->StringUTF16->putCharsSB
AbstractStringBuilder#putCharsAt(int, CharSequence, int, int)::: abstract string builder put chars at:::if->isLatin1->val->for->i->j->else->StringUTF16->putCharsSB
AbstractStringBuilder#putStringAt(int, String)::: abstract string builder put string at:::if->getCoder->str->coder->inflate->str->getBytes
AbstractStringBuilder#appendChars(char[], int, int)::: abstract string builder append chars:::count->if->isLatin1->val->for->i->j->else->StringUTF16->putCharsSB
AbstractStringBuilder#appendChars(CharSequence, int, int)::: abstract string builder append chars:::if->isLatin1->val->for->i->j->else->StringUTF16->putCharsSB
AbstractStringBuilder#checkRange(int, int, int)::: abstract string builder check range:::if->throw->new->IndexOutOfBoundsException
AbstractStringBuilder#checkRangeSIOOBE(int, int, int)::: abstract string builder check range e:::if->throw->new->StringIndexOutOfBoundsException
Appendable#append(CharSequence):::Appends the specified character sequence to this Appendable:::
Appendable#append(CharSequence, int, int):::Appends a subsequence of the specified character sequence to this Appendable:::
Appendable#append(char):::Appends the specified character to this Appendable.:::
ApplicationShutdownHooks#add(Thread)::: application shutdown hooks add:::if->throw->new->IllegalStateException->if->hook->isAlive->throw->new->IllegalArgumentException->if->hooks->containsKey->throw->new->IllegalArgumentException->hooks->put
ApplicationShutdownHooks#remove(Thread)::: application shutdown hooks remove:::if->throw->new->IllegalStateException->if->throw->new->NullPointerException->return->hooks->remove
ApplicationShutdownHooks#runHooks()::: application shutdown hooks run hooks:::threads->synchronized->hooks->keySet->foreach->hook->start->foreach->while->try->hook->join->break->catch->finally
AutoCloseable#close():::Closes this resource, relinquishing any underlying resources:::
Boolean#parseBoolean(String):::Parses the string argument as a boolean:::return->equalsIgnoreCase
Boolean#booleanValue():::Returns the value of this Boolean object as a boolean primitive.:::return
Boolean#valueOf(boolean):::Returns a Boolean instance representing the specified boolean value:::return
Boolean#valueOf(String):::Returns a Boolean with a value represented by the specified string:::return->parseBoolean
Boolean#toString(boolean):::Returns a String object representing the specified boolean:::return
Boolean#toString():::Returns a String object representing this Boolean's value:::return
Boolean#hashCode():::Returns a hash code for this Boolean object.:::return->Boolean->hashCode
Boolean#hashCode(boolean):::Returns a hash code for a boolean value; compatible with Boolean.hashCode().:::return
Boolean#equals(Object):::Returns true if and only if the argument is not null and is a Boolean object that represents the same boolean value as this object.:::if->return->booleanValue->return
Boolean#getBoolean(String):::Returns true if and only if the system property named by the argument exists and is equal to, ignoring case, the string "true":::result->try->System->getProperty->parseBoolean->catch->finally->return
Boolean#compareTo(Boolean):::Compares this Boolean instance with another.:::return->compare
Boolean#compare(boolean, boolean):::Compares two boolean values:::return
Boolean#logicalAnd(boolean, boolean):::Returns the result of applying the logical AND operator to the specified boolean operands.:::return
Boolean#logicalOr(boolean, boolean):::Returns the result of applying the logical OR operator to the specified boolean operands.:::return
Boolean#logicalXor(boolean, boolean):::Returns the result of applying the logical XOR operator to the specified boolean operands.:::return
Byte#toString(byte):::Returns a new String object representing the specified byte:::return->Integer->toString
Byte#valueOf(byte):::Returns a Byte instance representing the specified byte value:::offset->return
Byte#parseByte(String, int):::Parses the string argument as a signed byte in the radix specified by the second argument:::i->Integer->parseInt->if->throw->new->NumberFormatException->return
Byte#parseByte(String):::Parses the string argument as a signed decimal byte:::return->parseByte
Byte#valueOf(String, int):::Returns a Byte object holding the value extracted from the specified String when parsed with the radix given by the second argument:::return->parseByte->valueOf
Byte#valueOf(String):::Returns a Byte object holding the value given by the specified String:::return->valueOf
Byte#decode(String):::Decodes a String into a Byte:::i->Integer->decode->if->throw->new->NumberFormatException->return->valueOf
Byte#byteValue():::Returns the value of this Byte as a byte.:::return
Byte#shortValue():::Returns the value of this Byte as a short after a widening primitive conversion.:::return
Byte#intValue():::Returns the value of this Byte as an int after a widening primitive conversion.:::return
Byte#longValue():::Returns the value of this Byte as a long after a widening primitive conversion.:::return
Byte#floatValue():::Returns the value of this Byte as a float after a widening primitive conversion.:::return
Byte#doubleValue():::Returns the value of this Byte as a double after a widening primitive conversion.:::return
Byte#toString():::Returns a String object representing this Byte's value:::return->Integer->toString
Byte#hashCode():::Returns a hash code for this Byte; equal to the result of invoking intValue().:::return->Byte->hashCode
Byte#hashCode(byte):::Returns a hash code for a byte value; compatible with Byte.hashCode().:::return
Byte#equals(Object):::Compares this object to the specified object:::if->return->byteValue->return
Byte#compareTo(Byte):::Compares two Byte objects numerically.:::return->compare
Byte#compare(byte, byte):::Compares two byte values numerically:::return
Byte#compareUnsigned(byte, byte):::Compares two byte values numerically treating the values as unsigned.:::return->Byte->toUnsignedInt->Byte->toUnsignedInt
Byte#toUnsignedInt(byte):::Converts the argument to an int by an unsigned conversion:::return
Byte#toUnsignedLong(byte):::Converts the argument to a long by an unsigned conversion:::return
Character.Subset#equals(Object):::Compares two Subset objects for equality:::return
Character.Subset#hashCode():::Returns the standard hash code as defined by the Object#hashCode method:::return->super->hashCode
Character.Subset#toString():::Returns the name of this subset.:::return
Character.UnicodeBlock#of(char):::Returns the object representing the Unicode block containing the given character, or null if the character is not a member of a defined block:::return->of
Character.UnicodeBlock#of(int):::Returns the object representing the Unicode block containing the given character (Unicode code point), or null if the character is not a member of a defined block.:::if->isValidCodePoint->throw->String->format->new->IllegalArgumentException->top->bottom->current->while->if->else->return
Character.UnicodeBlock#forName(String):::Returns the UnicodeBlock with the given name:::block->map->blockName->toUpperCase->get->if->throw->new->IllegalArgumentException->return
Character#valueOf(char):::Returns a Character instance representing the specified char value:::if->return->return->new->Character
Character#charValue():::Returns the value of this Character object.:::return
Character#hashCode():::Returns a hash code for this Character; equal to the result of invoking charValue().:::return->Character->hashCode
Character#hashCode(char):::Returns a hash code for a char value; compatible with Character.hashCode().:::return
Character#equals(Object):::Compares this object against the specified object:::if->return->charValue->return
Character#toString():::Returns a String object representing this Character's value:::buf->return->String->valueOf
Character#toString(char):::Returns a String object representing the specified char:::return->String->valueOf
Character#toString(int):::Returns a String object representing the specified character (Unicode code point):::return->String->valueOfCodePoint
Character#isValidCodePoint(int):::Determines whether the specified code point is a valid  Unicode code point value.:::plane->return
Character#isBmpCodePoint(int):::Determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP):::return
Character#isSupplementaryCodePoint(int):::Determines whether the specified character (Unicode code point) is in the supplementary character range.:::return
Character#isHighSurrogate(char):::Determines if the given char value is a  Unicode high-surrogate code unit (also known as leading-surrogate code unit):::return
Character#isLowSurrogate(char):::Determines if the given char value is a  Unicode low-surrogate code unit (also known as trailing-surrogate code unit):::return
Character#isSurrogate(char):::Determines if the given char value is a Unicode surrogate code unit:::return
Character#isSurrogatePair(char, char):::Determines whether the specified pair of char values is a valid  Unicode surrogate pair:::return->isHighSurrogate->isLowSurrogate
Character#charCount(int):::Determines the number of char values needed to represent the specified character (Unicode code point):::return
Character#toCodePoint(char, char):::Converts the specified surrogate pair to its supplementary code point value:::return
Character#codePointAt(CharSequence, int):::Returns the code point at the given index of the CharSequence:::c1->seq->charAt->if->isHighSurrogate->seq->length->c2->seq->charAt->if->isLowSurrogate->return->toCodePoint->return
Character#codePointAt(char[], int):::Returns the code point at the given index of the char array:::return->codePointAtImpl
Character#codePointAt(char[], int, int):::Returns the code point at the given index of the char array, where only array elements with index less than limit can be used:::if->throw->new->IndexOutOfBoundsException->return->codePointAtImpl
Character#codePointAtImpl(char[], int, int)::: character code point at impl:::c1->if->isHighSurrogate->c2->if->isLowSurrogate->return->toCodePoint->return
Character#codePointBefore(CharSequence, int):::Returns the code point preceding the given index of the CharSequence:::c2->seq->charAt->if->isLowSurrogate->c1->seq->charAt->if->isHighSurrogate->return->toCodePoint->return
Character#codePointBefore(char[], int):::Returns the code point preceding the given index of the char array:::return->codePointBeforeImpl
Character#codePointBefore(char[], int, int):::Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used:::if->throw->new->IndexOutOfBoundsException->return->codePointBeforeImpl
Character#codePointBeforeImpl(char[], int, int)::: character code point before impl:::c2->if->isLowSurrogate->c1->if->isHighSurrogate->return->toCodePoint->return
Character#highSurrogate(int):::Returns the leading surrogate (a  high surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding:::return
Character#lowSurrogate(int):::Returns the trailing surrogate (a  low surrogate code unit) of the  surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding:::return
Character#toChars(int, char[], int):::Converts the specified character (Unicode code point) to its UTF-16 representation:::if->isBmpCodePoint->return->else->if->isValidCodePoint->toSurrogates->return->else->throw->String->format->new->IllegalArgumentException
Character#toChars(int):::Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array:::if->isBmpCodePoint->return->new->charArr->else->if->isValidCodePoint->result->new->charArr->toSurrogates->return->else->throw->String->format->new->IllegalArgumentException
Character#toSurrogates(int, char[], int)::: character to surrogates:::lowSurrogate->highSurrogate
Character#codePointCount(CharSequence, int, int):::Returns the number of Unicode code points in the text range of the specified char sequence:::length->seq->length->if->throw->new->IndexOutOfBoundsException->n->for->i->return
Character#codePointCount(char[], int, int):::Returns the number of Unicode code points in a subarray of the char array argument:::if->throw->new->IndexOutOfBoundsException->return->codePointCountImpl
Character#codePointCountImpl(char[], int, int)::: character code point count impl:::endIndex->n->for->i->return
Character#offsetByCodePoints(CharSequence, int, int):::Returns the index within the given char sequence that is offset from the given index by codePointOffset code points:::length->seq->length->if->throw->new->IndexOutOfBoundsException->x->if->i->for->if->throw->new->IndexOutOfBoundsException->else->i->for->if->throw->new->IndexOutOfBoundsException->return
Character#offsetByCodePoints(char[], int, int, int, int):::Returns the index within the given char subarray that is offset from the given index by codePointOffset code points:::if->throw->new->IndexOutOfBoundsException->return->offsetByCodePointsImpl
Character#offsetByCodePointsImpl(char[], int, int, int, int)::: character offset by code points impl:::x->if->limit->i->for->if->throw->new->IndexOutOfBoundsException->else->i->for->if->throw->new->IndexOutOfBoundsException->return
Character#isLowerCase(char):::Determines if the specified character is a lowercase character:::return->isLowerCase
Character#isLowerCase(int):::Determines if the specified character (Unicode code point) is a lowercase character:::return->getType->CharacterData->of->isOtherLowercase
Character#isUpperCase(char):::Determines if the specified character is an uppercase character:::return->isUpperCase
Character#isUpperCase(int):::Determines if the specified character (Unicode code point) is an uppercase character:::return->getType->CharacterData->of->isOtherUppercase
Character#isTitleCase(char):::Determines if the specified character is a titlecase character:::return->isTitleCase
Character#isTitleCase(int):::Determines if the specified character (Unicode code point) is a titlecase character:::return->getType
Character#isDigit(char):::Determines if the specified character is a digit:::return->isDigit
Character#isDigit(int):::Determines if the specified character (Unicode code point) is a digit:::return->getType
Character#isDefined(char):::Determines if a character is defined in Unicode:::return->isDefined
Character#isDefined(int):::Determines if a character (Unicode code point) is defined in Unicode:::return->getType
Character#isLetter(char):::Determines if the specified character is a letter:::return->isLetter
Character#isLetter(int):::Determines if the specified character (Unicode code point) is a letter:::return->getType
Character#isLetterOrDigit(char):::Determines if the specified character is a letter or digit:::return->isLetterOrDigit
Character#isLetterOrDigit(int):::Determines if the specified character (Unicode code point) is a letter or digit:::return->getType
Character#isJavaLetter(char):::Determines if the specified character is permissible as the first character in a Java identifier:::return->isJavaIdentifierStart
Character#isJavaLetterOrDigit(char):::Determines if the specified character may be part of a Java identifier as other than the first character:::return->isJavaIdentifierPart
Character#isAlphabetic(int):::Determines if the specified character (Unicode code point) is an alphabet:::return->getType->CharacterData->of->isOtherAlphabetic
Character#isIdeographic(int):::Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.:::return->CharacterData->of->isIdeographic
Character#isJavaIdentifierStart(char):::Determines if the specified character is permissible as the first character in a Java identifier:::return->isJavaIdentifierStart
Character#isJavaIdentifierStart(int):::Determines if the character (Unicode code point) is permissible as the first character in a Java identifier:::return->CharacterData->of->isJavaIdentifierStart
Character#isJavaIdentifierPart(char):::Determines if the specified character may be part of a Java identifier as other than the first character:::return->isJavaIdentifierPart
Character#isJavaIdentifierPart(int):::Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character:::return->CharacterData->of->isJavaIdentifierPart
Character#isUnicodeIdentifierStart(char):::Determines if the specified character is permissible as the first character in a Unicode identifier:::return->isUnicodeIdentifierStart
Character#isUnicodeIdentifierStart(int):::Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier:::return->CharacterData->of->isUnicodeIdentifierStart
Character#isUnicodeIdentifierPart(char):::Determines if the specified character may be part of a Unicode identifier as other than the first character:::return->isUnicodeIdentifierPart
Character#isUnicodeIdentifierPart(int):::Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character:::return->CharacterData->of->isUnicodeIdentifierPart
Character#isIdentifierIgnorable(char):::Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier:::return->isIdentifierIgnorable
Character#isIdentifierIgnorable(int):::Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier:::return->CharacterData->of->isIdentifierIgnorable
Character#toLowerCase(char):::Converts the character argument to lowercase using case mapping information from the UnicodeData file:::return->toLowerCase
Character#toLowerCase(int):::Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file:::return->CharacterData->of->toLowerCase
Character#toUpperCase(char):::Converts the character argument to uppercase using case mapping information from the UnicodeData file:::return->toUpperCase
Character#toUpperCase(int):::Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file:::return->CharacterData->of->toUpperCase
Character#toTitleCase(char):::Converts the character argument to titlecase using case mapping information from the UnicodeData file:::return->toTitleCase
Character#toTitleCase(int):::Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file:::return->CharacterData->of->toTitleCase
Character#digit(char, int):::Returns the numeric value of the character ch in the specified radix:::return->digit
Character#digit(int, int):::Returns the numeric value of the specified character (Unicode code point) in the specified radix:::return->CharacterData->of->digit
Character#getNumericValue(char):::Returns the int value that the specified Unicode character represents:::return->getNumericValue
Character#getNumericValue(int):::Returns the int value that the specified character (Unicode code point) represents:::return->CharacterData->of->getNumericValue
Character#isSpace(char):::Determines if the specified character is ISO-LATIN-1 white space:::return
Character#isSpaceChar(char):::Determines if the specified character is a Unicode space character:::return->isSpaceChar
Character#isSpaceChar(int):::Determines if the specified character (Unicode code point) is a Unicode space character:::return->getType
Character#isWhitespace(char):::Determines if the specified character is white space according to Java:::return->isWhitespace
Character#isWhitespace(int):::Determines if the specified character (Unicode code point) is white space according to Java:::return->CharacterData->of->isWhitespace
Character#isISOControl(char):::Determines if the specified character is an ISO control character:::return->isISOControl
Character#isISOControl(int):::Determines if the referenced character (Unicode code point) is an ISO control character:::return
Character#getType(char):::Returns a value indicating a character's general category:::return->getType
Character#getType(int):::Returns a value indicating a character's general category.:::return->CharacterData->of->getType
Character#forDigit(int, int):::Determines the character representation for a specific digit in the specified radix:::if->return->if->return->if->return->return
Character#getDirectionality(char):::Returns the Unicode directionality property for the given character:::return->getDirectionality
Character#getDirectionality(int):::Returns the Unicode directionality property for the given character (Unicode code point):::return->CharacterData->of->getDirectionality
Character#isMirrored(char):::Determines whether the character is mirrored according to the Unicode specification:::return->isMirrored
Character#isMirrored(int):::Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification:::return->CharacterData->of->isMirrored
Character#compareTo(Character):::Compares two Character objects numerically.:::return->compare
Character#compare(char, char):::Compares two char values numerically:::return
Character#toUpperCaseEx(int):::Converts the character (Unicode code point) argument to uppercase using information from the UnicodeData file.:::return->CharacterData->of->toUpperCaseEx
Character#toUpperCaseCharArray(int):::Converts the character (Unicode code point) argument to uppercase using case mapping information from the SpecialCasing file in the Unicode specification:::return->CharacterData->of->toUpperCaseCharArray
Character#reverseBytes(char):::Returns the value obtained by reversing the order of the bytes in the specified char value.:::return
Character#getName(int):::Returns the Unicode name of the specified character codePoint, or null if the code point is #UNASSIGNED unassigned:::if->isValidCodePoint->throw->String->format->new->IllegalArgumentException->name->CharacterName->getInstance->getName->if->return->if->getType->return->block->UnicodeBlock->of->if->return->block->toString->replace->Integer->toHexString->toUpperCase->return->Integer->toHexString->toUpperCase
Character#codePointOf(String):::Returns the code point value of the Unicode character specified by the given Unicode character name:::name->trim->toUpperCase->cp->CharacterName->getInstance->getCodePoint->if->return->try->off->name->lastIndexOf->if->Integer->name->length->parseInt->if->isValidCodePoint->name->getName->equals->return->catch->finally->throw->new->IllegalArgumentException
CharacterData#getProperties(int)::: character data get properties:::
CharacterData#getType(int)::: character data get type:::
CharacterData#isWhitespace(int)::: character data is whitespace:::
CharacterData#isMirrored(int)::: character data is mirrored:::
CharacterData#isJavaIdentifierStart(int)::: character data is java identifier start:::
CharacterData#isJavaIdentifierPart(int)::: character data is java identifier part:::
CharacterData#isUnicodeIdentifierStart(int)::: character data is unicode identifier start:::
CharacterData#isUnicodeIdentifierPart(int)::: character data is unicode identifier part:::
CharacterData#isIdentifierIgnorable(int)::: character data is identifier ignorable:::
CharacterData#toLowerCase(int)::: character data to lower case:::
CharacterData#toUpperCase(int)::: character data to upper case:::
CharacterData#toTitleCase(int)::: character data to title case:::
CharacterData#digit(int, int)::: character data digit:::
CharacterData#getNumericValue(int)::: character data get numeric value:::
CharacterData#getDirectionality(int)::: character data get directionality:::
CharacterData#toUpperCaseEx(int)::: character data to upper case ex:::return->toUpperCase
CharacterData#toUpperCaseCharArray(int)::: character data to upper case char array:::return
CharacterData#isOtherLowercase(int)::: character data is other lowercase:::return
CharacterData#isOtherUppercase(int)::: character data is other uppercase:::return
CharacterData#isOtherAlphabetic(int)::: character data is other alphabetic:::return
CharacterData#isIdeographic(int)::: character data is ideographic:::return
CharacterData#of(int)::: character data of:::if->return->else->switch->return->return->return->return->return->return
CharacterData00#getProperties(int)::: character data00 get properties:::offset->props->return
CharacterData00#getPropertiesEx(int)::: character data00 get properties ex:::offset->props->return
CharacterData00#getType(int)::: character data00 get type:::props->getProperties->return
CharacterData00#isOtherLowercase(int)::: character data00 is other lowercase:::props->getPropertiesEx->return
CharacterData00#isOtherUppercase(int)::: character data00 is other uppercase:::props->getPropertiesEx->return
CharacterData00#isOtherAlphabetic(int)::: character data00 is other alphabetic:::props->getPropertiesEx->return
CharacterData00#isIdeographic(int)::: character data00 is ideographic:::props->getPropertiesEx->return
CharacterData00#isJavaIdentifierStart(int)::: character data00 is java identifier start:::if->return->props->getProperties->return
CharacterData00#isJavaIdentifierPart(int)::: character data00 is java identifier part:::if->return->props->getProperties->return
CharacterData00#isUnicodeIdentifierStart(int)::: character data00 is unicode identifier start:::props->getProperties->return
CharacterData00#isUnicodeIdentifierPart(int)::: character data00 is unicode identifier part:::props->getProperties->return
CharacterData00#isIdentifierIgnorable(int)::: character data00 is identifier ignorable:::props->getProperties->return
CharacterData00#toLowerCase(int)::: character data00 to lower case:::mapChar->val->getProperties->if->if->switch->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->else->offset->return
CharacterData00#toUpperCase(int)::: character data00 to upper case:::mapChar->val->getProperties->if->if->switch->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->else->offset->return
CharacterData00#toTitleCase(int)::: character data00 to title case:::mapChar->val->getProperties->if->if->else->if->else->if->toUpperCase->return
CharacterData00#digit(int, int)::: character data00 digit:::value->if->val->getProperties->kind->if->else->if->return
CharacterData00#getNumericValue(int)::: character data00 get numeric value:::val->getProperties->retval->switch->break->break->switch->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->return
CharacterData00#isWhitespace(int)::: character data00 is whitespace:::props->getProperties->return
CharacterData00#getDirectionality(int)::: character data00 get directionality:::val->getProperties->directionality->if->switch->break->break->break->break->break->break->break->break->break->break->return
CharacterData00#isMirrored(int)::: character data00 is mirrored:::props->getProperties->return
CharacterData00#toUpperCaseEx(int)::: character data00 to upper case ex:::mapChar->val->getProperties->if->if->offset->else->switch->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->return
CharacterData00#toUpperCaseCharArray(int)::: character data00 to upper case char array:::upperMap->location->findInCharMap->if->return
CharacterData00#findInCharMap(int):::Finds the character in the uppercase mapping table.:::if->return->top->bottom->current->while->if->else->if->return->else->return
CharacterData01#getProperties(int)::: character data01 get properties:::offset->props->return
CharacterData01#getPropertiesEx(int)::: character data01 get properties ex:::offset->props->return
CharacterData01#getType(int)::: character data01 get type:::props->getProperties->return
CharacterData01#isOtherLowercase(int)::: character data01 is other lowercase:::props->getPropertiesEx->return
CharacterData01#isOtherUppercase(int)::: character data01 is other uppercase:::props->getPropertiesEx->return
CharacterData01#isOtherAlphabetic(int)::: character data01 is other alphabetic:::props->getPropertiesEx->return
CharacterData01#isIdeographic(int)::: character data01 is ideographic:::props->getPropertiesEx->return
CharacterData01#isJavaIdentifierStart(int)::: character data01 is java identifier start:::props->getProperties->return
CharacterData01#isJavaIdentifierPart(int)::: character data01 is java identifier part:::props->getProperties->return
CharacterData01#isUnicodeIdentifierStart(int)::: character data01 is unicode identifier start:::props->getProperties->return
CharacterData01#isUnicodeIdentifierPart(int)::: character data01 is unicode identifier part:::props->getProperties->return
CharacterData01#isIdentifierIgnorable(int)::: character data01 is identifier ignorable:::props->getProperties->return
CharacterData01#toLowerCase(int)::: character data01 to lower case:::mapChar->val->getProperties->if->offset->return
CharacterData01#toUpperCase(int)::: character data01 to upper case:::mapChar->val->getProperties->if->offset->return
CharacterData01#toTitleCase(int)::: character data01 to title case:::mapChar->val->getProperties->if->if->else->if->else->if->toUpperCase->return
CharacterData01#digit(int, int)::: character data01 digit:::value->if->val->getProperties->kind->if->else->if->return
CharacterData01#getNumericValue(int)::: character data01 get numeric value:::val->getProperties->retval->switch->break->break->switch->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->return
CharacterData01#isWhitespace(int)::: character data01 is whitespace:::props->getProperties->return
CharacterData01#getDirectionality(int)::: character data01 get directionality:::val->getProperties->directionality->if->return
CharacterData01#isMirrored(int)::: character data01 is mirrored:::props->getProperties->return
CharacterData02#getProperties(int)::: character data02 get properties:::offset->props->return
CharacterData02#getPropertiesEx(int)::: character data02 get properties ex:::offset->props->return
CharacterData02#isOtherLowercase(int)::: character data02 is other lowercase:::props->getPropertiesEx->return
CharacterData02#isOtherUppercase(int)::: character data02 is other uppercase:::props->getPropertiesEx->return
CharacterData02#isOtherAlphabetic(int)::: character data02 is other alphabetic:::props->getPropertiesEx->return
CharacterData02#isIdeographic(int)::: character data02 is ideographic:::props->getPropertiesEx->return
CharacterData02#getType(int)::: character data02 get type:::props->getProperties->return
CharacterData02#isJavaIdentifierStart(int)::: character data02 is java identifier start:::props->getProperties->return
CharacterData02#isJavaIdentifierPart(int)::: character data02 is java identifier part:::props->getProperties->return
CharacterData02#isUnicodeIdentifierStart(int)::: character data02 is unicode identifier start:::props->getProperties->return
CharacterData02#isUnicodeIdentifierPart(int)::: character data02 is unicode identifier part:::props->getProperties->return
CharacterData02#isIdentifierIgnorable(int)::: character data02 is identifier ignorable:::props->getProperties->return
CharacterData02#toLowerCase(int)::: character data02 to lower case:::mapChar->val->getProperties->if->offset->return
CharacterData02#toUpperCase(int)::: character data02 to upper case:::mapChar->val->getProperties->if->offset->return
CharacterData02#toTitleCase(int)::: character data02 to title case:::mapChar->val->getProperties->if->if->else->if->else->if->toUpperCase->return
CharacterData02#digit(int, int)::: character data02 digit:::value->if->val->getProperties->kind->if->else->if->return
CharacterData02#getNumericValue(int)::: character data02 get numeric value:::val->getProperties->retval->switch->break->break->break->break->return
CharacterData02#isWhitespace(int)::: character data02 is whitespace:::return->getProperties
CharacterData02#getDirectionality(int)::: character data02 get directionality:::val->getProperties->directionality->if->return
CharacterData02#isMirrored(int)::: character data02 is mirrored:::return->getProperties
CharacterData0E#getProperties(int)::: character data0 e get properties:::offset->props->return
CharacterData0E#getPropertiesEx(int)::: character data0 e get properties ex:::offset->props->return
CharacterData0E#isOtherLowercase(int)::: character data0 e is other lowercase:::props->getPropertiesEx->return
CharacterData0E#isOtherUppercase(int)::: character data0 e is other uppercase:::props->getPropertiesEx->return
CharacterData0E#isOtherAlphabetic(int)::: character data0 e is other alphabetic:::props->getPropertiesEx->return
CharacterData0E#isIdeographic(int)::: character data0 e is ideographic:::props->getPropertiesEx->return
CharacterData0E#getType(int)::: character data0 e get type:::props->getProperties->return
CharacterData0E#isJavaIdentifierStart(int)::: character data0 e is java identifier start:::props->getProperties->return
CharacterData0E#isJavaIdentifierPart(int)::: character data0 e is java identifier part:::props->getProperties->return
CharacterData0E#isUnicodeIdentifierStart(int)::: character data0 e is unicode identifier start:::props->getProperties->return
CharacterData0E#isUnicodeIdentifierPart(int)::: character data0 e is unicode identifier part:::props->getProperties->return
CharacterData0E#isIdentifierIgnorable(int)::: character data0 e is identifier ignorable:::props->getProperties->return
CharacterData0E#toLowerCase(int)::: character data0 e to lower case:::mapChar->val->getProperties->if->offset->return
CharacterData0E#toUpperCase(int)::: character data0 e to upper case:::mapChar->val->getProperties->if->offset->return
CharacterData0E#toTitleCase(int)::: character data0 e to title case:::mapChar->val->getProperties->if->if->else->if->else->if->toUpperCase->return
CharacterData0E#digit(int, int)::: character data0 e digit:::value->if->val->getProperties->kind->if->else->if->return
CharacterData0E#getNumericValue(int)::: character data0 e get numeric value:::val->getProperties->retval->switch->break->break->break->break->return
CharacterData0E#isWhitespace(int)::: character data0 e is whitespace:::props->getProperties->return
CharacterData0E#getDirectionality(int)::: character data0 e get directionality:::val->getProperties->directionality->if->return
CharacterData0E#isMirrored(int)::: character data0 e is mirrored:::props->getProperties->return
CharacterDataLatin1#getProperties(int)::: character data latin1 get properties:::offset->props->return
CharacterDataLatin1#getPropertiesEx(int)::: character data latin1 get properties ex:::offset->props->return
CharacterDataLatin1#isOtherLowercase(int)::: character data latin1 is other lowercase:::props->getPropertiesEx->return
CharacterDataLatin1#isOtherUppercase(int)::: character data latin1 is other uppercase:::props->getPropertiesEx->return
CharacterDataLatin1#isOtherAlphabetic(int)::: character data latin1 is other alphabetic:::props->getPropertiesEx->return
CharacterDataLatin1#isIdeographic(int)::: character data latin1 is ideographic:::props->getPropertiesEx->return
CharacterDataLatin1#getType(int)::: character data latin1 get type:::props->getProperties->return
CharacterDataLatin1#isJavaIdentifierStart(int)::: character data latin1 is java identifier start:::props->getProperties->return
CharacterDataLatin1#isJavaIdentifierPart(int)::: character data latin1 is java identifier part:::props->getProperties->return
CharacterDataLatin1#isUnicodeIdentifierStart(int)::: character data latin1 is unicode identifier start:::props->getProperties->return
CharacterDataLatin1#isUnicodeIdentifierPart(int)::: character data latin1 is unicode identifier part:::props->getProperties->return
CharacterDataLatin1#isIdentifierIgnorable(int)::: character data latin1 is identifier ignorable:::props->getProperties->return
CharacterDataLatin1#toLowerCase(int)::: character data latin1 to lower case:::mapChar->val->getProperties->if->offset->return
CharacterDataLatin1#toUpperCase(int)::: character data latin1 to upper case:::mapChar->val->getProperties->if->if->offset->else->if->return
CharacterDataLatin1#toTitleCase(int)::: character data latin1 to title case:::return->toUpperCase
CharacterDataLatin1#digit(int, int)::: character data latin1 digit:::value->return
CharacterDataLatin1#getNumericValue(int)::: character data latin1 get numeric value:::val->getProperties->retval->switch->break->break->break->break->return
CharacterDataLatin1#isWhitespace(int)::: character data latin1 is whitespace:::props->getProperties->return
CharacterDataLatin1#getDirectionality(int)::: character data latin1 get directionality:::val->getProperties->directionality->if->return
CharacterDataLatin1#isMirrored(int)::: character data latin1 is mirrored:::props->getProperties->return
CharacterDataLatin1#toUpperCaseEx(int)::: character data latin1 to upper case ex:::mapChar->val->getProperties->if->if->offset->else->switch->break->break->return
CharacterDataLatin1#toUpperCaseCharArray(int)::: character data latin1 to upper case char array:::upperMap->if->return
CharacterDataPrivateUse#getProperties(int)::: character data private use get properties:::return
CharacterDataPrivateUse#getType(int)::: character data private use get type:::return
CharacterDataPrivateUse#isJavaIdentifierStart(int)::: character data private use is java identifier start:::return
CharacterDataPrivateUse#isJavaIdentifierPart(int)::: character data private use is java identifier part:::return
CharacterDataPrivateUse#isUnicodeIdentifierStart(int)::: character data private use is unicode identifier start:::return
CharacterDataPrivateUse#isUnicodeIdentifierPart(int)::: character data private use is unicode identifier part:::return
CharacterDataPrivateUse#isIdentifierIgnorable(int)::: character data private use is identifier ignorable:::return
CharacterDataPrivateUse#toLowerCase(int)::: character data private use to lower case:::return
CharacterDataPrivateUse#toUpperCase(int)::: character data private use to upper case:::return
CharacterDataPrivateUse#toTitleCase(int)::: character data private use to title case:::return
CharacterDataPrivateUse#digit(int, int)::: character data private use digit:::return
CharacterDataPrivateUse#getNumericValue(int)::: character data private use get numeric value:::return
CharacterDataPrivateUse#isWhitespace(int)::: character data private use is whitespace:::return
CharacterDataPrivateUse#getDirectionality(int)::: character data private use get directionality:::return
CharacterDataPrivateUse#isMirrored(int)::: character data private use is mirrored:::return
CharacterDataUndefined#getProperties(int)::: character data undefined get properties:::return
CharacterDataUndefined#getType(int)::: character data undefined get type:::return
CharacterDataUndefined#isJavaIdentifierStart(int)::: character data undefined is java identifier start:::return
CharacterDataUndefined#isJavaIdentifierPart(int)::: character data undefined is java identifier part:::return
CharacterDataUndefined#isUnicodeIdentifierStart(int)::: character data undefined is unicode identifier start:::return
CharacterDataUndefined#isUnicodeIdentifierPart(int)::: character data undefined is unicode identifier part:::return
CharacterDataUndefined#isIdentifierIgnorable(int)::: character data undefined is identifier ignorable:::return
CharacterDataUndefined#toLowerCase(int)::: character data undefined to lower case:::return
CharacterDataUndefined#toUpperCase(int)::: character data undefined to upper case:::return
CharacterDataUndefined#toTitleCase(int)::: character data undefined to title case:::return
CharacterDataUndefined#digit(int, int)::: character data undefined digit:::return
CharacterDataUndefined#getNumericValue(int)::: character data undefined get numeric value:::return
CharacterDataUndefined#isWhitespace(int)::: character data undefined is whitespace:::return
CharacterDataUndefined#getDirectionality(int)::: character data undefined get directionality:::return
CharacterDataUndefined#isMirrored(int)::: character data undefined is mirrored:::return
CharacterName#hashN(byte[], int, int)::: character name hash n:::h->while->return
CharacterName#addCp(int, int, int, int)::: character name add cp:::return
CharacterName#getCpHash(int)::: character name get cp hash:::return
CharacterName#getCpNext(int)::: character name get cp next:::return
CharacterName#getCp(int)::: character name get cp:::return
CharacterName#getInstance()::: character name get instance:::ref->cname->if->ref->get->new->CharacterName->new->SoftReference<>->return
CharacterName#getName(int)::: character name get name:::off->bk->if->return->result->new->String->return
CharacterName#getCodePoint(String)::: character name get code point:::bname->name->getBytes->hsh->hashN->idx->while->if->getCpHash->cp->getCp->off->bk->if->len->if->i->while->if->return->getCpNext->return
CharSequence#length():::Returns the length of this character sequence:::
CharSequence#charAt(int):::Returns the char value at the specified index:::
CharSequence#subSequence(int, int):::Returns a CharSequence that is a subsequence of this sequence:::
CharSequence#toString():::Returns a string containing the characters in this sequence in the same order as this sequence:::
CharSequence#chars():::Returns a stream of int zero-extending the char values from this sequence:::return->StreamSupport->Spliterators->new->CharIterator->length->spliterator->intStream
CharSequence#codePoints():::Returns a stream of code point values from this sequence:::return->StreamSupport->Spliterators->new->CodePointIterator->spliteratorUnknownSize->intStream
CharSequence#compare(CharSequence, CharSequence):::Compares two CharSequence instances lexicographically:::if->Objects->requireNonNull->Objects->requireNonNull->return->if->cs1->getClass->cs2->getClass->return->compareTo->for->i->len->Math->cs1->length->cs2->length->min->return->cs1->length->cs2->length
Class#registerNatives()::: class register natives:::
Class#toString():::Converts the object to a string:::return->isInterface->isPrimitive->getName
Class#toGenericString():::Returns a string describing this Class, including information about modifiers and type parameters:::if->isPrimitive->return->toString->else->sb->new->StringBuilder->component->arrayDepth->if->isArray->do->component->getComponentType->while->component->isArray->sb->component->getName->append->else->modifiers->getModifiers->Modifier->classModifiers->if->sb->Modifier->toString->append->sb->append->if->isAnnotation->sb->append->if->isInterface->sb->append->else->if->isEnum->sb->append->else->sb->append->sb->append->sb->getName->append->typeparms->component->getTypeParameters->if->sj->new->StringJoiner->foreach->sj->typeparm->getTypeName->add->sb->sj->toString->append->for->i->return->sb->toString
Class#forName(String):::Returns the Class object associated with the class or interface with the given string name:::caller->Reflection->getCallerClass->return->ClassLoader->getClassLoader->forName0
Class#forName(String, boolean, ClassLoader):::Returns the Class object associated with the class or interface with the given string name, using the given class loader:::caller->sm->System->getSecurityManager->if->Reflection->getCallerClass->if->ccl->ClassLoader->getClassLoader->if->sm->checkPermission->return->forName0
Class#forName0(String, boolean, ClassLoader, Class):::Called after security check for system loader access checks have been made.:::
Class#forName(Module, String):::Returns the Class with the given  binary name in the given module:::Objects->requireNonNull->Objects->requireNonNull->cl->sm->System->getSecurityManager->if->caller->Reflection->getCallerClass->if->caller->getModule->sm->checkPermission->pa->module->getClassLoader->AccessController->doPrivileged->else->module->getClassLoader->if->return->cl->loadClass->else->return->BootLoader->loadClass
Class#newInstance():::Creates a new instance of the class represented by this Class object:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->if->if->throw->new->IllegalAccessException->try->empty->c->getReflectionFactory->getConstructor0->copyConstructor->new->java.security.PrivilegedAction<>->doPrivileged->catch->throw->getName->new->InstantiationException->initCause->finally->tmpConstructor->caller->Reflection->getCallerClass->if->modifiers->tmpConstructor->getModifiers->Reflection->ensureMemberAccess->try->return->tmpConstructor->newInstance->catch->Unsafe->getUnsafe->e->getTargetException->throwException->return->finally
Class#isInstance(Object):::Determines if the specified Object is assignment-compatible with the object represented by this Class:::
Class#isAssignableFrom(Class):::Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter:::
Class#isInterface():::Determines if the specified Class object represents an interface type.:::
Class#isArray():::Determines if this Class object represents an array class.:::
Class#isPrimitive():::Determines if the specified Class object represents a primitive type:::
Class#isAnnotation():::Returns true if this Class object represents an annotation type:::return->getModifiers
Class#isSynthetic():::Returns true if this class is a synthetic class; returns false otherwise.:::return->getModifiers
Class#getName():::Returns the  name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String:::name->return->initClassName
Class#initClassName()::: class init class name:::
Class#getClassLoader():::Returns the class loader for the class:::cl->getClassLoader0->if->return->sm->System->getSecurityManager->if->ClassLoader->Reflection->getCallerClass->checkClassLoaderPermission->return
Class#getClassLoader0()::: class get class loader0:::return
Class#getModule():::Returns the module that this class or interface is a member of:::return
Class#getTypeParameters():::Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order:::info->getGenericInfo->if->return->info->getTypeParameters->else->return->new->TypeVariable<?>Arr
Class#getSuperclass():::Returns the Class representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class:::
Class#getGenericSuperclass():::Returns the Type representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class:::info->getGenericInfo->if->return->getSuperclass->if->isInterface->return->return->info->getSuperclass
Class#getPackage():::Gets the package of this class:::if->isPrimitive->isArray->return->cl->getClassLoader0->return->cl->definePackage->BootLoader->definePackage
Class#getPackageName():::Returns the fully qualified package name:::pn->if->c->while->c->isArray->c->getComponentType->if->c->isPrimitive->else->cn->c->getName->dot->cn->lastIndexOf->cn->substring->intern->return
Class#getInterfaces():::Returns the interfaces directly implemented by the class or interface represented by this object:::return->getInterfaces
Class#getInterfaces(boolean)::: class get interfaces:::rd->reflectionData->if->return->getInterfaces0->else->interfaces->if->getInterfaces0->return->interfaces->clone
Class#getInterfaces0()::: class get interfaces0:::
Class#getGenericInterfaces():::Returns the Types representing the interfaces directly implemented by the class or interface represented by this object:::info->getGenericInfo->return->getInterfaces->info->getSuperInterfaces
Class#getComponentType():::Returns the Class representing the component type of an array:::if->isArray->return->else->return
Class#getModifiers():::Returns the Java language modifiers for this class or interface, encoded in an integer:::
Class#getSigners():::Gets the signers of this class.:::
Class#setSigners(Object[]):::Set the signers of this class.:::
Class#getEnclosingMethod():::If this Class object represents a local or anonymous class within a method, returns a java.lang.reflect.Method Method object representing the immediately enclosing method of the underlying class:::enclosingInfo->getEnclosingMethodInfo->if->return->else->if->enclosingInfo->isMethod->return->typeInfo->MethodRepository->enclosingInfo->getDescriptor->getFactory->make->returnType->typeInfo->getReturnType->toClass->parameterTypes->typeInfo->getParameterTypes->parameterClasses->new->Class<?>Arr->for->i->enclosingCandidate->enclosingInfo->getEnclosingClass->sm->System->getSecurityManager->if->enclosingCandidate->Reflection->getCallerClass->checkMemberAccess->candidates->enclosingCandidate->privateGetDeclaredMethods->fact->getReflectionFactory->foreach->if->m->getName->enclosingInfo->getName->equals->fact->getExecutableSharedParameterTypes->arrayContentsEq->if->m->getReturnType->equals->return->fact->copyMethod->throw->new->InternalError
Class#getEnclosingMethod0()::: class get enclosing method0:::
Class#getEnclosingMethodInfo()::: class get enclosing method info:::enclosingInfo->getEnclosingMethod0->if->return->else->return->new->EnclosingMethodInfo
Class.EnclosingMethodInfo#validate(Object[])::: enclosing method info validate:::if->throw->new->InternalError->try->enclosingClass->name->descriptor->catch->throw->new->InternalError->finally
Class.EnclosingMethodInfo#isPartial()::: enclosing method info is partial:::return
Class.EnclosingMethodInfo#isConstructor()::: enclosing method info is constructor:::return->isPartial->equals
Class.EnclosingMethodInfo#isMethod()::: enclosing method info is method:::return->isPartial->isConstructor->equals
Class.EnclosingMethodInfo#getEnclosingClass()::: enclosing method info get enclosing class:::return
Class.EnclosingMethodInfo#getName()::: enclosing method info get name:::return
Class.EnclosingMethodInfo#getDescriptor()::: enclosing method info get descriptor:::return
Class#toClass(Type)::: class to class:::if->return->Array->getGenericComponentType->toClass->newInstance->getClass->return
Class#getEnclosingConstructor():::If this Class object represents a local or anonymous class within a constructor, returns a java.lang.reflect.Constructor Constructor object representing the immediately enclosing constructor of the underlying class:::enclosingInfo->getEnclosingMethodInfo->if->return->else->if->enclosingInfo->isConstructor->return->typeInfo->ConstructorRepository->enclosingInfo->getDescriptor->getFactory->make->parameterTypes->typeInfo->getParameterTypes->parameterClasses->new->Class<?>Arr->for->i->enclosingCandidate->enclosingInfo->getEnclosingClass->sm->System->getSecurityManager->if->enclosingCandidate->Reflection->getCallerClass->checkMemberAccess->candidates->enclosingCandidate->privateGetDeclaredConstructors->fact->getReflectionFactory->foreach->if->fact->getExecutableSharedParameterTypes->arrayContentsEq->return->fact->copyConstructor->throw->new->InternalError
Class#getDeclaringClass():::If the class or interface represented by this Class object is a member of another class, returns the Class object representing the class in which it was declared:::candidate->getDeclaringClass0->if->sm->System->getSecurityManager->if->candidate->ClassLoader->Reflection->getCallerClass->getClassLoader->checkPackageAccess->return
Class#getDeclaringClass0()::: class get declaring class0:::
Class#getEnclosingClass():::Returns the immediately enclosing class of the underlying class:::enclosingInfo->getEnclosingMethodInfo->enclosingCandidate->if->getDeclaringClass0->else->enclosingClass->enclosingInfo->getEnclosingClass->if->throw->new->InternalError->else->if->sm->System->getSecurityManager->if->enclosingCandidate->ClassLoader->Reflection->getCallerClass->getClassLoader->checkPackageAccess->return
Class#getSimpleName():::Returns the simple name of the underlying class as given in the source code:::rd->reflectionData->simpleName->if->getSimpleName0->return
Class#getSimpleName0()::: class get simple name0:::if->isArray->return->getComponentType->getSimpleName->simpleName->getSimpleBinaryName->if->getName->simpleName->simpleName->lastIndexOf->substring->return
Class#getTypeName():::Return an informative string for the name of this type.:::if->isArray->try->cl->dimensions->do->cl->getComponentType->while->cl->isArray->sb->new->StringBuilder->sb->cl->getName->append->for->i->return->sb->toString->catch->finally->return->getName
Class#getCanonicalName():::Returns the canonical name of the underlying class as defined by the Java Language Specification:::rd->reflectionData->canonicalName->if->getCanonicalName0->return
Class#getCanonicalName0()::: class get canonical name0:::if->isArray->canonicalName->getComponentType->getCanonicalName->if->return->else->return->if->isLocalOrAnonymousClass->return->enclosingClass->getEnclosingClass->if->return->getName->else->enclosingName->enclosingClass->getCanonicalName->if->return->return->getSimpleName
Class#isAnonymousClass():::Returns true if and only if the underlying class is an anonymous class.:::return->isArray->isLocalOrAnonymousClass->getSimpleBinaryName0
Class#isLocalClass():::Returns true if and only if the underlying class is a local class.:::return->isLocalOrAnonymousClass->isArray->getSimpleBinaryName0
Class#isMemberClass():::Returns true if and only if the underlying class is a member class.:::return->isLocalOrAnonymousClass->getDeclaringClass0
Class#getSimpleBinaryName():::Returns the "simple binary name" of the underlying class, i.e., the binary name without the leading enclosing class name:::if->isTopLevelClass->return->name->getSimpleBinaryName0->if->return->return
Class#getSimpleBinaryName0()::: class get simple binary name0:::
Class#isTopLevelClass():::Returns true if this is a top level class:::return->isLocalOrAnonymousClass->getDeclaringClass0
Class#isLocalOrAnonymousClass():::Returns true if this is a local class or an anonymous class:::return->hasEnclosingMethodInfo
Class#hasEnclosingMethodInfo()::: class has enclosing method info:::enclosingInfo->getEnclosingMethod0->if->EnclosingMethodInfo->validate->return->return
Class#getClasses():::Returns an array containing Class objects representing all the public classes and interfaces that are members of the class represented by this Class object:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->new->java.security.PrivilegedAction<>->doPrivileged
Class#getFields():::Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->privateGetPublicFields->copyFields
Class#getMethods():::Returns an array containing Method objects reflecting all the public methods of the class or interface represented by this Class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->privateGetPublicMethods->copyMethods
Class#getConstructors():::Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->privateGetDeclaredConstructors->copyConstructors
Class#getField(String):::Returns a Field object that reflects the specified public member field of the class or interface represented by this Class object:::Objects->requireNonNull->sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->field->getField0->if->throw->new->NoSuchFieldException->return->getReflectionFactory->copyField
Class#getMethod(String, Class...):::Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object:::Objects->requireNonNull->sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->method->getMethod0->if->throw->methodToString->new->NoSuchMethodException->return->getReflectionFactory->copyMethod
Class#getConstructor(Class...):::Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->getReflectionFactory->getConstructor0->copyConstructor
Class#getDeclaredClasses():::Returns an array of Class objects reflecting all the classes and interfaces declared as members of the class represented by this Class object:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->getDeclaredClasses0
Class#getDeclaredFields():::Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->privateGetDeclaredFields->copyFields
Class#getDeclaredMethods():::Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->privateGetDeclaredMethods->copyMethods
Class#getDeclaredConstructors():::Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->privateGetDeclaredConstructors->copyConstructors
Class#getDeclaredField(String):::Returns a Field object that reflects the specified declared field of the class or interface represented by this Class object:::Objects->requireNonNull->sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->field->privateGetDeclaredFields->searchFields->if->throw->new->NoSuchFieldException->return->getReflectionFactory->copyField
Class#getDeclaredMethod(String, Class...):::Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object:::Objects->requireNonNull->sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->method->privateGetDeclaredMethods->searchMethods->if->throw->methodToString->new->NoSuchMethodException->return->getReflectionFactory->copyMethod
Class#getDeclaredPublicMethods(String, Class...):::Returns the list of Method objects for the declared public methods of this class or interface that have the specified method name and parameter types.:::methods->privateGetDeclaredMethods->factory->getReflectionFactory->result->new->ArrayList<>->foreach->if->method->getName->equals->Arrays->factory->getExecutableSharedParameterTypes->equals->result->factory->copyMethod->add->return
Class#getDeclaredConstructor(Class...):::Returns a Constructor object that reflects the specified constructor of the class or interface represented by this Class object:::sm->System->getSecurityManager->if->Reflection->getCallerClass->checkMemberAccess->return->getReflectionFactory->getConstructor0->copyConstructor
Class#getResourceAsStream(String):::Finds a resource with a given name:::resolveName->thisModule->getModule->if->thisModule->isNamed->if->Resources->canEncapsulate->Reflection->getCallerClass->isOpenToCaller->return->mn->thisModule->getName->cl->getClassLoader0->try->if->return->BootLoader->findResourceAsStream->else->if->return->findResourceAsStream->else->url->cl->findResource->return->url->openStream->catch->return->finally->cl->getClassLoader0->if->return->ClassLoader->getSystemResourceAsStream->else->return->cl->getResourceAsStream
Class#getResource(String):::Finds a resource with a given name:::resolveName->thisModule->getModule->if->thisModule->isNamed->if->Resources->canEncapsulate->Reflection->getCallerClass->isOpenToCaller->return->mn->thisModule->getName->cl->getClassLoader0->try->if->return->BootLoader->findResource->else->return->cl->findResource->catch->return->finally->cl->getClassLoader0->if->return->ClassLoader->getSystemResource->else->return->cl->getResource
Class#isOpenToCaller(String, Class):::Returns true if a resource with the given name can be located by the given caller:::thisModule->getModule->callerModule->caller->getModule->if->pn->Resources->toPackageName->if->thisModule->getDescriptor->packages->contains->if->thisModule->isOpen->return->if->thisModule->isOpen->return->return
Class#getProtectionDomain():::Returns the ProtectionDomain of this class:::sm->System->getSecurityManager->if->sm->checkPermission->pd->getProtectionDomain0->if->if->perms->new->java.security.Permissions->perms->add->new->java.security.ProtectionDomain->return
Class#getProtectionDomain0():::Returns the ProtectionDomain of this class.:::
Class#getPrimitiveClass(String)::: class get primitive class:::
Class#checkMemberAccess(SecurityManager, int, Class, boolean)::: class check member access:::ccl->ClassLoader->getClassLoader->if->cl->getClassLoader0->if->sm->checkPermission->this->checkPackageAccess
Class#checkPackageAccess(SecurityManager, ClassLoader, boolean)::: class check package access:::cl->getClassLoader0->if->ReflectUtil->needsPackageAccessCheck->pkg->this->getPackageName->if->pkg->isEmpty->if->Proxy->isProxyClass->ReflectUtil->isNonPublicProxyClass->sm->checkPackageAccess->if->Proxy->isProxyClass->ReflectUtil->this->getInterfaces->checkProxyPackageAccess
Class#resolveName(String):::Add a package name prefix if the name is not absolute Remove leading "/" if name is absolute:::if->name->startsWith->c->while->c->isArray->c->getComponentType->baseName->c->getPackageName->if->baseName->isEmpty->baseName->replace->else->name->substring->return
Class.Atomic#casReflectionData(Class, SoftReference>, SoftReference>)::: atomic cas reflection data:::return->unsafe->compareAndSetObject
Class.Atomic#casAnnotationType(Class, AnnotationType, AnnotationType)::: atomic cas annotation type:::return->unsafe->compareAndSetObject
Class.Atomic#casAnnotationData(Class, AnnotationData, AnnotationData)::: atomic cas annotation data:::return->unsafe->compareAndSetObject
Class#reflectionData()::: class reflection data:::reflectionData->classRedefinedCount->rd->if->reflectionData->get->return->return->newReflectionData
Class#newReflectionData(SoftReference>, int)::: class new reflection data:::while->rd->new->ReflectionData<>->if->Atomic->new->SoftReference<>->casReflectionData->return->if->oldReflectionData->get->return
Class#getGenericSignature0()::: class get generic signature0:::
Class#getFactory()::: class get factory:::return->CoreReflectionFactory->ClassScope->make->make
Class#getGenericInfo()::: class get generic info:::genericInfo->if->signature->getGenericSignature0->if->else->ClassRepository->getFactory->make->return
Class#getRawAnnotations()::: class get raw annotations:::
Class#getRawTypeAnnotations()::: class get raw type annotations:::
Class#getExecutableTypeAnnotationBytes(Executable)::: class get executable type annotation bytes:::return->getReflectionFactory->getExecutableTypeAnnotationBytes
Class#getConstantPool()::: class get constant pool:::
Class#privateGetDeclaredFields(boolean)::: class private get declared fields:::res->rd->reflectionData->if->if->return->Reflection->getDeclaredFields0->filterFields->if->if->else->return
Class#privateGetPublicFields()::: class private get public fields:::res->rd->reflectionData->if->if->return->fields->new->LinkedHashSet<>->privateGetDeclaredFields->addAll->foreach->getInterfaces->si->privateGetPublicFields->addAll->sc->getSuperclass->if->sc->privateGetPublicFields->addAll->fields->new->FieldArr->toArray->if->return
Class#addAll(Collection, Field[])::: class add all:::foreach->c->add
Class#privateGetDeclaredConstructors(boolean)::: class private get declared constructors:::res->rd->reflectionData->if->if->return->if->isInterface->temporaryRes->new->Constructor<?>Arr->else->getDeclaredConstructors0->if->if->else->return
Class#privateGetDeclaredMethods(boolean)::: class private get declared methods:::res->rd->reflectionData->if->if->return->Reflection->getDeclaredMethods0->filterMethods->if->if->else->return
Class#privateGetPublicMethods()::: class private get public methods:::res->rd->reflectionData->if->if->return->pms->new->PublicMethods->foreach->privateGetDeclaredMethods->pms->merge->sc->getSuperclass->if->foreach->sc->privateGetPublicMethods->pms->merge->foreach->getInterfaces->foreach->intf->privateGetPublicMethods->if->Modifier->m->getModifiers->isStatic->pms->merge->pms->toArray->if->return
Class#searchFields(Field[], String)::: class search fields:::foreach->if->field->getName->equals->return->return
Class#getField0(String)::: class get field0:::res->if->privateGetDeclaredFields->searchFields->return->interfaces->getInterfaces->foreach->if->c->getField0->return->if->isInterface->c->getSuperclass->if->if->c->getField0->return->return
Class#searchMethods(Method[], String, Class[])::: class search methods:::fact->getReflectionFactory->res->foreach->if->m->getName->equals->fact->getExecutableSharedParameterTypes->arrayContentsEq->res->getReturnType->m->getReturnType->res->getReturnType->m->getReturnType->isAssignableFrom->return
Class#getMethod0(String, Class[])::: class get method0:::res->getMethodsRecursive->return->res->getMostSpecific
Class#getMethodsRecursive(String, Class[], boolean)::: class get methods recursive:::methods->privateGetDeclaredMethods->res->filter->if->return->sc->getSuperclass->if->sc->getMethodsRecursive->foreach->getInterfaces->intf->getMethodsRecursive->merge->return
Class#getConstructor0(Class[], int)::: class get constructor0:::fact->getReflectionFactory->constructors->privateGetDeclaredConstructors->foreach->if->fact->getExecutableSharedParameterTypes->arrayContentsEq->return->throw->methodToString->new->NoSuchMethodException
Class#arrayContentsEq(Object[], Object[])::: class array contents eq:::if->return->if->return->if->return->for->i->return
Class#copyFields(Field[])::: class copy fields:::out->new->FieldArr->fact->getReflectionFactory->for->i->return
Class#copyMethods(Method[])::: class copy methods:::out->new->MethodArr->fact->getReflectionFactory->for->i->return
Class#copyConstructors(Constructor[])::: class copy constructors:::out->arg->clone->fact->getReflectionFactory->for->i->return
Class#getDeclaredFields0(boolean)::: class get declared fields0:::
Class#getDeclaredMethods0(boolean)::: class get declared methods0:::
Class#getDeclaredConstructors0(boolean)::: class get declared constructors0:::
Class#getDeclaredClasses0()::: class get declared classes0:::
Class#methodToString(String, Class[]):::Helper method to get the method name from arguments.:::sj->getName->new->StringJoiner->if->for->i->return->sj->toString
Class#desiredAssertionStatus():::Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked:::loader->getClassLoader0->if->return->desiredAssertionStatus0->synchronized->if->return->loader->getName->desiredAssertionStatus->return->desiredAssertionStatus0
Class#desiredAssertionStatus0(Class)::: class desired assertion status0:::
Class#isEnum():::Returns true if and only if this class was declared as an enum in the source code.:::return->this->getModifiers->this->getSuperclass
Class#getReflectionFactory()::: class get reflection factory:::if->new->ReflectionFactory.GetReflectionFactoryAction->doPrivileged->return
Class#getEnumConstants():::Returns the elements of this enum class or null if this Class object does not represent an enum type.:::values->getEnumConstantsShared->return->values->clone
Class#getEnumConstantsShared():::Returns the elements of this enum class or null if this Class object does not represent an enum type; identical to getEnumConstants except that the result is uncloned, cached, and shared by all callers.:::constants->if->if->isEnum->return->try->values->getMethod->new->java.security.PrivilegedAction<>->doPrivileged->temporaryConstants->values->invoke->catch->return->finally->return
Class#enumConstantDirectory():::Returns a map from simple name to enum constant:::directory->if->universe->getEnumConstantsShared->if->throw->getName->new->IllegalArgumentException->new->HashMap<>->foreach->directory->name->put->return
Class#cast(Object):::Casts an object to the class or interface represented by this Class object.:::if->isInstance->throw->cannotCastMsg->new->ClassCastException->return
Class#cannotCastMsg(Object)::: class cannot cast msg:::return->obj->getClass->getName->getName
Class#asSubclass(Class):::Casts this Class object to represent a subclass of the class represented by the specified class object:::if->clazz->isAssignableFrom->return->else->throw->this->toString->new->ClassCastException
Class#getAnnotation(Class)::: class get annotation:::Objects->requireNonNull->return->annotationData->get
Class#isAnnotationPresent(Class)::: class is annotation present:::return->GenericDeclaration.super->isAnnotationPresent
Class#getAnnotationsByType(Class)::: class get annotations by type:::Objects->requireNonNull->annotationData->annotationData->return->AnnotationSupport->getAssociatedAnnotations
Class#getAnnotations()::: class get annotations:::return->AnnotationParser->annotationData->toArray
Class#getDeclaredAnnotation(Class)::: class get declared annotation:::Objects->requireNonNull->return->annotationData->get
Class#getDeclaredAnnotationsByType(Class)::: class get declared annotations by type:::Objects->requireNonNull->return->AnnotationSupport->annotationData->getDirectlyAndIndirectlyPresent
Class#getDeclaredAnnotations()::: class get declared annotations:::return->AnnotationParser->annotationData->toArray
Class#annotationData()::: class annotation data:::while->annotationData->classRedefinedCount->if->return->newAnnotationData->createAnnotationData->if->Atomic->casAnnotationData->return
Class#createAnnotationData(int)::: class create annotation data:::declaredAnnotations->AnnotationParser->getRawAnnotations->getConstantPool->parseAnnotations->superClass->getSuperclass->annotations->if->superAnnotations->superClass->annotationData->foreach->superAnnotations->entrySet->annotationClass->e->getKey->if->AnnotationType->getInstance->isInherited->if->Math->declaredAnnotations->size->Math->declaredAnnotations->size->superAnnotations->size->min->max->new->LinkedHashMap<>->annotations->e->getValue->put->if->else->annotations->putAll->return->new->AnnotationData
Class#casAnnotationType(AnnotationType, AnnotationType)::: class cas annotation type:::return->Atomic->casAnnotationType
Class#getAnnotationType()::: class get annotation type:::return
Class#getDeclaredAnnotationMap()::: class get declared annotation map:::return->annotationData
Class#getAnnotatedSuperclass():::Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class object:::if->isInterface->isArray->isPrimitive->return->return->TypeAnnotationParser->getRawTypeAnnotations->getConstantPool->buildAnnotatedSuperclass
Class#getAnnotatedInterfaces():::Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class object:::return->TypeAnnotationParser->getRawTypeAnnotations->getConstantPool->buildAnnotatedInterfaces
Class#getNestHost0()::: class get nest host0:::
Class#getNestHost():::Returns the nest host of the nest to which the class or interface represented by this Class object belongs:::if->isPrimitive->isArray->return->host->try->getNestHost0->catch->return->finally->if->return->sm->System->getSecurityManager->if->ClassLoader->Reflection->getCallerClass->getClassLoader->checkPackageAccess->return
Class#isNestmateOf(Class):::Determines if the given Class is a nestmate of the class or interface represented by this Class object:::if->return->if->isPrimitive->isArray->c->isPrimitive->c->isArray->return->try->return->getNestHost0->c->getNestHost0->catch->return->finally
Class#getNestMembers0()::: class get nest members0:::
Class#getNestMembers():::Returns an array containing Class objects representing all the classes and interfaces that are members of the nest to which the class or interface represented by this Class object belongs:::if->isPrimitive->isArray->return->new->Class<?>Arr->members->getNestMembers0->if->sm->System->getSecurityManager->if->ClassLoader->Reflection->getCallerClass->getClassLoader->checkPackageAccess->return
ClassLoader#registerNatives()::: class loader register natives:::
ClassLoader.ParallelLoaders#register(Class):::Registers the given class loader type as parallel capable:::synchronized->if->loaderTypes->c->getSuperclass->contains->loaderTypes->add->return->else->return
ClassLoader.ParallelLoaders#isRegistered(Class):::Returns true if the given class loader type is registered as parallel capable.:::synchronized->return->loaderTypes->contains
ClassLoader#addClass(Class)::: class loader add class:::classes->addElement
ClassLoader#getNamedPackage(String, Module)::: class loader get named package:::p->packages->get->if->new->NamedPackage->value->packages->putIfAbsent->if->return
ClassLoader#checkCreateClassLoader()::: class loader check create class loader:::return->checkCreateClassLoader
ClassLoader#checkCreateClassLoader(String)::: class loader check create class loader:::if->name->isEmpty->throw->new->IllegalArgumentException->security->System->getSecurityManager->if->security->checkCreateClassLoader->return
ClassLoader#nameAndId(ClassLoader):::If the defining loader has a name explicitly set then       '<loader-name>' @<id> If the defining loader has no name then       <qualified-class-name> @<id> If it's built-in loader then omit `@<id>` as there is only one instance.:::nid->ld->getName->ld->getName->ld->getClass->getName->if->id->Integer->System->identityHashCode->toHexString->return
ClassLoader#getName():::Returns the name of this class loader or null if this class loader is not named.:::return
ClassLoader#name()::: class loader name:::return
ClassLoader#loadClass(String):::Loads the class with the specified binary name:::return->loadClass
ClassLoader#loadClass(String, boolean):::Loads the class with the specified binary name:::synchronized->getClassLoadingLock->c->findLoadedClass->if->t0->System->nanoTime->try->if->parent->loadClass->else->findBootstrapClassOrNull->catch->finally->if->t1->System->nanoTime->findClass->PerfCounter->getParentDelegationTime->addTime->PerfCounter->getFindClassTime->addElapsedTimeFrom->PerfCounter->getFindClasses->increment->if->resolveClass->return
ClassLoader#loadClass(Module, String):::Loads the class with the specified binary name in a module defined to this class loader:::synchronized->getClassLoadingLock->c->findLoadedClass->if->module->getName->findClass->if->c->getModule->return->else->return
ClassLoader#getClassLoadingLock(String):::Returns the lock object for class loading operations:::lock->if->newLock->new->Object->parallelLockMap->putIfAbsent->if->return
ClassLoader#checkPackageAccess(Class, ProtectionDomain)::: class loader check package access:::sm->System->getSecurityManager->if->if->ReflectUtil->isNonPublicProxyClass->foreach->cls->getInterfaces->checkPackageAccess->return->packageName->cls->getPackageName->if->packageName->isEmpty->AccessController->new->PrivilegedAction<>->new->ProtectionDomainArr->new->AccessControlContext->doPrivileged
ClassLoader#findClass(String):::Finds the class with the specified binary name:::throw->new->ClassNotFoundException
ClassLoader#findClass(String, String):::Finds the class with the given binary name in a module defined to this class loader:::if->try->return->findClass->catch->finally->return
ClassLoader#defineClass(byte[], int, int):::Converts an array of bytes into an instance of class Class:::return->defineClass
ClassLoader#defineClass(String, byte[], int, int):::Converts an array of bytes into an instance of class Class:::return->defineClass
ClassLoader#preDefineClass(String, ProtectionDomain)::: class loader pre define class:::if->checkName->throw->new->NoClassDefFoundError->if->name->startsWith->getBuiltinPlatformClassLoader->throw->name->name->lastIndexOf->substring->new->SecurityException->if->if->pd->getCodeSource->checkCerts->return
ClassLoader#defineClassSourceLocation(ProtectionDomain)::: class loader define class source location:::cs->pd->getCodeSource->source->if->cs->getLocation->cs->getLocation->toString->return
ClassLoader#postDefineClass(Class, ProtectionDomain)::: class loader post define class:::c->getPackageName->c->getModule->getNamedPackage->if->pd->getCodeSource->certs->pd->getCodeSource->getCertificates->if->setSigners
ClassLoader#defineClass(String, byte[], int, int, ProtectionDomain):::Converts an array of bytes into an instance of class Class, with a given ProtectionDomain:::preDefineClass->source->defineClassSourceLocation->c->defineClass1->postDefineClass->return
ClassLoader#defineClass(String, java.nio.ByteBuffer, ProtectionDomain):::Converts a java.nio.ByteBuffer ByteBuffer into an instance of class Class, with the given ProtectionDomain:::len->b->remaining->if->b->isDirect->if->b->hasArray->return->b->array->b->position->b->arrayOffset->defineClass->else->tb->new->byteArr->b->get->return->defineClass->preDefineClass->source->defineClassSourceLocation->c->b->position->defineClass2->postDefineClass->return
ClassLoader#defineClass1(ClassLoader, String, byte[], int, int, ProtectionDomain, String)::: class loader define class1:::
ClassLoader#defineClass2(ClassLoader, String, java.nio.ByteBuffer, int, int, ProtectionDomain, String)::: class loader define class2:::
ClassLoader#checkName(String)::: class loader check name:::if->name->length->return->if->name->indexOf->name->charAt->return->return
ClassLoader#checkCerts(String, CodeSource)::: class loader check certs:::i->name->lastIndexOf->pname->name->substring->certs->if->cs->getCertificates->pcerts->if->synchronized->package2certs->get->if->package2certs->put->else->putIfAbsent->if->compareCerts->throw->new->SecurityException
ClassLoader#compareCerts(Certificate[], Certificate[]):::check to make sure the certs for the new class (certs) are the same as the certs for the first class inserted in the package (pcerts):::if->return->if->return->match->foreach->foreach->if->cert->equals->break->if->return->foreach->foreach->if->pcert->equals->break->if->return->return
ClassLoader#resolveClass(Class):::Links the specified class:::if->throw->new->NullPointerException
ClassLoader#findSystemClass(String):::Finds a class with the specified binary name, loading it if necessary:::return->getSystemClassLoader->loadClass
ClassLoader#findBootstrapClassOrNull(String):::Returns a class loaded by the bootstrap class loader; or return null if not found.:::if->checkName->return->return->findBootstrapClass
ClassLoader#findBootstrapClass(String)::: class loader find bootstrap class:::
ClassLoader#findLoadedClass(String):::Returns the class with the given binary name if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that binary name:::if->checkName->return->return->findLoadedClass0
ClassLoader#findLoadedClass0(String)::: class loader find loaded class0:::
ClassLoader#setSigners(Class, Object[]):::Sets the signers of a class:::c->setSigners
ClassLoader#findResource(String, String):::Returns a URL to a resource in a module defined to this class loader:::if->return->findResource->else->return
ClassLoader#getResource(String):::Finds the resource with the given name:::Objects->requireNonNull->url->if->parent->getResource->else->BootLoader->findResource->if->findResource->return
ClassLoader#getResources(String):::Finds all the resources with the given name:::Objects->requireNonNull->tmp->new->Enumeration<?>Arr->if->parent->getResources->else->BootLoader->findResources->findResources->return->new->CompoundEnumeration<>
ClassLoader#resources(String):::Returns a stream whose elements are the URLs of all the resources with the given name:::Objects->requireNonNull->characteristics->si->try->return->Spliterators->getResources->asIterator->spliteratorUnknownSize->catch->throw->new->UncheckedIOException->finally->return->StreamSupport->stream
ClassLoader#findResource(String):::Finds the resource with the given name:::return
ClassLoader#findResources(String):::Returns an enumeration of java.net.URL URL objects representing all the resources with the given name:::return->Collections->emptyEnumeration
ClassLoader#registerAsParallelCapable():::Registers the caller as #isRegisteredAsParallelCapable() parallel capable:::callerClass->Reflection->getCallerClass->asSubclass->return->ParallelLoaders->register
ClassLoader#isRegisteredAsParallelCapable():::Returns true if this class loader is registered as #registerAsParallelCapable parallel capable, otherwise false.:::return->ParallelLoaders->this->getClass->isRegistered
ClassLoader#getSystemResource(String):::Find a resource of the specified name from the search path used to load classes:::return->getSystemClassLoader->getResource
ClassLoader#getSystemResources(String):::Finds all resources of the specified name from the search path used to load classes:::return->getSystemClassLoader->getResources
ClassLoader#getResourceAsStream(String):::Returns an input stream for reading the specified resource:::Objects->requireNonNull->url->getResource->try->return->url->openStream->catch->return->finally
ClassLoader#getSystemResourceAsStream(String):::Open for reading, a resource of the specified name from the search path used to load classes:::url->getSystemResource->try->return->url->openStream->catch->return->finally
ClassLoader#getParent():::Returns the parent class loader for delegation:::if->return->sm->System->getSecurityManager->if->Reflection->getCallerClass->checkClassLoaderPermission->return
ClassLoader#getUnnamedModule():::Returns the unnamed Module for this class loader.:::return
ClassLoader#getPlatformClassLoader():::Returns the platform class loader:::sm->System->getSecurityManager->loader->getBuiltinPlatformClassLoader->if->Reflection->getCallerClass->checkClassLoaderPermission->return
ClassLoader#getSystemClassLoader():::Returns the system class loader:::switch->VM->initLevel->return->getBuiltinAppClassLoader->msg->throw->new->IllegalStateException->sm->System->getSecurityManager->if->Reflection->getCallerClass->checkClassLoaderPermission->return
ClassLoader#getBuiltinPlatformClassLoader()::: class loader get builtin platform class loader:::return->ClassLoaders->platformClassLoader
ClassLoader#getBuiltinAppClassLoader()::: class loader get builtin app class loader:::return->ClassLoaders->appClassLoader
ClassLoader#initSystemClassLoader()::: class loader init system class loader:::if->VM->initLevel->throw->VM->initLevel->new->InternalError->if->throw->new->IllegalStateException->builtinLoader->getBuiltinAppClassLoader->cn->System->getProperty->if->try->ctor->Class->forName->getDeclaredConstructor->ctor->newInstance->catch->cause->if->e->getCause->if->throw->if->throw->throw->cause->getMessage->new->Error->finally->else->return
ClassLoader#isAncestor(ClassLoader)::: class loader is ancestor:::acl->do->if->return->while->return
ClassLoader#needsClassLoaderPermissionCheck(ClassLoader, ClassLoader)::: class loader needs class loader permission check:::if->return->if->return->return->to->isAncestor
ClassLoader#getClassLoader(Class)::: class loader get class loader:::if->return->return->caller->getClassLoader0
ClassLoader#checkClassLoaderPermission(ClassLoader, Class)::: class loader check class loader permission:::sm->System->getSecurityManager->if->ccl->getClassLoader->if->needsClassLoaderPermissionCheck->sm->checkPermission
ClassLoader#definePackage(Class):::Define a Package of the given Class object:::if->c->isPrimitive->c->isArray->return->return->c->getPackageName->c->getModule->definePackage
ClassLoader#definePackage(String, Module):::Defines a Package of the given name and module  This method does not throw IllegalArgumentException.:::if->name->isEmpty->m->isNamed->throw->new->InternalError->pkg->packages->get->if->return->return->packages->toPackage->compute
ClassLoader#toPackage(String, NamedPackage, Module)::: class loader to package:::if->return->NamedPackage->toPackage->if->return->return->NamedPackage->p->packageName->p->module->toPackage
ClassLoader#definePackage(String, String, String, String, String, String, String, URL):::Defines a package by name in this ClassLoader:::Objects->requireNonNull->p->new->Package->if->packages->putIfAbsent->throw->new->IllegalArgumentException->return
ClassLoader#getDefinedPackage(String):::Returns a Package of the given name that has been defined by this class loader.:::Objects->requireNonNull->p->packages->get->if->return->return->p->module->definePackage
ClassLoader#getDefinedPackages():::Returns all of the Packages that have been defined by this class loader:::return->packages->Package[]->new->toArray
ClassLoader#getPackage(String):::Finds a package by name in this class loader and its ancestors:::pkg->getDefinedPackage->if->if->parent->getPackage->else->BootLoader->getDefinedPackage->return
ClassLoader#getPackages():::Returns all of the Packages that have been defined by this class loader and its ancestors:::pkgs->packages->ld->while->Stream->ld->packages->concat->return->Stream->BootLoader->packages->concat->Package[]->new->toArray
ClassLoader#packages():::Returns a stream of Packages defined in this class loader:::return->packages->values->stream->p->packageName->p->module->definePackage->map
ClassLoader#findLibrary(String):::Returns the absolute path name of a native library:::return
ClassLoader.NativeLibrary#load0(String, boolean)::: native library load0:::
ClassLoader.NativeLibrary#findEntry(String)::: native library find entry:::
ClassLoader.NativeLibrary#load()::: native library load:::if->throw->new->InternalError->if->load0->return->loader->fromClass->getClassLoader->if->getBuiltinPlatformClassLoader->getBuiltinAppClassLoader->CleanerFactory->cleaner->new->Unloader->register->return
ClassLoader.NativeLibrary#loadLibrary(Class, String, boolean)::: native library load library:::loader->fromClass->getClassLoader->synchronized->libs->loader->nativeLibraries->systemNativeLibraries->if->libs->containsKey->return->if->loadedLibraryNames->contains->throw->new->UnsatisfiedLinkError->foreach->if->name->equals->if->getClassLoader->return->else->throw->new->UnsatisfiedLinkError->lib->new->NativeLibrary->nativeLibraryContext->push->try->if->lib->load->return->catch->finally->nativeLibraryContext->pop->loadedLibraryNames->add->libs->put->return
ClassLoader.NativeLibrary#getFromClass()::: native library get from class:::return->nativeLibraryContext->peek
ClassLoader.NativeLibrary.Unloader#run()::: unloader run:::synchronized->loadedLibraryNames->remove->nativeLibraryContext->push->try->unload->catch->finally->nativeLibraryContext->pop
ClassLoader.NativeLibrary#unload(String, boolean, long)::: native library unload:::
ClassLoader#initializePath(String)::: class loader initialize path:::ldPath->System->getProperty->ldLen->ldPath->length->ps->psCount->if->ldPath->indexOf->buf->new->charArr->bufLen->for->i->new->String->else->for->i->ldPath->indexOf->ldPath->indexOf->paths->new->StringArr->pathStart->for->j->ldPath->substring->return
ClassLoader#loadLibrary(Class, String, boolean)::: class loader load library:::loader->fromClass->getClassLoader->if->initializePath->initializePath->if->if->new->File->loadLibrary0->return->throw->new->UnsatisfiedLinkError->if->libfilename->loader->findLibrary->if->libfile->new->File->if->libfile->isAbsolute->throw->new->UnsatisfiedLinkError->if->loadLibrary0->return->throw->new->UnsatisfiedLinkError->foreach->libfile->System->mapLibraryName->new->File->if->loadLibrary0->return->ClassLoaderHelper->mapAlternativeName->if->loadLibrary0->return->if->foreach->libfile->System->mapLibraryName->new->File->if->loadLibrary0->return->ClassLoaderHelper->mapAlternativeName->if->loadLibrary0->return->throw->Arrays->toString->new->UnsatisfiedLinkError
ClassLoader#findBuiltinLib(String)::: class loader find builtin lib:::
ClassLoader#loadLibrary0(Class, File)::: class loader load library0:::name->file->getName->findBuiltinLib->isBuiltin->if->AccessController->new->PrivilegedAction<>->doPrivileged->if->return->return->NativeLibrary->loadLibrary
ClassLoader#findNative(ClassLoader, String)::: class loader find native:::libs->loader->nativeLibraries->systemNativeLibraries->if->libs->isEmpty->return->foreach->libs->values->entry->lib->findEntry->if->return->return
ClassLoader#systemNativeLibraries()::: class loader system native libraries:::libs->if->synchronized->if->new->ConcurrentHashMap<>->return
ClassLoader#nativeLibraries()::: class loader native libraries:::libs->if->synchronized->if->new->ConcurrentHashMap<>->return
ClassLoader#setDefaultAssertionStatus(boolean):::Sets the default assertion status for this class loader:::synchronized->if->initializeJavaAssertionMaps
ClassLoader#setPackageAssertionStatus(String, boolean):::Sets the package default assertion status for the named package:::synchronized->if->initializeJavaAssertionMaps->packageAssertionStatus->put
ClassLoader#setClassAssertionStatus(String, boolean):::Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein:::synchronized->if->initializeJavaAssertionMaps->classAssertionStatus->put
ClassLoader#clearAssertionStatus():::Sets the default assertion status for this class loader to false and discards any package defaults or class assertion status settings associated with the class loader:::synchronized->new->HashMap<>->new->HashMap<>
ClassLoader#desiredAssertionStatus(String):::Returns the assertion status that would be assigned to the specified class if it were to be initialized at the time this method is invoked:::synchronized->result->classAssertionStatus->get->if->return->result->booleanValue->dotIndex->className->lastIndexOf->if->packageAssertionStatus->get->if->return->result->booleanValue->while->className->substring->packageAssertionStatus->get->if->return->result->booleanValue->className->lastIndexOf->return
ClassLoader#initializeJavaAssertionMaps()::: class loader initialize java assertion maps:::new->HashMap<>->new->HashMap<>->directives->retrieveDirectives->for->i->for->i
ClassLoader#retrieveDirectives()::: class loader retrieve directives:::
ClassLoader#createOrGetClassLoaderValueMap():::Returns the ConcurrentHashMap used as a storage for ClassLoaderValue(s) associated with this ClassLoader, creating it if it doesn't already exist.:::map->if->new->ConcurrentHashMap<>->set->trySetObjectField->if->return
ClassLoader#trySetObjectField(String, Object):::Attempts to atomically set a volatile field in this object:::unsafe->Unsafe->getUnsafe->k->offset->unsafe->objectFieldOffset->return->unsafe->compareAndSetObject
CompoundEnumeration#next()::: compound enumeration next:::while->if->hasMoreElements->return->return
CompoundEnumeration#hasMoreElements()::: compound enumeration has more elements:::return->next
CompoundEnumeration#nextElement()::: compound enumeration next element:::if->next->throw->new->NoSuchElementException->return->nextElement
ClassLoaderHelper#mapAlternativeName(File):::Returns an alternate path name for the given file such that if the original pathname did not exist, then the file may be located at the alternate location:::return
ClassNotFoundException#getException():::Returns the exception that was raised if an error occurred while attempting to load the class:::return
ClassNotFoundException#getCause():::Returns the cause of this exception (the exception that was raised if an error occurred while attempting to load the class; otherwise null).:::return
ClassValue#computeValue(Class):::Computes the given class's derived value for this ClassValue:::
ClassValue#get(Class):::Returns the value for the given class:::cache->e->getCacheCarefully->probeHomeLocation->if->match->return->e->value->return->getFromBackup
ClassValue#remove(Class):::Removes the associated value for the given class:::map->getMap->map->removeEntry
ClassValue#put(Class, T)::: class value put:::map->getMap->map->changeEntry
ClassValue#getCacheCarefully(Class):::Return the cache, if it exists, else a dummy empty cache.:::map->if->return->cache->map->getCache->return
ClassValue#getFromBackup(Entry[], Class):::Slow tail of ClassValue.get to retry at nearby locations in the cache, or take a slow lock and check the hash table:::e->probeBackupLocations->if->return->e->value->return->getFromHashMap
ClassValue#castEntry(Entry)::: class value cast entry:::return
ClassValue#getFromHashMap(Class):::Called when the fast path of get fails, and cache reprobe also fails.:::map->getMap->for
ClassValue#match(Entry):::Check that e is non-null, matches this ClassValue, and is live.:::return->e->get
ClassValue#version()::: class value version:::return
ClassValue#bumpVersion()::: class value bump version:::new->Version<>
ClassValue.Version#classValue()::: version class value:::return
ClassValue.Version#promise()::: version promise:::return
ClassValue.Version#isLive()::: version is live:::return->classValue->version
ClassValue.Entry#assertNotPromise()::: entry assert not promise:::
ClassValue.Entry#value():::Fetch the value:::assertNotPromise->return
ClassValue.Entry#isPromise()::: entry is promise:::return
ClassValue.Entry#version()::: entry version:::return->get
ClassValue.Entry#classValueOrNull()::: entry class value or null:::v->version->return->v->classValue
ClassValue.Entry#isLive()::: entry is live:::v->version->if->return->if->v->isLive->return->clear->return
ClassValue.Entry#refreshVersion(Version)::: entry refresh version:::assertNotPromise->e2->new->Entry<>->clear->return
ClassValue#getMap(Class):::Return the backing map associated with this type.:::map->if->return->return->initializeMap
ClassValue#initializeMap(Class)::: class value initialize map:::map->synchronized->if->new->ClassValueMap->return
ClassValue#makeEntry(Version, T)::: class value make entry:::return->new->Entry<>
ClassValue.ClassValueMap#getCache()::: class value map get cache:::return
ClassValue.ClassValueMap#startEntry(ClassValue):::Initiate a query:::e->get->v->classValue->version->if->v->promise->put->return->else->if->e->isPromise->if->e->version->v->promise->put->return->else->if->e->version->e->refreshVersion->put->checkCacheLoad->addToCache->return
ClassValue.ClassValueMap#finishEntry(ClassValue, Entry):::Finish a query:::e0->get->if->remove->return->else->if->e0->isPromise->e0->version->e->version->v->classValue->version->if->e->version->e->refreshVersion->put->checkCacheLoad->addToCache->return->else->return
ClassValue.ClassValueMap#removeEntry(ClassValue):::Remove an entry.:::e->remove->if->else->if->e->isPromise->put->else->classValue->bumpVersion->removeStaleEntries
ClassValue.ClassValueMap#changeEntry(ClassValue, T):::Change the value for an entry.:::e0->get->version->classValue->version->if->if->e0->version->e0->value->return->classValue->bumpVersion->removeStaleEntries->e->makeEntry->put->checkCacheLoad->addToCache
ClassValue.ClassValueMap#loadFromCache(Entry[], int):::Load the cache entry at the given (hashed) location.:::return
ClassValue.ClassValueMap#probeHomeLocation(Entry[], ClassValue):::Look in the cache, at the home location for the given ClassValue.:::return->classValue->loadFromCache->castEntry
ClassValue.ClassValueMap#probeBackupLocations(Entry[], ClassValue):::Given that first probe was a collision, retry at nearby locations.:::if->return->mask->home->e2->if->return->pos2->for->i->return
ClassValue.ClassValueMap#entryDislocation(Entry[], int, Entry):::How far out of place is e?:::cv->e->classValueOrNull->if->return->mask->return
ClassValue.ClassValueMap#sizeCache(int)::: class value map size cache:::new->Entry<?>Arr
ClassValue.ClassValueMap#checkCacheLoad():::Make sure the cache load stays below its limit, if possible.:::if->reduceCacheLoad
ClassValue.ClassValueMap#reduceCacheLoad()::: class value map reduce cache load:::removeStaleEntries->if->return->oldCache->getCache->if->return->sizeCache->foreach->if->e->isLive->addToCache
ClassValue.ClassValueMap#removeStaleEntries(Entry[], int, int):::Remove stale entries in the given range:::if->return->mask->removed->for->i->Math->max
ClassValue.ClassValueMap#findReplacement(Entry[], int):::Clearing a cache slot risks disconnecting following entries  from the head of a non-null run, which would allow them  to be found via reprobes:::replacement->haveReplacement->replacementPos->mask->for->i2->if->if->else->return
ClassValue.ClassValueMap#removeStaleEntries(ClassValue):::Remove stale entries in the range near classValue.:::getCache->removeStaleEntries
ClassValue.ClassValueMap#removeStaleEntries():::Remove all stale entries, everywhere.:::cache->getCache->removeStaleEntries
ClassValue.ClassValueMap#addToCache(Entry):::Add the given entry to the cache, in its home location, unless it is out of date.:::classValue->e->classValueOrNull->if->addToCache
ClassValue.ClassValueMap#addToCache(ClassValue, Entry):::Add the given entry to the cache, in its home location.:::if->return->cache->getCache->mask->home->e2->placeInCache->if->return->if->dis2->entryDislocation->home2->for->i2
ClassValue.ClassValueMap#placeInCache(Entry[], int, Entry, boolean):::Store the given entry:::e2->overwrittenEntry->if->return->else->return
ClassValue.ClassValueMap#overwrittenEntry(Entry):::Note an entry that is about to be overwritten:::if->else->if->e2->isLive->return->return
Comparable#compareTo(T):::Compares this object with the specified object for order:::
Compiler#compileClass(Class):::Compiles the specified class.:::return
Compiler#compileClasses(String):::Compiles all classes whose name matches the specified string.:::return
Compiler#command(Object):::Examines the argument type and its fields and perform some documented operation:::return
Compiler#enable():::Cause the Compiler to resume operation.:::
Compiler#disable():::Cause the Compiler to cease operation.:::
ConditionalSpecialCasing#toLowerCaseEx(String, int, Locale)::: conditional special casing to lower case ex:::result->lookUpTable->if->if->return->else->return->else->return->Character->src->codePointAt->toLowerCase
ConditionalSpecialCasing#toUpperCaseEx(String, int, Locale)::: conditional special casing to upper case ex:::result->lookUpTable->if->if->return->else->return->else->return->Character->src->codePointAt->toUpperCaseEx
ConditionalSpecialCasing#toLowerCaseCharArray(String, int, Locale)::: conditional special casing to lower case char array:::return->lookUpTable
ConditionalSpecialCasing#toUpperCaseCharArray(String, int, Locale)::: conditional special casing to upper case char array:::result->lookUpTable->if->return->else->return->Character->src->codePointAt->toUpperCaseCharArray
ConditionalSpecialCasing#lookUpTable(String, int, Locale, boolean)::: conditional special casing look up table:::set->entryTable->src->codePointAt->get->ret->if->iter->set->iterator->currentLang->locale->getLanguage->while->iter->hasNext->entry->iter->next->conditionLang->entry->getLanguage->if->conditionLang->equals->entry->getCondition->isConditionMet->entry->getLowerCase->entry->getUpperCase->if->break->return
ConditionalSpecialCasing#isConditionMet(String, int, Locale, int)::: conditional special casing is condition met:::switch->return->isFinalCased->return->isAfterSoftDotted->return->isMoreAbove->return->isAfterI->return->isBeforeDot->return
ConditionalSpecialCasing#isFinalCased(String, int, Locale):::Implements the "Final_Cased" condition  Specification: Within the closest word boundaries containing C, there is a cased letter before C, and there is no cased letter after C:::wordBoundary->BreakIterator->getWordInstance->wordBoundary->setText->ch->for->i->wordBoundary->isBoundary->Character->charCount->return
ConditionalSpecialCasing#isAfterI(String, int):::Implements the "After_I" condition  Specification: The last preceding base character was an uppercase I, and there is no intervening combining character class 230 (ABOVE):::ch->cc->for->i->Character->charCount->return
ConditionalSpecialCasing#isAfterSoftDotted(String, int):::Implements the "After_Soft_Dotted" condition  Specification: The last preceding character with combining class of zero before C was Soft_Dotted, and there is no intervening combining character class 230 (ABOVE):::ch->cc->for->i->Character->charCount->return
ConditionalSpecialCasing#isMoreAbove(String, int):::Implements the "More_Above" condition  Specification: C is followed by one or more characters of combining class 230 (ABOVE) in the combining character sequence:::ch->cc->len->src->length->for->i->Character->src->codePointAt->charCount->Character->charCount->return
ConditionalSpecialCasing#isBeforeDot(String, int):::Implements the "Before_Dot" condition  Specification: C is followed by U+0307 COMBINING DOT ABOVE:::ch->cc->len->src->length->for->i->Character->src->codePointAt->charCount->Character->charCount->return
ConditionalSpecialCasing#isCased(int):::Examines whether a character is 'cased':::type->Character->getType->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->return
ConditionalSpecialCasing#isSoftDotted(int)::: conditional special casing is soft dotted:::switch->return->return
ConditionalSpecialCasing.Entry#getCodePoint()::: entry get code point:::return
ConditionalSpecialCasing.Entry#getLowerCase()::: entry get lower case:::return
ConditionalSpecialCasing.Entry#getUpperCase()::: entry get upper case:::return
ConditionalSpecialCasing.Entry#getLanguage()::: entry get language:::return
ConditionalSpecialCasing.Entry#getCondition()::: entry get condition:::return
Double#toString(double):::Returns a string representation of the double argument:::return->FloatingDecimal->toJavaFormatString
Double#toHexString(double):::Returns a hexadecimal string representation of the double argument:::if->isFinite->return->Double->toString->else->answer->new->StringBuilder->if->Math->copySign->answer->append->answer->append->Math->abs->if->answer->append->else->subnormal->signifBits->Double->doubleToLongBits->answer->append->signif->Long->toHexString->substring->answer->signif->equals->signif->replaceFirst->append->answer->append->answer->Math->getExponent->append->return->answer->toString
Double#valueOf(String):::Returns a Double object holding the double value represented by the argument string s:::return->parseDouble->new->Double
Double#valueOf(double):::Returns a Double instance representing the specified double value:::return->new->Double
Double#parseDouble(String):::Returns a new double initialized to the value represented by the specified String, as performed by the valueOf method of class Double.:::return->FloatingDecimal->parseDouble
Double#isNaN(double):::Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.:::return
Double#isInfinite(double):::Returns true if the specified number is infinitely large in magnitude, false otherwise.:::return
Double#isFinite(double):::Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).:::return->Math->abs
Double#isNaN():::Returns true if this Double value is a Not-a-Number (NaN), false otherwise.:::return->isNaN
Double#isInfinite():::Returns true if this Double value is infinitely large in magnitude, false otherwise.:::return->isInfinite
Double#toString():::Returns a string representation of this Double object:::return->toString
Double#byteValue():::Returns the value of this Double as a byte after a narrowing primitive conversion.:::return
Double#shortValue():::Returns the value of this Double as a short after a narrowing primitive conversion.:::return
Double#intValue():::Returns the value of this Double as an int after a narrowing primitive conversion.:::return
Double#longValue():::Returns the value of this Double as a long after a narrowing primitive conversion.:::return
Double#floatValue():::Returns the value of this Double as a float after a narrowing primitive conversion.:::return
Double#doubleValue():::Returns the double value of this Double object.:::return
Double#hashCode():::Returns a hash code for this Double object:::return->Double->hashCode
Double#hashCode(double):::Returns a hash code for a double value; compatible with Double.hashCode().:::bits->doubleToLongBits->return
Double#equals(Object):::Compares this object against the specified object:::return->doubleToLongBits->doubleToLongBits
Double#doubleToLongBits(double):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout:::if->isNaN->return->doubleToRawLongBits->return
Double#doubleToRawLongBits(double):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "double format" bit layout, preserving Not-a-Number (NaN) values:::
Double#longBitsToDouble(long):::Returns the double value corresponding to a given bit representation:::
Double#compareTo(Double):::Compares two Double objects numerically:::return->Double->compare
Double#compare(double, double):::Compares the two specified double values:::if->return->if->return->thisBits->Double->doubleToLongBits->anotherBits->Double->doubleToLongBits->return
Double#sum(double, double):::Adds two double values together as per the + operator.:::return
Double#max(double, double):::Returns the greater of two double values as if by calling Math#max(double, double) Math.max.:::return->Math->max
Double#min(double, double):::Returns the smaller of two double values as if by calling Math#min(double, double) Math.min.:::return->Math->min
Enum#name():::Returns the name of this enum constant, exactly as declared in its enum declaration:::return
Enum#ordinal():::Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero):::return
Enum#toString():::Returns the name of this enum constant, as contained in the declaration:::return
Enum#equals(Object):::Returns true if the specified object is equal to this enum constant.:::return
Enum#hashCode():::Returns a hash code for this enum constant.:::return->super->hashCode
Enum#clone():::Throws CloneNotSupportedException:::throw->new->CloneNotSupportedException
Enum#compareTo(E):::Compares this enum with the specified object for order:::other->self->if->self->getClass->other->getClass->self->getDeclaringClass->other->getDeclaringClass->throw->new->ClassCastException->return
Enum#getDeclaringClass():::Returns the Class object corresponding to this enum constant's enum type:::clazz->getClass->zuper->clazz->getSuperclass->return
Enum#valueOf(Class, String):::Returns the enum constant of the specified enum type with the specified name:::result->enumType->enumConstantDirectory->get->if->return->if->throw->new->NullPointerException->throw->enumType->getCanonicalName->new->IllegalArgumentException
Enum#finalize():::enum classes cannot have finalize methods.:::
Enum#readObject(ObjectInputStream):::prevent default deserialization:::throw->new->InvalidObjectException
Enum#readObjectNoData()::: enum read object no data:::throw->new->InvalidObjectException
EnumConstantNotPresentException#enumType():::Returns the type of the missing enum constant.:::return
EnumConstantNotPresentException#constantName():::Returns the name of the missing enum constant.:::return
ExceptionInInitializerError#getException():::Returns the exception that occurred during a static initialization that caused this error to be created:::return
ExceptionInInitializerError#getCause():::Returns the cause of this error (the exception that occurred during a static initialization that caused this error to be created).:::return
FdLibm#__LO(double):::Return the low-order 32 bits of the double argument as an int.:::transducer->Double->doubleToRawLongBits->return
FdLibm#__LO(double, int):::Return a double with its low-order bits of the second argument and the high-order bits of the first argument..:::transX->Double->doubleToRawLongBits->return->Double->longBitsToDouble
FdLibm#__HI(double):::Return the high-order 32 bits of the double argument as an int.:::transducer->Double->doubleToRawLongBits->return
FdLibm#__HI(double, int):::Return a double with its high-order bits of the second argument and the low-order bits of the first argument..:::transX->Double->doubleToRawLongBits->return->Double->longBitsToDouble
FdLibm.Cbrt#compute(double)::: cbrt compute:::t->sign->if->Double->isFinite->return->Math->abs->if->__HI->__HI->else->hx->__HI->__HI->r->s->w->__LO->__HI->__HI->return
FdLibm.Hypot#compute(double, double)::: hypot compute:::a->Math->abs->b->Math->abs->if->Double->isFinite->Double->isFinite->if->return->else->return->if->tmp->ha->__HI->hb->__HI->if->return->k->if->t1->t2->if->if->if->return->else->w->if->__HI->Math->sqrt->else->y1->y2->__HI->__HI->Math->sqrt->if->return->Math->powerOfTwoD->else->return
FdLibm.Pow#compute(double, double)::: pow compute:::z->r->s->t->u->v->w->i->j->k->n->if->return->if->Double->isNaN->Double->isNaN->return->y_abs->Math->abs->x_abs->Math->abs->if->return->else->if->if->return->Math->sqrt->else->if->return->else->if->if->return->else->if->return->else->return->hx->__HI->ix->y_is_int->if->if->else->if->y_abs_as_long->if->if->if->if->if->else->if->return->if->return->if->p_h->p_l->t1->t2->if->INV_LN2->INV_LN2_H->INV_LN2_L->if->return->if->return->__LO->else->CP->CP_H->CP_L->z_h->z_l->ss->s2->s_h->s_l->t_h->t_l->if->__HI->if->else->if->else->__HI->BP->DP_H->DP_L->L1->L2->L3->L4->L5->L6->__LO->__HI->__LO->__LO->__LO->y1->__LO->__HI->__LO->if->if->return->else->OVT->if->return->else->if->if->return->else->if->return->P1->P2->P3->P4->P5->LG2->LG2_H->LG2_L->if->__HI->if->__LO->__HI->if->Math->scalb->else->z_hi->__HI->__HI->return
FdLibm.Exp#compute(double)::: exp compute:::y->hi->lo->c->t->k->xsb->hx->__HI->if->if->if->__LO->return->else->return->if->return->if->return->if->if->else->else->if->if->return->else->if->return->else->if->__HI->__HI->return->else->__HI->__HI->return
Float#toString(float):::Returns a string representation of the float argument:::return->FloatingDecimal->toJavaFormatString
Float#toHexString(float):::Returns a hexadecimal string representation of the float argument:::if->Math->abs->s->Double->Math->scalb->toHexString->return->s->replaceFirst->else->return->Double->toHexString
Float#valueOf(String):::Returns a Float object holding the float value represented by the argument string s:::return->parseFloat->new->Float
Float#valueOf(float):::Returns a Float instance representing the specified float value:::return->new->Float
Float#parseFloat(String):::Returns a new float initialized to the value represented by the specified String, as performed by the valueOf method of class Float.:::return->FloatingDecimal->parseFloat
Float#isNaN(float):::Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.:::return
Float#isInfinite(float):::Returns true if the specified number is infinitely large in magnitude, false otherwise.:::return
Float#isFinite(float):::Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).:::return->Math->abs
Float#isNaN():::Returns true if this Float value is a Not-a-Number (NaN), false otherwise.:::return->isNaN
Float#isInfinite():::Returns true if this Float value is infinitely large in magnitude, false otherwise.:::return->isInfinite
Float#toString():::Returns a string representation of this Float object:::return->Float->toString
Float#byteValue():::Returns the value of this Float as a byte after a narrowing primitive conversion.:::return
Float#shortValue():::Returns the value of this Float as a short after a narrowing primitive conversion.:::return
Float#intValue():::Returns the value of this Float as an int after a narrowing primitive conversion.:::return
Float#longValue():::Returns value of this Float as a long after a narrowing primitive conversion.:::return
Float#floatValue():::Returns the float value of this Float object.:::return
Float#doubleValue():::Returns the value of this Float as a double after a widening primitive conversion.:::return
Float#hashCode():::Returns a hash code for this Float object:::return->Float->hashCode
Float#hashCode(float):::Returns a hash code for a float value; compatible with Float.hashCode().:::return->floatToIntBits
Float#equals(Object):::Compares this object against the specified object:::return->floatToIntBits->floatToIntBits
Float#floatToIntBits(float):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout:::if->isNaN->return->floatToRawIntBits->return
Float#floatToRawIntBits(float):::Returns a representation of the specified floating-point value according to the IEEE 754 floating-point "single format" bit layout, preserving Not-a-Number (NaN) values:::
Float#intBitsToFloat(int):::Returns the float value corresponding to a given bit representation:::
Float#compareTo(Float):::Compares two Float objects numerically:::return->Float->compare
Float#compare(float, float):::Compares the two specified float values:::if->return->if->return->thisBits->Float->floatToIntBits->anotherBits->Float->floatToIntBits->return
Float#sum(float, float):::Adds two float values together as per the + operator.:::return
Float#max(float, float):::Returns the greater of two float values as if by calling Math#max(float, float) Math.max.:::return->Math->max
Float#min(float, float):::Returns the smaller of two float values as if by calling Math#min(float, float) Math.min.:::return->Math->min
InheritableThreadLocal#childValue(T):::Computes the child's initial value for this inheritable thread-local variable as a function of the parent's value at the time the child thread is created:::return
InheritableThreadLocal#getMap(Thread):::Get the map associated with a ThreadLocal.:::return
InheritableThreadLocal#createMap(Thread, T):::Create the map associated with a ThreadLocal.:::new->ThreadLocalMap
Integer#toString(int, int):::Returns a string representation of the first argument in the radix specified by the second argument:::if->if->return->toString->if->buf->new->byteArr->negative->charPos->if->while->if->return->StringLatin1->newString->return->toStringUTF16
Integer#toStringUTF16(int, int)::: integer to string f16:::buf->new->byteArr->negative->charPos->if->while->StringUTF16->putChar->StringUTF16->putChar->if->StringUTF16->putChar->return->StringUTF16->newString
Integer#toUnsignedString(int, int):::Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument:::return->Long->toUnsignedLong->toUnsignedString
Integer#toHexString(int):::Returns a string representation of the integer argument as an unsigned integer in base 16:::return->toUnsignedString0
Integer#toOctalString(int):::Returns a string representation of the integer argument as an unsigned integer in base 8:::return->toUnsignedString0
Integer#toBinaryString(int):::Returns a string representation of the integer argument as an unsigned integer in base 2:::return->toUnsignedString0
Integer#toUnsignedString0(int, int):::Convert the integer to an unsigned number.:::mag->Integer->numberOfLeadingZeros->chars->Math->max->if->buf->new->byteArr->formatUnsignedInt->return->new->String->else->buf->new->byteArr->formatUnsignedIntUTF16->return->new->String
Integer#formatUnsignedInt(int, int, char[], int, int):::Format an int (treated as unsigned) into a character buffer:::charPos->radix->mask->do->while
Integer#formatUnsignedInt(int, int, byte[], int, int):::byte[]/LATIN1 version:::charPos->radix->mask->do->while
Integer#formatUnsignedIntUTF16(int, int, byte[], int, int):::byte[]/UTF16 version:::charPos->radix->mask->do->StringUTF16->putChar->while
Integer#toString(int):::Returns a String object representing the specified integer:::size->stringSize->if->buf->new->byteArr->getChars->return->new->String->else->buf->new->byteArr->StringUTF16->getChars->return->new->String
Integer#toUnsignedString(int):::Returns a string representation of the argument as an unsigned decimal value:::return->Long->toUnsignedLong->toString
Integer#getChars(int, int, byte[]):::Places characters representing the integer i into the character array buf:::q->r->charPos->negative->if->while->if->if->return
Integer#stringSize(int):::Returns the string representation size for a given int value.:::d->if->p->for->i->return
Integer#parseInt(String, int):::Parses the string argument as a signed integer in the radix specified by the second argument:::if->throw->new->NumberFormatException->if->throw->new->NumberFormatException->if->throw->new->NumberFormatException->negative->i->len->s->length->limit->if->firstChar->s->charAt->if->if->else->if->throw->NumberFormatException->forInputString->if->throw->NumberFormatException->forInputString->multmin->result->while->digit->Character->s->charAt->digit->if->throw->NumberFormatException->forInputString->if->throw->NumberFormatException->forInputString->return->else->throw->NumberFormatException->forInputString
Integer#parseInt(CharSequence, int, int, int):::Parses the CharSequence argument as a signed int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1:::Objects->requireNonNull->if->s->length->throw->new->IndexOutOfBoundsException->if->throw->new->NumberFormatException->if->throw->new->NumberFormatException->negative->i->limit->if->firstChar->s->charAt->if->if->else->if->throw->NumberFormatException->forCharSequence->if->throw->NumberFormatException->forCharSequence->multmin->result->while->digit->Character->s->charAt->digit->if->throw->NumberFormatException->forCharSequence->if->throw->NumberFormatException->forCharSequence->return->else->throw->NumberFormatException->forInputString
Integer#parseInt(String):::Parses the string argument as a signed decimal integer:::return->parseInt
Integer#parseUnsignedInt(String, int):::Parses the string argument as an unsigned integer in the radix specified by the second argument:::if->throw->new->NumberFormatException->len->s->length->if->firstChar->s->charAt->if->throw->String->format->new->NumberFormatException->else->if->return->parseInt->else->ell->Long->parseLong->if->return->else->throw->String->format->new->NumberFormatException->else->throw->NumberFormatException->forInputString
Integer#parseUnsignedInt(CharSequence, int, int, int):::Parses the CharSequence argument as an unsigned int in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1:::Objects->requireNonNull->if->s->length->throw->new->IndexOutOfBoundsException->start->len->if->firstChar->s->charAt->if->throw->String->format->new->NumberFormatException->else->if->return->parseInt->else->ell->Long->parseLong->if->return->else->throw->String->format->new->NumberFormatException->else->throw->new->NumberFormatException
Integer#parseUnsignedInt(String):::Parses the string argument as an unsigned decimal integer:::return->parseUnsignedInt
Integer#valueOf(String, int):::Returns an Integer object holding the value extracted from the specified String when parsed with the radix given by the second argument:::return->Integer->parseInt->valueOf
Integer#valueOf(String):::Returns an Integer object holding the value of the specified String:::return->Integer->parseInt->valueOf
Integer#valueOf(int):::Returns an Integer instance representing the specified int value:::if->return->return->new->Integer
Integer#byteValue():::Returns the value of this Integer as a byte after a narrowing primitive conversion.:::return
Integer#shortValue():::Returns the value of this Integer as a short after a narrowing primitive conversion.:::return
Integer#intValue():::Returns the value of this Integer as an int.:::return
Integer#longValue():::Returns the value of this Integer as a long after a widening primitive conversion.:::return
Integer#floatValue():::Returns the value of this Integer as a float after a widening primitive conversion.:::return
Integer#doubleValue():::Returns the value of this Integer as a double after a widening primitive conversion.:::return
Integer#toString():::Returns a String object representing this Integer's value:::return->toString
Integer#hashCode():::Returns a hash code for this Integer.:::return->Integer->hashCode
Integer#hashCode(int):::Returns a hash code for an int value; compatible with Integer.hashCode().:::return
Integer#equals(Object):::Compares this object to the specified object:::if->return->intValue->return
Integer#getInteger(String):::Determines the integer value of the system property with the specified name:::return->getInteger
Integer#getInteger(String, int):::Determines the integer value of the system property with the specified name:::result->getInteger->return->Integer->valueOf
Integer#getInteger(String, Integer):::Returns the integer value of the system property with the specified name:::v->try->System->getProperty->catch->finally->if->try->return->Integer->decode->catch->finally->return
Integer#decode(String):::Decodes a String into an Integer:::radix->index->negative->result->if->nm->length->throw->new->NumberFormatException->firstChar->nm->charAt->if->else->if->if->nm->startsWith->nm->startsWith->else->if->nm->startsWith->else->if->nm->startsWith->nm->length->if->nm->startsWith->nm->startsWith->throw->new->NumberFormatException->try->Integer->nm->substring->valueOf->Integer->result->intValue->valueOf->catch->constant->nm->substring->nm->substring->Integer->valueOf->finally->return
Integer#compareTo(Integer):::Compares two Integer objects numerically.:::return->compare
Integer#compare(int, int):::Compares two int values numerically:::return
Integer#compareUnsigned(int, int):::Compares two int values numerically treating the values as unsigned.:::return->compare
Integer#toUnsignedLong(int):::Converts the argument to a long by an unsigned conversion:::return
Integer#divideUnsigned(int, int):::Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value:::return->toUnsignedLong->toUnsignedLong
Integer#remainderUnsigned(int, int):::Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.:::return->toUnsignedLong->toUnsignedLong
Integer#highestOneBit(int):::Returns an int value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified int value:::return->numberOfLeadingZeros
Integer#lowestOneBit(int):::Returns an int value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified int value:::return
Integer#numberOfLeadingZeros(int):::Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified int value:::if->return->n->if->if->if->if->return
Integer#numberOfTrailingZeros(int):::Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified int value:::y->if->return->n->if->if->if->if->return
Integer#bitCount(int):::Returns the number of one-bits in the two's complement binary representation of the specified int value:::return
Integer#rotateLeft(int, int):::Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits:::return
Integer#rotateRight(int, int):::Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits:::return
Integer#reverse(int):::Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value.:::return->reverseBytes
Integer#signum(int):::Returns the signum function of the specified int value:::return
Integer#reverseBytes(int):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified int value.:::return
Integer#sum(int, int):::Adds two integers together as per the + operator.:::return
Integer#max(int, int):::Returns the greater of two int values as if by calling Math#max(int, int) Math.max.:::return->Math->max
Integer#min(int, int):::Returns the smaller of two int values as if by calling Math#min(int, int) Math.min.:::return->Math->min
Iterable#iterator():::Returns an iterator over elements of type T.:::
Iterable#forEach(Consumer):::Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception:::Objects->requireNonNull->foreach->action->accept
Iterable#spliterator():::Creates a Spliterator over the elements described by this Iterable.:::return->Spliterators->iterator->spliteratorUnknownSize
LiveStackFrame#getMonitors():::Return the monitors held by this stack frame:::
LiveStackFrame#getLocals():::Gets the local variable array of this stack frame:::
LiveStackFrame#getStack():::Gets the operand stack of this stack frame:::
LiveStackFrame.PrimitiveSlot#size():::Returns the size, in bytes, of the slot.:::
LiveStackFrame.PrimitiveSlot#intValue():::Returns the int value if this primitive value is of size 4:::throw->size->new->UnsupportedOperationException
LiveStackFrame.PrimitiveSlot#longValue():::Returns the long value if this primitive value is of size 8:::throw->size->new->UnsupportedOperationException
LiveStackFrame#getStackWalker():::Gets StackWalker that can get locals and operands.:::return->EnumSet->noneOf->getStackWalker
LiveStackFrame#getStackWalker(Set):::Gets a StackWalker instance with the given options specifying the stack frame information it can access, and which will traverse at most the given maxDepth number of stack frames:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return->StackWalker->newInstance
LiveStackFrameInfo#getMonitors()::: live stack frame info get monitors:::return
LiveStackFrameInfo#getLocals()::: live stack frame info get locals:::return
LiveStackFrameInfo#getStack()::: live stack frame info get stack:::return
LiveStackFrameInfo#toString()::: live stack frame info to string:::retVal->super->toString->new->StringBuilder->if->retVal->append->if->retVal->append->if->retVal->append->retVal->append->return->retVal->toString
LiveStackFrameInfo#asPrimitive(int)::: live stack frame info as primitive:::return->new->PrimitiveSlot32
LiveStackFrameInfo#asPrimitive(long)::: live stack frame info as primitive:::return->new->PrimitiveSlot64
LiveStackFrameInfo.PrimitiveSlot32#size()::: primitive slot32 size:::return
LiveStackFrameInfo.PrimitiveSlot32#intValue()::: primitive slot32 int value:::return
LiveStackFrameInfo.PrimitiveSlot32#toString()::: primitive slot32 to string:::return->String->valueOf
LiveStackFrameInfo.PrimitiveSlot64#size()::: primitive slot64 size:::return
LiveStackFrameInfo.PrimitiveSlot64#longValue()::: primitive slot64 long value:::return
LiveStackFrameInfo.PrimitiveSlot64#toString()::: primitive slot64 to string:::return->String->valueOf
Long#toString(long, int):::Returns a string representation of the first argument in the radix specified by the second argument:::if->if->return->toString->if->buf->new->byteArr->charPos->negative->if->while->if->return->StringLatin1->newString->return->toStringUTF16
Long#toStringUTF16(long, int)::: long to string f16:::buf->new->byteArr->charPos->negative->if->while->StringUTF16->putChar->StringUTF16->putChar->if->StringUTF16->putChar->return->StringUTF16->newString
Long#toUnsignedString(long, int):::Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument:::if->return->toString->else->switch->return->toBinaryString->return->toUnsignedString0->return->toOctalString->quot->rem->return->toString->return->toHexString->return->toUnsignedString0->return->toUnsignedBigInteger->toString
Long#toUnsignedBigInteger(long):::Return a BigInteger equal to the unsigned value of the argument.:::if->return->BigInteger->valueOf->else->upper->lower->return->BigInteger->Integer->toUnsignedLong->valueOf->shiftLeft->BigInteger->Integer->toUnsignedLong->valueOf->add
Long#toHexString(long):::Returns a string representation of the long argument as an unsigned integer in base 16:::return->toUnsignedString0
Long#toOctalString(long):::Returns a string representation of the long argument as an unsigned integer in base 8:::return->toUnsignedString0
Long#toBinaryString(long):::Returns a string representation of the long argument as an unsigned integer in base 2:::return->toUnsignedString0
Long#toUnsignedString0(long, int):::Format a long (treated as unsigned) into a String.:::mag->Long->numberOfLeadingZeros->chars->Math->max->if->buf->new->byteArr->formatUnsignedLong0->return->new->String->else->buf->new->byteArr->formatUnsignedLong0UTF16->return->new->String
Long#formatUnsignedLong0(long, int, byte[], int, int):::byte[]/LATIN1 version:::charPos->radix->mask->do->while
Long#formatUnsignedLong0UTF16(long, int, byte[], int, int):::byte[]/UTF16 version:::charPos->radix->mask->do->StringUTF16->putChar->while
Long#fastUUID(long, long)::: long fast d:::if->buf->new->byteArr->formatUnsignedLong0->formatUnsignedLong0->formatUnsignedLong0->formatUnsignedLong0->formatUnsignedLong0->return->new->String->else->buf->new->byteArr->formatUnsignedLong0UTF16->formatUnsignedLong0UTF16->formatUnsignedLong0UTF16->formatUnsignedLong0UTF16->formatUnsignedLong0UTF16->StringUTF16->putChar->StringUTF16->putChar->StringUTF16->putChar->StringUTF16->putChar->return->new->String
Long#toString(long):::Returns a String object representing the specified long:::size->stringSize->if->buf->new->byteArr->getChars->return->new->String->else->buf->new->byteArr->StringUTF16->getChars->return->new->String
Long#toUnsignedString(long):::Returns a string representation of the argument as an unsigned decimal value:::return->toUnsignedString
Long#getChars(long, int, byte[]):::Places characters representing the long i into the character array buf:::q->r->charPos->negative->if->while->q2->i2->while->if->if->return
Long#stringSize(long):::Returns the string representation size for a given long value.:::d->if->p->for->i->return
Long#parseLong(String, int):::Parses the string argument as a signed long in the radix specified by the second argument:::if->throw->new->NumberFormatException->if->throw->new->NumberFormatException->if->throw->new->NumberFormatException->negative->i->len->s->length->limit->if->firstChar->s->charAt->if->if->else->if->throw->NumberFormatException->forInputString->if->throw->NumberFormatException->forInputString->multmin->result->while->digit->Character->s->charAt->digit->if->throw->NumberFormatException->forInputString->if->throw->NumberFormatException->forInputString->return->else->throw->NumberFormatException->forInputString
Long#parseLong(CharSequence, int, int, int):::Parses the CharSequence argument as a signed long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1:::Objects->requireNonNull->if->s->length->throw->new->IndexOutOfBoundsException->if->throw->new->NumberFormatException->if->throw->new->NumberFormatException->negative->i->limit->if->firstChar->s->charAt->if->if->else->if->throw->NumberFormatException->forCharSequence->if->throw->NumberFormatException->forCharSequence->multmin->result->while->digit->Character->s->charAt->digit->if->throw->NumberFormatException->forCharSequence->if->throw->NumberFormatException->forCharSequence->return->else->throw->new->NumberFormatException
Long#parseLong(String):::Parses the string argument as a signed decimal long:::return->parseLong
Long#parseUnsignedLong(String, int):::Parses the string argument as an unsigned long in the radix specified by the second argument:::if->throw->new->NumberFormatException->len->s->length->if->firstChar->s->charAt->if->throw->String->format->new->NumberFormatException->else->if->return->parseLong->first->parseLong->second->Character->s->charAt->digit->if->throw->new->NumberFormatException->result->guard->if->throw->String->format->new->NumberFormatException->return->else->throw->NumberFormatException->forInputString
Long#parseUnsignedLong(CharSequence, int, int, int):::Parses the CharSequence argument as an unsigned long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1:::Objects->requireNonNull->if->s->length->throw->new->IndexOutOfBoundsException->start->len->if->firstChar->s->charAt->if->throw->String->s->subSequence->format->new->NumberFormatException->else->if->return->parseLong->first->parseLong->second->Character->s->charAt->digit->if->throw->s->subSequence->new->NumberFormatException->result->guard->if->throw->String->s->subSequence->format->new->NumberFormatException->return->else->throw->NumberFormatException->forInputString
Long#parseUnsignedLong(String):::Parses the string argument as an unsigned decimal long:::return->parseUnsignedLong
Long#valueOf(String, int):::Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument:::return->Long->parseLong->valueOf
Long#valueOf(String):::Returns a Long object holding the value of the specified String:::return->Long->parseLong->valueOf
Long#valueOf(long):::Returns a Long instance representing the specified long value:::offset->if->return->return->new->Long
Long#decode(String):::Decodes a String into a Long:::radix->index->negative->result->if->nm->length->throw->new->NumberFormatException->firstChar->nm->charAt->if->else->if->if->nm->startsWith->nm->startsWith->else->if->nm->startsWith->else->if->nm->startsWith->nm->length->if->nm->startsWith->nm->startsWith->throw->new->NumberFormatException->try->Long->nm->substring->valueOf->Long->result->longValue->valueOf->catch->constant->nm->substring->nm->substring->Long->valueOf->finally->return
Long#byteValue():::Returns the value of this Long as a byte after a narrowing primitive conversion.:::return
Long#shortValue():::Returns the value of this Long as a short after a narrowing primitive conversion.:::return
Long#intValue():::Returns the value of this Long as an int after a narrowing primitive conversion.:::return
Long#longValue():::Returns the value of this Long as a long value.:::return
Long#floatValue():::Returns the value of this Long as a float after a widening primitive conversion.:::return
Long#doubleValue():::Returns the value of this Long as a double after a widening primitive conversion.:::return
Long#toString():::Returns a String object representing this Long's value:::return->toString
Long#hashCode():::Returns a hash code for this Long:::return->Long->hashCode
Long#hashCode(long):::Returns a hash code for a long value; compatible with Long.hashCode().:::return
Long#equals(Object):::Compares this object to the specified object:::if->return->longValue->return
Long#getLong(String):::Determines the long value of the system property with the specified name:::return->getLong
Long#getLong(String, long):::Determines the long value of the system property with the specified name:::result->Long->getLong->return->Long->valueOf
Long#getLong(String, Long):::Returns the long value of the system property with the specified name:::v->try->System->getProperty->catch->finally->if->try->return->Long->decode->catch->finally->return
Long#compareTo(Long):::Compares two Long objects numerically.:::return->compare
Long#compare(long, long):::Compares two long values numerically:::return
Long#compareUnsigned(long, long):::Compares two long values numerically treating the values as unsigned.:::return->compare
Long#divideUnsigned(long, long):::Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value:::if->return->compareUnsigned->if->return->else->return->toUnsignedBigInteger->toUnsignedBigInteger->divide->longValue
Long#remainderUnsigned(long, long):::Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.:::if->return->else->if->compareUnsigned->return->else->return->toUnsignedBigInteger->toUnsignedBigInteger->remainder->longValue
Long#highestOneBit(long):::Returns a long value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified long value:::return->numberOfLeadingZeros
Long#lowestOneBit(long):::Returns a long value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified long value:::return
Long#numberOfLeadingZeros(long):::Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified long value:::x->return->Integer->numberOfLeadingZeros->Integer->numberOfLeadingZeros
Long#numberOfTrailingZeros(long):::Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified long value:::x->y->if->return->n->if->else->if->if->if->if->return
Long#bitCount(long):::Returns the number of one-bits in the two's complement binary representation of the specified long value:::return
Long#rotateLeft(long, int):::Returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits:::return
Long#rotateRight(long, int):::Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits:::return
Long#reverse(long):::Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified long value.:::return->reverseBytes
Long#signum(long):::Returns the signum function of the specified long value:::return
Long#reverseBytes(long):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified long value.:::return
Long#sum(long, long):::Adds two long values together as per the + operator.:::return
Long#max(long, long):::Returns the greater of two long values as if by calling Math#max(long, long) Math.max.:::return->Math->max
Long#min(long, long):::Returns the smaller of two long values as if by calling Math#min(long, long) Math.min.:::return->Math->min
Math#sin(double):::Returns the trigonometric sine of an angle:::return->StrictMath->sin
Math#cos(double):::Returns the trigonometric cosine of an angle:::return->StrictMath->cos
Math#tan(double):::Returns the trigonometric tangent of an angle:::return->StrictMath->tan
Math#asin(double):::Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2:::return->StrictMath->asin
Math#acos(double):::Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi:::return->StrictMath->acos
Math#atan(double):::Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2:::return->StrictMath->atan
Math#toRadians(double):::Converts an angle measured in degrees to an approximately equivalent angle measured in radians:::return
Math#toDegrees(double):::Converts an angle measured in radians to an approximately equivalent angle measured in degrees:::return
Math#exp(double):::Returns Euler's number e raised to the power of a double value:::return->StrictMath->exp
Math#log(double):::Returns the natural logarithm (base e) of a double value:::return->StrictMath->log
Math#log10(double):::Returns the base 10 logarithm of a double value:::return->StrictMath->log10
Math#sqrt(double):::Returns the correctly rounded positive square root of a double value:::return->StrictMath->sqrt
Math#cbrt(double):::Returns the cube root of a double value:::return->StrictMath->cbrt
Math#IEEEremainder(double, double):::Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard:::return->StrictMath->IEEEremainder
Math#ceil(double):::Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer:::return->StrictMath->ceil
Math#floor(double):::Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer:::return->StrictMath->floor
Math#rint(double):::Returns the double value that is closest in value to the argument and is equal to a mathematical integer:::return->StrictMath->rint
Math#atan2(double, double):::Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta):::return->StrictMath->atan2
Math#pow(double, double):::Returns the value of the first argument raised to the power of the second argument:::return->StrictMath->pow
Math#round(float):::Returns the closest int to the argument, with ties rounding to positive infinity:::intBits->Float->floatToRawIntBits->biasedExp->shift->if->r->if->return->else->return
Math#round(double):::Returns the closest long to the argument, with ties rounding to positive infinity:::longBits->Double->doubleToRawLongBits->biasedExp->shift->if->r->if->return->else->return
Math#random():::Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0:::return->nextDouble
Math#addExact(int, int):::Returns the sum of its arguments, throwing an exception if the result overflows an int.:::r->if->throw->new->ArithmeticException->return
Math#addExact(long, long):::Returns the sum of its arguments, throwing an exception if the result overflows a long.:::r->if->throw->new->ArithmeticException->return
Math#subtractExact(int, int):::Returns the difference of the arguments, throwing an exception if the result overflows an int.:::r->if->throw->new->ArithmeticException->return
Math#subtractExact(long, long):::Returns the difference of the arguments, throwing an exception if the result overflows a long.:::r->if->throw->new->ArithmeticException->return
Math#multiplyExact(int, int):::Returns the product of the arguments, throwing an exception if the result overflows an int.:::r->if->throw->new->ArithmeticException->return
Math#multiplyExact(long, int):::Returns the product of the arguments, throwing an exception if the result overflows a long.:::return->multiplyExact
Math#multiplyExact(long, long):::Returns the product of the arguments, throwing an exception if the result overflows a long.:::r->ax->Math->abs->ay->Math->abs->if->if->throw->new->ArithmeticException->return
Math#incrementExact(int):::Returns the argument incremented by one, throwing an exception if the result overflows an int.:::if->throw->new->ArithmeticException->return
Math#incrementExact(long):::Returns the argument incremented by one, throwing an exception if the result overflows a long.:::if->throw->new->ArithmeticException->return
Math#decrementExact(int):::Returns the argument decremented by one, throwing an exception if the result overflows an int.:::if->throw->new->ArithmeticException->return
Math#decrementExact(long):::Returns the argument decremented by one, throwing an exception if the result overflows a long.:::if->throw->new->ArithmeticException->return
Math#negateExact(int):::Returns the negation of the argument, throwing an exception if the result overflows an int.:::if->throw->new->ArithmeticException->return
Math#negateExact(long):::Returns the negation of the argument, throwing an exception if the result overflows a long.:::if->throw->new->ArithmeticException->return
Math#toIntExact(long):::Returns the value of the long argument; throwing an exception if the value overflows an int.:::if->throw->new->ArithmeticException->return
Math#multiplyFull(int, int):::Returns the exact mathematical product of the arguments.:::return
Math#multiplyHigh(long, long):::Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors.:::if->x1->x2->y1->y2->z2->t->z1->z0->return->else->x1->y1->x2->y2->A->B->C->K->return
Math#floorDiv(int, int):::Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient:::r->if->return
Math#floorDiv(long, int):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient:::return->floorDiv
Math#floorDiv(long, long):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient:::r->if->return
Math#floorMod(int, int):::Returns the floor modulus of the int arguments:::return->floorDiv
Math#floorMod(long, int):::Returns the floor modulus of the long and int arguments:::return->floorDiv
Math#floorMod(long, long):::Returns the floor modulus of the long arguments:::return->floorDiv
Math#abs(int):::Returns the absolute value of an int value:::return
Math#abs(long):::Returns the absolute value of a long value:::return
Math#abs(float):::Returns the absolute value of a float value:::return
Math#abs(double):::Returns the absolute value of a double value:::return
Math#max(int, int):::Returns the greater of two int values:::return
Math#max(long, long):::Returns the greater of two long values:::return
Math#max(float, float):::Returns the greater of two float values:::if->return->if->Float->floatToRawIntBits->return->return
Math#max(double, double):::Returns the greater of two double values:::if->return->if->Double->doubleToRawLongBits->return->return
Math#min(int, int):::Returns the smaller of two int values:::return
Math#min(long, long):::Returns the smaller of two long values:::return
Math#min(float, float):::Returns the smaller of two float values:::if->return->if->Float->floatToRawIntBits->return->return
Math#min(double, double):::Returns the smaller of two double values:::if->return->if->Double->doubleToRawLongBits->return->return
Math#fma(double, double, double):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double:::if->Double->isNaN->Double->isNaN->Double->isNaN->return->else->infiniteA->Double->isInfinite->infiniteB->Double->isInfinite->infiniteC->Double->isInfinite->result->if->if->return->product->if->Double->isInfinite->return->else->return->else->product->new->BigDecimal->new->BigDecimal->multiply->if->if->return->else->return->product->doubleValue->else->return->product->new->BigDecimal->add->doubleValue
Math#fma(float, float, float):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float:::result->return
Math#ulp(double):::Returns the size of an ulp of the argument:::exp->getExponent->switch->return->Math->abs->return->if->return->powerOfTwoD->else->return->Double->longBitsToDouble
Math#ulp(float):::Returns the size of an ulp of the argument:::exp->getExponent->switch->return->Math->abs->return->if->return->powerOfTwoF->else->return->Float->intBitsToFloat
Math#signum(double):::Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero:::return->Double->isNaN->copySign
Math#signum(float):::Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero:::return->Float->isNaN->copySign
Math#sinh(double):::Returns the hyperbolic sine of a double value:::return->StrictMath->sinh
Math#cosh(double):::Returns the hyperbolic cosine of a double value:::return->StrictMath->cosh
Math#tanh(double):::Returns the hyperbolic tangent of a double value:::return->StrictMath->tanh
Math#hypot(double, double):::Returns sqrt(x^2 +y^2) without intermediate overflow or underflow:::return->StrictMath->hypot
Math#expm1(double):::Returns e^x -1:::return->StrictMath->expm1
Math#log1p(double):::Returns the natural logarithm of the sum of the argument and 1:::return->StrictMath->log1p
Math#copySign(double, double):::Returns the first floating-point argument with the sign of the second floating-point argument:::return->Double->Double->doubleToRawLongBits->Double->doubleToRawLongBits->longBitsToDouble
Math#copySign(float, float):::Returns the first floating-point argument with the sign of the second floating-point argument:::return->Float->Float->floatToRawIntBits->Float->floatToRawIntBits->intBitsToFloat
Math#getExponent(float):::Returns the unbiased exponent used in the representation of a float:::return->Float->floatToRawIntBits
Math#getExponent(double):::Returns the unbiased exponent used in the representation of a double:::return->Double->doubleToRawLongBits
Math#nextAfter(double, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument:::if->if->transducer->Double->doubleToRawLongBits->return->Double->longBitsToDouble->else->return->else->if->transducer->Double->doubleToRawLongBits->return->Double->longBitsToDouble->else->if->return->else->return
Math#nextAfter(float, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument:::if->if->transducer->Float->floatToRawIntBits->return->Float->intBitsToFloat->else->return->else->if->transducer->Float->floatToRawIntBits->return->Float->intBitsToFloat->else->if->return->else->return
Math#nextUp(double):::Returns the floating-point value adjacent to d in the direction of positive infinity:::if->transducer->Double->doubleToRawLongBits->return->Double->longBitsToDouble->else->return
Math#nextUp(float):::Returns the floating-point value adjacent to f in the direction of positive infinity:::if->transducer->Float->floatToRawIntBits->return->Float->intBitsToFloat->else->return
Math#nextDown(double):::Returns the floating-point value adjacent to d in the direction of negative infinity:::if->Double->isNaN->return->else->if->return->else->return->Double->Double->doubleToRawLongBits->longBitsToDouble
Math#nextDown(float):::Returns the floating-point value adjacent to f in the direction of negative infinity:::if->Float->isNaN->return->else->if->return->else->return->Float->Float->floatToRawIntBits->intBitsToFloat
Math#scalb(double, int):::Returns d × 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set:::MAX_SCALE->exp_adjust->scale_increment->exp_delta->if->Math->max->else->Math->min->t->powerOfTwoD->while->return
Math#scalb(float, int):::Returns f × 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set:::MAX_SCALE->Math->Math->min->max->return->powerOfTwoD
Math#powerOfTwoD(int):::Returns a floating-point power of two in the normal range.:::return->Double->longBitsToDouble
Math#powerOfTwoF(int):::Returns a floating-point power of two in the normal range.:::return->Float->intBitsToFloat
Module#isNamed():::Returns true if this module is a named module.:::return
Module#getName():::Returns the module name or null if this module is an unnamed module.:::return
Module#getClassLoader():::Returns the ClassLoader for this module:::sm->System->getSecurityManager->if->sm->checkPermission->return
Module#getDescriptor():::Returns the module descriptor for this module or null if this module is an unnamed module.:::return
Module#getLayer():::Returns the module layer that contains this module or null if this module is not in a module layer:::if->isNamed->layer->if->return->if->name->equals->return->ModuleLayer->boot->return
Module#canRead(Module):::Indicates if this module reads the given module:::Objects->requireNonNull->if->this->isNamed->return->if->return->if->other->isNamed->reads->if->reads->contains->return->if->containsKeyPair->return->if->other->isNamed->containsKeyPair->return->return
Module#addReads(Module):::If the caller's module is this module then update this module to read the given module:::Objects->requireNonNull->if->this->isNamed->caller->Reflection->getCallerClass->getCallerModule->if->throw->new->IllegalCallerException->implAddReads->return
Module#implAddReads(Module):::Updates this module to read another module.:::implAddReads
Module#implAddReadsAllUnnamed():::Updates this module to read all unnamed modules.:::implAddReads
Module#implAddReadsNoSync(Module):::Updates this module to read another module without notifying the VM.:::implAddReads
Module#implAddReads(Module, boolean):::Makes the given Module readable to this module:::Objects->requireNonNull->if->canRead->if->if->addReads0->else->addReads0->putIfAbsent
Module#isExported(String, Module):::Returns true if this module exports the given package to at least the given module:::Objects->requireNonNull->Objects->requireNonNull->return->implIsExportedOrOpen
Module#isOpen(String, Module):::Returns true if this module has opened a package to at least the given module:::Objects->requireNonNull->Objects->requireNonNull->return->implIsExportedOrOpen
Module#isExported(String):::Returns true if this module exports the given package unconditionally:::Objects->requireNonNull->return->implIsExportedOrOpen
Module#isOpen(String):::Returns true if this module has opened a package unconditionally:::Objects->requireNonNull->return->implIsExportedOrOpen
Module#implIsExportedOrOpen(String, Module, boolean):::Returns true if this module exports or opens the given package to the given module:::if->isNamed->return->if->descriptor->packages->contains->return->if->descriptor->isOpen->descriptor->isAutomatic->return->descriptor->packages->contains->if->isStaticallyExportedOrOpen->return->if->isReflectivelyExportedOrOpen->return->return
Module#isStaticallyExportedOrOpen(String, Module, boolean):::Returns true if this module exports or opens a package to the given module via its module declaration or CLI options.:::openPackages->if->openPackages->get->allows->return->if->exportedPackages->if->exportedPackages->get->allows->return->return
Module#allows(Set, Module):::Returns true if targets is non-null and contains EVERYONE_MODULE or the given module:::if->if->targets->contains->return->if->if->targets->contains->return->if->module->isNamed->targets->contains->return->return
Module#isReflectivelyExportedOrOpen(String, Module, boolean):::Returns true if this module reflectively exports or opens the given package to the given module.:::exports->get->if->b->exports->get->if->isOpen->b->booleanValue->if->return->if->get->if->b->exports->get->if->isOpen->b->booleanValue->if->return->if->other->isNamed->get->if->b->exports->get->if->isOpen->b->booleanValue->if->return->return
Module#isReflectivelyExported(String, Module):::Returns true if this module reflectively exports the given package to the given module.:::return->isReflectivelyExportedOrOpen
Module#isReflectivelyOpened(String, Module):::Returns true if this module reflectively opens the given package to the given module.:::return->isReflectivelyExportedOrOpen
Module#addExports(String, Module):::If the caller's module is this module then update this module to export the given package to the given module:::if->throw->new->IllegalArgumentException->Objects->requireNonNull->if->isNamed->caller->Reflection->getCallerClass->getCallerModule->if->throw->new->IllegalCallerException->implAddExportsOrOpens->return
Module#addOpens(String, Module):::If this module has opened a package to at least the caller module then update this module to open the package to the given module:::if->throw->new->IllegalArgumentException->Objects->requireNonNull->if->isNamed->caller->Reflection->getCallerClass->getCallerModule->if->isOpen->throw->new->IllegalCallerException->implAddExportsOrOpens->return
Module#implAddExports(String):::Updates this module to export a package unconditionally.:::implAddExportsOrOpens
Module#implAddExports(String, Module):::Updates this module to export a package to another module.:::implAddExportsOrOpens
Module#implAddExportsToAllUnnamed(String):::Updates this module to export a package to all unnamed modules.:::implAddExportsOrOpens
Module#implAddExportsNoSync(String):::Updates this export to export a package unconditionally without notifying the VM.:::pn->replace->implAddExportsOrOpens
Module#implAddExportsNoSync(String, Module):::Updates a module to export a package to another module without notifying the VM.:::pn->replace->implAddExportsOrOpens
Module#implAddOpens(String):::Updates this module to open a package unconditionally.:::implAddExportsOrOpens
Module#implAddOpens(String, Module):::Updates this module to open a package to another module.:::implAddExportsOrOpens
Module#implAddOpensToAllUnnamed(String):::Updates this module to open a package to all unnamed modules.:::implAddExportsOrOpens
Module#implAddExportsOrOpens(String, Module, boolean, boolean):::Updates a module to export or open a module to another module:::Objects->requireNonNull->Objects->requireNonNull->if->isNamed->descriptor->isOpen->descriptor->isAutomatic->return->if->implIsExportedOrOpen->needToAdd->if->other->isNamed->l->IllegalAccessLogger->illegalAccessLogger->if->if->l->isOpenForIllegalAccess->else->l->isExportedForIllegalAccess->if->return->if->descriptor->packages->contains->throw->new->IllegalArgumentException->if->if->addExportsToAll0->else->if->addExportsToAllUnnamed0->else->addExports0->map->new->ConcurrentHashMap<>->computeIfAbsent->if->map->put->else->map->putIfAbsent
Module#implAddOpensToAllUnnamed(Iterator):::Updates a module to open all packages returned by the given iterator to all unnamed modules.:::if->isModuleSystemInited->throw->new->IllegalStateException->openPackages->if->new->HashMap<>->else->new->HashMap<>->while->iterator->hasNext->pn->iterator->next->prev->openPackages->putIfAbsent->if->prev->add->addExportsToAllUnnamed0
Module#addUses(Class):::If the caller's module is this module then update this module to add a service dependence on the given service type:::Objects->requireNonNull->if->isNamed->descriptor->isAutomatic->caller->Reflection->getCallerClass->getCallerModule->if->throw->new->IllegalCallerException->implAddUses->return
Module#implAddUses(Class):::Update this module to add a service dependence on the given service type.:::if->canUse->putIfAbsent
Module#canUse(Class):::Indicates if this module has a service dependence on the given service type:::Objects->requireNonNull->if->isNamed->return->if->descriptor->isAutomatic->return->if->descriptor->uses->service->getName->contains->return->return->containsKeyPair
Module#getPackages():::Returns the set of package names for the packages in this module:::if->isNamed->return->descriptor->packages->else->packages->if->BootLoader->packages->else->loader->packages->return->packages->Package->getName->map->Collectors->toSet->collect
Module#defineModules(Configuration, Function, ModuleLayer):::Defines all module in a configuration to the runtime.:::isBootLayer->ModuleLayer->boot->cap->cf->modules->size->nameToModule->new->HashMap<>->nameToLoader->new->HashMap<>->loaders->new->HashSet<>->hasPlatformModules->foreach->cf->modules->name->resolvedModule->name->loader->clf->apply->nameToLoader->put->if->ClassLoaders->platformClassLoader->if->throw->new->IllegalArgumentException->else->loaders->add->foreach->cf->modules->mref->resolvedModule->reference->descriptor->mref->descriptor->name->descriptor->name->loader->nameToLoader->get->m->if->name->equals->getModule->else->uri->mref->location->orElse->new->Module->nameToModule->put->foreach->cf->modules->mref->resolvedModule->reference->descriptor->mref->descriptor->mn->descriptor->name->m->nameToModule->get->reads->new->HashSet<>->nameToSource->Map->of->foreach->resolvedModule->reads->m2->if->other->configuration->nameToModule->other->name->get->else->foreach->layer->parents->findModule->if->break->if->nameToSource->isEmpty->new->HashMap<>->nameToSource->other->name->put->reads->add->addReads0->if->descriptor->isAutomatic->m->implAddReads->if->descriptor->isOpen->descriptor->isAutomatic->if->descriptor->opens->isEmpty->initExports->else->layer->parents->initExportsAndOpens->if->pcl->ClassLoaders->platformClassLoader->bootCatalog->BootLoader->getServicesCatalog->pclCatalog->ServicesCatalog->getServicesCatalog->foreach->cf->modules->mref->resolvedModule->reference->descriptor->mref->descriptor->if->descriptor->provides->isEmpty->name->descriptor->name->m->nameToModule->get->loader->nameToLoader->get->if->bootCatalog->register->else->if->pclCatalog->register->foreach->layer->bindToLoader->return
Module#findModule(ModuleLayer, ResolvedModule):::Find the runtime Module corresponding to the given ResolvedModule in the given parent layer (or its parents).:::cf->resolvedModule->configuration->dn->resolvedModule->name->return->parent->layers->l->configuration->filter->findAny->om->layer->findModule->m->om->get->return->map->orElse
Module#initExports(Module, Map):::Initialize/setup a module's exports.:::exportedPackages->new->HashMap<>->foreach->m->getDescriptor->exports->source->exports->source->if->exports->isQualified->targets->new->HashSet<>->foreach->exports->targets->m2->nameToModule->get->if->addExports0->targets->add->if->targets->isEmpty->exportedPackages->put->else->addExportsToAll0->exportedPackages->put->if->exportedPackages->isEmpty
Module#initExportsAndOpens(Module, Map, Map, List):::Initialize/setup a module's exports.:::descriptor->m->getDescriptor->openPackages->new->HashMap<>->exportedPackages->new->HashMap<>->foreach->descriptor->opens->source->opens->source->if->opens->isQualified->targets->new->HashSet<>->foreach->opens->targets->m2->findModule->if->addExports0->targets->add->if->targets->isEmpty->openPackages->put->else->addExportsToAll0->openPackages->put->foreach->descriptor->exports->source->exports->source->openToTargets->openPackages->get->if->openToTargets->contains->continue->if->exports->isQualified->targets->new->HashSet<>->foreach->exports->targets->m2->findModule->if->if->openToTargets->contains->addExports0->targets->add->if->targets->isEmpty->exportedPackages->put->else->addExportsToAll0->exportedPackages->put->if->openPackages->isEmpty->if->exportedPackages->isEmpty
Module#findModule(String, Map, Map, List):::Find the runtime Module with the given name:::m->nameToSource->get->if->nameToModule->get->if->foreach->parent->findModule->orElse->if->break->return
Module#getAnnotation(Class):::This method returns {@code null when invoked on an unnamed module.:::return->moduleInfoClass->getDeclaredAnnotation
Module#getAnnotations()::: This method returns an empty array when invoked on an unnamed module.:::return->moduleInfoClass->getAnnotations
Module#getDeclaredAnnotations()::: This method returns an empty array when invoked on an unnamed module.:::return->moduleInfoClass->getDeclaredAnnotations
Module#moduleInfoClass()::: module module info class:::clazz->if->return->synchronized->if->if->isNamed->pa->this->loadModuleInfoClass->AccessController->doPrivileged->if->return
Module#loadModuleInfoClass()::: module load module info class:::clazz->try->in->getResourceAsStream->if->loadModuleInfoClass->catch->finally->return
Module#loadModuleInfoClass(InputStream):::Loads module-info.class as a package-private interface in a class loader that is a child of this module's class loader.:::MODULE_INFO->cw->new->ClassWriter->cv->new->ClassVisitor->cr->new->ClassReader->cr->accept->bytes->cw->toByteArray->cl->new->ClassLoader->try->return->cl->loadClass->catch->throw->new->InternalError->finally
Module#getResourceAsStream(String):::Returns an input stream for reading a resource in this module:::if->name->startsWith->name->substring->if->isNamed->Resources->canEncapsulate->caller->Reflection->getCallerClass->getCallerModule->if->getModule->pn->Resources->toPackageName->if->getPackages->contains->if->isOpen->return->if->isOpen->return->mn->if->return->BootLoader->findResourceAsStream->else->if->return->findResourceAsStream->url->loader->findResource->if->try->return->url->openStream->catch->finally->return
Module#toString():::Returns the string representation of this module:::if->isNamed->return->else->id->Integer->System->identityHashCode->toHexString->return
Module#getCallerModule(Class):::Returns the module that a given caller class is a member of:::return->caller->getModule
Module#defineModule0(Module, boolean, String, String, String[])::: module define module0:::
Module#addReads0(Module, Module)::: module add reads0:::
Module#addExports0(Module, String, Module)::: module add exports0:::
Module#addExportsToAll0(Module, String)::: module add exports to all0:::
Module#addExportsToAllUnnamed0(Module, String)::: module add exports to all unnamed0:::
ModuleLayer.Controller#layer():::Returns the layer that this object controls.:::return
ModuleLayer.Controller#ensureInLayer(Module)::: controller ensure in layer:::if->source->getLayer->throw->new->IllegalArgumentException
ModuleLayer.Controller#addReads(Module, Module):::Updates module source in the layer to read module target:::ensureInLayer->source->implAddReads->return
ModuleLayer.Controller#addExports(Module, String, Module):::Updates module source in the layer to export a package to module target:::ensureInLayer->source->implAddExports->return
ModuleLayer.Controller#addOpens(Module, String, Module):::Updates module source in the layer to open a package to module target:::ensureInLayer->source->implAddOpens->return
ModuleLayer#defineModulesWithOneLoader(Configuration, ClassLoader):::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine:::return->List->of->defineModulesWithOneLoader->layer
ModuleLayer#defineModulesWithManyLoaders(Configuration, ClassLoader):::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine:::return->List->of->defineModulesWithManyLoaders->layer
ModuleLayer#defineModules(Configuration, Function):::Creates a new module layer, with this layer as its parent, by defining the modules in the given Configuration to the Java virtual machine:::return->List->of->defineModules->layer
ModuleLayer#defineModulesWithOneLoader(Configuration, List, ClassLoader):::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine:::parents->new->ArrayList<>->checkConfiguration->checkCreateClassLoaderPermission->checkGetClassLoaderPermission->try->loader->cf->modules->new->Loader->loader->initRemotePackageMap->layer->new->ModuleLayer->return->new->Controller->catch->throw->e->getMessage->new->LayerInstantiationException->finally
ModuleLayer#defineModulesWithManyLoaders(Configuration, List, ClassLoader):::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine:::parents->new->ArrayList<>->checkConfiguration->checkCreateClassLoaderPermission->checkGetClassLoaderPermission->pool->new->LoaderPool->try->layer->pool->loaderFor->new->ModuleLayer->return->new->Controller->catch->throw->e->getMessage->new->LayerInstantiationException->finally
ModuleLayer#defineModules(Configuration, List, Function):::Creates a new module layer by defining the modules in the given Configuration to the Java virtual machine:::parents->new->ArrayList<>->checkConfiguration->Objects->requireNonNull->checkGetClassLoaderPermission->if->boot->checkForDuplicatePkgs->try->layer->new->ModuleLayer->return->new->Controller->catch->throw->e->getMessage->new->LayerInstantiationException->finally
ModuleLayer#checkConfiguration(Configuration, List):::Checks that the parent configurations match the configuration of the parent layers.:::Objects->requireNonNull->parentConfigurations->cf->parents->if->parentLayers->size->parentConfigurations->size->throw->new->IllegalArgumentException->index->foreach->if->parent->configuration->parentConfigurations->get->throw->new->IllegalArgumentException
ModuleLayer#checkCreateClassLoaderPermission()::: module layer check create class loader permission:::sm->System->getSecurityManager->if->sm->checkPermission
ModuleLayer#checkGetClassLoaderPermission()::: module layer check get class loader permission:::sm->System->getSecurityManager->if->sm->checkPermission
ModuleLayer#checkForDuplicatePkgs(Configuration, Function):::Checks a configuration and the module-to-loader mapping to ensure that no two modules mapped to the same class loader have the same package:::loaderToPackages->new->HashMap<>->foreach->cf->modules->descriptor->resolvedModule->reference->descriptor->loader->clf->descriptor->name->apply->loaderPackages->loaderToPackages->new->HashSet<>->computeIfAbsent->foreach->descriptor->packages->added->loaderPackages->add->if->throw->fail
ModuleLayer#fail(String, Object...):::Creates a LayerInstantiationException with the a message formatted from the given format string and arguments.:::msg->String->format->return->new->LayerInstantiationException
ModuleLayer#configuration():::Returns the configuration for this layer.:::return
ModuleLayer#parents():::Returns the list of this layer's parents unless this is the #empty empty layer, which has no parents and so an empty list is returned.:::return
ModuleLayer#layers():::Returns an ordered stream of layers:::allLayers->if->return->allLayers->stream->new->ArrayList<>->visited->new->HashSet<>->stack->new->ArrayDeque<>->visited->add->stack->push->while->stack->isEmpty->layer->stack->pop->allLayers->add->for->i->size->Collections->unmodifiableList->return->allLayers->stream
ModuleLayer#modules():::Returns the set of the modules in this layer.:::modules->if->Set->nameToModule->values->copyOf->return
ModuleLayer#findModule(String):::Returns the module with the given name in this layer, or if not in this layer, the #parents() parent layers:::Objects->requireNonNull->if->return->Optional->empty->m->nameToModule->get->if->return->Optional->of->return->layers->skip->get->map->Objects->nonNull->filter->findAny
ModuleLayer#findLoader(String):::Returns the ClassLoader for the module with the given name:::om->findModule->if->om->isPresent->return->om->get->getClassLoader->else->throw->new->IllegalArgumentException
ModuleLayer#toString():::Returns a string describing this module layer.:::return->modules->stream->Module->getName->map->Collectors->joining->collect
ModuleLayer#empty():::Returns the empty layer:::return
ModuleLayer#boot():::Returns the boot layer:::return
ModuleLayer#getServicesCatalog():::Returns the ServicesCatalog for this Layer, creating it if not already created.:::servicesCatalog->if->return->synchronized->if->ServicesCatalog->create->nameToModule->values->servicesCatalog->register->forEach->return
ModuleLayer#bindToLoader(ClassLoader):::Record that this layer has at least one module defined to the given class loader.:::list->CLV->get->if->new->CopyOnWriteArrayList<>->previous->CLV->putIfAbsent->if->list->add
ModuleLayer#layers(ClassLoader):::Returns a stream of the layers that have at least one module defined to the given class loader.:::list->CLV->get->if->return->list->stream->else->return->Stream->empty
NamedPackage#packageName():::Returns the name of this package.:::return
NamedPackage#module():::Returns the module of this named package.:::return
NamedPackage#location():::Returns the location of the module if this named package is in a named module; otherwise, returns null.:::if->module->isNamed->module->getLayer->cf->module->getLayer->configuration->mref->cf->module->getName->findModule->get->reference->return->mref->location->orElse->return
NamedPackage#toPackage(String, Module):::Creates a Package object of the given name and module.:::return->new->Package
Number#intValue():::Returns the value of the specified number as an int.:::
Number#longValue():::Returns the value of the specified number as a long.:::
Number#floatValue():::Returns the value of the specified number as a float.:::
Number#doubleValue():::Returns the value of the specified number as a double.:::
Number#byteValue():::Returns the value of the specified number as a byte:::return->intValue
Number#shortValue():::Returns the value of the specified number as a short:::return->intValue
NumberFormatException#forInputString(String):::Factory method for making a NumberFormatException given the specified input which caused the error.:::return->new->NumberFormatException
NumberFormatException#forCharSequence(CharSequence, int, int, int):::Factory method for making a NumberFormatException given the specified input which caused the error.:::return->s->subSequence->new->NumberFormatException
Object#registerNatives()::: object register natives:::
Object#getClass():::Returns the runtime class of this Object:::
Object#hashCode():::Returns a hash code value for the object:::
Object#equals(Object):::Indicates whether some other object is "equal to" this one:::return
Object#clone():::Creates and returns a copy of this object:::
Object#toString():::Returns a string representation of the object:::return->getClass->getName->Integer->hashCode->toHexString
Object#notify():::Wakes up a single thread that is waiting on this object's monitor:::
Object#notifyAll():::Wakes up all threads that are waiting on this object's monitor:::
Object#wait():::Causes the current thread to wait until it is awakened, typically by being notified or interrupted:::wait
Object#wait(long):::Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed:::
Object#wait(long, int):::Causes the current thread to wait until it is awakened, typically by being notified or interrupted, or until a certain amount of real time has elapsed:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->wait
Object#finalize():::Called by the garbage collector on an object when garbage collection determines that there are no more references to the object:::
Package#getName():::Return the name of this package.:::return->packageName
Package#getSpecificationTitle():::Return the title of the specification that this package implements.:::return
Package#getSpecificationVersion():::Returns the version number of the specification that this package implements:::return
Package#getSpecificationVendor():::Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package.:::return
Package#getImplementationTitle():::Return the title of this package.:::return
Package#getImplementationVersion():::Return the version of this implementation:::return
Package#getImplementationVendor():::Returns the vendor that implemented this package, null is returned if it is not known.:::return
Package#isSealed():::Returns true if this package is sealed.:::return->module->isNamed
Package#isSealed(URL):::Returns true if this package is sealed with respect to the specified code source url.:::Objects->requireNonNull->sealBase->if->else->try->uri->location->uri->toURL->catch->finally->return->url->equals
Package#isCompatibleWith(String):::Compare this package's specification version with a desired version:::if->length->throw->new->NumberFormatException->sa->split->si->new->intArr->for->i->da->desired->split->di->new->intArr->for->i->len->Math->max->for->i->return
Package#getPackage(String):::Finds a package by name in the caller's class loader and its ancestors:::l->ClassLoader->Reflection->getCallerClass->getClassLoader->return->l->getPackage->BootLoader->getDefinedPackage
Package#getPackages():::Returns all of the Packages defined by the caller's class loader and its ancestors:::cl->ClassLoader->Reflection->getCallerClass->getClassLoader->return->cl->getPackages->BootLoader->packages->Package[]->new->toArray
Package#hashCode():::Return the hash code computed from the package name.:::return->packageName->hashCode
Package#toString():::Returns the string representation of this Package:::spec->ver->if->spec->length->else->if->ver->length->else->return->packageName
Package#getPackageInfo()::: package get package info:::if->cn->packageName->module->module->pa->module->getClassLoader->loader->AccessController->doPrivileged->c->if->loader->loadClass->else->BootLoader->loadClass->if->else->return
Package#getAnnotation(Class)::: package get annotation:::return->getPackageInfo->getAnnotation
Package#isAnnotationPresent(Class)::: package is annotation present:::return->AnnotatedElement.super->isAnnotationPresent
Package#getAnnotationsByType(Class)::: package get annotations by type:::return->getPackageInfo->getAnnotationsByType
Package#getAnnotations()::: package get annotations:::return->getPackageInfo->getAnnotations
Package#getDeclaredAnnotation(Class)::: package get declared annotation:::return->getPackageInfo->getDeclaredAnnotation
Package#getDeclaredAnnotationsByType(Class)::: package get declared annotations by type:::return->getPackageInfo->getDeclaredAnnotationsByType
Package#getDeclaredAnnotations()::: package get declared annotations:::return->getPackageInfo->getDeclaredAnnotations
Package.VersionInfo#getInstance(String, String, String, String, String, String, URL)::: version info get instance:::if->return->return->new->VersionInfo
Process#getOutputStream():::Returns the output stream connected to the normal input of the process:::
Process#getInputStream():::Returns the input stream connected to the normal output of the process:::
Process#getErrorStream():::Returns the input stream connected to the error output of the process:::
Process#waitFor():::Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated:::
Process#waitFor(long, TimeUnit):::Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated, or the specified waiting time elapses:::startTime->System->nanoTime->rem->unit->toNanos->do->try->exitValue->return->catch->if->Thread->Math->toMillis->min->sleep->finally->unit->toNanos->System->nanoTime->while->return
Process#exitValue():::Returns the exit value for the process.:::
Process#destroy():::Kills the process:::
Process#destroyForcibly():::Kills the process forcibly:::destroy->return
Process#supportsNormalTermination():::Returns true if the implementation of #destroy is to normally terminate the process, Returns false if the implementation of destroy forcibly and immediately terminates the process:::throw->this->getClass->new->UnsupportedOperationException
Process#isAlive():::Tests whether the process represented by this Process is alive.:::try->exitValue->return->catch->return->finally
Process#pid():::Returns the native process ID of the process:::return->toHandle->pid
Process#onExit():::Returns a CompletableFuture<Process> for the termination of the Process:::return->CompletableFuture->this->waitForInternal->supplyAsync
Process#waitForInternal():::Wait for the process to exit by calling waitFor:::interrupted->while->try->ForkJoinPool->new->ForkJoinPool.ManagedBlocker->managedBlock->break->catch->finally->if->Thread->currentThread->interrupt->return
Process#toHandle():::Returns a ProcessHandle for the Process:::throw->this->getClass->new->UnsupportedOperationException
Process#info():::Returns a snapshot of information about the process:::return->toHandle->info
Process#children():::Returns a snapshot of the direct children of the process:::return->toHandle->children
Process#descendants():::Returns a snapshot of the descendants of the process:::return->toHandle->descendants
Process.PipeInputStream#skip(long)::: pipe input stream skip:::remaining->nr->if->return->size->Math->min->skipBuffer->new->byteArr->while->Math->min->read->if->break->return
ProcessBuilder#command(List):::Sets this process builder's operating system program and arguments:::if->throw->new->NullPointerException->return
ProcessBuilder#command(String...):::Sets this process builder's operating system program and arguments:::new->ArrayList<>->foreach->add->return
ProcessBuilder#command():::Returns this process builder's operating system program and arguments:::return
ProcessBuilder#environment():::Returns a string map view of this process builder's environment:::security->System->getSecurityManager->if->security->new->RuntimePermission->checkPermission->if->ProcessEnvironment->environment->return
ProcessBuilder#environment(String[])::: process builder environment:::if->ProcessEnvironment->emptyEnvironment->foreach->if->envstring->indexOf->envstring->replaceFirst->eqlsign->envstring->indexOf->if->environment->envstring->substring->envstring->substring->put->return
ProcessBuilder#directory():::Returns this process builder's working directory:::return
ProcessBuilder#directory(File):::Sets this process builder's working directory:::return
ProcessBuilder.NullInputStream#read()::: null input stream read:::return
ProcessBuilder.NullInputStream#available()::: null input stream available:::return
ProcessBuilder.NullOutputStream#write(int)::: null output stream write:::throw->new->IOException
ProcessBuilder.Redirect#type():::Returns the type of this Redirect.:::
ProcessBuilder.Redirect#file():::Returns the File source or destination associated with this redirect, or null if there is no such file.:::return
ProcessBuilder.Redirect#append():::When redirected to a destination file, indicates if the output is to be written to the end of the file.:::throw->new->UnsupportedOperationException
ProcessBuilder.Redirect#from(File):::Returns a redirect to read from the specified file:::if->throw->new->NullPointerException->return->new->Redirect
ProcessBuilder.Redirect#to(File):::Returns a redirect to write to the specified file:::if->throw->new->NullPointerException->return->new->Redirect
ProcessBuilder.Redirect#appendTo(File):::Returns a redirect to append to the specified file:::if->throw->new->NullPointerException->return->new->Redirect
ProcessBuilder.Redirect#equals(Object):::Compares the specified object with this Redirect for equality:::if->return->if->return->r->if->r->type->this->type->return->return->this->file->r->file->equals
ProcessBuilder.Redirect#hashCode():::Returns a hash code value for this Redirect.:::file->file->if->return->super->hashCode->else->return->file->hashCode
ProcessBuilder.RedirectPipeImpl#type()::: redirect pipe impl type:::return
ProcessBuilder.RedirectPipeImpl#toString()::: redirect pipe impl to string:::return->type->toString
ProcessBuilder.RedirectPipeImpl#getFd()::: redirect pipe impl get fd:::return
ProcessBuilder#redirects():::Return the array of redirects, creating the default as needed.:::if->new->RedirectArr->return
ProcessBuilder#redirectInput(Redirect):::Sets this process builder's standard input source:::if->source->type->source->type->throw->new->IllegalArgumentException->redirects->return
ProcessBuilder#redirectOutput(Redirect):::Sets this process builder's standard output destination:::if->destination->type->throw->new->IllegalArgumentException->redirects->return
ProcessBuilder#redirectError(Redirect):::Sets this process builder's standard error destination:::if->destination->type->throw->new->IllegalArgumentException->redirects->return
ProcessBuilder#redirectInput(File):::Sets this process builder's standard input source to a file:::return->Redirect->from->redirectInput
ProcessBuilder#redirectOutput(File):::Sets this process builder's standard output destination to a file:::return->Redirect->to->redirectOutput
ProcessBuilder#redirectError(File):::Sets this process builder's standard error destination to a file:::return->Redirect->to->redirectError
ProcessBuilder#redirectInput():::Returns this process builder's standard input source:::return
ProcessBuilder#redirectOutput():::Returns this process builder's standard output destination:::return
ProcessBuilder#redirectError():::Returns this process builder's standard error destination:::return
ProcessBuilder#inheritIO():::Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process:::Arrays->redirects->fill->return
ProcessBuilder#redirectErrorStream():::Tells whether this process builder merges standard error and standard output:::return
ProcessBuilder#redirectErrorStream(boolean):::Sets this process builder's redirectErrorStream property:::return
ProcessBuilder#start():::Starts a new process using the attributes of this process builder:::return->start
ProcessBuilder#start(Redirect[]):::Start a new Process using an explicit array of redirects:::cmdarray->command->command->size->new->StringArr->toArray->cmdarray->clone->foreach->if->throw->new->NullPointerException->prog->security->System->getSecurityManager->if->security->checkExec->dir->directory->toString->for->i->try->return->ProcessImpl->start->catch->exceptionInfo->e->getMessage->cause->if->try->security->checkRead->catch->finally->throw->new->IOException->finally
ProcessBuilder#startPipeline(List):::Starts a Process for each ProcessBuilder, creating a pipeline of processes linked by their standard output and standard input streams:::numBuilders->builders->size->processes->new->ArrayList<>->try->prevOutput->for->index->builders->size->catch->processes->Process->destroyForcibly->forEach->processes->try->p->waitFor->catch->Thread->currentThread->interrupt->finally->forEach->throw->finally->return
ProcessEnvironment#validateName(String)::: process environment validate name:::if->name->indexOf->name->indexOf->throw->new->IllegalArgumentException->return
ProcessEnvironment#validateValue(String)::: process environment validate value:::if->value->indexOf->throw->new->IllegalArgumentException->return
ProcessEnvironment#nonNullString(Object)::: process environment non null string:::if->throw->new->NullPointerException->return
ProcessEnvironment#put(String, String)::: process environment put:::return->super->validateName->validateValue->put
ProcessEnvironment#get(Object)::: process environment get:::return->super->nonNullString->get
ProcessEnvironment#containsKey(Object)::: process environment contains key:::return->super->nonNullString->containsKey
ProcessEnvironment#containsValue(Object)::: process environment contains value:::return->super->nonNullString->containsValue
ProcessEnvironment#remove(Object)::: process environment remove:::return->super->nonNullString->remove
ProcessEnvironment.CheckedEntry#getKey()::: checked entry get key:::return->e->getKey
ProcessEnvironment.CheckedEntry#getValue()::: checked entry get value:::return->e->getValue
ProcessEnvironment.CheckedEntry#setValue(String)::: checked entry set value:::return->e->validateValue->setValue
ProcessEnvironment.CheckedEntry#toString()::: checked entry to string:::return->getKey->getValue
ProcessEnvironment.CheckedEntry#equals(Object)::: checked entry equals:::return->e->equals
ProcessEnvironment.CheckedEntry#hashCode()::: checked entry hash code:::return->e->hashCode
ProcessEnvironment.CheckedEntrySet#size()::: checked entry set size:::return->s->size
ProcessEnvironment.CheckedEntrySet#isEmpty()::: checked entry set is empty:::return->s->isEmpty
ProcessEnvironment.CheckedEntrySet#clear()::: checked entry set clear:::s->clear
ProcessEnvironment.CheckedEntrySet#iterator()::: checked entry set iterator:::return->new->Iterator<Map.Entry<String,String>>
ProcessEnvironment.CheckedEntrySet#checkedEntry(Object)::: checked entry set checked entry:::e->e->getKey->nonNullString->e->getValue->nonNullString->return
ProcessEnvironment.CheckedEntrySet#contains(Object)::: checked entry set contains:::return->s->checkedEntry->contains
ProcessEnvironment.CheckedEntrySet#remove(Object)::: checked entry set remove:::return->s->checkedEntry->remove
ProcessEnvironment.CheckedValues#size()::: checked values size:::return->c->size
ProcessEnvironment.CheckedValues#isEmpty()::: checked values is empty:::return->c->isEmpty
ProcessEnvironment.CheckedValues#clear()::: checked values clear:::c->clear
ProcessEnvironment.CheckedValues#iterator()::: checked values iterator:::return->c->iterator
ProcessEnvironment.CheckedValues#contains(Object)::: checked values contains:::return->c->nonNullString->contains
ProcessEnvironment.CheckedValues#remove(Object)::: checked values remove:::return->c->nonNullString->remove
ProcessEnvironment.CheckedKeySet#size()::: checked key set size:::return->s->size
ProcessEnvironment.CheckedKeySet#isEmpty()::: checked key set is empty:::return->s->isEmpty
ProcessEnvironment.CheckedKeySet#clear()::: checked key set clear:::s->clear
ProcessEnvironment.CheckedKeySet#iterator()::: checked key set iterator:::return->s->iterator
ProcessEnvironment.CheckedKeySet#contains(Object)::: checked key set contains:::return->s->nonNullString->contains
ProcessEnvironment.CheckedKeySet#remove(Object)::: checked key set remove:::return->s->nonNullString->remove
ProcessEnvironment#keySet()::: process environment key set:::return->super->keySet->new->CheckedKeySet
ProcessEnvironment#values()::: process environment values:::return->super->values->new->CheckedValues
ProcessEnvironment#entrySet()::: process environment entry set:::return->super->entrySet->new->CheckedEntrySet
ProcessEnvironment.NameComparator#compare(String, String)::: name comparator compare:::n1->s1->length->n2->s2->length->min->Math->min->for->i->return
ProcessEnvironment.EntryComparator#compare(Map.Entry, Map.Entry)::: entry comparator compare:::return->nameComparator->e1->getKey->e2->getKey->compare
ProcessEnvironment#getenv(String)::: process environment getenv:::return->theCaseInsensitiveEnvironment->get
ProcessEnvironment#getenv()::: process environment getenv:::return
ProcessEnvironment#environment()::: process environment environment:::return->theEnvironment->clone
ProcessEnvironment#emptyEnvironment(int)::: process environment empty environment:::return->new->ProcessEnvironment
ProcessEnvironment#environmentBlock()::: process environment environment block:::
ProcessEnvironment#toEnvironmentBlock()::: process environment to environment block:::list->entrySet->new->ArrayList<>->Collections->sort->sb->size->new->StringBuilder->cmp->SYSTEMROOT->foreach->key->e->getKey->value->e->getValue->if->nameComparator->compare->addToEnvIfSet->addToEnv->if->addToEnvIfSet->if->sb->length->sb->append->sb->append->return->sb->toString
ProcessEnvironment#addToEnvIfSet(StringBuilder, String)::: process environment add to env if set:::s->getenv->if->addToEnv
ProcessEnvironment#addToEnv(StringBuilder, String, String)::: process environment add to env:::sb->append->append->append->append
ProcessEnvironment#toEnvironmentBlock(Map)::: process environment to environment block:::return->toEnvironmentBlock
ProcessHandle#pid():::Returns the native process ID of the process:::
ProcessHandle#of(long):::Returns an Optional<ProcessHandle> for an existing native process.:::return->ProcessHandleImpl->get
ProcessHandle#current():::Returns a ProcessHandle for the current process:::return->ProcessHandleImpl->current
ProcessHandle#parent():::Returns an Optional<ProcessHandle> for the parent process:::
ProcessHandle#children():::Returns a snapshot of the current direct children of the process:::
ProcessHandle#descendants():::Returns a snapshot of the descendants of the process:::
ProcessHandle#allProcesses():::Returns a snapshot of all processes visible to the current process:::return->ProcessHandleImpl->children
ProcessHandle#info():::Returns a snapshot of information about the process:::
ProcessHandle.Info#command():::Returns the executable pathname of the process.:::
ProcessHandle.Info#commandLine():::Returns the command line of the process:::
ProcessHandle.Info#arguments():::Returns an array of Strings of the arguments of the process.:::
ProcessHandle.Info#startInstant():::Returns the start time of the process.:::
ProcessHandle.Info#totalCpuDuration():::Returns the total cputime accumulated of the process.:::
ProcessHandle.Info#user():::Return the user of the process.:::
ProcessHandle#onExit():::Returns a CompletableFuture<ProcessHandle> for the termination of the process:::
ProcessHandle#supportsNormalTermination():::Returns true if the implementation of #destroy normally terminates the process:::
ProcessHandle#destroy():::Requests the process to be killed:::
ProcessHandle#destroyForcibly():::Requests the process to be killed forcibly:::
ProcessHandle#isAlive():::Tests whether the process represented by this ProcessHandle is alive:::
ProcessHandle#hashCode():::Returns a hash code value for this ProcessHandle:::
ProcessHandle#equals(Object):::Returns true if other object is non-null, is of the same implementation, and represents the same system process; otherwise it returns false.:::
ProcessHandle#compareTo(ProcessHandle):::Compares this ProcessHandle with the specified ProcessHandle for order:::
ProcessHandleImpl#initNative()::: process handle impl init native:::
ProcessHandleImpl#completion(long, boolean):::Returns a CompletableFuture that completes with process exit status when the process completes.:::completion->completions->get->while->newCompletion->new->ExitCompletion->if->completions->putIfAbsent->else->completions->replace->completions->get->if->processReaperExecutor->new->Runnable->execute->return
ProcessHandleImpl#onExit()::: process handle impl on exit:::if->this->equals->throw->new->IllegalStateException->return->ProcessHandleImpl->pid->completion->handleAsync
ProcessHandleImpl#waitForProcessExit0(long, boolean):::Wait for the process to exit, return the value:::
ProcessHandleImpl#get(long):::Returns a ProcessHandle for an existing native process.:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->start->isAlive0->return->Optional->new->ProcessHandleImpl->of->Optional->empty
ProcessHandleImpl#getInternal(long):::Returns a ProcessHandle for an existing native process known to be alive:::return->isAlive0->new->ProcessHandleImpl
ProcessHandleImpl#pid():::Returns the native process ID:::return
ProcessHandleImpl#current():::Returns the ProcessHandle for the current native process.:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return
ProcessHandleImpl#getCurrentPid0():::Return the pid of the current process.:::
ProcessHandleImpl#parent():::Returns a ProcessHandle for the parent process.:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->ppid->parent0->if->return->Optional->empty->return->get
ProcessHandleImpl#parent0(long, long):::Returns the parent of the native pid argument.:::
ProcessHandleImpl#getProcessPids0(long, long[], long[], long[]):::Returns the number of pids filled in to the array.:::
ProcessHandleImpl#destroyProcess(boolean):::Destroy the process for this ProcessHandle:::if->this->equals->throw->new->IllegalStateException->return->destroy0
ProcessHandleImpl#destroy0(long, long, boolean):::Signal the process to terminate:::
ProcessHandleImpl#destroy()::: process handle impl destroy:::return->destroyProcess
ProcessHandleImpl#destroyForcibly()::: process handle impl destroy forcibly:::return->destroyProcess
ProcessHandleImpl#supportsNormalTermination()::: process handle impl supports normal termination:::return
ProcessHandleImpl#isAlive():::Tests whether the process represented by this ProcessHandle is alive.:::start->isAlive0->return
ProcessHandleImpl#isAlive0(long):::Returns the process start time depending on whether the pid is alive:::
ProcessHandleImpl#children()::: process handle impl children:::return->children->filter
ProcessHandleImpl#children(long):::Returns a Stream of the children of a process or all processes.:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->size->childpids->starttimes->while->new->longArr->new->longArr->getProcessPids0->cpids->stimes->return->IntStream->range->new->ProcessHandleImpl->mapToObj
ProcessHandleImpl#descendants()::: process handle impl descendants:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->size->pids->ppids->starttimes->while->new->longArr->new->longArr->new->longArr->getProcessPids0->next->count->ppid->ppStart->for->i->do->for->i->while->cpids->stimes->return->IntStream->range->new->ProcessHandleImpl->mapToObj
ProcessHandleImpl#swap(long[], int, int)::: process handle impl swap:::v
ProcessHandleImpl#info()::: process handle impl info:::return->info
ProcessHandleImpl#compareTo(ProcessHandle)::: process handle impl compare to:::return->Long->compare
ProcessHandleImpl#toString()::: process handle impl to string:::return->Long->toString
ProcessHandleImpl#hashCode()::: process handle impl hash code:::return->Long->hashCode
ProcessHandleImpl#equals(Object)::: process handle impl equals:::if->return->if->other->return->return
ProcessHandleImpl.Info#initIDs():::Initialization of JNI fieldIDs.:::
ProcessHandleImpl.Info#info0(long):::Fill in this Info instance with information about the native process:::
ProcessHandleImpl.Info#info(long, long):::Returns the Info object with the fields from the process:::info->new->Info->info->info0->if->return
ProcessHandleImpl.Info#command()::: info command:::return->Optional->ofNullable
ProcessHandleImpl.Info#commandLine()::: info command line:::if->return->Optional->String->join->of->else->return->Optional->ofNullable
ProcessHandleImpl.Info#arguments()::: info arguments:::return->Optional->ofNullable
ProcessHandleImpl.Info#startInstant()::: info start instant:::return->Optional->Instant->ofEpochMilli->of->Optional->empty
ProcessHandleImpl.Info#totalCpuDuration()::: info total cpu duration:::return->Optional->Duration->ofNanos->of->Optional->empty
ProcessHandleImpl.Info#user()::: info user:::return->Optional->ofNullable
ProcessHandleImpl.Info#toString()::: info to string:::sb->new->StringBuilder->sb->append->if->sb->append->sb->user->append->if->if->sb->length->sb->append->sb->append->sb->append->if->if->sb->length->sb->append->sb->append->sb->Arrays->toString->append->if->if->sb->length->sb->append->sb->append->sb->append->if->if->sb->length->sb->append->sb->append->sb->startInstant->append->if->if->sb->length->sb->append->sb->append->sb->totalCpuDuration->toString->append->sb->append->return->sb->toString
ProcessImpl#newFileOutputStream(File, boolean):::Open a file for writing:::if->path->f->getPath->sm->System->getSecurityManager->if->sm->checkWrite->handle->openForAtomicAppend->fd->new->FileDescriptor->fdAccess->setHandle->return->AccessController->new->PrivilegedAction<FileOutputStream>->doPrivileged->else->return->new->FileOutputStream
ProcessImpl#start(String[], java.util.Map, String, ProcessBuilder.Redirect[], boolean)::: process impl start:::envblock->ProcessEnvironment->toEnvironmentBlock->f0->f1->f2->try->stdHandles->if->new->longArr->else->new->longArr->if->else->if->fdAccess->getHandle->else->if->fdAccess->getFd->getHandle->else->file->new->FileInputStream->fdAccess->f0->getFD->getHandle->if->else->if->fdAccess->getHandle->else->if->fdAccess->getFd->getHandle->else->file->append->newFileOutputStream->fdAccess->f1->getFD->getHandle->if->else->if->fdAccess->getHandle->else->if->fdAccess->getFd->getHandle->else->file->append->newFileOutputStream->fdAccess->f2->getFD->getHandle->p->new->ProcessImpl->if->if->fdAccess->getFd->setHandle->if->fdAccess->getFd->setHandle->if->fdAccess->getFd->setHandle->return->catch->finally->try->if->f0->close->catch->finally->try->if->f1->close->catch->finally->if->f2->close
ProcessImpl#getTokensFromCommand(String)::: process impl get tokens from command:::matchList->new->ArrayList<>->regexMatcher->matcher->while->regexMatcher->find->matchList->regexMatcher->group->add->return->matchList->matchList->size->new->StringArr->toArray
ProcessImpl#createCommandLine(int, String, String[])::: process impl create command line:::cmdbuf->new->StringBuilder->cmdbuf->append->for->i->return->cmdbuf->toString
ProcessImpl#unQuote(String):::Return the argument without quotes (1st and last) if present, else the arg.:::len->str->length->return->str->charAt->str->charAt->str->substring
ProcessImpl#needsEscaping(int, String)::: process impl needs escaping:::unquotedArg->unQuote->argIsQuoted->arg->equals->embeddedQuote->unquotedArg->indexOf->switch->if->throw->new->IllegalArgumentException->break->if->throw->new->IllegalArgumentException->break->break->if->testEscape->for->i->return
ProcessImpl#getExecutablePath(String)::: process impl get executable path:::name->unQuote->if->name->indexOf->throw->new->IllegalArgumentException->fileToRun->new->File->return->fileToRun->getPath
ProcessImpl#isExe(String):::An executable is any program that is an EXE or does not have an extension and the Windows createProcess will be looking for .exe:::file->new->File->upName->file->getName->toUpperCase->return->upName->endsWith->upName->indexOf
ProcessImpl#isShellFile(String)::: process impl is shell file:::upPath->executablePath->toUpperCase->return->upPath->endsWith->upPath->endsWith
ProcessImpl#quoteString(String)::: process impl quote string:::argbuf->arg->length->new->StringBuilder->return->argbuf->append->append->append->toString
ProcessImpl#countLeadingBackslash(int, CharSequence, int)::: process impl count leading backslash:::if->return->j->for->input->charAt->return
ProcessImpl#getOutputStream()::: process impl get output stream:::return
ProcessImpl#getInputStream()::: process impl get input stream:::return
ProcessImpl#getErrorStream()::: process impl get error stream:::return
ProcessImpl#getStillActive()::: process impl get still active:::
ProcessImpl#exitValue()::: process impl exit value:::exitCode->getExitCodeProcess->if->throw->new->IllegalThreadStateException->return
ProcessImpl#getExitCodeProcess(long)::: process impl get exit code process:::
ProcessImpl#waitFor()::: process impl wait for:::waitForInterruptibly->if->Thread->interrupted->throw->new->InterruptedException->return->exitValue
ProcessImpl#waitForInterruptibly(long)::: process impl wait for interruptibly:::
ProcessImpl#waitFor(long, TimeUnit)::: process impl wait for:::remainingNanos->unit->toNanos->if->getExitCodeProcess->return->if->return->deadline->System->nanoTime->do->msTimeout->toMillis->if->waitForTimeoutInterruptibly->if->Thread->interrupted->throw->new->InterruptedException->if->getExitCodeProcess->return->System->nanoTime->while->return->getExitCodeProcess
ProcessImpl#waitForTimeoutInterruptibly(long, long)::: process impl wait for timeout interruptibly:::
ProcessImpl#destroy()::: process impl destroy:::terminateProcess
ProcessImpl#onExit()::: process impl on exit:::return->ProcessHandleImpl->pid->completion->handleAsync
ProcessImpl#toHandle()::: process impl to handle:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return
ProcessImpl#supportsNormalTermination()::: process impl supports normal termination:::return
ProcessImpl#destroyForcibly()::: process impl destroy forcibly:::destroy->return
ProcessImpl#terminateProcess(long)::: process impl terminate process:::
ProcessImpl#pid()::: process impl pid:::return->processHandle->pid
ProcessImpl#getProcessId0(long)::: process impl get process id0:::
ProcessImpl#isAlive()::: process impl is alive:::return->isProcessAlive
ProcessImpl#isProcessAlive(long)::: process impl is process alive:::
ProcessImpl#toString():::The toString method returns a string consisting of the native process ID of the process and the exit value of the process.:::exitCode->getExitCodeProcess->return->new->StringBuilder->pid->append->append->append->append->toString
ProcessImpl#create(String, String, String, long[], boolean):::Create a process using the win32 function CreateProcess:::
ProcessImpl#openForAtomicAppend(String):::Opens a file for atomic append:::
ProcessImpl#closeHandle(long)::: process impl close handle:::
PublicMethods#merge(Method):::Merges new method with existing methods:::key->new->Key->existing->map->get->xLen->existing->length->merged->MethodList->merge->merged->length->if->map->put
PublicMethods#toArray():::Dumps methods to array.:::array->new->MethodArr->i->foreach->map->values->for->return
PublicMethods.Key#matches(Method, String, Class[])::: key matches:::return->method->getName->equals->Arrays->reflectionFactory->getExecutableSharedParameterTypes->equals
PublicMethods.Key#equals(Object)::: key equals:::if->return->if->return->that->return->Arrays->equals
PublicMethods.Key#hashCode()::: key hash code:::return->System->identityHashCode->Arrays->hashCode
PublicMethods.MethodList#filter(Method[], String, Class[], boolean)::: method list filter:::head->tail->foreach->if->Modifier->method->getModifiers->isStatic->Key->matches->if->new->MethodList->else->new->MethodList->return
PublicMethods.MethodList#merge(MethodList, MethodList):::This method should only be called with the head (possibly null) of a list of Method(s) that share the same (method name, parameter types) and another methodList that also contains Method(s) with the same and equal (method name, parameter types) as the 1st list:::for->ml->return
PublicMethods.MethodList#merge(MethodList, Method)::: method list merge:::dclass->method->getDeclaringClass->rtype->method->getReturnType->prev->for->l->if->new->MethodList->else->new->MethodList->return
PublicMethods.MethodList#length()::: method list length:::len->for->ml->return
PublicMethods.MethodList#getMostSpecific()::: method list get most specific:::m->rt->m->getReturnType->for->ml->return
Readable#read(java.nio.CharBuffer):::Attempts to read characters into the specified character buffer:::
Runnable#run():::When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread:::
Runtime#getRuntime():::Returns the runtime object associated with the current Java application:::return
Runtime#exit(int):::Terminates the currently running Java virtual machine by initiating its shutdown sequence:::security->System->getSecurityManager->if->security->checkExit->Shutdown->exit
Runtime#addShutdownHook(Thread):::Registers a new virtual-machine shutdown hook:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->ApplicationShutdownHooks->add
Runtime#removeShutdownHook(Thread):::De-registers a previously-registered virtual-machine shutdown hook.:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return->ApplicationShutdownHooks->remove
Runtime#halt(int):::Forcibly terminates the currently running Java virtual machine:::sm->System->getSecurityManager->if->sm->checkExit->Shutdown->beforeHalt->Shutdown->halt
Runtime#exec(String):::Executes the specified string command in a separate process:::return->exec
Runtime#exec(String, String[]):::Executes the specified string command in a separate process with the specified environment:::return->exec
Runtime#exec(String, String[], File):::Executes the specified string command in a separate process with the specified environment and working directory:::if->command->length->throw->new->IllegalArgumentException->st->new->StringTokenizer->cmdarray->st->countTokens->new->StringArr->for->i->st->hasMoreTokens->return->exec
Runtime#exec(String[]):::Executes the specified command and arguments in a separate process:::return->exec
Runtime#exec(String[], String[]):::Executes the specified command and arguments in a separate process with the specified environment:::return->exec
Runtime#exec(String[], String[], File):::Executes the specified command and arguments in a separate process with the specified environment and working directory:::return->new->ProcessBuilder->environment->directory->start
Runtime#availableProcessors():::Returns the number of processors available to the Java virtual machine:::
Runtime#freeMemory():::Returns the amount of free memory in the Java Virtual Machine:::
Runtime#totalMemory():::Returns the total amount of memory in the Java virtual machine:::
Runtime#maxMemory():::Returns the maximum amount of memory that the Java virtual machine will attempt to use:::
Runtime#gc():::Runs the garbage collector:::
Runtime#runFinalization():::Runs the finalization methods of any objects pending finalization:::SharedSecrets->getJavaLangRefAccess->runFinalization
Runtime#traceInstructions(boolean):::Not implemented, does nothing.:::
Runtime#traceMethodCalls(boolean):::Not implemented, does nothing.:::
Runtime#load(String):::Loads the native library specified by the filename argument:::Reflection->getCallerClass->load0
Runtime#load0(Class, String)::: runtime load0:::security->System->getSecurityManager->if->security->checkLink->if->new->File->isAbsolute->throw->new->UnsatisfiedLinkError->ClassLoader->loadLibrary
Runtime#loadLibrary(String):::Loads the native library specified by the libname argument:::Reflection->getCallerClass->loadLibrary0
Runtime#loadLibrary0(Class, String)::: runtime load library0:::security->System->getSecurityManager->if->security->checkLink->if->libname->indexOf->throw->new->UnsatisfiedLinkError->ClassLoader->loadLibrary
Runtime#version():::Returns the version of the Java Runtime Environment as a Version.:::if->VersionProps->versionNumbers->VersionProps->pre->VersionProps->build->VersionProps->optional->new->Version->return
Runtime.Version#parse(String):::Parses the given string as a valid version string containing a version number followed by pre-release and build information.:::if->throw->new->NullPointerException->if->isSimpleNumber->return->List->Integer->parseInt->of->Optional->empty->Optional->empty->Optional->empty->new->Version->m->matcher->if->m->matches->throw->new->IllegalArgumentException->split->m->group->split->version->new->IntegerArr->for->i->pre->Optional->m->group->ofNullable->b->m->group->build->Optional->empty->Optional->Integer->parseInt->of->optional->Optional->m->group->ofNullable->if->build->isPresent->if->m->group->if->optional->isPresent->if->pre->isPresent->throw->new->IllegalArgumentException->else->throw->new->IllegalArgumentException->else->if->optional->isPresent->pre->isPresent->throw->new->IllegalArgumentException->return->List->of->new->Version
Runtime.Version#isSimpleNumber(String)::: version is simple number:::for->i->s->length->return
Runtime.Version#feature():::Returns the value of the feature element of the version number.:::return->version->get
Runtime.Version#interim():::Returns the value of the interim element of the version number, or zero if it is absent.:::return->version->size->version->get
Runtime.Version#update():::Returns the value of the update element of the version number, or zero if it is absent.:::return->version->size->version->get
Runtime.Version#patch():::Returns the value of the patch element of the version number, or zero if it is absent.:::return->version->size->version->get
Runtime.Version#major():::Returns the value of the major element of the version number.:::return->feature
Runtime.Version#minor():::Returns the value of the minor element of the version number, or zero if it is absent.:::return->interim
Runtime.Version#security():::Returns the value of the security element of the version number, or zero if it is absent.:::return->update
Runtime.Version#version():::Returns an unmodifiable java.util.List List of the integers represented in the version number:::return
Runtime.Version#pre():::Returns the optional pre-release information.:::return
Runtime.Version#build():::Returns the build number.:::return
Runtime.Version#optional():::Returns optional additional identifying build information.:::return
Runtime.Version#compareTo(Version):::Compares this version to another:::return->compare
Runtime.Version#compareToIgnoreOptional(Version):::Compares this version to another disregarding optional build information:::return->compare
Runtime.Version#compare(Version, boolean)::: version compare:::if->throw->new->NullPointerException->ret->compareVersion->if->return->comparePre->if->return->compareBuild->if->return->if->return->compareOptional->return
Runtime.Version#compareVersion(Version)::: version compare version:::size->version->size->oSize->obj->version->size->min->Math->min->for->i->return
Runtime.Version#comparePre(Version)::: version compare pre:::oPre->obj->pre->if->pre->isPresent->if->oPre->isPresent->return->else->if->oPre->isPresent->return->val->pre->get->oVal->oPre->get->if->val->matches->return->oVal->matches->new->BigInteger->new->BigInteger->compareTo->else->return->oVal->matches->val->compareTo->return
Runtime.Version#compareBuild(Version)::: version compare build:::oBuild->obj->build->if->oBuild->isPresent->return->build->isPresent->build->get->oBuild->get->compareTo->else->if->build->isPresent->return->return
Runtime.Version#compareOptional(Version)::: version compare optional:::oOpt->obj->optional->if->optional->isPresent->if->oOpt->isPresent->return->else->if->oOpt->isPresent->return->return->optional->get->oOpt->get->compareTo->return
Runtime.Version#toString():::Returns a string representation of this version.:::sb->version->stream->Object->toString->map->Collectors->joining->collect->new->StringBuilder->pre->sb->append->append->ifPresent->if->build->isPresent->sb->append->build->get->append->if->optional->isPresent->sb->append->optional->get->append->else->if->optional->isPresent->sb->pre->isPresent->append->sb->optional->get->append->return->sb->toString
Runtime.Version#equals(Object):::Determines whether this Version is equal to another object:::ret->equalsIgnoreOptional->if->return->that->return->this->optional->that->optional->equals
Runtime.Version#equalsIgnoreOptional(Object):::Determines whether this Version is equal to another disregarding optional build information:::if->return->if->return->that->return->this->version->that->version->equals->this->pre->that->pre->equals->this->build->that->build->equals
Runtime.Version#hashCode():::Returns the hash code of this version.:::h->p->version->hashCode->pre->hashCode->build->hashCode->optional->hashCode->return
SecurityManager#getClassContext():::Returns the current execution stack as an array of classes:::
SecurityManager#getSecurityContext():::Creates an object that encapsulates the current execution environment:::return->AccessController->getContext
SecurityManager#checkPermission(Permission):::Throws a SecurityException if the requested access, specified by the given permission, is not permitted based on the security policy currently in effect:::checkPermission
SecurityManager#checkPermission(Permission, Object):::Throws a SecurityException if the specified security context is denied access to the resource specified by the given permission:::if->checkPermission->else->throw->new->SecurityException
SecurityManager#checkCreateClassLoader():::Throws a SecurityException if the calling thread is not allowed to create a new class loader:::checkPermission
SecurityManager#getRootGroup()::: security manager get root group:::root->Thread->currentThread->getThreadGroup->while->root->getParent->root->getParent->return
SecurityManager#checkAccess(Thread):::Throws a SecurityException if the calling thread is not allowed to modify the thread argument:::if->throw->new->NullPointerException->if->t->getThreadGroup->checkPermission->else
SecurityManager#checkAccess(ThreadGroup):::Throws a SecurityException if the calling thread is not allowed to modify the thread group argument:::if->throw->new->NullPointerException->if->checkPermission->else
SecurityManager#checkExit(int):::Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code:::new->RuntimePermission->checkPermission
SecurityManager#checkExec(String):::Throws a SecurityException if the calling thread is not allowed to create a subprocess:::f->new->File->if->f->isAbsolute->new->FilePermission->checkPermission->else->new->FilePermission->checkPermission
SecurityManager#checkLink(String):::Throws a SecurityException if the calling thread is not allowed to dynamic link the library code specified by the string argument file:::if->throw->new->NullPointerException->new->RuntimePermission->checkPermission
SecurityManager#checkRead(FileDescriptor):::Throws a SecurityException if the calling thread is not allowed to read from the specified file descriptor:::if->throw->new->NullPointerException->new->RuntimePermission->checkPermission
SecurityManager#checkRead(String):::Throws a SecurityException if the calling thread is not allowed to read the file specified by the string argument:::new->FilePermission->checkPermission
SecurityManager#checkRead(String, Object):::Throws a SecurityException if the specified security context is not allowed to read the file specified by the string argument:::new->FilePermission->checkPermission
SecurityManager#checkWrite(FileDescriptor):::Throws a SecurityException if the calling thread is not allowed to write to the specified file descriptor:::if->throw->new->NullPointerException->new->RuntimePermission->checkPermission
SecurityManager#checkWrite(String):::Throws a SecurityException if the calling thread is not allowed to write to the file specified by the string argument:::new->FilePermission->checkPermission
SecurityManager#checkDelete(String):::Throws a SecurityException if the calling thread is not allowed to delete the specified file:::new->FilePermission->checkPermission
SecurityManager#checkConnect(String, int):::Throws a SecurityException if the calling thread is not allowed to open a socket connection to the specified host and port number:::if->throw->new->NullPointerException->if->host->startsWith->host->indexOf->if->new->SocketPermission->checkPermission->else->new->SocketPermission->checkPermission
SecurityManager#checkConnect(String, int, Object):::Throws a SecurityException if the specified security context is not allowed to open a socket connection to the specified host and port number:::if->throw->new->NullPointerException->if->host->startsWith->host->indexOf->if->new->SocketPermission->checkPermission->else->new->SocketPermission->checkPermission
SecurityManager#checkListen(int):::Throws a SecurityException if the calling thread is not allowed to wait for a connection request on the specified local port number:::new->SocketPermission->checkPermission
SecurityManager#checkAccept(String, int):::Throws a SecurityException if the calling thread is not permitted to accept a socket connection from the specified host and port number:::if->throw->new->NullPointerException->if->host->startsWith->host->indexOf->new->SocketPermission->checkPermission
SecurityManager#checkMulticast(InetAddress):::Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast:::host->maddr->getHostAddress->if->host->startsWith->host->indexOf->new->SocketPermission->checkPermission
SecurityManager#checkMulticast(InetAddress, byte):::Throws a SecurityException if the calling thread is not allowed to use (join/leave/send/receive) IP multicast:::host->maddr->getHostAddress->if->host->startsWith->host->indexOf->new->SocketPermission->checkPermission
SecurityManager#checkPropertiesAccess():::Throws a SecurityException if the calling thread is not allowed to access or modify the system properties:::new->PropertyPermission->checkPermission
SecurityManager#checkPropertyAccess(String):::Throws a SecurityException if the calling thread is not allowed to access the system property with the specified key name:::new->PropertyPermission->checkPermission
SecurityManager#checkPrintJobAccess():::Throws a SecurityException if the calling thread is not allowed to initiate a print job request:::new->RuntimePermission->checkPermission
SecurityManager#getPackages(String)::: security manager get packages:::packages->if->p->equals->tok->new->java.util.StringTokenizer->n->tok->countTokens->if->new->StringArr->i->while->tok->hasMoreElements->s->tok->nextToken->trim->if->new->StringArr->return
SecurityManager#addNonExportedPackages(ModuleLayer):::Record the non-exported packages of the modules in the given layer:::bootModules->ModuleLoaderMap->bootModules->platformModules->ModuleLoaderMap->platformModules->layer->modules->stream->Module->getDescriptor->map->bootModules->md->name->contains->platformModules->md->name->contains->filter->SecurityManager->nonExportedPkgs->map->Set->stream->flatMap->nonExportedPkgs->put->forEach
SecurityManager#invalidatePackageAccessCache():::Called by java.security.Security:::synchronized->synchronized
SecurityManager#nonExportedPkgs(ModuleDescriptor):::Returns the non-exported packages of the specified module.:::pkgs->md->packages->new->HashSet<>->md->exports->stream->p->isQualified->filter->Exports->source->map->pkgs->remove->forEach->md->opens->stream->p->isQualified->filter->Opens->source->map->pkgs->remove->forEach->return
SecurityManager#checkPackageAccess(String):::Throws a SecurityException if the calling thread is not allowed to access the specified package:::Objects->requireNonNull->if->nonExportedPkgs->containsKey->new->RuntimePermission->checkPermission->return->restrictedPkgs->synchronized->if->tmpPropertyStr->AccessController->new->PrivilegedAction<>->doPrivileged->getPackages->plen->pkg->length->foreach->rlast->restrictedPkg->length->if->pkg->startsWith->restrictedPkg->startsWith->restrictedPkg->charAt->new->RuntimePermission->checkPermission->break
SecurityManager#checkPackageDefinition(String):::Throws a SecurityException if the calling thread is not allowed to define classes in the specified package:::Objects->requireNonNull->if->nonExportedPkgs->containsKey->new->RuntimePermission->checkPermission->return->pkgs->synchronized->if->tmpPropertyStr->AccessController->new->PrivilegedAction<>->doPrivileged->getPackages->foreach->if->pkg->startsWith->restrictedPkg->equals->new->RuntimePermission->checkPermission->break
SecurityManager#checkSetFactory():::Throws a SecurityException if the calling thread is not allowed to set the socket factory used by ServerSocket or Socket, or the stream handler factory used by URL:::new->RuntimePermission->checkPermission
SecurityManager#checkSecurityAccess(String):::Determines whether the permission with the specified permission target name should be granted or denied:::new->SecurityPermission->checkPermission
SecurityManager#getThreadGroup():::Returns the thread group into which to instantiate any new thread being created at the time this is being called:::return->Thread->currentThread->getThreadGroup
Short#toString(short):::Returns a new String object representing the specified short:::return->Integer->toString
Short#parseShort(String, int):::Parses the string argument as a signed short in the radix specified by the second argument:::i->Integer->parseInt->if->throw->new->NumberFormatException->return
Short#parseShort(String):::Parses the string argument as a signed decimal short:::return->parseShort
Short#valueOf(String, int):::Returns a Short object holding the value extracted from the specified String when parsed with the radix given by the second argument:::return->parseShort->valueOf
Short#valueOf(String):::Returns a Short object holding the value given by the specified String:::return->valueOf
Short#valueOf(short):::Returns a Short instance representing the specified short value:::offset->sAsInt->if->return->return->new->Short
Short#decode(String):::Decodes a String into a Short:::i->Integer->decode->if->throw->new->NumberFormatException->return->valueOf
Short#byteValue():::Returns the value of this Short as a byte after a narrowing primitive conversion.:::return
Short#shortValue():::Returns the value of this Short as a short.:::return
Short#intValue():::Returns the value of this Short as an int after a widening primitive conversion.:::return
Short#longValue():::Returns the value of this Short as a long after a widening primitive conversion.:::return
Short#floatValue():::Returns the value of this Short as a float after a widening primitive conversion.:::return
Short#doubleValue():::Returns the value of this Short as a double after a widening primitive conversion.:::return
Short#toString():::Returns a String object representing this Short's value:::return->Integer->toString
Short#hashCode():::Returns a hash code for this Short; equal to the result of invoking intValue().:::return->Short->hashCode
Short#hashCode(short):::Returns a hash code for a short value; compatible with Short.hashCode().:::return
Short#equals(Object):::Compares this object to the specified object:::if->return->shortValue->return
Short#compareTo(Short):::Compares two Short objects numerically.:::return->compare
Short#compare(short, short):::Compares two short values numerically:::return
Short#compareUnsigned(short, short):::Compares two short values numerically treating the values as unsigned.:::return->Short->toUnsignedInt->Short->toUnsignedInt
Short#reverseBytes(short):::Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified short value.:::return
Short#toUnsignedInt(short):::Converts the argument to an int by an unsigned conversion:::return
Short#toUnsignedLong(short):::Converts the argument to a long by an unsigned conversion:::return
Shutdown#add(int, boolean, Runnable):::Add a new system shutdown hook:::if->throw->new->IllegalArgumentException->synchronized->if->throw->new->InternalError->if->if->throw->new->IllegalStateException->else->if->VM->isShutdown->throw->new->IllegalStateException
Shutdown#runHooks()::: shutdown run hooks:::synchronized->if->VM->isShutdown->return->for->i->VM->shutdown
Shutdown#beforeHalt()::: shutdown before halt:::
Shutdown#halt(int)::: shutdown halt:::synchronized->halt0
Shutdown#halt0(int)::: shutdown halt0:::
Shutdown#exit(int)::: shutdown exit:::synchronized->if->VM->isShutdown->halt->synchronized->beforeHalt->runHooks->halt
Shutdown#shutdown()::: shutdown shutdown:::synchronized->runHooks
StackFrameInfo#declaringClass()::: stack frame info declaring class:::return->JLIA->getDeclaringClass
StackFrameInfo#getClassName()::: stack frame info get class name:::return->declaringClass->getName
StackFrameInfo#getDeclaringClass()::: stack frame info get declaring class:::ensureRetainClassRefEnabled->return->declaringClass
StackFrameInfo#getMethodName()::: stack frame info get method name:::return->JLIA->getName
StackFrameInfo#getMethodType()::: stack frame info get method type:::ensureRetainClassRefEnabled->return->JLIA->getMethodType
StackFrameInfo#getDescriptor()::: stack frame info get descriptor:::return->JLIA->getMethodDescriptor
StackFrameInfo#getByteCodeIndex()::: stack frame info get byte code index:::if->isNativeMethod->return->return
StackFrameInfo#getFileName()::: stack frame info get file name:::return->toStackTraceElement->getFileName
StackFrameInfo#getLineNumber()::: stack frame info get line number:::if->isNativeMethod->return->return->toStackTraceElement->getLineNumber
StackFrameInfo#isNativeMethod()::: stack frame info is native method:::return->JLIA->isNative
StackFrameInfo#toString()::: stack frame info to string:::return->toStackTraceElement->toString
StackFrameInfo#toStackTraceElement()::: stack frame info to stack trace element:::s->if->synchronized->if->StackTraceElement->of->return
StackFrameInfo#ensureRetainClassRefEnabled()::: stack frame info ensure retain class ref enabled:::if->throw->new->UnsupportedOperationException
StackStreamFactory#makeStackTraverser(StackWalker, Function, ? extends T>)::: stack stream factory make stack traverser:::if->walker->hasLocalsOperandsOption->return->new->LiveStackInfoTraverser<>->else->return->new->StackFrameTraverser<>
StackStreamFactory#makeCallerFinder(StackWalker):::Gets a stack stream to find caller class.:::return->new->CallerClassFinder
StackStreamFactory.AbstractStackWalker#toStackWalkMode(StackWalker, int)::: abstract stack walker to stack walk mode:::newMode->if->walker->hasOption->if->walker->hasLocalsOperandsOption->return
StackStreamFactory.AbstractStackWalker#consumeFrames():::A callback method to consume the stack frames:::
StackStreamFactory.AbstractStackWalker#initFrameBuffer():::Initialize FrameBuffer:::
StackStreamFactory.AbstractStackWalker#batchSize(int):::Returns the suggested next batch size:::
StackStreamFactory.AbstractStackWalker#getNextBatchSize()::: abstract stack walker get next batch size:::lastBatchSize->frameBuffer->curBatchFrameCount->nextBatchSize->batchSize->if->println->return
StackStreamFactory.AbstractStackWalker#checkState(WalkerState)::: abstract stack walker check state:::if->Thread->currentThread->throw->Thread->currentThread->getName->thread->getName->new->IllegalStateException->switch->if->throw->new->IllegalStateException->break->if->throw->new->IllegalStateException->break->if->throw->new->IllegalStateException
StackStreamFactory.AbstractStackWalker#close()::: abstract stack walker close:::
StackStreamFactory.AbstractStackWalker#walk()::: abstract stack walker walk:::checkState->try->return->beginStackWalk->catch->finally->close
StackStreamFactory.AbstractStackWalker#skipReflectionFrames()::: abstract stack walker skip reflection frames:::return->walker->hasOption->walker->hasOption
StackStreamFactory.AbstractStackWalker#peekFrame()::: abstract stack walker peek frame:::while->frameBuffer->isActive->if->frameBuffer->isEmpty->getNextBatch->else->c->frameBuffer->get->if->skipReflectionFrames->isReflectionFrame->if->frameBuffer->getIndex->println->frameBuffer->next->continue->else->return->return
StackStreamFactory.AbstractStackWalker#doStackWalk(long, int, int, int, int)::: abstract stack walker do stack walk:::checkState->frameBuffer->check->if->format->frameBuffer->setBatch->return->consumeFrames
StackStreamFactory.AbstractStackWalker#getNextBatch()::: abstract stack walker get next batch:::nextBatchSize->Math->getNextBatchSize->min->if->frameBuffer->isActive->if->format->frameBuffer->freeze->return->return->fetchStackFrames
StackStreamFactory.AbstractStackWalker#nextFrame()::: abstract stack walker next frame:::if->hasNext->return->c->frameBuffer->next->return
StackStreamFactory.AbstractStackWalker#hasNext()::: abstract stack walker has next:::return->peekFrame
StackStreamFactory.AbstractStackWalker#beginStackWalk():::Begin stack walking - pass the allocated arrays to the VM to fill in stack frame information:::initFrameBuffer->return->frameBuffer->curBatchFrameCount->frameBuffer->startIndex->frameBuffer->frames->callStackWalk
StackStreamFactory.AbstractStackWalker#fetchStackFrames(int)::: abstract stack walker fetch stack frames:::startIndex->frameBuffer->startIndex->frameBuffer->resize->endIndex->frameBuffer->frames->fetchStackFrames->if->frameBuffer->startIndex->format->numFrames->if->frameBuffer->freeze->else->frameBuffer->setBatch->return
StackStreamFactory.AbstractStackWalker#callStackWalk(long, int, int, int, T[]):::Begins stack walking:::
StackStreamFactory.AbstractStackWalker#fetchStackFrames(long, long, int, int, T[]):::Fetch the next batch of stack frames.:::
StackStreamFactory.StackFrameTraverser.StackFrameBuffer#frames()::: stack frame buffer frames:::return
StackStreamFactory.StackFrameTraverser.StackFrameBuffer#resize(int, int)::: stack frame buffer resize:::if->isActive->throw->new->IllegalStateException->size->if->newFrames->new->StackFrameInfoArr->System->arraycopy->for->i
StackStreamFactory.StackFrameTraverser.StackFrameBuffer#nextStackFrame()::: stack frame buffer next stack frame:::if->isEmpty->throw->new->NoSuchElementException->frame->return
StackStreamFactory.StackFrameTraverser.StackFrameBuffer#at(int)::: stack frame buffer at:::return->declaringClass
StackStreamFactory.StackFrameTraverser#nextStackFrame():::Returns next StackFrame object in the current batch of stack frames; or null if no more stack frame.:::if->hasNext->return->frame->frameBuffer->nextStackFrame->return
StackStreamFactory.StackFrameTraverser#consumeFrames()::: stack frame traverser consume frames:::checkState->stream->StreamSupport->stream->if->return->function->apply->else->throw->new->UnsupportedOperationException
StackStreamFactory.StackFrameTraverser#initFrameBuffer()::: stack frame traverser init frame buffer:::getNextBatchSize->new->StackFrameBuffer
StackStreamFactory.StackFrameTraverser#batchSize(int)::: stack frame traverser batch size:::if->initialBatchSize->Math->walker->estimateDepth->max->return->Math->min->else->if->return->else->return->Math->min
StackStreamFactory.StackFrameTraverser#trySplit()::: stack frame traverser try split:::return
StackStreamFactory.StackFrameTraverser#estimateSize()::: stack frame traverser estimate size:::return
StackStreamFactory.StackFrameTraverser#characteristics()::: stack frame traverser characteristics:::return
StackStreamFactory.StackFrameTraverser#forEachRemaining(Consumer)::: stack frame traverser for each remaining:::checkState->for->n
StackStreamFactory.StackFrameTraverser#tryAdvance(Consumer)::: stack frame traverser try advance:::checkState->index->frameBuffer->getIndex->if->hasNext->frame->nextStackFrame->action->accept->if->println->return->if->println->return
StackStreamFactory.CallerClassFinder.ClassBuffer#frames()::: class buffer frames:::return
StackStreamFactory.CallerClassFinder.ClassBuffer#at(int)::: class buffer at:::return
StackStreamFactory.CallerClassFinder.ClassBuffer#resize(int, int):::Resizes the buffers for VM to fill in the next batch of stack frames:::if->isActive->throw->new->IllegalStateException->size->if->prev->new->Class<?>Arr->System->arraycopy
StackStreamFactory.CallerClassFinder#findCaller()::: caller class finder find caller:::walk->return
StackStreamFactory.CallerClassFinder#consumeFrames()::: caller class finder consume frames:::checkState->n->frames->new->Class<?>Arr->while->nextFrame->if->isMethodHandleFrame->continue->if->isReflectionFrame->continue->if->throw->new->IllegalCallerException->return
StackStreamFactory.CallerClassFinder#initFrameBuffer()::: caller class finder init frame buffer:::getNextBatchSize->new->ClassBuffer
StackStreamFactory.CallerClassFinder#batchSize(int)::: caller class finder batch size:::return
StackStreamFactory.CallerClassFinder#getNextBatchSize()::: caller class finder get next batch size:::return
StackStreamFactory.LiveStackInfoTraverser.LiveStackFrameBuffer#frames()::: live stack frame buffer frames:::return
StackStreamFactory.LiveStackInfoTraverser.LiveStackFrameBuffer#resize(int, int)::: live stack frame buffer resize:::if->isActive->throw->new->IllegalStateException->size->if->newFrames->new->LiveStackFrameInfoArr->System->arraycopy->for->i->startIndex
StackStreamFactory.LiveStackInfoTraverser.LiveStackFrameBuffer#nextStackFrame()::: live stack frame buffer next stack frame:::if->isEmpty->throw->new->NoSuchElementException->frame->return
StackStreamFactory.LiveStackInfoTraverser.LiveStackFrameBuffer#at(int)::: live stack frame buffer at:::return->declaringClass
StackStreamFactory.LiveStackInfoTraverser#initFrameBuffer()::: live stack info traverser init frame buffer:::getNextBatchSize->new->LiveStackFrameBuffer
StackStreamFactory.FrameBuffer#frames()::: frame buffer frames:::
StackStreamFactory.FrameBuffer#resize(int, int):::Resizes the buffers for VM to fill in the next batch of stack frames:::
StackStreamFactory.FrameBuffer#at(int):::Return the class at the given position in the current batch.:::
StackStreamFactory.FrameBuffer#startIndex()::: frame buffer start index:::return
StackStreamFactory.FrameBuffer#nextStackFrame():::Returns next StackFrame object in the current batch of stack frames:::throw->new->InternalError
StackStreamFactory.FrameBuffer#curBatchFrameCount()::: frame buffer cur batch frame count:::return
StackStreamFactory.FrameBuffer#isEmpty()::: frame buffer is empty:::return
StackStreamFactory.FrameBuffer#freeze()::: frame buffer freeze:::
StackStreamFactory.FrameBuffer#isActive()::: frame buffer is active:::return
StackStreamFactory.FrameBuffer#next():::Gets the class at the current frame and move to the next frame.:::if->isEmpty->throw->new->NoSuchElementException->c->at->if->index->Objects->toString->format->return
StackStreamFactory.FrameBuffer#get():::Gets the class at the current frame.:::if->isEmpty->throw->new->NoSuchElementException->return->at
StackStreamFactory.FrameBuffer#getIndex()::: frame buffer get index:::return
StackStreamFactory.FrameBuffer#setBatch(int, int, int)::: frame buffer set batch:::if->throw->new->IllegalArgumentException->if->for->i
StackStreamFactory.FrameBuffer#check(int)::: frame buffer check:::index->if->throw->new->IllegalStateException
StackStreamFactory#checkStackWalkModes()::: stack stream factory check stack walk modes:::
StackStreamFactory#init()::: stack stream factory init:::if->checkStackWalkModes->throw->new->InternalError->classes->new->HashSet<>->classes->add->classes->add->classes->add->return
StackStreamFactory#filterStackWalkImpl(Class)::: stack stream factory filter stack walk impl:::return->stackWalkImplClasses->contains->c->getName->startsWith
StackStreamFactory#isMethodHandleFrame(Class)::: stack stream factory is method handle frame:::return->c->getName->startsWith
StackStreamFactory#isReflectionFrame(Class)::: stack stream factory is reflection frame:::return->isAssignableFrom->isAssignableFrom->c->getName->startsWith
StackTraceElement#getFileName():::Returns the name of the source file containing the execution point represented by this stack trace element:::return
StackTraceElement#getLineNumber():::Returns the line number of the source line containing the execution point represented by this stack trace element:::return
StackTraceElement#getModuleName():::Returns the module name of the module containing the execution point represented by this stack trace element.:::return
StackTraceElement#getModuleVersion():::Returns the module version of the module containing the execution point represented by this stack trace element.:::return
StackTraceElement#getClassLoaderName():::Returns the name of the class loader of the class containing the execution point represented by this stack trace element.:::return
StackTraceElement#getClassName():::Returns the fully qualified name of the class containing the execution point represented by this stack trace element.:::return
StackTraceElement#getMethodName():::Returns the name of the method containing the execution point represented by this stack trace element:::return
StackTraceElement#isNativeMethod():::Returns true if the method containing the execution point represented by this stack trace element is a native method.:::return
StackTraceElement#toString():::Returns a string representation of this stack trace element.:::s->if->dropClassLoaderName->classLoaderName->isEmpty->if->moduleName->isEmpty->if->dropModuleVersion->moduleVersion->isEmpty->s->isEmpty->return->isNativeMethod
StackTraceElement#equals(Object):::Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance:::if->return->if->return->e->return->Objects->equals->Objects->equals->Objects->equals->equals->Objects->equals->Objects->equals
StackTraceElement#hashCode():::Returns a hash code value for this stack trace element.:::result->declaringClass->hashCode->methodName->hashCode->Objects->hashCode->Objects->hashCode->Objects->hashCode->Objects->hashCode->return
StackTraceElement#computeFormat():::Called from of() methods to set the 'format' bitmap using the Class reference stored in declaringClassObject, and then clear the reference:::try->cls->loader->cls->getClassLoader0->m->cls->getModule->bits->if->if->isHashedInJavaBase->catch->finally
StackTraceElement#dropClassLoaderName()::: stack trace element drop class loader name:::return
StackTraceElement#dropModuleVersion()::: stack trace element drop module version:::return
StackTraceElement#isHashedInJavaBase(Module):::Returns true if the module is hashed with java.base:::if->VM->isModuleSystemInited->return->return->ModuleLayer->boot->m->getLayer->HashedModules->contains
StackTraceElement.HashedModules#hashedModules()::: hashed modules hashed modules:::resolvedModule->ModuleLayer->boot->configuration->findModule->mref->resolvedModule->get->reference->hashes->recordedHashes->if->names->hashes->names->new->HashSet<>->names->add->return->return->Set->of
StackTraceElement.HashedModules#contains(Module)::: hashed modules contains:::return->HASHED_MODULES->m->getName->contains
StackTraceElement#of(Throwable, int)::: stack trace element of:::stackTrace->new->StackTraceElementArr->for->i->initStackTraceElements->foreach->ste->computeFormat->return
StackTraceElement#of(StackFrameInfo)::: stack trace element of:::ste->new->StackTraceElement->initStackTraceElement->ste->computeFormat->return
StackTraceElement#initStackTraceElements(StackTraceElement[], Throwable)::: stack trace element init stack trace elements:::
StackTraceElement#initStackTraceElement(StackTraceElement, StackFrameInfo)::: stack trace element init stack trace element:::
StackWalker.StackFrame#getClassName():::Gets the binary name of the declaring class of the method represented by this stack frame.:::
StackWalker.StackFrame#getMethodName():::Gets the name of the method represented by this stack frame.:::
StackWalker.StackFrame#getDeclaringClass():::Gets the declaring Class for the method represented by this stack frame.:::
StackWalker.StackFrame#getMethodType():::Returns the MethodType representing the parameter types and the return type for the method represented by this stack frame.:::throw->new->UnsupportedOperationException
StackWalker.StackFrame#getDescriptor():::Returns the descriptor of the method represented by this stack frame as defined by The Java Virtual Machine Specification.:::throw->new->UnsupportedOperationException
StackWalker.StackFrame#getByteCodeIndex():::Returns the index to the code array of the Code attribute containing the execution point represented by this stack frame:::
StackWalker.StackFrame#getFileName():::Returns the name of the source file containing the execution point represented by this stack frame:::
StackWalker.StackFrame#getLineNumber():::Returns the line number of the source line containing the execution point represented by this stack frame:::
StackWalker.StackFrame#isNativeMethod():::Returns true if the method containing the execution point represented by this stack frame is a native method.:::
StackWalker.StackFrame#toStackTraceElement():::Gets a StackTraceElement for this stack frame.:::
StackWalker#getInstance():::Returns a StackWalker instance:::return
StackWalker#getInstance(Option):::Returns a StackWalker instance with the given option specifying the stack frame information it can access:::return->EnumSet->Objects->requireNonNull->of->getInstance
StackWalker#getInstance(Set):::Returns a StackWalker instance with the given options specifying the stack frame information it can access:::if->options->isEmpty->return->optionSet->toEnumSet->checkPermission->return->new->StackWalker
StackWalker#getInstance(Set, int):::Returns a StackWalker instance with the given options specifying the stack frame information it can access:::if->throw->new->IllegalArgumentException->optionSet->toEnumSet->checkPermission->return->new->StackWalker
StackWalker#checkPermission(Set)::: stack walker check permission:::Objects->requireNonNull->sm->System->getSecurityManager->if->if->options->contains->sm->new->RuntimePermission->checkPermission
StackWalker#toEnumSet(Set)::: stack walker to enum set:::Objects->requireNonNull->if->options->isEmpty->return->else->return->EnumSet->copyOf
StackWalker#walk(Function, ? extends T>):::Applies the given function to the stream of StackFrames for the current thread, traversing from the top frame of the stack, which is the method calling this walk method:::Objects->requireNonNull->return->StackStreamFactory->makeStackTraverser->walk
StackWalker#forEach(Consumer):::Performs the given action on each element of StackFrame stream of the current thread, traversing from the top frame of the stack, which is the method calling this forEach method:::Objects->requireNonNull->StackStreamFactory->s->forEach->return->makeStackTraverser->walk
StackWalker#getCallerClass():::Gets the Class object of the caller who invoked the method that invoked getCallerClass:::if->throw->new->UnsupportedOperationException->return->StackStreamFactory->makeCallerFinder->findCaller
StackWalker#newInstance(Set, ExtendedOption)::: stack walker new instance:::optionSet->toEnumSet->checkPermission->return->new->StackWalker
StackWalker#estimateDepth()::: stack walker estimate depth:::return
StackWalker#hasOption(Option)::: stack walker has option:::return->options->contains
StackWalker#hasLocalsOperandsOption()::: stack walker has locals operands option:::return
StrictMath#sin(double):::Returns the trigonometric sine of an angle:::
StrictMath#cos(double):::Returns the trigonometric cosine of an angle:::
StrictMath#tan(double):::Returns the trigonometric tangent of an angle:::
StrictMath#asin(double):::Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2:::
StrictMath#acos(double):::Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi:::
StrictMath#atan(double):::Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2:::
StrictMath#toRadians(double):::Converts an angle measured in degrees to an approximately equivalent angle measured in radians:::return
StrictMath#toDegrees(double):::Converts an angle measured in radians to an approximately equivalent angle measured in degrees:::return
StrictMath#exp(double):::Returns Euler's number e raised to the power of a double value:::return->compute
StrictMath#log(double):::Returns the natural logarithm (base e) of a double value:::
StrictMath#log10(double):::Returns the base 10 logarithm of a double value:::
StrictMath#sqrt(double):::Returns the correctly rounded positive square root of a double value:::
StrictMath#cbrt(double):::Returns the cube root of a double value:::return->compute
StrictMath#IEEEremainder(double, double):::Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard:::
StrictMath#ceil(double):::Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer:::return->floorOrCeil
StrictMath#floor(double):::Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer:::return->floorOrCeil
StrictMath#floorOrCeil(double, double, double, double):::Internal method to share logic between floor and ceil.:::exponent->Math->getExponent->if->return->else->if->return->doppel->Double->doubleToRawLongBits->mask->if->return->else->result->Double->longBitsToDouble->if->return
StrictMath#rint(double):::Returns the double value that is closest in value to the argument and is equal to a mathematical integer:::twoToThe52->sign->Math->copySign->Math->abs->if->return
StrictMath#atan2(double, double):::Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta):::
StrictMath#pow(double, double):::Returns the value of the first argument raised to the power of the second argument:::return->compute
StrictMath#round(float):::Returns the closest int to the argument, with ties rounding to positive infinity:::return->Math->round
StrictMath#round(double):::Returns the closest long to the argument, with ties rounding to positive infinity:::return->Math->round
StrictMath#random():::Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0:::return->nextDouble
StrictMath#addExact(int, int):::Returns the sum of its arguments, throwing an exception if the result overflows an int.:::return->Math->addExact
StrictMath#addExact(long, long):::Returns the sum of its arguments, throwing an exception if the result overflows a long.:::return->Math->addExact
StrictMath#subtractExact(int, int):::Returns the difference of the arguments, throwing an exception if the result overflows an int.:::return->Math->subtractExact
StrictMath#subtractExact(long, long):::Returns the difference of the arguments, throwing an exception if the result overflows a long.:::return->Math->subtractExact
StrictMath#multiplyExact(int, int):::Returns the product of the arguments, throwing an exception if the result overflows an int.:::return->Math->multiplyExact
StrictMath#multiplyExact(long, int):::Returns the product of the arguments, throwing an exception if the result overflows a long.:::return->Math->multiplyExact
StrictMath#multiplyExact(long, long):::Returns the product of the arguments, throwing an exception if the result overflows a long.:::return->Math->multiplyExact
StrictMath#toIntExact(long):::Returns the value of the long argument; throwing an exception if the value overflows an int.:::return->Math->toIntExact
StrictMath#multiplyFull(int, int):::Returns the exact mathematical product of the arguments.:::return->Math->multiplyFull
StrictMath#multiplyHigh(long, long):::Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors.:::return->Math->multiplyHigh
StrictMath#floorDiv(int, int):::Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient:::return->Math->floorDiv
StrictMath#floorDiv(long, int):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient:::return->Math->floorDiv
StrictMath#floorDiv(long, long):::Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient:::return->Math->floorDiv
StrictMath#floorMod(int, int):::Returns the floor modulus of the int arguments:::return->Math->floorMod
StrictMath#floorMod(long, int):::Returns the floor modulus of the long and int arguments:::return->Math->floorMod
StrictMath#floorMod(long, long):::Returns the floor modulus of the long arguments:::return->Math->floorMod
StrictMath#abs(int):::Returns the absolute value of an int value:::return->Math->abs
StrictMath#abs(long):::Returns the absolute value of a long value:::return->Math->abs
StrictMath#abs(float):::Returns the absolute value of a float value:::return->Math->abs
StrictMath#abs(double):::Returns the absolute value of a double value:::return->Math->abs
StrictMath#max(int, int):::Returns the greater of two int values:::return->Math->max
StrictMath#max(long, long):::Returns the greater of two long values:::return->Math->max
StrictMath#max(float, float):::Returns the greater of two float values:::return->Math->max
StrictMath#max(double, double):::Returns the greater of two double values:::return->Math->max
StrictMath#min(int, int):::Returns the smaller of two int values:::return->Math->min
StrictMath#min(long, long):::Returns the smaller of two long values:::return->Math->min
StrictMath#min(float, float):::Returns the smaller of two float values:::return->Math->min
StrictMath#min(double, double):::Returns the smaller of two double values:::return->Math->min
StrictMath#fma(double, double, double):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double:::return->Math->fma
StrictMath#fma(float, float, float):::Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float:::return->Math->fma
StrictMath#ulp(double):::Returns the size of an ulp of the argument:::return->Math->ulp
StrictMath#ulp(float):::Returns the size of an ulp of the argument:::return->Math->ulp
StrictMath#signum(double):::Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero:::return->Math->signum
StrictMath#signum(float):::Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero:::return->Math->signum
StrictMath#sinh(double):::Returns the hyperbolic sine of a double value:::
StrictMath#cosh(double):::Returns the hyperbolic cosine of a double value:::
StrictMath#tanh(double):::Returns the hyperbolic tangent of a double value:::
StrictMath#hypot(double, double):::Returns sqrt(x^2 +y^2) without intermediate overflow or underflow:::return->compute
StrictMath#expm1(double):::Returns e^x -1:::
StrictMath#log1p(double):::Returns the natural logarithm of the sum of the argument and 1:::
StrictMath#copySign(double, double):::Returns the first floating-point argument with the sign of the second floating-point argument:::return->Math->Double->isNaN->copySign
StrictMath#copySign(float, float):::Returns the first floating-point argument with the sign of the second floating-point argument:::return->Math->Float->isNaN->copySign
StrictMath#getExponent(float):::Returns the unbiased exponent used in the representation of a float:::return->Math->getExponent
StrictMath#getExponent(double):::Returns the unbiased exponent used in the representation of a double:::return->Math->getExponent
StrictMath#nextAfter(double, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument:::return->Math->nextAfter
StrictMath#nextAfter(float, double):::Returns the floating-point number adjacent to the first argument in the direction of the second argument:::return->Math->nextAfter
StrictMath#nextUp(double):::Returns the floating-point value adjacent to d in the direction of positive infinity:::return->Math->nextUp
StrictMath#nextUp(float):::Returns the floating-point value adjacent to f in the direction of positive infinity:::return->Math->nextUp
StrictMath#nextDown(double):::Returns the floating-point value adjacent to d in the direction of negative infinity:::return->Math->nextDown
StrictMath#nextDown(float):::Returns the floating-point value adjacent to f in the direction of negative infinity:::return->Math->nextDown
StrictMath#scalb(double, int):::Returns d × 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set:::return->Math->scalb
StrictMath#scalb(float, int):::Returns f × 2^scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set:::return->Math->scalb
String#rangeCheck(char[], int, int)::: string range check:::checkBoundsOffCount->return
String#length():::Returns the length of this string:::return->coder
String#isEmpty():::Returns true if, and only if, #length() is 0.:::return
String#charAt(int):::Returns the char value at the specified index:::if->isLatin1->return->StringLatin1->charAt->else->return->StringUTF16->charAt
String#codePointAt(int):::Returns the character (Unicode code point) at the specified index:::if->isLatin1->checkIndex->return->length->checkIndex->return->StringUTF16->codePointAt
String#codePointBefore(int):::Returns the character (Unicode code point) before the specified index:::i->if->length->throw->new->StringIndexOutOfBoundsException->if->isLatin1->return->return->StringUTF16->codePointBefore
String#codePointCount(int, int):::Returns the number of Unicode code points in the specified text range of this String:::if->length->throw->new->IndexOutOfBoundsException->if->isLatin1->return->return->StringUTF16->codePointCount
String#offsetByCodePoints(int, int):::Returns the index within this String that is offset from the given index by codePointOffset code points:::if->length->throw->new->IndexOutOfBoundsException->return->Character->offsetByCodePoints
String#getChars(int, int, char[], int):::Copies characters from this string into the destination character array:::length->checkBoundsBeginEnd->checkBoundsOffCount->if->isLatin1->StringLatin1->getChars->else->StringUTF16->getChars
String#getBytes(int, int, byte[], int):::Copies characters from this string into the destination byte array:::length->checkBoundsBeginEnd->Objects->requireNonNull->checkBoundsOffCount->if->isLatin1->StringLatin1->getBytes->else->StringUTF16->getBytes
String#getBytes(String):::Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array:::if->throw->new->NullPointerException->return->StringCoding->coder->encode
String#getBytes(Charset):::Encodes this String into a sequence of bytes using the given java.nio.charset.Charset charset, storing the result into a new byte array:::if->throw->new->NullPointerException->return->StringCoding->coder->encode
String#getBytes():::Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array:::return->StringCoding->coder->encode
String#equals(Object):::Compares this string to the specified object:::if->return->if->aString->if->coder->aString->coder->return->isLatin1->StringLatin1->equals->StringUTF16->equals->return
String#contentEquals(StringBuffer):::Compares this string to the specified StringBuffer:::return->contentEquals
String#nonSyncContentEquals(AbstractStringBuilder)::: string non sync content equals:::len->length->if->sb->length->return->v1->v2->sb->getValue->if->coder->sb->getCoder->n->for->i->else->if->isLatin1->return->return->StringUTF16->contentEquals->return
String#contentEquals(CharSequence):::Compares this string to the specified CharSequence:::if->if->synchronized->return->nonSyncContentEquals->else->return->nonSyncContentEquals->if->return->equals->n->cs->length->if->length->return->val->if->isLatin1->for->i->else->if->StringUTF16->contentEquals->return->return
String#equalsIgnoreCase(String):::Compares this String to another String, ignoring case considerations:::return->anotherString->length->length->length->regionMatches
String#compareTo(String):::Compares two strings lexicographically:::v1->v2->if->coder->anotherString->coder->return->isLatin1->StringLatin1->compareTo->StringUTF16->compareTo->return->isLatin1->StringLatin1->compareToUTF16->StringUTF16->compareToLatin1
String.CaseInsensitiveComparator#compare(String, String)::: case insensitive comparator compare:::v1->v2->if->s1->coder->s2->coder->return->s1->isLatin1->StringLatin1->compareToCI->StringUTF16->compareToCI->return->s1->isLatin1->StringLatin1->compareToCI_UTF16->StringUTF16->compareToCI_Latin1
String.CaseInsensitiveComparator#readResolve():::Replaces the de-serialized object.:::return
String#compareToIgnoreCase(String):::Compares two strings lexicographically, ignoring case differences:::return->CASE_INSENSITIVE_ORDER->compare
String#regionMatches(int, String, int, int):::Tests if two string regions are equal:::tv->ov->if->length->other->length->return->if->coder->other->coder->if->isLatin1->while->if->return->else->if->coder->while->if->StringLatin1->getChar->StringUTF16->getChar->return->else->while->if->StringUTF16->getChar->StringLatin1->getChar->return->return
String#regionMatches(boolean, int, String, int, int):::Tests if two string regions are equal:::if->return->regionMatches->if->length->other->length->return->tv->ov->if->coder->other->coder->return->isLatin1->StringLatin1->regionMatchesCI->StringUTF16->regionMatchesCI->return->isLatin1->StringLatin1->regionMatchesCI_UTF16->StringUTF16->regionMatchesCI_Latin1
String#startsWith(String, int):::Tests if the substring of this string beginning at the specified index starts with the specified prefix.:::if->length->prefix->length->return->ta->pa->po->pc->if->coder->prefix->coder->to->isLatin1->while->if->return->else->if->isLatin1->return->while->if->StringUTF16->getChar->return->return
String#startsWith(String):::Tests if this string starts with the specified prefix.:::return->startsWith
String#endsWith(String):::Tests if this string ends with the specified suffix.:::return->length->suffix->length->startsWith
String#hashCode():::Returns a hash code for this string:::h->if->isLatin1->StringLatin1->hashCode->StringUTF16->hashCode->return
String#indexOf(int):::Returns the index within this string of the first occurrence of the specified character:::return->indexOf
String#indexOf(int, int):::Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index:::return->isLatin1->StringLatin1->indexOf->StringUTF16->indexOf
String#lastIndexOf(int):::Returns the index within this string of the last occurrence of the specified character:::return->length->lastIndexOf
String#lastIndexOf(int, int):::Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index:::return->isLatin1->StringLatin1->lastIndexOf->StringUTF16->lastIndexOf
String#indexOf(String):::Returns the index within this string of the first occurrence of the specified substring:::if->coder->str->coder->return->isLatin1->StringLatin1->indexOf->StringUTF16->indexOf->if->coder->return->return->StringUTF16->indexOfLatin1
String#indexOf(String, int):::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index:::return->coder->length->indexOf
String#indexOf(byte[], byte, int, String, int):::Code shared by String and AbstractStringBuilder to do searches:::tgt->tgtCoder->tgtStr->coder->tgtCount->tgtStr->length->if->return->if->if->return->if->return->if->return->StringLatin1->indexOf->StringUTF16->indexOf->if->return->return->StringUTF16->indexOfLatin1
String#lastIndexOf(String):::Returns the index within this string of the last occurrence of the specified substring:::return->length->lastIndexOf
String#lastIndexOf(String, int):::Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index:::return->coder->length->lastIndexOf
String#lastIndexOf(byte[], byte, int, String, int):::Code shared by String and AbstractStringBuilder to do searches:::tgt->tgtCoder->tgtStr->coder->tgtCount->tgtStr->length->rightIndex->if->if->return->if->return->if->return->StringLatin1->lastIndexOf->StringUTF16->lastIndexOf->if->return->return->StringUTF16->lastIndexOfLatin1
String#substring(int):::Returns a string that is a substring of this string:::if->throw->new->StringIndexOutOfBoundsException->subLen->length->if->throw->new->StringIndexOutOfBoundsException->if->return->return->isLatin1->StringLatin1->newString->StringUTF16->newString
String#substring(int, int):::Returns a string that is a substring of this string:::length->length->checkBoundsBeginEnd->subLen->if->return->return->isLatin1->StringLatin1->newString->StringUTF16->newString
String#subSequence(int, int):::Returns a character sequence that is a subsequence of this sequence:::return->this->substring
String#concat(String):::Concatenates the specified string to the end of this string:::olen->str->length->if->return->if->coder->str->coder->val->oval->len->buf->Arrays->copyOf->System->arraycopy->return->new->String->len->length->buf->StringUTF16->newBytesFor->getBytes->str->getBytes->return->new->String
String#replace(char, char):::Returns a string resulting from replacing all occurrences of oldChar in this string with newChar:::if->ret->isLatin1->StringLatin1->replace->StringUTF16->replace->if->return->return
String#matches(String):::Tells whether or not this string matches the given regular expression:::return->Pattern->matches
String#contains(CharSequence):::Returns true if and only if this string contains the specified sequence of char values.:::return->s->toString->indexOf
String#replaceFirst(String, String):::Replaces the first substring of this string that matches the given regular expression with the given replacement:::return->Pattern->compile->matcher->replaceFirst
String#replaceAll(String, String):::Replaces each substring of this string that matches the given regular expression with the given replacement:::return->Pattern->compile->matcher->replaceAll
String#replace(CharSequence, CharSequence):::Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence:::tgtStr->target->toString->replStr->replacement->toString->j->indexOf->if->return->tgtLen->tgtStr->length->tgtLen1->Math->max->thisLen->length->newLenHint->replStr->length->if->throw->new->OutOfMemoryError->sb->new->StringBuilder->i->do->sb->append->append->while->indexOf->return->sb->append->toString
String#split(String, int):::Splits this string around matches of the given regular expression:::ch->if->regex->length->regex->charAt->indexOf->regex->length->regex->charAt->regex->charAt->off->next->limited->list->new->ArrayList<>->while->indexOf->if->list->size->list->substring->add->else->last->length->list->substring->add->break->if->return->new->StringArr->if->list->size->list->length->substring->add->resultSize->list->size->if->while->list->get->length->result->new->StringArr->return->list->subList->toArray->return->Pattern->compile->split
String#split(String):::Splits this string around matches of the given regular expression:::return->split
String#join(CharSequence, CharSequence...):::Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter:::Objects->requireNonNull->Objects->requireNonNull->joiner->new->StringJoiner->foreach->joiner->add->return->joiner->toString
String#join(CharSequence, Iterable):::Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter:::Objects->requireNonNull->Objects->requireNonNull->joiner->new->StringJoiner->foreach->joiner->add->return->joiner->toString
String#toLowerCase(Locale):::Converts all of the characters in this String to lower case using the rules of the given Locale:::return->isLatin1->StringLatin1->toLowerCase->StringUTF16->toLowerCase
String#toLowerCase():::Converts all of the characters in this String to lower case using the rules of the default locale:::return->Locale->getDefault->toLowerCase
String#toUpperCase(Locale):::Converts all of the characters in this String to upper case using the rules of the given Locale:::return->isLatin1->StringLatin1->toUpperCase->StringUTF16->toUpperCase
String#toUpperCase():::Converts all of the characters in this String to upper case using the rules of the default locale:::return->Locale->getDefault->toUpperCase
String#trim():::Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to 'U+0020' (the space character):::ret->isLatin1->StringLatin1->trim->StringUTF16->trim->return
String#strip():::Returns a string whose value is this string, with all leading and trailing Character#isWhitespace(int) white space removed:::ret->isLatin1->StringLatin1->strip->StringUTF16->strip->return
String#stripLeading():::Returns a string whose value is this string, with all leading Character#isWhitespace(int) white space removed:::ret->isLatin1->StringLatin1->stripLeading->StringUTF16->stripLeading->return
String#stripTrailing():::Returns a string whose value is this string, with all trailing Character#isWhitespace(int) white space removed:::ret->isLatin1->StringLatin1->stripTrailing->StringUTF16->stripTrailing->return
String#isBlank():::Returns true if the string is empty or contains only Character#isWhitespace(int) white space codepoints, otherwise false.:::return->indexOfNonWhitespace->length
String#indexOfNonWhitespace()::: string index of non whitespace:::if->isLatin1->return->StringLatin1->indexOfNonWhitespace->else->return->StringUTF16->indexOfNonWhitespace
String#lines():::Returns a stream of lines extracted from this string, separated by line terminators:::return->isLatin1->StringLatin1->lines->StringUTF16->lines
String#toString():::This object (which is already a string!) is itself returned.:::return
String#chars():::Returns a stream of int zero-extending the char values from this sequence:::return->StreamSupport->isLatin1->new->StringLatin1.CharsSpliterator->new->StringUTF16.CharsSpliterator->intStream
String#codePoints():::Returns a stream of code point values from this sequence:::return->StreamSupport->isLatin1->new->StringLatin1.CharsSpliterator->new->StringUTF16.CodePointsSpliterator->intStream
String#toCharArray():::Converts this string to a new character array.:::return->isLatin1->StringLatin1->toChars->StringUTF16->toChars
String#format(String, Object...):::Returns a formatted string using the specified format string and arguments:::return->new->Formatter->format->toString
String#format(Locale, String, Object...):::Returns a formatted string using the specified locale, format string, and arguments.:::return->new->Formatter->format->toString
String#valueOf(Object):::Returns the string representation of the Object argument.:::return->obj->toString
String#valueOf(char[]):::Returns the string representation of the char array argument:::return->new->String
String#valueOf(char[], int, int):::Returns the string representation of a specific subarray of the char array argument:::return->new->String
String#copyValueOf(char[], int, int):::Equivalent to #valueOf(char[], int, int).:::return->new->String
String#copyValueOf(char[]):::Equivalent to #valueOf(char[]).:::return->new->String
String#valueOf(boolean):::Returns the string representation of the boolean argument.:::return
String#valueOf(char):::Returns the string representation of the char argument.:::if->StringLatin1->canEncode->return->StringLatin1->toBytes->new->String->return->StringUTF16->toBytes->new->String
String#valueOf(int):::Returns the string representation of the int argument:::return->Integer->toString
String#valueOf(long):::Returns the string representation of the long argument:::return->Long->toString
String#valueOf(float):::Returns the string representation of the float argument:::return->Float->toString
String#valueOf(double):::Returns the string representation of the double argument:::return->Double->toString
String#intern():::Returns a canonical representation for the string object:::
String#repeat(int):::Returns a string whose value is the concatenation of this string repeated count times:::if->throw->new->IllegalArgumentException->if->return->len->if->return->if->single->new->byteArr->Arrays->fill->return->new->String->if->throw->new->OutOfMemoryError->limit->multiple->new->byteArr->System->arraycopy->copied->for->System->arraycopy->return->new->String
String#getBytes(byte[], int, byte):::Copy character bytes from this string into dst starting at dstBegin:::if->coder->System->arraycopy->else->StringLatin1->inflate
String#coder()::: string coder:::return
String#value()::: string value:::return
String#isLatin1()::: string is latin1:::return
String#checkIndex(int, int)::: string check index:::if->throw->new->StringIndexOutOfBoundsException
String#checkOffset(int, int)::: string check offset:::if->throw->new->StringIndexOutOfBoundsException
String#checkBoundsOffCount(int, int, int)::: string check bounds off count:::if->throw->new->StringIndexOutOfBoundsException
String#checkBoundsBeginEnd(int, int, int)::: string check bounds begin end:::if->throw->new->StringIndexOutOfBoundsException
String#valueOfCodePoint(int):::Returns the string representation of the codePoint argument.:::if->StringLatin1->canEncode->return->StringLatin1->toBytes->new->String->else->if->Character->isBmpCodePoint->return->StringUTF16->toBytes->new->String->else->if->Character->isSupplementaryCodePoint->return->StringUTF16->toBytesSupplementary->new->String->throw->format->new->IllegalArgumentException
StringBuffer#compareTo(StringBuffer):::Compares two StringBuffer instances lexicographically:::return->super->compareTo
StringBuffer#length()::: string buffer length:::return
StringBuffer#capacity()::: string buffer capacity:::return->super->capacity
StringBuffer#ensureCapacity(int)::: string buffer ensure capacity:::super->ensureCapacity
StringBuffer#trimToSize()::: string buffer trim to size:::super->trimToSize
StringBuffer#setLength(int)::: string buffer set length:::super->setLength
StringBuffer#charAt(int)::: string buffer char at:::return->super->charAt
StringBuffer#codePointAt(int)::: string buffer code point at:::return->super->codePointAt
StringBuffer#codePointBefore(int)::: string buffer code point before:::return->super->codePointBefore
StringBuffer#codePointCount(int, int)::: string buffer code point count:::return->super->codePointCount
StringBuffer#offsetByCodePoints(int, int)::: string buffer offset by code points:::return->super->offsetByCodePoints
StringBuffer#getChars(int, int, char[], int)::: string buffer get chars:::super->getChars
StringBuffer#setCharAt(int, char)::: string buffer set char at:::super->setCharAt
StringBuffer#append(Object)::: string buffer append:::super->String->valueOf->append->return
StringBuffer#append(String)::: string buffer append:::super->append->return
StringBuffer#append(StringBuffer):::Appends the specified StringBuffer to this sequence:::super->append->return
StringBuffer#append(AbstractStringBuilder)::: string buffer append:::super->append->return
StringBuffer#append(CharSequence):::Appends the specified CharSequence to this sequence:::super->append->return
StringBuffer#append(CharSequence, int, int)::: string buffer append:::super->append->return
StringBuffer#append(char[])::: string buffer append:::super->append->return
StringBuffer#append(char[], int, int)::: string buffer append:::super->append->return
StringBuffer#append(boolean)::: string buffer append:::super->append->return
StringBuffer#append(char)::: string buffer append:::super->append->return
StringBuffer#append(int)::: string buffer append:::super->append->return
StringBuffer#appendCodePoint(int)::: string buffer append code point:::super->appendCodePoint->return
StringBuffer#append(long)::: string buffer append:::super->append->return
StringBuffer#append(float)::: string buffer append:::super->append->return
StringBuffer#append(double)::: string buffer append:::super->append->return
StringBuffer#delete(int, int)::: string buffer delete:::super->delete->return
StringBuffer#deleteCharAt(int)::: string buffer delete char at:::super->deleteCharAt->return
StringBuffer#replace(int, int, String)::: string buffer replace:::super->replace->return
StringBuffer#substring(int)::: string buffer substring:::return->substring
StringBuffer#subSequence(int, int)::: string buffer sub sequence:::return->super->substring
StringBuffer#substring(int, int)::: string buffer substring:::return->super->substring
StringBuffer#insert(int, char[], int, int)::: string buffer insert:::super->insert->return
StringBuffer#insert(int, Object)::: string buffer insert:::super->String->valueOf->insert->return
StringBuffer#insert(int, String)::: string buffer insert:::super->insert->return
StringBuffer#insert(int, char[])::: string buffer insert:::super->insert->return
StringBuffer#insert(int, CharSequence)::: string buffer insert:::super->insert->return
StringBuffer#insert(int, CharSequence, int, int)::: string buffer insert:::super->insert->return
StringBuffer#insert(int, boolean)::: string buffer insert:::super->insert->return
StringBuffer#insert(int, char)::: string buffer insert:::super->insert->return
StringBuffer#insert(int, int)::: string buffer insert:::super->insert->return
StringBuffer#insert(int, long)::: string buffer insert:::super->insert->return
StringBuffer#insert(int, float)::: string buffer insert:::super->insert->return
StringBuffer#insert(int, double)::: string buffer insert:::super->insert->return
StringBuffer#indexOf(String)::: string buffer index of:::return->super->indexOf
StringBuffer#indexOf(String, int)::: string buffer index of:::return->super->indexOf
StringBuffer#lastIndexOf(String)::: string buffer last index of:::return->lastIndexOf
StringBuffer#lastIndexOf(String, int)::: string buffer last index of:::return->super->lastIndexOf
StringBuffer#reverse()::: string buffer reverse:::super->reverse->return
StringBuffer#toString()::: string buffer to string:::if->return->isLatin1->StringLatin1->newString->StringUTF16->newString->return->new->String
StringBuffer#writeObject(java.io.ObjectOutputStream):::readObject is called to restore the state of the StringBuffer from a stream.:::fields->s->putFields->val->capacity->new->charArr->if->isLatin1->StringLatin1->getChars->else->StringUTF16->getChars->fields->put->fields->put->fields->put->s->writeFields
StringBuffer#readObject(java.io.ObjectInputStream):::readObject is called to restore the state of the StringBuffer from a stream.:::fields->s->readFields->val->fields->get->initBytes->fields->get
StringBuffer#getBytes(byte[], int, byte)::: string buffer get bytes:::super->getBytes
StringBuilder#compareTo(StringBuilder):::Compares two StringBuilder instances lexicographically:::return->super->compareTo
StringBuilder#append(Object)::: string builder append:::return->String->valueOf->append
StringBuilder#append(String)::: string builder append:::super->append->return
StringBuilder#append(StringBuffer):::Appends the specified StringBuffer to this sequence:::super->append->return
StringBuilder#append(CharSequence)::: string builder append:::super->append->return
StringBuilder#append(CharSequence, int, int)::: string builder append:::super->append->return
StringBuilder#append(char[])::: string builder append:::super->append->return
StringBuilder#append(char[], int, int)::: string builder append:::super->append->return
StringBuilder#append(boolean)::: string builder append:::super->append->return
StringBuilder#append(char)::: string builder append:::super->append->return
StringBuilder#append(int)::: string builder append:::super->append->return
StringBuilder#append(long)::: string builder append:::super->append->return
StringBuilder#append(float)::: string builder append:::super->append->return
StringBuilder#append(double)::: string builder append:::super->append->return
StringBuilder#appendCodePoint(int)::: string builder append code point:::super->appendCodePoint->return
StringBuilder#delete(int, int)::: string builder delete:::super->delete->return
StringBuilder#deleteCharAt(int)::: string builder delete char at:::super->deleteCharAt->return
StringBuilder#replace(int, int, String)::: string builder replace:::super->replace->return
StringBuilder#insert(int, char[], int, int)::: string builder insert:::super->insert->return
StringBuilder#insert(int, Object)::: string builder insert:::super->insert->return
StringBuilder#insert(int, String)::: string builder insert:::super->insert->return
StringBuilder#insert(int, char[])::: string builder insert:::super->insert->return
StringBuilder#insert(int, CharSequence)::: string builder insert:::super->insert->return
StringBuilder#insert(int, CharSequence, int, int)::: string builder insert:::super->insert->return
StringBuilder#insert(int, boolean)::: string builder insert:::super->insert->return
StringBuilder#insert(int, char)::: string builder insert:::super->insert->return
StringBuilder#insert(int, int)::: string builder insert:::super->insert->return
StringBuilder#insert(int, long)::: string builder insert:::super->insert->return
StringBuilder#insert(int, float)::: string builder insert:::super->insert->return
StringBuilder#insert(int, double)::: string builder insert:::super->insert->return
StringBuilder#indexOf(String)::: string builder index of:::return->super->indexOf
StringBuilder#indexOf(String, int)::: string builder index of:::return->super->indexOf
StringBuilder#lastIndexOf(String)::: string builder last index of:::return->super->lastIndexOf
StringBuilder#lastIndexOf(String, int)::: string builder last index of:::return->super->lastIndexOf
StringBuilder#reverse()::: string builder reverse:::super->reverse->return
StringBuilder#toString()::: string builder to string:::return->isLatin1->StringLatin1->newString->StringUTF16->newString
StringBuilder#writeObject(java.io.ObjectOutputStream):::Save the state of the StringBuilder instance to a stream (that is, serialize it).:::s->defaultWriteObject->s->writeInt->val->capacity->new->charArr->if->isLatin1->StringLatin1->getChars->else->StringUTF16->getChars->s->writeObject
StringBuilder#readObject(java.io.ObjectInputStream):::readObject is called to restore the state of the StringBuffer from a stream.:::s->defaultReadObject->s->readInt->val->s->readObject->initBytes
StringCoding#deref(ThreadLocal>)::: string coding deref:::sr->tl->get->if->return->return->sr->get
StringCoding#set(ThreadLocal>, T)::: string coding set:::tl->new->SoftReference<>->set
StringCoding#safeTrim(byte[], int, boolean)::: string coding safe trim:::if->System->getSecurityManager->return->else->return->Arrays->copyOf
StringCoding#scale(int, float)::: string coding scale:::return
StringCoding#lookupCharset(String)::: string coding lookup charset:::if->Charset->isSupported->try->return->Charset->forName->catch->throw->new->Error->finally->return
StringCoding.Result#with()::: result with:::new->byteArr->return
StringCoding.Result#with(char[], int, int)::: result with:::if->bs->StringUTF16->compress->if->return->StringUTF16->toBytes->return
StringCoding.Result#with(byte[], byte)::: result with:::return
StringCoding#hasNegatives(byte[], int, int)::: string coding has negatives:::for->i->return
StringCoding.StringDecoder#charsetName()::: string decoder charset name:::if->return->historicalName->return->cs->name
StringCoding.StringDecoder#requestedCharsetName()::: string decoder requested charset name:::return
StringCoding.StringDecoder#decode(byte[], int, int)::: string decoder decode:::if->return->result->with->if->hasNegatives->if->return->result->Arrays->copyOfRange->with->else->return->result->StringLatin1->inflate->with->en->cd->maxCharsPerByte->scale->ca->new->charArr->if->clen->decode->return->result->with->cd->reset->bb->ByteBuffer->wrap->cb->CharBuffer->wrap->try->cr->cd->decode->if->cr->isUnderflow->cr->throwException->cd->flush->if->cr->isUnderflow->cr->throwException->catch->throw->new->Error->finally->return->result->cb->position->with
StringCoding#decode(String, byte[], int, int)::: string coding decode:::sd->deref->csn->if->csn->sd->requestedCharsetName->equals->csn->sd->charsetName->equals->try->cs->lookupCharset->if->if->return->decodeUTF8->if->return->decodeLatin1->if->return->decodeASCII->new->StringDecoder->catch->finally->if->throw->new->UnsupportedEncodingException->set->return->sd->decode
StringCoding#decode(Charset, byte[], int, int)::: string coding decode:::if->return->decodeUTF8->if->return->decodeLatin1->if->return->decodeASCII->cd->cs->newDecoder->if->isASCIICompatible->hasNegatives->return->decodeLatin1->en->cd->maxCharsPerByte->scale->if->return->new->Result->with->cd->onMalformedInput->onUnmappableCharacter->reset->ca->new->charArr->if->clen->decode->return->new->Result->with->if->cs->getClass->getClassLoader0->System->getSecurityManager->Arrays->copyOfRange->bb->ByteBuffer->wrap->cb->CharBuffer->wrap->try->cr->cd->decode->if->cr->isUnderflow->cr->throwException->cd->flush->if->cr->isUnderflow->cr->throwException->catch->throw->new->Error->finally->return->new->Result->cb->position->with
StringCoding#decode(byte[], int, int)::: string coding decode:::cs->Charset->defaultCharset->if->return->decodeUTF8->if->return->decodeLatin1->if->return->decodeASCII->sd->deref->if->cs->name->name->equals->cs->name->new->StringDecoder->set->return->sd->decode
StringCoding.StringEncoder#charsetName()::: string encoder charset name:::if->return->historicalName->return->cs->name
StringCoding.StringEncoder#requestedCharsetName()::: string encoder requested charset name:::return
StringCoding.StringEncoder#encode(byte, byte[])::: string encoder encode:::if->hasNegatives->return->Arrays->copyOf->len->en->ce->maxBytesPerChar->scale->ba->new->byteArr->if->return->if->blen->encodeFromLatin1->encodeFromUTF16->if->return->safeTrim->ca->StringLatin1->toChars->StringUTF16->toChars->ce->reset->bb->ByteBuffer->wrap->cb->CharBuffer->wrap->try->cr->ce->encode->if->cr->isUnderflow->cr->throwException->ce->flush->if->cr->isUnderflow->cr->throwException->catch->throw->new->Error->finally->return->bb->position->safeTrim
StringCoding#encode(String, byte, byte[])::: string coding encode:::se->deref->csn->if->csn->se->requestedCharsetName->equals->csn->se->charsetName->equals->try->cs->lookupCharset->if->if->return->encodeUTF8->if->return->encode8859_1->if->return->encodeASCII->new->StringEncoder->catch->finally->if->throw->new->UnsupportedEncodingException->set->return->se->encode
StringCoding#encode(Charset, byte, byte[])::: string coding encode:::if->return->encodeUTF8->if->return->encode8859_1->if->return->encodeASCII->ce->cs->newEncoder->if->isASCIICompatible->hasNegatives->return->Arrays->copyOf->len->en->ce->maxBytesPerChar->scale->ba->new->byteArr->if->return->ce->onMalformedInput->onUnmappableCharacter->reset->if->blen->encodeFromLatin1->encodeFromUTF16->if->return->safeTrim->isTrusted->cs->getClass->getClassLoader0->System->getSecurityManager->ca->StringLatin1->toChars->StringUTF16->toChars->bb->ByteBuffer->wrap->cb->CharBuffer->wrap->try->cr->ce->encode->if->cr->isUnderflow->cr->throwException->ce->flush->if->cr->isUnderflow->cr->throwException->catch->throw->new->Error->finally->return->bb->position->safeTrim
StringCoding#encode(byte, byte[])::: string coding encode:::cs->Charset->defaultCharset->if->return->encodeUTF8->if->return->encode8859_1->if->return->encodeASCII->se->deref->if->cs->name->name->equals->cs->name->new->StringEncoder->set->return->se->encode
StringCoding#err(String)::: Print a message directly to stderr, bypassing all character conversion  methods.:::
StringCoding#decodeASCII(byte[], int, int)::: string coding decode i:::result->resultCached->get->if->hasNegatives->return->result->Arrays->copyOfRange->with->dst->new->byteArr->dp->while->b->putChar->return->result->with
StringCoding#encodeASCII(byte, byte[])::: string coding encode i:::if->dst->new->byteArr->for->i->return->len->dst->new->byteArr->dp->for->i->if->return->return->Arrays->copyOf
StringCoding#decodeLatin1(byte[], int, int)::: string coding decode latin1:::result->resultCached->get->if->return->result->Arrays->copyOfRange->with->else->return->result->StringLatin1->inflate->with
StringCoding#implEncodeISOArray(byte[], int, byte[], int, int)::: string coding impl encode array:::i->for->return
StringCoding#encode8859_1(byte, byte[])::: string coding encode8859_1:::return->encode8859_1
StringCoding#encode8859_1(byte, byte[], boolean)::: string coding encode8859_1:::if->return->Arrays->copyOf->len->dst->new->byteArr->dp->sp->sl->while->ret->implEncodeISOArray->if->if->throwUnmappable->c->StringUTF16->getChar->if->Character->isHighSurrogate->Character->StringUTF16->getChar->isLowSurrogate->if->return->return->Arrays->copyOf
StringCoding#isNotContinuation(int)::: string coding is not continuation:::return
StringCoding#isMalformed3(int, int, int)::: string coding is malformed3:::return
StringCoding#isMalformed3_2(int, int)::: string coding is malformed3_2:::return
StringCoding#isMalformed4(int, int, int)::: string coding is malformed4:::return
StringCoding#isMalformed4_2(int, int)::: string coding is malformed4_2:::return
StringCoding#isMalformed4_3(int)::: string coding is malformed4_3:::return
StringCoding#malformedN(byte[], int, int)::: string coding malformed n:::if->b1->b2->return->isNotContinuation->else->if->b1->b2->if->isNotContinuation->return->if->isNotContinuation->return->return->return
StringCoding#throwMalformed(int, int)::: string coding throw malformed:::msg->throw->new->MalformedInputException->new->IllegalArgumentException
StringCoding#throwMalformed(byte[])::: string coding throw malformed:::dp->while->throwMalformed
StringCoding#throwUnmappable(int, int)::: string coding throw unmappable:::msg->throw->new->UnmappableCharacterException->new->IllegalArgumentException
StringCoding#throwUnmappable(byte[])::: string coding throw unmappable:::dp->while->throwUnmappable
StringCoding#decodeUTF8(byte[], int, int, boolean)::: string coding decode f8:::if->hasNegatives->return->resultCached->get->Arrays->copyOfRange->with->return->decodeUTF8_0
StringCoding#decodeUTF8_0(byte[], int, int, boolean)::: string coding decode f8_0:::ret->resultCached->get->sl->dp->dst->new->byteArr->if->while->b1->if->continue->if->b2->if->isNotContinuation->continue->break->if->if->Arrays->copyOf->return->ret->with->if->new->byteArr->else->buf->new->byteArr->StringLatin1->inflate->while->b1->if->putChar->else->if->if->b2->if->isNotContinuation->if->throwMalformed->putChar->else->putChar->continue->if->throwMalformed->putChar->break->else->if->if->b2->b3->if->isMalformed3->if->throwMalformed->putChar->malformedN->else->c->if->isSurrogate->if->throwMalformed->putChar->else->putChar->continue->if->isMalformed3_2->if->throwMalformed->putChar->continue->if->throwMalformed->putChar->break->else->if->if->b2->b3->b4->uc->if->isMalformed4->isSupplementaryCodePoint->if->throwMalformed->putChar->malformedN->else->highSurrogate->putChar->lowSurrogate->putChar->continue->if->isMalformed4_2->if->throwMalformed->putChar->continue->if->throwMalformed->putChar->if->isMalformed4_3->continue->break->else->if->throwMalformed->putChar->if->Arrays->copyOf->return->ret->with
StringCoding#encodeUTF8(byte, byte[], boolean)::: string coding encode f8:::if->return->encodeUTF8_UTF16->if->hasNegatives->return->Arrays->copyOf->dp->dst->new->byteArr->for->sp->if->return->return->Arrays->copyOf
StringCoding#encodeUTF8_UTF16(byte[], boolean)::: string coding encode f8_ f16:::dp->sp->sl->dst->new->byteArr->c->while->StringUTF16->getChar->while->StringUTF16->getChar->if->else->if->else->if->Character->isSurrogate->uc->c2->if->Character->isHighSurrogate->Character->StringUTF16->getChar->isLowSurrogate->Character->toCodePoint->if->if->else->throwUnmappable->else->else->if->return->return->Arrays->copyOf
StringCoding#newStringUTF8NoRepl(byte[], int, int)::: string coding new string f8 no repl:::if->hasNegatives->return->Arrays->copyOfRange->new->String->ret->decodeUTF8_0->return->new->String
StringCoding#getBytesUTF8NoRepl(String)::: string coding get bytes f8 no repl:::return->s->coder->s->value->encodeUTF8
StringCoding#isASCII(byte[])::: string coding is i:::return->hasNegatives
StringCoding#newStringLatin1(byte[])::: string coding new string latin1:::if->return->new->String->return->StringLatin1->inflate->new->String
StringCoding#newStringNoRepl(byte[], Charset)::: string coding new string no repl:::try->return->newStringNoRepl1->catch->cause->e->getCause->if->throw->throw->finally
StringCoding#newStringNoRepl1(byte[], Charset)::: string coding new string no repl1:::if->if->isASCII->return->new->String->ret->decodeUTF8_0->return->new->String->if->return->newStringLatin1->if->if->isASCII->return->newStringLatin1->else->throwMalformed->cd->cs->newDecoder->if->isASCIICompatible->isASCII->return->newStringLatin1->len->if->return->en->cd->maxCharsPerByte->scale->ca->new->charArr->if->cs->getClass->getClassLoader0->System->getSecurityManager->Arrays->copyOf->bb->ByteBuffer->wrap->cb->CharBuffer->wrap->try->cr->cd->decode->if->cr->isUnderflow->cr->throwException->cd->flush->if->cr->isUnderflow->cr->throwException->catch->throw->new->IllegalArgumentException->finally->ret->resultCached->get->cb->position->with->return->new->String
StringCoding#getBytesNoRepl(String, Charset)::: string coding get bytes no repl:::try->return->getBytesNoRepl1->catch->cause->e->getCause->if->throw->throw->finally
StringCoding#getBytesNoRepl1(String, Charset)::: string coding get bytes no repl1:::val->s->value->coder->s->coder->if->if->isASCII->return->return->encodeUTF8->if->if->return->return->encode8859_1->if->if->if->isASCII->return->else->throwUnmappable->ce->cs->newEncoder->if->isASCIICompatible->isASCII->return->len->en->ce->maxBytesPerChar->scale->ba->new->byteArr->if->return->if->blen->encodeFromLatin1->encodeFromUTF16->if->return->safeTrim->isTrusted->cs->getClass->getClassLoader0->System->getSecurityManager->ca->StringLatin1->toChars->StringUTF16->toChars->bb->ByteBuffer->wrap->cb->CharBuffer->wrap->try->cr->ce->encode->if->cr->isUnderflow->cr->throwException->ce->flush->if->cr->isUnderflow->cr->throwException->catch->throw->new->IllegalArgumentException->finally->return->bb->position->safeTrim
StringConcatHelper#checkOverflow(int):::Check for overflow, throw the exception on overflow.:::if->throw->new->OutOfMemoryError->return
StringConcatHelper#mixLen(int, boolean):::Mix value length into current length:::return->checkOverflow
StringConcatHelper#mixLen(int, byte):::Mix value length into current length:::return->mixLen
StringConcatHelper#mixLen(int, char):::Mix value length into current length:::return->checkOverflow
StringConcatHelper#mixLen(int, short):::Mix value length into current length:::return->mixLen
StringConcatHelper#mixLen(int, int):::Mix value length into current length:::return->Integer->stringSize->checkOverflow
StringConcatHelper#mixLen(int, long):::Mix value length into current length:::return->Long->stringSize->checkOverflow
StringConcatHelper#mixLen(int, String):::Mix value length into current length:::return->value->length->checkOverflow
StringConcatHelper#mixCoder(byte, char):::Mix coder into current coder:::return->StringLatin1->canEncode
StringConcatHelper#mixCoder(byte, String):::Mix coder into current coder:::return->value->coder
StringConcatHelper#mixCoder(byte, boolean):::Mix coder into current coder:::return
StringConcatHelper#mixCoder(byte, byte):::Mix coder into current coder:::return
StringConcatHelper#mixCoder(byte, short):::Mix coder into current coder:::return
StringConcatHelper#mixCoder(byte, int):::Mix coder into current coder:::return
StringConcatHelper#mixCoder(byte, long):::Mix coder into current coder:::return
StringConcatHelper#prepend(int, byte[], byte, boolean):::Prepends the stringly representation of boolean value into buffer, given the coder and final index:::if->if->else->else->if->StringUTF16->putChar->StringUTF16->putChar->StringUTF16->putChar->StringUTF16->putChar->else->StringUTF16->putChar->StringUTF16->putChar->StringUTF16->putChar->StringUTF16->putChar->StringUTF16->putChar->return
StringConcatHelper#prepend(int, byte[], byte, byte):::Prepends the stringly representation of byte value into buffer, given the coder and final index:::return->prepend
StringConcatHelper#prepend(int, byte[], byte, char):::Prepends the stringly representation of char value into buffer, given the coder and final index:::if->else->StringUTF16->putChar->return
StringConcatHelper#prepend(int, byte[], byte, short):::Prepends the stringly representation of short value into buffer, given the coder and final index:::return->prepend
StringConcatHelper#prepend(int, byte[], byte, int):::Prepends the stringly representation of integer value into buffer, given the coder and final index:::if->return->Integer->getChars->else->return->StringUTF16->getChars
StringConcatHelper#prepend(int, byte[], byte, long):::Prepends the stringly representation of long value into buffer, given the coder and final index:::if->return->Long->getChars->else->return->StringUTF16->getChars
StringConcatHelper#prepend(int, byte[], byte, String):::Prepends the stringly representation of String value into buffer, given the coder and final index:::value->length->value->getBytes->return
StringConcatHelper#newString(byte[], int, byte):::Instantiates the String with given buffer and coder:::if->throw->new->InternalError->return->new->String
StringConcatHelper#initialCoder():::Provides the initial coder for the String.:::return
StringLatin1#charAt(byte[], int)::: string latin1 char at:::if->throw->new->StringIndexOutOfBoundsException->return
StringLatin1#canEncode(int)::: string latin1 can encode:::return
StringLatin1#length(byte[])::: string latin1 length:::return
StringLatin1#codePointAt(byte[], int, int)::: string latin1 code point at:::return
StringLatin1#codePointBefore(byte[], int)::: string latin1 code point before:::return
StringLatin1#codePointCount(byte[], int, int)::: string latin1 code point count:::return
StringLatin1#toChars(byte[])::: string latin1 to chars:::dst->new->charArr->inflate->return
StringLatin1#inflate(byte[], int, int)::: string latin1 inflate:::ret->StringUTF16->newBytesFor->inflate->return
StringLatin1#getChars(byte[], int, int, char[], int)::: string latin1 get chars:::inflate
StringLatin1#getBytes(byte[], int, int, byte[], int)::: string latin1 get bytes:::System->arraycopy
StringLatin1#equals(byte[], byte[])::: string latin1 equals:::if->for->i->return->return
StringLatin1#compareTo(byte[], byte[])::: string latin1 compare to:::len1->len2->return->compareTo
StringLatin1#compareTo(byte[], byte[], int, int)::: string latin1 compare to:::lim->Math->min->for->k->return
StringLatin1#compareToUTF16(byte[], byte[])::: string latin1 compare to f16:::len1->length->len2->StringUTF16->length->return->compareToUTF16Values
StringLatin1#compareToUTF16(byte[], byte[], int, int)::: string latin1 compare to f16:::length->checkOffset->StringUTF16->length->checkOffset->return->compareToUTF16Values
StringLatin1#compareToUTF16Values(byte[], byte[], int, int)::: string latin1 compare to f16 values:::lim->Math->min->for->k->return
StringLatin1#compareToCI(byte[], byte[])::: string latin1 compare to i:::len1->len2->lim->Math->min->for->k->return
StringLatin1#compareToCI_UTF16(byte[], byte[])::: string latin1 compare to i_ f16:::len1->length->len2->StringUTF16->length->lim->Math->min->for->k->return
StringLatin1#hashCode(byte[])::: string latin1 hash code:::h->foreach->return
StringLatin1#indexOf(byte[], int, int)::: string latin1 index of:::if->canEncode->return->max->if->else->if->return->c->for->i->return
StringLatin1#indexOf(byte[], byte[])::: string latin1 index of:::if->return->if->return->return->indexOf
StringLatin1#indexOf(byte[], int, byte[], int, int)::: string latin1 index of:::first->max->for->i->return
StringLatin1#lastIndexOf(byte[], int, byte[], int, int)::: string latin1 last index of:::min->i->strLastIndex->strLastChar->while->while->if->return->j->start->k->while->if->continue->return
StringLatin1#lastIndexOf(byte[], int, int)::: string latin1 last index of:::if->canEncode->return->off->Math->min->for->return
StringLatin1#replace(byte[], char, char)::: string latin1 replace:::if->canEncode->len->i->while->if->break->if->if->canEncode->buf->new->byteArr->for->j->while->c->return->new->String->else->buf->StringUTF16->newBytesFor->inflate->while->c->StringUTF16->putChar->return->new->String->return
StringLatin1#regionMatchesCI(byte[], int, byte[], int, int)::: string latin1 region matches i:::last->while->c1->c2->if->continue->u1->Character->toUpperCase->u2->Character->toUpperCase->if->continue->if->Character->toLowerCase->Character->toLowerCase->continue->return->return
StringLatin1#regionMatchesCI_UTF16(byte[], int, byte[], int, int)::: string latin1 region matches i_ f16:::last->while->c1->c2->StringUTF16->getChar->if->continue->u1->Character->toUpperCase->u2->Character->toUpperCase->if->continue->if->Character->toLowerCase->Character->toLowerCase->continue->return->return
StringLatin1#toLowerCase(String, byte[], Locale)::: string latin1 to lower case:::if->throw->new->NullPointerException->first->len->for->if->return->lang->locale->getLanguage->if->return->toLowerCaseEx->result->new->byteArr->System->arraycopy->for->i->return->new->String
StringLatin1#toLowerCaseEx(String, byte[], int, Locale, boolean)::: string latin1 to lower case ex:::result->StringUTF16->newBytesFor->resultOffset->for->i->for->i->return->StringUTF16->newString
StringLatin1#toUpperCase(String, byte[], Locale)::: string latin1 to upper case:::if->throw->new->NullPointerException->first->len->for->if->return->lang->locale->getLanguage->if->return->toUpperCaseEx->result->new->byteArr->System->arraycopy->for->i->return->new->String
StringLatin1#toUpperCaseEx(String, byte[], int, Locale, boolean)::: string latin1 to upper case ex:::result->StringUTF16->newBytesFor->resultOffset->for->i->for->i->return->StringUTF16->newString
StringLatin1#trim(byte[])::: string latin1 trim:::len->st->while->while->return->newString
StringLatin1#indexOfNonWhitespace(byte[])::: string latin1 index of non whitespace:::length->left->while->ch->if->Character->isWhitespace->break->return
StringLatin1#lastIndexOfNonWhitespace(byte[])::: string latin1 last index of non whitespace:::length->right->while->ch->if->Character->isWhitespace->break->return
StringLatin1#strip(byte[])::: string latin1 strip:::left->indexOfNonWhitespace->if->return->right->lastIndexOfNonWhitespace->return->newString
StringLatin1#stripLeading(byte[])::: string latin1 strip leading:::left->indexOfNonWhitespace->if->return->return->newString
StringLatin1#stripTrailing(byte[])::: string latin1 strip trailing:::right->lastIndexOfNonWhitespace->if->return->return->newString
StringLatin1.LinesSpliterator#indexOfLineSeparator(int)::: lines spliterator index of line separator:::for->current->return
StringLatin1.LinesSpliterator#skipLineSeparator(int)::: lines spliterator skip line separator:::if->if->next->if->return->return->return
StringLatin1.LinesSpliterator#next()::: lines spliterator next:::start->end->indexOfLineSeparator->skipLineSeparator->return->newString
StringLatin1.LinesSpliterator#tryAdvance(Consumer)::: lines spliterator try advance:::if->throw->new->NullPointerException->if->action->next->accept->return->return
StringLatin1.LinesSpliterator#forEachRemaining(Consumer)::: lines spliterator for each remaining:::if->throw->new->NullPointerException->while->action->next->accept
StringLatin1.LinesSpliterator#trySplit()::: lines spliterator try split:::half->mid->indexOfLineSeparator->skipLineSeparator->if->start->return->new->LinesSpliterator->return
StringLatin1.LinesSpliterator#estimateSize()::: lines spliterator estimate size:::return
StringLatin1.LinesSpliterator#characteristics()::: lines spliterator characteristics:::return
StringLatin1#lines(byte[])::: string latin1 lines:::return->StreamSupport->new->LinesSpliterator->stream
StringLatin1#putChar(byte[], int, int)::: string latin1 put char:::
StringLatin1#getChar(byte[], int)::: string latin1 get char:::return
StringLatin1#toBytes(int[], int, int)::: string latin1 to bytes:::ret->new->byteArr->for->i->return
StringLatin1#toBytes(char)::: string latin1 to bytes:::return->new->byteArr
StringLatin1#newString(byte[], int, int)::: string latin1 new string:::return->Arrays->copyOfRange->new->String
StringLatin1#fillNull(byte[], int, int)::: string latin1 fill null:::Arrays->fill
StringLatin1#inflate(byte[], int, char[], int, int)::: string latin1 inflate:::for->i
StringLatin1#inflate(byte[], int, byte[], int, int)::: string latin1 inflate:::StringUTF16->inflate
StringLatin1.CharsSpliterator#trySplit()::: chars spliterator try split:::lo->mid->return->new->CharsSpliterator
StringLatin1.CharsSpliterator#forEachRemaining(IntConsumer)::: chars spliterator for each remaining:::a->i->hi->if->throw->new->NullPointerException->if->do->action->accept->while
StringLatin1.CharsSpliterator#tryAdvance(IntConsumer)::: chars spliterator try advance:::if->throw->new->NullPointerException->if->action->accept->return->return
StringLatin1.CharsSpliterator#estimateSize()::: chars spliterator estimate size:::return
StringLatin1.CharsSpliterator#characteristics()::: chars spliterator characteristics:::return
StringUTF16#newBytesFor(int)::: string f16 new bytes for:::if->throw->new->NegativeArraySizeException->if->throw->new->OutOfMemoryError->return->new->byteArr
StringUTF16#putChar(byte[], int, int)::: string f16 put char:::
StringUTF16#getChar(byte[], int)::: string f16 get char:::return
StringUTF16#length(byte[])::: string f16 length:::return
StringUTF16#codePointAt(byte[], int, int, boolean)::: string f16 code point at:::if->checkIndex->c1->getChar->if->Character->isHighSurrogate->if->checkIndex->c2->getChar->if->Character->isLowSurrogate->return->Character->toCodePoint->return
StringUTF16#codePointAt(byte[], int, int)::: string f16 code point at:::return->codePointAt
StringUTF16#codePointBefore(byte[], int, boolean)::: string f16 code point before:::if->checkIndex->c2->getChar->if->Character->isLowSurrogate->if->checkIndex->c1->getChar->if->Character->isHighSurrogate->return->Character->toCodePoint->return
StringUTF16#codePointBefore(byte[], int)::: string f16 code point before:::return->codePointBefore
StringUTF16#codePointCount(byte[], int, int, boolean)::: string f16 code point count:::count->i->if->checkBoundsBeginEnd->for->return
StringUTF16#codePointCount(byte[], int, int)::: string f16 code point count:::return->codePointCount
StringUTF16#toChars(byte[])::: string f16 to chars:::dst->new->charArr->getChars->return
StringUTF16#toBytes(char[], int, int)::: string f16 to bytes:::val->newBytesFor->for->i->return
StringUTF16#compress(char[], int, int)::: string f16 compress:::ret->new->byteArr->if->compress->return->return
StringUTF16#compress(byte[], int, int)::: string f16 compress:::ret->new->byteArr->if->compress->return->return
StringUTF16#compress(char[], int, byte[], int, int)::: string f16 compress:::for->i->return
StringUTF16#compress(byte[], int, byte[], int, int)::: string f16 compress:::checkBoundsOffCount->for->i->return
StringUTF16#toBytes(int[], int, int)::: string f16 to bytes:::end->n->for->i->buf->newBytesFor->for->i->j->return
StringUTF16#toBytes(char)::: string f16 to bytes:::result->new->byteArr->putChar->return
StringUTF16#toBytesSupplementary(int)::: string f16 to bytes supplementary:::result->new->byteArr->Character->highSurrogate->putChar->Character->lowSurrogate->putChar->return
StringUTF16#getChars(byte[], int, int, char[], int)::: string f16 get chars:::if->checkBoundsOffCount->for->i
StringUTF16#getBytes(byte[], int, int, byte[], int)::: string f16 get bytes:::for->i
StringUTF16#equals(byte[], byte[])::: string f16 equals:::if->len->for->i->return->return
StringUTF16#compareTo(byte[], byte[])::: string f16 compare to:::len1->length->len2->length->return->compareValues
StringUTF16#compareTo(byte[], byte[], int, int)::: string f16 compare to:::checkOffset->checkOffset->return->compareValues
StringUTF16#compareValues(byte[], byte[], int, int)::: string f16 compare values:::lim->Math->min->for->k->return
StringUTF16#compareToLatin1(byte[], byte[])::: string f16 compare to latin1:::return->StringLatin1->compareToUTF16
StringUTF16#compareToLatin1(byte[], byte[], int, int)::: string f16 compare to latin1:::return->StringLatin1->compareToUTF16
StringUTF16#compareToCI(byte[], byte[])::: string f16 compare to i:::len1->length->len2->length->lim->Math->min->for->k->return
StringUTF16#compareToCI_Latin1(byte[], byte[])::: string f16 compare to i_ latin1:::return->StringLatin1->compareToCI_UTF16
StringUTF16#hashCode(byte[])::: string f16 hash code:::h->length->for->i->return
StringUTF16#indexOf(byte[], int, int)::: string f16 index of:::max->if->else->if->return->if->return->indexOfChar->else->return->indexOfSupplementary
StringUTF16#indexOf(byte[], byte[])::: string f16 index of:::if->return->if->return->return->length->length->indexOfUnsafe
StringUTF16#indexOf(byte[], int, byte[], int, int)::: string f16 index of:::checkBoundsBeginEnd->checkBoundsBeginEnd->return->indexOfUnsafe
StringUTF16#indexOfUnsafe(byte[], int, byte[], int, int)::: string f16 index of unsafe:::first->getChar->max->for->i->return
StringUTF16#indexOfLatin1(byte[], byte[]):::Handles indexOf Latin1 substring in UTF16 string.:::if->return->if->length->return->return->length->indexOfLatin1Unsafe
StringUTF16#indexOfLatin1(byte[], int, byte[], int, int)::: string f16 index of latin1:::checkBoundsBeginEnd->String->checkBoundsBeginEnd->return->indexOfLatin1Unsafe
StringUTF16#indexOfLatin1Unsafe(byte[], int, byte[], int, int)::: string f16 index of latin1 unsafe:::first->max->for->i->return
StringUTF16#indexOfChar(byte[], int, int, int)::: string f16 index of char:::checkBoundsBeginEnd->return->indexOfCharUnsafe
StringUTF16#indexOfCharUnsafe(byte[], int, int, int)::: string f16 index of char unsafe:::for->i->return
StringUTF16#indexOfSupplementary(byte[], int, int, int):::Handles (rare) calls of indexOf with a supplementary character.:::if->Character->isValidCodePoint->hi->Character->highSurrogate->lo->Character->lowSurrogate->checkBoundsBeginEnd->for->i->return
StringUTF16#lastIndexOf(byte[], int, byte[], int, int)::: string f16 last index of:::min->i->strLastIndex->checkIndex->strLastChar->getChar->checkIndex->while->while->getChar->if->return->j->start->k->while->if->getChar->getChar->continue->return
StringUTF16#lastIndexOf(byte[], int, int)::: string f16 last index of:::if->i->Math->min->for->return->else->return->lastIndexOfSupplementary
StringUTF16#lastIndexOfSupplementary(byte[], int, int):::Handles (rare) calls of lastIndexOf with a supplementary character.:::if->Character->isValidCodePoint->hi->Character->highSurrogate->lo->Character->lowSurrogate->i->Math->min->for->return
StringUTF16#replace(byte[], char, char)::: string f16 replace:::len->i->while->if->getChar->break->if->buf->new->byteArr->for->j->while->c->getChar->putChar->if->StringLatin1->canEncode->StringLatin1->canEncode->val->compress->if->return->new->String->return->new->String->return
StringUTF16#regionMatchesCI(byte[], int, byte[], int, int)::: string f16 region matches i:::last->while->c1->getChar->c2->getChar->if->continue->u1->Character->toUpperCase->u2->Character->toUpperCase->if->continue->if->Character->toLowerCase->Character->toLowerCase->continue->return->return
StringUTF16#regionMatchesCI_Latin1(byte[], int, byte[], int, int)::: string f16 region matches i_ latin1:::return->StringLatin1->regionMatchesCI_UTF16
StringUTF16#toLowerCase(String, byte[], Locale)::: string f16 to lower case:::if->throw->new->NullPointerException->first->hasSurr->len->for->if->return->result->new->byteArr->System->arraycopy->lang->locale->getLanguage->if->return->toLowerCaseEx->if->return->toLowerCaseEx->bits->for->i->if->return->new->String->else->return->newString
StringUTF16#toLowerCaseEx(String, byte[], byte[], int, Locale, boolean)::: string f16 to lower case ex:::resultOffset->length->srcCount->for->i->return->newString
StringUTF16#toUpperCase(String, byte[], Locale)::: string f16 to upper case:::if->throw->new->NullPointerException->first->hasSurr->len->for->if->return->result->new->byteArr->System->arraycopy->lang->locale->getLanguage->if->return->toUpperCaseEx->if->return->toUpperCaseEx->bits->for->i->if->return->new->String->else->return->newString
StringUTF16#toUpperCaseEx(String, byte[], byte[], int, Locale, boolean)::: string f16 to upper case ex:::resultOffset->length->srcCount->for->i->return->newString
StringUTF16#trim(byte[])::: string f16 trim:::length->len->st->while->getChar->while->getChar->return->Arrays->copyOfRange->new->String
StringUTF16#indexOfNonWhitespace(byte[])::: string f16 index of non whitespace:::length->left->while->codepoint->codePointAt->if->Character->isWhitespace->break->Character->charCount->return
StringUTF16#lastIndexOfNonWhitespace(byte[])::: string f16 last index of non whitespace:::length->right->while->codepoint->codePointBefore->if->Character->isWhitespace->break->Character->charCount->return
StringUTF16#strip(byte[])::: string f16 strip:::length->left->indexOfNonWhitespace->if->return->right->lastIndexOfNonWhitespace->return->newString
StringUTF16#stripLeading(byte[])::: string f16 strip leading:::length->left->indexOfNonWhitespace->if->return->return->newString
StringUTF16#stripTrailing(byte[])::: string f16 strip trailing:::length->right->lastIndexOfNonWhitespace->if->return->return->newString
StringUTF16.LinesSpliterator#indexOfLineSeparator(int)::: lines spliterator index of line separator:::for->current->return
StringUTF16.LinesSpliterator#skipLineSeparator(int)::: lines spliterator skip line separator:::if->if->getChar->next->if->getChar->return->return->return
StringUTF16.LinesSpliterator#next()::: lines spliterator next:::start->end->indexOfLineSeparator->skipLineSeparator->return->newString
StringUTF16.LinesSpliterator#tryAdvance(Consumer)::: lines spliterator try advance:::if->throw->new->NullPointerException->if->action->next->accept->return->return
StringUTF16.LinesSpliterator#forEachRemaining(Consumer)::: lines spliterator for each remaining:::if->throw->new->NullPointerException->while->action->next->accept
StringUTF16.LinesSpliterator#trySplit()::: lines spliterator try split:::half->mid->indexOfLineSeparator->skipLineSeparator->if->start->return->new->LinesSpliterator->return
StringUTF16.LinesSpliterator#estimateSize()::: lines spliterator estimate size:::return
StringUTF16.LinesSpliterator#characteristics()::: lines spliterator characteristics:::return
StringUTF16#lines(byte[])::: string f16 lines:::return->StreamSupport->new->LinesSpliterator->stream
StringUTF16#putChars(byte[], int, char[], int, int)::: string f16 put chars:::while->putChar
StringUTF16#newString(byte[], int, int)::: string f16 new string:::if->buf->compress->if->return->new->String->last->return->Arrays->copyOfRange->new->String
StringUTF16#fillNull(byte[], int, int)::: string f16 fill null:::Arrays->fill
StringUTF16.CharsSpliterator#trySplit()::: chars spliterator try split:::lo->mid->return->new->CharsSpliterator
StringUTF16.CharsSpliterator#forEachRemaining(IntConsumer)::: chars spliterator for each remaining:::a->i->hi->if->throw->new->NullPointerException->if->do->action->charAt->accept->while
StringUTF16.CharsSpliterator#tryAdvance(IntConsumer)::: chars spliterator try advance:::if->throw->new->NullPointerException->i->if->action->charAt->accept->return->return
StringUTF16.CharsSpliterator#estimateSize()::: chars spliterator estimate size:::return
StringUTF16.CharsSpliterator#characteristics()::: chars spliterator characteristics:::return
StringUTF16.CodePointsSpliterator#trySplit()::: code points spliterator try split:::lo->mid->if->return->midOneLess->if->Character->charAt->isLowSurrogate->Character->charAt->isHighSurrogate->if->return->return->new->CodePointsSpliterator->return->new->CodePointsSpliterator
StringUTF16.CodePointsSpliterator#forEachRemaining(IntConsumer)::: code points spliterator for each remaining:::a->i->hi->if->throw->new->NullPointerException->if->do->advance->while
StringUTF16.CodePointsSpliterator#tryAdvance(IntConsumer)::: code points spliterator try advance:::if->throw->new->NullPointerException->if->advance->return->return
StringUTF16.CodePointsSpliterator#advance(byte[], int, int, IntConsumer)::: code points spliterator advance:::c1->charAt->cp->if->Character->isHighSurrogate->c2->charAt->if->Character->isLowSurrogate->Character->toCodePoint->action->accept->return
StringUTF16.CodePointsSpliterator#estimateSize()::: code points spliterator estimate size:::return
StringUTF16.CodePointsSpliterator#characteristics()::: code points spliterator characteristics:::return
StringUTF16#putCharSB(byte[], int, int)::: string f16 put char b:::checkIndex->putChar
StringUTF16#putCharsSB(byte[], int, char[], int, int)::: string f16 put chars b:::checkBoundsBeginEnd->putChars
StringUTF16#putCharsSB(byte[], int, CharSequence, int, int)::: string f16 put chars b:::checkBoundsBeginEnd->for->i
StringUTF16#codePointAtSB(byte[], int, int)::: string f16 code point at b:::return->codePointAt
StringUTF16#codePointBeforeSB(byte[], int)::: string f16 code point before b:::return->codePointBefore
StringUTF16#codePointCountSB(byte[], int, int)::: string f16 code point count b:::return->codePointCount
StringUTF16#getChars(int, int, int, byte[])::: string f16 get chars:::checkBoundsBeginEnd->pos->getChars->return
StringUTF16#getChars(long, int, int, byte[])::: string f16 get chars:::checkBoundsBeginEnd->pos->getChars->return
StringUTF16#contentEquals(byte[], byte[], int)::: string f16 content equals:::checkBoundsOffCount->for->i->return
StringUTF16#contentEquals(byte[], CharSequence, int)::: string f16 content equals:::checkOffset->for->i->return
StringUTF16#putCharsAt(byte[], int, char, char, char, char)::: string f16 put chars at:::end->checkBoundsBeginEnd->putChar->putChar->putChar->putChar->return
StringUTF16#putCharsAt(byte[], int, char, char, char, char, char)::: string f16 put chars at:::end->checkBoundsBeginEnd->putChar->putChar->putChar->putChar->putChar->return
StringUTF16#charAt(byte[], int)::: string f16 char at:::checkIndex->return->getChar
StringUTF16#reverse(byte[], int)::: string f16 reverse:::checkOffset->n->hasSurrogates->for->j->if->reverseAllValidSurrogatePairs
StringUTF16#reverseAllValidSurrogatePairs(byte[], int):::Outlined helper method for reverse():::for->i
StringUTF16#inflate(byte[], int, byte[], int, int)::: string f16 inflate:::checkBoundsOffCount->for->i
StringUTF16#lastIndexOfLatin1(byte[], int, byte[], int, int)::: string f16 last index of latin1:::min->i->strLastIndex->strLastChar->checkIndex->while->while->getChar->if->return->j->start->k->while->if->getChar->continue->return
StringUTF16#isBigEndian()::: string f16 is big endian:::
StringUTF16#getChars(int, int, byte[]):::This is a variant of Integer#getChars(int, int, byte[]), but for UTF-16 coder.:::q->r->charPos->negative->if->while->putChar->putChar->putChar->if->putChar->if->putChar->return
StringUTF16#getChars(long, int, byte[]):::This is a variant of Long#getChars(long, int, byte[]), but for UTF-16 coder.:::q->r->charPos->negative->if->while->putChar->putChar->q2->i2->while->putChar->putChar->putChar->if->putChar->if->putChar->return
StringUTF16#checkIndex(int, byte[])::: string f16 check index:::String->length->checkIndex
StringUTF16#checkOffset(int, byte[])::: string f16 check offset:::String->length->checkOffset
StringUTF16#checkBoundsBeginEnd(int, int, byte[])::: string f16 check bounds begin end:::String->length->checkBoundsBeginEnd
StringUTF16#checkBoundsOffCount(int, int, byte[])::: string f16 check bounds off count:::String->length->checkBoundsOffCount
System#registerNatives()::: system register natives:::
System#setIn(InputStream):::Reassigns the "standard" input stream:::checkIO->setIn0
System#setOut(PrintStream):::Reassigns the "standard" output stream:::checkIO->setOut0
System#setErr(PrintStream):::Reassigns the "standard" error output stream:::checkIO->setErr0
System#console():::Returns the unique java.io.Console Console object associated with the current Java virtual machine, if any.:::c->if->synchronized->if->SharedSecrets->getJavaIOAccess->console->return
System#inheritedChannel():::Returns the channel inherited from the entity that created this Java virtual machine:::return->SelectorProvider->provider->inheritedChannel
System#checkIO()::: system check o:::sm->getSecurityManager->if->sm->new->RuntimePermission->checkPermission
System#setIn0(InputStream)::: system set in0:::
System#setOut0(PrintStream)::: system set out0:::
System#setErr0(PrintStream)::: system set err0:::
System#setSecurityManager(SecurityManager):::Sets the System security:::if->getResource->DefaultFileSystemProvider->theFileSystem->if->try->s->checkPackageAccess->catch->finally->setSecurityManager0
System#setSecurityManager0(SecurityManager)::: system set security manager0:::sm->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->if->s->getClass->getClassLoader->AccessController->new->PrivilegedAction<>->doPrivileged
System#getSecurityManager():::Gets the system security interface.:::return
System#currentTimeMillis():::Returns the current time in milliseconds:::
System#nanoTime():::Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds:::
System#arraycopy(Object, int, Object, int, int):::Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array:::
System#identityHashCode(Object):::Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode():::
System#initProperties(Properties)::: system init properties:::
System#getProperties():::Determines the current system properties:::sm->getSecurityManager->if->sm->checkPropertiesAccess->return
System#lineSeparator():::Returns the system-dependent line separator string:::return
System#setProperties(Properties):::Sets the system properties to the Properties argument:::sm->getSecurityManager->if->sm->checkPropertiesAccess->if->new->Properties->initProperties->VersionProps->init
System#getProperty(String):::Gets the system property indicated by the specified key:::checkKey->sm->getSecurityManager->if->sm->checkPropertyAccess->return->props->getProperty
System#getProperty(String, String):::Gets the system property indicated by the specified key:::checkKey->sm->getSecurityManager->if->sm->checkPropertyAccess->return->props->getProperty
System#setProperty(String, String):::Sets the system property indicated by the specified key:::checkKey->sm->getSecurityManager->if->sm->new->PropertyPermission->checkPermission->return->props->setProperty
System#clearProperty(String):::Removes the system property indicated by the specified key:::checkKey->sm->getSecurityManager->if->sm->new->PropertyPermission->checkPermission->return->props->remove
System#checkKey(String)::: system check key:::if->throw->new->NullPointerException->if->key->equals->throw->new->IllegalArgumentException
System#getenv(String):::Gets the value of the specified environment variable:::sm->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return->ProcessEnvironment->getenv
System#getenv():::Returns an unmodifiable string map view of the current system environment:::sm->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return->ProcessEnvironment->getenv
System.Logger#getName():::Returns the name of this logger.:::
System.Logger#isLoggable(Level):::Checks if a message of the given level would be logged by this logger.:::
System.Logger#log(Level, String):::Logs a message.:::log
System.Logger#log(Level, Supplier):::Logs a lazily supplied message:::Objects->requireNonNull->if->Objects->requireNonNull->isLoggable->msgSupplier->get->log
System.Logger#log(Level, Object):::Logs a message produced from the given object:::Objects->requireNonNull->if->Objects->requireNonNull->isLoggable->this->obj->toString->log
System.Logger#log(Level, String, Throwable):::Logs a message associated with a given throwable.:::this->log
System.Logger#log(Level, Supplier, Throwable):::Logs a lazily supplied message associated with a given throwable:::Objects->requireNonNull->if->Objects->requireNonNull->isLoggable->this->msgSupplier->get->log
System.Logger#log(Level, String, Object...):::Logs a message with an optional list of parameters.:::this->log
System.Logger#log(Level, ResourceBundle, String, Throwable):::Logs a localized message associated with a given throwable:::
System.Logger#log(Level, ResourceBundle, String, Object...):::Logs a message with resource bundle and an optional list of parameters:::
System.LoggerFinder#checkPermission()::: logger finder check permission:::sm->System->getSecurityManager->if->sm->checkPermission->return
System.LoggerFinder#getLogger(String, Module):::Returns an instance of Logger Logger for the given module.:::
System.LoggerFinder#getLocalizedLogger(String, ResourceBundle, Module):::Returns a localizable instance of Logger Logger for the given module:::return->getLogger->new->LocalizedLoggerWrapper<>
System.LoggerFinder#getLoggerFinder():::Returns the LoggerFinder instance:::sm->System->getSecurityManager->if->sm->checkPermission->return->accessProvider
System.LoggerFinder#accessProvider()::: logger finder access provider:::if->pa->LoggerFinderLoader->getLoggerFinder->AccessController->doPrivileged->return
System#getLogger(String):::Returns an instance of Logger Logger for the caller's use.:::Objects->requireNonNull->caller->Reflection->getCallerClass->if->throw->new->IllegalCallerException->return->LazyLoggers->caller->getModule->getLogger
System#getLogger(String, ResourceBundle):::Returns a localizable instance of Logger Logger for the caller's use:::rb->Objects->requireNonNull->Objects->requireNonNull->caller->Reflection->getCallerClass->if->throw->new->IllegalCallerException->sm->System->getSecurityManager->if->pa->LoggerFinder->accessProvider->caller->getModule->getLocalizedLogger->return->AccessController->doPrivileged->return->LoggerFinder->accessProvider->caller->getModule->getLocalizedLogger
System#exit(int):::Terminates the currently running Java Virtual Machine:::Runtime->getRuntime->exit
System#gc():::Runs the garbage collector:::Runtime->getRuntime->gc
System#runFinalization():::Runs the finalization methods of any objects pending finalization:::Runtime->getRuntime->runFinalization
System#load(String):::Loads the native library specified by the filename argument:::Runtime->getRuntime->Reflection->getCallerClass->load0
System#loadLibrary(String):::Loads the native library specified by the libname argument:::Runtime->getRuntime->Reflection->getCallerClass->loadLibrary0
System#mapLibraryName(String):::Maps a library name into a platform-specific string representing a native library.:::
System#newPrintStream(FileOutputStream, String):::Create PrintStream for stdout/err based on encoding.:::if->try->return->new->BufferedOutputStream->new->PrintStream->catch->finally->return->new->BufferedOutputStream->new->PrintStream
System#logInitException(boolean, boolean, String, Throwable):::Logs an exception/error at initialization time to stdout or stderr.:::if->VM->initLevel->throw->new->InternalError->log->if->log->println->if->e->printStackTrace->else->log->println->foreach->e->getSuppressed->log->println->cause->e->getCause->if->log->println
System#initPhase1():::Initialize the system class:::new->Properties->initProperties->VersionProps->init->VM->saveAndRemoveProperties->props->getProperty->StaticProperty->javaHome->fdIn->new->FileInputStream->fdOut->new->FileOutputStream->fdErr->new->FileOutputStream->new->BufferedInputStream->setIn0->props->getProperty->newPrintStream->setOut0->props->getProperty->newPrintStream->setErr0->Terminator->setup->VM->initializeOSEnvironment->current->Thread->currentThread->current->getThreadGroup->add->setJavaLangAccess->VM->initLevel
System#initPhase2(boolean, boolean)::: system init phase2:::try->ModuleBootstrap->boot->catch->logInitException->return->finally->VM->initLevel->return
System#initPhase3()::: system init phase3:::cn->System->getProperty->if->if->cn->isEmpty->equals->System->new->SecurityManager->setSecurityManager->else->try->c->Class->ClassLoader->getBuiltinAppClassLoader->forName->ctor->c->getConstructor->if->isAssignableFrom->Modifier->c->getModifiers->isPublic->Modifier->ctor->getModifiers->isPublic->throw->ctor->toString->new->Error->ctor->setAccessible->sm->ctor->newInstance->System->setSecurityManager->catch->throw->new->Error->finally->VM->initLevel->scl->ClassLoader->initSystemClassLoader->Thread->currentThread->setContextClassLoader->VM->initLevel
System#setJavaLangAccess()::: system set java lang access:::SharedSecrets->new->JavaLangAccess->setJavaLangAccess
Terminator#setup()::: terminator setup:::if->return->sh->new->Signal.Handler->try->Signal->new->Signal->handle->catch->finally->try->Signal->new->Signal->handle->catch->finally
Terminator#teardown()::: terminator teardown:::
Thread#registerNatives()::: thread register natives:::
Thread#nextThreadNum()::: thread next thread num:::return
Thread#nextThreadID()::: thread next thread d:::return
Thread#blockedOn(Interruptible)::: thread blocked on:::me->Thread->currentThread->synchronized
Thread#currentThread():::Returns a reference to the currently executing thread object.:::
Thread#yield():::A hint to the scheduler that the current thread is willing to yield its current use of a processor:::
Thread#sleep(long):::Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers:::
Thread#sleep(long, int):::Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->sleep
Thread#onSpinWait():::Indicates that the caller is momentarily unable to progress, until the occurrence of one or more actions on the part of other activities:::
Thread#clone():::Throws CloneNotSupportedException as a Thread can not be meaningfully cloned:::throw->new->CloneNotSupportedException
Thread#start():::Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread:::if->throw->new->IllegalThreadStateException->group->add->started->try->start0->catch->finally->try->if->group->threadStartFailed->catch->finally
Thread#start0()::: thread start0:::
Thread#run():::If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns:::if->target->run
Thread#exit():::This method is called by the system to give a Thread a chance to clean up before it actually exits.:::if->isPresent->TerminatingThreadLocal->threadTerminated->if->group->threadTerminated
Thread#stop():::Forces the thread to stop executing:::security->System->getSecurityManager->if->checkAccess->if->Thread->currentThread->security->checkPermission->if->resume->new->ThreadDeath->stop0
Thread#interrupt():::Interrupts this thread:::if->Thread->currentThread->checkAccess->synchronized->b->if->interrupt0->b->interrupt->return->interrupt0
Thread#interrupted():::Tests whether the current thread has been interrupted:::return->currentThread->isInterrupted
Thread#isInterrupted():::Tests whether this thread has been interrupted:::return->isInterrupted
Thread#isInterrupted(boolean):::Tests if some Thread has been interrupted:::
Thread#isAlive():::Tests if this thread is alive:::
Thread#suspend():::Suspends this thread:::checkAccess->suspend0
Thread#resume():::Resumes a suspended thread:::checkAccess->resume0
Thread#setPriority(int):::Changes the priority of this thread:::g->checkAccess->if->throw->new->IllegalArgumentException->if->getThreadGroup->if->g->getMaxPriority->g->getMaxPriority->setPriority0
Thread#getPriority():::Returns this thread's priority.:::return
Thread#setName(String):::Changes the name of this thread to be equal to the argument name:::checkAccess->if->throw->new->NullPointerException->if->setNativeName
Thread#getName():::Returns this thread's name.:::return
Thread#getThreadGroup():::Returns the thread group to which this thread belongs:::return
Thread#activeCount():::Returns an estimate of the number of active threads in the current thread's java.lang.ThreadGroup thread group and its subgroups:::return->currentThread->getThreadGroup->activeCount
Thread#enumerate(Thread[]):::Copies into the specified array every active thread in the current thread's thread group and its subgroups:::return->currentThread->getThreadGroup->enumerate
Thread#countStackFrames():::Counts the number of stack frames in this thread:::
Thread#join(long):::Waits at most millis milliseconds for this thread to die:::base->System->currentTimeMillis->now->if->throw->new->IllegalArgumentException->if->while->isAlive->wait->else->while->isAlive->delay->if->break->wait->System->currentTimeMillis
Thread#join(long, int):::Waits at most millis milliseconds plus nanos nanoseconds for this thread to die:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->join
Thread#join():::Waits for this thread to die:::join
Thread#dumpStack():::Prints a stack trace of the current thread to the standard error stream:::new->Exception->printStackTrace
Thread#setDaemon(boolean):::Marks this thread as either a #isDaemon daemon thread or a user thread:::checkAccess->if->isAlive->throw->new->IllegalThreadStateException
Thread#isDaemon():::Tests if this thread is a daemon thread.:::return
Thread#checkAccess():::Determines if the currently running thread has permission to modify this thread:::security->System->getSecurityManager->if->security->checkAccess
Thread#toString():::Returns a string representation of this thread, including the thread's name, priority, and thread group.:::group->getThreadGroup->if->return->getName->getPriority->group->getName->else->return->getName->getPriority
Thread#getContextClassLoader():::Returns the context ClassLoader for this thread:::if->return->sm->System->getSecurityManager->if->ClassLoader->Reflection->getCallerClass->checkClassLoaderPermission->return
Thread#setContextClassLoader(ClassLoader):::Sets the context ClassLoader for this Thread:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission
Thread#holdsLock(Object):::Returns true if and only if the current thread holds the monitor lock on the specified object:::
Thread#getStackTrace():::Returns an array of stack trace elements representing the stack dump of this thread:::if->Thread->currentThread->security->System->getSecurityManager->if->security->checkPermission->if->isAlive->return->stackTraceArray->new->ThreadArr->dumpThreads->stackTrace->if->return->else->return->new->Exception->getStackTrace
Thread#getAllStackTraces():::Returns a map of stack traces for all live threads:::security->System->getSecurityManager->if->security->checkPermission->security->checkPermission->threads->getThreads->traces->dumpThreads->m->new->HashMap<>->for->i->return
Thread#isCCLOverridden(Class):::Verifies that this (possibly subclass) instance can be constructed without violating security constraints: the subclass must not override security-sensitive non-final methods, or else the "enableContextClassLoaderOverride" RuntimePermission is checked.:::if->return->processQueue->key->new->WeakClassKey->result->get->if->Boolean->auditSubclass->valueOf->putIfAbsent->return->result->booleanValue
Thread#auditSubclass(Class):::Performs reflective checks on given subclass to verify that it doesn't override security-sensitive non-final methods:::result->AccessController->new->PrivilegedAction<>->doPrivileged->return->result->booleanValue
Thread#dumpThreads(Thread[])::: thread dump threads:::
Thread#getThreads()::: thread get threads:::
Thread#getId():::Returns the identifier of this Thread:::return
Thread#getState():::Returns the state of this thread:::return->toThreadState
Thread.UncaughtExceptionHandler#uncaughtException(Thread, Throwable):::Method invoked when the given thread terminates due to the given uncaught exception:::
Thread#setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler):::Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission
Thread#getDefaultUncaughtExceptionHandler():::Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception:::return
Thread#getUncaughtExceptionHandler():::Returns the handler invoked when this thread abruptly terminates due to an uncaught exception:::return
Thread#setUncaughtExceptionHandler(UncaughtExceptionHandler):::Set the handler invoked when this thread abruptly terminates due to an uncaught exception:::checkAccess
Thread#dispatchUncaughtException(Throwable):::Dispatch an uncaught exception to the handler:::getUncaughtExceptionHandler->uncaughtException
Thread#processQueue(ReferenceQueue>, ConcurrentMap>, ?>):::Removes from the specified map any keys that have been enqueued on the specified reference queue.:::ref->while->queue->poll->map->remove
Thread.WeakClassKey#hashCode():::Returns the identity hash code of the original referent.:::return
Thread.WeakClassKey#equals(Object):::Returns true if the given object is this identical WeakClassKey instance, or, if this object's referent has not been cleared, if the given object is another WeakClassKey instance with the identical non-null referent as this one.:::if->return->if->referent->get->return->get->else->return
Thread#setPriority0(int)::: thread set priority0:::
Thread#stop0(Object)::: thread stop0:::
Thread#suspend0()::: thread suspend0:::
Thread#resume0()::: thread resume0:::
Thread#interrupt0()::: thread interrupt0:::
Thread#setNativeName(String)::: thread set native name:::
ThreadGroup#checkParentAccess(ThreadGroup)::: thread group check parent access:::parent->checkAccess->return
ThreadGroup#getName():::Returns the name of this thread group.:::return
ThreadGroup#getParent():::Returns the parent of this thread group:::if->parent->checkAccess->return
ThreadGroup#getMaxPriority():::Returns the maximum priority of this thread group:::return
ThreadGroup#isDaemon():::Tests if this thread group is a daemon thread group:::return
ThreadGroup#isDestroyed():::Tests if this thread group has been destroyed.:::return
ThreadGroup#setDaemon(boolean):::Changes the daemon status of this thread group:::checkAccess
ThreadGroup#setMaxPriority(int):::Sets the maximum priority of the group:::ngroupsSnapshot->groupsSnapshot->synchronized->checkAccess->if->return->Math->min->if->Arrays->copyOf->else->for->i
ThreadGroup#parentOf(ThreadGroup):::Tests if this thread group is either the thread group argument or one of its ancestor thread groups.:::for->return
ThreadGroup#checkAccess():::Determines if the currently running thread has permission to modify this thread group:::security->System->getSecurityManager->if->security->checkAccess
ThreadGroup#activeCount():::Returns an estimate of the number of active threads in this thread group and its subgroups:::result->ngroupsSnapshot->groupsSnapshot->synchronized->if->return->if->Arrays->copyOf->else->for->i->return
ThreadGroup#enumerate(Thread[]):::Copies into the specified array every active thread in this thread group and its subgroups:::checkAccess->return->enumerate
ThreadGroup#enumerate(Thread[], boolean):::Copies into the specified array every active thread in this thread group:::checkAccess->return->enumerate
ThreadGroup#enumerate(Thread[], int, boolean)::: thread group enumerate:::ngroupsSnapshot->groupsSnapshot->synchronized->if->return->nt->if->for->i->if->if->Arrays->copyOf->else->if->for->i->return
ThreadGroup#activeGroupCount():::Returns an estimate of the number of active groups in this thread group and its subgroups:::ngroupsSnapshot->groupsSnapshot->synchronized->if->return->if->Arrays->copyOf->else->n->for->i->return
ThreadGroup#enumerate(ThreadGroup[]):::Copies into the specified array references to every active subgroup in this thread group and its subgroups:::checkAccess->return->enumerate
ThreadGroup#enumerate(ThreadGroup[], boolean):::Copies into the specified array references to every active subgroup in this thread group:::checkAccess->return->enumerate
ThreadGroup#enumerate(ThreadGroup[], int, boolean)::: thread group enumerate:::ngroupsSnapshot->groupsSnapshot->synchronized->if->return->ng->if->if->System->arraycopy->if->if->Arrays->copyOf->else->if->for->i->return
ThreadGroup#stop():::Stops all threads in this thread group:::if->stopOrSuspend->Thread->currentThread->stop
ThreadGroup#interrupt():::Interrupts all threads in this thread group:::ngroupsSnapshot->groupsSnapshot->synchronized->checkAccess->for->i->if->Arrays->copyOf->else->for->i
ThreadGroup#suspend():::Suspends all threads in this thread group:::if->stopOrSuspend->Thread->currentThread->suspend
ThreadGroup#stopOrSuspend(boolean):::Helper method: recursively stops or suspends (as directed by the boolean argument) all of the threads in this thread group and its subgroups, except the current thread:::suicide->us->Thread->currentThread->ngroupsSnapshot->groupsSnapshot->synchronized->checkAccess->for->i->if->Arrays->copyOf->for->i->return
ThreadGroup#resume():::Resumes all threads in this thread group:::ngroupsSnapshot->groupsSnapshot->synchronized->checkAccess->for->i->if->Arrays->copyOf->else->for->i
ThreadGroup#destroy():::Destroys this thread group and all of its subgroups:::ngroupsSnapshot->groupsSnapshot->synchronized->checkAccess->if->throw->new->IllegalThreadStateException->if->Arrays->copyOf->else->if->for->i->if->parent->remove
ThreadGroup#add(ThreadGroup):::Adds the specified Thread group to this group.:::synchronized->if->throw->new->IllegalThreadStateException->if->new->ThreadGroupArr->else->if->Arrays->copyOf
ThreadGroup#remove(ThreadGroup):::Removes the specified Thread group from this group.:::synchronized->if->return->for->i->if->notifyAll->if->destroy
ThreadGroup#addUnstarted():::Increments the count of unstarted threads in the thread group:::synchronized->if->throw->new->IllegalThreadStateException
ThreadGroup#add(Thread):::Adds the specified thread to this thread group:::synchronized->if->throw->new->IllegalThreadStateException->if->new->ThreadArr->else->if->Arrays->copyOf
ThreadGroup#threadStartFailed(Thread):::Notifies the group that the thread t has failed an attempt to start:::synchronized->remove
ThreadGroup#threadTerminated(Thread):::Notifies the group that the thread t has terminated:::synchronized->remove->if->notifyAll->if->destroy
ThreadGroup#remove(Thread):::Removes the specified Thread from this group:::synchronized->if->return->for->i
ThreadGroup#list():::Prints information about this thread group to the standard output:::list
ThreadGroup#list(PrintStream, int)::: thread group list:::ngroupsSnapshot->groupsSnapshot->synchronized->for->j->out->println->for->i->if->Arrays->copyOf->else->for->i
ThreadGroup#uncaughtException(Thread, Throwable):::Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception, and the thread does not have a specific Thread.UncaughtExceptionHandler installed:::if->parent->uncaughtException->else->ueh->Thread->getDefaultUncaughtExceptionHandler->if->ueh->uncaughtException->else->if->t->getName->print->e->printStackTrace
ThreadGroup#allowThreadSuspension(boolean):::Used by VM to control lowmem implicit suspension.:::return
ThreadGroup#toString():::Returns a string representation of this Thread group.:::return->getClass->getName->getName
ThreadLocal#nextHashCode():::Returns the next hash code.:::return->nextHashCode->getAndAdd
ThreadLocal#initialValue():::Returns the current thread's "initial value" for this thread-local variable:::return
ThreadLocal#withInitial(Supplier):::Creates a thread local variable:::return->new->SuppliedThreadLocal<>
ThreadLocal#get():::Returns the value in the current thread's copy of this thread-local variable:::t->Thread->currentThread->map->getMap->if->e->map->getEntry->if->result->return->return->setInitialValue
ThreadLocal#isPresent():::Returns true if there is a value in the current thread's copy of this thread-local variable, even if that values is null.:::t->Thread->currentThread->map->getMap->return->map->getEntry
ThreadLocal#setInitialValue():::Variant of set() to establish initialValue:::value->initialValue->t->Thread->currentThread->map->getMap->if->map->set->else->createMap->if->TerminatingThreadLocal->register->return
ThreadLocal#set(T):::Sets the current thread's copy of this thread-local variable to the specified value:::t->Thread->currentThread->map->getMap->if->map->set->else->createMap
ThreadLocal#remove():::Removes the current thread's value for this thread-local variable:::m->Thread->currentThread->getMap->if->m->remove
ThreadLocal#getMap(Thread):::Get the map associated with a ThreadLocal:::return
ThreadLocal#createMap(Thread, T):::Create the map associated with a ThreadLocal:::new->ThreadLocalMap
ThreadLocal#createInheritedMap(ThreadLocalMap):::Factory method to create map of inherited thread locals:::return->new->ThreadLocalMap
ThreadLocal#childValue(T):::Method childValue is visibly defined in subclass InheritableThreadLocal, but is internally defined here for the sake of providing createInheritedMap factory method without needing to subclass the map class in InheritableThreadLocal:::throw->new->UnsupportedOperationException
ThreadLocal.SuppliedThreadLocal#initialValue()::: supplied thread local initial value:::return->supplier->get
ThreadLocal.ThreadLocalMap#setThreshold(int):::Set the resize threshold to maintain at worst a 2/3 load factor.:::
ThreadLocal.ThreadLocalMap#nextIndex(int, int):::Increment i modulo len.:::return
ThreadLocal.ThreadLocalMap#prevIndex(int, int):::Decrement i modulo len.:::return
ThreadLocal.ThreadLocalMap#getEntry(ThreadLocal):::Get the entry associated with key:::i->e->if->e->get->return->else->return->getEntryAfterMiss
ThreadLocal.ThreadLocalMap#getEntryAfterMiss(ThreadLocal, int, Entry):::Version of getEntry method for use when key is not found in its direct hash slot.:::tab->len->while->k->e->get->if->return->if->expungeStaleEntry->else->nextIndex->return
ThreadLocal.ThreadLocalMap#set(ThreadLocal, Object):::Set the value associated with key.:::tab->len->i->for->e->nextIndex->new->Entry->sz->if->cleanSomeSlots->rehash
ThreadLocal.ThreadLocalMap#remove(ThreadLocal):::Remove the entry for key.:::tab->len->i->for->e->nextIndex
ThreadLocal.ThreadLocalMap#replaceStaleEntry(ThreadLocal, Object, int):::Replace a stale entry encountered during a set operation with an entry for the specified key:::tab->len->e->slotToExpunge->for->i->prevIndex->prevIndex->for->i->nextIndex->nextIndex->new->Entry->if->expungeStaleEntry->cleanSomeSlots
ThreadLocal.ThreadLocalMap#expungeStaleEntry(int):::Expunge a stale entry by rehashing any possibly colliding entries lying between staleSlot and the next null slot:::tab->len->e->i->for->nextIndex->nextIndex->return
ThreadLocal.ThreadLocalMap#cleanSomeSlots(int, int):::Heuristically scan some cells looking for stale entries:::removed->tab->len->do->nextIndex->e->if->e->get->expungeStaleEntry->while->return
ThreadLocal.ThreadLocalMap#rehash():::Re-pack and/or re-size the table:::expungeStaleEntries->if->resize
ThreadLocal.ThreadLocalMap#resize():::Double the capacity of the table.:::oldTab->oldLen->newLen->newTab->new->EntryArr->count->foreach->if->k->e->get->if->else->h->while->nextIndex->setThreshold
ThreadLocal.ThreadLocalMap#expungeStaleEntries():::Expunge all stale entries in the table.:::tab->len->for->j
Throwable#getMessage():::Returns the detail message string of this throwable.:::return
Throwable#getLocalizedMessage():::Creates a localized description of this throwable:::return->getMessage
Throwable#getCause():::Returns the cause of this throwable or null if the cause is nonexistent or unknown:::return
Throwable#initCause(Throwable):::Initializes the cause of this throwable to the specified value:::if->throw->Objects->toString->new->IllegalStateException->if->throw->new->IllegalArgumentException->return
Throwable#toString():::Returns a short description of this throwable:::s->getClass->getName->message->getLocalizedMessage->return
Throwable#printStackTrace():::Prints this throwable and its backtrace to the standard error stream:::printStackTrace
Throwable#printStackTrace(PrintStream):::Prints this throwable and its backtrace to the specified print stream.:::new->WrappedPrintStream->printStackTrace
Throwable#printStackTrace(PrintStreamOrWriter)::: throwable print stack trace:::dejaVu->Collections->new->IdentityHashMap<>->newSetFromMap->dejaVu->add->synchronized->s->lock->s->println->trace->getOurStackTrace->foreach->s->println->foreach->getSuppressed->se->printEnclosedStackTrace->ourCause->getCause->if->ourCause->printEnclosedStackTrace
Throwable#printEnclosedStackTrace(PrintStreamOrWriter, StackTraceElement[], String, String, Set):::Print our stack trace as an enclosed exception for the specified stack trace.:::if->dejaVu->contains->s->println->else->dejaVu->add->trace->getOurStackTrace->m->n->while->equals->framesInCommon->s->println->for->i->if->s->println->foreach->getSuppressed->se->printEnclosedStackTrace->ourCause->getCause->if->ourCause->printEnclosedStackTrace
Throwable#printStackTrace(PrintWriter):::Prints this throwable and its backtrace to the specified print writer.:::new->WrappedPrintWriter->printStackTrace
Throwable.PrintStreamOrWriter#lock():::Returns the object to be locked when using this StreamOrWriter:::
Throwable.PrintStreamOrWriter#println(Object):::Prints the specified string as a line on this StreamOrWriter:::
Throwable.WrappedPrintStream#lock()::: wrapped print stream lock:::return
Throwable.WrappedPrintStream#println(Object)::: wrapped print stream println:::printStream->println
Throwable.WrappedPrintWriter#lock()::: wrapped print writer lock:::return
Throwable.WrappedPrintWriter#println(Object)::: wrapped print writer println:::printWriter->println
Throwable#fillInStackTrace():::Fills in the execution stack trace:::if->fillInStackTrace->return
Throwable#fillInStackTrace(int)::: throwable fill in stack trace:::
Throwable#getStackTrace():::Provides programmatic access to the stack trace information printed by #printStackTrace():::return->getOurStackTrace->clone
Throwable#getOurStackTrace()::: throwable get our stack trace:::if->StackTraceElement->of->else->if->return->return
Throwable#setStackTrace(StackTraceElement[]):::Sets the stack trace elements that will be returned by #getStackTrace() and printed by #printStackTrace() and related methods:::defensiveCopy->stackTrace->clone->for->i->synchronized->if->return
Throwable#readObject(ObjectInputStream):::Reads a Throwable from a stream, enforcing well-formedness constraints on fields:::s->defaultReadObject->candidateSuppressedExceptions->candidateStackTrace->UNASSIGNED_STACK->clone->if->suppressedSize->validateSuppressedExceptionsList->if->suppList->Math->min->new->ArrayList<Throwable>->foreach->if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->suppList->add->else->if->candidateStackTrace->clone->if->if->equals->else->foreach->if->throw->new->NullPointerException
Throwable#validateSuppressedExceptionsList(List)::: throwable validate suppressed exceptions list:::if->getModule->deserSuppressedExceptions->getClass->getModule->equals->throw->new->StreamCorruptedException->else->size->deserSuppressedExceptions->size->if->throw->new->StreamCorruptedException->return
Throwable#writeObject(ObjectOutputStream):::Write a Throwable object to a stream:::getOurStackTrace->oldStackTrace->try->if->s->defaultWriteObject->catch->finally
Throwable#addSuppressed(Throwable):::Appends the specified exception to the exceptions that were suppressed in order to deliver this exception:::if->throw->new->IllegalArgumentException->if->throw->new->NullPointerException->if->return->if->new->ArrayList<>->suppressedExceptions->add
Throwable#getSuppressed():::Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception:::if->return->else->return->suppressedExceptions->toArray
TypeNotPresentException#typeName():::Returns the fully qualified name of the unavailable type.:::return
VersionProps#init(Properties)::: version props init:::props->put->props->put->props->put->props->put->if->VENDOR_VERSION->isEmpty->props->put->props->put
VersionProps#parseVersionNumber(String, int, int)::: version props parse version number:::if->Character->version->charAt->digit->throw->version->substring->new->IllegalArgumentException->return->Integer->parseInt
VersionProps#parseVersionNumbers(String)::: version props parse version numbers:::size->prevIndex->do->version->indexOf->while->verNumbers->new->IntegerArr->n->index->version->indexOf->while->parseVersionNumber->version->indexOf->version->length->parseVersionNumber->if->throw->Arrays->toString->new->IllegalArgumentException->return->List->of
VersionProps#versionNumbers()::: version props version numbers:::return->parseVersionNumbers
VersionProps#pre()::: version props pre:::return->optionalOf
VersionProps#build()::: version props build:::return->VERSION_BUILD->isEmpty->Optional->empty->Optional->Integer->parseInt->of
VersionProps#optional()::: version props optional:::return->optionalOf
VersionProps#optionalOf(String)::: version props optional of:::if->value->isEmpty->return->Optional->of->else->return->Optional->empty
VersionProps#print(boolean):::In case you were wondering this method is called by java -version.:::print
VersionProps#println(boolean):::This is the same as print except that it adds an extra line-feed at the end, typically used by the -showversion in the launcher:::print
VersionProps#print(boolean, boolean):::Print version info.:::ps->if->ps->println->else->ps->println->jdk_debug_level->System->getProperty->if->equals->else->vendor_version->VENDOR_VERSION->isEmpty->ps->println->java_vm_name->System->getProperty->java_vm_version->System->getProperty->java_vm_info->System->getProperty->ps->println
WeakPairMap#containsKeyPair(K1, K2):::Tests if the specified pair of keys are associated with a value in the WeakPairMap.:::expungeStaleAssociations->return->map->Pair->lookup->containsKey
WeakPairMap#get(K1, K2):::Returns the value to which the specified pair of keys is mapped, or null if this WeakPairMap contains no mapping for the key pair:::expungeStaleAssociations->return->map->Pair->lookup->get
WeakPairMap#put(K1, K2, V):::Maps the specified key pair to the specified value in this WeakPairMap:::expungeStaleAssociations->return->map->Pair->weak->put
WeakPairMap#putIfAbsent(K1, K2, V):::If the specified key pair is not already associated with a value, associates it with the given value and returns null, else does nothing and returns the currently associated value.:::expungeStaleAssociations->return->map->Pair->weak->putIfAbsent
WeakPairMap#computeIfAbsent(K1, K2, BiFunction):::If the specified key pair is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this WeakPairMap unless null:::expungeStaleAssociations->try->return->map->Pair->weak->mappingFunction->pair->first->pair->second->apply->computeIfAbsent->catch->finally->Reference->reachabilityFence->Reference->reachabilityFence
WeakPairMap#values():::Returns a Collection view of the values contained in this WeakPairMap:::expungeStaleAssociations->return->map->values
WeakPairMap#expungeStaleAssociations():::Removes associations from this WeakPairMap for which at least one of the keys in key pair has been found weakly-reachable and corresponding WeakRefPeer(s) enqueued:::peer->while->queue->poll->map->peer->weakPair->remove
WeakPairMap.Pair#weak(K1, K2, ReferenceQueue)::: pair weak:::return->new->Weak<>
WeakPairMap.Pair#lookup(K1, K2)::: pair lookup:::return->new->Lookup<>
WeakPairMap.Pair#first()::: pair first:::
WeakPairMap.Pair#second()::: pair second:::
WeakPairMap.Pair#hashCode(Object, Object)::: pair hash code:::return->System->identityHashCode->System->identityHashCode
WeakPairMap.Pair#equals(Object, Object, Pair)::: pair equals:::return->p->first->p->second
WeakPairMap.Pair.Weak#weakPair()::: weak weak pair:::return
WeakPairMap.Pair.Weak#first()::: weak first:::return->get
WeakPairMap.Pair.Weak#second()::: weak second:::return->peer->get
WeakPairMap.Pair.Weak#hashCode()::: weak hash code:::return
WeakPairMap.Pair.Weak#equals(Object)::: weak equals:::return->Pair->first->second->equals
WeakPairMap.Pair.Lookup#first()::: lookup first:::return
WeakPairMap.Pair.Lookup#second()::: lookup second:::return
WeakPairMap.Pair.Lookup#hashCode()::: lookup hash code:::return->Pair->hashCode
WeakPairMap.Pair.Lookup#equals(Object)::: lookup equals:::return->Pair->equals
WeakPairMap.WeakRefPeer#weakPair()::: weak ref peer weak pair:::

CharPredicates#forUnicodeScript(String):::Returns a predicate matching all characters belong to a named UnicodeScript.
CharPredicates#forUnicodeBlock(String):::Returns a predicate matching all characters in a UnicodeBlock.
CharPredicates#ASCII_DIGIT():::Posix ASCII variants, not in the lookup map
Grapheme#isBoundary(int, int):::Determines if there is an extended  grapheme cluster boundary between two continuing characters cp1 and cp2
Matcher#pattern():::Returns the pattern that is interpreted by this matcher.
Matcher#toMatchResult():::Returns the match state of this matcher as a MatchResult
Matcher#usePattern(Pattern):::Changes the Pattern that this Matcher uses to find matches with
Matcher#reset():::Resets this matcher
Matcher#reset(CharSequence):::Resets this matcher with a new input sequence
Matcher#start():::Returns the start index of the previous match.
Matcher#start(int):::Returns the start index of the subsequence captured by the given group during the previous match operation
Matcher#start(String):::Returns the start index of the subsequence captured by the given named-capturing group during the previous match operation.
Matcher#end():::Returns the offset after the last character matched.
Matcher#end(int):::Returns the offset after the last character of the subsequence captured by the given group during the previous match operation
Matcher#end(String):::Returns the offset after the last character of the subsequence captured by the given named-capturing group during the previous match operation.
Matcher#group():::Returns the input subsequence matched by the previous match
Matcher#group(int):::Returns the input subsequence captured by the given group during the previous match operation
Matcher#group(String):::Returns the input subsequence captured by the given named-capturing group during the previous match operation
Matcher#groupCount():::Returns the number of capturing groups in this matcher's pattern
Matcher#matches():::Attempts to match the entire region against the pattern
Matcher#find():::Attempts to find the next subsequence of the input sequence that matches the pattern
Matcher#find(int):::Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index
Matcher#lookingAt():::Attempts to match the input sequence, starting at the beginning of the region, against the pattern
Matcher#quoteReplacement(String):::Returns a literal replacement String for the specified String
Matcher#appendReplacement(StringBuffer, String):::Implements a non-terminal append-and-replace step
Matcher#appendReplacement(StringBuilder, String):::Implements a non-terminal append-and-replace step
Matcher#appendTail(StringBuffer):::Implements a terminal append-and-replace step
Matcher#appendTail(StringBuilder):::Implements a terminal append-and-replace step
Matcher#replaceAll(String):::Replaces every subsequence of the input sequence that matches the pattern with the given replacement string
Matcher#replaceAll(Function):::Replaces every subsequence of the input sequence that matches the pattern with the result of applying the given replacer function to the match result of this matcher corresponding to that subsequence
Matcher#results():::Returns a stream of match results for each subsequence of the input sequence that matches the pattern
Matcher#replaceFirst(String):::Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string
Matcher#replaceFirst(Function):::Replaces the first subsequence of the input sequence that matches the pattern with the result of applying the given replacer function to the match result of this matcher corresponding to that subsequence
Matcher#region(int, int):::Sets the limits of this matcher's region
Matcher#regionStart():::Reports the start index of this matcher's region
Matcher#regionEnd():::Reports the end index (exclusive) of this matcher's region
Matcher#hasTransparentBounds():::Queries the transparency of region bounds for this matcher
Matcher#useTransparentBounds(boolean):::Sets the transparency of region bounds for this matcher
Matcher#hasAnchoringBounds():::Queries the anchoring of region bounds for this matcher
Matcher#useAnchoringBounds(boolean):::Sets the anchoring of region bounds for this matcher
Matcher#toString():::Returns the string representation of this matcher
Matcher#hitEnd():::Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher
Matcher#requireEnd():::Returns true if more input could change a positive match into a negative one
Matcher#search(int):::Initiates a search to find a Pattern within the given bounds
Matcher#match(int, int):::Initiates a search for an anchored match to a Pattern within the given bounds
Matcher#getTextLength():::Returns the end index of the text.
Matcher#getSubSequence(int, int):::Generates a String from this matcher's input in the specified range.
Matcher#charAt(int):::Returns this matcher's input character at index i.
Matcher#getMatchedGroupIndex(String):::Returns the group index of the matched capturing group.
MatchResult#start():::Returns the start index of the match.
MatchResult#start(int):::Returns the start index of the subsequence captured by the given group during this match
MatchResult#end():::Returns the offset after the last character matched.
MatchResult#end(int):::Returns the offset after the last character of the subsequence captured by the given group during this match
MatchResult#group():::Returns the input subsequence matched by the previous match
MatchResult#group(int):::Returns the input subsequence captured by the given group during the previous match operation
MatchResult#groupCount():::Returns the number of capturing groups in this match result's pattern
Pattern#compile(String):::Compiles the given regular expression into a pattern.
Pattern#compile(String, int):::Compiles the given regular expression into a pattern with the given flags.
Pattern#pattern():::Returns the regular expression from which this pattern was compiled.
Pattern#toString():::Returns the string representation of this pattern
Pattern#matcher(CharSequence):::Creates a matcher that will match the given input against this pattern.
Pattern#flags():::Returns this pattern's match flags.
Pattern#matches(String, CharSequence):::Compiles the given regular expression and attempts to match the given input against it
Pattern#split(CharSequence, int):::Splits the given input sequence around matches of this pattern
Pattern#split(CharSequence):::Splits the given input sequence around matches of this pattern
Pattern#quote(String):::Returns a literal pattern String for the specified String
Pattern.Node#match(Matcher, int, CharSequence):::This method implements the classic accept node.
Pattern.Node#study(TreeInfo):::This method is good for all zero length assertions.
Pattern.LastNode#match(Matcher, int, CharSequence):::This method implements the classic accept node with the addition of a check to see if the match occurred using all of the input.
Pattern.BnM#optimize(Node):::Pre calculates arrays needed to generate the bad character shift and the good suffix shift
Pattern#VertWS():::matches a Perl vertical whitespace
Pattern#HorizWS():::matches a Perl horizontal whitespace
Pattern#ALL()::: for the Unicode category ALL and the dot metacharacter when  in dotall mode.
Pattern#DOT():::for the dot metacharacter when dotall is not enabled.
Pattern#UNIXDOT()::: the dot metacharacter when dotall is not enabled but UNIX_LINES is enabled.
Pattern#SingleS(int):::Indicate that matches a Supplementary Unicode character
Pattern#Single(int):::A bmp/optimized predicate of single
Pattern#SingleI(int, int):::Case insensitive matches a given BMP character
Pattern#SingleU(int):::Unicode case insensitive matches a given Unicode character
Pattern#Range(int, int):::Charactrs within a explicit value range
Pattern#CIRange(int, int):::Charactrs within a explicit value range in a case insensitive manner.
Pattern#asPredicate():::Creates a predicate that tests if this pattern is found in a given input string.
Pattern#asMatchPredicate():::Creates a predicate that tests if this pattern matches a given input string.
Pattern#splitAsStream(CharSequence):::Creates a stream from the given input sequence around matches of this pattern
PatternSyntaxException#getIndex():::Retrieves the error index.
PatternSyntaxException#getDescription():::Retrieves the description of the error.
PatternSyntaxException#getPattern():::Retrieves the erroneous regular-expression pattern.
PatternSyntaxException#getMessage():::Returns a multi-line string containing the description of the syntax error and its index, the erroneous regular-expression pattern, and a visual indication of the error index within the pattern.

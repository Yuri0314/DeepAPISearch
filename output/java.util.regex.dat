CharPredicates#forUnicodeScript(String):::Returns a predicate matching all characters belong to a named UnicodeScript.:::script->try->forName->return->of->catch->finally->return
CharPredicates#forUnicodeBlock(String):::Returns a predicate matching all characters in a UnicodeBlock.:::block->try->forName->return->of->catch->finally->return
CharPredicates#ASCII_DIGIT():::Posix ASCII variants, not in the lookup map:::return->ASCII->isDigit
Grapheme#isBoundary(int, int):::Determines if there is an extended  grapheme cluster boundary between two continuing characters cp1 and cp2:::return->getType->getType
Matcher#pattern():::Returns the pattern that is interpreted by this matcher.:::return
Matcher#toMatchResult():::Returns the match state of this matcher as a MatchResult:::return->text->toString->toMatchResult
Matcher#usePattern(Pattern):::Changes the Pattern that this Matcher uses to find matches with:::if->throw->new->IllegalArgumentException->parentGroupCount->Math->max->new->intArr->new->intArr->for->i->for->i->new->IntHashSetArr->return
Matcher#reset():::Resets this matcher:::for->i->for->i->for->i->getTextLength->return
Matcher#reset(CharSequence):::Resets this matcher with a new input sequence:::return->reset
Matcher#start():::Returns the start index of the previous match.:::if->throw->new->IllegalStateException->return
Matcher#start(int):::Returns the start index of the subsequence captured by the given group during the previous match operation:::if->throw->new->IllegalStateException->if->groupCount->throw->new->IndexOutOfBoundsException->return
Matcher#start(String):::Returns the start index of the subsequence captured by the given named-capturing group during the previous match operation.:::return->getMatchedGroupIndex
Matcher#end():::Returns the offset after the last character matched.:::if->throw->new->IllegalStateException->return
Matcher#end(int):::Returns the offset after the last character of the subsequence captured by the given group during the previous match operation:::if->throw->new->IllegalStateException->if->groupCount->throw->new->IndexOutOfBoundsException->return
Matcher#end(String):::Returns the offset after the last character of the subsequence captured by the given named-capturing group during the previous match operation.:::return->getMatchedGroupIndex
Matcher#group():::Returns the input subsequence matched by the previous match:::return->group
Matcher#group(int):::Returns the input subsequence captured by the given group during the previous match operation:::if->throw->new->IllegalStateException->if->groupCount->throw->new->IndexOutOfBoundsException->if->return->return->getSubSequence->toString
Matcher#group(String):::Returns the input subsequence captured by the given named-capturing group during the previous match operation:::group->getMatchedGroupIndex->if->return->return->getSubSequence->toString
Matcher#groupCount():::Returns the number of capturing groups in this matcher's pattern:::return
Matcher#matches():::Attempts to match the entire region against the pattern:::return->match
Matcher#find():::Attempts to find the next subsequence of the input sequence that matches the pattern:::nextSearchIndex->if->if->if->for->i->return->return->search
Matcher#find(int):::Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index:::limit->getTextLength->if->throw->new->IndexOutOfBoundsException->reset->return->search
Matcher#lookingAt():::Attempts to match the input sequence, starting at the beginning of the region, against the pattern:::return->match
Matcher#quoteReplacement(String):::Returns a literal replacement String for the specified String:::if->s->indexOf->s->indexOf->return->sb->new->StringBuilder->for->i->s->length->return->sb->toString
Matcher#appendReplacement(StringBuffer, String):::Implements a non-terminal append-and-replace step:::if->throw->new->IllegalStateException->result->new->StringBuilder->appendExpandedReplacement->sb->append->sb->append->return
Matcher#appendReplacement(StringBuilder, String):::Implements a non-terminal append-and-replace step:::if->throw->new->IllegalStateException->result->new->StringBuilder->appendExpandedReplacement->sb->append->sb->append->return
Matcher#appendTail(StringBuffer):::Implements a terminal append-and-replace step:::sb->getTextLength->append->return
Matcher#appendTail(StringBuilder):::Implements a terminal append-and-replace step:::sb->getTextLength->append->return
Matcher#replaceAll(String):::Replaces every subsequence of the input sequence that matches the pattern with the given replacement string:::reset->result->find->if->sb->new->StringBuilder->do->appendReplacement->find->while->appendTail->return->sb->toString->return->text->toString
Matcher#replaceAll(Function):::Replaces every subsequence of the input sequence that matches the pattern with the result of applying the given replacer function to the match result of this matcher corresponding to that subsequence:::Objects->requireNonNull->reset->result->find->if->sb->new->StringBuilder->do->ec->replacement->replacer->apply->if->throw->new->ConcurrentModificationException->appendReplacement->find->while->appendTail->return->sb->toString->return->text->toString
Matcher#results():::Returns a stream of match results for each subsequence of the input sequence that matches the pattern:::return->StreamSupport->Spliterators->new->MatchResultIterator->spliteratorUnknownSize->stream
Matcher#replaceFirst(String):::Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string:::if->throw->new->NullPointerException->reset->if->find->return->text->toString->sb->new->StringBuilder->appendReplacement->appendTail->return->sb->toString
Matcher#replaceFirst(Function):::Replaces the first subsequence of the input sequence that matches the pattern with the result of applying the given replacer function to the match result of this matcher corresponding to that subsequence:::Objects->requireNonNull->reset->if->find->return->text->toString->sb->new->StringBuilder->ec->replacement->replacer->apply->if->throw->new->ConcurrentModificationException->appendReplacement->appendTail->return->sb->toString
Matcher#region(int, int):::Sets the limits of this matcher's region:::if->getTextLength->throw->new->IndexOutOfBoundsException->if->getTextLength->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->reset->return
Matcher#regionStart():::Reports the start index of this matcher's region:::return
Matcher#regionEnd():::Reports the end index (exclusive) of this matcher's region:::return
Matcher#hasTransparentBounds():::Queries the transparency of region bounds for this matcher:::return
Matcher#useTransparentBounds(boolean):::Sets the transparency of region bounds for this matcher:::return
Matcher#hasAnchoringBounds():::Queries the anchoring of region bounds for this matcher:::return
Matcher#useAnchoringBounds(boolean):::Sets the anchoring of region bounds for this matcher:::return
Matcher#toString():::Returns the string representation of this matcher:::sb->new->StringBuilder->sb->append->append->pattern->append->append->regionStart->append->append->regionEnd->append->append->if->group->sb->group->append->sb->append->return->sb->toString
Matcher#hitEnd():::Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher:::return
Matcher#requireEnd():::Returns true if more input could change a positive match into a negative one:::return
Matcher#search(int):::Initiates a search to find a Pattern within the given bounds:::for->i->for->i->result->match->if->return
Matcher#match(int, int):::Initiates a search for an anchored match to a Pattern within the given bounds:::for->i->for->i->result->match->if->return
Matcher#getTextLength():::Returns the end index of the text.:::return->text->length
Matcher#getSubSequence(int, int):::Generates a String from this matcher's input in the specified range.:::return->text->subSequence
Matcher#charAt(int):::Returns this matcher's input character at index i.:::return->text->charAt
Matcher#getMatchedGroupIndex(String):::Returns the group index of the matched capturing group.:::Objects->requireNonNull->if->throw->new->IllegalStateException->if->parentPattern->namedGroups->containsKey->throw->new->IllegalArgumentException->return->parentPattern->namedGroups->get
MatchResult#start():::Returns the start index of the match.:::
MatchResult#start(int):::Returns the start index of the subsequence captured by the given group during this match:::
MatchResult#end():::Returns the offset after the last character matched.:::
MatchResult#end(int):::Returns the offset after the last character of the subsequence captured by the given group during this match:::
MatchResult#group():::Returns the input subsequence matched by the previous match:::
MatchResult#group(int):::Returns the input subsequence captured by the given group during the previous match operation:::
MatchResult#groupCount():::Returns the number of capturing groups in this match result's pattern:::
Pattern#compile(String):::Compiles the given regular expression into a pattern.:::return->new->Pattern
Pattern#compile(String, int):::Compiles the given regular expression into a pattern with the given flags.:::return->new->Pattern
Pattern#pattern():::Returns the regular expression from which this pattern was compiled.:::return
Pattern#toString():::Returns the string representation of this pattern:::return
Pattern#matcher(CharSequence):::Creates a matcher that will match the given input against this pattern.:::if->synchronized->if->compile->m->new->Matcher->return
Pattern#flags():::Returns this pattern's match flags.:::return
Pattern#matches(String, CharSequence):::Compiles the given regular expression and attempts to match the given input against it:::p->Pattern->compile->m->p->matcher->return->m->matches
Pattern#split(CharSequence, int):::Splits the given input sequence around matches of this pattern:::index->matchLimited->matchList->new->ArrayList<>->m->matcher->while->m->find->if->matchList->size->if->m->start->m->start->m->end->continue->match->input->m->start->subSequence->toString->matchList->add->m->end->else->if->matchList->size->match->input->input->length->subSequence->toString->matchList->add->m->end->if->return->new->StringArr->input->toString->if->matchList->size->matchList->input->input->length->subSequence->toString->add->resultSize->matchList->size->if->while->matchList->get->equals->result->new->StringArr->return->matchList->subList->toArray
Pattern#split(CharSequence):::Splits the given input sequence around matches of this pattern:::return->split
Pattern#quote(String):::Returns a literal pattern String for the specified String:::slashEIndex->s->indexOf->if->return->lenHint->s->length->sb->new->StringBuilder->sb->append->current->do->sb->append->append->while->s->indexOf->return->sb->s->length->append->append->toString
Pattern.Node#match(Matcher, int, CharSequence):::This method implements the classic accept node.:::return
Pattern.Node#study(TreeInfo):::This method is good for all zero length assertions.:::if->return->next->study->else->return
Pattern.LastNode#match(Matcher, int, CharSequence):::This method implements the classic accept node with the addition of a check to see if the match occurred using all of the input.:::if->return->return
Pattern.BnM#optimize(Node):::Pre calculates arrays needed to generate the bad character shift and the good suffix shift:::if->return->src->patternLength->if->return->i->j->k->lastOcc->new->intArr->optoSft->new->intArr->for->for->if->return->new->BnMS->return->new->BnM
Pattern#VertWS():::matches a Perl vertical whitespace:::return
Pattern#HorizWS():::matches a Perl horizontal whitespace:::return
Pattern#ALL()::: for the Unicode category ALL and the dot metacharacter when  in dotall mode.:::return
Pattern#DOT():::for the dot metacharacter when dotall is not enabled.:::return
Pattern#UNIXDOT()::: the dot metacharacter when dotall is not enabled but UNIX_LINES is enabled.:::return
Pattern#SingleS(int):::Indicate that matches a Supplementary Unicode character:::return
Pattern#Single(int):::A bmp/optimized predicate of single:::return
Pattern#SingleI(int, int):::Case insensitive matches a given BMP character:::return
Pattern#SingleU(int):::Unicode case insensitive matches a given Unicode character:::return->Character->Character->toUpperCase->toLowerCase
Pattern#Range(int, int):::Charactrs within a explicit value range:::if->return->inRange->return->inRange
Pattern#CIRange(int, int):::Charactrs within a explicit value range in a case insensitive manner.:::return->inRange->ASCII->isAscii->ASCII->toUpper->inRange->ASCII->toLower->inRange
Pattern#asPredicate():::Creates a predicate that tests if this pattern is found in a given input string.:::return->matcher->find
Pattern#asMatchPredicate():::Creates a predicate that tests if this pattern matches a given input string.:::return->matcher->matches
Pattern#splitAsStream(CharSequence):::Creates a stream from the given input sequence around matches of this pattern:::return->StreamSupport->Spliterators->new->MatcherIterator->spliteratorUnknownSize->stream
PatternSyntaxException#getIndex():::Retrieves the error index.:::return
PatternSyntaxException#getDescription():::Retrieves the description of the error.:::return
PatternSyntaxException#getPattern():::Retrieves the erroneous regular-expression pattern.:::return
PatternSyntaxException#getMessage():::Returns a multi-line string containing the description of the syntax error and its index, the erroneous regular-expression pattern, and a visual indication of the error index within the pattern.:::sb->new->StringBuilder->sb->append->if->sb->append->sb->append->sb->System->lineSeparator->append->sb->append->if->pattern->length->sb->System->lineSeparator->append->for->i->sb->append->return->sb->toString

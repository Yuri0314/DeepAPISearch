AbstractOwnableSynchronizer#setExclusiveOwnerThread(Thread):::Sets the thread that currently owns exclusive access
AbstractOwnableSynchronizer#getExclusiveOwnerThread():::Returns the thread last set by setExclusiveOwnerThread, or null if never set
AbstractQueuedLongSynchronizer#getState():::Returns the current value of synchronization state
AbstractQueuedLongSynchronizer#setState(long):::Sets the value of synchronization state
AbstractQueuedLongSynchronizer#compareAndSetState(long, long):::Atomically sets synchronization state to the given updated value if the current state value equals the expected value
AbstractQueuedLongSynchronizer#selfInterrupt():::Convenience method to interrupt current thread.
AbstractQueuedLongSynchronizer#acquireQueued(Node, long):::Acquires in exclusive uninterruptible mode for thread already in queue
AbstractQueuedLongSynchronizer#tryAcquire(long):::Attempts to acquire in exclusive mode
AbstractQueuedLongSynchronizer#tryRelease(long):::Attempts to set the state to reflect a release in exclusive mode
AbstractQueuedLongSynchronizer#tryAcquireShared(long):::Attempts to acquire in shared mode
AbstractQueuedLongSynchronizer#tryReleaseShared(long):::Attempts to set the state to reflect a release in shared mode
AbstractQueuedLongSynchronizer#isHeldExclusively():::Returns true if synchronization is held exclusively with respect to the current (calling) thread
AbstractQueuedLongSynchronizer#acquire(long):::Acquires in exclusive mode, ignoring interrupts
AbstractQueuedLongSynchronizer#acquireInterruptibly(long):::Acquires in exclusive mode, aborting if interrupted
AbstractQueuedLongSynchronizer#tryAcquireNanos(long, long):::Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses
AbstractQueuedLongSynchronizer#release(long):::Releases in exclusive mode
AbstractQueuedLongSynchronizer#acquireShared(long):::Acquires in shared mode, ignoring interrupts
AbstractQueuedLongSynchronizer#acquireSharedInterruptibly(long):::Acquires in shared mode, aborting if interrupted
AbstractQueuedLongSynchronizer#tryAcquireSharedNanos(long, long):::Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses
AbstractQueuedLongSynchronizer#releaseShared(long):::Releases in shared mode
AbstractQueuedLongSynchronizer#hasQueuedThreads():::Queries whether any threads are waiting to acquire
AbstractQueuedLongSynchronizer#hasContended():::Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked
AbstractQueuedLongSynchronizer#getFirstQueuedThread():::Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued
AbstractQueuedLongSynchronizer#isQueued(Thread):::Returns true if the given thread is currently queued
AbstractQueuedLongSynchronizer#apparentlyFirstQueuedIsExclusive():::Returns true if the apparent first queued thread, if one exists, is waiting in exclusive mode
AbstractQueuedLongSynchronizer#hasQueuedPredecessors():::Queries whether any threads have been waiting to acquire longer than the current thread
AbstractQueuedLongSynchronizer#getQueueLength():::Returns an estimate of the number of threads waiting to acquire
AbstractQueuedLongSynchronizer#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire
AbstractQueuedLongSynchronizer#getExclusiveQueuedThreads():::Returns a collection containing threads that may be waiting to acquire in exclusive mode
AbstractQueuedLongSynchronizer#getSharedQueuedThreads():::Returns a collection containing threads that may be waiting to acquire in shared mode
AbstractQueuedLongSynchronizer#toString():::Returns a string identifying this synchronizer, as well as its state
AbstractQueuedLongSynchronizer#isOnSyncQueue(Node):::Returns true if a node, always one that was initially placed on a condition queue, is now waiting to reacquire on sync queue.
AbstractQueuedLongSynchronizer#transferForSignal(Node):::Transfers a node from a condition queue onto sync queue
AbstractQueuedLongSynchronizer#transferAfterCancelledWait(Node):::Transfers node, if necessary, to sync queue after a cancelled wait
AbstractQueuedLongSynchronizer#fullyRelease(Node):::Invokes release with current state value; returns saved state
AbstractQueuedLongSynchronizer#owns(ConditionObject):::Queries whether the given ConditionObject uses this synchronizer as its lock.
AbstractQueuedLongSynchronizer#hasWaiters(ConditionObject):::Queries whether any threads are waiting on the given condition associated with this synchronizer
AbstractQueuedLongSynchronizer#getWaitQueueLength(ConditionObject):::Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer
AbstractQueuedLongSynchronizer#getWaitingThreads(ConditionObject):::Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer
AbstractQueuedLongSynchronizer.ConditionObject#signal():::Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock.
AbstractQueuedLongSynchronizer.ConditionObject#signalAll():::Moves all threads from the wait queue for this condition to the wait queue for the owning lock.
AbstractQueuedLongSynchronizer.ConditionObject#awaitUninterruptibly():::Implements uninterruptible condition wait
AbstractQueuedLongSynchronizer.ConditionObject#await():::Implements interruptible condition wait
AbstractQueuedLongSynchronizer.ConditionObject#awaitNanos(long):::Implements timed condition wait
AbstractQueuedLongSynchronizer.ConditionObject#awaitUntil(Date):::Implements absolute timed condition wait
AbstractQueuedLongSynchronizer.ConditionObject#await(long, TimeUnit):::Implements timed condition wait
AbstractQueuedLongSynchronizer.ConditionObject#isOwnedBy(AbstractQueuedLongSynchronizer):::Returns true if this condition was created by the given synchronization object.
AbstractQueuedLongSynchronizer.ConditionObject#hasWaiters():::Queries whether any threads are waiting on this condition
AbstractQueuedLongSynchronizer.ConditionObject#getWaitQueueLength():::Returns an estimate of the number of threads waiting on this condition
AbstractQueuedLongSynchronizer.ConditionObject#getWaitingThreads():::Returns a collection containing those threads that may be waiting on this Condition
AbstractQueuedSynchronizer.Node#isShared():::Returns true if node is waiting in shared mode.
AbstractQueuedSynchronizer.Node#predecessor():::Returns previous node, or throws NullPointerException if null
AbstractQueuedSynchronizer.Node#compareAndSetWaitStatus(int, int):::CASes waitStatus field.
AbstractQueuedSynchronizer.Node#compareAndSetNext(Node, Node):::CASes next field.
AbstractQueuedSynchronizer#getState():::Returns the current value of synchronization state
AbstractQueuedSynchronizer#setState(int):::Sets the value of synchronization state
AbstractQueuedSynchronizer#compareAndSetState(int, int):::Atomically sets synchronization state to the given updated value if the current state value equals the expected value
AbstractQueuedSynchronizer#selfInterrupt():::Convenience method to interrupt current thread.
AbstractQueuedSynchronizer#acquireQueued(Node, int):::Acquires in exclusive uninterruptible mode for thread already in queue
AbstractQueuedSynchronizer#tryAcquire(int):::Attempts to acquire in exclusive mode
AbstractQueuedSynchronizer#tryRelease(int):::Attempts to set the state to reflect a release in exclusive mode
AbstractQueuedSynchronizer#tryAcquireShared(int):::Attempts to acquire in shared mode
AbstractQueuedSynchronizer#tryReleaseShared(int):::Attempts to set the state to reflect a release in shared mode
AbstractQueuedSynchronizer#isHeldExclusively():::Returns true if synchronization is held exclusively with respect to the current (calling) thread
AbstractQueuedSynchronizer#acquire(int):::Acquires in exclusive mode, ignoring interrupts
AbstractQueuedSynchronizer#acquireInterruptibly(int):::Acquires in exclusive mode, aborting if interrupted
AbstractQueuedSynchronizer#tryAcquireNanos(int, long):::Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses
AbstractQueuedSynchronizer#release(int):::Releases in exclusive mode
AbstractQueuedSynchronizer#acquireShared(int):::Acquires in shared mode, ignoring interrupts
AbstractQueuedSynchronizer#acquireSharedInterruptibly(int):::Acquires in shared mode, aborting if interrupted
AbstractQueuedSynchronizer#tryAcquireSharedNanos(int, long):::Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses
AbstractQueuedSynchronizer#releaseShared(int):::Releases in shared mode
AbstractQueuedSynchronizer#hasQueuedThreads():::Queries whether any threads are waiting to acquire
AbstractQueuedSynchronizer#hasContended():::Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked
AbstractQueuedSynchronizer#getFirstQueuedThread():::Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued
AbstractQueuedSynchronizer#isQueued(Thread):::Returns true if the given thread is currently queued
AbstractQueuedSynchronizer#apparentlyFirstQueuedIsExclusive():::Returns true if the apparent first queued thread, if one exists, is waiting in exclusive mode
AbstractQueuedSynchronizer#hasQueuedPredecessors():::Queries whether any threads have been waiting to acquire longer than the current thread
AbstractQueuedSynchronizer#getQueueLength():::Returns an estimate of the number of threads waiting to acquire
AbstractQueuedSynchronizer#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire
AbstractQueuedSynchronizer#getExclusiveQueuedThreads():::Returns a collection containing threads that may be waiting to acquire in exclusive mode
AbstractQueuedSynchronizer#getSharedQueuedThreads():::Returns a collection containing threads that may be waiting to acquire in shared mode
AbstractQueuedSynchronizer#toString():::Returns a string identifying this synchronizer, as well as its state
AbstractQueuedSynchronizer#isOnSyncQueue(Node):::Returns true if a node, always one that was initially placed on a condition queue, is now waiting to reacquire on sync queue.
AbstractQueuedSynchronizer#transferForSignal(Node):::Transfers a node from a condition queue onto sync queue
AbstractQueuedSynchronizer#transferAfterCancelledWait(Node):::Transfers node, if necessary, to sync queue after a cancelled wait
AbstractQueuedSynchronizer#fullyRelease(Node):::Invokes release with current state value; returns saved state
AbstractQueuedSynchronizer#owns(ConditionObject):::Queries whether the given ConditionObject uses this synchronizer as its lock.
AbstractQueuedSynchronizer#hasWaiters(ConditionObject):::Queries whether any threads are waiting on the given condition associated with this synchronizer
AbstractQueuedSynchronizer#getWaitQueueLength(ConditionObject):::Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer
AbstractQueuedSynchronizer#getWaitingThreads(ConditionObject):::Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer
AbstractQueuedSynchronizer.ConditionObject#signal():::Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock.
AbstractQueuedSynchronizer.ConditionObject#signalAll():::Moves all threads from the wait queue for this condition to the wait queue for the owning lock.
AbstractQueuedSynchronizer.ConditionObject#awaitUninterruptibly():::Implements uninterruptible condition wait
AbstractQueuedSynchronizer.ConditionObject#await():::Implements interruptible condition wait
AbstractQueuedSynchronizer.ConditionObject#awaitNanos(long):::Implements timed condition wait
AbstractQueuedSynchronizer.ConditionObject#awaitUntil(Date):::Implements absolute timed condition wait
AbstractQueuedSynchronizer.ConditionObject#await(long, TimeUnit):::Implements timed condition wait
AbstractQueuedSynchronizer.ConditionObject#isOwnedBy(AbstractQueuedSynchronizer):::Returns true if this condition was created by the given synchronization object.
AbstractQueuedSynchronizer.ConditionObject#hasWaiters():::Queries whether any threads are waiting on this condition
AbstractQueuedSynchronizer.ConditionObject#getWaitQueueLength():::Returns an estimate of the number of threads waiting on this condition
AbstractQueuedSynchronizer.ConditionObject#getWaitingThreads():::Returns a collection containing those threads that may be waiting on this Condition
Condition#await():::Causes the current thread to wait until it is signalled or Thread#interrupt interrupted
Condition#awaitUninterruptibly():::Causes the current thread to wait until it is signalled
Condition#awaitNanos(long):::Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses
Condition#await(long, TimeUnit):::Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses
Condition#awaitUntil(Date):::Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses
Condition#signal():::Wakes up one waiting thread
Condition#signalAll():::Wakes up all waiting threads
Lock#lock():::Acquires the lock
Lock#lockInterruptibly():::Acquires the lock unless the current thread is Thread#interrupt interrupted
Lock#tryLock():::Acquires the lock only if it is free at the time of invocation
Lock#tryLock(long, TimeUnit):::Acquires the lock if it is free within the given waiting time and the current thread has not been Thread#interrupt interrupted
Lock#unlock():::Releases the lock
Lock#newCondition():::Returns a new Condition instance that is bound to this Lock instance
LockSupport#unpark(Thread):::Makes available the permit for the given thread, if it was not already available
LockSupport#park(Object):::Disables the current thread for thread scheduling purposes unless the permit is available
LockSupport#parkNanos(Object, long):::Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available
LockSupport#parkUntil(Object, long):::Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available
LockSupport#getBlocker(Thread):::Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked, or null if not blocked
LockSupport#park():::Disables the current thread for thread scheduling purposes unless the permit is available
LockSupport#parkNanos(long):::Disables the current thread for thread scheduling purposes, for up to the specified waiting time, unless the permit is available
LockSupport#parkUntil(long):::Disables the current thread for thread scheduling purposes, until the specified deadline, unless the permit is available
LockSupport#nextSecondarySeed():::Returns the pseudo-randomly initialized or updated secondary seed
LockSupport#getThreadId(Thread):::Returns the thread id for the given thread
ReadWriteLock#readLock():::Returns the lock used for reading.
ReadWriteLock#writeLock():::Returns the lock used for writing.
ReentrantLock.Sync#nonfairTryAcquire(int):::Performs non-fair tryLock
ReentrantLock.FairSync#tryAcquire(int):::Fair version of tryAcquire
ReentrantLock#lock():::Acquires the lock
ReentrantLock#lockInterruptibly():::Acquires the lock unless the current thread is Thread#interrupt interrupted
ReentrantLock#tryLock():::Acquires the lock only if it is not held by another thread at the time of invocation
ReentrantLock#tryLock(long, TimeUnit):::Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been Thread#interrupt interrupted
ReentrantLock#unlock():::Attempts to release this lock
ReentrantLock#newCondition():::Returns a Condition instance for use with this Lock instance
ReentrantLock#getHoldCount():::Queries the number of holds on this lock by the current thread
ReentrantLock#isHeldByCurrentThread():::Queries if this lock is held by the current thread
ReentrantLock#isLocked():::Queries if this lock is held by any thread
ReentrantLock#isFair():::Returns true if this lock has fairness set true.
ReentrantLock#getOwner():::Returns the thread that currently owns this lock, or null if not owned
ReentrantLock#hasQueuedThreads():::Queries whether any threads are waiting to acquire this lock
ReentrantLock#hasQueuedThread(Thread):::Queries whether the given thread is waiting to acquire this lock
ReentrantLock#getQueueLength():::Returns an estimate of the number of threads waiting to acquire this lock
ReentrantLock#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire this lock
ReentrantLock#hasWaiters(Condition):::Queries whether any threads are waiting on the given condition associated with this lock
ReentrantLock#getWaitQueueLength(Condition):::Returns an estimate of the number of threads waiting on the given condition associated with this lock
ReentrantLock#getWaitingThreads(Condition):::Returns a collection containing those threads that may be waiting on the given condition associated with this lock
ReentrantLock#toString():::Returns a string identifying this lock, as well as its lock state
ReentrantReadWriteLock.Sync#sharedCount(int):::Returns the number of shared holds represented in count.
ReentrantReadWriteLock.Sync#exclusiveCount(int):::Returns the number of exclusive holds represented in count.
ReentrantReadWriteLock.Sync#readerShouldBlock():::Returns true if the current thread, when trying to acquire the read lock, and otherwise eligible to do so, should block because of policy for overtaking other waiting threads.
ReentrantReadWriteLock.Sync#writerShouldBlock():::Returns true if the current thread, when trying to acquire the write lock, and otherwise eligible to do so, should block because of policy for overtaking other waiting threads.
ReentrantReadWriteLock.Sync#fullTryAcquireShared(Thread):::Full version of acquire for reads, that handles CAS misses and reentrant reads not dealt with in tryAcquireShared.
ReentrantReadWriteLock.Sync#tryWriteLock():::Performs tryLock for write, enabling barging in both modes
ReentrantReadWriteLock.Sync#tryReadLock():::Performs tryLock for read, enabling barging in both modes
ReentrantReadWriteLock.ReadLock#lock():::Acquires the read lock
ReentrantReadWriteLock.ReadLock#lockInterruptibly():::Acquires the read lock unless the current thread is Thread#interrupt interrupted
ReentrantReadWriteLock.ReadLock#tryLock():::Acquires the read lock only if the write lock is not held by another thread at the time of invocation
ReentrantReadWriteLock.ReadLock#tryLock(long, TimeUnit):::Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been Thread#interrupt interrupted
ReentrantReadWriteLock.ReadLock#unlock():::Attempts to release this lock
ReentrantReadWriteLock.ReadLock#newCondition():::Throws UnsupportedOperationException because ReadLocks do not support conditions.
ReentrantReadWriteLock.ReadLock#toString():::Returns a string identifying this lock, as well as its lock state
ReentrantReadWriteLock.WriteLock#lock():::Acquires the write lock
ReentrantReadWriteLock.WriteLock#lockInterruptibly():::Acquires the write lock unless the current thread is Thread#interrupt interrupted
ReentrantReadWriteLock.WriteLock#tryLock():::Acquires the write lock only if it is not held by another thread at the time of invocation
ReentrantReadWriteLock.WriteLock#tryLock(long, TimeUnit):::Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been Thread#interrupt interrupted
ReentrantReadWriteLock.WriteLock#unlock():::Attempts to release this lock
ReentrantReadWriteLock.WriteLock#newCondition():::Returns a Condition instance for use with this Lock instance
ReentrantReadWriteLock.WriteLock#toString():::Returns a string identifying this lock, as well as its lock state
ReentrantReadWriteLock.WriteLock#isHeldByCurrentThread():::Queries if this write lock is held by the current thread
ReentrantReadWriteLock.WriteLock#getHoldCount():::Queries the number of holds on this write lock by the current thread
ReentrantReadWriteLock#isFair():::Returns true if this lock has fairness set true.
ReentrantReadWriteLock#getOwner():::Returns the thread that currently owns the write lock, or null if not owned
ReentrantReadWriteLock#getReadLockCount():::Queries the number of read locks held for this lock
ReentrantReadWriteLock#isWriteLocked():::Queries if the write lock is held by any thread
ReentrantReadWriteLock#isWriteLockedByCurrentThread():::Queries if the write lock is held by the current thread.
ReentrantReadWriteLock#getWriteHoldCount():::Queries the number of reentrant write holds on this lock by the current thread
ReentrantReadWriteLock#getReadHoldCount():::Queries the number of reentrant read holds on this lock by the current thread
ReentrantReadWriteLock#getQueuedWriterThreads():::Returns a collection containing threads that may be waiting to acquire the write lock
ReentrantReadWriteLock#getQueuedReaderThreads():::Returns a collection containing threads that may be waiting to acquire the read lock
ReentrantReadWriteLock#hasQueuedThreads():::Queries whether any threads are waiting to acquire the read or write lock
ReentrantReadWriteLock#hasQueuedThread(Thread):::Queries whether the given thread is waiting to acquire either the read or write lock
ReentrantReadWriteLock#getQueueLength():::Returns an estimate of the number of threads waiting to acquire either the read or write lock
ReentrantReadWriteLock#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire either the read or write lock
ReentrantReadWriteLock#hasWaiters(Condition):::Queries whether any threads are waiting on the given condition associated with the write lock
ReentrantReadWriteLock#getWaitQueueLength(Condition):::Returns an estimate of the number of threads waiting on the given condition associated with the write lock
ReentrantReadWriteLock#getWaitingThreads(Condition):::Returns a collection containing those threads that may be waiting on the given condition associated with the write lock
ReentrantReadWriteLock#toString():::Returns a string identifying this lock, as well as its lock state
StampedLock#writeLock():::Exclusively acquires the lock, blocking if necessary until available.
StampedLock#tryWriteLock():::Exclusively acquires the lock if it is immediately available.
StampedLock#tryWriteLock(long, TimeUnit):::Exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted
StampedLock#writeLockInterruptibly():::Exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted
StampedLock#readLock():::Non-exclusively acquires the lock, blocking if necessary until available.
StampedLock#tryReadLock():::Non-exclusively acquires the lock if it is immediately available.
StampedLock#tryReadLock(long, TimeUnit):::Non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted
StampedLock#readLockInterruptibly():::Non-exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted
StampedLock#tryOptimisticRead():::Returns a stamp that can later be validated, or zero if exclusively locked.
StampedLock#validate(long):::Returns true if the lock has not been exclusively acquired since issuance of the given stamp
StampedLock#unlockWrite(long):::If the lock state matches the given stamp, releases the exclusive lock.
StampedLock#unlockRead(long):::If the lock state matches the given stamp, releases the non-exclusive lock.
StampedLock#unlock(long):::If the lock state matches the given stamp, releases the corresponding mode of the lock.
StampedLock#tryConvertToWriteLock(long):::If the lock state matches the given stamp, atomically performs one of the following actions
StampedLock#tryConvertToReadLock(long):::If the lock state matches the given stamp, atomically performs one of the following actions
StampedLock#tryConvertToOptimisticRead(long):::If the lock state matches the given stamp then, atomically, if the stamp represents holding a lock, releases it and returns an observation stamp
StampedLock#tryUnlockWrite():::Releases the write lock if it is held, without requiring a stamp value
StampedLock#tryUnlockRead():::Releases one hold of the read lock if it is held, without requiring a stamp value
StampedLock#isWriteLocked():::Returns true if the lock is currently held exclusively.
StampedLock#isReadLocked():::Returns true if the lock is currently held non-exclusively.
StampedLock#isWriteLockStamp(long):::Tells whether a stamp represents holding a lock exclusively
StampedLock#isReadLockStamp(long):::Tells whether a stamp represents holding a lock non-exclusively
StampedLock#isLockStamp(long):::Tells whether a stamp represents holding a lock
StampedLock#isOptimisticReadStamp(long):::Tells whether a stamp represents a successful optimistic read.
StampedLock#getReadLockCount():::Queries the number of read locks held for this lock
StampedLock#toString():::Returns a string identifying this lock, as well as its lock state
StampedLock#asReadLock():::Returns a plain Lock view of this StampedLock in which the Lock#lock method is mapped to #readLock, and similarly for other methods
StampedLock#asWriteLock():::Returns a plain Lock view of this StampedLock in which the Lock#lock method is mapped to #writeLock, and similarly for other methods
StampedLock#asReadWriteLock():::Returns a ReadWriteLock view of this StampedLock in which the ReadWriteLock#readLock() method is mapped to #asReadLock(), and ReadWriteLock#writeLock() to #asWriteLock().

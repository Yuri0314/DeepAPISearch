sun.nio.fs.AbstractAclFileAttributeView#name()->String::: abstract acl file attribute view name
sun.nio.fs.AbstractAclFileAttributeView#setAttribute(String, Object)->void::: abstract acl file attribute view set attribute
sun.nio.fs.AbstractAclFileAttributeView#readAttributes(String[])->Map::: abstract acl file attribute view read attributes
sun.nio.fs.AbstractBasicFileAttributeView#name()->String::: abstract basic file attribute view name
sun.nio.fs.AbstractBasicFileAttributeView#setAttribute(String, Object)->void::: abstract basic file attribute view set attribute
sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder#create(Set, String[])->AttributesBuilder:::Creates builder to build up a map of the matching attributes
sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder#match(String)->boolean:::Returns true if the attribute should be returned in the map
sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder#add(String, Object)->void::: attributes builder add
sun.nio.fs.AbstractBasicFileAttributeView.AttributesBuilder#unmodifiableMap()->Map:::Returns the map
sun.nio.fs.AbstractBasicFileAttributeView#addRequestedBasicAttributes(BasicFileAttributes, AttributesBuilder)->void:::Invoked by readAttributes or sub-classes to add all matching basic attributes to the builder
sun.nio.fs.AbstractBasicFileAttributeView#readAttributes(String[])->Map::: abstract basic file attribute view read attributes
sun.nio.fs.AbstractFileSystemProvider#getFileAttributeView(Path, String, LinkOption...)->DynamicFileAttributeView:::Gets a DynamicFileAttributeView by name
sun.nio.fs.AbstractFileSystemProvider#setAttribute(Path, String, Object, LinkOption...)->void::: abstract file system provider set attribute
sun.nio.fs.AbstractFileSystemProvider#readAttributes(Path, String, LinkOption...)->Map::: abstract file system provider read attributes
sun.nio.fs.AbstractFileSystemProvider#implDelete(Path, boolean)->boolean:::Deletes a file
sun.nio.fs.AbstractFileSystemProvider#delete(Path)->void::: abstract file system provider delete
sun.nio.fs.AbstractFileSystemProvider#deleteIfExists(Path)->boolean::: abstract file system provider delete if exists
sun.nio.fs.AbstractFileSystemProvider#isDirectory(Path)->boolean:::Tests whether a file is a directory.
sun.nio.fs.AbstractFileSystemProvider#isRegularFile(Path)->boolean:::Tests whether a file is a regular file with opaque content.
sun.nio.fs.AbstractFileSystemProvider#exists(Path)->boolean:::Checks the existence of a file.
sun.nio.fs.AbstractFileTypeDetector#getExtension(String)->String:::Returns the extension of a file name, specifically the portion of the parameter string after the first dot
sun.nio.fs.AbstractFileTypeDetector#probeContentType(Path)->String:::Invokes the appropriate probe method to guess a file's content type, and checks that the content type's syntax is valid.
sun.nio.fs.AbstractFileTypeDetector#implProbeContentType(Path)->String:::Probes the given file to guess its content type.
sun.nio.fs.AbstractPoller#start()->void:::Starts the poller thread
sun.nio.fs.AbstractPoller#wakeup()->void:::Wakeup poller thread so that it can service pending requests
sun.nio.fs.AbstractPoller#implRegister(Path, Set>, WatchEvent.Modifier...)->Object:::Executed by poller thread to register directory for changes
sun.nio.fs.AbstractPoller#implCancelKey(WatchKey)->void:::Executed by poller thread to cancel key
sun.nio.fs.AbstractPoller#implCloseAll()->void:::Executed by poller thread to shutdown and cancel all keys
sun.nio.fs.AbstractPoller#register(Path, WatchEvent.Kind[], WatchEvent.Modifier...)->WatchKey:::Requests, and waits on, poller thread to register given file.
sun.nio.fs.AbstractPoller#cancel(WatchKey)->void:::Cancels, and waits on, poller thread to cancel given key.
sun.nio.fs.AbstractPoller#close()->void:::Shutdown poller thread
sun.nio.fs.AbstractPoller#processRequests()->boolean:::Invoked by poller thread to process all pending requests
sun.nio.fs.AbstractUserDefinedFileAttributeView#checkAccess(String, boolean, boolean)->void::: abstract user defined file attribute view check access
sun.nio.fs.AbstractUserDefinedFileAttributeView#name()->String::: abstract user defined file attribute view name
sun.nio.fs.AbstractUserDefinedFileAttributeView#setAttribute(String, Object)->void::: abstract user defined file attribute view set attribute
sun.nio.fs.AbstractUserDefinedFileAttributeView#readAttributes(String[])->Map::: abstract user defined file attribute view read attributes
sun.nio.fs.AbstractWatchKey#watcher()->AbstractWatchService::: abstract watch key watcher
sun.nio.fs.AbstractWatchKey#watchable()->Path:::Return the original watchable (Path)
sun.nio.fs.AbstractWatchKey#signal()->void:::Enqueues this key to the watch service
sun.nio.fs.AbstractWatchKey#signalEvent(WatchEvent.Kind, Object)->void:::Adds the event to this key and signals it.
sun.nio.fs.AbstractWatchKey#pollEvents()->List>::: abstract watch key poll events
sun.nio.fs.AbstractWatchKey#reset()->boolean::: abstract watch key reset
sun.nio.fs.AbstractWatchService#register(Path, WatchEvent.Kind[], WatchEvent.Modifier...)->WatchKey:::Register the given object with this watch service
sun.nio.fs.AbstractWatchService#enqueueKey(WatchKey)->void::: abstract watch service enqueue key
sun.nio.fs.AbstractWatchService#poll()->WatchKey::: abstract watch service poll
sun.nio.fs.AbstractWatchService#poll(long, TimeUnit)->WatchKey::: abstract watch service poll
sun.nio.fs.AbstractWatchService#take()->WatchKey::: abstract watch service take
sun.nio.fs.AbstractWatchService#isOpen()->boolean:::Tells whether or not this watch service is open.
sun.nio.fs.AbstractWatchService#closeLock()->Object:::Retrieves the object upon which the close method synchronizes.
sun.nio.fs.AbstractWatchService#implClose()->void:::Closes this watch service
sun.nio.fs.AbstractWatchService#close()->void::: abstract watch service close
sun.nio.fs.BasicFileAttributesHolder#get()->BasicFileAttributes:::Returns cached attributes (may be null)
sun.nio.fs.BasicFileAttributesHolder#invalidate()->void:::Invalidates cached attributes
sun.nio.fs.Cancellable#addressToPollForCancel()->long:::Returns the memory address of a 4-byte int that should be polled to detect cancellation.
sun.nio.fs.Cancellable#cancelValue()->int:::The value to write to the polled memory location to indicate that the task has been cancelled
sun.nio.fs.Cancellable#cancel()->void:::"cancels" the task by writing bits into memory location that it polled by the task.
sun.nio.fs.Cancellable#run()->void::: cancellable run
sun.nio.fs.Cancellable#implRun()->void:::The task body
sun.nio.fs.Cancellable#runInterruptibly(Cancellable)->void:::Invokes the given task in its own thread
sun.nio.fs.DefaultFileSystemProvider#instance()->WindowsFileSystemProvider:::Returns the platform's default file system provider.
sun.nio.fs.DefaultFileSystemProvider#theFileSystem()->FileSystem:::Returns the platform's default file system.
sun.nio.fs.DefaultFileTypeDetector#create()->FileTypeDetector::: default file type detector create
sun.nio.fs.DynamicFileAttributeView#setAttribute(String, Object)->void:::Sets/updates the value of an attribute.
sun.nio.fs.DynamicFileAttributeView#readAttributes(String[])->Map:::Reads a set of file attributes as a bulk operation.
sun.nio.fs.ExtendedOptions.InternalOption#register(OpenOption)->void:::Register this internal option as a OpenOption.
sun.nio.fs.ExtendedOptions.InternalOption#register(CopyOption)->void:::Register this internal option as a CopyOption.
sun.nio.fs.ExtendedOptions.InternalOption#register(WatchEvent.Modifier)->void:::Register this internal option as a WatchEvent.Modifier.
sun.nio.fs.ExtendedOptions.InternalOption#register(WatchEvent.Modifier, T)->void:::Register this internal option as a WatchEvent.Modifier with the given parameter.
sun.nio.fs.ExtendedOptions.InternalOption#matches(Object)->boolean:::Returns true if the given option (or modifier) maps to this internal option.
sun.nio.fs.ExtendedOptions.InternalOption#parameter()->T:::Returns the parameter object associated with this internal option.
sun.nio.fs.FileOwnerAttributeViewImpl#name()->String::: file owner attribute view impl name
sun.nio.fs.FileOwnerAttributeViewImpl#setAttribute(String, Object)->void::: file owner attribute view impl set attribute
sun.nio.fs.FileOwnerAttributeViewImpl#readAttributes(String[])->Map::: file owner attribute view impl read attributes
sun.nio.fs.FileOwnerAttributeViewImpl#getOwner()->UserPrincipal::: file owner attribute view impl get owner
sun.nio.fs.FileOwnerAttributeViewImpl#setOwner(UserPrincipal)->void::: file owner attribute view impl set owner
sun.nio.fs.Globs#toUnixRegexPattern(String)->String::: globs to unix regex pattern
sun.nio.fs.Globs#toWindowsRegexPattern(String)->String::: globs to windows regex pattern
sun.nio.fs.NativeBuffer#release()->void::: native buffer release
sun.nio.fs.NativeBuffer#address()->long::: native buffer address
sun.nio.fs.NativeBuffer#size()->int::: native buffer size
sun.nio.fs.NativeBuffer#free()->void::: native buffer free
sun.nio.fs.NativeBuffer#setOwner(Object)->void::: native buffer set owner
sun.nio.fs.NativeBuffer#owner()->Object::: native buffer owner
sun.nio.fs.NativeBuffers#allocNativeBuffer(int)->NativeBuffer:::Allocates a native buffer, of at least the given size, from the heap.
sun.nio.fs.NativeBuffers#getNativeBufferFromCache(int)->NativeBuffer:::Returns a native buffer, of at least the given size, from the thread local cache.
sun.nio.fs.NativeBuffers#getNativeBuffer(int)->NativeBuffer:::Returns a native buffer, of at least the given size
sun.nio.fs.NativeBuffers#releaseNativeBuffer(NativeBuffer)->void:::Releases the given buffer
sun.nio.fs.NativeBuffers#copyCStringToNativeBuffer(byte[], NativeBuffer)->void:::Copies a byte array and zero terminator into a given native buffer.
sun.nio.fs.NativeBuffers#asNativeBuffer(byte[])->NativeBuffer:::Copies a byte array and zero terminator into a native buffer, returning the buffer.
sun.nio.fs.PollingWatchService#register(Path, WatchEvent.Kind[], WatchEvent.Modifier...)->WatchKey:::Register the given file with this watch service
sun.nio.fs.PollingWatchService#implClose()->void::: polling watch service impl close
sun.nio.fs.Reflect#lookupField(String, String)->Field:::Lookup the field of a given class.
sun.nio.fs.RegistryFileTypeDetector#implProbeContentType(Path)->String::: registry file type detector impl probe content type
sun.nio.fs.Util#jnuEncoding()->Charset:::Returns Charset corresponding to the sun.jnu.encoding property
sun.nio.fs.Util#toBytes(String)->byte[]:::Encodes the given String into a sequence of bytes using the Charset specified by the sun.jnu.encoding property.
sun.nio.fs.Util#toString(byte[])->String:::Constructs a new String by decoding the specified array of bytes using the Charset specified by the sun.jnu.encoding property.
sun.nio.fs.Util#split(String, char)->String[]:::Splits a string around the given character
sun.nio.fs.Util#newSet(E...)->Set:::Returns a Set containing the given elements.
sun.nio.fs.Util#newSet(Set, E...)->Set:::Returns a Set containing all the elements of the given Set plus the given elements.
sun.nio.fs.Util#followLinks(LinkOption...)->boolean:::Returns true if symbolic links should be followed
sun.nio.fs.WindowsAclFileAttributeView#getFileSecurity(String, int)->NativeBuffer::: windows acl file attribute view get file security
sun.nio.fs.WindowsAclFileAttributeView#getOwner()->UserPrincipal::: windows acl file attribute view get owner
sun.nio.fs.WindowsAclFileAttributeView#getAcl()->List::: windows acl file attribute view get acl
sun.nio.fs.WindowsAclFileAttributeView#setOwner(UserPrincipal)->void::: windows acl file attribute view set owner
sun.nio.fs.WindowsAclFileAttributeView#setAcl(List)->void::: windows acl file attribute view set acl
sun.nio.fs.WindowsChannelFactory#newFileChannel(String, String, Set, long)->FileChannel:::Open/creates file, returning FileChannel to access the file
sun.nio.fs.WindowsChannelFactory#newAsynchronousFileChannel(String, String, Set, long, ThreadPool)->AsynchronousFileChannel:::Open/creates file, returning AsynchronousFileChannel to access the file
sun.nio.fs.WindowsDirectoryStream#close()->void::: windows directory stream close
sun.nio.fs.WindowsDirectoryStream#iterator()->Iterator::: windows directory stream iterator
sun.nio.fs.WindowsException#lastError()->int::: windows exception last error
sun.nio.fs.WindowsException#errorString()->String::: windows exception error string
sun.nio.fs.WindowsException#getMessage()->String::: windows exception get message
sun.nio.fs.WindowsException#fillInStackTrace()->Throwable::: windows exception fill in stack trace
sun.nio.fs.WindowsException#rethrowAsIOException(String)->void::: windows exception rethrow as exception
sun.nio.fs.WindowsException#rethrowAsIOException(WindowsPath, WindowsPath)->void::: windows exception rethrow as exception
sun.nio.fs.WindowsException#rethrowAsIOException(WindowsPath)->void::: windows exception rethrow as exception
sun.nio.fs.WindowsException#asIOException(WindowsPath)->IOException::: windows exception as exception
sun.nio.fs.WindowsFileAttributes#toFileTime(long)->FileTime:::Convert 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 to a FileTime.
sun.nio.fs.WindowsFileAttributes#toWindowsTime(FileTime)->long:::Convert FileTime to 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601.
sun.nio.fs.WindowsFileAttributes#getBufferForFindData()->NativeBuffer:::Allocates a native buffer for a WIN32_FIND_DATA structure
sun.nio.fs.WindowsFileAttributes#fromFindData(long)->WindowsFileAttributes:::Create a WindowsFileAttributes from a WIN32_FIND_DATA structure
sun.nio.fs.WindowsFileAttributes#readAttributes(long)->WindowsFileAttributes:::Reads the attributes of an open file
sun.nio.fs.WindowsFileAttributes#get(WindowsPath, boolean)->WindowsFileAttributes:::Returns attributes of given file.
sun.nio.fs.WindowsFileAttributes#isSameFile(WindowsFileAttributes, WindowsFileAttributes)->boolean:::Returns true if the attributes are of the same file - both files must be open.
sun.nio.fs.WindowsFileAttributes#isReparsePoint(int)->boolean:::Returns true if the attributes are of a file with a reparse point.
sun.nio.fs.WindowsFileAttributes#attributes()->int::: windows file attributes attributes
sun.nio.fs.WindowsFileAttributes#volSerialNumber()->int::: windows file attributes vol serial number
sun.nio.fs.WindowsFileAttributes#fileIndexHigh()->int::: windows file attributes file index high
sun.nio.fs.WindowsFileAttributes#fileIndexLow()->int::: windows file attributes file index low
sun.nio.fs.WindowsFileAttributes#size()->long::: windows file attributes size
sun.nio.fs.WindowsFileAttributes#lastModifiedTime()->FileTime::: windows file attributes last modified time
sun.nio.fs.WindowsFileAttributes#lastAccessTime()->FileTime::: windows file attributes last access time
sun.nio.fs.WindowsFileAttributes#creationTime()->FileTime::: windows file attributes creation time
sun.nio.fs.WindowsFileAttributes#fileKey()->Object::: windows file attributes file key
sun.nio.fs.WindowsFileAttributes#isReparsePoint()->boolean::: windows file attributes is reparse point
sun.nio.fs.WindowsFileAttributes#isDirectoryLink()->boolean::: windows file attributes is directory link
sun.nio.fs.WindowsFileAttributes#isSymbolicLink()->boolean::: windows file attributes is symbolic link
sun.nio.fs.WindowsFileAttributes#isDirectory()->boolean::: windows file attributes is directory
sun.nio.fs.WindowsFileAttributes#isOther()->boolean::: windows file attributes is other
sun.nio.fs.WindowsFileAttributes#isRegularFile()->boolean::: windows file attributes is regular file
sun.nio.fs.WindowsFileAttributes#isReadOnly()->boolean::: windows file attributes is read only
sun.nio.fs.WindowsFileAttributes#isHidden()->boolean::: windows file attributes is hidden
sun.nio.fs.WindowsFileAttributes#isArchive()->boolean::: windows file attributes is archive
sun.nio.fs.WindowsFileAttributes#isSystem()->boolean::: windows file attributes is system
sun.nio.fs.WindowsFileAttributeViews.Dos#name()->String::: dos name
sun.nio.fs.WindowsFileAttributeViews.Dos#setAttribute(String, Object)->void::: dos set attribute
sun.nio.fs.WindowsFileAttributeViews.Dos#readAttributes(String[])->Map::: dos read attributes
sun.nio.fs.WindowsFileAttributeViews.Dos#setReadOnly(boolean)->void::: dos set read only
sun.nio.fs.WindowsFileAttributeViews.Dos#setHidden(boolean)->void::: dos set hidden
sun.nio.fs.WindowsFileAttributeViews.Dos#setArchive(boolean)->void::: dos set archive
sun.nio.fs.WindowsFileAttributeViews.Dos#setSystem(boolean)->void::: dos set system
sun.nio.fs.WindowsFileAttributeViews.Dos#setAttributes(WindowsFileAttributes)->void::: dos set attributes
sun.nio.fs.WindowsFileAttributeViews#createBasicView(WindowsPath, boolean)->Basic::: windows file attribute views create basic view
sun.nio.fs.WindowsFileAttributeViews#createDosView(WindowsPath, boolean)->Dos::: windows file attribute views create dos view
sun.nio.fs.WindowsFileCopy#copy(WindowsPath, WindowsPath, CopyOption...)->void:::Copy file from source to target
sun.nio.fs.WindowsFileCopy#ensureEmptyDir(WindowsPath)->void::: windows file copy ensure empty dir
sun.nio.fs.WindowsFileCopy#move(WindowsPath, WindowsPath, CopyOption...)->void:::Move file from source to target
sun.nio.fs.WindowsFileStore#create(String, boolean)->WindowsFileStore::: windows file store create
sun.nio.fs.WindowsFileStore#create(WindowsPath)->WindowsFileStore::: windows file store create
sun.nio.fs.WindowsFileStore#volumeInformation()->VolumeInformation::: windows file store volume information
sun.nio.fs.WindowsFileStore#volumeType()->int::: windows file store volume type
sun.nio.fs.WindowsFileStore#name()->String::: windows file store name
sun.nio.fs.WindowsFileStore#type()->String::: windows file store type
sun.nio.fs.WindowsFileStore#isReadOnly()->boolean::: windows file store is read only
sun.nio.fs.WindowsFileStore#getTotalSpace()->long::: windows file store get total space
sun.nio.fs.WindowsFileStore#getUsableSpace()->long::: windows file store get usable space
sun.nio.fs.WindowsFileStore#getBlockSize()->long::: windows file store get block size
sun.nio.fs.WindowsFileStore#getUnallocatedSpace()->long::: windows file store get unallocated space
sun.nio.fs.WindowsFileStore#getFileStoreAttributeView(Class)->V::: windows file store get file store attribute view
sun.nio.fs.WindowsFileStore#getAttribute(String)->Object::: windows file store get attribute
sun.nio.fs.WindowsFileStore#supportsFileAttributeView(Class)->boolean::: windows file store supports file attribute view
sun.nio.fs.WindowsFileStore#supportsFileAttributeView(String)->boolean::: windows file store supports file attribute view
sun.nio.fs.WindowsFileStore#equals(Object)->boolean::: windows file store equals
sun.nio.fs.WindowsFileStore#hashCode()->int::: windows file store hash code
sun.nio.fs.WindowsFileStore#toString()->String::: windows file store to string
sun.nio.fs.WindowsFileSystem#defaultDirectory()->String::: windows file system default directory
sun.nio.fs.WindowsFileSystem#defaultRoot()->String::: windows file system default root
sun.nio.fs.WindowsFileSystem#provider()->FileSystemProvider::: windows file system provider
sun.nio.fs.WindowsFileSystem#getSeparator()->String::: windows file system get separator
sun.nio.fs.WindowsFileSystem#isOpen()->boolean::: windows file system is open
sun.nio.fs.WindowsFileSystem#isReadOnly()->boolean::: windows file system is read only
sun.nio.fs.WindowsFileSystem#close()->void::: windows file system close
sun.nio.fs.WindowsFileSystem#getRootDirectories()->Iterable::: windows file system get root directories
sun.nio.fs.WindowsFileSystem#getFileStores()->Iterable::: windows file system get file stores
sun.nio.fs.WindowsFileSystem#supportedFileAttributeViews()->Set::: windows file system supported file attribute views
sun.nio.fs.WindowsFileSystem#getPath(String, String...)->Path::: windows file system get path
sun.nio.fs.WindowsFileSystem#getUserPrincipalLookupService()->UserPrincipalLookupService::: windows file system get user principal lookup service
sun.nio.fs.WindowsFileSystem#getPathMatcher(String)->PathMatcher::: windows file system get path matcher
sun.nio.fs.WindowsFileSystem#newWatchService()->WatchService::: windows file system new watch service
sun.nio.fs.WindowsFileSystemProvider#theFileSystem()->WindowsFileSystem::: windows file system provider the file system
sun.nio.fs.WindowsFileSystemProvider#getScheme()->String::: windows file system provider get scheme
sun.nio.fs.WindowsFileSystemProvider#newFileSystem(URI, Map)->FileSystem::: windows file system provider new file system
sun.nio.fs.WindowsFileSystemProvider#getFileSystem(URI)->FileSystem::: windows file system provider get file system
sun.nio.fs.WindowsFileSystemProvider#getPath(URI)->Path::: windows file system provider get path
sun.nio.fs.WindowsFileSystemProvider#newFileChannel(Path, Set, FileAttribute...)->FileChannel::: windows file system provider new file channel
sun.nio.fs.WindowsFileSystemProvider#newAsynchronousFileChannel(Path, Set, ExecutorService, FileAttribute...)->AsynchronousFileChannel::: windows file system provider new asynchronous file channel
sun.nio.fs.WindowsFileSystemProvider#getFileAttributeView(Path, Class, LinkOption...)->V::: windows file system provider get file attribute view
sun.nio.fs.WindowsFileSystemProvider#readAttributes(Path, Class, LinkOption...)->A::: windows file system provider read attributes
sun.nio.fs.WindowsFileSystemProvider#getFileAttributeView(Path, String, LinkOption...)->DynamicFileAttributeView::: windows file system provider get file attribute view
sun.nio.fs.WindowsFileSystemProvider#newByteChannel(Path, Set, FileAttribute...)->SeekableByteChannel::: windows file system provider new byte channel
sun.nio.fs.WindowsFileSystemProvider#implDelete(Path, boolean)->boolean::: windows file system provider impl delete
sun.nio.fs.WindowsFileSystemProvider#copy(Path, Path, CopyOption...)->void::: windows file system provider copy
sun.nio.fs.WindowsFileSystemProvider#move(Path, Path, CopyOption...)->void::: windows file system provider move
sun.nio.fs.WindowsFileSystemProvider#checkAccess(Path, AccessMode...)->void::: windows file system provider check access
sun.nio.fs.WindowsFileSystemProvider#isSameFile(Path, Path)->boolean::: windows file system provider is same file
sun.nio.fs.WindowsFileSystemProvider#isHidden(Path)->boolean::: windows file system provider is hidden
sun.nio.fs.WindowsFileSystemProvider#getFileStore(Path)->FileStore::: windows file system provider get file store
sun.nio.fs.WindowsFileSystemProvider#createDirectory(Path, FileAttribute...)->void::: windows file system provider create directory
sun.nio.fs.WindowsFileSystemProvider#newDirectoryStream(Path, DirectoryStream.Filter)->DirectoryStream::: windows file system provider new directory stream
sun.nio.fs.WindowsFileSystemProvider#createSymbolicLink(Path, Path, FileAttribute...)->void::: windows file system provider create symbolic link
sun.nio.fs.WindowsFileSystemProvider#createLink(Path, Path)->void::: windows file system provider create link
sun.nio.fs.WindowsFileSystemProvider#readSymbolicLink(Path)->Path::: windows file system provider read symbolic link
sun.nio.fs.WindowsLinkSupport#readLink(WindowsPath)->String:::Returns the target of a symbolic link
sun.nio.fs.WindowsLinkSupport#getFinalPath(WindowsPath)->String:::Returns the final path (all symbolic links resolved) or null if this operation is not supported.
sun.nio.fs.WindowsLinkSupport#getFinalPath(WindowsPath, boolean)->String:::Returns the final path of a given path as a String
sun.nio.fs.WindowsLinkSupport#getRealPath(WindowsPath, boolean)->String:::Returns the actual path of a file, optionally resolving all symbolic links.
sun.nio.fs.WindowsNativeDispatcher#CreateEvent(boolean, boolean)->long:::HANDLE CreateEvent(   LPSECURITY_ATTRIBUTES lpEventAttributes,   BOOL bManualReset,   BOOL bInitialState,   PCTSTR lpName );
sun.nio.fs.WindowsNativeDispatcher#CreateFile(String, int, int, long, int, int)->long:::HANDLE CreateFile(   LPCTSTR lpFileName,   DWORD dwDesiredAccess,   DWORD dwShareMode,   LPSECURITY_ATTRIBUTES lpSecurityAttributes,   DWORD dwCreationDisposition,   DWORD dwFlagsAndAttributes,   HANDLE hTemplateFile )
sun.nio.fs.WindowsNativeDispatcher#CreateFile(String, int, int, int, int)->long::: windows native dispatcher  create file
sun.nio.fs.WindowsNativeDispatcher#CloseHandle(long)->void:::CloseHandle(   HANDLE hObject )
sun.nio.fs.WindowsNativeDispatcher#DeleteFile(String)->void:::DeleteFile(   LPCTSTR lpFileName )
sun.nio.fs.WindowsNativeDispatcher#CreateDirectory(String, long)->void:::CreateDirectory(   LPCTSTR lpPathName,   LPSECURITY_ATTRIBUTES lpSecurityAttributes )
sun.nio.fs.WindowsNativeDispatcher#RemoveDirectory(String)->void:::RemoveDirectory(   LPCTSTR lpPathName )
sun.nio.fs.WindowsNativeDispatcher#DeviceIoControlSetSparse(long)->void:::Marks a file as a sparse file
sun.nio.fs.WindowsNativeDispatcher#DeviceIoControlGetReparsePoint(long, long, int)->void:::Retrieves the reparse point data associated with the file or directory
sun.nio.fs.WindowsNativeDispatcher#FindFirstFile(String)->FirstFile:::HANDLE FindFirstFile(   LPCTSTR lpFileName,   LPWIN32_FIND_DATA lpFindFileData )
sun.nio.fs.WindowsNativeDispatcher.FirstFile#handle()->long::: first file handle
sun.nio.fs.WindowsNativeDispatcher.FirstFile#name()->String::: first file name
sun.nio.fs.WindowsNativeDispatcher.FirstFile#attributes()->int::: first file attributes
sun.nio.fs.WindowsNativeDispatcher#FindFirstFile(String, long)->long:::HANDLE FindFirstFile(   LPCTSTR lpFileName,   LPWIN32_FIND_DATA lpFindFileData )
sun.nio.fs.WindowsNativeDispatcher#FindNextFile(long, long)->String:::FindNextFile(   HANDLE hFindFile,   LPWIN32_FIND_DATA lpFindFileData )
sun.nio.fs.WindowsNativeDispatcher#FindFirstStream(String)->FirstStream:::HANDLE FindFirstStreamW(   LPCWSTR lpFileName,   STREAM_INFO_LEVELS InfoLevel,   LPVOID lpFindStreamData,   DWORD dwFlags )
sun.nio.fs.WindowsNativeDispatcher.FirstStream#handle()->long::: first stream handle
sun.nio.fs.WindowsNativeDispatcher.FirstStream#name()->String::: first stream name
sun.nio.fs.WindowsNativeDispatcher#FindNextStream(long)->String::: windows native dispatcher  find next stream
sun.nio.fs.WindowsNativeDispatcher#FindClose(long)->void:::FindClose(   HANDLE hFindFile )
sun.nio.fs.WindowsNativeDispatcher#GetFileInformationByHandle(long, long)->void:::GetFileInformationByHandle(   HANDLE hFile,   LPBY_HANDLE_FILE_INFORMATION lpFileInformation )
sun.nio.fs.WindowsNativeDispatcher#CopyFileEx(String, String, int, long)->void:::CopyFileEx(   LPCWSTR lpExistingFileName   LPCWSTR lpNewFileName,   LPPROGRESS_ROUTINE lpProgressRoutine   LPVOID lpData,   LPBOOL pbCancel,   DWORD dwCopyFlags )
sun.nio.fs.WindowsNativeDispatcher#MoveFileEx(String, String, int)->void:::MoveFileEx(   LPCTSTR lpExistingFileName,   LPCTSTR lpNewFileName,   DWORD dwFlags )
sun.nio.fs.WindowsNativeDispatcher#GetFileAttributes(String)->int:::DWORD GetFileAttributes(   LPCTSTR lpFileName )
sun.nio.fs.WindowsNativeDispatcher#SetFileAttributes(String, int)->void:::SetFileAttributes(   LPCTSTR lpFileName,   DWORD dwFileAttributes
sun.nio.fs.WindowsNativeDispatcher#GetFileAttributesEx(String, long)->void:::GetFileAttributesEx(   LPCTSTR lpFileName,   GET_FILEEX_INFO_LEVELS fInfoLevelId,   LPVOID lpFileInformation );
sun.nio.fs.WindowsNativeDispatcher#SetFileTime(long, long, long, long)->void:::SetFileTime(   HANDLE hFile,   CONST FILETIME *lpCreationTime,   CONST FILETIME *lpLastAccessTime,   CONST FILETIME *lpLastWriteTime )
sun.nio.fs.WindowsNativeDispatcher#SetEndOfFile(long)->void:::SetEndOfFile(   HANDLE hFile )
sun.nio.fs.WindowsNativeDispatcher#GetLogicalDrives()->int:::DWORD GetLogicalDrives(VOID)
sun.nio.fs.WindowsNativeDispatcher#GetVolumeInformation(String)->VolumeInformation:::GetVolumeInformation(   LPCTSTR lpRootPathName,   LPTSTR lpVolumeNameBuffer,   DWORD nVolumeNameSize,   LPDWORD lpVolumeSerialNumber,   LPDWORD lpMaximumComponentLength,   LPDWORD lpFileSystemFlags,   LPTSTR lpFileSystemNameBuffer,   DWORD nFileSystemNameSize )
sun.nio.fs.WindowsNativeDispatcher.VolumeInformation#fileSystemName()->String::: volume information file system name
sun.nio.fs.WindowsNativeDispatcher.VolumeInformation#volumeName()->String::: volume information volume name
sun.nio.fs.WindowsNativeDispatcher.VolumeInformation#volumeSerialNumber()->int::: volume information volume serial number
sun.nio.fs.WindowsNativeDispatcher.VolumeInformation#flags()->int::: volume information flags
sun.nio.fs.WindowsNativeDispatcher#GetDriveType(String)->int:::UINT GetDriveType(   LPCTSTR lpRootPathName )
sun.nio.fs.WindowsNativeDispatcher#GetDiskFreeSpaceEx(String)->DiskFreeSpace:::GetDiskFreeSpaceEx(   LPCTSTR lpDirectoryName,   PULARGE_INTEGER lpFreeBytesAvailableToCaller,   PULARGE_INTEGER lpTotalNumberOfBytes,   PULARGE_INTEGER lpTotalNumberOfFreeBytes )
sun.nio.fs.WindowsNativeDispatcher#GetDiskFreeSpace(String)->DiskFreeSpace:::GetDiskFreeSpace(   LPCTSTR lpRootPathName,   LPDWORD lpSectorsPerCluster,   LPDWORD lpBytesPerSector,   LPDWORD lpNumberOfFreeClusters,   LPDWORD lpTotalNumberOfClusters )
sun.nio.fs.WindowsNativeDispatcher.DiskFreeSpace#freeBytesAvailable()->long::: disk free space free bytes available
sun.nio.fs.WindowsNativeDispatcher.DiskFreeSpace#totalNumberOfBytes()->long::: disk free space total number of bytes
sun.nio.fs.WindowsNativeDispatcher.DiskFreeSpace#totalNumberOfFreeBytes()->long::: disk free space total number of free bytes
sun.nio.fs.WindowsNativeDispatcher.DiskFreeSpace#bytesPerSector()->long::: disk free space bytes per sector
sun.nio.fs.WindowsNativeDispatcher#GetVolumePathName(String)->String:::GetVolumePathName(   LPCTSTR lpszFileName,   LPTSTR lpszVolumePathName,   DWORD cchBufferLength )
sun.nio.fs.WindowsNativeDispatcher#InitializeSecurityDescriptor(long)->void:::InitializeSecurityDescriptor(   PSECURITY_DESCRIPTOR pSecurityDescriptor,   DWORD dwRevision )
sun.nio.fs.WindowsNativeDispatcher#InitializeAcl(long, int)->void:::InitializeAcl(   PACL pAcl,   DWORD nAclLength,   DWORD dwAclRevision )
sun.nio.fs.WindowsNativeDispatcher#GetFileSecurity(String, int, long, int)->int:::GetFileSecurity(   LPCTSTR lpFileName,   SECURITY_INFORMATION RequestedInformation,   PSECURITY_DESCRIPTOR pSecurityDescriptor,   DWORD nLength,   LPDWORD lpnLengthNeeded )
sun.nio.fs.WindowsNativeDispatcher#SetFileSecurity(String, int, long)->void:::SetFileSecurity(   LPCTSTR lpFileName,   SECURITY_INFORMATION SecurityInformation,   PSECURITY_DESCRIPTOR pSecurityDescriptor )
sun.nio.fs.WindowsNativeDispatcher#SetFileSecurity0(long, int, long)->void::: windows native dispatcher  set file security0
sun.nio.fs.WindowsNativeDispatcher#GetSecurityDescriptorOwner(long)->long:::GetSecurityDescriptorOwner(   PSECURITY_DESCRIPTOR pSecurityDescriptor   PSID *pOwner,   LPBOOL lpbOwnerDefaulted )
sun.nio.fs.WindowsNativeDispatcher#SetSecurityDescriptorOwner(long, long)->void:::SetSecurityDescriptorOwner(   PSECURITY_DESCRIPTOR pSecurityDescriptor,   PSID pOwner,   BOOL bOwnerDefaulted )
sun.nio.fs.WindowsNativeDispatcher#GetSecurityDescriptorDacl(long)->long:::GetSecurityDescriptorDacl(   PSECURITY_DESCRIPTOR pSecurityDescriptor,   LPBOOL lpbDaclPresent,   PACL *pDacl,   LPBOOL lpbDaclDefaulted )
sun.nio.fs.WindowsNativeDispatcher#SetSecurityDescriptorDacl(long, long)->void:::SetSecurityDescriptorDacl(   PSECURITY_DESCRIPTOR pSecurityDescriptor,   BOOL bDaclPresent,   PACL pDacl,   BOOL bDaclDefaulted )
sun.nio.fs.WindowsNativeDispatcher#GetAclInformation(long)->AclInformation:::GetAclInformation(   PACL pAcl,   LPVOID pAclInformation,   DWORD nAclInformationLength,   ACL_INFORMATION_CLASS dwAclInformationClass )
sun.nio.fs.WindowsNativeDispatcher.AclInformation#aceCount()->int::: acl information ace count
sun.nio.fs.WindowsNativeDispatcher#GetAce(long, int)->long:::GetAce(   PACL pAcl,   DWORD dwAceIndex,   LPVOID *pAce )
sun.nio.fs.WindowsNativeDispatcher#AddAccessAllowedAceEx(long, int, int, long)->void:::AddAccessAllowedAceEx(   PACL pAcl,   DWORD dwAceRevision,   DWORD AceFlags,   DWORD AccessMask,   PSID pSid )
sun.nio.fs.WindowsNativeDispatcher#AddAccessDeniedAceEx(long, int, int, long)->void:::AddAccessDeniedAceEx(   PACL pAcl,   DWORD dwAceRevision,   DWORD AceFlags,   DWORD AccessMask,   PSID pSid )
sun.nio.fs.WindowsNativeDispatcher#LookupAccountSid(long)->Account:::LookupAccountSid(   LPCTSTR lpSystemName,   PSID Sid,   LPTSTR Name,   LPDWORD cbName,   LPTSTR ReferencedDomainName,   LPDWORD cbReferencedDomainName,   PSID_NAME_USE peUse )
sun.nio.fs.WindowsNativeDispatcher.Account#domain()->String::: account domain
sun.nio.fs.WindowsNativeDispatcher.Account#name()->String::: account name
sun.nio.fs.WindowsNativeDispatcher.Account#use()->int::: account use
sun.nio.fs.WindowsNativeDispatcher#LookupAccountName(String, long, int)->int:::LookupAccountName(   LPCTSTR lpSystemName,   LPCTSTR lpAccountName,   PSID Sid,   LPDWORD cbSid,   LPTSTR ReferencedDomainName,   LPDWORD cbReferencedDomainName,   PSID_NAME_USE peUse )
sun.nio.fs.WindowsNativeDispatcher#GetLengthSid(long)->int:::DWORD GetLengthSid(   PSID pSid )
sun.nio.fs.WindowsNativeDispatcher#ConvertSidToStringSid(long)->String:::ConvertSidToStringSid(   PSID Sid,   LPTSTR* StringSid )
sun.nio.fs.WindowsNativeDispatcher#ConvertStringSidToSid(String)->long:::ConvertStringSidToSid(   LPCTSTR StringSid,   PSID* pSid )
sun.nio.fs.WindowsNativeDispatcher#GetCurrentProcess()->long:::HANDLE GetCurrentProcess(VOID)
sun.nio.fs.WindowsNativeDispatcher#GetCurrentThread()->long:::HANDLE GetCurrentThread(VOID)
sun.nio.fs.WindowsNativeDispatcher#OpenProcessToken(long, int)->long:::OpenProcessToken(   HANDLE ProcessHandle,   DWORD DesiredAccess,   PHANDLE TokenHandle )
sun.nio.fs.WindowsNativeDispatcher#OpenThreadToken(long, int, boolean)->long:::OpenThreadToken(   HANDLE ThreadHandle,   DWORD DesiredAccess,   BOOL OpenAsSelf,   PHANDLE TokenHandle )
sun.nio.fs.WindowsNativeDispatcher#DuplicateTokenEx(long, int)->long::: windows native dispatcher  duplicate token ex
sun.nio.fs.WindowsNativeDispatcher#SetThreadToken(long, long)->void:::SetThreadToken(   PHANDLE Thread,   HANDLE Token )
sun.nio.fs.WindowsNativeDispatcher#GetTokenInformation(long, int, long, int)->int:::GetTokenInformation(   HANDLE TokenHandle,   TOKEN_INFORMATION_CLASS TokenInformationClass,   LPVOID TokenInformation,   DWORD TokenInformationLength,   PDWORD ReturnLength )
sun.nio.fs.WindowsNativeDispatcher#AdjustTokenPrivileges(long, long, int)->void:::AdjustTokenPrivileges(   HANDLE TokenHandle,   BOOL DisableAllPrivileges   PTOKEN_PRIVILEGES NewState   DWORD BufferLength   PTOKEN_PRIVILEGES   PDWORD ReturnLength )
sun.nio.fs.WindowsNativeDispatcher#AccessCheck(long, long, int, int, int, int, int)->boolean:::AccessCheck(   PSECURITY_DESCRIPTOR pSecurityDescriptor,   HANDLE ClientToken,   DWORD DesiredAccess,   PGENERIC_MAPPING GenericMapping,   PPRIVILEGE_SET PrivilegeSet,   LPDWORD PrivilegeSetLength,   LPDWORD GrantedAccess,   LPBOOL AccessStatus )
sun.nio.fs.WindowsNativeDispatcher#LookupPrivilegeValue(String)->long::: windows native dispatcher  lookup privilege value
sun.nio.fs.WindowsNativeDispatcher#CreateSymbolicLink(String, String, int)->void:::CreateSymbolicLink(   LPCWSTR lpSymlinkFileName,   LPCWSTR lpTargetFileName,   DWORD dwFlags )
sun.nio.fs.WindowsNativeDispatcher#CreateHardLink(String, String)->void:::CreateHardLink(    LPCTSTR lpFileName,    LPCTSTR lpExistingFileName,    LPSECURITY_ATTRIBUTES lpSecurityAttributes )
sun.nio.fs.WindowsNativeDispatcher#GetFullPathName(String)->String:::GetFullPathName(   LPCTSTR lpFileName,   DWORD nBufferLength,   LPTSTR lpBuffer,   LPTSTR *lpFilePart )
sun.nio.fs.WindowsNativeDispatcher#GetFinalPathNameByHandle(long)->String:::GetFinalPathNameByHandle(   HANDLE hFile,   LPTSTR lpszFilePath,   DWORD cchFilePath,   DWORD dwFlags )
sun.nio.fs.WindowsNativeDispatcher#FormatMessage(int)->String:::FormatMessage(   DWORD dwFlags,   LPCVOID lpSource,   DWORD dwMessageId,   DWORD dwLanguageId,   LPTSTR lpBuffer,   DWORD nSize,   va_list *Arguments )
sun.nio.fs.WindowsNativeDispatcher#LocalFree(long)->void:::LocalFree(   HLOCAL hMem )
sun.nio.fs.WindowsNativeDispatcher#CreateIoCompletionPort(long, long, long)->long:::HANDLE CreateIoCompletionPort (   HANDLE FileHandle,   HANDLE ExistingCompletionPort,   ULONG_PTR CompletionKey,   DWORD NumberOfConcurrentThreads )
sun.nio.fs.WindowsNativeDispatcher#GetQueuedCompletionStatus(long)->CompletionStatus:::GetQueuedCompletionStatus(   HANDLE CompletionPort,   LPDWORD lpNumberOfBytesTransferred,   PULONG_PTR lpCompletionKey,   LPOVERLAPPED *lpOverlapped,   DWORD dwMilliseconds
sun.nio.fs.WindowsNativeDispatcher.CompletionStatus#error()->int::: completion status error
sun.nio.fs.WindowsNativeDispatcher.CompletionStatus#bytesTransferred()->int::: completion status bytes transferred
sun.nio.fs.WindowsNativeDispatcher.CompletionStatus#completionKey()->long::: completion status completion key
sun.nio.fs.WindowsNativeDispatcher#PostQueuedCompletionStatus(long, long)->void:::PostQueuedCompletionStatus(   HANDLE CompletionPort,   DWORD dwNumberOfBytesTransferred,   ULONG_PTR dwCompletionKey,   LPOVERLAPPED lpOverlapped )
sun.nio.fs.WindowsNativeDispatcher#ReadDirectoryChangesW(long, long, int, boolean, int, long, long)->void:::ReadDirectoryChangesW(   HANDLE hDirectory,   LPVOID lpBuffer,   DWORD nBufferLength,   BOOL bWatchSubtree,   DWORD dwNotifyFilter,   LPDWORD lpBytesReturned,   LPOVERLAPPED lpOverlapped,   LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
sun.nio.fs.WindowsNativeDispatcher#CancelIo(long)->void:::CancelIo(   HANDLE hFile )
sun.nio.fs.WindowsNativeDispatcher#GetOverlappedResult(long, long)->int:::GetOverlappedResult(   HANDLE hFile,   LPOVERLAPPED lpOverlapped,   LPDWORD lpNumberOfBytesTransferred,   BOOL bWait );
sun.nio.fs.WindowsNativeDispatcher#asNativeBuffer(String)->NativeBuffer::: windows native dispatcher as native buffer
sun.nio.fs.WindowsPath#parse(WindowsFileSystem, String)->WindowsPath:::Creates a Path by parsing the given path.
sun.nio.fs.WindowsPath#createFromNormalizedPath(WindowsFileSystem, String, BasicFileAttributes)->WindowsPath:::Creates a Path from a given path that is known to be normalized.
sun.nio.fs.WindowsPath#createFromNormalizedPath(WindowsFileSystem, String)->WindowsPath:::Creates a WindowsPath from a given path that is known to be normalized.
sun.nio.fs.WindowsPath#getPathForExceptionMessage()->String::: windows path get path for exception message
sun.nio.fs.WindowsPath#getPathForPermissionCheck()->String::: windows path get path for permission check
sun.nio.fs.WindowsPath#getPathForWin32Calls()->String::: windows path get path for win32 calls
sun.nio.fs.WindowsPath#addPrefixIfNeeded(String)->String::: windows path add prefix if needed
sun.nio.fs.WindowsPath#getFileSystem()->WindowsFileSystem::: windows path get file system
sun.nio.fs.WindowsPath#getFileName()->Path::: windows path get file name
sun.nio.fs.WindowsPath#getParent()->WindowsPath::: windows path get parent
sun.nio.fs.WindowsPath#getRoot()->WindowsPath::: windows path get root
sun.nio.fs.WindowsPath#type()->WindowsPathType::: windows path type
sun.nio.fs.WindowsPath#isUnc()->boolean::: windows path is unc
sun.nio.fs.WindowsPath#needsSlashWhenResolving()->boolean::: windows path needs slash when resolving
sun.nio.fs.WindowsPath#isAbsolute()->boolean::: windows path is absolute
sun.nio.fs.WindowsPath#toWindowsPath(Path)->WindowsPath::: windows path to windows path
sun.nio.fs.WindowsPath#relativize(Path)->WindowsPath::: windows path relativize
sun.nio.fs.WindowsPath#normalize()->WindowsPath::: windows path normalize
sun.nio.fs.WindowsPath#resolve(Path)->WindowsPath::: windows path resolve
sun.nio.fs.WindowsPath#getNameCount()->int::: windows path get name count
sun.nio.fs.WindowsPath#getName(int)->WindowsPath::: windows path get name
sun.nio.fs.WindowsPath#subpath(int, int)->WindowsPath::: windows path subpath
sun.nio.fs.WindowsPath#startsWith(Path)->boolean::: windows path starts with
sun.nio.fs.WindowsPath#endsWith(Path)->boolean::: windows path ends with
sun.nio.fs.WindowsPath#compareTo(Path)->int::: windows path compare to
sun.nio.fs.WindowsPath#equals(Object)->boolean::: windows path equals
sun.nio.fs.WindowsPath#hashCode()->int::: windows path hash code
sun.nio.fs.WindowsPath#toString()->String::: windows path to string
sun.nio.fs.WindowsPath#openForReadAttributeAccess(boolean)->long::: windows path open for read attribute access
sun.nio.fs.WindowsPath#checkRead()->void::: windows path check read
sun.nio.fs.WindowsPath#checkWrite()->void::: windows path check write
sun.nio.fs.WindowsPath#checkDelete()->void::: windows path check delete
sun.nio.fs.WindowsPath#toUri()->URI::: windows path to uri
sun.nio.fs.WindowsPath#toAbsolutePath()->WindowsPath::: windows path to absolute path
sun.nio.fs.WindowsPath#toRealPath(LinkOption...)->WindowsPath::: windows path to real path
sun.nio.fs.WindowsPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)->WatchKey::: windows path register
sun.nio.fs.WindowsPathParser.Result#type()->WindowsPathType:::The path type
sun.nio.fs.WindowsPathParser.Result#root()->String:::The root component
sun.nio.fs.WindowsPathParser.Result#path()->String:::The normalized path (includes root)
sun.nio.fs.WindowsPathParser#parse(String)->Result:::Parses the given input as a Windows path
sun.nio.fs.WindowsPathParser#parseNormalizedPath(String)->Result:::Parses the given input as a Windows path where it is known that the path is already normalized.
sun.nio.fs.WindowsSecurity.Privilege#drop()->void::: privilege drop
sun.nio.fs.WindowsSecurity#enablePrivilege(String)->Privilege:::Attempts to enable the given privilege for this method.
sun.nio.fs.WindowsSecurity#checkAccessMask(long, int, int, int, int, int)->boolean:::Check the access right against the securityInfo in the current thread.
sun.nio.fs.WindowsSecurityDescriptor#release()->void:::Releases memory associated with SecurityDescriptor
sun.nio.fs.WindowsSecurityDescriptor#address()->long:::Returns address of SecurityDescriptor
sun.nio.fs.WindowsSecurityDescriptor#create(List)->WindowsSecurityDescriptor:::Creates a security descriptor with a DACL representing the given ACL.
sun.nio.fs.WindowsSecurityDescriptor#fromAttribute(FileAttribute...)->WindowsSecurityDescriptor:::Processes the array of attributes looking for the attribute "acl:acl"
sun.nio.fs.WindowsSecurityDescriptor#getAcl(long)->List:::Extracts DACL from security descriptor.
sun.nio.fs.WindowsUriSupport#toUri(WindowsPath)->URI:::Converts given Path to a URI
sun.nio.fs.WindowsUriSupport#fromUri(WindowsFileSystem, URI)->WindowsPath:::Converts given URI to a Path
sun.nio.fs.WindowsUserDefinedFileAttributeView#list()->List::: windows user defined file attribute view list
sun.nio.fs.WindowsUserDefinedFileAttributeView#size(String)->int::: windows user defined file attribute view size
sun.nio.fs.WindowsUserDefinedFileAttributeView#read(String, ByteBuffer)->int::: windows user defined file attribute view read
sun.nio.fs.WindowsUserDefinedFileAttributeView#write(String, ByteBuffer)->int::: windows user defined file attribute view write
sun.nio.fs.WindowsUserDefinedFileAttributeView#delete(String)->void::: windows user defined file attribute view delete
sun.nio.fs.WindowsUserPrincipals.User#sidString()->String::: user sid string
sun.nio.fs.WindowsUserPrincipals.User#getName()->String::: user get name
sun.nio.fs.WindowsUserPrincipals.User#toString()->String::: user to string
sun.nio.fs.WindowsUserPrincipals.User#equals(Object)->boolean::: user equals
sun.nio.fs.WindowsUserPrincipals.User#hashCode()->int::: user hash code
sun.nio.fs.WindowsUserPrincipals#fromSid(long)->UserPrincipal::: windows user principals from sid
sun.nio.fs.WindowsUserPrincipals#lookup(String)->UserPrincipal::: windows user principals lookup
sun.nio.fs.WindowsWatchService#register(Path, WatchEvent.Kind[], WatchEvent.Modifier...)->WatchKey::: windows watch service register
sun.nio.fs.WindowsWatchService#implClose()->void::: windows watch service impl close

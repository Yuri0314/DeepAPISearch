BaseRowSet#initParams():::Performs the necessary internal configurations and initializations to allow any JDBC RowSet implementation to start using the standard facilities provided by a BaseRowSet instance:::new->Hashtable<Integer,Object>
BaseRowSet#addRowSetListener(RowSetListener):::The listener will be notified whenever an event occurs on this RowSet object:::listeners->add
BaseRowSet#removeRowSetListener(RowSetListener):::Removes the designated object from this RowSet object's list of listeners:::listeners->remove
BaseRowSet#checkforRowSetInterface():::Determine if instance of this class extends the RowSet interface.:::if->throw->new->SQLException
BaseRowSet#notifyCursorMoved():::Notifies all of the listeners registered with this RowSet object that its cursor has moved:::checkforRowSetInterface->if->listeners->isEmpty->event->new->RowSetEvent->foreach->rsl->cursorMoved
BaseRowSet#notifyRowChanged():::Notifies all of the listeners registered with this RowSet object that one of its rows has changed:::checkforRowSetInterface->if->listeners->isEmpty->event->new->RowSetEvent->foreach->rsl->rowChanged
BaseRowSet#notifyRowSetChanged():::Notifies all of the listeners registered with this RowSet object that its entire contents have changed:::checkforRowSetInterface->if->listeners->isEmpty->event->new->RowSetEvent->foreach->rsl->rowSetChanged
BaseRowSet#getCommand():::Retrieves the SQL query that is the command for this RowSet object:::return
BaseRowSet#setCommand(String):::Sets this RowSet object's command property to the given String object and clears the parameters, if any, that were set for the previous command:::if->else->if->cmd->length->throw->new->SQLException->else->if->throw->new->SQLException->params->clear
BaseRowSet#getUrl():::Retrieves the JDBC URL that this RowSet object's javax.sql.Reader object uses to make a connection with a relational database using a JDBC technology-enabled driver:::return
BaseRowSet#setUrl(String):::Sets the Url property for this RowSet object to the given String object and sets the dataSource name property to null:::if->else->if->url->length->throw->new->SQLException->else
BaseRowSet#getDataSourceName():::Returns the logical name that when supplied to a naming service that uses the Java Naming and Directory Interface (JNDI) API, will retrieve a javax.sql.DataSource object:::return
BaseRowSet#setDataSourceName(String):::Sets the DataSource name property for this RowSet object to the given logical name and sets this RowSet object's Url property to null:::if->else->if->name->equals->throw->new->SQLException->else
BaseRowSet#getUsername():::Returns the user name used to create a database connection:::return
BaseRowSet#setUsername(String):::Sets the username property for this RowSet object to the given user name:::if->else
BaseRowSet#getPassword():::Returns the password used to create a database connection for this RowSet object:::return
BaseRowSet#setPassword(String):::Sets the password used to create a database connection for this RowSet object to the given String object:::if->else
BaseRowSet#setType(int):::Sets the type for this RowSet object to the specified type:::if->throw->new->SQLException
BaseRowSet#getType():::Returns the type of this RowSet object:::return
BaseRowSet#setConcurrency(int):::Sets the concurrency for this RowSet object to the specified concurrency:::if->throw->new->SQLException
BaseRowSet#isReadOnly():::Returns a boolean indicating whether this RowSet object is read-only:::return
BaseRowSet#setReadOnly(boolean):::Sets this RowSet object's readOnly  property to the given boolean.:::
BaseRowSet#getTransactionIsolation():::Returns the transaction isolation property for this RowSet object's connection:::return
BaseRowSet#setTransactionIsolation(int):::Sets the transaction isolation property for this JDBC RowSet object to the given constant:::if->throw->new->SQLException
BaseRowSet#getTypeMap():::Retrieves the type map associated with the Connection object for this RowSet object:::return
BaseRowSet#setTypeMap(java.util.Map>):::Installs the given java.util.Map object as the type map associated with the Connection object for this RowSet object:::
BaseRowSet#getMaxFieldSize():::Retrieves the maximum number of bytes that can be used for a column value in this RowSet object:::return
BaseRowSet#setMaxFieldSize(int):::Sets the maximum number of bytes that can be used for a column value in this RowSet object to the given number:::if->throw->new->SQLException
BaseRowSet#getMaxRows():::Retrieves the maximum number of rows that this RowSet object may contain:::return
BaseRowSet#setMaxRows(int):::Sets the maximum number of rows that this RowSet object may contain to the given number:::if->throw->new->SQLException->else->if->this->getFetchSize->throw->new->SQLException
BaseRowSet#setEscapeProcessing(boolean):::Sets to the given boolean whether or not the driver will scan for escape syntax and do escape substitution before sending SQL statements to the database:::
BaseRowSet#getQueryTimeout():::Retrieves the maximum number of seconds the driver will wait for a query to execute:::return
BaseRowSet#setQueryTimeout(int):::Sets to the given number the maximum number of seconds the driver will wait for a query to execute:::if->throw->new->SQLException
BaseRowSet#getShowDeleted():::Retrieves a boolean indicating whether rows marked for deletion appear in the set of current rows:::return
BaseRowSet#setShowDeleted(boolean):::Sets the property showDeleted to the given boolean value, which determines whether rows marked for deletion appear in the set of current rows.:::
BaseRowSet#getEscapeProcessing():::Ascertains whether escape processing is enabled for this RowSet object.:::return
BaseRowSet#setFetchDirection(int):::Gives the driver a performance hint as to the direction in which the rows in this RowSet object will be processed:::if->getType->throw->new->SQLException
BaseRowSet#getFetchDirection():::Retrieves this RowSet object's current setting for the fetch direction:::return
BaseRowSet#setFetchSize(int):::Sets the fetch size for this RowSet object to the given number of rows:::if->getMaxRows->return->if->getMaxRows->throw->new->SQLException
BaseRowSet#getFetchSize():::Returns the fetch size for this RowSet object:::return
BaseRowSet#getConcurrency():::Returns the concurrency for this RowSet object:::return
BaseRowSet#checkParamIndex(int):::Checks the given index to see whether it is less than 1 and throws an SQLException object if it is:::if->throw->new->SQLException
BaseRowSet#setNull(int, int):::Sets the designated parameter to SQL NULL:::nullVal->checkParamIndex->new->ObjectArr->Integer->valueOf->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setNull(int, int, String):::Sets the designated parameter to SQL NULL:::nullVal->checkParamIndex->new->ObjectArr->Integer->valueOf->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setBoolean(int, boolean):::Sets the designated parameter to the given boolean in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->Boolean->valueOf->put
BaseRowSet#setByte(int, byte):::Sets the designated parameter to the given byte in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->Byte->valueOf->put
BaseRowSet#setShort(int, short):::Sets the designated parameter to the given short in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->Short->valueOf->put
BaseRowSet#setInt(int, int):::Sets the designated parameter to an int in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->Integer->valueOf->put
BaseRowSet#setLong(int, long):::Sets the designated parameter to the given long in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->Long->valueOf->put
BaseRowSet#setFloat(int, float):::Sets the designated parameter to the given float in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->Float->valueOf->put
BaseRowSet#setDouble(int, double):::Sets the designated parameter to the given double in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->Double->valueOf->put
BaseRowSet#setBigDecimal(int, java.math.BigDecimal):::Sets the designated parameter to the given java.lang.BigDecimal value:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setString(int, String):::Sets the designated parameter to the given String value:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setBytes(int, byte[]):::Sets the designated parameter to the given array of bytes:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setDate(int, java.sql.Date):::Sets the designated parameter to the given java.sql.Date value:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setTime(int, java.sql.Time):::Sets the designated parameter to the given java.sql.Time value:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setTimestamp(int, java.sql.Timestamp):::Sets the designated parameter to the given java.sql.Timestamp value:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setAsciiStream(int, java.io.InputStream, int):::Sets the designated parameter to the given java.io.InputStream object, which will have the specified number of bytes:::asciiStream->checkParamIndex->new->ObjectArr->Integer->valueOf->Integer->valueOf->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setAsciiStream(int, java.io.InputStream):::Sets the designated parameter in this RowSet object's command to the given input stream:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBinaryStream(int, java.io.InputStream, int):::Sets the designated parameter to the given java.io.InputStream object, which will have the specified number of bytes:::binaryStream->checkParamIndex->new->ObjectArr->Integer->valueOf->Integer->valueOf->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setBinaryStream(int, java.io.InputStream):::Sets the designated parameter in this RowSet object's command to the given input stream:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setUnicodeStream(int, java.io.InputStream, int):::Sets the designated parameter to the given java.io.InputStream object, which will have the specified number of bytes:::unicodeStream->checkParamIndex->new->ObjectArr->Integer->valueOf->Integer->valueOf->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setCharacterStream(int, Reader, int):::Sets the designated parameter to the given java.io.Reader object, which will have the specified number of characters:::charStream->checkParamIndex->new->ObjectArr->Integer->valueOf->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setCharacterStream(int, java.io.Reader):::Sets the designated parameter in this RowSet object's command to the given Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setObject(int, Object, int, int):::Sets the designated parameter to an Object in the Java programming language:::obj->checkParamIndex->new->ObjectArr->Integer->valueOf->Integer->valueOf->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setObject(int, Object, int):::Sets the value of the designated parameter with the given Object value:::obj->checkParamIndex->new->ObjectArr->Integer->valueOf->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setObject(int, Object):::Sets the designated parameter to an Object in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setRef(int, Ref):::Sets the designated parameter to the given Ref object in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->new->SerialRef->put
BaseRowSet#setBlob(int, Blob):::Sets the designated parameter to the given Blob object in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->new->SerialBlob->put
BaseRowSet#setClob(int, Clob):::Sets the designated parameter to the given Clob object in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->new->SerialClob->put
BaseRowSet#setArray(int, Array):::Sets the designated parameter to an Array object in the Java programming language:::checkParamIndex->if->throw->new->SQLException->params->Integer->valueOf->new->SerialArray->put
BaseRowSet#setDate(int, java.sql.Date, Calendar):::Sets the designated parameter to the given java.sql.Date object:::date->checkParamIndex->new->ObjectArr->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setTime(int, java.sql.Time, Calendar):::Sets the designated parameter to the given java.sql.Time object:::time->checkParamIndex->new->ObjectArr->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#setTimestamp(int, java.sql.Timestamp, Calendar):::Sets the designated parameter to the given java.sql.Timestamp object:::timestamp->checkParamIndex->new->ObjectArr->if->throw->new->SQLException->params->Integer->valueOf->put
BaseRowSet#clearParameters():::Clears all of the current parameter values in this RowSet object's internal representation of the parameters to be set in this RowSet object's command when it is executed:::params->clear
BaseRowSet#getParams():::Retrieves an array containing the parameter values (both Objects and primitives) that have been set for this RowSet object's command and throws an SQLException object if all parameters have not been set:::if->initParams->paramsArray->params->size->new->ObjectArr->return->else->paramsArray->params->size->new->ObjectArr->for->i->params->size->return
BaseRowSet#setNull(String, int):::Sets the designated parameter to SQL NULL:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNull(String, int, String):::Sets the designated parameter to SQL NULL:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBoolean(String, boolean):::Sets the designated parameter to the given Java boolean value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setByte(String, byte):::Sets the designated parameter to the given Java byte value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setShort(String, short):::Sets the designated parameter to the given Java short value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setInt(String, int):::Sets the designated parameter to the given Java int value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setLong(String, long):::Sets the designated parameter to the given Java long value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setFloat(String, float):::Sets the designated parameter to the given Java float value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setDouble(String, double):::Sets the designated parameter to the given Java double value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBigDecimal(String, BigDecimal):::Sets the designated parameter to the given java.math.BigDecimal value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setString(String, String):::Sets the designated parameter to the given Java String value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBytes(String, byte[]):::Sets the designated parameter to the given Java array of bytes:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setTimestamp(String, java.sql.Timestamp):::Sets the designated parameter to the given java.sql.Timestamp value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setAsciiStream(String, java.io.InputStream, int):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBinaryStream(String, java.io.InputStream, int):::Sets the designated parameter to the given input stream, which will have the specified number of bytes:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setCharacterStream(String, java.io.Reader, int):::Sets the designated parameter to the given Reader object, which is the given number of characters long:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setAsciiStream(String, java.io.InputStream):::Sets the designated parameter to the given input stream:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBinaryStream(String, java.io.InputStream):::Sets the designated parameter to the given input stream:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setCharacterStream(String, java.io.Reader):::Sets the designated parameter to the given Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNCharacterStream(int, Reader):::Sets the designated parameter in this RowSet object's command to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setObject(String, Object, int, int):::Sets the value of the designated parameter with the given object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setObject(String, Object, int):::Sets the value of the designated parameter with the given object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setObject(String, Object):::Sets the value of the designated parameter with the given object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBlob(int, InputStream, long):::Sets the designated parameter to a InputStream object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBlob(int, InputStream):::Sets the designated parameter to a InputStream object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBlob(String, InputStream, long):::Sets the designated parameter to a InputStream object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBlob(String, Blob):::Sets the designated parameter to the given java.sql.Blob object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setBlob(String, InputStream):::Sets the designated parameter to a InputStream object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setClob(int, Reader, long):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setClob(int, Reader):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setClob(String, Reader, long):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setClob(String, Clob):::Sets the designated parameter to the given java.sql.Clob object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setClob(String, Reader):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setDate(String, java.sql.Date):::Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setDate(String, java.sql.Date, Calendar):::Sets the designated parameter to the given java.sql.Date value, using the given Calendar object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setTime(String, java.sql.Time):::Sets the designated parameter to the given java.sql.Time value:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setTime(String, java.sql.Time, Calendar):::Sets the designated parameter to the given java.sql.Time value, using the given Calendar object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setTimestamp(String, java.sql.Timestamp, Calendar):::Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setSQLXML(int, SQLXML):::Sets the designated parameter to the given java.sql.SQLXML object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setSQLXML(String, SQLXML):::Sets the designated parameter to the given java.sql.SQLXML object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setRowId(int, RowId):::Sets the designated parameter to the given java.sql.RowId object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setRowId(String, RowId):::Sets the designated parameter to the given java.sql.RowId object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNString(int, String):::Sets the designated parameter to the given String object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNString(String, String):::Sets the designated parameter to the given String object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNCharacterStream(int, Reader, long):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNCharacterStream(String, Reader, long):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNCharacterStream(String, Reader):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNClob(String, NClob):::Sets the designated parameter to a java.sql.NClob object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNClob(String, Reader, long):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNClob(String, Reader):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNClob(int, Reader, long):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNClob(int, NClob):::Sets the designated parameter to a java.sql.NClob object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setNClob(int, Reader):::Sets the designated parameter to a Reader object:::throw->new->SQLFeatureNotSupportedException
BaseRowSet#setURL(int, java.net.URL):::Sets the designated parameter to the given java.net.URL value:::throw->new->SQLFeatureNotSupportedException
CachedRowSet#populate(ResultSet):::Populates this CachedRowSet object with data from the given ResultSet object:::
CachedRowSet#execute(Connection):::Populates this CachedRowSet object with data, using the given connection to produce the result set from which the data will be read:::
CachedRowSet#acceptChanges():::Propagates row update, insert and delete changes made to this CachedRowSet object to the underlying data source:::
CachedRowSet#acceptChanges(Connection):::Propagates all row update, insert and delete changes to the data source backing this CachedRowSet object using the specified Connection object to establish a connection to the data source:::
CachedRowSet#restoreOriginal():::Restores this CachedRowSet object to its original value, that is, its value before the last set of changes:::
CachedRowSet#release():::Releases the current contents of this CachedRowSet object and sends a rowSetChanged event to all registered listeners:::
CachedRowSet#undoDelete():::Cancels the deletion of the current row and notifies listeners that a row has changed:::
CachedRowSet#undoInsert():::Immediately removes the current row from this CachedRowSet object if the row has been inserted, and also notifies listeners that a row has changed:::
CachedRowSet#undoUpdate():::Immediately reverses the last update operation if the row has been modified:::
CachedRowSet#columnUpdated(int):::Indicates whether the designated column in the current row of this CachedRowSet object has been updated.:::
CachedRowSet#columnUpdated(String):::Indicates whether the designated column in the current row of this CachedRowSet object has been updated.:::
CachedRowSet#toCollection():::Converts this CachedRowSet object to a Collection object that contains all of this CachedRowSet object's data:::
CachedRowSet#toCollection(int):::Converts the designated column in this CachedRowSet object to a Collection object:::
CachedRowSet#toCollection(String):::Converts the designated column in this CachedRowSet object to a Collection object:::
CachedRowSet#getSyncProvider():::Retrieves the SyncProvider implementation for this CachedRowSet object:::
CachedRowSet#setSyncProvider(String):::Sets the SyncProvider object for this CachedRowSet object to the one specified:::
CachedRowSet#size():::Returns the number of rows in this CachedRowSet object.:::
CachedRowSet#setMetaData(RowSetMetaData):::Sets the metadata for this CachedRowSet object with the given RowSetMetaData object:::
CachedRowSet#getOriginal():::Returns a ResultSet object containing the original value of this CachedRowSet object:::
CachedRowSet#getOriginalRow():::Returns a ResultSet object containing the original value for the current row only of this CachedRowSet object:::
CachedRowSet#setOriginalRow():::Sets the current row in this CachedRowSet object as the original row:::
CachedRowSet#getTableName():::Returns an identifier for the object (table) that was used to create this CachedRowSet object:::
CachedRowSet#setTableName(String):::Sets the identifier for the table from which this CachedRowSet object was derived to the given table name:::
CachedRowSet#getKeyColumns():::Returns an array containing one or more column numbers indicating the columns that form a key that uniquely identifies a row in this CachedRowSet object.:::
CachedRowSet#setKeyColumns(int[]):::Sets this CachedRowSet object's keyCols field with the given array of column numbers, which forms a key for uniquely identifying a row in this CachedRowSet object:::
CachedRowSet#createShared():::Returns a new RowSet object backed by the same data as that of this CachedRowSet object:::
CachedRowSet#createCopy():::Creates a RowSet object that is a deep copy of the data in this CachedRowSet object:::
CachedRowSet#createCopySchema():::Creates a CachedRowSet object that is an empty copy of this CachedRowSet object:::
CachedRowSet#createCopyNoConstraints():::Creates a CachedRowSet object that is a deep copy of this CachedRowSet object's data but is independent of it:::
CachedRowSet#getRowSetWarnings():::Retrieves the first warning reported by calls on this RowSet object:::
CachedRowSet#getShowDeleted():::Retrieves a boolean indicating whether rows marked for deletion appear in the set of current rows:::
CachedRowSet#setShowDeleted(boolean):::Sets the property showDeleted to the given boolean value, which determines whether rows marked for deletion appear in the set of current rows:::
CachedRowSet#commit():::Each CachedRowSet object's SyncProvider contains a Connection object from the ResultSet or JDBC properties passed to it's constructors:::
CachedRowSet#rollback():::Each CachedRowSet object's SyncProvider contains a Connection object from the original ResultSet or JDBC properties passed to it:::
CachedRowSet#rollback(Savepoint):::Each CachedRowSet object's SyncProvider contains a Connection object from the original ResultSet or JDBC properties passed to it:::
CachedRowSet#rowSetPopulated(RowSetEvent, int):::Notifies registered listeners that a RowSet object in the given RowSetEvent object has populated a number of additional rows:::
CachedRowSet#populate(ResultSet, int):::Populates this CachedRowSet object with data from the given ResultSet object:::
CachedRowSet#setPageSize(int):::Sets the CachedRowSet object's page-size:::
CachedRowSet#getPageSize():::Returns the page-size for the CachedRowSet object:::
CachedRowSet#nextPage():::Increments the current page of the CachedRowSet:::
CachedRowSet#previousPage():::Decrements the current page of the CachedRowSet:::
FilteredRowSet#setFilter(Predicate):::Applies the given Predicate object to this FilteredRowSet object:::
FilteredRowSet#getFilter():::Retrieves the active filter for this FilteredRowSet object.:::
JdbcRowSet#getShowDeleted():::Retrieves a boolean indicating whether rows marked for deletion appear in the set of current rows:::
JdbcRowSet#setShowDeleted(boolean):::Sets the property showDeleted to the given boolean value:::
JdbcRowSet#getRowSetWarnings():::Retrieves the first warning reported by calls on this JdbcRowSet object:::
JdbcRowSet#commit():::Each JdbcRowSet contains a Connection object from the ResultSet or JDBC properties passed to it's constructors:::
JdbcRowSet#getAutoCommit():::Each JdbcRowSet contains a Connection object from the original ResultSet or JDBC properties passed to it:::
JdbcRowSet#setAutoCommit(boolean):::Each JdbcRowSet contains a Connection object from the original ResultSet or JDBC properties passed to it:::
JdbcRowSet#rollback():::Each JdbcRowSet contains a Connection object from the original ResultSet or JDBC properties passed to it:::
JdbcRowSet#rollback(Savepoint):::Each JdbcRowSet contains a Connection object from the original ResultSet or JDBC properties passed to it:::
Joinable#setMatchColumn(int):::Sets the designated column as the match column for this RowSet object:::
Joinable#setMatchColumn(int[]):::Sets the designated columns as the match column for this RowSet object:::
Joinable#setMatchColumn(String):::Sets the designated column as the match column for this RowSet object:::
Joinable#setMatchColumn(String[]):::Sets the designated columns as the match column for this RowSet object:::
Joinable#getMatchColumnIndexes():::Retrieves the indexes of the match columns that were set for this RowSet object with the method setMatchColumn(int[] columnIdxes).:::
Joinable#getMatchColumnNames():::Retrieves the names of the match columns that were set for this RowSet object with the method setMatchColumn(String [] columnNames).:::
Joinable#unsetMatchColumn(int):::Unsets the designated column as the match column for this RowSet object:::
Joinable#unsetMatchColumn(int[]):::Unsets the designated columns as the match column for this RowSet object.:::
Joinable#unsetMatchColumn(String):::Unsets the designated column as the match column for this RowSet object:::
Joinable#unsetMatchColumn(String[]):::Unsets the designated columns as the match columns for this RowSet object.:::
JoinRowSet#addRowSet(Joinable):::Adds the given RowSet object to this JoinRowSet object:::
JoinRowSet#addRowSet(RowSet, int):::Adds the given RowSet object to this JoinRowSet object and sets the designated column as the match column for the RowSet object:::
JoinRowSet#addRowSet(RowSet, String):::Adds rowset to this JoinRowSet object and sets the designated column as the match column:::
JoinRowSet#addRowSet(RowSet[], int[]):::Adds one or more RowSet objects contained in the given array of RowSet objects to this JoinRowSet object and sets the match column for each of the RowSet objects to the match columns in the given array of column indexes:::
JoinRowSet#addRowSet(RowSet[], String[]):::Adds one or more RowSet objects contained in the given array of RowSet objects to this JoinRowSet object and sets the match column for each of the RowSet objects to the match columns in the given array of column names:::
JoinRowSet#getRowSets():::Returns a Collection object containing the RowSet objects that have been added to this JoinRowSet object:::
JoinRowSet#getRowSetNames():::Returns a String array containing the names of the         RowSet objects added to this JoinRowSet         object.:::
JoinRowSet#toCachedRowSet():::Creates a new CachedRowSet object containing the data in this JoinRowSet object, which can be saved to a data source using the SyncProvider object for the CachedRowSet object:::
JoinRowSet#supportsCrossJoin():::Indicates if CROSS_JOIN is supported by a JoinRowSet implementation:::
JoinRowSet#supportsInnerJoin():::Indicates if INNER_JOIN is supported by a JoinRowSet implementation:::
JoinRowSet#supportsLeftOuterJoin():::Indicates if LEFT_OUTER_JOIN is supported by a JoinRowSet implementation:::
JoinRowSet#supportsRightOuterJoin():::Indicates if RIGHT_OUTER_JOIN is supported by a JoinRowSet implementation:::
JoinRowSet#supportsFullJoin():::Indicates if FULL_JOIN is supported by a JoinRowSet implementation:::
JoinRowSet#setJoinType(int):::Allow the application to adjust the type of JOIN imposed on tables contained within the JoinRowSet object instance:::
JoinRowSet#getWhereClause():::Return a SQL-like description of the WHERE clause being used in a JoinRowSet object:::
JoinRowSet#getJoinType():::Returns a int describing the set SQL JOIN type governing this JoinRowSet instance:::
Predicate#evaluate(RowSet):::This method is typically called a FilteredRowSet object internal methods (not public) that control the RowSet object's cursor moving  from row to the next:::
Predicate#evaluate(Object, int):::This method is called by a FilteredRowSet object to check whether the value lies between the filtering criterion (or criteria if multiple constraints exist) set using the setFilter() method:::
Predicate#evaluate(Object, String):::This method is called by the FilteredRowSet object to check whether the value lies between the filtering criteria set using the setFilter method:::
RowSetFactory#createCachedRowSet():::Creates a new instance of a CachedRowSet.:::
RowSetFactory#createFilteredRowSet():::Creates a new instance of a FilteredRowSet.:::
RowSetFactory#createJdbcRowSet():::Creates a new instance of a JdbcRowSet.:::
RowSetFactory#createJoinRowSet():::Creates a new instance of a JoinRowSet.:::
RowSetFactory#createWebRowSet():::Creates a new instance of a WebRowSet.:::
RowSetMetaDataImpl#checkColRange(int):::Checks to see that the designated column is a valid column number for the RowSet object for which this RowSetMetaDataImpl was created:::if->throw->new->SQLException
RowSetMetaDataImpl#checkColType(int):::Checks to see that the given SQL type is a valid column type and throws an SQLException object if it is not:::try->c->publicFields->c->getFields->fieldValue->for->i->catch->throw->e->getMessage->new->SQLException->finally->throw->new->SQLException
RowSetMetaDataImpl#setColumnCount(int):::Sets to the given number the number of columns in the RowSet object for which this RowSetMetaDataImpl object was created.:::if->throw->new->SQLException->if->new->ColInfoArr->for->i
RowSetMetaDataImpl#setAutoIncrement(int, boolean):::Sets whether the designated column is automatically numbered, thus read-only, to the given boolean value.:::checkColRange
RowSetMetaDataImpl#setCaseSensitive(int, boolean):::Sets whether the name of the designated column is case sensitive to the given boolean.:::checkColRange
RowSetMetaDataImpl#setSearchable(int, boolean):::Sets whether a value stored in the designated column can be used in a WHERE clause to the given boolean value.:::checkColRange
RowSetMetaDataImpl#setCurrency(int, boolean):::Sets whether a value stored in the designated column is a cash value to the given boolean.:::checkColRange
RowSetMetaDataImpl#setNullable(int, int):::Sets whether a value stored in the designated column can be set to NULL to the given constant from the interface ResultSetMetaData.:::if->throw->new->SQLException->checkColRange
RowSetMetaDataImpl#setSigned(int, boolean):::Sets whether a value stored in the designated column is a signed number to the given boolean.:::checkColRange
RowSetMetaDataImpl#setColumnDisplaySize(int, int):::Sets the normal maximum number of chars in the designated column to the given number.:::if->throw->new->SQLException->checkColRange
RowSetMetaDataImpl#setColumnLabel(int, String):::Sets the suggested column label for use in printouts and displays, if any, to label:::checkColRange->if->else
RowSetMetaDataImpl#setColumnName(int, String):::Sets the column name of the designated column to the given name.:::checkColRange->if->else
RowSetMetaDataImpl#setSchemaName(int, String):::Sets the designated column's table's schema name, if any, to schemaName:::checkColRange->if->else
RowSetMetaDataImpl#setPrecision(int, int):::Sets the total number of decimal digits in a value stored in the designated column to the given number.:::if->throw->new->SQLException->checkColRange
RowSetMetaDataImpl#setScale(int, int):::Sets the number of digits to the right of the decimal point in a value stored in the designated column to the given number.:::if->throw->new->SQLException->checkColRange
RowSetMetaDataImpl#setTableName(int, String):::Sets the name of the table from which the designated column was derived to the given table name.:::checkColRange->if->else
RowSetMetaDataImpl#setCatalogName(int, String):::Sets the catalog name of the table from which the designated column was derived to catalogName:::checkColRange->if->else
RowSetMetaDataImpl#setColumnType(int, int):::Sets the SQL type code for values stored in the designated column to the given type code from the class java.sql.Types.:::checkColType->checkColRange
RowSetMetaDataImpl#setColumnTypeName(int, String):::Sets the type name used by the data source for values stored in the designated column to the given type name.:::checkColRange->if->else
RowSetMetaDataImpl#getColumnCount():::Retrieves the number of columns in the RowSet object for which this RowSetMetaDataImpl object was created.:::return
RowSetMetaDataImpl#isAutoIncrement(int):::Retrieves whether a value stored in the designated column is automatically numbered, and thus readonly.:::checkColRange->return
RowSetMetaDataImpl#isCaseSensitive(int):::Indicates whether the case of the designated column's name matters.:::checkColRange->return
RowSetMetaDataImpl#isSearchable(int):::Indicates whether a value stored in the designated column can be used in a WHERE clause.:::checkColRange->return
RowSetMetaDataImpl#isCurrency(int):::Indicates whether a value stored in the designated column is a cash value.:::checkColRange->return
RowSetMetaDataImpl#isNullable(int):::Retrieves a constant indicating whether it is possible to store a NULL value in the designated column.:::checkColRange->return
RowSetMetaDataImpl#isSigned(int):::Indicates whether a value stored in the designated column is a signed number.:::checkColRange->return
RowSetMetaDataImpl#getColumnDisplaySize(int):::Retrieves the normal maximum width in chars of the designated column.:::checkColRange->return
RowSetMetaDataImpl#getColumnLabel(int):::Retrieves the suggested column title for the designated column for use in printouts and displays.:::checkColRange->return
RowSetMetaDataImpl#getColumnName(int):::Retrieves the name of the designated column.:::checkColRange->return
RowSetMetaDataImpl#getSchemaName(int):::Retrieves the schema name of the table from which the value in the designated column was derived.:::checkColRange->str->if->else->return
RowSetMetaDataImpl#getPrecision(int):::Retrieves the total number of digits for values stored in the designated column.:::checkColRange->return
RowSetMetaDataImpl#getScale(int):::Retrieves the number of digits to the right of the decimal point for values stored in the designated column.:::checkColRange->return
RowSetMetaDataImpl#getTableName(int):::Retrieves the name of the table from which the value in the designated column was derived.:::checkColRange->return
RowSetMetaDataImpl#getCatalogName(int):::Retrieves the catalog name of the table from which the value in the designated column was derived.:::checkColRange->str->if->else->return
RowSetMetaDataImpl#getColumnType(int):::Retrieves the type code (one of the java.sql.Types constants) for the SQL type of the value stored in the designated column.:::checkColRange->return
RowSetMetaDataImpl#getColumnTypeName(int):::Retrieves the DBMS-specific type name for values stored in the designated column.:::checkColRange->return
RowSetMetaDataImpl#isReadOnly(int):::Indicates whether the designated column is definitely not writable, thus readonly.:::checkColRange->return
RowSetMetaDataImpl#isWritable(int):::Indicates whether it is possible for a write operation on the designated column to succeed:::checkColRange->return
RowSetMetaDataImpl#isDefinitelyWritable(int):::Indicates whether a write operation on the designated column will definitely succeed.:::checkColRange->return
RowSetMetaDataImpl#getColumnClassName(int):::Retrieves the fully-qualified name of the class in the Java programming language to which a value in the designated column will be mapped:::className->getName->sqlType->getColumnType->switch->getName->break->getName->break->getName->break->getName->break->getName->break->getName->break->getName->break->getName->break->break->getName->break->getName->break->getName->break->getName->break->getName->break->return
RowSetMetaDataImpl#unwrap(java.lang.Class):::Returns an object that implements the given interface to allow access to non-standard methods, or standard methods not exposed by the proxy:::if->isWrapperFor->return->iface->cast->else->throw->new->SQLException
RowSetMetaDataImpl#isWrapperFor(Class):::Returns true if this either implements the interface argument or is directly or indirectly a wrapper for an object that does:::return->interfaces->isInstance
RowSetProvider#newFactory():::Creates a new instance of a RowSetFactory implementation:::factory->factoryClassName->try->trace->getSystemProperty->if->trace->if->factoryClassName->equals->return->defaultRowSetFactory->o->getFactoryClass->newInstance->catch->throw->new->SQLException->finally->if->loadViaServiceLoader->return->defaultRowSetFactory
RowSetProvider#defaultRowSetFactory()::: row set provider default row set factory:::return->new->com.sun.rowset.RowSetFactoryImpl
RowSetProvider#newFactory(String, ClassLoader):::Creates  a new instance of a RowSetFactory from the specified factory class name:::trace->if->throw->new->SQLException->try->ReflectUtil->checkPackageAccess->catch->throw->new->SQLException->finally->try->providerClass->getFactoryClass->instance->providerClass->newInstance->if->trace->return->catch->throw->new->SQLException->throw->new->SQLException->finally
RowSetProvider#getContextClassLoader()::: row set provider get context class loader:::return->AccessController->new->PrivilegedAction<ClassLoader>->doPrivileged
RowSetProvider#getFactoryClass(String, ClassLoader, boolean):::Attempt to load a class using the class loader supplied:::factoryClass->try->if->getContextClassLoader->if->throw->new->ClassNotFoundException->else->cl->loadClass->else->cl->loadClass->catch->if->Class->getClassLoader->forName->else->throw->finally->ReflectUtil->checkPackageAccess->return
RowSetProvider#loadViaServiceLoader():::Use the ServiceLoader mechanism to load  the default RowSetFactory:::theFactory->try->trace->foreach->ServiceLoader->load->factory->getClass->getName->trace->break->catch->throw->new->SQLException->finally->return
RowSetProvider#getSystemProperty(String):::Returns the requested System Property:::property->try->AccessController->new->PrivilegedAction<String>->new->PropertyPermission->doPrivileged->catch->trace->if->se->printStackTrace->finally->return
RowSetProvider#trace(String):::Debug routine which will output tracing if the System Property -Djavax.sql.rowset.RowSetFactory.debug is set:::if->println
RowSetWarning#getNextWarning():::Retrieves the warning chained to this RowSetWarning object.:::warning->getNextException->if->return->else->throw->new->Error
RowSetWarning#setNextWarning(RowSetWarning):::Sets warning as the next warning, that is, the warning chained to this RowSetWarning object.:::setNextException
WebRowSet#readXml(java.io.Reader):::Reads a WebRowSet object in its XML format from the given Reader object.:::
WebRowSet#readXml(java.io.InputStream):::Reads a stream based XML input to populate this WebRowSet object.:::
WebRowSet#writeXml(ResultSet, java.io.Writer):::Populates this WebRowSet object with the contents of the given ResultSet object and writes its data, properties, and metadata to the given Writer object in XML format:::
WebRowSet#writeXml(ResultSet, java.io.OutputStream):::Populates this WebRowSet object with the contents of the given ResultSet object and writes its data, properties, and metadata to the given OutputStream object in XML format:::
WebRowSet#writeXml(java.io.Writer):::Writes the data, properties, and metadata for this WebRowSet object to the given Writer object in XML format.:::
WebRowSet#writeXml(java.io.OutputStream):::Writes the data, properties, and metadata for this WebRowSet object to the given OutputStream object in XML format.:::

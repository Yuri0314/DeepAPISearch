Config#debug(Object)::: config debug:::if->println
Config#getFileName()::: config get file name:::return
Config#getName()::: config get name:::return
Config#getLibrary()::: config get library:::return
Config#getDescription()::: config get description:::if->return->return
Config#getSlotID()::: config get slot d:::return
Config#getSlotListIndex()::: config get slot list index:::if->return->else->return
Config#getShowInfo()::: config get show info:::return
Config#getTemplateManager()::: config get template manager:::if->new->TemplateManager->return
Config#isEnabled(long)::: config is enabled:::if->return->enabledMechanisms->Long->valueOf->contains->if->return->disabledMechanisms->Long->valueOf->contains->return
Config#getHandleStartupErrors()::: config get handle startup errors:::return
Config#getKeyStoreCompatibilityMode()::: config get key store compatibility mode:::return
Config#getExplicitCancel()::: config get explicit cancel:::return
Config#getInsertionCheckInterval()::: config get insertion check interval:::return
Config#getOmitInitialize()::: config get omit initialize:::return
Config#getAllowSingleThreadedModules()::: config get allow single threaded modules:::return
Config#getFunctionList()::: config get function list:::return
Config#getNssUseSecmod()::: config get nss use secmod:::return
Config#getNssLibraryDirectory()::: config get nss library directory:::return
Config#getNssSecmodDirectory()::: config get nss secmod directory:::return
Config#getNssModule()::: config get nss module:::return
Config#getNssDbMode()::: config get nss db mode:::return
Config#getNssNetscapeDbWorkaround()::: config get nss netscape db workaround:::return
Config#getNssArgs()::: config get nss args:::return
Config#getNssUseSecmodTrust()::: config get nss use secmod trust:::return
Config#getUseEcX963Encoding()::: config get use ec x963 encoding:::return
Config#getNssOptimizeSpace()::: config get nss optimize space:::return
Config#expand(String)::: config expand:::try->return->PropertyExpander->expand->catch->throw->e->getMessage->new->RuntimeException->finally
Config#setupTokenizer()::: config setup tokenizer:::st->resetSyntax->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->wordChars->st->whitespaceChars->st->commentChar->st->eolIsSignificant->st->quoteChar
Config#excToken(String)::: config exc token:::return->new->ConfigurationException
Config#excLine(String)::: config exc line:::return->st->lineno->new->ConfigurationException
Config#parse()::: config parse:::while->token->nextToken->if->break->if->continue->if->throw->excToken->word->if->word->equals->parseStringEntry->else->if->word->equals->parseLibrary->else->if->word->equals->parseDescription->else->if->word->equals->parseSlotID->else->if->word->equals->parseSlotListIndex->else->if->word->equals->parseEnabledMechanisms->else->if->word->equals->parseDisabledMechanisms->else->if->word->equals->parseAttributes->else->if->word->equals->parseHandleStartupErrors->else->if->word->endsWith->parseIntegerEntry->if->throw->excLine->else->if->word->equals->parseBooleanEntry->else->if->word->equals->parseBooleanEntry->else->if->word->equals->parseBooleanEntry->else->if->word->equals->parseBooleanEntry->else->if->word->equals->parseBooleanEntry->else->if->word->equals->parseStringEntry->else->if->word->equals->parseBooleanEntry->else->if->word->equals->parseLibrary->else->if->word->equals->parseStringEntry->expand->else->if->word->equals->parseStringEntry->else->if->word->equals->mode->parseStringEntry->if->mode->equals->else->if->mode->equals->else->if->mode->equals->else->throw->excToken->else->if->word->equals->parseBooleanEntry->else->if->word->equals->parseNSSArgs->else->if->word->equals->parseBooleanEntry->else->if->word->equals->parseBooleanEntry->else->if->word->equals->parseBooleanEntry->else->throw->st->lineno->new->ConfigurationException->parsedKeywords->add->reader->close->if->throw->new->ConfigurationException->if->if->throw->new->ConfigurationException->else->if->throw->new->ConfigurationException->if->throw->new->ConfigurationException->if->throw->new->ConfigurationException->if->throw->new->ConfigurationException
Config#nextToken()::: config next token:::token->st->nextToken->debug->return
Config#parseEquals()::: config parse equals:::token->nextToken->if->throw->excToken
Config#parseOpenBraces()::: config parse open braces:::while->token->nextToken->if->continue->if->equals->return->throw->excToken
Config#isCloseBraces(int)::: config is close braces:::return->equals
Config#parseWord()::: config parse word:::token->nextToken->if->throw->excToken->return
Config#parseStringEntry(String)::: config parse string entry:::checkDup->parseEquals->token->nextToken->if->throw->excToken->value->debug->return
Config#parseBooleanEntry(String)::: config parse boolean entry:::checkDup->parseEquals->value->parseBoolean->debug->return
Config#parseIntegerEntry(String)::: config parse integer entry:::checkDup->parseEquals->value->parseWord->decodeNumber->debug->return
Config#parseBoolean()::: config parse boolean:::val->parseWord->switch->return->return->throw->excToken
Config#parseLine()::: config parse line:::s->while->token->nextToken->if->break->if->throw->excToken->if->else->if->throw->excToken->return
Config#decodeNumber(String)::: config decode number:::try->if->str->startsWith->str->startsWith->return->Integer->str->substring->parseInt->else->return->Integer->parseInt->catch->throw->excToken->finally
Config#isNumber(String)::: config is number:::if->s->length->return->ch->s->charAt->return
Config#parseComma()::: config parse comma:::token->nextToken->if->throw->excToken
Config#isByteArray(String)::: config is byte array:::return->val->startsWith
Config#decodeByteArray(String)::: config decode byte array:::if->str->startsWith->throw->excToken->str->substring->try->return->new->BigInteger->toByteArray->catch->throw->excToken->finally
Config#checkDup(String)::: config check dup:::if->parsedKeywords->contains->throw->excLine
Config#parseLibrary(String)::: config parse library:::checkDup->parseEquals->lib->parseLine->expand->i->lib->indexOf->if->prefix->lib->substring->suffix->lib->substring->if->osName->equals->osArch->equals->else->if->osName->equals->osArch->equals->else->debug->if->new->File->isAbsolute->throw->new->ConfigurationException->return
Config#parseDescription(String)::: config parse description:::checkDup->parseEquals->parseLine->debug
Config#parseSlotID(String)::: config parse slot d:::if->throw->excLine->if->throw->excLine->parseEquals->slotString->parseWord->decodeNumber->debug
Config#parseSlotListIndex(String)::: config parse slot list index:::if->throw->excLine->if->throw->excLine->parseEquals->slotString->parseWord->decodeNumber->debug
Config#parseEnabledMechanisms(String)::: config parse enabled mechanisms:::parseMechanisms
Config#parseDisabledMechanisms(String)::: config parse disabled mechanisms:::parseMechanisms
Config#parseMechanisms(String)::: config parse mechanisms:::checkDup->mechs->new->HashSet<Long>->parseEquals->parseOpenBraces->while->token->nextToken->if->isCloseBraces->break->if->continue->if->throw->excToken->mech->parseMechanism->mechs->Long->valueOf->add->if->print->foreach->Functions->getMechanismName->print->print->println->return
Config#parseMechanism(String)::: config parse mechanism:::if->isNumber->return->decodeNumber->else->try->return->Functions->getMechanismId->catch->throw->excLine->finally
Config#parseAttributes(String)::: config parse attributes:::if->new->TemplateManager->token->nextToken->if->s->parseWord->if->s->equals->throw->excLine->setCompatibilityAttributes->return->if->throw->excToken->op->parseOperation->parseComma->objectClass->parseObjectClass->parseComma->keyAlg->parseKeyAlgorithm->nextToken->if->throw->excToken->parseEquals->parseOpenBraces->attributes->new->ArrayList<CK_ATTRIBUTE>->while->nextToken->if->isCloseBraces->break->if->continue->if->throw->excToken->attributeName->attributeId->decodeAttributeName->parseEquals->attributeValue->parseWord->attributes->decodeAttributeValue->add->templateManager->attributes->toArray->addTemplate
Config#setCompatibilityAttributes()::: config set compatibility attributes:::templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate->templateManager->new->CK_ATTRIBUTEArr->addTemplate
Config#parseOperation()::: config parse operation:::op->parseWord->switch->return->return->return->throw->excLine
Config#parseObjectClass()::: config parse object class:::name->parseWord->try->return->Functions->getObjectClassId->catch->throw->excLine->finally
Config#parseKeyAlgorithm()::: config parse key algorithm:::name->parseWord->if->isNumber->return->decodeNumber->else->try->return->Functions->getKeyId->catch->throw->excLine->finally
Config#decodeAttributeName(String)::: config decode attribute name:::if->isNumber->return->decodeNumber->else->try->return->Functions->getAttributeId->catch->throw->excLine->finally
Config#decodeAttributeValue(long, String)::: config decode attribute value:::if->value->equals->return->new->CK_ATTRIBUTE->else->if->value->equals->return->new->CK_ATTRIBUTE->else->if->value->equals->return->new->CK_ATTRIBUTE->else->if->isByteArray->return->decodeByteArray->new->CK_ATTRIBUTE->else->if->isNumber->return->Integer->decodeNumber->valueOf->new->CK_ATTRIBUTE->else->throw->excLine
Config#parseNSSArgs(String)::: config parse args:::checkDup->parseEquals->token->nextToken->if->throw->excToken->expand->debug
Config#parseHandleStartupErrors(String)::: config parse handle startup errors:::checkDup->parseEquals->val->parseWord->if->val->equals->else->if->val->equals->else->if->val->equals->else->throw->excToken->debug
KeyCache.IdentityWrapper#equals(Object)::: identity wrapper equals:::if->return->if->return->other->return
KeyCache.IdentityWrapper#hashCode()::: identity wrapper hash code:::return->System->identityHashCode
KeyCache#get(Key)::: key cache get:::p11Key->strongCache->new->IdentityWrapper->get->if->return->map->cacheReference->get->if->return->return->map->get
KeyCache#put(Key, P11Key)::: key cache put:::strongCache->new->IdentityWrapper->put->map->cacheReference->get->if->new->IdentityHashMap<>->new->WeakReference<>->map->put
P11AEADCipher#engineSetMode(String)::: p11 cipher engine set mode:::throw->new->NoSuchAlgorithmException
P11AEADCipher#parseMode(String)::: p11 cipher parse mode:::mode->toUpperCase->result->if->mode->equals->else->throw->new->NoSuchAlgorithmException->return
P11AEADCipher#engineSetPadding(String)::: p11 cipher engine set padding:::throw->new->NoSuchPaddingException
P11AEADCipher#engineGetBlockSize()::: p11 cipher engine get block size:::return
P11AEADCipher#engineGetOutputSize(int)::: p11 cipher engine get output size:::return->doFinalLength
P11AEADCipher#engineGetIV()::: p11 cipher engine get v:::return->iv->clone
P11AEADCipher#engineGetParameters()::: p11 cipher engine get parameters:::if->switch->new->byteArr->break->throw->new->ProviderException->random->nextBytes->try->spec->apAlgo->switch->new->GCMParameterSpec->break->throw->new->ProviderException->params->AlgorithmParameters->getInstance->params->init->return->catch->throw->new->ProviderException->finally
P11AEADCipher#engineInit(int, Key, SecureRandom)::: p11 cipher engine init:::if->throw->new->InvalidKeyException->try->implInit->catch->throw->new->InvalidKeyException->finally
P11AEADCipher#engineInit(int, Key, AlgorithmParameterSpec, SecureRandom)::: p11 cipher engine init:::if->throw->new->InvalidAlgorithmParameterException->ivValue->tagLen->if->switch->if->throw->new->InvalidAlgorithmParameterException->getIV->getTLen->break->throw->new->ProviderException->implInit
P11AEADCipher#engineInit(int, Key, AlgorithmParameters, SecureRandom)::: p11 cipher engine init:::if->throw->new->InvalidAlgorithmParameterException->try->paramSpec->if->switch->params->getParameterSpec->break->throw->new->ProviderException->engineInit->catch->throw->new->InvalidAlgorithmParameterException->finally
P11AEADCipher#implInit(int, Key, byte[], int, SecureRandom)::: p11 cipher impl init:::reset->if->key->getEncoded->throw->new->InvalidKeyException->newKey->P11SecretKeyFactory->convertKey->switch->Arrays->equals->if->throw->new->InvalidAlgorithmParameterException->break->break->throw->new->InvalidAlgorithmParameterException->if->if->switch->new->byteArr->nextBytes->break->throw->new->ProviderException->try->initialize->catch->if->e->getErrorCode->throw->new->InvalidAlgorithmParameterException->throw->new->InvalidKeyException->finally
P11AEADCipher#cancelOperation()::: p11 cipher cancel operation:::try->if->session->hasObjects->token->killSession->return->else->bufLen->doFinalLength->buffer->new->byteArr->if->session->id->C_Encrypt->else->session->id->C_Decrypt->catch->throw->new->ProviderException->finally
P11AEADCipher#ensureInitialized()::: p11 cipher ensure initialized:::if->aadBuffer->size->reset->if->initialize
P11AEADCipher#initialize()::: p11 cipher initialize:::if->throw->new->ProviderException->if->throw->new->IllegalStateException->token->ensureValid->aad->aadBuffer->size->aadBuffer->toByteArray->p11KeyID->p11Key->getKeyID->try->mechWithParams->switch->new->CK_GCM_PARAMS->new->CK_MECHANISM->break->throw->new->ProviderException->if->token->getOpSession->if->session->id->C_EncryptInit->else->session->id->C_DecryptInit->catch->p11Key->releaseKeyID->token->releaseSession->throw->finally->dataBuffer->reset->aadBuffer->reset
P11AEADCipher#doFinalLength(int)::: p11 cipher do final length:::if->throw->new->ProviderException->result->dataBuffer->size->if->else->return
P11AEADCipher#reset(boolean)::: p11 cipher reset:::if->return->try->if->return->if->cancelOperation->catch->finally->p11Key->releaseKeyID->token->releaseSession
P11AEADCipher#engineUpdate(byte[], int, int)::: p11 cipher engine update:::n->implUpdate->return->new->byteArr
P11AEADCipher#engineUpdate(byte[], int, int, byte[], int)::: p11 cipher engine update:::implUpdate->return
P11AEADCipher#engineUpdate(ByteBuffer, ByteBuffer)::: p11 cipher engine update:::implUpdate->return
P11AEADCipher#engineUpdateAAD(byte[], int, int)::: p11 cipher engine update d:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->aadBuffer->write
P11AEADCipher#engineUpdateAAD(ByteBuffer)::: p11 cipher engine update d:::if->throw->new->IllegalArgumentException->srcBytes->src->remaining->new->byteArr->src->get->engineUpdateAAD
P11AEADCipher#engineDoFinal(byte[], int, int)::: p11 cipher engine do final:::minOutLen->doFinalLength->try->out->new->byteArr->n->engineDoFinal->return->P11Util->convert->catch->throw->new->ProviderException->finally
P11AEADCipher#engineDoFinal(byte[], int, int, byte[], int)::: p11 cipher engine do final:::try->return->implDoFinal->catch->finally
P11AEADCipher#engineDoFinal(ByteBuffer, ByteBuffer)::: p11 cipher engine do final:::try->return->implDoFinal->catch->finally
P11AEADCipher#implUpdate(byte[], int, int)::: p11 cipher impl update:::if->try->ensureInitialized->catch->reset->throw->new->ProviderException->finally->dataBuffer->write->return
P11AEADCipher#implUpdate(ByteBuffer)::: p11 cipher impl update:::inLen->inBuf->remaining->if->try->ensureInitialized->catch->reset->throw->new->ProviderException->finally->data->new->byteArr->inBuf->get->dataBuffer->write->return
P11AEADCipher#implDoFinal(byte[], int, int, byte[], int, int)::: p11 cipher impl do final:::requiredOutLen->doFinalLength->if->throw->new->ShortBufferException->doCancel->try->ensureInitialized->if->dataBuffer->size->if->dataBuffer->write->dataBuffer->toByteArray->k->if->session->id->C_Encrypt->else->if->return->session->id->C_Decrypt->return->catch->handleException->throw->new->ProviderException->finally->if->reset
P11AEADCipher#implDoFinal(ByteBuffer, ByteBuffer)::: p11 cipher impl do final:::outLen->outBuffer->remaining->inLen->inBuffer->remaining->requiredOutLen->doFinalLength->if->throw->new->ShortBufferException->doCancel->try->ensureInitialized->inAddr->in->inOfs->if->dataBuffer->size->if->temp->new->byteArr->inBuffer->get->dataBuffer->write->dataBuffer->toByteArray->else->if->address->inBuffer->position->else->if->inBuffer->hasArray->inBuffer->array->inBuffer->position->inBuffer->arrayOffset->else->new->byteArr->inBuffer->get->outAddr->outArray->outOfs->if->address->outBuffer->position->else->if->outBuffer->hasArray->outBuffer->array->outBuffer->position->outBuffer->arrayOffset->else->new->byteArr->k->if->session->id->C_Encrypt->else->if->return->session->id->C_Decrypt->outBuffer->outBuffer->position->position->return->catch->handleException->throw->new->ProviderException->finally->if->reset
P11AEADCipher#handleException(PKCS11Exception)::: p11 cipher handle exception:::errorCode->e->getErrorCode->if->throw->new->ShortBufferException->initCause->else->if->throw->e->toString->new->IllegalBlockSizeException->initCause->else->if->throw->e->toString->new->BadPaddingException->initCause
P11AEADCipher#engineWrap(Key)::: p11 cipher engine wrap:::throw->new->UnsupportedOperationException
P11AEADCipher#engineUnwrap(byte[], String, int)::: p11 cipher engine unwrap:::throw->new->UnsupportedOperationException
P11AEADCipher#engineGetKeySize(Key)::: p11 cipher engine get key size:::n->P11SecretKeyFactory->convertKey->length->return
P11Cipher.Padding#setPaddingBytes(byte[], int)::: padding set padding bytes:::
P11Cipher.Padding#unpad(byte[], int)::: padding unpad:::
P11Cipher.PKCS5Padding#setPaddingBytes(byte[], int)::: s5 padding set padding bytes:::Arrays->fill->return
P11Cipher.PKCS5Padding#unpad(byte[], int)::: s5 padding unpad:::if->throw->new->IllegalBlockSizeException->padValue->if->throw->new->BadPaddingException->padStartIndex->for->i->return
P11Cipher#engineSetMode(String)::: p11 cipher engine set mode:::throw->new->NoSuchAlgorithmException
P11Cipher#parseMode(String)::: p11 cipher parse mode:::mode->toUpperCase->result->if->mode->equals->else->if->mode->equals->if->throw->new->NoSuchAlgorithmException->else->if->mode->equals->else->throw->new->NoSuchAlgorithmException->return
P11Cipher#engineSetPadding(String)::: p11 cipher engine set padding:::padding->toUpperCase->if->padding->equals->else->if->padding->equals->if->throw->new->NoSuchPaddingException->if->new->PKCS5Padding->new->byteArr->else->throw->new->NoSuchPaddingException
P11Cipher#engineGetBlockSize()::: p11 cipher engine get block size:::return
P11Cipher#engineGetOutputSize(int)::: p11 cipher engine get output size:::return->doFinalLength
P11Cipher#engineGetIV()::: p11 cipher engine get v:::return->iv->clone
P11Cipher#engineGetParameters()::: p11 cipher engine get parameters:::if->return->ivSpec->new->IvParameterSpec->try->params->AlgorithmParameters->P11Util->getSunJceProvider->getInstance->params->init->return->catch->throw->new->ProviderException->finally
P11Cipher#engineInit(int, Key, SecureRandom)::: p11 cipher engine init:::try->implInit->catch->throw->new->InvalidKeyException->finally
P11Cipher#engineInit(int, Key, AlgorithmParameterSpec, SecureRandom)::: p11 cipher engine init:::ivValue->if->if->throw->new->InvalidAlgorithmParameterException->ivSpec->ivSpec->getIV->else->implInit
P11Cipher#engineInit(int, Key, AlgorithmParameters, SecureRandom)::: p11 cipher engine init:::ivValue->if->try->ivSpec->params->getParameterSpec->ivSpec->getIV->catch->throw->new->InvalidAlgorithmParameterException->finally->else->implInit
P11Cipher#implInit(int, Key, byte[], SecureRandom)::: p11 cipher impl init:::reset->if->key->getEncoded->throw->new->InvalidKeyException->switch->break->break->throw->new->InvalidAlgorithmParameterException->if->if->if->throw->new->InvalidAlgorithmParameterException->else->throw->new->InvalidAlgorithmParameterException->else->if->if->exMsg->throw->new->InvalidAlgorithmParameterException->if->JCAUtil->getSecureRandom->new->byteArr->random->nextBytes->else->if->throw->new->InvalidAlgorithmParameterException->P11SecretKeyFactory->convertKey->try->initialize->catch->throw->new->InvalidKeyException->finally
P11Cipher#reset(boolean)::: p11 cipher reset:::if->return->try->if->return->if->cancelOperation->catch->finally->p11Key->releaseKeyID->token->releaseSession
P11Cipher#cancelOperation()::: p11 cipher cancel operation:::token->ensureValid->if->session->hasObjects->token->killSession->return->else->try->bufLen->doFinalLength->buffer->new->byteArr->if->session->id->C_EncryptFinal->else->session->id->C_DecryptFinal->catch->throw->new->ProviderException->finally
P11Cipher#ensureInitialized()::: p11 cipher ensure initialized:::if->initialize
P11Cipher#initialize()::: p11 cipher initialize:::if->throw->new->ProviderException->token->ensureValid->p11KeyID->p11Key->getKeyID->try->if->token->getOpSession->mechParams->new->CK_AES_CTR_PARAMS->new->CK_MECHANISM->new->CK_MECHANISM->if->session->id->C_EncryptInit->else->session->id->C_DecryptInit->catch->p11Key->releaseKeyID->token->releaseSession->throw->finally
P11Cipher#updateLength(int)::: p11 cipher update length:::if->return->result->if->return
P11Cipher#doFinalLength(int)::: p11 cipher do final length:::if->return->result->if->return
P11Cipher#engineUpdate(byte[], int, int)::: p11 cipher engine update:::try->out->updateLength->new->byteArr->n->engineUpdate->return->P11Util->convert->catch->throw->new->ProviderException->finally
P11Cipher#engineUpdate(byte[], int, int, byte[], int)::: p11 cipher engine update:::outLen->return->implUpdate
P11Cipher#engineUpdate(ByteBuffer, ByteBuffer)::: p11 cipher engine update:::return->implUpdate
P11Cipher#engineDoFinal(byte[], int, int)::: p11 cipher engine do final:::try->out->doFinalLength->new->byteArr->n->engineDoFinal->return->P11Util->convert->catch->throw->new->ProviderException->finally
P11Cipher#engineDoFinal(byte[], int, int, byte[], int)::: p11 cipher engine do final:::n->if->engineUpdate->implDoFinal->return
P11Cipher#engineDoFinal(ByteBuffer, ByteBuffer)::: p11 cipher engine do final:::n->engineUpdate->implDoFinal->return
P11Cipher#implUpdate(byte[], int, int, byte[], int, int)::: p11 cipher impl update:::if->updateLength->throw->new->ShortBufferException->try->ensureInitialized->k->if->session->id->C_EncryptUpdate->else->newPadBufferLen->if->if->if->bufCapacity->if->bufferInputBytes->else->bufferInputBytes->return->session->id->C_DecryptUpdate->if->if->session->id->C_DecryptUpdate->if->bufferInputBytes->return->catch->if->e->getErrorCode->throw->new->ShortBufferException->initCause->reset->throw->new->ProviderException->finally
P11Cipher#implUpdate(ByteBuffer, ByteBuffer)::: p11 cipher impl update:::inLen->inBuffer->remaining->if->return->outLen->outBuffer->remaining->if->updateLength->throw->new->ShortBufferException->origPos->inBuffer->position->try->ensureInitialized->inAddr->inOfs->inArray->if->address->else->if->inBuffer->hasArray->inBuffer->array->inBuffer->arrayOffset->outAddr->outOfs->outArray->if->address->outBuffer->position->else->if->outBuffer->hasArray->outBuffer->array->outBuffer->position->outBuffer->arrayOffset->else->new->byteArr->k->if->if->new->byteArr->inBuffer->get->else->inBuffer->position->session->id->C_EncryptUpdate->else->newPadBufferLen->if->if->if->bufCapacity->if->bufferInputBytes->else->bufferInputBytes->return->session->id->C_DecryptUpdate->if->if->if->new->byteArr->inBuffer->get->else->inBuffer->inBuffer->position->position->session->id->C_DecryptUpdate->if->bufferInputBytes->if->outBuffer->hasArray->outBuffer->put->else->outBuffer->outBuffer->position->position->return->catch->inBuffer->position->if->e->getErrorCode->throw->new->ShortBufferException->initCause->reset->throw->new->ProviderException->finally
P11Cipher#implDoFinal(byte[], int, int)::: p11 cipher impl do final:::requiredOutLen->doFinalLength->if->throw->new->ShortBufferException->doCancel->try->ensureInitialized->k->if->if->actualPadLen->paddingObj->setPaddingBytes->session->id->C_EncryptUpdate->session->id->C_EncryptFinal->else->if->return->if->if->session->id->C_DecryptUpdate->session->id->C_DecryptFinal->actualPadLen->paddingObj->unpad->System->arraycopy->else->session->id->C_DecryptFinal->return->catch->handleException->throw->new->ProviderException->finally->reset
P11Cipher#implDoFinal(ByteBuffer)::: p11 cipher impl do final:::outLen->outBuffer->remaining->requiredOutLen->doFinalLength->if->throw->new->ShortBufferException->doCancel->try->ensureInitialized->outAddr->outArray->outOfs->if->address->outBuffer->position->else->if->outBuffer->hasArray->outBuffer->array->outBuffer->position->outBuffer->arrayOffset->else->new->byteArr->k->if->if->actualPadLen->paddingObj->setPaddingBytes->session->id->C_EncryptUpdate->session->id->C_EncryptFinal->else->if->return->if->if->session->id->C_DecryptUpdate->session->id->C_DecryptFinal->actualPadLen->paddingObj->unpad->else->session->id->C_DecryptFinal->if->outBuffer->hasArray->outBuffer->put->else->outBuffer->outBuffer->position->position->return->catch->handleException->throw->new->ProviderException->finally->reset
P11Cipher#handleException(PKCS11Exception)::: p11 cipher handle exception:::errorCode->e->getErrorCode->if->throw->new->ShortBufferException->initCause->else->if->throw->e->toString->new->IllegalBlockSizeException->initCause
P11Cipher#engineWrap(Key)::: p11 cipher engine wrap:::throw->new->UnsupportedOperationException
P11Cipher#engineUnwrap(byte[], String, int)::: p11 cipher engine unwrap:::throw->new->UnsupportedOperationException
P11Cipher#engineGetKeySize(Key)::: p11 cipher engine get key size:::n->P11SecretKeyFactory->convertKey->length->return
P11Cipher#bufferInputBytes(byte[], int, int)::: p11 cipher buffer input bytes:::System->arraycopy
P11Cipher#bufferInputBytes(ByteBuffer, int)::: p11 cipher buffer input bytes:::inBuffer->get
P11DHKeyFactory#implTranslatePublicKey(PublicKey)::: p11 key factory impl translate public key:::try->if->dhKey->params->dhKey->getParams->return->dhKey->getY->params->getP->params->getG->generatePublic->else->if->key->getFormat->equals->try->factory->implGetSoftwareFactory->factory->translateKey->return->implTranslatePublicKey->catch->throw->new->InvalidKeyException->finally->else->throw->new->InvalidKeyException->catch->throw->new->InvalidKeyException->finally
P11DHKeyFactory#implTranslatePrivateKey(PrivateKey)::: p11 key factory impl translate private key:::try->if->dhKey->params->dhKey->getParams->return->dhKey->getX->params->getP->params->getG->generatePrivate->else->if->key->getFormat->equals->try->factory->implGetSoftwareFactory->factory->translateKey->return->implTranslatePrivateKey->catch->throw->new->InvalidKeyException->finally->else->throw->new->InvalidKeyException->catch->throw->new->InvalidKeyException->finally
P11DHKeyFactory#engineGeneratePublic(KeySpec)::: p11 key factory engine generate public:::token->ensureValid->if->try->factory->implGetSoftwareFactory->key->factory->generatePublic->return->implTranslatePublicKey->catch->throw->new->InvalidKeySpecException->finally->if->throw->new->InvalidKeySpecException->try->ds->return->ds->getY->ds->getP->ds->getG->generatePublic->catch->throw->new->InvalidKeySpecException->finally
P11DHKeyFactory#engineGeneratePrivate(KeySpec)::: p11 key factory engine generate private:::token->ensureValid->if->try->factory->implGetSoftwareFactory->key->factory->generatePrivate->return->implTranslatePrivateKey->catch->throw->new->InvalidKeySpecException->finally->if->throw->new->InvalidKeySpecException->try->ds->return->ds->getX->ds->getP->ds->getG->generatePrivate->catch->throw->new->InvalidKeySpecException->finally
P11DHKeyFactory#generatePublic(BigInteger, BigInteger, BigInteger)::: p11 key factory generate public:::attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->session->try->token->getObjSession->keyID->session->id->C_CreateObject->return->P11Key->p->bitLength->publicKey->catch->finally->token->releaseSession
P11DHKeyFactory#generatePrivate(BigInteger, BigInteger, BigInteger)::: p11 key factory generate private:::attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->session->try->token->getObjSession->keyID->session->id->C_CreateObject->return->P11Key->p->bitLength->privateKey->catch->finally->token->releaseSession
P11DHKeyFactory#implGetPublicKeySpec(P11Key, Class, Session[])::: p11 key factory impl get public key spec:::if->isAssignableFrom->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->keyID->key->getKeyID->try->id->C_GetAttributeValue->catch->finally->key->releaseKeyID->spec->getBigInteger->getBigInteger->getBigInteger->new->DHPublicKeySpec->return->keySpec->cast->else->throw->new->InvalidKeySpecException
P11DHKeyFactory#implGetPrivateKeySpec(P11Key, Class, Session[])::: p11 key factory impl get private key spec:::if->isAssignableFrom->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->keyID->key->getKeyID->try->id->C_GetAttributeValue->catch->finally->key->releaseKeyID->spec->getBigInteger->getBigInteger->getBigInteger->new->DHPrivateKeySpec->return->keySpec->cast->else->throw->new->InvalidKeySpecException
P11DHKeyFactory#implGetSoftwareFactory()::: p11 key factory impl get software factory:::return->KeyFactory->P11Util->getSunJceProvider->getInstance
P11Digest#engineGetDigestLength()::: p11 digest engine get digest length:::return
P11Digest#fetchSession()::: p11 digest fetch session:::token->ensureValid->if->try->token->getOpSession->catch->throw->new->ProviderException->finally
P11Digest#engineReset()::: p11 digest engine reset:::token->ensureValid->if->if->session->hasObjects->token->killSession->else->token->releaseSession
P11Digest#engineDigest()::: p11 digest engine digest:::try->digest->new->byteArr->n->engineDigest->return->catch->throw->new->ProviderException->finally
P11Digest#engineDigest(byte[], int, int)::: p11 digest engine digest:::if->throw->new->DigestException->fetchSession->try->n->if->session->id->C_DigestSingle->else->if->session->id->C_DigestUpdate->session->id->C_DigestFinal->if->throw->new->ProviderException->return->catch->throw->new->ProviderException->finally->engineReset
P11Digest#engineUpdate(byte)::: p11 digest engine update:::temp->engineUpdate
P11Digest#engineUpdate(byte[], int, int)::: p11 digest engine update:::if->return->fetchSession->try->if->session->id->C_DigestInit->if->session->id->C_DigestUpdate->if->session->id->C_DigestUpdate->else->System->arraycopy->catch->engineReset->throw->new->ProviderException->finally
P11Digest#engineUpdate(SecretKey)::: p11 digest engine update:::if->throw->new->InvalidKeyException->p11Key->if->throw->new->InvalidKeyException->fetchSession->p11KeyID->p11Key->getKeyID->try->if->session->id->C_DigestInit->if->session->id->C_DigestUpdate->session->id->C_DigestKey->catch->engineReset->throw->new->ProviderException->finally->p11Key->releaseKeyID
P11Digest#engineUpdate(ByteBuffer)::: p11 digest engine update:::len->byteBuffer->remaining->if->return->if->super->engineUpdate->return->fetchSession->addr->address->ofs->byteBuffer->position->try->if->session->id->C_DigestInit->if->session->id->C_DigestUpdate->session->id->C_DigestUpdate->byteBuffer->position->catch->engineReset->throw->new->ProviderException->finally
P11Digest#clone()::: p11 digest clone:::copy->super->clone->buffer->clone->try->if->getOpSession->if->stateValues->session->id->C_GetOperationState->id->C_SetOperationState->catch->throw->new->CloneNotSupportedException->initCause->finally->return
P11DSAKeyFactory#implTranslatePublicKey(PublicKey)::: p11 key factory impl translate public key:::try->if->dsaKey->params->dsaKey->getParams->return->dsaKey->getY->params->getP->params->getQ->params->getG->generatePublic->else->if->key->getFormat->equals->encoded->key->getEncoded->new->sun.security.provider.DSAPublicKey->return->implTranslatePublicKey->else->throw->new->InvalidKeyException->catch->throw->new->InvalidKeyException->finally
P11DSAKeyFactory#implTranslatePrivateKey(PrivateKey)::: p11 key factory impl translate private key:::try->if->dsaKey->params->dsaKey->getParams->return->dsaKey->getX->params->getP->params->getQ->params->getG->generatePrivate->else->if->key->getFormat->equals->encoded->key->getEncoded->new->sun.security.provider.DSAPrivateKey->return->implTranslatePrivateKey->else->throw->new->InvalidKeyException->catch->throw->new->InvalidKeyException->finally
P11DSAKeyFactory#engineGeneratePublic(KeySpec)::: p11 key factory engine generate public:::token->ensureValid->if->try->encoded->getEncoded->key->new->sun.security.provider.DSAPublicKey->return->implTranslatePublicKey->catch->throw->new->InvalidKeySpecException->finally->if->throw->new->InvalidKeySpecException->try->ds->return->ds->getY->ds->getP->ds->getQ->ds->getG->generatePublic->catch->throw->new->InvalidKeySpecException->finally
P11DSAKeyFactory#engineGeneratePrivate(KeySpec)::: p11 key factory engine generate private:::token->ensureValid->if->try->encoded->getEncoded->key->new->sun.security.provider.DSAPrivateKey->return->implTranslatePrivateKey->catch->throw->new->InvalidKeySpecException->finally->if->throw->new->InvalidKeySpecException->try->ds->return->ds->getX->ds->getP->ds->getQ->ds->getG->generatePrivate->catch->throw->new->InvalidKeySpecException->finally
P11DSAKeyFactory#generatePublic(BigInteger, BigInteger, BigInteger, BigInteger)::: p11 key factory generate public:::attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->session->try->token->getObjSession->keyID->session->id->C_CreateObject->return->P11Key->p->bitLength->publicKey->catch->finally->token->releaseSession
P11DSAKeyFactory#generatePrivate(BigInteger, BigInteger, BigInteger, BigInteger)::: p11 key factory generate private:::attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->session->try->token->getObjSession->keyID->session->id->C_CreateObject->return->P11Key->p->bitLength->privateKey->catch->finally->token->releaseSession
P11DSAKeyFactory#implGetPublicKeySpec(P11Key, Class, Session[])::: p11 key factory impl get public key spec:::if->isAssignableFrom->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->keyID->key->getKeyID->try->id->C_GetAttributeValue->catch->finally->key->releaseKeyID->spec->getBigInteger->getBigInteger->getBigInteger->getBigInteger->new->DSAPublicKeySpec->return->keySpec->cast->else->throw->new->InvalidKeySpecException
P11DSAKeyFactory#implGetPrivateKeySpec(P11Key, Class, Session[])::: p11 key factory impl get private key spec:::if->isAssignableFrom->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->keyID->key->getKeyID->try->id->C_GetAttributeValue->catch->finally->key->releaseKeyID->spec->getBigInteger->getBigInteger->getBigInteger->getBigInteger->new->DSAPrivateKeySpec->return->keySpec->cast->else->throw->new->InvalidKeySpecException
P11DSAKeyFactory#implGetSoftwareFactory()::: p11 key factory impl get software factory:::return->KeyFactory->P11Util->getSunProvider->getInstance
P11ECDHKeyAgreement#engineInit(Key, SecureRandom)::: p11 key agreement engine init:::if->throw->new->InvalidKeyException->P11KeyFactory->convertKey
P11ECDHKeyAgreement#engineInit(Key, AlgorithmParameterSpec, SecureRandom)::: p11 key agreement engine init:::if->throw->new->InvalidAlgorithmParameterException->engineInit
P11ECDHKeyAgreement#engineDoPhase(Key, boolean)::: p11 key agreement engine do phase:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->throw->new->InvalidKeyException->ecKey->keyLenBits->ecKey->getParams->getCurve->getField->getFieldSize->P11ECKeyFactory->getEncodedPublicValue->return
P11ECDHKeyAgreement#engineGenerateSecret()::: p11 key agreement engine generate secret:::if->throw->new->IllegalStateException->session->privKeyID->privateKey->getKeyID->try->token->getOpSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->ckParams->new->CK_ECDH1_DERIVE_PARAMS->token->getAttributes->keyID->session->id->new->CK_MECHANISM->C_DeriveKey->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->secret->getByteArray->session->id->C_DestroyObject->return->catch->throw->new->ProviderException->finally->privateKey->releaseKeyID->token->releaseSession
P11ECDHKeyAgreement#engineGenerateSecret(byte[], int)::: p11 key agreement engine generate secret:::if->throw->new->ShortBufferException->secret->engineGenerateSecret->System->arraycopy->return
P11ECDHKeyAgreement#engineGenerateSecret(String)::: p11 key agreement engine generate secret:::if->throw->new->NoSuchAlgorithmException->if->algorithm->equals->throw->new->NoSuchAlgorithmException->return->nativeGenerateSecret
P11ECDHKeyAgreement#nativeGenerateSecret(String)::: p11 key agreement native generate secret:::if->throw->new->IllegalStateException->keyType->session->privKeyID->privateKey->getKeyID->try->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->ckParams->new->CK_ECDH1_DERIVE_PARAMS->token->getAttributes->keyID->session->id->new->CK_MECHANISM->C_DeriveKey->lenAttributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->keyLen->getLong->key->P11Key->secretKey->return->catch->throw->new->InvalidKeyException->finally->privateKey->releaseKeyID->token->releaseSession
P11ECKeyFactory#getSunECProvider()::: p11 key factory get sun provider:::if->Security->getProvider->if->throw->new->RuntimeException->return
P11ECKeyFactory#getECParameterSpec(String)::: p11 key factory get parameter spec:::return->ECUtil->getSunECProvider->getECParameterSpec
P11ECKeyFactory#getECParameterSpec(int)::: p11 key factory get parameter spec:::return->ECUtil->getSunECProvider->getECParameterSpec
P11ECKeyFactory#getECParameterSpec(ECParameterSpec)::: p11 key factory get parameter spec:::return->ECUtil->getSunECProvider->getECParameterSpec
P11ECKeyFactory#decodeParameters(byte[])::: p11 key factory decode parameters:::return->ECUtil->getSunECProvider->getECParameterSpec
P11ECKeyFactory#encodeParameters(ECParameterSpec)::: p11 key factory encode parameters:::return->ECUtil->getSunECProvider->encodeECParameterSpec
P11ECKeyFactory#decodePoint(byte[], EllipticCurve)::: p11 key factory decode point:::return->ECUtil->decodePoint
P11ECKeyFactory#getEncodedPublicValue(PublicKey)::: p11 key factory get encoded public value:::if->ecKey->w->ecKey->getW->params->ecKey->getParams->return->ECUtil->params->getCurve->encodePoint->else->throw->key->getClass->getName->new->InvalidKeyException
P11ECKeyFactory#implTranslatePublicKey(PublicKey)::: p11 key factory impl translate public key:::try->if->ecKey->return->ecKey->getW->ecKey->getParams->generatePublic->else->if->key->getFormat->equals->encoded->key->getEncoded->try->ECUtil->decodeX509ECPublicKey->catch->throw->new->InvalidKeyException->finally->return->implTranslatePublicKey->else->throw->new->InvalidKeyException->catch->throw->new->InvalidKeyException->finally
P11ECKeyFactory#implTranslatePrivateKey(PrivateKey)::: p11 key factory impl translate private key:::try->if->ecKey->return->ecKey->getS->ecKey->getParams->generatePrivate->else->if->key->getFormat->equals->encoded->key->getEncoded->try->ECUtil->decodePKCS8ECPrivateKey->catch->throw->new->InvalidKeyException->finally->return->implTranslatePrivateKey->else->throw->new->InvalidKeyException->catch->throw->new->InvalidKeyException->finally
P11ECKeyFactory#engineGeneratePublic(KeySpec)::: p11 key factory engine generate public:::token->ensureValid->if->try->encoded->getEncoded->key->ECUtil->decodeX509ECPublicKey->return->implTranslatePublicKey->catch->throw->new->InvalidKeySpecException->finally->if->throw->new->InvalidKeySpecException->try->ec->return->ec->getW->ec->getParams->generatePublic->catch->throw->new->InvalidKeySpecException->finally
P11ECKeyFactory#engineGeneratePrivate(KeySpec)::: p11 key factory engine generate private:::token->ensureValid->if->try->encoded->getEncoded->key->ECUtil->decodePKCS8ECPrivateKey->return->implTranslatePrivateKey->catch->throw->new->InvalidKeySpecException->finally->if->throw->new->InvalidKeySpecException->try->ec->return->ec->getS->ec->getParams->generatePrivate->catch->throw->new->InvalidKeySpecException->finally
P11ECKeyFactory#generatePublic(ECPoint, ECParameterSpec)::: p11 key factory generate public:::encodedParams->ECUtil->getSunECProvider->encodeECParameterSpec->encodedPoint->ECUtil->params->getCurve->encodePoint->if->getUseEcX963Encoding->try->new->DerValue->toByteArray->catch->throw->new->IllegalArgumentException->finally->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->session->try->token->getObjSession->keyID->session->id->C_CreateObject->return->P11Key->params->getCurve->getField->getFieldSize->publicKey->catch->finally->token->releaseSession
P11ECKeyFactory#generatePrivate(BigInteger, ECParameterSpec)::: p11 key factory generate private:::encodedParams->ECUtil->getSunECProvider->encodeECParameterSpec->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->session->try->token->getObjSession->keyID->session->id->C_CreateObject->return->P11Key->params->getCurve->getField->getFieldSize->privateKey->catch->finally->token->releaseSession
P11ECKeyFactory#implGetPublicKeySpec(P11Key, Class, Session[])::: p11 key factory impl get public key spec:::if->isAssignableFrom->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->keyID->key->getKeyID->try->id->C_GetAttributeValue->params->getByteArray->decodeParameters->point->getByteArray->params->getCurve->decodePoint->return->keySpec->new->ECPublicKeySpec->cast->catch->throw->new->InvalidKeySpecException->finally->key->releaseKeyID->else->throw->new->InvalidKeySpecException
P11ECKeyFactory#implGetPrivateKeySpec(P11Key, Class, Session[])::: p11 key factory impl get private key spec:::if->isAssignableFrom->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->keyID->key->getKeyID->try->id->C_GetAttributeValue->params->getByteArray->decodeParameters->return->keySpec->getBigInteger->new->ECPrivateKeySpec->cast->catch->throw->new->InvalidKeySpecException->finally->key->releaseKeyID->else->throw->new->InvalidKeySpecException
P11ECKeyFactory#implGetSoftwareFactory()::: p11 key factory impl get software factory:::return->KeyFactory->getSunECProvider->getInstance
P11Key#getKeyID()::: p11 key get key d:::return->keyIDHolder->getKeyID
P11Key#releaseKeyID()::: p11 key release key d:::keyIDHolder->releaseKeyID
P11Key#getAlgorithm()::: p11 key get algorithm:::token->ensureValid->return
P11Key#getEncoded()::: p11 key get encoded:::b->getEncodedInternal->return->b->clone
P11Key#getEncodedInternal()::: p11 key get encoded internal:::
P11Key#equals(Object)::: p11 key equals:::if->return->if->token->isValid->return->if->return->thisFormat->getFormat->if->return->other->if->thisFormat->other->getFormat->equals->return->thisEnc->this->getEncodedInternal->otherEnc->if->getEncodedInternal->else->other->getEncoded->return->MessageDigest->isEqual
P11Key#hashCode()::: p11 key hash code:::if->token->isValid->return->b1->getEncodedInternal->if->return->r->for->i->return
P11Key#writeReplace()::: p11 key write replace:::type->format->getFormat->if->isPrivate->equals->else->if->isPublic->equals->else->if->isSecret->equals->else->throw->new->NotSerializableException->return->getAlgorithm->getEncoded->new->KeyRep
P11Key#toString()::: p11 key to string:::token->ensureValid->s1->getName->if->isPublic->else->return
P11Key#length():::Return bit length of the key.:::return
P11Key#isPublic()::: p11 key is public:::return
P11Key#isPrivate()::: p11 key is private:::return
P11Key#isSecret()::: p11 key is secret:::return
P11Key#fetchAttributes(CK_ATTRIBUTE[])::: p11 key fetch attributes:::tempSession->keyID->this->getKeyID->try->token->getOpSession->tempSession->id->C_GetAttributeValue->catch->throw->new->ProviderException->finally->this->releaseKeyID->token->releaseSession
P11Key#getAttributes(Session, long, CK_ATTRIBUTE[], CK_ATTRIBUTE[])::: p11 key get attributes:::if->for->i->return
P11Key#secretKey(Session, long, String, int, CK_ATTRIBUTE[])::: p11 key secret key:::new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->getAttributes->return->new->P11SecretKey
P11Key#masterSecretKey(Session, long, String, int, CK_ATTRIBUTE[], int, int)::: p11 key master secret key:::new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->getAttributes->return->new->P11TlsMasterSecretKey
P11Key#publicKey(Session, long, String, int, CK_ATTRIBUTE[])::: p11 key public key:::switch->return->new->P11RSAPublicKey->return->new->P11DSAPublicKey->return->new->P11DHPublicKey->return->new->P11ECPublicKey->throw->new->ProviderException
P11Key#privateKey(Session, long, String, int, CK_ATTRIBUTE[])::: p11 key private key:::new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->getAttributes->if->getBoolean->getBoolean->return->new->P11PrivateKey->else->switch->attrs2->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->crtKey->try->session->id->C_GetAttributeValue->catch->finally->if->return->new->P11RSAPrivateKey->else->return->new->P11RSAPrivateNonCRTKey->return->new->P11DSAPrivateKey->return->new->P11DHPrivateKey->return->new->P11ECPrivateKey->throw->new->ProviderException
P11Key.P11PrivateKey#getFormat()::: p11 private key get format:::token->ensureValid->return
P11Key.P11PrivateKey#getEncodedInternal()::: p11 private key get encoded internal:::token->ensureValid->return
P11Key.P11SecretKey#getFormat()::: p11 secret key get format:::token->ensureValid->if->return->else->return
P11Key.P11SecretKey#getEncodedInternal()::: p11 secret key get encoded internal:::token->ensureValid->if->getFormat->return->b->if->synchronized->if->tempSession->keyID->this->getKeyID->try->token->getOpSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->tempSession->id->C_GetAttributeValue->getByteArray->catch->throw->new->ProviderException->finally->this->releaseKeyID->token->releaseSession->return
P11Key.P11TlsMasterSecretKey#getMajorVersion()::: p11 tls master secret key get major version:::return
P11Key.P11TlsMasterSecretKey#getMinorVersion()::: p11 tls master secret key get minor version:::return
P11Key.P11RSAPrivateKey#fetchValues()::: p11 private key fetch values:::token->ensureValid->if->return->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->fetchAttributes->getBigInteger->getBigInteger
P11Key.P11RSAPrivateKey#getFormat()::: p11 private key get format:::token->ensureValid->return
P11Key.P11RSAPrivateKey#getEncodedInternal()::: p11 private key get encoded internal:::token->ensureValid->if->fetchValues->try->newKey->RSAPrivateCrtKeyImpl->newKey->newKey->getEncoded->catch->throw->new->ProviderException->finally->return
P11Key.P11RSAPrivateKey#getModulus()::: p11 private key get modulus:::fetchValues->return
P11Key.P11RSAPrivateKey#getPublicExponent()::: p11 private key get public exponent:::return
P11Key.P11RSAPrivateKey#getPrivateExponent()::: p11 private key get private exponent:::fetchValues->return
P11Key.P11RSAPrivateKey#getPrimeP()::: p11 private key get prime p:::return
P11Key.P11RSAPrivateKey#getPrimeQ()::: p11 private key get prime q:::return
P11Key.P11RSAPrivateKey#getPrimeExponentP()::: p11 private key get prime exponent p:::return
P11Key.P11RSAPrivateKey#getPrimeExponentQ()::: p11 private key get prime exponent q:::return
P11Key.P11RSAPrivateKey#getCrtCoefficient()::: p11 private key get crt coefficient:::return
P11Key.P11RSAPrivateNonCRTKey#fetchValues()::: p11 private non key fetch values:::token->ensureValid->if->return->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->fetchAttributes->getBigInteger->getBigInteger
P11Key.P11RSAPrivateNonCRTKey#getFormat()::: p11 private non key get format:::token->ensureValid->return
P11Key.P11RSAPrivateNonCRTKey#getEncodedInternal()::: p11 private non key get encoded internal:::token->ensureValid->if->fetchValues->try->factory->KeyFactory->P11Util->getSunRsaSignProvider->getInstance->newKey->factory->translateKey->newKey->getEncoded->catch->throw->new->ProviderException->finally->return
P11Key.P11RSAPrivateNonCRTKey#getModulus()::: p11 private non key get modulus:::fetchValues->return
P11Key.P11RSAPrivateNonCRTKey#getPrivateExponent()::: p11 private non key get private exponent:::fetchValues->return
P11Key.P11RSAPublicKey#fetchValues()::: p11 public key fetch values:::token->ensureValid->if->return->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->fetchAttributes->getBigInteger->getBigInteger
P11Key.P11RSAPublicKey#getFormat()::: p11 public key get format:::token->ensureValid->return
P11Key.P11RSAPublicKey#getEncodedInternal()::: p11 public key get encoded internal:::token->ensureValid->if->fetchValues->try->RSAPublicKeyImpl->newKey->getEncoded->catch->throw->new->ProviderException->finally->return
P11Key.P11RSAPublicKey#getModulus()::: p11 public key get modulus:::fetchValues->return
P11Key.P11RSAPublicKey#getPublicExponent()::: p11 public key get public exponent:::fetchValues->return
P11Key.P11RSAPublicKey#toString()::: p11 public key to string:::fetchValues->return->super->toString
P11Key.P11DSAPublicKey#fetchValues()::: p11 public key fetch values:::token->ensureValid->if->return->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->fetchAttributes->getBigInteger->getBigInteger->getBigInteger->getBigInteger->new->DSAParameterSpec
P11Key.P11DSAPublicKey#getFormat()::: p11 public key get format:::token->ensureValid->return
P11Key.P11DSAPublicKey#getEncodedInternal()::: p11 public key get encoded internal:::token->ensureValid->if->fetchValues->try->key->params->getP->params->getQ->params->getG->new->sun.security.provider.DSAPublicKey->key->getEncoded->catch->throw->new->ProviderException->finally->return
P11Key.P11DSAPublicKey#getY()::: p11 public key get y:::fetchValues->return
P11Key.P11DSAPublicKey#getParams()::: p11 public key get params:::fetchValues->return
P11Key.P11DSAPublicKey#toString()::: p11 public key to string:::fetchValues->return->super->toString->params->getP->params->getQ->params->getG
P11Key.P11DSAPrivateKey#fetchValues()::: p11 private key fetch values:::token->ensureValid->if->return->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->fetchAttributes->getBigInteger->getBigInteger->getBigInteger->getBigInteger->new->DSAParameterSpec
P11Key.P11DSAPrivateKey#getFormat()::: p11 private key get format:::token->ensureValid->return
P11Key.P11DSAPrivateKey#getEncodedInternal()::: p11 private key get encoded internal:::token->ensureValid->if->fetchValues->try->key->params->getP->params->getQ->params->getG->new->sun.security.provider.DSAPrivateKey->key->getEncoded->catch->throw->new->ProviderException->finally->return
P11Key.P11DSAPrivateKey#getX()::: p11 private key get x:::fetchValues->return
P11Key.P11DSAPrivateKey#getParams()::: p11 private key get params:::fetchValues->return
P11Key.P11DHPrivateKey#fetchValues()::: p11 private key fetch values:::token->ensureValid->if->return->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->fetchAttributes->getBigInteger->getBigInteger->getBigInteger->new->DHParameterSpec
P11Key.P11DHPrivateKey#getFormat()::: p11 private key get format:::token->ensureValid->return
P11Key.P11DHPrivateKey#getEncodedInternal()::: p11 private key get encoded internal:::token->ensureValid->if->fetchValues->try->spec->params->getP->params->getG->new->DHPrivateKeySpec->kf->KeyFactory->P11Util->getSunJceProvider->getInstance->key->kf->generatePrivate->key->getEncoded->catch->throw->new->ProviderException->finally->return
P11Key.P11DHPrivateKey#getX()::: p11 private key get x:::fetchValues->return
P11Key.P11DHPrivateKey#getParams()::: p11 private key get params:::fetchValues->return
P11Key.P11DHPrivateKey#hashCode()::: p11 private key hash code:::if->token->isValid->return->fetchValues->return->Objects->params->getP->params->getG->hash
P11Key.P11DHPrivateKey#equals(Object)::: p11 private key equals:::if->return->if->token->isValid->return->if->return->fetchValues->other->otherParams->other->getParams->return->other->getX->compareTo->getP->otherParams->getP->compareTo->getG->otherParams->getG->compareTo
P11Key.P11DHPublicKey#fetchValues()::: p11 public key fetch values:::token->ensureValid->if->return->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->fetchAttributes->getBigInteger->getBigInteger->getBigInteger->new->DHParameterSpec
P11Key.P11DHPublicKey#getFormat()::: p11 public key get format:::token->ensureValid->return
P11Key.P11DHPublicKey#getEncodedInternal()::: p11 public key get encoded internal:::token->ensureValid->if->fetchValues->try->spec->params->getP->params->getG->new->DHPublicKeySpec->kf->KeyFactory->P11Util->getSunJceProvider->getInstance->key->kf->generatePublic->key->getEncoded->catch->throw->new->ProviderException->finally->return
P11Key.P11DHPublicKey#getY()::: p11 public key get y:::fetchValues->return
P11Key.P11DHPublicKey#getParams()::: p11 public key get params:::fetchValues->return
P11Key.P11DHPublicKey#toString()::: p11 public key to string:::fetchValues->return->super->toString->params->getP->params->getG
P11Key.P11DHPublicKey#hashCode()::: p11 public key hash code:::if->token->isValid->return->fetchValues->return->Objects->params->getP->params->getG->hash
P11Key.P11DHPublicKey#equals(Object)::: p11 public key equals:::if->return->if->token->isValid->return->if->return->fetchValues->other->otherParams->other->getParams->return->other->getY->compareTo->getP->otherParams->getP->compareTo->getG->otherParams->getG->compareTo
P11Key.P11ECPrivateKey#fetchValues()::: p11 private key fetch values:::token->ensureValid->if->return->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->fetchAttributes->getBigInteger->try->P11ECKeyFactory->getByteArray->decodeParameters->catch->throw->new->RuntimeException->finally
P11Key.P11ECPrivateKey#getFormat()::: p11 private key get format:::token->ensureValid->return
P11Key.P11ECPrivateKey#getEncodedInternal()::: p11 private key get encoded internal:::token->ensureValid->if->fetchValues->try->key->ECUtil->generateECPrivateKey->key->getEncoded->catch->throw->new->ProviderException->finally->return
P11Key.P11ECPrivateKey#getS()::: p11 private key get s:::fetchValues->return
P11Key.P11ECPrivateKey#getParams()::: p11 private key get params:::fetchValues->return
P11Key.P11ECPublicKey#fetchValues()::: p11 public key fetch values:::token->ensureValid->if->return->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->fetchAttributes->try->P11ECKeyFactory->getByteArray->decodeParameters->ecKey->getByteArray->if->getUseEcX963Encoding->wECPoint->new->DerValue->if->wECPoint->getTag->throw->wECPoint->getTag->new->IOException->P11ECKeyFactory->wECPoint->getDataBytes->params->getCurve->decodePoint->else->P11ECKeyFactory->params->getCurve->decodePoint->catch->throw->new->RuntimeException->finally
P11Key.P11ECPublicKey#getFormat()::: p11 public key get format:::token->ensureValid->return
P11Key.P11ECPublicKey#getEncodedInternal()::: p11 public key get encoded internal:::token->ensureValid->if->fetchValues->try->return->ECUtil->x509EncodeECPublicKey->catch->throw->new->ProviderException->finally->return
P11Key.P11ECPublicKey#getW()::: p11 public key get w:::fetchValues->return
P11Key.P11ECPublicKey#getParams()::: p11 public key get params:::fetchValues->return
P11Key.P11ECPublicKey#toString()::: p11 public key to string:::fetchValues->return->super->toString->w->getAffineX->w->getAffineY
NativeKeyHolder#getKeyID()::: native key holder get key d:::if->synchronized->if->cnt->if->if->throw->new->RuntimeException->if->throw->new->RuntimeException->token->session->try->token->getObjSession->session->id->createNativeKey->new->SessionKeyRef->catch->throw->new->ProviderException->finally->token->releaseSession->else->if->throw->new->RuntimeException->return
NativeKeyHolder#releaseKeyID()::: native key holder release key d:::if->synchronized->if->throw->new->RuntimeException->cnt->if->if->throw->new->RuntimeException->if->throw->new->RuntimeException->dispose->else->if->throw->new->RuntimeException
SessionKeyRef#referenceQueue()::: session key ref reference queue:::return
SessionKeyRef#drainRefQueueBounded()::: session key ref drain ref queue bounded:::while->next->refQueue->poll->if->break->next->dispose
SessionKeyRef#dispose()::: session key ref dispose:::token->if->token->isValid->s->try->token->getOpSession->s->id->C_DestroyObject->catch->finally->token->releaseSession->refList->remove->this->clear->session->removeObject->return
SessionKeyRef#compareTo(SessionKeyRef)::: session key ref compare to:::if->return->else->return
P11KeyAgreement.AllowKDF#getValue()::: allow f get value:::return->AccessController->Boolean->getBoolean->doPrivileged
P11KeyAgreement#engineInit(Key, SecureRandom)::: p11 key agreement engine init:::if->throw->new->InvalidKeyException->P11KeyFactory->convertKey
P11KeyAgreement#engineInit(Key, AlgorithmParameterSpec, SecureRandom)::: p11 key agreement engine init:::if->throw->new->InvalidAlgorithmParameterException->engineInit
P11KeyAgreement#engineDoPhase(Key, boolean)::: p11 key agreement engine do phase:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->if->try->KeyAgreement->P11Util->getSunJceProvider->getInstance->multiPartyAgreement->init->catch->throw->new->InvalidKeyException->finally->return->multiPartyAgreement->doPhase->if->key->getAlgorithm->equals->throw->new->InvalidKeyException->p->g->y->if->dhKey->KeyUtil->validate->dhKey->getY->params->dhKey->getParams->params->getP->params->getG->else->kf->new->P11DHKeyFactory->try->spec->kf->engineGetKeySpec->KeyUtil->validate->spec->getY->spec->getP->spec->getG->catch->throw->new->InvalidKeyException->finally->if->dhKey->params->dhKey->getParams->if->p->params->getP->equals->g->params->getG->equals->throw->new->InvalidKeyException->p->bitLength->return
P11KeyAgreement#engineGenerateSecret()::: p11 key agreement engine generate secret:::if->val->multiPartyAgreement->generateSecret->return->if->throw->new->IllegalStateException->session->privKeyID->privateKey->getKeyID->try->token->getOpSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->keyID->session->id->new->CK_MECHANISM->C_DeriveKey->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->secret->getByteArray->session->id->C_DestroyObject->if->return->else->if->throw->new->ProviderException->newSecret->new->byteArr->System->arraycopy->return->catch->throw->new->ProviderException->finally->privateKey->releaseKeyID->token->releaseSession
P11KeyAgreement#engineGenerateSecret(byte[], int)::: p11 key agreement engine generate secret:::if->n->multiPartyAgreement->generateSecret->return->if->throw->new->ShortBufferException->secret->engineGenerateSecret->System->arraycopy->return
P11KeyAgreement#engineGenerateSecret(String)::: p11 key agreement engine generate secret:::if->key->multiPartyAgreement->generateSecret->return->if->throw->new->NoSuchAlgorithmException->if->algorithm->equals->return->nativeGenerateSecret->if->algorithm->equalsIgnoreCase->throw->new->NoSuchAlgorithmException->secret->engineGenerateSecret->keyLen->if->algorithm->equalsIgnoreCase->else->if->algorithm->equalsIgnoreCase->else->if->algorithm->equalsIgnoreCase->Math->min->else->if->algorithm->equalsIgnoreCase->else->throw->new->NoSuchAlgorithmException->if->throw->new->InvalidKeyException->if->algorithm->equalsIgnoreCase->algorithm->equalsIgnoreCase->for->i->return->new->SecretKeySpec
P11KeyAgreement#nativeGenerateSecret(String)::: p11 key agreement native generate secret:::if->throw->new->IllegalStateException->keyType->session->privKeyID->privateKey->getKeyID->try->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->keyID->session->id->new->CK_MECHANISM->C_DeriveKey->lenAttributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->keyLen->getLong->key->P11Key->secretKey->if->key->getFormat->equals->keyBytes->key->getEncoded->newBytes->KeyUtil->trimZeroes->if->new->SecretKeySpec->return->catch->throw->new->InvalidKeyException->finally->privateKey->releaseKeyID->token->releaseSession
P11KeyFactory#convertKey(Token, Key, String):::Convert an arbitrary key of algorithm into a P11Key of token:::return->token->getKeyFactory->engineTranslateKey
P11KeyFactory#engineGetKeySpec(Key, Class)::: p11 key factory engine get key spec:::token->ensureValid->if->throw->new->InvalidKeySpecException->if->isAssignableFrom->isAssignableFrom->try->return->implGetSoftwareFactory->getKeySpec->catch->throw->new->InvalidKeySpecException->finally->p11Key->try->engineTranslateKey->catch->throw->new->InvalidKeySpecException->finally->session->new->SessionArr->try->if->p11Key->isPublic->return->implGetPublicKeySpec->else->return->implGetPrivateKeySpec->catch->throw->new->InvalidKeySpecException->finally->token->releaseSession
P11KeyFactory#engineTranslateKey(Key)::: p11 key factory engine translate key:::token->ensureValid->if->throw->new->InvalidKeyException->if->key->getAlgorithm->equals->throw->new->InvalidKeyException->if->p11Key->if->return->p11Key->get->if->return->if->publicKey->implTranslatePublicKey->put->return->else->if->privateKey->implTranslatePrivateKey->put->return->else->throw->new->InvalidKeyException
P11KeyFactory#implGetPublicKeySpec(P11Key, Class, Session[])::: p11 key factory impl get public key spec:::
P11KeyFactory#implGetPrivateKeySpec(P11Key, Class, Session[])::: p11 key factory impl get private key spec:::
P11KeyFactory#implTranslatePublicKey(PublicKey)::: p11 key factory impl translate public key:::
P11KeyFactory#implTranslatePrivateKey(PrivateKey)::: p11 key factory impl translate private key:::
P11KeyFactory#implGetSoftwareFactory()::: p11 key factory impl get software factory:::
P11KeyGenerator#checkKeySize(long, int, Token):::Utility method for checking if the specified key size is valid and within the supported range:::sigKeySize->switch->if->throw->new->InvalidAlgorithmParameterException->break->if->else->if->else->throw->new->InvalidAlgorithmParameterException->break->info->try->token->getMechanismInfo->catch->throw->new->ProviderException->finally->if->return->minKeySize->maxKeySize->if->Math->multiplyExact->if->Math->multiplyExact->if->if->throw->new->InvalidAlgorithmParameterException->if->if->throw->new->InvalidAlgorithmParameterException->return
P11KeyGenerator#setDefaultKeySize()::: p11 key generator set default key size:::switch->break->break->break->break->break->break->throw->new->ProviderException->try->checkKeySize->catch->throw->new->ProviderException->finally
P11KeyGenerator#engineInit(SecureRandom)::: p11 key generator engine init:::token->ensureValid->setDefaultKeySize
P11KeyGenerator#engineInit(AlgorithmParameterSpec, SecureRandom)::: p11 key generator engine init:::throw->new->InvalidAlgorithmParameterException
P11KeyGenerator#engineInit(int, SecureRandom)::: p11 key generator engine init:::token->ensureValid->newSignificantKeySize->try->checkKeySize->catch->throw->new->InvalidParameterException->initCause->finally->if->newMechanism->if->if->else->throw->new->InvalidParameterException
P11KeyGenerator#engineGenerateKey()::: p11 key generator engine generate key:::session->try->token->getObjSession->attributes->switch->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->break->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->break->token->getAttributes->keyID->session->id->new->CK_MECHANISM->C_GenerateKey->return->P11Key->secretKey->catch->throw->new->ProviderException->finally->token->releaseSession
P11KeyPairGenerator#initialize(int, SecureRandom)::: p11 key pair generator initialize:::token->ensureValid->try->checkKeySize->catch->throw->e->getMessage->new->InvalidParameterException->finally->if->algorithm->equals->P11ECKeyFactory->getECParameterSpec->if->throw->new->InvalidParameterException
P11KeyPairGenerator#initialize(AlgorithmParameterSpec, SecureRandom)::: p11 key pair generator initialize:::token->ensureValid->tmpKeySize->if->algorithm->equals->if->throw->new->InvalidAlgorithmParameterException->dhParams->dhParams->getP->bitLength->checkKeySize->else->if->algorithm->equals->if->throw->new->InvalidAlgorithmParameterException->rsaParams->rsaParams->getKeysize->checkKeySize->rsaParams->getPublicExponent->else->if->algorithm->equals->if->throw->new->InvalidAlgorithmParameterException->dsaParams->dsaParams->getP->bitLength->checkKeySize->else->if->algorithm->equals->ecParams->if->P11ECKeyFactory->getECParameterSpec->if->throw->new->InvalidAlgorithmParameterException->else->if->name->getName->P11ECKeyFactory->getECParameterSpec->if->throw->new->InvalidAlgorithmParameterException->else->throw->new->InvalidAlgorithmParameterException->ecParams->getCurve->getField->getFieldSize->checkKeySize->else->throw->new->ProviderException
P11KeyPairGenerator#checkKeySize(int, AlgorithmParameterSpec)::: p11 key pair generator check key size:::if->throw->new->InvalidAlgorithmParameterException->if->throw->new->InvalidAlgorithmParameterException->if->throw->new->InvalidAlgorithmParameterException->if->algorithm->equals->if->throw->new->InvalidAlgorithmParameterException->if->throw->new->InvalidAlgorithmParameterException->else->if->throw->new->InvalidAlgorithmParameterException->if->algorithm->equals->tmpExponent->if->getPublicExponent->try->RSAKeyFactory->checkKeyLengths->catch->throw->new->InvalidAlgorithmParameterException->finally->else->if->algorithm->equals->if->if->throw->new->InvalidAlgorithmParameterException->else->if->throw->new->InvalidAlgorithmParameterException->cache->ParameterCache->getCachedDHParameterSpec->if->throw->new->InvalidAlgorithmParameterException->else->if->throw->new->InvalidAlgorithmParameterException
P11KeyPairGenerator#generateKeyPair()::: p11 key pair generator generate key pair:::token->ensureValid->publicKeyTemplate->privateKeyTemplate->keyType->if->algorithm->equals->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTEArr->else->if->algorithm->equals->dsaParams->if->try->ParameterCache->getDSAParameterSpec->catch->throw->new->ProviderException->finally->else->new->CK_ATTRIBUTEArr->dsaParams->getP->new->CK_ATTRIBUTE->dsaParams->getQ->new->CK_ATTRIBUTE->dsaParams->getG->new->CK_ATTRIBUTE->new->CK_ATTRIBUTEArr->else->if->algorithm->equals->dhParams->privateBits->if->try->ParameterCache->getDHParameterSpec->catch->throw->new->ProviderException->finally->else->dhParams->getL->if->new->CK_ATTRIBUTEArr->dhParams->getP->new->CK_ATTRIBUTE->dhParams->getG->new->CK_ATTRIBUTE->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->else->if->algorithm->equals->encodedParams->P11ECKeyFactory->encodeParameters->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTEArr->else->throw->new->ProviderException->session->try->token->getObjSession->token->getAttributes->token->getAttributes->keyIDs->session->id->new->CK_MECHANISM->C_GenerateKeyPair->publicKey->P11Key->publicKey->privateKey->P11Key->privateKey->return->new->KeyPair->catch->throw->new->ProviderException->finally->token->releaseSession
P11KeyStore.AliasInfo#toString()::: alias info to string:::sb->new->StringBuilder->if->sb->append->else->if->sb->append->else->if->sb->append->sb->append->if->sb->append->else->sb->P11KeyStore->getID->append->sb->append->sb->append->if->sb->append->else->sb->cert->getSubjectX500Principal->cert->getIssuerX500Principal->cert->getSerialNumber->toString->append->return->sb->toString
P11KeyStore.PasswordCallbackHandler#handle(Callback[])::: password callback handler handle:::if->throw->new->UnsupportedCallbackException->pc->pc->setPassword
P11KeyStore.PasswordCallbackHandler#finalize()::: password callback handler finalize:::if->Arrays->fill->super->finalize
P11KeyStore#engineGetKey(String, char[]):::Returns the key associated with the given alias:::token->ensureValid->if->getKeyStoreCompatibilityMode->throw->new->NoSuchAlgorithmException->aliasInfo->aliasMap->get->if->return->session->try->token->getOpSession->if->h->getTokenObject->if->return->loadPkey->else->h->getTokenObject->if->return->loadSkey->return->catch->throw->new->ProviderException->finally->token->releaseSession
P11KeyStore#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias:::token->ensureValid->aliasInfo->aliasMap->get->if->return->return
P11KeyStore#engineGetCertificate(String):::Returns the certificate associated with the given alias:::token->ensureValid->aliasInfo->aliasMap->get->if->return->return
P11KeyStore#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::token->ensureValid->throw->new->UnsupportedOperationException->new->ProviderException
P11KeyStore#engineSetKeyEntry(String, Key, char[], Certificate[]):::Assigns the given key to the given alias, protecting it with the given password:::token->ensureValid->checkWrite->if->throw->new->KeyStoreException->else->if->throw->new->KeyStoreException->else->if->throw->new->KeyStoreException->else->if->getKeyStoreCompatibilityMode->throw->new->KeyStoreException->entry->try->if->new->KeyStore.PrivateKeyEntry->else->if->new->KeyStore.SecretKeyEntry->catch->throw->new->KeyStoreException->finally->new->KeyStore.PasswordProtection->engineSetEntry
P11KeyStore#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::token->ensureValid->throw->new->UnsupportedOperationException->new->ProviderException
P11KeyStore#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias:::token->ensureValid->checkWrite->if->throw->new->KeyStoreException->entry->new->KeyStore.TrustedCertificateEntry->engineSetEntry
P11KeyStore#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::token->ensureValid->if->token->isWriteProtected->throw->new->KeyStoreException->checkWrite->deleteEntry
P11KeyStore#deleteEntry(String):::XXX - not sure whether to keep this:::aliasInfo->aliasMap->get->if->aliasMap->remove->try->if->return->destroyCert->else->if->return->destroyPkey->destroyChain->else->if->return->destroySkey->else->throw->new->KeyStoreException->catch->throw->new->KeyStoreException->finally->return
P11KeyStore#engineAliases():::Lists all the alias names of this keystore.:::token->ensureValid->return->Collections->aliasMap->keySet->new->HashSet<String>->enumeration
P11KeyStore#engineContainsAlias(String):::Checks if the given alias exists in this keystore.:::token->ensureValid->return->aliasMap->containsKey
P11KeyStore#engineSize():::Retrieves the number of entries in this keystore.:::token->ensureValid->return->aliasMap->size
P11KeyStore#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.:::token->ensureValid->aliasInfo->aliasMap->get->if->return->return
P11KeyStore#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.:::token->ensureValid->aliasInfo->aliasMap->get->if->return->return
P11KeyStore#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::token->ensureValid->e->engineAliases->while->e->hasMoreElements->alias->e->nextElement->tokenCert->engineGetCertificate->if->tokenCert->equals->return->return
P11KeyStore#engineStore(OutputStream, char[]):::engineStore currently is a No-op:::token->ensureValid->if->getKeyStoreCompatibilityMode->throw->new->IOException->if->getKeyStoreCompatibilityMode->throw->new->IOException
P11KeyStore#engineStore(KeyStore.LoadStoreParameter):::engineStore currently is a No-op:::token->ensureValid->if->throw->new->IllegalArgumentException
P11KeyStore#engineLoad(InputStream, char[]):::Loads the keystore.:::token->ensureValid->if->new->CK_ATTRIBUTE->if->getKeyStoreCompatibilityMode->throw->new->IOException->if->try->if->login->else->new->PasswordCallbackHandler->login->catch->cause->e->getCause->if->pe->if->pe->getErrorCode->throw->new->UnrecoverableKeyException->initCause->new->IOException->throw->new->IOException->finally->try->if->mapLabels->if->dumpTokenMap->debug->aliasMap->size->println->catch->throw->new->IOException->finally
P11KeyStore#engineLoad(KeyStore.LoadStoreParameter):::Loads the keystore using the given KeyStore.LoadStoreParameter:::token->ensureValid->if->new->CK_ATTRIBUTE->if->throw->new->IllegalArgumentException->if->if->getTrustType->else->handler->pp->param->getProtectionParameter->if->password->getPassword->if->else->new->PasswordCallbackHandler->else->if->getCallbackHandler->else->throw->new->IllegalArgumentException->try->login->if->mapLabels->if->dumpTokenMap->catch->throw->new->IOException->finally
P11KeyStore#login(CallbackHandler)::: p11 key store login:::if->login->else->if->getKeyStoreCompatibilityMode->throw->new->LoginException->login
P11KeyStore#engineGetEntry(String, KeyStore.ProtectionParameter):::Get a KeyStore.Entry for the specified alias:::token->ensureValid->if->getPassword->getKeyStoreCompatibilityMode->throw->new->KeyStoreException->aliasInfo->aliasMap->get->if->if->debug->println->return->session->try->token->getOpSession->if->if->debug->println->return->new->KeyStore.TrustedCertificateEntry->else->if->if->debug->println->h->getTokenObject->if->throw->new->KeyStoreException->else->skey->loadSkey->return->new->KeyStore.SecretKeyEntry->else->if->debug->println->h->getTokenObject->if->throw->new->KeyStoreException->else->pkey->loadPkey->chain->if->return->new->KeyStore.PrivateKeyEntry->else->if->debug->println->return->catch->throw->new->KeyStoreException->finally->token->releaseSession
P11KeyStore#engineSetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter):::Save a KeyStore.Entry under the specified alias:::token->ensureValid->checkWrite->if->getPassword->getKeyStoreCompatibilityMode->throw->new->UnsupportedOperationException->new->KeyStoreException->if->token->isWriteProtected->throw->new->KeyStoreException->if->if->throw->new->UnsupportedOperationException->new->KeyStoreException->module->if->throw->new->KeyStoreException->cert->getTrustedCertificate->if->throw->new->KeyStoreException->xcert->info->aliasMap->get->if->deleteEntry->try->storeCert->module->setTrust->mapLabels->catch->throw->new->KeyStoreException->finally->else->if->key->getPrivateKey->if->throw->key->getClass->getName->new->KeyStoreException->chain->getCertificateChain->if->throw->chain->getClass->getName->new->UnsupportedOperationException->new->KeyStoreException->try->updatedAlias->aliases->aliasMap->keySet->foreach->aliasInfo->aliasMap->get->if->getPublicKey->getPublicKey->equals->equals->updatePkey->break->if->engineDeleteEntry->storePkey->catch->throw->new->KeyStoreException->finally->else->if->ske->skey->ske->getSecretKey->try->aliasInfo->aliasMap->get->if->engineDeleteEntry->storeSkey->catch->throw->new->KeyStoreException->finally->else->throw->entry->getClass->getName->new->UnsupportedOperationException->new->KeyStoreException->try->mapLabels->if->dumpTokenMap->catch->throw->new->KeyStoreException->finally->if->debug->println
P11KeyStore#engineEntryInstanceOf(String, Class):::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.:::token->ensureValid->return->super->engineEntryInstanceOf
P11KeyStore#loadCert(Session, long)::: p11 key store load cert:::attrs->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->bytes->getByteArray->if->throw->new->CertificateException->cf->CertificateFactory->getInstance->return->cf->new->ByteArrayInputStream->generateCertificate
P11KeyStore#loadChain(Session, X509Certificate)::: p11 key store load chain:::lChain->if->endCert->getSubjectX500Principal->endCert->getIssuerX500Principal->equals->return->new->X509CertificateArr->else->new->ArrayList<X509Certificate>->lChain->add->next->while->attrs->new->CK_ATTRIBUTEArr->next->getIssuerX500Principal->getEncoded->new->CK_ATTRIBUTE->ch->findObjects->if->break->else->if->debug->next->getIssuerX500Principal->toString->println->loadCert->lChain->add->if->next->getSubjectX500Principal->next->getIssuerX500Principal->equals->break->return->lChain->lChain->size->new->X509CertificateArr->toArray
P11KeyStore#loadSkey(Session, long)::: p11 key store load skey:::attrs->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->kType->getLong->keyType->keyLength->if->if->else->if->else->if->else->if->else->if->else->if->debug->println->if->else->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->getLong->return->P11Key->secretKey
P11KeyStore#loadPkey(Session, long)::: p11 key store load pkey:::attrs->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->kType->getLong->keyType->keyLength->if->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->modulus->getBigInteger->modulus->bitLength->try->RSAKeyFactory->checkKeyLengths->catch->throw->e->getMessage->new->KeyStoreException->finally->return->P11Key->privateKey->else->if->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->prime->getBigInteger->prime->bitLength->return->P11Key->privateKey->else->if->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->prime->getBigInteger->prime->bitLength->return->P11Key->privateKey->else->if->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->encodedParams->getByteArray->try->params->ECUtil->getECParameterSpec->params->getCurve->getField->getFieldSize->catch->throw->new->KeyStoreException->finally->return->P11Key->privateKey->else->if->debug->println->throw->new->KeyStoreException
P11KeyStore#updatePkey(String, byte[], X509Certificate[], boolean):::XXX  On ibutton, when you C_SetAttribute(CKA_ID) for a private key      it not only changes the CKA_ID of the private key,      it changes the CKA_ID of the corresponding cert too:::session->try->token->getOpSession->h->getTokenObject->pKeyHandle->if->else->throw->getID->new->KeyStoreException->getTokenObject->if->throw->getID->new->KeyStoreException->else->if->destroyChain->else->attrs->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->session->id->C_SetAttributeValue->if->storeChain->else->storeCaCerts->attrs->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_SetAttributeValue->if->debug->println->catch->finally->token->releaseSession
P11KeyStore#updateP11Pkey(String, CK_ATTRIBUTE, P11Key)::: p11 key store update p11 pkey:::session->keyID->key->getKeyID->try->token->getOpSession->if->attrs->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_SetAttributeValue->if->debug->println->else->attrs->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->if->addAttribute->session->id->C_CopyObject->if->debug->println->catch->finally->token->releaseSession->key->releaseKeyID
P11KeyStore#storeCert(String, X509Certificate)::: p11 key store store cert:::attrList->new->ArrayList<CK_ATTRIBUTE>->attrList->add->attrList->add->attrList->add->attrList->cert->getSubjectX500Principal->getEncoded->new->CK_ATTRIBUTE->add->attrList->cert->getIssuerX500Principal->getEncoded->new->CK_ATTRIBUTE->add->attrList->cert->getSerialNumber->toByteArray->new->CK_ATTRIBUTE->add->attrList->cert->getEncoded->new->CK_ATTRIBUTE->add->if->attrList->new->CK_ATTRIBUTE->add->attrList->new->CK_ATTRIBUTE->add->else->attrList->cert->getSubjectX500Principal->getName->getID->new->CK_ATTRIBUTE->add->session->try->token->getOpSession->session->id->attrList->attrList->size->new->CK_ATTRIBUTEArr->toArray->C_CreateObject->catch->finally->token->releaseSession
P11KeyStore#storeChain(String, X509Certificate[])::: p11 key store store chain:::storeCert->storeCaCerts
P11KeyStore#storeCaCerts(X509Certificate[], int)::: p11 key store store ca certs:::session->cacerts->new->HashSet<X509Certificate>->try->token->getOpSession->attrs->new->CK_ATTRIBUTEArr->handles->findObjects->foreach->cacerts->loadCert->add->catch->finally->token->releaseSession->for->i
P11KeyStore#storeSkey(String, KeyStore.SecretKeyEntry)::: p11 key store store skey:::skey->ske->getSecretKey->attrs->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->try->P11SecretKeyFactory->convertKey->catch->throw->new->KeyStoreException->finally->aliasMap->new->AliasInfo->put->if->debug->println
P11KeyStore#addAttribute(CK_ATTRIBUTE[], CK_ATTRIBUTE)::: p11 key store add attribute:::n->newAttrs->new->CK_ATTRIBUTEArr->System->arraycopy->return
P11KeyStore#storePkey(String, KeyStore.PrivateKeyEntry)::: p11 key store store pkey:::key->pke->getPrivateKey->attrs->if->p11Key->if->updateP11Pkey->pke->getCertificateChain->storeChain->return->useNDB->getNssNetscapeDbWorkaround->publicKey->pke->getCertificate->getPublicKey->if->cert->pke->getCertificate->cert->getSubjectX500Principal->getRsaPrivKeyAttrs->else->if->dsaKey->idAttrs->getIdAttributes->if->new->CK_ATTRIBUTE->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->dsaKey->getParams->getP->new->CK_ATTRIBUTE->dsaKey->getParams->getQ->new->CK_ATTRIBUTE->dsaKey->getParams->getG->new->CK_ATTRIBUTE->dsaKey->getX->new->CK_ATTRIBUTE->if->addAttribute->token->getAttributes->if->debug->println->else->if->dhKey->idAttrs->getIdAttributes->if->new->CK_ATTRIBUTE->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->dhKey->getParams->getP->new->CK_ATTRIBUTE->dhKey->getParams->getG->new->CK_ATTRIBUTE->dhKey->getX->new->CK_ATTRIBUTE->if->addAttribute->token->getAttributes->else->if->ecKey->idAttrs->getIdAttributes->if->new->CK_ATTRIBUTE->encodedParams->ECUtil->ecKey->getParams->encodeECParameterSpec->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->ecKey->getS->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->if->addAttribute->token->getAttributes->if->debug->println->else->if->p11Key->if->throw->new->KeyStoreException->netscapeDB->if->idAttrs->getIdAttributes->updateP11Pkey->pke->getCertificateChain->storeChain->return->else->throw->new->KeyStoreException->session->try->token->getOpSession->session->id->C_CreateObject->if->debug->println->catch->finally->token->releaseSession->pke->getCertificateChain->storeChain
P11KeyStore#getRsaPrivKeyAttrs(String, RSAPrivateKey, X500Principal)::: p11 key store get rsa priv key attrs:::attrs->if->if->debug->println->rsaKey->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->rsaKey->getModulus->new->CK_ATTRIBUTE->rsaKey->getPrivateExponent->new->CK_ATTRIBUTE->rsaKey->getPublicExponent->new->CK_ATTRIBUTE->rsaKey->getPrimeP->new->CK_ATTRIBUTE->rsaKey->getPrimeQ->new->CK_ATTRIBUTE->rsaKey->getPrimeExponentP->new->CK_ATTRIBUTE->rsaKey->getPrimeExponentQ->new->CK_ATTRIBUTE->rsaKey->getCrtCoefficient->new->CK_ATTRIBUTE->token->getAttributes->else->if->debug->println->rsaKey->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->rsaKey->getModulus->new->CK_ATTRIBUTE->rsaKey->getPrivateExponent->new->CK_ATTRIBUTE->token->getAttributes->return
P11KeyStore#getIdAttributes(PrivateKey, PublicKey, boolean, boolean):::Compute the CKA_ID and/or CKA_NETSCAPE_DB attributes that should be used for this private key:::attrs->new->CK_ATTRIBUTEArr->if->return->alg->privateKey->getAlgorithm->if->alg->equals->if->n->getModulus->getMagnitude->sha1->new->CK_ATTRIBUTE->else->if->alg->equals->y->getY->if->getMagnitude->sha1->new->CK_ATTRIBUTE->if->new->CK_ATTRIBUTE->else->if->alg->equals->y->getY->if->getMagnitude->sha1->new->CK_ATTRIBUTE->if->new->CK_ATTRIBUTE->else->if->alg->equals->ecPub->point->ecPub->getW->params->ecPub->getParams->encodedPoint->ECUtil->params->getCurve->encodePoint->if->sha1->new->CK_ATTRIBUTE->if->new->CK_ATTRIBUTE->else->throw->new->RuntimeException->return
P11KeyStore#destroyCert(byte[]):::return true if cert destroyed:::session->try->token->getOpSession->h->getTokenObject->if->return->session->id->C_DestroyObject->if->debug->getID->println->return->catch->finally->token->releaseSession
P11KeyStore#destroyChain(byte[]):::return true if chain destroyed:::session->try->token->getOpSession->h->getTokenObject->if->if->debug->Functions->toHexString->println->return->endCert->loadCert->session->id->C_DestroyObject->if->debug->getID->println->next->while->if->next->getSubjectX500Principal->next->getIssuerX500Principal->equals->break->attrs->new->CK_ATTRIBUTEArr->next->getIssuerX500Principal->getEncoded->new->CK_ATTRIBUTE->ch->findObjects->if->break->else->if->debug->next->getIssuerX500Principal->println->loadCert->new->CK_ATTRIBUTEArr->next->getSubjectX500Principal->getEncoded->new->CK_ATTRIBUTE->issuers->findObjects->destroyIt->if->else->if->iCert->loadCert->if->next->equals->if->session->id->C_DestroyObject->if->debug->next->getSubjectX500Principal->println->else->if->debug->next->getSubjectX500Principal->println->return->catch->finally->token->releaseSession
P11KeyStore#destroySkey(String):::return true if secret key destroyed:::session->try->token->getOpSession->h->getTokenObject->if->if->debug->println->return->session->id->C_DestroyObject->return->catch->finally->token->releaseSession
P11KeyStore#destroyPkey(byte[]):::return true if private key destroyed:::session->try->token->getOpSession->h->getTokenObject->if->if->debug->getID->println->return->session->id->C_DestroyObject->return->catch->finally->token->releaseSession
P11KeyStore#getID(String, X509Certificate):::build [alias + issuer + serialNumber] string from a cert:::issuer->cert->getIssuerX500Principal->serialNum->cert->getSerialNumber->return->issuer->getName->serialNum->toString
P11KeyStore#getID(byte[]):::build CKA_ID string from bytes:::printable->for->i->if->return->Functions->toHexString->else->try->return->new->String->catch->return->Functions->toHexString->finally
P11KeyStore#getTokenObject(Session, CK_ATTRIBUTE, byte[], String):::find an object on the token:::attrs->if->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->else->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->h->findObjects->if->if->if->debug->println->else->if->debug->getID->println->else->debug->getID->println->else->if->return->new->THandle->else->if->list->new->ArrayList<THandle>->for->i->if->list->size->return->list->get->else->throw->list->size->new->KeyStoreException->else->if->throw->getID->new->KeyStoreException->else->throw->getID->new->KeyStoreException->return->new->THandle
P11KeyStore#mapLabels():::Create a mapping of all key pairs, trusted certs, and secret keys on the token into logical KeyStore entries unambiguously accessible via an alias:::trustedAttr->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->try->token->getOpSession->pkeyIDs->new->ArrayList<byte[]>->attrs->new->CK_ATTRIBUTEArr->handles->findObjects->foreach->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->if->pkeyIDs->getByteArray->add->certMap->new->HashMap<String,HashSet<AliasInfo>>->new->CK_ATTRIBUTEArr->findObjects->foreach->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->cka_label->cka_id->try->session->id->C_GetAttributeValue->if->getCharArray->new->String->catch->if->pe->getErrorCode->throw->finally->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->if->if->continue->else->if->getByteArray->getID->getByteArray->cert->loadCert->cka_trusted->if->Secmod->getInstance->isTrusted->else->if->try->session->id->C_GetAttributeValue->getBoolean->catch->if->pe->getErrorCode->if->debug->println->finally->infoSet->certMap->get->if->new->HashSet<AliasInfo>->certMap->put->infoSet->new->AliasInfo->add->sKeyMap->new->HashMap<String,AliasInfo>->new->CK_ATTRIBUTEArr->findObjects->foreach->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_GetAttributeValue->if->cka_label->getCharArray->new->String->if->sKeyMap->get->sKeyMap->new->AliasInfo->put->else->throw->new->KeyStoreException->matchedCerts->mapPrivateKeys->sharedLabel->mapCerts->mapSecretKeys->return->catch->finally->token->releaseSession
P11KeyStore#mapPrivateKeys(ArrayList, HashMap>):::for each private key CKA_ID, find corresponding cert with same CKA_ID:::new->HashMap<String,AliasInfo>->matchedCerts->new->ArrayList<AliasInfo>->foreach->foundMatch->certLabels->certMap->keySet->foreach->infoSet->certMap->get->foreach->if->Arrays->equals->if->infoSet->size->aliasMap->put->else->aliasMap->getID->put->matchedCerts->add->break->if->break->if->if->debug->getID->println->return
P11KeyStore#mapCerts(ArrayList, HashMap>):::for each cert not matched with a private key but is CKA_TRUSTED:     if CKA_LABEL unique, map cert to CKA_LABEL:::foreach->session->try->token->getOpSession->loadChain->catch->finally->token->releaseSession->sharedLabel->certLabels->certMap->keySet->foreach->infoSet->certMap->get->foreach->if->continue->if->if->if->mapTrustedCert->continue->return
P11KeyStore#mapTrustedCert(String, AliasInfo, HashSet)::: p11 key store map trusted cert:::sharedLabel->if->infoSet->size->aliasMap->put->else->aliasMap->getID->put->return
P11KeyStore#mapSecretKeys(HashMap):::If the secret key shares a CKA_LABEL with another entry, throw an exception:::foreach->sKeyMap->keySet->if->aliasMap->containsKey->throw->new->KeyStoreException->aliasMap->putAll
P11KeyStore#dumpTokenMap()::: p11 key store dump token map:::aliases->aliasMap->keySet->println->if->aliases->isEmpty->println->else->foreach->aliasMap->get->println
P11KeyStore#checkWrite()::: p11 key store check write:::if->throw->new->KeyStoreException
P11KeyStore#findObjects(Session, CK_ATTRIBUTE[])::: p11 key store find objects:::token->handles->session->id->C_FindObjectsInit->while->h->session->id->C_FindObjects->if->break->P11Util->concat->session->id->C_FindObjectsFinal->return
P11Mac#reset(boolean)::: p11 mac reset:::if->return->try->if->return->if->cancelOperation->catch->finally->p11Key->releaseKeyID->token->releaseSession
P11Mac#cancelOperation()::: p11 mac cancel operation:::token->ensureValid->if->session->hasObjects->token->killSession->return->else->try->session->id->C_SignFinal->catch->throw->new->ProviderException->finally
P11Mac#ensureInitialized()::: p11 mac ensure initialized:::if->initialize
P11Mac#initialize()::: p11 mac initialize:::if->throw->new->ProviderException->token->ensureValid->p11KeyID->p11Key->getKeyID->try->if->token->getOpSession->session->id->C_SignInit->catch->p11Key->releaseKeyID->token->releaseSession->throw->finally
P11Mac#engineGetMacLength()::: p11 mac engine get mac length:::return
P11Mac#engineReset()::: p11 mac engine reset:::reset
P11Mac#engineInit(Key, AlgorithmParameterSpec)::: p11 mac engine init:::if->throw->new->InvalidAlgorithmParameterException->reset->P11SecretKeyFactory->convertKey->try->initialize->catch->throw->new->InvalidKeyException->finally
P11Mac#engineDoFinal()::: p11 mac engine do final:::try->ensureInitialized->return->session->id->C_SignFinal->catch->reset->throw->new->ProviderException->finally->reset
P11Mac#engineUpdate(byte)::: p11 mac engine update:::if->new->byteArr->engineUpdate
P11Mac#engineUpdate(byte[], int, int)::: p11 mac engine update:::try->ensureInitialized->session->id->C_SignUpdate->catch->throw->new->ProviderException->finally
P11Mac#engineUpdate(ByteBuffer)::: p11 mac engine update:::try->ensureInitialized->len->byteBuffer->remaining->if->return->if->super->engineUpdate->return->addr->address->ofs->byteBuffer->position->session->id->C_SignUpdate->byteBuffer->position->catch->throw->new->ProviderException->finally
P11PSSSignature#isDigestEqual(String, String)::: p11 signature is digest equal:::if->return->if->givenAlg->indexOf->return->stdAlg->equalsIgnoreCase->else->if->stdAlg->equals->return->givenAlg->equalsIgnoreCase->givenAlg->equalsIgnoreCase->else->sb->new->StringBuilder->if->givenAlg->regionMatches->sb->insert->toString->return->stdAlg->equalsIgnoreCase->else->throw->new->ProviderException
P11PSSSignature#ensureInitialized()::: p11 signature ensure initialized:::token->ensureValid->if->throw->new->SignatureException->if->if->throw->new->SignatureException->else->saltLen->DIGEST_LENGTHS->get->intValue->new->MGF1ParameterSpec->new->PSSParameterSpec->DIGEST_LENGTHS->get->intValue->new->CK_RSA_PKCS_PSS_PARAMS->setParameter->if->initialize
P11PSSSignature#reset(boolean)::: p11 signature reset:::if->return->try->if->return->if->cancelOperation->catch->finally->p11Key->releaseKeyID->mechanism->freeHandle->token->releaseSession
P11PSSSignature#cancelOperation()::: p11 signature cancel operation:::token->ensureValid->if->print->if->session->hasObjects->if->println->token->killSession->return->if->try->if->if->println->session->id->C_SignFinal->else->digest->new->byteArr->md->digest->if->println->session->id->C_Sign->catch->throw->new->ProviderException->finally->else->try->signature->p11Key->length->new->byteArr->if->if->println->session->id->C_VerifyFinal->else->digest->new->byteArr->md->digest->if->println->session->id->C_Verify->catch->finally
P11PSSSignature#initialize()::: p11 signature initialize:::if->println->if->throw->new->ProviderException->keyID->p11Key->getKeyID->try->if->token->getOpSession->if->session->id->C_SignInit->else->session->id->C_VerifyInit->catch->p11Key->releaseKeyID->token->releaseSession->throw->new->ProviderException->finally->if->if->md->reset->if->println
P11PSSSignature#checkKeySize(Key)::: p11 signature check key size:::if->print->if->key->getAlgorithm->equals->throw->new->InvalidKeyException->mechInfo->try->token->getMechanismInfo->catch->if->println->e->printStackTrace->finally->keySize->if->if->length->else->if->getModulus->bitLength->else->throw->new->InvalidKeyException->if->throw->new->InvalidKeyException->if->throw->new->InvalidKeyException->if->digestAlg->getDigestAlgorithm->sLen->getSaltLength->hLen->DIGEST_LENGTHS->get->intValue->minKeyLen->Math->Math->addExact->addExact->if->throw->new->InvalidKeyException
P11PSSSignature#setSigParams(AlgorithmParameterSpec)::: p11 signature set sig params:::if->throw->new->InvalidAlgorithmParameterException->if->throw->new->InvalidAlgorithmParameterException->params->if->return->digestAlgorithm->params->getDigestAlgorithm->if->isDigestEqual->throw->new->InvalidAlgorithmParameterException->digestLen->DIGEST_LENGTHS->get->if->throw->new->InvalidAlgorithmParameterException->if->params->getMGFAlgorithm->equalsIgnoreCase->throw->new->InvalidAlgorithmParameterException->mgfDigestAlgo->mgfParams->params->getMGFParameters->if->if->throw->new->InvalidAlgorithmParameterException->getDigestAlgorithm->if->params->getTrailerField->throw->new->InvalidAlgorithmParameterException->saltLen->params->getSaltLength->if->maxSaltLen->length->digestLen->intValue->if->println->println->if->throw->new->InvalidAlgorithmParameterException->else->if->println->try->new->CK_RSA_PKCS_PSS_PARAMS->setParameter->catch->throw->new->InvalidAlgorithmParameterException->finally
P11PSSSignature#engineInitVerify(PublicKey)::: p11 signature engine init verify:::if->throw->new->InvalidKeyException->if->checkKeySize->reset->P11KeyFactory->convertKey
P11PSSSignature#engineInitSign(PrivateKey)::: p11 signature engine init sign:::if->throw->new->InvalidKeyException->if->checkKeySize->reset->P11KeyFactory->convertKey
P11PSSSignature#engineUpdate(byte)::: p11 signature engine update:::ensureInitialized->engineUpdate
P11PSSSignature#engineUpdate(byte[], int, int)::: p11 signature engine update:::ensureInitialized->if->return->if->throw->new->ProviderException->switch->try->if->println->session->id->C_SignUpdate->else->println->session->id->C_VerifyUpdate->catch->reset->throw->new->ProviderException->finally->break->if->throw->new->ProviderException->md->update->break->throw->new->ProviderException
P11PSSSignature#engineUpdate(ByteBuffer)::: p11 signature engine update:::try->ensureInitialized->catch->throw->new->ProviderException->finally->len->byteBuffer->remaining->if->return->switch->if->super->engineUpdate->return->addr->address->ofs->byteBuffer->position->try->if->println->session->id->C_SignUpdate->else->println->session->id->C_VerifyUpdate->byteBuffer->position->catch->reset->throw->new->ProviderException->finally->break->if->throw->new->ProviderException->md->update->break->reset->throw->new->ProviderException
P11PSSSignature#engineSign()::: p11 signature engine sign:::ensureInitialized->doCancel->if->print->try->signature->if->if->println->session->id->C_SignFinal->else->if->throw->new->ProviderException->digest->md->digest->if->println->session->id->C_Sign->return->catch->throw->new->ProviderException->throw->finally->reset
P11PSSSignature#engineVerify(byte[])::: p11 signature engine verify:::ensureInitialized->doCancel->if->print->try->if->if->println->session->id->C_VerifyFinal->else->if->throw->new->ProviderException->digest->md->digest->if->println->session->id->C_Verify->return->catch->errorCode->pe->getErrorCode->if->return->if->return->if->return->throw->new->ProviderException->throw->finally->reset
P11PSSSignature#engineSetParameter(String, Object)::: p11 signature engine set parameter:::throw->new->UnsupportedOperationException
P11PSSSignature#engineSetParameter(AlgorithmParameterSpec)::: p11 signature engine set parameter:::if->throw->new->ProviderException->setSigParams->if->try->MessageDigest->sigParams->getDigestAlgorithm->getInstance->catch->throw->new->InvalidAlgorithmParameterException->finally
P11PSSSignature#engineGetParameter(String)::: p11 signature engine get parameter:::throw->new->UnsupportedOperationException
P11PSSSignature#engineGetParameters()::: p11 signature engine get parameters:::if->try->ap->AlgorithmParameters->getInstance->ap->init->return->catch->throw->new->RuntimeException->finally->return
P11RSACipher#engineSetMode(String)::: p11 cipher engine set mode:::if->mode->equalsIgnoreCase->throw->new->NoSuchAlgorithmException
P11RSACipher#engineSetPadding(String)::: p11 cipher engine set padding:::lowerPadding->padding->toLowerCase->if->lowerPadding->equals->else->if->lowerPadding->equals->else->throw->new->NoSuchPaddingException
P11RSACipher#engineGetBlockSize()::: p11 cipher engine get block size:::return
P11RSACipher#engineGetOutputSize(int)::: p11 cipher engine get output size:::return
P11RSACipher#engineGetIV()::: p11 cipher engine get v:::return
P11RSACipher#engineGetParameters()::: p11 cipher engine get parameters:::return
P11RSACipher#engineInit(int, Key, SecureRandom)::: p11 cipher engine init:::implInit
P11RSACipher#engineInit(int, Key, AlgorithmParameterSpec, SecureRandom)::: p11 cipher engine init:::if->if->throw->new->InvalidAlgorithmParameterException->implInit
P11RSACipher#engineInit(int, Key, AlgorithmParameters, SecureRandom)::: p11 cipher engine init:::if->throw->new->InvalidAlgorithmParameterException->implInit
P11RSACipher#implInit(int, Key)::: p11 cipher impl init:::reset->P11KeyFactory->convertKey->encrypt->if->else->if->else->if->if->p11Key->isPublic->throw->new->InvalidKeyException->return->else->if->if->p11Key->isPrivate->throw->new->InvalidKeyException->return->else->throw->new->InvalidKeyException->if->p11Key->isPublic->else->if->p11Key->isPrivate->else->throw->new->InvalidKeyException->n->p11Key->length->new->byteArr->try->initialize->catch->throw->new->InvalidKeyException->finally
P11RSACipher#reset(boolean)::: p11 cipher reset:::if->return->try->if->return->if->cancelOperation->catch->finally->p11Key->releaseKeyID->token->releaseSession
P11RSACipher#cancelOperation()::: p11 cipher cancel operation:::token->ensureValid->if->session->hasObjects->token->killSession->return->else->try->p11->inLen->outLen->sessId->session->id->switch->p11->C_Encrypt->break->p11->C_Decrypt->break->tmpBuffer->new->byteArr->p11->C_Sign->break->p11->C_VerifyRecover->break->throw->new->ProviderException->catch->finally
P11RSACipher#ensureInitialized()::: p11 cipher ensure initialized:::token->ensureValid->if->initialize
P11RSACipher#initialize()::: p11 cipher initialize:::if->throw->new->ProviderException->keyID->p11Key->getKeyID->try->if->token->getOpSession->p11->ckMechanism->new->CK_MECHANISM->switch->p11->session->id->C_EncryptInit->break->p11->session->id->C_DecryptInit->break->p11->session->id->C_SignInit->break->p11->session->id->C_VerifyRecoverInit->break->throw->new->AssertionError->catch->p11Key->releaseKeyID->token->releaseSession->throw->finally
P11RSACipher#implUpdate(byte[], int, int)::: p11 cipher impl update:::try->ensureInitialized->catch->throw->new->ProviderException->finally->if->return->if->return->System->arraycopy
P11RSACipher#implDoFinal(byte[], int, int)::: p11 cipher impl do final:::if->throw->new->IllegalBlockSizeException->try->ensureInitialized->p11->n->switch->p11->session->id->C_Encrypt->break->p11->session->id->C_Decrypt->break->tmpBuffer->new->byteArr->System->arraycopy->p11->session->id->C_Sign->if->throw->new->BadPaddingException->System->arraycopy->break->p11->session->id->C_VerifyRecover->break->throw->new->ProviderException->return->catch->throw->new->BadPaddingException->initCause->finally->reset
P11RSACipher#engineUpdate(byte[], int, int)::: p11 cipher engine update:::implUpdate->return
P11RSACipher#engineUpdate(byte[], int, int, byte[], int)::: p11 cipher engine update:::implUpdate->return
P11RSACipher#engineDoFinal(byte[], int, int)::: p11 cipher engine do final:::implUpdate->n->implDoFinal->out->new->byteArr->System->arraycopy->return
P11RSACipher#engineDoFinal(byte[], int, int, byte[], int)::: p11 cipher engine do final:::implUpdate->return->implDoFinal
P11RSACipher#doFinal()::: p11 cipher do final:::t->new->byteArr->n->implDoFinal->out->new->byteArr->System->arraycopy->return
P11RSACipher#engineWrap(Key)::: p11 cipher engine wrap:::keyAlg->key->getAlgorithm->sKey->try->P11SecretKeyFactory->convertKey->catch->toBeWrappedKey->key->getEncoded->if->throw->new->InvalidKeyException->implInit->implUpdate->try->return->doFinal->catch->throw->new->InvalidKeyException->finally->implInit->finally->s->p11KeyID->p11Key->getKeyID->sKeyID->sKey->getKeyID->try->token->getOpSession->return->s->id->new->CK_MECHANISM->C_WrapKey->catch->throw->new->InvalidKeyException->finally->p11Key->releaseKeyID->sKey->releaseKeyID->token->releaseSession
P11RSACipher#engineUnwrap(byte[], String, int)::: p11 cipher engine unwrap:::isTlsRsaPremasterSecret->algorithm->equals->failover->if->token->supportsRawSecretKeyImport->implInit->try->if->throw->new->InvalidKeyException->encoded->implUpdate->try->doFinal->catch->if->else->throw->new->InvalidKeyException->throw->new->InvalidKeyException->finally->if->if->throw->new->IllegalStateException->psps->KeyUtil->psps->getClientVersion->psps->getServerVersion->checkTlsPreMasterSecretKey->return->ConstructKeys->constructKey->catch->finally->implInit->else->s->secretKey->p11KeyID->p11Key->getKeyID->try->try->token->getObjSession->p11KeyType->P11SecretKeyFactory->getPKCS11KeyType->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->keyID->s->id->new->CK_MECHANISM->C_UnwrapKey->P11Key->secretKey->catch->if->else->throw->new->InvalidKeyException->finally->if->psps->psps->getClientVersion->psps->getServerVersion->polishPreMasterSecretKey->return->catch->finally->p11Key->releaseKeyID->token->releaseSession
P11RSACipher#engineGetKeySize(Key)::: p11 cipher engine get key size:::n->P11KeyFactory->convertKey->length->return
P11RSACipher#polishPreMasterSecretKey(Token, Session, Exception, SecretKey, int, int)::: p11 cipher polish pre master secret key:::newKey->version->new->CK_VERSION->try->attributes->token->new->CK_ATTRIBUTEArr->getAttributes->keyID->session->id->new->CK_MECHANISM->C_GenerateKey->P11Key->secretKey->catch->throw->new->ProviderException->finally->return
ConstructKeys#constructPublicKey(byte[], String):::Construct a public key from its encoding.:::try->keyFactory->KeyFactory->getInstance->keySpec->new->X509EncodedKeySpec->return->keyFactory->generatePublic->catch->throw->new->NoSuchAlgorithmException->throw->new->InvalidKeyException->finally
ConstructKeys#constructPrivateKey(byte[], String):::Construct a private key from its encoding.:::try->keyFactory->KeyFactory->getInstance->keySpec->new->PKCS8EncodedKeySpec->return->keyFactory->generatePrivate->catch->throw->new->NoSuchAlgorithmException->throw->new->InvalidKeyException->finally
ConstructKeys#constructSecretKey(byte[], String):::Construct a secret key from its encoding.:::return->new->SecretKeySpec
ConstructKeys#constructKey(byte[], String, int)::: construct keys construct key:::switch->return->constructSecretKey->return->constructPrivateKey->return->constructPublicKey->throw->new->InvalidKeyException
P11RSAKeyFactory#implTranslatePublicKey(PublicKey)::: p11 key factory impl translate public key:::try->if->rsaKey->return->rsaKey->getModulus->rsaKey->getPublicExponent->generatePublic->else->if->key->getFormat->equals->encoded->key->getEncoded->RSAPublicKeyImpl->newKey->return->implTranslatePublicKey->else->throw->new->InvalidKeyException->catch->throw->new->InvalidKeyException->finally
P11RSAKeyFactory#implTranslatePrivateKey(PrivateKey)::: p11 key factory impl translate private key:::try->if->rsaKey->return->rsaKey->getModulus->rsaKey->getPublicExponent->rsaKey->getPrivateExponent->rsaKey->getPrimeP->rsaKey->getPrimeQ->rsaKey->getPrimeExponentP->rsaKey->getPrimeExponentQ->rsaKey->getCrtCoefficient->generatePrivate->else->if->rsaKey->return->rsaKey->getModulus->rsaKey->getPrivateExponent->generatePrivate->else->if->key->getFormat->equals->encoded->key->getEncoded->newKey->return->implTranslatePrivateKey->else->throw->new->InvalidKeyException->catch->throw->new->InvalidKeyException->finally
P11RSAKeyFactory#engineGeneratePublic(KeySpec)::: p11 key factory engine generate public:::token->ensureValid->if->try->encoded->getEncoded->key->RSAPublicKeyImpl->newKey->return->implTranslatePublicKey->catch->throw->new->InvalidKeySpecException->finally->if->throw->new->InvalidKeySpecException->try->rs->return->rs->getModulus->rs->getPublicExponent->generatePublic->catch->throw->new->InvalidKeySpecException->finally
P11RSAKeyFactory#engineGeneratePrivate(KeySpec)::: p11 key factory engine generate private:::token->ensureValid->if->try->encoded->getEncoded->key->newKey->return->implTranslatePrivateKey->catch->throw->new->InvalidKeySpecException->finally->try->if->rs->return->rs->getModulus->rs->getPublicExponent->rs->getPrivateExponent->rs->getPrimeP->rs->getPrimeQ->rs->getPrimeExponentP->rs->getPrimeExponentQ->rs->getCrtCoefficient->generatePrivate->else->if->rs->return->rs->getModulus->rs->getPrivateExponent->generatePrivate->else->throw->new->InvalidKeySpecException->catch->throw->new->InvalidKeySpecException->finally
P11RSAKeyFactory#generatePublic(BigInteger, BigInteger)::: p11 key factory generate public:::RSAKeyFactory->n->bitLength->checkKeyLengths->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->session->try->token->getObjSession->keyID->session->id->C_CreateObject->return->P11Key->n->bitLength->publicKey->catch->finally->token->releaseSession
P11RSAKeyFactory#generatePrivate(BigInteger, BigInteger)::: p11 key factory generate private:::RSAKeyFactory->n->bitLength->checkKeyLengths->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->session->try->token->getObjSession->keyID->session->id->C_CreateObject->return->P11Key->n->bitLength->privateKey->catch->finally->token->releaseSession
P11RSAKeyFactory#generatePrivate(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger)::: p11 key factory generate private:::RSAKeyFactory->n->bitLength->checkKeyLengths->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->session->try->token->getObjSession->keyID->session->id->C_CreateObject->return->P11Key->n->bitLength->privateKey->catch->finally->token->releaseSession
P11RSAKeyFactory#implGetPublicKeySpec(P11Key, Class, Session[])::: p11 key factory impl get public key spec:::if->isAssignableFrom->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->keyID->key->getKeyID->try->id->C_GetAttributeValue->catch->finally->key->releaseKeyID->spec->getBigInteger->getBigInteger->new->RSAPublicKeySpec->return->keySpec->cast->else->throw->new->InvalidKeySpecException
P11RSAKeyFactory#implGetPrivateKeySpec(P11Key, Class, Session[])::: p11 key factory impl get private key spec:::if->isAssignableFrom->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->keyID->key->getKeyID->try->id->C_GetAttributeValue->catch->finally->key->releaseKeyID->spec->getBigInteger->getBigInteger->getBigInteger->getBigInteger->getBigInteger->getBigInteger->getBigInteger->getBigInteger->new->RSAPrivateCrtKeySpec->return->keySpec->cast->else->if->isAssignableFrom->token->getObjSession->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->keyID->key->getKeyID->try->id->C_GetAttributeValue->catch->finally->key->releaseKeyID->spec->getBigInteger->getBigInteger->new->RSAPrivateKeySpec->return->keySpec->cast->else->throw->new->InvalidKeySpecException
P11RSAKeyFactory#implGetSoftwareFactory()::: p11 key factory impl get software factory:::return->KeyFactory->P11Util->getSunRsaSignProvider->getInstance
P11SecretKeyFactory#addKeyType(String, long)::: p11 secret key factory add key type:::l->Long->valueOf->keyTypes->put->keyTypes->name->toUpperCase->put
P11SecretKeyFactory#getPKCS11KeyType(String)::: p11 secret key factory get s11 key type:::kt->getKeyType->if->return
P11SecretKeyFactory#getKeyType(String)::: p11 secret key factory get key type:::l->keyTypes->get->if->algorithm->toUpperCase->keyTypes->get->if->if->algorithm->startsWith->return->else->if->algorithm->startsWith->return->return->l->longValue
P11SecretKeyFactory#convertKey(Token, Key, String):::Convert an arbitrary key of algorithm into a P11Key of provider:::return->convertKey
P11SecretKeyFactory#convertKey(Token, Key, String, CK_ATTRIBUTE[]):::Convert an arbitrary key of algorithm w/ custom attributes into a P11Key of provider:::token->ensureValid->if->throw->new->InvalidKeyException->if->throw->new->InvalidKeyException->algoType->if->key->getAlgorithm->getKeyType->else->getKeyType->keyAlgorithmType->key->getAlgorithm->getKeyType->if->if->else->throw->new->InvalidKeyException->if->p11Key->if->if->newP11Key->session->p11KeyID->p11Key->getKeyID->try->token->getObjSession->newKeyID->session->id->C_CopyObject->P11Key->secretKey->catch->throw->new->InvalidKeyException->finally->p11Key->releaseKeyID->token->releaseSession->return->p11Key->get->if->return->if->key->getFormat->equalsIgnoreCase->throw->new->InvalidKeyException->encoded->key->getEncoded->createKey->put->return
P11SecretKeyFactory#fixDESParity(byte[], int)::: p11 secret key factory fix parity:::for->i
P11SecretKeyFactory#createKey(Token, byte[], String, long, CK_ATTRIBUTE[])::: p11 secret key factory create key:::n->keyLength->try->switch->P11KeyGenerator->checkKeySize->fixDESParity->break->P11KeyGenerator->checkKeySize->fixDESParity->fixDESParity->if->else->fixDESParity->break->P11KeyGenerator->checkKeySize->break->P11KeyGenerator->checkKeySize->break->P11KeyGenerator->checkKeySize->break->break->if->throw->new->InvalidKeyException->break->throw->new->InvalidKeyException->catch->throw->new->InvalidKeyException->throw->new->InvalidKeyException->finally->session->try->attributes->if->new->CK_ATTRIBUTEArr->System->arraycopy->else->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->token->getAttributes->token->getObjSession->keyID->session->id->C_CreateObject->p11Key->P11Key->secretKey->return->catch->throw->new->InvalidKeyException->finally->token->releaseSession
P11SecretKeyFactory#engineGenerateSecret(KeySpec)::: p11 secret key factory engine generate secret:::token->ensureValid->if->throw->new->InvalidKeySpecException->if->try->key->convertKey->return->catch->throw->new->InvalidKeySpecException->finally->else->if->algorithm->equalsIgnoreCase->if->keyBytes->getKey->new->SecretKeySpec->return->engineGenerateSecret->else->if->algorithm->equalsIgnoreCase->if->keyBytes->getKey->new->SecretKeySpec->return->engineGenerateSecret->throw->keySpec->getClass->getName->new->InvalidKeySpecException
P11SecretKeyFactory#getKeyBytes(SecretKey)::: p11 secret key factory get key bytes:::try->engineTranslateKey->if->key->getFormat->equalsIgnoreCase->throw->new->InvalidKeySpecException->k->key->getEncoded->return->catch->throw->new->InvalidKeySpecException->finally
P11SecretKeyFactory#engineGetKeySpec(SecretKey, Class)::: p11 secret key factory engine get key spec:::token->ensureValid->if->throw->new->InvalidKeySpecException->if->isAssignableFrom->return->getKeyBytes->new->SecretKeySpec->else->if->algorithm->equalsIgnoreCase->try->if->isAssignableFrom->return->getKeyBytes->new->DESKeySpec->catch->throw->new->InvalidKeySpecException->finally->else->if->algorithm->equalsIgnoreCase->try->if->isAssignableFrom->return->getKeyBytes->new->DESedeKeySpec->catch->throw->new->InvalidKeySpecException->finally->throw->keySpec->getName->new->InvalidKeySpecException
P11SecretKeyFactory#engineTranslateKey(SecretKey)::: p11 secret key factory engine translate key:::return->convertKey
P11SecureRandom#engineSetSeed(byte[])::: p11 secure random engine set seed:::if->throw->new->NullPointerException->session->try->token->getOpSession->session->id->C_SeedRandom->catch->random->if->random->setSeed->else->try->new->byteArr->SecureRandom->getInstance->random->setSeed->catch->throw->new->ProviderException->finally->finally->token->releaseSession
P11SecureRandom#engineNextBytes(byte[])::: p11 secure random engine next bytes:::if->return->if->ofs->synchronized->while->time->System->currentTimeMillis->if->implNextBytes->while->else->implNextBytes
P11SecureRandom#engineGenerateSeed(int)::: p11 secure random engine generate seed:::b->new->byteArr->engineNextBytes->return
P11SecureRandom#mix(byte[])::: p11 secure random mix:::random->if->return->synchronized->ofs->len->while->if->random->nextBytes
P11SecureRandom#implNextBytes(byte[])::: p11 secure random impl next bytes:::session->try->token->getOpSession->session->id->C_GenerateRandom->mix->catch->throw->new->ProviderException->finally->token->releaseSession
P11SecureRandom#readObject(ObjectInputStream)::: p11 secure random read object:::in->defaultReadObject->new->byteArr
P11Signature#reset(boolean)::: p11 signature reset:::if->return->try->if->return->if->cancelOperation->catch->finally->p11Key->releaseKeyID->token->releaseSession
P11Signature#cancelOperation()::: p11 signature cancel operation:::token->ensureValid->if->session->hasObjects->token->killSession->return->else->if->try->if->session->id->C_SignFinal->else->digest->if->md->digest->else->session->id->C_Sign->catch->throw->new->ProviderException->finally->else->signature->try->if->keyAlgorithm->equals->new->byteArr->else->p11Key->length->new->byteArr->if->session->id->C_VerifyFinal->else->digest->if->md->digest->else->session->id->C_Verify->catch->errorCode->e->getErrorCode->if->return->throw->new->ProviderException->finally
P11Signature#ensureInitialized()::: p11 signature ensure initialized:::if->initialize
P11Signature#initialize()::: p11 signature initialize:::if->throw->new->ProviderException->keyID->p11Key->getKeyID->try->token->ensureValid->if->token->getOpSession->if->session->id->new->CK_MECHANISM->C_SignInit->else->session->id->new->CK_MECHANISM->C_VerifyInit->catch->p11Key->releaseKeyID->token->releaseSession->throw->new->ProviderException->finally->if->if->md->reset
P11Signature#checkKeySize(String, Key)::: p11 signature check key size:::mechInfo->try->token->getMechanismInfo->catch->finally->if->return->minKeySize->maxKeySize->if->keySize->if->length->else->try->if->keyAlgo->equals->getModulus->bitLength->else->if->keyAlgo->equals->getParams->getP->bitLength->else->if->keyAlgo->equals->getParams->getCurve->getField->getFieldSize->else->throw->new->ProviderException->catch->throw->new->InvalidKeyException->finally->if->throw->new->InvalidKeyException->if->throw->new->InvalidKeyException->if->keyAlgo->equals->checkRSAKeyLength
P11Signature#checkRSAKeyLength(int)::: p11 signature check key length:::padding->try->RSAPadding->getInstance->catch->throw->iape->getMessage->new->InvalidKeyException->finally->maxDataSize->padding->getMaxDataSize->encodedLength->if->algorithm->equals->algorithm->equals->else->if->algorithm->equals->else->if->algorithm->equals->else->if->algorithm->equals->else->if->algorithm->equals->else->if->algorithm->equals->else->throw->new->ProviderException->if->throw->new->InvalidKeyException
P11Signature#engineInitVerify(PublicKey)::: p11 signature engine init verify:::if->throw->new->InvalidKeyException->if->checkKeySize->reset->P11KeyFactory->convertKey->initialize
P11Signature#engineInitSign(PrivateKey)::: p11 signature engine init sign:::if->throw->new->InvalidKeyException->if->checkKeySize->reset->P11KeyFactory->convertKey->initialize
P11Signature#engineUpdate(byte)::: p11 signature engine update:::ensureInitialized->switch->engineUpdate->break->md->update->break->if->return->break->throw->new->ProviderException
P11Signature#engineUpdate(byte[], int, int)::: p11 signature engine update:::ensureInitialized->if->return->if->throw->new->ProviderException->switch->try->if->session->id->C_SignUpdate->else->session->id->C_VerifyUpdate->catch->reset->throw->new->ProviderException->finally->break->md->update->break->if->return->System->arraycopy->break->throw->new->ProviderException
P11Signature#engineUpdate(ByteBuffer)::: p11 signature engine update:::ensureInitialized->len->byteBuffer->remaining->if->return->switch->if->super->engineUpdate->return->addr->address->ofs->byteBuffer->position->try->if->session->id->C_SignUpdate->else->session->id->C_VerifyUpdate->byteBuffer->position->catch->reset->throw->new->ProviderException->finally->break->md->update->break->if->return->byteBuffer->get->break->reset->throw->new->ProviderException
P11Signature#engineSign()::: p11 signature engine sign:::ensureInitialized->doCancel->try->signature->if->len->keyAlgorithm->equals->session->id->C_SignFinal->else->digest->if->md->digest->else->if->if->throw->new->SignatureException->else->if->throw->new->SignatureException->new->byteArr->System->arraycopy->if->keyAlgorithm->equals->session->id->C_Sign->else->data->encodeSignature->if->pkcs1Pad->session->id->C_Sign->if->keyAlgorithm->equals->return->else->if->return->else->return->dsaToASN1->catch->throw->new->ProviderException->throw->finally->reset
P11Signature#engineVerify(byte[])::: p11 signature engine verify:::ensureInitialized->doCancel->try->if->if->keyAlgorithm->equals->asn1ToDSA->else->if->keyAlgorithm->equals->asn1ToECDSA->if->session->id->C_VerifyFinal->else->digest->if->md->digest->else->if->if->throw->new->SignatureException->else->if->throw->new->SignatureException->new->byteArr->System->arraycopy->if->keyAlgorithm->equals->session->id->C_Verify->else->data->encodeSignature->if->pkcs1Pad->session->id->C_Verify->return->catch->errorCode->pe->getErrorCode->if->return->if->return->if->return->throw->new->ProviderException->throw->finally->reset
P11Signature#pkcs1Pad(byte[])::: p11 signature pkcs1 pad:::try->len->p11Key->length->padding->RSAPadding->getInstance->padded->padding->pad->return->catch->throw->new->ProviderException->finally
P11Signature#encodeSignature(byte[])::: p11 signature encode signature:::try->return->RSASignature->encodeSignature->catch->throw->new->SignatureException->finally
P11Signature#dsaToASN1(byte[])::: p11 signature dsa to n1:::n->r->P11Util->subarray->new->BigInteger->s->P11Util->subarray->new->BigInteger->try->outseq->new->DerOutputStream->outseq->putInteger->outseq->putInteger->result->outseq->toByteArray->new->DerValue->return->result->toByteArray->catch->throw->new->RuntimeException->finally
P11Signature#asn1ToDSA(byte[])::: p11 signature asn1 to a:::try->in->new->DerInputStream->values->in->getSequence->if->in->available->throw->new->IOException->r->getPositiveBigInteger->s->getPositiveBigInteger->br->toByteArray->bs->toByteArray->if->throw->new->SignatureException->return->P11Util->concat->catch->throw->throw->new->SignatureException->finally
P11Signature#asn1ToECDSA(byte[])::: p11 signature asn1 to a:::try->in->new->DerInputStream->values->in->getSequence->if->in->available->throw->new->IOException->r->getPositiveBigInteger->s->getPositiveBigInteger->br->KeyUtil->r->toByteArray->trimZeroes->bs->KeyUtil->s->toByteArray->trimZeroes->k->Math->max->res->new->byteArr->System->arraycopy->System->arraycopy->return->catch->throw->new->SignatureException->finally
P11Signature#toByteArray(BigInteger, int)::: p11 signature to byte array:::b->bi->toByteArray->n->if->return->if->t->new->byteArr->System->arraycopy->return->if->return->t->new->byteArr->System->arraycopy->return
P11Signature#engineSetParameter(String, Object)::: p11 signature engine set parameter:::throw->new->UnsupportedOperationException
P11Signature#engineSetParameter(AlgorithmParameterSpec)::: p11 signature engine set parameter:::if->throw->new->InvalidAlgorithmParameterException
P11Signature#engineGetParameter(String)::: p11 signature engine get parameter:::throw->new->UnsupportedOperationException
P11Signature#engineGetParameters()::: p11 signature engine get parameters:::return
P11TlsKeyMaterialGenerator#engineInit(SecureRandom)::: p11 tls key material generator engine init:::throw->new->InvalidParameterException
P11TlsKeyMaterialGenerator#engineInit(AlgorithmParameterSpec, SecureRandom)::: p11 tls key material generator engine init:::if->throw->new->InvalidAlgorithmParameterException->spec->spec->getMajorVersion->spec->getMinorVersion->if->throw->new->InvalidAlgorithmParameterException->try->P11SecretKeyFactory->spec->getMasterSecret->convertKey->catch->throw->new->InvalidAlgorithmParameterException->finally->if->else->if
P11TlsKeyMaterialGenerator#engineInit(int, SecureRandom)::: p11 tls key material generator engine init:::throw->new->InvalidParameterException
P11TlsKeyMaterialGenerator#engineGenerateKey()::: p11 tls key material generator engine generate key:::if->throw->new->IllegalStateException->macBits->spec->getMacKeyLength->ivBits->spec->getIvLength->expandedKeyBits->spec->getExpandedCipherKeyLength->keyBits->spec->getCipherKeyLength->isExportable->if->else->random->spec->getClientRandom->spec->getServerRandom->new->CK_SSL3_RANDOM_DATA->params->ckMechanism->if->new->CK_SSL3_KEY_MAT_PARAMS->new->CK_MECHANISM->else->if->Functions->spec->getPRFHashAlg->getHashMechId->new->CK_TLS12_KEY_MAT_PARAMS->new->CK_MECHANISM->cipherAlgorithm->spec->getCipherAlgorithm->keyType->P11SecretKeyFactory->getKeyType->if->if->throw->spec->getCipherAlgorithm->new->ProviderException->else->session->try->token->getObjSession->attributes->if->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->else->new->CK_ATTRIBUTEArr->token->getAttributes->p11KeyID->p11Key->getKeyID->try->session->id->C_DeriveKey->catch->finally->p11Key->releaseKeyID->out->if->else->if->clientMacKey->serverMacKey->if->P11Key->secretKey->P11Key->secretKey->else->clientCipherKey->serverCipherKey->if->P11Key->secretKey->P11Key->secretKey->else->clientIv->new->IvParameterSpec->serverIv->new->IvParameterSpec->return->new->TlsKeyMaterialSpec->catch->throw->new->ProviderException->finally->token->releaseSession
P11TlsMasterSecretGenerator#engineInit(SecureRandom)::: p11 tls master secret generator engine init:::throw->new->InvalidParameterException
P11TlsMasterSecretGenerator#engineInit(AlgorithmParameterSpec, SecureRandom)::: p11 tls master secret generator engine init:::if->throw->new->InvalidAlgorithmParameterException->spec->spec->getMajorVersion->spec->getMinorVersion->if->throw->new->InvalidAlgorithmParameterException->key->spec->getPremasterSecret->try->P11SecretKeyFactory->convertKey->catch->throw->new->InvalidAlgorithmParameterException->finally->isTlsRsaPremasterSecret->p11Key->getAlgorithm->equals->if->else->if->else->if->if->new->CK_VERSION->else
P11TlsMasterSecretGenerator#engineInit(int, SecureRandom)::: p11 tls master secret generator engine init:::throw->new->InvalidParameterException
P11TlsMasterSecretGenerator#engineGenerateKey()::: p11 tls master secret generator engine generate key:::if->throw->new->IllegalStateException->clientRandom->spec->getClientRandom->serverRandom->spec->getServerRandom->random->new->CK_SSL3_RANDOM_DATA->ckMechanism->if->params->new->CK_SSL3_MASTER_KEY_DERIVE_PARAMS->new->CK_MECHANISM->else->if->params->Functions->spec->getPRFHashAlg->getHashMechId->new->CK_TLS12_MASTER_KEY_DERIVE_PARAMS->new->CK_MECHANISM->session->p11KeyID->p11Key->getKeyID->try->token->getObjSession->attributes->token->new->CK_ATTRIBUTEArr->getAttributes->keyID->session->id->C_DeriveKey->major->minor->if->else->return->P11Key->masterSecretKey->catch->throw->new->ProviderException->finally->p11Key->releaseKeyID->token->releaseSession
P11TlsPrfGenerator#engineInit(SecureRandom)::: p11 tls prf generator engine init:::throw->new->InvalidParameterException
P11TlsPrfGenerator#engineInit(AlgorithmParameterSpec, SecureRandom)::: p11 tls prf generator engine init:::if->throw->new->InvalidAlgorithmParameterException->key->spec->getSecret->if->try->P11SecretKeyFactory->convertKey->catch->throw->new->InvalidAlgorithmParameterException->finally
P11TlsPrfGenerator#engineInit(int, SecureRandom)::: p11 tls prf generator engine init:::throw->new->InvalidParameterException
P11TlsPrfGenerator#engineGenerateKey()::: p11 tls prf generator engine generate key:::if->throw->new->IllegalStateException->seed->spec->getSeed->if->k->ulServerOrClient->if->spec->getLabel->equals->if->spec->getLabel->equals->if->params->Functions->spec->getPRFHashAlg->getHashMechId->spec->getOutputLength->new->CK_TLS_MAC_PARAMS->session->keyID->p11Key->getKeyID->try->token->getOpSession->session->id->new->CK_MECHANISM->C_SignInit->session->id->C_SignUpdate->out->session->id->spec->getOutputLength->C_SignFinal->return->new->SecretKeySpec->catch->throw->new->ProviderException->finally->p11Key->releaseKeyID->token->releaseSession->else->throw->new->ProviderException->label->P11Util->spec->getLabel->getBytesUTF8->if->session->keyID->p11Key->getKeyID->try->token->getOpSession->session->id->new->CK_MECHANISM->C_SignInit->session->id->C_SignUpdate->session->id->C_SignUpdate->out->session->id->spec->getOutputLength->C_SignFinal->return->new->SecretKeySpec->catch->throw->new->ProviderException->finally->p11Key->releaseKeyID->token->releaseSession->out->spec->getOutputLength->new->byteArr->params->new->CK_TLS_PRF_PARAMS->session->keyID->p11Key->getKeyID->try->token->getOpSession->session->id->new->CK_MECHANISM->C_DeriveKey->return->new->SecretKeySpec->catch->throw->new->ProviderException->finally->p11Key->releaseKeyID->token->releaseSession
P11TlsRsaPremasterSecretGenerator#engineInit(SecureRandom)::: p11 tls rsa premaster secret generator engine init:::throw->new->InvalidParameterException
P11TlsRsaPremasterSecretGenerator#engineInit(AlgorithmParameterSpec, SecureRandom)::: p11 tls rsa premaster secret generator engine init:::if->throw->new->InvalidAlgorithmParameterException->spec->tlsVersion->spec->getMajorVersion->spec->getMinorVersion->if->throw->new->InvalidAlgorithmParameterException
P11TlsRsaPremasterSecretGenerator#engineInit(int, SecureRandom)::: p11 tls rsa premaster secret generator engine init:::throw->new->InvalidParameterException
P11TlsRsaPremasterSecretGenerator#engineGenerateKey()::: p11 tls rsa premaster secret generator engine generate key:::if->throw->new->IllegalStateException->version->spec->getMajorVersion->spec->getMinorVersion->new->CK_VERSION->session->try->token->getObjSession->attributes->token->new->CK_ATTRIBUTEArr->getAttributes->keyID->session->id->new->CK_MECHANISM->C_GenerateKey->key->P11Key->secretKey->return->catch->throw->new->ProviderException->finally->token->releaseSession
P11Util#getSunProvider()::: p11 util get sun provider:::p->if->synchronized->getProvider->return
P11Util#getSunRsaSignProvider()::: p11 util get sun rsa sign provider:::p->if->synchronized->getProvider->return
P11Util#getSunJceProvider()::: p11 util get sun jce provider:::p->if->synchronized->getProvider->return
P11Util#getProvider(Provider, String, String)::: p11 util get provider:::if->return->Security->getProvider->if->try->o->Class->forName->newInstance->catch->throw->new->ProviderException->finally->return
P11Util#convert(byte[], int, int)::: p11 util convert:::if->return->else->t->new->byteArr->System->arraycopy->return
P11Util#subarray(byte[], int, int)::: p11 util subarray:::out->new->byteArr->System->arraycopy->return
P11Util#concat(byte[], byte[])::: p11 util concat:::b->new->byteArr->System->arraycopy->System->arraycopy->return
P11Util#concat(long[], long[])::: p11 util concat:::if->return->b->new->longArr->System->arraycopy->System->arraycopy->return
P11Util#getMagnitude(BigInteger)::: p11 util get magnitude:::b->bi->toByteArray->if->n->newarray->new->byteArr->System->arraycopy->return
P11Util#getBytesUTF8(String)::: p11 util get bytes f8:::try->return->s->getBytes->catch->throw->new->RuntimeException->finally
P11Util#sha1(byte[])::: p11 util sha1:::try->md->MessageDigest->getInstance->md->update->return->md->digest->catch->throw->new->ProviderException->finally
P11Util#toString(byte[])::: p11 util to string:::if->return->sb->new->StringBuilder->for->i->return->sb->toString
Secmod#getInstance():::Return the singleton Secmod instance.:::return
Secmod#isLoaded()::: secmod is loaded:::if->System->mapLibraryName->nssGetLibraryHandle->if->fetchVersions->return
Secmod#fetchVersions()::: secmod fetch versions:::nssVersionCheck
Secmod#isInitialized():::Test whether this Secmod has been initialized:::if->isLoaded->return->if->throw->new->IOException->return
Secmod#getConfigDir()::: secmod get config dir:::return
Secmod#getLibDir()::: secmod get lib dir:::return
Secmod#initialize(String, String):::Initialize this Secmod.:::initialize
Secmod#initialize(DbMode, String, String)::: secmod initialize:::initialize
Secmod#initialize(DbMode, String, String, boolean)::: secmod initialize:::if->isInitialized->throw->new->IOException->if->throw->new->NullPointerException->if->throw->new->NullPointerException->platformLibName->System->mapLibraryName->platformPath->if->else->base->new->File->if->base->isDirectory->throw->new->IOException->platformFile->new->File->if->platformFile->isFile->throw->platformFile->getPath->new->FileNotFoundException->platformFile->getPath->if->configDirPath->sqlPrefix->if->configDir->startsWith->else->configDirPathSB->new->StringBuilder->configDirPathSB->sqlPrefix->length->substring->configBase->new->File->if->configBase->isDirectory->throw->new->IOException->if->configDir->startsWith->secmodFile->new->File->if->secmodFile->isFile->throw->secmodFile->getPath->new->FileNotFoundException->if->println->nssLoadLibrary->if->println->fetchVersions->if->throw->new->IOException->if->println->initok->nssInitialize->if->println->if->throw->new->IOException
Secmod#getModules():::Return an immutable list of all available modules.:::try->if->isInitialized->throw->new->IllegalStateException->catch->throw->new->IllegalStateException->finally->if->modules->nssGetModuleList->Collections->unmodifiableList->return
Secmod#getDigest(X509Certificate, String)::: secmod get digest:::try->md->MessageDigest->getInstance->return->md->cert->getEncoded->digest->catch->throw->new->ProviderException->finally
Secmod#isTrusted(X509Certificate, TrustType)::: secmod is trusted:::bytes->getDigest->new->Bytes->attr->getModuleTrust->if->getModuleTrust->if->getModuleTrust->return->attr->isTrusted
Secmod#getModuleTrust(ModuleType, Bytes)::: secmod get module trust:::module->getModule->t->module->getTrust->return
Secmod#getModule(ModuleType):::Returns the first module of the specified type:::foreach->getModules->if->module->getType->return->return
Secmod.Module#initConfiguration()::: module init configuration:::switch->String->format->break->String->format->break->String->format->break->String->format->break->String->format->break->throw->new->RuntimeException
Secmod.Module#getConfiguration():::Get the configuration for this module:::return
Secmod.Module#setConfiguration(String):::Set the configuration for this module.:::if->throw->new->IllegalStateException
Secmod.Module#getLibraryName():::Return the pathname of the native library that implements this module:::return
Secmod.Module#getType():::Returns the type of this module.:::return
Secmod.Module#getProvider():::Returns the provider instance that is associated with this module:::if->newProvider->return
Secmod.Module#hasInitializedProvider()::: module has initialized provider:::return
Secmod.Module#setProvider(SunPKCS11)::: module set provider:::if->throw->new->ProviderException
Secmod.Module#newProvider()::: module new provider:::try->return->new->Config->new->SunPKCS11->catch->throw->new->ProviderException->finally
Secmod.Module#setTrust(Token, X509Certificate)::: module set trust:::bytes->getDigest->new->Bytes->attr->getTrust->if->new->TrustAttributes->trust->put->else->if->attr->isTrusted->throw->new->ProviderException
Secmod.Module#getTrust(Bytes)::: module get trust:::if->synchronized->p->if->newProvider->try->Secmod->getTrust->catch->throw->new->RuntimeException->finally->return->trust->get
Secmod.Module#toString()::: module to string:::return
Secmod.KeyStoreLoadParameter#getProtectionParameter()::: key store load parameter get protection parameter:::return
Secmod.KeyStoreLoadParameter#getTrustType()::: key store load parameter get trust type:::return
Secmod.TrustAttributes#getHash()::: trust attributes get hash:::return->new->Bytes
Secmod.TrustAttributes#isTrusted(TrustType)::: trust attributes is trusted:::switch->return->isTrusted->return->isTrusted->return->isTrusted->return->isTrusted->return->isTrusted->isTrusted->isTrusted->isTrusted->return
Secmod.TrustAttributes#isTrusted(long)::: trust attributes is trusted:::return
Secmod.Bytes#hashCode()::: bytes hash code:::return->Arrays->hashCode
Secmod.Bytes#equals(Object)::: bytes equals:::if->return->if->return->other->return->Arrays->equals
Secmod#getTrust(SunPKCS11)::: secmod get trust:::trustMap->new->HashMap<Bytes,TrustAttributes>->token->provider->getToken->session->exceptionOccurred->try->token->getOpSession->MAX_NUM->attrs->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->session->id->C_FindObjectsInit->handles->session->id->C_FindObjects->session->id->C_FindObjectsFinal->if->println->foreach->try->trust->new->TrustAttributes->trustMap->trust->getHash->put->catch->finally->catch->finally->if->token->killSession->else->token->releaseSession->return
Secmod#nssGetLibraryHandle(String)::: secmod nss get library handle:::
Secmod#nssLoadLibrary(String)::: secmod nss load library:::
Secmod#nssVersionCheck(long, String)::: secmod nss version check:::
Secmod#nssInitialize(String, long, String, boolean)::: secmod nss initialize:::
Secmod#nssGetModuleList(long, String)::: secmod nss get module list:::
Session#compareTo(Session)::: session compare to:::if->return->else->return
Session#isLive(long)::: session is live:::return
Session#idInternal()::: session id internal:::return
Session#id()::: session id:::if->token->isPresent->throw->new->ProviderException->System->currentTimeMillis->return
Session#addObject()::: session add object:::n->createdObjects->incrementAndGet
Session#removeObject()::: session remove object:::n->createdObjects->decrementAndGet->if->demoteObjSession->else->if->throw->new->ProviderException
Session#hasObjects()::: session has objects:::return->createdObjects->get
Session#close()::: session close:::if->hasObjects->throw->new->ProviderException->sessionRef->dispose
SessionRef#referenceQueue()::: session ref reference queue:::return
SessionRef#totalCount()::: session ref total count:::return->refList->size
SessionRef#drainRefQueueBounded()::: session ref drain ref queue bounded:::while->next->refQueue->poll->if->break->next->dispose
SessionRef#dispose()::: session ref dispose:::refList->remove->try->if->token->isPresent->C_CloseSession->catch->finally->this->clear
SessionRef#compareTo(SessionRef)::: session ref compare to:::if->return->else->return
SessionManager#lowMaxSessions()::: session manager low max sessions:::return
SessionManager#getObjSession()::: session manager get obj session:::session->objSessions->poll->if->return->ensureValid->opSessions->poll->if->return->ensureValid->openSession->return->ensureValid
SessionManager#getOpSession()::: session manager get op session:::session->opSessions->poll->if->return->ensureValid->if->activeSessions->get->openSession->return->ensureValid->objSessions->poll->if->return->ensureValid->throw->new->ProviderException
SessionManager#ensureValid(Session)::: session manager ensure valid:::session->id->return
SessionManager#killSession(Session)::: session manager kill session:::if->token->isValid->return->if->location->new->Exception->getStackTrace->toString->activeSessions->get->println->closeSession->return
SessionManager#releaseSession(Session)::: session manager release session:::if->token->isValid->return->if->session->hasObjects->objSessions->release->else->opSessions->release->return
SessionManager#demoteObjSession(Session)::: session manager demote obj session:::if->token->isValid->return->if->activeSessions->get->println->present->objSessions->remove->if->return->opSessions->release
SessionManager#openSession()::: session manager open session:::if->activeSessions->get->throw->new->ProviderException->id->C_OpenSession->session->new->Session->activeSessions->incrementAndGet->if->synchronized->if->activeSessions->get->activeSessions->get->if->println->return
SessionManager#closeSession(Session)::: session manager close session:::session->close->activeSessions->decrementAndGet
SessionManager.Pool#remove(Session)::: pool remove:::return->pool->remove
SessionManager.Pool#poll()::: pool poll:::return->pool->poll
SessionManager.Pool#release(Session)::: pool release:::if->pool->offer->mgr->closeSession->free
SessionManager.Pool#free()::: pool free:::n->i->oldestSession->time->System->currentTimeMillis->do->pool->peek->if->oldestSession->isLive->pool->remove->break->mgr->closeSession->while->if->println
SunPKCS11#getToken()::: sun s11 get token:::return
SunPKCS11#configure(String)::: sun s11 configure:::newConfigName->checkNull->try->return->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->ipe->new->InvalidParameterException->throw->ipe->pae->getException->initCause->finally
SunPKCS11#isConfigured()::: sun s11 is configured:::return
SunPKCS11#checkNull(T)::: sun s11 check null:::if->throw->new->NullPointerException->return
SunPKCS11#toString(long[])::: sun s11 to string:::if->return->sb->new->StringBuilder->sb->append->for->i->return->sb->toString
SunPKCS11#equals(Object)::: sun s11 equals:::return
SunPKCS11#hashCode()::: sun s11 hash code:::return->System->identityHashCode
SunPKCS11#s(String...)::: sun s11 s:::return
SunPKCS11.Descriptor#service(Token, int)::: descriptor service:::return->new->P11Service
SunPKCS11.Descriptor#toString()::: descriptor to string:::return
SunPKCS11#m(long)::: sun s11 m:::return->new->intArr
SunPKCS11#m(long, long)::: sun s11 m:::return->new->intArr
SunPKCS11#m(long, long, long)::: sun s11 m:::return->new->intArr
SunPKCS11#m(long, long, long, long)::: sun s11 m:::return->new->intArr
SunPKCS11#d d(String, String, String, int[])::: sun s11 d:::new->Descriptor->register
SunPKCS11#d d(String, String, String, String[], int[])::: sun s11 d:::new->Descriptor->register
SunPKCS11#register(Descriptor)::: sun s11 register:::for->i
SunPKCS11.TokenPoller#run()::: token poller run:::interval->getInsertionCheckInterval->while->try->Thread->sleep->catch->break->finally->if->break->try->provider->initToken->catch->finally
SunPKCS11.TokenPoller#disable()::: token poller disable:::
SunPKCS11#createPoller()::: sun s11 create poller:::if->return->poller->new->TokenPoller->t->getName->new->Thread->t->setContextClassLoader->t->setDaemon->t->setPriority->t->start
SunPKCS11#destroyPoller()::: sun s11 destroy poller:::if->poller->disable
SunPKCS11#hasValidToken()::: sun s11 has valid token:::token->return->token->isValid
SunPKCS11#uninitToken(Token)::: sun s11 uninit token:::if->return->destroyPoller->AccessController->new->PrivilegedAction<Object>->doPrivileged->createPoller
SunPKCS11#isLegacy(CK_MECHANISM_INFO)::: sun s11 is legacy:::partialSupport->if->if->if->return
SunPKCS11#initToken(CK_SLOT_INFO)::: sun s11 init token:::if->p11->C_GetSlotInfo->if->createPoller->return->destroyPoller->showInfo->config->getShowInfo->if->println->println->token->new->Token->if->println->println->supportedMechanisms->p11->C_GetMechanismList->supportedAlgs->new->HashMap<Descriptor,Integer>->for->i->AccessController->new->PrivilegedAction<Object>->doPrivileged
SunPKCS11.P11Service#toList(String[])::: p11 service to list:::return->Arrays->asList
SunPKCS11.P11Service#newInstance(Object)::: p11 service new instance:::if->token->isValid->throw->new->NoSuchAlgorithmException->try->return->newInstance0->catch->throw->new->NoSuchAlgorithmException->finally
SunPKCS11.P11Service#newInstance0(Object)::: p11 service new instance0:::algorithm->getAlgorithm->type->getType->if->return->new->P11Digest->else->if->if->algorithm->startsWith->return->new->P11RSACipher->else->if->algorithm->endsWith->return->new->P11AEADCipher->else->return->new->P11Cipher->else->if->if->algorithm->indexOf->return->new->P11PSSSignature->else->return->new->P11Signature->else->if->return->new->P11Mac->else->if->return->new->P11KeyPairGenerator->else->if->if->algorithm->equals->return->new->P11ECDHKeyAgreement->else->return->new->P11KeyAgreement->else->if->return->token->getKeyFactory->else->if->return->new->P11SecretKeyFactory->else->if->if->return->new->P11TlsRsaPremasterSecretGenerator->else->if->return->new->P11TlsMasterSecretGenerator->else->if->return->new->P11TlsKeyMaterialGenerator->else->if->return->new->P11TlsPrfGenerator->else->return->new->P11KeyGenerator->else->if->return->token->getRandom->else->if->return->token->getKeyStore->else->if->if->return->new->sun.security.util.ECParameters->else->if->return->new->sun.security.util.GCMParameters->else->throw->new->NoSuchAlgorithmException->else->throw->new->NoSuchAlgorithmException
SunPKCS11.P11Service#supportsParameter(Object)::: p11 service supports parameter:::if->token->isValid->return->if->throw->new->InvalidParameterException->algorithm->getAlgorithm->type->getType->key->keyAlgorithm->key->getAlgorithm->if->algorithm->startsWith->algorithm->indexOf->if->keyAlgorithm->equals->return->return->isLocalKey->if->algorithm->equals->algorithm->contains->if->keyAlgorithm->equals->return->return->isLocalKey->if->algorithm->contains->algorithm->contains->if->keyAlgorithm->equals->return->return->isLocalKey->if->return->isLocalKey->key->getFormat->equals->if->if->keyAlgorithm->equals->return->return->isLocalKey->throw->new->AssertionError
SunPKCS11.P11Service#isLocalKey(Key)::: p11 service is local key:::return
SunPKCS11.P11Service#toString()::: p11 service to string:::return->super->toString->Functions->getMechanismName
SunPKCS11#login(Subject, CallbackHandler):::Log in to this provider:::if->isConfigured->throw->new->IllegalStateException->sm->System->getSecurityManager->if->if->debug->println->sm->this->getName->new->SecurityPermission->checkPermission->if->hasValidToken->throw->new->LoginException->if->if->debug->println->return->try->if->token->isLoggedInNow->if->debug->println->return->catch->finally->pin->if->myHandler->getCallbackHandler->if->throw->new->LoginException->form->ResourcesMgr->getString->new->java.text.MessageFormat->source->getName->pcall->form->format->new->PasswordCallback->callbacks->try->myHandler->handle->catch->le->new->LoginException->le->initCause->throw->finally->pcall->getPassword->pcall->clearPassword->if->if->debug->println->session->try->token->getOpSession->p11->session->id->C_Login->if->debug->println->catch->if->pe->getErrorCode->if->debug->println->return->else->if->pe->getErrorCode->fle->new->FailedLoginException->fle->initCause->throw->else->le->new->LoginException->le->initCause->throw->finally->token->releaseSession->if->Arrays->fill
SunPKCS11#logout():::Log out from this provider:::if->isConfigured->throw->new->IllegalStateException->sm->System->getSecurityManager->if->sm->this->getName->new->SecurityPermission->checkPermission->if->hasValidToken->return->if->if->debug->println->return->try->if->token->isLoggedInNow->if->debug->println->return->catch->finally->session->try->token->getOpSession->p11->session->id->C_Logout->if->debug->println->catch->if->pe->getErrorCode->if->debug->println->return->le->new->LoginException->le->initCause->throw->finally->token->releaseSession
SunPKCS11#setCallbackHandler(CallbackHandler):::Set a CallbackHandler   The provider uses this handler if one is not passed to the login method:::if->isConfigured->throw->new->IllegalStateException->sm->System->getSecurityManager->if->sm->this->getName->new->SecurityPermission->checkPermission->synchronized
SunPKCS11#getCallbackHandler(CallbackHandler)::: sun s11 get callback handler:::if->return->if->debug->println->synchronized->if->return->try->if->debug->println->myHandler->AccessController->new->PrivilegedExceptionAction<CallbackHandler>->doPrivileged->return->catch->if->debug->println->pae->printStackTrace->finally->return
SunPKCS11#writeReplace()::: sun s11 write replace:::return->new->SunPKCS11Rep
SunPKCS11.SunPKCS11Rep#readResolve()::: sun s11 rep read resolve:::p->Security->getProvider->if->getFileName->equals->throw->new->NotSerializableException->return
TemplateManager#addTemplate(String, long, long, CK_ATTRIBUTE[])::: template manager add template:::key->new->TemplateKey->template->new->Template->if->println->primitiveTemplates->new->KeyAndTemplate->add
TemplateManager#getTemplate(TemplateKey)::: template manager get template:::template->compositeTemplates->get->if->buildCompositeTemplate->compositeTemplates->put->return
TemplateManager#getAttributes(String, long, long, CK_ATTRIBUTE[])::: template manager get attributes:::key->new->TemplateKey->template->getTemplate->newAttrs->template->getAttributes->if->Arrays->asList->println->return
TemplateManager#buildCompositeTemplate(TemplateKey)::: template manager build composite template:::comp->new->Template->foreach->if->appliesTo->comp->add->return
TemplateManager.TemplateKey#equals(Object)::: template key equals:::if->return->if->return->other->match->equals->return
TemplateManager.TemplateKey#hashCode()::: template key hash code:::return->operation->hashCode
TemplateManager.TemplateKey#appliesTo(TemplateKey)::: template key applies to:::if->operation->equals->operation->equals->if->if->return->return
TemplateManager.TemplateKey#toString()::: template key to string:::return->Functions->getObjectClassName->Functions->getKeyName
TemplateManager.Template#add(Template)::: template add:::getAttributes
TemplateManager.Template#getAttributes(CK_ATTRIBUTE[])::: template get attributes:::return->combine
TemplateManager.Template#combine(CK_ATTRIBUTE[], CK_ATTRIBUTE[]):::Combine two sets of attributes:::attrs->new->ArrayList<CK_ATTRIBUTE>->foreach->if->attrs->add->foreach->type->foreach->if->attrs->remove->if->attrs->add->return->attrs->toArray
TemplateManager.Template#toString()::: template to string:::return->Arrays->asList->toString
Token#isWriteProtected()::: token is write protected:::return
Token#supportsRawSecretKeyImport()::: token supports raw secret key import:::if->random->JCAUtil->getSecureRandom->encoded->new->byteArr->random->nextBytes->attributes->new->CK_ATTRIBUTEArr->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->new->CK_ATTRIBUTE->session->try->getAttributes->getObjSession->keyID->p11->session->id->C_CreateObject->catch->finally->releaseSession->return
Token#isLoggedIn(Session)::: token is logged in:::loggedIn->time->System->currentTimeMillis->if->isLoggedInNow->return
Token#isLoggedInNow(Session)::: token is logged in now:::allocSession->try->if->getOpSession->info->p11->session->id->C_GetSessionInfo->loggedIn->return->catch->finally->if->releaseSession
Token#ensureLoggedIn(Session)::: token ensure logged in:::if->isLoggedIn->provider->login
Token#isValid()::: token is valid:::if->return->return
Token#ensureValid()::: token ensure valid:::if->isValid->throw->new->ProviderException
Token#isPresent(long)::: token is present:::if->return->if->return->time->System->currentTimeMillis->if->synchronized->if->ok->try->slotInfo->C_GetSlotInfo->if->sessInfo->C_GetSessionInfo->catch->finally->System->currentTimeMillis->if->destroy->return
Token#destroy()::: token destroy:::provider->uninitToken
Token#getObjSession()::: token get obj session:::return->sessionManager->getObjSession
Token#getOpSession()::: token get op session:::return->sessionManager->getOpSession
Token#releaseSession(Session)::: token release session:::return->sessionManager->releaseSession
Token#killSession(Session)::: token kill session:::return->sessionManager->killSession
Token#getAttributes(String, long, long, CK_ATTRIBUTE[])::: token get attributes:::newAttrs->templateManager->getAttributes->foreach->if->if->attr->getBoolean->try->ensureLoggedIn->catch->throw->new->ProviderException->finally->break->return
Token#getKeyFactory(String)::: token get key factory:::f->if->algorithm->equals->if->new->P11RSAKeyFactory->else->if->algorithm->equals->if->new->P11DSAKeyFactory->else->if->algorithm->equals->if->new->P11DHKeyFactory->else->if->algorithm->equals->if->new->P11ECKeyFactory->else->throw->new->ProviderException->return
Token#getRandom()::: token get random:::if->new->P11SecureRandom->return
Token#getKeyStore()::: token get key store:::if->new->P11KeyStore->return
Token#getMechanismInfo(long)::: token get mechanism info:::result->mechInfoMap->get->if->try->p11->C_GetMechanismInfo->mechInfoMap->put->catch->if->e->getErrorCode->throw->else->mechInfoMap->put->finally->else->if->return
Token#getTokenId()::: token get token id:::if->random->JCAUtil->getSecureRandom->new->byteArr->random->nextBytes->serializedTokens->new->WeakReference<Token>->add->return
Token#writeReplace()::: token write replace:::if->isValid->throw->new->NotSerializableException->return->new->TokenRep
Token.TokenRep#readResolve()::: token rep read resolve:::foreach->token->tokenRef->get->if->token->isValid->if->Arrays->token->getTokenId->equals->return->throw->new->NotSerializableException

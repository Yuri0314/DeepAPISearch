P11Key#length():::Return bit length of the key.:::return
P11KeyFactory#convertKey(Token, Key, String):::Convert an arbitrary key of algorithm into a P11Key of token:::return->token->getKeyFactory->engineTranslateKey
P11KeyGenerator#checkKeySize(long, int, Token):::Utility method for checking if the specified key size is valid and within the supported range:::sigKeySize->switch->if->throw->new->InvalidAlgorithmParameterException->break->if->else->if->else->throw->new->InvalidAlgorithmParameterException->break->info->try->token->getMechanismInfo->catch->throw->new->ProviderException->finally->if->return->minKeySize->maxKeySize->if->Math->multiplyExact->if->Math->multiplyExact->if->if->throw->new->InvalidAlgorithmParameterException->if->if->throw->new->InvalidAlgorithmParameterException->return
P11KeyStore#engineGetKey(String, char[]):::Returns the key associated with the given alias:::token->ensureValid->if->getKeyStoreCompatibilityMode->throw->new->NoSuchAlgorithmException->aliasInfo->aliasMap->get->if->return->session->try->token->getOpSession->if->h->getTokenObject->if->return->loadPkey->else->h->getTokenObject->if->return->loadSkey->return->catch->throw->new->ProviderException->finally->token->releaseSession
P11KeyStore#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias:::token->ensureValid->aliasInfo->aliasMap->get->if->return->return
P11KeyStore#engineGetCertificate(String):::Returns the certificate associated with the given alias:::token->ensureValid->aliasInfo->aliasMap->get->if->return->return
P11KeyStore#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::token->ensureValid->throw->new->UnsupportedOperationException->new->ProviderException
P11KeyStore#engineSetKeyEntry(String, Key, char[], Certificate[]):::Assigns the given key to the given alias, protecting it with the given password:::token->ensureValid->checkWrite->if->throw->new->KeyStoreException->else->if->throw->new->KeyStoreException->else->if->throw->new->KeyStoreException->else->if->getKeyStoreCompatibilityMode->throw->new->KeyStoreException->entry->try->if->new->KeyStore.PrivateKeyEntry->else->if->new->KeyStore.SecretKeyEntry->catch->throw->new->KeyStoreException->finally->new->KeyStore.PasswordProtection->engineSetEntry
P11KeyStore#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::token->ensureValid->throw->new->UnsupportedOperationException->new->ProviderException
P11KeyStore#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias:::token->ensureValid->checkWrite->if->throw->new->KeyStoreException->entry->new->KeyStore.TrustedCertificateEntry->engineSetEntry
P11KeyStore#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::token->ensureValid->if->token->isWriteProtected->throw->new->KeyStoreException->checkWrite->deleteEntry
P11KeyStore#engineAliases():::Lists all the alias names of this keystore.:::token->ensureValid->return->Collections->aliasMap->keySet->new->HashSet<String>->enumeration
P11KeyStore#engineContainsAlias(String):::Checks if the given alias exists in this keystore.:::token->ensureValid->return->aliasMap->containsKey
P11KeyStore#engineSize():::Retrieves the number of entries in this keystore.:::token->ensureValid->return->aliasMap->size
P11KeyStore#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.:::token->ensureValid->aliasInfo->aliasMap->get->if->return->return
P11KeyStore#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.:::token->ensureValid->aliasInfo->aliasMap->get->if->return->return
P11KeyStore#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::token->ensureValid->e->engineAliases->while->e->hasMoreElements->alias->e->nextElement->tokenCert->engineGetCertificate->if->tokenCert->equals->return->return
P11KeyStore#engineStore(OutputStream, char[]):::engineStore currently is a No-op:::token->ensureValid->if->getKeyStoreCompatibilityMode->throw->new->IOException->if->getKeyStoreCompatibilityMode->throw->new->IOException
P11KeyStore#engineStore(KeyStore.LoadStoreParameter):::engineStore currently is a No-op:::token->ensureValid->if->throw->new->IllegalArgumentException
P11KeyStore#engineLoad(InputStream, char[]):::Loads the keystore.:::token->ensureValid->if->new->CK_ATTRIBUTE->if->getKeyStoreCompatibilityMode->throw->new->IOException->if->try->if->login->else->new->PasswordCallbackHandler->login->catch->cause->e->getCause->if->pe->if->pe->getErrorCode->throw->new->UnrecoverableKeyException->initCause->new->IOException->throw->new->IOException->finally->try->if->mapLabels->if->dumpTokenMap->debug->aliasMap->size->println->catch->throw->new->IOException->finally
P11KeyStore#engineLoad(KeyStore.LoadStoreParameter):::Loads the keystore using the given KeyStore.LoadStoreParameter:::token->ensureValid->if->new->CK_ATTRIBUTE->if->throw->new->IllegalArgumentException->if->if->getTrustType->else->handler->pp->param->getProtectionParameter->if->password->getPassword->if->else->new->PasswordCallbackHandler->else->if->getCallbackHandler->else->throw->new->IllegalArgumentException->try->login->if->mapLabels->if->dumpTokenMap->catch->throw->new->IOException->finally
P11KeyStore#engineGetEntry(String, KeyStore.ProtectionParameter):::Get a KeyStore.Entry for the specified alias:::token->ensureValid->if->getPassword->getKeyStoreCompatibilityMode->throw->new->KeyStoreException->aliasInfo->aliasMap->get->if->if->debug->println->return->session->try->token->getOpSession->if->if->debug->println->return->new->KeyStore.TrustedCertificateEntry->else->if->if->debug->println->h->getTokenObject->if->throw->new->KeyStoreException->else->skey->loadSkey->return->new->KeyStore.SecretKeyEntry->else->if->debug->println->h->getTokenObject->if->throw->new->KeyStoreException->else->pkey->loadPkey->chain->if->return->new->KeyStore.PrivateKeyEntry->else->if->debug->println->return->catch->throw->new->KeyStoreException->finally->token->releaseSession
P11KeyStore#engineSetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter):::Save a KeyStore.Entry under the specified alias:::token->ensureValid->checkWrite->if->getPassword->getKeyStoreCompatibilityMode->throw->new->UnsupportedOperationException->new->KeyStoreException->if->token->isWriteProtected->throw->new->KeyStoreException->if->if->throw->new->UnsupportedOperationException->new->KeyStoreException->module->if->throw->new->KeyStoreException->cert->getTrustedCertificate->if->throw->new->KeyStoreException->xcert->info->aliasMap->get->if->deleteEntry->try->storeCert->module->setTrust->mapLabels->catch->throw->new->KeyStoreException->finally->else->if->key->getPrivateKey->if->throw->key->getClass->getName->new->KeyStoreException->chain->getCertificateChain->if->throw->chain->getClass->getName->new->UnsupportedOperationException->new->KeyStoreException->try->updatedAlias->aliases->aliasMap->keySet->foreach->aliasInfo->aliasMap->get->if->getPublicKey->getPublicKey->equals->equals->updatePkey->break->if->engineDeleteEntry->storePkey->catch->throw->new->KeyStoreException->finally->else->if->ske->skey->ske->getSecretKey->try->aliasInfo->aliasMap->get->if->engineDeleteEntry->storeSkey->catch->throw->new->KeyStoreException->finally->else->throw->entry->getClass->getName->new->UnsupportedOperationException->new->KeyStoreException->try->mapLabels->if->dumpTokenMap->catch->throw->new->KeyStoreException->finally->if->debug->println
P11KeyStore#engineEntryInstanceOf(String, Class):::Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.:::token->ensureValid->return->super->engineEntryInstanceOf
P11SecretKeyFactory#convertKey(Token, Key, String):::Convert an arbitrary key of algorithm into a P11Key of provider:::return->convertKey
P11SecretKeyFactory#convertKey(Token, Key, String, CK_ATTRIBUTE[]):::Convert an arbitrary key of algorithm w/ custom attributes into a P11Key of provider:::token->ensureValid->if->throw->new->InvalidKeyException->if->throw->new->InvalidKeyException->algoType->if->key->getAlgorithm->getKeyType->else->getKeyType->keyAlgorithmType->key->getAlgorithm->getKeyType->if->if->else->throw->new->InvalidKeyException->if->p11Key->if->if->newP11Key->session->p11KeyID->p11Key->getKeyID->try->token->getObjSession->newKeyID->session->id->C_CopyObject->P11Key->secretKey->catch->throw->new->InvalidKeyException->finally->p11Key->releaseKeyID->token->releaseSession->return->p11Key->get->if->return->if->key->getFormat->equalsIgnoreCase->throw->new->InvalidKeyException->encoded->key->getEncoded->createKey->put->return
Secmod#getInstance():::Return the singleton Secmod instance.:::return
Secmod#isInitialized():::Test whether this Secmod has been initialized:::if->isLoaded->return->if->throw->new->IOException->return
Secmod#initialize(String, String):::Initialize this Secmod.:::initialize
Secmod#getModules():::Return an immutable list of all available modules.:::try->if->isInitialized->throw->new->IllegalStateException->catch->throw->new->IllegalStateException->finally->if->modules->nssGetModuleList->Collections->unmodifiableList->return
Secmod#getModule(ModuleType):::Returns the first module of the specified type:::foreach->getModules->if->module->getType->return->return
Secmod.Module#getConfiguration():::Get the configuration for this module:::return
Secmod.Module#setConfiguration(String):::Set the configuration for this module.:::if->throw->new->IllegalStateException
Secmod.Module#getLibraryName():::Return the pathname of the native library that implements this module:::return
Secmod.Module#getType():::Returns the type of this module.:::return
Secmod.Module#getProvider():::Returns the provider instance that is associated with this module:::if->newProvider->return
SunPKCS11#login(Subject, CallbackHandler):::Log in to this provider:::if->isConfigured->throw->new->IllegalStateException->sm->System->getSecurityManager->if->if->debug->println->sm->this->getName->new->SecurityPermission->checkPermission->if->hasValidToken->throw->new->LoginException->if->if->debug->println->return->try->if->token->isLoggedInNow->if->debug->println->return->catch->finally->pin->if->myHandler->getCallbackHandler->if->throw->new->LoginException->form->ResourcesMgr->getString->new->java.text.MessageFormat->source->getName->pcall->form->format->new->PasswordCallback->callbacks->try->myHandler->handle->catch->le->new->LoginException->le->initCause->throw->finally->pcall->getPassword->pcall->clearPassword->if->if->debug->println->session->try->token->getOpSession->p11->session->id->C_Login->if->debug->println->catch->if->pe->getErrorCode->if->debug->println->return->else->if->pe->getErrorCode->fle->new->FailedLoginException->fle->initCause->throw->else->le->new->LoginException->le->initCause->throw->finally->token->releaseSession->if->Arrays->fill
SunPKCS11#logout():::Log out from this provider:::if->isConfigured->throw->new->IllegalStateException->sm->System->getSecurityManager->if->sm->this->getName->new->SecurityPermission->checkPermission->if->hasValidToken->return->if->if->debug->println->return->try->if->token->isLoggedInNow->if->debug->println->return->catch->finally->session->try->token->getOpSession->p11->session->id->C_Logout->if->debug->println->catch->if->pe->getErrorCode->if->debug->println->return->le->new->LoginException->le->initCause->throw->finally->token->releaseSession
SunPKCS11#setCallbackHandler(CallbackHandler):::Set a CallbackHandler   The provider uses this handler if one is not passed to the login method:::if->isConfigured->throw->new->IllegalStateException->sm->System->getSecurityManager->if->sm->this->getName->new->SecurityPermission->checkPermission->synchronized

org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#booleanSnippet(int)->int::: blackhole directive test boolean snippet
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#blackholeBooleanSnippet(int)->int::: blackhole directive test blackhole boolean snippet
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#testBoolean()->void::: blackhole directive test test boolean
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#intSnippet(int)->int::: blackhole directive test int snippet
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#blackholeIntSnippet(int)->int::: blackhole directive test blackhole int snippet
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#testInt()->void::: blackhole directive test test int
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#objectSnippet(int)->int::: blackhole directive test object snippet
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#blackholeObjectSnippet(int)->int::: blackhole directive test blackhole object snippet
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#testObject()->void::: blackhole directive test test object
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#getDefaultHighTierContext()->HighTierContext::: blackhole directive test get default high tier context
org.graalvm.compiler.api.directives.test.BlackholeDirectiveTest#checkLowTierGraph(StructuredGraph)->void::: blackhole directive test check low tier graph
org.graalvm.compiler.api.directives.test.ConstantProbablityBranchFoldingTest#branchFoldingSnippet1()->int::: constant probablity branch folding test branch folding snippet1
org.graalvm.compiler.api.directives.test.ConstantProbablityBranchFoldingTest#branchFoldingSnippet2()->int::: constant probablity branch folding test branch folding snippet2
org.graalvm.compiler.api.directives.test.ConstantProbablityBranchFoldingTest#testEarlyFolding1()->void::: constant probablity branch folding test test early folding1
org.graalvm.compiler.api.directives.test.ConstantProbablityBranchFoldingTest#testEarlyFolding2()->void::: constant probablity branch folding test test early folding2
org.graalvm.compiler.api.directives.test.ConstantProbablityBranchFoldingTest#checkLowTierGraph(StructuredGraph)->void::: constant probablity branch folding test check low tier graph
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#verifyMergeSnippet(int)->int::: control flow anchor directive test verify merge snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#preventMergeSnippet(int)->int::: control flow anchor directive test prevent merge snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#testMerge()->void::: control flow anchor directive test test merge
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#verifyDuplicateSnippet(int)->int::: control flow anchor directive test verify duplicate snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#preventDuplicateSnippet(int)->int::: control flow anchor directive test prevent duplicate snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#testDuplicate()->void::: control flow anchor directive test test duplicate
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#verifyFullUnrollSnippet(int)->int::: control flow anchor directive test verify full unroll snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#preventFullUnrollSnippet(int)->int::: control flow anchor directive test prevent full unroll snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#testFullUnroll()->void::: control flow anchor directive test test full unroll
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#verifyPeelSnippet(int)->void::: control flow anchor directive test verify peel snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#preventPeelSnippet(int)->void::: control flow anchor directive test prevent peel snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#testPeel()->void::: control flow anchor directive test test peel
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#verifyUnswitchSnippet(int, boolean)->void::: control flow anchor directive test verify unswitch snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#preventUnswitchSnippet(int, boolean)->void::: control flow anchor directive test prevent unswitch snippet
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#testUnswitch()->void::: control flow anchor directive test test unswitch
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#testClone()->void:::Cloning a ControlFlowAnchorNode is not allowed but cloning a whole graph containing one is ok.
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#getDefaultHighTierContext()->HighTierContext::: control flow anchor directive test get default high tier context
org.graalvm.compiler.api.directives.test.ControlFlowAnchorDirectiveTest#checkLowTierGraph(StructuredGraph)->void::: control flow anchor directive test check low tier graph
org.graalvm.compiler.api.directives.test.DeoptimizeDirectiveTest#inCompiledCode()->boolean::: deoptimize directive test in compiled code
org.graalvm.compiler.api.directives.test.DeoptimizeDirectiveTest#testInCompiledCode()->void::: deoptimize directive test test in compiled code
org.graalvm.compiler.api.directives.test.DeoptimizeDirectiveTest#deoptimizeSnippet()->boolean::: deoptimize directive test deoptimize snippet
org.graalvm.compiler.api.directives.test.DeoptimizeDirectiveTest#deoptimizeAndInvalidateSnippet()->boolean::: deoptimize directive test deoptimize and invalidate snippet
org.graalvm.compiler.api.directives.test.DeoptimizeDirectiveTest#testDeoptimize()->void::: deoptimize directive test test deoptimize
org.graalvm.compiler.api.directives.test.DeoptimizeDirectiveTest#testDeoptimizeAndInvalidate()->void::: deoptimize directive test test deoptimize and invalidate
org.graalvm.compiler.api.directives.test.DeoptimizeDirectiveTest#testDeoptimizeDontInvalidate()->void::: deoptimize directive test test deoptimize dont invalidate
org.graalvm.compiler.api.directives.test.DeoptimizeDirectiveTest#zeroBranchProbabilitySnippet(boolean)->int::: deoptimize directive test zero branch probability snippet
org.graalvm.compiler.api.directives.test.DeoptimizeDirectiveTest#testZeroBranchProbability()->void::: deoptimize directive test test zero branch probability
org.graalvm.compiler.api.directives.test.IterationDirectiveTest#loopFrequencySnippet(int)->int::: iteration directive test loop frequency snippet
org.graalvm.compiler.api.directives.test.IterationDirectiveTest#testLoopFrequency()->void::: iteration directive test test loop frequency
org.graalvm.compiler.api.directives.test.IterationDirectiveTest#checkLowTierGraph(StructuredGraph)->void::: iteration directive test check low tier graph
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#booleanSnippet()->boolean::: opaque directive test boolean snippet
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#opaqueBooleanSnippet()->boolean::: opaque directive test opaque boolean snippet
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#testBoolean()->void::: opaque directive test test boolean
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#intSnippet()->int::: opaque directive test int snippet
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#opaqueIntSnippet()->int::: opaque directive test opaque int snippet
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#testInt()->void::: opaque directive test test int
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#doubleSnippet()->double::: opaque directive test double snippet
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#opaqueDoubleSnippet()->double::: opaque directive test opaque double snippet
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#testDouble()->void::: opaque directive test test double
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#objectSnippet()->boolean::: opaque directive test object snippet
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#opaqueObjectSnippet()->boolean::: opaque directive test opaque object snippet
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#testObject()->void::: opaque directive test test object
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#getDefaultHighTierContext()->HighTierContext::: opaque directive test get default high tier context
org.graalvm.compiler.api.directives.test.OpaqueDirectiveTest#checkLowTierGraph(StructuredGraph)->void::: opaque directive test check low tier graph
org.graalvm.compiler.api.directives.test.ProbabilityDirectiveTest#before(ResolvedJavaMethod)->void:::Called before a test is compiled.
org.graalvm.compiler.api.directives.test.ProbabilityDirectiveTest#branchProbabilitySnippet(int)->int::: probability directive test branch probability snippet
org.graalvm.compiler.api.directives.test.ProbabilityDirectiveTest#testBranchProbability()->void::: probability directive test test branch probability
org.graalvm.compiler.api.directives.test.ProbabilityDirectiveTest#branchProbabilitySnippet2(int)->int::: probability directive test branch probability snippet2
org.graalvm.compiler.api.directives.test.ProbabilityDirectiveTest#testBranchProbability2()->void::: probability directive test test branch probability2
org.graalvm.compiler.api.directives.test.ProbabilityDirectiveTest#checkLowTierGraph(StructuredGraph)->void::: probability directive test check low tier graph

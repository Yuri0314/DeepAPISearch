BlackholeDirectiveTest#booleanSnippet(int)::: blackhole directive test boolean snippet:::b->if->return->else->return
BlackholeDirectiveTest#blackholeBooleanSnippet(int)::: blackhole directive test blackhole boolean snippet:::b->GraalDirectives->blackhole->if->return->else->return
BlackholeDirectiveTest#testBoolean()::: blackhole directive test test boolean:::test->test
BlackholeDirectiveTest#intSnippet(int)::: blackhole directive test int snippet:::x->return
BlackholeDirectiveTest#blackholeIntSnippet(int)::: blackhole directive test blackhole int snippet:::x->GraalDirectives->blackhole->return
BlackholeDirectiveTest#testInt()::: blackhole directive test test int:::test->test
BlackholeDirectiveTest#objectSnippet(int)::: blackhole directive test object snippet:::obj->new->Dummy->ret->return
BlackholeDirectiveTest#blackholeObjectSnippet(int)::: blackhole directive test blackhole object snippet:::obj->new->Dummy->ret->GraalDirectives->blackhole->return
BlackholeDirectiveTest#testObject()::: blackhole directive test test object:::test->test
BlackholeDirectiveTest#getDefaultHighTierContext()::: blackhole directive test get default high tier context:::return->getProviders->getDefaultGraphBuilderSuite->remove->new->HighTierContext
BlackholeDirectiveTest#checkLowTierGraph(StructuredGraph)::: blackhole directive test check low tier graph:::snippet->graph->method->getAnnotation->arg->graph->getParameter->if->snippet->expectParameterUsage->Assert->assertNotNull->Assert->arg->hasNoUsages->assertFalse->else->Assert->arg->hasNoUsages->assertTrue
ConstantProbablityBranchFoldingTest#branchFoldingSnippet1()::: constant probablity branch folding test branch folding snippet1:::if->GraalDirectives->injectBranchProbability->return->else->return
ConstantProbablityBranchFoldingTest#branchFoldingSnippet2()::: constant probablity branch folding test branch folding snippet2:::if->GraalDirectives->injectBranchProbability->return->else->return
ConstantProbablityBranchFoldingTest#testEarlyFolding1()::: constant probablity branch folding test test early folding1:::test
ConstantProbablityBranchFoldingTest#testEarlyFolding2()::: constant probablity branch folding test test early folding2:::test
ConstantProbablityBranchFoldingTest#checkLowTierGraph(StructuredGraph)::: constant probablity branch folding test check low tier graph:::ifNodes->graph->getNodes->Assert->ifNodes->count->assertEquals
ControlFlowAnchorDirectiveTest#verifyMergeSnippet(int)::: control flow anchor directive test verify merge snippet:::if->return->else->return
ControlFlowAnchorDirectiveTest#preventMergeSnippet(int)::: control flow anchor directive test prevent merge snippet:::if->GraalDirectives->controlFlowAnchor->return->else->GraalDirectives->controlFlowAnchor->return
ControlFlowAnchorDirectiveTest#testMerge()::: control flow anchor directive test test merge:::test->test
ControlFlowAnchorDirectiveTest#verifyDuplicateSnippet(int)::: control flow anchor directive test verify duplicate snippet:::ret->if->else->return
ControlFlowAnchorDirectiveTest#preventDuplicateSnippet(int)::: control flow anchor directive test prevent duplicate snippet:::ret->if->else->GraalDirectives->controlFlowAnchor->return
ControlFlowAnchorDirectiveTest#testDuplicate()::: control flow anchor directive test test duplicate:::test
ControlFlowAnchorDirectiveTest#verifyFullUnrollSnippet(int)::: control flow anchor directive test verify full unroll snippet:::ret->for->i->return
ControlFlowAnchorDirectiveTest#preventFullUnrollSnippet(int)::: control flow anchor directive test prevent full unroll snippet:::ret->for->i->return
ControlFlowAnchorDirectiveTest#testFullUnroll()::: control flow anchor directive test test full unroll:::test->test
ControlFlowAnchorDirectiveTest#verifyPeelSnippet(int)::: control flow anchor directive test verify peel snippet:::ret->while->if->else
ControlFlowAnchorDirectiveTest#preventPeelSnippet(int)::: control flow anchor directive test prevent peel snippet:::ret->while->GraalDirectives->controlFlowAnchor->if->GraalDirectives->controlFlowAnchor->else
ControlFlowAnchorDirectiveTest#testPeel()::: control flow anchor directive test test peel:::test
ControlFlowAnchorDirectiveTest#verifyUnswitchSnippet(int, boolean)::: control flow anchor directive test verify unswitch snippet:::ret->while->GraalDirectives->injectBranchProbability->if->else
ControlFlowAnchorDirectiveTest#preventUnswitchSnippet(int, boolean)::: control flow anchor directive test prevent unswitch snippet:::ret->while->GraalDirectives->injectBranchProbability->if->GraalDirectives->controlFlowAnchor->else
ControlFlowAnchorDirectiveTest#testUnswitch()::: control flow anchor directive test test unswitch:::test->test
ControlFlowAnchorDirectiveTest#testClone():::Cloning a ControlFlowAnchorNode is not allowed but cloning a whole graph containing one is ok.:::g->parseEager->g->g->getDebug->copy
ControlFlowAnchorDirectiveTest#getNodeCountAnnotations(StructuredGraph)::: control flow anchor directive test get node count annotations:::method->graph->method->snippet->method->getAnnotation->if->return->Arrays->snippet->value->asList->single->method->getAnnotation->if->return->Collections->singletonList->return->Collections->emptyList
ControlFlowAnchorDirectiveTest#getDefaultHighTierContext()::: control flow anchor directive test get default high tier context:::return->getProviders->getDefaultGraphBuilderSuite->remove->new->HighTierContext
ControlFlowAnchorDirectiveTest#checkLowTierGraph(StructuredGraph)::: control flow anchor directive test check low tier graph:::anchors->graph->getNodes->filter->snapshot->for->i->anchors->size->foreach->getNodeCountAnnotations->nodes->graph->getNodes->nodeCount->nodeClass->filter->Assert->nodeCount->nodeClass->getSimpleName->nodeCount->expectedCount->nodes->count->assertEquals
DeoptimizeDirectiveTest#inCompiledCode()::: deoptimize directive test in compiled code:::return->GraalDirectives->inCompiledCode
DeoptimizeDirectiveTest#testInCompiledCode()::: deoptimize directive test test in compiled code:::method->getResolvedJavaMethod->interpreted->executeExpected->new->Result->assertEquals->compiled->executeActual->new->Result->assertEquals
DeoptimizeDirectiveTest#deoptimizeSnippet()::: deoptimize directive test deoptimize snippet:::GraalDirectives->deoptimize->return->GraalDirectives->inCompiledCode
DeoptimizeDirectiveTest#deoptimizeAndInvalidateSnippet()::: deoptimize directive test deoptimize and invalidate snippet:::GraalDirectives->deoptimizeAndInvalidate->return->GraalDirectives->inCompiledCode
DeoptimizeDirectiveTest#testDeoptimize()::: deoptimize directive test test deoptimize:::test
DeoptimizeDirectiveTest#testDeoptimizeCheckValid(ResolvedJavaMethod)::: deoptimize directive test test deoptimize check valid:::expected->executeExpected->code->getCode->actual->try->code->executeVarargs->new->Result->catch->new->Result->finally->assertEquals->return->code->isValid
DeoptimizeDirectiveTest#testDeoptimizeAndInvalidate()::: deoptimize directive test test deoptimize and invalidate:::method->getResolvedJavaMethod->valid->testDeoptimizeCheckValid->Assert->assertFalse
DeoptimizeDirectiveTest#testDeoptimizeDontInvalidate()::: deoptimize directive test test deoptimize dont invalidate:::method->getResolvedJavaMethod->valid->testDeoptimizeCheckValid->Assert->assertTrue
DeoptimizeDirectiveTest#zeroBranchProbabilitySnippet(boolean)::: deoptimize directive test zero branch probability snippet:::if->GraalDirectives->injectBranchProbability->GraalDirectives->controlFlowAnchor->return->else->GraalDirectives->controlFlowAnchor->return
DeoptimizeDirectiveTest#testZeroBranchProbability()::: deoptimize directive test test zero branch probability:::method->getResolvedJavaMethod->expected->executeExpected->code->getCode->actual->try->code->executeVarargs->new->Result->catch->new->Result->finally->assertEquals->code->isValid->assertFalse
IterationDirectiveTest#loopFrequencySnippet(int)::: iteration directive test loop frequency snippet:::x->while->GraalDirectives->injectIterationCount->GraalDirectives->controlFlowAnchor->if->else->return
IterationDirectiveTest#testLoopFrequency()::: iteration directive test test loop frequency:::test
IterationDirectiveTest#checkLowTierGraph(StructuredGraph)::: iteration directive test check low tier graph:::loopBeginNodes->graph->getNodes->Assert->loopBeginNodes->count->assertEquals->loopBeginNode->loopBeginNodes->first->Assert->loopBeginNode->loopFrequency->assertEquals
OpaqueDirectiveTest#booleanSnippet()::: opaque directive test boolean snippet:::return
OpaqueDirectiveTest#opaqueBooleanSnippet()::: opaque directive test opaque boolean snippet:::return->GraalDirectives->opaque
OpaqueDirectiveTest#testBoolean()::: opaque directive test test boolean:::test->test
OpaqueDirectiveTest#intSnippet()::: opaque directive test int snippet:::return
OpaqueDirectiveTest#opaqueIntSnippet()::: opaque directive test opaque int snippet:::return->GraalDirectives->opaque
OpaqueDirectiveTest#testInt()::: opaque directive test test int:::test->test
OpaqueDirectiveTest#doubleSnippet()::: opaque directive test double snippet:::return
OpaqueDirectiveTest#opaqueDoubleSnippet()::: opaque directive test opaque double snippet:::return->GraalDirectives->opaque
OpaqueDirectiveTest#testDouble()::: opaque directive test test double:::test->test
OpaqueDirectiveTest#objectSnippet()::: opaque directive test object snippet:::obj->new->Dummy->return
OpaqueDirectiveTest#opaqueObjectSnippet()::: opaque directive test opaque object snippet:::obj->new->Dummy->return->GraalDirectives->opaque
OpaqueDirectiveTest#testObject()::: opaque directive test test object:::test->test
OpaqueDirectiveTest#getDefaultHighTierContext()::: opaque directive test get default high tier context:::return->getProviders->getDefaultGraphBuilderSuite->remove->new->HighTierContext
OpaqueDirectiveTest#checkLowTierGraph(StructuredGraph)::: opaque directive test check low tier graph:::snippet->graph->method->getAnnotation->foreach->graph->getNodes->Assert->snippet->expectedReturnNode->returnNode->result->getClass->assertEquals
ProbabilityDirectiveTest#before(ResolvedJavaMethod):::Called before a test is compiled.:::method->reprofile
ProbabilityDirectiveTest#branchProbabilitySnippet(int)::: probability directive test branch probability snippet:::if->GraalDirectives->injectBranchProbability->GraalDirectives->controlFlowAnchor->return->else->GraalDirectives->controlFlowAnchor->return
ProbabilityDirectiveTest#testBranchProbability()::: probability directive test test branch probability:::test
ProbabilityDirectiveTest#branchProbabilitySnippet2(int)::: probability directive test branch probability snippet2:::if->GraalDirectives->injectBranchProbability->GraalDirectives->controlFlowAnchor->return->else->GraalDirectives->controlFlowAnchor->return
ProbabilityDirectiveTest#testBranchProbability2()::: probability directive test test branch probability2:::test
ProbabilityDirectiveTest#checkLowTierGraph(StructuredGraph)::: probability directive test check low tier graph:::ifNodes->graph->getNodes->Assert->ifNodes->count->assertEquals->ifNode->ifNodes->first->oneSuccessor->if->ifNode->trueSuccessor->returnValue->ifNode->trueSuccessor->else->ifNode->falseSuccessor->Assert->ifNode->probability->assertEquals
ProbabilityDirectiveTest#returnValue(AbstractBeginNode)::: probability directive test return value:::anchor->b->next->returnNode->anchor->next->return->returnNode->result->asJavaConstant->asInt

SPARCHotSpotJVMCIBackendFactory#createTarget(SPARCHotSpotVMConfig)::: hot spot backend factory create target:::stackFrameAlignment->implicitNullCheckLimit->inlineObjects->arch->computeFeatures->new->SPARC->return->new->TargetDescription
SPARCHotSpotJVMCIBackendFactory#createCodeCache(HotSpotJVMCIRuntime, TargetDescription, RegisterConfig)::: hot spot backend factory create code cache:::return->new->HotSpotCodeCacheProvider
SPARCHotSpotJVMCIBackendFactory#computeFeatures(SPARCHotSpotVMConfig)::: hot spot backend factory compute features:::features->EnumSet->noneOf->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->return
SPARCHotSpotJVMCIBackendFactory#getArchitecture()::: hot spot backend factory get architecture:::return
SPARCHotSpotJVMCIBackendFactory#toString()::: hot spot backend factory to string:::return->getArchitecture
SPARCHotSpotJVMCIBackendFactory#createJVMCIBackend(HotSpotJVMCIRuntime, JVMCIBackend)::: hot spot backend factory create backend:::config->runtime->getConfigStore->new->SPARCHotSpotVMConfig->target->createTarget->metaAccess->new->HotSpotMetaAccessProvider->regConfig->new->SPARCHotSpotRegisterConfig->codeCache->createCodeCache->constantReflection->new->HotSpotConstantReflectionProvider->stackIntrospection->new->HotSpotStackIntrospection->try->rt->timer->return->createBackend->catch->finally
SPARCHotSpotJVMCIBackendFactory#createBackend(HotSpotMetaAccessProvider, HotSpotCodeCacheProvider, HotSpotConstantReflectionProvider, StackIntrospection)::: hot spot backend factory create backend:::return->new->JVMCIBackend
SPARCHotSpotRegisterConfig#getAllocatableRegisters()::: hot spot register config get allocatable registers:::return
SPARCHotSpotRegisterConfig#filterAllocatableRegisters(PlatformKind, RegisterArray)::: hot spot register config filter allocatable registers:::list->new->ArrayList<>->foreach->if->reg->getRegisterCategory->canStoreValue->list->add->return->new->RegisterArray
SPARCHotSpotRegisterConfig#getAttributesMap()::: hot spot register config get attributes map:::return->attributesMap->clone
SPARCHotSpotRegisterConfig#initAllocatable(Architecture, boolean)::: hot spot register config init allocatable:::allRegisters->arch->getAvailableValueRegisters->registers->allRegisters->size->reservedRegisters->size->new->RegisterArr->reservedRegistersList->reservedRegisters->asList->idx->foreach->if->reservedRegistersList->contains->continue->if->reg->equals->continue->return->new->RegisterArray
SPARCHotSpotRegisterConfig#getCallerSaveRegisters()::: hot spot register config get caller save registers:::return
SPARCHotSpotRegisterConfig#getCalleeSaveRegisters()::: hot spot register config get callee save registers:::return
SPARCHotSpotRegisterConfig#areAllAllocatableRegistersCallerSaved()::: hot spot register config are all allocatable registers caller saved:::return
SPARCHotSpotRegisterConfig#getCallingConvention(Type, JavaType, JavaType[], ValueKindFactory)::: hot spot register config get calling convention:::hotspotType->if->return->callingConvention->if->return->callingConvention->throw->JVMCIError->shouldNotReachHere
SPARCHotSpotRegisterConfig#getCallingConventionRegisters(Type, JavaKind)::: hot spot register config get calling convention registers:::hotspotType->switch->return->return->throw->JVMCIError->shouldNotReachHere
SPARCHotSpotRegisterConfig#callingConvention(RegisterArray, JavaType, JavaType[], HotSpotCallingConventionType, ValueKindFactory)::: hot spot register config calling convention:::locations->new->AllocatableValueArr->currentGeneral->currentFloating->currentStackOffset->isNative->for->i->returnKind->returnType->getJavaKind->returnLocation->getReturnRegister->valueKindFactory->returnKind->getStackKind->getValueKind->asValue->return->new->CallingConvention
SPARCHotSpotRegisterConfig#roundUp(int, int)::: hot spot register config round up:::return
SPARCHotSpotRegisterConfig#getReturnRegister(JavaKind)::: hot spot register config get return register:::return->getReturnRegister
SPARCHotSpotRegisterConfig#getReturnRegister(JavaKind, HotSpotCallingConventionType)::: hot spot register config get return register:::switch->return->return->return->return->throw->new->UnsupportedOperationException
SPARCHotSpotRegisterConfig#getFrameRegister()::: hot spot register config get frame register:::return
SPARCHotSpotRegisterConfig#toString()::: hot spot register config to string:::return->String->getAllocatableRegisters->getCallerSaveRegisters->format

Curve#pointCrossingsForPath(PathIterator, double, double):::Calculates the number of times the given path crosses the ray extending to the right from (px,py):::if->pi->isDone->return->coords->new->doubleArr->if->pi->currentSegment->throw->new->IllegalPathStateException->pi->next->movx->movy->curx->cury->endx->endy->crossings->while->pi->isDone->switch->pi->currentSegment->if->pointCrossingsForLine->break->pointCrossingsForLine->break->pointCrossingsForQuad->break->pointCrossingsForCubic->break->if->pointCrossingsForLine->break->pi->next->if->pointCrossingsForLine->return
Curve#pointCrossingsForLine(double, double, double, double, double, double):::Calculates the number of times the line from (x0,y0) to (x1,y1) crosses the ray extending to the right from (px,py):::if->return->if->return->if->return->if->return->xintercept->if->return->return
Curve#pointCrossingsForQuad(double, double, double, double, double, double, double, double, int):::Calculates the number of times the quad from (x0,y0) to (x1,y1) crosses the ray extending to the right from (px,py):::if->return->if->return->if->return->if->if->if->return->else->if->return->return->if->return->pointCrossingsForLine->x0c->y0c->xc1->yc1->if->Double->isNaN->Double->isNaN->return->return->pointCrossingsForQuad->pointCrossingsForQuad
Curve#pointCrossingsForCubic(double, double, double, double, double, double, double, double, double, double, int):::Calculates the number of times the cubic from (x0,y0) to (x1,y1) crosses the ray extending to the right from (px,py):::if->return->if->return->if->return->if->if->if->return->else->if->return->return->if->return->pointCrossingsForLine->xmid->ymid->xc0m->yc0m->xmc1->ymc1->if->Double->isNaN->Double->isNaN->return->return->pointCrossingsForCubic->pointCrossingsForCubic
Curve#rectCrossingsForPath(PathIterator, double, double, double, double):::Accumulate the number of times the path crosses the shadow extending to the right of the rectangle:::if->return->if->pi->isDone->return->coords->new->doubleArr->if->pi->currentSegment->throw->new->IllegalPathStateException->pi->next->curx->cury->movx->movy->endx->endy->crossings->while->pi->isDone->switch->pi->currentSegment->if->rectCrossingsForLine->break->rectCrossingsForLine->break->rectCrossingsForQuad->break->rectCrossingsForCubic->break->if->rectCrossingsForLine->break->pi->next->if->rectCrossingsForLine->return
Curve#rectCrossingsForLine(int, double, double, double, double, double, double, double, double):::Accumulate the number of times the line crosses the shadow extending to the right of the rectangle:::if->return->if->return->if->return->if->if->if->if->else->if->if->if->return->if->return->xi0->if->else->if->xi1->if->else->if->if->return->if->if->if->if->else->if->if->if->return->return
Curve#rectCrossingsForQuad(int, double, double, double, double, double, double, double, double, double, double, int):::Accumulate the number of times the quad crosses the shadow extending to the right of the rectangle:::if->return->if->return->if->return->if->if->if->if->else->if->if->if->return->if->return->if->return->rectCrossingsForLine->x0c->y0c->xc1->yc1->if->Double->isNaN->Double->isNaN->return->rectCrossingsForQuad->if->rectCrossingsForQuad->return
Curve#rectCrossingsForCubic(int, double, double, double, double, double, double, double, double, double, double, double, double, int):::Accumulate the number of times the cubic crosses the shadow extending to the right of the rectangle:::if->return->if->return->if->return->if->if->if->if->else->if->if->if->return->if->return->if->return->rectCrossingsForLine->xmid->ymid->xc0m->yc0m->xmc1->ymc1->if->Double->isNaN->Double->isNaN->return->rectCrossingsForCubic->if->rectCrossingsForCubic->return
PathConsumer2D#pathDone():::Called after the last segment of the last subpath when the iteration of the path segments is completely done:::
PathConsumer2D#getNativeConsumer():::If a given PathConsumer performs all or most of its work natively then it can return a (non-zero) pointer to a native function vector that defines C functions for all of the above methods:::

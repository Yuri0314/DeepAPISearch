javax.swing.plaf.BorderUIResource#getEtchedBorderUIResource()->Border:::Returns a etched border UI resource.
javax.swing.plaf.BorderUIResource#getLoweredBevelBorderUIResource()->Border:::Returns a lowered bevel border UI resource.
javax.swing.plaf.BorderUIResource#getRaisedBevelBorderUIResource()->Border:::Returns a raised bevel border UI resource.
javax.swing.plaf.BorderUIResource#getBlackLineBorderUIResource()->Border:::Returns a black line border UI resource.
javax.swing.plaf.BorderUIResource#paintBorder(Component, Graphics, int, int, int, int)->void::: border resource paint border
javax.swing.plaf.BorderUIResource#getBorderInsets(Component)->Insets::: border resource get border insets
javax.swing.plaf.BorderUIResource#isBorderOpaque()->boolean::: border resource is border opaque
javax.swing.plaf.ComboBoxUI#setPopupVisible(JComboBox, boolean)->void:::Set the visibility of the popup
javax.swing.plaf.ComboBoxUI#isPopupVisible(JComboBox)->boolean:::Determine the visibility of the popup
javax.swing.plaf.ComboBoxUI#isFocusTraversable(JComboBox)->boolean:::Determine whether or not the combo box itself is traversable
javax.swing.plaf.ComponentUI#installUI(JComponent)->void:::Configures the specified component appropriately for the look and feel
javax.swing.plaf.ComponentUI#uninstallUI(JComponent)->void:::Reverses configuration which was done on the specified component during installUI
javax.swing.plaf.ComponentUI#paint(Graphics, JComponent)->void:::Paints the specified component appropriately for the look and feel
javax.swing.plaf.ComponentUI#update(Graphics, JComponent)->void:::Notifies this UI delegate that it is time to paint the specified component
javax.swing.plaf.ComponentUI#getPreferredSize(JComponent)->Dimension:::Returns the specified component's preferred size appropriate for the look and feel
javax.swing.plaf.ComponentUI#getMinimumSize(JComponent)->Dimension:::Returns the specified component's minimum size appropriate for the look and feel
javax.swing.plaf.ComponentUI#getMaximumSize(JComponent)->Dimension:::Returns the specified component's maximum size appropriate for the look and feel
javax.swing.plaf.ComponentUI#contains(JComponent, int, int)->boolean:::Returns true if the specified x,y location is contained within the look and feel's defined shape of the specified component
javax.swing.plaf.ComponentUI#createUI(JComponent)->ComponentUI:::Returns an instance of the UI delegate for the specified component
javax.swing.plaf.ComponentUI#getBaseline(JComponent, int, int)->int:::Returns the baseline
javax.swing.plaf.ComponentUI#getBaselineResizeBehavior(JComponent)->Component.BaselineResizeBehavior:::Returns an enum indicating how the baseline of the component changes as the size changes
javax.swing.plaf.ComponentUI#getAccessibleChildrenCount(JComponent)->int:::Returns the number of accessible children in the object
javax.swing.plaf.ComponentUI#getAccessibleChild(JComponent, int)->Accessible:::Returns the ith Accessible child of the object
javax.swing.plaf.FileChooserUI#getAcceptAllFileFilter(JFileChooser)->FileFilter:::Returns an accept-all file filter.
javax.swing.plaf.FileChooserUI#getFileView(JFileChooser)->FileView:::Returns a file view.
javax.swing.plaf.FileChooserUI#getApproveButtonText(JFileChooser)->String:::Returns approve button text.
javax.swing.plaf.FileChooserUI#getDialogTitle(JFileChooser)->String:::Returns the dialog title.
javax.swing.plaf.FileChooserUI#rescanCurrentDirectory(JFileChooser)->void:::Rescan the current directory.
javax.swing.plaf.FileChooserUI#ensureFileIsVisible(JFileChooser, File)->void:::Ensure the file in question is visible.
javax.swing.plaf.FileChooserUI#getDefaultButton(JFileChooser)->JButton:::Returns default button for current LookAndFeel
javax.swing.plaf.IconUIResource#paintIcon(Component, Graphics, int, int)->void::: icon resource paint icon
javax.swing.plaf.IconUIResource#getIconWidth()->int::: icon resource get icon width
javax.swing.plaf.IconUIResource#getIconHeight()->int::: icon resource get icon height
javax.swing.plaf.LayerUI#paint(Graphics, JComponent)->void:::Paints the specified component
javax.swing.plaf.LayerUI#eventDispatched(AWTEvent, JLayer)->void:::Processes AWTEvents for JLayer and all its descendants to this LayerUI instance
javax.swing.plaf.LayerUI#processComponentEvent(ComponentEvent, JLayer)->void:::Processes component events occurring on the JLayer or any of its subcomponents
javax.swing.plaf.LayerUI#processFocusEvent(FocusEvent, JLayer)->void:::Processes focus events occurring on the JLayer or any of its subcomponents
javax.swing.plaf.LayerUI#processKeyEvent(KeyEvent, JLayer)->void:::Processes key events occurring on the JLayer or any of its subcomponents
javax.swing.plaf.LayerUI#processMouseEvent(MouseEvent, JLayer)->void:::Processes mouse events occurring on the JLayer or any of its subcomponents
javax.swing.plaf.LayerUI#processMouseMotionEvent(MouseEvent, JLayer)->void:::Processes mouse motion event occurring on the JLayer or any of its subcomponents
javax.swing.plaf.LayerUI#processMouseWheelEvent(MouseWheelEvent, JLayer)->void:::Processes mouse wheel event occurring on the JLayer or any of its subcomponents
javax.swing.plaf.LayerUI#processInputMethodEvent(InputMethodEvent, JLayer)->void:::Processes input event occurring on the JLayer or any of its subcomponents
javax.swing.plaf.LayerUI#processHierarchyEvent(HierarchyEvent, JLayer)->void:::Processes hierarchy event occurring on the JLayer or any of its subcomponents
javax.swing.plaf.LayerUI#processHierarchyBoundsEvent(HierarchyEvent, JLayer)->void:::Processes hierarchy bounds event occurring on the JLayer or any of its subcomponents
javax.swing.plaf.LayerUI#updateUI(JLayer)->void:::Invoked when javax.swing.JLayer#updateUI() is called by the JLayer this LayerUI is set to.
javax.swing.plaf.LayerUI#installUI(JComponent)->void:::Configures the JLayer this LayerUI is set to
javax.swing.plaf.LayerUI#uninstallUI(JComponent)->void:::Reverses the configuration which was previously set in the #installUI(JComponent) method
javax.swing.plaf.LayerUI#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
javax.swing.plaf.LayerUI#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
javax.swing.plaf.LayerUI#getPropertyChangeListeners()->PropertyChangeListener[]:::Returns an array of all the property change listeners registered on this component.
javax.swing.plaf.LayerUI#addPropertyChangeListener(String, PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list for a specific property
javax.swing.plaf.LayerUI#removePropertyChangeListener(String, PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list for a specific property
javax.swing.plaf.LayerUI#getPropertyChangeListeners(String)->PropertyChangeListener[]:::Returns an array of all the listeners which have been associated with the named property.
javax.swing.plaf.LayerUI#firePropertyChange(String, Object, Object)->void:::Support for reporting bound property changes for Object properties
javax.swing.plaf.LayerUI#applyPropertyChange(PropertyChangeEvent, JLayer)->void:::Notifies the LayerUI when any of its property are changed and enables updating every JLayer this LayerUI instance is set to.
javax.swing.plaf.LayerUI#getBaseline(JComponent, int, int)->int:::If the JLayer's view component is not null, this calls the view's getBaseline() method
javax.swing.plaf.LayerUI#getBaselineResizeBehavior(JComponent)->Component.BaselineResizeBehavior:::If the JLayer's view component is not null, this returns the result of the view's getBaselineResizeBehavior() method
javax.swing.plaf.LayerUI#doLayout(JLayer)->void:::Causes the passed instance of JLayer to lay out its components.
javax.swing.plaf.LayerUI#getPreferredSize(JComponent)->Dimension:::If the JLayer's view component is not null, this returns the result of  the view's getPreferredSize() method
javax.swing.plaf.LayerUI#getMinimumSize(JComponent)->Dimension:::If the JLayer's view component is not null, this returns the result of  the view's getMinimalSize() method
javax.swing.plaf.LayerUI#getMaximumSize(JComponent)->Dimension:::If the JLayer's view component is not null, this returns the result of  the view's getMaximumSize() method
javax.swing.plaf.LayerUI#paintImmediately(int, int, int, int, JLayer)->void:::Paints the specified region in the JLayer this LayerUI is set to, immediately
javax.swing.plaf.LayerUI#imageUpdate(Image, int, int, int, int, int, JLayer)->boolean:::Delegates its functionality to the default implementation of the JLayer.imageUpdate method which is inherited from JLayer's base classes
javax.swing.plaf.ListUI#locationToIndex(JList, Point)->int:::Returns the cell index in the specified JList closest to the given location in the list's coordinate system
javax.swing.plaf.ListUI#indexToLocation(JList, int)->Point:::Returns the origin in the given JList, of the specified item, in the list's coordinate system
javax.swing.plaf.ListUI#getCellBounds(JList, int, int)->Rectangle:::Returns the bounding rectangle, in the given list's coordinate system, for the range of cells specified by the two indices
javax.swing.plaf.OptionPaneUI#selectInitialValue(JOptionPane)->void:::Requests the component representing the default value to have focus.
javax.swing.plaf.OptionPaneUI#containsCustomComponents(JOptionPane)->boolean:::Returns true if the user has supplied instances of Component for either the options or message.
javax.swing.plaf.PopupMenuUI#isPopupTrigger(MouseEvent)->boolean:::Returns whether or not the given MouseEvent is the popup menu trigger event for the platform
javax.swing.plaf.PopupMenuUI#getPopup(JPopupMenu, int, int)->Popup:::Returns the Popup that will be responsible for displaying the JPopupMenu.
javax.swing.plaf.SplitPaneUI#resetToPreferredSizes(JSplitPane)->void:::Messaged to relayout the JSplitPane based on the preferred size of the children components.
javax.swing.plaf.SplitPaneUI#setDividerLocation(JSplitPane, int)->void:::Sets the location of the divider to location.
javax.swing.plaf.SplitPaneUI#getDividerLocation(JSplitPane)->int:::Returns the location of the divider.
javax.swing.plaf.SplitPaneUI#getMinimumDividerLocation(JSplitPane)->int:::Returns the minimum possible location of the divider.
javax.swing.plaf.SplitPaneUI#getMaximumDividerLocation(JSplitPane)->int:::Returns the maximum possible location of the divider.
javax.swing.plaf.SplitPaneUI#finishedPaintingChildren(JSplitPane, Graphics)->void:::Messaged after the JSplitPane the receiver is providing the look and feel for paints its children.
javax.swing.plaf.TabbedPaneUI#tabForCoordinate(JTabbedPane, int, int)->int:::Returns the tab for the coordinate.
javax.swing.plaf.TabbedPaneUI#getTabBounds(JTabbedPane, int)->Rectangle:::Returns the rectangle for the tab bounds.
javax.swing.plaf.TabbedPaneUI#getTabRunCount(JTabbedPane)->int:::Returns the tab run count.
javax.swing.plaf.TextUI#modelToView(JTextComponent, int)->Rectangle:::Converts the given location in the model to a place in the view coordinate system.
javax.swing.plaf.TextUI#modelToView(JTextComponent, int, Position.Bias)->Rectangle:::Converts the given location in the model to a place in the view coordinate system.
javax.swing.plaf.TextUI#modelToView2D(JTextComponent, int, Position.Bias)->Rectangle2D:::Converts the given location in the model to a place in the view coordinate system.
javax.swing.plaf.TextUI#viewToModel(JTextComponent, Point)->int:::Converts the given place in the view coordinate system to the nearest representative location in the model.
javax.swing.plaf.TextUI#viewToModel(JTextComponent, Point, Position.Bias[])->int:::Provides a mapping from the view coordinate space to the logical coordinate space of the model.
javax.swing.plaf.TextUI#viewToModel2D(JTextComponent, Point2D, Position.Bias[])->int:::Provides a mapping from the view coordinate space to the logical coordinate space of the model.
javax.swing.plaf.TextUI#getNextVisualPositionFrom(JTextComponent, int, Position.Bias, int, Position.Bias[])->int:::Provides a way to determine the next visually represented model location that one might place a caret
javax.swing.plaf.TextUI#damageRange(JTextComponent, int, int)->void:::Causes the portion of the view responsible for the given part of the model to be repainted.
javax.swing.plaf.TextUI#damageRange(JTextComponent, int, int, Position.Bias, Position.Bias)->void:::Causes the portion of the view responsible for the given part of the model to be repainted.
javax.swing.plaf.TextUI#getEditorKit(JTextComponent)->EditorKit:::Fetches the binding of services that set a policy for the type of document being edited
javax.swing.plaf.TextUI#getRootView(JTextComponent)->View:::Fetches a View with the allocation of the associated text component (i.e
javax.swing.plaf.TextUI#getToolTipText(JTextComponent, Point)->String:::Returns the string to be used as the tooltip at the passed in location.
javax.swing.plaf.TextUI#getToolTipText2D(JTextComponent, Point2D)->String:::Returns the string to be used as the tooltip at the passed in location.
javax.swing.plaf.TreeUI#getPathBounds(JTree, TreePath)->Rectangle:::Returns the Rectangle enclosing the label portion that the last item in path will be drawn into
javax.swing.plaf.TreeUI#getPathForRow(JTree, int)->TreePath:::Returns the path for passed in row
javax.swing.plaf.TreeUI#getRowForPath(JTree, TreePath)->int:::Returns the row that the last item identified in path is visible at
javax.swing.plaf.TreeUI#getRowCount(JTree)->int:::Returns the number of rows that are being displayed.
javax.swing.plaf.TreeUI#getClosestPathForLocation(JTree, int, int)->TreePath:::Returns the path to the node that is closest to x,y
javax.swing.plaf.TreeUI#isEditing(JTree)->boolean:::Returns true if the tree is being edited
javax.swing.plaf.TreeUI#stopEditing(JTree)->boolean:::Stops the current editing session
javax.swing.plaf.TreeUI#cancelEditing(JTree)->void:::Cancels the current editing session
javax.swing.plaf.TreeUI#startEditingAtPath(JTree, TreePath)->void:::Selects the last item in path and tries to edit it
javax.swing.plaf.TreeUI#getEditingPath(JTree)->TreePath:::Returns the path to the element that is being edited.

FileLoginModule#initialize(Subject, CallbackHandler, Map, Map):::Initialize this LoginModule.:::Util->cast->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->equalsIgnoreCase->options->get->if->try->System->getProperty->catch->finally
FileLoginModule#login():::Begin user authentication (Authentication Phase 1):::try->synchronized->if->new->HashedPasswordManager->hashPwdMgr->loadPasswords->catch->le->new->LoginException->throw->EnvHelp->initCause->if->throw->else->fp->new->FilePermission->ace->fp->toString->new->AccessControlException->ace->initCause->throw->finally->if->logger->debugOn->logger->debug->if->try->attemptAuthentication->if->logger->debugOn->logger->debug->return->catch->cleanState->logger->debug->finally->else->if->try->attemptAuthentication->if->logger->debugOn->logger->debug->return->catch->cleanState->logger->debug->throw->finally->if->logger->debugOn->logger->debug->try->attemptAuthentication->if->logger->debugOn->logger->debug->return->catch->cleanState->logger->debug->throw->finally
FileLoginModule#commit():::Complete user authentication (Authentication Phase 2):::if->return->else->if->subject->isReadOnly->cleanState->throw->new->LoginException->if->subject->getPrincipals->contains->subject->getPrincipals->add->if->logger->debugOn->logger->debug->cleanState->return
FileLoginModule#abort():::Abort user authentication (Authentication Phase 2):::if->logger->debugOn->logger->debug->if->return->else->if->cleanState->else->logout->return
FileLoginModule#logout():::Logout a user:::if->subject->isReadOnly->cleanState->throw->new->LoginException->subject->getPrincipals->remove->cleanState->if->logger->debugOn->logger->debug->return
FileLoginModule#attemptAuthentication(boolean):::Attempt authentication:::getUsernamePassword->if->hashPwdMgr->authenticate->if->logger->debugOn->logger->debug->throw->new->FailedLoginException->if->sharedState->containsKey->sharedState->containsKey->sharedState->put->sharedState->put->new->JMXPrincipal->if->logger->debugOn->logger->debug
FileLoginModule#getUsernamePassword(boolean):::Get the username and password:::if->sharedState->get->sharedState->get->return->if->throw->new->LoginException->callbacks->new->CallbackArr->new->NameCallback->new->PasswordCallback->try->callbackHandler->handle->getName->tmpPassword->getPassword->new->charArr->System->arraycopy->clearPassword->catch->le->ioe->toString->new->LoginException->throw->EnvHelp->initCause->le->uce->getCallback->toString->new->LoginException->throw->EnvHelp->initCause->finally
FileLoginModule#cleanState():::Clean out state because of a failed authentication attempt:::if->Arrays->fill->if->sharedState->remove->sharedState->remove
HashedPasswordManager.UserCredentials#toString()::: user credentials to string:::return
HashedPasswordManager#getHash(String, String)::: hashed password manager get hash:::try->salt->new->byteArr->random->nextBytes->digest->MessageDigest->getInstance->digest->reset->digest->update->hash->digest->password->getBytes->digest->saltStr->Base64->getEncoder->encodeToString->hashStr->Base64->getEncoder->encodeToString->return->new->StringArr->catch->if->logger->debugOn->logger->debug->return->new->StringArr->finally
HashedPasswordManager#readPasswordFile()::: hashed password manager read password file:::synchronized->data->f->new->File->try->fin->new->FileInputStream->lock->fin->getChannel->lock->f->length->new->byteArr->read->fin->read->if->throw->new->IOException->lock->release->catch->finally->str->new->String->return->str->split
HashedPasswordManager#writePasswordFile(String)::: hashed password manager write password file:::synchronized->try->fout->new->FileOutputStream->out->new->OutputStreamWriter->lock->fout->getChannel->lock->out->write->lock->release->catch->finally
HashedPasswordManager#authenticate(String, char[]):::Authenticate the supplied credentials against the one present in the file:::if->userCredentialsMap->containsKey->try->us->userCredentialsMap->get->salt->Base64->getDecoder->decode->targetHash->Base64->getDecoder->decode->digest->MessageDigest->getInstance->digest->reset->digest->update->byteBuffer->Charset->forName->CharBuffer->wrap->encode->passwordBytes->byteBuffer->limit->new->byteArr->byteBuffer->get->hash->digest->digest->return->Arrays->equals->catch->if->logger->debugOn->logger->userCredentialsMap->get->debug->return->finally->else->if->logger->debugOn->logger->debug->return
HashedPasswordManager#loadPasswords():::Load passwords from the password file:::security->System->getSecurityManager->if->security->checkRead->hasClearPasswords->new->AtomicBoolean->sbuf->new->StringBuilder->header->userCredentialsMap->clear->Arrays->readPasswordFile->stream->if->line->trim->startsWith->sbuf->append->append->return->tokens->line->split->switch->b64str->getHash->us->new->UserCredentials->sbuf->append->append->append->append->append->append->append->append->if->userCredentialsMap->get->if->logger->debugOn->logger->debug->userCredentialsMap->put->hasClearPasswords->set->if->logger->debugOn->logger->debug->break->us->new->UserCredentials->sbuf->append->append->if->userCredentialsMap->get->if->logger->debugOn->logger->debug->userCredentialsMap->put->break->sbuf->append->append->break->forEach->if->hasClearPasswords->get->if->logger->debugOn->logger->debug->if->sbuf->indexOf->sbuf->insert->if->hasClearPasswords->get->if->new->File->canWrite->sbuf->toString->writePasswordFile->if->logger->debugOn->logger->debug->else->if->logger->debugOn->logger->debug
JMXPluggableAuthenticator#authenticate(Object):::Authenticate the MBeanServerConnection client with the given client credentials.:::if->if->authenticationFailure->message->credentials->getClass->getName->authenticationFailure->aCredentials->if->message->authenticationFailure->if->message->authenticationFailure->try->loginContext->login->subject->loginContext->getSubject->AccessController->new->PrivilegedAction<Void>->doPrivileged->return->catch->authenticationFailure->finally->return
JMXPluggableAuthenticator#authenticationFailure(String, String)::: pluggable authenticator authentication failure:::msg->e->new->SecurityException->logException->throw
JMXPluggableAuthenticator#authenticationFailure(String, Exception)::: pluggable authenticator authentication failure:::msg->se->if->exception->getMessage->else->exception->getMessage->e->new->SecurityException->EnvHelp->initCause->logException->throw
JMXPluggableAuthenticator#logException(String, String, Exception)::: pluggable authenticator log exception:::if->logger->traceOn->logger->trace->if->logger->debugOn->logger->debug
JMXPluggableAuthenticator.JMXCallbackHandler#handle(Callback[]):::Sets the username and password in the appropriate Callback object.:::for->i
JMXPluggableAuthenticator.FileLoginConfig#getAppConfigurationEntry(String):::Gets the JAAS configuration for file-based authentication:::return->name->equals
JMXPluggableAuthenticator.FileLoginConfig#refresh():::Refreshes the configuration.:::
JMXSubjectDomainCombiner#combine(ProtectionDomain[], ProtectionDomain[])::: subject domain combiner combine:::newCurrent->if->new->ProtectionDomainArr->else->new->ProtectionDomainArr->for->i->return->super->combine
JMXSubjectDomainCombiner#getContext(Subject):::Get the current AccessControlContext combined with the supplied subject.:::return->AccessController->getContext->new->JMXSubjectDomainCombiner->new->AccessControlContext
JMXSubjectDomainCombiner#getDomainCombinerContext(Subject):::Get the AccessControlContext of the domain combiner created with the supplied subject, i.e:::return->new->ProtectionDomainArr->new->AccessControlContext->new->JMXSubjectDomainCombiner->new->AccessControlContext
MBeanServerAccessController#getMBeanServer()::: bean server access controller get bean server:::return
MBeanServerAccessController#setMBeanServer(MBeanServer)::: bean server access controller set bean server:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
MBeanServerAccessController#checkRead():::Check if the caller can do read operations:::
MBeanServerAccessController#checkWrite():::Check if the caller can do write operations:::
MBeanServerAccessController#checkCreate(String):::Check if the caller can create the named class:::checkWrite
MBeanServerAccessController#checkUnregister(ObjectName):::Check if the caller can unregister the named MBean:::checkWrite
MBeanServerAccessController#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->getMBeanServer->addNotificationListener
MBeanServerAccessController#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->getMBeanServer->addNotificationListener
MBeanServerAccessController#createMBean(String, ObjectName):::Call checkCreate(className), then forward this method to the wrapped object.:::checkCreate->sm->System->getSecurityManager->if->object->getMBeanServer->instantiate->checkClassLoader->return->getMBeanServer->registerMBean->else->return->getMBeanServer->createMBean
MBeanServerAccessController#createMBean(String, ObjectName, Object[], String[]):::Call checkCreate(className), then forward this method to the wrapped object.:::checkCreate->sm->System->getSecurityManager->if->object->getMBeanServer->instantiate->checkClassLoader->return->getMBeanServer->registerMBean->else->return->getMBeanServer->createMBean
MBeanServerAccessController#createMBean(String, ObjectName, ObjectName):::Call checkCreate(className), then forward this method to the wrapped object.:::checkCreate->sm->System->getSecurityManager->if->object->getMBeanServer->instantiate->checkClassLoader->return->getMBeanServer->registerMBean->else->return->getMBeanServer->createMBean
MBeanServerAccessController#createMBean(String, ObjectName, ObjectName, Object[], String[]):::Call checkCreate(className), then forward this method to the wrapped object.:::checkCreate->sm->System->getSecurityManager->if->object->getMBeanServer->instantiate->checkClassLoader->return->getMBeanServer->registerMBean->else->return->getMBeanServer->createMBean
MBeanServerAccessController#deserialize(ObjectName, byte[]):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->deserialize
MBeanServerAccessController#deserialize(String, byte[]):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->deserialize
MBeanServerAccessController#deserialize(String, ObjectName, byte[]):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->deserialize
MBeanServerAccessController#getAttribute(ObjectName, String):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getAttribute
MBeanServerAccessController#getAttributes(ObjectName, String[]):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getAttributes
MBeanServerAccessController#getClassLoader(ObjectName):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getClassLoader
MBeanServerAccessController#getClassLoaderFor(ObjectName):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getClassLoaderFor
MBeanServerAccessController#getClassLoaderRepository():::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getClassLoaderRepository
MBeanServerAccessController#getDefaultDomain():::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getDefaultDomain
MBeanServerAccessController#getDomains():::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getDomains
MBeanServerAccessController#getMBeanCount():::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getMBeanCount
MBeanServerAccessController#getMBeanInfo(ObjectName):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getMBeanInfo
MBeanServerAccessController#getObjectInstance(ObjectName):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->getObjectInstance
MBeanServerAccessController#instantiate(String):::Call checkCreate(className), then forward this method to the wrapped object.:::checkCreate->return->getMBeanServer->instantiate
MBeanServerAccessController#instantiate(String, Object[], String[]):::Call checkCreate(className), then forward this method to the wrapped object.:::checkCreate->return->getMBeanServer->instantiate
MBeanServerAccessController#instantiate(String, ObjectName):::Call checkCreate(className), then forward this method to the wrapped object.:::checkCreate->return->getMBeanServer->instantiate
MBeanServerAccessController#instantiate(String, ObjectName, Object[], String[]):::Call checkCreate(className), then forward this method to the wrapped object.:::checkCreate->return->getMBeanServer->instantiate
MBeanServerAccessController#invoke(ObjectName, String, Object[], String[]):::Call checkWrite(), then forward this method to the wrapped object.:::checkWrite->checkMLetMethods->return->getMBeanServer->invoke
MBeanServerAccessController#isInstanceOf(ObjectName, String):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->isInstanceOf
MBeanServerAccessController#isRegistered(ObjectName):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->isRegistered
MBeanServerAccessController#queryMBeans(ObjectName, QueryExp):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->queryMBeans
MBeanServerAccessController#queryNames(ObjectName, QueryExp):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->return->getMBeanServer->queryNames
MBeanServerAccessController#registerMBean(Object, ObjectName):::Call checkWrite(), then forward this method to the wrapped object.:::checkWrite->return->getMBeanServer->registerMBean
MBeanServerAccessController#removeNotificationListener(ObjectName, NotificationListener):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->getMBeanServer->removeNotificationListener
MBeanServerAccessController#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->getMBeanServer->removeNotificationListener
MBeanServerAccessController#removeNotificationListener(ObjectName, ObjectName):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->getMBeanServer->removeNotificationListener
MBeanServerAccessController#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object):::Call checkRead(), then forward this method to the wrapped object.:::checkRead->getMBeanServer->removeNotificationListener
MBeanServerAccessController#setAttribute(ObjectName, Attribute):::Call checkWrite(), then forward this method to the wrapped object.:::checkWrite->getMBeanServer->setAttribute
MBeanServerAccessController#setAttributes(ObjectName, AttributeList):::Call checkWrite(), then forward this method to the wrapped object.:::checkWrite->return->getMBeanServer->setAttributes
MBeanServerAccessController#unregisterMBean(ObjectName):::Call checkUnregister(), then forward this method to the wrapped object.:::checkUnregister->getMBeanServer->unregisterMBean
MBeanServerAccessController#checkClassLoader(Object)::: bean server access controller check class loader:::if->throw->new->SecurityException
MBeanServerAccessController#checkMLetMethods(ObjectName, String)::: bean server access controller check let methods:::sm->System->getSecurityManager->if->return->if->operation->equals->operation->equals->return->if->getMBeanServer->isInstanceOf->return->if->operation->equals->throw->new->SecurityException->else->propName->propAction->new->GetPropertyAction->propValue->AccessController->doPrivileged->allowGetMBeansFromURL->equalsIgnoreCase->if->throw->new->SecurityException
MBeanServerFileAccessController#checkRead():::Check if the caller can do read operations:::checkAccess
MBeanServerFileAccessController#checkWrite():::Check if the caller can do write operations:::checkAccess
MBeanServerFileAccessController#checkCreate(String):::Check if the caller can create MBeans or instances of the given class:::checkAccess
MBeanServerFileAccessController#checkUnregister(ObjectName):::Check if the caller can do unregister operations:::checkAccess
MBeanServerFileAccessController#refresh():::Refresh the set of username/access level entries.  If this instance was created using the #MBeanServerFileAccessController(String) or #MBeanServerFileAccessController(String,MBeanServer) constructors to specify a file from which the entries are read, the file is re-read.  If this instance was created using the #MBeanServerFileAccessController(Properties) or #MBeanServerFileAccessController(Properties,MBeanServer) constructors then a new copy of the Properties object is made.:::props->if->else->propertiesFromFile->parseProperties
MBeanServerFileAccessController#propertiesFromFile(String)::: bean server file access controller properties from file:::fin->new->FileInputStream->try->p->new->Properties->p->load->return->catch->finally->fin->close
MBeanServerFileAccessController#checkAccess(AccessType, String)::: bean server file access controller check access:::acc->AccessController->getContext->s->AccessController->new->PrivilegedAction<Subject>->doPrivileged->if->return->principals->s->getPrincipals->newPropertyValue->for->i->principals->iterator->i->hasNext->se->new->SecurityException->if->se2->new->SecurityException->se->initCause->throw
MBeanServerFileAccessController#checkCreateAccess(Access, String)::: bean server file access controller check create access:::foreach->if->classNameMatch->return->return
MBeanServerFileAccessController#classNameMatch(String, String)::: bean server file access controller class name match:::sb->new->StringBuilder->stok->new->StringTokenizer->while->stok->hasMoreTokens->tok->stok->nextToken->if->tok->equals->sb->append->else->sb->Pattern->quote->append->return->className->sb->toString->matches
MBeanServerFileAccessController#parseProperties(Properties)::: bean server file access controller parse properties:::new->HashMap<String,Access>->foreach->props->entrySet->identity->entry->getKey->accessString->entry->getValue->access->Parser->parseAccess->accessMap->put
MBeanServerFileAccessController.Parser#parseAccess(String, String)::: parser parse access:::return->new->Parser->parseAccess
MBeanServerFileAccessController.Parser#parseAccess()::: parser parse access:::skipSpace->type->parseWord->access->if->type->equals->new->Access->else->if->type->equals->parseReadWrite->else->throw->syntax->if->throw->syntax->return
MBeanServerFileAccessController.Parser#parseReadWrite()::: parser parse read write:::createClasses->new->ArrayList<String>->unregister->while->skipSpace->if->break->type->parseWord->if->type->equals->else->if->type->equals->parseCreate->else->throw->syntax->return->new->Access
MBeanServerFileAccessController.Parser#parseCreate(List)::: parser parse create:::while->skipSpace->createClasses->parseClassName->add->skipSpace->if->next->else->break
MBeanServerFileAccessController.Parser#parseClassName()::: parser parse class name:::start->dotOK->while->if->if->throw->syntax->else->if->Character->isJavaIdentifierPart->else->break->next->className->s->substring->if->throw->syntax->return
MBeanServerFileAccessController.Parser#next()::: parser next:::if->Character->charCount->if->s->codePointAt->else
MBeanServerFileAccessController.Parser#skipSpace()::: parser skip space:::while->Character->isWhitespace->next
MBeanServerFileAccessController.Parser#parseWord()::: parser parse word:::skipSpace->if->throw->syntax->start->while->Character->isWhitespace->next->word->s->substring->skipSpace->return
MBeanServerFileAccessController.Parser#syntax(String)::: parser syntax:::return->new->IllegalArgumentException
NotificationAccessController#addNotificationListener(String, ObjectName, Subject):::This method is called when a remote javax.management.remote.JMXConnector invokes the method javax.management.MBeanServerConnection#addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object).:::
NotificationAccessController#removeNotificationListener(String, ObjectName, Subject):::This method is called when a remote javax.management.remote.JMXConnector invokes the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener) or the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object).:::
NotificationAccessController#fetchNotification(String, ObjectName, Notification, Subject):::This method is called before the javax.management.remote.JMXConnectorServer forwards the notification to the interested remote listener represented by the authenticated subject.:::
SubjectDelegator#delegatedContext(AccessControlContext, Subject, boolean)::: subject delegator delegated context:::if->System->getSecurityManager->throw->new->SecurityException->ps->getSubjectPrincipals->permissions->ps->size->new->ArrayList<>->foreach->pname->p->getClass->getName->p->getName->permissions->new->SubjectDelegationPermission->add->action->new->PrivilegedAction<Void>->AccessController->doPrivileged->return->getDelegatedAcc
SubjectDelegator#getDelegatedAcc(Subject, boolean)::: subject delegator get delegated acc:::if->return->JMXSubjectDomainCombiner->getDomainCombinerContext->else->return->JMXSubjectDomainCombiner->getContext
SubjectDelegator#checkRemoveCallerContext(Subject):::Check if the connector server creator can assume the identity of each principal in the authenticated subject, i.e:::try->foreach->getSubjectPrincipals->pname->p->getClass->getName->p->getName->sdp->new->SubjectDelegationPermission->AccessController->checkPermission->catch->return->finally->return
SubjectDelegator#getSubjectPrincipals(Subject):::Retrieves the Subject principals:::if->subject->isReadOnly->return->subject->getPrincipals->principals->Arrays->subject->getPrincipals->new->PrincipalArr->toArray->asList->return->Collections->unmodifiableList

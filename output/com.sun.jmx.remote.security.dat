com.sun.jmx.remote.security.FileLoginModule#initialize(Subject, CallbackHandler, Map, Map)->void:::Initialize this LoginModule.
com.sun.jmx.remote.security.FileLoginModule#login()->boolean:::Begin user authentication (Authentication Phase 1)
com.sun.jmx.remote.security.FileLoginModule#commit()->boolean:::Complete user authentication (Authentication Phase 2)
com.sun.jmx.remote.security.FileLoginModule#abort()->boolean:::Abort user authentication (Authentication Phase 2)
com.sun.jmx.remote.security.FileLoginModule#logout()->boolean:::Logout a user
com.sun.jmx.remote.security.HashedPasswordManager#authenticate(String, char[])->boolean:::Authenticate the supplied credentials against the one present in the file
com.sun.jmx.remote.security.HashedPasswordManager#loadPasswords()->void:::Load passwords from the password file
com.sun.jmx.remote.security.JMXPluggableAuthenticator#authenticate(Object)->Subject:::Authenticate the MBeanServerConnection client with the given client credentials.
com.sun.jmx.remote.security.JMXSubjectDomainCombiner#combine(ProtectionDomain[], ProtectionDomain[])->ProtectionDomain[]::: subject domain combiner combine
com.sun.jmx.remote.security.JMXSubjectDomainCombiner#getContext(Subject)->AccessControlContext:::Get the current AccessControlContext combined with the supplied subject.
com.sun.jmx.remote.security.JMXSubjectDomainCombiner#getDomainCombinerContext(Subject)->AccessControlContext:::Get the AccessControlContext of the domain combiner created with the supplied subject, i.e
com.sun.jmx.remote.security.MBeanServerAccessController#getMBeanServer()->MBeanServer::: bean server access controller get bean server
com.sun.jmx.remote.security.MBeanServerAccessController#setMBeanServer(MBeanServer)->void::: bean server access controller set bean server
com.sun.jmx.remote.security.MBeanServerAccessController#checkRead()->void:::Check if the caller can do read operations
com.sun.jmx.remote.security.MBeanServerAccessController#checkWrite()->void:::Check if the caller can do write operations
com.sun.jmx.remote.security.MBeanServerAccessController#checkCreate(String)->void:::Check if the caller can create the named class
com.sun.jmx.remote.security.MBeanServerAccessController#checkUnregister(ObjectName)->void:::Check if the caller can unregister the named MBean
com.sun.jmx.remote.security.MBeanServerAccessController#addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)->void:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)->void:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#createMBean(String, ObjectName)->ObjectInstance:::Call checkCreate(className), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#createMBean(String, ObjectName, Object[], String[])->ObjectInstance:::Call checkCreate(className), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#createMBean(String, ObjectName, ObjectName)->ObjectInstance:::Call checkCreate(className), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#createMBean(String, ObjectName, ObjectName, Object[], String[])->ObjectInstance:::Call checkCreate(className), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#deserialize(ObjectName, byte[])->ObjectInputStream:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#deserialize(String, byte[])->ObjectInputStream:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#deserialize(String, ObjectName, byte[])->ObjectInputStream:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getAttribute(ObjectName, String)->Object:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getAttributes(ObjectName, String[])->AttributeList:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getClassLoader(ObjectName)->ClassLoader:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getClassLoaderFor(ObjectName)->ClassLoader:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getClassLoaderRepository()->ClassLoaderRepository:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getDefaultDomain()->String:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getDomains()->String[]:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getMBeanCount()->Integer:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getMBeanInfo(ObjectName)->MBeanInfo:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#getObjectInstance(ObjectName)->ObjectInstance:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#instantiate(String)->Object:::Call checkCreate(className), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#instantiate(String, Object[], String[])->Object:::Call checkCreate(className), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#instantiate(String, ObjectName)->Object:::Call checkCreate(className), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#instantiate(String, ObjectName, Object[], String[])->Object:::Call checkCreate(className), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#invoke(ObjectName, String, Object[], String[])->Object:::Call checkWrite(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#isInstanceOf(ObjectName, String)->boolean:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#isRegistered(ObjectName)->boolean:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#queryMBeans(ObjectName, QueryExp)->Set:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#queryNames(ObjectName, QueryExp)->Set:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#registerMBean(Object, ObjectName)->ObjectInstance:::Call checkWrite(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#removeNotificationListener(ObjectName, NotificationListener)->void:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)->void:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#removeNotificationListener(ObjectName, ObjectName)->void:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#removeNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)->void:::Call checkRead(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#setAttribute(ObjectName, Attribute)->void:::Call checkWrite(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#setAttributes(ObjectName, AttributeList)->AttributeList:::Call checkWrite(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerAccessController#unregisterMBean(ObjectName)->void:::Call checkUnregister(), then forward this method to the wrapped object.
com.sun.jmx.remote.security.MBeanServerFileAccessController#checkRead()->void:::Check if the caller can do read operations
com.sun.jmx.remote.security.MBeanServerFileAccessController#checkWrite()->void:::Check if the caller can do write operations
com.sun.jmx.remote.security.MBeanServerFileAccessController#checkCreate(String)->void:::Check if the caller can create MBeans or instances of the given class
com.sun.jmx.remote.security.MBeanServerFileAccessController#checkUnregister(ObjectName)->void:::Check if the caller can do unregister operations
com.sun.jmx.remote.security.MBeanServerFileAccessController#refresh()->void:::Refresh the set of username/access level entries.  If this instance was created using the #MBeanServerFileAccessController(String) or #MBeanServerFileAccessController(String,MBeanServer) constructors to specify a file from which the entries are read, the file is re-read.  If this instance was created using the #MBeanServerFileAccessController(Properties) or #MBeanServerFileAccessController(Properties,MBeanServer) constructors then a new copy of the Properties object is made.
com.sun.jmx.remote.security.NotificationAccessController#addNotificationListener(String, ObjectName, Subject)->void:::This method is called when a remote javax.management.remote.JMXConnector invokes the method javax.management.MBeanServerConnection#addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object).
com.sun.jmx.remote.security.NotificationAccessController#removeNotificationListener(String, ObjectName, Subject)->void:::This method is called when a remote javax.management.remote.JMXConnector invokes the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener) or the method javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object).
com.sun.jmx.remote.security.NotificationAccessController#fetchNotification(String, ObjectName, Notification, Subject)->void:::This method is called before the javax.management.remote.JMXConnectorServer forwards the notification to the interested remote listener represented by the authenticated subject.
com.sun.jmx.remote.security.SubjectDelegator#delegatedContext(AccessControlContext, Subject, boolean)->AccessControlContext::: subject delegator delegated context
com.sun.jmx.remote.security.SubjectDelegator#checkRemoveCallerContext(Subject)->boolean:::Check if the connector server creator can assume the identity of each principal in the authenticated subject, i.e

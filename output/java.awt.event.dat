ActionEvent#getActionCommand():::Returns the command string associated with this action:::return
ActionEvent#getWhen():::Returns the timestamp of when this event occurred:::return
ActionEvent#getModifiers():::Returns the modifier keys held down during this action event.:::return
ActionEvent#paramString():::Returns a parameter string identifying this action event:::typeStr->switch->break->return->KeyEvent->getKeyModifiersText
ActionListener#actionPerformed(ActionEvent):::Invoked when an action occurs.:::
AdjustmentEvent#getAdjustable():::Returns the Adjustable object where this event originated.:::return
AdjustmentEvent#getValue():::Returns the current value in the adjustment event.:::return
AdjustmentEvent#getAdjustmentType():::Returns the type of adjustment which caused the value changed event:::return
AdjustmentEvent#getValueIsAdjusting():::Returns true if this is one of multiple adjustment events.:::return
AdjustmentEvent#paramString()::: adjustment event param string:::typeStr->switch->break->adjTypeStr->switch->break->break->break->break->break->return
AdjustmentListener#adjustmentValueChanged(AdjustmentEvent):::Invoked when the value of the adjustable has changed.:::
AWTEventListener#eventDispatched(AWTEvent):::Invoked when an event is dispatched in the AWT.:::
AWTEventListenerProxy#eventDispatched(AWTEvent):::Forwards the AWT event to the listener delegate.:::getListener->eventDispatched
AWTEventListenerProxy#getEventMask():::Returns the event mask associated with the listener.:::return
ComponentAdapter#componentResized(ComponentEvent):::Invoked when the component's size changes.:::
ComponentAdapter#componentMoved(ComponentEvent):::Invoked when the component's position changes.:::
ComponentAdapter#componentShown(ComponentEvent):::Invoked when the component has been made visible.:::
ComponentAdapter#componentHidden(ComponentEvent):::Invoked when the component has been made invisible.:::
ComponentEvent#getComponent():::Returns the originator of the event.:::return
ComponentEvent#paramString():::Returns a parameter string identifying this event:::typeStr->b->getBounds->switch->break->break->break->break->return
ComponentListener#componentResized(ComponentEvent):::Invoked when the component's size changes.:::
ComponentListener#componentMoved(ComponentEvent):::Invoked when the component's position changes.:::
ComponentListener#componentShown(ComponentEvent):::Invoked when the component has been made visible.:::
ComponentListener#componentHidden(ComponentEvent):::Invoked when the component has been made invisible.:::
ContainerAdapter#componentAdded(ContainerEvent):::Invoked when a component has been added to the container.:::
ContainerAdapter#componentRemoved(ContainerEvent):::Invoked when a component has been removed from the container.:::
ContainerEvent#getContainer():::Returns the originator of the event.:::return
ContainerEvent#getChild():::Returns the component that was affected by the event.:::return
ContainerEvent#paramString():::Returns a parameter string identifying this event:::typeStr->switch->break->break->return->child->getName
ContainerListener#componentAdded(ContainerEvent):::Invoked when a component has been added to the container.:::
ContainerListener#componentRemoved(ContainerEvent):::Invoked when a component has been removed from the container.:::
FocusAdapter#focusGained(FocusEvent):::Invoked when a component gains the keyboard focus.:::
FocusAdapter#focusLost(FocusEvent):::Invoked when a component loses the keyboard focus.:::
FocusEvent#isTemporary():::Identifies the focus change event as temporary or permanent.:::return
FocusEvent#getOppositeComponent():::Returns the other Component involved in this focus change:::if->return->return->SunToolkit->targetToAppContext->AppContext->getAppContext
FocusEvent#paramString():::Returns a parameter string identifying this event:::typeStr->switch->break->break->return->getOppositeComponent->getCause
FocusEvent#getCause():::Returns the event cause.:::return
FocusEvent#readResolve():::Checks if this deserialized FocusEvent instance is compatible with the current specification which implies that focus event has non-null cause value:::if->return->focusEvent->new->Component->getID->isTemporary->getOppositeComponent->new->FocusEvent->focusEvent->setSource->accessor->AWTAccessor->getAWTEventAccessor->accessor->accessor->getBData->setBData->return
FocusListener#focusGained(FocusEvent):::Invoked when a component gains the keyboard focus.:::
FocusListener#focusLost(FocusEvent):::Invoked when a component loses the keyboard focus.:::
HierarchyBoundsAdapter#ancestorMoved(HierarchyEvent):::Called when an ancestor of the source is moved.:::
HierarchyBoundsAdapter#ancestorResized(HierarchyEvent):::Called when an ancestor of the source is resized.:::
HierarchyBoundsListener#ancestorMoved(HierarchyEvent):::Called when an ancestor of the source is moved.:::
HierarchyBoundsListener#ancestorResized(HierarchyEvent):::Called when an ancestor of the source is resized.:::
HierarchyEvent#getComponent():::Returns the originator of the event.:::return
HierarchyEvent#getChanged():::Returns the Component at the top of the hierarchy which was changed.:::return
HierarchyEvent#getChangedParent():::Returns the parent of the Component returned by getChanged():::return
HierarchyEvent#getChangeFlags():::Returns a bitmask which indicates the type(s) of HIERARCHY_CHANGED events represented in this event object:::return
HierarchyEvent#paramString():::Returns a parameter string identifying this event:::typeStr->switch->break->break->first->if->if->if->else->if->if->else->if->break->return
HierarchyListener#hierarchyChanged(HierarchyEvent):::Called when the hierarchy has been changed:::
InputEvent#getButtonDownMasks():::A method to access an array of extended modifiers for additional buttons.:::return->Arrays->copyOf
InputEvent#getMaskForButton(int):::A method to obtain a mask for any existing mouse button:::if->throw->new->IllegalArgumentException->return
InputEvent#initIDs():::Initialize JNI field and method IDs for fields that may be        accessed from C.:::
InputEvent#canAccessSystemClipboard()::: input event can access system clipboard:::b->if->GraphicsEnvironment->isHeadless->sm->System->getSecurityManager->if->try->sm->checkPermission->catch->if->logger->isLoggable->logger->fine->finally->else->return
InputEvent#isShiftDown():::Returns whether or not the Shift modifier is down on this event.:::return
InputEvent#isControlDown():::Returns whether or not the Control modifier is down on this event.:::return
InputEvent#isMetaDown():::Returns whether or not the Meta modifier is down on this event.:::return
InputEvent#isAltDown():::Returns whether or not the Alt modifier is down on this event.:::return
InputEvent#isAltGraphDown():::Returns whether or not the AltGraph modifier is down on this event.:::return
InputEvent#getWhen():::Returns the difference in milliseconds between the timestamp of when this event occurred and midnight, January 1, 1970 UTC.:::return
InputEvent#getModifiers():::Returns the modifier mask for this event.:::return
InputEvent#getModifiersEx():::Returns the extended modifier mask for this event:::return
InputEvent#consume():::Consumes this event so that it will not be processed in the default manner by the source which originated it.:::
InputEvent#isConsumed():::Returns whether or not this event has been consumed.:::return
InputEvent#getModifiersExText(int):::Returns a String describing the extended modifier keys and mouse buttons, such as "Shift", "Button1", or "Ctrl+Shift":::buf->new->StringBuilder->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->buttonNumber->foreach->if->buf->Toolkit->getProperty->append->buf->append->if->buf->length->buf->buf->length->setLength->return->buf->toString
InputMethodEvent#getText():::Gets the combined committed and composed text:::return
InputMethodEvent#getCommittedCharacterCount():::Gets the number of committed characters in the text.:::return
InputMethodEvent#getCaret():::Gets the caret:::return
InputMethodEvent#getVisiblePosition():::Gets the position that's most important to be visible:::return
InputMethodEvent#consume():::Consumes this event so that it will not be processed in the default manner by the source which originated it.:::
InputMethodEvent#isConsumed():::Returns whether or not this event has been consumed.:::return
InputMethodEvent#getWhen():::Returns the time stamp of when this event occurred.:::return
InputMethodEvent#paramString():::Returns a parameter string identifying this event:::typeStr->switch->break->break->textString->if->else->textBuffer->new->StringBuilder->committedCharacterCount->c->text->first->while->textBuffer->append->text->next->textBuffer->append->while->textBuffer->append->text->next->textBuffer->append->textBuffer->toString->countString->caretString->if->else->caret->toString->visiblePositionString->if->else->visiblePosition->toString->return
InputMethodEvent#readObject(ObjectInputStream):::Initializes the when field if it is not present in the object input stream:::s->defaultReadObject->if->EventQueue->getMostRecentEventTime
InputMethodEvent#getMostRecentEventTimeForSource(Object):::Get the most recent event time in the EventQueue which the source belongs to.:::if->throw->new->IllegalArgumentException->appContext->SunToolkit->targetToAppContext->eventQueue->SunToolkit->getSystemEventQueueImplPP->return->AWTAccessor->getEventQueueAccessor->getMostRecentEventTime
InputMethodListener#inputMethodTextChanged(InputMethodEvent):::Invoked when the text entered through an input method has changed.:::
InputMethodListener#caretPositionChanged(InputMethodEvent):::Invoked when the caret within composed text has changed.:::
InvocationEvent#dispatch():::Executes the Runnable's run() method and notifies the notifier (if any) when run() has returned or thrown an exception.:::try->if->try->runnable->run->catch->if->finally->else->runnable->run->catch->finally->finishedDispatching
InvocationEvent#getException():::Returns any Exception caught while executing the Runnable's run() method.:::return
InvocationEvent#getThrowable():::Returns any Throwable caught while executing the Runnable's run() method.:::return
InvocationEvent#getWhen():::Returns the timestamp of when this event occurred.:::return
InvocationEvent#isDispatched():::Returns true if the event is dispatched or any exception is thrown while dispatching, false otherwise:::return
InvocationEvent#finishedDispatching(boolean):::Called when the event was dispatched or disposed:::if->synchronized->notifier->notifyAll->if->listener->run
InvocationEvent#paramString():::Returns a parameter string identifying this event:::typeStr->switch->break->return
ItemEvent#getItemSelectable():::Returns the originator of the event.:::return
ItemEvent#getItem():::Returns the item affected by the event.:::return
ItemEvent#getStateChange():::Returns the type of state change (selected or deselected).:::return
ItemEvent#paramString():::Returns a parameter string identifying this item event:::typeStr->switch->break->stateStr->switch->break->break->return
ItemListener#itemStateChanged(ItemEvent):::Invoked when an item has been selected or deselected by the user:::
KeyAdapter#keyTyped(KeyEvent):::Invoked when a key has been typed:::
KeyAdapter#keyPressed(KeyEvent):::Invoked when a key has been pressed.:::
KeyAdapter#keyReleased(KeyEvent):::Invoked when a key has been released.:::
KeyEvent#initIDs():::Initialize JNI field and method IDs for fields that may be accessed from C.:::
KeyEvent#getKeyCode():::Returns the integer keyCode associated with the key in this event.:::return
KeyEvent#setKeyCode(int):::Set the keyCode value to indicate a physical key.:::
KeyEvent#getKeyChar():::Returns the character associated with the key in this event:::return
KeyEvent#setKeyChar(char):::Set the keyChar value to indicate a logical character.:::
KeyEvent#setModifiers(int):::Set the modifiers to indicate additional keys that were held down (e.g:::if->getModifiers->getModifiersEx->setNewModifiers->else->if->getModifiers->getModifiersEx->setOldModifiers
KeyEvent#getKeyLocation():::Returns the location of the key that originated this key event:::return
KeyEvent#getKeyText(int):::Returns a String describing the keyCode, such as "HOME", "F1" or "A":::if->return->String->valueOf->switch->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->return->Toolkit->getProperty->if->numpad->Toolkit->getProperty->c->return->if->return->String->valueOf->unknown->Toolkit->getProperty->return->Integer->toString
KeyEvent#getKeyModifiersText(int):::Returns a String describing the modifier key(s), such as "Shift", or "Ctrl+Shift":::buf->new->StringBuilder->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->length->buf->buf->length->setLength->return->buf->toString
KeyEvent#isActionKey():::Returns whether the key in this event is an "action" key:::switch->return->return
KeyEvent#paramString():::Returns a parameter string identifying this event:::str->new->StringBuilder->switch->str->append->break->str->append->break->str->append->break->str->append->break->str->append->append->str->append->getKeyText->append->str->append->switch->str->getKeyText->append->break->str->getKeyText->append->break->str->getKeyText->append->break->str->getKeyText->append->break->str->getKeyText->append->break->str->getKeyText->append->break->str->Toolkit->getProperty->append->str->append->break->str->append->append->append->break->if->getModifiers->str->append->getKeyModifiersText->append->if->getModifiersEx->str->append->getModifiersExText->append->str->append->switch->str->append->break->str->append->break->str->append->break->str->append->break->str->append->break->str->append->break->str->append->append->str->append->append->str->append->append->str->append->Long->toHexString->append->return->str->toString
KeyEvent#getExtendedKeyCode():::Returns an extended key code for the event:::return
KeyEvent#getExtendedKeyCodeForChar(int):::Returns an extended key code for a unicode character.:::return->getExtendedKeyCodeForChar
KeyEvent#setNewModifiers():::Sets new modifiers by the old ones:::if->if->if->if->if->if
KeyEvent#setOldModifiers():::Sets old modifiers by the new ones.:::if->if->if->if->if->if
KeyEvent#readObject(ObjectInputStream):::Sets new modifiers by the old ones:::s->defaultReadObject->if->getModifiers->getModifiersEx->setNewModifiers
KeyListener#keyTyped(KeyEvent):::Invoked when a key has been typed:::
KeyListener#keyPressed(KeyEvent):::Invoked when a key has been pressed:::
KeyListener#keyReleased(KeyEvent):::Invoked when a key has been released:::
MouseAdapter#mouseClicked(MouseEvent)::: mouse adapter mouse clicked:::
MouseAdapter#mousePressed(MouseEvent)::: mouse adapter mouse pressed:::
MouseAdapter#mouseReleased(MouseEvent)::: mouse adapter mouse released:::
MouseAdapter#mouseEntered(MouseEvent)::: mouse adapter mouse entered:::
MouseAdapter#mouseExited(MouseEvent)::: mouse adapter mouse exited:::
MouseAdapter#mouseWheelMoved(MouseWheelEvent)::: mouse adapter mouse wheel moved:::
MouseAdapter#mouseDragged(MouseEvent)::: mouse adapter mouse dragged:::
MouseAdapter#mouseMoved(MouseEvent)::: mouse adapter mouse moved:::
MouseEvent#initIDs():::Initialize JNI field and method IDs for fields that may be  accessed from C.:::
MouseEvent#getLocationOnScreen():::Returns the absolute x, y position of the event:::return->new->Point
MouseEvent#getXOnScreen():::Returns the absolute horizontal x position of the event:::return
MouseEvent#getYOnScreen():::Returns the absolute vertical y position of the event:::return
MouseEvent#getModifiersEx()::: mouse event get modifiers ex:::tmpModifiers->if->InputEvent->getButton->getMaskForButton->return
MouseEvent#getX():::Returns the horizontal x position of the event relative to the source component.:::return
MouseEvent#getY():::Returns the vertical y position of the event relative to the source component.:::return
MouseEvent#getPoint():::Returns the x,y position of the event relative to the source component.:::x->y->synchronized->return->new->Point
MouseEvent#translatePoint(int, int):::Translates the event's coordinates to a new position by adding specified x (horizontal) and y (vertical) offsets.:::
MouseEvent#getClickCount():::Returns the number of mouse clicks associated with this event.:::return
MouseEvent#getButton():::Returns which, if any, of the mouse buttons has changed state:::return
MouseEvent#isPopupTrigger():::Returns whether or not this mouse event is the popup menu trigger event for the platform:::return
MouseEvent#getMouseModifiersText(int):::Returns a String instance describing the modifier keys and mouse buttons that were down during the event, such as "Shift", or "Ctrl+Shift":::buf->new->StringBuilder->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->if->buf->Toolkit->getProperty->append->buf->append->mask->for->i->if->buf->length->buf->buf->length->setLength->return->buf->toString
MouseEvent#paramString():::Returns a parameter string identifying this event:::str->new->StringBuilder->switch->str->append->break->str->append->break->str->append->break->str->append->break->str->append->break->str->append->break->str->append->break->str->append->break->str->append->str->append->append->append->append->append->str->append->append->append->append->append->if->str->append->getButton->append->if->getModifiers->str->append->getMouseModifiersText->append->if->getModifiersEx->str->append->getModifiersEx->getModifiersExText->append->str->append->append->return->str->toString
MouseEvent#setNewModifiers():::Sets new modifiers by the old ones:::if->if->if->if->if->if->else->if->if->else->if->if->if->if->if->if->if
MouseEvent#setOldModifiers():::Sets old modifiers by the new ones.:::if->switch->break->break->break->else->if->if->if->if->if->if->if->if
MouseEvent#readObject(ObjectInputStream):::Sets new modifiers by the old ones.:::s->defaultReadObject->if->getModifiers->getModifiersEx->setNewModifiers
MouseListener#mouseClicked(MouseEvent):::Invoked when the mouse button has been clicked (pressed and released) on a component.:::
MouseListener#mousePressed(MouseEvent):::Invoked when a mouse button has been pressed on a component.:::
MouseListener#mouseReleased(MouseEvent):::Invoked when a mouse button has been released on a component.:::
MouseListener#mouseEntered(MouseEvent):::Invoked when the mouse enters a component.:::
MouseListener#mouseExited(MouseEvent):::Invoked when the mouse exits a component.:::
MouseMotionAdapter#mouseDragged(MouseEvent):::Invoked when a mouse button is pressed on a component and then dragged:::
MouseMotionAdapter#mouseMoved(MouseEvent):::Invoked when the mouse button has been moved on a component (with no buttons no down).:::
MouseMotionListener#mouseDragged(MouseEvent):::Invoked when a mouse button is pressed on a component and then dragged:::
MouseMotionListener#mouseMoved(MouseEvent):::Invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.:::
MouseWheelEvent#getScrollType():::Returns the type of scrolling that should take place in response to this event:::return
MouseWheelEvent#getScrollAmount():::Returns the number of units that should be scrolled per click of mouse wheel rotation:::return
MouseWheelEvent#getWheelRotation():::Returns the number of "clicks" the mouse wheel was rotated, as an integer:::return
MouseWheelEvent#getPreciseWheelRotation():::Returns the number of "clicks" the mouse wheel was rotated, as a double:::return
MouseWheelEvent#getUnitsToScroll():::This is a convenience method to aid in the implementation of the common-case MouseWheelListener - to scroll a ScrollPane or JScrollPane by an amount which conforms to the platform settings:::return
MouseWheelEvent#paramString():::Returns a parameter string identifying this event:::scrollTypeStr->if->getScrollType->else->if->getScrollType->else->return->super->paramString->getScrollAmount->getWheelRotation->getPreciseWheelRotation
MouseWheelListener#mouseWheelMoved(MouseWheelEvent):::Invoked when the mouse wheel is rotated.:::
NativeLibLoader#loadLibraries():::This is copied from java.awt.Toolkit since we need the library loaded in sun.awt.image also:  WARNING: This is a temporary workaround for a problem in the way the AWT loads native libraries:::new->java.security.PrivilegedAction<Void>->doPrivileged
PaintEvent#getUpdateRect():::Returns the rectangle representing the area which needs to be repainted in response to this event.:::return
PaintEvent#setUpdateRect(Rectangle):::Sets the rectangle representing the area which needs to be repainted in response to this event.:::
PaintEvent#paramString()::: paint event param string:::typeStr->switch->break->break->return->updateRect->toString
TextEvent#paramString():::Returns a parameter string identifying this text event:::typeStr->switch->break->return
TextListener#textValueChanged(TextEvent):::Invoked when the value of the text has changed:::
WindowAdapter#windowOpened(WindowEvent):::Invoked when a window has been opened.:::
WindowAdapter#windowClosing(WindowEvent):::Invoked when a window is in the process of being closed:::
WindowAdapter#windowClosed(WindowEvent):::Invoked when a window has been closed.:::
WindowAdapter#windowIconified(WindowEvent):::Invoked when a window is iconified.:::
WindowAdapter#windowDeiconified(WindowEvent):::Invoked when a window is de-iconified.:::
WindowAdapter#windowActivated(WindowEvent):::Invoked when a window is activated.:::
WindowAdapter#windowDeactivated(WindowEvent):::Invoked when a window is de-activated.:::
WindowAdapter#windowStateChanged(WindowEvent):::Invoked when a window state is changed.:::
WindowAdapter#windowGainedFocus(WindowEvent):::Invoked when the Window is set to be the focused Window, which means that the Window, or one of its subcomponents, will receive keyboard events.:::
WindowAdapter#windowLostFocus(WindowEvent):::Invoked when the Window is no longer the focused Window, which means that keyboard events will no longer be delivered to the Window or any of its subcomponents.:::
WindowEvent#getWindow():::Returns the originator of the event.:::return
WindowEvent#getOppositeWindow():::Returns the other Window involved in this focus or activation change:::if->return->return->SunToolkit->targetToAppContext->AppContext->getAppContext
WindowEvent#getOldState():::For WINDOW_STATE_CHANGED events returns the previous state of the window:::return
WindowEvent#getNewState():::For WINDOW_STATE_CHANGED events returns the new state of the window:::return
WindowEvent#paramString():::Returns a parameter string identifying this event:::typeStr->switch->break->break->break->break->break->break->break->break->break->break->getOppositeWindow->return
WindowFocusListener#windowGainedFocus(WindowEvent):::Invoked when the Window is set to be the focused Window, which means that the Window, or one of its subcomponents, will receive keyboard events.:::
WindowFocusListener#windowLostFocus(WindowEvent):::Invoked when the Window is no longer the focused Window, which means that keyboard events will no longer be delivered to the Window or any of its subcomponents.:::
WindowListener#windowOpened(WindowEvent):::Invoked the first time a window is made visible.:::
WindowListener#windowClosing(WindowEvent):::Invoked when the user attempts to close the window from the window's system menu.:::
WindowListener#windowClosed(WindowEvent):::Invoked when a window has been closed as the result of calling dispose on the window.:::
WindowListener#windowIconified(WindowEvent):::Invoked when a window is changed from a normal to a minimized state:::
WindowListener#windowDeiconified(WindowEvent):::Invoked when a window is changed from a minimized to a normal state.:::
WindowListener#windowActivated(WindowEvent):::Invoked when the Window is set to be the active Window:::
WindowListener#windowDeactivated(WindowEvent):::Invoked when a Window is no longer the active Window:::
WindowStateListener#windowStateChanged(WindowEvent):::Invoked when window state is changed.:::

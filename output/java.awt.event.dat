java.awt.event.ActionEvent#getActionCommand()->String:::Returns the command string associated with this action
java.awt.event.ActionEvent#getWhen()->long:::Returns the timestamp of when this event occurred
java.awt.event.ActionEvent#getModifiers()->int:::Returns the modifier keys held down during this action event.
java.awt.event.ActionEvent#paramString()->String:::Returns a parameter string identifying this action event
java.awt.event.ActionListener#actionPerformed(ActionEvent)->void:::Invoked when an action occurs.
java.awt.event.AdjustmentEvent#getAdjustable()->Adjustable:::Returns the Adjustable object where this event originated.
java.awt.event.AdjustmentEvent#getValue()->int:::Returns the current value in the adjustment event.
java.awt.event.AdjustmentEvent#getAdjustmentType()->int:::Returns the type of adjustment which caused the value changed event
java.awt.event.AdjustmentEvent#getValueIsAdjusting()->boolean:::Returns true if this is one of multiple adjustment events.
java.awt.event.AdjustmentEvent#paramString()->String::: adjustment event param string
java.awt.event.AdjustmentListener#adjustmentValueChanged(AdjustmentEvent)->void:::Invoked when the value of the adjustable has changed.
java.awt.event.AWTEventListener#eventDispatched(AWTEvent)->void:::Invoked when an event is dispatched in the AWT.
java.awt.event.AWTEventListenerProxy#eventDispatched(AWTEvent)->void:::Forwards the AWT event to the listener delegate.
java.awt.event.AWTEventListenerProxy#getEventMask()->long:::Returns the event mask associated with the listener.
java.awt.event.ComponentAdapter#componentResized(ComponentEvent)->void:::Invoked when the component's size changes.
java.awt.event.ComponentAdapter#componentMoved(ComponentEvent)->void:::Invoked when the component's position changes.
java.awt.event.ComponentAdapter#componentShown(ComponentEvent)->void:::Invoked when the component has been made visible.
java.awt.event.ComponentAdapter#componentHidden(ComponentEvent)->void:::Invoked when the component has been made invisible.
java.awt.event.ComponentEvent#getComponent()->Component:::Returns the originator of the event.
java.awt.event.ComponentEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.ComponentListener#componentResized(ComponentEvent)->void:::Invoked when the component's size changes.
java.awt.event.ComponentListener#componentMoved(ComponentEvent)->void:::Invoked when the component's position changes.
java.awt.event.ComponentListener#componentShown(ComponentEvent)->void:::Invoked when the component has been made visible.
java.awt.event.ComponentListener#componentHidden(ComponentEvent)->void:::Invoked when the component has been made invisible.
java.awt.event.ContainerAdapter#componentAdded(ContainerEvent)->void:::Invoked when a component has been added to the container.
java.awt.event.ContainerAdapter#componentRemoved(ContainerEvent)->void:::Invoked when a component has been removed from the container.
java.awt.event.ContainerEvent#getContainer()->Container:::Returns the originator of the event.
java.awt.event.ContainerEvent#getChild()->Component:::Returns the component that was affected by the event.
java.awt.event.ContainerEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.ContainerListener#componentAdded(ContainerEvent)->void:::Invoked when a component has been added to the container.
java.awt.event.ContainerListener#componentRemoved(ContainerEvent)->void:::Invoked when a component has been removed from the container.
java.awt.event.FocusAdapter#focusGained(FocusEvent)->void:::Invoked when a component gains the keyboard focus.
java.awt.event.FocusAdapter#focusLost(FocusEvent)->void:::Invoked when a component loses the keyboard focus.
java.awt.event.FocusEvent#isTemporary()->boolean:::Identifies the focus change event as temporary or permanent.
java.awt.event.FocusEvent#getOppositeComponent()->Component:::Returns the other Component involved in this focus change
java.awt.event.FocusEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.FocusEvent#getCause()->Cause:::Returns the event cause.
java.awt.event.FocusEvent#readResolve()->Object:::Checks if this deserialized FocusEvent instance is compatible with the current specification which implies that focus event has non-null cause value
java.awt.event.FocusListener#focusGained(FocusEvent)->void:::Invoked when a component gains the keyboard focus.
java.awt.event.FocusListener#focusLost(FocusEvent)->void:::Invoked when a component loses the keyboard focus.
java.awt.event.HierarchyBoundsAdapter#ancestorMoved(HierarchyEvent)->void:::Called when an ancestor of the source is moved.
java.awt.event.HierarchyBoundsAdapter#ancestorResized(HierarchyEvent)->void:::Called when an ancestor of the source is resized.
java.awt.event.HierarchyBoundsListener#ancestorMoved(HierarchyEvent)->void:::Called when an ancestor of the source is moved.
java.awt.event.HierarchyBoundsListener#ancestorResized(HierarchyEvent)->void:::Called when an ancestor of the source is resized.
java.awt.event.HierarchyEvent#getComponent()->Component:::Returns the originator of the event.
java.awt.event.HierarchyEvent#getChanged()->Component:::Returns the Component at the top of the hierarchy which was changed.
java.awt.event.HierarchyEvent#getChangedParent()->Container:::Returns the parent of the Component returned by getChanged()
java.awt.event.HierarchyEvent#getChangeFlags()->long:::Returns a bitmask which indicates the type(s) of HIERARCHY_CHANGED events represented in this event object
java.awt.event.HierarchyEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.HierarchyListener#hierarchyChanged(HierarchyEvent)->void:::Called when the hierarchy has been changed
java.awt.event.InputEvent#getMaskForButton(int)->int:::A method to obtain a mask for any existing mouse button
java.awt.event.InputEvent#isShiftDown()->boolean:::Returns whether or not the Shift modifier is down on this event.
java.awt.event.InputEvent#isControlDown()->boolean:::Returns whether or not the Control modifier is down on this event.
java.awt.event.InputEvent#isMetaDown()->boolean:::Returns whether or not the Meta modifier is down on this event.
java.awt.event.InputEvent#isAltDown()->boolean:::Returns whether or not the Alt modifier is down on this event.
java.awt.event.InputEvent#isAltGraphDown()->boolean:::Returns whether or not the AltGraph modifier is down on this event.
java.awt.event.InputEvent#getWhen()->long:::Returns the difference in milliseconds between the timestamp of when this event occurred and midnight, January 1, 1970 UTC.
java.awt.event.InputEvent#getModifiers()->int:::Returns the modifier mask for this event.
java.awt.event.InputEvent#getModifiersEx()->int:::Returns the extended modifier mask for this event
java.awt.event.InputEvent#consume()->void:::Consumes this event so that it will not be processed in the default manner by the source which originated it.
java.awt.event.InputEvent#isConsumed()->boolean:::Returns whether or not this event has been consumed.
java.awt.event.InputEvent#getModifiersExText(int)->String:::Returns a String describing the extended modifier keys and mouse buttons, such as "Shift", "Button1", or "Ctrl+Shift"
java.awt.event.InputMethodEvent#getText()->AttributedCharacterIterator:::Gets the combined committed and composed text
java.awt.event.InputMethodEvent#getCommittedCharacterCount()->int:::Gets the number of committed characters in the text.
java.awt.event.InputMethodEvent#getCaret()->TextHitInfo:::Gets the caret
java.awt.event.InputMethodEvent#getVisiblePosition()->TextHitInfo:::Gets the position that's most important to be visible
java.awt.event.InputMethodEvent#consume()->void:::Consumes this event so that it will not be processed in the default manner by the source which originated it.
java.awt.event.InputMethodEvent#isConsumed()->boolean:::Returns whether or not this event has been consumed.
java.awt.event.InputMethodEvent#getWhen()->long:::Returns the time stamp of when this event occurred.
java.awt.event.InputMethodEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.InputMethodListener#inputMethodTextChanged(InputMethodEvent)->void:::Invoked when the text entered through an input method has changed.
java.awt.event.InputMethodListener#caretPositionChanged(InputMethodEvent)->void:::Invoked when the caret within composed text has changed.
java.awt.event.InvocationEvent#dispatch()->void:::Executes the Runnable's run() method and notifies the notifier (if any) when run() has returned or thrown an exception.
java.awt.event.InvocationEvent#getException()->Exception:::Returns any Exception caught while executing the Runnable's run() method.
java.awt.event.InvocationEvent#getThrowable()->Throwable:::Returns any Throwable caught while executing the Runnable's run() method.
java.awt.event.InvocationEvent#getWhen()->long:::Returns the timestamp of when this event occurred.
java.awt.event.InvocationEvent#isDispatched()->boolean:::Returns true if the event is dispatched or any exception is thrown while dispatching, false otherwise
java.awt.event.InvocationEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.ItemEvent#getItemSelectable()->ItemSelectable:::Returns the originator of the event.
java.awt.event.ItemEvent#getItem()->Object:::Returns the item affected by the event.
java.awt.event.ItemEvent#getStateChange()->int:::Returns the type of state change (selected or deselected).
java.awt.event.ItemEvent#paramString()->String:::Returns a parameter string identifying this item event
java.awt.event.ItemListener#itemStateChanged(ItemEvent)->void:::Invoked when an item has been selected or deselected by the user
java.awt.event.KeyAdapter#keyTyped(KeyEvent)->void:::Invoked when a key has been typed
java.awt.event.KeyAdapter#keyPressed(KeyEvent)->void:::Invoked when a key has been pressed.
java.awt.event.KeyAdapter#keyReleased(KeyEvent)->void:::Invoked when a key has been released.
java.awt.event.KeyEvent#getKeyCode()->int:::Returns the integer keyCode associated with the key in this event.
java.awt.event.KeyEvent#setKeyCode(int)->void:::Set the keyCode value to indicate a physical key.
java.awt.event.KeyEvent#getKeyChar()->char:::Returns the character associated with the key in this event
java.awt.event.KeyEvent#setKeyChar(char)->void:::Set the keyChar value to indicate a logical character.
java.awt.event.KeyEvent#setModifiers(int)->void:::Set the modifiers to indicate additional keys that were held down (e.g
java.awt.event.KeyEvent#getKeyLocation()->int:::Returns the location of the key that originated this key event
java.awt.event.KeyEvent#getKeyText(int)->String:::Returns a String describing the keyCode, such as "HOME", "F1" or "A"
java.awt.event.KeyEvent#getKeyModifiersText(int)->String:::Returns a String describing the modifier key(s), such as "Shift", or "Ctrl+Shift"
java.awt.event.KeyEvent#isActionKey()->boolean:::Returns whether the key in this event is an "action" key
java.awt.event.KeyEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.KeyEvent#getExtendedKeyCode()->int:::Returns an extended key code for the event
java.awt.event.KeyEvent#getExtendedKeyCodeForChar(int)->int:::Returns an extended key code for a unicode character.
java.awt.event.KeyListener#keyTyped(KeyEvent)->void:::Invoked when a key has been typed
java.awt.event.KeyListener#keyPressed(KeyEvent)->void:::Invoked when a key has been pressed
java.awt.event.KeyListener#keyReleased(KeyEvent)->void:::Invoked when a key has been released
java.awt.event.MouseAdapter#mouseClicked(MouseEvent)->void::: mouse adapter mouse clicked
java.awt.event.MouseAdapter#mousePressed(MouseEvent)->void::: mouse adapter mouse pressed
java.awt.event.MouseAdapter#mouseReleased(MouseEvent)->void::: mouse adapter mouse released
java.awt.event.MouseAdapter#mouseEntered(MouseEvent)->void::: mouse adapter mouse entered
java.awt.event.MouseAdapter#mouseExited(MouseEvent)->void::: mouse adapter mouse exited
java.awt.event.MouseAdapter#mouseWheelMoved(MouseWheelEvent)->void::: mouse adapter mouse wheel moved
java.awt.event.MouseAdapter#mouseDragged(MouseEvent)->void::: mouse adapter mouse dragged
java.awt.event.MouseAdapter#mouseMoved(MouseEvent)->void::: mouse adapter mouse moved
java.awt.event.MouseEvent#getLocationOnScreen()->Point:::Returns the absolute x, y position of the event
java.awt.event.MouseEvent#getXOnScreen()->int:::Returns the absolute horizontal x position of the event
java.awt.event.MouseEvent#getYOnScreen()->int:::Returns the absolute vertical y position of the event
java.awt.event.MouseEvent#getModifiersEx()->int::: mouse event get modifiers ex
java.awt.event.MouseEvent#getX()->int:::Returns the horizontal x position of the event relative to the source component.
java.awt.event.MouseEvent#getY()->int:::Returns the vertical y position of the event relative to the source component.
java.awt.event.MouseEvent#getPoint()->Point:::Returns the x,y position of the event relative to the source component.
java.awt.event.MouseEvent#translatePoint(int, int)->void:::Translates the event's coordinates to a new position by adding specified x (horizontal) and y (vertical) offsets.
java.awt.event.MouseEvent#getClickCount()->int:::Returns the number of mouse clicks associated with this event.
java.awt.event.MouseEvent#getButton()->int:::Returns which, if any, of the mouse buttons has changed state
java.awt.event.MouseEvent#isPopupTrigger()->boolean:::Returns whether or not this mouse event is the popup menu trigger event for the platform
java.awt.event.MouseEvent#getMouseModifiersText(int)->String:::Returns a String instance describing the modifier keys and mouse buttons that were down during the event, such as "Shift", or "Ctrl+Shift"
java.awt.event.MouseEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.MouseListener#mouseClicked(MouseEvent)->void:::Invoked when the mouse button has been clicked (pressed and released) on a component.
java.awt.event.MouseListener#mousePressed(MouseEvent)->void:::Invoked when a mouse button has been pressed on a component.
java.awt.event.MouseListener#mouseReleased(MouseEvent)->void:::Invoked when a mouse button has been released on a component.
java.awt.event.MouseListener#mouseEntered(MouseEvent)->void:::Invoked when the mouse enters a component.
java.awt.event.MouseListener#mouseExited(MouseEvent)->void:::Invoked when the mouse exits a component.
java.awt.event.MouseMotionAdapter#mouseDragged(MouseEvent)->void:::Invoked when a mouse button is pressed on a component and then dragged
java.awt.event.MouseMotionAdapter#mouseMoved(MouseEvent)->void:::Invoked when the mouse button has been moved on a component (with no buttons no down).
java.awt.event.MouseMotionListener#mouseDragged(MouseEvent)->void:::Invoked when a mouse button is pressed on a component and then dragged
java.awt.event.MouseMotionListener#mouseMoved(MouseEvent)->void:::Invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.
java.awt.event.MouseWheelEvent#getScrollType()->int:::Returns the type of scrolling that should take place in response to this event
java.awt.event.MouseWheelEvent#getScrollAmount()->int:::Returns the number of units that should be scrolled per click of mouse wheel rotation
java.awt.event.MouseWheelEvent#getWheelRotation()->int:::Returns the number of "clicks" the mouse wheel was rotated, as an integer
java.awt.event.MouseWheelEvent#getPreciseWheelRotation()->double:::Returns the number of "clicks" the mouse wheel was rotated, as a double
java.awt.event.MouseWheelEvent#getUnitsToScroll()->int:::This is a convenience method to aid in the implementation of the common-case MouseWheelListener - to scroll a ScrollPane or JScrollPane by an amount which conforms to the platform settings
java.awt.event.MouseWheelEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.MouseWheelListener#mouseWheelMoved(MouseWheelEvent)->void:::Invoked when the mouse wheel is rotated.
java.awt.event.NativeLibLoader#loadLibraries()->void:::This is copied from java.awt.Toolkit since we need the library loaded in sun.awt.image also:  WARNING: This is a temporary workaround for a problem in the way the AWT loads native libraries
java.awt.event.PaintEvent#getUpdateRect()->Rectangle:::Returns the rectangle representing the area which needs to be repainted in response to this event.
java.awt.event.PaintEvent#setUpdateRect(Rectangle)->void:::Sets the rectangle representing the area which needs to be repainted in response to this event.
java.awt.event.PaintEvent#paramString()->String::: paint event param string
java.awt.event.TextEvent#paramString()->String:::Returns a parameter string identifying this text event
java.awt.event.TextListener#textValueChanged(TextEvent)->void:::Invoked when the value of the text has changed
java.awt.event.WindowAdapter#windowOpened(WindowEvent)->void:::Invoked when a window has been opened.
java.awt.event.WindowAdapter#windowClosing(WindowEvent)->void:::Invoked when a window is in the process of being closed
java.awt.event.WindowAdapter#windowClosed(WindowEvent)->void:::Invoked when a window has been closed.
java.awt.event.WindowAdapter#windowIconified(WindowEvent)->void:::Invoked when a window is iconified.
java.awt.event.WindowAdapter#windowDeiconified(WindowEvent)->void:::Invoked when a window is de-iconified.
java.awt.event.WindowAdapter#windowActivated(WindowEvent)->void:::Invoked when a window is activated.
java.awt.event.WindowAdapter#windowDeactivated(WindowEvent)->void:::Invoked when a window is de-activated.
java.awt.event.WindowAdapter#windowStateChanged(WindowEvent)->void:::Invoked when a window state is changed.
java.awt.event.WindowAdapter#windowGainedFocus(WindowEvent)->void:::Invoked when the Window is set to be the focused Window, which means that the Window, or one of its subcomponents, will receive keyboard events.
java.awt.event.WindowAdapter#windowLostFocus(WindowEvent)->void:::Invoked when the Window is no longer the focused Window, which means that keyboard events will no longer be delivered to the Window or any of its subcomponents.
java.awt.event.WindowEvent#getWindow()->Window:::Returns the originator of the event.
java.awt.event.WindowEvent#getOppositeWindow()->Window:::Returns the other Window involved in this focus or activation change
java.awt.event.WindowEvent#getOldState()->int:::For WINDOW_STATE_CHANGED events returns the previous state of the window
java.awt.event.WindowEvent#getNewState()->int:::For WINDOW_STATE_CHANGED events returns the new state of the window
java.awt.event.WindowEvent#paramString()->String:::Returns a parameter string identifying this event
java.awt.event.WindowFocusListener#windowGainedFocus(WindowEvent)->void:::Invoked when the Window is set to be the focused Window, which means that the Window, or one of its subcomponents, will receive keyboard events.
java.awt.event.WindowFocusListener#windowLostFocus(WindowEvent)->void:::Invoked when the Window is no longer the focused Window, which means that keyboard events will no longer be delivered to the Window or any of its subcomponents.
java.awt.event.WindowListener#windowOpened(WindowEvent)->void:::Invoked the first time a window is made visible.
java.awt.event.WindowListener#windowClosing(WindowEvent)->void:::Invoked when the user attempts to close the window from the window's system menu.
java.awt.event.WindowListener#windowClosed(WindowEvent)->void:::Invoked when a window has been closed as the result of calling dispose on the window.
java.awt.event.WindowListener#windowIconified(WindowEvent)->void:::Invoked when a window is changed from a normal to a minimized state
java.awt.event.WindowListener#windowDeiconified(WindowEvent)->void:::Invoked when a window is changed from a minimized to a normal state.
java.awt.event.WindowListener#windowActivated(WindowEvent)->void:::Invoked when the Window is set to be the active Window
java.awt.event.WindowListener#windowDeactivated(WindowEvent)->void:::Invoked when a Window is no longer the active Window
java.awt.event.WindowStateListener#windowStateChanged(WindowEvent)->void:::Invoked when window state is changed.

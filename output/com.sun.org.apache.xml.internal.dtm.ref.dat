com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray#appendSlot(int, int, int, int)->int:::Append a 4-integer record to the CIA, starting with record 1
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray#readEntry(int, int)->int:::Retrieve an integer from the CIA by record number and column within the record, both 0-based (though position 0 is reserved for special purposes).
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray#specialFind(int, int)->int::: chunked int array special find
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray#slotsUsed()->int::: chunked int array slots used
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray#discardLast()->void:::Disard the highest-numbered record
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray#writeEntry(int, int, int)->void:::Overwrite the integer found at a specific record and column
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray#writeSlot(int, int, int, int, int)->void:::Overwrite an entire (4-integer) record at the specified index
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray#readSlot(int, int[])->void:::Retrieve the contents of a record into a user-supplied buffer array
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray.ChunksVector#size()->int::: chunks vector size
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray.ChunksVector#addElement(int[])->void::: chunks vector add element
com.sun.org.apache.xml.internal.dtm.ref.ChunkedIntArray.ChunksVector#elementAt(int)->int[]::: chunks vector element at
com.sun.org.apache.xml.internal.dtm.ref.CoroutineManager#co_joinCoroutineSet(int)->int:::Each coroutine in the set managed by a single CoroutineManager is identified by a small positive integer
com.sun.org.apache.xml.internal.dtm.ref.CoroutineManager#co_entry_pause(int)->Object:::In the standard coroutine architecture, coroutines are identified by their method names and are launched and run up to their first yield by simply resuming them; its's presumed that this recognizes the not-already-running case and does the right thing
com.sun.org.apache.xml.internal.dtm.ref.CoroutineManager#co_resume(Object, int, int)->Object:::Transfer control to another coroutine which has already been started and is waiting on this CoroutineManager
com.sun.org.apache.xml.internal.dtm.ref.CoroutineManager#co_exit(int)->void:::Terminate this entire set of coroutines
com.sun.org.apache.xml.internal.dtm.ref.CoroutineManager#co_exit_to(Object, int, int)->void:::Make the ID available for reuse and terminate this coroutine, transferring control to the specified coroutine
com.sun.org.apache.xml.internal.dtm.ref.CoroutineParser#getParserCoroutineID()->int::: coroutine parser get parser coroutine d
com.sun.org.apache.xml.internal.dtm.ref.CoroutineParser#getCoroutineManager()->CoroutineManager::: coroutine parser get coroutine manager
com.sun.org.apache.xml.internal.dtm.ref.CoroutineParser#setContentHandler(ContentHandler)->void:::Register a SAX-style content handler for us to output to
com.sun.org.apache.xml.internal.dtm.ref.CoroutineParser#setLexHandler(org.xml.sax.ext.LexicalHandler)->void::: Register a SAX-style lexical handler for us to output to  Not all parsers support this..
com.sun.org.apache.xml.internal.dtm.ref.CoroutineParser#doParse(InputSource, int)->Object:::doParse() is a simple API which tells the coroutine parser to begin reading from a file
com.sun.org.apache.xml.internal.dtm.ref.CoroutineParser#doMore(boolean, int)->Object:::doMore() is a simple API which tells the coroutine parser that we need more nodes
com.sun.org.apache.xml.internal.dtm.ref.CoroutineParser#doTerminate(int)->void:::doTerminate() is a simple API which tells the coroutine parser to terminate itself
com.sun.org.apache.xml.internal.dtm.ref.CoroutineParser#init(CoroutineManager, int, XMLReader)->void:::Initialize the coroutine parser
com.sun.org.apache.xml.internal.dtm.ref.CustomStringPool#removeAllElements()->void::: custom string pool remove all elements
com.sun.org.apache.xml.internal.dtm.ref.CustomStringPool#indexToString(int)->String::: custom string pool index to string
com.sun.org.apache.xml.internal.dtm.ref.CustomStringPool#stringToIndex(String)->int::: custom string pool string to index
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#getStartNode()->int:::Get start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#reset()->DTMAxisIterator::: axis iterator base reset
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#includeSelf()->DTMAxisIterator:::Set the flag to include the start node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#getLast()->int:::Returns the position of the last node within the iteration, as defined by XPath
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#getPosition()->int::: axis iterator base get position
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#isReverse()->boolean::: axis iterator base is reverse
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#cloneIterator()->DTMAxisIterator:::Returns a deep copy of this iterator
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#returnNode(int)->int:::Do any final cleanup that is required before returning the node that was passed in, and then return it
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#resetPosition()->DTMAxisIterator:::Reset the position to zero
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#isDocOrdered()->boolean:::Returns true if all the nodes in the iteration well be returned in document order.
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#getAxis()->int:::Returns the axis being iterated, if it is known.
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#setRestartable(boolean)->void::: axis iterator base set restartable
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIteratorBase#getNodeByPosition(int)->int:::Return the node at the given position.
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIterNodeList#getDTMAxisIterator()->DTMAxisIterator:::Access the wrapped DTMIterator
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIterNodeList#item(int)->Node:::Returns the indexth item in the collection
com.sun.org.apache.xml.internal.dtm.ref.DTMAxisIterNodeList#getLength()->int:::The number of nodes in the list
com.sun.org.apache.xml.internal.dtm.ref.DTMChildIterNodeList#item(int)->Node:::Returns the indexth item in the collection
com.sun.org.apache.xml.internal.dtm.ref.DTMChildIterNodeList#getLength()->int:::The number of nodes in the list
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#ensureSizeOfIndex(int, int)->void:::Ensure that the size of the element indexes can hold the information.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#indexNode(int, int)->void:::Add a node to the element indexes
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#findGTE(int[], int, int, int)->int:::Find the first index that occurs in the list that is greater than or equal to the given value.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#findElementFromIndex(int, int, int)->int:::Find the first matching element from the index at or after the given node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNextNodeIdentity(int)->int:::Get the next node identity value in the list, and call the iterator if it hasn't been added yet.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#nextNode()->boolean:::This method should try and build one or more nodes in the table.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNumberOfNodes()->int:::Get the number of nodes that have been added.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#_type(int)->short:::Get the simple type ID for the given node identity.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#_exptype(int)->int:::Get the expanded type ID for the given node identity.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#_level(int)->int:::Get the level in the tree for the given node identity.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#_firstch(int)->int:::Get the first child for the given node identity.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#_nextsib(int)->int:::Get the next sibling for the given node identity.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#_prevsib(int)->int:::Get the previous sibling for the given node identity.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#_parent(int)->int:::Get the parent for the given node identity.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#dumpDTM(OutputStream)->void:::Diagnostics function to dump the DTM.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#dumpNode(int)->String:::Diagnostics function to dump a single node
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#setFeature(String, boolean)->void:::Set an implementation dependent feature
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#hasChildNodes(int)->boolean:::Given a node handle, test if it has child nodes
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#makeNodeHandle(int)->int:::Given a node identity, return a node handle
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#makeNodeIdentity(int)->int:::Given a node handle, return a node identity
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getFirstChild(int)->int:::Given a node handle, get the handle of the node's first child
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getTypedFirstChild(int, int)->int:::Given a node handle, get the handle of the node's first child
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getLastChild(int)->int:::Given a node handle, advance to its last child
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getAttributeNode(int, String, String)->int:::Retrieves an attribute node by by qualified name and namespace URI.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getFirstAttribute(int)->int:::Given a node handle, get the index of the node's first attribute.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getFirstAttributeIdentity(int)->int:::Given a node identity, get the index of the node's first attribute.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getTypedAttribute(int, int)->int:::Given a node handle and an expanded type ID, get the index of the node's attribute of that type, if any.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNextSibling(int)->int:::Given a node handle, advance to its next sibling
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getTypedNextSibling(int, int)->int:::Given a node handle, advance to its next sibling
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getPreviousSibling(int)->int:::Given a node handle, find its preceeding sibling
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNextAttribute(int)->int:::Given a node handle, advance to the next attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNextAttributeIdentity(int)->int:::Given a node identity for an attribute, advance to the next attribute.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#declareNamespaceInContext(int, int)->void:::Build table of namespace declaration locations during DTM construction
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#findNamespaceContext(int)->SuballocatedIntVector:::Retrieve list of namespace declaration locations active at this node
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#findInSortedSuballocatedIntVector(SuballocatedIntVector, int)->int:::Subroutine: Locate the specified node within m_namespaceDeclSetElements, or the last element which preceeds it in document order  %REVIEW% Inlne this into findNamespaceContext? Create SortedSuballocatedIntVector type?
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getFirstNamespaceNode(int, boolean)->int:::Given a node handle, get the index of the node's first child
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNextNamespaceNode(int, int, boolean)->int:::Given a namespace handle, advance to the next namespace.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getParent(int)->int:::Given a node handle, find its parent node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocument()->int:::Find the Document node handle for the document currently under construction
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getOwnerDocument(int)->int:::Given a node handle, find the owning document node
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocumentRoot(int)->int:::Given a node handle, find the owning document node
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getStringValue(int)->XMLString:::Get the string-value of a node as a String object (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value).
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getStringValueChunkCount(int)->int:::Get number of character array chunks in the string-value of a node
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getStringValueChunk(int, int, int[])->char[]:::Get a character array chunk in the string-value of a node
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getExpandedTypeID(int)->int:::Given a node handle, return an ID that represents the node's expanded name.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getExpandedTypeID(String, String, int)->int:::Given an expanded name, return an ID
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getLocalNameFromExpandedNameID(int)->String:::Given an expanded-name ID, return the local name part.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNamespaceFromExpandedNameID(int)->String:::Given an expanded-name ID, return the namespace URI part.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNamespaceType(int)->int:::Returns the namespace type of a specific node
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNodeName(int)->String:::Given a node handle, return its DOM-style node name
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNodeNameX(int)->String:::Given a node handle, return the XPath node name
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getLocalName(int)->String:::Given a node handle, return its XPath-style localname
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getPrefix(int)->String:::Given a namespace handle, return the prefix that the namespace decl is mapping
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNamespaceURI(int)->String:::Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to.)  %REVIEW% Null or ""? -sb
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNodeValue(int)->String:::Given a node handle, return its node value
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNodeType(int)->short:::Given a node handle, return its DOM-style node type
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getLevel(int)->short:::Get the depth level of this node in the tree (equals 1 for a parentless node).
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNodeIdent(int)->int:::Get the identity of this node in the tree
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNodeHandle(int)->int:::Get the handle of this node in the tree
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#isSupported(String, String)->boolean:::Tests whether DTM DOM implementation implements a specific feature and that feature is supported by this node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocumentBaseURI()->String:::Return the base URI of the document entity
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#setDocumentBaseURI(String)->void:::Set the base URI of the document entity.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocumentSystemIdentifier(int)->String:::Return the system identifier of the document entity
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocumentEncoding(int)->String:::Return the name of the character encoding scheme        in which the document entity is expressed.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocumentStandalone(int)->String:::Return an indication of the standalone status of the document,        either "yes" or "no"
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocumentVersion(int)->String:::Return a string representing the XML version of the document
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocumentAllDeclarationsProcessed()->boolean:::Return an indication of whether the processor has read the complete DTD
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocumentTypeDeclarationSystemIdentifier()->String:::  A document type declaration information item has the following properties:      1
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDocumentTypeDeclarationPublicIdentifier()->String:::Return the public identifier of the external subset, normalized as described in 4.2.2 External Entities [XML]
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getElementById(String)->int:::Returns the Element whose ID is given by elementId
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getUnparsedEntityURI(String)->String:::The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3.3 Unparsed Entities])
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#supportsPreStripping()->boolean:::Return true if the xsl:strip-space or xsl:preserve-space was processed during construction of the DTM document.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#isNodeAfter(int, int)->boolean:::Figure out whether nodeHandle2 should be considered as being later in the document than nodeHandle1, in Document Order as defined by the XPath model
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#isCharacterElementContentWhitespace(int)->boolean:::    2
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#isDocumentAllDeclarationsProcessed(int)->boolean:::   10
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#isAttributeSpecified(int)->boolean:::    5
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean)->void:::Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value)
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#dispatchToEvents(int, org.xml.sax.ContentHandler)->void:::Directly create SAX parser events from a subtree.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getNode(int)->org.w3c.dom.Node:::Return an DOM node for the given node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#appendChild(int, boolean, boolean)->void:::Append a child to the end of the document
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#appendTextChild(String)->void:::Append a text node child that will be constructed from a string, to the end of the document
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#error(String)->void:::Simple error for asserts and the like.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getShouldStripWhitespace()->boolean:::Find out whether or not to strip whispace nodes.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#pushShouldStripWhitespace(boolean)->void:::Set whether to strip whitespaces and push in current value of m_shouldStripWS in m_shouldStripWhitespaceStack.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#popShouldStripWhitespace()->void:::Set whether to strip whitespaces at this point by popping out m_shouldStripWhitespaceStack.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#setShouldStripWhitespace(boolean)->void:::Set whether to strip whitespaces and set the top of the stack to the current value of m_shouldStripWS.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#documentRegistration()->void:::A dummy routine to satisify the abstract interface
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#documentRelease()->void:::A dummy routine to satisify the abstract interface
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#migrateTo(DTMManager)->void:::Migrate a DTM built with an old DTMManager to a new DTMManager
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getManager()->DTMManager:::Query which DTMManager this DTM is currently being handled by
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBase#getDTMIDs()->SuballocatedIntVector:::Query which DTMIDs this DTM is currently using within the DTMManager
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators#getTypedAxisIterator(int, int)->DTMAxisIterator:::Get an iterator that can navigate over an XPath Axis, predicated by the extended type ID
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators#getAxisIterator(int)->DTMAxisIterator:::This is a shortcut to the iterators that implement the XPath axes
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.InternalAxisIteratorBase#setMark()->void:::Remembers the current node for the next call to gotoMark()
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.InternalAxisIteratorBase#gotoMark()->void:::Restores the current node remembered by setMark()
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.ChildrenIterator#setStartNode(int)->DTMAxisIterator:::Setting start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.ChildrenIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.ParentIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.ParentIterator#setNodeType(int)->DTMAxisIterator:::Set the node type of the parent that we're looking for
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.ParentIterator#next()->int:::Get the next node in the iteration
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedChildrenIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedChildrenIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.NamespaceChildrenIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.NamespaceChildrenIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.NamespaceIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.NamespaceIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedNamespaceIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.RootIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.RootIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedRootIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.NamespaceAttributeIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.NamespaceAttributeIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.FollowingSiblingIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.FollowingSiblingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedFollowingSiblingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AttributeIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AttributeIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedAttributeIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedAttributeIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingSiblingIterator#isReverse()->boolean:::True if this iterator has a reversed axis.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingSiblingIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingSiblingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedPrecedingSiblingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingIterator#isReverse()->boolean:::True if this iterator has a reversed axis.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingIterator#cloneIterator()->DTMAxisIterator:::Returns a deep copy of this iterator
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingIterator#reset()->DTMAxisIterator:::Resets the iterator to the last start node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingIterator#setMark()->void::: preceding iterator set mark
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.PrecedingIterator#gotoMark()->void::: preceding iterator goto mark
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedPrecedingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.FollowingIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.FollowingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedFollowingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AncestorIterator#getStartNode()->int:::Get start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AncestorIterator#isReverse()->boolean:::True if this iterator has a reversed axis.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AncestorIterator#cloneIterator()->DTMAxisIterator:::Returns a deep copy of this iterator
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AncestorIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AncestorIterator#reset()->DTMAxisIterator:::Resets the iterator to the last start node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AncestorIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AncestorIterator#setMark()->void::: ancestor iterator set mark
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.AncestorIterator#gotoMark()->void::: ancestor iterator goto mark
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedAncestorIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.DescendantIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.DescendantIterator#isDescendant(int)->boolean:::Tell if this node identity is a descendant
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.DescendantIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.DescendantIterator#reset()->DTMAxisIterator:::Reset.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedDescendantIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.NthDescendantIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.SingletonIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.SingletonIterator#reset()->DTMAxisIterator:::Resets the iterator to the last start node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.SingletonIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators.TypedSingletonIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseTraversers#getAxisTraverser(int)->DTMAxisTraverser:::This returns a stateless "traverser", that can navigate over an XPath axis, though perhaps not in document order.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#setIncrementalSAXSource(IncrementalSAXSource)->void:::Bind a IncrementalSAXSource to this DTM
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#setFeature(String, boolean)->void:::Set an implementation dependent feature
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#setLocalNameTable(DTMStringPool)->void:::Set a reference pointer to the element name symbol table
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getLocalNameTable()->DTMStringPool:::Get a reference pointer to the element name symbol table.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#setNsNameTable(DTMStringPool)->void:::Set a reference pointer to the namespace URI symbol table
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNsNameTable()->DTMStringPool:::Get a reference pointer to the namespace URI symbol table.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#setPrefixNameTable(DTMStringPool)->void:::Set a reference pointer to the prefix name symbol table
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getPrefixNameTable()->DTMStringPool:::Get a reference pointer to the prefix name symbol table.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#setContentBuffer(FastStringBuffer)->void:::Set a reference pointer to the content-text repository
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getContentBuffer()->FastStringBuffer:::Get a reference pointer to the content-text repository
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getContentHandler()->org.xml.sax.ContentHandler:::getContentHandler returns "our SAX builder" -- the thing that someone else should send SAX events to in order to extend this DTM model.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getLexicalHandler()->LexicalHandler:::Return this DTM's lexical handler
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getEntityResolver()->org.xml.sax.EntityResolver:::Return this DTM's EntityResolver.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDTDHandler()->org.xml.sax.DTDHandler:::Return this DTM's DTDHandler.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getErrorHandler()->org.xml.sax.ErrorHandler:::Return this DTM's ErrorHandler.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDeclHandler()->org.xml.sax.ext.DeclHandler:::Return this DTM's DeclHandler.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#needsTwoThreads()->boolean::: document impl needs two threads
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#characters(char[], int, int)->void::: document impl characters
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#endDocument()->void::: document impl end document
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#endElement(java.lang.String, java.lang.String, java.lang.String)->void::: document impl end element
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#endPrefixMapping(java.lang.String)->void::: document impl end prefix mapping
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#ignorableWhitespace(char[], int, int)->void::: document impl ignorable whitespace
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#processingInstruction(java.lang.String, java.lang.String)->void::: document impl processing instruction
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#setDocumentLocator(Locator)->void::: document impl set document locator
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#skippedEntity(java.lang.String)->void::: document impl skipped entity
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#startDocument()->void::: document impl start document
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#startElement(java.lang.String, java.lang.String, java.lang.String, Attributes)->void::: document impl start element
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#startPrefixMapping(java.lang.String, java.lang.String)->void::: document impl start prefix mapping
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#comment(char[], int, int)->void::: document impl comment
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#endCDATA()->void::: document impl end a
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#endDTD()->void::: document impl end d
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#endEntity(java.lang.String)->void::: document impl end entity
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#startCDATA()->void::: document impl start a
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#startDTD(java.lang.String, java.lang.String, java.lang.String)->void::: document impl start d
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#startEntity(java.lang.String)->void::: document impl start entity
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#initDocument(int)->void:::Reset a dtm document to its initial (empty) state
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#hasChildNodes(int)->boolean:::Given a node handle, test if it has child nodes
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getFirstChild(int)->int:::Given a node handle, get the handle of the node's first child
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getLastChild(int)->int:::Given a node handle, advance to its last child
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getAttributeNode(int, String, String)->int:::Retrieves an attribute node by by qualified name and namespace URI.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getFirstAttribute(int)->int:::Given a node handle, get the index of the node's first attribute.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getFirstNamespaceNode(int, boolean)->int:::Given a node handle, get the index of the node's first child
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNextSibling(int)->int:::Given a node handle, advance to its next sibling
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getPreviousSibling(int)->int:::Given a node handle, find its preceeding sibling
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNextAttribute(int)->int:::Given a node handle, advance to the next attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNextNamespaceNode(int, int, boolean)->int:::Given a namespace handle, advance to the next namespace
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNextDescendant(int, int)->int:::Given a node handle, advance to its next descendant
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNextFollowing(int, int)->int:::Given a node handle, advance to the next node on the following axis.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNextPreceding(int, int)->int:::Given a node handle, advance to the next node on the preceding axis.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getParent(int)->int:::Given a node handle, find its parent node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentRoot()->int:::Returns the root element of the document.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocument()->int:::Given a node handle, find the owning document node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getOwnerDocument(int)->int:::Given a node handle, find the owning document node
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentRoot(int)->int:::Given a node handle, find the owning document node
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getStringValue(int)->XMLString:::Get the string-value of a node as a String object (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value).
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getStringValueChunkCount(int)->int::: document impl get string value chunk count
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getStringValueChunk(int, int, int[])->char[]::: document impl get string value chunk
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getExpandedTypeID(int)->int:::Given a node handle, return an ID that represents the node's expanded name.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getExpandedTypeID(String, String, int)->int:::Given an expanded name, return an ID
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getLocalNameFromExpandedNameID(int)->String:::Given an expanded-name ID, return the local name part.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNamespaceFromExpandedNameID(int)->String:::Given an expanded-name ID, return the namespace URI part.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNodeName(int)->String:::Given a node handle, return its DOM-style node name
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNodeNameX(int)->String:::Given a node handle, return the XPath node name
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getLocalName(int)->String:::Given a node handle, return its DOM-style localname
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getPrefix(int)->String:::Given a namespace handle, return the prefix that the namespace decl is mapping
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNamespaceURI(int)->String:::Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to.)
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNodeValue(int)->String:::Given a node handle, return its node value
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNodeType(int)->short:::Given a node handle, return its DOM-style node type
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getLevel(int)->short:::Get the depth level of this node in the tree (equals 1 for a parentless node).
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#isSupported(String, String)->boolean:::Tests whether DTM DOM implementation implements a specific feature and that feature is supported by this node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentBaseURI()->String:::Return the base URI of the document entity
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#setDocumentBaseURI(String)->void:::Set the base URI of the document entity.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentSystemIdentifier(int)->String:::Return the system identifier of the document entity
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentEncoding(int)->String:::Return the name of the character encoding scheme        in which the document entity is expressed.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentStandalone(int)->String:::Return an indication of the standalone status of the document,        either "yes" or "no"
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentVersion(int)->String:::Return a string representing the XML version of the document
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentAllDeclarationsProcessed()->boolean:::Return an indication of whether the processor has read the complete DTD
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentTypeDeclarationSystemIdentifier()->String:::  A document type declaration information item has the following properties:      1
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getDocumentTypeDeclarationPublicIdentifier()->String:::Return the public identifier of the external subset, normalized as described in 4.2.2 External Entities [XML]
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getElementById(String)->int:::Returns the Element whose ID is given by elementId
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getUnparsedEntityURI(String)->String:::The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3.3 Unparsed Entities])
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#supportsPreStripping()->boolean:::Return true if the xsl:strip-space or xsl:preserve-space was processed during construction of the DTM document
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#isNodeAfter(int, int)->boolean:::Figure out whether nodeHandle2 should be considered as being later in the document than nodeHandle1, in Document Order as defined by the XPath model
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#isCharacterElementContentWhitespace(int)->boolean:::    2
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#isDocumentAllDeclarationsProcessed(int)->boolean:::   10
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#isAttributeSpecified(int)->boolean:::    5
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean)->void:::Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value)
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#dispatchToEvents(int, org.xml.sax.ContentHandler)->void::: document impl dispatch to events
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getNode(int)->org.w3c.dom.Node:::Return an DOM node for the given node.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendChild(int, boolean, boolean)->void:::Append a child to the end of the child list of the current node
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendTextChild(String)->void:::Append a text node child that will be constructed from a string, to the end of the document
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendTextChild(int, int)->void:::Append a text child at the current insertion point
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendComment(int, int)->void:::Append a comment child at the current insertion point
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendStartElement(int, int, int)->void:::Append an Element child at the current insertion point
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendNSDeclaration(int, int, boolean)->void:::Append a Namespace Declaration child at the current insertion point
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendAttribute(int, int, int, boolean, int, int)->void:::Append an Attribute child at the current insertion point
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getAxisTraverser(int)->DTMAxisTraverser:::This returns a stateless "traverser", that can navigate over an XPath axis, though not in document order.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getAxisIterator(int)->DTMAxisIterator:::This is a shortcut to the iterators that implement the supported XPath axes (only namespace::) is not supported
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getTypedAxisIterator(int, int)->DTMAxisIterator:::Get an iterator that can navigate over an XPath Axis, predicated by the extended type ID.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendEndElement()->void:::Terminate the element currently acting as an insertion point
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendStartDocument()->void::: Starting a new document
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#appendEndDocument()->void::: All appends to this document have finished; do whatever final cleanup is needed.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#setProperty(String, Object)->void:::For the moment all the run time properties are ignored by this class.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#getSourceLocatorFor(int)->SourceLocator:::Source information is not handled yet, so return null here.
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#documentRegistration()->void:::A dummy routine to satisify the abstract interface
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#documentRelease()->void:::A dummy routine to satisify the abstract interface
com.sun.org.apache.xml.internal.dtm.ref.DTMDocumentImpl#migrateTo(DTMManager)->void:::Migrate a DTM built with an old DTMManager to a new DTMManager
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#addDTM(DTM, int)->void:::Add a DTM to the DTM table
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#addDTM(DTM, int, int)->void:::Add a DTM to the DTM table.
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#getFirstFreeDTMID()->int:::Get the first free DTM ID available
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#getDTM(Source, boolean, DTMWSFilter, boolean, boolean)->DTM:::Get an instance of a DTM, loaded with the content from the specified source
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#getDTMHandleFromNode(org.w3c.dom.Node)->int:::Given a W3C DOM node, try and return a DTM handle
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#getXMLReader(Source)->XMLReader:::This method returns the SAX2 parser to use with the InputSource obtained from this URI
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#releaseXMLReader(XMLReader)->void:::Indicates that the XMLReader object is no longer in use for the transform
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#getDTM(int)->DTM:::Return the DTM object containing a representation of this node.
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#getDTMIdentity(DTM)->int:::Given a DTM, find the ID number in the DTM tables which addresses the start of the document
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#release(DTM, boolean)->boolean:::Release the DTMManager's reference(s) to a DTM, making it unmanaged
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#createDocumentFragment()->DTM:::Method createDocumentFragment   NEEDSDOC (createDocumentFragment) @return
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#createDTMIterator(int, DTMFilter, boolean)->DTMIterator:::NEEDSDOC Method createDTMIterator   NEEDSDOC @param whatToShow NEEDSDOC @param filter NEEDSDOC @param entityReferenceExpansion  NEEDSDOC (createDTMIterator) @return
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#createDTMIterator(String, PrefixResolver)->DTMIterator:::NEEDSDOC Method createDTMIterator   NEEDSDOC @param xpathString NEEDSDOC @param presolver  NEEDSDOC (createDTMIterator) @return
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#createDTMIterator(int)->DTMIterator:::NEEDSDOC Method createDTMIterator   NEEDSDOC @param node  NEEDSDOC (createDTMIterator) @return
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#createDTMIterator(Object, int)->DTMIterator:::NEEDSDOC Method createDTMIterator   NEEDSDOC @param xpathCompiler NEEDSDOC @param pos  NEEDSDOC (createDTMIterator) @return
com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault#getExpandedNameTable(DTM)->ExpandedNameTable:::return the expanded name table
com.sun.org.apache.xml.internal.dtm.ref.DTMNamedNodeMap#getLength()->int:::Return the number of Attributes on this Element
com.sun.org.apache.xml.internal.dtm.ref.DTMNamedNodeMap#getNamedItem(String)->Node:::Retrieves a node specified by name.
com.sun.org.apache.xml.internal.dtm.ref.DTMNamedNodeMap#item(int)->Node:::Returns the indexth item in the map
com.sun.org.apache.xml.internal.dtm.ref.DTMNamedNodeMap#setNamedItem(Node)->Node:::Adds a node using its nodeName attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMNamedNodeMap#removeNamedItem(String)->Node:::Removes a node specified by name
com.sun.org.apache.xml.internal.dtm.ref.DTMNamedNodeMap#getNamedItemNS(String, String)->Node:::Retrieves a node specified by local name and namespace URI
com.sun.org.apache.xml.internal.dtm.ref.DTMNamedNodeMap#setNamedItemNS(Node)->Node:::Adds a node using its namespaceURI and localName
com.sun.org.apache.xml.internal.dtm.ref.DTMNamedNodeMap#removeNamedItemNS(String, String)->Node:::Removes a node specified by local name and namespace URI
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator#getDTMIterator()->DTMIterator:::Access the wrapped DTMIterator
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator#detach()->void:::Detaches the NodeIterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator#getExpandEntityReferences()->boolean:::The value of this flag determines whether the children of entity reference nodes are visible to the iterator.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator#getFilter()->NodeFilter:::Return a handle to the filter used to screen nodes
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator#getRoot()->Node::: node iterator get root
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator#getWhatToShow()->int:::Return a mask describing which node types are presented via the iterator.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator#nextNode()->Node::: node iterator next node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator#previousNode()->Node::: node iterator previous node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeList#getDTMIterator()->DTMIterator:::Access the wrapped DTMIterator
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeList#item(int)->Node:::Returns the indexth item in the collection
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeList#getLength()->int:::The number of nodes in the list
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeListBase#item(int)->Node:::Returns the indexth item in the collection
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeListBase#getLength()->int:::The number of nodes in the list
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getDTM()->DTM:::NON-DOM: Return the DTM model
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getDTMNodeNumber()->int:::NON-DOM: Return the DTM node number
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#equals(Node)->boolean:::Test for equality based on node number.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#equals(Object)->boolean:::Test for equality based on node number.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#hashCode()->int::: node proxy hash code
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#sameNodeAs(Node)->boolean:::FUTURE DOM: Test node identity, in lieu of Node==Node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getNodeName()->String::: node proxy get node name
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getTarget()->String:::A PI's "target" states what processor channel the PI's data should be directed to
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getLocalName()->String::: node proxy get local name
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getPrefix()->String::: node proxy get prefix
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setPrefix(String)->void::: node proxy set prefix
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getNamespaceURI()->String::: node proxy get namespace i
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#supports(String, String)->boolean:::Ask whether we support a given DOM feature
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#isSupported(String, String)->boolean:::Ask whether we support a given DOM feature
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getNodeValue()->String::: node proxy get node value
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getStringValue()->String::: node proxy get string value
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setNodeValue(String)->void::: node proxy set node value
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getNodeType()->short::: node proxy get node type
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getParentNode()->Node::: node proxy get parent node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getOwnerNode()->Node::: node proxy get owner node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getChildNodes()->NodeList::: node proxy get child nodes
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getFirstChild()->Node::: node proxy get first child
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getLastChild()->Node::: node proxy get last child
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getPreviousSibling()->Node::: node proxy get previous sibling
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getNextSibling()->Node::: node proxy get next sibling
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getAttributes()->NamedNodeMap::: node proxy get attributes
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#hasAttribute(String)->boolean:::Method hasAttribute
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#hasAttributeNS(String, String)->boolean:::Method hasAttributeNS
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getOwnerDocument()->Document::: node proxy get owner document
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#insertBefore(Node, Node)->Node::: node proxy insert before
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#replaceChild(Node, Node)->Node::: node proxy replace child
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#removeChild(Node)->Node::: node proxy remove child
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#appendChild(Node)->Node::: node proxy append child
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#hasChildNodes()->boolean::: node proxy has child nodes
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#cloneNode(boolean)->Node::: node proxy clone node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getDoctype()->DocumentType::: node proxy get doctype
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getImplementation()->DOMImplementation::: node proxy get implementation
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getDocumentElement()->Element:::This is a bit of a problem in DTM, since a DTM may be a Document Fragment and hence not have a clear-cut Document Element
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createElement(String)->Element::: node proxy create element
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createDocumentFragment()->DocumentFragment::: node proxy create document fragment
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createTextNode(String)->Text::: node proxy create text node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createComment(String)->Comment::: node proxy create comment
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createCDATASection(String)->CDATASection::: node proxy create section
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createProcessingInstruction(String, String)->ProcessingInstruction::: node proxy create processing instruction
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createAttribute(String)->Attr::: node proxy create attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createEntityReference(String)->EntityReference::: node proxy create entity reference
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getElementsByTagName(String)->NodeList::: node proxy get elements by tag name
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#importNode(Node, boolean)->Node::: node proxy import node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createElementNS(String, String)->Element::: node proxy create element s
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#createAttributeNS(String, String)->Attr::: node proxy create attribute s
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getElementsByTagNameNS(String, String)->NodeList::: node proxy get elements by tag name s
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getElementById(String)->Element::: node proxy get element by id
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#splitText(int)->Text::: node proxy split text
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getData()->String::: node proxy get data
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setData(String)->void::: node proxy set data
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getLength()->int::: node proxy get length
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#substringData(int, int)->String::: node proxy substring data
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#appendData(String)->void::: node proxy append data
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#insertData(int, String)->void::: node proxy insert data
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#deleteData(int, int)->void::: node proxy delete data
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#replaceData(int, int, String)->void::: node proxy replace data
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getTagName()->String::: node proxy get tag name
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getAttribute(String)->String::: node proxy get attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setAttribute(String, String)->void::: node proxy set attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#removeAttribute(String)->void::: node proxy remove attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getAttributeNode(String)->Attr::: node proxy get attribute node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setAttributeNode(Attr)->Attr::: node proxy set attribute node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#removeAttributeNode(Attr)->Attr::: node proxy remove attribute node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#hasAttributes()->boolean:::Introduced in DOM Level 2.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#normalize()->void::: node proxy normalize
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getAttributeNS(String, String)->String::: node proxy get attribute s
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setAttributeNS(String, String, String)->void::: node proxy set attribute s
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#removeAttributeNS(String, String)->void::: node proxy remove attribute s
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getAttributeNodeNS(String, String)->Attr::: node proxy get attribute node s
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setAttributeNodeNS(Attr)->Attr::: node proxy set attribute node s
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getName()->String::: node proxy get name
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getSpecified()->boolean::: node proxy get specified
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getValue()->String::: node proxy get value
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setValue(String)->void::: node proxy set value
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getOwnerElement()->Element:::Get the owner element of an attribute.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#adoptNode(Node)->Node:::NEEDSDOC Method adoptNode   NEEDSDOC @param source  NEEDSDOC (adoptNode) @return
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getInputEncoding()->String:::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setEncoding(String)->void:::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getStandalone()->boolean:::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setStandalone(boolean)->void:::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getStrictErrorChecking()->boolean:::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setStrictErrorChecking(boolean)->void:::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getVersion()->String:::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setVersion(String)->void:::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy.DTMNodeProxyImplementation#createDocumentType(String, String, String)->DocumentType::: node proxy implementation create document type
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy.DTMNodeProxyImplementation#createDocument(String, String, DocumentType)->Document::: node proxy implementation create document
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy.DTMNodeProxyImplementation#hasFeature(String, String)->boolean:::Ask whether we support a given DOM feature
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy.DTMNodeProxyImplementation#getFeature(String, String)->Object::: This method returns a specialized object which implements the specialized APIs of the specified feature and version
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setUserData(String, Object, UserDataHandler)->Object::: node proxy set user data
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getUserData(String)->Object:::Retrieves the object associated to a key on a this node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getFeature(String, String)->Object::: This method returns a specialized object which implements the specialized APIs of the specified feature and version
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#isEqualNode(Node)->boolean:::Tests whether two nodes are equal
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#lookupNamespaceURI(String)->String:::DOM Level 3 Look up the namespace URI associated to the given prefix, starting from this node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#isDefaultNamespace(String)->boolean::: DOM Level 3  This method checks if the specified namespaceURI is the  default namespace or not.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#lookupPrefix(String)->String:::DOM Level 3 Look up the prefix associated to the given namespace URI, starting from this node.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#isSameNode(Node)->boolean:::Returns whether this node is the same node as the given one
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setTextContent(String)->void:::This attribute returns the text content of this node and its descendants
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getTextContent()->String:::This attribute returns the text content of this node and its descendants
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#compareDocumentPosition(Node)->short:::Compares a node with this node with regard to their position in the document.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getBaseURI()->String:::The absolute base URI of this node or null if undefined
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#renameNode(Node, String, String)->Node:::DOM Level 3 Renaming node
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#normalizeDocument()->void::: DOM Level 3  Normalize document.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getDomConfig()->DOMConfiguration:::The configuration used when Document.normalizeDocument is invoked.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setDocumentURI(String)->void:::DOM Level 3
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getDocumentURI()->String:::DOM Level 3 The location of the document or null if undefined
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getActualEncoding()->String:::DOM Level 3 An attribute specifying the actual encoding of this document
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setActualEncoding(String)->void:::DOM Level 3 An attribute specifying the actual encoding of this document
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#replaceWholeText(String)->Text:::DOM Level 3
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getWholeText()->String:::DOM Level 3 Returns all text of Text nodes logically-adjacent text nodes to this node, concatenated in document order.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#isElementContentWhitespace()->boolean:::DOM Level 3 Returns whether this text node contains whitespace in element content, often abusively called "ignorable whitespace".
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setIdAttribute(boolean)->void:::NON-DOM: set the type of this attribute to be ID type.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setIdAttribute(String, boolean)->void:::DOM Level 3: register the given attribute node as an ID attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setIdAttributeNode(Attr, boolean)->void:::DOM Level 3: register the given attribute node as an ID attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setIdAttributeNS(String, String, boolean)->void:::DOM Level 3: register the given attribute node as an ID attribute
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getSchemaTypeInfo()->TypeInfo:::Method getSchemaTypeInfo.
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#isId()->boolean::: node proxy is id
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getXmlEncoding()->String::: node proxy get xml encoding
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setXmlEncoding(String)->void::: node proxy set xml encoding
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getXmlStandalone()->boolean::: node proxy get xml standalone
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setXmlStandalone(boolean)->void::: node proxy set xml standalone
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#getXmlVersion()->String::: node proxy get xml version
com.sun.org.apache.xml.internal.dtm.ref.DTMNodeProxy#setXmlVersion(String)->void::: node proxy set xml version
com.sun.org.apache.xml.internal.dtm.ref.DTMSafeStringPool#removeAllElements()->void::: safe string pool remove all elements
com.sun.org.apache.xml.internal.dtm.ref.DTMSafeStringPool#indexToString(int)->String::: safe string pool index to string
com.sun.org.apache.xml.internal.dtm.ref.DTMSafeStringPool#stringToIndex(String)->int::: safe string pool string to index
com.sun.org.apache.xml.internal.dtm.ref.DTMSafeStringPool#_main(String[])->void:::Command-line unit test driver
com.sun.org.apache.xml.internal.dtm.ref.DTMStringPool#removeAllElements()->void::: string pool remove all elements
com.sun.org.apache.xml.internal.dtm.ref.DTMStringPool#indexToString(int)->String::: string pool index to string
com.sun.org.apache.xml.internal.dtm.ref.DTMStringPool#stringToIndex(String)->int::: string pool string to index
com.sun.org.apache.xml.internal.dtm.ref.DTMStringPool#_main(String[])->void:::Command-line unit test driver
com.sun.org.apache.xml.internal.dtm.ref.DTMTreeWalker#setDTM(DTM)->void:::Set the DTM to be traversed.
com.sun.org.apache.xml.internal.dtm.ref.DTMTreeWalker#getcontentHandler()->ContentHandler:::Get the ContentHandler used for the tree walk.
com.sun.org.apache.xml.internal.dtm.ref.DTMTreeWalker#setcontentHandler(ContentHandler)->void:::Set the ContentHandler used for the tree walk.
com.sun.org.apache.xml.internal.dtm.ref.DTMTreeWalker#traverse(int)->void:::Perform a non-recursive pre-order/post-order traversal, operating as a Visitor
com.sun.org.apache.xml.internal.dtm.ref.DTMTreeWalker#traverse(int, int)->void:::Perform a non-recursive pre-order/post-order traversal, operating as a Visitor
com.sun.org.apache.xml.internal.dtm.ref.DTMTreeWalker#startNode(int)->void:::Start processing given node
com.sun.org.apache.xml.internal.dtm.ref.DTMTreeWalker#endNode(int)->void:::End processing of given node
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#getInstance()->DTMAxisIterator::: empty iterator get instance
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#next()->int::: empty iterator next
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#reset()->DTMAxisIterator::: empty iterator reset
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#getLast()->int::: empty iterator get last
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#getPosition()->int::: empty iterator get position
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#setMark()->void::: empty iterator set mark
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#gotoMark()->void::: empty iterator goto mark
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#setStartNode(int)->DTMAxisIterator::: empty iterator set start node
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#getStartNode()->int::: empty iterator get start node
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#isReverse()->boolean::: empty iterator is reverse
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#cloneIterator()->DTMAxisIterator::: empty iterator clone iterator
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#setRestartable(boolean)->void::: empty iterator set restartable
com.sun.org.apache.xml.internal.dtm.ref.EmptyIterator#getNodeByPosition(int)->int::: empty iterator get node by position
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getExpandedTypeID(String, String, int)->int:::Given an expanded name represented by namespace, local name and node type, return an ID
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getExpandedTypeID(String, String, int, boolean)->int:::Given an expanded name represented by namespace, local name and node type, return an ID
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getExpandedTypeID(int)->int:::Given a type, return an expanded name ID.Any additional nodes that are created that have this expanded name will use this ID.
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getLocalName(int)->String:::Given an expanded-name ID, return the local name part.
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getLocalNameID(int)->int:::Given an expanded-name ID, return the local name ID.
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getNamespace(int)->String:::Given an expanded-name ID, return the namespace URI part.
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getNamespaceID(int)->int:::Given an expanded-name ID, return the namespace URI ID.
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getType(int)->short:::Given an expanded-name ID, return the local name ID.
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getSize()->int:::Return the size of the ExpandedNameTable
com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable#getExtendedTypes()->ExtendedType[]:::Return the array of extended types
com.sun.org.apache.xml.internal.dtm.ref.ExtendedType#redefine(int, String, String)->void:::Redefine this ExtendedType object to represent a different extended type
com.sun.org.apache.xml.internal.dtm.ref.ExtendedType#redefine(int, String, String, int)->void:::Redefine this ExtendedType object to represent a different extended type
com.sun.org.apache.xml.internal.dtm.ref.ExtendedType#hashCode()->int:::Override the hashCode() method in the Object class
com.sun.org.apache.xml.internal.dtm.ref.ExtendedType#equals(ExtendedType)->boolean:::Test if this ExtendedType object is equal to the given ExtendedType.
com.sun.org.apache.xml.internal.dtm.ref.ExtendedType#getNodeType()->int:::Return the node type
com.sun.org.apache.xml.internal.dtm.ref.ExtendedType#getLocalName()->String:::Return the local name
com.sun.org.apache.xml.internal.dtm.ref.ExtendedType#getNamespace()->String:::Return the namespace
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource#setContentHandler(ContentHandler)->void:::Register a SAX-style content handler for us to output to
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource#setLexicalHandler(org.xml.sax.ext.LexicalHandler)->void::: Register a SAX-style lexical handler for us to output to
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource#setDTDHandler(org.xml.sax.DTDHandler)->void::: Register a SAX-style DTD handler for us to output to
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource#deliverMoreNodes(boolean)->Object:::deliverMoreNodes() is a simple API which tells the thread in which the IncrementalSAXSource is running to deliver more events (true), or stop delivering events and close out its input (false)
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource#startParse(InputSource)->void:::Launch an XMLReader's parsing operation, feeding events to this IncrementalSAXSource
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#createIncrementalSAXSource(CoroutineManager, int)->IncrementalSAXSource::: incremental source_ filter create incremental source
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#init(CoroutineManager, int, int)->void::: incremental source_ filter init
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#setXMLReader(XMLReader)->void:::Bind our input streams to an XMLReader
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#setContentHandler(ContentHandler)->void::: incremental source_ filter set content handler
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#setDTDHandler(DTDHandler)->void::: incremental source_ filter set handler
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#setLexicalHandler(LexicalHandler)->void::: incremental source_ filter set lexical handler
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#setErrHandler(ErrorHandler)->void::: incremental source_ filter set err handler
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#setReturnFrequency(int)->void::: incremental source_ filter set return frequency
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#characters(char[], int, int)->void::: incremental source_ filter characters
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#endDocument()->void::: incremental source_ filter end document
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#endElement(java.lang.String, java.lang.String, java.lang.String)->void::: incremental source_ filter end element
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#endPrefixMapping(java.lang.String)->void::: incremental source_ filter end prefix mapping
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#ignorableWhitespace(char[], int, int)->void::: incremental source_ filter ignorable whitespace
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#processingInstruction(java.lang.String, java.lang.String)->void::: incremental source_ filter processing instruction
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#setDocumentLocator(Locator)->void::: incremental source_ filter set document locator
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#skippedEntity(java.lang.String)->void::: incremental source_ filter skipped entity
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#startDocument()->void::: incremental source_ filter start document
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#startElement(java.lang.String, java.lang.String, java.lang.String, Attributes)->void::: incremental source_ filter start element
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#startPrefixMapping(java.lang.String, java.lang.String)->void::: incremental source_ filter start prefix mapping
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#comment(char[], int, int)->void::: incremental source_ filter comment
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#endCDATA()->void::: incremental source_ filter end a
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#endDTD()->void::: incremental source_ filter end d
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#endEntity(java.lang.String)->void::: incremental source_ filter end entity
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#startCDATA()->void::: incremental source_ filter start a
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#startDTD(java.lang.String, java.lang.String, java.lang.String)->void::: incremental source_ filter start d
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#startEntity(java.lang.String)->void::: incremental source_ filter start entity
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#notationDecl(String, String, String)->void::: incremental source_ filter notation decl
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#unparsedEntityDecl(String, String, String, String)->void::: incremental source_ filter unparsed entity decl
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#error(SAXParseException)->void::: incremental source_ filter error
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#fatalError(SAXParseException)->void::: incremental source_ filter fatal error
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#warning(SAXParseException)->void::: incremental source_ filter warning
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#getSourceCoroutineID()->int::: incremental source_ filter get source coroutine d
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#getControllerCoroutineID()->int::: incremental source_ filter get controller coroutine d
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#getCoroutineManager()->CoroutineManager::: incremental source_ filter get coroutine manager
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#count_and_yield(boolean)->void:::In the SAX delegation code, I've inlined the count-down in the hope of encouraging compilers to deliver better performance
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#startParse(InputSource)->void:::Launch a thread that will run an XMLReader's parse() operation within  a thread, feeding events to this IncrementalSAXSource_Filter
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#run()->void::: incremental source_ filter run
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Filter#deliverMoreNodes(boolean)->Object:::deliverMoreNodes() is a simple API which tells the coroutine parser that we need more nodes
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces#createIncrementalSAXSource()->IncrementalSAXSource::: incremental source_ xerces create incremental source
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces#createIncrementalSAXSource(SAXParser)->IncrementalSAXSource::: incremental source_ xerces create incremental source
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces#setContentHandler(org.xml.sax.ContentHandler)->void::: incremental source_ xerces set content handler
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces#setLexicalHandler(org.xml.sax.ext.LexicalHandler)->void::: incremental source_ xerces set lexical handler
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces#setDTDHandler(org.xml.sax.DTDHandler)->void::: incremental source_ xerces set handler
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces#startParse(InputSource)->void:::startParse() is a simple API which tells the IncrementalSAXSource to begin reading a document.
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces#deliverMoreNodes(boolean)->Object:::deliverMoreNodes() is a simple API which tells the coroutine parser that we need more nodes
com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces#_main(String[])->void:::Simple unit test
com.sun.org.apache.xml.internal.dtm.ref.NodeLocator#getPublicId()->String:::getPublicId returns the public ID of the node.
com.sun.org.apache.xml.internal.dtm.ref.NodeLocator#getSystemId()->String:::getSystemId returns the system ID of the node.
com.sun.org.apache.xml.internal.dtm.ref.NodeLocator#getLineNumber()->int:::getLineNumber returns the line number of the node.
com.sun.org.apache.xml.internal.dtm.ref.NodeLocator#getColumnNumber()->int:::getColumnNumber returns the column number of the node.
com.sun.org.apache.xml.internal.dtm.ref.NodeLocator#toString()->String:::toString returns a string representation of this NodeLocator instance.

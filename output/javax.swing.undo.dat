javax.swing.undo.AbstractUndoableEdit#die()->void:::Sets alive to false
javax.swing.undo.AbstractUndoableEdit#undo()->void:::Throws CannotUndoException if canUndo returns false
javax.swing.undo.AbstractUndoableEdit#canUndo()->boolean:::Returns true if this edit is alive and hasBeenDone is true.
javax.swing.undo.AbstractUndoableEdit#redo()->void:::Throws CannotRedoException if canRedo returns false
javax.swing.undo.AbstractUndoableEdit#canRedo()->boolean:::Returns true if this edit is alive and hasBeenDone is false.
javax.swing.undo.AbstractUndoableEdit#addEdit(UndoableEdit)->boolean:::This default implementation returns false.
javax.swing.undo.AbstractUndoableEdit#replaceEdit(UndoableEdit)->boolean:::This default implementation returns false.
javax.swing.undo.AbstractUndoableEdit#isSignificant()->boolean:::This default implementation returns true.
javax.swing.undo.AbstractUndoableEdit#getPresentationName()->String:::This default implementation returns ""
javax.swing.undo.AbstractUndoableEdit#getUndoPresentationName()->String:::Retreives the value from the defaults table with key AbstractUndoableEdit.undoText and returns that value followed by a space, followed by getPresentationName
javax.swing.undo.AbstractUndoableEdit#getRedoPresentationName()->String:::Retreives the value from the defaults table with key AbstractUndoableEdit.redoText and returns that value followed by a space, followed by getPresentationName
javax.swing.undo.AbstractUndoableEdit#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.undo.CompoundEdit#undo()->void:::Sends undo to all contained UndoableEdits in the reverse of the order in which they were added.
javax.swing.undo.CompoundEdit#redo()->void:::Sends redo to all contained UndoableEdits in the order in which they were added.
javax.swing.undo.CompoundEdit#lastEdit()->UndoableEdit:::Returns the last UndoableEdit in edits, or null if edits is empty.
javax.swing.undo.CompoundEdit#die()->void:::Sends die to each subedit, in the reverse of the order that they were added.
javax.swing.undo.CompoundEdit#addEdit(UndoableEdit)->boolean:::If this edit is inProgress, accepts anEdit and returns true
javax.swing.undo.CompoundEdit#end()->void:::Sets inProgress to false.
javax.swing.undo.CompoundEdit#canUndo()->boolean:::Returns false if isInProgress or if super returns false.
javax.swing.undo.CompoundEdit#canRedo()->boolean:::Returns false if isInProgress or if super returns false.
javax.swing.undo.CompoundEdit#isInProgress()->boolean:::Returns true if this edit is in progress--that is, it has not received end
javax.swing.undo.CompoundEdit#isSignificant()->boolean:::Returns true if any of the UndoableEdits in edits do
javax.swing.undo.CompoundEdit#getPresentationName()->String:::Returns getPresentationName from the last UndoableEdit added to edits
javax.swing.undo.CompoundEdit#getUndoPresentationName()->String:::Returns getUndoPresentationName from the last UndoableEdit added to edits
javax.swing.undo.CompoundEdit#getRedoPresentationName()->String:::Returns getRedoPresentationName from the last UndoableEdit added to edits
javax.swing.undo.CompoundEdit#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.undo.StateEdit#init(StateEditable, String)->void:::Initialize the state edit.
javax.swing.undo.StateEdit#end()->void:::Gets the post-edit state of the StateEditable object and ends the edit.
javax.swing.undo.StateEdit#undo()->void:::Tells the edited object to apply the state prior to the edit
javax.swing.undo.StateEdit#redo()->void:::Tells the edited object to apply the state after the edit
javax.swing.undo.StateEdit#getPresentationName()->String:::Gets the presentation name for this edit
javax.swing.undo.StateEdit#removeRedundantState()->void:::Remove redundant key/values in state hashtables.
javax.swing.undo.StateEditable#storeState(Hashtable)->void:::Upon receiving this message the receiver should place any relevant state into <EM>state</EM>.
javax.swing.undo.StateEditable#restoreState(Hashtable)->void:::Upon receiving this message the receiver should extract any relevant state out of <EM>state</EM>.
javax.swing.undo.UndoableEdit#undo()->void:::Undo the edit.
javax.swing.undo.UndoableEdit#canUndo()->boolean:::Returns true if this edit may be undone.
javax.swing.undo.UndoableEdit#redo()->void:::Re-applies the edit.
javax.swing.undo.UndoableEdit#canRedo()->boolean:::Returns true if this edit may be redone.
javax.swing.undo.UndoableEdit#die()->void:::Informs the edit that it should no longer be used
javax.swing.undo.UndoableEdit#addEdit(UndoableEdit)->boolean:::Adds an UndoableEdit to this UndoableEdit
javax.swing.undo.UndoableEdit#replaceEdit(UndoableEdit)->boolean:::Returns true if this UndoableEdit should replace anEdit
javax.swing.undo.UndoableEdit#isSignificant()->boolean:::Returns true if this edit is considered significant
javax.swing.undo.UndoableEdit#getPresentationName()->String:::Returns a localized, human-readable description of this edit, suitable for use in a change log, for example.
javax.swing.undo.UndoableEdit#getUndoPresentationName()->String:::Returns a localized, human-readable description of the undoable form of this edit, suitable for use as an Undo menu item, for example
javax.swing.undo.UndoableEdit#getRedoPresentationName()->String:::Returns a localized, human-readable description of the redoable form of this edit, suitable for use as a Redo menu item, for example
javax.swing.undo.UndoableEditSupport#addUndoableEditListener(UndoableEditListener)->void:::Registers an UndoableEditListener
javax.swing.undo.UndoableEditSupport#removeUndoableEditListener(UndoableEditListener)->void:::Removes an UndoableEditListener.
javax.swing.undo.UndoableEditSupport#getUndoableEditListeners()->UndoableEditListener[]:::Returns an array of all the UndoableEditListeners added to this UndoableEditSupport with addUndoableEditListener().
javax.swing.undo.UndoableEditSupport#_postEdit(UndoableEdit)->void:::Called only from postEdit and endUpdate
javax.swing.undo.UndoableEditSupport#postEdit(UndoableEdit)->void:::DEADLOCK WARNING: Calling this method may call undoableEditHappened in all listeners
javax.swing.undo.UndoableEditSupport#getUpdateLevel()->int:::Returns the update level value.
javax.swing.undo.UndoableEditSupport#beginUpdate()->void::: undoable edit support begin update
javax.swing.undo.UndoableEditSupport#createCompoundEdit()->CompoundEdit:::Called only from beginUpdate
javax.swing.undo.UndoableEditSupport#endUpdate()->void:::DEADLOCK WARNING: Calling this method may call undoableEditHappened in all listeners
javax.swing.undo.UndoableEditSupport#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.undo.UndoManager#getLimit()->int:::Returns the maximum number of edits this UndoManager holds
javax.swing.undo.UndoManager#discardAllEdits()->void:::Empties the undo manager sending each edit a die message in the process.
javax.swing.undo.UndoManager#trimForLimit()->void:::Reduces the number of queued edits to a range of size limit, centered on the index of the next edit.
javax.swing.undo.UndoManager#trimEdits(int, int)->void:::Removes edits in the specified range
javax.swing.undo.UndoManager#setLimit(int)->void:::Sets the maximum number of edits this UndoManager holds
javax.swing.undo.UndoManager#editToBeUndone()->UndoableEdit:::Returns the next significant edit to be undone if undo is invoked
javax.swing.undo.UndoManager#editToBeRedone()->UndoableEdit:::Returns the next significant edit to be redone if redo is invoked
javax.swing.undo.UndoManager#undoTo(UndoableEdit)->void:::Undoes all changes from the index of the next edit to edit, updating the index of the next edit appropriately.
javax.swing.undo.UndoManager#redoTo(UndoableEdit)->void:::Redoes all changes from the index of the next edit to edit, updating the index of the next edit appropriately.
javax.swing.undo.UndoManager#undoOrRedo()->void:::Convenience method that invokes one of undo or redo
javax.swing.undo.UndoManager#canUndoOrRedo()->boolean:::Returns true if it is possible to invoke undo or redo.
javax.swing.undo.UndoManager#undo()->void:::Undoes the appropriate edits
javax.swing.undo.UndoManager#canUndo()->boolean:::Returns true if edits may be undone
javax.swing.undo.UndoManager#redo()->void:::Redoes the appropriate edits
javax.swing.undo.UndoManager#canRedo()->boolean:::Returns true if edits may be redone
javax.swing.undo.UndoManager#addEdit(UndoableEdit)->boolean:::Adds an UndoableEdit to this UndoManager, if it's possible
javax.swing.undo.UndoManager#end()->void:::Turns this UndoManager into a normal CompoundEdit
javax.swing.undo.UndoManager#getUndoOrRedoPresentationName()->String:::Convenience method that returns either getUndoPresentationName or getRedoPresentationName
javax.swing.undo.UndoManager#getUndoPresentationName()->String:::Returns a description of the undoable form of this edit
javax.swing.undo.UndoManager#getRedoPresentationName()->String:::Returns a description of the redoable form of this edit
javax.swing.undo.UndoManager#undoableEditHappened(UndoableEditEvent)->void:::An UndoableEditListener method
javax.swing.undo.UndoManager#toString()->String:::Returns a string that displays and identifies this object's properties.

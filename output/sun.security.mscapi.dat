CKeyStore.KeyEntry#getAlias():::Gets the alias for the keystore entry.:::return
CKeyStore.KeyEntry#setAlias(String):::Sets the alias for the keystore entry.:::
CKeyStore.KeyEntry#getPrivateKey():::Gets the private key for the keystore entry.:::return
CKeyStore.KeyEntry#setRSAPrivateKey(Key):::Sets the private key for the keystore entry.:::key->modulusBytes->key->getModulus->toByteArray->keyBitLength->keyBlob->key->getPublicExponent->toByteArray->key->getPrivateExponent->toByteArray->key->getPrimeP->toByteArray->key->getPrimeQ->toByteArray->key->getPrimeExponentP->toByteArray->key->getPrimeExponentQ->toByteArray->key->getCrtCoefficient->toByteArray->generateRSAPrivateKeyBlob->Objects->requireNonNull->UUID->randomUUID->toString->storePrivateKey
CKeyStore.KeyEntry#getCertificateChain():::Gets the certificate chain for the keystore entry.:::return
CKeyStore.KeyEntry#setCertificateChain(X509Certificate[]):::Sets the certificate chain for the keystore entry.:::for->i
CKeyStore#engineGetKey(String, char[]):::Returns the key associated with the given alias:::if->return->if->throw->new->UnrecoverableKeyException->if->engineIsKeyEntry->return->entry->entries->get->return->entry->getPrivateKey
CKeyStore#engineGetCertificateChain(String):::Returns the certificate chain associated with the given alias.:::if->return->entry->entries->get->certChain->entry->getCertificateChain->return->certChain->clone
CKeyStore#engineGetCertificate(String):::Returns the certificate associated with the given alias:::if->return->entry->entries->get->certChain->entry->getCertificateChain->return
CKeyStore#engineGetCreationDate(String):::Returns the creation date of the entry identified by the given alias.:::if->return->return->new->Date
CKeyStore#engineSetKeyEntry(String, java.security.Key, char[], Certificate[]):::Stores the given private key and associated certificate chain in the keystore:::if->throw->new->KeyStoreException->if->throw->new->KeyStoreException->if->entry->entries->get->xchain->if->if->else->new->X509CertificateArr->System->arraycopy->else->if->new->KeyEntry->storeWithUniqueAlias->entry->setAlias->try->entry->setRSAPrivateKey->entry->setCertificateChain->catch->throw->new->KeyStoreException->throw->new->KeyStoreException->finally->else->throw->new->UnsupportedOperationException
CKeyStore#engineSetKeyEntry(String, byte[], Certificate[]):::Assigns the given key (that has already been protected) to the given alias:::throw->new->UnsupportedOperationException
CKeyStore#engineSetCertificateEntry(String, Certificate):::Assigns the given certificate to the given alias:::if->throw->new->KeyStoreException->if->chain->new->X509CertificateArr->entry->entries->get->if->new->KeyEntry->storeWithUniqueAlias->if->entry->getPrivateKey->entry->setAlias->try->entry->setCertificateChain->catch->throw->new->KeyStoreException->finally->else->throw->new->UnsupportedOperationException
CKeyStore#engineDeleteEntry(String):::Deletes the entry identified by the given alias from this keystore.:::if->throw->new->KeyStoreException->entry->entries->remove->if->certChain->entry->getCertificateChain->if->try->encoding->getEncoded->getName->entry->getAlias->removeCertificate->catch->throw->new->KeyStoreException->finally->privateKey->entry->getPrivateKey->if->CKey->privateKey->getHCryptProvider->getContainerName->destroyKeyContainer
CKeyStore#engineAliases():::Lists all the alias names of this keystore.:::iter->entries->keySet->iterator->return->new->Enumeration<String>
CKeyStore#engineContainsAlias(String):::Checks if the given alias exists in this keystore.:::return->entries->containsKey
CKeyStore#engineSize():::Retrieves the number of entries in this keystore.:::return->entries->size
CKeyStore#engineIsKeyEntry(String):::Returns true if the entry identified by the given alias is a key entry, and false otherwise.:::if->return->entry->entries->get->return->entry->getPrivateKey
CKeyStore#engineIsCertificateEntry(String):::Returns true if the entry identified by the given alias is a trusted certificate entry, and false otherwise.:::if->return->entry->entries->get->return->entry->getPrivateKey
CKeyStore#engineGetCertificateAlias(Certificate):::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate:::foreach->entries->entrySet->entry->mapEntry->getValue->if->equals->return->entry->getAlias->return
CKeyStore#engineStore(OutputStream, char[]):::engineStore is currently a no-op:::if->throw->new->IOException->if->throw->new->IOException
CKeyStore#engineLoad(InputStream, char[]):::Loads the keystore:::if->throw->new->IOException->if->throw->new->IOException->sm->System->getSecurityManager->if->sm->new->SecurityPermission->checkPermission->entries->clear->try->getName->loadKeysOrCertificateChains->catch->throw->new->IOException->finally->if->debug->entries->size->println
CSignature.RSA#engineSign():::Returns the signature bytes of all the data updated so far:::hash->getDigestValue->if->privateKey->getHCryptKey->return->privateKey->getHCryptProvider->signCngHash->else->noHashOID->result->privateKey->getHCryptProvider->privateKey->getHCryptKey->signHash->return->convertEndianArray
CSignature.RSA#engineVerify(byte[]):::Verifies the passed-in signature.:::hash->getDigestValue->if->publicKey->getHCryptKey->return->publicKey->getHCryptProvider->verifyCngSignedHash->else->return->convertEndianArray->publicKey->getHCryptProvider->publicKey->getHCryptKey->verifySignedHash
CSignature#signCngHash(int, byte[], int, int, String, long, long):::Sign hash using CNG API with HCRYPTKEY.:::
CSignature#resetDigest():::Resets the message digest if needed.:::if->if->messageDigest->reset
CSignature#engineUpdate(byte):::Updates the data to be signed or verified using the specified byte.:::messageDigest->update
CSignature#engineUpdate(byte[], int, int):::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.:::messageDigest->update
CSignature#engineUpdate(ByteBuffer):::Updates the data to be signed or verified, using the specified ByteBuffer.:::messageDigest->update
CSignature#engineSetParameter(String, Object):::Sets the specified algorithm parameter to the specified value:::throw->new->InvalidParameterException
CSignature#engineSetParameter(AlgorithmParameterSpec):::Sets this signature engine with the specified algorithm parameter.:::if->throw->new->InvalidAlgorithmParameterException
CSignature#engineGetParameter(String):::Gets the value of the specified algorithm parameter:::throw->new->InvalidParameterException
CSignature#engineGetParameters():::Gets the algorithm parameter from this signature engine.:::return
PRNG#engineSetSeed(byte[]):::Reseeds this random object:::if->generateSeed
PRNG#engineNextBytes(byte[]):::Generates a user-specified number of random bytes.:::if->if->generateSeed->throw->new->ProviderException
PRNG#engineGenerateSeed(int):::Returns the given number of seed bytes:::seed->generateSeed->if->throw->new->ProviderException->return

sun.security.mscapi.CKey.NativeHandles#finalize()->void::: native handles finalize
sun.security.mscapi.CKey#length()->int::: key length
sun.security.mscapi.CKey#getHCryptKey()->long::: key get crypt key
sun.security.mscapi.CKey#getHCryptProvider()->long::: key get crypt provider
sun.security.mscapi.CKey#getAlgorithm()->String::: key get algorithm
sun.security.mscapi.CKey#getContainerName(long)->String::: key get container name
sun.security.mscapi.CKey#getKeyType(long)->String::: key get key type
sun.security.mscapi.CKey#generateECBlob(Key)->byte[]::: key generate blob
sun.security.mscapi.CKeyPair#getPrivate()->CPrivateKey::: key pair get private
sun.security.mscapi.CKeyPair#getPublic()->CPublicKey::: key pair get public
sun.security.mscapi.CKeyPairGenerator.RSA#initialize(int, SecureRandom)->void::: a initialize
sun.security.mscapi.CKeyPairGenerator.RSA#initialize(AlgorithmParameterSpec, SecureRandom)->void::: a initialize
sun.security.mscapi.CKeyPairGenerator.RSA#generateKeyPair()->KeyPair::: a generate key pair
sun.security.mscapi.CKeyStore.KeyEntry#getAlias()->String:::Gets the alias for the keystore entry.
sun.security.mscapi.CKeyStore.KeyEntry#setAlias(String)->void:::Sets the alias for the keystore entry.
sun.security.mscapi.CKeyStore.KeyEntry#getPrivateKey()->CKey:::Gets the private key for the keystore entry.
sun.security.mscapi.CKeyStore.KeyEntry#setRSAPrivateKey(Key)->void:::Sets the private key for the keystore entry.
sun.security.mscapi.CKeyStore.KeyEntry#getCertificateChain()->X509Certificate[]:::Gets the certificate chain for the keystore entry.
sun.security.mscapi.CKeyStore.KeyEntry#setCertificateChain(X509Certificate[])->void:::Sets the certificate chain for the keystore entry.
sun.security.mscapi.CKeyStore#engineGetKey(String, char[])->java.security.Key:::Returns the key associated with the given alias
sun.security.mscapi.CKeyStore#engineGetCertificateChain(String)->Certificate[]:::Returns the certificate chain associated with the given alias.
sun.security.mscapi.CKeyStore#engineGetCertificate(String)->Certificate:::Returns the certificate associated with the given alias
sun.security.mscapi.CKeyStore#engineGetCreationDate(String)->Date:::Returns the creation date of the entry identified by the given alias.
sun.security.mscapi.CKeyStore#engineSetKeyEntry(String, java.security.Key, char[], Certificate[])->void:::Stores the given private key and associated certificate chain in the keystore
sun.security.mscapi.CKeyStore#engineSetKeyEntry(String, byte[], Certificate[])->void:::Assigns the given key (that has already been protected) to the given alias
sun.security.mscapi.CKeyStore#engineSetCertificateEntry(String, Certificate)->void:::Assigns the given certificate to the given alias
sun.security.mscapi.CKeyStore#engineDeleteEntry(String)->void:::Deletes the entry identified by the given alias from this keystore.
sun.security.mscapi.CKeyStore#engineAliases()->Enumeration:::Lists all the alias names of this keystore.
sun.security.mscapi.CKeyStore#engineContainsAlias(String)->boolean:::Checks if the given alias exists in this keystore.
sun.security.mscapi.CKeyStore#engineSize()->int:::Retrieves the number of entries in this keystore.
sun.security.mscapi.CKeyStore#engineIsKeyEntry(String)->boolean:::Returns true if the entry identified by the given alias is a key entry, and false otherwise.
sun.security.mscapi.CKeyStore#engineIsCertificateEntry(String)->boolean:::Returns true if the entry identified by the given alias is a trusted certificate entry, and false otherwise.
sun.security.mscapi.CKeyStore#engineGetCertificateAlias(Certificate)->String:::Returns the (alias) name of the first keystore entry whose certificate matches the given certificate
sun.security.mscapi.CKeyStore#engineStore(OutputStream, char[])->void:::engineStore is currently a no-op
sun.security.mscapi.CKeyStore#engineLoad(InputStream, char[])->void:::Loads the keystore
sun.security.mscapi.CPrivateKey#of(String, long, long, int)->CPrivateKey::: private key of
sun.security.mscapi.CPrivateKey#of(String, NativeHandles, int)->CPrivateKey::: private key of
sun.security.mscapi.CPrivateKey#getFormat()->String::: private key get format
sun.security.mscapi.CPrivateKey#getEncoded()->byte[]::: private key get encoded
sun.security.mscapi.CPrivateKey#toString()->String::: private key to string
sun.security.mscapi.CPublicKey.CECPublicKey#getW()->ECPoint::: public key get w
sun.security.mscapi.CPublicKey.CECPublicKey#getEncoded()->byte[]::: public key get encoded
sun.security.mscapi.CPublicKey.CECPublicKey#getParams()->ECParameterSpec::: public key get params
sun.security.mscapi.CPublicKey.CECPublicKey#toString()->String::: public key to string
sun.security.mscapi.CPublicKey.CRSAPublicKey#toString()->String::: public key to string
sun.security.mscapi.CPublicKey.CRSAPublicKey#getPublicExponent()->BigInteger::: public key get public exponent
sun.security.mscapi.CPublicKey.CRSAPublicKey#getModulus()->BigInteger::: public key get modulus
sun.security.mscapi.CPublicKey.CRSAPublicKey#getEncoded()->byte[]::: public key get encoded
sun.security.mscapi.CPublicKey#of(String, long, long, int)->CPublicKey::: public key of
sun.security.mscapi.CPublicKey#of(String, NativeHandles, int)->CPublicKey::: public key of
sun.security.mscapi.CPublicKey#getFormat()->String::: public key get format
sun.security.mscapi.CPublicKey#writeReplace()->Object::: public key write replace
sun.security.mscapi.CPublicKey#getPublicKeyBlob(long, long)->byte[]::: public key get public key blob
sun.security.mscapi.CRSACipher#engineSetMode(String)->void::: cipher engine set mode
sun.security.mscapi.CRSACipher#engineSetPadding(String)->void::: cipher engine set padding
sun.security.mscapi.CRSACipher#engineGetBlockSize()->int::: cipher engine get block size
sun.security.mscapi.CRSACipher#engineGetOutputSize(int)->int::: cipher engine get output size
sun.security.mscapi.CRSACipher#engineGetIV()->byte[]::: cipher engine get v
sun.security.mscapi.CRSACipher#engineGetParameters()->AlgorithmParameters::: cipher engine get parameters
sun.security.mscapi.CRSACipher#engineInit(int, Key, SecureRandom)->void::: cipher engine init
sun.security.mscapi.CRSACipher#engineInit(int, Key, AlgorithmParameterSpec, SecureRandom)->void::: cipher engine init
sun.security.mscapi.CRSACipher#engineInit(int, Key, AlgorithmParameters, SecureRandom)->void::: cipher engine init
sun.security.mscapi.CRSACipher#engineUpdate(byte[], int, int)->byte[]::: cipher engine update
sun.security.mscapi.CRSACipher#engineUpdate(byte[], int, int, byte[], int)->int::: cipher engine update
sun.security.mscapi.CRSACipher#engineDoFinal(byte[], int, int)->byte[]::: cipher engine do final
sun.security.mscapi.CRSACipher#engineDoFinal(byte[], int, int, byte[], int)->int::: cipher engine do final
sun.security.mscapi.CRSACipher#engineWrap(Key)->byte[]::: cipher engine wrap
sun.security.mscapi.CRSACipher#engineUnwrap(byte[], String, int)->java.security.Key::: cipher engine unwrap
sun.security.mscapi.CRSACipher#engineGetKeySize(Key)->int::: cipher engine get key size
sun.security.mscapi.CSignature.RSA#engineInitSign(PrivateKey)->void::: a engine init sign
sun.security.mscapi.CSignature.RSA#engineInitVerify(PublicKey)->void::: a engine init verify
sun.security.mscapi.CSignature.RSA#engineSign()->byte[]:::Returns the signature bytes of all the data updated so far
sun.security.mscapi.CSignature.RSA#engineVerify(byte[])->boolean:::Verifies the passed-in signature.
sun.security.mscapi.CSignature.RSA#generatePublicKeyBlob(int, byte[], byte[])->byte[]::: a generate public key blob
sun.security.mscapi.CSignature.NONEwithRSA#engineUpdate(byte)->void::: ewith a engine update
sun.security.mscapi.CSignature.NONEwithRSA#engineUpdate(byte[], int, int)->void::: ewith a engine update
sun.security.mscapi.CSignature.NONEwithRSA#engineUpdate(ByteBuffer)->void::: ewith a engine update
sun.security.mscapi.CSignature.NONEwithRSA#resetDigest()->void::: ewith a reset digest
sun.security.mscapi.CSignature.NONEwithRSA#getDigestValue()->byte[]::: ewith a get digest value
sun.security.mscapi.CSignature.ECDSA#engineInitSign(PrivateKey)->void::: a engine init sign
sun.security.mscapi.CSignature.ECDSA#engineInitVerify(PublicKey)->void::: a engine init verify
sun.security.mscapi.CSignature.ECDSA#engineSign()->byte[]::: a engine sign
sun.security.mscapi.CSignature.ECDSA#engineVerify(byte[])->boolean::: a engine verify
sun.security.mscapi.CSignature.PSS#engineInitSign(PrivateKey)->void::: s engine init sign
sun.security.mscapi.CSignature.PSS#engineInitVerify(PublicKey)->void::: s engine init verify
sun.security.mscapi.CSignature.PSS#engineUpdate(byte)->void::: s engine update
sun.security.mscapi.CSignature.PSS#engineUpdate(byte[], int, int)->void::: s engine update
sun.security.mscapi.CSignature.PSS#engineUpdate(ByteBuffer)->void::: s engine update
sun.security.mscapi.CSignature.PSS#engineSign()->byte[]::: s engine sign
sun.security.mscapi.CSignature.PSS#engineVerify(byte[])->boolean::: s engine verify
sun.security.mscapi.CSignature.PSS#engineSetParameter(AlgorithmParameterSpec)->void::: s engine set parameter
sun.security.mscapi.CSignature.PSS#engineGetParameters()->AlgorithmParameters::: s engine get parameters
sun.security.mscapi.CSignature#signCngHash(int, byte[], int, int, String, long, long)->byte[]:::Sign hash using CNG API with HCRYPTKEY.
sun.security.mscapi.CSignature#resetDigest()->void:::Resets the message digest if needed.
sun.security.mscapi.CSignature#getDigestValue()->byte[]::: signature get digest value
sun.security.mscapi.CSignature#setDigestName(String)->void::: signature set digest name
sun.security.mscapi.CSignature#engineUpdate(byte)->void:::Updates the data to be signed or verified using the specified byte.
sun.security.mscapi.CSignature#engineUpdate(byte[], int, int)->void:::Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.
sun.security.mscapi.CSignature#engineUpdate(ByteBuffer)->void:::Updates the data to be signed or verified, using the specified ByteBuffer.
sun.security.mscapi.CSignature#engineSetParameter(String, Object)->void:::Sets the specified algorithm parameter to the specified value
sun.security.mscapi.CSignature#engineSetParameter(AlgorithmParameterSpec)->void:::Sets this signature engine with the specified algorithm parameter.
sun.security.mscapi.CSignature#engineGetParameter(String)->Object:::Gets the value of the specified algorithm parameter
sun.security.mscapi.CSignature#engineGetParameters()->AlgorithmParameters:::Gets the algorithm parameter from this signature engine.
sun.security.mscapi.CSignature#importPublicKey(String, byte[], int)->CPublicKey::: signature import public key
sun.security.mscapi.CSignature#importECPublicKey(String, byte[], int)->CPublicKey::: signature import public key
sun.security.mscapi.PRNG#engineSetSeed(byte[])->void:::Reseeds this random object
sun.security.mscapi.PRNG#engineNextBytes(byte[])->void:::Generates a user-specified number of random bytes.
sun.security.mscapi.PRNG#engineGenerateSeed(int)->byte[]:::Returns the given number of seed bytes

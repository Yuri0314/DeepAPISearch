AMD64VectorBinary.AVXBinaryOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: binary op emit code:::if->isRegister->opcode->asRegister->asRegister->asRegister->emit->else->opcode->asRegister->asRegister->crb->asAddress->emit
AMD64VectorBinary.AVXBinaryConstOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: binary const op emit code:::opcode->asRegister->asRegister->emit
AMD64VectorBinary.AVXBinaryConstFloatOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: binary const float op emit code:::if->y->getPlatformKind->opcode->asRegister->asRegister->crb->y->getJavaConstant->asFloatConstRef->emit->else->opcode->asRegister->asRegister->crb->y->getJavaConstant->asDoubleConstRef->emit
AMD64VectorBinary.AVXBinaryMemoryOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: binary memory op emit code:::if->crb->masm->position->recordImplicitException->opcode->asRegister->asRegister->y->toAddress->emit
AMD64VectorClearOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 vector clear op emit code:::kind->result->getPlatformKind->register->asRegister->switch->kind->getScalar->VXORPS->AVXKind->getRegisterSize->emit->break->VXORPD->AVXKind->getRegisterSize->emit->break->VPXOR->emit
AMD64VectorCompareOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 vector compare op emit code:::if->isRegister->opcode->asRegister->asRegister->emit->else->opcode->asRegister->crb->asAddress->emit
AMD64VectorMove.MoveToRegOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: move to reg op emit code:::move
AMD64VectorMove.MoveToRegOp#getInput()::: move to reg op get input:::return
AMD64VectorMove.MoveToRegOp#getResult()::: move to reg op get result:::return
AMD64VectorMove.MoveFromRegOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: move from reg op emit code:::move
AMD64VectorMove.MoveFromRegOp#getInput()::: move from reg op get input:::return
AMD64VectorMove.MoveFromRegOp#getResult()::: move from reg op get result:::return
AMD64VectorMove.MoveFromConstOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: move from const op emit code:::if->isRegister->const2reg->else->AMD64Move->const2stack
AMD64VectorMove.MoveFromConstOp#getConstant()::: move from const op get constant:::return
AMD64VectorMove.MoveFromConstOp#getResult()::: move from const op get result:::return
AMD64VectorMove.StackMoveOp#getInput()::: stack move op get input:::return
AMD64VectorMove.StackMoveOp#getResult()::: stack move op get result:::return
AMD64VectorMove.StackMoveOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: stack move op emit code:::scratch->backupSlot->getValueKind->asValue->move->scratch->getInput->getValueKind->asValue->getInput->move->getResult->scratch->getResult->getValueKind->asValue->move->scratch->backupSlot->getValueKind->asValue->move
AMD64VectorMove.VectorMemOp#emitMemAccess(AMD64MacroAssembler)::: vector mem op emit mem access:::
AMD64VectorMove.VectorMemOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: vector mem op emit code:::if->crb->masm->position->recordImplicitException->emitMemAccess
AMD64VectorMove.VectorLoadOp#emitMemAccess(AMD64MacroAssembler)::: vector load op emit mem access:::op->asRegister->address->toAddress->emit
AMD64VectorMove.VectorStoreOp#emitMemAccess(AMD64MacroAssembler)::: vector store op emit mem access:::op->address->toAddress->asRegister->emit
AMD64VectorMove.SaveRegistersOp#saveRegister(CompilationResultBuilder, AMD64MacroAssembler, StackSlot, Register)::: save registers op save register:::kind->result->getPlatformKind->if->kind->isXMM->op->if->kind->getVectorLength->kind->getScalar->getVectorMoveOp->else->getScalarMoveOp->addr->crb->asAddress->op->AVXKind->getRegisterSize->emit->else->super->saveRegister
AMD64VectorMove.RestoreRegistersOp#restoreRegister(CompilationResultBuilder, AMD64MacroAssembler, Register, StackSlot)::: restore registers op restore register:::kind->input->getPlatformKind->if->kind->isXMM->op->if->kind->getVectorLength->kind->getScalar->getVectorMoveOp->else->getScalarMoveOp->addr->crb->asAddress->op->AVXKind->getRegisterSize->emit->else->super->restoreRegister
AMD64VectorMove#getScalarMoveOp(AMD64Kind)::: d64 vector move get scalar move op:::switch->return->return->throw->GraalError->shouldNotReachHere
AMD64VectorMove#getVectorMoveOp(AMD64Kind)::: d64 vector move get vector move op:::switch->return->return->return
AMD64VectorMove#getVectorMemMoveOp(AMD64Kind)::: d64 vector move get vector mem move op:::switch->AVXKind->getDataSize->return->return->return->kind->getScalar->getVectorMoveOp
AMD64VectorMove#move(CompilationResultBuilder, AMD64MacroAssembler, AllocatableValue, Value)::: d64 vector move move:::op->size->kind->result->getPlatformKind->if->kind->getVectorLength->AVXKind->getRegisterSize->if->isRegister->isRegister->kind->getScalar->getVectorMoveOp->else->getVectorMemMoveOp->else->if->isRegister->isRegister->getVectorMoveOp->else->getScalarMoveOp->if->isRegister->if->isRegister->if->asRegister->asRegister->equals->op->asRegister->asRegister->emit->else->op->crb->asAddress->asRegister->emit->else->op->asRegister->crb->asAddress->emit
AMD64VectorMove#const2reg(CompilationResultBuilder, AMD64MacroAssembler, RegisterValue, JavaConstant)::: d64 vector move const2reg:::if->input->isDefaultForKind->kind->result->getPlatformKind->register->result->getRegister->VXORPD->AVXKind->getRegisterSize->emit->return->address->switch->input->getJavaKind->crb->asFloatConstRef->break->crb->asDoubleConstRef->break->throw->GraalError->shouldNotReachHere->op->result->getPlatformKind->getScalarMoveOp->op->asRegister->emit
AMD64VectorMove.AVXMoveToIntOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: move to int op emit code:::if->isRegister->opcode->asRegister->asRegister->emitReverse->else->opcode->crb->asAddress->asRegister->emit
AMD64VectorShuffle.IntToVectorOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: int to vector op emit code:::if->isRegister->VMOVD->asRegister->asRegister->emit->else->VMOVD->asRegister->crb->asAddress->emit
AMD64VectorShuffle.LongToVectorOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: long to vector op emit code:::if->isRegister->VMOVQ->asRegister->asRegister->emit->else->VMOVQ->asRegister->crb->asAddress->emit
AMD64VectorShuffle.ShuffleBytesOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: shuffle bytes op emit code:::kind->result->getPlatformKind->if->isRegister->VPSHUFB->AVXKind->getRegisterSize->asRegister->asRegister->asRegister->emit->else->VPSHUFB->AVXKind->getRegisterSize->asRegister->asRegister->crb->asAddress->emit
AMD64VectorShuffle.ConstShuffleBytesOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: const shuffle bytes op emit code:::kind->result->getPlatformKind->address->crb->recordDataReferenceInCode->VPSHUFB->AVXKind->getRegisterSize->asRegister->asRegister->emit
AMD64VectorShuffle.ShuffleWordOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: shuffle word op emit code:::kind->source->getPlatformKind->if->isRegister->op->AVXKind->getRegisterSize->asRegister->asRegister->emit->else->op->AVXKind->getRegisterSize->asRegister->crb->asAddress->emit
AMD64VectorShuffle.ShuffleFloatOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: shuffle float op emit code:::kind->result->getPlatformKind->op->switch->kind->getScalar->break->break->throw->GraalError->shouldNotReachHere->if->isRegister->op->AVXKind->getRegisterSize->asRegister->asRegister->asRegister->emit->else->op->AVXKind->getRegisterSize->asRegister->asRegister->crb->asAddress->emit
AMD64VectorShuffle.Extract128Op#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: extract128 op emit code:::kind->source->getPlatformKind->op->switch->kind->getScalar->break->arch->arch->getFeatures->contains->break->if->isRegister->op->AVXKind->getRegisterSize->asRegister->asRegister->emit->else->op->AVXKind->getRegisterSize->crb->asAddress->asRegister->emit
AMD64VectorShuffle.Insert128Op#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: insert128 op emit code:::kind->result->getPlatformKind->op->switch->kind->getScalar->break->arch->arch->getFeatures->contains->break->if->isRegister->op->AVXKind->getRegisterSize->asRegister->asRegister->asRegister->emit->else->op->AVXKind->getRegisterSize->asRegister->asRegister->crb->asAddress->emit
AMD64VectorShuffle.ExtractByteOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: extract byte op emit code:::VPEXTRB->asRegister->asRegister->emit
AMD64VectorShuffle.ExtractShortOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: extract short op emit code:::VPEXTRW->asRegister->asRegister->emit
AMD64VectorShuffle.ExtractIntOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: extract int op emit code:::if->isRegister->if->VMOVD->asRegister->asRegister->emitReverse->else->VPEXTRD->asRegister->asRegister->emit->else->if->VMOVD->crb->asAddress->asRegister->emit->else->VPEXTRD->crb->asAddress->asRegister->emit
AMD64VectorShuffle.ExtractLongOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: extract long op emit code:::if->isRegister->if->VMOVQ->asRegister->asRegister->emitReverse->else->VPEXTRQ->asRegister->asRegister->emit->else->if->VMOVQ->crb->asAddress->asRegister->emit->else->VPEXTRQ->crb->asAddress->asRegister->emit
AMD64VectorUnary.AVXUnaryOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: unary op emit code:::if->isRegister->opcode->asRegister->asRegister->emit->else->opcode->asRegister->crb->asAddress->emit
AMD64VectorUnary.AVXUnaryMemoryOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: unary memory op emit code:::if->crb->masm->position->recordImplicitException->opcode->asRegister->input->toAddress->emit
AMD64VectorUnary.AVXBroadcastOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: broadcast op emit code:::if->isRegister->opcode->asRegister->asRegister->emit->else->if->isConstantValue->align->input->getPlatformKind->getSizeInBytes->address->crb->asConstant->recordDataReferenceInCode->opcode->asRegister->emit->else->opcode->asRegister->crb->asAddress->emit
AMD64VectorUnary.AVXConvertMemoryOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: convert memory op emit code:::if->crb->masm->position->recordImplicitException->opcode->asRegister->asRegister->input->toAddress->emit
AMD64VectorUnary.AVXConvertOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: convert op emit code:::if->isRegister->if->asRegister->asRegister->equals->asRegister->asRegister->asRegister->emit->opcode->asRegister->asRegister->asRegister->emit->else->asRegister->asRegister->asRegister->emit->opcode->asRegister->asRegister->crb->asAddress->emit

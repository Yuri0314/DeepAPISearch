org.graalvm.compiler.core.sparc.SPARCNodeMatchRules_MatchStatementSet#forClass()->Class::: node match rules_ match statement set for class
org.graalvm.compiler.core.sparc.SPARCNodeMatchRules_MatchStatementSet#statements()->List::: node match rules_ match statement set statements
org.graalvm.compiler.core.sparc.SPARCAddressLowering#lower(ValueNode, ValueNode)->AddressNode::: address lowering lower
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#getLIRGen()->SPARCLIRGenerator::: arithmetic generator get gen
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitBitCount(Value)->Variable::: arithmetic generator emit bit count
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitBitScanForward(Value)->Variable::: arithmetic generator emit bit scan forward
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitBitScanReverse(Value)->Variable::: arithmetic generator emit bit scan reverse
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitMathAbs(Value)->Value::: arithmetic generator emit math abs
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitMathSqrt(Value)->Value::: arithmetic generator emit math sqrt
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitNegate(Value)->Value::: arithmetic generator emit negate
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitNot(Value)->Value::: arithmetic generator emit not
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#isNumericInteger(PlatformKind)->boolean::: arithmetic generator is numeric integer
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitAdd(LIRKind, Value, Value, boolean)->Variable::: arithmetic generator emit add
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitSub(LIRKind, Value, Value, boolean)->Variable::: arithmetic generator emit sub
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitMul(Value, Value, boolean)->Variable::: arithmetic generator emit mul
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitMulHigh(Value, Value)->Value::: arithmetic generator emit mul high
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitUMulHigh(Value, Value)->Value::: arithmetic generator emit mul high
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitDiv(Value, Value, LIRFrameState)->Value::: arithmetic generator emit div
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitRem(Value, Value, LIRFrameState)->Value::: arithmetic generator emit rem
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitURem(Value, Value, LIRFrameState)->Value::: arithmetic generator emit rem
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitUDiv(Value, Value, LIRFrameState)->Value::: arithmetic generator emit div
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitAnd(Value, Value)->Variable::: arithmetic generator emit and
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitOr(Value, Value)->Variable::: arithmetic generator emit or
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitXor(Value, Value)->Variable::: arithmetic generator emit xor
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitShl(Value, Value)->Variable::: arithmetic generator emit shl
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitShr(Value, Value)->Variable::: arithmetic generator emit shr
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitUShr(Value, Value)->Variable::: arithmetic generator emit shr
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitFloatConvert(FloatConvert, Value)->Value::: arithmetic generator emit float convert
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#getTempSlot(LIRKind)->VirtualStackSlot::: arithmetic generator get temp slot
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitNarrow(Value, int)->Value::: arithmetic generator emit narrow
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitSignExtend(Value, int, int)->Value::: arithmetic generator emit sign extend
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitZeroExtend(Value, int, int)->Value::: arithmetic generator emit zero extend
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitReinterpret(LIRKind, Value)->AllocatableValue::: arithmetic generator emit reinterpret
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitLoad(LIRKind, Value, LIRFrameState)->Variable::: arithmetic generator emit load
org.graalvm.compiler.core.sparc.SPARCArithmeticLIRGenerator#emitStore(ValueKind, Value, Value, LIRFrameState)->void::: arithmetic generator emit store
org.graalvm.compiler.core.sparc.SPARCImmediateAddressNode#generate(NodeLIRBuilderTool)->void::: immediate address node generate
org.graalvm.compiler.core.sparc.SPARCImmediateAddressNode#getBase()->ValueNode::: immediate address node get base
org.graalvm.compiler.core.sparc.SPARCImmediateAddressNode#getMaxConstantDisplacement()->long::: immediate address node get max constant displacement
org.graalvm.compiler.core.sparc.SPARCImmediateAddressNode#getIndex()->ValueNode::: immediate address node get index
org.graalvm.compiler.core.sparc.SPARCIndexedAddressNode#generate(NodeLIRBuilderTool)->void::: indexed address node generate
org.graalvm.compiler.core.sparc.SPARCIndexedAddressNode#getBase()->ValueNode::: indexed address node get base
org.graalvm.compiler.core.sparc.SPARCIndexedAddressNode#setBase(ValueNode)->void::: indexed address node set base
org.graalvm.compiler.core.sparc.SPARCIndexedAddressNode#getIndex()->ValueNode::: indexed address node get index
org.graalvm.compiler.core.sparc.SPARCIndexedAddressNode#setIndex(ValueNode)->void::: indexed address node set index
org.graalvm.compiler.core.sparc.SPARCIndexedAddressNode#getMaxConstantDisplacement()->long::: indexed address node get max constant displacement
org.graalvm.compiler.core.sparc.SPARCIntegerCompareCanonicalizationPhase#run(StructuredGraph)->void::: integer compare canonicalization phase run
org.graalvm.compiler.core.sparc.SPARCLIRGenerator.ConstantTableBaseProvider#getConstantTableBase()->Variable::: constant table base provider get constant table base
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#zapValueForKind(PlatformKind)->JavaConstant::: generator zap value for kind
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#toRegisterKind(K)->K:::The SPARC backend only uses WORD and DWORD values in registers because except to the ld/st instructions no instruction deals either with 32 or 64 bits
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#asAddressValue(Value)->SPARCAddressValue::: generator as address value
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitAddress(AllocatableValue)->Variable::: generator emit address
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitReturn(JavaKind, Value)->void::: generator emit return
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitJump(LabelRef)->void::: generator emit jump
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitCompareBranch(PlatformKind, Value, Value, Condition, boolean, LabelRef, LabelRef, double)->void::: generator emit compare branch
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitOverflowCheckBranch(LabelRef, LabelRef, LIRKind, double)->void::: generator emit overflow check branch
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitIntegerTestBranch(Value, Value, LabelRef, LabelRef, double)->void::: generator emit integer test branch
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#loadSimm13(Value)->Value::: generator load simm13
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#loadNonConst(Value)->Value::: generator load non const
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitConditionalMove(PlatformKind, Value, Value, Condition, boolean, Value, Value)->Variable::: generator emit conditional move
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitCompare(SPARCKind, Value, Value)->boolean:::This method emits the compare instruction, and may reorder the operands
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitIntegerTestMove(Value, Value, Value, Value)->Variable::: generator emit integer test move
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitForeignCallOp(ForeignCallLinkage, Value, Value[], Value[], LIRFrameState)->void::: generator emit foreign call op
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitStrategySwitch(SwitchStrategy, Variable, LabelRef[], LabelRef)->void::: generator emit strategy switch
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#createStrategySwitchOp(AllocatableValue, SwitchStrategy, LabelRef[], LabelRef, Variable, Variable)->StrategySwitchOp::: generator create strategy switch op
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitTableSwitch(int, LabelRef, LabelRef[], Value)->void::: generator emit table switch
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#getArchitecture()->SPARC::: generator get architecture
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitByteSwap(Value)->Variable::: generator emit byte swap
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitArrayEquals(JavaKind, Value, Value, Value, int, boolean)->Variable::: generator emit array equals
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitMembar(int)->void::: generator emit membar
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitDeoptimize(Value, Value, LIRFrameState)->void::: generator emit deoptimize
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitSignExtendLoad(LIRKind, LIRKind, Value, LIRFrameState)->Value::: generator emit sign extend load
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitZeroExtendLoad(LIRKind, LIRKind, Value, LIRFrameState)->Value::: generator emit zero extend load
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitNullCheck(Value, LIRFrameState)->void::: generator emit null check
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitLoadConstantTableBase()->void::: generator emit load constant table base
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#beforeRegisterAllocation()->void::: generator before register allocation
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitPause()->void::: generator emit pause
org.graalvm.compiler.core.sparc.SPARCLIRGenerator#emitSpeculationFence()->void::: generator emit speculation fence
org.graalvm.compiler.core.sparc.SPARCLIRKindTool#getIntegerKind(int)->LIRKind::: kind tool get integer kind
org.graalvm.compiler.core.sparc.SPARCLIRKindTool#getFloatingKind(int)->LIRKind::: kind tool get floating kind
org.graalvm.compiler.core.sparc.SPARCLIRKindTool#getObjectKind()->LIRKind::: kind tool get object kind
org.graalvm.compiler.core.sparc.SPARCLIRKindTool#getWordKind()->LIRKind::: kind tool get word kind
org.graalvm.compiler.core.sparc.SPARCLIRKindTool#getNarrowOopKind()->LIRKind::: kind tool get narrow oop kind
org.graalvm.compiler.core.sparc.SPARCLIRKindTool#getNarrowPointerKind()->LIRKind::: kind tool get narrow pointer kind
org.graalvm.compiler.core.sparc.SparcLoweringProviderMixin#smallestCompareWidth()->Integer::: sparc lowering provider mixin smallest compare width
org.graalvm.compiler.core.sparc.SparcLoweringProviderMixin#supportBulkZeroing()->boolean::: sparc lowering provider mixin support bulk zeroing
org.graalvm.compiler.core.sparc.SPARCMoveFactory#createMove(AllocatableValue, Value)->LIRInstruction::: move factory create move
org.graalvm.compiler.core.sparc.SPARCMoveFactory#createStackMove(AllocatableValue, AllocatableValue)->LIRInstruction::: move factory create stack move
org.graalvm.compiler.core.sparc.SPARCMoveFactory#createLoad(AllocatableValue, Constant)->LIRInstruction::: move factory create load
org.graalvm.compiler.core.sparc.SPARCMoveFactory#createStackLoad(AllocatableValue, Constant)->LIRInstruction::: move factory create stack load
org.graalvm.compiler.core.sparc.SPARCMoveFactory#canInlineConstant(Constant)->boolean::: move factory can inline constant
org.graalvm.compiler.core.sparc.SPARCMoveFactory#allowConstantToStackMove(Constant)->boolean::: move factory allow constant to stack move
org.graalvm.compiler.core.sparc.SPARCNodeLIRBuilder#peephole(ValueNode)->boolean::: node builder peephole
org.graalvm.compiler.core.sparc.SPARCNodeLIRBuilder#newJumpOp(LabelRef)->JumpOp::: node builder new jump op
org.graalvm.compiler.core.sparc.SPARCNodeLIRBuilder#getLIRGeneratorTool()->SPARCLIRGenerator::: node builder get generator tool
org.graalvm.compiler.core.sparc.SPARCNodeLIRBuilder#emitPrologue(StructuredGraph)->void::: node builder emit prologue
org.graalvm.compiler.core.sparc.SPARCNodeMatchRules#getState(Access)->LIRFrameState::: node match rules get state
org.graalvm.compiler.core.sparc.SPARCNodeMatchRules#getLirKind(LIRLowerableAccess)->LIRKind::: node match rules get lir kind
org.graalvm.compiler.core.sparc.SPARCNodeMatchRules#signExtend(SignExtendNode, Access)->ComplexMatchResult::: node match rules sign extend
org.graalvm.compiler.core.sparc.SPARCNodeMatchRules#zeroExtend(ZeroExtendNode, Access)->ComplexMatchResult::: node match rules zero extend
org.graalvm.compiler.core.sparc.SPARCNodeMatchRules#ifCompareLogicCas(IfNode, CompareNode, ValueNode, LogicCompareAndSwapNode)->ComplexMatchResult::: node match rules if compare logic cas
org.graalvm.compiler.core.sparc.SPARCNodeMatchRules#getLIRGeneratorTool()->SPARCLIRGenerator::: node match rules get generator tool
org.graalvm.compiler.core.sparc.SPARCNodeMatchRules#getArithmeticLIRGenerator()->SPARCArithmeticLIRGenerator::: node match rules get arithmetic generator
org.graalvm.compiler.core.sparc.SPARCSuitesCreator#createSuites(OptionValues)->Suites::: suites creator create suites

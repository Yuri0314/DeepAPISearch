AudioFileFormat#getType():::Obtains the audio file type, such as WAVE or AU.:::return
AudioFileFormat#getByteLength():::Obtains the size in bytes of the entire audio file (not just its audio data).:::return
AudioFileFormat#getFormat():::Obtains the format of the audio data contained in the audio file.:::return
AudioFileFormat#getFrameLength():::Obtains the length of the audio data contained in the file, expressed in sample frames.:::return
AudioFileFormat#properties():::Obtain an unmodifiable map of properties:::ret->if->new->HashMap<>->else->properties->clone->return->Collections->unmodifiableMap
AudioFileFormat#getProperty(String):::Obtain the property value specified by the key:::if->return->return->properties->get
AudioFileFormat#toString():::Provides a string representation of the file format.:::buf->new->StringBuffer->if->buf->type->toString->type->getExtension->append->else->buf->append->if->buf->append->buf->append->if->buf->append->return->new->String
AudioFileFormat.Type#equals(Object):::Indicates whether the specified object is equal to this file type, returning true if the objects are equal.:::if->return->if->return->return->Objects->equals
AudioFileFormat.Type#hashCode():::Returns a hash code value for this file type.:::return->name->hashCode
AudioFileFormat.Type#toString():::Provides the file type's name as the String representation of the file type.:::return
AudioFileFormat.Type#getExtension():::Obtains the common file name extension for this file type.:::return
AudioFormat#getEncoding():::Obtains the type of encoding for sounds in this format.:::return
AudioFormat#getSampleRate():::Obtains the sample rate:::return
AudioFormat#getSampleSizeInBits():::Obtains the size of a sample:::return
AudioFormat#getChannels():::Obtains the number of channels:::return
AudioFormat#getFrameSize():::Obtains the frame size in bytes:::return
AudioFormat#getFrameRate():::Obtains the frame rate in frames per second:::return
AudioFormat#isBigEndian():::Indicates whether the audio data is stored in big-endian or little-endian byte order:::return
AudioFormat#properties():::Obtain an unmodifiable map of properties:::ret->if->new->HashMap<>->else->properties->clone->return->Collections->unmodifiableMap
AudioFormat#getProperty(String):::Obtain the property value specified by the key:::if->return->return->properties->get
AudioFormat#matches(AudioFormat):::Indicates whether this format matches the one specified:::if->format->getEncoding->getEncoding->equals->format->getChannels->format->getChannels->getChannels->format->getSampleRate->format->getSampleRate->getSampleRate->format->getSampleSizeInBits->format->getSampleSizeInBits->getSampleSizeInBits->format->getFrameRate->format->getFrameRate->getFrameRate->format->getFrameSize->format->getFrameSize->getFrameSize->getSampleSizeInBits->format->isBigEndian->isBigEndian->return->return
AudioFormat#toString():::Returns a string that describes the format, such as: "PCM SIGNED 22050 Hz 16 bit mono big-endian":::sEncoding->if->getEncoding->getEncoding->toString->sSampleRate->if->getSampleRate->else->getSampleRate->sSampleSizeInBits->if->getSampleSizeInBits->else->getSampleSizeInBits->sChannels->if->getChannels->else->if->getChannels->else->if->getChannels->else->getChannels->sFrameSize->if->getFrameSize->else->getFrameSize->sFrameRate->if->Math->getSampleRate->getFrameRate->abs->if->getFrameRate->else->getFrameRate->sEndian->if->getEncoding->equals->getEncoding->equals->getSampleSizeInBits->getSampleSizeInBits->if->isBigEndian->else->return
AudioFormat.Encoding#equals(Object):::Indicates whether the specified object is equal to this encoding, returning true if the objects are equal.:::if->return->if->return->return->Objects->equals
AudioFormat.Encoding#hashCode():::Returns a hash code value for this encoding.:::return->name->hashCode
AudioFormat.Encoding#toString():::Provides the String representation of the encoding:::return
AudioInputStream#getFormat():::Obtains the audio format of the sound data in this audio input stream.:::return
AudioInputStream#getFrameLength():::Obtains the length of the stream, expressed in sample frames rather than bytes.:::return
AudioInputStream#read():::Reads the next byte of data from the audio input stream:::if->throw->new->IOException->data->new->byteArr->temp->read->if->return->return
AudioInputStream#read(byte[]):::Reads some number of bytes from the audio input stream and stores them into the buffer array b:::return->read
AudioInputStream#read(byte[], int, int):::Reads up to a specified maximum number of bytes of data from the audio stream, putting them into the given byte array:::reminder->if->if->return->if->if->return->else->if->bytesRead->thisOff->if->System->arraycopy->thisBytesRead->stream->read->if->return->if->if->if->if->new->byteArr->System->arraycopy->return
AudioInputStream#skip(long):::Skips over and discards a specified number of bytes from this audio input stream:::reminder->if->if->return->if->if->remaining->while->ret->Math->stream->skip->min->if->if->stream->read->break->else->if->break->temp->if->throw->new->IOException->return
AudioInputStream#available():::Returns the maximum number of bytes that can be read (or skipped over) from this audio input stream without blocking:::temp->stream->available->if->return->else->return
AudioInputStream#close():::Closes this audio input stream and releases any system resources associated with the stream.:::stream->close
AudioInputStream#mark(int):::Marks the current position in this audio input stream.:::stream->mark->if->markSupported->if->if->new->byteArr->System->arraycopy
AudioInputStream#reset():::Repositions this audio input stream to the position it had at the time its mark method was last invoked.:::stream->reset->if->if->new->byteArr->System->arraycopy
AudioInputStream#markSupported():::Tests whether this audio input stream supports the mark and reset methods.:::return->stream->markSupported
AudioSystem#getMixerInfo():::Obtains an array of mixer info objects that represents the set of audio mixers that are currently installed on the system.:::infos->getMixerInfoList->allInfos->infos->infos->size->new->Mixer.InfoArr->toArray->return
AudioSystem#getMixer(Mixer.Info):::Obtains the requested audio mixer.:::foreach->getMixerProviders->try->return->provider->getMixer->catch->finally->throw->String->format->new->IllegalArgumentException
AudioSystem#getSourceLineInfo(Line.Info):::Obtains information about all source lines of a particular type that are supported by the installed mixers.:::vector->new->Vector<>->currentInfoArray->mixer->fullInfo->infoArray->getMixerInfo->for->i->returnedArray->vector->size->new->Line.InfoArr->for->i->return
AudioSystem#getTargetLineInfo(Line.Info):::Obtains information about all target lines of a particular type that are supported by the installed mixers.:::vector->new->Vector<>->currentInfoArray->mixer->fullInfo->infoArray->getMixerInfo->for->i->returnedArray->vector->size->new->Line.InfoArr->for->i->return
AudioSystem#isLineSupported(Line.Info):::Indicates whether the system supports any lines that match the specified Line.Info object:::mixer->infoArray->getMixerInfo->for->i->return
AudioSystem#getLine(Line.Info):::Obtains a line that matches the description in the specified Line.Info object:::lue->providers->getMixerProviders->try->mixer->getDefaultMixer->if->mixer->isLineSupported->return->mixer->getLine->catch->finally->for->i->providers->size->for->i->providers->size->if->throw->throw->info->toString->new->IllegalArgumentException
AudioSystem#getClip():::Obtains a clip that can be used for playing back an audio file or an audio stream:::format->new->AudioFormat->info->new->DataLine.Info->return->AudioSystem->getLine
AudioSystem#getClip(Mixer.Info):::Obtains a clip from the specified mixer that can be used for playing back an audio file or an audio stream:::format->new->AudioFormat->info->new->DataLine.Info->mixer->AudioSystem->getMixer->return->mixer->getLine
AudioSystem#getSourceDataLine(AudioFormat):::Obtains a source data line that can be used for playing back audio data in the format specified by the AudioFormat object:::info->new->DataLine.Info->return->AudioSystem->getLine
AudioSystem#getSourceDataLine(AudioFormat, Mixer.Info):::Obtains a source data line that can be used for playing back audio data in the format specified by the AudioFormat object, provided by the mixer specified by the Mixer.Info object:::info->new->DataLine.Info->mixer->AudioSystem->getMixer->return->mixer->getLine
AudioSystem#getTargetDataLine(AudioFormat):::Obtains a target data line that can be used for recording audio data in the format specified by the AudioFormat object:::info->new->DataLine.Info->return->AudioSystem->getLine
AudioSystem#getTargetDataLine(AudioFormat, Mixer.Info):::Obtains a target data line that can be used for recording audio data in the format specified by the AudioFormat object, provided by the mixer specified by the Mixer.Info object:::info->new->DataLine.Info->mixer->AudioSystem->getMixer->return->mixer->getLine
AudioSystem#getTargetEncodings(AudioFormat.Encoding):::Obtains the encodings that the system can obtain from an audio input stream with the specified encoding using the set of installed format converters.:::Objects->requireNonNull->codecs->getFormatConversionProviders->encodings->new->Vector<>->encs->for->i->codecs->size->if->encodings->contains->encodings->addElement->return->encodings->encodings->size->new->AudioFormat.EncodingArr->toArray
AudioSystem#getTargetEncodings(AudioFormat):::Obtains the encodings that the system can obtain from an audio input stream with the specified format using the set of installed format converters.:::Objects->requireNonNull->codecs->getFormatConversionProviders->encs->new->ArrayList<>->foreach->Collections->codec->getTargetEncodings->addAll->if->encs->sourceFormat->getEncoding->contains->encs->sourceFormat->getEncoding->add->return->encs->encs->size->new->AudioFormat.EncodingArr->toArray
AudioSystem#isConversionSupported(AudioFormat.Encoding, AudioFormat):::Indicates whether an audio input stream of the specified encoding can be obtained from an audio input stream that has the specified format.:::Objects->requireNonNull->Objects->requireNonNull->if->sourceFormat->getEncoding->equals->return->codecs->getFormatConversionProviders->for->i->codecs->size->return
AudioSystem#getAudioInputStream(AudioFormat.Encoding, AudioInputStream):::Obtains an audio input stream of the indicated encoding, by converting the provided audio input stream.:::Objects->requireNonNull->Objects->requireNonNull->if->sourceStream->getFormat->getEncoding->equals->return->codecs->getFormatConversionProviders->for->i->codecs->size->throw->sourceStream->getFormat->new->IllegalArgumentException
AudioSystem#getTargetFormats(AudioFormat.Encoding, AudioFormat):::Obtains the formats that have a particular encoding and that the system can obtain from a stream of the specified format using the set of installed format converters.:::Objects->requireNonNull->Objects->requireNonNull->codecs->getFormatConversionProviders->formats->new->ArrayList<>->matchFound->foreach->elements->codec->getTargetFormats->foreach->formats->add->if->sourceFormat->matches->if->targetEncoding->sourceFormat->getEncoding->equals->if->formats->add->return->formats->formats->size->new->AudioFormatArr->toArray
AudioSystem#isConversionSupported(AudioFormat, AudioFormat):::Indicates whether an audio input stream of a specified format can be obtained from an audio input stream of another specified format.:::Objects->requireNonNull->Objects->requireNonNull->if->sourceFormat->matches->return->codecs->getFormatConversionProviders->for->i->codecs->size->return
AudioSystem#getAudioInputStream(AudioFormat, AudioInputStream):::Obtains an audio input stream of the indicated format, by converting the provided audio input stream.:::if->sourceStream->getFormat->matches->return->codecs->getFormatConversionProviders->for->i->codecs->size->throw->sourceStream->getFormat->new->IllegalArgumentException
AudioSystem#getAudioFileFormat(InputStream):::Obtains the audio file format of the provided input stream:::Objects->requireNonNull->foreach->getAudioFileReaders->try->return->reader->getAudioFileFormat->catch->finally->throw->new->UnsupportedAudioFileException
AudioSystem#getAudioFileFormat(URL):::Obtains the audio file format of the specified URL:::Objects->requireNonNull->foreach->getAudioFileReaders->try->return->reader->getAudioFileFormat->catch->finally->throw->new->UnsupportedAudioFileException
AudioSystem#getAudioFileFormat(File):::Obtains the audio file format of the specified File:::Objects->requireNonNull->foreach->getAudioFileReaders->try->return->reader->getAudioFileFormat->catch->finally->throw->new->UnsupportedAudioFileException
AudioSystem#getAudioInputStream(InputStream):::Obtains an audio input stream from the provided input stream:::Objects->requireNonNull->foreach->getAudioFileReaders->try->return->reader->getAudioInputStream->catch->finally->throw->new->UnsupportedAudioFileException
AudioSystem#getAudioInputStream(URL):::Obtains an audio input stream from the URL provided:::Objects->requireNonNull->foreach->getAudioFileReaders->try->return->reader->getAudioInputStream->catch->finally->throw->new->UnsupportedAudioFileException
AudioSystem#getAudioInputStream(File):::Obtains an audio input stream from the provided File:::Objects->requireNonNull->foreach->getAudioFileReaders->try->return->reader->getAudioInputStream->catch->finally->throw->new->UnsupportedAudioFileException
AudioSystem#getAudioFileTypes():::Obtains the file types for which file writing support is provided by the system.:::providers->getAudioFileWriters->returnTypesSet->new->HashSet<>->for->i->providers->size->returnTypes->returnTypesSet->new->AudioFileFormat.TypeArr->toArray->return
AudioSystem#isFileTypeSupported(AudioFileFormat.Type):::Indicates whether file writing support for the specified file type is provided by the system.:::Objects->requireNonNull->providers->getAudioFileWriters->for->i->providers->size->return
AudioSystem#getAudioFileTypes(AudioInputStream):::Obtains the file types that the system can write from the audio input stream specified.:::Objects->requireNonNull->providers->getAudioFileWriters->returnTypesSet->new->HashSet<>->for->i->providers->size->returnTypes->returnTypesSet->new->AudioFileFormat.TypeArr->toArray->return
AudioSystem#isFileTypeSupported(AudioFileFormat.Type, AudioInputStream):::Indicates whether an audio file of the specified file type can be written from the indicated audio input stream.:::Objects->requireNonNull->Objects->requireNonNull->providers->getAudioFileWriters->for->i->providers->size->return
AudioSystem#write(AudioInputStream, AudioFileFormat.Type, OutputStream):::Writes a stream of bytes representing an audio file of the specified file type to the output stream provided:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->foreach->getAudioFileWriters->try->return->writer->write->catch->finally->throw->new->IllegalArgumentException
AudioSystem#write(AudioInputStream, AudioFileFormat.Type, File):::Writes a stream of bytes representing an audio file of the specified file type to the external file provided.:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->foreach->getAudioFileWriters->try->return->writer->write->catch->finally->throw->new->IllegalArgumentException
BooleanControl#setValue(boolean):::Sets the current value for the control:::
BooleanControl#getValue():::Obtains this control's current value.:::return
BooleanControl#getStateLabel(boolean):::Obtains the label for the specified state.:::return
BooleanControl#toString():::Provides a string representation of the control.:::return->super->toString->getValue->getStateLabel->new->String
Clip#open(AudioFormat, byte[], int, int):::Opens the clip, meaning that it should acquire any required system resources and become operational:::
Clip#open(AudioInputStream):::Opens the clip with the format and audio data present in the provided audio input stream:::
Clip#getFrameLength():::Obtains the media length in sample frames.:::
Clip#getMicrosecondLength():::Obtains the media duration in microseconds.:::
Clip#setFramePosition(int):::Sets the media position in sample frames:::
Clip#setMicrosecondPosition(long):::Sets the media position in microseconds:::
Clip#setLoopPoints(int, int):::Sets the first and last sample frames that will be played in the loop:::
Clip#loop(int):::Starts looping playback from the current position:::
CompoundControl#getMemberControls():::Returns the set of member controls that comprise the compound control.:::return->controls->clone
CompoundControl#toString():::Provides a string representation of the control.:::sb->new->StringBuilder->for->i->return->getType->new->String
Control#getType():::Obtains the control's type.:::return
Control#toString():::Obtains a string describing the control type and its current state.:::return->getType->new->String
Control.Type#equals(Object):::Indicates whether the specified object is equal to this control type, returning true if the objects are the same.:::return->super->equals
Control.Type#hashCode():::Returns a hash code value for this control type.:::return->super->hashCode
Control.Type#toString():::Provides the String representation of the control type:::return
DataLine#drain():::Drains queued data from the line by continuing data I/O until the data line's internal buffer has been emptied:::
DataLine#flush():::Flushes queued data from the line:::
DataLine#start():::Allows a line to engage in data I/O:::
DataLine#stop():::Stops the line:::
DataLine#isRunning():::Indicates whether the line is running:::
DataLine#isActive():::Indicates whether the line is engaging in active I/O (such as playback or capture):::
DataLine#getFormat():::Obtains the current format (encoding, sample rate, number of channels, etc.) of the data line's audio data:::
DataLine#getBufferSize():::Obtains the maximum number of bytes of data that will fit in the data line's internal buffer:::
DataLine#available():::Obtains the number of bytes of data currently available to the application for processing in the data line's internal buffer:::
DataLine#getFramePosition():::Obtains the current position in the audio data, in sample frames:::
DataLine#getLongFramePosition():::Obtains the current position in the audio data, in sample frames:::
DataLine#getMicrosecondPosition():::Obtains the current position in the audio data, in microseconds:::
DataLine#getLevel():::Obtains the current volume level for the line:::
DataLine.Info#getFormats():::Obtains a set of audio formats supported by the data line:::return->Arrays->copyOf
DataLine.Info#isFormatSupported(AudioFormat):::Indicates whether this data line supports a particular audio format:::for->i->return
DataLine.Info#getMinBufferSize():::Obtains the minimum buffer size supported by the data line.:::return
DataLine.Info#getMaxBufferSize():::Obtains the maximum buffer size supported by the data line.:::return
DataLine.Info#matches(Line.Info):::Determines whether the specified info object matches this one:::if->super->matches->return->dataLineInfo->if->getMaxBufferSize->dataLineInfo->getMaxBufferSize->if->getMaxBufferSize->dataLineInfo->getMaxBufferSize->return->if->getMinBufferSize->dataLineInfo->getMinBufferSize->if->getMinBufferSize->dataLineInfo->getMinBufferSize->return->localFormats->getFormats->if->for->i->return
DataLine.Info#toString():::Obtains a textual description of the data line info.:::sb->new->StringBuilder->if->sb->append->else->if->getFormats->sb->getFormats->append->if->sb->append->else->if->sb->append->else->if->sb->append->return->super->toString->new->String
EnumControl#setValue(Object):::Sets the current value for the control:::if->isValueSupported->throw->new->IllegalArgumentException
EnumControl#getValue():::Obtains this control's current value.:::return
EnumControl#getValues():::Returns the set of possible values for this control.:::return->values->clone
EnumControl#toString():::Provides a string representation of the control.:::return->getType->getValue->new->String
FloatControl#setValue(float):::Sets the current value for the control:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
FloatControl#getValue():::Obtains this control's current value.:::return
FloatControl#getMaximum():::Obtains the maximum value permitted.:::return
FloatControl#getMinimum():::Obtains the minimum value permitted.:::return
FloatControl#getUnits():::Obtains the label for the units in which the control's values are expressed, such as "dB" or "frames per second.":::return
FloatControl#getMinLabel():::Obtains the label for the minimum value, such as "Left" or "Off".:::return
FloatControl#getMidLabel():::Obtains the label for the mid-point value, such as "Center" or "Default".:::return
FloatControl#getMaxLabel():::Obtains the label for the maximum value, such as "Right" or "Full".:::return
FloatControl#getPrecision():::Obtains the resolution or granularity of the control, in the units that the control measures:::return
FloatControl#getUpdatePeriod():::Obtains the smallest time interval, in microseconds, over which the control's value can change during a shift:::return
FloatControl#shift(float, float, int):::Changes the control value from the initial value to the final value linearly over the specified time period, specified in microseconds:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->setValue
FloatControl#toString():::Provides a string representation of the control.:::return->getType->getValue->new->String
Line#getLineInfo():::Obtains the Line.Info object describing this line.:::
Line#open():::Opens the line, indicating that it should acquire any required system resources and become operational:::
Line#close():::Closes the line, indicating that any system resources in use by the line can be released:::
Line#isOpen():::Indicates whether the line is open, meaning that it has reserved system resources and is operational, although it might not currently be playing or capturing sound.:::
Line#getControls():::Obtains the set of controls associated with this line:::
Line#isControlSupported(Control.Type):::Indicates whether the line supports a control of the specified type:::
Line#getControl(Control.Type):::Obtains a control of the specified type, if there is any:::
Line#addLineListener(LineListener):::Adds a listener to this line:::
Line#removeLineListener(LineListener):::Removes the specified listener from this line's list of listeners.:::
Line.Info#getLineClass():::Obtains the class of the line that this Line.Info object describes.:::return
Line.Info#matches(Info):::Indicates whether the specified info object matches this one:::if->this->getClass->isInstance->return->if->getLineClass->info->getLineClass->isAssignableFrom->return->return
Line.Info#toString():::Obtains a textual description of the line info.:::fullPackagePath->initialString->getLineClass->toString->new->String->finalString->index->initialString->indexOf->if->initialString->substring->initialString->fullPackagePath->length->initialString->length->substring->else->return
LineEvent#getLine():::Obtains the audio line that is the source of this event.:::return->getSource
LineEvent#getType():::Obtains the event's type.:::return
LineEvent#toString():::Obtains a string representation of the event:::sType->if->type->toString->sLine->if->getLine->else->getLine->toString->return->new->String
LineEvent.Type#equals(Object):::Indicates whether the specified object is equal to this event type, returning true if the objects are the same.:::return->super->equals
LineEvent.Type#hashCode():::Returns a hash code value for this event type.:::return->super->hashCode
LineEvent.Type#toString():::Returns the type name as the string representation.:::return
LineListener#update(LineEvent):::Informs the listener that a line's state has changed:::
Mixer#getMixerInfo():::Obtains information about this mixer, including the product's name, version, vendor, etc.:::
Mixer#getSourceLineInfo():::Obtains information about the set of source lines supported by this mixer:::
Mixer#getTargetLineInfo():::Obtains information about the set of target lines supported by this mixer:::
Mixer#getSourceLineInfo(Line.Info):::Obtains information about source lines of a particular type supported by the mixer:::
Mixer#getTargetLineInfo(Line.Info):::Obtains information about target lines of a particular type supported by the mixer:::
Mixer#isLineSupported(Line.Info):::Indicates whether the mixer supports a line (or lines) that match the specified Line.Info object:::
Mixer#getLine(Line.Info):::Obtains a line that is available for use and that matches the description in the specified Line.Info object:::
Mixer#getMaxLines(Line.Info):::Obtains the approximate maximum number of lines of the requested type that can be open simultaneously on the mixer:::
Mixer#getSourceLines():::Obtains the set of all source lines currently open to this mixer.:::
Mixer#getTargetLines():::Obtains the set of all target lines currently open from this mixer.:::
Mixer#synchronize(Line[], boolean):::Synchronizes two or more lines:::
Mixer#unsynchronize(Line[]):::Releases synchronization for the specified lines:::
Mixer#isSynchronizationSupported(Line[], boolean):::Reports whether this mixer supports synchronization of the specified set of lines.:::
Mixer.Info#equals(Object):::Indicates whether the specified object is equal to this info object, returning true if the objects are the same.:::return->super->equals
Mixer.Info#hashCode():::Returns a hash code value for this info object.:::return->super->hashCode
Mixer.Info#getName():::Obtains the name of the mixer.:::return
Mixer.Info#getVendor():::Obtains the vendor of the mixer.:::return
Mixer.Info#getDescription():::Obtains the description of the mixer.:::return
Mixer.Info#getVersion():::Obtains the version of the mixer.:::return
Mixer.Info#toString():::Provides a string representation of the mixer info.:::return
Port.Info#getName():::Obtains the name of the port.:::return
Port.Info#isSource():::Indicates whether the port is a source or a target for its mixer.:::return
Port.Info#matches(Line.Info):::Indicates whether this info object specified matches this one:::if->super->matches->return->if->name->getName->equals->return->if->isSource->return->return
Port.Info#equals(Object):::Indicates whether the specified object is equal to this info object, returning true if the objects are the same.:::return->super->equals
Port.Info#hashCode():::Returns a hash code value for this info object.:::return->super->hashCode
Port.Info#toString():::Provides a String representation of the port.:::return
ReverbType#getName():::Obtains the name of this reverb type.:::return
ReverbType#getEarlyReflectionDelay():::Returns the early reflection delay time in microseconds:::return
ReverbType#getEarlyReflectionIntensity():::Returns the early reflection intensity in decibels:::return
ReverbType#getLateReflectionDelay():::Returns the late reflection delay time in microseconds:::return
ReverbType#getLateReflectionIntensity():::Returns the late reflection intensity in decibels:::return
ReverbType#getDecayTime():::Obtains the decay time, which is the amount of time over which the late reflections attenuate to effective zero:::return
ReverbType#equals(Object):::Indicates whether the specified object is equal to this reverb type, returning true if the objects are the same.:::return->super->equals
ReverbType#hashCode():::Returns a hash code value for this reverb type.:::return->super->hashCode
ReverbType#toString():::Provides a String representation of the reverb type, including its name and its parameter settings:::return
SourceDataLine#open(AudioFormat, int):::Opens the line with the specified format and suggested buffer size, causing the line to acquire any required system resources and become operational:::
SourceDataLine#open(AudioFormat):::Opens the line with the specified format, causing the line to acquire any required system resources and become operational:::
SourceDataLine#write(byte[], int, int):::Writes audio data to the mixer via this source data line:::
TargetDataLine#open(AudioFormat, int):::Opens the line with the specified format and requested buffer size, causing the line to acquire any required system resources and become operational:::
TargetDataLine#open(AudioFormat):::Opens the line with the specified format, causing the line to acquire any required system resources and become operational:::
TargetDataLine#read(byte[], int, int):::Reads audio data from the data line's input buffer:::

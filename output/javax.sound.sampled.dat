javax.sound.sampled.AudioFileFormat#getType()->Type:::Obtains the audio file type, such as WAVE or AU.
javax.sound.sampled.AudioFileFormat#getByteLength()->int:::Obtains the size in bytes of the entire audio file (not just its audio data).
javax.sound.sampled.AudioFileFormat#getFormat()->AudioFormat:::Obtains the format of the audio data contained in the audio file.
javax.sound.sampled.AudioFileFormat#getFrameLength()->int:::Obtains the length of the audio data contained in the file, expressed in sample frames.
javax.sound.sampled.AudioFileFormat#properties()->Map:::Obtain an unmodifiable map of properties
javax.sound.sampled.AudioFileFormat#getProperty(String)->Object:::Obtain the property value specified by the key
javax.sound.sampled.AudioFileFormat#toString()->String:::Provides a string representation of the file format.
javax.sound.sampled.AudioFileFormat.Type#equals(Object)->boolean:::Indicates whether the specified object is equal to this file type, returning true if the objects are equal.
javax.sound.sampled.AudioFileFormat.Type#hashCode()->int:::Returns a hash code value for this file type.
javax.sound.sampled.AudioFileFormat.Type#toString()->String:::Provides the file type's name as the String representation of the file type.
javax.sound.sampled.AudioFileFormat.Type#getExtension()->String:::Obtains the common file name extension for this file type.
javax.sound.sampled.AudioFormat#getEncoding()->Encoding:::Obtains the type of encoding for sounds in this format.
javax.sound.sampled.AudioFormat#getSampleRate()->float:::Obtains the sample rate
javax.sound.sampled.AudioFormat#getSampleSizeInBits()->int:::Obtains the size of a sample
javax.sound.sampled.AudioFormat#getChannels()->int:::Obtains the number of channels
javax.sound.sampled.AudioFormat#getFrameSize()->int:::Obtains the frame size in bytes
javax.sound.sampled.AudioFormat#getFrameRate()->float:::Obtains the frame rate in frames per second
javax.sound.sampled.AudioFormat#isBigEndian()->boolean:::Indicates whether the audio data is stored in big-endian or little-endian byte order
javax.sound.sampled.AudioFormat#properties()->Map:::Obtain an unmodifiable map of properties
javax.sound.sampled.AudioFormat#getProperty(String)->Object:::Obtain the property value specified by the key
javax.sound.sampled.AudioFormat#matches(AudioFormat)->boolean:::Indicates whether this format matches the one specified
javax.sound.sampled.AudioFormat#toString()->String:::Returns a string that describes the format, such as: "PCM SIGNED 22050 Hz 16 bit mono big-endian"
javax.sound.sampled.AudioFormat.Encoding#equals(Object)->boolean:::Indicates whether the specified object is equal to this encoding, returning true if the objects are equal.
javax.sound.sampled.AudioFormat.Encoding#hashCode()->int:::Returns a hash code value for this encoding.
javax.sound.sampled.AudioFormat.Encoding#toString()->String:::Provides the String representation of the encoding
javax.sound.sampled.AudioInputStream#getFormat()->AudioFormat:::Obtains the audio format of the sound data in this audio input stream.
javax.sound.sampled.AudioInputStream#getFrameLength()->long:::Obtains the length of the stream, expressed in sample frames rather than bytes.
javax.sound.sampled.AudioInputStream#read()->int:::Reads the next byte of data from the audio input stream
javax.sound.sampled.AudioInputStream#read(byte[])->int:::Reads some number of bytes from the audio input stream and stores them into the buffer array b
javax.sound.sampled.AudioInputStream#read(byte[], int, int)->int:::Reads up to a specified maximum number of bytes of data from the audio stream, putting them into the given byte array
javax.sound.sampled.AudioInputStream#skip(long)->long:::Skips over and discards a specified number of bytes from this audio input stream
javax.sound.sampled.AudioInputStream#available()->int:::Returns the maximum number of bytes that can be read (or skipped over) from this audio input stream without blocking
javax.sound.sampled.AudioInputStream#close()->void:::Closes this audio input stream and releases any system resources associated with the stream.
javax.sound.sampled.AudioInputStream#mark(int)->void:::Marks the current position in this audio input stream.
javax.sound.sampled.AudioInputStream#reset()->void:::Repositions this audio input stream to the position it had at the time its mark method was last invoked.
javax.sound.sampled.AudioInputStream#markSupported()->boolean:::Tests whether this audio input stream supports the mark and reset methods.
javax.sound.sampled.AudioSystem#getMixerInfo()->Mixer.Info[]:::Obtains an array of mixer info objects that represents the set of audio mixers that are currently installed on the system.
javax.sound.sampled.AudioSystem#getMixer(Mixer.Info)->Mixer:::Obtains the requested audio mixer.
javax.sound.sampled.AudioSystem#getSourceLineInfo(Line.Info)->Line.Info[]:::Obtains information about all source lines of a particular type that are supported by the installed mixers.
javax.sound.sampled.AudioSystem#getTargetLineInfo(Line.Info)->Line.Info[]:::Obtains information about all target lines of a particular type that are supported by the installed mixers.
javax.sound.sampled.AudioSystem#isLineSupported(Line.Info)->boolean:::Indicates whether the system supports any lines that match the specified Line.Info object
javax.sound.sampled.AudioSystem#getLine(Line.Info)->Line:::Obtains a line that matches the description in the specified Line.Info object
javax.sound.sampled.AudioSystem#getClip()->Clip:::Obtains a clip that can be used for playing back an audio file or an audio stream
javax.sound.sampled.AudioSystem#getClip(Mixer.Info)->Clip:::Obtains a clip from the specified mixer that can be used for playing back an audio file or an audio stream
javax.sound.sampled.AudioSystem#getSourceDataLine(AudioFormat)->SourceDataLine:::Obtains a source data line that can be used for playing back audio data in the format specified by the AudioFormat object
javax.sound.sampled.AudioSystem#getSourceDataLine(AudioFormat, Mixer.Info)->SourceDataLine:::Obtains a source data line that can be used for playing back audio data in the format specified by the AudioFormat object, provided by the mixer specified by the Mixer.Info object
javax.sound.sampled.AudioSystem#getTargetDataLine(AudioFormat)->TargetDataLine:::Obtains a target data line that can be used for recording audio data in the format specified by the AudioFormat object
javax.sound.sampled.AudioSystem#getTargetDataLine(AudioFormat, Mixer.Info)->TargetDataLine:::Obtains a target data line that can be used for recording audio data in the format specified by the AudioFormat object, provided by the mixer specified by the Mixer.Info object
javax.sound.sampled.AudioSystem#getTargetEncodings(AudioFormat.Encoding)->AudioFormat.Encoding[]:::Obtains the encodings that the system can obtain from an audio input stream with the specified encoding using the set of installed format converters.
javax.sound.sampled.AudioSystem#getTargetEncodings(AudioFormat)->AudioFormat.Encoding[]:::Obtains the encodings that the system can obtain from an audio input stream with the specified format using the set of installed format converters.
javax.sound.sampled.AudioSystem#isConversionSupported(AudioFormat.Encoding, AudioFormat)->boolean:::Indicates whether an audio input stream of the specified encoding can be obtained from an audio input stream that has the specified format.
javax.sound.sampled.AudioSystem#getAudioInputStream(AudioFormat.Encoding, AudioInputStream)->AudioInputStream:::Obtains an audio input stream of the indicated encoding, by converting the provided audio input stream.
javax.sound.sampled.AudioSystem#getTargetFormats(AudioFormat.Encoding, AudioFormat)->AudioFormat[]:::Obtains the formats that have a particular encoding and that the system can obtain from a stream of the specified format using the set of installed format converters.
javax.sound.sampled.AudioSystem#isConversionSupported(AudioFormat, AudioFormat)->boolean:::Indicates whether an audio input stream of a specified format can be obtained from an audio input stream of another specified format.
javax.sound.sampled.AudioSystem#getAudioInputStream(AudioFormat, AudioInputStream)->AudioInputStream:::Obtains an audio input stream of the indicated format, by converting the provided audio input stream.
javax.sound.sampled.AudioSystem#getAudioFileFormat(InputStream)->AudioFileFormat:::Obtains the audio file format of the provided input stream
javax.sound.sampled.AudioSystem#getAudioFileFormat(URL)->AudioFileFormat:::Obtains the audio file format of the specified URL
javax.sound.sampled.AudioSystem#getAudioFileFormat(File)->AudioFileFormat:::Obtains the audio file format of the specified File
javax.sound.sampled.AudioSystem#getAudioInputStream(InputStream)->AudioInputStream:::Obtains an audio input stream from the provided input stream
javax.sound.sampled.AudioSystem#getAudioInputStream(URL)->AudioInputStream:::Obtains an audio input stream from the URL provided
javax.sound.sampled.AudioSystem#getAudioInputStream(File)->AudioInputStream:::Obtains an audio input stream from the provided File
javax.sound.sampled.AudioSystem#getAudioFileTypes()->AudioFileFormat.Type[]:::Obtains the file types for which file writing support is provided by the system.
javax.sound.sampled.AudioSystem#isFileTypeSupported(AudioFileFormat.Type)->boolean:::Indicates whether file writing support for the specified file type is provided by the system.
javax.sound.sampled.AudioSystem#getAudioFileTypes(AudioInputStream)->AudioFileFormat.Type[]:::Obtains the file types that the system can write from the audio input stream specified.
javax.sound.sampled.AudioSystem#isFileTypeSupported(AudioFileFormat.Type, AudioInputStream)->boolean:::Indicates whether an audio file of the specified file type can be written from the indicated audio input stream.
javax.sound.sampled.AudioSystem#write(AudioInputStream, AudioFileFormat.Type, OutputStream)->int:::Writes a stream of bytes representing an audio file of the specified file type to the output stream provided
javax.sound.sampled.AudioSystem#write(AudioInputStream, AudioFileFormat.Type, File)->int:::Writes a stream of bytes representing an audio file of the specified file type to the external file provided.
javax.sound.sampled.BooleanControl#setValue(boolean)->void:::Sets the current value for the control
javax.sound.sampled.BooleanControl#getValue()->boolean:::Obtains this control's current value.
javax.sound.sampled.BooleanControl#getStateLabel(boolean)->String:::Obtains the label for the specified state.
javax.sound.sampled.BooleanControl#toString()->String:::Provides a string representation of the control.
javax.sound.sampled.Clip#open(AudioFormat, byte[], int, int)->void:::Opens the clip, meaning that it should acquire any required system resources and become operational
javax.sound.sampled.Clip#open(AudioInputStream)->void:::Opens the clip with the format and audio data present in the provided audio input stream
javax.sound.sampled.Clip#getFrameLength()->int:::Obtains the media length in sample frames.
javax.sound.sampled.Clip#getMicrosecondLength()->long:::Obtains the media duration in microseconds.
javax.sound.sampled.Clip#setFramePosition(int)->void:::Sets the media position in sample frames
javax.sound.sampled.Clip#setMicrosecondPosition(long)->void:::Sets the media position in microseconds
javax.sound.sampled.Clip#setLoopPoints(int, int)->void:::Sets the first and last sample frames that will be played in the loop
javax.sound.sampled.Clip#loop(int)->void:::Starts looping playback from the current position
javax.sound.sampled.CompoundControl#getMemberControls()->Control[]:::Returns the set of member controls that comprise the compound control.
javax.sound.sampled.CompoundControl#toString()->String:::Provides a string representation of the control.
javax.sound.sampled.Control#getType()->Type:::Obtains the control's type.
javax.sound.sampled.Control#toString()->String:::Obtains a string describing the control type and its current state.
javax.sound.sampled.Control.Type#equals(Object)->boolean:::Indicates whether the specified object is equal to this control type, returning true if the objects are the same.
javax.sound.sampled.Control.Type#hashCode()->int:::Returns a hash code value for this control type.
javax.sound.sampled.Control.Type#toString()->String:::Provides the String representation of the control type
javax.sound.sampled.DataLine#drain()->void:::Drains queued data from the line by continuing data I/O until the data line's internal buffer has been emptied
javax.sound.sampled.DataLine#flush()->void:::Flushes queued data from the line
javax.sound.sampled.DataLine#start()->void:::Allows a line to engage in data I/O
javax.sound.sampled.DataLine#stop()->void:::Stops the line
javax.sound.sampled.DataLine#isRunning()->boolean:::Indicates whether the line is running
javax.sound.sampled.DataLine#isActive()->boolean:::Indicates whether the line is engaging in active I/O (such as playback or capture)
javax.sound.sampled.DataLine#getFormat()->AudioFormat:::Obtains the current format (encoding, sample rate, number of channels, etc.) of the data line's audio data
javax.sound.sampled.DataLine#getBufferSize()->int:::Obtains the maximum number of bytes of data that will fit in the data line's internal buffer
javax.sound.sampled.DataLine#available()->int:::Obtains the number of bytes of data currently available to the application for processing in the data line's internal buffer
javax.sound.sampled.DataLine#getFramePosition()->int:::Obtains the current position in the audio data, in sample frames
javax.sound.sampled.DataLine#getLongFramePosition()->long:::Obtains the current position in the audio data, in sample frames
javax.sound.sampled.DataLine#getMicrosecondPosition()->long:::Obtains the current position in the audio data, in microseconds
javax.sound.sampled.DataLine#getLevel()->float:::Obtains the current volume level for the line
javax.sound.sampled.DataLine.Info#getFormats()->AudioFormat[]:::Obtains a set of audio formats supported by the data line
javax.sound.sampled.DataLine.Info#isFormatSupported(AudioFormat)->boolean:::Indicates whether this data line supports a particular audio format
javax.sound.sampled.DataLine.Info#getMinBufferSize()->int:::Obtains the minimum buffer size supported by the data line.
javax.sound.sampled.DataLine.Info#getMaxBufferSize()->int:::Obtains the maximum buffer size supported by the data line.
javax.sound.sampled.DataLine.Info#matches(Line.Info)->boolean:::Determines whether the specified info object matches this one
javax.sound.sampled.DataLine.Info#toString()->String:::Obtains a textual description of the data line info.
javax.sound.sampled.EnumControl#setValue(Object)->void:::Sets the current value for the control
javax.sound.sampled.EnumControl#getValue()->Object:::Obtains this control's current value.
javax.sound.sampled.EnumControl#getValues()->Object[]:::Returns the set of possible values for this control.
javax.sound.sampled.EnumControl#toString()->String:::Provides a string representation of the control.
javax.sound.sampled.FloatControl#setValue(float)->void:::Sets the current value for the control
javax.sound.sampled.FloatControl#getValue()->float:::Obtains this control's current value.
javax.sound.sampled.FloatControl#getMaximum()->float:::Obtains the maximum value permitted.
javax.sound.sampled.FloatControl#getMinimum()->float:::Obtains the minimum value permitted.
javax.sound.sampled.FloatControl#getUnits()->String:::Obtains the label for the units in which the control's values are expressed, such as "dB" or "frames per second."
javax.sound.sampled.FloatControl#getMinLabel()->String:::Obtains the label for the minimum value, such as "Left" or "Off".
javax.sound.sampled.FloatControl#getMidLabel()->String:::Obtains the label for the mid-point value, such as "Center" or "Default".
javax.sound.sampled.FloatControl#getMaxLabel()->String:::Obtains the label for the maximum value, such as "Right" or "Full".
javax.sound.sampled.FloatControl#getPrecision()->float:::Obtains the resolution or granularity of the control, in the units that the control measures
javax.sound.sampled.FloatControl#getUpdatePeriod()->int:::Obtains the smallest time interval, in microseconds, over which the control's value can change during a shift
javax.sound.sampled.FloatControl#shift(float, float, int)->void:::Changes the control value from the initial value to the final value linearly over the specified time period, specified in microseconds
javax.sound.sampled.FloatControl#toString()->String:::Provides a string representation of the control.
javax.sound.sampled.Line#getLineInfo()->Line.Info:::Obtains the Line.Info object describing this line.
javax.sound.sampled.Line#open()->void:::Opens the line, indicating that it should acquire any required system resources and become operational
javax.sound.sampled.Line#close()->void:::Closes the line, indicating that any system resources in use by the line can be released
javax.sound.sampled.Line#isOpen()->boolean:::Indicates whether the line is open, meaning that it has reserved system resources and is operational, although it might not currently be playing or capturing sound.
javax.sound.sampled.Line#getControls()->Control[]:::Obtains the set of controls associated with this line
javax.sound.sampled.Line#isControlSupported(Control.Type)->boolean:::Indicates whether the line supports a control of the specified type
javax.sound.sampled.Line#getControl(Control.Type)->Control:::Obtains a control of the specified type, if there is any
javax.sound.sampled.Line#addLineListener(LineListener)->void:::Adds a listener to this line
javax.sound.sampled.Line#removeLineListener(LineListener)->void:::Removes the specified listener from this line's list of listeners.
javax.sound.sampled.Line.Info#getLineClass()->Class:::Obtains the class of the line that this Line.Info object describes.
javax.sound.sampled.Line.Info#matches(Info)->boolean:::Indicates whether the specified info object matches this one
javax.sound.sampled.Line.Info#toString()->String:::Obtains a textual description of the line info.
javax.sound.sampled.LineEvent#getLine()->Line:::Obtains the audio line that is the source of this event.
javax.sound.sampled.LineEvent#getType()->Type:::Obtains the event's type.
javax.sound.sampled.LineEvent#getFramePosition()->long::: line event get frame position
javax.sound.sampled.LineEvent#toString()->String:::Obtains a string representation of the event
javax.sound.sampled.LineEvent.Type#equals(Object)->boolean:::Indicates whether the specified object is equal to this event type, returning true if the objects are the same.
javax.sound.sampled.LineEvent.Type#hashCode()->int:::Returns a hash code value for this event type.
javax.sound.sampled.LineEvent.Type#toString()->String:::Returns the type name as the string representation.
javax.sound.sampled.LineListener#update(LineEvent)->void:::Informs the listener that a line's state has changed
javax.sound.sampled.Mixer#getMixerInfo()->Info:::Obtains information about this mixer, including the product's name, version, vendor, etc.
javax.sound.sampled.Mixer#getSourceLineInfo()->Line.Info[]:::Obtains information about the set of source lines supported by this mixer
javax.sound.sampled.Mixer#getTargetLineInfo()->Line.Info[]:::Obtains information about the set of target lines supported by this mixer
javax.sound.sampled.Mixer#getSourceLineInfo(Line.Info)->Line.Info[]:::Obtains information about source lines of a particular type supported by the mixer
javax.sound.sampled.Mixer#getTargetLineInfo(Line.Info)->Line.Info[]:::Obtains information about target lines of a particular type supported by the mixer
javax.sound.sampled.Mixer#isLineSupported(Line.Info)->boolean:::Indicates whether the mixer supports a line (or lines) that match the specified Line.Info object
javax.sound.sampled.Mixer#getLine(Line.Info)->Line:::Obtains a line that is available for use and that matches the description in the specified Line.Info object
javax.sound.sampled.Mixer#getMaxLines(Line.Info)->int:::Obtains the approximate maximum number of lines of the requested type that can be open simultaneously on the mixer
javax.sound.sampled.Mixer#getSourceLines()->Line[]:::Obtains the set of all source lines currently open to this mixer.
javax.sound.sampled.Mixer#getTargetLines()->Line[]:::Obtains the set of all target lines currently open from this mixer.
javax.sound.sampled.Mixer#synchronize(Line[], boolean)->void:::Synchronizes two or more lines
javax.sound.sampled.Mixer#unsynchronize(Line[])->void:::Releases synchronization for the specified lines
javax.sound.sampled.Mixer#isSynchronizationSupported(Line[], boolean)->boolean:::Reports whether this mixer supports synchronization of the specified set of lines.
javax.sound.sampled.Mixer.Info#equals(Object)->boolean:::Indicates whether the specified object is equal to this info object, returning true if the objects are the same.
javax.sound.sampled.Mixer.Info#hashCode()->int:::Returns a hash code value for this info object.
javax.sound.sampled.Mixer.Info#getName()->String:::Obtains the name of the mixer.
javax.sound.sampled.Mixer.Info#getVendor()->String:::Obtains the vendor of the mixer.
javax.sound.sampled.Mixer.Info#getDescription()->String:::Obtains the description of the mixer.
javax.sound.sampled.Mixer.Info#getVersion()->String:::Obtains the version of the mixer.
javax.sound.sampled.Mixer.Info#toString()->String:::Provides a string representation of the mixer info.
javax.sound.sampled.Port.Info#getName()->String:::Obtains the name of the port.
javax.sound.sampled.Port.Info#isSource()->boolean:::Indicates whether the port is a source or a target for its mixer.
javax.sound.sampled.Port.Info#matches(Line.Info)->boolean:::Indicates whether this info object specified matches this one
javax.sound.sampled.Port.Info#equals(Object)->boolean:::Indicates whether the specified object is equal to this info object, returning true if the objects are the same.
javax.sound.sampled.Port.Info#hashCode()->int:::Returns a hash code value for this info object.
javax.sound.sampled.Port.Info#toString()->String:::Provides a String representation of the port.
javax.sound.sampled.ReverbType#getName()->String:::Obtains the name of this reverb type.
javax.sound.sampled.ReverbType#getEarlyReflectionDelay()->int:::Returns the early reflection delay time in microseconds
javax.sound.sampled.ReverbType#getEarlyReflectionIntensity()->float:::Returns the early reflection intensity in decibels
javax.sound.sampled.ReverbType#getLateReflectionDelay()->int:::Returns the late reflection delay time in microseconds
javax.sound.sampled.ReverbType#getLateReflectionIntensity()->float:::Returns the late reflection intensity in decibels
javax.sound.sampled.ReverbType#getDecayTime()->int:::Obtains the decay time, which is the amount of time over which the late reflections attenuate to effective zero
javax.sound.sampled.ReverbType#equals(Object)->boolean:::Indicates whether the specified object is equal to this reverb type, returning true if the objects are the same.
javax.sound.sampled.ReverbType#hashCode()->int:::Returns a hash code value for this reverb type.
javax.sound.sampled.ReverbType#toString()->String:::Provides a String representation of the reverb type, including its name and its parameter settings
javax.sound.sampled.SourceDataLine#open(AudioFormat, int)->void:::Opens the line with the specified format and suggested buffer size, causing the line to acquire any required system resources and become operational
javax.sound.sampled.SourceDataLine#open(AudioFormat)->void:::Opens the line with the specified format, causing the line to acquire any required system resources and become operational
javax.sound.sampled.SourceDataLine#write(byte[], int, int)->int:::Writes audio data to the mixer via this source data line
javax.sound.sampled.TargetDataLine#open(AudioFormat, int)->void:::Opens the line with the specified format and requested buffer size, causing the line to acquire any required system resources and become operational
javax.sound.sampled.TargetDataLine#open(AudioFormat)->void:::Opens the line with the specified format, causing the line to acquire any required system resources and become operational
javax.sound.sampled.TargetDataLine#read(byte[], int, int)->int:::Reads audio data from the data line's input buffer

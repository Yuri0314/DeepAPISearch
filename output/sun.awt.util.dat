IdentityArrayList#trimToSize():::Trims the capacity of this IdentityArrayList instance to be the list's current size:::oldCapacity->if->Arrays->copyOf
IdentityArrayList#ensureCapacity(int):::Increases the capacity of this IdentityArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.:::oldCapacity->if->oldData->newCapacity->if->Arrays->copyOf
IdentityArrayList#size():::Returns the number of elements in this list.:::return
IdentityArrayList#isEmpty():::Returns true if this list contains no elements.:::return
IdentityArrayList#contains(Object):::Returns true if this list contains the specified element:::return->indexOf
IdentityArrayList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element:::for->i->return
IdentityArrayList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element:::for->i->return
IdentityArrayList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element):::return->Arrays->copyOf
IdentityArrayList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::if->return->Arrays->a->getClass->copyOf->System->arraycopy->if->return
IdentityArrayList#get(int):::Returns the element at the specified position in this list.:::rangeCheck->rv->return
IdentityArrayList#set(int, E):::Replaces the element at the specified position in this list with the specified element.:::rangeCheck->oldValue->return
IdentityArrayList#add(E):::Appends the specified element to the end of this list.:::ensureCapacity->return
IdentityArrayList#add(int, E):::Inserts the specified element at the specified position in this list:::rangeCheckForAdd->ensureCapacity->System->arraycopy
IdentityArrayList#remove(int):::Removes the element at the specified position in this list:::rangeCheck->oldValue->numMoved->if->System->arraycopy->return
IdentityArrayList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present:::for->index->return
IdentityArrayList#clear():::Removes all of the elements from this list:::for->i
IdentityArrayList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator:::a->c->toArray->numNew->ensureCapacity->System->arraycopy->return
IdentityArrayList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position:::rangeCheckForAdd->a->c->toArray->numNew->ensureCapacity->numMoved->if->System->arraycopy->System->arraycopy->return
IdentityArrayList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive:::numMoved->System->arraycopy->newSize->while
IdentityLinkedList#getFirst():::Returns the first element in this list.:::if->throw->new->NoSuchElementException->return
IdentityLinkedList#getLast():::Returns the last element in this list.:::if->throw->new->NoSuchElementException->return
IdentityLinkedList#removeFirst():::Removes and returns the first element from this list.:::return->remove
IdentityLinkedList#removeLast():::Removes and returns the last element from this list.:::return->remove
IdentityLinkedList#addFirst(E):::Inserts the specified element at the beginning of this list.:::addBefore
IdentityLinkedList#addLast(E):::Appends the specified element to the end of this list:::addBefore
IdentityLinkedList#contains(Object):::Returns true if this list contains the specified element:::return->indexOf
IdentityLinkedList#size():::Returns the number of elements in this list.:::return
IdentityLinkedList#add(E):::Appends the specified element to the end of this list:::addBefore->return
IdentityLinkedList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present:::for->e->return
IdentityLinkedList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator:::return->addAll
IdentityLinkedList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position:::if->throw->new->IndexOutOfBoundsException->a->c->toArray->numNew->if->return->successor->entry->predecessor->for->i->return
IdentityLinkedList#clear():::Removes all of the elements from this list.:::e->while->next
IdentityLinkedList#get(int):::Returns the element at the specified position in this list.:::return->entry
IdentityLinkedList#set(int, E):::Replaces the element at the specified position in this list with the specified element.:::e->entry->oldVal->return
IdentityLinkedList#add(int, E):::Inserts the specified element at the specified position in this list:::entry->addBefore
IdentityLinkedList#remove(int):::Removes the element at the specified position in this list:::return->entry->remove
IdentityLinkedList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element:::index->for->e->return
IdentityLinkedList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element:::index->for->e->return
IdentityLinkedList#peek():::Retrieves, but does not remove, the head (first element) of this list.:::if->return->return->getFirst
IdentityLinkedList#element():::Retrieves, but does not remove, the head (first element) of this list.:::return->getFirst
IdentityLinkedList#poll():::Retrieves and removes the head (first element) of this list:::if->return->return->removeFirst
IdentityLinkedList#remove():::Retrieves and removes the head (first element) of this list.:::return->removeFirst
IdentityLinkedList#offer(E):::Adds the specified element as the tail (last element) of this list.:::return->add
IdentityLinkedList#offerFirst(E):::Inserts the specified element at the front of this list.:::addFirst->return
IdentityLinkedList#offerLast(E):::Inserts the specified element at the end of this list.:::addLast->return
IdentityLinkedList#peekFirst():::Retrieves, but does not remove, the first element of this list, or returns null if this list is empty.:::if->return->return->getFirst
IdentityLinkedList#peekLast():::Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.:::if->return->return->getLast
IdentityLinkedList#pollFirst():::Retrieves and removes the first element of this list, or returns null if this list is empty.:::if->return->return->removeFirst
IdentityLinkedList#pollLast():::Retrieves and removes the last element of this list, or returns null if this list is empty.:::if->return->return->removeLast
IdentityLinkedList#push(E):::Pushes an element onto the stack represented by this list:::addFirst
IdentityLinkedList#pop():::Pops an element from the stack represented by this list:::return->removeFirst
IdentityLinkedList#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element in this list (when traversing the list from head to tail):::return->remove
IdentityLinkedList#removeLastOccurrence(Object):::Removes the last occurrence of the specified element in this list (when traversing the list from head to tail):::for->e->return
IdentityLinkedList#listIterator(int):::Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list:::return->new->ListItr
IdentityLinkedList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element):::result->new->ObjectArr->i->for->e->return
IdentityLinkedList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::if->a->getClass->getComponentType->newInstance->i->result->for->e->if->return
PerformanceLogger#loggingEnabled():::Returns status of whether logging is enabled or not:::return
PerformanceLogger#setStartTime(String):::Sets the start time:::if->loggingEnabled->nowTime->getCurrentTime->setStartTime
PerformanceLogger#setBaseTime(long):::Sets the base time, output can then be displayed as offsets from the base time;.:::if->loggingEnabled
PerformanceLogger#setStartTime(String, long):::Sets the start time:::if->loggingEnabled->times->new->TimeData->set
PerformanceLogger#getStartTime():::Gets the start time, which should be the time when the java process started, prior to the VM actually being loaded.:::if->loggingEnabled->return->times->get->getTime->else->return
PerformanceLogger#setTime(String):::Sets the value of a given time and returns the index of the slot that that time was stored in.:::if->loggingEnabled->nowTime->getCurrentTime->return->setTime->else->return
PerformanceLogger#setTime(String, long):::Sets the value of a given time and returns the index of the slot that that time was stored in:::if->loggingEnabled->synchronized->times->new->TimeData->add->return->times->size->else->return
PerformanceLogger#getTimeAtIndex(int):::Returns time at given index.:::if->loggingEnabled->return->times->get->getTime->else->return
PerformanceLogger#getMessageAtIndex(int):::Returns message at given index.:::if->loggingEnabled->return->times->get->getMessage->else->return
PerformanceLogger#outputLog(Writer):::Outputs all data to parameter-specified Writer object:::if->loggingEnabled->try->synchronized->for->i->times->size->writer->flush->catch->println->finally
PerformanceLogger#outputLog():::Outputs all data to whatever location the user specified via sun.perflog command-line parameter.:::outputLog
ThreadGroupUtils#getRootThreadGroup():::Returns a root thread group:::currentTG->Thread->currentThread->getThreadGroup->parentTG->currentTG->getParent->while->currentTG->getParent->return

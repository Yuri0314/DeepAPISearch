FactoryImpl#createSaslClient(String[], String, String, String, Map, CallbackHandler)::: factory impl create sasl client:::for->i->return
FactoryImpl#createSaslServer(String, String, String, Map, CallbackHandler)::: factory impl create sasl server:::if->mech->equals->PolicyUtils->checkPolicy->if->throw->new->SaslException->return->new->GssKrb5Server->return
FactoryImpl#getMechanismNames(Map)::: factory impl get mechanism names:::return->PolicyUtils->filterMechs
GssKrb5Base#getMechanismName():::Retrieves this mechanism's name.:::return
GssKrb5Base#getNegotiatedProperty(String)::: gss krb5 base get negotiated property:::if->throw->new->IllegalStateException->xprefix->if->propName->startsWith->type->propName->xprefix->length->substring->if->logger->isLoggable->logger->logp->foreach->InquireType->values->if->t->name->toLowerCase->equals->try->return->inquireSecContext->catch->if->logger->isLoggable->logger->log->return->finally->return->super->getNegotiatedProperty
GssKrb5Base#unwrap(byte[], int, int)::: gss krb5 base unwrap:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->try->msgProp->new->MessageProp->answer->secCtx->unwrap->if->msgProp->getPrivacy->throw->new->SaslException->checkMessageProp->if->logger->isLoggable->traceOutput->traceOutput->return->catch->throw->new->SaslException->finally
GssKrb5Base#wrap(byte[], int, int)::: gss krb5 base wrap:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->try->msgProp->new->MessageProp->answer->secCtx->wrap->if->logger->isLoggable->traceOutput->traceOutput->return->catch->throw->new->SaslException->finally
GssKrb5Base#dispose()::: gss krb5 base dispose:::if->try->secCtx->dispose->catch->throw->new->SaslException->finally
GssKrb5Base#finalize()::: gss krb5 base finalize:::dispose
GssKrb5Base#checkMessageProp(String, MessageProp)::: gss krb5 base check message prop:::if->msgProp->isDuplicateToken->throw->new->SaslException->if->msgProp->isGapToken->throw->new->SaslException->if->msgProp->isOldToken->throw->new->SaslException->if->msgProp->isUnseqToken->throw->new->SaslException
GssKrb5Client#hasInitialResponse()::: gss krb5 client has initial response:::return
GssKrb5Client#evaluateChallenge(byte[]):::Processes the challenge data:::if->throw->new->IllegalStateException->if->return->doFinalHandshake->else->try->gssOutToken->secCtx->initSecContext->if->logger->isLoggable->traceOutput->traceOutput->if->secCtx->isEstablished->if->return->return->catch->throw->new->SaslException->finally
GssKrb5Client#doFinalHandshake(byte[])::: gss krb5 client do final handshake:::try->if->logger->isLoggable->traceOutput->if->return->msgProp->new->MessageProp->gssOutToken->secCtx->unwrap->checkMessageProp->if->logger->isLoggable->if->logger->isLoggable->traceOutput->logger->log->selectedQop->findPreferredMask->if->throw->new->SaslException->if->else->if->srvMaxBufSize->networkByteOrderToInt->Math->min->secCtx->getWrapSizeLimit->if->logger->isLoggable->logger->new->ObjectArr->log->len->if->gssInToken->new->byteArr->if->logger->isLoggable->logger->new->ObjectArr->Boolean->valueOf->Boolean->valueOf->log->if->intToNetworkByteOrder->if->System->arraycopy->logger->log->if->logger->isLoggable->traceOutput->secCtx->new->MessageProp->wrap->if->logger->isLoggable->traceOutput->return->catch->throw->new->SaslException->finally
GssKrb5Server#evaluateResponse(byte[]):::Processes the response data:::if->throw->new->SaslException->if->logger->isLoggable->traceOutput->switch->return->doHandshake1->return->doHandshake2->try->gssOutToken->secCtx->acceptSecContext->if->logger->isLoggable->traceOutput->if->secCtx->isEstablished->secCtx->getSrcName->toString->secCtx->getTargName->toString->logger->new->ObjectArr->log->if->protocolSaved->me->split->equalsIgnoreCase->throw->new->SaslException->if->return->doHandshake1->return->catch->throw->new->SaslException->finally
GssKrb5Server#doHandshake1(byte[])::: gss krb5 server do handshake1:::try->if->throw->new->SaslException->gssInToken->new->byteArr->intToNetworkByteOrder->if->logger->isLoggable->logger->new->ObjectArr->log->if->logger->isLoggable->traceOutput->gssOutToken->secCtx->new->MessageProp->wrap->if->logger->isLoggable->traceOutput->return->catch->throw->new->SaslException->finally
GssKrb5Server#doHandshake2(byte[])::: gss krb5 server do handshake2:::try->msgProp->new->MessageProp->gssOutToken->secCtx->unwrap->checkMessageProp->if->logger->isLoggable->traceOutput->selectedQop->if->throw->new->SaslException->if->else->if->clntMaxBufSize->networkByteOrderToInt->Math->min->secCtx->getWrapSizeLimit->if->logger->isLoggable->logger->new->ObjectArr->Boolean->valueOf->Boolean->valueOf->log->logger->new->ObjectArr->log->if->try->new->String->catch->throw->new->SaslException->finally->else->logger->log->acb->new->AuthorizeCallback->cbh->new->CallbackArr->handle->if->acb->isAuthorized->acb->getAuthorizedID->else->throw->new->SaslException->return->catch->throw->new->SaslException->throw->new->SaslException->throw->new->SaslException->finally
GssKrb5Server#getAuthorizationID()::: gss krb5 server get authorization d:::if->return->else->throw->new->IllegalStateException
GssKrb5Server#getNegotiatedProperty(String)::: gss krb5 server get negotiated property:::if->throw->new->IllegalStateException->result->switch->try->me->split->catch->finally->break->super->getNegotiatedProperty->return
JdkSASL.ProviderService#newInstance(Object)::: provider service new instance:::type->getType->if->throw->new->InvalidParameterException->algo->getAlgorithm->try->if->algo->equals->return->new->com.sun.security.sasl.gsskerb.FactoryImpl->catch->throw->new->NoSuchAlgorithmException->finally->throw->new->ProviderException

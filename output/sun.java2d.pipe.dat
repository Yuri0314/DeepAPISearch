sun.java2d.pipe.AAShapePipe#draw(SunGraphics2D, Shape)->void::: shape pipe draw
sun.java2d.pipe.AAShapePipe#fill(SunGraphics2D, Shape)->void::: shape pipe fill
sun.java2d.pipe.AAShapePipe#fillParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double)->void::: shape pipe fill parallelogram
sun.java2d.pipe.AAShapePipe#drawParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double, double, double)->void::: shape pipe draw parallelogram
sun.java2d.pipe.AAShapePipe#renderPath(SunGraphics2D, Shape, BasicStroke)->void::: shape pipe render path
sun.java2d.pipe.AAShapePipe#renderTiles(SunGraphics2D, Shape, AATileGenerator, int[], TileState)->void::: shape pipe render tiles
sun.java2d.pipe.AAShapePipe.TileState#getAlphaTile(int)->byte[]::: tile state get alpha tile
sun.java2d.pipe.AAShapePipe.TileState#computeDevBox(int[])->Rectangle::: tile state compute dev box
sun.java2d.pipe.AAShapePipe.TileState#computeBBox(double, double, double, double)->Rectangle2D::: tile state compute box
sun.java2d.pipe.AATextRenderer#drawGlyphList(SunGraphics2D, GlyphList)->void::: text renderer draw glyph list
sun.java2d.pipe.AATileGenerator#getTileWidth()->int:::Gets the width of the tiles that the generator batches output into.
sun.java2d.pipe.AATileGenerator#getTileHeight()->int:::Gets the height of the tiles that the generator batches output into.
sun.java2d.pipe.AATileGenerator#getTypicalAlpha()->int:::Gets the typical alpha value that will characterize the current tile
sun.java2d.pipe.AATileGenerator#nextTile()->void:::Skips the current tile and moves on to the next tile
sun.java2d.pipe.AATileGenerator#getAlpha(byte[], int, int)->void:::Gets the alpha coverage values for the current tile
sun.java2d.pipe.AATileGenerator#dispose()->void:::Disposes this tile generator
sun.java2d.pipe.AlphaColorPipe#startSequence(SunGraphics2D, Shape, Rectangle, int[])->Object::: alpha color pipe start sequence
sun.java2d.pipe.AlphaColorPipe#needTile(Object, int, int, int, int)->boolean::: alpha color pipe need tile
sun.java2d.pipe.AlphaColorPipe#renderPathTile(Object, byte[], int, int, int, int, int, int)->void::: alpha color pipe render path tile
sun.java2d.pipe.AlphaColorPipe#skipTile(Object, int, int)->void::: alpha color pipe skip tile
sun.java2d.pipe.AlphaColorPipe#endSequence(Object)->void::: alpha color pipe end sequence
sun.java2d.pipe.AlphaColorPipe#fillParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double)->void::: alpha color pipe fill parallelogram
sun.java2d.pipe.AlphaColorPipe#drawParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double, double, double)->void::: alpha color pipe draw parallelogram
sun.java2d.pipe.AlphaPaintPipe#startSequence(SunGraphics2D, Shape, Rectangle, int[])->Object::: alpha paint pipe start sequence
sun.java2d.pipe.AlphaPaintPipe#needTile(Object, int, int, int, int)->boolean::: alpha paint pipe need tile
sun.java2d.pipe.AlphaPaintPipe#renderPathTile(Object, byte[], int, int, int, int, int, int)->void::: alpha paint pipe render path tile
sun.java2d.pipe.AlphaPaintPipe#skipTile(Object, int, int)->void::: alpha paint pipe skip tile
sun.java2d.pipe.AlphaPaintPipe#endSequence(Object)->void::: alpha paint pipe end sequence
sun.java2d.pipe.BufferedBufImgOps#enableBufImgOp(RenderQueue, SurfaceData, BufferedImage, BufferedImageOp)->void::: buffered buf img ops enable buf img op
sun.java2d.pipe.BufferedBufImgOps#disableBufImgOp(RenderQueue, BufferedImageOp)->void::: buffered buf img ops disable buf img op
sun.java2d.pipe.BufferedBufImgOps#isConvolveOpValid(ConvolveOp)->boolean::: buffered buf img ops is convolve op valid
sun.java2d.pipe.BufferedBufImgOps#isRescaleOpValid(RescaleOp, BufferedImage)->boolean::: buffered buf img ops is rescale op valid
sun.java2d.pipe.BufferedBufImgOps#isLookupOpValid(LookupOp, BufferedImage)->boolean::: buffered buf img ops is lookup op valid
sun.java2d.pipe.BufferedContext#validateContext(AccelSurface, AccelSurface, Region, Composite, AffineTransform, Paint, SunGraphics2D, int)->void:::Fetches the BufferedContextContext associated with the dst
sun.java2d.pipe.BufferedContext#validateContext(AccelSurface)->void:::Fetches the BufferedContextassociated with the surface and disables all context state settings
sun.java2d.pipe.BufferedContext#validate(AccelSurface, AccelSurface, Region, Composite, AffineTransform, Paint, SunGraphics2D, int)->void:::Validates the given parameters against the current state for this context
sun.java2d.pipe.BufferedContext#invalidateContext()->void:::Resets this context's surfaces and all attributes
sun.java2d.pipe.BufferedContext#getRenderQueue()->RenderQueue:::Returns a singleton RenderQueue object used by the rendering pipeline.
sun.java2d.pipe.BufferedContext#saveState()->void:::Saves the state of this context
sun.java2d.pipe.BufferedContext#restoreState()->void:::Restores the native state of this context
sun.java2d.pipe.BufferedMaskBlit#MaskBlit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int, byte[], int, int)->void::: buffered mask blit  mask blit
sun.java2d.pipe.BufferedMaskBlit#validateContext(SurfaceData, Composite, Region)->void:::Validates the context state using the given destination surface and composite/clip values.
sun.java2d.pipe.BufferedMaskFill#MaskFill(SunGraphics2D, SurfaceData, Composite, int, int, int, int, byte[], int, int)->void::: buffered mask fill  mask fill
sun.java2d.pipe.BufferedMaskFill#maskFill(int, int, int, int, int, int, int, byte[])->void:::Called as a separate Runnable when the operation is too large to fit on the RenderQueue
sun.java2d.pipe.BufferedMaskFill#validateContext(SunGraphics2D, Composite, int)->void:::Validates the state in the provided SunGraphics2D object and sets up any special resources for this operation (e.g
sun.java2d.pipe.BufferedPaints#setPaint(RenderQueue, SunGraphics2D, Paint, int)->void::: buffered paints set paint
sun.java2d.pipe.BufferedPaints#resetPaint(RenderQueue)->void::: buffered paints reset paint
sun.java2d.pipe.BufferedPaints#convertSRGBtoLinearRGB(int)->int:::Helper function to convert a color component in sRGB space to linear RGB space
sun.java2d.pipe.BufferedRenderPipe#getAAParallelogramPipe()->ParallelogramPipe::: buffered render pipe get parallelogram pipe
sun.java2d.pipe.BufferedRenderPipe#validateContext(SunGraphics2D)->void:::Validates the state in the provided SunGraphics2D object and sets up any special resources for this operation (e.g
sun.java2d.pipe.BufferedRenderPipe#validateContextAA(SunGraphics2D)->void::: buffered render pipe validate context a
sun.java2d.pipe.BufferedRenderPipe#drawLine(SunGraphics2D, int, int, int, int)->void::: buffered render pipe draw line
sun.java2d.pipe.BufferedRenderPipe#drawRect(SunGraphics2D, int, int, int, int)->void::: buffered render pipe draw rect
sun.java2d.pipe.BufferedRenderPipe#fillRect(SunGraphics2D, int, int, int, int)->void::: buffered render pipe fill rect
sun.java2d.pipe.BufferedRenderPipe#drawRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: buffered render pipe draw round rect
sun.java2d.pipe.BufferedRenderPipe#fillRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: buffered render pipe fill round rect
sun.java2d.pipe.BufferedRenderPipe#drawOval(SunGraphics2D, int, int, int, int)->void::: buffered render pipe draw oval
sun.java2d.pipe.BufferedRenderPipe#fillOval(SunGraphics2D, int, int, int, int)->void::: buffered render pipe fill oval
sun.java2d.pipe.BufferedRenderPipe#drawArc(SunGraphics2D, int, int, int, int, int, int)->void::: buffered render pipe draw arc
sun.java2d.pipe.BufferedRenderPipe#fillArc(SunGraphics2D, int, int, int, int, int, int)->void::: buffered render pipe fill arc
sun.java2d.pipe.BufferedRenderPipe#drawPoly(SunGraphics2D, int[], int[], int, boolean)->void::: buffered render pipe draw poly
sun.java2d.pipe.BufferedRenderPipe#drawPoly(int[], int[], int, boolean, int, int)->void::: buffered render pipe draw poly
sun.java2d.pipe.BufferedRenderPipe#drawPolyline(SunGraphics2D, int[], int[], int)->void::: buffered render pipe draw polyline
sun.java2d.pipe.BufferedRenderPipe#drawPolygon(SunGraphics2D, int[], int[], int)->void::: buffered render pipe draw polygon
sun.java2d.pipe.BufferedRenderPipe#fillPolygon(SunGraphics2D, int[], int[], int)->void::: buffered render pipe fill polygon
sun.java2d.pipe.BufferedRenderPipe#drawPath(SunGraphics2D, Path2D.Float, int, int)->void::: buffered render pipe draw path
sun.java2d.pipe.BufferedRenderPipe#fillPath(SunGraphics2D, Path2D.Float, int, int)->void::: buffered render pipe fill path
sun.java2d.pipe.BufferedRenderPipe#fillSpans(SunGraphics2D, SpanIterator, int, int)->void::: buffered render pipe fill spans
sun.java2d.pipe.BufferedRenderPipe#fillParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double)->void::: buffered render pipe fill parallelogram
sun.java2d.pipe.BufferedRenderPipe#drawParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double, double, double)->void::: buffered render pipe draw parallelogram
sun.java2d.pipe.BufferedRenderPipe#draw(SunGraphics2D, Shape)->void::: buffered render pipe draw
sun.java2d.pipe.BufferedRenderPipe#fill(SunGraphics2D, Shape)->void::: buffered render pipe fill
sun.java2d.pipe.BufferedTextPipe#drawGlyphList(SunGraphics2D, GlyphList)->void::: buffered text pipe draw glyph list
sun.java2d.pipe.BufferedTextPipe#drawGlyphList(int, boolean, boolean, boolean, int, float, float, long[], float[])->void:::Called as a separate Runnable when the operation is too large to fit on the RenderQueue
sun.java2d.pipe.BufferedTextPipe#validateContext(SunGraphics2D, Composite)->void:::Validates the state in the provided SunGraphics2D object.
sun.java2d.pipe.CompositePipe#startSequence(SunGraphics2D, Shape, Rectangle, int[])->Object::: composite pipe start sequence
sun.java2d.pipe.CompositePipe#needTile(Object, int, int, int, int)->boolean::: composite pipe need tile
sun.java2d.pipe.CompositePipe#renderPathTile(Object, byte[], int, int, int, int, int, int)->void::: composite pipe render path tile
sun.java2d.pipe.CompositePipe#skipTile(Object, int, int)->void::: composite pipe skip tile
sun.java2d.pipe.CompositePipe#endSequence(Object)->void::: composite pipe end sequence
sun.java2d.pipe.DrawImage#copyImage(SunGraphics2D, Image, int, int, Color)->boolean::: draw image copy image
sun.java2d.pipe.DrawImage#copyImage(SunGraphics2D, Image, int, int, int, int, int, int, Color)->boolean::: draw image copy image
sun.java2d.pipe.DrawImage#scaleImage(SunGraphics2D, Image, int, int, int, int, Color)->boolean::: draw image scale image
sun.java2d.pipe.DrawImage#transformImage(SunGraphics2D, Image, int, int, AffineTransform, int)->void::: draw image transform image
sun.java2d.pipe.DrawImage#transformImage(SunGraphics2D, Image, AffineTransform, int, int, int, int, int, Color)->void::: draw image transform image
sun.java2d.pipe.DrawImage#tryCopyOrScale(SunGraphics2D, Image, int, int, int, int, Color, int, double[])->boolean::: draw image try copy or scale
sun.java2d.pipe.DrawImage#renderImageXform(SunGraphics2D, Image, AffineTransform, int, int, int, int, int, Color)->void::: draw image render image xform
sun.java2d.pipe.DrawImage#renderImageCopy(SunGraphics2D, Image, Color, int, int, int, int, int, int)->boolean::: draw image render image copy
sun.java2d.pipe.DrawImage#renderImageScale(SunGraphics2D, Image, Color, int, int, int, int, int, double, double, double, double)->boolean::: draw image render image scale
sun.java2d.pipe.DrawImage#scaleImage(SunGraphics2D, Image, int, int, int, int, int, int, int, int, Color)->boolean::: draw image scale image
sun.java2d.pipe.DrawImage#closeToInteger(int, double)->boolean::: draw image close to integer
sun.java2d.pipe.DrawImage#isSimpleTranslate(SunGraphics2D)->boolean::: draw image is simple translate
sun.java2d.pipe.DrawImage#isBgOperation(SurfaceData, Color)->boolean::: draw image is bg operation
sun.java2d.pipe.DrawImage#getBufferedImage(Image)->BufferedImage::: draw image get buffered image
sun.java2d.pipe.DrawImage#blitSurfaceData(SunGraphics2D, Region, SurfaceData, SurfaceData, SurfaceType, SurfaceType, int, int, int, int, int, int, Color)->void::: draw image blit surface data
sun.java2d.pipe.DrawImage#scaleSurfaceData(SunGraphics2D, Region, SurfaceData, SurfaceData, SurfaceType, SurfaceType, int, int, int, int, double, double, double, double)->boolean::: draw image scale surface data
sun.java2d.pipe.DrawImage#imageReady(ToolkitImage, ImageObserver)->boolean::: draw image image ready
sun.java2d.pipe.DrawImage#copyImage(SunGraphics2D, Image, int, int, Color, ImageObserver)->boolean::: draw image copy image
sun.java2d.pipe.DrawImage#copyImage(SunGraphics2D, Image, int, int, int, int, int, int, Color, ImageObserver)->boolean::: draw image copy image
sun.java2d.pipe.DrawImage#scaleImage(SunGraphics2D, Image, int, int, int, int, Color, ImageObserver)->boolean::: draw image scale image
sun.java2d.pipe.DrawImage#scaleImage(SunGraphics2D, Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean::: draw image scale image
sun.java2d.pipe.DrawImage#transformImage(SunGraphics2D, Image, AffineTransform, ImageObserver)->boolean::: draw image transform image
sun.java2d.pipe.DrawImage#transformImage(SunGraphics2D, BufferedImage, BufferedImageOp, int, int)->void::: draw image transform image
sun.java2d.pipe.DrawImagePipe#copyImage(SunGraphics2D, Image, int, int, Color, ImageObserver)->boolean::: draw image pipe copy image
sun.java2d.pipe.DrawImagePipe#copyImage(SunGraphics2D, Image, int, int, int, int, int, int, Color, ImageObserver)->boolean::: draw image pipe copy image
sun.java2d.pipe.DrawImagePipe#scaleImage(SunGraphics2D, Image, int, int, int, int, Color, ImageObserver)->boolean::: draw image pipe scale image
sun.java2d.pipe.DrawImagePipe#scaleImage(SunGraphics2D, Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean::: draw image pipe scale image
sun.java2d.pipe.DrawImagePipe#transformImage(SunGraphics2D, Image, AffineTransform, ImageObserver)->boolean::: draw image pipe transform image
sun.java2d.pipe.DrawImagePipe#transformImage(SunGraphics2D, BufferedImage, BufferedImageOp, int, int)->void::: draw image pipe transform image
sun.java2d.pipe.GeneralCompositePipe#startSequence(SunGraphics2D, Shape, Rectangle, int[])->Object::: general composite pipe start sequence
sun.java2d.pipe.GeneralCompositePipe#needTile(Object, int, int, int, int)->boolean::: general composite pipe need tile
sun.java2d.pipe.GeneralCompositePipe#renderPathTile(Object, byte[], int, int, int, int, int, int)->void:::GeneralCompositePipe.renderPathTile works with custom composite operator provided by an application
sun.java2d.pipe.GeneralCompositePipe#skipTile(Object, int, int)->void::: general composite pipe skip tile
sun.java2d.pipe.GeneralCompositePipe#endSequence(Object)->void::: general composite pipe end sequence
sun.java2d.pipe.GlyphListLoopPipe#drawGlyphList(SunGraphics2D, GlyphList, int)->void::: glyph list loop pipe draw glyph list
sun.java2d.pipe.GlyphListPipe#drawString(SunGraphics2D, String, double, double)->void::: glyph list pipe draw string
sun.java2d.pipe.GlyphListPipe#drawChars(SunGraphics2D, char[], int, int, int, int)->void::: glyph list pipe draw chars
sun.java2d.pipe.GlyphListPipe#drawGlyphVector(SunGraphics2D, GlyphVector, float, float)->void::: glyph list pipe draw glyph vector
sun.java2d.pipe.GlyphListPipe#drawGlyphList(SunGraphics2D, GlyphList)->void::: glyph list pipe draw glyph list
sun.java2d.pipe.GlyphListPipe#drawGlyphList(SunGraphics2D, GlyphList, int)->void::: glyph list pipe draw glyph list
sun.java2d.pipe.LCDTextRenderer#drawGlyphList(SunGraphics2D, GlyphList)->void::: text renderer draw glyph list
sun.java2d.pipe.LoopPipe#drawLine(SunGraphics2D, int, int, int, int)->void::: loop pipe draw line
sun.java2d.pipe.LoopPipe#drawRect(SunGraphics2D, int, int, int, int)->void::: loop pipe draw rect
sun.java2d.pipe.LoopPipe#drawRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: loop pipe draw round rect
sun.java2d.pipe.LoopPipe#drawOval(SunGraphics2D, int, int, int, int)->void::: loop pipe draw oval
sun.java2d.pipe.LoopPipe#drawArc(SunGraphics2D, int, int, int, int, int, int)->void::: loop pipe draw arc
sun.java2d.pipe.LoopPipe#drawPolyline(SunGraphics2D, int[], int[], int)->void::: loop pipe draw polyline
sun.java2d.pipe.LoopPipe#drawPolygon(SunGraphics2D, int[], int[], int)->void::: loop pipe draw polygon
sun.java2d.pipe.LoopPipe#fillRect(SunGraphics2D, int, int, int, int)->void::: loop pipe fill rect
sun.java2d.pipe.LoopPipe#fillRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: loop pipe fill round rect
sun.java2d.pipe.LoopPipe#fillOval(SunGraphics2D, int, int, int, int)->void::: loop pipe fill oval
sun.java2d.pipe.LoopPipe#fillArc(SunGraphics2D, int, int, int, int, int, int)->void::: loop pipe fill arc
sun.java2d.pipe.LoopPipe#fillPolygon(SunGraphics2D, int[], int[], int)->void::: loop pipe fill polygon
sun.java2d.pipe.LoopPipe#draw(SunGraphics2D, Shape)->void::: loop pipe draw
sun.java2d.pipe.LoopPipe#getFillSSI(SunGraphics2D)->ShapeSpanIterator:::Return a ShapeSpanIterator instance that normalizes as appropriate for a fill operation as per the settings in the specified SunGraphics2D object
sun.java2d.pipe.LoopPipe#getStrokeSpans(SunGraphics2D, Shape)->ShapeSpanIterator::: loop pipe get stroke spans
sun.java2d.pipe.LoopPipe#fill(SunGraphics2D, Shape)->void::: loop pipe fill
sun.java2d.pipe.LoopPipe#fillParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double)->void::: loop pipe fill parallelogram
sun.java2d.pipe.LoopPipe#drawParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double, double, double)->void::: loop pipe draw parallelogram
sun.java2d.pipe.NullPipe#drawLine(SunGraphics2D, int, int, int, int)->void::: null pipe draw line
sun.java2d.pipe.NullPipe#drawRect(SunGraphics2D, int, int, int, int)->void::: null pipe draw rect
sun.java2d.pipe.NullPipe#fillRect(SunGraphics2D, int, int, int, int)->void::: null pipe fill rect
sun.java2d.pipe.NullPipe#drawRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: null pipe draw round rect
sun.java2d.pipe.NullPipe#fillRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: null pipe fill round rect
sun.java2d.pipe.NullPipe#drawOval(SunGraphics2D, int, int, int, int)->void::: null pipe draw oval
sun.java2d.pipe.NullPipe#fillOval(SunGraphics2D, int, int, int, int)->void::: null pipe fill oval
sun.java2d.pipe.NullPipe#drawArc(SunGraphics2D, int, int, int, int, int, int)->void::: null pipe draw arc
sun.java2d.pipe.NullPipe#fillArc(SunGraphics2D, int, int, int, int, int, int)->void::: null pipe fill arc
sun.java2d.pipe.NullPipe#drawPolyline(SunGraphics2D, int[], int[], int)->void::: null pipe draw polyline
sun.java2d.pipe.NullPipe#drawPolygon(SunGraphics2D, int[], int[], int)->void::: null pipe draw polygon
sun.java2d.pipe.NullPipe#fillPolygon(SunGraphics2D, int[], int[], int)->void::: null pipe fill polygon
sun.java2d.pipe.NullPipe#draw(SunGraphics2D, Shape)->void::: null pipe draw
sun.java2d.pipe.NullPipe#fill(SunGraphics2D, Shape)->void::: null pipe fill
sun.java2d.pipe.NullPipe#drawString(SunGraphics2D, String, double, double)->void::: null pipe draw string
sun.java2d.pipe.NullPipe#drawGlyphVector(SunGraphics2D, GlyphVector, float, float)->void::: null pipe draw glyph vector
sun.java2d.pipe.NullPipe#drawChars(SunGraphics2D, char[], int, int, int, int)->void::: null pipe draw chars
sun.java2d.pipe.NullPipe#copyImage(SunGraphics2D, Image, int, int, Color, ImageObserver)->boolean::: null pipe copy image
sun.java2d.pipe.NullPipe#copyImage(SunGraphics2D, Image, int, int, int, int, int, int, Color, ImageObserver)->boolean::: null pipe copy image
sun.java2d.pipe.NullPipe#scaleImage(SunGraphics2D, Image, int, int, int, int, Color, ImageObserver)->boolean::: null pipe scale image
sun.java2d.pipe.NullPipe#scaleImage(SunGraphics2D, Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean::: null pipe scale image
sun.java2d.pipe.NullPipe#transformImage(SunGraphics2D, Image, AffineTransform, ImageObserver)->boolean::: null pipe transform image
sun.java2d.pipe.NullPipe#transformImage(SunGraphics2D, BufferedImage, BufferedImageOp, int, int)->void::: null pipe transform image
sun.java2d.pipe.OutlineTextRenderer#drawChars(SunGraphics2D, char[], int, int, int, int)->void::: outline text renderer draw chars
sun.java2d.pipe.OutlineTextRenderer#drawString(SunGraphics2D, String, double, double)->void::: outline text renderer draw string
sun.java2d.pipe.OutlineTextRenderer#drawGlyphVector(SunGraphics2D, GlyphVector, float, float)->void::: outline text renderer draw glyph vector
sun.java2d.pipe.ParallelogramPipe#fillParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double)->void::: parallelogram pipe fill parallelogram
sun.java2d.pipe.ParallelogramPipe#drawParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double, double, double)->void:::Draw a Parallelogram with the indicated line widths assuming a standard BasicStroke with MITER joins
sun.java2d.pipe.PixelDrawPipe#drawLine(SunGraphics2D, int, int, int, int)->void::: pixel draw pipe draw line
sun.java2d.pipe.PixelDrawPipe#drawRect(SunGraphics2D, int, int, int, int)->void::: pixel draw pipe draw rect
sun.java2d.pipe.PixelDrawPipe#drawRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: pixel draw pipe draw round rect
sun.java2d.pipe.PixelDrawPipe#drawOval(SunGraphics2D, int, int, int, int)->void::: pixel draw pipe draw oval
sun.java2d.pipe.PixelDrawPipe#drawArc(SunGraphics2D, int, int, int, int, int, int)->void::: pixel draw pipe draw arc
sun.java2d.pipe.PixelDrawPipe#drawPolyline(SunGraphics2D, int[], int[], int)->void::: pixel draw pipe draw polyline
sun.java2d.pipe.PixelDrawPipe#drawPolygon(SunGraphics2D, int[], int[], int)->void::: pixel draw pipe draw polygon
sun.java2d.pipe.PixelFillPipe#fillRect(SunGraphics2D, int, int, int, int)->void::: pixel fill pipe fill rect
sun.java2d.pipe.PixelFillPipe#fillRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: pixel fill pipe fill round rect
sun.java2d.pipe.PixelFillPipe#fillOval(SunGraphics2D, int, int, int, int)->void::: pixel fill pipe fill oval
sun.java2d.pipe.PixelFillPipe#fillArc(SunGraphics2D, int, int, int, int, int, int)->void::: pixel fill pipe fill arc
sun.java2d.pipe.PixelFillPipe#fillPolygon(SunGraphics2D, int[], int[], int)->void::: pixel fill pipe fill polygon
sun.java2d.pipe.PixelToParallelogramConverter#drawLine(SunGraphics2D, int, int, int, int)->void::: pixel to parallelogram converter draw line
sun.java2d.pipe.PixelToParallelogramConverter#drawRect(SunGraphics2D, int, int, int, int)->void::: pixel to parallelogram converter draw rect
sun.java2d.pipe.PixelToParallelogramConverter#fillRect(SunGraphics2D, int, int, int, int)->void::: pixel to parallelogram converter fill rect
sun.java2d.pipe.PixelToParallelogramConverter#draw(SunGraphics2D, Shape)->void::: pixel to parallelogram converter draw
sun.java2d.pipe.PixelToParallelogramConverter#fill(SunGraphics2D, Shape)->void::: pixel to parallelogram converter fill
sun.java2d.pipe.PixelToParallelogramConverter#len(double, double)->double::: pixel to parallelogram converter len
sun.java2d.pipe.PixelToParallelogramConverter#normalize(double)->double::: pixel to parallelogram converter normalize
sun.java2d.pipe.PixelToParallelogramConverter#drawGeneralLine(SunGraphics2D, double, double, double, double)->boolean::: pixel to parallelogram converter draw general line
sun.java2d.pipe.PixelToParallelogramConverter#fillRectangle(SunGraphics2D, double, double, double, double)->void::: pixel to parallelogram converter fill rectangle
sun.java2d.pipe.PixelToParallelogramConverter#drawRectangle(SunGraphics2D, double, double, double, double, double)->void::: pixel to parallelogram converter draw rectangle
sun.java2d.pipe.PixelToParallelogramConverter#fillOuterParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double, double, double, double, double)->void:::This utility function handles the case where a drawRectangle operation discovered that the interior hole in the rectangle or parallelogram has been completely filled in by the stroke width
sun.java2d.pipe.PixelToShapeConverter#drawLine(SunGraphics2D, int, int, int, int)->void::: pixel to shape converter draw line
sun.java2d.pipe.PixelToShapeConverter#drawRect(SunGraphics2D, int, int, int, int)->void::: pixel to shape converter draw rect
sun.java2d.pipe.PixelToShapeConverter#fillRect(SunGraphics2D, int, int, int, int)->void::: pixel to shape converter fill rect
sun.java2d.pipe.PixelToShapeConverter#drawRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: pixel to shape converter draw round rect
sun.java2d.pipe.PixelToShapeConverter#fillRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: pixel to shape converter fill round rect
sun.java2d.pipe.PixelToShapeConverter#drawOval(SunGraphics2D, int, int, int, int)->void::: pixel to shape converter draw oval
sun.java2d.pipe.PixelToShapeConverter#fillOval(SunGraphics2D, int, int, int, int)->void::: pixel to shape converter fill oval
sun.java2d.pipe.PixelToShapeConverter#drawArc(SunGraphics2D, int, int, int, int, int, int)->void::: pixel to shape converter draw arc
sun.java2d.pipe.PixelToShapeConverter#fillArc(SunGraphics2D, int, int, int, int, int, int)->void::: pixel to shape converter fill arc
sun.java2d.pipe.PixelToShapeConverter#drawPolyline(SunGraphics2D, int[], int[], int)->void::: pixel to shape converter draw polyline
sun.java2d.pipe.PixelToShapeConverter#drawPolygon(SunGraphics2D, int[], int[], int)->void::: pixel to shape converter draw polygon
sun.java2d.pipe.PixelToShapeConverter#fillPolygon(SunGraphics2D, int[], int[], int)->void::: pixel to shape converter fill polygon
sun.java2d.pipe.Region#dimAdd(int, int)->int:::Adds the dimension dim to the coordinate start with appropriate clipping
sun.java2d.pipe.Region#clipAdd(int, int)->int:::Adds the delta dv to the value v with appropriate clipping to the bounds of Integer resolution
sun.java2d.pipe.Region#clipRound(double)->int:::Returns the closest int to the argument, with ties rounding to negative infinity
sun.java2d.pipe.Region#clipScale(int, double)->int:::Multiply the scale factor sv and the value v with appropriate clipping to the bounds of Integer resolution
sun.java2d.pipe.Region#getInstance(Shape, AffineTransform)->Region:::Returns a Region object covering the pixels which would be touched by a fill or clip operation on a Graphics implementation on the specified Shape object under the optionally specified AffineTransform object.
sun.java2d.pipe.Region#getInstance(Region, Shape, AffineTransform)->Region:::Returns a Region object covering the pixels which would be touched by a fill or clip operation on a Graphics implementation on the specified Shape object under the optionally specified AffineTransform object further restricted by the specified device bounds
sun.java2d.pipe.Region#getInstance(Region, boolean, Shape, AffineTransform)->Region:::Returns a Region object covering the pixels which would be touched by a fill or clip operation on a Graphics implementation on the specified Shape object under the optionally specified AffineTransform object further restricted by the specified device bounds
sun.java2d.pipe.Region#getInstance(int, int, int, int, int[])->Region:::Returns a Region object with a rectangle of interest specified by the indicated rectangular area in lox, loy, hix, hiy and edges array, which is located relative to the rectangular area
sun.java2d.pipe.Region#getInstance(Rectangle)->Region:::Returns a Region object with a rectangle of interest specified by the indicated Rectangle object
sun.java2d.pipe.Region#getInstanceXYWH(int, int, int, int)->Region:::Returns a Region object with a rectangle of interest specified by the indicated rectangular area in x, y, width, height format
sun.java2d.pipe.Region#getInstance(int[])->Region:::Returns a Region object with a rectangle of interest specified by the indicated span array
sun.java2d.pipe.Region#getInstanceXYXY(int, int, int, int)->Region:::Returns a Region object with a rectangle of interest specified by the indicated rectangular area in lox, loy, hix, hiy format
sun.java2d.pipe.Region#getInstance(int[], SpanIterator)->Region:::Returns a Region object with a rectangle of interest specified by the indicated rectangular area in lox, loy, hix, hiy format
sun.java2d.pipe.Region#getScaledRegion(double, double)->Region:::Returns a Region object that represents the same list of rectangles as the current Region object, scaled by the specified sx, sy factors.
sun.java2d.pipe.Region#getTranslatedRegion(int, int)->Region:::Returns a Region object that represents the same list of rectangles as the current Region object, translated by the specified dx, dy translation factors.
sun.java2d.pipe.Region#getIntersection(Rectangle)->Region:::Returns a Region object that represents the intersection of this object with the specified Rectangle
sun.java2d.pipe.Region#getIntersectionXYWH(int, int, int, int)->Region:::Returns a Region object that represents the intersection of this object with the specified rectangular area
sun.java2d.pipe.Region#getIntersection(Rectangle2D)->Region:::Returns a Region object that represents the intersection of this object with the specified Rectangle2D
sun.java2d.pipe.Region#getIntersectionXYXY(double, double, double, double)->Region:::Returns a Region object that represents the intersection of this object with the specified rectangular area
sun.java2d.pipe.Region#getIntersectionXYXY(int, int, int, int)->Region:::Returns a Region object that represents the intersection of this object with the specified rectangular area
sun.java2d.pipe.Region#getIntersection(Region)->Region:::Returns a Region object that represents the intersection of this object with the specified Region object
sun.java2d.pipe.Region#getUnion(Region)->Region:::Returns a Region object that represents the union of this object with the specified Region object
sun.java2d.pipe.Region#getDifference(Region)->Region:::Returns a Region object that represents the difference of the specified Region object subtracted from this object
sun.java2d.pipe.Region#getExclusiveOr(Region)->Region:::Returns a Region object that represents the exclusive or of this object with the specified Region object
sun.java2d.pipe.Region#getBoundsIntersection(Rectangle)->Region:::Returns a Region object that represents the bounds of the intersection of this object with the bounds of the specified Region object
sun.java2d.pipe.Region#getBoundsIntersectionXYWH(int, int, int, int)->Region:::Returns a Region object that represents the bounds of the intersection of this object with the bounds of the specified rectangular area in x, y, width, height format
sun.java2d.pipe.Region#getBoundsIntersectionXYXY(int, int, int, int)->Region:::Returns a Region object that represents the bounds of the intersection of this object with the bounds of the specified rectangular area in lox, loy, hix, hiy format
sun.java2d.pipe.Region#getBoundsIntersection(Region)->Region:::Returns a Region object that represents the intersection of this object with the bounds of the specified Region object
sun.java2d.pipe.Region#getLoX()->int:::Returns the lowest X coordinate in the Region.
sun.java2d.pipe.Region#getLoY()->int:::Returns the lowest Y coordinate in the Region.
sun.java2d.pipe.Region#getHiX()->int:::Returns the highest X coordinate in the Region.
sun.java2d.pipe.Region#getHiY()->int:::Returns the highest Y coordinate in the Region.
sun.java2d.pipe.Region#getWidth()->int:::Returns the width of this Region clipped to the range (0 - MAX_INT).
sun.java2d.pipe.Region#getHeight()->int:::Returns the height of this Region clipped to the range (0 - MAX_INT).
sun.java2d.pipe.Region#isEmpty()->boolean:::Returns true iff this Region encloses no area.
sun.java2d.pipe.Region#isRectangular()->boolean:::Returns true iff this Region represents a single simple rectangular area.
sun.java2d.pipe.Region#contains(int, int)->boolean:::Returns true iff this Region contains the specified coordinate.
sun.java2d.pipe.Region#isInsideXYWH(int, int, int, int)->boolean:::Returns true iff this Region lies inside the indicated rectangular area specified in x, y, width, height format with appropriate clipping performed as per the dimAdd method.
sun.java2d.pipe.Region#isInsideXYXY(int, int, int, int)->boolean:::Returns true iff this Region lies inside the indicated rectangular area specified in lox, loy, hix, hiy format.
sun.java2d.pipe.Region#isInsideQuickCheck(Region)->boolean:::Quickly checks if this Region lies inside the specified Region object
sun.java2d.pipe.Region#intersectsQuickCheckXYXY(int, int, int, int)->boolean:::Quickly checks if this Region intersects the specified rectangular area specified in lox, loy, hix, hiy format
sun.java2d.pipe.Region#intersectsQuickCheck(Region)->boolean:::Quickly checks if this Region intersects the specified Region object
sun.java2d.pipe.Region#encompasses(Region)->boolean:::Quickly checks if this Region surrounds the specified Region object
sun.java2d.pipe.Region#encompassesXYWH(int, int, int, int)->boolean:::Quickly checks if this Region surrounds the specified rectangular area specified in x, y, width, height format
sun.java2d.pipe.Region#encompassesXYXY(int, int, int, int)->boolean:::Quickly checks if this Region surrounds the specified rectangular area specified in lox, loy, hix, hiy format
sun.java2d.pipe.Region#getBounds(int[])->void:::Gets the bbox of the available spans, clipped to the OutputArea.
sun.java2d.pipe.Region#clipBoxToBounds(int[])->void:::Clips the indicated bbox array to the bounds of this Region.
sun.java2d.pipe.Region#getIterator()->RegionIterator:::Gets an iterator object to iterate over the spans in this region.
sun.java2d.pipe.Region#getSpanIterator()->SpanIterator:::Gets a span iterator object that iterates over the spans in this region
sun.java2d.pipe.Region#getSpanIterator(int[])->SpanIterator:::Gets a span iterator object that iterates over the spans in this region but clipped to the bounds given in the argument (xlo, ylo, xhi, yhi).
sun.java2d.pipe.Region#filter(SpanIterator)->SpanIterator:::Returns a SpanIterator that is the argument iterator filtered by this region.
sun.java2d.pipe.Region#toString()->String::: region to string
sun.java2d.pipe.Region#hashCode()->int::: region hash code
sun.java2d.pipe.Region#equals(Object)->boolean::: region equals
sun.java2d.pipe.RegionClipSpanIterator#getPathBox(int[])->void::: region clip span iterator get path box
sun.java2d.pipe.RegionClipSpanIterator#intersectClipBox(int, int, int, int)->void::: region clip span iterator intersect clip box
sun.java2d.pipe.RegionClipSpanIterator#nextSpan(int[])->boolean::: region clip span iterator next span
sun.java2d.pipe.RegionClipSpanIterator#skipDownTo(int)->void:::This method tells the iterator that it may skip all spans whose Y range is completely above the indicated Y coordinate.
sun.java2d.pipe.RegionClipSpanIterator#getNativeIterator()->long:::This method returns a native pointer to a function block that can be used by a native method to perform the same iteration cycle that the above methods provide while avoiding upcalls to the Java object
sun.java2d.pipe.RegionClipSpanIterator#finalize()->void::: region clip span iterator finalize
sun.java2d.pipe.RegionIterator#createCopy()->RegionIterator:::Returns a new RegionIterator object representing the same iteration state as this object to allow multiple iteration branches from the current position.
sun.java2d.pipe.RegionIterator#copyStateFrom(RegionIterator)->void:::Copies the iteration state from this RegionIterator object into another RegionIterator object to allow multiple iteration branches from the current position.
sun.java2d.pipe.RegionIterator#nextYRange(int[])->boolean:::Moves the iteration state to the beginning of the next Y range in the region returning true if one is found and recording the low and high Y coordinates of the range in the array at locations 1 and 3 respectively.
sun.java2d.pipe.RegionIterator#nextXBand(int[])->boolean:::Moves the iteration state to the beginning of the next X band in the current Y range returning true if one is found and recording the low and high X coordinates of the range in the array at locations 0 and 2 respectively.
sun.java2d.pipe.RegionSpanIterator#getPathBox(int[])->void:::Gets the bbox of the available region spans.
sun.java2d.pipe.RegionSpanIterator#intersectClipBox(int, int, int, int)->void:::Intersect the box used for clipping the output spans with the given box.
sun.java2d.pipe.RegionSpanIterator#nextSpan(int[])->boolean:::Fetches the next span that needs to be operated on
sun.java2d.pipe.RegionSpanIterator#skipDownTo(int)->void:::This method tells the iterator that it may skip all spans whose Y range is completely above the indicated Y coordinate.
sun.java2d.pipe.RegionSpanIterator#getNativeIterator()->long:::This method returns a native pointer to a function block that can be used by a native method to perform the same iteration cycle that the above methods provide while avoiding upcalls to the Java object
sun.java2d.pipe.RenderBuffer#allocate(int)->RenderBuffer:::Allocates a fresh buffer using the machine endianness.
sun.java2d.pipe.RenderBuffer#getAddress()->long:::Returns the base address of the underlying memory buffer.
sun.java2d.pipe.RenderBuffer#capacity()->int::: render buffer capacity
sun.java2d.pipe.RenderBuffer#remaining()->int::: render buffer remaining
sun.java2d.pipe.RenderBuffer#position()->int::: render buffer position
sun.java2d.pipe.RenderBuffer#position(long)->void::: render buffer position
sun.java2d.pipe.RenderBuffer#clear()->void::: render buffer clear
sun.java2d.pipe.RenderBuffer#skip(long)->RenderBuffer::: render buffer skip
sun.java2d.pipe.RenderBuffer#putByte(byte)->RenderBuffer::: render buffer put byte
sun.java2d.pipe.RenderBuffer#put(byte[])->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#put(byte[], int, int)->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#putShort(short)->RenderBuffer::: render buffer put short
sun.java2d.pipe.RenderBuffer#put(short[])->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#put(short[], int, int)->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#putInt(int, int)->RenderBuffer::: render buffer put int
sun.java2d.pipe.RenderBuffer#putInt(int)->RenderBuffer::: render buffer put int
sun.java2d.pipe.RenderBuffer#put(int[])->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#put(int[], int, int)->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#putFloat(float)->RenderBuffer::: render buffer put float
sun.java2d.pipe.RenderBuffer#put(float[])->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#put(float[], int, int)->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#putLong(long)->RenderBuffer::: render buffer put long
sun.java2d.pipe.RenderBuffer#put(long[])->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#put(long[], int, int)->RenderBuffer::: render buffer put
sun.java2d.pipe.RenderBuffer#putDouble(double)->RenderBuffer::: render buffer put double
sun.java2d.pipe.RenderingEngine#getInstance()->RenderingEngine:::Returns an instance of RenderingEngine as determined by the installation environment and runtime flags
sun.java2d.pipe.RenderingEngine#createStrokedShape(Shape, float, int, int, float, float[], float)->Shape:::Create a widened path as specified by the parameters
sun.java2d.pipe.RenderingEngine#strokeTo(Shape, AffineTransform, BasicStroke, boolean, boolean, boolean, PathConsumer2D)->void:::Sends the geometry for a widened path as specified by the parameters to the specified consumer
sun.java2d.pipe.RenderingEngine#getAATileGenerator(Shape, AffineTransform, Region, BasicStroke, boolean, boolean, int[])->AATileGenerator:::Construct an antialiased tile generator for the given shape with the given rendering attributes and store the bounds of the tile iteration in the bbox parameter
sun.java2d.pipe.RenderingEngine#getAATileGenerator(double, double, double, double, double, double, double, double, Region, int[])->AATileGenerator:::Construct an antialiased tile generator for the given parallelogram store the bounds of the tile iteration in the bbox parameter
sun.java2d.pipe.RenderingEngine#getMinimumAAPenSize()->float:::Returns the minimum pen width that the antialiasing rasterizer can represent without dropouts occurring.
sun.java2d.pipe.RenderingEngine#feedConsumer(PathIterator, PathConsumer2D)->void:::Utility method to feed a PathConsumer2D object from a given PathIterator
sun.java2d.pipe.RenderingEngine.Tracer#createStrokedShape(Shape, float, int, int, float, float[], float)->Shape::: tracer create stroked shape
sun.java2d.pipe.RenderingEngine.Tracer#strokeTo(Shape, AffineTransform, BasicStroke, boolean, boolean, boolean, PathConsumer2D)->void::: tracer stroke to
sun.java2d.pipe.RenderingEngine.Tracer#getMinimumAAPenSize()->float::: tracer get minimum pen size
sun.java2d.pipe.RenderingEngine.Tracer#getAATileGenerator(Shape, AffineTransform, Region, BasicStroke, boolean, boolean, int[])->AATileGenerator::: tracer get tile generator
sun.java2d.pipe.RenderingEngine.Tracer#getAATileGenerator(double, double, double, double, double, double, double, double, Region, int[])->AATileGenerator::: tracer get tile generator
sun.java2d.pipe.RenderQueue#lock()->void:::Locks the queue for read/write access.
sun.java2d.pipe.RenderQueue#tryLock()->boolean:::Attempts to lock the queue
sun.java2d.pipe.RenderQueue#unlock()->void:::Unlocks the queue.
sun.java2d.pipe.RenderQueue#addReference(Object)->void:::Adds the given Object to the set of hard references, which will prevent that Object from being disposed until the queue has been flushed completely
sun.java2d.pipe.RenderQueue#getBuffer()->RenderBuffer:::Returns the encapsulated RenderBuffer object.
sun.java2d.pipe.RenderQueue#ensureCapacity(int)->void:::Ensures that there will be enough room on the underlying buffer for the following operation
sun.java2d.pipe.RenderQueue#ensureCapacityAndAlignment(int, int)->void:::Convenience method that is equivalent to calling ensureCapacity() followed by ensureAlignment()
sun.java2d.pipe.RenderQueue#ensureAlignment(int)->void:::Inserts a 4-byte NOOP token when necessary to ensure that all 8-byte parameters for the following operation are added to the underlying buffer with an 8-byte memory alignment.
sun.java2d.pipe.RenderQueue#flushNow()->void:::Immediately processes each operation currently pending on the buffer
sun.java2d.pipe.RenderQueue#flushAndInvokeNow(Runnable)->void:::Immediately processes each operation currently pending on the buffer, and then invokes the provided task
sun.java2d.pipe.RenderQueue#flushNow(int)->void:::Updates the current position of the underlying buffer, and then flushes the queue immediately
sun.java2d.pipe.ShapeDrawPipe#draw(SunGraphics2D, Shape)->void::: shape draw pipe draw
sun.java2d.pipe.ShapeDrawPipe#fill(SunGraphics2D, Shape)->void::: shape draw pipe fill
sun.java2d.pipe.ShapeSpanIterator#initIDs()->void::: shape span iterator init ds
sun.java2d.pipe.ShapeSpanIterator#appendPath(PathIterator)->void::: shape span iterator append path
sun.java2d.pipe.ShapeSpanIterator#appendPoly(int[], int[], int, int, int)->void::: shape span iterator append poly
sun.java2d.pipe.ShapeSpanIterator#setOutputAreaXYWH(int, int, int, int)->void::: shape span iterator set output area h
sun.java2d.pipe.ShapeSpanIterator#setOutputAreaXYXY(int, int, int, int)->void::: shape span iterator set output area y
sun.java2d.pipe.ShapeSpanIterator#setOutputArea(Rectangle)->void::: shape span iterator set output area
sun.java2d.pipe.ShapeSpanIterator#setOutputArea(Region)->void::: shape span iterator set output area
sun.java2d.pipe.ShapeSpanIterator#setRule(int)->void::: shape span iterator set rule
sun.java2d.pipe.ShapeSpanIterator#addSegment(int, float[])->void::: shape span iterator add segment
sun.java2d.pipe.ShapeSpanIterator#getPathBox(int[])->void::: shape span iterator get path box
sun.java2d.pipe.ShapeSpanIterator#intersectClipBox(int, int, int, int)->void::: shape span iterator intersect clip box
sun.java2d.pipe.ShapeSpanIterator#nextSpan(int[])->boolean::: shape span iterator next span
sun.java2d.pipe.ShapeSpanIterator#skipDownTo(int)->void:::This method tells the iterator that it may skip all spans whose Y range is completely above the indicated Y coordinate.
sun.java2d.pipe.ShapeSpanIterator#getNativeIterator()->long:::This method returns a native pointer to a function block that can be used by a native method to perform the same iteration cycle that the above methods provide while avoiding upcalls to the Java object
sun.java2d.pipe.ShapeSpanIterator#dispose()->void::: shape span iterator dispose
sun.java2d.pipe.ShapeSpanIterator#moveTo(float, float)->void::: shape span iterator move to
sun.java2d.pipe.ShapeSpanIterator#lineTo(float, float)->void::: shape span iterator line to
sun.java2d.pipe.ShapeSpanIterator#quadTo(float, float, float, float)->void::: shape span iterator quad to
sun.java2d.pipe.ShapeSpanIterator#curveTo(float, float, float, float, float, float)->void::: shape span iterator curve to
sun.java2d.pipe.ShapeSpanIterator#closePath()->void::: shape span iterator close path
sun.java2d.pipe.ShapeSpanIterator#pathDone()->void::: shape span iterator path done
sun.java2d.pipe.ShapeSpanIterator#getNativeConsumer()->long::: shape span iterator get native consumer
sun.java2d.pipe.SolidTextRenderer#drawGlyphList(SunGraphics2D, GlyphList)->void::: solid text renderer draw glyph list
sun.java2d.pipe.SpanClipRenderer#initIDs(Class, Class)->void::: span clip renderer init ds
sun.java2d.pipe.SpanClipRenderer#startSequence(SunGraphics2D, Shape, Rectangle, int[])->Object::: span clip renderer start sequence
sun.java2d.pipe.SpanClipRenderer#needTile(Object, int, int, int, int)->boolean::: span clip renderer need tile
sun.java2d.pipe.SpanClipRenderer#renderPathTile(Object, byte[], int, int, int, int, int, int, ShapeSpanIterator)->void::: span clip renderer render path tile
sun.java2d.pipe.SpanClipRenderer#renderPathTile(Object, byte[], int, int, int, int, int, int)->void::: span clip renderer render path tile
sun.java2d.pipe.SpanClipRenderer#fillTile(RegionIterator, byte[], int, int, int[])->void::: span clip renderer fill tile
sun.java2d.pipe.SpanClipRenderer#eraseTile(RegionIterator, byte[], int, int, int[])->void::: span clip renderer erase tile
sun.java2d.pipe.SpanClipRenderer#skipTile(Object, int, int)->void::: span clip renderer skip tile
sun.java2d.pipe.SpanClipRenderer#endSequence(Object)->void::: span clip renderer end sequence
sun.java2d.pipe.SpanIterator#getPathBox(int[])->void:::This method returns the bounding box of the spans that the iterator will be returning
sun.java2d.pipe.SpanIterator#intersectClipBox(int, int, int, int)->void:::This method constrains the spans returned by nextSpan() to the rectangle whose bounds are given.
sun.java2d.pipe.SpanIterator#nextSpan(int[])->boolean:::This method returns the next span in the shape being iterated
sun.java2d.pipe.SpanIterator#skipDownTo(int)->void:::This method tells the iterator that it may skip all spans whose Y range is completely above the indicated Y coordinate
sun.java2d.pipe.SpanIterator#getNativeIterator()->long:::This method returns a native pointer to a function block that can be used by a native method to perform the same iteration cycle that the above methods provide while avoiding upcalls to the Java object
sun.java2d.pipe.SpanShapeRenderer.Composite#startSequence(SunGraphics2D, Shape, Rectangle, int[])->Object::: composite start sequence
sun.java2d.pipe.SpanShapeRenderer.Composite#renderBox(Object, int, int, int, int)->void::: composite render box
sun.java2d.pipe.SpanShapeRenderer.Composite#endSequence(Object)->void::: composite end sequence
sun.java2d.pipe.SpanShapeRenderer.Simple#startSequence(SunGraphics2D, Shape, Rectangle, int[])->Object::: simple start sequence
sun.java2d.pipe.SpanShapeRenderer.Simple#renderBox(Object, int, int, int, int)->void::: simple render box
sun.java2d.pipe.SpanShapeRenderer.Simple#endSequence(Object)->void::: simple end sequence
sun.java2d.pipe.SpanShapeRenderer#draw(SunGraphics2D, Shape)->void::: span shape renderer draw
sun.java2d.pipe.SpanShapeRenderer#fill(SunGraphics2D, Shape)->void::: span shape renderer fill
sun.java2d.pipe.SpanShapeRenderer#startSequence(SunGraphics2D, Shape, Rectangle, int[])->Object::: span shape renderer start sequence
sun.java2d.pipe.SpanShapeRenderer#renderBox(Object, int, int, int, int)->void::: span shape renderer render box
sun.java2d.pipe.SpanShapeRenderer#endSequence(Object)->void::: span shape renderer end sequence
sun.java2d.pipe.SpanShapeRenderer#renderRect(SunGraphics2D, Rectangle2D)->void::: span shape renderer render rect
sun.java2d.pipe.SpanShapeRenderer#renderSpans(SunGraphics2D, Region, Shape, ShapeSpanIterator)->void::: span shape renderer render spans
sun.java2d.pipe.SpanShapeRenderer#spanClipLoop(Object, SpanIterator, Region, int[])->void::: span shape renderer span clip loop
sun.java2d.pipe.TextPipe#drawString(SunGraphics2D, String, double, double)->void::: text pipe draw string
sun.java2d.pipe.TextPipe#drawGlyphVector(SunGraphics2D, GlyphVector, float, float)->void::: text pipe draw glyph vector
sun.java2d.pipe.TextPipe#drawChars(SunGraphics2D, char[], int, int, int, int)->void::: text pipe draw chars
sun.java2d.pipe.TextRenderer#drawGlyphList(SunGraphics2D, GlyphList)->void::: text renderer draw glyph list
sun.java2d.pipe.ValidatePipe#validate(SunGraphics2D)->boolean::: validate pipe validate
sun.java2d.pipe.ValidatePipe#drawLine(SunGraphics2D, int, int, int, int)->void::: validate pipe draw line
sun.java2d.pipe.ValidatePipe#drawRect(SunGraphics2D, int, int, int, int)->void::: validate pipe draw rect
sun.java2d.pipe.ValidatePipe#fillRect(SunGraphics2D, int, int, int, int)->void::: validate pipe fill rect
sun.java2d.pipe.ValidatePipe#drawRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: validate pipe draw round rect
sun.java2d.pipe.ValidatePipe#fillRoundRect(SunGraphics2D, int, int, int, int, int, int)->void::: validate pipe fill round rect
sun.java2d.pipe.ValidatePipe#drawOval(SunGraphics2D, int, int, int, int)->void::: validate pipe draw oval
sun.java2d.pipe.ValidatePipe#fillOval(SunGraphics2D, int, int, int, int)->void::: validate pipe fill oval
sun.java2d.pipe.ValidatePipe#drawArc(SunGraphics2D, int, int, int, int, int, int)->void::: validate pipe draw arc
sun.java2d.pipe.ValidatePipe#fillArc(SunGraphics2D, int, int, int, int, int, int)->void::: validate pipe fill arc
sun.java2d.pipe.ValidatePipe#drawPolyline(SunGraphics2D, int[], int[], int)->void::: validate pipe draw polyline
sun.java2d.pipe.ValidatePipe#drawPolygon(SunGraphics2D, int[], int[], int)->void::: validate pipe draw polygon
sun.java2d.pipe.ValidatePipe#fillPolygon(SunGraphics2D, int[], int[], int)->void::: validate pipe fill polygon
sun.java2d.pipe.ValidatePipe#draw(SunGraphics2D, Shape)->void::: validate pipe draw
sun.java2d.pipe.ValidatePipe#fill(SunGraphics2D, Shape)->void::: validate pipe fill
sun.java2d.pipe.ValidatePipe#drawString(SunGraphics2D, String, double, double)->void::: validate pipe draw string
sun.java2d.pipe.ValidatePipe#drawGlyphVector(SunGraphics2D, GlyphVector, float, float)->void::: validate pipe draw glyph vector
sun.java2d.pipe.ValidatePipe#drawChars(SunGraphics2D, char[], int, int, int, int)->void::: validate pipe draw chars
sun.java2d.pipe.ValidatePipe#copyImage(SunGraphics2D, Image, int, int, Color, ImageObserver)->boolean::: validate pipe copy image
sun.java2d.pipe.ValidatePipe#copyImage(SunGraphics2D, Image, int, int, int, int, int, int, Color, ImageObserver)->boolean::: validate pipe copy image
sun.java2d.pipe.ValidatePipe#scaleImage(SunGraphics2D, Image, int, int, int, int, Color, ImageObserver)->boolean::: validate pipe scale image
sun.java2d.pipe.ValidatePipe#scaleImage(SunGraphics2D, Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean::: validate pipe scale image
sun.java2d.pipe.ValidatePipe#transformImage(SunGraphics2D, Image, AffineTransform, ImageObserver)->boolean::: validate pipe transform image
sun.java2d.pipe.ValidatePipe#transformImage(SunGraphics2D, BufferedImage, BufferedImageOp, int, int)->void::: validate pipe transform image

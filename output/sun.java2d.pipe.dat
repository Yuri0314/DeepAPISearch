AATileGenerator#getTileWidth():::Gets the width of the tiles that the generator batches output into.:::
AATileGenerator#getTileHeight():::Gets the height of the tiles that the generator batches output into.:::
AATileGenerator#getTypicalAlpha():::Gets the typical alpha value that will characterize the current tile:::
AATileGenerator#nextTile():::Skips the current tile and moves on to the next tile:::
AATileGenerator#getAlpha(byte[], int, int):::Gets the alpha coverage values for the current tile:::
AATileGenerator#dispose():::Disposes this tile generator:::
BufferedContext#validateContext(AccelSurface, AccelSurface, Region, Composite, AffineTransform, Paint, SunGraphics2D, int):::Fetches the BufferedContextContext associated with the dst:::context->dstData->getContext->context->validate
BufferedContext#validateContext(AccelSurface):::Fetches the BufferedContextassociated with the surface and disables all context state settings:::validateContext
BufferedContext#validate(AccelSurface, AccelSurface, Region, Composite, AffineTransform, Paint, SunGraphics2D, int):::Validates the given parameters against the current state for this context:::updateClip->updatePaint->if->dstData->isValid->dstData->isSurfaceLost->srcData->isSurfaceLost->invalidateContext->throw->new->InvalidPipeException->if->newRGB->getRGB->if->if->else->else->if->validPaintRef->get->validatedSrcData->validSrcDataRef->get->validatedDstData->validDstDataRef->get->if->if->if->setSurfaces->new->WeakReference<>->new->WeakReference<>->validatedClip->validClipRef->get->if->if->if->validatedClip->isRectangular->clip->isRectangular->clip->getLoX->validatedClip->getLoX->clip->getLoY->validatedClip->getLoY->clip->getHiX->validatedClip->getHiX->clip->getHiY->validatedClip->getHiY->setClip->else->resetClip->new->WeakReference<>->if->validCompRef->get->if->setComposite->else->resetComposite->new->WeakReference<>->txChanged->if->if->resetTransform->else->if->equals->if->new->AffineTransform->else->setTransform->if->if->if->BufferedPaints->setPaint->else->BufferedPaints->resetPaint->new->WeakReference<>->dstData->markDirty
BufferedContext#invalidateContext():::Resets this context's surfaces and all attributes:::resetTransform->resetComposite->resetClip->BufferedPaints->resetPaint->invalidateSurfaces->validCompRef->clear->validClipRef->clear->validPaintRef->clear
BufferedContext#getRenderQueue():::Returns a singleton RenderQueue object used by the rendering pipeline.:::
BufferedContext#saveState():::Saves the state of this context:::
BufferedContext#restoreState():::Restores the native state of this context:::
BufferedMaskBlit#validateContext(SurfaceData, Composite, Region):::Validates the context state using the given destination surface and composite/clip values.:::
BufferedMaskFill#maskFill(int, int, int, int, int, int, int, byte[]):::Called as a separate Runnable when the operation is too large to fit on the RenderQueue:::
BufferedMaskFill#validateContext(SunGraphics2D, Composite, int):::Validates the state in the provided SunGraphics2D object and sets up any special resources for this operation (e.g:::
BufferedPaints#convertSRGBtoLinearRGB(int):::Helper function to convert a color component in sRGB space to linear RGB space:::input->output->if->else->Math->pow->return->Math->round
BufferedRenderPipe#validateContext(SunGraphics2D):::Validates the state in the provided SunGraphics2D object and sets up any special resources for this operation (e.g:::
BufferedTextPipe#drawGlyphList(int, boolean, boolean, boolean, int, float, float, long[], float[]):::Called as a separate Runnable when the operation is too large to fit on the RenderQueue:::
BufferedTextPipe#validateContext(SunGraphics2D, Composite):::Validates the state in the provided SunGraphics2D object.:::
GeneralCompositePipe#renderPathTile(Object, byte[], int, int, int, int, int, int):::GeneralCompositePipe.renderPathTile works with custom composite operator provided by an application:::context->paintCtxt->compCtxt->sg->srcRaster->paintCtxt->getRaster->paintModel->paintCtxt->getColorModel->dstRaster->dstIn->dstOut->sd->sg->getSurfaceData->sd->getRaster->if->dstOut->createWritableChild->else->dstRaster->createChild->dstIn->createCompatibleWritableRaster->compCtxt->compose->if->dstOut->getParent->if->setDataElements->else->cm->sg->getDeviceColorModel->resImg->cm->isAlphaPremultiplied->new->BufferedImage->resData->BufImgSurfaceData->createData->if->blit->Blit->resData->getSurfaceType->sd->getSurfaceType->getFromCache->blit->Blit->else->blit->MaskBlit->resData->getSurfaceType->sd->getSurfaceType->getFromCache->blit->MaskBlit
LoopPipe#getFillSSI(SunGraphics2D):::Return a ShapeSpanIterator instance that normalizes as appropriate for a fill operation as per the settings in the specified SunGraphics2D object:::adjust->return->new->ShapeSpanIterator
ParallelogramPipe#drawParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double, double, double):::Draw a Parallelogram with the indicated line widths assuming a standard BasicStroke with MITER joins:::
PixelToParallelogramConverter#fillOuterParallelogram(SunGraphics2D, double, double, double, double, double, double, double, double, double, double, double, double, double, double):::This utility function handles the case where a drawRectangle operation discovered that the interior hole in the rectangle or parallelogram has been completely filled in by the stroke width:::udx1->udy1->udx2->udy2->if->if->else->if->outrenderer->fillParallelogram
Region#dimAdd(int, int):::Adds the dimension dim to the coordinate start with appropriate clipping:::if->return->if->return->return
Region#clipAdd(int, int):::Adds the delta dv to the value v with appropriate clipping to the bounds of Integer resolution:::newv->if->return
Region#clipRound(double):::Returns the closest int to the argument, with ties rounding to negative infinity:::newv->if->return->if->return->return->Math->ceil
Region#clipScale(int, double):::Multiply the scale factor sv and the value v with appropriate clipping to the bounds of Integer resolution:::if->return->newv->if->return->if->return->return->Math->round
Region#getInstance(Shape, AffineTransform):::Returns a Region object covering the pixels which would be touched by a fill or clip operation on a Graphics implementation on the specified Shape object under the optionally specified AffineTransform object.:::return->getInstance
Region#getInstance(Region, Shape, AffineTransform):::Returns a Region object covering the pixels which would be touched by a fill or clip operation on a Graphics implementation on the specified Shape object under the optionally specified AffineTransform object further restricted by the specified device bounds:::return->getInstance
Region#getInstance(Region, boolean, Shape, AffineTransform):::Returns a Region object covering the pixels which would be touched by a fill or clip operation on a Graphics implementation on the specified Shape object under the optionally specified AffineTransform object further restricted by the specified device bounds:::if->isEmpty->return->box->new->intArr->sr->new->ShapeSpanIterator->try->sr->setOutputArea->sr->s->getPathIterator->appendPath->sr->getPathBox->return->Region->getInstance->catch->finally->sr->dispose
Region#getInstance(int, int, int, int, int[]):::Returns a Region object with a rectangle of interest specified by the indicated rectangular area in lox, loy, hix, hiy and edges array, which is located relative to the rectangular area:::y1->y2->if->return->bands->new->intArr->end->index->for->y->return->new->Region
Region#getInstance(Rectangle):::Returns a Region object with a rectangle of interest specified by the indicated Rectangle object:::return->Region->getInstanceXYWH
Region#getInstanceXYWH(int, int, int, int):::Returns a Region object with a rectangle of interest specified by the indicated rectangular area in x, y, width, height format:::return->Region->dimAdd->dimAdd->getInstanceXYXY
Region#getInstance(int[]):::Returns a Region object with a rectangle of interest specified by the indicated span array:::return->new->Region
Region#getInstanceXYXY(int, int, int, int):::Returns a Region object with a rectangle of interest specified by the indicated rectangular area in lox, loy, hix, hiy format:::return->new->Region
Region#getInstance(int[], SpanIterator):::Returns a Region object with a rectangle of interest specified by the indicated rectangular area in lox, loy, hix, hiy format:::ret->new->Region->ret->appendSpans->return
Region#getScaledRegion(double, double):::Returns a Region object that represents the same list of rectangles as the current Region object, scaled by the specified sx, sy factors.:::if->return->if->return->tlox->clipScale->tloy->clipScale->thix->clipScale->thiy->clipScale->ret->new->Region->bands->if->end->newbands->new->intArr->i->j->ncol->while->y1->y2->clipScale->clipScale->savej->if->while->x1->clipScale->x2->clipScale->if->else->if->else->if->if->else->else->return
Region#getTranslatedRegion(int, int):::Returns a Region object that represents the same list of rectangles as the current Region object, translated by the specified dx, dy translation factors.:::if->return->tlox->tloy->thix->thiy->if->return->getSafeTranslatedRegion->ret->new->Region->bands->if->end->newbands->new->intArr->i->ncol->while->while->return
Region#getIntersection(Rectangle):::Returns a Region object that represents the intersection of this object with the specified Rectangle:::return->getIntersectionXYWH
Region#getIntersectionXYWH(int, int, int, int):::Returns a Region object that represents the intersection of this object with the specified rectangular area:::return->dimAdd->dimAdd->getIntersectionXYXY
Region#getIntersection(Rectangle2D):::Returns a Region object that represents the intersection of this object with the specified Rectangle2D:::if->return->getIntersection->return->r->getMinX->r->getMinY->r->getMaxX->r->getMaxY->getIntersectionXYXY
Region#getIntersectionXYXY(double, double, double, double):::Returns a Region object that represents the intersection of this object with the specified rectangular area:::if->isNaN->isNaN->isNaN->isNaN->return->return->clipRound->clipRound->clipRound->clipRound->getIntersectionXYXY
Region#getIntersectionXYXY(int, int, int, int):::Returns a Region object that represents the intersection of this object with the specified rectangular area:::if->isInsideXYXY->return->ret->new->Region->if->ret->this->getSpanIterator->appendSpans->return
Region#getIntersection(Region):::Returns a Region object that represents the intersection of this object with the specified Region object:::if->this->isInsideQuickCheck->return->if->r->isInsideQuickCheck->return->ret->new->Region->if->ret->isEmpty->ret->filterSpans->return
Region#getUnion(Region):::Returns a Region object that represents the union of this object with the specified Region object:::if->r->isEmpty->r->isInsideQuickCheck->return->if->this->isEmpty->this->isInsideQuickCheck->return->ret->new->Region->ret->filterSpans->return
Region#getDifference(Region):::Returns a Region object that represents the difference of the specified Region object subtracted from this object:::if->r->intersectsQuickCheck->return->if->this->isInsideQuickCheck->return->ret->new->Region->ret->filterSpans->return
Region#getExclusiveOr(Region):::Returns a Region object that represents the exclusive or of this object with the specified Region object:::if->r->isEmpty->return->if->this->isEmpty->return->ret->new->Region->ret->filterSpans->return
Region#getBoundsIntersection(Rectangle):::Returns a Region object that represents the bounds of the intersection of this object with the bounds of the specified Region object:::return->getBoundsIntersectionXYWH
Region#getBoundsIntersectionXYWH(int, int, int, int):::Returns a Region object that represents the bounds of the intersection of this object with the bounds of the specified rectangular area in x, y, width, height format:::return->dimAdd->dimAdd->getBoundsIntersectionXYXY
Region#getBoundsIntersectionXYXY(int, int, int, int):::Returns a Region object that represents the bounds of the intersection of this object with the bounds of the specified rectangular area in lox, loy, hix, hiy format:::if->return->return->new->Region
Region#getBoundsIntersection(Region):::Returns a Region object that represents the intersection of this object with the bounds of the specified Region object:::if->this->encompasses->return->if->r->encompasses->return->return->new->Region
Region#getLoX():::Returns the lowest X coordinate in the Region.:::return
Region#getLoY():::Returns the lowest Y coordinate in the Region.:::return
Region#getHiX():::Returns the highest X coordinate in the Region.:::return
Region#getHiY():::Returns the highest Y coordinate in the Region.:::return
Region#getWidth():::Returns the width of this Region clipped to the range (0 - MAX_INT).:::if->return->w->if->return
Region#getHeight():::Returns the height of this Region clipped to the range (0 - MAX_INT).:::if->return->h->if->return
Region#isEmpty():::Returns true iff this Region encloses no area.:::return
Region#isRectangular():::Returns true iff this Region represents a single simple rectangular area.:::return
Region#contains(int, int):::Returns true iff this Region contains the specified coordinate.:::if->return->if->return->i->while->if->return->if->numspans->else->end->while->if->return->if->return->return->return
Region#isInsideXYWH(int, int, int, int):::Returns true iff this Region lies inside the indicated rectangular area specified in x, y, width, height format with appropriate clipping performed as per the dimAdd method.:::return->dimAdd->dimAdd->isInsideXYXY
Region#isInsideXYXY(int, int, int, int):::Returns true iff this Region lies inside the indicated rectangular area specified in lox, loy, hix, hiy format.:::return
Region#isInsideQuickCheck(Region):::Quickly checks if this Region lies inside the specified Region object:::return
Region#intersectsQuickCheckXYXY(int, int, int, int):::Quickly checks if this Region intersects the specified rectangular area specified in lox, loy, hix, hiy format:::return
Region#intersectsQuickCheck(Region):::Quickly checks if this Region intersects the specified Region object:::return
Region#encompasses(Region):::Quickly checks if this Region surrounds the specified Region object:::return
Region#encompassesXYWH(int, int, int, int):::Quickly checks if this Region surrounds the specified rectangular area specified in x, y, width, height format:::return->dimAdd->dimAdd->encompassesXYXY
Region#encompassesXYXY(int, int, int, int):::Quickly checks if this Region surrounds the specified rectangular area specified in lox, loy, hix, hiy format:::return
Region#getBounds(int[]):::Gets the bbox of the available spans, clipped to the OutputArea.:::
Region#clipBoxToBounds(int[]):::Clips the indicated bbox array to the bounds of this Region.:::if->if->if->if
Region#getIterator():::Gets an iterator object to iterate over the spans in this region.:::return->new->RegionIterator
Region#getSpanIterator():::Gets a span iterator object that iterates over the spans in this region:::return->new->RegionSpanIterator
Region#getSpanIterator(int[]):::Gets a span iterator object that iterates over the spans in this region but clipped to the bounds given in the argument (xlo, ylo, xhi, yhi).:::result->getSpanIterator->result->intersectClipBox->return
Region#filter(SpanIterator):::Returns a SpanIterator that is the argument iterator filtered by this region.:::if->si->intersectClipBox->else->new->RegionClipSpanIterator->return
RegionClipSpanIterator#skipDownTo(int):::This method tells the iterator that it may skip all spans whose Y range is completely above the indicated Y coordinate.:::spanIter->skipDownTo
RegionClipSpanIterator#getNativeIterator():::This method returns a native pointer to a function block that can be used by a native method to perform the same iteration cycle that the above methods provide while avoiding upcalls to the Java object:::return
RegionIterator#createCopy():::Returns a new RegionIterator object representing the same iteration state as this object to allow multiple iteration branches from the current position.:::r->new->RegionIterator->return
RegionIterator#copyStateFrom(RegionIterator):::Copies the iteration state from this RegionIterator object into another RegionIterator object to allow multiple iteration branches from the current position.:::if->throw->new->InternalError
RegionIterator#nextYRange(int[]):::Moves the iteration state to the beginning of the next Y range in the region returning true if one is found and recording the low and high Y coordinates of the range in the array at locations 1 and 3 respectively.:::if->return->return
RegionIterator#nextXBand(int[]):::Moves the iteration state to the beginning of the next X band in the current Y range returning true if one is found and recording the low and high X coordinates of the range in the array at locations 0 and 2 respectively.:::if->return->return
RegionSpanIterator#getPathBox(int[]):::Gets the bbox of the available region spans.:::
RegionSpanIterator#intersectClipBox(int, int, int, int):::Intersect the box used for clipping the output spans with the given box.:::if->if->if->if
RegionSpanIterator#nextSpan(int[]):::Fetches the next span that needs to be operated on:::if->return->if->getPathBox->return->curlox->curhix->curloy->curhiy->while->if->ri->nextXBand->if->ri->nextYRange->return->if->if->if->return->continue->if->if->if->break->return
RegionSpanIterator#skipDownTo(int):::This method tells the iterator that it may skip all spans whose Y range is completely above the indicated Y coordinate.:::
RegionSpanIterator#getNativeIterator():::This method returns a native pointer to a function block that can be used by a native method to perform the same iteration cycle that the above methods provide while avoiding upcalls to the Java object:::return
RenderBuffer#allocate(int):::Allocates a fresh buffer using the machine endianness.:::return->new->RenderBuffer
RenderBuffer#getAddress():::Returns the base address of the underlying memory buffer.:::return
RenderingEngine#getInstance():::Returns an instance of RenderingEngine as determined by the installation environment and runtime flags:::if->return->gpa->new->GetPropertyAction->reClass->AccessController->doPrivileged->if->try->cls->Class->forName->cls->getConstructor->newInstance->catch->finally->if->marlinREClass->try->cls->Class->forName->cls->getConstructor->newInstance->catch->finally->if->throw->new->InternalError->new->GetPropertyAction->verbose->AccessController->doPrivileged->if->verbose->startsWith->println->new->GetPropertyAction->reTrace->AccessController->doPrivileged->if->new->Tracer->return
RenderingEngine#createStrokedShape(Shape, float, int, int, float, float[], float):::Create a widened path as specified by the parameters:::
RenderingEngine#strokeTo(Shape, AffineTransform, BasicStroke, boolean, boolean, boolean, PathConsumer2D):::Sends the geometry for a widened path as specified by the parameters to the specified consumer:::
RenderingEngine#getAATileGenerator(Shape, AffineTransform, Region, BasicStroke, boolean, boolean, int[]):::Construct an antialiased tile generator for the given shape with the given rendering attributes and store the bounds of the tile iteration in the bbox parameter:::
RenderingEngine#getAATileGenerator(double, double, double, double, double, double, double, double, Region, int[]):::Construct an antialiased tile generator for the given parallelogram store the bounds of the tile iteration in the bbox parameter:::
RenderingEngine#getMinimumAAPenSize():::Returns the minimum pen width that the antialiasing rasterizer can represent without dropouts occurring.:::
RenderingEngine#feedConsumer(PathIterator, PathConsumer2D):::Utility method to feed a PathConsumer2D object from a given PathIterator:::coords->new->floatArr->while->pi->isDone->switch->pi->currentSegment->consumer->moveTo->break->consumer->lineTo->break->consumer->quadTo->break->consumer->curveTo->break->consumer->closePath->break->pi->next
RenderQueue#lock():::Locks the queue for read/write access.:::SunToolkit->awtLock
RenderQueue#tryLock():::Attempts to lock the queue:::return->SunToolkit->awtTryLock
RenderQueue#unlock():::Unlocks the queue.:::SunToolkit->awtUnlock
RenderQueue#addReference(Object):::Adds the given Object to the set of hard references, which will prevent that Object from being disposed until the queue has been flushed completely:::refSet->add
RenderQueue#getBuffer():::Returns the encapsulated RenderBuffer object.:::return
RenderQueue#ensureCapacity(int):::Ensures that there will be enough room on the underlying buffer for the following operation:::if->buf->remaining->flushNow
RenderQueue#ensureCapacityAndAlignment(int, int):::Convenience method that is equivalent to calling ensureCapacity() followed by ensureAlignment():::ensureCapacity->ensureAlignment
RenderQueue#ensureAlignment(int):::Inserts a 4-byte NOOP token when necessary to ensure that all 8-byte parameters for the following operation are added to the underlying buffer with an 8-byte memory alignment.:::first8ByteValuePosition->buf->position->if->buf->putInt
RenderQueue#flushNow():::Immediately processes each operation currently pending on the buffer:::
RenderQueue#flushAndInvokeNow(Runnable):::Immediately processes each operation currently pending on the buffer, and then invokes the provided task:::
RenderQueue#flushNow(int):::Updates the current position of the underlying buffer, and then flushes the queue immediately:::buf->position->flushNow
ShapeSpanIterator#skipDownTo(int):::This method tells the iterator that it may skip all spans whose Y range is completely above the indicated Y coordinate.:::
ShapeSpanIterator#getNativeIterator():::This method returns a native pointer to a function block that can be used by a native method to perform the same iteration cycle that the above methods provide while avoiding upcalls to the Java object:::
SpanIterator#getPathBox(int[]):::This method returns the bounding box of the spans that the iterator will be returning:::
SpanIterator#intersectClipBox(int, int, int, int):::This method constrains the spans returned by nextSpan() to the rectangle whose bounds are given.:::
SpanIterator#nextSpan(int[]):::This method returns the next span in the shape being iterated:::
SpanIterator#skipDownTo(int):::This method tells the iterator that it may skip all spans whose Y range is completely above the indicated Y coordinate:::
SpanIterator#getNativeIterator():::This method returns a native pointer to a function block that can be used by a native method to perform the same iteration cycle that the above methods provide while avoiding upcalls to the Java object:::

Disassembler#decode(InstructionVisitor, CodeBlob)::: disassembler decode:::blob->codeBegin->blob->codeEnd->decode
Disassembler#decode(InstructionVisitor, CodeBlob, Address, Address)::: disassembler decode:::codeSize->end->minus->startPc->VM->getAddressValue->code->new->byteArr->for->i->dis->new->Disassembler->dis->decode
Disassembler#load_library(String, String)::: disassembler load_library:::
Disassembler#decode(InstructionVisitor, long, byte[], String, long)::: disassembler decode:::
Disassembler#decode(InstructionVisitor)::: disassembler decode:::visitor->prologue->decode->visitor->epilogue
Disassembler#match(String, String)::: disassembler match:::if->event->startsWith->return->taglen->tag->length->if->event->length->return->delim->event->charAt->return
Disassembler#handleEvent(InstructionVisitor, String, long)::: disassembler handle event:::if->match->try->visitor->beginInstruction->catch->e->printStackTrace->finally->else->if->match->try->visitor->endInstruction->catch->e->printStackTrace->finally->else->if->match->if->visitor->printAddress->return->else->if->match->else->return
Disassembler#rawPrint(InstructionVisitor, String)::: disassembler raw print:::visitor->print
DummySymbolFinder#getSymbolFor(long)::: dummy symbol finder get symbol for:::return->Long->toHexString
InstructionVisitor#prologue()::: instruction visitor prologue:::
InstructionVisitor#beginInstruction(long)::: instruction visitor begin instruction:::
InstructionVisitor#printAddress(long)::: instruction visitor print address:::
InstructionVisitor#print(String)::: instruction visitor print:::
InstructionVisitor#endInstruction(long)::: instruction visitor end instruction:::
InstructionVisitor#epilogue()::: instruction visitor epilogue:::
Operand#isAddress()::: operand is address:::return
Operand#isImmediate()::: operand is immediate:::return
Operand#isRegister()::: operand is register:::return
Register#getNumberOfRegisters():::Must be overridden by subclass to indicate number of available       registers on this platform:::
Register#isValid()::: register is valid:::return->getNumberOfRegisters
Register#getNumber()::: register get number:::return
Register#equals(Object)::: register equals:::if->return->if->getClass->x->getClass->equals->return->reg->return->reg->getNumber->getNumber
Register#hashCode()::: register hash code:::return
Register#isRegister()::: register is register:::return
Register#isStackPointer()::: register is stack pointer:::
Register#isFramePointer()::: register is frame pointer:::
Register#isFloat()::: register is float:::
SymbolFinder#getSymbolFor(long)::: symbol finder get symbol for:::

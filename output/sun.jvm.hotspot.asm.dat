sun.jvm.hotspot.asm.Disassembler#decode(InstructionVisitor, CodeBlob)->void::: disassembler decode
sun.jvm.hotspot.asm.Disassembler#decode(InstructionVisitor, CodeBlob, Address, Address)->void::: disassembler decode
sun.jvm.hotspot.asm.DummySymbolFinder#getSymbolFor(long)->String::: dummy symbol finder get symbol for
sun.jvm.hotspot.asm.InstructionVisitor#prologue()->void::: instruction visitor prologue
sun.jvm.hotspot.asm.InstructionVisitor#beginInstruction(long)->void::: instruction visitor begin instruction
sun.jvm.hotspot.asm.InstructionVisitor#printAddress(long)->void::: instruction visitor print address
sun.jvm.hotspot.asm.InstructionVisitor#print(String)->void::: instruction visitor print
sun.jvm.hotspot.asm.InstructionVisitor#endInstruction(long)->void::: instruction visitor end instruction
sun.jvm.hotspot.asm.InstructionVisitor#epilogue()->void::: instruction visitor epilogue
sun.jvm.hotspot.asm.Operand#isAddress()->boolean::: operand is address
sun.jvm.hotspot.asm.Operand#isImmediate()->boolean::: operand is immediate
sun.jvm.hotspot.asm.Operand#isRegister()->boolean::: operand is register
sun.jvm.hotspot.asm.Register#getNumberOfRegisters()->int:::Must be overridden by subclass to indicate number of available       registers on this platform
sun.jvm.hotspot.asm.Register#isValid()->boolean::: register is valid
sun.jvm.hotspot.asm.Register#getNumber()->int::: register get number
sun.jvm.hotspot.asm.Register#equals(Object)->boolean::: register equals
sun.jvm.hotspot.asm.Register#hashCode()->int::: register hash code
sun.jvm.hotspot.asm.Register#isRegister()->boolean::: register is register
sun.jvm.hotspot.asm.Register#isStackPointer()->boolean::: register is stack pointer
sun.jvm.hotspot.asm.Register#isFramePointer()->boolean::: register is frame pointer
sun.jvm.hotspot.asm.Register#isFloat()->boolean::: register is float
sun.jvm.hotspot.asm.SymbolFinder#getSymbolFor(long)->String::: symbol finder get symbol for

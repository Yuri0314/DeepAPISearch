sun.rmi.transport.Channel#newConnection()->Connection:::Generates a new connection to the endpoint of the address space for which this is a channel.
sun.rmi.transport.Channel#getEndpoint()->Endpoint:::Returns the endpoint of the address space for which this is a channel.
sun.rmi.transport.Channel#free(Connection, boolean)->void:::Free the connection generated by this channel.
sun.rmi.transport.Connection#getInputStream()->InputStream:::Gets the input stream for this connection.
sun.rmi.transport.Connection#releaseInputStream()->void::: connection release input stream
sun.rmi.transport.Connection#getOutputStream()->OutputStream:::Gets the output stream for this connection
sun.rmi.transport.Connection#releaseOutputStream()->void::: connection release output stream
sun.rmi.transport.Connection#isReusable()->boolean:::Return true if channel can be used for multiple operations.
sun.rmi.transport.Connection#close()->void:::Close connection.
sun.rmi.transport.Connection#getChannel()->Channel:::Returns the channel for this connection.
sun.rmi.transport.ConnectionInputStream#readID()->void::: connection input stream read d
sun.rmi.transport.ConnectionInputStream#saveRef(LiveRef)->void:::Save reference in order to send "dirty" call after all args/returns have been unmarshaled
sun.rmi.transport.ConnectionInputStream#discardRefs()->void:::Discard the saved incoming refs so there is nothing to register when registerRefs is called.
sun.rmi.transport.ConnectionInputStream#registerRefs()->void:::Add references to DGC table (and possibly send dirty call)
sun.rmi.transport.ConnectionInputStream#setAckNeeded()->void:::Indicate that an ack is required to the distributed collector.
sun.rmi.transport.ConnectionInputStream#done(Connection)->void:::Done with input stream for remote call
sun.rmi.transport.ConnectionOutputStream#writeID()->void::: connection output stream write d
sun.rmi.transport.ConnectionOutputStream#isResultStream()->boolean:::Returns true if this output stream is used to marshal return results; otherwise returns false.
sun.rmi.transport.ConnectionOutputStream#saveObject(Object)->void:::Saves a reference to the specified object in this stream's DGCAckHandler.
sun.rmi.transport.ConnectionOutputStream#getDGCAckHandler()->DGCAckHandler:::Returns this stream's DGCAckHandler, or null if it doesn't have one (saveObject was not invoked)
sun.rmi.transport.ConnectionOutputStream#done()->void::: connection output stream done
sun.rmi.transport.DGCAckHandler#add(Object)->void:::Adds the specified reference to this DGCAckHandler.
sun.rmi.transport.DGCAckHandler#startTimer()->void:::Starts the timer for this DGCAckHandler
sun.rmi.transport.DGCAckHandler#release()->void:::Releases the references held by this DGCAckHandler.
sun.rmi.transport.DGCAckHandler#received(UID)->void:::Causes the DGCAckHandler associated with the specified UID to release its references.
sun.rmi.transport.DGCClient#registerRefs(Endpoint, List)->void:::Register the LiveRef instances in the supplied list to participate in distributed garbage collection
sun.rmi.transport.DGCImpl#getDGCImpl()->DGCImpl:::Return the remote implementation of the DGC interface for this VM.
sun.rmi.transport.DGCImpl#dirty(ObjID[], long, Lease)->Lease:::The dirty call adds the VMID "vmid" to the set of clients that hold references to the object associated with the ObjID id
sun.rmi.transport.DGCImpl#clean(ObjID[], long, VMID, boolean)->void:::The clean call removes the VMID from the set of clients that hold references to the object associated with the LiveRef ref
sun.rmi.transport.DGCImpl#registerTarget(VMID, Target)->void:::Register interest in receiving a callback when this VMID becomes inaccessible.
sun.rmi.transport.DGCImpl#unregisterTarget(VMID, Target)->void:::Remove notification request.
sun.rmi.transport.DGCImpl_Skel#getOperations()->java.rmi.server.Operation[]::: impl_ skel get operations
sun.rmi.transport.DGCImpl_Skel#dispatch(java.rmi.Remote, java.rmi.server.RemoteCall, int, long)->void::: impl_ skel dispatch
sun.rmi.transport.DGCImpl_Stub#clean(java.rmi.server.ObjID[], long, java.rmi.dgc.VMID, boolean)->void::: impl_ stub clean
sun.rmi.transport.DGCImpl_Stub#dirty(java.rmi.server.ObjID[], long, java.rmi.dgc.Lease)->java.rmi.dgc.Lease::: impl_ stub dirty
sun.rmi.transport.Endpoint#getChannel()->Channel:::Return a channel that generates connections to the remote endpoint.
sun.rmi.transport.Endpoint#exportObject(Target)->void:::Export the object so that it can accept incoming calls at the endpoint.
sun.rmi.transport.Endpoint#getInboundTransport()->Transport:::Returns the transport for incoming connections to this endpoint.
sun.rmi.transport.Endpoint#getOutboundTransport()->Transport:::Returns transport for making connections to remote endpoints.
sun.rmi.transport.GC#maxObjectInspectionAge()->long:::Returns the maximum object-inspection age, which is the number of real-time milliseconds that have elapsed since the least-recently-inspected heap object was last inspected by the garbage collector
sun.rmi.transport.GC.LatencyRequest#cancel()->void:::Cancels this latency request.
sun.rmi.transport.GC.LatencyRequest#compareTo(LatencyRequest)->int::: latency request compare to
sun.rmi.transport.GC.LatencyRequest#toString()->String::: latency request to string
sun.rmi.transport.GC#requestLatency(long)->LatencyRequest:::Makes a new request for a garbage-collection latency of the given number of real-time milliseconds
sun.rmi.transport.GC#currentLatencyTarget()->long:::Returns the current smallest garbage-collection latency request, or zero if there are no active requests.
sun.rmi.transport.LiveRef#clone()->Object:::Return a shallow copy of this ref.
sun.rmi.transport.LiveRef#getPort()->int:::Return the port number associated with this ref.
sun.rmi.transport.LiveRef#getClientSocketFactory()->RMIClientSocketFactory:::Return the client socket factory associated with this ref
sun.rmi.transport.LiveRef#getServerSocketFactory()->RMIServerSocketFactory:::Return the server socket factory associated with this ref.
sun.rmi.transport.LiveRef#exportObject(Target)->void:::Export the object to accept incoming calls.
sun.rmi.transport.LiveRef#getChannel()->Channel::: live ref get channel
sun.rmi.transport.LiveRef#getObjID()->ObjID::: live ref get obj d
sun.rmi.transport.LiveRef#getEndpoint()->Endpoint::: live ref get endpoint
sun.rmi.transport.LiveRef#toString()->String::: live ref to string
sun.rmi.transport.LiveRef#hashCode()->int::: live ref hash code
sun.rmi.transport.LiveRef#equals(Object)->boolean::: live ref equals
sun.rmi.transport.LiveRef#remoteEquals(Object)->boolean::: live ref remote equals
sun.rmi.transport.LiveRef#write(ObjectOutput, boolean)->void::: live ref write
sun.rmi.transport.LiveRef#read(ObjectInput, boolean)->LiveRef::: live ref read
sun.rmi.transport.ObjectEndpoint#equals(Object)->boolean:::Compares the specified object with this object endpoint for equality
sun.rmi.transport.ObjectEndpoint#hashCode()->int:::Returns the hash code value for this object endpoint.
sun.rmi.transport.ObjectEndpoint#toString()->String:::Returns a string representation for this object endpoint.
sun.rmi.transport.ObjectTable#getTarget(ObjectEndpoint)->Target:::Returns the target associated with the object id.
sun.rmi.transport.ObjectTable#getTarget(Remote)->Target:::Returns the target associated with the remote object
sun.rmi.transport.ObjectTable#getStub(Remote)->Remote:::Returns the stub for the remote object obj passed as a parameter
sun.rmi.transport.ObjectTable#unexportObject(Remote, boolean)->boolean:::Remove the remote object, obj, from the RMI runtime
sun.rmi.transport.ObjectTable#putTarget(Target)->void:::Add target to object table
sun.rmi.transport.ObjectTable#referenced(ObjID, long, VMID)->void:::Process client VM signalling reference for given ObjID: forward to corresponding Target entry
sun.rmi.transport.ObjectTable#unreferenced(ObjID, long, VMID, boolean)->void:::Process client VM dropping reference for given ObjID: forward to corresponding Target entry
sun.rmi.transport.ObjectTable#incrementKeepAliveCount()->void:::Increments the "keep-alive count"
sun.rmi.transport.ObjectTable#decrementKeepAliveCount()->void:::Decrements the "keep-alive count"
sun.rmi.transport.StreamRemoteCall#getConnection()->Connection:::Return the connection associated with this call.
sun.rmi.transport.StreamRemoteCall#getOutputStream()->ObjectOutput:::Return the output stream the stub/skeleton should put arguments/results into.
sun.rmi.transport.StreamRemoteCall#releaseOutputStream()->void:::Release the outputStream  Currently, will not complain if the output stream is released more than once.
sun.rmi.transport.StreamRemoteCall#setObjectInputFilter(ObjectInputFilter)->void::: stream remote call set object input filter
sun.rmi.transport.StreamRemoteCall#getInputStream()->ObjectInput:::Get the InputStream the stub/skeleton should get results/arguments from.
sun.rmi.transport.StreamRemoteCall#releaseInputStream()->void:::Release the input stream, this would allow some transports to release the channel early.
sun.rmi.transport.StreamRemoteCall#discardPendingRefs()->void:::Discard any post-processing of refs the InputStream.
sun.rmi.transport.StreamRemoteCall#getResultStream(boolean)->ObjectOutput:::Returns an output stream (may put out header information relating to the success of the call).
sun.rmi.transport.StreamRemoteCall#executeCall()->void:::Do whatever it takes to execute the call.
sun.rmi.transport.StreamRemoteCall#exceptionReceivedFromServer(Exception)->void:::Routine that causes the stack traces of remote exceptions to be filled in with the current stack trace on the client
sun.rmi.transport.StreamRemoteCall#getServerException()->Exception::: stream remote call get server exception
sun.rmi.transport.StreamRemoteCall#done()->void::: stream remote call done
sun.rmi.transport.Target#getStub()->Remote:::Get the stub (proxy) object for this target
sun.rmi.transport.Target#getObjectEndpoint()->ObjectEndpoint:::Returns the object endpoint for the target.
sun.rmi.transport.Target#getWeakImpl()->WeakRef:::Get the weak reference for the Impl of this target.
sun.rmi.transport.Target#getDispatcher()->Dispatcher:::Returns the dispatcher for this remote object target.
sun.rmi.transport.Target#getAccessControlContext()->AccessControlContext::: target get access control context
sun.rmi.transport.Target#getContextClassLoader()->ClassLoader::: target get context class loader
sun.rmi.transport.Target#getImpl()->Remote:::Get the impl for this target
sun.rmi.transport.Target#isPermanent()->boolean:::Returns true if the target is permanent.
sun.rmi.transport.Target#pinImpl()->void:::Pin impl in target
sun.rmi.transport.Target#unpinImpl()->void:::Unpin impl in target
sun.rmi.transport.Target#setExportedTransport(Transport)->void:::Enable the transport through which remote calls to this target are allowed to be set if it has not already been set.
sun.rmi.transport.Target#referenced(long, VMID)->void:::Add an endpoint to the remembered set
sun.rmi.transport.Target#unreferenced(long, VMID, boolean)->void:::Remove endpoint from remembered set
sun.rmi.transport.Target#unexport(boolean)->boolean:::Mark this target as not accepting new calls if any of the following conditions exist: a) the force parameter is true, b) the target's call count is zero, or c) the object is already not accepting calls
sun.rmi.transport.Target#markRemoved()->void:::Mark this target as having been removed from the object table.
sun.rmi.transport.Target#incrementCallCount()->void:::Increment call count.
sun.rmi.transport.Target#decrementCallCount()->void:::Decrement call count.
sun.rmi.transport.Target#isEmpty()->boolean:::Returns true if remembered set is empty; otherwise returns false
sun.rmi.transport.Target#vmidDead(VMID)->void:::This method is called if the address space associated with the vmid dies
sun.rmi.transport.SequenceEntry#retain(long)->void::: sequence entry retain
sun.rmi.transport.SequenceEntry#update(long)->void::: sequence entry update
sun.rmi.transport.Transport#getChannel(Endpoint)->Channel:::Returns a Channel that generates connections to the endpoint ep
sun.rmi.transport.Transport#free(Endpoint)->void:::Removes the Channel that generates connections to the endpoint ep.
sun.rmi.transport.Transport#exportObject(Target)->void:::Export the object so that it can accept incoming calls.
sun.rmi.transport.Transport#targetUnexported()->void:::Invoked when an object that was exported on this transport has become unexported, either by being garbage collected or by being explicitly unexported.
sun.rmi.transport.Transport#currentTransport()->Transport:::Returns the current transport if a call is being serviced, otherwise returns null.
sun.rmi.transport.Transport#checkAcceptPermission(AccessControlContext)->void:::Verify that the current access control context has permission to accept the connection being dispatched by the current thread
sun.rmi.transport.Transport#serviceCall(RemoteCall)->boolean:::Service an incoming remote call
sun.rmi.transport.WeakRef#pin()->void:::Pin the contained reference (make this a strong reference).
sun.rmi.transport.WeakRef#unpin()->void:::Unpin the contained reference (make this a weak reference).
sun.rmi.transport.WeakRef#hashCode()->int:::Always return the "identity" hash code of the original referent.
sun.rmi.transport.WeakRef#equals(Object)->boolean:::Return true if "obj" is this identical WeakRef object, or, if the contained reference has not been cleared, if "obj" is another WeakRef object with the identical non-null referent

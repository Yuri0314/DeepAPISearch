AtomicContext#c_parseComponent(String, Continuation):::Parse 'inputName' into two parts: head: the first component in this name tail: the rest of the unused name:::
AtomicContext#a_resolveIntermediate_nns(String, Continuation):::Resolves the nns for 'name' when the named context is acting as an intermediate context:::try->obj->a_lookup->if->getClass->isInstance->cont->setContinueNNS->return->else->if->addr->new->RefAddr->ref->new->Reference->resName->new->CompositeName->resName->add->resName->add->cont->setContinue->return->else->return->catch->e->appendRemainingComponent->throw->finally
AtomicContext#a_processJunction_nns(String, Continuation):::This function is used when implementing a naming system that supports junctions:::if->name->equals->e->new->NameNotFoundException->cont->setErrorNNS->throw->cont->fillInException->try->target->a_lookup->if->cont->isContinue->cont->appendRemainingComponent->else->cont->setContinueNNS->catch->e->appendRemainingComponent->throw->finally
AtomicContext#a_processJunction_nns(Continuation):::This function is used when implementing a naming system that supports junctions:::addr->new->RefAddr->ref->new->Reference->cont->setContinue
AtomicContext#resolve_to_context(Name, Continuation):::Resolve to context named by 'name':::target->name->toString->ht->c_parseComponent->tail->ht->getTail->head->ht->getHead->if->println->if->e->new->InvalidNameException->throw->cont->fillInException->if->isEmpty->try->headCtx->a_lookup->if->cont->setContinue->else->if->cont->isContinue->cont->appendRemainingComponent->catch->e->appendRemainingComponent->throw->finally->else->cont->setSuccess->return->return
AtomicContext#resolve_to_penultimate_context(Name, Continuation):::Resolves to penultimate context named by 'name':::target->name->toString->if->println->ht->c_parseComponent->tail->ht->getTail->head->ht->getHead->if->e->new->InvalidNameException->throw->cont->fillInException->if->isEmpty->try->headCtx->a_lookup->if->cont->setContinue->else->if->cont->isContinue->cont->appendRemainingComponent->catch->e->appendRemainingComponent->throw->finally->else->cont->setSuccess->return->return
AtomicContext#resolve_to_penultimate_context_nns(Name, Continuation):::This function is similar to resolve_to_penultimate_context() except it should only be called by the nns() functions:::try->if->name->toString->println->answer->resolve_to_penultimate_context->if->cont->isContinue->cont->appendRemainingComponent->return->catch->e->appendRemainingComponent->throw->finally
AtomicContext#resolve_to_nns_and_continue(Name, Continuation):::Resolves to nns associated with 'name' and set Continuation to the result.:::if->name->toString->println->if->resolve_to_penultimate_context_nns->nns->name->toString->a_lookup_nns->if->cont->setContinue
ComponentContext#p_parseComponent(Name, Continuation):::Determines which of the first components of 'name' belong to this naming system:::separator->if->name->isEmpty->name->get->equals->else->head->tail->if->name->getPrefix->name->getSuffix->else->new->CompositeName->name->toString->add->if->println->println->println->return->new->HeadTail
ComponentContext#c_resolveIntermediate_nns(Name, Continuation):::Resolves the nns for 'name' when the named context is acting as an intermediate context:::try->obj->c_lookup->if->getClass->isInstance->cont->setContinueNNS->return->else->if->addr->new->RefAddr->ref->new->Reference->resName->name->clone->resName->add->cont->setContinue->return->else->return->catch->e->appendRemainingComponent->throw->finally
ComponentContext#c_processJunction_nns(Name, Continuation):::Locates the nns using the default policy:::if->name->isEmpty->addr->new->RefAddr->ref->new->Reference->cont->setContinue->return->try->target->c_lookup->if->cont->isContinue->cont->appendRemainingComponent->else->cont->setContinueNNS->catch->e->appendRemainingComponent->throw->finally
Continuation#isContinue():::Determines whether this Continuation contains data that should be used to continue the operation.:::return
Continuation#setSuccess():::Sets this Continuation to indicate successful completion:::
Continuation#fillInException(NamingException):::Fills in an exception's fields using data from this Continuation:::e->setRemainingName->e->setResolvedObj->if->starter->isEmpty->e->setResolvedName->else->if->e->setResolvedName->else->e->starter->starter->size->remainingName->size->getPrefix->setResolvedName->if->cpe->env->new->Hashtable<>->environment->clone->cpe->setEnvironment->cpe->setAltNameCtx->cpe->setAltName->return
Continuation#setErrorNNS(Object, Name):::Sets this Continuation to indicated that an error has occurred, and that the remaining name is rename + "/":::nm->remain->clone->try->nm->add->catch->finally->setErrorAux
Continuation#setErrorNNS(Object, String):::Form that accepts a String name instead of a Name name.:::rname->new->CompositeName->try->if->remain->equals->rname->add->rname->add->catch->finally->setErrorAux
Continuation#setError(Object, Name):::Sets this Continuation to indicated that an error has occurred and supply resolved information:::if->remain->clone->else->setErrorAux
Continuation#setError(Object, String):::Form that accepts a String name instead of a Name name.:::rname->new->CompositeName->if->remain->equals->try->rname->add->catch->finally->setErrorAux
Continuation#setContinueNNS(Object, Name, Context):::Sets this Continuation with the supplied data, and set remaining name to be "/":::rname->new->CompositeName->setContinue
Continuation#setContinueNNS(Object, String, Context):::Overloaded form that accesses String names.:::relname->new->CompositeName->try->relname->add->catch->finally->setContinue
Continuation#setContinue(Object, Name, Context):::Sets this Continuation with the supplied data, and set remaining name to be the empty name:::clone->setContinueAux
Continuation#setContinue(Object, Name, Context, Name):::Sets this Continuation with the supplied data:::if->remain->clone->else->new->CompositeName->setContinueAux
Continuation#setContinue(Object, String, Context, String):::String overload.:::relname->new->CompositeName->if->relResName->equals->try->relname->add->catch->finally->rname->new->CompositeName->if->remain->equals->try->rname->add->catch->finally->setContinueAux
Continuation#setContinue(Object, Object):::%%% This method is kept only for backward compatibility:::setContinue
PartialCompositeContext#p_getEnvironment():::A cheap way of getting the environment:::return->getEnvironment
PartialCompositeContext#composeName(Name, Name):::This default implementation simply concatenates the two names:::res->prefix->clone->if->return->res->addAll->elide->p_getEnvironment->get->if->elide->equalsIgnoreCase->return->len->prefix->size->if->allEmpty->allEmpty->if->res->get->equals->res->remove->else->if->res->get->equals->res->remove->return
PartialCompositeContext#allEmpty(Name):::Tests whether a name contains a nonempty component.:::enum_->name->getAll->while->enum_->hasMoreElements->if->enum_->nextElement->isEmpty->return->return
PartialCompositeContext#getPCContext(Continuation):::Retrieves a PartialCompositeContext for the resolved object in cont:::obj->cont->getResolvedObj->pctx->if->return->else->throw->cont->new->CannotProceedException->fillInException
PartialCompositeDirContext#getPCDirContext(Continuation):::Retrieves a PartialCompositeDirContext for the resolved object in cont:::pctx->PartialCompositeContext->getPCContext->if->throw->cont->new->NotContextException->fillInException->return

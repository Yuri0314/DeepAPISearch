AbstractCharsetProvider#put(Map, K, V)::: abstract charset provider put:::if->m->containsKey->m->put
AbstractCharsetProvider#remove(Map, K)::: abstract charset provider remove:::x->m->remove
AbstractCharsetProvider#charset(String, String, String[])::: abstract charset provider charset:::synchronized->put->for->i->put->cache->clear
AbstractCharsetProvider#deleteCharset(String, String[])::: abstract charset provider delete charset:::synchronized->remove->for->i->remove->cache->clear
AbstractCharsetProvider#hasCharset(String)::: abstract charset provider has charset:::synchronized->return->classMap->containsKey
AbstractCharsetProvider#init()::: abstract charset provider init:::
AbstractCharsetProvider#canonicalize(String)::: abstract charset provider canonicalize:::acn->aliasMap->get->return
AbstractCharsetProvider#lookup(String)::: abstract charset provider lookup:::sr->cache->get->if->cs->sr->get->if->return->cln->classMap->get->if->return->try->c->Class->this->getClass->getClassLoader->forName->cs->c->newInstance->cache->new->SoftReference<Charset>->put->return->catch->return->return->return->finally
AbstractCharsetProvider#charsetForName(String)::: abstract charset provider charset for name:::synchronized->init->return->canonicalize->lookup
AbstractCharsetProvider#charsets()::: abstract charset provider charsets:::ks->synchronized->init->classMap->keySet->new->ArrayList<>->return->new->Iterator<Charset>
AbstractCharsetProvider#aliases(String)::: abstract charset provider aliases:::synchronized->init->return->aliasNameMap->get
Big5#historicalName()::: big5 historical name:::return
Big5#contains(Charset)::: big5 contains:::return->cs->name->equals
Big5#newDecoder()::: big5 new decoder:::initb2c->return->new->DoubleByte.Decoder
Big5#newEncoder()::: big5 new encoder:::initc2b->return->new->DoubleByte.Encoder
Big5#initb2c()::: big5 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
Big5#initc2b()::: big5 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
Big5_HKSCS#historicalName()::: big5_ s historical name:::return
Big5_HKSCS#contains(Charset)::: big5_ s contains:::return->cs->name->equals
Big5_HKSCS#newDecoder()::: big5_ s new decoder:::return->new->Decoder
Big5_HKSCS#newEncoder()::: big5_ s new encoder:::return->new->Encoder
Big5_HKSCS_2001#contains(Charset)::: big5_ s_2001 contains:::return->cs->name->equals
Big5_HKSCS_2001#newDecoder()::: big5_ s_2001 new decoder:::return->new->Decoder
Big5_HKSCS_2001#newEncoder()::: big5_ s_2001 new encoder:::return->new->Encoder
Big5_Solaris#historicalName()::: big5_ solaris historical name:::return
Big5_Solaris#contains(Charset)::: big5_ solaris contains:::return->cs->name->equals
Big5_Solaris#newDecoder()::: big5_ solaris new decoder:::initb2c->return->new->DoubleByte.Decoder
Big5_Solaris#newEncoder()::: big5_ solaris new encoder:::initc2b->return->new->DoubleByte.Encoder
Big5_Solaris#initb2c()::: big5_ solaris initb2c:::if->return->synchronized->if->return->Big5->initb2c->clone->sol->new->intArr->if->new->charArr->Arrays->fill->for->i
Big5_Solaris#initc2b()::: big5_ solaris initc2b:::if->return->synchronized->if->return->Big5->initc2b->clone->clone->sol->new->intArr->for->i
EUC_CN#historicalName()::: c_ n historical name:::return
EUC_CN#contains(Charset)::: c_ n contains:::return->cs->name->equals
EUC_CN#newDecoder()::: c_ n new decoder:::initb2c->return->new->DoubleByte.Decoder
EUC_CN#newEncoder()::: c_ n new encoder:::initc2b->return->new->DoubleByte.Encoder
EUC_CN#initb2c()::: c_ n initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
EUC_CN#initc2b()::: c_ n initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
EUC_JP#historicalName()::: c_ p historical name:::return
EUC_JP#contains(Charset)::: c_ p contains:::return->cs->name->equals
EUC_JP#newDecoder()::: c_ p new decoder:::return->new->Decoder
EUC_JP#newEncoder()::: c_ p new encoder:::return->new->Encoder
EUC_JP.Decoder#decodeDouble(int, int)::: decoder decode double:::if->if->return->return->dec0201->decode->return->dec0208->decodeDouble
EUC_JP.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->b1->b2->inputSize->outputChar->try->while->if->else->if->if->return->if->return->CoderResult->unmappableForLength->dec0212->decodeDouble->else->if->return->decodeDouble->if->return->CoderResult->unmappableForLength->if->return->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
EUC_JP.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->b1->b2->inputSize->outputChar->try->while->src->hasRemaining->src->get->if->else->if->if->src->remaining->return->src->get->src->get->if->return->CoderResult->unmappableForLength->dec0212->decodeDouble->else->if->src->remaining->return->src->get->decodeDouble->if->return->CoderResult->unmappableForLength->if->dst->remaining->return->dst->put->return->catch->finally->src->position
EUC_JP.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
EUC_JP.Decoder#implReset()::: decoder impl reset:::super->implReset
EUC_JP.Decoder#implFlush(CharBuffer)::: decoder impl flush:::return->super->implFlush
EUC_JP.Encoder#canEncode(char)::: encoder can encode:::encodedBytes->new->byteArr->return->encodeSingle->encodeDouble
EUC_JP.Encoder#encodeSingle(char, byte[])::: encoder encode single:::b->enc0201->encode->if->return->if->return->return
EUC_JP.Encoder#encodeDouble(char)::: encoder encode double:::b->enc0208->encodeChar->if->return->if->enc0212->encodeChar->if->return
EUC_JP.Encoder#encodeArrayLoop(CharBuffer, ByteBuffer)::: encoder encode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->outputSize->outputByte->inputSize->tmpBuf->new->byteArr->try->while->c->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->return->sgp->unmappableResult->encodeSingle->if->ncode->encodeDouble->if->if->else->else->return->CoderResult->unmappableForLength->if->return->for->i->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
EUC_JP.Encoder#encodeBufferLoop(CharBuffer, ByteBuffer)::: encoder encode buffer loop:::outputSize->outputByte->inputSize->tmpBuf->new->byteArr->mark->src->position->try->while->src->hasRemaining->c->src->get->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->return->sgp->unmappableResult->encodeSingle->if->ncode->encodeDouble->if->if->else->else->return->CoderResult->unmappableForLength->if->dst->remaining->return->for->i->return->catch->finally->src->position
EUC_JP.Encoder#encodeLoop(CharBuffer, ByteBuffer)::: encoder encode loop:::if->src->hasArray->dst->hasArray->return->encodeArrayLoop->else->return->encodeBufferLoop
EUC_JP_LINUX#historicalName()::: c_ p_ x historical name:::return
EUC_JP_LINUX#contains(Charset)::: c_ p_ x contains:::return->cs->name->equals
EUC_JP_LINUX#newDecoder()::: c_ p_ x new decoder:::return->new->Decoder
EUC_JP_LINUX#newEncoder()::: c_ p_ x new encoder:::return->new->Encoder
EUC_JP_Open#historicalName()::: c_ p_ open historical name:::return
EUC_JP_Open#contains(Charset)::: c_ p_ open contains:::return->cs->name->equals
EUC_JP_Open#newDecoder()::: c_ p_ open new decoder:::return->new->Decoder
EUC_JP_Open#newEncoder()::: c_ p_ open new encoder:::return->new->Encoder
EUC_JP_Open.Decoder#decodeDouble(int, int)::: decoder decode double:::c->super->decodeDouble->if->return->DEC0208_Solaris->decodeDouble->return
EUC_JP_Open.Encoder#encodeDouble(char)::: encoder encode double:::b->super->encodeDouble->if->return->ENC0208_Solaris->encodeChar->if->return->ENC0212_Solaris->encodeChar->return
EUC_KR#historicalName()::: c_ r historical name:::return
EUC_KR#contains(Charset)::: c_ r contains:::return->cs->name->equals
EUC_KR#newDecoder()::: c_ r new decoder:::initb2c->return->new->DoubleByte.Decoder
EUC_KR#newEncoder()::: c_ r new encoder:::initc2b->return->new->DoubleByte.Encoder
EUC_KR#initb2c()::: c_ r initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
EUC_KR#initc2b()::: c_ r initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
EUC_TW#historicalName()::: c_ w historical name:::return
EUC_TW#contains(Charset)::: c_ w contains:::return->cs->name->equals
EUC_TW#newDecoder()::: c_ w new decoder:::return->new->Decoder
EUC_TW#newEncoder()::: c_ w new encoder:::return->new->Encoder
EUC_TW.Decoder#toUnicode(int, int, int)::: decoder to unicode:::return->decode
EUC_TW.Decoder#isLegalDB(int)::: decoder is legal b:::return
EUC_TW.Decoder#decode(int, int, int, char[], char[])::: decoder decode:::if->return->index->c->charAt->if->return->if->return->else->Character->highSurrogate->Character->lowSurrogate->return
EUC_TW.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->byte1->if->if->return->cnsPlane->if->return->CoderResult->malformedForLength->byte2->cc->toUnicode->if->if->isLegalDB->isLegalDB->return->CoderResult->malformedForLength->return->CoderResult->unmappableForLength->if->return->if->else->else->if->if->return->else->if->return->byte2->cc->toUnicode->if->if->isLegalDB->isLegalDB->return->CoderResult->malformedForLength->return->CoderResult->unmappableForLength->if->return->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
EUC_TW.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->try->while->src->hasRemaining->byte1->src->get->if->if->src->remaining->return->cnsPlane->src->get->if->return->CoderResult->malformedForLength->src->get->byte2->src->get->cc->toUnicode->if->if->isLegalDB->isLegalDB->return->CoderResult->malformedForLength->return->CoderResult->unmappableForLength->if->dst->remaining->return->if->dst->put->else->dst->put->dst->put->else->if->if->dst->hasRemaining->return->dst->put->else->if->src->hasRemaining->return->byte2->src->get->cc->toUnicode->if->if->isLegalDB->isLegalDB->return->CoderResult->malformedForLength->return->CoderResult->unmappableForLength->if->dst->hasRemaining->return->dst->put->return->catch->finally->src->position
EUC_TW.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
EUC_TW.Encoder#canEncode(char)::: encoder can encode:::return->toEUC
EUC_TW.Encoder#canEncode(CharSequence)::: encoder can encode:::i->while->cs->length->c->cs->charAt->if->Character->isHighSurrogate->if->cs->length->return->low->cs->charAt->if->Character->isLowSurrogate->toEUC->return->else->if->canEncode->return->return
EUC_TW.Encoder#toEUC(char, char, byte[])::: encoder to c:::return->encode
EUC_TW.Encoder#toEUC(char, byte[])::: encoder to c:::return->encode
EUC_TW.Encoder#encodeArrayLoop(CharBuffer, ByteBuffer)::: encoder encode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->inSize->outSize->try->while->c->if->else->toEUC->if->if->Character->isHighSurrogate->if->return->if->Character->isLowSurrogate->return->CoderResult->malformedForLength->toEUC->else->if->Character->isLowSurrogate->return->CoderResult->malformedForLength->if->return->CoderResult->unmappableForLength->if->return->for->i->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
EUC_TW.Encoder#encodeBufferLoop(CharBuffer, ByteBuffer)::: encoder encode buffer loop:::outSize->inSize->mark->src->position->try->while->src->hasRemaining->c->src->get->if->else->toEUC->if->if->Character->isHighSurrogate->if->src->hasRemaining->return->c2->src->get->if->Character->isLowSurrogate->return->CoderResult->malformedForLength->toEUC->else->if->Character->isLowSurrogate->return->CoderResult->malformedForLength->if->return->CoderResult->unmappableForLength->if->dst->remaining->return->for->i->return->catch->finally->src->position
EUC_TW.Encoder#encodeLoop(CharBuffer, ByteBuffer)::: encoder encode loop:::if->src->hasArray->dst->hasArray->return->encodeArrayLoop->else->return->encodeBufferLoop
EUC_TW.Encoder#encode(char, char, byte[])::: encoder encode:::c->Character->toCodePoint->if->return->index->if->return->db->if->return->p->return
EUC_TW.Encoder#encode(char, byte[])::: encoder encode:::index->if->return->db->if->return->p->if->return->else->return
ExtendedCharsets#init()::: extended charsets init:::if->return->if->isBooted->return->map->getProperty->sjisIsMS932->iso2022jpIsMS50221->iso2022jpIsMS50220->iso2022jpIsMSISO2022JP->if->maps->map->split->for->i->if->hasCharset->new->StringArr->deleteCharset->new->StringArr->deleteCharset->new->StringArr->charset->new->StringArr->charset->if->new->StringArr->deleteCharset->if->new->StringArr->deleteCharset->new->StringArr->charset->else->if->new->StringArr->deleteCharset->new->StringArr->charset->else->new->StringArr->deleteCharset->new->StringArr->charset
ExtendedCharsets#getProperty(String)::: extended charsets get property:::return->AccessController->new->PrivilegedAction<String>->doPrivileged
ExtendedCharsets#aliasesFor(String)::: extended charsets aliases for:::if->return->return->instance->aliases
GB18030#contains(Charset)::: b18030 contains:::return->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals->cs->name->equals
GB18030#newDecoder()::: b18030 new decoder:::return->new->Decoder
GB18030#newEncoder()::: b18030 new encoder:::return->new->Encoder
GB18030.Decoder#getChar(int)::: decoder get char:::byte1->byte2->start->end->if->return->n->return->charAt
GB18030.Decoder#decodeDouble(int, int)::: decoder decode double:::start->end->if->return->n->return->charAt
GB18030.Decoder#implReset()::: decoder impl reset:::
GB18030.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->inputSize->try->while->byte1->byte2->byte3->byte4->if->else->if->return->CoderResult->malformedForLength->else->if->return->if->return->CoderResult->malformedForLength->else->if->if->return->if->return->CoderResult->malformedForLength->if->return->CoderResult->malformedForLength->else->if->return->CoderResult->malformedForLength->else->if->return->switch->break->decodeDouble->break->offset->hiByte->lowByte->if->getChar->else->if->else->if->getChar->else->if->else->if->getChar->else->if->if->return->CoderResult->malformedForLength->if->return->else->return->CoderResult->malformedForLength->break->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
GB18030.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->try->while->src->hasRemaining->byte1->byte2->byte3->byte4->src->get->inputSize->if->else->if->return->CoderResult->malformedForLength->else->if->src->remaining->return->src->get->if->return->CoderResult->malformedForLength->else->if->if->src->remaining->return->src->get->if->return->CoderResult->malformedForLength->src->get->if->return->CoderResult->malformedForLength->else->if->return->CoderResult->malformedForLength->else->if->dst->remaining->return->switch->dst->put->break->dst->decodeDouble->put->break->offset->hiByte->lowByte->if->dst->getChar->put->else->if->dst->put->else->if->dst->getChar->put->else->if->dst->put->else->if->dst->getChar->put->else->if->if->return->CoderResult->malformedForLength->if->dst->remaining->return->dst->put->dst->put->else->return->CoderResult->malformedForLength->return->catch->finally->src->position
GB18030.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
GB18030.Encoder#canEncode(char)::: encoder can encode:::return->Character->isSurrogate
GB18030.Encoder#getGB18030(short[], String[], char)::: encoder get b18030:::offset->return->charAt
GB18030.Encoder#implReset()::: encoder impl reset:::
GB18030.Encoder#encodeArrayLoop(CharBuffer, ByteBuffer)::: encoder encode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->condensedKey->hiByte->loByte->try->while->inputSize->c->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->sgp->increment->else->if->else->if->outByteVal->getGB18030->if->return->CoderResult->unmappableForLength->if->else->if->if->else->else->if->switch->if->return->break->if->return->break->b1->b2->b3->b4->if->return->break->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
GB18030.Encoder#encodeBufferLoop(CharBuffer, ByteBuffer)::: encoder encode buffer loop:::condensedKey->hiByte->loByte->mark->src->position->try->while->src->hasRemaining->c->src->get->inputSize->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->else->if->else->if->outByteVal->getGB18030->if->return->CoderResult->unmappableForLength->if->else->if->if->else->else->if->if->if->dst->remaining->return->dst->put->else->if->if->dst->remaining->return->dst->put->dst->put->else->b1->b2->b3->b4->if->dst->remaining->return->dst->put->dst->put->dst->put->dst->put->return->catch->finally->src->position
GB18030.Encoder#encodeLoop(CharBuffer, ByteBuffer)::: encoder encode loop:::if->src->hasArray->dst->hasArray->return->encodeArrayLoop->else->return->encodeBufferLoop
IBM037#historicalName()::: m037 historical name:::return
IBM037#contains(Charset)::: m037 contains:::return
IBM037#newDecoder()::: m037 new decoder:::return->new->SingleByte.Decoder
IBM037#newEncoder()::: m037 new encoder:::return->new->SingleByte.Encoder
IBM1006#historicalName()::: m1006 historical name:::return
IBM1006#contains(Charset)::: m1006 contains:::return
IBM1006#newDecoder()::: m1006 new decoder:::return->new->SingleByte.Decoder
IBM1006#newEncoder()::: m1006 new encoder:::return->new->SingleByte.Encoder
IBM1025#historicalName()::: m1025 historical name:::return
IBM1025#contains(Charset)::: m1025 contains:::return
IBM1025#newDecoder()::: m1025 new decoder:::return->new->SingleByte.Decoder
IBM1025#newEncoder()::: m1025 new encoder:::return->new->SingleByte.Encoder
IBM1026#historicalName()::: m1026 historical name:::return
IBM1026#contains(Charset)::: m1026 contains:::return
IBM1026#newDecoder()::: m1026 new decoder:::return->new->SingleByte.Decoder
IBM1026#newEncoder()::: m1026 new encoder:::return->new->SingleByte.Encoder
IBM1046#historicalName()::: m1046 historical name:::return
IBM1046#contains(Charset)::: m1046 contains:::return
IBM1046#newDecoder()::: m1046 new decoder:::return->new->SingleByte.Decoder
IBM1046#newEncoder()::: m1046 new encoder:::return->new->SingleByte.Encoder
IBM1047#historicalName()::: m1047 historical name:::return
IBM1047#contains(Charset)::: m1047 contains:::return
IBM1047#newDecoder()::: m1047 new decoder:::return->new->SingleByte.Decoder
IBM1047#newEncoder()::: m1047 new encoder:::return->new->SingleByte.Encoder
IBM1097#historicalName()::: m1097 historical name:::return
IBM1097#contains(Charset)::: m1097 contains:::return
IBM1097#newDecoder()::: m1097 new decoder:::return->new->SingleByte.Decoder
IBM1097#newEncoder()::: m1097 new encoder:::return->new->SingleByte.Encoder
IBM1098#historicalName()::: m1098 historical name:::return
IBM1098#contains(Charset)::: m1098 contains:::return
IBM1098#newDecoder()::: m1098 new decoder:::return->new->SingleByte.Decoder
IBM1098#newEncoder()::: m1098 new encoder:::return->new->SingleByte.Encoder
IBM1112#historicalName()::: m1112 historical name:::return
IBM1112#contains(Charset)::: m1112 contains:::return
IBM1112#newDecoder()::: m1112 new decoder:::return->new->SingleByte.Decoder
IBM1112#newEncoder()::: m1112 new encoder:::return->new->SingleByte.Encoder
IBM1122#historicalName()::: m1122 historical name:::return
IBM1122#contains(Charset)::: m1122 contains:::return
IBM1122#newDecoder()::: m1122 new decoder:::return->new->SingleByte.Decoder
IBM1122#newEncoder()::: m1122 new encoder:::return->new->SingleByte.Encoder
IBM1123#historicalName()::: m1123 historical name:::return
IBM1123#contains(Charset)::: m1123 contains:::return
IBM1123#newDecoder()::: m1123 new decoder:::return->new->SingleByte.Decoder
IBM1123#newEncoder()::: m1123 new encoder:::return->new->SingleByte.Encoder
IBM1124#historicalName()::: m1124 historical name:::return
IBM1124#contains(Charset)::: m1124 contains:::return
IBM1124#newDecoder()::: m1124 new decoder:::return->new->SingleByte.Decoder
IBM1124#newEncoder()::: m1124 new encoder:::return->new->SingleByte.Encoder
IBM1140#historicalName()::: m1140 historical name:::return
IBM1140#contains(Charset)::: m1140 contains:::return
IBM1140#newDecoder()::: m1140 new decoder:::return->new->SingleByte.Decoder
IBM1140#newEncoder()::: m1140 new encoder:::return->new->SingleByte.Encoder
IBM1141#historicalName()::: m1141 historical name:::return
IBM1141#contains(Charset)::: m1141 contains:::return
IBM1141#newDecoder()::: m1141 new decoder:::return->new->SingleByte.Decoder
IBM1141#newEncoder()::: m1141 new encoder:::return->new->SingleByte.Encoder
IBM1142#historicalName()::: m1142 historical name:::return
IBM1142#contains(Charset)::: m1142 contains:::return
IBM1142#newDecoder()::: m1142 new decoder:::return->new->SingleByte.Decoder
IBM1142#newEncoder()::: m1142 new encoder:::return->new->SingleByte.Encoder
IBM1143#historicalName()::: m1143 historical name:::return
IBM1143#contains(Charset)::: m1143 contains:::return
IBM1143#newDecoder()::: m1143 new decoder:::return->new->SingleByte.Decoder
IBM1143#newEncoder()::: m1143 new encoder:::return->new->SingleByte.Encoder
IBM1144#historicalName()::: m1144 historical name:::return
IBM1144#contains(Charset)::: m1144 contains:::return
IBM1144#newDecoder()::: m1144 new decoder:::return->new->SingleByte.Decoder
IBM1144#newEncoder()::: m1144 new encoder:::return->new->SingleByte.Encoder
IBM1145#historicalName()::: m1145 historical name:::return
IBM1145#contains(Charset)::: m1145 contains:::return
IBM1145#newDecoder()::: m1145 new decoder:::return->new->SingleByte.Decoder
IBM1145#newEncoder()::: m1145 new encoder:::return->new->SingleByte.Encoder
IBM1146#historicalName()::: m1146 historical name:::return
IBM1146#contains(Charset)::: m1146 contains:::return
IBM1146#newDecoder()::: m1146 new decoder:::return->new->SingleByte.Decoder
IBM1146#newEncoder()::: m1146 new encoder:::return->new->SingleByte.Encoder
IBM1147#historicalName()::: m1147 historical name:::return
IBM1147#contains(Charset)::: m1147 contains:::return
IBM1147#newDecoder()::: m1147 new decoder:::return->new->SingleByte.Decoder
IBM1147#newEncoder()::: m1147 new encoder:::return->new->SingleByte.Encoder
IBM1148#historicalName()::: m1148 historical name:::return
IBM1148#contains(Charset)::: m1148 contains:::return
IBM1148#newDecoder()::: m1148 new decoder:::return->new->SingleByte.Decoder
IBM1148#newEncoder()::: m1148 new encoder:::return->new->SingleByte.Encoder
IBM1149#historicalName()::: m1149 historical name:::return
IBM1149#contains(Charset)::: m1149 contains:::return
IBM1149#newDecoder()::: m1149 new decoder:::return->new->SingleByte.Decoder
IBM1149#newEncoder()::: m1149 new encoder:::return->new->SingleByte.Encoder
IBM1166#historicalName()::: m1166 historical name:::return
IBM1166#contains(Charset)::: m1166 contains:::return
IBM1166#newDecoder()::: m1166 new decoder:::return->new->SingleByte.Decoder
IBM1166#newEncoder()::: m1166 new encoder:::return->new->SingleByte.Encoder
IBM1364#historicalName()::: m1364 historical name:::return
IBM1364#contains(Charset)::: m1364 contains:::return
IBM1364#newDecoder()::: m1364 new decoder:::initb2c->return->new->DoubleByte.Decoder_EBCDIC
IBM1364#newEncoder()::: m1364 new encoder:::initc2b->return->new->DoubleByte.Encoder_EBCDIC
IBM1364#initb2c()::: m1364 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM1364#initc2b()::: m1364 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM1381#historicalName()::: m1381 historical name:::return
IBM1381#contains(Charset)::: m1381 contains:::return->cs->name->equals
IBM1381#newDecoder()::: m1381 new decoder:::initb2c->return->new->DoubleByte.Decoder
IBM1381#newEncoder()::: m1381 new encoder:::initc2b->return->new->DoubleByte.Encoder
IBM1381#initb2c()::: m1381 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM1381#initc2b()::: m1381 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM1383#historicalName()::: m1383 historical name:::return
IBM1383#contains(Charset)::: m1383 contains:::return->cs->name->equals
IBM1383#newDecoder()::: m1383 new decoder:::initb2c->return->new->DoubleByte.Decoder_EUC_SIM
IBM1383#newEncoder()::: m1383 new encoder:::initc2b->return->new->DoubleByte.Encoder_EUC_SIM
IBM1383#initb2c()::: m1383 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM1383#initc2b()::: m1383 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM273#historicalName()::: m273 historical name:::return
IBM273#contains(Charset)::: m273 contains:::return
IBM273#newDecoder()::: m273 new decoder:::return->new->SingleByte.Decoder
IBM273#newEncoder()::: m273 new encoder:::return->new->SingleByte.Encoder
IBM277#historicalName()::: m277 historical name:::return
IBM277#contains(Charset)::: m277 contains:::return
IBM277#newDecoder()::: m277 new decoder:::return->new->SingleByte.Decoder
IBM277#newEncoder()::: m277 new encoder:::return->new->SingleByte.Encoder
IBM278#historicalName()::: m278 historical name:::return
IBM278#contains(Charset)::: m278 contains:::return
IBM278#newDecoder()::: m278 new decoder:::return->new->SingleByte.Decoder
IBM278#newEncoder()::: m278 new encoder:::return->new->SingleByte.Encoder
IBM280#historicalName()::: m280 historical name:::return
IBM280#contains(Charset)::: m280 contains:::return
IBM280#newDecoder()::: m280 new decoder:::return->new->SingleByte.Decoder
IBM280#newEncoder()::: m280 new encoder:::return->new->SingleByte.Encoder
IBM284#historicalName()::: m284 historical name:::return
IBM284#contains(Charset)::: m284 contains:::return
IBM284#newDecoder()::: m284 new decoder:::return->new->SingleByte.Decoder
IBM284#newEncoder()::: m284 new encoder:::return->new->SingleByte.Encoder
IBM285#historicalName()::: m285 historical name:::return
IBM285#contains(Charset)::: m285 contains:::return
IBM285#newDecoder()::: m285 new decoder:::return->new->SingleByte.Decoder
IBM285#newEncoder()::: m285 new encoder:::return->new->SingleByte.Encoder
IBM290#historicalName()::: m290 historical name:::return
IBM290#contains(Charset)::: m290 contains:::return
IBM290#newDecoder()::: m290 new decoder:::return->new->SingleByte.Decoder
IBM290#newEncoder()::: m290 new encoder:::return->new->SingleByte.Encoder
IBM297#historicalName()::: m297 historical name:::return
IBM297#contains(Charset)::: m297 contains:::return
IBM297#newDecoder()::: m297 new decoder:::return->new->SingleByte.Decoder
IBM297#newEncoder()::: m297 new encoder:::return->new->SingleByte.Encoder
IBM300#historicalName()::: m300 historical name:::return
IBM300#contains(Charset)::: m300 contains:::return
IBM300#newDecoder()::: m300 new decoder:::initb2c->return->new->DoubleByte.Decoder_DBCSONLY
IBM300#newEncoder()::: m300 new encoder:::initc2b->return->new->byteArr->new->DoubleByte.Encoder_DBCSONLY
IBM300#initb2c()::: m300 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM300#initc2b()::: m300 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM33722#historicalName()::: m33722 historical name:::return
IBM33722#contains(Charset)::: m33722 contains:::return
IBM33722#newDecoder()::: m33722 new decoder:::return->new->Decoder
IBM33722#newEncoder()::: m33722 new encoder:::return->new->Encoder
IBM33722.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->byte1->byte2->inputSize->outputChar->if->if->return->if->return->CoderResult->malformedForLength->mappingTableG2->charAt->else->if->if->return->if->return->CoderResult->malformedForLength->if->return->CoderResult->malformedForLength->mappingTableG3->charAt->else->if->byteToCharTable->charAt->else->if->return->CoderResult->malformedForLength->else->if->return->if->return->CoderResult->malformedForLength->mappingTableG1->charAt->if->return->CoderResult->unmappableForLength->if->return->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
IBM33722.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->try->while->src->hasRemaining->byte1->byte2->inputSize->outputChar->src->get->if->if->src->hasRemaining->return->src->get->if->return->CoderResult->malformedForLength->mappingTableG2->charAt->else->if->if->src->remaining->return->src->get->if->return->CoderResult->malformedForLength->src->get->if->return->CoderResult->malformedForLength->mappingTableG3->charAt->else->if->byteToCharTable->charAt->else->if->return->CoderResult->malformedForLength->else->if->src->remaining->return->src->get->if->return->CoderResult->malformedForLength->mappingTableG1->charAt->if->return->CoderResult->unmappableForLength->if->dst->hasRemaining->return->dst->put->return->catch->finally->src->position
IBM33722.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
IBM420#historicalName()::: m420 historical name:::return
IBM420#contains(Charset)::: m420 contains:::return
IBM420#newDecoder()::: m420 new decoder:::return->new->SingleByte.Decoder
IBM420#newEncoder()::: m420 new encoder:::return->new->SingleByte.Encoder
IBM424#historicalName()::: m424 historical name:::return
IBM424#contains(Charset)::: m424 contains:::return
IBM424#newDecoder()::: m424 new decoder:::return->new->SingleByte.Decoder
IBM424#newEncoder()::: m424 new encoder:::return->new->SingleByte.Encoder
IBM500#historicalName()::: m500 historical name:::return
IBM500#contains(Charset)::: m500 contains:::return
IBM500#newDecoder()::: m500 new decoder:::return->new->SingleByte.Decoder
IBM500#newEncoder()::: m500 new encoder:::return->new->SingleByte.Encoder
IBM833#historicalName()::: m833 historical name:::return
IBM833#contains(Charset)::: m833 contains:::return
IBM833#newDecoder()::: m833 new decoder:::return->new->SingleByte.Decoder
IBM833#newEncoder()::: m833 new encoder:::return->new->SingleByte.Encoder
IBM834#contains(Charset)::: m834 contains:::return
IBM834#newDecoder()::: m834 new decoder:::IBM933->initb2c->return->new->DoubleByte.Decoder_DBCSONLY
IBM834#newEncoder()::: m834 new encoder:::IBM933->initc2b->return->new->Encoder
IBM834.Encoder#encodeChar(char)::: encoder encode char:::bb->super->encodeChar->if->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->return
IBM834.Encoder#isLegalReplacement(byte[])::: encoder is legal replacement:::if->return->return->super->isLegalReplacement
IBM838#historicalName()::: m838 historical name:::return
IBM838#contains(Charset)::: m838 contains:::return
IBM838#newDecoder()::: m838 new decoder:::return->new->SingleByte.Decoder
IBM838#newEncoder()::: m838 new encoder:::return->new->SingleByte.Encoder
IBM856#historicalName()::: m856 historical name:::return
IBM856#contains(Charset)::: m856 contains:::return
IBM856#newDecoder()::: m856 new decoder:::return->new->SingleByte.Decoder
IBM856#newEncoder()::: m856 new encoder:::return->new->SingleByte.Encoder
IBM860#historicalName()::: m860 historical name:::return
IBM860#contains(Charset)::: m860 contains:::return
IBM860#newDecoder()::: m860 new decoder:::return->new->SingleByte.Decoder
IBM860#newEncoder()::: m860 new encoder:::return->new->SingleByte.Encoder
IBM861#historicalName()::: m861 historical name:::return
IBM861#contains(Charset)::: m861 contains:::return
IBM861#newDecoder()::: m861 new decoder:::return->new->SingleByte.Decoder
IBM861#newEncoder()::: m861 new encoder:::return->new->SingleByte.Encoder
IBM863#historicalName()::: m863 historical name:::return
IBM863#contains(Charset)::: m863 contains:::return
IBM863#newDecoder()::: m863 new decoder:::return->new->SingleByte.Decoder
IBM863#newEncoder()::: m863 new encoder:::return->new->SingleByte.Encoder
IBM864#historicalName()::: m864 historical name:::return
IBM864#contains(Charset)::: m864 contains:::return
IBM864#newDecoder()::: m864 new decoder:::return->new->SingleByte.Decoder
IBM864#newEncoder()::: m864 new encoder:::return->new->SingleByte.Encoder
IBM865#historicalName()::: m865 historical name:::return
IBM865#contains(Charset)::: m865 contains:::return
IBM865#newDecoder()::: m865 new decoder:::return->new->SingleByte.Decoder
IBM865#newEncoder()::: m865 new encoder:::return->new->SingleByte.Encoder
IBM868#historicalName()::: m868 historical name:::return
IBM868#contains(Charset)::: m868 contains:::return
IBM868#newDecoder()::: m868 new decoder:::return->new->SingleByte.Decoder
IBM868#newEncoder()::: m868 new encoder:::return->new->SingleByte.Encoder
IBM869#historicalName()::: m869 historical name:::return
IBM869#contains(Charset)::: m869 contains:::return
IBM869#newDecoder()::: m869 new decoder:::return->new->SingleByte.Decoder
IBM869#newEncoder()::: m869 new encoder:::return->new->SingleByte.Encoder
IBM870#historicalName()::: m870 historical name:::return
IBM870#contains(Charset)::: m870 contains:::return
IBM870#newDecoder()::: m870 new decoder:::return->new->SingleByte.Decoder
IBM870#newEncoder()::: m870 new encoder:::return->new->SingleByte.Encoder
IBM871#historicalName()::: m871 historical name:::return
IBM871#contains(Charset)::: m871 contains:::return
IBM871#newDecoder()::: m871 new decoder:::return->new->SingleByte.Decoder
IBM871#newEncoder()::: m871 new encoder:::return->new->SingleByte.Encoder
IBM875#historicalName()::: m875 historical name:::return
IBM875#contains(Charset)::: m875 contains:::return
IBM875#newDecoder()::: m875 new decoder:::return->new->SingleByte.Decoder
IBM875#newEncoder()::: m875 new encoder:::return->new->SingleByte.Encoder
IBM918#historicalName()::: m918 historical name:::return
IBM918#contains(Charset)::: m918 contains:::return
IBM918#newDecoder()::: m918 new decoder:::return->new->SingleByte.Decoder
IBM918#newEncoder()::: m918 new encoder:::return->new->SingleByte.Encoder
IBM921#historicalName()::: m921 historical name:::return
IBM921#contains(Charset)::: m921 contains:::return
IBM921#newDecoder()::: m921 new decoder:::return->new->SingleByte.Decoder
IBM921#newEncoder()::: m921 new encoder:::return->new->SingleByte.Encoder
IBM922#historicalName()::: m922 historical name:::return
IBM922#contains(Charset)::: m922 contains:::return
IBM922#newDecoder()::: m922 new decoder:::return->new->SingleByte.Decoder
IBM922#newEncoder()::: m922 new encoder:::return->new->SingleByte.Encoder
IBM930#historicalName()::: m930 historical name:::return
IBM930#contains(Charset)::: m930 contains:::return
IBM930#newDecoder()::: m930 new decoder:::initb2c->return->new->DoubleByte.Decoder_EBCDIC
IBM930#newEncoder()::: m930 new encoder:::initc2b->return->new->DoubleByte.Encoder_EBCDIC
IBM930#initb2c()::: m930 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM930#initc2b()::: m930 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM933#historicalName()::: m933 historical name:::return
IBM933#contains(Charset)::: m933 contains:::return
IBM933#newDecoder()::: m933 new decoder:::initb2c->return->new->DoubleByte.Decoder_EBCDIC
IBM933#newEncoder()::: m933 new encoder:::initc2b->return->new->DoubleByte.Encoder_EBCDIC
IBM933#initb2c()::: m933 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM933#initc2b()::: m933 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM935#historicalName()::: m935 historical name:::return
IBM935#contains(Charset)::: m935 contains:::return
IBM935#newDecoder()::: m935 new decoder:::initb2c->return->new->DoubleByte.Decoder_EBCDIC
IBM935#newEncoder()::: m935 new encoder:::initc2b->return->new->DoubleByte.Encoder_EBCDIC
IBM935#initb2c()::: m935 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM935#initc2b()::: m935 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM937#historicalName()::: m937 historical name:::return
IBM937#contains(Charset)::: m937 contains:::return
IBM937#newDecoder()::: m937 new decoder:::initb2c->return->new->DoubleByte.Decoder_EBCDIC
IBM937#newEncoder()::: m937 new encoder:::initc2b->return->new->DoubleByte.Encoder_EBCDIC
IBM937#initb2c()::: m937 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM937#initc2b()::: m937 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM939#historicalName()::: m939 historical name:::return
IBM939#contains(Charset)::: m939 contains:::return
IBM939#newDecoder()::: m939 new decoder:::initb2c->return->new->DoubleByte.Decoder_EBCDIC
IBM939#newEncoder()::: m939 new encoder:::initc2b->return->new->DoubleByte.Encoder_EBCDIC
IBM939#initb2c()::: m939 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM939#initc2b()::: m939 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM942#historicalName()::: m942 historical name:::return
IBM942#contains(Charset)::: m942 contains:::return
IBM942#newDecoder()::: m942 new decoder:::initb2c->return->new->DoubleByte.Decoder
IBM942#newEncoder()::: m942 new encoder:::initc2b->return->new->DoubleByte.Encoder
IBM942#initb2c()::: m942 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM942#initc2b()::: m942 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM942C#historicalName()::: m942 c historical name:::return
IBM942C#contains(Charset)::: m942 c contains:::return->cs->name->equals
IBM942C#newDecoder()::: m942 c new decoder:::return->new->DoubleByte.Decoder
IBM942C#newEncoder()::: m942 c new encoder:::return->new->DoubleByte.Encoder
IBM943#historicalName()::: m943 historical name:::return
IBM943#contains(Charset)::: m943 contains:::return
IBM943#newDecoder()::: m943 new decoder:::initb2c->return->new->DoubleByte.Decoder
IBM943#newEncoder()::: m943 new encoder:::initc2b->return->new->DoubleByte.Encoder
IBM943#initb2c()::: m943 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM943#initc2b()::: m943 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM943C#historicalName()::: m943 c historical name:::return
IBM943C#contains(Charset)::: m943 c contains:::return->cs->name->equals
IBM943C#newDecoder()::: m943 c new decoder:::return->new->DoubleByte.Decoder
IBM943C#newEncoder()::: m943 c new encoder:::return->new->DoubleByte.Encoder
IBM948#historicalName()::: m948 historical name:::return
IBM948#contains(Charset)::: m948 contains:::return->cs->name->equals
IBM948#newDecoder()::: m948 new decoder:::initb2c->return->new->DoubleByte.Decoder
IBM948#newEncoder()::: m948 new encoder:::initc2b->return->new->DoubleByte.Encoder
IBM948#initb2c()::: m948 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM948#initc2b()::: m948 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM949#historicalName()::: m949 historical name:::return
IBM949#contains(Charset)::: m949 contains:::return
IBM949#newDecoder()::: m949 new decoder:::initb2c->return->new->DoubleByte.Decoder
IBM949#newEncoder()::: m949 new encoder:::initc2b->return->new->DoubleByte.Encoder
IBM949#initb2c()::: m949 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM949#initc2b()::: m949 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM949C#historicalName()::: m949 c historical name:::return
IBM949C#contains(Charset)::: m949 c contains:::return->cs->name->equals
IBM949C#newDecoder()::: m949 c new decoder:::return->new->DoubleByte.Decoder
IBM949C#newEncoder()::: m949 c new encoder:::return->new->DoubleByte.Encoder
IBM950#historicalName()::: m950 historical name:::return
IBM950#contains(Charset)::: m950 contains:::return->cs->name->equals
IBM950#newDecoder()::: m950 new decoder:::initb2c->return->new->DoubleByte.Decoder
IBM950#newEncoder()::: m950 new encoder:::initc2b->return->new->DoubleByte.Encoder
IBM950#initb2c()::: m950 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM950#initc2b()::: m950 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
IBM964#historicalName()::: m964 historical name:::return
IBM964#contains(Charset)::: m964 contains:::return
IBM964#newDecoder()::: m964 new decoder:::return->new->Decoder
IBM964#newEncoder()::: m964 new encoder:::return->new->Encoder
IBM964.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->byte1->byte2->inputSize->outputChar->if->if->return->if->else->if->else->if->else->return->CoderResult->malformedForLength->if->return->CoderResult->malformedForLength->if->return->CoderResult->malformedForLength->mappingTableG2->charAt->else->if->return->CoderResult->malformedForLength->else->if->byteToCharTable->charAt->else->if->return->CoderResult->malformedForLength->else->if->return->if->return->CoderResult->malformedForLength->mappingTableG1->charAt->if->return->CoderResult->unmappableForLength->if->return->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
IBM964.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->try->while->src->hasRemaining->byte1->byte2->inputSize->outputChar->src->get->if->if->src->remaining->return->src->get->if->else->if->else->if->else->return->CoderResult->malformedForLength->src->get->if->return->CoderResult->malformedForLength->src->get->if->return->CoderResult->malformedForLength->mappingTableG2->charAt->else->if->return->CoderResult->malformedForLength->else->if->byteToCharTable->charAt->else->if->return->CoderResult->malformedForLength->else->if->src->remaining->return->src->get->if->return->CoderResult->malformedForLength->mappingTableG1->charAt->if->return->CoderResult->unmappableForLength->if->dst->hasRemaining->return->dst->put->return->catch->finally->src->position
IBM964.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
IBM970#historicalName()::: m970 historical name:::return
IBM970#contains(Charset)::: m970 contains:::return->cs->name->equals
IBM970#newDecoder()::: m970 new decoder:::initb2c->return->new->DoubleByte.Decoder_EUC_SIM
IBM970#newEncoder()::: m970 new encoder:::initc2b->return->new->DoubleByte.Encoder_EUC_SIM
IBM970#initb2c()::: m970 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
IBM970#initc2b()::: m970 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
ISCII91#historicalName()::: i91 historical name:::return
ISCII91#contains(Charset)::: i91 contains:::return->cs->name->equals
ISCII91#newDecoder()::: i91 new decoder:::return->new->Decoder
ISCII91#newEncoder()::: i91 new encoder:::return->new->Encoder
ISCII91.Decoder#implFlush(CharBuffer)::: decoder impl flush:::if->if->out->remaining->return->else->out->put->return
ISCII91.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->index->currentChar->if->if->return->continue->switch->if->if->return->continue->continue->if->return->switch->break->break->break->break->break->break->break->break->if->continue->break->if->continue->break->if->return->if->continue->if->break->break->if->if->return->continue->return->CoderResult->unmappableForLength->if->return->if->continue->break->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
ISCII91.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->try->while->src->hasRemaining->index->src->get->currentChar->if->if->dst->remaining->return->dst->put->continue->switch->if->if->dst->remaining->return->dst->put->continue->continue->if->dst->remaining->return->switch->dst->put->break->dst->put->break->dst->put->break->dst->put->break->dst->put->break->dst->put->break->dst->put->break->dst->put->break->if->dst->put->continue->dst->put->break->if->dst->put->continue->dst->put->break->if->dst->remaining->return->if->dst->put->continue->if->dst->put->break->dst->put->break->if->if->dst->remaining->return->dst->put->continue->return->CoderResult->unmappableForLength->if->dst->remaining->return->if->dst->put->continue->dst->put->break->return->catch->finally->src->position
ISCII91.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
ISCII91.Encoder#canEncode(char)::: encoder can encode:::return
ISCII91.Encoder#encodeArrayLoop(CharBuffer, ByteBuffer)::: encoder encode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->outputSize->try->inputChar->while->index->if->if->return->continue->if->else->if->if->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->return->sgp->unmappableResult->if->return->CoderResult->unmappableForLength->else->if->if->return->else->if->return->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
ISCII91.Encoder#encodeBufferLoop(CharBuffer, ByteBuffer)::: encoder encode buffer loop:::mark->src->position->try->inputChar->while->src->hasRemaining->index->src->get->if->if->dst->remaining->return->dst->put->continue->if->else->if->if->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->return->sgp->unmappableResult->if->return->CoderResult->unmappableForLength->else->if->if->dst->remaining->return->dst->put->else->if->dst->remaining->return->dst->put->dst->put->return->catch->finally->src->position
ISCII91.Encoder#encodeLoop(CharBuffer, ByteBuffer)::: encoder encode loop:::if->src->hasArray->dst->hasArray->return->encodeArrayLoop->else->return->encodeBufferLoop
ISO2022#newDecoder()::: o2022 new decoder:::return->new->Decoder
ISO2022#newEncoder()::: o2022 new encoder:::return->new->Encoder
ISO2022.Decoder#implReset()::: decoder impl reset:::
ISO2022.Decoder#decode(byte, byte, byte)::: decoder decode:::tmpByte->tmpChar->new->charArr->i->tmpIndex->switch->break->break->break->if->for->return
ISO2022.Decoder#findDesig(byte[], int, int, byte[][])::: decoder find desig:::if->return->i->while->if->j->while->if->return->return
ISO2022.Decoder#findDesigBuf(ByteBuffer, byte[][])::: decoder find desig buf:::if->return->i->while->if->in->remaining->j->in->mark->while->in->get->if->return->in->reset->return
ISO2022.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->b1->b2->b3->try->while->inputSize->switch->break->break->if->return->desig->findDesig->if->break->findDesig->if->break->findDesig->if->break->if->return->switch->if->return->if->return->decode->break->if->return->if->return->decode->break->return->CoderResult->malformedForLength->break->if->return->if->else->if->return->if->return->decode->break->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
ISO2022.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->b1->b2->b3->try->while->src->hasRemaining->src->get->inputSize->switch->break->break->if->src->remaining->return->desig->findDesigBuf->if->break->findDesigBuf->if->break->findDesigBuf->if->break->if->src->remaining->return->src->get->switch->if->src->remaining->return->src->get->src->get->if->dst->remaining->return->dst->decode->put->break->if->src->remaining->return->src->get->src->get->if->dst->remaining->return->dst->decode->put->break->return->CoderResult->malformedForLength->break->if->dst->remaining->return->if->dst->put->else->if->dst->remaining->return->if->src->remaining->return->src->get->dst->decode->put->break->return->catch->e->printStackTrace->return->finally->src->position
ISO2022.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
ISO2022.Encoder#canEncode(char)::: encoder can encode:::return->ISOEncoder->canEncode
ISO2022.Encoder#implReset()::: encoder impl reset:::
ISO2022.Encoder#unicodeToNative(char, byte[])::: encoder unicode to native:::index->convChar->convByte->new->byteArr->converted->try->cc->CharBuffer->wrap->bb->ByteBuffer->wrap->ISOEncoder->encode->bb->flip->bb->remaining->catch->return->finally->if->if->System->arraycopy->if->else->if->if->if->System->arraycopy->else->if->if->System->arraycopy->return
ISO2022.Encoder#encodeArrayLoop(CharBuffer, ByteBuffer)::: encoder encode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->outputSize->outputByte->new->byteArr->try->while->c->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->return->sgp->unmappableResult->if->if->else->if->else->unicodeToNative->if->return->CoderResult->unmappableForLength->if->return->for->i->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
ISO2022.Encoder#encodeBufferLoop(CharBuffer, ByteBuffer)::: encoder encode buffer loop:::outputSize->outputByte->new->byteArr->inputSize->mark->src->position->try->while->src->hasRemaining->inputChar->src->get->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->return->sgp->unmappableResult->if->if->else->if->else->unicodeToNative->if->return->CoderResult->unmappableForLength->if->dst->remaining->return->for->i->return->catch->finally->src->position
ISO2022.Encoder#encodeLoop(CharBuffer, ByteBuffer)::: encoder encode loop:::if->src->hasArray->dst->hasArray->return->encodeArrayLoop->else->return->encodeBufferLoop
ISO2022_CN#historicalName()::: o2022_ n historical name:::return
ISO2022_CN#contains(Charset)::: o2022_ n contains:::return
ISO2022_CN#newDecoder()::: o2022_ n new decoder:::return->new->Decoder
ISO2022_CN#newEncoder()::: o2022_ n new encoder:::throw->new->UnsupportedOperationException
ISO2022_CN#canEncode()::: o2022_ n can encode:::return
ISO2022_CN.Decoder#implReset()::: decoder impl reset:::
ISO2022_CN.Decoder#cnsDecode(byte, byte, byte)::: decoder cns decode:::p->if->else->if->else->return->ret->cnsDecoder->toUnicode->if->return->return
ISO2022_CN.Decoder#SODecode(byte, byte, byte)::: decoder  decode:::if->return->gb2312Decoder->decodeDouble->else->ret->cnsDecoder->toUnicode->if->return->return
ISO2022_CN.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->b1->b2->b3->b4->inputSize->c->try->while->src->hasRemaining->src->get->while->if->if->src->remaining->return->src->get->if->return->CoderResult->malformedForLength->if->if->src->remaining->return->src->get->if->return->CoderResult->malformedForLength->if->else->if->if->src->remaining->return->src->get->if->else->if->else->return->CoderResult->malformedForLength->else->if->if->src->remaining->return->src->get->if->return->CoderResult->malformedForLength->else->if->if->src->remaining->return->src->get->if->return->CoderResult->malformedForLength->else->return->CoderResult->malformedForLength->else->if->if->src->remaining->return->src->get->src->get->if->dst->remaining->return->cnsDecode->if->return->CoderResult->unmappableForLength->dst->put->else->return->CoderResult->malformedForLength->else->if->else->if->if->src->remaining->return->src->get->if->dst->remaining->return->if->dst->put->else->if->src->remaining->return->src->get->SODecode->if->return->CoderResult->unmappableForLength->dst->put->return->catch->finally->src->position
ISO2022_CN.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::inputSize->b1->b2->b3->b4->c->sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->while->if->if->return->if->return->CoderResult->malformedForLength->if->if->return->if->return->CoderResult->malformedForLength->if->else->if->if->return->if->else->if->else->return->CoderResult->malformedForLength->else->if->if->return->if->return->CoderResult->malformedForLength->else->if->if->return->if->return->CoderResult->malformedForLength->else->return->CoderResult->malformedForLength->else->if->if->return->if->return->cnsDecode->if->return->CoderResult->unmappableForLength->else->return->CoderResult->malformedForLength->else->if->else->if->if->return->if->return->if->else->if->return->SODecode->if->return->CoderResult->unmappableForLength->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
ISO2022_CN.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
ISO2022_CN_CNS#contains(Charset)::: o2022_ n_ s contains:::return->cs->name->equals
ISO2022_CN_CNS#historicalName()::: o2022_ n_ s historical name:::return
ISO2022_CN_CNS#newDecoder()::: o2022_ n_ s new decoder:::return->new->ISO2022_CN.Decoder
ISO2022_CN_CNS#newEncoder()::: o2022_ n_ s new encoder:::return->new->Encoder
ISO2022_CN_CNS.Encoder#canEncode(char)::: encoder can encode:::n->return->toEUC
ISO2022_CN_CNS.Encoder#isLegalReplacement(byte[])::: encoder is legal replacement:::return
ISO2022_CN_GB#contains(Charset)::: o2022_ n_ b contains:::return->cs->name->equals
ISO2022_CN_GB#historicalName()::: o2022_ n_ b historical name:::return
ISO2022_CN_GB#newDecoder()::: o2022_ n_ b new decoder:::return->new->ISO2022_CN.Decoder
ISO2022_CN_GB#newEncoder()::: o2022_ n_ b new encoder:::return->new->Encoder
ISO2022_CN_GB.Encoder#isLegalReplacement(byte[])::: encoder is legal replacement:::return
ISO2022_JP#historicalName()::: o2022_ p historical name:::return
ISO2022_JP#contains(Charset)::: o2022_ p contains:::return
ISO2022_JP#newDecoder()::: o2022_ p new decoder:::return->new->Decoder
ISO2022_JP#newEncoder()::: o2022_ p new encoder:::return->new->Encoder
ISO2022_JP#doSBKANA()::: o2022_ p do a:::return
ISO2022_JP.Decoder#implReset()::: decoder impl reset:::
ISO2022_JP.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::inputSize->b1->b2->b3->b4->c->sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->if->return->CoderResult->malformedForLength->if->if->if->return->if->if->else->if->else->if->else->return->CoderResult->malformedForLength->else->if->if->else->if->else->if->if->return->if->else->return->CoderResult->malformedForLength->else->return->CoderResult->malformedForLength->else->return->CoderResult->malformedForLength->else->if->else->if->continue->if->return->switch->break->switch->break->break->break->break->if->return->dec0208->decodeDouble->if->return->CoderResult->unmappableForLength->break->if->return->dec0212->decodeDouble->if->return->CoderResult->unmappableForLength->break->if->return->CoderResult->malformedForLength->break->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
ISO2022_JP.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->b1->b2->b3->b4->c->inputSize->try->while->src->hasRemaining->src->get->if->return->CoderResult->malformedForLength->if->if->if->src->remaining->return->src->get->if->src->get->if->else->if->else->if->else->return->CoderResult->malformedForLength->else->if->src->get->if->else->if->else->if->if->src->hasRemaining->return->src->get->if->else->return->CoderResult->malformedForLength->else->return->CoderResult->malformedForLength->else->return->CoderResult->malformedForLength->else->if->else->if->continue->if->dst->hasRemaining->return->switch->dst->put->break->switch->dst->put->break->dst->put->break->dst->put->break->break->if->src->hasRemaining->return->src->get->dec0208->decodeDouble->if->return->CoderResult->unmappableForLength->dst->put->break->if->src->hasRemaining->return->src->get->dec0212->decodeDouble->if->return->CoderResult->unmappableForLength->dst->put->break->if->return->CoderResult->malformedForLength->dst->put->break->return->catch->finally->src->position
ISO2022_JP.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
ISO2022_JP.Decoder#implFlush(CharBuffer)::: decoder impl flush:::return->super->implFlush
ISO2022_JP.Encoder#encodeSingle(char)::: encoder encode single:::return
ISO2022_JP.Encoder#implReset()::: encoder impl reset:::
ISO2022_JP.Encoder#implReplaceWith(byte[])::: encoder impl replace with:::if->else->if
ISO2022_JP.Encoder#implFlush(ByteBuffer)::: encoder impl flush:::if->if->out->remaining->return->out->put->out->put->out->put->return
ISO2022_JP.Encoder#canEncode(char)::: encoder can encode:::return->enc0208->canEncode->enc0212->canEncode
ISO2022_JP.Encoder#encodeArrayLoop(CharBuffer, ByteBuffer)::: encoder encode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->c->if->if->if->return->if->return->else->if->if->if->return->if->return->else->if->if->if->return->if->return->else->index->enc0208->encodeChar->if->if->if->return->if->return->else->if->enc0212->encodeChar->if->if->return->if->return->else->if->Character->isSurrogate->sgp->parse->return->sgp->error->if->unmappableCharacterAction->if->return->if->else->if->Character->isSurrogate->return->sgp->unmappableResult->return->CoderResult->unmappableForLength->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
ISO2022_JP.Encoder#encodeBufferLoop(CharBuffer, ByteBuffer)::: encoder encode buffer loop:::mark->src->position->try->while->src->hasRemaining->c->src->get->if->if->if->dst->remaining->return->dst->put->dst->put->dst->put->if->dst->remaining->return->dst->put->else->if->if->if->dst->remaining->return->dst->put->dst->put->dst->put->if->dst->remaining->return->dst->put->else->if->if->if->dst->remaining->return->dst->put->dst->put->dst->put->if->dst->remaining->return->dst->put->else->index->enc0208->encodeChar->if->if->if->dst->remaining->return->dst->put->dst->put->dst->put->if->dst->remaining->return->dst->put->dst->put->else->if->enc0212->encodeChar->if->if->dst->remaining->return->dst->put->dst->put->dst->put->dst->put->if->dst->remaining->return->dst->put->dst->put->else->if->Character->isSurrogate->sgp->parse->return->sgp->error->if->unmappableCharacterAction->if->dst->remaining->return->if->dst->put->dst->put->dst->put->else->dst->put->dst->put->dst->put->if->Character->isSurrogate->return->sgp->unmappableResult->return->CoderResult->unmappableForLength->return->catch->finally->src->position
ISO2022_JP.Encoder#encodeLoop(CharBuffer, ByteBuffer)::: encoder encode loop:::if->src->hasArray->dst->hasArray->return->encodeArrayLoop->else->return->encodeBufferLoop
ISO2022_JP_2#historicalName()::: o2022_ p_2 historical name:::return
ISO2022_JP_2#contains(Charset)::: o2022_ p_2 contains:::return->super->contains
ISO2022_JP_2#newDecoder()::: o2022_ p_2 new decoder:::return->new->Decoder
ISO2022_JP_2#newEncoder()::: o2022_ p_2 new encoder:::return->new->Encoder
ISO2022_KR#contains(Charset)::: o2022_ r contains:::return->cs->name->equals
ISO2022_KR#historicalName()::: o2022_ r historical name:::return
ISO2022_KR#newDecoder()::: o2022_ r new decoder:::return->new->Decoder
ISO2022_KR#newEncoder()::: o2022_ r new encoder:::return->new->Encoder
ISO2022_KR.Encoder#canEncode(char)::: encoder can encode:::return->ISOEncoder->canEncode
ISO_8859_11#historicalName()::: o_8859_11 historical name:::return
ISO_8859_11#contains(Charset)::: o_8859_11 contains:::return->cs->name->equals
ISO_8859_11#newDecoder()::: o_8859_11 new decoder:::return->new->SingleByte.Decoder
ISO_8859_11#newEncoder()::: o_8859_11 new encoder:::return->new->SingleByte.Encoder
ISO_8859_3#historicalName()::: o_8859_3 historical name:::return
ISO_8859_3#contains(Charset)::: o_8859_3 contains:::return->cs->name->equals
ISO_8859_3#newDecoder()::: o_8859_3 new decoder:::return->new->SingleByte.Decoder
ISO_8859_3#newEncoder()::: o_8859_3 new encoder:::return->new->SingleByte.Encoder
ISO_8859_6#historicalName()::: o_8859_6 historical name:::return
ISO_8859_6#contains(Charset)::: o_8859_6 contains:::return->cs->name->equals
ISO_8859_6#newDecoder()::: o_8859_6 new decoder:::return->new->SingleByte.Decoder
ISO_8859_6#newEncoder()::: o_8859_6 new encoder:::return->new->SingleByte.Encoder
ISO_8859_8#historicalName()::: o_8859_8 historical name:::return
ISO_8859_8#contains(Charset)::: o_8859_8 contains:::return->cs->name->equals
ISO_8859_8#newDecoder()::: o_8859_8 new decoder:::return->new->SingleByte.Decoder
ISO_8859_8#newEncoder()::: o_8859_8 new encoder:::return->new->SingleByte.Encoder
JISAutoDetect#contains(Charset)::: auto detect contains:::return->cs->name->equals
JISAutoDetect#canEncode()::: auto detect can encode:::return
JISAutoDetect#newDecoder()::: auto detect new decoder:::return->new->Decoder
JISAutoDetect#historicalName()::: auto detect historical name:::return
JISAutoDetect#newEncoder()::: auto detect new encoder:::throw->new->UnsupportedOperationException
JISAutoDetect#looksLikeJapanese(CharBuffer)::: auto detect looks like japanese:::hiragana->katakana->while->cb->hasRemaining->c->cb->get->if->return->if->return->return
JISAutoDetect.Decoder#isPlainASCII(byte)::: decoder is plain i:::return
JISAutoDetect.Decoder#copyLeadingASCII(ByteBuffer, CharBuffer)::: decoder copy leading i:::start->src->position->limit->Math->src->remaining->dst->remaining->min->p->b->for->src->get->isPlainASCII->src->position
JISAutoDetect.Decoder#decodeLoop(DelegatableDecoder, ByteBuffer, CharBuffer)::: decoder decode loop:::reset->return->detectedDecoder->decodeLoop
JISAutoDetect.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->copyLeadingASCII->if->src->hasRemaining->return->if->dst->hasRemaining->src->src->position->get->isPlainASCII->return->cbufsiz->src->limit->maxCharsPerByte->sandbox->CharBuffer->allocate->cs2022->Charset->forName->dd2022->cs2022->newDecoder->src2022->src->asReadOnlyBuffer->res2022->dd2022->decodeLoop->if->res2022->isError->return->decodeLoop->csEUCJ->Charset->forName->csSJIS->Charset->forName->ddEUCJ->csEUCJ->newDecoder->ddSJIS->csSJIS->newDecoder->srcEUCJ->src->asReadOnlyBuffer->sandbox->clear->resEUCJ->ddEUCJ->decodeLoop->if->resEUCJ->isError->return->decodeLoop->srcSJIS->src->asReadOnlyBuffer->sandboxSJIS->CharBuffer->allocate->resSJIS->ddSJIS->decodeLoop->if->resSJIS->isError->return->decodeLoop->if->srcEUCJ->position->srcSJIS->position->return->decodeLoop->if->srcEUCJ->position->srcSJIS->position->return->decodeLoop->if->src->position->srcEUCJ->position->return->sandbox->flip->return->looksLikeJapanese->decodeLoop->return->detectedDecoder->decodeLoop
JISAutoDetect.Decoder#implReset()::: decoder impl reset:::
JISAutoDetect.Decoder#implFlush(CharBuffer)::: decoder impl flush:::if->return->detectedDecoder->implFlush->else->return->super->implFlush
JISAutoDetect.Decoder#isAutoDetecting()::: decoder is auto detecting:::return
JISAutoDetect.Decoder#isCharsetDetected()::: decoder is charset detected:::return
JISAutoDetect.Decoder#detectedCharset()::: decoder detected charset:::if->throw->new->IllegalStateException->return->charset
JISAutoDetect.Decoder#getSJISName():::Returned Shift_JIS Charset name is OS dependent:::if->osName->equals->osName->equals->return->else->if->osName->startsWith->return->else->return
JISAutoDetect.Decoder#getEUCJPName()::: decoder get name:::if->osName->equals->osName->equals->return->else->return
JIS_X_0208#historicalName()::: s_ x_0208 historical name:::return
JIS_X_0208#contains(Charset)::: s_ x_0208 contains:::return
JIS_X_0208#newDecoder()::: s_ x_0208 new decoder:::initb2c->return->new->DoubleByte.Decoder_DBCSONLY
JIS_X_0208#newEncoder()::: s_ x_0208 new encoder:::initc2b->return->new->byteArr->new->DoubleByte.Encoder_DBCSONLY
JIS_X_0208#initb2c()::: s_ x_0208 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
JIS_X_0208#initc2b()::: s_ x_0208 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
JIS_X_0208_MS5022X#historicalName()::: s_ x_0208_ s5022 x historical name:::return
JIS_X_0208_MS5022X#contains(Charset)::: s_ x_0208_ s5022 x contains:::return
JIS_X_0208_MS5022X#newDecoder()::: s_ x_0208_ s5022 x new decoder:::initb2c->return->new->DoubleByte.Decoder_DBCSONLY
JIS_X_0208_MS5022X#newEncoder()::: s_ x_0208_ s5022 x new encoder:::initc2b->return->new->byteArr->new->DoubleByte.Encoder_DBCSONLY
JIS_X_0208_MS5022X#initb2c()::: s_ x_0208_ s5022 x initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
JIS_X_0208_MS5022X#initc2b()::: s_ x_0208_ s5022 x initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
JIS_X_0208_MS932#historicalName()::: s_ x_0208_ s932 historical name:::return
JIS_X_0208_MS932#contains(Charset)::: s_ x_0208_ s932 contains:::return
JIS_X_0208_MS932#newDecoder()::: s_ x_0208_ s932 new decoder:::initb2c->return->new->DoubleByte.Decoder_DBCSONLY
JIS_X_0208_MS932#newEncoder()::: s_ x_0208_ s932 new encoder:::initc2b->return->new->byteArr->new->DoubleByte.Encoder_DBCSONLY
JIS_X_0208_MS932#initb2c()::: s_ x_0208_ s932 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
JIS_X_0208_MS932#initc2b()::: s_ x_0208_ s932 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
JIS_X_0208_Solaris#historicalName()::: s_ x_0208_ solaris historical name:::return
JIS_X_0208_Solaris#contains(Charset)::: s_ x_0208_ solaris contains:::return
JIS_X_0208_Solaris#newDecoder()::: s_ x_0208_ solaris new decoder:::initb2c->return->new->DoubleByte.Decoder_DBCSONLY
JIS_X_0208_Solaris#newEncoder()::: s_ x_0208_ solaris new encoder:::initc2b->return->new->byteArr->new->DoubleByte.Encoder_DBCSONLY
JIS_X_0208_Solaris#initb2c()::: s_ x_0208_ solaris initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
JIS_X_0208_Solaris#initc2b()::: s_ x_0208_ solaris initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
JIS_X_0212#historicalName()::: s_ x_0212 historical name:::return
JIS_X_0212#contains(Charset)::: s_ x_0212 contains:::return
JIS_X_0212#newDecoder()::: s_ x_0212 new decoder:::initb2c->return->new->DoubleByte.Decoder_DBCSONLY
JIS_X_0212#newEncoder()::: s_ x_0212 new encoder:::initc2b->return->new->byteArr->new->DoubleByte.Encoder_DBCSONLY
JIS_X_0212#initb2c()::: s_ x_0212 initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
JIS_X_0212#initc2b()::: s_ x_0212 initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
JIS_X_0212_MS5022X#historicalName()::: s_ x_0212_ s5022 x historical name:::return
JIS_X_0212_MS5022X#contains(Charset)::: s_ x_0212_ s5022 x contains:::return
JIS_X_0212_MS5022X#newDecoder()::: s_ x_0212_ s5022 x new decoder:::initb2c->return->new->DoubleByte.Decoder_DBCSONLY
JIS_X_0212_MS5022X#newEncoder()::: s_ x_0212_ s5022 x new encoder:::initc2b->return->new->byteArr->new->DoubleByte.Encoder_DBCSONLY
JIS_X_0212_MS5022X#initb2c()::: s_ x_0212_ s5022 x initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
JIS_X_0212_MS5022X#initc2b()::: s_ x_0212_ s5022 x initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
JIS_X_0212_Solaris#historicalName()::: s_ x_0212_ solaris historical name:::return
JIS_X_0212_Solaris#contains(Charset)::: s_ x_0212_ solaris contains:::return
JIS_X_0212_Solaris#newDecoder()::: s_ x_0212_ solaris new decoder:::initb2c->return->new->DoubleByte.Decoder_DBCSONLY
JIS_X_0212_Solaris#newEncoder()::: s_ x_0212_ solaris new encoder:::initc2b->return->new->byteArr->new->DoubleByte.Encoder_DBCSONLY
JIS_X_0212_Solaris#initb2c()::: s_ x_0212_ solaris initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
JIS_X_0212_Solaris#initc2b()::: s_ x_0212_ solaris initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
MacArabic#historicalName()::: mac arabic historical name:::return
MacArabic#contains(Charset)::: mac arabic contains:::return
MacArabic#newDecoder()::: mac arabic new decoder:::return->new->SingleByte.Decoder
MacArabic#newEncoder()::: mac arabic new encoder:::return->new->SingleByte.Encoder
MacCentralEurope#historicalName()::: mac central europe historical name:::return
MacCentralEurope#contains(Charset)::: mac central europe contains:::return
MacCentralEurope#newDecoder()::: mac central europe new decoder:::return->new->SingleByte.Decoder
MacCentralEurope#newEncoder()::: mac central europe new encoder:::return->new->SingleByte.Encoder
MacCroatian#historicalName()::: mac croatian historical name:::return
MacCroatian#contains(Charset)::: mac croatian contains:::return
MacCroatian#newDecoder()::: mac croatian new decoder:::return->new->SingleByte.Decoder
MacCroatian#newEncoder()::: mac croatian new encoder:::return->new->SingleByte.Encoder
MacCyrillic#historicalName()::: mac cyrillic historical name:::return
MacCyrillic#contains(Charset)::: mac cyrillic contains:::return
MacCyrillic#newDecoder()::: mac cyrillic new decoder:::return->new->SingleByte.Decoder
MacCyrillic#newEncoder()::: mac cyrillic new encoder:::return->new->SingleByte.Encoder
MacDingbat#historicalName()::: mac dingbat historical name:::return
MacDingbat#contains(Charset)::: mac dingbat contains:::return
MacDingbat#newDecoder()::: mac dingbat new decoder:::return->new->SingleByte.Decoder
MacDingbat#newEncoder()::: mac dingbat new encoder:::return->new->SingleByte.Encoder
MacGreek#historicalName()::: mac greek historical name:::return
MacGreek#contains(Charset)::: mac greek contains:::return
MacGreek#newDecoder()::: mac greek new decoder:::return->new->SingleByte.Decoder
MacGreek#newEncoder()::: mac greek new encoder:::return->new->SingleByte.Encoder
MacHebrew#historicalName()::: mac hebrew historical name:::return
MacHebrew#contains(Charset)::: mac hebrew contains:::return
MacHebrew#newDecoder()::: mac hebrew new decoder:::return->new->SingleByte.Decoder
MacHebrew#newEncoder()::: mac hebrew new encoder:::return->new->SingleByte.Encoder
MacIceland#historicalName()::: mac iceland historical name:::return
MacIceland#contains(Charset)::: mac iceland contains:::return
MacIceland#newDecoder()::: mac iceland new decoder:::return->new->SingleByte.Decoder
MacIceland#newEncoder()::: mac iceland new encoder:::return->new->SingleByte.Encoder
MacRoman#historicalName()::: mac roman historical name:::return
MacRoman#contains(Charset)::: mac roman contains:::return
MacRoman#newDecoder()::: mac roman new decoder:::return->new->SingleByte.Decoder
MacRoman#newEncoder()::: mac roman new encoder:::return->new->SingleByte.Encoder
MacRomania#historicalName()::: mac romania historical name:::return
MacRomania#contains(Charset)::: mac romania contains:::return
MacRomania#newDecoder()::: mac romania new decoder:::return->new->SingleByte.Decoder
MacRomania#newEncoder()::: mac romania new encoder:::return->new->SingleByte.Encoder
MacSymbol#historicalName()::: mac symbol historical name:::return
MacSymbol#contains(Charset)::: mac symbol contains:::return
MacSymbol#newDecoder()::: mac symbol new decoder:::return->new->SingleByte.Decoder
MacSymbol#newEncoder()::: mac symbol new encoder:::return->new->SingleByte.Encoder
MacThai#historicalName()::: mac thai historical name:::return
MacThai#contains(Charset)::: mac thai contains:::return
MacThai#newDecoder()::: mac thai new decoder:::return->new->SingleByte.Decoder
MacThai#newEncoder()::: mac thai new encoder:::return->new->SingleByte.Encoder
MacTurkish#historicalName()::: mac turkish historical name:::return
MacTurkish#contains(Charset)::: mac turkish contains:::return
MacTurkish#newDecoder()::: mac turkish new decoder:::return->new->SingleByte.Decoder
MacTurkish#newEncoder()::: mac turkish new encoder:::return->new->SingleByte.Encoder
MacUkraine#historicalName()::: mac ukraine historical name:::return
MacUkraine#contains(Charset)::: mac ukraine contains:::return
MacUkraine#newDecoder()::: mac ukraine new decoder:::return->new->SingleByte.Decoder
MacUkraine#newEncoder()::: mac ukraine new encoder:::return->new->SingleByte.Encoder
MS50220#historicalName()::: s50220 historical name:::return
MS50220#contains(Charset)::: s50220 contains:::return->super->contains
MS50220#newDecoder()::: s50220 new decoder:::return->new->Decoder
MS50220#newEncoder()::: s50220 new encoder:::return->doSBKANA->new->Encoder
MS50220#doSBKANA()::: s50220 do a:::return
MS50221#historicalName()::: s50221 historical name:::return
MS50221#contains(Charset)::: s50221 contains:::return->super->contains
MS50221#doSBKANA()::: s50221 do a:::return
MS932_0213#contains(Charset)::: s932_0213 contains:::return->cs->name->equals
MS932_0213#newDecoder()::: s932_0213 new decoder:::return->new->Decoder
MS932_0213#newEncoder()::: s932_0213 new encoder:::return->new->Encoder
MS932_0213.Decoder#decodeDouble(int, int)::: decoder decode double:::c->decMS932->decodeDouble->if->return->super->decodeDouble->return
MS932_0213.Encoder#encodeChar(char)::: encoder encode char:::db->encMS932->encodeChar->if->return->super->encodeChar->return
MSISO2022JP#historicalName()::: o2022 p historical name:::return
MSISO2022JP#contains(Charset)::: o2022 p contains:::return->super->contains
MSISO2022JP#newDecoder()::: o2022 p new decoder:::return->new->Decoder
MSISO2022JP#newEncoder()::: o2022 p new encoder:::return->new->Encoder
PCK#historicalName()::: k historical name:::return
PCK#contains(Charset)::: k contains:::return->cs->name->equals
PCK#newDecoder()::: k new decoder:::initb2c->return->new->DoubleByte.Decoder
PCK#newEncoder()::: k new encoder:::initc2b->return->new->DoubleByte.Encoder
PCK#initb2c()::: k initb2c:::if->return->synchronized->if->return->for->i->b2cSBStr->toCharArray
PCK#initc2b()::: k initc2b:::if->return->synchronized->if->return->b2cNR->c2bNR->initC2B
SimpleEUCEncoder#canEncode(char)::: simple encoder can encode:::index->theChars->if->else->if->else->if->else->if->theChars->charAt->theChars->charAt->return->return
SimpleEUCEncoder#encodeArrayLoop(CharBuffer, ByteBuffer)::: simple encoder encode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->index->spaceNeeded->i->try->while->allZeroes->inputChar->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->return->sgp->unmappableResult->if->return->CoderResult->unmappableForLength->theChars->aChar->if->else->if->else->if->else->theChars->charAt->theChars->charAt->for->if->return->CoderResult->unmappableForLength->oindex->for->if->return->for->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
SimpleEUCEncoder#encodeBufferLoop(CharBuffer, ByteBuffer)::: simple encoder encode buffer loop:::index->spaceNeeded->i->mark->src->position->try->while->src->hasRemaining->inputChar->src->get->allZeroes->if->Character->isSurrogate->if->sgp->parse->return->sgp->error->return->sgp->unmappableResult->if->return->CoderResult->unmappableForLength->theChars->aChar->if->else->if->else->if->else->theChars->charAt->theChars->charAt->for->if->return->CoderResult->unmappableForLength->oindex->for->if->dst->remaining->return->for->return->catch->finally->src->position
SimpleEUCEncoder#encodeLoop(CharBuffer, ByteBuffer)::: simple encoder encode loop:::if->src->hasArray->dst->hasArray->return->encodeArrayLoop->else->return->encodeBufferLoop
SimpleEUCEncoder#encode(char)::: simple encoder encode:::return->index2->charAt
SJIS_0213#contains(Charset)::: s_0213 contains:::return->cs->name->equals
SJIS_0213#newDecoder()::: s_0213 new decoder:::return->new->Decoder
SJIS_0213#newEncoder()::: s_0213 new encoder:::return->new->Encoder
SJIS_0213.Decoder#decodeArrayLoop(ByteBuffer, CharBuffer)::: decoder decode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->b1->c->decodeSingle->inSize->outSize->cc->if->if->return->b2->decodeDouble->if->decodeDoubleEx->if->if->decodeSingle->return->CoderResult->unmappableForLength->else->return->CoderResult->unmappableForLength->if->return->if->else->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
SJIS_0213.Decoder#decodeBufferLoop(ByteBuffer, CharBuffer)::: decoder decode buffer loop:::mark->src->position->try->while->src->hasRemaining->cc->b1->src->get->c->decodeSingle->inSize->outSize->if->if->src->remaining->return->b2->src->get->decodeDouble->if->decodeDoubleEx->if->if->decodeSingle->return->CoderResult->unmappableForLength->else->return->CoderResult->unmappableForLength->if->dst->remaining->return->if->dst->put->dst->put->else->dst->put->return->catch->finally->src->position
SJIS_0213.Decoder#decodeLoop(ByteBuffer, CharBuffer)::: decoder decode loop:::if->src->hasArray->dst->hasArray->return->decodeArrayLoop->else->return->decodeBufferLoop
SJIS_0213.Decoder#decodeSingle(int)::: decoder decode single:::return->mapping->decodeSingle
SJIS_0213.Decoder#decodeDouble(int, int)::: decoder decode double:::return->mapping->decodeDouble
SJIS_0213.Decoder#decodeDoubleEx(int, int)::: decoder decode double ex:::db->if->mapping->decodeSurrogate->return->if->mapping->decodeComposite->return->return
SJIS_0213.Encoder#canEncode(char)::: encoder can encode:::return->encodeChar
SJIS_0213.Encoder#encodeChar(char)::: encoder encode char:::return->mapping->encodeChar
SJIS_0213.Encoder#encodeSurrogate(char, char)::: encoder encode surrogate:::return->mapping->encodeSurrogate
SJIS_0213.Encoder#encodeComposite(char, char)::: encoder encode composite:::return->mapping->encodeComposite
SJIS_0213.Encoder#isCompositeBase(char)::: encoder is composite base:::return->mapping->isCompositeBase
SJIS_0213.Encoder#encodeArrayLoop(CharBuffer, ByteBuffer)::: encoder encode array loop:::sa->src->array->sp->src->arrayOffset->src->position->sl->src->arrayOffset->src->limit->da->dst->array->dp->dst->arrayOffset->dst->position->dl->dst->arrayOffset->dst->limit->try->while->db->c->if->isComp->encodeComposite->if->encodeChar->else->if->return->if->continue->if->isCompositeBase->else->encodeChar->if->if->return->else->if->if->return->else->if->Character->isHighSurrogate->if->return->c2->if->Character->isLowSurrogate->return->CoderResult->malformedForLength->encodeSurrogate->if->return->CoderResult->unmappableForLength->if->return->else->if->Character->isLowSurrogate->return->CoderResult->malformedForLength->else->return->CoderResult->unmappableForLength->return->catch->finally->src->src->arrayOffset->position->dst->dst->arrayOffset->position
SJIS_0213.Encoder#encodeBufferLoop(CharBuffer, ByteBuffer)::: encoder encode buffer loop:::mark->src->position->try->while->src->hasRemaining->db->c->src->get->if->isComp->encodeComposite->if->encodeChar->else->if->dst->remaining->return->dst->put->dst->put->if->continue->if->isCompositeBase->else->encodeChar->if->if->dst->remaining->return->dst->put->else->if->if->dst->remaining->return->dst->put->dst->put->else->if->Character->isHighSurrogate->if->src->hasRemaining->return->c2->src->get->if->Character->isLowSurrogate->return->CoderResult->malformedForLength->encodeSurrogate->if->return->CoderResult->unmappableForLength->if->dst->remaining->return->dst->put->dst->put->else->if->Character->isLowSurrogate->return->CoderResult->malformedForLength->else->return->CoderResult->unmappableForLength->return->catch->finally->src->position
SJIS_0213.Encoder#encodeLoop(CharBuffer, ByteBuffer)::: encoder encode loop:::if->src->hasArray->dst->hasArray->return->encodeArrayLoop->else->return->encodeBufferLoop
SJIS_0213.Encoder#implFlush(ByteBuffer)::: encoder impl flush:::if->if->dst->remaining->return->db->encodeChar->dst->put->dst->put->return
SJIS_0213.Encoder#implReset()::: encoder impl reset:::
TIS_620#historicalName()::: s_620 historical name:::return
TIS_620#contains(Charset)::: s_620 contains:::return->cs->name->equals
TIS_620#newDecoder()::: s_620 new decoder:::return->new->SingleByte.Decoder
TIS_620#newEncoder()::: s_620 new encoder:::return->new->SingleByte.Encoder

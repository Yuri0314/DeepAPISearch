BaseLocale#createInstance(String, String)::: base locale create instance:::base->new->BaseLocale->CACHE->new->Key->put->return
BaseLocale#getInstance(String, String, String, String)::: base locale get instance:::if->if->LocaleUtils->caseIgnoreMatch->else->if->LocaleUtils->caseIgnoreMatch->else->if->LocaleUtils->caseIgnoreMatch->key->new->Key->baseLocale->CACHE->get->return
BaseLocale#getLanguage()::: base locale get language:::return
BaseLocale#getScript()::: base locale get script:::return
BaseLocale#getRegion()::: base locale get region:::return
BaseLocale#getVariant()::: base locale get variant:::return
BaseLocale#equals(Object)::: base locale equals:::if->return->if->return->other->return
BaseLocale#toString()::: base locale to string:::sj->new->StringJoiner->if->language->isEmpty->sj->add->if->script->isEmpty->sj->add->if->region->isEmpty->sj->add->if->variant->isEmpty->sj->add->return->sj->toString
BaseLocale#hashCode()::: base locale hash code:::h->if->language->hashCode->script->hashCode->region->hashCode->variant->hashCode->if->return
BaseLocale.Key#hashCode()::: key hash code:::return
BaseLocale.Key#hashCode(BaseLocale)::: key hash code:::h->lang->locale->getLanguage->len->lang->length->for->i->scrt->locale->getScript->scrt->length->for->i->regn->locale->getRegion->regn->length->for->i->vart->locale->getVariant->vart->length->for->i->return
BaseLocale.Key#getBaseLocale()::: key get base locale:::return->holderRef->get
BaseLocale.Key#equals(Object)::: key equals:::if->return->if->other->getBaseLocale->locale->this->getBaseLocale->if->LocaleUtils->other->getLanguage->locale->getLanguage->caseIgnoreMatch->LocaleUtils->other->getScript->locale->getScript->caseIgnoreMatch->LocaleUtils->other->getRegion->locale->getRegion->caseIgnoreMatch->other->getVariant->locale->getVariant->equals->return->return
BaseLocale.Key#normalize(Key)::: key normalize:::if->return->locale->return->locale->getLanguage->locale->getScript->locale->getRegion->locale->getVariant->new->Key
BaseLocale.Cache#normalizeKey(Key)::: cache normalize key:::return->Key->normalize
BaseLocale.Cache#createObject(Key)::: cache create object:::return->Key->normalize->getBaseLocale
Extension#setValue(String)::: extension set value:::
Extension#getKey()::: extension get key:::return
Extension#getValue()::: extension get value:::return
Extension#getID()::: extension get d:::return
Extension#toString()::: extension to string:::return->getID
InternalLocaleBuilder#setLanguage(String)::: internal locale builder set language:::if->LocaleUtils->isEmpty->else->if->LanguageTag->isLanguage->throw->new->LocaleSyntaxException->return
InternalLocaleBuilder#setScript(String)::: internal locale builder set script:::if->LocaleUtils->isEmpty->else->if->LanguageTag->isScript->throw->new->LocaleSyntaxException->return
InternalLocaleBuilder#setRegion(String)::: internal locale builder set region:::if->LocaleUtils->isEmpty->else->if->LanguageTag->isRegion->throw->new->LocaleSyntaxException->return
InternalLocaleBuilder#setVariant(String)::: internal locale builder set variant:::if->LocaleUtils->isEmpty->else->var->variant->replaceAll->errIdx->checkVariants->if->throw->new->LocaleSyntaxException->return
InternalLocaleBuilder#addUnicodeLocaleAttribute(String)::: internal locale builder add unicode locale attribute:::if->UnicodeLocaleExtension->isAttribute->throw->new->LocaleSyntaxException->if->new->HashSet<>->uattributes->new->CaseInsensitiveString->add->return
InternalLocaleBuilder#removeUnicodeLocaleAttribute(String)::: internal locale builder remove unicode locale attribute:::if->UnicodeLocaleExtension->isAttribute->throw->new->LocaleSyntaxException->if->uattributes->new->CaseInsensitiveString->remove->return
InternalLocaleBuilder#setUnicodeLocaleKeyword(String, String)::: internal locale builder set unicode locale keyword:::if->UnicodeLocaleExtension->isKey->throw->new->LocaleSyntaxException->cikey->new->CaseInsensitiveString->if->if->ukeywords->remove->else->if->type->length->tp->type->replaceAll->itr->new->StringTokenIterator->while->itr->isDone->s->itr->current->if->UnicodeLocaleExtension->isTypeSubtag->throw->itr->currentStart->new->LocaleSyntaxException->itr->next->if->new->HashMap<>->ukeywords->put->return
InternalLocaleBuilder#setExtension(char, String)::: internal locale builder set extension:::isBcpPrivateuse->LanguageTag->isPrivateusePrefixChar->if->LanguageTag->isExtensionSingletonChar->throw->new->LocaleSyntaxException->remove->LocaleUtils->isEmpty->key->new->CaseInsensitiveChar->if->if->UnicodeLocaleExtension->key->value->isSingletonChar->if->uattributes->clear->if->ukeywords->clear->else->if->extensions->containsKey->extensions->remove->else->val->value->replaceAll->itr->new->StringTokenIterator->while->itr->isDone->s->itr->current->validSubtag->if->LanguageTag->isPrivateuseSubtag->else->LanguageTag->isExtensionSubtag->if->throw->itr->currentStart->new->LocaleSyntaxException->itr->next->if->UnicodeLocaleExtension->key->value->isSingletonChar->setUnicodeLocaleExtension->else->if->new->HashMap<>->extensions->put->return
InternalLocaleBuilder#setExtensions(String)::: internal locale builder set extensions:::if->LocaleUtils->isEmpty->clearExtensions->return->subtags->replaceAll->itr->new->StringTokenIterator->extensions->privateuse->parsed->start->while->itr->isDone->s->itr->current->if->LanguageTag->isExtensionSingleton->itr->currentStart->singleton->sb->new->StringBuilder->itr->next->while->itr->isDone->itr->current->if->LanguageTag->isExtensionSubtag->sb->append->append->itr->currentEnd->else->break->itr->next->if->throw->new->LocaleSyntaxException->if->new->ArrayList<>->extensions->sb->toString->add->else->break->if->itr->isDone->s->itr->current->if->LanguageTag->isPrivateusePrefix->itr->currentStart->sb->new->StringBuilder->itr->next->while->itr->isDone->itr->current->if->LanguageTag->isPrivateuseSubtag->break->sb->append->append->itr->currentEnd->itr->next->if->throw->subtags->substring->new->LocaleSyntaxException->else->sb->toString->if->itr->isDone->throw->subtags->itr->currentStart->substring->itr->currentStart->new->LocaleSyntaxException->return->setExtensions
InternalLocaleBuilder#setExtensions(List, String)::: internal locale builder set extensions:::clearExtensions->if->LocaleUtils->isEmpty->done->bcpExtensions->size->new->HashSet<>->foreach->key->new->CaseInsensitiveChar->if->done->contains->if->UnicodeLocaleExtension->key->value->isSingletonChar->bcpExt->substring->setUnicodeLocaleExtension->else->if->new->HashMap<>->extensions->bcpExt->substring->put->done->add->if->privateuse->length->if->new->HashMap<>->extensions->new->CaseInsensitiveChar->privateuse->substring->put->return
InternalLocaleBuilder#setLanguageTag(LanguageTag)::: internal locale builder set language tag:::clear->if->langtag->getExtlangs->isEmpty->langtag->getExtlangs->get->else->lang->langtag->getLanguage->if->lang->equals->langtag->getScript->langtag->getRegion->bcpVariants->langtag->getVariants->if->bcpVariants->isEmpty->var->bcpVariants->get->new->StringBuilder->size->bcpVariants->size->for->i->var->toString->langtag->getExtensions->langtag->getPrivateuse->setExtensions->return
InternalLocaleBuilder#setLocale(BaseLocale, LocaleExtensions)::: internal locale builder set locale:::language->base->getLanguage->script->base->getScript->region->base->getRegion->variant->base->getVariant->if->language->equals->region->equals->variant->equals->else->if->language->equals->region->equals->variant->equals->else->if->language->equals->region->equals->variant->equals->if->language->length->LanguageTag->isLanguage->throw->new->LocaleSyntaxException->if->script->length->LanguageTag->isScript->throw->new->LocaleSyntaxException->if->region->length->LanguageTag->isRegion->throw->new->LocaleSyntaxException->if->variant->length->errIdx->checkVariants->if->throw->new->LocaleSyntaxException->clearExtensions->extKeys->localeExtensions->getKeys->if->foreach->e->localeExtensions->getExtension->if->ue->foreach->ue->getUnicodeLocaleAttributes->if->new->HashSet<>->uattributes->new->CaseInsensitiveString->add->foreach->ue->getUnicodeLocaleKeys->if->new->HashMap<>->ukeywords->new->CaseInsensitiveString->ue->getUnicodeLocaleType->put->else->if->new->HashMap<>->extensions->new->CaseInsensitiveChar->e->getValue->put->return
InternalLocaleBuilder#clear()::: internal locale builder clear:::clearExtensions->return
InternalLocaleBuilder#clearExtensions()::: internal locale builder clear extensions:::if->extensions->clear->if->uattributes->clear->if->ukeywords->clear->return
InternalLocaleBuilder#getBaseLocale()::: internal locale builder get base locale:::language->script->region->variant->if->privuse->extensions->get->if->itr->new->StringTokenIterator->sawPrefix->privVarStart->while->itr->isDone->if->itr->currentStart->break->if->LocaleUtils->itr->current->caseIgnoreMatch->itr->next->if->sb->new->StringBuilder->if->sb->length->sb->append->sb->privuse->substring->replaceAll->append->sb->toString->return->BaseLocale->getInstance
InternalLocaleBuilder#getLocaleExtensions()::: internal locale builder get locale extensions:::if->LocaleUtils->isEmpty->LocaleUtils->isEmpty->LocaleUtils->isEmpty->return->lext->new->LocaleExtensions->return->lext->isEmpty
InternalLocaleBuilder#removePrivateuseVariant(String)::: internal locale builder remove privateuse variant:::itr->new->StringTokenIterator->prefixStart->sawPrivuseVar->while->itr->isDone->if->break->if->LocaleUtils->itr->current->caseIgnoreMatch->itr->currentStart->itr->next->if->return->return->privuseVal->substring
InternalLocaleBuilder#checkVariants(String, String)::: internal locale builder check variants:::itr->new->StringTokenIterator->while->itr->isDone->s->itr->current->if->LanguageTag->isVariant->return->itr->currentStart->itr->next->return
InternalLocaleBuilder#setUnicodeLocaleExtension(String)::: internal locale builder set unicode locale extension:::if->uattributes->clear->if->ukeywords->clear->itr->new->StringTokenIterator->while->itr->isDone->if->UnicodeLocaleExtension->itr->current->isAttribute->break->if->new->HashSet<>->uattributes->itr->current->new->CaseInsensitiveString->add->itr->next->key->type->typeStart->typeEnd->while->itr->isDone->if->if->UnicodeLocaleExtension->itr->current->isKey->subtags->substring->if->new->HashMap<>->ukeywords->put->tmpKey->itr->current->new->CaseInsensitiveString->ukeywords->containsKey->else->if->itr->currentStart->itr->currentEnd->else->if->UnicodeLocaleExtension->itr->current->isKey->itr->current->new->CaseInsensitiveString->if->ukeywords->containsKey->if->itr->hasNext->if->subtags->substring->if->new->HashMap<>->ukeywords->put->break->itr->next
InternalLocaleBuilder.CaseInsensitiveString#value()::: case insensitive string value:::return
InternalLocaleBuilder.CaseInsensitiveString#hashCode()::: case insensitive string hash code:::return->lowerStr->hashCode
InternalLocaleBuilder.CaseInsensitiveString#equals(Object)::: case insensitive string equals:::if->return->if->return->return->lowerStr->equals
InternalLocaleBuilder.CaseInsensitiveChar#value()::: case insensitive char value:::return
InternalLocaleBuilder.CaseInsensitiveChar#hashCode()::: case insensitive char hash code:::return
InternalLocaleBuilder.CaseInsensitiveChar#equals(Object)::: case insensitive char equals:::if->return->if->return->return
LanguageTag#parse(String, ParseStatus)::: language tag parse:::if->new->ParseStatus->else->sts->reset->itr->gfmap->GRANDFATHERED->LocaleUtils->toLowerString->get->if->new->StringTokenIterator->else->new->StringTokenIterator->tag->new->LanguageTag->if->tag->parseLanguage->tag->parseExtlangs->tag->parseScript->tag->parseRegion->tag->parseVariants->tag->parseExtensions->tag->parsePrivateuse->if->itr->isDone->sts->isError->s->itr->current->itr->currentStart->if->s->length->else->return
LanguageTag#parseLanguage(StringTokenIterator, ParseStatus)::: language tag parse language:::if->itr->isDone->sts->isError->return->found->s->itr->current->if->isLanguage->itr->currentEnd->itr->next->return
LanguageTag#parseExtlangs(StringTokenIterator, ParseStatus)::: language tag parse extlangs:::if->itr->isDone->sts->isError->return->found->while->itr->isDone->s->itr->current->if->isExtlang->break->if->extlangs->isEmpty->new->ArrayList<>->extlangs->add->itr->currentEnd->itr->next->if->extlangs->size->break->return
LanguageTag#parseScript(StringTokenIterator, ParseStatus)::: language tag parse script:::if->itr->isDone->sts->isError->return->found->s->itr->current->if->isScript->itr->currentEnd->itr->next->return
LanguageTag#parseRegion(StringTokenIterator, ParseStatus)::: language tag parse region:::if->itr->isDone->sts->isError->return->found->s->itr->current->if->isRegion->itr->currentEnd->itr->next->return
LanguageTag#parseVariants(StringTokenIterator, ParseStatus)::: language tag parse variants:::if->itr->isDone->sts->isError->return->found->while->itr->isDone->s->itr->current->if->isVariant->break->if->variants->isEmpty->new->ArrayList<>->variants->add->itr->currentEnd->itr->next->return
LanguageTag#parseExtensions(StringTokenIterator, ParseStatus)::: language tag parse extensions:::if->itr->isDone->sts->isError->return->found->while->itr->isDone->s->itr->current->if->isExtensionSingleton->start->itr->currentStart->singleton->sb->new->StringBuilder->itr->next->while->itr->isDone->itr->current->if->isExtensionSubtag->sb->append->append->itr->currentEnd->else->break->itr->next->if->break->if->extensions->isEmpty->new->ArrayList<>->extensions->sb->toString->add->else->break->return
LanguageTag#parsePrivateuse(StringTokenIterator, ParseStatus)::: language tag parse privateuse:::if->itr->isDone->sts->isError->return->found->s->itr->current->if->isPrivateusePrefix->start->itr->currentStart->sb->new->StringBuilder->itr->next->while->itr->isDone->itr->current->if->isPrivateuseSubtag->break->sb->append->append->itr->currentEnd->itr->next->if->else->sb->toString->return
LanguageTag#parseLocale(BaseLocale, LocaleExtensions)::: language tag parse locale:::tag->new->LanguageTag->language->baseLocale->getLanguage->script->baseLocale->getScript->region->baseLocale->getRegion->variant->baseLocale->getVariant->hasSubtag->privuseVar->if->isLanguage->if->language->equals->else->if->language->equals->else->if->language->equals->if->isScript->canonicalizeScript->if->isRegion->canonicalizeRegion->if->equals->equals->variant->equals->if->variant->length->variants->varitr->new->StringTokenIterator->while->varitr->isDone->var->varitr->current->if->isVariant->break->if->new->ArrayList<>->variants->add->varitr->next->if->if->varitr->isDone->sj->new->StringJoiner->while->varitr->isDone->prvv->varitr->current->if->isPrivateuseSubtag->break->sj->add->varitr->next->if->sj->length->sj->toString->extensions->privateuse->if->locextKeys->localeExtensions->getKeys->foreach->ext->localeExtensions->getExtension->if->isPrivateusePrefixChar->ext->getValue->else->if->new->ArrayList<>->extensions->locextKey->toString->ext->getValue->add->if->if->if->else->privuseVar->replace->if->if->length->return
LanguageTag#getLanguage()::: language tag get language:::return
LanguageTag#getExtlangs()::: language tag get extlangs:::if->extlangs->isEmpty->return->Collections->emptyList->return->Collections->unmodifiableList
LanguageTag#getScript()::: language tag get script:::return
LanguageTag#getRegion()::: language tag get region:::return
LanguageTag#getVariants()::: language tag get variants:::if->variants->isEmpty->return->Collections->emptyList->return->Collections->unmodifiableList
LanguageTag#getExtensions()::: language tag get extensions:::if->extensions->isEmpty->return->Collections->emptyList->return->Collections->unmodifiableList
LanguageTag#getPrivateuse()::: language tag get privateuse:::return
LanguageTag#isLanguage(String)::: language tag is language:::len->s->length->return->LocaleUtils->isAlphaString
LanguageTag#isExtlang(String)::: language tag is extlang:::return->s->length->LocaleUtils->isAlphaString
LanguageTag#isScript(String)::: language tag is script:::return->s->length->LocaleUtils->isAlphaString
LanguageTag#isRegion(String)::: language tag is region:::return->s->length->LocaleUtils->isAlphaString->s->length->LocaleUtils->isNumericString
LanguageTag#isVariant(String)::: language tag is variant:::len->s->length->if->return->LocaleUtils->isAlphaNumericString->if->return->LocaleUtils->s->charAt->isNumeric->LocaleUtils->s->charAt->isAlphaNumeric->LocaleUtils->s->charAt->isAlphaNumeric->LocaleUtils->s->charAt->isAlphaNumeric->return
LanguageTag#isExtensionSingleton(String)::: language tag is extension singleton:::return->s->length->LocaleUtils->isAlphaString->LocaleUtils->caseIgnoreMatch
LanguageTag#isExtensionSingletonChar(char)::: language tag is extension singleton char:::return->String->valueOf->isExtensionSingleton
LanguageTag#isExtensionSubtag(String)::: language tag is extension subtag:::len->s->length->return->LocaleUtils->isAlphaNumericString
LanguageTag#isPrivateusePrefix(String)::: language tag is privateuse prefix:::return->s->length->LocaleUtils->caseIgnoreMatch
LanguageTag#isPrivateusePrefixChar(char)::: language tag is privateuse prefix char:::return->LocaleUtils->String->valueOf->caseIgnoreMatch
LanguageTag#isPrivateuseSubtag(String)::: language tag is privateuse subtag:::len->s->length->return->LocaleUtils->isAlphaNumericString
LanguageTag#canonicalizeLanguage(String)::: language tag canonicalize language:::return->LocaleUtils->toLowerString
LanguageTag#canonicalizeExtlang(String)::: language tag canonicalize extlang:::return->LocaleUtils->toLowerString
LanguageTag#canonicalizeScript(String)::: language tag canonicalize script:::return->LocaleUtils->toTitleString
LanguageTag#canonicalizeRegion(String)::: language tag canonicalize region:::return->LocaleUtils->toUpperString
LanguageTag#canonicalizeVariant(String)::: language tag canonicalize variant:::return->LocaleUtils->toLowerString
LanguageTag#canonicalizeExtension(String)::: language tag canonicalize extension:::return->LocaleUtils->toLowerString
LanguageTag#canonicalizeExtensionSingleton(String)::: language tag canonicalize extension singleton:::return->LocaleUtils->toLowerString
LanguageTag#canonicalizeExtensionSubtag(String)::: language tag canonicalize extension subtag:::return->LocaleUtils->toLowerString
LanguageTag#canonicalizePrivateuse(String)::: language tag canonicalize privateuse:::return->LocaleUtils->toLowerString
LanguageTag#canonicalizePrivateuseSubtag(String)::: language tag canonicalize privateuse subtag:::return->LocaleUtils->toLowerString
LanguageTag#toString()::: language tag to string:::sb->new->StringBuilder->if->language->length->sb->append->foreach->sb->append->append->if->script->length->sb->append->append->if->region->length->sb->append->append->foreach->sb->append->append->foreach->sb->append->append->if->privateuse->length->if->sb->length->sb->append->sb->append->return->sb->toString
LocaleExtensions#getKeys()::: locale extensions get keys:::if->extensionMap->isEmpty->return->Collections->emptySet->return->Collections->extensionMap->keySet->unmodifiableSet
LocaleExtensions#getExtension(Character)::: locale extensions get extension:::return->extensionMap->LocaleUtils->toLower->get
LocaleExtensions#getExtensionValue(Character)::: locale extensions get extension value:::ext->extensionMap->LocaleUtils->toLower->get->if->return->return->ext->getValue
LocaleExtensions#getUnicodeLocaleAttributes()::: locale extensions get unicode locale attributes:::ext->extensionMap->get->if->return->Collections->emptySet->return->getUnicodeLocaleAttributes
LocaleExtensions#getUnicodeLocaleKeys()::: locale extensions get unicode locale keys:::ext->extensionMap->get->if->return->Collections->emptySet->return->getUnicodeLocaleKeys
LocaleExtensions#getUnicodeLocaleType(String)::: locale extensions get unicode locale type:::ext->extensionMap->get->if->return->return->LocaleUtils->toLowerString->getUnicodeLocaleType
LocaleExtensions#isEmpty()::: locale extensions is empty:::return->extensionMap->isEmpty
LocaleExtensions#isValidKey(char)::: locale extensions is valid key:::return->LanguageTag->isExtensionSingletonChar->LanguageTag->isPrivateusePrefixChar
LocaleExtensions#isValidUnicodeLocaleKey(String)::: locale extensions is valid unicode locale key:::return->UnicodeLocaleExtension->isKey
LocaleExtensions#toID(SortedMap)::: locale extensions to d:::buf->new->StringBuilder->privuse->foreach->map->entrySet->singleton->entry->getKey->extension->entry->getValue->if->LanguageTag->isPrivateusePrefixChar->else->if->buf->length->buf->append->buf->append->if->if->buf->length->buf->append->buf->append->return->buf->toString
LocaleExtensions#toString()::: locale extensions to string:::return
LocaleExtensions#getID()::: locale extensions get d:::return
LocaleExtensions#hashCode()::: locale extensions hash code:::return->id->hashCode
LocaleExtensions#equals(Object)::: locale extensions equals:::if->return->if->return->return->id->equals
LocaleMatcher#filter(List, Collection, FilteringMode)::: locale matcher filter:::if->priorityList->isEmpty->locales->isEmpty->return->new->ArrayList<>->tags->new->ArrayList<>->foreach->tags->locale->toLanguageTag->add->filteredTags->filterTags->filteredLocales->filteredTags->size->new->ArrayList<>->foreach->filteredLocales->Locale->forLanguageTag->add->return
LocaleMatcher#filterTags(List, Collection, FilteringMode)::: locale matcher filter tags:::if->priorityList->isEmpty->tags->isEmpty->return->new->ArrayList<>->list->if->return->filterExtended->else->new->ArrayList<>->foreach->range->lr->getRange->if->range->startsWith->range->indexOf->if->return->filterExtended->else->if->if->range->charAt->else->range->replaceAll->list->lr->getWeight->new->LanguageRange->add->else->if->throw->new->IllegalArgumentException->else->list->add->return->filterBasic
LocaleMatcher#filterBasic(List, Collection)::: locale matcher filter basic:::splitIndex->splitRanges->nonZeroRanges->zeroRanges->if->priorityList->subList->priorityList->priorityList->size->subList->else->List->of->list->new->ArrayList<>->foreach->range->lr->getRange->if->range->equals->removeTagsMatchingBasicZeroRange->return->new->ArrayList<String>->else->foreach->lowerCaseTag->tag->toLowerCase->if->lowerCaseTag->startsWith->len->range->length->if->lowerCaseTag->length->lowerCaseTag->charAt->caseInsensitiveMatch->shouldIgnoreFilterBasicMatch->list->add->return
LocaleMatcher#removeTagsMatchingBasicZeroRange(List, Collection):::Removes the tag(s) which are falling in the basic exclusion range(s) i.e range(s) with q=0 and returns the updated collection:::if->zeroRange->isEmpty->removeDuplicates->return->matchingTags->new->ArrayList<>->foreach->lowerCaseTag->tag->toLowerCase->if->shouldIgnoreFilterBasicMatch->caseInsensitiveMatch->matchingTags->add->return
LocaleMatcher#removeDuplicates(Collection):::Remove duplicate tags from the given tags by ignoring case considerations.:::distinctTags->new->TreeSet<>->return->tags->stream->distinctTags->add->filter->Collectors->toList->collect
LocaleMatcher#caseInsensitiveMatch(List, String):::Returns true if the given list contains an element which matches with the given tag ignoring case considerations.:::return->list->stream->element->equalsIgnoreCase->anyMatch
LocaleMatcher#shouldIgnoreFilterBasicMatch(List, String):::The tag which is falling in the basic exclusion range(s) should not be considered as the matching tag:::if->zeroRange->isEmpty->return->foreach->range->lr->getRange->if->range->equals->return->if->tag->startsWith->len->range->length->if->tag->length->tag->charAt->return->return
LocaleMatcher#filterExtended(List, Collection)::: locale matcher filter extended:::splitIndex->splitRanges->nonZeroRanges->zeroRanges->if->priorityList->subList->priorityList->priorityList->size->subList->else->List->of->list->new->ArrayList<>->foreach->range->lr->getRange->if->range->equals->removeTagsMatchingExtendedZeroRange->return->new->ArrayList<String>->rangeSubtags->range->split->foreach->lowerCaseTag->tag->toLowerCase->tagSubtags->lowerCaseTag->split->if->equals->equals->continue->rangeIndex->matchFilterExtendedSubtags->if->caseInsensitiveMatch->shouldIgnoreFilterExtendedMatch->list->add->return
LocaleMatcher#removeTagsMatchingExtendedZeroRange(List, Collection):::Removes the tag(s) which are falling in the extended exclusion range(s) i.e range(s) with q=0 and returns the updated collection:::if->zeroRange->isEmpty->removeDuplicates->return->matchingTags->new->ArrayList<>->foreach->lowerCaseTag->tag->toLowerCase->if->shouldIgnoreFilterExtendedMatch->caseInsensitiveMatch->matchingTags->add->return
LocaleMatcher#shouldIgnoreFilterExtendedMatch(List, String):::The tag which is falling in the extended exclusion range(s) should not be considered as the matching tag:::if->zeroRange->isEmpty->return->tagSubtags->tag->split->foreach->range->lr->getRange->if->range->equals->return->rangeSubtags->range->split->if->equals->equals->continue->rangeIndex->matchFilterExtendedSubtags->if->return->return
LocaleMatcher#matchFilterExtendedSubtags(String[], String[])::: locale matcher match filter extended subtags:::rangeIndex->tagIndex->while->if->equals->else->if->equals->else->if->length->equals->break->else->return
LocaleMatcher#lookup(List, Collection)::: locale matcher lookup:::if->priorityList->isEmpty->locales->isEmpty->return->tags->new->ArrayList<>->foreach->tags->locale->toLanguageTag->add->lookedUpTag->lookupTag->if->return->else->return->Locale->forLanguageTag
LocaleMatcher#lookupTag(List, Collection)::: locale matcher lookup tag:::if->priorityList->isEmpty->tags->isEmpty->return->splitIndex->splitRanges->nonZeroRanges->zeroRanges->if->priorityList->subList->priorityList->priorityList->size->subList->else->List->of->foreach->range->lr->getRange->if->range->equals->continue->rangeForRegex->range->replace->while->rangeForRegex->length->foreach->lowerCaseTag->tag->toLowerCase->if->lowerCaseTag->matches->shouldIgnoreLookupMatch->return->truncateRange->return
LocaleMatcher#shouldIgnoreLookupMatch(List, String):::The tag which is falling in the exclusion range(s) should not be considered as the matching tag:::foreach->range->lr->getRange->if->range->equals->continue->rangeForRegex->range->replace->while->rangeForRegex->length->if->tag->matches->return->truncateRange->return
LocaleMatcher#truncateRange(String)::: locale matcher truncate range:::index->rangeForRegex->lastIndexOf->if->rangeForRegex->substring->rangeForRegex->lastIndexOf->if->rangeForRegex->length->rangeForRegex->rangeForRegex->length->substring->else->return
LocaleMatcher#splitRanges(List)::: locale matcher split ranges:::size->priorityList->size->for->index->return
LocaleMatcher#parse(String)::: locale matcher parse:::ranges->replace->toLowerCase->if->ranges->startsWith->ranges->substring->langRanges->ranges->split->list->new->ArrayList<>->tempList->new->ArrayList<>->numOfRanges->foreach->index->r->w->if->range->indexOf->else->range->substring->try->Double->range->substring->parseDouble->catch->throw->range->substring->new->IllegalArgumentException->finally->if->throw->new->IllegalArgumentException->if->tempList->contains->lr->new->LanguageRange->for->j->list->add->tempList->add->equivalent->if->getEquivalentForRegionAndVariant->tempList->contains->list->new->LanguageRange->add->tempList->add->equivalents->if->getEquivalentsForLanguage->foreach->if->tempList->contains->list->new->LanguageRange->add->tempList->add->getEquivalentForRegionAndVariant->if->tempList->contains->list->new->LanguageRange->add->tempList->add->return
LocaleMatcher#replaceFirstSubStringMatch(String, String, String):::A faster alternative approach to String.replaceFirst(), if the given string is a literal String, not a regex.:::pos->range->indexOf->if->return->else->return->range->substring->range->substr->length->substring
LocaleMatcher#getEquivalentsForLanguage(String)::: locale matcher get equivalents for language:::r->while->r->length->if->containsKey->equiv->get->return->new->StringArr->replaceFirstSubStringMatch->else->if->containsKey->equivs->get->result->new->StringArr->for->i->return->index->r->lastIndexOf->if->break->r->substring->return
LocaleMatcher#getEquivalentForRegionAndVariant(String)::: locale matcher get equivalent for region and variant:::extensionKeyIndex->getExtentionKeyIndex->foreach->keySet->index->if->range->indexOf->if->continue->len->subtag->length->if->range->length->range->charAt->return->get->replaceFirstSubStringMatch->return
LocaleMatcher#getExtentionKeyIndex(String)::: locale matcher get extention key index:::c->s->toCharArray->index->for->i->return
LocaleMatcher#mapEquivalents(List, Map>)::: locale matcher map equivalents:::if->priorityList->isEmpty->return->new->ArrayList<>->if->map->isEmpty->return->new->ArrayList<LanguageRange>->keyMap->new->HashMap<>->foreach->map->keySet->keyMap->key->toLowerCase->put->list->new->ArrayList<>->foreach->range->lr->getRange->r->hasEquivalent->while->r->length->if->keyMap->containsKey->equivalents->map->keyMap->get->get->if->len->r->length->foreach->list->equivalent->toLowerCase->range->substring->lr->getWeight->new->LanguageRange->add->break->index->r->lastIndexOf->if->break->r->substring->if->list->add->return
LocaleObjectCache#get(K)::: locale object cache get:::value->cleanStaleEntries->entry->map->get->if->entry->get->if->normalizeKey->newVal->createObject->if->return->newEntry->new->CacheEntry<>->map->putIfAbsent->if->else->entry->get->if->map->put->return
LocaleObjectCache#put(K, V)::: locale object cache put:::entry->new->CacheEntry<>->oldEntry->map->put->return->oldEntry->get
LocaleObjectCache#cleanStaleEntries()::: locale object cache clean stale entries:::entry->while->queue->poll->map->entry->getKey->remove
LocaleObjectCache#createObject(K)::: locale object cache create object:::
LocaleObjectCache#normalizeKey(K)::: locale object cache normalize key:::return
LocaleObjectCache.CacheEntry#getKey()::: cache entry get key:::return
LocaleSyntaxException#getErrorIndex()::: locale syntax exception get error index:::return
LocaleUtils#caseIgnoreMatch(String, String):::Compares two ASCII Strings s1 and s2, ignoring case.:::if->return->len->s1->length->if->s2->length->return->for->i->return
LocaleUtils#caseIgnoreCompare(String, String)::: locale utils case ignore compare:::if->return->return->toLowerString->toLowerString->compareTo
LocaleUtils#toUpper(char)::: locale utils to upper:::return->isLower
LocaleUtils#toLower(char)::: locale utils to lower:::return->isUpper
LocaleUtils#toLowerString(String):::Converts the given ASCII String to lower-case.:::len->s->length->idx->for->if->return->buf->new->charArr->for->i->return->new->String
LocaleUtils#toUpperString(String)::: locale utils to upper string:::len->s->length->idx->for->if->return->buf->new->charArr->for->i->return->new->String
LocaleUtils#toTitleString(String)::: locale utils to title string:::len->if->s->length->return->idx->if->s->charAt->isLower->for->if->return->buf->new->charArr->for->i->return->new->String
LocaleUtils#isUpper(char)::: locale utils is upper:::return
LocaleUtils#isLower(char)::: locale utils is lower:::return
LocaleUtils#isAlpha(char)::: locale utils is alpha:::return
LocaleUtils#isAlphaString(String)::: locale utils is alpha string:::len->s->length->for->i->return
LocaleUtils#isNumeric(char)::: locale utils is numeric:::return
LocaleUtils#isNumericString(String)::: locale utils is numeric string:::len->s->length->for->i->return
LocaleUtils#isAlphaNumeric(char)::: locale utils is alpha numeric:::return->isAlpha->isNumeric
LocaleUtils#isAlphaNumericString(String)::: locale utils is alpha numeric string:::len->s->length->for->i->return
LocaleUtils#isEmpty(String)::: locale utils is empty:::return->str->length
LocaleUtils#isEmpty(Set)::: locale utils is empty:::return->set->isEmpty
LocaleUtils#isEmpty(Map)::: locale utils is empty:::return->map->isEmpty
LocaleUtils#isEmpty(List)::: locale utils is empty:::return->list->isEmpty
ParseStatus#reset()::: parse status reset:::
ParseStatus#isError()::: parse status is error:::return
ParseStatus#getErrorIndex()::: parse status get error index:::return
ParseStatus#getParseLength()::: parse status get parse length:::return
ParseStatus#getErrorMessage()::: parse status get error message:::return
StringTokenIterator#first()::: string token iterator first:::setStart->return
StringTokenIterator#current()::: string token iterator current:::return
StringTokenIterator#currentStart()::: string token iterator current start:::return
StringTokenIterator#currentEnd()::: string token iterator current end:::return
StringTokenIterator#isDone()::: string token iterator is done:::return
StringTokenIterator#next()::: string token iterator next:::if->hasNext->nextDelimiter->text->substring->else->return
StringTokenIterator#hasNext()::: string token iterator has next:::return->text->length
StringTokenIterator#setStart(int)::: string token iterator set start:::if->text->length->throw->new->IndexOutOfBoundsException->nextDelimiter->text->substring->return
StringTokenIterator#setText(String)::: string token iterator set text:::setStart->return
StringTokenIterator#nextDelimiter(int)::: string token iterator next delimiter:::textlen->length->if->for->idx->else->dlmslen->dlms->length->for->idx->return
UnicodeLocaleExtension#getUnicodeLocaleAttributes()::: unicode locale extension get unicode locale attributes:::if->return->return->Collections->unmodifiableSet
UnicodeLocaleExtension#getUnicodeLocaleKeys()::: unicode locale extension get unicode locale keys:::if->return->Collections->emptySet->return->Collections->keywords->keySet->unmodifiableSet
UnicodeLocaleExtension#getUnicodeLocaleType(String)::: unicode locale extension get unicode locale type:::return->keywords->get
UnicodeLocaleExtension#isSingletonChar(char)::: unicode locale extension is singleton char:::return->LocaleUtils->toLower
UnicodeLocaleExtension#isAttribute(String)::: unicode locale extension is attribute:::len->s->length->return->LocaleUtils->isAlphaNumericString
UnicodeLocaleExtension#isKey(String)::: unicode locale extension is key:::return->s->length->LocaleUtils->isAlphaNumericString
UnicodeLocaleExtension#isTypeSubtag(String)::: unicode locale extension is type subtag:::len->s->length->return->LocaleUtils->isAlphaNumericString

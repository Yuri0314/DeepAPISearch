sun.rmi.rmic.BatchEnvironment#createClassPath(String)->ClassPath:::Create a ClassPath object for rmic from a class path string.
sun.rmi.rmic.BatchEnvironment#createClassPath(String, String)->ClassPath:::Create a ClassPath object for rmic from the relevant command line options for class path and boot class path.
sun.rmi.rmic.BatchEnvironment#getMain()->Main:::Get the instance of Main which created this environment.
sun.rmi.rmic.BatchEnvironment#getClassPath()->ClassPath:::Get the ClassPath.
sun.rmi.rmic.BatchEnvironment#addGeneratedFile(File)->void:::Remember a generated source file generated so that it can be removed later, if appropriate.
sun.rmi.rmic.BatchEnvironment#deleteGeneratedFiles()->void:::Delete all the generated source files made during the execution of this environment (those that have been registered with the "addGeneratedFile" method).
sun.rmi.rmic.BatchEnvironment#shutdown()->void:::Release resources, if any.
sun.rmi.rmic.BatchEnvironment#errorString(String, Object, Object, Object)->String:::Return the formatted, localized string for a named error message and supplied arguments
sun.rmi.rmic.BatchEnvironment#reset()->void::: batch environment reset
sun.rmi.rmic.Generator#parseArgs(String[], Main)->boolean:::Examine and consume command line arguments.
sun.rmi.rmic.Generator#generate(BatchEnvironment, ClassDefinition, File)->void:::Generate output
sun.rmi.rmic.IndentingWriter#write(int)->void:::Write a single character.
sun.rmi.rmic.IndentingWriter#write(char[], int, int)->void:::Write a portion of an array of characters.
sun.rmi.rmic.IndentingWriter#write(String, int, int)->void:::Write a portion of a String.
sun.rmi.rmic.IndentingWriter#newLine()->void:::Write a line separator
sun.rmi.rmic.IndentingWriter#checkWrite()->void:::Check if an indent needs to be written before writing the next character
sun.rmi.rmic.IndentingWriter#indentIn()->void:::Increase the current indent by the indent step.
sun.rmi.rmic.IndentingWriter#indentOut()->void:::Decrease the current indent by the indent step.
sun.rmi.rmic.IndentingWriter#pI()->void:::Indent in.
sun.rmi.rmic.IndentingWriter#pO()->void:::Indent out.
sun.rmi.rmic.IndentingWriter#p(String)->void:::Write string.
sun.rmi.rmic.IndentingWriter#pln()->void:::End current line.
sun.rmi.rmic.IndentingWriter#pln(String)->void:::Write string; end current line.
sun.rmi.rmic.IndentingWriter#plnI(String)->void:::Write string; end current line; indent in.
sun.rmi.rmic.IndentingWriter#pO(String)->void:::Indent out; write string.
sun.rmi.rmic.IndentingWriter#pOln(String)->void:::Indent out; write string; end current line.
sun.rmi.rmic.IndentingWriter#pOlnI(String)->void:::Indent out; write string; end current line; indent in
sun.rmi.rmic.IndentingWriter#p(Object)->void:::Write Object.
sun.rmi.rmic.IndentingWriter#pln(Object)->void:::Write Object; end current line.
sun.rmi.rmic.IndentingWriter#plnI(Object)->void:::Write Object; end current line; indent in.
sun.rmi.rmic.IndentingWriter#pO(Object)->void:::Indent out; write Object.
sun.rmi.rmic.IndentingWriter#pOln(Object)->void:::Indent out; write Object; end current line.
sun.rmi.rmic.IndentingWriter#pOlnI(Object)->void:::Indent out; write Object; end current line; indent in
sun.rmi.rmic.Main#output(String)->void:::Output a message.
sun.rmi.rmic.Main#error(String)->void:::Top level error message
sun.rmi.rmic.Main#error(String, String)->void::: main error
sun.rmi.rmic.Main#error(String, String, String)->void::: main error
sun.rmi.rmic.Main#usage()->void:::Usage
sun.rmi.rmic.Main#compile(String[])->boolean:::Run the compiler
sun.rmi.rmic.Main#getDestinationDir()->File:::Get the destination directory.
sun.rmi.rmic.Main#parseArgs(String[])->boolean:::Parse the arguments for compile.
sun.rmi.rmic.Main#checkGeneratorArg(String[], int)->boolean:::If this argument is for a generator, instantiate it, call parseArgs(...) and add generator to generators vector
sun.rmi.rmic.Main#addGenerator(String)->Generator:::Instantiate and add a generator to the generators array.
sun.rmi.rmic.Main#getArray(String, boolean)->String[]:::Grab a resource string and parse it into an array of strings
sun.rmi.rmic.Main#getEnv()->BatchEnvironment:::Get the correct type of BatchEnvironment
sun.rmi.rmic.Main#doCompile()->boolean:::Do the compile with the switches and files already supplied
sun.rmi.rmic.Main#compileAllClasses(BatchEnvironment)->void::: main compile all classes
sun.rmi.rmic.Main#compileClass(ClassDeclaration, ByteArrayOutputStream, BatchEnvironment)->boolean::: main compile class
sun.rmi.rmic.Main#main(String[])->void:::Main program
sun.rmi.rmic.Main#getString(String)->String:::Return the string value of a named resource in the rmic.properties resource bundle
sun.rmi.rmic.Main#getText(String)->String::: main get text
sun.rmi.rmic.Main#getText(String, int)->String::: main get text
sun.rmi.rmic.Main#getText(String, String)->String::: main get text
sun.rmi.rmic.Main#getText(String, String, String)->String::: main get text
sun.rmi.rmic.Main#getText(String, String, String, String)->String::: main get text
sun.rmi.rmic.Names#stubFor(Identifier)->Identifier:::Return stub class name for impl class name.
sun.rmi.rmic.Names#skeletonFor(Identifier)->Identifier:::Return skeleton class name for impl class name.
sun.rmi.rmic.Names#mangleClass(Identifier)->Identifier:::If necessary, convert a class name to its mangled form, i.e
sun.rmi.rmic.RemoteClass#forClass(BatchEnvironment, ClassDefinition)->RemoteClass:::Create a RemoteClass object representing the remote meta-information of the given class
sun.rmi.rmic.RemoteClass#getClassDefinition()->ClassDefinition:::Return the ClassDefinition for this class.
sun.rmi.rmic.RemoteClass#getName()->Identifier:::Return the name of the class represented by this object.
sun.rmi.rmic.RemoteClass#getRemoteInterfaces()->ClassDefinition[]:::Return an array of ClassDefinitions representing all of the remote interfaces implemented by this class
sun.rmi.rmic.RemoteClass#getRemoteMethods()->Method[]:::Return an array of RemoteClass.Method objects representing all of the remote methods implemented by this class, i.e
sun.rmi.rmic.RemoteClass#getInterfaceHash()->long:::Return the "interface hash" used to match a stub/skeleton pair for this class in the JDK 1.1 version of the stub/skeleton protocol.
sun.rmi.rmic.RemoteClass#toString()->String:::Return string representation of this object, consisting of the string "remote class " followed by the class name.
sun.rmi.rmic.RemoteClass.Method#getMemberDefinition()->MemberDefinition:::Return the definition of the actual class member corresponing to this method of a remote interface
sun.rmi.rmic.RemoteClass.Method#getName()->Identifier:::Return the name of this method.
sun.rmi.rmic.RemoteClass.Method#getType()->Type:::Return the type of this method.
sun.rmi.rmic.RemoteClass.Method#getExceptions()->ClassDeclaration[]:::Return an array of the exception classes declared to be thrown by this remote method
sun.rmi.rmic.RemoteClass.Method#getMethodHash()->long:::Return the "method hash" used to identify this remote method in the JDK 1.2 version of the stub protocol.
sun.rmi.rmic.RemoteClass.Method#toString()->String:::Return the string representation of this method.
sun.rmi.rmic.RemoteClass.Method#getOperationString()->String:::Return the string representation of this method appropriate for the construction of a java.rmi.server.Operation object.
sun.rmi.rmic.RemoteClass.Method#getNameAndDescriptor()->String:::Return a string consisting of this method's name followed by its method descriptor, using the Java VM's notation for method descriptors (see section 4.3.3 of The Java Virtual Machine Specification).
sun.rmi.rmic.RemoteClass.Method#clone()->Object:::Cloning is supported by returning a shallow copy of this object.
sun.rmi.rmic.RMIGenerator#parseArgs(String[], Main)->boolean:::Examine and consume command line arguments.
sun.rmi.rmic.RMIGenerator#generate(BatchEnvironment, ClassDefinition, File)->void:::Generate the source files for the stub and/or skeleton classes needed by RMI for the given remote implementation class.
sun.rmi.rmic.RMIGenerator#sourceFileForClass(Identifier, Identifier, File, BatchEnvironment)->File:::Return the File object that should be used as the source file for the given Java class, using the supplied destination directory for the top of the package hierarchy.
sun.rmi.rmic.Util#getOutputDirectoryFor(Identifier, File, BatchEnvironment)->File:::Return the directory that should be used for output for a given class.

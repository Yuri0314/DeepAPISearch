sun.awt.image.BufferedImageDevice#getType()->int:::Returns the type of this GraphicsDevice.
sun.awt.image.BufferedImageDevice#getIDstring()->String:::Returns the identification string associated with this GraphicsDevice.
sun.awt.image.BufferedImageDevice#getConfigurations()->GraphicsConfiguration[]:::Returns all of the GraphicsConfiguration objects associated with this GraphicsDevice.
sun.awt.image.BufferedImageDevice#getDefaultConfiguration()->GraphicsConfiguration:::Returns the default GraphicsConfiguration associated with this GraphicsDevice.
sun.awt.image.BufferedImageGraphicsConfig#getConfig(BufferedImage)->BufferedImageGraphicsConfig::: buffered image graphics config get config
sun.awt.image.BufferedImageGraphicsConfig#getConfig(BufferedImage, double, double)->BufferedImageGraphicsConfig::: buffered image graphics config get config
sun.awt.image.BufferedImageGraphicsConfig#getDevice()->GraphicsDevice:::Return the graphics device associated with this configuration.
sun.awt.image.BufferedImageGraphicsConfig#createCompatibleImage(int, int)->BufferedImage:::Returns a BufferedImage with channel layout and color model compatible with this graphics configuration
sun.awt.image.BufferedImageGraphicsConfig#getColorModel()->ColorModel:::Returns the color model associated with this configuration.
sun.awt.image.BufferedImageGraphicsConfig#getColorModel(int)->ColorModel:::Returns the color model associated with this configuration that supports the specified transparency.
sun.awt.image.BufferedImageGraphicsConfig#getDefaultTransform()->AffineTransform:::Returns the default Transform for this configuration
sun.awt.image.BufferedImageGraphicsConfig#getNormalizingTransform()->AffineTransform:::Returns a Transform that can be composed with the default Transform of a Graphics2D so that 72 units in user space will equal 1 inch in device space
sun.awt.image.BufferedImageGraphicsConfig#getBounds()->Rectangle::: buffered image graphics config get bounds
sun.awt.image.BufImgSurfaceData#createData(BufferedImage)->SurfaceData::: buf img surface data create data
sun.awt.image.BufImgSurfaceData#createData(BufferedImage, double, double)->SurfaceData::: buf img surface data create data
sun.awt.image.BufImgSurfaceData#createData(Raster, ColorModel)->SurfaceData::: buf img surface data create data
sun.awt.image.BufImgSurfaceData#createDataIC(BufferedImage, SurfaceType, double, double)->SurfaceData::: buf img surface data create data c
sun.awt.image.BufImgSurfaceData#createDataSC(BufferedImage, SurfaceType, IndexColorModel, double, double)->SurfaceData::: buf img surface data create data c
sun.awt.image.BufImgSurfaceData#createDataBC(BufferedImage, SurfaceType, int, double, double)->SurfaceData::: buf img surface data create data c
sun.awt.image.BufImgSurfaceData#createDataBP(BufferedImage, SurfaceType, double, double)->SurfaceData::: buf img surface data create data p
sun.awt.image.BufImgSurfaceData#getRenderLoops(SunGraphics2D)->RenderLoops::: buf img surface data get render loops
sun.awt.image.BufImgSurfaceData#getRaster(int, int, int, int)->java.awt.image.Raster::: buf img surface data get raster
sun.awt.image.BufImgSurfaceData#initRaster(Object, int, int, int, int, int, int, IndexColorModel)->void:::Initializes the native Ops pointer.
sun.awt.image.BufImgSurfaceData#initSolidLoops()->void::: buf img surface data init solid loops
sun.awt.image.BufImgSurfaceData#getSolidLoops(SurfaceType)->RenderLoops::: buf img surface data get solid loops
sun.awt.image.BufImgSurfaceData#getReplacement()->SurfaceData::: buf img surface data get replacement
sun.awt.image.BufImgSurfaceData#getDeviceConfiguration()->GraphicsConfiguration::: buf img surface data get device configuration
sun.awt.image.BufImgSurfaceData#getBounds()->java.awt.Rectangle::: buf img surface data get bounds
sun.awt.image.BufImgSurfaceData#checkCustomComposite()->void::: buf img surface data check custom composite
sun.awt.image.BufImgSurfaceData#getDestination()->Object:::Returns destination Image associated with this SurfaceData.
sun.awt.image.BufImgSurfaceData#getDefaultScaleX()->double::: buf img surface data get default scale x
sun.awt.image.BufImgSurfaceData#getDefaultScaleY()->double::: buf img surface data get default scale y
sun.awt.image.BufImgSurfaceManager#getPrimarySurfaceData()->SurfaceData::: buf img surface manager get primary surface data
sun.awt.image.BufImgSurfaceManager#restoreContents()->SurfaceData:::Called from platform-specific SurfaceData objects to attempt to auto-restore the contents of an accelerated surface that has been lost.
sun.awt.image.BufImgVolatileSurfaceManager#isAccelerationEnabled()->boolean:::Returns false to indicate that this surface manager cannot accelerate the image.
sun.awt.image.BufImgVolatileSurfaceManager#initAcceleratedSurface()->SurfaceData:::Returns null to indicate failure in creating the accelerated surface
sun.awt.image.ByteArrayImageSource#checkSecurity(Object, boolean)->boolean::: byte array image source check security
sun.awt.image.ByteArrayImageSource#getDecoder()->ImageDecoder::: byte array image source get decoder
sun.awt.image.ByteBandedRaster#getDataOffsets()->int[]:::Returns a copy of the data offsets array
sun.awt.image.ByteBandedRaster#getDataOffset(int)->int:::Returns data offset for the specified band
sun.awt.image.ByteBandedRaster#getScanlineStride()->int:::Returns the scanline stride -- the number of data array elements between a given sample and the sample in the same column of the next row in the same band.
sun.awt.image.ByteBandedRaster#getPixelStride()->int:::Returns the pixel stride, which is always equal to one for a Raster with a BandedSampleModel.
sun.awt.image.ByteBandedRaster#getDataStorage()->byte[][]:::Returns a reference to the entire data array.
sun.awt.image.ByteBandedRaster#getDataStorage(int)->byte[]:::Returns a reference to the specific band data array.
sun.awt.image.ByteBandedRaster#getDataElements(int, int, Object)->Object:::Returns the data elements for all bands at the specified location
sun.awt.image.ByteBandedRaster#getDataElements(int, int, int, int, Object)->Object:::Returns an  array  of data elements from the specified rectangular region
sun.awt.image.ByteBandedRaster#getByteData(int, int, int, int, int, byte[])->byte[]:::Returns a byte array  of data elements from the specified rectangular region for the specified band
sun.awt.image.ByteBandedRaster#getByteData(int, int, int, int, byte[])->byte[]:::Returns a byte array of data elements from the specified rectangular region
sun.awt.image.ByteBandedRaster#setDataElements(int, int, Object)->void:::Stores the data elements for all bands at the specified location
sun.awt.image.ByteBandedRaster#setDataElements(int, int, Raster)->void:::Stores the Raster data at the specified location
sun.awt.image.ByteBandedRaster#setDataElements(int, int, int, int, Object)->void:::Stores an array of data elements into the specified rectangular region
sun.awt.image.ByteBandedRaster#putByteData(int, int, int, int, int, byte[])->void:::Stores a byte array of data elements into the specified rectangular region
sun.awt.image.ByteBandedRaster#putByteData(int, int, int, int, byte[])->void:::Stores a byte array of data elements into the specified rectangular region
sun.awt.image.ByteBandedRaster#createWritableChild(int, int, int, int, int, int, int[])->WritableRaster:::Creates a Writable subraster given a region of the raster
sun.awt.image.ByteBandedRaster#createChild(int, int, int, int, int, int, int[])->Raster:::Creates a subraster given a region of the raster
sun.awt.image.ByteBandedRaster#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a Raster with the same layout but using a different width and height, and with new zeroed data arrays.
sun.awt.image.ByteBandedRaster#createCompatibleWritableRaster()->WritableRaster:::Creates a Raster with the same layout and the same width and height, and with new zeroed data arrays
sun.awt.image.ByteBandedRaster#toString()->String::: byte banded raster to string
sun.awt.image.ByteComponentRaster#getDataOffsets()->int[]:::Returns a copy of the data offsets array
sun.awt.image.ByteComponentRaster#getDataOffset(int)->int:::Returns the data offset for the specified band
sun.awt.image.ByteComponentRaster#getScanlineStride()->int:::Returns the scanline stride -- the number of data array elements between a given sample and the sample in the same column of the next row in the same band.
sun.awt.image.ByteComponentRaster#getPixelStride()->int:::Returns pixel stride -- the number of data array elements between two samples for the same band on the same scanline.
sun.awt.image.ByteComponentRaster#getDataStorage()->byte[]:::Returns a reference to the data array.
sun.awt.image.ByteComponentRaster#getDataElements(int, int, Object)->Object:::Returns the data elements for all bands at the specified location
sun.awt.image.ByteComponentRaster#getDataElements(int, int, int, int, Object)->Object:::Returns an array of data elements from the specified rectangular region
sun.awt.image.ByteComponentRaster#getByteData(int, int, int, int, int, byte[])->byte[]:::Returns a byte array of data elements from the specified rectangular region for the specified band
sun.awt.image.ByteComponentRaster#getByteData(int, int, int, int, byte[])->byte[]:::Returns a byte array of data elements from the specified rectangular region
sun.awt.image.ByteComponentRaster#setDataElements(int, int, Object)->void:::Stores the data elements for all bands at the specified location
sun.awt.image.ByteComponentRaster#setDataElements(int, int, Raster)->void:::Stores the Raster data at the specified location
sun.awt.image.ByteComponentRaster#setDataElements(int, int, int, int, Object)->void:::Stores an array of data elements into the specified rectangular region
sun.awt.image.ByteComponentRaster#putByteData(int, int, int, int, int, byte[])->void:::Stores a byte array of data elements into the specified rectangular region for the specified band
sun.awt.image.ByteComponentRaster#putByteData(int, int, int, int, byte[])->void:::Stores a byte array of data elements into the specified rectangular region
sun.awt.image.ByteComponentRaster#createChild(int, int, int, int, int, int, int[])->Raster:::Creates a subraster given a region of the raster
sun.awt.image.ByteComponentRaster#createWritableChild(int, int, int, int, int, int, int[])->WritableRaster:::Creates a Writable subRaster given a region of the Raster
sun.awt.image.ByteComponentRaster#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a Raster with the same layout but using a different width and height, and with new zeroed data arrays.
sun.awt.image.ByteComponentRaster#createCompatibleWritableRaster()->WritableRaster:::Creates a Raster with the same layout and the same width and height, and with new zeroed data arrays
sun.awt.image.ByteComponentRaster#verify()->void:::Verify that the layout parameters are consistent with the data
sun.awt.image.ByteComponentRaster#toString()->String::: byte component raster to string
sun.awt.image.ByteInterleavedRaster#getDataOffsets()->int[]:::Returns a copy of the data offsets array
sun.awt.image.ByteInterleavedRaster#getDataOffset(int)->int:::Returns the data offset for the specified band
sun.awt.image.ByteInterleavedRaster#getScanlineStride()->int:::Returns the scanline stride -- the number of data array elements between a given sample and the sample in the same column of the next row in the same band.
sun.awt.image.ByteInterleavedRaster#getPixelStride()->int:::Returns pixel stride -- the number of data array elements between two samples for the same band on the same scanline.
sun.awt.image.ByteInterleavedRaster#getDataStorage()->byte[]:::Returns a reference to the data array.
sun.awt.image.ByteInterleavedRaster#getDataElements(int, int, Object)->Object:::Returns the data elements for all bands at the specified location
sun.awt.image.ByteInterleavedRaster#getDataElements(int, int, int, int, Object)->Object:::Returns an array of data elements from the specified rectangular region
sun.awt.image.ByteInterleavedRaster#getByteData(int, int, int, int, int, byte[])->byte[]:::Returns a byte array of data elements from the specified rectangular region for the specified band
sun.awt.image.ByteInterleavedRaster#getByteData(int, int, int, int, byte[])->byte[]:::Returns a byte array of data elements from the specified rectangular region
sun.awt.image.ByteInterleavedRaster#setDataElements(int, int, Object)->void:::Stores the data elements for all bands at the specified location
sun.awt.image.ByteInterleavedRaster#setDataElements(int, int, Raster)->void:::Stores the Raster data at the specified location
sun.awt.image.ByteInterleavedRaster#setDataElements(int, int, int, int, Object)->void:::Stores an array of data elements into the specified rectangular region
sun.awt.image.ByteInterleavedRaster#putByteData(int, int, int, int, int, byte[])->void:::Stores a byte array of data elements into the specified rectangular region for the specified band
sun.awt.image.ByteInterleavedRaster#putByteData(int, int, int, int, byte[])->void:::Stores a byte array of data elements into the specified rectangular region
sun.awt.image.ByteInterleavedRaster#getSample(int, int, int)->int::: byte interleaved raster get sample
sun.awt.image.ByteInterleavedRaster#setSample(int, int, int, int)->void::: byte interleaved raster set sample
sun.awt.image.ByteInterleavedRaster#getSamples(int, int, int, int, int, int[])->int[]::: byte interleaved raster get samples
sun.awt.image.ByteInterleavedRaster#setSamples(int, int, int, int, int, int[])->void::: byte interleaved raster set samples
sun.awt.image.ByteInterleavedRaster#getPixels(int, int, int, int, int[])->int[]::: byte interleaved raster get pixels
sun.awt.image.ByteInterleavedRaster#setPixels(int, int, int, int, int[])->void::: byte interleaved raster set pixels
sun.awt.image.ByteInterleavedRaster#setRect(int, int, Raster)->void::: byte interleaved raster set rect
sun.awt.image.ByteInterleavedRaster#createChild(int, int, int, int, int, int, int[])->Raster:::Creates a subraster given a region of the raster
sun.awt.image.ByteInterleavedRaster#createWritableChild(int, int, int, int, int, int, int[])->WritableRaster:::Creates a Writable subRaster given a region of the Raster
sun.awt.image.ByteInterleavedRaster#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a Raster with the same layout but using a different width and height, and with new zeroed data arrays.
sun.awt.image.ByteInterleavedRaster#createCompatibleWritableRaster()->WritableRaster:::Creates a Raster with the same layout and the same width and height, and with new zeroed data arrays
sun.awt.image.ByteInterleavedRaster#toString()->String::: byte interleaved raster to string
sun.awt.image.BytePackedRaster#getDataBitOffset()->int:::Returns the data bit offset for the Raster
sun.awt.image.BytePackedRaster#getScanlineStride()->int:::Returns the scanline stride -- the number of data array elements between a given sample and the sample in the same column of the next row.
sun.awt.image.BytePackedRaster#getPixelBitStride()->int:::Returns pixel bit stride -- the number of bits between two samples on the same scanline.
sun.awt.image.BytePackedRaster#getDataStorage()->byte[]:::Returns a reference to the entire data array.
sun.awt.image.BytePackedRaster#getDataElements(int, int, Object)->Object:::Returns the data element at the specified location
sun.awt.image.BytePackedRaster#getDataElements(int, int, int, int, Object)->Object:::Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType
sun.awt.image.BytePackedRaster#getPixelData(int, int, int, int, Object)->Object:::Returns an array  of data elements from the specified rectangular region
sun.awt.image.BytePackedRaster#getByteData(int, int, int, int, int, byte[])->byte[]:::Returns a byte array containing the specified data elements from the data array
sun.awt.image.BytePackedRaster#getByteData(int, int, int, int, byte[])->byte[]:::Returns a byte array containing the specified data elements from the data array
sun.awt.image.BytePackedRaster#setDataElements(int, int, Object)->void:::Stores the data elements at the specified location
sun.awt.image.BytePackedRaster#setDataElements(int, int, Raster)->void:::Stores the Raster data at the specified location
sun.awt.image.BytePackedRaster#setRect(int, int, Raster)->void:::Copies pixels from Raster srcRaster to this WritableRaster
sun.awt.image.BytePackedRaster#setDataElements(int, int, int, int, Object)->void:::Stores an array of data elements into the specified rectangular region
sun.awt.image.BytePackedRaster#putByteData(int, int, int, int, int, byte[])->void:::Stores a byte array of data elements into the specified rectangular region
sun.awt.image.BytePackedRaster#putByteData(int, int, int, int, byte[])->void:::Stores a byte array of data elements into the specified rectangular region
sun.awt.image.BytePackedRaster#getPixels(int, int, int, int, int[])->int[]:::Returns an int array containing all samples for a rectangle of pixels, one sample per array element
sun.awt.image.BytePackedRaster#setPixels(int, int, int, int, int[])->void:::Sets all samples for a rectangle of pixels from an int array containing one sample per array element
sun.awt.image.BytePackedRaster#createChild(int, int, int, int, int, int, int[])->Raster:::Creates a subraster given a region of the raster
sun.awt.image.BytePackedRaster#createWritableChild(int, int, int, int, int, int, int[])->WritableRaster:::Creates a Writable subRaster given a region of the Raster
sun.awt.image.BytePackedRaster#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a raster with the same layout but using a different width and height, and with new zeroed data arrays.
sun.awt.image.BytePackedRaster#createCompatibleWritableRaster()->WritableRaster:::Creates a raster with the same layout and the same width and height, and with new zeroed data arrays.
sun.awt.image.BytePackedRaster#toString()->String::: byte packed raster to string
sun.awt.image.DataBufferNative#getElem(int, int, SurfaceData)->int::: data buffer native get elem
sun.awt.image.DataBufferNative#getElem(int, int)->int:::getElem returns the pixel value for a given index into the dataBuffer array
sun.awt.image.DataBufferNative#setElem(int, int, int, SurfaceData)->void::: data buffer native set elem
sun.awt.image.DataBufferNative#setElem(int, int, int)->void:::setElem sets the pixel value of a given index into the dataBuffer array
sun.awt.image.FileImageSource#checkSecurity(Object, boolean)->boolean::: file image source check security
sun.awt.image.FileImageSource#getDecoder()->ImageDecoder::: file image source get decoder
sun.awt.image.GifImageDecoder#produceImage()->void:::produce an image from the stream.
sun.awt.image.GifImageDecoder#grow_colormap(byte[], int)->byte[]::: gif image decoder grow_colormap
sun.awt.image.GifFrame#dispose()->boolean::: gif frame dispose
sun.awt.image.ImageCache#getInstance()->ImageCache::: image cache get instance
sun.awt.image.ImageCache#flush()->void::: image cache flush
sun.awt.image.ImageCache#getImage(PixelsKey)->Image::: image cache get image
sun.awt.image.ImageCache#setImage(PixelsKey, Image)->void:::Sets the cached image for the specified constraints.
sun.awt.image.ImageCache.PixelsKey#getPixelCount()->int::: pixels key get pixel count
sun.awt.image.ImageConsumerQueue#removeConsumer(ImageConsumerQueue, ImageConsumer, boolean)->ImageConsumerQueue::: image consumer queue remove consumer
sun.awt.image.ImageConsumerQueue#isConsumer(ImageConsumerQueue, ImageConsumer)->boolean::: image consumer queue is consumer
sun.awt.image.ImageConsumerQueue#toString()->String::: image consumer queue to string
sun.awt.image.ImageDecoder#isConsumer(ImageConsumer)->boolean::: image decoder is consumer
sun.awt.image.ImageDecoder#removeConsumer(ImageConsumer)->void::: image decoder remove consumer
sun.awt.image.ImageDecoder#nextConsumer(ImageConsumerQueue)->ImageConsumerQueue::: image decoder next consumer
sun.awt.image.ImageDecoder#setDimensions(int, int)->int::: image decoder set dimensions
sun.awt.image.ImageDecoder#setProperties(Hashtable)->int::: image decoder set properties
sun.awt.image.ImageDecoder#setColorModel(ColorModel)->int::: image decoder set color model
sun.awt.image.ImageDecoder#setHints(int)->int::: image decoder set hints
sun.awt.image.ImageDecoder#headerComplete()->void::: image decoder header complete
sun.awt.image.ImageDecoder#setPixels(int, int, int, int, ColorModel, byte[], int, int)->int::: image decoder set pixels
sun.awt.image.ImageDecoder#setPixels(int, int, int, int, ColorModel, int[], int, int)->int::: image decoder set pixels
sun.awt.image.ImageDecoder#imageComplete(int, boolean)->int::: image decoder image complete
sun.awt.image.ImageDecoder#produceImage()->void::: image decoder produce image
sun.awt.image.ImageDecoder#abort()->void::: image decoder abort
sun.awt.image.ImageDecoder#close()->void::: image decoder close
sun.awt.image.ImageFetchable#doFetch()->void:::This method is called by one of the ImageFetcher threads to start the flow of information from the ImageProducer to the ImageConsumer.
sun.awt.image.ImageFetcher#add(ImageFetchable)->boolean:::Adds an ImageFetchable to the queue of items to fetch
sun.awt.image.ImageFetcher#remove(ImageFetchable)->void:::Removes an ImageFetchable from the queue of items to fetch.
sun.awt.image.ImageFetcher#isFetcher(Thread)->boolean:::Checks to see if the given thread is one of the ImageFetchers.
sun.awt.image.ImageFetcher#amFetcher()->boolean:::Checks to see if the current thread is one of the ImageFetchers.
sun.awt.image.ImageFetcher#run()->void:::The main run() method of an ImageFetcher Thread
sun.awt.image.ImageFetcher#startingAnimation()->void:::Recycles this ImageFetcher thread as an image animator thread
sun.awt.image.FetcherInfo#getFetcherInfo()->FetcherInfo::: fetcher info get fetcher info
sun.awt.image.ImageRepresentation#reconstruct(int)->void::: image representation reconstruct
sun.awt.image.ImageRepresentation#setDimensions(int, int)->void::: image representation set dimensions
sun.awt.image.ImageRepresentation#getWidth()->int::: image representation get width
sun.awt.image.ImageRepresentation#getHeight()->int::: image representation get height
sun.awt.image.ImageRepresentation#getColorModel()->ColorModel::: image representation get color model
sun.awt.image.ImageRepresentation#getBufferedImage()->BufferedImage::: image representation get buffered image
sun.awt.image.ImageRepresentation#createImage(ColorModel, WritableRaster, boolean, Hashtable)->BufferedImage:::Returns the BufferedImage that will be used as the representation of the pixel data
sun.awt.image.ImageRepresentation#setProperties(Hashtable)->void::: image representation set properties
sun.awt.image.ImageRepresentation#setColorModel(ColorModel)->void::: image representation set color model
sun.awt.image.ImageRepresentation#createBufferedImage()->void::: image representation create buffered image
sun.awt.image.ImageRepresentation#setHints(int)->void::: image representation set hints
sun.awt.image.ImageRepresentation#setPixels(int, int, int, int, ColorModel, byte[], int, int)->void::: image representation set pixels
sun.awt.image.ImageRepresentation#setPixels(int, int, int, int, ColorModel, int[], int, int)->void::: image representation set pixels
sun.awt.image.ImageRepresentation#getOpaqueRGBImage()->BufferedImage::: image representation get opaque image
sun.awt.image.ImageRepresentation#imageComplete(int)->void::: image representation image complete
sun.awt.image.ImageRepresentation#startProduction()->void::: image representation start production
sun.awt.image.ImageRepresentation#notifyWatcherListEmpty()->void::: image representation notify watcher list empty
sun.awt.image.ImageRepresentation#prepare(ImageObserver)->boolean::: image representation prepare
sun.awt.image.ImageRepresentation#check(ImageObserver)->int::: image representation check
sun.awt.image.ImageRepresentation#drawToBufImage(Graphics, ToolkitImage, int, int, Color, ImageObserver)->boolean::: image representation draw to buf image
sun.awt.image.ImageRepresentation#drawToBufImage(Graphics, ToolkitImage, int, int, int, int, Color, ImageObserver)->boolean::: image representation draw to buf image
sun.awt.image.ImageRepresentation#drawToBufImage(Graphics, ToolkitImage, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean::: image representation draw to buf image
sun.awt.image.ImageRepresentation#drawToBufImage(Graphics, ToolkitImage, AffineTransform, ImageObserver)->boolean::: image representation draw to buf image
sun.awt.image.ImageRepresentation#abort()->void::: image representation abort
sun.awt.image.ImageRepresentation#dispose()->void::: image representation dispose
sun.awt.image.ImageRepresentation#setAccelerationPriority(float)->void::: image representation set acceleration priority
sun.awt.image.ImageWatched.Link#isWatcher(ImageObserver)->boolean::: link is watcher
sun.awt.image.ImageWatched.Link#removeWatcher(ImageObserver)->Link::: link remove watcher
sun.awt.image.ImageWatched.Link#newInfo(Image, int, int, int, int, int)->boolean::: link new info
sun.awt.image.ImageWatched.WeakLink#isWatcher(ImageObserver)->boolean::: weak link is watcher
sun.awt.image.ImageWatched.WeakLink#removeWatcher(ImageObserver)->Link::: weak link remove watcher
sun.awt.image.ImageWatched.WeakLink#newInfo(Image, int, int, int, int, int)->boolean::: weak link new info
sun.awt.image.ImageWatched#addWatcher(ImageObserver)->void::: image watched add watcher
sun.awt.image.ImageWatched#isWatcher(ImageObserver)->boolean::: image watched is watcher
sun.awt.image.ImageWatched#removeWatcher(ImageObserver)->void::: image watched remove watcher
sun.awt.image.ImageWatched#isWatcherListEmpty()->boolean::: image watched is watcher list empty
sun.awt.image.ImageWatched#newInfo(Image, int, int, int, int, int)->void::: image watched new info
sun.awt.image.ImageWatched#notifyWatcherListEmpty()->void::: image watched notify watcher list empty
sun.awt.image.ImagingLib#transformBI(BufferedImage, BufferedImage, double[], int)->int::: imaging lib transform i
sun.awt.image.ImagingLib#transformRaster(Raster, Raster, double[], int)->int::: imaging lib transform raster
sun.awt.image.ImagingLib#convolveBI(BufferedImage, BufferedImage, Kernel, int)->int::: imaging lib convolve i
sun.awt.image.ImagingLib#convolveRaster(Raster, Raster, Kernel, int)->int::: imaging lib convolve raster
sun.awt.image.ImagingLib#lookupByteBI(BufferedImage, BufferedImage, byte[][])->int::: imaging lib lookup byte i
sun.awt.image.ImagingLib#lookupByteRaster(Raster, Raster, byte[][])->int::: imaging lib lookup byte raster
sun.awt.image.ImagingLib#filter(RasterOp, Raster, WritableRaster)->WritableRaster::: imaging lib filter
sun.awt.image.ImagingLib#filter(BufferedImageOp, BufferedImage, BufferedImage)->BufferedImage::: imaging lib filter
sun.awt.image.InputStreamImageSource#checkSecurity(Object, boolean)->boolean::: input stream image source check security
sun.awt.image.InputStreamImageSource#countConsumers(ImageConsumerQueue)->int::: input stream image source count consumers
sun.awt.image.InputStreamImageSource#countConsumers()->int::: input stream image source count consumers
sun.awt.image.InputStreamImageSource#addConsumer(ImageConsumer)->void::: input stream image source add consumer
sun.awt.image.InputStreamImageSource#printQueue(ImageConsumerQueue, String)->void::: input stream image source print queue
sun.awt.image.InputStreamImageSource#printQueues(String)->void::: input stream image source print queues
sun.awt.image.InputStreamImageSource#addConsumer(ImageConsumer, boolean)->void::: input stream image source add consumer
sun.awt.image.InputStreamImageSource#isConsumer(ImageConsumer)->boolean::: input stream image source is consumer
sun.awt.image.InputStreamImageSource#removeConsumer(ImageConsumer)->void::: input stream image source remove consumer
sun.awt.image.InputStreamImageSource#startProduction(ImageConsumer)->void::: input stream image source start production
sun.awt.image.InputStreamImageSource#requestTopDownLeftRightResend(ImageConsumer)->void::: input stream image source request top down left right resend
sun.awt.image.InputStreamImageSource#getDecoder()->ImageDecoder::: input stream image source get decoder
sun.awt.image.InputStreamImageSource#decoderForType(InputStream, String)->ImageDecoder::: input stream image source decoder for type
sun.awt.image.InputStreamImageSource#getDecoder(InputStream)->ImageDecoder::: input stream image source get decoder
sun.awt.image.InputStreamImageSource#doFetch()->void::: input stream image source do fetch
sun.awt.image.InputStreamImageSource#doneDecoding(ImageDecoder)->void::: input stream image source done decoding
sun.awt.image.InputStreamImageSource#latchConsumers(ImageDecoder)->void::: input stream image source latch consumers
sun.awt.image.InputStreamImageSource#flush()->void::: input stream image source flush
sun.awt.image.IntegerComponentRaster#getDataOffsets()->int[]:::Returns a copy of the data offsets array
sun.awt.image.IntegerComponentRaster#getDataOffset(int)->int:::Returns data offset for the specified band
sun.awt.image.IntegerComponentRaster#getScanlineStride()->int:::Returns the scanline stride -- the number of data array elements between a given sample and the sample in the same column of the next row.
sun.awt.image.IntegerComponentRaster#getPixelStride()->int:::Returns pixel stride -- the number of data array elements  between two samples for the same band on the same scanline.
sun.awt.image.IntegerComponentRaster#getDataStorage()->int[]:::Returns a reference to the data array.
sun.awt.image.IntegerComponentRaster#getDataElements(int, int, Object)->Object:::Returns the data elements for all bands at the specified location
sun.awt.image.IntegerComponentRaster#getDataElements(int, int, int, int, Object)->Object:::Returns an array  of data elements from the specified rectangular region
sun.awt.image.IntegerComponentRaster#setDataElements(int, int, Object)->void:::Stores the data elements for all bands at the specified location
sun.awt.image.IntegerComponentRaster#setDataElements(int, int, Raster)->void:::Stores the Raster data at the specified location
sun.awt.image.IntegerComponentRaster#setDataElements(int, int, int, int, Object)->void:::Stores an array of data elements into the specified rectangular region
sun.awt.image.IntegerComponentRaster#createWritableChild(int, int, int, int, int, int, int[])->WritableRaster:::Creates a subraster given a region of the raster
sun.awt.image.IntegerComponentRaster#createChild(int, int, int, int, int, int, int[])->Raster:::Creates a subraster given a region of the raster
sun.awt.image.IntegerComponentRaster#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a raster with the same band layout but using a different width and height, and with new zeroed data arrays.
sun.awt.image.IntegerComponentRaster#createCompatibleWritableRaster()->WritableRaster:::Creates a raster with the same data layout and the same width and height, and with new zeroed data arrays
sun.awt.image.IntegerComponentRaster#verify()->void:::Verify that the layout parameters are consistent with the data
sun.awt.image.IntegerComponentRaster#toString()->String::: integer component raster to string
sun.awt.image.IntegerInterleavedRaster#getDataOffsets()->int[]:::Returns a copy of the data offsets array
sun.awt.image.IntegerInterleavedRaster#getDataOffset(int)->int:::Returns data offset for the specified band
sun.awt.image.IntegerInterleavedRaster#getScanlineStride()->int:::Returns the scanline stride -- the number of data array elements between a given sample and the sample in the same column of the next row.
sun.awt.image.IntegerInterleavedRaster#getPixelStride()->int:::Returns pixel stride -- the number of data array elements  between two samples for the same band on the same scanline.
sun.awt.image.IntegerInterleavedRaster#getDataStorage()->int[]:::Returns a reference to the data array.
sun.awt.image.IntegerInterleavedRaster#getDataElements(int, int, Object)->Object:::Returns the data elements for all bands at the specified location
sun.awt.image.IntegerInterleavedRaster#getDataElements(int, int, int, int, Object)->Object:::Returns an array  of data elements from the specified rectangular region
sun.awt.image.IntegerInterleavedRaster#setDataElements(int, int, Object)->void:::Stores the data elements for all bands at the specified location
sun.awt.image.IntegerInterleavedRaster#setDataElements(int, int, Raster)->void:::Stores the Raster data at the specified location
sun.awt.image.IntegerInterleavedRaster#setDataElements(int, int, int, int, Object)->void:::Stores an array of data elements into the specified rectangular region
sun.awt.image.IntegerInterleavedRaster#createWritableChild(int, int, int, int, int, int, int[])->WritableRaster:::Creates a subraster given a region of the raster
sun.awt.image.IntegerInterleavedRaster#createChild(int, int, int, int, int, int, int[])->Raster:::Creates a subraster given a region of the raster
sun.awt.image.IntegerInterleavedRaster#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a raster with the same band layout but using a different width and height, and with new zeroed data arrays.
sun.awt.image.IntegerInterleavedRaster#createCompatibleWritableRaster()->WritableRaster:::Creates a raster with the same data layout and the same width and height, and with new zeroed data arrays
sun.awt.image.IntegerInterleavedRaster#toString()->String::: integer interleaved raster to string
sun.awt.image.JPEGImageDecoder#sendHeaderInfo(int, int, boolean, boolean, boolean)->boolean::: image decoder send header info
sun.awt.image.JPEGImageDecoder#sendPixels(int[], int)->boolean::: image decoder send pixels
sun.awt.image.JPEGImageDecoder#sendPixels(byte[], int)->boolean::: image decoder send pixels
sun.awt.image.JPEGImageDecoder#produceImage()->void:::produce an image from the stream.
sun.awt.image.MultiResolutionCachedImage#getResolutionVariant(double, double)->Image::: multi resolution cached image get resolution variant
sun.awt.image.MultiResolutionCachedImage#getResolutionVariants()->List::: multi resolution cached image get resolution variants
sun.awt.image.MultiResolutionCachedImage#map(Function)->MultiResolutionCachedImage::: multi resolution cached image map
sun.awt.image.MultiResolutionCachedImage#map(MultiResolutionImage, Function)->Image::: multi resolution cached image map
sun.awt.image.MultiResolutionCachedImage#getWidth(ImageObserver)->int::: multi resolution cached image get width
sun.awt.image.MultiResolutionCachedImage#getHeight(ImageObserver)->int::: multi resolution cached image get height
sun.awt.image.MultiResolutionCachedImage#getProperty(String, ImageObserver)->Object::: multi resolution cached image get property
sun.awt.image.MultiResolutionCachedImage#getScaledInstance(int, int, int)->Image::: multi resolution cached image get scaled instance
sun.awt.image.MultiResolutionCachedImage#getBaseImage()->Image::: multi resolution cached image get base image
sun.awt.image.MultiResolutionToolkitImage#getResolutionVariant(double, double)->Image::: multi resolution toolkit image get resolution variant
sun.awt.image.MultiResolutionToolkitImage#map(MultiResolutionToolkitImage, Function)->Image::: multi resolution toolkit image map
sun.awt.image.MultiResolutionToolkitImage#getResolutionVariant()->Image::: multi resolution toolkit image get resolution variant
sun.awt.image.MultiResolutionToolkitImage#getResolutionVariants()->List::: multi resolution toolkit image get resolution variants
sun.awt.image.MultiResolutionToolkitImage#getResolutionVariantObserver(Image, ImageObserver, int, int, int, int)->ImageObserver::: multi resolution toolkit image get resolution variant observer
sun.awt.image.MultiResolutionToolkitImage#getResolutionVariantObserver(Image, ImageObserver, int, int, int, int, boolean)->ImageObserver::: multi resolution toolkit image get resolution variant observer
sun.awt.image.NativeLibLoader#loadLibraries()->void:::This is copied from java.awt.Toolkit since we need the library loaded in sun.awt.image also:  WARNING: This is a temporary workaround for a problem in the way the AWT loads native libraries
sun.awt.image.OffScreenImage#getGraphics()->Graphics::: off screen image get graphics
sun.awt.image.OffScreenImage#createGraphics()->Graphics2D::: off screen image create graphics
sun.awt.image.OffScreenImage#getSource()->ImageProducer::: off screen image get source
sun.awt.image.OffScreenImageSource#addConsumer(ImageConsumer)->void::: off screen image source add consumer
sun.awt.image.OffScreenImageSource#isConsumer(ImageConsumer)->boolean::: off screen image source is consumer
sun.awt.image.OffScreenImageSource#removeConsumer(ImageConsumer)->void::: off screen image source remove consumer
sun.awt.image.OffScreenImageSource#startProduction(ImageConsumer)->void::: off screen image source start production
sun.awt.image.OffScreenImageSource#requestTopDownLeftRightResend(ImageConsumer)->void::: off screen image source request top down left right resend
sun.awt.image.PixelConverter#rgbToPixel(int, ColorModel)->int::: pixel converter rgb to pixel
sun.awt.image.PixelConverter#pixelToRgb(int, ColorModel)->int::: pixel converter pixel to rgb
sun.awt.image.PixelConverter#getAlphaMask()->int::: pixel converter get alpha mask
sun.awt.image.PixelConverter.Rgbx#rgbToPixel(int, ColorModel)->int::: rgbx rgb to pixel
sun.awt.image.PixelConverter.Rgbx#pixelToRgb(int, ColorModel)->int::: rgbx pixel to rgb
sun.awt.image.PixelConverter.Xrgb#rgbToPixel(int, ColorModel)->int::: xrgb rgb to pixel
sun.awt.image.PixelConverter.Xrgb#pixelToRgb(int, ColorModel)->int::: xrgb pixel to rgb
sun.awt.image.PixelConverter.Argb#rgbToPixel(int, ColorModel)->int::: argb rgb to pixel
sun.awt.image.PixelConverter.Argb#pixelToRgb(int, ColorModel)->int::: argb pixel to rgb
sun.awt.image.PixelConverter.Ushort565Rgb#rgbToPixel(int, ColorModel)->int::: ushort565 rgb rgb to pixel
sun.awt.image.PixelConverter.Ushort565Rgb#pixelToRgb(int, ColorModel)->int::: ushort565 rgb pixel to rgb
sun.awt.image.PixelConverter.Ushort555Rgbx#rgbToPixel(int, ColorModel)->int::: ushort555 rgbx rgb to pixel
sun.awt.image.PixelConverter.Ushort555Rgbx#pixelToRgb(int, ColorModel)->int::: ushort555 rgbx pixel to rgb
sun.awt.image.PixelConverter.Ushort555Rgb#rgbToPixel(int, ColorModel)->int::: ushort555 rgb rgb to pixel
sun.awt.image.PixelConverter.Ushort555Rgb#pixelToRgb(int, ColorModel)->int::: ushort555 rgb pixel to rgb
sun.awt.image.PixelConverter.Ushort4444Argb#rgbToPixel(int, ColorModel)->int::: ushort4444 argb rgb to pixel
sun.awt.image.PixelConverter.Ushort4444Argb#pixelToRgb(int, ColorModel)->int::: ushort4444 argb pixel to rgb
sun.awt.image.PixelConverter.Xbgr#rgbToPixel(int, ColorModel)->int::: xbgr rgb to pixel
sun.awt.image.PixelConverter.Xbgr#pixelToRgb(int, ColorModel)->int::: xbgr pixel to rgb
sun.awt.image.PixelConverter.Bgrx#rgbToPixel(int, ColorModel)->int::: bgrx rgb to pixel
sun.awt.image.PixelConverter.Bgrx#pixelToRgb(int, ColorModel)->int::: bgrx pixel to rgb
sun.awt.image.PixelConverter.Rgba#rgbToPixel(int, ColorModel)->int::: rgba rgb to pixel
sun.awt.image.PixelConverter.Rgba#pixelToRgb(int, ColorModel)->int::: rgba pixel to rgb
sun.awt.image.PixelConverter.RgbaPre#rgbToPixel(int, ColorModel)->int::: rgba pre rgb to pixel
sun.awt.image.PixelConverter.RgbaPre#pixelToRgb(int, ColorModel)->int::: rgba pre pixel to rgb
sun.awt.image.PixelConverter.ArgbPre#rgbToPixel(int, ColorModel)->int::: argb pre rgb to pixel
sun.awt.image.PixelConverter.ArgbPre#pixelToRgb(int, ColorModel)->int::: argb pre pixel to rgb
sun.awt.image.PixelConverter.ArgbBm#rgbToPixel(int, ColorModel)->int::: argb bm rgb to pixel
sun.awt.image.PixelConverter.ArgbBm#pixelToRgb(int, ColorModel)->int::: argb bm pixel to rgb
sun.awt.image.PixelConverter.ByteGray#rgbToPixel(int, ColorModel)->int::: byte gray rgb to pixel
sun.awt.image.PixelConverter.ByteGray#pixelToRgb(int, ColorModel)->int::: byte gray pixel to rgb
sun.awt.image.PixelConverter.UshortGray#rgbToPixel(int, ColorModel)->int::: ushort gray rgb to pixel
sun.awt.image.PixelConverter.UshortGray#pixelToRgb(int, ColorModel)->int::: ushort gray pixel to rgb
sun.awt.image.PNGImageDecoder#handleChunk(int, byte[], int, int)->boolean::: image decoder handle chunk
sun.awt.image.PNGImageDecoder#produceImage()->void::: image decoder produce image
sun.awt.image.PNGImageDecoder#getData()->boolean::: image decoder get data
sun.awt.image.PNGImageDecoder#getCheckCRC()->boolean::: image decoder get check c
sun.awt.image.PNGImageDecoder#setCheckCRC(boolean)->void::: image decoder set check c
sun.awt.image.PNGImageDecoder#wrc(int)->void::: image decoder wrc
sun.awt.image.PNGImageDecoder#wrk(int)->void::: image decoder wrk
sun.awt.image.PNGImageDecoder#print()->void::: image decoder print
sun.awt.image.PNGImageDecoder.Chromaticities#toString()->String::: chromaticities to string
sun.awt.image.PNGFilterInputStream#available()->int::: filter input stream available
sun.awt.image.PNGFilterInputStream#markSupported()->boolean::: filter input stream mark supported
sun.awt.image.PNGFilterInputStream#read()->int::: filter input stream read
sun.awt.image.PNGFilterInputStream#read(byte[])->int::: filter input stream read
sun.awt.image.PNGFilterInputStream#read(byte[], int, int)->int::: filter input stream read
sun.awt.image.PNGFilterInputStream#skip(long)->long::: filter input stream skip
sun.awt.image.ShortBandedRaster#getDataOffsets()->int[]:::Returns a copy of the data offsets array
sun.awt.image.ShortBandedRaster#getDataOffset(int)->int:::Returns the data offset for the specified band
sun.awt.image.ShortBandedRaster#getScanlineStride()->int:::Returns the scanline stride -- the number of data array elements between a given sample and the sample in the same column of the next row in the same band.
sun.awt.image.ShortBandedRaster#getPixelStride()->int:::Returns the pixel stride, which is always equal to one for a Raster with a BandedSampleModel.
sun.awt.image.ShortBandedRaster#getDataStorage()->short[][]:::Returns a reference to the entire data array.
sun.awt.image.ShortBandedRaster#getDataStorage(int)->short[]:::Returns a reference to the specific band data array.
sun.awt.image.ShortBandedRaster#getDataElements(int, int, Object)->Object:::Returns the data elements for all bands at the specified location
sun.awt.image.ShortBandedRaster#getDataElements(int, int, int, int, Object)->Object:::Returns an array  of data elements from the specified rectangular region
sun.awt.image.ShortBandedRaster#getShortData(int, int, int, int, int, short[])->short[]:::Returns a short array  of data elements from the specified rectangular region for the specified band
sun.awt.image.ShortBandedRaster#getShortData(int, int, int, int, short[])->short[]:::Returns a short array  of data elements from the specified rectangular region
sun.awt.image.ShortBandedRaster#setDataElements(int, int, Object)->void:::Stores the data element for all bands at the specified location
sun.awt.image.ShortBandedRaster#setDataElements(int, int, Raster)->void:::Stores the Raster data at the specified location
sun.awt.image.ShortBandedRaster#setDataElements(int, int, int, int, Object)->void:::Stores an array of data elements into the specified rectangular region
sun.awt.image.ShortBandedRaster#putShortData(int, int, int, int, int, short[])->void:::Stores a short array of data elements into the specified rectangular region for the specified band
sun.awt.image.ShortBandedRaster#putShortData(int, int, int, int, short[])->void:::Stores a short integer array of data elements into the specified rectangular region
sun.awt.image.ShortBandedRaster#createWritableChild(int, int, int, int, int, int, int[])->WritableRaster:::Creates a Writable subRaster given a region of the Raster
sun.awt.image.ShortBandedRaster#createChild(int, int, int, int, int, int, int[])->Raster:::Creates a subraster given a region of the raster
sun.awt.image.ShortBandedRaster#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a Raster with the same layout but using a different width and height, and with new zeroed data arrays.
sun.awt.image.ShortBandedRaster#createCompatibleWritableRaster()->WritableRaster:::Creates a Raster with the same layout and the same width and height, and with new zeroed data arrays
sun.awt.image.ShortBandedRaster#toString()->String::: short banded raster to string
sun.awt.image.ShortComponentRaster#getDataOffsets()->int[]:::Returns a copy of the data offsets array
sun.awt.image.ShortComponentRaster#getDataOffset(int)->int:::Returns the data offset for the specified band
sun.awt.image.ShortComponentRaster#getScanlineStride()->int:::Returns the scanline stride -- the number of data array elements between a given sample and the same sample in the same column of the next row.
sun.awt.image.ShortComponentRaster#getPixelStride()->int:::Returns pixel stride -- the number of data array elements  between two samples for the same band on the same scanline.
sun.awt.image.ShortComponentRaster#getDataStorage()->short[]:::Returns a reference to the data array.
sun.awt.image.ShortComponentRaster#getDataElements(int, int, Object)->Object:::Returns the data elements for all bands at the specified location
sun.awt.image.ShortComponentRaster#getDataElements(int, int, int, int, Object)->Object:::Returns an array  of data elements from the specified rectangular region
sun.awt.image.ShortComponentRaster#getShortData(int, int, int, int, int, short[])->short[]:::Returns a short integer array of data elements from the specified rectangular region
sun.awt.image.ShortComponentRaster#getShortData(int, int, int, int, short[])->short[]:::Returns a short integer array  of data elements from the specified rectangular region
sun.awt.image.ShortComponentRaster#setDataElements(int, int, Object)->void:::Stores the data elements for all bands at the specified location
sun.awt.image.ShortComponentRaster#setDataElements(int, int, Raster)->void:::Stores the Raster data at the specified location
sun.awt.image.ShortComponentRaster#setDataElements(int, int, int, int, Object)->void:::Stores an array of data elements into the specified rectangular region
sun.awt.image.ShortComponentRaster#putShortData(int, int, int, int, int, short[])->void:::Stores a short integer array of data elements into the specified rectangular region
sun.awt.image.ShortComponentRaster#putShortData(int, int, int, int, short[])->void:::Stores a short integer array of data elements into the specified rectangular region
sun.awt.image.ShortComponentRaster#createChild(int, int, int, int, int, int, int[])->Raster:::Creates a subraster given a region of the raster
sun.awt.image.ShortComponentRaster#createWritableChild(int, int, int, int, int, int, int[])->WritableRaster:::Creates a Writable subRaster given a region of the Raster
sun.awt.image.ShortComponentRaster#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a Raster with the same layout but using a different width and height, and with new zeroed data arrays.
sun.awt.image.ShortComponentRaster#createCompatibleWritableRaster()->WritableRaster:::Creates a Raster with the same layout and the same width and height, and with new zeroed data arrays
sun.awt.image.ShortComponentRaster#verify()->void:::Verify that the layout parameters are consistent with the data
sun.awt.image.ShortComponentRaster#toString()->String::: short component raster to string
sun.awt.image.ShortInterleavedRaster#getDataOffsets()->int[]:::Returns a copy of the data offsets array
sun.awt.image.ShortInterleavedRaster#getDataOffset(int)->int:::Returns the data offset for the specified band
sun.awt.image.ShortInterleavedRaster#getScanlineStride()->int:::Returns the scanline stride -- the number of data array elements between a given sample and the same sample in the same column of the next row.
sun.awt.image.ShortInterleavedRaster#getPixelStride()->int:::Returns pixel stride -- the number of data array elements  between two samples for the same band on the same scanline.
sun.awt.image.ShortInterleavedRaster#getDataStorage()->short[]:::Returns a reference to the data array.
sun.awt.image.ShortInterleavedRaster#getDataElements(int, int, Object)->Object:::Returns the data elements for all bands at the specified location
sun.awt.image.ShortInterleavedRaster#getDataElements(int, int, int, int, Object)->Object:::Returns an array  of data elements from the specified rectangular region
sun.awt.image.ShortInterleavedRaster#getShortData(int, int, int, int, int, short[])->short[]:::Returns a short integer array of data elements from the specified rectangular region
sun.awt.image.ShortInterleavedRaster#getShortData(int, int, int, int, short[])->short[]:::Returns a short integer array  of data elements from the specified rectangular region
sun.awt.image.ShortInterleavedRaster#setDataElements(int, int, Object)->void:::Stores the data elements for all bands at the specified location
sun.awt.image.ShortInterleavedRaster#setDataElements(int, int, Raster)->void:::Stores the Raster data at the specified location
sun.awt.image.ShortInterleavedRaster#setDataElements(int, int, int, int, Object)->void:::Stores an array of data elements into the specified rectangular region
sun.awt.image.ShortInterleavedRaster#putShortData(int, int, int, int, int, short[])->void:::Stores a short integer array of data elements into the specified rectangular region
sun.awt.image.ShortInterleavedRaster#putShortData(int, int, int, int, short[])->void:::Stores a short integer array of data elements into the specified rectangular region
sun.awt.image.ShortInterleavedRaster#createChild(int, int, int, int, int, int, int[])->Raster:::Creates a subraster given a region of the raster
sun.awt.image.ShortInterleavedRaster#createWritableChild(int, int, int, int, int, int, int[])->WritableRaster:::Creates a Writable subRaster given a region of the Raster
sun.awt.image.ShortInterleavedRaster#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a Raster with the same layout but using a different width and height, and with new zeroed data arrays.
sun.awt.image.ShortInterleavedRaster#createCompatibleWritableRaster()->WritableRaster:::Creates a Raster with the same layout and the same width and height, and with new zeroed data arrays
sun.awt.image.ShortInterleavedRaster#toString()->String::: short interleaved raster to string
sun.awt.image.SunVolatileImage#getWidth()->int::: sun volatile image get width
sun.awt.image.SunVolatileImage#getHeight()->int::: sun volatile image get height
sun.awt.image.SunVolatileImage#getGraphicsConfig()->GraphicsConfiguration::: sun volatile image get graphics config
sun.awt.image.SunVolatileImage#updateGraphicsConfig()->void::: sun volatile image update graphics config
sun.awt.image.SunVolatileImage#getComponent()->Component::: sun volatile image get component
sun.awt.image.SunVolatileImage#getForcedAccelSurfaceType()->int::: sun volatile image get forced accel surface type
sun.awt.image.SunVolatileImage#createSurfaceManager(Object, ImageCapabilities)->VolatileSurfaceManager::: sun volatile image create surface manager
sun.awt.image.SunVolatileImage#createGraphics()->Graphics2D::: sun volatile image create graphics
sun.awt.image.SunVolatileImage#getProperty(String, ImageObserver)->Object::: sun volatile image get property
sun.awt.image.SunVolatileImage#getWidth(ImageObserver)->int::: sun volatile image get width
sun.awt.image.SunVolatileImage#getHeight(ImageObserver)->int::: sun volatile image get height
sun.awt.image.SunVolatileImage#getBackupImage()->BufferedImage:::This method creates a BufferedImage intended for use as a "snapshot" or a backup surface.
sun.awt.image.SunVolatileImage#getBackupImage(double, double)->BufferedImage:::This method creates a BufferedImage intended for use as a "snapshot" or a backup surface with the given horizontal and vertical scale factors.
sun.awt.image.SunVolatileImage#getSnapshot()->BufferedImage::: sun volatile image get snapshot
sun.awt.image.SunVolatileImage#validate(GraphicsConfiguration)->int::: sun volatile image validate
sun.awt.image.SunVolatileImage#contentsLost()->boolean::: sun volatile image contents lost
sun.awt.image.SunVolatileImage#getCapabilities()->ImageCapabilities::: sun volatile image get capabilities
sun.awt.image.SunVolatileImage#getDestSurface()->Surface::: sun volatile image get dest surface
sun.awt.image.SunWritableRaster.DataStealer#getData(DataBufferByte, int)->byte[]::: data stealer get data
sun.awt.image.SunWritableRaster.DataStealer#getData(DataBufferUShort, int)->short[]::: data stealer get data
sun.awt.image.SunWritableRaster.DataStealer#getData(DataBufferInt, int)->int[]::: data stealer get data
sun.awt.image.SunWritableRaster.DataStealer#getTrackable(DataBuffer)->StateTrackableDelegate::: data stealer get trackable
sun.awt.image.SunWritableRaster.DataStealer#setTrackable(DataBuffer, StateTrackableDelegate)->void::: data stealer set trackable
sun.awt.image.SunWritableRaster#setDataStealer(DataStealer)->void::: sun writable raster set data stealer
sun.awt.image.SunWritableRaster#stealData(DataBufferByte, int)->byte[]::: sun writable raster steal data
sun.awt.image.SunWritableRaster#stealData(DataBufferUShort, int)->short[]::: sun writable raster steal data
sun.awt.image.SunWritableRaster#stealData(DataBufferInt, int)->int[]::: sun writable raster steal data
sun.awt.image.SunWritableRaster#stealTrackable(DataBuffer)->StateTrackableDelegate::: sun writable raster steal trackable
sun.awt.image.SunWritableRaster#setTrackable(DataBuffer, StateTrackableDelegate)->void::: sun writable raster set trackable
sun.awt.image.SunWritableRaster#makeTrackable(DataBuffer)->void::: sun writable raster make trackable
sun.awt.image.SunWritableRaster#markDirty(DataBuffer)->void::: sun writable raster mark dirty
sun.awt.image.SunWritableRaster#markDirty(WritableRaster)->void::: sun writable raster mark dirty
sun.awt.image.SunWritableRaster#markDirty(Image)->void::: sun writable raster mark dirty
sun.awt.image.SunWritableRaster#markDirty()->void:::Mark the TrackableDelegate of the associated DataBuffer dirty.
sun.awt.image.SurfaceManager.ImageAccessor#getSurfaceManager(Image)->SurfaceManager::: image accessor get surface manager
sun.awt.image.SurfaceManager.ImageAccessor#setSurfaceManager(Image, SurfaceManager)->void::: image accessor set surface manager
sun.awt.image.SurfaceManager#setImageAccessor(ImageAccessor)->void::: surface manager set image accessor
sun.awt.image.SurfaceManager#getManager(Image)->SurfaceManager:::Returns the SurfaceManager object contained within the given Image.
sun.awt.image.SurfaceManager#setManager(Image, SurfaceManager)->void::: surface manager set manager
sun.awt.image.SurfaceManager#getCacheData(Object)->Object:::Return an arbitrary cached object for an arbitrary cache key
sun.awt.image.SurfaceManager#setCacheData(Object, Object)->void:::Store an arbitrary cached object for an arbitrary cache key
sun.awt.image.SurfaceManager#getPrimarySurfaceData()->SurfaceData:::Returns the main SurfaceData object that "owns" the pixels for this SurfaceManager
sun.awt.image.SurfaceManager#restoreContents()->SurfaceData:::Restores the primary surface being managed, and then returns the replacement surface
sun.awt.image.SurfaceManager#acceleratedSurfaceLost()->void:::Notification that any accelerated surfaces associated with this manager have been "lost", which might mean that they need to be manually restored or recreated
sun.awt.image.SurfaceManager#getCapabilities(GraphicsConfiguration)->ImageCapabilities:::Returns an ImageCapabilities object which can be inquired as to the specific capabilities of this Image
sun.awt.image.SurfaceManager.ImageCapabilitiesGc#isAccelerated()->boolean::: image capabilities gc is accelerated
sun.awt.image.SurfaceManager.ProxiedGraphicsConfig#getProxyKey()->Object:::Return the key that destination surfaces created on the given GraphicsConfiguration use to store SurfaceDataProxy objects for their cached copies.
sun.awt.image.SurfaceManager#flush()->void:::Releases system resources in use by ancillary SurfaceData objects, such as surfaces cached in accelerated memory
sun.awt.image.SurfaceManager#flush(boolean)->void::: surface manager flush
sun.awt.image.SurfaceManager.FlushableCacheData#flush(boolean)->boolean:::Flush all cached resources
sun.awt.image.SurfaceManager#setAccelerationPriority(float)->void:::Called when image's acceleration priority is changed
sun.awt.image.SurfaceManager#getImageScaleX(Image)->double:::Returns a horizontal scale factor of the image
sun.awt.image.SurfaceManager#getImageScaleY(Image)->double:::Returns a vertical scale factor of the image
sun.awt.image.ToolkitImage#getSource()->ImageProducer::: toolkit image get source
sun.awt.image.ToolkitImage#getWidth()->int:::Return the width of the original image source
sun.awt.image.ToolkitImage#getWidth(ImageObserver)->int:::Return the width of the original image source
sun.awt.image.ToolkitImage#getHeight()->int:::Return the height of the original image source
sun.awt.image.ToolkitImage#getHeight(ImageObserver)->int:::Return the height of the original image source
sun.awt.image.ToolkitImage#getProperty(String, ImageObserver)->Object:::Return a property of the image by name
sun.awt.image.ToolkitImage#hasError()->boolean::: toolkit image has error
sun.awt.image.ToolkitImage#check(ImageObserver)->int::: toolkit image check
sun.awt.image.ToolkitImage#preload(ImageObserver)->void::: toolkit image preload
sun.awt.image.ToolkitImage#addInfo(int)->void::: toolkit image add info
sun.awt.image.ToolkitImage#setDimensions(int, int)->void::: toolkit image set dimensions
sun.awt.image.ToolkitImage#setProperties(Hashtable)->void::: toolkit image set properties
sun.awt.image.ToolkitImage#infoDone(int)->void::: toolkit image info done
sun.awt.image.ToolkitImage#flush()->void::: toolkit image flush
sun.awt.image.ToolkitImage#makeImageRep()->ImageRepresentation::: toolkit image make image rep
sun.awt.image.ToolkitImage#getImageRep()->ImageRepresentation::: toolkit image get image rep
sun.awt.image.ToolkitImage#getGraphics()->Graphics::: toolkit image get graphics
sun.awt.image.ToolkitImage#getColorModel()->ColorModel::: toolkit image get color model
sun.awt.image.ToolkitImage#getBufferedImage()->BufferedImage::: toolkit image get buffered image
sun.awt.image.ToolkitImage#setAccelerationPriority(float)->void::: toolkit image set acceleration priority
sun.awt.image.URLImageSource#checkSecurity(Object, boolean)->boolean::: image source check security
sun.awt.image.URLImageSource#getDecoder()->ImageDecoder::: image source get decoder
sun.awt.image.VolatileSurfaceManager#initialize()->void:::This init function is separate from the constructor because the things we are doing here necessitate the object's existence
sun.awt.image.VolatileSurfaceManager#getPrimarySurfaceData()->SurfaceData::: volatile surface manager get primary surface data
sun.awt.image.VolatileSurfaceManager#isAccelerationEnabled()->boolean:::Returns true if acceleration is enabled
sun.awt.image.VolatileSurfaceManager#validate(GraphicsConfiguration)->int:::Get the image ready for rendering
sun.awt.image.VolatileSurfaceManager#contentsLost()->boolean:::Returns true if rendering data was lost since the last validate call.
sun.awt.image.VolatileSurfaceManager#initAcceleratedSurface()->SurfaceData:::Creates a new accelerated surface that is compatible with the current GraphicsConfiguration
sun.awt.image.VolatileSurfaceManager#getBackupSurface()->SurfaceData:::Creates a software-based surface (of type BufImgSurfaceData)
sun.awt.image.VolatileSurfaceManager#initContents()->void:::Set contents of the current SurfaceData to default state (i.e
sun.awt.image.VolatileSurfaceManager#restoreContents()->SurfaceData:::Called from a SurfaceData object, indicating that our accelerated surface has been lost and should be restored (perhaps using a backup system memory surface)
sun.awt.image.VolatileSurfaceManager#acceleratedSurfaceLost()->void:::If the accelerated surface is the current SurfaceData for this manager, sets the variable lostSurface to true, which indicates that something happened to the image under management
sun.awt.image.VolatileSurfaceManager#restoreAcceleratedSurface()->void:::Restore sdAccel in case it was lost
sun.awt.image.VolatileSurfaceManager#displayChanged()->void:::Called from SunGraphicsEnv when there has been a display mode change
sun.awt.image.VolatileSurfaceManager#paletteChanged()->void:::When device palette changes, need to force a new copy of the image into our hardware cache to update the color indices of the pixels (indexed mode only).
sun.awt.image.VolatileSurfaceManager#isConfigValid(GraphicsConfiguration)->boolean:::Called by validate() to see whether the GC passed in is ok for rendering to
sun.awt.image.VolatileSurfaceManager#getCapabilities(GraphicsConfiguration)->ImageCapabilities::: volatile surface manager get capabilities
sun.awt.image.VolatileSurfaceManager#flush()->void:::Releases any associated hardware memory for this image by calling flush on sdAccel
sun.awt.image.VSyncedBSManager#checkAllowed(BufferStrategy)->boolean::: synced manager check allowed
sun.awt.image.VSyncedBSManager#relinquishVsync(BufferStrategy)->void::: synced manager relinquish vsync
sun.awt.image.VSyncedBSManager#vsyncAllowed(BufferStrategy)->boolean:::Returns true if the buffer strategy is allowed to be created v-synced.
sun.awt.image.VSyncedBSManager#releaseVsync(BufferStrategy)->void:::Lets the manager know that this buffer strategy is no longer interested in being v-synced.
sun.awt.image.WritableRasterNative#createNativeRaster(SampleModel, DataBuffer)->WritableRasterNative::: writable raster native create native raster
sun.awt.image.WritableRasterNative#createNativeRaster(ColorModel, SurfaceData, int, int)->WritableRasterNative::: writable raster native create native raster
sun.awt.image.XbmImageDecoder#produceImage()->void:::produce an image from the stream.

AArch64BitCountAssemblerTest#checkAArch64()::: arch64 bit count assembler test check arch64:::codeCache->getTarget->assumeTrue
AArch64BitCountAssemblerTest.AArch64CodeGenTestCase#create()::: arch64 code gen test case create:::
AArch64BitCountAssemblerTest.AArch64CodeGenTestCase#getExpected()::: arch64 code gen test case get expected:::
AArch64BitCountAssemblerTest.AArch64BitCountCodeGenTestCase#getValue()::: arch64 bit count code gen test case get value:::return
AArch64BitCountAssemblerTest.AArch64BitCountCodeGenTestCase#create()::: arch64 bit count code gen test case create:::return->masm->new->AArch64MacroAssembler->dst->registerConfig->getReturnRegister->src->cc->getArgument->asRegister->masm->nop->registers->registerConfig->registerConfig->getAllocatableRegisters->filterAllocatableRegisters->masm->registers->registers->size->get->popcnt->masm->ret->return->masm->close
AArch64BitCountAssemblerTest.AArch64BitCountCodeGenTestCase#getExpected()::: arch64 bit count code gen test case get expected:::if->return->Integer->bitCount->else->if->return->Long->bitCount->return
AArch64BitCountAssemblerTest#testBitCount()::: arch64 bit count assembler test test bit count:::tests->getByteCount->new->AArch64BitCountCodeGenTestCase<>->getByteCount->new->AArch64BitCountCodeGenTestCase<>->getByteCount->new->AArch64BitCountCodeGenTestCase<>->getByteCount->new->AArch64BitCountCodeGenTestCase<>->create->getExpected->getValue->assertReturn->create->getExpected->getValue->assertReturn->create->getExpected->getValue->assertReturn->create->getExpected->getValue->assertReturn
AArch64BitCountAssemblerTest#intStub(int)::: arch64 bit count assembler test int stub:::return
AArch64BitCountAssemblerTest#longStub(long)::: arch64 bit count assembler test long stub:::return
AArch64InstructionEncodingTest#checkAArch64()::: arch64 instruction encoding test check arch64:::JVMCI->getRuntime->getHostJVMCIBackend->getTarget->assumeTrue
AArch64InstructionEncodingTest.AArch64InstructionEncodingTestCase#getExpected()::: arch64 instruction encoding test case get expected:::return->ByteBuffer->wrap->getInt
AArch64InstructionEncodingTest.AArch64InstructionEncodingTestCase#getActual()::: arch64 instruction encoding test case get actual:::return->ByteBuffer->wrap->getInt
AArch64InstructionEncodingTest.AArch64InstructionEncodingTestCase#closeAssembler()::: arch64 instruction encoding test case close assembler:::assembler->close
AArch64InstructionEncodingTest#assertWrapper(AArch64InstructionEncodingTestCase)::: arch64 instruction encoding test assert wrapper:::testCase->getActual->testCase->getExpected->assertDeepEquals
AArch64InstructionEncodingTest#testCnt()::: arch64 instruction encoding test test cnt:::new->CntEncodingTestCase->assertWrapper->new->CntEncodingTestCase->assertWrapper
AArch64InstructionEncodingTest#testCntWithInvalidDataSize()::: arch64 instruction encoding test test cnt with invalid data size:::new->CntEncodingTestCase
AArch64InstructionEncodingTest#testAddv()::: arch64 instruction encoding test test addv:::new->AddvEncodingTestCase->assertWrapper->new->AddvEncodingTestCase->assertWrapper->new->AddvEncodingTestCase->assertWrapper->new->AddvEncodingTestCase->assertWrapper->new->AddvEncodingTestCase->assertWrapper
AArch64InstructionEncodingTest#testAddvWithInvalidSizeLaneCombo()::: arch64 instruction encoding test test addv with invalid size lane combo:::new->AddvEncodingTestCase
AArch64InstructionEncodingTest#testAddvWithInvalidDataSize()::: arch64 instruction encoding test test addv with invalid data size:::new->AddvEncodingTestCase
AArch64InstructionEncodingTest#testAddvWithInvalidLane()::: arch64 instruction encoding test test addv with invalid lane:::new->AddvEncodingTestCase
AArch64InstructionEncodingTest#testUmov()::: arch64 instruction encoding test test umov:::new->UmovEncodingTestCase->assertWrapper->new->UmovEncodingTestCase->assertWrapper->new->UmovEncodingTestCase->assertWrapper->new->UmovEncodingTestCase->assertWrapper->new->UmovEncodingTestCase->assertWrapper->new->UmovEncodingTestCase->assertWrapper->new->UmovEncodingTestCase->assertWrapper->new->UmovEncodingTestCase->assertWrapper
AArch64InstructionEncodingTest#testUmovInvalidSrcIdx()::: arch64 instruction encoding test test umov invalid src idx:::new->UmovEncodingTestCase
AArch64InstructionEncodingTest#testUmovInvalidDataSize()::: arch64 instruction encoding test test umov invalid data size:::new->UmovEncodingTestCase
AArch64MacroAssemblerTest#computeFeatures()::: arch64 macro assembler test compute features:::features->EnumSet->noneOf->features->add->return
AArch64MacroAssemblerTest#computeFlags()::: arch64 macro assembler test compute flags:::flags->EnumSet->noneOf->return
AArch64MacroAssemblerTest#createTarget()::: arch64 macro assembler test create target:::stackFrameAlignment->implicitNullCheckLimit->inlineObjects->arch->computeFeatures->computeFlags->new->AArch64->return->new->TargetDescription
AArch64MacroAssemblerTest#setupEnvironment()::: arch64 macro assembler test setup environment:::target->createTarget->new->AArch64MacroAssembler->new->TestProtectedAssembler
AArch64MacroAssemblerTest#testGenerateAddressPlan()::: arch64 macro assembler test test generate address plan:::plan->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue->AArch64MacroAssembler->NumUtil->getNbitNumberInt->generateAddressPlan->Assert->assertTrue
AArch64MacroAssemblerTest#testMakeAddressNoAction()::: arch64 macro assembler test test make address no action:::address->masm->NumUtil->getNbitNumberInt->makeAddress->Assert->address->isScaled->address->getAddressingMode->address->getBase->equals->address->getOffset->equals->address->getImmediateRaw->NumUtil->getNbitNumberInt->assertTrue->compareAssembly
AArch64MacroAssemblerTest#testMakeAddressAddIndex()::: arch64 macro assembler test test make address add index:::address->masm->NumUtil->getNbitNumberInt->makeAddress->Assert->address->isScaled->address->getAddressingMode->address->getBase->equals->address->getOffset->equals->assertTrue->asm->NumUtil->getNbitNumberInt->add->compareAssembly
AArch64MacroAssemblerTest#testMakeAddressAddIndexNoOverwrite()::: arch64 macro assembler test test make address add index no overwrite:::address->masm->NumUtil->getNbitNumberInt->makeAddress->Assert->address->isScaled->address->getAddressingMode->address->getBase->equals->address->getOffset->equals->assertTrue->asm->NumUtil->getNbitNumberInt->add->compareAssembly
AArch64MacroAssemblerTest#testMakeAddressAddBaseNoOverwrite()::: arch64 macro assembler test test make address add base no overwrite:::address->masm->NumUtil->getNbitNumberInt->makeAddress->Assert->address->isScaled->address->getAddressingMode->address->getBase->equals->address->getOffset->equals->assertTrue->asm->NumUtil->getNbitNumberInt->add->compareAssembly
AArch64MacroAssemblerTest#testMakeAddressAddBase()::: arch64 macro assembler test test make address add base:::address->masm->NumUtil->getNbitNumberInt->makeAddress->Assert->address->isScaled->address->getAddressingMode->address->getBase->equals->address->getOffset->equals->assertTrue->asm->NumUtil->getNbitNumberInt->add->compareAssembly
AArch64MacroAssemblerTest#testMakeAddressAddIndexNoOverwriteExtend()::: arch64 macro assembler test test make address add index no overwrite extend:::address->masm->NumUtil->getNbitNumberInt->makeAddress->Assert->address->isScaled->address->getAddressingMode->address->getBase->equals->address->getOffset->equals->address->getExtendType->assertTrue->asm->NumUtil->getNbitNumberInt->add->compareAssembly
AArch64MacroAssemblerTest#testMakeAddressAddIndexExtend()::: arch64 macro assembler test test make address add index extend:::address->masm->NumUtil->getNbitNumberInt->makeAddress->Assert->address->isScaled->address->getAddressingMode->address->getBase->equals->address->getOffset->equals->address->getExtendType->assertTrue->asm->NumUtil->getNbitNumberInt->add->compareAssembly
AArch64MacroAssemblerTest#testLoadAddressUnscaled()::: arch64 macro assembler test test load address unscaled:::dst->address->AArch64Address->NumUtil->getNbitNumberInt->createUnscaledImmediateAddress->masm->loadAddress->asm->NumUtil->getNbitNumberInt->add->compareAssembly
AArch64MacroAssemblerTest#testLoadAddressUnscaled2()::: arch64 macro assembler test test load address unscaled2:::dst->address->AArch64Address->NumUtil->getNbitNumberInt->createUnscaledImmediateAddress->masm->loadAddress->asm->NumUtil->getNbitNumberInt->sub->compareAssembly
AArch64MacroAssemblerTest#testLoadAddressScaled()::: arch64 macro assembler test test load address scaled:::dst->address->AArch64Address->NumUtil->getNbitNumberInt->createScaledImmediateAddress->masm->loadAddress->asm->NumUtil->getNbitNumberInt->add->asm->NumUtil->getNbitNumberInt->add->compareAssembly
AArch64MacroAssemblerTest#testLoadAddressScaledLowerOnly()::: arch64 macro assembler test test load address scaled lower only:::dst->address->AArch64Address->NumUtil->getNbitNumberInt->createScaledImmediateAddress->masm->loadAddress->asm->NumUtil->getNbitNumberInt->add->compareAssembly
AArch64MacroAssemblerTest#testLoadAddressScaledHigherOnly()::: arch64 macro assembler test test load address scaled higher only:::dst->address->AArch64Address->createScaledImmediateAddress->masm->loadAddress->asm->add->compareAssembly
AArch64MacroAssemblerTest#testLoadAddressRegisterOffsetUnscaled()::: arch64 macro assembler test test load address register offset unscaled:::dst->address->AArch64Address->createRegisterOffsetAddress->masm->loadAddress->asm->add->compareAssembly
AArch64MacroAssemblerTest#testLoadAddressRegisterOffsetScaled()::: arch64 macro assembler test test load address register offset scaled:::dst->address->AArch64Address->createRegisterOffsetAddress->masm->loadAddress->asm->add->compareAssembly
AArch64MacroAssemblerTest#testLoadAddressExtendedRegisterOffsetUnscaled()::: arch64 macro assembler test test load address extended register offset unscaled:::dst->address->AArch64Address->createExtendedRegisterOffsetAddress->masm->loadAddress->asm->add->compareAssembly
AArch64MacroAssemblerTest#testLoadAddressExtendedRegisterOffsetScaled()::: arch64 macro assembler test test load address extended register offset scaled:::dst->address->AArch64Address->createExtendedRegisterOffsetAddress->masm->loadAddress->asm->add->compareAssembly
AArch64MacroAssemblerTest#compareAssembly():::Compares assembly generated by the macro assembler to the hand-generated assembly.:::expected->asm->close->actual->masm->close->assertArrayEquals
TestProtectedAssembler#cbnz(int, Register, int, int)::: test protected assembler cbnz:::super->cbnz
TestProtectedAssembler#cbz(int, Register, int, int)::: test protected assembler cbz:::super->cbz
TestProtectedAssembler#ands(int, Register, Register, long)::: test protected assembler ands:::super->ands
TestProtectedAssembler#b(ConditionFlag, int)::: test protected assembler b:::super->b
TestProtectedAssembler#b(ConditionFlag, int, int)::: test protected assembler b:::super->b
TestProtectedAssembler#cbnz(int, Register, int)::: test protected assembler cbnz:::super->cbnz
TestProtectedAssembler#cbz(int, Register, int)::: test protected assembler cbz:::super->cbz
TestProtectedAssembler#b(int)::: test protected assembler b:::super->b
TestProtectedAssembler#b(int, int)::: test protected assembler b:::super->b
TestProtectedAssembler#bl(int)::: test protected assembler bl:::super->bl
TestProtectedAssembler#blr(Register)::: test protected assembler blr:::super->blr
TestProtectedAssembler#br(Register)::: test protected assembler br:::super->br
TestProtectedAssembler#ret(Register)::: test protected assembler ret:::super->ret
TestProtectedAssembler#ldr(int, Register, AArch64Address)::: test protected assembler ldr:::super->ldr
TestProtectedAssembler#ldrs(int, int, Register, AArch64Address)::: test protected assembler ldrs:::super->ldrs
TestProtectedAssembler#str(int, Register, AArch64Address)::: test protected assembler str:::super->str
TestProtectedAssembler#ldxr(int, Register, Register)::: test protected assembler ldxr:::super->ldxr
TestProtectedAssembler#stxr(int, Register, Register, Register)::: test protected assembler stxr:::super->stxr
TestProtectedAssembler#ldar(int, Register, Register)::: test protected assembler ldar:::super->ldar
TestProtectedAssembler#stlr(int, Register, Register)::: test protected assembler stlr:::super->stlr
TestProtectedAssembler#ldaxr(int, Register, Register)::: test protected assembler ldaxr:::super->ldaxr
TestProtectedAssembler#stlxr(int, Register, Register, Register)::: test protected assembler stlxr:::super->stlxr
TestProtectedAssembler#adr(Register, int)::: test protected assembler adr:::super->adr
TestProtectedAssembler#add(int, Register, Register, int)::: test protected assembler add:::super->add
TestProtectedAssembler#adds(int, Register, Register, int)::: test protected assembler adds:::super->adds
TestProtectedAssembler#sub(int, Register, Register, int)::: test protected assembler sub:::super->sub
TestProtectedAssembler#subs(int, Register, Register, int)::: test protected assembler subs:::super->subs
TestProtectedAssembler#and(int, Register, Register, long)::: test protected assembler and:::super->and
TestProtectedAssembler#eor(int, Register, Register, long)::: test protected assembler eor:::super->eor
TestProtectedAssembler#orr(int, Register, Register, long)::: test protected assembler orr:::super->orr
TestProtectedAssembler#movz(int, Register, int, int)::: test protected assembler movz:::super->movz
TestProtectedAssembler#movn(int, Register, int, int)::: test protected assembler movn:::super->movn
TestProtectedAssembler#movk(int, Register, int, int)::: test protected assembler movk:::super->movk
TestProtectedAssembler#bfm(int, Register, Register, int, int)::: test protected assembler bfm:::super->bfm
TestProtectedAssembler#ubfm(int, Register, Register, int, int)::: test protected assembler ubfm:::super->ubfm
TestProtectedAssembler#sbfm(int, Register, Register, int, int)::: test protected assembler sbfm:::super->sbfm
TestProtectedAssembler#extr(int, Register, Register, Register, int)::: test protected assembler extr:::super->extr
TestProtectedAssembler#adds(int, Register, Register, Register, ShiftType, int)::: test protected assembler adds:::super->adds
TestProtectedAssembler#subs(int, Register, Register, Register, ShiftType, int)::: test protected assembler subs:::super->subs
TestProtectedAssembler#add(int, Register, Register, Register, ShiftType, int)::: test protected assembler add:::super->add
TestProtectedAssembler#sub(int, Register, Register, Register, ShiftType, int)::: test protected assembler sub:::super->sub
TestProtectedAssembler#add(int, Register, Register, Register, ExtendType, int)::: test protected assembler add:::super->add
TestProtectedAssembler#adds(int, Register, Register, Register, ExtendType, int)::: test protected assembler adds:::super->adds
TestProtectedAssembler#sub(int, Register, Register, Register, ExtendType, int)::: test protected assembler sub:::super->sub
TestProtectedAssembler#subs(int, Register, Register, Register, ExtendType, int)::: test protected assembler subs:::super->subs
TestProtectedAssembler#and(int, Register, Register, Register, ShiftType, int)::: test protected assembler and:::super->and
TestProtectedAssembler#ands(int, Register, Register, Register, ShiftType, int)::: test protected assembler ands:::super->ands
TestProtectedAssembler#bic(int, Register, Register, Register, ShiftType, int)::: test protected assembler bic:::super->bic
TestProtectedAssembler#bics(int, Register, Register, Register, ShiftType, int)::: test protected assembler bics:::super->bics
TestProtectedAssembler#eon(int, Register, Register, Register, ShiftType, int)::: test protected assembler eon:::super->eon
TestProtectedAssembler#eor(int, Register, Register, Register, ShiftType, int)::: test protected assembler eor:::super->eor
TestProtectedAssembler#orr(int, Register, Register, Register, ShiftType, int)::: test protected assembler orr:::super->orr
TestProtectedAssembler#orn(int, Register, Register, Register, ShiftType, int)::: test protected assembler orn:::super->orn
TestProtectedAssembler#asr(int, Register, Register, Register)::: test protected assembler asr:::super->asr
TestProtectedAssembler#lsl(int, Register, Register, Register)::: test protected assembler lsl:::super->lsl
TestProtectedAssembler#lsr(int, Register, Register, Register)::: test protected assembler lsr:::super->lsr
TestProtectedAssembler#ror(int, Register, Register, Register)::: test protected assembler ror:::super->ror
TestProtectedAssembler#cls(int, Register, Register)::: test protected assembler cls:::super->cls
TestProtectedAssembler#clz(int, Register, Register)::: test protected assembler clz:::super->clz
TestProtectedAssembler#rbit(int, Register, Register)::: test protected assembler rbit:::super->rbit
TestProtectedAssembler#rev(int, Register, Register)::: test protected assembler rev:::super->rev
TestProtectedAssembler#csel(int, Register, Register, Register, ConditionFlag)::: test protected assembler csel:::super->csel
TestProtectedAssembler#csneg(int, Register, Register, Register, ConditionFlag)::: test protected assembler csneg:::super->csneg
TestProtectedAssembler#csinc(int, Register, Register, Register, ConditionFlag)::: test protected assembler csinc:::super->csinc
TestProtectedAssembler#madd(int, Register, Register, Register, Register)::: test protected assembler madd:::super->madd
TestProtectedAssembler#msub(int, Register, Register, Register, Register)::: test protected assembler msub:::super->msub
TestProtectedAssembler#sdiv(int, Register, Register, Register)::: test protected assembler sdiv:::super->sdiv
TestProtectedAssembler#udiv(int, Register, Register, Register)::: test protected assembler udiv:::super->udiv
TestProtectedAssembler#fldr(int, Register, AArch64Address)::: test protected assembler fldr:::super->fldr
TestProtectedAssembler#fstr(int, Register, AArch64Address)::: test protected assembler fstr:::super->fstr
TestProtectedAssembler#fmov(int, Register, Register)::: test protected assembler fmov:::super->fmov
TestProtectedAssembler#fmovFpu2Cpu(int, Register, Register)::: test protected assembler fmov fpu2 cpu:::super->fmovFpu2Cpu
TestProtectedAssembler#fmovCpu2Fpu(int, Register, Register)::: test protected assembler fmov cpu2 fpu:::super->fmovCpu2Fpu
TestProtectedAssembler#fmov(int, Register, double)::: test protected assembler fmov:::super->fmov
TestProtectedAssembler#fcvt(int, Register, Register)::: test protected assembler fcvt:::super->fcvt
TestProtectedAssembler#fcvtzs(int, int, Register, Register)::: test protected assembler fcvtzs:::super->fcvtzs
TestProtectedAssembler#scvtf(int, int, Register, Register)::: test protected assembler scvtf:::super->scvtf
TestProtectedAssembler#frintz(int, Register, Register)::: test protected assembler frintz:::super->frintz
TestProtectedAssembler#fabs(int, Register, Register)::: test protected assembler fabs:::super->fabs
TestProtectedAssembler#fneg(int, Register, Register)::: test protected assembler fneg:::super->fneg
TestProtectedAssembler#fsqrt(int, Register, Register)::: test protected assembler fsqrt:::super->fsqrt
TestProtectedAssembler#fadd(int, Register, Register, Register)::: test protected assembler fadd:::super->fadd
TestProtectedAssembler#fsub(int, Register, Register, Register)::: test protected assembler fsub:::super->fsub
TestProtectedAssembler#fmul(int, Register, Register, Register)::: test protected assembler fmul:::super->fmul
TestProtectedAssembler#fdiv(int, Register, Register, Register)::: test protected assembler fdiv:::super->fdiv
TestProtectedAssembler#fmadd(int, Register, Register, Register, Register)::: test protected assembler fmadd:::super->fmadd
TestProtectedAssembler#fmsub(int, Register, Register, Register, Register)::: test protected assembler fmsub:::super->fmsub
TestProtectedAssembler#fcmp(int, Register, Register)::: test protected assembler fcmp:::super->fcmp
TestProtectedAssembler#fccmp(int, Register, Register, int, ConditionFlag)::: test protected assembler fccmp:::super->fccmp
TestProtectedAssembler#fcmpZero(int, Register)::: test protected assembler fcmp zero:::super->fcmpZero
TestProtectedAssembler#fcsel(int, Register, Register, Register, ConditionFlag)::: test protected assembler fcsel:::super->fcsel
TestProtectedAssembler#hlt(int)::: test protected assembler hlt:::super->hlt
TestProtectedAssembler#brk(int)::: test protected assembler brk:::super->brk
TestProtectedAssembler#hint(SystemHint)::: test protected assembler hint:::super->hint
TestProtectedAssembler#clrex()::: test protected assembler clrex:::super->clrex
TestProtectedAssembler#dmb(BarrierKind)::: test protected assembler dmb:::super->dmb
TestProtectedAssembler#align(int)::: test protected assembler align:::
TestProtectedAssembler#jmp(Label)::: test protected assembler jmp:::
TestProtectedAssembler#patchJumpTarget(int, int)::: test protected assembler patch jump target:::
TestProtectedAssembler#makeAddress(Register, int)::: test protected assembler make address:::throw->new->UnsupportedOperationException
TestProtectedAssembler#getPlaceholder(int)::: test protected assembler get placeholder:::throw->new->UnsupportedOperationException
TestProtectedAssembler#ensureUniquePC()::: test protected assembler ensure unique c:::throw->new->UnsupportedOperationException
TestProtectedAssembler#cnt(int, Register, Register)::: test protected assembler cnt:::super->cnt
TestProtectedAssembler#addv(int, SIMDElementSize, Register, Register)::: test protected assembler addv:::super->addv
TestProtectedAssembler#umov(int, Register, int, Register)::: test protected assembler umov:::super->umov

ConsoleHandler#publish(LogRecord):::Publish a LogRecord:::super->publish->flush
ConsoleHandler#close():::Override StreamHandler.close to do a flush but not to close the output stream:::flush
ErrorManager#error(String, Exception, int):::The error method is called when a Handler failure occurs:::if->return->text->if->println->if->ex->printStackTrace
FileHandler#publish(LogRecord):::Format and publish a LogRecord.:::if->isLoggable->return->super->publish->flush->if->AccessController->new->PrivilegedAction<Object>->doPrivileged
FileHandler#close():::Close all the files.:::super->close->if->return->try->lockFileChannel->close->catch->finally->synchronized->locks->remove->new->File->delete
Filter#isLoggable(LogRecord):::Check if a given log record should be published.:::
Formatter#format(LogRecord):::Format the given log record and return the formatted string:::
Formatter#getHead(Handler):::Return the header string for a set of formatted records:::return
Formatter#getTail(Handler):::Return the tail string for a set of formatted records:::return
Formatter#formatMessage(LogRecord):::Localize and format the message string from a log record:::format->record->getMessage->catalog->record->getResourceBundle->if->try->catalog->getString->catch->finally->try->parameters->record->getParameters->if->return->index->fence->format->length->while->format->indexOf->if->break->digit->format->charAt->if->return->format->return->catch->return->finally
Handler#publish(LogRecord):::Publish a LogRecord:::
Handler#flush():::Flush any buffered output.:::
Handler#close():::Close the Handler and free all associated resources:::
Handler#setFormatter(Formatter):::Set a Formatter:::checkPermission->Objects->requireNonNull
Handler#getFormatter():::Return the Formatter for this Handler.:::return
Handler#setEncoding(String):::Set the character encoding used by this Handler:::checkPermission->if->try->if->isSupported->throw->new->UnsupportedEncodingException->catch->throw->new->UnsupportedEncodingException->finally
Handler#getEncoding():::Return the character encoding for this Handler.:::return
Handler#setFilter(Filter):::Set a Filter to control output on this Handler:::checkPermission
Handler#getFilter():::Get the current Filter for this Handler.:::return
Handler#setErrorManager(ErrorManager):::Define an ErrorManager for this Handler:::checkPermission->if->throw->new->NullPointerException
Handler#getErrorManager():::Retrieves the ErrorManager for this Handler.:::checkPermission->return
Handler#reportError(String, Exception, int):::Protected convenience method to report an error to this Handler's ErrorManager:::try->errorManager->error->catch->println->ex2->printStackTrace->finally
Handler#setLevel(Level):::Set the log level specifying which message levels will be logged by this Handler:::if->throw->new->NullPointerException->checkPermission
Handler#getLevel():::Get the log level specifying which messages will be logged by this Handler:::return
Handler#isLoggable(LogRecord):::Check if this Handler would actually log a given LogRecord:::levelValue->getLevel->intValue->if->record->getLevel->intValue->return->filter->getFilter->if->return->return->filter->isLoggable
Level#getResourceBundleName():::Return the level's localization resource bundle name, or null if no localization bundle is defined.:::return
Level#getName():::Return the non-localized string name of the Level.:::return
Level#getLocalizedName():::Return the localized string name of the Level, for the current default locale:::return->getLocalizedLevelName
Level#toString():::Returns a string representation of this Level.:::return
Level#intValue():::Get the integer value for this level:::return
Level#parse(String):::Parse a level name string into a Level:::name->length->level->KnownLevel->KnownLevel->referent->findByName->if->level->isPresent->return->level->get->try->x->Integer->parseInt->KnownLevel->KnownLevel->referent->findByValue->if->level->isPresent->return->level->get->levelObject->new->Level->return->KnownLevel->KnownLevel->referent->findByValue->get->catch->finally->KnownLevel->KnownLevel->referent->findByLocalizedLevelName->if->level->isPresent->return->level->get->throw->new->IllegalArgumentException
Level#equals(Object):::Compare two objects for value equality.:::try->lx->return->catch->return->finally
Level#hashCode():::Generate a hashcode.:::return
Logger#getGlobal():::Return global logger object with the name Logger.GLOBAL_LOGGER_NAME.:::LogManager->getLogManager->return
Logger#getAnonymousLogger():::Create an anonymous Logger:::return->getAnonymousLogger
Logger#getResourceBundle():::Retrieve the localization resource bundle for this logger:::return->getResourceBundleName->findResourceBundle
Logger#getResourceBundleName():::Retrieve the localization resource bundle name for this logger:::return
Logger#setFilter(Filter):::Set a filter to control output on this Logger:::checkPermission->config->setFilter
Logger#getFilter():::Get the current filter for this Logger.:::return
Logger#log(LogRecord):::Log a LogRecord:::if->record->getLevel->isLoggable->return->theFilter->if->theFilter->isLoggable->return->logger->while->loggerHandlers->logger->accessCheckedHandlers->logger->getHandlers->foreach->handler->publish->useParentHdls->logger->getUseParentHandlers->if->break->logger->getParent
Logger#log(Level, String):::Log a message, with no arguments:::if->isLoggable->return->lr->new->LogRecord->doLog
Logger#log(Level, Supplier):::Log a message, which is only to be constructed if the logging level is such that the message will actually be logged:::if->isLoggable->return->lr->msgSupplier->get->new->LogRecord->doLog
Logger#log(Level, String, Object):::Log a message, with one object parameter:::if->isLoggable->return->lr->new->LogRecord->params->lr->setParameters->doLog
Logger#log(Level, String, Object[]):::Log a message, with an array of object arguments:::if->isLoggable->return->lr->new->LogRecord->lr->setParameters->doLog
Logger#log(Level, String, Throwable):::Log a message, with associated Throwable information:::if->isLoggable->return->lr->new->LogRecord->lr->setThrown->doLog
Logger#log(Level, Throwable, Supplier):::Log a lazily constructed message, with associated Throwable information:::if->isLoggable->return->lr->msgSupplier->get->new->LogRecord->lr->setThrown->doLog
Logger#logp(Level, String, String, String):::Log a message, specifying source class and method, with no arguments:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->doLog
Logger#logp(Level, String, String, Supplier):::Log a lazily constructed message, specifying source class and method, with no arguments:::if->isLoggable->return->lr->msgSupplier->get->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->doLog
Logger#logp(Level, String, String, String, Object):::Log a message, specifying source class and method, with a single object parameter to the log message:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->params->lr->setParameters->doLog
Logger#logp(Level, String, String, String, Object[]):::Log a message, specifying source class and method, with an array of object arguments:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->lr->setParameters->doLog
Logger#logp(Level, String, String, String, Throwable):::Log a message, specifying source class and method, with associated Throwable information:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->lr->setThrown->doLog
Logger#logp(Level, String, String, Throwable, Supplier):::Log a lazily constructed message, specifying source class and method, with associated Throwable information:::if->isLoggable->return->lr->msgSupplier->get->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->lr->setThrown->doLog
Logger#logrb(Level, String, String, String, String):::Log a message, specifying source class, method, and resource bundle name with no arguments:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->doLog
Logger#logrb(Level, String, String, String, String, Object):::Log a message, specifying source class, method, and resource bundle name, with a single object parameter to the log message:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->params->lr->setParameters->doLog
Logger#logrb(Level, String, String, String, String, Object[]):::Log a message, specifying source class, method, and resource bundle name, with an array of object arguments:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->lr->setParameters->doLog
Logger#logrb(Level, String, String, ResourceBundle, String, Object...):::Log a message, specifying source class, method, and resource bundle, with an optional list of message parameters:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->if->lr->setParameters->doLog
Logger#logrb(Level, ResourceBundle, String, Object...):::Log a message, specifying source class, method, and resource bundle, with an optional list of message parameters:::if->isLoggable->return->lr->new->LogRecord->if->lr->setParameters->doLog
Logger#logrb(Level, String, String, String, String, Throwable):::Log a message, specifying source class, method, and resource bundle name, with associated Throwable information:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->lr->setThrown->doLog
Logger#logrb(Level, String, String, ResourceBundle, String, Throwable):::Log a message, specifying source class, method, and resource bundle, with associated Throwable information:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->lr->setThrown->doLog
Logger#logrb(Level, ResourceBundle, String, Throwable):::Log a message, specifying source class, method, and resource bundle, with associated Throwable information:::if->isLoggable->return->lr->new->LogRecord->lr->setThrown->doLog
Logger#entering(String, String):::Log a method entry:::logp
Logger#entering(String, String, Object):::Log a method entry, with one parameter:::logp
Logger#entering(String, String, Object[]):::Log a method entry, with an array of parameters:::msg->if->logp->return->if->isLoggable->return->if->b->new->StringBuilder->for->i->b->toString->logp
Logger#exiting(String, String):::Log a method return:::logp
Logger#exiting(String, String, Object):::Log a method return, with result object:::logp
Logger#throwing(String, String, Throwable):::Log throwing an exception:::if->isLoggable->return->lr->new->LogRecord->lr->setSourceClassName->lr->setSourceMethodName->lr->setThrown->doLog
Logger#severe(String):::Log a SEVERE message:::log
Logger#warning(String):::Log a WARNING message:::log
Logger#info(String):::Log an INFO message:::log
Logger#config(String):::Log a CONFIG message:::log
Logger#fine(String):::Log a FINE message:::log
Logger#finer(String):::Log a FINER message:::log
Logger#finest(String):::Log a FINEST message:::log
Logger#severe(Supplier):::Log a SEVERE message, which is only to be constructed if the logging level is such that the message will actually be logged:::log
Logger#warning(Supplier):::Log a WARNING message, which is only to be constructed if the logging level is such that the message will actually be logged:::log
Logger#info(Supplier):::Log a INFO message, which is only to be constructed if the logging level is such that the message will actually be logged:::log
Logger#config(Supplier):::Log a CONFIG message, which is only to be constructed if the logging level is such that the message will actually be logged:::log
Logger#fine(Supplier):::Log a FINE message, which is only to be constructed if the logging level is such that the message will actually be logged:::log
Logger#finer(Supplier):::Log a FINER message, which is only to be constructed if the logging level is such that the message will actually be logged:::log
Logger#finest(Supplier):::Log a FINEST message, which is only to be constructed if the logging level is such that the message will actually be logged:::log
Logger#setLevel(Level):::Set the log level specifying which message levels will be logged by this logger:::checkPermission->synchronized->config->setLevelObject->updateEffectiveLevel
Logger#getLevel():::Get the log Level that has been specified for this Logger:::return
Logger#isLoggable(Level):::Check if a message of the given level would actually be logged by this logger:::levelValue->if->level->intValue->return->return
Logger#getName():::Get the name for this logger.:::return
Logger#addHandler(Handler):::Add a log Handler to receive logging messages:::Objects->requireNonNull->checkPermission->config->addHandler
Logger#removeHandler(Handler):::Remove a log Handler:::checkPermission->if->return->config->removeHandler
Logger#getHandlers():::Get the Handlers associated with this logger.:::return->accessCheckedHandlers
Logger#setUseParentHandlers(boolean):::Specify whether or not this logger should send its output to its parent Logger:::checkPermission->config->setUseParentHandlers
Logger#getUseParentHandlers():::Discover whether or not this logger is sending its output to its parent logger.:::return
Logger#setResourceBundle(ResourceBundle):::Sets a resource bundle on this logger:::checkPermission->baseName->bundle->getBaseBundleName->if->baseName->isEmpty->throw->new->IllegalArgumentException->synchronized->lb->canReplaceResourceBundle->equals->if->throw->new->IllegalArgumentException->LoggerBundle->get
Logger#getParent():::Return the parent for this Logger:::return
Logger#setParent(Logger):::Set the parent for this Logger:::if->throw->new->NullPointerException->if->LogManager->getLogManager->manager->checkPermission->doSetParent
LoggingMXBean#getLoggerNames():::Returns the list of currently registered logger names:::
LoggingMXBean#getLoggerLevel(String):::Gets the name of the log level associated with the specified logger:::
LoggingMXBean#setLoggerLevel(String, String):::Sets the specified logger to the specified new level:::
LoggingMXBean#getParentLoggerName(String):::Returns the name of the parent for the specified logger:::
LogManager#getLogManager():::Returns the global LogManager object.:::if->manager->ensureLogManagerInitialized->return
LogManager#addLogger(Logger):::Add a named logger:::name->logger->getName->if->throw->new->NullPointerException->drainLoggerRefQueueBounded->cx->getUserContext->if->cx->addLocalLogger->forceLoadHandlers->loadLoggerHandlers->return->else->return
LogManager#getLogger(String):::Method to find a named logger:::return->getUserContext->findLogger
LogManager#getLoggerNames():::Get an enumeration of known logger names:::return->getUserContext->getLoggerNames
LogManager#readConfiguration():::Reads and initializes the logging configuration:::checkPermission->cname->System->getProperty->if->try->try->clz->ClassLoader->getSystemClassLoader->loadClass->witness->clz->newInstance->return->catch->clz->Thread->currentThread->getContextClassLoader->loadClass->witness->clz->newInstance->return->finally->catch->println->println->finally->fname->getConfigurationFileName->try->in->new->FileInputStream->bin->new->BufferedInputStream->readConfiguration->catch->finally
LogManager#readConfiguration(InputStream):::Reads and initializes the logging configuration from the given input stream:::checkPermission->configurationLock->lock->try->if->return->try->reset->try->props->load->catch->throw->x->getMessage->new->IOException->finally->names->parseClassNames->foreach->try->clz->ClassLoader->getSystemClassLoader->loadClass->witness->clz->newInstance->catch->println->println->finally->setLevelsOnExistingLoggers->catch->throw->finally->catch->finally->configurationLock->unlock->invokeConfigurationListeners
LogManager#updateConfiguration(Function>):::Updates the logging configuration:::checkPermission->ensureLogManagerInitialized->drainLoggerRefQueueBounded->fname->getConfigurationFileName->try->in->new->FileInputStream->bin->new->BufferedInputStream->updateConfiguration->catch->finally
LogManager#updateConfiguration(InputStream, Function>):::Updates the logging configuration:::checkPermission->ensureLogManagerInitialized->drainLoggerRefQueueBounded->previous->updatePropertyNames->cxs->Collections->emptyList->visited->new->VisitedLoggers->next->new->Properties->try->next->load->catch->throw->x->getMessage->new->IOException->finally->if->return->configurationLock->lock->try->if->return->Stream->previous->stringPropertyNames->stream->next->stringPropertyNames->stream->concat->Collectors->TreeSet->new->toCollection->collect->if->updatePropertyNames->stream->ConfigProperty->Objects->mapper->apply->requireNonNull->merge->forEachOrdered->allKeys->updatePropertyNames->stream->ConfigProperty->matches->filter->ConfigProperty->needsUpdating->filter->loggerConfigs->allKeys->Collectors->ConfigProperty->getLoggerName->TreeMap->new->Collectors->TreeSet->new->toCollection->groupingBy->collect->if->loggerConfigs->isEmpty->contexts->loggers->cxs->isEmpty->Collections->emptyList->cxs->size->new->ArrayList<>->foreach->loggerConfigs->entrySet->name->e->getKey->properties->e->getValue->loggers->clear->foreach->l->cx->findLogger->if->visited->test->loggers->add->if->loggers->isEmpty->continue->foreach->cp->ConfigProperty->find->get->p->previous->getProperty->n->next->getProperty->mod->ModType->of->if->continue->switch->if->continue->level->Level->trim->findLevel->if->if->name->isEmpty->rootLogger->setLevel->foreach->if->name->isEmpty->l->setLevel->break->if->name->isEmpty->useParent->getBooleanProperty->if->foreach->l->setUseParentHandlers->break->hdls->if->name->isEmpty->try->closeHandlers->catch->throw->finally->foreach->if->continue->closeHandlers->if->closeOnResetLoggers->removeIf->continue->if->name->isEmpty->Arrays->rootLogger->getHandlers->asList->createLoggerHandlers->setLoggerHandlers->break->break->catch->finally->configurationLock->unlock->visited->clear->drainLoggerRefQueueBounded->foreach->for->names->cx->getLoggerNames->names->hasMoreElements->invokeConfigurationListeners
LogManager#getProperty(String):::Get the value of a logging property:::return->props->getProperty
LogManager#checkAccess():::Check that the current context is trusted to modify the logging configuration:::checkPermission
LogManager#getLoggingMXBean():::Returns LoggingMXBean for managing loggers.:::return->Logging->getInstance
LogManager#addConfigurationListener(Runnable):::Adds a configuration listener to be invoked each time the logging configuration is read:::r->Objects->requireNonNull->checkPermission->sm->System->getSecurityManager->acc->AccessController->getContext->pa->r->run->return->pr->AccessController->doPrivileged->listeners->putIfAbsent->return
LogManager#removeConfigurationListener(Runnable):::Removes a previously registered configuration listener:::key->Objects->requireNonNull->checkPermission->listeners->remove
LogRecord#getLoggerName():::Get the source Logger's name.:::return
LogRecord#setLoggerName(String):::Set the source Logger's name.:::
LogRecord#getResourceBundle():::Get the localization resource bundle  This is the ResourceBundle that should be used to localize the message string before formatting it:::return
LogRecord#setResourceBundle(ResourceBundle):::Set the localization resource bundle.:::
LogRecord#getResourceBundleName():::Get the localization resource bundle name  This is the name for the ResourceBundle that should be used to localize the message string before formatting it:::return
LogRecord#setResourceBundleName(String):::Set the localization resource bundle name.:::
LogRecord#getLevel():::Get the logging message level, for example Level.SEVERE.:::return
LogRecord#setLevel(Level):::Set the logging message level, for example Level.SEVERE.:::if->throw->new->NullPointerException
LogRecord#getSequenceNumber():::Get the sequence number:::return
LogRecord#setSequenceNumber(long):::Set the sequence number:::
LogRecord#getSourceClassName():::Get the  name of the class that (allegedly) issued the logging request:::if->inferCaller->return
LogRecord#setSourceClassName(String):::Set the name of the class that (allegedly) issued the logging request.:::
LogRecord#getSourceMethodName():::Get the  name of the method that (allegedly) issued the logging request:::if->inferCaller->return
LogRecord#setSourceMethodName(String):::Set the name of the method that (allegedly) issued the logging request.:::
LogRecord#getMessage():::Get the "raw" log message, before localization or formatting:::return
LogRecord#setMessage(String):::Set the "raw" log message, before localization or formatting.:::
LogRecord#getParameters():::Get the parameters to the log message.:::return
LogRecord#setParameters(Object[]):::Set the parameters to the log message.:::
LogRecord#getThreadID():::Get an identifier for the thread where the message originated:::return
LogRecord#setThreadID(int):::Set an identifier for the thread where the message originated.:::
LogRecord#getMillis():::Get truncated event time in milliseconds since 1970.:::return->instant->toEpochMilli
LogRecord#setMillis(long):::Set event time.:::Instant->ofEpochMilli
LogRecord#getInstant():::Gets the instant that the event occurred.:::return
LogRecord#setInstant(Instant):::Sets the instant that the event occurred:::instant->toEpochMilli
LogRecord#getThrown():::Get any throwable associated with the log record:::return
LogRecord#setThrown(Throwable):::Set a throwable associated with the log event.:::
LogRecord.CallerFinder#get():::Returns StackFrame of the caller's frame.:::return->WALKER->s->filter->findFirst->walk
LogRecord.CallerFinder#test(StackWalker.StackFrame):::Returns true if we have found the caller's frame, false if the frame must be skipped.:::cname->t->getClassName->if->isLoggerImplFrame->return->return->isFilteredFrame
MemoryHandler#publish(LogRecord):::Store a LogRecord in an internal buffer:::if->isLoggable->return->ix->if->else->if->record->getLevel->intValue->pushLevel->intValue->push
MemoryHandler#push():::Push any buffered output to the target Handler:::for->i
MemoryHandler#flush():::Causes a flush on the target Handler:::target->flush
MemoryHandler#close():::Close the Handler and free all associated resources:::target->close->setLevel
MemoryHandler#setPushLevel(Level):::Set the pushLevel:::if->throw->new->NullPointerException->checkPermission
MemoryHandler#getPushLevel():::Get the pushLevel.:::return
MemoryHandler#isLoggable(LogRecord):::Check if this Handler would actually log a given LogRecord into its internal buffer:::return->super->isLoggable
SimpleFormatter#format(LogRecord):::Format the given LogRecord:::zdt->ZonedDateTime->record->getInstant->ZoneId->systemDefault->ofInstant->source->if->record->getSourceClassName->record->getSourceClassName->if->record->getSourceMethodName->record->getSourceMethodName->else->record->getLoggerName->message->formatMessage->throwable->if->record->getThrown->sw->new->StringWriter->pw->new->PrintWriter->pw->println->record->getThrown->printStackTrace->pw->close->sw->toString->return->String->record->getLoggerName->record->getLevel->getLocalizedLevelName->format
SocketHandler#close():::Close this output stream.:::super->close->if->try->sock->close->catch->finally
SocketHandler#publish(LogRecord):::Format and publish a LogRecord.:::if->isLoggable->return->super->publish->flush
StreamHandler#setOutputStream(OutputStream):::Change the output stream:::if->throw->new->NullPointerException->flushAndClose->encoding->getEncoding->if->new->OutputStreamWriter->else->try->new->OutputStreamWriter->catch->throw->new->Error->finally
StreamHandler#setEncoding(String):::Set (or change) the character encoding used by this Handler:::super->setEncoding->if->return->flush->if->new->OutputStreamWriter->else->new->OutputStreamWriter
StreamHandler#publish(LogRecord):::Format and publish a LogRecord:::if->isLoggable->return->msg->try->getFormatter->format->catch->reportError->return->finally->try->if->writer->getFormatter->getHead->write->writer->write->catch->reportError->finally
StreamHandler#isLoggable(LogRecord):::Check if this Handler would actually log a given LogRecord:::if->return->return->super->isLoggable
StreamHandler#flush():::Flush any buffered messages.:::if->try->writer->flush->catch->reportError->finally
StreamHandler#close():::Close the current output stream:::flushAndClose
XMLFormatter#format(LogRecord):::Format the given message to XML:::sb->new->StringBuilder->sb->append->instant->record->getInstant->sb->append->if->formatTo->else->instant->toEpochMilli->appendISO8601->sb->append->sb->append->sb->instant->toEpochMilli->append->sb->append->nanoAdjustment->instant->getNano->if->sb->append->sb->append->sb->append->sb->append->sb->record->getSequenceNumber->append->sb->append->name->record->getLoggerName->if->sb->append->escape->sb->append->sb->append->record->getLevel->toString->escape->sb->append->if->record->getSourceClassName->sb->append->record->getSourceClassName->escape->sb->append->if->record->getSourceMethodName->sb->append->record->getSourceMethodName->escape->sb->append->sb->append->sb->record->getThreadID->append->sb->append->if->record->getMessage->message->formatMessage->sb->append->escape->sb->append->sb->append->bundle->record->getResourceBundle->try->if->bundle->record->getMessage->getString->sb->append->record->getMessage->escape->sb->append->sb->append->record->getResourceBundleName->escape->sb->append->catch->finally->parameters->record->getParameters->if->record->getMessage->indexOf->foreach->sb->append->try->parameter->toString->escape->catch->sb->append->finally->sb->append->if->record->getThrown->th->record->getThrown->sb->append->sb->append->th->toString->escape->sb->append->trace->th->getStackTrace->foreach->sb->append->sb->append->frame->getClassName->escape->sb->append->sb->append->frame->getMethodName->escape->sb->append->if->frame->getLineNumber->sb->append->sb->frame->getLineNumber->append->sb->append->sb->append->sb->append->sb->append->return->sb->toString
XMLFormatter#getHead(Handler):::Return the header string for a set of XML formatted records.:::sb->new->StringBuilder->encoding->sb->append->if->h->getEncoding->else->if->defaultCharset->name->try->cs->Charset->forName->cs->name->catch->finally->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->return->sb->toString
XMLFormatter#getTail(Handler):::Return the tail string for a set of XML formatted records.:::return

Configuration#resolve(ModuleFinder, ModuleFinder, Collection):::Resolves a collection of root modules, with this configuration as its parent, to create a new configuration
Configuration#resolveAndBind(ModuleFinder, ModuleFinder, Collection):::Resolves a collection of root modules, with service binding, and with this configuration as its parent, to create a new configuration
Configuration#resolveAndBind(ModuleFinder, Collection, PrintStream):::Resolves a collection of root modules, with service binding, and with the empty configuration as its parent
Configuration#resolve(ModuleFinder, List, ModuleFinder, Collection):::Resolves a collection of root modules to create a configuration
Configuration#resolveAndBind(ModuleFinder, List, ModuleFinder, Collection):::Resolves a collection of root modules, with service binding, to create configuration
Configuration#empty():::Returns the empty configuration
Configuration#parents():::Returns an unmodifiable list of this configuration's parents, in search order
Configuration#modules():::Returns an immutable set of the resolved modules in this configuration.
Configuration#findModule(String):::Finds a resolved module in this configuration, or if not in this configuration, the #parents() parent configurations
Configuration#configurations():::Returns an ordered stream of configurations
Configuration#toString():::Returns a string describing this configuration.
ModuleDescriptor.Requires#modifiers():::Returns the set of modifiers.
ModuleDescriptor.Requires#name():::Return the module name.
ModuleDescriptor.Requires#compiledVersion():::Returns the version of the module if recorded at compile-time.
ModuleDescriptor.Requires#rawCompiledVersion():::Returns the string with the possibly-unparseable version of the module if recorded at compile-time.
ModuleDescriptor.Requires#compareTo(Requires):::Compares this module dependence to another
ModuleDescriptor.Requires#equals(Object):::Tests this module dependence for equality with the given object
ModuleDescriptor.Requires#hashCode():::Computes a hash code for this module dependence
ModuleDescriptor.Requires#toString():::Returns a string describing this module dependence.
ModuleDescriptor.Exports#modifiers():::Returns the set of modifiers.
ModuleDescriptor.Exports#isQualified():::Returns true if this is a qualified export.
ModuleDescriptor.Exports#source():::Returns the package name.
ModuleDescriptor.Exports#targets():::For a qualified export, returns the non-empty and immutable set of the module names to which the package is exported
ModuleDescriptor.Exports#compareTo(Exports):::Compares this module export to another
ModuleDescriptor.Exports#hashCode():::Computes a hash code for this module export
ModuleDescriptor.Exports#equals(Object):::Tests this module export for equality with the given object
ModuleDescriptor.Exports#toString():::Returns a string describing the exported package.
ModuleDescriptor.Opens#modifiers():::Returns the set of modifiers.
ModuleDescriptor.Opens#isQualified():::Returns true if this is a qualified opens.
ModuleDescriptor.Opens#source():::Returns the package name.
ModuleDescriptor.Opens#targets():::For a qualified opens, returns the non-empty and immutable set of the module names to which the package is open
ModuleDescriptor.Opens#compareTo(Opens):::Compares this module opens to another
ModuleDescriptor.Opens#hashCode():::Computes a hash code for this module opens
ModuleDescriptor.Opens#equals(Object):::Tests this module opens for equality with the given object
ModuleDescriptor.Opens#toString():::Returns a string describing the open package.
ModuleDescriptor.Provides#service():::Returns the fully qualified class name of the service type.
ModuleDescriptor.Provides#providers():::Returns the list of the fully qualified class names of the providers or provider factories.
ModuleDescriptor.Provides#compareTo(Provides):::Compares this provides to another
ModuleDescriptor.Provides#hashCode():::Computes a hash code for this provides
ModuleDescriptor.Provides#equals(Object):::Tests this provides for equality with the given object
ModuleDescriptor.Provides#toString():::Returns a string describing this provides.
ModuleDescriptor.Version#parse(String):::Parses the given string as a version string.
ModuleDescriptor.Version#compareTo(Version):::Compares this module version to another module version
ModuleDescriptor.Version#equals(Object):::Tests this module version for equality with the given object
ModuleDescriptor.Version#hashCode():::Computes a hash code for this module version
ModuleDescriptor.Version#toString():::Returns the string from which this version was parsed.
ModuleDescriptor#name()::: Returns the module name
ModuleDescriptor#modifiers()::: Returns the set of module modifiers
ModuleDescriptor#isOpen()::: Returns true if this is an open module
ModuleDescriptor#isAutomatic()::: Returns true if this is an automatic module
ModuleDescriptor#requires()::: Returns the set of Requires objects representing the module dependences
ModuleDescriptor#exports()::: Returns the set of Exports objects representing the exported packages
ModuleDescriptor#opens()::: Returns the set of Opens objects representing the open packages
ModuleDescriptor#uses()::: Returns the set of service dependences
ModuleDescriptor#provides()::: Returns the set of Provides objects representing the services that the module provides
ModuleDescriptor#version()::: Returns the module version
ModuleDescriptor#rawVersion()::: Returns the string with the possibly-unparseable version of the module 
ModuleDescriptor#toNameAndVersion()::: Returns a string containing the module name and, if present, its version
ModuleDescriptor#mainClass()::: Returns the module main class
ModuleDescriptor#packages():::Returns the set of packages in the module
ModuleDescriptor.Builder#requires(Requires):::Adds a dependence on a module.
ModuleDescriptor.Builder#requires(Set, String, Version):::Adds a dependence on a module with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#requires(Set, String):::Adds a dependence on a module with the given (and possibly empty) set of modifiers.
ModuleDescriptor.Builder#requires(String):::Adds a dependence on a module with an empty set of modifiers.
ModuleDescriptor.Builder#exports(Exports):::Adds an exported package.
ModuleDescriptor.Builder#exports(Set, String, Set):::Adds an exported package with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#exports(Set, String):::Adds an exported package with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#exports(String, Set):::Adds an exported package
ModuleDescriptor.Builder#exports(String):::Adds an exported package
ModuleDescriptor.Builder#opens(Opens):::Adds an open package.
ModuleDescriptor.Builder#opens(Set, String, Set):::Adds an open package with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#opens(Set, String):::Adds an open package with the given (and possibly empty) set of modifiers
ModuleDescriptor.Builder#opens(String, Set):::Adds an open package
ModuleDescriptor.Builder#opens(String):::Adds an open package
ModuleDescriptor.Builder#uses(String):::Adds a service dependence.
ModuleDescriptor.Builder#provides(Provides):::Provides a service with one or more implementations
ModuleDescriptor.Builder#provides(String, List):::Provides implementations of a service
ModuleDescriptor.Builder#packages(Set):::Adds packages to the module
ModuleDescriptor.Builder#version(Version):::Sets the module version.
ModuleDescriptor.Builder#version(String):::Sets the module version.
ModuleDescriptor.Builder#mainClass(String):::Sets the module main class
ModuleDescriptor.Builder#build():::Builds and returns a ModuleDescriptor from its components
ModuleDescriptor#compareTo(ModuleDescriptor):::Compares this module descriptor to another
ModuleDescriptor#equals(Object):::Tests this module descriptor for equality with the given object
ModuleDescriptor#hashCode():::Computes a hash code for this module descriptor
ModuleDescriptor#toString()::: Returns a string describing the module
ModuleDescriptor#newModule(String, Set):::Instantiates a builder to build a module descriptor.
ModuleDescriptor#newModule(String):::Instantiates a builder to build a module descriptor for a normal module
ModuleDescriptor#newOpenModule(String):::Instantiates a builder to build a module descriptor for an open module
ModuleDescriptor#newAutomaticModule(String):::Instantiates a builder to build a module descriptor for an automatic module
ModuleDescriptor#read(InputStream, Supplier>):::Reads the binary form of a module declaration from an input stream as a module descriptor
ModuleDescriptor#read(InputStream):::Reads the binary form of a module declaration from an input stream as a module descriptor
ModuleDescriptor#read(ByteBuffer, Supplier>):::Reads the binary form of a module declaration from a byte buffer as a module descriptor
ModuleDescriptor#read(ByteBuffer):::Reads the binary form of a module declaration from a byte buffer as a module descriptor
ModuleFinder#find(String):::Finds a reference to a module of a given name
ModuleFinder#findAll():::Returns the set of all module references that this finder can locate
ModuleFinder#ofSystem():::Returns a module finder that locates the system modules
ModuleFinder#of(Path...):::Returns a module finder that locates modules on the file system by searching a sequence of directories and/or packaged modules
ModuleFinder#compose(ModuleFinder...):::Returns a module finder that is composed from a sequence of zero or more module finders
ModuleReader#find(String):::Finds a resource, returning a URI to the resource in the module
ModuleReader#open(String):::Opens a resource, returning an input stream to read the resource in the module
ModuleReader#read(String):::Reads a resource, returning a byte buffer with the contents of the resource
ModuleReader#release(ByteBuffer):::Release a byte buffer
ModuleReader#list():::Lists the contents of the module, returning a stream of elements that are the names of all resources in the module
ModuleReader#close():::Closes the module reader
ModuleReference#descriptor():::Returns the module descriptor.
ModuleReference#location():::Returns the location of this module's content, if known
ModuleReference#open():::Opens the module content for reading.
ResolvedModule#configuration():::Returns the configuration that this resolved module is in.
ResolvedModule#reference():::Returns the reference to the module's content.
ResolvedModule#descriptor():::Returns the module descriptor
ResolvedModule#name():::Returns the module name
ResolvedModule#reads():::Returns the set of resolved modules that this resolved module reads.
ResolvedModule#hashCode():::Computes a hash code for this resolved module
ResolvedModule#equals(Object):::Tests this resolved module for equality with the given object
ResolvedModule#toString():::Returns a string describing this resolved module.
Resolver#resolve(Collection):::Resolves the given named modules.
Resolver#bind():::Augments the set of resolved modules with modules induced by the service-use relation.
Resolver#finish(Configuration):::Execute post-resolution checks and returns the module graph of resolved modules as a map.

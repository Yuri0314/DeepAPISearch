Configuration#resolve(ModuleFinder, ModuleFinder, Collection):::Resolves a collection of root modules, with this configuration as its parent, to create a new configuration:::List.of->this.resolve
Configuration#resolveAndBind(ModuleFinder, ModuleFinder, Collection):::Resolves a collection of root modules, with service binding, and with this configuration as its parent, to create a new configuration:::List.of->this.resolveAndBind
Configuration#resolveAndBind(ModuleFinder, Collection, PrintStream):::Resolves a collection of root modules, with service binding, and with the empty configuration as its parent:::this.empty->List.of->ModuleFinder.of->resolver.resolve(roots).bind
Configuration#resolve(ModuleFinder, List, ModuleFinder, Collection):::Resolves a collection of root modules to create a configuration:::Objects.requireNonNull->Objects.requireNonNull->Objects.requireNonNull->parentList.isEmpty->resolver.resolve
Configuration#resolveAndBind(ModuleFinder, List, ModuleFinder, Collection):::Resolves a collection of root modules, with service binding, to create configuration:::Objects.requireNonNull->Objects.requireNonNull->Objects.requireNonNull->parentList.isEmpty->resolver.resolve(roots).bind
Configuration#empty():::Returns the empty configuration:::
Configuration#parents():::Returns an unmodifiable list of this configuration's parents, in search order:::
Configuration#modules():::Returns an immutable set of the resolved modules in this configuration.:::
Configuration#findModule(String):::Finds a resolved module in this configuration, or if not in this configuration, the #parents() parent configurations:::Objects.requireNonNull->nameToModule.get->Optional.of->parents.isEmpty->configurations().skip(// skip this configuration
1).map(cf -> cf.nameToModule.get(name)).filter(Objects::nonNull).findFirst->Optional.empty
Configuration#configurations():::Returns an ordered stream of configurations:::visited.add->stack.push->stack.pop->allConfigurations.add->layer.parents.get->visited.contains->visited.add->stack.push->layer.parents.size->stack.isEmpty->allConfigurations.stream
Configuration#toString():::Returns a string describing this configuration.:::Collectors.joining->modules().stream().map(ResolvedModule::name).collect
ModuleDescriptor.Requires#modifiers():::Returns the set of modifiers.:::
ModuleDescriptor.Requires#name():::Return the module name.:::
ModuleDescriptor.Requires#compiledVersion():::Returns the version of the module if recorded at compile-time.:::Optional.ofNullable
ModuleDescriptor.Requires#rawCompiledVersion():::Returns the string with the possibly-unparseable version of the module if recorded at compile-time.:::Optional.ofNullable->compiledVersion.toString->Optional.of
ModuleDescriptor.Requires#compareTo(Requires):::Compares this module dependence to another:::that.name->this.name().compareTo->this.modifiers->this.modsValue->that.modifiers->this.modsValue->Long.compare->this.compare->this.compare
ModuleDescriptor.Requires#equals(Object):::Tests this module dependence for equality with the given object:::name.equals->mods.equals->Objects.equals->Objects.equals
ModuleDescriptor.Requires#hashCode():::Computes a hash code for this module dependence:::name.hashCode->mods.hashCode->compiledVersion.hashCode->rawCompiledVersion.hashCode
ModuleDescriptor.Requires#toString():::Returns a string describing this module dependence.:::this.name->this.name->ModuleDescriptor.toString
ModuleDescriptor.Exports#modifiers():::Returns the set of modifiers.:::
ModuleDescriptor.Exports#isQualified():::Returns true if this is a qualified export.:::targets.isEmpty
ModuleDescriptor.Exports#source():::Returns the package name.:::
ModuleDescriptor.Exports#targets():::For a qualified export, returns the non-empty and immutable set of the module names to which the package is exported:::
ModuleDescriptor.Exports#compareTo(Exports):::Compares this module export to another:::source.compareTo->this.modifiers->this.modsValue->that.modifiers->this.modsValue->Long.compare->this.compare
ModuleDescriptor.Exports#hashCode():::Computes a hash code for this module export:::mods.hashCode->source.hashCode->targets.hashCode
ModuleDescriptor.Exports#equals(Object):::Tests this module export for equality with the given object:::Objects.equals->Objects.equals->Objects.equals
ModuleDescriptor.Exports#toString():::Returns a string describing the exported package.:::ModuleDescriptor.toString->targets.isEmpty
ModuleDescriptor.Opens#modifiers():::Returns the set of modifiers.:::
ModuleDescriptor.Opens#isQualified():::Returns true if this is a qualified opens.:::targets.isEmpty
ModuleDescriptor.Opens#source():::Returns the package name.:::
ModuleDescriptor.Opens#targets():::For a qualified opens, returns the non-empty and immutable set of the module names to which the package is open:::
ModuleDescriptor.Opens#compareTo(Opens):::Compares this module opens to another:::source.compareTo->this.modifiers->this.modsValue->that.modifiers->this.modsValue->Long.compare->this.compare
ModuleDescriptor.Opens#hashCode():::Computes a hash code for this module opens:::mods.hashCode->source.hashCode->targets.hashCode
ModuleDescriptor.Opens#equals(Object):::Tests this module opens for equality with the given object:::Objects.equals->Objects.equals->Objects.equals
ModuleDescriptor.Opens#toString():::Returns a string describing the open package.:::ModuleDescriptor.toString->targets.isEmpty
ModuleDescriptor.Provides#service():::Returns the fully qualified class name of the service type.:::
ModuleDescriptor.Provides#providers():::Returns the list of the fully qualified class names of the providers or provider factories.:::
ModuleDescriptor.Provides#compareTo(Provides):::Compares this provides to another:::service.compareTo->this.providers.size->that.providers.size->this.providers.get->that.providers.get->e1.compareTo->Math.min
ModuleDescriptor.Provides#hashCode():::Computes a hash code for this provides:::service.hashCode->providers.hashCode
ModuleDescriptor.Provides#equals(Object):::Tests this provides for equality with the given object:::Objects.equals->Objects.equals
ModuleDescriptor.Provides#toString():::Returns a string describing this provides.:::
ModuleDescriptor.Version#parse(String):::Parses the given string as a version string.:::
ModuleDescriptor.Version#compareTo(Version):::Compares this module version to another module version:::this.compareTokens->this.pre.isEmpty->that.pre.isEmpty->that.pre.isEmpty->this.compareTokens->this.compareTokens
ModuleDescriptor.Version#equals(Object):::Tests this module version for equality with the given object:::this.compareTo
ModuleDescriptor.Version#hashCode():::Computes a hash code for this module version:::version.hashCode
ModuleDescriptor.Version#toString():::Returns the string from which this version was parsed.:::
ModuleDescriptor#name()::: Returns the module name:::
ModuleDescriptor#modifiers()::: Returns the set of module modifiers:::
ModuleDescriptor#isOpen()::: Returns true if this is an open module:::
ModuleDescriptor#isAutomatic()::: Returns true if this is an automatic module:::
ModuleDescriptor#requires()::: Returns the set of Requires objects representing the module dependences:::
ModuleDescriptor#exports()::: Returns the set of Exports objects representing the exported packages:::
ModuleDescriptor#opens()::: Returns the set of Opens objects representing the open packages:::
ModuleDescriptor#uses()::: Returns the set of service dependences:::
ModuleDescriptor#provides()::: Returns the set of Provides objects representing the services that the module provides:::
ModuleDescriptor#version()::: Returns the module version:::Optional.ofNullable
ModuleDescriptor#rawVersion()::: Returns the string with the possibly-unparseable version of the module :::Optional.ofNullable->version.toString->Optional.of
ModuleDescriptor#toNameAndVersion()::: Returns a string containing the module name and, if present, its version:::this.name->this.name
ModuleDescriptor#mainClass()::: Returns the module main class:::Optional.ofNullable
ModuleDescriptor#packages():::Returns the set of packages in the module:::
ModuleDescriptor.Builder#requires(Requires):::Adds a dependence on a module.:::req.name->name.equals->requires.containsKey->requires.put
ModuleDescriptor.Builder#requires(Set, String, Version):::Adds a dependence on a module with the given (and possibly empty) set of modifiers:::Objects.requireNonNull->this.requireModuleName->this.requires
ModuleDescriptor.Builder#requires(Set, String):::Adds a dependence on a module with the given (and possibly empty) set of modifiers.:::this.requireModuleName->this.requires
ModuleDescriptor.Builder#requires(String):::Adds a dependence on a module with an empty set of modifiers.:::EnumSet.noneOf->this.requires
ModuleDescriptor.Builder#exports(Exports):::Adds an exported package.:::e.source->exports.containsKey->exports.put->packages.add
ModuleDescriptor.Builder#exports(Set, String, Set):::Adds an exported package with the given (and possibly empty) set of modifiers:::targets.isEmpty->this.requirePackageName->targets.forEach->this.exports
ModuleDescriptor.Builder#exports(Set, String):::Adds an exported package with the given (and possibly empty) set of modifiers:::this.requirePackageName->Set.of->this.exports
ModuleDescriptor.Builder#exports(String, Set):::Adds an exported package:::Set.of->this.exports
ModuleDescriptor.Builder#exports(String):::Adds an exported package:::Set.of->this.exports
ModuleDescriptor.Builder#opens(Opens):::Adds an open package.:::obj.source->opens.containsKey->opens.put->packages.add
ModuleDescriptor.Builder#opens(Set, String, Set):::Adds an open package with the given (and possibly empty) set of modifiers:::targets.isEmpty->this.requirePackageName->targets.forEach->this.opens
ModuleDescriptor.Builder#opens(Set, String):::Adds an open package with the given (and possibly empty) set of modifiers:::this.requirePackageName->Set.of->this.opens
ModuleDescriptor.Builder#opens(String, Set):::Adds an open package:::Set.of->this.opens
ModuleDescriptor.Builder#opens(String):::Adds an open package:::Set.of->this.opens
ModuleDescriptor.Builder#uses(String):::Adds a service dependence.:::this.requireServiceTypeName->uses.contains->uses.add
ModuleDescriptor.Builder#provides(Provides):::Provides a service with one or more implementations:::p.service->provides.containsKey->provides.put->p.providers().forEach
ModuleDescriptor.Builder#provides(String, List):::Provides implementations of a service:::providers.isEmpty->this.packageName->pn.isEmpty->this.packageName->pn.isEmpty->this.requireServiceTypeName->providers.forEach->this.provides
ModuleDescriptor.Builder#packages(Set):::Adds packages to the module:::pns.forEach->this.packages.addAll
ModuleDescriptor.Builder#version(Version):::Sets the module version.:::this.requireNonNull
ModuleDescriptor.Builder#version(String):::Sets the module version.:::Version.parse
ModuleDescriptor.Builder#mainClass(String):::Sets the module main class:::this.packageName->pn.isEmpty->this.requireQualifiedClassName->this.packageName->pn.isEmpty->packages.add
ModuleDescriptor.Builder#build():::Builds and returns a ModuleDescriptor from its components:::this.requires.values->this.exports.values->this.opens.values->name.equals->this.requires.containsKey->requires.add->this.provides.values
ModuleDescriptor#compareTo(ModuleDescriptor):::Compares this module descriptor to another:::that.name->this.name().compareTo->this.compare->this.compare->this.modifiers->this.modsValue->that.modifiers->this.modsValue->Long.compare->this.compare->this.compare->this.compare->this.compare->this.compare->this.compare->this.compare
ModuleDescriptor#equals(Object):::Tests this module descriptor for equality with the given object:::name.equals->modifiers.equals->requires.equals->Objects.equals->exports.equals->opens.equals->uses.equals->provides.equals->Objects.equals->Objects.equals->Objects.equals
ModuleDescriptor#hashCode():::Computes a hash code for this module descriptor:::name.hashCode->Objects.hashCode->requires.hashCode->Objects.hashCode->exports.hashCode->opens.hashCode->uses.hashCode->provides.hashCode->Objects.hashCode->Objects.hashCode->Objects.hashCode
ModuleDescriptor#toString()::: Returns a string describing the module:::this.isOpen->sb.append->this.toNameAndVersion->sb.append("module { name: ").append->requires.isEmpty->sb.append(", ").append->uses.isEmpty->sb.append(", uses: ").append->exports.isEmpty->sb.append(", exports: ").append->opens.isEmpty->sb.append(", opens: ").append->provides.isEmpty->sb.append(", provides: ").append->sb.append->sb.toString
ModuleDescriptor#newModule(String, Set):::Instantiates a builder to build a module descriptor.:::mods.contains->mods.size
ModuleDescriptor#newModule(String):::Instantiates a builder to build a module descriptor for a normal module:::Set.of
ModuleDescriptor#newOpenModule(String):::Instantiates a builder to build a module descriptor for an open module:::Set.of
ModuleDescriptor#newAutomaticModule(String):::Instantiates a builder to build a module descriptor for an automatic module:::Set.of
ModuleDescriptor#read(InputStream, Supplier>):::Reads the binary form of a module declaration from an input stream as a module descriptor:::ModuleInfo.read(in, requireNonNull(packageFinder)).descriptor
ModuleDescriptor#read(InputStream):::Reads the binary form of a module declaration from an input stream as a module descriptor:::ModuleInfo.read(in, null).descriptor
ModuleDescriptor#read(ByteBuffer, Supplier>):::Reads the binary form of a module declaration from a byte buffer as a module descriptor:::ModuleInfo.read(bb, requireNonNull(packageFinder)).descriptor
ModuleDescriptor#read(ByteBuffer):::Reads the binary form of a module declaration from a byte buffer as a module descriptor:::ModuleInfo.read(bb, null).descriptor
ModuleFinder#find(String):::Finds a reference to a module of a given name:::
ModuleFinder#findAll():::Returns the set of all module references that this finder can locate:::
ModuleFinder#ofSystem():::Returns a module finder that locates the system modules:::System.getSecurityManager->SystemModuleFinders.ofSystem->sm.checkPermission->AccessController.doPrivileged
ModuleFinder#of(Path...):::Returns a module finder that locates modules on the file system by searching a sequence of directories and/or packaged modules:::Objects.requireNonNull->Optional.empty->Set.of->ModulePath.of
ModuleFinder#compose(ModuleFinder...):::Returns a module finder that is composed from a sequence of zero or more module finders:::List.of->nameToModule.get->Optional.of->finderList.stream().map(f -> f.find(name)).flatMap(Optional::stream).findFirst->omref.ifPresent->nameToModule.values->finderList.stream().flatMap(f -> f.findAll().stream()).forEach->Collections.unmodifiableSet
ModuleReader#find(String):::Finds a resource, returning a URI to the resource in the module:::
ModuleReader#open(String):::Opens a resource, returning an input stream to read the resource in the module:::this.find->ouri.isPresent->Optional.empty->ouri.get().toURL().openStream->Optional.of
ModuleReader#read(String):::Reads a resource, returning a byte buffer with the contents of the resource:::this.open->oin.isPresent->Optional.empty->oin.get->in.readAllBytes->ByteBuffer.wrap->Optional.of
ModuleReader#release(ByteBuffer):::Release a byte buffer:::Objects.requireNonNull
ModuleReader#list():::Lists the contents of the module, returning a stream of elements that are the names of all resources in the module:::
ModuleReader#close():::Closes the module reader:::
ModuleReference#descriptor():::Returns the module descriptor.:::
ModuleReference#location():::Returns the location of this module's content, if known:::Optional.ofNullable
ModuleReference#open():::Opens the module content for reading.:::
ResolvedModule#configuration():::Returns the configuration that this resolved module is in.:::
ResolvedModule#reference():::Returns the reference to the module's content.:::
ResolvedModule#descriptor():::Returns the module descriptor:::reference().descriptor
ResolvedModule#name():::Returns the module name:::reference().descriptor().name
ResolvedModule#reads():::Returns the set of resolved modules that this resolved module reads.:::cf.reads
ResolvedModule#hashCode():::Computes a hash code for this resolved module:::cf.hashCode->mref.hashCode
ResolvedModule#equals(Object):::Tests this resolved module for equality with the given object:::Objects.equals->Objects.equals
ResolvedModule#toString():::Returns a string describing this resolved module.:::System.identityHashCode->this.name
Resolver#resolve(Collection):::Resolves the given named modules.:::this.findWithBeforeFinder->this.findInParent->this.findWithAfterFinder->this.findFail->this.isTracing->this.nameAndInfo->this.trace->this.addFoundModule->mref.descriptor->q.push->this.resolve
Resolver#bind():::Augments the set of resolved modules with modules induced by the service-use relation.:::mref.descriptor->descriptor.provides().isEmpty->provides.service->availableProviders.get->availableProviders.put->providers.add->descriptor.provides->this.findAll->ModuleLayer.boot->Collectors.toSet->parents.stream().flatMap(Configuration::configurations).distinct().flatMap(c -> c.descriptors().stream()).collect->mref.descriptor->initialConsumers.add->nameToReference.values->descriptor.uses().isEmpty->this.isTracing->availableProviders.get->mref.descriptor->provider.equals->this.isTracing->modulesToBind.add->descriptor.name->this.nameAndInfo->this.trace->provider.name->nameToReference.containsKey->this.addFoundModule->q.push->descriptor.uses->this.resolve->candidateConsumers.isEmpty
Resolver#finish(Configuration):::Execute post-resolution checks and returns the module graph of resolved modules as a map.:::this.detectCycles->this.checkHashes->this.makeGraph->this.checkExportSuppliers

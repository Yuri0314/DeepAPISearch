java.lang.module.Configuration#targetPlatform()->String:::
java.lang.module.Configuration#resolve(ModuleFinder, ModuleFinder, Collection<String>)->Configuration:::Resolves a collection of root modules, with this configuration as its parent, to create a new configuration
java.lang.module.Configuration#resolveAndBind(ModuleFinder, ModuleFinder, Collection<String>)->Configuration:::Resolves a collection of root modules, with service binding, and with this configuration as its parent, to create a new configuration
java.lang.module.Configuration#resolveAndBind(ModuleFinder, Collection<String>, PrintStream)->Configuration:::Resolves a collection of root modules, with service binding, and with the empty configuration as its parent
java.lang.module.Configuration#resolve(ModuleFinder, List<Configuration>, ModuleFinder, Collection<String>)->Configuration:::Resolves a collection of root modules to create a configuration
java.lang.module.Configuration#resolveAndBind(ModuleFinder, List<Configuration>, ModuleFinder, Collection<String>)->Configuration:::Resolves a collection of root modules, with service binding, to create configuration
java.lang.module.Configuration#empty()->Configuration:::Returns the empty configuration
java.lang.module.Configuration#parents()->List<Configuration>:::Returns an unmodifiable list of this configuration's parents, in search order
java.lang.module.Configuration#modules()->Set<ResolvedModule>:::Returns an immutable set of the resolved modules in this configuration.
java.lang.module.Configuration#findModule(String)->Optional<ResolvedModule>:::Finds a resolved module in this configuration, or if not in this configuration, the {@linkplain #parents() parent} configurations
java.lang.module.Configuration#descriptors()->Set<ModuleDescriptor>:::
java.lang.module.Configuration#reads(ResolvedModule)->Set<ResolvedModule>:::
java.lang.module.Configuration#configurations()->Stream<Configuration>:::Returns an ordered stream of configurations
java.lang.module.Configuration#toString()->String:::Returns a string describing this configuration.
java.lang.module.ModuleDescriptor.Requires#modifiers()->Set<Modifier>:::Returns the set of modifiers.
java.lang.module.ModuleDescriptor.Requires#name()->String:::Return the module name.
java.lang.module.ModuleDescriptor.Requires#compiledVersion()->Optional<Version>:::Returns the version of the module if recorded at compile-time.
java.lang.module.ModuleDescriptor.Requires#rawCompiledVersion()->Optional<String>:::Returns the string with the possibly-unparseable version of the module if recorded at compile-time.
java.lang.module.ModuleDescriptor.Requires#compareTo(Requires)->int:::Compares this module dependence to another
java.lang.module.ModuleDescriptor.Requires#equals(Object)->boolean:::Tests this module dependence for equality with the given object
java.lang.module.ModuleDescriptor.Requires#hashCode()->int:::Computes a hash code for this module dependence
java.lang.module.ModuleDescriptor.Requires#toString()->String:::Returns a string describing this module dependence.
java.lang.module.ModuleDescriptor.Exports#modifiers()->Set<Modifier>:::Returns the set of modifiers.
java.lang.module.ModuleDescriptor.Exports#isQualified()->boolean:::Returns true if this is a qualified export.
java.lang.module.ModuleDescriptor.Exports#source()->String:::Returns the package name.
java.lang.module.ModuleDescriptor.Exports#targets()->Set<String>:::For a qualified export, returns the non-empty and immutable set of the module names to which the package is exported
java.lang.module.ModuleDescriptor.Exports#compareTo(Exports)->int:::Compares this module export to another
java.lang.module.ModuleDescriptor.Exports#hashCode()->int:::Computes a hash code for this module export
java.lang.module.ModuleDescriptor.Exports#equals(Object)->boolean:::Tests this module export for equality with the given object
java.lang.module.ModuleDescriptor.Exports#toString()->String:::Returns a string describing the exported package.
java.lang.module.ModuleDescriptor.Opens#modifiers()->Set<Modifier>:::Returns the set of modifiers.
java.lang.module.ModuleDescriptor.Opens#isQualified()->boolean:::Returns true if this is a qualified opens.
java.lang.module.ModuleDescriptor.Opens#source()->String:::Returns the package name.
java.lang.module.ModuleDescriptor.Opens#targets()->Set<String>:::For a qualified opens, returns the non-empty and immutable set of the module names to which the package is open
java.lang.module.ModuleDescriptor.Opens#compareTo(Opens)->int:::Compares this module opens to another
java.lang.module.ModuleDescriptor.Opens#hashCode()->int:::Computes a hash code for this module opens
java.lang.module.ModuleDescriptor.Opens#equals(Object)->boolean:::Tests this module opens for equality with the given object
java.lang.module.ModuleDescriptor.Opens#toString()->String:::Returns a string describing the open package.
java.lang.module.ModuleDescriptor.Provides#service()->String:::Returns the fully qualified class name of the service type.
java.lang.module.ModuleDescriptor.Provides#providers()->List<String>:::Returns the list of the fully qualified class names of the providers or provider factories.
java.lang.module.ModuleDescriptor.Provides#compareTo(Provides)->int:::Compares this provides to another
java.lang.module.ModuleDescriptor.Provides#hashCode()->int:::Computes a hash code for this provides
java.lang.module.ModuleDescriptor.Provides#equals(Object)->boolean:::Tests this provides for equality with the given object
java.lang.module.ModuleDescriptor.Provides#toString()->String:::Returns a string describing this provides.
java.lang.module.ModuleDescriptor.Version#parse(String)->Version:::Parses the given string as a version string.
java.lang.module.ModuleDescriptor.Version#compareTo(Version)->int:::Compares this module version to another module version
java.lang.module.ModuleDescriptor.Version#equals(Object)->boolean:::Tests this module version for equality with the given object
java.lang.module.ModuleDescriptor.Version#hashCode()->int:::Computes a hash code for this module version
java.lang.module.ModuleDescriptor.Version#toString()->String:::Returns the string from which this version was parsed.
java.lang.module.ModuleDescriptor#name()->String::: Returns the module name
java.lang.module.ModuleDescriptor#modifiers()->Set<Modifier>::: Returns the set of module modifiers
java.lang.module.ModuleDescriptor#isOpen()->boolean::: Returns true if this is an open module
java.lang.module.ModuleDescriptor#isAutomatic()->boolean::: Returns true if this is an automatic module
java.lang.module.ModuleDescriptor#requires()->Set<Requires>::: Returns the set of Requires objects representing the module dependences
java.lang.module.ModuleDescriptor#exports()->Set<Exports>::: Returns the set of Exports objects representing the exported packages
java.lang.module.ModuleDescriptor#opens()->Set<Opens>::: Returns the set of Opens objects representing the open packages
java.lang.module.ModuleDescriptor#uses()->Set<String>::: Returns the set of service dependences
java.lang.module.ModuleDescriptor#provides()->Set<Provides>::: Returns the set of Provides objects representing the services that the module provides
java.lang.module.ModuleDescriptor#version()->Optional<Version>::: Returns the module version
java.lang.module.ModuleDescriptor#rawVersion()->Optional<String>::: Returns the string with the possibly-unparseable version of the module 
java.lang.module.ModuleDescriptor#toNameAndVersion()->String::: Returns a string containing the module name and, if present, its version
java.lang.module.ModuleDescriptor#mainClass()->Optional<String>::: Returns the module main class
java.lang.module.ModuleDescriptor#packages()->Set<String>:::Returns the set of packages in the module
java.lang.module.ModuleDescriptor.Builder#packages()->Set<String>:::
java.lang.module.ModuleDescriptor.Builder#requires(Requires)->Builder:::Adds a dependence on a module.
java.lang.module.ModuleDescriptor.Builder#requires(Set<Requires.Modifier>, String, Version)->Builder:::Adds a dependence on a module with the given (and possibly empty) set of modifiers
java.lang.module.ModuleDescriptor.Builder#requires(Set<Requires.Modifier>, String, String)->Builder:::
java.lang.module.ModuleDescriptor.Builder#requires(Set<Requires.Modifier>, String)->Builder:::Adds a dependence on a module with the given (and possibly empty) set of modifiers.
java.lang.module.ModuleDescriptor.Builder#requires(String)->Builder:::Adds a dependence on a module with an empty set of modifiers.
java.lang.module.ModuleDescriptor.Builder#exports(Exports)->Builder:::Adds an exported package.
java.lang.module.ModuleDescriptor.Builder#exports(Set<Exports.Modifier>, String, Set<String>)->Builder:::Adds an exported package with the given (and possibly empty) set of modifiers
java.lang.module.ModuleDescriptor.Builder#exports(Set<Exports.Modifier>, String)->Builder:::Adds an exported package with the given (and possibly empty) set of modifiers
java.lang.module.ModuleDescriptor.Builder#exports(String, Set<String>)->Builder:::Adds an exported package
java.lang.module.ModuleDescriptor.Builder#exports(String)->Builder:::Adds an exported package
java.lang.module.ModuleDescriptor.Builder#opens(Opens)->Builder:::Adds an open package.
java.lang.module.ModuleDescriptor.Builder#opens(Set<Opens.Modifier>, String, Set<String>)->Builder:::Adds an open package with the given (and possibly empty) set of modifiers
java.lang.module.ModuleDescriptor.Builder#opens(Set<Opens.Modifier>, String)->Builder:::Adds an open package with the given (and possibly empty) set of modifiers
java.lang.module.ModuleDescriptor.Builder#opens(String, Set<String>)->Builder:::Adds an open package
java.lang.module.ModuleDescriptor.Builder#opens(String)->Builder:::Adds an open package
java.lang.module.ModuleDescriptor.Builder#uses(String)->Builder:::Adds a service dependence.
java.lang.module.ModuleDescriptor.Builder#provides(Provides)->Builder:::Provides a service with one or more implementations
java.lang.module.ModuleDescriptor.Builder#provides(String, List<String>)->Builder:::Provides implementations of a service
java.lang.module.ModuleDescriptor.Builder#packages(Set<String>)->Builder:::Adds packages to the module
java.lang.module.ModuleDescriptor.Builder#version(Version)->Builder:::Sets the module version.
java.lang.module.ModuleDescriptor.Builder#version(String)->Builder:::Sets the module version.
java.lang.module.ModuleDescriptor.Builder#mainClass(String)->Builder:::Sets the module main class
java.lang.module.ModuleDescriptor.Builder#build()->ModuleDescriptor:::Builds and returns a ModuleDescriptor from its components
java.lang.module.ModuleDescriptor#compareTo(ModuleDescriptor)->int:::Compares this module descriptor to another
java.lang.module.ModuleDescriptor#equals(Object)->boolean:::Tests this module descriptor for equality with the given object
java.lang.module.ModuleDescriptor#hashCode()->int:::Computes a hash code for this module descriptor
java.lang.module.ModuleDescriptor#toString()->String::: Returns a string describing the module
java.lang.module.ModuleDescriptor#newModule(String, Set<Modifier>)->Builder:::Instantiates a builder to build a module descriptor.
java.lang.module.ModuleDescriptor#newModule(String)->Builder:::Instantiates a builder to build a module descriptor for a normal module
java.lang.module.ModuleDescriptor#newOpenModule(String)->Builder:::Instantiates a builder to build a module descriptor for an open module
java.lang.module.ModuleDescriptor#newAutomaticModule(String)->Builder:::Instantiates a builder to build a module descriptor for an automatic module
java.lang.module.ModuleDescriptor#read(InputStream, Supplier<Set<String>>)->ModuleDescriptor:::Reads the binary form of a module declaration from an input stream as a module descriptor
java.lang.module.ModuleDescriptor#read(InputStream)->ModuleDescriptor:::Reads the binary form of a module declaration from an input stream as a module descriptor
java.lang.module.ModuleDescriptor#read(ByteBuffer, Supplier<Set<String>>)->ModuleDescriptor:::Reads the binary form of a module declaration from a byte buffer as a module descriptor
java.lang.module.ModuleDescriptor#read(ByteBuffer)->ModuleDescriptor:::Reads the binary form of a module declaration from a byte buffer as a module descriptor
java.lang.module.ModuleFinder#find(String)->Optional<ModuleReference>:::Finds a reference to a module of a given name
java.lang.module.ModuleFinder#findAll()->Set<ModuleReference>:::Returns the set of all module references that this finder can locate
java.lang.module.ModuleFinder#ofSystem()->ModuleFinder:::Returns a module finder that locates the system modules
java.lang.module.ModuleFinder#of(Path...)->ModuleFinder:::Returns a module finder that locates modules on the file system by searching a sequence of directories and/or packaged modules
java.lang.module.ModuleFinder#compose(ModuleFinder...)->ModuleFinder:::Returns a module finder that is composed from a sequence of zero or more module finders
java.lang.module.ModuleReader#find(String)->Optional<URI>:::Finds a resource, returning a URI to the resource in the module
java.lang.module.ModuleReader#open(String)->Optional<InputStream>:::Opens a resource, returning an input stream to read the resource in the module
java.lang.module.ModuleReader#read(String)->Optional<ByteBuffer>:::Reads a resource, returning a byte buffer with the contents of the resource
java.lang.module.ModuleReader#release(ByteBuffer)->void:::Release a byte buffer
java.lang.module.ModuleReader#list()->Stream<String>:::Lists the contents of the module, returning a stream of elements that are the names of all resources in the module
java.lang.module.ModuleReader#close()->void:::Closes the module reader
java.lang.module.ModuleReference#descriptor()->ModuleDescriptor:::Returns the module descriptor.
java.lang.module.ModuleReference#location()->Optional<URI>:::Returns the location of this module's content, if known
java.lang.module.ModuleReference#open()->ModuleReader:::Opens the module content for reading.
java.lang.module.ResolvedModule#configuration()->Configuration:::Returns the configuration that this resolved module is in.
java.lang.module.ResolvedModule#reference()->ModuleReference:::Returns the reference to the module's content.
java.lang.module.ResolvedModule#descriptor()->ModuleDescriptor:::Returns the module descriptor
java.lang.module.ResolvedModule#name()->String:::Returns the module name
java.lang.module.ResolvedModule#reads()->Set<ResolvedModule>:::Returns the set of resolved modules that this resolved module reads.
java.lang.module.ResolvedModule#hashCode()->int:::Computes a hash code for this resolved module
java.lang.module.ResolvedModule#equals(Object)->boolean:::Tests this resolved module for equality with the given object
java.lang.module.ResolvedModule#toString()->String:::Returns a string describing this resolved module.
java.lang.module.Resolver#targetPlatform()->String:::
java.lang.module.Resolver#resolve(Collection<String>)->Resolver:::Resolves the given named modules.
java.lang.module.Resolver#bind()->Resolver:::Augments the set of resolved modules with modules induced by the service-use relation.
java.lang.module.Resolver#finish(Configuration)->Map<ResolvedModule, Set<ResolvedModule>>:::Execute post-resolution checks and returns the module graph of resolved modules as a map.

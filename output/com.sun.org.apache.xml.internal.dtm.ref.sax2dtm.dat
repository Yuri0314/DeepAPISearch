com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#setUseSourceLocation(boolean)->void:::Set whether information about document source location should be maintained or not.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#_dataOrQName(int)->int:::Get the data or qualified name for the given node identity.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#clearCoRoutine()->void:::Ask the CoRoutine parser to doTerminate and clear the reference.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#clearCoRoutine(boolean)->void:::Ask the CoRoutine parser to doTerminate and clear the reference
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#setIncrementalSAXSource(IncrementalSAXSource)->void:::Bind a IncrementalSAXSource to this DTM
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getContentHandler()->ContentHandler:::getContentHandler returns "our SAX builder" -- the thing that someone else should send SAX events to in order to extend this DTM model
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getLexicalHandler()->LexicalHandler:::Return this DTM's lexical handler
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getEntityResolver()->EntityResolver:::Return this DTM's EntityResolver.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getDTDHandler()->DTDHandler:::Return this DTM's DTDHandler.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getErrorHandler()->ErrorHandler:::Return this DTM's ErrorHandler.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getDeclHandler()->DeclHandler:::Return this DTM's DeclHandler.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#needsTwoThreads()->boolean::: x2 m needs two threads
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#dispatchCharactersEvents(int, ContentHandler, boolean)->void:::Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value)
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getNodeName(int)->String:::Given a node handle, return its DOM-style node name
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getNodeNameX(int)->String:::Given a node handle, return the XPath node name
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#isAttributeSpecified(int)->boolean:::    5
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getDocumentTypeDeclarationSystemIdentifier()->String:::  A document type declaration information item has the following properties:      1
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getNextNodeIdentity(int)->int:::Get the next node identity value in the list, and call the iterator if it hasn't been added yet.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#dispatchToEvents(int, ContentHandler)->void:::Directly create SAX parser events from a subtree.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getNumberOfNodes()->int:::Get the number of nodes that have been added.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#nextNode()->boolean:::This method should try and build one or more nodes in the table.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#addNode(int, int, int, int, int, boolean)->int:::Construct the node map from the node.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#addNewDTMID(int)->void:::Get a new DTM ID beginning at the specified node index.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#migrateTo(DTMManager)->void:::Migrate a DTM built with an old DTMManager to a new DTMManager
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#setSourceLocation()->void:::Store the source location of the current node
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getNodeValue(int)->String:::Given a node handle, return its node value
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getLocalName(int)->String:::Given a node handle, return its XPath-style localname
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getUnparsedEntityURI(String)->String:::The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3.3 Unparsed Entities])
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getPrefix(int)->String:::Given a namespace handle, return the prefix that the namespace decl is mapping
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getAttributeNode(int, String, String)->int:::Retrieves an attribute node by by qualified name and namespace URI.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getDocumentTypeDeclarationPublicIdentifier()->String:::Return the public identifier of the external subset, normalized as described in 4.2.2 External Entities [XML]
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getNamespaceURI(int)->String:::Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to.)  %REVIEW% Null or ""? -sb
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getStringValue(int)->XMLString:::Get the string-value of a node as a String object (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value).
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#isWhitespace(int)->boolean:::Determine if the string-value of a node is whitespace
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getElementById(String)->int:::Returns the Element whose ID is given by elementId
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getPrefix(String, String)->String:::Get a prefix either from the qname or from the uri mapping, or just make one up!
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getIdForNamespace(String)->int:::Get a prefix either from the uri mapping, or just make one up!
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getNamespaceURI(String)->String:::Get a prefix either from the qname or from the uri mapping, or just make one up!
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#setIDAttribute(String, int)->void:::Set an ID string to node association in the ID table.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#charactersFlush()->void:::Check whether accumulated text should be stripped; if not, append the appropriate flavor of text/cdata node.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#resolveEntity(String, String)->InputSource:::Resolve an external entity
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#notationDecl(String, String, String)->void:::Receive notification of a notation declaration
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#unparsedEntityDecl(String, String, String, String)->void:::Receive notification of an unparsed entity declaration
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#setDocumentLocator(Locator)->void:::Receive a Locator object for document events
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#startDocument()->void:::Receive notification of the beginning of the document.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#endDocument()->void:::Receive notification of the end of the document.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#startPrefixMapping(String, String)->void:::Receive notification of the start of a Namespace mapping
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#endPrefixMapping(String)->void:::Receive notification of the end of a Namespace mapping
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#declAlreadyDeclared(String)->boolean:::Check if a declaration has already been made for a given prefix.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#startElement(String, String, String, Attributes)->void:::Receive notification of the start of an element
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#endElement(String, String, String)->void:::Receive notification of the end of an element
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#characters(char[], int, int)->void:::Receive notification of character data inside an element
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#ignorableWhitespace(char[], int, int)->void:::Receive notification of ignorable whitespace in element content
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#processingInstruction(String, String)->void:::Receive notification of a processing instruction
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#skippedEntity(String)->void:::Receive notification of a skipped entity
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#warning(SAXParseException)->void:::Receive notification of a parser warning
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#error(SAXParseException)->void:::Receive notification of a recoverable parser error
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#fatalError(SAXParseException)->void:::Report a fatal XML parsing error
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#elementDecl(String, String)->void:::Report an element type declaration
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#attributeDecl(String, String, String, String, String)->void:::Report an attribute type declaration
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#internalEntityDecl(String, String)->void:::Report an internal entity declaration
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#externalEntityDecl(String, String, String)->void:::Report a parsed external entity declaration
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#startDTD(String, String, String)->void:::Report the start of DTD declarations, if any
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#endDTD()->void:::Report the end of DTD declarations.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#startEntity(String)->void:::Report the beginning of an entity in content
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#endEntity(String)->void:::Report the end of an entity.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#startCDATA()->void:::Report the start of a CDATA section
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#endCDATA()->void:::Report the end of a CDATA section.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#comment(char[], int, int)->void:::Report an XML comment anywhere in the document
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#setProperty(String, Object)->void:::Set a run time property for this DTM instance
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getSourceLocatorFor(int)->SourceLocator:::Retrieve the SourceLocator associated with a specific node
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM#getFixedNames(int)->String::: x2 m get fixed names
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.ChildrenIterator#setStartNode(int)->DTMAxisIterator:::Setting start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.ChildrenIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.ParentIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.ParentIterator#setNodeType(int)->DTMAxisIterator:::Set the node type of the parent that we're looking for
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.ParentIterator#next()->int:::Get the next node in the iteration
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedChildrenIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedChildrenIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedChildrenIterator#getNodeByPosition(int)->int:::Return the node at the given position.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedRootIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.FollowingSiblingIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.FollowingSiblingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedFollowingSiblingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AttributeIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AttributeIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedAttributeIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedAttributeIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingSiblingIterator#isReverse()->boolean:::True if this iterator has a reversed axis.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingSiblingIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingSiblingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedPrecedingSiblingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedPrecedingSiblingIterator#getLast()->int:::Return the index of the last node in this iterator.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingIterator#isReverse()->boolean:::True if this iterator has a reversed axis.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingIterator#cloneIterator()->DTMAxisIterator:::Returns a deep copy of this iterator
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingIterator#reset()->DTMAxisIterator:::Resets the iterator to the last start node.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingIterator#setMark()->void::: preceding iterator set mark
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.PrecedingIterator#gotoMark()->void::: preceding iterator goto mark
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedPrecedingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.FollowingIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.FollowingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedFollowingIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AncestorIterator#getStartNode()->int:::Get start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AncestorIterator#isReverse()->boolean:::True if this iterator has a reversed axis.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AncestorIterator#cloneIterator()->DTMAxisIterator:::Returns a deep copy of this iterator
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AncestorIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AncestorIterator#reset()->DTMAxisIterator:::Resets the iterator to the last start node.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AncestorIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AncestorIterator#setMark()->void::: ancestor iterator set mark
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.AncestorIterator#gotoMark()->void::: ancestor iterator goto mark
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedAncestorIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedAncestorIterator#getNodeByPosition(int)->int:::Return the node at the given position.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedAncestorIterator#getLast()->int:::Returns the position of the last node within the iteration, as defined by XPath.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.DescendantIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.DescendantIterator#isDescendant(int)->boolean:::Tell if this node identity is a descendant
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.DescendantIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.DescendantIterator#reset()->DTMAxisIterator:::Reset.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedDescendantIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2.TypedSingletonIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#_exptype(int)->int:::Override DTMDefaultBase._exptype() by dropping the incremental code
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#_exptype2(int)->int:::The optimized version of DTMDefaultBase._exptype().
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#_nextsib2(int)->int:::The optimized version of DTMDefaultBase._nextsib().
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#_firstch2(int)->int:::The optimized version of DTMDefaultBase._firstch().
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#_parent2(int)->int:::The optimized version of DTMDefaultBase._parent().
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#_type2(int)->int:::The optimized version of DTMDefaultBase._type().
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getExpandedTypeID2(int)->int:::The optimized version of DTMDefaultBase.getExpandedTypeID(int)
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#_exptype2Type(int)->int:::Return the node type from the expanded type
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getIdForNamespace(String)->int:::Get a prefix either from the uri mapping, or just make one up!
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#startElement(String, String, String, Attributes)->void:::Override SAX2DTM.startElement()  Receive notification of the start of an element
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#endElement(String, String, String)->void:::Receive notification of the end of an element
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#comment(char[], int, int)->void:::Report an XML comment anywhere in the document
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#startDocument()->void:::Receive notification of the beginning of the document.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#endDocument()->void:::Receive notification of the end of the document.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#addNode(int, int, int, int, int, boolean)->int:::Construct the node map from the node.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#charactersFlush()->void:::Check whether accumulated text should be stripped; if not, append the appropriate flavor of text/cdata node.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#processingInstruction(String, String)->void:::Override the processingInstruction() interface in SAX2DTM2
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getFirstAttribute(int)->int:::The optimized version of DTMDefaultBase.getFirstAttribute()
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getFirstAttributeIdentity(int)->int:::The optimized version of DTMDefaultBase.getFirstAttributeIdentity(int)
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getNextAttributeIdentity(int)->int:::The optimized version of DTMDefaultBase.getNextAttributeIdentity(int)
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getTypedAttribute(int, int)->int:::The optimized version of DTMDefaultBase.getTypedAttribute(int, int)
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getLocalName(int)->String:::Override SAX2DTM.getLocalName() in SAX2DTM2
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getNodeNameX(int)->String:::The optimized version of SAX2DTM.getNodeNameX()
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getNodeName(int)->String:::The optimized version of SAX2DTM.getNodeName()
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getStringValue(int)->XMLString:::Override SAX2DTM.getStringValue(int)  This method is only used by Xalan-J Interpretive
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getStringValueX(int)->String:::The optimized version of SAX2DTM.getStringValue(int)
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getStringValue()->String:::Returns the string value of the entire tree
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#dispatchCharactersEvents(int, ContentHandler, boolean)->void:::The optimized version of SAX2DTM.dispatchCharactersEvents(int, ContentHandler, boolean)
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getNodeValue(int)->String:::Given a node handle, return its node value
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#copyTextNode(int, SerializationHandler)->void:::Copy the String value of a Text node to a SerializationHandler
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#copyElement(int, int, SerializationHandler)->String:::Copy an Element node to a SerializationHandler.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#copyNS(int, SerializationHandler, boolean)->void:::Copy  namespace nodes.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#getNextNamespaceNode2(int)->int:::Return the next namespace node following the given base node.
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#copyAttributes(int, SerializationHandler)->void:::Copy  attribute nodes from an element .
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2#copyAttribute(int, int, SerializationHandler)->void:::Copy an Attribute node to a SerializationHandler
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2RTFDTM#getDocument()->int:::Given a DTM, find the owning document node
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2RTFDTM#getDocumentRoot(int)->int:::Given a node handle, find the owning document node, using DTM semantics (Document owns itself) rather than DOM semantics (Document has no owner)
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2RTFDTM#_documentRoot(int)->int:::Given a node identifier, find the owning document node
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2RTFDTM#startDocument()->void:::Receive notification of the beginning of a new RTF document
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2RTFDTM#endDocument()->void:::Receive notification of the end of the document
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2RTFDTM#pushRewindMark()->void:::"Tail-pruning" support for RTFs
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2RTFDTM#popRewindMark()->boolean:::"Tail-pruning" support for RTFs
com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2RTFDTM#isTreeIncomplete()->boolean::: x2 m is tree incomplete

FilteredNodeIterable#and(NodePredicate)::: filtered node iterable and:::and->return
FilteredNodeIterable#iterator()::: filtered node iterable iterator:::return->nodeIterable->iterator->new->PredicatedProxyNodeIterator<>
FilteredNodeIterable#filter(Class)::: filtered node iterable filter:::return->this->NodePredicates->isA->and
FilteredNodeIterable#filter(NodePredicate)::: filtered node iterable filter:::return->this->and
NodeIterable#filter(Class)::: node iterable filter:::return->new->FilteredNodeIterable<>->NodePredicates->isA->and
NodeIterable#filter(NodePredicate)::: node iterable filter:::return->new->FilteredNodeIterable<>->and
NodeIterable#snapshot()::: node iterable snapshot:::list->new->ArrayList<>->snapshotTo->return
NodeIterable#snapshotTo(Collection)::: node iterable snapshot to:::foreach->to->add
NodeIterable#first()::: node iterable first:::iterator->iterator->if->iterator->hasNext->return->iterator->next->return
NodeIterable#count()::: node iterable count:::count->iterator->iterator->while->iterator->hasNext->iterator->next->return
NodeIterable#isEmpty()::: node iterable is empty:::return->iterator->hasNext
NodeIterable#isNotEmpty()::: node iterable is not empty:::return->iterator->hasNext
NodeIterable#contains(T)::: node iterable contains:::foreach->if->return->return
NodeIterator#forward()::: node iterator forward:::
NodeIterator#hasNext()::: node iterator has next:::forward->return
NodeIterator#next()::: node iterator next:::forward->ret->if->throw->new->NoSuchElementException->return
NodeIterator#remove()::: node iterator remove:::throw->new->UnsupportedOperationException
NodePredicate#apply(Node)::: node predicate apply:::
NodePredicate#test(Node)::: node predicate test:::return->apply
NodePredicate#and(NodePredicate)::: node predicate and:::return->new->AndPredicate
NodePredicates#alwaysTrue()::: node predicates always true:::return
NodePredicates#alwaysFalse()::: node predicates always false:::return
NodePredicates#isNull()::: node predicates is null:::return
NodePredicates#isNotA(Class)::: node predicates is not a:::return->new->NegativeTypePredicate
NodePredicates#isA(Class)::: node predicates is a:::return->new->PositiveTypePredicate
NodePredicates.TautologyPredicate#apply(Node)::: tautology predicate apply:::return
NodePredicates.TautologyPredicate#and(NodePredicate)::: tautology predicate and:::return
NodePredicates.ContradictionPredicate#apply(Node)::: contradiction predicate apply:::return
NodePredicates.ContradictionPredicate#and(NodePredicate)::: contradiction predicate and:::return
NodePredicates.AndPredicate#apply(Node)::: and predicate apply:::return->a->apply->b->apply
NodePredicates.NotPredicate#apply(Node)::: not predicate apply:::return->a->apply
NodePredicates.NotPredicate#negate()::: not predicate negate:::return
NodePredicates.IsNullPredicate#apply(Node)::: is null predicate apply:::return
NodePredicates.PositiveTypePredicate#apply(Node)::: positive type predicate apply:::return->type->isInstance->or->apply
NodePredicates.PositiveTypePredicate#or(Class)::: positive type predicate or:::if->new->PositiveTypePredicate->else->or->or->return
NodePredicates.PositiveTypePredicate#negate()::: positive type predicate negate:::return->new->NegativeTypePredicate
NodePredicates.NegativeTypePredicate#apply(Node)::: negative type predicate apply:::return->type->isInstance->nor->apply
NodePredicates.NegativeTypePredicate#nor(Class)::: negative type predicate nor:::if->new->NegativeTypePredicate->else->nor->nor->return
NodePredicates.NegativeTypePredicate#negate()::: negative type predicate negate:::return->new->PositiveTypePredicate
PredicatedProxyNodeIterator#forward()::: predicated proxy node iterator forward:::while->current->isAlive->predicate->apply->iterator->hasNext->iterator->next->if->current->isAlive->predicate->apply

org.graalvm.compiler.graph.iterators.FilteredNodeIterable#and(NodePredicate)->FilteredNodeIterable::: filtered node iterable and
org.graalvm.compiler.graph.iterators.FilteredNodeIterable#iterator()->Iterator::: filtered node iterable iterator
org.graalvm.compiler.graph.iterators.FilteredNodeIterable#filter(Class)->FilteredNodeIterable::: filtered node iterable filter
org.graalvm.compiler.graph.iterators.FilteredNodeIterable#filter(NodePredicate)->FilteredNodeIterable::: filtered node iterable filter
org.graalvm.compiler.graph.iterators.NodeIterable#filter(Class)->NodeIterable::: node iterable filter
org.graalvm.compiler.graph.iterators.NodeIterable#filter(NodePredicate)->FilteredNodeIterable::: node iterable filter
org.graalvm.compiler.graph.iterators.NodeIterable#snapshot()->List::: node iterable snapshot
org.graalvm.compiler.graph.iterators.NodeIterable#snapshotTo(Collection)->void::: node iterable snapshot to
org.graalvm.compiler.graph.iterators.NodeIterable#first()->T::: node iterable first
org.graalvm.compiler.graph.iterators.NodeIterable#count()->int::: node iterable count
org.graalvm.compiler.graph.iterators.NodeIterable#isEmpty()->boolean::: node iterable is empty
org.graalvm.compiler.graph.iterators.NodeIterable#isNotEmpty()->boolean::: node iterable is not empty
org.graalvm.compiler.graph.iterators.NodeIterable#contains(T)->boolean::: node iterable contains
org.graalvm.compiler.graph.iterators.NodeIterator#forward()->void::: node iterator forward
org.graalvm.compiler.graph.iterators.NodeIterator#hasNext()->boolean::: node iterator has next
org.graalvm.compiler.graph.iterators.NodeIterator#next()->T::: node iterator next
org.graalvm.compiler.graph.iterators.NodeIterator#remove()->void::: node iterator remove
org.graalvm.compiler.graph.iterators.NodePredicate#apply(Node)->boolean::: node predicate apply
org.graalvm.compiler.graph.iterators.NodePredicate#test(Node)->boolean::: node predicate test
org.graalvm.compiler.graph.iterators.NodePredicate#and(NodePredicate)->NodePredicate::: node predicate and
org.graalvm.compiler.graph.iterators.NodePredicates#alwaysTrue()->NodePredicate::: node predicates always true
org.graalvm.compiler.graph.iterators.NodePredicates#alwaysFalse()->NodePredicate::: node predicates always false
org.graalvm.compiler.graph.iterators.NodePredicates#isNull()->NodePredicate::: node predicates is null
org.graalvm.compiler.graph.iterators.NodePredicates#isNotA(Class)->NegativeTypePredicate::: node predicates is not a
org.graalvm.compiler.graph.iterators.NodePredicates#isA(Class)->PositiveTypePredicate::: node predicates is a
org.graalvm.compiler.graph.iterators.NodePredicates.TautologyPredicate#apply(Node)->boolean::: tautology predicate apply
org.graalvm.compiler.graph.iterators.NodePredicates.TautologyPredicate#and(NodePredicate)->NodePredicate::: tautology predicate and
org.graalvm.compiler.graph.iterators.NodePredicates.ContradictionPredicate#apply(Node)->boolean::: contradiction predicate apply
org.graalvm.compiler.graph.iterators.NodePredicates.ContradictionPredicate#and(NodePredicate)->NodePredicate::: contradiction predicate and
org.graalvm.compiler.graph.iterators.NodePredicates.AndPredicate#apply(Node)->boolean::: and predicate apply
org.graalvm.compiler.graph.iterators.NodePredicates.NotPredicate#apply(Node)->boolean::: not predicate apply
org.graalvm.compiler.graph.iterators.NodePredicates.NotPredicate#negate()->NodePredicate::: not predicate negate
org.graalvm.compiler.graph.iterators.NodePredicates.IsNullPredicate#apply(Node)->boolean::: is null predicate apply
org.graalvm.compiler.graph.iterators.NodePredicates.PositiveTypePredicate#apply(Node)->boolean::: positive type predicate apply
org.graalvm.compiler.graph.iterators.NodePredicates.PositiveTypePredicate#or(Class)->PositiveTypePredicate::: positive type predicate or
org.graalvm.compiler.graph.iterators.NodePredicates.PositiveTypePredicate#negate()->NodePredicate::: positive type predicate negate
org.graalvm.compiler.graph.iterators.NodePredicates.NegativeTypePredicate#apply(Node)->boolean::: negative type predicate apply
org.graalvm.compiler.graph.iterators.NodePredicates.NegativeTypePredicate#nor(Class)->NegativeTypePredicate::: negative type predicate nor
org.graalvm.compiler.graph.iterators.NodePredicates.NegativeTypePredicate#negate()->NodePredicate::: negative type predicate negate
org.graalvm.compiler.graph.iterators.PredicatedProxyNodeIterator#forward()->void::: predicated proxy node iterator forward

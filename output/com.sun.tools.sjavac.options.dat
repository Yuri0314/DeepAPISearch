ArgumentIterator#remove():::Can't remove current element, since we may have buffered it.:::throw->new->UnsupportedOperationException
OptionHelper#reportError(String):::Handle error:::
OptionHelper#exclude(String):::Record a package exclusion pattern:::
OptionHelper#include(String):::Record a package inclusion pattern:::
OptionHelper#sourceRoots(List):::Record a root of sources to be compiled:::
OptionHelper#addTransformer(String, Transformer):::Record a suffix + transformer:::
OptionHelper#sourcepath(List):::Record a sourcepath to be used:::
OptionHelper#modulepath(List):::Record a modulepath to be used:::
OptionHelper#classpath(List):::Record a classpath to be used:::
OptionHelper#numCores(int):::Record the number of cores:::
OptionHelper#logLevel(String):::Record desired log level:::
OptionHelper#compareFoundSources(Path):::Record path for reference source list:::
OptionHelper#permitArtifact(String):::Record a single permitted artifact:::
OptionHelper#permitUnidentifiedArtifacts():::Record the fact that unidentified artifacts are permitted:::
OptionHelper#permitDefaultPackage():::Record the fact that sources in the default package are permitted:::
OptionHelper#serverConf(String):::Record server configuration parameters:::
OptionHelper#startServerConf(String):::Record server launch configuration parameters:::
OptionHelper#javacArg(String...):::Record some arguments to be passed on to javac:::
OptionHelper#destDir(Path):::Sets the destination directory for the compilation:::
OptionHelper#generatedSourcesDir(Path):::Sets the directory for generated sources:::
OptionHelper#headerDir(Path):::Sets the directory for generated headers:::
OptionHelper#stateDir(Path):::Sets the directory for state and log files generated by sjavac:::
OptionHelper#implicit(String):::Sets the implicit policy:::
OptionHelper#traverse(String[]):::Traverses an array of arguments and performs the appropriate callbacks.:::try->CommandLine->parse->catch->throw->e->getMessage->new->IllegalArgumentException->finally->argIter->Arrays->asList->new->ArgumentIterator->while->argIter->hasNext->arg->argIter->next->if->arg->startsWith->foreach->Option->values->if->opt->processCurrent->continue->javacArg->foreach->values->if->javacOpt->matches->takesArgument->javacOpt->hasArg->separateToken->arg->contains->arg->contains->if->argIter->next->javacArg->else->Arrays->Paths->get->asList->sourceRoots
Options#getImplicitPolicy():::Get the policy for implicit classes:::return
Options#getGenSrcDir():::Get the path for generated sources (or null if no such path is set):::return
Options#getDestDir():::Get the path for the destination directory:::return
Options#getHeaderDir():::Get the path for the header directory (or null if no such path is set):::return
Options#getStateDir():::Get the path for the state directory, defaults to destDir.:::return
Options#getSources():::Get all source locations for files to be compiled:::return
Options#getSourceSearchPaths():::Get all paths to search for classes in .java format:::return
Options#getClassSearchPath():::Get all paths to search for classes in.:::return
Options#getModuleSearchPaths():::Get all paths to search for modules in.:::return
Options#getLogLevel():::Get the log level.:::return
Options#isUnidentifiedArtifactPermitted(String):::Returns true iff the artifact is permitted in the output dir.:::return->permitted_artifacts->contains
Options#areUnidentifiedArtifactsPermitted():::Returns true iff artifacts in the output directories should be kept, even if they would not be generated in a clean build.:::return
Options#isDefaultPackagePermitted():::Returns true iff sources in the default package should be permitted.:::return
Options#getSourceReferenceList():::Get the path to the list of reference sources (or null if none is set):::return
Options#getNumCores():::Get the number of cores to be used by sjavac:::return
Options#getJavacArgs():::Returns all arguments relevant to javac but irrelevant to sjavac.:::return
Options#getTranslationRules():::Get a map which maps suffixes to transformers (for example ".java" -> CompileJavaPackages):::return
Options#startServerFlag():::Return true iff a new server should be started:::return
Options#getServerConf():::Return the server configuration string.:::return
Options#parseArgs(String...):::Parses the given argument array and returns a corresponding Options instance.:::options->new->Options->options->new->ArgDecoderOptionHelper->traverse->return
Options#isJavaFilesAmongJavacArgs():::Returns true iff a .java file is among the javac arguments:::foreach->if->javacArg->endsWith->return->return
Options#getStateArgsString():::Returns a string representation of the options that affect the result of the compilation:::args->new->StateArgs->if->args->genSrcDir->normalize->addArg->if->args->headerDir->normalize->addArg->if->args->destDir->normalize->addArg->if->args->stateDir->normalize->addArg->args->addSourceLocations->args->addSourceLocations->args->addSourceLocations->args->addSourceLocations->if->args->addArg->foreach->args->addArg->if->args->addArg->foreach->trRules->entrySet->val->tr->getKey->tr->getValue->getClass->getName->args->addArg->args->addAll->return->args->getResult
Options#prepJavacArgs():::Extract the arguments to be passed on to javac.:::args->new->ArrayList<>->args->add->args->destDir->toString->add->if->getGenSrcDir->args->add->args->genSrcDir->toString->add->if->args->add->args->headerDir->toString->add->sourcepath->new->ArrayList<>->sourcepath->addAll->sourcepath->addAll->if->sourcepath->size->args->add->args->concatenateSourceLocations->add->if->classSearchPaths->size->args->add->args->concatenateSourceLocations->add->args->add->args->add->args->addAll->return->args->args->size->new->StringArr->toArray
SourceLocation#findSourceFiles(Set, Map, Map, Module, boolean, boolean):::Finds all files with the given suffix that pass the include / exclude filters in this source location.:::try->Source->path->toFile->scanRoot->catch->e->printStackTrace->finally
SourceLocation#getPath():::Get the root directory of this source location:::return
SourceLocation#getIncludes():::Get the package include patterns:::return
SourceLocation#getExcludes():::Get the package exclude patterns:::return

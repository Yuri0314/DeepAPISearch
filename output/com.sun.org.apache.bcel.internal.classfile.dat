AccessFlags#setAccessFlags(int):::Set access flags aka "modifiers".:::
AccessFlags#setModifiers(int):::Set access flags aka "modifiers".:::setAccessFlags
AnnotationDefault#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitAnnotationDefault
AnnotationEntry#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitAnnotationEntry
Annotations#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitAnnotation
Annotations#getAnnotationEntries():::returns the array of annotation entries in this annotation:::return
Attribute#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::
Attribute#dump(DataOutputStream):::Dump attribute to file stream in binary format.:::file->writeShort->file->writeInt
Attribute#addAttributeReader(String, UnknownAttributeReader):::Add an Attribute reader capable of parsing (user-defined) attributes named "name":::readers->put
Attribute#removeAttributeReader(String):::Remove attribute reader:::readers->remove
Attribute#readAttribute(DataInputStream, ConstantPool):::Class method reads one attribute from the input data stream:::return->readAttribute
Attribute#readAttribute(DataInput, ConstantPool):::Class method reads one attribute from the input data stream:::tag->name_index->file->readUnsignedShort->c->constant_pool->getConstant->name->c->getBytes->length->file->readInt->for->i->switch->r->readers->get->if->return->createAttribute->return->new->Unknown->return->new->ConstantValue->return->new->SourceFile->return->new->Code->return->new->ExceptionTable->return->new->LineNumberTable->return->new->LocalVariableTable->return->new->InnerClasses->return->new->Synthetic->return->new->Deprecated->return->new->PMGClass->return->new->Signature->println->return->new->Unknown->return->new->RuntimeVisibleAnnotations->return->new->RuntimeInvisibleAnnotations->return->new->RuntimeVisibleParameterAnnotations->return->new->RuntimeInvisibleParameterAnnotations->return->new->AnnotationDefault->return->new->LocalVariableTypeTable->return->new->EnclosingMethod->return->new->StackMap->return->new->BootstrapMethods->return->new->MethodParameters->throw->new->IllegalStateException
Attribute#clone():::Use copy() if you want to have a deep copy(), i.e., with all references copied correctly.:::attr->try->super->clone->catch->throw->new->Error->finally->return
AttributeReader#createAttribute(int, int, java.io.DataInputStream, ConstantPool):::     When this attribute reader is added via the static method      Attribute.addAttributeReader, an attribute name is associated with it:::
BootstrapMethod#dump(DataOutputStream):::Dump object to file stream in binary format.:::file->writeShort->file->writeShort->foreach->file->writeShort
BootstrapMethods#dump(DataOutputStream):::Dump bootstrap methods attribute to file stream in binary format.:::super->dump->file->writeShort->foreach->bootstrap_method->dump
ClassParser#parse():::Parse the given Java class file and return an object that represents the contained data, i.e., constants, methods, fields and commands:::zip->try->if->if->new->ZipFile->entry->zip->getEntry->if->throw->new->IOException->zip->getInputStream->new->BufferedInputStream->new->DataInputStream->else->new->FileInputStream->new->BufferedInputStream->new->DataInputStream->readID->readVersion->readConstantPool->readClassInfo->readInterfaces->readFields->readMethods->readAttributes->catch->finally->if->try->if->dataInputStream->close->catch->finally->try->if->zip->close->catch->finally->return->new->JavaClass
Code#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitCode
Code#dump(DataOutputStream):::Dump code attribute to file stream in binary format.:::super->dump->file->writeShort->file->writeShort->file->writeInt->file->write->file->writeShort->foreach->exception->dump->file->writeShort->foreach->attribute->dump
CodeException#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitCodeException
CodeException#dump(DataOutputStream):::Dump code exception to file stream in binary format.:::file->writeShort->file->writeShort->file->writeShort->file->writeShort
Constant#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::
Constant#readConstant(DataInput):::Read one constant from the given input, the type depends on a tag byte.:::b->dataInput->readByte->switch->return->new->ConstantClass->return->new->ConstantFieldref->return->new->ConstantMethodref->return->new->ConstantInterfaceMethodref->return->new->ConstantString->return->new->ConstantInteger->return->new->ConstantFloat->return->new->ConstantLong->return->new->ConstantDouble->return->new->ConstantNameAndType->return->ConstantUtf8->getInstance->return->new->ConstantMethodHandle->return->new->ConstantMethodType->return->new->ConstantDynamic->return->new->ConstantInvokeDynamic->return->new->ConstantModule->return->new->ConstantPackage->throw->new->ClassFormatException
Constant#equals(Object):::Return value as defined by given BCELComparator strategy:::return->bcelComparator->equals
Constant#hashCode():::Return value as defined by given BCELComparator strategy:::return->bcelComparator->hashCode
ConstantClass#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantClass
ConstantClass#dump(DataOutputStream):::Dumps constant class to file stream in binary format.:::file->super->getTag->writeByte->file->writeShort
ConstantCP#dump(DataOutputStream):::Dump constant field reference to file stream in binary format.:::file->super->getTag->writeByte->file->writeShort->file->writeShort
ConstantDouble#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantDouble
ConstantDouble#dump(DataOutputStream):::Dump constant double to file stream in binary format.:::file->super->getTag->writeByte->file->writeDouble
ConstantDynamic#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitly defined by the contents of a Java class:::v->visitConstantDynamic
ConstantFieldref#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantFieldref
ConstantFloat#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantFloat
ConstantFloat#dump(DataOutputStream):::Dump constant float to file stream in binary format.:::file->super->getTag->writeByte->file->writeFloat
ConstantInteger#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantInteger
ConstantInteger#dump(DataOutputStream):::Dump constant integer to file stream in binary format.:::file->super->getTag->writeByte->file->writeInt
ConstantInterfaceMethodref#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantInterfaceMethodref
ConstantInvokeDynamic#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitly defined by the contents of a Java class:::v->visitConstantInvokeDynamic
ConstantLong#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantLong
ConstantLong#dump(DataOutputStream):::Dump constant long to file stream in binary format.:::file->super->getTag->writeByte->file->writeLong
ConstantMethodHandle#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitly defined by the contents of a Java class:::v->visitConstantMethodHandle
ConstantMethodHandle#dump(DataOutputStream):::Dump method kind and index to file stream in binary format.:::file->super->getTag->writeByte->file->writeByte->file->writeShort
ConstantMethodref#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantMethodref
ConstantMethodType#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitly defined by the contents of a Java class:::v->visitConstantMethodType
ConstantMethodType#dump(DataOutputStream):::Dump name and signature index to file stream in binary format.:::file->super->getTag->writeByte->file->writeShort
ConstantModule#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitly defined by the contents of a Java class:::v->visitConstantModule
ConstantModule#dump(DataOutputStream):::Dump constant module to file stream in binary format.:::file->super->getTag->writeByte->file->writeShort
ConstantNameAndType#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantNameAndType
ConstantNameAndType#dump(DataOutputStream):::Dump name and signature index to file stream in binary format.:::file->super->getTag->writeByte->file->writeShort->file->writeShort
ConstantPackage#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantPackage
ConstantPackage#dump(DataOutputStream):::Dump constant package to file stream in binary format.:::file->super->getTag->writeByte->file->writeShort
ConstantPool#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantPool
ConstantPool#constantToString(Constant):::Resolve constant to a string representation.:::str->i->tag->c->getTag->switch->getNameIndex->getConstant->Utility->getBytes->compactClassName->break->getStringIndex->getConstant->getBytes->escape->break->getBytes->break->String->getBytes->valueOf->break->String->getBytes->valueOf->break->String->getBytes->valueOf->break->String->getBytes->valueOf->break->getNameIndex->constantToString->getSignatureIndex->constantToString->break->getClassIndex->constantToString->getNameAndTypeIndex->constantToString->break->cmh->Const->cmh->getReferenceKind->getMethodHandleName->cmh->getReferenceIndex->cmh->getReferenceIndex->getConstant->getTag->constantToString->break->cmt->cmt->getDescriptorIndex->constantToString->break->cid->cid->getBootstrapMethodAttrIndex->cid->getNameAndTypeIndex->constantToString->break->throw->new->RuntimeException->return
ConstantPool#constantToString(int, byte):::Retrieve constant at `index' from constant pool and resolve it to a string representation.:::c->getConstant->return->constantToString
ConstantPool#dump(DataOutputStream):::Dump constant pool to file stream in binary format.:::file->writeShort->for->i
ConstantPool#getConstant(int):::Get constant from constant pool.:::if->throw->new->ClassFormatException->return
ConstantPool#getConstant(int, byte):::Get constant from constant pool and check whether it has the expected type.:::c->getConstant->if->throw->new->ClassFormatException->if->c->getTag->throw->Const->getConstantName->new->ClassFormatException->return
ConstantPool#getConstantString(int, byte):::Get string from constant pool and bypass the indirection of `ConstantClass' and `ConstantString' objects:::c->i->getConstant->switch->getNameIndex->break->getStringIndex->break->throw->new->RuntimeException->getConstant->return->getBytes
ConstantString#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantString
ConstantString#dump(DataOutputStream):::Dump constant field reference to file stream in binary format.:::file->super->getTag->writeByte->file->writeShort
ConstantUtf8#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantUtf8
ConstantUtf8#dump(DataOutputStream):::Dump String in Utf8 format to file stream.:::file->super->getTag->writeByte->file->writeUTF
ConstantValue#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitConstantValue
ConstantValue#dump(DataOutputStream):::Dump constant value attribute to file stream on binary format.:::super->dump->file->writeShort
Deprecated#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitDeprecated
Deprecated#dump(DataOutputStream):::Dump source file attribute to file stream in binary format.:::super->dump->if->super->getLength->file->super->getLength->write
DescendingVisitor#visit():::Start traversal.:::clazz->accept
ExceptionTable#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitExceptionTable
ExceptionTable#dump(DataOutputStream):::Dump exceptions attribute to file stream in binary format.:::super->dump->file->writeShort->foreach->file->writeShort
Field#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitField
Field#toString():::Return string representation close to declaration format, `public static final short MAX = 100', e.g..:::name->signature->access->Utility->super->getAccessFlags->accessToString->access->isEmpty->Utility->getSignature->signatureToString->getName->buf->new->StringBuilder->buf->append->append->append->append->cv->getConstantValue->if->buf->append->append->foreach->super->getAttributes->if->buf->append->append->append->return->buf->toString
Field#equals(Object):::Return value as defined by given BCELComparator strategy:::return->bcelComparator->equals
Field#hashCode():::Return value as defined by given BCELComparator strategy:::return->bcelComparator->hashCode
FieldOrMethod#dump(DataOutputStream):::Dump object to file stream on binary format.:::file->super->getAccessFlags->writeShort->file->writeShort->file->writeShort->file->writeShort->if->foreach->attribute->dump
FieldOrMethod#getGenericSignature():::Hunts for a signature attribute on the member and returns its contents:::if->found->for->i->return
InnerClass#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitInnerClass
InnerClass#dump(DataOutputStream):::Dump inner class attribute to file stream in binary format.:::file->writeShort->file->writeShort->file->writeShort->file->writeShort
InnerClasses#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitInnerClasses
InnerClasses#dump(DataOutputStream):::Dump source file attribute to file stream in binary format.:::super->dump->file->writeShort->foreach->inner_class->dump
JavaClass#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitJavaClass
JavaClass#dump(File):::Dump class to a file.:::parent->file->getParent->if->dir->new->File->if->dir->mkdirs->if->dir->isDirectory->throw->new->IOException->try->dos->new->FileOutputStream->new->DataOutputStream->dump->catch->finally
JavaClass#dump(String):::Dump class to a file named file_name.:::new->File->dump
JavaClass#dump(OutputStream):::Dump Java class to output stream in binary format.:::new->DataOutputStream->dump
JavaClass#dump(DataOutputStream):::Dump Java class to output stream in binary format.:::file->writeInt->file->writeShort->file->writeShort->constant_pool->dump->file->super->getAccessFlags->writeShort->file->writeShort->file->writeShort->file->writeShort->foreach->file->writeShort->file->writeShort->foreach->field->dump->file->writeShort->foreach->method->dump->if->file->writeShort->foreach->attribute->dump->else->file->writeShort->file->flush
JavaClass#getSuperclassName():::returns the super class name of this class:::return
JavaClass#setFileName(String):::Set File name of class, aka SourceFile attribute value:::
JavaClass#setSourceFileName(String):::Set absolute path to file this class was read from.:::
JavaClass#getRepository():::Gets the ClassRepository which holds its definition:::return
JavaClass#setRepository(com.sun.org.apache.bcel.internal.util.Repository):::Sets the ClassRepository which loaded the JavaClass:::
JavaClass#instanceOf(JavaClass):::Equivalent to runtime "instanceof" operator.:::if->this->equals->return->super_classes->getSuperClasses->foreach->if->super_classe->equals->return->if->super_class->isInterface->return->implementationOf->return
JavaClass#getInterfaces():::Get interfaces directly implemented by this JavaClass.:::_interfaces->getInterfaceNames->classes->new->JavaClassArr->for->i->return
JavaClass#getAllInterfaces():::Get all interfaces implemented by this JavaClass (transitively).:::queue->new->ClassQueue->allInterfaces->new->TreeSet<>->queue->enqueue->while->queue->empty->clazz->queue->dequeue->souper->clazz->getSuperClass->_interfaces->clazz->getInterfaces->if->clazz->isInterface->allInterfaces->add->else->if->queue->enqueue->foreach->queue->enqueue->return->allInterfaces->allInterfaces->size->new->JavaClassArr->toArray
JavaClass#equals(Object):::Return value as defined by given BCELComparator strategy:::return->bcelComparator->equals
JavaClass#compareTo(JavaClass):::Return the natural ordering of two JavaClasses:::return->getClassName->obj->getClassName->compareTo
JavaClass#hashCode():::Return value as defined by given BCELComparator strategy:::return->bcelComparator->hashCode
LineNumber#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitLineNumber
LineNumber#dump(DataOutputStream):::Dump line number/pc pair to file stream in binary format.:::file->writeShort->file->writeShort
LineNumberTable#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitLineNumberTable
LineNumberTable#dump(DataOutputStream):::Dump line number table attribute to file stream in binary format.:::super->dump->file->writeShort->foreach->lineNumber->dump
LineNumberTable#getSourceLine(int):::Map byte code positions to source code lines.:::l->r->if->return->min_index->min->do->i->j->getStartPC->if->return->getLineNumber->else->if->else->if->while->if->return->return->getLineNumber
LocalVariable#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitLocalVariable
LocalVariable#dump(DataOutputStream):::Dump local variable to file stream in binary format.:::file->writeShort->file->writeShort->file->writeShort->file->writeShort->file->writeShort
LocalVariableTable#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitLocalVariableTable
LocalVariableTable#dump(DataOutputStream):::Dump local variable table attribute to file stream in binary format.:::super->dump->file->writeShort->foreach->variable->dump
Method#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitMethod
Method#toString():::Return string representation close to declaration format, `public static void main(String[] args) throws IOException', e.g.:::access->Utility->super->getAccessFlags->accessToString->c->super->getConstantPool->super->getSignatureIndex->getConstant->signature->c->getBytes->super->getConstantPool->super->getNameIndex->getConstant->name->c->getBytes->Utility->getLocalVariableTable->methodSignatureToString->buf->new->StringBuilder->foreach->super->getAttributes->if->buf->append->append->append->e->getExceptionTable->if->str->e->toString->if->str->isEmpty->buf->append->append->return->buf->toString
Method#equals(Object):::Return value as defined by given BCELComparator strategy:::return->bcelComparator->equals
Method#hashCode():::Return value as defined by given BCELComparator strategy:::return->bcelComparator->hashCode
MethodParameter#getParameterName(ConstantPool):::Returns the name of the parameter.:::if->return->return->constant_pool->getConstant->getBytes
MethodParameter#dump(DataOutputStream):::Dump object to file stream on binary format.:::file->writeShort->file->writeShort
MethodParameters#dump(DataOutputStream):::Dump method parameters attribute to file stream in binary format.:::super->dump->file->writeByte->foreach->parameter->dump
ParameterAnnotationEntry#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitParameterAnnotationEntry
ParameterAnnotationEntry#getAnnotationEntries():::returns the array of annotation entries in this annotation:::return
ParameterAnnotations#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitParameterAnnotation
ParameterAnnotations#getParameterAnnotationEntries():::returns the array of parameter annotation entries in this parameter annotation:::return
PMGClass#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::println
PMGClass#dump(DataOutputStream):::Dump source file attribute to file stream in binary format.:::super->dump->file->writeShort->file->writeShort
Signature#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitSignature
Signature#dump(DataOutputStream):::Dump source file attribute to file stream in binary format.:::super->dump->file->writeShort
SourceFile#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitSourceFile
SourceFile#dump(DataOutputStream):::Dump source file attribute to file stream in binary format.:::super->dump->file->writeShort
StackMap#dump(DataOutputStream):::Dump stack map table attribute to file stream in binary format.:::super->dump->file->writeShort->foreach->entry->dump
StackMap#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitStackMap
StackMapEntry#dump(DataOutputStream):::Dump stack map entry:::file->write->if->else->if->dump->else->if->file->writeShort->dump->else->if->file->writeShort->else->if->file->writeShort->else->if->file->writeShort->foreach->type->dump->else->if->file->writeShort->file->writeShort->foreach->type->dump->file->writeShort->foreach->type->dump->else->throw->new->ClassFormatException
StackMapEntry#getMapEntrySize():::Calculate stack map entry size:::if->return->else->if->return->hasIndex->else->if->return->hasIndex->else->if->return->else->if->return->else->if->len->foreach->types_of_local->hasIndex->return->else->if->len->foreach->types_of_local->hasIndex->foreach->types_of_stack_item->hasIndex->return->else->throw->new->RuntimeException
StackMapEntry#updateByteCodeOffset(int):::Update the distance (as an offset delta) from this StackMap entry to the next:::setByteCodeOffset
StackMapEntry#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitStackMapEntry
StackMapType#dump(DataOutputStream):::Dump type entries to file.:::file->writeByte->if->hasIndex->file->getIndex->writeShort
Synthetic#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitSynthetic
Synthetic#dump(DataOutputStream):::Dump source file attribute to file stream in binary format.:::super->dump->if->super->getLength->file->super->getLength->write
Unknown#accept(Visitor):::Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class:::v->visitUnknown
Unknown#dump(DataOutputStream):::Dump unknown bytes to file stream.:::super->dump->if->super->getLength->file->super->getLength->write
UnknownAttributeReader#createAttribute(int, int, java.io.DataInput, ConstantPool):::When this attribute reader is added via the static method Attribute.addAttributeReader, an attribute name is associated with it:::
Utility#accessToString(int):::Convert bit field of flags into string such as `static final'.:::return->accessToString
Utility#accessToString(int, boolean):::Convert bit field of flags into string such as `static final':::buf->new->StringBuilder->p->for->i->return->buf->toString->trim
Utility#codeToString(byte[], ConstantPool, int, int, boolean):::Disassemble a byte array of JVM byte codes starting from code line `index' and return the disassembled string representation:::buf->new->StringBuilder->try->stream->new->ByteSequence->for->i->for->i->stream->available->catch->throw->buf->toString->new->ClassFormatException->finally->return->buf->toString
Utility#codeToString(ByteSequence, ConstantPool, boolean):::Disassemble a stream of byte codes and return the string representation.:::opcode->bytes->readUnsignedByte->default_offset->low->high->npairs->index->vindex->constant->match->jump_table->no_pad_bytes->offset->buf->Const->getOpcodeName->new->StringBuilder->if->remainder->bytes->getIndex->for->i->bytes->readInt->switch->bytes->readInt->bytes->readInt->bytes->getIndex->buf->append->append->append->append->append->append->append->new->intArr->for->i->buf->append->break->bytes->readInt->bytes->getIndex->new->intArr->new->intArr->buf->append->append->append->append->append->for->i->buf->append->break->buf->append->bytes->getIndex->bytes->readShort->append->break->buf->append->bytes->getIndex->bytes->readInt->append->break->if->bytes->readUnsignedShort->else->bytes->readUnsignedByte->buf->append->append->break->buf->append->break->buf->append->Const->bytes->readByte->getTypeName->append->append->break->bytes->readUnsignedShort->buf->append->constant_pool->constantToString->append->append->break->buf->append->bytes->readUnsignedShort->buf->append->constant_pool->constantToString->append->append->append->break->bytes->readUnsignedShort->c->constant_pool->getConstant->buf->append->constant_pool->c->getTag->constantToString->append->append->break->bytes->readUnsignedShort->buf->append->constant_pool->constantToString->append->append->break->bytes->readUnsignedShort->nargs->bytes->readUnsignedByte->buf->append->constant_pool->constantToString->append->append->append->append->bytes->readUnsignedByte->append->break->bytes->readUnsignedShort->buf->append->constant_pool->constantToString->append->append->bytes->readUnsignedByte->append->bytes->readUnsignedByte->append->break->bytes->readUnsignedShort->buf->append->constant_pool->constant_pool->getConstant->getTag->constantToString->append->append->break->bytes->readUnsignedByte->buf->append->constant_pool->constant_pool->getConstant->getTag->constantToString->append->append->break->bytes->readUnsignedShort->buf->append->constant_pool->getConstantString->compactClassName->append->append->append->break->bytes->readUnsignedShort->dimensions->bytes->readUnsignedByte->buf->append->constant_pool->getConstantString->compactClassName->append->append->append->append->break->if->bytes->readUnsignedShort->bytes->readShort->else->bytes->readUnsignedByte->bytes->readByte->buf->append->append->append->append->break->if->Const->getNoOfOperands->for->i->Const->getOperandTypeCount->return->buf->toString
Utility#compactClassName(String):::Shorten long class names, java/lang/String becomes String.:::return->compactClassName
Utility#compactClassName(String, String, boolean):::Shorten long class name str, i.e., chop off the prefix, if the class name starts with this string and the flag chopit is true:::len->prefix->length->str->replace->if->if->str->startsWith->str->substring->indexOf->str->substring->return
Utility#compactClassName(String, boolean):::Shorten long class names, java/lang/String becomes java.lang.String, e.g.:::return->compactClassName
Utility#methodTypeToSignature(String, String[]):::Converts string containing the method return and argument types to a byte code method signature.:::buf->new->StringBuilder->str->if->foreach->getSignature->if->str->endsWith->throw->new->ClassFormatException->buf->append->getSignature->buf->append->append->return->buf->toString
Utility#methodSignatureToString(String, String, String):::Converts method signature to string with all class names compacted.:::return->methodSignatureToString
Utility#methodSignatureToString(String, String, String, boolean, LocalVariableTable):::A returntype signature represents the return value from a method:::buf->new->StringBuilder->type->index->var_index->access->contains->try->if->signature->charAt->throw->new->ClassFormatException->while->signature->charAt->param_type->signature->substring->signatureToString->buf->append->if->l->vars->getLocalVariable->if->buf->append->l->getName->append->else->buf->append->append->if->equals->equals->else->buf->append->unwrap->signature->substring->signatureToString->catch->throw->new->ClassFormatException->finally->if->buf->length->buf->buf->length->setLength->buf->append->return->access->length->buf->toString
Utility#replace(String, String, String):::Replace all occurrences of old in str with new.:::index->old_index->try->if->str->contains->buf->new->StringBuilder->while->str->indexOf->buf->str->substring->append->buf->append->old->length->buf->str->substring->append->buf->toString->catch->println->finally->return
Utility#signatureToString(String):::Converts signature to string with all class names compacted.:::return->signatureToString
Utility#signatureToString(String, boolean):::The field signature represents the value of an argument to a function or the value of a variable:::wrap->try->switch->signature->charAt->return->return->return->return->return->return->index->signature->indexOf->if->throw->new->ClassFormatException->wrap->return->signature->substring->compactClassName->fromIndex->signature->indexOf->if->else->signature->indexOf->if->throw->new->ClassFormatException->index->signature->indexOf->if->throw->new->ClassFormatException->bracketIndex->signature->substring->indexOf->if->wrap->return->signature->substring->compactClassName->signature->indexOf->if->throw->new->ClassFormatException->if->wrap->return->signature->substring->compactClassName->type->signature->substring->compactClassName->new->StringBuilder->append->consumed_chars->if->signature->charAt->type->append->else->if->signature->charAt->type->append->if->signature->charAt->type->append->else->type->signature->substring->signatureToString->append->unwrap->wrap->while->signature->charAt->type->append->if->signature->charAt->type->append->else->if->signature->charAt->type->append->if->signature->charAt->type->append->else->type->signature->substring->signatureToString->append->unwrap->wrap->type->append->if->signature->charAt->type->append->type->signature->substring->signatureToString->append->unwrap->wrap->return->type->toString->if->signature->charAt->throw->new->ClassFormatException->wrap->return->type->toString->return->return->n->brackets->type->consumed_chars->new->StringBuilder->for->signature->charAt->signature->substring->signatureToString->_temp->unwrap->wrap->return->brackets->toString->return->throw->new->ClassFormatException->catch->throw->new->ClassFormatException->finally
Utility#getSignature(String):::Parse Java type such as "char", or "java.lang.String[]" and return the signature in byte code format, e.g:::buf->new->StringBuilder->chars->type->toCharArray->char_found->delim->index->for->i->brackets->if->type->substring->countBrackets->buf->toString->buf->setLength->for->i->found->for->i->if->buf->append->type->replace->append->append->return->buf->toString
Utility#typeOfMethodSignature(String):::Return type of method signature as a byte value as defined in Constants:::index->try->if->signature->charAt->throw->new->ClassFormatException->signature->lastIndexOf->return->signature->substring->typeOfSignature->catch->throw->new->ClassFormatException->finally
Utility#typeOfSignature(String):::Return type of signature as a byte value as defined in Constants:::try->switch->signature->charAt->return->return->return->return->return->return->return->return->return->return->return->return->signature->substring->typeOfSignature->throw->new->ClassFormatException->catch->throw->new->ClassFormatException->finally
Utility#searchOpcode(String):::Map opcode names to opcode numbers:::name->toLowerCase->for->i->return
Utility#toHexString(byte[]):::Convert bytes into hexadecimal string:::buf->new->StringBuilder->for->i->return->buf->toString
Utility#format(int, int, boolean, char):::Return a string for an integer justified left or right and filled up with `fill' characters if necessary.:::return->Integer->toString->fillup
Utility#fillup(String, int, boolean, char):::Fillup char with up to length characters with char `fill' and justify it left or right.:::len->str->length->buf->new->charArr->for->j->if->return->new->String->return->new->String
Utility#encode(byte[], boolean):::Encode byte array it into Java identifier string, i.e., a string that only contains the following characters: (a, ..:::if->try->baos->new->ByteArrayOutputStream->gos->new->GZIPOutputStream->gos->write->baos->toByteArray->catch->finally->caw->new->CharArrayWriter->try->jw->new->JavaWriter->foreach->in->jw->write->catch->finally->return->caw->toString
Utility#decode(String, boolean):::Decode a string back to a byte array.:::bytes->try->jr->s->toCharArray->new->CharArrayReader->new->JavaReader->bos->new->ByteArrayOutputStream->ch->while->jr->read->bos->write->bos->toByteArray->catch->finally->if->gis->new->ByteArrayInputStream->new->GZIPInputStream->tmp->new->byteArr->count->b->while->gis->read->new->byteArr->System->arraycopy->return
Utility#convertString(String):::Escape all occurences of newline chars '\n', quotes \", etc.:::ch->label->toCharArray->buf->new->StringBuilder->foreach->switch->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->return->buf->toString

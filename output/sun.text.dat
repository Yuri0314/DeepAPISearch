sun.text.BreakDictionary#getNextStateFromCharacter(int, int)->short:::Uses the column map to map the character to a column number, then passes the row and column number to getNextState()
sun.text.BreakDictionary#getNextState(int, int)->short:::Returns the value in the cell with the specified (logical) row and column numbers
sun.text.CollatorUtilities#toLegacyMode(NormalizerBase.Mode)->int::: collator utilities to legacy mode
sun.text.CollatorUtilities#toNormalizerMode(int)->NormalizerBase.Mode::: collator utilities to normalizer mode
sun.text.CompactByteArray#elementAt(char)->byte:::Get the mapped value of a Unicode character.
sun.text.CompactByteArray#setElementAt(char, byte)->void:::Set a new value for a Unicode character
sun.text.CompactByteArray#setElementAt(char, char, byte)->void:::Set new values for a range of Unicode character.
sun.text.CompactByteArray#compact()->void:::Compact the array.
sun.text.CompactByteArray#arrayRegionMatches(byte[], int, byte[], int, int)->boolean:::Convenience utility to compare two arrays of doubles.
sun.text.CompactByteArray#getIndexArray()->short[]:::For internal use only
sun.text.CompactByteArray#getStringArray()->byte[]:::For internal use only
sun.text.CompactByteArray#clone()->Object:::Overrides Cloneable
sun.text.CompactByteArray#equals(Object)->boolean:::Compares the equality of two compact array objects.
sun.text.CompactByteArray#hashCode()->int::: compact byte array hash code
sun.text.ComposedCharIter#next()->int:::Returns the next precomposed Unicode character
sun.text.ComposedCharIter#decomposition()->String:::Returns the Unicode decomposition of the current character
sun.text.DictionaryBasedBreakIterator#setText(CharacterIterator)->void::: dictionary based break iterator set text
sun.text.DictionaryBasedBreakIterator#first()->int:::Sets the current iteration position to the beginning of the text
sun.text.DictionaryBasedBreakIterator#last()->int:::Sets the current iteration position to the end of the text
sun.text.DictionaryBasedBreakIterator#previous()->int:::Advances the iterator one step backwards.
sun.text.DictionaryBasedBreakIterator#preceding(int)->int:::Sets the current iteration position to the last boundary position before the specified position.
sun.text.DictionaryBasedBreakIterator#following(int)->int:::Sets the current iteration position to the first boundary position after the specified position.
sun.text.DictionaryBasedBreakIterator#handleNext()->int:::This is the implementation function for next().
sun.text.DictionaryBasedBreakIterator#lookupCategory(int)->int:::Looks up a character category for a character.
sun.text.IntHashtable#size()->int::: int hashtable size
sun.text.IntHashtable#isEmpty()->boolean::: int hashtable is empty
sun.text.IntHashtable#put(int, int)->void::: int hashtable put
sun.text.IntHashtable#get(int)->int::: int hashtable get
sun.text.IntHashtable#remove(int)->void::: int hashtable remove
sun.text.IntHashtable#getDefaultValue()->int::: int hashtable get default value
sun.text.IntHashtable#setDefaultValue(int)->void::: int hashtable set default value
sun.text.IntHashtable#equals(Object)->boolean::: int hashtable equals
sun.text.IntHashtable#hashCode()->int::: int hashtable hash code
sun.text.IntHashtable#clone()->Object::: int hashtable clone
sun.text.IntHashtable#putInternal(int, int)->void::: int hashtable put internal
sun.text.Normalizer#normalize(CharSequence, java.text.Normalizer.Form, int)->String:::Normalize a sequence of char values
sun.text.Normalizer#isNormalized(CharSequence, java.text.Normalizer.Form, int)->boolean:::Determines if the given sequence of char values is normalized.
sun.text.Normalizer#getCombiningClass(int)->int:::Returns the combining class of the given character
sun.text.RuleBasedBreakIterator#validateRuleData(String, ByteBuffer)->void:::Validates the magic number, version, and the length of the given data.
sun.text.RuleBasedBreakIterator#getAdditionalData()->byte[]::: rule based break iterator get additional data
sun.text.RuleBasedBreakIterator#setAdditionalData(byte[])->void::: rule based break iterator set additional data
sun.text.RuleBasedBreakIterator#clone()->Object:::Clones this iterator.
sun.text.RuleBasedBreakIterator#equals(Object)->boolean:::Returns true if both BreakIterators are of the same class, have the same rules, and iterate over the same text.
sun.text.RuleBasedBreakIterator#toString()->String:::Returns text
sun.text.RuleBasedBreakIterator#hashCode()->int:::Compute a hashcode for this BreakIterator
sun.text.RuleBasedBreakIterator#first()->int:::Sets the current iteration position to the beginning of the text
sun.text.RuleBasedBreakIterator#last()->int:::Sets the current iteration position to the end of the text
sun.text.RuleBasedBreakIterator#next(int)->int:::Advances the iterator either forward or backward the specified number of steps
sun.text.RuleBasedBreakIterator#next()->int:::Advances the iterator to the next boundary position.
sun.text.RuleBasedBreakIterator#previous()->int:::Advances the iterator backwards, to the last boundary preceding this one.
sun.text.RuleBasedBreakIterator#getCurrent()->int:::Returns current character
sun.text.RuleBasedBreakIterator#getNext()->int:::Returns next character
sun.text.RuleBasedBreakIterator#checkOffset(int, CharacterIterator)->void:::Throw IllegalArgumentException unless begin <= offset < end.
sun.text.RuleBasedBreakIterator#following(int)->int:::Sets the iterator to refer to the first boundary position following the specified position.
sun.text.RuleBasedBreakIterator#preceding(int)->int:::Sets the iterator to refer to the last boundary position before the specified position.
sun.text.RuleBasedBreakIterator#isBoundary(int)->boolean:::Returns true if the specified position is a boundary position
sun.text.RuleBasedBreakIterator#current()->int:::Returns the current iteration position.
sun.text.RuleBasedBreakIterator#getText()->CharacterIterator:::Return a CharacterIterator over the text being analyzed
sun.text.RuleBasedBreakIterator#setText(CharacterIterator)->void:::Set the iterator to analyze a new piece of text
sun.text.RuleBasedBreakIterator#handleNext()->int:::This method is the actual implementation of the next() method
sun.text.RuleBasedBreakIterator#handlePrevious()->int:::This method backs the iterator back up to a "safe position" in the text
sun.text.RuleBasedBreakIterator#lookupCategory(int)->int:::Looks up a character's category (i.e., its category for breaking purposes, not its Unicode category)
sun.text.RuleBasedBreakIterator#lookupState(int, int)->int:::Given a current state and a character category, looks up the next state to transition to in the state table.
sun.text.RuleBasedBreakIterator#lookupBackwardState(int, int)->int:::Given a current state and a character category, looks up the next state to transition to in the backwards state table.
sun.text.SupplementaryCharacterData#getValue(int)->int:::Returns a corresponding value for the given supplementary code-point.
sun.text.SupplementaryCharacterData#getArray()->int[]:::Returns the data array.
sun.text.UCompactIntArray#elementAt(int)->int:::Get the mapped value of a Unicode character.
sun.text.UCompactIntArray#setElementAt(int, int)->void:::Set a new value for a Unicode character
sun.text.UCompactIntArray#compact()->void:::Compact the array.
sun.text.UCompactIntArray#getKSize()->int::: compact int array get size

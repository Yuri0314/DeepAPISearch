org.graalvm.compiler.debug.Assertions_OptionDescriptors#get(String)->OptionDescriptor::: assertions_ option descriptors get
org.graalvm.compiler.debug.Assertions_OptionDescriptors#iterator()->Iterator::: assertions_ option descriptors iterator
org.graalvm.compiler.debug.DebugOptions_OptionDescriptors#get(String)->OptionDescriptor::: debug options_ option descriptors get
org.graalvm.compiler.debug.DebugOptions_OptionDescriptors#iterator()->Iterator::: debug options_ option descriptors iterator
org.graalvm.compiler.debug.AbstractKey#setDoc(String)->void::: abstract key set doc
org.graalvm.compiler.debug.AbstractKey#getDoc()->String::: abstract key get doc
org.graalvm.compiler.debug.AbstractKey#getDocName()->String::: abstract key get doc name
org.graalvm.compiler.debug.AbstractKey#getCurrentValue(DebugContext)->long::: abstract key get current value
org.graalvm.compiler.debug.AbstractKey#setCurrentValue(DebugContext, long)->void::: abstract key set current value
org.graalvm.compiler.debug.AbstractKey#ensureInitialized()->void::: abstract key ensure initialized
org.graalvm.compiler.debug.AbstractKey#addToCurrentValue(DebugContext, long)->void::: abstract key add to current value
org.graalvm.compiler.debug.AbstractKey#getIndex()->int:::Gets the globally unique index for the value represented by this object.
org.graalvm.compiler.debug.AbstractKey#getName()->String:::Gets the globally unique name for the value represented by this object.
org.graalvm.compiler.debug.AbstractKey#createName(String, Object, Object)->String::: abstract key create name
org.graalvm.compiler.debug.AbstractKey#toString()->String::: abstract key to string
org.graalvm.compiler.debug.AccumulatedKey#createName(String, Object, Object)->String::: accumulated key create name
org.graalvm.compiler.debug.AccumulatedKey#getDocName()->String::: accumulated key get doc name
org.graalvm.compiler.debug.Assertions#assertionsEnabled()->boolean:::Determines if assertions are enabled
org.graalvm.compiler.debug.Assertions#detailedAssertionsEnabled(OptionValues)->boolean:::Determines if detailed assertions are enabled
org.graalvm.compiler.debug.CausableByCompilerAssert#isCausedByCompilerAssert()->boolean::: causable by compiler assert is caused by compiler assert
org.graalvm.compiler.debug.CloseableCounter#getDebug()->DebugContext::: closeable counter get debug
org.graalvm.compiler.debug.CloseableCounter#interceptDifferenceAccm(long)->void:::A hook for subclasses
org.graalvm.compiler.debug.CloseableCounter#interceptDifferenceFlat(long)->void:::A hook for subclasses
org.graalvm.compiler.debug.CloseableCounter#close()->void::: closeable counter close
org.graalvm.compiler.debug.CloseableCounter#getCounterValue()->long::: closeable counter get counter value
org.graalvm.compiler.debug.CounterKey#increment(DebugContext)->void:::Adds 1 to this counter.
org.graalvm.compiler.debug.CounterKey#add(DebugContext, long)->void:::Adds value to this counter.
org.graalvm.compiler.debug.CounterKey#getCurrentValue(DebugContext)->long:::Gets the current value of this counter.
org.graalvm.compiler.debug.CounterKey#isEnabled(DebugContext)->boolean:::Determines if this counter is enabled.
org.graalvm.compiler.debug.CounterKey#doc(String)->CounterKey::: counter key doc
org.graalvm.compiler.debug.CounterKeyImpl#increment(DebugContext)->void::: counter key impl increment
org.graalvm.compiler.debug.CounterKeyImpl#toCSVFormat(long)->Pair::: counter key impl to format
org.graalvm.compiler.debug.CounterKeyImpl#toHumanReadableFormat(long)->String::: counter key impl to human readable format
org.graalvm.compiler.debug.CounterKeyImpl#add(DebugContext, long)->void::: counter key impl add
org.graalvm.compiler.debug.CounterKeyImpl#isEnabled(DebugContext)->boolean::: counter key impl is enabled
org.graalvm.compiler.debug.CounterKeyImpl#doc(String)->CounterKey::: counter key impl doc
org.graalvm.compiler.debug.CSVUtil#buildFormatString(String, int)->String::: util build format string
org.graalvm.compiler.debug.CSVUtil#buildFormatString(String...)->String::: util build format string
org.graalvm.compiler.debug.CSVUtil#buildFormatString(String, char, int)->String::: util build format string
org.graalvm.compiler.debug.CSVUtil.Escape#println(PrintStream, String, Object...)->PrintStream::: escape println
org.graalvm.compiler.debug.CSVUtil.Escape#println(LogStream, String, Object...)->LogStream::: escape println
org.graalvm.compiler.debug.CSVUtil.Escape#escape(String)->String::: escape escape
org.graalvm.compiler.debug.CSVUtil.Escape#escapeRaw(String)->String::: escape escape raw
org.graalvm.compiler.debug.CSVUtil.Escape#println(PrintStream, char, char, char, String, Object...)->PrintStream::: escape println
org.graalvm.compiler.debug.CSVUtil.Escape#println(LogStream, char, char, char, String, Object...)->LogStream::: escape println
org.graalvm.compiler.debug.CSVUtil.Escape#escapeArgs(Object...)->Object[]::: escape escape args
org.graalvm.compiler.debug.CSVUtil.Escape#escapeArgs(char, char, char, Object...)->Object[]::: escape escape args
org.graalvm.compiler.debug.CSVUtil.Escape#escape(String, char, char, char)->String::: escape escape
org.graalvm.compiler.debug.CSVUtil.Escape#escapeRaw(String, char, char)->String::: escape escape raw
org.graalvm.compiler.debug.DebugCloseable#getDebug()->DebugContext:::Gets the debug context associated with this object.
org.graalvm.compiler.debug.DebugCloseable#close()->void::: debug closeable close
org.graalvm.compiler.debug.DebugConfig#getOptions()->OptionValues:::Returns the option values used to configure this object.
org.graalvm.compiler.debug.DebugConfig#getLogLevel(DebugContext.Scope)->int:::Determines the current log level in scope.
org.graalvm.compiler.debug.DebugConfig#getDumpLevel(DebugContext.Scope)->int:::Determines the current dump level in scope.
org.graalvm.compiler.debug.DebugConfig#isLogEnabledForMethod(DebugContext.Scope)->boolean:::Determines if logging is enabled for any JavaMethod in scope's Scope#getCurrentContext() context.
org.graalvm.compiler.debug.DebugConfig#isCountEnabled(DebugContext.Scope)->boolean:::Determines if counting is enabled in scope.
org.graalvm.compiler.debug.DebugConfig#isMemUseTrackingEnabled(DebugContext.Scope)->boolean:::Determines if memory use tracking is scope.
org.graalvm.compiler.debug.DebugConfig#isDumpEnabledForMethod(DebugContext.Scope)->boolean:::Determines if dumping is enabled for any JavaMethod in scope's Scope#getCurrentContext() context.
org.graalvm.compiler.debug.DebugConfig#isVerifyEnabled(DebugContext.Scope)->boolean::: debug config is verify enabled
org.graalvm.compiler.debug.DebugConfig#isVerifyEnabledForMethod(DebugContext.Scope)->boolean::: debug config is verify enabled for method
org.graalvm.compiler.debug.DebugConfig#isTimeEnabled(DebugContext.Scope)->boolean::: debug config is time enabled
org.graalvm.compiler.debug.DebugConfig#interceptException(DebugContext, Throwable)->RuntimeException:::Handles notification of an exception occurring within a debug scope.
org.graalvm.compiler.debug.DebugConfig#dumpHandlers()->Collection:::Gets an unmodifiable view of the dump handlers registered with this configuration.
org.graalvm.compiler.debug.DebugConfig#output()->PrintStream:::Gets the PrintStream for logging.
org.graalvm.compiler.debug.DebugConfig#verifyHandlers()->Collection:::Gets an unmodifiable view of the verify handlers registered with this configuration.
org.graalvm.compiler.debug.DebugConfig#closeDumpHandlers(boolean)->void::: debug config close dump handlers
org.graalvm.compiler.debug.DebugConfig#asJavaMethod(Object)->JavaMethod:::Extracts a JavaMethod from an opaque debug context.
org.graalvm.compiler.debug.DebugConfigImpl#getOptions()->OptionValues::: debug config impl get options
org.graalvm.compiler.debug.DebugConfigImpl#getLogLevel(DebugContext.Scope)->int::: debug config impl get log level
org.graalvm.compiler.debug.DebugConfigImpl#isLogEnabledForMethod(DebugContext.Scope)->boolean::: debug config impl is log enabled for method
org.graalvm.compiler.debug.DebugConfigImpl#isCountEnabled(DebugContext.Scope)->boolean::: debug config impl is count enabled
org.graalvm.compiler.debug.DebugConfigImpl#isMemUseTrackingEnabled(DebugContext.Scope)->boolean::: debug config impl is mem use tracking enabled
org.graalvm.compiler.debug.DebugConfigImpl#getDumpLevel(DebugContext.Scope)->int::: debug config impl get dump level
org.graalvm.compiler.debug.DebugConfigImpl#isDumpEnabledForMethod(DebugContext.Scope)->boolean::: debug config impl is dump enabled for method
org.graalvm.compiler.debug.DebugConfigImpl#isVerifyEnabled(DebugContext.Scope)->boolean::: debug config impl is verify enabled
org.graalvm.compiler.debug.DebugConfigImpl#isVerifyEnabledForMethod(DebugContext.Scope)->boolean::: debug config impl is verify enabled for method
org.graalvm.compiler.debug.DebugConfigImpl#isTimeEnabled(DebugContext.Scope)->boolean::: debug config impl is time enabled
org.graalvm.compiler.debug.DebugConfigImpl#output()->PrintStream::: debug config impl output
org.graalvm.compiler.debug.DebugConfigImpl#toString()->String::: debug config impl to string
org.graalvm.compiler.debug.DebugConfigImpl#interceptException(DebugContext, Throwable)->RuntimeException::: debug config impl intercept exception
org.graalvm.compiler.debug.DebugConfigImpl#dumpHandlers()->Collection::: debug config impl dump handlers
org.graalvm.compiler.debug.DebugConfigImpl#verifyHandlers()->Collection::: debug config impl verify handlers
org.graalvm.compiler.debug.DebugContext#areScopesEnabled()->boolean:::Determines if dynamic scopes are enabled.
org.graalvm.compiler.debug.DebugContext#buildOutput(GraphOutput.Builder)->GraphOutput::: debug context build output
org.graalvm.compiler.debug.DebugContext#addVersionProperties(Map)->Map:::Adds version properties to the provided map
org.graalvm.compiler.debug.DebugContext.Immutable#create(OptionValues)->Immutable::: immutable create
org.graalvm.compiler.debug.DebugContext.Immutable#hasUnscopedMetrics()->boolean::: immutable has unscoped metrics
org.graalvm.compiler.debug.DebugContext#getOptions()->OptionValues:::Gets the options this debug context was constructed with.
org.graalvm.compiler.debug.DebugContext.Activation#close()->void::: activation close
org.graalvm.compiler.debug.DebugContext#activate()->Activation:::Activates this object as the debug context DebugContext#forCurrentThread for the current thread
org.graalvm.compiler.debug.DebugContext#disabled(OptionValues)->DebugContext:::Create a DebugContext with debugging disabled.
org.graalvm.compiler.debug.DebugContext#forCurrentThread()->DebugContext:::Gets the debug context for the current thread
org.graalvm.compiler.debug.DebugContext.Description#toString()->String::: description to string
org.graalvm.compiler.debug.DebugContext.Description#getLabel()->String::: description get label
org.graalvm.compiler.debug.DebugContext#getDescription()->Description:::Gets a description of the computation associated with this debug context.
org.graalvm.compiler.debug.DebugContext#getGlobalMetrics()->GlobalMetrics:::Gets the global metrics associated with this debug context.
org.graalvm.compiler.debug.DebugContext#create(OptionValues, DebugHandlersFactory)->DebugContext:::Creates a DebugContext based on a given set of option values and factory.
org.graalvm.compiler.debug.DebugContext#create(OptionValues, Iterable)->DebugContext:::Creates a DebugContext based on a given set of option values and factories
org.graalvm.compiler.debug.DebugContext#create(OptionValues, PrintStream, DebugHandlersFactory)->DebugContext::: debug context create
org.graalvm.compiler.debug.DebugContext#create(OptionValues, Description, Iterable)->DebugContext:::Creates a DebugContext based on a given set of option values and factories
org.graalvm.compiler.debug.DebugContext#create(OptionValues, Description, GlobalMetrics, PrintStream, Iterable)->DebugContext:::Creates a DebugContext.
org.graalvm.compiler.debug.DebugContext#getDumpPath(String, boolean)->Path::: debug context get dump path
org.graalvm.compiler.debug.DebugContext#isDumpEnabled(int)->boolean::: debug context is dump enabled
org.graalvm.compiler.debug.DebugContext#isVerifyEnabledForMethod()->boolean:::Determines if verification is enabled for any JavaMethod in the current scope.
org.graalvm.compiler.debug.DebugContext#isVerifyEnabled()->boolean:::Determines if verification is enabled in the current scope.
org.graalvm.compiler.debug.DebugContext#isCountEnabled()->boolean::: debug context is count enabled
org.graalvm.compiler.debug.DebugContext#isTimeEnabled()->boolean::: debug context is time enabled
org.graalvm.compiler.debug.DebugContext#isMemUseTrackingEnabled()->boolean::: debug context is mem use tracking enabled
org.graalvm.compiler.debug.DebugContext#isDumpEnabledForMethod()->boolean::: debug context is dump enabled for method
org.graalvm.compiler.debug.DebugContext#isLogEnabledForMethod()->boolean::: debug context is log enabled for method
org.graalvm.compiler.debug.DebugContext#isLogEnabled()->boolean::: debug context is log enabled
org.graalvm.compiler.debug.DebugContext#isLogEnabled(int)->boolean::: debug context is log enabled
org.graalvm.compiler.debug.DebugContext#getCurrentScopeName()->String:::Gets a string composed of the names in the current nesting of debug #scope(Object) scopes separated by '.'.
org.graalvm.compiler.debug.DebugContext#scope(Object, Object[])->DebugContext.Scope:::Creates and enters a new debug scope which will be a child of the current debug scope
org.graalvm.compiler.debug.DebugContext#scope(Object)->DebugContext.Scope:::Similar to #scope(Object, Object[]) but without context objects
org.graalvm.compiler.debug.DebugContext#getStackTrace(Thread)->StackTraceElement[]::: debug context get stack trace
org.graalvm.compiler.debug.DebugContext.Invariants#checkNoConcurrentAccess()->boolean::: invariants check no concurrent access
org.graalvm.compiler.debug.DebugContext#checkNoConcurrentAccess()->boolean::: debug context check no concurrent access
org.graalvm.compiler.debug.DebugContext#scope(Object, Object)->DebugContext.Scope::: debug context scope
org.graalvm.compiler.debug.DebugContext#scope(Object, Object, Object)->DebugContext.Scope::: debug context scope
org.graalvm.compiler.debug.DebugContext#scope(Object, Object, Object, Object)->DebugContext.Scope::: debug context scope
org.graalvm.compiler.debug.DebugContext#withContext(Object)->DebugContext.Scope:::Create an unnamed scope that appends some context to the current scope.
org.graalvm.compiler.debug.DebugContext#sandbox(CharSequence, DebugConfig, Object...)->DebugContext.Scope:::Creates and enters a new debug scope which will be disjoint from the current debug scope
org.graalvm.compiler.debug.DebugContext#inNestedScope()->boolean:::Determines if scopes are enabled and this context is in a non-top-level scope.
org.graalvm.compiler.debug.DebugContext.DisabledScope#getQualifiedName()->String::: disabled scope get qualified name
org.graalvm.compiler.debug.DebugContext.DisabledScope#getCurrentContext()->Iterable::: disabled scope get current context
org.graalvm.compiler.debug.DebugContext.DisabledScope#close()->void::: disabled scope close
org.graalvm.compiler.debug.DebugContext#disable()->DebugContext.Scope:::Disables all metrics and scope related functionality until close() is called on the returned object.
org.graalvm.compiler.debug.DebugContext#forceLog()->DebugContext.Scope::: debug context force log
org.graalvm.compiler.debug.DebugContext#disableIntercept()->DebugCloseable:::Opens a scope in which exception DebugConfig#interceptException(DebugContext, Throwable) interception is disabled
org.graalvm.compiler.debug.DebugContext#handle(Throwable)->RuntimeException:::Handles an exception in the context of the debug scope just exited
org.graalvm.compiler.debug.DebugContext#log(String)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String)->void:::Prints a message to the current debug scope's logging stream if logging is enabled.
org.graalvm.compiler.debug.DebugContext#log(String, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object)->void:::Prints a message to the current debug scope's logging stream if logging is enabled.
org.graalvm.compiler.debug.DebugContext#log(String, int)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, int)->void:::Prints a message to the current debug scope's logging stream if logging is enabled.
org.graalvm.compiler.debug.DebugContext#log(String, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, int, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, int, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, Object, int)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, int)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, int, int)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, int, int)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, int, int, int)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, int, int, int)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, Object, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, Object, Object, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, Object, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, Object, Object, Object, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, Object, Object, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#log(int, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)->void::: debug context log
org.graalvm.compiler.debug.DebugContext#logv(String, Object...)->void::: debug context logv
org.graalvm.compiler.debug.DebugContext#logv(int, String, Object...)->void:::Prints a message to the current debug scope's logging stream
org.graalvm.compiler.debug.DebugContext#log(String, Object[])->void:::This override exists to catch cases when #log(String, Object) is called with one argument bound to a varargs method parameter
org.graalvm.compiler.debug.DebugContext#log(int, String, Object[])->void:::This override exists to catch cases when #log(int, String, Object) is called with one argument bound to a varargs method parameter
org.graalvm.compiler.debug.DebugContext#forceDump(Object, String, Object...)->void:::Forces an unconditional dump
org.graalvm.compiler.debug.DebugContext#dump(int, Object, String)->void::: debug context dump
org.graalvm.compiler.debug.DebugContext#dump(int, Object, String, Object)->void::: debug context dump
org.graalvm.compiler.debug.DebugContext#dump(int, Object, String, Object, Object)->void::: debug context dump
org.graalvm.compiler.debug.DebugContext#dump(int, Object, String, Object, Object, Object)->void::: debug context dump
org.graalvm.compiler.debug.DebugContext#dump(int, Object, String, Object[])->void:::This override exists to catch cases when #dump(int, Object, String, Object) is called with one argument bound to a varargs method parameter
org.graalvm.compiler.debug.DebugContext#verify(Object, String)->void:::Calls all DebugVerifyHandlers in the current #getConfig() config to perform verification on a given object.
org.graalvm.compiler.debug.DebugContext#verify(Object, String, Object)->void:::Calls all DebugVerifyHandlers in the current #getConfig() config to perform verification on a given object.
org.graalvm.compiler.debug.DebugContext#verify(Object, String, Object[])->void:::This override exists to catch cases when #verify(Object, String, Object) is called with one argument bound to a varargs method parameter
org.graalvm.compiler.debug.DebugContext#indent()->Indent:::Opens a new indentation level (by adding some spaces) based on the current indentation level
org.graalvm.compiler.debug.DebugContext#logAndIndent(String)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String)->Indent:::A convenience function which combines #log(String) and #indent().
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, Object)->Indent:::A convenience function which combines #log(String, Object) and #indent().
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, int)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, int)->Indent:::A convenience function which combines #log(String, Object) and #indent().
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, int, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, int, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, Object, int)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, Object, int)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, int, int)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, int, int)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, Object, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, Object, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, int, int, int)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, int, int, int)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, Object, int, int)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, Object, int, int)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, Object, Object, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, Object, Object, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, Object, Object, Object, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, Object, Object, Object, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, Object, Object, Object, Object, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, Object, Object, Object, Object, Object, Object)->Indent::: debug context log and indent
org.graalvm.compiler.debug.DebugContext#logvAndIndent(int, String, Object...)->Indent:::A convenience function which combines #logv(int, String, Object...) and #indent().
org.graalvm.compiler.debug.DebugContext#logAndIndent(String, Object[])->void:::This override exists to catch cases when #logAndIndent(String, Object) is called with one argument bound to a varargs method parameter
org.graalvm.compiler.debug.DebugContext#logAndIndent(int, String, Object[])->void:::This override exists to catch cases when #logAndIndent(int, String, Object) is called with one argument bound to a varargs method parameter
org.graalvm.compiler.debug.DebugContext#context()->Iterable::: debug context context
org.graalvm.compiler.debug.DebugContext#contextSnapshot(Class)->List::: debug context context snapshot
org.graalvm.compiler.debug.DebugContext#contextLookup(Class)->T:::Searches the current debug scope, bottom up, for a context object that is an instance of a given type
org.graalvm.compiler.debug.DebugContext#contextLookupTopdown(Class)->T:::Searches the current debug scope, top down, for a context object that is an instance of a given type
org.graalvm.compiler.debug.DebugContext#memUseTracker(CharSequence)->MemUseTrackerKey:::Creates a MemUseTrackerKey memory use tracker.
org.graalvm.compiler.debug.DebugContext#memUseTracker(String, Object)->MemUseTrackerKey:::Creates a debug memory use tracker
org.graalvm.compiler.debug.DebugContext#memUseTracker(String, Object, Object)->MemUseTrackerKey:::Creates a debug memory use tracker
org.graalvm.compiler.debug.DebugContext#counter(CharSequence)->CounterKey:::Creates a CounterKey counter.
org.graalvm.compiler.debug.DebugContext#addValuesTo(long[])->long[]:::Gets a tally of the metric values in this context and a given tally.
org.graalvm.compiler.debug.DebugContext#convertValuesToKeyValueMap(long[])->EconomicMap:::Creates and returns a sorted map from metric names to their values in values.
org.graalvm.compiler.debug.DebugContext#setMetricValue(int, long)->void::: debug context set metric value
org.graalvm.compiler.debug.DebugContext#getMetricValue(int)->long::: debug context get metric value
org.graalvm.compiler.debug.DebugContext#applyFormattingFlagsAndWidth(String, int, int)->String::: debug context apply formatting flags and width
org.graalvm.compiler.debug.DebugContext#counter(String, Object)->CounterKey:::Creates a debug counter
org.graalvm.compiler.debug.DebugContext#counter(String, Object, Object)->CounterKey:::Creates a debug counter
org.graalvm.compiler.debug.DebugContext#getConfig()->DebugConfig::: debug context get config
org.graalvm.compiler.debug.DebugContext#timer(CharSequence)->TimerKey:::Creates a TimerKey timer
org.graalvm.compiler.debug.DebugContext#timer(String, Object)->TimerKey:::Creates a debug timer
org.graalvm.compiler.debug.DebugContext#timer(String, Object, Object)->TimerKey:::Creates a debug timer
org.graalvm.compiler.debug.DebugContext#convertFormatArg(Object)->Object::: debug context convert format arg
org.graalvm.compiler.debug.DebugContext#formatDebugName(String, Object, Object)->String::: debug context format debug name
org.graalvm.compiler.debug.DebugContext.Scope#getQualifiedName()->String:::Gets the names of this scope and its ancestors separated by '.'.
org.graalvm.compiler.debug.DebugContext.Scope#getCurrentContext()->Iterable::: scope get current context
org.graalvm.compiler.debug.DebugContext.Scope#close()->void::: scope close
org.graalvm.compiler.debug.DebugContext#isTimerEnabled(TimerKeyImpl)->boolean::: debug context is timer enabled
org.graalvm.compiler.debug.DebugContext#isCounterEnabled(CounterKeyImpl)->boolean:::Determines if a given timer is enabled in the current scope.
org.graalvm.compiler.debug.DebugContext#isMemUseTrackerEnabled(MemUseTrackerKeyImpl)->boolean::: debug context is mem use tracker enabled
org.graalvm.compiler.debug.DebugContext#areMetricsEnabled()->boolean::: debug context are metrics enabled
org.graalvm.compiler.debug.DebugContext#close()->void::: debug context close
org.graalvm.compiler.debug.DebugContext#closeDumpHandlers(boolean)->void::: debug context close dump handlers
org.graalvm.compiler.debug.DebugContext#printMetrics(Description)->void:::Prints metric values in this object to the file (if any) specified by DebugOptions#MetricsFile.
org.graalvm.compiler.debug.DebugDumpHandler#dump(DebugContext, Object, String, Object...)->void:::If the type of object is supported by this dumper, then a representation of object is sent to some consumer in a format determined by this object.
org.graalvm.compiler.debug.DebugDumpHandler#close()->void:::Flushes and releases resources managed by this dump handler
org.graalvm.compiler.debug.DebugDumpScope#toString()->String::: debug dump scope to string
org.graalvm.compiler.debug.DebugFilter#parse(String)->DebugFilter::: debug filter parse
org.graalvm.compiler.debug.DebugFilter#matchLevel(String)->int:::Check whether a given input is matched by this filter, and determine the log level.
org.graalvm.compiler.debug.DebugFilter#toString()->String::: debug filter to string
org.graalvm.compiler.debug.DebugHandlersFactory#createHandlers(OptionValues)->List:::Creates DebugHandlers based on options.
org.graalvm.compiler.debug.DebugMemUseTracker#start()->DebugCloseable:::Creates a point from which memory usage will be recorded if memory use tracking is DebugContext#isMemUseTrackingEnabled() enabled.
org.graalvm.compiler.debug.DebugMemUseTracker#getCurrentValue()->long:::Gets the current value of this tracker.
org.graalvm.compiler.debug.DebugOptions#getDumpDirectory(OptionValues)->Path:::Gets the directory in which DebugDumpHandlers can generate output
org.graalvm.compiler.debug.DebugVerifyHandler#verify(DebugContext, Object, String, Object...)->void:::Verifies that a given object satisfies some invariants.
org.graalvm.compiler.debug.DiagnosticsOutputDirectory#getPath()->String:::Gets the path to the output directory managed by this object, creating if it doesn't exist and has not been deleted.
org.graalvm.compiler.debug.DiagnosticsOutputDirectory#createPath()->String:::Gets the path of the directory to be created
org.graalvm.compiler.debug.DiagnosticsOutputDirectory#close()->void:::Archives and deletes this directory if it exists.
org.graalvm.compiler.debug.GlobalMetrics#add(DebugContext)->void:::Adds the values in debug to the values in this object.
org.graalvm.compiler.debug.GlobalMetrics#clear()->void:::Clears all values in this object.
org.graalvm.compiler.debug.GlobalMetrics#asKeyValueMap()->EconomicMap:::Creates and returns a sorted map from metric names to their values in this object.
org.graalvm.compiler.debug.GlobalMetrics#print(OptionValues)->void:::Prints the values in the object to the file specified by DebugOptions#AggregatedMetricsFile if present otherwise to DebugContext#DEFAULT_LOG_STREAM.
org.graalvm.compiler.debug.GraalError#unimplemented()->RuntimeException::: graal error unimplemented
org.graalvm.compiler.debug.GraalError#unimplemented(String)->RuntimeException::: graal error unimplemented
org.graalvm.compiler.debug.GraalError#shouldNotReachHere()->RuntimeException::: graal error should not reach here
org.graalvm.compiler.debug.GraalError#shouldNotReachHere(String)->RuntimeException::: graal error should not reach here
org.graalvm.compiler.debug.GraalError#shouldNotReachHere(Throwable)->RuntimeException::: graal error should not reach here
org.graalvm.compiler.debug.GraalError#guarantee(boolean, String)->void:::Checks a given condition and throws a GraalError if it is false
org.graalvm.compiler.debug.GraalError#guarantee(boolean, String, Object)->void:::Checks a given condition and throws a GraalError if it is false
org.graalvm.compiler.debug.GraalError#guarantee(boolean, String, Object, Object)->void:::Checks a given condition and throws a GraalError if it is false
org.graalvm.compiler.debug.GraalError#guarantee(boolean, String, Object, Object, Object)->void:::Checks a given condition and throws a GraalError if it is false
org.graalvm.compiler.debug.GraalError#guarantee(boolean, String, Object...)->void:::This override exists to catch cases when #guarantee(boolean, String, Object) is called with one argument bound to a varargs method parameter
org.graalvm.compiler.debug.GraalError#toString()->String::: graal error to string
org.graalvm.compiler.debug.GraalError#context()->String::: graal error context
org.graalvm.compiler.debug.GraalError#addContext(String)->GraalError::: graal error add context
org.graalvm.compiler.debug.GraalError#addContext(String, Object)->GraalError::: graal error add context
org.graalvm.compiler.debug.IgvDumpChannel#write(ByteBuffer)->int::: igv dump channel write
org.graalvm.compiler.debug.IgvDumpChannel#isOpen()->boolean::: igv dump channel is open
org.graalvm.compiler.debug.IgvDumpChannel#close()->void::: igv dump channel close
org.graalvm.compiler.debug.IgvDumpChannel#realClose()->void::: igv dump channel real close
org.graalvm.compiler.debug.IgvDumpChannel#channel()->WritableByteChannel::: igv dump channel channel
org.graalvm.compiler.debug.Indent#close()->void:::Closes the current indentation scope.
org.graalvm.compiler.debug.JavaMethodContext#asJavaMethod()->JavaMethod::: java method context as java method
org.graalvm.compiler.debug.KeyRegistry#register(AbstractKey)->int:::Ensures a given metric key is registered.
org.graalvm.compiler.debug.KeyRegistry#getKeys()->List:::Gets a copy of the registered keys.
org.graalvm.compiler.debug.LogStream#out()->PrintStream::: log stream out
org.graalvm.compiler.debug.LogStream#flush()->void:::Flushes the stream
org.graalvm.compiler.debug.LogStream#position()->int:::Gets the current column position of this log stream.
org.graalvm.compiler.debug.LogStream#indentationLevel()->int:::Gets the current indentation level for this log stream.
org.graalvm.compiler.debug.LogStream#adjustIndentation(int)->void:::Adjusts the current indentation level of this log stream.
org.graalvm.compiler.debug.LogStream#indentation()->char:::Gets the current indentation character of this log stream.
org.graalvm.compiler.debug.LogStream#disableIndentation()->void::: log stream disable indentation
org.graalvm.compiler.debug.LogStream#enableIndentation()->void::: log stream enable indentation
org.graalvm.compiler.debug.LogStream#setIndentation(char)->void:::Sets the character used for indentation.
org.graalvm.compiler.debug.LogStream#fillTo(int, char)->LogStream:::Advances this stream's #position() position to a given position by repeatedly appending a given character as necessary.
org.graalvm.compiler.debug.LogStream#print(boolean)->LogStream:::Writes a boolean value to this stream as "true" or "false".
org.graalvm.compiler.debug.LogStream#println(boolean)->LogStream:::Writes a boolean value to this stream followed by a #LINE_SEPARATOR line separator.
org.graalvm.compiler.debug.LogStream#print(char)->LogStream:::Writes a character value to this stream.
org.graalvm.compiler.debug.LogStream#println(char)->LogStream:::Writes a character value to this stream followed by a #LINE_SEPARATOR line separator.
org.graalvm.compiler.debug.LogStream#print(int)->LogStream:::Prints an int value.
org.graalvm.compiler.debug.LogStream#println(int)->LogStream:::Writes an int value to this stream followed by a #LINE_SEPARATOR line separator.
org.graalvm.compiler.debug.LogStream#print(float)->LogStream:::Writes a float value to this stream.
org.graalvm.compiler.debug.LogStream#println(float)->LogStream:::Writes a float value to this stream followed by a #LINE_SEPARATOR line separator .
org.graalvm.compiler.debug.LogStream#print(long)->LogStream:::Writes a long value to this stream.
org.graalvm.compiler.debug.LogStream#println(long)->LogStream:::Writes a long value to this stream followed by a #LINE_SEPARATOR line separator.
org.graalvm.compiler.debug.LogStream#print(double)->LogStream:::Writes a double value to this stream.
org.graalvm.compiler.debug.LogStream#println(double)->LogStream:::Writes a double value to this stream followed by a #LINE_SEPARATOR line separator.
org.graalvm.compiler.debug.LogStream#print(String)->LogStream:::Writes a String value to this stream
org.graalvm.compiler.debug.LogStream#println(String)->LogStream:::Writes a String value to this stream followed by a #LINE_SEPARATOR line separator.
org.graalvm.compiler.debug.LogStream#printf(String, Object...)->LogStream:::Writes a formatted string to this stream.
org.graalvm.compiler.debug.LogStream#println()->LogStream:::Writes a #LINE_SEPARATOR line separator to this stream.
org.graalvm.compiler.debug.MemUseTrackerKey#start(DebugContext)->DebugCloseable:::Creates a point from which memory usage will be recorded if memory use tracking is DebugContext#isMemUseTrackingEnabled() enabled.
org.graalvm.compiler.debug.MemUseTrackerKey#getCurrentValue(DebugContext)->long:::Gets the current value of this tracker.
org.graalvm.compiler.debug.MemUseTrackerKey#doc(String)->MemUseTrackerKey::: mem use tracker key doc
org.graalvm.compiler.debug.MemUseTrackerKey#getCurrentThreadAllocatedBytes()->long::: mem use tracker key get current thread allocated bytes
org.graalvm.compiler.debug.MemUseTrackerKeyImpl#start(DebugContext)->DebugCloseable::: mem use tracker key impl start
org.graalvm.compiler.debug.MemUseTrackerKeyImpl#valueToString(long)->String::: mem use tracker key impl value to string
org.graalvm.compiler.debug.MemUseTrackerKeyImpl#toHumanReadableFormat(long)->String::: mem use tracker key impl to human readable format
org.graalvm.compiler.debug.MemUseTrackerKeyImpl.FlatMemUseTracker#createName(String, Object, Object)->String::: flat mem use tracker create name
org.graalvm.compiler.debug.MemUseTrackerKeyImpl.FlatMemUseTracker#doc(String)->MetricKey::: flat mem use tracker doc
org.graalvm.compiler.debug.MemUseTrackerKeyImpl.FlatMemUseTracker#getDocName()->String::: flat mem use tracker get doc name
org.graalvm.compiler.debug.MemUseTrackerKeyImpl.FlatMemUseTracker#toHumanReadableFormat(long)->String::: flat mem use tracker to human readable format
org.graalvm.compiler.debug.MemUseTrackerKeyImpl.FlatMemUseTracker#toCSVFormat(long)->Pair::: flat mem use tracker to format
org.graalvm.compiler.debug.MemUseTrackerKeyImpl.MemUseCloseableCounterImpl#getCounterValue()->long::: mem use closeable counter impl get counter value
org.graalvm.compiler.debug.MemUseTrackerKeyImpl.MemUseCloseableCounterImpl#close()->void::: mem use closeable counter impl close
org.graalvm.compiler.debug.MemUseTrackerKeyImpl#toCSVFormat(long)->Pair::: mem use tracker key impl to format
org.graalvm.compiler.debug.MemUseTrackerKeyImpl#doc(String)->MemUseTrackerKey::: mem use tracker key impl doc
org.graalvm.compiler.debug.MethodFilter#parse(String)->MethodFilter[]:::Parses a string containing list of comma separated filter patterns into an array of MethodFilters.
org.graalvm.compiler.debug.MethodFilter#matches(MethodFilter[], JavaMethod)->boolean:::Determines if a given method is matched by a given array of filters.
org.graalvm.compiler.debug.MethodFilter#matchesClassName(MethodFilter[], String)->boolean:::Determines if a given class name is matched by a given array of filters.
org.graalvm.compiler.debug.MethodFilter#createGlobString(String)->String::: method filter create glob string
org.graalvm.compiler.debug.MethodFilter#hasSignature()->boolean::: method filter has signature
org.graalvm.compiler.debug.MethodFilter#matchesClassName(String)->boolean:::Determines if the class part of this filter matches a given class name.
org.graalvm.compiler.debug.MethodFilter#matches(JavaMethod)->boolean::: method filter matches
org.graalvm.compiler.debug.MethodFilter#matches(String, String, Signature)->boolean::: method filter matches
org.graalvm.compiler.debug.MethodFilter#toString()->String::: method filter to string
org.graalvm.compiler.debug.MetricKey#toHumanReadableFormat(long)->String:::Converts a given value for this key to a string, scaling it to a more useful unit of measurement and appending a suffix indicating the unit where applicable
org.graalvm.compiler.debug.MetricKey#toCSVFormat(long)->Pair:::Converts a given value for this key to a CSV format intended for automated data processing.
org.graalvm.compiler.debug.MetricKey#getName()->String:::Gets the name of this key.
org.graalvm.compiler.debug.MetricKey#doc(String)->MetricKey:::Sets the documentation for this key.
org.graalvm.compiler.debug.MetricKey#getDocName()->String:::Gets the name to use when listing keys
org.graalvm.compiler.debug.MetricKey#getDoc()->String:::Gets the documentation for this key.
org.graalvm.compiler.debug.PathUtilities#sanitizeFileName(String)->String:::Gets a value based on name that can be passed to Paths#get(String, String...) without causing an InvalidPathException.
org.graalvm.compiler.debug.PathUtilities#createUnique(OptionValues, OptionKey, String, String, String, boolean)->Path::: path utilities create unique
org.graalvm.compiler.debug.ScopeImpl#close()->void::: scope impl close
org.graalvm.compiler.debug.ScopeImpl#isTopLevel()->boolean::: scope impl is top level
org.graalvm.compiler.debug.ScopeImpl#isDumpEnabled(int)->boolean::: scope impl is dump enabled
org.graalvm.compiler.debug.ScopeImpl#isVerifyEnabled()->boolean::: scope impl is verify enabled
org.graalvm.compiler.debug.ScopeImpl#isLogEnabled(int)->boolean::: scope impl is log enabled
org.graalvm.compiler.debug.ScopeImpl#isCountEnabled()->boolean::: scope impl is count enabled
org.graalvm.compiler.debug.ScopeImpl#isTimeEnabled()->boolean::: scope impl is time enabled
org.graalvm.compiler.debug.ScopeImpl#isMemUseTrackingEnabled()->boolean::: scope impl is mem use tracking enabled
org.graalvm.compiler.debug.ScopeImpl#log(int, String, Object...)->void::: scope impl log
org.graalvm.compiler.debug.ScopeImpl#dump(int, Object, String, Object...)->void::: scope impl dump
org.graalvm.compiler.debug.ScopeImpl#verify(Object, String, Object...)->void::: scope impl verify
org.graalvm.compiler.debug.ScopeImpl#scope(CharSequence, DebugConfig, Object...)->ScopeImpl:::Creates and enters a new scope which is either a child of the current scope or a disjoint top level scope.
org.graalvm.compiler.debug.ScopeImpl#handle(Throwable)->RuntimeException::: scope impl handle
org.graalvm.compiler.debug.ScopeImpl#updateFlags(DebugConfigImpl)->void::: scope impl update flags
org.graalvm.compiler.debug.ScopeImpl#disableIntercept()->DebugCloseable::: scope impl disable intercept
org.graalvm.compiler.debug.ScopeImpl#getCurrentContext()->Iterable::: scope impl get current context
org.graalvm.compiler.debug.ScopeImpl#getQualifiedName()->String::: scope impl get qualified name
org.graalvm.compiler.debug.ScopeImpl#pushIndentLogger()->Indent::: scope impl push indent logger
org.graalvm.compiler.debug.TimerKey#start(DebugContext)->DebugCloseable:::Starts this timer.
org.graalvm.compiler.debug.TimerKey#getCurrentValue(DebugContext)->long:::Gets the current value of this timer.
org.graalvm.compiler.debug.TimerKey#getTimeUnit()->TimeUnit:::Gets the time unit of this timer.
org.graalvm.compiler.debug.TimerKey#doc(String)->TimerKey::: timer key doc
org.graalvm.compiler.debug.TimerKey#getFlat()->TimerKey:::Gets the timer recording the amount time spent within a timed scope minus the time spent in any nested timed scopes.
org.graalvm.compiler.debug.TimerKeyImpl.FlatTimer#createName(String, Object, Object)->String::: flat timer create name
org.graalvm.compiler.debug.TimerKeyImpl.FlatTimer#toHumanReadableFormat(long)->String::: flat timer to human readable format
org.graalvm.compiler.debug.TimerKeyImpl.FlatTimer#getTimeUnit()->TimeUnit::: flat timer get time unit
org.graalvm.compiler.debug.TimerKeyImpl.FlatTimer#start(DebugContext)->DebugCloseable::: flat timer start
org.graalvm.compiler.debug.TimerKeyImpl.FlatTimer#toCSVFormat(long)->Pair::: flat timer to format
org.graalvm.compiler.debug.TimerKeyImpl.FlatTimer#doc(String)->TimerKey::: flat timer doc
org.graalvm.compiler.debug.TimerKeyImpl.FlatTimer#getDocName()->String::: flat timer get doc name
org.graalvm.compiler.debug.TimerKeyImpl#start(DebugContext)->DebugCloseable::: timer key impl start
org.graalvm.compiler.debug.TimerKeyImpl#valueToString(long)->String::: timer key impl value to string
org.graalvm.compiler.debug.TimerKeyImpl#getFlat()->TimerKey::: timer key impl get flat
org.graalvm.compiler.debug.TimerKeyImpl#toHumanReadableFormat(long)->String::: timer key impl to human readable format
org.graalvm.compiler.debug.TimerKeyImpl#getTimeUnit()->TimeUnit::: timer key impl get time unit
org.graalvm.compiler.debug.TimerKeyImpl.Timer#close()->void::: timer close
org.graalvm.compiler.debug.TimerKeyImpl.Timer#getCounterValue()->long::: timer get counter value
org.graalvm.compiler.debug.TimerKeyImpl#toCSVFormat(long)->Pair::: timer key impl to format
org.graalvm.compiler.debug.TimerKeyImpl#toCSVFormatHelper(long)->Pair::: timer key impl to format helper
org.graalvm.compiler.debug.TimerKeyImpl#doc(String)->TimerKey::: timer key impl doc
org.graalvm.compiler.debug.TimeSource#getTimeNS()->long:::Gets the current time of this thread in nanoseconds from the most accurate timer available on the system
org.graalvm.compiler.debug.TTY.Filter#remove()->void:::Reverts the suppression state of TTY to how it was before this object was constructed.
org.graalvm.compiler.debug.TTY.Filter#close()->void::: filter close
org.graalvm.compiler.debug.TTY#isSuppressed()->boolean::: y is suppressed
org.graalvm.compiler.debug.TTY#out()->LogStream:::Gets the thread-local log stream to which the static methods of this class send their output
org.graalvm.compiler.debug.TTY#print(String)->void::: y print
org.graalvm.compiler.debug.TTY#print(int)->void::: y print
org.graalvm.compiler.debug.TTY#print(long)->void::: y print
org.graalvm.compiler.debug.TTY#print(char)->void::: y print
org.graalvm.compiler.debug.TTY#print(boolean)->void::: y print
org.graalvm.compiler.debug.TTY#print(double)->void::: y print
org.graalvm.compiler.debug.TTY#print(float)->void::: y print
org.graalvm.compiler.debug.TTY#println(String)->void::: y println
org.graalvm.compiler.debug.TTY#println()->void::: y println
org.graalvm.compiler.debug.TTY#println(int)->void::: y println
org.graalvm.compiler.debug.TTY#println(long)->void::: y println
org.graalvm.compiler.debug.TTY#println(char)->void::: y println
org.graalvm.compiler.debug.TTY#println(boolean)->void::: y println
org.graalvm.compiler.debug.TTY#println(double)->void::: y println
org.graalvm.compiler.debug.TTY#println(float)->void::: y println
org.graalvm.compiler.debug.TTY#printf(String, Object...)->void::: y printf
org.graalvm.compiler.debug.TTY#println(String, Object...)->void::: y println
org.graalvm.compiler.debug.TTY#fillTo(int)->void::: y fill to
org.graalvm.compiler.debug.TTY#printFields(Class)->void::: y print fields
org.graalvm.compiler.debug.TTY#printField(Field, boolean)->void::: y print field
org.graalvm.compiler.debug.TTY#flush()->void::: y flush
org.graalvm.compiler.debug.TTYStreamProvider#getStream()->PrintStream::: stream provider get stream
org.graalvm.compiler.debug.Versions#withVersions(Map)->Map::: versions with versions

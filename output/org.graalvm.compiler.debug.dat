AbstractKey#getIndex():::Gets the globally unique index for the value represented by this object.:::ensureInitialized->return
AbstractKey#getName():::Gets the globally unique name for the value represented by this object.:::if->createName->return
Assertions#assertionsEnabled():::Determines if assertions are enabled:::enabled->return
Assertions#detailedAssertionsEnabled(OptionValues):::Determines if detailed assertions are enabled:::return->assertionsEnabled->getValue
CloseableCounter#interceptDifferenceAccm(long):::A hook for subclasses:::
CloseableCounter#interceptDifferenceFlat(long):::A hook for subclasses:::
CounterKey#increment(DebugContext):::Adds 1 to this counter.:::
CounterKey#add(DebugContext, long):::Adds value to this counter.:::
CounterKey#getCurrentValue(DebugContext):::Gets the current value of this counter.:::
CounterKey#isEnabled(DebugContext):::Determines if this counter is enabled.:::
DebugCloseable#getDebug():::Gets the debug context associated with this object.:::return
DebugConfig#getOptions():::Returns the option values used to configure this object.:::
DebugConfig#getLogLevel(DebugContext.Scope):::Determines the current log level in scope.:::
DebugConfig#getDumpLevel(DebugContext.Scope):::Determines the current dump level in scope.:::
DebugConfig#isLogEnabledForMethod(DebugContext.Scope):::Determines if logging is enabled for any JavaMethod in scope's Scope#getCurrentContext() context.:::
DebugConfig#isCountEnabled(DebugContext.Scope):::Determines if counting is enabled in scope.:::
DebugConfig#isMemUseTrackingEnabled(DebugContext.Scope):::Determines if memory use tracking is scope.:::
DebugConfig#isDumpEnabledForMethod(DebugContext.Scope):::Determines if dumping is enabled for any JavaMethod in scope's Scope#getCurrentContext() context.:::
DebugConfig#interceptException(DebugContext, Throwable):::Handles notification of an exception occurring within a debug scope.:::
DebugConfig#dumpHandlers():::Gets an unmodifiable view of the dump handlers registered with this configuration.:::
DebugConfig#output():::Gets the PrintStream for logging.:::
DebugConfig#verifyHandlers():::Gets an unmodifiable view of the verify handlers registered with this configuration.:::
DebugConfig#asJavaMethod(Object):::Extracts a JavaMethod from an opaque debug context.:::if->return->asJavaMethod->if->return->return
DebugContext#areScopesEnabled():::Determines if dynamic scopes are enabled.:::return
DebugContext#addVersionProperties(Map):::Adds version properties to the provided map:::return->withVersions
DebugContext#getOptions():::Gets the options this debug context was constructed with.:::return
DebugContext#activate():::Activates this object as the debug context DebugContext#forCurrentThread for the current thread:::res->activated->get->new->Activation->activated->set->return
DebugContext#disabled(OptionValues):::Create a DebugContext with debugging disabled.:::if->options->getMap->isEmpty->return->return->Immutable->create->new->DebugContext
DebugContext#forCurrentThread():::Gets the debug context for the current thread:::current->activated->get->if->return->return
DebugContext#getDescription():::Gets a description of the computation associated with this debug context.:::return
DebugContext#getGlobalMetrics():::Gets the global metrics associated with this debug context.:::return
DebugContext#create(OptionValues, DebugHandlersFactory):::Creates a DebugContext based on a given set of option values and factory.:::return->Immutable->create->Collections->singletonList->new->DebugContext
DebugContext#create(OptionValues, Iterable):::Creates a DebugContext based on a given set of option values and factories:::return->Immutable->create->new->DebugContext
DebugContext#create(OptionValues, Description, Iterable):::Creates a DebugContext based on a given set of option values and factories:::return->Immutable->create->new->DebugContext
DebugContext#create(OptionValues, Description, GlobalMetrics, PrintStream, Iterable):::Creates a DebugContext.:::return->Immutable->create->new->DebugContext
DebugContext#isVerifyEnabledForMethod():::Determines if verification is enabled for any JavaMethod in the current scope.:::if->return->if->return->return->currentConfig->isVerifyEnabledForMethod
DebugContext#isVerifyEnabled():::Determines if verification is enabled in the current scope.:::return->currentScope->isVerifyEnabled
DebugContext#getCurrentScopeName():::Gets a string composed of the names in the current nesting of debug #scope(Object) scopes separated by '.'.:::if->return->currentScope->getQualifiedName->else->return
DebugContext#scope(Object, Object[]):::Creates and enters a new debug scope which will be a child of the current debug scope:::if->return->convertFormatArg->toString->enterScope->else->return
DebugContext#scope(Object):::Similar to #scope(Object, Object[]) but without context objects:::if->return->convertFormatArg->toString->enterScope->else->return
DebugContext#withContext(Object):::Create an unnamed scope that appends some context to the current scope.:::if->return->enterScope->else->return
DebugContext#sandbox(CharSequence, DebugConfig, Object...):::Creates and enters a new debug scope which will be disjoint from the current debug scope:::if->return->disable->if->return->enterScope->else->return
DebugContext#inNestedScope():::Determines if scopes are enabled and this context is in a non-top-level scope.:::if->if->return->return->currentScope->isTopLevel->else->return
DebugContext#disable():::Disables all metrics and scope related functionality until close() is called on the returned object.:::if->return->new->DisabledScope->else->return
DebugContext#disableIntercept():::Opens a scope in which exception DebugConfig#interceptException(DebugContext, Throwable) interception is disabled:::if->return->currentScope->disableIntercept->return
DebugContext#handle(Throwable):::Handles an exception in the context of the debug scope just exited:::if->return->currentScope->handle->else->if->throw->if->throw->throw->new->RuntimeException
DebugContext#log(int, String):::Prints a message to the current debug scope's logging stream if logging is enabled.:::if->currentScope->log
DebugContext#log(int, String, Object):::Prints a message to the current debug scope's logging stream if logging is enabled.:::if->currentScope->log
DebugContext#log(int, String, int):::Prints a message to the current debug scope's logging stream if logging is enabled.:::if->currentScope->log
DebugContext#logv(int, String, Object...):::Prints a message to the current debug scope's logging stream:::if->throw->new->InternalError->currentScope->log
DebugContext#log(String, Object[]):::This override exists to catch cases when #log(String, Object) is called with one argument bound to a varargs method parameter:::log
DebugContext#log(int, String, Object[]):::This override exists to catch cases when #log(int, String, Object) is called with one argument bound to a varargs method parameter:::logv
DebugContext#forceDump(Object, String, Object...):::Forces an unconditional dump:::config->dumpHandlers->closeAfterDump->if->config->dumpHandlers->else->options->getOptions->new->ArrayList<>->foreach->foreach->factory->createHandlers->if->dumpHandlers->add->foreach->dumpHandler->dump->if->dumpHandler->close
DebugContext#dump(int, Object, String, Object[]):::This override exists to catch cases when #dump(int, Object, String, Object) is called with one argument bound to a varargs method parameter:::if->currentScope->isDumpEnabled->currentScope->dump
DebugContext#verify(Object, String):::Calls all DebugVerifyHandlers in the current #getConfig() config to perform verification on a given object.:::if->currentScope->isVerifyEnabled->currentScope->verify
DebugContext#verify(Object, String, Object):::Calls all DebugVerifyHandlers in the current #getConfig() config to perform verification on a given object.:::if->currentScope->isVerifyEnabled->currentScope->verify
DebugContext#verify(Object, String, Object[]):::This override exists to catch cases when #verify(Object, String, Object) is called with one argument bound to a varargs method parameter:::if->currentScope->isVerifyEnabled->currentScope->verify
DebugContext#indent():::Opens a new indentation level (by adding some spaces) based on the current indentation level:::if->return->currentScope->pushIndentLogger->return
DebugContext#logAndIndent(int, String):::A convenience function which combines #log(String) and #indent().:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(int, String, Object):::A convenience function which combines #log(String, Object) and #indent().:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(int, String, int):::A convenience function which combines #log(String, Object) and #indent().:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logvAndIndent(int, String, Object...):::A convenience function which combines #logv(int, String, Object...) and #indent().:::if->if->isLogEnabled->return->logvAndIndentInternal->return->throw->new->InternalError
DebugContext#logAndIndent(String, Object[]):::This override exists to catch cases when #logAndIndent(String, Object) is called with one argument bound to a varargs method parameter:::logAndIndent
DebugContext#logAndIndent(int, String, Object[]):::This override exists to catch cases when #logAndIndent(int, String, Object) is called with one argument bound to a varargs method parameter:::logvAndIndent
DebugContext#contextLookup(Class):::Searches the current debug scope, bottom up, for a context object that is an instance of a given type:::if->foreach->context->if->clazz->isInstance->return->return
DebugContext#contextLookupTopdown(Class):::Searches the current debug scope, top down, for a context object that is an instance of a given type:::if->found->foreach->context->if->clazz->isInstance->return->return
DebugContext#memUseTracker(CharSequence):::Creates a MemUseTrackerKey memory use tracker.:::return->createMemUseTracker
DebugContext#memUseTracker(String, Object):::Creates a debug memory use tracker:::return->createMemUseTracker
DebugContext#memUseTracker(String, Object, Object):::Creates a debug memory use tracker:::return->createMemUseTracker
DebugContext#counter(CharSequence):::Creates a CounterKey counter.:::return->createCounter
DebugContext#addValuesTo(long[]):::Gets a tally of the metric values in this context and a given tally.:::if->return->if->return->metricValues->clone->else->if->newTally->metricValues->clone->for->i->return->else->for->i->return
DebugContext#convertValuesToKeyValueMap(long[]):::Creates and returns a sorted map from metric names to their values in values.:::keys->KeyRegistry->getKeys->Collections->sort->res->EconomicMap->keys->size->create->foreach->index->getIndex->if->res->put->else->res->put->return
DebugContext#counter(String, Object):::Creates a debug counter:::return->createCounter
DebugContext#counter(String, Object, Object):::Creates a debug counter:::return->createCounter
DebugContext#timer(CharSequence):::Creates a TimerKey timer:::return->createTimer
DebugContext#timer(String, Object):::Creates a debug timer:::return->createTimer
DebugContext#timer(String, Object, Object):::Creates a debug timer:::return->createTimer
DebugContext.Scope#getQualifiedName():::Gets the names of this scope and its ancestors separated by '.'.:::
DebugContext#isCounterEnabled(CounterKeyImpl):::Determines if a given timer is enabled in the current scope.:::if->return->return->isCounterEnabledSlow
DebugContext#printMetrics(Description):::Prints metric values in this object to the file (if any) specified by DebugOptions#MetricsFile.:::if->return->metricsFile->getOptions->getValue->if->compilable->identity->System->identityHashCode->compilationNr->synchronized->if->file->new->File->if->file->exists->file->delete->if->EconomicMap->create->else->value->compilations->get->compilations->put->baos->new->ByteArrayOutputStream->out->new->PrintStream->if->metricsFile->endsWith->metricsFile->endsWith->printMetricsCSV->else->printMetrics->content->baos->toByteArray->path->Paths->get->synchronized->Math->max->try->Files->write->catch->finally
DebugDumpHandler#dump(DebugContext, Object, String, Object...):::If the type of object is supported by this dumper, then a representation of object is sent to some consumer in a format determined by this object.:::
DebugDumpHandler#close():::Flushes and releases resources managed by this dump handler:::
DebugFilter#matchLevel(String):::Check whether a given input is matched by this filter, and determine the log level.:::if->return->else->defaultLevel->level->foreach->if->t->isMatchAny->else->if->t->matches->return
DebugHandlersFactory#createHandlers(OptionValues):::Creates DebugHandlers based on options.:::
DebugMemUseTracker#start():::Creates a point from which memory usage will be recorded if memory use tracking is DebugContext#isMemUseTrackingEnabled() enabled.:::
DebugMemUseTracker#getCurrentValue():::Gets the current value of this tracker.:::
DebugOptions#getDumpDirectory(OptionValues):::Gets the directory in which DebugDumpHandlers can generate output:::dumpDir->if->DumpPath->hasBeenSet->Paths->DumpPath->getValue->get->else->date->GraalServices->getGlobalTimeStamp->new->Date->formatter->new->SimpleDateFormat->Paths->DumpPath->getValue->formatter->format->get->dumpDir->toAbsolutePath->if->Files->exists->synchronized->if->Files->exists->Files->createDirectories->if->ShowDumpFiles->getValue->TTY->dumpDir->toString->println->return
DebugVerifyHandler#verify(DebugContext, Object, String, Object...):::Verifies that a given object satisfies some invariants.:::
DiagnosticsOutputDirectory#getPath():::Gets the path to the output directory managed by this object, creating if it doesn't exist and has not been deleted.:::return->getPath
DiagnosticsOutputDirectory#createPath():::Gets the path of the directory to be created:::baseDir->try->DebugOptions->getDumpDirectory->catch->Paths->get->finally->return->baseDir->GraalServices->getExecutionID->resolve->toAbsolutePath->toString
DiagnosticsOutputDirectory#close():::Archives and deletes this directory if it exists.:::archiveAndDelete
GlobalMetrics#add(DebugContext):::Adds the values in debug to the values in this object.:::debug->addValuesTo
GlobalMetrics#clear():::Clears all values in this object.:::
GlobalMetrics#asKeyValueMap():::Creates and returns a sorted map from metric names to their values in this object.:::keys->KeyRegistry->getKeys->Collections->sort->res->EconomicMap->keys->size->create->vals->foreach->index->getIndex->if->res->put->else->res->put->return
GlobalMetrics#print(OptionValues):::Prints the values in the object to the file specified by DebugOptions#AggregatedMetricsFile if present otherwise to DebugContext#DEFAULT_LOG_STREAM.:::vals->if->map->asKeyValueMap->metricsFile->getValue->csv->metricsFile->endsWith->metricsFile->endsWith->try->p->Files->Paths->get->newOutputStream->new->PrintStream->if->if->map->isEmpty->p->println->csvFormat->CSVUtil->buildFormatString->e->map->getEntries->while->e->advance->key->e->getKey->if->valueAndUnit->key->e->getValue->toCSVFormat->key->getName->valueAndUnit->getLeft->valueAndUnit->getRight->println->else->p->key->getName->key->e->getValue->toHumanReadableFormat->println->if->if->map->isEmpty->p->println->catch->e->printStackTrace->finally->if->getValue->p->p->println->keys->KeyRegistry->getKeys->Collections->sort->foreach->name->key->getDocName->if->doc->key->getDoc->if->p->println->else->p->println->p->println
GraalError#guarantee(boolean, String):::Checks a given condition and throws a GraalError if it is false:::if->throw->new->GraalError
GraalError#guarantee(boolean, String, Object):::Checks a given condition and throws a GraalError if it is false:::if->throw->new->GraalError
GraalError#guarantee(boolean, String, Object, Object):::Checks a given condition and throws a GraalError if it is false:::if->throw->new->GraalError
GraalError#guarantee(boolean, String, Object, Object, Object):::Checks a given condition and throws a GraalError if it is false:::if->throw->new->GraalError
GraalError#guarantee(boolean, String, Object...):::This override exists to catch cases when #guarantee(boolean, String, Object) is called with one argument bound to a varargs method parameter:::if->throw->new->GraalError
Indent#close():::Closes the current indentation scope.:::
KeyRegistry#register(AbstractKey):::Ensures a given metric key is registered.:::name->key->getName->if->keyMap->containsKey->keyMap->keys->size->put->keys->add->return->keyMap->get
KeyRegistry#getKeys():::Gets a copy of the registered keys.:::return->new->ArrayList<>
LogStream#flush():::Flushes the stream:::if->if->lineBuffer->length->flushLine->ps->flush
LogStream#position():::Gets the current column position of this log stream.:::return->lineBuffer->length
LogStream#indentationLevel():::Gets the current indentation level for this log stream.:::return
LogStream#adjustIndentation(int):::Adjusts the current indentation level of this log stream.:::if->Math->max->else
LogStream#indentation():::Gets the current indentation character of this log stream.:::return
LogStream#setIndentation(char):::Sets the character used for indentation.:::
LogStream#fillTo(int, char):::Advances this stream's #position() position to a given position by repeatedly appending a given character as necessary.:::if->indent->while->lineBuffer->length->lineBuffer->append->return
LogStream#print(boolean):::Writes a boolean value to this stream as "true" or "false".:::if->indent->lineBuffer->append->return
LogStream#println(boolean):::Writes a boolean value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(char):::Writes a character value to this stream.:::if->indent->lineBuffer->append->if->if->lineBuffer->lineBuffer->length->LINE_SEPARATOR->length->indexOf->flushLine->return
LogStream#println(char):::Writes a character value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->flushLine->return
LogStream#print(int):::Prints an int value.:::if->indent->lineBuffer->append->return
LogStream#println(int):::Writes an int value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(float):::Writes a float value to this stream.:::if->indent->lineBuffer->append->return
LogStream#println(float):::Writes a float value to this stream followed by a #LINE_SEPARATOR line separator .:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(long):::Writes a long value to this stream.:::if->indent->lineBuffer->append->return
LogStream#println(long):::Writes a long value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(double):::Writes a double value to this stream.:::if->indent->lineBuffer->append->return
LogStream#println(double):::Writes a double value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(String):::Writes a String value to this stream:::if->if->indent->lineBuffer->append->return->index->next->s->indexOf->while->s->length->indent->if->lineBuffer->s->substring->append->flushLine->LINE_SEPARATOR->length->s->indexOf->else->lineBuffer->s->substring->append->break->return
LogStream#println(String):::Writes a String value to this stream followed by a #LINE_SEPARATOR line separator.:::if->print->flushLine->return
LogStream#printf(String, Object...):::Writes a formatted string to this stream.:::if->String->format->print->return
LogStream#println():::Writes a #LINE_SEPARATOR line separator to this stream.:::if->indent->flushLine->return
MemUseTrackerKey#start(DebugContext):::Creates a point from which memory usage will be recorded if memory use tracking is DebugContext#isMemUseTrackingEnabled() enabled.:::
MemUseTrackerKey#getCurrentValue(DebugContext):::Gets the current value of this tracker.:::
MethodFilter#parse(String):::Parses a string containing list of comma separated filter patterns into an array of MethodFilters.:::filters->commaSeparatedPatterns->split->methodFilters->new->MethodFilterArr->for->i->return
MethodFilter#matches(MethodFilter[], JavaMethod):::Determines if a given method is matched by a given array of filters.:::foreach->if->filter->matches->return->return
MethodFilter#matchesClassName(MethodFilter[], String):::Determines if a given class name is matched by a given array of filters.:::foreach->if->filter->matchesClassName->return->return
MethodFilter#matchesClassName(String):::Determines if the class part of this filter matches a given class name.:::return->clazz->matcher->matches
MetricKey#toHumanReadableFormat(long):::Converts a given value for this key to a string, scaling it to a more useful unit of measurement and appending a suffix indicating the unit where applicable:::
MetricKey#toCSVFormat(long):::Converts a given value for this key to a CSV format intended for automated data processing.:::
MetricKey#getName():::Gets the name of this key.:::
MetricKey#doc(String):::Sets the documentation for this key.:::
MetricKey#getDocName():::Gets the name to use when listing keys:::
MetricKey#getDoc():::Gets the documentation for this key.:::
PathUtilities#sanitizeFileName(String):::Gets a value based on name that can be passed to Paths#get(String, String...) without causing an InvalidPathException.:::try->path->Paths->get->if->path->getNameCount->return->catch->finally->buf->name->length->new->StringBuilder->for->i->name->length->return->buf->toString
ScopeImpl#scope(CharSequence, DebugConfig, Object...):::Creates and enters a new scope which is either a child of the current scope or a disjoint top level scope.:::newScope->if->name->toString->new->ScopeImpl->else->this->name->toString->createChild->newScope->updateFlags->return
TimerKey#start(DebugContext):::Starts this timer.:::
TimerKey#getCurrentValue(DebugContext):::Gets the current value of this timer.:::
TimerKey#getTimeUnit():::Gets the time unit of this timer.:::
TimerKey#getFlat():::Gets the timer recording the amount time spent within a timed scope minus the time spent in any nested timed scopes.:::return
TimeSource#getTimeNS():::Gets the current time of this thread in nanoseconds from the most accurate timer available on the system:::return->GraalServices->getCurrentThreadCpuTime->System->nanoTime
TTY.Filter#remove():::Reverts the suppression state of TTY to how it was before this object was constructed.:::if->log->set
TTY#out():::Gets the thread-local log stream to which the static methods of this class send their output:::return->log->get

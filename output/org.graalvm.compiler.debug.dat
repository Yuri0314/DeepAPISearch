Assertions_OptionDescriptors#get(String)::: assertions_ option descriptors get:::switch->return->OptionDescriptor->create->return
Assertions_OptionDescriptors#iterator()::: assertions_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
DebugOptions_OptionDescriptors#get(String)::: debug options_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->new->StringArr->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->new->StringArr->create->return->OptionDescriptor->create->return->OptionDescriptor->new->StringArr->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->new->StringArr->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return
DebugOptions_OptionDescriptors#iterator()::: debug options_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
AbstractKey#setDoc(String)::: abstract key set doc:::
AbstractKey#getDoc()::: abstract key get doc:::return
AbstractKey#getDocName()::: abstract key get doc name:::return->getName
AbstractKey#getCurrentValue(DebugContext)::: abstract key get current value:::ensureInitialized->return->debug->getMetricValue
AbstractKey#setCurrentValue(DebugContext, long)::: abstract key set current value:::ensureInitialized->debug->setMetricValue
AbstractKey#ensureInitialized()::: abstract key ensure initialized:::if->KeyRegistry->register
AbstractKey#addToCurrentValue(DebugContext, long)::: abstract key add to current value:::ensureInitialized->debug->debug->getMetricValue->setMetricValue
AbstractKey#getIndex():::Gets the globally unique index for the value represented by this object.:::ensureInitialized->return
AbstractKey#getName():::Gets the globally unique name for the value represented by this object.:::if->createName->return
AbstractKey#createName(String, Object, Object)::: abstract key create name:::return->DebugContext->formatDebugName
AbstractKey#toString()::: abstract key to string:::return->getName
AccumulatedKey#createName(String, Object, Object)::: accumulated key create name:::return->super->createName
AccumulatedKey#getDocName()::: accumulated key get doc name:::name->getName->return->name->name->length->ACCUMULATED_KEY_SUFFIX->length->substring
Assertions#assertionsEnabled():::Determines if assertions are enabled:::enabled->return
Assertions#detailedAssertionsEnabled(OptionValues):::Determines if detailed assertions are enabled:::return->assertionsEnabled->getValue
CausableByCompilerAssert#isCausedByCompilerAssert()::: causable by compiler assert is caused by compiler assert:::
CloseableCounter#getDebug()::: closeable counter get debug:::return
CloseableCounter#interceptDifferenceAccm(long):::A hook for subclasses:::
CloseableCounter#interceptDifferenceFlat(long):::A hook for subclasses:::
CloseableCounter#close()::: closeable counter close:::end->getCounterValue->difference->if->if->counter->getName->getName->equals->ancestor->while->if->getName->counter->getName->equals->break->flatAmount->counter->addToCurrentValue->addToCurrentValue->interceptDifferenceAccm->interceptDifferenceFlat
CloseableCounter#getCounterValue()::: closeable counter get counter value:::
CounterKey#increment(DebugContext):::Adds 1 to this counter.:::
CounterKey#add(DebugContext, long):::Adds value to this counter.:::
CounterKey#getCurrentValue(DebugContext):::Gets the current value of this counter.:::
CounterKey#isEnabled(DebugContext):::Determines if this counter is enabled.:::
CounterKey#doc(String)::: counter key doc:::
CounterKeyImpl#increment(DebugContext)::: counter key impl increment:::add
CounterKeyImpl#toCSVFormat(long)::: counter key impl to format:::return->Pair->String->valueOf->create
CounterKeyImpl#toHumanReadableFormat(long)::: counter key impl to human readable format:::return->Long->toString
CounterKeyImpl#add(DebugContext, long)::: counter key impl add:::if->debug->isCounterEnabled->addToCurrentValue
CounterKeyImpl#isEnabled(DebugContext)::: counter key impl is enabled:::return->debug->isCounterEnabled
CounterKeyImpl#doc(String)::: counter key impl doc:::setDoc->return
CSVUtil#buildFormatString(String, int)::: util build format string:::return->buildFormatString
CSVUtil#buildFormatString(String...)::: util build format string:::return->String->join
CSVUtil#buildFormatString(String, char, int)::: util build format string:::sb->format->length->new->StringBuilder->sb->append->for->i->return->sb->toString
CSVUtil.Escape#println(PrintStream, String, Object...)::: escape println:::return->println
CSVUtil.Escape#println(LogStream, String, Object...)::: escape println:::return->println
CSVUtil.Escape#escape(String)::: escape escape:::return->escape
CSVUtil.Escape#escapeRaw(String)::: escape escape raw:::return->escapeRaw
CSVUtil.Escape#println(PrintStream, char, char, char, String, Object...)::: escape println:::out->escapeArgs->printf->out->println->return
CSVUtil.Escape#println(LogStream, char, char, char, String, Object...)::: escape println:::out->escapeArgs->printf->out->println->return
CSVUtil.Escape#escapeArgs(Object...)::: escape escape args:::return->escapeArgs
CSVUtil.Escape#escapeArgs(char, char, char, Object...)::: escape escape args:::separatorStr->String->valueOf->for->i->return
CSVUtil.Escape#escape(String, char, char, char)::: escape escape:::separatorStr->String->valueOf->if->str->contains->return->escapeRaw->return
CSVUtil.Escape#escapeRaw(String, char, char)::: escape escape raw:::quoteStr->String->valueOf->escapeStr->String->valueOf->escapedEscapeStr->escapedQuoteStr->str1->str->replace->str2->str1->replace->str3->return
DebugCloseable#getDebug():::Gets the debug context associated with this object.:::return
DebugCloseable#close()::: debug closeable close:::
DebugConfig#getOptions():::Returns the option values used to configure this object.:::
DebugConfig#getLogLevel(DebugContext.Scope):::Determines the current log level in scope.:::
DebugConfig#getDumpLevel(DebugContext.Scope):::Determines the current dump level in scope.:::
DebugConfig#isLogEnabledForMethod(DebugContext.Scope):::Determines if logging is enabled for any JavaMethod in scope's Scope#getCurrentContext() context.:::
DebugConfig#isCountEnabled(DebugContext.Scope):::Determines if counting is enabled in scope.:::
DebugConfig#isMemUseTrackingEnabled(DebugContext.Scope):::Determines if memory use tracking is scope.:::
DebugConfig#isDumpEnabledForMethod(DebugContext.Scope):::Determines if dumping is enabled for any JavaMethod in scope's Scope#getCurrentContext() context.:::
DebugConfig#isVerifyEnabled(DebugContext.Scope)::: debug config is verify enabled:::
DebugConfig#isVerifyEnabledForMethod(DebugContext.Scope)::: debug config is verify enabled for method:::
DebugConfig#isTimeEnabled(DebugContext.Scope)::: debug config is time enabled:::
DebugConfig#interceptException(DebugContext, Throwable):::Handles notification of an exception occurring within a debug scope.:::
DebugConfig#dumpHandlers():::Gets an unmodifiable view of the dump handlers registered with this configuration.:::
DebugConfig#output():::Gets the PrintStream for logging.:::
DebugConfig#verifyHandlers():::Gets an unmodifiable view of the verify handlers registered with this configuration.:::
DebugConfig#closeDumpHandlers(boolean)::: debug config close dump handlers:::foreach->dumpHandlers->try->handler->close->catch->if->throw->finally
DebugConfig#asJavaMethod(Object):::Extracts a JavaMethod from an opaque debug context.:::if->return->asJavaMethod->if->return->return
DebugConfigImpl#getVerifyOptionValue(OptionValues)::: debug config impl get verify option value:::return->hasBeenSet->Assertions->assertionsEnabled->getValue
DebugConfigImpl#getOptions()::: debug config impl get options:::return
DebugConfigImpl#getLogLevel(DebugContext.Scope)::: debug config impl get log level:::return->getLevel
DebugConfigImpl#isLogEnabledForMethod(DebugContext.Scope)::: debug config impl is log enabled for method:::return->isEnabledForMethod
DebugConfigImpl#isCountEnabled(DebugContext.Scope)::: debug config impl is count enabled:::return->isEnabled
DebugConfigImpl#isMemUseTrackingEnabled(DebugContext.Scope)::: debug config impl is mem use tracking enabled:::return->isEnabled
DebugConfigImpl#getDumpLevel(DebugContext.Scope)::: debug config impl get dump level:::return->getLevel
DebugConfigImpl#isDumpEnabledForMethod(DebugContext.Scope)::: debug config impl is dump enabled for method:::return->isEnabledForMethod
DebugConfigImpl#isVerifyEnabled(DebugContext.Scope)::: debug config impl is verify enabled:::return->isEnabled
DebugConfigImpl#isVerifyEnabledForMethod(DebugContext.Scope)::: debug config impl is verify enabled for method:::return->isEnabledForMethod
DebugConfigImpl#isTimeEnabled(DebugContext.Scope)::: debug config impl is time enabled:::return->isEnabled
DebugConfigImpl#output()::: debug config impl output:::return
DebugConfigImpl#isEnabled(DebugContext.Scope, DebugFilter)::: debug config impl is enabled:::return->getLevel
DebugConfigImpl#getLevel(DebugContext.Scope, DebugFilter)::: debug config impl get level:::level->if->else->currentScope->scope->getQualifiedName->filter->matchLevel->if->checkMethodFilter->return
DebugConfigImpl#isEnabledForMethod(DebugContext.Scope, DebugFilter)::: debug config impl is enabled for method:::return->checkMethodFilter
DebugConfigImpl#checkMethodFilter(DebugContext.Scope)::: debug config impl check method filter:::if->return->else->lastMethod->context->scope->getCurrentContext->foreach->if->method->DebugConfig->asJavaMethod->if->if->getValue->if->matches->return->else->if->matches->return->return
DebugConfigImpl#toString()::: debug config impl to string:::sb->new->StringBuilder->sb->append->add->add->add->add->add->return->sb->toString
DebugConfigImpl#add(StringBuilder, String, Object)::: debug config impl add:::if->sb->append->sb->append->sb->append->if->sb->Arrays->toString->append->else->sb->String->valueOf->append
DebugConfigImpl#interceptException(DebugContext, Throwable)::: debug config impl intercept exception:::if->causedByCompilerAssert->isCausedByCompilerAssert->if->getValue->return->interceptOptions->new->OptionValues->config->new->DebugConfigImpl->scope->scope->updateFlags->try->baos->new->ByteArrayOutputStream->e->new->PrintStream->printStackTrace->debug->debug->getCurrentScopeName->log->firstSeen->new->IdentityHashMap<>->foreach->debug->context->if->firstSeen->containsKey->firstSeen->put->if->getValue->getValue->debug->dump->debug->log->catch->finally->scope->updateFlags->return
DebugConfigImpl#dumpHandlers()::: debug config impl dump handlers:::return
DebugConfigImpl#verifyHandlers()::: debug config impl verify handlers:::return
DebugContext#areScopesEnabled():::Determines if dynamic scopes are enabled.:::return
DebugContext#buildOutput(GraphOutput.Builder)::: debug context build output:::if->return->builder->build->else->if->getDumpPath->new->IgvDumpChannel->output->builder->build->return
DebugContext#addVersionProperties(Map):::Adds version properties to the provided map:::return->withVersions
DebugContext.Immutable#parseUnscopedMetricSpec(String, boolean, boolean)::: immutable parse unscoped metric spec:::res->if->if->else->EconomicSet->create->else->EconomicSet->create->if->spec->isEmpty->if->res->Arrays->spec->split->asList->addAll->else->foreach->spec->split->res->add->res->add->return
DebugContext.Immutable#create(OptionValues)::: immutable create:::i->while->immutable->if->break->if->return->immutable->new->Immutable->if->return
DebugContext.Immutable#isNotEmpty(OptionKey, OptionValues)::: immutable is not empty:::return->option->getValue->option->getValue->isEmpty
DebugContext.Immutable#hasUnscopedMetrics()::: immutable has unscoped metrics:::return
DebugContext#getOptions():::Gets the options this debug context was constructed with.:::return
DebugContext.Activation#close()::: activation close:::activated->set
DebugContext#activate():::Activates this object as the debug context DebugContext#forCurrentThread for the current thread:::res->activated->get->new->Activation->activated->set->return
DebugContext#disabled(OptionValues):::Create a DebugContext with debugging disabled.:::if->options->getMap->isEmpty->return->return->Immutable->create->new->DebugContext
DebugContext#forCurrentThread():::Gets the debug context for the current thread:::current->activated->get->if->return->return
DebugContext.Description#toString()::: description to string:::compilableName->format->String->valueOf->return
DebugContext.Description#getLabel()::: description get label:::if->method->return->method->format->return->String->valueOf
DebugContext#getDescription():::Gets a description of the computation associated with this debug context.:::return
DebugContext#getGlobalMetrics():::Gets the global metrics associated with this debug context.:::return
DebugContext#create(OptionValues, DebugHandlersFactory):::Creates a DebugContext based on a given set of option values and factory.:::return->Immutable->create->Collections->singletonList->new->DebugContext
DebugContext#create(OptionValues, Iterable):::Creates a DebugContext based on a given set of option values and factories:::return->Immutable->create->new->DebugContext
DebugContext#create(OptionValues, PrintStream, DebugHandlersFactory)::: debug context create:::return->Immutable->create->Collections->singletonList->new->DebugContext
DebugContext#create(OptionValues, Description, Iterable):::Creates a DebugContext based on a given set of option values and factories:::return->Immutable->create->new->DebugContext
DebugContext#create(OptionValues, Description, GlobalMetrics, PrintStream, Iterable):::Creates a DebugContext.:::return->Immutable->create->new->DebugContext
DebugContext#getDumpPath(String, boolean)::: debug context get dump path:::try->id->label->description->getLabel->result->PathUtilities->createUnique->if->ShowDumpFiles->getValue->TTY->result->toAbsolutePath->toString->println->return->catch->throw->rethrowSilently->finally
DebugContext#isDumpEnabled(int)::: debug context is dump enabled:::return->currentScope->isDumpEnabled
DebugContext#isVerifyEnabledForMethod():::Determines if verification is enabled for any JavaMethod in the current scope.:::if->return->if->return->return->currentConfig->isVerifyEnabledForMethod
DebugContext#isVerifyEnabled():::Determines if verification is enabled in the current scope.:::return->currentScope->isVerifyEnabled
DebugContext#isCountEnabled()::: debug context is count enabled:::return->currentScope->isCountEnabled
DebugContext#isTimeEnabled()::: debug context is time enabled:::return->currentScope->isTimeEnabled
DebugContext#isMemUseTrackingEnabled()::: debug context is mem use tracking enabled:::return->currentScope->isMemUseTrackingEnabled
DebugContext#isDumpEnabledForMethod()::: debug context is dump enabled for method:::if->return->return->currentConfig->isDumpEnabledForMethod
DebugContext#isLogEnabledForMethod()::: debug context is log enabled for method:::if->return->if->return->return->currentConfig->isLogEnabledForMethod
DebugContext#isLogEnabled()::: debug context is log enabled:::return->isLogEnabled
DebugContext#isLogEnabled(int)::: debug context is log enabled:::return->currentScope->isLogEnabled
DebugContext#getCurrentScopeName():::Gets a string composed of the names in the current nesting of debug #scope(Object) scopes separated by '.'.:::if->return->currentScope->getQualifiedName->else->return
DebugContext#scope(Object, Object[]):::Creates and enters a new debug scope which will be a child of the current debug scope:::if->return->convertFormatArg->toString->enterScope->else->return
DebugContext#scope(Object):::Similar to #scope(Object, Object[]) but without context objects:::if->return->convertFormatArg->toString->enterScope->else->return
DebugContext#getStackTrace(Thread)::: debug context get stack trace:::return->thread->getStackTrace
DebugContext.Invariants#checkNoConcurrentAccess()::: invariants check no concurrent access:::currentThread->Thread->currentThread->if->buf->new->Formatter->buf->getName->format->debugContextConstructors->addedHeader->foreach->if->e->getMethodName->equals->e->getClassName->getName->equals->else->if->if->buf->format->buf->format->if->buf->format->throw->buf->toString->new->AssertionError->return
DebugContext#checkNoConcurrentAccess()::: debug context check no concurrent access:::return
DebugContext#enterScope(CharSequence, DebugConfig, Object...)::: debug context enter scope:::currentScope->scope->return
DebugContext#scope(Object, Object)::: debug context scope:::if->return->convertFormatArg->toString->enterScope->else->return
DebugContext#scope(Object, Object, Object)::: debug context scope:::if->return->convertFormatArg->toString->enterScope->else->return
DebugContext#scope(Object, Object, Object, Object)::: debug context scope:::if->return->convertFormatArg->toString->enterScope->else->return
DebugContext#withContext(Object):::Create an unnamed scope that appends some context to the current scope.:::if->return->enterScope->else->return
DebugContext#sandbox(CharSequence, DebugConfig, Object...):::Creates and enters a new debug scope which will be disjoint from the current debug scope:::if->return->disable->if->return->enterScope->else->return
DebugContext#inNestedScope():::Determines if scopes are enabled and this context is in a non-top-level scope.:::if->if->return->return->currentScope->isTopLevel->else->return
DebugContext.DisabledScope#getQualifiedName()::: disabled scope get qualified name:::return
DebugContext.DisabledScope#getCurrentContext()::: disabled scope get current context:::return->Collections->emptyList
DebugContext.DisabledScope#close()::: disabled scope close:::
DebugContext#disable():::Disables all metrics and scope related functionality until close() is called on the returned object.:::if->return->new->DisabledScope->else->return
DebugContext#forceLog()::: debug context force log:::if->context->new->ArrayList<>->foreach->context->context->add->config->currentConfig->getOptions->new->OptionValues->new->DebugConfigImpl->return->context->toArray->sandbox->return
DebugContext#disableIntercept():::Opens a scope in which exception DebugConfig#interceptException(DebugContext, Throwable) interception is disabled:::if->return->currentScope->disableIntercept->return
DebugContext#handle(Throwable):::Handles an exception in the context of the debug scope just exited:::if->return->currentScope->handle->else->if->throw->if->throw->throw->new->RuntimeException
DebugContext#log(String)::: debug context log:::log
DebugContext#log(int, String):::Prints a message to the current debug scope's logging stream if logging is enabled.:::if->currentScope->log
DebugContext#log(String, Object)::: debug context log:::log
DebugContext#log(int, String, Object):::Prints a message to the current debug scope's logging stream if logging is enabled.:::if->currentScope->log
DebugContext#log(String, int)::: debug context log:::log
DebugContext#log(int, String, int):::Prints a message to the current debug scope's logging stream if logging is enabled.:::if->currentScope->log
DebugContext#log(String, Object, Object)::: debug context log:::log
DebugContext#log(int, String, Object, Object)::: debug context log:::if->currentScope->log
DebugContext#log(String, int, Object)::: debug context log:::log
DebugContext#log(int, String, int, Object)::: debug context log:::if->currentScope->log
DebugContext#log(String, Object, int)::: debug context log:::log
DebugContext#log(int, String, Object, int)::: debug context log:::if->currentScope->log
DebugContext#log(String, int, int)::: debug context log:::log
DebugContext#log(int, String, int, int)::: debug context log:::if->currentScope->log
DebugContext#log(String, Object, Object, Object)::: debug context log:::log
DebugContext#log(int, String, Object, Object, Object)::: debug context log:::if->currentScope->log
DebugContext#log(String, int, int, int)::: debug context log:::log
DebugContext#log(int, String, int, int, int)::: debug context log:::if->currentScope->log
DebugContext#log(String, Object, Object, Object, Object)::: debug context log:::log
DebugContext#log(int, String, Object, Object, Object, Object)::: debug context log:::if->currentScope->log
DebugContext#log(String, Object, Object, Object, Object, Object)::: debug context log:::log
DebugContext#log(int, String, Object, Object, Object, Object, Object)::: debug context log:::if->currentScope->log
DebugContext#log(String, Object, Object, Object, Object, Object, Object)::: debug context log:::log
DebugContext#log(int, String, Object, Object, Object, Object, Object, Object)::: debug context log:::if->currentScope->log
DebugContext#log(String, Object, Object, Object, Object, Object, Object, Object)::: debug context log:::log
DebugContext#log(String, Object, Object, Object, Object, Object, Object, Object, Object)::: debug context log:::log
DebugContext#log(int, String, Object, Object, Object, Object, Object, Object, Object)::: debug context log:::if->currentScope->log
DebugContext#log(int, String, Object, Object, Object, Object, Object, Object, Object, Object)::: debug context log:::if->currentScope->log
DebugContext#log(String, Object, Object, Object, Object, Object, Object, Object, Object, Object)::: debug context log:::log
DebugContext#log(int, String, Object, Object, Object, Object, Object, Object, Object, Object, Object)::: debug context log:::if->currentScope->log
DebugContext#log(String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)::: debug context log:::log
DebugContext#log(int, String, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object)::: debug context log:::if->currentScope->log
DebugContext#logv(String, Object...)::: debug context logv:::logv
DebugContext#logv(int, String, Object...):::Prints a message to the current debug scope's logging stream:::if->throw->new->InternalError->currentScope->log
DebugContext#log(String, Object[]):::This override exists to catch cases when #log(String, Object) is called with one argument bound to a varargs method parameter:::log
DebugContext#log(int, String, Object[]):::This override exists to catch cases when #log(int, String, Object) is called with one argument bound to a varargs method parameter:::logv
DebugContext#forceDump(Object, String, Object...):::Forces an unconditional dump:::config->dumpHandlers->closeAfterDump->if->config->dumpHandlers->else->options->getOptions->new->ArrayList<>->foreach->foreach->factory->createHandlers->if->dumpHandlers->add->foreach->dumpHandler->dump->if->dumpHandler->close
DebugContext#dump(int, Object, String)::: debug context dump:::if->currentScope->isDumpEnabled->currentScope->dump
DebugContext#dump(int, Object, String, Object)::: debug context dump:::if->currentScope->isDumpEnabled->currentScope->dump
DebugContext#dump(int, Object, String, Object, Object)::: debug context dump:::if->currentScope->isDumpEnabled->currentScope->dump
DebugContext#dump(int, Object, String, Object, Object, Object)::: debug context dump:::if->currentScope->isDumpEnabled->currentScope->dump
DebugContext#dump(int, Object, String, Object[]):::This override exists to catch cases when #dump(int, Object, String, Object) is called with one argument bound to a varargs method parameter:::if->currentScope->isDumpEnabled->currentScope->dump
DebugContext#verify(Object, String):::Calls all DebugVerifyHandlers in the current #getConfig() config to perform verification on a given object.:::if->currentScope->isVerifyEnabled->currentScope->verify
DebugContext#verify(Object, String, Object):::Calls all DebugVerifyHandlers in the current #getConfig() config to perform verification on a given object.:::if->currentScope->isVerifyEnabled->currentScope->verify
DebugContext#verify(Object, String, Object[]):::This override exists to catch cases when #verify(Object, String, Object) is called with one argument bound to a varargs method parameter:::if->currentScope->isVerifyEnabled->currentScope->verify
DebugContext#indent():::Opens a new indentation level (by adding some spaces) based on the current indentation level:::if->return->currentScope->pushIndentLogger->return
DebugContext#logAndIndent(String)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String):::A convenience function which combines #log(String) and #indent().:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, Object)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, Object):::A convenience function which combines #log(String, Object) and #indent().:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, int)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, int):::A convenience function which combines #log(String, Object) and #indent().:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, int, Object)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, int, Object)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, Object, int)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, Object, int)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, int, int)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, int, int)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, Object, Object)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, Object, Object)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, Object, Object, Object)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, Object, Object, Object)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, int, int, int)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, int, int, int)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, Object, int, int)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, Object, int, int)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, Object, Object, Object, Object)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, Object, Object, Object, Object)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, Object, Object, Object, Object, Object)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, Object, Object, Object, Object, Object)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logAndIndent(String, Object, Object, Object, Object, Object, Object)::: debug context log and indent:::return->logAndIndent
DebugContext#logAndIndent(int, String, Object, Object, Object, Object, Object, Object)::: debug context log and indent:::if->isLogEnabled->return->logvAndIndentInternal->return
DebugContext#logvAndIndent(int, String, Object...):::A convenience function which combines #logv(int, String, Object...) and #indent().:::if->if->isLogEnabled->return->logvAndIndentInternal->return->throw->new->InternalError
DebugContext#logvAndIndentInternal(int, String, Object...)::: debug context logv and indent internal:::currentScope->log->return->currentScope->pushIndentLogger
DebugContext#logAndIndent(String, Object[]):::This override exists to catch cases when #logAndIndent(String, Object) is called with one argument bound to a varargs method parameter:::logAndIndent
DebugContext#logAndIndent(int, String, Object[]):::This override exists to catch cases when #logAndIndent(int, String, Object) is called with one argument bound to a varargs method parameter:::logvAndIndent
DebugContext#context()::: debug context context:::if->return->currentScope->getCurrentContext->else->return->Collections->emptyList
DebugContext#contextSnapshot(Class)::: debug context context snapshot:::if->result->new->ArrayList<>->foreach->context->if->clazz->isInstance->result->add->return->else->return->Collections->emptyList
DebugContext#contextLookup(Class):::Searches the current debug scope, bottom up, for a context object that is an instance of a given type:::if->foreach->context->if->clazz->isInstance->return->return
DebugContext#contextLookupTopdown(Class):::Searches the current debug scope, top down, for a context object that is an instance of a given type:::if->found->foreach->context->if->clazz->isInstance->return->return
DebugContext#memUseTracker(CharSequence):::Creates a MemUseTrackerKey memory use tracker.:::return->createMemUseTracker
DebugContext#memUseTracker(String, Object):::Creates a debug memory use tracker:::return->createMemUseTracker
DebugContext#memUseTracker(String, Object, Object):::Creates a debug memory use tracker:::return->createMemUseTracker
DebugContext#createMemUseTracker(String, Object, Object)::: debug context create mem use tracker:::return->new->MemUseTrackerKeyImpl
DebugContext#counter(CharSequence):::Creates a CounterKey counter.:::return->createCounter
DebugContext#addValuesTo(long[]):::Gets a tally of the metric values in this context and a given tally.:::if->return->if->return->metricValues->clone->else->if->newTally->metricValues->clone->for->i->return->else->for->i->return
DebugContext#convertValuesToKeyValueMap(long[]):::Creates and returns a sorted map from metric names to their values in values.:::keys->KeyRegistry->getKeys->Collections->sort->res->EconomicMap->keys->size->create->foreach->index->getIndex->if->res->put->else->res->put->return
DebugContext#setMetricValue(int, long)::: debug context set metric value:::ensureMetricValuesSize
DebugContext#getMetricValue(int)::: debug context get metric value:::if->return->return
DebugContext#ensureMetricValuesSize(int)::: debug context ensure metric values size:::if->new->longArr->if->Arrays->copyOf
DebugContext#applyFormattingFlagsAndWidth(String, int, int)::: debug context apply formatting flags and width:::if->return->sb->new->StringBuilder->len->sb->length->if->for->i->res->sb->toString->if->res->toUpperCase->return
DebugContext#counter(String, Object):::Creates a debug counter:::return->createCounter
DebugContext#counter(String, Object, Object):::Creates a debug counter:::return->createCounter
DebugContext#createCounter(String, Object, Object)::: debug context create counter:::return->new->CounterKeyImpl
DebugContext#getConfig()::: debug context get config:::return
DebugContext#timer(CharSequence):::Creates a TimerKey timer:::return->createTimer
DebugContext#timer(String, Object):::Creates a debug timer:::return->createTimer
DebugContext#timer(String, Object, Object):::Creates a debug timer:::return->createTimer
DebugContext#convertFormatArg(Object)::: debug context convert format arg:::if->return->formattedClassName->get->return
DebugContext#formatDebugName(String, Object, Object)::: debug context format debug name:::return->String->convertFormatArg->convertFormatArg->format
DebugContext#createTimer(String, Object, Object)::: debug context create timer:::return->new->TimerKeyImpl
DebugContext.Scope#getQualifiedName():::Gets the names of this scope and its ancestors separated by '.'.:::
DebugContext.Scope#getCurrentContext()::: scope get current context:::
DebugContext.Scope#close()::: scope close:::
DebugContext#isTimerEnabled(TimerKeyImpl)::: debug context is timer enabled:::if->return->return->isTimerEnabledSlow
DebugContext#isTimerEnabledSlow(AbstractKey)::: debug context is timer enabled slow:::if->currentScope->isTimeEnabled->return->if->key->ensureInitialized->unscoped->return->unscoped->isEmpty->unscoped->key->getName->contains
DebugContext#isCounterEnabled(CounterKeyImpl):::Determines if a given timer is enabled in the current scope.:::if->return->return->isCounterEnabledSlow
DebugContext#isCounterEnabledSlow(AbstractKey)::: debug context is counter enabled slow:::if->currentScope->isCountEnabled->return->if->key->ensureInitialized->unscoped->return->unscoped->isEmpty->unscoped->key->getName->contains
DebugContext#isMemUseTrackerEnabled(MemUseTrackerKeyImpl)::: debug context is mem use tracker enabled:::if->return->return->isMemUseTrackerEnabledSlow
DebugContext#isMemUseTrackerEnabledSlow(AbstractKey)::: debug context is mem use tracker enabled slow:::if->currentScope->isMemUseTrackingEnabled->return->if->key->ensureInitialized->unscoped->return->unscoped->isEmpty->unscoped->key->getName->contains
DebugContext#areMetricsEnabled()::: debug context are metrics enabled:::return
DebugContext#close()::: debug context close:::closeDumpHandlers->if->printMetrics->if->globalMetrics->add->if->try->sharedChannel->realClose->catch->finally
DebugContext#closeDumpHandlers(boolean)::: debug context close dump handlers:::if->currentConfig->closeDumpHandlers
DebugContext#printMetrics(Description):::Prints metric values in this object to the file (if any) specified by DebugOptions#MetricsFile.:::if->return->metricsFile->getOptions->getValue->if->compilable->identity->System->identityHashCode->compilationNr->synchronized->if->file->new->File->if->file->exists->file->delete->if->EconomicMap->create->else->value->compilations->get->compilations->put->baos->new->ByteArrayOutputStream->out->new->PrintStream->if->metricsFile->endsWith->metricsFile->endsWith->printMetricsCSV->else->printMetrics->content->baos->toByteArray->path->Paths->get->synchronized->Math->max->try->Files->write->catch->finally
DebugContext#printMetricsCSV(PrintStream, Object, Integer, int, String):::Appends metrics in CSV format to out for a single method compilation.:::compilableName->format->String->valueOf->csvFormat->CSVUtil->buildFormatString->format->String->escapeArgs->format->sep->foreach->KeyRegistry->getKeys->index->getIndex->if->valueAndUnit->key->toCSVFormat->key->getName->escape->valueAndUnit->getLeft->valueAndUnit->getRight->println
DebugContext#printMetrics(PrintStream, Object, Integer, int, String):::Appends metrics in a human readable format to out for a single method compilation.:::compilableName->format->String->valueOf->maxKeyWidth->compilableName->length->res->new->TreeMap<>->foreach->KeyRegistry->getKeys->index->getIndex->if->name->key->getName->value->valueString->if->timer->ms->timer->getTimeUnit->toMillis->if->continue->else->String->valueOf->res->put->Math->name->length->max->title->String->format->out->title->length->new->charArr->new->String->replace->println->out->printf->out->title->length->new->charArr->new->String->replace->println->foreach->res->entrySet->out->String->valueOf->e->getKey->e->getValue->printf->out->println
DebugContext#rethrowSilently(Class, Throwable)::: debug context rethrow silently:::throw
DebugDumpHandler#dump(DebugContext, Object, String, Object...):::If the type of object is supported by this dumper, then a representation of object is sent to some consumer in a format determined by this object.:::
DebugDumpHandler#close():::Flushes and releases resources managed by this dump handler:::
DebugDumpScope#toString()::: debug dump scope to string:::return
DebugFilter#parse(String)::: debug filter parse:::if->return->return->spec->split->new->DebugFilter
DebugFilter#matchLevel(String):::Check whether a given input is matched by this filter, and determine the log level.:::if->return->else->defaultLevel->level->foreach->if->t->isMatchAny->else->if->t->matches->return
DebugFilter#toString()::: debug filter to string:::buf->new->StringBuilder->if->buf->Arrays->toString->append->else->buf->append->return->buf->toString
DebugFilter.Term#matches(String):::Determines if a given input is matched by this filter.:::return->pattern->matcher->matches
DebugFilter.Term#isMatchAny()::: term is match any:::return
DebugFilter.Term#toString()::: term to string:::return->pattern->toString
DebugHandlersFactory#createHandlers(OptionValues):::Creates DebugHandlers based on options.:::
DebugMemUseTracker#start():::Creates a point from which memory usage will be recorded if memory use tracking is DebugContext#isMemUseTrackingEnabled() enabled.:::
DebugMemUseTracker#getCurrentValue():::Gets the current value of this tracker.:::
DebugOptions#getDumpDirectory(OptionValues):::Gets the directory in which DebugDumpHandlers can generate output:::dumpDir->if->DumpPath->hasBeenSet->Paths->DumpPath->getValue->get->else->date->GraalServices->getGlobalTimeStamp->new->Date->formatter->new->SimpleDateFormat->Paths->DumpPath->getValue->formatter->format->get->dumpDir->toAbsolutePath->if->Files->exists->synchronized->if->Files->exists->Files->createDirectories->if->ShowDumpFiles->getValue->TTY->dumpDir->toString->println->return
DebugVerifyHandler#verify(DebugContext, Object, String, Object...):::Verifies that a given object satisfies some invariants.:::
DiagnosticsOutputDirectory#getPath():::Gets the path to the output directory managed by this object, creating if it doesn't exist and has not been deleted.:::return->getPath
DiagnosticsOutputDirectory#getPath(boolean)::: diagnostics output directory get path:::if->createPath->dir->new->File->getAbsoluteFile->if->dir->exists->dir->mkdirs->if->dir->exists->TTY->println->return->if->CLOSED->equals->TTY->println->return->return
DiagnosticsOutputDirectory#createPath():::Gets the path of the directory to be created:::baseDir->try->DebugOptions->getDumpDirectory->catch->Paths->get->finally->return->baseDir->GraalServices->getExecutionID->resolve->toAbsolutePath->toString
DiagnosticsOutputDirectory#close():::Archives and deletes this directory if it exists.:::archiveAndDelete
DiagnosticsOutputDirectory#archiveAndDelete():::Archives and deletes the #getPath() output directory if it exists.:::outDir->getPath->if->dir->Paths->get->if->dir->toFile->exists->prefix->new->File->getName->zip->new->File->getAbsoluteFile->toDelete->new->ArrayList<>->try->zos->new->FileOutputStream->new->ZipOutputStream->zos->setLevel->Files->Collections->emptySet->new->SimpleFileVisitor<Path>->walkFileTree->TTY->println->catch->TTY->printf->toDelete->clear->finally->if->toDelete->isEmpty->lastDeletionError->foreach->try->Files->delete->catch->finally->if->TTY->printf
GlobalMetrics#add(DebugContext):::Adds the values in debug to the values in this object.:::debug->addValuesTo
GlobalMetrics#clear():::Clears all values in this object.:::
GlobalMetrics#asKeyValueMap():::Creates and returns a sorted map from metric names to their values in this object.:::keys->KeyRegistry->getKeys->Collections->sort->res->EconomicMap->keys->size->create->vals->foreach->index->getIndex->if->res->put->else->res->put->return
GlobalMetrics#print(OptionValues):::Prints the values in the object to the file specified by DebugOptions#AggregatedMetricsFile if present otherwise to DebugContext#DEFAULT_LOG_STREAM.:::vals->if->map->asKeyValueMap->metricsFile->getValue->csv->metricsFile->endsWith->metricsFile->endsWith->try->p->Files->Paths->get->newOutputStream->new->PrintStream->if->if->map->isEmpty->p->println->csvFormat->CSVUtil->buildFormatString->e->map->getEntries->while->e->advance->key->e->getKey->if->valueAndUnit->key->e->getValue->toCSVFormat->key->getName->valueAndUnit->getLeft->valueAndUnit->getRight->println->else->p->key->getName->key->e->getValue->toHumanReadableFormat->println->if->if->map->isEmpty->p->println->catch->e->printStackTrace->finally->if->getValue->p->p->println->keys->KeyRegistry->getKeys->Collections->sort->foreach->name->key->getDocName->if->doc->key->getDoc->if->p->println->else->p->println->p->println
GraalError#unimplemented()::: graal error unimplemented:::throw->new->GraalError
GraalError#unimplemented(String)::: graal error unimplemented:::throw->new->GraalError
GraalError#shouldNotReachHere()::: graal error should not reach here:::throw->new->GraalError
GraalError#shouldNotReachHere(String)::: graal error should not reach here:::throw->new->GraalError
GraalError#shouldNotReachHere(Throwable)::: graal error should not reach here:::throw->new->GraalError
GraalError#guarantee(boolean, String):::Checks a given condition and throws a GraalError if it is false:::if->throw->new->GraalError
GraalError#guarantee(boolean, String, Object):::Checks a given condition and throws a GraalError if it is false:::if->throw->new->GraalError
GraalError#guarantee(boolean, String, Object, Object):::Checks a given condition and throws a GraalError if it is false:::if->throw->new->GraalError
GraalError#guarantee(boolean, String, Object, Object, Object):::Checks a given condition and throws a GraalError if it is false:::if->throw->new->GraalError
GraalError#guarantee(boolean, String, Object...):::This override exists to catch cases when #guarantee(boolean, String, Object) is called with one argument bound to a varargs method parameter:::if->throw->new->GraalError
GraalError#toString()::: graal error to string:::str->new->StringBuilder->str->super->toString->append->str->context->append->return->str->toString
GraalError#context()::: graal error context:::str->new->StringBuilder->foreach->str->append->append->return->str->toString
GraalError#format(String, Object...)::: graal error format:::if->for->i->return->String->format
GraalError#addContext(String)::: graal error add context:::add->return
GraalError#addContext(String, Object)::: graal error add context:::return->format->addContext
IgvDumpChannel#write(ByteBuffer)::: igv dump channel write:::channel->channel->return->channel->write
IgvDumpChannel#isOpen()::: igv dump channel is open:::return
IgvDumpChannel#close()::: igv dump channel close:::
IgvDumpChannel#realClose()::: igv dump channel real close:::if->sharedChannel->close
IgvDumpChannel#channel()::: igv dump channel channel:::if->throw->new->IOException->if->target->getValue->if->createFileChannel->else->if->createNetworkChannel->else->TTY->getName->println->return
IgvDumpChannel#createNetworkChannel(Supplier, OptionValues)::: igv dump channel create network channel:::host->PrintGraphHost->getValue->port->PrintGraphPort->getValue->try->channel->SocketChannel->new->InetSocketAddress->open->targetAnnouncement->String->format->maybeAnnounceTarget->return->catch->return->networkFailure->String->format->if->return->createFileChannel->else->throw->new->IOException->finally
IgvDumpChannel#maybeAnnounceTarget(String)::: igv dump channel maybe announce target:::if->targetAnnouncement->equals->TTY->println
IgvDumpChannel#createFileChannel(Supplier, String)::: igv dump channel create file channel:::path->pathProvider->get->try->channel->FileChannel->open->dir->path->toFile->if->dir->isDirectory->dir->getParentFile->if->maybeAnnounceTarget->else->maybeAnnounceTarget->return->catch->throw->String->format->new->IOException->finally
Indent#close():::Closes the current indentation scope.:::
JavaMethodContext#asJavaMethod()::: java method context as java method:::
KeyRegistry#register(AbstractKey):::Ensures a given metric key is registered.:::name->key->getName->if->keyMap->containsKey->keyMap->keys->size->put->keys->add->return->keyMap->get
KeyRegistry#getKeys():::Gets a copy of the registered keys.:::return->new->ArrayList<>
LogStream#out()::: log stream out:::if->return->return
LogStream#indent():::Prepends #indentation to the current output line until its write position is equal to the current #indentationLevel() level.:::if->if->while->lineBuffer->length->lineBuffer->append
LogStream#flushLine(boolean)::: log stream flush line:::if->if->lineBuffer->append->ps->lineBuffer->toString->print->ps->flush->lineBuffer->setLength->return
LogStream#flush():::Flushes the stream:::if->if->lineBuffer->length->flushLine->ps->flush
LogStream#position():::Gets the current column position of this log stream.:::return->lineBuffer->length
LogStream#indentationLevel():::Gets the current indentation level for this log stream.:::return
LogStream#adjustIndentation(int):::Adjusts the current indentation level of this log stream.:::if->Math->max->else
LogStream#indentation():::Gets the current indentation character of this log stream.:::return
LogStream#disableIndentation()::: log stream disable indentation:::
LogStream#enableIndentation()::: log stream enable indentation:::
LogStream#setIndentation(char):::Sets the character used for indentation.:::
LogStream#fillTo(int, char):::Advances this stream's #position() position to a given position by repeatedly appending a given character as necessary.:::if->indent->while->lineBuffer->length->lineBuffer->append->return
LogStream#print(boolean):::Writes a boolean value to this stream as "true" or "false".:::if->indent->lineBuffer->append->return
LogStream#println(boolean):::Writes a boolean value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(char):::Writes a character value to this stream.:::if->indent->lineBuffer->append->if->if->lineBuffer->lineBuffer->length->LINE_SEPARATOR->length->indexOf->flushLine->return
LogStream#println(char):::Writes a character value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->flushLine->return
LogStream#print(int):::Prints an int value.:::if->indent->lineBuffer->append->return
LogStream#println(int):::Writes an int value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(float):::Writes a float value to this stream.:::if->indent->lineBuffer->append->return
LogStream#println(float):::Writes a float value to this stream followed by a #LINE_SEPARATOR line separator .:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(long):::Writes a long value to this stream.:::if->indent->lineBuffer->append->return
LogStream#println(long):::Writes a long value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(double):::Writes a double value to this stream.:::if->indent->lineBuffer->append->return
LogStream#println(double):::Writes a double value to this stream followed by a #LINE_SEPARATOR line separator.:::if->indent->lineBuffer->append->return->flushLine->return
LogStream#print(String):::Writes a String value to this stream:::if->if->indent->lineBuffer->append->return->index->next->s->indexOf->while->s->length->indent->if->lineBuffer->s->substring->append->flushLine->LINE_SEPARATOR->length->s->indexOf->else->lineBuffer->s->substring->append->break->return
LogStream#println(String):::Writes a String value to this stream followed by a #LINE_SEPARATOR line separator.:::if->print->flushLine->return
LogStream#printf(String, Object...):::Writes a formatted string to this stream.:::if->String->format->print->return
LogStream#println():::Writes a #LINE_SEPARATOR line separator to this stream.:::if->indent->flushLine->return
MemUseTrackerKey#start(DebugContext):::Creates a point from which memory usage will be recorded if memory use tracking is DebugContext#isMemUseTrackingEnabled() enabled.:::
MemUseTrackerKey#getCurrentValue(DebugContext):::Gets the current value of this tracker.:::
MemUseTrackerKey#doc(String)::: mem use tracker key doc:::
MemUseTrackerKey#getCurrentThreadAllocatedBytes()::: mem use tracker key get current thread allocated bytes:::return->GraalServices->isThreadAllocatedMemorySupported->GraalServices->getCurrentThreadAllocatedBytes
MemUseTrackerKeyImpl#start(DebugContext)::: mem use tracker key impl start:::if->debug->isMemUseTrackerEnabled->result->new->MemUseCloseableCounterImpl->return->return
MemUseTrackerKeyImpl#valueToString(long)::: mem use tracker key impl value to string:::return->String->format
MemUseTrackerKeyImpl#toHumanReadableFormat(long)::: mem use tracker key impl to human readable format:::return->valueToString
MemUseTrackerKeyImpl.FlatMemUseTracker#createName(String, Object, Object)::: flat mem use tracker create name:::return->super->createName
MemUseTrackerKeyImpl.FlatMemUseTracker#doc(String)::: flat mem use tracker doc:::throw->getName->new->IllegalArgumentException
MemUseTrackerKeyImpl.FlatMemUseTracker#getDocName()::: flat mem use tracker get doc name:::return
MemUseTrackerKeyImpl.FlatMemUseTracker#toHumanReadableFormat(long)::: flat mem use tracker to human readable format:::return->valueToString
MemUseTrackerKeyImpl.FlatMemUseTracker#toCSVFormat(long)::: flat mem use tracker to format:::return->Pair->String->valueOf->create
MemUseTrackerKeyImpl.MemUseCloseableCounterImpl#getCounterValue()::: mem use closeable counter impl get counter value:::return->MemUseTrackerKey->getCurrentThreadAllocatedBytes
MemUseTrackerKeyImpl.MemUseCloseableCounterImpl#close()::: mem use closeable counter impl close:::super->close
MemUseTrackerKeyImpl#toCSVFormat(long)::: mem use tracker key impl to format:::return->Pair->String->valueOf->create
MemUseTrackerKeyImpl#doc(String)::: mem use tracker key impl doc:::setDoc->return
MethodFilter#parse(String):::Parses a string containing list of comma separated filter patterns into an array of MethodFilters.:::filters->commaSeparatedPatterns->split->methodFilters->new->MethodFilterArr->for->i->return
MethodFilter#matches(MethodFilter[], JavaMethod):::Determines if a given method is matched by a given array of filters.:::foreach->if->filter->matches->return->return
MethodFilter#matchesClassName(MethodFilter[], String):::Determines if a given class name is matched by a given array of filters.:::foreach->if->filter->matchesClassName->return->return
MethodFilter#createGlobString(String)::: method filter create glob string:::return->Pattern->quote->replace->replace
MethodFilter#createClassGlobPattern(String)::: method filter create class glob pattern:::if->pattern->length->return->else->if->pattern->contains->return->Pattern->createGlobString->compile->else->return->Pattern->createGlobString->compile
MethodFilter#hasSignature()::: method filter has signature:::return
MethodFilter#matchesClassName(String):::Determines if the class part of this filter matches a given class name.:::return->clazz->matcher->matches
MethodFilter#matches(JavaMethod)::: method filter matches:::if->methodName->o->getName->matcher->matches->return->if->clazz->o->getDeclaringClass->toJavaName->matcher->matches->return->return->o->getSignature->matchesSignature
MethodFilter#matchesSignature(Signature)::: method filter matches signature:::if->return->if->sig->getParameterCount->return->for->i->return
MethodFilter#matches(String, String, Signature)::: method filter matches:::if->methodName->matcher->matches->return->if->clazz->matcher->matches->return->return->matchesSignature
MethodFilter#toString()::: method filter to string:::buf->new->StringBuilder->sep->if->buf->append->append->append->if->buf->append->append->append->if->buf->append->append->Arrays->toString->append->return->buf->append->toString
MetricKey#toHumanReadableFormat(long):::Converts a given value for this key to a string, scaling it to a more useful unit of measurement and appending a suffix indicating the unit where applicable:::
MetricKey#toCSVFormat(long):::Converts a given value for this key to a CSV format intended for automated data processing.:::
MetricKey#getName():::Gets the name of this key.:::
MetricKey#doc(String):::Sets the documentation for this key.:::
MetricKey#getDocName():::Gets the name to use when listing keys:::
MetricKey#getDoc():::Gets the documentation for this key.:::
PathUtilities#sanitizeFileName(String):::Gets a value based on name that can be passed to Paths#get(String, String...) without causing an InvalidPathException.:::try->path->Paths->get->if->path->getNameCount->return->catch->finally->buf->name->length->new->StringBuilder->for->i->name->length->return->buf->toString
PathUtilities#createUnique(OptionValues, OptionKey, String, String, String, boolean)::: path utilities create unique:::uniqueTag->dumpCounter->prefix->if->baseNameOption->getValue->slash->prefix->lastIndexOf->prefix->substring->else->for
ScopeImpl.IndentImpl#isEmitted()::: indent impl is emitted:::return
ScopeImpl.IndentImpl#printScopeName(StringBuilder, boolean)::: indent impl print scope name:::if->mustPrint->if->if->parentIndent->isEmitted->parentIndent->printScopeName->if->printContext->str->append->append->Thread->currentThread->getId->append->append->getQualifiedName->append->System->lineSeparator->append->printContext
ScopeImpl.IndentImpl#printContext(StringBuilder):::Print or count the context objects for the current scope.:::count->if->foreach->if->if->str->append->append->append->System->lineSeparator->append->return
ScopeImpl.IndentImpl#log(int, String, Object...)::: indent impl log:::if->isLogEnabled->str->new->StringBuilder->printScopeName->str->append->result->String->format->lineSep->System->lineSeparator->str->result->lineSep->concat->replace->append->str->append->output->append
ScopeImpl.IndentImpl#indent()::: indent impl indent:::new->IndentImpl->return
ScopeImpl.IndentImpl#close()::: indent impl close:::if
ScopeImpl#isEmptyScope()::: scope impl is empty scope:::return
ScopeImpl#close()::: scope impl close:::
ScopeImpl#isTopLevel()::: scope impl is top level:::return
ScopeImpl#isDumpEnabled(int)::: scope impl is dump enabled:::return
ScopeImpl#isVerifyEnabled()::: scope impl is verify enabled:::return
ScopeImpl#isLogEnabled(int)::: scope impl is log enabled:::return
ScopeImpl#isCountEnabled()::: scope impl is count enabled:::return
ScopeImpl#isTimeEnabled()::: scope impl is time enabled:::return
ScopeImpl#isMemUseTrackingEnabled()::: scope impl is mem use tracking enabled:::return
ScopeImpl#log(int, String, Object...)::: scope impl log:::if->isLogEnabled->getLastUsedIndent->log
ScopeImpl#dump(int, Object, String, Object...)::: scope impl dump:::if->isDumpEnabled->config->getConfig->if->foreach->config->dumpHandlers->dumpHandler->dump
ScopeImpl#getConfig()::: scope impl get config:::return
ScopeImpl#verify(Object, String, Object...)::: scope impl verify:::if->isVerifyEnabled->config->getConfig->if->message->String->format->foreach->config->verifyHandlers->handler->verify
ScopeImpl#scope(CharSequence, DebugConfig, Object...):::Creates and enters a new scope which is either a child of the current scope or a disjoint top level scope.:::newScope->if->name->toString->new->ScopeImpl->else->this->name->toString->createChild->newScope->updateFlags->return
ScopeImpl#silenceException(Class, Throwable)::: scope impl silence exception:::throw
ScopeImpl#handle(Throwable)::: scope impl handle:::try->if->lastClosed->if->newException->try->s->s->interceptException->catch->finally->if->else->throw->else->if->throw->new->AssertionError->else->catch->t->initCause->throw->finally->if->throw->if->throw->throw->silenceException
ScopeImpl#updateFlags(DebugConfigImpl)::: scope impl update flags:::if->else->if->isEmptyScope->else->config->isCountEnabled->config->isMemUseTrackingEnabled->config->isTimeEnabled->config->isVerifyEnabled->config->output->config->getDumpLevel->config->getLogLevel
ScopeImpl#disableIntercept()::: scope impl disable intercept:::previous->return->new->DebugCloseable
ScopeImpl#interceptException(Throwable)::: scope impl intercept exception:::if->try->s->scope->return->interceptException->catch->return->new->RuntimeException->finally->return
ScopeImpl#createChild(String, Object[])::: scope impl create child:::return->new->ScopeImpl
ScopeImpl#getCurrentContext()::: scope impl get current context:::scope->return->new->Iterable<Object>
ScopeImpl#getQualifiedName()::: scope impl get qualified name:::if->if->else->parent->getQualifiedName->if->isEmptyScope->return
ScopeImpl#pushIndentLogger()::: scope impl push indent logger:::getLastUsedIndent->indent->return
ScopeImpl#getLastUsedIndent()::: scope impl get last used indent:::if->if->parent->getLastUsedIndent->new->IndentImpl->else->new->IndentImpl->return
TimerKey#start(DebugContext):::Starts this timer.:::
TimerKey#getCurrentValue(DebugContext):::Gets the current value of this timer.:::
TimerKey#getTimeUnit():::Gets the time unit of this timer.:::
TimerKey#doc(String)::: timer key doc:::
TimerKey#getFlat():::Gets the timer recording the amount time spent within a timed scope minus the time spent in any nested timed scopes.:::return
TimerKeyImpl.FlatTimer#createName(String, Object, Object)::: flat timer create name:::return->super->createName
TimerKeyImpl.FlatTimer#toHumanReadableFormat(long)::: flat timer to human readable format:::return->valueToString
TimerKeyImpl.FlatTimer#getTimeUnit()::: flat timer get time unit:::return->accm->getTimeUnit
TimerKeyImpl.FlatTimer#start(DebugContext)::: flat timer start:::return->accm->start
TimerKeyImpl.FlatTimer#toCSVFormat(long)::: flat timer to format:::return->TimerKeyImpl->toCSVFormatHelper
TimerKeyImpl.FlatTimer#doc(String)::: flat timer doc:::throw->getName->new->IllegalArgumentException
TimerKeyImpl.FlatTimer#getDocName()::: flat timer get doc name:::return
TimerKeyImpl#start(DebugContext)::: timer key impl start:::if->debug->isTimerEnabled->result->new->Timer->return->else->return
TimerKeyImpl#valueToString(long)::: timer key impl value to string:::return->String->format
TimerKeyImpl#getFlat()::: timer key impl get flat:::return
TimerKeyImpl#toHumanReadableFormat(long)::: timer key impl to human readable format:::return->valueToString
TimerKeyImpl#getTimeUnit()::: timer key impl get time unit:::return
TimerKeyImpl.Timer#close()::: timer close:::super->close
TimerKeyImpl.Timer#getCounterValue()::: timer get counter value:::return->TimeSource->getTimeNS
TimerKeyImpl#toCSVFormat(long)::: timer key impl to format:::return->toCSVFormatHelper
TimerKeyImpl#toCSVFormatHelper(long)::: timer key impl to format helper:::return->Pair->Long->toString->create
TimerKeyImpl#doc(String)::: timer key impl doc:::setDoc->return
TimeSource#getTimeNS():::Gets the current time of this thread in nanoseconds from the most accurate timer available on the system:::return->GraalServices->getCurrentThreadCpuTime->System->nanoTime
TTY.Filter#remove():::Reverts the suppression state of TTY to how it was before this object was constructed.:::if->log->set
TTY.Filter#close()::: filter close:::remove
TTY#isSuppressed()::: y is suppressed:::return->log->get
TTY#out():::Gets the thread-local log stream to which the static methods of this class send their output:::return->log->get
TTY#print(String)::: y print:::out->print
TTY#print(int)::: y print:::out->print
TTY#print(long)::: y print:::out->print
TTY#print(char)::: y print:::out->print
TTY#print(boolean)::: y print:::out->print
TTY#print(double)::: y print:::out->print
TTY#print(float)::: y print:::out->print
TTY#println(String)::: y println:::out->println
TTY#println()::: y println:::out->println
TTY#println(int)::: y println:::out->println
TTY#println(long)::: y println:::out->println
TTY#println(char)::: y println:::out->println
TTY#println(boolean)::: y println:::out->println
TTY#println(double)::: y println:::out->println
TTY#println(float)::: y println:::out->println
TTY#printf(String, Object...)::: y printf:::out->printf
TTY#println(String, Object...)::: y println:::out->printf
TTY#fillTo(int)::: y fill to:::out->fillTo
TTY#printFields(Class)::: y print fields:::className->javaClass->getSimpleName->TTY->println->foreach->javaClass->getFields->printField->TTY->println
TTY#printField(Field, boolean)::: y print field:::fieldName->String->field->getName->format->try->prefix->postfix->if->field->getType->TTY->field->getInt->print->else->if->field->getType->TTY->field->getBoolean->print->else->if->field->getType->TTY->field->getFloat->print->else->if->field->getType->TTY->field->get->print->else->if->field->getType->m->field->get->TTY->printMap->print->else->TTY->field->get->print->catch->finally
TTY#printMap(Map)::: y print map:::sb->new->StringBuilder->keys->new->ArrayList<>->foreach->m->keySet->keys->add->Collections->sort->foreach->sb->append->sb->append->sb->m->get->append->sb->append->return->sb->toString
TTY#flush()::: y flush:::out->flush
TTYStreamProvider#getStream()::: stream provider get stream:::
Versions#withVersions(Map)::: versions with versions:::if->return->else->properties->putAll->return
Versions#findReleaseInfo(Path)::: versions find release info:::if->return->releaseInJre->jreDir->resolve->if->Files->exists->return->jdkDir->jreDir->getParent->if->return->releaseInJdk->jdkDir->resolve->return->Files->exists

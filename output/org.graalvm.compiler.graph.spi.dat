org.graalvm.compiler.graph.spi.Canonicalizable#canonical(CanonicalizerTool)->Node:::Implementations of this method can provide local optimizations like constant folding and strength reduction
org.graalvm.compiler.graph.spi.Canonicalizable.Unary#canonical(CanonicalizerTool, T)->Node:::Similar to Canonicalizable#canonical(CanonicalizerTool), except that implementations should act as if the current input of the node was the given one, i.e., they should never look at the inputs via the this pointer.
org.graalvm.compiler.graph.spi.Canonicalizable.Unary#getValue()->T:::Gets the current value of the input, so that calling #canonical(CanonicalizerTool, Node) with the value returned from this method should behave exactly like Canonicalizable#canonical(CanonicalizerTool).
org.graalvm.compiler.graph.spi.Canonicalizable.Unary#canonical(CanonicalizerTool)->T::: unary canonical
org.graalvm.compiler.graph.spi.Canonicalizable.Binary#canonical(CanonicalizerTool, T, T)->Node:::Similar to Canonicalizable#canonical(CanonicalizerTool), except that implementations should act as if the current input of the node was the given one, i.e., they should never look at the inputs via the this pointer.
org.graalvm.compiler.graph.spi.Canonicalizable.Binary#getX()->T:::Gets the current value of the input, so that calling #canonical(CanonicalizerTool, Node, Node) with the value returned from this method should behave exactly like Canonicalizable#canonical(CanonicalizerTool).
org.graalvm.compiler.graph.spi.Canonicalizable.Binary#getY()->T:::Gets the current value of the input, so that calling #canonical(CanonicalizerTool, Node, Node) with the value returned from this method should behave exactly like Canonicalizable#canonical(CanonicalizerTool).
org.graalvm.compiler.graph.spi.Canonicalizable.Binary#canonical(CanonicalizerTool)->T::: binary canonical
org.graalvm.compiler.graph.spi.Canonicalizable.BinaryCommutative#maybeCommuteInputs()->Node:::Ensure a canonical ordering of inputs for commutative nodes to improve GVN results
org.graalvm.compiler.graph.spi.Canonicalizable.Ternary#canonical(CanonicalizerTool, T, T, T)->Node:::Similar to Canonicalizable#canonical(CanonicalizerTool), except that implementations should act as if the current input of the node was the given one, i.e., they should never look at the inputs via the this pointer.
org.graalvm.compiler.graph.spi.Canonicalizable.Ternary#getX()->T:::Gets the current value of the input, so that calling #canonical(CanonicalizerTool, Node, Node, Node) with the value returned from this method should behave exactly like Canonicalizable#canonical(CanonicalizerTool).
org.graalvm.compiler.graph.spi.Canonicalizable.Ternary#getY()->T:::Gets the current value of the input, so that calling #canonical(CanonicalizerTool, Node, Node, Node) with the value returned from this method should behave exactly like Canonicalizable#canonical(CanonicalizerTool).
org.graalvm.compiler.graph.spi.Canonicalizable.Ternary#getZ()->T:::Gets the current value of the input, so that calling #canonical(CanonicalizerTool, Node, Node, Node) with the value returned from this method should behave exactly like Canonicalizable#canonical(CanonicalizerTool).
org.graalvm.compiler.graph.spi.Canonicalizable.Ternary#canonical(CanonicalizerTool)->T::: ternary canonical
org.graalvm.compiler.graph.spi.CanonicalizerTool#getAssumptions()->Assumptions::: canonicalizer tool get assumptions
org.graalvm.compiler.graph.spi.CanonicalizerTool#getMetaAccess()->MetaAccessProvider::: canonicalizer tool get meta access
org.graalvm.compiler.graph.spi.CanonicalizerTool#getConstantReflection()->ConstantReflectionProvider::: canonicalizer tool get constant reflection
org.graalvm.compiler.graph.spi.CanonicalizerTool#getConstantFieldProvider()->ConstantFieldProvider::: canonicalizer tool get constant field provider
org.graalvm.compiler.graph.spi.CanonicalizerTool#canonicalizeReads()->boolean::: canonicalizer tool canonicalize reads
org.graalvm.compiler.graph.spi.CanonicalizerTool#allUsagesAvailable()->boolean:::If this method returns false, not all Node#usages() usages of a node are yet available
org.graalvm.compiler.graph.spi.CanonicalizerTool#smallestCompareWidth()->Integer:::Indicates the smallest width for comparing an integer value on the target platform
org.graalvm.compiler.graph.spi.CanonicalizerTool#getOptions()->OptionValues::: canonicalizer tool get options
org.graalvm.compiler.graph.spi.Simplifiable#simplify(SimplifierTool)->void::: simplifiable simplify
org.graalvm.compiler.graph.spi.SimplifierTool#deleteBranch(Node)->void::: simplifier tool delete branch
org.graalvm.compiler.graph.spi.SimplifierTool#addToWorkList(Node)->void:::Adds a node to the worklist independent of whether it has already been on the worklist.
org.graalvm.compiler.graph.spi.SimplifierTool#addToWorkList(Iterable)->void::: simplifier tool add to work list
org.graalvm.compiler.graph.spi.SimplifierTool#removeIfUnused(Node)->void::: simplifier tool remove if unused

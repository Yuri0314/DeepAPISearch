AbstractInlineInfo#graph()::: abstract inline info graph:::return->invoke->asNode->graph
AbstractInlineInfo#invoke()::: abstract inline info invoke:::return
AbstractInlineInfo#inline(Invoke, ResolvedJavaMethod, Inlineable, boolean, String)::: abstract inline info inline:::calleeGraph->getGraph->return->InliningUtil->inlineForCanonicalization
AbstractInlineInfo#populateInlinableElements(HighTierContext, StructuredGraph, CanonicalizerPhase, OptionValues)::: abstract inline info populate inlinable elements:::for->i->numberOfMethods
AbstractInlineInfo#determineNodeCount()::: abstract inline info determine node count:::nodes->for->i->numberOfMethods->return
AssumptionInlineInfo#inline(Providers, String)::: assumption inline info inline:::takenAssumption->invoke->asNode->graph->getAssumptions->recordTo->return->super->inline
AssumptionInlineInfo#tryToDevirtualizeInvoke(Providers)::: assumption inline info try to devirtualize invoke:::takenAssumption->invoke->asNode->graph->getAssumptions->recordTo->InliningUtil->graph->replaceInvokeCallTarget
AssumptionInlineInfo#toString()::: assumption inline info to string:::return->concrete->format
ExactInlineInfo#suppressNullCheck()::: exact inline info suppress null check:::
ExactInlineInfo#inline(Providers, String)::: exact inline info inline:::return->inline
ExactInlineInfo#tryToDevirtualizeInvoke(Providers)::: exact inline info try to devirtualize invoke:::
ExactInlineInfo#numberOfMethods()::: exact inline info number of methods:::return
ExactInlineInfo#methodAt(int)::: exact inline info method at:::return
ExactInlineInfo#probabilityAt(int)::: exact inline info probability at:::return
ExactInlineInfo#relevanceAt(int)::: exact inline info relevance at:::return
ExactInlineInfo#toString()::: exact inline info to string:::return->concrete->format
ExactInlineInfo#inlineableElementAt(int)::: exact inline info inlineable element at:::return
ExactInlineInfo#setInlinableElement(int, Inlineable)::: exact inline info set inlinable element:::
ExactInlineInfo#shouldInline()::: exact inline info should inline:::return->concrete->shouldBeInlined
InlineInfo#graph():::The graph containing the #invoke() invocation that may be inlined.:::
InlineInfo#invoke():::The invocation that may be inlined.:::
InlineInfo#numberOfMethods():::Returns the number of methods that may be inlined by the #invoke() invocation:::
InlineInfo#methodAt(int)::: inline info method at:::
InlineInfo#inlineableElementAt(int)::: inline info inlineable element at:::
InlineInfo#probabilityAt(int)::: inline info probability at:::
InlineInfo#relevanceAt(int)::: inline info relevance at:::
InlineInfo#setInlinableElement(int, Inlineable)::: inline info set inlinable element:::
InlineInfo#inline(Providers, String):::Performs the inlining described by this object and returns the node that represents the return value of the inlined method (or null for void methods and methods that have no non-exceptional exit).:::
InlineInfo#tryToDevirtualizeInvoke(Providers):::Try to make the call static bindable to avoid interface and virtual method calls.:::
InlineInfo#shouldInline()::: inline info should inline:::
InlineInfo#populateInlinableElements(HighTierContext, StructuredGraph, CanonicalizerPhase, OptionValues)::: inline info populate inlinable elements:::
InlineInfo#determineNodeCount()::: inline info determine node count:::
MultiTypeGuardInlineInfo#assertUniqueTypes(ArrayList)::: multi type guard inline info assert unique types:::set->EconomicSet->create->foreach->set->ptype->getType->add->return->set->size->ptypes->size
MultiTypeGuardInlineInfo#computeMethodProbabilities()::: multi type guard inline info compute method probabilities:::result->concretes->size->new->doubleArr->for->i->typesToConcretes->size->return
MultiTypeGuardInlineInfo#maximumMethodProbability()::: multi type guard inline info maximum method probability:::max->for->i->return
MultiTypeGuardInlineInfo#numberOfMethods()::: multi type guard inline info number of methods:::return->concretes->size
MultiTypeGuardInlineInfo#methodAt(int)::: multi type guard inline info method at:::return->concretes->get
MultiTypeGuardInlineInfo#inlineableElementAt(int)::: multi type guard inline info inlineable element at:::return
MultiTypeGuardInlineInfo#probabilityAt(int)::: multi type guard inline info probability at:::return
MultiTypeGuardInlineInfo#relevanceAt(int)::: multi type guard inline info relevance at:::return->probabilityAt
MultiTypeGuardInlineInfo#setInlinableElement(int, Inlineable)::: multi type guard inline info set inlinable element:::
MultiTypeGuardInlineInfo#inline(Providers, String)::: multi type guard inline info inline:::if->hasSingleMethod->return->graph->providers->getStampProvider->providers->getConstantReflection->inlineSingleMethod->else->return->graph->inlineMultipleMethods
MultiTypeGuardInlineInfo#shouldInline()::: multi type guard inline info should inline:::foreach->if->method->shouldBeInlined->return->return
MultiTypeGuardInlineInfo#hasSingleMethod()::: multi type guard inline info has single method:::return->concretes->size->shouldFallbackToInvoke
MultiTypeGuardInlineInfo#shouldFallbackToInvoke()::: multi type guard inline info should fallback to invoke:::return
MultiTypeGuardInlineInfo#inlineMultipleMethods(StructuredGraph, Providers, String)::: multi type guard inline info inline multiple methods:::numberOfMethods->concretes->size->continuation->invoke->next->returnMerge->graph->new->MergeNode->add->returnMerge->invoke->stateAfter->setStateAfter->returnValuePhi->if->invoke->asNode->getStackKind->graph->invoke->asNode->stamp->unrestricted->new->ValuePhiNode->addWithoutUnique->exceptionMerge->exceptionObjectPhi->if->invokeWithException->exceptionEdge->invokeWithException->exceptionEdge->graph->new->MergeNode->add->exceptionSux->exceptionEdge->next->graph->addBeforeFixed->graph->StampFactory->forKind->new->ValuePhiNode->addWithoutUnique->exceptionMerge->exceptionEdge->stateAfter->invoke->stateAfter->new->JavaKindArr->new->ValueNodeArr->duplicateModified->setStateAfter->successors->new->AbstractBeginNodeArr->for->i->unknownTypeSux->if->shouldFallbackToInvoke->createInvocationBlock->else->graph->new->DeoptimizeNode->add->BeginNode->begin->if->invokeWithExceptionNode->exceptionEdge->invokeWithExceptionNode->exceptionEdge->exceptionEdge->replaceAtUsages->exceptionEdge->setNext->GraphUtil->invokeWithExceptionNode->exceptionEdge->killCFG->methodDispatch->providers->getStampProvider->providers->getConstantReflection->createDispatchOnTypeBeforeInvoke->invoke->setNext->returnMerge->setNext->if->invoke->asNode->replaceAtUsages->invoke->asNode->safeDelete->replacementNodes->new->ArrayList<>->for->i->if->shouldFallbackToInvoke->replacementNodes->add->canonicalizeNodes->EconomicSet->create->for->i->if->canonicalizeNodes->add->return
MultiTypeGuardInlineInfo#doInline(int, Invoke, String)::: multi type guard inline info do inline:::return->methodAt->inlineableElementAt->inline
MultiTypeGuardInlineInfo#getTypeCount(int)::: multi type guard inline info get type count:::count->for->i->typesToConcretes->size->return
MultiTypeGuardInlineInfo#getLeastCommonType(int)::: multi type guard inline info get least common type:::commonType->for->i->typesToConcretes->size->return
MultiTypeGuardInlineInfo#getLeastCommonType()::: multi type guard inline info get least common type:::result->getLeastCommonType->for->i->concretes->size->return
MultiTypeGuardInlineInfo#inlineSingleMethod(StructuredGraph, StampProvider, ConstantReflectionProvider, String)::: multi type guard inline info inline single method:::calleeEntryNode->graph->new->BeginNode->add->unknownTypeSux->createUnknownTypeSuccessor->successors->new->AbstractBeginNodeArr->createDispatchOnTypeBeforeInvoke->calleeEntryNode->invoke->asNode->setNext->return->methodAt->inlineableElementAt->inline
MultiTypeGuardInlineInfo#createDispatchOnTypeBeforeInvoke(StructuredGraph, AbstractBeginNode[], boolean, StampProvider, ConstantReflectionProvider)::: multi type guard inline info create dispatch on type before invoke:::nonNullReceiver->InliningUtil->nonNullReceiver->hub->graph->new->LoadHubNode->unique->graph->getDebug->concretes->size->log->keys->ptypes->size->new->ResolvedJavaTypeArr->keyProbabilities->ptypes->size->new->doubleArr->keySuccessors->ptypes->size->new->intArr->totalProbability->for->i->ptypes->size->for->i->typeSwitch->graph->new->TypeSwitchNode->add->pred->invoke->asNode->predecessor->pred->setNext->return
MultiTypeGuardInlineInfo#createInvocationBlock(StructuredGraph, Invoke, AbstractMergeNode, PhiNode, AbstractMergeNode, PhiNode, boolean)::: multi type guard inline info create invocation block:::duplicatedInvoke->duplicateInvokeForInlining->calleeEntryNode->graph->new->BeginNode->add->calleeEntryNode->duplicatedInvoke->asNode->setNext->endNode->graph->new->EndNode->add->duplicatedInvoke->setNext->returnMerge->addForwardEnd->if->returnValuePhi->duplicatedInvoke->asNode->addInput->return
MultiTypeGuardInlineInfo#duplicateInvokeForInlining(StructuredGraph, Invoke, AbstractMergeNode, PhiNode, boolean)::: multi type guard inline info duplicate invoke for inlining:::result->invoke->asNode->copyWithInputs->callTarget->result->callTarget->copyWithInputs->result->asNode->result->callTarget->replaceFirstInput->result->setUseForInlining->kind->invoke->asNode->getStackKind->if->stateAfter->invoke->stateAfter->stateAfter->duplicate->stateAfter->invoke->asNode->result->asNode->replaceFirstInput->result->setStateAfter->if->invokeWithException->exceptionEdge->invokeWithException->exceptionEdge->stateAfterException->exceptionEdge->stateAfter->newExceptionEdge->exceptionEdge->copyWithInputs->newExceptionEdge->stateAfterException->duplicateModified->setStateAfter->endNode->graph->new->EndNode->add->newExceptionEdge->setNext->exceptionMerge->addForwardEnd->exceptionObjectPhi->addInput->setExceptionEdge->return
MultiTypeGuardInlineInfo#tryToDevirtualizeInvoke(Providers)::: multi type guard inline info try to devirtualize invoke:::if->hasSingleMethod->graph->concretes->get->providers->getStampProvider->providers->getConstantReflection->devirtualizeWithTypeSwitch->else->graph->providers->getStampProvider->providers->getConstantReflection->tryToDevirtualizeMultipleMethods
MultiTypeGuardInlineInfo#tryToDevirtualizeMultipleMethods(StructuredGraph, StampProvider, ConstantReflectionProvider)::: multi type guard inline info try to devirtualize multiple methods:::methodCallTarget->invoke->callTarget->if->methodCallTarget->invokeKind->targetMethod->methodCallTarget->targetMethod->leastCommonType->getLeastCommonType->contextType->invoke->getContextType->if->leastCommonType->isInterface->targetMethod->getDeclaringClass->isAssignableFrom->baseClassTargetMethod->leastCommonType->resolveConcreteMethod->if->leastCommonType->resolveConcreteMethod->devirtualizeWithTypeSwitch
MultiTypeGuardInlineInfo#devirtualizeWithTypeSwitch(StructuredGraph, InvokeKind, ResolvedJavaMethod, StampProvider, ConstantReflectionProvider)::: multi type guard inline info devirtualize with type switch:::invocationEntry->graph->new->BeginNode->add->unknownTypeSux->createUnknownTypeSuccessor->successors->new->AbstractBeginNodeArr->createDispatchOnTypeBeforeInvoke->invocationEntry->invoke->asNode->setNext->receiver->invoke->callTarget->receiver->anchoredReceiver->InliningUtil->target->getDeclaringClass->createAnchoredReceiver->invoke->callTarget->replaceFirstInput->InliningUtil->replaceInvokeCallTarget
MultiTypeGuardInlineInfo#createUnknownTypeSuccessor(StructuredGraph)::: multi type guard inline info create unknown type successor:::return->BeginNode->graph->new->DeoptimizeNode->add->begin
MultiTypeGuardInlineInfo#toString()::: multi type guard inline info to string:::builder->shouldFallbackToInvoke->new->StringBuilder->builder->append->builder->concretes->size->append->builder->append->for->i->concretes->size->builder->append->builder->ptypes->size->append->builder->append->for->i->ptypes->size->builder->append->return->builder->toString
TypeGuardInlineInfo#numberOfMethods()::: type guard inline info number of methods:::return
TypeGuardInlineInfo#methodAt(int)::: type guard inline info method at:::return
TypeGuardInlineInfo#inlineableElementAt(int)::: type guard inline info inlineable element at:::return
TypeGuardInlineInfo#probabilityAt(int)::: type guard inline info probability at:::return
TypeGuardInlineInfo#relevanceAt(int)::: type guard inline info relevance at:::return
TypeGuardInlineInfo#setInlinableElement(int, Inlineable)::: type guard inline info set inlinable element:::
TypeGuardInlineInfo#inline(Providers, String)::: type guard inline info inline:::graph->createGuard->return->inline
TypeGuardInlineInfo#tryToDevirtualizeInvoke(Providers)::: type guard inline info try to devirtualize invoke:::graph->createGuard->InliningUtil->graph->replaceInvokeCallTarget
TypeGuardInlineInfo#createGuard(StructuredGraph, Providers)::: type guard inline info create guard:::try->context->invoke->asNode->withNodeSourcePosition->nonNullReceiver->InliningUtil->nonNullReceiver->receiverHub->graph->providers->getStampProvider->new->LoadHubNode->unique->typeHub->ConstantNode->receiverHub->stamp->providers->getConstantReflection->asObjectHub->providers->getMetaAccess->forConstant->typeCheck->CompareNode->providers->getConstantReflection->createCompareNode->guard->graph->new->FixedGuardNode->add->anchoredReceiver->InliningUtil->createAnchoredReceiver->invoke->callTarget->replaceFirstInput->graph->invoke->asNode->addBeforeFixed->catch->finally
TypeGuardInlineInfo#toString()::: type guard inline info to string:::return->type->getName->concrete->format
TypeGuardInlineInfo#shouldInline()::: type guard inline info should inline:::return->concrete->shouldBeInlined

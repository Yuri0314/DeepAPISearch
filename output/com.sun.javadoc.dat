AnnotatedType#annotations():::Returns the annotations associated with this type.:::
AnnotatedType#underlyingType():::Returns the underlying type.:::
AnnotationDesc#annotationType():::Returns the annotation type of this annotation.:::
AnnotationDesc#elementValues():::Returns this annotation's elements and their values:::
AnnotationDesc#isSynthesized():::Check for the synthesized bit on the annotation.:::
AnnotationDesc.ElementValuePair#element():::Returns the annotation type element.:::
AnnotationDesc.ElementValuePair#value():::Returns the value associated with the annotation type element.:::
AnnotationTypeDoc#elements():::Returns the elements of this annotation type:::
AnnotationTypeElementDoc#defaultValue():::Returns the default value of this element:::
AnnotationValue#value():::Returns the value:::
AnnotationValue#toString():::Returns a string representation of the value.:::
ClassDoc#isAbstract():::Return true if this class is abstract:::
ClassDoc#isSerializable():::Return true if this class implements or interface extends java.io.Serializable:::
ClassDoc#isExternalizable():::Return true if this class implements or interface extends java.io.Externalizable.:::
ClassDoc#serializationMethods():::Return the serialization methods for this class or interface.:::
ClassDoc#serializableFields():::Return the Serializable fields of this class or interface:::
ClassDoc#definesSerializableFields()::: Return true if Serializable fields are explicitly defined with  the special class member serialPersistentFields.:::
ClassDoc#superclass():::Return the superclass of this class:::
ClassDoc#superclassType():::Return the superclass of this class:::
ClassDoc#subclassOf(ClassDoc):::Test whether this class is a subclass of the specified class:::
ClassDoc#interfaces():::Return interfaces implemented by this class or interfaces extended by this interface:::
ClassDoc#interfaceTypes():::Return interfaces implemented by this class or interfaces extended by this interface:::
ClassDoc#typeParameters():::Return the formal type parameters of this class or interface:::
ClassDoc#typeParamTags():::Return the type parameter tags of this class or interface:::
ClassDoc#fields():::Return included fields in this class or interface:::
ClassDoc#fields(boolean):::Return fields in this class or interface, filtered to the specified access modifier option:::
ClassDoc#enumConstants():::Return the enum constants if this is an enum type:::
ClassDoc#methods():::Return included methods in this class or interface:::
ClassDoc#methods(boolean):::Return methods in this class or interface, filtered to the specified access modifier option:::
ClassDoc#constructors():::Return included constructors in this class:::
ClassDoc#constructors(boolean):::Return constructors in this class, filtered to the specified access modifier option:::
ClassDoc#innerClasses():::Return included nested classes and interfaces within this class or interface:::
ClassDoc#innerClasses(boolean):::Return nested classes and interfaces within this class or interface filtered to the specified access modifier option:::
ClassDoc#findClass(String):::Find the specified class or interface within the context of this class doc:::
ClassDoc#importedClasses():::Get the list of classes and interfaces declared as imported:::
ClassDoc#importedPackages():::Get the list of packages declared as imported:::
Doc#commentText():::Return the text of the comment for this doc item:::
Doc#tags():::Return all tags in this Doc item.:::
Doc#tags(String):::Return tags of the specified Tag#kind() kind in this Doc item:::
Doc#seeTags():::Return the see also tags in this Doc item.:::
Doc#inlineTags():::Return comment as an array of tags:::
Doc#firstSentenceTags():::Return the first sentence of the comment as an array of tags:::
Doc#getRawCommentText():::Return the full unprocessed text of the comment:::
Doc#setRawCommentText(String):::Set the full unprocessed text of the comment:::
Doc#name():::Returns the non-qualified name of this Doc item.:::
Doc#compareTo(Object):::Compares this doc object with the specified object for order:::
Doc#isField():::Is this Doc item a field (but not an enum constant)?:::
Doc#isEnumConstant():::Is this Doc item an enum constant?:::
Doc#isConstructor():::Is this Doc item a constructor?:::
Doc#isMethod():::Is this Doc item a method (but not a constructor or annotation type element)?:::
Doc#isAnnotationTypeElement():::Is this Doc item an annotation type element?:::
Doc#isInterface():::Is this Doc item an interface (but not an annotation type)?:::
Doc#isException():::Is this Doc item an exception class?:::
Doc#isError():::Is this Doc item an error class?:::
Doc#isEnum():::Is this Doc item an enum type?:::
Doc#isAnnotationType():::Is this Doc item an annotation type?:::
Doc#isOrdinaryClass():::Is this Doc item an ordinary class? (i.e:::
Doc#isClass():::Is this Doc item a class (and not an interface or annotation type)? This includes ordinary classes, enums, errors and exceptions.:::
Doc#isIncluded():::Return true if this Doc item is included in the result set.:::
Doc#position():::Return the source position of the first line of the corresponding declaration, or null if no position is available:::
DocErrorReporter#printError(String):::Print error message and increment error count.:::
DocErrorReporter#printError(SourcePosition, String):::Print an error message and increment error count.:::
DocErrorReporter#printWarning(String):::Print warning message and increment warning count.:::
DocErrorReporter#printWarning(SourcePosition, String):::Print warning message and increment warning count.:::
DocErrorReporter#printNotice(String):::Print a message.:::
DocErrorReporter#printNotice(SourcePosition, String):::Print a message.:::
Doclet#start(RootDoc):::Generate documentation here:::return
Doclet#optionLength(String):::Check for doclet-added options:::return
Doclet#validOptions(String[][], DocErrorReporter):::Check that options have the correct arguments:::return
Doclet#languageVersion():::Return the version of the Java Programming Language supported by this doclet:::return
ExecutableMemberDoc#thrownExceptions():::Return exceptions this method or constructor throws:::
ExecutableMemberDoc#thrownExceptionTypes():::Return exceptions this method or constructor throws.:::
ExecutableMemberDoc#isNative():::Return true if this method is native:::
ExecutableMemberDoc#isSynchronized():::Return true if this method is synchronized:::
ExecutableMemberDoc#isVarArgs():::Return true if this method was declared to take a variable number of arguments.:::
ExecutableMemberDoc#parameters():::Get argument information.:::
ExecutableMemberDoc#receiverType():::Get the receiver type of this executable element.:::
ExecutableMemberDoc#throwsTags():::Return the throws tags in this method.:::
ExecutableMemberDoc#paramTags():::Return the param tags in this method, excluding the type parameter tags.:::
ExecutableMemberDoc#typeParamTags():::Return the type parameter tags in this method.:::
ExecutableMemberDoc#signature():::Get the signature:::
ExecutableMemberDoc#flatSignature():::get flat signature:::
ExecutableMemberDoc#typeParameters():::Return the formal type parameters of this method or constructor:::
FieldDoc#type():::Get type of this field.:::
FieldDoc#isTransient():::Return true if this field is transient:::
FieldDoc#isVolatile():::Return true if this field is volatile:::
FieldDoc#serialFieldTags():::Return the serialField tags in this FieldDoc item.:::
FieldDoc#constantValue():::Get the value of a constant field.:::
FieldDoc#constantValueExpression():::Get the value of a constant field.:::
MemberDoc#isSynthetic():::Returns true if this member was synthesized by the compiler.:::
MethodDoc#isAbstract():::Return true if this method is abstract:::
MethodDoc#isDefault():::Return true if this method is default:::
MethodDoc#returnType():::Get return type.:::
MethodDoc#overriddenClass():::Return the class containing the method that this method overrides:::
MethodDoc#overriddenType():::Return the type containing the method that this method overrides:::
MethodDoc#overriddenMethod():::Return the method that this method overrides.:::
MethodDoc#overrides(MethodDoc):::Tests whether this method overrides another:::
PackageDoc#allClasses(boolean):::Get all classes and interfaces in the package, filtered to the specified access modifier option.:::
PackageDoc#allClasses():::Get all included classes and interfaces in the package:::
PackageDoc#ordinaryClasses():::Get included ordinary classes (that is, exclude exceptions, errors, enums, interfaces, and annotation types) in this package.:::
PackageDoc#exceptions():::Get included Exception classes in this package.:::
PackageDoc#errors():::Get included Error classes in this package.:::
PackageDoc#enums():::Get included enum types in this package.:::
PackageDoc#interfaces():::Get included interfaces in this package, omitting annotation types.:::
PackageDoc#annotationTypes():::Get included annotation types in this package.:::
PackageDoc#annotations():::Get the annotations of this package:::
PackageDoc#findClass(String):::Lookup a class or interface within this package.:::
Parameter#type():::Get the type of this parameter.:::
Parameter#name():::Get local name of this parameter:::
Parameter#typeName():::Get type name of this parameter:::
Parameter#toString():::Returns a string representation of the parameter:::
Parameter#annotations():::Get the annotations of this parameter:::
ParameterizedType#asClassDoc():::Return the generic class or interface that declared this type.:::
ParameterizedType#typeArguments():::Return the actual type arguments of this type:::
ParameterizedType#superclassType():::Return the class type that is a direct supertype of this one:::
ParameterizedType#interfaceTypes():::Return the interface types directly implemented by or extended by this parameterized type:::
ParameterizedType#containingType():::Return the type that contains this type as a member:::
ParamTag#parameterName():::Return the name of the parameter or type parameter associated with this ParamTag:::
ParamTag#parameterComment():::Return the parameter comment associated with this ParamTag.:::
ParamTag#isTypeParameter():::Return true if this ParamTag corresponds to a type parameter:::
ProgramElementDoc#containingClass():::Get the containing class or interface of this program element.:::
ProgramElementDoc#containingPackage():::Get the package that this program element is contained in.:::
ProgramElementDoc#qualifiedName():::Get the fully qualified name of this program element:::
ProgramElementDoc#modifierSpecifier():::Get the modifier specifier integer.:::
ProgramElementDoc#modifiers():::Get modifiers string:::
ProgramElementDoc#annotations():::Get the annotations of this program element:::
ProgramElementDoc#isPublic():::Return true if this program element is public.:::
ProgramElementDoc#isProtected():::Return true if this program element is protected.:::
ProgramElementDoc#isPrivate():::Return true if this program element is private.:::
ProgramElementDoc#isPackagePrivate():::Return true if this program element is package private.:::
ProgramElementDoc#isStatic():::Return true if this program element is static.:::
ProgramElementDoc#isFinal():::Return true if this program element is final.:::
RootDoc#options():::Command line options:::
RootDoc#specifiedPackages():::Return the packages specified on the command line:::
RootDoc#specifiedClasses():::Return the classes and interfaces specified as source file names on the command line.:::
RootDoc#classes():::Return the included       classes and interfaces in all packages.:::
RootDoc#packageNamed(String):::Return a PackageDoc for the specified package name.:::
RootDoc#classNamed(String):::Return a ClassDoc for the specified class or interface name.:::
SeeTag#label():::Get the label of the @see tag:::
SeeTag#referencedPackage():::Get the package doc when @see references only a package:::
SeeTag#referencedClassName():::Get the class or interface name of the @see reference:::
SeeTag#referencedClass():::Get the class doc referenced by the class name part of @see:::
SeeTag#referencedMemberName():::Get the field, constructor or method substring of the @see reference:::
SeeTag#referencedMember():::Get the member doc for the field, constructor or method referenced by @see:::
SerialFieldTag#fieldName():::Return the serializable field name.:::
SerialFieldTag#fieldType():::Return the field type string.:::
SerialFieldTag#fieldTypeDoc():::Return the ClassDoc for field type.:::
SerialFieldTag#description():::Return the field comment:::
SerialFieldTag#compareTo(Object):::Compares this Object with the specified Object for order:::
SourcePosition#file():::The source file:::
SourcePosition#line():::The line in the source file:::
SourcePosition#column():::The column in the source file:::
SourcePosition#toString():::Convert the source position to the form "Filename:line".:::
Tag#name():::Return the name of this tag:::
Tag#holder():::Return the containing Doc of this Tag element.:::
Tag#kind():::Return the kind of this tag:::
Tag#text():::Return the text of this tag, that is, the portion beyond tag name.:::
Tag#toString():::Convert this object to a string.:::
Tag#inlineTags():::For a documentation comment with embedded  tags, return an array of Tag objects:::
Tag#firstSentenceTags():::Return the first sentence of the comment as an array of tags:::
Tag#position():::Return the source position of this tag.:::
ThrowsTag#exceptionName():::Return the name of the exception associated with this ThrowsTag.:::
ThrowsTag#exceptionComment():::Return the exception comment associated with this ThrowsTag.:::
ThrowsTag#exception():::Return a ClassDoc that represents the exception:::
ThrowsTag#exceptionType():::Return the type of the exception associated with this ThrowsTag:::
Type#typeName():::Return unqualified name of type excluding any dimension information:::
Type#qualifiedTypeName():::Return qualified name of type excluding any dimension information:::
Type#simpleTypeName():::Return the simple name of this type excluding any dimension information:::
Type#dimension():::Return the type's dimension information, as a string:::
Type#toString():::Return a string representation of the type:::
Type#isPrimitive():::Return true if this type represents a primitive type.:::
Type#asClassDoc():::Return this type as a ClassDoc if it represents a class or interface:::
Type#asParameterizedType():::Return this type as a ParameterizedType if it represents an invocation of a generic class or interface:::
Type#asTypeVariable():::Return this type as a TypeVariable if it represents a type variable:::
Type#asWildcardType():::Return this type as a WildcardType if it represents a wildcard type.:::
Type#asAnnotatedType():::Returns this type as a AnnotatedType if it represents an annotated type.:::
Type#asAnnotationTypeDoc():::Return this type as an AnnotationTypeDoc if it represents an annotation type:::
Type#getElementType():::If this type is an array type, return the element type of the array:::
TypeVariable#bounds():::Return the bounds of this type variable:::
TypeVariable#owner():::Return the class, interface, method, or constructor within which this type variable is declared.:::
TypeVariable#annotations():::Get the annotations of this program element:::
WildcardType#extendsBounds():::Return the upper bounds of this wildcard type argument as given by the extends clause:::
WildcardType#superBounds():::Return the lower bounds of this wildcard type argument as given by the super clause:::

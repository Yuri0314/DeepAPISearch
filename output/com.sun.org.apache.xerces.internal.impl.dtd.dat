BalancedDTDGrammar#startContentModel(String, Augmentations):::The start of a content model:::initializeContentModelStacks->super->startContentModel
BalancedDTDGrammar#startGroup(Augmentations):::A start of either a mixed or children content model:::initializeContentModelStacks
BalancedDTDGrammar#pcdata(Augmentations):::The appearance of "#PCDATA" within a group signifying a mixed content model:::
BalancedDTDGrammar#element(String, Augmentations):::A referenced element in a mixed or children content model.:::addUniqueLeafNode->addToCurrentGroup
BalancedDTDGrammar#separator(short, Augmentations):::The separator between choices or sequences of a mixed or children content model.:::if->else->if
BalancedDTDGrammar#occurrence(short, Augmentations):::The occurrence count for a child in a children content model or for the mixed content model group.:::if->currentIndex->if->addContentSpecNode->else->if->addContentSpecNode->else->if->addContentSpecNode
BalancedDTDGrammar#endGroup(Augmentations):::The end of a group for mixed or children content models.:::length->group->addContentSpecNodes->addUniqueLeafNode->addToCurrentGroup
BalancedDTDGrammar#endDTD(Augmentations):::The end of the DTD.:::super->endDTD
BalancedDTDGrammar#addContentSpecToElement(XMLElementDecl):::Adds the content spec to the given element declaration.:::contentSpec->setContentSpecIndex
DTDGrammar#getElementDeclIsExternal(int):::Returns true if the specified element declaration is external.:::if->return->chunk->index->return
DTDGrammar#getAttributeDeclIsExternal(int):::Returns true if the specified attribute declaration is external.:::if->return->chunk->index->return
DTDGrammar#startDTD(XMLLocator, Augmentations):::The start of the DTD.:::
DTDGrammar#startParameterEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies of the start of an entity:::if->entityarray->new->booleanArr->System->arraycopy
DTDGrammar#startExternalSubset(XMLResourceIdentifier, Augmentations):::The start of the DTD external subset.:::
DTDGrammar#endParameterEntity(String, Augmentations):::This method notifies the end of an entity:::
DTDGrammar#endExternalSubset(Augmentations):::The end of the DTD external subset.:::
DTDGrammar#elementDecl(String, String, Augmentations):::An element declaration.:::tmpElementDecl->fElementDeclTab->get->if->if->getElementDeclIndex->else->return->else->createElementDecl->elementDecl->new->XMLElementDecl->fQName->setValues->setValues->if->contentModel->equals->else->if->contentModel->equals->else->if->contentModel->startsWith->if->contentModel->indexOf->else->put->addContentSpecToElement->if->println->println->setElementDecl->chunk->index->ensureElementDeclCapacity
DTDGrammar#attributeDecl(String, String, String, String[], String, XMLString, XMLString, Augmentations):::An attribute declaration.:::if->containsKey->else->createElementDecl->elementDecl->new->XMLElementDecl->setValues->put->setElementDecl->elementIndex->getElementDeclIndex->if->getAttributeDeclIndex->return->createAttributeDecl->fSimpleType->clear->if->if->defaultType->equals->else->if->defaultType->equals->else->if->defaultType->equals->if->defaultValue->toString->println->defaultValue->toString->nonNormalizedDefaultValue->toString->if->type->equals->else->if->type->equals->else->if->type->startsWith->if->type->indexOf->else->if->type->equals->else->if->type->equals->else->if->type->equals->else->if->type->equals->else->if->type->startsWith->else->if->type->startsWith->else->println->fQName->setValues->fAttributeDecl->setValues->setAttributeDecl->chunk->index->ensureAttributeDeclCapacity
DTDGrammar#internalEntityDecl(String, XMLString, XMLString, Augmentations):::An internal entity declaration.:::entityIndex->getEntityDeclIndex->if->createEntityDecl->isPE->name->startsWith->inExternal->entityDecl->new->XMLEntityDecl->entityDecl->text->toString->setValues->setEntityDecl
DTDGrammar#externalEntityDecl(String, XMLResourceIdentifier, Augmentations):::An external entity declaration.:::entityIndex->getEntityDeclIndex->if->createEntityDecl->isPE->name->startsWith->inExternal->entityDecl->new->XMLEntityDecl->entityDecl->identifier->getPublicId->identifier->getLiteralSystemId->identifier->getBaseSystemId->setValues->setEntityDecl
DTDGrammar#unparsedEntityDecl(String, XMLResourceIdentifier, String, Augmentations):::An unparsed entity declaration.:::entityDecl->new->XMLEntityDecl->isPE->name->startsWith->inExternal->entityDecl->identifier->getPublicId->identifier->getLiteralSystemId->identifier->getBaseSystemId->setValues->entityIndex->getEntityDeclIndex->if->createEntityDecl->setEntityDecl
DTDGrammar#notationDecl(String, XMLResourceIdentifier, Augmentations):::A notation declaration:::notationDecl->new->XMLNotationDecl->notationDecl->identifier->getPublicId->identifier->getLiteralSystemId->identifier->getBaseSystemId->setValues->notationIndex->getNotationDeclIndex->if->createNotationDecl->setNotationDecl
DTDGrammar#endDTD(Augmentations):::The end of the DTD.:::if->fGrammarDescription->getRootName->chunk->index->currName->size->elements->new->ArrayList<>->for->i->fGrammarDescription->setPossibleRoots
DTDGrammar#textDecl(String, String, Augmentations):::Notifies of the presence of a TextDecl line in an entity:::
DTDGrammar#comment(XMLString, Augmentations):::A comment.:::
DTDGrammar#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::
DTDGrammar#startAttlist(String, Augmentations):::The start of an attribute list.:::
DTDGrammar#endAttlist(Augmentations):::The end of an attribute list.:::
DTDGrammar#startConditional(short, Augmentations):::The start of a conditional section.:::
DTDGrammar#ignoredCharacters(XMLString, Augmentations):::Characters within an IGNORE conditional section.:::
DTDGrammar#endConditional(Augmentations):::The end of a conditional section.:::
DTDGrammar#startContentModel(String, Augmentations):::The start of a content model:::elementDecl->get->if->initializeContentModelStack
DTDGrammar#startGroup(Augmentations):::A start of either a mixed or children content model:::initializeContentModelStack
DTDGrammar#pcdata(Augmentations):::The appearance of "#PCDATA" within a group signifying a mixed content model:::
DTDGrammar#element(String, Augmentations):::A referenced element in a mixed or children content model.:::if->if->addUniqueLeafNode->else->addUniqueLeafNode->addContentSpecNode->else->addContentSpecNode
DTDGrammar#separator(short, Augmentations):::The separator between choices or sequences of a mixed or children content model.:::if->if->if->addContentSpecNode->else->if->if->addContentSpecNode
DTDGrammar#occurrence(short, Augmentations):::The occurrence count for a child in a children content model or for the mixed content model group.:::if->if->addContentSpecNode->else->if->addContentSpecNode->else->if->addContentSpecNode
DTDGrammar#endGroup(Augmentations):::The end of a group for mixed or children content models.:::if->if->addContentSpecNode->nodeIndex
DTDGrammar#any(Augmentations):::A content model of ANY.:::
DTDGrammar#empty(Augmentations):::A content model of EMPTY.:::
DTDGrammar#endContentModel(Augmentations):::The end of a content model.:::
DTDGrammar#isNamespaceAware():::Returns true if this grammar is namespace aware.:::return
DTDGrammar#getSymbolTable():::Returns the symbol table.:::return
DTDGrammar#getFirstElementDeclIndex():::Returns the index of the first element declaration:::return
DTDGrammar#getNextElementDeclIndex(int):::Returns the next index of the element declaration following the specified element declaration.:::return
DTDGrammar#getElementDeclIndex(String):::getElementDeclIndex:::mapping->fElementIndexMap->get->if->return
DTDGrammar#getElementDeclIndex(QName):::Returns the element decl index.:::return->getElementDeclIndex
DTDGrammar#getElementDecl(int, XMLElementDecl):::getElementDecl:::if->return->chunk->index->setValues->if->else->if->getElementContentModelValidator->return
DTDGrammar#getFirstAttributeDeclIndex(int):::getFirstAttributeDeclIndex:::chunk->index->return
DTDGrammar#getNextAttributeDeclIndex(int):::getNextAttributeDeclIndex:::chunk->index->return
DTDGrammar#getAttributeDecl(int, XMLAttributeDecl):::getAttributeDecl:::if->return->chunk->index->setValues->attributeType->isList->if->else->setValues->return
DTDGrammar#isCDATAAttribute(QName, QName):::Returns whether the given attribute is of type CDATA or not:::elDeclIdx->getElementDeclIndex->if->getAttributeDecl->return->return
DTDGrammar#getEntityDeclIndex(String):::getEntityDeclIndex:::if->fEntityIndexMap->get->return->return->fEntityIndexMap->get
DTDGrammar#getEntityDecl(int, XMLEntityDecl):::getEntityDecl:::if->return->chunk->index->entityDecl->setValues->return
DTDGrammar#getNotationDeclIndex(String):::getNotationDeclIndex:::if->fNotationIndexMap->get->return->return->fNotationIndexMap->get
DTDGrammar#getNotationDecl(int, XMLNotationDecl):::getNotationDecl:::if->return->chunk->index->notationDecl->setValues->return
DTDGrammar#getContentSpec(int, XMLContentSpec):::getContentSpec:::if->return->chunk->index->return
DTDGrammar#getContentSpecIndex(int):::Returns the index to the content spec for the given element declaration, or -1 if the element declaration index was invalid.:::if->return->chunk->index->return
DTDGrammar#getContentSpecAsString(int):::getContentSpecAsString:::if->return->chunk->index->contentSpecIndex->contentSpec->new->XMLContentSpec->if->getContentSpec->str->new->StringBuffer->parentContentSpecType->nextContentSpec->switch->str->append->if->str->append->else->str->append->str->append->break->getContentSpec->if->str->append->str->append->str->append->else->if->str->append->appendContentSpec->str->append->else->appendContentSpec->str->append->break->getContentSpec->if->str->append->if->str->append->else->if->str->append->append->else->if->str->append->else->appendContentSpec->str->append->else->if->str->append->appendContentSpec->str->append->else->appendContentSpec->str->append->break->getContentSpec->if->str->append->if->str->append->else->if->str->append->append->else->if->str->append->else->str->append->str->append->else->if->str->append->appendContentSpec->str->append->else->appendContentSpec->str->append->break->appendContentSpec->break->str->append->if->str->append->str->append->break->str->append->str->append->break->str->append->break->str->append->return->str->toString->return
DTDGrammar#addContentSpecToElement(XMLElementDecl):::Adds the content spec to the given element declaration.:::if->if->pcdata->addUniqueLeafNode->if->else->addContentSpecNode->setContentSpecIndex
DTDGrammar#getElementContentModelValidator(int):::getElementContentModelValidator:::chunk->index->contentModel->if->return->contentType->if->return->contentSpecIndex->contentSpec->new->XMLContentSpec->getContentSpec->if->children->new->ChildrenList->contentSpecTree->new->MixedContentModel->else->if->createChildModel->else->throw->new->RuntimeException->return
DTDGrammar#addContentSpecNode(short, String):::Create an XMLContentSpec for a single non-leaf:::contentSpecIndex->createContentSpec->fContentSpec->setValues->setContentSpec->return
DTDGrammar#addUniqueLeafNode(String):::create an XMLContentSpec for a leaf:::contentSpecIndex->createContentSpec->fContentSpec->setValues->setContentSpec->return
DTDGrammar#addContentSpecNode(short, int, int):::Create an XMLContentSpec for a two child leaf:::contentSpecIndex->createContentSpec->leftIntArray->new->intArr->rightIntArray->new->intArr->fContentSpec->setValues->setContentSpec->return
DTDGrammar#initializeContentModelStack():::Initialize content model stack.:::if->new->shortArr->new->intArr->new->intArr->else->if->newStack->new->shortArr->System->arraycopy->newIntStack->new->intArr->System->arraycopy->new->intArr->System->arraycopy
DTDGrammarBucket#putGrammar(DTDGrammar):::Puts the specified grammar into the grammar pool and associate it to a root element name (this being internal, the lack of generality is irrelevant).:::desc->grammar->getGrammarDescription->fGrammars->put
XML11NSDTDValidator#startNamespaceScope(QName, XMLAttributes, Augmentations):::Bind namespaces:::fNamespaceContext->pushContext->if->fErrorReporter->new->ObjectArr->reportError->length->attributes->getLength->for->i->prefix->fNamespaceContext->getURI->if->if->fErrorReporter->new->ObjectArr->reportError->for->i->attrCount->attributes->getLength->for->i
XML11NSDTDValidator#endNamespaceScope(QName, Augmentations, boolean):::Handles end element.:::eprefix->fNamespaceContext->getURI->if->if->if->fDocumentHandler->endElement->fNamespaceContext->popContext
XMLAttributeDecl#setValues(QName, XMLSimpleType, boolean):::setValues:::setValues->setValues
XMLAttributeDecl#clear():::clear:::clear->clear
XMLContentSpec#clear():::Clears the values.:::
XMLContentSpec#setValues(short, Object, Object):::Sets the values.:::
XMLContentSpec#setValues(XMLContentSpec):::Sets the values of the specified content spec.:::
XMLContentSpec#setValues(XMLContentSpec.Provider, int):::Sets the values from the values specified by the given content spec provider and identifier:::if->provider->getContentSpec->clear
XMLContentSpec#hashCode():::Returns a hash code for this node.:::return->value->hashCode->otherValue->hashCode
XMLContentSpec#equals(Object):::Returns true if the two objects are equal.:::if->contentSpec->return->return
XMLContentSpec.Provider#getContentSpec(int, XMLContentSpec):::Fills in the provided content spec structure with content spec information for a unique identifier.:::
XMLDTDDescription#setRootName(String):::Set the root name *:::
XMLDTDDescription#setPossibleRoots(List):::Set possible roots *:::
XMLDTDDescription#equals(Object):::Compares this grammar with the given grammar:::if->return->if->getGrammarType->getGrammarType->equals->return->dtdDesc->if->if->equals->return->else->if->contains->return->else->if->if->if->fPossibleRoots->contains->return->else->if->return->else->found->foreach->contains->if->break->if->return->if->if->fExpandedSystemId->equals->return->else->if->return->if->if->fPublicId->equals->return->else->if->return->return
XMLDTDDescription#hashCode():::Returns the hash code of this grammar Because our .equals method is so complex, we just return a very simple hash that might avoid calls to the equals method a bit...:::if->return->fExpandedSystemId->hashCode->if->return->fPublicId->hashCode->return
XMLDTDLoader#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->LOADER_RECOGNIZED_FEATURES->clone
XMLDTDLoader#setFeature(String, boolean):::Sets the state of a feature:::if->featureId->equals->else->if->featureId->equals->else->if->featureId->equals->else->if->featureId->equals->fDTDScanner->setFeature->else->if->featureId->equals->else->if->featureId->equals->else->throw->new->XMLConfigurationException
XMLDTDLoader#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->LOADER_RECOGNIZED_PROPERTIES->clone
XMLDTDLoader#getProperty(String):::Returns the state of a property.:::if->propertyId->equals->return->else->if->propertyId->equals->return->else->if->propertyId->equals->return->fErrorReporter->getErrorHandler->else->if->propertyId->equals->return->else->if->propertyId->equals->return->getLocale->else->if->propertyId->equals->return->else->if->propertyId->equals->return->throw->new->XMLConfigurationException
XMLDTDLoader#setProperty(String, Object):::Sets the value of a property:::if->propertyId->equals->fDTDScanner->setProperty->fEntityManager->setProperty->else->if->propertyId->equals->if->fErrorReporter->getMessageFormatter->xmft->new->XMLMessageFormatter->fErrorReporter->putMessageFormatter->fErrorReporter->putMessageFormatter->fDTDScanner->setProperty->fEntityManager->setProperty->else->if->propertyId->equals->fErrorReporter->setProperty->else->if->propertyId->equals->fEntityManager->setProperty->else->if->propertyId->equals->setLocale->else->if->propertyId->equals->else->throw->new->XMLConfigurationException
XMLDTDLoader#getFeature(String):::Returns the state of a feature.:::if->featureId->equals->return->else->if->featureId->equals->return->else->if->featureId->equals->return->else->if->featureId->equals->return->fDTDScanner->getFeature->else->if->featureId->equals->return->else->if->featureId->equals->return->throw->new->XMLConfigurationException
XMLDTDLoader#setLocale(Locale):::Set the locale to use for messages.:::fErrorReporter->setLocale
XMLDTDLoader#getLocale():::Return the Locale the XMLGrammarLoader is using.:::return
XMLDTDLoader#setErrorHandler(XMLErrorHandler):::Sets the error handler.:::fErrorReporter->setProperty
XMLDTDLoader#getErrorHandler():::Returns the registered error handler.:::return->fErrorReporter->getErrorHandler
XMLDTDLoader#setEntityResolver(XMLEntityResolver):::Sets the entity resolver.:::fEntityManager->setProperty
XMLDTDLoader#getEntityResolver():::Returns the registered entity resolver.:::return
XMLDTDLoader#loadGrammar(XMLInputSource):::Returns a Grammar object by parsing the contents of the entity pointed to by source.:::reset->eid->XMLEntityManager->source->getSystemId->source->getBaseSystemId->expandSystemId->desc->source->getPublicId->source->getSystemId->source->getBaseSystemId->new->XMLDTDDescription->if->new->DTDGrammar->else->new->BalancedDTDGrammar->new->DTDGrammarBucket->fGrammarBucket->setStandalone->fGrammarBucket->setActiveGrammar->try->fDTDScanner->setInputSource->fDTDScanner->scanDTDExternalSubset->catch->finally->fEntityManager->closeReaders->if->fGrammarPool->new->GrammarArr->cacheGrammars->return
XMLDTDLoader#loadGrammarWithContext(XMLDTDValidator, String, String, String, String, String):::Parse a DTD internal and/or external subset and insert the content into the existing DTD grammar owned by the given DTDValidator.:::grammarBucket->validator->getGrammarBucket->activeGrammar->grammarBucket->getActiveGrammar->if->activeGrammar->isImmutable->fEntityManager->getScannerVersion->setScannerVersion->reset->try->if->buffer->internalSubset->length->new->StringBuffer->buffer->append->append->is->buffer->toString->new->StringReader->new->XMLInputSource->fEntityManager->startDocumentEntity->fDTDScanner->scanDTDInternalSubset->if->desc->new->XMLDTDDescription->source->fEntityManager->resolveEntity->fDTDScanner->setInputSource->fDTDScanner->scanDTDExternalSubset->catch->finally->fEntityManager->closeReaders
XMLDTDProcessor#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->RECOGNIZED_FEATURES->clone
XMLDTDProcessor#setFeature(String, boolean):::Sets the state of a feature:::
XMLDTDProcessor#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->RECOGNIZED_PROPERTIES->clone
XMLDTDProcessor#setProperty(String, Object):::Sets the value of a property:::
XMLDTDProcessor#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return
XMLDTDProcessor#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return
XMLDTDProcessor#setDTDHandler(XMLDTDHandler):::Sets the DTD handler.:::
XMLDTDProcessor#getDTDHandler():::Returns the DTD handler.:::return
XMLDTDProcessor#setDTDContentModelHandler(XMLDTDContentModelHandler):::Sets the DTD content model handler.:::
XMLDTDProcessor#getDTDContentModelHandler():::Gets the DTD content model handler.:::return
XMLDTDProcessor#startExternalSubset(XMLResourceIdentifier, Augmentations):::The start of the DTD external subset.:::if->fDTDGrammar->startExternalSubset->if->fDTDHandler->startExternalSubset
XMLDTDProcessor#endExternalSubset(Augmentations):::The end of the DTD external subset.:::if->fDTDGrammar->endExternalSubset->if->fDTDHandler->endExternalSubset
XMLDTDProcessor#checkStandaloneEntityRef(String, DTDGrammar, XMLEntityDecl, XMLErrorReporter):::Check standalone entity reference:::entIndex->grammar->getEntityDeclIndex->if->grammar->getEntityDecl->if->errorReporter->new->ObjectArr->reportError
XMLDTDProcessor#comment(XMLString, Augmentations):::A comment.:::if->fDTDGrammar->comment->if->fDTDHandler->comment
XMLDTDProcessor#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::if->fDTDGrammar->processingInstruction->if->fDTDHandler->processingInstruction
XMLDTDProcessor#startDTD(XMLLocator, Augmentations):::The start of the DTD.:::fNDataDeclNotations->clear->fDTDElementDecls->clear->if->fGrammarBucket->getActiveGrammar->isImmutable->fGrammarBucket->getActiveGrammar->if->fDTDGrammar->startDTD->if->fDTDHandler->startDTD
XMLDTDProcessor#ignoredCharacters(XMLString, Augmentations):::Characters within an IGNORE conditional section.:::if->fDTDGrammar->ignoredCharacters->if->fDTDHandler->ignoredCharacters
XMLDTDProcessor#textDecl(String, String, Augmentations):::Notifies of the presence of a TextDecl line in an entity:::if->fDTDGrammar->textDecl->if->fDTDHandler->textDecl
XMLDTDProcessor#startParameterEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies of the start of a parameter entity:::if->fGrammarBucket->getStandalone->checkStandaloneEntityRef->if->fDTDGrammar->startParameterEntity->if->fDTDHandler->startParameterEntity
XMLDTDProcessor#endParameterEntity(String, Augmentations):::This method notifies the end of a parameter entity:::if->fDTDGrammar->endParameterEntity->if->fDTDHandler->endParameterEntity
XMLDTDProcessor#elementDecl(String, String, Augmentations):::An element declaration.:::if->if->fDTDElementDecls->contains->fErrorReporter->new->ObjectArr->reportError->else->fDTDElementDecls->add->if->fDTDGrammar->elementDecl->if->fDTDHandler->elementDecl
XMLDTDProcessor#startAttlist(String, Augmentations):::The start of an attribute list.:::if->fDTDGrammar->startAttlist->if->fDTDHandler->startAttlist
XMLDTDProcessor#attributeDecl(String, String, String, String[], String, XMLString, XMLString, Augmentations):::An attribute declaration.:::if->normalizeDefaultAttrValue->if->duplicateAttributeDef->grammar->fGrammarBucket->getActiveGrammar->elementIndex->grammar->getElementDeclIndex->if->grammar->getAttributeDeclIndex->if->fErrorReporter->new->ObjectArr->reportError->if->if->if->fErrorReporter->new->ObjectArr->reportError->if->fTableOfIDAttributeNames->containsKey->fTableOfIDAttributeNames->put->else->if->previousIDAttributeName->fTableOfIDAttributeNames->get->fErrorReporter->new->ObjectArr->reportError->if->for->i->if->fTableOfNOTATIONAttributeNames->containsKey->fTableOfNOTATIONAttributeNames->put->else->if->previousNOTATIONAttributeName->fTableOfNOTATIONAttributeNames->get->fErrorReporter->new->ObjectArr->reportError->if->for->i->ok->if->value->defaultValue->toString->if->tokenizer->new->StringTokenizer->if->tokenizer->hasMoreTokens->while->nmtoken->tokenizer->nextToken->if->if->isValidNmtoken->break->else->if->if->isValidName->break->if->tokenizer->hasMoreTokens->break->else->if->if->isValidName->else->if->if->isValidNmtoken->if->for->i->if->fErrorReporter->new->ObjectArr->reportError->if->fDTDGrammar->attributeDecl->if->fDTDHandler->attributeDecl
XMLDTDProcessor#endAttlist(Augmentations):::The end of an attribute list.:::if->fDTDGrammar->endAttlist->if->fDTDHandler->endAttlist
XMLDTDProcessor#internalEntityDecl(String, XMLString, XMLString, Augmentations):::An internal entity declaration.:::grammar->fGrammarBucket->getActiveGrammar->index->grammar->getEntityDeclIndex->if->if->fDTDGrammar->internalEntityDecl->if->fDTDHandler->internalEntityDecl
XMLDTDProcessor#externalEntityDecl(String, XMLResourceIdentifier, Augmentations):::An external entity declaration.:::grammar->fGrammarBucket->getActiveGrammar->index->grammar->getEntityDeclIndex->if->if->fDTDGrammar->externalEntityDecl->if->fDTDHandler->externalEntityDecl
XMLDTDProcessor#unparsedEntityDecl(String, XMLResourceIdentifier, String, Augmentations):::An unparsed entity declaration.:::if->fNDataDeclNotations->put->if->fDTDGrammar->unparsedEntityDecl->if->fDTDHandler->unparsedEntityDecl
XMLDTDProcessor#notationDecl(String, XMLResourceIdentifier, Augmentations):::A notation declaration:::if->grammar->fGrammarBucket->getActiveGrammar->if->grammar->getNotationDeclIndex->fErrorReporter->new->ObjectArr->reportError->if->fDTDGrammar->notationDecl->if->fDTDHandler->notationDecl
XMLDTDProcessor#startConditional(short, Augmentations):::The start of a conditional section.:::if->fDTDGrammar->startConditional->if->fDTDHandler->startConditional
XMLDTDProcessor#endConditional(Augmentations):::The end of a conditional section.:::if->fDTDGrammar->endConditional->if->fDTDHandler->endConditional
XMLDTDProcessor#endDTD(Augmentations):::The end of the DTD.:::if->fDTDGrammar->endDTD->if->fGrammarPool->new->GrammarArr->cacheGrammars->if->grammar->fGrammarBucket->getActiveGrammar->foreach->fNDataDeclNotations->entrySet->notation->entry->getValue->if->grammar->getNotationDeclIndex->entity->entry->getKey->fErrorReporter->new->ObjectArr->reportError->foreach->fNotationEnumVals->entrySet->notation->entry->getKey->if->grammar->getNotationDeclIndex->attributeName->entry->getValue->fErrorReporter->new->ObjectArr->reportError->foreach->fTableOfNOTATIONAttributeNames->entrySet->elementName->entry->getKey->elementIndex->grammar->getElementDeclIndex->if->grammar->getContentSpecType->attributeName->entry->getValue->fErrorReporter->new->ObjectArr->reportError->if->checkDeclaredElements->if->fDTDHandler->endDTD
XMLDTDProcessor#startContentModel(String, Augmentations):::The start of a content model:::if->fMixedElementTypes->clear->if->fDTDGrammar->startContentModel->if->fDTDContentModelHandler->startContentModel
XMLDTDProcessor#any(Augmentations):::A content model of ANY.:::if->fDTDGrammar->any->if->fDTDContentModelHandler->any
XMLDTDProcessor#empty(Augmentations):::A content model of EMPTY.:::if->fDTDGrammar->empty->if->fDTDContentModelHandler->empty
XMLDTDProcessor#startGroup(Augmentations):::A start of either a mixed or children content model:::if->fDTDGrammar->startGroup->if->fDTDContentModelHandler->startGroup
XMLDTDProcessor#pcdata(Augmentations):::The appearance of "#PCDATA" within a group signifying a mixed content model:::if->fDTDGrammar->pcdata->if->fDTDContentModelHandler->pcdata
XMLDTDProcessor#element(String, Augmentations):::A referenced element in a mixed or children content model.:::if->if->fMixedElementTypes->contains->fErrorReporter->new->ObjectArr->reportError->else->fMixedElementTypes->add->if->fDTDGrammar->element->if->fDTDContentModelHandler->element
XMLDTDProcessor#separator(short, Augmentations):::The separator between choices or sequences of a mixed or children content model.:::if->fDTDGrammar->separator->if->fDTDContentModelHandler->separator
XMLDTDProcessor#occurrence(short, Augmentations):::The occurrence count for a child in a children content model or for the mixed content model group.:::if->fDTDGrammar->occurrence->if->fDTDContentModelHandler->occurrence
XMLDTDProcessor#endGroup(Augmentations):::The end of a group for mixed or children content models.:::if->fDTDGrammar->endGroup->if->fDTDContentModelHandler->endGroup
XMLDTDProcessor#endContentModel(Augmentations):::The end of a content model.:::if->fDTDGrammar->endContentModel->if->fDTDContentModelHandler->endContentModel
XMLDTDValidator#getRecognizedFeatures():::Returns a list of feature identifiers that are recognized by this component:::return->RECOGNIZED_FEATURES->clone
XMLDTDValidator#setFeature(String, boolean):::Sets the state of a feature:::
XMLDTDValidator#getRecognizedProperties():::Returns a list of property identifiers that are recognized by this component:::return->RECOGNIZED_PROPERTIES->clone
XMLDTDValidator#setProperty(String, Object):::Sets the value of a property:::
XMLDTDValidator#getFeatureDefault(String):::Returns the default state for a feature, or null if this component does not want to report a default value for this feature.:::for->i->return
XMLDTDValidator#getPropertyDefault(String):::Returns the default state for a property, or null if this component does not want to report a default value for this property.:::for->i->return
XMLDTDValidator#setDocumentHandler(XMLDocumentHandler):::Sets the document handler to receive information about the document.:::
XMLDTDValidator#getDocumentHandler():::Returns the document handler:::return
XMLDTDValidator#setDocumentSource(XMLDocumentSource):::Sets the document source:::
XMLDTDValidator#getDocumentSource():::Returns the document source:::return
XMLDTDValidator#startDocument(XMLLocator, String, NamespaceContext, Augmentations):::The start of the document.:::if->grammars->fGrammarPool->retrieveInitialGrammarSet->length->for->i->if->fDocumentHandler->startDocument
XMLDTDValidator#xmlDecl(String, String, String, Augmentations):::Notifies of the presence of an XMLDecl line in the document:::fGrammarBucket->standalone->equals->setStandalone->if->fDocumentHandler->xmlDecl
XMLDTDValidator#doctypeDecl(String, String, String, Augmentations):::Notifies of the presence of the DOCTYPE line in the document.:::fRootElement->setValues->eid->try->XMLEntityManager->fDocLocation->getExpandedSystemId->expandSystemId->catch->finally->grammarDesc->fDocLocation->getExpandedSystemId->new->XMLDTDDescription->fGrammarBucket->getGrammar->if->if->fGrammarPool->retrieveGrammar->if->if->new->DTDGrammar->else->new->BalancedDTDGrammar->else->fValidationManager->setCachedDTD->fGrammarBucket->setActiveGrammar->if->fDocumentHandler->doctypeDecl
XMLDTDValidator#startElement(QName, XMLAttributes, Augmentations):::The start of an element.:::handleStartElement->if->fDocumentHandler->startElement
XMLDTDValidator#emptyElement(QName, XMLAttributes, Augmentations):::An empty element.:::removed->handleStartElement->if->fDocumentHandler->emptyElement->if->handleEndElement
XMLDTDValidator#characters(XMLString, Augmentations):::Character content.:::callNextCharacters->allWhiteSpace->for->i->if->if->fDocumentHandler->ignorableWhitespace->if->if->if->fGrammarBucket->getStandalone->fDTDGrammar->getElementDeclIsExternal->if->fErrorReporter->reportError->if->charDataInContent->if->augs->getItem->fErrorReporter->new->ObjectArr->fDTDGrammar->getContentSpecAsString->reportError->if->charDataInContent->if->fDocumentHandler->characters
XMLDTDValidator#ignorableWhitespace(XMLString, Augmentations):::Ignorable whitespace:::if->fDocumentHandler->ignorableWhitespace
XMLDTDValidator#endElement(QName, Augmentations):::The end of an element.:::handleEndElement
XMLDTDValidator#startCDATA(Augmentations):::The start of a CDATA section.:::if->charDataInContent->if->fDocumentHandler->startCDATA
XMLDTDValidator#endCDATA(Augmentations):::The end of a CDATA section.:::if->fDocumentHandler->endCDATA
XMLDTDValidator#endDocument(Augmentations):::The end of the document.:::if->fDocumentHandler->endDocument
XMLDTDValidator#comment(XMLString, Augmentations):::A comment.:::if->fDTDGrammar->getElementDecl->if->fErrorReporter->new->ObjectArr->reportError->if->fDocumentHandler->comment
XMLDTDValidator#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::if->fDTDGrammar->getElementDecl->if->fErrorReporter->new->ObjectArr->reportError->if->fDocumentHandler->processingInstruction
XMLDTDValidator#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies the start of a general entity:::if->fDTDGrammar->getElementDecl->if->fErrorReporter->new->ObjectArr->reportError->if->fGrammarBucket->getStandalone->XMLDTDLoader->checkStandaloneEntityRef->if->fDocumentHandler->startGeneralEntity
XMLDTDValidator#endGeneralEntity(String, Augmentations):::This method notifies the end of a general entity:::if->fDocumentHandler->endGeneralEntity
XMLDTDValidator#textDecl(String, String, Augmentations):::Notifies of the presence of a TextDecl line in an entity:::if->fDocumentHandler->textDecl
XMLDTDValidator#addDTDDefaultAttrsAndValidate(QName, int, XMLAttributes):::Add default attributes and validate.:::if->return->attlistIndex->fDTDGrammar->getFirstAttributeDeclIndex->while->fDTDGrammar->getAttributeDecl->if->if->elementDecl->new->XMLElementDecl->fDTDGrammar->getElementDecl->println->attributes->getLength->println->attPrefix->attLocalpart->attRawName->attType->getAttributeTypeName->attDefaultType->attValue->if->specified->required->cdata->if->attrCount->attributes->getLength->for->i->if->if->if->args->fErrorReporter->reportError->else->if->if->fGrammarBucket->getStandalone->if->fDTDGrammar->getAttributeDeclIsExternal->args->fErrorReporter->reportError->if->index->attRawName->indexOf->if->attRawName->substring->fSymbolTable->addSymbol->attRawName->substring->fSymbolTable->addSymbol->fTempQName->setValues->attributes->addAttribute->fDTDGrammar->getNextAttributeDeclIndex->attrCount->attributes->getLength->for->i
XMLDTDValidator#getExternalEntityRefInAttrValue(String):::Checks entities in attribute values for standalone VC.:::valLength->nonNormalizedValue->length->ampIndex->nonNormalizedValue->indexOf->while->if->nonNormalizedValue->charAt->semicolonIndex->nonNormalizedValue->indexOf->entityName->nonNormalizedValue->substring->fSymbolTable->addSymbol->entIndex->fDTDGrammar->getEntityDeclIndex->if->fDTDGrammar->getEntityDecl->if->getExternalEntityRefInAttrValue->return->nonNormalizedValue->indexOf->return
XMLDTDValidator#validateDTDattribute(QName, String, XMLAttributeDecl):::Validate attributes in DTD fashion.:::switch->isAlistAttribute->try->if->fValENTITIES->validate->else->fValENTITY->validate->catch->fErrorReporter->ex->getKey->ex->getArgs->reportError->finally->break->found->enumVals->if->else->for->i->if->enumValueString->new->StringBuilder->if->for->i->fErrorReporter->new->ObjectArr->reportError->break->try->fValID->validate->catch->fErrorReporter->ex->getKey->ex->getArgs->reportError->finally->break->isAlistAttribute->try->if->fValIDRefs->validate->else->fValIDRef->validate->catch->if->fErrorReporter->new->ObjectArr->reportError->else->fErrorReporter->ex->getKey->ex->getArgs->reportError->finally->break->isAlistAttribute->try->if->fValNMTOKENS->validate->else->fValNMTOKEN->validate->catch->if->fErrorReporter->new->ObjectArr->reportError->else->fErrorReporter->new->ObjectArr->reportError->finally->break
XMLDTDValidator#invalidStandaloneAttDef(QName, QName):::Returns true if invalid standalone attribute definition.:::state->return
XMLDTDValidator#init():::initialization:::if->try->fDatatypeValidatorFactory->getBuiltInDV->fDatatypeValidatorFactory->getBuiltInDV->fDatatypeValidatorFactory->getBuiltInDV->fDatatypeValidatorFactory->getBuiltInDV->fDatatypeValidatorFactory->getBuiltInDV->fDatatypeValidatorFactory->getBuiltInDV->fDatatypeValidatorFactory->getBuiltInDV->fDatatypeValidatorFactory->getBuiltInDV->catch->e->printStackTrace->finally
XMLDTDValidator#handleStartElement(QName, XMLAttributes, Augmentations):::Handle element:::if->validate->fValidationManager->setEntityState->fValidationManager->setGrammarFound->rootElementSpecified->if->if->if->fErrorReporter->new->ObjectArr->reportError->if->fDocumentSource->setDocumentHandler->if->fDocumentHandler->setDocumentSource->return->else->fDTDGrammar->getElementDeclIndex->fDTDGrammar->getContentSpecType->if->fErrorReporter->new->ObjectArr->reportError->addDTDDefaultAttrsAndValidate->if->if->newarray->new->intArr->System->arraycopy->if->newarray->new->QNameArr->System->arraycopy->qname->if->for->i->qname->setValues->fCurrentElement->setValues->ensureStackCapacity->setValues->startNamespaceScope->return
XMLDTDValidator#handleEndElement(QName, Augmentations, boolean):::Handle end element.:::if->elementIndex->if->children->childrenOffset->childrenLength->result->checkContent->if->fDTDGrammar->getElementDecl->if->fErrorReporter->new->ObjectArr->reportError->else->messageKey->fErrorReporter->new->ObjectArr->fDTDGrammar->getContentSpecAsString->reportError->endNamespaceScope->if->throw->new->RuntimeException->if->fCurrentElement->clear->if->invIdRefs->fValidationState->checkIDRefID->if->while->invIdRefs->hasNext->fErrorReporter->new->ObjectArr->invIdRefs->next->reportError->return->fCurrentElement->setValues
XMLDTDValidatorFilter#hasGrammar():::Returns true if the validator has a DTD grammar:::
XMLDTDValidatorFilter#validate():::Return true if validator must validate the document:::
XMLElementDecl#setValues(QName, int, short, ContentModelValidator, XMLSimpleType):::setValues:::setValues->setValues
XMLElementDecl#clear():::clear:::clear->clear
XMLEntityDecl#setValues(String, String, String, String, String, boolean, boolean):::setValues:::setValues
XMLEntityDecl#setValues(String, String, String, String, String, String, boolean, boolean):::setValues:::
XMLEntityDecl#clear():::clear:::
XMLNotationDecl#setValues(String, String, String, String):::setValues:::
XMLNotationDecl#clear():::clear:::
XMLNSDTDValidator#startNamespaceScope(QName, XMLAttributes, Augmentations):::Bind namespaces:::fNamespaceContext->pushContext->if->fErrorReporter->new->ObjectArr->reportError->length->attributes->getLength->for->i->prefix->fNamespaceContext->getURI->if->if->fErrorReporter->new->ObjectArr->reportError->for->i->attrCount->attributes->getLength->for->i
XMLNSDTDValidator#endNamespaceScope(QName, Augmentations, boolean):::Handles end element.:::eprefix->fNamespaceContext->getURI->if->if->if->fDocumentHandler->endElement->fNamespaceContext->popContext
XMLSimpleType#setValues(short, String, String[], boolean, short, String, String, DatatypeValidator):::setValues:::if->new->StringArr->System->arraycopy->else
XMLSimpleType#setValues(XMLSimpleType):::Set values.:::if->new->StringArr->System->arraycopy->else
XMLSimpleType#clear():::clear:::

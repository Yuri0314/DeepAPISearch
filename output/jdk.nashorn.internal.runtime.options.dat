KeyValueOption#hasValue(String):::Check if the key value option has a value or if it has not been initialized:::return->map->get
LoggingOption.LoggerInfo#getLevel():::Get the log level:::return
LoggingOption.LoggerInfo#isQuiet():::Get the quiet flag:::return
LoggingOption#getLoggers():::Return the logger info collected from this command line option:::return->Collections->unmodifiableMap
Option#getValue():::Return the value of an option:::return
Options#getResource():::Get the resource for this Options set, e.g:::return
Options#getBooleanProperty(String, Boolean):::Convenience function for getting system properties in a safe way:::checkPropertyName->return->AccessController->new->PrivilegedAction<Boolean>->doPrivileged
Options#getBooleanProperty(String):::Convenience function for getting system properties in a safe way:::return->getBooleanProperty
Options#getStringProperty(String, String):::Convenience function for getting system properties in a safe way:::checkPropertyName->return->AccessController->new->PrivilegedAction<String>->doPrivileged
Options#getIntProperty(String, int):::Convenience function for getting system properties in a safe way:::checkPropertyName->return->AccessController->new->PrivilegedAction<Integer>->doPrivileged
Options#get(String):::Return an option given its resource key:::return->options->key->get
Options#getBoolean(String):::Return an option as a boolean:::option->get->return->option->getValue
Options#getInteger(String):::Return an option as a integer:::option->get->return->option->getValue
Options#getString(String):::Return an option as a String:::option->get->if->value->option->getValue->if->return->value->intern->return
Options#set(String, Option):::Set an option, overwriting an existing state if one exists:::options->key->put
Options#set(String, boolean):::Set an option as a boolean value, overwriting an existing state if one exists:::new->Option<>->set
Options#set(String, String):::Set an option as a String value, overwriting an existing state if one exists:::new->Option<>->set
Options#getArguments():::Return the user arguments to the program, i.e:::return->Collections->unmodifiableList
Options#getFiles():::Return the JavaScript files passed to the program:::return->Collections->unmodifiableList
Options#getValidOptions():::Return the option templates for all the valid option supported.:::return->Collections->unmodifiableCollection
Options#displayHelp(IllegalArgumentException):::Display context sensitive help:::if->template->getTemplate->if->template->isXHelp->displayHelp->else->err->getTemplate->println->return->if->e->getMessage->err->e->getMessage->helpOptionTemplate->getShortName->helpOptionTemplate->getName->getMsg->println->err->println->return->displayHelp
Options#displayHelp(boolean):::Display full help:::foreach->if->t->isUndocumented->t->getResource->equals->err->println->err->println
Options#process(String[]):::Processes the arguments and stores their information:::argList->new->LinkedList<>->addSystemProperties->processArgList->Collections->addAll->processArgList->addSystemProperties->processArgList
Options#getOptionTemplateByKey(String):::Retrieves an option template identified by key.:::fullKey->key->foreach->if->t->getKey->equals->return->throw->new->IllegalArgumentException
OptionTemplate#isHelp():::Is this the special help option, used to generate help for all the others:::return
OptionTemplate#isXHelp():::Is this the special extended help option, used to generate extended help for all the others:::return
OptionTemplate#getResource():::Get the resource name used to prefix this option set, e.g:::return
OptionTemplate#getType():::Get the type of this option:::return
OptionTemplate#getKey():::Get the key of this option:::return
OptionTemplate#getDefaultValue():::Get the default value for this option:::switch->getType->if->break->if->break->TimeZone->getDefault->getID->break->Locale->getDefault->toLanguageTag->break->break->return
OptionTemplate#getDependency():::Does this option automatically enable another option, i.e:::return
OptionTemplate#getConflict():::Is this option in conflict with another option so that both can't be enabled at the same time:::return
OptionTemplate#isUndocumented():::Is this option undocumented, i.e:::return
OptionTemplate#getShortName():::Get the short version of this option name if one exists, e.g:::return
OptionTemplate#getName():::Get the name of this option, e.g:::return
OptionTemplate#getDescription():::Get the description of this option.:::return
OptionTemplate#isValueNextArg():::Is value of this option passed as next argument?:::return
OptionTemplate#isRepeated():::Can this option be repeated?:::return

ArithmeticLIRLowerable#generate(NodeLIRBuilderTool)::: arithmetic lowerable generate:::builder->getLIRGeneratorTool->getArithmetic->generate
ArithmeticLIRLowerable#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: arithmetic lowerable generate:::
ArrayLengthProvider#findLength(FindLengthMode, ConstantReflectionProvider):::Returns the length of the array described by this node, or null if it is not available:::
CoreProviders#getMetaAccess()::: core providers get meta access:::
CoreProviders#getConstantReflection()::: core providers get constant reflection:::
CoreProviders#getConstantFieldProvider()::: core providers get constant field provider:::
CoreProviders#getLowerer()::: core providers get lowerer:::
CoreProviders#getReplacements()::: core providers get replacements:::
CoreProviders#getStampProvider()::: core providers get stamp provider:::
CoreProviders#getForeignCalls()::: core providers get foreign calls:::
CoreProviders#getGC()::: core providers get c:::
CoreProvidersDelegate#getMetaAccess()::: core providers delegate get meta access:::return->providers->getMetaAccess
CoreProvidersDelegate#getConstantReflection()::: core providers delegate get constant reflection:::return->providers->getConstantReflection
CoreProvidersDelegate#getConstantFieldProvider()::: core providers delegate get constant field provider:::return->providers->getConstantFieldProvider
CoreProvidersDelegate#getLowerer()::: core providers delegate get lowerer:::return->providers->getLowerer
CoreProvidersDelegate#getReplacements()::: core providers delegate get replacements:::return->providers->getReplacements
CoreProvidersDelegate#getStampProvider()::: core providers delegate get stamp provider:::return->providers->getStampProvider
CoreProvidersDelegate#getForeignCalls()::: core providers delegate get foreign calls:::return->providers->getForeignCalls
CoreProvidersDelegate#getGC()::: core providers delegate get c:::return->providers->getGC
CoreProvidersImpl#getMetaAccess()::: core providers impl get meta access:::return
CoreProvidersImpl#getConstantReflection()::: core providers impl get constant reflection:::return
CoreProvidersImpl#getConstantFieldProvider()::: core providers impl get constant field provider:::return
CoreProvidersImpl#getLowerer()::: core providers impl get lowerer:::return
CoreProvidersImpl#getReplacements()::: core providers impl get replacements:::return
CoreProvidersImpl#getStampProvider()::: core providers impl get stamp provider:::return
CoreProvidersImpl#getForeignCalls()::: core providers impl get foreign calls:::return
CoreProvidersImpl#getGC()::: core providers impl get c:::return
DelegatingReplacements#getProviders()::: delegating replacements get providers:::return->delegate->getProviders
DelegatingReplacements#getGraphBuilderPlugins()::: delegating replacements get graph builder plugins:::return->delegate->getGraphBuilderPlugins
DelegatingReplacements#getIntrinsifyingPlugin(ResolvedJavaMethod)::: delegating replacements get intrinsifying plugin:::return->delegate->getIntrinsifyingPlugin
DelegatingReplacements#getSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, OptionValues)::: delegating replacements get snippet:::return->delegate->getSnippet
DelegatingReplacements#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues)::: delegating replacements register snippet:::delegate->registerSnippet
DelegatingReplacements#getMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)::: delegating replacements get method substitution:::return->delegate->getMethodSubstitution
DelegatingReplacements#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues)::: delegating replacements register method substitution:::delegate->registerMethodSubstitution
DelegatingReplacements#getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues)::: delegating replacements get substitution:::return->delegate->getSubstitution
DelegatingReplacements#getIntrinsicGraph(ResolvedJavaMethod, CompilationIdentifier, DebugContext, Cancellable)::: delegating replacements get intrinsic graph:::return->delegate->getIntrinsicGraph
DelegatingReplacements#hasSubstitution(ResolvedJavaMethod, int)::: delegating replacements has substitution:::return->delegate->hasSubstitution
DelegatingReplacements#getDefaultReplacementBytecodeProvider()::: delegating replacements get default replacement bytecode provider:::return->delegate->getDefaultReplacementBytecodeProvider
DelegatingReplacements#registerSnippetTemplateCache(SnippetTemplateCache)::: delegating replacements register snippet template cache:::delegate->registerSnippetTemplateCache
DelegatingReplacements#getSnippetTemplateCache(Class)::: delegating replacements get snippet template cache:::return->delegate->getSnippetTemplateCache
GCProvider#getBarrierSet():::Returns the barrier set that is used to insert the needed read/write barriers.:::
LimitedValueProxy#getOriginalNode()::: limited value proxy get original node:::
LIRLowerable#generate(NodeLIRBuilderTool)::: lowerable generate:::
Lowerable#lower(LoweringTool):::Expand this node into lower level nodes expressing the same semantics:::
LoweringProvider#lower(Node, LoweringTool)::: lowering provider lower:::
LoweringProvider#reconstructArrayIndex(JavaKind, AddressNode):::Reconstructs the array index from an address node that was created as a lowering of an indexed access to an array.:::
LoweringProvider#smallestCompareWidth():::Indicates the smallest width for comparing an integer value on the target platform.:::
LoweringProvider#supportBulkZeroing():::Indicates whether the target platform supports bulk zeroing instruction.:::
LoweringTool#getProviders()::: lowering tool get providers:::
LoweringTool#getMetaAccess()::: lowering tool get meta access:::
LoweringTool#getLowerer()::: lowering tool get lowerer:::
LoweringTool#getConstantReflection()::: lowering tool get constant reflection:::
LoweringTool#getConstantFieldProvider()::: lowering tool get constant field provider:::
LoweringTool#getReplacements()::: lowering tool get replacements:::
LoweringTool#getStampProvider()::: lowering tool get stamp provider:::
LoweringTool#createGuard(FixedNode, LogicNode, DeoptimizationReason, DeoptimizationAction)::: lowering tool create guard:::
LoweringTool#createGuard(FixedNode, LogicNode, DeoptimizationReason, DeoptimizationAction, Speculation, boolean, NodeSourcePosition)::: lowering tool create guard:::
LoweringTool#lastFixedNode():::Gets the closest fixed node preceding the node currently being lowered.:::
LoweringTool#getCurrentGuardAnchor()::: lowering tool get current guard anchor:::
LoweringTool#getLoweringStage():::Returns current lowering stage.:::
MemoryProxy#getLocationIdentity()::: memory proxy get location identity:::
MemoryProxy#getOriginalMemoryNode()::: memory proxy get original memory node:::
NodeLIRBuilderTool#state(DeoptimizingNode)::: node builder tool state:::
NodeLIRBuilderTool#emitIf(IfNode)::: node builder tool emit if:::
NodeLIRBuilderTool#emitConditional(ConditionalNode)::: node builder tool emit conditional:::
NodeLIRBuilderTool#emitSwitch(SwitchNode)::: node builder tool emit switch:::
NodeLIRBuilderTool#emitInvoke(Invoke)::: node builder tool emit invoke:::
NodeLIRBuilderTool#visitMerge(AbstractMergeNode)::: node builder tool visit merge:::
NodeLIRBuilderTool#visitEndNode(AbstractEndNode)::: node builder tool visit end node:::
NodeLIRBuilderTool#visitLoopEnd(LoopEndNode)::: node builder tool visit loop end:::
NodeLIRBuilderTool#visitSafepointNode(SafepointNode)::: node builder tool visit safepoint node:::
NodeLIRBuilderTool#visitBreakpointNode(BreakpointNode)::: node builder tool visit breakpoint node:::
NodeLIRBuilderTool#visitFullInfopointNode(FullInfopointNode)::: node builder tool visit full infopoint node:::
NodeLIRBuilderTool#setSourcePosition(NodeSourcePosition)::: node builder tool set source position:::
NodeLIRBuilderTool#getLIRGeneratorTool()::: node builder tool get generator tool:::
NodeLIRBuilderTool#emitOverflowCheckBranch(AbstractBeginNode, AbstractBeginNode, Stamp, double)::: node builder tool emit overflow check branch:::
NodeLIRBuilderTool#visitInvokeArguments(CallingConvention, Collection)::: node builder tool visit invoke arguments:::
NodeLIRBuilderTool#doBlock(Block, StructuredGraph, BlockMap>)::: node builder tool do block:::
NodeLIRBuilderTool#getOptions()::: node builder tool get options:::return->getLIRGeneratorTool->getResult->getLIR->getOptions
NodeLIRBuilderTool#emitReadExceptionObject(ValueNode)::: node builder tool emit read exception object:::
NodeLIRBuilderTool#lookupGraalStub(ValueNode)::: node builder tool lookup graal stub:::return
NodeLIRBuilderTool#matchBlock(Block, StructuredGraph, StructuredGraph.ScheduleResult)::: node builder tool match block:::
NodeValueMap#operand(Node):::Returns the operand that has been previously initialized by #setResult(ValueNode, Value) with the result of an instruction:::
NodeValueMap#hasOperand(Node)::: node value map has operand:::
NodeValueMap#setResult(ValueNode, Value):::Associates operand with the node in the current block.:::
NodeValueMap#valueForOperand(Value):::Gets the ValueNode that produced a value:::
NodeWithState#states()::: node with state states:::return->asNode->inputs->filter
Proxy#getOriginalNode()::: proxy get original node:::
Replacements#getProviders()::: replacements get providers:::
Replacements#getGraphBuilderPlugins():::Gets the object managing the various graph builder plugins used by this object when parsing bytecode into a graph.:::
Replacements#getIntrinsifyingPlugin(ResolvedJavaMethod):::Gets the plugin type that intrinsifies calls to method.:::
Replacements#getSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, OptionValues):::Gets the snippet graph derived from a given method.:::
Replacements#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues):::Registers a method as snippet.:::
Replacements#getMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues):::Gets a graph that is a substitution for a given MethodSubstitutionPlugin plugin in the org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext.CompilationContext context.:::
Replacements#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues):::Registers a plugin as a substitution.:::
Replacements#getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues):::Gets a graph that is a substitution for a given method.:::
Replacements#getIntrinsicGraph(ResolvedJavaMethod, CompilationIdentifier, DebugContext, Cancellable):::Gets a graph produced from the intrinsic for a given method that can be compiled and installed for the method.:::
Replacements#hasSubstitution(ResolvedJavaMethod, int):::Determines if there may be a #getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues) substitution graph for a given method:::
Replacements#getDefaultReplacementBytecodeProvider():::Gets the provider for accessing the bytecode of a substitution method if no other provider is associated with the substitution method.:::
Replacements#registerSnippetTemplateCache(SnippetTemplateCache):::Register snippet templates.:::
Replacements#getSnippetTemplateCache(Class):::Get snippet templates that were registered with Replacements#registerSnippetTemplateCache(SnippetTemplateCache).:::
Replacements#closeSnippetRegistration():::Notifies this method that no further snippets will be registered via #registerSnippet or #registerSnippetTemplateCache:::
StampInverter#invertStamp(Stamp):::Computes the stamp of the input for the given output stamp.:::
StampInverter#getValue():::Gets the input node.:::
StampProvider#createHubStamp(ObjectStamp):::Create the stamp of the LoadHubNode hub of an object.:::
StampProvider#createMethodStamp():::Create the stamp of a pointer to a method.:::
SwitchFoldable#getNextSwitchFoldableBranch():::Returns the direct successor in the branch to check for SwitchFoldability.:::
SwitchFoldable#switchValue():::Returns the value that will be used as the switch input:::
SwitchFoldable#getDefault():::Returns the branch that will close this switch folding, assuming this is called on the lowest node of the cascade.:::
SwitchFoldable#isInSwitch(ValueNode):::Determines whether the node should be folded in the current folding attempt.:::
SwitchFoldable#cutOffCascadeNode():::Removes the successors of this node, while keeping it linked to the rest of the cascade.:::
SwitchFoldable#cutOffLowestCascadeNode():::Completely removes all successors from this node.:::
SwitchFoldable#intKeyAt(int):::Returns the value of the i-th key of this node.:::
SwitchFoldable#keyProbability(int):::Returns the probability of seeing the i-th key of this node.:::
SwitchFoldable#keySuccessor(int):::Returns the branch to follow when seeing the i-th key of this node.:::
SwitchFoldable#defaultProbability():::Returns the probability of going to the default branch.:::
SwitchFoldable#keyCount()::: switch foldable key count:::return
SwitchFoldable#isDefaultSuccessor(AbstractBeginNode):::Should be overridden if getDefault() has side effects.:::return->getDefault
SwitchFoldable#isNonInitializedProfile():::Heuristics that tries to determine whether or not a foldable node was profiled.:::return
SwitchFoldable#maybeIsInSwitch(LogicNode)::: switch foldable maybe is in switch:::return->getY->isJavaConstant
SwitchFoldable#sameSwitchValue(LogicNode, ValueNode)::: switch foldable same switch value:::return->getX
SwitchFoldable.Helper#isDuplicateKey(int, QuickQueryKeyData)::: helper is duplicate key:::return->keyData->contains
SwitchFoldable.Helper#duplicateIndex(AbstractBeginNode, QuickQueryList)::: helper duplicate index:::return->successors->indexOf
SwitchFoldable.Helper#skipUpBegins(Node)::: helper skip up begins:::result->while->result->hasNoUsages->result->predecessor->return
SwitchFoldable.Helper#skipDownBegins(Node)::: helper skip down begins:::result->while->result->hasNoUsages->next->return
SwitchFoldable.Helper#getParentSwitchNode(SwitchFoldable, ValueNode)::: helper get parent switch node:::result->node->asNode->predecessor->skipUpBegins->if->isInSwitch->return->return
SwitchFoldable.Helper#getChildSwitchNode(SwitchFoldable, ValueNode)::: helper get child switch node:::result->node->getNextSwitchFoldableBranch->skipDownBegins->if->isInSwitch->return->return
SwitchFoldable.Helper#addDefault(SwitchFoldable, QuickQueryList)::: helper add default:::defaultBranch->node->getDefault->index->successors->indexOf->if->successors->size->successors->add->return
SwitchFoldable.Helper#countNonDeoptSuccessors(QuickQueryKeyData)::: helper count non deopt successors:::result->foreach->if->return
SwitchFoldable.Helper#updateSwitchData(SwitchFoldable, QuickQueryKeyData, QuickQueryList, double[], double[], QuickQueryList):::Updates the current state of the IntegerSwitch that will be spawned:::for->i->node->keyCount->node->defaultProbability
SwitchFoldable.QuickQueryList#indexOf(T)::: quick query list index of:::return->map->get
SwitchFoldable.QuickQueryList#contains(T)::: quick query list contains:::return->map->containsKey
SwitchFoldable.QuickQueryList#get(int)::: quick query list get:::return->list->get
SwitchFoldable.QuickQueryList#add(T)::: quick query list add:::map->list->size->put->return->list->add
SwitchFoldable.QuickQueryList#addUnique(T):::Adds an object, known to be unique beforehand.:::list->add
SwitchFoldable.QuickQueryList#size()::: quick query list size:::return->list->size
SwitchFoldable.QuickQueryKeyData#add(KeyData)::: quick query key data add:::list->add->map->put
SwitchFoldable.QuickQueryKeyData#contains(int)::: quick query key data contains:::return->map->containsKey
SwitchFoldable.QuickQueryKeyData#get(int)::: quick query key data get:::return->list->get
SwitchFoldable.QuickQueryKeyData#size()::: quick query key data size:::return->list->size
SwitchFoldable.QuickQueryKeyData#fromKey(int)::: quick query key data from key:::return->map->get
SwitchFoldable.QuickQueryKeyData#sort()::: quick query key data sort:::list->sort
SwitchFoldable#switchTransformationOptimization(SimplifierTool):::Collapses a cascade of foldables (IfNode, FixedGuard and IntegerSwitch) into a single switch.:::switchValue->switchValue->if->isInSwitch->Helper->getParentSwitchNode->Helper->getChildSwitchNode->return->switchStamp->switchValue->stamp->if->return->if->PrimitiveStamp->getBits->return->iteratingNode->topMostSwitchNode->while->Helper->getParentSwitchNode->keyData->new->QuickQueryKeyData->successors->new->QuickQueryList<>->potentiallyUnreachable->new->QuickQueryList<>->cumulative->totalProbability->lowestSwitchNode->uninitializedProfiles->while->Helper->updateSwitchData->if->iteratingNode->isNonInitializedProfile->Helper->getChildSwitchNode->if->keyData->size->return->graph->asNode->graph->keyData->sort->normalizationFactor->newKeyCount->size->keys->new->intArr->keyProbabilities->new->doubleArr->keySuccessors->new->intArr->nonDeoptSuccessorCount->Helper->countNonDeoptSuccessors->uniform->Helper->addDefault->for->i->adapter->if->getBits->graph->new->SignExtendNode->addOrUnique->else->toInsert->successors->size->new->IntegerSwitchNode->graph->add->lowestSwitchNode->cutOffLowestCascadeNode->while->if->iteratingNode->cutOffCascadeNode->Helper->getParentSwitchNode->topMostSwitchNode->asNode->replaceAtPredecessor->topMostSwitchNode->asNode->replaceAtUsages->pos->foreach->if->begin->isUnregistered->graph->begin->next->add->graph->add->begin->begin->next->setNext->toInsert->setBlockSuccessor->GraphUtil->killCFG->foreach->if->duplicate->predecessor->GraphUtil->killCFG->tool->addToWorkList->return
UncheckedInterfaceProvider#uncheckedStamp():::Returns a stamp containing information about interface types that has not been verified or null if no such stamp is available:::
ValueProxy#getGuard()::: value proxy get guard:::
Virtualizable#virtualize(VirtualizerTool):::A node class can implement this method to convey information about what its effect would be if some of its inputs were virtualized:::
VirtualizerTool#getMetaAccess()::: virtualizer tool get meta access:::
VirtualizerTool#getConstantReflection()::: virtualizer tool get constant reflection:::
VirtualizerTool#getMaximumEntryCount():::This method should be used to query the maximum size of virtualized objects before attempting virtualization.:::
VirtualizerTool#createVirtualObject(VirtualObjectNode, ValueNode[], List, boolean):::Introduces a new virtual object to the current state.:::
VirtualizerTool#getAlias(ValueNode):::Returns a VirtualObjectNode if the given value is aliased with a virtual object that is still virtual, the materialized value of the given value is aliased with a virtual object that was materialized, the replacement if the give value was replaced, otherwise the given value:::
VirtualizerTool#setVirtualEntry(VirtualObjectNode, int, ValueNode, JavaKind, long):::Sets the entry (field or array element) with the given index in the virtualized object.:::
VirtualizerTool#setVirtualEntry(VirtualObjectNode, int, ValueNode)::: virtualizer tool set virtual entry:::if->setVirtualEntry->throw->new->GraalError
VirtualizerTool#getEntry(VirtualObjectNode, int)::: virtualizer tool get entry:::
VirtualizerTool#addLock(VirtualObjectNode, MonitorIdNode)::: virtualizer tool add lock:::
VirtualizerTool#removeLock(VirtualObjectNode)::: virtualizer tool remove lock:::
VirtualizerTool#setEnsureVirtualized(VirtualObjectNode, boolean)::: virtualizer tool set ensure virtualized:::
VirtualizerTool#getEnsureVirtualized(VirtualObjectNode)::: virtualizer tool get ensure virtualized:::
VirtualizerTool#replaceWithVirtual(VirtualObjectNode):::Deletes the current node and replaces it with the given virtualized object.:::
VirtualizerTool#replaceWithValue(ValueNode):::Deletes the current node and replaces it with the given value.:::
VirtualizerTool#delete():::Deletes the current node.:::
VirtualizerTool#replaceFirstInput(Node, Node):::Replaces an input of the current node.:::
VirtualizerTool#addNode(ValueNode):::Adds the given node to the graph.This action will only be performed when, and if, the changes are committed.:::
VirtualizerTool#replaceWith(ValueNode):::This method performs either #replaceWithValue(ValueNode) or #replaceWithVirtual(VirtualObjectNode), depending on the given value.:::
VirtualizerTool#ensureMaterialized(VirtualObjectNode):::If state is virtual, materialization is performed for the given state.:::
VirtualizerTool#getOptions()::: virtualizer tool get options:::
VirtualizerTool#getDebug()::: virtualizer tool get debug:::

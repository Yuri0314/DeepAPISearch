org.graalvm.compiler.nodes.spi.ArithmeticLIRLowerable#generate(NodeLIRBuilderTool)->void::: arithmetic lowerable generate
org.graalvm.compiler.nodes.spi.ArithmeticLIRLowerable#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)->void::: arithmetic lowerable generate
org.graalvm.compiler.nodes.spi.ArrayLengthProvider#findLength(FindLengthMode, ConstantReflectionProvider)->ValueNode:::Returns the length of the array described by this node, or null if it is not available
org.graalvm.compiler.nodes.spi.CoreProviders#getMetaAccess()->MetaAccessProvider::: core providers get meta access
org.graalvm.compiler.nodes.spi.CoreProviders#getConstantReflection()->ConstantReflectionProvider::: core providers get constant reflection
org.graalvm.compiler.nodes.spi.CoreProviders#getConstantFieldProvider()->ConstantFieldProvider::: core providers get constant field provider
org.graalvm.compiler.nodes.spi.CoreProviders#getLowerer()->LoweringProvider::: core providers get lowerer
org.graalvm.compiler.nodes.spi.CoreProviders#getReplacements()->Replacements::: core providers get replacements
org.graalvm.compiler.nodes.spi.CoreProviders#getStampProvider()->StampProvider::: core providers get stamp provider
org.graalvm.compiler.nodes.spi.CoreProviders#getForeignCalls()->ForeignCallsProvider::: core providers get foreign calls
org.graalvm.compiler.nodes.spi.CoreProviders#getGC()->GCProvider::: core providers get c
org.graalvm.compiler.nodes.spi.CoreProvidersDelegate#getMetaAccess()->MetaAccessProvider::: core providers delegate get meta access
org.graalvm.compiler.nodes.spi.CoreProvidersDelegate#getConstantReflection()->ConstantReflectionProvider::: core providers delegate get constant reflection
org.graalvm.compiler.nodes.spi.CoreProvidersDelegate#getConstantFieldProvider()->ConstantFieldProvider::: core providers delegate get constant field provider
org.graalvm.compiler.nodes.spi.CoreProvidersDelegate#getLowerer()->LoweringProvider::: core providers delegate get lowerer
org.graalvm.compiler.nodes.spi.CoreProvidersDelegate#getReplacements()->Replacements::: core providers delegate get replacements
org.graalvm.compiler.nodes.spi.CoreProvidersDelegate#getStampProvider()->StampProvider::: core providers delegate get stamp provider
org.graalvm.compiler.nodes.spi.CoreProvidersDelegate#getForeignCalls()->ForeignCallsProvider::: core providers delegate get foreign calls
org.graalvm.compiler.nodes.spi.CoreProvidersDelegate#getGC()->GCProvider::: core providers delegate get c
org.graalvm.compiler.nodes.spi.CoreProvidersImpl#getMetaAccess()->MetaAccessProvider::: core providers impl get meta access
org.graalvm.compiler.nodes.spi.CoreProvidersImpl#getConstantReflection()->ConstantReflectionProvider::: core providers impl get constant reflection
org.graalvm.compiler.nodes.spi.CoreProvidersImpl#getConstantFieldProvider()->ConstantFieldProvider::: core providers impl get constant field provider
org.graalvm.compiler.nodes.spi.CoreProvidersImpl#getLowerer()->LoweringProvider::: core providers impl get lowerer
org.graalvm.compiler.nodes.spi.CoreProvidersImpl#getReplacements()->Replacements::: core providers impl get replacements
org.graalvm.compiler.nodes.spi.CoreProvidersImpl#getStampProvider()->StampProvider::: core providers impl get stamp provider
org.graalvm.compiler.nodes.spi.CoreProvidersImpl#getForeignCalls()->ForeignCallsProvider::: core providers impl get foreign calls
org.graalvm.compiler.nodes.spi.CoreProvidersImpl#getGC()->GCProvider::: core providers impl get c
org.graalvm.compiler.nodes.spi.DelegatingReplacements#getProviders()->CoreProviders::: delegating replacements get providers
org.graalvm.compiler.nodes.spi.DelegatingReplacements#getGraphBuilderPlugins()->GraphBuilderConfiguration.Plugins::: delegating replacements get graph builder plugins
org.graalvm.compiler.nodes.spi.DelegatingReplacements#getIntrinsifyingPlugin(ResolvedJavaMethod)->Class::: delegating replacements get intrinsifying plugin
org.graalvm.compiler.nodes.spi.DelegatingReplacements#getSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, OptionValues)->StructuredGraph::: delegating replacements get snippet
org.graalvm.compiler.nodes.spi.DelegatingReplacements#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues)->void::: delegating replacements register snippet
org.graalvm.compiler.nodes.spi.DelegatingReplacements#getMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)->StructuredGraph::: delegating replacements get method substitution
org.graalvm.compiler.nodes.spi.DelegatingReplacements#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues)->void::: delegating replacements register method substitution
org.graalvm.compiler.nodes.spi.DelegatingReplacements#getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues)->StructuredGraph::: delegating replacements get substitution
org.graalvm.compiler.nodes.spi.DelegatingReplacements#getIntrinsicGraph(ResolvedJavaMethod, CompilationIdentifier, DebugContext, Cancellable)->StructuredGraph::: delegating replacements get intrinsic graph
org.graalvm.compiler.nodes.spi.DelegatingReplacements#hasSubstitution(ResolvedJavaMethod, int)->boolean::: delegating replacements has substitution
org.graalvm.compiler.nodes.spi.DelegatingReplacements#getDefaultReplacementBytecodeProvider()->BytecodeProvider::: delegating replacements get default replacement bytecode provider
org.graalvm.compiler.nodes.spi.DelegatingReplacements#registerSnippetTemplateCache(SnippetTemplateCache)->void::: delegating replacements register snippet template cache
org.graalvm.compiler.nodes.spi.DelegatingReplacements#getSnippetTemplateCache(Class)->T::: delegating replacements get snippet template cache
org.graalvm.compiler.nodes.spi.GCProvider#getBarrierSet()->BarrierSet:::Returns the barrier set that is used to insert the needed read/write barriers.
org.graalvm.compiler.nodes.spi.LimitedValueProxy#getOriginalNode()->ValueNode::: limited value proxy get original node
org.graalvm.compiler.nodes.spi.LIRLowerable#generate(NodeLIRBuilderTool)->void::: lowerable generate
org.graalvm.compiler.nodes.spi.Lowerable#lower(LoweringTool)->void:::Expand this node into lower level nodes expressing the same semantics
org.graalvm.compiler.nodes.spi.LoweringProvider#lower(Node, LoweringTool)->void::: lowering provider lower
org.graalvm.compiler.nodes.spi.LoweringProvider#reconstructArrayIndex(JavaKind, AddressNode)->ValueNode:::Reconstructs the array index from an address node that was created as a lowering of an indexed access to an array.
org.graalvm.compiler.nodes.spi.LoweringProvider#smallestCompareWidth()->Integer:::Indicates the smallest width for comparing an integer value on the target platform.
org.graalvm.compiler.nodes.spi.LoweringProvider#supportBulkZeroing()->boolean:::Indicates whether the target platform supports bulk zeroing instruction.
org.graalvm.compiler.nodes.spi.LoweringTool#getProviders()->CoreProviders::: lowering tool get providers
org.graalvm.compiler.nodes.spi.LoweringTool#getMetaAccess()->MetaAccessProvider::: lowering tool get meta access
org.graalvm.compiler.nodes.spi.LoweringTool#getLowerer()->LoweringProvider::: lowering tool get lowerer
org.graalvm.compiler.nodes.spi.LoweringTool#getConstantReflection()->ConstantReflectionProvider::: lowering tool get constant reflection
org.graalvm.compiler.nodes.spi.LoweringTool#getConstantFieldProvider()->ConstantFieldProvider::: lowering tool get constant field provider
org.graalvm.compiler.nodes.spi.LoweringTool#getReplacements()->Replacements::: lowering tool get replacements
org.graalvm.compiler.nodes.spi.LoweringTool#getStampProvider()->StampProvider::: lowering tool get stamp provider
org.graalvm.compiler.nodes.spi.LoweringTool#createGuard(FixedNode, LogicNode, DeoptimizationReason, DeoptimizationAction)->GuardingNode::: lowering tool create guard
org.graalvm.compiler.nodes.spi.LoweringTool#createGuard(FixedNode, LogicNode, DeoptimizationReason, DeoptimizationAction, Speculation, boolean, NodeSourcePosition)->GuardingNode::: lowering tool create guard
org.graalvm.compiler.nodes.spi.LoweringTool#lastFixedNode()->FixedWithNextNode:::Gets the closest fixed node preceding the node currently being lowered.
org.graalvm.compiler.nodes.spi.LoweringTool#getCurrentGuardAnchor()->AnchoringNode::: lowering tool get current guard anchor
org.graalvm.compiler.nodes.spi.LoweringTool#getLoweringStage()->LoweringStage:::Returns current lowering stage.
org.graalvm.compiler.nodes.spi.MemoryProxy#getLocationIdentity()->LocationIdentity::: memory proxy get location identity
org.graalvm.compiler.nodes.spi.MemoryProxy#getOriginalMemoryNode()->MemoryNode::: memory proxy get original memory node
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#state(DeoptimizingNode)->LIRFrameState::: node builder tool state
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#emitIf(IfNode)->void::: node builder tool emit if
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#emitConditional(ConditionalNode)->void::: node builder tool emit conditional
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#emitSwitch(SwitchNode)->void::: node builder tool emit switch
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#emitInvoke(Invoke)->void::: node builder tool emit invoke
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#visitMerge(AbstractMergeNode)->void::: node builder tool visit merge
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#visitEndNode(AbstractEndNode)->void::: node builder tool visit end node
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#visitLoopEnd(LoopEndNode)->void::: node builder tool visit loop end
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#visitSafepointNode(SafepointNode)->void::: node builder tool visit safepoint node
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#visitBreakpointNode(BreakpointNode)->void::: node builder tool visit breakpoint node
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#visitFullInfopointNode(FullInfopointNode)->void::: node builder tool visit full infopoint node
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#setSourcePosition(NodeSourcePosition)->void::: node builder tool set source position
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#getLIRGeneratorTool()->LIRGeneratorTool::: node builder tool get generator tool
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#emitOverflowCheckBranch(AbstractBeginNode, AbstractBeginNode, Stamp, double)->void::: node builder tool emit overflow check branch
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#visitInvokeArguments(CallingConvention, Collection)->Value[]::: node builder tool visit invoke arguments
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#doBlock(Block, StructuredGraph, BlockMap>)->void::: node builder tool do block
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#getOptions()->OptionValues::: node builder tool get options
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#emitReadExceptionObject(ValueNode)->void::: node builder tool emit read exception object
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#lookupGraalStub(ValueNode)->ForeignCallLinkage::: node builder tool lookup graal stub
org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool#matchBlock(Block, StructuredGraph, StructuredGraph.ScheduleResult)->void::: node builder tool match block
org.graalvm.compiler.nodes.spi.NodeValueMap#operand(Node)->Value:::Returns the operand that has been previously initialized by #setResult(ValueNode, Value) with the result of an instruction
org.graalvm.compiler.nodes.spi.NodeValueMap#hasOperand(Node)->boolean::: node value map has operand
org.graalvm.compiler.nodes.spi.NodeValueMap#setResult(ValueNode, Value)->Value:::Associates operand with the node in the current block.
org.graalvm.compiler.nodes.spi.NodeValueMap#valueForOperand(Value)->ValueNode:::Gets the ValueNode that produced a value
org.graalvm.compiler.nodes.spi.NodeWithState#states()->NodeIterable::: node with state states
org.graalvm.compiler.nodes.spi.Proxy#getOriginalNode()->Node::: proxy get original node
org.graalvm.compiler.nodes.spi.Replacements#getProviders()->CoreProviders::: replacements get providers
org.graalvm.compiler.nodes.spi.Replacements#getGraphBuilderPlugins()->GraphBuilderConfiguration.Plugins:::Gets the object managing the various graph builder plugins used by this object when parsing bytecode into a graph.
org.graalvm.compiler.nodes.spi.Replacements#getIntrinsifyingPlugin(ResolvedJavaMethod)->Class:::Gets the plugin type that intrinsifies calls to method.
org.graalvm.compiler.nodes.spi.Replacements#getSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, OptionValues)->StructuredGraph:::Gets the snippet graph derived from a given method.
org.graalvm.compiler.nodes.spi.Replacements#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues)->void:::Registers a method as snippet.
org.graalvm.compiler.nodes.spi.Replacements#getMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues)->StructuredGraph:::Gets a graph that is a substitution for a given MethodSubstitutionPlugin plugin in the org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext.CompilationContext context.
org.graalvm.compiler.nodes.spi.Replacements#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues)->void:::Registers a plugin as a substitution.
org.graalvm.compiler.nodes.spi.Replacements#getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues)->StructuredGraph:::Gets a graph that is a substitution for a given method.
org.graalvm.compiler.nodes.spi.Replacements#getIntrinsicGraph(ResolvedJavaMethod, CompilationIdentifier, DebugContext, Cancellable)->StructuredGraph:::Gets a graph produced from the intrinsic for a given method that can be compiled and installed for the method.
org.graalvm.compiler.nodes.spi.Replacements#hasSubstitution(ResolvedJavaMethod, int)->boolean:::Determines if there may be a #getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues) substitution graph for a given method
org.graalvm.compiler.nodes.spi.Replacements#getDefaultReplacementBytecodeProvider()->BytecodeProvider:::Gets the provider for accessing the bytecode of a substitution method if no other provider is associated with the substitution method.
org.graalvm.compiler.nodes.spi.Replacements#registerSnippetTemplateCache(SnippetTemplateCache)->void:::Register snippet templates.
org.graalvm.compiler.nodes.spi.Replacements#getSnippetTemplateCache(Class)->T:::Get snippet templates that were registered with Replacements#registerSnippetTemplateCache(SnippetTemplateCache).
org.graalvm.compiler.nodes.spi.Replacements#closeSnippetRegistration()->void:::Notifies this method that no further snippets will be registered via #registerSnippet or #registerSnippetTemplateCache
org.graalvm.compiler.nodes.spi.StampInverter#invertStamp(Stamp)->Stamp:::Computes the stamp of the input for the given output stamp.
org.graalvm.compiler.nodes.spi.StampInverter#getValue()->ValueNode:::Gets the input node.
org.graalvm.compiler.nodes.spi.StampProvider#createHubStamp(ObjectStamp)->Stamp:::Create the stamp of the LoadHubNode hub of an object.
org.graalvm.compiler.nodes.spi.StampProvider#createMethodStamp()->Stamp:::Create the stamp of a pointer to a method.
org.graalvm.compiler.nodes.spi.SwitchFoldable#getNextSwitchFoldableBranch()->Node:::Returns the direct successor in the branch to check for SwitchFoldability.
org.graalvm.compiler.nodes.spi.SwitchFoldable#switchValue()->ValueNode:::Returns the value that will be used as the switch input
org.graalvm.compiler.nodes.spi.SwitchFoldable#getDefault()->AbstractBeginNode:::Returns the branch that will close this switch folding, assuming this is called on the lowest node of the cascade.
org.graalvm.compiler.nodes.spi.SwitchFoldable#isInSwitch(ValueNode)->boolean:::Determines whether the node should be folded in the current folding attempt.
org.graalvm.compiler.nodes.spi.SwitchFoldable#cutOffCascadeNode()->void:::Removes the successors of this node, while keeping it linked to the rest of the cascade.
org.graalvm.compiler.nodes.spi.SwitchFoldable#cutOffLowestCascadeNode()->void:::Completely removes all successors from this node.
org.graalvm.compiler.nodes.spi.SwitchFoldable#intKeyAt(int)->int:::Returns the value of the i-th key of this node.
org.graalvm.compiler.nodes.spi.SwitchFoldable#keyProbability(int)->double:::Returns the probability of seeing the i-th key of this node.
org.graalvm.compiler.nodes.spi.SwitchFoldable#keySuccessor(int)->AbstractBeginNode:::Returns the branch to follow when seeing the i-th key of this node.
org.graalvm.compiler.nodes.spi.SwitchFoldable#defaultProbability()->double:::Returns the probability of going to the default branch.
org.graalvm.compiler.nodes.spi.SwitchFoldable#keyCount()->int::: switch foldable key count
org.graalvm.compiler.nodes.spi.SwitchFoldable#isDefaultSuccessor(AbstractBeginNode)->boolean:::Should be overridden if getDefault() has side effects.
org.graalvm.compiler.nodes.spi.SwitchFoldable#isNonInitializedProfile()->boolean:::Heuristics that tries to determine whether or not a foldable node was profiled.
org.graalvm.compiler.nodes.spi.SwitchFoldable#maybeIsInSwitch(LogicNode)->boolean::: switch foldable maybe is in switch
org.graalvm.compiler.nodes.spi.SwitchFoldable#sameSwitchValue(LogicNode, ValueNode)->boolean::: switch foldable same switch value
org.graalvm.compiler.nodes.spi.SwitchFoldable#switchTransformationOptimization(SimplifierTool)->boolean:::Collapses a cascade of foldables (IfNode, FixedGuard and IntegerSwitch) into a single switch.
org.graalvm.compiler.nodes.spi.UncheckedInterfaceProvider#uncheckedStamp()->Stamp:::Returns a stamp containing information about interface types that has not been verified or null if no such stamp is available
org.graalvm.compiler.nodes.spi.ValueProxy#getGuard()->GuardingNode::: value proxy get guard
org.graalvm.compiler.nodes.spi.Virtualizable#virtualize(VirtualizerTool)->void:::A node class can implement this method to convey information about what its effect would be if some of its inputs were virtualized
org.graalvm.compiler.nodes.spi.VirtualizerTool#getMetaAccess()->MetaAccessProvider::: virtualizer tool get meta access
org.graalvm.compiler.nodes.spi.VirtualizerTool#getConstantReflection()->ConstantReflectionProvider::: virtualizer tool get constant reflection
org.graalvm.compiler.nodes.spi.VirtualizerTool#getMaximumEntryCount()->int:::This method should be used to query the maximum size of virtualized objects before attempting virtualization.
org.graalvm.compiler.nodes.spi.VirtualizerTool#createVirtualObject(VirtualObjectNode, ValueNode[], List, boolean)->void:::Introduces a new virtual object to the current state.
org.graalvm.compiler.nodes.spi.VirtualizerTool#getAlias(ValueNode)->ValueNode:::Returns a VirtualObjectNode if the given value is aliased with a virtual object that is still virtual, the materialized value of the given value is aliased with a virtual object that was materialized, the replacement if the give value was replaced, otherwise the given value
org.graalvm.compiler.nodes.spi.VirtualizerTool#setVirtualEntry(VirtualObjectNode, int, ValueNode, JavaKind, long)->boolean:::Sets the entry (field or array element) with the given index in the virtualized object.
org.graalvm.compiler.nodes.spi.VirtualizerTool#setVirtualEntry(VirtualObjectNode, int, ValueNode)->void::: virtualizer tool set virtual entry
org.graalvm.compiler.nodes.spi.VirtualizerTool#getEntry(VirtualObjectNode, int)->ValueNode::: virtualizer tool get entry
org.graalvm.compiler.nodes.spi.VirtualizerTool#addLock(VirtualObjectNode, MonitorIdNode)->void::: virtualizer tool add lock
org.graalvm.compiler.nodes.spi.VirtualizerTool#removeLock(VirtualObjectNode)->MonitorIdNode::: virtualizer tool remove lock
org.graalvm.compiler.nodes.spi.VirtualizerTool#setEnsureVirtualized(VirtualObjectNode, boolean)->void::: virtualizer tool set ensure virtualized
org.graalvm.compiler.nodes.spi.VirtualizerTool#getEnsureVirtualized(VirtualObjectNode)->boolean::: virtualizer tool get ensure virtualized
org.graalvm.compiler.nodes.spi.VirtualizerTool#replaceWithVirtual(VirtualObjectNode)->void:::Deletes the current node and replaces it with the given virtualized object.
org.graalvm.compiler.nodes.spi.VirtualizerTool#replaceWithValue(ValueNode)->void:::Deletes the current node and replaces it with the given value.
org.graalvm.compiler.nodes.spi.VirtualizerTool#delete()->void:::Deletes the current node.
org.graalvm.compiler.nodes.spi.VirtualizerTool#replaceFirstInput(Node, Node)->void:::Replaces an input of the current node.
org.graalvm.compiler.nodes.spi.VirtualizerTool#addNode(ValueNode)->void:::Adds the given node to the graph.This action will only be performed when, and if, the changes are committed.
org.graalvm.compiler.nodes.spi.VirtualizerTool#replaceWith(ValueNode)->void:::This method performs either #replaceWithValue(ValueNode) or #replaceWithVirtual(VirtualObjectNode), depending on the given value.
org.graalvm.compiler.nodes.spi.VirtualizerTool#ensureMaterialized(VirtualObjectNode)->boolean:::If state is virtual, materialization is performed for the given state.
org.graalvm.compiler.nodes.spi.VirtualizerTool#getOptions()->OptionValues::: virtualizer tool get options
org.graalvm.compiler.nodes.spi.VirtualizerTool#getDebug()->DebugContext::: virtualizer tool get debug

ArrayLengthProvider#findLength(FindLengthMode, ConstantReflectionProvider):::Returns the length of the array described by this node, or null if it is not available:::
GCProvider#getBarrierSet():::Returns the barrier set that is used to insert the needed read/write barriers.:::
Lowerable#lower(LoweringTool):::Expand this node into lower level nodes expressing the same semantics:::
LoweringProvider#reconstructArrayIndex(JavaKind, AddressNode):::Reconstructs the array index from an address node that was created as a lowering of an indexed access to an array.:::
LoweringProvider#smallestCompareWidth():::Indicates the smallest width for comparing an integer value on the target platform.:::
LoweringProvider#supportBulkZeroing():::Indicates whether the target platform supports bulk zeroing instruction.:::
LoweringTool#lastFixedNode():::Gets the closest fixed node preceding the node currently being lowered.:::
LoweringTool#getLoweringStage():::Returns current lowering stage.:::
NodeValueMap#operand(Node):::Returns the operand that has been previously initialized by #setResult(ValueNode, Value) with the result of an instruction:::
NodeValueMap#setResult(ValueNode, Value):::Associates operand with the node in the current block.:::
NodeValueMap#valueForOperand(Value):::Gets the ValueNode that produced a value:::
Replacements#getGraphBuilderPlugins():::Gets the object managing the various graph builder plugins used by this object when parsing bytecode into a graph.:::
Replacements#getIntrinsifyingPlugin(ResolvedJavaMethod):::Gets the plugin type that intrinsifies calls to method.:::
Replacements#getSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object[], boolean, NodeSourcePosition, OptionValues):::Gets the snippet graph derived from a given method.:::
Replacements#registerSnippet(ResolvedJavaMethod, ResolvedJavaMethod, Object, boolean, OptionValues):::Registers a method as snippet.:::
Replacements#getMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, StructuredGraph.AllowAssumptions, Cancellable, OptionValues):::Gets a graph that is a substitution for a given MethodSubstitutionPlugin plugin in the org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext.CompilationContext context.:::
Replacements#registerMethodSubstitution(MethodSubstitutionPlugin, ResolvedJavaMethod, IntrinsicContext.CompilationContext, OptionValues):::Registers a plugin as a substitution.:::
Replacements#getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues):::Gets a graph that is a substitution for a given method.:::
Replacements#getIntrinsicGraph(ResolvedJavaMethod, CompilationIdentifier, DebugContext, Cancellable):::Gets a graph produced from the intrinsic for a given method that can be compiled and installed for the method.:::
Replacements#hasSubstitution(ResolvedJavaMethod, int):::Determines if there may be a #getSubstitution(ResolvedJavaMethod, int, boolean, NodeSourcePosition, OptionValues) substitution graph for a given method:::
Replacements#getDefaultReplacementBytecodeProvider():::Gets the provider for accessing the bytecode of a substitution method if no other provider is associated with the substitution method.:::
Replacements#registerSnippetTemplateCache(SnippetTemplateCache):::Register snippet templates.:::
Replacements#getSnippetTemplateCache(Class):::Get snippet templates that were registered with Replacements#registerSnippetTemplateCache(SnippetTemplateCache).:::
Replacements#closeSnippetRegistration():::Notifies this method that no further snippets will be registered via #registerSnippet or #registerSnippetTemplateCache:::
StampInverter#invertStamp(Stamp):::Computes the stamp of the input for the given output stamp.:::
StampInverter#getValue():::Gets the input node.:::
StampProvider#createHubStamp(ObjectStamp):::Create the stamp of the LoadHubNode hub of an object.:::
StampProvider#createMethodStamp():::Create the stamp of a pointer to a method.:::
SwitchFoldable#getNextSwitchFoldableBranch():::Returns the direct successor in the branch to check for SwitchFoldability.:::
SwitchFoldable#switchValue():::Returns the value that will be used as the switch input:::
SwitchFoldable#getDefault():::Returns the branch that will close this switch folding, assuming this is called on the lowest node of the cascade.:::
SwitchFoldable#isInSwitch(ValueNode):::Determines whether the node should be folded in the current folding attempt.:::
SwitchFoldable#cutOffCascadeNode():::Removes the successors of this node, while keeping it linked to the rest of the cascade.:::
SwitchFoldable#cutOffLowestCascadeNode():::Completely removes all successors from this node.:::
SwitchFoldable#intKeyAt(int):::Returns the value of the i-th key of this node.:::
SwitchFoldable#keyProbability(int):::Returns the probability of seeing the i-th key of this node.:::
SwitchFoldable#keySuccessor(int):::Returns the branch to follow when seeing the i-th key of this node.:::
SwitchFoldable#defaultProbability():::Returns the probability of going to the default branch.:::
SwitchFoldable#isDefaultSuccessor(AbstractBeginNode):::Should be overridden if getDefault() has side effects.:::return->getDefault
SwitchFoldable#isNonInitializedProfile():::Heuristics that tries to determine whether or not a foldable node was profiled.:::return
SwitchFoldable#switchTransformationOptimization(SimplifierTool):::Collapses a cascade of foldables (IfNode, FixedGuard and IntegerSwitch) into a single switch.:::switchValue->switchValue->if->isInSwitch->Helper->getParentSwitchNode->Helper->getChildSwitchNode->return->switchStamp->switchValue->stamp->if->return->if->PrimitiveStamp->getBits->return->iteratingNode->topMostSwitchNode->while->Helper->getParentSwitchNode->keyData->new->QuickQueryKeyData->successors->new->QuickQueryList<>->potentiallyUnreachable->new->QuickQueryList<>->cumulative->totalProbability->lowestSwitchNode->uninitializedProfiles->while->Helper->updateSwitchData->if->iteratingNode->isNonInitializedProfile->Helper->getChildSwitchNode->if->keyData->size->return->graph->asNode->graph->keyData->sort->normalizationFactor->newKeyCount->size->keys->new->intArr->keyProbabilities->new->doubleArr->keySuccessors->new->intArr->nonDeoptSuccessorCount->Helper->countNonDeoptSuccessors->uniform->Helper->addDefault->for->i->adapter->if->getBits->graph->new->SignExtendNode->addOrUnique->else->toInsert->successors->size->new->IntegerSwitchNode->graph->add->lowestSwitchNode->cutOffLowestCascadeNode->while->if->iteratingNode->cutOffCascadeNode->Helper->getParentSwitchNode->topMostSwitchNode->asNode->replaceAtPredecessor->topMostSwitchNode->asNode->replaceAtUsages->pos->foreach->if->begin->isUnregistered->graph->begin->next->add->graph->add->begin->begin->next->setNext->toInsert->setBlockSuccessor->GraphUtil->killCFG->foreach->if->duplicate->predecessor->GraphUtil->killCFG->tool->addToWorkList->return
UncheckedInterfaceProvider#uncheckedStamp():::Returns a stamp containing information about interface types that has not been verified or null if no such stamp is available:::
Virtualizable#virtualize(VirtualizerTool):::A node class can implement this method to convey information about what its effect would be if some of its inputs were virtualized:::
VirtualizerTool#getMaximumEntryCount():::This method should be used to query the maximum size of virtualized objects before attempting virtualization.:::
VirtualizerTool#createVirtualObject(VirtualObjectNode, ValueNode[], List, boolean):::Introduces a new virtual object to the current state.:::
VirtualizerTool#getAlias(ValueNode):::Returns a VirtualObjectNode if the given value is aliased with a virtual object that is still virtual, the materialized value of the given value is aliased with a virtual object that was materialized, the replacement if the give value was replaced, otherwise the given value:::
VirtualizerTool#setVirtualEntry(VirtualObjectNode, int, ValueNode, JavaKind, long):::Sets the entry (field or array element) with the given index in the virtualized object.:::
VirtualizerTool#replaceWithVirtual(VirtualObjectNode):::Deletes the current node and replaces it with the given virtualized object.:::
VirtualizerTool#replaceWithValue(ValueNode):::Deletes the current node and replaces it with the given value.:::
VirtualizerTool#delete():::Deletes the current node.:::
VirtualizerTool#replaceFirstInput(Node, Node):::Replaces an input of the current node.:::
VirtualizerTool#addNode(ValueNode):::Adds the given node to the graph.This action will only be performed when, and if, the changes are committed.:::
VirtualizerTool#replaceWith(ValueNode):::This method performs either #replaceWithValue(ValueNode) or #replaceWithVirtual(VirtualObjectNode), depending on the given value.:::
VirtualizerTool#ensureMaterialized(VirtualObjectNode):::If state is virtual, materialization is performed for the given state.:::

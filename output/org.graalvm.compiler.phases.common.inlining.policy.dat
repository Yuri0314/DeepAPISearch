org.graalvm.compiler.phases.common.inlining.policy.AbstractInliningPolicy#computeMaximumSize(double, int)->double::: abstract inlining policy compute maximum size
org.graalvm.compiler.phases.common.inlining.policy.AbstractInliningPolicy#getInliningBonus(InlineInfo)->double::: abstract inlining policy get inlining bonus
org.graalvm.compiler.phases.common.inlining.policy.AbstractInliningPolicy#isIntrinsic(Replacements, InlineInfo)->boolean::: abstract inlining policy is intrinsic
org.graalvm.compiler.phases.common.inlining.policy.AbstractInliningPolicy#previousLowLevelGraphSize(InlineInfo)->int::: abstract inlining policy previous low level graph size
org.graalvm.compiler.phases.common.inlining.policy.AbstractInliningPolicy#determineInvokeProbability(InlineInfo)->double::: abstract inlining policy determine invoke probability
org.graalvm.compiler.phases.common.inlining.policy.GreedyInliningPolicy#continueInlining(StructuredGraph)->boolean::: greedy inlining policy continue inlining
org.graalvm.compiler.phases.common.inlining.policy.GreedyInliningPolicy#isWorthInlining(Replacements, MethodInvocation, InlineInfo, int, boolean)->Decision::: greedy inlining policy is worth inlining
org.graalvm.compiler.phases.common.inlining.policy.InlineEverythingPolicy#continueInlining(StructuredGraph)->boolean::: inline everything policy continue inlining
org.graalvm.compiler.phases.common.inlining.policy.InlineEverythingPolicy#isWorthInlining(Replacements, MethodInvocation, InlineInfo, int, boolean)->Decision::: inline everything policy is worth inlining
org.graalvm.compiler.phases.common.inlining.policy.InlineMethodSubstitutionsPolicy#isWorthInlining(Replacements, MethodInvocation, InlineInfo, int, boolean)->Decision::: inline method substitutions policy is worth inlining
org.graalvm.compiler.phases.common.inlining.policy.InliningPolicy.Decision#shouldInline()->boolean::: decision should inline
org.graalvm.compiler.phases.common.inlining.policy.InliningPolicy.Decision#getReason()->String::: decision get reason
org.graalvm.compiler.phases.common.inlining.policy.InliningPolicy.Decision#withReason(boolean, String, Object...)->Decision::: decision with reason
org.graalvm.compiler.phases.common.inlining.policy.InliningPolicy#continueInlining(StructuredGraph)->boolean::: inlining policy continue inlining
org.graalvm.compiler.phases.common.inlining.policy.InliningPolicy#isWorthInlining(Replacements, MethodInvocation, InlineInfo, int, boolean)->Decision::: inlining policy is worth inlining

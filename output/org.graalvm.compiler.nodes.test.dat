AbstractObjectStampTest#join(Stamp, Stamp):::Joins the two stamps and also asserts that the meet operation is commutative.:::ab->a->join->ba->b->join->Assert->assertEquals->return
AbstractObjectStampTest#meet(Stamp, Stamp):::Meets the two stamps and also asserts that the meet operation is commutative.:::ab->a->meet->ba->b->meet->Assert->assertEquals->return
AbstractObjectStampTest#getType(Class)::: abstract object stamp test get type:::return->TypeReference->getMetaAccess->lookupJavaType->createTrustedWithoutAssumptions
AddNodeTest#checkTemplateAndName()::: add node test check template and name:::add->ConstantNode->forInt->ConstantNode->forInt->new->AddNode->addClass->add->getNodeClass->addClass->shortName->assertEquals->addClass->getNameTemplate->assertEquals
IfNodeCanonicalizationTest#test1()::: if node canonicalization test test1:::test->values->new->byteArr->foreach->foreach->foreach->foreach->super->test->super->test
IfNodeCanonicalizationTest#testSnippet1(byte[], boolean)::: if node canonicalization test test snippet1:::v->if->if->return
IfNodeCanonicalizationTest#test2()::: if node canonicalization test test2:::test
IfNodeCanonicalizationTest#testSnippet2(int, int[])::: if node canonicalization test test snippet2:::l->if->return->return
IfNodeCanonicalizationTest#test3()::: if node canonicalization test test3:::test
IfNodeCanonicalizationTest#testSnippet3(int, int[])::: if node canonicalization test test snippet3:::l->if->return->return
IfNodeCanonicalizationTest#test4()::: if node canonicalization test test4:::test
IfNodeCanonicalizationTest#testSnippet4(int, int[])::: if node canonicalization test test snippet4:::l->if->GraalDirectives->deoptimize->if->GraalDirectives->deoptimize->return
IfNodeCanonicalizationTest#test5()::: if node canonicalization test test5:::test
IfNodeCanonicalizationTest#testSnippet5(int, int[])::: if node canonicalization test test snippet5:::l->if->GraalDirectives->deoptimize->if->GraalDirectives->deoptimize->return
IfNodeCanonicalizationTest#test(String, int)::: if node canonicalization test test:::test
IfNodeCanonicalizationTest#test(String, Class, int)::: if node canonicalization test test:::graph->parseEager->context->getProviders->canonicalizer->new->CanonicalizerPhase->new->ConvertDeoptimizeToGuardPhase->apply->graph->clearAllStateAfter->graph->setGuardsStage->canonicalizer->apply->new->IterativeConditionalEliminationPhase->apply->canonicalizer->apply->canonicalizer->apply->Assert->graph->getNodes->filter->count->assertEquals
IntegerStampTest#addIntStamp(Stamp, Stamp)::: integer stamp test add int stamp:::return->getAdd->foldStamp
IntegerStampTest#before()::: integer stamp test before:::options->getInitialOptions->debug->getDebug->new->StructuredGraph.Builder->build
IntegerStampTest#testBooleanConstant()::: integer stamp test test boolean constant:::IntegerStamp->create->ConstantNode->forBoolean->stamp->assertEquals->IntegerStamp->create->ConstantNode->forBoolean->stamp->assertEquals
IntegerStampTest#testByteConstant()::: integer stamp test test byte constant:::IntegerStamp->create->ConstantNode->forByte->stamp->assertEquals->IntegerStamp->create->ConstantNode->forByte->stamp->assertEquals->IntegerStamp->create->ConstantNode->forByte->stamp->assertEquals->IntegerStamp->create->ConstantNode->forByte->stamp->assertEquals->IntegerStamp->create->ConstantNode->forByte->stamp->assertEquals
IntegerStampTest#testShortConstant()::: integer stamp test test short constant:::IntegerStamp->create->ConstantNode->forShort->stamp->assertEquals->IntegerStamp->create->ConstantNode->forShort->stamp->assertEquals->IntegerStamp->create->ConstantNode->forShort->stamp->assertEquals->IntegerStamp->create->ConstantNode->forShort->stamp->assertEquals->IntegerStamp->create->ConstantNode->forShort->stamp->assertEquals
IntegerStampTest#testCharConstant()::: integer stamp test test char constant:::IntegerStamp->create->ConstantNode->forChar->stamp->assertEquals->IntegerStamp->create->ConstantNode->forChar->stamp->assertEquals->IntegerStamp->create->ConstantNode->forChar->stamp->assertEquals->IntegerStamp->create->ConstantNode->forChar->stamp->assertEquals
IntegerStampTest#testIntConstant()::: integer stamp test test int constant:::IntegerStamp->create->ConstantNode->forInt->stamp->assertEquals->IntegerStamp->create->ConstantNode->forInt->stamp->assertEquals->IntegerStamp->create->ConstantNode->forInt->stamp->assertEquals->IntegerStamp->create->ConstantNode->forInt->stamp->assertEquals->IntegerStamp->create->ConstantNode->forInt->stamp->assertEquals
IntegerStampTest#testLongConstant()::: integer stamp test test long constant:::IntegerStamp->create->ConstantNode->forLong->stamp->assertEquals->IntegerStamp->create->ConstantNode->forLong->stamp->assertEquals->IntegerStamp->create->ConstantNode->forLong->stamp->assertEquals->IntegerStamp->create->ConstantNode->forLong->stamp->assertEquals->IntegerStamp->create->ConstantNode->forLong->stamp->assertEquals
IntegerStampTest#testPositiveRanges()::: integer stamp test test positive ranges:::IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals
IntegerStampTest#testNegativeRanges()::: integer stamp test test negative ranges:::IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals
IntegerStampTest#testMixedRanges()::: integer stamp test test mixed ranges:::IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals->IntegerStamp->create->StampFactory->forInteger->assertEquals
IntegerStampTest#narrowingKindConversion(IntegerStamp, JavaKind)::: integer stamp test narrowing kind conversion:::narrow->getNarrow->stamp->getBits->kind->getBitCount->foldStamp->implicitExtend->kind->isUnsigned->getZeroExtend->getSignExtend->return->implicitExtend->kind->getBitCount->foldStamp
IntegerStampTest#testNarrowingConversions()::: integer stamp test test narrowing conversions:::StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals->StampFactory->forInteger->StampFactory->forInteger->narrowingKindConversion->assertEquals
IntegerStampTest#testMaskBasedNarrowing()::: integer stamp test test mask based narrowing:::stamp->IntegerStamp->create->resultStamp->IntegerStamp->create->assertEquals
IntegerStampTest#testJoinWeirdMasks()::: integer stamp test test join weird masks:::minusOneOrThree->IntegerStamp->create->twoOrThree->IntegerStamp->create->three->IntegerStamp->create->minusOneOrThree->join->assertEquals->minusOneOrThreeOrOne->IntegerStamp->create->minusOneOrThreeOrOne->join->assertEquals->a->IntegerStamp->create->b->IntegerStamp->create->result->IntegerStamp->create->a->join->assertEquals
IntegerStampTest#testXor()::: integer stamp test test xor:::IntegerStamp->create->getXor->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->getXor->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->getXor->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->getXor->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals
IntegerStampTest#testNot()::: integer stamp test test not:::IntegerStamp->create->getNot->IntegerStamp->create->foldStamp->assertEquals
IntegerStampTest#testAddIntSimple()::: integer stamp test test add int simple:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddNegativeOverFlowInt1()::: integer stamp test test add negative over flow int1:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddNegativeOverFlowInt2()::: integer stamp test test add negative over flow int2:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddPositiveOverFlowInt1()::: integer stamp test test add positive over flow int1:::StampFactory->forKind->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddPositiveOverFlowInt2()::: integer stamp test test add positive over flow int2:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddOverFlowsInt()::: integer stamp test test add over flows int:::StampFactory->forKind->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddLongSimple()::: integer stamp test test add long simple:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddNegativOverFlowLong1()::: integer stamp test test add negativ over flow long1:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddNegativeOverFlowLong2()::: integer stamp test test add negative over flow long2:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddPositiveOverFlowLong1()::: integer stamp test test add positive over flow long1:::StampFactory->forKind->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddPositiveOverFlowLong2()::: integer stamp test test add positive over flow long2:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAddOverFlowsLong()::: integer stamp test test add over flows long:::StampFactory->forKind->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAdd1()::: integer stamp test test add1:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAdd2()::: integer stamp test test add2:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAdd3()::: integer stamp test test add3:::StampFactory->forInteger->StampFactory->forInteger->StampFactory->forInteger->addIntStamp->assertEquals
IntegerStampTest#testAnd()::: integer stamp test test and:::IntegerStamp->create->getAnd->StampFactory->forKind->StampFactory->JavaConstant->forInt->forConstant->foldStamp->assertEquals
IntegerStampTest#testSignExtendShort(long, long)::: integer stamp test test sign extend short:::shortStamp->StampFactory->forInteger->intStamp->getSignExtend->foldStamp->StampFactory->forInteger->assertEquals
IntegerStampTest#testSignExtend()::: integer stamp test test sign extend:::testSignExtendShort->testSignExtendShort->testSignExtendShort->testSignExtendShort->testSignExtendShort->testSignExtendShort
IntegerStampTest#testZeroExtendShort(long, long, long, long)::: integer stamp test test zero extend short:::shortStamp->StampFactory->forInteger->intStamp->getZeroExtend->foldStamp->StampFactory->forInteger->assertEquals
IntegerStampTest#testZeroExtend()::: integer stamp test test zero extend:::testZeroExtendShort->testZeroExtendShort->testZeroExtendShort->testZeroExtendShort->testZeroExtendShort->testZeroExtendShort
IntegerStampTest#testIllegalJoin()::: integer stamp test test illegal join:::IntegerStamp->create->IntegerStamp->create->join->hasValues->assertFalse->IntegerStamp->create->IntegerStamp->create->join->hasValues->assertFalse
IntegerStampTest#testShiftLeft()::: integer stamp test test shift left:::shl->getShl->IntegerStamp->create->shl->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shl->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shl->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shl->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->shl->StampFactory->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->shl->IntegerStamp->create->StampFactory->empty->foldStamp->assertEquals->IntegerStamp->create->shl->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shl->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shl->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shl->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->shl->StampFactory->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->shl->IntegerStamp->create->StampFactory->empty->foldStamp->assertEquals
IntegerStampTest#testUnsignedShiftRight()::: integer stamp test test unsigned shift right:::ushr->getUShr->IntegerStamp->create->ushr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->ushr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->ushr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->ushr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->ushr->StampFactory->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->ushr->IntegerStamp->create->StampFactory->empty->foldStamp->assertEquals->IntegerStamp->create->ushr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->ushr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->ushr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->ushr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->ushr->StampFactory->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->ushr->IntegerStamp->create->StampFactory->empty->foldStamp->assertEquals
IntegerStampTest#testShiftRight()::: integer stamp test test shift right:::shr->getShr->IntegerStamp->create->shr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->shr->StampFactory->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->shr->IntegerStamp->create->StampFactory->empty->foldStamp->assertEquals->IntegerStamp->create->shr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->shr->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->shr->StampFactory->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->empty->shr->IntegerStamp->create->StampFactory->empty->foldStamp->assertEquals
IntegerStampTest#testMulHigh()::: integer stamp test test mul high:::getMulHigh->testSomeMulHigh
IntegerStampTest#testUMulHigh()::: integer stamp test test mul high:::getUMulHigh->testSomeMulHigh
IntegerStampTest#testSomeMulHigh(BinaryOp)::: integer stamp test test some mul high:::testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->StampFactory->forKind->empty->foldStamp->assertEquals->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->StampFactory->forKind->unrestricted->foldStamp->assertEquals->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->unrestricted->someMulHigh->StampFactory->forKind->unrestricted->StampFactory->forKind->unrestricted->foldStamp->assertEquals->StampFactory->forKind->unrestricted->someMulHigh->StampFactory->forKind->unrestricted->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->unrestricted->someMulHigh->StampFactory->forKind->unrestricted->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->unrestricted->someMulHigh->StampFactory->forKind->unrestricted->IntegerStamp->create->foldStamp->assertEquals->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->testMulHigh->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->StampFactory->forKind->empty->foldStamp->assertEquals->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->StampFactory->forKind->unrestricted->foldStamp->assertEquals->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->empty->someMulHigh->StampFactory->forKind->empty->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->unrestricted->someMulHigh->StampFactory->forKind->unrestricted->StampFactory->forKind->unrestricted->foldStamp->assertEquals->StampFactory->forKind->unrestricted->someMulHigh->StampFactory->forKind->unrestricted->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->unrestricted->someMulHigh->StampFactory->forKind->unrestricted->IntegerStamp->create->foldStamp->assertEquals->StampFactory->forKind->unrestricted->someMulHigh->StampFactory->forKind->unrestricted->IntegerStamp->create->foldStamp->assertEquals
IntegerStampTest#testMulHigh(BinaryOp, long, long, int)::: integer stamp test test mul high:::expectedResult->getExpectedValue->IntegerStamp->create->someMulHigh->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals
IntegerStampTest#getExpectedValue(BinaryOp, long, long, int)::: integer stamp test get expected value:::if->getMulHigh->return->mulHigh->else->getUMulHigh->assertEquals->return->umulHigh
IntegerStampTest#mulHigh(long, long, int)::: integer stamp test mul high:::valA->BigInteger->valueOf->valB->BigInteger->valueOf->result->valA->multiply->shiftRight->if->return->result->intValue->else->assertEquals->return->result->longValue
IntegerStampTest#umulHigh(long, long, int)::: integer stamp test umul high:::Assert->assertTrue->valA->BigInteger->valueOf->if->valA->BigInteger->valueOf->compareTo->valA->shiftLeft->add->valB->BigInteger->valueOf->if->valB->BigInteger->valueOf->compareTo->valB->shiftLeft->add->result->valA->multiply->shiftRight->if->return->result->intValue->else->return->result->longValue
IntegerStampTest#testDiv()::: integer stamp test test div:::testDiv->testDiv
IntegerStampTest#testDiv(int, long, long)::: integer stamp test test div:::div->getDiv->IntegerStamp->create->div->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->div->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->div->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->div->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->div->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->div->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals->IntegerStamp->create->div->IntegerStamp->create->IntegerStamp->create->foldStamp->assertEquals
IntegerStampTest#testEmpty()::: integer stamp test test empty:::intStamp->StampFactory->forInteger->longStamp->StampFactory->forInteger->intEmpty->StampFactory->empty->longEmpty->StampFactory->empty->intStamp->join->assertEquals->intStamp->meet->assertEquals->longStamp->join->assertEquals->longStamp->meet->assertEquals
IntegerStampTest#testUnaryOpFoldEmpty()::: integer stamp test test unary op fold empty:::Stream->of->StampFactory->forInteger->empty->map->foreach->getUnaryOps->if->Assert->op->foldStamp->isEmpty->assertTrue->forEach
IntegerStampTest#testIntegerConvertOpWithEmpty()::: integer stamp test test integer convert op with empty:::bits->new->intArr->extendOps->Arrays->getSignExtend->getZeroExtend->asList->foreach->emptyIn->StampFactory->forInteger->empty->foreach->emptyOut->StampFactory->forInteger->empty->if->foreach->folded->stamp->foldStamp->Assert->folded->isEmpty->assertTrue->Assert->folded->getBits->assertEquals->inverted->stamp->invertStamp->Assert->inverted->isEmpty->assertTrue->Assert->inverted->getBits->assertEquals->if->narrow->getNarrow->folded->narrow->foldStamp->Assert->folded->isEmpty->assertTrue->Assert->folded->getBits->assertEquals->inverted->narrow->invertStamp->Assert->inverted->isEmpty->assertTrue->if->Assert->inverted->getBits->assertEquals
LoopLivenessTest#manyLoopsSmall():::Exercise SmallLocalLiveness with 64 loops.:::for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i
LoopLivenessTest#manyLoopsLarge():::Exercise LargeLocalLiveness with 64 loops.:::i0->i1->i2->i3->i4->i5->i6->i7->i8->i9->i10->i11->i12->i13->i14->i15->i16->i17->i18->i19->i20->i21->i22->i23->i24->i25->i26->i27->i28->i29->i30->i31->i32->i33->i34->i35->i36->i37->i38->i39->i40->i41->i42->i43->i44->i45->i46->i47->i48->i49->i50->i51->i52->i53->i54->i55->i56->i57->i58->i59->i60->i61->i62->i63->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i->for->i
LoopLivenessTest#testManyLoopsSmall()::: loop liveness test test many loops small:::test
LoopLivenessTest#testManyLoopsLarge()::: loop liveness test test many loops large:::test
LoopPhiCanonicalizerTest#before()::: loop phi canonicalizer test before:::for->i
LoopPhiCanonicalizerTest#loopSnippet()::: loop phi canonicalizer test loop snippet:::a->b->c->d->sum->while->return
LoopPhiCanonicalizerTest#test()::: loop phi canonicalizer test test:::graph->parseEager->loopPhis->merge->context->getProviders->Assert->graph->getNodes->filter->count->assertEquals->new->CanonicalizerPhase->apply->Assert->graph->getNodes->filter->count->assertEquals->test
NegateNodeCanonicalizationTest#before()::: negate node canonicalization test before:::options->getInitialOptions->debug->DebugContext->create->new->StructuredGraph.Builder->build
NegateNodeCanonicalizationTest#testByte()::: negate node canonicalization test test byte:::a->new->byteArr->foreach->node->ConstantNode->forByte->expected->JavaConstant->forInt->ArithmeticOpTable->node->stamp->forStamp->getNeg->node->asConstant->foldConstant->assertEquals
NegateNodeCanonicalizationTest#testChar()::: negate node canonicalization test test char:::a->new->charArr->foreach->node->ConstantNode->forChar->expected->JavaConstant->forInt->ArithmeticOpTable->node->stamp->forStamp->getNeg->node->asConstant->foldConstant->assertEquals
NegateNodeCanonicalizationTest#testShort()::: negate node canonicalization test test short:::a->new->shortArr->foreach->node->ConstantNode->forShort->expected->JavaConstant->forInt->ArithmeticOpTable->node->stamp->forStamp->getNeg->node->asConstant->foldConstant->assertEquals
NegateNodeCanonicalizationTest#testInt()::: negate node canonicalization test test int:::a->new->intArr->foreach->node->ConstantNode->forInt->expected->JavaConstant->forInt->ArithmeticOpTable->node->stamp->forStamp->getNeg->node->asConstant->foldConstant->assertEquals
NegateNodeCanonicalizationTest#testLong()::: negate node canonicalization test test long:::a->new->longArr->foreach->node->ConstantNode->forLong->expected->JavaConstant->forLong->ArithmeticOpTable->node->stamp->forStamp->getNeg->node->asConstant->foldConstant->assertEquals
NegateNodeCanonicalizationTest#testFloat()::: negate node canonicalization test test float:::a->new->floatArr->foreach->node->ConstantNode->forFloat->expected->JavaConstant->forFloat->ArithmeticOpTable->node->stamp->forStamp->getNeg->node->asConstant->foldConstant->assertEquals
NegateNodeCanonicalizationTest#testDouble()::: negate node canonicalization test test double:::a->new->doubleArr->foreach->node->ConstantNode->forDouble->expected->JavaConstant->forDouble->ArithmeticOpTable->node->stamp->forStamp->getNeg->node->asConstant->foldConstant->assertEquals
ObjectStampJoinTest#testJoin0()::: object stamp join test test join0:::a->StampFactory->getType->object->b->StampFactory->getType->object->Assert->join->assertEquals
ObjectStampJoinTest#testJoin1()::: object stamp join test test join1:::aNonNull->StampFactory->getType->objectNonNull->b->StampFactory->getType->object->bNonNull->StampFactory->getType->objectNonNull->Assert->join->assertEquals
ObjectStampJoinTest#testJoin2()::: object stamp join test test join2:::aExact->StampFactory->getType->asExactReference->objectNonNull->b->StampFactory->getType->object->Assert->StampFactory->empty->join->assertEquals
ObjectStampJoinTest#testJoin3()::: object stamp join test test join3:::d->StampFactory->getType->object->c->StampFactory->getType->object->Assert->StampTool->join->isPointerAlwaysNull->assertTrue
ObjectStampJoinTest#testJoin4()::: object stamp join test test join4:::dExactNonNull->StampFactory->getType->objectNonNull->c->StampFactory->getType->object->Assert->StampFactory->empty->join->assertEquals
ObjectStampJoinTest#testJoin5()::: object stamp join test test join5:::dExact->StampFactory->getType->asExactReference->object->c->StampFactory->getType->object->join->join->Assert->StampTool->isPointerAlwaysNull->assertTrue->Assert->StampTool->typeReferenceOrNull->assertNull->Assert->StampTool->isExactType->assertFalse
ObjectStampJoinTest#testJoin6()::: object stamp join test test join6:::dExactNonNull->StampFactory->getType->asExactReference->objectNonNull->alwaysNull->StampFactory->alwaysNull->join->join->Assert->join->hasValues->assertFalse->Assert->StampTool->isPointerAlwaysNull->assertFalse
ObjectStampJoinTest#testJoin7()::: object stamp join test test join7:::aExact->StampFactory->getType->asExactReference->object->e->StampFactory->getType->object->join->join->Assert->StampTool->isPointerAlwaysNull->assertTrue->Assert->StampTool->typeReferenceOrNull->assertNull->Assert->StampTool->isExactType->assertFalse
ObjectStampJoinTest#testJoin8()::: object stamp join test test join8:::bExact->StampFactory->getType->asExactReference->objectNonNull->dExact->StampFactory->getType->asExactReference->object->join->join->Assert->join->hasValues->assertFalse
ObjectStampJoinTest#testJoin9()::: object stamp join test test join9:::bExact->StampFactory->getType->asExactReference->object->dExact->StampFactory->getType->asExactReference->object->join->join->Assert->StampTool->isPointerAlwaysNull->assertTrue->Assert->StampTool->typeReferenceOrNull->assertNull->Assert->StampTool->typeReferenceOrNull->assertNull
ObjectStampJoinTest#testJoinInterfaceSimple()::: object stamp join test test join interface simple:::testJoinInterface
ObjectStampJoinTest#testJoinInterfaceArray()::: object stamp join test test join interface array:::testJoinInterface
ObjectStampJoinTest#testJoinInterfaceMultiArray()::: object stamp join test test join interface multi array:::testJoinInterface
ObjectStampJoinTest#testJoinInterface(Class, Class, Class)::: object stamp join test test join interface:::testJoinInterface0->testJoinInterface1->testJoinInterface2->testJoinInterface3
ObjectStampJoinTest#testJoinInterface0(Class, Class)::: object stamp join test test join interface0:::a->StampFactory->getType->object->i->StampFactory->getType->object->Assert->StampFactory->empty->join->assertNotSame
ObjectStampJoinTest#testJoinInterface1(Class, Class)::: object stamp join test test join interface1:::aNonNull->StampFactory->getType->objectNonNull->i->StampFactory->getType->object->join->join->Assert->assertTrue->Assert->nonNull->assertTrue
ObjectStampJoinTest#testJoinInterface2(Class, Class)::: object stamp join test test join interface2:::bExact->StampFactory->getType->asExactReference->objectNonNull->i->StampFactory->getType->object->join->join->Assert->StampFactory->empty->assertEquals
ObjectStampJoinTest#testJoinInterface3(Class, Class)::: object stamp join test test join interface3:::bExact->StampFactory->getType->asExactReference->objectNonNull->i->StampFactory->TypeReference->getType->getType->createWithoutAssumptions->object->join->join->Assert->assertEquals
ObjectStampMeetTest#testMeet0()::: object stamp meet test test meet0:::check
ObjectStampMeetTest#testMeet1()::: object stamp meet test test meet1:::a->StampFactory->getType->object->aNonNull->StampFactory->getType->objectNonNull->b->StampFactory->getType->object->bNonNull->StampFactory->getType->objectNonNull->Assert->meet->assertEquals->Assert->meet->assertEquals
ObjectStampMeetTest#testMeet2()::: object stamp meet test test meet2:::a->StampFactory->getType->object->aExact->StampFactory->getType->asExactReference->objectNonNull->b->StampFactory->getType->object->Assert->meet->assertEquals
ObjectStampMeetTest#testMeet3()::: object stamp meet test test meet3:::check
ObjectStampMeetTest#testMeet4()::: object stamp meet test test meet4:::dExactNonNull->StampFactory->getType->asExactReference->objectNonNull->cExactNonNull->StampFactory->getType->asExactReference->objectNonNull->aNonNull->StampFactory->getType->objectNonNull->Assert->meet->assertEquals
ObjectStampMeetTest#testMeet5()::: object stamp meet test test meet5:::dExact->StampFactory->getType->asExactReference->object->c->StampFactory->getType->object->a->StampFactory->getType->object->Assert->meet->assertEquals
ObjectStampMeetTest#testMeet6()::: object stamp meet test test meet6:::dExactNonNull->StampFactory->getType->asExactReference->objectNonNull->alwaysNull->StampFactory->alwaysNull->dExact->StampFactory->getType->asExactReference->object->Assert->meet->assertEquals
ObjectStampMeetTest#testMeet7()::: object stamp meet test test meet7:::aExact->StampFactory->getType->asExactReference->object->e->StampFactory->getType->object->a->StampFactory->getType->object->Assert->meet->assertEquals
ObjectStampMeetTest#testMeet8()::: object stamp meet test test meet8:::check
ObjectStampMeetTest#testMeet9()::: object stamp meet test test meet9:::base1->StampFactory->getType->object->ord1->StampFactory->getType->object->ord2->StampFactory->getType->object->Assert->meet->assertEquals
ObjectStampMeetTest#testMeet10()::: object stamp meet test test meet10:::base1->StampFactory->getType->object->ord1->StampFactory->getType->object->ord2->StampFactory->getType->object->Assert->meet->assertEquals
ObjectStampMeetTest#testMeetInterface0()::: object stamp meet test test meet interface0:::check
ObjectStampMeetTest#testMeetInterface1()::: object stamp meet test test meet interface1:::check
ObjectStampMeetTest#testMeetInterface2()::: object stamp meet test test meet interface2:::check
ObjectStampMeetTest#testMeetInterface3()::: object stamp meet test test meet interface3:::check
ObjectStampMeetTest#testMeetInterface4()::: object stamp meet test test meet interface4:::check
ObjectStampMeetTest#check(Class, Class, Class)::: object stamp meet test check:::aStamp->StampFactory->getType->object->bStamp->StampFactory->getType->object->resultStamp->StampFactory->getType->object->Assert->meet->assertEquals
ObjectStampMeetTest#testMeetIllegal1()::: object stamp meet test test meet illegal1:::foreach->new->Class<?>Arr->type->getType->foreach->new->StampArr->StampFactory->object->StampFactory->objectNonNull->StampFactory->type->asExactReference->object->StampFactory->type->asExactReference->objectNonNull->if->type->getType->isConcrete->isExactType->Assert->StampFactory->empty->meet->assertEquals
ObjectStampTest#testInterfaceTrust0()::: object stamp test test interface trust0:::notTrusted->StampFactory->TypeReference->getMetaAccess->lookupJavaType->createWithoutAssumptions->object->Assert->StampFactory->object->assertEquals
ObjectStampTest#testInterfaceTrust1()::: object stamp test test interface trust1:::trusted->StampFactory->getType->object->Assert->StampFactory->object->assertNotEquals->Assert->assertTrue->trustedObjectStamp->Assert->trustedObjectStamp->type->assertNotNull->Assert->trustedObjectStamp->type->isInterface->assertTrue
PrimitiveStampBoundaryTest#generateFloatingStamps(FloatStamp)::: primitive stamp boundary test generate floating stamps:::floatTestStamps->add->foreach->newStamp->floatStamp->floatStamp->getBits->floatStampForConstant->meet->if->newStamp->isUnrestricted->floatTestStamps->add
PrimitiveStampBoundaryTest#testConvertBoundaryValues()::: primitive stamp boundary test test convert boundary values:::getSignExtend->testConvertBoundaryValues->getZeroExtend->testConvertBoundaryValues->getNarrow->testConvertBoundaryValues
PrimitiveStampBoundaryTest#testConvertBoundaryValues(IntegerConvertOp, int, int, HashSet)::: primitive stamp boundary test test convert boundary values:::foreach->if->stamp->getBits->lower->boundaryStamp->upper->boundaryStamp->op->foldStamp->checkConvertOperation->op->foldStamp->checkConvertOperation
PrimitiveStampBoundaryTest#checkConvertOperation(IntegerConvertOp, int, int, Stamp, Stamp)::: primitive stamp boundary test check convert operation:::folded->op->foldStamp->folded->isEmpty->folded->asConstant->assertTrue->result->meet->equals->result->meet->assertTrue
PrimitiveStampBoundaryTest#testFloatConvertBoundaryValues()::: primitive stamp boundary test test float convert boundary values:::foreach->EnumSet->allOf->floatConvert->getFloatConvert->if->continue->op->getInputBits->testConvertBoundaryValues->foreach->EnumSet->allOf->floatConvert->getFloatConvert->if->continue->op->getInputBits->testConvertBoundaryValues
PrimitiveStampBoundaryTest#testConvertBoundaryValues(ArithmeticOpTable.FloatConvertOp, int, HashSet)::: primitive stamp boundary test test convert boundary values:::foreach->if->stamp->getBits->lower->boundaryStamp->upper->boundaryStamp->op->foldStamp->checkConvertOperation->op->foldStamp->checkConvertOperation
PrimitiveStampBoundaryTest#shouldConstantFold(boolean, Stamp, Object, Stamp)::: primitive stamp boundary test should constant fold:::contains->assertTrue
PrimitiveStampBoundaryTest#constantFloatStampMayIncludeNegativeZero(Stamp)::: primitive stamp boundary test constant float stamp may include negative zero:::if->f->return->Double->f->lowerBound->f->upperBound->compare->f->isNonNaN->return
PrimitiveStampBoundaryTest#checkConvertOperation(ArithmeticOpTable.FloatConvertOp, Stamp, Stamp)::: primitive stamp boundary test check convert operation:::folded->op->foldStamp->folded->isEmpty->folded->asConstant->shouldConstantFold->result->meet->equals->result->meet->assertTrue
PrimitiveStampBoundaryTest#testShiftBoundaryValues()::: primitive stamp boundary test test shift boundary values:::foreach->getShiftOps->testShiftBoundaryValues
PrimitiveStampBoundaryTest#testShiftBoundaryValues(ShiftOp, HashSet, HashSet)::: primitive stamp boundary test test shift boundary values:::foreach->if->stamp->foreach->foldedStamp->shiftOp->foldStamp->if->foldedStamp->isEmpty->stamp->isEmpty->shiftStamp->isEmpty->assertTrue->continue->stamp->getBits->stamp->lowerBound->shiftStamp->lowerBound->checkShiftOperation->stamp->getBits->stamp->lowerBound->shiftStamp->upperBound->checkShiftOperation->stamp->getBits->stamp->upperBound->shiftStamp->lowerBound->checkShiftOperation->stamp->getBits->stamp->upperBound->shiftStamp->upperBound->checkShiftOperation
PrimitiveStampBoundaryTest#checkShiftOperation(int, ShiftOp, IntegerStamp, long, long)::: primitive stamp boundary test check shift operation:::v1stamp->IntegerStamp->create->v2stamp->IntegerStamp->create->folded->op->foldStamp->constant->op->JavaConstant->forPrimitiveInt->foldConstant->assertTrue->folded->asConstant->assertTrue->result->meet->equals->result->meet->assertTrue
PrimitiveStampBoundaryTest#checkBinaryOperation(ArithmeticOpTable.BinaryOp, Stamp, Stamp, Stamp)::: primitive stamp boundary test check binary operation:::if->constantFloatStampMayIncludeNegativeZero->constantFloatStampMayIncludeNegativeZero->return->folded->op->foldStamp->if->v1stamp->isEmpty->v2stamp->isEmpty->folded->isEmpty->assertTrue->v1stamp->asConstant->v1stamp->isEmpty->assertTrue->v2stamp->asConstant->v2stamp->isEmpty->assertTrue->return->constant->op->v1stamp->asConstant->v2stamp->asConstant->foldConstant->if->folded->isEmpty->assertFalse->constant2->folded->asConstant->if->c->c->getJavaKind->Double->c->asDouble->isNaN->c->getJavaKind->Float->c->asFloat->isNaN->assertTrue->else->assertTrue->if->constant->equals->op->v1stamp->asConstant->v2stamp->asConstant->foldConstant->op->foldStamp->constant->equals->assertTrue->result->meet->equals->result->meet->assertTrue
PrimitiveStampBoundaryTest#testBinaryBoundaryValues()::: primitive stamp boundary test test binary boundary values:::foreach->getBinaryOps->if->testBinaryBoundaryValues->foreach->getBinaryOps->if->testBinaryBoundaryValues
PrimitiveStampBoundaryTest#boundaryStamp(Stamp, boolean)::: primitive stamp boundary test boundary stamp:::if->v1->isEmpty->return->if->istamp->bound->istamp->upperBound->istamp->lowerBound->return->IntegerStamp->istamp->getBits->create->else->if->floatStamp->bound->floatStamp->upperBound->floatStamp->lowerBound->bits->floatStamp->getBits->return->floatStampForConstant->else->throw->new->InternalError
PrimitiveStampBoundaryTest#floatStampForConstant(double, int)::: primitive stamp boundary test float stamp for constant:::if->fbound->return->Float->isNaN->new->FloatStamp->else->return->Double->isNaN->new->FloatStamp
PrimitiveStampBoundaryTest#testBinaryBoundaryValues(ArithmeticOpTable.BinaryOp, HashSet)::: primitive stamp boundary test test binary boundary values:::foreach->foreach->if->v1->getBits->v2->getBits->v1->getClass->v2->getClass->result->op->foldStamp->v1lower->boundaryStamp->v1upper->boundaryStamp->v2lower->boundaryStamp->v2upper->boundaryStamp->checkBinaryOperation->checkBinaryOperation->checkBinaryOperation->checkBinaryOperation
PrimitiveStampBoundaryTest#testUnaryBoundaryValues()::: primitive stamp boundary test test unary boundary values:::foreach->getUnaryOps->if->testUnaryBoundaryValues->foreach->getUnaryOps->if->testUnaryBoundaryValues
PrimitiveStampBoundaryTest#testUnaryBoundaryValues(ArithmeticOpTable.UnaryOp, HashSet)::: primitive stamp boundary test test unary boundary values:::foreach->result->op->foldStamp->boundaryStamp->checkUnaryOperation->boundaryStamp->checkUnaryOperation
PrimitiveStampBoundaryTest#checkUnaryOperation(ArithmeticOpTable.UnaryOp, Stamp, Stamp)::: primitive stamp boundary test check unary operation:::folded->op->foldStamp->v1constant->v1stamp->asConstant->if->constant->op->foldConstant->if->constant2->folded->asConstant->if->c->c->getJavaKind->Double->c->asDouble->isNaN->c->getJavaKind->Float->c->asFloat->isNaN->assertTrue->else->assertTrue->constant->equals->assertTrue->else->v1stamp->isEmpty->assertTrue->result->meet->equals->result->meet->assertTrue
ReinterpretStampDoubleToLongTest#data()::: reinterpret stamp double to long test data:::ret->new->ArrayList<>->foreach->lowerBound->Double->longBitsToDouble->if->Double->isNaN->continue->foreach->upperBound->Double->longBitsToDouble->if->Double->isNaN->continue->if->Double->compare->ret->new->ObjectArr->new->FloatStamp->add->ret->new->ObjectArr->new->FloatStamp->add->ret->new->ObjectArr->new->FloatStamp->add->return
ReinterpretStampDoubleToLongTest#run()::: reinterpret stamp double to long test run:::param->StampPair->createSingle->new->ParameterNode->reinterpret->ReinterpretNode->create->resultStamp->reinterpret->stamp->Assert->resultStamp->getBits->assertEquals->foreach->input->Double->longBitsToDouble->if->inputStamp->contains->resultStamp->contains->Assert->String->format->fail
ReinterpretStampFloatToIntTest#data()::: reinterpret stamp float to int test data:::ret->new->ArrayList<>->foreach->lowerBound->Float->intBitsToFloat->if->Float->isNaN->continue->foreach->upperBound->Float->intBitsToFloat->if->Float->isNaN->continue->if->Float->compare->ret->new->ObjectArr->new->FloatStamp->add->ret->new->ObjectArr->new->FloatStamp->add->ret->new->ObjectArr->new->FloatStamp->add->return
ReinterpretStampFloatToIntTest#run()::: reinterpret stamp float to int test run:::param->StampPair->createSingle->new->ParameterNode->reinterpret->ReinterpretNode->create->reinterpret->inferStamp->resultStamp->reinterpret->stamp->Assert->resultStamp->getBits->assertEquals->foreach->input->Float->intBitsToFloat->if->inputStamp->contains->resultStamp->contains->Assert->String->format->fail
ReinterpretStampIntToFloatTest#data()::: reinterpret stamp int to float test data:::ret->new->ArrayList<>->foreach->foreach->if->ret->new->ObjectArr->StampFactory->forInteger->add->if->ret->new->ObjectArr->IntegerStamp->stampForMask->add->return
ReinterpretStampIntToFloatTest#run()::: reinterpret stamp int to float test run:::param->StampPair->createSingle->new->ParameterNode->reinterpret->ReinterpretNode->create->reinterpret->inferStamp->resultStamp->reinterpret->stamp->Assert->resultStamp->getBits->assertEquals->foreach->result->Float->intBitsToFloat->if->inputStamp->contains->resultStamp->contains->Assert->String->format->fail
ReinterpretStampLongToDoubleTest#data()::: reinterpret stamp long to double test data:::ret->new->ArrayList<>->foreach->foreach->if->ret->new->ObjectArr->StampFactory->forInteger->add->if->ret->new->ObjectArr->IntegerStamp->stampForMask->add->return
ReinterpretStampLongToDoubleTest#run()::: reinterpret stamp long to double test run:::param->StampPair->createSingle->new->ParameterNode->reinterpret->ReinterpretNode->create->reinterpret->inferStamp->resultStamp->reinterpret->stamp->Assert->resultStamp->getBits->assertEquals->foreach->result->Double->longBitsToDouble->if->inputStamp->contains->resultStamp->contains->Assert->String->format->fail
ShortCircuitOrNodeTest#shortCircuitOr(boolean, boolean)::: short circuit or node test short circuit or:::return
ShortCircuitOrNodeTest#registerInvocationPlugins(InvocationPlugins)::: short circuit or node test register invocation plugins:::r->new->Registration->r->new->InvocationPlugin->register2->super->registerInvocationPlugins
ShortCircuitOrNodeTest#testSharedConditionSnippet(Object)::: short circuit or node test test shared condition snippet:::b2->b1->if->if->shortCircuitOr->return->else->return->return
ShortCircuitOrNodeTest#testSharedCondition()::: short circuit or node test test shared condition:::test
ShortCircuitOrNodeTest#testInputCombinations(String)::: short circuit or node test test input combinations:::trueCount->for->i->return
ShortCircuitOrNodeTest#testSimpleSnippet(Boolean, Boolean)::: short circuit or node test test simple snippet:::return->shortCircuitOr
ShortCircuitOrNodeTest#testSimple()::: short circuit or node test test simple:::testInputCombinations
ShortCircuitOrNodeTest#testCascadeSnippet1(Boolean, Boolean)::: short circuit or node test test cascade snippet1:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet2(Boolean, Boolean)::: short circuit or node test test cascade snippet2:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet3(Boolean, Boolean)::: short circuit or node test test cascade snippet3:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet4(Boolean, Boolean)::: short circuit or node test test cascade snippet4:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet5(Boolean, Boolean)::: short circuit or node test test cascade snippet5:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet6(Boolean, Boolean)::: short circuit or node test test cascade snippet6:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet7(Boolean, Boolean)::: short circuit or node test test cascade snippet7:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet8(Boolean, Boolean)::: short circuit or node test test cascade snippet8:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet9(Boolean, Boolean)::: short circuit or node test test cascade snippet9:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet10(Boolean, Boolean)::: short circuit or node test test cascade snippet10:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet11(Boolean, Boolean)::: short circuit or node test test cascade snippet11:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet12(Boolean, Boolean)::: short circuit or node test test cascade snippet12:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet13(Boolean, Boolean)::: short circuit or node test test cascade snippet13:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet14(Boolean, Boolean)::: short circuit or node test test cascade snippet14:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet15(Boolean, Boolean)::: short circuit or node test test cascade snippet15:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet16(Boolean, Boolean)::: short circuit or node test test cascade snippet16:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet17(Boolean, Boolean)::: short circuit or node test test cascade snippet17:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet18(Boolean, Boolean)::: short circuit or node test test cascade snippet18:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet19(Boolean, Boolean)::: short circuit or node test test cascade snippet19:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet20(Boolean, Boolean)::: short circuit or node test test cascade snippet20:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet21(Boolean, Boolean)::: short circuit or node test test cascade snippet21:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet22(Boolean, Boolean)::: short circuit or node test test cascade snippet22:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet23(Boolean, Boolean)::: short circuit or node test test cascade snippet23:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet24(Boolean, Boolean)::: short circuit or node test test cascade snippet24:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet25(Boolean, Boolean)::: short circuit or node test test cascade snippet25:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet26(Boolean, Boolean)::: short circuit or node test test cascade snippet26:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet27(Boolean, Boolean)::: short circuit or node test test cascade snippet27:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet28(Boolean, Boolean)::: short circuit or node test test cascade snippet28:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet29(Boolean, Boolean)::: short circuit or node test test cascade snippet29:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet30(Boolean, Boolean)::: short circuit or node test test cascade snippet30:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet31(Boolean, Boolean)::: short circuit or node test test cascade snippet31:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet32(Boolean, Boolean)::: short circuit or node test test cascade snippet32:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet33(Boolean, Boolean)::: short circuit or node test test cascade snippet33:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet34(Boolean, Boolean)::: short circuit or node test test cascade snippet34:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet35(Boolean, Boolean)::: short circuit or node test test cascade snippet35:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet36(Boolean, Boolean)::: short circuit or node test test cascade snippet36:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet37(Boolean, Boolean)::: short circuit or node test test cascade snippet37:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet38(Boolean, Boolean)::: short circuit or node test test cascade snippet38:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet39(Boolean, Boolean)::: short circuit or node test test cascade snippet39:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet40(Boolean, Boolean)::: short circuit or node test test cascade snippet40:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet41(Boolean, Boolean)::: short circuit or node test test cascade snippet41:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet42(Boolean, Boolean)::: short circuit or node test test cascade snippet42:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet43(Boolean, Boolean)::: short circuit or node test test cascade snippet43:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet44(Boolean, Boolean)::: short circuit or node test test cascade snippet44:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet45(Boolean, Boolean)::: short circuit or node test test cascade snippet45:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet46(Boolean, Boolean)::: short circuit or node test test cascade snippet46:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet47(Boolean, Boolean)::: short circuit or node test test cascade snippet47:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet48(Boolean, Boolean)::: short circuit or node test test cascade snippet48:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet49(Boolean, Boolean)::: short circuit or node test test cascade snippet49:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet50(Boolean, Boolean)::: short circuit or node test test cascade snippet50:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet51(Boolean, Boolean)::: short circuit or node test test cascade snippet51:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet52(Boolean, Boolean)::: short circuit or node test test cascade snippet52:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet53(Boolean, Boolean)::: short circuit or node test test cascade snippet53:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet54(Boolean, Boolean)::: short circuit or node test test cascade snippet54:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet55(Boolean, Boolean)::: short circuit or node test test cascade snippet55:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet56(Boolean, Boolean)::: short circuit or node test test cascade snippet56:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet57(Boolean, Boolean)::: short circuit or node test test cascade snippet57:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet58(Boolean, Boolean)::: short circuit or node test test cascade snippet58:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet59(Boolean, Boolean)::: short circuit or node test test cascade snippet59:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet60(Boolean, Boolean)::: short circuit or node test test cascade snippet60:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet61(Boolean, Boolean)::: short circuit or node test test cascade snippet61:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet62(Boolean, Boolean)::: short circuit or node test test cascade snippet62:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet63(Boolean, Boolean)::: short circuit or node test test cascade snippet63:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascadeSnippet64(Boolean, Boolean)::: short circuit or node test test cascade snippet64:::return->shortCircuitOr->shortCircuitOr
ShortCircuitOrNodeTest#testCascade()::: short circuit or node test test cascade:::for->i
StaticFieldAccessTest#test()::: static field access test test:::
StructuredGraphTest#testGetBytecodeSize()::: structured graph test test get bytecode size:::options->getInitialOptions->debug->DebugContext->create->rootMethod->getResolvedJavaMethod->graph->new->StructuredGraph.Builder->method->build->otherMethod->getResolvedJavaMethod->expectedBytecodeSize->rootMethod->getCodeSize->for->i->Assert->graph->getBytecodeSize->assertEquals->new->StructuredGraph.Builder->method->build->rootMethod->getCodeSize->Assert->graph->getBytecodeSize->assertEquals->new->StructuredGraph.Builder->build->for->i->Assert->graph->getBytecodeSize->assertEquals->new->StructuredGraph.Builder->build->Assert->graph->getBytecodeSize->assertEquals

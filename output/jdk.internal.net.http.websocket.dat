jdk.internal.net.http.websocket.BuilderImpl#header(String, String)->Builder::: builder impl header
jdk.internal.net.http.websocket.BuilderImpl#subprotocols(String, String...)->Builder::: builder impl subprotocols
jdk.internal.net.http.websocket.BuilderImpl#connectTimeout(Duration)->Builder::: builder impl connect timeout
jdk.internal.net.http.websocket.BuilderImpl#buildAsync(URI, Listener)->CompletableFuture::: builder impl build async
jdk.internal.net.http.websocket.BuilderImpl#getClient()->HttpClient::: builder impl get client
jdk.internal.net.http.websocket.BuilderImpl#getUri()->URI::: builder impl get uri
jdk.internal.net.http.websocket.BuilderImpl#getListener()->Listener::: builder impl get listener
jdk.internal.net.http.websocket.BuilderImpl#getHeaders()->Collection>::: builder impl get headers
jdk.internal.net.http.websocket.BuilderImpl#getSubprotocols()->Collection::: builder impl get subprotocols
jdk.internal.net.http.websocket.BuilderImpl#getConnectTimeout()->Duration::: builder impl get connect timeout
jdk.internal.net.http.websocket.BuilderImpl#getProxySelector()->Optional::: builder impl get proxy selector
jdk.internal.net.http.websocket.FailWebSocketException#getStatusCode()->int::: fail web socket exception get status code
jdk.internal.net.http.websocket.FailWebSocketException#initCause(Throwable)->FailWebSocketException::: fail web socket exception init cause
jdk.internal.net.http.websocket.Frame.Masker#transferMasking(ByteBuffer, ByteBuffer, int)->void::: masker transfer masking
jdk.internal.net.http.websocket.Frame.Masker#mask(int)->Masker::: masker mask
jdk.internal.net.http.websocket.Frame.Masker#transferMasking(ByteBuffer, ByteBuffer)->Masker::: masker transfer masking
jdk.internal.net.http.websocket.Frame.HeaderWriter#fin(boolean)->HeaderWriter::: header writer fin
jdk.internal.net.http.websocket.Frame.HeaderWriter#rsv1(boolean)->HeaderWriter::: header writer rsv1
jdk.internal.net.http.websocket.Frame.HeaderWriter#rsv2(boolean)->HeaderWriter::: header writer rsv2
jdk.internal.net.http.websocket.Frame.HeaderWriter#rsv3(boolean)->HeaderWriter::: header writer rsv3
jdk.internal.net.http.websocket.Frame.HeaderWriter#opcode(Opcode)->HeaderWriter::: header writer opcode
jdk.internal.net.http.websocket.Frame.HeaderWriter#payloadLen(long)->HeaderWriter::: header writer payload len
jdk.internal.net.http.websocket.Frame.HeaderWriter#mask(int)->HeaderWriter::: header writer mask
jdk.internal.net.http.websocket.Frame.HeaderWriter#noMask()->HeaderWriter::: header writer no mask
jdk.internal.net.http.websocket.Frame.HeaderWriter#write(ByteBuffer)->void::: header writer write
jdk.internal.net.http.websocket.Frame.Consumer#fin(boolean)->void::: consumer fin
jdk.internal.net.http.websocket.Frame.Consumer#rsv1(boolean)->void::: consumer rsv1
jdk.internal.net.http.websocket.Frame.Consumer#rsv2(boolean)->void::: consumer rsv2
jdk.internal.net.http.websocket.Frame.Consumer#rsv3(boolean)->void::: consumer rsv3
jdk.internal.net.http.websocket.Frame.Consumer#opcode(Opcode)->void::: consumer opcode
jdk.internal.net.http.websocket.Frame.Consumer#mask(boolean)->void::: consumer mask
jdk.internal.net.http.websocket.Frame.Consumer#payloadLen(long)->void::: consumer payload len
jdk.internal.net.http.websocket.Frame.Consumer#maskingKey(int)->void::: consumer masking key
jdk.internal.net.http.websocket.Frame.Consumer#payloadData(ByteBuffer)->void::: consumer payload data
jdk.internal.net.http.websocket.Frame.Consumer#endFrame()->void::: consumer end frame
jdk.internal.net.http.websocket.Frame.Reader#readFrame(ByteBuffer, Consumer)->void::: reader read frame
jdk.internal.net.http.websocket.MessageDecoder#getOutput()->MessageStreamConsumer::: message decoder get output
jdk.internal.net.http.websocket.MessageDecoder#fin(boolean)->void::: message decoder fin
jdk.internal.net.http.websocket.MessageDecoder#rsv1(boolean)->void::: message decoder rsv1
jdk.internal.net.http.websocket.MessageDecoder#rsv2(boolean)->void::: message decoder rsv2
jdk.internal.net.http.websocket.MessageDecoder#rsv3(boolean)->void::: message decoder rsv3
jdk.internal.net.http.websocket.MessageDecoder#opcode(Opcode)->void::: message decoder opcode
jdk.internal.net.http.websocket.MessageDecoder#mask(boolean)->void::: message decoder mask
jdk.internal.net.http.websocket.MessageDecoder#payloadLen(long)->void::: message decoder payload len
jdk.internal.net.http.websocket.MessageDecoder#maskingKey(int)->void::: message decoder masking key
jdk.internal.net.http.websocket.MessageDecoder#payloadData(ByteBuffer)->void::: message decoder payload data
jdk.internal.net.http.websocket.MessageDecoder#endFrame()->void::: message decoder end frame
jdk.internal.net.http.websocket.MessageEncoder#createIntermediateBuffer(int)->ByteBuffer::: message encoder create intermediate buffer
jdk.internal.net.http.websocket.MessageEncoder#reset()->void::: message encoder reset
jdk.internal.net.http.websocket.MessageEncoder#encodeText(CharBuffer, boolean, ByteBuffer)->boolean::: message encoder encode text
jdk.internal.net.http.websocket.MessageEncoder#encodeBinary(ByteBuffer, boolean, ByteBuffer)->boolean::: message encoder encode binary
jdk.internal.net.http.websocket.MessageEncoder#encodePing(ByteBuffer, ByteBuffer)->boolean::: message encoder encode ping
jdk.internal.net.http.websocket.MessageEncoder#encodePong(ByteBuffer, ByteBuffer)->boolean::: message encoder encode pong
jdk.internal.net.http.websocket.MessageEncoder#encodeClose(int, CharBuffer, ByteBuffer)->boolean::: message encoder encode close
jdk.internal.net.http.websocket.MessageQueue#effectiveCapacityOf(int)->int::: message queue effective capacity of
jdk.internal.net.http.websocket.MessageQueue#addText(CharBuffer, boolean, T, BiConsumer, CompletableFuture)->void::: message queue add text
jdk.internal.net.http.websocket.MessageQueue#addBinary(ByteBuffer, boolean, T, BiConsumer, CompletableFuture)->void::: message queue add binary
jdk.internal.net.http.websocket.MessageQueue#addPing(ByteBuffer, T, BiConsumer, CompletableFuture)->void::: message queue add ping
jdk.internal.net.http.websocket.MessageQueue#addPong(ByteBuffer, T, BiConsumer, CompletableFuture)->void::: message queue add pong
jdk.internal.net.http.websocket.MessageQueue#addPong(Supplier, T, BiConsumer, CompletableFuture)->void::: message queue add pong
jdk.internal.net.http.websocket.MessageQueue#addClose(int, CharBuffer, T, BiConsumer, CompletableFuture)->void::: message queue add close
jdk.internal.net.http.websocket.MessageQueue#peek(QueueCallback)->R::: message queue peek
jdk.internal.net.http.websocket.MessageQueue#isEmpty()->boolean::: message queue is empty
jdk.internal.net.http.websocket.MessageQueue#remove()->void::: message queue remove
jdk.internal.net.http.websocket.MessageQueue.QueueCallback#onText(CharBuffer, boolean, T, BiConsumer, CompletableFuture)->R::: queue callback on text
jdk.internal.net.http.websocket.MessageQueue.QueueCallback#onBinary(ByteBuffer, boolean, T, BiConsumer, CompletableFuture)->R::: queue callback on binary
jdk.internal.net.http.websocket.MessageQueue.QueueCallback#onPing(ByteBuffer, T, BiConsumer, CompletableFuture)->R::: queue callback on ping
jdk.internal.net.http.websocket.MessageQueue.QueueCallback#onPong(ByteBuffer, T, BiConsumer, CompletableFuture)->R::: queue callback on pong
jdk.internal.net.http.websocket.MessageQueue.QueueCallback#onPong(Supplier, T, BiConsumer, CompletableFuture)->R::: queue callback on pong
jdk.internal.net.http.websocket.MessageQueue.QueueCallback#onClose(int, CharBuffer, T, BiConsumer, CompletableFuture)->R::: queue callback on close
jdk.internal.net.http.websocket.MessageQueue.QueueCallback#onEmpty()->R::: queue callback on empty
jdk.internal.net.http.websocket.MessageStreamConsumer#onText(CharSequence, boolean)->void::: message stream consumer on text
jdk.internal.net.http.websocket.MessageStreamConsumer#onBinary(ByteBuffer, boolean)->void::: message stream consumer on binary
jdk.internal.net.http.websocket.MessageStreamConsumer#onPing(ByteBuffer)->void::: message stream consumer on ping
jdk.internal.net.http.websocket.MessageStreamConsumer#onPong(ByteBuffer)->void::: message stream consumer on pong
jdk.internal.net.http.websocket.MessageStreamConsumer#onClose(int, CharSequence)->void::: message stream consumer on close
jdk.internal.net.http.websocket.MessageStreamConsumer#onComplete()->void::: message stream consumer on complete
jdk.internal.net.http.websocket.MessageStreamConsumer#onError(Throwable)->void::: message stream consumer on error
jdk.internal.net.http.websocket.OpeningHandshake#createRequestURI(URI)->URI::: opening handshake create request i
jdk.internal.net.http.websocket.OpeningHandshake#send()->CompletableFuture::: opening handshake send
jdk.internal.net.http.websocket.OpeningHandshake#checkPermissions(BuilderImpl, Proxy)->void:::Performs the necessary security permissions checks to connect ( possibly through a proxy ) to the builders WebSocket URI.
jdk.internal.net.http.websocket.RawChannel.Provider#rawChannel()->RawChannel::: provider raw channel
jdk.internal.net.http.websocket.RawChannel.RawEvent#interestOps()->int::: raw event interest ops
jdk.internal.net.http.websocket.RawChannel.RawEvent#handle()->void::: raw event handle
jdk.internal.net.http.websocket.RawChannel#registerEvent(RawEvent)->void::: raw channel register event
jdk.internal.net.http.websocket.RawChannel#initialByteBuffer()->ByteBuffer:::Hands over the initial bytes
jdk.internal.net.http.websocket.RawChannel#read()->ByteBuffer::: raw channel read
jdk.internal.net.http.websocket.RawChannel#write(ByteBuffer[], int, int)->long::: raw channel write
jdk.internal.net.http.websocket.RawChannel#shutdownInput()->void:::Shutdown the connection for reading without closing the channel
jdk.internal.net.http.websocket.RawChannel#shutdownOutput()->void:::Shutdown the connection for writing without closing the channel
jdk.internal.net.http.websocket.RawChannel#close()->void:::Closes this channel.
jdk.internal.net.http.websocket.StatusCodes#isLegalToSendFromClient(int)->boolean::: status codes is legal to send from client
jdk.internal.net.http.websocket.StatusCodes#isLegalToReceiveFromServer(int)->boolean::: status codes is legal to receive from server
jdk.internal.net.http.websocket.Transport#sendText(CharSequence, boolean, T, BiConsumer)->CompletableFuture::: transport send text
jdk.internal.net.http.websocket.Transport#sendBinary(ByteBuffer, boolean, T, BiConsumer)->CompletableFuture::: transport send binary
jdk.internal.net.http.websocket.Transport#sendPing(ByteBuffer, T, BiConsumer)->CompletableFuture::: transport send ping
jdk.internal.net.http.websocket.Transport#sendPong(ByteBuffer, T, BiConsumer)->CompletableFuture::: transport send pong
jdk.internal.net.http.websocket.Transport#sendPong(Supplier, T, BiConsumer)->CompletableFuture::: transport send pong
jdk.internal.net.http.websocket.Transport#sendClose(int, String, T, BiConsumer)->CompletableFuture::: transport send close
jdk.internal.net.http.websocket.Transport#request(long)->void::: transport request
jdk.internal.net.http.websocket.Transport#acknowledgeReception()->void::: transport acknowledge reception
jdk.internal.net.http.websocket.Transport#closeOutput()->void::: transport close output
jdk.internal.net.http.websocket.Transport#closeInput()->void::: transport close input
jdk.internal.net.http.websocket.TransportFactory#createTransport(MessageQueue, MessageStreamConsumer)->Transport::: transport factory create transport
jdk.internal.net.http.websocket.TransportFactoryImpl#createTransport(MessageQueue, MessageStreamConsumer)->Transport::: transport factory impl create transport
jdk.internal.net.http.websocket.TransportImpl#sendText(CharSequence, boolean, T, BiConsumer)->CompletableFuture::: transport impl send text
jdk.internal.net.http.websocket.TransportImpl#sendBinary(ByteBuffer, boolean, T, BiConsumer)->CompletableFuture::: transport impl send binary
jdk.internal.net.http.websocket.TransportImpl#sendPing(ByteBuffer, T, BiConsumer)->CompletableFuture::: transport impl send ping
jdk.internal.net.http.websocket.TransportImpl#sendPong(ByteBuffer, T, BiConsumer)->CompletableFuture::: transport impl send pong
jdk.internal.net.http.websocket.TransportImpl#sendPong(Supplier, T, BiConsumer)->CompletableFuture::: transport impl send pong
jdk.internal.net.http.websocket.TransportImpl#sendClose(int, String, T, BiConsumer)->CompletableFuture::: transport impl send close
jdk.internal.net.http.websocket.TransportImpl#request(long)->void::: transport impl request
jdk.internal.net.http.websocket.TransportImpl#acknowledgeReception()->void::: transport impl acknowledge reception
jdk.internal.net.http.websocket.TransportImpl#closeOutput()->void::: transport impl close output
jdk.internal.net.http.websocket.TransportImpl#closeInput()->void::: transport impl close input
jdk.internal.net.http.websocket.UTF8AccumulatingDecoder#decode(ByteBuffer, boolean)->CharBuffer::: f8 accumulating decoder decode
jdk.internal.net.http.websocket.WebSocketImpl#newInstanceAsync(BuilderImpl)->CompletableFuture::: web socket impl new instance async
jdk.internal.net.http.websocket.WebSocketImpl#newInstance(URI, String, Listener, TransportFactory)->WebSocketImpl::: web socket impl new instance
jdk.internal.net.http.websocket.WebSocketImpl#sendText(CharSequence, boolean)->CompletableFuture::: web socket impl send text
jdk.internal.net.http.websocket.WebSocketImpl#sendBinary(ByteBuffer, boolean)->CompletableFuture::: web socket impl send binary
jdk.internal.net.http.websocket.WebSocketImpl#sendPing(ByteBuffer)->CompletableFuture::: web socket impl send ping
jdk.internal.net.http.websocket.WebSocketImpl#sendPong(ByteBuffer)->CompletableFuture::: web socket impl send pong
jdk.internal.net.http.websocket.WebSocketImpl#sendClose(int, String)->CompletableFuture::: web socket impl send close
jdk.internal.net.http.websocket.WebSocketImpl#request(long)->void::: web socket impl request
jdk.internal.net.http.websocket.WebSocketImpl#getSubprotocol()->String::: web socket impl get subprotocol
jdk.internal.net.http.websocket.WebSocketImpl#isOutputClosed()->boolean::: web socket impl is output closed
jdk.internal.net.http.websocket.WebSocketImpl#isInputClosed()->boolean::: web socket impl is input closed
jdk.internal.net.http.websocket.WebSocketImpl#abort()->void::: web socket impl abort
jdk.internal.net.http.websocket.WebSocketImpl#toString()->String::: web socket impl to string
jdk.internal.net.http.websocket.WebSocketImpl#transport()->Transport::: web socket impl transport
jdk.internal.net.http.websocket.WebSocketRequest#isWebSocket(boolean)->void::: web socket request is web socket
jdk.internal.net.http.websocket.WebSocketRequest#setSystemHeader(String, String)->void::: web socket request set system header
jdk.internal.net.http.websocket.WebSocketRequest#setProxy(Proxy)->void::: web socket request set proxy

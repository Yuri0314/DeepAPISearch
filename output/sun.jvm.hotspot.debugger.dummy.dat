DummyAddress#equals(Object)::: dummy address equals:::if->return->if->return->return
DummyAddress#hashCode()::: dummy address hash code:::return
DummyAddress#toString()::: dummy address to string:::return->debugger->addressToString
DummyAddress#getCIntegerAt(long, long, boolean)::: dummy address get integer at:::return
DummyAddress#getAddressAt(long)::: dummy address get address at:::return->new->DummyAddress
DummyAddress#getCompOopAddressAt(long)::: dummy address get comp oop address at:::return->new->DummyAddress
DummyAddress#getCompKlassAddressAt(long)::: dummy address get comp klass address at:::return->new->DummyAddress
DummyAddress#getJBooleanAt(long)::: dummy address get boolean at:::return
DummyAddress#getJByteAt(long)::: dummy address get byte at:::return
DummyAddress#getJCharAt(long)::: dummy address get char at:::return
DummyAddress#getJDoubleAt(long)::: dummy address get double at:::return
DummyAddress#getJFloatAt(long)::: dummy address get float at:::return
DummyAddress#getJIntAt(long)::: dummy address get int at:::return
DummyAddress#getJLongAt(long)::: dummy address get long at:::return
DummyAddress#getJShortAt(long)::: dummy address get short at:::return
DummyAddress#getOopHandleAt(long)::: dummy address get oop handle at:::return->new->DummyOopHandle
DummyAddress#getCompOopHandleAt(long)::: dummy address get comp oop handle at:::return->new->DummyOopHandle
DummyAddress#setCIntegerAt(long, long, long)::: dummy address set integer at:::throw->new->DebuggerException
DummyAddress#setAddressAt(long, Address)::: dummy address set address at:::throw->new->DebuggerException
DummyAddress#setJBooleanAt(long, boolean)::: dummy address set boolean at:::throw->new->DebuggerException
DummyAddress#setJByteAt(long, byte)::: dummy address set byte at:::throw->new->DebuggerException
DummyAddress#setJCharAt(long, char)::: dummy address set char at:::throw->new->DebuggerException
DummyAddress#setJDoubleAt(long, double)::: dummy address set double at:::throw->new->DebuggerException
DummyAddress#setJFloatAt(long, float)::: dummy address set float at:::throw->new->DebuggerException
DummyAddress#setJIntAt(long, int)::: dummy address set int at:::throw->new->DebuggerException
DummyAddress#setJLongAt(long, long)::: dummy address set long at:::throw->new->DebuggerException
DummyAddress#setJShortAt(long, short)::: dummy address set short at:::throw->new->DebuggerException
DummyAddress#setOopHandleAt(long, OopHandle)::: dummy address set oop handle at:::throw->new->DebuggerException
DummyAddress#addOffsetTo(long)::: dummy address add offset to:::value->if->return->return->new->DummyAddress
DummyAddress#addOffsetToAsOopHandle(long)::: dummy address add offset to as oop handle:::value->if->return->return->new->DummyOopHandle
DummyAddress#minus(Address):::(FIXME: any signed/unsigned issues? Should this work for       OopHandles?):::if->return->return
DummyAddress#lessThan(Address)::: dummy address less than:::DummyArg->if->return->if->return->return
DummyAddress#lessThanOrEqual(Address)::: dummy address less than or equal:::DummyArg->if->return->if->return->return
DummyAddress#greaterThan(Address)::: dummy address greater than:::DummyArg->if->return->if->return->return
DummyAddress#greaterThanOrEqual(Address)::: dummy address greater than or equal:::DummyArg->if->return->if->return->return
DummyAddress#andWithMask(long)::: dummy address and with mask:::value->if->return->return->new->DummyAddress
DummyAddress#orWithMask(long)::: dummy address or with mask:::value->if->return->return->new->DummyAddress
DummyAddress#xorWithMask(long)::: dummy address xor with mask:::value->if->return->return->new->DummyAddress
DummyAddress#asLongValue()::: dummy address as long value:::return
DummyAddress#getValue()::: dummy address get value:::return
DummyAddress#check(boolean, String)::: dummy address check:::if->println->System->exit
DummyAddress#main(String[])::: dummy address main:::p1->new->DummyAddress->p2->p1->addOffsetTo->n1->p2->addOffsetTo->n2->n1->addOffsetTo->p1->lessThan->check->p1->lessThan->check->p1->lessThan->check->p2->lessThan->check->p2->lessThan->check->n1->lessThan->check->p1->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n2->lessThan->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->greaterThan->check->n2->greaterThan->check->n2->greaterThan->check->n1->greaterThan->check->n1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->n2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->println
DummyDebugger#hasProcessList()::: dummy debugger has process list:::return
DummyDebugger#getProcessList()::: dummy debugger get process list:::return
DummyDebugger#attach(int)::: dummy debugger attach:::
DummyDebugger#attach(String, String)::: dummy debugger attach:::
DummyDebugger#detach()::: dummy debugger detach:::return
DummyDebugger#parseAddress(String)::: dummy debugger parse address:::s->addrStr->trim->if->s->startsWith->throw->new->NumberFormatException->l->for->i->s->length->return->new->DummyAddress
DummyDebugger#getAddressValue(Address)::: dummy debugger get address value:::if->return->return->getValue
DummyDebugger#getOS()::: dummy debugger get s:::return->PlatformInfo->getOS
DummyDebugger#getCPU()::: dummy debugger get u:::return->PlatformInfo->getCPU
DummyDebugger#getMachineDescription()::: dummy debugger get machine description:::return
DummyDebugger#hasConsole()::: dummy debugger has console:::return
DummyDebugger#consoleExecuteCommand(String)::: dummy debugger console execute command:::throw->new->DebuggerException
DummyDebugger#getConsolePrompt()::: dummy debugger get console prompt:::throw->new->DebuggerException
DummyDebugger#getCDebugger()::: dummy debugger get debugger:::return
DummyDebugger#lookup(String, String)::: dummy debugger lookup:::return
DummyDebugger#lookupOop(String, String)::: dummy debugger lookup oop:::return
DummyDebugger#getThreadForIdentifierAddress(Address)::: dummy debugger get thread for identifier address:::return
DummyDebugger#getThreadForThreadId(long)::: dummy debugger get thread for thread id:::return
DummyDebugger#readBytesFromProcess(long, long)::: dummy debugger read bytes from process:::throw->new->DebuggerException
DummyDebugger#writeBytesToProcess(long, long, byte[])::: dummy debugger write bytes to process:::throw->new->DebuggerException
DummyDebugger#addressToString(DummyAddress)::: dummy debugger address to string:::buf->new->StringBuffer->buf->append->val->if->else->Long->addr->getValue->toHexString->for->i->machDesc->getAddressSize->val->length->buf->append->return->buf->toString
DummyDebugger#charToNibble(char)::: dummy debugger char to nibble:::if->return->else->if->return->else->if->return->throw->new->Character->toString->new->NumberFormatException
DummyOopHandle#equals(Object)::: dummy oop handle equals:::if->return->if->return->return
DummyOopHandle#addOffsetTo(long)::: dummy oop handle add offset to:::throw->new->UnsupportedOperationException
DummyOopHandle#andWithMask(long)::: dummy oop handle and with mask:::throw->new->UnsupportedOperationException
DummyOopHandle#orWithMask(long)::: dummy oop handle or with mask:::throw->new->UnsupportedOperationException
DummyOopHandle#xorWithMask(long)::: dummy oop handle xor with mask:::throw->new->UnsupportedOperationException

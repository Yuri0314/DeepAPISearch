AbstractCalendar#getWeekLength():::Returns 7 in this default implementation.:::return
AbstractCalendar#getDayOfWeekDateBefore(long, int):::Returns a date of the given day of week before the given fixed date.:::return->getDayOfWeekDateOnOrBefore
AbstractCalendar#getDayOfWeekDateAfter(long, int):::Returns a date of the given day of week that is closest to and after the given fixed date.:::return->getDayOfWeekDateOnOrBefore
AbstractCalendar#getFixedDate(CalendarDate):::Returns the fixed date calculated with the specified calendar date:::
AbstractCalendar#getCalendarDateFromFixedDate(CalendarDate, long):::Calculates calendar fields from the specified fixed date:::
BaseCalendar#getYearLength(CalendarDate):::Returns 366 if the specified date is in a leap year, or 365 otherwise This method does not perform the normalization with the specified CalendarDate:::return->getNormalizedYear->isLeapYear
BaseCalendar#getDayOfWeek(CalendarDate):::Returns the day of week of the given Gregorian date.:::fixedDate->getFixedDate->return->getDayOfWeekFromFixedDate
BaseCalendar#getGregorianYearFromFixedDate(long):::Returns the Gregorian year number of the given fixed date.:::d0->d1->d2->d3->d4->n400->n100->n4->n1->year->if->else->CalendarUtils->floorDivide->CalendarUtils->mod->CalendarUtils->floorDivide->CalendarUtils->mod->CalendarUtils->floorDivide->CalendarUtils->mod->CalendarUtils->floorDivide->CalendarUtils->mod->if->return
CalendarDate#setEra(Era):::Sets the era of the date to the specified era:::if->return->return
CalendarDate#isLeapYear():::Returns whether the year represented by this CalendarDate is a leap year:::return
CalendarDate#getDayOfWeek():::Returns the day of week value:::if->isNormalized->return
CalendarDate#isSameDate(CalendarDate):::Returns whether the specified date is the same date of this CalendarDate:::return->getDayOfWeek->date->getDayOfWeek->getMonth->date->getMonth->getYear->date->getYear->getEra->date->getEra
CalendarDate#clone():::Returns a copy of this CalendarDate:::try->return->super->clone->catch->throw->new->InternalError->finally
CalendarDate#toString():::Converts calendar date values to a String in the following format:::sb->new->StringBuilder->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->if->sb->append->else->if->offset->sign->if->else->sb->append->CalendarUtils->sprintf0d->CalendarUtils->sprintf0d->else->sb->append->return->sb->toString
CalendarSystem#getGregorianCalendar():::Returns the singleton instance of the Gregorian calendar system.:::return
CalendarSystem#forName(String):::Returns a CalendarSystem specified by the calendar name:::if->equals->return->if->initNames->cal->calendars->get->if->return->className->names->get->if->return->if->className->endsWith->LocalGregorianCalendar->getLocalGregorianCalendar->else->try->tmp->Class->forName->newInstance->catch->throw->new->InternalError->finally->if->return->cs->calendars->putIfAbsent->return
CalendarSystem#getName():::Returns the name of this calendar system.:::
CalendarSystem#getCalendarDate(long):::Calculates calendar fields from the specified number of milliseconds since the Epoch, January 1, 1970 00:00:00 UTC (Gregorian):::
CalendarSystem#newCalendarDate():::Constructs a CalendarDate that is specific to this calendar system:::
CalendarSystem#getTime(CalendarDate):::Returns the number of milliseconds since the Epoch, January 1, 1970 00:00:00 UTC (Gregorian), represented by the specified CalendarDate.:::
CalendarSystem#getYearLength(CalendarDate):::Returns the length in days of the specified year by date:::
CalendarSystem#getYearLengthInMonths(CalendarDate):::Returns the number of months of the specified year:::
CalendarSystem#getWeekLength():::Returns the length in days of a week in this calendar system:::
CalendarSystem#getEra(String):::Returns the Era designated by the era name that has to be known to this calendar system:::
CalendarSystem#getEras():::Returns valid Eras of this calendar system:::
CalendarSystem#getNthDayOfWeek(int, int, CalendarDate):::Returns a CalendarDate of the n-th day of week which is on, after or before the specified date:::
CalendarSystem#validate(CalendarDate):::Checks whether the calendar fields specified by date represents a valid date and time in this calendar system:::
CalendarSystem#normalize(CalendarDate):::Normalizes calendar fields in the specified date:::
CalendarUtils#isGregorianLeapYear(int):::Returns whether the specified year is a leap year in the Gregorian calendar system.:::return
CalendarUtils#isJulianLeapYear(int):::Returns whether the specified year is a leap year in the Julian calendar system:::return
CalendarUtils#floorDivide(long, long):::Divides two integers and returns the floor of the quotient:::return
CalendarUtils#floorDivide(int, int):::Divides two integers and returns the floor of the quotient:::return
CalendarUtils#floorDivide(int, int, int[]):::Divides two integers and returns the floor of the quotient and the modulus remainder:::if->return->q->return
CalendarUtils#floorDivide(long, int, int[]):::Divides two integers and returns the floor of the quotient and the modulus remainder:::if->return->q->return
CalendarUtils#sprintf0d(StringBuilder, int, int):::Mimics sprintf(buf, "%0*d", decaimal, width).:::d->if->sb->append->n->for->i->for->i->sb->append->return
JulianCalendar#getYearFromFixedDate(long):::Returns the normalized Julian year number of the given fixed date.:::year->CalendarUtils->floorDivide->return
LocalGregorianCalendar#isLeapYear(int):::Returns whether the specified Gregorian year is a leap year.:::return->CalendarUtils->isGregorianLeapYear
ZoneInfo#getOffset(long):::Returns the difference in milliseconds between local time and UTC of given time, taking into account both the raw offset and the effect of daylight savings.:::return->getOffsets
ZoneInfo#getOffset(int, int, int, int, int, int):::Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight savings, for the specified date and time:::if->throw->new->IllegalArgumentException->if->else->if->throw->new->IllegalArgumentException->gcal->CalendarSystem->getGregorianCalendar->date->gcal->newCalendarDate->date->setDate->if->gcal->validate->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->return->getLastRawOffset->dateInMillis->gcal->getTime->return->getOffsets
ZoneInfo#setRawOffset(int):::Sets the base time zone offset from GMT:::if->return->if->lastRule->setRawOffset
ZoneInfo#getRawOffset():::Returns the GMT offset of the current date:::if->return->offsets->new->intArr->System->currentTimeMillis->getOffsets->return
ZoneInfo#useDaylightTime():::Queries if this time zone uses Daylight Saving Time in the last known rule.:::return
ZoneInfo#inDaylightTime(Date):::Queries if the specified date is in Daylight Saving Time.:::if->throw->new->NullPointerException->if->return->utc->date->getTime->index->getTransitionIndex->if->return->if->return->tz->getLastRule->if->return->tz->inDaylightTime->else->return
ZoneInfo#getDSTSavings():::Returns the amount of time in milliseconds that the clock is advanced during daylight saving time is in effect in its last daylight saving time rule.:::return
ZoneInfo#toString():::Returns a string representation of this time zone.:::return->getClass->getName->getID->getLastRawOffset->useDaylightTime->getLastRuleInstance
ZoneInfo#getAvailableIDs():::Gets all available IDs supported in the Java run-time.:::return->ZoneInfoFile->getZoneIds
ZoneInfo#getAvailableIDs(int):::Gets all available IDs that have the same value as the specified raw GMT offset.:::return->ZoneInfoFile->getZoneIds
ZoneInfo#getTimeZone(String):::Gets the ZoneInfo for the given ID.:::return->ZoneInfoFile->getZoneInfo
ZoneInfo#getLastRuleInstance():::Returns a SimpleTimeZone object that represents the last known daylight saving time rules.:::if->return->if->return->getLastRawOffset->getID->new->SimpleTimeZone->return->getLastRawOffset->getID->new->SimpleTimeZone
ZoneInfo#clone():::Returns a copy of this ZoneInfo.:::zi->super->clone->return
ZoneInfo#hashCode():::Returns a hash code value calculated from the GMT offset and transitions.:::return->getLastRawOffset
ZoneInfo#equals(Object):::Compares the equity of two ZoneInfo objects.:::if->return->if->return->that->return->getID->that->getID->equals->getLastRawOffset->that->getLastRawOffset
ZoneInfo#hasSameRules(TimeZone):::Returns true if this zone has the same raw GMT offset value and transition table as another zone info:::if->return->if->return->if->if->getRawOffset->other->getRawOffset->return->if->useDaylightTime->other->useDaylightTime->return->return->if->getLastRawOffset->getLastRawOffset->return->return
ZoneInfo#getAliasTable():::Returns a Map from alias time zone IDs to their standard time zone IDs.:::return->ZoneInfoFile->getAliasMap
ZoneInfoFile#getZoneIds():::Gets all available IDs supported in the Java run-time.:::len->if->ids->Arrays->copyOf->i->if->for->j->return
ZoneInfoFile#getZoneIds(int):::Gets all available IDs that have the same value as the specified raw GMT offset.:::ids->new->ArrayList<>->foreach->getZoneIds->zi->getZoneInfo->if->zi->getRawOffset->ids->add->list->ids->ids->size->new->StringArr->toArray->Arrays->sort->return
ZoneInfoFile#getAliasMap():::Returns a Map from alias time zone IDs to their standard time zone IDs.:::return->Collections->unmodifiableMap
ZoneInfoFile#getVersion():::Gets the version of this tz data.:::return
ZoneInfoFile#getCustomTimeZone(String, int):::Gets a ZoneInfo with the given GMT offset:::id->toCustomID->return->new->ZoneInfo

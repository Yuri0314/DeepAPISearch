AbstractCalendar#getEra(String)::: abstract calendar get era:::if->foreach->if->era->getName->equals->return->return
AbstractCalendar#getEras()::: abstract calendar get eras:::e->if->new->EraArr->System->arraycopy->return
AbstractCalendar#setEra(CalendarDate, String)::: abstract calendar set era:::if->return->for->i->throw->new->IllegalArgumentException
AbstractCalendar#setEras(Era[])::: abstract calendar set eras:::
AbstractCalendar#getCalendarDate()::: abstract calendar get calendar date:::return->System->currentTimeMillis->newCalendarDate->getCalendarDate
AbstractCalendar#getCalendarDate(long)::: abstract calendar get calendar date:::return->newCalendarDate->getCalendarDate
AbstractCalendar#getCalendarDate(long, TimeZone)::: abstract calendar get calendar date:::date->newCalendarDate->return->getCalendarDate
AbstractCalendar#getCalendarDate(long, CalendarDate)::: abstract calendar get calendar date:::ms->zoneOffset->saving->days->zi->date->getZone->if->offsets->new->intArr->if->getOffsets->else->zi->getOffset->zi->getRawOffset->date->setZoneOffset->date->setDaylightSaving->if->else->while->getCalendarDateFromFixedDate->setTimeOfDay->date->isLeapYear->setLeapYear->date->setNormalized->return
AbstractCalendar#getTime(CalendarDate)::: abstract calendar get time:::gd->getFixedDate->ms->getTimeOfDay->zoneOffset->zi->date->getZone->if->if->date->isNormalized->return->date->getZoneOffset->offsets->new->intArr->if->date->isStandardTime->if->getOffsetsByStandard->else->zi->zi->getRawOffset->getOffset->else->if->getOffsetsByWall->else->zi->zi->getRawOffset->getOffset->getCalendarDate->return
AbstractCalendar#getTimeOfDay(CalendarDate)::: abstract calendar get time of day:::fraction->date->getTimeOfDay->if->return->getTimeOfDayValue->date->setTimeOfDay->return
AbstractCalendar#getTimeOfDayValue(CalendarDate)::: abstract calendar get time of day value:::fraction->date->getHours->date->getMinutes->date->getSeconds->date->getMillis->return
AbstractCalendar#setTimeOfDay(CalendarDate, int)::: abstract calendar set time of day:::if->throw->new->IllegalArgumentException->normalizedState->cdate->isNormalized->time->hours->minutes->seconds->cdate->setHours->cdate->setMinutes->cdate->setSeconds->cdate->setMillis->cdate->setTimeOfDay->if->cdate->setNormalized->return
AbstractCalendar#getWeekLength():::Returns 7 in this default implementation.:::return
AbstractCalendar#isLeapYear(CalendarDate)::: abstract calendar is leap year:::
AbstractCalendar#getNthDayOfWeek(int, int, CalendarDate)::: abstract calendar get nth day of week:::ndate->date->clone->normalize->fd->getFixedDate->nfd->if->getDayOfWeekDateBefore->else->getDayOfWeekDateAfter->getCalendarDateFromFixedDate->return
AbstractCalendar#getDayOfWeekDateBefore(long, int):::Returns a date of the given day of week before the given fixed date.:::return->getDayOfWeekDateOnOrBefore
AbstractCalendar#getDayOfWeekDateAfter(long, int):::Returns a date of the given day of week that is closest to and after the given fixed date.:::return->getDayOfWeekDateOnOrBefore
AbstractCalendar#getDayOfWeekDateOnOrBefore(long, int)::: abstract calendar get day of week date on or before:::fd->if->return->return->CalendarUtils->mod
AbstractCalendar#getFixedDate(CalendarDate):::Returns the fixed date calculated with the specified calendar date:::
AbstractCalendar#getCalendarDateFromFixedDate(CalendarDate, long):::Calculates calendar fields from the specified fixed date:::
AbstractCalendar#validateTime(CalendarDate)::: abstract calendar validate time:::t->date->getHours->if->return->date->getMinutes->if->return->date->getSeconds->if->return->date->getMillis->if->return->return
AbstractCalendar#normalizeTime(CalendarDate)::: abstract calendar normalize time:::fraction->getTimeOfDay->days->if->else->if->CalendarUtils->floorDivide->if->if->date->setTimeOfDay->date->setMillis->date->setSeconds->date->setMinutes->date->setHours->return
BaseCalendar.Date#setNormalizedDate(int, int, int)::: date set normalized date:::setNormalizedYear->setMonth->setDayOfMonth->return
BaseCalendar.Date#getNormalizedYear()::: date get normalized year:::
BaseCalendar.Date#setNormalizedYear(int)::: date set normalized year:::
BaseCalendar.Date#hit(int)::: date hit:::return
BaseCalendar.Date#hit(long)::: date hit:::return
BaseCalendar.Date#getCachedYear()::: date get cached year:::return
BaseCalendar.Date#getCachedJan1()::: date get cached jan1:::return
BaseCalendar.Date#setCache(int, long, int)::: date set cache:::
BaseCalendar#validate(CalendarDate)::: base calendar validate:::bdate->if->bdate->isNormalized->return->month->bdate->getMonth->if->return->d->bdate->getDayOfMonth->if->bdate->getNormalizedYear->getMonthLength->return->dow->bdate->getDayOfWeek->if->getDayOfWeek->return->if->validateTime->return->bdate->setNormalized->return
BaseCalendar#normalize(CalendarDate)::: base calendar normalize:::if->date->isNormalized->return->bdate->zi->bdate->getZone->if->getTime->return->days->normalizeTime->normalizeMonth->d->bdate->getDayOfMonth->m->bdate->getMonth->y->bdate->getNormalizedYear->ml->getMonthLength->if->if->getMonthLength->bdate->setDayOfMonth->if->bdate->setNormalizedYear->bdate->setMonth->else->if->bdate->setDayOfMonth->if->bdate->setNormalizedYear->bdate->setMonth->else->fixedDate->getFixedDate->getCalendarDateFromFixedDate->else->bdate->getDayOfWeek->setDayOfWeek->date->bdate->getNormalizedYear->isLeapYear->setLeapYear->date->setZoneOffset->date->setDaylightSaving->bdate->setNormalized->return
BaseCalendar#normalizeMonth(CalendarDate)::: base calendar normalize month:::bdate->year->bdate->getNormalizedYear->month->bdate->getMonth->if->xm->bdate->setNormalizedYear->bdate->setMonth->else->if->bdate->setNormalizedYear->bdate->setMonth
BaseCalendar#getYearLength(CalendarDate):::Returns 366 if the specified date is in a leap year, or 365 otherwise This method does not perform the normalization with the specified CalendarDate:::return->getNormalizedYear->isLeapYear
BaseCalendar#getYearLengthInMonths(CalendarDate)::: base calendar get year length in months:::return
BaseCalendar#getMonthLength(CalendarDate)::: base calendar get month length:::gdate->month->gdate->getMonth->if->throw->new->IllegalArgumentException->return->gdate->getNormalizedYear->getMonthLength
BaseCalendar#getMonthLength(int, int)::: base calendar get month length:::days->if->isLeapYear->return
BaseCalendar#getDayOfYear(CalendarDate)::: base calendar get day of year:::return->getNormalizedYear->date->getMonth->date->getDayOfMonth->getDayOfYear
BaseCalendar#getDayOfYear(int, int, int)::: base calendar get day of year:::return->isLeapYear
BaseCalendar#getFixedDate(CalendarDate)::: base calendar get fixed date:::if->date->isNormalized->normalizeMonth->return->getNormalizedYear->date->getMonth->date->getDayOfMonth->getFixedDate
BaseCalendar#getFixedDate(int, int, int, BaseCalendar.Date)::: base calendar get fixed date:::isJan1->if->cache->hit->if->return->cache->getCachedJan1->return->cache->getCachedJan1->getDayOfYear->n->if->jan1->if->cache->isLeapYear->setCache->return->getDayOfYear->prevyear->days->if->else->CalendarUtils->floorDivide->CalendarUtils->floorDivide->CalendarUtils->floorDivide->CalendarUtils->floorDivide->if->isLeapYear->if->cache->isLeapYear->setCache->return
BaseCalendar#getCalendarDateFromFixedDate(CalendarDate, long)::: base calendar get calendar date from fixed date:::gdate->year->jan1->isLeap->if->gdate->hit->gdate->getCachedYear->gdate->getCachedJan1->isLeapYear->else->getGregorianYearFromFixedDate->getFixedDate->isLeapYear->gdate->setCache->priorDays->mar1->if->if->month->if->else->CalendarUtils->floorDivide->month1->if->dayOfMonth->dayOfWeek->getDayOfWeekFromFixedDate->gdate->setNormalizedYear->gdate->setMonth->gdate->setDayOfMonth->gdate->setDayOfWeek->gdate->setLeapYear->gdate->setNormalized
BaseCalendar#getDayOfWeek(CalendarDate):::Returns the day of week of the given Gregorian date.:::fixedDate->getFixedDate->return->getDayOfWeekFromFixedDate
BaseCalendar#getDayOfWeekFromFixedDate(long)::: base calendar get day of week from fixed date:::if->return->return->CalendarUtils->mod
BaseCalendar#getYearFromFixedDate(long)::: base calendar get year from fixed date:::return->getGregorianYearFromFixedDate
BaseCalendar#getGregorianYearFromFixedDate(long):::Returns the Gregorian year number of the given fixed date.:::d0->d1->d2->d3->d4->n400->n100->n4->n1->year->if->else->CalendarUtils->floorDivide->CalendarUtils->mod->CalendarUtils->floorDivide->CalendarUtils->mod->CalendarUtils->floorDivide->CalendarUtils->mod->CalendarUtils->floorDivide->CalendarUtils->mod->if->return
BaseCalendar#isLeapYear(CalendarDate)::: base calendar is leap year:::return->getNormalizedYear->isLeapYear
BaseCalendar#isLeapYear(int)::: base calendar is leap year:::return->CalendarUtils->isGregorianLeapYear
CalendarDate#getEra()::: calendar date get era:::return
CalendarDate#setEra(Era):::Sets the era of the date to the specified era:::if->return->return
CalendarDate#getYear()::: calendar date get year:::return
CalendarDate#setYear(int)::: calendar date set year:::if->return
CalendarDate#addYear(int)::: calendar date add year:::if->return
CalendarDate#isLeapYear():::Returns whether the year represented by this CalendarDate is a leap year:::return
CalendarDate#setLeapYear(boolean)::: calendar date set leap year:::
CalendarDate#getMonth()::: calendar date get month:::return
CalendarDate#setMonth(int)::: calendar date set month:::if->return
CalendarDate#addMonth(int)::: calendar date add month:::if->return
CalendarDate#getDayOfMonth()::: calendar date get day of month:::return
CalendarDate#setDayOfMonth(int)::: calendar date set day of month:::if->return
CalendarDate#addDayOfMonth(int)::: calendar date add day of month:::if->return
CalendarDate#getDayOfWeek():::Returns the day of week value:::if->isNormalized->return
CalendarDate#getHours()::: calendar date get hours:::return
CalendarDate#setHours(int)::: calendar date set hours:::if->return
CalendarDate#addHours(int)::: calendar date add hours:::if->return
CalendarDate#getMinutes()::: calendar date get minutes:::return
CalendarDate#setMinutes(int)::: calendar date set minutes:::if->return
CalendarDate#addMinutes(int)::: calendar date add minutes:::if->return
CalendarDate#getSeconds()::: calendar date get seconds:::return
CalendarDate#setSeconds(int)::: calendar date set seconds:::if->return
CalendarDate#addSeconds(int)::: calendar date add seconds:::if->return
CalendarDate#getMillis()::: calendar date get millis:::return
CalendarDate#setMillis(int)::: calendar date set millis:::if->return
CalendarDate#addMillis(int)::: calendar date add millis:::if->return
CalendarDate#getTimeOfDay()::: calendar date get time of day:::if->isNormalized->return->return
CalendarDate#setDate(int, int, int)::: calendar date set date:::setYear->setMonth->setDayOfMonth->return
CalendarDate#addDate(int, int, int)::: calendar date add date:::addYear->addMonth->addDayOfMonth->return
CalendarDate#setTimeOfDay(int, int, int, int)::: calendar date set time of day:::setHours->setMinutes->setSeconds->setMillis->return
CalendarDate#addTimeOfDay(int, int, int, int)::: calendar date add time of day:::addHours->addMinutes->addSeconds->addMillis->return
CalendarDate#setTimeOfDay(long)::: calendar date set time of day:::
CalendarDate#isNormalized()::: calendar date is normalized:::return
CalendarDate#isStandardTime()::: calendar date is standard time:::return
CalendarDate#setStandardTime(boolean)::: calendar date set standard time:::
CalendarDate#isDaylightTime()::: calendar date is daylight time:::if->isStandardTime->return->return
CalendarDate#setLocale(Locale)::: calendar date set locale:::
CalendarDate#getZone()::: calendar date get zone:::return
CalendarDate#setZone(TimeZone)::: calendar date set zone:::return
CalendarDate#isSameDate(CalendarDate):::Returns whether the specified date is the same date of this CalendarDate:::return->getDayOfWeek->date->getDayOfWeek->getMonth->date->getMonth->getYear->date->getYear->getEra->date->getEra
CalendarDate#equals(Object)::: calendar date equals:::if->return->that->if->isNormalized->that->isNormalized->return->hasZone->thatHasZone->if->return->if->zoneinfo->equals->return->return->getEra->that->getEra
CalendarDate#hashCode()::: calendar date hash code:::hash->normalized->isNormalized->era->e->getEra->if->e->hashCode->zone->zoneinfo->hashCode->return
CalendarDate#clone():::Returns a copy of this CalendarDate:::try->return->super->clone->catch->throw->new->InternalError->finally
CalendarDate#toString():::Converts calendar date values to a String in the following format:::sb->new->StringBuilder->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->append->CalendarUtils->sprintf0d->if->sb->append->else->if->offset->sign->if->else->sb->append->CalendarUtils->sprintf0d->CalendarUtils->sprintf0d->else->sb->append->return->sb->toString
CalendarDate#setDayOfWeek(int)::: calendar date set day of week:::
CalendarDate#setNormalized(boolean)::: calendar date set normalized:::
CalendarDate#getZoneOffset()::: calendar date get zone offset:::return
CalendarDate#setZoneOffset(int)::: calendar date set zone offset:::
CalendarDate#getDaylightSaving()::: calendar date get daylight saving:::return
CalendarDate#setDaylightSaving(int)::: calendar date set daylight saving:::
CalendarSystem#initNames()::: calendar system init names:::nameMap->new->ConcurrentHashMap<>->clName->new->StringBuilder->for->i->synchronized->if->new->ConcurrentHashMap<>
CalendarSystem#getGregorianCalendar():::Returns the singleton instance of the Gregorian calendar system.:::return
CalendarSystem#forName(String):::Returns a CalendarSystem specified by the calendar name:::if->equals->return->if->initNames->cal->calendars->get->if->return->className->names->get->if->return->if->className->endsWith->LocalGregorianCalendar->getLocalGregorianCalendar->else->try->tmp->Class->forName->newInstance->catch->throw->new->InternalError->finally->if->return->cs->calendars->putIfAbsent->return
CalendarSystem#getName():::Returns the name of this calendar system.:::
CalendarSystem#getCalendarDate()::: calendar system get calendar date:::
CalendarSystem#getCalendarDate(long):::Calculates calendar fields from the specified number of milliseconds since the Epoch, January 1, 1970 00:00:00 UTC (Gregorian):::
CalendarSystem#getCalendarDate(long, CalendarDate)::: calendar system get calendar date:::
CalendarSystem#getCalendarDate(long, TimeZone)::: calendar system get calendar date:::
CalendarSystem#newCalendarDate():::Constructs a CalendarDate that is specific to this calendar system:::
CalendarSystem#newCalendarDate(TimeZone)::: calendar system new calendar date:::
CalendarSystem#getTime(CalendarDate):::Returns the number of milliseconds since the Epoch, January 1, 1970 00:00:00 UTC (Gregorian), represented by the specified CalendarDate.:::
CalendarSystem#getYearLength(CalendarDate):::Returns the length in days of the specified year by date:::
CalendarSystem#getYearLengthInMonths(CalendarDate):::Returns the number of months of the specified year:::
CalendarSystem#getMonthLength(CalendarDate)::: calendar system get month length:::
CalendarSystem#getWeekLength():::Returns the length in days of a week in this calendar system:::
CalendarSystem#getEra(String):::Returns the Era designated by the era name that has to be known to this calendar system:::
CalendarSystem#getEras():::Returns valid Eras of this calendar system:::
CalendarSystem#setEra(CalendarDate, String)::: calendar system set era:::
CalendarSystem#getNthDayOfWeek(int, int, CalendarDate):::Returns a CalendarDate of the n-th day of week which is on, after or before the specified date:::
CalendarSystem#setTimeOfDay(CalendarDate, int)::: calendar system set time of day:::
CalendarSystem#validate(CalendarDate):::Checks whether the calendar fields specified by date represents a valid date and time in this calendar system:::
CalendarSystem#normalize(CalendarDate):::Normalizes calendar fields in the specified date:::
CalendarUtils#isGregorianLeapYear(int):::Returns whether the specified year is a leap year in the Gregorian calendar system.:::return
CalendarUtils#isJulianLeapYear(int):::Returns whether the specified year is a leap year in the Julian calendar system:::return
CalendarUtils#floorDivide(long, long):::Divides two integers and returns the floor of the quotient:::return
CalendarUtils#floorDivide(int, int):::Divides two integers and returns the floor of the quotient:::return
CalendarUtils#floorDivide(int, int, int[]):::Divides two integers and returns the floor of the quotient and the modulus remainder:::if->return->q->return
CalendarUtils#floorDivide(long, int, int[]):::Divides two integers and returns the floor of the quotient and the modulus remainder:::if->return->q->return
CalendarUtils#mod(long, long)::: calendar utils mod:::return->floorDivide
CalendarUtils#mod(int, int)::: calendar utils mod:::return->floorDivide
CalendarUtils#amod(int, int)::: calendar utils amod:::z->mod->return
CalendarUtils#amod(long, long)::: calendar utils amod:::z->mod->return
CalendarUtils#sprintf0d(StringBuilder, int, int):::Mimics sprintf(buf, "%0*d", decaimal, width).:::d->if->sb->append->n->for->i->for->i->sb->append->return
CalendarUtils#sprintf0d(StringBuffer, int, int)::: calendar utils sprintf0d:::d->if->sb->append->n->for->i->for->i->sb->append->return
Era#getName()::: era get name:::return
Era#getDisplayName(Locale)::: era get display name:::return
Era#getAbbreviation()::: era get abbreviation:::return
Era#getDiaplayAbbreviation(Locale)::: era get diaplay abbreviation:::return
Era#getSince(TimeZone)::: era get since:::if->return->offset->zone->getOffset->return
Era#getSinceDate()::: era get since date:::return
Era#isLocalTime()::: era is local time:::return
Era#equals(Object)::: era equals:::if->return->that->return->name->equals->abbr->equals
Era#hashCode()::: era hash code:::if->name->hashCode->abbr->hashCode->return
Era#toString()::: era to string:::sb->new->StringBuilder->sb->append->sb->getName->append->append->sb->getAbbreviation->append->append->sb->append->getSinceDate->append->if->sb->sb->length->setLength->sb->append->sb->append->return->sb->toString
Gregorian.Date#getNormalizedYear()::: date get normalized year:::return->getYear
Gregorian.Date#setNormalizedYear(int)::: date set normalized year:::setYear
Gregorian#getName()::: gregorian get name:::return
Gregorian#getCalendarDate()::: gregorian get calendar date:::return->System->currentTimeMillis->newCalendarDate->getCalendarDate
Gregorian#getCalendarDate(long)::: gregorian get calendar date:::return->newCalendarDate->getCalendarDate
Gregorian#getCalendarDate(long, CalendarDate)::: gregorian get calendar date:::return->super->getCalendarDate
Gregorian#getCalendarDate(long, TimeZone)::: gregorian get calendar date:::return->newCalendarDate->getCalendarDate
Gregorian#newCalendarDate()::: gregorian new calendar date:::return->new->Date
Gregorian#newCalendarDate(TimeZone)::: gregorian new calendar date:::return->new->Date
ImmutableGregorianDate#getEra()::: immutable gregorian date get era:::return->date->getEra
ImmutableGregorianDate#setEra(Era)::: immutable gregorian date set era:::unsupported->return
ImmutableGregorianDate#getYear()::: immutable gregorian date get year:::return->date->getYear
ImmutableGregorianDate#setYear(int)::: immutable gregorian date set year:::unsupported->return
ImmutableGregorianDate#addYear(int)::: immutable gregorian date add year:::unsupported->return
ImmutableGregorianDate#isLeapYear()::: immutable gregorian date is leap year:::return->date->isLeapYear
ImmutableGregorianDate#setLeapYear(boolean)::: immutable gregorian date set leap year:::unsupported
ImmutableGregorianDate#getMonth()::: immutable gregorian date get month:::return->date->getMonth
ImmutableGregorianDate#setMonth(int)::: immutable gregorian date set month:::unsupported->return
ImmutableGregorianDate#addMonth(int)::: immutable gregorian date add month:::unsupported->return
ImmutableGregorianDate#getDayOfMonth()::: immutable gregorian date get day of month:::return->date->getDayOfMonth
ImmutableGregorianDate#setDayOfMonth(int)::: immutable gregorian date set day of month:::unsupported->return
ImmutableGregorianDate#addDayOfMonth(int)::: immutable gregorian date add day of month:::unsupported->return
ImmutableGregorianDate#getDayOfWeek()::: immutable gregorian date get day of week:::return->date->getDayOfWeek
ImmutableGregorianDate#getHours()::: immutable gregorian date get hours:::return->date->getHours
ImmutableGregorianDate#setHours(int)::: immutable gregorian date set hours:::unsupported->return
ImmutableGregorianDate#addHours(int)::: immutable gregorian date add hours:::unsupported->return
ImmutableGregorianDate#getMinutes()::: immutable gregorian date get minutes:::return->date->getMinutes
ImmutableGregorianDate#setMinutes(int)::: immutable gregorian date set minutes:::unsupported->return
ImmutableGregorianDate#addMinutes(int)::: immutable gregorian date add minutes:::unsupported->return
ImmutableGregorianDate#getSeconds()::: immutable gregorian date get seconds:::return->date->getSeconds
ImmutableGregorianDate#setSeconds(int)::: immutable gregorian date set seconds:::unsupported->return
ImmutableGregorianDate#addSeconds(int)::: immutable gregorian date add seconds:::unsupported->return
ImmutableGregorianDate#getMillis()::: immutable gregorian date get millis:::return->date->getMillis
ImmutableGregorianDate#setMillis(int)::: immutable gregorian date set millis:::unsupported->return
ImmutableGregorianDate#addMillis(int)::: immutable gregorian date add millis:::unsupported->return
ImmutableGregorianDate#getTimeOfDay()::: immutable gregorian date get time of day:::return->date->getTimeOfDay
ImmutableGregorianDate#setDate(int, int, int)::: immutable gregorian date set date:::unsupported->return
ImmutableGregorianDate#addDate(int, int, int)::: immutable gregorian date add date:::unsupported->return
ImmutableGregorianDate#setTimeOfDay(int, int, int, int)::: immutable gregorian date set time of day:::unsupported->return
ImmutableGregorianDate#addTimeOfDay(int, int, int, int)::: immutable gregorian date add time of day:::unsupported->return
ImmutableGregorianDate#setTimeOfDay(long)::: immutable gregorian date set time of day:::unsupported
ImmutableGregorianDate#isNormalized()::: immutable gregorian date is normalized:::return->date->isNormalized
ImmutableGregorianDate#isStandardTime()::: immutable gregorian date is standard time:::return->date->isStandardTime
ImmutableGregorianDate#setStandardTime(boolean)::: immutable gregorian date set standard time:::unsupported
ImmutableGregorianDate#isDaylightTime()::: immutable gregorian date is daylight time:::return->date->isDaylightTime
ImmutableGregorianDate#setLocale(Locale)::: immutable gregorian date set locale:::unsupported
ImmutableGregorianDate#getZone()::: immutable gregorian date get zone:::return->date->getZone
ImmutableGregorianDate#setZone(TimeZone)::: immutable gregorian date set zone:::unsupported->return
ImmutableGregorianDate#isSameDate(CalendarDate)::: immutable gregorian date is same date:::return->date->isSameDate
ImmutableGregorianDate#equals(Object)::: immutable gregorian date equals:::if->return->if->return->return->date->equals
ImmutableGregorianDate#hashCode()::: immutable gregorian date hash code:::return->date->hashCode
ImmutableGregorianDate#clone()::: immutable gregorian date clone:::return->super->clone
ImmutableGregorianDate#toString()::: immutable gregorian date to string:::return->date->toString
ImmutableGregorianDate#setDayOfWeek(int)::: immutable gregorian date set day of week:::unsupported
ImmutableGregorianDate#setNormalized(boolean)::: immutable gregorian date set normalized:::unsupported
ImmutableGregorianDate#getZoneOffset()::: immutable gregorian date get zone offset:::return->date->getZoneOffset
ImmutableGregorianDate#setZoneOffset(int)::: immutable gregorian date set zone offset:::unsupported
ImmutableGregorianDate#getDaylightSaving()::: immutable gregorian date get daylight saving:::return->date->getDaylightSaving
ImmutableGregorianDate#setDaylightSaving(int)::: immutable gregorian date set daylight saving:::unsupported
ImmutableGregorianDate#getNormalizedYear()::: immutable gregorian date get normalized year:::return->date->getNormalizedYear
ImmutableGregorianDate#setNormalizedYear(int)::: immutable gregorian date set normalized year:::unsupported
ImmutableGregorianDate#unsupported()::: immutable gregorian date unsupported:::throw->new->UnsupportedOperationException
JulianCalendar.Date#setEra(Era)::: date set era:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->super->setEra->return
JulianCalendar.Date#setKnownEra(Era)::: date set known era:::super->setEra
JulianCalendar.Date#getNormalizedYear()::: date get normalized year:::if->getEra->return->getYear->return->getYear
JulianCalendar.Date#setNormalizedYear(int)::: date set normalized year:::if->setYear->setKnownEra->else->setYear->setKnownEra
JulianCalendar.Date#toString()::: date to string:::time->super->toString->time->time->indexOf->substring->sb->new->StringBuffer->era->getEra->if->n->era->getAbbreviation->if->sb->append->append->sb->getYear->append->append->CalendarUtils->getMonth->sprintf0d->append->CalendarUtils->getDayOfMonth->sprintf0d->sb->append->return->sb->toString
JulianCalendar#getName()::: julian calendar get name:::return
JulianCalendar#getCalendarDate()::: julian calendar get calendar date:::return->System->currentTimeMillis->newCalendarDate->getCalendarDate
JulianCalendar#getCalendarDate(long)::: julian calendar get calendar date:::return->newCalendarDate->getCalendarDate
JulianCalendar#getCalendarDate(long, CalendarDate)::: julian calendar get calendar date:::return->super->getCalendarDate
JulianCalendar#getCalendarDate(long, TimeZone)::: julian calendar get calendar date:::return->newCalendarDate->getCalendarDate
JulianCalendar#newCalendarDate()::: julian calendar new calendar date:::return->new->Date
JulianCalendar#newCalendarDate(TimeZone)::: julian calendar new calendar date:::return->new->Date
JulianCalendar#getFixedDate(int, int, int, BaseCalendar.Date)::: julian calendar get fixed date:::isJan1->if->cache->hit->if->return->cache->getCachedJan1->return->cache->getCachedJan1->getDayOfYear->y->days->if->else->CalendarUtils->floorDivide->if->else->CalendarUtils->floorDivide->if->CalendarUtils->isJulianLeapYear->if->cache->CalendarUtils->isJulianLeapYear->setCache->return
JulianCalendar#getCalendarDateFromFixedDate(CalendarDate, long)::: julian calendar get calendar date from fixed date:::jdate->fd->year->if->else->CalendarUtils->floorDivide->priorDays->getFixedDate->isLeap->CalendarUtils->isJulianLeapYear->if->getFixedDate->month->if->else->CalendarUtils->floorDivide->dayOfMonth->getFixedDate->dayOfWeek->getDayOfWeekFromFixedDate->jdate->setNormalizedYear->jdate->setMonth->jdate->setDayOfMonth->jdate->setDayOfWeek->jdate->setLeapYear->jdate->setNormalized
JulianCalendar#getYearFromFixedDate(long):::Returns the normalized Julian year number of the given fixed date.:::year->CalendarUtils->floorDivide->return
JulianCalendar#getDayOfWeek(CalendarDate)::: julian calendar get day of week:::fixedDate->getFixedDate->return->getDayOfWeekFromFixedDate
JulianCalendar#isLeapYear(int)::: julian calendar is leap year:::return->CalendarUtils->isJulianLeapYear
LocalGregorianCalendar#isValidEra(Era, Era[])::: local gregorian calendar is valid era:::last->if->last->getSince->newEra->getSince->return->newName->newEra->getName->foreach->if->era->getName->equals->return->return
LocalGregorianCalendar.Date#setEra(Era)::: date set era:::if->getEra->super->setEra->return
LocalGregorianCalendar.Date#addYear(int)::: date add year:::super->addYear->return
LocalGregorianCalendar.Date#setYear(int)::: date set year:::if->getYear->super->setYear->return
LocalGregorianCalendar.Date#getNormalizedYear()::: date get normalized year:::return
LocalGregorianCalendar.Date#setNormalizedYear(int)::: date set normalized year:::
LocalGregorianCalendar.Date#setLocalEra(Era)::: date set local era:::super->setEra
LocalGregorianCalendar.Date#setLocalYear(int)::: date set local year:::super->setYear
LocalGregorianCalendar.Date#toString()::: date to string:::time->super->toString->time->time->indexOf->substring->sb->new->StringBuffer->era->getEra->if->abbr->era->getAbbreviation->if->sb->append->sb->getYear->append->append->CalendarUtils->getMonth->sprintf0d->append->CalendarUtils->getDayOfMonth->sprintf0d->sb->append->return->sb->toString
LocalGregorianCalendar#getLocalGregorianCalendar(String)::: local gregorian calendar get local gregorian calendar:::if->equals->return->prop->GetPropertyAction->privilegedGetProperty->if->era->parseEraEntry->if->if->isValidEra->length->eras->new->EraArr->System->arraycopy->return->new->LocalGregorianCalendar->return->new->LocalGregorianCalendar
LocalGregorianCalendar#parseEraEntry(String)::: local gregorian calendar parse era entry:::keyValuePairs->entry->split->eraName->localTime->since->abbr->foreach->keyvalue->item->split->if->return->key->trim->value->trim->convertUnicodeEscape->switch->break->if->value->endsWith->value->value->length->substring->try->Long->parseLong->catch->return->finally->break->break->return->if->eraName->isEmpty->abbr->isEmpty->return->return->new->Era
LocalGregorianCalendar#convertUnicodeEscape(String)::: local gregorian calendar convert unicode escape:::m->Pattern->compile->matcher->sb->new->StringBuilder->while->m->find->m->Character->Integer->m->group->parseUnsignedInt->toString->appendReplacement->m->appendTail->return->sb->toString
LocalGregorianCalendar#getName()::: local gregorian calendar get name:::return
LocalGregorianCalendar#getCalendarDate()::: local gregorian calendar get calendar date:::return->System->currentTimeMillis->newCalendarDate->getCalendarDate
LocalGregorianCalendar#getCalendarDate(long)::: local gregorian calendar get calendar date:::return->newCalendarDate->getCalendarDate
LocalGregorianCalendar#getCalendarDate(long, TimeZone)::: local gregorian calendar get calendar date:::return->newCalendarDate->getCalendarDate
LocalGregorianCalendar#getCalendarDate(long, CalendarDate)::: local gregorian calendar get calendar date:::ldate->super->getCalendarDate->return->ldate->getZoneOffset->adjustYear
LocalGregorianCalendar#adjustYear(Date, long, int)::: local gregorian calendar adjust year:::i->for->if->ldate->setLocalEra->ldate->ldate->getNormalizedYear->setLocalYear->ldate->setNormalized->return
LocalGregorianCalendar#newCalendarDate()::: local gregorian calendar new calendar date:::return->new->Date
LocalGregorianCalendar#newCalendarDate(TimeZone)::: local gregorian calendar new calendar date:::return->new->Date
LocalGregorianCalendar#validate(CalendarDate)::: local gregorian calendar validate:::ldate->era->ldate->getEra->if->if->validateEra->return->ldate->era->getSinceDate->getYear->ldate->getYear->setNormalizedYear->tmp->date->getZone->newCalendarDate->tmp->setEra->date->getYear->date->getMonth->date->getDayOfMonth->setDate->normalize->if->tmp->getEra->return->else->if->date->getYear->getSinceDate->getYear->return->ldate->ldate->getYear->setNormalizedYear->return->super->validate
LocalGregorianCalendar#validateEra(Era)::: local gregorian calendar validate era:::foreach->if->return->return
LocalGregorianCalendar#normalize(CalendarDate)::: local gregorian calendar normalize:::if->date->isNormalized->return->normalizeYear->ldate->super->normalize->hasMillis->millis->year->ldate->getNormalizedYear->i->era->for->if->ldate->setLocalEra->y->ldate->getNormalizedYear->era->getSinceDate->getYear->ldate->setLocalYear->else->ldate->setEra->ldate->setLocalYear->ldate->setNormalizedYear->ldate->setNormalized->return
LocalGregorianCalendar#normalizeMonth(CalendarDate)::: local gregorian calendar normalize month:::normalizeYear->super->normalizeMonth
LocalGregorianCalendar#normalizeYear(CalendarDate)::: local gregorian calendar normalize year:::ldate->era->ldate->getEra->if->validateEra->ldate->ldate->getYear->setNormalizedYear->else->ldate->era->getSinceDate->getYear->ldate->getYear->setNormalizedYear
LocalGregorianCalendar#isLeapYear(int):::Returns whether the specified Gregorian year is a leap year.:::return->CalendarUtils->isGregorianLeapYear
LocalGregorianCalendar#isLeapYear(Era, int)::: local gregorian calendar is leap year:::if->return->isLeapYear->gyear->era->getSinceDate->getYear->return->isLeapYear
LocalGregorianCalendar#getCalendarDateFromFixedDate(CalendarDate, long)::: local gregorian calendar get calendar date from fixed date:::ldate->super->getCalendarDateFromFixedDate->adjustYear
ZoneInfo#getOffset(long):::Returns the difference in milliseconds between local time and UTC of given time, taking into account both the raw offset and the effect of daylight savings.:::return->getOffsets
ZoneInfo#getOffsets(long, int[])::: zone info get offsets:::return->getOffsets
ZoneInfo#getOffsetsByStandard(long, int[])::: zone info get offsets by standard:::return->getOffsets
ZoneInfo#getOffsetsByWall(long, int[])::: zone info get offsets by wall:::return->getOffsets
ZoneInfo#getOffsets(long, int[], int)::: zone info get offsets:::if->offset->getLastRawOffset->if->return->index->getTransitionIndex->if->offset->getLastRawOffset->if->return->if->val->offset->if->dst->save->return->tz->getLastRule->if->rawoffset->tz->getRawOffset->msec->if->dstoffset->tz->getOffset->if->tz->getOffset->if->return->else->val->offset->if->dst->save->return
ZoneInfo#getTransitionIndex(long, int)::: zone info get transition index:::low->high->while->mid->val->midVal->if->if->dstIndex->if->if->else->if->else->return->if->return->return
ZoneInfo#getOffset(int, int, int, int, int, int):::Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight savings, for the specified date and time:::if->throw->new->IllegalArgumentException->if->else->if->throw->new->IllegalArgumentException->gcal->CalendarSystem->getGregorianCalendar->date->gcal->newCalendarDate->date->setDate->if->gcal->validate->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->return->getLastRawOffset->dateInMillis->gcal->getTime->return->getOffsets
ZoneInfo#setRawOffset(int):::Sets the base time zone offset from GMT:::if->return->if->lastRule->setRawOffset
ZoneInfo#getRawOffset():::Returns the GMT offset of the current date:::if->return->offsets->new->intArr->System->currentTimeMillis->getOffsets->return
ZoneInfo#isDirty()::: zone info is dirty:::return
ZoneInfo#getLastRawOffset()::: zone info get last raw offset:::return
ZoneInfo#useDaylightTime():::Queries if this time zone uses Daylight Saving Time in the last known rule.:::return
ZoneInfo#observesDaylightTime()::: zone info observes daylight time:::if->return->if->return->utc->System->currentTimeMillis->index->getTransitionIndex->if->return->for->i->return
ZoneInfo#inDaylightTime(Date):::Queries if the specified date is in Daylight Saving Time.:::if->throw->new->NullPointerException->if->return->utc->date->getTime->index->getTransitionIndex->if->return->if->return->tz->getLastRule->if->return->tz->inDaylightTime->else->return
ZoneInfo#getDSTSavings():::Returns the amount of time in milliseconds that the clock is advanced during daylight saving time is in effect in its last daylight saving time rule.:::return
ZoneInfo#toString():::Returns a string representation of this time zone.:::return->getClass->getName->getID->getLastRawOffset->useDaylightTime->getLastRuleInstance
ZoneInfo#getAvailableIDs():::Gets all available IDs supported in the Java run-time.:::return->ZoneInfoFile->getZoneIds
ZoneInfo#getAvailableIDs(int):::Gets all available IDs that have the same value as the specified raw GMT offset.:::return->ZoneInfoFile->getZoneIds
ZoneInfo#getTimeZone(String):::Gets the ZoneInfo for the given ID.:::return->ZoneInfoFile->getZoneInfo
ZoneInfo#getLastRule():::Returns a SimpleTimeZone object representing the last GMT offset and DST schedule or null if this time zone doesn't observe DST.:::if->getLastRuleInstance->return
ZoneInfo#getLastRuleInstance():::Returns a SimpleTimeZone object that represents the last known daylight saving time rules.:::if->return->if->return->getLastRawOffset->getID->new->SimpleTimeZone->return->getLastRawOffset->getID->new->SimpleTimeZone
ZoneInfo#clone():::Returns a copy of this ZoneInfo.:::zi->super->clone->return
ZoneInfo#hashCode():::Returns a hash code value calculated from the GMT offset and transitions.:::return->getLastRawOffset
ZoneInfo#equals(Object):::Compares the equity of two ZoneInfo objects.:::if->return->if->return->that->return->getID->that->getID->equals->getLastRawOffset->that->getLastRawOffset
ZoneInfo#hasSameRules(TimeZone):::Returns true if this zone has the same raw GMT offset value and transition table as another zone info:::if->return->if->return->if->if->getRawOffset->other->getRawOffset->return->if->useDaylightTime->other->useDaylightTime->return->return->if->getLastRawOffset->getLastRawOffset->return->return
ZoneInfo#getAliasTable():::Returns a Map from alias time zone IDs to their standard time zone IDs.:::return->ZoneInfoFile->getAliasMap
ZoneInfo#readObject(ObjectInputStream)::: zone info read object:::stream->defaultReadObject
ZoneInfoFile#getZoneIds():::Gets all available IDs supported in the Java run-time.:::len->if->ids->Arrays->copyOf->i->if->for->j->return
ZoneInfoFile#getZoneIds(int):::Gets all available IDs that have the same value as the specified raw GMT offset.:::ids->new->ArrayList<>->foreach->getZoneIds->zi->getZoneInfo->if->zi->getRawOffset->ids->add->list->ids->ids->size->new->StringArr->toArray->Arrays->sort->return
ZoneInfoFile#getZoneInfo(String)::: zone info file get zone info:::if->return->zi->getZoneInfo0->if->zi->clone->zi->setID->return
ZoneInfoFile#getZoneInfo0(String)::: zone info file get zone info0:::try->zi->zones->get->if->return->zid->if->aliases->containsKey->aliases->get->index->Arrays->binarySearch->if->return->bytes->dis->new->ByteArrayInputStream->new->DataInputStream->getZoneInfo->zones->put->return->catch->throw->new->RuntimeException->finally
ZoneInfoFile#getAliasMap():::Returns a Map from alias time zone IDs to their standard time zone IDs.:::return->Collections->unmodifiableMap
ZoneInfoFile#getVersion():::Gets the version of this tz data.:::return
ZoneInfoFile#getCustomTimeZone(String, int):::Gets a ZoneInfo with the given GMT offset:::id->toCustomID->return->new->ZoneInfo
ZoneInfoFile#toCustomID(int)::: zone info file to custom d:::sign->offset->if->else->hh->mm->buf->new->charArr->if->if->return->new->String
ZoneInfoFile#addOldMapping()::: zone info file add old mapping:::foreach->aliases->put->if->aliases->put->aliases->put->aliases->put->else->zones->new->ZoneInfo->put->zones->new->ZoneInfo->put->zones->new->ZoneInfo->put
ZoneInfoFile#useOldMapping()::: zone info file use old mapping:::return
ZoneInfoFile#load(DataInputStream):::Loads the rules from a DateInputStream:::if->dis->readByte->throw->new->StreamCorruptedException->groupId->dis->readUTF->if->equals->throw->new->StreamCorruptedException->versionCount->dis->readShort->for->i->regionCount->dis->readShort->regionArray->new->StringArr->for->i->ruleCount->dis->readShort->new->byteArrs->for->i->for->i->zones->remove->for->i->addOldMapping
ZoneInfoFile#getZoneInfo(DataInput, String)::: zone info file get zone info:::type->in->readByte->stdSize->in->readInt->stdTrans->new->longArr->for->i->stdOffsets->new->intArr->for->i->savSize->in->readInt->savTrans->new->longArr->for->i->savOffsets->new->intArr->for->i->ruleSize->in->readByte->rules->new->ZoneOffsetTransitionRuleArr->for->i->return->getZoneInfo
ZoneInfoFile#readOffset(DataInput)::: zone info file read offset:::offsetByte->in->readByte->return->in->readInt
ZoneInfoFile#readEpochSec(DataInput)::: zone info file read epoch sec:::hiByte->in->readByte->if->return->in->readLong->else->midByte->in->readByte->loByte->in->readByte->tot->return
ZoneInfoFile#getZoneInfo(String, long[], int[], long[], int[], ZoneOffsetTransitionRule[])::: zone info file get zone info:::rawOffset->dstSavings->checksum->params->willGMTOffsetChange->if->else->transitions->offsets->nOffsets->nTrans->if->new->longArr->new->intArr->lastyear->getYear->i->k->while->if->if->getStandardOffset->addTrans->for->while->trans->if->offset->offsetIndex->indexOf->if->if->while->foreach->trans->zotr->getTransitionEpochSecond->if->Arrays->copyOf->if->Arrays->copyOf->addTrans->startRule->endRule->new->intArr->if->tmp->dom->dow->if->else->if->else->if->else->if->else->if->zoneId->equals->if->zoneId->equals->if->zoneId->equals->else->if->if->trans->offsetIndex->indexOf->if->else->if->m->startTrans->startOffset->startStd->getStandardOffset->endTrans->endOffset->endStd->getStandardOffset->if->before->ZoneOffset->ofTotalSeconds->after->ZoneOffset->ofTotalSeconds->ldt->LocalDateTime->ofEpochSecond->startLDT->if->after->getTotalSeconds->before->getTotalSeconds->else->ldt->plusSeconds->ZoneOffset->ofTotalSeconds->ZoneOffset->ofTotalSeconds->LocalDateTime->ofEpochSecond->endLDT->if->after->getTotalSeconds->before->getTotalSeconds->ldt->plusSeconds->else->new->intArr->startLDT->getMonthValue->startLDT->getDayOfMonth->startLDT->toLocalTime->toSecondOfDay->endLDT->getMonthValue->endLDT->getDayOfMonth->endLDT->toLocalTime->toSecondOfDay->if->if->else->Arrays->copyOf->if->if->else->Arrays->copyOf->if->sum->new->Checksum->for->sum->getValue->return->new->ZoneInfo
ZoneInfoFile#getStandardOffset(long[], int[], long)::: zone info file get standard offset:::index->for->return
ZoneInfoFile#getYear(long, int)::: zone info file get year:::second->epochDay->Math->floorDiv->zeroDay->adjust->if->adjustCycles->yearEst->doyEst->if->marchDoy0->marchMonth0->month->dom->return
ZoneInfoFile#indexOf(int[], int, int, int)::: zone info file index of:::for->return
ZoneInfoFile#addTrans(long[], int, int[], int, long, int, int)::: zone info file add trans:::offsetIndex->indexOf->if->dstIndex->if->indexOf->if->return
ZoneInfoFile.Checksum#update(int)::: checksum update:::b->new->byteArr->update
ZoneInfoFile.Checksum#update(long)::: checksum update:::b->new->byteArr->update
ZoneInfoFile.ZoneOffsetTransitionRule#getTransitionEpochSecond(int)::: zone offset transition rule get transition epoch second:::epochDay->if->lengthOfMonth->toEpochDay->if->previousOrSame->else->toEpochDay->if->nextOrSame->if->difference->switch->break->break->break->return
ZoneInfoFile.ZoneOffsetTransitionRule#isLeapYear(int)::: zone offset transition rule is leap year:::return
ZoneInfoFile.ZoneOffsetTransitionRule#lengthOfMonth(int, int)::: zone offset transition rule length of month:::switch->return->isLeapYear->return->return
ZoneInfoFile.ZoneOffsetTransitionRule#toEpochDay(int, int, int)::: zone offset transition rule to epoch day:::y->m->total->if->else->if->if->isLeapYear->return
ZoneInfoFile.ZoneOffsetTransitionRule#previousOrSame(long, int)::: zone offset transition rule previous or same:::return->adjust
ZoneInfoFile.ZoneOffsetTransitionRule#nextOrSame(long, int)::: zone offset transition rule next or same:::return->adjust
ZoneInfoFile.ZoneOffsetTransitionRule#adjust(long, int, int)::: zone offset transition rule adjust:::calDow->Math->floorMod->if->return->if->daysDiff->return->else->daysDiff->return

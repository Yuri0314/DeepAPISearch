sun.util.calendar.AbstractCalendar#getEra(String)->Era::: abstract calendar get era
sun.util.calendar.AbstractCalendar#getEras()->Era[]::: abstract calendar get eras
sun.util.calendar.AbstractCalendar#setEra(CalendarDate, String)->void::: abstract calendar set era
sun.util.calendar.AbstractCalendar#setEras(Era[])->void::: abstract calendar set eras
sun.util.calendar.AbstractCalendar#getCalendarDate()->CalendarDate::: abstract calendar get calendar date
sun.util.calendar.AbstractCalendar#getCalendarDate(long)->CalendarDate::: abstract calendar get calendar date
sun.util.calendar.AbstractCalendar#getCalendarDate(long, TimeZone)->CalendarDate::: abstract calendar get calendar date
sun.util.calendar.AbstractCalendar#getCalendarDate(long, CalendarDate)->CalendarDate::: abstract calendar get calendar date
sun.util.calendar.AbstractCalendar#getTime(CalendarDate)->long::: abstract calendar get time
sun.util.calendar.AbstractCalendar#getTimeOfDay(CalendarDate)->long::: abstract calendar get time of day
sun.util.calendar.AbstractCalendar#getTimeOfDayValue(CalendarDate)->long::: abstract calendar get time of day value
sun.util.calendar.AbstractCalendar#setTimeOfDay(CalendarDate, int)->CalendarDate::: abstract calendar set time of day
sun.util.calendar.AbstractCalendar#getWeekLength()->int:::Returns 7 in this default implementation.
sun.util.calendar.AbstractCalendar#isLeapYear(CalendarDate)->boolean::: abstract calendar is leap year
sun.util.calendar.AbstractCalendar#getNthDayOfWeek(int, int, CalendarDate)->CalendarDate::: abstract calendar get nth day of week
sun.util.calendar.AbstractCalendar#getDayOfWeekDateBefore(long, int)->long:::Returns a date of the given day of week before the given fixed date.
sun.util.calendar.AbstractCalendar#getDayOfWeekDateAfter(long, int)->long:::Returns a date of the given day of week that is closest to and after the given fixed date.
sun.util.calendar.AbstractCalendar#getDayOfWeekDateOnOrBefore(long, int)->long::: abstract calendar get day of week date on or before
sun.util.calendar.AbstractCalendar#getFixedDate(CalendarDate)->long:::Returns the fixed date calculated with the specified calendar date
sun.util.calendar.AbstractCalendar#getCalendarDateFromFixedDate(CalendarDate, long)->void:::Calculates calendar fields from the specified fixed date
sun.util.calendar.AbstractCalendar#validateTime(CalendarDate)->boolean::: abstract calendar validate time
sun.util.calendar.AbstractCalendar#normalizeTime(CalendarDate)->int::: abstract calendar normalize time
sun.util.calendar.BaseCalendar.Date#setNormalizedDate(int, int, int)->Date::: date set normalized date
sun.util.calendar.BaseCalendar.Date#getNormalizedYear()->int::: date get normalized year
sun.util.calendar.BaseCalendar.Date#setNormalizedYear(int)->void::: date set normalized year
sun.util.calendar.BaseCalendar.Date#hit(int)->boolean::: date hit
sun.util.calendar.BaseCalendar.Date#hit(long)->boolean::: date hit
sun.util.calendar.BaseCalendar.Date#getCachedYear()->int::: date get cached year
sun.util.calendar.BaseCalendar.Date#getCachedJan1()->long::: date get cached jan1
sun.util.calendar.BaseCalendar.Date#setCache(int, long, int)->void::: date set cache
sun.util.calendar.BaseCalendar#validate(CalendarDate)->boolean::: base calendar validate
sun.util.calendar.BaseCalendar#normalize(CalendarDate)->boolean::: base calendar normalize
sun.util.calendar.BaseCalendar#normalizeMonth(CalendarDate)->void::: base calendar normalize month
sun.util.calendar.BaseCalendar#getYearLength(CalendarDate)->int:::Returns 366 if the specified date is in a leap year, or 365 otherwise This method does not perform the normalization with the specified CalendarDate
sun.util.calendar.BaseCalendar#getYearLengthInMonths(CalendarDate)->int::: base calendar get year length in months
sun.util.calendar.BaseCalendar#getMonthLength(CalendarDate)->int::: base calendar get month length
sun.util.calendar.BaseCalendar#getDayOfYear(CalendarDate)->long::: base calendar get day of year
sun.util.calendar.BaseCalendar#getDayOfYear(int, int, int)->long::: base calendar get day of year
sun.util.calendar.BaseCalendar#getFixedDate(CalendarDate)->long::: base calendar get fixed date
sun.util.calendar.BaseCalendar#getFixedDate(int, int, int, BaseCalendar.Date)->long::: base calendar get fixed date
sun.util.calendar.BaseCalendar#getCalendarDateFromFixedDate(CalendarDate, long)->void::: base calendar get calendar date from fixed date
sun.util.calendar.BaseCalendar#getDayOfWeek(CalendarDate)->int:::Returns the day of week of the given Gregorian date.
sun.util.calendar.BaseCalendar#getDayOfWeekFromFixedDate(long)->int::: base calendar get day of week from fixed date
sun.util.calendar.BaseCalendar#getYearFromFixedDate(long)->int::: base calendar get year from fixed date
sun.util.calendar.BaseCalendar#getGregorianYearFromFixedDate(long)->int:::Returns the Gregorian year number of the given fixed date.
sun.util.calendar.BaseCalendar#isLeapYear(CalendarDate)->boolean::: base calendar is leap year
sun.util.calendar.BaseCalendar#isLeapYear(int)->boolean::: base calendar is leap year
sun.util.calendar.CalendarDate#getEra()->Era::: calendar date get era
sun.util.calendar.CalendarDate#setEra(Era)->CalendarDate:::Sets the era of the date to the specified era
sun.util.calendar.CalendarDate#getYear()->int::: calendar date get year
sun.util.calendar.CalendarDate#setYear(int)->CalendarDate::: calendar date set year
sun.util.calendar.CalendarDate#addYear(int)->CalendarDate::: calendar date add year
sun.util.calendar.CalendarDate#isLeapYear()->boolean:::Returns whether the year represented by this CalendarDate is a leap year
sun.util.calendar.CalendarDate#setLeapYear(boolean)->void::: calendar date set leap year
sun.util.calendar.CalendarDate#getMonth()->int::: calendar date get month
sun.util.calendar.CalendarDate#setMonth(int)->CalendarDate::: calendar date set month
sun.util.calendar.CalendarDate#addMonth(int)->CalendarDate::: calendar date add month
sun.util.calendar.CalendarDate#getDayOfMonth()->int::: calendar date get day of month
sun.util.calendar.CalendarDate#setDayOfMonth(int)->CalendarDate::: calendar date set day of month
sun.util.calendar.CalendarDate#addDayOfMonth(int)->CalendarDate::: calendar date add day of month
sun.util.calendar.CalendarDate#getDayOfWeek()->int:::Returns the day of week value
sun.util.calendar.CalendarDate#getHours()->int::: calendar date get hours
sun.util.calendar.CalendarDate#setHours(int)->CalendarDate::: calendar date set hours
sun.util.calendar.CalendarDate#addHours(int)->CalendarDate::: calendar date add hours
sun.util.calendar.CalendarDate#getMinutes()->int::: calendar date get minutes
sun.util.calendar.CalendarDate#setMinutes(int)->CalendarDate::: calendar date set minutes
sun.util.calendar.CalendarDate#addMinutes(int)->CalendarDate::: calendar date add minutes
sun.util.calendar.CalendarDate#getSeconds()->int::: calendar date get seconds
sun.util.calendar.CalendarDate#setSeconds(int)->CalendarDate::: calendar date set seconds
sun.util.calendar.CalendarDate#addSeconds(int)->CalendarDate::: calendar date add seconds
sun.util.calendar.CalendarDate#getMillis()->int::: calendar date get millis
sun.util.calendar.CalendarDate#setMillis(int)->CalendarDate::: calendar date set millis
sun.util.calendar.CalendarDate#addMillis(int)->CalendarDate::: calendar date add millis
sun.util.calendar.CalendarDate#getTimeOfDay()->long::: calendar date get time of day
sun.util.calendar.CalendarDate#setDate(int, int, int)->CalendarDate::: calendar date set date
sun.util.calendar.CalendarDate#addDate(int, int, int)->CalendarDate::: calendar date add date
sun.util.calendar.CalendarDate#setTimeOfDay(int, int, int, int)->CalendarDate::: calendar date set time of day
sun.util.calendar.CalendarDate#addTimeOfDay(int, int, int, int)->CalendarDate::: calendar date add time of day
sun.util.calendar.CalendarDate#setTimeOfDay(long)->void::: calendar date set time of day
sun.util.calendar.CalendarDate#isNormalized()->boolean::: calendar date is normalized
sun.util.calendar.CalendarDate#isStandardTime()->boolean::: calendar date is standard time
sun.util.calendar.CalendarDate#setStandardTime(boolean)->void::: calendar date set standard time
sun.util.calendar.CalendarDate#isDaylightTime()->boolean::: calendar date is daylight time
sun.util.calendar.CalendarDate#setLocale(Locale)->void::: calendar date set locale
sun.util.calendar.CalendarDate#getZone()->TimeZone::: calendar date get zone
sun.util.calendar.CalendarDate#setZone(TimeZone)->CalendarDate::: calendar date set zone
sun.util.calendar.CalendarDate#isSameDate(CalendarDate)->boolean:::Returns whether the specified date is the same date of this CalendarDate
sun.util.calendar.CalendarDate#equals(Object)->boolean::: calendar date equals
sun.util.calendar.CalendarDate#hashCode()->int::: calendar date hash code
sun.util.calendar.CalendarDate#clone()->Object:::Returns a copy of this CalendarDate
sun.util.calendar.CalendarDate#toString()->String:::Converts calendar date values to a String in the following format
sun.util.calendar.CalendarDate#setDayOfWeek(int)->void::: calendar date set day of week
sun.util.calendar.CalendarDate#setNormalized(boolean)->void::: calendar date set normalized
sun.util.calendar.CalendarDate#getZoneOffset()->int::: calendar date get zone offset
sun.util.calendar.CalendarDate#setZoneOffset(int)->void::: calendar date set zone offset
sun.util.calendar.CalendarDate#getDaylightSaving()->int::: calendar date get daylight saving
sun.util.calendar.CalendarDate#setDaylightSaving(int)->void::: calendar date set daylight saving
sun.util.calendar.CalendarSystem#getGregorianCalendar()->Gregorian:::Returns the singleton instance of the Gregorian calendar system.
sun.util.calendar.CalendarSystem#forName(String)->CalendarSystem:::Returns a CalendarSystem specified by the calendar name
sun.util.calendar.CalendarSystem#getName()->String:::Returns the name of this calendar system.
sun.util.calendar.CalendarSystem#getCalendarDate()->CalendarDate::: calendar system get calendar date
sun.util.calendar.CalendarSystem#getCalendarDate(long)->CalendarDate:::Calculates calendar fields from the specified number of milliseconds since the Epoch, January 1, 1970 00:00:00 UTC (Gregorian)
sun.util.calendar.CalendarSystem#getCalendarDate(long, CalendarDate)->CalendarDate::: calendar system get calendar date
sun.util.calendar.CalendarSystem#getCalendarDate(long, TimeZone)->CalendarDate::: calendar system get calendar date
sun.util.calendar.CalendarSystem#newCalendarDate()->CalendarDate:::Constructs a CalendarDate that is specific to this calendar system
sun.util.calendar.CalendarSystem#newCalendarDate(TimeZone)->CalendarDate::: calendar system new calendar date
sun.util.calendar.CalendarSystem#getTime(CalendarDate)->long:::Returns the number of milliseconds since the Epoch, January 1, 1970 00:00:00 UTC (Gregorian), represented by the specified CalendarDate.
sun.util.calendar.CalendarSystem#getYearLength(CalendarDate)->int:::Returns the length in days of the specified year by date
sun.util.calendar.CalendarSystem#getYearLengthInMonths(CalendarDate)->int:::Returns the number of months of the specified year
sun.util.calendar.CalendarSystem#getMonthLength(CalendarDate)->int::: calendar system get month length
sun.util.calendar.CalendarSystem#getWeekLength()->int:::Returns the length in days of a week in this calendar system
sun.util.calendar.CalendarSystem#getEra(String)->Era:::Returns the Era designated by the era name that has to be known to this calendar system
sun.util.calendar.CalendarSystem#getEras()->Era[]:::Returns valid Eras of this calendar system
sun.util.calendar.CalendarSystem#setEra(CalendarDate, String)->void::: calendar system set era
sun.util.calendar.CalendarSystem#getNthDayOfWeek(int, int, CalendarDate)->CalendarDate:::Returns a CalendarDate of the n-th day of week which is on, after or before the specified date
sun.util.calendar.CalendarSystem#setTimeOfDay(CalendarDate, int)->CalendarDate::: calendar system set time of day
sun.util.calendar.CalendarSystem#validate(CalendarDate)->boolean:::Checks whether the calendar fields specified by date represents a valid date and time in this calendar system
sun.util.calendar.CalendarSystem#normalize(CalendarDate)->boolean:::Normalizes calendar fields in the specified date
sun.util.calendar.CalendarUtils#isGregorianLeapYear(int)->boolean:::Returns whether the specified year is a leap year in the Gregorian calendar system.
sun.util.calendar.CalendarUtils#isJulianLeapYear(int)->boolean:::Returns whether the specified year is a leap year in the Julian calendar system
sun.util.calendar.CalendarUtils#floorDivide(long, long)->long:::Divides two integers and returns the floor of the quotient
sun.util.calendar.CalendarUtils#floorDivide(int, int)->int:::Divides two integers and returns the floor of the quotient
sun.util.calendar.CalendarUtils#floorDivide(int, int, int[])->int:::Divides two integers and returns the floor of the quotient and the modulus remainder
sun.util.calendar.CalendarUtils#floorDivide(long, int, int[])->int:::Divides two integers and returns the floor of the quotient and the modulus remainder
sun.util.calendar.CalendarUtils#mod(long, long)->long::: calendar utils mod
sun.util.calendar.CalendarUtils#mod(int, int)->int::: calendar utils mod
sun.util.calendar.CalendarUtils#amod(int, int)->int::: calendar utils amod
sun.util.calendar.CalendarUtils#amod(long, long)->long::: calendar utils amod
sun.util.calendar.CalendarUtils#sprintf0d(StringBuilder, int, int)->StringBuilder:::Mimics sprintf(buf, "%0*d", decaimal, width).
sun.util.calendar.CalendarUtils#sprintf0d(StringBuffer, int, int)->StringBuffer::: calendar utils sprintf0d
sun.util.calendar.Era#getName()->String::: era get name
sun.util.calendar.Era#getDisplayName(Locale)->String::: era get display name
sun.util.calendar.Era#getAbbreviation()->String::: era get abbreviation
sun.util.calendar.Era#getDiaplayAbbreviation(Locale)->String::: era get diaplay abbreviation
sun.util.calendar.Era#getSince(TimeZone)->long::: era get since
sun.util.calendar.Era#getSinceDate()->CalendarDate::: era get since date
sun.util.calendar.Era#isLocalTime()->boolean::: era is local time
sun.util.calendar.Era#equals(Object)->boolean::: era equals
sun.util.calendar.Era#hashCode()->int::: era hash code
sun.util.calendar.Era#toString()->String::: era to string
sun.util.calendar.Gregorian.Date#getNormalizedYear()->int::: date get normalized year
sun.util.calendar.Gregorian.Date#setNormalizedYear(int)->void::: date set normalized year
sun.util.calendar.Gregorian#getName()->String::: gregorian get name
sun.util.calendar.Gregorian#getCalendarDate()->Date::: gregorian get calendar date
sun.util.calendar.Gregorian#getCalendarDate(long)->Date::: gregorian get calendar date
sun.util.calendar.Gregorian#getCalendarDate(long, CalendarDate)->Date::: gregorian get calendar date
sun.util.calendar.Gregorian#getCalendarDate(long, TimeZone)->Date::: gregorian get calendar date
sun.util.calendar.Gregorian#newCalendarDate()->Date::: gregorian new calendar date
sun.util.calendar.Gregorian#newCalendarDate(TimeZone)->Date::: gregorian new calendar date
sun.util.calendar.ImmutableGregorianDate#getEra()->Era::: immutable gregorian date get era
sun.util.calendar.ImmutableGregorianDate#setEra(Era)->CalendarDate::: immutable gregorian date set era
sun.util.calendar.ImmutableGregorianDate#getYear()->int::: immutable gregorian date get year
sun.util.calendar.ImmutableGregorianDate#setYear(int)->CalendarDate::: immutable gregorian date set year
sun.util.calendar.ImmutableGregorianDate#addYear(int)->CalendarDate::: immutable gregorian date add year
sun.util.calendar.ImmutableGregorianDate#isLeapYear()->boolean::: immutable gregorian date is leap year
sun.util.calendar.ImmutableGregorianDate#setLeapYear(boolean)->void::: immutable gregorian date set leap year
sun.util.calendar.ImmutableGregorianDate#getMonth()->int::: immutable gregorian date get month
sun.util.calendar.ImmutableGregorianDate#setMonth(int)->CalendarDate::: immutable gregorian date set month
sun.util.calendar.ImmutableGregorianDate#addMonth(int)->CalendarDate::: immutable gregorian date add month
sun.util.calendar.ImmutableGregorianDate#getDayOfMonth()->int::: immutable gregorian date get day of month
sun.util.calendar.ImmutableGregorianDate#setDayOfMonth(int)->CalendarDate::: immutable gregorian date set day of month
sun.util.calendar.ImmutableGregorianDate#addDayOfMonth(int)->CalendarDate::: immutable gregorian date add day of month
sun.util.calendar.ImmutableGregorianDate#getDayOfWeek()->int::: immutable gregorian date get day of week
sun.util.calendar.ImmutableGregorianDate#getHours()->int::: immutable gregorian date get hours
sun.util.calendar.ImmutableGregorianDate#setHours(int)->CalendarDate::: immutable gregorian date set hours
sun.util.calendar.ImmutableGregorianDate#addHours(int)->CalendarDate::: immutable gregorian date add hours
sun.util.calendar.ImmutableGregorianDate#getMinutes()->int::: immutable gregorian date get minutes
sun.util.calendar.ImmutableGregorianDate#setMinutes(int)->CalendarDate::: immutable gregorian date set minutes
sun.util.calendar.ImmutableGregorianDate#addMinutes(int)->CalendarDate::: immutable gregorian date add minutes
sun.util.calendar.ImmutableGregorianDate#getSeconds()->int::: immutable gregorian date get seconds
sun.util.calendar.ImmutableGregorianDate#setSeconds(int)->CalendarDate::: immutable gregorian date set seconds
sun.util.calendar.ImmutableGregorianDate#addSeconds(int)->CalendarDate::: immutable gregorian date add seconds
sun.util.calendar.ImmutableGregorianDate#getMillis()->int::: immutable gregorian date get millis
sun.util.calendar.ImmutableGregorianDate#setMillis(int)->CalendarDate::: immutable gregorian date set millis
sun.util.calendar.ImmutableGregorianDate#addMillis(int)->CalendarDate::: immutable gregorian date add millis
sun.util.calendar.ImmutableGregorianDate#getTimeOfDay()->long::: immutable gregorian date get time of day
sun.util.calendar.ImmutableGregorianDate#setDate(int, int, int)->CalendarDate::: immutable gregorian date set date
sun.util.calendar.ImmutableGregorianDate#addDate(int, int, int)->CalendarDate::: immutable gregorian date add date
sun.util.calendar.ImmutableGregorianDate#setTimeOfDay(int, int, int, int)->CalendarDate::: immutable gregorian date set time of day
sun.util.calendar.ImmutableGregorianDate#addTimeOfDay(int, int, int, int)->CalendarDate::: immutable gregorian date add time of day
sun.util.calendar.ImmutableGregorianDate#setTimeOfDay(long)->void::: immutable gregorian date set time of day
sun.util.calendar.ImmutableGregorianDate#isNormalized()->boolean::: immutable gregorian date is normalized
sun.util.calendar.ImmutableGregorianDate#isStandardTime()->boolean::: immutable gregorian date is standard time
sun.util.calendar.ImmutableGregorianDate#setStandardTime(boolean)->void::: immutable gregorian date set standard time
sun.util.calendar.ImmutableGregorianDate#isDaylightTime()->boolean::: immutable gregorian date is daylight time
sun.util.calendar.ImmutableGregorianDate#setLocale(Locale)->void::: immutable gregorian date set locale
sun.util.calendar.ImmutableGregorianDate#getZone()->TimeZone::: immutable gregorian date get zone
sun.util.calendar.ImmutableGregorianDate#setZone(TimeZone)->CalendarDate::: immutable gregorian date set zone
sun.util.calendar.ImmutableGregorianDate#isSameDate(CalendarDate)->boolean::: immutable gregorian date is same date
sun.util.calendar.ImmutableGregorianDate#equals(Object)->boolean::: immutable gregorian date equals
sun.util.calendar.ImmutableGregorianDate#hashCode()->int::: immutable gregorian date hash code
sun.util.calendar.ImmutableGregorianDate#clone()->Object::: immutable gregorian date clone
sun.util.calendar.ImmutableGregorianDate#toString()->String::: immutable gregorian date to string
sun.util.calendar.ImmutableGregorianDate#setDayOfWeek(int)->void::: immutable gregorian date set day of week
sun.util.calendar.ImmutableGregorianDate#setNormalized(boolean)->void::: immutable gregorian date set normalized
sun.util.calendar.ImmutableGregorianDate#getZoneOffset()->int::: immutable gregorian date get zone offset
sun.util.calendar.ImmutableGregorianDate#setZoneOffset(int)->void::: immutable gregorian date set zone offset
sun.util.calendar.ImmutableGregorianDate#getDaylightSaving()->int::: immutable gregorian date get daylight saving
sun.util.calendar.ImmutableGregorianDate#setDaylightSaving(int)->void::: immutable gregorian date set daylight saving
sun.util.calendar.ImmutableGregorianDate#getNormalizedYear()->int::: immutable gregorian date get normalized year
sun.util.calendar.ImmutableGregorianDate#setNormalizedYear(int)->void::: immutable gregorian date set normalized year
sun.util.calendar.JulianCalendar#getName()->String::: julian calendar get name
sun.util.calendar.JulianCalendar#getCalendarDate()->Date::: julian calendar get calendar date
sun.util.calendar.JulianCalendar#getCalendarDate(long)->Date::: julian calendar get calendar date
sun.util.calendar.JulianCalendar#getCalendarDate(long, CalendarDate)->Date::: julian calendar get calendar date
sun.util.calendar.JulianCalendar#getCalendarDate(long, TimeZone)->Date::: julian calendar get calendar date
sun.util.calendar.JulianCalendar#newCalendarDate()->Date::: julian calendar new calendar date
sun.util.calendar.JulianCalendar#newCalendarDate(TimeZone)->Date::: julian calendar new calendar date
sun.util.calendar.JulianCalendar#getFixedDate(int, int, int, BaseCalendar.Date)->long::: julian calendar get fixed date
sun.util.calendar.JulianCalendar#getCalendarDateFromFixedDate(CalendarDate, long)->void::: julian calendar get calendar date from fixed date
sun.util.calendar.JulianCalendar#getYearFromFixedDate(long)->int:::Returns the normalized Julian year number of the given fixed date.
sun.util.calendar.JulianCalendar#getDayOfWeek(CalendarDate)->int::: julian calendar get day of week
sun.util.calendar.JulianCalendar#isLeapYear(int)->boolean::: julian calendar is leap year
sun.util.calendar.LocalGregorianCalendar.Date#setEra(Era)->Date::: date set era
sun.util.calendar.LocalGregorianCalendar.Date#addYear(int)->Date::: date add year
sun.util.calendar.LocalGregorianCalendar.Date#setYear(int)->Date::: date set year
sun.util.calendar.LocalGregorianCalendar.Date#getNormalizedYear()->int::: date get normalized year
sun.util.calendar.LocalGregorianCalendar.Date#setNormalizedYear(int)->void::: date set normalized year
sun.util.calendar.LocalGregorianCalendar.Date#setLocalEra(Era)->void::: date set local era
sun.util.calendar.LocalGregorianCalendar.Date#setLocalYear(int)->void::: date set local year
sun.util.calendar.LocalGregorianCalendar.Date#toString()->String::: date to string
sun.util.calendar.LocalGregorianCalendar#getLocalGregorianCalendar(String)->LocalGregorianCalendar::: local gregorian calendar get local gregorian calendar
sun.util.calendar.LocalGregorianCalendar#getName()->String::: local gregorian calendar get name
sun.util.calendar.LocalGregorianCalendar#getCalendarDate()->Date::: local gregorian calendar get calendar date
sun.util.calendar.LocalGregorianCalendar#getCalendarDate(long)->Date::: local gregorian calendar get calendar date
sun.util.calendar.LocalGregorianCalendar#getCalendarDate(long, TimeZone)->Date::: local gregorian calendar get calendar date
sun.util.calendar.LocalGregorianCalendar#getCalendarDate(long, CalendarDate)->Date::: local gregorian calendar get calendar date
sun.util.calendar.LocalGregorianCalendar#newCalendarDate()->Date::: local gregorian calendar new calendar date
sun.util.calendar.LocalGregorianCalendar#newCalendarDate(TimeZone)->Date::: local gregorian calendar new calendar date
sun.util.calendar.LocalGregorianCalendar#validate(CalendarDate)->boolean::: local gregorian calendar validate
sun.util.calendar.LocalGregorianCalendar#normalize(CalendarDate)->boolean::: local gregorian calendar normalize
sun.util.calendar.LocalGregorianCalendar#normalizeMonth(CalendarDate)->void::: local gregorian calendar normalize month
sun.util.calendar.LocalGregorianCalendar#normalizeYear(CalendarDate)->void::: local gregorian calendar normalize year
sun.util.calendar.LocalGregorianCalendar#isLeapYear(int)->boolean:::Returns whether the specified Gregorian year is a leap year.
sun.util.calendar.LocalGregorianCalendar#isLeapYear(Era, int)->boolean::: local gregorian calendar is leap year
sun.util.calendar.LocalGregorianCalendar#getCalendarDateFromFixedDate(CalendarDate, long)->void::: local gregorian calendar get calendar date from fixed date
sun.util.calendar.ZoneInfo#getOffset(long)->int:::Returns the difference in milliseconds between local time and UTC of given time, taking into account both the raw offset and the effect of daylight savings.
sun.util.calendar.ZoneInfo#getOffsets(long, int[])->int::: zone info get offsets
sun.util.calendar.ZoneInfo#getOffsetsByStandard(long, int[])->int::: zone info get offsets by standard
sun.util.calendar.ZoneInfo#getOffsetsByWall(long, int[])->int::: zone info get offsets by wall
sun.util.calendar.ZoneInfo#getOffset(int, int, int, int, int, int)->int:::Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight savings, for the specified date and time
sun.util.calendar.ZoneInfo#setRawOffset(int)->void:::Sets the base time zone offset from GMT
sun.util.calendar.ZoneInfo#getRawOffset()->int:::Returns the GMT offset of the current date
sun.util.calendar.ZoneInfo#isDirty()->boolean::: zone info is dirty
sun.util.calendar.ZoneInfo#useDaylightTime()->boolean:::Queries if this time zone uses Daylight Saving Time in the last known rule.
sun.util.calendar.ZoneInfo#observesDaylightTime()->boolean::: zone info observes daylight time
sun.util.calendar.ZoneInfo#inDaylightTime(Date)->boolean:::Queries if the specified date is in Daylight Saving Time.
sun.util.calendar.ZoneInfo#getDSTSavings()->int:::Returns the amount of time in milliseconds that the clock is advanced during daylight saving time is in effect in its last daylight saving time rule.
sun.util.calendar.ZoneInfo#toString()->String:::Returns a string representation of this time zone.
sun.util.calendar.ZoneInfo#getAvailableIDs()->String[]:::Gets all available IDs supported in the Java run-time.
sun.util.calendar.ZoneInfo#getAvailableIDs(int)->String[]:::Gets all available IDs that have the same value as the specified raw GMT offset.
sun.util.calendar.ZoneInfo#getTimeZone(String)->TimeZone:::Gets the ZoneInfo for the given ID.
sun.util.calendar.ZoneInfo#getLastRuleInstance()->SimpleTimeZone:::Returns a SimpleTimeZone object that represents the last known daylight saving time rules.
sun.util.calendar.ZoneInfo#clone()->Object:::Returns a copy of this ZoneInfo.
sun.util.calendar.ZoneInfo#hashCode()->int:::Returns a hash code value calculated from the GMT offset and transitions.
sun.util.calendar.ZoneInfo#equals(Object)->boolean:::Compares the equity of two ZoneInfo objects.
sun.util.calendar.ZoneInfo#hasSameRules(TimeZone)->boolean:::Returns true if this zone has the same raw GMT offset value and transition table as another zone info
sun.util.calendar.ZoneInfo#getAliasTable()->Map:::Returns a Map from alias time zone IDs to their standard time zone IDs.
sun.util.calendar.ZoneInfoFile#getZoneIds()->String[]:::Gets all available IDs supported in the Java run-time.
sun.util.calendar.ZoneInfoFile#getZoneIds(int)->String[]:::Gets all available IDs that have the same value as the specified raw GMT offset.
sun.util.calendar.ZoneInfoFile#getZoneInfo(String)->ZoneInfo::: zone info file get zone info
sun.util.calendar.ZoneInfoFile#getAliasMap()->Map:::Returns a Map from alias time zone IDs to their standard time zone IDs.
sun.util.calendar.ZoneInfoFile#getVersion()->String:::Gets the version of this tz data.
sun.util.calendar.ZoneInfoFile#getCustomTimeZone(String, int)->ZoneInfo:::Gets a ZoneInfo with the given GMT offset
sun.util.calendar.ZoneInfoFile#toCustomID(int)->String::: zone info file to custom d
sun.util.calendar.ZoneInfoFile#useOldMapping()->boolean::: zone info file use old mapping
sun.util.calendar.ZoneInfoFile#getZoneInfo(DataInput, String)->ZoneInfo::: zone info file get zone info
sun.util.calendar.ZoneInfoFile#readOffset(DataInput)->int::: zone info file read offset
sun.util.calendar.ZoneInfoFile#readEpochSec(DataInput)->long::: zone info file read epoch sec

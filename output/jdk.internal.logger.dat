jdk.internal.logger.AbstractLoggerWrapper#wrapped()->L::: abstract logger wrapper wrapped
jdk.internal.logger.AbstractLoggerWrapper#platformProxy()->PlatformLogger.Bridge::: abstract logger wrapper platform proxy
jdk.internal.logger.AbstractLoggerWrapper#getWrapped()->L::: abstract logger wrapper get wrapped
jdk.internal.logger.AbstractLoggerWrapper#getName()->String::: abstract logger wrapper get name
jdk.internal.logger.AbstractLoggerWrapper#isLoggable(Level)->boolean::: abstract logger wrapper is loggable
jdk.internal.logger.AbstractLoggerWrapper#log(Level, String)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(Level, Supplier)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(Level, Object)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(Level, String, Throwable)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(Level, Supplier, Throwable)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(Level, String, Object...)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(Level, ResourceBundle, String, Throwable)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(Level, ResourceBundle, String, Object...)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#isLoggable(PlatformLogger.Level)->boolean::: abstract logger wrapper is loggable
jdk.internal.logger.AbstractLoggerWrapper#isEnabled()->boolean::: abstract logger wrapper is enabled
jdk.internal.logger.AbstractLoggerWrapper#log(PlatformLogger.Level, String)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(PlatformLogger.Level, String, Throwable)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(PlatformLogger.Level, String, Object...)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(PlatformLogger.Level, Supplier)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#log(PlatformLogger.Level, Throwable, Supplier)->void::: abstract logger wrapper log
jdk.internal.logger.AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, String)->void::: abstract logger wrapper logp
jdk.internal.logger.AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, Supplier)->void::: abstract logger wrapper logp
jdk.internal.logger.AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, String, Object...)->void::: abstract logger wrapper logp
jdk.internal.logger.AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, String, Throwable)->void::: abstract logger wrapper logp
jdk.internal.logger.AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, Throwable, Supplier)->void::: abstract logger wrapper logp
jdk.internal.logger.AbstractLoggerWrapper#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Object...)->void::: abstract logger wrapper logrb
jdk.internal.logger.AbstractLoggerWrapper#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)->void::: abstract logger wrapper logrb
jdk.internal.logger.AbstractLoggerWrapper#logrb(PlatformLogger.Level, ResourceBundle, String, Throwable)->void::: abstract logger wrapper logrb
jdk.internal.logger.AbstractLoggerWrapper#logrb(PlatformLogger.Level, ResourceBundle, String, Object...)->void::: abstract logger wrapper logrb
jdk.internal.logger.AbstractLoggerWrapper#getLoggerConfiguration()->LoggerConfiguration::: abstract logger wrapper get logger configuration
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, Level, ResourceBundle, String, Throwable)->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, Level, ResourceBundle, String, Object[])->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, Level, Supplier, Throwable)->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, Level, Supplier)->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#log(LogEvent, Logger)->void::: log event log
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String)->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, Throwable)->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, Object[])->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, Supplier)->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#vaueOf(BootstrapLogger, PlatformLogger.Level, Supplier, Throwable)->LogEvent::: log event vaue of
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, String, ResourceBundle, String, Object[])->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, String, Supplier, Throwable)->LogEvent::: log event value of
jdk.internal.logger.BootstrapLogger.LogEvent#log(LogEvent, PlatformLogger.Bridge)->void::: log event log
jdk.internal.logger.BootstrapLogger.LogEvent#log(LogEvent)->void::: log event log
jdk.internal.logger.BootstrapLogger#push(LogEvent)->void::: bootstrap logger push
jdk.internal.logger.BootstrapLogger#flush(LogEvent)->void::: bootstrap logger flush
jdk.internal.logger.BootstrapLogger#getName()->String:::The name of this logger
jdk.internal.logger.BootstrapLogger#checkBootstrapping()->boolean:::Check whether the VM is still bootstrapping, and if not, arranges for this logger's holder to create the real logger and flush the pending event queue.
jdk.internal.logger.BootstrapLogger#isLoggable(Level)->boolean::: bootstrap logger is loggable
jdk.internal.logger.BootstrapLogger#log(Level, ResourceBundle, String, Throwable)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(Level, ResourceBundle, String, Object...)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(Level, String, Throwable)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(Level, String, Object...)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(Level, Supplier)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(Level, Object)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(Level, String)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(Level, Supplier, Throwable)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#isLoggable(PlatformLogger.Level)->boolean::: bootstrap logger is loggable
jdk.internal.logger.BootstrapLogger#isEnabled()->boolean::: bootstrap logger is enabled
jdk.internal.logger.BootstrapLogger#log(PlatformLogger.Level, String)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(PlatformLogger.Level, String, Throwable)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(PlatformLogger.Level, String, Object...)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(PlatformLogger.Level, Supplier)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#log(PlatformLogger.Level, Throwable, Supplier)->void::: bootstrap logger log
jdk.internal.logger.BootstrapLogger#logp(PlatformLogger.Level, String, String, String)->void::: bootstrap logger logp
jdk.internal.logger.BootstrapLogger#logp(PlatformLogger.Level, String, String, Supplier)->void::: bootstrap logger logp
jdk.internal.logger.BootstrapLogger#logp(PlatformLogger.Level, String, String, String, Object...)->void::: bootstrap logger logp
jdk.internal.logger.BootstrapLogger#logp(PlatformLogger.Level, String, String, String, Throwable)->void::: bootstrap logger logp
jdk.internal.logger.BootstrapLogger#logp(PlatformLogger.Level, String, String, Throwable, Supplier)->void::: bootstrap logger logp
jdk.internal.logger.BootstrapLogger#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Object...)->void::: bootstrap logger logrb
jdk.internal.logger.BootstrapLogger#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)->void::: bootstrap logger logrb
jdk.internal.logger.BootstrapLogger#logrb(PlatformLogger.Level, ResourceBundle, String, Object...)->void::: bootstrap logger logrb
jdk.internal.logger.BootstrapLogger#logrb(PlatformLogger.Level, ResourceBundle, String, Throwable)->void::: bootstrap logger logrb
jdk.internal.logger.BootstrapLogger#getLoggerConfiguration()->LoggerConfiguration::: bootstrap logger get logger configuration
jdk.internal.logger.BootstrapLogger#isBooted()->boolean::: bootstrap logger is booted
jdk.internal.logger.BootstrapLogger#useLazyLoggers()->boolean::: bootstrap logger use lazy loggers
jdk.internal.logger.BootstrapLogger#getLogger(LazyLoggerAccessor)->Logger::: bootstrap logger get logger
jdk.internal.logger.BootstrapLogger.RedirectedLoggers#apply(LazyLoggerAccessor)->SurrogateLogger::: redirected loggers apply
jdk.internal.logger.BootstrapLogger.RedirectedLoggers#get(LazyLoggerAccessor)->SurrogateLogger::: redirected loggers get
jdk.internal.logger.BootstrapLogger.RedirectedLoggers#drainLoggersMap()->Map::: redirected loggers drain loggers map
jdk.internal.logger.BootstrapLogger.RedirectedLoggers#replaceSurrogateLoggers(Map)->void::: redirected loggers replace surrogate loggers
jdk.internal.logger.BootstrapLogger#createSurrogateLogger(LazyLoggerAccessor)->Logger::: bootstrap logger create surrogate logger
jdk.internal.logger.BootstrapLogger#redirectTemporaryLoggers()->void::: bootstrap logger redirect temporary loggers
jdk.internal.logger.BootstrapLogger#awaitPendingTasks()->void::: bootstrap logger await pending tasks
jdk.internal.logger.BootstrapLogger#isAlive()->boolean::: bootstrap logger is alive
jdk.internal.logger.DefaultLoggerFinder.SharedLoggers#get(Function, String)->Logger::: shared loggers get
jdk.internal.logger.DefaultLoggerFinder#isSystem(Module)->boolean::: default logger finder is system
jdk.internal.logger.DefaultLoggerFinder#getLogger(String, Module)->Logger::: default logger finder get logger
jdk.internal.logger.DefaultLoggerFinder#getLocalizedLogger(String, ResourceBundle, Module)->Logger::: default logger finder get localized logger
jdk.internal.logger.DefaultLoggerFinder#demandLoggerFor(String, Module)->Logger:::Returns a Logger logger suitable for use within the given module.
jdk.internal.logger.LazyLoggers.LoggerAccessor#getLoggerName()->String:::The logger name.
jdk.internal.logger.LazyLoggers.LoggerAccessor#wrapped()->Logger:::Returns the wrapped logger object.
jdk.internal.logger.LazyLoggers.LoggerAccessor#platform()->PlatformLogger.Bridge:::A PlatformLogger.Bridge view of the wrapped logger object.
jdk.internal.logger.LazyLoggers.LazyLoggerAccessor#getLoggerName()->String:::The logger name.
jdk.internal.logger.LazyLoggers.LazyLoggerAccessor#wrapped()->Logger:::Returns the logger SPI object, creating it if 'w' is still null.
jdk.internal.logger.LazyLoggers.LazyLoggerAccessor#platform()->PlatformLogger.Bridge:::A PlatformLogger.Bridge view of the wrapped logger.
jdk.internal.logger.LazyLoggers.LazyLoggerAccessor#release(SimpleConsoleLogger, boolean)->void:::Makes this accessor release a temporary logger
jdk.internal.logger.LazyLoggers.LazyLoggerAccessor#getConcreteLogger(BootstrapLogger)->Logger:::Replace 'w' by the real SPI logger and flush the log messages pending in the temporary 'bootstrap' Logger
jdk.internal.logger.LazyLoggers.LazyLoggerAccessor#getConcretePlatformLogger(BootstrapLogger)->PlatformLogger.Bridge::: lazy logger accessor get concrete platform logger
jdk.internal.logger.LazyLoggers.LazyLoggerAccessor#createLogger()->Logger::: lazy logger accessor create logger
jdk.internal.logger.LazyLoggers.LazyLoggerAccessor#makeAccessor(String, LazyLoggerFactories, Module)->LazyLoggerAccessor:::Creates a new lazy logger accessor for the named logger
jdk.internal.logger.LazyLoggers#getLoggerFromFinder(String, Module)->Logger:::Gets a logger from the LoggerFinder
jdk.internal.logger.LazyLoggers#getLogger(String, Module)->Logger:::Returns a (possibly lazy) Logger for the caller.
jdk.internal.logger.LazyLoggers#getLazyLogger(String, Module)->Logger:::Returns a (possibly lazy) Logger suitable for system classes
jdk.internal.logger.LocalizedLoggerWrapper#getBundle()->ResourceBundle::: localized logger wrapper get bundle
jdk.internal.logger.LocalizedLoggerWrapper#log(Level, String)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#log(Level, String, Throwable)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#log(Level, String, Object...)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#log(Level, Object)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#log(Level, Supplier)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#log(Level, Supplier, Throwable)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#log(Level, ResourceBundle, String, Object...)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#log(Level, ResourceBundle, String, Throwable)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#isLoggable(Level)->boolean::: localized logger wrapper is loggable
jdk.internal.logger.LocalizedLoggerWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String)->void::: localized logger wrapper logp
jdk.internal.logger.LocalizedLoggerWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String, Throwable)->void::: localized logger wrapper logp
jdk.internal.logger.LocalizedLoggerWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String, Object...)->void::: localized logger wrapper logp
jdk.internal.logger.LocalizedLoggerWrapper#log(sun.util.logging.PlatformLogger.Level, String, Throwable)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#log(sun.util.logging.PlatformLogger.Level, String)->void::: localized logger wrapper log
jdk.internal.logger.LocalizedLoggerWrapper#log(sun.util.logging.PlatformLogger.Level, String, Object...)->void::: localized logger wrapper log
jdk.internal.logger.LoggerFinderLoader#getLoggerFinder()->System.LoggerFinder::: logger finder loader get logger finder
jdk.internal.logger.LoggerWrapper#wrapped()->L::: logger wrapper wrapped
jdk.internal.logger.LoggerWrapper#platformProxy()->PlatformLogger.Bridge::: logger wrapper platform proxy
jdk.internal.logger.SimpleConsoleLogger#getDefaultLevel()->Level::: simple console logger get default level
jdk.internal.logger.SimpleConsoleLogger#getSimpleFormatString()->String::: simple console logger get simple format string
jdk.internal.logger.SimpleConsoleLogger#defaultPlatformLevel()->PlatformLogger.Level::: simple console logger default platform level
jdk.internal.logger.SimpleConsoleLogger#getName()->String::: simple console logger get name
jdk.internal.logger.SimpleConsoleLogger#isLoggable(Level)->boolean::: simple console logger is loggable
jdk.internal.logger.SimpleConsoleLogger#log(Level, ResourceBundle, String, Throwable)->void::: simple console logger log
jdk.internal.logger.SimpleConsoleLogger#log(Level, ResourceBundle, String, Object...)->void::: simple console logger log
jdk.internal.logger.SimpleConsoleLogger#isLoggable(PlatformLogger.Level)->boolean::: simple console logger is loggable
jdk.internal.logger.SimpleConsoleLogger#isEnabled()->boolean::: simple console logger is enabled
jdk.internal.logger.SimpleConsoleLogger#log(PlatformLogger.Level, String)->void::: simple console logger log
jdk.internal.logger.SimpleConsoleLogger#log(PlatformLogger.Level, String, Throwable)->void::: simple console logger log
jdk.internal.logger.SimpleConsoleLogger#log(PlatformLogger.Level, String, Object...)->void::: simple console logger log
jdk.internal.logger.SimpleConsoleLogger#getPlatformLevel()->PlatformLogger.Level::: simple console logger get platform level
jdk.internal.logger.SimpleConsoleLogger#setPlatformLevel(PlatformLogger.Level)->void::: simple console logger set platform level
jdk.internal.logger.SimpleConsoleLogger#getLoggerConfiguration()->LoggerConfiguration::: simple console logger get logger configuration
jdk.internal.logger.SimpleConsoleLogger#outputStream()->PrintStream:::Default platform logging support - output messages to System.err - equivalent to ConsoleHandler with SimpleFormatter.
jdk.internal.logger.SimpleConsoleLogger.CallerFinder#get()->Optional:::Returns StackFrame of the caller's frame.
jdk.internal.logger.SimpleConsoleLogger.CallerFinder#test(StackWalker.StackFrame)->boolean:::Returns true if we have found the caller's frame, false if the frame must be skipped.
jdk.internal.logger.SimpleConsoleLogger#makeSimpleLogger(String)->SimpleConsoleLogger::: simple console logger make simple logger
jdk.internal.logger.SimpleConsoleLogger#log(PlatformLogger.Level, Supplier)->void::: simple console logger log
jdk.internal.logger.SimpleConsoleLogger#log(PlatformLogger.Level, Throwable, Supplier)->void::: simple console logger log
jdk.internal.logger.SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, String)->void::: simple console logger logp
jdk.internal.logger.SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, Supplier)->void::: simple console logger logp
jdk.internal.logger.SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, String, Object...)->void::: simple console logger logp
jdk.internal.logger.SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, String, Throwable)->void::: simple console logger logp
jdk.internal.logger.SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, Throwable, Supplier)->void::: simple console logger logp
jdk.internal.logger.SimpleConsoleLogger#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Object...)->void::: simple console logger logrb
jdk.internal.logger.SimpleConsoleLogger#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)->void::: simple console logger logrb
jdk.internal.logger.SimpleConsoleLogger#logrb(PlatformLogger.Level, ResourceBundle, String, Object...)->void::: simple console logger logrb
jdk.internal.logger.SimpleConsoleLogger#logrb(PlatformLogger.Level, ResourceBundle, String, Throwable)->void::: simple console logger logrb
jdk.internal.logger.SimpleConsoleLogger#getString(ResourceBundle, String)->String::: simple console logger get string
jdk.internal.logger.SimpleConsoleLogger.Formatting#isFilteredFrame(StackFrame)->boolean::: formatting is filtered frame
jdk.internal.logger.SimpleConsoleLogger.Formatting#getSimpleFormat(String, Function)->String::: formatting get simple format
jdk.internal.logger.SimpleConsoleLogger.Formatting#formatMessage(String, Object...)->String::: formatting format message
jdk.internal.logger.SurrogateLogger#defaultPlatformLevel()->PlatformLogger.Level::: surrogate logger default platform level
jdk.internal.logger.SurrogateLogger#getSimpleFormatString()->String::: surrogate logger get simple format string
jdk.internal.logger.SurrogateLogger#getSimpleFormat(Function)->String::: surrogate logger get simple format
jdk.internal.logger.SurrogateLogger#makeSurrogateLogger(String)->SurrogateLogger::: surrogate logger make surrogate logger
jdk.internal.logger.SurrogateLogger#isFilteredFrame(StackWalker.StackFrame)->boolean::: surrogate logger is filtered frame

AbstractLoggerWrapper#wrapped()::: abstract logger wrapper wrapped:::
AbstractLoggerWrapper#platformProxy()::: abstract logger wrapper platform proxy:::
AbstractLoggerWrapper#getWrapped()::: abstract logger wrapper get wrapped:::return->wrapped
AbstractLoggerWrapper#getName()::: abstract logger wrapper get name:::return->wrapped->getName
AbstractLoggerWrapper#isLoggable(Level)::: abstract logger wrapper is loggable:::return->wrapped->isLoggable
AbstractLoggerWrapper#log(Level, String)::: abstract logger wrapper log:::wrapped->log
AbstractLoggerWrapper#log(Level, Supplier)::: abstract logger wrapper log:::wrapped->log
AbstractLoggerWrapper#log(Level, Object)::: abstract logger wrapper log:::wrapped->log
AbstractLoggerWrapper#log(Level, String, Throwable)::: abstract logger wrapper log:::wrapped->log
AbstractLoggerWrapper#log(Level, Supplier, Throwable)::: abstract logger wrapper log:::wrapped->log
AbstractLoggerWrapper#log(Level, String, Object...)::: abstract logger wrapper log:::wrapped->log
AbstractLoggerWrapper#log(Level, ResourceBundle, String, Throwable)::: abstract logger wrapper log:::wrapped->log
AbstractLoggerWrapper#log(Level, ResourceBundle, String, Object...)::: abstract logger wrapper log:::wrapped->log
AbstractLoggerWrapper#isLoggable(PlatformLogger.Level)::: abstract logger wrapper is loggable:::platformProxy->platformProxy->if->return->level->systemLevel->isLoggable->else->return->platformProxy->isLoggable
AbstractLoggerWrapper#isEnabled()::: abstract logger wrapper is enabled:::platformProxy->platformProxy->return->platformProxy->isEnabled
AbstractLoggerWrapper#log(PlatformLogger.Level, String)::: abstract logger wrapper log:::platformProxy->platformProxy->if->wrapped->level->systemLevel->log->else->platformProxy->log
AbstractLoggerWrapper#log(PlatformLogger.Level, String, Throwable)::: abstract logger wrapper log:::platformProxy->platformProxy->if->wrapped->level->systemLevel->log->else->platformProxy->log
AbstractLoggerWrapper#log(PlatformLogger.Level, String, Object...)::: abstract logger wrapper log:::platformProxy->platformProxy->if->wrapped->level->systemLevel->log->else->platformProxy->log
AbstractLoggerWrapper#log(PlatformLogger.Level, Supplier)::: abstract logger wrapper log:::platformProxy->platformProxy->if->wrapped->level->systemLevel->log->else->platformProxy->log
AbstractLoggerWrapper#log(PlatformLogger.Level, Throwable, Supplier)::: abstract logger wrapper log:::platformProxy->platformProxy->if->wrapped->level->systemLevel->log->else->platformProxy->log
AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, String)::: abstract logger wrapper logp:::platformProxy->platformProxy->if->if->wrapped->level->systemLevel->log->else->systemLevel->level->systemLevel->wrapped->wrapped->if->wrapped->isLoggable->wrapped->String->format->log->else->platformProxy->logp
AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, Supplier)::: abstract logger wrapper logp:::platformProxy->platformProxy->if->if->wrapped->level->systemLevel->log->else->systemLevel->level->systemLevel->wrapped->wrapped->if->wrapped->isLoggable->sClass->sMethod->wrapped->String->msgSupplier->get->format->log->else->platformProxy->logp
AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, String, Object...)::: abstract logger wrapper logp:::platformProxy->platformProxy->if->if->wrapped->level->systemLevel->log->else->systemLevel->level->systemLevel->wrapped->wrapped->if->wrapped->isLoggable->wrapped->String->format->log->else->platformProxy->logp
AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, String, Throwable)::: abstract logger wrapper logp:::platformProxy->platformProxy->if->if->wrapped->level->systemLevel->log->else->systemLevel->level->systemLevel->wrapped->wrapped->if->wrapped->isLoggable->wrapped->String->format->log->else->platformProxy->logp
AbstractLoggerWrapper#logp(PlatformLogger.Level, String, String, Throwable, Supplier)::: abstract logger wrapper logp:::platformProxy->platformProxy->if->if->wrapped->level->systemLevel->log->else->systemLevel->level->systemLevel->wrapped->wrapped->if->wrapped->isLoggable->sClass->sMethod->wrapped->String->msgSupplier->get->format->log->else->platformProxy->logp
AbstractLoggerWrapper#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Object...)::: abstract logger wrapper logrb:::platformProxy->platformProxy->if->if->wrapped->level->systemLevel->log->else->systemLevel->level->systemLevel->wrapped->wrapped->if->wrapped->isLoggable->wrapped->String->format->log->else->platformProxy->logrb
AbstractLoggerWrapper#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)::: abstract logger wrapper logrb:::platformProxy->platformProxy->if->if->wrapped->level->systemLevel->log->else->systemLevel->level->systemLevel->wrapped->wrapped->if->wrapped->isLoggable->wrapped->String->format->log->else->platformProxy->logrb
AbstractLoggerWrapper#logrb(PlatformLogger.Level, ResourceBundle, String, Throwable)::: abstract logger wrapper logrb:::platformProxy->platformProxy->if->wrapped->level->systemLevel->log->else->platformProxy->logrb
AbstractLoggerWrapper#logrb(PlatformLogger.Level, ResourceBundle, String, Object...)::: abstract logger wrapper logrb:::platformProxy->platformProxy->if->wrapped->level->systemLevel->log->else->platformProxy->logrb
AbstractLoggerWrapper#getLoggerConfiguration()::: abstract logger wrapper get logger configuration:::platformProxy->platformProxy->return->getLoggerConfiguration
BootstrapLogger.BootstrapExecutors.BootstrapMessageLoggerTask#run()::: bootstrap message logger task run:::try->run->run->catch->finally
BootstrapLogger.BootstrapExecutors#getExecutor()::: bootstrap executors get executor:::ref->executor->ref->get->if->return->synchronized->ref->get->if->new->LinkedBlockingQueue<>->new->BootstrapExecutors->new->ThreadPoolExecutor->new->WeakReference<>->return->executorRef->get
BootstrapLogger.BootstrapExecutors#newThread(Runnable)::: bootstrap executors new thread:::owner->getExecutor->thread->AccessController->new->PrivilegedAction<Thread>->new->RuntimePermission->doPrivileged->thread->setDaemon->return
BootstrapLogger.BootstrapExecutors#submit(Runnable)::: bootstrap executors submit:::getExecutor->execute
BootstrapLogger.BootstrapExecutors#join(Runnable)::: bootstrap executors join:::try->getExecutor->submit->get->catch->throw->new->RuntimeException->finally
BootstrapLogger.BootstrapExecutors#awaitPendingTasks()::: bootstrap executors await pending tasks:::ref->executor->ref->get->if->synchronized->ref->get->if->join
BootstrapLogger.BootstrapExecutors#isAlive()::: bootstrap executors is alive:::ref->executor->ref->get->if->return->synchronized->ref->get->return
BootstrapLogger.BootstrapExecutors#enqueue(LogEvent)::: bootstrap executors enqueue:::if->return->synchronized->if->return->if->else
BootstrapLogger.BootstrapExecutors#flush()::: bootstrap executors flush:::event->synchronized->while->LogEvent->log->synchronized->prev
BootstrapLogger.LogEvent#log(Logger)::: log event log:::if->if->logger->log->else->logger->log->else->if->logger->log->else->logger->log
BootstrapLogger.LogEvent#log(PlatformLogger.Bridge)::: log event log:::if->if->if->logger->log->else->logger->log->else->if->logger->logrb->else->logger->logrb->else->if->if->logger->logp->else->logger->logp->else->if->logger->logrb->else->logger->logrb
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, Level, ResourceBundle, String, Throwable)::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, Level, ResourceBundle, String, Object[])::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, Level, Supplier, Throwable)::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, Level, Supplier)::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#log(LogEvent, Logger)::: log event log:::sm->System->getSecurityManager->if->BootstrapExecutors->log->log->submit->else->BootstrapExecutors->AccessController->log->log->return->doPrivileged->submit
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String)::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, Throwable)::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, Object[])::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, Supplier)::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#vaueOf(BootstrapLogger, PlatformLogger.Level, Supplier, Throwable)::: log event vaue of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, String, ResourceBundle, String, Object[])::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#valueOf(BootstrapLogger, PlatformLogger.Level, String, String, Supplier, Throwable)::: log event value of:::return->Objects->requireNonNull->Objects->requireNonNull->new->LogEvent
BootstrapLogger.LogEvent#log(LogEvent, PlatformLogger.Bridge)::: log event log:::sm->System->getSecurityManager->if->log->log->else->AccessController->log->log->return->doPrivileged
BootstrapLogger.LogEvent#log(LogEvent)::: log event log:::flush
BootstrapLogger#push(LogEvent)::: bootstrap logger push:::BootstrapExecutors->enqueue->checkBootstrapping
BootstrapLogger#flush(LogEvent)::: bootstrap logger flush:::if->concrete->holder->getConcretePlatformLogger->LogEvent->log->else->concrete->holder->getConcreteLogger->LogEvent->log
BootstrapLogger#getName():::The name of this logger:::return
BootstrapLogger#checkBootstrapping():::Check whether the VM is still bootstrapping, and if not, arranges for this logger's holder to create the real logger and flush the pending event queue.:::if->isBooted->BootstrapExecutors->flush->return->return
BootstrapLogger#isLoggable(Level)::: bootstrap logger is loggable:::if->checkBootstrapping->return->level->getSeverity->getSeverity->else->spi->holder->wrapped->return->spi->isLoggable
BootstrapLogger#log(Level, ResourceBundle, String, Throwable)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->wrapped->spi->log
BootstrapLogger#log(Level, ResourceBundle, String, Object...)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->wrapped->spi->log
BootstrapLogger#log(Level, String, Throwable)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->wrapped->spi->log
BootstrapLogger#log(Level, String, Object...)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->wrapped->spi->log
BootstrapLogger#log(Level, Supplier)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->wrapped->spi->log
BootstrapLogger#log(Level, Object)::: bootstrap logger log:::if->checkBootstrapping->Logger.super->log->else->spi->holder->wrapped->spi->log
BootstrapLogger#log(Level, String)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->wrapped->spi->log
BootstrapLogger#log(Level, Supplier, Throwable)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->wrapped->spi->log
BootstrapLogger#isLoggable(PlatformLogger.Level)::: bootstrap logger is loggable:::if->checkBootstrapping->return->level->intValue->intValue->else->spi->holder->platform->return->spi->isLoggable
BootstrapLogger#isEnabled()::: bootstrap logger is enabled:::if->checkBootstrapping->return->else->spi->holder->platform->return->spi->isEnabled
BootstrapLogger#log(PlatformLogger.Level, String)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->log
BootstrapLogger#log(PlatformLogger.Level, String, Throwable)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->log
BootstrapLogger#log(PlatformLogger.Level, String, Object...)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->log
BootstrapLogger#log(PlatformLogger.Level, Supplier)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->log
BootstrapLogger#log(PlatformLogger.Level, Throwable, Supplier)::: bootstrap logger log:::if->checkBootstrapping->LogEvent->vaueOf->push->else->spi->holder->platform->spi->log
BootstrapLogger#logp(PlatformLogger.Level, String, String, String)::: bootstrap logger logp:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->logp
BootstrapLogger#logp(PlatformLogger.Level, String, String, Supplier)::: bootstrap logger logp:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->logp
BootstrapLogger#logp(PlatformLogger.Level, String, String, String, Object...)::: bootstrap logger logp:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->logp
BootstrapLogger#logp(PlatformLogger.Level, String, String, String, Throwable)::: bootstrap logger logp:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->logp
BootstrapLogger#logp(PlatformLogger.Level, String, String, Throwable, Supplier)::: bootstrap logger logp:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->logp
BootstrapLogger#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Object...)::: bootstrap logger logrb:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->logrb
BootstrapLogger#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)::: bootstrap logger logrb:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->logrb
BootstrapLogger#logrb(PlatformLogger.Level, ResourceBundle, String, Object...)::: bootstrap logger logrb:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->logrb
BootstrapLogger#logrb(PlatformLogger.Level, ResourceBundle, String, Throwable)::: bootstrap logger logrb:::if->checkBootstrapping->LogEvent->valueOf->push->else->spi->holder->platform->spi->logrb
BootstrapLogger#getLoggerConfiguration()::: bootstrap logger get logger configuration:::if->checkBootstrapping->return->PlatformLogger.ConfigurableBridge.super->getLoggerConfiguration->else->spi->holder->platform->return->getLoggerConfiguration
BootstrapLogger#isBooted()::: bootstrap logger is booted:::if->return->isBooted->getAsBoolean->else->return->VM->isBooted
BootstrapLogger#useSurrogateLoggers()::: bootstrap logger use surrogate loggers:::if->isBooted->return->return
BootstrapLogger#useLazyLoggers()::: bootstrap logger use lazy loggers:::return->BootstrapLogger->isBooted->useSurrogateLoggers
BootstrapLogger#getLogger(LazyLoggerAccessor)::: bootstrap logger get logger:::if->BootstrapLogger->isBooted->return->new->BootstrapLogger->else->if->useSurrogateLoggers->synchronized->if->useSurrogateLoggers->return->createSurrogateLogger->return->accessor->createLogger
BootstrapLogger.RedirectedLoggers#apply(LazyLoggerAccessor)::: redirected loggers apply:::if->throw->new->IllegalStateException->return->SurrogateLogger->t->getLoggerName->makeSurrogateLogger
BootstrapLogger.RedirectedLoggers#get(LazyLoggerAccessor)::: redirected loggers get:::if->throw->new->IllegalStateException->return->redirectedLoggers->computeIfAbsent
BootstrapLogger.RedirectedLoggers#drainLoggersMap()::: redirected loggers drain loggers map:::if->redirectedLoggers->isEmpty->return->if->throw->new->IllegalStateException->accessors->new->HashMap<>->redirectedLoggers->clear->return
BootstrapLogger.RedirectedLoggers#replaceSurrogateLoggers(Map)::: redirected loggers replace surrogate loggers:::detectedBackend->lazy->foreach->accessors->entrySet->a->getKey->a->getValue->release
BootstrapLogger#createSurrogateLogger(LazyLoggerAccessor)::: bootstrap logger create surrogate logger:::return->get
BootstrapLogger#releaseSurrogateLoggers()::: bootstrap logger release surrogate loggers:::releaseSurrogateLoggers->useSurrogateLoggers->if->return->drainLoggersMap->else->return
BootstrapLogger#redirectTemporaryLoggers()::: bootstrap logger redirect temporary loggers:::accessors->releaseSurrogateLoggers->if->RedirectedLoggers->replaceSurrogateLoggers->BootstrapExecutors->flush
BootstrapLogger#awaitPendingTasks()::: bootstrap logger await pending tasks:::BootstrapExecutors->awaitPendingTasks
BootstrapLogger#isAlive()::: bootstrap logger is alive:::return->BootstrapExecutors->isAlive
DefaultLoggerFinder#checkPermission()::: default logger finder check permission:::sm->System->getSecurityManager->if->sm->checkPermission->return
DefaultLoggerFinder.SharedLoggers#get(Function, String)::: shared loggers get:::ref->loggers->get->w->ref->get->if->loggerSupplier->apply->loggers->new->WeakReference<>->put->values->while->queue->poll->if->loggers->values->values->remove->return
DefaultLoggerFinder#isSystem(Module)::: default logger finder is system:::return->AccessController->new->PrivilegedAction<>->doPrivileged
DefaultLoggerFinder#getLogger(String, Module)::: default logger finder get logger:::Objects->requireNonNull->Objects->requireNonNull->checkPermission->return->demandLoggerFor
DefaultLoggerFinder#getLocalizedLogger(String, ResourceBundle, Module)::: default logger finder get localized logger:::return->super->getLocalizedLogger
DefaultLoggerFinder#demandLoggerFor(String, Module):::Returns a Logger logger suitable for use within the given module.:::checkPermission->if->isSystem->return->SimpleConsoleLogger->makeSimpleLogger->get->else->return->SimpleConsoleLogger->makeSimpleLogger->get
LazyLoggers.LoggerAccessor#getLoggerName():::The logger name.:::
LazyLoggers.LoggerAccessor#wrapped():::Returns the wrapped logger object.:::
LazyLoggers.LoggerAccessor#platform():::A PlatformLogger.Bridge view of the wrapped logger object.:::
LazyLoggers.LazyLoggerAccessor#getLoggerName():::The logger name.:::return
LazyLoggers.LazyLoggerAccessor#setWrappedIfNotSet(Logger)::: lazy logger accessor set wrapped if not set:::if
LazyLoggers.LazyLoggerAccessor#wrapped():::Returns the logger SPI object, creating it if 'w' is still null.:::wrapped->if->return->BootstrapLogger->getLogger->synchronized->setWrappedIfNotSet->return
LazyLoggers.LazyLoggerAccessor#platform():::A PlatformLogger.Bridge view of the wrapped logger.:::platform->if->return->synchronized->if->if->convert->return->wrapped->BootstrapLogger->getLogger->synchronized->setWrappedIfNotSet->if->convert->return
LazyLoggers.LazyLoggerAccessor#release(SimpleConsoleLogger, boolean):::Makes this accessor release a temporary logger:::conf->getLoggerConfiguration->level->conf->getPlatformLevel->synchronized->if->platform->this->platform->if->getLoggerConfiguration->if->conf->setPlatformLevel
LazyLoggers.LazyLoggerAccessor#getConcreteLogger(BootstrapLogger):::Replace 'w' by the real SPI logger and flush the log messages pending in the temporary 'bootstrap' Logger:::synchronized->if->return->this->wrapped
LazyLoggers.LazyLoggerAccessor#getConcretePlatformLogger(BootstrapLogger)::: lazy logger accessor get concrete platform logger:::synchronized->if->return->this->platform
LazyLoggers.LazyLoggerAccessor#createLogger()::: lazy logger accessor create logger:::module->moduleRef->get->if->throw->new->IllegalStateException->return->apply
LazyLoggers.LazyLoggerAccessor#makeAccessor(String, LazyLoggerFactories, Module):::Creates a new lazy logger accessor for the named logger:::return->new->LazyLoggerAccessor
LazyLoggers.LazyLoggerWrapper#wrapped()::: lazy logger wrapper wrapped:::return->loggerAccessor->wrapped
LazyLoggers.LazyLoggerWrapper#platformProxy()::: lazy logger wrapper platform proxy:::return->loggerAccessor->platform
LazyLoggers#accessLoggerFinder()::: lazy loggers access logger finder:::prov->if->sm->System->getSecurityManager->LoggerFinder->getLoggerFinder->AccessController->LoggerFinder->getLoggerFinder->doPrivileged->return
LazyLoggers#getLoggerFromFinder(String, Module):::Gets a logger from the LoggerFinder:::sm->System->getSecurityManager->if->return->accessLoggerFinder->getLogger->else->return->AccessController->return->accessLoggerFinder->getLogger->doPrivileged
LazyLoggers#getLogger(String, Module):::Returns a (possibly lazy) Logger for the caller.:::if->DefaultLoggerFinder->isSystem->return->getLazyLogger->else->return->getLoggerFromFinder
LazyLoggers#getLazyLogger(String, Module):::Returns a (possibly lazy) Logger suitable for system classes:::useLazyLogger->BootstrapLogger->useLazyLoggers->if->return->new->JdkLazyLogger->else->return->getLoggerFromFinder
LocalizedLoggerWrapper#getBundle()::: localized logger wrapper get bundle:::return
LocalizedLoggerWrapper#log(Level, String)::: localized logger wrapper log:::log
LocalizedLoggerWrapper#log(Level, String, Throwable)::: localized logger wrapper log:::log
LocalizedLoggerWrapper#log(Level, String, Object...)::: localized logger wrapper log:::log
LocalizedLoggerWrapper#log(Level, Object)::: localized logger wrapper log:::wrapped->log
LocalizedLoggerWrapper#log(Level, Supplier)::: localized logger wrapper log:::wrapped->log
LocalizedLoggerWrapper#log(Level, Supplier, Throwable)::: localized logger wrapper log:::wrapped->log
LocalizedLoggerWrapper#log(Level, ResourceBundle, String, Object...)::: localized logger wrapper log:::wrapped->log
LocalizedLoggerWrapper#log(Level, ResourceBundle, String, Throwable)::: localized logger wrapper log:::wrapped->log
LocalizedLoggerWrapper#isLoggable(Level)::: localized logger wrapper is loggable:::return->wrapped->isLoggable
LocalizedLoggerWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String)::: localized logger wrapper logp:::logrb
LocalizedLoggerWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String, Throwable)::: localized logger wrapper logp:::logrb
LocalizedLoggerWrapper#logp(sun.util.logging.PlatformLogger.Level, String, String, String, Object...)::: localized logger wrapper logp:::logrb
LocalizedLoggerWrapper#log(sun.util.logging.PlatformLogger.Level, String, Throwable)::: localized logger wrapper log:::logrb
LocalizedLoggerWrapper#log(sun.util.logging.PlatformLogger.Level, String)::: localized logger wrapper log:::logrb
LocalizedLoggerWrapper#log(sun.util.logging.PlatformLogger.Level, String, Object...)::: localized logger wrapper log:::logrb
LoggerFinderLoader#service()::: logger finder loader service:::if->return->synchronized->if->return->loadLoggerFinder->BootstrapLogger->redirectTemporaryLoggers->return
LoggerFinderLoader#configurationErrorPolicy()::: logger finder loader configuration error policy:::errorPolicy->GetPropertyAction->privilegedGetProperty->if->errorPolicy->isEmpty->return->try->return->ErrorPolicy->errorPolicy->toUpperCase->valueOf->catch->return->finally
LoggerFinderLoader#ensureSingletonProvider()::: logger finder loader ensure singleton provider:::return->Boolean->GetPropertyAction->privilegedGetProperty->parseBoolean
LoggerFinderLoader#findLoggerFinderProviders()::: logger finder loader find logger finder providers:::iterator->if->System->getSecurityManager->ServiceLoader->ClassLoader->getSystemClassLoader->load->iterator->else->pa->ServiceLoader->ClassLoader->getSystemClassLoader->load->iterator->AccessController->doPrivileged->return
LoggerFinderLoader#loadLoggerFinder()::: logger finder loader load logger finder:::result->try->iterator->findLoggerFinderProviders->if->iterator->hasNext->iterator->next->if->iterator->hasNext->ensureSingletonProvider->throw->new->ServiceConfigurationError->else->loadDefaultImplementation->catch->new->DefaultLoggerFinder->errorPolicy->configurationErrorPolicy->if->if->throw->else->throw->new->ServiceConfigurationError->else->if->logger->new->SimpleConsoleLogger->logger->log->if->logger->log->finally->return
LoggerFinderLoader#loadDefaultImplementation()::: logger finder loader load default implementation:::sm->System->getSecurityManager->iterator->if->ServiceLoader->loadInstalled->iterator->else->pa->ServiceLoader->loadInstalled->iterator->AccessController->doPrivileged->result->try->if->iterator->hasNext->iterator->next->catch->throw->new->ServiceConfigurationError->finally->if->new->DefaultLoggerFinder->return
LoggerFinderLoader#getLoggerFinder()::: logger finder loader get logger finder:::sm->System->getSecurityManager->if->sm->checkPermission->return->service
LoggerWrapper#wrapped()::: logger wrapper wrapped:::return
LoggerWrapper#platformProxy()::: logger wrapper platform proxy:::return
SimpleConsoleLogger#getDefaultLevel()::: simple console logger get default level:::levelName->GetPropertyAction->privilegedGetProperty->try->return->Level->valueOf->catch->return->finally
SimpleConsoleLogger#getSimpleFormatString()::: simple console logger get simple format string:::return
SimpleConsoleLogger#defaultPlatformLevel()::: simple console logger default platform level:::return
SimpleConsoleLogger#getName()::: simple console logger get name:::return
SimpleConsoleLogger#logLevel(PlatformLogger.Level)::: simple console logger log level:::return->level->systemLevel
SimpleConsoleLogger#logLevel(Level)::: simple console logger log level:::return->PlatformLogger->toPlatformLevel
SimpleConsoleLogger#isLoggable(Level)::: simple console logger is loggable:::return->PlatformLogger->toPlatformLevel->isLoggable
SimpleConsoleLogger#log(Level, ResourceBundle, String, Throwable)::: simple console logger log:::if->isLoggable->if->getString->getCallerInfo->logLevel->publish
SimpleConsoleLogger#log(Level, ResourceBundle, String, Object...)::: simple console logger log:::if->isLoggable->if->getString->getCallerInfo->logLevel->publish
SimpleConsoleLogger#isLoggable(PlatformLogger.Level)::: simple console logger is loggable:::effectiveLevel->effectiveLevel->return->level->ordinal->effectiveLevel->ordinal
SimpleConsoleLogger#isEnabled()::: simple console logger is enabled:::return
SimpleConsoleLogger#log(PlatformLogger.Level, String)::: simple console logger log:::if->isLoggable->getCallerInfo->logLevel->publish
SimpleConsoleLogger#log(PlatformLogger.Level, String, Throwable)::: simple console logger log:::if->isLoggable->getCallerInfo->logLevel->publish
SimpleConsoleLogger#log(PlatformLogger.Level, String, Object...)::: simple console logger log:::if->isLoggable->getCallerInfo->logLevel->publish
SimpleConsoleLogger#effectiveLevel()::: simple console logger effective level:::if->return->defaultPlatformLevel->return
SimpleConsoleLogger#getPlatformLevel()::: simple console logger get platform level:::return
SimpleConsoleLogger#setPlatformLevel(PlatformLogger.Level)::: simple console logger set platform level:::
SimpleConsoleLogger#getLoggerConfiguration()::: simple console logger get logger configuration:::return
SimpleConsoleLogger#outputStream():::Default platform logging support - output messages to System.err - equivalent to ConsoleHandler with SimpleFormatter.:::return
SimpleConsoleLogger#getCallerInfo()::: simple console logger get caller info:::frame->new->CallerFinder->get->if->frame->isPresent->return->frame->get->getClassName->frame->get->getMethodName->else->return
SimpleConsoleLogger.CallerFinder#get():::Returns StackFrame of the caller's frame.:::return->WALKER->s->filter->findFirst->walk
SimpleConsoleLogger.CallerFinder#test(StackWalker.StackFrame):::Returns true if we have found the caller's frame, false if the frame must be skipped.:::cname->t->getClassName->if->isLoggerImplFrame->return->return->Formatting->isFilteredFrame
SimpleConsoleLogger.CallerFinder#isLoggerImplFrame(String)::: caller finder is logger impl frame:::return->cname->equals->cname->equals
SimpleConsoleLogger#getCallerInfo(String, String)::: simple console logger get caller info:::if->return->if->return->return
SimpleConsoleLogger#toString(Throwable)::: simple console logger to string:::throwable->if->sw->new->StringWriter->pw->new->PrintWriter->pw->println->thrown->printStackTrace->pw->close->sw->toString->return
SimpleConsoleLogger#format(Enum, String, Throwable, String)::: simple console logger format:::zdt->ZonedDateTime->now->throwable->toString->return->String->getSimpleFormatString->level->name->format
SimpleConsoleLogger#publish(String, Enum, String)::: simple console logger publish:::outputStream->format->print
SimpleConsoleLogger#publish(String, Enum, String, Throwable)::: simple console logger publish:::outputStream->format->print
SimpleConsoleLogger#publish(String, Enum, String, Object...)::: simple console logger publish:::Formatting->formatMessage->outputStream->format->print
SimpleConsoleLogger#makeSimpleLogger(String)::: simple console logger make simple logger:::return->new->SimpleConsoleLogger
SimpleConsoleLogger#log(PlatformLogger.Level, Supplier)::: simple console logger log:::if->isLoggable->getCallerInfo->logLevel->msgSupplier->get->publish
SimpleConsoleLogger#log(PlatformLogger.Level, Throwable, Supplier)::: simple console logger log:::if->isLoggable->getCallerInfo->logLevel->msgSupplier->get->publish
SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, String)::: simple console logger logp:::if->isLoggable->getCallerInfo->logLevel->publish
SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, Supplier)::: simple console logger logp:::if->isLoggable->getCallerInfo->logLevel->msgSupplier->get->publish
SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, String, Object...)::: simple console logger logp:::if->isLoggable->getCallerInfo->logLevel->publish
SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, String, Throwable)::: simple console logger logp:::if->isLoggable->getCallerInfo->logLevel->publish
SimpleConsoleLogger#logp(PlatformLogger.Level, String, String, Throwable, Supplier)::: simple console logger logp:::if->isLoggable->getCallerInfo->logLevel->msgSupplier->get->publish
SimpleConsoleLogger#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Object...)::: simple console logger logrb:::if->isLoggable->msg->getString->getCallerInfo->logLevel->publish
SimpleConsoleLogger#logrb(PlatformLogger.Level, String, String, ResourceBundle, String, Throwable)::: simple console logger logrb:::if->isLoggable->msg->getString->getCallerInfo->logLevel->publish
SimpleConsoleLogger#logrb(PlatformLogger.Level, ResourceBundle, String, Object...)::: simple console logger logrb:::if->isLoggable->msg->getString->getCallerInfo->logLevel->publish
SimpleConsoleLogger#logrb(PlatformLogger.Level, ResourceBundle, String, Throwable)::: simple console logger logrb:::if->isLoggable->msg->getString->getCallerInfo->logLevel->publish
SimpleConsoleLogger#getString(ResourceBundle, String)::: simple console logger get string:::if->return->try->return->bundle->getString->catch->return->finally
SimpleConsoleLogger.Formatting#isFilteredFrame(StackFrame)::: formatting is filtered frame:::if->st->getDeclaringClass->isAssignableFrom->return->cname->st->getClassName->c->cname->length->cname->charAt->if->if->cname->startsWith->return->if->cname->startsWith->return->else->if->if->cname->startsWith->return->if->cname->startsWith->return->if->cname->startsWith->return->if->cname->startsWith->return->if->cname->startsWith->return->if->for->i->return
SimpleConsoleLogger.Formatting#getSimpleFormat(String, Function)::: formatting get simple format:::if->DEFAULT_FORMAT_PROP_KEY->equals->JUL_FORMAT_PROP_KEY->equals->throw->new->IllegalArgumentException->format->GetPropertyAction->privilegedGetProperty->if->defaultPropertyGetter->apply->if->try->String->ZonedDateTime->now->format->catch->finally->else->return
SimpleConsoleLogger.Formatting#formatMessage(String, Object...)::: formatting format message:::try->if->return->isJavaTestFormat->len->format->length->for->i->if->return->format->return->catch->return->finally
SurrogateLogger#defaultPlatformLevel()::: surrogate logger default platform level:::return
SurrogateLogger#getSimpleFormatString()::: surrogate logger get simple format string:::if->getSimpleFormat->return
SurrogateLogger#getSimpleFormat(Function)::: surrogate logger get simple format:::return->Formatting->getSimpleFormat
SurrogateLogger#makeSurrogateLogger(String)::: surrogate logger make surrogate logger:::return->new->SurrogateLogger
SurrogateLogger#isFilteredFrame(StackWalker.StackFrame)::: surrogate logger is filtered frame:::return->Formatting->isFilteredFrame

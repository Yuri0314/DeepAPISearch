EffectsBlockState#isSubMapOf(EconomicMap, EconomicMap):::Returns true if every value in subMap is also present in the superMap (according to "equals" semantics).:::if->return->cursor->subMap->getEntries->while->cursor->advance->key->cursor->getKey->value->cursor->getValue->otherValue->superMap->get->if->value->equals->return->return
EffectsBlockState#meetMaps(Map, Map):::Modifies target so that only entries that have corresponding entries in source remain.:::iter->target->entrySet->iterator->while->iter->hasNext->entry->iter->next->if->source->entry->getKey->containsKey->else->iter->remove
EffectsClosure#processNode(Node, BlockT, GraphEffectList, FixedWithNextNode):::Collects the effects of virtualizing the given node.:::
GraphEffectList#addFixedNodeBefore(FixedWithNextNode, FixedNode):::Adds the given fixed node to the graph's control flow, before position (so that the original predecessor of position will then be node's predecessor).:::graph->graph->add->addBeforeFixed->add
GraphEffectList#addFloatingNode(ValueNode, String):::Add the given floating node to the graph.:::graph->addWithoutUniqueWithInputs->add
GraphEffectList#initializePhiInput(PhiNode, int, ValueNode):::Sets the phi node's input at the given index to the given value, adding new phi inputs as needed.:::node->graph->addOrUniqueWithInputs->initializeValueAt->add
GraphEffectList#addVirtualMapping(FrameState, EscapeObjectState):::Adds a virtual object's state to the given frame state:::new->Effect->add
GraphEffectList#deleteNode(Node):::Removes the given fixed node from the control flow and deletes it.:::if->GraphUtil->unlinkFixedNode->obsoleteNodes->add->add
GraphEffectList#replaceAtUsages(ValueNode, ValueNode, FixedNode):::Replaces the given node at its usages without deleting it:::try->position->graph->withNodeSourcePosition->replacementNode->graph->addOrUniqueWithInputs->if->next->graph->addBeforeFixed->if->node->hasUsages->node->stamp->replacementNode->stamp->equals->graph->node->stamp->new->PiNode->unique->node->replaceAtUsages->if->GraphUtil->unlinkFixedNode->obsoleteNodes->add->catch->finally->add
GraphEffectList#replaceFirstInput(Node, Node, Node):::Replaces the first occurrence of oldInput in node with newInput.:::new->Effect->add
ObjectState#checkIllegalValues(ValueNode[]):::Ensure that if an JavaConstant#forIllegal() illegal value is seen that the previous value is a double word value.:::if->for->v->return
ObjectState#checkIllegalValue(ValueNode[], int):::Ensure that if an JavaConstant#forIllegal() illegal value is seen that the previous value is a double word value.:::if->isConstant->asConstant->JavaConstant->forIllegal->equals->return
ObjectState#getEntries():::Users of this method are not allowed to change the entries of the returned array.:::return
PartialEscapeBlockState#getObjectState(VirtualObjectNode):::Asserts that the given virtual object is available/reachable in the current state.:::state->object->getObjectId->return
PartialEscapeBlockState#materializeBefore(FixedNode, VirtualObjectNode, GraphEffectList):::Materializes the given virtual object and produces the necessary effects in the effects list:::fixed->getDebug->increment->objects->new->ArrayList<>->values->new->ArrayList<>->locks->new->ArrayList<>->otherAllocations->new->ArrayList<>->ensureVirtual->new->ArrayList<>->materializeWithCommit->materializeEffects->objects->size->otherAllocations->size->addVirtualizationDelta->materializeEffects->new->Effect->add
PartialEscapeClosure.MergeProcessor#merge(List):::Merge all predecessor block states into one block state:::states->statesList->size->new->PartialEscapeBlockState<?>Arr->for->i->statesList->size->virtualObjTemp->intersectVirtualObjects->forceMaterialization->forcedMaterializationValue->frameState->merge->stateAfter->if->frameState->isExceptionHandlingBCI->if->frameState->stackSize->merge->next->unwind->merge->next->if->unwind->exception->frameState->stackAt->nullLocals->for->i->frameState->localsSize->if->unwind->exception->materialized->do->if->PartialEscapeBlockState->identicalObjectStates->newState->adoptAddObjectStates->else->foreach->if->PartialEscapeBlockState->identicalObjectStates->newState->getObjectState->share->addObject->continue->virtualCount->startObj->getObjectState->locksMatch->ensureVirtual->uniqueMaterializedValue->startObj->isVirtual->startObj->getMaterializedValue->for->i->if->mergeObjectStates->else->if->newState->new->ObjectState->addObject->else->materializedValuePhi->StampFactory->forKind->getPhi->mergeEffects->addFloatingNode->for->i->newState->new->ObjectState->addObject->foreach->getPhis->aliases->set->if->hasVirtualInputs->isMarked->processPhi->if->newState->virtualObjects->size->resetObjectStates->mergeEffects->clear->afterMergeEffects->clear->while

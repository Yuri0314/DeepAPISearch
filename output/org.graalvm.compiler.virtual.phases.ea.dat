org.graalvm.compiler.virtual.phases.ea.PartialEscapePhase_OptionDescriptors#get(String)->OptionDescriptor::: partial escape phase_ option descriptors get
org.graalvm.compiler.virtual.phases.ea.PartialEscapePhase_OptionDescriptors#iterator()->Iterator::: partial escape phase_ option descriptors iterator
org.graalvm.compiler.virtual.phases.ea.EarlyReadEliminationPhase#run(StructuredGraph, CoreProviders)->void::: early read elimination phase run
org.graalvm.compiler.virtual.phases.ea.EarlyReadEliminationPhase#createEffectsClosure(CoreProviders, ScheduleResult, ControlFlowGraph)->Closure::: early read elimination phase create effects closure
org.graalvm.compiler.virtual.phases.ea.EarlyReadEliminationPhase#codeSizeIncrease()->float::: early read elimination phase code size increase
org.graalvm.compiler.virtual.phases.ea.EffectList.Effect#isVisible()->boolean::: effect is visible
org.graalvm.compiler.virtual.phases.ea.EffectList.Effect#isCfgKill()->boolean::: effect is cfg kill
org.graalvm.compiler.virtual.phases.ea.EffectList.Effect#apply(StructuredGraph, ArrayList)->void::: effect apply
org.graalvm.compiler.virtual.phases.ea.EffectList.SimpleEffect#apply(StructuredGraph, ArrayList)->void::: simple effect apply
org.graalvm.compiler.virtual.phases.ea.EffectList.SimpleEffect#apply(StructuredGraph)->void::: simple effect apply
org.graalvm.compiler.virtual.phases.ea.EffectList#add(String, SimpleEffect)->void::: effect list add
org.graalvm.compiler.virtual.phases.ea.EffectList#add(String, Effect)->void::: effect list add
org.graalvm.compiler.virtual.phases.ea.EffectList#addAll(EffectList)->void::: effect list add all
org.graalvm.compiler.virtual.phases.ea.EffectList#insertAll(EffectList, int)->void::: effect list insert all
org.graalvm.compiler.virtual.phases.ea.EffectList#checkpoint()->int::: effect list checkpoint
org.graalvm.compiler.virtual.phases.ea.EffectList#size()->int::: effect list size
org.graalvm.compiler.virtual.phases.ea.EffectList#backtrack(int)->void::: effect list backtrack
org.graalvm.compiler.virtual.phases.ea.EffectList#iterator()->Iterator::: effect list iterator
org.graalvm.compiler.virtual.phases.ea.EffectList#get(int)->Effect::: effect list get
org.graalvm.compiler.virtual.phases.ea.EffectList#clear()->void::: effect list clear
org.graalvm.compiler.virtual.phases.ea.EffectList#isEmpty()->boolean::: effect list is empty
org.graalvm.compiler.virtual.phases.ea.EffectList#apply(StructuredGraph, ArrayList, boolean)->void::: effect list apply
org.graalvm.compiler.virtual.phases.ea.EffectList#toString()->String::: effect list to string
org.graalvm.compiler.virtual.phases.ea.EffectsBlockState#toString()->String::: effects block state to string
org.graalvm.compiler.virtual.phases.ea.EffectsBlockState#equivalentTo(T)->boolean::: effects block state equivalent to
org.graalvm.compiler.virtual.phases.ea.EffectsBlockState#isDead()->boolean::: effects block state is dead
org.graalvm.compiler.virtual.phases.ea.EffectsBlockState#markAsDead()->void::: effects block state mark as dead
org.graalvm.compiler.virtual.phases.ea.EffectsBlockState#isSubMapOf(EconomicMap, EconomicMap)->boolean:::Returns true if every value in subMap is also present in the superMap (according to "equals" semantics).
org.graalvm.compiler.virtual.phases.ea.EffectsBlockState#meetMaps(Map, Map)->void:::Modifies target so that only entries that have corresponding entries in source remain.
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#hasChanged()->boolean::: effects closure has changed
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#needsApplyEffects()->boolean::: effects closure needs apply effects
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#applyEffects()->void::: effects closure apply effects
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#processBlock(Block, BlockT)->BlockT::: effects closure process block
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#processNode(Node, BlockT, GraphEffectList, FixedWithNextNode)->boolean:::Collects the effects of virtualizing the given node.
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#merge(Block, List)->BlockT::: effects closure merge
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#processLoop(Loop, BlockT)->List::: effects closure process loop
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#stripKilledLoopLocations(Loop, BlockT)->BlockT::: effects closure strip killed loop locations
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#processKilledLoopLocations(Loop, BlockT, BlockT)->void::: effects closure process killed loop locations
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#processInitialLoopState(Loop, BlockT)->void::: effects closure process initial loop state
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#processLoopExit(LoopExitNode, BlockT, BlockT, GraphEffectList)->void::: effects closure process loop exit
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#createMergeProcessor(Block)->MergeProcessor::: effects closure create merge processor
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.MergeProcessor#merge(List)->void::: merge processor merge
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.MergeProcessor#getPredecessor(int)->Block::: merge processor get predecessor
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.MergeProcessor#getPhis()->NodeIterable::: merge processor get phis
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.MergeProcessor#getPhiValueAt(PhiNode, int)->ValueNode::: merge processor get phi value at
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.MergeProcessor#createValuePhi(Stamp)->ValuePhiNode::: merge processor create value phi
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.MergeProcessor#setPhiInput(PhiNode, int, ValueNode)->void::: merge processor set phi input
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.MergeProcessor#graph()->StructuredGraph::: merge processor graph
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.MergeProcessor#toString()->String::: merge processor to string
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#addScalarAlias(ValueNode, ValueNode)->void::: effects closure add scalar alias
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#hasScalarReplacedInputs(Node)->boolean::: effects closure has scalar replaced inputs
org.graalvm.compiler.virtual.phases.ea.EffectsClosure#getScalarAlias(ValueNode)->ValueNode::: effects closure get scalar alias
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.LoopKillCache#visited()->void::: loop kill cache visited
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.LoopKillCache#visits()->int::: loop kill cache visits
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.LoopKillCache#setKillsAll()->void::: loop kill cache set kills all
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.LoopKillCache#containsLocation(LocationIdentity)->boolean::: loop kill cache contains location
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.LoopKillCache#rememberLoopKilledLocation(LocationIdentity)->void::: loop kill cache remember loop killed location
org.graalvm.compiler.virtual.phases.ea.EffectsClosure.LoopKillCache#loopKillsLocations()->boolean::: loop kill cache loop kills locations
org.graalvm.compiler.virtual.phases.ea.EffectsPhase.Closure#hasChanged()->boolean::: closure has changed
org.graalvm.compiler.virtual.phases.ea.EffectsPhase.Closure#needsApplyEffects()->boolean::: closure needs apply effects
org.graalvm.compiler.virtual.phases.ea.EffectsPhase.Closure#applyEffects()->void::: closure apply effects
org.graalvm.compiler.virtual.phases.ea.EffectsPhase#run(StructuredGraph, CoreProvidersT)->void::: effects phase run
org.graalvm.compiler.virtual.phases.ea.EffectsPhase#runAnalysis(StructuredGraph, CoreProvidersT)->boolean::: effects phase run analysis
org.graalvm.compiler.virtual.phases.ea.EffectsPhase#postIteration(StructuredGraph, CoreProvidersT, EconomicSet)->void::: effects phase post iteration
org.graalvm.compiler.virtual.phases.ea.EffectsPhase#createEffectsClosure(CoreProvidersT, ScheduleResult, ControlFlowGraph)->Closure::: effects phase create effects closure
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#clear()->void::: graph effect list clear
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#addCounterBefore(String, String, int, boolean, FixedNode)->void::: graph effect list add counter before
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#addCounterAfter(String, String, int, boolean, FixedWithNextNode)->void::: graph effect list add counter after
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#addWeakCounterCounterBefore(String, String, int, boolean, ValueNode, FixedNode)->void::: graph effect list add weak counter counter before
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#addFixedNodeBefore(FixedWithNextNode, FixedNode)->void:::Adds the given fixed node to the graph's control flow, before position (so that the original predecessor of position will then be node's predecessor).
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#ensureAdded(ValueNode, FixedNode)->void::: graph effect list ensure added
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#addVirtualizationDelta(int)->void::: graph effect list add virtualization delta
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#getVirtualizationDelta()->int::: graph effect list get virtualization delta
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#addFloatingNode(ValueNode, String)->void:::Add the given floating node to the graph.
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#initializePhiInput(PhiNode, int, ValueNode)->void:::Sets the phi node's input at the given index to the given value, adding new phi inputs as needed.
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#addVirtualMapping(FrameState, EscapeObjectState)->void:::Adds a virtual object's state to the given frame state
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#deleteNode(Node)->void:::Removes the given fixed node from the control flow and deletes it.
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#killIfBranch(IfNode, boolean)->void::: graph effect list kill if branch
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#replaceWithSink(FixedWithNextNode, ControlSinkNode)->void::: graph effect list replace with sink
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#replaceAtUsages(ValueNode, ValueNode, FixedNode)->void:::Replaces the given node at its usages without deleting it
org.graalvm.compiler.virtual.phases.ea.GraphEffectList#replaceFirstInput(Node, Node, Node)->void:::Replaces the first occurrence of oldInput in node with newInput.
org.graalvm.compiler.virtual.phases.ea.ObjectState#cloneState()->ObjectState::: object state clone state
org.graalvm.compiler.virtual.phases.ea.ObjectState#checkIllegalValues(ValueNode[])->boolean:::Ensure that if an JavaConstant#forIllegal() illegal value is seen that the previous value is a double word value.
org.graalvm.compiler.virtual.phases.ea.ObjectState#checkIllegalValue(ValueNode[], int)->boolean:::Ensure that if an JavaConstant#forIllegal() illegal value is seen that the previous value is a double word value.
org.graalvm.compiler.virtual.phases.ea.ObjectState#createEscapeObjectState(DebugContext, VirtualObjectNode)->EscapeObjectState::: object state create escape object state
org.graalvm.compiler.virtual.phases.ea.ObjectState#isVirtual()->boolean::: object state is virtual
org.graalvm.compiler.virtual.phases.ea.ObjectState#getEntries()->ValueNode[]:::Users of this method are not allowed to change the entries of the returned array.
org.graalvm.compiler.virtual.phases.ea.ObjectState#getEntry(int)->ValueNode::: object state get entry
org.graalvm.compiler.virtual.phases.ea.ObjectState#getMaterializedValue()->ValueNode::: object state get materialized value
org.graalvm.compiler.virtual.phases.ea.ObjectState#setEntry(int, ValueNode)->void::: object state set entry
org.graalvm.compiler.virtual.phases.ea.ObjectState#escape(ValueNode)->void::: object state escape
org.graalvm.compiler.virtual.phases.ea.ObjectState#updateMaterializedValue(ValueNode)->void::: object state update materialized value
org.graalvm.compiler.virtual.phases.ea.ObjectState#addLock(MonitorIdNode)->void::: object state add lock
org.graalvm.compiler.virtual.phases.ea.ObjectState#removeLock()->MonitorIdNode::: object state remove lock
org.graalvm.compiler.virtual.phases.ea.ObjectState#getLocks()->LockState::: object state get locks
org.graalvm.compiler.virtual.phases.ea.ObjectState#hasLocks()->boolean::: object state has locks
org.graalvm.compiler.virtual.phases.ea.ObjectState#locksEqual(ObjectState)->boolean::: object state locks equal
org.graalvm.compiler.virtual.phases.ea.ObjectState#setEnsureVirtualized(boolean)->void::: object state set ensure virtualized
org.graalvm.compiler.virtual.phases.ea.ObjectState#getEnsureVirtualized()->boolean::: object state get ensure virtualized
org.graalvm.compiler.virtual.phases.ea.ObjectState#toString()->String::: object state to string
org.graalvm.compiler.virtual.phases.ea.ObjectState#hashCode()->int::: object state hash code
org.graalvm.compiler.virtual.phases.ea.ObjectState#equals(Object)->boolean::: object state equals
org.graalvm.compiler.virtual.phases.ea.ObjectState#share()->ObjectState::: object state share
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#contains(VirtualObjectNode)->boolean::: partial escape block state contains
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#getObjectState(int)->ObjectState::: partial escape block state get object state
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#getObjectStateOptional(int)->ObjectState::: partial escape block state get object state optional
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#getObjectState(VirtualObjectNode)->ObjectState:::Asserts that the given virtual object is available/reachable in the current state.
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#getObjectStateOptional(VirtualObjectNode)->ObjectState::: partial escape block state get object state optional
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#setEntry(int, int, ValueNode)->void::: partial escape block state set entry
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#escape(int, ValueNode)->void::: partial escape block state escape
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#addLock(int, MonitorIdNode)->void::: partial escape block state add lock
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#removeLock(int)->MonitorIdNode::: partial escape block state remove lock
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#setEnsureVirtualized(int, boolean)->void::: partial escape block state set ensure virtualized
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#updateMaterializedValue(int, ValueNode)->void::: partial escape block state update materialized value
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#materializeBefore(FixedNode, VirtualObjectNode, GraphEffectList)->void:::Materializes the given virtual object and produces the necessary effects in the effects list
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#objectMaterialized(VirtualObjectNode, AllocatedObjectNode, List)->void::: partial escape block state object materialized
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#addObject(int, ObjectState)->void::: partial escape block state add object
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#getStateCount()->int::: partial escape block state get state count
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#toString()->String::: partial escape block state to string
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#equivalentTo(T)->boolean::: partial escape block state equivalent to
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#resetObjectStates(int)->void::: partial escape block state reset object states
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#identicalObjectStates(PartialEscapeBlockState[])->boolean::: partial escape block state identical object states
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#identicalObjectStates(PartialEscapeBlockState[], int)->boolean::: partial escape block state identical object states
org.graalvm.compiler.virtual.phases.ea.PartialEscapeBlockState#adoptAddObjectStates(PartialEscapeBlockState)->void::: partial escape block state adopt add object states
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#needsApplyEffects()->boolean::: partial escape closure needs apply effects
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.Final#getInitialState()->PartialEscapeBlockState.Final::: final get initial state
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.Final#cloneState(PartialEscapeBlockState.Final)->PartialEscapeBlockState.Final::: final clone state
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#processNode(Node, BlockT, GraphEffectList, FixedWithNextNode)->boolean::: partial escape closure process node
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#requiresProcessing(Node)->boolean::: partial escape closure requires processing
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#virtualize(ValueNode, VirtualizerTool)->boolean::: partial escape closure virtualize
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#ensureMaterialized(PartialEscapeBlockState, int, FixedNode, GraphEffectList, CounterKey)->boolean::: partial escape closure ensure materialized
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#updateStatesForMaterialized(PartialEscapeBlockState, VirtualObjectNode, ValueNode)->boolean::: partial escape closure update states for materialized
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#stripKilledLoopLocations(Loop, BlockT)->BlockT::: partial escape closure strip killed loop locations
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#processInitialLoopState(Loop, BlockT)->void::: partial escape closure process initial loop state
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#processLoopExit(LoopExitNode, BlockT, BlockT, GraphEffectList)->void::: partial escape closure process loop exit
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#createMergeProcessor(Block)->MergeProcessor::: partial escape closure create merge processor
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.MergeProcessor#getPhi(T, Stamp)->PhiNode::: merge processor get phi
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.MergeProcessor#merge(List)->void:::Merge all predecessor block states into one block state
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#getObjectState(PartialEscapeBlockState, ValueNode)->ObjectState::: partial escape closure get object state
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#getAlias(ValueNode)->ValueNode::: partial escape closure get alias
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#getAliasAndResolve(PartialEscapeBlockState, ValueNode)->ValueNode::: partial escape closure get alias and resolve
org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure#addVirtualAlias(VirtualObjectNode, ValueNode)->void::: partial escape closure add virtual alias
org.graalvm.compiler.virtual.phases.ea.PartialEscapePhase#postIteration(StructuredGraph, CoreProviders, EconomicSet)->void::: partial escape phase post iteration
org.graalvm.compiler.virtual.phases.ea.PartialEscapePhase#run(StructuredGraph, CoreProviders)->void::: partial escape phase run
org.graalvm.compiler.virtual.phases.ea.PartialEscapePhase#createEffectsClosure(CoreProviders, ScheduleResult, ControlFlowGraph)->Closure::: partial escape phase create effects closure
org.graalvm.compiler.virtual.phases.ea.PartialEscapePhase#checkContract()->boolean::: partial escape phase check contract
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState.ReadCacheEntry#hashCode()->int::: read cache entry hash code
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState.ReadCacheEntry#equals(Object)->boolean::: read cache entry equals
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState.ReadCacheEntry#toString()->String::: read cache entry to string
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState#toString()->String::: read elimination block state to string
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState#objectMaterialized(VirtualObjectNode, AllocatedObjectNode, List)->void::: read elimination block state object materialized
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState#equivalentTo(PEReadEliminationBlockState)->boolean::: read elimination block state equivalent to
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState#addReadCache(ValueNode, LocationIdentity, int, JavaKind, boolean, ValueNode, PartialEscapeClosure)->void::: read elimination block state add read cache
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState#getReadCache(ValueNode, LocationIdentity, int, JavaKind, PartialEscapeClosure)->ValueNode::: read elimination block state get read cache
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState#killReadCache()->void::: read elimination block state kill read cache
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState#killReadCache(LocationIdentity, int)->void::: read elimination block state kill read cache
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState#getReadCache()->EconomicMap::: read elimination block state get read cache
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure#getInitialState()->PEReadEliminationBlockState::: read elimination closure get initial state
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure#processNode(Node, PEReadEliminationBlockState, GraphEffectList, FixedWithNextNode)->boolean::: read elimination closure process node
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure#processInitialLoopState(Loop, PEReadEliminationBlockState)->void::: read elimination closure process initial loop state
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure#processLoopExit(LoopExitNode, PEReadEliminationBlockState, PEReadEliminationBlockState, GraphEffectList)->void::: read elimination closure process loop exit
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure#cloneState(PEReadEliminationBlockState)->PEReadEliminationBlockState::: read elimination closure clone state
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure#createMergeProcessor(Block)->MergeProcessor::: read elimination closure create merge processor
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure#processKilledLoopLocations(Loop, PEReadEliminationBlockState, PEReadEliminationBlockState)->void::: read elimination closure process killed loop locations
org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure#stripKilledLoopLocations(Loop, PEReadEliminationBlockState)->PEReadEliminationBlockState::: read elimination closure strip killed loop locations
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.CacheEntry#duplicateWithObject(ValueNode)->CacheEntry::: cache entry duplicate with object
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.CacheEntry#hashCode()->int::: cache entry hash code
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.CacheEntry#equals(Object)->boolean::: cache entry equals
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.CacheEntry#toString()->String::: cache entry to string
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.CacheEntry#conflicts(LocationIdentity)->boolean::: cache entry conflicts
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.CacheEntry#getIdentity()->LocationIdentity::: cache entry get identity
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.LoadCacheEntry#duplicateWithObject(ValueNode)->CacheEntry::: load cache entry duplicate with object
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.LoadCacheEntry#conflicts(LocationIdentity)->boolean::: load cache entry conflicts
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.LoadCacheEntry#getIdentity()->LocationIdentity::: load cache entry get identity
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.UnsafeLoadCacheEntry#duplicateWithObject(ValueNode)->CacheEntry::: unsafe load cache entry duplicate with object
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.UnsafeLoadCacheEntry#conflicts(LocationIdentity)->boolean::: unsafe load cache entry conflicts
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.UnsafeLoadCacheEntry#hashCode()->int::: unsafe load cache entry hash code
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.UnsafeLoadCacheEntry#equals(Object)->boolean::: unsafe load cache entry equals
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.UnsafeLoadCacheEntry#getIdentity()->LocationIdentity::: unsafe load cache entry get identity
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.UnsafeLoadCacheEntry#toString()->String::: unsafe load cache entry to string
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState#toString()->String::: read elimination block state to string
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState#equivalentTo(ReadEliminationBlockState)->boolean::: read elimination block state equivalent to
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState#addCacheEntry(CacheEntry, ValueNode)->void::: read elimination block state add cache entry
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState#getCacheEntry(CacheEntry)->ValueNode::: read elimination block state get cache entry
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState#killReadCache()->void::: read elimination block state kill read cache
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState#killReadCache(LocationIdentity)->void::: read elimination block state kill read cache
org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState#getReadCache()->EconomicMap, ValueNode>::: read elimination block state get read cache
org.graalvm.compiler.virtual.phases.ea.ReadEliminationClosure#getInitialState()->ReadEliminationBlockState::: read elimination closure get initial state
org.graalvm.compiler.virtual.phases.ea.ReadEliminationClosure#processNode(Node, ReadEliminationBlockState, GraphEffectList, FixedWithNextNode)->boolean::: read elimination closure process node
org.graalvm.compiler.virtual.phases.ea.ReadEliminationClosure#processLoopExit(LoopExitNode, ReadEliminationBlockState, ReadEliminationBlockState, GraphEffectList)->void::: read elimination closure process loop exit
org.graalvm.compiler.virtual.phases.ea.ReadEliminationClosure#cloneState(ReadEliminationBlockState)->ReadEliminationBlockState::: read elimination closure clone state
org.graalvm.compiler.virtual.phases.ea.ReadEliminationClosure#createMergeProcessor(Block)->MergeProcessor::: read elimination closure create merge processor
org.graalvm.compiler.virtual.phases.ea.ReadEliminationClosure#processKilledLoopLocations(Loop, ReadEliminationBlockState, ReadEliminationBlockState)->void::: read elimination closure process killed loop locations
org.graalvm.compiler.virtual.phases.ea.ReadEliminationClosure#stripKilledLoopLocations(Loop, ReadEliminationBlockState)->ReadEliminationBlockState::: read elimination closure strip killed loop locations
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getOptions()->OptionValues::: virtualizer tool impl get options
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getDebug()->DebugContext::: virtualizer tool impl get debug
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getConstantFieldProvider()->ConstantFieldProvider::: virtualizer tool impl get constant field provider
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#reset(PartialEscapeBlockState, ValueNode, FixedNode, GraphEffectList)->void::: virtualizer tool impl reset
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#isDeleted()->boolean::: virtualizer tool impl is deleted
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getAlias(ValueNode)->ValueNode::: virtualizer tool impl get alias
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getEntry(VirtualObjectNode, int)->ValueNode::: virtualizer tool impl get entry
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#setVirtualEntry(VirtualObjectNode, int, ValueNode, JavaKind, long)->boolean::: virtualizer tool impl set virtual entry
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#setEnsureVirtualized(VirtualObjectNode, boolean)->void::: virtualizer tool impl set ensure virtualized
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getEnsureVirtualized(VirtualObjectNode)->boolean::: virtualizer tool impl get ensure virtualized
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#replaceWithVirtual(VirtualObjectNode)->void::: virtualizer tool impl replace with virtual
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#replaceWithValue(ValueNode)->void::: virtualizer tool impl replace with value
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#delete()->void::: virtualizer tool impl delete
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#replaceFirstInput(Node, Node)->void::: virtualizer tool impl replace first input
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#addNode(ValueNode)->void::: virtualizer tool impl add node
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#createVirtualObject(VirtualObjectNode, ValueNode[], List, boolean)->void::: virtualizer tool impl create virtual object
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getMaximumEntryCount()->int::: virtualizer tool impl get maximum entry count
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#replaceWith(ValueNode)->void::: virtualizer tool impl replace with
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#ensureMaterialized(VirtualObjectNode)->boolean::: virtualizer tool impl ensure materialized
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#addLock(VirtualObjectNode, MonitorIdNode)->void::: virtualizer tool impl add lock
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#removeLock(VirtualObjectNode)->MonitorIdNode::: virtualizer tool impl remove lock
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getMetaAccess()->MetaAccessProvider::: virtualizer tool impl get meta access
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getConstantReflection()->ConstantReflectionProvider::: virtualizer tool impl get constant reflection
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#canonicalizeReads()->boolean::: virtualizer tool impl canonicalize reads
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#allUsagesAvailable()->boolean::: virtualizer tool impl all usages available
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#getAssumptions()->Assumptions::: virtualizer tool impl get assumptions
org.graalvm.compiler.virtual.phases.ea.VirtualizerToolImpl#smallestCompareWidth()->Integer::: virtualizer tool impl smallest compare width
org.graalvm.compiler.virtual.phases.ea.VirtualUtil#assertNonReachable(StructuredGraph, List)->boolean::: virtual util assert non reachable
org.graalvm.compiler.virtual.phases.ea.VirtualUtil#trace(OptionValues, DebugContext, String)->void::: virtual util trace
org.graalvm.compiler.virtual.phases.ea.VirtualUtil#trace(OptionValues, DebugContext, String, Object)->void::: virtual util trace
org.graalvm.compiler.virtual.phases.ea.VirtualUtil#trace(OptionValues, DebugContext, String, Object, Object)->void::: virtual util trace
org.graalvm.compiler.virtual.phases.ea.VirtualUtil#trace(OptionValues, DebugContext, String, Object, Object, Object)->void::: virtual util trace
org.graalvm.compiler.virtual.phases.ea.VirtualUtil#trace(OptionValues, DebugContext, String, Object, Object, Object, Object)->void::: virtual util trace
org.graalvm.compiler.virtual.phases.ea.VirtualUtil#matches(StructuredGraph, String)->boolean::: virtual util matches

BidiBase#DirPropFlag(byte)::: bidi base  dir prop flag:::return
BidiBase#testDirPropFlagAt(int, int)::: bidi base test dir prop flag at:::return->DirPropFlag
BidiBase#DirPropFlagLR(byte)::: bidi base  dir prop flag r:::return
BidiBase#DirPropFlagE(byte)::: bidi base  dir prop flag e:::return
BidiBase#DirPropFlagO(byte)::: bidi base  dir prop flag o:::return
BidiBase#DirFromStrong(byte)::: bidi base  dir from strong:::return
BidiBase#NoOverride(byte)::: bidi base  no override:::return
BidiBase#GetLRFromLevel(byte)::: bidi base  get from level:::return
BidiBase#IsDefaultLevel(byte)::: bidi base  is default level:::return
BidiBase#IsBidiControlChar(int)::: bidi base  is bidi control char:::return
BidiBase#verifyValidPara()::: bidi base verify valid para:::if->throw->new->IllegalStateException
BidiBase#verifyValidParaOrLine()::: bidi base verify valid para or line:::para->if->return->if->throw->new->IllegalStateException
BidiBase#verifyRange(int, int, int)::: bidi base verify range:::if->throw->new->IllegalArgumentException
BidiBase#getMemory(String, Object, Class, boolean, int)::: bidi base get memory:::len->Array->getLength->if->return->if->if->return->throw->new->OutOfMemoryError->try->return->Array->newInstance->catch->throw->new->OutOfMemoryError->finally
BidiBase#getDirPropsMemory(boolean, int)::: bidi base get dir props memory:::array->getMemory
BidiBase#getDirPropsMemory(int)::: bidi base get dir props memory:::getDirPropsMemory
BidiBase#getLevelsMemory(boolean, int)::: bidi base get levels memory:::array->getMemory
BidiBase#getLevelsMemory(int)::: bidi base get levels memory:::getLevelsMemory
BidiBase#getRunsMemory(boolean, int)::: bidi base get runs memory:::array->getMemory
BidiBase#getRunsMemory(int)::: bidi base get runs memory:::getRunsMemory
BidiBase#getInitialDirPropsMemory(int)::: bidi base get initial dir props memory:::getDirPropsMemory
BidiBase#getInitialLevelsMemory(int)::: bidi base get initial levels memory:::getLevelsMemory
BidiBase#getInitialRunsMemory(int)::: bidi base get initial runs memory:::getRunsMemory
BidiBase#isInverse():::Is this Bidi object set to perform the inverse Bidi algorithm? Note: calling this method after setting the reordering mode with setReorderingMode will return true if the reordering mode was set to REORDER_INVERSE_NUMBERS_AS_L, false for all other values.:::return
BidiBase#checkParaCount()::: bidi base check para count:::saveLimits->saveLevels->count->if->return->oldLength->try->new->intArr->new->byteArr->catch->throw->new->OutOfMemoryError->finally->System->arraycopy->System->arraycopy
BidiBase#getDirProps()::: bidi base get dir props:::i->i0->i1->uchar->dirProp->defaultParaLevel->isDefaultLevel->IsDefaultLevel->isDefaultLevelInverse->controlCount->removeBidiControls->state->lastStrong->isolateStartStack->new->intArr->previousStateStack->new->byteArr->stackLast->if->if->else->for->if->while->if->DirPropFlag->break->if->if->else->if->if->for->if->DirPropFlag->DirPropFlag
BidiBase#GetParaLevelAt(int)::: bidi base  get para level at:::if->return->i->for->if->return
BidiBase#bracketInit(BracketData)::: bidi base bracket init:::new->IsoRun->GetParaLevelAt->GetParaLevelAt->new->OpeningArr
BidiBase#bracketProcessB(BracketData, byte)::: bidi base bracket process b:::
BidiBase#bracketProcessBoundary(BracketData, int, byte, byte)::: bidi base bracket process boundary:::pLastIsoRun->if->DirPropFlag->return->if->NoOverride->NoOverride
BidiBase#bracketProcessLRI_RLI(BracketData, byte)::: bidi base bracket process i_ i:::pLastIsoRun->lastLimit->if->new->IsoRun
BidiBase#bracketProcessPDI(BracketData)::: bidi base bracket process i:::pLastIsoRun
BidiBase#bracketAddOpening(BracketData, char, int)::: bidi base bracket add opening:::pLastIsoRun->pOpening->if->saveOpenings->count->try->new->OpeningArr->catch->throw->new->OutOfMemoryError->finally->System->arraycopy->if->new->Opening
BidiBase#fixN0c(BracketData, int, int, byte)::: bidi base fix n0c:::pLastIsoRun->qOpening->k->openingPosition->closingPosition->for
BidiBase#bracketProcessClosing(BracketData, int, int)::: bidi base bracket process closing:::pLastIsoRun->pOpening->qOpening->direction->stable->newProp->if->else->if->if->else->else->return->fixN0c->if->while->else->k->while->for->return
BidiBase#bracketProcessChar(BracketData, int)::: bidi base bracket process char:::pLastIsoRun->dirProp->newProp->level->if->c->match->idx->for->if->UCharacter->getBidiPairedBracket->else->if->UCharacter->getIntPropertyValue->if->bracketAddOpening->else->if->bracketAddOpening->bracketAddOpening->if->if->else->if->DirFromStrong->else->if->if->if->else->if->else->else->if->else->if->if->else->if->i->flag->DirFromStrong->DirPropFlag->for
BidiBase#directionFromFlags()::: bidi base direction from flags:::if->DirPropFlag->return->else->if->return->else->return
BidiBase#resolveExplicitLevels()::: bidi base resolve explicit levels:::i->dirProp->level->GetParaLevelAt->dirct->directionFromFlags->if->return->if->paraIndex->start->limit->for->return->if->paraIndex->start->limit->bracketData->new->BracketData->bracketInit->for->return->embeddingLevel->newLevel->previousLevel->lastCcPos->stack->new->shortArr->stackLast->overflowIsolateCount->overflowEmbeddingCount->validIsolateCount->bracketData->new->BracketData->bracketInit->for->if->DirPropFlagLR->if->DirPropFlag->DirPropFlag->directionFromFlags->return
BidiBase#checkExplicitLevels()::: bidi base check explicit levels:::dirProp->i->isolateCount->level->for->if->DirPropFlagLR->return->directionFromFlags
BidiBase#GetStateProps(short)::: bidi base  get state props:::return
BidiBase#GetActionProps(short)::: bidi base  get action props:::return
BidiBase#GetState(byte)::: bidi base  get state:::return
BidiBase#GetAction(byte)::: bidi base  get action:::return
BidiBase#addPoint(int, int)::: bidi base add point:::point->new->Point->len->if->new->PointArr->if->savePoints->new->PointArr->System->arraycopy
BidiBase#setLevelsOutsideIsolates(int, int, byte)::: bidi base set levels outside isolates:::dirProp->isolateCount->k->for
BidiBase#processPropertySeq(LevState, short, int, int)::: bidi base process property seq:::cell->impTab->impAct->oldStateSeq->actionSeq->level->addLevel->start0->k->GetState->GetAction->if->switch->break->break->setLevelsOutsideIsolates->break->setLevelsOutsideIsolates->break->if->addPoint->if->if->if->addPoint->break->for->if->addPoint->break->if->break->if->if->break->if->addPoint->addPoint->break->if->break->break->for->if->addPoint->break->addPoint->addPoint->break->if->addPoint->break->for->break->for->break->for->break->throw->new->IllegalStateException->if->if->for->else->setLevelsOutsideIsolates
BidiBase#resolveImplicitLevels(int, int, short, short)::: bidi base resolve implicit levels:::dirProp->levState->new->LevState->i->start1->start2->oldStateImp->stateImp->actionImp->gprop->resProp->cell->inverseRTL->nextStrongProp->nextStrongPos->GetParaLevelAt->if->else->if->else->processPropertySeq->for->for->DirPropFlag->if->if->new->Isolate->else->processPropertySeq
BidiBase#adjustWSLevels()::: bidi base adjust levels:::i->if->flag->while->while->DirPropFlag->if->DirPropFlag->else->GetParaLevelAt->while->DirPropFlag->if->else->if->DirPropFlag->break->else->if->GetParaLevelAt->break
BidiBase#setParaSuccess()::: bidi base set para success:::
BidiBase#Bidi_Min(int, int)::: bidi base  bidi_ min:::return
BidiBase#Bidi_Abs(int)::: bidi base  bidi_ abs:::return
BidiBase#setParaRunsOnly(char[], byte)::: bidi base set para runs only:::visualMap->visualText->saveLength->saveTrailingWSStart->saveLevels->saveDirection->i->j->visualStart->logicalStart->oldRunCount->runLength->addedRuns->insertRemove->start->limit->step->indexOddBit->logicalPos->index->index1->saveOptions->parmLength->if->setPara->return->if->setPara->new->byteArr->System->getLevels->arraycopy->writeReordered->getVisualMap->setPara->BidiLine->getRuns->for->if->getRunsMemory->if->else->System->arraycopy->for->newI->for->if
BidiBase#setPara(String, byte, byte[]):::Perform the Unicode Bidi algorithm:::if->new->charArr->setPara->else->text->toCharArray->setPara
BidiBase#setPara(char[], byte, byte[]):::Perform the Unicode Bidi algorithm:::if->verifyRange->if->new->charArr->if->setParaRunsOnly->return->new->byteArr->new->byteArr->new->BidiRunArr->IsDefaultLevel->if->if->IsDefaultLevel->DirPropFlagLR->setParaSuccess->return->getDirPropsMemory->getDirProps->if->getLevelsMemory->resolveExplicitLevels->else->checkExplicitLevels->if->if->new->IsolateArr->switch->break->break->switch->break->break->break->throw->new->InternalError->break->if->else->break->if->else->break->if->GetParaLevelAt->GetLRFromLevel->GetParaLevelAt->GetLRFromLevel->resolveImplicitLevels->else->start->limit->level->nextLevel->sor->eor->GetParaLevelAt->if->GetLRFromLevel->else->GetLRFromLevel->do->if->GetParaLevelAt->GetLRFromLevel->else->while->DirPropFlag->if->else->GetParaLevelAt->if->NoOverride->NoOverride->GetLRFromLevel->else->GetLRFromLevel->if->resolveImplicitLevels->else->do->while->while->adjustWSLevels->break->if->start->last->level->dirProp->for->i->if->else->setParaSuccess
BidiBase#setPara(AttributedCharacterIterator):::Perform the Unicode Bidi algorithm on a given paragraph, as defined in the Unicode Standard Annex #9, version 13, also described in The Unicode Standard, Version 4.0 .  This method takes a paragraph of text and computes the left-right-directionality of each character:::paraLvl->ch->paragraph->first->runDirection->paragraph->getAttribute->shaper->paragraph->getAttribute->if->else->runDirection->equals->lvls->len->paragraph->getEndIndex->paragraph->getBeginIndex->embeddingLevels->new->byteArr->txt->new->charArr->i->while->embedding->paragraph->getAttribute->if->level->embedding->byteValue->if->else->if->else->paragraph->next->if->NumericShapings->shape->setPara
BidiBase#orderParagraphsLTR(boolean):::Specify whether block separators must be allocated level zero, so that successive paragraphs will progress from left to right:::
BidiBase#getDirection():::Get the directionality of the text.:::verifyValidParaOrLine->return
BidiBase#getLength():::Get the length of the text.:::verifyValidParaOrLine->return
BidiBase#getParaLevel():::Get the paragraph level of the text.:::verifyValidParaOrLine->return
BidiBase#getCustomizedClass(int):::Retrieves the Bidi class for a given code point:::dir->bdp->getClass->if->return
BidiBase#setLine(Bidi, BidiBase, Bidi, BidiBase, int, int):::setLine() returns a Bidi object to contain the reordering information, especially the resolved levels, for all the characters in a line of text:::verifyValidPara->verifyRange->verifyRange->return->BidiLine->setLine
BidiBase#getLevelAt(int):::Get the level for one character.:::if->return->getBaseLevel->verifyValidParaOrLine->verifyRange->return->BidiLine->getLevelAt
BidiBase#getLevels():::Get an array of levels for each character.  Note that this method may allocate memory under some circumstances, unlike getLevelAt().:::verifyValidParaOrLine->if->return->new->byteArr->return->BidiLine->getLevels
BidiBase#countRuns():::Get the number of runs:::verifyValidParaOrLine->BidiLine->getRuns->return
BidiBase#getVisualRun(int):::Get a BidiRun object according to its index:::verifyValidParaOrLine->BidiLine->getRuns->verifyRange->return->BidiLine->getVisualRun
BidiBase#getVisualMap():::Get a visual-to-logical index map (array) for the characters in the Bidi (paragraph or line) object:::countRuns->if->return->new->intArr->return->BidiLine->getVisualMap
BidiBase#reorderVisual(byte[]):::This is a convenience method that does not use a Bidi object:::return->BidiLine->reorderVisual
BidiBase#isMixed():::Return true if the line is not left-to-right or right-to-left:::return->isLeftToRight->isRightToLeft
BidiBase#isLeftToRight():::Return true if the line is all left-to-right text and the base direction is left-to-right.:::return->getDirection
BidiBase#isRightToLeft():::Return true if the line is all right-to-left text, and the base direction is right-to-left:::return->getDirection
BidiBase#baseIsLeftToRight():::Return true if the base direction is left-to-right:::return->getParaLevel
BidiBase#getBaseLevel():::Return the base level (0 if left-to-right, 1 if right-to-left).:::return->getParaLevel
BidiBase#getLogicalToVisualRunsMap():::Compute the logical to visual run mapping:::if->return->count->countRuns->if->new->intArr->i->keys->new->longArr->for->Arrays->sort->for
BidiBase#getRunLevel(int):::Return the level of the nth logical run in this line.:::verifyValidParaOrLine->BidiLine->getRuns->if->return->getParaLevel->getLogicalToVisualRunsMap->return
BidiBase#getRunStart(int):::Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.:::verifyValidParaOrLine->BidiLine->getRuns->if->return->else->if->return->getLogicalToVisualRunsMap->return
BidiBase#getRunLimit(int):::Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line:::verifyValidParaOrLine->BidiLine->getRuns->if->return->getLogicalToVisualRunsMap->idx->len->return
BidiBase#requiresBidi(char[], int, int):::Return true if the specified text requires bidi analysis:::RTLMask->if->throw->new->IllegalArgumentException->for->i->return
BidiBase#reorderVisually(byte[], int, Object[], int, int):::Reorder the objects in the array into visual order based on their levels:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->reorderLevels->new->byteArr->System->arraycopy->indexMap->reorderVisual->temp->new->ObjectArr->System->arraycopy->for->i
BidiBase#writeReordered(int):::Take a Bidi object containing the reordering information for a piece of text (one or more paragraphs) set by setPara() or for a line of text set by setLine() and return a string containing the reordered text:::verifyValidParaOrLine->if->return->return->BidiWriter->writeReordered
BidiBase#toString():::Display the bidi internal state, used in debugging.:::buf->getClass->getName->new->StringBuilder->buf->append->buf->append->buf->append->buf->append->buf->append->buf->append->buf->append->if->buf->append->else->buf->append->buf->append->for->i->buf->append->buf->append->buf->Integer->toHexString->append->for->i->buf->append->return->buf->toString
BidiBase.TextAttributeConstants#getTextAttribute(String)::: text attribute constants get text attribute:::if->return->new->AttributedCharacterIterator.Attribute->else->return->jafa->getTextAttributeConstant
BidiBase.NumericShapings#shape(Object, char[], int, int):::Invokes NumericShaping shape(text,start,count) method.:::if->jafa->shape
BidiLine#setTrailingWSStart(BidiBase)::: bidi line set trailing start:::dirProps->levels->start->paraLevel->if->return->while->BidiBase->DirPropFlag->while
BidiLine#setLine(BidiBase, Bidi, BidiBase, int, int)::: bidi line set line:::length->new->charArr->System->arraycopy->paraBidi->GetParaLevelAt->new->BidiRunArr->if->j->for->lineBidi->getDirPropsMemory->System->arraycopy->lineBidi->getLevelsMemory->System->arraycopy->if->if->else->if->else->else->levels->i->trailingWSStart->level->setTrailingWSStart->if->else->if->else->for->switch->break->break->break->return
BidiLine#getLevelAt(BidiBase, int)::: bidi line get level at:::if->return->bidiBase->GetParaLevelAt->else->return
BidiLine#getLevels(BidiBase)::: bidi line get levels:::start->length->if->Arrays->fill->if->levels->new->byteArr->System->arraycopy->return->return
BidiLine#getVisualRun(BidiBase, int)::: bidi line get visual run:::start->limit->level->if->else->return->new->BidiRun
BidiLine#getSingleRun(BidiBase, byte)::: bidi line get single run:::new->BidiRun
BidiLine#reorderLine(BidiBase, byte, byte)::: bidi line reorder line:::if->return->runs->tempRun->levels->firstRun->endRun->limitRun->runCount->if->while->for->if->if->while
BidiLine#getRunFromLogicalIndex(BidiBase, int)::: bidi line get run from logical index:::runs->runCount->visualStart->i->length->logicalStart->for->throw->new->IllegalStateException
BidiLine#getRuns(BidiBase)::: bidi line get runs:::if->return->if->getSingleRun->else->length->limit->levels->i->runCount->level->for->if->getSingleRun->else->runs->runIndex->start->minLevel->maxLevel->if->bidiBase->getRunsMemory->do->if->if->while->new->BidiRun->while->if->new->BidiRun->if->reorderLine->for->if->trailingRun->if->point->runIndex->ip->for->if->runIndex->ic->c->for
BidiLine#prepareReorder(byte[], byte[], byte[])::: bidi line prepare reorder:::start->level->minLevel->maxLevel->if->return->for->indexMap->new->intArr->for->return
BidiLine#reorderVisual(byte[])::: bidi line reorder visual:::aMinLevel->new->byteArr->aMaxLevel->new->byteArr->start->end->limit->temp->minLevel->maxLevel->indexMap->prepareReorder->if->return->if->return->do->for->while->return
BidiLine#getVisualMap(BidiBase)::: bidi line get visual map:::runs->logicalStart->visualStart->visualLimit->allocLength->indexMap->new->intArr->idx->for->j->if->markFound->runCount->insertRemove->i->j->k->for->for->else->if->runCount->logicalEnd->insertRemove->length->i->j->k->m->uchar->evenRun->for->if->return->newMap->new->intArr->System->arraycopy->return
BidiRun#copyFrom(BidiRun)::: bidi run copy from:::
BidiRun#getEmbeddingLevel():::Get level of run:::return
BidiRun#isEvenRun():::Check if run level is even:::return
BidiWriter#IsCombining(int)::: bidi writer  is combining:::return
BidiWriter#doWriteForward(String, int)::: bidi writer do write forward:::switch->return->dest->src->length->new->StringBuffer->i->c->do->UTF16->charAt->UTF16->getCharCount->UTF16->UCharacter->getMirror->append->while->src->length->return->dest->toString->dest->src->length->new->StringBuilder->i->c->do->src->charAt->if->BidiBase->IsBidiControlChar->dest->append->while->src->length->return->dest->toString->dest->src->length->new->StringBuffer->i->c->do->UTF16->charAt->UTF16->getCharCount->if->BidiBase->IsBidiControlChar->UTF16->UCharacter->getMirror->append->while->src->length->return->dest->toString
BidiWriter#doWriteForward(char[], int, int, int)::: bidi writer do write forward:::return->new->String->doWriteForward
BidiWriter#writeReverse(String, int)::: bidi writer write reverse:::dest->src->length->new->StringBuffer->switch->srcLength->src->length->do->i->UTF16->UTF16->charAt->getCharCount->dest->src->substring->append->while->break->src->length->do->c->i->do->UTF16->charAt->UTF16->getCharCount->while->UCharacter->getType->IsCombining->dest->src->substring->append->while->break->src->length->do->i->c->UTF16->charAt->UTF16->getCharCount->if->while->UCharacter->getType->IsCombining->UTF16->charAt->UTF16->getCharCount->if->BidiBase->IsBidiControlChar->continue->j->if->UCharacter->getMirror->UTF16->append->UTF16->getCharCount->dest->src->substring->append->while->break->return->dest->toString
BidiWriter#doWriteReverse(char[], int, int, int)::: bidi writer do write reverse:::return->new->String->writeReverse
BidiWriter#writeReordered(BidiBase, int)::: bidi writer write reordered:::run->runCount->dest->text->bidi->countRuns->if->if->if->new->StringBuilder->if->if->for->else->dirProps->uc->markFlag->for->else->if->for->else->dirProps->for->return->dest->toString

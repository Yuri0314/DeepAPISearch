BidiBase#isInverse():::Is this Bidi object set to perform the inverse Bidi algorithm? Note: calling this method after setting the reordering mode with setReorderingMode will return true if the reordering mode was set to REORDER_INVERSE_NUMBERS_AS_L, false for all other values.:::return
BidiBase#setPara(String, byte, byte[]):::Perform the Unicode Bidi algorithm:::if->new->charArr->setPara->else->text->toCharArray->setPara
BidiBase#setPara(char[], byte, byte[]):::Perform the Unicode Bidi algorithm:::if->verifyRange->if->new->charArr->if->setParaRunsOnly->return->new->byteArr->new->byteArr->new->BidiRunArr->IsDefaultLevel->if->if->IsDefaultLevel->DirPropFlagLR->setParaSuccess->return->getDirPropsMemory->getDirProps->if->getLevelsMemory->resolveExplicitLevels->else->checkExplicitLevels->if->if->new->IsolateArr->switch->break->break->switch->break->break->break->throw->new->InternalError->break->if->else->break->if->else->break->if->GetParaLevelAt->GetLRFromLevel->GetParaLevelAt->GetLRFromLevel->resolveImplicitLevels->else->start->limit->level->nextLevel->sor->eor->GetParaLevelAt->if->GetLRFromLevel->else->GetLRFromLevel->do->if->GetParaLevelAt->GetLRFromLevel->else->while->DirPropFlag->if->else->GetParaLevelAt->if->NoOverride->NoOverride->GetLRFromLevel->else->GetLRFromLevel->if->resolveImplicitLevels->else->do->while->while->adjustWSLevels->break->if->start->last->level->dirProp->for->i->if->else->setParaSuccess
BidiBase#setPara(AttributedCharacterIterator):::Perform the Unicode Bidi algorithm on a given paragraph, as defined in the Unicode Standard Annex #9, version 13, also described in The Unicode Standard, Version 4.0 .  This method takes a paragraph of text and computes the left-right-directionality of each character:::paraLvl->ch->paragraph->first->runDirection->paragraph->getAttribute->shaper->paragraph->getAttribute->if->else->runDirection->equals->lvls->len->paragraph->getEndIndex->paragraph->getBeginIndex->embeddingLevels->new->byteArr->txt->new->charArr->i->while->embedding->paragraph->getAttribute->if->level->embedding->byteValue->if->else->if->else->paragraph->next->if->NumericShapings->shape->setPara
BidiBase#orderParagraphsLTR(boolean):::Specify whether block separators must be allocated level zero, so that successive paragraphs will progress from left to right:::
BidiBase#getDirection():::Get the directionality of the text.:::verifyValidParaOrLine->return
BidiBase#getLength():::Get the length of the text.:::verifyValidParaOrLine->return
BidiBase#getParaLevel():::Get the paragraph level of the text.:::verifyValidParaOrLine->return
BidiBase#getCustomizedClass(int):::Retrieves the Bidi class for a given code point:::dir->bdp->getClass->if->return
BidiBase#setLine(Bidi, BidiBase, Bidi, BidiBase, int, int):::setLine() returns a Bidi object to contain the reordering information, especially the resolved levels, for all the characters in a line of text:::verifyValidPara->verifyRange->verifyRange->return->BidiLine->setLine
BidiBase#getLevelAt(int):::Get the level for one character.:::if->return->getBaseLevel->verifyValidParaOrLine->verifyRange->return->BidiLine->getLevelAt
BidiBase#getLevels():::Get an array of levels for each character.  Note that this method may allocate memory under some circumstances, unlike getLevelAt().:::verifyValidParaOrLine->if->return->new->byteArr->return->BidiLine->getLevels
BidiBase#countRuns():::Get the number of runs:::verifyValidParaOrLine->BidiLine->getRuns->return
BidiBase#getVisualRun(int):::Get a BidiRun object according to its index:::verifyValidParaOrLine->BidiLine->getRuns->verifyRange->return->BidiLine->getVisualRun
BidiBase#isMixed():::Return true if the line is not left-to-right or right-to-left:::return->isLeftToRight->isRightToLeft
BidiBase#isLeftToRight():::Return true if the line is all left-to-right text and the base direction is left-to-right.:::return->getDirection
BidiBase#isRightToLeft():::Return true if the line is all right-to-left text, and the base direction is right-to-left:::return->getDirection
BidiBase#baseIsLeftToRight():::Return true if the base direction is left-to-right:::return->getParaLevel
BidiBase#getBaseLevel():::Return the base level (0 if left-to-right, 1 if right-to-left).:::return->getParaLevel
BidiBase#getLogicalToVisualRunsMap():::Compute the logical to visual run mapping:::if->return->count->countRuns->if->new->intArr->i->keys->new->longArr->for->Arrays->sort->for
BidiBase#getRunLevel(int):::Return the level of the nth logical run in this line.:::verifyValidParaOrLine->BidiLine->getRuns->if->return->getParaLevel->getLogicalToVisualRunsMap->return
BidiBase#getRunStart(int):::Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.:::verifyValidParaOrLine->BidiLine->getRuns->if->return->else->if->return->getLogicalToVisualRunsMap->return
BidiBase#getRunLimit(int):::Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line:::verifyValidParaOrLine->BidiLine->getRuns->if->return->getLogicalToVisualRunsMap->idx->len->return
BidiBase#requiresBidi(char[], int, int):::Return true if the specified text requires bidi analysis:::RTLMask->if->throw->new->IllegalArgumentException->for->i->return
BidiBase#reorderVisually(byte[], int, Object[], int, int):::Reorder the objects in the array into visual order based on their levels:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->reorderLevels->new->byteArr->System->arraycopy->indexMap->reorderVisual->temp->new->ObjectArr->System->arraycopy->for->i
BidiBase#writeReordered(int):::Take a Bidi object containing the reordering information for a piece of text (one or more paragraphs) set by setPara() or for a line of text set by setLine() and return a string containing the reordered text:::verifyValidParaOrLine->if->return->return->BidiWriter->writeReordered
BidiBase#toString():::Display the bidi internal state, used in debugging.:::buf->getClass->getName->new->StringBuilder->buf->append->buf->append->buf->append->buf->append->buf->append->buf->append->buf->append->if->buf->append->else->buf->append->buf->append->for->i->buf->append->buf->append->buf->Integer->toHexString->append->for->i->buf->append->return->buf->toString
BidiRun#getEmbeddingLevel():::Get level of run:::return
BidiRun#isEvenRun():::Check if run level is even:::return

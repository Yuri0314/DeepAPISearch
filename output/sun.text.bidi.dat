sun.text.bidi.BidiBase#DirPropFlag(byte)->int::: bidi base  dir prop flag
sun.text.bidi.BidiBase#testDirPropFlagAt(int, int)->boolean::: bidi base test dir prop flag at
sun.text.bidi.BidiBase#DirPropFlagLR(byte)->int::: bidi base  dir prop flag r
sun.text.bidi.BidiBase#DirPropFlagE(byte)->int::: bidi base  dir prop flag e
sun.text.bidi.BidiBase#DirPropFlagO(byte)->int::: bidi base  dir prop flag o
sun.text.bidi.BidiBase#DirFromStrong(byte)->byte::: bidi base  dir from strong
sun.text.bidi.BidiBase#NoOverride(byte)->byte::: bidi base  no override
sun.text.bidi.BidiBase#IsBidiControlChar(int)->boolean::: bidi base  is bidi control char
sun.text.bidi.BidiBase#verifyValidPara()->void::: bidi base verify valid para
sun.text.bidi.BidiBase#verifyValidParaOrLine()->void::: bidi base verify valid para or line
sun.text.bidi.BidiBase#verifyRange(int, int, int)->void::: bidi base verify range
sun.text.bidi.BidiBase#getDirPropsMemory(int)->void::: bidi base get dir props memory
sun.text.bidi.BidiBase#getLevelsMemory(int)->void::: bidi base get levels memory
sun.text.bidi.BidiBase#getRunsMemory(int)->void::: bidi base get runs memory
sun.text.bidi.BidiBase#isInverse()->boolean:::Is this Bidi object set to perform the inverse Bidi algorithm? Note: calling this method after setting the reordering mode with setReorderingMode will return true if the reordering mode was set to REORDER_INVERSE_NUMBERS_AS_L, false for all other values.
sun.text.bidi.BidiBase#GetParaLevelAt(int)->byte::: bidi base  get para level at
sun.text.bidi.BidiBase#setParaRunsOnly(char[], byte)->void::: bidi base set para runs only
sun.text.bidi.BidiBase#setPara(String, byte, byte[])->void:::Perform the Unicode Bidi algorithm
sun.text.bidi.BidiBase#setPara(char[], byte, byte[])->void:::Perform the Unicode Bidi algorithm
sun.text.bidi.BidiBase#setPara(AttributedCharacterIterator)->void:::Perform the Unicode Bidi algorithm on a given paragraph, as defined in the Unicode Standard Annex #9, version 13, also described in The Unicode Standard, Version 4.0 .  This method takes a paragraph of text and computes the left-right-directionality of each character
sun.text.bidi.BidiBase#orderParagraphsLTR(boolean)->void:::Specify whether block separators must be allocated level zero, so that successive paragraphs will progress from left to right
sun.text.bidi.BidiBase#getDirection()->byte:::Get the directionality of the text.
sun.text.bidi.BidiBase#getLength()->int:::Get the length of the text.
sun.text.bidi.BidiBase#getParaLevel()->byte:::Get the paragraph level of the text.
sun.text.bidi.BidiBase#getCustomizedClass(int)->int:::Retrieves the Bidi class for a given code point
sun.text.bidi.BidiBase#setLine(Bidi, BidiBase, Bidi, BidiBase, int, int)->Bidi:::setLine() returns a Bidi object to contain the reordering information, especially the resolved levels, for all the characters in a line of text
sun.text.bidi.BidiBase#getLevelAt(int)->byte:::Get the level for one character.
sun.text.bidi.BidiBase#getLevels()->byte[]:::Get an array of levels for each character.  Note that this method may allocate memory under some circumstances, unlike getLevelAt().
sun.text.bidi.BidiBase#countRuns()->int:::Get the number of runs
sun.text.bidi.BidiBase#getVisualRun(int)->BidiRun:::Get a BidiRun object according to its index
sun.text.bidi.BidiBase#isMixed()->boolean:::Return true if the line is not left-to-right or right-to-left
sun.text.bidi.BidiBase#isLeftToRight()->boolean:::Return true if the line is all left-to-right text and the base direction is left-to-right.
sun.text.bidi.BidiBase#isRightToLeft()->boolean:::Return true if the line is all right-to-left text, and the base direction is right-to-left
sun.text.bidi.BidiBase#baseIsLeftToRight()->boolean:::Return true if the base direction is left-to-right
sun.text.bidi.BidiBase#getBaseLevel()->int:::Return the base level (0 if left-to-right, 1 if right-to-left).
sun.text.bidi.BidiBase#getLogicalToVisualRunsMap()->void:::Compute the logical to visual run mapping
sun.text.bidi.BidiBase#getRunLevel(int)->int:::Return the level of the nth logical run in this line.
sun.text.bidi.BidiBase#getRunStart(int)->int:::Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.
sun.text.bidi.BidiBase#getRunLimit(int)->int:::Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line
sun.text.bidi.BidiBase#requiresBidi(char[], int, int)->boolean:::Return true if the specified text requires bidi analysis
sun.text.bidi.BidiBase#reorderVisually(byte[], int, Object[], int, int)->void:::Reorder the objects in the array into visual order based on their levels
sun.text.bidi.BidiBase#writeReordered(int)->String:::Take a Bidi object containing the reordering information for a piece of text (one or more paragraphs) set by setPara() or for a line of text set by setLine() and return a string containing the reordered text
sun.text.bidi.BidiBase#toString()->String:::Display the bidi internal state, used in debugging.
sun.text.bidi.BidiLine#setTrailingWSStart(BidiBase)->void::: bidi line set trailing start
sun.text.bidi.BidiLine#setLine(BidiBase, Bidi, BidiBase, int, int)->Bidi::: bidi line set line
sun.text.bidi.BidiLine#getLevelAt(BidiBase, int)->byte::: bidi line get level at
sun.text.bidi.BidiLine#getLevels(BidiBase)->byte[]::: bidi line get levels
sun.text.bidi.BidiLine#getVisualRun(BidiBase, int)->BidiRun::: bidi line get visual run
sun.text.bidi.BidiLine#getRunFromLogicalIndex(BidiBase, int)->int::: bidi line get run from logical index
sun.text.bidi.BidiLine#getRuns(BidiBase)->void::: bidi line get runs
sun.text.bidi.BidiLine#prepareReorder(byte[], byte[], byte[])->int[]::: bidi line prepare reorder
sun.text.bidi.BidiLine#reorderVisual(byte[])->int[]::: bidi line reorder visual
sun.text.bidi.BidiLine#getVisualMap(BidiBase)->int[]::: bidi line get visual map
sun.text.bidi.BidiRun#copyFrom(BidiRun)->void::: bidi run copy from
sun.text.bidi.BidiRun#getEmbeddingLevel()->byte:::Get level of run
sun.text.bidi.BidiRun#isEvenRun()->boolean:::Check if run level is even
sun.text.bidi.BidiWriter#writeReverse(String, int)->String::: bidi writer write reverse
sun.text.bidi.BidiWriter#doWriteReverse(char[], int, int, int)->String::: bidi writer do write reverse
sun.text.bidi.BidiWriter#writeReordered(BidiBase, int)->String::: bidi writer write reordered

ActiveEvent#dispatch():::Dispatch the event to its target, listeners of the events source, or do whatever it is this event is supposed to do.:::
Adjustable#getOrientation():::Gets the orientation of the adjustable object.:::
Adjustable#setMinimum(int):::Sets the minimum value of the adjustable object.:::
Adjustable#getMinimum():::Gets the minimum value of the adjustable object.:::
Adjustable#setMaximum(int):::Sets the maximum value of the adjustable object.:::
Adjustable#getMaximum():::Gets the maximum value of the adjustable object.:::
Adjustable#setUnitIncrement(int):::Sets the unit value increment for the adjustable object.:::
Adjustable#getUnitIncrement():::Gets the unit value increment for the adjustable object.:::
Adjustable#setBlockIncrement(int):::Sets the block value increment for the adjustable object.:::
Adjustable#getBlockIncrement():::Gets the block value increment for the adjustable object.:::
Adjustable#setVisibleAmount(int):::Sets the length of the proportional indicator of the adjustable object.:::
Adjustable#getVisibleAmount():::Gets the length of the proportional indicator.:::
Adjustable#setValue(int):::Sets the current value of the adjustable object:::
Adjustable#getValue():::Gets the current value of the adjustable object.:::
Adjustable#addAdjustmentListener(AdjustmentListener):::Adds a listener to receive adjustment events when the value of the adjustable object changes.:::
Adjustable#removeAdjustmentListener(AdjustmentListener):::Removes an adjustment listener.:::
AlphaComposite#getInstance(int):::Creates an AlphaComposite object with the specified rule.:::switch->return->return->return->return->return->return->return->return->return->return->return->return->throw->new->IllegalArgumentException
AlphaComposite#getInstance(int, float):::Creates an AlphaComposite object with the specified rule and the constant alpha to multiply with the alpha of the source:::if->return->getInstance->return->new->AlphaComposite
AlphaComposite#createContext(ColorModel, ColorModel, RenderingHints):::Creates a context for the compositing operation:::return->new->SunCompositeContext
AlphaComposite#getAlpha():::Returns the alpha value of this AlphaComposite:::return
AlphaComposite#getRule():::Returns the compositing rule of this AlphaComposite.:::return
AlphaComposite#derive(int):::Returns a similar AlphaComposite object that uses the specified compositing rule:::return->getInstance
AlphaComposite#derive(float):::Returns a similar AlphaComposite object that uses the specified alpha value:::return->getInstance
AlphaComposite#hashCode():::Returns the hashcode for this composite.:::return->Float->floatToIntBits
AlphaComposite#equals(Object):::Determines whether the specified object is equal to this AlphaComposite:::if->return->ac->if->return->if->return->return
AttributeValue#hashCode()::: attribute value hash code:::return
AttributeValue#toString()::: attribute value to string:::return
AWTEvent#getAccessControlContext()::: event get access control context:::if->throw->new->SecurityException->return
AWTEvent#initIDs():::Initialize JNI field and method IDs for fields that may be accessed from C.:::
AWTEvent#setSource(Object):::Retargets an event to a new source:::if->return->comp->if->while->synchronized->if->peer->if->nativeSetSource
AWTEvent#nativeSetSource(ComponentPeer)::: event native set source:::
AWTEvent#getID():::Returns the event type.:::return
AWTEvent#toString():::Returns a String representation of this object.:::srcName->if->getName->else->if->getName->return->getClass->getName->paramString
AWTEvent#paramString():::Returns a string representing the state of this Event:::return
AWTEvent#consume():::Consumes this event, if this event can be consumed:::switch->break
AWTEvent#isConsumed():::Returns whether this event has been consumed.:::return
AWTEvent#convertToOld():::Converts a new event to an old one (used for compatibility):::src->getSource->newid->switch->ke->if->ke->isActionKey->keyCode->ke->getKeyCode->if->return->return->ke->getWhen->Event->getOldEventKey->ke->getModifiers->new->Event->me->olde->me->getWhen->me->getX->me->getY->me->getModifiers->new->Event->me->getClickCount->return->return->new->Event->return->new->Event->return->new->Event->if->p->getLocation->return->new->Event->break->ae->cmd->if->getLabel->else->if->getLabel->else->ae->getActionCommand->return->ae->getModifiers->new->Event->ie->arg->if->ie->getStateChange->ie->getItem->else->if->ie->getItem->else->Boolean->ie->getStateChange->valueOf->return->new->Event->aje->switch->aje->getAdjustmentType->break->break->break->break->if->aje->getValueIsAdjusting->else->break->return->return->Integer->aje->getValue->valueOf->new->Event->return
AWTEvent#copyPrivateDataInto(AWTEvent):::Copies all private data from this event into that:::if->accessor->AWTAccessor->getInputEventAccessor->b->accessor->canAccessSystemClipboard->accessor->setCanAccessSystemClipboard
AWTEvent#dispatched()::: event dispatched:::if->AWTAccessor->getInputEventAccessor->setCanAccessSystemClipboard
AWTEventMulticaster#remove(EventListener):::Removes a listener from this multicaster:::if->return->if->return->a2->removeInternal->b2->removeInternal->if->return->return->addInternal
AWTEventMulticaster#componentResized(ComponentEvent):::Handles the componentResized event by invoking the componentResized methods on listener-a and listener-b.:::componentResized->componentResized
AWTEventMulticaster#componentMoved(ComponentEvent):::Handles the componentMoved event by invoking the componentMoved methods on listener-a and listener-b.:::componentMoved->componentMoved
AWTEventMulticaster#componentShown(ComponentEvent):::Handles the componentShown event by invoking the componentShown methods on listener-a and listener-b.:::componentShown->componentShown
AWTEventMulticaster#componentHidden(ComponentEvent):::Handles the componentHidden event by invoking the componentHidden methods on listener-a and listener-b.:::componentHidden->componentHidden
AWTEventMulticaster#componentAdded(ContainerEvent):::Handles the componentAdded container event by invoking the componentAdded methods on listener-a and listener-b.:::componentAdded->componentAdded
AWTEventMulticaster#componentRemoved(ContainerEvent):::Handles the componentRemoved container event by invoking the componentRemoved methods on listener-a and listener-b.:::componentRemoved->componentRemoved
AWTEventMulticaster#focusGained(FocusEvent):::Handles the focusGained event by invoking the focusGained methods on listener-a and listener-b.:::focusGained->focusGained
AWTEventMulticaster#focusLost(FocusEvent):::Handles the focusLost event by invoking the focusLost methods on listener-a and listener-b.:::focusLost->focusLost
AWTEventMulticaster#keyTyped(KeyEvent):::Handles the keyTyped event by invoking the keyTyped methods on listener-a and listener-b.:::keyTyped->keyTyped
AWTEventMulticaster#keyPressed(KeyEvent):::Handles the keyPressed event by invoking the keyPressed methods on listener-a and listener-b.:::keyPressed->keyPressed
AWTEventMulticaster#keyReleased(KeyEvent):::Handles the keyReleased event by invoking the keyReleased methods on listener-a and listener-b.:::keyReleased->keyReleased
AWTEventMulticaster#mouseClicked(MouseEvent):::Handles the mouseClicked event by invoking the mouseClicked methods on listener-a and listener-b.:::mouseClicked->mouseClicked
AWTEventMulticaster#mousePressed(MouseEvent):::Handles the mousePressed event by invoking the mousePressed methods on listener-a and listener-b.:::mousePressed->mousePressed
AWTEventMulticaster#mouseReleased(MouseEvent):::Handles the mouseReleased event by invoking the mouseReleased methods on listener-a and listener-b.:::mouseReleased->mouseReleased
AWTEventMulticaster#mouseEntered(MouseEvent):::Handles the mouseEntered event by invoking the mouseEntered methods on listener-a and listener-b.:::mouseEntered->mouseEntered
AWTEventMulticaster#mouseExited(MouseEvent):::Handles the mouseExited event by invoking the mouseExited methods on listener-a and listener-b.:::mouseExited->mouseExited
AWTEventMulticaster#mouseDragged(MouseEvent):::Handles the mouseDragged event by invoking the mouseDragged methods on listener-a and listener-b.:::mouseDragged->mouseDragged
AWTEventMulticaster#mouseMoved(MouseEvent):::Handles the mouseMoved event by invoking the mouseMoved methods on listener-a and listener-b.:::mouseMoved->mouseMoved
AWTEventMulticaster#windowOpened(WindowEvent):::Handles the windowOpened event by invoking the windowOpened methods on listener-a and listener-b.:::windowOpened->windowOpened
AWTEventMulticaster#windowClosing(WindowEvent):::Handles the windowClosing event by invoking the windowClosing methods on listener-a and listener-b.:::windowClosing->windowClosing
AWTEventMulticaster#windowClosed(WindowEvent):::Handles the windowClosed event by invoking the windowClosed methods on listener-a and listener-b.:::windowClosed->windowClosed
AWTEventMulticaster#windowIconified(WindowEvent):::Handles the windowIconified event by invoking the windowIconified methods on listener-a and listener-b.:::windowIconified->windowIconified
AWTEventMulticaster#windowDeiconified(WindowEvent):::Handles the windowDeiconified event by invoking the windowDeiconified methods on listener-a and listener-b.:::windowDeiconified->windowDeiconified
AWTEventMulticaster#windowActivated(WindowEvent):::Handles the windowActivated event by invoking the windowActivated methods on listener-a and listener-b.:::windowActivated->windowActivated
AWTEventMulticaster#windowDeactivated(WindowEvent):::Handles the windowDeactivated event by invoking the windowDeactivated methods on listener-a and listener-b.:::windowDeactivated->windowDeactivated
AWTEventMulticaster#windowStateChanged(WindowEvent):::Handles the windowStateChanged event by invoking the windowStateChanged methods on listener-a and listener-b.:::windowStateChanged->windowStateChanged
AWTEventMulticaster#windowGainedFocus(WindowEvent):::Handles the windowGainedFocus event by invoking the windowGainedFocus methods on listener-a and listener-b.:::windowGainedFocus->windowGainedFocus
AWTEventMulticaster#windowLostFocus(WindowEvent):::Handles the windowLostFocus event by invoking the windowLostFocus methods on listener-a and listener-b.:::windowLostFocus->windowLostFocus
AWTEventMulticaster#actionPerformed(ActionEvent):::Handles the actionPerformed event by invoking the actionPerformed methods on listener-a and listener-b.:::actionPerformed->actionPerformed
AWTEventMulticaster#itemStateChanged(ItemEvent):::Handles the itemStateChanged event by invoking the itemStateChanged methods on listener-a and listener-b.:::itemStateChanged->itemStateChanged
AWTEventMulticaster#adjustmentValueChanged(AdjustmentEvent):::Handles the adjustmentValueChanged event by invoking the adjustmentValueChanged methods on listener-a and listener-b.:::adjustmentValueChanged->adjustmentValueChanged
AWTEventMulticaster#textValueChanged(TextEvent)::: event multicaster text value changed:::textValueChanged->textValueChanged
AWTEventMulticaster#inputMethodTextChanged(InputMethodEvent):::Handles the inputMethodTextChanged event by invoking the inputMethodTextChanged methods on listener-a and listener-b.:::inputMethodTextChanged->inputMethodTextChanged
AWTEventMulticaster#caretPositionChanged(InputMethodEvent):::Handles the caretPositionChanged event by invoking the caretPositionChanged methods on listener-a and listener-b.:::caretPositionChanged->caretPositionChanged
AWTEventMulticaster#hierarchyChanged(HierarchyEvent):::Handles the hierarchyChanged event by invoking the hierarchyChanged methods on listener-a and listener-b.:::hierarchyChanged->hierarchyChanged
AWTEventMulticaster#ancestorMoved(HierarchyEvent):::Handles the ancestorMoved event by invoking the ancestorMoved methods on listener-a and listener-b.:::ancestorMoved->ancestorMoved
AWTEventMulticaster#ancestorResized(HierarchyEvent):::Handles the ancestorResized event by invoking the ancestorResized methods on listener-a and listener-b.:::ancestorResized->ancestorResized
AWTEventMulticaster#mouseWheelMoved(MouseWheelEvent):::Handles the mouseWheelMoved event by invoking the mouseWheelMoved methods on listener-a and listener-b.:::mouseWheelMoved->mouseWheelMoved
AWTEventMulticaster#add(ComponentListener, ComponentListener):::Adds component-listener-a with component-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(ContainerListener, ContainerListener):::Adds container-listener-a with container-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(FocusListener, FocusListener):::Adds focus-listener-a with focus-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(KeyListener, KeyListener):::Adds key-listener-a with key-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(MouseListener, MouseListener):::Adds mouse-listener-a with mouse-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(MouseMotionListener, MouseMotionListener):::Adds mouse-motion-listener-a with mouse-motion-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(WindowListener, WindowListener):::Adds window-listener-a with window-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(WindowStateListener, WindowStateListener):::Adds window-state-listener-a with window-state-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(WindowFocusListener, WindowFocusListener):::Adds window-focus-listener-a with window-focus-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(ActionListener, ActionListener):::Adds action-listener-a with action-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(ItemListener, ItemListener):::Adds item-listener-a with item-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(AdjustmentListener, AdjustmentListener):::Adds adjustment-listener-a with adjustment-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(TextListener, TextListener):::Adds text-listener-a with text-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(InputMethodListener, InputMethodListener):::Adds input-method-listener-a with input-method-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(HierarchyListener, HierarchyListener):::Adds hierarchy-listener-a with hierarchy-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(HierarchyBoundsListener, HierarchyBoundsListener):::Adds hierarchy-bounds-listener-a with hierarchy-bounds-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#add(MouseWheelListener, MouseWheelListener):::Adds mouse-wheel-listener-a with mouse-wheel-listener-b and returns the resulting multicast listener.:::return->addInternal
AWTEventMulticaster#remove(ComponentListener, ComponentListener):::Removes the old component-listener from component-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(ContainerListener, ContainerListener):::Removes the old container-listener from container-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(FocusListener, FocusListener):::Removes the old focus-listener from focus-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(KeyListener, KeyListener):::Removes the old key-listener from key-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(MouseListener, MouseListener):::Removes the old mouse-listener from mouse-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(MouseMotionListener, MouseMotionListener):::Removes the old mouse-motion-listener from mouse-motion-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(WindowListener, WindowListener):::Removes the old window-listener from window-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(WindowStateListener, WindowStateListener):::Removes the old window-state-listener from window-state-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(WindowFocusListener, WindowFocusListener):::Removes the old window-focus-listener from window-focus-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(ActionListener, ActionListener):::Removes the old action-listener from action-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(ItemListener, ItemListener):::Removes the old item-listener from item-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(AdjustmentListener, AdjustmentListener):::Removes the old adjustment-listener from adjustment-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(TextListener, TextListener):::Removes the old text-listener from text-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(InputMethodListener, InputMethodListener):::Removes the old input-method-listener from input-method-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(HierarchyListener, HierarchyListener):::Removes the old hierarchy-listener from hierarchy-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(HierarchyBoundsListener, HierarchyBoundsListener):::Removes the old hierarchy-bounds-listener from hierarchy-bounds-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#remove(MouseWheelListener, MouseWheelListener):::Removes the old mouse-wheel-listener from mouse-wheel-listener-l and returns the resulting multicast listener.:::return->removeInternal
AWTEventMulticaster#addInternal(EventListener, EventListener):::Returns the resulting multicast listener from adding listener-a and listener-b together:::if->return->if->return->return->new->AWTEventMulticaster
AWTEventMulticaster#removeInternal(EventListener, EventListener):::Returns the resulting multicast listener after removing the old listener from listener-l:::if->return->else->if->return->remove->else->return
AWTEventMulticaster#saveInternal(ObjectOutputStream, String):::Serialization support:::if->saveInternal->else->if->s->writeObject->s->writeObject->if->saveInternal->else->if->s->writeObject->s->writeObject
AWTEventMulticaster#save(ObjectOutputStream, String, EventListener):::Saves a Serializable listener chain to a serialization stream.:::if->return->else->if->saveInternal->else->if->s->writeObject->s->writeObject
AWTEventMulticaster#getListenerCount(EventListener, Class)::: event multicaster get listener count:::if->mc->return->getListenerCount->getListenerCount->else->return->listenerType->isInstance
AWTEventMulticaster#populateListenerArray(EventListener[], EventListener, int)::: event multicaster populate listener array:::if->mc->lhs->populateListenerArray->return->populateListenerArray->else->if->a->getClass->getComponentType->isInstance->return->else->return
AWTEventMulticaster#getListeners(EventListener, Class):::Returns an array of all the objects chained as FooListeners by the specified java.util.EventListener:::if->throw->new->NullPointerException->n->getListenerCount->result->Array->newInstance->populateListenerArray->return
AWTKeyStroke#registerSubclass(Class):::The method has no effect and is only left present to avoid introducing a binary incompatibility.:::
AWTKeyStroke#getCachedStroke(char, int, int, boolean)::: key stroke get cached stroke:::cache->AppContext->getAppContext->get->cacheKey->AppContext->getAppContext->get->if->new->HashMap<>->AppContext->getAppContext->put->if->SwingAccessor->getKeyStrokeAccessor->create->AppContext->getAppContext->put->mapOldModifiers->mapNewModifiers->stroke->cache->get->if->cache->put->AppContext->getAppContext->remove->return
AWTKeyStroke#getAWTKeyStroke(char):::Returns a shared instance of an AWTKeyStroke that represents a KEY_TYPED event for the specified character.:::return->getCachedStroke
AWTKeyStroke#getAWTKeyStroke(Character, int):::Returns a shared instance of an AWTKeyStroke that represents a KEY_TYPED event for the specified Character object and a set of modifiers:::if->throw->new->IllegalArgumentException->return->keyChar->charValue->getCachedStroke
AWTKeyStroke#getAWTKeyStroke(int, int, boolean):::Returns a shared instance of an AWTKeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released:::return->getCachedStroke
AWTKeyStroke#getAWTKeyStroke(int, int):::Returns a shared instance of an AWTKeyStroke, given a numeric key code and a set of modifiers:::return->getCachedStroke
AWTKeyStroke#getAWTKeyStrokeForEvent(KeyEvent):::Returns an AWTKeyStroke which represents the stroke which generated a given KeyEvent:::id->anEvent->getID->switch->return->anEvent->getKeyCode->anEvent->getModifiers->getCachedStroke->return->anEvent->getKeyChar->anEvent->getModifiers->getCachedStroke->return
AWTKeyStroke#getAWTKeyStroke(String):::Parses a string and returns an AWTKeyStroke:::if->throw->new->IllegalArgumentException->errmsg->st->new->StringTokenizer->mask->released->typed->pressed->synchronized->if->uninitializedMap->new->HashMap<>->uninitializedMap->Integer->valueOf->put->uninitializedMap->Integer->valueOf->put->uninitializedMap->Integer->valueOf->put->uninitializedMap->Integer->valueOf->put->uninitializedMap->Integer->valueOf->put->uninitializedMap->Integer->valueOf->put->uninitializedMap->Integer->valueOf->put->uninitializedMap->Integer->valueOf->put->uninitializedMap->Integer->valueOf->put->Collections->synchronizedMap->count->st->countTokens->for->i->throw->new->IllegalArgumentException
AWTKeyStroke#getVKCollection()::: key stroke get collection:::if->new->VKCollection->return
AWTKeyStroke#getVKValue(String):::Returns the integer constant for the KeyEvent.VK field named key:::vkCollect->getVKCollection->value->vkCollect->findCode->if->keyCode->errmsg->try->getField->getInt->catch->throw->new->IllegalArgumentException->throw->new->IllegalArgumentException->finally->Integer->valueOf->vkCollect->put->return->value->intValue
AWTKeyStroke#getKeyChar():::Returns the character for this AWTKeyStroke.:::return
AWTKeyStroke#getKeyCode():::Returns the numeric key code for this AWTKeyStroke.:::return
AWTKeyStroke#getModifiers():::Returns the modifier keys for this AWTKeyStroke.:::return
AWTKeyStroke#isOnKeyRelease():::Returns whether this AWTKeyStroke represents a key release.:::return
AWTKeyStroke#getKeyEventType():::Returns the type of KeyEvent which corresponds to this AWTKeyStroke.:::if->return->else->return
AWTKeyStroke#hashCode():::Returns a numeric value for this object that is likely to be unique, making it a good choice as the index value in a hash table.:::return
AWTKeyStroke#equals(Object):::Returns true if this object is identical to the specified object.:::if->ks->return->return
AWTKeyStroke#toString():::Returns a string that displays and identifies this object's properties:::if->return->getModifiersText->else->return->getModifiersText->getVKText
AWTKeyStroke#getModifiersText(int)::: key stroke get modifiers text:::buf->new->StringBuilder->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->return->buf->toString
AWTKeyStroke#getVKText(int)::: key stroke get text:::vkCollect->getVKCollection->key->Integer->valueOf->name->vkCollect->findName->if->return->name->substring->expected_modifiers->fields->getDeclaredFields->for->i->return
AWTKeyStroke#readResolve():::Returns a cached instance of AWTKeyStroke (or a subclass of AWTKeyStroke) which is equal to this instance.:::synchronized->return->getCachedStroke
AWTKeyStroke#mapOldModifiers(int)::: key stroke map old modifiers:::if->if->if->if->if->return
AWTKeyStroke#mapNewModifiers(int)::: key stroke map new modifiers:::if->if->if->if->if->return
VKCollection#put(String, Integer)::: collection put:::code2name->put->name2code->put
VKCollection#findCode(String)::: collection find code:::return->name2code->get
VKCollection#findName(Integer)::: collection find name:::return->code2name->get
BasicStroke#createStrokedShape(Shape):::Returns a Shape whose interior defines the stroked outline of a specified Shape.:::re->getInstance->return->re->createStrokedShape
BasicStroke#getLineWidth():::Returns the line width:::return
BasicStroke#getEndCap():::Returns the end cap style.:::return
BasicStroke#getLineJoin():::Returns the line join style.:::return
BasicStroke#getMiterLimit():::Returns the limit of miter joins.:::return
BasicStroke#getDashArray():::Returns the array representing the lengths of the dash segments:::if->return->return->dash->clone
BasicStroke#getDashPhase():::Returns the current dash phase:::return
BasicStroke#hashCode():::Returns the hashcode for this stroke.:::hash->Float->floatToIntBits->Float->floatToIntBits->if->Float->floatToIntBits->for->i->return
BasicStroke#equals(Object):::Tests if a specified object is equal to this BasicStroke by first testing if it is a BasicStroke and then comparing its width, join, cap, miter limit, dash, and dash phase attributes with those of this BasicStroke.:::if->return->bs->if->return->if->return->if->return->if->return->if->if->return->if->equals->return->else->if->return->return
BorderLayout#getHgap():::Returns the horizontal gap between components.:::return
BorderLayout#setHgap(int):::Sets the horizontal gap between components.:::
BorderLayout#getVgap():::Returns the vertical gap between components.:::return
BorderLayout#setVgap(int):::Sets the vertical gap between components.:::
BorderLayout#addLayoutComponent(Component, Object):::Adds the specified component to the layout, using the specified constraint object:::synchronized->comp->getTreeLock->if->addLayoutComponent->else->throw->new->IllegalArgumentException
BorderLayout#addLayoutComponent(String, Component)::: border layout add layout component:::synchronized->comp->getTreeLock->if->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->BEFORE_FIRST_LINE->equals->else->if->AFTER_LAST_LINE->equals->else->if->BEFORE_LINE_BEGINS->equals->else->if->AFTER_LINE_ENDS->equals->else->throw->new->IllegalArgumentException
BorderLayout#removeLayoutComponent(Component):::Removes the specified component from this border layout:::synchronized->comp->getTreeLock->if->else->if->else->if->else->if->else->if->if->else->if->else->if->else->if
BorderLayout#getLayoutComponent(Object):::Gets the component that was added using the given constraint:::if->CENTER->equals->return->else->if->NORTH->equals->return->else->if->SOUTH->equals->return->else->if->WEST->equals->return->else->if->EAST->equals->return->else->if->PAGE_START->equals->return->else->if->PAGE_END->equals->return->else->if->LINE_START->equals->return->else->if->LINE_END->equals->return->else->throw->new->IllegalArgumentException
BorderLayout#getLayoutComponent(Container, Object):::Returns the component that corresponds to the given constraint location based on the target Container's component orientation:::ltr->target->getComponentOrientation->isLeftToRight->result->if->NORTH->equals->else->if->SOUTH->equals->else->if->WEST->equals->if->else->if->EAST->equals->if->else->if->CENTER->equals->else->throw->new->IllegalArgumentException->return
BorderLayout#getConstraints(Component):::Gets the constraints for the specified component:::if->return->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->return
BorderLayout#minimumLayoutSize(Container):::Determines the minimum size of the target container using this layout manager:::synchronized->target->getTreeLock->dim->new->Dimension->ltr->target->getComponentOrientation->isLeftToRight->c->if->getChild->d->c->getMinimumSize->Math->max->if->getChild->d->c->getMinimumSize->Math->max->if->getChild->d->c->getMinimumSize->Math->max->if->getChild->d->c->getMinimumSize->Math->max->if->getChild->d->c->getMinimumSize->Math->max->insets->target->getInsets->return
BorderLayout#preferredLayoutSize(Container):::Determines the preferred size of the target container using this layout manager, based on the components in the container:::synchronized->target->getTreeLock->dim->new->Dimension->ltr->target->getComponentOrientation->isLeftToRight->c->if->getChild->d->c->getPreferredSize->Math->max->if->getChild->d->c->getPreferredSize->Math->max->if->getChild->d->c->getPreferredSize->Math->max->if->getChild->d->c->getPreferredSize->Math->max->if->getChild->d->c->getPreferredSize->Math->max->insets->target->getInsets->return
BorderLayout#maximumLayoutSize(Container):::Returns the maximum dimensions for this layout given the components in the specified target container.:::return->new->Dimension
BorderLayout#getLayoutAlignmentX(Container):::Returns the alignment along the x axis:::return
BorderLayout#getLayoutAlignmentY(Container):::Returns the alignment along the y axis:::return
BorderLayout#invalidateLayout(Container):::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.:::
BorderLayout#layoutContainer(Container):::Lays out the container argument using this border layout:::synchronized->target->getTreeLock->insets->target->getInsets->top->bottom->left->right->ltr->target->getComponentOrientation->isLeftToRight->c->if->getChild->c->setSize->d->c->getPreferredSize->c->setBounds->if->getChild->c->setSize->d->c->getPreferredSize->c->setBounds->if->getChild->c->setSize->d->c->getPreferredSize->c->setBounds->if->getChild->c->setSize->d->c->getPreferredSize->c->setBounds->if->getChild->c->setBounds
BorderLayout#getChild(String, boolean):::Get the component that corresponds to the given constraint location:::result->if->else->if->else->if->if->else->if->if->else->if->if->return
BorderLayout#toString():::Returns a string representation of the state of this border layout.:::return->getClass->getName
BufferCapabilities#getFrontBufferCapabilities()::: buffer capabilities get front buffer capabilities:::return
BufferCapabilities#getBackBufferCapabilities()::: buffer capabilities get back buffer capabilities:::return
BufferCapabilities#isPageFlipping()::: buffer capabilities is page flipping:::return->getFlipContents
BufferCapabilities#getFlipContents()::: buffer capabilities get flip contents:::return
BufferCapabilities#isFullScreenRequired()::: buffer capabilities is full screen required:::return
BufferCapabilities#isMultiBufferAvailable()::: buffer capabilities is multi buffer available:::return
BufferCapabilities#clone()::: buffer capabilities clone:::try->return->super->clone->catch->throw->new->InternalError->finally
Button#initIDs():::Initialize JNI field and method IDs for fields that may be accessed from C.:::
Button#constructComponentName():::Construct a name for this component:::synchronized->return
Button#addNotify():::Creates the peer of the button:::synchronized->getTreeLock->if->getComponentFactory->createButton->super->addNotify
Button#getLabel():::Gets the label of this button.:::return
Button#setLabel(String):::Sets the button's label to be the specified string.:::testvalid->synchronized->if->equals->peer->if->peer->setLabel->if->invalidateIfValid
Button#setActionCommand(String):::Sets the command name for the action event fired by this button:::
Button#getActionCommand():::Returns the command name of the action event fired by this button:::return
Button#addActionListener(ActionListener):::Adds the specified action listener to receive action events from this button:::if->return->AWTEventMulticaster->add
Button#removeActionListener(ActionListener):::Removes the specified action listener so that it no longer receives action events from this button:::if->return->AWTEventMulticaster->remove
Button#getActionListeners():::Returns an array of all the action listeners registered on this button.:::return->getListeners
Button#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this Button:::l->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
Button#eventEnabled(AWTEvent)::: button event enabled:::if->if->return->return->return->super->eventEnabled
Button#processEvent(AWTEvent):::Processes events on this button:::if->processActionEvent->return->super->processEvent
Button#processActionEvent(ActionEvent):::Processes action events occurring on this button by dispatching them to any registered ActionListener objects:::listener->if->listener->actionPerformed
Button#paramString():::Returns a string representing the state of this Button:::return->super->paramString
Button#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::s->defaultWriteObject->AWTEventMulticaster->save->s->writeObject
Button#readObject(ObjectInputStream):::Reads the ObjectInputStream and if it isn't null adds a listener to receive action events fired by the button:::GraphicsEnvironment->checkHeadless->s->defaultReadObject->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addActionListener->else->s->readObject
Button#getAccessibleContext():::Gets the AccessibleContext associated with this Button:::if->new->AccessibleAWTButton->return
Button.AccessibleAWTButton#getAccessibleName():::Get the accessible name of this object.:::if->return->else->if->getLabel->return->super->getAccessibleName->else->return->getLabel
Button.AccessibleAWTButton#getAccessibleAction():::Get the AccessibleAction associated with this object:::return
Button.AccessibleAWTButton#getAccessibleValue():::Get the AccessibleValue associated with this object:::return
Button.AccessibleAWTButton#getAccessibleActionCount():::Returns the number of Actions available in this object:::return
Button.AccessibleAWTButton#getAccessibleActionDescription(int):::Return a description of the specified action of the object.:::if->return->else->return
Button.AccessibleAWTButton#doAccessibleAction(int):::Perform the specified Action on the object:::if->Toolkit->getEventQueue->Button.this->getActionCommand->new->ActionEvent->postEvent->return->else->return
Button.AccessibleAWTButton#getCurrentAccessibleValue():::Get the value of this object as a Number.:::return->Integer->valueOf
Button.AccessibleAWTButton#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::return
Button.AccessibleAWTButton#getMinimumAccessibleValue():::Get the minimum value of this object as a Number.:::return->Integer->valueOf
Button.AccessibleAWTButton#getMaximumAccessibleValue():::Get the maximum value of this object as a Number.:::return->Integer->valueOf
Button.AccessibleAWTButton#getAccessibleRole():::Get the role of this object.:::return
Canvas#setGraphicsConfiguration(GraphicsConfiguration)::: canvas set graphics configuration:::synchronized->getTreeLock->peer->if->peer->getAppropriateGraphicsConfiguration->super->setGraphicsConfiguration
Canvas#constructComponentName():::Construct a name for this component:::synchronized->return
Canvas#addNotify():::Creates the peer of the canvas:::synchronized->getTreeLock->if->getComponentFactory->createCanvas->super->addNotify
Canvas#paint(Graphics):::Paints this canvas:::g->clearRect
Canvas#update(Graphics):::Updates this canvas:::g->clearRect->paint
Canvas#postsOldMouseEvents()::: canvas posts old mouse events:::return
Canvas#createBufferStrategy(int):::Creates a new strategy for multi-buffering on this component:::super->createBufferStrategy
Canvas#createBufferStrategy(int, BufferCapabilities):::Creates a new strategy for multi-buffering on this component with the required buffer capabilities:::super->createBufferStrategy
Canvas#getBufferStrategy():::Returns the BufferStrategy used by this component:::return->super->getBufferStrategy
Canvas#getAccessibleContext():::Gets the AccessibleContext associated with this Canvas:::if->new->AccessibleAWTCanvas->return
Canvas.AccessibleAWTCanvas#getAccessibleRole():::Get the role of this object.:::return
CardLayout#getHgap():::Gets the horizontal gap between components.:::return
CardLayout#setHgap(int):::Sets the horizontal gap between components.:::
CardLayout#getVgap():::Gets the vertical gap between components.:::return
CardLayout#setVgap(int):::Sets the vertical gap between components.:::
CardLayout#addLayoutComponent(Component, Object):::Adds the specified component to this card layout's internal table of names:::synchronized->comp->getTreeLock->if->if->addLayoutComponent->else->throw->new->IllegalArgumentException
CardLayout#addLayoutComponent(String, Component)::: card layout add layout component:::synchronized->comp->getTreeLock->if->vector->isEmpty->comp->setVisible->for->i->vector->size->vector->new->Card->add
CardLayout#removeLayoutComponent(Component):::Removes the specified component from the layout:::synchronized->comp->getTreeLock->for->i->vector->size
CardLayout#preferredLayoutSize(Container):::Determines the preferred size of the container argument using this card layout.:::synchronized->parent->getTreeLock->insets->parent->getInsets->ncomponents->parent->getComponentCount->w->h->for->i->return->new->Dimension
CardLayout#minimumLayoutSize(Container):::Calculates the minimum size for the specified panel.:::synchronized->parent->getTreeLock->insets->parent->getInsets->ncomponents->parent->getComponentCount->w->h->for->i->return->new->Dimension
CardLayout#maximumLayoutSize(Container):::Returns the maximum dimensions for this layout given the components in the specified target container.:::return->new->Dimension
CardLayout#getLayoutAlignmentX(Container):::Returns the alignment along the x axis:::return
CardLayout#getLayoutAlignmentY(Container):::Returns the alignment along the y axis:::return
CardLayout#invalidateLayout(Container):::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.:::
CardLayout#layoutContainer(Container):::Lays out the specified container using this card layout:::synchronized->parent->getTreeLock->insets->parent->getInsets->ncomponents->parent->getComponentCount->comp->currentFound->for->i->if->parent->getComponent->setVisible
CardLayout#checkLayout(Container):::Make sure that the Container really has a CardLayout installed:::if->parent->getLayout->throw->new->IllegalArgumentException
CardLayout#first(Container):::Flips to the first card of the container.:::synchronized->parent->getTreeLock->checkLayout->ncomponents->parent->getComponentCount->for->i->if->parent->getComponent->setVisible->parent->validate
CardLayout#next(Container):::Flips to the next card of the specified container:::synchronized->parent->getTreeLock->checkLayout->ncomponents->parent->getComponentCount->for->i->showDefaultComponent
CardLayout#previous(Container):::Flips to the previous card of the specified container:::synchronized->parent->getTreeLock->checkLayout->ncomponents->parent->getComponentCount->for->i->showDefaultComponent
CardLayout#showDefaultComponent(Container)::: card layout show default component:::if->parent->getComponentCount->parent->getComponent->setVisible->parent->validate
CardLayout#last(Container):::Flips to the last card of the container.:::synchronized->parent->getTreeLock->checkLayout->ncomponents->parent->getComponentCount->for->i->if->parent->getComponent->setVisible->parent->validate
CardLayout#show(Container, String):::Flips to the component that was added to this layout with the specified name, using addLayoutComponent:::synchronized->parent->getTreeLock->checkLayout->next->ncomponents->vector->size->for->i->if->next->isVisible->parent->getComponentCount->for->i->next->setVisible->parent->validate
CardLayout#toString():::Returns a string representation of the state of this card layout.:::return->getClass->getName
CardLayout#readObject(ObjectInputStream):::Reads serializable fields from stream.:::f->s->readFields->f->get->f->get->if->f->defaulted->tab->f->get->new->Vector<>->if->tab->isEmpty->for->e->tab->keys->e->hasMoreElements->else->f->get->f->get
CardLayout#writeObject(ObjectOutputStream):::Writes serializable fields to stream.:::tab->new->Hashtable<>->ncomponents->vector->size->for->i->f->s->putFields->f->put->f->put->f->put->f->put->f->put->s->writeFields
Checkbox#setStateInternal(boolean):::Helper function for setState and CheckboxGroup.setSelectedCheckbox Should remain package-private.:::peer->if->peer->setState
Checkbox#constructComponentName():::Constructs a name for this component:::synchronized->return
Checkbox#addNotify():::Creates the peer of the Checkbox:::synchronized->getTreeLock->if->getComponentFactory->createCheckbox->super->addNotify
Checkbox#getLabel():::Gets the label of this check box.:::return
Checkbox#setLabel(String):::Sets this check box's label to be the string argument.:::testvalid->synchronized->if->equals->peer->if->peer->setLabel->if->invalidateIfValid
Checkbox#getState():::Determines whether this check box is in the "on" or "off" state:::return
Checkbox#setState(boolean):::Sets the state of this check box to the specified state:::group->if->if->group->setSelectedCheckbox->else->if->group->getSelectedCheckbox->setStateInternal
Checkbox#getSelectedObjects():::Returns an array (length 1) containing the checkbox label or null if the checkbox is not selected.:::if->items->new->ObjectArr->return->return
Checkbox#getCheckboxGroup():::Determines this check box's group.:::return
Checkbox#setCheckboxGroup(CheckboxGroup):::Sets this check box's group to the specified check box group:::oldGroup->oldState->if->return->synchronized->getState->peer->if->peer->setCheckboxGroup->if->getState->if->getSelectedCheckbox->setState->else->setSelectedCheckbox->if->oldGroup->setSelectedCheckbox
Checkbox#addItemListener(ItemListener):::Adds the specified item listener to receive item events from this check box:::if->return->AWTEventMulticaster->add
Checkbox#removeItemListener(ItemListener):::Removes the specified item listener so that the item listener no longer receives item events from this check box:::if->return->AWTEventMulticaster->remove
Checkbox#getItemListeners():::Returns an array of all the item listeners registered on this checkbox.:::return->getListeners
Checkbox#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this Checkbox:::l->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
Checkbox#eventEnabled(AWTEvent)::: checkbox event enabled:::if->if->return->return->return->super->eventEnabled
Checkbox#processEvent(AWTEvent):::Processes events on this check box:::if->processItemEvent->return->super->processEvent
Checkbox#processItemEvent(ItemEvent):::Processes item events occurring on this check box by dispatching them to any registered ItemListener objects:::listener->if->listener->itemStateChanged
Checkbox#paramString():::Returns a string representing the state of this Checkbox:::str->super->paramString->label->if->return
Checkbox#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::s->defaultWriteObject->AWTEventMulticaster->save->s->writeObject
Checkbox#readObject(ObjectInputStream):::Reads the ObjectInputStream and if it isn't null adds a listener to receive item events fired by the Checkbox:::GraphicsEnvironment->checkHeadless->s->defaultReadObject->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addItemListener->else->s->readObject
Checkbox#initIDs():::Initialize JNI field and method ids:::
Checkbox#getAccessibleContext():::Gets the AccessibleContext associated with this Checkbox:::if->new->AccessibleAWTCheckbox->return
Checkbox.AccessibleAWTCheckbox#itemStateChanged(ItemEvent):::Fire accessible property change events when the state of the toggle button changes.:::cb->e->getSource->if->if->cb->getState->firePropertyChange->else->firePropertyChange
Checkbox.AccessibleAWTCheckbox#getAccessibleAction():::Get the AccessibleAction associated with this object:::return
Checkbox.AccessibleAWTCheckbox#getAccessibleValue():::Get the AccessibleValue associated with this object:::return
Checkbox.AccessibleAWTCheckbox#getAccessibleActionCount():::Returns the number of Actions available in this object:::return
Checkbox.AccessibleAWTCheckbox#getAccessibleActionDescription(int):::Return a description of the specified action of the object.:::return
Checkbox.AccessibleAWTCheckbox#doAccessibleAction(int):::Perform the specified Action on the object:::return
Checkbox.AccessibleAWTCheckbox#getCurrentAccessibleValue():::Get the value of this object as a Number:::return
Checkbox.AccessibleAWTCheckbox#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::return
Checkbox.AccessibleAWTCheckbox#getMinimumAccessibleValue():::Get the minimum value of this object as a Number.:::return
Checkbox.AccessibleAWTCheckbox#getMaximumAccessibleValue():::Get the maximum value of this object as a Number.:::return
Checkbox.AccessibleAWTCheckbox#getAccessibleRole():::Get the role of this object.:::return
Checkbox.AccessibleAWTCheckbox#getAccessibleStateSet():::Get the state set of this object.:::states->super->getAccessibleStateSet->if->getState->states->add->return
CheckboxGroup#getSelectedCheckbox():::Gets the current choice from this check box group:::return->getCurrent
CheckboxGroup#getCurrent():::Returns the current choice from this check box group or null if none of checkboxes are selected.:::return
CheckboxGroup#setSelectedCheckbox(Checkbox):::Sets the currently selected check box in this group to be the specified check box:::setCurrent
CheckboxGroup#setCurrent(Checkbox):::Sets the currently selected check box in this group to be the specified check box and unsets all others.:::if->return->oldChoice->if->oldChoice->setState->if->box->getState->box->setStateInternal
CheckboxGroup#toString():::Returns a string representation of this check box group, including the value of its current selection.:::return->getClass->getName
CheckboxMenuItem#constructComponentName():::Construct a name for this MenuComponent:::synchronized->return
CheckboxMenuItem#addNotify():::Creates the peer of the checkbox item:::synchronized->getTreeLock->if->getComponentFactory->createCheckboxMenuItem->super->addNotify
CheckboxMenuItem#getState():::Determines whether the state of this check box menu item is "on" or "off.":::return
CheckboxMenuItem#setState(boolean):::Sets this check box menu item to the specified state:::peer->if->peer->setState
CheckboxMenuItem#getSelectedObjects():::Returns the an array (length 1) containing the checkbox menu item label or null if the checkbox is not selected.:::if->items->new->ObjectArr->return->return
CheckboxMenuItem#addItemListener(ItemListener):::Adds the specified item listener to receive item events from this check box menu item:::if->return->AWTEventMulticaster->add
CheckboxMenuItem#removeItemListener(ItemListener):::Removes the specified item listener so that it no longer receives item events from this check box menu item:::if->return->AWTEventMulticaster->remove
CheckboxMenuItem#getItemListeners():::Returns an array of all the item listeners registered on this checkbox menuitem.:::return->getListeners
CheckboxMenuItem#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this CheckboxMenuItem:::l->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
CheckboxMenuItem#eventEnabled(AWTEvent)::: checkbox menu item event enabled:::if->if->return->return->return->super->eventEnabled
CheckboxMenuItem#processEvent(AWTEvent):::Processes events on this check box menu item:::if->processItemEvent->return->super->processEvent
CheckboxMenuItem#processItemEvent(ItemEvent):::Processes item events occurring on this check box menu item by dispatching them to any registered ItemListener objects:::listener->if->listener->itemStateChanged
CheckboxMenuItem#doMenuEvent(long, int)::: checkbox menu item do menu event:::setState->Toolkit->getEventQueue->getLabel->new->ItemEvent->postEvent
CheckboxMenuItem#paramString():::Returns a string representing the state of this CheckBoxMenuItem:::return->super->paramString
CheckboxMenuItem#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::s->defaultWriteObject->AWTEventMulticaster->save->s->writeObject
CheckboxMenuItem#readObject(ObjectInputStream)::: checkbox menu item read object:::s->defaultReadObject->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addItemListener->else->s->readObject
CheckboxMenuItem#initIDs():::Initialize JNI field and method IDs:::
CheckboxMenuItem#getAccessibleContext():::Gets the AccessibleContext associated with this CheckboxMenuItem:::if->new->AccessibleAWTCheckboxMenuItem->return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleAction():::Get the AccessibleAction associated with this object:::return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleValue():::Get the AccessibleValue associated with this object:::return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleActionCount():::Returns the number of Actions available in this object:::return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleActionDescription(int):::Return a description of the specified action of the object.:::return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#doAccessibleAction(int):::Perform the specified Action on the object:::return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getCurrentAccessibleValue():::Get the value of this object as a Number:::return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getMinimumAccessibleValue():::Get the minimum value of this object as a Number.:::return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getMaximumAccessibleValue():::Get the maximum value of this object as a Number.:::return
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem#getAccessibleRole():::Get the role of this object.:::return
Choice#constructComponentName():::Constructs a name for this component:::synchronized->return
Choice#addNotify():::Creates the Choice's peer:::synchronized->getTreeLock->if->getComponentFactory->createChoice->super->addNotify
Choice#getItemCount():::Returns the number of items in this Choice menu.:::return->countItems
Choice#countItems():::Returns the number of items in this Choice menu.:::return->pItems->size
Choice#getItem(int):::Gets the string at the specified index in this Choice menu.:::return->getItemImpl
Choice#getItemImpl(int)::: choice get item impl:::return->pItems->elementAt
Choice#add(String):::Adds an item to this Choice menu.:::addItem
Choice#addItem(String):::Obsolete as of Java 2 platform v1.1:::synchronized->pItems->size->insertNoInvalidate->invalidateIfValid
Choice#insertNoInvalidate(String, int):::Inserts an item to this Choice, but does not invalidate the Choice:::if->throw->new->NullPointerException->pItems->insertElementAt->peer->if->peer->add->if->select
Choice#insert(String, int):::Inserts the item into this choice at the specified position:::synchronized->if->throw->new->IllegalArgumentException->Math->pItems->size->min->insertNoInvalidate->invalidateIfValid
Choice#remove(String):::Removes the first occurrence of item from the Choice menu:::synchronized->index->pItems->indexOf->if->throw->new->IllegalArgumentException->else->removeNoInvalidate->invalidateIfValid
Choice#remove(int):::Removes an item from the choice menu at the specified position:::synchronized->removeNoInvalidate->invalidateIfValid
Choice#removeNoInvalidate(int):::Removes an item from the Choice at the specified position, but does not invalidate the Choice:::pItems->removeElementAt->peer->if->peer->remove->if->pItems->size->else->if->select->else->if->select
Choice#removeAll():::Removes all items from the choice menu.:::synchronized->if->removeAll->pItems->removeAllElements->invalidateIfValid
Choice#getSelectedItem():::Gets a representation of the current choice as a string.:::return->getItem
Choice#getSelectedObjects():::Returns an array (length 1) containing the currently selected item:::if->items->new->ObjectArr->getItem->return->return
Choice#getSelectedIndex():::Returns the index of the currently selected item:::return
Choice#select(int):::Sets the selected item in this Choice menu to be the item at the specified position:::if->pItems->size->throw->new->IllegalArgumentException->if->pItems->size->peer->if->peer->select
Choice#select(String):::Sets the selected item in this Choice menu to be the item whose name is equal to the specified string:::index->pItems->indexOf->if->select
Choice#addItemListener(ItemListener):::Adds the specified item listener to receive item events from this Choice menu:::if->return->AWTEventMulticaster->add
Choice#removeItemListener(ItemListener):::Removes the specified item listener so that it no longer receives item events from this Choice menu:::if->return->AWTEventMulticaster->remove
Choice#getItemListeners():::Returns an array of all the item listeners registered on this choice.:::return->getListeners
Choice#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this Choice:::l->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
Choice#eventEnabled(AWTEvent)::: choice event enabled:::if->if->return->return->return->super->eventEnabled
Choice#processEvent(AWTEvent):::Processes events on this choice:::if->processItemEvent->return->super->processEvent
Choice#processItemEvent(ItemEvent):::Processes item events occurring on this Choice menu by dispatching them to any registered ItemListener objects:::listener->if->listener->itemStateChanged
Choice#paramString():::Returns a string representing the state of this Choice menu:::return->super->paramString->getSelectedItem
Choice#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::s->defaultWriteObject->AWTEventMulticaster->save->s->writeObject
Choice#readObject(ObjectInputStream):::Reads the ObjectInputStream and if it isn't null adds a listener to receive item events fired by the Choice item:::GraphicsEnvironment->checkHeadless->s->defaultReadObject->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addItemListener->else->s->readObject
Choice#initIDs():::Initialize JNI field and method IDs:::
Choice#getAccessibleContext():::Gets the AccessibleContext associated with this Choice:::if->new->AccessibleAWTChoice->return
Choice.AccessibleAWTChoice#getAccessibleAction():::Get the AccessibleAction associated with this object:::return
Choice.AccessibleAWTChoice#getAccessibleRole():::Get the role of this object.:::return
Choice.AccessibleAWTChoice#getAccessibleActionCount():::Returns the number of accessible actions available in this object If there are more than one, the first one is considered the "default" action of the object.:::return
Choice.AccessibleAWTChoice#getAccessibleActionDescription(int):::Returns a description of the specified action of the object.:::return
Choice.AccessibleAWTChoice#doAccessibleAction(int):::Perform the specified Action on the object:::return
Color#initIDs():::Initialize JNI field and method IDs:::
Color#testColorValueRange(int, int, int, int):::Checks the color integer components supplied for validity:::rangeError->badComponentString->if->if->if->if->if->throw->new->IllegalArgumentException
Color#testColorValueRange(float, float, float, float):::Checks the color float components supplied for validity:::rangeError->badComponentString->if->if->if->if->if->throw->new->IllegalArgumentException
Color#getRed():::Returns the red component in the range 0-255 in the default sRGB space.:::return->getRGB
Color#getGreen():::Returns the green component in the range 0-255 in the default sRGB space.:::return->getRGB
Color#getBlue():::Returns the blue component in the range 0-255 in the default sRGB space.:::return->getRGB
Color#getAlpha():::Returns the alpha component in the range 0-255.:::return->getRGB
Color#getRGB():::Returns the RGB value representing the color in the default sRGB ColorModel:::return
Color#brighter():::Creates a new Color that is a brighter version of this Color:::r->getRed->g->getGreen->b->getBlue->alpha->getAlpha->i->if->return->new->Color->if->if->if->return->Math->min->Math->min->Math->min->new->Color
Color#darker():::Creates a new Color that is a darker version of this Color:::return->Math->getRed->max->Math->getGreen->max->Math->getBlue->max->getAlpha->new->Color
Color#hashCode():::Computes the hash code for this Color.:::return
Color#equals(Object):::Determines whether another object is equal to this Color:::return->getRGB->this->getRGB
Color#toString():::Returns a string representation of this Color:::return->getClass->getName->getRed->getGreen->getBlue
Color#decode(String):::Converts a String to an integer and returns the specified opaque Color:::intval->Integer->decode->i->intval->intValue->return->new->Color
Color#getColor(String):::Finds a color in the system properties:::return->getColor
Color#getColor(String, Color):::Finds a color in the system properties:::intval->Integer->getInteger->if->return->i->intval->intValue->return->new->Color
Color#getColor(String, int):::Finds a color in the system properties:::intval->Integer->getInteger->i->intval->intValue->return->new->Color
Color#HSBtoRGB(float, float, float):::Converts the components of a color, as specified by the HSB model, to an equivalent set of values for the default RGB model:::r->g->b->if->else->h->Math->floor->f->floor->p->q->t->switch->break->break->break->break->break->break->return
Color#RGBtoHSB(int, int, int, float[]):::Converts the components of a color, as specified by the default RGB model, to an equivalent set of values for hue, saturation, and brightness that are the three components of the HSB model:::hue->saturation->brightness->if->new->floatArr->cmax->if->cmin->if->if->else->if->else->redc->greenc->bluec->if->else->if->else->if->return
Color#getHSBColor(float, float, float):::Creates a Color object based on the specified values for the HSB color model:::return->HSBtoRGB->new->Color
Color#getRGBComponents(float[]):::Returns a float array containing the color and alpha components of the Color, as represented in the default sRGB color space:::f->if->new->floatArr->else->if->getRed->getGreen->getBlue->getAlpha->else->return
Color#getRGBColorComponents(float[]):::Returns a float array containing only the color components of the Color, in the default sRGB color space:::f->if->new->floatArr->else->if->getRed->getGreen->getBlue->else->return
Color#getComponents(float[]):::Returns a float array containing the color and alpha components of the Color, in the ColorSpace of the Color:::if->return->getRGBComponents->f->n->if->new->floatArr->else->for->i->return
Color#getColorComponents(float[]):::Returns a float array containing only the color components of the Color, in the ColorSpace of the Color:::if->return->getRGBColorComponents->f->n->if->new->floatArr->else->for->i->return
Color#getComponents(ColorSpace, float[]):::Returns a float array containing the color and alpha components of the Color, in the ColorSpace specified by the cspace parameter:::if->ColorSpace->getInstance->f->if->new->floatArr->getRed->getGreen->getBlue->else->tmp->cs->toCIEXYZ->tmpout->cspace->fromCIEXYZ->if->new->floatArr->for->i->if->getAlpha->else->return
Color#getColorComponents(ColorSpace, float[]):::Returns a float array containing only the color components of the Color in the ColorSpace specified by the cspace parameter:::if->ColorSpace->getInstance->f->if->new->floatArr->getRed->getGreen->getBlue->else->tmp->cs->toCIEXYZ->tmpout->cspace->fromCIEXYZ->if->return->for->i->return
Color#getColorSpace():::Returns the ColorSpace of this Color.:::if->ColorSpace->getInstance->return
Color#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints):::Creates and returns a PaintContext used to generate a solid color field pattern:::return->getRGB->new->ColorPaintContext
Color#getTransparency():::Returns the transparency mode for this Color:::alpha->getAlpha->if->return->else->if->return->else->return
ColorPaintContext#dispose()::: color paint context dispose:::
ColorPaintContext#getRGB()::: color paint context get b:::return
ColorPaintContext#getColorModel()::: color paint context get color model:::return->ColorModel->getRGBdefault
ColorPaintContext#getRaster(int, int, int, int)::: color paint context get raster:::t->if->t->getWidth->t->getHeight->getColorModel->createCompatibleWritableRaster->icr->Arrays->icr->getDataStorage->fill->icr->markDirty->if->return
Component#getObjectLock()::: component get object lock:::return
Component#getAccessControlContext()::: component get access control context:::if->throw->new->SecurityException->return
Component#getBoundsOp():::Should only be used in subclass getBounds to check that part of bounds is actually changing:::return
Component#setBoundsOp(int)::: component set bounds op:::if->else->if
Component#initializeFocusTraversalKeys()::: component initialize focus traversal keys:::new->SetArr
Component#constructComponentName():::Constructs a name for this component:::return
Component#getName():::Gets the name of the component.:::if->synchronized->getObjectLock->if->constructComponentName->return
Component#setName(String):::Sets the name of the component to the specified string.:::oldName->synchronized->getObjectLock->firePropertyChange
Component#getParent():::Gets the parent of this component.:::return->getParent_NoClientCode
Component#getParent_NoClientCode()::: component get parent_ no client code:::return
Component#getContainer()::: component get container:::return->getParent_NoClientCode
Component#setDropTarget(DropTarget)::: component set drop target:::if->dropTarget->equals->return->old->if->dropTarget->removeNotify->t->try->t->setComponent->catch->finally->if->try->dropTarget->setComponent->dropTarget->addNotify->catch->if->try->old->setComponent->dropTarget->addNotify->catch->finally->finally
Component#getDropTarget()::: component get drop target:::return
Component#getGraphicsConfiguration():::Gets the GraphicsConfiguration associated with this Component:::return->getGraphicsConfiguration_NoClientCode
Component#getGraphicsConfiguration_NoClientCode()::: component get graphics configuration_ no client code:::return
Component#setGraphicsConfiguration(GraphicsConfiguration)::: component set graphics configuration:::synchronized->getTreeLock->if->updateGraphicsData->removeNotify->addNotify
Component#updateGraphicsData(GraphicsConfiguration)::: component update graphics data:::oldConfig->ret->updateSelfGraphicsData->updateChildGraphicsData->if->firePropertyChange->return
Component#updateSelfGraphicsData(GraphicsConfiguration)::: component update self graphics data:::checkTreeLock->if->return->peer->if->return->peer->updateGraphicsData->return
Component#updateChildGraphicsData(GraphicsConfiguration)::: component update child graphics data:::return
Component#checkGD(String):::Checks that this component's GraphicsDevice idString matches the string argument.:::if->if->graphicsConfig->getDevice->getIDstring->equals->throw->new->IllegalArgumentException
Component#getTreeLock():::Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.:::return
Component#checkTreeLock()::: component check tree lock:::if->Thread->getTreeLock->holdsLock->throw->new->IllegalStateException
Component#getToolkit():::Gets the toolkit of this component:::return->getToolkitImpl
Component#getToolkitImpl()::: component get toolkit impl:::parent->if->return->parent->getToolkitImpl->return->Toolkit->getDefaultToolkit
Component#getComponentFactory()::: component get component factory:::toolkit->getToolkit->if->return->throw->new->AWTError
Component#isValid():::Determines whether this component is valid:::return
Component#isDisplayable():::Determines whether this component is displayable:::return
Component#isVisible():::Determines whether this component should be visible when its parent is visible:::return->isVisible_NoClientCode
Component#isVisible_NoClientCode()::: component is visible_ no client code:::return
Component#isRecursivelyVisible():::Determines whether this component will be displayed on the screen.:::return->parent->isRecursivelyVisible
Component#getRecursivelyVisibleBounds():::Determines the bounds of a visible part of the component relative to its parent.:::container->getContainer->bounds->getBounds->if->return->parentsBounds->container->getRecursivelyVisibleBounds->parentsBounds->setLocation->return->parentsBounds->intersection
Component#pointRelativeToComponent(Point):::Translates absolute coordinates into coordinates in the coordinate space of this component.:::compCoords->getLocationOnScreen->return->new->Point
Component#findUnderMouseInWindow(PointerInfo):::Assuming that mouse location is stored in PointerInfo passed to this method, it finds a Component that is in the same Window as this Component and is located under the mouse pointer:::if->isShowing->return->win->getContainingWindow->toolkit->Toolkit->getDefaultToolkit->if->return->if->getMouseInfoPeer->isWindowUnderMouse->return->INCLUDE_DISABLED->relativeToWindow->win->pi->getLocation->pointRelativeToComponent->inTheSameWindow->win->findComponentAt->return
Component#getMousePosition():::Returns the position of the mouse pointer in this Component's coordinate space if the Component is directly under the mouse pointer, otherwise returns null:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->pi->new->java.security.PrivilegedAction<PointerInfo>->doPrivileged->synchronized->getTreeLock->inTheSameWindow->findUnderMouseInWindow->if->isSameOrAncestorOf->return->return->pi->getLocation->pointRelativeToComponent
Component#isSameOrAncestorOf(Component, boolean):::Overridden in Container:::return
Component#isShowing():::Determines whether this component is showing on screen:::if->parent->return->parent->isShowing->return
Component#isEnabled():::Determines whether this component is enabled:::return->isEnabledImpl
Component#isEnabledImpl()::: component is enabled impl:::return
Component#setEnabled(boolean):::Enables or disables this component, depending on the value of the parameter b:::enable
Component#enable()::: component enable:::if->synchronized->getTreeLock->peer->if->peer->setEnabled->if->getRecursivelyVisibleBounds->isEmpty->updateCursorImmediately->if->accessibleContext->firePropertyChange
Component#enable(boolean):::Enables or disables this component.:::if->enable->else->disable
Component#disable()::: component disable:::if->KeyboardFocusManager->clearMostRecentFocusOwner->synchronized->getTreeLock->if->isFocusOwner->containsFocus->isLightweight->KeyboardFocusManager->isAutoFocusTransferEnabled->transferFocus->peer->if->peer->setEnabled->if->getRecursivelyVisibleBounds->isEmpty->updateCursorImmediately->if->accessibleContext->firePropertyChange
Component#isDoubleBuffered():::Returns true if this component is painted to an offscreen image ("buffer") that's copied to the screen later:::return
Component#enableInputMethods(boolean):::Enables or disables input method support for this component:::if->if->return->if->isFocusOwner->inputContext->getInputContext->if->focusGainedEvent->new->FocusEvent->inputContext->dispatchEvent->else->if->inputContext->getInputContext->if->inputContext->endComposition->inputContext->removeNotify
Component#setVisible(boolean):::Shows or hides this component depending on the value of parameter b:::show
Component#show()::: component show:::if->synchronized->getTreeLock->mixOnShowing->peer->if->peer->setVisible->Toolkit->enabledOnToolkit->createHierarchyEvents->if->repaint->updateCursorImmediately->if->Toolkit->enabledOnToolkit->e->new->ComponentEvent->Toolkit->getEventQueue->postEvent->parent->if->parent->invalidate
Component#show(boolean):::Makes this component visible or invisible.:::if->show->else->hide
Component#containsFocus()::: component contains focus:::return->isFocusOwner
Component#clearMostRecentFocusOwnerOnHide()::: component clear most recent focus owner on hide:::KeyboardFocusManager->clearMostRecentFocusOwner
Component#clearCurrentFocusCycleRootOnHide()::: component clear current focus cycle root on hide:::
Component#hide()::: component hide:::if->clearCurrentFocusCycleRootOnHide->clearMostRecentFocusOwnerOnHide->synchronized->getTreeLock->isLightweight->mixOnHiding->if->containsFocus->KeyboardFocusManager->isAutoFocusTransferEnabled->transferFocus->peer->if->peer->setVisible->Toolkit->enabledOnToolkit->createHierarchyEvents->if->repaint->updateCursorImmediately->if->Toolkit->enabledOnToolkit->e->new->ComponentEvent->Toolkit->getEventQueue->postEvent->parent->if->parent->invalidate
Component#getForeground():::Gets the foreground color of this component.:::foreground->if->return->parent->return->parent->getForeground
Component#setForeground(Color):::Sets the foreground color of this component.:::oldColor->peer->if->getForeground->if->peer->setForeground->firePropertyChange
Component#isForegroundSet():::Returns whether the foreground color has been explicitly set for this Component:::return
Component#getBackground():::Gets the background color of this component.:::background->if->return->parent->return->parent->getBackground
Component#setBackground(Color):::Sets the background color of this component:::oldColor->peer->if->getBackground->if->peer->setBackground->firePropertyChange
Component#isBackgroundSet():::Returns whether the background color has been explicitly set for this Component:::return
Component#getFont():::Gets the font of this component.:::return->getFont_NoClientCode
Component#getFont_NoClientCode()::: component get font_ no client code:::font->if->return->parent->return->parent->getFont_NoClientCode
Component#setFont(Font):::Sets the font of this component:::oldFont->newFont->synchronized->getTreeLock->peer->if->getFont->if->peer->setFont->firePropertyChange->if->oldFont->equals->invalidateIfValid
Component#isFontSet():::Returns whether the font has been explicitly set for this Component:::return
Component#getLocale():::Gets the locale of this component.:::locale->if->return->parent->if->throw->new->IllegalComponentStateException->else->return->parent->getLocale
Component#setLocale(Locale):::Sets the locale of this component:::oldValue->firePropertyChange->invalidateIfValid
Component#getColorModel():::Gets the instance of ColorModel used to display the component on the output device.:::peer->if->return->peer->getColorModel->else->if->GraphicsEnvironment->isHeadless->return->ColorModel->getRGBdefault->return->getToolkit->getColorModel
Component#getLocation():::Gets the location of this component in the form of a point specifying the component's top-left corner:::return->location
Component#getLocationOnScreen():::Gets the location of this component in the form of a point specifying the component's top-left corner in the screen's coordinate space.:::synchronized->getTreeLock->return->getLocationOnScreen_NoTreeLock
Component#getLocationOnScreen_NoTreeLock()::: component get location on screen_ no tree lock:::peer->if->isShowing->if->host->getNativeContainer->pt->getLocationOnScreen->for->c->c->getContainer->return->else->pt->peer->getLocationOnScreen->return->else->throw->new->IllegalComponentStateException
Component#location():::Returns the location of this component's top left corner.:::return->location_NoClientCode
Component#location_NoClientCode()::: component location_ no client code:::return->new->Point
Component#setLocation(int, int):::Moves this component to a new location:::move
Component#move(int, int):::Moves this component to a new location.:::synchronized->getTreeLock->setBoundsOp->setBounds
Component#setLocation(Point):::Moves this component to a new location:::setLocation
Component#getSize():::Returns the size of this component in the form of a Dimension object:::return->size
Component#size():::Returns the size of this component in the form of a Dimension object.:::return->new->Dimension
Component#setSize(int, int):::Resizes this component so that it has width width and height height:::resize
Component#resize(int, int):::Resizes this component.:::synchronized->getTreeLock->setBoundsOp->setBounds
Component#setSize(Dimension):::Resizes this component so that it has width d.width and height d.height:::resize
Component#resize(Dimension):::Resizes this component so that it has width d.width and height d.height.:::setSize
Component#getBounds():::Gets the bounds of this component in the form of a Rectangle object:::return->bounds
Component#bounds():::Returns the bounding rectangle of this component.:::return->new->Rectangle
Component#setBounds(int, int, int, int):::Moves and resizes this component:::reshape
Component#reshape(int, int, int, int):::Reshapes the bounding rectangle for this component.:::synchronized->getTreeLock->try->setBoundsOp->resized->moved->if->return->oldX->oldY->oldWidth->oldHeight->if->needNotify->mixOnReshaping->if->if->getBoundsOp->reshapeNativePeer->if->if->invalidate->if->parent->invalidateIfValid->if->notifyNewBounds->repaintParentIfNeeded->catch->finally->setBoundsOp
Component#repaintParentIfNeeded(int, int, int, int)::: component repaint parent if needed:::if->isShowing->parent->repaint->repaint
Component#reshapeNativePeer(int, int, int, int, int)::: component reshape native peer:::nativeX->nativeY->for->c->peer->setBounds
Component#notifyNewBounds(boolean, boolean)::: component notify new bounds:::if->Toolkit->enabledOnToolkit->if->e->new->ComponentEvent->Toolkit->getEventQueue->postEvent->if->e->new->ComponentEvent->Toolkit->getEventQueue->postEvent->else->if->countComponents->enabledOnToolkit->Toolkit->enabledOnToolkit->if->createChildHierarchyEvents->if->createChildHierarchyEvents
Component#setBounds(Rectangle):::Moves and resizes this component to conform to the new bounding rectangle r:::setBounds
Component#getX():::Returns the current x coordinate of the components origin:::return
Component#getY():::Returns the current y coordinate of the components origin:::return
Component#getWidth():::Returns the current width of this component:::return
Component#getHeight():::Returns the current height of this component:::return
Component#getBounds(Rectangle):::Stores the bounds of this component into "return value" rv and return rv:::if->return->getX->getY->getWidth->getHeight->new->Rectangle->else->rv->getX->getY->getWidth->getHeight->setBounds->return
Component#getSize(Dimension):::Stores the width/height of this component into "return value" rv and return rv:::if->return->getWidth->getHeight->new->Dimension->else->rv->getWidth->getHeight->setSize->return
Component#getLocation(Point):::Stores the x,y origin of this component into "return value" rv and return rv:::if->return->getX->getY->new->Point->else->rv->getX->getY->setLocation->return
Component#isOpaque():::Returns true if this component is completely opaque, returns false by default:::if->return->else->return->isLightweight
Component#isLightweight():::A lightweight component doesn't have a native toolkit peer:::return
Component#setPreferredSize(Dimension):::Sets the preferred size of this component to a constant value:::old->if->else->firePropertyChange
Component#isPreferredSizeSet():::Returns true if the preferred size has been set to a non-null value otherwise returns false.:::return
Component#getPreferredSize():::Gets the preferred size of this component.:::return->preferredSize
Component#preferredSize():::Returns the component's preferred size.:::dim->if->isPreferredSizeSet->isValid->synchronized->getTreeLock->peer->getPreferredSize->getMinimumSize->return->new->Dimension
Component#setMinimumSize(Dimension):::Sets the minimum size of this component to a constant value:::old->if->else->firePropertyChange
Component#isMinimumSizeSet():::Returns whether or not setMinimumSize has been invoked with a non-null value.:::return
Component#getMinimumSize():::Gets the minimum size of this component.:::return->minimumSize
Component#minimumSize():::Returns the minimum size of this component.:::dim->if->isMinimumSizeSet->isValid->synchronized->getTreeLock->peer->getMinimumSize->size->return->new->Dimension
Component#setMaximumSize(Dimension):::Sets the maximum size of this component to a constant value:::old->if->else->firePropertyChange
Component#isMaximumSizeSet():::Returns true if the maximum size has been set to a non-null value otherwise returns false.:::return
Component#getMaximumSize():::Gets the maximum size of this component.:::if->isMaximumSizeSet->return->new->Dimension->return->new->Dimension
Component#getAlignmentX():::Returns the alignment along the x axis:::return
Component#getAlignmentY():::Returns the alignment along the y axis:::return
Component#getBaseline(int, int):::Returns the baseline:::if->throw->new->IllegalArgumentException->return
Component#getBaselineResizeBehavior():::Returns an enum indicating how the baseline of the component changes as the size changes:::return
Component#doLayout():::Prompts the layout manager to lay out this component:::layout
Component#layout()::: component layout:::
Component#validate():::Validates this component:::synchronized->getTreeLock->peer->wasValid->isValid->if->newfont->getFont->oldfont->if->Objects->equals->peer->setFont->peer->layout->if->mixOnValidating
Component#invalidate():::Invalidates this component and its ancestors:::synchronized->getTreeLock->if->isPreferredSizeSet->if->isMinimumSizeSet->if->isMaximumSizeSet->invalidateParent
Component#invalidateParent():::Invalidates the parent of this component if any:::if->parent->invalidateIfValid
Component#invalidateIfValid():::Invalidates the component unless it is already invalid.:::if->isValid->invalidate
Component#revalidate():::Revalidates the component hierarchy up to the nearest validate root:::revalidateSynchronously
Component#revalidateSynchronously():::Revalidates the component synchronously.:::synchronized->getTreeLock->invalidate->root->getContainer->if->validate->else->while->root->isValidateRoot->if->root->getContainer->break->root->getContainer->root->validate
Component#getGraphics():::Creates a graphics context for this component:::if->if->return->g->parent->getGraphics->if->return->if->constrain->else->g->translate->g->setClip->g->getFont->setFont->return->else->peer->return->peer->getGraphics
Component#getGraphics_NoClientCode()::: component get graphics_ no client code:::peer->if->parent->if->return->g->parent->getGraphics_NoClientCode->if->return->if->constrain->else->g->translate->g->setClip->g->getFont_NoClientCode->setFont->return->else->return->peer->getGraphics
Component#getFontMetrics(Font):::Gets the font metrics for the specified font:::fm->FontManagerFactory->getInstance->if->usePlatformFontMetrics->if->return->peer->getFontMetrics->return->getMetrics
Component#setCursor(Cursor):::Sets the cursor image to the specified cursor:::updateCursorImmediately
Component#updateCursorImmediately():::Updates the cursor:::if->nativeContainer->getNativeContainer->if->return->cPeer->if->cPeer->updateCursorImmediately->else->if->peer->updateCursorImmediately
Component#getCursor():::Gets the cursor set in the component:::return->getCursor_NoClientCode
Component#getCursor_NoClientCode()::: component get cursor_ no client code:::cursor->if->return->parent->if->return->parent->getCursor_NoClientCode->else->return->Cursor->getPredefinedCursor
Component#isCursorSet():::Returns whether the cursor has been explicitly set for this Component:::return
Component#paint(Graphics):::Paints this component:::
Component#update(Graphics):::Updates this component:::paint
Component#paintAll(Graphics):::Paints this component and all of its subcomponents:::if->isShowing->getInstance->new->Rectangle->g->getClip->runOneComponent
Component#lightweightPaint(Graphics):::Simulates the peer callbacks into java.awt for painting of lightweight Components.:::paint
Component#paintHeavyweightComponents(Graphics):::Paints all the heavyweight subcomponents.:::
Component#repaint():::Repaints this component:::repaint
Component#repaint(long):::Repaints the component:::repaint
Component#repaint(int, int, int, int):::Repaints the specified rectangle of this component:::repaint
Component#repaint(long, int, int, int, int):::Repaints the specified rectangle of this component within tm milliseconds:::if->if->if->if->pwidth->pheight->if->return->px->py->parent->repaint->else->if->isVisible->e->new->Rectangle->new->PaintEvent->SunToolkit->SunToolkit->targetToAppContext->postEvent
Component#print(Graphics):::Prints this component:::paint
Component#printAll(Graphics):::Prints this component and all of its subcomponents:::if->isShowing->getInstance->new->Rectangle->g->getClip->runOneComponent
Component#lightweightPrint(Graphics):::Simulates the peer callbacks into java.awt for printing of lightweight Components.:::print
Component#printHeavyweightComponents(Graphics):::Prints all the heavyweight subcomponents.:::
Component#getInsets_NoClientCode()::: component get insets_ no client code:::peer->if->return->getInsets->clone->return->new->Insets
Component#imageUpdate(Image, int, int, int, int, int):::Repaints the component when the image has changed:::rate->if->else->if->if->if->if->repaint->return
Component#createImage(ImageProducer):::Creates an image from the specified image producer.:::peer->if->return->peer->createImage->return->getToolkit->createImage
Component#createImage(int, int):::Creates an off-screen drawable image to be used for double buffering.:::peer->if->if->return->parent->createImage->else->return->else->return->peer->createImage
Component#createVolatileImage(int, int):::Creates a volatile off-screen drawable image to be used for double buffering.:::peer->if->if->return->parent->createVolatileImage->else->return->else->return->peer->createVolatileImage
Component#createVolatileImage(int, int, ImageCapabilities):::Creates a volatile off-screen drawable image, with the given capabilities:::return->createVolatileImage
Component#prepareImage(Image, ImageObserver):::Prepares an image for rendering on this component:::return->prepareImage
Component#prepareImage(Image, int, int, ImageObserver):::Prepares an image for rendering on this component at the specified width and height:::peer->if->return->parent->prepareImage->getToolkit->prepareImage->else->return->peer->prepareImage->getToolkit->prepareImage
Component#checkImage(Image, ImageObserver):::Returns the status of the construction of a screen representation of the specified image:::return->checkImage
Component#checkImage(Image, int, int, ImageObserver):::Returns the status of the construction of a screen representation of the specified image:::peer->if->return->parent->checkImage->getToolkit->checkImage->else->return->peer->checkImage->getToolkit->checkImage
Component#createBufferStrategy(int):::Creates a new strategy for multi-buffering on this component:::bufferCaps->if->new->ImageCapabilities->new->ImageCapabilities->new->BufferCapabilities->try->createBufferStrategy->return->catch->finally->new->ImageCapabilities->new->ImageCapabilities->new->BufferCapabilities->try->createBufferStrategy->return->catch->finally->new->ImageCapabilities->new->ImageCapabilities->new->BufferCapabilities->try->createBufferStrategy->return->catch->throw->new->InternalError->finally
Component#createBufferStrategy(int, BufferCapabilities):::Creates a new strategy for multi-buffering on this component with the required buffer capabilities:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->bufferStrategy->dispose->if->new->SingleBufferStrategy->else->sge->GraphicsEnvironment->getLocalGraphicsEnvironment->if->caps->isPageFlipping->sge->isFlipStrategyPreferred->new->ProxyCapabilities->if->caps->isPageFlipping->new->FlipSubRegionBufferStrategy->else->new->BltSubRegionBufferStrategy
Component#getBufferStrategy()::: component get buffer strategy:::return
Component#getBackBuffer()::: component get back buffer:::if->if->bltBS->return->bltBS->getBackBuffer->else->if->flipBS->return->flipBS->getBackBuffer->return
Component.FlipBufferStrategy#createBuffers(int, BufferCapabilities):::Creates one or more complex, flipping buffers with the given capabilities.:::if->throw->new->IllegalArgumentException->else->if->throw->new->IllegalStateException->else->if->caps->isPageFlipping->throw->new->IllegalArgumentException->getWidth->getHeight->if->destroyBuffers->if->ebc->if->ebc->getVSync->if->VSyncedBSManager->vsyncAllowed->ebc->derive->peer->createBuffers->updateInternalBuffers
Component.FlipBufferStrategy#updateInternalBuffers():::Updates internal buffers (both volatile and non-volatile) by requesting the back-buffer from the peer.:::getBackBuffer->if->else
Component.FlipBufferStrategy#getBackBuffer()::: flip buffer strategy get back buffer:::if->return->peer->getBackBuffer->else->throw->new->IllegalStateException
Component.FlipBufferStrategy#flip(BufferCapabilities.FlipContents):::Flipping moves the contents of the back buffer to the front buffer, either by copying or by moving the video pointer.:::if->backBuffer->getBackBuffer->if->peer->backBuffer->getWidth->backBuffer->getHeight->flip->else->throw->new->IllegalStateException
Component.FlipBufferStrategy#flipSubRegion(int, int, int, int, BufferCapabilities.FlipContents)::: flip buffer strategy flip sub region:::if->peer->flip->else->throw->new->IllegalStateException
Component.FlipBufferStrategy#destroyBuffers():::Destroys the buffers created through this object:::VSyncedBSManager->releaseVsync->if->peer->destroyBuffers->else->throw->new->IllegalStateException
Component.FlipBufferStrategy#getCapabilities()::: flip buffer strategy get capabilities:::if->return->else->return
Component.FlipBufferStrategy#getDrawGraphics()::: flip buffer strategy get draw graphics:::revalidate->return->drawBuffer->getGraphics
Component.FlipBufferStrategy#revalidate():::Restore the drawing buffer if it has been lost:::revalidate
Component.FlipBufferStrategy#revalidate(boolean)::: flip buffer strategy revalidate:::if->getWidth->getHeight->try->createBuffers->catch->finally->updateInternalBuffers->if->gc->getGraphicsConfiguration_NoClientCode->returnCode->drawVBuffer->validate->if->try->createBuffers->catch->finally->if->drawVBuffer->validate->else->if
Component.FlipBufferStrategy#contentsLost()::: flip buffer strategy contents lost:::if->return->return->drawVBuffer->contentsLost
Component.FlipBufferStrategy#contentsRestored()::: flip buffer strategy contents restored:::return
Component.FlipBufferStrategy#show():::Makes the next available buffer visible by either blitting or flipping.:::caps->getFlipContents->flip
Component.FlipBufferStrategy#showSubRegion(int, int, int, int):::Makes specified region of the next available buffer visible by either blitting or flipping.:::caps->getFlipContents->flipSubRegion
Component.FlipBufferStrategy#dispose()::: flip buffer strategy dispose:::if->if->destroyBuffers
Component.BltBufferStrategy#dispose()::: blt buffer strategy dispose:::if->for->counter->if
Component.BltBufferStrategy#createBackBuffers(int):::Creates the back buffers:::if->else->getWidth->getHeight->getInsets_NoClientCode->iWidth->iHeight->Math->max->Math->max->if->new->VolatileImageArr->else->for->i->for->i
Component.BltBufferStrategy#getCapabilities()::: blt buffer strategy get capabilities:::return
Component.BltBufferStrategy#getDrawGraphics()::: blt buffer strategy get draw graphics:::revalidate->backBuffer->getBackBuffer->if->return->getGraphics->g->backBuffer->getGraphics->g->backBuffer->getWidth->backBuffer->getHeight->constrain->return
Component.BltBufferStrategy#getBackBuffer()::: blt buffer strategy get back buffer:::if->return->else->return
Component.BltBufferStrategy#show():::Makes the next available buffer visible.:::showSubRegion
Component.BltBufferStrategy#showSubRegion(int, int, int, int):::Package-private method to present a specific rectangular area of this buffer:::if->return->g->getGraphics_NoClientCode->if->return->try->g->translate->for->i->catch->finally->if->g->dispose
Component.BltBufferStrategy#revalidate():::Restore the drawing buffer if it has been lost:::revalidate
Component.BltBufferStrategy#revalidate(boolean)::: blt buffer strategy revalidate:::if->return->if->insets->getInsets_NoClientCode->if->getWidth->getHeight->insets->equals->createBackBuffers->gc->getGraphicsConfiguration_NoClientCode->returnCode->validate->if->if->createBackBuffers->validate->else->if
Component.BltBufferStrategy#contentsLost()::: blt buffer strategy contents lost:::if->return->else->return->contentsLost
Component.BltBufferStrategy#contentsRestored()::: blt buffer strategy contents restored:::return
Component.FlipSubRegionBufferStrategy#show(int, int, int, int)::: flip sub region buffer strategy show:::showSubRegion
Component.FlipSubRegionBufferStrategy#showIfNotLost(int, int, int, int)::: flip sub region buffer strategy show if not lost:::if->contentsLost->showSubRegion->return->contentsLost->return
Component.BltSubRegionBufferStrategy#show(int, int, int, int)::: blt sub region buffer strategy show:::showSubRegion
Component.BltSubRegionBufferStrategy#showIfNotLost(int, int, int, int)::: blt sub region buffer strategy show if not lost:::if->contentsLost->showSubRegion->return->contentsLost->return
Component.SingleBufferStrategy#getCapabilities()::: single buffer strategy get capabilities:::return
Component.SingleBufferStrategy#getDrawGraphics()::: single buffer strategy get draw graphics:::return->getGraphics
Component.SingleBufferStrategy#contentsLost()::: single buffer strategy contents lost:::return
Component.SingleBufferStrategy#contentsRestored()::: single buffer strategy contents restored:::return
Component.SingleBufferStrategy#show()::: single buffer strategy show:::
Component#setIgnoreRepaint(boolean):::Sets whether or not paint messages received from the operating system should be ignored:::
Component#getIgnoreRepaint()::: component get ignore repaint:::return
Component#contains(int, int):::Checks whether this component "contains" the specified point, where x and y are defined to be relative to the coordinate system of this component.:::return->inside
Component#inside(int, int):::Checks whether the point is inside of this component.:::return
Component#contains(Point):::Checks whether this component "contains" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component.:::return->contains
Component#getComponentAt(int, int):::Determines if this component or one of its immediate subcomponents contains the (x, y) location, and if so, returns the containing component:::return->locate
Component#locate(int, int):::Returns the component occupying the position specified (this component, or immediate child component, or null if neither of the first two occupies the location).:::return->contains
Component#getComponentAt(Point):::Returns the component or subcomponent that contains the specified point.:::return->getComponentAt
Component#deliverEvent(Event)::: component deliver event:::postEvent
Component#dispatchEvent(AWTEvent):::Dispatches an event to this component or one of its sub components:::dispatchEventImpl
Component#dispatchEventImpl(AWTEvent)::: component dispatch event impl:::id->e->getID->compContext->if->compContext->AppContext->getAppContext->equals->if->eventLog->isLoggable->eventLog->fine->if->eventLog->isLoggable->eventLog->finest->if->EventQueue->setCurrentEventAndMostRecentTime->if->dispatch->return->if->if->KeyboardFocusManager->retargetFocusEvent->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->dispatchEvent->return->if->focusLog->isLoggable->focusLog->finest->if->eventTypeEnabled->peer->handlesWheelScrolling->dispatchMouseWheelToAncestor->return->toolkit->Toolkit->getDefaultToolkit->toolkit->notifyAWTEventListeners->if->e->isConsumed->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->processKeyEvent->if->e->isConsumed->return->if->areInputMethodsEnabled->if->inputContext->getInputContext->if->inputContext->dispatchEvent->if->e->isConsumed->if->focusLog->isLoggable->focusLog->finest->return->else->if->inputContext->getInputContext->if->disableNativeIM->switch->p->if->p->preProcessKeyEvent->if->e->isConsumed->if->focusLog->isLoggable->focusLog->finest->return->break->break->if->if->eventEnabled->processEvent->else->if->autoProcessMouseWheel->else->if->postsOldMouseEvents->olde->e->convertToOld->if->key->modifiers->postEvent->if->olde->isConsumed->e->consume->switch->if->olde->getKeyEventChar->setKeyChar->if->setModifiers->break->break->if->tpeer->if->source->e->getSource->if->target->source->getNativeContainer->if->if->tpeer->handleEvent->if->SunToolkit->isTouchKeyboardAutoShowEnabled->showOrHideTouchKeyboard
Component#autoProcessMouseWheel(MouseWheelEvent)::: component auto process mouse wheel:::
Component#dispatchMouseWheelToAncestor(MouseWheelEvent)::: component dispatch mouse wheel to ancestor:::newX->newY->e->getX->getX->e->getY->getY->newMWE->if->eventLog->isLoggable->eventLog->finest->eventLog->e->getSource->getClass->finest->synchronized->getTreeLock->anc->getParent->while->anc->eventEnabled->anc->getX->anc->getY->if->anc->getParent->else->break->if->eventLog->isLoggable->eventLog->anc->getClass->finest->if->anc->eventEnabled->e->getID->e->getWhen->e->getModifiers->e->getXOnScreen->e->getYOnScreen->e->getClickCount->e->isPopupTrigger->e->getScrollType->e->getScrollAmount->e->getWheelRotation->e->getPreciseWheelRotation->new->MouseWheelEvent->copyPrivateDataInto->anc->dispatchEventToSelf->if->newMWE->isConsumed->e->consume->return->return
Component#areInputMethodsEnabled()::: component are input methods enabled:::return
Component#eventEnabled(AWTEvent)::: component event enabled:::return->eventTypeEnabled
Component#eventTypeEnabled(int)::: component event type enabled:::switch->if->return->break->if->return->break->if->return->break->if->return->break->if->return->break->if->return->break->if->return->break->if->return->break->if->return->break->if->return->break->if->return->break->if->return->break->if->return->break->break->if->return->return
Component#postEvent(Event)::: component post event:::peer->if->handleEvent->e->consume->return->parent->eventx->eventy->if->e->translate->if->parent->postEvent->e->consume->return->return
Component#addComponentListener(ComponentListener):::Adds the specified component listener to receive component events from this component:::if->return->AWTEventMulticaster->add
Component#removeComponentListener(ComponentListener):::Removes the specified component listener so that it no longer receives component events from this component:::if->return->AWTEventMulticaster->remove
Component#getComponentListeners():::Returns an array of all the component listeners registered on this component.:::return->getListeners
Component#addFocusListener(FocusListener):::Adds the specified focus listener to receive focus events from this component when this component gains input focus:::if->return->AWTEventMulticaster->add->if->parent->proxyEnableEvents
Component#removeFocusListener(FocusListener):::Removes the specified focus listener so that it no longer receives focus events from this component:::if->return->AWTEventMulticaster->remove
Component#getFocusListeners():::Returns an array of all the focus listeners registered on this component.:::return->getListeners
Component#addHierarchyListener(HierarchyListener):::Adds the specified hierarchy listener to receive hierarchy changed events from this component when the hierarchy to which this container belongs changes:::if->return->notifyAncestors->synchronized->AWTEventMulticaster->add->if->synchronized->getTreeLock->adjustListeningChildrenOnParent
Component#removeHierarchyListener(HierarchyListener):::Removes the specified hierarchy listener so that it no longer receives hierarchy changed events from this component:::if->return->notifyAncestors->synchronized->AWTEventMulticaster->remove->if->synchronized->getTreeLock->adjustListeningChildrenOnParent
Component#getHierarchyListeners():::Returns an array of all the hierarchy listeners registered on this component.:::return->getListeners
Component#addHierarchyBoundsListener(HierarchyBoundsListener):::Adds the specified hierarchy bounds listener to receive hierarchy bounds events from this component when the hierarchy to which this container belongs changes:::if->return->notifyAncestors->synchronized->AWTEventMulticaster->add->if->synchronized->getTreeLock->adjustListeningChildrenOnParent
Component#removeHierarchyBoundsListener(HierarchyBoundsListener):::Removes the specified hierarchy bounds listener so that it no longer receives hierarchy bounds events from this component:::if->return->notifyAncestors->synchronized->AWTEventMulticaster->remove->if->synchronized->getTreeLock->adjustListeningChildrenOnParent
Component#numListening(long)::: component num listening:::if->eventLog->isLoggable->if->eventLog->fine->if->return->else->return
Component#countHierarchyMembers()::: component count hierarchy members:::return
Component#createHierarchyEvents(int, Component, Container, long, boolean)::: component create hierarchy events:::switch->if->e->new->HierarchyEvent->dispatchEvent->return->break->if->eventLog->isLoggable->if->eventLog->fine->if->e->new->HierarchyEvent->dispatchEvent->return->break->if->eventLog->isLoggable->eventLog->fine->break->return
Component#getHierarchyBoundsListeners():::Returns an array of all the hierarchy bounds listeners registered on this component.:::return->getListeners
Component#adjustListeningChildrenOnParent(long, int)::: component adjust listening children on parent:::if->parent->adjustListeningChildren
Component#addKeyListener(KeyListener):::Adds the specified key listener to receive key events from this component:::if->return->AWTEventMulticaster->add->if->parent->proxyEnableEvents
Component#removeKeyListener(KeyListener):::Removes the specified key listener so that it no longer receives key events from this component:::if->return->AWTEventMulticaster->remove
Component#getKeyListeners():::Returns an array of all the key listeners registered on this component.:::return->getListeners
Component#addMouseListener(MouseListener):::Adds the specified mouse listener to receive mouse events from this component:::if->return->AWTEventMulticaster->add->if->parent->proxyEnableEvents
Component#removeMouseListener(MouseListener):::Removes the specified mouse listener so that it no longer receives mouse events from this component:::if->return->AWTEventMulticaster->remove
Component#getMouseListeners():::Returns an array of all the mouse listeners registered on this component.:::return->getListeners
Component#addMouseMotionListener(MouseMotionListener):::Adds the specified mouse motion listener to receive mouse motion events from this component:::if->return->AWTEventMulticaster->add->if->parent->proxyEnableEvents
Component#removeMouseMotionListener(MouseMotionListener):::Removes the specified mouse motion listener so that it no longer receives mouse motion events from this component:::if->return->AWTEventMulticaster->remove
Component#getMouseMotionListeners():::Returns an array of all the mouse motion listeners registered on this component.:::return->getListeners
Component#addMouseWheelListener(MouseWheelListener):::Adds the specified mouse wheel listener to receive mouse wheel events from this component:::if->return->AWTEventMulticaster->add->if->parent->proxyEnableEvents
Component#removeMouseWheelListener(MouseWheelListener):::Removes the specified mouse wheel listener so that it no longer receives mouse wheel events from this component:::if->return->AWTEventMulticaster->remove
Component#getMouseWheelListeners():::Returns an array of all the mouse wheel listeners registered on this component.:::return->getListeners
Component#addInputMethodListener(InputMethodListener):::Adds the specified input method listener to receive input method events from this component:::if->return->AWTEventMulticaster->add
Component#removeInputMethodListener(InputMethodListener):::Removes the specified input method listener so that it no longer receives input method events from this component:::if->return->AWTEventMulticaster->remove
Component#getInputMethodListeners():::Returns an array of all the input method listeners registered on this component.:::return->getListeners
Component#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this Component:::l->if->else->if->else->if->else->if->else->if->else->if->else->if->else->if->else->if->else->if->return->getPropertyChangeListeners->return->AWTEventMulticaster->getListeners
Component#getInputMethodRequests():::Gets the input method request handler which supports requests from input methods for this component:::return
Component#getInputContext():::Gets the input context used by this component for handling the communication with input methods when text is entered in this component:::parent->if->return->else->return->parent->getInputContext
Component#enableEvents(long):::Enables the events defined by the specified event mask parameter to be delivered to this component:::notifyAncestors->synchronized->if->if->if->parent->proxyEnableEvents->if->synchronized->getTreeLock->adjustListeningChildrenOnParent
Component#disableEvents(long):::Disables the events defined by the specified event mask parameter from being delivered to this component.:::notifyAncestors->synchronized->if->if->if->synchronized->getTreeLock->adjustListeningChildrenOnParent
Component#checkCoalescing():::Indicates whether this class overrides coalesceEvents:::if->getClass->getClassLoader->return->clazz->getClass->synchronized->value->coalesceMap->get->if->return->enabled->new->java.security.PrivilegedAction<Boolean>->doPrivileged->coalesceMap->put->return
Component#isCoalesceEventsOverriden(Class):::Indicates whether a class or its superclasses override coalesceEvents:::superclass->clazz->getSuperclass->if->return->if->superclass->getClassLoader->value->coalesceMap->get->if->if->isCoalesceEventsOverriden->coalesceMap->put->return->else->if->return->try->clazz->getDeclaredMethod->return->catch->return->finally
Component#isCoalescingEnabled():::Indicates whether coalesceEvents may do something.:::return
Component#coalesceEvents(AWTEvent, AWTEvent):::Potentially coalesce an event being posted with an existing event:::return
Component#processEvent(AWTEvent):::Processes events occurring on this component:::if->processFocusEvent->else->if->switch->e->getID->processMouseEvent->break->processMouseMotionEvent->break->processMouseWheelEvent->break->else->if->processKeyEvent->else->if->processComponentEvent->else->if->processInputMethodEvent->else->if->switch->e->getID->processHierarchyEvent->break->processHierarchyBoundsEvent->break
Component#processComponentEvent(ComponentEvent):::Processes component events occurring on this component by dispatching them to any registered ComponentListener objects:::listener->if->id->e->getID->switch->listener->componentResized->break->listener->componentMoved->break->listener->componentShown->break->listener->componentHidden->break
Component#processFocusEvent(FocusEvent):::Processes focus events occurring on this component by dispatching them to any registered FocusListener objects:::listener->if->id->e->getID->switch->listener->focusGained->break->listener->focusLost->break
Component#processKeyEvent(KeyEvent):::Processes key events occurring on this component by dispatching them to any registered KeyListener objects:::listener->if->id->e->getID->switch->listener->keyTyped->break->listener->keyPressed->break->listener->keyReleased->break
Component#processMouseEvent(MouseEvent):::Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects:::listener->if->id->e->getID->switch->listener->mousePressed->break->listener->mouseReleased->break->listener->mouseClicked->break->listener->mouseExited->break->listener->mouseEntered->break
Component#processMouseMotionEvent(MouseEvent):::Processes mouse motion events occurring on this component by dispatching them to any registered MouseMotionListener objects:::listener->if->id->e->getID->switch->listener->mouseMoved->break->listener->mouseDragged->break
Component#processMouseWheelEvent(MouseWheelEvent):::Processes mouse wheel events occurring on this component by dispatching them to any registered MouseWheelListener objects:::listener->if->id->e->getID->switch->listener->mouseWheelMoved->break
Component#postsOldMouseEvents()::: component posts old mouse events:::return
Component#processInputMethodEvent(InputMethodEvent):::Processes input method events occurring on this component by dispatching them to any registered InputMethodListener objects:::listener->if->id->e->getID->switch->listener->inputMethodTextChanged->break->listener->caretPositionChanged->break
Component#processHierarchyEvent(HierarchyEvent):::Processes hierarchy events occurring on this component by dispatching them to any registered HierarchyListener objects:::listener->if->id->e->getID->switch->listener->hierarchyChanged->break
Component#processHierarchyBoundsEvent(HierarchyEvent):::Processes hierarchy bounds events occurring on this component by dispatching them to any registered HierarchyBoundsListener objects:::listener->if->id->e->getID->switch->listener->ancestorMoved->break->listener->ancestorResized->break
Component#handleEvent(Event)::: component handle event:::switch->return->mouseEnter->return->mouseExit->return->mouseMove->return->mouseDown->return->mouseDrag->return->mouseUp->return->keyDown->return->keyUp->return->action->return->gotFocus->return->lostFocus->return
Component#mouseDown(Event, int, int)::: component mouse down:::return
Component#mouseDrag(Event, int, int)::: component mouse drag:::return
Component#mouseUp(Event, int, int)::: component mouse up:::return
Component#mouseMove(Event, int, int)::: component mouse move:::return
Component#mouseEnter(Event, int, int)::: component mouse enter:::return
Component#mouseExit(Event, int, int)::: component mouse exit:::return
Component#keyDown(Event, int)::: component key down:::return
Component#keyUp(Event, int)::: component key up:::return
Component#action(Event, Object)::: component action:::return
Component#addNotify():::Makes this Component displayable by connecting it to a native screen resource:::synchronized->getTreeLock->peer->if->if->getComponentFactory->createComponent->if->mask->if->if->if->if->if->if->parent->proxyEnableEvents->else->parent->getContainer->if->parent->isLightweight->relocateComponent->if->parent->isRecursivelyVisibleUpToHeavyweightContainer->peer->setVisible->invalidate->npopups->popups->size->for->i->if->dropTarget->addNotify->getFont->if->getContainer->getContainer->increaseComponentCount->updateZOrder->if->mixOnShowing->if->Toolkit->enabledOnToolkit->e->isRecursivelyVisible->new->HierarchyEvent->dispatchEvent
Component#removeNotify():::Makes this Component undisplayable by destroying it native screen resource:::KeyboardFocusManager->clearMostRecentFocusOwner->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->getPermanentFocusOwner->KeyboardFocusManager->getCurrentKeyboardFocusManager->setGlobalPermanentFocusOwner->synchronized->getTreeLock->if->isFocusOwner->KeyboardFocusManager->isAutoFocusTransferEnabledFor->transferFocus->if->getContainer->getContainer->decreaseComponentCount->npopups->popups->size->for->i->if->inputContext->getInputContext->if->inputContext->removeNotify->p->if->isLightweight->isLightweight->if->destroyBuffers->if->dropTarget->removeNotify->if->p->setVisible->Toolkit->getEventQueue->removeSourceEvents->KeyboardFocusManager->getCurrentKeyboardFocusManager->discardKeyEvents->p->dispose->mixOnHiding->if->Toolkit->enabledOnToolkit->e->isRecursivelyVisible->new->HierarchyEvent->dispatchEvent
Component#gotFocus(Event, Object)::: component got focus:::return
Component#lostFocus(Event, Object)::: component lost focus:::return
Component#isFocusTraversable():::Returns whether this Component can become the focus owner.:::if->return
Component#isFocusable():::Returns whether this Component can be focused.:::return->isFocusTraversable
Component#setFocusable(boolean):::Sets the focusable state of this Component to the specified value:::oldFocusable->synchronized->firePropertyChange->if->if->isFocusOwner->KeyboardFocusManager->isAutoFocusTransferEnabled->transferFocus->KeyboardFocusManager->clearMostRecentFocusOwner
Component#isFocusTraversableOverridden()::: component is focus traversable overridden:::return
Component#setFocusTraversalKeys(int, Set):::Sets the focus traversal keys for a given traversal operation for this Component:::if->throw->new->IllegalArgumentException->setFocusTraversalKeys_NoIDCheck
Component#getFocusTraversalKeys(int):::Returns the Set of focus traversal keys for a given traversal operation for this Component:::if->throw->new->IllegalArgumentException->return->getFocusTraversalKeys_NoIDCheck
Component#setFocusTraversalKeys_NoIDCheck(int, Set)::: component set focus traversal keys_ no check:::oldKeys->synchronized->if->initializeFocusTraversalKeys->if->foreach->if->throw->new->IllegalArgumentException->if->keystroke->getKeyChar->throw->new->IllegalArgumentException->for->i->Collections->new->HashSet<AWTKeyStroke>->unmodifiableSet->firePropertyChange
Component#getFocusTraversalKeys_NoIDCheck(int)::: component get focus traversal keys_ no check:::keystrokes->if->return->else->parent->if->return->parent->getFocusTraversalKeys->else->return->KeyboardFocusManager->getCurrentKeyboardFocusManager->getDefaultFocusTraversalKeys
Component#areFocusTraversalKeysSet(int):::Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Component:::if->throw->new->IllegalArgumentException->return
Component#setFocusTraversalKeysEnabled(boolean):::Sets whether focus traversal keys are enabled for this Component:::oldFocusTraversalKeysEnabled->synchronized->firePropertyChange
Component#getFocusTraversalKeysEnabled():::Returns whether focus traversal keys are enabled for this Component:::return
Component#requestFocus():::Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window:::requestFocusHelper
Component#requestFocus(FocusEvent.Cause):::Requests by the reason of cause that this Component get the input focus, and that this Component's top-level ancestor become the focused Window:::requestFocusHelper
Component#requestFocus(boolean):::Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window:::return->requestFocusHelper
Component#requestFocus(boolean, FocusEvent.Cause):::Requests by the reason of cause that this Component get the input focus, and that this Component's top-level ancestor become the focused Window:::return->requestFocusHelper
Component#requestFocusInWindow():::Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window:::return->requestFocusHelper
Component#requestFocusInWindow(FocusEvent.Cause):::Requests by the reason of cause that this Component get the input focus, if this Component's top-level ancestor is already the focused Window:::return->requestFocusHelper
Component#requestFocusInWindow(boolean):::Requests that this Component get the input focus, if this Component's top-level ancestor is already the focused Window:::return->requestFocusHelper
Component#requestFocusInWindow(boolean, FocusEvent.Cause)::: component request focus in window:::return->requestFocusHelper
Component#requestFocusHelper(boolean, boolean)::: component request focus helper:::return->requestFocusHelper
Component#requestFocusHelper(boolean, boolean, FocusEvent.Cause)::: component request focus helper:::currentEvent->EventQueue->getCurrentEvent->if->SunToolkit->isSystemGenerated->source->getComponent->if->source->getContainingWindow->getContainingWindow->focusLog->finest->if->isRequestFocusAccepted->if->focusLog->isLoggable->focusLog->finest->return->KeyboardFocusManager->setMostRecentFocusOwner->window->while->if->window->isVisible->if->focusLog->isLoggable->focusLog->finest->return->peer->heavyweight->getNativeContainer->if->heavyweight->isVisible->if->focusLog->isLoggable->focusLog->finest->return->if->if->focusLog->isLoggable->focusLog->finest->return->time->if->EventQueue->isDispatchThread->Toolkit->getEventQueue->getMostRecentKeyEventTime->else->System->currentTimeMillis->success->peer->requestFocus->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->dequeueKeyEvents->if->focusLog->isLoggable->focusLog->finest->else->if->focusLog->isLoggable->focusLog->finest->return
Component#isRequestFocusAccepted(boolean, boolean, FocusEvent.Cause)::: component is request focus accepted:::if->isFocusable->isVisible->if->focusLog->isLoggable->focusLog->finest->return->peer->if->if->focusLog->isLoggable->focusLog->finest->return->window->getContainingWindow->if->window->isFocusableWindow->if->focusLog->isLoggable->focusLog->finest->return->focusOwner->KeyboardFocusManager->getMostRecentFocusOwner->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->if->focusOwner->getContainingWindow->if->if->focusLog->isLoggable->focusLog->finest->return->if->if->focusLog->isLoggable->focusLog->finest->return->ret->acceptRequestFocus->if->focusLog->isLoggable->focusLog->finest->return
Component.DummyRequestFocusController#acceptRequestFocus(Component, Component, boolean, boolean, FocusEvent.Cause)::: dummy request focus controller accept request focus:::return
Component#setRequestFocusController(RequestFocusController)::: component set request focus controller:::if->new->DummyRequestFocusController->else
Component#getFocusCycleRootAncestor():::Returns the Container which is the focus cycle root of this Component's focus traversal cycle:::rootAncestor->while->rootAncestor->isFocusCycleRoot->return
Component#isFocusCycleRoot(Container):::Returns whether the specified Container is the focus cycle root of this Component's focus traversal cycle:::rootAncestor->getFocusCycleRootAncestor->return
Component#getTraversalRoot()::: component get traversal root:::return->getFocusCycleRootAncestor
Component#transferFocus():::Transfers the focus to the next component, as though this Component were the focus owner.:::nextFocus
Component#nextFocus()::: component next focus:::transferFocus
Component#transferFocus(boolean)::: component transfer focus:::if->focusLog->isLoggable->focusLog->finer->toFocus->getNextFocusCandidate->res->if->toFocus->isFocusOwner->toFocus->requestFocusInWindow->if->if->focusLog->isLoggable->focusLog->finer->KeyboardFocusManager->getCurrentKeyboardFocusManager->clearGlobalFocusOwnerPriv->if->focusLog->isLoggable->focusLog->finer->return
Component#getNextFocusCandidate()::: component get next focus candidate:::rootAncestor->getTraversalRoot->comp->while->rootAncestor->isShowing->rootAncestor->canBeFocusOwner->comp->getFocusCycleRootAncestor->if->focusLog->isLoggable->focusLog->finer->candidate->if->policy->rootAncestor->getFocusTraversalPolicy->toFocus->policy->getComponentAfter->if->focusLog->isLoggable->focusLog->finer->if->policy->getDefaultComponent->if->focusLog->isLoggable->focusLog->finer->if->applet->EmbeddedFrame->getAppletIfAncestorOf->if->if->focusLog->isLoggable->focusLog->finer->return
Component#transferFocusBackward():::Transfers the focus to the previous component, as though this Component were the focus owner.:::transferFocusBackward
Component#transferFocusBackward(boolean)::: component transfer focus backward:::rootAncestor->getTraversalRoot->comp->while->rootAncestor->isShowing->rootAncestor->canBeFocusOwner->comp->getFocusCycleRootAncestor->res->if->policy->rootAncestor->getFocusTraversalPolicy->toFocus->policy->getComponentBefore->if->policy->getDefaultComponent->if->toFocus->requestFocusInWindow->if->if->focusLog->isLoggable->focusLog->finer->KeyboardFocusManager->getCurrentKeyboardFocusManager->clearGlobalFocusOwnerPriv->if->focusLog->isLoggable->focusLog->finer->return
Component#transferFocusUpCycle():::Transfers the focus up one focus traversal cycle:::rootAncestor->for->getFocusCycleRootAncestor->rootAncestor->isShowing->rootAncestor->isFocusable->rootAncestor->isEnabled->rootAncestor->getFocusCycleRootAncestor->if->rootAncestorRootAncestor->rootAncestor->getFocusCycleRootAncestor->fcr->KeyboardFocusManager->getCurrentKeyboardFocusManager->setGlobalCurrentFocusCycleRootPriv->rootAncestor->requestFocus->else->window->getContainingWindow->if->toFocus->window->getFocusTraversalPolicy->getDefaultComponent->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->setGlobalCurrentFocusCycleRootPriv->toFocus->requestFocus
Component#hasFocus():::Returns true if this Component is the focus owner:::return->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner
Component#isFocusOwner():::Returns true if this Component is the    focus owner.:::return->hasFocus
Component#setAutoFocusTransferOnDisposal(boolean)::: component set auto focus transfer on disposal:::
Component#isAutoFocusTransferOnDisposal()::: component is auto focus transfer on disposal:::return
Component#add(PopupMenu):::Adds the specified popup menu to the component.:::synchronized->getTreeLock->if->remove->if->new->Vector<PopupMenu>->popups->addElement->if->if->popup->addNotify
Component#remove(MenuComponent):::Removes the specified popup menu from the component.:::synchronized->getTreeLock->if->return->index->popups->indexOf->if->pmenu->if->pmenu->removeNotify->popups->removeElementAt->if->popups->size
Component#paramString():::Returns a string representing the state of this component:::thisName->Objects->getName->toString->invalid->isValid->hidden->disabled->return
Component#toString():::Returns a string representation of this component and its values.:::return->getClass->getName->paramString
Component#list():::Prints a listing of this component to the standard system output stream System.out.:::list
Component#list(PrintStream):::Prints a listing of this component to the specified output stream.:::list
Component#list(PrintStream, int):::Prints out a list, starting at the specified indentation, to the specified print stream.:::for->i->out->println
Component#list(PrintWriter):::Prints a listing to the specified print writer.:::list
Component#list(PrintWriter, int):::Prints out a list, starting at the specified indentation, to the specified print writer.:::for->i->out->println
Component#getNativeContainer()::: component get native container:::p->getContainer->while->p->getContainer->return
Component#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::synchronized->getObjectLock->if->return->if->new->PropertyChangeSupport->changeSupport->addPropertyChangeListener
Component#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::synchronized->getObjectLock->if->return->changeSupport->removePropertyChangeListener
Component#getPropertyChangeListeners():::Returns an array of all the property change listeners registered on this component.:::synchronized->getObjectLock->if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
Component#addPropertyChangeListener(String, PropertyChangeListener):::Adds a PropertyChangeListener to the listener list for a specific property:::synchronized->getObjectLock->if->return->if->new->PropertyChangeSupport->changeSupport->addPropertyChangeListener
Component#removePropertyChangeListener(String, PropertyChangeListener):::Removes a PropertyChangeListener from the listener list for a specific property:::synchronized->getObjectLock->if->return->changeSupport->removePropertyChangeListener
Component#getPropertyChangeListeners(String):::Returns an array of all the listeners which have been associated with the named property.:::synchronized->getObjectLock->if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
Component#firePropertyChange(String, Object, Object):::Support for reporting bound property changes for Object properties:::changeSupport->synchronized->getObjectLock->if->oldValue->equals->return->changeSupport->firePropertyChange
Component#firePropertyChange(String, boolean, boolean):::Support for reporting bound property changes for boolean properties:::changeSupport->if->return->changeSupport->firePropertyChange
Component#firePropertyChange(String, int, int):::Support for reporting bound property changes for integer properties:::changeSupport->if->return->changeSupport->firePropertyChange
Component#firePropertyChange(String, byte, byte):::Reports a bound property change.:::if->return->Byte->valueOf->Byte->valueOf->firePropertyChange
Component#firePropertyChange(String, char, char):::Reports a bound property change.:::if->return->Character->valueOf->Character->valueOf->firePropertyChange
Component#firePropertyChange(String, short, short):::Reports a bound property change.:::if->return->Short->valueOf->Short->valueOf->firePropertyChange
Component#firePropertyChange(String, long, long):::Reports a bound property change.:::if->return->Long->valueOf->Long->valueOf->firePropertyChange
Component#firePropertyChange(String, float, float):::Reports a bound property change.:::if->return->Float->valueOf->Float->valueOf->firePropertyChange
Component#firePropertyChange(String, double, double):::Reports a bound property change.:::if->return->Double->valueOf->Double->valueOf->firePropertyChange
Component#doSwingSerialization():::This hack is for Swing serialization:::if->return->swingPackage->Package->getPackage->for->klass->Component.this->getClass->klass->getSuperclass
Component#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::doSwingSerialization->s->defaultWriteObject->AWTEventMulticaster->save->AWTEventMulticaster->save->AWTEventMulticaster->save->AWTEventMulticaster->save->AWTEventMulticaster->save->AWTEventMulticaster->save->s->writeObject->s->writeObject->AWTEventMulticaster->save->AWTEventMulticaster->save->s->writeObject->AWTEventMulticaster->save->s->writeObject
Component#readObject(ObjectInputStream):::Reads the ObjectInputStream and if it isn't null adds a listener to receive a variety of events fired by the component:::new->Object->AccessController->getContext->s->defaultReadObject->AppContext->getAppContext->checkCoalescing->if->initializeFocusTraversalKeys->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addComponentListener->else->if->s->readObject->addFocusListener->else->if->s->readObject->addKeyListener->else->if->s->readObject->addMouseListener->else->if->s->readObject->addMouseMotionListener->else->if->s->readObject->addInputMethodListener->else->s->readObject->orient->try->s->readObject->catch->if->throw->finally->if->else->try->while->s->readObject->key->intern->if->s->readObject->addHierarchyListener->else->if->s->readObject->addHierarchyBoundsListener->else->s->readObject->catch->if->throw->finally->try->while->s->readObject->key->intern->if->s->readObject->addMouseWheelListener->else->s->readObject->catch->if->throw->finally->if->npopups->popups->size->for->i
Component#setComponentOrientation(ComponentOrientation):::Sets the language-sensitive orientation that is to be used to order the elements or text within this component:::oldValue->firePropertyChange->invalidateIfValid
Component#getComponentOrientation():::Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component:::return
Component#applyComponentOrientation(ComponentOrientation):::Sets the ComponentOrientation property of this component and all components contained within it:::if->throw->new->NullPointerException->setComponentOrientation
Component#canBeFocusOwner()::: component can be focus owner:::if->isEnabled->isDisplayable->isVisible->isFocusable->return->return
Component#canBeFocusOwnerRecursively():::Checks that this component meets the prerequisites to be focus owner: - it is enabled, visible, focusable - it's parents are all enabled and showing - top-level window is focusable - if focus cycle root has DefaultFocusTraversalPolicy then it also checks that this policy accepts this component as focus owner:::if->canBeFocusOwner->return->synchronized->getTreeLock->if->return->parent->canContainFocusOwner->return
Component#relocateComponent():::Fix the location of the HW component in a LW container hierarchy.:::synchronized->getTreeLock->if->return->nativeX->nativeY->for->cont->getContainer->cont->isLightweight->cont->getContainer->peer->setBounds
Component#getContainingWindow():::Returns the Window ancestor of the component.:::return->SunToolkit->getContainingWindow
Component#initIDs():::Initialize JNI field and method IDs:::
Component#getAccessibleContext():::Gets the AccessibleContext associated with this Component:::return
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler#componentHidden(ComponentEvent)::: accessible component handler component hidden:::if->accessibleContext->firePropertyChange
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler#componentShown(ComponentEvent)::: accessible component handler component shown:::if->accessibleContext->firePropertyChange
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler#componentMoved(ComponentEvent)::: accessible component handler component moved:::
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler#componentResized(ComponentEvent)::: accessible component handler component resized:::
Component.AccessibleAWTComponent.AccessibleAWTFocusHandler#focusGained(FocusEvent)::: accessible focus handler focus gained:::if->accessibleContext->firePropertyChange
Component.AccessibleAWTComponent.AccessibleAWTFocusHandler#focusLost(FocusEvent)::: accessible focus handler focus lost:::if->accessibleContext->firePropertyChange
Component.AccessibleAWTComponent#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list.:::if->new->AccessibleAWTComponentHandler->if->new->AccessibleAWTFocusHandler->if->Component.this->addComponentListener->Component.this->addFocusListener->super->addPropertyChangeListener
Component.AccessibleAWTComponent#removePropertyChangeListener(PropertyChangeListener):::Remove a PropertyChangeListener from the listener list:::if->Component.this->removeComponentListener->Component.this->removeFocusListener->super->removePropertyChangeListener
Component.AccessibleAWTComponent#getAccessibleName():::Gets the accessible name of this object:::return
Component.AccessibleAWTComponent#getAccessibleDescription():::Gets the accessible description of this object:::return
Component.AccessibleAWTComponent#getAccessibleRole():::Gets the role of this object.:::return
Component.AccessibleAWTComponent#getAccessibleStateSet():::Gets the state of this object.:::return->Component.this->getAccessibleStateSet
Component.AccessibleAWTComponent#getAccessibleParent():::Gets the Accessible parent of this object:::if->return->else->parent->getParent->if->return->return
Component.AccessibleAWTComponent#getAccessibleIndexInParent():::Gets the index of this object in its accessible parent.:::return->Component.this->getAccessibleIndexInParent
Component.AccessibleAWTComponent#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::return
Component.AccessibleAWTComponent#getAccessibleChild(int):::Returns the nth Accessible child of the object.:::return
Component.AccessibleAWTComponent#getLocale():::Returns the locale of this object.:::return->Component.this->getLocale
Component.AccessibleAWTComponent#getAccessibleComponent():::Gets the AccessibleComponent associated with this object if one exists:::return
Component.AccessibleAWTComponent#getBackground():::Gets the background color of this object.:::return->Component.this->getBackground
Component.AccessibleAWTComponent#setBackground(Color):::Sets the background color of this object:::Component.this->setBackground
Component.AccessibleAWTComponent#getForeground():::Gets the foreground color of this object.:::return->Component.this->getForeground
Component.AccessibleAWTComponent#setForeground(Color):::Sets the foreground color of this object.:::Component.this->setForeground
Component.AccessibleAWTComponent#getCursor():::Gets the Cursor of this object.:::return->Component.this->getCursor
Component.AccessibleAWTComponent#setCursor(Cursor):::Sets the Cursor of this object:::Component.this->setCursor
Component.AccessibleAWTComponent#getFont():::Gets the Font of this object.:::return->Component.this->getFont
Component.AccessibleAWTComponent#setFont(Font):::Sets the Font of this object.:::Component.this->setFont
Component.AccessibleAWTComponent#getFontMetrics(Font):::Gets the FontMetrics of this object.:::if->return->else->return->Component.this->getFontMetrics
Component.AccessibleAWTComponent#isEnabled():::Determines if the object is enabled.:::return->Component.this->isEnabled
Component.AccessibleAWTComponent#setEnabled(boolean):::Sets the enabled state of the object.:::old->Component.this->isEnabled->Component.this->setEnabled->if->if->if->accessibleContext->firePropertyChange->else->accessibleContext->firePropertyChange
Component.AccessibleAWTComponent#isVisible():::Determines if the object is visible:::return->Component.this->isVisible
Component.AccessibleAWTComponent#setVisible(boolean):::Sets the visible state of the object.:::old->Component.this->isVisible->Component.this->setVisible->if->if->if->accessibleContext->firePropertyChange->else->accessibleContext->firePropertyChange
Component.AccessibleAWTComponent#isShowing():::Determines if the object is showing:::return->Component.this->isShowing
Component.AccessibleAWTComponent#contains(Point):::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.:::return->Component.this->contains
Component.AccessibleAWTComponent#getLocationOnScreen():::Returns the location of the object on the screen.:::synchronized->Component.this->getTreeLock->if->Component.this->isShowing->return->Component.this->getLocationOnScreen->else->return
Component.AccessibleAWTComponent#getLocation():::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.:::return->Component.this->getLocation
Component.AccessibleAWTComponent#setLocation(Point):::Sets the location of the object relative to the parent.:::Component.this->setLocation
Component.AccessibleAWTComponent#getBounds():::Gets the bounds of this object in the form of a Rectangle object:::return->Component.this->getBounds
Component.AccessibleAWTComponent#setBounds(Rectangle):::Sets the bounds of this object in the form of a Rectangle object:::Component.this->setBounds
Component.AccessibleAWTComponent#getSize():::Returns the size of this object in the form of a Dimension object:::return->Component.this->getSize
Component.AccessibleAWTComponent#setSize(Dimension):::Resizes this object so that it has width and height.:::Component.this->setSize
Component.AccessibleAWTComponent#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point:::return
Component.AccessibleAWTComponent#isFocusTraversable():::Returns whether this object can accept focus or not.:::return->Component.this->isFocusTraversable
Component.AccessibleAWTComponent#requestFocus():::Requests focus for this object.:::Component.this->requestFocus
Component.AccessibleAWTComponent#addFocusListener(FocusListener):::Adds the specified focus listener to receive focus events from this component.:::Component.this->addFocusListener
Component.AccessibleAWTComponent#removeFocusListener(FocusListener):::Removes the specified focus listener so it no longer receives focus events from this component.:::Component.this->removeFocusListener
Component#getAccessibleIndexInParent():::Gets the index of this object in its accessible parent:::synchronized->getTreeLock->accContext->getAccessibleContext->if->return->parent->accContext->getAccessibleParent->if->return->parent->getAccessibleContext->for->i->accContext->getAccessibleChildrenCount->return
Component#getAccessibleStateSet():::Gets the current state set of this object.:::synchronized->getTreeLock->states->new->AccessibleStateSet->if->this->isEnabled->states->add->if->this->isFocusTraversable->states->add->if->this->isVisible->states->add->if->this->isShowing->states->add->if->this->isFocusOwner->states->add->if->ac->getAccessibleContext->if->ap->ac->getAccessibleParent->if->pac->ap->getAccessibleContext->if->as->pac->getAccessibleSelection->if->states->add->i->ac->getAccessibleIndexInParent->if->if->as->isAccessibleChildSelected->states->add->if->Component->isInstanceOf->if->isOpaque->states->add->return
Component#isInstanceOf(Object, String):::Checks that the given object is instance of the given class.:::if->return->if->return->cls->obj->getClass->while->if->cls->getName->equals->return->cls->getSuperclass->return
Component#areBoundsValid():::Check whether we can trust the current bounds of the component:::cont->getContainer->return->cont->isValid->cont->getLayout
Component#applyCompoundShape(Region):::Applies the shape to the component:::checkTreeLock->if->areBoundsValid->if->mixingLog->isLoggable->mixingLog->areBoundsValid->fine->return->if->isLightweight->peer->if->if->shape->isEmpty->if->shape->getNormalShape->equals->if->return->peer->applyShape->else->if->shape->getAppliedShape->equals->return->compAbsolute->getLocationOnWindow->if->mixingLog->isLoggable->mixingLog->fine->peer->shape->getTranslatedRegion->applyShape
Component#getAppliedShape():::Returns the shape previously set with applyCompoundShape():::checkTreeLock->return->isLightweight->getNormalShape
Component#getLocationOnWindow()::: component get location on window:::checkTreeLock->curLocation->getLocation->for->parent->getContainer->parent->getContainer->return
Component#getNormalShape():::Returns the full shape of the component located in window coordinates:::checkTreeLock->compAbsolute->getLocationOnWindow->return->Region->getWidth->getHeight->getInstanceXYWH
Component#getOpaqueShape():::Returns the "opaque shape" of the component:::checkTreeLock->if->return->else->return->getNormalShape
Component#getSiblingIndexAbove()::: component get sibling index above:::checkTreeLock->parent->getContainer->if->return->nextAbove->parent->getComponentZOrder->return
Component#getHWPeerAboveMe()::: component get peer above me:::checkTreeLock->cont->getContainer->indexAbove->getSiblingIndexAbove->while->for->i->if->cont->isLightweight->break->cont->getSiblingIndexAbove->cont->getContainer->return
Component#getSiblingIndexBelow()::: component get sibling index below:::checkTreeLock->parent->getContainer->if->return->nextBelow->parent->getComponentZOrder->return->parent->getComponentCount
Component#isNonOpaqueForMixing()::: component is non opaque for mixing:::return->mixingCutoutRegion->isEmpty
Component#calculateCurrentShape()::: component calculate current shape:::checkTreeLock->s->getNormalShape->if->mixingLog->isLoggable->mixingLog->fine->if->getContainer->comp->cont->comp->getContainer->while->for->index->comp->getSiblingIndexAbove->if->cont->isLightweight->s->cont->getNormalShape->getIntersection->else->break->cont->getContainer->if->mixingLog->isLoggable->mixingLog->fine->return
Component#applyCurrentShape()::: component apply current shape:::checkTreeLock->if->areBoundsValid->if->mixingLog->isLoggable->mixingLog->areBoundsValid->fine->return->if->mixingLog->isLoggable->mixingLog->fine->calculateCurrentShape->applyCompoundShape
Component#subtractAndApplyShape(Region)::: component subtract and apply shape:::checkTreeLock->if->mixingLog->isLoggable->mixingLog->fine->getAppliedShape->getDifference->applyCompoundShape
Component#applyCurrentShapeBelowMe()::: component apply current shape below me:::checkTreeLock->parent->getContainer->if->parent->isShowing->parent->getSiblingIndexBelow->recursiveApplyCurrentShape->parent2->parent->getContainer->while->parent->isOpaque->parent2->parent->getSiblingIndexBelow->recursiveApplyCurrentShape->parent->getContainer
Component#subtractAndApplyShapeBelowMe()::: component subtract and apply shape below me:::checkTreeLock->parent->getContainer->if->isShowing->opaqueShape->getOpaqueShape->parent->getSiblingIndexBelow->recursiveSubtractAndApplyShape->parent2->parent->getContainer->while->parent->isOpaque->parent2->parent->getSiblingIndexBelow->recursiveSubtractAndApplyShape->parent->getContainer
Component#mixOnShowing()::: component mix on showing:::synchronized->getTreeLock->if->mixingLog->isLoggable->mixingLog->fine->if->isMixingNeeded->return->if->isLightweight->subtractAndApplyShapeBelowMe->else->applyCurrentShape
Component#mixOnHiding(boolean)::: component mix on hiding:::synchronized->getTreeLock->if->mixingLog->isLoggable->mixingLog->fine->if->isMixingNeeded->return->if->applyCurrentShapeBelowMe
Component#mixOnReshaping()::: component mix on reshaping:::synchronized->getTreeLock->if->mixingLog->isLoggable->mixingLog->fine->if->isMixingNeeded->return->if->isLightweight->applyCurrentShapeBelowMe->else->applyCurrentShape
Component#mixOnZOrderChanging(int, int)::: component mix on order changing:::synchronized->getTreeLock->becameHigher->parent->getContainer->if->mixingLog->isLoggable->mixingLog->fine->if->isMixingNeeded->return->if->isLightweight->if->if->isShowing->parent->getOpaqueShape->getSiblingIndexBelow->recursiveSubtractAndApplyShape->else->if->parent->recursiveApplyCurrentShape->else->if->applyCurrentShape->else->if->shape->getAppliedShape->for->index->applyCompoundShape
Component#mixOnValidating()::: component mix on validating:::
Component#isMixingNeeded()::: component is mixing needed:::if->SunToolkit->getSunAwtDisableMixing->if->mixingLog->isLoggable->mixingLog->finest->return->if->areBoundsValid->if->mixingLog->isLoggable->mixingLog->areBoundsValid->fine->return->window->getContainingWindow->if->if->window->hasHeavyweightDescendants->window->hasLightweightDescendants->window->isDisposing->if->mixingLog->isLoggable->mixingLog->window->hasHeavyweightDescendants->window->hasLightweightDescendants->window->isDisposing->fine->return->else->if->mixingLog->isLoggable->mixingLog->fine->return->return
Component#setMixingCutoutShape(Shape):::Sets a 'mixing-cutout' shape for this lightweight component:::region->Region->getInstance->synchronized->getTreeLock->needShowing->needHiding->if->isNonOpaqueForMixing->if->isNonOpaqueForMixing->if->isMixingNeeded->if->isLightweight->mixOnHiding->if->mixOnShowing
Component#updateZOrder()::: component update order:::peer->getHWPeerAboveMe->setZOrder
ComponentOrientation#isHorizontal():::Are lines horizontal? This will return true for horizontal, left-to-right writing systems such as Roman.:::return
ComponentOrientation#isLeftToRight():::HorizontalLines: Do items run left-to-right?<br> Vertical Lines:  Do lines run left-to-right?<br> This will return true for horizontal, left-to-right writing systems such as Roman.:::return
ComponentOrientation#getOrientation(Locale):::Returns the orientation that is appropriate for the given locale.:::lang->locale->getLanguage->if->equals->equals->equals->equals->return->else->return
ComponentOrientation#getOrientation(ResourceBundle):::Returns the orientation appropriate for the given ResourceBundle's localization:::result->try->bdl->getObject->catch->finally->if->bdl->getLocale->getOrientation->if->Locale->getDefault->getOrientation->return
Composite#createContext(ColorModel, ColorModel, RenderingHints):::Creates a context containing state that is used to perform the compositing operation:::
CompositeContext#dispose():::Releases resources allocated for a context.:::
CompositeContext#compose(Raster, Raster, WritableRaster):::Composes the two source Raster objects and places the result in the destination WritableRaster:::
Conditional#evaluate()::: conditional evaluate:::
Container#initIDs():::Initialize JNI field and method IDs for fields that may be        called from C.:::
Container#initializeFocusTraversalKeys()::: container initialize focus traversal keys:::new->SetArr
Container#getComponentCount():::Gets the number of components in this panel:::return->countComponents
Container#countComponents():::Returns the number of components in this container.:::return->component->size
Container#getComponent(int):::Gets the nth component in this container:::try->return->component->get->catch->throw->new->ArrayIndexOutOfBoundsException->finally
Container#getComponents():::Gets all the components in this container:::return->getComponents_NoClientCode
Container#getComponents_NoClientCode()::: container get components_ no client code:::return->component->toArray
Container#getComponentsSync()::: container get components sync:::synchronized->getTreeLock->return->getComponents
Container#getInsets():::Determines the insets of this container, which indicate the size of the container's border:::return->insets
Container#insets():::Returns the insets for this container.:::peer->if->cpeer->return->cpeer->getInsets->clone->return->new->Insets
Container#add(Component):::Appends the specified component to the end of this container:::addImpl->return
Container#add(String, Component):::Adds the specified component to this container:::addImpl->return
Container#add(Component, int):::Adds the specified component to this container at the given position:::addImpl->return
Container#checkAddToSelf(Component):::Checks that the component isn't supposed to be added into itself.:::if->for->cn
Container#checkNotAWindow(Component):::Checks that the component is not a Window instance.:::if->throw->new->IllegalArgumentException
Container#checkAdding(Component, int):::Checks that the component comp can be added to this container Checks :  index in bounds of container's size, comp is not one of this container's parents, and comp is not a window:::checkTreeLock->thisGC->getGraphicsConfiguration->if->component->size->throw->new->IllegalArgumentException->if->if->component->size->throw->component->size->new->IllegalArgumentException->checkAddToSelf->checkNotAWindow->thisTopLevel->getContainingWindow->compTopLevel->comp->getContainingWindow->if->throw->new->IllegalArgumentException->if->comp->thisGC->getDevice->getIDstring->checkGD
Container#removeDelicately(Component, Container, int):::Removes component comp from this container without making unnecessary changes and generating unnecessary events:::checkTreeLock->index->getComponentZOrder->needRemoveNotify->isRemoveNotifyNeeded->if->comp->removeNotify->if->if->layoutMgr->removeLayoutComponent->comp->numListening->adjustListeningChildren->comp->numListening->adjustListeningChildren->comp->countHierarchyMembers->adjustDescendants->if->comp->setGraphicsConfiguration->component->remove->invalidateIfValid->else->component->remove->component->add->if->if->Toolkit->enabledOnToolkit->e->new->ContainerEvent->dispatchEvent->comp->Toolkit->enabledOnToolkit->createHierarchyEvents->if->isVisible->updateCursorImmediately->return
Container#canContainFocusOwner(Component):::Checks whether this container can contain component which is focus owner:::if->isEnabled->isDisplayable->isVisible->isFocusable->return->if->isFocusCycleRoot->policy->getFocusTraversalPolicy->if->if->accept->return->synchronized->getTreeLock->if->return->parent->canContainFocusOwner->return
Container#hasHeavyweightDescendants():::Checks whether or not this container has heavyweight children:::checkTreeLock->return
Container#hasLightweightDescendants():::Checks whether or not this container has lightweight children:::checkTreeLock->return
Container#getHeavyweightContainer():::Returns closest heavyweight component to this container:::checkTreeLock->if->return->else->return->getNativeContainer
Container#isRemoveNotifyNeeded(Component, Container, Container):::Detects whether or not remove from current parent and adding to new parent requires call of removeNotify on the component:::if->return->if->return->if->return->if->comp->isLightweight->isContainer->if->hasHeavyweightDescendants->return->newNativeContainer->oldContainer->getHeavyweightContainer->oldNativeContainer->newContainer->getHeavyweightContainer->if->return->isReparentSupported->else->return
Container#setComponentZOrder(Component, int):::Moves the specified component to the specified z-order index in the container:::synchronized->getTreeLock->curParent->oldZindex->getComponentZOrder->if->return->checkAdding->peerRecreated->curParent->removeDelicately->addDelicately->if->comp->mixOnZOrderChanging
Container#reparentTraverse(ContainerPeer, Container):::Traverses the tree of components and reparents children heavyweight component to new heavyweight parent.:::checkTreeLock->for->i->child->getComponentCount
Container#reparentChild(Component):::Reparents child component peer to this container peer:::checkTreeLock->if->return->if->comp->isLightweight->if->reparentTraverse->else->reparent
Container#addDelicately(Component, Container, int):::Adds component to this container:::checkTreeLock->if->if->component->add->else->component->add->comp->getGraphicsConfiguration->setGraphicsConfiguration->comp->numListening->adjustListeningChildren->comp->numListening->adjustListeningChildren->comp->countHierarchyMembers->adjustDescendants->else->if->component->size->component->set->invalidateIfValid->if->if->comp->addNotify->else->newNativeContainer->getHeavyweightContainer->oldNativeContainer->curParent->getHeavyweightContainer->if->newNativeContainer->reparentChild->comp->updateZOrder->if->comp->isLightweight->isLightweight->comp->relocateComponent->if->if->if->addLayoutComponent->else->layoutMgr->addLayoutComponent->if->Toolkit->enabledOnToolkit->e->new->ContainerEvent->dispatchEvent->comp->Toolkit->enabledOnToolkit->createHierarchyEvents->if->comp->isFocusOwner->comp->canBeFocusOwnerRecursively->comp->transferFocus->else->if->focusOwner->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->if->isParentOf->focusOwner->canBeFocusOwnerRecursively->focusOwner->transferFocus->else->comp->Toolkit->enabledOnToolkit->createHierarchyEvents->if->isVisible->updateCursorImmediately
Container#getComponentZOrder(Component):::Returns the z-order index of the component inside the container:::if->return->synchronized->getTreeLock->if->return->return->component->indexOf
Container#add(Component, Object):::Adds the specified component to the end of this container:::addImpl
Container#add(Component, Object, int):::Adds the specified component to this container with the specified constraints at the specified index:::addImpl
Container#addImpl(Component, Object, int):::Adds the specified component to this container at the specified index:::synchronized->getTreeLock->thisGC->this->getGraphicsConfiguration->if->component->size->throw->new->IllegalArgumentException->checkAddToSelf->checkNotAWindow->if->remove->if->component->size->throw->new->IllegalArgumentException->if->comp->thisGC->getDevice->getIDstring->checkGD->if->component->add->else->component->add->comp->setGraphicsConfiguration->comp->numListening->adjustListeningChildren->comp->numListening->adjustListeningChildren->comp->countHierarchyMembers->adjustDescendants->invalidateIfValid->if->comp->addNotify->if->if->addLayoutComponent->else->if->layoutMgr->addLayoutComponent->if->Toolkit->enabledOnToolkit->e->new->ContainerEvent->dispatchEvent->comp->Toolkit->enabledOnToolkit->createHierarchyEvents->if->isVisible->updateCursorImmediately
Container#updateChildGraphicsData(GraphicsConfiguration)::: container update child graphics data:::checkTreeLock->ret->foreach->if->comp->updateGraphicsData->return
Container#checkGD(String):::Checks that all Components that this Container contains are on the same GraphicsDevice as this Container:::foreach->if->comp->checkGD
Container#remove(int):::Removes the component, specified by index, from this container:::synchronized->getTreeLock->if->component->size->throw->new->ArrayIndexOutOfBoundsException->comp->component->get->if->comp->removeNotify->if->layoutMgr->removeLayoutComponent->comp->numListening->adjustListeningChildren->comp->numListening->adjustListeningChildren->comp->countHierarchyMembers->adjustDescendants->component->remove->comp->setGraphicsConfiguration->invalidateIfValid->if->Toolkit->enabledOnToolkit->e->new->ContainerEvent->dispatchEvent->comp->Toolkit->enabledOnToolkit->createHierarchyEvents->if->isVisible->updateCursorImmediately
Container#remove(Component):::Removes the specified component from this container:::synchronized->getTreeLock->if->index->component->indexOf->if->remove
Container#removeAll():::Removes all the components from this container:::synchronized->getTreeLock->adjustListeningChildren->adjustListeningChildren->adjustDescendants->while->component->isEmpty->comp->component->component->size->remove->if->comp->removeNotify->if->layoutMgr->removeLayoutComponent->comp->setGraphicsConfiguration->if->Toolkit->enabledOnToolkit->e->new->ContainerEvent->dispatchEvent->comp->Toolkit->enabledOnToolkit->createHierarchyEvents->if->isVisible->updateCursorImmediately->invalidateIfValid
Container#numListening(long)::: container num listening:::superListening->super->numListening->if->if->eventLog->isLoggable->sum->foreach->comp->numListening->if->eventLog->fine->return->else->if->if->eventLog->isLoggable->sum->foreach->comp->numListening->if->eventLog->fine->return->else->if->eventLog->isLoggable->eventLog->fine->return
Container#adjustListeningChildren(long, int)::: container adjust listening children:::if->eventLog->isLoggable->toAssert->if->eventLog->fine->if->return->if->if->adjustListeningChildrenOnParent
Container#adjustDescendants(int)::: container adjust descendants:::if->return->adjustDescendantsOnParent
Container#adjustDescendantsOnParent(int)::: container adjust descendants on parent:::if->parent->adjustDescendants
Container#countHierarchyMembers()::: container count hierarchy members:::if->log->isLoggable->sum->foreach->comp->countHierarchyMembers->if->log->fine->return
Container#getListenersCount(int, boolean)::: container get listeners count:::checkTreeLock->if->return->switch->return->return->return
Container#createHierarchyEvents(int, Component, Container, long, boolean)::: container create hierarchy events:::checkTreeLock->listeners->getListenersCount->for->count->i->return->super->createHierarchyEvents
Container#createChildHierarchyEvents(int, long, boolean)::: container create child hierarchy events:::checkTreeLock->if->component->isEmpty->return->listeners->getListenersCount->for->count->i
Container#getLayout():::Gets the layout manager for this container.:::return
Container#setLayout(LayoutManager):::Sets the layout manager for this container:::invalidateIfValid
Container#doLayout():::Causes this container to lay out its components:::layout
Container#layout()::: container layout:::layoutMgr->if->layoutMgr->layoutContainer
Container#isValidateRoot():::Indicates if this container is a validate root:::return
Container#invalidateParent():::Invalidates the parent of the container unless the container is a validate root.:::if->isValidateRoot->super->invalidateParent
Container#invalidate():::Invalidates the container:::layoutMgr->if->lm->lm->invalidateLayout->super->invalidate
Container#validate():::Validates this container and all of its subcomponents:::updateCur->synchronized->getTreeLock->if->isValid->p->if->if->p->beginValidate->validateTree->if->p->endValidate->if->isVisible->if->updateCursorImmediately
Container#validateUnconditionally():::Unconditionally validate the component hierarchy.:::updateCur->synchronized->getTreeLock->validate->if->isVisible->if->updateCursorImmediately
Container#validateTree():::Recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid):::checkTreeLock->if->isValid->if->beginLayout->if->isValid->doLayout->for->i->component->size->if->endLayout->super->validate
Container#invalidateTree():::Recursively descends the container tree and invalidates all contained components.:::synchronized->getTreeLock->for->i->component->size->invalidateIfValid
Container#setFont(Font):::Sets the font of this container:::shouldinvalidate->oldfont->getFont->super->setFont->newfont->getFont->if->oldfont->equals->invalidateTree
Container#getPreferredSize():::Returns the preferred size of this container:::return->preferredSize
Container#preferredSize()::: container preferred size:::dim->if->isPreferredSizeSet->isValid->synchronized->getTreeLock->layoutMgr->preferredLayoutSize->super->preferredSize->if->return->new->Dimension->else->return
Container#getMinimumSize():::Returns the minimum size of this container:::return->minimumSize
Container#minimumSize()::: container minimum size:::dim->if->isMinimumSizeSet->isValid->synchronized->getTreeLock->layoutMgr->minimumLayoutSize->super->minimumSize->if->return->new->Dimension->else->return
Container#getMaximumSize():::Returns the maximum size of this container:::dim->if->isMaximumSizeSet->isValid->synchronized->getTreeLock->if->lm->lm->maximumLayoutSize->else->super->getMaximumSize->if->return->new->Dimension->else->return
Container#getAlignmentX():::Returns the alignment along the x axis:::xAlign->if->synchronized->getTreeLock->lm->lm->getLayoutAlignmentX->else->super->getAlignmentX->return
Container#getAlignmentY():::Returns the alignment along the y axis:::yAlign->if->synchronized->getTreeLock->lm->lm->getLayoutAlignmentY->else->super->getAlignmentY->return
Container#paint(Graphics):::Paints the container:::if->isShowing->synchronized->getObjectLock->if->if->printingThreads->Thread->currentThread->contains->return->getInstance->getComponentsSync->runComponents
Container#update(Graphics):::Updates the container:::if->isShowing->if->g->clearRect->paint
Container#print(Graphics):::Prints the container:::if->isShowing->t->Thread->currentThread->try->synchronized->getObjectLock->if->new->HashSet<>->printingThreads->add->super->print->catch->finally->synchronized->getObjectLock->printingThreads->remove->printingThreads->isEmpty->getInstance->getComponentsSync->runComponents
Container#paintComponents(Graphics):::Paints each of the components in this container.:::if->isShowing->getInstance->getComponentsSync->runComponents
Container#lightweightPaint(Graphics):::Simulates the peer callbacks into java.awt for printing of lightweight Containers.:::super->lightweightPaint->paintHeavyweightComponents
Container#paintHeavyweightComponents(Graphics):::Prints all the heavyweight subcomponents.:::if->isShowing->getInstance->getComponentsSync->runComponents
Container#printComponents(Graphics):::Prints each of the components in this container.:::if->isShowing->getInstance->getComponentsSync->runComponents
Container#lightweightPrint(Graphics):::Simulates the peer callbacks into java.awt for printing of lightweight Containers.:::super->lightweightPrint->printHeavyweightComponents
Container#printHeavyweightComponents(Graphics):::Prints all the heavyweight subcomponents.:::if->isShowing->getInstance->getComponentsSync->runComponents
Container#addContainerListener(ContainerListener):::Adds the specified container listener to receive container events from this container:::if->return->AWTEventMulticaster->add
Container#removeContainerListener(ContainerListener):::Removes the specified container listener so it no longer receives container events from this container:::if->return->AWTEventMulticaster->remove
Container#getContainerListeners():::Returns an array of all the container listeners registered on this container.:::return->getListeners
Container#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this Container:::l->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
Container#eventEnabled(AWTEvent)::: container event enabled:::id->e->getID->if->if->return->return->return->super->eventEnabled
Container#processEvent(AWTEvent):::Processes events on this container:::if->processContainerEvent->return->super->processEvent
Container#processContainerEvent(ContainerEvent):::Processes container events occurring on this container by dispatching them to any registered ContainerListener objects:::listener->if->switch->e->getID->listener->componentAdded->break->listener->componentRemoved->break
Container#dispatchEventImpl(AWTEvent)::: container dispatch event impl:::if->dispatcher->dispatchEvent->e->consume->if->peer->handleEvent->return->super->dispatchEventImpl->synchronized->getTreeLock->switch->e->getID->Toolkit->enabledOnToolkit->createChildHierarchyEvents->break->Toolkit->enabledOnToolkit->createChildHierarchyEvents->break->break
Container#dispatchEventToSelf(AWTEvent)::: container dispatch event to self:::super->dispatchEventImpl
Container#getMouseEventTarget(int, int, boolean):::Fetches the top-most (deepest) lightweight component that is interested in receiving mouse events.:::return->getMouseEventTarget
Container#getDropTargetEventTarget(int, int, boolean):::Fetches the top-most (deepest) component to receive SunDropTargetEvents.:::return->getMouseEventTarget
Container#getMouseEventTarget(int, int, boolean, EventTargetFilter, boolean):::A private version of getMouseEventTarget which has two additional controllable behaviors:::comp->if->getMouseEventTargetImpl->if->getMouseEventTargetImpl->return
Container#getMouseEventTargetImpl(int, int, boolean, EventTargetFilter, boolean, boolean):::A private version of getMouseEventTarget which has three additional controllable behaviors:::synchronized->getTreeLock->for->i->component->size->isPeerOK->isMouseOverMe->contains->if->filter->accept->return->return
Container.EventTargetFilter#accept(Component)::: event target filter accept:::
Container.MouseEventTargetFilter#accept(Component)::: mouse event target filter accept:::return
Container.DropTargetEventTargetFilter#accept(Component)::: drop target event target filter accept:::dt->comp->getDropTarget->return->dt->isActive
Container#proxyEnableEvents(long):::This is called by lightweight components that want the containing windowed parent to enable some kind of events on their behalf:::if->if->parent->proxyEnableEvents->else->if->dispatcher->enableEvents
Container#deliverEvent(Event)::: container deliver event:::comp->getComponentAt->if->e->translate->comp->deliverEvent->else->postEvent
Container#getComponentAt(int, int):::Locates the component that contains the x,y position:::return->locate
Container#locate(int, int)::: container locate:::if->contains->return->lightweight->synchronized->getTreeLock->foreach->if->comp->contains->if->comp->isLightweight->return->if->return
Container#getComponentAt(Point):::Gets the component that contains the specified point.:::return->getComponentAt
Container#getMousePosition(boolean):::Returns the position of the mouse pointer in this Container's coordinate space if the Container is under the mouse pointer, otherwise returns null:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->pi->new->java.security.PrivilegedAction<PointerInfo>->doPrivileged->synchronized->getTreeLock->inTheSameWindow->findUnderMouseInWindow->if->isSameOrAncestorOf->return->pi->getLocation->pointRelativeToComponent->return
Container#isSameOrAncestorOf(Component, boolean)::: container is same or ancestor of:::return->isParentOf
Container#findComponentAt(int, int):::Locates the visible child component that contains the specified position:::return->findComponentAt
Container#findComponentAt(int, int, boolean):::Private version of findComponentAt which has a controllable behavior:::synchronized->getTreeLock->if->isRecursivelyVisible->return->findComponentAtImpl->return
Container#findComponentAtImpl(int, int, boolean)::: container find component at impl:::if->contains->return->lightweight->foreach->x1->y1->if->comp->contains->continue->if->comp->isLightweight->child->getChildAt->if->return->else->if->getChildAt->return
Container#getChildAt(Component, int, int, boolean):::Helper method for findComponentAtImpl:::if->findComponentAtImpl->else->comp->getComponentAt->if->return->return
Container#findComponentAt(Point):::Locates the visible child component that contains the specified point:::return->findComponentAt
Container#addNotify():::Makes this Container displayable by connecting it to a native screen resource:::synchronized->getTreeLock->super->addNotify->if->new->LightweightDispatcher->for->i->component->size
Container#removeNotify():::Makes this Container undisplayable by removing its connection to its native screen resource:::synchronized->getTreeLock->for->i->component->size->if->containsFocus->KeyboardFocusManager->isAutoFocusTransferEnabledFor->if->transferFocus->transferFocusBackward->if->dispatcher->dispose->super->removeNotify
Container#isAncestorOf(Component):::Checks if the component is contained in the component hierarchy of this container.:::p->if->c->getParent->return->while->if->return->p->getParent->return
Container#startLWModal()::: container start modal:::AppContext->getAppContext->time->Toolkit->getEventQueue->getMostRecentKeyEventTime->predictedFocusOwner->Component->isInstanceOf->getMostRecentFocusOwner->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->enqueueKeyEvents->nativeContainer->synchronized->getTreeLock->getHeavyweightContainer->if->return->else->pumpEventsForHierarchy->dispatchThread->Thread->currentThread->dispatchThread->pumpEventsForHierarchy->if->EventQueue->isDispatchThread->currentSequencedEvent->KeyboardFocusManager->getCurrentKeyboardFocusManager->getCurrentSequencedEvent->if->currentSequencedEvent->dispose->pumpEventsForHierarchy->run->else->synchronized->getTreeLock->Toolkit->getEventQueue->new->PeerEvent->postEvent->while->try->getTreeLock->wait->catch->break->finally->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->dequeueKeyEvents
Container#stopLWModal()::: container stop modal:::synchronized->getTreeLock->if->nativeContainer->getHeavyweightContainer->if->if->return->else->SunToolkit->new->WakingRunnable->new->PeerEvent->postEvent->EventQueue->new->WakingRunnable->invokeLater->getTreeLock->notifyAll
Container.WakingRunnable#run()::: waking runnable run:::
Container#paramString():::Returns a string representing the state of this Container:::str->super->paramString->layoutMgr->if->layoutMgr->getClass->getName->return
Container#list(PrintStream, int):::Prints a listing of this container to the specified output stream:::super->list->synchronized->getTreeLock->for->i->component->size
Container#list(PrintWriter, int):::Prints out a list, starting at the specified indentation, to the specified print writer:::super->list->synchronized->getTreeLock->for->i->component->size
Container#setFocusTraversalKeys(int, Set):::Sets the focus traversal keys for a given traversal operation for this Container:::if->throw->new->IllegalArgumentException->setFocusTraversalKeys_NoIDCheck
Container#getFocusTraversalKeys(int):::Returns the Set of focus traversal keys for a given traversal operation for this Container:::if->throw->new->IllegalArgumentException->return->getFocusTraversalKeys_NoIDCheck
Container#areFocusTraversalKeysSet(int):::Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Container:::if->throw->new->IllegalArgumentException->return
Container#isFocusCycleRoot(Container):::Returns whether the specified Container is the focus cycle root of this Container's focus traversal cycle:::if->isFocusCycleRoot->return->else->return->super->isFocusCycleRoot
Container#findTraversalRoot()::: container find traversal root:::currentFocusCycleRoot->KeyboardFocusManager->getCurrentKeyboardFocusManager->getCurrentFocusCycleRoot->root->if->else->getFocusCycleRootAncestor->if->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->setGlobalCurrentFocusCycleRootPriv->return
Container#containsFocus()::: container contains focus:::focusOwner->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->return->isParentOf
Container#isParentOf(Component):::Check if this component is the child of this container or its children:::synchronized->getTreeLock->while->comp->getParent->return
Container#clearMostRecentFocusOwnerOnHide()::: container clear most recent focus owner on hide:::reset->window->synchronized->getTreeLock->getContainingWindow->if->comp->KeyboardFocusManager->getMostRecentFocusOwner->isParentOf->synchronized->storedComp->window->getTemporaryLostComponent->if->isParentOf->window->setTemporaryLostComponent->if->KeyboardFocusManager->setMostRecentFocusOwner
Container#clearCurrentFocusCycleRootOnHide()::: container clear current focus cycle root on hide:::kfm->KeyboardFocusManager->getCurrentKeyboardFocusManager->cont->kfm->getCurrentFocusCycleRoot->if->isParentOf->kfm->setGlobalCurrentFocusCycleRootPriv
Container#getTraversalRoot()::: container get traversal root:::if->isFocusCycleRoot->return->findTraversalRoot->return->super->getTraversalRoot
Container#setFocusTraversalPolicy(FocusTraversalPolicy):::Sets the focus traversal policy that will manage keyboard traversal of this Container's children, if this Container is a focus cycle root:::oldPolicy->synchronized->firePropertyChange
Container#getFocusTraversalPolicy():::Returns the focus traversal policy that will manage keyboard traversal of this Container's children, or null if this Container is not a focus cycle root:::if->isFocusTraversalPolicyProvider->isFocusCycleRoot->return->policy->if->return->rootAncestor->getFocusCycleRootAncestor->if->return->rootAncestor->getFocusTraversalPolicy->else->return->KeyboardFocusManager->getCurrentKeyboardFocusManager->getDefaultFocusTraversalPolicy
Container#isFocusTraversalPolicySet():::Returns whether the focus traversal policy has been explicitly set for this Container:::return
Container#setFocusCycleRoot(boolean):::Sets whether this Container is the root of a focus traversal cycle:::oldFocusCycleRoot->synchronized->firePropertyChange
Container#isFocusCycleRoot():::Returns whether this Container is the root of a focus traversal cycle:::return
Container#setFocusTraversalPolicyProvider(boolean):::Sets whether this container will be used to provide focus traversal policy:::oldProvider->synchronized->firePropertyChange
Container#isFocusTraversalPolicyProvider():::Returns whether this container provides focus traversal policy:::return
Container#transferFocusDownCycle():::Transfers the focus down one focus traversal cycle:::if->isFocusCycleRoot->KeyboardFocusManager->getCurrentKeyboardFocusManager->setGlobalCurrentFocusCycleRootPriv->toFocus->getFocusTraversalPolicy->getDefaultComponent->if->toFocus->requestFocus
Container#preProcessKeyEvent(KeyEvent)::: container pre process key event:::parent->if->parent->preProcessKeyEvent
Container#postProcessKeyEvent(KeyEvent)::: container post process key event:::parent->if->parent->postProcessKeyEvent
Container#postsOldMouseEvents()::: container posts old mouse events:::return
Container#applyComponentOrientation(ComponentOrientation):::Sets the ComponentOrientation property of this container and all components contained within it:::super->applyComponentOrientation->synchronized->getTreeLock->for->i->component->size
Container#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::super->addPropertyChangeListener
Container#addPropertyChangeListener(String, PropertyChangeListener):::Adds a PropertyChangeListener to the listener list for a specific property:::super->addPropertyChangeListener
Container#writeObject(ObjectOutputStream):::Serializes this Container to the specified ObjectOutputStream:::f->s->putFields->f->component->size->put->f->component->toArray->put->f->put->f->put->f->put->f->put->f->put->f->put->s->writeFields->AWTEventMulticaster->save->s->writeObject->if->s->writeObject->else->s->writeObject
Container#readObject(ObjectInputStream):::Deserializes this Container from the specified ObjectInputStream:::f->s->readFields->tmpComponent->f->get->if->ncomponents->f->get->if->throw->new->InvalidObjectException->new->java.util.ArrayList<Component>->for->i->f->get->f->get->if->f->get->f->get->f->get->f->get->component->foreach->comp->numListening->adjustListeningChildren->comp->numListening->adjustListeningChildren->comp->countHierarchyMembers->adjustDescendants->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addContainerListener->else->s->readObject->try->policy->s->readObject->if->catch->if->throw->finally
Container.AccessibleAWTContainer#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::return->Container.this->getAccessibleChildrenCount
Container.AccessibleAWTContainer#getAccessibleChild(int):::Returns the nth Accessible child of the object.:::return->Container.this->getAccessibleChild
Container.AccessibleAWTContainer#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point.:::return->Container.this->getAccessibleAt
Container.AccessibleAWTContainer.AccessibleContainerHandler#componentAdded(ContainerEvent)::: accessible container handler component added:::c->e->getChild->if->AccessibleAWTContainer.this->getAccessibleContext->firePropertyChange
Container.AccessibleAWTContainer.AccessibleContainerHandler#componentRemoved(ContainerEvent)::: accessible container handler component removed:::c->e->getChild->if->AccessibleAWTContainer.this->getAccessibleContext->firePropertyChange
Container.AccessibleAWTContainer#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list.:::if->new->AccessibleContainerHandler->if->Container.this->addContainerListener->super->addPropertyChangeListener
Container.AccessibleAWTContainer#removePropertyChangeListener(PropertyChangeListener):::Remove a PropertyChangeListener from the listener list:::if->Container.this->removeContainerListener->super->removePropertyChangeListener
Container#getAccessibleAt(Point):::Returns the Accessible child contained at the local coordinate Point, if one exists:::synchronized->getTreeLock->if->a->ac->a->getAccessibleContext->if->acmp->location->nchildren->ac->getAccessibleChildrenCount->for->i->return->else->ret->if->this->contains->else->ncomponents->this->getComponentCount->for->i->if->return->return
Container#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::synchronized->getTreeLock->count->children->this->getComponents->for->i->return
Container#getAccessibleChild(int):::Returns the nth Accessible child of the object.:::synchronized->getTreeLock->children->this->getComponents->count->for->j->return
Container#increaseComponentCount(Component)::: container increase component count:::synchronized->getTreeLock->if->c->isDisplayable->throw->new->IllegalStateException->addHW->addLW->if->if->c->isLightweight->else->for->cont->cont->getContainer
Container#decreaseComponentCount(Component)::: container decrease component count:::synchronized->getTreeLock->if->c->isDisplayable->throw->new->IllegalStateException->subHW->subLW->if->if->c->isLightweight->else->for->cont->cont->getContainer
Container#getTopmostComponentIndex()::: container get topmost component index:::checkTreeLock->if->getComponentCount->return->return
Container#getBottommostComponentIndex()::: container get bottommost component index:::checkTreeLock->if->getComponentCount->return->getComponentCount->return
Container#getOpaqueShape()::: container get opaque shape:::checkTreeLock->if->isLightweight->isNonOpaqueForMixing->hasLightweightDescendants->s->for->index->getComponentCount->return->s->getNormalShape->getIntersection->return->super->getOpaqueShape
Container#recursiveSubtractAndApplyShape(Region)::: container recursive subtract and apply shape:::getTopmostComponentIndex->getBottommostComponentIndex->recursiveSubtractAndApplyShape
Container#recursiveSubtractAndApplyShape(Region, int)::: container recursive subtract and apply shape:::getBottommostComponentIndex->recursiveSubtractAndApplyShape
Container#recursiveSubtractAndApplyShape(Region, int, int)::: container recursive subtract and apply shape:::checkTreeLock->if->mixingLog->isLoggable->mixingLog->fine->if->return->if->shape->isEmpty->return->if->getLayout->isValid->return->for->index
Container#recursiveApplyCurrentShape()::: container recursive apply current shape:::getTopmostComponentIndex->getBottommostComponentIndex->recursiveApplyCurrentShape
Container#recursiveApplyCurrentShape(int)::: container recursive apply current shape:::getBottommostComponentIndex->recursiveApplyCurrentShape
Container#recursiveApplyCurrentShape(int, int)::: container recursive apply current shape:::checkTreeLock->if->mixingLog->isLoggable->mixingLog->fine->if->return->if->getLayout->isValid->return->for->index
Container#recursiveShowHeavyweightChildren()::: container recursive show heavyweight children:::if->hasHeavyweightDescendants->isVisible->return->for->index->getComponentCount
Container#recursiveHideHeavyweightChildren()::: container recursive hide heavyweight children:::if->hasHeavyweightDescendants->return->for->index->getComponentCount
Container#recursiveRelocateHeavyweightChildren(Point)::: container recursive relocate heavyweight children:::for->index->getComponentCount
Container#isRecursivelyVisibleUpToHeavyweightContainer():::Checks if the container and its direct lightweight containers are visible:::if->isLightweight->return->for->cont->cont->isLightweight->cont->getContainer->return
Container#mixOnShowing()::: container mix on showing:::synchronized->getTreeLock->if->mixingLog->isLoggable->mixingLog->fine->isLightweight->isLightweight->if->isRecursivelyVisibleUpToHeavyweightContainer->recursiveShowHeavyweightChildren->if->isMixingNeeded->return->if->hasHeavyweightDescendants->recursiveApplyCurrentShape->super->mixOnShowing
Container#mixOnHiding(boolean)::: container mix on hiding:::synchronized->getTreeLock->if->mixingLog->isLoggable->mixingLog->fine->if->recursiveHideHeavyweightChildren->super->mixOnHiding
Container#mixOnReshaping()::: container mix on reshaping:::synchronized->getTreeLock->if->mixingLog->isLoggable->mixingLog->fine->isMixingNeeded->isMixingNeeded->if->isLightweight->hasHeavyweightDescendants->origin->getX->getY->new->Point->for->cont->getContainer->cont->isLightweight->cont->getContainer->recursiveRelocateHeavyweightChildren->if->return->recursiveApplyCurrentShape->if->return->super->mixOnReshaping
Container#mixOnZOrderChanging(int, int)::: container mix on order changing:::synchronized->getTreeLock->if->mixingLog->isLoggable->mixingLog->fine->if->isMixingNeeded->return->becameHigher->if->isLightweight->hasHeavyweightDescendants->recursiveApplyCurrentShape->super->mixOnZOrderChanging
Container#mixOnValidating()::: container mix on validating:::synchronized->getTreeLock->if->mixingLog->isLoggable->mixingLog->fine->if->isMixingNeeded->return->if->hasHeavyweightDescendants->recursiveApplyCurrentShape->if->isLightweight->isNonOpaqueForMixing->subtractAndApplyShapeBelowMe->super->mixOnValidating
LightweightDispatcher#dispose()::: lightweight dispatcher dispose:::stopListeningForOtherDrags->mouseEventTarget->clear->targetLastEntered->clear->targetLastEnteredDT->clear
LightweightDispatcher#enableEvents(long):::Enables events to subcomponents.:::
LightweightDispatcher#dispatchEvent(AWTEvent):::Dispatches an event to a sub-component if necessary, and returns whether or not the event was forwarded to a sub-component.:::ret->if->sdde->processDropTargetEvent->else->if->me->processMouseEvent->if->e->getID->nativeContainer->updateCursorImmediately->return
LightweightDispatcher#isMouseGrab(MouseEvent)::: lightweight dispatcher is mouse grab:::modifiers->e->getModifiersEx->if->e->getID->e->getID->InputEvent->e->getButton->getMaskForButton->return
LightweightDispatcher#processMouseEvent(MouseEvent):::This method attempts to distribute a mouse event to a lightweight component:::id->e->getID->mouseOver->nativeContainer->e->getX->e->getY->getMouseEventTarget->trackMouseEnterExit->met->mouseEventTarget->get->if->isMouseGrab->new->WeakReference<>->if->switch->break->retargetMouseEvent->break->retargetMouseEvent->break->if->retargetMouseEvent->break->retargetMouseEvent->break->if->isMouseGrab->retargetMouseEvent->break->if->eventLog->isLoggable->eventLog->mouseOver->getName->mouseOver->getClass->finest->retargetMouseEvent->break->if->e->consume->return->e->isConsumed
LightweightDispatcher#processDropTargetEvent(SunDropTargetEvent)::: lightweight dispatcher process drop target event:::id->e->getID->x->e->getX->y->e->getY->if->nativeContainer->contains->d->nativeContainer->getSize->if->else->if->if->else->if->mouseOver->nativeContainer->getDropTargetEventTarget->trackMouseEnterExit->if->switch->break->retargetMouseEvent->e->consume->break->return->e->isConsumed
LightweightDispatcher#trackDropTargetEnterExit(Component, MouseEvent)::: lightweight dispatcher track drop target enter exit:::id->e->getID->if->targetLastEnteredDT->clear->else->if->else->if->tle->targetLastEnteredDT->get->retargetMouseEnterExit->new->WeakReference<>
LightweightDispatcher#trackMouseEnterExit(Component, MouseEvent)::: lightweight dispatcher track mouse enter exit:::if->trackDropTargetEnterExit->return->id->e->getID->if->startListeningForOtherDrags->else->if->stopListeningForOtherDrags->tle->targetLastEntered->get->retargetMouseEnterExit->new->WeakReference<>
LightweightDispatcher#retargetMouseEnterExit(Component, MouseEvent, Component, boolean)::: lightweight dispatcher retarget mouse enter exit:::id->e->getID->targetEnter->if->if->retargetMouseEvent->if->e->consume->if->retargetMouseEvent->if->e->consume->return
LightweightDispatcher#startListeningForOtherDrags()::: lightweight dispatcher start listening for other drags:::new->java.security.PrivilegedAction<Object>->doPrivileged
LightweightDispatcher#stopListeningForOtherDrags()::: lightweight dispatcher stop listening for other drags:::new->java.security.PrivilegedAction<Object>->doPrivileged
LightweightDispatcher#eventDispatched(AWTEvent)::: lightweight dispatcher event dispatched:::isForeignDrag->e->getSource->if->return->srcEvent->me->synchronized->nativeContainer->getTreeLock->srcComponent->srcEvent->getComponent->if->srcComponent->isShowing->return->c->while->c->getParent_NoClientCode->if->isModalBlocked->return->srcEvent->getWhen->srcEvent->getModifiersEx->srcEvent->getModifiers->srcEvent->getX->srcEvent->getY->srcEvent->getXOnScreen->srcEvent->getYOnScreen->srcEvent->getClickCount->srcEvent->isPopupTrigger->srcEvent->getButton->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->copyPrivateDataInto->ptSrcOrigin->srcComponent->getLocationOnScreen->if->AppContext->getAppContext->mouseEvent->r->new->Runnable->SunToolkit->executeOnEventHandlerThread->return->else->if->nativeContainer->isShowing->return->ptDstOrigin->nativeContainer->getLocationOnScreen->me->translatePoint->targetOver->nativeContainer->me->getX->me->getY->getMouseEventTarget->trackMouseEnterExit
LightweightDispatcher#retargetMouseEvent(Component, int, MouseEvent):::Sends a mouse event to the current mouse event recipient using the given event (sent to the windowed host) as a srcEvent:::if->return->x->e->getX->y->e->getY->component->for->component->getParent->retargeted->if->if->getDispatcher->new->SunDropTargetEvent->else->if->e->getWhen->e->getModifiersEx->e->getModifiers->e->getXOnScreen->e->getYOnScreen->e->getClickCount->e->isPopupTrigger->getScrollType->getScrollAmount->getWheelRotation->getPreciseWheelRotation->new->MouseWheelEvent->else->e->getWhen->e->getModifiersEx->e->getModifiers->e->getXOnScreen->e->getYOnScreen->e->getClickCount->e->isPopupTrigger->e->getButton->new->MouseEvent->meAccessor->AWTAccessor->getMouseEventAccessor->meAccessor->meAccessor->isCausedByTouchEvent->setCausedByTouchEvent->copyPrivateDataInto->if->dispatchEventToSelf->else->if->if->isAncestorOf->target->dispatchEvent->else->e->consume->else->target->dispatchEvent->if->retargeted->isConsumed->e->consume
ContainerOrderFocusTraversalPolicy#getFocusTraversalCycle(Container)::: container order focus traversal policy get focus traversal cycle:::cycle->new->ArrayList<Component>->enumerateCycle->return
ContainerOrderFocusTraversalPolicy#getComponentIndex(List, Component)::: container order focus traversal policy get component index:::return->cycle->indexOf
ContainerOrderFocusTraversalPolicy#enumerateCycle(Container, List)::: container order focus traversal policy enumerate cycle:::if->container->isVisible->container->isDisplayable->return->cycle->add->components->container->getComponents->for->i
ContainerOrderFocusTraversalPolicy#getTopmostProvider(Container, Component)::: container order focus traversal policy get topmost provider:::aCont->aComponent->getParent->ftp->while->if->aCont->isFocusTraversalPolicyProvider->aCont->getParent->if->return->return
ContainerOrderFocusTraversalPolicy#getComponentDownCycle(Component, int)::: container order focus traversal policy get component down cycle:::retComp->if->cont->if->cont->isFocusCycleRoot->if->getImplicitDownCycleTraversal->cont->getFocusTraversalPolicy->getDefaultComponent->if->log->isLoggable->log->fine->else->return->else->if->cont->isFocusTraversalPolicyProvider->cont->getFocusTraversalPolicy->getDefaultComponent->cont->getFocusTraversalPolicy->getLastComponent->if->log->isLoggable->log->fine->return
ContainerOrderFocusTraversalPolicy#getComponentAfter(Container, Component):::Returns the Component that should receive the focus after aComponent:::if->log->isLoggable->log->fine->if->throw->new->IllegalArgumentException->if->aContainer->isFocusTraversalPolicyProvider->aContainer->isFocusCycleRoot->throw->new->IllegalArgumentException->else->if->aContainer->isFocusCycleRoot->aComponent->isFocusCycleRoot->throw->new->IllegalArgumentException->synchronized->aContainer->getTreeLock->if->aContainer->isVisible->aContainer->isDisplayable->return->comp->getComponentDownCycle->if->return->provider->getTopmostProvider->if->if->log->isLoggable->log->fine->policy->provider->getFocusTraversalPolicy->afterComp->policy->getComponentAfter->if->if->log->isLoggable->log->fine->return->cycle->getFocusTraversalCycle->if->log->isLoggable->log->fine->index->getComponentIndex->if->if->log->isLoggable->log->fine->return->getFirstComponent->for->cycle->size->if->aContainer->isFocusCycleRoot->getFirstComponent->return->return
ContainerOrderFocusTraversalPolicy#getComponentBefore(Container, Component):::Returns the Component that should receive the focus before aComponent:::if->throw->new->IllegalArgumentException->if->aContainer->isFocusTraversalPolicyProvider->aContainer->isFocusCycleRoot->throw->new->IllegalArgumentException->else->if->aContainer->isFocusCycleRoot->aComponent->isFocusCycleRoot->throw->new->IllegalArgumentException->synchronized->aContainer->getTreeLock->if->aContainer->isVisible->aContainer->isDisplayable->return->provider->getTopmostProvider->if->if->log->isLoggable->log->fine->policy->provider->getFocusTraversalPolicy->beforeComp->policy->getComponentBefore->if->if->log->isLoggable->log->fine->return->if->accept->return->cycle->getFocusTraversalCycle->if->log->isLoggable->log->fine->index->getComponentIndex->if->if->log->isLoggable->log->fine->return->getLastComponent->comp->tryComp->for->if->aContainer->isFocusCycleRoot->getLastComponent->return->return
ContainerOrderFocusTraversalPolicy#getFirstComponent(Container):::Returns the first Component in the traversal cycle:::cycle->if->log->isLoggable->log->fine->if->throw->new->IllegalArgumentException->synchronized->aContainer->getTreeLock->if->aContainer->isVisible->aContainer->isDisplayable->return->if->else->getFocusTraversalCycle->if->cycle->size->if->log->isLoggable->log->fine->return->if->log->isLoggable->log->fine->foreach->if->accept->return->else->if->getComponentDownCycle->return->return
ContainerOrderFocusTraversalPolicy#getLastComponent(Container):::Returns the last Component in the traversal cycle:::cycle->if->log->isLoggable->log->fine->if->throw->new->IllegalArgumentException->synchronized->aContainer->getTreeLock->if->aContainer->isVisible->aContainer->isDisplayable->return->if->else->getFocusTraversalCycle->if->cycle->size->if->log->isLoggable->log->fine->return->if->log->isLoggable->log->fine->for->i->cycle->size->return
ContainerOrderFocusTraversalPolicy#getDefaultComponent(Container):::Returns the default Component to focus:::return->getFirstComponent
ContainerOrderFocusTraversalPolicy#setImplicitDownCycleTraversal(boolean):::Sets whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly:::
ContainerOrderFocusTraversalPolicy#getImplicitDownCycleTraversal():::Returns whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly:::return
ContainerOrderFocusTraversalPolicy#accept(Component):::Determines whether a Component is an acceptable choice as the new focus owner:::if->aComponent->canBeFocusOwner->return->if->for->enableTest->aComponent->getParent->enableTest->getParent->return
Cursor#initIDs():::Initialize JNI field and method IDs for fields that may be accessed from C.:::
Cursor.CursorDisposer#dispose()::: cursor disposer dispose:::if->finalizeImpl
Cursor#setPData(long)::: cursor set data:::if->GraphicsEnvironment->isHeadless->return->if->new->CursorDisposer->if->new->Object->addRecord->else
Cursor#getPredefinedCursor(int):::Returns a cursor object with the specified predefined type.:::if->throw->new->IllegalArgumentException->c->if->new->Cursor->if->return
Cursor#getSystemCustomCursor(String):::Returns a system-specific custom cursor object matching the specified name:::GraphicsEnvironment->checkHeadless->cursor->systemCustomCursors->get->if->synchronized->if->loadSystemCustomCursorProperties->prefix->key->if->systemCustomCursorProperties->containsKey->if->log->isLoggable->log->finer->return->fileName->systemCustomCursorProperties->getProperty->localized->systemCustomCursorProperties->getProperty->hotspot->systemCustomCursorProperties->getProperty->if->throw->new->AWTException->st->new->StringTokenizer->if->st->countTokens->throw->new->AWTException->hotPoint->try->Integer->st->nextToken->parseInt->Integer->st->nextToken->parseInt->new->Point->catch->throw->new->AWTException->finally->toolkit->Toolkit->getDefaultToolkit->file->in->AccessController->return->getResourceAsStream->doPrivileged->try->image->toolkit->in->readAllBytes->createImage->toolkit->createCustomCursor->catch->throw->e->getClass->e->getMessage->new->AWTException->finally->if->if->log->isLoggable->log->finer->else->systemCustomCursors->put->return
Cursor#getDefaultCursor():::Return the system default cursor.:::return->getPredefinedCursor
Cursor#getType():::Returns the type for this cursor.:::return
Cursor#getName():::Returns the name of this cursor.:::return
Cursor#toString():::Returns a string representation of this cursor.:::return->getClass->getName->getName
Cursor#loadSystemCustomCursorProperties()::: cursor load system custom cursor properties:::synchronized->new->Properties->try->AccessController->try->is->getResourceAsStream->systemCustomCursorProperties->load->catch->finally->return->doPrivileged->catch->throw->e->getClass->e->getMessage->new->AWTException->finally
Cursor#finalizeImpl(long)::: cursor finalize impl:::
DefaultFocusTraversalPolicy#accept(Component):::Determines whether a Component is an acceptable choice as the new focus owner:::if->aComponent->isVisible->aComponent->isDisplayable->aComponent->isEnabled->return->if->for->enableTest->aComponent->getParent->enableTest->getParent->focusable->aComponent->isFocusable->if->aComponent->isFocusTraversableOverridden->return->peer->return->peer->isFocusable
DefaultKeyboardFocusManager.TypeAheadMarker#toString():::Returns string representation of the marker:::return
DefaultKeyboardFocusManager#getOwningFrameDialog(Window)::: default keyboard focus manager get owning frame dialog:::while->window->getParent->return
DefaultKeyboardFocusManager#restoreFocus(FocusEvent, Window)::: default keyboard focus manager restore focus:::realOppositeComponent->get->vetoedComponent->fe->getComponent->if->restoreFocus->else->if->doRestoreFocus->else->if->fe->getOppositeComponent->fe->getOppositeComponent->doRestoreFocus->else->clearGlobalFocusOwnerPriv
DefaultKeyboardFocusManager#restoreFocus(WindowEvent)::: default keyboard focus manager restore focus:::realOppositeWindow->get->if->restoreFocus->else->if->we->getOppositeWindow->we->getOppositeWindow->restoreFocus->else->clearGlobalFocusOwnerPriv
DefaultKeyboardFocusManager#restoreFocus(Window, Component, boolean)::: default keyboard focus manager restore focus:::toFocus->KeyboardFocusManager->getMostRecentFocusOwner->if->if->getHeavyweight->getNativeFocusOwner->if->toFocus->isShowing->toFocus->canBeFocusOwner->toFocus->getNextFocusCandidate->if->if->toFocus->requestFocus->return->else->if->doRestoreFocus->return->if->clearGlobalFocusOwnerPriv->return->else->return
DefaultKeyboardFocusManager#restoreFocus(Component, boolean)::: default keyboard focus manager restore focus:::return->doRestoreFocus
DefaultKeyboardFocusManager#doRestoreFocus(Component, Component, boolean)::: default keyboard focus manager do restore focus:::success->if->toFocus->isShowing->toFocus->canBeFocusOwner->toFocus->requestFocus->return->else->if->getGlobalFocusedWindow->SunToolkit->getContainingWindow->return->nextFocus->toFocus->getNextFocusCandidate->if->nextFocus->requestFocusInWindow->return->else->if->clearGlobalFocusOwnerPriv->return->else->return
DefaultKeyboardFocusManager.DefaultKeyboardFocusManagerSentEvent#dispatch()::: default keyboard focus manager sent event dispatch:::manager->KeyboardFocusManager->getCurrentKeyboardFocusManager->defaultManager->if->synchronized->super->dispatch->if->synchronized
DefaultKeyboardFocusManager#sendMessage(Component, AWTEvent):::Sends a synthetic AWTEvent to a Component:::myAppContext->AppContext->getAppContext->targetAppContext->se->new->DefaultKeyboardFocusManagerSentEvent->if->se->dispatch->else->if->targetAppContext->isDisposed->return->SunToolkit->postEvent->if->EventQueue->isDispatchThread->if->Thread->currentThread->edt->Thread->currentThread->edt->new->Conditional->pumpEvents->else->if->fxCheckDispatchThread->new->Thread->fxCheckDispatchThread->start->try->fxCheckDispatchThread->join->catch->finally->else->synchronized->while->targetAppContext->isDisposed->try->se->wait->catch->break->finally->return
DefaultKeyboardFocusManager#repostIfFollowsKeyEvents(WindowEvent)::: default keyboard focus manager repost if follows key events:::if->return->we->time->we->getWhen->synchronized->ke->enqueuedKeyEvents->isEmpty->enqueuedKeyEvents->getFirst->if->ke->getWhen->marker->typeAheadMarkers->isEmpty->typeAheadMarkers->getFirst->if->toplevel->getContainingWindow->if->toplevel->isFocused->SunToolkit->AppContext->getAppContext->new->SequencedEvent->postEvent->return->return
DefaultKeyboardFocusManager#dispatchEvent(AWTEvent):::This method is called by the AWT event dispatcher requesting that the current KeyboardFocusManager dispatch the specified event on its behalf:::if->focusLog->isLoggable->focusLog->fine->switch->e->getID->if->repostIfFollowsKeyEvents->break->we->oldFocusedWindow->getGlobalFocusedWindow->newFocusedWindow->we->getWindow->if->break->if->newFocusedWindow->isFocusableWindow->newFocusedWindow->isVisible->newFocusedWindow->isDisplayable->restoreFocus->break->if->isEventDispatched->new->WindowEvent->sendMessage->if->setGlobalFocusOwner->setGlobalFocusedWindow->newActiveWindow->getOwningFrameDialog->currentActiveWindow->getGlobalActiveWindow->if->new->WindowEvent->sendMessage->if->getGlobalActiveWindow->restoreFocus->break->setGlobalFocusedWindow->if->getGlobalFocusedWindow->restoreFocus->break->if->toFocus->KeyboardFocusManager->getMostRecentFocusOwner->isFocusRestore->if->newFocusedWindow->isFocusableWindow->newFocusedWindow->getFocusTraversalPolicy->getInitialComponent->tempLost->synchronized->newFocusedWindow->setTemporaryLostComponent->if->focusLog->isLoggable->focusLog->finer->if->tempLost->requestFocusInWindow->if->toFocus->requestFocusInWindow->realOppositeWindow->get->if->we->getOppositeWindow->new->WindowEvent->return->typeAheadAssertions->we->oldActiveWindow->getGlobalActiveWindow->newActiveWindow->we->getWindow->if->break->if->isEventDispatched->new->WindowEvent->sendMessage->if->setGlobalActiveWindow->if->getGlobalActiveWindow->break->setGlobalActiveWindow->if->getGlobalActiveWindow->break->return->typeAheadAssertions->fe->oldFocusOwner->getGlobalFocusOwner->newFocusOwner->fe->getComponent->if->if->focusLog->isLoggable->focusLog->fine->dequeueKeyEvents->break->if->isEventDispatched->fe->isTemporary->fe->getCause->new->FocusEvent->sendMessage->if->setGlobalFocusOwner->if->fe->isTemporary->setGlobalPermanentFocusOwner->newFocusedWindow->SunToolkit->getContainingWindow->currentFocusedWindow->getGlobalFocusedWindow->if->new->WindowEvent->sendMessage->if->getGlobalFocusedWindow->dequeueKeyEvents->break->if->newFocusOwner->isFocusable->newFocusOwner->isShowing->newFocusOwner->isEnabled->fe->getCause->equals->dequeueKeyEvents->if->KeyboardFocusManager->isAutoFocusTransferEnabled->if->restoreFocus->else->restoreFocus->setMostRecentFocusOwner->break->setGlobalFocusOwner->if->getGlobalFocusOwner->dequeueKeyEvents->if->KeyboardFocusManager->isAutoFocusTransferEnabled->restoreFocus->break->if->fe->isTemporary->setGlobalPermanentFocusOwner->if->getGlobalPermanentFocusOwner->dequeueKeyEvents->if->KeyboardFocusManager->isAutoFocusTransferEnabled->restoreFocus->break->getHeavyweight->setNativeFocusOwner->realOppositeComponent->get->if->fe->getOppositeComponent->fe->isTemporary->fe->getCause->new->FocusEvent->return->typeAheadAssertions->fe->currentFocusOwner->getGlobalFocusOwner->if->if->focusLog->isLoggable->focusLog->fine->break->if->fe->getOppositeComponent->if->focusLog->isLoggable->focusLog->fine->break->setGlobalFocusOwner->if->getGlobalFocusOwner->restoreFocus->break->if->fe->isTemporary->setGlobalPermanentFocusOwner->if->getGlobalPermanentFocusOwner->restoreFocus->break->else->owningWindow->currentFocusOwner->getContainingWindow->if->owningWindow->setTemporaryLostComponent->setNativeFocusOwner->fe->setSource->fe->getOppositeComponent->new->WeakReference<Component>->return->typeAheadAssertions->we->currentActiveWindow->getGlobalActiveWindow->if->break->if->e->getSource->break->setGlobalActiveWindow->if->getGlobalActiveWindow->break->we->setSource->return->typeAheadAssertions->if->repostIfFollowsKeyEvents->break->we->currentFocusedWindow->getGlobalFocusedWindow->losingFocusWindow->we->getWindow->activeWindow->getGlobalActiveWindow->oppositeWindow->we->getOppositeWindow->if->focusLog->isLoggable->focusLog->fine->if->break->if->break->currentFocusOwner->getGlobalFocusOwner->if->oppositeComp->if->oppositeWindow->getTemporaryLostComponent->if->oppositeWindow->getMostRecentFocusOwner->if->new->FocusEvent->sendMessage->setGlobalFocusedWindow->if->getGlobalFocusedWindow->restoreFocus->break->we->setSource->new->WeakReference<Window>->typeAheadAssertions->if->new->WindowEvent->sendMessage->if->getGlobalActiveWindow->restoreFocus->break->return->typeAheadAssertions->return->return
DefaultKeyboardFocusManager#dispatchKeyEvent(KeyEvent):::Called by dispatchEvent if no other KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or if no other KeyEventDispatchers are registered:::focusOwner->getFocusOwner->e->getComponent->if->focusOwner->isShowing->focusOwner->canBeFocusOwner->if->e->isConsumed->comp->e->getComponent->if->comp->isEnabled->redispatchEvent->stopPostProcessing->processors->getKeyEventPostProcessors->if->for->iter->processors->iterator->iter->hasNext->if->postProcessKeyEvent->source->e->getComponent->peer->if->target->source->getNativeContainer->if->if->peer->handleEvent->return
DefaultKeyboardFocusManager#postProcessKeyEvent(KeyEvent):::This method will be called by dispatchKeyEvent:::if->e->isConsumed->target->e->getComponent->p->target->getParent->if->p->postProcessKeyEvent->return
DefaultKeyboardFocusManager#pumpApprovedKeyEvents()::: default keyboard focus manager pump approved key events:::ke->do->synchronized->if->enqueuedKeyEvents->size->enqueuedKeyEvents->getFirst->if->typeAheadMarkers->size->marker->typeAheadMarkers->getFirst->if->ke->getWhen->if->if->focusLog->isLoggable->focusLog->finer->enqueuedKeyEvents->removeFirst->if->preDispatchKeyEvent->while
DefaultKeyboardFocusManager#dumpMarkers():::Dumps the list of type-ahead queue markers to stderr:::if->focusLog->isLoggable->focusLog->System->currentTimeMillis->finest->synchronized->if->typeAheadMarkers->size->iter->typeAheadMarkers->iterator->while->iter->hasNext->marker->iter->next->focusLog->finest
DefaultKeyboardFocusManager#typeAheadAssertions(Component, AWTEvent)::: default keyboard focus manager type ahead assertions:::pumpApprovedKeyEvents->switch->e->getID->ke->synchronized->if->typeAheadMarkers->size->marker->typeAheadMarkers->getFirst->if->ke->getWhen->if->focusLog->isLoggable->focusLog->finer->enqueuedKeyEvents->addLast->return->return->preDispatchKeyEvent->if->focusLog->isLoggable->focusLog->finest->dumpMarkers->synchronized->found->if->hasMarker->for->iter->typeAheadMarkers->iterator->iter->hasNext->else->if->focusLog->isLoggable->focusLog->finer->focusLog->finest->dumpMarkers->redispatchEvent->pumpApprovedKeyEvents->return->redispatchEvent->return
DefaultKeyboardFocusManager#hasMarker(Component):::Returns true if there are some marker associated with component comp in a markers' queue:::for->iter->typeAheadMarkers->iterator->iter->hasNext->return
DefaultKeyboardFocusManager#clearMarkers():::Clears markers queue:::synchronized->typeAheadMarkers->clear
DefaultKeyboardFocusManager#preDispatchKeyEvent(KeyEvent)::: default keyboard focus manager pre dispatch key event:::if->focusOwner->getFocusOwner->ke->getFocusedWindow->setSource->if->ke->getSource->return->EventQueue->setCurrentEventAndMostRecentTime->if->KeyboardFocusManager->isProxyActive->source->ke->getSource->target->source->getNativeContainer->if->peer->if->peer->handleEvent->ke->consume->return->dispatchers->getKeyEventDispatchers->if->for->iter->dispatchers->iterator->iter->hasNext->return->dispatchKeyEvent
DefaultKeyboardFocusManager#consumeNextKeyTyped(KeyEvent)::: default keyboard focus manager consume next key typed:::
DefaultKeyboardFocusManager#consumeTraversalKey(KeyEvent)::: default keyboard focus manager consume traversal key:::e->consume->e->getID->e->isActionKey
DefaultKeyboardFocusManager#consumeProcessedKeyEvent(KeyEvent)::: default keyboard focus manager consume processed key event:::if->e->getID->e->consume->return->return
DefaultKeyboardFocusManager#processKeyEvent(Component, KeyEvent):::This method initiates a focus traversal operation if and only if the KeyEvent represents a focus traversal key for the specified focusedComponent:::if->consumeProcessedKeyEvent->return->if->e->getID->return->if->focusedComponent->getFocusTraversalKeysEnabled->e->isConsumed->stroke->AWTKeyStroke->getAWTKeyStrokeForEvent->oppStroke->AWTKeyStroke->stroke->getKeyCode->stroke->getModifiers->stroke->isOnKeyRelease->getAWTKeyStroke->toTest->contains->containsOpp->focusedComponent->getFocusTraversalKeys->toTest->contains->toTest->contains->if->consumeTraversalKey->if->focusNextComponent->return->else->if->e->getID->focusedComponent->getFocusTraversalKeys->toTest->contains->toTest->contains->if->consumeTraversalKey->if->focusPreviousComponent->return->focusedComponent->getFocusTraversalKeys->toTest->contains->toTest->contains->if->consumeTraversalKey->if->upFocusCycle->return->if->isFocusCycleRoot->return->focusedComponent->getFocusTraversalKeys->toTest->contains->toTest->contains->if->consumeTraversalKey->if->downFocusCycle
DefaultKeyboardFocusManager#enqueueKeyEvents(long, Component):::Delays dispatching of KeyEvents until the specified Component becomes the focus owner:::if->return->if->focusLog->isLoggable->focusLog->finer->insertionIndex->i->typeAheadMarkers->size->iter->typeAheadMarkers->listIterator->for->typeAheadMarkers->new->TypeAheadMarker->add
DefaultKeyboardFocusManager#dequeueKeyEvents(long, Component):::Releases for normal dispatching to the current focus owner all KeyEvents which were enqueued because of a call to enqueueKeyEvents with the same timestamp and Component:::if->return->if->focusLog->isLoggable->focusLog->finer->marker->iter->typeAheadMarkers->typeAheadMarkers->size->listIterator->if->while->iter->hasNext->iter->next->if->iter->remove->return->else->while->iter->hasPrevious->iter->previous->if->iter->remove->return
DefaultKeyboardFocusManager#discardKeyEvents(Component):::Discards all KeyEvents which were enqueued because of one or more calls to enqueueKeyEvents with the specified Component, or one of its descendants.:::if->return->start->for->iter->typeAheadMarkers->iterator->iter->hasNext->purgeStampedEvents
DefaultKeyboardFocusManager#purgeStampedEvents(long, long)::: default keyboard focus manager purge stamped events:::if->return->for->iter->enqueuedKeyEvents->iterator->iter->hasNext
DefaultKeyboardFocusManager#focusPreviousComponent(Component):::Focuses the Component before aComponent, typically based on a FocusTraversalPolicy.:::if->aComponent->transferFocusBackward
DefaultKeyboardFocusManager#focusNextComponent(Component):::Focuses the Component after aComponent, typically based on a FocusTraversalPolicy.:::if->aComponent->transferFocus
DefaultKeyboardFocusManager#upFocusCycle(Component):::Moves the focus up one focus traversal cycle:::if->aComponent->transferFocusUpCycle
DefaultKeyboardFocusManager#downFocusCycle(Container):::Moves the focus down one focus traversal cycle:::if->aContainer->isFocusCycleRoot->aContainer->transferFocusDownCycle
Desktop#checkEventsProcessingPermission()::: desktop check events processing permission:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission
Desktop#getDesktop():::Returns the Desktop instance of the current desktop context:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->if->Desktop->isDesktopSupported->throw->new->UnsupportedOperationException->context->getAppContext->desktop->context->get->if->new->Desktop->context->put->return
Desktop#isDesktopSupported():::Tests whether this class is supported on the current platform:::defaultToolkit->Toolkit->getDefaultToolkit->if->return->isDesktopSupported->return
Desktop#isSupported(Action):::Tests whether an action is supported on the current platform:::return->peer->isSupported
Desktop#checkFileValidation(File):::Checks if the file is a valid file and readable.:::if->file->exists->throw->file->getPath->new->IllegalArgumentException
Desktop#checkActionSupport(Action):::Checks if the action type is supported.:::if->isSupported->throw->actionType->name->new->UnsupportedOperationException
Desktop#checkAWTPermission():::Calls to the security manager's checkPermission method with an AWTPermission("showWindowWithoutWarningBanner") permission:::sm->System->getSecurityManager->if->sm->new->AWTPermission->checkPermission
Desktop#open(File):::Launches the associated application to open the file:::file->getPath->new->File->checkAWTPermission->checkExec->checkActionSupport->checkFileValidation->peer->open
Desktop#edit(File):::Launches the associated editor application and opens a file for editing.:::file->getPath->new->File->checkAWTPermission->checkExec->checkActionSupport->file->canWrite->checkFileValidation->peer->edit
Desktop#print(File):::Prints a file with the native desktop printing facility, using the associated application's print command.:::file->getPath->new->File->checkExec->sm->System->getSecurityManager->if->sm->checkPrintJobAccess->checkActionSupport->checkFileValidation->peer->print
Desktop#browse(URI):::Launches the default browser to display a URI:::checkAWTPermission->checkExec->checkActionSupport->Objects->requireNonNull->peer->browse
Desktop#mail():::Launches the mail composing window of the user default mail client.:::checkAWTPermission->checkExec->checkActionSupport->mailtoURI->try->new->URI->peer->mail->catch->finally
Desktop#mail(URI):::Launches the mail composing window of the user default mail client, filling the message fields specified by a mailto: URI:::checkAWTPermission->checkExec->checkActionSupport->if->throw->new->NullPointerException->if->mailtoURI->getScheme->equalsIgnoreCase->throw->new->IllegalArgumentException->peer->mail
Desktop#checkExec()::: desktop check exec:::sm->System->getSecurityManager->if->sm->new->FilePermission->checkPermission
Desktop#checkRead()::: desktop check read:::sm->System->getSecurityManager->if->sm->new->FilePermission->checkPermission
Desktop#checkQuitPermission()::: desktop check quit permission:::sm->System->getSecurityManager->if->sm->checkExit
Desktop#addAppEventListener(SystemEventListener):::Adds sub-types of SystemEventListener to listen for notifications from the native system:::checkEventsProcessingPermission->peer->addAppEventListener
Desktop#removeAppEventListener(SystemEventListener):::Removes sub-types of SystemEventListener to listen for notifications from the native system:::checkEventsProcessingPermission->peer->removeAppEventListener
Desktop#setAboutHandler(AboutHandler):::Installs a handler to show a custom About window for your application:::checkEventsProcessingPermission->checkActionSupport->peer->setAboutHandler
Desktop#setPreferencesHandler(PreferencesHandler):::Installs a handler to show a custom Preferences window for your application:::checkEventsProcessingPermission->checkActionSupport->peer->setPreferencesHandler
Desktop#setOpenFileHandler(OpenFilesHandler):::Installs the handler which is notified when the application is asked to open a list of files.:::checkEventsProcessingPermission->checkExec->checkRead->checkActionSupport->peer->setOpenFileHandler
Desktop#setPrintFileHandler(PrintFilesHandler):::Installs the handler which is notified when the application is asked to print a list of files.:::checkEventsProcessingPermission->sm->System->getSecurityManager->if->sm->checkPrintJobAccess->checkActionSupport->peer->setPrintFileHandler
Desktop#setOpenURIHandler(OpenURIHandler):::Installs the handler which is notified when the application is asked to open a URL:::checkEventsProcessingPermission->checkExec->checkActionSupport->peer->setOpenURIHandler
Desktop#setQuitHandler(QuitHandler):::Installs the handler which determines if the application should quit:::checkEventsProcessingPermission->checkQuitPermission->checkActionSupport->peer->setQuitHandler
Desktop#setQuitStrategy(QuitStrategy):::Sets the default strategy used to quit this application:::checkEventsProcessingPermission->checkQuitPermission->checkActionSupport->peer->setQuitStrategy
Desktop#enableSuddenTermination():::Enables this application to be suddenly terminated:::checkEventsProcessingPermission->checkQuitPermission->checkActionSupport->peer->enableSuddenTermination
Desktop#disableSuddenTermination():::Prevents this application from being suddenly terminated:::checkEventsProcessingPermission->checkQuitPermission->checkActionSupport->peer->disableSuddenTermination
Desktop#requestForeground(boolean):::Requests this application to move to the foreground.:::checkEventsProcessingPermission->checkActionSupport->peer->requestForeground
Desktop#openHelpViewer():::Opens the native help viewer application.:::checkAWTPermission->checkExec->checkEventsProcessingPermission->checkActionSupport->peer->openHelpViewer
Desktop#setDefaultMenuBar(JMenuBar):::Sets the default menu bar to use when there are no active frames.:::checkEventsProcessingPermission->checkActionSupport->if->parent->menuBar->getParent->if->parent->remove->menuBar->updateUI->peer->setDefaultMenuBar
Desktop#browseFileDirectory(File):::Opens a folder containing the file and selects it in a default system file manager.:::file->getPath->new->File->checkAWTPermission->checkExec->checkActionSupport->checkFileValidation->parentFile->file->getParentFile->if->parentFile->exists->throw->new->IllegalArgumentException->peer->browseFileDirectory
Desktop#moveToTrash(File):::Moves the specified file to the trash.:::file->getPath->new->File->sm->System->getSecurityManager->if->sm->file->getPath->checkDelete->checkActionSupport->finalFile->AccessController->checkFileValidation->return->doPrivileged->return->peer->moveToTrash
Dialog#constructComponentName():::Construct a name for this component:::synchronized->return
Dialog#addNotify():::Makes this Dialog displayable by connecting it to a native screen resource:::synchronized->getTreeLock->if->parent->addNotify->if->getComponentFactory->createDialog->super->addNotify
Dialog#isModal():::Indicates whether the dialog is modal:::return->isModal_NoClientCode
Dialog#isModal_NoClientCode()::: dialog is modal_ no client code:::return
Dialog#setModal(boolean):::Specifies whether this dialog should be modal:::setModalityType
Dialog#getModalityType():::Returns the modality type of this dialog.:::return
Dialog#setModalityType(ModalityType):::Sets the modality type for this dialog:::if->if->Toolkit->getDefaultToolkit->isModalityTypeSupported->if->return->checkModalityPermission
Dialog#getTitle():::Gets the title of the dialog:::return
Dialog#setTitle(String):::Sets the title of the Dialog.:::oldTitle->synchronized->peer->if->peer->setTitle->firePropertyChange
Dialog#conditionalShow(Component, AtomicLong)::: dialog conditional show:::retval->closeSplashScreen->synchronized->getTreeLock->if->addNotify->validateUnconditionally->if->toFront->else->if->isModal->checkShouldBeBlocked->else->modalDialogs->add->modalShow->if->isFocusable->isEnabled->isModalBlocked->time->Toolkit->getEventQueue->getMostRecentKeyEventTime->set->KeyboardFocusManager->getCurrentKeyboardFocusManager->time->get->enqueueKeyEvents->mixOnShowing->peer->setVisible->if->isModalBlocked->modalBlocker->toFront->setLocationByPlatform->for->i->ownedWindowList->size->Window->updateChildFocusableWindowState->Toolkit->enabledOnToolkit->createHierarchyEvents->if->Toolkit->enabledOnToolkit->e->new->ComponentEvent->Toolkit->getEventQueue->postEvent->if->postWindowEvent->return
Dialog#setVisible(boolean):::Shows or hides this Dialog depending on the value of parameter b.:::super->setVisible
Dialog#show():::Makes the Dialog visible:::if->throw->new->IllegalStateException->if->isModal->conditionalShow->else->showAppContext->AppContext->getAppContext->time->new->AtomicLong->predictedFocusOwner->try->getMostRecentFocusOwner->if->conditionalShow->ModalEventFilter->createFilterForDialog->if->it->AppContext->getAppContexts->iterator->while->it->hasNext->appContext->it->next->if->continue->eventQueue->appContext->get->eventQueue->new->InvocationEvent->postEvent->edt->eventQueue->getDispatchThread->edt->addEventFilter->modalityPushed->try->eventQueue->AccessController->Toolkit->getDefaultToolkit->getSystemEventQueue->doPrivileged->eventQueue->createSecondaryLoop->if->secondaryLoop->enter->catch->finally->modalityPopped->if->it->AppContext->getAppContexts->iterator->while->it->hasNext->appContext->it->next->if->continue->eventQueue->appContext->get->edt->eventQueue->getDispatchThread->edt->removeEventFilter->catch->finally->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->time->get->dequeueKeyEvents
Dialog#modalityPushed()::: dialog modality pushed:::tk->Toolkit->getDefaultToolkit->if->stk->stk->notifyModalityPushed
Dialog#modalityPopped()::: dialog modality popped:::tk->Toolkit->getDefaultToolkit->if->stk->stk->notifyModalityPopped
Dialog#hideAndDisposePreHandler()::: dialog hide and dispose pre handler:::synchronized->getTreeLock->if->modalHide->if->modalFilter->disable->modalDialogs->remove
Dialog#hideAndDisposeHandler()::: dialog hide and dispose handler:::if->secondaryLoop->exit
Dialog#hide():::Hides the Dialog and then causes show to return if it is currently blocked.:::hideAndDisposePreHandler->super->hide->if->hideAndDisposeHandler
Dialog#doDispose():::Disposes the Dialog and then causes show() to return if it is currently blocked.:::super->doDispose->hideAndDisposeHandler
Dialog#toBack():::  If this dialog is modal and blocks some windows, then all of them are also sent to the back to keep them below the blocking dialog.:::super->toBack->if->synchronized->getTreeLock->foreach->w->toBack_NoClientCode
Dialog#isResizable():::Indicates whether this dialog is resizable by the user:::return
Dialog#setResizable(boolean):::Sets whether this dialog is resizable by the user.:::testvalid->synchronized->peer->if->peer->setResizable->if->invalidateIfValid
Dialog#setUndecorated(boolean):::Disables or enables decorations for this dialog:::synchronized->getTreeLock->if->isDisplayable->throw->new->IllegalComponentStateException->if->if->getOpacity->throw->new->IllegalComponentStateException->if->getShape->throw->new->IllegalComponentStateException->bg->getBackground->if->bg->getAlpha->throw->new->IllegalComponentStateException
Dialog#isUndecorated():::Indicates whether this dialog is undecorated:::return
Dialog#setOpacity(float)::: dialog set opacity:::synchronized->getTreeLock->if->isUndecorated->throw->new->IllegalComponentStateException->super->setOpacity
Dialog#setShape(Shape)::: dialog set shape:::synchronized->getTreeLock->if->isUndecorated->throw->new->IllegalComponentStateException->super->setShape
Dialog#setBackground(Color)::: dialog set background:::synchronized->getTreeLock->if->bgColor->getAlpha->isUndecorated->throw->new->IllegalComponentStateException->super->setBackground
Dialog#paramString():::Returns a string representing the state of this dialog:::str->super->paramString->if->return
Dialog#initIDs():::Initialize JNI field and method IDs:::
Dialog#modalShow()::: dialog modal show:::blockers->new->IdentityArrayList<Dialog>->foreach->if->d->shouldBlock->w->while->w->getOwner_NoClientCode->if->shouldBlock->modalityType->d->getModalityType->compareTo->blockers->add->for->i->blockers->size->if->blockers->size->blockers->get->blockWindow->blockersHierarchies->new->IdentityArrayList<Window>->k->while->blockersHierarchies->size->w->blockersHierarchies->get->ownedWindows->w->getOwnedWindows_NoClientCode->foreach->blockersHierarchies->add->toBlock->new->IdentityLinkedList<Window>->unblockedWindows->Window->getAllUnblockedWindows->foreach->if->shouldBlock->blockersHierarchies->contains->if->isModal_NoClientCode->wd->if->wd->shouldBlock->modalDialogs->indexOf->modalDialogs->indexOf->continue->toBlock->add->blockWindows->if->isModalBlocked->updateChildrenBlocking
Dialog#modalHide()::: dialog modal hide:::save->new->IdentityArrayList<Window>->blockedWindowsCount->blockedWindows->size->for->i->for->i
Dialog#shouldBlock(Window)::: dialog should block:::if->isVisible_NoClientCode->w->isVisible_NoClientCode->isModal_NoClientCode->return->if->return->blockerToCheck->while->c->while->c->getParent_NoClientCode->if->return->blockerToCheck->getModalBlocker->switch->return->if->w->isModalExcluded->c->while->c->getParent_NoClientCode->return->else->return->getDocumentRoot->w->getDocumentRoot->return->w->isModalExcluded->return->w->isModalExcluded->return
Dialog#blockWindow(Window)::: dialog block window:::if->w->isModalBlocked->w->setModalBlocked->blockedWindows->add
Dialog#blockWindows(java.util.List)::: dialog block windows:::dpeer->if->return->it->toBlock->iterator->while->it->hasNext->w->it->next->if->w->isModalBlocked->w->setModalBlocked->else->it->remove->dpeer->blockWindows->blockedWindows->addAll
Dialog#unblockWindow(Window)::: dialog unblock window:::if->w->isModalBlocked->blockedWindows->contains->blockedWindows->remove->w->setModalBlocked
Dialog#checkShouldBeBlocked(Window)::: dialog check should be blocked:::synchronized->w->getTreeLock->for->i->modalDialogs->size
Dialog#checkModalityPermission(ModalityType)::: dialog check modality permission:::if->sm->System->getSecurityManager->if->sm->checkPermission
Dialog#readObject(ObjectInputStream)::: dialog read object:::GraphicsEnvironment->checkHeadless->fields->s->readFields->localModalityType->fields->get->try->checkModalityPermission->catch->finally->if->fields->get->setModal->else->fields->get->fields->get->fields->get->new->IdentityArrayList<>->SunToolkit->checkAndSetPolicy
Dialog#getAccessibleContext():::Gets the AccessibleContext associated with this Dialog:::if->new->AccessibleAWTDialog->return
Dialog.AccessibleAWTDialog#getAccessibleRole():::Get the role of this object.:::return
Dialog.AccessibleAWTDialog#getAccessibleStateSet():::Get the state of this object.:::states->super->getAccessibleStateSet->if->getFocusOwner->states->add->if->isModal->states->add->if->isResizable->states->add->return
Dimension#initIDs():::Initialize JNI field and method IDs:::
Dimension#getWidth()::: dimension get width:::return
Dimension#getHeight()::: dimension get height:::return
Dimension#setSize(double, double):::Sets the size of this Dimension object to the specified width and height in double precision:::Math->ceil->Math->ceil
Dimension#getSize():::Gets the size of this Dimension object:::return->new->Dimension
Dimension#setSize(Dimension):::Sets the size of this Dimension object to the specified size:::setSize
Dimension#setSize(int, int):::Sets the size of this Dimension object to the specified width and height:::
Dimension#equals(Object):::Checks whether two dimension objects have equal values.:::if->d->return->return
Dimension#hashCode():::Returns the hash code for this Dimension.:::sum->return
Dimension#toString():::Returns a string representation of the values of this Dimension object's height and width fields:::return->getClass->getName
DisplayMode#getHeight():::Returns the height of the display, in pixels.:::return
DisplayMode#getWidth():::Returns the width of the display, in pixels.:::return
DisplayMode#getBitDepth():::Returns the bit depth of the display, in bits per pixel:::return
DisplayMode#getRefreshRate():::Returns the refresh rate of the display, in hertz:::return
DisplayMode#equals(DisplayMode):::Returns whether the two display modes are equal.:::if->return->return->getHeight->dm->getHeight->getWidth->dm->getWidth->getBitDepth->dm->getBitDepth->getRefreshRate->dm->getRefreshRate
DisplayMode#equals(Object)::: display mode equals:::if->return->equals->else->return
DisplayMode#hashCode()::: display mode hash code:::return->getWidth->getHeight->getBitDepth->getRefreshRate
DisplayMode#toString()::: display mode to string:::return->getWidth->getHeight->getBitDepth->getBitDepth->getRefreshRate->getRefreshRate
Event#initIDs():::Initialize JNI field and method IDs for fields that may be        accessed from C.:::
Event#translate(int, int):::NOTE: The Event class is obsolete and is available only for backwards compatibility:::
Event#shiftDown():::NOTE: The Event class is obsolete and is available only for backwards compatibility:::return
Event#controlDown():::NOTE: The Event class is obsolete and is available only for backwards compatibility:::return
Event#metaDown():::NOTE: The Event class is obsolete and is available only for backwards compatibility:::return
Event#consume():::NOTE: The Event class is obsolete and is available only for backwards compatibility:::switch->break
Event#isConsumed():::NOTE: The Event class is obsolete and is available only for backwards compatibility:::return
Event#getOldEventKey(KeyEvent)::: event get old event key:::keyCode->e->getKeyCode->for->i->return->e->getKeyChar
Event#getKeyEventChar()::: event get key event char:::for->i->return
Event#paramString():::NOTE: The Event class is obsolete and is available only for backwards compatibility:::str->if->if->shiftDown->if->controlDown->if->metaDown->if->if->return
Event#toString():::NOTE: The Event class is obsolete and is available only for backwards compatibility:::return->getClass->getName->paramString
EventDispatchThread#stopDispatching()::: event dispatch thread stop dispatching:::
EventDispatchThread#run()::: event dispatch thread run:::try->new->Conditional->pumpEvents->catch->finally->getEventQueue->detachDispatchThread
EventDispatchThread#pumpEvents(Conditional)::: event dispatch thread pump events:::pumpEvents
EventDispatchThread#pumpEventsForHierarchy(Conditional, Component)::: event dispatch thread pump events for hierarchy:::pumpEventsForHierarchy
EventDispatchThread#pumpEvents(int, Conditional)::: event dispatch thread pump events:::pumpEventsForHierarchy
EventDispatchThread#pumpEventsForHierarchy(int, Conditional, Component)::: event dispatch thread pump events for hierarchy:::new->HierarchyEventFilter->pumpEventsForFilter
EventDispatchThread#pumpEventsForFilter(Conditional, EventFilter)::: event dispatch thread pump events for filter:::pumpEventsForFilter
EventDispatchThread#pumpEventsForFilter(int, Conditional, EventFilter)::: event dispatch thread pump events for filter:::addEventFilter->while->isInterrupted->cond->evaluate->pumpOneEventForFilters->removeEventFilter
EventDispatchThread#addEventFilter(EventFilter)::: event dispatch thread add event filter:::if->eventLog->isLoggable->eventLog->finest->synchronized->if->eventFilters->contains->if->newFilter->k->for->eventFilters->size->eventFilters->add->else->eventFilters->add
EventDispatchThread#removeEventFilter(EventFilter)::: event dispatch thread remove event filter:::if->eventLog->isLoggable->eventLog->finest->synchronized->eventFilters->remove
EventDispatchThread#filterAndCheckEvent(AWTEvent)::: event dispatch thread filter and check event:::eventOK->synchronized->for->i->eventFilters->size->return->SunDragSourceContextPeer->checkEvent
EventDispatchThread#pumpOneEventForFilters(int)::: event dispatch thread pump one event for filters:::event->eventOK->try->eq->do->getEventQueue->eq->getNextEvent->eq->getNextEvent->filterAndCheckEvent->if->event->consume->while->if->eventLog->isLoggable->eventLog->finest->eq->dispatchEvent->catch->throw->processException->finally
EventDispatchThread#processException(Throwable)::: event dispatch thread process exception:::if->eventLog->isLoggable->eventLog->fine->getUncaughtExceptionHandler->uncaughtException
EventDispatchThread#getEventQueue()::: event dispatch thread get event queue:::return
EventDispatchThread#setEventQueue(EventQueue)::: event dispatch thread set event queue:::
EventDispatchThread.HierarchyEventFilter#acceptEvent(AWTEvent)::: hierarchy event filter accept event:::if->eventID->event->getID->mouseEvent->actionEvent->windowClosingEvent->if->Component->isInstanceOf->return->if->o->event->getSource->if->return->else->if->c->modalExcluded->if->while->if->isModalExcluded->break->c->getParent->if->return->return
EventFilter#acceptEvent(AWTEvent)::: event filter accept event:::
EventQueue#getEventLog()::: event queue get event log:::if->PlatformLogger->getLogger->return
EventQueue#postEvent(AWTEvent):::Posts a 1.1-style event to the EventQueue:::SunToolkit->flushPendingEvents->postEventPrivate
EventQueue#postEventPrivate(AWTEvent):::Posts a 1.1-style event to the EventQueue:::pushPopLock->lock->try->if->nextQueue->postEventPrivate->return->if->if->theEvent->getSource->AWTAutoShutdown->getInstance->return->else->initDispatchThread->getPriority->postEvent->catch->finally->pushPopLock->unlock
EventQueue#getPriority(AWTEvent)::: event queue get priority:::if->peerEvent->if->peerEvent->getFlags->return->if->peerEvent->getFlags->return->if->peerEvent->getFlags->return->id->theEvent->getID->if->return->return
EventQueue#postEvent(AWTEvent, int):::Posts the event to the internal Queue of specified priority, coalescing as appropriate.:::if->coalesceEvent->return->newItem->new->EventQueueItem->cacheEQItem->notifyID->theEvent->getID->if->shouldNotify->noEvents->if->if->theEvent->getSource->AWTAutoShutdown->getInstance->AWTAutoShutdown->getInstance->notifyThreadBusy->pushPopCond->signalAll->else->if->pushPopCond->signalAll->else->if->pushPopCond->signalAll
EventQueue#coalescePaintEvent(PaintEvent)::: event queue coalesce paint event:::sourcePeer->e->getSource->if->sourcePeer->coalescePaintEvent->cache->e->getSource->if->return->index->eventToCacheIndex->if->merged->mergePaintEvents->if->return->return
EventQueue#mergePaintEvents(PaintEvent, PaintEvent)::: event queue merge paint events:::aRect->a->getUpdateRect->bRect->b->getUpdateRect->if->bRect->contains->return->if->aRect->contains->return->return
EventQueue#coalesceMouseEvent(MouseEvent)::: event queue coalesce mouse event:::cache->e->getSource->if->return->index->eventToCacheIndex->if->return->return
EventQueue#coalescePeerEvent(PeerEvent)::: event queue coalesce peer event:::cache->e->getSource->if->return->index->eventToCacheIndex->if->e->coalesceEvents->if->return->else->return
EventQueue#coalesceOtherEvent(AWTEvent, int)::: event queue coalesce other event:::id->e->getID->source->e->getSource->for->entry->return
EventQueue#coalesceEvent(AWTEvent, int)::: event queue coalesce event:::if->e->getSource->return->if->return->coalescePeerEvent->if->e->getSource->isCoalescingEnabled->coalesceOtherEvent->return->if->return->coalescePaintEvent->if->return->coalesceMouseEvent->return
EventQueue#cacheEQItem(EventQueueItem)::: event queue cache item:::index->eventToCacheIndex->if->getSource->source->getSource->if->new->EventQueueItemArr
EventQueue#uncacheEQItem(EventQueueItem)::: event queue uncache item:::index->eventToCacheIndex->if->getSource->source->getSource->if->return
EventQueue#eventToCacheIndex(AWTEvent)::: event queue event to cache index:::switch->e->getID->return->return->return->return->return
EventQueue#noEvents():::Returns whether an event is pending on any of the separate Queues.:::for->i->return
EventQueue#getNextEvent():::Removes an event from the EventQueue and returns it:::do->SunToolkit->flushPendingEvents->pushPopLock->lock->try->event->getNextEventPrivate->if->return->AWTAutoShutdown->getInstance->notifyThreadFree->pushPopCond->await->catch->finally->pushPopLock->unlock->while
EventQueue#getNextEventPrivate()::: event queue get next event private:::for->i->return
EventQueue#getNextEvent(int)::: event queue get next event:::do->SunToolkit->flushPendingEvents->pushPopLock->lock->try->for->i->pushPopCond->await->catch->finally->pushPopLock->unlock->while
EventQueue#peekEvent():::Returns the first event on the EventQueue without removing it.:::pushPopLock->lock->try->for->i->catch->finally->pushPopLock->unlock->return
EventQueue#peekEvent(int):::Returns the first event with the specified id, if any.:::pushPopLock->lock->try->for->i->catch->finally->pushPopLock->unlock->return
EventQueue#dispatchEvent(AWTEvent):::Dispatches an event:::src->event->getSource->action->new->PrivilegedAction<Void>->stack->AccessController->getContext->srcAcc->getAccessControlContextFrom->eventAcc->event->getAccessControlContext->if->javaSecurityAccess->doIntersectionPrivilege->else->javaSecurityAccess->new->PrivilegedAction<Void>->doIntersectionPrivilege
EventQueue#getAccessControlContextFrom(Object)::: event queue get access control context from:::return->getAccessControlContext->getAccessControlContext->getAccessControlContext
EventQueue#dispatchEventImpl(AWTEvent, Object):::Called from dispatchEvent() under a correct AccessControlContext:::if->setCurrentEventAndMostRecentTimeImpl->dispatch->else->if->dispatchEvent->event->dispatched->else->if->dispatchEvent->else->if->dispatchEvent->else->if->if->noEvents->dispatchThread->stopDispatching->else->if->getEventLog->isLoggable->getEventLog->fine
EventQueue#getMostRecentEventTime():::Returns the timestamp of the most recent event that had a timestamp, and that was dispatched from the EventQueue associated with the calling thread:::return->Toolkit->getEventQueue->getMostRecentEventTimeImpl
EventQueue#getMostRecentEventTimeImpl()::: event queue get most recent event time impl:::pushPopLock->lock->try->return->Thread->currentThread->System->currentTimeMillis->catch->finally->pushPopLock->unlock
EventQueue#getMostRecentEventTimeEx()::: event queue get most recent event time ex:::pushPopLock->lock->try->return->catch->finally->pushPopLock->unlock
EventQueue#getCurrentEvent():::Returns the event currently being dispatched by the EventQueue associated with the calling thread:::return->Toolkit->getEventQueue->getCurrentEventImpl
EventQueue#getCurrentEventImpl()::: event queue get current event impl:::pushPopLock->lock->try->if->Thread->currentThread->return->currentEvent->get->return->catch->finally->pushPopLock->unlock
EventQueue#push(EventQueue):::Replaces the existing EventQueue with the specified one:::if->getEventLog->isLoggable->getEventLog->fine->pushPopLock->lock->try->topQueue->while->if->throw->new->RuntimeException->if->getEventQueue->setEventQueue->while->topQueue->peekEvent->try->newEventQueue->topQueue->getNextEventPrivate->postEventPrivate->catch->if->getEventLog->isLoggable->getEventLog->fine->finally->if->topQueue->new->InvocationEvent->postEventPrivate->if->appContext->get->appContext->put->pushPopCond->signalAll->catch->finally->pushPopLock->unlock
EventQueue#pop():::Stops dispatching events using this EventQueue:::if->getEventLog->isLoggable->getEventLog->fine->pushPopLock->lock->try->topQueue->while->prevQueue->if->throw->new->EmptyStackException->while->topQueue->peekEvent->try->prevQueue->topQueue->getNextEventPrivate->postEventPrivate->catch->if->getEventLog->isLoggable->getEventLog->fine->finally->if->getEventQueue->setEventQueue->if->appContext->get->appContext->put->topQueue->new->InvocationEvent->postEventPrivate->pushPopCond->signalAll->catch->finally->pushPopLock->unlock
EventQueue#createSecondaryLoop():::Creates a new secondary loop associated with this event queue:::return->createSecondaryLoop
EventQueue.FwSecondaryLoopWrapper#enter()::: fw secondary loop wrapper enter:::if->dispatchThread->addEventFilter->return->loop->enter
EventQueue.FwSecondaryLoopWrapper#exit()::: fw secondary loop wrapper exit:::if->dispatchThread->removeEventFilter->return->loop->exit
EventQueue#createSecondaryLoop(Conditional, EventFilter, long)::: event queue create secondary loop:::pushPopLock->lock->try->if->return->nextQueue->createSecondaryLoop->if->return->fwDispatcher->createSecondaryLoop->new->FwSecondaryLoopWrapper->if->initDispatchThread->return->new->WaitDispatchSupport->catch->finally->pushPopLock->unlock
EventQueue#isDispatchThread():::Returns true if the calling thread is Toolkit#getSystemEventQueue the current AWT EventQueue's dispatch thread:::eq->Toolkit->getEventQueue->return->eq->isDispatchThreadImpl
EventQueue#isDispatchThreadImpl()::: event queue is dispatch thread impl:::eq->pushPopLock->lock->try->next->while->if->return->isDispatchThread->return->Thread->currentThread->catch->finally->pushPopLock->unlock
EventQueue#initDispatchThread()::: event queue init dispatch thread:::pushPopLock->lock->try->if->threadGroup->isDestroyed->appContext->isDisposed->AccessController->new->PrivilegedAction<EventDispatchThread>->doPrivileged->dispatchThread->start->catch->finally->pushPopLock->unlock
EventQueue#detachDispatchThread(EventDispatchThread)::: event queue detach dispatch thread:::SunToolkit->flushPendingEvents->pushPopLock->lock->try->if->AWTAutoShutdown->getInstance->notifyThreadFree->if->peekEvent->initDispatchThread->catch->finally->pushPopLock->unlock
EventQueue#getDispatchThread()::: event queue get dispatch thread:::pushPopLock->lock->try->return->catch->finally->pushPopLock->unlock
EventQueue#removeSourceEvents(Object, boolean)::: event queue remove source events:::SunToolkit->flushPendingEvents->pushPopLock->lock->try->for->i->catch->finally->pushPopLock->unlock
EventQueue#getMostRecentKeyEventTime()::: event queue get most recent key event time:::pushPopLock->lock->try->return->catch->finally->pushPopLock->unlock
EventQueue#setCurrentEventAndMostRecentTime(AWTEvent)::: event queue set current event and most recent time:::Toolkit->getEventQueue->setCurrentEventAndMostRecentTimeImpl
EventQueue#setCurrentEventAndMostRecentTimeImpl(AWTEvent)::: event queue set current event and most recent time impl:::pushPopLock->lock->try->if->Thread->currentThread->return->new->WeakReference<>->mostRecentEventTime2->if->ie->ie->getWhen->if->ie->getWhen->else->if->ime->ime->getWhen->else->if->ae->ae->getWhen->else->if->ie->ie->getWhen->Math->max->catch->finally->pushPopLock->unlock
EventQueue#invokeLater(Runnable):::Causes runnable to have its run method called in the #isDispatchThread dispatch thread of Toolkit#getSystemEventQueue the system EventQueue:::Toolkit->getEventQueue->Toolkit->getDefaultToolkit->new->InvocationEvent->postEvent
EventQueue#invokeAndWait(Runnable):::Causes runnable to have its run method called in the #isDispatchThread dispatch thread of Toolkit#getSystemEventQueue the system EventQueue:::Toolkit->getDefaultToolkit->invokeAndWait
EventQueue#invokeAndWait(Object, Runnable)::: event queue invoke and wait:::if->EventQueue->isDispatchThread->throw->new->Error->lock->new->AWTInvocationLock->event->new->InvocationEvent->synchronized->Toolkit->getEventQueue->postEvent->while->event->isDispatched->lock->wait->eventThrowable->event->getThrowable->if->throw->new->InvocationTargetException
EventQueue#wakeup(boolean)::: event queue wakeup:::pushPopLock->lock->try->if->nextQueue->wakeup->else->if->pushPopCond->signalAll->else->if->initDispatchThread->catch->finally->pushPopLock->unlock
EventQueue#setFwDispatcher(FwDispatcher)::: event queue set fw dispatcher:::if->nextQueue->setFwDispatcher->else
FileDialog#initIDs():::Initialize JNI field and method IDs for fields that may be        accessed from C.:::
FileDialog#setTitle(String):::  Note: Some platforms may not support showing the user-specified title in a file dialog:::super->setTitle
FileDialog#constructComponentName():::Constructs a name for this component:::synchronized->return
FileDialog#addNotify():::Creates the file dialog's peer:::synchronized->getTreeLock->if->parent->addNotify->if->getComponentFactory->createFileDialog->super->addNotify
FileDialog#getMode():::Indicates whether this file dialog box is for loading from a file or for saving to a file.:::return
FileDialog#setMode(int):::Sets the mode of the file dialog:::switch->break->throw->new->IllegalArgumentException
FileDialog#getDirectory():::Gets the directory of this file dialog.:::return
FileDialog#setDirectory(String):::Sets the directory of this file dialog window to be the specified directory:::dir->equals->peer->if->peer->setDirectory
FileDialog#getFile():::Gets the selected file of this file dialog:::return
FileDialog#getFiles():::Returns files that the user selects:::synchronized->getObjectLock->if->return->files->clone->else->return->new->FileArr
FileDialog#setFiles(File[]):::Stores the names of all the files that the user selects:::synchronized->getObjectLock
FileDialog#setFile(String):::Sets the selected file for this file dialog window to be the specified file:::file->equals->peer->if->peer->setFile
FileDialog#setMultipleMode(boolean):::Enables or disables multiple file selection for the file dialog.:::synchronized->getObjectLock
FileDialog#isMultipleMode():::Returns whether the file dialog allows the multiple file selection.:::synchronized->getObjectLock->return
FileDialog#getFilenameFilter():::Determines this file dialog's filename filter:::return
FileDialog#setFilenameFilter(FilenameFilter):::Sets the filename filter for this file dialog window to the specified filter:::peer->if->peer->setFilenameFilter
FileDialog#readObject(ObjectInputStream):::Reads the ObjectInputStream and performs a backwards compatibility check by converting either a dir or a file equal to an empty string to null.:::s->defaultReadObject->if->dir->equals->if->file->equals
FileDialog#paramString():::Returns a string representing the state of this FileDialog window:::str->super->paramString->return
FileDialog#postsOldMouseEvents()::: file dialog posts old mouse events:::return
FlowLayout#getAlignment():::Gets the alignment for this layout:::return
FlowLayout#setAlignment(int):::Sets the alignment for this layout:::switch->break->break->break
FlowLayout#getHgap():::Gets the horizontal gap between components and between the components and the borders of the Container:::return
FlowLayout#setHgap(int):::Sets the horizontal gap between components and between the components and the borders of the Container.:::
FlowLayout#getVgap():::Gets the vertical gap between components and between the components and the borders of the Container.:::return
FlowLayout#setVgap(int):::Sets the vertical gap between components and between the components and the borders of the Container.:::
FlowLayout#setAlignOnBaseline(boolean):::Sets whether or not components should be vertically aligned along their baseline:::
FlowLayout#getAlignOnBaseline():::Returns true if components are to be vertically aligned along their baseline:::return
FlowLayout#addLayoutComponent(String, Component):::Adds the specified component to the layout:::
FlowLayout#removeLayoutComponent(Component):::Removes the specified component from the layout:::
FlowLayout#preferredLayoutSize(Container):::Returns the preferred dimensions for this layout given the visible components in the specified target container.:::synchronized->target->getTreeLock->dim->new->Dimension->nmembers->target->getComponentCount->firstVisibleComponent->useBaseline->getAlignOnBaseline->maxAscent->maxDescent->for->i->if->Math->max->insets->target->getInsets->return
FlowLayout#minimumLayoutSize(Container):::Returns the minimum dimensions needed to layout the visible components contained in the specified target container.:::synchronized->target->getTreeLock->useBaseline->getAlignOnBaseline->dim->new->Dimension->nmembers->target->getComponentCount->maxAscent->maxDescent->firstVisibleComponent->for->i->if->Math->max->insets->target->getInsets->return
FlowLayout#moveComponents(Container, int, int, int, int, int, int, boolean, boolean, int[], int[]):::Centers the elements in the specified row, if there is any slack.:::switch->break->break->break->break->break->maxAscent->nonbaselineHeight->baselineOffset->if->maxDescent->for->i->Math->max->for->i->return
FlowLayout#layoutContainer(Container):::Lays out the container:::synchronized->target->getTreeLock->insets->target->getInsets->maxwidth->nmembers->target->getComponentCount->x->y->rowh->start->ltr->target->getComponentOrientation->isLeftToRight->useBaseline->getAlignOnBaseline->ascent->descent->if->new->intArr->new->intArr->for->i->moveComponents
FlowLayout#readObject(ObjectInputStream):::Reads this object out of a serialization stream, handling objects written by older versions of the class that didn't contain all of the fields we use now..:::stream->defaultReadObject->if->setAlignment
FlowLayout#toString():::Returns a string representation of this FlowLayout object and its values.:::str->switch->break->break->break->break->break->return->getClass->getName
FocusTraversalPolicy#getComponentAfter(Container, Component):::Returns the Component that should receive the focus after aComponent:::
FocusTraversalPolicy#getComponentBefore(Container, Component):::Returns the Component that should receive the focus before aComponent:::
FocusTraversalPolicy#getFirstComponent(Container):::Returns the first Component in the traversal cycle:::
FocusTraversalPolicy#getLastComponent(Container):::Returns the last Component in the traversal cycle:::
FocusTraversalPolicy#getDefaultComponent(Container):::Returns the default Component to focus:::
FocusTraversalPolicy#getInitialComponent(Window):::Returns the Component that should receive the focus when a Window is made visible for the first time:::if->throw->new->IllegalArgumentException->def->getDefaultComponent->if->window->isFocusableWindow->return
Font.FontAccessImpl#getFont2D(Font)::: font access impl get font2 d:::return->font->getFont2D
Font.FontAccessImpl#setFont2D(Font, Font2DHandle)::: font access impl set font2 d:::
Font.FontAccessImpl#setCreatedFont(Font)::: font access impl set created font:::
Font.FontAccessImpl#isCreatedFont(Font)::: font access impl is created font:::return
Font.FontAccessImpl#getFontPeer(Font)::: font access impl get font peer:::return->font->getFontPeer
Font#getFontPeer():::Gets the peer of this Font.:::if->tk->Toolkit->getDefaultToolkit->if->getFontPeer->return
Font#getAttributeValues():::Return the AttributeValues object associated with this font:::if->valuesTmp->new->AttributeValues->valuesTmp->setFamily->valuesTmp->setSize->if->valuesTmp->setWeight->if->valuesTmp->setPosture->valuesTmp->defineAll->return
Font#getFont2D()::: font get font2 d:::fm->FontManagerFactory->getInstance->if->fm->usingPerAppContextComposites->isStdComposite->return->fm->findFont2D->else->if->fm->findFont2D->return
Font#initFromValues(AttributeValues):::Initialize the standard Font fields from the values object.:::values->defineAll->values->getFamily->values->getSize->values->getSize->if->values->getWeight->if->values->getPosture->values->anyNonDefault->values->anyNonDefault
Font#textRequiresLayout(char[], int, int):::Returns true if any part of the specified text is from a complex script for which the implementation will need to invoke layout processing in order to render correctly when using Graphics#drawString(String,int,int) drawString(String,int,int) and other text rendering methods:::if->throw->new->NullPointerException->if->throw->new->ArrayIndexOutOfBoundsException->return->FontUtilities->isComplexScript
Font#getFont(Map):::Returns a Font appropriate to the attributes:::if->getValues->values->getValues->if->values->isNonDefault->font->values->getFont->if->values->anyDefined->return->font->getAttributeValues->clone->values->merge->return->new->Font->return->new->Font->font->attributes->get->if->if->attributes->size->values->font->getAttributeValues->clone->values->merge->return->new->Font->return->return->new->Font
Font#hasTempPermission():::Used with the byte count tracker for fonts created from streams:::if->System->getSecurityManager->return->f->hasPerm->try->Files->createTempFile->toFile->f->delete->catch->finally->return
Font#createFonts(InputStream):::Returns a new array of Font decoded from the specified stream:::fontFormat->if->hasTempPermission->return->createFont0->tracker->CreatedFontTracker->getTracker->acquired->try->tracker->acquirePermit->if->throw->new->IOException->return->createFont0->catch->throw->new->IOException->finally->if->tracker->releasePermit
Font#createFonts(File):::Returns a new array of Font decoded from the specified file:::fontFormat->checkFontFile->fm->FontManagerFactory->getInstance->font2DArr->fm->createFont2D->num->fonts->new->FontArr->for->i->return
Font#createFont(int, InputStream):::Returns a new Font using the specified font type and input data:::if->hasTempPermission->return->createFont0->tracker->CreatedFontTracker->getTracker->acquired->try->tracker->acquirePermit->if->throw->new->IOException->return->createFont0->catch->throw->new->IOException->finally->if->tracker->releasePermit
Font#createFont0(int, InputStream, boolean, CreatedFontTracker)::: font create font0:::if->throw->new->IllegalArgumentException->copiedFontData->try->tFile->AccessController->new->PrivilegedExceptionAction<File>->doPrivileged->if->tracker->add->totalSize->try->outStream->AccessController->new->PrivilegedExceptionAction<OutputStream>->doPrivileged->if->tracker->set->try->buf->new->byteArr->for->catch->finally->outStream->close->fm->FontManagerFactory->getInstance->font2DArr->fm->createFont2D->num->fonts->new->FontArr->for->i->return->catch->finally->if->tracker->remove->if->if->tracker->subBytes->AccessController->new->PrivilegedExceptionAction<Void>->doPrivileged->catch->if->throw->if->throw->cause->t->getCause->if->throw->throw->new->IOException->finally
Font#createFont(int, File):::Returns a new Font using the specified font type and the specified font file:::checkFontFile->return->new->Font
Font#checkFontFile(int, File)::: font check font file:::fontFile->getPath->new->File->if->throw->new->IllegalArgumentException->sm->System->getSecurityManager->if->filePermission->fontFile->getPath->new->FilePermission->sm->checkPermission->if->fontFile->canRead->throw->new->IOException->return
Font#getTransform():::Returns a copy of the transform associated with this Font:::if->values->getAttributeValues->at->values->isNonDefault->values->getTransform->new->AffineTransform->new->AffineTransform->if->values->getSuperscript->superscript->values->getSuperscript->trans->n->up->sign->ss->while->newn->scale->Math->pow->at->AffineTransform->getTranslateInstance->preConcatenate->at->scale->if->values->isNonDefault->at->values->getWidth->scale->return->return->new->AffineTransform
Font#getFamily():::Returns the family name of this Font:::return->getFamily_NoClientCode
Font#getFamily_NoClientCode()::: font get family_ no client code:::return->Locale->getDefault->getFamily
Font#getFamily(Locale):::Returns the family name of this Font, localized for the specified locale:::if->throw->new->NullPointerException->return->getFont2D->getFamilyName
Font#getPSName():::Returns the postscript name of this Font:::return->getFont2D->getPostscriptName
Font#getName():::Returns the logical name of this Font:::return
Font#getFontName():::Returns the font face name of this Font:::return->Locale->getDefault->getFontName
Font#getFontName(Locale):::Returns the font face name of the Font, localized for the specified locale:::if->throw->new->NullPointerException->return->getFont2D->getFontName
Font#getStyle():::Returns the style of this Font:::return
Font#getSize():::Returns the point size of this Font, rounded to an integer:::return
Font#getSize2D():::Returns the point size of this Font in float value.:::return
Font#isPlain():::Indicates whether or not this Font object's style is PLAIN.:::return
Font#isBold():::Indicates whether or not this Font object's style is BOLD.:::return
Font#isItalic():::Indicates whether or not this Font object's style is ITALIC.:::return
Font#isTransformed():::Indicates whether or not this Font object has a transform that affects its size in addition to the Size attribute.:::return
Font#hasLayoutAttributes():::Return true if this Font contains attributes that require extra layout processing.:::return
Font#getFont(String):::Returns a Font object from the system properties list:::return->getFont
Font#decode(String):::Returns the Font that the str argument describes:::fontName->styleName->fontSize->fontStyle->if->return->new->Font->lastHyphen->str->lastIndexOf->lastSpace->str->lastIndexOf->sepChar->sizeIndex->str->lastIndexOf->styleIndex->str->lastIndexOf->strlen->str->length->if->try->Integer->str->substring->valueOf->intValue->if->catch->if->str->charAt->finally->if->str->substring->styleName->toLowerCase->if->styleName->equals->else->if->styleName->equals->else->if->styleName->equals->else->if->styleName->equals->else->if->str->charAt->str->substring->else->fontEnd->if->else->if->if->str->charAt->str->substring->return->new->Font
Font#getFont(String, Font):::Gets the specified Font from the system properties list:::str->try->System->getProperty->catch->finally->if->return->return->decode
Font#hashCode():::Returns a hashcode for this Font.:::if->name->hashCode->if->values->getTransform->values->getTransform->hashCode->return
Font#equals(Object):::Compares this Font object to the specified Object.:::if->return->if->font->if->name->equals->if->if->return->else->return->getAttributeValues->equals->else->return->values->font->getAttributeValues->equals->return
Font#toString()::: font to string:::strStyle->if->isBold->isItalic->else->isItalic->return->getClass->getName->getFamily
Font#writeObject(java.io.ObjectOutputStream):::Writes default serializable fields to a stream.:::if->synchronized->values->toSerializableHashtable->s->defaultWriteObject->else->s->defaultWriteObject
Font#readObject(java.io.ObjectInputStream):::Reads the ObjectInputStream:::s->defaultReadObject->if->if->try->getAttributeValues->extras->AttributeValues->fromSerializableHashtable->if->AttributeValues->is16Hashtable->extras->unsetDefault->getAttributeValues->merge->values->anyNonDefault->values->anyNonDefault->catch->throw->new->IOException->finally
Font#getNumGlyphs():::Returns the number of glyphs in this Font:::return->getFont2D->getNumGlyphs
Font#getMissingGlyphCode():::Returns the glyphCode which is used when this Font does not have a glyph for a specified unicode code point.:::return->getFont2D->getMissingGlyphCode
Font#getBaselineFor(char):::Returns the baseline appropriate for displaying this character:::return->getFont2D->getBaselineFor
Font#getAttributes():::Returns a map of font attributes available in this Font:::return->getAttributeValues->new->AttributeMap
Font#getAvailableAttributes():::Returns the keys of all the attributes supported by this Font:::attributes->return
Font#deriveFont(int, float):::Creates a new Font object by replicating this Font object and applying a new style and size.:::if->return->new->Font->newValues->getAttributeValues->clone->oldStyle->applyStyle->newValues->setSize->return->new->Font
Font#deriveFont(int, AffineTransform):::Creates a new Font object by replicating this Font object and applying a new style and transform.:::newValues->getAttributeValues->clone->oldStyle->applyStyle->applyTransform->return->new->Font
Font#deriveFont(float):::Creates a new Font object by replicating the current Font object and applying a new size to it.:::if->return->new->Font->newValues->getAttributeValues->clone->newValues->setSize->return->new->Font
Font#deriveFont(AffineTransform):::Creates a new Font object by replicating the current Font object and applying a new transform to it.:::newValues->getAttributeValues->clone->applyTransform->return->new->Font
Font#deriveFont(int):::Creates a new Font object by replicating the current Font object and applying a new style to it.:::if->return->new->Font->newValues->getAttributeValues->clone->oldStyle->applyStyle->return->new->Font
Font#deriveFont(Map):::Creates a new Font object by replicating the current Font object and applying a new set of font attributes to it.:::if->return->newValues->getAttributeValues->clone->newValues->merge->return->new->Font
Font#canDisplay(char):::Checks if this Font has a glyph for the specified character:::return->getFont2D->canDisplay
Font#canDisplay(int):::Checks if this Font has a glyph for the specified character.:::if->Character->isValidCodePoint->throw->Integer->toHexString->new->IllegalArgumentException->return->getFont2D->canDisplay
Font#canDisplayUpTo(String):::Indicates whether or not this Font can display a specified String:::font2d->getFont2D->len->str->length->for->i->return
Font#canDisplayUpTo(char[], int, int):::Indicates whether or not this Font can display the characters in the specified text starting at start and ending at limit:::font2d->getFont2D->for->i->return
Font#canDisplayUpTo(CharacterIterator, int, int):::Indicates whether or not this Font can display the text specified by the iter starting at start and ending at limit.:::font2d->getFont2D->c->iter->setIndex->for->i->iter->next->return
Font#getItalicAngle():::Returns the italic angle of this Font:::return->getItalicAngle
Font#getItalicAngle(FontRenderContext)::: font get italic angle:::aa->fm->if->else->frc->getAntiAliasingHint->frc->getFractionalMetricsHint->return->getFont2D->getItalicAngle
Font#hasUniformLineMetrics():::Checks whether or not this Font has uniform line metrics:::return
Font#defaultLineMetrics(FontRenderContext)::: font default line metrics:::flm->if->flmref->get->equals->metrics->new->floatArr->getFont2D->frc->getAntiAliasingHint->frc->getFractionalMetricsHint->getFontMetrics->ascent->descent->leading->ssOffset->if->values->getSuperscript->getTransform->getTranslateY->height->baselineIndex->baselineOffsets->strikethroughOffset->strikethroughThickness->underlineOffset->underlineThickness->italicAngle->getItalicAngle->if->isTransformed->ctx->values->getCharTransform->if->pt->new->Point2D.Float->pt->setLocation->ctx->deltaTransform->pt->setLocation->ctx->deltaTransform->pt->setLocation->ctx->deltaTransform->pt->setLocation->ctx->deltaTransform->cm->new->CoreMetrics->new->FontLineMetrics->new->SoftReference<FontLineMetrics>->return->flm->clone
Font#getLineMetrics(String, FontRenderContext):::Returns a LineMetrics object created with the specified String and FontRenderContext.:::flm->defaultLineMetrics->str->length->return
Font#getLineMetrics(String, int, int, FontRenderContext):::Returns a LineMetrics object created with the specified arguments.:::flm->defaultLineMetrics->numChars->return
Font#getLineMetrics(char[], int, int, FontRenderContext):::Returns a LineMetrics object created with the specified arguments.:::flm->defaultLineMetrics->numChars->return
Font#getLineMetrics(CharacterIterator, int, int, FontRenderContext):::Returns a LineMetrics object created with the specified arguments.:::flm->defaultLineMetrics->numChars->return
Font#getStringBounds(String, FontRenderContext):::Returns the logical bounds of the specified String in the specified FontRenderContext:::array->str->toCharArray->return->getStringBounds
Font#getStringBounds(String, int, int, FontRenderContext):::Returns the logical bounds of the specified String in the specified FontRenderContext:::substr->str->substring->return->getStringBounds
Font#getStringBounds(char[], int, int, FontRenderContext):::Returns the logical bounds of the specified array of characters in the specified FontRenderContext:::if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->simple->values->getKerning->values->getLigatures->values->getBaselineTransform->if->FontUtilities->isComplexText->if->metrics->FontDesignMetrics->getMetrics->return->metrics->getSimpleBounds->else->str->new->String->tl->new->TextLayout->return->tl->getAscent->tl->getAdvance->tl->getAscent->tl->getDescent->tl->getLeading->new->Rectangle2D.Float
Font#getStringBounds(CharacterIterator, int, int, FontRenderContext):::Returns the logical bounds of the characters indexed in the specified CharacterIterator in the specified FontRenderContext:::start->ci->getBeginIndex->end->ci->getEndIndex->if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->arr->new->charArr->ci->setIndex->for->idx->return->getStringBounds
Font#getMaxCharBounds(FontRenderContext):::Returns the bounds for the character with the maximum bounds as defined in the specified FontRenderContext:::metrics->new->floatArr->getFont2D->getFontMetrics->return->new->Rectangle2D.Float
Font#createGlyphVector(FontRenderContext, String):::Creates a java.awt.font.GlyphVector GlyphVector by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font:::return->new->StandardGlyphVector
Font#createGlyphVector(FontRenderContext, char[]):::Creates a java.awt.font.GlyphVector GlyphVector by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font:::return->new->StandardGlyphVector
Font#createGlyphVector(FontRenderContext, CharacterIterator):::Creates a java.awt.font.GlyphVector GlyphVector by mapping the specified characters to glyphs one-to-one based on the Unicode cmap in this Font:::return->new->StandardGlyphVector
Font#createGlyphVector(FontRenderContext, int[]):::Creates a java.awt.font.GlyphVector GlyphVector by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font:::return->new->StandardGlyphVector
Font#layoutGlyphVector(FontRenderContext, char[], int, int, int):::Returns a new GlyphVector object, performing full layout of the text if possible:::gl->GlyphLayout->get->gv->gl->layout->GlyphLayout->done->return
Font#applyTransform(AffineTransform, AttributeValues)::: font apply transform:::if->throw->new->IllegalArgumentException->values->setTransform
Font#applyStyle(int, AttributeValues)::: font apply style:::values->setWeight->values->setPosture
Font#initIDs()::: font init ds:::
FontMetrics#getFont():::Gets the Font described by this FontMetrics object.:::return
FontMetrics#getFontRenderContext():::Gets the FontRenderContext used by this FontMetrics object to measure text:::return
FontMetrics#getLeading():::Determines the standard leading of the Font described by this FontMetrics object:::return
FontMetrics#getAscent():::Determines the font ascent of the Font described by this FontMetrics object:::return->font->getSize
FontMetrics#getDescent():::Determines the font descent of the Font described by this FontMetrics object:::return
FontMetrics#getHeight():::Gets the standard height of a line of text in this font:::return->getLeading->getAscent->getDescent
FontMetrics#getMaxAscent():::Determines the maximum ascent of the Font described by this FontMetrics object:::return->getAscent
FontMetrics#getMaxDescent():::Determines the maximum descent of the Font described by this FontMetrics object:::return->getDescent
FontMetrics#getMaxDecent():::For backward compatibility only.:::return->getMaxDescent
FontMetrics#getMaxAdvance():::Gets the maximum advance width of any character in this Font:::return
FontMetrics#charWidth(int):::Returns the advance width of the specified character in this Font:::if->Character->isValidCodePoint->if->return->getWidths->else->buffer->new->charArr->len->Character->toChars->return->charsWidth
FontMetrics#charWidth(char):::Returns the advance width of the specified character in this Font:::if->return->getWidths->data->return->charsWidth
FontMetrics#stringWidth(String):::Returns the total advance width for showing the specified String in this Font:::len->str->length->data->new->charArr->str->getChars->return->charsWidth
FontMetrics#charsWidth(char[], int, int):::Returns the total advance width for showing the specified array of characters in this Font:::return->new->String->stringWidth
FontMetrics#bytesWidth(byte[], int, int):::Returns the total advance width for showing the specified array of bytes in this Font:::return->new->String->stringWidth
FontMetrics#getWidths():::Gets the advance widths of the first 256 characters in the Font:::widths->new->intArr->for->ch->return
FontMetrics#hasUniformLineMetrics():::Checks to see if the Font has uniform line metrics:::return->font->hasUniformLineMetrics
FontMetrics#getLineMetrics(String, Graphics):::Returns the LineMetrics object for the specified String in the specified Graphics context.:::return->font->myFRC->getLineMetrics
FontMetrics#getLineMetrics(String, int, int, Graphics):::Returns the LineMetrics object for the specified String in the specified Graphics context.:::return->font->myFRC->getLineMetrics
FontMetrics#getLineMetrics(char[], int, int, Graphics):::Returns the LineMetrics object for the specified character array in the specified Graphics context.:::return->font->myFRC->getLineMetrics
FontMetrics#getLineMetrics(CharacterIterator, int, int, Graphics):::Returns the LineMetrics object for the specified CharacterIterator in the specified Graphics context.:::return->font->myFRC->getLineMetrics
FontMetrics#getStringBounds(String, Graphics):::Returns the bounds of the specified String in the specified Graphics context:::return->font->myFRC->getStringBounds
FontMetrics#getStringBounds(String, int, int, Graphics):::Returns the bounds of the specified String in the specified Graphics context:::return->font->myFRC->getStringBounds
FontMetrics#getStringBounds(char[], int, int, Graphics):::Returns the bounds of the specified array of characters in the specified Graphics context:::return->font->myFRC->getStringBounds
FontMetrics#getStringBounds(CharacterIterator, int, int, Graphics):::Returns the bounds of the characters indexed in the specified CharacterIterator in the specified Graphics context:::return->font->myFRC->getStringBounds
FontMetrics#getMaxCharBounds(Graphics):::Returns the bounds for the character with the maximum bounds in the specified Graphics context.:::return->font->myFRC->getMaxCharBounds
FontMetrics#myFRC(Graphics)::: font metrics my c:::if->return->getFontRenderContext->return
FontMetrics#toString():::Returns a representation of this FontMetrics object's values as a String.:::return->getClass->getName->getFont->getAscent->getDescent->getHeight
FontMetrics#initIDs():::Initialize JNI field and method IDs:::
Frame#init(String, GraphicsConfiguration)::: frame init:::SunToolkit->checkAndSetPolicy
Frame#constructComponentName():::Construct a name for this component:::synchronized->return
Frame#addNotify():::Makes this Frame displayable by connecting it to a native screen resource:::synchronized->getTreeLock->if->getComponentFactory->createFrame->p->menuBar->if->menuBar->addNotify->p->setMenuBar->p->setMaximizedBounds->super->addNotify
Frame#getTitle():::Gets the title of the frame:::return
Frame#setTitle(String):::Sets the title for this frame to the specified string.:::oldTitle->if->synchronized->peer->if->peer->setTitle->firePropertyChange
Frame#getIconImage():::Returns the image to be displayed as the icon for this frame:::icons->if->if->icons->size->return->icons->get->return
Frame#setIconImage(Image)::: frame set icon image:::super->setIconImage
Frame#getMenuBar():::Gets the menu bar for this frame.:::return
Frame#setMenuBar(MenuBar):::Sets the menu bar for this frame to the specified menu bar.:::synchronized->getTreeLock->if->return->if->remove->if->remove->if->peer->if->menuBar->addNotify->invalidateIfValid->peer->setMenuBar
Frame#isResizable():::Indicates whether this frame is resizable by the user:::return
Frame#setResizable(boolean):::Sets whether this frame is resizable by the user.:::oldResizable->testvalid->synchronized->peer->if->peer->setResizable->if->invalidateIfValid->firePropertyChange
Frame#setState(int):::Sets the state of this frame (obsolete):::current->getExtendedState->if->setExtendedState->else->if->setExtendedState
Frame#setExtendedState(int):::Sets the state of this frame:::if->isFrameStateSupported->return->synchronized->getObjectLock->peer->if->peer->setState
Frame#isFrameStateSupported(int)::: frame is frame state supported:::if->getToolkit->isFrameStateSupported->if->getToolkit->isFrameStateSupported->return->else->return->getToolkit->isFrameStateSupported->return
Frame#getState():::Gets the state of this frame (obsolete):::return->getExtendedState
Frame#getExtendedState():::Gets the state of this frame:::synchronized->getObjectLock->return
Frame#setMaximizedBounds(Rectangle):::Sets the maximized bounds for this frame:::synchronized->getObjectLock->peer->if->peer->setMaximizedBounds
Frame#getMaximizedBounds():::Gets maximized bounds for this frame:::synchronized->getObjectLock->return
Frame#setUndecorated(boolean):::Disables or enables decorations for this frame:::synchronized->getTreeLock->if->isDisplayable->throw->new->IllegalComponentStateException->if->if->getOpacity->throw->new->IllegalComponentStateException->if->getShape->throw->new->IllegalComponentStateException->bg->getBackground->if->bg->getAlpha->throw->new->IllegalComponentStateException
Frame#isUndecorated():::Indicates whether this frame is undecorated:::return
Frame#setOpacity(float)::: frame set opacity:::synchronized->getTreeLock->if->isUndecorated->throw->new->IllegalComponentStateException->super->setOpacity
Frame#setShape(Shape)::: frame set shape:::synchronized->getTreeLock->if->isUndecorated->throw->new->IllegalComponentStateException->super->setShape
Frame#setBackground(Color)::: frame set background:::synchronized->getTreeLock->if->bgColor->getAlpha->isUndecorated->throw->new->IllegalComponentStateException->super->setBackground
Frame#remove(MenuComponent):::Removes the specified menu bar from this frame.:::if->return->synchronized->getTreeLock->if->peer->if->invalidateIfValid->peer->setMenuBar->m->removeNotify->else->super->remove
Frame#removeNotify():::Makes this Frame undisplayable by removing its connection to its native screen resource:::synchronized->getTreeLock->peer->if->getState->if->peer->setMenuBar->menuBar->removeNotify->super->removeNotify
Frame#postProcessKeyEvent(KeyEvent)::: frame post process key event:::if->menuBar->handleShortcut->e->consume->return->super->postProcessKeyEvent
Frame#paramString():::Returns a string representing the state of this Frame:::str->super->paramString->if->if->state->getExtendedState->if->else->if->if->else->if->else->if->return
Frame#setCursor(int):::Sets the cursor for this frame to the specified type.:::if->throw->new->IllegalArgumentException->Cursor->getPredefinedCursor->setCursor
Frame#getCursorType()::: frame get cursor type:::return->getCursor->getType
Frame#getFrames():::Returns an array of all Frames created by this application:::allWindows->Window->getWindows->frameCount->foreach->if->frames->new->FrameArr->c->foreach->if->return
Frame#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::s->defaultWriteObject->if->icons->size->icon1->icons->get->if->s->writeObject->return->s->writeObject
Frame#readObject(ObjectInputStream):::Reads the ObjectInputStream:::s->defaultReadObject->try->icon->s->readObject->if->new->ArrayList<Image>->icons->add->catch->if->throw->finally->if->if->for->i->ownedWindows->size
Frame#initIDs():::Initialize JNI field and method IDs:::
Frame#getAccessibleContext():::Gets the AccessibleContext associated with this Frame:::if->new->AccessibleAWTFrame->return
Frame.AccessibleAWTFrame#getAccessibleRole():::Get the role of this object.:::return
Frame.AccessibleAWTFrame#getAccessibleStateSet():::Get the state of this object.:::states->super->getAccessibleStateSet->if->getFocusOwner->states->add->if->isResizable->states->add->return
GradientPaint#getPoint1():::Returns a copy of the point P1 that anchors the first color.:::return->new->Point2D.Float
GradientPaint#getColor1():::Returns the color C1 anchored by the point P1.:::return
GradientPaint#getPoint2():::Returns a copy of the point P2 which anchors the second color.:::return->new->Point2D.Float
GradientPaint#getColor2():::Returns the color C2 anchored by the point P2.:::return
GradientPaint#isCyclic():::Returns true if the gradient cycles repeatedly between the two colors C1 and C2.:::return
GradientPaint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints):::Creates and returns a PaintContext used to generate a linear color gradient pattern:::return->new->GradientPaintContext
GradientPaint#getTransparency():::Returns the transparency mode for this GradientPaint.:::a1->color1->getAlpha->a2->color2->getAlpha->return
GradientPaintContext#getCachedRaster(ColorModel, int, int)::: gradient paint context get cached raster:::if->if->ras->cached->get->if->ras->getWidth->ras->getHeight->return->return->cm->createCompatibleWritableRaster
GradientPaintContext#putCachedRaster(ColorModel, Raster)::: gradient paint context put cached raster:::if->cras->cached->get->if->cw->cras->getWidth->ch->cras->getHeight->iw->ras->getWidth->ih->ras->getHeight->if->return->if->return->new->WeakReference<>
GradientPaintContext#dispose():::Release the resources allocated for the operation.:::if->putCachedRaster
GradientPaintContext#getColorModel():::Return the ColorModel of the output.:::return
GradientPaintContext#getRaster(int, int, int, int):::Return a Raster containing the colors generated for the graphics operation.:::rowrel->rast->if->rast->getWidth->rast->getHeight->getCachedRaster->irast->off->irast->getDataOffset->adjust->irast->getScanlineStride->pixels->irast->getDataStorage->if->cycleFillRaster->else->clipFillRaster->irast->markDirty->return
GradientPaintContext#cycleFillRaster(int[], int, int, int, int, double, double, double)::: gradient paint context cycle fill raster:::irowrel->idx->idy->while->icolrel->for->j
GradientPaintContext#clipFillRaster(int[], int, int, int, int, double, double, double)::: gradient paint context clip fill raster:::while->colrel->j->if->rgb->do->while->while->if->rgb->do->while
Graphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::
Graphics#create(int, int, int, int):::Creates a new Graphics object based on this Graphics object, but with a new translation and clip area:::g->create->if->return->g->translate->g->clipRect->return
Graphics#translate(int, int):::Translates the origin of the graphics context to the point (x, y) in the current coordinate system:::
Graphics#getColor():::Gets this graphics context's current color.:::
Graphics#setColor(Color):::Sets this graphics context's current color to the specified color:::
Graphics#setPaintMode():::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color:::
Graphics#setXORMode(Color):::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color:::
Graphics#getFont():::Gets the current font.:::
Graphics#setFont(Font):::Sets this graphics context's font to the specified font:::
Graphics#getFontMetrics():::Gets the font metrics of the current font.:::return->getFont->getFontMetrics
Graphics#getFontMetrics(Font):::Gets the font metrics for the specified font.:::
Graphics#getClipBounds():::Returns the bounding rectangle of the current clipping area:::
Graphics#clipRect(int, int, int, int):::Intersects the current clip with the specified rectangle:::
Graphics#setClip(int, int, int, int):::Sets the current clip to the rectangle specified by the given coordinates:::
Graphics#getClip():::Gets the current clipping area:::
Graphics#setClip(Shape):::Sets the current clipping area to an arbitrary clip shape:::
Graphics#copyArea(int, int, int, int, int, int):::Copies an area of the component by a distance specified by dx and dy:::
Graphics#drawLine(int, int, int, int):::Draws a line, using the current color, between the points (x1, y1) and (x2, y2) in this graphics context's coordinate system.:::
Graphics#fillRect(int, int, int, int):::Fills the specified rectangle:::
Graphics#drawRect(int, int, int, int):::Draws the outline of the specified rectangle:::if->return->if->drawLine->else->drawLine->drawLine->drawLine->drawLine
Graphics#clearRect(int, int, int, int):::Clears the specified rectangle by filling it with the background color of the current drawing surface:::
Graphics#drawRoundRect(int, int, int, int, int, int):::Draws an outlined round-cornered rectangle using this graphics context's current color:::
Graphics#fillRoundRect(int, int, int, int, int, int):::Fills the specified rounded corner rectangle with the current color:::
Graphics#draw3DRect(int, int, int, int, boolean):::Draws a 3-D highlighted outline of the specified rectangle:::c->getColor->brighter->c->brighter->darker->c->darker->setColor->drawLine->drawLine->setColor->drawLine->drawLine->setColor
Graphics#fill3DRect(int, int, int, int, boolean):::Paints a 3-D highlighted rectangle filled with the current color:::c->getColor->brighter->c->brighter->darker->c->darker->if->setColor->fillRect->setColor->drawLine->drawLine->setColor->drawLine->drawLine->setColor
Graphics#drawOval(int, int, int, int):::Draws the outline of an oval:::
Graphics#fillOval(int, int, int, int):::Fills an oval bounded by the specified rectangle with the current color.:::
Graphics#drawArc(int, int, int, int, int, int):::Draws the outline of a circular or elliptical arc covering the specified rectangle:::
Graphics#fillArc(int, int, int, int, int, int):::Fills a circular or elliptical arc covering the specified rectangle:::
Graphics#drawPolyline(int[], int[], int):::Draws a sequence of connected lines defined by arrays of x and y coordinates:::
Graphics#drawPolygon(int[], int[], int):::Draws a closed polygon defined by arrays of x and y coordinates:::
Graphics#drawPolygon(Polygon):::Draws the outline of a polygon defined by the specified Polygon object.:::drawPolygon
Graphics#fillPolygon(int[], int[], int):::Fills a closed polygon defined by arrays of x and y coordinates:::
Graphics#fillPolygon(Polygon):::Fills the polygon defined by the specified Polygon object with the graphics context's current color:::fillPolygon
Graphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::
Graphics#drawString(AttributedCharacterIterator, int, int):::Renders the text of the specified iterator applying its attributes in accordance with the specification of the java.awt.font.TextAttribute TextAttribute class:::
Graphics#drawChars(char[], int, int, int, int):::Draws the text given by the specified character array, using this graphics context's current font and color:::new->String->drawString
Graphics#drawBytes(byte[], int, int, int, int):::Draws the text given by the specified byte array, using this graphics context's current font and color:::new->String->drawString
Graphics#drawImage(Image, int, int, ImageObserver):::Draws as much of the specified image as is currently available:::
Graphics#drawImage(Image, int, int, int, int, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::
Graphics#drawImage(Image, int, int, Color, ImageObserver):::Draws as much of the specified image as is currently available:::
Graphics#drawImage(Image, int, int, int, int, Color, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::
Graphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::
Graphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::
Graphics#dispose():::Disposes of this graphics context and releases any system resources that it is using:::
Graphics#finalize():::Disposes of this graphics context once it is no longer referenced.:::dispose
Graphics#toString():::Returns a String object representing this                        Graphics object's value.:::return->getClass->getName->getFont->getColor
Graphics#getClipRect():::Returns the bounding rectangle of the current clipping area.:::return->getClipBounds
Graphics#hitClip(int, int, int, int):::Returns true if the specified rectangular area might intersect the current clipping area:::clipRect->getClipBounds->if->return->return->clipRect->intersects
Graphics#getClipBounds(Rectangle):::Returns the bounding rectangle of the current clipping area:::clipRect->getClipBounds->if->else->if->throw->new->NullPointerException->return
Graphics2D#draw3DRect(int, int, int, int, boolean):::Draws a 3-D highlighted outline of the specified rectangle:::p->getPaint->c->getColor->brighter->c->brighter->darker->c->darker->setColor->fillRect->fillRect->setColor->fillRect->fillRect->setPaint
Graphics2D#fill3DRect(int, int, int, int, boolean):::Paints a 3-D highlighted rectangle filled with the current color:::p->getPaint->c->getColor->brighter->c->brighter->darker->c->darker->if->setColor->else->if->setColor->fillRect->setColor->fillRect->fillRect->setColor->fillRect->fillRect->setPaint
Graphics2D#draw(Shape):::Strokes the outline of a Shape using the settings of the current Graphics2D context:::
Graphics2D#drawImage(Image, AffineTransform, ImageObserver):::Renders an image, applying a transform from image space into user space before drawing:::
Graphics2D#drawImage(BufferedImage, BufferedImageOp, int, int):::Renders a BufferedImage that is filtered with a BufferedImageOp:::
Graphics2D#drawRenderedImage(RenderedImage, AffineTransform):::Renders a RenderedImage, applying a transform from image space into user space before drawing:::
Graphics2D#drawRenderableImage(RenderableImage, AffineTransform):::Renders a RenderableImage, applying a transform from image space into user space before drawing:::
Graphics2D#drawString(String, int, int):::Renders the text of the specified String, using the current text attribute state in the Graphics2D context:::
Graphics2D#drawString(String, float, float):::Renders the text specified by the specified String, using the current text attribute state in the Graphics2D context:::
Graphics2D#drawString(AttributedCharacterIterator, int, int):::Renders the text of the specified iterator applying its attributes in accordance with the specification of the TextAttribute class:::
Graphics2D#drawString(AttributedCharacterIterator, float, float):::Renders the text of the specified iterator applying its attributes in accordance with the specification of the TextAttribute class:::
Graphics2D#drawGlyphVector(GlyphVector, float, float):::Renders the text of the specified GlyphVector using the Graphics2D context's rendering attributes:::
Graphics2D#fill(Shape):::Fills the interior of a Shape using the settings of the Graphics2D context:::
Graphics2D#hit(Rectangle, Shape, boolean):::Checks whether or not the specified Shape intersects the specified Rectangle, which is in device space:::
Graphics2D#getDeviceConfiguration():::Returns the device configuration associated with this Graphics2D.:::
Graphics2D#setComposite(Composite):::Sets the Composite for the Graphics2D context:::
Graphics2D#setPaint(Paint):::Sets the Paint attribute for the Graphics2D context:::
Graphics2D#setStroke(Stroke):::Sets the Stroke for the Graphics2D context.:::
Graphics2D#setRenderingHint(Key, Object):::Sets the value of a single preference for the rendering algorithms:::
Graphics2D#getRenderingHint(Key):::Returns the value of a single preference for the rendering algorithms:::
Graphics2D#setRenderingHints(Map):::Replaces the values of all preferences for the rendering algorithms with the specified hints:::
Graphics2D#addRenderingHints(Map):::Sets the values of an arbitrary number of preferences for the rendering algorithms:::
Graphics2D#getRenderingHints():::Gets the preferences for the rendering algorithms:::
Graphics2D#translate(int, int):::Translates the origin of the Graphics2D context to the point (x, y) in the current coordinate system:::
Graphics2D#translate(double, double):::Concatenates the current Graphics2D Transform with a translation transform:::
Graphics2D#rotate(double):::Concatenates the current Graphics2D Transform with a rotation transform:::
Graphics2D#rotate(double, double, double):::Concatenates the current Graphics2D Transform with a translated rotation transform:::
Graphics2D#scale(double, double):::Concatenates the current Graphics2D Transform with a scaling transformation Subsequent rendering is resized according to the specified scaling factors relative to the previous scaling:::
Graphics2D#shear(double, double):::Concatenates the current Graphics2D Transform with a shearing transform:::
Graphics2D#transform(AffineTransform):::Composes an AffineTransform object with the Transform in this Graphics2D according to the rule last-specified-first-applied:::
Graphics2D#setTransform(AffineTransform):::Overwrites the Transform in the Graphics2D context:::
Graphics2D#getTransform():::Returns a copy of the current Transform in the Graphics2D context.:::
Graphics2D#getPaint():::Returns the current Paint of the Graphics2D context.:::
Graphics2D#getComposite():::Returns the current Composite in the Graphics2D context.:::
Graphics2D#setBackground(Color):::Sets the background color for the Graphics2D context:::
Graphics2D#getBackground():::Returns the background color used for clearing a region.:::
Graphics2D#getStroke():::Returns the current Stroke in the Graphics2D context.:::
Graphics2D#clip(Shape):::Intersects the current Clip with the interior of the specified Shape and sets the Clip to the resulting intersection:::
Graphics2D#getFontRenderContext()::: graphics2 d get font render context:::
GraphicsCallback.PaintCallback#run(Component, Graphics)::: paint callback run:::comp->paint
GraphicsCallback.PaintCallback#getInstance()::: paint callback get instance:::return
GraphicsCallback.PrintCallback#run(Component, Graphics)::: print callback run:::comp->print
GraphicsCallback.PrintCallback#getInstance()::: print callback get instance:::return
GraphicsCallback.PaintAllCallback#run(Component, Graphics)::: paint all callback run:::comp->paintAll
GraphicsCallback.PaintAllCallback#getInstance()::: paint all callback get instance:::return
GraphicsCallback.PrintAllCallback#run(Component, Graphics)::: print all callback run:::comp->printAll
GraphicsCallback.PrintAllCallback#getInstance()::: print all callback get instance:::return
GraphicsCallback.PeerPaintCallback#run(Component, Graphics)::: peer paint callback run:::comp->validate->if->comp->lightweightPaint->else->paint
GraphicsCallback.PeerPaintCallback#getInstance()::: peer paint callback get instance:::return
GraphicsCallback.PeerPrintCallback#run(Component, Graphics)::: peer print callback run:::comp->validate->if->comp->lightweightPrint->else->print
GraphicsCallback.PeerPrintCallback#getInstance()::: peer print callback get instance:::return
GraphicsCallback.PaintHeavyweightComponentsCallback#run(Component, Graphics)::: paint heavyweight components callback run:::if->comp->paintHeavyweightComponents->else->comp->paintAll
GraphicsCallback.PaintHeavyweightComponentsCallback#getInstance()::: paint heavyweight components callback get instance:::return
GraphicsCallback.PrintHeavyweightComponentsCallback#run(Component, Graphics)::: print heavyweight components callback run:::if->comp->printHeavyweightComponents->else->comp->printAll
GraphicsCallback.PrintHeavyweightComponentsCallback#getInstance()::: print heavyweight components callback get instance:::return
GraphicsConfigTemplate#getBestConfiguration(GraphicsConfiguration[]):::Returns the "best" configuration possible that passes the criteria defined in the GraphicsConfigTemplate.:::
GraphicsConfigTemplate#isGraphicsConfigSupported(GraphicsConfiguration):::Returns a boolean indicating whether or not the specified GraphicsConfiguration can be used to create a drawing surface that supports the indicated features.:::
GraphicsConfiguration#getDevice():::Returns the GraphicsDevice associated with this GraphicsConfiguration.:::
GraphicsConfiguration#createCompatibleImage(int, int):::Returns a BufferedImage with a data layout and color model compatible with this GraphicsConfiguration:::model->getColorModel->raster->model->createCompatibleWritableRaster->return->model->isAlphaPremultiplied->new->BufferedImage
GraphicsConfiguration#createCompatibleImage(int, int, int):::Returns a BufferedImage that supports the specified transparency and has a data layout and color model compatible with this GraphicsConfiguration:::if->getColorModel->getTransparency->return->createCompatibleImage->cm->getColorModel->if->throw->new->IllegalArgumentException->wr->cm->createCompatibleWritableRaster->return->cm->isAlphaPremultiplied->new->BufferedImage
GraphicsConfiguration#createCompatibleVolatileImage(int, int):::Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration:::vi->try->createCompatibleVolatileImage->catch->finally->return
GraphicsConfiguration#createCompatibleVolatileImage(int, int, int):::Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration:::vi->try->createCompatibleVolatileImage->catch->finally->return
GraphicsConfiguration#createCompatibleVolatileImage(int, int, ImageCapabilities):::Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration, using the specified image capabilities:::return->createCompatibleVolatileImage
GraphicsConfiguration#createCompatibleVolatileImage(int, int, ImageCapabilities, int):::Returns a VolatileImage with a data layout and color model compatible with this GraphicsConfiguration, using the specified image capabilities and transparency value:::vi->new->SunVolatileImage->if->caps->isAccelerated->vi->getCapabilities->isAccelerated->throw->new->AWTException->return
GraphicsConfiguration#getColorModel():::Returns the ColorModel associated with this GraphicsConfiguration.:::
GraphicsConfiguration#getColorModel(int):::Returns the ColorModel associated with this GraphicsConfiguration that supports the specified transparency.:::
GraphicsConfiguration#getDefaultTransform():::Returns the default AffineTransform for this GraphicsConfiguration:::
GraphicsConfiguration#getNormalizingTransform():::Returns an AffineTransform that can be concatenated with the default AffineTransform of a GraphicsConfiguration so that 72 units in user space equals 1 inch in device space:::
GraphicsConfiguration#getBounds():::Returns the bounds of the GraphicsConfiguration in the device coordinates:::
GraphicsConfiguration#getBufferCapabilities():::Returns the buffering capabilities of this GraphicsConfiguration.:::if->getImageCapabilities->new->DefaultBufferCapabilities->return
GraphicsConfiguration#getImageCapabilities():::Returns the image capabilities of this GraphicsConfiguration.:::if->new->ImageCapabilities->return
GraphicsConfiguration#isTranslucencyCapable():::Returns whether this GraphicsConfiguration supports the GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENT PERPIXEL_TRANSLUCENT kind of translucency.:::return
GraphicsDevice#getType():::Returns the type of this GraphicsDevice.:::
GraphicsDevice#getIDstring():::Returns the identification string associated with this GraphicsDevice:::
GraphicsDevice#getConfigurations():::Returns all of the GraphicsConfiguration objects associated with this GraphicsDevice.:::
GraphicsDevice#getDefaultConfiguration():::Returns the default GraphicsConfiguration associated with this GraphicsDevice.:::
GraphicsDevice#getBestConfiguration(GraphicsConfigTemplate):::Returns the "best" configuration possible that passes the criteria defined in the GraphicsConfigTemplate.:::configs->getConfigurations->return->gct->getBestConfiguration
GraphicsDevice#isFullScreenSupported():::Returns true if this GraphicsDevice supports full-screen exclusive mode:::return
GraphicsDevice#setFullScreenWindow(Window):::Enter full-screen mode, or return to windowed mode:::if->if->w->getShape->w->setShape->if->w->getOpacity->w->setOpacity->if->w->isOpaque->bgColor->w->getBackground->bgColor->getRed->bgColor->getGreen->bgColor->getBlue->new->Color->w->setBackground->gc->w->getGraphicsConfiguration->if->gc->getDevice->gc->getDevice->getFullScreenWindow->gc->getDevice->setFullScreenWindow->if->if->if->fullScreenWindow->setBounds->synchronized->if->else->AppContext->getAppContext->if->fullScreenWindow->getBounds->gc->getDefaultConfiguration->screenBounds->gc->getBounds->if->SunToolkit->isDispatchThreadForAppContext->fullScreenWindow->setGraphicsConfiguration->fullScreenWindow->setBounds->fullScreenWindow->setVisible->fullScreenWindow->toFront
GraphicsDevice#getFullScreenWindow():::Returns the Window object representing the full-screen window if the device is in full-screen mode.:::returnWindow->synchronized->if->AppContext->getAppContext->return
GraphicsDevice#isDisplayChangeSupported():::Returns true if this GraphicsDevice supports low-level display changes:::return
GraphicsDevice#setDisplayMode(DisplayMode):::Sets the display mode of this graphics device:::throw->new->UnsupportedOperationException
GraphicsDevice#getDisplayMode():::Returns the current display mode of this GraphicsDevice:::gc->getDefaultConfiguration->r->gc->getBounds->cm->gc->getColorModel->return->cm->getPixelSize->new->DisplayMode
GraphicsDevice#getDisplayModes():::Returns all display modes available for this GraphicsDevice:::return->new->DisplayModeArr->getDisplayMode
GraphicsDevice#getAvailableAcceleratedMemory():::This method returns the number of bytes available in accelerated memory on this device:::return
GraphicsDevice#isWindowTranslucencySupported(WindowTranslucency):::Returns whether the given level of translucency is supported by this graphics device.:::switch->return->isWindowShapingSupported->return->isWindowOpacitySupported->return->isWindowPerpixelTranslucencySupported->return
GraphicsDevice#isWindowShapingSupported():::Returns whether the windowing system supports changing the shape of top-level windows:::curToolkit->Toolkit->getDefaultToolkit->if->return->return->isWindowShapingSupported
GraphicsDevice#isWindowOpacitySupported():::Returns whether the windowing system supports changing the opacity value of top-level windows:::curToolkit->Toolkit->getDefaultToolkit->if->return->return->isWindowOpacitySupported
GraphicsDevice#isWindowPerpixelTranslucencySupported()::: graphics device is window perpixel translucency supported:::curToolkit->Toolkit->getDefaultToolkit->if->return->if->isWindowTranslucencySupported->return->return->getTranslucencyCapableGC
GraphicsDevice#getTranslucencyCapableGC()::: graphics device get translucency capable c:::defaultGC->getDefaultConfiguration->if->defaultGC->isTranslucencyCapable->return->configs->getConfigurations->for->j->return
GraphicsEnvironment.LocalGE#createGE():::Creates and returns the GraphicsEnvironment, according to the system property 'java.awt.graphicsenv'.:::ge->nm->AccessController->new->GetPropertyAction->doPrivileged->try->geCls->try->Class->forName->catch->cl->ClassLoader->getSystemClassLoader->Class->forName->finally->geCls->getConstructor->newInstance->if->isHeadless->new->HeadlessGraphicsEnvironment->catch->throw->new->Error->throw->new->Error->finally->return
GraphicsEnvironment#getLocalGraphicsEnvironment():::Returns the local GraphicsEnvironment.:::return
GraphicsEnvironment#isHeadless():::Tests whether or not a display, keyboard, and mouse can be supported in this environment:::return->getHeadlessProperty
GraphicsEnvironment#getHeadlessMessage()::: graphics environment get headless message:::if->getHeadlessProperty->return
GraphicsEnvironment#getHeadlessProperty()::: graphics environment get headless property:::if->AccessController->nm->System->getProperty->if->if->System->getProperty->else->osName->System->getProperty->if->osName->contains->System->getProperty->equals->else->display->System->getenv->equals->equals->equals->equals->equals->equals->display->trim->isEmpty->else->Boolean->valueOf->return->doPrivileged->return
GraphicsEnvironment#checkHeadless():::Check for headless state and throw HeadlessException if headless:::if->isHeadless->throw->new->HeadlessException
GraphicsEnvironment#isHeadlessInstance():::Returns whether or not a display, keyboard, and mouse can be supported in this graphics environment:::return->getHeadlessProperty
GraphicsEnvironment#getScreenDevices():::Returns an array of all of the screen GraphicsDevice objects.:::
GraphicsEnvironment#getDefaultScreenDevice():::Returns the default screen GraphicsDevice.:::
GraphicsEnvironment#createGraphics(BufferedImage):::Returns a Graphics2D object for rendering into the specified BufferedImage.:::
GraphicsEnvironment#getAllFonts():::Returns an array containing a one-point size instance of all fonts available in this GraphicsEnvironment:::
GraphicsEnvironment#getAvailableFontFamilyNames():::Returns an array containing the names of all font families in this GraphicsEnvironment localized for the default locale, as returned by Locale.getDefault():::
GraphicsEnvironment#getAvailableFontFamilyNames(Locale):::Returns an array containing the names of all font families in this GraphicsEnvironment localized for the specified locale:::
GraphicsEnvironment#registerFont(Font):::Registers a created Font in this GraphicsEnvironment:::if->throw->new->NullPointerException->fm->FontManagerFactory->getInstance->return->fm->registerFont
GraphicsEnvironment#preferLocaleFonts():::Indicates a preference for locale-specific fonts in the mapping of logical fonts to physical fonts:::fm->FontManagerFactory->getInstance->fm->preferLocaleFonts
GraphicsEnvironment#preferProportionalFonts():::Indicates a preference for proportional over non-proportional (e.g:::fm->FontManagerFactory->getInstance->fm->preferProportionalFonts
GraphicsEnvironment#getCenterPoint():::Returns the Point where Windows should be centered:::usableBounds->SunGraphicsEnvironment->getDefaultScreenDevice->getUsableBounds->return->new->Point
GraphicsEnvironment#getMaximumWindowBounds():::Returns the maximum bounds for centered Windows:::return->SunGraphicsEnvironment->getDefaultScreenDevice->getUsableBounds
GridBagConstraints#clone():::Creates a copy of this grid bag constraint.:::try->c->super->clone->insets->clone->return->catch->throw->new->InternalError->finally
GridBagConstraints#isVerticallyResizable()::: grid bag constraints is vertically resizable:::return
GridBagLayout#setConstraints(Component, GridBagConstraints):::Sets the constraints for the specified component in this layout.:::comptable->constraints->clone->put
GridBagLayout#getConstraints(Component):::Gets the constraints for the specified component:::constraints->comptable->get->if->setConstraints->comptable->get->return->constraints->clone
GridBagLayout#lookupConstraints(Component):::Retrieves the constraints for the specified component:::constraints->comptable->get->if->setConstraints->comptable->get->return
GridBagLayout#removeConstraints(Component):::Removes the constraints for the specified component in this layout:::comptable->remove
GridBagLayout#getLayoutOrigin():::Determines the origin of the layout area, in the graphics coordinate space of the target container:::origin->new->Point->if->return
GridBagLayout#getLayoutDimensions():::Determines column widths and row heights for the layout grid:::if->return->new->intArrs->dim->new->intArrs->new->intArr->new->intArr->System->arraycopy->System->arraycopy->return
GridBagLayout#getLayoutWeights():::Determines the weights of the layout grid's columns and rows:::if->return->new->doubleArrs->weights->new->doubleArrs->new->doubleArr->new->doubleArr->System->arraycopy->System->arraycopy->return
GridBagLayout#location(int, int):::Determines which cell in the layout grid contains the point specified by (x, y):::loc->new->Point->i->d->if->return->if->for->else->for->for->return
GridBagLayout#addLayoutComponent(String, Component):::Has no effect, since this layout manager does not use a per-component string.:::
GridBagLayout#addLayoutComponent(Component, Object):::Adds the specified component to the layout, using the specified constraints object:::if->setConstraints->else->if->throw->new->IllegalArgumentException
GridBagLayout#removeLayoutComponent(Component):::Removes the specified component from this layout:::removeConstraints
GridBagLayout#preferredLayoutSize(Container):::Determines the preferred size of the parent container using this grid bag layout:::info->getLayoutInfo->return->getMinSize
GridBagLayout#minimumLayoutSize(Container):::Determines the minimum size of the parent container using this grid bag layout:::info->getLayoutInfo->return->getMinSize
GridBagLayout#maximumLayoutSize(Container):::Returns the maximum dimensions for this layout given the components in the specified target container.:::return->new->Dimension
GridBagLayout#getLayoutAlignmentX(Container):::Returns the alignment along the x axis:::return
GridBagLayout#getLayoutAlignmentY(Container):::Returns the alignment along the y axis:::return
GridBagLayout#invalidateLayout(Container):::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.:::
GridBagLayout#layoutContainer(Container):::Lays out the specified container using this grid bag layout:::arrangeGrid
GridBagLayout#toString():::Returns a string representation of this grid bag layout's values.:::return->getClass->getName
GridBagLayout#getLayoutInfo(Container, int):::Fills in an instance of GridBagLayoutInfo for the current set of managed children:::return->GetLayoutInfo
GridBagLayout#preInitMaximumArraySizes(Container)::: grid bag layout pre init maximum array sizes:::components->parent->getComponents->comp->constraints->curX->curY->curWidth->curHeight->preMaximumArrayXIndex->preMaximumArrayYIndex->returnArray->new->longArr->for->compId->return
GridBagLayout#GetLayoutInfo(Container, int):::This method is obsolete and supplied for backwards compatibility only; new code should call #getLayoutInfo(java.awt.Container, int) getLayoutInfo instead:::synchronized->parent->getTreeLock->r->comp->constraints->d->components->parent->getComponents->layoutWidth->layoutHeight->xMaxArray->yMaxArray->compindex->i->k->px->py->pixels_diff->nextSize->curX->curY->curWidth->curHeight->curRow->curCol->weight_diff->weight->maximumArrayXIndex->maximumArrayYIndex->anchor->arraySizes->preInitMaximumArraySizes->if->Math->max->if->Math->max->new->intArr->new->intArr->hasBaseline->for->if->if->new->GridBagLayoutInfo->Arrays->fill->Arrays->fill->maxAscent->maxDescent->baselineType->if->new->intArr->new->intArr->new->shortArr->for->new->doubleArr->new->doubleArr->new->intArr->new->intArr->if->System->arraycopy->if->System->arraycopy->if->System->Math->min->arraycopy->if->System->Math->min->arraycopy->for->return
GridBagLayout#calculateBaseline(Component, GridBagConstraints, Dimension):::Calculate the baseline for the specified component:::anchor->if->w->h->c->getBaseline->if->baseline->c->getBaselineResizeBehavior->if->nextBaseline->c->getBaseline->if->if->else->if->return->else->return
GridBagLayout#adjustForGravity(GridBagConstraints, Rectangle):::Adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads:::AdjustForGravity
GridBagLayout#AdjustForGravity(GridBagConstraints, Rectangle):::Adjusts the x, y, width, and height fields to the correct values depending on the constraint geometry and pads:::diffx->diffy->cellY->cellHeight->if->else->if->if->switch->alignOnBaseline->break->if->alignOnBaseline->break->if->alignOnBaseline->break->alignAboveBaseline->break->if->alignAboveBaseline->break->if->alignAboveBaseline->break->alignBelowBaseline->break->if->alignBelowBaseline->break->if->alignBelowBaseline->break->break->break->break->break->break->break->break->break->break->if->break->if->break->if->break->if->break->if->break->if->break->throw->new->IllegalArgumentException
GridBagLayout#alignOnBaseline(GridBagConstraints, Rectangle, int, int):::Positions on the baseline.:::if->if->maxY->if->cons->isVerticallyResizable->else->else->baseline->ascent->if->layoutInfo->hasConstantDescent->else->if->fits->componentAdjusting->getBaseline->if->if->if->else->if->cons->isVerticallyResizable->ascent2->componentAdjusting->getBaseline->if->if->if->if->cons->isVerticallyResizable->switch->Math->max->break->upper->lower->delta->Math->min->if->break->break->break->else->centerVertically
GridBagLayout#alignAboveBaseline(GridBagConstraints, Rectangle, int, int):::Positions the specified component above the baseline:::if->layoutInfo->hasBaseline->maxY->if->layoutInfo->hasConstantDescent->else->if->cons->isVerticallyResizable->else->else->centerVertically
GridBagLayout#alignBelowBaseline(GridBagConstraints, Rectangle, int, int):::Positions below the baseline.:::if->layoutInfo->hasBaseline->if->layoutInfo->hasConstantDescent->else->if->cons->isVerticallyResizable->else->centerVertically
GridBagLayout#centerVertically(GridBagConstraints, Rectangle, int)::: grid bag layout center vertically:::if->cons->isVerticallyResizable->Math->max
GridBagLayout#getMinSize(Container, GridBagLayoutInfo):::Figures out the minimum size of the master based on the information from getLayoutInfo:::return->GetMinSize
GridBagLayout#GetMinSize(Container, GridBagLayoutInfo):::This method is obsolete and supplied for backwards compatibility only; new code should call #getMinSize(java.awt.Container, GridBagLayoutInfo) getMinSize instead:::d->new->Dimension->i->t->insets->parent->getInsets->for->for->return
GridBagLayout#arrangeGrid(Container):::Lays out the grid:::ArrangeGrid
GridBagLayout#ArrangeGrid(Container):::This method is obsolete and supplied for backwards compatibility only; new code should call #arrangeGrid(Container) arrangeGrid instead:::comp->compindex->constraints->insets->parent->getInsets->components->parent->getComponents->d->r->new->Rectangle->i->diffw->diffh->weight->info->parent->getComponentOrientation->isLeftToRight->if->return->getLayoutInfo->getMinSize->if->getLayoutInfo->getMinSize->if->for->if->for->else->if->for->if->for->else->for
GridBagLayoutInfo#hasConstantDescent(int):::Returns true if the specified row has any component aligned on the baseline with a baseline resize behavior of CONSTANT_DESCENT.:::return->ordinal
GridBagLayoutInfo#hasBaseline(int):::Returns true if there is a baseline for the specified row.:::return
GridLayout#getRows():::Gets the number of rows in this layout.:::return
GridLayout#setRows(int):::Sets the number of rows in this layout to the specified value.:::if->throw->new->IllegalArgumentException
GridLayout#getColumns():::Gets the number of columns in this layout.:::return
GridLayout#setColumns(int):::Sets the number of columns in this layout to the specified value:::if->throw->new->IllegalArgumentException
GridLayout#getHgap():::Gets the horizontal gap between components.:::return
GridLayout#setHgap(int):::Sets the horizontal gap between components to the specified value.:::
GridLayout#getVgap():::Gets the vertical gap between components.:::return
GridLayout#setVgap(int):::Sets the vertical gap between components to the specified value.:::
GridLayout#addLayoutComponent(String, Component):::Adds the specified component with the specified name to the layout.:::
GridLayout#removeLayoutComponent(Component):::Removes the specified component from the layout.:::
GridLayout#preferredLayoutSize(Container):::Determines the preferred size of the container argument using this grid layout:::synchronized->parent->getTreeLock->insets->parent->getInsets->ncomponents->parent->getComponentCount->nrows->ncols->if->else->w->h->for->i->return->new->Dimension
GridLayout#minimumLayoutSize(Container):::Determines the minimum size of the container argument using this grid layout:::synchronized->parent->getTreeLock->insets->parent->getInsets->ncomponents->parent->getComponentCount->nrows->ncols->if->else->w->h->for->i->return->new->Dimension
GridLayout#layoutContainer(Container):::Lays out the specified container using this layout:::synchronized->parent->getTreeLock->insets->parent->getInsets->ncomponents->parent->getComponentCount->nrows->ncols->ltr->parent->getComponentOrientation->isLeftToRight->if->return->if->else->totalGapsWidth->widthWOInsets->widthOnComponent->extraWidthAvailable->totalGapsHeight->heightWOInsets->heightOnComponent->extraHeightAvailable->if->for->c->x->else->for->c->x
GridLayout#toString():::Returns the string representation of this grid layout's values.:::return->getClass->getName
HeadlessException#getMessage():::Returns the detail message string of this HeadlessException:::superMessage->super->getMessage->headlessMessage->GraphicsEnvironment->getHeadlessMessage->if->return->else->if->return->else->return
Image#getWidth(ImageObserver):::Determines the width of the image:::
Image#getHeight(ImageObserver):::Determines the height of the image:::
Image#getSource():::Gets the object that produces the pixels for the image:::
Image#getGraphics():::Creates a graphics context for drawing to an off-screen image:::
Image#getProperty(String, ImageObserver):::Gets a property of this image by name:::
Image#getScaledInstance(int, int, int):::Creates a scaled version of this image:::filter->if->new->AreaAveragingScaleFilter->else->new->ReplicateScaleFilter->prod->getSource->new->FilteredImageSource->return->Toolkit->getDefaultToolkit->createImage
Image#flush():::Flushes all reconstructable resources being used by this Image object:::if->surfaceManager->flush
Image#getCapabilities(GraphicsConfiguration):::Returns an ImageCapabilities object which can be inquired as to the capabilities of this Image on the specified GraphicsConfiguration:::if->return->surfaceManager->getCapabilities->return
Image#setAccelerationPriority(float):::Sets a hint for this image about how important acceleration is:::if->throw->new->IllegalArgumentException->if->surfaceManager->setAccelerationPriority
Image#getAccelerationPriority():::Returns the current value of the acceleration priority hint.:::return
ImageCapabilities#isAccelerated():::Returns true if the object whose capabilities are encapsulated in this ImageCapabilities can be or is accelerated.:::return
ImageCapabilities#isTrueVolatile():::Returns true if the VolatileImage described by this ImageCapabilities can lose its surfaces.:::return
ImageCapabilities#clone()::: image capabilities clone:::try->return->super->clone->catch->throw->new->InternalError->finally
Insets#set(int, int, int, int):::Set top, left, bottom, and right to the specified values:::
Insets#equals(Object):::Checks whether two insets objects are equal:::if->insets->return->return
Insets#hashCode():::Returns the hash code for this Insets.:::sum1->sum2->val1->val2->sum3->return
Insets#toString():::Returns a string representation of this Insets object:::return->getClass->getName
Insets#clone():::Create a copy of this object.:::try->return->super->clone->catch->throw->new->InternalError->finally
Insets#initIDs():::Initialize JNI field and method IDs:::
ItemSelectable#getSelectedObjects():::Returns the selected items or null if no items are selected.:::
ItemSelectable#addItemListener(ItemListener):::Adds a listener to receive item events when the state of an item is changed by the user:::
ItemSelectable#removeItemListener(ItemListener):::Removes an item listener:::
JobAttributes#clone():::Creates and returns a copy of this JobAttributes.:::try->return->super->clone->catch->throw->new->InternalError->finally
JobAttributes#set(JobAttributes):::Sets all of the attributes of this JobAttributes to the same values as the attributes of obj.:::
JobAttributes#getCopies():::Returns the number of copies the application should render for jobs using these attributes:::return
JobAttributes#setCopies(int):::Specifies the number of copies the application should render for jobs using these attributes:::if->throw->new->IllegalArgumentException
JobAttributes#setCopiesToDefault():::Sets the number of copies the application should render for jobs using these attributes to the default:::setCopies
JobAttributes#getDefaultSelection():::Specifies whether, for jobs using these attributes, the application should print all pages, the range specified by the return value of getPageRanges, or the current selection:::return
JobAttributes#setDefaultSelection(DefaultSelectionType):::Specifies whether, for jobs using these attributes, the application should print all pages, the range specified by the return value of getPageRanges, or the current selection:::if->throw->new->IllegalArgumentException
JobAttributes#getDestination():::Specifies whether output will be to a printer or a file for jobs using these attributes:::return
JobAttributes#setDestination(DestinationType):::Specifies whether output will be to a printer or a file for jobs using these attributes:::if->throw->new->IllegalArgumentException
JobAttributes#getDialog():::Returns whether, for jobs using these attributes, the user should see a print dialog in which to modify the print settings, and which type of print dialog should be displayed:::return
JobAttributes#setDialog(DialogType):::Specifies whether, for jobs using these attributes, the user should see a print dialog in which to modify the print settings, and which type of print dialog should be displayed:::if->throw->new->IllegalArgumentException
JobAttributes#getFileName():::Specifies the file name for the output file for jobs using these attributes:::return
JobAttributes#setFileName(String):::Specifies the file name for the output file for jobs using these attributes:::
JobAttributes#getFromPage():::Returns, for jobs using these attributes, the first page to be printed, if a range of pages is to be printed:::if->return->else->if->return->getMinPage->else->if->return->else->return->getMinPage
JobAttributes#setFromPage(int):::Specifies, for jobs using these attributes, the first page to be printed, if a range of pages is to be printed:::if->throw->new->IllegalArgumentException
JobAttributes#getMaxPage():::Specifies the maximum value the user can specify as the last page to be printed for jobs using these attributes:::return
JobAttributes#setMaxPage(int):::Specifies the maximum value the user can specify as the last page to be printed for jobs using these attributes:::if->throw->new->IllegalArgumentException
JobAttributes#getMinPage():::Specifies the minimum value the user can specify as the first page to be printed for jobs using these attributes:::return
JobAttributes#setMinPage(int):::Specifies the minimum value the user can specify as the first page to be printed for jobs using these attributes:::if->throw->new->IllegalArgumentException
JobAttributes#getMultipleDocumentHandling():::Specifies the handling of multiple copies, including collation, for jobs using these attributes:::return
JobAttributes#setMultipleDocumentHandling(MultipleDocumentHandlingType):::Specifies the handling of multiple copies, including collation, for jobs using these attributes:::if->throw->new->IllegalArgumentException
JobAttributes#setMultipleDocumentHandlingToDefault():::Sets the handling of multiple copies, including collation, for jobs using these attributes to the default:::setMultipleDocumentHandling
JobAttributes#getPageRanges():::Specifies, for jobs using these attributes, the ranges of pages to be printed, if a range of pages is to be printed:::if->copy->new->intArrs->for->i->return->else->if->fromPage->getFromPage->toPage->getToPage->return->new->intArrs->new->intArr->else->minPage->getMinPage->return->new->intArrs->new->intArr
JobAttributes#setPageRanges(int[][]):::Specifies, for jobs using these attributes, the ranges of pages to be printed, if a range of pages is to be printed:::xcp->first->last->if->throw->new->IllegalArgumentException->for->i->if->throw->new->IllegalArgumentException->copy->new->intArrs->for->i
JobAttributes#getPrinter():::Returns the destination printer for jobs using these attributes:::return
JobAttributes#setPrinter(String):::Specifies the destination printer for jobs using these attributes:::
JobAttributes#getSides():::Returns how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes:::return
JobAttributes#setSides(SidesType):::Specifies how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes:::if->throw->new->IllegalArgumentException
JobAttributes#setSidesToDefault():::Sets how consecutive pages should be imposed upon the sides of the print medium for jobs using these attributes to the default:::setSides
JobAttributes#getToPage():::Returns, for jobs using these attributes, the last page (inclusive) to be printed, if a range of pages is to be printed:::if->return->else->if->return->else->if->return->else->return->getMinPage
JobAttributes#setToPage(int):::Specifies, for jobs using these attributes, the last page (inclusive) to be printed, if a range of pages is to be printed:::if->throw->new->IllegalArgumentException
JobAttributes#equals(Object):::Determines whether two JobAttributes are equal to each other:::if->return->rhs->if->if->return->else->if->fileName->equals->return->if->if->return->else->if->return->for->i->if->if->return->else->if->printer->equals->return->return
JobAttributes#hashCode():::Returns a hash code value for this JobAttributes.:::rest->if->sum->for->i->if->fileName->hashCode->if->printer->hashCode->return->defaultSelection->hashCode->destination->hashCode->dialog->hashCode->multipleDocumentHandling->hashCode->sides->hashCode
JobAttributes#toString():::Returns a string representation of this JobAttributes.:::pageRanges->getPageRanges->prStr->first->for->i->return->getCopies->getDefaultSelection->getDestination->getDialog->getFileName->getFromPage->getMaxPage->getMinPage->getMultipleDocumentHandling->getPrinter->getSides->getToPage
KeyboardFocusManager#initIDs():::Initialize JNI field and method IDs:::
KeyboardFocusManager#getCurrentKeyboardFocusManager():::Returns the current KeyboardFocusManager instance for the calling thread's context.:::return->AppContext->getAppContext->getCurrentKeyboardFocusManager
KeyboardFocusManager#getCurrentKeyboardFocusManager(AppContext)::: keyboard focus manager get current keyboard focus manager:::manager->appcontext->get->if->new->DefaultKeyboardFocusManager->appcontext->put->return
KeyboardFocusManager#setCurrentKeyboardFocusManager(KeyboardFocusManager):::Sets the current KeyboardFocusManager instance for the calling thread's context:::checkReplaceKFMPermission->oldManager->synchronized->appcontext->AppContext->getAppContext->if->getCurrentKeyboardFocusManager->appcontext->put->else->getCurrentKeyboardFocusManager->appcontext->remove->if->oldManager->firePropertyChange->if->newManager->firePropertyChange
KeyboardFocusManager#setCurrentSequencedEvent(SequencedEvent)::: keyboard focus manager set current sequenced event:::synchronized
KeyboardFocusManager#getCurrentSequencedEvent()::: keyboard focus manager get current sequenced event:::synchronized->return
KeyboardFocusManager#initFocusTraversalKeysSet(String, Set)::: keyboard focus manager init focus traversal keys set:::tokens->new->StringTokenizer->while->tokens->hasMoreTokens->targetSet->AWTKeyStroke->tokens->nextToken->getAWTKeyStroke->add->return->targetSet->isEmpty->Collections->emptySet->Collections->unmodifiableSet
KeyboardFocusManager#initPeer()::: keyboard focus manager init peer:::tk->Toolkit->getDefaultToolkit->peerProvider->peerProvider->getKeyboardFocusManagerPeer
KeyboardFocusManager#getFocusOwner():::Returns the focus owner, if the focus owner is in the same context as the calling thread:::synchronized->if->return->return->AppContext->getAppContext
KeyboardFocusManager#getGlobalFocusOwner():::Returns the focus owner, even if the calling thread is in a different context than the focus owner:::synchronized->checkKFMSecurity->return
KeyboardFocusManager#setGlobalFocusOwner(Component):::Sets the focus owner:::oldFocusOwner->shouldFire->if->focusOwner->isFocusable->synchronized->checkKFMSecurity->getFocusOwner->try->fireVetoableChange->catch->return->finally->if->getCurrentFocusCycleRoot->focusOwner->getCurrentFocusCycleRoot->isFocusCycleRoot->rootAncestor->focusOwner->getFocusCycleRootAncestor->if->if->setGlobalCurrentFocusCycleRootPriv->if->firePropertyChange
KeyboardFocusManager#clearFocusOwner():::Clears the focus owner at both the Java and native levels if the focus owner exists and resides in the same context as the calling thread, otherwise the method returns silently:::if->getFocusOwner->clearGlobalFocusOwner
KeyboardFocusManager#clearGlobalFocusOwner():::Clears the global focus owner at both the Java and native levels:::checkReplaceKFMPermission->if->GraphicsEnvironment->isHeadless->Toolkit->getDefaultToolkit->_clearGlobalFocusOwner
KeyboardFocusManager#_clearGlobalFocusOwner()::: keyboard focus manager _clear global focus owner:::activeWindow->markClearGlobalFocusOwner->peer->clearGlobalFocusOwner
KeyboardFocusManager#clearGlobalFocusOwnerPriv()::: keyboard focus manager clear global focus owner priv:::AccessController->new->PrivilegedAction<Void>->doPrivileged
KeyboardFocusManager#getNativeFocusOwner()::: keyboard focus manager get native focus owner:::return->peer->getCurrentFocusOwner
KeyboardFocusManager#setNativeFocusOwner(Component)::: keyboard focus manager set native focus owner:::if->focusLog->isLoggable->focusLog->String->valueOf->String->valueOf->finest->peer->setCurrentFocusOwner
KeyboardFocusManager#getNativeFocusedWindow()::: keyboard focus manager get native focused window:::return->peer->getCurrentFocusedWindow
KeyboardFocusManager#getPermanentFocusOwner():::Returns the permanent focus owner, if the permanent focus owner is in the same context as the calling thread:::synchronized->if->return->return->AppContext->getAppContext
KeyboardFocusManager#getGlobalPermanentFocusOwner():::Returns the permanent focus owner, even if the calling thread is in a different context than the permanent focus owner:::synchronized->checkKFMSecurity->return
KeyboardFocusManager#setGlobalPermanentFocusOwner(Component):::Sets the permanent focus owner:::oldPermanentFocusOwner->shouldFire->if->permanentFocusOwner->isFocusable->synchronized->checkKFMSecurity->getPermanentFocusOwner->try->fireVetoableChange->catch->return->finally->KeyboardFocusManager->setMostRecentFocusOwner->if->firePropertyChange
KeyboardFocusManager#getFocusedWindow():::Returns the focused Window, if the focused Window is in the same context as the calling thread:::synchronized->if->return->return->AppContext->getAppContext
KeyboardFocusManager#getGlobalFocusedWindow():::Returns the focused Window, even if the calling thread is in a different context than the focused Window:::synchronized->checkKFMSecurity->return
KeyboardFocusManager#setGlobalFocusedWindow(Window):::Sets the focused Window:::oldFocusedWindow->shouldFire->if->focusedWindow->isFocusableWindow->synchronized->checkKFMSecurity->getFocusedWindow->try->fireVetoableChange->catch->return->finally->if->firePropertyChange
KeyboardFocusManager#getActiveWindow():::Returns the active Window, if the active Window is in the same context as the calling thread:::synchronized->if->return->return->AppContext->getAppContext
KeyboardFocusManager#getGlobalActiveWindow():::Returns the active Window, even if the calling thread is in a different context than the active Window:::synchronized->checkKFMSecurity->return
KeyboardFocusManager#setGlobalActiveWindow(Window):::Sets the active Window:::oldActiveWindow->synchronized->checkKFMSecurity->getActiveWindow->if->focusLog->isLoggable->focusLog->finer->try->fireVetoableChange->catch->return->finally->firePropertyChange
KeyboardFocusManager#getDefaultFocusTraversalPolicy():::Returns the default FocusTraversalPolicy:::return
KeyboardFocusManager#setDefaultFocusTraversalPolicy(FocusTraversalPolicy):::Sets the default FocusTraversalPolicy:::if->throw->new->IllegalArgumentException->oldPolicy->synchronized->firePropertyChange
KeyboardFocusManager#setDefaultFocusTraversalKeys(int, Set):::Sets the default focus traversal keys for a given traversal operation:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->oldKeys->synchronized->foreach->if->throw->new->IllegalArgumentException->if->keystroke->getKeyChar->throw->new->IllegalArgumentException->for->i->Collections->new->HashSet<>->unmodifiableSet->firePropertyChange
KeyboardFocusManager#getDefaultFocusTraversalKeys(int):::Returns a Set of default focus traversal keys for a given traversal operation:::if->throw->new->IllegalArgumentException->return
KeyboardFocusManager#getCurrentFocusCycleRoot():::Returns the current focus cycle root, if the current focus cycle root is in the same context as the calling thread:::synchronized->if->return->return->AppContext->getAppContext
KeyboardFocusManager#getGlobalCurrentFocusCycleRoot():::Returns the current focus cycle root, even if the calling thread is in a different context than the current focus cycle root:::synchronized->checkKFMSecurity->return
KeyboardFocusManager#setGlobalCurrentFocusCycleRoot(Container):::Sets the current focus cycle root:::checkReplaceKFMPermission->oldFocusCycleRoot->synchronized->getCurrentFocusCycleRoot->firePropertyChange
KeyboardFocusManager#setGlobalCurrentFocusCycleRootPriv(Container)::: keyboard focus manager set global current focus cycle root priv:::AccessController->new->PrivilegedAction<Void>->doPrivileged
KeyboardFocusManager#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::if->synchronized->if->new->PropertyChangeSupport->changeSupport->addPropertyChangeListener
KeyboardFocusManager#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::if->synchronized->if->changeSupport->removePropertyChangeListener
KeyboardFocusManager#getPropertyChangeListeners():::Returns an array of all the property change listeners registered on this keyboard focus manager.:::if->new->PropertyChangeSupport->return->changeSupport->getPropertyChangeListeners
KeyboardFocusManager#addPropertyChangeListener(String, PropertyChangeListener):::Adds a PropertyChangeListener to the listener list for a specific property:::if->synchronized->if->new->PropertyChangeSupport->changeSupport->addPropertyChangeListener
KeyboardFocusManager#removePropertyChangeListener(String, PropertyChangeListener):::Removes a PropertyChangeListener from the listener list for a specific property:::if->synchronized->if->changeSupport->removePropertyChangeListener
KeyboardFocusManager#getPropertyChangeListeners(String):::Returns an array of all the PropertyChangeListeners associated with the named property.:::if->new->PropertyChangeSupport->return->changeSupport->getPropertyChangeListeners
KeyboardFocusManager#firePropertyChange(String, Object, Object):::Fires a PropertyChangeEvent in response to a change in a bound property:::if->return->changeSupport->if->changeSupport->firePropertyChange
KeyboardFocusManager#addVetoableChangeListener(VetoableChangeListener):::Adds a VetoableChangeListener to the listener list:::if->synchronized->if->new->VetoableChangeSupport->vetoableSupport->addVetoableChangeListener
KeyboardFocusManager#removeVetoableChangeListener(VetoableChangeListener):::Removes a VetoableChangeListener from the listener list:::if->synchronized->if->vetoableSupport->removeVetoableChangeListener
KeyboardFocusManager#getVetoableChangeListeners():::Returns an array of all the vetoable change listeners registered on this keyboard focus manager.:::if->new->VetoableChangeSupport->return->vetoableSupport->getVetoableChangeListeners
KeyboardFocusManager#addVetoableChangeListener(String, VetoableChangeListener):::Adds a VetoableChangeListener to the listener list for a specific property:::if->synchronized->if->new->VetoableChangeSupport->vetoableSupport->addVetoableChangeListener
KeyboardFocusManager#removeVetoableChangeListener(String, VetoableChangeListener):::Removes a VetoableChangeListener from the listener list for a specific property:::if->synchronized->if->vetoableSupport->removeVetoableChangeListener
KeyboardFocusManager#getVetoableChangeListeners(String):::Returns an array of all the VetoableChangeListeners associated with the named property.:::if->new->VetoableChangeSupport->return->vetoableSupport->getVetoableChangeListeners
KeyboardFocusManager#fireVetoableChange(String, Object, Object):::Fires a PropertyChangeEvent in response to a change in a vetoable property:::if->return->vetoableSupport->if->vetoableSupport->fireVetoableChange
KeyboardFocusManager#addKeyEventDispatcher(KeyEventDispatcher):::Adds a KeyEventDispatcher to this KeyboardFocusManager's dispatcher chain:::if->synchronized->if->new->java.util.LinkedList<>->keyEventDispatchers->add
KeyboardFocusManager#removeKeyEventDispatcher(KeyEventDispatcher):::Removes a KeyEventDispatcher which was previously added to this KeyboardFocusManager's dispatcher chain:::if->synchronized->if->keyEventDispatchers->remove
KeyboardFocusManager#getKeyEventDispatchers():::Returns this KeyboardFocusManager's KeyEventDispatcher chain as a List:::return->keyEventDispatchers->clone
KeyboardFocusManager#addKeyEventPostProcessor(KeyEventPostProcessor):::Adds a KeyEventPostProcessor to this KeyboardFocusManager's post- processor chain:::if->synchronized->if->new->java.util.LinkedList<>->keyEventPostProcessors->add
KeyboardFocusManager#removeKeyEventPostProcessor(KeyEventPostProcessor):::Removes a previously added KeyEventPostProcessor from this KeyboardFocusManager's post-processor chain:::if->synchronized->if->keyEventPostProcessors->remove
KeyboardFocusManager#getKeyEventPostProcessors():::Returns this KeyboardFocusManager's KeyEventPostProcessor chain as a List:::return->keyEventPostProcessors->clone
KeyboardFocusManager#setMostRecentFocusOwner(Component)::: keyboard focus manager set most recent focus owner:::window->while->if->setMostRecentFocusOwner
KeyboardFocusManager#setMostRecentFocusOwner(Window, Component)::: keyboard focus manager set most recent focus owner:::weakValue->if->new->WeakReference<>->mostRecentFocusOwners->put
KeyboardFocusManager#clearMostRecentFocusOwner(Component)::: keyboard focus manager clear most recent focus owner:::window->if->return->synchronized->comp->getTreeLock->comp->getParent->while->window->getParent->synchronized->if->getMostRecentFocusOwner->setMostRecentFocusOwner->if->realWindow->if->realWindow->getTemporaryLostComponent->realWindow->setTemporaryLostComponent
KeyboardFocusManager#getMostRecentFocusOwner(Window)::: keyboard focus manager get most recent focus owner:::weakValue->mostRecentFocusOwners->get->return->weakValue->get
KeyboardFocusManager#dispatchEvent(AWTEvent):::This method is called by the AWT event dispatcher requesting that the current KeyboardFocusManager dispatch the specified event on its behalf:::
KeyboardFocusManager#redispatchEvent(Component, AWTEvent):::Redispatches an AWTEvent in such a way that the AWT event dispatcher will not recursively request that the KeyboardFocusManager, or any installed KeyEventDispatchers, dispatch the event again:::target->dispatchEvent
KeyboardFocusManager#dispatchKeyEvent(KeyEvent):::Typically this method will be called by dispatchEvent if no other KeyEventDispatcher in the dispatcher chain dispatched the KeyEvent, or if no other KeyEventDispatchers are registered:::
KeyboardFocusManager#postProcessKeyEvent(KeyEvent):::This method will be called by dispatchKeyEvent:::
KeyboardFocusManager#processKeyEvent(Component, KeyEvent):::This method initiates a focus traversal operation if and only if the KeyEvent represents a focus traversal key for the specified focusedComponent:::
KeyboardFocusManager#enqueueKeyEvents(long, Component):::Called by the AWT to notify the KeyboardFocusManager that it should delay dispatching of KeyEvents until the specified Component becomes the focus owner:::
KeyboardFocusManager#dequeueKeyEvents(long, Component):::Called by the AWT to notify the KeyboardFocusManager that it should cancel delayed dispatching of KeyEvents:::
KeyboardFocusManager#discardKeyEvents(Component):::Called by the AWT to notify the KeyboardFocusManager that it should cancel delayed dispatching of KeyEvents:::
KeyboardFocusManager#focusNextComponent(Component):::Focuses the Component after aComponent, typically based on a FocusTraversalPolicy.:::
KeyboardFocusManager#focusPreviousComponent(Component):::Focuses the Component before aComponent, typically based on a FocusTraversalPolicy.:::
KeyboardFocusManager#upFocusCycle(Component):::Moves the focus up one focus traversal cycle:::
KeyboardFocusManager#downFocusCycle(Container):::Moves the focus down one focus traversal cycle:::
KeyboardFocusManager#focusNextComponent():::Focuses the Component after the current focus owner.:::focusOwner->getFocusOwner->if->focusNextComponent
KeyboardFocusManager#focusPreviousComponent():::Focuses the Component before the current focus owner.:::focusOwner->getFocusOwner->if->focusPreviousComponent
KeyboardFocusManager#upFocusCycle():::Moves the focus up one focus traversal cycle from the current focus owner:::focusOwner->getFocusOwner->if->upFocusCycle
KeyboardFocusManager#downFocusCycle():::Moves the focus down one focus traversal cycle from the current focus owner, if and only if the current focus owner is a Container that is a focus cycle root:::focusOwner->getFocusOwner->if->downFocusCycle
KeyboardFocusManager#dumpRequests():::Dumps the list of focus requests to stderr:::System->currentTimeMillis->println->synchronized->foreach->println->println
KeyboardFocusManager.LightweightFocusRequest#toString()::: lightweight focus request to string:::return
KeyboardFocusManager.HeavyweightFocusRequest#addLightweightRequest(Component, boolean, FocusEvent.Cause)::: heavyweight focus request add lightweight request:::if->log->isLoggable->if->log->fine->if->log->fine->lastDescendant->lightweightRequests->size->lightweightRequests->getLast->if->lightweightRequests->new->LightweightFocusRequest->add->return->else->return
KeyboardFocusManager.HeavyweightFocusRequest#getFirstLightweightRequest()::: heavyweight focus request get first lightweight request:::if->return->return->lightweightRequests->getFirst
KeyboardFocusManager.HeavyweightFocusRequest#toString()::: heavyweight focus request to string:::first->str->if->else->foreach->if->else->return
KeyboardFocusManager#processSynchronousLightweightTransfer(Component, Component, boolean, boolean, long)::: keyboard focus manager process synchronous lightweight transfer:::parentWindow->SunToolkit->getContainingWindow->if->return->if->manager->SunToolkit->targetToAppContext->getCurrentKeyboardFocusManager->currentFocusOwnerEvent->newFocusOwnerEvent->currentFocusOwner->manager->getGlobalFocusOwner->synchronized->hwFocusRequest->getLastHWRequest->if->manager->getNativeFocusOwner->if->return->manager->enqueueKeyEvents->new->HeavyweightFocusRequest->heavyweightRequests->add->if->new->FocusEvent->new->FocusEvent->result->clearing->caughtEx->try->synchronized->if->dispatchAndCatchException->if->dispatchAndCatchException->catch->finally->if->throw->else->if->throw->return
KeyboardFocusManager#shouldNativelyFocusHeavyweight(Component, Component, boolean, boolean, long, FocusEvent.Cause):::Indicates whether the native implementation should proceed with a pending, native focus request:::if->log->isLoggable->if->log->fine->if->log->fine->if->manager->SunToolkit->targetToAppContext->getCurrentKeyboardFocusManager->thisManager->getCurrentKeyboardFocusManager->currentFocusOwner->thisManager->getGlobalFocusOwner->nativeFocusOwner->thisManager->getNativeFocusOwner->nativeFocusedWindow->thisManager->getNativeFocusedWindow->if->focusLog->isLoggable->focusLog->String->valueOf->String->valueOf->finer->if->focusLog->isLoggable->focusLog->String->valueOf->finest->focusLog->String->valueOf->finest->focusLog->String->valueOf->finest->synchronized->hwFocusRequest->getLastHWRequest->if->focusLog->isLoggable->focusLog->String->valueOf->finest->if->heavyweight->getContainingWindow->if->if->focusLog->isLoggable->focusLog->String->valueOf->finest->return->manager->enqueueKeyEvents->new->HeavyweightFocusRequest->heavyweightRequests->add->if->currentFocusOwnerEvent->new->FocusEvent->SunToolkit->postEvent->newFocusOwnerEvent->new->FocusEvent->SunToolkit->postEvent->if->focusLog->isLoggable->focusLog->String->valueOf->finest->return->else->if->if->hwFocusRequest->addLightweightRequest->manager->enqueueKeyEvents->if->focusLog->isLoggable->focusLog->finest->return->else->if->if->size->heavyweightRequests->size->heavyweightRequests->get->if->focusedWindowChanged->if->focusLog->isLoggable->focusLog->finest->return->manager->enqueueKeyEvents->heavyweightRequests->new->HeavyweightFocusRequest->add->if->focusLog->isLoggable->focusLog->finest->return
KeyboardFocusManager#markClearGlobalFocusOwner():::Returns the Window which will be active after processing this request, or null if this is a duplicate request:::nativeFocusedWindow->getCurrentKeyboardFocusManager->getNativeFocusedWindow->synchronized->hwFocusRequest->getLastHWRequest->if->return->heavyweightRequests->add->activeWindow->SunToolkit->getContainingWindow->while->activeWindow->getParent_NoClientCode->return
KeyboardFocusManager#getCurrentWaitingRequest(Component)::: keyboard focus manager get current waiting request:::synchronized->hwFocusRequest->getFirstHWRequest->if->if->lwFocusRequest->getFirst->if->return->return
KeyboardFocusManager#isAutoFocusTransferEnabled()::: keyboard focus manager is auto focus transfer enabled:::synchronized->return->heavyweightRequests->size
KeyboardFocusManager#isAutoFocusTransferEnabledFor(Component)::: keyboard focus manager is auto focus transfer enabled for:::return->isAutoFocusTransferEnabled->comp->isAutoFocusTransferOnDisposal
KeyboardFocusManager#dispatchAndCatchException(Throwable, Component, FocusEvent)::: keyboard focus manager dispatch and catch exception:::retEx->try->comp->dispatchEvent->catch->finally->if->if->handleException->return->return
KeyboardFocusManager#handleException(Throwable)::: keyboard focus manager handle exception:::ex->printStackTrace
KeyboardFocusManager#processCurrentLightweightRequests()::: keyboard focus manager process current lightweight requests:::manager->getCurrentKeyboardFocusManager->localLightweightRequests->globalFocusOwner->manager->getGlobalFocusOwner->if->AppContext->getAppContext->return->synchronized->if->localLightweightRequests->size->else->return->caughtEx->try->if->lastFocusOwner->currentFocusOwner->for->iter->localLightweightRequests->iterator->iter->hasNext->catch->finally->if->throw->else->if->throw
KeyboardFocusManager#retargetUnexpectedFocusEvent(FocusEvent)::: keyboard focus manager retarget unexpected focus event:::synchronized->if->removeFirstRequest->return->retargetFocusEvent->source->fe->getComponent->opposite->fe->getOppositeComponent->temporary->if->fe->getID->isTemporary->return->fe->getID->new->FocusEvent
KeyboardFocusManager#retargetFocusGained(FocusEvent)::: keyboard focus manager retarget focus gained:::currentFocusOwner->getCurrentKeyboardFocusManager->getGlobalFocusOwner->source->fe->getComponent->opposite->fe->getOppositeComponent->nativeSource->getHeavyweight->synchronized->hwFocusRequest->getFirstHWRequest->if->return->retargetUnexpectedFocusEvent->if->if->hwFocusRequest->getFirstLightweightRequest->if->heavyweightRequests->removeFirst->lwFocusRequest->removeFirst->newSource->if->temporary->isTemporary->if->size->EventQueue->new->Runnable->invokeLater->return->new->FocusEvent->if->currentFocusOwner->getContainingWindow->return->new->FocusEvent->return->retargetUnexpectedFocusEvent
KeyboardFocusManager#retargetFocusLost(FocusEvent)::: keyboard focus manager retarget focus lost:::currentFocusOwner->getCurrentKeyboardFocusManager->getGlobalFocusOwner->opposite->fe->getOppositeComponent->nativeOpposite->getHeavyweight->synchronized->hwFocusRequest->getFirstHWRequest->if->if->heavyweightRequests->removeFirst->return->new->FocusEvent->else->if->if->return->new->FocusEvent->else->return->else->if->hwFocusRequest->getFirstLightweightRequest->if->return->lwFocusRequest->getFirst->temporary->isTemporary->return->new->FocusEvent->else->if->focusedWindowChanged->if->fe->isTemporary->new->FocusEvent->return->return->retargetUnexpectedFocusEvent
KeyboardFocusManager#retargetFocusEvent(AWTEvent)::: keyboard focus manager retarget focus event:::if->return->manager->getCurrentKeyboardFocusManager->if->focusLog->isLoggable->if->focusLog->String->valueOf->finer->if->focusLog->isLoggable->focusLog->String->manager->getGlobalFocusOwner->valueOf->finer->focusLog->String->valueOf->finer->synchronized->if->event->getID->fe->if->manager->getGlobalFocusOwner->fe->getComponent->fe->getOppositeComponent->return->processCurrentLightweightRequests->switch->event->getID->retargetFocusGained->break->retargetFocusLost->break->return
KeyboardFocusManager#clearMarkers():::Clears markers queue This method is not intended to be overridden by KFM's:::
KeyboardFocusManager#removeFirstRequest()::: keyboard focus manager remove first request:::manager->KeyboardFocusManager->getCurrentKeyboardFocusManager->synchronized->hwFocusRequest->getFirstHWRequest->if->heavyweightRequests->removeFirst->if->for->lwIter->iterator->lwIter->hasNext->if->heavyweightRequests->size->manager->clearMarkers->return->heavyweightRequests->size
KeyboardFocusManager#removeLastFocusRequest(Component)::: keyboard focus manager remove last focus request:::if->log->isLoggable->if->log->fine->manager->KeyboardFocusManager->getCurrentKeyboardFocusManager->synchronized->hwFocusRequest->getLastHWRequest->if->heavyweightRequests->removeLast->if->heavyweightRequests->size->manager->clearMarkers
KeyboardFocusManager#focusedWindowChanged(Component, Component)::: keyboard focus manager focused window changed:::wto->SunToolkit->getContainingWindow->wfrom->SunToolkit->getContainingWindow->if->return->if->return->if->return->return
KeyboardFocusManager#isTemporary(Component, Component)::: keyboard focus manager is temporary:::wto->SunToolkit->getContainingWindow->wfrom->SunToolkit->getContainingWindow->if->return->if->return->if->return->return
KeyboardFocusManager#getHeavyweight(Component)::: keyboard focus manager get heavyweight:::if->return->else->if->return->comp->getNativeContainer->else->return
KeyboardFocusManager#isProxyActiveImpl(KeyEvent)::: keyboard focus manager is proxy active impl:::return->AWTAccessor->getKeyEventAccessor->isProxyActive
KeyboardFocusManager#isProxyActive(KeyEvent)::: keyboard focus manager is proxy active:::if->GraphicsEnvironment->isHeadless->return->isProxyActiveImpl->else->return
KeyboardFocusManager#getLastHWRequest()::: keyboard focus manager get last request:::synchronized->return->heavyweightRequests->size->heavyweightRequests->getLast
KeyboardFocusManager#getFirstHWRequest()::: keyboard focus manager get first request:::synchronized->return->heavyweightRequests->size->heavyweightRequests->getFirst
KeyboardFocusManager#checkReplaceKFMPermission()::: keyboard focus manager check replace permission:::security->System->getSecurityManager->if->if->new->AWTPermission->security->checkPermission
KeyboardFocusManager#checkKFMSecurity()::: keyboard focus manager check security:::if->getCurrentKeyboardFocusManager->checkReplaceKFMPermission
KeyEventDispatcher#dispatchKeyEvent(KeyEvent):::This method is called by the current KeyboardFocusManager requesting that this KeyEventDispatcher dispatch the specified event on its behalf:::
KeyEventPostProcessor#postProcessKeyEvent(KeyEvent):::This method is called by the current KeyboardFocusManager, requesting that this KeyEventPostProcessor perform any necessary post-processing which should be part of the KeyEvent's final resolution:::
Label#readObject(ObjectInputStream):::Read a label from an object input stream.:::GraphicsEnvironment->checkHeadless->s->defaultReadObject
Label#constructComponentName():::Construct a name for this component:::synchronized->return
Label#addNotify():::Creates the peer for this label:::synchronized->getTreeLock->if->getComponentFactory->createLabel->super->addNotify
Label#getAlignment():::Gets the current alignment of this label:::return
Label#setAlignment(int):::Sets the alignment for this label to the specified alignment:::switch->peer->if->peer->setAlignment->return->throw->new->IllegalArgumentException
Label#getText():::Gets the text of this label.:::return
Label#setText(String):::Sets the text for this label to the specified text.:::testvalid->synchronized->if->equals->peer->if->peer->setText->if->invalidateIfValid
Label#paramString():::Returns a string representing the state of this Label:::align->switch->break->break->break->return->super->paramString
Label#initIDs():::Initialize JNI field and method IDs:::
Label#getAccessibleContext():::Gets the AccessibleContext associated with this Label:::if->new->AccessibleAWTLabel->return
Label.AccessibleAWTLabel#getAccessibleName():::Get the accessible name of this object.:::if->return->else->if->getText->return->super->getAccessibleName->else->return->getText
Label.AccessibleAWTLabel#getAccessibleRole():::Get the role of this object.:::return
LayoutManager#addLayoutComponent(String, Component):::If the layout manager uses a per-component string, adds the component comp to the layout, associating it with the string specified by name.:::
LayoutManager#removeLayoutComponent(Component):::Removes the specified component from the layout.:::
LayoutManager#preferredLayoutSize(Container):::Calculates the preferred size dimensions for the specified container, given the components it contains.:::
LayoutManager#minimumLayoutSize(Container):::Calculates the minimum size dimensions for the specified container, given the components it contains.:::
LayoutManager#layoutContainer(Container):::Lays out the specified container.:::
LayoutManager2#addLayoutComponent(Component, Object):::Adds the specified component to the layout, using the specified constraint object.:::
LayoutManager2#maximumLayoutSize(Container):::Calculates the maximum size dimensions for the specified container, given the components it contains.:::
LayoutManager2#getLayoutAlignmentX(Container):::Returns the alignment along the x axis:::
LayoutManager2#getLayoutAlignmentY(Container):::Returns the alignment along the y axis:::
LayoutManager2#invalidateLayout(Container):::Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.:::
LinearGradientPaint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints):::Creates and returns a PaintContext used to generate a linear color gradient pattern:::new->AffineTransform->transform->concatenate->if->cyclic->return->new->GradientPaintContext->else->return->new->LinearGradientPaintContext
LinearGradientPaint#getStartPoint():::Returns a copy of the start point of the gradient axis.:::return->start->getX->start->getY->new->Point2D.Double
LinearGradientPaint#getEndPoint():::Returns a copy of the end point of the gradient axis.:::return->end->getX->end->getY->new->Point2D.Double
LinearGradientPaintContext#fillRaster(int[], int, int, int, int, int, int):::Return a Raster containing the colors generated for the graphics operation:::g->rowLimit->initConst->for->i
List#constructComponentName():::Construct a name for this component:::synchronized->return
List#addNotify():::Creates the peer for the list:::synchronized->getTreeLock->if->getComponentFactory->createList->super->addNotify
List#removeNotify():::Removes the peer for this list:::synchronized->getTreeLock->peer->if->peer->getSelectedIndexes->super->removeNotify
List#getItemCount():::Gets the number of items in the list.:::return->countItems
List#countItems():::Returns the number of items in the list.:::return->items->size
List#getItem(int):::Gets the item associated with the specified index.:::return->getItemImpl
List#getItemImpl(int)::: list get item impl:::return->items->elementAt
List#getItems():::Gets the items in the list.:::itemCopies->items->size->new->StringArr->items->copyInto->return
List#add(String):::Adds the specified item to the end of scrolling list.:::addItem
List#addItem(String):::Adds the specified item to the end of the list.:::addItem
List#add(String, int):::Adds the specified item to the scrolling list at the position indicated by the index:::addItem
List#addItem(String, int):::Adds the specified item to the list at the position indicated by the index.:::if->items->size->if->if->items->addElement->else->items->insertElementAt->peer->if->peer->add
List#replaceItem(String, int):::Replaces the item at the specified index in the scrolling list with the new string.:::remove->add
List#removeAll():::Removes all items from this list.:::clear
List#clear()::: list clear:::peer->if->peer->removeAll->new->Vector<>->new->intArr
List#remove(String):::Removes the first occurrence of an item from the list:::index->items->indexOf->if->throw->new->IllegalArgumentException->else->remove
List#remove(int):::Removes the item at the specified position from this scrolling list:::delItem
List#delItem(int):::Removes the item at the specified position.:::delItems
List#getSelectedIndex():::Gets the index of the selected item on the list,:::sel->getSelectedIndexes->return
List#getSelectedIndexes():::Gets the selected indexes on the list.:::peer->if->peer->getSelectedIndexes->return->selected->clone
List#getSelectedItem():::Gets the selected item on this scrolling list.:::index->getSelectedIndex->return->getItem
List#getSelectedItems():::Gets the selected items on this scrolling list.:::sel->getSelectedIndexes->str->new->StringArr->for->i->return
List#getSelectedObjects():::Gets the selected items on this scrolling list in an array of Objects.:::return->getSelectedItems
List#select(int):::Selects the item at the specified index in the scrolling list:::peer->do->if->peer->select->return->synchronized->alreadySelected->for->i->if->if->new->intArr->else->newsel->new->intArr->System->arraycopy->while
List#deselect(int):::Deselects the item at the specified index:::peer->if->if->isMultipleMode->getSelectedIndex->peer->deselect->for->i
List#isIndexSelected(int):::Determines if the specified item in this scrolling list is selected.:::return->isSelected
List#isSelected(int):::Determines if the specified item in the list is selected.:::sel->getSelectedIndexes->for->i->return
List#getRows():::Gets the number of visible lines in this list:::return
List#isMultipleMode():::Determines whether this list allows multiple selections.:::return->allowsMultipleSelections
List#allowsMultipleSelections():::Determines whether this list allows multiple selections.:::return
List#setMultipleMode(boolean):::Sets the flag that determines whether this list allows multiple selections:::setMultipleSelections
List#setMultipleSelections(boolean):::Enables or disables multiple selection mode for this list.:::if->peer->if->peer->setMultipleMode
List#getVisibleIndex():::Gets the index of the item that was last made visible by the method makeVisible.:::return
List#makeVisible(int):::Makes the item at the specified index visible.:::peer->if->peer->makeVisible
List#getPreferredSize(int):::Gets the preferred dimensions for a list with the specified number of rows.:::return->preferredSize
List#preferredSize(int):::Returns the preferred size of this component assuming it has the specified number of rows.:::synchronized->getTreeLock->peer->return->peer->getPreferredSize->super->preferredSize
List#getPreferredSize():::Gets the preferred size of this scrolling list.:::return->preferredSize
List#preferredSize()::: list preferred size:::synchronized->getTreeLock->return->preferredSize->super->preferredSize
List#getMinimumSize(int):::Gets the minimum dimensions for a list with the specified number of rows.:::return->minimumSize
List#minimumSize(int):::Returns the minimum dimensions for the list with the specified number of rows.:::synchronized->getTreeLock->peer->return->peer->getMinimumSize->super->minimumSize
List#getMinimumSize():::Determines the minimum size of this scrolling list.:::return->minimumSize
List#minimumSize()::: list minimum size:::synchronized->getTreeLock->return->minimumSize->super->minimumSize
List#addItemListener(ItemListener):::Adds the specified item listener to receive item events from this list:::if->return->AWTEventMulticaster->add
List#removeItemListener(ItemListener):::Removes the specified item listener so that it no longer receives item events from this list:::if->return->AWTEventMulticaster->remove
List#getItemListeners():::Returns an array of all the item listeners registered on this list.:::return->getListeners
List#addActionListener(ActionListener):::Adds the specified action listener to receive action events from this list:::if->return->AWTEventMulticaster->add
List#removeActionListener(ActionListener):::Removes the specified action listener so that it no longer receives action events from this list:::if->return->AWTEventMulticaster->remove
List#getActionListeners():::Returns an array of all the action listeners registered on this list.:::return->getListeners
List#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this List:::l->if->else->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
List#eventEnabled(AWTEvent)::: list event enabled:::switch->if->return->return->if->return->return->break->return->super->eventEnabled
List#processEvent(AWTEvent):::Processes events on this scrolling list:::if->processItemEvent->return->else->if->processActionEvent->return->super->processEvent
List#processItemEvent(ItemEvent):::Processes item events occurring on this list by dispatching them to any registered ItemListener objects:::listener->if->listener->itemStateChanged
List#processActionEvent(ActionEvent):::Processes action events occurring on this component by dispatching them to any registered ActionListener objects:::listener->if->listener->actionPerformed
List#paramString():::Returns the parameter string representing the state of this scrolling list:::return->super->paramString->getSelectedItem
List#delItems(int, int):::Deletes the list items in the specified index range.:::for->i->peer->if->peer->delItems
List#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::synchronized->peer->if->peer->getSelectedIndexes->s->defaultWriteObject->AWTEventMulticaster->save->AWTEventMulticaster->save->s->writeObject
List#readObject(ObjectInputStream):::Reads the ObjectInputStream and if it isn't null adds a listener to receive both item events and action events (as specified by the key stored in the stream) fired by the List:::GraphicsEnvironment->checkHeadless->s->defaultReadObject->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addItemListener->else->if->s->readObject->addActionListener->else->s->readObject
List#getAccessibleContext():::Gets the AccessibleContext associated with this List:::if->new->AccessibleAWTList->return
List.AccessibleAWTList#actionPerformed(ActionEvent)::: accessible list action performed:::
List.AccessibleAWTList#itemStateChanged(ItemEvent)::: accessible list item state changed:::
List.AccessibleAWTList#getAccessibleStateSet():::Get the state set of this object.:::states->super->getAccessibleStateSet->if->List.this->isMultipleMode->states->add->return
List.AccessibleAWTList#getAccessibleRole():::Get the role of this object.:::return
List.AccessibleAWTList#getAccessibleAt(Point):::Returns the Accessible child contained at the local coordinate Point, if one exists.:::return
List.AccessibleAWTList#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::return->List.this->getItemCount
List.AccessibleAWTList#getAccessibleChild(int):::Return the nth Accessible child of the object.:::synchronized->if->List.this->getItemCount->return->else->return->new->AccessibleAWTListChild
List.AccessibleAWTList#getAccessibleSelection():::Get the AccessibleSelection associated with this object:::return
List.AccessibleAWTList#getAccessibleSelectionCount():::Returns the number of items currently selected:::return->List.this->getSelectedIndexes
List.AccessibleAWTList#getAccessibleSelection(int):::Returns an Accessible representing the specified selected item in the object:::synchronized->len->getAccessibleSelectionCount->if->return->else->return->List.this->getSelectedIndexes->getAccessibleChild
List.AccessibleAWTList#isAccessibleChildSelected(int):::Returns true if the current child of this object is selected.:::return->List.this->isIndexSelected
List.AccessibleAWTList#addAccessibleSelection(int):::Adds the specified selected item in the object to the object's selection:::List.this->select
List.AccessibleAWTList#removeAccessibleSelection(int):::Removes the specified selected item in the object from the object's selection:::List.this->deselect
List.AccessibleAWTList#clearAccessibleSelection():::Clears the selection in the object, so that nothing in the object is selected.:::synchronized->selectedIndexes->List.this->getSelectedIndexes->if->return->for->i
List.AccessibleAWTList#selectAllAccessibleSelection():::Causes every selected item in the object to be selected if the object supports multiple selections.:::synchronized->for->i->List.this->getItemCount
List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleContext():::Gets the AccessibleContext for this object:::return
List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleRole():::Get the role of this object.:::return
List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleStateSet():::Get the state set of this object:::states->super->getAccessibleStateSet->if->parent->isIndexSelected->states->add->return
List.AccessibleAWTList.AccessibleAWTListChild#getLocale():::Gets the locale of the component:::return->parent->getLocale
List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleIndexInParent():::Get the 0-based index of this object in its accessible parent.:::return
List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleChildrenCount():::Returns the number of accessible children of the object.:::return
List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleChild(int):::Return the specified Accessible child of the object:::return
List.AccessibleAWTList.AccessibleAWTListChild#getBackground():::Get the background color of this object.:::return->parent->getBackground
List.AccessibleAWTList.AccessibleAWTListChild#setBackground(Color):::Set the background color of this object.:::parent->setBackground
List.AccessibleAWTList.AccessibleAWTListChild#getForeground():::Get the foreground color of this object.:::return->parent->getForeground
List.AccessibleAWTList.AccessibleAWTListChild#setForeground(Color):::Set the foreground color of this object.:::parent->setForeground
List.AccessibleAWTList.AccessibleAWTListChild#getCursor():::Get the Cursor of this object.:::return->parent->getCursor
List.AccessibleAWTList.AccessibleAWTListChild#setCursor(Cursor):::Set the Cursor of this object:::parent->setCursor
List.AccessibleAWTList.AccessibleAWTListChild#getFont():::Get the Font of this object.:::return->parent->getFont
List.AccessibleAWTList.AccessibleAWTListChild#setFont(Font):::Set the Font of this object.:::parent->setFont
List.AccessibleAWTList.AccessibleAWTListChild#getFontMetrics(Font):::Get the FontMetrics of this object.:::return->parent->getFontMetrics
List.AccessibleAWTList.AccessibleAWTListChild#isEnabled():::Determine if the object is enabled:::return->parent->isEnabled
List.AccessibleAWTList.AccessibleAWTListChild#setEnabled(boolean):::Set the enabled state of the object.:::parent->setEnabled
List.AccessibleAWTList.AccessibleAWTListChild#isVisible():::Determine if the object is visible:::return
List.AccessibleAWTList.AccessibleAWTListChild#setVisible(boolean):::Set the visible state of the object.:::parent->setVisible
List.AccessibleAWTList.AccessibleAWTListChild#isShowing():::Determine if the object is showing:::return
List.AccessibleAWTList.AccessibleAWTListChild#contains(Point):::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.:::return
List.AccessibleAWTList.AccessibleAWTListChild#getLocationOnScreen():::Returns the location of the object on the screen.:::return
List.AccessibleAWTList.AccessibleAWTListChild#getLocation():::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.:::return
List.AccessibleAWTList.AccessibleAWTListChild#setLocation(Point):::Sets the location of the object relative to the parent.:::
List.AccessibleAWTList.AccessibleAWTListChild#getBounds():::Gets the bounds of this object in the form of a Rectangle object:::return
List.AccessibleAWTList.AccessibleAWTListChild#setBounds(Rectangle):::Sets the bounds of this object in the form of a Rectangle object:::
List.AccessibleAWTList.AccessibleAWTListChild#getSize():::Returns the size of this object in the form of a Dimension object:::return
List.AccessibleAWTList.AccessibleAWTListChild#setSize(Dimension):::Resizes this object so that it has width and height.:::
List.AccessibleAWTList.AccessibleAWTListChild#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point.:::return
List.AccessibleAWTList.AccessibleAWTListChild#isFocusTraversable():::Returns whether this object can accept focus or not:::return
List.AccessibleAWTList.AccessibleAWTListChild#requestFocus():::Requests focus for this object:::
List.AccessibleAWTList.AccessibleAWTListChild#addFocusListener(FocusListener):::Adds the specified focus listener to receive focus events from this component.:::
List.AccessibleAWTList.AccessibleAWTListChild#removeFocusListener(FocusListener):::Removes the specified focus listener so it no longer receives focus events from this component.:::
MediaTracker#addImage(Image, int):::Adds an image to the list of images being tracked by this media tracker:::addImage
MediaTracker#addImage(Image, int, int, int):::Adds a scaled image to the list of images being tracked by this media tracker:::addImageImpl->rvImage->getResolutionVariant->if->addImageImpl
MediaTracker#addImageImpl(Image, int, int, int)::: media tracker add image impl:::MediaEntry->new->ImageMediaEntry->insert
MediaTracker#checkAll():::Checks to see if all images being tracked by this media tracker have finished loading:::return->checkAll
MediaTracker#checkAll(boolean):::Checks to see if all images being tracked by this media tracker have finished loading:::return->checkAll
MediaTracker#checkAll(boolean, boolean)::: media tracker check all:::cur->done->while->if->cur->getStatus->return
MediaTracker#isErrorAny():::Checks the error status of all of the images.:::cur->while->if->cur->getStatus->return->return
MediaTracker#getErrorsAny():::Returns a list of all media that have encountered an error.:::cur->numerrors->while->if->cur->getStatus->if->return->errors->new->ObjectArr->while->if->cur->getStatus->cur->getMedia->return
MediaTracker#waitForAll():::Starts loading all images tracked by this media tracker:::waitForAll
MediaTracker#waitForAll(long):::Starts loading all images tracked by this media tracker:::end->System->currentTimeMillis->first->while->status->statusAll->if->return->timeout->if->else->System->currentTimeMillis->if->return->wait
MediaTracker#statusAll(boolean):::Calculates and returns the bitwise inclusive OR of the status of all media that are tracked by this media tracker:::return->statusAll
MediaTracker#statusAll(boolean, boolean)::: media tracker status all:::cur->status->while->cur->getStatus->return
MediaTracker#checkID(int):::Checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading:::return->checkID
MediaTracker#checkID(int, boolean):::Checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading:::return->checkID
MediaTracker#checkID(int, boolean, boolean)::: media tracker check d:::cur->done->while->if->cur->getID->cur->getStatus->return
MediaTracker#isErrorID(int):::Checks the error status of all of the images tracked by this media tracker with the specified identifier.:::cur->while->if->cur->getID->cur->getStatus->return->return
MediaTracker#getErrorsID(int):::Returns a list of media with the specified ID that have encountered an error.:::cur->numerrors->while->if->cur->getID->cur->getStatus->if->return->errors->new->ObjectArr->while->if->cur->getID->cur->getStatus->cur->getMedia->return
MediaTracker#waitForID(int):::Starts loading all images tracked by this media tracker with the specified identifier:::waitForID
MediaTracker#waitForID(int, long):::Starts loading all images tracked by this media tracker with the specified identifier:::end->System->currentTimeMillis->first->while->status->statusID->if->return->timeout->if->else->System->currentTimeMillis->if->return->wait
MediaTracker#statusID(int, boolean):::Calculates and returns the bitwise inclusive OR of the status of all media with the specified identifier that are tracked by this media tracker:::return->statusID
MediaTracker#statusID(int, boolean, boolean)::: media tracker status d:::cur->status->while->if->cur->getID->cur->getStatus->return
MediaTracker#removeImage(Image):::Removes the specified image from this media tracker:::removeImageImpl->rvImage->getResolutionVariant->if->removeImageImpl->notifyAll
MediaTracker#removeImageImpl(Image)::: media tracker remove image impl:::cur->prev->while->next->if->cur->getMedia->if->else->cur->cancel->else
MediaTracker#removeImage(Image, int):::Removes the specified image from the specified tracking ID of this media tracker:::removeImageImpl->rvImage->getResolutionVariant->if->removeImageImpl->notifyAll
MediaTracker#removeImageImpl(Image, int)::: media tracker remove image impl:::cur->prev->while->next->if->cur->getID->cur->getMedia->if->else->cur->cancel->else
MediaTracker#removeImage(Image, int, int, int):::Removes the specified image with the specified width, height, and ID from this media tracker:::removeImageImpl->rvImage->getResolutionVariant->if->removeImageImpl->notifyAll
MediaTracker#removeImageImpl(Image, int, int, int)::: media tracker remove image impl:::cur->prev->while->next->if->cur->getID->matches->if->else->cur->cancel->else
MediaTracker#setDone()::: media tracker set done:::notifyAll
MediaTracker#getResolutionVariant(Image)::: media tracker get resolution variant:::if->return->getResolutionVariant->return
MediaEntry#getMedia()::: media entry get media:::
MediaEntry#insert(MediaEntry, MediaEntry)::: media entry insert:::cur->prev->while->if->break->if->else->return
MediaEntry#getID()::: media entry get d:::return
MediaEntry#startLoad()::: media entry start load:::
MediaEntry#cancel()::: media entry cancel:::
MediaEntry#getStatus(boolean, boolean)::: media entry get status:::if->startLoad->return
MediaEntry#setStatus(int)::: media entry set status:::synchronized->tracker->setDone
ImageMediaEntry#matches(Image, int, int)::: image media entry matches:::return
ImageMediaEntry#getMedia()::: image media entry get media:::return
ImageMediaEntry#getStatus(boolean, boolean)::: image media entry get status:::if->flags->checkImage->s->parseflags->if->if->setStatus->else->if->setStatus->return->super->getStatus
ImageMediaEntry#startLoad()::: image media entry start load:::if->prepareImage->setStatus
ImageMediaEntry#parseflags(int)::: image media entry parseflags:::if->return->else->if->return->else->if->return->return
ImageMediaEntry#imageUpdate(Image, int, int, int, int, int)::: image media entry image update:::if->return->s->parseflags->if->setStatus->return
Menu#constructComponentName():::Construct a name for this MenuComponent:::synchronized->return
Menu#addNotify():::Creates the menu's peer:::synchronized->getTreeLock->if->getComponentFactory->createMenu->nitems->getItemCount->for->i
Menu#removeNotify():::Removes the menu's peer:::synchronized->getTreeLock->nitems->getItemCount->for->i->super->removeNotify
Menu#isTearOff():::Indicates whether this menu is a tear-off menu:::return
Menu#getItemCount():::Get the number of items in this menu.:::return->countItems
Menu#countItems():::Returns the number of items in this menu.:::return->countItemsImpl
Menu#countItemsImpl()::: menu count items impl:::return->items->size
Menu#getItem(int):::Gets the item located at the specified index of this menu.:::return->getItemImpl
Menu#getItemImpl(int)::: menu get item impl:::return->items->elementAt
Menu#add(MenuItem):::Adds the specified menu item to this menu:::synchronized->getTreeLock->if->remove->items->addElement->peer->if->mi->addNotify->peer->addItem->return
Menu#add(String):::Adds an item with the specified label to this menu.:::new->MenuItem->add
Menu#insert(MenuItem, int)::: menu insert:::synchronized->getTreeLock->if->throw->new->IllegalArgumentException->nitems->getItemCount->tempItems->new->Vector<>->for->i->add->for->i->tempItems->size
Menu#insert(String, int)::: menu insert:::new->MenuItem->insert
Menu#addSeparator():::Adds a separator line, or a hypen, to the menu at the current position.:::add
Menu#insertSeparator(int)::: menu insert separator:::synchronized->getTreeLock->if->throw->new->IllegalArgumentException->nitems->getItemCount->tempItems->new->Vector<>->for->i->addSeparator->for->i->tempItems->size
Menu#remove(int):::Removes the menu item at the specified index from this menu.:::synchronized->getTreeLock->mi->getItem->items->removeElementAt->peer->if->peer->delItem->mi->removeNotify
Menu#remove(MenuComponent):::Removes the specified menu item from this menu.:::synchronized->getTreeLock->index->items->indexOf->if->remove
Menu#removeAll():::Removes all items from this menu.:::synchronized->getTreeLock->nitems->getItemCount->for->i
Menu#handleShortcut(KeyEvent)::: menu handle shortcut:::nitems->getItemCount->for->i->return
Menu#getShortcutMenuItem(MenuShortcut)::: menu get shortcut menu item:::nitems->getItemCount->for->i->return
Menu#shortcuts()::: menu shortcuts:::shortcuts->new->Vector<>->nitems->getItemCount->for->i->return->shortcuts->elements
Menu#deleteShortcut(MenuShortcut)::: menu delete shortcut:::nitems->getItemCount->for->i
Menu#writeObject(java.io.ObjectOutputStream):::Writes default serializable fields to stream.:::s->defaultWriteObject
Menu#readObject(ObjectInputStream):::Reads the ObjectInputStream:::s->defaultReadObject->for->i->items->size
Menu#paramString():::Returns a string representing the state of this Menu:::str->return->super->paramString
Menu#initIDs():::Initialize JNI field and method IDs:::
Menu#getAccessibleContext():::Gets the AccessibleContext associated with this Menu:::if->new->AccessibleAWTMenu->return
Menu#getAccessibleChildIndex(MenuComponent):::Defined in MenuComponent:::return->items->indexOf
Menu.AccessibleAWTMenu#getAccessibleRole():::Get the role of this object.:::return
MenuBar#constructComponentName():::Construct a name for this MenuComponent:::synchronized->return
MenuBar#addNotify():::Creates the menu bar's peer:::synchronized->getTreeLock->if->getComponentFactory->createMenuBar->nmenus->getMenuCount->for->i
MenuBar#removeNotify():::Removes the menu bar's peer:::synchronized->getTreeLock->nmenus->getMenuCount->for->i->super->removeNotify
MenuBar#getHelpMenu():::Gets the help menu on the menu bar.:::return
MenuBar#setHelpMenu(Menu):::Sets the specified menu to be this menu bar's help menu:::synchronized->getTreeLock->if->return->if->remove->if->if->add->peer->if->if->m->addNotify->peer->addHelpMenu
MenuBar#add(Menu):::Adds the specified menu to the menu bar:::synchronized->getTreeLock->if->remove->peer->if->if->m->addNotify->menus->addElement->peer->addMenu->else->menus->addElement->return
MenuBar#remove(int):::Removes the menu located at the specified index from this menu bar.:::synchronized->getTreeLock->m->getMenu->menus->removeElementAt->peer->if->peer->delMenu->m->removeNotify->if
MenuBar#remove(MenuComponent):::Removes the specified menu component from this menu bar.:::synchronized->getTreeLock->index->menus->indexOf->if->remove
MenuBar#getMenuCount():::Gets the number of menus on the menu bar.:::return->countMenus
MenuBar#countMenus():::Gets the number of menus on the menu bar.:::return->getMenuCountImpl
MenuBar#getMenuCountImpl()::: menu bar get menu count impl:::return->menus->size
MenuBar#getMenu(int):::Gets the specified menu.:::return->getMenuImpl
MenuBar#getMenuImpl(int)::: menu bar get menu impl:::return->menus->elementAt
MenuBar#shortcuts():::Gets an enumeration of all menu shortcuts this menu bar is managing.:::shortcuts->new->Vector<>->nmenus->getMenuCount->for->i->return->shortcuts->elements
MenuBar#getShortcutMenuItem(MenuShortcut):::Gets the instance of MenuItem associated with the specified MenuShortcut object, or null if none of the menu items being managed by this menu bar is associated with the specified menu shortcut.:::nmenus->getMenuCount->for->i->return
MenuBar#handleShortcut(KeyEvent)::: menu bar handle shortcut:::id->e->getID->if->return->accelKey->Toolkit->getDefaultToolkit->getMenuShortcutKeyMaskEx->if->e->getModifiersEx->return->nmenus->getMenuCount->for->i->return
MenuBar#deleteShortcut(MenuShortcut):::Deletes the specified menu shortcut.:::nmenus->getMenuCount->for->i
MenuBar#writeObject(java.io.ObjectOutputStream):::Writes default serializable fields to stream.:::s->defaultWriteObject
MenuBar#readObject(ObjectInputStream):::Reads the ObjectInputStream:::s->defaultReadObject->for->i->menus->size
MenuBar#initIDs():::Initialize JNI field and method IDs:::
MenuBar#getAccessibleContext():::Gets the AccessibleContext associated with this MenuBar:::if->new->AccessibleAWTMenuBar->return
MenuBar#getAccessibleChildIndex(MenuComponent):::Defined in MenuComponent:::return->menus->indexOf
MenuBar.AccessibleAWTMenuBar#getAccessibleRole():::Get the role of this object.:::return
MenuComponent#getAccessControlContext()::: menu component get access control context:::if->throw->new->SecurityException->return
MenuComponent#constructComponentName():::Constructs a name for this MenuComponent:::return
MenuComponent#getComponentFactory()::: menu component get component factory:::toolkit->Toolkit->getDefaultToolkit->if->return->throw->new->AWTError
MenuComponent#getName():::Gets the name of the menu component.:::if->synchronized->if->constructComponentName->return
MenuComponent#setName(String):::Sets the name of the component to the specified string.:::synchronized
MenuComponent#getParent():::Returns the parent container for this menu component.:::return->getParent_NoClientCode
MenuComponent#getParent_NoClientCode()::: menu component get parent_ no client code:::return
MenuComponent#getFont():::Gets the font used for this menu component.:::font->if->return->parent->if->return->parent->getFont->return
MenuComponent#getFont_NoClientCode()::: menu component get font_ no client code:::font->if->return->parent->if->if->getFont_NoClientCode->else->if->getFont_NoClientCode->return
MenuComponent#setFont(Font):::Sets the font to be used for this menu component to the specified font:::synchronized->getTreeLock->peer->if->peer->setFont
MenuComponent#removeNotify():::Removes the menu component's peer:::synchronized->getTreeLock->p->if->Toolkit->getEventQueue->removeSourceEvents->p->dispose
MenuComponent#postEvent(Event):::Posts the specified event to the menu:::parent->if->parent->postEvent->return
MenuComponent#dispatchEvent(AWTEvent):::Delivers an event to this component or one of its sub components.:::dispatchEventImpl
MenuComponent#dispatchEventImpl(AWTEvent)::: menu component dispatch event impl:::EventQueue->setCurrentEventAndMostRecentTime->Toolkit->getDefaultToolkit->notifyAWTEventListeners->if->if->eventEnabled->processEvent->else->if->e->setSource->dispatchEvent->else->olde->e->convertToOld->if->postEvent
MenuComponent#eventEnabled(AWTEvent)::: menu component event enabled:::return
MenuComponent#processEvent(AWTEvent):::Processes events occurring on this menu component:::
MenuComponent#paramString():::Returns a string representing the state of this MenuComponent:::thisName->getName->return
MenuComponent#toString():::Returns a representation of this menu component as a string.:::return->getClass->getName->paramString
MenuComponent#getTreeLock():::Gets this component's locking object (the object that owns the thread synchronization monitor) for AWT component-tree and layout operations.:::return
MenuComponent#readObject(ObjectInputStream):::Reads the menu component from an object input stream.:::GraphicsEnvironment->checkHeadless->AccessController->getContext->s->defaultReadObject->AppContext->getAppContext
MenuComponent#initIDs():::Initialize JNI field and method IDs.:::
MenuComponent#getAccessibleContext():::Gets the AccessibleContext associated with this MenuComponent:::return
MenuComponent.AccessibleAWTMenuComponent#getAccessibleSelection():::Gets the AccessibleSelection associated with this object which allows its Accessible children to be selected.:::return
MenuComponent.AccessibleAWTMenuComponent#getAccessibleName():::Gets the accessible name of this object:::return
MenuComponent.AccessibleAWTMenuComponent#getAccessibleDescription():::Gets the accessible description of this object:::return
MenuComponent.AccessibleAWTMenuComponent#getAccessibleRole():::Gets the role of this object.:::return
MenuComponent.AccessibleAWTMenuComponent#getAccessibleStateSet():::Gets the state of this object.:::return->MenuComponent.this->getAccessibleStateSet
MenuComponent.AccessibleAWTMenuComponent#getAccessibleParent():::Gets the Accessible parent of this object:::if->return->else->parent->MenuComponent.this->getParent->if->return->return
MenuComponent.AccessibleAWTMenuComponent#getAccessibleIndexInParent():::Gets the index of this object in its accessible parent.:::return->MenuComponent.this->getAccessibleIndexInParent
MenuComponent.AccessibleAWTMenuComponent#getAccessibleChildrenCount():::Returns the number of accessible children in the object:::return
MenuComponent.AccessibleAWTMenuComponent#getAccessibleChild(int):::Returns the nth Accessible child of the object.:::return
MenuComponent.AccessibleAWTMenuComponent#getLocale():::Returns the locale of this object.:::parent->MenuComponent.this->getParent->if->return->getLocale->else->return->getDefault
MenuComponent.AccessibleAWTMenuComponent#getAccessibleComponent():::Gets the AccessibleComponent associated with this object if one exists:::return
MenuComponent.AccessibleAWTMenuComponent#getBackground():::Gets the background color of this object.:::return
MenuComponent.AccessibleAWTMenuComponent#setBackground(Color):::Sets the background color of this object:::
MenuComponent.AccessibleAWTMenuComponent#getForeground():::Gets the foreground color of this object.:::return
MenuComponent.AccessibleAWTMenuComponent#setForeground(Color):::Sets the foreground color of this object.:::
MenuComponent.AccessibleAWTMenuComponent#getCursor():::Gets the Cursor of this object.:::return
MenuComponent.AccessibleAWTMenuComponent#setCursor(Cursor):::Sets the Cursor of this object:::
MenuComponent.AccessibleAWTMenuComponent#getFont():::Gets the Font of this object.:::return->MenuComponent.this->getFont
MenuComponent.AccessibleAWTMenuComponent#setFont(Font):::Sets the Font of this object.:::MenuComponent.this->setFont
MenuComponent.AccessibleAWTMenuComponent#getFontMetrics(Font):::Gets the FontMetrics of this object.:::return
MenuComponent.AccessibleAWTMenuComponent#isEnabled():::Determines if the object is enabled.:::return
MenuComponent.AccessibleAWTMenuComponent#setEnabled(boolean):::Sets the enabled state of the object.:::
MenuComponent.AccessibleAWTMenuComponent#isVisible():::Determines if the object is visible:::return
MenuComponent.AccessibleAWTMenuComponent#setVisible(boolean):::Sets the visible state of the object.:::
MenuComponent.AccessibleAWTMenuComponent#isShowing():::Determines if the object is showing:::return
MenuComponent.AccessibleAWTMenuComponent#contains(Point):::Checks whether the specified point is within this object's bounds, where the point's x and y coordinates are defined to be relative to the coordinate system of the object.:::return
MenuComponent.AccessibleAWTMenuComponent#getLocationOnScreen():::Returns the location of the object on the screen.:::return
MenuComponent.AccessibleAWTMenuComponent#getLocation():::Gets the location of the object relative to the parent in the form of a point specifying the object's top-left corner in the screen's coordinate space.:::return
MenuComponent.AccessibleAWTMenuComponent#setLocation(Point):::Sets the location of the object relative to the parent.:::
MenuComponent.AccessibleAWTMenuComponent#getBounds():::Gets the bounds of this object in the form of a Rectangle object:::return
MenuComponent.AccessibleAWTMenuComponent#setBounds(Rectangle):::Sets the bounds of this object in the form of a Rectangle object:::
MenuComponent.AccessibleAWTMenuComponent#getSize():::Returns the size of this object in the form of a Dimension object:::return
MenuComponent.AccessibleAWTMenuComponent#setSize(Dimension):::Resizes this object.:::
MenuComponent.AccessibleAWTMenuComponent#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point:::return
MenuComponent.AccessibleAWTMenuComponent#isFocusTraversable():::Returns whether this object can accept focus or not.:::return
MenuComponent.AccessibleAWTMenuComponent#requestFocus():::Requests focus for this object.:::
MenuComponent.AccessibleAWTMenuComponent#addFocusListener(java.awt.event.FocusListener):::Adds the specified focus listener to receive focus events from this component.:::
MenuComponent.AccessibleAWTMenuComponent#removeFocusListener(java.awt.event.FocusListener):::Removes the specified focus listener so it no longer receives focus events from this component.:::
MenuComponent.AccessibleAWTMenuComponent#getAccessibleSelectionCount():::Returns the number of Accessible children currently selected:::return
MenuComponent.AccessibleAWTMenuComponent#getAccessibleSelection(int):::Returns an Accessible representing the specified selected child in the object:::return
MenuComponent.AccessibleAWTMenuComponent#isAccessibleChildSelected(int):::Determines if the current child of this object is selected.:::return
MenuComponent.AccessibleAWTMenuComponent#addAccessibleSelection(int):::Adds the specified Accessible child of the object to the object's selection:::
MenuComponent.AccessibleAWTMenuComponent#removeAccessibleSelection(int):::Removes the specified child of the object from the object's selection:::
MenuComponent.AccessibleAWTMenuComponent#clearAccessibleSelection():::Clears the selection in the object, so that no children in the object are selected.:::
MenuComponent.AccessibleAWTMenuComponent#selectAllAccessibleSelection():::Causes every child of the object to be selected if the object supports multiple selections.:::
MenuComponent#getAccessibleIndexInParent():::Gets the index of this object in its accessible parent.:::localParent->if->return->localParentMenu->return->localParentMenu->getAccessibleChildIndex
MenuComponent#getAccessibleChildIndex(MenuComponent):::Gets the index of the child within this MenuComponent.:::return
MenuComponent#getAccessibleStateSet():::Gets the state of this object.:::states->new->AccessibleStateSet->return
MenuContainer#getFont():::Returns the font in use by this container.:::
MenuContainer#remove(MenuComponent):::Removes the specified menu component from the menu.:::
MenuContainer#postEvent(Event):::Posts an event to the listeners.:::
MenuItem#constructComponentName():::Construct a name for this MenuComponent:::synchronized->return
MenuItem#addNotify():::Creates the menu item's peer:::synchronized->getTreeLock->if->getComponentFactory->createMenuItem
MenuItem#getLabel():::Gets the label for this menu item.:::return
MenuItem#setLabel(String):::Sets the label for this menu item to the specified label.:::peer->if->peer->setLabel
MenuItem#isEnabled():::Checks whether this menu item is enabled.:::return
MenuItem#setEnabled(boolean):::Sets whether or not this menu item can be chosen.:::enable
MenuItem#enable()::: menu item enable:::peer->if->peer->setEnabled
MenuItem#enable(boolean):::Sets whether or not this menu item can be chosen.:::if->enable->else->disable
MenuItem#disable()::: menu item disable:::peer->if->peer->setEnabled
MenuItem#getShortcut():::Get the MenuShortcut object associated with this menu item,:::return
MenuItem#setShortcut(MenuShortcut):::Set the MenuShortcut object associated with this menu item:::peer->if->peer->setLabel
MenuItem#deleteShortcut():::Delete any MenuShortcut object associated with this menu item.:::peer->if->peer->setLabel
MenuItem#deleteShortcut(MenuShortcut)::: menu item delete shortcut:::if->s->equals->peer->if->peer->setLabel
MenuItem#doMenuEvent(long, int)::: menu item do menu event:::Toolkit->getEventQueue->getActionCommand->new->ActionEvent->postEvent
MenuItem#isItemEnabled()::: menu item is item enabled:::if->isEnabled->return->container->getParent_NoClientCode->do->if->return->menu->if->menu->isEnabled->return->menu->getParent_NoClientCode->while->return
MenuItem#handleShortcut(KeyEvent)::: menu item handle shortcut:::s->e->getKeyCode->e->getModifiers->new->MenuShortcut->sE->e->getExtendedKeyCode->e->getModifiers->new->MenuShortcut->if->s->equals->sE->equals->isItemEnabled->if->e->getID->e->getWhen->e->getModifiers->doMenuEvent->else->return->return
MenuItem#getShortcutMenuItem(MenuShortcut)::: menu item get shortcut menu item:::return->s->equals
MenuItem#enableEvents(long):::Enables event delivery to this menu item for events to be defined by the specified event mask parameter  Since event types are automatically enabled when a listener for that type is added to the menu item, this method only needs to be invoked by subclasses of MenuItem which desire to have the specified event types delivered to processEvent regardless of whether a listener is registered.:::
MenuItem#disableEvents(long):::Disables event delivery to this menu item for events defined by the specified event mask parameter.:::
MenuItem#setActionCommand(String):::Sets the command name of the action event that is fired by this menu item:::
MenuItem#getActionCommand():::Gets the command name of the action event that is fired by this menu item.:::return->getActionCommandImpl
MenuItem#getActionCommandImpl()::: menu item get action command impl:::return
MenuItem#addActionListener(ActionListener):::Adds the specified action listener to receive action events from this menu item:::if->return->AWTEventMulticaster->add
MenuItem#removeActionListener(ActionListener):::Removes the specified action listener so it no longer receives action events from this menu item:::if->return->AWTEventMulticaster->remove
MenuItem#getActionListeners():::Returns an array of all the action listeners registered on this menu item.:::return->getListeners
MenuItem#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this MenuItem:::l->if->return->AWTEventMulticaster->getListeners
MenuItem#processEvent(AWTEvent):::Processes events on this menu item:::if->processActionEvent
MenuItem#eventEnabled(AWTEvent)::: menu item event enabled:::if->if->return->return->return->super->eventEnabled
MenuItem#processActionEvent(ActionEvent):::Processes action events occurring on this menu item, by dispatching them to any registered ActionListener objects:::listener->if->listener->actionPerformed
MenuItem#paramString():::Returns a string representing the state of this MenuItem:::str->if->return->super->paramString
MenuItem#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::s->defaultWriteObject->AWTEventMulticaster->save->s->writeObject
MenuItem#readObject(ObjectInputStream):::Reads the ObjectInputStream and if it isn't null adds a listener to receive action events fired by the Menu Item:::s->defaultReadObject->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addActionListener->else->s->readObject
MenuItem#initIDs():::Initialize JNI field and method IDs:::
MenuItem#getAccessibleContext():::Gets the AccessibleContext associated with this MenuItem:::if->new->AccessibleAWTMenuItem->return
MenuItem.AccessibleAWTMenuItem#getAccessibleName():::Get the accessible name of this object.:::if->return->else->if->getLabel->return->super->getAccessibleName->else->return->getLabel
MenuItem.AccessibleAWTMenuItem#getAccessibleRole():::Get the role of this object.:::return
MenuItem.AccessibleAWTMenuItem#getAccessibleAction():::Get the AccessibleAction associated with this object:::return
MenuItem.AccessibleAWTMenuItem#getAccessibleValue():::Get the AccessibleValue associated with this object:::return
MenuItem.AccessibleAWTMenuItem#getAccessibleActionCount():::Returns the number of Actions available in this object:::return
MenuItem.AccessibleAWTMenuItem#getAccessibleActionDescription(int):::Return a description of the specified action of the object.:::if->return->else->return
MenuItem.AccessibleAWTMenuItem#doAccessibleAction(int):::Perform the specified Action on the object:::if->Toolkit->getEventQueue->MenuItem.this->getActionCommand->EventQueue->getMostRecentEventTime->new->ActionEvent->postEvent->return->else->return
MenuItem.AccessibleAWTMenuItem#getCurrentAccessibleValue():::Get the value of this object as a Number.:::return->Integer->valueOf
MenuItem.AccessibleAWTMenuItem#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::return
MenuItem.AccessibleAWTMenuItem#getMinimumAccessibleValue():::Get the minimum value of this object as a Number.:::return->Integer->valueOf
MenuItem.AccessibleAWTMenuItem#getMaximumAccessibleValue():::Get the maximum value of this object as a Number.:::return->Integer->valueOf
MenuShortcut#getKey():::Returns the raw keycode of this MenuShortcut.:::return
MenuShortcut#usesShiftModifier():::Returns whether this MenuShortcut must be invoked using the SHIFT key.:::return
MenuShortcut#equals(MenuShortcut):::Returns whether this MenuShortcut is the same as another: equality is defined to mean that both MenuShortcuts use the same key and both either use or don't use the SHIFT key.:::return->s->getKey->s->usesShiftModifier
MenuShortcut#equals(Object):::Returns whether this MenuShortcut is the same as another: equality is defined to mean that both MenuShortcuts use the same key and both either use or don't use the SHIFT key.:::if->return->equals->return
MenuShortcut#hashCode():::Returns the hashcode for this MenuShortcut.:::return
MenuShortcut#toString():::Returns an internationalized description of the MenuShortcut.:::modifiers->if->GraphicsEnvironment->isHeadless->Toolkit->getDefaultToolkit->getMenuShortcutKeyMaskEx->if->usesShiftModifier->return->InputEvent->getModifiersExText->KeyEvent->getKeyText
MenuShortcut#paramString():::Returns the parameter string representing the state of this MenuShortcut:::str->if->usesShiftModifier->return
ModalEventFilter#getModalDialog()::: modal event filter get modal dialog:::return
ModalEventFilter#acceptEvent(AWTEvent)::: modal event filter accept event:::if->modalDialog->isVisible->return->eventID->event->getID->if->o->event->getSource->if->else->if->c->while->c->getParent_NoClientCode->if->return->acceptWindow->return
ModalEventFilter#acceptWindow(Window)::: modal event filter accept window:::
ModalEventFilter#disable()::: modal event filter disable:::
ModalEventFilter#compareTo(ModalEventFilter)::: modal event filter compare to:::anotherDialog->another->getModalDialog->c->while->if->return->c->getParent_NoClientCode->while->if->return->c->getParent_NoClientCode->blocker->modalDialog->getModalBlocker->while->if->return->blocker->getModalBlocker->anotherDialog->getModalBlocker->while->if->return->blocker->getModalBlocker->return->modalDialog->getModalityType->anotherDialog->getModalityType->compareTo
ModalEventFilter#createFilterForDialog(Dialog)::: modal event filter create filter for dialog:::switch->modalDialog->getModalityType->return->new->DocumentModalEventFilter->return->new->ApplicationModalEventFilter->return->new->ToolkitModalEventFilter->return
ModalEventFilter.ToolkitModalEventFilter#acceptWindow(Window)::: toolkit modal event filter accept window:::if->w->isModalExcluded->return->if->return->while->if->return->w->getOwner->return
ModalEventFilter.ApplicationModalEventFilter#acceptWindow(Window)::: application modal event filter accept window:::if->w->isModalExcluded->return->if->while->if->return->w->getOwner->return->return
ModalEventFilter.DocumentModalEventFilter#acceptWindow(Window)::: document modal event filter accept window:::if->w->isModalExcluded->w1->modalDialog->getOwner->while->if->return->w1->getOwner->return->while->if->return->if->return->w->getOwner->return
MouseInfo#getPointerInfo():::Returns a PointerInfo instance that represents the current location of the mouse pointer:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->security->System->getSecurityManager->if->security->checkPermission->toolkit->Toolkit->getDefaultToolkit->point->new->Point->deviceNum->if->getMouseInfoPeer->fillPointWithCoords->gds->GraphicsEnvironment->getLocalGraphicsEnvironment->getScreenDevices->retval->if->areScreenDevicesIndependent->new->PointerInfo->else->for->i->return
MouseInfo#areScreenDevicesIndependent(GraphicsDevice[])::: mouse info are screen devices independent:::for->i->return
MouseInfo#getNumberOfButtons():::Returns the number of buttons on the mouse:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->prop->Toolkit->getDefaultToolkit->getDesktopProperty->if->return->intValue->return
MultipleGradientPaint#getFractions():::Returns a copy of the array of floats used by this gradient to calculate color distribution:::return->Arrays->copyOf
MultipleGradientPaint#getColors():::Returns a copy of the array of colors used by this gradient:::return->Arrays->copyOf
MultipleGradientPaint#getCycleMethod():::Returns the enumerated type which specifies cycling behavior.:::return
MultipleGradientPaint#getColorSpace():::Returns the enumerated type which specifies color space for interpolation.:::return
MultipleGradientPaint#getTransform():::Returns a copy of the transform applied to the gradient:::return->new->AffineTransform
MultipleGradientPaint#getTransparency():::Returns the transparency mode for this Paint object.:::return
MultipleGradientPaintContext#calculateLookupData(Color[]):::This function is the meat of this class:::normalizedColors->if->new->ColorArr->for->i->else->new->floatArr->for->i->new->intArrs->Imin->for->i->estimatedSize->for->i->if->calculateMultipleArrayGradient->else->calculateSingleArrayGradient->if->else->ColorModel->getRGBdefault
MultipleGradientPaintContext#calculateSingleArrayGradient(Color[], float):::FAST LOOKUP METHOD  This method calculates the gradient color values and places them in a single int array, gradient[]:::rgb1->rgb2->gradientsTot->for->i->new->intArr->curOffset->for->i->getRGB->if->for->i
MultipleGradientPaintContext#calculateMultipleArrayGradient(Color[]):::SLOW LOOKUP METHOD  This method calculates the gradient color values for each interval and places each into its own 255 size array:::rgb1->rgb2->for->i->if->for->j
MultipleGradientPaintContext#interpolate(int, int, int[]):::Yet another helper function:::a1->r1->g1->b1->da->dr->dg->db->stepSize->for->i
MultipleGradientPaintContext#convertEntireColorLinearRGBtoSRGB(int):::Yet another helper function:::a1->r1->g1->b1->return
MultipleGradientPaintContext#indexIntoGradientsArrays(float):::Helper function to index into the gradients array:::if->if->else->if->else->if->if->else->if->part->if->if->return->else->for->i->return
MultipleGradientPaintContext#convertSRGBtoLinearRGB(int):::Helper function to convert a color component in sRGB space to linear RGB space:::input->output->if->else->Math->pow->return->Math->round
MultipleGradientPaintContext#convertLinearRGBtoSRGB(int):::Helper function to convert a color component in linear RGB space to SRGB space:::input->output->if->else->Math->pow->return->Math->round
MultipleGradientPaintContext#getRaster(int, int, int, int)::: multiple gradient paint context get raster:::raster->if->raster->getWidth->raster->getHeight->getCachedRaster->rasterDB->raster->getDataBuffer->pixels->rasterDB->getData->off->rasterDB->getOffset->scanlineStride->raster->getSampleModel->getScanlineStride->adjust->fillRaster->return
MultipleGradientPaintContext#fillRaster(int[], int, int, int, int, int, int)::: multiple gradient paint context fill raster:::
MultipleGradientPaintContext#getCachedRaster(ColorModel, int, int):::Took this cacheRaster code from GradientPaint:::if->if->ras->cached->get->if->ras->getWidth->ras->getHeight->return->return->cm->createCompatibleWritableRaster
MultipleGradientPaintContext#putCachedRaster(ColorModel, Raster):::Took this cacheRaster code from GradientPaint:::if->cras->cached->get->if->cw->cras->getWidth->ch->cras->getHeight->iw->ras->getWidth->ih->ras->getHeight->if->return->if->return->new->WeakReference<Raster>
MultipleGradientPaintContext#dispose()::: multiple gradient paint context dispose:::if->putCachedRaster
MultipleGradientPaintContext#getColorModel()::: multiple gradient paint context get color model:::return
PageAttributes#clone():::Creates and returns a copy of this PageAttributes.:::try->return->super->clone->catch->throw->new->InternalError->finally
PageAttributes#set(PageAttributes):::Sets all of the attributes of this PageAttributes to the same values as the attributes of obj.:::
PageAttributes#getColor():::Returns whether pages using these attributes will be rendered in color or monochrome:::return
PageAttributes#setColor(ColorType):::Specifies whether pages using these attributes will be rendered in color or monochrome:::if->throw->new->IllegalArgumentException
PageAttributes#getMedia():::Returns the paper size for pages using these attributes:::return
PageAttributes#setMedia(MediaType):::Specifies the desired paper size for pages using these attributes:::if->throw->new->IllegalArgumentException
PageAttributes#setMediaToDefault():::Sets the paper size for pages using these attributes to the default size for the default locale:::defaultCountry->Locale->getDefault->getCountry->if->defaultCountry->getCountry->equals->defaultCountry->getCountry->equals->setMedia->else->setMedia
PageAttributes#getOrientationRequested():::Returns the print orientation for pages using these attributes:::return
PageAttributes#setOrientationRequested(OrientationRequestedType):::Specifies the print orientation for pages using these attributes:::if->throw->new->IllegalArgumentException
PageAttributes#setOrientationRequested(int):::Specifies the print orientation for pages using these attributes:::switch->setOrientationRequested->break->setOrientationRequested->break->setOrientationRequested->break
PageAttributes#setOrientationRequestedToDefault():::Sets the print orientation for pages using these attributes to the default:::setOrientationRequested
PageAttributes#getOrigin():::Returns whether drawing at (0, 0) to pages using these attributes draws at the upper-left corner of the physical page, or at the upper-left corner of the printable area:::return
PageAttributes#setOrigin(OriginType):::Specifies whether drawing at (0, 0) to pages using these attributes draws at the upper-left corner of the physical page, or at the upper-left corner of the printable area:::if->throw->new->IllegalArgumentException
PageAttributes#getPrintQuality():::Returns the print quality for pages using these attributes:::return
PageAttributes#setPrintQuality(PrintQualityType):::Specifies the print quality for pages using these attributes:::if->throw->new->IllegalArgumentException
PageAttributes#setPrintQuality(int):::Specifies the print quality for pages using these attributes:::switch->setPrintQuality->break->setPrintQuality->break->setPrintQuality->break->setPrintQuality->break
PageAttributes#setPrintQualityToDefault():::Sets the print quality for pages using these attributes to the default:::setPrintQuality
PageAttributes#getPrinterResolution():::Returns the print resolution for pages using these attributes:::copy->new->intArr->return
PageAttributes#setPrinterResolution(int[]):::Specifies the desired print resolution for pages using these attributes:::if->throw->new->IllegalArgumentException->copy->new->intArr
PageAttributes#setPrinterResolution(int):::Specifies the desired cross feed and feed print resolutions in dots per inch for pages using these attributes:::new->intArr->setPrinterResolution
PageAttributes#setPrinterResolutionToDefault():::Sets the printer resolution for pages using these attributes to the default:::setPrinterResolution
PageAttributes#equals(Object):::Determines whether two PageAttributes are equal to each other:::if->return->rhs->return
PageAttributes#hashCode():::Returns a hash code value for this PageAttributes.:::return->color->hashCode->media->hashCode->orientationRequested->hashCode->origin->hashCode->printQuality->hashCode
PageAttributes#toString():::Returns a string representation of this PageAttributes.:::return->getColor->getMedia->getOrientationRequested->getOrigin->getPrintQuality
Paint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints):::Creates and returns a PaintContext used to generate the color pattern:::
PaintContext#dispose():::Releases the resources allocated for the operation.:::
PaintContext#getColorModel():::Returns the ColorModel of the output:::
PaintContext#getRaster(int, int, int, int):::Returns a Raster containing the colors generated for the graphics operation.:::
Panel#constructComponentName():::Construct a name for this component:::synchronized->return
Panel#addNotify()::: panel add notify:::synchronized->getTreeLock->if->getComponentFactory->createPanel->super->addNotify
Panel#getAccessibleContext():::Gets the AccessibleContext associated with this Panel:::if->new->AccessibleAWTPanel->return
Panel.AccessibleAWTPanel#getAccessibleRole():::Get the role of this object.:::return
Point#getX()::: point get x:::return
Point#getY()::: point get y:::return
Point#getLocation():::Returns the location of this point:::return->new->Point
Point#setLocation(Point):::Sets the location of the point to the specified location:::setLocation
Point#setLocation(int, int):::Changes the point to have the specified location:::move
Point#setLocation(double, double):::Sets the location of this point to the specified double coordinates:::Math->floor->Math->floor
Point#move(int, int):::Moves this point to the specified location in the (x,y) coordinate plane:::
Point#translate(int, int):::Translates this point, at location (x,y), by dx along the x axis and dy along the y axis so that it now represents the point (x+dx,y+dy).:::
Point#equals(Object):::Determines whether or not two points are equal:::if->pt->return->return->super->equals
Point#toString():::Returns a string representation of this point and its location in the (x,y) coordinate space:::return->getClass->getName
PointerInfo#getDevice():::Returns the GraphicsDevice where the mouse pointer was at the moment this PointerInfo was created.:::return
PointerInfo#getLocation():::Returns the Point that represents the coordinates of the pointer on the screen:::return
Polygon#reset():::Resets this Polygon object to an empty polygon:::
Polygon#invalidate():::Invalidates or flushes any internally-cached data that depends on the vertex coordinates of this Polygon:::
Polygon#translate(int, int):::Translates the vertices of the Polygon by deltaX along the x axis and by deltaY along the y axis.:::for->i->if->bounds->translate
Polygon#calculateBounds(int[], int[], int)::: polygon calculate bounds:::boundsMinX->boundsMinY->boundsMaxX->boundsMaxY->for->i->new->Rectangle
Polygon#updateBounds(int, int)::: polygon update bounds:::if->else->Math->max->if->else->Math->max
Polygon#addPoint(int, int):::Appends the specified coordinates to this Polygon:::if->newLength->if->else->if->Integer->highestOneBit->Arrays->copyOf->Arrays->copyOf->if->updateBounds
Polygon#getBounds():::Gets the bounding box of this Polygon:::return->getBoundingBox
Polygon#getBoundingBox():::Returns the bounds of this Polygon.:::if->return->new->Rectangle->if->calculateBounds->return->bounds->getBounds
Polygon#contains(Point):::Determines whether the specified Point is inside this Polygon.:::return->contains
Polygon#contains(int, int):::Determines whether the specified coordinates are inside this Polygon.:::return->contains
Polygon#inside(int, int):::Determines whether the specified coordinates are contained in this Polygon.:::return->contains
Polygon#getBounds2D()::: polygon get bounds2 d:::return->getBounds
Polygon#contains(double, double)::: polygon contains:::if->getBoundingBox->contains->return->hits->lastx->lasty->curx->cury->for->i->return
Polygon#getCrossings(double, double, double, double)::: polygon get crossings:::cross->new->Crossings.EvenOdd->lastx->lasty->curx->cury->for->i->return
Polygon#contains(Point2D)::: polygon contains:::return->p->getX->p->getY->contains
Polygon#intersects(double, double, double, double)::: polygon intersects:::if->getBoundingBox->intersects->return->cross->getCrossings->return->cross->isEmpty
Polygon#intersects(Rectangle2D)::: polygon intersects:::return->r->getX->r->getY->r->getWidth->r->getHeight->intersects
Polygon#contains(double, double, double, double)::: polygon contains:::if->getBoundingBox->intersects->return->cross->getCrossings->return->cross->covers
Polygon#contains(Rectangle2D)::: polygon contains:::return->r->getX->r->getY->r->getWidth->r->getHeight->contains
Polygon#getPathIterator(AffineTransform):::Returns an iterator object that iterates along the boundary of this Polygon and provides access to the geometry of the outline of this Polygon:::return->new->PolygonPathIterator
Polygon#getPathIterator(AffineTransform, double):::Returns an iterator object that iterates along the boundary of the Shape and provides access to the geometry of the outline of the Shape:::return->getPathIterator
Polygon.PolygonPathIterator#getWindingRule():::Returns the winding rule for determining the interior of the path.:::return
Polygon.PolygonPathIterator#isDone():::Tests if there are more points to read.:::return
Polygon.PolygonPathIterator#next():::Moves the iterator forwards, along the primary direction of traversal, to the next segment of the path when there are more points in that direction.:::
Polygon.PolygonPathIterator#currentSegment(float[]):::Returns the coordinates and type of the current path segment in the iteration:::if->return->if->transform->transform->return
Polygon.PolygonPathIterator#currentSegment(double[]):::Returns the coordinates and type of the current path segment in the iteration:::if->return->if->transform->transform->return
PopupMenu#getParent()::: popup menu get parent:::if->return->return->super->getParent
PopupMenu#constructComponentName():::Constructs a name for this MenuComponent:::synchronized->return
PopupMenu#addNotify():::Creates the popup menu's peer:::synchronized->getTreeLock->if->super->addNotify->else->if->getComponentFactory->createPopupMenu->nitems->getItemCount->for->i
PopupMenu#show(Component, int, int):::Shows the popup menu at the x, y position relative to an origin component:::localParent->if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->compParent->if->if->if->isAncestorOf->throw->new->IllegalArgumentException->else->throw->new->IllegalArgumentException->if->compParent->isShowing->throw->new->RuntimeException->if->addNotify->synchronized->getTreeLock->if->new->Event->show
PopupMenu#getAccessibleContext():::Gets the AccessibleContext associated with this PopupMenu.:::if->new->AccessibleAWTPopupMenu->return
PopupMenu.AccessibleAWTPopupMenu#getAccessibleRole():::Get the role of this object.:::return
PrintGraphics#getPrintJob():::Returns the PrintJob object from which this PrintGraphics object originated.:::
PrintJob#getGraphics():::Gets a Graphics object that will draw to the next page:::
PrintJob#getPageDimension():::Returns the dimensions of the page in pixels:::
PrintJob#getPageResolution():::Returns the resolution of the page in pixels per inch:::
PrintJob#lastPageFirst():::Returns true if the last page will be printed first.:::
PrintJob#end():::Ends the print job and does any necessary cleanup.:::
PrintJob#finalize():::Ends this print job once it is no longer referenced.:::end
RadialGradientPaint#createGradientTransform(Rectangle2D)::: radial gradient paint create gradient transform:::cx->r->getCenterX->cy->r->getCenterY->xform->AffineTransform->getTranslateInstance->xform->r->getWidth->r->getHeight->scale->xform->translate->return
RadialGradientPaint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints):::Creates and returns a PaintContext used to generate a circular radial color gradient pattern:::new->AffineTransform->transform->concatenate->return->center->getX->center->getY->focus->getX->focus->getY->new->RadialGradientPaintContext
RadialGradientPaint#getCenterPoint():::Returns a copy of the center point of the radial gradient.:::return->center->getX->center->getY->new->Point2D.Double
RadialGradientPaint#getFocusPoint():::Returns a copy of the focus point of the radial gradient:::return->focus->getX->focus->getY->new->Point2D.Double
RadialGradientPaint#getRadius():::Returns the radius of the circle defining the radial gradient.:::return
RadialGradientPaintContext#fillRaster(int[], int, int, int, int, int, int):::Return a Raster containing the colors generated for the graphics operation.:::if->simpleNonCyclicFillRaster->else->cyclicCircularGradientFillRaster
RadialGradientPaintContext#simpleNonCyclicFillRaster(int[], int, int, int, int, int, int):::This code works in the simplest of cases, where the focus == center point, the gradient is noncyclic, and the gradient lookup method is fast (single array index, no conversion necessary).:::rowX->rowY->gDeltaDelta->rgbclip->for->j
RadialGradientPaintContext#cyclicCircularGradientFillRaster(int[], int, int, int, int, int, int):::Fill the raster, cycling the gradient colors when a point falls outside of the perimeter of the 100% stop circle:::constC->A->B->C->slope->yintcpt->solutionX->solutionY->constX->constY->precalc2->precalc3->g->det->currentToFocusSq->intersectToFocusSq->deltaXSq->deltaYSq->indexer->pixInc->for->j
Rectangle#initIDs():::Initialize JNI field and method IDs:::
Rectangle#getX():::Returns the X coordinate of the bounding Rectangle in double precision.:::return
Rectangle#getY():::Returns the Y coordinate of the bounding Rectangle in double precision.:::return
Rectangle#getWidth():::Returns the width of the bounding Rectangle in double precision.:::return
Rectangle#getHeight():::Returns the height of the bounding Rectangle in double precision.:::return
Rectangle#getBounds():::Gets the bounding Rectangle of this Rectangle:::return->new->Rectangle
Rectangle#getBounds2D()::: rectangle get bounds2 d:::return->new->Rectangle
Rectangle#setBounds(Rectangle):::Sets the bounding Rectangle of this Rectangle to match the specified Rectangle:::setBounds
Rectangle#setBounds(int, int, int, int):::Sets the bounding Rectangle of this Rectangle to the specified x, y, width, and height:::reshape
Rectangle#setRect(double, double, double, double):::Sets the bounds of this Rectangle to the integer bounds which encompass the specified x, y, width, and height:::newx->newy->neww->newh->if->else->clip->if->clip->if->else->clip->if->clip->reshape
Rectangle#clip(double, boolean)::: rectangle clip:::if->return->if->return->return->Math->ceil->Math->floor
Rectangle#reshape(int, int, int, int):::Sets the bounding Rectangle of this Rectangle to the specified x, y, width, and height.:::
Rectangle#getLocation():::Returns the location of this Rectangle:::return->new->Point
Rectangle#setLocation(Point):::Moves this Rectangle to the specified location:::setLocation
Rectangle#setLocation(int, int):::Moves this Rectangle to the specified location:::move
Rectangle#move(int, int):::Moves this Rectangle to the specified location.:::
Rectangle#translate(int, int):::Translates this Rectangle the indicated distance, to the right along the X coordinate axis, and downward along the Y coordinate axis.:::oldv->newv->if->if->if->else->if->if->if->if->if->if->else->if->if->if
Rectangle#getSize():::Gets the size of this Rectangle, represented by the returned Dimension:::return->new->Dimension
Rectangle#setSize(Dimension):::Sets the size of this Rectangle to match the specified Dimension:::setSize
Rectangle#setSize(int, int):::Sets the size of this Rectangle to the specified width and height:::resize
Rectangle#resize(int, int):::Sets the size of this Rectangle to the specified width and height.:::
Rectangle#contains(Point):::Checks whether or not this Rectangle contains the specified Point.:::return->contains
Rectangle#contains(int, int):::Checks whether or not this Rectangle contains the point at the specified location (x,y).:::return->inside
Rectangle#contains(Rectangle):::Checks whether or not this Rectangle entirely contains the specified Rectangle.:::return->contains
Rectangle#contains(int, int, int, int):::Checks whether this Rectangle entirely contains the Rectangle at the specified location (X,Y) with the specified dimensions (W,H).:::w->h->if->return->x->y->if->return->if->if->return->else->if->return->if->if->return->else->if->return->return
Rectangle#inside(int, int):::Checks whether or not this Rectangle contains the point at the specified location (X,Y).:::w->h->if->return->x->y->if->return->return
Rectangle#intersects(Rectangle):::Determines whether or not this Rectangle and the specified Rectangle intersect:::tw->th->rw->rh->if->return->tx->ty->rx->ry->return
Rectangle#intersection(Rectangle):::Computes the intersection of this Rectangle with the specified Rectangle:::tx1->ty1->rx1->ry1->tx2->ty2->rx2->ry2->if->if->if->if->if->if->return->new->Rectangle
Rectangle#union(Rectangle):::Computes the union of this Rectangle with the specified Rectangle:::tx2->ty2->if->return->new->Rectangle->rx2->ry2->if->return->new->Rectangle->tx1->ty1->rx1->ry1->if->if->if->if->if->if->return->new->Rectangle
Rectangle#add(int, int):::Adds a point, specified by the integer arguments newx,newy to the bounds of this Rectangle:::if->return->x1->y1->x2->y2->if->if->if->if->if->if->reshape
Rectangle#add(Point):::Adds the specified Point to the bounds of this Rectangle:::add
Rectangle#add(Rectangle):::Adds a Rectangle to this Rectangle:::tx2->ty2->if->reshape->rx2->ry2->if->return->tx1->ty1->rx1->ry1->if->if->if->if->if->if->reshape
Rectangle#grow(int, int):::Resizes the Rectangle both horizontally and vertically:::x0->y0->x1->y1->if->if->if->else->if->else->if->else->if->if->else->if->if->if->if->else->if->else->if->else->if->if->else->if->reshape
Rectangle#isEmpty()::: rectangle is empty:::return
Rectangle#outcode(double, double)::: rectangle outcode:::out->if->else->if->else->if->if->else->if->else->if->return
Rectangle#createIntersection(Rectangle2D)::: rectangle create intersection:::if->return->intersection->dest->new->Rectangle2D.Double->Rectangle2D->intersect->return
Rectangle#createUnion(Rectangle2D)::: rectangle create union:::if->return->union->dest->new->Rectangle2D.Double->Rectangle2D->union->return
Rectangle#equals(Object):::Checks whether two rectangles are equal:::if->r->return->return->super->equals
Rectangle#toString():::Returns a String representing this Rectangle and its values.:::return->getClass->getName
RenderingHints.Key#getIdentity()::: key get identity:::return->getClass->getName->Integer->System->getClass->identityHashCode->toHexString->Integer->toHexString
RenderingHints.Key#recordIdentity(Key)::: key record identity:::identity->k->getIdentity->otherref->identitymap->get->if->otherkey->get->if->otherkey->getClass->k->getClass->throw->new->IllegalArgumentException->identitymap->new->WeakReference<Key>->put
RenderingHints.Key#isCompatibleValue(Object):::Returns true if the specified object is a valid value for this Key.:::
RenderingHints.Key#intKey():::Returns the private integer key that the subclass instantiated this Key with.:::return
RenderingHints.Key#hashCode():::The hash code for all Key objects will be the same as the system identity code of the object as defined by the System.identityHashCode() method.:::return->super->hashCode
RenderingHints.Key#equals(Object):::The equals method for all Key objects will return the same result as the equality operator '=='.:::return
RenderingHints#size():::Returns the number of key-value mappings in this RenderingHints.:::return->hintmap->size
RenderingHints#isEmpty():::Returns true if this RenderingHints contains no key-value mappings.:::return->hintmap->isEmpty
RenderingHints#containsKey(Object):::Returns true if this RenderingHints  contains a mapping for the specified key.:::return->hintmap->containsKey
RenderingHints#containsValue(Object):::Returns true if this RenderingHints maps one or more keys to the specified value:::return->hintmap->containsValue
RenderingHints#get(Object):::Returns the value to which the specified key is mapped.:::return->hintmap->get
RenderingHints#put(Object, Object):::Maps the specified key to the specified value in this RenderingHints object:::if->isCompatibleValue->throw->new->IllegalArgumentException->return->hintmap->put
RenderingHints#add(RenderingHints):::Adds all of the keys and corresponding values from the specified RenderingHints object to this RenderingHints object:::hintmap->putAll
RenderingHints#clear():::Clears this RenderingHints object of all key/value pairs.:::hintmap->clear
RenderingHints#remove(Object):::Removes the key and its corresponding value from this RenderingHints object:::return->hintmap->remove
RenderingHints#putAll(Map):::Copies all of the mappings from the specified Map to this RenderingHints:::if->isInstance->foreach->m->entrySet->hintmap->entry->getKey->entry->getValue->put->else->foreach->m->entrySet->entry->getKey->entry->getValue->put
RenderingHints#keySet():::Returns a Set view of the Keys contained in this RenderingHints:::return->hintmap->keySet
RenderingHints#values():::Returns a Collection view of the values contained in this RenderingHints:::return->hintmap->values
RenderingHints#entrySet():::Returns a Set view of the mappings contained in this RenderingHints:::return->Collections->unmodifiableMap->entrySet
RenderingHints#equals(Object):::Compares the specified Object with this RenderingHints for equality:::if->return->hintmap->equals->else->if->return->hintmap->equals->return
RenderingHints#hashCode():::Returns the hash code value for this RenderingHints:::return->hintmap->hashCode
RenderingHints#clone():::Creates a clone of this RenderingHints object that has the same contents as this RenderingHints object.:::rh->try->super->clone->if->hintmap->clone->catch->throw->new->InternalError->finally->return
RenderingHints#toString():::Returns a rather long string representation of the hashmap which contains the mappings of keys to values for this RenderingHints object.:::if->return->getClass->getName->Integer->hashCode->toHexString->return->hintmap->toString
Robot#init(GraphicsDevice)::: robot init:::checkRobotAllowed->toolkit->Toolkit->getDefaultToolkit->if->createRobot->new->RobotDisposer->addRecord->initLegalButtonMask
Robot#initLegalButtonMask()::: robot init legal button mask:::if->return->tmpMask->if->Toolkit->getDefaultToolkit->areExtraMouseButtonsEnabled->if->Toolkit->getDefaultToolkit->buttonsNumber->Toolkit->getDefaultToolkit->getNumberOfButtons->for->i
Robot#checkRobotAllowed()::: robot check robot allowed:::security->System->getSecurityManager->if->security->checkPermission
Robot#checkIsScreenDevice(GraphicsDevice)::: robot check is screen device:::if->device->getType->throw->new->IllegalArgumentException
Robot.RobotDisposer#dispose()::: robot disposer dispose:::if->peer->dispose
Robot#mouseMove(int, int):::Moves mouse pointer to given screen coordinates.:::peer->mouseMove->afterEvent
Robot#mousePress(int):::Presses one or more mouse buttons:::checkButtonsArgument->peer->mousePress->afterEvent
Robot#mouseRelease(int):::Releases one or more mouse buttons.:::checkButtonsArgument->peer->mouseRelease->afterEvent
Robot#checkButtonsArgument(int)::: robot check buttons argument:::if->throw->new->IllegalArgumentException
Robot#mouseWheel(int):::Rotates the scroll wheel on wheel-equipped mice.:::peer->mouseWheel->afterEvent
Robot#keyPress(int):::Presses a given key:::checkKeycodeArgument->peer->keyPress->afterEvent
Robot#keyRelease(int):::Releases a given key:::checkKeycodeArgument->peer->keyRelease->afterEvent
Robot#checkKeycodeArgument(int)::: robot check keycode argument:::if->throw->new->IllegalArgumentException
Robot#getPixelColor(int, int):::Returns the color of a pixel at the given screen coordinates.:::checkScreenCaptureAllowed->tx->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->getDefaultTransform->tx->getScaleX->tx->getScaleY->color->peer->getRGBPixel->new->Color->return
Robot#createScreenCapture(Rectangle):::Creates an image containing pixels read from the screen:::return->createCompatibleImage
Robot#createMultiResolutionScreenCapture(Rectangle):::Creates an image containing pixels read from the screen:::return->createCompatibleImage->new->BaseMultiResolutionImage
Robot#createCompatibleImage(Rectangle, boolean)::: robot create compatible image:::checkScreenCaptureAllowed->checkValidRect->lowResolutionImage->highResolutionImage->buffer->raster->imageArray->if->new->DirectColorModel->bandmasks->new->intArr->screenCapCM->getRedMask->screenCapCM->getGreenMask->screenCapCM->getBlueMask->Toolkit->getDefaultToolkit->sync->gc->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->SunGraphicsEnvironment->screenRect->getCenterX->screenRect->getCenterY->getGraphicsConfigurationAtPoint->tx->gc->getDefaultTransform->uiScaleX->tx->getScaleX->uiScaleY->tx->getScaleY->pixels->if->peer->getRGBPixels->new->DataBufferInt->screenCapCM->getRedMask->screenCapCM->getGreenMask->screenCapCM->getBlueMask->Raster->createPackedRaster->SunWritableRaster->makeTrackable->new->BufferedImage->new->BufferedImageArr->else->sX->Math->floor->sY->Math->floor->sWidth->Math->ceil->sHeight->Math->ceil->temppixels->scaledRect->new->Rectangle->peer->getRGBPixels->new->DataBufferInt->Raster->createPackedRaster->SunWritableRaster->makeTrackable->new->BufferedImage->highResolutionImage->getType->new->BufferedImage->g->lowResolutionImage->createGraphics->g->setRenderingHint->g->setRenderingHint->g->setRenderingHint->g->drawImage->g->dispose->if->new->BufferedImageArr->else->new->BufferedImageArr->return
Robot#checkValidRect(Rectangle)::: robot check valid rect:::if->throw->new->IllegalArgumentException
Robot#checkScreenCaptureAllowed()::: robot check screen capture allowed:::security->System->getSecurityManager->if->security->checkPermission
Robot#afterEvent()::: robot after event:::autoWaitForIdle->autoDelay
Robot#isAutoWaitForIdle():::Returns whether this Robot automatically invokes waitForIdle after generating an event.:::return
Robot#setAutoWaitForIdle(boolean):::Sets whether this Robot automatically invokes waitForIdle after generating an event.:::
Robot#autoWaitForIdle()::: robot auto wait for idle:::if->waitForIdle
Robot#getAutoDelay():::Returns the number of milliseconds this Robot sleeps after generating an event.:::return
Robot#setAutoDelay(int):::Sets the number of milliseconds this Robot sleeps after generating an event.:::checkDelayArgument
Robot#autoDelay()::: robot auto delay:::delay
Robot#delay(int):::Sleeps for the specified time:::checkDelayArgument->try->Thread->sleep->catch->ite->printStackTrace->finally
Robot#checkDelayArgument(int)::: robot check delay argument:::if->throw->new->IllegalArgumentException
Robot#waitForIdle():::Waits until all events currently on the event queue have been processed.:::checkNotDispatchThread->SunToolkit->flushPendingEvents->Toolkit->getDefaultToolkit->realSync
Robot#checkNotDispatchThread()::: robot check not dispatch thread:::if->EventQueue->isDispatchThread->throw->new->IllegalThreadStateException
Robot#toString():::Returns a string representation of this Robot.:::params->getAutoDelay->isAutoWaitForIdle->return->getClass->getName
Scrollbar#initIDs():::Initialize JNI field and method IDs.:::
Scrollbar#constructComponentName():::Constructs a name for this component:::synchronized->return
Scrollbar#addNotify():::Creates the Scrollbar's peer:::synchronized->getTreeLock->if->getComponentFactory->createScrollbar->super->addNotify
Scrollbar#getOrientation():::Returns the orientation of this scroll bar.:::return
Scrollbar#setOrientation(int):::Sets the orientation for this scroll bar.:::synchronized->getTreeLock->if->return->switch->break->throw->new->IllegalArgumentException->if->removeNotify->addNotify->invalidate->if->accessibleContext->firePropertyChange
Scrollbar#getValue():::Gets the current value of this scroll bar.:::return
Scrollbar#setValue(int):::Sets the value of this scroll bar to the specified value:::setValues
Scrollbar#getMinimum():::Gets the minimum value of this scroll bar.:::return
Scrollbar#setMinimum(int):::Sets the minimum value of this scroll bar:::setValues
Scrollbar#getMaximum():::Gets the maximum value of this scroll bar.:::return
Scrollbar#setMaximum(int):::Sets the maximum value of this scroll bar:::if->if->setValues
Scrollbar#getVisibleAmount():::Gets the visible amount of this scroll bar:::return->getVisible
Scrollbar#getVisible():::Returns the visible amount of this scroll bar.:::return
Scrollbar#setVisibleAmount(int):::Sets the visible amount of this scroll bar:::setValues
Scrollbar#setUnitIncrement(int):::Sets the unit increment for this scroll bar:::setLineIncrement
Scrollbar#setLineIncrement(int):::Sets the unit increment for this scroll bar.:::tmp->if->return->peer->if->peer->setLineIncrement
Scrollbar#getUnitIncrement():::Gets the unit increment for this scrollbar:::return->getLineIncrement
Scrollbar#getLineIncrement():::Returns the unit increment for this scrollbar.:::return
Scrollbar#setBlockIncrement(int):::Sets the block increment for this scroll bar:::setPageIncrement
Scrollbar#setPageIncrement(int):::Sets the block increment for this scroll bar.:::tmp->if->return->peer->if->peer->setPageIncrement
Scrollbar#getBlockIncrement():::Gets the block increment of this scroll bar:::return->getPageIncrement
Scrollbar#getPageIncrement():::Returns the block increment of this scroll bar.:::return
Scrollbar#setValues(int, int, int, int):::Sets the values of four properties for this scroll bar: value, visibleAmount, minimum, and maximum:::oldValue->synchronized->if->if->maxMinusMin->if->if->if->if->if->peer->if->peer->setValues->if->accessibleContext->Integer->valueOf->Integer->valueOf->firePropertyChange
Scrollbar#getValueIsAdjusting():::Returns true if the value is in the process of changing as a result of actions being taken by the user.:::return
Scrollbar#setValueIsAdjusting(boolean):::Sets the valueIsAdjusting property.:::oldValue->synchronized->if->accessibleContext->firePropertyChange
Scrollbar#addAdjustmentListener(AdjustmentListener):::Adds the specified adjustment listener to receive instances of AdjustmentEvent from this scroll bar:::if->return->AWTEventMulticaster->add
Scrollbar#removeAdjustmentListener(AdjustmentListener):::Removes the specified adjustment listener so that it no longer receives instances of AdjustmentEvent from this scroll bar:::if->return->AWTEventMulticaster->remove
Scrollbar#getAdjustmentListeners():::Returns an array of all the adjustment listeners registered on this scrollbar.:::return->getListeners
Scrollbar#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this Scrollbar:::l->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
Scrollbar#eventEnabled(AWTEvent)::: scrollbar event enabled:::if->if->return->return->return->super->eventEnabled
Scrollbar#processEvent(AWTEvent):::Processes events on this scroll bar:::if->processAdjustmentEvent->return->super->processEvent
Scrollbar#processAdjustmentEvent(AdjustmentEvent):::Processes adjustment events occurring on this scrollbar by dispatching them to any registered AdjustmentListener objects:::listener->if->listener->adjustmentValueChanged
Scrollbar#paramString():::Returns a string representing the state of this Scrollbar:::return->super->paramString
Scrollbar#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::s->defaultWriteObject->AWTEventMulticaster->save->s->writeObject
Scrollbar#readObject(ObjectInputStream):::Reads the ObjectInputStream and if it isn't null adds a listener to receive adjustment events fired by the Scrollbar:::GraphicsEnvironment->checkHeadless->s->defaultReadObject->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addAdjustmentListener->else->s->readObject
Scrollbar#getAccessibleContext():::Gets the AccessibleContext associated with this Scrollbar:::if->new->AccessibleAWTScrollBar->return
Scrollbar.AccessibleAWTScrollBar#getAccessibleStateSet():::Get the state set of this object.:::states->super->getAccessibleStateSet->if->getValueIsAdjusting->states->add->if->getOrientation->states->add->else->states->add->return
Scrollbar.AccessibleAWTScrollBar#getAccessibleRole():::Get the role of this object.:::return
Scrollbar.AccessibleAWTScrollBar#getAccessibleValue():::Get the AccessibleValue associated with this object:::return
Scrollbar.AccessibleAWTScrollBar#getCurrentAccessibleValue():::Get the accessible value of this object.:::return->Integer->getValue->valueOf
Scrollbar.AccessibleAWTScrollBar#setCurrentAccessibleValue(Number):::Set the value of this object as a Number.:::if->n->intValue->setValue->return->else->return
Scrollbar.AccessibleAWTScrollBar#getMinimumAccessibleValue():::Get the minimum accessible value of this object.:::return->Integer->getMinimum->valueOf
Scrollbar.AccessibleAWTScrollBar#getMaximumAccessibleValue():::Get the maximum accessible value of this object.:::return->Integer->getMaximum->valueOf
ScrollPane#initIDs():::Initialize JNI field and method IDs:::
ScrollPane#constructComponentName():::Construct a name for this component:::synchronized->return
ScrollPane#addToPanel(Component, Object, int)::: scroll pane add to panel:::child->new->Panel->child->new->BorderLayout->setLayout->child->add->super->addImpl->validate
ScrollPane#addImpl(Component, Object, int):::Adds the specified component to this scroll pane container:::synchronized->getTreeLock->if->getComponentCount->remove->if->throw->new->IllegalArgumentException->if->SunToolkit->isLightweightOrUnknown->super->addImpl->else->addToPanel
ScrollPane#getScrollbarDisplayPolicy():::Returns the display policy for the scrollbars.:::return
ScrollPane#getViewportSize():::Returns the current size of the scroll pane's view port.:::i->getInsets->return->new->Dimension
ScrollPane#getHScrollbarHeight():::Returns the height that would be occupied by a horizontal scrollbar, which is independent of whether it is currently displayed by the scroll pane or not.:::h->if->peer->if->peer->getHScrollbarHeight->return
ScrollPane#getVScrollbarWidth():::Returns the width that would be occupied by a vertical scrollbar, which is independent of whether it is currently displayed by the scroll pane or not.:::w->if->peer->if->peer->getVScrollbarWidth->return
ScrollPane#getVAdjustable():::Returns the ScrollPaneAdjustable object which represents the state of the vertical scrollbar:::return
ScrollPane#getHAdjustable():::Returns the ScrollPaneAdjustable object which represents the state of the horizontal scrollbar:::return
ScrollPane#setScrollPosition(int, int):::Scrolls to the specified position within the child component:::synchronized->getTreeLock->if->getComponentCount->throw->new->NullPointerException->hAdjustable->setValue->vAdjustable->setValue
ScrollPane#setScrollPosition(Point):::Scrolls to the specified position within the child component:::setScrollPosition
ScrollPane#getScrollPosition():::Returns the current x,y position within the child which is displayed at the 0,0 location of the scrolled panel's view port:::synchronized->getTreeLock->if->getComponentCount->throw->new->NullPointerException->return->hAdjustable->getValue->vAdjustable->getValue->new->Point
ScrollPane#setLayout(LayoutManager):::Sets the layout manager for this container:::throw->new->AWTError
ScrollPane#doLayout():::Lays out this container by resizing its child to its preferred size:::layout
ScrollPane#calculateChildSize():::Determine the size to allocate the child component:::size->getSize->insets->getInsets->viewWidth->viewHeight->vbarOn->hbarOn->child->getComponent->childSize->child->getPreferredSize->new->Dimension->if->else->if->else->vbarWidth->getVScrollbarWidth->hbarHeight->getHScrollbarHeight->if->if->if->if->return
ScrollPane#layout()::: scroll pane layout:::if->getComponentCount->return->c->getComponent->p->getScrollPosition->cs->calculateChildSize->vs->getViewportSize->c->reshape->peer->if->peer->childResized->getViewportSize->hAdjustable->setSpan->vAdjustable->setSpan
ScrollPane#printComponents(Graphics):::Prints the component in this scroll pane.:::if->getComponentCount->return->c->getComponent->p->c->getLocation->vs->getViewportSize->i->getInsets->cg->g->create->try->cg->clipRect->cg->translate->c->printAll->catch->finally->cg->dispose
ScrollPane#addNotify():::Creates the scroll pane's peer.:::synchronized->getTreeLock->vAdjustableValue->hAdjustableValue->if->getComponentCount->vAdjustable->getValue->hAdjustable->getValue->vAdjustable->setValue->hAdjustable->setValue->if->getComponentFactory->createScrollPane->super->addNotify->if->getComponentCount->vAdjustable->setValue->hAdjustable->setValue
ScrollPane#paramString():::Returns a string representing the state of this ScrollPane:::sdpStr->switch->break->break->break->p->getComponentCount->getScrollPosition->new->Point->i->getInsets->return->super->paramString->isWheelScrollingEnabled
ScrollPane#autoProcessMouseWheel(MouseWheelEvent)::: scroll pane auto process mouse wheel:::processMouseWheelEvent
ScrollPane#processMouseWheelEvent(MouseWheelEvent):::Process mouse wheel events that are delivered to this ScrollPane by scrolling an appropriate amount:::if->isWheelScrollingEnabled->ScrollPaneWheelScroller->handleWheelScrolling->e->consume->super->processMouseWheelEvent
ScrollPane#eventTypeEnabled(int):::If wheel scrolling is enabled, we return true for MouseWheelEvents:::if->isWheelScrollingEnabled->return->else->return->super->eventTypeEnabled
ScrollPane#setWheelScrollingEnabled(boolean):::Enables/disables scrolling in response to movement of the mouse wheel:::
ScrollPane#isWheelScrollingEnabled():::Indicates whether or not scrolling will take place in response to the mouse wheel:::return
ScrollPane#writeObject(ObjectOutputStream):::Writes default serializable fields to stream.:::s->defaultWriteObject
ScrollPane#readObject(ObjectInputStream):::Reads default serializable fields to stream.:::GraphicsEnvironment->checkHeadless->f->s->readFields->f->get->f->get->f->get->f->get
ScrollPane.PeerFixer#adjustmentValueChanged(AdjustmentEvent):::Invoked when the value of the adjustable has changed.:::adj->e->getAdjustable->value->e->getValue->peer->if->peer->setValue->c->scroller->getComponent->switch->adj->getOrientation->c->c->getLocation->move->break->c->c->getLocation->move->break->throw->new->IllegalArgumentException
ScrollPane#getAccessibleContext():::Gets the AccessibleContext associated with this ScrollPane:::if->new->AccessibleAWTScrollPane->return
ScrollPane.AccessibleAWTScrollPane#getAccessibleRole():::Get the role of this object.:::return
PeerFixer#adjustmentValueChanged(AdjustmentEvent):::Invoked when the value of the adjustable has changed.:::adj->e->getAdjustable->value->e->getValue->peer->if->peer->setValue->c->scroller->getComponent->switch->adj->getOrientation->c->c->getLocation->move->break->c->c->getLocation->move->break->throw->new->IllegalArgumentException
ScrollPaneAdjustable#initIDs():::Initialize JNI field and method ids.:::
ScrollPaneAdjustable#setSpan(int, int, int):::This is called by the scrollpane itself to update the minimum, maximum and visible values:::Math->max->Math->min->Math->max->Math->max->setValue
ScrollPaneAdjustable#getOrientation():::Returns the orientation of this scrollbar.:::return
ScrollPaneAdjustable#setMinimum(int):::This method should NOT be called by user code:::throw->new->AWTError
ScrollPaneAdjustable#getMinimum()::: scroll pane adjustable get minimum:::return
ScrollPaneAdjustable#setMaximum(int):::This method should NOT be called by user code:::throw->new->AWTError
ScrollPaneAdjustable#getMaximum()::: scroll pane adjustable get maximum:::return
ScrollPaneAdjustable#setUnitIncrement(int)::: scroll pane adjustable set unit increment:::if->if->peer->peer->setUnitIncrement
ScrollPaneAdjustable#getUnitIncrement()::: scroll pane adjustable get unit increment:::return
ScrollPaneAdjustable#setBlockIncrement(int)::: scroll pane adjustable set block increment:::
ScrollPaneAdjustable#getBlockIncrement()::: scroll pane adjustable get block increment:::return
ScrollPaneAdjustable#setVisibleAmount(int):::This method should NOT be called by user code:::throw->new->AWTError
ScrollPaneAdjustable#getVisibleAmount()::: scroll pane adjustable get visible amount:::return
ScrollPaneAdjustable#setValueIsAdjusting(boolean):::Sets the valueIsAdjusting property.:::if->e->new->AdjustmentEvent->adjustmentListener->adjustmentValueChanged
ScrollPaneAdjustable#getValueIsAdjusting():::Returns true if the value is in the process of changing as a result of actions being taken by the user.:::return
ScrollPaneAdjustable#setValue(int):::Sets the value of this scrollbar to the specified value:::setTypedValue
ScrollPaneAdjustable#setTypedValue(int, int):::Sets the value of this scrollbar to the specified value:::Math->max->Math->min->if->e->new->AdjustmentEvent->adjustmentListener->adjustmentValueChanged
ScrollPaneAdjustable#getValue()::: scroll pane adjustable get value:::return
ScrollPaneAdjustable#addAdjustmentListener(AdjustmentListener):::Adds the specified adjustment listener to receive adjustment events from this ScrollPaneAdjustable:::if->return->AWTEventMulticaster->add
ScrollPaneAdjustable#removeAdjustmentListener(AdjustmentListener):::Removes the specified adjustment listener so that it no longer receives adjustment events from this ScrollPaneAdjustable:::if->return->AWTEventMulticaster->remove
ScrollPaneAdjustable#getAdjustmentListeners():::Returns an array of all the adjustment listeners registered on this ScrollPaneAdjustable.:::return->AWTEventMulticaster->getListeners
ScrollPaneAdjustable#toString():::Returns a string representation of this scrollbar and its values.:::return->getClass->getName->paramString
ScrollPaneAdjustable#paramString():::Returns a string representing the state of this scrollbar:::return
SecondaryLoop#enter():::Blocks the execution of the current thread and enters a new secondary event loop on the event dispatch thread:::
SecondaryLoop#exit():::Unblocks the execution of the thread blocked by the #enter method and exits the secondary loop:::
SentEvent#dispatch()::: sent event dispatch:::try->if->Toolkit->getEventQueue->dispatchEvent->catch->finally->if->SunToolkit->new->SentEvent->postEvent->synchronized->notifyAll
SentEvent#dispose()::: sent event dispose:::if->SunToolkit->new->SentEvent->postEvent->synchronized->notifyAll
SequencedEvent.SequencedEventsFilter#acceptEvent(AWTEvent)::: sequenced events filter accept event:::if->ev->getID->synchronized->it->list->iterator->while->it->hasNext->iev->it->next->if->iev->equals->break->else->if->iev->equals->return->else->if->ev->getID->return->add->return
SequencedEvent#dispatch():::Dispatches the nested event after all previous nested events have been dispatched or disposed:::try->AppContext->getAppContext->if->getFirst->if->EventQueue->isDispatchThread->if->Thread->currentThread->edt->Thread->currentThread->edt->SequencedEvent.this->isFirstOrDisposed->new->SequencedEventsFilter->pumpEventsForFilter->else->if->fxCheckSequenceThread->start->try->fxCheckSequenceThread->join->catch->finally->else->while->isFirstOrDisposed->synchronized->try->wait->catch->break->finally->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->setCurrentSequencedEvent->Toolkit->getEventQueue->dispatchEvent->catch->finally->dispose
SequencedEvent#isOwnerAppContextDisposed(SequencedEvent):::true only if event exists and nested source appContext is disposed.:::if->target->getSource->if->return->isDisposed->return
SequencedEvent#isFirstOrDisposed():::Sequenced events are dispatched in order, so we cannot dispatch until we are the first sequenced event in the queue (i.e:::if->return->return->getFirstWithContext
SequencedEvent#getFirst()::: sequenced event get first:::return->list->getFirst
SequencedEvent#getFirstWithContext()::: sequenced event get first with context:::first->getFirst->while->isOwnerAppContextDisposed->first->dispose->getFirst->return
SequencedEvent#dispose():::Disposes of this instance:::synchronized->if->return->if->KeyboardFocusManager->getCurrentKeyboardFocusManager->getCurrentSequencedEvent->KeyboardFocusManager->getCurrentKeyboardFocusManager->setCurrentSequencedEvent->next->synchronized->notifyAll->if->list->getFirst->list->removeFirst->if->list->isEmpty->list->getFirst->else->list->remove->if->SunToolkit->new->SentEvent->postEvent->foreach->SunToolkit->postEvent
Shape#getBounds():::Returns an integer Rectangle that completely encloses the Shape:::
Shape#getBounds2D():::Returns a high precision and more accurate bounding box of the Shape than the getBounds method:::
Shape#contains(double, double):::Tests if the specified coordinates are inside the boundary of the Shape, as described by the  definition of insideness.:::
Shape#contains(Point2D):::Tests if a specified Point2D is inside the boundary of the Shape, as described by the  definition of insideness.:::
Shape#intersects(double, double, double, double):::Tests if the interior of the Shape intersects the interior of a specified rectangular area:::
Shape#intersects(Rectangle2D):::Tests if the interior of the Shape intersects the interior of a specified Rectangle2D:::
Shape#contains(double, double, double, double):::Tests if the interior of the Shape entirely contains the specified rectangular area:::
Shape#contains(Rectangle2D):::Tests if the interior of the Shape entirely contains the specified Rectangle2D:::
Shape#getPathIterator(AffineTransform):::Returns an iterator object that iterates along the Shape boundary and provides access to the geometry of the Shape outline:::
Shape#getPathIterator(AffineTransform, double):::Returns an iterator object that iterates along the Shape boundary and provides access to a flattened view of the Shape outline geometry:::
SplashScreen#getSplashScreen():::Returns the SplashScreen object used for Java startup splash screen control on systems that support display.:::synchronized->if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->if->new->java.security.PrivilegedAction<Void>->doPrivileged->ptr->_getInstance->if->_isVisible->new->SplashScreen->return
SplashScreen#setImageURL(URL):::Changes the splash screen image:::checkVisible->connection->imageURL->openConnection->connection->connect->length->connection->getContentLength->stream->connection->getInputStream->buf->new->byteArr->off->while->available->stream->available->if->if->if->oldBuf->new->byteArr->System->arraycopy->result->stream->read->if->break->synchronized->checkVisible->if->_setImageData->throw->new->IOException
SplashScreen#checkVisible()::: splash screen check visible:::if->isVisible->throw->new->IllegalStateException
SplashScreen#getImageURL():::Returns the current splash screen image.:::synchronized->checkVisible->if->try->fileName->_getImageFileName->jarName->_getImageJarName->if->if->new->File->toURL->toString->new->URL->else->new->File->toURL->catch->if->log->isLoggable->log->fine->finally->return
SplashScreen#getBounds():::Returns the bounds of the splash screen window as a Rectangle:::synchronized->checkVisible->scale->_getScaleFactor->bounds->_getBounds->if->bounds->bounds->getWidth->bounds->getHeight->setSize->return
SplashScreen#getSize():::Returns the size of the splash screen window as a Dimension:::return->getBounds->getSize
SplashScreen#createGraphics():::Creates a graphics context (as a Graphics2D object) for the splash screen overlay image, which allows you to draw over the splash screen:::synchronized->checkVisible->if->dim->_getBounds->getSize->new->BufferedImage->scale->_getScaleFactor->g->image->createGraphics->if->g->scale->return
SplashScreen#update():::Updates the splash window with current contents of the overlay image.:::image->synchronized->checkVisible->if->throw->new->IllegalStateException->buf->image->getRaster->getDataBuffer->if->throw->buf->getClass->getName->new->AssertionError->numBanks->buf->getNumBanks->if->throw->new->AssertionError->if->image->getSampleModel->throw->image->getSampleModel->getClass->getName->new->AssertionError->sm->image->getSampleModel->scanlineStride->sm->getScanlineStride->rect->image->getRaster->getBounds->data->SunWritableRaster->stealData->synchronized->checkVisible->_update
SplashScreen#close():::Hides the splash screen, closes the window, and releases all associated resources.:::synchronized->checkVisible->_close->SplashScreen->markClosed
SplashScreen#markClosed()::: splash screen mark closed:::synchronized
SplashScreen#isVisible():::Determines whether the splash screen is visible:::synchronized->return->_isVisible
SplashScreen#_update(long, int[], int, int, int, int, int)::: splash screen _update:::
SplashScreen#_isVisible(long)::: splash screen _is visible:::
SplashScreen#_getBounds(long)::: splash screen _get bounds:::
SplashScreen#_getInstance()::: splash screen _get instance:::
SplashScreen#_close(long)::: splash screen _close:::
SplashScreen#_getImageFileName(long)::: splash screen _get image file name:::
SplashScreen#_getImageJarName(long)::: splash screen _get image jar name:::
SplashScreen#_setImageData(long, byte[])::: splash screen _set image data:::
SplashScreen#_getScaleFactor(long)::: splash screen _get scale factor:::
Stroke#createStrokedShape(Shape):::Returns an outline Shape which encloses the area that should be painted when the Shape is stroked according to the rules defined by the object implementing the Stroke interface.:::
SystemColor#updateSystemColors():::Called from <init> and toolkit to update the above systemColors cache.:::if->GraphicsEnvironment->isHeadless->Toolkit->getDefaultToolkit->loadSystemColors->for->i
SystemColor#toString():::Returns a string representation of this Color's values:::return->getClass->getName
SystemColor#readResolve():::The design of the SystemColor class assumes that the SystemColor object instances stored in the static final fields above are the only instances that can be used by developers:::return
SystemColor#writeReplace():::Returns a specialized version of the SystemColor object for writing to the serialized stream.:::color->new->SystemColor->return
SystemTray#getSystemTray():::Gets the SystemTray instance that represents the desktop's tray area:::checkSystemTrayAllowed->if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->initializeSystemTrayIfNeeded->if->isSupported->throw->new->UnsupportedOperationException->return
SystemTray#isSupported():::Returns whether the system tray is supported on the current platform:::toolkit->Toolkit->getDefaultToolkit->if->initializeSystemTrayIfNeeded->return->isTraySupported->else->if->return->isTraySupported->else->return
SystemTray#add(TrayIcon):::Adds a TrayIcon to the SystemTray:::if->throw->new->NullPointerException->oldArray->newArray->icons->synchronized->systemTray->getTrayIcons->tmp->AppContext->getAppContext->get->if->new->Vector<TrayIcon>->AppContext->getAppContext->put->else->if->icons->contains->throw->new->IllegalArgumentException->icons->add->systemTray->getTrayIcons->trayIcon->setID->try->trayIcon->addNotify->catch->icons->remove->throw->finally->firePropertyChange
SystemTray#remove(TrayIcon):::Removes the specified TrayIcon from the SystemTray:::if->return->oldArray->newArray->synchronized->systemTray->getTrayIcons->icons->AppContext->getAppContext->get->if->icons->remove->return->trayIcon->removeNotify->systemTray->getTrayIcons->firePropertyChange
SystemTray#getTrayIcons():::Returns an array of all icons added to the tray by this application:::icons->AppContext->getAppContext->get->if->return->icons->icons->size->new->TrayIconArr->toArray->return
SystemTray#getTrayIconSize():::Returns the size, in pixels, of the space that a tray icon will occupy in the system tray:::return->peer->getTrayIconSize
SystemTray#addPropertyChangeListener(String, PropertyChangeListener):::Adds a PropertyChangeListener to the list of listeners for the specific property:::if->return->getCurrentChangeSupport->addPropertyChangeListener
SystemTray#removePropertyChangeListener(String, PropertyChangeListener):::Removes a PropertyChangeListener from the listener list for a specific property:::if->return->getCurrentChangeSupport->removePropertyChangeListener
SystemTray#getPropertyChangeListeners(String):::Returns an array of all the listeners that have been associated with the named property:::return->getCurrentChangeSupport->getPropertyChangeListeners
SystemTray#firePropertyChange(String, Object, Object):::Support for reporting bound property changes for Object properties:::if->oldValue->equals->return->getCurrentChangeSupport->firePropertyChange
SystemTray#getCurrentChangeSupport():::Returns the current PropertyChangeSupport instance for the calling thread's context.:::changeSupport->AppContext->getAppContext->get->if->new->PropertyChangeSupport->AppContext->getAppContext->put->return
SystemTray#addNotify()::: system tray add notify:::if->toolkit->Toolkit->getDefaultToolkit->if->Toolkit->getDefaultToolkit->createSystemTray->else->if->Toolkit->getDefaultToolkit->createSystemTray
SystemTray#checkSystemTrayAllowed()::: system tray check system tray allowed:::security->System->getSecurityManager->if->security->checkPermission
SystemTray#initializeSystemTrayIfNeeded()::: system tray initialize system tray if needed:::synchronized->if->new->SystemTray
Taskbar#isSupported(Feature):::Tests whether a Feature is supported on the current platform.:::return->peer->isSupported
Taskbar#checkFeatureSupport(Feature):::Checks if the feature type is supported.:::if->isSupported->throw->featureType->name->new->UnsupportedOperationException
Taskbar#checkEventsProcessingPermission()::: Calls to the security manager's checkPermission method with  an RuntimePermission("canProcessApplicationEvents") permissions.:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission
Taskbar#getTaskbar():::Returns the Taskbar instance of the current taskbar context:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->if->Taskbar->isTaskbarSupported->throw->new->UnsupportedOperationException->context->getAppContext->taskbar->context->get->if->new->Taskbar->context->put->return
Taskbar#isTaskbarSupported():::Tests whether this class is supported on the current platform:::defaultToolkit->Toolkit->getDefaultToolkit->if->return->isTaskbarSupported->return
Taskbar#requestUserAttention(boolean, boolean):::Requests user attention to this application:::checkEventsProcessingPermission->checkFeatureSupport->peer->requestUserAttention
Taskbar#requestWindowUserAttention(Window):::Requests user attention to the specified window:::checkEventsProcessingPermission->checkFeatureSupport->peer->requestWindowUserAttention
Taskbar#setMenu(PopupMenu):::Attaches the contents of the provided PopupMenu to the application icon in the task area.:::checkEventsProcessingPermission->checkFeatureSupport->peer->setMenu
Taskbar#getMenu():::Gets PopupMenu used to add items to this application's icon in system task area.:::checkEventsProcessingPermission->checkFeatureSupport->return->peer->getMenu
Taskbar#setIconImage(Image):::Changes this application's icon to the provided image.:::checkEventsProcessingPermission->checkFeatureSupport->peer->setIconImage
Taskbar#getIconImage():::Obtains an image of this application's icon.:::checkEventsProcessingPermission->checkFeatureSupport->return->peer->getIconImage
Taskbar#setIconBadge(String):::Affixes a small system-provided badge to this application's icon:::checkEventsProcessingPermission->checkFeatureSupport->peer->setIconBadge
Taskbar#setWindowIconBadge(Window, Image):::Affixes a small badge to this application's icon in the task area for the specified window:::checkEventsProcessingPermission->checkFeatureSupport->if->peer->setWindowIconBadge
Taskbar#setProgressValue(int):::Affixes a small system-provided progress bar to this application's icon.:::checkEventsProcessingPermission->checkFeatureSupport->peer->setProgressValue
Taskbar#setWindowProgressValue(Window, int):::Displays a determinate progress bar in the task area for the specified window:::checkEventsProcessingPermission->checkFeatureSupport->if->peer->setWindowProgressValue
Taskbar#setWindowProgressState(Window, State):::Sets a progress state for a specified window:::checkEventsProcessingPermission->checkFeatureSupport->if->peer->setWindowProgressState
TextArea#initIDs():::Initialize JNI field and method ids:::
TextArea#constructComponentName():::Construct a name for this component:::synchronized->return
TextArea#addNotify():::Creates the TextArea's peer:::synchronized->getTreeLock->if->getComponentFactory->createTextArea->super->addNotify
TextArea#insert(String, int):::Inserts the specified text at the specified position in this text area:::insertText
TextArea#insertText(String, int):::Inserts the specified text at the specified position in this text area.:::peer->if->peer->insert->text->substring->text->substring
TextArea#append(String):::Appends the given text to the text area's current text:::appendText
TextArea#appendText(String):::Appends the given text to the text area's current text.:::getText->length->insertText
TextArea#replaceRange(String, int, int):::Replaces text between the indicated start and end positions with the specified replacement text:::replaceText
TextArea#replaceText(String, int, int):::Replaces a range of characters between the indicated start and end positions with the specified replacement text (the text at the end position will not be replaced).:::peer->if->peer->replaceRange->text->substring->text->substring
TextArea#getRows():::Returns the number of rows in the text area.:::return
TextArea#setRows(int):::Sets the number of rows for this text area.:::oldVal->if->throw->new->IllegalArgumentException->if->invalidate
TextArea#getColumns():::Returns the number of columns in this text area.:::return
TextArea#setColumns(int):::Sets the number of columns for this text area.:::oldVal->if->throw->new->IllegalArgumentException->if->invalidate
TextArea#getScrollbarVisibility():::Returns an enumerated value that indicates which scroll bars the text area uses:::return
TextArea#getPreferredSize(int, int):::Determines the preferred size of a text area with the specified number of rows and columns.:::return->preferredSize
TextArea#preferredSize(int, int):::Determines the preferred size of the text area with the specified number of rows and columns.:::synchronized->getTreeLock->peer->return->peer->getPreferredSize->super->preferredSize
TextArea#getPreferredSize():::Determines the preferred size of this text area.:::return->preferredSize
TextArea#preferredSize()::: text area preferred size:::synchronized->getTreeLock->return->preferredSize->super->preferredSize
TextArea#getMinimumSize(int, int):::Determines the minimum size of a text area with the specified number of rows and columns.:::return->minimumSize
TextArea#minimumSize(int, int):::Determines the minimum size of the text area with the specified number of rows and columns.:::synchronized->getTreeLock->peer->return->peer->getMinimumSize->super->minimumSize
TextArea#getMinimumSize():::Determines the minimum size of this text area.:::return->minimumSize
TextArea#minimumSize()::: text area minimum size:::synchronized->getTreeLock->return->minimumSize->super->minimumSize
TextArea#paramString():::Returns a string representing the state of this TextArea:::sbVisStr->switch->break->break->break->break->return->super->paramString
TextArea#readObject(ObjectInputStream):::Read the ObjectInputStream.:::s->defaultReadObject->if->if->if->if->setFocusTraversalKeys->setFocusTraversalKeys
TextArea#getAccessibleContext():::Returns the AccessibleContext associated with this TextArea:::if->new->AccessibleAWTTextArea->return
TextArea.AccessibleAWTTextArea#getAccessibleStateSet():::Gets the state set of this object.:::states->super->getAccessibleStateSet->states->add->return
TextComponent#enableInputMethodsIfNecessary()::: text component enable input methods if necessary:::if->try->toolkit->Toolkit->getDefaultToolkit->shouldEnable->if->enableInputMethodsForTextComponent->enableInputMethods->catch->finally
TextComponent#enableInputMethods(boolean):::Enables or disables input method support for this text component:::super->enableInputMethods
TextComponent#areInputMethodsEnabled()::: text component are input methods enabled:::if->enableInputMethodsIfNecessary->return
TextComponent#getInputMethodRequests()::: text component get input method requests:::peer->if->return->peer->getInputMethodRequests->else->return
TextComponent#addNotify():::Makes this Component displayable by connecting it to a native screen resource:::super->addNotify->enableInputMethodsIfNecessary
TextComponent#removeNotify():::Removes the TextComponent's peer:::synchronized->getTreeLock->peer->if->peer->getText->peer->getSelectionStart->peer->getSelectionEnd->super->removeNotify
TextComponent#setText(String):::Sets the text that is presented by this text component to be the specified text.:::if->peer->if->peer->getText->if->t->equals->peer->setText->else
TextComponent#getText():::Returns the text that is presented by this text component:::peer->if->peer->getText->return
TextComponent#getSelectedText():::Returns the selected text from the text that is presented by this text component.:::return->getText->getSelectionStart->getSelectionEnd->substring
TextComponent#isEditable():::Indicates whether or not this text component is editable.:::return
TextComponent#setEditable(boolean):::Sets the flag that determines whether or not this text component is editable:::if->return->peer->if->peer->setEditable
TextComponent#getBackground():::Gets the background color of this text component:::if->return->return->super->getBackground
TextComponent#setBackground(Color):::Sets the background color of this text component.:::super->setBackground
TextComponent#getSelectionStart():::Gets the start position of the selected text in this text component.:::peer->if->peer->getSelectionStart->return
TextComponent#setSelectionStart(int):::Sets the selection start for this text component to the specified position:::getSelectionEnd->select
TextComponent#getSelectionEnd():::Gets the end position of the selected text in this text component.:::peer->if->peer->getSelectionEnd->return
TextComponent#setSelectionEnd(int):::Sets the selection end for this text component to the specified position:::getSelectionStart->select
TextComponent#select(int, int):::Selects the text between the specified start and end positions:::text->getText->if->if->text->length->text->length->if->text->length->text->length->if->peer->if->peer->select
TextComponent#selectAll():::Selects all the text in this text component.:::getText->length->peer->if->peer->select
TextComponent#setCaretPosition(int):::Sets the position of the text insertion caret:::if->throw->new->IllegalArgumentException->maxposition->getText->length->if->peer->if->peer->setCaretPosition->else->select
TextComponent#getCaretPosition():::Returns the position of the text insertion caret:::peer->position->if->peer->getCaretPosition->else->maxposition->getText->length->if->return
TextComponent#addTextListener(TextListener):::Adds the specified text event listener to receive text events from this text component:::if->return->AWTEventMulticaster->add
TextComponent#removeTextListener(TextListener):::Removes the specified text event listener so that it no longer receives text events from this text component If l is null, no exception is thrown and no action is performed:::if->return->AWTEventMulticaster->remove
TextComponent#getTextListeners():::Returns an array of all the text listeners registered on this text component.:::return->getListeners
TextComponent#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this TextComponent:::l->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
TextComponent#eventEnabled(AWTEvent)::: text component event enabled:::if->if->return->return->return->super->eventEnabled
TextComponent#processEvent(AWTEvent):::Processes events on this text component:::if->processTextEvent->return->super->processEvent
TextComponent#processTextEvent(TextEvent):::Processes text events occurring on this text component by dispatching them to any registered TextListener objects:::listener->if->id->e->getID->switch->listener->textValueChanged->break
TextComponent#paramString():::Returns a string representing the state of this TextComponent:::str->super->paramString->getText->if->return->getSelectionStart->getSelectionEnd
TextComponent#canAccessClipboard():::Assigns a valid value to the canAccessClipboard instance variable.:::sm->System->getSecurityManager->if->return->try->sm->checkPermission->return->catch->finally->return
TextComponent#writeObject(java.io.ObjectOutputStream):::Writes default serializable fields to stream:::peer->if->peer->getText->peer->getSelectionStart->peer->getSelectionEnd->s->defaultWriteObject->AWTEventMulticaster->save->s->writeObject
TextComponent#readObject(ObjectInputStream):::Read the ObjectInputStream, and if it isn't null, add a listener to receive text events fired by the TextComponent:::GraphicsEnvironment->checkHeadless->s->defaultReadObject->select->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addTextListener->else->s->readObject->enableInputMethodsIfNecessary
TextComponent#getAccessibleContext():::Gets the AccessibleContext associated with this TextComponent:::if->new->AccessibleAWTTextComponent->return
TextComponent.AccessibleAWTTextComponent#textValueChanged(TextEvent):::TextListener notification of a text value change.:::cpos->Integer->TextComponent.this->getCaretPosition->valueOf->firePropertyChange
TextComponent.AccessibleAWTTextComponent#getAccessibleStateSet():::Gets the state set of the TextComponent:::states->super->getAccessibleStateSet->if->TextComponent.this->isEditable->states->add->return
TextComponent.AccessibleAWTTextComponent#getAccessibleRole():::Gets the role of this object.:::return
TextComponent.AccessibleAWTTextComponent#getAccessibleText():::Get the AccessibleText associated with this object:::return
TextComponent.AccessibleAWTTextComponent#getIndexAtPoint(Point):::Given a point in local coordinates, return the zero-based index of the character under that Point:::return
TextComponent.AccessibleAWTTextComponent#getCharacterBounds(int):::Determines the bounding box of the character at the given index into the string:::return
TextComponent.AccessibleAWTTextComponent#getCharCount():::Returns the number of characters (valid indices):::return->TextComponent.this->getText->length
TextComponent.AccessibleAWTTextComponent#getCaretPosition():::Returns the zero-based offset of the caret:::return->TextComponent.this->getCaretPosition
TextComponent.AccessibleAWTTextComponent#getCharacterAttribute(int):::Returns the AttributeSet for a given character (at a given index).:::return
TextComponent.AccessibleAWTTextComponent#getSelectionStart():::Returns the start offset within the selected text:::return->TextComponent.this->getSelectionStart
TextComponent.AccessibleAWTTextComponent#getSelectionEnd():::Returns the end offset within the selected text:::return->TextComponent.this->getSelectionEnd
TextComponent.AccessibleAWTTextComponent#getSelectedText():::Returns the portion of the text that is selected.:::selText->TextComponent.this->getSelectedText->if->selText->equals->return->return
TextComponent.AccessibleAWTTextComponent#getAtIndex(int, int):::Returns the String at a given index.:::if->TextComponent.this->getText->length->return->switch->return->TextComponent.this->getText->substring->s->TextComponent.this->getText->words->BreakIterator->getWordInstance->words->setText->end->words->following->return->s->words->previous->substring->s->TextComponent.this->getText->sentence->BreakIterator->getSentenceInstance->sentence->setText->end->sentence->following->return->s->sentence->previous->substring->return
TextComponent.AccessibleAWTTextComponent#findWordLimit(int, BreakIterator, boolean, String):::Needed to unify forward and backward searching:::last->words->following->words->preceding->current->words->next->words->previous->while->for->p->Math->min->Math->max->words->next->words->previous->return
TextComponent.AccessibleAWTTextComponent#getAfterIndex(int, int):::Returns the String after a given index.:::if->TextComponent.this->getText->length->return->switch->if->TextComponent.this->getText->length->return->return->TextComponent.this->getText->substring->s->TextComponent.this->getText->words->BreakIterator->getWordInstance->words->setText->start->findWordLimit->if->s->length->return->end->words->following->if->s->length->return->return->s->substring->s->TextComponent.this->getText->sentence->BreakIterator->getSentenceInstance->sentence->setText->start->sentence->following->if->s->length->return->end->sentence->following->if->s->length->return->return->s->substring->return
TextComponent.AccessibleAWTTextComponent#getBeforeIndex(int, int):::Returns the String before a given index.:::if->TextComponent.this->getText->length->return->switch->if->return->return->TextComponent.this->getText->substring->s->TextComponent.this->getText->words->BreakIterator->getWordInstance->words->setText->end->findWordLimit->if->return->start->words->preceding->if->return->return->s->substring->s->TextComponent.this->getText->sentence->BreakIterator->getSentenceInstance->sentence->setText->end->sentence->following->sentence->previous->start->sentence->previous->if->return->return->s->substring->return
TextField#initIDs():::Initialize JNI field and method ids:::
TextField#constructComponentName():::Construct a name for this component:::synchronized->return
TextField#addNotify():::Creates the TextField's peer:::synchronized->getTreeLock->if->getComponentFactory->createTextField->super->addNotify
TextField#getEchoChar():::Gets the character that is to be used for echoing:::return
TextField#setEchoChar(char):::Sets the echo character for this text field:::setEchoCharacter
TextField#setEchoCharacter(char):::Sets the character to be echoed when protected input is displayed.:::if->peer->if->peer->setEchoChar
TextField#setText(String):::Sets the text that is presented by this text component to be the specified text.:::super->replaceEOL->setText->invalidateIfValid
TextField#replaceEOL(String):::Replaces EOL characters from the text variable with a space character.:::if->return->strEOLs->System->lineSeparator->foreach->if->text->contains->text->replace->return
TextField#echoCharIsSet():::Indicates whether or not this text field has a character set for echoing:::return
TextField#getColumns():::Gets the number of columns in this text field:::return
TextField#setColumns(int):::Sets the number of columns in this text field:::oldVal->synchronized->if->throw->new->IllegalArgumentException->if->if->invalidate
TextField#getPreferredSize(int):::Gets the preferred size of this text field with the specified number of columns.:::return->preferredSize
TextField#preferredSize(int):::Returns the preferred size for this text field with the specified number of columns.:::synchronized->getTreeLock->peer->return->peer->getPreferredSize->super->preferredSize
TextField#getPreferredSize():::Gets the preferred size of this text field.:::return->preferredSize
TextField#preferredSize()::: text field preferred size:::synchronized->getTreeLock->return->preferredSize->super->preferredSize
TextField#getMinimumSize(int):::Gets the minimum dimensions for a text field with the specified number of columns.:::return->minimumSize
TextField#minimumSize(int):::Returns the minimum dimensions for a text field with the specified number of columns.:::synchronized->getTreeLock->peer->return->peer->getMinimumSize->super->minimumSize
TextField#getMinimumSize():::Gets the minimum dimensions for this text field.:::return->minimumSize
TextField#minimumSize()::: text field minimum size:::synchronized->getTreeLock->return->minimumSize->super->minimumSize
TextField#addActionListener(ActionListener):::Adds the specified action listener to receive action events from this text field:::if->return->AWTEventMulticaster->add
TextField#removeActionListener(ActionListener):::Removes the specified action listener so that it no longer receives action events from this text field:::if->return->AWTEventMulticaster->remove
TextField#getActionListeners():::Returns an array of all the action listeners registered on this textfield.:::return->getListeners
TextField#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this TextField:::l->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
TextField#eventEnabled(AWTEvent)::: text field event enabled:::if->if->return->return->return->super->eventEnabled
TextField#processEvent(AWTEvent):::Processes events on this text field:::if->processActionEvent->return->super->processEvent
TextField#processActionEvent(ActionEvent):::Processes action events occurring on this text field by dispatching them to any registered ActionListener objects:::listener->if->listener->actionPerformed
TextField#paramString():::Returns a string representing the state of this TextField:::str->super->paramString->if->return
TextField#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::s->defaultWriteObject->AWTEventMulticaster->save->s->writeObject
TextField#readObject(ObjectInputStream):::Read the ObjectInputStream and if it isn't null, add a listener to receive action events fired by the TextField:::s->defaultReadObject->replaceEOL->if->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addActionListener->else->s->readObject
TextField#getAccessibleContext():::Gets the AccessibleContext associated with this TextField:::if->new->AccessibleAWTTextField->return
TextField.AccessibleAWTTextField#getAccessibleStateSet():::Gets the state set of this object.:::states->super->getAccessibleStateSet->states->add->return
TexturePaint#getImage():::Returns the BufferedImage texture used to fill the shapes.:::return
TexturePaint#getAnchorRect():::Returns a copy of the anchor rectangle which positions and sizes the textured image.:::return->bufImg->getWidth->bufImg->getHeight->new->Rectangle2D.Double
TexturePaint#createContext(ColorModel, Rectangle, Rectangle2D, AffineTransform, RenderingHints):::Creates and returns a PaintContext used to generate a tiled image pattern:::if->new->AffineTransform->else->xform->clone->xform->translate->xform->scale->return->TexturePaintContext->getContext
TexturePaint#getTransparency():::Returns the transparency mode for this TexturePaint.:::return->bufImg->getColorModel->getTransparency
TexturePaintContext#getContext(BufferedImage, AffineTransform, RenderingHints, Rectangle)::: texture paint context get context:::raster->bufImg->getRaster->cm->bufImg->getColorModel->maxw->val->hints->get->filter->hints->get->if->isFilterableDCM->iir->if->iir->getNumDataElements->iir->getPixelStride->return->new->Int->else->if->bir->if->bir->getNumDataElements->bir->getPixelStride->if->if->isFilterableICM->return->new->ByteFilter->else->return->new->Byte->return->new->Any
TexturePaintContext#isFilterableICM(ColorModel)::: texture paint context is filterable m:::if->icm->if->icm->getMapSize->return->return
TexturePaintContext#isFilterableDCM(ColorModel)::: texture paint context is filterable m:::if->dcm->return->dcm->getAlphaMask->isMaskOK->dcm->getRedMask->isMaskOK->dcm->getGreenMask->isMaskOK->dcm->getBlueMask->isMaskOK->return
TexturePaintContext#isMaskOK(int, boolean)::: texture paint context is mask k:::if->return->return
TexturePaintContext#getInternedColorModel(ColorModel)::: texture paint context get interned color model:::if->xrgbmodel->equals->return->if->argbmodel->equals->return->return
TexturePaintContext#fractAsInt(double)::: texture paint context fract as int:::return
TexturePaintContext#mod(double, double)::: texture paint context mod:::if->if->return
TexturePaintContext#dispose():::Release the resources allocated for the operation.:::dropRaster
TexturePaintContext#getColorModel():::Return the ColorModel of the output.:::return
TexturePaintContext#getRaster(int, int, int, int):::Return a Raster containing the colors generated for the graphics operation.:::if->outRas->getWidth->outRas->getHeight->Math->max->makeRaster->X->mod->Y->mod->fractAsInt->fractAsInt->setRaster->SunWritableRaster->markDirty->return
TexturePaintContext#makeRaster(ColorModel, Raster, int, int)::: texture paint context make raster:::if->if->wr->xrgbRasRef->get->if->wr->getWidth->wr->getHeight->return->if->else->if->if->wr->argbRasRef->get->if->wr->getWidth->wr->getHeight->return->if->if->return->srcRas->createCompatibleWritableRaster->else->return->cm->createCompatibleWritableRaster
TexturePaintContext#dropRaster(ColorModel, Raster)::: texture paint context drop raster:::if->return->if->new->WeakReference<>->else->if->new->WeakReference<>
TexturePaintContext#makeByteRaster(Raster, int, int)::: texture paint context make byte raster:::if->wr->byteRasRef->get->if->wr->getWidth->wr->getHeight->return->if->return->srcRas->createCompatibleWritableRaster
TexturePaintContext#dropByteRaster(Raster)::: texture paint context drop byte raster:::if->return->new->WeakReference<>
TexturePaintContext#makeRaster(int, int)::: texture paint context make raster:::
TexturePaintContext#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)::: texture paint context set raster:::
TexturePaintContext#blend(int[], int, int)::: texture paint context blend:::accumA->accumR->accumG->accumB->for->i->return
TexturePaintContext.Int#makeRaster(int, int)::: int make raster:::ras->makeRaster->iiRas->iiRas->getDataStorage->iiRas->getScanlineStride->iiRas->getDataOffset->return
TexturePaintContext.Int#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)::: int set raster:::inData->outData->out->inSpan->inOff->outSpan->filter->normalx->rowx->rowy->rowxerr->rowyerr->if->rgbs->new->intArr->for->j
TexturePaintContext.Byte#makeRaster(int, int)::: byte make raster:::ras->makeByteRaster->biRas->biRas->getDataStorage->biRas->getScanlineStride->biRas->getDataOffset->return
TexturePaintContext.Byte#dispose()::: byte dispose:::dropByteRaster
TexturePaintContext.Byte#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)::: byte set raster:::inData->outData->out->inSpan->inOff->outSpan->normalx->rowx->rowy->rowxerr->rowyerr->if->for->j
TexturePaintContext.ByteFilter#makeRaster(int, int)::: byte filter make raster:::ras->makeRaster->iiRas->iiRas->getDataStorage->iiRas->getScanlineStride->iiRas->getDataOffset->return
TexturePaintContext.ByteFilter#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)::: byte filter set raster:::inData->outData->out->inSpan->inOff->outSpan->rowx->rowy->rowxerr->rowyerr->rgbs->new->intArr->for->j
TexturePaintContext.Any#makeRaster(int, int)::: any make raster:::return->makeRaster
TexturePaintContext.Any#setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)::: any set raster:::data->rowx->rowy->rowxerr->rowyerr->srcRas->outRas->rgbs->new->intArr->for->j
Toolkit#loadSystemColors(int[]):::Fills in the integer array that is supplied as an argument with the current system color values.:::GraphicsEnvironment->checkHeadless
Toolkit#setDynamicLayout(boolean):::Controls whether the layout of Containers is validated dynamically during resizing, or statically, after resizing is complete:::GraphicsEnvironment->checkHeadless->if->getDefaultToolkit->getDefaultToolkit->setDynamicLayout
Toolkit#isDynamicLayoutSet():::Returns whether the layout of Containers is validated dynamically during resizing, or statically, after resizing is complete:::GraphicsEnvironment->checkHeadless->if->Toolkit->getDefaultToolkit->return->Toolkit->getDefaultToolkit->isDynamicLayoutSet->else->return
Toolkit#isDynamicLayoutActive():::Returns whether dynamic layout of Containers on resize is currently enabled on the underlying operating system and/or window manager:::GraphicsEnvironment->checkHeadless->if->Toolkit->getDefaultToolkit->return->Toolkit->getDefaultToolkit->isDynamicLayoutActive->else->return
Toolkit#getScreenSize():::Gets the size of the screen:::
Toolkit#getScreenResolution():::Returns the screen resolution in dots-per-inch.:::
Toolkit#getScreenInsets(GraphicsConfiguration):::Gets the insets of the screen.:::GraphicsEnvironment->checkHeadless->if->Toolkit->getDefaultToolkit->return->Toolkit->getDefaultToolkit->getScreenInsets->else->return->new->Insets
Toolkit#getColorModel():::Determines the color model of this toolkit's screen:::
Toolkit#getFontList():::Returns the names of the available fonts in this toolkit. For 1.1, the following font names are deprecated (the replacement name follows): <ul> <li>TimesRoman (use Serif) <li>Helvetica (use SansSerif) <li>Courier (use Monospaced) </ul> The ZapfDingbats fontname is also deprecated in 1.1 but the characters are defined in Unicode starting at 0x2700, and as of 1.1 Java supports those characters.:::
Toolkit#getFontMetrics(Font):::Gets the screen device metrics for rendering of the font.:::
Toolkit#sync():::Synchronizes this toolkit's graphics state:::
Toolkit#initAssistiveTechnologies():::Initializes properties related to assistive technologies:::sep->properties->new->Properties->new->java.security.PrivilegedAction<String>->doPrivileged
Toolkit#newAWTError(Throwable, String):::Rethrow the AWTError but include the cause.:::newAWTError->new->AWTError->newAWTError->initCause->throw
Toolkit#fallbackToLoadClassForAT(String):::When a service provider for Assistive Technology is not found look for a supporting class on the class path and instantiate it.:::try->c->Class->ClassLoader->getSystemClassLoader->forName->c->getConstructor->newInstance->catch->newAWTError->newAWTError->newAWTError->newAWTError->finally
Toolkit#loadAssistiveTechnologies():::Loads accessibility support using the property assistive_technologies:::if->cl->ClassLoader->getSystemClassLoader->names->Arrays->atNames->split->stream->String->trim->map->Collectors->toSet->collect->providers->new->HashMap<>->AccessController->try->foreach->ServiceLoader->load->name->p->getName->if->names->contains->providers->containsKey->p->activate->providers->put->catch->newAWTError->finally->return->doPrivileged->names->stream->providers->containsKey->filter->Toolkit->fallbackToLoadClassForAT->forEach
Toolkit#getDefaultToolkit():::Gets the default toolkit:::if->new->java.security.PrivilegedAction<Void>->doPrivileged->if->GraphicsEnvironment->isHeadless->loadAssistiveTechnologies->return
Toolkit#getImage(String):::Returns an image which gets pixel data from the specified file, whose format can be either GIF, JPEG or PNG:::
Toolkit#getImage(URL):::Returns an image which gets pixel data from the specified URL:::
Toolkit#createImage(String):::Returns an image which gets pixel data from the specified file:::
Toolkit#createImage(URL):::Returns an image which gets pixel data from the specified URL:::
Toolkit#prepareImage(Image, int, int, ImageObserver):::Prepares an image for rendering:::
Toolkit#checkImage(Image, int, int, ImageObserver):::Indicates the construction status of a specified image that is being prepared for display:::
Toolkit#createImage(ImageProducer):::Creates an image with the specified image producer.:::
Toolkit#createImage(byte[]):::Creates an image which decodes the image stored in the specified byte array:::return->createImage
Toolkit#createImage(byte[], int, int):::Creates an image which decodes the image stored in the specified byte array, and at the specified offset and length:::
Toolkit#getPrintJob(Frame, String, Properties):::Gets a PrintJob object which is the result of initiating a print operation on the toolkit's platform:::
Toolkit#getPrintJob(Frame, String, JobAttributes, PageAttributes):::Gets a PrintJob object which is the result of initiating a print operation on the toolkit's platform:::if->Toolkit->getDefaultToolkit->return->Toolkit->getDefaultToolkit->getPrintJob->else->return->getPrintJob
Toolkit#beep():::Emits an audio beep depending on native system settings and hardware capabilities.:::
Toolkit#getSystemClipboard():::Gets the singleton instance of the system Clipboard which interfaces with clipboard facilities provided by the native platform:::
Toolkit#getSystemSelection():::Gets the singleton instance of the system selection as a Clipboard object:::GraphicsEnvironment->checkHeadless->if->Toolkit->getDefaultToolkit->return->Toolkit->getDefaultToolkit->getSystemSelection->else->GraphicsEnvironment->checkHeadless->return
Toolkit#getMenuShortcutKeyMask():::Determines which modifier key is the appropriate accelerator key for menu shortcuts:::GraphicsEnvironment->checkHeadless->return
Toolkit#getMenuShortcutKeyMaskEx():::Determines which extended modifier key is the appropriate accelerator key for menu shortcuts:::GraphicsEnvironment->checkHeadless->return
Toolkit#getLockingKeyState(int):::Returns whether the given locking key on the keyboard is currently in its "on" state:::GraphicsEnvironment->checkHeadless->if->throw->new->IllegalArgumentException->throw->new->UnsupportedOperationException
Toolkit#setLockingKeyState(int, boolean):::Sets the state of the given locking key on the keyboard:::GraphicsEnvironment->checkHeadless->if->throw->new->IllegalArgumentException->throw->new->UnsupportedOperationException
Toolkit#getNativeContainer(Component):::Give native peers the ability to query the native container given a native component (eg the direct parent may be lightweight).:::return->c->getNativeContainer
Toolkit#createCustomCursor(Image, Point, String):::Creates a new custom cursor object:::if->Toolkit->getDefaultToolkit->return->Toolkit->getDefaultToolkit->createCustomCursor->else->return->new->Cursor
Toolkit#getBestCursorSize(int, int):::Returns the supported cursor dimension which is closest to the desired sizes:::GraphicsEnvironment->checkHeadless->if->Toolkit->getDefaultToolkit->return->Toolkit->getDefaultToolkit->getBestCursorSize->else->return->new->Dimension
Toolkit#getMaximumCursorColors():::Returns the maximum number of colors the Toolkit supports in a custom cursor palette. Note: if an image is used which has more colors in its palette than the supported maximum, the Toolkit implementation will attempt to flatten the palette to the maximum:::GraphicsEnvironment->checkHeadless->if->Toolkit->getDefaultToolkit->return->Toolkit->getDefaultToolkit->getMaximumCursorColors->else->return
Toolkit#isFrameStateSupported(int):::Returns whether Toolkit supports this state for Frames:::GraphicsEnvironment->checkHeadless->if->Toolkit->getDefaultToolkit->return->Toolkit->getDefaultToolkit->isFrameStateSupported->else->return
Toolkit#setPlatformResources(ResourceBundle)::: toolkit set platform resources:::
Toolkit#initIDs():::Initialize JNI field and method ids:::
Toolkit#loadLibraries()::: toolkit load libraries:::if->new->java.security.PrivilegedAction<Void>->doPrivileged
Toolkit#getProperty(String, String):::Gets a property with the specified key and default:::if->try->return->platformResources->getString->catch->finally->if->try->return->resources->getString->catch->finally->return
Toolkit#getSystemEventQueue():::Get the application's or applet's EventQueue instance:::security->System->getSecurityManager->if->security->checkPermission->return->getSystemEventQueueImpl
Toolkit#getSystemEventQueueImpl():::Gets the application's or applet's EventQueue instance, without checking access:::
Toolkit#getEventQueue()::: toolkit get event queue:::return->getDefaultToolkit->getSystemEventQueueImpl
Toolkit#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener):::Creates a concrete, platform dependent, subclass of the abstract DragGestureRecognizer class requested, and associates it with the DragSource, Component and DragGestureListener specified:::return
Toolkit#getDesktopProperty(String):::Obtains a value for the specified desktop property:::if->return->getUnderlyingToolkit->getDesktopProperty->if->desktopProperties->isEmpty->initializeDesktopProperties->value->if->propertyName->equals->return->getDefaultToolkit->lazilyLoadDesktopProperty->desktopProperties->get->if->lazilyLoadDesktopProperty->if->setDesktopProperty->if->clone->return
Toolkit#setDesktopProperty(String, Object):::Sets the named desktop property to the specified value and fires a property change event to notify any listeners that the value has changed.:::if->getUnderlyingToolkit->setDesktopProperty->return->oldValue->synchronized->desktopProperties->get->desktopProperties->put->if->desktopPropsSupport->firePropertyChange
Toolkit#lazilyLoadDesktopProperty(String):::An opportunity to lazily evaluate desktop property values.:::return
Toolkit#initializeDesktopProperties():::initializeDesktopProperties:::
Toolkit#addPropertyChangeListener(String, PropertyChangeListener):::Adds the specified property change listener for the named desktop property:::desktopPropsSupport->addPropertyChangeListener
Toolkit#removePropertyChangeListener(String, PropertyChangeListener):::Removes the specified property change listener for the named desktop property:::desktopPropsSupport->removePropertyChangeListener
Toolkit#getPropertyChangeListeners():::Returns an array of all the property change listeners registered on this toolkit:::return->desktopPropsSupport->getPropertyChangeListeners
Toolkit#getPropertyChangeListeners(String):::Returns an array of all property change listeners associated with the specified name of a desktop property.:::return->desktopPropsSupport->getPropertyChangeListeners
Toolkit#isAlwaysOnTopSupported():::Returns whether the always-on-top mode is supported by this toolkit:::return
Toolkit#isModalityTypeSupported(Dialog.ModalityType):::Returns whether the given modality type is supported by this toolkit:::
Toolkit#isModalExclusionTypeSupported(Dialog.ModalExclusionType):::Returns whether the given modal exclusion type is supported by this toolkit:::
Toolkit#deProxyAWTEventListener(AWTEventListener)::: toolkit de proxy event listener:::localL->if->return->if->getListener->return
Toolkit#addAWTEventListener(AWTEventListener, long):::Adds an AWTEventListener to receive all AWTEvents dispatched system-wide that conform to the given eventMask:::localL->deProxyAWTEventListener->if->return->security->System->getSecurityManager->if->security->checkPermission->synchronized->selectiveListener->listener2SelectiveListener->get->if->new->SelectiveAWTEventListener->listener2SelectiveListener->put->ToolkitEventMulticaster->add->selectiveListener->orEventMasks->mask->for->i
Toolkit#removeAWTEventListener(AWTEventListener):::Removes an AWTEventListener from receiving dispatched AWTEvents:::localL->deProxyAWTEventListener->if->return->security->System->getSecurityManager->if->security->checkPermission->synchronized->selectiveListener->listener2SelectiveListener->get->if->listener2SelectiveListener->remove->listenerCalls->selectiveListener->getCalls->for->i->ToolkitEventMulticaster->remove
Toolkit#enabledOnToolkit(long)::: toolkit enabled on toolkit:::return
Toolkit#countAWTEventListeners(long)::: toolkit count event listeners:::ci->for->return
Toolkit#getAWTEventListeners():::Returns an array of all the AWTEventListeners registered on this toolkit:::security->System->getSecurityManager->if->security->checkPermission->synchronized->la->ToolkitEventMulticaster->getListeners->ret->new->AWTEventListenerArr->for->i->return
Toolkit#getAWTEventListeners(long):::Returns an array of all the AWTEventListeners registered on this toolkit which listen to all of the event types specified in the eventMask argument:::security->System->getSecurityManager->if->security->checkPermission->synchronized->la->ToolkitEventMulticaster->getListeners->list->new->ArrayList<>->for->i->return->list->new->AWTEventListenerArr->toArray
Toolkit#notifyAWTEventListeners(AWTEvent)::: toolkit notify event listeners:::if->getUnderlyingToolkit->notifyAWTEventListeners->return->eventListener->if->eventListener->eventDispatched
Toolkit.ToolkitEventMulticaster#add(AWTEventListener, AWTEventListener)::: toolkit event multicaster add:::if->return->if->return->return->new->ToolkitEventMulticaster
Toolkit.ToolkitEventMulticaster#remove(AWTEventListener, AWTEventListener)::: toolkit event multicaster remove:::return->removeInternal
Toolkit.ToolkitEventMulticaster#remove(EventListener)::: toolkit event multicaster remove:::if->return->if->return->a2->removeInternal->b2->removeInternal->if->return->return->add
Toolkit.ToolkitEventMulticaster#eventDispatched(AWTEvent)::: toolkit event multicaster event dispatched:::eventDispatched->eventDispatched
Toolkit.SelectiveAWTEventListener#getListener()::: selective event listener get listener:::return
Toolkit.SelectiveAWTEventListener#getEventMask()::: selective event listener get event mask:::return
Toolkit.SelectiveAWTEventListener#getCalls()::: selective event listener get calls:::return
Toolkit.SelectiveAWTEventListener#orEventMasks(long)::: selective event listener or event masks:::for->i
Toolkit.SelectiveAWTEventListener#eventDispatched(AWTEvent)::: selective event listener event dispatched:::eventBit->if->ci->for->eMask->for->i
Toolkit#mapInputMethodHighlight(InputMethodHighlight):::Returns a map of visual attributes for the abstract level description of the given input method highlight, or null if no mapping is found:::
Toolkit#createPropertyChangeSupport(Toolkit)::: toolkit create property change support:::if->return->new->DesktopPropertyChangeSupport->else->return->new->PropertyChangeSupport
Toolkit.DesktopPropertyChangeSupport#addPropertyChangeListener(String, PropertyChangeListener)::: desktop property change support add property change listener:::pcs->AppContext->getAppContext->get->if->new->PropertyChangeSupport->AppContext->getAppContext->put->pcs->addPropertyChangeListener
Toolkit.DesktopPropertyChangeSupport#removePropertyChangeListener(String, PropertyChangeListener)::: desktop property change support remove property change listener:::pcs->AppContext->getAppContext->get->if->pcs->removePropertyChangeListener
Toolkit.DesktopPropertyChangeSupport#getPropertyChangeListeners()::: desktop property change support get property change listeners:::pcs->AppContext->getAppContext->get->if->return->pcs->getPropertyChangeListeners->else->return->new->PropertyChangeListenerArr
Toolkit.DesktopPropertyChangeSupport#getPropertyChangeListeners(String)::: desktop property change support get property change listeners:::pcs->AppContext->getAppContext->get->if->return->pcs->getPropertyChangeListeners->else->return->new->PropertyChangeListenerArr
Toolkit.DesktopPropertyChangeSupport#addPropertyChangeListener(PropertyChangeListener)::: desktop property change support add property change listener:::pcs->AppContext->getAppContext->get->if->new->PropertyChangeSupport->AppContext->getAppContext->put->pcs->addPropertyChangeListener
Toolkit.DesktopPropertyChangeSupport#removePropertyChangeListener(PropertyChangeListener)::: desktop property change support remove property change listener:::pcs->AppContext->getAppContext->get->if->pcs->removePropertyChangeListener
Toolkit.DesktopPropertyChangeSupport#firePropertyChange(PropertyChangeEvent)::: desktop property change support fire property change:::oldValue->evt->getOldValue->newValue->evt->getNewValue->propertyName->evt->getPropertyName->if->oldValue->equals->return->updater->new->Runnable->currentAppContext->AppContext->getAppContext->foreach->AppContext->getAppContexts->if->appContext->isDisposed->continue->if->updater->run->else->e->new->PeerEvent->SunToolkit->postEvent
Toolkit#areExtraMouseButtonsEnabled():::Reports whether events from extra mouse buttons are allowed to be processed and posted into EventQueue:::GraphicsEnvironment->checkHeadless->return->Toolkit->getDefaultToolkit->areExtraMouseButtonsEnabled
Transparency#getTransparency():::Returns the type of this Transparency.:::
TrayIcon#getAccessControlContext()::: tray icon get access control context:::if->throw->new->SecurityException->return
TrayIcon#setImage(Image):::Sets the image for this TrayIcon:::if->throw->new->NullPointerException->peer->if->peer->updateImage
TrayIcon#getImage():::Returns the current image used for this TrayIcon.:::return
TrayIcon#setPopupMenu(PopupMenu):::Sets the popup menu for this TrayIcon:::if->return->synchronized->if->if->throw->new->IllegalArgumentException->if
TrayIcon#getPopupMenu():::Returns the popup menu associated with this TrayIcon.:::return
TrayIcon#setToolTip(String):::Sets the tooltip string for this TrayIcon:::peer->if->peer->setToolTip
TrayIcon#getToolTip():::Returns the tooltip string associated with this TrayIcon.:::return
TrayIcon#setImageAutoSize(boolean):::Sets the auto-size property:::peer->if->peer->updateImage
TrayIcon#isImageAutoSize():::Returns the value of the auto-size property.:::return
TrayIcon#addMouseListener(MouseListener):::Adds the specified mouse listener to receive mouse events from this TrayIcon:::if->return->AWTEventMulticaster->add
TrayIcon#removeMouseListener(MouseListener):::Removes the specified mouse listener:::if->return->AWTEventMulticaster->remove
TrayIcon#getMouseListeners():::Returns an array of all the mouse listeners registered on this TrayIcon.:::return->AWTEventMulticaster->getListeners
TrayIcon#addMouseMotionListener(MouseMotionListener):::Adds the specified mouse listener to receive mouse-motion events from this TrayIcon:::if->return->AWTEventMulticaster->add
TrayIcon#removeMouseMotionListener(MouseMotionListener):::Removes the specified mouse-motion listener:::if->return->AWTEventMulticaster->remove
TrayIcon#getMouseMotionListeners():::Returns an array of all the mouse-motion listeners registered on this TrayIcon.:::return->AWTEventMulticaster->getListeners
TrayIcon#getActionCommand():::Returns the command name of the action event fired by this tray icon.:::return
TrayIcon#setActionCommand(String):::Sets the command name for the action event fired by this tray icon:::
TrayIcon#addActionListener(ActionListener):::Adds the specified action listener to receive ActionEvents from this TrayIcon:::if->return->AWTEventMulticaster->add
TrayIcon#removeActionListener(ActionListener):::Removes the specified action listener:::if->return->AWTEventMulticaster->remove
TrayIcon#getActionListeners():::Returns an array of all the action listeners registered on this TrayIcon.:::return->AWTEventMulticaster->getListeners
TrayIcon#displayMessage(String, String, MessageType):::Displays a popup message near the tray icon:::if->throw->new->NullPointerException->peer->if->peer->messageType->name->displayMessage
TrayIcon#getSize():::Returns the size, in pixels, of the space that the tray icon occupies in the system tray:::return->SystemTray->getSystemTray->getTrayIconSize
TrayIcon#addNotify()::: tray icon add notify:::synchronized->if->toolkit->Toolkit->getDefaultToolkit->if->Toolkit->getDefaultToolkit->createTrayIcon->else->if->Toolkit->getDefaultToolkit->createTrayIcon->peer->setToolTip
TrayIcon#removeNotify()::: tray icon remove notify:::p->synchronized->if->popup->removeNotify->if->p->dispose
TrayIcon#setID(int)::: tray icon set d:::
TrayIcon#getID()::: tray icon get d:::return
TrayIcon#dispatchEvent(AWTEvent)::: tray icon dispatch event:::EventQueue->setCurrentEventAndMostRecentTime->Toolkit->getDefaultToolkit->notifyAWTEventListeners->processEvent
TrayIcon#processEvent(AWTEvent)::: tray icon process event:::if->switch->e->getID->processMouseEvent->break->processMouseMotionEvent->break->return->else->if->processActionEvent
TrayIcon#processMouseEvent(MouseEvent)::: tray icon process mouse event:::listener->if->id->e->getID->switch->listener->mousePressed->break->listener->mouseReleased->break->listener->mouseClicked->break->return
TrayIcon#processMouseMotionEvent(MouseEvent)::: tray icon process mouse motion event:::listener->if->e->getID->listener->mouseMoved
TrayIcon#processActionEvent(ActionEvent)::: tray icon process action event:::listener->if->listener->actionPerformed
TrayIcon#initIDs()::: tray icon init ds:::
WaitDispatchSupport#initializeTimer()::: wait dispatch support initialize timer:::if->new->Timer
WaitDispatchSupport#enter()::: wait dispatch support enter:::if->log->isLoggable->log->keepBlockingEDT->get->keepBlockingCT->get->fine->if->keepBlockingEDT->compareAndSet->log->fine->return->try->if->afterExit->get->log->fine->return->run->new->Runnable->currentThread->Thread->currentThread->if->if->log->isLoggable->log->finest->if->if->log->isLoggable->log->finest->timer->new->TimerTask->schedule->currentSE->KeyboardFocusManager->getCurrentKeyboardFocusManager->getCurrentSequencedEvent->if->if->log->isLoggable->log->fine->currentSE->dispose->AccessController->new->PrivilegedAction<Void>->doPrivileged->else->if->log->isLoggable->log->finest->keepBlockingCT->set->synchronized->getTreeLock->if->afterExit->get->return->if->dispatchThread->addEventFilter->try->eq->dispatchThread->getEventQueue->eq->new->PeerEvent->postEvent->if->currTime->System->currentTimeMillis->while->keepBlockingCT->get->extCondition->evaluate->System->currentTimeMillis->getTreeLock->wait->else->while->keepBlockingCT->get->extCondition->evaluate->getTreeLock->wait->if->log->isLoggable->log->keepBlockingEDT->get->keepBlockingCT->get->fine->catch->if->log->isLoggable->log->fine->finally->if->dispatchThread->removeEventFilter->return->catch->finally->keepBlockingEDT->set->keepBlockingCT->set->afterExit->set
WaitDispatchSupport#exit()::: wait dispatch support exit:::if->log->isLoggable->log->keepBlockingEDT->get->keepBlockingCT->get->fine->afterExit->set->if->keepBlockingEDT->getAndSet->wakeupEDT->return->return
WaitDispatchSupport#getTreeLock()::: wait dispatch support get tree lock:::return
WaitDispatchSupport#wakeupEDT()::: wait dispatch support wakeup t:::if->log->isLoggable->log->finest->eq->dispatchThread->getEventQueue->eq->new->PeerEvent->postEvent
Window#initIDs():::Initialize JNI field and method IDs for fields that may be        accessed from C.:::
Window.WindowDisposerRecord#updateOwner()::: window disposer record update owner:::victim->weakThis->get->victim->getOwner->new->WeakReference<Window>
Window.WindowDisposerRecord#dispose()::: window disposer record dispose:::if->parent->owner->get->if->parent->removeOwnedWindow->ac->context->get->if->Window->removeFromWindowList
Window#initGC(GraphicsConfiguration)::: window init c:::GraphicsEnvironment->checkHeadless->if->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->setGraphicsConfiguration->return
Window#init(GraphicsConfiguration)::: window init:::GraphicsEnvironment->checkHeadless->new->WeakReference<Window>->addToWindowList->setWarningString->Cursor->getPredefinedCursor->initGC->if->gc->getDevice->getType->throw->new->IllegalArgumentException->new->BorderLayout->setLayout->screenBounds->gc->getBounds->screenInsets->getToolkit->getScreenInsets->x->getX->y->getY->if->setLocation->setLocationByPlatform->new->WindowDisposerRecord->addRecord->SunToolkit->checkAndSetPolicy
Window#ownedInit(Window)::: window owned init:::if->owner->addOwnedWindow->if->owner->isAlwaysOnTop->try->setAlwaysOnTop->catch->finally->disposerRecord->updateOwner
Window#constructComponentName():::Construct a name for this component:::synchronized->return
Window#getIconImages():::Returns the sequence of images to be displayed as the icon for this window:::icons->if->icons->size->return->new->ArrayList<Image>->return->new->ArrayList<Image>
Window#setIconImages(java.util.List):::Sets the sequence of images to be displayed as the icon for this window:::new->ArrayList<Image>->new->ArrayList<Image>->peer->if->peer->updateIconImages->firePropertyChange
Window#setIconImage(Image):::Sets the image to be displayed as the icon for this window:::imageList->new->ArrayList<Image>->if->imageList->add->setIconImages
Window#addNotify():::Makes this Window displayable by creating the connection to its native screen resource:::synchronized->getTreeLock->parent->if->parent->addNotify->if->getComponentFactory->createWindow->synchronized->allWindows->add->super->addNotify
Window#removeNotify()::: window remove notify:::synchronized->getTreeLock->synchronized->allWindows->remove->super->removeNotify
Window#pack():::Causes this Window to be sized to fit the preferred size and layouts of its subcomponents:::parent->if->parent->addNotify->if->addNotify->newSize->getPreferredSize->if->setClientSize->if->validateUnconditionally
Window#setMinimumSize(Dimension):::Sets the minimum size of this window to a constant value:::synchronized->getTreeLock->super->setMinimumSize->size->getSize->if->isMinimumSizeSet->if->nw->Math->max->nh->Math->max->setSize->if->updateMinimumSize
Window#setSize(Dimension):::The {@code d.width and d.height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize:::super->setSize
Window#setSize(int, int):::The {@code width and height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize:::super->setSize
Window#setLocation(int, int):::  The method changes the geometry-related data:::super->setLocation
Window#setLocation(Point):::  The method changes the geometry-related data:::super->setLocation
Window#reshape(int, int, int, int)::: window reshape:::if->isMinimumSizeSet->minSize->getMinimumSize->if->if->super->reshape
Window#setClientSize(int, int)::: window set client size:::synchronized->getTreeLock->setBoundsOp->setBounds
Window#closeSplashScreen()::: window close splash screen:::if->return->if->beforeFirstWindowShown->getAndSet->SunToolkit->closeSplashScreen->SplashScreen->markClosed
Window#setVisible(boolean):::Shows or hides this Window depending on the value of parameter b:::super->setVisible
Window#show():::Makes the Window visible:::if->addNotify->validateUnconditionally->if->toFront->else->closeSplashScreen->Dialog->checkShouldBeBlocked->super->show->for->i->ownedWindowList->size->if->isModalBlocked->updateChildrenBlocking->else->modalBlocker->toFront_NoClientCode->if->updateChildFocusableWindowState->if->postWindowEvent
Window#updateChildFocusableWindowState(Window)::: window update child focusable window state:::if->w->isShowing->updateFocusableWindowState->for->i->size
Window#postWindowEvent(int)::: window post window event:::if->Toolkit->enabledOnToolkit->e->new->WindowEvent->Toolkit->getEventQueue->postEvent
Window#hide():::Hide this Window, its subcomponents, and all of its owned children:::synchronized->for->i->ownedWindowList->size->if->isModalBlocked->modalBlocker->unblockWindow->super->hide
Window#clearMostRecentFocusOwnerOnHide()::: window clear most recent focus owner on hide:::
Window#dispose():::Releases all of the native screen resources used by this Window, its subcomponents, and all of its owned children:::doDispose
Window#disposeImpl()::: window dispose impl:::dispose->if->doDispose
Window#doDispose()::: window do dispose:::fireWindowClosedEvent->isDisplayable->action->new->DisposeAction->if->EventQueue->isDispatchThread->action->run->else->try->EventQueue->invokeAndWait->catch->println->e->printStackTrace->println->e->printStackTrace->finally->if->postWindowEvent
Window#adjustListeningChildrenOnParent(long, int)::: window adjust listening children on parent:::
Window#adjustDescendantsOnParent(int)::: window adjust descendants on parent:::
Window#toFront():::If this Window is visible, brings this Window to the front and may make it the focused Window:::toFront_NoClientCode
Window#toFront_NoClientCode()::: window to front_ no client code:::if->peer->if->peer->toFront->if->isModalBlocked->modalBlocker->toFront_NoClientCode
Window#toBack():::If this Window is visible, sends this Window to the back and may cause it to lose focus or activation if it is the focused or active Window:::toBack_NoClientCode
Window#toBack_NoClientCode()::: window to back_ no client code:::if->isAlwaysOnTop->try->setAlwaysOnTop->catch->finally->if->peer->if->peer->toBack
Window#getToolkit():::Returns the toolkit of this frame.:::return->Toolkit->getDefaultToolkit
Window#getWarningString():::Gets the warning string that is displayed with this window:::return
Window#setWarningString()::: window set warning string:::sm->System->getSecurityManager->if->try->sm->checkPermission->catch->AccessController->new->GetPropertyAction->doPrivileged->finally
Window#getLocale():::Gets the Locale object that is associated with this window, if the locale has been set:::if->return->Locale->getDefault->return
Window#getInputContext():::Gets the input context for this window:::synchronized->if->InputContext->getInstance->return
Window#setCursor(Cursor):::Set the cursor image to a specified cursor:::if->Cursor->getPredefinedCursor->super->setCursor
Window#getOwner():::Returns the owner of this window.:::return->getOwner_NoClientCode
Window#getOwner_NoClientCode()::: window get owner_ no client code:::return
Window#getOwnedWindows():::Return an array containing all the windows this window currently owns.:::return->getOwnedWindows_NoClientCode
Window#getOwnedWindows_NoClientCode()::: window get owned windows_ no client code:::realCopy->synchronized->fullSize->ownedWindowList->size->realSize->fullCopy->new->WindowArr->for->i->if->Arrays->copyOf->else->return
Window#isModalBlocked()::: window is modal blocked:::return
Window#setModalBlocked(Dialog, boolean, boolean)::: window set modal blocked:::if->peer->if->peer->setModalBlocked
Window#getModalBlocker()::: window get modal blocker:::return
Window#getAllWindows()::: window get all windows:::synchronized->v->new->IdentityArrayList<Window>->v->addAll->return
Window#getAllUnblockedWindows()::: window get all unblocked windows:::synchronized->unblocked->new->IdentityArrayList<Window>->for->i->allWindows->size->return
Window#getWindows(AppContext)::: window get windows:::synchronized->realCopy->windowList->appContext->get->if->fullSize->windowList->size->realSize->fullCopy->new->WindowArr->for->i->if->Arrays->copyOf->else->else->new->WindowArr->return
Window#getWindows():::Returns an array of all Windows, both owned and ownerless, created by this application:::return->AppContext->getAppContext->getWindows
Window#getOwnerlessWindows():::Returns an array of all Windows created by this application that have no owner:::allWindows->Window->getWindows->ownerlessCount->foreach->if->w->getOwner->ownerless->new->WindowArr->c->foreach->if->w->getOwner->return
Window#getDocumentRoot()::: window get document root:::synchronized->getTreeLock->w->while->w->getOwner->w->getOwner->return
Window#setModalExclusionType(Dialog.ModalExclusionType):::Specifies the modal exclusion type for this window:::if->if->Toolkit->getDefaultToolkit->isModalExclusionTypeSupported->if->return->if->sm->System->getSecurityManager->if->sm->checkPermission
Window#getModalExclusionType():::Returns the modal exclusion type of this window.:::return
Window#isModalExcluded(Dialog.ModalExclusionType)::: window is modal excluded:::if->modalExclusionType->compareTo->return->owner->getOwner_NoClientCode->return->owner->isModalExcluded
Window#updateChildrenBlocking()::: window update children blocking:::childHierarchy->new->Vector<Window>->ownedWindows->getOwnedWindows->for->i->k->while->childHierarchy->size->w->childHierarchy->get->if->w->isVisible->if->w->isModalBlocked->blocker->w->getModalBlocker->blocker->unblockWindow->Dialog->checkShouldBeBlocked->wOwned->w->getOwnedWindows->for->j
Window#addWindowListener(WindowListener):::Adds the specified window listener to receive window events from this window:::if->return->AWTEventMulticaster->add
Window#addWindowStateListener(WindowStateListener):::Adds the specified window state listener to receive window events from this window:::if->return->AWTEventMulticaster->add
Window#addWindowFocusListener(WindowFocusListener):::Adds the specified window focus listener to receive window events from this window:::if->return->AWTEventMulticaster->add
Window#removeWindowListener(WindowListener):::Removes the specified window listener so that it no longer receives window events from this window:::if->return->AWTEventMulticaster->remove
Window#removeWindowStateListener(WindowStateListener):::Removes the specified window state listener so that it no longer receives window events from this window:::if->return->AWTEventMulticaster->remove
Window#removeWindowFocusListener(WindowFocusListener):::Removes the specified window focus listener so that it no longer receives window events from this window:::if->return->AWTEventMulticaster->remove
Window#getWindowListeners():::Returns an array of all the window listeners registered on this window.:::return->getListeners
Window#getWindowFocusListeners():::Returns an array of all the window focus listeners registered on this window.:::return->getListeners
Window#getWindowStateListeners():::Returns an array of all the window state listeners registered on this window.:::return->getListeners
Window#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this Window:::l->if->else->if->else->if->else->return->super->getListeners->return->AWTEventMulticaster->getListeners
Window#eventEnabled(AWTEvent)::: window event enabled:::switch->if->return->return->if->return->return->if->return->return->break->return->super->eventEnabled
Window#processEvent(AWTEvent):::Processes events on this window:::if->switch->e->getID->processWindowEvent->break->processWindowFocusEvent->break->processWindowStateEvent->break->return->super->processEvent
Window#processWindowEvent(WindowEvent):::Processes window events occurring on this window by dispatching them to any registered WindowListener objects:::listener->if->switch->e->getID->listener->windowOpened->break->listener->windowClosing->break->listener->windowClosed->break->listener->windowIconified->break->listener->windowDeiconified->break->listener->windowActivated->break->listener->windowDeactivated->break->break
Window#processWindowFocusEvent(WindowEvent):::Processes window focus event occurring on this window by dispatching them to any registered WindowFocusListener objects:::listener->if->switch->e->getID->listener->windowGainedFocus->break->listener->windowLostFocus->break->break
Window#processWindowStateEvent(WindowEvent):::Processes window state event occurring on this window by dispatching them to any registered WindowStateListener objects:::listener->if->switch->e->getID->listener->windowStateChanged->break->break
Window#preProcessKeyEvent(KeyEvent):::Implements a debugging hook -- checks to see if the user has typed control-shift-F1:::if->DebugSettings->getInstance->getBoolean->if->e->isActionKey->e->getKeyCode->e->isControlDown->e->isShiftDown->e->getID->list
Window#postProcessKeyEvent(KeyEvent)::: window post process key event:::
Window#setAlwaysOnTop(boolean):::Sets whether this window should always be above other windows:::security->System->getSecurityManager->if->security->checkPermission->oldAlwaysOnTop->synchronized->if->if->isAlwaysOnTopSupported->peer->synchronized->getTreeLock->if->peer->updateAlwaysOnTopState->firePropertyChange->setOwnedWindowsAlwaysOnTop
Window#setOwnedWindowsAlwaysOnTop(boolean)::: window set owned windows always on top:::ownedWindowArray->synchronized->ownedWindowList->size->new->WeakReferenceArr->ownedWindowList->copyInto->foreach->window->ref->get->if->try->window->setAlwaysOnTop->catch->finally
Window#isAlwaysOnTopSupported():::Returns whether the always-on-top mode is supported for this window:::return->Toolkit->getDefaultToolkit->isAlwaysOnTopSupported
Window#isAlwaysOnTop():::Returns whether this window is an always-on-top window.:::return
Window#getFocusOwner():::Returns the child Component of this Window that has focus if this Window is focused; returns null otherwise.:::return->isFocused->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner
Window#getMostRecentFocusOwner():::Returns the child Component of this Window that will receive the focus when this Window is focused:::if->isFocused->return->getFocusOwner->else->mostRecent->KeyboardFocusManager->getMostRecentFocusOwner->if->return->else->return->isFocusableWindow->getFocusTraversalPolicy->getInitialComponent
Window#isActive():::Returns whether this Window is active:::return->KeyboardFocusManager->getCurrentKeyboardFocusManager->getActiveWindow
Window#isFocused():::Returns whether this Window is focused:::return->KeyboardFocusManager->getCurrentKeyboardFocusManager->getGlobalFocusedWindow
Window#getFocusTraversalKeys(int):::Gets a focus traversal key for this Window:::if->throw->new->IllegalArgumentException->keystrokes->if->return->else->return->KeyboardFocusManager->getCurrentKeyboardFocusManager->getDefaultFocusTraversalKeys
Window#setFocusCycleRoot(boolean):::Does nothing because Windows must always be roots of a focus traversal cycle:::
Window#isFocusCycleRoot():::Always returns true because all Windows must be roots of a focus traversal cycle.:::return
Window#getFocusCycleRootAncestor():::Always returns null because Windows have no ancestors; they represent the top of the Component hierarchy.:::return
Window#isFocusableWindow():::Returns whether this Window can become the focused Window, that is, whether this Window or any of its subcomponents can become the focus owner:::if->getFocusableWindowState->return->if->return->if->getFocusTraversalPolicy->getDefaultComponent->return->for->owner->getOwner->owner->getOwner->return
Window#getFocusableWindowState():::Returns whether this Window can become the focused Window if it meets the other requirements outlined in isFocusableWindow:::return
Window#setFocusableWindowState(boolean):::Sets whether this Window can become the focused Window if it meets the other requirements outlined in isFocusableWindow:::oldFocusableWindowState->synchronized->peer->if->peer->updateFocusableWindowState->firePropertyChange->if->isFocused->for->owner->getOwner->owner->getOwner->KeyboardFocusManager->getCurrentKeyboardFocusManager->clearGlobalFocusOwnerPriv
Window#setAutoRequestFocus(boolean):::Sets whether this window should receive focus on subsequently being shown (with a call to #setVisible setVisible(true)), or being moved to the front (with a call to #toFront):::
Window#isAutoRequestFocus():::Returns whether this window should receive focus on subsequently being shown (with a call to #setVisible setVisible(true)), or being moved to the front (with a call to #toFront):::return
Window#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::super->addPropertyChangeListener
Window#addPropertyChangeListener(String, PropertyChangeListener):::Adds a PropertyChangeListener to the listener list for a specific property:::super->addPropertyChangeListener
Window#isValidateRoot():::Indicates if this container is a validate root:::return
Window#dispatchEventImpl(AWTEvent):::Dispatches an event to this window or one of its sub components.:::if->e->getID->invalidate->validate->super->dispatchEventImpl
Window#postEvent(Event)::: window post event:::if->handleEvent->e->consume->return->return
Window#isShowing():::Checks if this Window is showing on screen.:::return
Window#isDisposing()::: window is disposing:::return
Window#applyResourceBundle(ResourceBundle)::: window apply resource bundle:::ComponentOrientation->getOrientation->applyComponentOrientation
Window#applyResourceBundle(String)::: window apply resource bundle:::cl->Thread->currentThread->getContextClassLoader->if->ClassLoader->getSystemClassLoader->ResourceBundle->cl->getUnnamedModule->getBundle->applyResourceBundle
Window#addOwnedWindow(WeakReference)::: window add owned window:::if->synchronized->if->ownedWindowList->contains->ownedWindowList->addElement
Window#removeOwnedWindow(WeakReference)::: window remove owned window:::if->ownedWindowList->removeElement
Window#connectOwnedWindow(Window)::: window connect owned window:::addOwnedWindow->updateOwner
Window#addToWindowList()::: window add to window list:::synchronized->windowList->appContext->get->if->new->Vector<WeakReference<Window>>->appContext->put->windowList->add
Window#removeFromWindowList(AppContext, WeakReference)::: window remove from window list:::synchronized->windowList->context->get->if->windowList->remove
Window#removeFromWindowList()::: window remove from window list:::removeFromWindowList
Window#setType(Type):::Sets the type of the window:::if->throw->new->IllegalArgumentException->synchronized->getTreeLock->if->isDisplayable->throw->new->IllegalComponentStateException->synchronized->getObjectLock
Window#getType():::Returns the type of the window.:::synchronized->getObjectLock->return
Window#writeObject(ObjectOutputStream):::Writes default serializable fields to stream:::synchronized->new->FocusManager->getMostRecentFocusOwner->s->defaultWriteObject->AWTEventMulticaster->save->AWTEventMulticaster->save->AWTEventMulticaster->save->s->writeObject->synchronized->for->i->ownedWindowList->size->s->writeObject->if->foreach->if->s->writeObject->s->writeObject
Window#initDeserializedWindow()::: window init deserialized window:::setWarningString->new->Object->new->WeakReference<>->new->Object->new->WindowDisposerRecord->addRecord->addToWindowList->initGC->new->Vector<>
Window#deserializeResources(ObjectInputStream)::: window deserialize resources:::if->if->if->KeyboardFocusManager->setMostRecentFocusOwner->keyOrNull->while->s->readObject->key->intern->if->s->readObject->addWindowListener->else->if->s->readObject->addWindowFocusListener->else->if->s->readObject->addWindowStateListener->else->s->readObject->try->while->s->readObject->key->intern->if->s->readObject->connectOwnedWindow->else->s->readObject->obj->s->readObject->new->ArrayList<Image>->while->if->icons->add->s->readObject->catch->finally
Window#readObject(ObjectInputStream):::Reads the ObjectInputStream and an optional list of listeners to receive various events fired by the component; also reads a list of (possibly null) child windows:::GraphicsEnvironment->checkHeadless->initDeserializedWindow->f->s->readFields->f->get->f->get->f->get->f->get->f->get->f->get->et->f->get->setModalExclusionType->aot->f->get->if->setAlwaysOnTop->f->get->f->get->deserializeResources
Window#getAccessibleContext():::Gets the AccessibleContext associated with this Window:::if->new->AccessibleAWTWindow->return
Window.AccessibleAWTWindow#getAccessibleRole():::Get the role of this object.:::return
Window.AccessibleAWTWindow#getAccessibleStateSet():::Get the state of this object.:::states->super->getAccessibleStateSet->if->getFocusOwner->states->add->return
Window#setGraphicsConfiguration(GraphicsConfiguration)::: window set graphics configuration:::if->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->synchronized->getTreeLock->super->setGraphicsConfiguration->if->log->isLoggable->log->getGraphicsConfiguration_NoClientCode->finer
Window#setLocationRelativeTo(Component):::Sets the location of the window relative to the specified component according to the following scenarios:::dx->dy->gc->getGraphicsConfiguration_NoClientCode->gcBounds->gc->getBounds->windowSize->getSize->componentWindow->SunToolkit->getContainingWindow->if->ge->GraphicsEnvironment->getLocalGraphicsEnvironment->ge->getDefaultScreenDevice->getDefaultConfiguration->gc->getBounds->centerPoint->ge->getCenterPoint->else->if->c->isShowing->componentWindow->getGraphicsConfiguration->gc->getBounds->else->componentWindow->getGraphicsConfiguration->gc->getBounds->compSize->c->getSize->compLocation->c->getLocationOnScreen->if->if->else->if->if->if->if->setLocation
Window#deliverMouseWheelToAncestor(MouseWheelEvent):::Overridden from Component:::
Window#dispatchMouseWheelToAncestor(MouseWheelEvent):::Overridden from Component:::return
Window#createBufferStrategy(int):::Creates a new strategy for multi-buffering on this component:::super->createBufferStrategy
Window#createBufferStrategy(int, BufferCapabilities):::Creates a new strategy for multi-buffering on this component with the required buffer capabilities:::super->createBufferStrategy
Window#getBufferStrategy():::Returns the BufferStrategy used by this component:::return->super->getBufferStrategy
Window#getTemporaryLostComponent()::: window get temporary lost component:::return
Window#setTemporaryLostComponent(Component)::: window set temporary lost component:::previousComp->if->component->canBeFocusOwner->else->return
Window#canContainFocusOwner(Component):::Checks whether this window can contain focus owner:::return->super->canContainFocusOwner->isFocusableWindow
Window#setLocationByPlatform(boolean):::Sets whether this Window should appear at the default location for the native windowing system or at the current location (returned by getLocation) the next time the Window is made visible:::synchronized->getTreeLock->if->isShowing->throw->new->IllegalComponentStateException
Window#isLocationByPlatform():::Returns true if this Window will appear at the default location for the native windowing system the next time this Window is made visible:::return
Window#setBounds(int, int, int, int):::The {@code width or height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize:::synchronized->getTreeLock->if->getBoundsOp->getBoundsOp->super->setBounds
Window#setBounds(Rectangle):::The {@code r.width or r.height values will be automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize:::setBounds
Window#isRecursivelyVisible():::Determines whether this component will be displayed on the screen.:::return
Window#getOpacity():::Returns the opacity of the window.:::return
Window#setOpacity(float):::Sets the opacity of the window:::synchronized->getTreeLock->if->throw->new->IllegalArgumentException->if->gc->getGraphicsConfiguration->gd->gc->getDevice->if->gc->getDevice->getFullScreenWindow->throw->new->IllegalComponentStateException->if->gd->isWindowTranslucencySupported->throw->new->UnsupportedOperationException->peer->if->peer->setOpacity
Window#getShape():::Returns the shape of the window:::synchronized->getTreeLock->return->new->Path2D.Float
Window#setShape(Shape):::Sets the shape of the window:::synchronized->getTreeLock->if->gc->getGraphicsConfiguration->gd->gc->getDevice->if->gc->getDevice->getFullScreenWindow->throw->new->IllegalComponentStateException->if->gd->isWindowTranslucencySupported->throw->new->UnsupportedOperationException->new->Path2D.Float->peer->if->peer->Region->getInstance->applyShape
Window#getBackground():::Gets the background color of this window:::return->super->getBackground
Window#setBackground(Color):::Sets the background color of this window:::oldBg->getBackground->super->setBackground->if->oldBg->equals->return->oldAlpha->oldBg->getAlpha->alpha->bgColor->getAlpha->if->gc->getGraphicsConfiguration->gd->gc->getDevice->if->gc->getDevice->getFullScreenWindow->throw->new->IllegalComponentStateException->if->gc->isTranslucencyCapable->capableGC->gd->getTranslucencyCapableGC->if->throw->new->UnsupportedOperationException->setGraphicsConfiguration->setLayersOpaque->else->if->setLayersOpaque->peer->if->peer->setOpaque
Window#isOpaque():::Indicates if the window is currently opaque:::bg->getBackground->return->bg->getAlpha
Window#updateWindow()::: window update window:::synchronized->getTreeLock->peer->if->peer->updateWindow
Window#paint(Graphics)::: window paint:::if->isOpaque->gg->g->create->try->if->gg->getBackground->setColor->AlphaComposite->getInstance->setComposite->gg->getWidth->getHeight->fillRect->catch->finally->gg->dispose->super->paint
Window#setLayersOpaque(Component, boolean)::: window set layers opaque:::if->SunToolkit->isInstanceOf->rpc->root->rpc->getRootPane->lp->root->getLayeredPane->c->root->getContentPane->content->lp->setOpaque->root->setOpaque->if->content->setOpaque->numChildren->content->getComponentCount->if->child->content->getComponent->if->setLayersOpaque
Window#getContainer()::: window get container:::return
Window#applyCompoundShape(Region):::Applies the shape to the component:::
Window#applyCurrentShape()::: window apply current shape:::
Window#mixOnReshaping()::: window mix on reshaping:::
Window#getLocationOnWindow()::: window get location on window:::return->new->Point
Window#limit(double, double, double):::Limit the given double value with the given range.:::Math->max->Math->min->return
Window#calculateSecurityWarningPosition(double, double, double, double):::Calculate the position of the security warning:::wx->wy->Window->limit->Window->limit->graphicsConfig->getGraphicsConfiguration_NoClientCode->screenBounds->graphicsConfig->getBounds->screenInsets->Toolkit->getDefaultToolkit->getScreenInsets->Window->limit->Window->limit->return->new->Point2D.Double
Window#updateZOrder()::: window update order:::
